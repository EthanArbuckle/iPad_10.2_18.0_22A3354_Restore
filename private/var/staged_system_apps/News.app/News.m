void sub_100005550(id a1, NSError *a2)
{
  NSError *v2;
  NSObject *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v2 = a2;
  v3 = FCDefaultLog;
  if (os_log_type_enabled(FCDefaultLog, OS_LOG_TYPE_ERROR))
    sub_10001881C((uint64_t)v2, v3, v4, v5, v6, v7, v8, v9);

}

uint64_t FeldsparInternalExtrasEnabled()
{
  if (qword_10010A728 != -1)
    dispatch_once(&qword_10010A728, &stru_1000DD8B0);
  return byte_10010A730;
}

void sub_1000055E0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;

  v2 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "loadedConfiguration"));
  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v4 = *(void **)(v3 + 40);
  *(_QWORD *)(v3 + 40) = v2;

  v5 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "operation"));
  v6 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
  v7 = *(void **)(v6 + 40);
  *(_QWORD *)(v6 + 40) = v5;

}

id sub_1000056F0(id a1, TFResolver *a2)
{
  return (id)objc_opt_new(FRNewsActivityInteractionSerializer, a2);
}

void sub_1000058EC(uint64_t a1)
{
  id v2;
  id v3;
  id v4;
  uint64_t v5;
  void *v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  _BYTE v11[128];

  v7 = 0u;
  v8 = 0u;
  v9 = 0u;
  v10 = 0u;
  v2 = *(id *)(a1 + 32);
  v3 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v7, v11, 16);
  if (v3)
  {
    v4 = v3;
    v5 = *(_QWORD *)v8;
    do
    {
      v6 = 0;
      do
      {
        if (*(_QWORD *)v8 != v5)
          objc_enumerationMutation(v2);
        objc_msgSend(*(id *)(*((_QWORD *)&v7 + 1) + 8 * (_QWORD)v6), "performWithPrivateDataContext:", *(_QWORD *)(a1 + 40), (_QWORD)v7);
        v6 = (char *)v6 + 1;
      }
      while (v4 != v6);
      v4 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v7, v11, 16);
    }
    while (v4);
  }

  dispatch_group_leave(*(dispatch_group_t *)(a1 + 48));
}

void sub_1000059E4(id a1)
{
  void *v1;
  id v2;

  if (NFInternalBuild(a1))
  {
    v2 = (id)objc_claimAutoreleasedReturnValue(+[FRPPTContext sharedContext](FRPPTContext, "sharedContext"));
    if (objc_msgSend(v2, "isRunningPPT"))
    {
      byte_10010A730 = 0;
    }
    else
    {
      v1 = (void *)objc_claimAutoreleasedReturnValue(+[NSBundle fr_feldsparInternalExtrasBundle](NSBundle, "fr_feldsparInternalExtrasBundle"));
      byte_10010A730 = v1 != 0;

    }
  }
  else
  {
    byte_10010A730 = 0;
  }
}

FCPuzzleDownloadServiceType *__cdecl sub_100005BBC(id a1, TFResolver *a2)
{
  void *v2;
  id v3;

  v2 = (void *)objc_claimAutoreleasedReturnValue(-[TFResolver resolveProtocol:](a2, "resolveProtocol:", &OBJC_PROTOCOL___FCContentContext));
  v3 = objc_msgSend(objc_alloc((Class)FCPuzzleDownloadService), "initWithContext:", v2);

  return (FCPuzzleDownloadServiceType *)v3;
}

void sub_100005C6C(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  v2 = *(_QWORD *)(a1 + 32);
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "loadedConfiguration"));
  (*(void (**)(uint64_t, void *))(v2 + 16))(v2, v3);

}

void sub_100005D60(uint64_t a1)
{
  void *v2;
  _QWORD v3[5];
  char v4;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "autoFavoritesQueue"));
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_10000AFEC;
  v3[3] = &unk_1000DB558;
  v3[4] = *(_QWORD *)(a1 + 32);
  v4 = *(_BYTE *)(a1 + 40);
  objc_msgSend(v2, "enqueueBlock:", v3);

}

FRNewsBridgeDeeplinkRouter *sub_100005E8C(uint64_t a1)
{
  FRNewsBridgeDeeplinkRouter *v2;
  void *v3;
  FRNewsBridgeDeeplinkRouter *v4;

  v2 = [FRNewsBridgeDeeplinkRouter alloc];
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[UIApplication sharedApplication](UIApplication, "sharedApplication"));
  v4 = -[FRNewsBridgeDeeplinkRouter initWithApplication:bridgedAppDelegate:](v2, "initWithApplication:bridgedAppDelegate:", v3, *(_QWORD *)(a1 + 32));

  return v4;
}

void sub_100005F60(id a1)
{
  uint64_t v1;
  void *v2;
  id v3;

  v3 = (id)objc_claimAutoreleasedReturnValue(+[UIDevice currentDevice](UIDevice, "currentDevice"));
  v1 = objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "systemVersion"));
  v2 = (void *)qword_10010A4E0;
  qword_10010A4E0 = v1;

}

id sub_100006120(uint64_t a1)
{
  id v2;
  void *v3;
  id v4;
  id v5;

  v2 = objc_alloc((Class)NTPBPublisherFavorabilityScores);
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "objectForKeyedSubscript:", CFSTR("favorability_scores")));
  v4 = objc_msgSend(v2, "initWithData:", v3);

  v5 = objc_msgSend(objc_alloc((Class)FCPersonalizationFavorabilityScores), "initWithPBFavorabilityScores:", v4);
  return v5;
}

FRToCEditorialManager *__cdecl sub_100006198(id a1, TFResolver *a2)
{
  TFResolver *v2;
  uint64_t v3;
  id v4;
  void *v5;

  v2 = a2;
  v4 = -[TFResolver resolveClass:](v2, "resolveClass:", objc_opt_class(FRToCEditorialManager, v3));
  v5 = (void *)objc_claimAutoreleasedReturnValue(v4);

  return (FRToCEditorialManager *)v5;
}

id sub_1000061E4(uint64_t a1)
{
  id v2;
  void *v3;
  id v4;
  id v5;

  v2 = objc_alloc((Class)NTPBBundleIDMapping);
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "objectForKeyedSubscript:", CFSTR("bundle_id_mapping")));
  v4 = objc_msgSend(v2, "initWithData:", v3);

  v5 = objc_msgSend(objc_alloc((Class)FCPersonalizationBundleIDMapping), "initWithPBBundleIDMapping:", v4);
  return v5;
}

id sub_100006368(uint64_t a1)
{
  id v2;
  void *v3;
  id v4;
  id v5;

  v2 = objc_alloc((Class)NTPBURLMapping);
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "objectForKeyedSubscript:", CFSTR("url_mapping")));
  v4 = objc_msgSend(v2, "initWithData:", v3);

  v5 = objc_msgSend(objc_alloc((Class)FCPersonalizationURLMapping), "initWithPBURLMapping:", v4);
  return v5;
}

TSEditorialItemProvider *__cdecl sub_1000064C8(id a1, TFResolver *a2)
{
  TFResolver *v2;
  uint64_t v3;
  id v4;
  void *v5;

  v2 = a2;
  v4 = -[TFResolver resolveClass:](v2, "resolveClass:", objc_opt_class(FRToCEditorialManager, v3));
  v5 = (void *)objc_claimAutoreleasedReturnValue(v4);

  return (TSEditorialItemProvider *)v5;
}

void sub_1000069C8(uint64_t a1, char a2, void *a3)
{
  id v5;
  id v6;
  _QWORD activity_block[5];
  id v8;
  char v9;

  v5 = a3;
  activity_block[0] = _NSConcreteStackBlock;
  activity_block[1] = 3221225472;
  activity_block[2] = sub_100014E4C;
  activity_block[3] = &unk_1000DB480;
  v9 = a2;
  activity_block[4] = *(_QWORD *)(a1 + 32);
  v8 = v5;
  v6 = v5;
  _os_activity_initiate((void *)&_mh_execute_header, "handleDestructiveDataMigration", OS_ACTIVITY_FLAG_DEFAULT, activity_block);

}

void sub_100006AD0(uint64_t a1)
{
  id v2;
  _QWORD v3[5];
  _QWORD block[4];
  id v5;

  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_100008DA8;
  block[3] = &unk_1000D9758;
  v2 = (id)objc_claimAutoreleasedReturnValue(+[SUUIClientContext defaultContext](SUUIClientContext, "defaultContext"));
  v5 = v2;
  dispatch_async((dispatch_queue_t)&_dispatch_main_q, block);
  if ((+[FCGeoUtilities isRunningInSupportedRegion](FCGeoUtilities, "isRunningInSupportedRegion") & 1) == 0)
  {
    v3[0] = _NSConcreteStackBlock;
    v3[1] = 3221225472;
    v3[2] = sub_1000576A0;
    v3[3] = &unk_1000D9758;
    v3[4] = *(_QWORD *)(a1 + 32);
    dispatch_async((dispatch_queue_t)&_dispatch_main_q, v3);

  }
}

FRURLRouterManagerType *__cdecl sub_100006CF4(id a1, TFResolver *a2)
{
  TFResolver *v2;
  uint64_t v3;
  id v4;
  void *v5;

  v2 = a2;
  v4 = -[TFResolver resolveClass:](v2, "resolveClass:", objc_opt_class(FRVanityURLRouterManager, v3));
  v5 = (void *)objc_claimAutoreleasedReturnValue(v4);

  return (FRURLRouterManagerType *)v5;
}

void sub_100006D40(id a1)
{
  void *v1;
  uint64_t v2;
  void *v3;
  id v4;

  v4 = (id)objc_claimAutoreleasedReturnValue(+[NSFileManager defaultManager](NSFileManager, "defaultManager"));
  v1 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "containerURLForSecurityApplicationGroupIdentifier:", NSSSecurityApplicationGroupIdentifier));
  v2 = objc_claimAutoreleasedReturnValue(objc_msgSend(v1, "URLByAppendingPathComponent:isDirectory:", CFSTR("Spotlight"), 1));
  v3 = (void *)qword_10010A998;
  qword_10010A998 = v2;

}

FREditorialItemCreator *__cdecl sub_100006F8C(id a1, TFResolver *a2)
{
  TFResolver *v2;
  FREditorialItemCreator *v3;
  void *v4;
  FREditorialItemCreator *v5;

  v2 = a2;
  v3 = [FREditorialItemCreator alloc];
  v4 = (void *)objc_claimAutoreleasedReturnValue(-[TFResolver resolveProtocol:](v2, "resolveProtocol:", &OBJC_PROTOCOL___FREditorialItemThumbnailCreator));

  v5 = -[FREditorialItemCreator initWithThumbnailCreator:](v3, "initWithThumbnailCreator:", v4);
  return v5;
}

id sub_100007058(uint64_t a1)
{
  void *v1;
  void *v2;

  v1 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "resolver"));
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v1, "resolveProtocol:", &OBJC_PROTOCOL___FCOfflineArticleManagerType));

  return v2;
}

FCSubscriptionController *__cdecl sub_1000073D8(id a1, TFResolver *a2)
{
  TFResolver *v2;
  uint64_t v3;
  id v4;
  void *v5;
  void *v6;

  v2 = a2;
  v4 = -[TFResolver resolveClass:](v2, "resolveClass:", objc_opt_class(FCCloudContext, v3));
  v5 = (void *)objc_claimAutoreleasedReturnValue(v4);

  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "subscriptionController"));
  return (FCSubscriptionController *)v6;
}

FCLocalAreasManager *__cdecl sub_100007438(id a1, TFResolver *a2)
{
  TFResolver *v2;
  uint64_t v3;
  id v4;
  void *v5;
  void *v6;

  v2 = a2;
  v4 = -[TFResolver resolveClass:](v2, "resolveClass:", objc_opt_class(FCCloudContext, v3));
  v5 = (void *)objc_claimAutoreleasedReturnValue(v4);

  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "localAreasManager"));
  return (FCLocalAreasManager *)v6;
}

id sub_100007498(uint64_t a1)
{
  id v2;
  void *v3;
  void *v4;
  void *v5;
  id v6;

  v2 = objc_alloc((Class)FCKeyValueStore);
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "feldsparContext"));
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "cloudContext"));
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "contentDirectory"));
  v6 = objc_msgSend(v2, "initWithName:directory:version:options:classRegistry:", CFSTR("EditorialManager"), v5, 1, 0, 0);

  return v6;
}

FCPuzzleController *__cdecl sub_100007694(id a1, TFResolver *a2)
{
  TFResolver *v2;
  uint64_t v3;
  id v4;
  void *v5;
  void *v6;

  v2 = a2;
  v4 = -[TFResolver resolveClass:](v2, "resolveClass:", objc_opt_class(FCCloudContext, v3));
  v5 = (void *)objc_claimAutoreleasedReturnValue(v4);

  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "puzzleController"));
  return (FCPuzzleController *)v6;
}

FCAssetManager *__cdecl sub_1000076F4(id a1, TFResolver *a2)
{
  TFResolver *v2;
  uint64_t v3;
  id v4;
  void *v5;
  void *v6;

  v2 = a2;
  v4 = -[TFResolver resolveClass:](v2, "resolveClass:", objc_opt_class(FCCloudContext, v3));
  v5 = (void *)objc_claimAutoreleasedReturnValue(v4);

  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "assetManager"));
  return (FCAssetManager *)v6;
}

id sub_1000078B8(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "analyticsController");
}

FCSportsEventController *__cdecl sub_1000078C0(id a1, TFResolver *a2)
{
  TFResolver *v2;
  uint64_t v3;
  id v4;
  void *v5;
  void *v6;

  v2 = a2;
  v4 = -[TFResolver resolveClass:](v2, "resolveClass:", objc_opt_class(FCCloudContext, v3));
  v5 = (void *)objc_claimAutoreleasedReturnValue(v4);

  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "sportsEventController"));
  return (FCSportsEventController *)v6;
}

FREditorialItemEntryManager *__cdecl sub_100007920(id a1, TFResolver *a2)
{
  TFResolver *v2;
  uint64_t v3;
  id v4;
  void *v5;
  FREditorialItemEntryManager *v6;

  v2 = a2;
  v4 = -[TFResolver resolveClass:name:](v2, "resolveClass:name:", objc_opt_class(FCKeyValueStore, v3), CFSTR("editorialLocalStore"));
  v5 = (void *)objc_claimAutoreleasedReturnValue(v4);

  v6 = -[FREditorialItemEntryManager initWithLocalStore:]([FREditorialItemEntryManager alloc], "initWithLocalStore:", v5);
  return v6;
}

uint64_t FRShouldPrefetchIgnoringNetworkInterface(void *a1)
{
  id v1;
  uint64_t v2;
  void *v3;
  void *v4;

  v1 = a1;
  if (objc_msgSend(v1, "isNetworkReachable")
    && (objc_msgSend(v1, "isLowDataModeEnabled") & 1) == 0)
  {
    v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSProcessInfo processInfo](NSProcessInfo, "processInfo"));
    if ((objc_msgSend(v3, "isLowPowerModeEnabled") & 1) != 0)
    {
      v2 = 0;
    }
    else
    {
      v4 = (void *)objc_claimAutoreleasedReturnValue(+[FRPPTContext sharedContext](FRPPTContext, "sharedContext"));
      v2 = objc_msgSend(v4, "isPrefetchDisabled") ^ 1;

    }
  }
  else
  {
    v2 = 0;
  }

  return v2;
}

FCPurchaseController *__cdecl sub_100007A24(id a1, TFResolver *a2)
{
  TFResolver *v2;
  uint64_t v3;
  id v4;
  void *v5;
  void *v6;

  v2 = a2;
  v4 = -[TFResolver resolveClass:](v2, "resolveClass:", objc_opt_class(FCCloudContext, v3));
  v5 = (void *)objc_claimAutoreleasedReturnValue(v4);

  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "purchaseController"));
  return (FCPurchaseController *)v6;
}

void sub_100007A84(id a1, TFResolver *a2, FRUnrecognizedURLRouter *a3)
{
  FRUnrecognizedURLRouter *v4;
  TFResolver *v5;
  uint64_t v6;
  id v7;
  id v8;

  v4 = a3;
  v5 = a2;
  v7 = -[TFResolver resolveClass:](v5, "resolveClass:", objc_opt_class(FRURLRouterManager, v6));
  v8 = (id)objc_claimAutoreleasedReturnValue(v7);

  -[FRUnrecognizedURLRouter setRetryHandler:](v4, "setRetryHandler:", v8);
}

FCArticleController *__cdecl sub_100007AFC(id a1, TFResolver *a2)
{
  TFResolver *v2;
  uint64_t v3;
  id v4;
  void *v5;
  void *v6;

  v2 = a2;
  v4 = -[TFResolver resolveClass:](v2, "resolveClass:", objc_opt_class(FCCloudContext, v3));
  v5 = (void *)objc_claimAutoreleasedReturnValue(v4);

  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "articleController"));
  return (FCArticleController *)v6;
}

FRPrefetchedArticlesService *sub_100007B5C(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  id v5;
  void *v6;
  FRPrefetchedArticlesService *v7;

  v3 = a2;
  v5 = objc_msgSend(v3, "resolveClass:", objc_opt_class(FCAssetManager, v4));
  v6 = (void *)objc_claimAutoreleasedReturnValue(v5);

  v7 = -[FRPrefetchedArticlesService initWithFeldsparContext:assetManager:]([FRPrefetchedArticlesService alloc], "initWithFeldsparContext:assetManager:", *(_QWORD *)(a1 + 32), v6);
  return v7;
}

id sub_100007C34(uint64_t a1)
{
  void *v2;
  void *v3;
  uint64_t v4;
  void *v5;

  v2 = (void *)objc_claimAutoreleasedReturnValue(+[CSSearchableIndex defaultSearchableIndex](CSSearchableIndex, "defaultSearchableIndex"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "indexDelegate"));

  if (v3 && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
    sub_100083798();
  v4 = *(_QWORD *)(a1 + 32);
  v5 = (void *)objc_claimAutoreleasedReturnValue(+[CSSearchableIndex defaultSearchableIndex](CSSearchableIndex, "defaultSearchableIndex"));
  objc_msgSend(v5, "setIndexDelegate:", v4);

  return objc_msgSend(*(id *)(a1 + 32), "createSpotlightDirectoryIfNeeded");
}

FCPurchaseManagerType *__cdecl sub_100007E0C(id a1, TFResolver *a2)
{
  TFResolver *v2;
  uint64_t v3;
  id v4;
  void *v5;
  void *v6;

  v2 = a2;
  v4 = -[TFResolver resolveClass:](v2, "resolveClass:", objc_opt_class(FCCloudContext, v3));
  v5 = (void *)objc_claimAutoreleasedReturnValue(v4);

  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "purchaseManager"));
  return (FCPurchaseManagerType *)v6;
}

FCTagController *__cdecl sub_100007E6C(id a1, TFResolver *a2)
{
  TFResolver *v2;
  uint64_t v3;
  id v4;
  void *v5;
  void *v6;

  v2 = a2;
  v4 = -[TFResolver resolveClass:](v2, "resolveClass:", objc_opt_class(FCCloudContext, v3));
  v5 = (void *)objc_claimAutoreleasedReturnValue(v4);

  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "tagController"));
  return (FCTagController *)v6;
}

void sub_100007FC4(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 40));
  _Unwind_Resume(a1);
}

FCEntitlementService *__cdecl sub_1000080B8(id a1, TFResolver *a2)
{
  TFResolver *v2;
  uint64_t v3;
  id v4;
  void *v5;
  void *v6;

  v2 = a2;
  v4 = -[TFResolver resolveClass:](v2, "resolveClass:", objc_opt_class(FCCloudContext, v3));
  v5 = (void *)objc_claimAutoreleasedReturnValue(v4);

  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "entitlementService"));
  return (FCEntitlementService *)v6;
}

FCTranslationManager *__cdecl sub_100008118(id a1, TFResolver *a2)
{
  TFResolver *v2;
  uint64_t v3;
  id v4;
  void *v5;
  void *v6;

  v2 = a2;
  v4 = -[TFResolver resolveClass:](v2, "resolveClass:", objc_opt_class(FCCloudContext, v3));
  v5 = (void *)objc_claimAutoreleasedReturnValue(v4);

  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "translationManager"));
  return (FCTranslationManager *)v6;
}

FCAVAssetFactoryType *__cdecl sub_100008178(id a1, TFResolver *a2)
{
  TFResolver *v2;
  uint64_t v3;
  id v4;
  void *v5;
  void *v6;

  v2 = a2;
  v4 = -[TFResolver resolveClass:](v2, "resolveClass:", objc_opt_class(FCCloudContext, v3));
  v5 = (void *)objc_claimAutoreleasedReturnValue(v4);

  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "avAssetFactory"));
  return (FCAVAssetFactoryType *)v6;
}

FCNotificationController *__cdecl sub_1000083D0(id a1, TFResolver *a2)
{
  TFResolver *v2;
  uint64_t v3;
  id v4;
  void *v5;
  void *v6;

  v2 = a2;
  v4 = -[TFResolver resolveClass:](v2, "resolveClass:", objc_opt_class(FCCloudContext, v3));
  v5 = (void *)objc_claimAutoreleasedReturnValue(v4);

  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "notificationController"));
  return (FCNotificationController *)v6;
}

void sub_1000084E8(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  id v5;
  _QWORD v6[4];
  id v7;

  v3 = a2;
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "fetchedObject"));
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_10000C258;
  v6[3] = &unk_1000DB188;
  v7 = v3;
  v5 = v3;
  objc_msgSend(v4, "enumerateObjectsUsingBlock:", v6);

}

FCPPTContext *__cdecl sub_100008668(id a1, TFResolver *a2)
{
  TFResolver *v2;
  uint64_t v3;
  id v4;
  void *v5;
  void *v6;

  v2 = a2;
  v4 = -[TFResolver resolveClass:](v2, "resolveClass:", objc_opt_class(FCCloudContext, v3));
  v5 = (void *)objc_claimAutoreleasedReturnValue(v4);

  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "pptContext"));
  return (FCPPTContext *)v6;
}

FCPersonalizationData *__cdecl sub_1000089D0(id a1, TFResolver *a2)
{
  TFResolver *v2;
  uint64_t v3;
  id v4;
  void *v5;
  void *v6;

  v2 = a2;
  v4 = -[TFResolver resolveClass:](v2, "resolveClass:", objc_opt_class(FCCloudContext, v3));
  v5 = (void *)objc_claimAutoreleasedReturnValue(v4);

  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "personalizationData"));
  return (FCPersonalizationData *)v6;
}

FCPuzzleTypeController *__cdecl sub_100008ABC(id a1, TFResolver *a2)
{
  TFResolver *v2;
  uint64_t v3;
  id v4;
  void *v5;
  void *v6;

  v2 = a2;
  v4 = -[TFResolver resolveClass:](v2, "resolveClass:", objc_opt_class(FCCloudContext, v3));
  v5 = (void *)objc_claimAutoreleasedReturnValue(v4);

  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "puzzleTypeController"));
  return (FCPuzzleTypeController *)v6;
}

void sub_100008B1C(uint64_t a1)
{
  void *v2;
  void *v3;
  id v4;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "assetHandle"));
  v4 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "filePath"));

  if (v4)
  {
    v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSData dataWithContentsOfFile:](NSData, "dataWithContentsOfFile:", v4));
    objc_msgSend(*(id *)(a1 + 40), "setEmbedConfigurationData:", v3);

    objc_msgSend(*(id *)(a1 + 40), "setEmbedConfigurationIdentifier:", *(_QWORD *)(a1 + 48));
  }
  objc_msgSend(*(id *)(a1 + 40), "finishedPerformingOperationWithError:", *(_QWORD *)(a1 + 56));

}

FCAVAssetPrewarming *__cdecl sub_100008CE8(id a1, TFResolver *a2)
{
  TFResolver *v2;
  uint64_t v3;
  id v4;
  void *v5;
  void *v6;

  v2 = a2;
  v4 = -[TFResolver resolveClass:](v2, "resolveClass:", objc_opt_class(FCCloudContext, v3));
  v5 = (void *)objc_claimAutoreleasedReturnValue(v4);

  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "avAssetPrewarmer"));
  return (FCAVAssetPrewarming *)v6;
}

FCPurchaseProviderType *__cdecl sub_100008D48(id a1, TFResolver *a2)
{
  TFResolver *v2;
  uint64_t v3;
  id v4;
  void *v5;
  void *v6;

  v2 = a2;
  v4 = -[TFResolver resolveClass:](v2, "resolveClass:", objc_opt_class(FCCloudContext, v3));
  v5 = (void *)objc_claimAutoreleasedReturnValue(v4);

  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "purchaseProvider"));
  return (FCPurchaseProviderType *)v6;
}

void sub_100008DA8(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  _QWORD v6[5];
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t (*v10)(uint64_t, uint64_t);
  void (*v11)(uint64_t);
  id v12;

  v2 = (void *)objc_claimAutoreleasedReturnValue(+[UIApplication sharedApplication](UIApplication, "sharedApplication"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "key_window"));
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "rootViewController"));

  v7 = 0;
  v8 = &v7;
  v9 = 0x3032000000;
  v10 = sub_100018654;
  v11 = sub_10001854C;
  v12 = objc_msgSend(objc_alloc((Class)SUUIExplicitRestrictionAlertController), "initWithClientContext:presentingViewController:", *(_QWORD *)(a1 + 32), v4);
  v5 = (void *)v8[5];
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_10005768C;
  v6[3] = &unk_1000DA528;
  v6[4] = &v7;
  objc_msgSend(v5, "presentExplicitRestrictionAlertIfNeededOfType:completionBlock:", 0, v6);
  _Block_object_dispose(&v7, 8);

}

void sub_100008EA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

FREditorialItemDownloader *__cdecl sub_100008EC0(id a1, TFResolver *a2)
{
  TFResolver *v2;
  FRTagEditorialItemDownloader *v3;
  uint64_t v4;
  id v5;
  void *v6;
  void *v7;
  FRTagEditorialItemDownloader *v8;

  v2 = a2;
  v3 = [FRTagEditorialItemDownloader alloc];
  v5 = -[TFResolver resolveClass:](v2, "resolveClass:", objc_opt_class(FCTagController, v4));
  v6 = (void *)objc_claimAutoreleasedReturnValue(v5);
  v7 = (void *)objc_claimAutoreleasedReturnValue(-[TFResolver resolveProtocol:](v2, "resolveProtocol:", &OBJC_PROTOCOL___FREditorialItemEntryManager));

  v8 = -[FRTagEditorialItemDownloader initWithTagController:editorialItemEntryManager:](v3, "initWithTagController:editorialItemEntryManager:", v6, v7);
  return (FREditorialItemDownloader *)v8;
}

FRUnrecognizedURLRouter *__cdecl sub_100009100(id a1, TFResolver *a2)
{
  TFResolver *v2;
  FRUnrecognizedURLRouter *v3;
  void *v4;
  uint64_t v5;
  id v6;
  void *v7;
  FRUnrecognizedURLRouter *v8;

  v2 = a2;
  v3 = [FRUnrecognizedURLRouter alloc];
  v4 = (void *)objc_claimAutoreleasedReturnValue(-[TFResolver resolveProtocol:](v2, "resolveProtocol:", &OBJC_PROTOCOL___FRURLAnalyticsReferralFactory));
  v6 = -[TFResolver resolveClass:](v2, "resolveClass:", objc_opt_class(FCVanityURLRedirectService, v5));
  v7 = (void *)objc_claimAutoreleasedReturnValue(v6);

  v8 = -[FRUnrecognizedURLRouter initWithAnalyticsReferralFactory:redirectService:](v3, "initWithAnalyticsReferralFactory:redirectService:", v4, v7);
  return v8;
}

FCIssueReadingHistory *__cdecl sub_100009380(id a1, TFResolver *a2)
{
  void *v2;
  void *v3;

  v2 = (void *)objc_claimAutoreleasedReturnValue(-[TFResolver resolveProtocol:](a2, "resolveProtocol:", &OBJC_PROTOCOL___FCPrivateDataContext));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "issueReadingHistory"));

  return (FCIssueReadingHistory *)v3;
}

FREditorialConfigurationProvider *__cdecl sub_1000093C4(id a1, TFResolver *a2)
{
  TFResolver *v2;
  uint64_t v3;
  id v4;
  void *v5;
  FREditorialConfigurationProvider *v6;
  void *v7;
  FREditorialConfigurationProvider *v8;

  v2 = a2;
  v4 = -[TFResolver resolveClass:](v2, "resolveClass:", objc_opt_class(FCCloudContext, v3));
  v5 = (void *)objc_claimAutoreleasedReturnValue(v4);

  v6 = [FREditorialConfigurationProvider alloc];
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "appConfigurationManager"));
  v8 = -[FREditorialConfigurationProvider initWithAppConfigurationManager:](v6, "initWithAppConfigurationManager:", v7);

  return v8;
}

void sub_100009524(uint64_t a1, void *a2)
{
  id v3;
  _QWORD v4[4];
  id v5;
  id v6;
  id v7;

  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  v4[2] = sub_1000058EC;
  v4[3] = &unk_1000DC0B0;
  v5 = objc_msgSend(a2, "copy");
  v6 = *(id *)(a1 + 32);
  v7 = *(id *)(a1 + 40);
  v3 = v5;
  FCPerformBlockOnMainThread(v4);

}

FCArticleDownloadServiceType *__cdecl sub_1000098F8(id a1, TFResolver *a2)
{
  TFResolver *v2;
  void *v3;
  void *v4;
  id v5;

  v2 = a2;
  v3 = (void *)objc_claimAutoreleasedReturnValue(-[TFResolver resolveProtocol:](v2, "resolveProtocol:", &OBJC_PROTOCOL___FCContentContext));
  v4 = (void *)objc_claimAutoreleasedReturnValue(-[TFResolver resolveProtocol:](v2, "resolveProtocol:", &OBJC_PROTOCOL___FCANFHelper));

  v5 = objc_msgSend(objc_alloc((Class)FCArticleDownloadService), "initWithContext:ANFHelper:", v3, v4);
  return (FCArticleDownloadServiceType *)v5;
}

void sub_100009A64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_10000A288(uint64_t a1, void *a2, uint64_t a3)
{
  void *v5;
  void *v6;
  void *v7;
  id v8;
  id v9;
  uint64_t v10;
  void *v11;
  void **v12;
  uint64_t v13;
  void (*v14)(uint64_t, void *, void *);
  void *v15;
  id v16;
  uint64_t v17;
  void *v18;

  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "embedConfigurationAssetID"));
  if (!v5)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      sub_1000776CC();
    goto LABEL_7;
  }
  if (a3 || (objc_msgSend(*(id *)(a1 + 32), "isCancelled") & 1) != 0)
  {
LABEL_7:
    objc_msgSend(*(id *)(a1 + 32), "finishedPerformingOperationWithError:", 0);
    goto LABEL_8;
  }
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "resourceManager"));
  v18 = v5;
  v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v18, 1));
  v8 = objc_msgSend(*(id *)(a1 + 32), "relativePriority");
  v12 = _NSConcreteStackBlock;
  v13 = 3221225472;
  v14 = sub_10001C5CC;
  v15 = &unk_1000D9848;
  v9 = v5;
  v10 = *(_QWORD *)(a1 + 32);
  v16 = v9;
  v17 = v10;
  v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "fetchResourcesWithIdentifiers:downloadAssets:relativePriority:callBackQueue:completionBlock:", v7, 0, v8, &_dispatch_main_q, &v12));

  objc_msgSend(*(id *)(a1 + 32), "associateChildOperation:", v11, v12, v13, v14, v15);
LABEL_8:

}

FRArticleEditorialItemProvider *__cdecl sub_10000A3FC(id a1, TFResolver *a2)
{
  TFResolver *v2;
  FRArticleEditorialItemProvider *v3;
  void *v4;
  void *v5;
  void *v6;
  FRArticleEditorialItemProvider *v7;

  v2 = a2;
  v3 = [FRArticleEditorialItemProvider alloc];
  v4 = (void *)objc_claimAutoreleasedReturnValue(-[TFResolver resolveProtocol:](v2, "resolveProtocol:", &OBJC_PROTOCOL___FREditorialItemEntryManager));
  v5 = (void *)objc_claimAutoreleasedReturnValue(-[TFResolver resolveProtocol:](v2, "resolveProtocol:", &OBJC_PROTOCOL___FREditorialItemThumbnailCreator));
  v6 = (void *)objc_claimAutoreleasedReturnValue(-[TFResolver resolveProtocol:](v2, "resolveProtocol:", &OBJC_PROTOCOL___FREditorialItemCreator));

  v7 = -[FRArticleEditorialItemProvider initWithEditorialItemEntryManager:thumbnailCreator:editorialItemCreator:](v3, "initWithEditorialItemEntryManager:thumbnailCreator:editorialItemCreator:", v4, v5, v6);
  return v7;
}

int main(int argc, const char **argv, const char **envp)
{
  void *v5;
  uint64_t v6;
  void *v7;
  void *v8;
  void *v9;
  objc_class *v10;
  NSString *v11;
  NSString *v12;
  uint64_t v13;
  objc_class *v14;
  NSString *v15;
  NSString *v16;
  int v17;

  v5 = objc_autoreleasePoolPush();
  if ((TFAmIBeingDebugged() & 1) == 0 && TFSetupCrashDetector())
  {
    v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSUserDefaults standardUserDefaults](NSUserDefaults, "standardUserDefaults"));
    objc_msgSend(v7, "setBool:forKey:", 1, CFSTR("should_clear_cache_on_next_launch"));

    v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSFileManager defaultManager](NSFileManager, "defaultManager"));
    v9 = (void *)objc_claimAutoreleasedReturnValue(+[FRAppDelegate stateRestorationURL](FRAppDelegate, "stateRestorationURL"));
    objc_msgSend(v8, "removeItemAtURL:error:", v9, 0);

  }
  v10 = (objc_class *)objc_opt_class(FRApplication, v6);
  v11 = NSStringFromClass(v10);
  v12 = (NSString *)objc_claimAutoreleasedReturnValue(v11);
  v14 = (objc_class *)objc_opt_class(FRAppDelegate, v13);
  v15 = NSStringFromClass(v14);
  v16 = (NSString *)objc_claimAutoreleasedReturnValue(v15);
  objc_autoreleasePoolPop(v5);
  v17 = UIApplicationMain(argc, (char **)argv, v12, v16);

  return v17;
}

void sub_10000A754(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_10000A770(uint64_t a1, void *a2)
{
  id v3;
  id WeakRetained;
  FRFlintEmbedConfiguration *v5;
  void *v6;
  FRFlintEmbedConfiguration *v7;
  _QWORD v8[5];
  FRFlintEmbedConfiguration *v9;

  v3 = a2;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    if (v3)
      v5 = -[FRFlintEmbedConfiguration initWithData:]([FRFlintEmbedConfiguration alloc], "initWithData:", v3);
    else
      v5 = 0;
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "lock"));
    v8[0] = _NSConcreteStackBlock;
    v8[1] = 3221225472;
    v8[2] = sub_100018718;
    v8[3] = &unk_1000D97A8;
    v8[4] = WeakRetained;
    v9 = v5;
    v7 = v5;
    objc_msgSend(v6, "performWithLockSync:", v8);

  }
}

FCIssueDownloadServiceType *__cdecl sub_10000A9D4(id a1, TFResolver *a2)
{
  TFResolver *v2;
  void *v3;
  void *v4;
  void *v5;
  id v6;

  v2 = a2;
  v3 = (void *)objc_claimAutoreleasedReturnValue(-[TFResolver resolveProtocol:](v2, "resolveProtocol:", &OBJC_PROTOCOL___FCContentContext));
  v4 = (void *)objc_claimAutoreleasedReturnValue(-[TFResolver resolveProtocol:](v2, "resolveProtocol:", &OBJC_PROTOCOL___FCANFHelper));
  v5 = (void *)objc_claimAutoreleasedReturnValue(-[TFResolver resolveProtocol:](v2, "resolveProtocol:", &OBJC_PROTOCOL___FCArticleDownloadServiceType));

  v6 = objc_msgSend(objc_alloc((Class)FCIssueDownloadService), "initWithContext:ANFHelper:articleDownloadService:", v3, v4, v5);
  return (FCIssueDownloadServiceType *)v6;
}

FRArticlePrefetchManager *__cdecl sub_10000AA78(id a1, TFResolver *a2)
{
  TFResolver *v2;
  FRArticlePrefetchManager *v3;
  uint64_t v4;
  id v5;
  void *v6;
  uint64_t v7;
  id v8;
  void *v9;
  FRArticlePrefetchManager *v10;

  v2 = a2;
  v3 = [FRArticlePrefetchManager alloc];
  v5 = -[TFResolver resolveClass:](v2, "resolveClass:", objc_opt_class(FCCloudContext, v4));
  v6 = (void *)objc_claimAutoreleasedReturnValue(v5);
  v8 = -[TFResolver resolveClass:](v2, "resolveClass:", objc_opt_class(FRArticleContentPool, v7));
  v9 = (void *)objc_claimAutoreleasedReturnValue(v8);

  v10 = -[FRArticlePrefetchManager initWithCloudContext:articleContentPool:](v3, "initWithCloudContext:articleContentPool:", v6, v9);
  return v10;
}

void sub_10000AB18(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  id v5;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "feldsparContext"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "gizmoSyncManager"));
  objc_msgSend(v3, "syncWithGizmo");

  v5 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "feldsparContext"));
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "favoritesPersonalizer"));
  objc_msgSend(v4, "refreshAutoFavoritesInBackgroundDisregardingCache:", 1);

}

FCOfflineIssueList *__cdecl sub_10000ACB4(id a1, TFResolver *a2)
{
  TFResolver *v2;
  id v3;
  uint64_t v4;
  void *v5;
  void *v6;
  void *v7;
  id v8;

  v2 = a2;
  v3 = objc_alloc((Class)FCOfflineIssueList);
  v4 = FCURLForContainerizedUserAccountDocumentDirectory(1);
  v5 = (void *)objc_claimAutoreleasedReturnValue(v4);
  v6 = (void *)objc_claimAutoreleasedReturnValue(-[TFResolver resolveProtocol:](v2, "resolveProtocol:", &OBJC_PROTOCOL___FCAppActivityMonitor));
  v7 = (void *)objc_claimAutoreleasedReturnValue(-[TFResolver resolveProtocol:](v2, "resolveProtocol:", &OBJC_PROTOCOL___FCBackgroundTaskable));

  v8 = objc_msgSend(v3, "initWithStoreDirectoryFileURL:appActivityMonitor:backgroundTaskable:", v5, v6, v7);
  return (FCOfflineIssueList *)v8;
}

FRVanityURLRouterManager *__cdecl sub_10000AD64(id a1, TFResolver *a2)
{
  TFResolver *v2;
  FRVanityURLRouterManager *v3;
  void *v4;
  uint64_t v5;
  id v6;
  void *v7;
  uint64_t v8;
  id v9;
  void *v10;
  FRVanityURLRouterManager *v11;

  v2 = a2;
  v3 = [FRVanityURLRouterManager alloc];
  v4 = (void *)objc_claimAutoreleasedReturnValue(-[TFResolver resolveProtocol:](v2, "resolveProtocol:", &OBJC_PROTOCOL___FRURLAnalyticsReferralFactory));
  v6 = -[TFResolver resolveClass:](v2, "resolveClass:", objc_opt_class(FCVanityURLRedirectService, v5));
  v7 = (void *)objc_claimAutoreleasedReturnValue(v6);
  v9 = -[TFResolver resolveClass:](v2, "resolveClass:", objc_opt_class(FRURLRouterManager, v8));
  v10 = (void *)objc_claimAutoreleasedReturnValue(v9);

  v11 = -[FRVanityURLRouterManager initWithAnalyticsReferralFactory:redirectService:routerManager:](v3, "initWithAnalyticsReferralFactory:redirectService:routerManager:", v4, v7, v10);
  return v11;
}

FRUserNotificationResponseHandler *sub_10000AF20(uint64_t a1, void *a2)
{
  id v3;
  FRUserNotificationResponseHandler *v4;
  uint64_t v5;
  id v6;
  void *v7;
  void *v8;
  uint64_t v9;
  id v10;
  void *v11;
  FRUserNotificationResponseHandler *v12;

  v3 = a2;
  v4 = [FRUserNotificationResponseHandler alloc];
  v6 = objc_msgSend(v3, "resolveClass:", objc_opt_class(TSBridgedNewsActivityNavigator, v5));
  v7 = (void *)objc_claimAutoreleasedReturnValue(v6);
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "feldsparContext"));
  v10 = objc_msgSend(v3, "resolveClass:", objc_opt_class(FCCloudContext, v9));
  v11 = (void *)objc_claimAutoreleasedReturnValue(v10);

  v12 = -[FRUserNotificationResponseHandler initWithNavigator:feldsparContext:cloudContext:](v4, "initWithNavigator:feldsparContext:cloudContext:", v7, v8, v11);
  return v12;
}

id sub_10000AFE4(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "analyticsController");
}

void sub_10000AFEC(uint64_t a1, void *a2)
{
  void *v3;
  void (**v4)(_QWORD);
  void *v5;
  void *v6;
  id v7;
  uint64_t v8;
  void *v9;
  id v10;
  _QWORD v11[4];
  id v12;
  _QWORD v13[5];
  id v14;

  v3 = *(void **)(a1 + 32);
  v4 = a2;
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "autoFavoritesCursor"));
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "_createNewAutoFavoritesOperation"));
  objc_msgSend(v6, "setQualityOfService:", 9);
  objc_msgSend(v6, "setRelativePriority:", -1);
  objc_msgSend(v6, "setDisregardCache:", *(unsigned __int8 *)(a1 + 40));
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 3221225472;
  v13[2] = sub_100032FA4;
  v13[3] = &unk_1000DB530;
  v13[4] = *(_QWORD *)(a1 + 32);
  v14 = v5;
  v7 = v5;
  objc_msgSend(v6, "setAutoFavoritesCompletionHandler:", v13);
  v4[2](v4);

  v9 = (void *)objc_opt_class(*(_QWORD *)(a1 + 32), v8);
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472;
  v11[2] = sub_100033150;
  v11[3] = &unk_1000DB0E8;
  v12 = v6;
  v10 = v6;
  objc_msgSend(v9, "logPPMessage:", v11);
  +[FCTaskScheduler scheduleLowPriorityOperation:](FCTaskScheduler, "scheduleLowPriorityOperation:", v10);

}

id sub_10000B20C(uint64_t a1)
{
  id v2;
  void *v3;
  id v4;
  id v5;

  v2 = objc_alloc((Class)NTPBPersonalizationWhitelist);
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "objectForKeyedSubscript:", CFSTR("whitelist")));
  v4 = objc_msgSend(v2, "initWithData:", v3);

  v5 = objc_msgSend(objc_alloc((Class)FCPersonalizationWhitelist), "initWithPBPersonalizationWhitelist:", v4);
  return v5;
}

void sub_10000BBD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  uint64_t v11;
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v11 - 80), 8);
  _Unwind_Resume(a1);
}

void sub_10000BBFC(uint64_t a1)
{
  void *v1;
  void *v2;
  uint64_t v3;
  id v4;
  void *v5;
  void *v6;
  id v7;
  void *v8;
  void *v9;
  void *v10;
  uint64_t v11;
  void *v12;
  id v13;
  unsigned int v14;
  id v15;
  void *v16;
  id v17;
  void *v18;
  void *v19;
  id v20;
  void *v21;
  void *v22;
  uint64_t v23;
  void *v24;
  void *v25;
  uint64_t v26;
  NSString *v27;
  void *v28;
  void *v29;
  NSURLResourceKey v30;
  void *v31;
  void *v32;
  void *v33;
  void *v34;
  id v35;
  id v36;
  id v37;
  uint64_t v38;
  void *v39;
  void *v40;
  unsigned int v41;
  id v42;
  void *v43;
  id v44;
  unsigned int v45;
  id v46;
  void *v47;
  NSObject *v48;
  void *v49;
  id v50;
  void *v51;
  void *v52;
  void *v53;
  void *v54;
  void *v55;
  void *v57;
  id v58;
  id v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  _QWORD v64[4];
  id v65;
  _QWORD v66[4];
  id v67;
  _QWORD v68[4];
  id v69;
  uint8_t buf[4];
  void *v71;
  __int16 v72;
  id v73;
  _BYTE v74[128];
  NSURLResourceKey v75;
  void *v76;
  _QWORD v77[4];

  v77[0] = CFSTR("ImageCache-");
  v1 = (void *)objc_claimAutoreleasedReturnValue(+[FRFeedImageGenerationOptions imageCachePrefix](FRFeedImageGenerationOptions, "imageCachePrefix"));
  v77[1] = v1;
  v77[2] = CFSTR("Topic-Images");
  v77[3] = CFSTR("Personalization_Data/ArticleChoiceStore");
  v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", v77, 4));

  if ((NFInternalBuild(v3) & 1) != 0)
  {
    v55 = v2;
  }
  else
  {
    v4 = objc_msgSend(v2, "mutableCopy");
    objc_msgSend(v4, "addObject:", CFSTR("Personalization_Data/knowledgeC.db"));

    v55 = v4;
  }
  v5 = (void *)objc_claimAutoreleasedReturnValue(+[FRFeedImageGenerationOptions imageCacheName](FRFeedImageGenerationOptions, "imageCacheName"));
  v76 = v5;
  v54 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v76, 1));

  v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSFileManager defaultManager](NSFileManager, "defaultManager"));
  v7 = FRURLForNewsAppCachesDirectory();
  v8 = (void *)objc_claimAutoreleasedReturnValue(v7);
  v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "path"));

  v57 = v6;
  v53 = v9;
  v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "enumeratorAtPath:", v9));
  v11 = objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "nextObject"));
  if (v11)
  {
    v12 = (void *)v11;
    do
    {
      v68[0] = _NSConcreteStackBlock;
      v68[1] = 3221225472;
      v68[2] = sub_10003BB28;
      v68[3] = &unk_1000DB8C8;
      v13 = v12;
      v69 = v13;
      v14 = objc_msgSend(v55, "fc_containsObjectPassingTest:", v68);
      if (v14
        && (v66[0] = _NSConcreteStackBlock,
            v66[1] = 3221225472,
            v66[2] = sub_10003BB34,
            v66[3] = &unk_1000DB8C8,
            v15 = v13,
            v67 = v15,
            (objc_msgSend(v54, "fc_containsObjectPassingTest:", v66) & 1) == 0))
      {
        v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "stringByAppendingPathComponent:", v15));
        objc_msgSend(v57, "removeItemAtPath:error:", v16, 0);

      }
      else
      {
        v64[0] = _NSConcreteStackBlock;
        v64[1] = 3221225472;
        v64[2] = sub_10003BB40;
        v64[3] = &unk_1000DB8C8;
        v65 = v13;
        if ((objc_msgSend(v55, "fc_containsObjectPassingTest:", v64) & 1) == 0)
          objc_msgSend(v10, "skipDescendants");

        if (!v14)
          goto LABEL_14;
      }

LABEL_14:
      v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "nextObject"));

    }
    while (v12);
  }
  v17 = objc_alloc((Class)NSURL);
  v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "cloudContext"));
  v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v18, "contentDirectory"));
  v20 = objc_msgSend(v17, "initFileURLWithPath:isDirectory:", v19, 1);
  v21 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v20, "path"));

  v22 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v57, "enumeratorAtPath:", v21));
  v23 = objc_claimAutoreleasedReturnValue(objc_msgSend(v22, "nextObject"));
  if (v23)
  {
    v24 = (void *)v23;
    do
    {
      if (objc_msgSend(v24, "hasPrefix:", CFSTR("today-feed-database")))
      {
        v25 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v21, "stringByAppendingPathComponent:", v24));
        objc_msgSend(v57, "removeItemAtPath:error:", v25, 0);

      }
      v26 = objc_claimAutoreleasedReturnValue(objc_msgSend(v22, "nextObject"));

      v24 = (void *)v26;
    }
    while (v26);
  }
  v51 = v22;
  v52 = v21;
  v27 = NSTemporaryDirectory();
  v28 = (void *)objc_claimAutoreleasedReturnValue(v27);
  v29 = (void *)objc_claimAutoreleasedReturnValue(+[NSURL fileURLWithPath:](NSURL, "fileURLWithPath:", v28));
  v30 = NSURLContentModificationDateKey;
  v75 = NSURLContentModificationDateKey;
  v31 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v75, 1));
  v32 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v57, "contentsOfDirectoryAtURL:includingPropertiesForKeys:options:error:", v29, v31, 4, 0));

  v33 = (void *)objc_claimAutoreleasedReturnValue(+[NSProcessInfo processInfo](NSProcessInfo, "processInfo"));
  v34 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v33, "fc_processLaunchDate"));

  v62 = 0u;
  v63 = 0u;
  v60 = 0u;
  v61 = 0u;
  v35 = v32;
  v36 = objc_msgSend(v35, "countByEnumeratingWithState:objects:count:", &v60, v74, 16);
  if (v36)
  {
    v37 = v36;
    v38 = *(_QWORD *)v61;
    do
    {
      v39 = 0;
      do
      {
        if (*(_QWORD *)v61 != v38)
          objc_enumerationMutation(v35);
        v40 = *(void **)(*((_QWORD *)&v60 + 1) + 8 * (_QWORD)v39);
        v59 = 0;
        v41 = objc_msgSend(v40, "getResourceValue:forKey:error:", &v59, v30, 0, v51, v52);
        v42 = v59;
        v43 = v42;
        if (v41 && objc_msgSend(v42, "fc_isEarlierThan:", v34))
        {
          v44 = v35;
          v58 = 0;
          v45 = objc_msgSend(v57, "removeItemAtURL:error:", v40, &v58);
          v46 = v58;
          v47 = (void *)FCDefaultLog;
          if (v45)
          {
            if (os_log_type_enabled(FCDefaultLog, OS_LOG_TYPE_DEFAULT))
            {
              v48 = v47;
              v49 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v40, "absoluteString"));
              *(_DWORD *)buf = 138543362;
              v71 = v49;
              _os_log_impl((void *)&_mh_execute_header, v48, OS_LOG_TYPE_DEFAULT, "Removed stale file from temporary directory: %{public}@", buf, 0xCu);
              goto LABEL_30;
            }
          }
          else if (os_log_type_enabled(FCDefaultLog, OS_LOG_TYPE_ERROR))
          {
            v48 = v47;
            v49 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v40, "absoluteString"));
            *(_DWORD *)buf = 138543618;
            v71 = v49;
            v72 = 2114;
            v73 = v46;
            _os_log_error_impl((void *)&_mh_execute_header, v48, OS_LOG_TYPE_ERROR, "Failed to remove stale file from temporary directory: %{public}@, error=%{public}@", buf, 0x16u);
LABEL_30:

          }
          v35 = v44;
          v30 = NSURLContentModificationDateKey;
        }

        v39 = (char *)v39 + 1;
      }
      while (v37 != v39);
      v50 = objc_msgSend(v35, "countByEnumeratingWithState:objects:count:", &v60, v74, 16);
      v37 = v50;
    }
    while (v50);
  }

}

void sub_10000C258(uint64_t a1, void *a2)
{
  id v3;
  void *v4;

  v3 = a2;
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "resourceID"));
  if (!v4 && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
    sub_10007B75C();
  objc_msgSend(*(id *)(a1 + 32), "fc_safelySetObjectAllowingNil:forKeyAllowingNil:", v3, v4);

}

FCVanityURLRedirectService *__cdecl sub_10000C2C8(id a1, TFResolver *a2)
{
  TFResolver *v2;
  id v3;
  void *v4;
  id v5;

  v2 = a2;
  v3 = objc_alloc((Class)FCVanityURLRedirectService);
  v4 = (void *)objc_claimAutoreleasedReturnValue(-[TFResolver resolveProtocol:](v2, "resolveProtocol:", &OBJC_PROTOCOL___FCContentContext));

  v5 = objc_msgSend(v3, "initWithContentContext:", v4);
  return (FCVanityURLRedirectService *)v5;
}

void sub_10000C338(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  _QWORD *v8;
  id v9;
  id v10;
  void *v11;
  _QWORD v12[4];
  id v13;
  id v14;
  uint64_t *v15;
  _QWORD v16[4];
  id v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t (*v22)(uint64_t, uint64_t);
  void (*v23)(uint64_t);
  id v24;
  uint8_t buf[4];
  id v26;

  v5 = a2;
  v6 = a3;
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "topStoriesPublishDates"));
  if (objc_msgSend(v7, "count"))
  {
    v19 = 0;
    v20 = &v19;
    v21 = 0x3032000000;
    v22 = sub_100018624;
    v23 = sub_100018534;
    v24 = objc_msgSend(*(id *)(a1 + 32), "_newCompanionConnection");
    objc_msgSend((id)v20[5], "resume");
    v16[0] = _NSConcreteStackBlock;
    v16[1] = 3221225472;
    v16[2] = sub_10004EE40;
    v16[3] = &unk_1000DC7B8;
    v17 = *(id *)(a1 + 40);
    v18 = &v19;
    v8 = objc_retainBlock(v16);
    v9 = &_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_INFO))
    {
      v10 = objc_msgSend(v7, "count");
      *(_DWORD *)buf = 134217984;
      v26 = v10;
      _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_INFO, "Syncing refresh dates %ld…", buf, 0xCu);
    }

    v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend((id)v20[5], "remoteObjectProxyWithErrorHandler:", v8));
    v12[0] = _NSConcreteStackBlock;
    v12[1] = 3221225472;
    v12[2] = sub_10004EEBC;
    v12[3] = &unk_1000DC8D0;
    v13 = v7;
    v14 = *(id *)(a1 + 40);
    v15 = &v19;
    objc_msgSend(v11, "setPreferredRefreshDates:withReply:", v13, v12);

    _Block_object_dispose(&v19, 8);
  }
  else
  {
    (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
  }

}

void sub_10000C57C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_list va;

  va_start(va, a15);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10000C5A4(uint64_t a1)
{
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));
}

void sub_10000C5AC(uint64_t a1)
{
  id v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  uint64_t v9;
  void *v10;
  void *v11;
  unsigned __int8 v12;
  void *v13;
  unsigned int v14;
  void *v15;
  unsigned int v16;
  id v17;
  NSObject *v18;
  uint64_t v19;
  void *v20;
  unsigned __int8 v21;
  id v22;
  NSObject *v23;
  uint64_t v24;
  id v25;
  id v26;

  v2 = FRURLForNewsAppCachesDirectory();
  v3 = (void *)objc_claimAutoreleasedReturnValue(v2);
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "path"));

  v5 = (void *)objc_claimAutoreleasedReturnValue(+[FCAppleAccount sharedAccount](FCAppleAccount, "sharedAccount"));
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "contentStoreFrontID"));

  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "imageCachePrefix"));
  v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@%lu-%@"), v7, 15, v6));
  v9 = objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "stringByAppendingPathComponent:", v8));
  v10 = (void *)qword_10010A528;
  qword_10010A528 = v9;

  v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSFileManager defaultManager](NSFileManager, "defaultManager"));
  v12 = objc_msgSend(v11, "fileExistsAtPath:", qword_10010A528);

  v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSUserDefaults standardUserDefaults](NSUserDefaults, "standardUserDefaults"));
  v14 = objc_msgSend(v13, "BOOLForKey:", CFSTR("clear-card-image-cache"));

  if (!v14)
    goto LABEL_7;
  v15 = (void *)objc_claimAutoreleasedReturnValue(+[NSFileManager defaultManager](NSFileManager, "defaultManager"));
  v26 = 0;
  v16 = objc_msgSend(v15, "removeItemAtPath:error:", qword_10010A528, &v26);
  v17 = v26;

  if (!v16)
  {
    v18 = FCDefaultLog;
    if (os_log_type_enabled(FCDefaultLog, OS_LOG_TYPE_ERROR))
      sub_10007D4F8((uint64_t)v17, v18, v19);

LABEL_7:
    if ((v12 & 1) != 0)
      goto LABEL_12;
    goto LABEL_8;
  }

LABEL_8:
  v20 = (void *)objc_claimAutoreleasedReturnValue(+[NSFileManager defaultManager](NSFileManager, "defaultManager"));
  v25 = 0;
  v21 = objc_msgSend(v20, "createDirectoryAtPath:withIntermediateDirectories:attributes:error:", qword_10010A528, 1, 0, &v25);
  v22 = v25;

  if ((v21 & 1) == 0)
  {
    v23 = FCDefaultLog;
    if (os_log_type_enabled(FCDefaultLog, OS_LOG_TYPE_ERROR))
      sub_10007D48C((uint64_t)v22, v23, v24);
  }

LABEL_12:
}

FRArticleEditorialItemDownloader *sub_10000CED0(uint64_t a1, void *a2)
{
  id v3;
  FRArticleEditorialItemDownloader *v4;
  uint64_t v5;
  id v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  FRArticleEditorialItemDownloader *v13;

  v3 = a2;
  v4 = [FRArticleEditorialItemDownloader alloc];
  v6 = objc_msgSend(v3, "resolveClass:", objc_opt_class(FCArticleController, v5));
  v7 = (void *)objc_claimAutoreleasedReturnValue(v6);
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "dataProviderFactory"));
  v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "resolveProtocol:", &OBJC_PROTOCOL___FRArticleEditorialItemProvider));
  v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "resolveProtocol:", &OBJC_PROTOCOL___FREditorialItemEntryManager));
  v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "resolveProtocol:", &OBJC_PROTOCOL___FREditorialItemThumbnailCreator));
  v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "resolveProtocol:", &OBJC_PROTOCOL___FREditorialItemCreator));

  v13 = -[FRArticleEditorialItemDownloader initWithArticleController:dataProviderFactory:articleEditorialItemProvider:editorialItemEntryManager:thumbnailCreator:editorialItemCreator:](v4, "initWithArticleController:dataProviderFactory:articleEditorialItemProvider:editorialItemEntryManager:thumbnailCreator:editorialItemCreator:", v7, v8, v9, v10, v11, v12);
  return v13;
}

id sub_10000D8E0(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "articleContentPool");
}

FCClearableReadingHistory *__cdecl sub_10000DBFC(id a1, TFResolver *a2)
{
  TFResolver *v2;
  uint64_t v3;
  id v4;
  void *v5;
  void *v6;
  uint64_t v7;
  id v8;
  void *v9;
  uint64_t v10;
  id v11;
  void *v12;
  void *v13;
  id v14;
  void *v15;

  v2 = a2;
  v4 = -[TFResolver resolveClass:](v2, "resolveClass:", objc_opt_class(FCReadingHistory, v3));
  v5 = (void *)objc_claimAutoreleasedReturnValue(v4);
  v6 = (void *)objc_claimAutoreleasedReturnValue(-[TFResolver resolveProtocol:](v2, "resolveProtocol:", &OBJC_PROTOCOL___FCUserEventHistoryStorageType));
  v8 = -[TFResolver resolveClass:](v2, "resolveClass:", objc_opt_class(FCIssueReadingHistory, v7));
  v9 = (void *)objc_claimAutoreleasedReturnValue(v8);
  v11 = -[TFResolver resolveClass:](v2, "resolveClass:", objc_opt_class(FRCachesClearableReadingHistory, v10));
  v12 = (void *)objc_claimAutoreleasedReturnValue(v11);
  v13 = (void *)objc_claimAutoreleasedReturnValue(-[TFResolver resolveProtocol:](v2, "resolveProtocol:", &OBJC_PROTOCOL___FCClearableUserEmbedding));

  v14 = objc_msgSend(objc_alloc((Class)TFMultiDelegate), "initWithDelegate:delegateProtocol:", v5, &OBJC_PROTOCOL___FCClearableReadingHistory);
  objc_msgSend(v14, "addDelegate:", v6);
  objc_msgSend(v14, "addDelegate:", v9);
  objc_msgSend(v14, "addDelegate:", v12);
  objc_msgSend(v14, "addDelegate:", v13);
  v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "delegate"));

  return (FCClearableReadingHistory *)v15;
}

FRURLAnalyticsReferralFactory *__cdecl sub_10000DD44(id a1, TFResolver *a2)
{
  TFResolver *v2;
  FRURLAnalyticsReferralFactory *v3;
  uint64_t v4;
  id v5;
  void *v6;
  FRURLAnalyticsReferralFactory *v7;

  v2 = a2;
  v3 = [FRURLAnalyticsReferralFactory alloc];
  v5 = -[TFResolver resolveClass:](v2, "resolveClass:", objc_opt_class(FRAppActivityMonitor, v4));
  v6 = (void *)objc_claimAutoreleasedReturnValue(v5);

  v7 = -[FRURLAnalyticsReferralFactory initWithAppActivityMonitor:](v3, "initWithAppActivityMonitor:", v6);
  return v7;
}

FRToCEditorialManager *sub_10000E14C(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  id v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  FRToCEditorialManager *v15;
  FRToCEditorialManager *v17;

  v3 = a2;
  v17 = [FRToCEditorialManager alloc];
  v5 = objc_msgSend(v3, "resolveClass:", objc_opt_class(FCCloudContext, v4));
  v6 = (void *)objc_claimAutoreleasedReturnValue(v5);
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "feldsparContext"));
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "appActivityMonitor"));
  v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "resolveProtocol:", &OBJC_PROTOCOL___FREditorialItemEntryManager));
  v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "resolveProtocol:name:", &OBJC_PROTOCOL___FREditorialItemDownloader, CFSTR("editorialArticleDownloader")));
  v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "resolveProtocol:name:", &OBJC_PROTOCOL___FREditorialItemDownloader, CFSTR("editorialTagDownloader")));
  v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "resolveProtocol:", &OBJC_PROTOCOL___FREditorialConfigurationProvider));
  v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "resolveProtocol:", &OBJC_PROTOCOL___FREditorialItemThumbnailCreator));
  v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "resolveProtocol:", &OBJC_PROTOCOL___FCANFHelper));

  v15 = -[FRToCEditorialManager initWithCloudContext:activityMonitor:editorialItemEntryManager:articleEditorialItemDownloader:tagEditorialItemDownloader:editorialConfigurationProvider:thumbnailCreator:ANFHelper:](v17, "initWithCloudContext:activityMonitor:editorialItemEntryManager:articleEditorialItemDownloader:tagEditorialItemDownloader:editorialConfigurationProvider:thumbnailCreator:ANFHelper:", v6, v8, v9, v10, v11, v12, v13, v14);
  return v15;
}

void sub_10000E9C4(id a1, id a2, TFResolver *a3)
{
  TFResolver *v4;
  id v5;
  uint64_t v6;
  id v7;
  void *v8;
  uint64_t v9;
  id v10;
  id v11;

  v4 = a3;
  v5 = a2;
  v7 = -[TFResolver resolveClass:](v4, "resolveClass:", objc_opt_class(FRNewsBridgeDeeplinkRouter, v6));
  v8 = (void *)objc_claimAutoreleasedReturnValue(v7);
  objc_msgSend(v5, "addRoutable:", v8);

  v10 = -[TFResolver resolveClass:](v4, "resolveClass:", objc_opt_class(FRUnrecognizedURLRouter, v9));
  v11 = (id)objc_claimAutoreleasedReturnValue(v10);

  objc_msgSend(v5, "addRoutable:", v11);
}

TSClearDataManager *__cdecl sub_10000EB14(id a1, TFResolver *a2)
{
  TFResolver *v2;
  void *v3;
  uint64_t v4;
  id v5;
  FRMenuBarClearDataManager *v6;
  void *v7;
  uint64_t v8;
  id v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  FRMenuBarClearDataManager *v16;
  void *v18;
  void *v19;
  void *v20;

  v2 = a2;
  v20 = (void *)objc_claimAutoreleasedReturnValue(-[TFResolver resolveProtocol:](v2, "resolveProtocol:", &OBJC_PROTOCOL___FCPrivateDataContext));
  v3 = (void *)objc_claimAutoreleasedReturnValue(-[TFResolver resolveProtocol:](v2, "resolveProtocol:", &OBJC_PROTOCOL___FCAppleAccount));
  v5 = -[TFResolver resolveClass:](v2, "resolveClass:", objc_opt_class(FCCloudContext, v4));
  v19 = (void *)objc_claimAutoreleasedReturnValue(v5);
  v6 = [FRMenuBarClearDataManager alloc];
  v7 = (void *)objc_claimAutoreleasedReturnValue(-[TFResolver resolveProtocol:](v2, "resolveProtocol:", &OBJC_PROTOCOL___FCClearableReadingHistory));
  v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v20, "personalizationData"));
  v9 = -[TFResolver resolveClass:](v2, "resolveClass:", objc_opt_class(FRAnalyticsController, v8));
  v10 = (void *)objc_claimAutoreleasedReturnValue(v9);
  v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v19, "newsletterManager"));
  v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v19, "userEventHistory"));
  v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "storage"));
  v14 = (void *)objc_claimAutoreleasedReturnValue(-[TFResolver resolveProtocol:](v2, "resolveProtocol:", &OBJC_PROTOCOL___TSNewsActivityManagerType));
  v15 = (void *)objc_claimAutoreleasedReturnValue(-[TFResolver resolveProtocol:](v2, "resolveProtocol:", &OBJC_PROTOCOL___FCClearableUserEmbedding));

  v16 = -[FRMenuBarClearDataManager initWithAccount:clearReadingHistoryManager:personalizationData:analyticsController:newsletterManager:userEventHistoryStorage:userActivityManager:clearableUserEmbedding:](v6, "initWithAccount:clearReadingHistoryManager:personalizationData:analyticsController:newsletterManager:userEventHistoryStorage:userActivityManager:clearableUserEmbedding:", v3, v7, v18, v10, v11, v13, v14, v15);
  return (TSClearDataManager *)v16;
}

void sub_10000ECD0(id a1)
{
  os_log_t v1;
  void *v2;
  os_log_t v3;
  void *v4;
  os_log_t v5;
  void *v6;
  os_log_t v7;
  void *v8;
  os_log_t v9;
  void *v10;
  os_log_t v11;
  void *v12;
  os_log_t v13;
  void *v14;
  os_log_t v15;
  void *v16;
  os_log_t v17;
  void *v18;
  os_log_t v19;
  void *v20;
  os_log_t v21;
  void *v22;
  os_log_t v23;
  void *v24;
  os_log_t v25;
  void *v26;
  os_log_t v27;
  void *v28;
  os_log_t v29;
  void *v30;
  os_log_t v31;
  void *v32;
  os_log_t v33;
  void *v34;

  v1 = os_log_create(FRLogSubsystemIdentifier, "FeedDataSource");
  v2 = (void *)FRFeedDataSourceLog;
  FRFeedDataSourceLog = (uint64_t)v1;

  v3 = os_log_create(FRLogSubsystemIdentifier, "FeedLayout");
  v4 = (void *)FRFeedLayoutLog;
  FRFeedLayoutLog = (uint64_t)v3;

  v5 = os_log_create(FRLogSubsystemIdentifier, "PresubscribeService");
  v6 = (void *)FRPresubscribeServiceLog;
  FRPresubscribeServiceLog = (uint64_t)v5;

  v7 = os_log_create(FRLogSubsystemIdentifier, "StateRestore");
  v8 = (void *)FRStateRestoreLog;
  FRStateRestoreLog = (uint64_t)v7;

  v9 = os_log_create(FRLogSubsystemIdentifier, "TodayAgent");
  v10 = (void *)FRTodayAgentLog;
  FRTodayAgentLog = (uint64_t)v9;

  v11 = os_log_create(FRLogSubsystemIdentifier, "AutoScrollToTopManager");
  v12 = (void *)FRAutoScrollToTopManagerLog;
  FRAutoScrollToTopManagerLog = (uint64_t)v11;

  v13 = os_log_create(FRLogSubsystemIdentifier, "FeedCollectionView");
  v14 = (void *)FRFeedCollectionViewLog;
  FRFeedCollectionViewLog = (uint64_t)v13;

  v15 = os_log_create(FRLogSubsystemIdentifier, "Weather");
  v16 = (void *)FRWeatherLog;
  FRWeatherLog = (uint64_t)v15;

  v17 = os_log_create(FRLogSubsystemIdentifier, "FeedManager");
  v18 = (void *)FRFeedManagerLog;
  FRFeedManagerLog = (uint64_t)v17;

  v19 = os_log_create(FRLogSubsystemIdentifier, "FeedRefreshAnimationManager");
  v20 = (void *)FRFeedRefreshAnimationManagerLog;
  FRFeedRefreshAnimationManagerLog = (uint64_t)v19;

  v21 = os_log_create(FRLogSubsystemIdentifier, "OfflineTransition");
  v22 = (void *)FROfflineTransitionLog;
  FROfflineTransitionLog = (uint64_t)v21;

  v23 = os_log_create(FRLogSubsystemIdentifier, "Article");
  v24 = (void *)FRArticleLog;
  FRArticleLog = (uint64_t)v23;

  v25 = os_log_create(FRLogSubsystemIdentifier, "ArticlePrefetch");
  v26 = (void *)FRArticlePrefetchLog;
  FRArticlePrefetchLog = (uint64_t)v25;

  v27 = os_log_create(FRLogSubsystemIdentifier, "BackgroundFetch");
  v28 = (void *)FRBackgroundFetchLog;
  FRBackgroundFetchLog = (uint64_t)v27;

  v29 = os_log_create(FRLogSubsystemIdentifier, "Navigation");
  v30 = (void *)FRNavigationLog;
  FRNavigationLog = (uint64_t)v29;

  v31 = os_log_create(FRLogSubsystemIdentifier, "Portrait");
  v32 = (void *)FRPortraitLog;
  FRPortraitLog = (uint64_t)v31;

  v33 = os_log_create(FRLogSubsystemIdentifier, "DES");
  v34 = (void *)FRDESLog;
  FRDESLog = (uint64_t)v33;

}

void sub_10000F210(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  uint64_t v29;

  _Block_object_dispose(&a29, 8);
  _Block_object_dispose((const void *)(v29 - 160), 8);
  _Unwind_Resume(a1);
}

void sub_10000F260(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;

  v3 = a2;
  if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
    sub_10000F2E8();
  v4 = *(_QWORD *)(a1 + 32);
  if (v4)
    (*(void (**)(uint64_t, _QWORD, _QWORD, _QWORD))(v4 + 16))(v4, 0, 0, 0);
  objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), "invalidate");
  v5 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v6 = *(void **)(v5 + 40);
  *(_QWORD *)(v5 + 40) = 0;

}

void sub_10000F2E8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  sub_10004F02C();
  sub_10000F588((void *)&_mh_execute_header, &_os_log_default, v0, "Error fetching metadata from gizmo %@.", v1, v2, v3, v4, v5);
  sub_10000F598();
}

void sub_10000F350(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7;
  id v8;
  id v9;
  id WeakRetained;
  _QWORD v11[4];
  id v12;
  _QWORD v13[4];
  id v14;
  uint8_t buf[4];
  void *v16;
  __int16 v17;
  id v18;

  v7 = a2;
  v8 = a3;
  v9 = a4;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 138412546;
    v16 = &__NSArray0__struct;
    v17 = 2112;
    v18 = v9;
    _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_INFO, "Found metadata seen IDs = %@ saved IDs = %@.", buf, 0x16u);
  }
  if (WeakRetained)
  {
    if (objc_msgSend(v8, "count"))
    {
      dispatch_group_enter(*(dispatch_group_t *)(a1 + 32));
      v13[0] = _NSConcreteStackBlock;
      v13[1] = 3221225472;
      v13[2] = sub_10004DB40;
      v13[3] = &unk_1000D9758;
      v14 = *(id *)(a1 + 32);
      objc_msgSend(WeakRetained, "_syncSeenIdentifiers:withCompletion:", v8, v13);

    }
    if (objc_msgSend(v9, "count"))
    {
      dispatch_group_enter(*(dispatch_group_t *)(a1 + 32));
      v11[0] = _NSConcreteStackBlock;
      v11[1] = 3221225472;
      v11[2] = sub_10004DB48;
      v11[3] = &unk_1000D9758;
      v12 = *(id *)(a1 + 32);
      objc_msgSend(WeakRetained, "_syncSavedIdentifiersOnGizmo:articleIdentifiersOnGizmo:withCompletion:", v9, v7, v11);

    }
  }
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));

}

void sub_10000F518(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint8_t *a5)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, a5, 0x26u);
}

void sub_10000F564(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, &a9, 2u);
}

void sub_10000F574(void *a1, uint64_t a2, os_log_t log, const char *a4, ...)
{
  va_list va;

  va_start(va, a4);
  _os_log_error_impl(a1, log, OS_LOG_TYPE_ERROR, a4, (uint8_t *)va, 0x20u);
}

void sub_10000F588(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, &a9, 0xCu);
}

void sub_10000F5A0(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, &a9, 0x26u);
}

void sub_10000F5B0(void *a1, NSObject *a2, int a3, const char *a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint8_t buf)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, &buf, 0x26u);
}

uint64_t sub_10000F5E0@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, int a3@<W8>)
{
  *(_DWORD *)(a2 + 24) = a3;
  *(_WORD *)(a2 + 28) = 2114;
  *(_QWORD *)(a2 + 30) = result;
  return result;
}

void sub_10000F5F4(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint8_t *a5)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, a5, 0xCu);
}

CFIndex sub_10000F600()
{
  __CFError *v0;

  return CFErrorGetCode(v0);
}

void sub_10000FFD0(uint64_t a1, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  char isKindOfClass;
  void *v6;
  id v7;
  void *v8;
  void *v9;
  uint64_t v10;
  id v11;

  v11 = a2;
  v4 = objc_opt_class(UIViewController, v3);
  isKindOfClass = objc_opt_isKindOfClass(v11, v4);
  v6 = v11;
  if ((isKindOfClass & 1) != 0)
  {
    v7 = v11;
    if (objc_msgSend(v7, "isViewLoaded"))
    {
      v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "view"));
      v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "window"));

      if (v9)
        objc_msgSend((id)objc_opt_class(*(_QWORD *)(a1 + 32), v10), "saveViewAppearanceDateForObserver:", v7);
    }

    v6 = v11;
  }

}

id FRPrivateDataActionsForDataclassActionTypes(void *a1)
{
  id v1;
  uint64_t v2;
  void *v3;
  id v4;
  id v5;
  id v6;
  uint64_t v7;
  void *v8;
  unint64_t v9;
  _UNKNOWN **v10;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  _BYTE v16[128];

  v1 = a1;
  v3 = (void *)objc_opt_new(NSMutableArray, v2);
  v12 = 0u;
  v13 = 0u;
  v14 = 0u;
  v15 = 0u;
  v4 = v1;
  v5 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v12, v16, 16);
  if (v5)
  {
    v6 = v5;
    v7 = *(_QWORD *)v13;
    do
    {
      v8 = 0;
      do
      {
        if (*(_QWORD *)v13 != v7)
          objc_enumerationMutation(v4);
        v9 = (unint64_t)objc_msgSend(*(id *)(*((_QWORD *)&v12 + 1) + 8 * (_QWORD)v8), "integerValue", (_QWORD)v12)- 1;
        if (v9 > 5)
          v10 = 0;
        else
          v10 = off_1000DDD90[v9];
        objc_msgSend(v3, "addObjectsFromArray:", v10);
        v8 = (char *)v8 + 1;
      }
      while (v6 != v8);
      v6 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v12, v16, 16);
    }
    while (v6);
  }

  return v3;
}

void sub_1000108EC(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  id *v21;
  void *v22;
  NSObject *v23;
  uint64_t v24;
  id v25;
  id v26;
  id v27;
  id v28;
  void *v29;
  uint64_t v30;
  void *v31;
  void *v32;
  void *v33;
  void *v34;
  void *v35;
  void *v36;
  id v37;
  void *v38;
  _QWORD block[4];
  id v40;
  uint64_t v41;
  id v42;
  id v43;
  id v44;
  _QWORD v45[4];
  id v46;
  _QWORD v47[4];
  id v48;

  v3 = a2;
  v5 = objc_opt_class(NSArray, v4);
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "fetchedObject"));
  v7 = FCDynamicCast(v5, v6);
  v8 = (void *)objc_claimAutoreleasedReturnValue(v7);

  if (objc_msgSend(v8, "count"))
  {
    v45[0] = _NSConcreteStackBlock;
    v45[1] = 3221225472;
    v45[2] = sub_1000084E8;
    v45[3] = &unk_1000DB0C0;
    v46 = v3;
    v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary fc_dictionary:](NSDictionary, "fc_dictionary:", v45));
    v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "objectForKeyedSubscript:", *(_QWORD *)(a1 + 40)));
    if (!v11 && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      sub_10007B6A4();
    v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "objectForKeyedSubscript:", *(_QWORD *)(a1 + 48)));
    if (!v12 && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      sub_10007B5EC();
    v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "objectForKeyedSubscript:", *(_QWORD *)(a1 + 56)));
    if (!v13 && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      sub_10007B534();
    v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "objectForKeyedSubscript:", *(_QWORD *)(a1 + 64)));
    if (!v14 && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      sub_10007B47C();
    v38 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "fileURL"));
    if (!v38 && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      sub_10007B3C4();
    v34 = v11;
    v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "fileURL"));
    if (!v15 && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      sub_10007B30C();
    v37 = v3;
    v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "fileURL"));
    if (!v16 && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      sub_10007B254();
    v36 = v8;
    v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "fileURL", v14));
    if (!v17 && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      sub_10007B19C();
    v32 = v13;
    v18 = (void *)objc_claimAutoreleasedReturnValue(+[NSData dataWithContentsOfURL:](NSData, "dataWithContentsOfURL:", v38));
    if (!v18 && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      sub_10007B0E4();
    v35 = v10;
    v19 = (void *)objc_claimAutoreleasedReturnValue(+[NSData dataWithContentsOfURL:](NSData, "dataWithContentsOfURL:", v15));
    if (!v19 && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      sub_10007B02C();
    v33 = v12;
    v20 = (void *)objc_claimAutoreleasedReturnValue(+[NSData dataWithContentsOfURL:](NSData, "dataWithContentsOfURL:", v16));
    if (!v20 && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      sub_10007AF74();
    v21 = &v46;
    v22 = (void *)objc_claimAutoreleasedReturnValue(+[NSData dataWithContentsOfURL:](NSData, "dataWithContentsOfURL:", v17));
    if (!v22 && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      sub_10007AEBC();
    v23 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "storeQueue"));
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_100030DB8;
    block[3] = &unk_1000DB1B0;
    v24 = *(_QWORD *)(a1 + 32);
    v40 = v19;
    v41 = v24;
    v42 = v18;
    v43 = v20;
    v44 = v22;
    v25 = v22;
    v26 = v20;
    v27 = v18;
    v28 = v19;
    dispatch_sync(v23, block);

    v8 = v36;
    v3 = v37;
  }
  else
  {
    v29 = (void *)objc_opt_class(*(_QWORD *)(a1 + 32), v9);
    v47[0] = _NSConcreteStackBlock;
    v47[1] = 3221225472;
    v47[2] = sub_100030D80;
    v47[3] = &unk_1000DB0E8;
    v21 = &v48;
    v48 = v3;
    objc_msgSend(v29, "logPPMessage:", v47);
  }

  v30 = *(_QWORD *)(a1 + 72);
  if (v30)
    (*(void (**)(void))(v30 + 16))();

}

id sub_1000115B0(uint64_t a1)
{
  void *v2;
  void *v3;
  uint64_t v4;
  void *v5;
  __CFString *v6;
  __CFString *v7;
  uint64_t v8;
  void *v9;
  __CFString *v10;
  __CFString *v11;
  uint64_t v12;
  void *v13;
  __CFString *v14;
  __CFString *v15;
  uint64_t v16;
  void *v17;
  __CFString *v18;
  __CFString *v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  void *v23;
  __CFString *v24;
  __CFString *v25;
  __CFString *v26;
  __CFString *v27;
  __CFString *v28;
  __CFString *v29;
  __CFString *v30;
  __CFString *v31;
  void *v32;
  id v33;
  void *v34;
  id v35;
  void *v36;
  __CFString *v37;
  __CFString *v38;
  __CFString *v39;
  __CFString *v40;
  id v42;
  _QWORD v43[5];
  __CFString *v44;
  __CFString *v45;
  __CFString *v46;
  __CFString *v47;
  id v48;
  _QWORD v49[4];
  __CFString *v50;
  __CFString *v51;
  __CFString *v52;
  __CFString *v53;
  _QWORD v54[4];
  __CFString *v55;
  __CFString *v56;
  __CFString *v57;
  __CFString *v58;
  _QWORD v59[4];
  id v60;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "appConfigurationManager"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "appConfiguration"));

  v4 = objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "personalizationBundleIdMappingResourceId"));
  v5 = (void *)v4;
  v6 = CFSTR("P-BM-143441");
  if (v4)
    v6 = (__CFString *)v4;
  v7 = v6;

  v8 = objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "personalizationUrlMappingResourceId"));
  v9 = (void *)v8;
  v10 = CFSTR("P-UM-143441");
  if (v8)
    v10 = (__CFString *)v8;
  v11 = v10;

  v12 = objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "personalizationWhitelistResourceId"));
  v13 = (void *)v12;
  v14 = CFSTR("P-W-143441");
  if (v12)
    v14 = (__CFString *)v12;
  v15 = v14;

  v16 = objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "personalizationFavorabilityResourceId"));
  v17 = (void *)v16;
  v18 = CFSTR("P-PF-143441");
  if (v16)
    v18 = (__CFString *)v16;
  v19 = v18;

  v21 = (void *)objc_opt_class(*(_QWORD *)(a1 + 32), v20);
  v59[0] = _NSConcreteStackBlock;
  v59[1] = 3221225472;
  v59[2] = sub_100030A8C;
  v59[3] = &unk_1000DB0E8;
  v60 = v3;
  v42 = v3;
  objc_msgSend(v21, "logPPMessage:", v59);
  v23 = (void *)objc_opt_class(*(_QWORD *)(a1 + 32), v22);
  v54[0] = _NSConcreteStackBlock;
  v54[1] = 3221225472;
  v54[2] = sub_100030C10;
  v54[3] = &unk_1000DB138;
  v24 = v7;
  v55 = v24;
  v25 = v11;
  v56 = v25;
  v26 = v15;
  v57 = v26;
  v27 = v19;
  v58 = v27;
  objc_msgSend(v23, "logPPMessage:", v54);
  v49[0] = _NSConcreteStackBlock;
  v49[1] = 3221225472;
  v49[2] = sub_10001846C;
  v49[3] = &unk_1000DB160;
  v28 = v24;
  v50 = v28;
  v29 = v25;
  v51 = v29;
  v30 = v26;
  v52 = v30;
  v31 = v27;
  v53 = v31;
  v32 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray fc_array:](NSArray, "fc_array:", v49));
  v33 = objc_alloc((Class)FCResourcesFetchOperation);
  v34 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "cloudContext"));
  v35 = objc_msgSend(v33, "initWithContext:resourceIDs:downloadAssets:", v34, v32, 1);

  objc_msgSend(v35, "setCachePolicy:", 1);
  objc_msgSend(v35, "setQualityOfService:", *(_QWORD *)(a1 + 48));
  objc_msgSend(v35, "setRelativePriority:", *(_QWORD *)(a1 + 56));
  v43[0] = _NSConcreteStackBlock;
  v43[1] = 3221225472;
  v43[2] = sub_1000108EC;
  v43[3] = &unk_1000DB1D8;
  v36 = *(void **)(a1 + 40);
  v43[4] = *(_QWORD *)(a1 + 32);
  v44 = v28;
  v45 = v29;
  v46 = v30;
  v47 = v31;
  v48 = v36;
  v37 = v31;
  v38 = v30;
  v39 = v29;
  v40 = v28;
  objc_msgSend(v35, "setFetchCompletionBlock:", v43);

  return v35;
}

void sub_100013BD0(uint64_t a1)
{
  id WeakRetained;

  +[NSThread isMainThread](NSThread, "isMainThread");
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "setSyncingWatchData:", 0);

}

void sub_100013DA4(_Unwind_Exception *a1)
{
  id *v1;
  id *v2;
  uint64_t v3;

  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v3 - 72));
  _Unwind_Resume(a1);
}

void sub_10001403C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1000145F8(uint64_t a1)
{
  id v2;
  id v3;
  uint64_t v4;
  void *v5;
  NSObject *v6;
  uint64_t v7;
  const __CFURL *v8;
  NSObject *v9;
  uint64_t v10;
  NSObject *v11;
  uint64_t v12;
  CFIndex Code;
  CFIndex v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  void *v20;
  uint64_t v21;
  void *v22;
  NSObject *v23;
  void *v24;
  CFErrorRef error;
  uint8_t buf[4];
  uint64_t v27;
  __int16 v28;
  id v29;
  __int16 v30;
  void *v31;

  v2 = objc_msgSend(*(id *)(a1 + 56), "_referenceCountForFontWithFileURL:", *(_QWORD *)(a1 + 32));
  if (v2)
  {
    v3 = v2;
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24) = 1;
    v4 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
    v5 = *(void **)(v4 + 40);
    *(_QWORD *)(v4 + 40) = 0;

    v6 = FRArticleLog;
    if (os_log_type_enabled((os_log_t)FRArticleLog, OS_LOG_TYPE_DEFAULT))
    {
      v7 = *(_QWORD *)(a1 + 32);
      *(_DWORD *)buf = 138543618;
      v27 = v7;
      v28 = 2048;
      v29 = v3;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Found previous registration for font at URL %{public}@ with reference count %lu", buf, 0x16u);
    }
  }
  else
  {
    v8 = *(const __CFURL **)(a1 + 32);
    error = 0;
    v9 = FRArticleLog;
    if (os_log_type_enabled((os_log_t)FRArticleLog, OS_LOG_TYPE_DEFAULT))
    {
      v10 = *(_QWORD *)(a1 + 32);
      *(_DWORD *)buf = 138543362;
      v27 = v10;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Attempting to register font at URL %{public}@", buf, 0xCu);
    }
    if (CTFontManagerRegisterFontsForURL(v8, kCTFontManagerScopeProcess, &error))
    {
      *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24) = 1;
      v11 = FRArticleLog;
      if (os_log_type_enabled((os_log_t)FRArticleLog, OS_LOG_TYPE_DEFAULT))
      {
        v12 = *(_QWORD *)(a1 + 32);
        *(_DWORD *)buf = 138543362;
        v27 = v12;
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "Font registration succeeded for font at URL %{public}@", buf, 0xCu);
      }
    }
    else
    {
      Code = CFErrorGetCode(error);
      v14 = Code;
      v15 = 1;
      switch(Code)
      {
        case 'e':
          v16 = 0;
          goto LABEL_16;
        case 'f':
          v16 = 1;
          goto LABEL_16;
        case 'g':
          v16 = 2;
          goto LABEL_16;
        case 'h':
          v16 = 3;
LABEL_16:
          v17 = objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", CFSTR("FRFontRegistationErrorDomain"), v16, 0));
          v18 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
          v19 = *(void **)(v18 + 40);
          *(_QWORD *)(v18 + 40) = v17;

          v15 = 0;
          goto LABEL_17;
        case 'i':
          goto LABEL_17;
        default:
          if (Code != 305)
            goto LABEL_18;
LABEL_17:
          *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24) = v15;
LABEL_18:
          v20 = (void *)FRArticleLog;
          if (os_log_type_enabled((os_log_t)FRArticleLog, OS_LOG_TYPE_ERROR))
          {
            v21 = *(_QWORD *)(a1 + 32);
            v22 = *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40);
            v23 = v20;
            v24 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithLong:](NSNumber, "numberWithLong:", v14));
            *(_DWORD *)buf = 138543874;
            v27 = v21;
            v28 = 2114;
            v29 = v22;
            v30 = 2114;
            v31 = v24;
            _os_log_error_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_ERROR, "Failed to register font at URL %{public}@ with error: %{public}@ underlying error code: %{public}@", buf, 0x20u);

          }
          break;
      }
    }
    if (error)
      CFRelease(error);
  }
  if (*(_QWORD *)(a1 + 64))
    **(_QWORD **)(a1 + 64) = objc_retainAutorelease(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40));
  if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24))
    objc_msgSend(*(id *)(a1 + 56), "_increaseReferenceCountForFontWithFileURL:", *(_QWORD *)(a1 + 32));
}

void sub_100014E4C(uint64_t a1)
{
  int v2;
  void *v3;
  _QWORD *v4;
  id v5;
  _QWORD *v6;
  void *v7;
  uint64_t v8;
  void *v9;
  void *v10;
  id v11;
  void *v12;
  _QWORD v13[4];
  id v14;
  _QWORD v15[4];
  id v16;
  _QWORD v17[4];
  char v18;

  v2 = *(unsigned __int8 *)(a1 + 48);
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSFileManager defaultManager](NSFileManager, "defaultManager"));
  v17[0] = _NSConcreteStackBlock;
  v17[1] = 3221225472;
  v17[2] = sub_100015030;
  v17[3] = &unk_1000DE490;
  v18 = v2;
  v4 = objc_retainBlock(v17);
  v15[0] = _NSConcreteStackBlock;
  v15[1] = 3221225472;
  v15[2] = sub_10006BB64;
  v15[3] = &unk_1000D9758;
  v5 = v3;
  v16 = v5;
  v6 = objc_retainBlock(v15);
  v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSUserDefaults standardUserDefaults](NSUserDefaults, "standardUserDefaults"));
  ((void (*)(_QWORD *, void *, const __CFString *, _QWORD *))v4[2])(v4, v7, CFSTR("should_clear_cache_on_next_launch"), v6);

  v8 = NewsCoreUserDefaults();
  v9 = (void *)objc_claimAutoreleasedReturnValue(v8);
  ((void (*)(_QWORD *, void *, _QWORD, _QWORD *))v4[2])(v4, v9, FCClearCacheOnNextLaunchSharedPreferenceKey, v6);

  v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSUserDefaults standardUserDefaults](NSUserDefaults, "standardUserDefaults"));
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 3221225472;
  v13[2] = sub_10006BBFC;
  v13[3] = &unk_1000D9758;
  v11 = v5;
  v14 = v11;
  ((void (*)(_QWORD *, void *, const __CFString *, _QWORD *))v4[2])(v4, v10, CFSTR("should_clear_private_data_on_next_launch"), v13);

  if (v2)
  {
    +[FRSpotlightManager clearIndex](FRSpotlightManager, "clearIndex");
    v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "defaultsDataDestructionItems"));
    NSSDestroyUserDefaultsDataWithItems();

  }
  (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();

}

void sub_100015030(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7;
  void (**v8)(_QWORD);
  id v9;

  v9 = a2;
  v7 = a3;
  v8 = a4;
  if (*(_BYTE *)(a1 + 32) || objc_msgSend(v9, "BOOLForKey:", v7))
  {
    v8[2](v8);
    objc_msgSend(v9, "setBool:forKey:", 0, v7);
  }

}

void sub_100016858(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id FRURLForNewsPersonalizationDirectory()
{
  id v0;
  void *v1;
  void *v2;
  void *v3;
  uint64_t v5;

  v0 = FRURLForNewsAppCachesDirectory();
  v1 = (void *)objc_claimAutoreleasedReturnValue(v0);
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v1, "URLByAppendingPathComponent:isDirectory:", CFSTR("Personalization_Data"), 1));

  v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSFileManager defaultManager](NSFileManager, "defaultManager"));
  v5 = 0;
  objc_msgSend(v3, "createDirectoryAtURL:withIntermediateDirectories:attributes:error:", v2, 1, 0, &v5);

  return v2;
}

id FRURLForNewsAppCachesDirectory()
{
  uint64_t v0;
  void *v1;
  void *v2;
  void *v3;
  uint64_t v5;

  v0 = FCURLForContainerizedUserAccountCachesDirectory(1);
  v1 = (void *)objc_claimAutoreleasedReturnValue(v0);
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v1, "URLByAppendingPathComponent:isDirectory:", CFSTR("News"), 1));

  v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSFileManager defaultManager](NSFileManager, "defaultManager"));
  v5 = 0;
  objc_msgSend(v3, "createDirectoryAtURL:withIntermediateDirectories:attributes:error:", v2, 1, 0, &v5);

  return v2;
}

FRURLAnalyticsReferralFactory *__cdecl sub_100018368(id a1, TFResolver *a2)
{
  TFResolver *v2;
  uint64_t v3;
  id v4;
  void *v5;

  v2 = a2;
  v4 = -[TFResolver resolveClass:](v2, "resolveClass:", objc_opt_class(FRURLAnalyticsReferralFactory, v3));
  v5 = (void *)objc_claimAutoreleasedReturnValue(v4);

  return (FRURLAnalyticsReferralFactory *)v5;
}

NSSNewsAnalyticsSessionManager *__cdecl sub_1000183B4(id a1, TFResolver *a2)
{
  TFResolver *v2;
  uint64_t v3;
  id v4;
  void *v5;

  v2 = a2;
  v4 = -[TFResolver resolveClass:](v2, "resolveClass:", objc_opt_class(FRAnalyticsController, v3));
  v5 = (void *)objc_claimAutoreleasedReturnValue(v4);

  return (NSSNewsAnalyticsSessionManager *)v5;
}

FCPaidAccessCheckerType *__cdecl sub_100018400(id a1, TFResolver *a2)
{
  TFResolver *v2;
  uint64_t v3;
  id v4;
  void *v5;
  void *v6;

  v2 = a2;
  v4 = -[TFResolver resolveClass:](v2, "resolveClass:", objc_opt_class(FCCloudContext, v3));
  v5 = (void *)objc_claimAutoreleasedReturnValue(v4);

  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "paidAccessChecker"));
  return (FCPaidAccessCheckerType *)v6;
}

void sub_10001846C(_QWORD *a1, void *a2)
{
  uint64_t v3;
  id v4;

  v3 = a1[4];
  v4 = a2;
  objc_msgSend(v4, "fc_safelyAddObject:", v3);
  objc_msgSend(v4, "fc_safelyAddObject:", a1[5]);
  objc_msgSend(v4, "fc_safelyAddObject:", a1[6]);
  objc_msgSend(v4, "fc_safelyAddObject:", a1[7]);

}

void sub_1000184DC(uint64_t a1)
{

}

void sub_1000184E4(uint64_t a1)
{

}

void sub_1000184EC(uint64_t a1)
{

}

void sub_1000184F4(uint64_t a1)
{

}

void sub_1000184FC(uint64_t a1)
{

}

void sub_100018504(uint64_t a1)
{

}

void sub_10001850C(uint64_t a1)
{

}

void sub_100018514(uint64_t a1)
{

}

void sub_10001851C(uint64_t a1)
{

}

void sub_100018524(uint64_t a1)
{

}

void sub_10001852C(uint64_t a1)
{

}

void sub_100018534(uint64_t a1)
{

}

void sub_10001853C(uint64_t a1)
{

}

void sub_100018544(uint64_t a1)
{

}

void sub_10001854C(uint64_t a1)
{

}

void sub_100018554(uint64_t a1)
{

}

void sub_10001855C(uint64_t a1)
{

}

void sub_100018564(uint64_t a1)
{

}

void sub_10001856C(uint64_t a1)
{

}

uint64_t sub_100018574(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t sub_100018584(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t sub_100018594(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t sub_1000185A4(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t sub_1000185B4(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t sub_1000185C4(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t sub_1000185D4(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t sub_1000185E4(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t sub_1000185F4(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t sub_100018604(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t sub_100018614(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t sub_100018624(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t sub_100018634(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t sub_100018644(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t sub_100018654(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t sub_100018664(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t sub_100018674(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t sub_100018684(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t sub_100018694(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

id sub_1000186A4(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "appActivityMonitor");
}

void sub_1000186B4(uint64_t a1, void *a2, void *a3)
{
  uint64_t v4;
  id v5;

  v4 = *(_QWORD *)(a1 + 32);
  v5 = a3;
  (*(void (**)(uint64_t, BOOL, id))(v4 + 16))(v4, objc_msgSend(a2, "count") != 0, v5);

}

id sub_100018708(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "popActionTypesUpToCount:setLocalDataHintIfNeeded:", *(_QWORD *)(a1 + 40), 1);
}

void sub_100018718(uint64_t a1)
{
  uint64_t v2;
  void *v3;

  objc_storeStrong((id *)(*(_QWORD *)(a1 + 32) + 32), *(id *)(a1 + 40));
  *(_BYTE *)(*(_QWORD *)(a1 + 32) + 8) = 1;
  v2 = *(_QWORD *)(a1 + 32);
  v3 = *(void **)(v2 + 48);
  *(_QWORD *)(v2 + 48) = 0;

}

id sub_10001875C(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "fetchEmbedConfigurationWithCompletion:", &stru_1000DD938);
}

id sub_10001876C(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "setOperation:", *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40));
}

void sub_10001877C(uint64_t a1)
{
  objc_msgSend(*(id *)(a1 + 32), "setIsUserIDLoaded:", 1);
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 40));
}

id sub_1000187A8(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "appActivityMonitor");
}

id sub_1000187B0(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "notificationManager");
}

id sub_1000187B8(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "favoritesPersonalizer");
}

id sub_1000187C0(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "favoritesPersonalizer");
}

id sub_1000187C8(uint64_t a1)
{
  return *(id *)(a1 + 32);
}

void sub_1000187D0(id a1, TFResolver *a2, FREditorialItemEntryManager *a3)
{
  -[FREditorialItemEntryManager loadLocalCachesFromStore](a3, "loadLocalCachesFromStore");
}

NUFontRegistration *__cdecl sub_1000187D8(id a1, TFResolver *a2)
{
  return (NUFontRegistration *)objc_alloc_init(FREditorialFontManager);
}

FREditorialItemThumbnailCreator *__cdecl sub_1000187F4(id a1, TFResolver *a2)
{
  return objc_alloc_init(FREditorialItemThumbnailCreator);
}

void sub_100018810(id a1, NSNotification *a2)
{
  TFCompletedStartup(8, a2);
}

void sub_10001881C(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_10000F588((void *)&_mh_execute_header, a2, a3, "Error while updating onboard version. Error: %{public}@", a5, a6, a7, a8, 2u);
}

id sub_100018884(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "_didResumeLowPriorityTasks");
}

FRURLRouterManager *__cdecl sub_10001888C(id a1, TFResolver *a2)
{
  return objc_alloc_init(FRURLRouterManager);
}

id sub_1000188A8(id a1, TFResolver *a2)
{
  return (id)objc_opt_new(FRNewsActivityInteractionDeserializer, a2);
}

FCBackgroundTaskable *__cdecl sub_1000188C4(id a1, TFResolver *a2)
{
  return (FCBackgroundTaskable *)+[UIApplication sharedApplication](UIApplication, "sharedApplication");
}

FCAppActivityMonitor *__cdecl sub_1000188D0(id a1, TFResolver *a2)
{
  return (FCAppActivityMonitor *)-[TFResolver resolveProtocol:](a2, "resolveProtocol:", &OBJC_PROTOCOL___NUAppActivityMonitor);
}

TFDiagnosticFileManagerType *__cdecl sub_1000188E0(id a1, TFResolver *a2)
{
  return (TFDiagnosticFileManagerType *)FRDiagnosticFileManagerCreate(FCDiagnosticsLog);
}

id sub_1000188F0(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "appActivityMonitor");
}

FCReceiptRefresherType *__cdecl sub_1000188F8(id a1, TFResolver *a2)
{
  return (FCReceiptRefresherType *)objc_alloc_init((Class)FCReceiptRefresher);
}

TSSharedImageCacheType *__cdecl sub_100018914(id a1, TFResolver *a2)
{
  return (TSSharedImageCacheType *)-[FRSharedImageCache initWithPersistenceEnabled:]([FRSharedImageCache alloc], "initWithPersistenceEnabled:", 1);
}

TSSharedImageCacheType *__cdecl sub_100018938(id a1, TFResolver *a2)
{
  return (TSSharedImageCacheType *)objc_alloc_init(FRSharedImageCache);
}

id sub_100018954(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "configurationManager");
}

id sub_10001895C(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "configurationManager");
}

id sub_100018964(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "configurationManager");
}

id sub_10001896C(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "configurationManager");
}

id sub_100018974(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "networkBehaviorMonitor");
}

id sub_10001897C(uint64_t a1)
{
  return *(id *)(a1 + 32);
}

void sub_100018984(uint64_t a1)
{
  id v1;
  void *v2;

  v1 = objc_alloc_init(*(Class *)(a1 + 32));
  v2 = (void *)qword_10010A990;
  qword_10010A990 = (uint64_t)v1;

}

void sub_1000189A8(id a1)
{
  id v1;

  v1 = (id)objc_claimAutoreleasedReturnValue(+[UIDevice currentDevice](UIDevice, "currentDevice"));
  byte_10010A5C8 = objc_msgSend(v1, "userInterfaceIdiom") == 0;

}

void sub_1000189EC(id a1)
{
  id v1;

  v1 = (id)objc_claimAutoreleasedReturnValue(+[UIDevice currentDevice](UIDevice, "currentDevice"));
  byte_10010A5B8 = objc_msgSend(v1, "userInterfaceIdiom") == (id)1;

}

uint64_t FRURLForNewsAppDocumentsDirectory()
{
  return FCURLForContainerizedUserAccountDocumentDirectory(1);
}

void FRSetupLogging()
{
  if (qword_10010A480 != -1)
    dispatch_once(&qword_10010A480, &stru_1000D9920);
}

NSSet *FRAppDefaultsDomainiCloudDataDestructionStickyKeys()
{
  return +[NSSet setWithObjects:](NSSet, "setWithObjects:", CFSTR("should_clear_cache_on_next_launch"), 0);
}

Class sub_100019730(id a1, NSString *a2, Class a3)
{
  return (Class)objc_opt_class(FREmbedData, a2, a3);
}

void sub_1000199DC(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  id v6;

  v2 = (void *)objc_claimAutoreleasedReturnValue(+[UIApplication sharedApplication](UIApplication, "sharedApplication"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "key_window"));
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "windowScene"));
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "session"));
  v6 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "persistentIdentifier"));

  objc_msgSend(*(id *)(a1 + 32), "endSessionForReason:byStartingNewSession:resetUserID:forSceneID:", 4, 1, 0, v6);
}

void sub_100019B70(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "cloudContext"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "userInfo"));
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "userStartDate"));

  if (!v4)
  {
    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "lastAppOpenDate"));

    if (!v5 && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      sub_100077130();
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "lastAppOpenDate"));
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "cloudContext"));
    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "userInfo"));
    objc_msgSend(v8, "setUserStartDate:", v6);

  }
}

void sub_10001A0A0()
{
  NSObject *v0;
  uint8_t v1[16];

  v0 = FCAnalyticsLog;
  if (os_log_type_enabled(FCAnalyticsLog, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)v1 = 0;
    _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_INFO, "No scene ID passed in to end", v1, 2u);
  }
}

void sub_10001A104()
{
  NSObject *v0;
  uint8_t v1[16];

  v0 = FCAnalyticsLog;
  if (os_log_type_enabled(FCAnalyticsLog, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)v1 = 0;
    _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_INFO, "No Session in progress for the scene to end", v1, 2u);
  }
}

void sub_10001A2D4(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  id v6;

  v3 = a2;
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSUUID UUID](NSUUID, "UUID"));
  v6 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "UUIDString"));

  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "sceneSessionDictionary"));
  objc_msgSend(v5, "setObject:forKeyedSubscript:", v6, v3);

}

void sub_10001BEC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,id location)
{
  id *v25;
  id *v26;
  uint64_t v27;

  objc_destroyWeak(v26);
  objc_destroyWeak(v25);
  objc_destroyWeak(&location);
  objc_destroyWeak((id *)(v27 - 120));
  _Unwind_Resume(a1);
}

void sub_10001BEF0(uint64_t a1)
{
  __int128 v2;
  _QWORD block[4];
  id v4;
  id v5;
  id v6;
  __int128 v7;
  __int128 v8;

  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10001BFAC;
  block[3] = &unk_1000D97F8;
  objc_copyWeak(&v5, (id *)(a1 + 40));
  objc_copyWeak(&v6, (id *)(a1 + 48));
  v2 = *(_OWORD *)(a1 + 72);
  v7 = *(_OWORD *)(a1 + 56);
  v8 = v2;
  v4 = *(id *)(a1 + 32);
  dispatch_async((dispatch_queue_t)&_dispatch_main_q, block);

  objc_destroyWeak(&v6);
  objc_destroyWeak(&v5);
}

void sub_10001BFAC(uint64_t a1)
{
  id WeakRetained;
  id v3;
  id v4;
  id v5;
  void *v6;
  _BOOL4 v7;
  void *v8;
  void *v9;
  unsigned int v10;
  void *v11;
  void *v12;
  void *v13;
  NSObject *v14;
  void **v15;
  uint64_t v16;
  void (*v17)(uint64_t);
  void *v18;
  id v19;
  id v20;
  CGRect v21;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  v3 = objc_loadWeakRetained((id *)(a1 + 48));
  if (v3)
  {
    if (WeakRetained)
    {
      if ((objc_msgSend(WeakRetained, "isCancelled") & 1) == 0)
      {
        v4 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "imageUpdateOperation"));

        if (WeakRetained == v4)
        {
          v5 = objc_loadWeakRetained((id *)(a1 + 48));
          v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "tagImageLayer"));
          objc_msgSend(v6, "bounds");
          v7 = CGRectEqualToRect(v21, *(CGRect *)(a1 + 56));

          if (v7)
          {
            v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "image"));
            v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "cardCellDelegate"));
            v10 = objc_msgSend(v9, "shouldAnimateImageLoadForCell:", v5);

            if (v10)
            {
              v15 = _NSConcreteStackBlock;
              v16 = 3221225472;
              v17 = sub_10001C1A0;
              v18 = &unk_1000D97A8;
              v19 = v5;
              v20 = v8;
              +[UIView transitionWithView:duration:options:animations:completion:](UIView, "transitionWithView:duration:options:animations:completion:", v5, 5242882, &v15, 0, 0.25);

            }
            else
            {
              objc_msgSend(v5, "setImage:", v8);
              v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "actionButton"));
              objc_msgSend(v11, "setAlpha:", 1.0);

            }
            v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "tagImageLayer", v15, v16, v17, v18, v19));
            v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "contents"));

            if (!v13)
            {
              v14 = FCDefaultLog;
              if (os_log_type_enabled(FCDefaultLog, OS_LOG_TYPE_ERROR))
                sub_100077654(a1, v14);
            }

          }
          objc_msgSend(v5, "setImageUpdateOperation:", 0);

        }
      }
    }
  }

}

void sub_10001C1A0(uint64_t a1)
{
  id v2;

  objc_msgSend(*(id *)(a1 + 32), "setImage:", *(_QWORD *)(a1 + 40));
  v2 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "actionButton"));
  objc_msgSend(v2, "setAlpha:", 1.0);

}

void sub_10001C1EC(uint64_t a1)
{
  id v2;

  v2 = (id)objc_claimAutoreleasedReturnValue(+[FRFeedImageGenerationOperation sharedOperationQueue](FRFeedImageGenerationOperation, "sharedOperationQueue"));
  objc_msgSend(v2, "addOperation:", *(_QWORD *)(a1 + 32));

}

void sub_10001C5CC(uint64_t a1, void *a2, void *a3)
{
  id v5;
  void *v6;
  void *v7;
  void *v8;
  id v9;
  id v10;
  int8x16_t v11;
  _QWORD v12[4];
  id v13;
  int8x16_t v14;
  id v15;

  v5 = a3;
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "objectForKey:", *(_QWORD *)(a1 + 32)));
  v7 = v6;
  if (v6)
  {
    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "assetHandle"));
    v12[0] = _NSConcreteStackBlock;
    v12[1] = 3221225472;
    v12[2] = sub_100008B1C;
    v12[3] = &unk_1000D9820;
    v13 = v7;
    v11 = *(int8x16_t *)(a1 + 32);
    v9 = (id)v11.i64[0];
    v14 = vextq_s8(v11, v11, 8uLL);
    v15 = v5;
    v10 = objc_msgSend(v8, "downloadIfNeededWithCompletion:", v12);

  }
  else
  {
    objc_msgSend(*(id *)(a1 + 40), "finishedPerformingOperationWithError:", v5);
  }

}

uint64_t sub_10001CC70(uint64_t a1, void *a2)
{
  void *v2;
  void *v3;
  uint64_t v4;

  v2 = *(void **)(a1 + 32);
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "name"));
  v4 = objc_msgSend(v2, "containsObject:", v3) ^ 1;

  return v4;
}

void sub_10001CEA8(uint64_t a1, void *a2)
{
  void *v3;
  id v4;
  void *v5;
  void *v6;
  void *v7;
  id v8;

  if (a2)
  {
    v3 = *(void **)(a1 + 32);
    v4 = a2;
    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "analyticsReferralFactory"));
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "objectForKeyedSubscript:", UIApplicationOpenURLOptionsSourceApplicationKey));
    v8 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "analyticsReferralForURL:sourceApplication:", v4, v6));

    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "retryHandler"));
    objc_msgSend(v7, "handleOpenURL:options:analyticsReferral:", v4, *(_QWORD *)(a1 + 40), v8);

  }
}

void sub_10001D040(id a1)
{
  uint64_t v1;
  void *v2;

  v1 = objc_claimAutoreleasedReturnValue(+[UIImage imageNamed:](UIImage, "imageNamed:", CFSTR("news_notification_badge")));
  v2 = (void *)qword_10010A470;
  qword_10010A470 = v1;

}

void FRShowEnableNotificationsAlert(void *a1, uint64_t a2, void *a3, void *a4, void *a5)
{
  id v9;
  id v10;
  void (**v11)(id, uint64_t);
  id v12;
  void *v13;
  void *v14;
  void *v15;
  id v16;
  BOOL v17;
  void *v18;
  void *v19;
  void (**v20)(id, uint64_t);
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  _QWORD *v29;
  void *v30;
  void *v31;
  _QWORD v32[4];
  void (**v33)(id, uint64_t);
  _QWORD v34[4];
  void (**v35)(id, uint64_t);
  _QWORD v36[4];
  id v37;
  _QWORD v38[2];

  v9 = a1;
  v10 = a4;
  v11 = a5;
  v12 = a3;
  v13 = (void *)objc_claimAutoreleasedReturnValue(+[FRAppDelegate sharedDelegate](FRAppDelegate, "sharedDelegate"));
  v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "resolver"));

  v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "resolveProtocol:", &OBJC_PROTOCOL___TSNotificationManagerType));
  v16 = objc_msgSend(v15, "subscribeNotificationPromptForTagID:", v12);

  if (v16 == (id)2)
  {
    if (v11)
      v11[2](v11, 1);
  }
  else if (v16 == (id)1)
  {
    v36[0] = _NSConcreteStackBlock;
    v36[1] = 3221225472;
    v36[2] = sub_10001E5D0;
    v36[3] = &unk_1000D9948;
    v37 = v9;
    v29 = objc_retainBlock(v36);
    v18 = (void *)objc_claimAutoreleasedReturnValue(+[NSBundle mainBundle](NSBundle, "mainBundle"));
    v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v18, "localizedStringForKey:value:table:", CFSTR("Turn On"), &stru_1000DF290, 0));
    v34[0] = _NSConcreteStackBlock;
    v34[1] = 3221225472;
    v34[2] = sub_10001E730;
    v34[3] = &unk_1000D9970;
    v20 = v11;
    v35 = v20;
    v31 = (void *)objc_claimAutoreleasedReturnValue(+[UIAlertAction actionWithTitle:style:handler:](UIAlertAction, "actionWithTitle:style:handler:", v19, 0, v34));

    v21 = (void *)objc_claimAutoreleasedReturnValue(+[NSBundle mainBundle](NSBundle, "mainBundle"));
    v22 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v21, "localizedStringForKey:value:table:", CFSTR("Not Now"), &stru_1000DF290, 0));
    v32[0] = _NSConcreteStackBlock;
    v32[1] = 3221225472;
    v32[2] = sub_10001E748;
    v32[3] = &unk_1000D9970;
    v33 = v20;
    v30 = (void *)objc_claimAutoreleasedReturnValue(+[UIAlertAction actionWithTitle:style:handler:](UIAlertAction, "actionWithTitle:style:handler:", v22, 1, v32));

    v23 = (void *)objc_claimAutoreleasedReturnValue(+[NSBundle mainBundle](NSBundle, "mainBundle"));
    v24 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v23, "localizedStringForKey:value:table:", CFSTR("Find out about important stories from %@."), &stru_1000DF290, 0));
    v25 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", v24, v10));

    if (!a2)
    {
      v28 = (void *)objc_claimAutoreleasedReturnValue(+[NSBundle mainBundle](NSBundle, "mainBundle"));
      v26 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v28, "localizedStringForKey:value:table:", CFSTR("FRGetNotificationsAlertTitle"), &stru_1000DF290, 0));
      v38[0] = v30;
      v38[1] = v31;
      v27 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", v38, 2));
      ((void (*)(_QWORD *, void *, void *, void *, void *))v29[2])(v29, v26, v25, v27, v31);

    }
  }
  else
  {
    if (v16)
      v17 = 1;
    else
      v17 = v11 == 0;
    if (!v17)
      v11[2](v11, 0);
  }

}

void sub_10001E5D0(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, void *a5)
{
  id v9;
  id v10;
  void *v11;
  id v12;
  id v13;
  id v14;
  uint64_t v15;
  void *v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  _BYTE v21[128];

  v9 = a4;
  v10 = a5;
  v11 = (void *)objc_claimAutoreleasedReturnValue(+[UIAlertController alertControllerWithTitle:message:preferredStyle:](UIAlertController, "alertControllerWithTitle:message:preferredStyle:", a2, a3, 1));
  v17 = 0u;
  v18 = 0u;
  v19 = 0u;
  v20 = 0u;
  v12 = v9;
  v13 = objc_msgSend(v12, "countByEnumeratingWithState:objects:count:", &v17, v21, 16);
  if (v13)
  {
    v14 = v13;
    v15 = *(_QWORD *)v18;
    do
    {
      v16 = 0;
      do
      {
        if (*(_QWORD *)v18 != v15)
          objc_enumerationMutation(v12);
        objc_msgSend(v11, "addAction:", *(_QWORD *)(*((_QWORD *)&v17 + 1) + 8 * (_QWORD)v16), (_QWORD)v17);
        v16 = (char *)v16 + 1;
      }
      while (v14 != v16);
      v14 = objc_msgSend(v12, "countByEnumeratingWithState:objects:count:", &v17, v21, 16);
    }
    while (v14);
  }

  if (v10)
    objc_msgSend(v11, "setPreferredAction:", v10);
  objc_msgSend(*(id *)(a1 + 32), "presentViewController:animated:completion:", v11, 1, 0, (_QWORD)v17);

}

uint64_t sub_10001E730(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 32);
  if (result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(result + 16))(result, 1);
  return result;
}

uint64_t sub_10001E748(uint64_t a1)
{
  void *v2;
  void *v3;
  uint64_t result;

  v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSUserDefaults standardUserDefaults](NSUserDefaults, "standardUserDefaults"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](NSDate, "date"));
  objc_msgSend(v2, "setObject:forKey:", v3, FCNotificationManagerLastDeclinedNotificationDateKey);

  result = *(_QWORD *)(a1 + 32);
  if (result)
    return (*(uint64_t (**)(uint64_t, _QWORD))(result + 16))(result, 0);
  return result;
}

void sub_10001E924(id a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  uint64_t v11;
  void *v12;
  void *v13;
  void *v14;
  _QWORD v15[12];
  _QWORD v16[12];

  v15[0] = CFSTR("FRSystemFont-Ultralight");
  v14 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", UIFontWeightUltraLight));
  v16[0] = v14;
  v15[1] = CFSTR("FRSystemFont-Thin");
  v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", UIFontWeightThin));
  v16[1] = v13;
  v15[2] = CFSTR("FRSystemFont-Light");
  v1 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", UIFontWeightLight));
  v16[2] = v1;
  v15[3] = CFSTR("FRSystemFont-Regular");
  v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", UIFontWeightRegular));
  v16[3] = v2;
  v15[4] = CFSTR("FRSystemFont-Medium");
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", UIFontWeightMedium));
  v16[4] = v3;
  v15[5] = CFSTR("FRSystemFont-Semibold");
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", UIFontWeightSemibold));
  v16[5] = v4;
  v15[6] = CFSTR("FRSystemFont-Bold");
  v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", UIFontWeightBold));
  v16[6] = v5;
  v15[7] = CFSTR("FRSystemFont-Heavy");
  v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", UIFontWeightHeavy));
  v16[7] = v6;
  v15[8] = CFSTR("FRSystemFont-Black");
  v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", UIFontWeightBlack));
  v16[8] = v7;
  v15[9] = CFSTR("FRSystemFont-Condensed-Bold");
  v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", UIFontWeightBold));
  v16[9] = v8;
  v15[10] = CFSTR("FRSystemFont-Condensed-Semibold");
  v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", UIFontWeightSemibold));
  v16[10] = v9;
  v15[11] = CFSTR("FRSystemFont-Condensed-Black");
  v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", UIFontWeightBlack));
  v16[11] = v10;
  v11 = objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v16, v15, 12));
  v12 = (void *)qword_10010A488;
  qword_10010A488 = v11;

}

uint64_t sub_10001FBE4(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  uint64_t v7;
  void *v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD v13[4];
  id v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;

  v5 = a2;
  v6 = a3;
  v17 = 0;
  v18 = &v17;
  v19 = 0x2020000000;
  v20 = 0;
  v7 = FCProtocolCast(&OBJC_PROTOCOL___FCTagProviding, v5);
  v8 = (void *)objc_claimAutoreleasedReturnValue(v7);
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 3221225472;
  v13[2] = sub_10001FCEC;
  v13[3] = &unk_1000D99B8;
  v9 = v6;
  v10 = *(_QWORD *)(a1 + 32);
  v14 = v9;
  v15 = v10;
  v16 = &v17;
  FCPerformIfNonNil(v8, v13);

  v11 = v18[3];
  _Block_object_dispose(&v17, 8);

  return v11;
}

void sub_10001FCD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10001FCEC(_QWORD *a1, void *a2)
{
  id v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  id v7;
  _QWORD v8[5];
  id v9;
  uint64_t v10;

  v3 = a2;
  v4 = FCProtocolCast(&OBJC_PROTOCOL___FCTagProviding, a1[4]);
  v5 = (void *)objc_claimAutoreleasedReturnValue(v4);
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_10001FD94;
  v8[3] = &unk_1000D99B8;
  v6 = a1[6];
  v8[4] = a1[5];
  v9 = v3;
  v10 = v6;
  v7 = v3;
  FCPerformIfNonNil(v5, v8);

}

void sub_10001FD94(uint64_t a1, void *a2)
{
  void *v3;
  void *v4;
  __CFString *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  __CFString *v11;
  void *v12;
  void *v13;
  void *v14;
  id v15;

  v15 = a2;
  v3 = *(void **)(a1 + 32);
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "name"));
  if (v4)
    v5 = (__CFString *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "name"));
  else
    v5 = &stru_1000DF290;
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "identifier"));
  v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@%@"), v5, v6));
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "trimTheArticle:", v7));

  if (v4)
  v9 = *(void **)(a1 + 32);
  v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v15, "name"));
  if (v10)
    v11 = (__CFString *)objc_claimAutoreleasedReturnValue(objc_msgSend(v15, "name"));
  else
    v11 = &stru_1000DF290;
  v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v15, "identifier"));
  v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@%@"), v11, v12));
  v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "trimTheArticle:", v13));

  if (v10)
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24) = objc_msgSend(v8, "compare:options:", v14, 65);

}

uint64_t sub_100020070(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  void *v8;
  uint64_t v9;
  void *v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  void *v15;
  id v16;
  void *v17;
  void *v18;
  id v19;
  void *v20;
  void *v21;
  __CFString *v22;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  __CFString *v29;
  void *v30;
  void *v31;
  void *v32;

  v5 = a2;
  v6 = a3;
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "tagOpenedDate"));
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "identifier"));
  v9 = objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "objectForKey:", v8));

  v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "tagOpenedDate"));
  v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "identifier"));
  v12 = objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "objectForKey:", v11));

  if (v9 && !v12)
    goto LABEL_3;
  if (!v9 && v12)
    goto LABEL_6;
  if (v9 | v12)
  {
    v13 = (uint64_t)objc_msgSend((id)v12, "compare:", v9);
    goto LABEL_17;
  }
  v14 = *(void **)(a1 + 40);
  v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "identifier"));
  v16 = objc_msgSend(v14, "indexOfObject:", v15);

  v17 = *(void **)(a1 + 40);
  v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "identifier"));
  v19 = objc_msgSend(v17, "indexOfObject:", v18);

  if (v16 == (id)0x7FFFFFFFFFFFFFFFLL && v19 != (id)0x7FFFFFFFFFFFFFFFLL)
  {
LABEL_6:
    v13 = 1;
    goto LABEL_17;
  }
  if (v16 != (id)0x7FFFFFFFFFFFFFFFLL && v19 == (id)0x7FFFFFFFFFFFFFFFLL)
  {
LABEL_3:
    v13 = -1;
  }
  else if (v16 == (id)0x7FFFFFFFFFFFFFFFLL && v19 == (id)0x7FFFFFFFFFFFFFFFLL)
  {
    v20 = *(void **)(a1 + 32);
    v21 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "name"));
    if (v21)
      v22 = (__CFString *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "name"));
    else
      v22 = &stru_1000DF290;
    v24 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "identifier"));
    v25 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@%@"), v22, v24));
    v26 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v20, "trimTheArticle:", v25));

    if (v21)
    v27 = *(void **)(a1 + 32);
    v28 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "name"));
    if (v28)
      v29 = (__CFString *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "name"));
    else
      v29 = &stru_1000DF290;
    v30 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "identifier"));
    v31 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@%@"), v29, v30));
    v32 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v27, "trimTheArticle:", v31));

    if (v28)
    v13 = (uint64_t)objc_msgSend(v26, "compare:options:", v32, 65);

  }
  else if (v16 == v19)
  {
    v13 = 0;
  }
  else if (v16 > v19)
  {
    v13 = 1;
  }
  else
  {
    v13 = -1;
  }
LABEL_17:

  return v13;
}

id sub_1000206C4(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  void *v7;
  void *v8;

  v2 = (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
  v3 = (void *)objc_claimAutoreleasedReturnValue(v2);
  v4 = (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
  v5 = objc_claimAutoreleasedReturnValue(v4);
  v6 = (void *)v5;
  if (v5)
    v7 = (void *)v5;
  else
    v7 = &__NSArray0__struct;
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "arrayByAddingObjectsFromArray:", v7));

  return v8;
}

void sub_100020D50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_list va;

  va_start(va, a15);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100020D94(uint64_t a1, void *a2, uint64_t a3, _BYTE *a4)
{
  id v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  uint64_t v13;
  void *v14;
  void *v15;
  id obj;

  v6 = a2;
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "filePath"));
  if (v7)
  {
    v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSURL fileURLWithPath:isDirectory:](NSURL, "fileURLWithPath:isDirectory:", v7, 0));
    if (v8)
    {
      v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSUUID UUID](NSUUID, "UUID"));
      v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "UUIDString"));

      v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "URLByAppendingPathComponent:isDirectory:", v10, 0));
      v12 = *(void **)(a1 + 40);
      v13 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
      obj = *(id *)(v13 + 40);
      objc_msgSend(v12, "copyItemAtURL:toURL:error:", v8, v11, &obj);
      objc_storeStrong((id *)(v13 + 40), obj);
      v14 = *(void **)(a1 + 48);
      v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "remoteURL"));
      objc_msgSend(v14, "setObject:forKeyedSubscript:", v11, v15);

      if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40))
        *a4 = 1;

    }
  }
  else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
  {
    sub_1000781F8();
  }

}

id sub_1000213D4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _objc_msgSend(*(id *)(a1 + 32), "assetHandleForURL:prefetchedFileURL:importMethod:lifetimeHint:", a2, a3, 0, 0);
}

void sub_100021768(uint64_t a1)
{
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));
}

void sub_100021770(uint64_t a1)
{
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));
}

id sub_100021778(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "finishedPerformingOperationWithError:", 0);
}

id sub_100021784(uint64_t a1)
{
  void *v1;
  _QWORD v3[5];

  v1 = *(void **)(a1 + 32);
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_1000217D8;
  v3[3] = &unk_1000D9758;
  v3[4] = v1;
  return objc_msgSend(v1, "_processSignals:", v3);
}

id sub_1000217D8(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "finishedPerformingOperationWithError:", 0);
}

void sub_100021D74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,char a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,char a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,char a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a65;
  uint64_t v65;

  _Block_object_dispose(&a41, 8);
  _Block_object_dispose(&a47, 8);
  _Block_object_dispose(&a53, 8);
  _Block_object_dispose(&a59, 8);
  _Block_object_dispose(&a65, 8);
  _Block_object_dispose((const void *)(v65 - 224), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_100021E04(uint64_t a1)
{
  void *v2;
  uint64_t result;

  v2 = (void *)FCOperationLog;
  if (os_log_type_enabled(FCOperationLog, OS_LOG_TYPE_ERROR))
    sub_100078A68(a1, v2);
  result = *(_QWORD *)(a1 + 40);
  if (result)
    return (*(uint64_t (**)(void))(result + 16))();
  return result;
}

void sub_100021E5C(uint64_t a1, void *a2, void *a3, void *a4, void *a5)
{
  id v10;
  id v11;
  id v12;
  id v13;
  void *v14;
  void *v15;
  NSObject *v16;
  void *v17;
  int v18;
  void *v19;

  v10 = a2;
  v11 = a3;
  v12 = a4;
  v13 = a5;
  objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40), a2);
  objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40), a3);
  objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 40), a4);
  objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 72) + 8) + 40), a5);
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));
  v14 = (void *)FCOperationLog;
  if (os_log_type_enabled(FCOperationLog, OS_LOG_TYPE_DEFAULT))
  {
    v15 = *(void **)(a1 + 40);
    v16 = v14;
    v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v15, "shortOperationDescription"));
    v18 = 138543362;
    v19 = v17;
    _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "%{public}@ did consider external signals", (uint8_t *)&v18, 0xCu);

  }
}

void sub_100021FD8(uint64_t a1, void *a2, void *a3)
{
  id v6;
  id v7;
  void *v8;
  void *v9;
  NSObject *v10;
  void *v11;
  int v12;
  void *v13;

  v6 = a2;
  v7 = a3;
  objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40), a2);
  objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40), a3);
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));
  v8 = (void *)FCOperationLog;
  if (os_log_type_enabled(FCOperationLog, OS_LOG_TYPE_DEFAULT))
  {
    v9 = *(void **)(a1 + 40);
    v10 = v8;
    v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "shortOperationDescription"));
    v12 = 138543362;
    v13 = v11;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "%{public}@ did consider internal signals", (uint8_t *)&v12, 0xCu);

  }
}

void sub_1000220FC(uint64_t a1)
{
  void *v2;
  id v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  id v9;
  id v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  id v15;
  id v16;
  id v17;
  id v18;
  id v19;
  id v20;
  id v21;
  id v22;
  id v23;
  id v24;
  char *v25;
  char *v26;
  id v27;
  char *v28;
  id v29;
  char *v30;
  char *v31;
  char *v32;
  NSObject *v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  void *v40;
  void *v41;
  void *v42;
  void *v43;
  void *v44;
  void *v45;
  void *v46;
  void *v47;
  NSObject *v48;
  void *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  void *v60;
  void *v61;
  void *v62;
  void *v63;
  void *v64;
  id v65;
  id v66;
  uint64_t v67;
  __int128 v68;
  void *v69;
  void *v70;
  NSObject *v71;
  void *v72;
  uint64_t v73;
  void *v74;
  void *v75;
  void *v76;
  void *v77;
  void *v78;
  void *v79;
  void *v80;
  void *v81;
  void *v82;
  void *v83;
  void *v84;
  void *v85;
  uint64_t v86;
  void *v87;
  void *v88;
  void *v89;
  void *v90;
  uint64_t v91;
  void *v92;
  void *v93;
  void *v94;
  _QWORD v95[5];
  id v96;
  id v97;
  id v98;
  id v99;
  id v100;
  id v101;
  uint64_t v102;
  __int128 v103;
  __int128 v104;
  _QWORD v105[5];
  _QWORD v106[4];
  id v107;
  uint64_t v108;
  __int128 v109;
  uint64_t v110;
  _QWORD v111[4];
  id v112;
  id v113;
  _QWORD v114[5];
  id v115;
  _QWORD v116[8];
  _QWORD v117[7];
  uint8_t buf[4];
  void *v119;
  __int16 v120;
  char *v121;

  v114[2] = sub_100022C44;
  v114[3] = &unk_1000D9B20;
  v2 = *(void **)(a1 + 40);
  v114[4] = *(_QWORD *)(a1 + 32);
  v114[0] = _NSConcreteStackBlock;
  v114[1] = 3221225472;
  v115 = v2;
  v3 = sub_100022C44((uint64_t)v114);
  v4 = (void *)objc_claimAutoreleasedReturnValue(v3);
  v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableDictionary dictionary](NSMutableDictionary, "dictionary"));
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "subscriptionController"));
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "subscriptionsWithType:", 3));

  v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableSet set](NSMutableSet, "set"));
  v111[0] = _NSConcreteStackBlock;
  v111[1] = 3221225472;
  v111[2] = sub_100022D8C;
  v111[3] = &unk_1000D9B48;
  v9 = v5;
  v112 = v9;
  v10 = v8;
  v113 = v10;
  objc_msgSend(v7, "enumerateObjectsUsingBlock:", v111);
  v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "subscriptionController"));
  v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "subscriptionsWithType:", 4));
  v13 = v12;
  if (!v12)
    v12 = &__NSArray0__struct;
  v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "fc_setByTransformingWithBlock:", &stru_1000D9B88));

  if (!v4)
  {
    v15 = &_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      sub_10007912C();

  }
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40))
  {
    if (v10)
      goto LABEL_16;
    goto LABEL_13;
  }
  v16 = &_os_log_default;
  if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
    sub_100079068();

  if (!v10)
  {
LABEL_13:
    v17 = &_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      sub_100078FA4();

  }
LABEL_16:
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 40))
  {
    if (v14)
      goto LABEL_25;
    goto LABEL_22;
  }
  v18 = &_os_log_default;
  if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
    sub_100078EE0();

  if (!v14)
  {
LABEL_22:
    v19 = &_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      sub_100078E1C();

  }
LABEL_25:
  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 72) + 8) + 40))
  {
    v20 = &_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      sub_100078D58();

  }
  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 80) + 8) + 40))
  {
    v21 = &_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      sub_100078C94();

  }
  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 8) + 40))
  {
    v22 = &_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      sub_100078BD0();

  }
  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 96) + 8) + 40))
  {
    v23 = &_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      sub_100078B0C();

  }
  v24 = objc_msgSend(v4, "count");
  v25 = (char *)objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40), "count");
  v26 = &v25[(unint64_t)objc_msgSend(v10, "count") + (_QWORD)v24];
  v27 = objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 40), "count");
  v28 = &v26[(unint64_t)objc_msgSend(v14, "count") + (_QWORD)v27];
  v29 = objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 72) + 8) + 40), "count");
  v30 = (char *)objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 80) + 8) + 40), "count") + (_QWORD)v29;
  v31 = &v28[(unint64_t)objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 8) + 40), "count")
           + (_QWORD)v30];
  v32 = (char *)objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 96) + 8) + 40), "count") + (_QWORD)v31;
  v33 = FCOperationLog;
  if (os_log_type_enabled(v33, OS_LOG_TYPE_DEFAULT))
  {
    v34 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "shortOperationDescription"));
    *(_DWORD *)buf = 138543618;
    v119 = v34;
    v120 = 2048;
    v121 = v32;
    _os_log_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_DEFAULT, "%{public}@ finished processing signals with %lu candidates", buf, 0x16u);

  }
  if (v32)
  {
    v35 = (uint64_t)v4;
    v94 = v4;
    if (!v4)
      v35 = objc_claimAutoreleasedReturnValue(+[NSSet set](NSSet, "set"));
    v85 = (void *)v35;
    v117[0] = v35;
    v36 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40);
    v91 = v36;
    if (!v36)
      v36 = objc_claimAutoreleasedReturnValue(+[NSSet set](NSSet, "set"));
    v83 = (void *)v36;
    v117[1] = v36;
    v37 = (uint64_t)v10;
    v93 = v10;
    if (!v10)
      v37 = objc_claimAutoreleasedReturnValue(+[NSSet set](NSSet, "set"));
    v89 = v14;
    v81 = (void *)v37;
    v117[2] = v37;
    v38 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 72) + 8) + 40);
    v39 = v38;
    if (!v38)
      v39 = objc_claimAutoreleasedReturnValue(+[NSSet set](NSSet, "set"));
    v90 = v9;
    v79 = (void *)v39;
    v117[3] = v39;
    v40 = *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 80) + 8) + 40);
    v41 = v40;
    if (!v40)
      v41 = (void *)objc_claimAutoreleasedReturnValue(+[NSSet set](NSSet, "set"));
    v87 = v7;
    v117[4] = v41;
    v42 = *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 8) + 40);
    v43 = v42;
    if (!v42)
      v43 = (void *)objc_claimAutoreleasedReturnValue(+[NSSet set](NSSet, "set"));
    v117[5] = v43;
    v44 = *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 96) + 8) + 40);
    v45 = v44;
    if (!v44)
      v45 = (void *)objc_claimAutoreleasedReturnValue(+[NSSet set](NSSet, "set"));
    v117[6] = v45;
    v46 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", v117, 7));
    v88 = (void *)objc_claimAutoreleasedReturnValue(+[NSSet fc_unionOfSetsInArray:](NSSet, "fc_unionOfSetsInArray:", v46));

    if (v44)
    {
      if (v42)
        goto LABEL_60;
    }
    else
    {

      if (v42)
        goto LABEL_60;
    }

LABEL_60:
    if (v40)
    {
      if (v38)
        goto LABEL_62;
    }
    else
    {

      if (v38)
        goto LABEL_62;
    }

LABEL_62:
    if (!v93)

    if (!v91)
    if (!v4)

    v47 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 40), "fc_setByUnioningSet:", v89));
    v92 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v47, "fc_setByMinusingSet:", v88));

    v48 = FCOperationLog;
    if (os_log_type_enabled(v48, OS_LOG_TYPE_DEFAULT))
    {
      v49 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "shortOperationDescription"));
      *(_DWORD *)buf = 138543362;
      v119 = v49;
      _os_log_impl((void *)&_mh_execute_header, v48, OS_LOG_TYPE_DEFAULT, "%{public}@ looking for valid candidates", buf, 0xCu);

    }
    v84 = *(void **)(a1 + 32);
    v50 = (uint64_t)v4;
    if (!v4)
      v50 = objc_claimAutoreleasedReturnValue(+[NSSet set](NSSet, "set"));
    v82 = (void *)v50;
    v116[0] = v50;
    v51 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40);
    v86 = v51;
    if (!v51)
      v51 = objc_claimAutoreleasedReturnValue(+[NSSet set](NSSet, "set"));
    v116[1] = v51;
    v52 = (uint64_t)v93;
    if (!v93)
      v52 = objc_claimAutoreleasedReturnValue(+[NSSet set](NSSet, "set"));
    v78 = (void *)v52;
    v80 = (void *)v51;
    v116[2] = v52;
    v53 = (uint64_t)v92;
    if (!v92)
      v53 = objc_claimAutoreleasedReturnValue(+[NSSet set](NSSet, "set"));
    v77 = (void *)v53;
    v116[3] = v53;
    v54 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 72) + 8) + 40);
    v55 = v54;
    if (!v54)
      v55 = objc_claimAutoreleasedReturnValue(+[NSSet set](NSSet, "set"));
    v76 = (void *)v55;
    v116[4] = v55;
    v56 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 80) + 8) + 40);
    v57 = v56;
    if (!v56)
      v57 = objc_claimAutoreleasedReturnValue(+[NSSet set](NSSet, "set"));
    v75 = (void *)v57;
    v116[5] = v57;
    v58 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 8) + 40);
    v59 = v58;
    if (!v58)
      v59 = objc_claimAutoreleasedReturnValue(+[NSSet set](NSSet, "set"));
    v74 = (void *)v59;
    v116[6] = v59;
    v60 = *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 96) + 8) + 40);
    v61 = v60;
    if (!v60)
      v61 = (void *)objc_claimAutoreleasedReturnValue(+[NSSet set](NSSet, "set"));
    v116[7] = v61;
    v62 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", v116, 8));
    v63 = (void *)objc_claimAutoreleasedReturnValue(+[NSSet fc_unionOfSetsInArray:](NSSet, "fc_unionOfSetsInArray:", v62));
    v106[0] = _NSConcreteStackBlock;
    v106[1] = 3221225472;
    v106[2] = sub_100022E38;
    v106[3] = &unk_1000D9BB0;
    v108 = *(_QWORD *)(a1 + 56);
    v107 = v93;
    v109 = *(_OWORD *)(a1 + 80);
    v110 = *(_QWORD *)(a1 + 96);
    v105[0] = _NSConcreteStackBlock;
    v105[1] = 3221225472;
    v105[2] = sub_100022EDC;
    v105[3] = &unk_1000D9BD8;
    v105[4] = v110;
    v95[0] = _NSConcreteStackBlock;
    v95[1] = 3221225472;
    v95[2] = sub_100022EF0;
    v95[3] = &unk_1000D9CA0;
    v64 = *(void **)(a1 + 40);
    v95[4] = *(_QWORD *)(a1 + 32);
    v96 = v64;
    v97 = v90;
    v65 = v92;
    v98 = v65;
    v66 = v94;
    v67 = *(_QWORD *)(a1 + 56);
    v99 = v66;
    v102 = v67;
    v100 = v107;
    v68 = *(_OWORD *)(a1 + 88);
    v103 = *(_OWORD *)(a1 + 72);
    v104 = v68;
    v101 = *(id *)(a1 + 48);
    objc_msgSend(v84, "_findValidAutoFavoritesWithCandidates:channelsAllowedProvider:topicsAllowedProvider:completion:", v63, v106, v105, v95);

    if (!v60)
    v7 = v87;
    if (!v58)

    v9 = v90;
    v10 = v93;
    if (v56)
    {
      if (v54)
        goto LABEL_92;
    }
    else
    {

      if (v54)
        goto LABEL_92;
    }

LABEL_92:
    if (!v92)

    v4 = v94;
    if (!v93)

    if (v86)
    {
      if (v94)
      {
LABEL_98:

        v14 = v89;
        goto LABEL_103;
      }
    }
    else
    {

      if (v94)
        goto LABEL_98;
    }

    goto LABEL_98;
  }
  v69 = (void *)FCOperationLog;
  if (os_log_type_enabled(FCOperationLog, OS_LOG_TYPE_DEFAULT))
  {
    v70 = *(void **)(a1 + 32);
    v71 = v69;
    v72 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v70, "shortOperationDescription"));
    *(_DWORD *)buf = 138543362;
    v119 = v72;
    _os_log_impl((void *)&_mh_execute_header, v71, OS_LOG_TYPE_DEFAULT, "%{public}@ done because there are no candidates", buf, 0xCu);

  }
  v73 = *(_QWORD *)(a1 + 48);
  if (v73)
    (*(void (**)(void))(v73 + 16))();
LABEL_103:

}

id sub_100022C44(uint64_t a1)
{
  void *v2;
  void *v3;
  id v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  uint64_t v10;
  unint64_t v11;
  void *v12;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "subscriptionController"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "subscriptionsWithType:", 0));

  v4 = objc_msgSend(v3, "count");
  if (v4 >= objc_msgSend(*(id *)(a1 + 40), "numSubscriptionsToDisableDefaultTopics"))
  {
    v10 = (uint64_t)objc_msgSend(*(id *)(a1 + 40), "numEventsToDisableDefaultTopics");
    if (!v10)
    {
      v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSSet set](NSSet, "set"));
      goto LABEL_4;
    }
    v11 = v10;
    if (v10 >= 1)
    {
      v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "aggregateStore"));
      v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "baselineAggregateWithConfigurableValues:", *(_QWORD *)(a1 + 40)));

      if ((unint64_t)objc_msgSend(v5, "eventCount") >= v11)
      {
        v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSSet set](NSSet, "set"));
        goto LABEL_3;
      }

    }
  }
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "whitelist"));
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "defaultTags"));
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "allKeys"));
  v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSSet setWithArray:](NSSet, "setWithArray:", v7));

LABEL_3:
LABEL_4:

  return v8;
}

void sub_100022D8C(uint64_t a1, void *a2)
{
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  id v8;

  v8 = a2;
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "dateAdded"));
  v4 = *(void **)(a1 + 32);
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "tagID"));
  objc_msgSend(v4, "setObject:forKeyedSubscript:", v3, v5);

  if (objc_msgSend(v8, "subscriptionOrigin") == (id)3)
  {
    v6 = *(void **)(a1 + 40);
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "tagID"));
    objc_msgSend(v6, "addObject:", v7);

  }
}

NSString *__cdecl sub_100022E30(id a1, FCSubscription *a2)
{
  return (NSString *)-[FCSubscription tagID](a2, "tagID");
}

uint64_t sub_100022E38(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;

  v3 = a2;
  if ((objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), "containsObject:", v3) & 1) != 0
    || (objc_msgSend(*(id *)(a1 + 32), "containsObject:", v3) & 1) != 0
    || (objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40), "containsObject:", v3) & 1) != 0
    || (objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40), "containsObject:", v3) & 1) != 0)
  {
    v4 = 1;
  }
  else
  {
    v4 = (uint64_t)objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 40), "containsObject:", v3);
  }

  return v4;
}

id sub_100022EDC(uint64_t a1, uint64_t a2)
{
  return objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40), "containsObject:", a2);
}

void sub_100022EF0(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  NSObject *v6;
  void *v7;
  double v8;
  double v9;
  double v10;
  double v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  id v18;
  id v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  id v24;
  void *v25;
  void *v26;
  uint64_t v27;
  FRPersonalizationAutoFavorites *v28;
  id v29;
  id v30;
  uint64_t v31;
  void *v32;
  void *v33;
  void *v34;
  void *v35;
  void *v36;
  void *v37;
  void *v38;
  void *v39;
  void *v40;
  void *v41;
  uint64_t v42;
  void **v43;
  uint64_t v44;
  void (*v45)(uint64_t, void *);
  void *v46;
  id v47;
  id v48;
  uint64_t v49;
  _QWORD v50[4];
  id v51;
  _QWORD v52[5];
  id v53;
  uint64_t v54;
  uint64_t v55;
  double v56;
  double v57;
  uint8_t buf[4];
  void *v59;
  __int16 v60;
  id v61;

  v3 = a2;
  v4 = (void *)FCOperationLog;
  if (os_log_type_enabled(FCOperationLog, OS_LOG_TYPE_DEFAULT))
  {
    v5 = *(void **)(a1 + 32);
    v6 = v4;
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "shortOperationDescription"));
    *(_DWORD *)buf = 138543618;
    v59 = v7;
    v60 = 2048;
    v61 = objc_msgSend(v3, "count");
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "%{public}@ found %lu valid candidates", buf, 0x16u);

  }
  objc_msgSend(*(id *)(a1 + 40), "autoUnfavoriteFactor");
  v9 = v8;
  objc_msgSend(*(id *)(a1 + 40), "autoGroupableFactor");
  v11 = v9 / v10;
  objc_msgSend(*(id *)(a1 + 40), "appUsagePriorFactorExponent");
  v13 = v12;
  objc_msgSend(*(id *)(a1 + 40), "appUsageTagFavorabilityExponent");
  v14 = *(void **)(a1 + 32);
  v52[0] = _NSConcreteStackBlock;
  v52[1] = 3221225472;
  v52[2] = sub_1000233BC;
  v52[3] = &unk_1000D9C00;
  v52[4] = v14;
  v54 = v13;
  v55 = v15;
  v16 = *(_QWORD *)(a1 + 48);
  v53 = *(id *)(a1 + 56);
  v56 = v11;
  v57 = v9;
  v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "auditCandidates:autoSubscriptionAddedDateByTagId:multiplierProvider:", v3, v16, v52));
  v18 = objc_msgSend(v17, "copy");
  v19 = objc_msgSend(v17, "count");
  if (v19 > objc_msgSend(*(id *)(a1 + 40), "maxNumberOfSuggestions"))
  {
    v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "tagRanker"));
    v21 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v17, "allObjects"));
    v22 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v20, "scoresForTagIDs:", v21));

    v23 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v17, "allObjects"));
    v50[0] = _NSConcreteStackBlock;
    v50[1] = 3221225472;
    v50[2] = sub_10002343C;
    v50[3] = &unk_1000D9C28;
    v51 = v22;
    v24 = v22;
    v25 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v23, "sortedArrayUsingComparator:", v50));
    v26 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v25, "fc_safeSubarrayWithCountFromFront:", objc_msgSend(*(id *)(a1 + 40), "maxNumberOfSuggestions")));
    v27 = objc_claimAutoreleasedReturnValue(+[NSSet setWithArray:](NSSet, "setWithArray:", v26));

    v17 = (void *)v27;
  }
  v28 = objc_alloc_init(FRPersonalizationAutoFavorites);
  v43 = _NSConcreteStackBlock;
  v44 = 3221225472;
  v45 = sub_1000234D4;
  v46 = &unk_1000D9C78;
  v29 = v17;
  v47 = v29;
  v30 = *(id *)(a1 + 56);
  v31 = *(_QWORD *)(a1 + 32);
  v48 = v30;
  v49 = v31;
  v32 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary fc_dictionary:](NSDictionary, "fc_dictionary:", &v43));
  -[FRPersonalizationAutoFavorites setAutoFavoriteTagIDsToScores:](v28, "setAutoFavoriteTagIDsToScores:", v32, v43, v44, v45, v46);

  v33 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 56), "fc_setByIntersectingSet:", v29));
  -[FRPersonalizationAutoFavorites setGroupableFavoriteTagIDs:](v28, "setGroupableFavoriteTagIDs:", v33);

  v34 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 64), "fc_setByIntersectingSet:", v18));
  -[FRPersonalizationAutoFavorites setDefaultCandidates:](v28, "setDefaultCandidates:", v34);

  v35 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 8) + 40), "fc_setByIntersectingSet:", v18));
  -[FRPersonalizationAutoFavorites setInternalSignalAutoFavoriteCandidates:](v28, "setInternalSignalAutoFavoriteCandidates:", v35);

  v36 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 72), "fc_setByIntersectingSet:", v18));
  -[FRPersonalizationAutoFavorites setExistingInternalSignalAutoFavoriteCandidates:](v28, "setExistingInternalSignalAutoFavoriteCandidates:", v36);

  v37 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 56), "fc_setByIntersectingSet:", v18));
  -[FRPersonalizationAutoFavorites setGroupableCandidates:](v28, "setGroupableCandidates:", v37);

  v38 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 96) + 8) + 40), "fc_setByIntersectingSet:", v18));
  -[FRPersonalizationAutoFavorites setPortraitAutoFavoriteCandidates:](v28, "setPortraitAutoFavoriteCandidates:", v38);

  v39 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 104) + 8) + 40), "fc_setByIntersectingSet:", v18));
  -[FRPersonalizationAutoFavorites setAppUsageAutoFavoriteCandidates:](v28, "setAppUsageAutoFavoriteCandidates:", v39);

  v40 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 112) + 8) + 40), "fc_setByIntersectingSet:", v18));
  -[FRPersonalizationAutoFavorites setSafariAutoFavoriteCandidates:](v28, "setSafariAutoFavoriteCandidates:", v40);

  v41 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 120) + 8) + 40), "fc_setByIntersectingSet:", v18));
  -[FRPersonalizationAutoFavorites setLocationAutoFavoriteCandidates:](v28, "setLocationAutoFavoriteCandidates:", v41);

  objc_msgSend(*(id *)(a1 + 32), "setResultAutoFavorites:", v28);
  v42 = *(_QWORD *)(a1 + 80);
  if (v42)
    (*(void (**)(void))(v42 + 16))();

}

double sub_1000233BC(uint64_t a1, void *a2)
{
  void *v3;
  double v4;
  double v5;
  id v6;
  double v7;
  double v8;
  uint64_t v9;

  v3 = *(void **)(a1 + 32);
  v4 = *(double *)(a1 + 48);
  v5 = *(double *)(a1 + 56);
  v6 = a2;
  objc_msgSend(v3, "metricMultiplierForTagID:withPriorFactorExponent:tagFavorabilityExponent:", v6, v4, v5);
  v8 = v7;
  LODWORD(v3) = objc_msgSend(*(id *)(a1 + 40), "containsObject:", v6);

  v9 = 72;
  if ((_DWORD)v3)
    v9 = 64;
  return v8 * *(double *)(a1 + v9);
}

id sub_10002343C(uint64_t a1, void *a2, uint64_t a3)
{
  void *v5;
  id v6;
  uint64_t v7;
  void *v8;
  _UNKNOWN **v9;
  _UNKNOWN **v10;
  _UNKNOWN **v11;
  id v12;

  v5 = *(void **)(a1 + 32);
  v6 = a2;
  v7 = objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "objectForKeyedSubscript:", a3));
  v8 = (void *)v7;
  if (v7)
    v9 = (_UNKNOWN **)v7;
  else
    v9 = &off_1000E4B78;
  v10 = (_UNKNOWN **)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "objectForKeyedSubscript:", v6));

  if (v10)
    v11 = v10;
  else
    v11 = &off_1000E4B78;
  v12 = objc_msgSend(v9, "compare:", v11);

  return v12;
}

void sub_1000234D4(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  id v11;
  id v12;
  id v13;
  id v14;
  _QWORD v15[5];
  id v16;
  id v17;
  id v18;

  v3 = a2;
  v14 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "fc_setByMinusingSet:", *(_QWORD *)(a1 + 40)));
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "aggregateStore"));
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "allObjects"));
  v6 = (void *)objc_claimAutoreleasedReturnValue(+[FCPersonalizationFeature featuresFromTagIDs:](FCPersonalizationFeature, "featuresFromTagIDs:", v5));
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "aggregatesForFeatures:", v6));

  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "aggregateStore"));
  v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "configurableValues"));
  v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "baselineAggregateWithConfigurableValues:", v9));

  v15[0] = _NSConcreteStackBlock;
  v15[1] = 3221225472;
  v15[2] = sub_10002363C;
  v15[3] = &unk_1000D9C50;
  v15[4] = *(_QWORD *)(a1 + 48);
  v16 = v7;
  v17 = v3;
  v18 = v10;
  v11 = v10;
  v12 = v3;
  v13 = v7;
  objc_msgSend(v14, "enumerateObjectsUsingBlock:", v15);

}

void sub_10002363C(uint64_t a1, void *a2)
{
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  id v12;

  v12 = a2;
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "whitelist"));
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "configurableValues"));
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "defaultScoringConfig"));
  objc_msgSend(v5, "baselineRatePrior");
  FCPersonalizationBaselineClicksMultiplerForTagID(v12, v3);

  v6 = *(void **)(a1 + 40);
  v7 = (void *)objc_claimAutoreleasedReturnValue(+[FCPersonalizationFeature featureFromTagID:](FCPersonalizationFeature, "featureFromTagID:", v12));
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "objectForKeyedSubscript:", v7));

  v9 = *(void **)(a1 + 56);
  v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "aggregateStore"));
  objc_msgSend(v10, "decayRate");
  if (v8)
    objc_msgSend(v8, "personalizationValueWithBaseline:decayRate:baselineClicksMultiplier:", v9);
  else
    objc_msgSend(v9, "personalizationValueWithBaseline:decayRate:", 0);
  v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:"));
  objc_msgSend(*(id *)(a1 + 48), "setObject:forKeyedSubscript:", v11, v12);

}

void sub_100023A44(uint64_t a1, void *a2)
{
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  unsigned __int8 v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  id v15;

  v15 = a2;
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "subscriptionController"));
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "mutedTagIDs"));
  if (objc_msgSend(v4, "containsObject:", v15))
    goto LABEL_4;
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "subscriptionController"));
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "subscribedTagIDs"));
  if ((objc_msgSend(v6, "containsObject:", v15) & 1) == 0)
  {
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "subscriptionController"));
    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "ignoredTagIDs"));
    v9 = objc_msgSend(v8, "containsObject:", v15);

    if ((v9 & 1) != 0)
      goto LABEL_5;
    v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "defaultTags"));
    v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "objectForKeyedSubscript:", v15));
    if (v11)
    {

    }
    else
    {
      v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "optionalTags"));
      v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "objectForKeyedSubscript:", v15));

      if (!v13)
      {
        v14 = *(void **)(a1 + 56);
        goto LABEL_11;
      }
    }
    v14 = *(void **)(a1 + 48);
LABEL_11:
    objc_msgSend(v14, "addObject:", v15);
    goto LABEL_5;
  }

LABEL_4:
LABEL_5:

}

void sub_100023BA4(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  id v5;
  uint64_t v6;
  void *i;
  uint64_t v8;
  void *v9;
  id v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _BYTE v15[128];

  v3 = a2;
  v11 = 0u;
  v12 = 0u;
  v13 = 0u;
  v14 = 0u;
  v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
  if (v4)
  {
    v5 = v4;
    v6 = *(_QWORD *)v12;
    do
    {
      for (i = 0; i != v5; i = (char *)i + 1)
      {
        if (*(_QWORD *)v12 != v6)
          objc_enumerationMutation(v3);
        v8 = *(_QWORD *)(*((_QWORD *)&v11 + 1) + 8 * (_QWORD)i);
        v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "objectForKeyedSubscript:", v8));
        if (objc_msgSend(v9, "isSubscribable")
          && +[FCTagController isTagAllowed:](FCTagController, "isTagAllowed:", v9)
          && (objc_msgSend(v9, "isSports") & 1) == 0)
        {
          v10 = objc_msgSend(v9, "tagType");
          if (v10 == (id)1)
          {
            if ((objc_msgSend(v9, "isHidden") & 1) == 0
              && (*(unsigned int (**)(void))(*(_QWORD *)(a1 + 56) + 16))())
            {
LABEL_16:
              objc_msgSend(*(id *)(a1 + 32), "addObject:", v8);
            }
          }
          else if (v10 == (id)2
                 && (objc_msgSend(v9, "isHidden") & 1) == 0
                 && ((*(uint64_t (**)(void))(*(_QWORD *)(a1 + 48) + 16))() & 1) != 0)
          {
            goto LABEL_16;
          }
        }

      }
      v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
    }
    while (v5);
  }
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 40));

}

uint64_t sub_100023D48(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 40);
  if (result)
    return (*(uint64_t (**)(uint64_t, _QWORD))(result + 16))(result, *(_QWORD *)(a1 + 32));
  return result;
}

void sub_100023F74(uint64_t a1, void *a2)
{
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  double v8;
  double v9;
  double v10;
  double v11;
  void *v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  id *v18;
  double v19;
  double v20;
  double v21;
  double v22;
  void *v23;
  double v24;
  id v25;

  v25 = a2;
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v25, "featureKey"));
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[FCPersonalizationFeature featureForIdentifier:](FCPersonalizationFeature, "featureForIdentifier:", v3));

  v6 = objc_opt_class(FCTagIDFeature, v5);
  if ((objc_opt_isKindOfClass(v4, v6) & 1) != 0)
  {
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "tagID"));
    objc_msgSend(*(id *)(a1 + 32), "internalUsageSignalWeight");
    v9 = v8;
    objc_msgSend(*(id *)(a1 + 40), "ctrForTagID:withAggregate:baselineAggregate:", v7, v25, *(_QWORD *)(a1 + 48));
    v11 = v9 * v10;
    v12 = *(void **)(a1 + 40);
    objc_msgSend(*(id *)(a1 + 32), "appUsagePriorFactorExponent");
    v14 = v13;
    objc_msgSend(*(id *)(a1 + 32), "appUsageTagFavorabilityExponent");
    objc_msgSend(v12, "metricMultiplierForTagID:withPriorFactorExponent:tagFavorabilityExponent:", v7, v14, v15);
    v17 = v16;
    if (objc_msgSend(*(id *)(a1 + 40), "shouldAcceptAggregate:withCtr:minEvents:minClicks:minRate:baseRate:multiplier:", v25, v11, *(double *)(a1 + 72), *(double *)(a1 + 80), *(double *)(a1 + 88), *(double *)(a1 + 96), v16))
    {
      v18 = (id *)(a1 + 56);
    }
    else
    {
      v19 = *(double *)(a1 + 72);
      v20 = *(double *)(a1 + 80);
      v21 = *(double *)(a1 + 88);
      v22 = *(double *)(a1 + 96);
      v23 = *(void **)(a1 + 40);
      objc_msgSend(*(id *)(a1 + 32), "autoGroupableFactor");
      if (!objc_msgSend(v23, "shouldAcceptAggregate:withCtr:minEvents:minClicks:minRate:baseRate:multiplier:", v25, v11, v19, v20, v21, v22, v17 / v24))
      {
LABEL_7:

        goto LABEL_8;
      }
      v18 = (id *)(a1 + 64);
    }
    objc_msgSend(*v18, "addObject:", v7);
    goto LABEL_7;
  }
LABEL_8:

}

void sub_1000243C8(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  NSObject *v6;
  void *v7;
  uint64_t v8;
  int v9;
  void *v10;

  v3 = a2;
  v4 = (void *)FCOperationLog;
  if (os_log_type_enabled(FCOperationLog, OS_LOG_TYPE_DEFAULT))
  {
    v5 = *(void **)(a1 + 32);
    v6 = v4;
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "shortOperationDescription"));
    v9 = 138543362;
    v10 = v7;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "%{public}@ did consider location", (uint8_t *)&v9, 0xCu);

  }
  v8 = *(_QWORD *)(a1 + 40);
  if (v8)
    (*(void (**)(uint64_t, id))(v8 + 16))(v8, v3);

}

void sub_1000244B4(_QWORD *a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  NSObject *v6;
  void *v7;
  void *v8;
  int v9;
  void *v10;

  v3 = a2;
  v4 = (void *)FCOperationLog;
  if (os_log_type_enabled(FCOperationLog, OS_LOG_TYPE_DEFAULT))
  {
    v5 = (void *)a1[4];
    v6 = v4;
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "shortOperationDescription"));
    v9 = 138543362;
    v10 = v7;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "%{public}@ did fetch local areas provider", (uint8_t *)&v9, 0xCu);

  }
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "autoFavoriteTagIDsForLocation:", a1[5]));
  (*(void (**)(void))(a1[6] + 16))();

}

double sub_10002479C(uint64_t a1, void *a2)
{
  void *v3;
  id v4;
  double v5;
  double v6;
  void *v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;

  v3 = *(void **)(a1 + 32);
  v4 = a2;
  objc_msgSend(v3, "portraitSignalWeight");
  v6 = v5;
  v7 = *(void **)(a1 + 40);
  objc_msgSend(*(id *)(a1 + 32), "portraitPriorFactorExponent");
  v9 = v8;
  objc_msgSend(*(id *)(a1 + 32), "portraitTagFavorabilityExponent");
  objc_msgSend(v7, "metricMultiplierForTagID:withPriorFactorExponent:tagFavorabilityExponent:", v4, v9, v10);
  v12 = v11;

  return v6 * v12;
}

void sub_100024A30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v10;
  va_list va;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  va_list va1;

  va_start(va1, a9);
  va_start(va, a9);
  v10 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

void sub_100024A60(uint64_t a1, void *a2, void *a3)
{
  id v6;
  id v7;
  void *v8;
  void *v9;
  NSObject *v10;
  char *v11;
  void *v12;
  NSObject *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  void *v23;
  NSObject *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  id v34;
  char *v35;
  NSObject *v36;
  _BOOL4 v37;
  uint64_t v38;
  void *v39;
  void *v40;
  void *v41;
  NSObject *v42;
  char *v43;
  id v44;
  int v45;
  char *v46;

  v6 = a2;
  v7 = a3;
  objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40), a2);
  objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40), a3);
  v8 = (void *)FCBiomeLog;
  if (os_log_type_enabled(FCBiomeLog, OS_LOG_TYPE_DEFAULT))
  {
    v9 = *(void **)(a1 + 32);
    v10 = v8;
    v11 = (char *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "shortOperationDescription"));
    v45 = 138543362;
    v46 = v11;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "%{public}@ did consider Biome", (uint8_t *)&v45, 0xCu);

  }
  v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "bundleIDMapping"));

  if (!v12)
  {
    v13 = FCBiomeLog;
    if (os_log_type_enabled(FCBiomeLog, OS_LOG_TYPE_ERROR))
      sub_100079394(v13, v14, v15, v16, v17, v18, v19, v20);
    v21 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
    v22 = *(void **)(v21 + 40);
    *(_QWORD *)(v21 + 40) = &__NSArray0__struct;

  }
  v23 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "urlMapping"));

  if (!v23)
  {
    v24 = FCBiomeLog;
    if (os_log_type_enabled(FCBiomeLog, OS_LOG_TYPE_ERROR))
      sub_100079364(v24, v25, v26, v27, v28, v29, v30, v31);
    v32 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
    v33 = *(void **)(v32 + 40);
    *(_QWORD *)(v32 + 40) = &__NSArray0__struct;

  }
  v34 = objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40), "count");
  v35 = (char *)objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40), "count");
  v36 = FCBiomeLog;
  v37 = os_log_type_enabled(FCBiomeLog, OS_LOG_TYPE_DEFAULT);
  if (&v35[(_QWORD)v34])
  {
    if (v37)
    {
      v41 = *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40);
      v42 = v36;
      v43 = (char *)objc_msgSend(v41, "count");
      v44 = objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40), "count");
      v45 = 134217984;
      v46 = &v43[(_QWORD)v44];
      _os_log_impl((void *)&_mh_execute_header, v42, OS_LOG_TYPE_DEFAULT, "Got back %lu results from Biome", (uint8_t *)&v45, 0xCu);

    }
    objc_msgSend(*(id *)(a1 + 32), "processAppSignals:safariSignals:completion:", *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40), *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40), *(_QWORD *)(a1 + 40));
  }
  else
  {
    if (v37)
    {
      LOWORD(v45) = 0;
      _os_log_impl((void *)&_mh_execute_header, v36, OS_LOG_TYPE_DEFAULT, "Didn't get any results back from Biome", (uint8_t *)&v45, 2u);
    }
    v38 = *(_QWORD *)(a1 + 40);
    if (v38)
    {
      v39 = (void *)objc_claimAutoreleasedReturnValue(+[NSSet set](NSSet, "set"));
      v40 = (void *)objc_claimAutoreleasedReturnValue(+[NSSet set](NSSet, "set"));
      (*(void (**)(uint64_t, void *, void *))(v38 + 16))(v38, v39, v40);

    }
  }

}

void sub_10002533C(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  void *v8;
  NSObject *v9;
  void *v10;
  uint64_t v11;
  int v12;
  void *v13;

  v5 = a2;
  v6 = a3;
  v7 = (void *)FCOperationLog;
  if (os_log_type_enabled(FCOperationLog, OS_LOG_TYPE_DEFAULT))
  {
    v8 = *(void **)(a1 + 32);
    v9 = v7;
    v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "shortOperationDescription"));
    v12 = 138543362;
    v13 = v10;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "%{public}@ did process app signals", (uint8_t *)&v12, 0xCu);

  }
  v11 = *(_QWORD *)(a1 + 40);
  if (v11)
    (*(void (**)(uint64_t, id, id))(v11 + 16))(v11, v5, v6);

}

void sub_100025444(id a1, NSDictionary *a2, NSMutableDictionary *a3)
{
  NSMutableDictionary *v4;
  _QWORD v5[4];
  NSMutableDictionary *v6;

  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_1000254BC;
  v5[3] = &unk_1000D9EB0;
  v6 = a3;
  v4 = v6;
  -[NSDictionary enumerateKeysAndObjectsUsingBlock:](a2, "enumerateKeysAndObjectsUsingBlock:", v5);

}

void sub_1000254BC(uint64_t a1, void *a2, void *a3)
{
  void *v5;
  id v6;
  id v7;
  void *v8;
  uint64_t v9;
  void *v10;
  id v11;
  id v12;

  v5 = *(void **)(a1 + 32);
  v6 = a3;
  v7 = a2;
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "objectForKeyedSubscript:", v7));
  v10 = v8;
  if (v8)
    v11 = v8;
  else
    v11 = (id)objc_opt_new(NSMutableArray, v9);
  v12 = v11;

  objc_msgSend(v12, "addObject:", v6);
  objc_msgSend(*(id *)(a1 + 32), "setObject:forKeyedSubscript:", v12, v7);

}

void sub_10002555C(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id v7;
  _QWORD v8[4];
  id v9;
  id v10;
  id v11;
  id v12;
  id v13;
  id v14;
  id v15;
  _QWORD *v16;
  char v17;
  _QWORD v18[4];

  v5 = a2;
  v6 = a3;
  v18[0] = 0;
  v18[1] = v18;
  v18[2] = 0x2020000000;
  v18[3] = 0;
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_1000256B0;
  v8[3] = &unk_1000D9F50;
  v9 = *(id *)(a1 + 32);
  v7 = v6;
  v17 = *(_BYTE *)(a1 + 80);
  v14 = v7;
  v16 = v18;
  v15 = *(id *)(a1 + 72);
  v10 = *(id *)(a1 + 40);
  v11 = *(id *)(a1 + 48);
  v12 = *(id *)(a1 + 56);
  v13 = *(id *)(a1 + 64);
  objc_msgSend(v5, "enumerateObjectsUsingBlock:", v8);

  _Block_object_dispose(v18, 8);
}

void sub_100025698(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 64), 8);
  _Unwind_Resume(a1);
}

void sub_1000256B0(uint64_t a1, void *a2)
{
  id v3;
  char *v4;
  void *v5;
  void *v6;
  void *v7;
  id *v8;
  id v9;
  _BYTE *v10;
  uint64_t v11;
  id v12;
  id *v13;
  void ***v14;
  id v15;
  uint64_t v16;
  void **v17;
  uint64_t v18;
  id (*v19)(uint64_t);
  void *v20;
  id v21;
  void **v22;
  uint64_t v23;
  NSNumber *(*v24)(uint64_t, uint64_t, void *);
  void *v25;
  _QWORD v26[2];
  char v27;
  _QWORD v28[4];
  id v29;
  _QWORD v30[4];
  _QWORD v31[2];
  char v32;

  v3 = a2;
  v4 = (char *)objc_msgSend(v3, "type");
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "content"));
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "date"));

  if ((unint64_t)(v4 - 2) < 2)
  {
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "tagScoresForBundleID:", v5));
    if (objc_msgSend(v7, "count"))
    {
      v30[0] = _NSConcreteStackBlock;
      v30[1] = 3221225472;
      v30[2] = sub_100025954;
      v30[3] = &unk_1000D9ED8;
      v8 = (id *)v31;
      v9 = *(id *)(a1 + 72);
      v11 = *(_QWORD *)(a1 + 88);
      v10 = (_BYTE *)(a1 + 88);
      v32 = v10[8];
      v31[0] = v9;
      v31[1] = v11;
      v12 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "fc_dictionaryByTransformingValuesWithBlock:", v30));
      (*(void (**)(void))(*((_QWORD *)v10 - 1) + 16))();
      if (*((_QWORD *)v10 - 5) && objc_msgSend(v6, "compare:") == (id)-1)
        goto LABEL_12;
      v28[0] = _NSConcreteStackBlock;
      v28[1] = 3221225472;
      v28[2] = sub_1000259BC;
      v28[3] = &unk_1000D9F00;
      v13 = &v29;
      v12 = v12;
      v29 = v12;
      v14 = (void ***)v28;
LABEL_11:

LABEL_12:
      ++*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v10 + 8) + 24);

      goto LABEL_13;
    }
    goto LABEL_13;
  }
  if (v4 == (char *)1)
  {
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 56), "tagScoresForURL:", v5));
    if (objc_msgSend(v7, "count"))
    {
      v22 = _NSConcreteStackBlock;
      v23 = 3221225472;
      v24 = sub_100025A08;
      v25 = &unk_1000D9F28;
      v8 = (id *)v26;
      v15 = *(id *)(a1 + 72);
      v16 = *(_QWORD *)(a1 + 88);
      v10 = (_BYTE *)(a1 + 88);
      v27 = v10[8];
      v26[0] = v15;
      v26[1] = v16;
      v12 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "fc_dictionaryByTransformingValuesWithKeyAndValueBlock:", &v22));
      (*(void (**)(void))(*((_QWORD *)v10 - 1) + 16))();
      if (*((_QWORD *)v10 - 5) && objc_msgSend(v6, "compare:") == (id)-1)
        goto LABEL_12;
      v17 = _NSConcreteStackBlock;
      v18 = 3221225472;
      v19 = sub_100025A70;
      v20 = &unk_1000D9F00;
      v13 = &v21;
      v12 = v12;
      v21 = v12;
      v14 = &v17;
      goto LABEL_11;
    }
LABEL_13:

  }
}

NSNumber *sub_100025954(uint64_t a1, void *a2)
{
  double v3;
  uint64_t v4;

  objc_msgSend(a2, "doubleValue");
  if (*(_BYTE *)(a1 + 48))
    v4 = 0;
  else
    v4 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24);
  return +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", v3 * (*(double (**)(_QWORD, uint64_t))(*(_QWORD *)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32), v4));
}

id sub_1000259BC(uint64_t a1)
{
  void *v1;
  void *v2;

  v1 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "allKeys"));
  v2 = (void *)objc_claimAutoreleasedReturnValue(+[FCPersonalizationFeature featuresFromTagIDs:](FCPersonalizationFeature, "featuresFromTagIDs:", v1));

  return v2;
}

NSNumber *sub_100025A08(uint64_t a1, uint64_t a2, void *a3)
{
  double v4;
  uint64_t v5;

  objc_msgSend(a3, "doubleValue");
  if (*(_BYTE *)(a1 + 48))
    v5 = 0;
  else
    v5 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24);
  return +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", v4 * (*(double (**)(_QWORD, uint64_t))(*(_QWORD *)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32), v5));
}

id sub_100025A70(uint64_t a1)
{
  void *v1;
  void *v2;

  v1 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "allKeys"));
  v2 = (void *)objc_claimAutoreleasedReturnValue(+[FCPersonalizationFeature featuresFromTagIDs:](FCPersonalizationFeature, "featuresFromTagIDs:", v1));

  return v2;
}

long double sub_100025ABC(uint64_t a1, unint64_t a2)
{
  double v3;
  long double v4;

  v3 = *(double *)(a1 + 40);
  objc_msgSend(*(id *)(a1 + 32), "appUsageOccurrenceDecayMultiplier");
  return v3 * pow(v4, (double)a2);
}

long double sub_100025AF8(uint64_t a1, unint64_t a2)
{
  double v3;
  long double v4;

  v3 = *(double *)(a1 + 40);
  objc_msgSend(*(id *)(a1 + 32), "safariOccurrenceDecayMultiplier");
  return v3 * pow(v4, (double)a2);
}

void sub_100026160(uint64_t a1, void *a2, void *a3)
{
  void *v5;
  id v6;
  id v7;
  void *v8;
  void *v9;

  v5 = *(void **)(a1 + 32);
  v6 = a3;
  v7 = a2;
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "resultCursor"));
  objc_msgSend(v8, "setLastInternalSignalAutoFavorites:", v7);

  v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "resultCursor"));
  objc_msgSend(v9, "setLastInternalSignalGroupableFavorites:", v6);

  dispatch_group_leave(*(dispatch_group_t *)(a1 + 40));
}

void sub_1000261E0(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  void *v4;
  void *v5;
  id v6;

  v2 = *(_QWORD *)(a1 + 40);
  v6 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "resultCursor"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "lastInternalSignalAutoFavorites"));
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "resultCursor"));
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "lastInternalSignalGroupableFavorites"));
  (*(void (**)(uint64_t, void *, void *))(v2 + 16))(v2, v3, v5);

}

void sub_100026268(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  void *v4;
  void *v5;
  id v6;

  v2 = *(_QWORD *)(a1 + 40);
  v6 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "resultCursor"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "lastInternalSignalAutoFavorites"));
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "resultCursor"));
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "lastInternalSignalGroupableFavorites"));
  (*(void (**)(uint64_t, void *, void *))(v2 + 16))(v2, v3, v5);

}

void sub_1000265D0(uint64_t a1, void *a2, void *a3, void *a4, void *a5)
{
  id v9;
  id v10;
  id v11;
  void *v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  id v18;
  uint64_t v19;
  id v20;
  id v21;

  v20 = a2;
  v9 = a3;
  v10 = a4;
  v11 = a5;
  v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSUserDefaults standardUserDefaults](NSUserDefaults, "standardUserDefaults"));
  v13 = objc_msgSend(v12, "BOOLForKey:", FCPersonalizationSimulateSuggestions);

  if (v13)
  {
    v14 = objc_claimAutoreleasedReturnValue(objc_msgSend(v20, "setByAddingObjectsFromArray:", &off_1000E4928));

    v15 = objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "setByAddingObjectsFromArray:", &off_1000E4940));
    v16 = objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "setByAddingObjectsFromArray:", &off_1000E4958));

    v17 = objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "setByAddingObjectsFromArray:", &off_1000E4970));
    v18 = (id)v14;
    v9 = (id)v16;
    v10 = (id)v15;
    v11 = (id)v17;
  }
  else
  {
    v18 = v20;
  }
  v21 = v18;
  v19 = *(_QWORD *)(a1 + 32);
  if (v19)
    (*(void (**)(uint64_t, id, id, id, id))(v19 + 16))(v19, v21, v9, v10, v11);

}

void sub_100026728(uint64_t a1, void *a2, void *a3)
{
  void *v5;
  id v6;
  id v7;
  void *v8;
  void *v9;
  void *v10;
  _QWORD v11[4];
  id v12;
  id v13;

  v5 = *(void **)(a1 + 32);
  v6 = a3;
  v7 = a2;
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "resultCursor"));
  objc_msgSend(v8, "setLastAppUsageAutoFavoriteResults:", v7);

  v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "resultCursor"));
  objc_msgSend(v9, "setLastSafariAutoFavoriteResults:", v6);

  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472;
  v11[2] = sub_1000267FC;
  v11[3] = &unk_1000DA018;
  v10 = *(void **)(a1 + 40);
  v12 = *(id *)(a1 + 32);
  v13 = v10;
  objc_msgSend(v12, "considerLocation:", v11);

}

void sub_1000267FC(uint64_t a1, void *a2)
{
  void *v3;
  id v4;
  void *v5;

  v3 = *(void **)(a1 + 32);
  v4 = a2;
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "resultCursor"));
  objc_msgSend(v5, "setLastLocationAutoFavoriteResults:", v4);

  dispatch_group_leave(*(dispatch_group_t *)(a1 + 40));
}

void sub_100026850(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  id v18;

  v2 = *(_QWORD *)(a1 + 40);
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "resultCursor"));
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "lastPortraitAutoFavoriteResults"));
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "resultCursor"));
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "lastAppUsageAutoFavoriteResults"));
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "resultCursor"));
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "lastSafariAutoFavoriteResults"));
  v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "resultCursor"));
  v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "lastLocationAutoFavoriteResults"));
  (*(void (**)(uint64_t, void *, void *, void *, void *))(v2 + 16))(v2, v4, v6, v8, v10);

  v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](NSDate, "date"));
  v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "resultCursor"));
  objc_msgSend(v12, "setLastExternalSignalProcessingDate:", v11);

  v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "resultCursor"));
  v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "lastExternalSignalProcessingDate"));
  v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "resultCursor"));
  objc_msgSend(v15, "setCoreDuetLastQueryDate:", v14);

  v18 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "resultCursor"));
  v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v18, "lastExternalSignalProcessingDate"));
  v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "resultCursor"));
  objc_msgSend(v17, "setPortraitLastQueryDate:", v16);

}

id sub_1000270A8(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  id v11;

  v3 = a2;
  v4 = *(void **)(a1 + 32);
  v5 = *(void **)(a1 + 40);
  v6 = (void *)objc_claimAutoreleasedReturnValue(+[FCTagIDFeature featureFromTagID:](FCTagIDFeature, "featureFromTagID:", v3));
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "objectForKeyedSubscript:", v6));
  v8 = *(_QWORD *)(a1 + 48);
  v9 = *(_QWORD *)(a1 + 56);
  v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 64), "objectForKeyedSubscript:", v3));
  LOBYTE(a1) = objc_msgSend(v4, "shouldRejectTagID:withAggregate:baseline:currentDate:addedDate:maxIdleTime:minEvents:minRate:baseRate:multiplier:", v3, v7, v8, v9, v10, *(double *)(a1 + 80), *(double *)(a1 + 88), *(double *)(a1 + 96), *(double *)(a1 + 104), (*(double (**)(void))(*(_QWORD *)(a1 + 72) + 16))());

  if ((a1 & 1) != 0)
    v11 = 0;
  else
    v11 = v3;

  return v11;
}

double sub_1000278C0(id a1, NSString *a2)
{
  return 1.0;
}

void sub_1000278CC(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  id v5;
  _QWORD v6[4];
  id v7;
  id v8;
  id v9;
  id v10;
  uint64_t v11;

  v3 = a2;
  v4 = *(void **)(a1 + 32);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_100027998;
  v6[3] = &unk_1000DA0C8;
  v9 = *(id *)(a1 + 48);
  v11 = *(_QWORD *)(a1 + 64);
  v7 = *(id *)(a1 + 40);
  v10 = *(id *)(a1 + 56);
  v8 = v3;
  v5 = v3;
  objc_msgSend(v4, "enumerateKeysAndObjectsUsingBlock:", v6);

}

void sub_100027998(uint64_t a1, void *a2, void *a3)
{
  id v5;
  uint64_t v6;
  void *v7;
  void *v8;
  uint64_t v9;
  void *v10;
  double v11;
  double v12;
  uint64_t v13;
  NSString *v14;
  void *v15;
  id v16;

  v16 = a2;
  v5 = a3;
  v6 = *(_QWORD *)(a1 + 48);
  v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", *(double *)(a1 + 64)));
  v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("Considering signal %@ from Portait with threshold %@"), v16, v7));
  (*(void (**)(uint64_t, void *))(v6 + 16))(v6, v8);

  if (objc_msgSend(*(id *)(a1 + 32), "containsObject:", v16))
  {
    v9 = *(_QWORD *)(a1 + 48);
    v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("Portrait signal from %@ not added because it is disabled"), v16));
    (*(void (**)(uint64_t, void *))(v9 + 16))(v9, v10);
  }
  else
  {
    objc_msgSend(v5, "doubleValue");
    v12 = v11 * (*(double (**)(void))(*(_QWORD *)(a1 + 56) + 16))();
    if (v12 >= *(double *)(a1 + 64))
    {
      objc_msgSend(*(id *)(a1 + 40), "addObject:", v16);
      v13 = *(_QWORD *)(a1 + 48);
      v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", v12));
      v14 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("Autofavorite %@ based on Portrait Signal with score %@"), v16, v10);
    }
    else
    {
      v13 = *(_QWORD *)(a1 + 48);
      v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", v12));
      v14 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("Portrait signal from %@ not added to auto-favorites with score %@"), v16, v10);
    }
    v15 = (void *)objc_claimAutoreleasedReturnValue(v14);
    (*(void (**)(uint64_t, void *))(v13 + 16))(v13, v15);

  }
}

void sub_100027D6C(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  int v4;
  uint64_t v5;

  v2 = FRPortraitLog;
  if (os_log_type_enabled((os_log_t)FRPortraitLog, OS_LOG_TYPE_DEFAULT))
  {
    v3 = *(_QWORD *)(a1 + 32);
    v4 = 138543362;
    v5 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "No topics found for articleID: %{public}@ when considering portrait feedback for explicit engagement", (uint8_t *)&v4, 0xCu);
  }
}

void sub_100027E10(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  int v4;
  uint64_t v5;

  v2 = FRPortraitLog;
  if (os_log_type_enabled((os_log_t)FRPortraitLog, OS_LOG_TYPE_DEFAULT))
  {
    v3 = *(_QWORD *)(a1 + 32);
    v4 = 138543362;
    v5 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "No topics found for articleID: %{public}@ when considering portrait feedback for explicit engagement", (uint8_t *)&v4, 0xCu);
  }
}

void sub_100027EB4(uint64_t a1, uint64_t a2, void *a3)
{
  id v4;
  NSObject *v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  __int16 v10;
  uint64_t v11;

  v4 = a3;
  v5 = FRPortraitLog;
  if (v4)
  {
    if (os_log_type_enabled((os_log_t)FRPortraitLog, OS_LOG_TYPE_ERROR))
      sub_100079C14();
  }
  else if (os_log_type_enabled((os_log_t)FRPortraitLog, OS_LOG_TYPE_DEFAULT))
  {
    v6 = *(_QWORD *)(a1 + 32);
    v7 = *(_QWORD *)(a1 + 40);
    v8 = 138543618;
    v9 = v6;
    v10 = 2114;
    v11 = v7;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Successfully submitted portrait feedback for explicit engagement with articleID: %{public}@ and topicIDs: %{public}@", (uint8_t *)&v8, 0x16u);
  }

}

void sub_1000281A8(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  int v4;
  uint64_t v5;

  v2 = FRPortraitLog;
  if (os_log_type_enabled((os_log_t)FRPortraitLog, OS_LOG_TYPE_DEFAULT))
  {
    v3 = *(_QWORD *)(a1 + 32);
    v4 = 138543362;
    v5 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "No topics found for articleID: %{public}@ when considering portrait feedback for explicit rejection", (uint8_t *)&v4, 0xCu);
  }
}

void sub_10002824C(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  int v4;
  uint64_t v5;

  v2 = FRPortraitLog;
  if (os_log_type_enabled((os_log_t)FRPortraitLog, OS_LOG_TYPE_DEFAULT))
  {
    v3 = *(_QWORD *)(a1 + 32);
    v4 = 138543362;
    v5 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "No topics found for articleID: %{public}@ when considering portrait feedback for explicit rejection", (uint8_t *)&v4, 0xCu);
  }
}

void sub_1000282F0(uint64_t a1, uint64_t a2, void *a3)
{
  id v4;
  NSObject *v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  __int16 v10;
  uint64_t v11;

  v4 = a3;
  v5 = FRPortraitLog;
  if (v4)
  {
    if (os_log_type_enabled((os_log_t)FRPortraitLog, OS_LOG_TYPE_ERROR))
      sub_100079C74();
  }
  else if (os_log_type_enabled((os_log_t)FRPortraitLog, OS_LOG_TYPE_DEFAULT))
  {
    v6 = *(_QWORD *)(a1 + 32);
    v7 = *(_QWORD *)(a1 + 40);
    v8 = 138543618;
    v9 = v6;
    v10 = 2114;
    v11 = v7;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Successfully submitted portrait feedback for explicit rejection with articleID: %{public}@ and topicIDs: %{public}@", (uint8_t *)&v8, 0x16u);
  }

}

void sub_1000285BC(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  int v4;
  uint64_t v5;

  v2 = FRPortraitLog;
  if (os_log_type_enabled((os_log_t)FRPortraitLog, OS_LOG_TYPE_DEFAULT))
  {
    v3 = *(_QWORD *)(a1 + 32);
    v4 = 138543362;
    v5 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "No topics found for articleID: %{public}@ when considering portrait feedback for implicit engagement", (uint8_t *)&v4, 0xCu);
  }
}

void sub_100028660(uint64_t a1, uint64_t a2, void *a3)
{
  id v4;
  NSObject *v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  __int16 v10;
  uint64_t v11;

  v4 = a3;
  v5 = FRPortraitLog;
  if (v4)
  {
    if (os_log_type_enabled((os_log_t)FRPortraitLog, OS_LOG_TYPE_ERROR))
      sub_100079CD4();
  }
  else if (os_log_type_enabled((os_log_t)FRPortraitLog, OS_LOG_TYPE_DEFAULT))
  {
    v6 = *(_QWORD *)(a1 + 32);
    v7 = *(_QWORD *)(a1 + 40);
    v8 = 138543618;
    v9 = v6;
    v10 = 2114;
    v11 = v7;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Successfully submitted portrait feedback for implicit engagement with articleID: %{public}@ and topicIDs: %{public}@", (uint8_t *)&v8, 0x16u);
  }

}

void sub_10002892C(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  int v4;
  uint64_t v5;

  v2 = FRPortraitLog;
  if (os_log_type_enabled((os_log_t)FRPortraitLog, OS_LOG_TYPE_DEFAULT))
  {
    v3 = *(_QWORD *)(a1 + 32);
    v4 = 138543362;
    v5 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "No topics found for articleID: %{public}@ when considering portrait feedback for implicit rejection", (uint8_t *)&v4, 0xCu);
  }
}

void sub_1000289D0(uint64_t a1, uint64_t a2, void *a3)
{
  id v4;
  NSObject *v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  __int16 v10;
  uint64_t v11;

  v4 = a3;
  v5 = FRPortraitLog;
  if (v4)
  {
    if (os_log_type_enabled((os_log_t)FRPortraitLog, OS_LOG_TYPE_ERROR))
      sub_100079D34();
  }
  else if (os_log_type_enabled((os_log_t)FRPortraitLog, OS_LOG_TYPE_DEFAULT))
  {
    v6 = *(_QWORD *)(a1 + 32);
    v7 = *(_QWORD *)(a1 + 40);
    v8 = 138543618;
    v9 = v6;
    v10 = 2114;
    v11 = v7;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Successfully submitted portrait feedback for implicit rejection with articleID: %{public}@ and topicIDs: %{public}@", (uint8_t *)&v8, 0x16u);
  }

}

void sub_100028AC4(uint64_t a1@<X8>)
{
  uint64_t v1;

  *(_QWORD *)(v1 - 8) = a1;
}

void sub_100029BC4(uint64_t a1)
{
  CGContext *CurrentContext;
  double v3;

  CurrentContext = UIGraphicsGetCurrentContext();
  CGContextScaleCTM(CurrentContext, 1.0, -1.0);
  objc_msgSend(*(id *)(a1 + 32), "size");
  CGContextTranslateCTM(CurrentContext, 0.0, -v3);
  CGContextSaveGState(CurrentContext);
  CGContextClipToMask(CurrentContext, *(CGRect *)(a1 + 48), (CGImageRef)objc_msgSend(objc_retainAutorelease(*(id *)(a1 + 32)), "CGImage"));
  CGContextSetBlendMode(CurrentContext, kCGBlendModeMultiply);
  CGContextSetFillColorWithColor(CurrentContext, (CGColorRef)objc_msgSend(objc_retainAutorelease(*(id *)(a1 + 40)), "CGColor"));
  CGContextFillRect(CurrentContext, *(CGRect *)(a1 + 48));
  CGContextRestoreGState(CurrentContext);
}

void sub_100029D48(uint64_t a1)
{
  CGContext *CurrentContext;

  CurrentContext = UIGraphicsGetCurrentContext();
  CGContextScaleCTM(CurrentContext, 1.0, -1.0);
  CGContextTranslateCTM(CurrentContext, 0.0, -*(double *)(a1 + 56));
  CGContextSaveGState(CurrentContext);
  CGContextClipToMask(CurrentContext, *(CGRect *)(a1 + 64), (CGImageRef)objc_msgSend(objc_retainAutorelease(*(id *)(a1 + 32)), "CGImage"));
  CGContextSetBlendMode(CurrentContext, kCGBlendModeMultiply);
  CGContextSetFillColorWithColor(CurrentContext, (CGColorRef)objc_msgSend(objc_retainAutorelease(*(id *)(a1 + 40)), "CGColor"));
  CGContextFillRect(CurrentContext, *(CGRect *)(a1 + 64));
  CGContextRestoreGState(CurrentContext);
}

id sub_100029FB8(uint64_t a1)
{
  double v2;
  double v3;
  double v4;
  double v5;
  CGRect v7;

  objc_msgSend(*(id *)(a1 + 32), "size");
  v3 = v2;
  objc_msgSend(*(id *)(a1 + 32), "size");
  v5 = v4;
  objc_msgSend(*(id *)(a1 + 40), "setFill");
  v7.origin.x = 0.0;
  v7.origin.y = 0.0;
  v7.size.width = v3;
  v7.size.height = v5;
  UIRectFill(v7);
  return _objc_msgSend(*(id *)(a1 + 32), "drawInRect:", 0.0, 0.0, v3, v5);
}

id sub_10002A1CC(uint64_t a1)
{
  double v2;
  double v3;
  double v4;
  double v5;
  CGRect v7;

  objc_msgSend(*(id *)(a1 + 32), "setFill");
  objc_msgSend(*(id *)(a1 + 40), "size");
  v3 = v2;
  objc_msgSend(*(id *)(a1 + 40), "size");
  v5 = v4;
  v7.origin.x = 0.0;
  v7.origin.y = 0.0;
  v7.size.width = v3;
  v7.size.height = v5;
  UIRectFill(v7);
  return _objc_msgSend(*(id *)(a1 + 40), "drawInRect:blendMode:alpha:", 1, 0.0, 0.0, v3, v5, 1.0);
}

id sub_10002A3C4(uint64_t a1)
{
  void *v2;
  void *v3;

  v2 = *(void **)(a1 + 32);
  if (v2)
  {
    objc_msgSend(v2, "setFill");
    UIRectFill(*(CGRect *)(a1 + 48));
  }
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[UIBezierPath bezierPathWithRoundedRect:cornerRadius:](UIBezierPath, "bezierPathWithRoundedRect:cornerRadius:", *(double *)(a1 + 48), *(double *)(a1 + 56), *(double *)(a1 + 64), *(double *)(a1 + 72), *(double *)(a1 + 80)));
  objc_msgSend(v3, "addClip");

  return _objc_msgSend(*(id *)(a1 + 40), "drawInRect:", 0.0, 0.0, *(double *)(a1 + 88), *(double *)(a1 + 88));
}

void sub_10002A710(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_list va;

  va_start(va, a17);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10002A734(uint64_t a1, CGContext *a2)
{
  CGFloat x;
  CGFloat y;
  CGFloat width;
  CGFloat height;
  void *v8;
  void *v9;
  double v10;
  double v11;
  double v12;
  double v13;
  CGFloat v14;
  double v15;
  CGFloat v16;
  double v17;
  CGFloat v18;
  CGImage *v19;
  CGImage *Image;
  id v21;
  uint64_t v22;
  void *v23;
  id v24;
  CGRect v25;
  CGRect v26;
  CGRect v27;
  CGRect v28;
  CGRect v29;

  v25.origin.x = FRRectWithSize();
  x = v25.origin.x;
  y = v25.origin.y;
  width = v25.size.width;
  height = v25.size.height;
  v26 = CGRectInset(v25, 1.0, 1.0);
  v8 = (void *)objc_claimAutoreleasedReturnValue(+[UIBezierPath bezierPathWithRoundedRect:cornerRadius:](UIBezierPath, "bezierPathWithRoundedRect:cornerRadius:", v26.origin.x, v26.origin.y, v26.size.width, v26.size.height, *(double *)(a1 + 80) * *(double *)(a1 + 88)));
  CGContextBeginPath(a2);
  v24 = objc_retainAutorelease(v8);
  CGContextAddPath(a2, (CGPathRef)objc_msgSend(v24, "CGPath"));
  CGContextClip(a2);
  v9 = *(void **)(a1 + 32);
  if (v9)
  {
    CGContextSetFillColorWithColor(a2, (CGColorRef)objc_msgSend(objc_retainAutorelease(v9), "CGColor"));
    v27.origin.x = x;
    v27.origin.y = y;
    v27.size.width = width;
    v27.size.height = height;
    CGContextFillRect(a2, v27);
  }
  CGContextSetInterpolationQuality(a2, kCGInterpolationHigh);
  v10 = FRCenterOfRect(x, y, width, height);
  v12 = FRRectWithCenterAndSize(v10, v11, *(double *)(a1 + 96));
  v14 = v13;
  v16 = v15;
  v18 = v17;
  v19 = (CGImage *)objc_msgSend(objc_retainAutorelease(*(id *)(a1 + 40)), "CGImage");
  v28.origin.x = v12;
  v28.origin.y = v14;
  v28.size.width = v16;
  v28.size.height = v18;
  CGContextDrawImage(a2, v28, v19);
  if (*(_QWORD *)(a1 + 48))
  {
    objc_msgSend(v24, "bounds");
    CGContextAddEllipseInRect(a2, v29);
    CGContextSetStrokeColorWithColor(a2, (CGColorRef)objc_msgSend(objc_retainAutorelease(*(id *)(a1 + 48)), "CGColor"));
    CGContextSetLineWidth(a2, *(CGFloat *)(a1 + 88));
    CGContextStrokePath(a2);
  }
  Image = CGBitmapContextCreateImage(a2);
  v21 = objc_msgSend(objc_alloc((Class)UIImage), "initWithCGImage:scale:orientation:", Image, *(_QWORD *)(a1 + 112), *(double *)(a1 + 88));
  v22 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
  v23 = *(void **)(v22 + 40);
  *(_QWORD *)(v22 + 40) = v21;

  CGImageRelease(Image);
}

void sub_10002AC20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10002AC38(uint64_t a1, CGContextRef c)
{
  CGFloat v4;
  CGFloat v5;
  CGImage *v6;
  CGImage *Image;
  id v8;
  uint64_t v9;
  void *v10;
  CGRect v11;

  CGContextSetInterpolationQuality(c, kCGInterpolationHigh);
  CGContextScaleCTM(c, 1.0, -1.0);
  CGContextTranslateCTM(c, 0.0, -*(double *)(a1 + 48));
  v4 = *(double *)(a1 + 56);
  v5 = *(double *)(a1 + 64);
  v6 = (CGImage *)objc_msgSend(objc_retainAutorelease(*(id *)(a1 + 32)), "CGImage");
  v11.origin.x = 0.0;
  v11.origin.y = 0.0;
  v11.size.width = v4;
  v11.size.height = v5;
  CGContextDrawImage(c, v11, v6);
  Image = CGBitmapContextCreateImage(c);
  v8 = objc_msgSend(objc_alloc((Class)UIImage), "initWithCGImage:scale:orientation:", Image, *(_QWORD *)(a1 + 80), *(double *)(a1 + 72));
  v9 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v10 = *(void **)(v9 + 40);
  *(_QWORD *)(v9 + 40) = v8;

  CGImageRelease(Image);
}

id sub_10002AEF8(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "drawInRect:", *(double *)(a1 + 40), *(double *)(a1 + 48), *(double *)(a1 + 56), *(double *)(a1 + 64));
}

id sub_10002B030(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "drawAtPoint:", -*(double *)(a1 + 40), -*(double *)(a1 + 48));
}

void sub_10002B240(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_list va;

  va_start(va, a15);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10002B264(uint64_t a1, CGContextRef c)
{
  CGFloat v4;
  CGFloat v5;
  CGFloat v6;
  CGImage *v7;
  id v8;
  double v9;
  CGFloat v10;
  CGFloat v11;
  CGImage *v12;
  CGImage *Image;
  id v14;
  uint64_t v15;
  void *v16;
  CGRect v17;
  CGRect v18;
  CGRect v19;

  CGContextSetInterpolationQuality(c, kCGInterpolationHigh);
  v4 = *(double *)(a1 + 56);
  v5 = *(double *)(a1 + 64);
  v6 = *(double *)(a1 + 72);
  v7 = (CGImage *)objc_msgSend(objc_retainAutorelease(*(id *)(a1 + 32)), "CGImage");
  v17.origin.x = 0.0;
  v17.origin.y = v4;
  v17.size.width = v5;
  v17.size.height = v6;
  CGContextDrawImage(c, v17, v7);
  v8 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue(+[UIColor clearColor](UIColor, "clearColor")));
  CGContextSetFillColorWithColor(c, (CGColorRef)objc_msgSend(v8, "CGColor"));

  v18.size.height = *(CGFloat *)(a1 + 56);
  v18.size.width = *(CGFloat *)(a1 + 64);
  v18.origin.x = 0.0;
  v18.origin.y = 0.0;
  CGContextFillRect(c, v18);
  v9 = *(double *)(a1 + 88);
  v10 = ((double)*(unint64_t *)(a1 + 80) - v9) * 0.5;
  v11 = *(double *)(a1 + 56) - v9 * 0.5;
  v12 = (CGImage *)objc_msgSend(objc_retainAutorelease(*(id *)(a1 + 40)), "CGImage");
  v19.origin.x = v10;
  v19.origin.y = v11;
  v19.size.width = v9;
  v19.size.height = v9;
  CGContextDrawImage(c, v19, v12);
  Image = CGBitmapContextCreateImage(c);
  v14 = objc_msgSend(objc_alloc((Class)UIImage), "initWithCGImage:scale:orientation:", Image, objc_msgSend(*(id *)(a1 + 32), "imageOrientation"), *(double *)(a1 + 96));
  v15 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
  v16 = *(void **)(v15 + 40);
  *(_QWORD *)(v15 + 40) = v14;

  CGImageRelease(Image);
}

void sub_10002B598(uint64_t a1)
{
  CGContext *CurrentContext;
  id v3;

  CurrentContext = UIGraphicsGetCurrentContext();
  CGContextSetFillColorWithColor(CurrentContext, (CGColorRef)objc_msgSend(objc_retainAutorelease(*(id *)(a1 + 32)), "CGColor"));
  v3 = (id)objc_claimAutoreleasedReturnValue(+[UIBezierPath bezierPathWithRoundedRect:cornerRadius:](UIBezierPath, "bezierPathWithRoundedRect:cornerRadius:", *(double *)(a1 + 40), *(double *)(a1 + 48), *(double *)(a1 + 56), *(double *)(a1 + 64), *(double *)(a1 + 72)));
  objc_msgSend(v3, "fillWithBlendMode:alpha:", 0, 1.0);

}

void sub_10002BC04(uint64_t a1)
{
  CGContext *CurrentContext;
  double v3;
  double v4;
  CGImage *v5;
  id v6;
  CGRect v7;

  CurrentContext = UIGraphicsGetCurrentContext();
  CGContextScaleCTM(CurrentContext, 1.0, -1.0);
  CGContextTranslateCTM(CurrentContext, 0.0, -*(double *)(a1 + 48));
  v3 = *(double *)(a1 + 40);
  v4 = *(double *)(a1 + 48);
  v6 = (id)objc_claimAutoreleasedReturnValue(+[UIBezierPath bezierPathWithRoundedRect:cornerRadius:](UIBezierPath, "bezierPathWithRoundedRect:cornerRadius:", 0.0, 0.0, v3, v4, *(double *)(a1 + 56)));
  objc_msgSend(v6, "addClip");
  v5 = (CGImage *)objc_msgSend(objc_retainAutorelease(*(id *)(a1 + 32)), "CGImage");
  v7.origin.x = 0.0;
  v7.origin.y = 0.0;
  v7.size.width = v3;
  v7.size.height = v4;
  CGContextDrawImage(CurrentContext, v7, v5);

}

void sub_10002C424(_Unwind_Exception *a1)
{
  _Block_object_dispose(&STACK[0x230], 8);
  _Unwind_Resume(a1);
}

id sub_10002C46C(uint64_t a1)
{
  CGContext *CurrentContext;
  void *Data;
  size_t Width;
  size_t Height;
  size_t BytesPerRow;
  _QWORD v8[5];
  int8x16_t v9;
  void *v10;
  size_t v11;
  size_t v12;
  size_t v13;
  uint64_t v14;
  __int16 v15;

  CurrentContext = UIGraphicsGetCurrentContext();
  CGContextScaleCTM(CurrentContext, 1.0, -1.0);
  CGContextTranslateCTM(CurrentContext, 0.0, -*(double *)(a1 + 56));
  CGContextDrawImage(CurrentContext, *(CGRect *)(a1 + 64), (CGImageRef)objc_msgSend(objc_retainAutorelease(*(id *)(a1 + 32)), "CGImage"));
  Data = CGBitmapContextGetData(CurrentContext);
  Width = CGBitmapContextGetWidth(CurrentContext);
  Height = CGBitmapContextGetHeight(CurrentContext);
  BytesPerRow = CGBitmapContextGetBytesPerRow(CurrentContext);
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_10002C58C;
  v8[3] = &unk_1000DA2C0;
  v15 = *(_WORD *)(a1 + 120);
  v9 = vextq_s8(*(int8x16_t *)(a1 + 96), *(int8x16_t *)(a1 + 96), 8uLL);
  v10 = Data;
  v11 = Height;
  v12 = Width;
  v13 = BytesPerRow;
  v14 = *(_QWORD *)(a1 + 112);
  v8[4] = *(_QWORD *)(a1 + 40);
  return +[FRMacros useManagedContextWithSize:opaque:forceSRGB:scale:contextBlock:](FRMacros, "useManagedContextWithSize:opaque:forceSRGB:scale:contextBlock:", 0, 1, v8, *(double *)(a1 + 48), *(double *)(a1 + 56));
}

void sub_10002C58C(uint64_t a1)
{
  CGContext *CurrentContext;
  uint32_t v3;
  double v4;
  float64x2_t v5;
  uint64_t v6;
  double *v7;
  float64x2_t v8;
  float64x2_t v9;
  float64x2_t v10;
  vImage_Buffer *p_dest;
  vImage_Buffer *v12;
  UIImage *ImageFromCurrentImageContext;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  int16_t v17[8];
  vImage_Buffer dest;
  double v19;
  double v20;
  double v21;
  uint64_t v22;
  float64x2_t v23;
  float64_t v24;
  uint64_t v25;
  float64_t v26;
  float64x2_t v27;
  __int128 v28;
  __int128 v29;
  uint64_t v30;

  CurrentContext = UIGraphicsGetCurrentContext();
  dest.data = CGBitmapContextGetData(CurrentContext);
  dest.width = CGBitmapContextGetWidth(CurrentContext);
  dest.height = CGBitmapContextGetHeight(CurrentContext);
  dest.rowBytes = CGBitmapContextGetBytesPerRow(CurrentContext);
  if (*(_BYTE *)(a1 + 96))
  {
    v3 = vcvtmd_u64_f64(*(double *)(a1 + 40) * *(double *)(a1 + 48) * 3.0 * 2.50662827 * 0.25 + 0.5) | 1;
    vImageBoxConvolve_ARGB8888((const vImage_Buffer *)(a1 + 56), &dest, 0, 0, 0, v3, v3, 0, 8u);
    vImageBoxConvolve_ARGB8888(&dest, (const vImage_Buffer *)(a1 + 56), 0, 0, 0, v3, v3, 0, 8u);
    vImageBoxConvolve_ARGB8888((const vImage_Buffer *)(a1 + 56), &dest, 0, 0, 0, v3, v3, 0, 8u);
  }
  if (*(_BYTE *)(a1 + 97))
  {
    v4 = *(double *)(a1 + 88);
    v19 = v4 * 0.9278 + 0.0722;
    v20 = v4 * -0.0722 + 0.0722;
    v21 = v20;
    v23 = vmlaq_n_f64((float64x2_t)vdupq_n_s64(0x3FE6E2EB1C432CA5uLL), (float64x2_t)xmmword_1000D0A60, v4);
    v24 = v23.f64[0];
    v30 = 0x3FF0000000000000;
    v22 = 0;
    v25 = 0;
    v5 = vmlaq_n_f64((float64x2_t)vdupq_n_s64(0x3FCB367A0F9096BCuLL), (float64x2_t)xmmword_1000D0A70, v4);
    v26 = v5.f64[0];
    v27 = v5;
    v28 = 0u;
    v29 = 0u;
    v6 = 0;
    v7 = &v19;
    v8 = (float64x2_t)vdupq_n_s64(0x4070000000000000uLL);
    do
    {
      v9 = *(float64x2_t *)v7;
      v10 = *(float64x2_t *)(v7 + 2);
      v7 += 4;
      *(int16x4_t *)&v17[v6] = vmovn_s32(vcvtq_s32_f32(vrndaq_f32(vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vmulq_f64(v9, v8)), vmulq_f64(v10, v8)))));
      v6 += 4;
    }
    while (v6 != 16);
    if (*(_BYTE *)(a1 + 96))
    {
      p_dest = &dest;
      v12 = (vImage_Buffer *)(a1 + 56);
    }
    else
    {
      v12 = &dest;
      p_dest = (vImage_Buffer *)(a1 + 56);
    }
    vImageMatrixMultiply_ARGB8888(p_dest, v12, v17, 256, 0, 0, 0);
  }
  ImageFromCurrentImageContext = UIGraphicsGetImageFromCurrentImageContext();
  v14 = objc_claimAutoreleasedReturnValue(ImageFromCurrentImageContext);
  v15 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  v16 = *(void **)(v15 + 40);
  *(_QWORD *)(v15 + 40) = v14;

}

void sub_10002C81C(uint64_t a1, CGContext *a2)
{
  CGFloat v4;
  double v5;
  CGFloat v6;
  id v7;
  double Width;
  double v9;
  double v10;
  CGFloat Height;
  void *v12;
  double v13;
  CGFloat v14;
  double v15;
  CGFloat v16;
  double v17;
  CGFloat v18;
  double v19;
  CGFloat v20;
  CGImage *v21;
  void *v22;
  uint64_t v23;
  void *v24;
  id v25;
  void *v26;
  id v27;
  id v28;
  id v29;
  id v30;
  CGFloat x;
  CGFloat y;
  CGFloat v33;
  CGFloat v34;
  double v35;
  double v36;
  double v37;
  double v38;
  double v39;
  double v40;
  double v41;
  CGImage *Image;
  id v43;
  uint64_t v44;
  void *v45;
  id v46;
  id v47;
  CGRect v48;
  CGRect v49;
  CGRect v50;
  CGRect v51;
  CGRect v52;
  CGRect v53;
  CGRect v54;
  CGRect v55;
  CGRect v56;
  CGRect v57;
  CGRect v58;

  v46 = *(id *)(a1 + 32);
  v4 = *(double *)(a1 + 88);
  v5 = *(double *)(a1 + 96);
  v6 = *(double *)(a1 + 104);
  v7 = *(id *)(a1 + 40);
  CGContextScaleCTM(a2, 1.0, -1.0);
  CGContextTranslateCTM(a2, 0.0, -*(double *)(a1 + 128));
  CGContextSaveGState(a2);
  Width = CGRectGetWidth(*(CGRect *)(a1 + 136));
  if (vabdd_f64(Width, CGRectGetHeight(*(CGRect *)(a1 + 136))) >= 0.00999999978)
  {
    CGContextDrawImage(a2, *(CGRect *)(a1 + 136), (CGImageRef)objc_msgSend(objc_retainAutorelease(*(id *)(a1 + 48)), "CGImage"));
  }
  else
  {
    v9 = *(double *)(a1 + 120);
    v10 = *(double *)(a1 + 128);
    v48.origin.x = 0.0;
    v48.origin.y = 0.0;
    v48.size.width = v9;
    v48.size.height = v9;
    Height = CGRectGetHeight(v48);
    CGContextTranslateCTM(a2, 0.0, v10 - Height);
    v12 = (void *)objc_claimAutoreleasedReturnValue(+[UIBezierPath bezierPathWithRect:](UIBezierPath, "bezierPathWithRect:", 0.0, 0.0, v9, v9));
    objc_msgSend(v12, "addClip");
    objc_msgSend(*(id *)(a1 + 48), "filledRectForRect:", 0.0, 0.0, v9, v9);
    v14 = v13;
    v16 = v15;
    v18 = v17;
    v20 = v19;
    v21 = (CGImage *)objc_msgSend(objc_retainAutorelease(*(id *)(a1 + 48)), "CGImage");
    v49.origin.x = v14;
    v49.origin.y = v16;
    v49.size.width = v18;
    v49.size.height = v20;
    CGContextDrawImage(a2, v49, v21);

  }
  CGContextRestoreGState(a2);
  if (*(_BYTE *)(a1 + 184))
  {
    CGContextSaveGState(a2);
    v22 = *(void **)(a1 + 56);
    if (v22)
      CGContextClipToMask(a2, *(CGRect *)(a1 + 136), (CGImageRef)objc_msgSend(objc_retainAutorelease(v22), "CGImage"));
    CGContextDrawImage(a2, *(CGRect *)(a1 + 136), (CGImageRef)objc_msgSend(objc_retainAutorelease(*(id *)(a1 + 64)), "CGImage"));
    CGContextRestoreGState(a2);
  }
  if (*(_BYTE *)(a1 + 185))
  {
    v23 = objc_claimAutoreleasedReturnValue(+[UIColor colorWithWhite:alpha:](UIColor, "colorWithWhite:alpha:", 1.0, 0.84));

    v24 = (void *)objc_claimAutoreleasedReturnValue(+[UIColor colorWithWhite:alpha:](UIColor, "colorWithWhite:alpha:", 0.2, 0.5));
    v25 = (id)v23;
  }
  else
  {
    v24 = 0;
    v25 = v46;
  }
  v47 = v25;
  if (v25)
  {
    CGContextSaveGState(a2);
    v26 = *(void **)(a1 + 56);
    if (v26)
      CGContextClipToMask(a2, *(CGRect *)(a1 + 136), (CGImageRef)objc_msgSend(objc_retainAutorelease(v26), "CGImage"));
    v27 = objc_retainAutorelease(v47);
    CGContextSetFillColorWithColor(a2, (CGColorRef)objc_msgSend(v27, "CGColor"));
    CGContextFillRect(a2, *(CGRect *)(a1 + 136));
    if (*(_BYTE *)(a1 + 186) && *(_BYTE *)(a1 + 187))
    {
      v28 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue(objc_msgSend(v27, "colorWithAlphaComponent:", 0.85)));
      CGContextSetFillColorWithColor(a2, (CGColorRef)objc_msgSend(v28, "CGColor"));

      CGContextFillRect(a2, *(CGRect *)(a1 + 136));
    }
    CGContextRestoreGState(a2);
  }
  if (*(_QWORD *)(a1 + 72))
  {
    CGContextSaveGState(a2);
    CGContextSetInterpolationQuality(a2, kCGInterpolationHigh);
    if (*(_BYTE *)(a1 + 185))
    {
      objc_msgSend(v24, "setFill");
      CGContextClipToMask(a2, *(CGRect *)(a1 + 88), (CGImageRef)objc_msgSend(objc_retainAutorelease(*(id *)(a1 + 72)), "CGImage"));
      CGContextFillRect(a2, *(CGRect *)(a1 + 88));
    }
    else
    {
      CGContextDrawImage(a2, *(CGRect *)(a1 + 88), (CGImageRef)objc_msgSend(objc_retainAutorelease(*(id *)(a1 + 72)), "CGImage"));
    }
    goto LABEL_31;
  }
  if (!CGRectIsEmpty(*(CGRect *)(a1 + 88)))
  {
    CGContextSaveGState(a2);
    CGContextTranslateCTM(a2, 0.0, *(CGFloat *)(a1 + 128));
    CGContextScaleCTM(a2, 1.0, -1.0);
    if (*(_BYTE *)(a1 + 185))
    {
      v29 = objc_msgSend(*(id *)(a1 + 40), "mutableCopy");
      objc_msgSend(v29, "addAttribute:value:range:", NSForegroundColorAttributeName, v24, 0, objc_msgSend(*(id *)(a1 + 40), "length"));
      v30 = objc_msgSend(v29, "copy");

      v7 = v30;
    }
    objc_msgSend(v7, "boundingRectWithSize:options:context:", 35, 0, *(double *)(a1 + 104), *(double *)(a1 + 112));
    v51 = CGRectIntegral(v50);
    x = v51.origin.x;
    y = v51.origin.y;
    v33 = v51.size.width;
    v34 = v51.size.height;
    v35 = CGRectGetHeight(v51);
    if (v35 >= CGRectGetHeight(*(CGRect *)(a1 + 88)))
    {
      v54.origin.x = x;
      v54.origin.y = y;
      v54.size.width = v33;
      v54.size.height = v34;
      v40 = CGRectGetHeight(v54);
      if (v40 <= CGRectGetHeight(*(CGRect *)(a1 + 88)))
      {
LABEL_30:
        v57.origin.x = v4;
        v57.origin.y = v5;
        v57.size.width = v6;
        v57.size.height = v34;
        v58 = CGRectIntegral(v57);
        objc_msgSend(v7, "drawWithRect:options:context:", 35, 0, v58.origin.x, v58.origin.y, v58.size.width, v58.size.height);
LABEL_31:
        CGContextRestoreGState(a2);
        goto LABEL_32;
      }
      v55.origin.x = *(CGFloat *)(a1 + 88);
      v36 = *(double *)(a1 + 96);
      v55.size.width = *(CGFloat *)(a1 + 104);
      v55.size.height = *(CGFloat *)(a1 + 112);
      v55.origin.y = v36;
      v41 = CGRectGetHeight(v55);
      v56.origin.x = x;
      v56.origin.y = y;
      v56.size.width = v33;
      v56.size.height = v34;
      v38 = v41 - CGRectGetHeight(v56);
      v39 = -0.5;
    }
    else
    {
      v52.origin.x = *(CGFloat *)(a1 + 88);
      v36 = *(double *)(a1 + 96);
      v52.size.width = *(CGFloat *)(a1 + 104);
      v52.size.height = *(CGFloat *)(a1 + 112);
      v52.origin.y = v36;
      v37 = CGRectGetHeight(v52);
      v53.origin.x = x;
      v53.origin.y = y;
      v53.size.width = v33;
      v53.size.height = v34;
      v38 = v37 - CGRectGetHeight(v53);
      v39 = 0.5;
    }
    v5 = v36 + v38 * v39;
    goto LABEL_30;
  }
LABEL_32:
  Image = CGBitmapContextCreateImage(a2);
  v43 = objc_msgSend(objc_alloc((Class)UIImage), "initWithCGImage:scale:orientation:", Image, *(_QWORD *)(a1 + 176), *(double *)(a1 + 168));
  v44 = *(_QWORD *)(*(_QWORD *)(a1 + 80) + 8);
  v45 = *(void **)(v44 + 40);
  *(_QWORD *)(v44 + 40) = v43;

  CGImageRelease(Image);
}

void sub_10002CD9C(uint64_t a1, CGContextRef c)
{
  UIImage *ImageFromCurrentImageContext;
  void *v5;
  double v6;
  double v7;
  uint64_t v8;
  double v9;
  id v10;
  void *v11;
  double v12;
  id v13;
  uint64_t v14;
  void *v15;
  double v16;
  double v17;
  double v18;
  id v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  _QWORD v24[4];
  id v25;
  id v26;
  _QWORD v27[4];
  id v28;
  uint64_t v29;
  double v30;
  _QWORD v31[4];
  id v32;
  uint64_t v33;
  __int128 v34;
  _OWORD components[2];

  components[0] = xmmword_1000D0A90;
  components[1] = unk_1000D0AA0;
  CGContextSetStrokeColorSpace(c, *(CGColorSpaceRef *)(a1 + 56));
  CGContextSetStrokeColor(c, (const CGFloat *)components);
  CGContextSetLineWidth(c, 1.0 / *(double *)(a1 + 64));
  CGContextAddPath(c, (CGPathRef)objc_msgSend(objc_retainAutorelease(*(id *)(a1 + 32)), "CGPath"));
  CGContextReplacePathWithStrokedPath(c);
  CGContextClip(c);
  objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), "drawAtPoint:", CGPointZero.x, CGPointZero.y);
  ImageFromCurrentImageContext = UIGraphicsGetImageFromCurrentImageContext();
  v5 = (void *)objc_claimAutoreleasedReturnValue(ImageFromCurrentImageContext);
  v6 = *(double *)(a1 + 64);
  v7 = *(double *)(a1 + 72);
  v31[0] = _NSConcreteStackBlock;
  v31[1] = 3221225472;
  v31[2] = sub_10002D010;
  v31[3] = &unk_1000DA298;
  v8 = *(_QWORD *)(a1 + 56);
  v32 = v5;
  v33 = v8;
  v34 = *(_OWORD *)(a1 + 72);
  v9 = *(double *)(a1 + 80);
  v10 = v5;
  v11 = (void *)objc_claimAutoreleasedReturnValue(+[FRMacros imageFromNewGraphicsContextWithSize:opaque:scale:contextBlock:](FRMacros, "imageFromNewGraphicsContextWithSize:opaque:scale:contextBlock:", 0, v31, v7, v9, v6));
  v12 = *(double *)(a1 + 64);
  v27[0] = _NSConcreteStackBlock;
  v27[1] = 3221225472;
  v27[2] = sub_10002D0C4;
  v27[3] = &unk_1000DA338;
  v30 = v12;
  v13 = *(id *)(a1 + 32);
  v14 = *(_QWORD *)(a1 + 40);
  v28 = v13;
  v29 = v14;
  v15 = (void *)objc_claimAutoreleasedReturnValue(+[FRMacros imageFromNewGraphicsContextWithSize:opaque:scale:contextBlock:](FRMacros, "imageFromNewGraphicsContextWithSize:opaque:scale:contextBlock:", 0, v27, *(double *)(a1 + 72), *(double *)(a1 + 80), v12));
  v24[0] = _NSConcreteStackBlock;
  v24[1] = 3221225472;
  v24[2] = sub_10002D130;
  v24[3] = &unk_1000D97A8;
  v25 = v15;
  v26 = v11;
  v16 = *(double *)(a1 + 64);
  v17 = *(double *)(a1 + 72);
  v18 = *(double *)(a1 + 80);
  v19 = v11;
  v20 = v15;
  v21 = objc_claimAutoreleasedReturnValue(+[FRMacros imageFromNewGraphicsContextWithSize:opaque:scale:contextBlock:](FRMacros, "imageFromNewGraphicsContextWithSize:opaque:scale:contextBlock:", 0, v24, v17, v18, v16));
  v22 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
  v23 = *(void **)(v22 + 40);
  *(_QWORD *)(v22 + 40) = v21;

}

void sub_10002D010(uint64_t a1)
{
  CGContext *CurrentContext;
  _OWORD v3[2];
  CGRect v4;

  CurrentContext = UIGraphicsGetCurrentContext();
  objc_msgSend(*(id *)(a1 + 32), "drawAtPoint:", CGPointZero.x, CGPointZero.y);
  CGContextSetBlendMode(CurrentContext, kCGBlendModeSourceAtop);
  v3[0] = xmmword_1000D0AB0;
  v3[1] = unk_1000D0AC0;
  CGContextSetFillColorSpace(CurrentContext, *(CGColorSpaceRef *)(a1 + 40));
  CGContextSetFillColor(CurrentContext, (const CGFloat *)v3);
  v4.size.width = *(CGFloat *)(a1 + 48);
  v4.size.height = *(CGFloat *)(a1 + 56);
  v4.origin.x = 0.0;
  v4.origin.y = 0.0;
  CGContextFillRect(CurrentContext, v4);
}

id sub_10002D0C4(uint64_t a1)
{
  CGContext *CurrentContext;

  CurrentContext = UIGraphicsGetCurrentContext();
  CGContextSetLineWidth(CurrentContext, 1.0 / *(double *)(a1 + 48));
  CGContextAddPath(CurrentContext, (CGPathRef)objc_msgSend(objc_retainAutorelease(*(id *)(a1 + 32)), "CGPath"));
  CGContextClip(CurrentContext);
  return objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), "drawAtPoint:", CGPointZero.x, CGPointZero.y);
}

id sub_10002D130(uint64_t a1)
{
  double y;

  y = CGPointZero.y;
  objc_msgSend(*(id *)(a1 + 32), "drawAtPoint:", CGPointZero.x, y);
  return _objc_msgSend(*(id *)(a1 + 40), "drawAtPoint:blendMode:alpha:", 0, CGPointZero.x, y, 1.0);
}

void sub_10002D3E8(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  *(_QWORD *)(a1 + 14) = a2;
  *(_WORD *)(a1 + 22) = 1024;
}

void sub_10002D3F8(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  *(_QWORD *)(a1 + 4) = a2;
  *(_WORD *)(a1 + 12) = 2080;
}

void sub_10002DA24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10002DA3C(uint64_t a1, void *a2)
{
  objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40), a2);
}

void sub_10002DB00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10002DB18(uint64_t a1, int a2, id obj)
{
  objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40), obj);
}

void sub_10002DBE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10002DBF8(uint64_t a1, int a2, int a3, id obj)
{
  objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40), obj);
}

void sub_10002DCC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10002DCD8(uint64_t a1, void *a2)
{
  objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40), a2);
}

void sub_10002DD9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10002DDB4(uint64_t a1, int a2, id obj)
{
  objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40), obj);
}

void sub_10002DE7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10002DE94(uint64_t a1, int a2, int a3, id obj)
{
  objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40), obj);
}

void sub_10002DFD4(id a1)
{
  id v1;
  void *v2;

  v1 = objc_msgSend(objc_alloc((Class)NSCalendar), "initWithCalendarIdentifier:", NSCalendarIdentifierGregorian);
  v2 = (void *)qword_10010A4A8;
  qword_10010A4A8 = (uint64_t)v1;

}

void sub_10002E04C(id a1)
{
  NSDateFormatter *v1;
  void *v2;

  v1 = objc_opt_new(NSDateFormatter);
  v2 = (void *)qword_10010A4B8;
  qword_10010A4B8 = (uint64_t)v1;

  objc_msgSend((id)qword_10010A4B8, "setDateFormat:", CFSTR("EEEE"));
}

void sub_10002E0CC(id a1)
{
  NSDateFormatter *v1;
  void *v2;

  v1 = objc_opt_new(NSDateFormatter);
  v2 = (void *)qword_10010A4C8;
  qword_10010A4C8 = (uint64_t)v1;

  objc_msgSend((id)qword_10010A4C8, "setTimeStyle:", 1);
  _objc_msgSend((id)qword_10010A4C8, "setDateStyle:", 0);
}

void sub_10002E154(id a1)
{
  NSDateFormatter *v1;
  void *v2;

  v1 = objc_opt_new(NSDateFormatter);
  v2 = (void *)qword_10010A4D8;
  qword_10010A4D8 = (uint64_t)v1;

  objc_msgSend((id)qword_10010A4D8, "setTimeStyle:", 0);
  _objc_msgSend((id)qword_10010A4D8, "setDateStyle:", 1);
}

BOOL sub_10002E368(id a1, CAFilter *a2)
{
  void *v2;
  unsigned __int8 v3;

  v2 = (void *)objc_claimAutoreleasedReturnValue(-[CAFilter name](a2, "name"));
  v3 = objc_msgSend(v2, "isEqualToString:", CFSTR("kFRAXUndoInvertColorsFilter"));

  return v3;
}

void sub_10002EA68(id a1)
{
  uint64_t v1;
  void *v2;
  id v3;

  v3 = (id)objc_claimAutoreleasedReturnValue(+[NSBundle mainBundle](NSBundle, "mainBundle"));
  v1 = objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "objectForInfoDictionaryKey:", CFSTR("CFBundleDisplayName")));
  v2 = (void *)qword_10010A4F0;
  qword_10010A4F0 = v1;

}

void sub_10002F49C(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  void *v6;
  id v7;
  id v8;
  id v9;
  uint64_t v10;
  void *i;
  void *v12;
  void *v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  _BYTE v18[128];

  v3 = a2;
  if (v3)
  {
    v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "feldsparContext"));
    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "cloudContext"));
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "subscriptionController"));

    v16 = 0u;
    v17 = 0u;
    v14 = 0u;
    v15 = 0u;
    v7 = v3;
    v8 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v14, v18, 16);
    if (v8)
    {
      v9 = v8;
      v10 = *(_QWORD *)v15;
      do
      {
        for (i = 0; i != v9; i = (char *)i + 1)
        {
          if (*(_QWORD *)v15 != v10)
            objc_enumerationMutation(v7);
          v12 = *(void **)(*((_QWORD *)&v14 + 1) + 8 * (_QWORD)i);
          v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "asChannel", (_QWORD)v14));
          if (objc_msgSend(v13, "supportsNotifications")
            && objc_msgSend(v6, "hasSubscriptionToTag:", v12))
          {
            objc_msgSend(v6, "setNotificationsEnabled:forTag:error:", 1, v12, 0);
          }

        }
        v9 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v14, v18, 16);
      }
      while (v9);
    }

  }
}

void sub_10002F73C(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  uint64_t v11;
  _QWORD v12[4];
  id v13;
  id v14;

  v3 = a2;
  +[NSThread isMainThread](NSThread, "isMainThread");
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableSet set](NSMutableSet, "set"));
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "notificationsConfig"));

  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "preSubscribedNotificationsChannelIDs"));
  if (objc_msgSend(v6, "count"))
    objc_msgSend(v4, "addObjectsFromArray:", v6);
  if (objc_msgSend(v4, "count"))
  {
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "feldsparContext"));
    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "cloudContext"));
    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "tagController"));
    v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "allObjects"));
    v12[0] = _NSConcreteStackBlock;
    v12[1] = 3221225472;
    v12[2] = sub_10002F8C8;
    v12[3] = &unk_1000DA4D8;
    v14 = *(id *)(a1 + 40);
    v13 = v6;
    objc_msgSend(v9, "fetchTagsForTagIDs:qualityOfService:callbackQueue:completionHandler:", v10, 25, &_dispatch_main_q, v12);

  }
  else
  {
    v11 = *(_QWORD *)(a1 + 40);
    if (v11)
      (*(void (**)(uint64_t, _QWORD, _QWORD))(v11 + 16))(v11, 0, 0);
  }

}

void sub_10002F8C8(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  NSObject *v7;
  uint64_t v8;
  void (*v9)(void);
  void *v10;
  uint64_t v11;
  uint64_t v12;

  v5 = a2;
  v6 = a3;
  +[NSThread isMainThread](NSThread, "isMainThread");
  if (v6)
  {
    v7 = FCDefaultLog;
    if (os_log_type_enabled(FCDefaultLog, OS_LOG_TYPE_ERROR))
      sub_10007AB98((uint64_t)v6, v7);
    v8 = *(_QWORD *)(a1 + 40);
    if (v8)
    {
      v9 = *(void (**)(void))(v8 + 16);
LABEL_6:
      v9();
    }
  }
  else
  {
    if (!objc_msgSend(v5, "count"))
    {
      v12 = *(_QWORD *)(a1 + 40);
      if (!v12)
        goto LABEL_11;
      v9 = *(void (**)(void))(v12 + 16);
      goto LABEL_6;
    }
    v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "nf_objectsForKeysWithoutMarker:", *(_QWORD *)(a1 + 32)));
    v11 = *(_QWORD *)(a1 + 40);
    if (v11)
      (*(void (**)(uint64_t, void *, _QWORD))(v11 + 16))(v11, v10, 0);

  }
LABEL_11:

}

void sub_10002FA80(uint64_t a1)
{
  void *v2;
  void *v3;
  _QWORD v4[5];
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t (*v8)(uint64_t, uint64_t);
  void (*v9)(uint64_t);
  id v10;

  v2 = (void *)objc_claimAutoreleasedReturnValue(+[SUUIClientContext defaultContext](SUUIClientContext, "defaultContext"));
  v5 = 0;
  v6 = &v5;
  v7 = 0x3032000000;
  v8 = sub_1000185B4;
  v9 = sub_1000184FC;
  v10 = objc_msgSend(objc_alloc((Class)SUUIExplicitRestrictionAlertController), "initWithClientContext:presentingViewController:", v2, *(_QWORD *)(a1 + 32));
  v3 = (void *)v6[5];
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  v4[2] = sub_10002FB78;
  v4[3] = &unk_1000DA528;
  v4[4] = &v5;
  objc_msgSend(v3, "presentExplicitRestrictionAlertIfNeededOfType:completionBlock:", 5, v4);
  _Block_object_dispose(&v5, 8);

}

void sub_10002FB60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10002FB78(uint64_t a1)
{
  uint64_t v1;
  void *v2;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  v2 = *(void **)(v1 + 40);
  *(_QWORD *)(v1 + 40) = 0;

}

id sub_10002FB8C(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "offlineModeMonitor");
}

SXAppStateMonitor *__cdecl sub_10002FB94(id a1, TFResolver *a2)
{
  return (SXAppStateMonitor *)-[TFResolver resolveProtocol:](a2, "resolveProtocol:", &OBJC_PROTOCOL___NUAppActivityMonitor);
}

id sub_10002FBA4(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "configurationManager");
}

FCBundleSubscriptionManager *__cdecl sub_10002FBAC(id a1, TFResolver *a2)
{
  TFResolver *v2;
  uint64_t v3;
  id v4;
  void *v5;
  void *v6;

  v2 = a2;
  v4 = -[TFResolver resolveClass:](v2, "resolveClass:", objc_opt_class(FCCloudContext, v3));
  v5 = (void *)objc_claimAutoreleasedReturnValue(v4);

  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "bundleSubscriptionManager"));
  return (FCBundleSubscriptionManager *)v6;
}

FRCachesClearableReadingHistory *__cdecl sub_10002FC0C(id a1, TFResolver *a2)
{
  return (FRCachesClearableReadingHistory *)(id)objc_opt_new(FRCachesClearableReadingHistory, a2);
}

void sub_10002FCC4(id a1)
{
  id v1;

  v1 = (id)objc_claimAutoreleasedReturnValue(+[NSUserDefaults standardUserDefaults](NSUserDefaults, "standardUserDefaults"));
  byte_10010A510 = objc_msgSend(v1, "BOOLForKey:", CFSTR("personalization_frozen"));

}

void sub_10002FD0C(id a1, BOOL a2, NSError *a3)
{
  _BOOL4 v3;
  NSError *v4;
  NSObject *v5;
  _BOOL4 v6;

  v3 = a2;
  v4 = a3;
  v5 = FCPersonalizationLog;
  v6 = os_log_type_enabled(FCPersonalizationLog, OS_LOG_TYPE_DEBUG);
  if (v3)
  {
    if (v6)
      sub_10007AC0C(v5);
  }
  else if (v6)
  {
    sub_10007AC4C(v5, v4);
  }

}

void sub_10002FD7C(uint64_t a1)
{
  id v2;
  void *v3;
  FRPersonalizationConfiguration *v4;
  FRPersonalizationAutoFavoritesCursor *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  FRPersonalizationAutoFavoritesCursor *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  id v18;

  v2 = objc_alloc((Class)FCKeyValueStore);
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "path"));
  v18 = objc_msgSend(v2, "initWithName:directory:version:options:classRegistry:", CFSTR("PersonalizationConfiguration"), v3, 6, 8, 0);

  v4 = -[FRPersonalizationConfiguration initWithKeyValueStore:]([FRPersonalizationConfiguration alloc], "initWithKeyValueStore:", v18);
  objc_msgSend(*(id *)(a1 + 40), "setConfigurationStore:", v4);

  v5 = [FRPersonalizationAutoFavoritesCursor alloc];
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "configurationStore"));
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "coreDuetLastQueryDate"));
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "configurationStore"));
  v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "portraitLastQueryDate"));
  v10 = -[FRPersonalizationAutoFavoritesCursor initWithCoreDuetLastQueryDate:portraitLastQueryDate:](v5, "initWithCoreDuetLastQueryDate:portraitLastQueryDate:", v7, v9);
  objc_msgSend(*(id *)(a1 + 40), "setAutoFavoritesCursor:", v10);

  v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "appConfigurationManager"));
  v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "possiblyUnfetchedAppConfiguration"));
  v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "personalizationTreatment"));
  objc_msgSend(*(id *)(a1 + 40), "setConfigurableValues:", v13);

  v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "configurationStore"));
  v15 = objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "autoFavorites"));
  v16 = *(_QWORD *)(a1 + 40);
  v17 = *(void **)(v16 + 32);
  *(_QWORD *)(v16 + 32) = v15;

  objc_msgSend(*(id *)(a1 + 40), "_saveReadableAllowlist");
}

void sub_10002FF14(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  id v6;
  _QWORD v7[4];
  id v8;
  id v9;

  v3 = a2;
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "cloudContext"));
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "subscriptionList"));
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_10002FFCC;
  v7[3] = &unk_1000DAF50;
  v8 = *(id *)(a1 + 32);
  v9 = v3;
  v6 = v3;
  objc_msgSend(v5, "syncWithCompletion:", v7);

}

void sub_10002FFCC(uint64_t a1)
{
  void *v2;
  _QWORD v3[4];
  id v4;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "subscriptionController"));
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_100030050;
  v3[3] = &unk_1000DAF28;
  v4 = *(id *)(a1 + 40);
  objc_msgSend(v2, "removeAllAutoFavoriteSubscriptions:", v3);

}

void sub_100030050(uint64_t a1)
{
  void *v2;
  NSObject *v3;
  uint8_t v4[16];

  v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSUserDefaults standardUserDefaults](NSUserDefaults, "standardUserDefaults"));
  objc_msgSend(v2, "setBool:forKey:", 0, FCPersonalizationClearSuggestions);

  (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
  v3 = FCPersonalizationLog;
  if (os_log_type_enabled(FCPersonalizationLog, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Did clear suggestions", v4, 2u);
  }
}

void sub_1000300F0(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  id v5;
  _QWORD v6[4];
  id v7;
  id v8;

  v3 = a2;
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "appConfigurationManager"));
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_100030198;
  v6[3] = &unk_1000DAFA0;
  v7 = *(id *)(a1 + 32);
  v8 = v3;
  v5 = v3;
  objc_msgSend(v4, "fetchAppConfigurationIfNeededWithCompletion:", v6);

}

void sub_100030198(uint64_t a1)
{
  void *v1;
  _QWORD v2[4];
  id v3;

  v2[0] = _NSConcreteStackBlock;
  v2[1] = 3221225472;
  v2[2] = sub_100030204;
  v2[3] = &unk_1000DAF28;
  v1 = *(void **)(a1 + 32);
  v3 = *(id *)(a1 + 40);
  objc_msgSend(v1, "fetchMappingResourcesWithCompletionHandler:", v2);

}

void sub_100030204(uint64_t a1)
{
  NSObject *v1;
  uint8_t v2[16];

  (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
  v1 = FCPersonalizationLog;
  if (os_log_type_enabled(FCPersonalizationLog, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v2 = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_DEFAULT, "Did fetch mapping resources", v2, 2u);
  }
}

void sub_100030274(uint64_t a1, void *a2)
{
  uint64_t v3;
  void (**v4)(_QWORD);
  uint64_t v5;
  id v6;
  uint64_t updated;
  void *v8;
  id v9;
  void *v10;
  uint64_t v11;
  NSObject *v12;
  uint8_t v13[8];
  _QWORD v14[4];
  id v15;

  v3 = *(_QWORD *)(a1 + 32);
  v4 = a2;
  objc_msgSend((id)objc_opt_class(v3, v5), "logPPMessage:", &stru_1000DAFE0);
  v6 = objc_alloc((Class)FCFileCoordinatedTodayPersonalizationUpdate);
  updated = FCURLForTodayPersonalizationUpdateStore();
  v8 = (void *)objc_claimAutoreleasedReturnValue(updated);
  v9 = objc_msgSend(v6, "initWithFileURL:", v8);

  v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "consumeUpdates"));
  v14[0] = _NSConcreteStackBlock;
  v14[1] = 3221225472;
  v14[2] = sub_1000303C8;
  v14[3] = &unk_1000DB030;
  v15 = *(id *)(a1 + 32);
  objc_msgSend(v10, "enumerateObjectsUsingBlock:", v14);
  objc_msgSend((id)objc_opt_class(*(_QWORD *)(a1 + 32), v11), "logPPMessage:", &stru_1000DB050);
  v4[2](v4);

  v12 = FCPersonalizationLog;
  if (os_log_type_enabled(FCPersonalizationLog, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v13 = 0;
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "Did process events from Today widget", v13, 2u);
  }

}

NSString *__cdecl sub_1000303BC(id a1)
{
  return (NSString *)CFSTR("Considering events from News Today Widget.");
}

void sub_1000303C8(uint64_t a1, void *a2)
{
  void *v3;
  _QWORD v4[4];
  id v5;

  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "events"));
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  v4[2] = sub_100030448;
  v4[3] = &unk_1000DB008;
  v5 = *(id *)(a1 + 32);
  objc_msgSend(v3, "enumerateObjectsUsingBlock:", v4);

}

void sub_100030448(uint64_t a1, void *a2)
{
  void *v3;
  id v4;
  void *v5;
  uint64_t v6;
  id v7;
  id v8;
  id v9;
  void *v10;
  id v11;

  v3 = *(void **)(a1 + 32);
  v4 = a2;
  v11 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "aggregateStore"));
  v5 = (void *)objc_claimAutoreleasedReturnValue(+[FCPersonalizationFeature featuresFromTodayPersonalizationEvent:](FCPersonalizationFeature, "featuresFromTodayPersonalizationEvent:", v4));
  v6 = FCPersonalizationActionFromTodayPersonalizationAction(objc_msgSend(v4, "action"));
  v7 = objc_msgSend(v4, "overallOrder");
  v8 = objc_msgSend(v4, "sectionOrder");
  v9 = objc_msgSend(v4, "groupType");

  v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "configurableValues"));
  objc_msgSend(v11, "updateFeatures:withAction:displayRank:groupRank:groupType:individually:configurableValues:", v5, v6, v7, v8, v9, 1, v10);

}

NSString *__cdecl sub_100030530(id a1)
{
  return (NSString *)CFSTR("Finished processing events from News Today Widget.");
}

void sub_10003053C(uint64_t a1)
{
  NSObject *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  uint64_t v10;
  void *v11;
  void *v12;
  void *v13;
  id v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  unsigned int v22;
  id v23;
  NSObject *v24;
  NSObject *v25;
  void *v26;
  uint64_t v27;
  id v28;
  _QWORD v29[5];
  id v30;
  uint8_t buf[4];
  void *v32;
  _QWORD v33[3];
  _QWORD v34[3];

  v2 = FCPersonalizationLog;
  if (os_log_type_enabled(FCPersonalizationLog, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Will save readable allowlist.", buf, 2u);
  }
  v33[0] = CFSTR("defaultTags");
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "configurationStore"));
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "whitelist"));
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "defaultTags"));
  v34[0] = v5;
  v33[1] = CFSTR("optionalTags");
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "configurationStore"));
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "whitelist"));
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "optionalTags"));
  v34[1] = v8;
  v33[2] = CFSTR("lastUpdated");
  v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](NSDate, "date"));
  objc_msgSend(v9, "timeIntervalSince1970");
  v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%f"), v10));
  v34[2] = v11;
  v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v34, v33, 3));

  v30 = 0;
  v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSJSONSerialization dataWithJSONObject:options:error:](NSJSONSerialization, "dataWithJSONObject:options:error:", v12, 1, &v30));
  v14 = v30;
  v15 = v14;
  if (v13)
  {
    v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "cloudContext"));
    v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v16, "privateDataDirectory"));
    v18 = (void *)objc_claimAutoreleasedReturnValue(+[NSURL fileURLWithPath:](NSURL, "fileURLWithPath:", v17));
    v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v18, "URLByAppendingPathComponent:", CFSTR("allowlist")));
    v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v19, "URLByAppendingPathExtension:", CFSTR("json")));

    if (v20)
    {
      v21 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v20, "path"));
      v28 = v15;
      v22 = objc_msgSend(v13, "writeToFile:options:error:", v21, 1, &v28);
      v23 = v28;

      v24 = FCPersonalizationLog;
      if (v22)
      {
        if (os_log_type_enabled(FCPersonalizationLog, OS_LOG_TYPE_DEFAULT))
        {
          v25 = v24;
          v26 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v20, "path"));
          *(_DWORD *)buf = 138412290;
          v32 = v26;
          _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEFAULT, "Successfully saved readable allowlist at %@.", buf, 0xCu);

        }
      }
      else if (os_log_type_enabled(FCPersonalizationLog, OS_LOG_TYPE_ERROR))
      {
        sub_10007ACE8((uint64_t)v23, v24, v27);
      }
      v15 = v23;
    }
    else
    {
      sub_100030908();
    }

  }
  else
  {
    v29[0] = _NSConcreteStackBlock;
    v29[1] = 3221225472;
    v29[2] = sub_1000308C0;
    v29[3] = &unk_1000D9758;
    v29[4] = v14;
    sub_1000308C0((uint64_t)v29);
  }

}

void sub_1000308C0(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;

  v2 = FCPersonalizationLog;
  if (os_log_type_enabled(FCPersonalizationLog, OS_LOG_TYPE_ERROR))
    sub_10007AD54(a1, v2, v3);
}

void sub_100030908()
{
  NSObject *v0;

  v0 = FCPersonalizationLog;
  if (os_log_type_enabled(FCPersonalizationLog, OS_LOG_TYPE_ERROR))
    sub_10007ADC4(v0);
}

id sub_100030A74(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "refreshAutoFavoritesInBackgroundDisregardingCache:", 1);
}

NSString *__cdecl sub_100030A80(id a1)
{
  return (NSString *)CFSTR("Attempting to fetch mapping resources");
}

id sub_100030A8C(uint64_t a1)
{
  void *v1;
  void *v2;
  void **v4;
  uint64_t v5;
  void (*v6)(uint64_t, void *);
  void *v7;
  id v8;

  v4 = _NSConcreteStackBlock;
  v5 = 3221225472;
  v6 = sub_100030B34;
  v7 = &unk_1000DB0C0;
  v8 = *(id *)(a1 + 32);
  v1 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary fc_dictionary:](NSDictionary, "fc_dictionary:", &v4));
  v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("App config specified resource IDs: %@"), v1, v4, v5, v6, v7));

  return v2;
}

void sub_100030B34(uint64_t a1, void *a2)
{
  void *v3;
  id v4;
  void *v5;
  void *v6;
  void *v7;
  id v8;

  v3 = *(void **)(a1 + 32);
  v4 = a2;
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "personalizationBundleIdMappingResourceId"));
  objc_msgSend(v4, "fc_safelySetObjectAllowingNil:forKeyAllowingNil:", v5, CFSTR("Bundle ID Mapping Resource ID"));

  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "personalizationUrlMappingResourceId"));
  objc_msgSend(v4, "fc_safelySetObjectAllowingNil:forKeyAllowingNil:", v6, CFSTR("URL Mapping Resource ID"));

  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "personalizationWhitelistResourceId"));
  objc_msgSend(v4, "fc_safelySetObjectAllowingNil:forKeyAllowingNil:", v7, CFSTR("Whitelist Resource ID"));

  v8 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "personalizationFavorabilityResourceId"));
  objc_msgSend(v4, "fc_safelySetObjectAllowingNil:forKeyAllowingNil:", v8, CFSTR("Favorability Resource ID"));

}

id sub_100030C10(id *a1)
{
  void *v2;
  void *v3;
  _QWORD v5[4];
  id v6;
  id v7;
  id v8;
  id v9;

  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_100030D00;
  v5[3] = &unk_1000DB110;
  v6 = a1[4];
  v7 = a1[5];
  v8 = a1[6];
  v9 = a1[7];
  v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary fc_dictionary:](NSDictionary, "fc_dictionary:", v5));
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("Querying for resource IDs: %@"), v2));

  return v3;
}

void sub_100030D00(_QWORD *a1, void *a2)
{
  uint64_t v3;
  id v4;

  v3 = a1[4];
  v4 = a2;
  objc_msgSend(v4, "fc_safelySetObjectAllowingNil:forKeyAllowingNil:", v3, CFSTR("Bundle ID Mapping Resource ID"));
  objc_msgSend(v4, "fc_safelySetObjectAllowingNil:forKeyAllowingNil:", a1[5], CFSTR("URL Mapping Resource ID"));
  objc_msgSend(v4, "fc_safelySetObjectAllowingNil:forKeyAllowingNil:", a1[6], CFSTR("Whitelist Resource ID"));
  objc_msgSend(v4, "fc_safelySetObjectAllowingNil:forKeyAllowingNil:", a1[7], CFSTR("Favorability Resource ID"));

}

NSString *sub_100030D80(uint64_t a1)
{
  return +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("Got back results from mapping resource fetch that was empty %@"), *(_QWORD *)(a1 + 32));
}

void sub_100030DB8(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  id v5;

  if (*(_QWORD *)(a1 + 32))
  {
    v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "configurationStore"));
    objc_msgSend(v2, "setURLMappingData:", *(_QWORD *)(a1 + 32));

  }
  if (*(_QWORD *)(a1 + 48))
  {
    v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "configurationStore"));
    objc_msgSend(v3, "setBundleIDMappingData:", *(_QWORD *)(a1 + 48));

  }
  if (*(_QWORD *)(a1 + 56))
  {
    v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "configurationStore"));
    objc_msgSend(v4, "setWhitelistData:", *(_QWORD *)(a1 + 56));

  }
  if (*(_QWORD *)(a1 + 64))
  {
    v5 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "configurationStore"));
    objc_msgSend(v5, "setFavorabilityScoresData:", *(_QWORD *)(a1 + 64));

  }
}

uint64_t sub_100030FD8(uint64_t a1)
{
  NSObject *v2;
  uint64_t result;
  uint8_t v4[16];

  v2 = FCProgressivePersonalizationLog;
  if (os_log_type_enabled(FCProgressivePersonalizationLog, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Finished preparing personalization data source for use", v4, 2u);
  }
  result = *(_QWORD *)(a1 + 32);
  if (result)
    return (*(uint64_t (**)(void))(result + 16))();
  return result;
}

void sub_100031050(uint64_t a1)
{
  NSObject *v2;

  v2 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "storeQueue"));
  dispatch_async(v2, *(dispatch_block_t *)(a1 + 40));

}

void sub_1000313AC(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 128));
  _Unwind_Resume(a1);
}

void sub_1000313D8(uint64_t a1)
{
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));
}

void sub_1000313E0(uint64_t a1)
{
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));
}

uint64_t sub_1000313E8(uint64_t a1)
{
  id WeakRetained;
  NSObject *v3;
  uint64_t result;
  uint8_t v5[8];
  _QWORD v6[4];
  id v7;

  if (*(_BYTE *)(a1 + 56))
  {
    WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
    v6[0] = _NSConcreteStackBlock;
    v6[1] = 3221225472;
    v6[2] = sub_1000314C4;
    v6[3] = &unk_1000DB228;
    v7 = *(id *)(a1 + 32);
    FCPerformIfNonNil(WeakRetained, v6);

  }
  v3 = FCTranslationLog;
  if (os_log_type_enabled(FCTranslationLog, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Finished preparing favorites", v5, 2u);
  }
  result = *(_QWORD *)(a1 + 40);
  if (result)
    return (*(uint64_t (**)(void))(result + 16))();
  return result;
}

void sub_1000314C4(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  uint64_t v5;
  id v6;

  v3 = a2;
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSUserDefaults standardUserDefaults](NSUserDefaults, "standardUserDefaults"));
  objc_msgSend(v4, "setObject:forKey:", *(_QWORD *)(a1 + 32), FCPrimaryLanguageKey);

  v5 = *(_QWORD *)(a1 + 32);
  v6 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "userInfo"));

  objc_msgSend(v6, "setCanonicalLanguage:", v5);
}

uint64_t sub_100031550(uint64_t a1)
{
  id WeakRetained;
  NSObject *v3;
  uint64_t result;
  uint8_t v5[8];
  _QWORD v6[4];
  id v7;

  if (*(_BYTE *)(a1 + 56))
  {
    WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
    v6[0] = _NSConcreteStackBlock;
    v6[1] = 3221225472;
    v6[2] = sub_10003162C;
    v6[3] = &unk_1000DB228;
    v7 = *(id *)(a1 + 32);
    FCPerformIfNonNil(WeakRetained, v6);

  }
  v3 = FCTranslationLog;
  if (os_log_type_enabled(FCTranslationLog, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Finished preparing favorites", v5, 2u);
  }
  result = *(_QWORD *)(a1 + 40);
  if (result)
    return (*(uint64_t (**)(void))(result + 16))();
  return result;
}

void sub_10003162C(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  uint64_t v5;
  id v6;

  v3 = a2;
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSUserDefaults standardUserDefaults](NSUserDefaults, "standardUserDefaults"));
  objc_msgSend(v4, "setObject:forKey:", *(_QWORD *)(a1 + 32), FCPrimaryLanguageKey);

  v5 = *(_QWORD *)(a1 + 32);
  v6 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "userInfo"));

  objc_msgSend(v6, "setCanonicalLanguage:", v5);
}

void sub_1000317D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  id *v15;

  objc_destroyWeak(v15);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

uint64_t sub_1000317F4(uint64_t a1)
{
  NSObject *v2;
  uint64_t result;
  uint8_t v4[16];

  v2 = FCTranslationLog;
  if (os_log_type_enabled(FCTranslationLog, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Not preparing favorites because the language didn't change", v4, 2u);
  }
  result = *(_QWORD *)(a1 + 32);
  if (result)
    return (*(uint64_t (**)(void))(result + 16))();
  return result;
}

void sub_10003186C(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id WeakRetained;
  id v8;
  uint64_t v9;
  _QWORD v10[4];
  id v11;
  id v12;
  id v13;
  id v14;

  v5 = a2;
  v6 = a3;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));

  if (WeakRetained)
  {
    v8 = objc_loadWeakRetained((id *)(a1 + 40));
    v10[0] = _NSConcreteStackBlock;
    v10[1] = 3221225472;
    v10[2] = sub_100031994;
    v10[3] = &unk_1000DB390;
    v11 = v6;
    v13 = *(id *)(a1 + 32);
    v12 = v5;
    objc_copyWeak(&v14, (id *)(a1 + 40));
    FCPerformIfNonNil(v8, v10);

    objc_destroyWeak(&v14);
  }
  else
  {
    v9 = *(_QWORD *)(a1 + 32);
    if (v9)
      (*(void (**)(void))(v9 + 16))();
  }

}

void sub_100031980(_Unwind_Exception *a1)
{
  id *v1;

  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_100031994(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  void *v5;
  void *v6;
  void *v7;
  NSObject *v8;
  id v9;
  void *v10;
  NSObject *v11;
  NSObject *v12;
  void *v13;
  void *v14;
  void *v15;
  NSObject *v16;
  id v17;
  id v18;
  _QWORD v19[4];
  id v20;
  id v21;
  id v22;
  __int128 *v23;
  id v24;
  _QWORD v25[4];
  NSObject *v26;
  __int128 *p_buf;
  _QWORD v28[4];
  id v29;
  _QWORD v30[4];
  id v31;
  _QWORD v32[5];
  __int128 buf;
  uint64_t v34;
  uint64_t (*v35)(uint64_t, uint64_t);
  void (*v36)(uint64_t);
  id v37;

  v3 = a2;
  if (*(_QWORD *)(a1 + 32))
  {
    v4 = *(_QWORD *)(a1 + 48);
    if (v4)
      (*(void (**)(void))(v4 + 16))();
  }
  else
  {
    v32[0] = _NSConcreteStackBlock;
    v32[1] = 3221225472;
    v32[2] = sub_100031D5C;
    v32[3] = &unk_1000DB0C0;
    v32[4] = v3;
    v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary fc_dictionary:](NSDictionary, "fc_dictionary:", v32));
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "allKeys"));
    v30[0] = _NSConcreteStackBlock;
    v30[1] = 3221225472;
    v30[2] = sub_100031ED8;
    v30[3] = &unk_1000DB2A0;
    v31 = *(id *)(a1 + 40);
    v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary fc_dictionaryWithKeys:allowingNil:valueBlock:](NSDictionary, "fc_dictionaryWithKeys:allowingNil:valueBlock:", v6, 1, v30));

    v8 = FCTranslationLog;
    if (os_log_type_enabled(FCTranslationLog, OS_LOG_TYPE_DEFAULT))
    {
      LODWORD(buf) = 138412290;
      *(_QWORD *)((char *)&buf + 4) = v7;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Found subscriptions to translate: %@", (uint8_t *)&buf, 0xCu);
    }
    v28[0] = _NSConcreteStackBlock;
    v28[1] = 3221225472;
    v28[2] = sub_100031FB0;
    v28[3] = &unk_1000DB2C8;
    v9 = v7;
    v29 = v9;
    v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray fc_array:](NSMutableArray, "fc_array:", v28));
    v11 = FCTranslationLog;
    if (os_log_type_enabled(FCTranslationLog, OS_LOG_TYPE_DEFAULT))
    {
      LODWORD(buf) = 138412290;
      *(_QWORD *)((char *)&buf + 4) = v10;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "Querying tags for translation %@", (uint8_t *)&buf, 0xCu);
    }
    *(_QWORD *)&buf = 0;
    *((_QWORD *)&buf + 1) = &buf;
    v34 = 0x3032000000;
    v35 = sub_1000185C4;
    v36 = sub_100018504;
    v37 = 0;
    v12 = dispatch_group_create();
    dispatch_group_enter(v12);
    v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "cloudContext"));
    v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "tagController"));
    v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "storeQueue"));
    v25[0] = _NSConcreteStackBlock;
    v25[1] = 3221225472;
    v25[2] = sub_100032084;
    v25[3] = &unk_1000DB2F0;
    p_buf = &buf;
    v16 = v12;
    v26 = v16;
    objc_msgSend(v14, "fetchTagsForTagIDs:qualityOfService:callbackQueue:completionHandler:", v10, 25, v15, v25);

    v19[0] = _NSConcreteStackBlock;
    v19[1] = 3221225472;
    v19[2] = sub_1000320D0;
    v19[3] = &unk_1000DB368;
    objc_copyWeak(&v24, (id *)(a1 + 56));
    v23 = &buf;
    v20 = v9;
    v21 = v5;
    v22 = *(id *)(a1 + 48);
    v17 = v9;
    v18 = v5;
    dispatch_group_notify(v16, (dispatch_queue_t)&_dispatch_main_q, v19);

    objc_destroyWeak(&v24);
    _Block_object_dispose(&buf, 8);

  }
}

void sub_100031D3C(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 176), 8);
  _Unwind_Resume(a1);
}

void sub_100031D5C(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  id v6;
  _QWORD v7[4];
  id v8;

  v3 = a2;
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "subscriptionController"));
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "subscriptionsWithType:", 0));
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_100031E08;
  v7[3] = &unk_1000DB278;
  v8 = v3;
  v6 = v3;
  objc_msgSend(v5, "enumerateObjectsUsingBlock:", v7);

}

void sub_100031E08(uint64_t a1, void *a2)
{
  void *v3;
  id v4;
  _QWORD v5[5];

  v4 = a2;
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "tagID"));
  if (v3)
  {
    objc_msgSend(*(id *)(a1 + 32), "setObject:forKeyedSubscript:", v4, v3);
  }
  else
  {
    v5[0] = _NSConcreteStackBlock;
    v5[1] = 3221225472;
    v5[2] = sub_100031E9C;
    v5[3] = &unk_1000D9758;
    v5[4] = v4;
    sub_100031E9C((uint64_t)v5);
  }

}

void sub_100031E9C(uint64_t a1)
{
  if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
    sub_10007B8D4(a1);
}

id sub_100031ED8(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  NSObject *v5;
  int v7;
  id v8;
  __int16 v9;
  void *v10;

  v3 = a2;
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "favoriteTranslationForTagID:", v3));
  v5 = FCTranslationLog;
  if (os_log_type_enabled(FCTranslationLog, OS_LOG_TYPE_DEFAULT))
  {
    v7 = 138412546;
    v8 = v3;
    v9 = 2112;
    v10 = v4;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Checking for translation for: %@, found %@", (uint8_t *)&v7, 0x16u);
  }

  return v4;
}

void sub_100031FB0(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  id v5;
  _QWORD v6[4];
  id v7;

  v3 = a2;
  v4 = *(void **)(a1 + 32);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_10003202C;
  v6[3] = &unk_1000D97D0;
  v7 = v3;
  v5 = v3;
  objc_msgSend(v4, "enumerateKeysAndObjectsUsingBlock:", v6);

}

void sub_10003202C(uint64_t a1, uint64_t a2, void *a3)
{
  void *v5;
  id v6;

  v5 = *(void **)(a1 + 32);
  v6 = a3;
  objc_msgSend(v5, "fc_safelyAddObject:", a2);
  objc_msgSend(*(id *)(a1 + 32), "fc_safelyAddObject:", v6);

}

void sub_100032084(uint64_t a1, void *a2)
{
  id v4;

  objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), a2);
  v4 = a2;
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));

}

void sub_1000320D0(uint64_t a1)
{
  NSObject *v2;
  id WeakRetained;
  id v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  _QWORD v8[4];
  id v9;
  _QWORD v10[4];
  id v11;
  id v12;
  uint64_t v13;
  uint8_t buf[16];

  v2 = FCTranslationLog;
  if (os_log_type_enabled(FCTranslationLog, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Processing subscriptions for translation", buf, 2u);
  }
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 64));
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472;
  v10[2] = sub_100032210;
  v10[3] = &unk_1000DB340;
  v4 = *(id *)(a1 + 32);
  v5 = *(_QWORD *)(a1 + 56);
  v11 = v4;
  v13 = v5;
  v12 = *(id *)(a1 + 40);
  FCPerformIfNonNil(WeakRetained, v10);

  v6 = FCDispatchQueueForQualityOfService(25);
  v7 = objc_claimAutoreleasedReturnValue(v6);
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_1000325A0;
  v8[3] = &unk_1000DAF28;
  v9 = *(id *)(a1 + 48);
  dispatch_async(v7, v8);

}

void sub_100032210(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  id v5;
  NSObject *v6;
  __int128 v7;
  uint8_t buf[8];
  _QWORD v9[5];
  __int128 v10;

  v3 = a2;
  v4 = *(void **)(a1 + 32);
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472;
  v9[2] = sub_1000322EC;
  v9[3] = &unk_1000DB318;
  v9[4] = v3;
  v7 = *(_OWORD *)(a1 + 40);
  v5 = (id)v7;
  v10 = v7;
  objc_msgSend(v4, "enumerateKeysAndObjectsUsingBlock:", v9);
  v6 = FCTranslationLog;
  if (os_log_type_enabled(FCTranslationLog, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Finished translating subscriptions", buf, 2u);
  }

}

void sub_1000322EC(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  uint64_t v8;
  void *v9;
  NSObject *v10;
  void *v11;
  void *v12;
  NSObject *v13;
  int v14;
  id v15;
  int v16;
  id v17;
  uint8_t buf[4];
  id v19;
  __int16 v20;
  id v21;
  __int16 v22;
  id v23;

  v5 = a2;
  v6 = a3;
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40), "objectForKeyedSubscript:", v5));
  v8 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40), "objectForKeyedSubscript:", v6));
  v9 = (void *)v8;
  if (v7)
  {
    if (v8)
    {
      v10 = FCTranslationLog;
      if (os_log_type_enabled(FCTranslationLog, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 138412546;
        v19 = v7;
        v20 = 2112;
        v21 = v9;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "Attempting to translate %@ to %@", buf, 0x16u);
      }
      v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "subscriptionController"));
      v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "objectForKeyedSubscript:", v5));
      v17 = 0;
      objc_msgSend(v11, "addSubscriptionToTag:notificationsEnabled:error:", v9, objc_msgSend(v12, "notificationsEnabled"), &v17);
      v13 = v17;

      if (v13)
      {
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
          sub_10007BAFC();
        goto LABEL_18;
      }
      v15 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "subscriptionController"));
      objc_msgSend(v15, "removeSubscriptionToTag:", v7);
LABEL_12:

      goto LABEL_18;
    }
    goto LABEL_14;
  }
  if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
  {
    sub_10007BA44();
    if (v9)
      goto LABEL_10;
  }
  else if (v9)
  {
LABEL_10:
    v14 = 0;
    goto LABEL_17;
  }
LABEL_14:
  if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
    sub_10007B98C();
  v14 = 1;
LABEL_17:
  v13 = FCTranslationLog;
  if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
  {
    v16 = v7 ? 0 : v14;
    if (v16 == 1)
      v15 = (id)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@ and %@"), v5, v6));
    else
      v15 = v7 ? v6 : v5;
    *(_DWORD *)buf = 138412802;
    v19 = v5;
    v20 = 2112;
    v21 = v6;
    v22 = 2112;
    v23 = v15;
    _os_log_error_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_ERROR, "Failed to translate %@ to %@, %@ didn't return a tag", buf, 0x20u);
    if (v16)
      goto LABEL_12;
  }
LABEL_18:

}

uint64_t sub_1000325A0(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 32);
  if (result)
    return (*(uint64_t (**)(void))(result + 16))();
  return result;
}

void sub_100032848(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_list va;

  va_start(va, a17);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_100032860(uint64_t a1)
{
  void *v2;
  NSObject *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  uint64_t result;
  int v10;
  void *v11;
  __int16 v12;
  void *v13;

  v2 = (void *)FCTranslationLog;
  if (os_log_type_enabled(FCTranslationLog, OS_LOG_TYPE_DEFAULT))
  {
    v3 = v2;
    v4 = (void *)objc_claimAutoreleasedReturnValue(+[FCAppleAccount sharedAccount](FCAppleAccount, "sharedAccount"));
    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "primaryLanguageCode"));
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "cloudContext"));
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "userInfo"));
    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "canonicalLanguage"));
    v10 = 138412546;
    v11 = v5;
    v12 = 2112;
    v13 = v8;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Not processing auto favorites, primary language %@ doesn't match canonical language %@", (uint8_t *)&v10, 0x16u);

  }
  result = *(_QWORD *)(a1 + 40);
  if (result)
    return (*(uint64_t (**)(void))(result + 16))();
  return result;
}

void sub_1000329A0(uint64_t a1)
{
  void *v2;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "autofavorites"));
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = v2 != 0;

}

void sub_1000329DC(uint64_t a1)
{
  NSObject *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  NSObject *v7;
  uint64_t v8;
  _QWORD v9[5];
  id v10;
  uint8_t buf[16];

  if (*(_BYTE *)(a1 + 48)
    || (v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "configurationStore")),
        v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "autoFavorites")),
        v6,
        v5,
        !v6))
  {
    v2 = FCProgressivePersonalizationLog;
    if (os_log_type_enabled(FCProgressivePersonalizationLog, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Auto-favorites have never been generated", buf, 2u);
    }
    v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "autoFavoritesQueue"));
    v9[0] = _NSConcreteStackBlock;
    v9[1] = 3221225472;
    v9[2] = sub_100032B38;
    v9[3] = &unk_1000DB458;
    v4 = *(void **)(a1 + 40);
    v9[4] = *(_QWORD *)(a1 + 32);
    v10 = v4;
    objc_msgSend(v3, "enqueueBlock:", v9);

  }
  else
  {
    v7 = FCProgressivePersonalizationLog;
    if (os_log_type_enabled(FCProgressivePersonalizationLog, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Auto-favorites have been generated in the past so nothing to prepare", buf, 2u);
    }
    v8 = *(_QWORD *)(a1 + 40);
    if (v8)
      (*(void (**)(void))(v8 + 16))();
  }
}

void sub_100032B38(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  id v5;
  void *v6;
  NSObject *v7;
  void *v8;
  void *v9;
  _QWORD v10[5];
  id v11;
  id v12;
  uint8_t buf[4];
  void *v14;

  v3 = a2;
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "_createNewAutoFavoritesOperation"));
  objc_msgSend(v4, "setQualityOfService:", 25);
  objc_msgSend(v4, "setRelativePriority:", 1);
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472;
  v10[2] = sub_100032CBC;
  v10[3] = &unk_1000DB430;
  v10[4] = *(_QWORD *)(a1 + 32);
  v5 = v3;
  v11 = v5;
  v12 = *(id *)(a1 + 40);
  objc_msgSend(v4, "setAutoFavoritesCompletionHandler:", v10);
  v6 = (void *)FCProgressivePersonalizationLog;
  if (os_log_type_enabled(FCProgressivePersonalizationLog, OS_LOG_TYPE_DEFAULT))
  {
    v7 = v6;
    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "operationID"));
    *(_DWORD *)buf = 138412290;
    v14 = v8;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Preparing personalization auto-favorites for use with operation %@", buf, 0xCu);

  }
  v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSOperationQueue fc_sharedConcurrentQueue](NSOperationQueue, "fc_sharedConcurrentQueue"));
  objc_msgSend(v9, "addOperation:", v4);

}

void sub_100032CBC(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7;
  id v8;
  id v9;
  NSObject *v10;
  void *v11;
  _QWORD v12[4];
  id v13;
  id v14;
  uint8_t buf[16];

  v7 = a2;
  v8 = a3;
  v9 = a4;
  v10 = FCProgressivePersonalizationLog;
  if (os_log_type_enabled(FCProgressivePersonalizationLog, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "Finished preparing personalization auto-favorites for use", buf, 2u);
  }
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472;
  v12[2] = sub_100032DCC;
  v12[3] = &unk_1000DB408;
  v11 = *(void **)(a1 + 32);
  v13 = *(id *)(a1 + 40);
  v14 = *(id *)(a1 + 48);
  objc_msgSend(v11, "_processAutoFavoritesOperationResult:cursor:error:completion:", v7, v8, v9, v12);

}

uint64_t sub_100032DCC(uint64_t a1)
{
  uint64_t result;

  (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
  result = *(_QWORD *)(a1 + 40);
  if (result)
    return (*(uint64_t (**)(void))(result + 16))();
  return result;
}

void sub_100032E0C()
{
  NSObject *v0;
  uint8_t v1[16];

  v0 = FCAutoFavoritesLog;
  if (os_log_type_enabled(FCAutoFavoritesLog, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v1 = 0;
    _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_DEFAULT, "Not running autofavorites operation because news personalization based autofavorites are enabled", v1, 2u);
  }
}

void sub_100032E70(uint64_t a1)
{
  void *v2;
  NSObject *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  int v9;
  void *v10;
  __int16 v11;
  void *v12;

  v2 = (void *)FCTranslationLog;
  if (os_log_type_enabled(FCTranslationLog, OS_LOG_TYPE_DEFAULT))
  {
    v3 = v2;
    v4 = (void *)objc_claimAutoreleasedReturnValue(+[FCAppleAccount sharedAccount](FCAppleAccount, "sharedAccount"));
    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "primaryLanguageCode"));
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "cloudContext"));
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "userInfo"));
    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "canonicalLanguage"));
    v9 = 138412546;
    v10 = v5;
    v11 = 2112;
    v12 = v8;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Not processing auto favorites, primary language %@ doesn't match canonical language %@", (uint8_t *)&v9, 0x16u);

  }
}

NSString *__cdecl sub_100032F98(id a1)
{
  return (NSString *)CFSTR("Getting in line to refresh personalization auto-favorites");
}

void sub_100032FA4(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7;
  id v8;
  id v9;
  void *v10;
  id v11;
  uint64_t v12;
  id v13;
  id v14;
  id v15;
  _QWORD v16[4];
  id v17;
  uint64_t v18;
  id v19;
  id v20;
  id v21;

  v7 = a2;
  v8 = a3;
  v9 = a4;
  v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "autoFavoritesQueue"));
  v16[0] = _NSConcreteStackBlock;
  v16[1] = 3221225472;
  v16[2] = sub_1000330A0;
  v16[3] = &unk_1000DB508;
  v11 = *(id *)(a1 + 40);
  v12 = *(_QWORD *)(a1 + 32);
  v17 = v11;
  v18 = v12;
  v19 = v7;
  v20 = v8;
  v21 = v9;
  v13 = v9;
  v14 = v8;
  v15 = v7;
  objc_msgSend(v10, "enqueueBlock:", v16);

}

void sub_1000330A0(uint64_t a1, void *a2)
{
  void *v3;
  void *v4;
  void *v5;
  uint64_t v6;
  void *v7;
  void (**v8)(void);

  v4 = *(void **)(a1 + 32);
  v3 = *(void **)(a1 + 40);
  v8 = a2;
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "autoFavoritesCursor"));

  v7 = (void *)objc_opt_class(*(_QWORD *)(a1 + 40), v6);
  if (v4 == v5)
  {
    objc_msgSend(v7, "logPPMessage:", &stru_1000DB4E0);
    objc_msgSend(*(id *)(a1 + 40), "_processAutoFavoritesOperationResult:cursor:error:completion:", *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), v8);
  }
  else
  {
    objc_msgSend(v7, "logPPMessage:", &stru_1000DB4C0);
    v8[2]();
  }

}

NSString *__cdecl sub_100033138(id a1)
{
  return (NSString *)CFSTR("Cursor changed while refreshing personalization auto-favorites");
}

NSString *__cdecl sub_100033144(id a1)
{
  return (NSString *)CFSTR("Finished refreshing personalization auto-favorites");
}

id sub_100033150(uint64_t a1)
{
  void *v1;
  void *v2;

  v1 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "operationID"));
  v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("Refreshing personalization auto-favorites with operation %@"), v1));

  return v2;
}

void sub_100033318(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  id v5;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "coreDuetLastQueryDate"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "configurationStore"));
  objc_msgSend(v3, "setCoreDuetLastQueryDate:", v2);

  v5 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "portraitLastQueryDate"));
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "configurationStore"));
  objc_msgSend(v4, "setPortraitLastQueryDate:", v5);

}

uint64_t sub_1000333A4(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  unsigned __int8 v5;
  uint64_t v6;
  void *v7;
  void *v8;
  void *v10;
  unsigned __int8 v11;
  void *v12;
  unsigned __int8 v13;
  void *v14;
  unsigned __int8 v15;
  void *v16;
  unsigned __int8 v17;
  void *v18;
  unsigned __int8 v19;

  v3 = a2;
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "locationAutoFavoriteCandidates"));
  v5 = objc_msgSend(v4, "containsObject:", v3);

  if ((v5 & 1) != 0)
  {
    v6 = 9;
    goto LABEL_8;
  }
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "internalSignalAutoFavoriteCandidates"));
  if (objc_msgSend(v7, "containsObject:", v3))
    goto LABEL_6;
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "existingInternalSignalAutoFavoriteCandidates"));
  if (objc_msgSend(v8, "containsObject:", v3))
  {

LABEL_6:
LABEL_7:
    v6 = 3;
    goto LABEL_8;
  }
  v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "groupableCandidates"));
  v11 = objc_msgSend(v10, "containsObject:", v3);

  if ((v11 & 1) != 0)
    goto LABEL_7;
  v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "portraitAutoFavoriteCandidates"));
  v13 = objc_msgSend(v12, "containsObject:", v3);

  if ((v13 & 1) != 0)
  {
    v6 = 8;
  }
  else
  {
    v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "appUsageAutoFavoriteCandidates"));
    v15 = objc_msgSend(v14, "containsObject:", v3);

    if ((v15 & 1) != 0)
    {
      v6 = 2;
    }
    else
    {
      v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "safariAutoFavoriteCandidates"));
      v17 = objc_msgSend(v16, "containsObject:", v3);

      if ((v17 & 1) != 0)
      {
        v6 = 1;
      }
      else
      {
        v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "defaultCandidates"));
        v19 = objc_msgSend(v18, "containsObject:", v3);

        if ((v19 & 1) != 0)
        {
          v6 = 7;
        }
        else
        {
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
            sub_10007BBB4();
          v6 = 6;
        }
      }
    }
  }
LABEL_8:

  return v6;
}

void sub_100033690(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1000336A8(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  void *v6;
  void *v7;
  void *v8;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "whitelist"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "defaultTags"));
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "objectForKeyedSubscript:", *(_QWORD *)(a1 + 40)));

  if (v4)
  {
    v5 = 0;
  }
  else
  {
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "whitelist"));
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "optionalTags"));
    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "objectForKeyedSubscript:", *(_QWORD *)(a1 + 40)));

    if (!v8)
      return;
    v5 = 1;
  }
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24) = v5;
}

void sub_10003382C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100033844(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  void *v6;
  void *v7;
  void *v8;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "whitelist"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "defaultTags"));
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "objectForKeyedSubscript:", *(_QWORD *)(a1 + 40)));

  if (v4)
  {
    v5 = 0;
  }
  else
  {
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "whitelist"));
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "optionalTags"));
    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "objectForKeyedSubscript:", *(_QWORD *)(a1 + 40)));

    if (!v8)
      return;
    v5 = 1;
  }
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24) = v5;
}

void sub_1000339E4(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD v6[4];
  id v7;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "subscriptionController"));
  v3 = *(_QWORD *)(a1 + 40);
  v4 = *(_QWORD *)(a1 + 48);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_100033A88;
  v6[3] = &unk_1000DB5F8;
  v5 = *(_QWORD *)(a1 + 56);
  v7 = *(id *)(a1 + 64);
  objc_msgSend(v2, "addAutoFavoriteSubscriptionForTagIDs:groupableSubscriptionForTagIDs:originProvider:completion:", v3, v4, v5, v6);

}

uint64_t sub_100033A88(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 32);
  if (result)
    return (*(uint64_t (**)(void))(result + 16))();
  return result;
}

id sub_100033B40(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "setConfigurableValues:", *(_QWORD *)(a1 + 40));
}

void sub_100033BB4(uint64_t a1, void *a2)
{
  void *v3;
  void (**v4)(_QWORD);
  NSObject *v5;
  _QWORD v6[5];
  _QWORD block[5];

  v3 = *(void **)(a1 + 32);
  v4 = a2;
  v5 = objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "storeQueue"));
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_100033C88;
  block[3] = &unk_1000D9758;
  block[4] = *(_QWORD *)(a1 + 32);
  dispatch_sync(v5, block);

  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_100033CFC;
  v6[3] = &unk_1000D9758;
  v6[4] = *(_QWORD *)(a1 + 32);
  dispatch_async((dispatch_queue_t)&_dispatch_main_q, v6);
  v4[2](v4);

}

void sub_100033C88(uint64_t a1)
{
  void *v2;
  id v3;

  objc_msgSend(*(id *)(a1 + 32), "setAutofavorites:", 0);
  objc_msgSend(*(id *)(a1 + 32), "setAutoFavoritesCursor:", 0);
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "configurationStore"));
  objc_msgSend(v2, "setCoreDuetLastQueryDate:", 0);

  v3 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "configurationStore"));
  objc_msgSend(v3, "setPortraitLastQueryDate:", 0);

}

id sub_100033CFC(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "prepareAutoFavoritesWithLanguageChange:completionHandler:", 1, 0);
}

BOOL UIBackgroundFetchResultFromFCFetchResult(_BOOL8 result)
{
  if (result != 2)
    return result == 1;
  return result;
}

BOOL FCFetchResultFromUIBackgroundFetchResult(_BOOL8 result)
{
  if (result != 2)
    return result == 1;
  return result;
}

void sub_100034854(uint64_t a1, void *a2)
{
  void *v3;
  id v4;
  void *v5;
  void *v6;
  id v7;

  v3 = *(void **)(a1 + 32);
  v4 = a2;
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "safariAutoFavoriteCandidates"));
  objc_msgSend(v4, "fc_safelyUnionSet:", v5);

  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "appUsageAutoFavoriteCandidates"));
  objc_msgSend(v4, "minusSet:", v6);

  v7 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "autoFavoriteTagIDs"));
  objc_msgSend(v4, "fc_safelyIntersectSet:", v7);

}

void sub_100034950(uint64_t a1, void *a2)
{
  void *v3;
  id v4;
  void *v5;
  void *v6;
  void *v7;
  id v8;

  v3 = *(void **)(a1 + 32);
  v4 = a2;
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "portraitAutoFavoriteCandidates"));
  objc_msgSend(v4, "fc_safelyUnionSet:", v5);

  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "appUsageAutoFavoriteCandidates"));
  objc_msgSend(v4, "minusSet:", v6);

  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "safariAutoFavoriteCandidates"));
  objc_msgSend(v4, "minusSet:", v7);

  v8 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "autoFavoriteTagIDs"));
  objc_msgSend(v4, "fc_safelyIntersectSet:", v8);

}

void sub_100034A6C(uint64_t a1, void *a2)
{
  void *v3;
  id v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  id v9;

  v3 = *(void **)(a1 + 32);
  v4 = a2;
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "portraitAutoFavoriteCandidates"));
  objc_msgSend(v4, "fc_safelyUnionSet:", v5);

  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "appUsageAutoFavoriteCandidates"));
  objc_msgSend(v4, "minusSet:", v6);

  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "safariAutoFavoriteCandidates"));
  objc_msgSend(v4, "minusSet:", v7);

  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "portraitAutoFavoriteCandidates"));
  objc_msgSend(v4, "minusSet:", v8);

  v9 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "autoFavoriteTagIDs"));
  objc_msgSend(v4, "fc_safelyIntersectSet:", v9);

}

void sub_100034BA8(uint64_t a1, void *a2)
{
  NSSet *v3;
  NSSet *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  id v14;

  v14 = a2;
  v3 = (NSSet *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "internalSignalAutoFavoriteCandidates"));
  v4 = v3;
  if (!v3)
    v4 = objc_opt_new(NSSet);
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "existingInternalSignalAutoFavoriteCandidates"));
  v6 = (void *)objc_claimAutoreleasedReturnValue(-[NSSet fc_setByUnioningSet:](v4, "fc_setByUnioningSet:", v5));
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "defaultCandidates"));
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "fc_setByUnioningSet:", v7));
  objc_msgSend(v14, "fc_safelyUnionSet:", v8);

  if (!v3)
  v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "appUsageAutoFavoriteCandidates"));
  objc_msgSend(v14, "minusSet:", v9);

  v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "safariAutoFavoriteCandidates"));
  objc_msgSend(v14, "minusSet:", v10);

  v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "portraitAutoFavoriteCandidates"));
  objc_msgSend(v14, "minusSet:", v11);

  v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "locationAutoFavoriteCandidates"));
  objc_msgSend(v14, "minusSet:", v12);

  v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "autoFavoriteTagIDs"));
  objc_msgSend(v14, "fc_safelyIntersectSet:", v13);

}

void sub_100035358(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 112));
  _Unwind_Resume(a1);
}

void sub_100035378(uint64_t a1, uint64_t a2)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "setIsPresentingAlert:", 0);
  objc_msgSend(WeakRetained, "updateAlertDidDismiss:", a2);

}

uint64_t sub_1000353C0(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

uint64_t sub_1000353D0(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void sub_1000362F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10003630C(uint64_t a1, void *a2, uint64_t a3, _BYTE *a4)
{
  void *v6;
  void *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  id v12;

  v12 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "componentsSeparatedByString:", CFSTR("=")));
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "firstObject"));
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "stringByRemovingPercentEncoding"));

  if (objc_msgSend(v7, "isEqualToString:", *(_QWORD *)(a1 + 32)))
  {
    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "lastObject"));
    v9 = objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "stringByRemovingPercentEncoding"));
    v10 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
    v11 = *(void **)(v10 + 40);
    *(_QWORD *)(v10 + 40) = v9;

    *a4 = 1;
  }

}

void sub_100038D60(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  _QWORD v18[5];
  id v19;
  _QWORD v20[4];
  id v21;
  id location;

  v2 = (void *)objc_claimAutoreleasedReturnValue(+[UIApplication sharedApplication](UIApplication, "sharedApplication"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "keyWindow"));
  v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "rootViewController"));

  v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSBundle mainBundle](NSBundle, "mainBundle"));
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "localizedStringForKey:value:table:", CFSTR("“%@” wants to open “%@”"), &stru_1000DF290, 0));

  v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSBundle mainBundle](NSBundle, "mainBundle"));
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "localizedStringForKey:value:table:", CFSTR("News"), &stru_1000DF290, 0));
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "localizedName"));
  v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", v5, v7, v8));

  v10 = (void *)objc_claimAutoreleasedReturnValue(+[UIAlertController alertControllerWithTitle:message:preferredStyle:](UIAlertController, "alertControllerWithTitle:message:preferredStyle:", v9, 0, 1));
  objc_initWeak(&location, v10);
  v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSBundle mainBundle](NSBundle, "mainBundle"));
  v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "localizedStringForKey:value:table:", CFSTR("Cancel"), &stru_1000DF290, 0));
  v20[0] = _NSConcreteStackBlock;
  v20[1] = 3221225472;
  v20[2] = sub_10003908C;
  v20[3] = &unk_1000DB6C0;
  objc_copyWeak(&v21, &location);
  v13 = (void *)objc_claimAutoreleasedReturnValue(+[UIAlertAction actionWithTitle:style:handler:](UIAlertAction, "actionWithTitle:style:handler:", v12, 0, v20));

  v14 = (void *)objc_claimAutoreleasedReturnValue(+[NSBundle mainBundle](NSBundle, "mainBundle"));
  v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "localizedStringForKey:value:table:", CFSTR("Open"), &stru_1000DF290, 0));
  v18[0] = _NSConcreteStackBlock;
  v18[1] = 3221225472;
  v18[2] = sub_1000390D8;
  v18[3] = &unk_1000DB6E8;
  objc_copyWeak(&v19, &location);
  v18[4] = *(_QWORD *)(a1 + 40);
  v16 = (void *)objc_claimAutoreleasedReturnValue(+[UIAlertAction actionWithTitle:style:handler:](UIAlertAction, "actionWithTitle:style:handler:", v15, 0, v18));

  objc_msgSend(v10, "addAction:", v16);
  objc_msgSend(v10, "addAction:", v13);
  objc_msgSend(v10, "setPreferredAction:", v13);
  objc_msgSend(v17, "presentViewController:animated:completion:", v10, 1, 0);

  objc_destroyWeak(&v19);
  objc_destroyWeak(&v21);
  objc_destroyWeak(&location);

}

void sub_100039050(_Unwind_Exception *a1)
{
  id *v1;
  id *v2;
  uint64_t v3;

  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v3 - 104));
  _Unwind_Resume(a1);
}

void sub_10003908C(uint64_t a1)
{
  void *v1;
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v1 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "presentingViewController"));
  objc_msgSend(v1, "dismissViewControllerAnimated:completion:", 1, 0);

}

void sub_1000390D8(uint64_t a1)
{
  void *v2;
  void *v3;
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "presentingViewController"));
  objc_msgSend(v2, "dismissViewControllerAnimated:completion:", 1, 0);

  v3 = (void *)objc_claimAutoreleasedReturnValue(+[UIApplication sharedApplication](UIApplication, "sharedApplication"));
  objc_msgSend(v3, "openURL:options:completionHandler:", *(_QWORD *)(a1 + 32), &__NSDictionary0__struct, 0);

}

id sub_1000398A4(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "_determineUserID");
}

id sub_1000398AC(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "_refreshAppConfig");
}

id sub_1000398B4(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "_refreshOnboardingVersion");
}

id sub_1000398BC(uint64_t a1, uint64_t a2)
{
  objc_msgSend(*(id *)(a1 + 32), "setOnboardingVersion:", a2);
  return _objc_msgSend(*(id *)(a1 + 32), "_presubscribe");
}

uint64_t sub_1000398E8(uint64_t a1)
{
  objc_msgSend(*(id *)(a1 + 32), "finishedPerformingOperationWithError:", 0);
  return 0;
}

id sub_100039908(uint64_t a1, uint64_t a2)
{
  return objc_msgSend(*(id *)(a1 + 32), "finishedPerformingOperationWithError:", a2);
}

void sub_100039A04(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  NSObject *v6;
  void *v7;
  void *v8;
  id v9;
  _QWORD v10[4];
  id v11;
  uint8_t buf[4];
  void *v13;

  v3 = a2;
  v4 = (void *)FCOperationLog;
  if (os_log_type_enabled(FCOperationLog, OS_LOG_TYPE_DEFAULT))
  {
    v5 = *(void **)(a1 + 32);
    v6 = v4;
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "shortOperationDescription"));
    *(_DWORD *)buf = 138543362;
    v13 = v7;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "%{public}@ determining user ID", buf, 0xCu);

  }
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "analyticsController"));
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472;
  v10[2] = sub_100039B3C;
  v10[3] = &unk_1000DAF28;
  v11 = v3;
  v9 = v3;
  objc_msgSend(v8, "notifyWhenUserIDHasBeenDeterminedWithBlock:", v10);

}

uint64_t sub_100039B3C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void sub_100039BB4(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  void *v8;
  NSObject *v9;
  void *v10;
  void *v11;
  void *v12;
  id v13;
  id v14;
  _QWORD v15[4];
  id v16;
  id v17;
  uint8_t buf[4];
  void *v19;

  v5 = a2;
  v6 = a3;
  v7 = (void *)FCOperationLog;
  if (os_log_type_enabled(FCOperationLog, OS_LOG_TYPE_DEFAULT))
  {
    v8 = *(void **)(a1 + 32);
    v9 = v7;
    v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "shortOperationDescription"));
    *(_DWORD *)buf = 138543362;
    v19 = v10;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "%{public}@ refreshing app config", buf, 0xCu);

  }
  v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "cloudContext"));
  v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "appConfigurationManager"));
  v15[0] = _NSConcreteStackBlock;
  v15[1] = 3221225472;
  v15[2] = sub_100039D2C;
  v15[3] = &unk_1000DB7D8;
  v16 = v5;
  v17 = v6;
  v13 = v6;
  v14 = v5;
  objc_msgSend(v12, "refreshAppConfigurationIfNeededWithCompletionQueue:refreshCompletion:", &_dispatch_main_q, v15);

}

uint64_t sub_100039D2C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a3)
    return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
  else
    return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void sub_100039DB8(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  void *v8;
  NSObject *v9;
  void *v10;
  void *v11;
  void *v12;
  id v13;
  id v14;
  _QWORD v15[4];
  id v16;
  id v17;
  uint8_t buf[4];
  void *v19;

  v5 = a2;
  v6 = a3;
  v7 = (void *)FCOperationLog;
  if (os_log_type_enabled(FCOperationLog, OS_LOG_TYPE_DEFAULT))
  {
    v8 = *(void **)(a1 + 32);
    v9 = v7;
    v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "shortOperationDescription"));
    *(_DWORD *)buf = 138543362;
    v19 = v10;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "%{public}@ refreshing the onboarding version", buf, 0xCu);

  }
  v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "cloudContext"));
  v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "userInfo"));
  v15[0] = _NSConcreteStackBlock;
  v15[1] = 3221225472;
  v15[2] = sub_100039F28;
  v15[3] = &unk_1000DB800;
  v16 = v5;
  v17 = v6;
  v13 = v6;
  v14 = v5;
  objc_msgSend(v12, "refreshOnboardingVersion:", v15);

}

uint64_t sub_100039F28(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a3)
    return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
  else
    return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

id sub_10003A03C(uint64_t a1)
{
  void *v2;
  void *v3;
  NSObject *v4;
  void *v5;
  int v7;
  void *v8;

  v2 = (void *)FCOperationLog;
  if (os_log_type_enabled(FCOperationLog, OS_LOG_TYPE_DEFAULT))
  {
    v3 = *(void **)(a1 + 32);
    v4 = v2;
    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "shortOperationDescription"));
    v7 = 138543362;
    v8 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "%{public}@ skipping presubscribe because user isn't new", (uint8_t *)&v7, 0xCu);

  }
  return (id)objc_claimAutoreleasedReturnValue(+[NFPromise asVoid](NFPromise, "asVoid"));
}

void sub_10003A110(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  NSObject *v6;
  void *v7;
  void *v8;
  id v9;
  _QWORD v10[4];
  id v11;
  uint8_t buf[4];
  void *v13;

  v3 = a2;
  v4 = (void *)FCOperationLog;
  if (os_log_type_enabled(FCOperationLog, OS_LOG_TYPE_DEFAULT))
  {
    v5 = *(void **)(a1 + 32);
    v6 = v4;
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "shortOperationDescription"));
    *(_DWORD *)buf = 138543362;
    v13 = v7;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "%{public}@ presubscribing to channels", buf, 0xCu);

  }
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "presubscribeService"));
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472;
  v10[2] = sub_10003A248;
  v10[3] = &unk_1000DB828;
  v11 = v3;
  v9 = v3;
  objc_msgSend(v8, "presubscribeToChannelsIfNeededWithCompletion:", v10);

}

uint64_t sub_10003A248(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

id tagsSortedByMostFrequentlyVisited(void *a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id v7;
  void ***v8;
  void *v9;
  void **v11;
  uint64_t v12;
  uint64_t (*v13)(uint64_t, void *, void *);
  void *v14;
  id v15;
  id v16;

  v11 = _NSConcreteStackBlock;
  v12 = 3221225472;
  v13 = sub_10003AAE8;
  v14 = &unk_1000D9A08;
  v15 = a2;
  v16 = a3;
  v5 = v16;
  v6 = v15;
  v7 = a1;
  v8 = objc_retainBlock(&v11);
  v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "sortedArrayUsingComparator:", v8, v11, v12, v13, v14));

  return v9;
}

uint64_t sub_10003AAE8(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  uint64_t v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  uint64_t (**v22)(_QWORD, _QWORD, _QWORD);

  v5 = a2;
  v6 = a3;
  v7 = *(void **)(a1 + 32);
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "identifier"));
  if ((objc_msgSend(v7, "containsObject:", v8) & 1) != 0)
  {
    v9 = *(void **)(a1 + 32);
    v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "identifier"));
    LODWORD(v9) = objc_msgSend(v9, "containsObject:", v10);

    if ((_DWORD)v9)
    {
      v11 = *(void **)(a1 + 32);
      v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "identifier"));
      v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", objc_msgSend(v11, "indexOfObject:", v12)));
      v14 = *(void **)(a1 + 32);
      v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "identifier"));
      v16 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", objc_msgSend(v14, "indexOfObject:", v15)));
      v17 = (uint64_t)objc_msgSend(v13, "compare:", v16);

      if (!v17)
        goto LABEL_10;
      goto LABEL_11;
    }
  }
  else
  {

  }
  v18 = *(void **)(a1 + 32);
  v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "identifier"));
  LOBYTE(v18) = objc_msgSend(v18, "containsObject:", v19);

  if ((v18 & 1) != 0)
  {
    v17 = 1;
  }
  else
  {
    v20 = *(void **)(a1 + 32);
    v21 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "identifier"));
    LOBYTE(v20) = objc_msgSend(v20, "containsObject:", v21);

    if ((v20 & 1) == 0)
    {
LABEL_10:
      v22 = (uint64_t (**)(_QWORD, _QWORD, _QWORD))objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "comparatorForSubscriptions"));
      v17 = ((uint64_t (**)(_QWORD, id, id))v22)[2](v22, v5, v6);

      goto LABEL_11;
    }
    v17 = -1;
  }
LABEL_11:

  return v17;
}

void sub_10003AF24(uint64_t a1, void *a2)
{
  uint64_t v2;
  id v3;

  v2 = *(_QWORD *)(a1 + 32);
  if (v2)
  {
    v3 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "content"));
    (*(void (**)(uint64_t, id))(v2 + 16))(v2, v3);

  }
}

void sub_10003B08C(uint64_t a1, void *a2)
{
  uint64_t v2;
  id v3;

  v2 = *(_QWORD *)(a1 + 32);
  if (v2)
  {
    v3 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "flintDataProvider"));
    (*(void (**)(uint64_t, id))(v2 + 16))(v2, v3);

  }
}

void sub_10003B328(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  NSObject *v6;
  id *v7;
  id *v8;
  _QWORD *v9;
  NSObject *v10;
  void *v11;
  uint64_t v12;
  void *v13;
  void *v14;
  NSObject *v15;
  _QWORD v16[4];
  id v17;
  id v18;
  _QWORD v19[4];
  id v20;
  id v21;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "pool"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "articleID"));
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "objectForKey:", v3));

  if (v4)
  {
    v5 = *(void **)(a1 + 64);
    if (v5)
    {
      v6 = *(NSObject **)(a1 + 48);
      v19[0] = _NSConcreteStackBlock;
      v19[1] = 3221225472;
      v19[2] = sub_10003B4B8;
      v19[3] = &unk_1000D9D18;
      v7 = &v21;
      v21 = v5;
      v8 = &v20;
      v20 = v4;
      v9 = v19;
      v10 = v6;
LABEL_6:
      dispatch_async(v10, v9);

    }
  }
  else
  {
    v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "pool"));
    v12 = *(_QWORD *)(a1 + 56);
    v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "articleID"));
    objc_msgSend(v11, "setObject:forKey:", v12, v13);

    objc_msgSend(*(id *)(a1 + 32), "_flushIfNeeded");
    v14 = *(void **)(a1 + 64);
    if (v14)
    {
      v15 = *(NSObject **)(a1 + 48);
      v16[0] = _NSConcreteStackBlock;
      v16[1] = 3221225472;
      v16[2] = sub_10003B4C8;
      v16[3] = &unk_1000D9D18;
      v7 = &v18;
      v18 = v14;
      v8 = &v17;
      v17 = *(id *)(a1 + 56);
      v9 = v16;
      v10 = v15;
      goto LABEL_6;
    }
  }

}

uint64_t sub_10003B4B8(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 32));
}

uint64_t sub_10003B4C8(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 32));
}

id sub_10003B804(uint64_t a1, void *a2, void *a3)
{
  void *v5;
  id v6;
  id v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  id v12;

  v5 = *(void **)(a1 + 32);
  v6 = a3;
  v7 = a2;
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "accessDates"));
  v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "objectForKey:", v7));

  v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "accessDates"));
  v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "objectForKey:", v6));

  v12 = objc_msgSend(v9, "compare:", v11);
  return v12;
}

uint64_t sub_10003BA3C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

id FRDiagnosticFileManagerCreate(void *a1)
{
  id v1;
  void *v2;
  void *v3;
  void *v4;
  id v5;

  v1 = a1;
  v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSFileManager defaultManager](NSFileManager, "defaultManager"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "containerURLForSecurityApplicationGroupIdentifier:", CFSTR("group.com.apple.news")));
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "URLByAppendingPathComponent:isDirectory:", CFSTR("Library/Caches/Diagnostics"), 1));

  v5 = objc_msgSend(objc_alloc((Class)TFDiagnosticFileManager), "initWithDiagnosticDumpDir:diagnosticDumpNotificationName:log:", v4, CFSTR("NewsDiagnosticExtensionAttachmentRequestNotification"), v1);
  return v5;
}

id sub_10003BB28(uint64_t a1, uint64_t a2)
{
  return objc_msgSend(*(id *)(a1 + 32), "hasPrefix:", a2);
}

id sub_10003BB34(uint64_t a1, uint64_t a2)
{
  return objc_msgSend(*(id *)(a1 + 32), "hasPrefix:", a2);
}

id sub_10003BB40(uint64_t a1, void *a2)
{
  return objc_msgSend(a2, "hasPrefix:", *(_QWORD *)(a1 + 32));
}

uint64_t sub_10003C1E0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;

  +[NSThread isMainThread](NSThread, "isMainThread");
  objc_msgSend(*(id *)(a1 + 32), "setBackgroundFetchInProgress:", 0);
  result = *(_QWORD *)(a1 + 40);
  if (result)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(result + 16))(result, a2, a3);
  return result;
}

void sub_10003C4DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,char a38)
{
  uint64_t v38;

  _Block_object_dispose(&a32, 8);
  _Block_object_dispose(&a38, 8);
  _Block_object_dispose((const void *)(v38 - 216), 8);
  _Block_object_dispose((const void *)(v38 - 184), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_10003C518(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v6;
  uint64_t result;

  if (a2 != 2)
  {
    v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSUserDefaults standardUserDefaults](NSUserDefaults, "standardUserDefaults"));
    objc_msgSend(v6, "setObject:forKey:", *(_QWORD *)(a1 + 32), CFSTR("lastBackgroundFetchDate"));

  }
  result = *(_QWORD *)(a1 + 40);
  if (result)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(result + 16))(result, a2, a3);
  return result;
}

void sub_10003C598(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  id v5;
  uint64_t v6;
  id v7;
  uint64_t v8;
  NSObject *v9;
  __int128 v10;
  _QWORD v11[4];
  id v12;
  uint64_t v13;
  id v14;
  __int128 v15;
  __int128 v16;

  v3 = a2;
  if (v3)
  {
    dispatch_group_enter(*(dispatch_group_t *)(a1 + 32));
    v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "privateDataUpdateCoordinator"));
    v11[0] = _NSConcreteStackBlock;
    v11[1] = 3221225472;
    v11[2] = sub_10003C6A4;
    v11[3] = &unk_1000DB968;
    v5 = *(id *)(a1 + 32);
    v6 = *(_QWORD *)(a1 + 40);
    v12 = v5;
    v13 = v6;
    v14 = v3;
    v16 = *(_OWORD *)(a1 + 72);
    v10 = *(_OWORD *)(a1 + 48);
    v7 = (id)v10;
    v15 = v10;
    objc_msgSend(v4, "updatePrivateDataControllersWithCompletion:", v11);

    dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));
  }
  else
  {
    v8 = *(_QWORD *)(a1 + 64);
    v9 = *(NSObject **)(a1 + 32);
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 24) = 2;
    *(_QWORD *)(*(_QWORD *)(v8 + 8) + 24) = 2;
    dispatch_group_leave(v9);
  }

}

void sub_10003C6A4(uint64_t a1)
{
  void *v2;
  void *v3;
  id v4;
  uint64_t v5;
  id v6;
  uint64_t v7;
  _QWORD v8[4];
  id v9;
  id v10;
  uint64_t v11;
  id v12;
  uint64_t v13;
  __int128 v14;
  _QWORD v15[4];
  id v16;

  dispatch_group_enter(*(dispatch_group_t *)(a1 + 32));
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "todayAgent"));
  v15[0] = _NSConcreteStackBlock;
  v15[1] = 3221225472;
  v15[2] = sub_10003C7E8;
  v15[3] = &unk_1000D9758;
  v16 = *(id *)(a1 + 32);
  objc_msgSend(v2, "serviceWidgetIfNeededWithCompletion:", v15);

  dispatch_group_enter(*(dispatch_group_t *)(a1 + 32));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "subscriptionController"));
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_10003C7F0;
  v8[3] = &unk_1000DB940;
  v4 = *(id *)(a1 + 48);
  v5 = *(_QWORD *)(a1 + 64);
  v9 = v4;
  v13 = v5;
  v6 = *(id *)(a1 + 32);
  v7 = *(_QWORD *)(a1 + 40);
  v10 = v6;
  v11 = v7;
  v14 = *(_OWORD *)(a1 + 72);
  v12 = *(id *)(a1 + 56);
  objc_msgSend(v3, "fetchSubscribedTagsWithCallbackQueue:preferCache:completion:", &_dispatch_main_q, 0, v8);

  dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));
}

void sub_10003C7E8(uint64_t a1)
{
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));
}

void sub_10003C7F0(uint64_t a1)
{
  void *v2;
  unsigned __int8 v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  void *v7;
  NSObject *v8;
  void *v9;
  void *v10;
  void *v11;
  id v12;
  id v13;
  id v14;
  uint64_t v15;
  void *v16;
  void *v17;
  uint64_t v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  _QWORD v24[4];
  id v25;
  id v26;
  uint64_t v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  _QWORD v32[6];
  _QWORD v33[6];
  uint8_t v34[128];
  uint8_t buf[4];
  void *v36;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "prefetchConfig"));
  v3 = objc_msgSend(v2, "shouldPrefetchForYouFeed");

  if ((v3 & 1) != 0)
  {
    if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 72) + 8) + 24))
    {
      v32[0] = _NSConcreteStackBlock;
      v32[1] = 3221225472;
      v32[2] = sub_10003CB6C;
      v32[3] = &unk_1000DB3E0;
      v4 = *(_QWORD *)(a1 + 64);
      v32[4] = *(_QWORD *)(a1 + 40);
      v32[5] = v4;
      sub_10003CB6C((uint64_t)v32);
    }
    else
    {
      v6 = (void *)FRBackgroundFetchLog;
      if (os_log_type_enabled((os_log_t)FRBackgroundFetchLog, OS_LOG_TYPE_DEFAULT))
      {
        v7 = *(void **)(a1 + 48);
        v8 = v6;
        v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "fetchables"));
        v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", objc_msgSend(v9, "count")));
        *(_DWORD *)buf = 138412290;
        v36 = v10;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Prefetching operations in the background. Count: %@", buf, 0xCu);

      }
      v30 = 0u;
      v31 = 0u;
      v28 = 0u;
      v29 = 0u;
      v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "fetchables"));
      v12 = objc_msgSend(v11, "copy");

      v13 = objc_msgSend(v12, "countByEnumeratingWithState:objects:count:", &v28, v34, 16);
      if (v13)
      {
        v14 = v13;
        v15 = *(_QWORD *)v29;
        do
        {
          v16 = 0;
          do
          {
            if (*(_QWORD *)v29 != v15)
              objc_enumerationMutation(v12);
            v17 = *(void **)(*((_QWORD *)&v28 + 1) + 8 * (_QWORD)v16);
            dispatch_group_enter(*(dispatch_group_t *)(a1 + 40));
            v18 = *(_QWORD *)(a1 + 32);
            v24[0] = _NSConcreteStackBlock;
            v24[1] = 3221225472;
            v24[2] = sub_10003CBEC;
            v24[3] = &unk_1000DB918;
            v19 = *(id *)(a1 + 56);
            v20 = *(_QWORD *)(a1 + 64);
            v25 = v19;
            v27 = v20;
            v26 = *(id *)(a1 + 40);
            v21 = objc_claimAutoreleasedReturnValue(objc_msgSend(v17, "backgroundFetchWithAppConfiguration:completionHandler:", v18, v24));
            v22 = *(_QWORD *)(*(_QWORD *)(a1 + 80) + 8);
            v23 = *(void **)(v22 + 40);
            *(_QWORD *)(v22 + 40) = v21;

            v16 = (char *)v16 + 1;
          }
          while (v14 != v16);
          v14 = objc_msgSend(v12, "countByEnumeratingWithState:objects:count:", &v28, v34, 16);
        }
        while (v14);
      }

      dispatch_group_leave(*(dispatch_group_t *)(a1 + 40));
    }
  }
  else
  {
    v33[0] = _NSConcreteStackBlock;
    v33[1] = 3221225472;
    v33[2] = sub_10003CAEC;
    v33[3] = &unk_1000DB3E0;
    v5 = *(_QWORD *)(a1 + 64);
    v33[4] = *(_QWORD *)(a1 + 40);
    v33[5] = v5;
    sub_10003CAEC((uint64_t)v33);
  }
}

void sub_10003CAEC(uint64_t a1)
{
  NSObject *v2;
  uint8_t v3[16];

  v2 = FRBackgroundFetchLog;
  if (os_log_type_enabled((os_log_t)FRBackgroundFetchLog, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v3 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Skipping For You prefetch because it's disabled in the app config.", v3, 2u);
  }
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = 1;
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));
}

void sub_10003CB6C(uint64_t a1)
{
  NSObject *v2;
  uint8_t v3[16];

  v2 = FRBackgroundFetchLog;
  if (os_log_type_enabled((os_log_t)FRBackgroundFetchLog, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v3 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Skipping For You prefetch because background fetch timed out", v3, 2u);
  }
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = 1;
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));
}

void sub_10003CBEC(uint64_t a1, uint64_t a2)
{
  void *v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  int v8;
  uint64_t v9;

  v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](NSDate, "date"));
  objc_msgSend(v4, "timeIntervalSinceDate:", *(_QWORD *)(a1 + 32));
  v6 = v5;
  v7 = FRBackgroundFetchLog;
  if (os_log_type_enabled((os_log_t)FRBackgroundFetchLog, OS_LOG_TYPE_DEFAULT))
  {
    v8 = 134217984;
    v9 = v6;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Feed prefetch did complete in %f secs.", (uint8_t *)&v8, 0xCu);
  }
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24) = a2;
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 40));

}

uint64_t sub_10003CCD8(_QWORD *a1, uint64_t a2)
{
  void *v4;
  void *v5;
  void *v6;
  uint64_t Results;
  uint64_t v8;
  _BOOL8 ResultFromFCFetchResult;

  if ((_DWORD)a2)
  {
    *(_BYTE *)(*(_QWORD *)(a1[5] + 8) + 24) = 1;
    objc_msgSend(*(id *)(*(_QWORD *)(a1[6] + 8) + 40), "cancel");
  }
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", *(_QWORD *)(*(_QWORD *)(a1[7] + 8) + 24)));
  v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", *(_QWORD *)(*(_QWORD *)(a1[8] + 8) + 24)));
  v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSSet setWithObjects:](NSSet, "setWithObjects:", v4, v5, 0));
  Results = FCAggregateFetchResultWithFetchResults();

  v8 = a1[4];
  ResultFromFCFetchResult = UIBackgroundFetchResultFromFCFetchResult(Results);
  return (*(uint64_t (**)(uint64_t, _BOOL8, uint64_t))(v8 + 16))(v8, ResultFromFCFetchResult, a2);
}

void sub_10003CEB8(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_fault_impl(a1, a2, OS_LOG_TYPE_FAULT, a4, &a9, 0x26u);
}

void sub_10003D080(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10003D098(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7;
  id v8;
  void *v9;
  id v10;
  uint64_t v11;
  void *v12;
  _QWORD v13[5];

  v13[0] = _NSConcreteStackBlock;
  v13[1] = 3221225472;
  v13[2] = sub_10003D16C;
  v13[3] = &unk_1000DB9E0;
  v13[4] = *(_QWORD *)(a1 + 32);
  v7 = a3;
  v8 = a2;
  v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a4, "fc_dictionaryByTransformingValuesWithBlock:", v13));
  v10 = objc_msgSend(objc_alloc((Class)TSPrefetchedArticlesFetchResult), "initWithSelectedArticleID:articleIDs:prefetchedHeadlines:", v8, v7, v9);

  v11 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v12 = *(void **)(v11 + 40);
  *(_QWORD *)(v11 + 40) = v10;

}

id sub_10003D16C(uint64_t a1, void *a2)
{
  void *v2;
  id v3;
  void *v4;
  void *v5;
  void *v6;

  v2 = *(void **)(a1 + 32);
  v3 = a2;
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "feldsparContext"));
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "cloudContext"));
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "headlineWithContentContext:", v5));

  return v6;
}

void sub_10003D2EC(id a1)
{
  void *v1;
  void *v2;
  uint64_t v3;
  void *v4;
  id v5;

  v1 = (void *)objc_claimAutoreleasedReturnValue(+[NSBundle mainBundle](NSBundle, "mainBundle"));
  v5 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v1, "pathForResource:ofType:", CFSTR("FRTagCardImage"), CFSTR("plist")));

  v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithContentsOfFile:](NSDictionary, "dictionaryWithContentsOfFile:", v5));
  v3 = objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "objectForKeyedSubscript:", CFSTR("Colors")));
  v4 = (void *)qword_10010A518;
  qword_10010A518 = v3;

}

void sub_10003DFDC(id a1)
{
  id v1;
  void *v2;

  v1 = objc_alloc_init((Class)NSOperationQueue);
  v2 = (void *)qword_10010A538;
  qword_10010A538 = (uint64_t)v1;

  objc_msgSend((id)qword_10010A538, "setQualityOfService:", 17);
  objc_msgSend((id)qword_10010A538, "setMaxConcurrentOperationCount:", 2);
}

void sub_10003E6A8(uint64_t a1)
{
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));
}

void sub_10003E6B0(uint64_t a1)
{
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));
}

void sub_10003E6B8(uint64_t a1)
{
  void *v2;
  const __CFAllocator *Default;
  CFArrayRef v4;
  uint64_t v5;
  void *v6;
  const char *v7;
  NSObject *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  CFTypeRef cf;
  void *values;

  v2 = *(void **)(a1 + 40);
  cf = 0;
  values = v2;
  Default = CFAllocatorGetDefault();
  v4 = CFArrayCreate(Default, (const void **)&values, 1, &kCFTypeArrayCallBacks);
  v5 = CPBitmapWriteImagesToPath(v4, 1, &__NSDictionary0__struct, *(_QWORD *)(a1 + 32), 0, &cf);
  if (v4)
    CFRelease(v4);
  if (!v5)
  {
    v6 = (void *)FCDefaultLog;
    if (os_log_type_enabled(FCDefaultLog, OS_LOG_TYPE_ERROR))
      sub_10007D67C((__CFError **)&cf, v6);
  }
  if (cf)
    CFRelease(cf);
  v7 = (const char *)objc_msgSend(objc_retainAutorelease(*(id *)(a1 + 32)), "cStringUsingEncoding:", 4);
  if (setxattr(v7, "com.apple.news.logoAssetVersion", (const void *)(a1 + 48), 8uLL, 0, 0))
  {
    v8 = FCDefaultLog;
    if (os_log_type_enabled(FCDefaultLog, OS_LOG_TYPE_ERROR))
      sub_10007D648(v8, v9, v10, v11, v12, v13, v14, v15);
  }
  if (setxattr(v7, "com.apple.news.coverAssetVersion", (const void *)(a1 + 56), 8uLL, 0, 0))
  {
    v16 = FCDefaultLog;
    if (os_log_type_enabled(FCDefaultLog, OS_LOG_TYPE_ERROR))
      sub_10007D614(v16, v17, v18, v19, v20, v21, v22, v23);
  }
  CGImageRelease(*(CGImageRef *)(a1 + 40));
}

void sub_10003EA20(uint64_t a1)
{
  CGContext *CurrentContext;
  void *v3;
  double v4;
  double v5;
  void *v6;
  double v7;
  double v8;
  void *v9;
  double v10;
  double v11;
  void *v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  void *v21;
  double v22;
  void *v23;
  void *v24;
  void *v25;
  double v26;
  double v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  double v33;
  double v34;
  double v35;
  double v36;
  CGFloat v37;
  void *v38;
  void *v39;
  void *v40;
  CGFloat v41;
  double v42;
  void *v43;
  void *v44;
  void *v45;
  void *v46;
  void *v47;
  void *v48;
  void *v49;
  void *v50;
  void *v51;
  void *v52;
  void *v53;
  double v54;
  double v55;
  double v56;
  double v57;
  void *v58;
  void *v59;
  void *v60;
  void *v61;
  id v62;

  CurrentContext = UIGraphicsGetCurrentContext();
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[FRCardConfiguration cardConfiguration](FRCardConfiguration, "cardConfiguration"));
  objc_msgSend(v3, "spaceBetweenTopicTitleAndHorizontalDividerForCardSize:", *(double *)(a1 + 40), *(double *)(a1 + 48));
  v5 = v4;

  v6 = (void *)objc_claimAutoreleasedReturnValue(+[FRCardConfiguration cardConfiguration](FRCardConfiguration, "cardConfiguration"));
  objc_msgSend(v6, "horizontalDividerWidthForCardSize:", *(double *)(a1 + 40), *(double *)(a1 + 48));
  v8 = v7;

  v9 = (void *)objc_claimAutoreleasedReturnValue(+[FRCardConfiguration cardConfiguration](FRCardConfiguration, "cardConfiguration"));
  objc_msgSend(v9, "spaceBetweenHorizontalDividerAndTopicNameForCardSize:", *(double *)(a1 + 40), *(double *)(a1 + 48));
  v11 = v10;

  v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "options"));
  v62 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "parentBackgroundColor"));

  objc_msgSend(v62, "setFill");
  CGContextFillRect(CurrentContext, *(CGRect *)(a1 + 56));
  objc_msgSend(*(id *)(a1 + 32), "rectForOnePixelStroke:", *(double *)(a1 + 56), *(double *)(a1 + 64), *(double *)(a1 + 72), *(double *)(a1 + 80));
  v14 = v13;
  v16 = v15;
  v18 = v17;
  v20 = v19;
  v21 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "options"));
  objc_msgSend(v21, "cornerRadius");
  v61 = (void *)objc_claimAutoreleasedReturnValue(+[UIBezierPath bezierPathWithRoundedRect:cornerRadius:](UIBezierPath, "bezierPathWithRoundedRect:cornerRadius:", v14, v16, v18, v20, v22));

  CGContextSetLineWidth(CurrentContext, 1.0);
  CGContextSetBlendMode(CurrentContext, kCGBlendModeNormal);
  v23 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "options"));
  v24 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v23, "parentBackgroundColor"));
  v60 = (void *)objc_claimAutoreleasedReturnValue(+[UIColor fr_topicCardBorderColorForParentBackgroundColor:](UIColor, "fr_topicCardBorderColorForParentBackgroundColor:", v24));

  objc_msgSend(v60, "setStroke");
  objc_msgSend(v61, "stroke");
  v25 = (void *)objc_claimAutoreleasedReturnValue(+[FRCardConfiguration cardConfiguration](FRCardConfiguration, "cardConfiguration"));
  objc_msgSend(v25, "topicTitleTopMarginForCardSize:", *(double *)(a1 + 40), *(double *)(a1 + 48));
  v27 = v26;

  v59 = (void *)objc_claimAutoreleasedReturnValue(+[UIColor colorWithRed:green:blue:alpha:](UIColor, "colorWithRed:green:blue:alpha:", 0.454901961, 0.454901961, 0.454901961, 1.0));
  v28 = (void *)objc_claimAutoreleasedReturnValue(+[FRCardConfiguration cardConfiguration](FRCardConfiguration, "cardConfiguration"));
  v58 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v28, "topicTitleAttributesForCardSize:textColor:sizeCategory:", v59, 0, *(double *)(a1 + 40), *(double *)(a1 + 48)));

  v29 = (void *)objc_claimAutoreleasedReturnValue(+[NSBundle mainBundle](NSBundle, "mainBundle"));
  v30 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v29, "localizedStringForKey:value:table:", CFSTR("Topic"), &stru_1000DF290, 0));
  v31 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v30, "uppercaseString"));

  v32 = (void *)objc_claimAutoreleasedReturnValue(+[FRCardConfiguration cardConfiguration](FRCardConfiguration, "cardConfiguration"));
  objc_msgSend(v32, "topicTitleTextSize:cardSize:", v31, *(double *)(a1 + 40), *(double *)(a1 + 48));
  v34 = v33;
  v36 = v35;

  objc_msgSend(v31, "drawInRect:withAttributes:", v58, (*(double *)(a1 + 40) - v34) * 0.5, v27, v34, v36);
  v37 = v27 + v5 + v36;
  v38 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "options"));
  v39 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v38, "parentBackgroundColor"));
  v40 = (void *)objc_claimAutoreleasedReturnValue(+[UIColor fr_topicCardDividerColorForParentBackgroundColor:](UIColor, "fr_topicCardDividerColorForParentBackgroundColor:", v39));

  v41 = (*(double *)(a1 + 40) - v8) * 0.5;
  CGContextSetStrokeColorWithColor(CurrentContext, (CGColorRef)objc_msgSend(v40, "cgColor"));
  CGContextSetLineWidth(CurrentContext, 1.0);
  CGContextMoveToPoint(CurrentContext, v41, v37);
  CGContextAddLineToPoint(CurrentContext, v8 + v41, v37);
  CGContextStrokePath(CurrentContext);
  v42 = v11 + 1.0 + v37;
  v43 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "options"));
  v44 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v43, "feed"));

  v45 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v44, "backingTag"));
  v46 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v45, "name"));
  v47 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v46, "uppercaseString"));

  v48 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "options"));
  v49 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v48, "parentBackgroundColor"));
  v50 = (void *)objc_claimAutoreleasedReturnValue(+[UIColor fr_topicCardTextColorForParentBackgroundColor:](UIColor, "fr_topicCardTextColorForParentBackgroundColor:", v49));

  v51 = (void *)objc_claimAutoreleasedReturnValue(+[FRCardConfiguration cardConfiguration](FRCardConfiguration, "cardConfiguration"));
  v52 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v51, "topicTextAttributesForCardSize:textColor:sizeCategory:", v50, 0, *(double *)(a1 + 40), *(double *)(a1 + 48)));

  v53 = (void *)objc_claimAutoreleasedReturnValue(+[FRCardConfiguration cardConfiguration](FRCardConfiguration, "cardConfiguration"));
  objc_msgSend(v53, "topicTextSize:cardSize:", v47, *(double *)(a1 + 40), *(double *)(a1 + 48));
  v55 = v54;
  v57 = v56;

  objc_msgSend(v47, "drawInRect:withAttributes:", v52, (*(double *)(a1 + 40) - v55) * 0.5, v42, v55, v57);
}

void sub_10003F074(uint64_t a1)
{
  CGContext *CurrentContext;
  void *v3;
  void *v4;
  void *v5;
  unsigned __int8 v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  BOOL v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  CGImage *v30;
  void *v31;
  void *v32;
  void *v33;
  CGImage *v34;
  void *v35;
  int v36;
  void *v37;
  void *v38;
  void *v39;
  void *v40;
  void *v41;
  void *v42;
  double v43;
  double v44;
  double v45;
  double v46;
  double v47;
  double v48;
  double v49;
  double v50;
  id v51;
  void *v52;
  void *v53;
  void *v54;
  void *v55;
  void *v56;
  id v57;
  _QWORD v58[2];
  _QWORD v59[2];
  _QWORD v60[2];
  _QWORD v61[2];
  _QWORD v62[6];
  _QWORD v63[6];
  _BYTE v64[32];
  _OWORD v65[2];
  _OWORD v66[2];
  _OWORD v67[2];
  _OWORD v68[2];
  CGRect v69;
  CGRect v70;

  CurrentContext = UIGraphicsGetCurrentContext();
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "options"));
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "feedBackgroundColor"));

  CGContextSaveGState(CurrentContext);
  objc_msgSend(v4, "setFill");
  CGContextFillRect(CurrentContext, *(CGRect *)(a1 + 56));
  CGContextRestoreGState(CurrentContext);
  if (*(_QWORD *)(a1 + 40))
  {
    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "options"));
    v6 = objc_msgSend(v5, "punchThroughEffect");

    if ((v6 & 1) == 0)
    {
      CGContextSaveGState(CurrentContext);
      v55 = (void *)objc_claimAutoreleasedReturnValue(+[CIContext contextWithOptions:](CIContext, "contextWithOptions:", 0));
      v54 = (void *)objc_claimAutoreleasedReturnValue(+[CIImage imageWithCGImage:](CIImage, "imageWithCGImage:", objc_msgSend(objc_retainAutorelease(*(id *)(a1 + 40)), "CGImage")));
      v68[0] = xmmword_1000D0B50;
      v68[1] = unk_1000D0B60;
      v67[0] = xmmword_1000D0B70;
      v67[1] = unk_1000D0B80;
      v66[0] = xmmword_1000D0B90;
      v66[1] = unk_1000D0BA0;
      v65[0] = xmmword_1000D0BB0;
      v65[1] = unk_1000D0BC0;
      memset(v64, 0, sizeof(v64));
      v63[0] = v54;
      v62[0] = kCIInputImageKey;
      v62[1] = CFSTR("inputRVector");
      v7 = (void *)objc_claimAutoreleasedReturnValue(+[CIVector vectorWithValues:count:](CIVector, "vectorWithValues:count:", v68, 4));
      v63[1] = v7;
      v62[2] = CFSTR("inputGVector");
      v8 = (void *)objc_claimAutoreleasedReturnValue(+[CIVector vectorWithValues:count:](CIVector, "vectorWithValues:count:", v67, 4));
      v63[2] = v8;
      v62[3] = CFSTR("inputBVector");
      v56 = v4;
      v9 = (void *)objc_claimAutoreleasedReturnValue(+[CIVector vectorWithValues:count:](CIVector, "vectorWithValues:count:", v66, 4));
      v63[3] = v9;
      v62[4] = CFSTR("inputAVector");
      v10 = (void *)objc_claimAutoreleasedReturnValue(+[CIVector vectorWithValues:count:](CIVector, "vectorWithValues:count:", v65, 4));
      v63[4] = v10;
      v62[5] = CFSTR("inputBiasVector");
      v11 = (void *)objc_claimAutoreleasedReturnValue(+[CIVector vectorWithValues:count:](CIVector, "vectorWithValues:count:", v64, 4));
      v63[5] = v11;
      v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v63, v62, 6));
      v53 = (void *)objc_claimAutoreleasedReturnValue(+[CIFilter filterWithName:withInputParameters:](CIFilter, "filterWithName:withInputParameters:", CFSTR("CIColorMatrix"), v12));

      v52 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v53, "outputImage"));
      v60[0] = kCIInputImageKey;
      v60[1] = kCIInputSaturationKey;
      v61[0] = v52;
      v61[1] = &off_1000E4AF8;
      v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v61, v60, 2));
      v14 = (void *)objc_claimAutoreleasedReturnValue(+[CIFilter filterWithName:withInputParameters:](CIFilter, "filterWithName:withInputParameters:", CFSTR("CIColorControls"), v13));

      v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "outputImage"));
      CGContextScaleCTM(CurrentContext, 1.0, -1.0);
      v16 = 0.0;
      CGContextTranslateCTM(CurrentContext, 0.0, -*(double *)(a1 + 96));
      CGContextSetBlendMode(CurrentContext, kCGBlendModeNormal);
      CGContextSetAlpha(CurrentContext, 0.34);
      objc_msgSend(*(id *)(a1 + 40), "size");
      v18 = v17;
      objc_msgSend(*(id *)(a1 + 40), "size");
      v20 = v18 / v19;
      v21 = *(double *)(a1 + 88);
      v22 = *(double *)(a1 + 96);
      v23 = v20 <= v21 / v22;
      v24 = v21 / v20;
      v25 = (v22 - v21 / v20) * 0.5;
      v26 = v22 * v20;
      if (v23)
        v27 = v24;
      else
        v27 = *(double *)(a1 + 96);
      if (v23)
        v28 = *(double *)(a1 + 88);
      else
        v28 = v26;
      if (v23)
        v29 = v25;
      else
        v29 = 0.0;
      if (!v23)
        v16 = (v21 - v26) * 0.5;
      objc_msgSend(v15, "extent");
      v30 = (CGImage *)objc_msgSend(v55, "createCGImage:fromRect:", v15);
      v69.origin.x = v16;
      v69.origin.y = v29;
      v69.size.width = v28;
      v69.size.height = v27;
      CGContextDrawImage(CurrentContext, v69, v30);
      CGImageRelease(v30);
      v58[0] = kCIInputImageKey;
      v58[1] = kCIInputSaturationKey;
      v59[0] = v54;
      v59[1] = &off_1000E4B08;
      v31 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v59, v58, 2));
      v32 = (void *)objc_claimAutoreleasedReturnValue(+[CIFilter filterWithName:withInputParameters:](CIFilter, "filterWithName:withInputParameters:", CFSTR("CIColorControls"), v31));

      v33 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v32, "outputImage"));
      objc_msgSend(v33, "extent");
      v34 = (CGImage *)objc_msgSend(v55, "createCGImage:fromRect:", v33);
      CGContextSetAlpha(CurrentContext, 0.046);
      v70.origin.x = v16;
      v70.origin.y = v29;
      v70.size.width = v28;
      v70.size.height = v27;
      CGContextDrawImage(CurrentContext, v70, v34);
      CGImageRelease(v34);
      CGContextRestoreGState(CurrentContext);

      v4 = v56;
    }
  }
  v35 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "name"));
  if (!objc_msgSend(v35, "length"))
    goto LABEL_18;
  v36 = *(unsigned __int8 *)(a1 + 104);

  if (v36)
  {
    CGContextSaveGState(CurrentContext);
    v35 = (void *)objc_claimAutoreleasedReturnValue(+[UIColor colorWithWhite:alpha:](UIColor, "colorWithWhite:alpha:", 1.0, 0.4));
    v37 = (void *)objc_claimAutoreleasedReturnValue(+[UIColor whiteColor](UIColor, "whiteColor"));
    v38 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "name"));
    v39 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v38, "uppercaseString"));

    v40 = (void *)objc_claimAutoreleasedReturnValue(+[FRCardConfiguration cardConfiguration](FRCardConfiguration, "cardConfiguration"));
    v41 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v40, "topicTextAttributesForCardSize:textColor:sizeCategory:", v37, 0, *(double *)(a1 + 88), *(double *)(a1 + 96)));

    v42 = (void *)objc_claimAutoreleasedReturnValue(+[FRCardConfiguration cardConfiguration](FRCardConfiguration, "cardConfiguration"));
    v57 = 0;
    objc_msgSend(v42, "topicTextRect:cardSize:textPadPath:", v39, &v57, *(double *)(a1 + 88), *(double *)(a1 + 96));
    v44 = v43;
    v46 = v45;
    v48 = v47;
    v50 = v49;
    v51 = v57;

    CGContextSetLineWidth(CurrentContext, 1.0);
    CGContextSetBlendMode(CurrentContext, kCGBlendModeNormal);
    objc_msgSend(v35, "setStroke");
    objc_msgSend(v51, "stroke");

    objc_msgSend(v39, "drawInRect:withAttributes:", v41, v44, v46, v48, v50);
    CGContextRestoreGState(CurrentContext);

LABEL_18:
  }

}

void sub_10003FE44(uint64_t a1)
{
  CGContext *CurrentContext;
  void *v3;
  CGRect v4;

  CurrentContext = UIGraphicsGetCurrentContext();
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[UIColor blackColor](UIColor, "blackColor"));
  objc_msgSend(v3, "setFill");

  objc_msgSend(*(id *)(a1 + 32), "bannerRectForSize:", *(double *)(a1 + 40), *(double *)(a1 + 48));
  CGContextFillRect(CurrentContext, v4);
}

void sub_10003FEDC(id a1)
{
  id v1;
  void *v2;

  v1 = objc_alloc_init((Class)NSCache);
  v2 = (void *)qword_10010A548;
  qword_10010A548 = (uint64_t)v1;

  _objc_msgSend((id)qword_10010A548, "setCountLimit:", 5);
}

void sub_100040C18(uint64_t a1, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  char isKindOfClass;
  void *v6;
  id v7;
  void *v8;
  void *v9;
  uint64_t v10;
  id v11;

  v11 = a2;
  v4 = objc_opt_class(UIViewController, v3);
  isKindOfClass = objc_opt_isKindOfClass(v11, v4);
  v6 = v11;
  if ((isKindOfClass & 1) != 0)
  {
    v7 = v11;
    if (objc_msgSend(v7, "isViewLoaded"))
    {
      v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "view"));
      v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "window"));

      if (v9)
        objc_msgSend((id)objc_opt_class(*(_QWORD *)(a1 + 32), v10), "recordExposureEventForObserver:", v7);
    }

    v6 = v11;
  }

}

void sub_1000415CC(uint64_t a1)
{
  uint64_t v1;
  void *v3;
  id v4;

  v1 = *(_QWORD *)(a1 + 48);
  if (v1)
  {
    v4 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "editorialItemCreator"));
    v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "createEditorialItemFromCachedEntry:", *(_QWORD *)(a1 + 40)));
    (*(void (**)(uint64_t, void *))(v1 + 16))(v1, v3);

  }
}

void sub_100041640(uint64_t a1)
{
  FREditorialItemEntry *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  void *v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  FREditorialItemEntry *v22;

  v2 = [FREditorialItemEntry alloc];
  v3 = *(_QWORD *)(a1 + 32);
  v4 = *(_QWORD *)(a1 + 40);
  v5 = *(_QWORD *)(a1 + 48);
  v6 = *(_QWORD *)(a1 + 56);
  v7 = *(_QWORD *)(a1 + 64);
  v8 = *(_QWORD *)(a1 + 72);
  v9 = *(_QWORD *)(a1 + 80);
  v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 88), "lastSeenDocumentVersion"));
  LOBYTE(v21) = *(_BYTE *)(a1 + 128);
  v22 = -[FREditorialItemEntry initWithEditorialItemID:title:subtitle:subtitleColorString:image:actionUrlString:lastModifiedDate:documentVersion:lastSeenDocumentVersion:showBadge:](v2, "initWithEditorialItemID:title:subtitle:subtitleColorString:image:actionUrlString:lastModifiedDate:documentVersion:lastSeenDocumentVersion:showBadge:", v3, v4, v5, v6, 0, v7, v8, v9, v10, v21);

  v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 96), "editorialItemEntryManager"));
  objc_msgSend(v11, "addEditorialItem:", v22);

  v12 = objc_alloc((Class)TSEditorialItem);
  v13 = *(_QWORD *)(a1 + 32);
  v14 = *(_QWORD *)(a1 + 40);
  v15 = *(_QWORD *)(a1 + 48);
  v16 = *(_QWORD *)(a1 + 56);
  v17 = *(_QWORD *)(a1 + 104);
  v18 = (void *)objc_claimAutoreleasedReturnValue(+[NSURL URLWithString:](NSURL, "URLWithString:", *(_QWORD *)(a1 + 64)));
  v19 = objc_msgSend(v12, "initWithIdentifier:title:subtitle:subtitleColor:attributes:actionURL:thumbnailImage:backingTag:headline:", v13, v14, v15, v16, v17, v18, 0, 0, *(_QWORD *)(a1 + 112));

  v20 = *(_QWORD *)(a1 + 120);
  if (v20)
    (*(void (**)(uint64_t, id))(v20 + 16))(v20, v19);

}

void sub_100041788(uint64_t a1, UIImage *image)
{
  NSData *v3;
  FREditorialItemEntry *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  FREditorialItemEntry *v13;
  void *v14;
  void *v15;
  void *v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  id v24;
  uint64_t v25;
  uint64_t v26;
  id v27;

  v3 = UIImagePNGRepresentation(image);
  v27 = (id)objc_claimAutoreleasedReturnValue(v3);
  v4 = [FREditorialItemEntry alloc];
  v5 = *(_QWORD *)(a1 + 32);
  v6 = *(_QWORD *)(a1 + 40);
  v7 = *(_QWORD *)(a1 + 48);
  v8 = *(_QWORD *)(a1 + 56);
  v9 = *(_QWORD *)(a1 + 64);
  v10 = *(_QWORD *)(a1 + 72);
  v11 = *(_QWORD *)(a1 + 80);
  v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 88), "lastSeenDocumentVersion"));
  LOBYTE(v26) = *(_BYTE *)(a1 + 128);
  v13 = -[FREditorialItemEntry initWithEditorialItemID:title:subtitle:subtitleColorString:image:actionUrlString:lastModifiedDate:documentVersion:lastSeenDocumentVersion:showBadge:](v4, "initWithEditorialItemID:title:subtitle:subtitleColorString:image:actionUrlString:lastModifiedDate:documentVersion:lastSeenDocumentVersion:showBadge:", v5, v6, v7, v8, v27, v9, v10, v11, v12, v26);

  v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 96), "editorialItemEntryManager"));
  objc_msgSend(v14, "addEditorialItem:", v13);

  v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 96), "thumbnailCreator"));
  v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v15, "editorialThumbnailImageWith:", v27));

  v17 = objc_alloc((Class)TSEditorialItem);
  v18 = *(_QWORD *)(a1 + 32);
  v19 = *(_QWORD *)(a1 + 40);
  v20 = *(_QWORD *)(a1 + 48);
  v21 = *(_QWORD *)(a1 + 56);
  v22 = *(_QWORD *)(a1 + 104);
  v23 = (void *)objc_claimAutoreleasedReturnValue(+[NSURL URLWithString:](NSURL, "URLWithString:", *(_QWORD *)(a1 + 64)));
  v24 = objc_msgSend(v17, "initWithIdentifier:title:subtitle:subtitleColor:attributes:actionURL:thumbnailImage:backingTag:headline:", v18, v19, v20, v21, v22, v23, v16, 0, *(_QWORD *)(a1 + 112));

  v25 = *(_QWORD *)(a1 + 120);
  if (v25)
    (*(void (**)(uint64_t, id))(v25 + 16))(v25, v24);

}

uint64_t sub_100041A9C(uint64_t a1)
{
  NSObject *v2;

  v2 = FCDefaultLog;
  if (os_log_type_enabled(FCDefaultLog, OS_LOG_TYPE_ERROR))
    sub_10007E1AC(a1, v2);
  return 0;
}

uint64_t sub_100041AE8(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  int v5;
  uint64_t v6;

  v2 = FCDefaultLog;
  if (os_log_type_enabled(FCDefaultLog, OS_LOG_TYPE_DEFAULT))
  {
    v3 = *(_QWORD *)(a1 + 32);
    v5 = 138543362;
    v6 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Editorial Item Provider: New Editorial ArticleID: %{public}@, showing badge", (uint8_t *)&v5, 0xCu);
  }
  return 1;
}

void sub_100041C6C(uint64_t a1)
{
  void *v2;
  void *v3;
  id v4;
  uint64_t v5;
  void *v6;
  id v7;
  void *v8;
  id v9;
  _QWORD v10[4];
  id v11;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "documentController"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "imageResourceForIdentifier:", *(_QWORD *)(a1 + 40)));

  v4 = objc_alloc((Class)SXImageRequest);
  v5 = *(_QWORD *)(a1 + 40);
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "URL"));
  v7 = objc_msgSend(v4, "initWithImageIdentifier:imageQualities:url:size:preserveColorspace:loadingBlock:", v5, 4, v6, 1, 0, CGSizeZero.width, CGSizeZero.height);

  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472;
  v10[2] = sub_100041D78;
  v10[3] = &unk_1000DBC10;
  v8 = *(void **)(a1 + 48);
  v11 = *(id *)(a1 + 56);
  v9 = objc_msgSend(v8, "loadImagesForImageRequest:completionBlock:", v7, v10);

}

void sub_100041D78(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  id v5;
  uint64_t v6;
  void *v7;
  _QWORD v8[4];
  id v9;

  v3 = a2;
  v4 = v3;
  v7 = v3;
  if (v3)
  {
    v5 = objc_msgSend(v3, "count");
    v4 = v7;
    if (v5)
    {
      v8[0] = _NSConcreteStackBlock;
      v8[1] = 3221225472;
      v8[2] = sub_100041E24;
      v8[3] = &unk_1000DBBE8;
      v9 = *(id *)(a1 + 32);
      objc_msgSend(v7, "enumerateObjectsUsingBlock:", v8);

LABEL_6:
      v4 = v7;
      goto LABEL_7;
    }
  }
  v6 = *(_QWORD *)(a1 + 32);
  if (v6)
  {
    (*(void (**)(uint64_t, _QWORD))(v6 + 16))(v6, 0);
    goto LABEL_6;
  }
LABEL_7:

}

void sub_100041E24(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  void *v5;
  id v6;
  id v7;
  void *v8;
  uint64_t v9;
  id v10;

  v3 = a2;
  v4 = objc_alloc((Class)UIImage);
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "image"));

  v6 = objc_retainAutorelease(v5);
  v7 = objc_msgSend(v6, "CGImage");
  v8 = (void *)objc_claimAutoreleasedReturnValue(+[UIScreen mainScreen](UIScreen, "mainScreen"));
  objc_msgSend(v8, "scale");
  v10 = objc_msgSend(v4, "initWithCGImage:scale:orientation:", v7, 0);

  v9 = *(_QWORD *)(a1 + 32);
  if (v9)
    (*(void (**)(uint64_t, id))(v9 + 16))(v9, v10);

}

TSExplicitContentRestrictionAlertPresenter *__cdecl sub_10004228C(id a1, TFResolver *a2)
{
  return (TSExplicitContentRestrictionAlertPresenter *)objc_alloc_init(FRExplicitContentRestrictionAlertPresenter);
}

FROnboardingDataManager *sub_1000422A8(uint64_t a1)
{
  FROnboardingDataManager *v2;
  void *v3;
  FROnboardingDataManager *v4;

  v2 = [FROnboardingDataManager alloc];
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "feldsparContext"));
  v4 = -[FROnboardingDataManager initWithFeldsparContext:](v2, "initWithFeldsparContext:", v3);

  return v4;
}

void sub_10004237C(id a1)
{
  uint64_t v1;
  void *v2;

  v1 = objc_claimAutoreleasedReturnValue(+[UIFont systemFontOfSize:weight:](UIFont, "systemFontOfSize:weight:", 11.0, UIFontWeightRegular));
  v2 = (void *)qword_10010A558;
  qword_10010A558 = v1;

}

void sub_100042434(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  void *v4;
  void *v5;
  id v6;
  NSAttributedStringKey v7;
  uint64_t v8;
  CGRect v9;
  CGRect v10;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "loadingText"));
  if (!v2 && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
    sub_10007E5FC();
  v3 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "loadingFont"));
  v4 = (void *)v3;
  if (v3)
  {
    v7 = NSFontAttributeName;
    v8 = v3;
    v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v8, &v7, 1));
  }
  else
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      sub_10007E534();
    v5 = &__NSDictionary0__struct;
  }
  v6 = objc_msgSend(objc_alloc((Class)NSAttributedString), "initWithString:attributes:", v2, v5);
  objc_msgSend(v6, "boundingRectWithSize:options:context:", 1, 0, CGSizeZero.width, CGSizeZero.height);
  v10 = CGRectIntegral(v9);
  qword_10010A568 = *(_QWORD *)&v10.size.width;
  qword_10010A570 = *(_QWORD *)&v10.size.height;

}

void sub_100042A88(uint64_t a1)
{
  id v1;

  v1 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "label"));
  objc_msgSend(v1, "setAlpha:", 1.0);

}

void sub_100042B84(uint64_t a1)
{
  id v1;

  v1 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "label"));
  objc_msgSend(v1, "setAlpha:", 0.0);

}

id sub_100043710(uint64_t a1)
{
  void *v2;
  void *v3;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "iconImageView"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "layer"));
  objc_msgSend(v3, "removeAllAnimations");

  return objc_msgSend(*(id *)(a1 + 32), "_finishTransition");
}

void sub_100044328(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100044340(uint64_t a1)
{
  FRNotificationPayloadInfo *v2;
  id v3;

  v3 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "newsUserInfo"));
  if (v3)
    v2 = -[FRNotificationPayloadInfo initWithNewsUserInfo:]([FRNotificationPayloadInfo alloc], "initWithNewsUserInfo:", v3);
  else
    v2 = 0;
  objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), v2);
  if (v3)

  objc_msgSend(*(id *)(a1 + 32), "setNewsUserInfo:", 0);
}

void sub_100044490(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1000444A8(uint64_t a1)
{
  FRNotificationPayloadInfo *v2;
  void *v3;
  id v4;

  v4 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "newsUserInfo"));
  if (v4)
    v2 = -[FRNotificationPayloadInfo initWithNewsUserInfo:]([FRNotificationPayloadInfo alloc], "initWithNewsUserInfo:", v4);
  else
    v2 = 0;
  objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), v2);
  v3 = v4;
  if (v4)
  {

    v3 = v4;
  }

}

void sub_10004459C(uint64_t a1, void *a2)
{
  id v3;
  _QWORD block[5];

  v3 = objc_msgSend(a2, "authorizationStatus");
  if ((v3 == (id)2) != objc_msgSend(*(id *)(a1 + 32), "systemNotificationEnabled"))
  {
    objc_msgSend(*(id *)(a1 + 32), "setSystemNotificationEnabled:", v3 == (id)2);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_100044640;
    block[3] = &unk_1000D9758;
    block[4] = *(_QWORD *)(a1 + 32);
    dispatch_async((dispatch_queue_t)&_dispatch_main_q, block);
  }
}

id sub_100044640(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_updateNotificationUIEnabled");
}

void sub_10004499C(uint64_t a1, void *a2)
{
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  id v8;
  id v9;
  id v10;
  uint64_t v11;
  void *i;
  void *v13;
  void *v14;
  unsigned int v15;
  void *v16;
  void *v17;
  NSObject *v18;
  id v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  id v24;
  id v25;
  uint64_t v26;
  void *j;
  void *v28;
  NSObject *v29;
  id v30;
  dispatch_time_t v31;
  uint64_t v32;
  _QWORD block[5];
  id v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  uint8_t v43[128];
  uint8_t buf[4];
  id v45;
  _BYTE v46[128];

  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "notificationsConfig"));
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "preSubscribedNotificationsChannelIDs"));
  v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSSet setWithArray:](NSSet, "setWithArray:", v4));

  v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableSet set](NSMutableSet, "set"));
  v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableSet set](NSMutableSet, "set"));
  v39 = 0u;
  v40 = 0u;
  v41 = 0u;
  v42 = 0u;
  v32 = a1;
  v8 = *(id *)(a1 + 32);
  v9 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v39, v46, 16);
  if (v9)
  {
    v10 = v9;
    v11 = *(_QWORD *)v40;
    do
    {
      for (i = 0; i != v10; i = (char *)i + 1)
      {
        if (*(_QWORD *)v40 != v11)
          objc_enumerationMutation(v8);
        v13 = *(void **)(*((_QWORD *)&v39 + 1) + 8 * (_QWORD)i);
        v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "identifier"));
        v15 = objc_msgSend(v5, "containsObject:", v14);

        if (v15)
          v16 = v6;
        else
          v16 = v7;
        objc_msgSend(v16, "addObject:", v13);
      }
      v10 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v39, v46, 16);
    }
    while (v10);
  }

  if (objc_msgSend(v6, "count"))
  {
    v17 = (void *)FCPushNotificationsLog;
    if (os_log_type_enabled(FCPushNotificationsLog, OS_LOG_TYPE_DEFAULT))
    {
      v18 = v17;
      v19 = objc_msgSend(v6, "count");
      *(_DWORD *)buf = 134217984;
      v45 = v19;
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "About to notify %lu tags with notifications auto-enabled", buf, 0xCu);

    }
    objc_msgSend(*(id *)(v32 + 40), "_notifyOfTagsWithNotificationEnabled:", v6);
    v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(v32 + 40), "feldsparContext"));
    v21 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v20, "cloudContext"));
    v22 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v21, "purchaseController"));

    v37 = 0u;
    v38 = 0u;
    v35 = 0u;
    v36 = 0u;
    v23 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "allObjects"));
    v24 = objc_msgSend(v23, "countByEnumeratingWithState:objects:count:", &v35, v43, 16);
    if (v24)
    {
      v25 = v24;
      v26 = *(_QWORD *)v36;
      do
      {
        for (j = 0; j != v25; j = (char *)j + 1)
        {
          if (*(_QWORD *)v36 != v26)
            objc_enumerationMutation(v23);
          objc_msgSend(*(id *)(v32 + 48), "setNotificationsEnabled:forTag:error:", 1, *(_QWORD *)(*((_QWORD *)&v35 + 1) + 8 * (_QWORD)j), 0);
        }
        v25 = objc_msgSend(v23, "countByEnumeratingWithState:objects:count:", &v35, v43, 16);
      }
      while (v25);
    }

  }
  if (objc_msgSend(v7, "count"))
  {
    v28 = (void *)FCPushNotificationsLog;
    if (os_log_type_enabled(FCPushNotificationsLog, OS_LOG_TYPE_DEFAULT))
    {
      v29 = v28;
      v30 = objc_msgSend(v7, "count");
      *(_DWORD *)buf = 134217984;
      v45 = v30;
      _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_DEFAULT, "About to notify %lu tags with notifications available", buf, 0xCu);

    }
    if (objc_msgSend(v6, "count"))
    {
      v31 = dispatch_time(0, 3000000000);
      block[0] = _NSConcreteStackBlock;
      block[1] = 3221225472;
      block[2] = sub_100044D8C;
      block[3] = &unk_1000D97A8;
      block[4] = *(_QWORD *)(v32 + 40);
      v34 = v7;
      dispatch_after(v31, (dispatch_queue_t)&_dispatch_main_q, block);

    }
    else
    {
      objc_msgSend(*(id *)(v32 + 40), "_notifyOfTagsWithNotificationAvailable:", v7);
    }
  }

}

id sub_100044D8C(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_notifyOfTagsWithNotificationAvailable:", *(_QWORD *)(a1 + 40));
}

NSString *__cdecl sub_100044FF8(id a1, FCTagProviding *a2)
{
  return (NSString *)-[FCTagProviding name](a2, "name");
}

NSString *__cdecl sub_1000451E8(id a1, FCTagProviding *a2)
{
  return (NSString *)-[FCTagProviding name](a2, "name");
}

void sub_1000453B4(uint64_t a1, void *a2)
{
  void *v2;
  id v3;

  v2 = *(void **)(a1 + 32);
  v3 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "identifier"));
  objc_msgSend(v2, "appendFormat:", CFSTR("_%@"), v3);

}

void sub_1000459A4(uint64_t a1)
{
  id v2;

  v2 = objc_msgSend(*(id *)(a1 + 40), "copy");
  objc_msgSend(*(id *)(a1 + 32), "setNewsUserInfo:", v2);

}

void sub_1000459E4(uint64_t a1)
{
  NSObject *v2;
  void *v3;
  id v4;
  id v5;
  uint64_t v6;
  void *i;
  void *v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  _BYTE v13[128];

  v2 = FCPushNotificationsLog;
  if (os_log_type_enabled(FCPushNotificationsLog, OS_LOG_TYPE_ERROR))
    sub_10007EA60(v2);
  v11 = 0u;
  v12 = 0u;
  v9 = 0u;
  v10 = 0u;
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "observers", 0));
  v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v9, v13, 16);
  if (v4)
  {
    v5 = v4;
    v6 = *(_QWORD *)v10;
    do
    {
      for (i = 0; i != v5; i = (char *)i + 1)
      {
        if (*(_QWORD *)v10 != v6)
          objc_enumerationMutation(v3);
        v8 = *(void **)(*((_QWORD *)&v9 + 1) + 8 * (_QWORD)i);
        if ((objc_opt_respondsToSelector(v8, "notificationManagerFailedToHandleRemoteNotification:reason:") & 1) != 0)
          objc_msgSend(v8, "notificationManagerFailedToHandleRemoteNotification:reason:", *(_QWORD *)(a1 + 32), CFSTR("Invalid article ID"));
      }
      v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v9, v13, 16);
    }
    while (v5);
  }

}

void sub_1000467BC(uint64_t a1)
{
  void *v2;
  void *v3;
  id v4;

  v4 = objc_alloc_init((Class)NSMutableDictionary);
  v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSUUID UUID](NSUUID, "UUID"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "UUIDString"));
  objc_msgSend(v4, "setObject:forKey:", v3, FCNotificationPayloadNotificationIDKey);

  objc_msgSend(*(id *)(a1 + 32), "setNewsUserInfo:", v4);
}

void sub_100046848(uint64_t a1)
{
  id v2;

  v2 = objc_msgSend(*(id *)(a1 + 40), "copy");
  objc_msgSend(*(id *)(a1 + 32), "setNewsUserInfo:", v2);

}

void sub_100046888(uint64_t a1)
{
  id v2;

  v2 = objc_msgSend(*(id *)(a1 + 40), "copy");
  objc_msgSend(*(id *)(a1 + 32), "setNewsUserInfo:", v2);

}

void sub_1000468C8(uint64_t a1)
{
  id v2;

  v2 = objc_msgSend(*(id *)(a1 + 40), "copy");
  objc_msgSend(*(id *)(a1 + 32), "setNewsUserInfo:", v2);

}

id sub_100046908(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "handleActionForRemoteArticleNotificationWithIdentifier:forUserInfo:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));
}

void sub_100046AFC(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  id v5;
  void *v6;
  NSObject *v7;
  void *v8;
  double v9;
  uint64_t v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  id v19;
  void *v20;
  id v21;
  void *v22;
  void *v23;
  id v24;
  uint64_t v25;
  void *v26;
  id v27;
  _QWORD block[4];
  id v29;
  uint64_t v30;
  id v31;
  uint64_t *v32;
  uint64_t *v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t (*v38)(uint64_t, uint64_t);
  void (*v39)(uint64_t);
  id v40;
  uint64_t v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t (*v44)(uint64_t, uint64_t);
  void (*v45)(uint64_t);
  id v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t (*v50)(uint64_t, uint64_t);
  void (*v51)(uint64_t);
  id v52;

  v3 = a2;
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "fetchedObject"));
  v5 = objc_msgSend(v4, "copy");

  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "firstObject"));
  v7 = dispatch_group_create();
  v47 = 0;
  v48 = &v47;
  v49 = 0x3032000000;
  v50 = sub_100018604;
  v51 = sub_100018524;
  v8 = (void *)objc_claimAutoreleasedReturnValue(+[UIScreen mainScreen](UIScreen, "mainScreen"));
  objc_msgSend(v8, "scale");
  v10 = FCThumbnailForHeadlineMinimumSize(v6, 300.0, 300.0, v9);
  v11 = (void *)objc_claimAutoreleasedReturnValue(v10);
  v52 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "thumbnailAssetHandle"));

  v41 = 0;
  v42 = &v41;
  v43 = 0x3032000000;
  v44 = sub_100018604;
  v45 = sub_100018524;
  v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "sourceChannel"));
  v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "theme"));
  v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "bannerImageForMask"));
  v46 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "assetHandle"));

  v35 = 0;
  v36 = &v35;
  v37 = 0x3032000000;
  v38 = sub_100018604;
  v39 = sub_100018524;
  v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "sourceChannel"));
  v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v15, "theme"));
  v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v16, "compactBannerImage"));
  v40 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v17, "assetHandle"));

  v18 = (void *)v48[5];
  if (v18)
    v19 = objc_msgSend(v18, "downloadIfNeededWithGroup:", v7);
  v20 = (void *)v42[5];
  if (v20)
  {
    v21 = objc_msgSend(v20, "downloadIfNeededWithGroup:", v7);
    v22 = (void *)v42[5];
  }
  else
  {
    v22 = 0;
  }
  v23 = (void *)v36[5];
  if (v22 == v23)
  {
    v36[5] = 0;

  }
  else
  {
    v24 = objc_msgSend(v23, "downloadIfNeededWithGroup:", v7);
  }
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_100046E10;
  block[3] = &unk_1000DC168;
  v32 = &v47;
  v33 = &v41;
  v34 = &v35;
  v25 = *(_QWORD *)(a1 + 32);
  v26 = *(void **)(a1 + 40);
  v29 = v6;
  v30 = v25;
  v31 = v26;
  v27 = v6;
  dispatch_group_notify(v7, (dispatch_queue_t)&_dispatch_main_q, block);

  _Block_object_dispose(&v35, 8);
  _Block_object_dispose(&v41, 8);

  _Block_object_dispose(&v47, 8);
}

void sub_100046DD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
  uint64_t v26;

  _Block_object_dispose(&a20, 8);
  _Block_object_dispose(&a26, 8);
  _Block_object_dispose((const void *)(v26 - 152), 8);
  _Unwind_Resume(a1);
}

void sub_100046E10(uint64_t a1)
{
  void *v2;
  void *v3;
  uint64_t v4;
  void *v5;
  void *v6;
  uint64_t v7;
  void *v8;
  void *v9;
  uint64_t v10;
  id v11;
  id v12;
  id v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  void *v34;
  void *v35;
  void *v36;
  void *v37;
  void *v38;
  void *v39;
  void *v40;
  void *v41;
  void *v42;
  void *v43;
  void *v44;
  void *v45;
  id v46;
  void *v47;
  id v48;
  void *v49;
  void *v50;
  void *v51;
  void *v52;
  void *v53;
  void *v54;
  void *v55;
  id v56;
  void *v57;
  void *v58;
  dispatch_time_t v59;
  id v60;
  void *v61;
  void *v62;
  void *v63;
  dispatch_time_t v64;
  id v65;
  dispatch_time_t v66;
  void *v67;
  void *v68;
  void *v69;
  _QWORD v70[4];
  id v71;
  _QWORD v72[4];
  id v73;
  _QWORD v74[4];
  id v75;
  _QWORD block[4];
  __int128 v77;
  uint64_t v78;
  _QWORD v79[2];
  _QWORD v80[2];

  if (*(_QWORD *)(a1 + 32))
  {
    v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40), "filePath"));
    if (v2)
    {
      v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40), "filePath"));
      v4 = objc_claimAutoreleasedReturnValue(+[NSURL fileURLWithPath:isDirectory:](NSURL, "fileURLWithPath:isDirectory:", v3, 0));

    }
    else
    {
      v4 = 0;
    }

    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 40), "filePath"));
    if (v5)
    {
      v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 40), "filePath"));
      v7 = objc_claimAutoreleasedReturnValue(+[NSURL fileURLWithPath:isDirectory:](NSURL, "fileURLWithPath:isDirectory:", v6, 0));

    }
    else
    {
      v7 = 0;
    }

    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 72) + 8) + 40), "filePath"));
    if (v8)
    {
      v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 72) + 8) + 40), "filePath"));
      v10 = objc_claimAutoreleasedReturnValue(+[NSURL fileURLWithPath:isDirectory:](NSURL, "fileURLWithPath:isDirectory:", v9, 0));

    }
    else
    {
      v10 = 0;
    }

    if (v4)
    {
      v11 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue(+[NSData dataWithContentsOfURL:](NSData, "dataWithContentsOfURL:", v4)));
      objc_msgSend(v11, "bytes");

    }
    if (v7)
    {
      v12 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue(+[NSData dataWithContentsOfURL:](NSData, "dataWithContentsOfURL:", v7)));
      objc_msgSend(v12, "bytes");

    }
    if (v10)
    {
      v13 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue(+[NSData dataWithContentsOfURL:](NSData, "dataWithContentsOfURL:", v10)));
      objc_msgSend(v13, "bytes");

    }
    v14 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableDictionary dictionary](NSMutableDictionary, "dictionary"));
    v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "articleID"));

    if (v15)
    {
      v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "articleID"));
      objc_msgSend(v14, "setObject:forKeyedSubscript:", v16, FCNotificationPayloadArticleIDKey);

    }
    v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "title"));

    if (v17)
    {
      v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "title"));
      objc_msgSend(v14, "setObject:forKeyedSubscript:", v18, FCNotificationPayloadTitleKey);

    }
    v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "shortExcerpt"));

    if (v19)
    {
      v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "shortExcerpt"));
      objc_msgSend(v14, "setObject:forKeyedSubscript:", v20, FCNotificationPayloadExcerptKey);

    }
    v21 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "sourceChannel"));
    v22 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v21, "identifier"));

    if (v22)
    {
      v23 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "sourceChannel"));
      v24 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v23, "identifier"));
      objc_msgSend(v14, "setObject:forKeyedSubscript:", v24, FCNotificationPayloadSourceChannelIDKey);

    }
    v25 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "sourceChannel"));
    v26 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v25, "name"));

    if (v26)
    {
      v27 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "sourceChannel"));
      v28 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v27, "name"));
      objc_msgSend(v14, "setObject:forKeyedSubscript:", v28, FCNotificationPayloadPublisherNameKey);

    }
    v29 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "sourceChannel"));
    v30 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v29, "nameCompact"));

    if (v30)
    {
      v31 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "sourceChannel"));
      v32 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v31, "nameCompact"));
      objc_msgSend(v14, "setObject:forKeyedSubscript:", v32, FCNotificationPayloadPublisherNameCompactKey);

    }
    v33 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "publishDate"));

    if (v33)
    {
      v34 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "publishDate"));
      objc_msgSend(v34, "timeIntervalSince1970");
      v35 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:"));
      objc_msgSend(v14, "setObject:forKeyedSubscript:", v35, FCNotificationPayloadPublishDateKey);

    }
    v36 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40), "remoteURL"));

    if (v36)
    {
      v37 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40), "remoteURL"));
      v38 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v37, "absoluteString"));
      objc_msgSend(v14, "setObject:forKeyedSubscript:", v38, FCNotificationPayloadThumbnailURLKey);

    }
    v39 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 40), "remoteURL"));

    if (v39)
    {
      v40 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 40), "remoteURL"));
      v41 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v40, "absoluteString"));
      objc_msgSend(v14, "setObject:forKeyedSubscript:", v41, FCNotificationPayloadPublisherLogoURLKey);

    }
    v42 = *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 72) + 8) + 40);
    if (v42 != *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 40))
    {
      v43 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v42, "remoteURL"));

      if (v43)
      {
        v44 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 72) + 8)
                                                                           + 40), "remoteURL"));
        v45 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v44, "absoluteString"));
        objc_msgSend(v14, "setObject:forKeyedSubscript:", v45, FCNotificationPayloadPublisherLogoCompactURLKey);

      }
    }
    v80[0] = CFSTR("SimulateRemoteNotificationType");
    v79[0] = CFSTR("LocalNotificationTypeKey");
    v79[1] = FCNotificationPayloadNewsKey;
    v46 = objc_msgSend(v14, "copy");
    v80[1] = v46;
    v47 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v80, v79, 2));

    v48 = objc_alloc_init((Class)UNMutableNotificationContent);
    v49 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "sourceChannel"));
    v50 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v49, "name"));
    objc_msgSend(v48, "setTitle:", v50);

    v51 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "title"));
    objc_msgSend(v48, "setBody:", v51);

    objc_msgSend(v48, "setCategoryIdentifier:", FCNotificationArticleCategory);
    objc_msgSend(v48, "setUserInfo:", v47);
    v52 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "_notificationAttachmentsWithThumbnailFileURL:publisherLogoFileURL:publisherLogoCompactFileURL:", v4, v7, v10));
    objc_msgSend(v48, "setAttachments:", v52);

    v69 = (void *)v4;
    v53 = (void *)objc_claimAutoreleasedReturnValue(+[UNTimeIntervalNotificationTrigger triggerWithTimeInterval:repeats:](UNTimeIntervalNotificationTrigger, "triggerWithTimeInterval:repeats:", 0, 3.0));
    v54 = (void *)objc_claimAutoreleasedReturnValue(+[NSUUID UUID](NSUUID, "UUID"));
    v55 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v54, "UUIDString"));
    v68 = (void *)v10;
    v56 = objc_msgSend(v48, "copy");
    v67 = (void *)v7;
    v57 = (void *)objc_claimAutoreleasedReturnValue(+[UNNotificationRequest requestWithIdentifier:content:trigger:](UNNotificationRequest, "requestWithIdentifier:content:trigger:", v55, v56, v53));

    v58 = (void *)objc_claimAutoreleasedReturnValue(+[UNUserNotificationCenter currentNotificationCenter](UNUserNotificationCenter, "currentNotificationCenter"));
    objc_msgSend(v58, "addNotificationRequest:withCompletionHandler:", v57, &stru_1000DC0F0);

    v59 = dispatch_time(0, 10000000000);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_1000477B0;
    block[3] = &unk_1000DC118;
    v77 = *(_OWORD *)(a1 + 56);
    v78 = *(_QWORD *)(a1 + 72);
    dispatch_after(v59, (dispatch_queue_t)&_dispatch_main_q, block);
    v74[0] = _NSConcreteStackBlock;
    v74[1] = 3221225472;
    v74[2] = sub_100047804;
    v74[3] = &unk_1000DC140;
    v60 = objc_msgSend(objc_alloc((Class)NSSArticleViewControllerInternal), "initWithNibName:bundle:", 0, 0);
    v75 = v60;
    +[NSSArticleInternal articleFromNotificationUserInfo:thumbnailFileURL:publisherLogoFileURL:publisherLogoMaskFileURL:completion:](NSSArticleInternal, "articleFromNotificationUserInfo:thumbnailFileURL:publisherLogoFileURL:publisherLogoMaskFileURL:completion:", v47, 0, 0, 0, v74);
    v61 = (void *)objc_claimAutoreleasedReturnValue(+[UIApplication sharedApplication](UIApplication, "sharedApplication"));
    v62 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v61, "key_window"));

    v63 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v62, "rootViewController"));
    objc_msgSend(v63, "presentViewController:animated:completion:", v60, 1, 0);

    v64 = dispatch_time(0, 10000000000);
    v72[0] = _NSConcreteStackBlock;
    v72[1] = 3221225472;
    v72[2] = sub_100047810;
    v72[3] = &unk_1000D9758;
    v73 = v60;
    v65 = v60;
    dispatch_after(v64, (dispatch_queue_t)&_dispatch_main_q, v72);

    v66 = dispatch_time(0, 3000000000);
    v70[0] = _NSConcreteStackBlock;
    v70[1] = 3221225472;
    v70[2] = sub_100047848;
    v70[3] = &unk_1000DAF28;
    v71 = *(id *)(a1 + 48);
    dispatch_after(v66, (dispatch_queue_t)&_dispatch_main_q, v70);

  }
}

void sub_1000477B0(_QWORD *a1)
{
  uint64_t v2;
  void *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  void *v7;

  v2 = *(_QWORD *)(a1[4] + 8);
  v3 = *(void **)(v2 + 40);
  *(_QWORD *)(v2 + 40) = 0;

  v4 = *(_QWORD *)(a1[5] + 8);
  v5 = *(void **)(v4 + 40);
  *(_QWORD *)(v4 + 40) = 0;

  v6 = *(_QWORD *)(a1[6] + 8);
  v7 = *(void **)(v6 + 40);
  *(_QWORD *)(v6 + 40) = 0;

}

id sub_100047804(uint64_t a1, uint64_t a2)
{
  return _objc_msgSend(*(id *)(a1 + 32), "setArticle:", a2);
}

void sub_100047810(uint64_t a1)
{
  id v1;

  v1 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "presentingViewController"));
  objc_msgSend(v1, "dismissViewControllerAnimated:completion:", 1, 0);

}

uint64_t sub_100047848(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 32);
  if (result)
    return (*(uint64_t (**)(void))(result + 16))();
  return result;
}

void sub_100047E64(id a1, NSError *a2)
{
  NSError *v2;
  NSObject *v3;

  v2 = a2;
  if (v2)
  {
    v3 = FCDefaultLog;
    if (os_log_type_enabled(FCDefaultLog, OS_LOG_TYPE_ERROR))
      sub_10007EAA0((uint64_t)v2, v3);
  }

}

uint64_t sub_100047FCC()
{
  void *v0;

  v0 = (void *)objc_claimAutoreleasedReturnValue(+[NSUserDefaults standardUserDefaults](NSUserDefaults, "standardUserDefaults"));
  objc_msgSend(v0, "setBool:forKey:", 1, CFSTR("initial_notification_prompt_shown"));

  return 1;
}

FREnableNotificationsAlertPresenter *__cdecl sub_100049940(id a1, TFResolver *a2)
{
  TFResolver *v2;
  uint64_t v3;
  id v4;
  void *v5;

  v2 = a2;
  v4 = -[TFResolver resolveClass:](v2, "resolveClass:", objc_opt_class(FREnableNotificationsAlertPresenter, v3));
  v5 = (void *)objc_claimAutoreleasedReturnValue(v4);

  return (FREnableNotificationsAlertPresenter *)v5;
}

FREnableNotificationsAlertPresenter *__cdecl sub_10004998C(id a1, TFResolver *a2)
{
  return objc_alloc_init(FREnableNotificationsAlertPresenter);
}

void sub_100049A70(uint64_t a1)
{
  void *v1;
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v1 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "delegate"));
  objc_msgSend(v1, "gizmoPreferencesNotifierDidNoticeUpdate:", WeakRetained);

}

void sub_100049F70(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  void *v4;
  void *v5;
  id v6;
  _QWORD v7[4];
  id v8;
  _QWORD v9[4];
  id v10;
  id v11;

  v2 = (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
  v3 = (void *)objc_claimAutoreleasedReturnValue(v2);
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "collectionViewLayout"));
  objc_msgSend(v4, "invalidateLayout");

  v5 = *(void **)(a1 + 32);
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472;
  v9[2] = sub_10004A068;
  v9[3] = &unk_1000D97A8;
  v10 = v3;
  v11 = v5;
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_10004A2C8;
  v7[3] = &unk_1000DB828;
  v8 = *(id *)(a1 + 48);
  v6 = v3;
  objc_msgSend(v5, "performBatchUpdates:completion:", v9, v7);

}

void sub_10004A068(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  id v11;
  _QWORD v12[4];
  id v13;
  _QWORD v14[4];
  id v15;

  v11 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "insertedSections"));
  if (objc_msgSend(v11, "count"))
    objc_msgSend(*(id *)(a1 + 40), "insertSections:", v11);
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "insertedIndexPaths"));
  if (objc_msgSend(v2, "count"))
    objc_msgSend(*(id *)(a1 + 40), "insertItemsAtIndexPaths:", v2);
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "deletedSections"));
  if (objc_msgSend(v3, "count"))
    objc_msgSend(*(id *)(a1 + 40), "deleteSections:", v3);
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "deletedIndexPaths"));
  if (objc_msgSend(v4, "count"))
    objc_msgSend(*(id *)(a1 + 40), "deleteItemsAtIndexPaths:", v4);
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "updatedSections"));
  if (objc_msgSend(v5, "count"))
  {
    v6 = *(void **)(a1 + 40);
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "updatedSections"));
    objc_msgSend(v6, "reloadSections:", v7);

  }
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "updatedIndexPaths"));
  if (objc_msgSend(v8, "count"))
    objc_msgSend(*(id *)(a1 + 40), "reloadItemsAtIndexPaths:", v8);
  v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "movedSections"));
  v14[0] = _NSConcreteStackBlock;
  v14[1] = 3221225472;
  v14[2] = sub_10004A260;
  v14[3] = &unk_1000DC2E0;
  v15 = *(id *)(a1 + 40);
  objc_msgSend(v9, "enumerateKeysAndObjectsUsingBlock:", v14);

  v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "movedIndexPaths"));
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472;
  v12[2] = sub_10004A2B8;
  v12[3] = &unk_1000DC308;
  v13 = *(id *)(a1 + 40);
  objc_msgSend(v10, "enumerateKeysAndObjectsUsingBlock:", v12);

}

id sub_10004A260(uint64_t a1, void *a2, void *a3)
{
  void *v4;
  id v5;
  id v6;
  id v7;

  v4 = *(void **)(a1 + 32);
  v5 = a3;
  v6 = objc_msgSend(a2, "integerValue");
  v7 = objc_msgSend(v5, "integerValue");

  return _objc_msgSend(v4, "moveSection:toSection:", v6, v7);
}

id sub_10004A2B8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _objc_msgSend(*(id *)(a1 + 32), "moveItemAtIndexPath:toIndexPath:", a2, a3);
}

uint64_t sub_10004A2C8(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 32);
  if (result)
    return (*(uint64_t (**)(void))(result + 16))();
  return result;
}

id sub_10004A5CC(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;

  v3 = objc_msgSend(a2, "userInterfaceStyle");
  v4 = 40;
  if (v3 == (id)2)
    v4 = 32;
  return *(id *)(a1 + v4);
}

void sub_10004AA58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  _Block_object_dispose(&a29, 8);
  _Unwind_Resume(a1);
}

void sub_10004AA78(uint64_t a1, void *a2)
{
  _QWORD v3[5];

  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_10004AAE0;
  v3[3] = &unk_1000DC380;
  v3[4] = *(_QWORD *)(a1 + 40);
  objc_msgSend(a2, "enumerateKeysAndObjectsUsingBlock:", v3);
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));
}

id sub_10004AAE0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40), "setObject:forKey:", a3, a2);
}

void sub_10004AAF4(uint64_t a1, void *a2)
{
  _QWORD v3[5];

  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_10004AB5C;
  v3[3] = &unk_1000DC380;
  v3[4] = *(_QWORD *)(a1 + 40);
  objc_msgSend(a2, "enumerateKeysAndObjectsUsingBlock:", v3);
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));
}

id sub_10004AB5C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40), "setObject:forKey:", a3, a2);
}

void sub_10004AB70(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  void *v6;
  id v7;
  id v8;
  id v9;
  void *v10;
  void *v11;
  id v12;
  id v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  _QWORD v18[5];
  _QWORD v19[4];
  id v20;
  _QWORD v21[4];
  id v22;
  id v23;
  _QWORD v24[5];
  id v25;
  id v26;
  id v27;
  uint64_t v28;

  v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray array](NSMutableArray, "array"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray array](NSMutableArray, "array"));
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray array](NSMutableArray, "array"));
  v24[0] = _NSConcreteStackBlock;
  v24[1] = 3221225472;
  v24[2] = sub_10004ADC4;
  v24[3] = &unk_1000DC3D0;
  v5 = *(_QWORD *)(a1 + 40);
  v6 = *(void **)(a1 + 32);
  v28 = *(_QWORD *)(a1 + 48);
  v24[4] = v5;
  v7 = v2;
  v25 = v7;
  v8 = v3;
  v26 = v8;
  v9 = v4;
  v27 = v9;
  objc_msgSend(v6, "enumerateObjectsUsingBlock:", v24);
  v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "editorialItemEntryManager"));
  v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "orderedEditorialItemIDs"));

  v21[0] = _NSConcreteStackBlock;
  v21[1] = 3221225472;
  v21[2] = sub_10004B240;
  v21[3] = &unk_1000DC3F8;
  v12 = v8;
  v22 = v12;
  v13 = v9;
  v23 = v13;
  objc_msgSend(v11, "enumerateObjectsUsingBlock:", v21);
  v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "editorialItemEntryManager"));
  objc_msgSend(v14, "addOrderedEditorialItemIDs:", v12);

  v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "itemChangeDelegate"));
  objc_msgSend(v15, "refreshEditorialItemsWithItems:", v7);

  if (!objc_msgSend(*(id *)(a1 + 32), "count"))
  {
    v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "editorialItemEntryManager"));
    v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v16, "editorialItemsByID"));
    v19[0] = _NSConcreteStackBlock;
    v19[1] = 3221225472;
    v19[2] = sub_10004B28C;
    v19[3] = &unk_1000DC420;
    v20 = v13;
    objc_msgSend(v17, "enumerateKeysAndObjectsUsingBlock:", v19);

  }
  v18[0] = _NSConcreteStackBlock;
  v18[1] = 3221225472;
  v18[2] = sub_10004B298;
  v18[3] = &unk_1000DC448;
  v18[4] = *(_QWORD *)(a1 + 40);
  objc_msgSend(v13, "enumerateObjectsUsingBlock:", v18);

}

void sub_10004ADC4(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  unsigned __int8 v21;
  void *v22;
  void *v23;
  void *v24;
  unsigned __int8 v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  void *v34;
  void *v35;
  FREditorialItemEntry *v36;
  void *v37;
  void *v38;
  void *v39;
  uint64_t v40;
  void *v41;
  void *v42;
  FREditorialItemEntry *v43;
  unsigned __int8 v44;
  uint64_t v45;
  void *v46;
  id v47;

  v3 = a2;
  v4 = *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 40);
  v47 = v3;
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "identifier"));
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "objectForKey:", v5));

  if (v6)
  {
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v47, "title"));
    if (v7)
    {
      objc_msgSend(v6, "setTitle:", v7);
    }
    else
    {
      v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "title"));
      objc_msgSend(v6, "setTitle:", v10);

    }
    v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v47, "subtitle"));
    if (v11)
    {
      objc_msgSend(v6, "setSubtitle:", v11);
    }
    else
    {
      v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "subtitle"));
      objc_msgSend(v6, "setSubtitle:", v12);

    }
    v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v47, "subtitleColorString"));
    if (v13)
    {
      objc_msgSend(v6, "setSubtitleColor:", v13);
    }
    else
    {
      v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "subtitleColor"));
      objc_msgSend(v6, "setSubtitleColor:", v14);

    }
    v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v47, "actionUrlString"));
    if (v15)
    {
      v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v47, "actionUrlString"));
      v17 = (void *)objc_claimAutoreleasedReturnValue(+[NSURL URLWithString:](NSURL, "URLWithString:", v16));
      objc_msgSend(v6, "setActionURL:", v17);

    }
    else
    {
      v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "actionURL"));
      objc_msgSend(v6, "setActionURL:", v16);
    }

    v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "editorialItemEntryManager"));
    v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v18, "editorialItemsByID"));
    v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "identifier"));
    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v19, "objectForKey:", v20));

    v21 = objc_msgSend(*(id *)(a1 + 32), "_editorialItemHasBadge:", v6);
    v45 = a1;
    if ((v21 & 1) == 0 && v9)
    {
      v22 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "actionUrlString"));
      v23 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "actionURL"));
      v24 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v23, "absoluteString"));
      v25 = objc_msgSend(v22, "isEqualToString:", v24);

      if ((v25 & 1) != 0)
      {
        v21 = 0;
      }
      else
      {
        v26 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray array](NSMutableArray, "array"));
        v27 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", 0));
        objc_msgSend(v26, "addObject:", v27);

        objc_msgSend(v6, "setAttributes:", v26);
        v21 = 1;
      }
    }
    v44 = v21;
    v43 = [FREditorialItemEntry alloc];
    v41 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v47, "identifier"));
    v28 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "title"));
    v29 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "subtitle"));
    v30 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "subtitleColor"));
    v46 = v6;
    v31 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "image"));
    v42 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v46, "actionURL"));
    v32 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v42, "absoluteString"));
    v33 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "lastModifiedDate"));
    v34 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "documentVersion"));
    v35 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "lastSeenDocumentVersion"));
    LOBYTE(v40) = v44;
    v36 = -[FREditorialItemEntry initWithEditorialItemID:title:subtitle:subtitleColorString:image:actionUrlString:lastModifiedDate:documentVersion:lastSeenDocumentVersion:showBadge:](v43, "initWithEditorialItemID:title:subtitle:subtitleColorString:image:actionUrlString:lastModifiedDate:documentVersion:lastSeenDocumentVersion:showBadge:", v41, v28, v29, v30, v31, v32, v33, v34, v35, v40);

    v6 = v46;
    v37 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(v45 + 32), "editorialItemEntryManager"));
    objc_msgSend(v37, "addEditorialItem:", v36);

    objc_msgSend(*(id *)(v45 + 40), "addObject:", v46);
    v38 = *(void **)(v45 + 48);
    v39 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v46, "identifier"));
    objc_msgSend(v38, "addObject:", v39);

  }
  else
  {
    v8 = *(void **)(a1 + 56);
    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v47, "identifier"));
    objc_msgSend(v8, "addObject:", v9);
  }

}

void sub_10004B240(uint64_t a1, void *a2)
{
  id v3;

  v3 = a2;
  if ((objc_msgSend(*(id *)(a1 + 32), "containsObject:") & 1) == 0)
    objc_msgSend(*(id *)(a1 + 40), "addObject:", v3);

}

id sub_10004B28C(uint64_t a1, uint64_t a2)
{
  return objc_msgSend(*(id *)(a1 + 32), "addObject:", a2);
}

void sub_10004B298(uint64_t a1, void *a2)
{
  void *v2;
  id v3;
  id v4;

  v2 = *(void **)(a1 + 32);
  v3 = a2;
  v4 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "editorialItemEntryManager"));
  objc_msgSend(v4, "removeItemWithIdentifier:", v3);

}

void sub_10004B390(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id sub_10004B3A8(uint64_t a1, void *a2, uint64_t a3, _BYTE *a4)
{
  id result;

  result = objc_msgSend(a2, "intValue");
  if (!(_DWORD)result)
  {
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = 1;
    *a4 = 1;
  }
  return result;
}

void sub_10004B4F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10004B510(uint64_t a1, void *a2)
{
  void *v3;
  id v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  uint64_t v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  id v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  id v26;
  void *v27;
  void *v28;
  unsigned int v29;
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  void *v34;
  id v35;
  void *v36;
  void *v37;
  void *v38;
  void *v39;
  void *v40;
  void *v41;
  id v42;
  uint64_t v43;
  id v44;

  v3 = *(void **)(a1 + 32);
  v4 = a2;
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "editorialItemEntryManager"));
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "editorialItemsByID"));
  v44 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "objectForKey:", v4));

  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v44, "editorialItemID"));
  LODWORD(v4) = objc_msgSend(v7, "fc_isValidArticleID");

  if ((_DWORD)v4)
  {
    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "cloudContext"));
    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "articleController"));
    v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v44, "editorialItemID"));
    v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "articleWithID:", v10));
    v12 = objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "headline"));

    if (!v12)
      *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24) = 1;
    v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v44, "image"));

    v43 = a1;
    if (v13)
    {
      v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "thumbnailCreator"));
      v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v44, "image"));
      v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "editorialThumbnailImageWith:", v15));

    }
    v16 = (void *)v12;
    v17 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray array](NSMutableArray, "array"));
    if (objc_msgSend(v44, "showBadge"))
    {
      v18 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", 0));
      objc_msgSend(v17, "addObject:", v18);

    }
    v19 = objc_alloc((Class)TSEditorialItem);
    v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v44, "editorialItemID"));
    v21 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v44, "title"));
    v22 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v44, "subtitle"));
    v23 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v44, "subtitleColorString"));
    v24 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v44, "actionUrlString"));
    v25 = (void *)objc_claimAutoreleasedReturnValue(+[NSURL URLWithString:](NSURL, "URLWithString:", v24));
    v26 = objc_msgSend(v19, "initWithIdentifier:title:subtitle:subtitleColor:attributes:actionURL:thumbnailImage:backingTag:headline:", v20, v21, v22, v23, v17, v25, v13, 0, v16);

    v27 = v16;
    objc_msgSend(*(id *)(v43 + 40), "addObject:", v26);

    goto LABEL_14;
  }
  v28 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v44, "editorialItemID"));
  v29 = objc_msgSend(v28, "fc_isValidTagID");

  v30 = v44;
  if (v29)
  {
    v31 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "cloudContext"));
    v32 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v31, "tagController"));
    v33 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v44, "editorialItemID"));
    v27 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v32, "slowCachedTagForID:", v33));

    if (!v27)
    {
      *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24) = 1;
      goto LABEL_15;
    }
    v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray array](NSMutableArray, "array"));
    if (objc_msgSend(v44, "showBadge"))
    {
      v34 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", 0));
      objc_msgSend(v13, "addObject:", v34);

    }
    v35 = objc_alloc((Class)TSEditorialItem);
    v36 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v44, "editorialItemID"));
    v37 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v44, "title"));
    v38 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v44, "subtitle"));
    v39 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v44, "subtitleColorString"));
    v40 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v44, "actionUrlString"));
    v41 = (void *)objc_claimAutoreleasedReturnValue(+[NSURL URLWithString:](NSURL, "URLWithString:", v40));
    v42 = objc_msgSend(v35, "initWithIdentifier:title:subtitle:subtitleColor:attributes:actionURL:thumbnailImage:backingTag:headline:", v36, v37, v38, v39, v13, v41, 0, v27, 0);

    objc_msgSend(*(id *)(a1 + 40), "addObject:", v42);
LABEL_14:

LABEL_15:
    v30 = v44;
  }

}

void sub_10004BCD4(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 168));
  _Unwind_Resume(a1);
}

void sub_10004BD04(_QWORD *a1, void *a2)
{
  void *v3;
  id v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  unsigned int v10;
  void *v11;
  id v12;

  v3 = (void *)a1[4];
  v4 = a2;
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "editorialItemEntryManager"));
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "editorialItemsByID"));
  v12 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "objectForKey:", v4));

  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "editorialItemID"));
  LODWORD(v4) = objc_msgSend(v7, "fc_isValidArticleID");

  if ((_DWORD)v4)
  {
    v8 = (void *)a1[5];
LABEL_5:
    v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "editorialItemID"));
    objc_msgSend(v8, "setObject:forKeyedSubscript:", v12, v11);

    goto LABEL_6;
  }
  v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "editorialItemID"));
  v10 = objc_msgSend(v9, "fc_isValidTagID");

  if (v10)
  {
    v8 = (void *)a1[6];
    goto LABEL_5;
  }
LABEL_6:

}

void sub_10004BDE8(id *a1, void *a2)
{
  id v3;
  id WeakRetained;
  id v5;
  _QWORD v6[4];
  id v7;
  id v8;
  id v9;
  id v10;

  v3 = a2;
  WeakRetained = objc_loadWeakRetained(a1 + 7);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_10004BEB8;
  v6[3] = &unk_1000DC538;
  v7 = v3;
  v8 = a1[4];
  v9 = a1[5];
  v10 = a1[6];
  v5 = v3;
  FCPerformIfNonNil(WeakRetained, v6);

}

void sub_10004BEB8(uint64_t a1, void *a2)
{
  void *v3;
  void *v4;
  id v5;
  void *v6;
  id v7;
  _QWORD v8[4];
  id v9;
  id v10;
  id v11;
  _QWORD v12[4];
  __int128 v13;

  v3 = *(void **)(a1 + 32);
  v7 = a2;
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "error"));

  if (v4)
  {
    v12[0] = _NSConcreteStackBlock;
    v12[1] = 3221225472;
    v12[2] = sub_10004BFD4;
    v12[3] = &unk_1000D97A8;
    v13 = *(_OWORD *)(a1 + 32);
    v5 = (id)v13;
    sub_10004BFD4((uint64_t)v12);
  }
  else
  {
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "fetchedObject"));
    v8[0] = _NSConcreteStackBlock;
    v8[1] = 3221225472;
    v8[2] = sub_10004C024;
    v8[3] = &unk_1000DC510;
    v9 = *(id *)(a1 + 48);
    v10 = v7;
    v11 = *(id *)(a1 + 56);
    objc_msgSend(v6, "enumerateObjectsUsingBlock:", v8);

    dispatch_group_leave(*(dispatch_group_t *)(a1 + 40));
    v5 = v9;
  }

}

void sub_10004BFD4(uint64_t a1)
{
  void *v2;

  v2 = (void *)FCDefaultLog;
  if (os_log_type_enabled(FCDefaultLog, OS_LOG_TYPE_ERROR))
    sub_10007F1BC(a1, v2);
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 40));
}

void sub_10004C024(uint64_t a1, void *a2)
{
  void *v3;
  id v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  id v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  id v18;
  void *v19;
  void *v20;
  uint64_t v21;
  void *v22;
  id v23;

  v3 = *(void **)(a1 + 32);
  v4 = a2;
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "articleID"));
  v23 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "objectForKeyedSubscript:", v5));

  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v23, "image"));
  v21 = a1;
  if (v6)
  {
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "thumbnailCreator"));
    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v23, "image"));
    v22 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "editorialThumbnailImageWith:", v8));

  }
  else
  {
    v22 = 0;
  }
  v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray array](NSMutableArray, "array"));
  if (objc_msgSend(v23, "showBadge"))
  {
    v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", 0));
    objc_msgSend(v9, "addObject:", v10);

  }
  v11 = objc_alloc((Class)TSEditorialItem);
  v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v23, "editorialItemID"));
  v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v23, "title"));
  v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v23, "subtitle"));
  v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v23, "subtitleColorString"));
  v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v23, "actionUrlString"));
  v17 = (void *)objc_claimAutoreleasedReturnValue(+[NSURL URLWithString:](NSURL, "URLWithString:", v16));
  v18 = objc_msgSend(v11, "initWithIdentifier:title:subtitle:subtitleColor:attributes:actionURL:thumbnailImage:backingTag:headline:", v12, v13, v14, v15, v9, v17, v22, 0, v4);

  v19 = *(void **)(v21 + 48);
  v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v23, "editorialItemID"));
  objc_msgSend(v19, "setObject:forKey:", v18, v20);

}

void sub_10004C244(uint64_t a1, void *a2)
{
  id v3;
  id WeakRetained;
  id v5;
  _QWORD v6[4];
  id v7;
  id v8;
  id v9;

  v3 = a2;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 56));
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_10004C304;
  v6[3] = &unk_1000DC588;
  v7 = *(id *)(a1 + 32);
  v8 = v3;
  v9 = *(id *)(a1 + 40);
  v5 = v3;
  FCPerformIfNonNil(WeakRetained, v6);

  dispatch_group_leave(*(dispatch_group_t *)(a1 + 48));
}

void sub_10004C304(uint64_t a1)
{
  uint64_t v1;
  void *i;
  uint64_t v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  id v13;
  void *v14;
  void *v15;
  id obj;
  uint64_t v17;
  uint64_t v18;
  id v19;
  void *v20;
  id v21;
  void *v22;
  void *v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  _BYTE v28[128];

  v1 = a1;
  v24 = 0u;
  v25 = 0u;
  v26 = 0u;
  v27 = 0u;
  obj = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "allKeys"));
  v19 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v24, v28, 16);
  if (v19)
  {
    v17 = v1;
    v18 = *(_QWORD *)v25;
    do
    {
      for (i = 0; i != v19; i = (char *)i + 1)
      {
        if (*(_QWORD *)v25 != v18)
          objc_enumerationMutation(obj);
        v3 = *(_QWORD *)(*((_QWORD *)&v24 + 1) + 8 * (_QWORD)i);
        v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(v1 + 40), "objectForKey:", v3));
        v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(v1 + 32), "objectForKeyedSubscript:", v3));
        if (v4)
        {
          v23 = v4;
          v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray array](NSMutableArray, "array"));
          if (objc_msgSend(v5, "showBadge"))
          {
            v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", 0));
            objc_msgSend(v6, "addObject:", v7);

          }
          v21 = objc_alloc((Class)TSEditorialItem);
          v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "editorialItemID"));
          v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "title"));
          v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "subtitle"));
          v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "subtitleColorString"));
          v22 = v6;
          v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "actionUrlString"));
          v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSURL URLWithString:](NSURL, "URLWithString:", v11));
          v4 = v23;
          v13 = objc_msgSend(v21, "initWithIdentifier:title:subtitle:subtitleColor:attributes:actionURL:thumbnailImage:backingTag:headline:", v20, v8, v9, v10, v6, v12, 0, v23, 0);

          v1 = v17;
          v14 = *(void **)(v17 + 48);
          v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "editorialItemID"));
          objc_msgSend(v14, "setObject:forKey:", v13, v15);

        }
      }
      v19 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v24, v28, 16);
    }
    while (v19);
  }

}

id sub_10004C598(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "_refreshEditorialItemsOrderedWith:", *(_QWORD *)(a1 + 40));
}

void sub_10004C698(uint64_t a1, uint64_t a2)
{
  void *v3;
  void *v4;

  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "objectForKey:", a2));
  if (v3)
  {
    v4 = v3;
    objc_msgSend(*(id *)(a1 + 40), "addObject:", v3);
    v3 = v4;
  }

}

void sub_10004C790(uint64_t a1, void *a2, uint64_t a3, _BYTE *a4)
{
  void *v6;
  id v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  id v12;

  v6 = *(void **)(a1 + 32);
  v7 = a2;
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "editorialItemEntryManager"));
  v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "editorialItemsByID"));
  v12 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "objectForKey:", v7));

  v10 = *(void **)(a1 + 40);
  v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "editorialItemID"));
  LODWORD(v10) = objc_msgSend(v10, "isEqualToString:", v11);

  if ((_DWORD)v10)
  {
    objc_msgSend(*(id *)(a1 + 32), "tappedEditorialItemWithIdentifier:", *(_QWORD *)(a1 + 40));
    *a4 = 1;
  }

}

void sub_10004CCB4(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 112));
  _Unwind_Resume(a1);
}

void sub_10004CD10(id *a1, void *a2)
{
  id v3;
  id WeakRetained;
  id v5;
  _QWORD v6[4];
  id v7;
  id v8;
  id v9;

  v3 = a2;
  WeakRetained = objc_loadWeakRetained(a1 + 6);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_10004CDCC;
  v6[3] = &unk_1000DC588;
  v7 = v3;
  v8 = a1[4];
  v9 = a1[5];
  v5 = v3;
  FCPerformIfNonNil(WeakRetained, v6);

}

void sub_10004CDCC(uint64_t a1, void *a2)
{
  void *v3;
  id v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  uint64_t v11;
  void *v12;
  void *v13;
  id v14;
  void *v15;
  id v16;
  _QWORD v17[5];

  v16 = a2;
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "error"));

  if (v3)
  {
    v17[0] = _NSConcreteStackBlock;
    v17[1] = 3221225472;
    v17[2] = sub_10004CF80;
    v17[3] = &unk_1000D9758;
    v17[4] = *(_QWORD *)(a1 + 32);
    sub_10004CF80((uint64_t)v17);
  }
  else
  {
    v4 = objc_alloc((Class)TSEditorialItem);
    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "editorialItemID"));
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "title"));
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "subtitle"));
    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "subtitleColorString"));
    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "actionUrlString"));
    v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSURL URLWithString:](NSURL, "URLWithString:", v9));
    v11 = *(_QWORD *)(a1 + 48);
    v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "fetchedObject"));
    v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "firstObject"));
    v14 = objc_msgSend(v4, "initWithIdentifier:title:subtitle:subtitleColor:attributes:actionURL:thumbnailImage:backingTag:headline:", v5, v6, v7, v8, &__NSArray0__struct, v10, v11, 0, v13);

    v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v16, "itemChangeDelegate"));
    objc_msgSend(v15, "updateEditorialItemWith:", v14);

  }
}

void sub_10004CF80(uint64_t a1)
{
  void *v2;

  v2 = (void *)FCDefaultLog;
  if (os_log_type_enabled(FCDefaultLog, OS_LOG_TYPE_ERROR))
    sub_10007F1BC(a1, v2);
}

void sub_10004CFC8(uint64_t a1, void *a2)
{
  id v3;
  id WeakRetained;
  id v5;
  _QWORD v6[4];
  id v7;
  id v8;

  v3 = a2;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_10004D070;
  v6[3] = &unk_1000DC628;
  v7 = v3;
  v8 = *(id *)(a1 + 32);
  v5 = v3;
  FCPerformIfNonNil(WeakRetained, v6);

}

void sub_10004D070(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  id v12;

  if (*(_QWORD *)(a1 + 32))
  {
    v3 = a2;
    v4 = objc_alloc((Class)TSEditorialItem);
    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "editorialItemID"));
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "title"));
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "subtitle"));
    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "subtitleColorString"));
    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "actionUrlString"));
    v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSURL URLWithString:](NSURL, "URLWithString:", v9));
    v12 = objc_msgSend(v4, "initWithIdentifier:title:subtitle:subtitleColor:attributes:actionURL:thumbnailImage:backingTag:headline:", v5, v6, v7, v8, &__NSArray0__struct, v10, 0, *(_QWORD *)(a1 + 32), 0);

    v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "itemChangeDelegate"));
    objc_msgSend(v11, "updateEditorialItemWith:", v12);

  }
}

void sub_10004D418(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,id location)
{
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_10004D44C(uint64_t a1, void *a2)
{
  id v3;
  id WeakRetained;
  id v5;
  _QWORD v6[4];
  id v7;
  id v8;

  v3 = a2;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_10004D4F4;
  v6[3] = &unk_1000DC628;
  v7 = v3;
  v8 = *(id *)(a1 + 32);
  v5 = v3;
  FCPerformIfNonNil(WeakRetained, v6);

}

void sub_10004D4F4(uint64_t a1, void *a2)
{
  void *v3;

  if (*(_QWORD *)(a1 + 32))
  {
    v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "interestTokens"));
    objc_msgSend(v3, "addObject:", *(_QWORD *)(a1 + 32));

  }
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 40));
}

uint64_t sub_10004D538(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 32);
  if (result)
    return (*(uint64_t (**)(void))(result + 16))();
  return result;
}

uint64_t sub_10004D6A8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 32);
  if (result)
  {
    if (a3)
      a2 = 0;
    return (*(uint64_t (**)(uint64_t, uint64_t))(result + 16))(result, a2);
  }
  return result;
}

void sub_10004D6C4(uint64_t a1)
{
  void *v2;
  _QWORD v3[4];
  id v4;
  id v5;
  id location;

  objc_initWeak(&location, *(id *)(a1 + 32));
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "editorialConfigurationProvider"));
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_10004D7A4;
  v3[3] = &unk_1000DC6C8;
  objc_copyWeak(&v5, &location);
  v4 = *(id *)(a1 + 40);
  objc_msgSend(v2, "fetchEditorialConfiguration:", v3);

  objc_destroyWeak(&v5);
  objc_destroyWeak(&location);
}

void sub_10004D780(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 40));
  _Unwind_Resume(a1);
}

void sub_10004D7A4(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id WeakRetained;
  id v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD v13[4];
  id v14;
  id v15;

  v5 = a2;
  v6 = a3;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 3221225472;
  v13[2] = sub_10004D864;
  v13[3] = &unk_1000DC628;
  v14 = v6;
  v15 = v5;
  v8 = v5;
  v9 = v6;
  FCPerformIfNonNil(WeakRetained, v13);

  (*(void (**)(_QWORD, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32), v10, v11, v12);
}

void sub_10004D864(uint64_t a1, void *a2)
{
  uint64_t v2;
  _QWORD v3[5];

  v2 = *(_QWORD *)(a1 + 32);
  if (v2)
  {
    v3[0] = _NSConcreteStackBlock;
    v3[1] = 3221225472;
    v3[2] = sub_10004D8D0;
    v3[3] = &unk_1000D9758;
    v3[4] = v2;
    sub_10004D8D0((uint64_t)v3);
  }
  else
  {
    _objc_msgSend(a2, "processOverrideEditorialItems:", *(_QWORD *)(a1 + 40));
  }
}

void sub_10004D8D0(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;

  v2 = FCDefaultLog;
  if (os_log_type_enabled(FCDefaultLog, OS_LOG_TYPE_ERROR))
    sub_10007F3B8(a1, v2, v3);
}

id sub_10004DA24(uint64_t a1, void *a2)
{
  return a2;
}

void sub_10004DB40(uint64_t a1)
{
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));
}

void sub_10004DB48(uint64_t a1)
{
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));
}

void sub_10004DDF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_list va;

  va_start(va, a15);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10004DE18(uint64_t a1)
{
  uint64_t v2;
  void *v3;

  if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
    sub_10007F428(a1);
  objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40), "invalidate");
  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
  v3 = *(void **)(v2 + 40);
  *(_QWORD *)(v2 + 40) = 0;

}

void sub_10004DE78(uint64_t a1)
{
  id v2;
  id v3;
  uint64_t v4;
  void *v5;
  int v6;
  id v7;
  __int16 v8;
  id v9;

  if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_INFO))
  {
    v2 = objc_msgSend(*(id *)(a1 + 32), "count");
    v3 = objc_msgSend(*(id *)(a1 + 40), "count");
    v6 = 134218240;
    v7 = v2;
    v8 = 2048;
    v9 = v3;
    _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_INFO, "Marked %lu IDs saved and %lu IDs unsaved…", (uint8_t *)&v6, 0x16u);
  }
  objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40), "invalidate");
  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
  v5 = *(void **)(v4 + 40);
  *(_QWORD *)(v4 + 40) = 0;

}

void sub_10004E0C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10004E0DC(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  void *v5;

  v3 = a2;
  if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
    sub_10007F4D0();
  objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40), "invalidate");
  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  v5 = *(void **)(v4 + 40);
  *(_QWORD *)(v4 + 40) = 0;

}

void sub_10004E148(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  uint8_t v4[16];

  if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_INFO, "Cleared seen identifiers!", v4, 2u);
  }
  objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40), "invalidate");
  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  v3 = *(void **)(v2 + 40);
  *(_QWORD *)(v2 + 40) = 0;

}

void sub_10004E1D0(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7;
  id v8;
  id v9;
  void *v10;
  uint64_t v11;
  void *v12;
  void **v13;
  uint64_t v14;
  uint64_t (*v15)(_QWORD *);
  void *v16;
  id v17;
  id v18;
  id v19;
  id v20;

  v7 = a2;
  v8 = a3;
  v9 = a4;
  v10 = *(void **)(a1 + 32);
  if (v10)
  {
    v13 = _NSConcreteStackBlock;
    v14 = 3221225472;
    v15 = sub_10004E2C8;
    v16 = &unk_1000DC7E0;
    v20 = v10;
    v17 = v7;
    v18 = v8;
    v19 = v9;
    FCPerformBlockOnMainThread(&v13);

  }
  objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), "invalidate", v13, v14, v15, v16);
  v11 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v12 = *(void **)(v11 + 40);
  *(_QWORD *)(v11 + 40) = 0;

}

uint64_t sub_10004E2C8(_QWORD *a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD))(a1[7] + 16))(a1[7], a1[4], a1[5], a1[6]);
}

void sub_10004E384(uint64_t a1)
{
  void *v2;
  void *v3;
  _QWORD *v4;
  void *v5;
  _QWORD *v6;
  void *v7;
  uint64_t v8;
  _QWORD v9[5];
  id v10;
  id v11;
  id v12;
  uint64_t *v13;
  _QWORD v14[4];
  id v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t (*v20)(uint64_t, uint64_t);
  void (*v21)(uint64_t);
  id v22;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "delegate"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "gizmoSyncManager:fetchOperationForArticleIDs:", *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40)));

  if (v3)
  {
    v17 = 0;
    v18 = &v17;
    v19 = 0x3032000000;
    v20 = sub_100018624;
    v21 = sub_100018534;
    v22 = objc_msgSend(*(id *)(a1 + 32), "_newCompanionConnection");
    objc_msgSend((id)v18[5], "resume");
    v14[0] = _NSConcreteStackBlock;
    v14[1] = 3221225472;
    v14[2] = sub_10004E568;
    v14[3] = &unk_1000DC7B8;
    v15 = *(id *)(a1 + 48);
    v16 = &v17;
    v4 = objc_retainBlock(v14);
    v9[0] = _NSConcreteStackBlock;
    v9[1] = 3221225472;
    v9[2] = sub_10004E5E4;
    v9[3] = &unk_1000DC880;
    v5 = *(void **)(a1 + 40);
    v9[4] = *(_QWORD *)(a1 + 32);
    v10 = v5;
    v13 = &v17;
    v6 = v4;
    v11 = v6;
    v12 = *(id *)(a1 + 48);
    objc_msgSend(v3, "setFetchCompletionBlock:", v9);
    v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSOperationQueue fc_sharedSerialQueue](NSOperationQueue, "fc_sharedSerialQueue"));
    objc_msgSend(v7, "addOperation:", v3);

    _Block_object_dispose(&v17, 8);
  }
  else
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      sub_10007F538();
    v8 = *(_QWORD *)(a1 + 48);
    if (v8)
      (*(void (**)(void))(v8 + 16))();
  }

}

void sub_10004E54C(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 112), 8);
  _Unwind_Resume(a1);
}

void sub_10004E568(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;

  v3 = a2;
  if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
    sub_10007F624();
  v4 = *(_QWORD *)(a1 + 32);
  if (v4)
    (*(void (**)(void))(v4 + 16))();
  objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), "invalidate");
  v5 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v6 = *(void **)(v5 + 40);
  *(_QWORD *)(v5 + 40) = 0;

}

void sub_10004E5E4(uint64_t a1, void *a2)
{
  void *v3;
  id v4;
  void *v5;
  id v6;
  uint64_t v7;
  id v8;
  _QWORD v9[5];
  id v10;
  id v11;
  id v12;
  id v13;
  uint64_t v14;

  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "fetchedObject"));
  v4 = objc_msgSend(v3, "copy");

  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472;
  v9[2] = sub_10004E6BC;
  v9[3] = &unk_1000DC858;
  v5 = *(void **)(a1 + 40);
  v9[4] = *(_QWORD *)(a1 + 32);
  v10 = v4;
  v6 = v5;
  v7 = *(_QWORD *)(a1 + 64);
  v11 = v6;
  v14 = v7;
  v12 = *(id *)(a1 + 48);
  v13 = *(id *)(a1 + 56);
  v8 = v4;
  FCPerformBlockOnMainThread(v9);

}

void sub_10004E6BC(uint64_t a1)
{
  void *v2;
  id v3;
  id v4;
  id v5;
  uint64_t v6;
  void *i;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  id v12;
  uint64_t v13;
  _QWORD v14[4];
  id v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  uint8_t buf[4];
  uint64_t v22;
  _BYTE v23[128];

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "readingHistory"));
  v17 = 0u;
  v18 = 0u;
  v19 = 0u;
  v20 = 0u;
  v3 = *(id *)(a1 + 40);
  v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v17, v23, 16);
  if (v4)
  {
    v5 = v4;
    v6 = *(_QWORD *)v18;
    do
    {
      for (i = 0; i != v5; i = (char *)i + 1)
      {
        if (*(_QWORD *)v18 != v6)
          objc_enumerationMutation(v3);
        v8 = *(_QWORD *)(*((_QWORD *)&v17 + 1) + 8 * (_QWORD)i);
        objc_msgSend(v2, "markArticleAsSeenWithHeadline:", v8);
        objc_msgSend(v2, "markArticleAsReadWithHeadline:", v8);
      }
      v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v17, v23, 16);
    }
    while (v5);
  }

  if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_INFO))
  {
    v9 = *(_QWORD *)(a1 + 48);
    *(_DWORD *)buf = 138412290;
    v22 = v9;
    _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_INFO, "Consuming seen IDs = %@", buf, 0xCu);
  }
  v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 72) + 8) + 40), "remoteObjectProxyWithErrorHandler:", *(_QWORD *)(a1 + 56)));
  v11 = *(_QWORD *)(a1 + 48);
  v14[0] = _NSConcreteStackBlock;
  v14[1] = 3221225472;
  v14[2] = sub_10004E8A0;
  v14[3] = &unk_1000DC830;
  v12 = *(id *)(a1 + 64);
  v13 = *(_QWORD *)(a1 + 72);
  v15 = v12;
  v16 = v13;
  objc_msgSend(v10, "consumeSeenArticleIdentifiers:withReply:", v11, v14);

}

void sub_10004E8A0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  v2 = *(_QWORD *)(a1 + 32);
  if (v2)
    (*(void (**)(void))(v2 + 16))();
  objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), "invalidate");
  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v4 = *(void **)(v3 + 40);
  *(_QWORD *)(v3 + 40) = 0;

}

void sub_10004E9B4(id *a1)
{
  id v2;
  id v3;
  uint64_t v4;
  void *i;
  uint64_t v6;
  void *v7;
  unsigned __int8 v8;
  void *v9;
  void *v10;
  id v11;
  id v12;
  uint64_t v13;
  void *j;
  uint64_t v15;
  void *v16;
  unsigned int v17;
  _QWORD *v18;
  void *v19;
  void *v20;
  _QWORD v21[4];
  id v22;
  uint64_t *v23;
  _QWORD v24[4];
  id v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t (*v30)(uint64_t, uint64_t);
  void (*v31)(uint64_t);
  id v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  uint8_t buf[4];
  void *v42;
  _BYTE v43[128];
  _BYTE v44[128];

  v37 = 0u;
  v38 = 0u;
  v39 = 0u;
  v40 = 0u;
  v2 = a1[4];
  v3 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v37, v44, 16);
  if (v3)
  {
    v4 = *(_QWORD *)v38;
    do
    {
      for (i = 0; i != v3; i = (char *)i + 1)
      {
        if (*(_QWORD *)v38 != v4)
          objc_enumerationMutation(v2);
        v6 = *(_QWORD *)(*((_QWORD *)&v37 + 1) + 8 * (_QWORD)i);
        v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[5], "readingList"));
        v8 = objc_msgSend(v7, "isArticleOnReadingList:", v6);

        if ((v8 & 1) == 0)
        {
          v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[5], "readingList"));
          objc_msgSend(v9, "addArticleToReadingList:eventInitiationLevel:origin:", v6, 1, 2);

        }
      }
      v3 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v37, v44, 16);
    }
    while (v3);
  }

  v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableSet setWithArray:](NSMutableSet, "setWithArray:", a1[4]));
  v35 = 0u;
  v36 = 0u;
  v33 = 0u;
  v34 = 0u;
  v11 = a1[6];
  v12 = objc_msgSend(v11, "countByEnumeratingWithState:objects:count:", &v33, v43, 16);
  if (v12)
  {
    v13 = *(_QWORD *)v34;
    do
    {
      for (j = 0; j != v12; j = (char *)j + 1)
      {
        if (*(_QWORD *)v34 != v13)
          objc_enumerationMutation(v11);
        v15 = *(_QWORD *)(*((_QWORD *)&v33 + 1) + 8 * (_QWORD)j);
        if ((objc_msgSend(v10, "containsObject:", v15) & 1) == 0)
        {
          v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[5], "readingList"));
          v17 = objc_msgSend(v16, "isArticleOnReadingList:", v15);

          if (v17)
            objc_msgSend(v10, "addObject:", v15);
        }
      }
      v12 = objc_msgSend(v11, "countByEnumeratingWithState:objects:count:", &v33, v43, 16);
    }
    while (v12);
  }

  v27 = 0;
  v28 = &v27;
  v29 = 0x3032000000;
  v30 = sub_100018624;
  v31 = sub_100018534;
  v32 = objc_msgSend(a1[5], "_newCompanionConnection");
  objc_msgSend((id)v28[5], "resume");
  v24[0] = _NSConcreteStackBlock;
  v24[1] = 3221225472;
  v24[2] = sub_10004ED78;
  v24[3] = &unk_1000DC7B8;
  v25 = a1[7];
  v26 = &v27;
  v18 = objc_retainBlock(v24);
  if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 138412290;
    v42 = v10;
    _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_INFO, "Marking IDs as saved: %@", buf, 0xCu);
  }
  v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend((id)v28[5], "remoteObjectProxyWithErrorHandler:", v18));
  v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "allObjects"));
  v21[0] = _NSConcreteStackBlock;
  v21[1] = 3221225472;
  v21[2] = sub_10004EDF4;
  v21[3] = &unk_1000DC830;
  v22 = a1[7];
  v23 = &v27;
  objc_msgSend(v19, "setSavedArticleIdentifiers:withReply:", v20, v21);

  _Block_object_dispose(&v27, 8);
}

void sub_10004ED54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10004ED78(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;

  v3 = a2;
  if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
    sub_10007F68C();
  v4 = *(_QWORD *)(a1 + 32);
  if (v4)
    (*(void (**)(void))(v4 + 16))();
  objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), "invalidate");
  v5 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v6 = *(void **)(v5 + 40);
  *(_QWORD *)(v5 + 40) = 0;

}

void sub_10004EDF4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  v2 = *(_QWORD *)(a1 + 32);
  if (v2)
    (*(void (**)(void))(v2 + 16))();
  objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), "invalidate");
  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v4 = *(void **)(v3 + 40);
  *(_QWORD *)(v3 + 40) = 0;

}

void sub_10004EE40(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;

  v3 = a2;
  if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
    sub_10007F6F4();
  v4 = *(_QWORD *)(a1 + 32);
  if (v4)
    (*(void (**)(void))(v4 + 16))();
  objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), "invalidate");
  v5 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v6 = *(void **)(v5 + 40);
  *(_QWORD *)(v5 + 40) = 0;

}

void sub_10004EEBC(uint64_t a1)
{
  id v2;
  uint64_t v3;
  void *v4;
  int v5;
  id v6;

  if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_INFO))
  {
    v2 = objc_msgSend(*(id *)(a1 + 32), "count");
    v5 = 134217984;
    v6 = v2;
    _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_INFO, "%ld dates set…", (uint8_t *)&v5, 0xCu);
  }
  (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
  objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40), "invalidate");
  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
  v4 = *(void **)(v3 + 40);
  *(_QWORD *)(v3 + 40) = 0;

}

uint64_t sub_10004F18C(uint64_t a1, void *a2)
{
  return (*(uint64_t (**)(_QWORD, id))(*(_QWORD *)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32), objc_msgSend(a2, "CGContext"));
}

uint64_t sub_10004F31C(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 32);
  if (result)
    return (*(uint64_t (**)(void))(result + 16))();
  return result;
}

void sub_10004F48C(id a1)
{
  void *v1;
  double v2;
  double v3;
  void *v4;
  double v5;
  double v6;
  uint64_t v7;

  v1 = (void *)objc_claimAutoreleasedReturnValue(+[UIScreen mainScreen](UIScreen, "mainScreen"));
  objc_msgSend(v1, "bounds");
  v3 = v2;

  v4 = (void *)objc_claimAutoreleasedReturnValue(+[UIScreen mainScreen](UIScreen, "mainScreen"));
  objc_msgSend(v4, "bounds");
  v6 = v5;

  if (v3 >= v6)
    *(double *)&v7 = v3;
  else
    *(double *)&v7 = v6;
  qword_10010A588 = v7;
}

void sub_10004F538(id a1)
{
  void *v1;
  double v2;
  double v3;
  void *v4;
  double v5;
  double v6;
  uint64_t v7;

  v1 = (void *)objc_claimAutoreleasedReturnValue(+[UIScreen mainScreen](UIScreen, "mainScreen"));
  objc_msgSend(v1, "bounds");
  v3 = v2;

  v4 = (void *)objc_claimAutoreleasedReturnValue(+[UIScreen mainScreen](UIScreen, "mainScreen"));
  objc_msgSend(v4, "bounds");
  v6 = v5;

  if (v3 >= v6)
    *(double *)&v7 = v6;
  else
    *(double *)&v7 = v3;
  qword_10010A598 = v7;
}

void sub_10004FA1C(id a1)
{
  void *v1;
  double v2;
  double v3;
  void *v4;
  double v5;
  double v6;
  double v7;
  BOOL v8;

  if (+[FRMacros iPad](FRMacros, "iPad"))
  {
    v1 = (void *)objc_claimAutoreleasedReturnValue(+[UIScreen mainScreen](UIScreen, "mainScreen"));
    objc_msgSend(v1, "bounds");
    v3 = v2;

    v4 = (void *)objc_claimAutoreleasedReturnValue(+[UIScreen mainScreen](UIScreen, "mainScreen"));
    objc_msgSend(v4, "bounds");
    v6 = v5;

    if (v3 >= v6)
      v7 = v3;
    else
      v7 = v6;
    v8 = v7 == 1366.0;
  }
  else
  {
    v8 = 0;
  }
  byte_10010A5A8 = v8;
}

void sub_10004FAF0(id a1)
{
  double v1;
  id v2;

  v2 = (id)objc_claimAutoreleasedReturnValue(+[UIScreen mainScreen](UIScreen, "mainScreen"));
  objc_msgSend(v2, "scale");
  byte_10010A5D8 = v1 >= 2.0;

}

void sub_10004FB78(id a1)
{
  void *v1;
  double v2;
  double v3;
  void *v4;
  double v5;
  double v6;
  double v7;
  BOOL v8;

  if (+[FRMacros iPhone](FRMacros, "iPhone"))
  {
    v1 = (void *)objc_claimAutoreleasedReturnValue(+[UIScreen mainScreen](UIScreen, "mainScreen"));
    objc_msgSend(v1, "bounds");
    v3 = v2;

    v4 = (void *)objc_claimAutoreleasedReturnValue(+[UIScreen mainScreen](UIScreen, "mainScreen"));
    objc_msgSend(v4, "bounds");
    v6 = v5;

    if (v3 >= v6)
      v7 = v3;
    else
      v7 = v6;
    v8 = v7 < 568.0;
  }
  else
  {
    v8 = 0;
  }
  byte_10010A5E8 = v8;
}

void sub_10004FC4C(id a1)
{
  void *v1;
  double v2;
  double v3;
  void *v4;
  double v5;
  double v6;
  double v7;
  BOOL v8;

  if (+[FRMacros iPhone](FRMacros, "iPhone"))
  {
    v1 = (void *)objc_claimAutoreleasedReturnValue(+[UIScreen mainScreen](UIScreen, "mainScreen"));
    objc_msgSend(v1, "bounds");
    v3 = v2;

    v4 = (void *)objc_claimAutoreleasedReturnValue(+[UIScreen mainScreen](UIScreen, "mainScreen"));
    objc_msgSend(v4, "bounds");
    v6 = v5;

    if (v3 >= v6)
      v7 = v3;
    else
      v7 = v6;
    v8 = v7 <= 568.0;
  }
  else
  {
    v8 = 0;
  }
  byte_10010A5F8 = v8;
}

void sub_10004FD20(id a1)
{
  void *v1;
  double v2;
  double v3;
  void *v4;
  double v5;
  double v6;
  double v7;
  BOOL v8;

  if (+[FRMacros iPhone](FRMacros, "iPhone"))
  {
    v1 = (void *)objc_claimAutoreleasedReturnValue(+[UIScreen mainScreen](UIScreen, "mainScreen"));
    objc_msgSend(v1, "bounds");
    v3 = v2;

    v4 = (void *)objc_claimAutoreleasedReturnValue(+[UIScreen mainScreen](UIScreen, "mainScreen"));
    objc_msgSend(v4, "bounds");
    v6 = v5;

    if (v3 >= v6)
      v7 = v3;
    else
      v7 = v6;
    v8 = v7 == 568.0;
  }
  else
  {
    v8 = 0;
  }
  byte_10010A608 = v8;
}

void sub_10004FE54(id a1)
{
  void *v1;
  double v2;
  double v3;
  void *v4;
  double v5;
  double v6;
  double v7;
  BOOL v8;

  if (+[FRMacros iPhone](FRMacros, "iPhone"))
  {
    v1 = (void *)objc_claimAutoreleasedReturnValue(+[UIScreen mainScreen](UIScreen, "mainScreen"));
    objc_msgSend(v1, "bounds");
    v3 = v2;

    v4 = (void *)objc_claimAutoreleasedReturnValue(+[UIScreen mainScreen](UIScreen, "mainScreen"));
    objc_msgSend(v4, "bounds");
    v6 = v5;

    if (v3 >= v6)
      v7 = v3;
    else
      v7 = v6;
    v8 = v7 == 667.0;
  }
  else
  {
    v8 = 0;
  }
  byte_10010A618 = v8;
}

id sub_10004FF5C(uint64_t a1)
{
  id result;
  double v3;
  BOOL v4;

  result = (id)+[FRMacros iPhone](FRMacros, "iPhone");
  if ((_DWORD)result)
  {
    result = objc_msgSend(*(id *)(a1 + 32), "maxScreenSide");
    v4 = v3 <= 667.0;
  }
  else
  {
    v4 = 0;
  }
  byte_10010A628 = v4;
  return result;
}

void sub_10004FFF0(id a1)
{
  void *v1;
  double v2;
  double v3;
  void *v4;
  double v5;
  double v6;
  double v7;
  BOOL v8;

  if (+[FRMacros iPhone](FRMacros, "iPhone"))
  {
    v1 = (void *)objc_claimAutoreleasedReturnValue(+[UIScreen mainScreen](UIScreen, "mainScreen"));
    objc_msgSend(v1, "bounds");
    v3 = v2;

    v4 = (void *)objc_claimAutoreleasedReturnValue(+[UIScreen mainScreen](UIScreen, "mainScreen"));
    objc_msgSend(v4, "bounds");
    v6 = v5;

    if (v3 >= v6)
      v7 = v3;
    else
      v7 = v6;
    v8 = v7 == 736.0;
  }
  else
  {
    v8 = 0;
  }
  byte_10010A638 = v8;
}

id sub_1000500F8(uint64_t a1)
{
  id result;
  double v3;
  BOOL v4;

  result = (id)+[FRMacros iPhone](FRMacros, "iPhone");
  if ((_DWORD)result)
  {
    result = objc_msgSend(*(id *)(a1 + 32), "maxScreenSide");
    v4 = v3 <= 736.0;
  }
  else
  {
    v4 = 0;
  }
  byte_10010A648 = v4;
  return result;
}

id sub_1000501C0(uint64_t a1)
{
  id result;
  double v3;
  BOOL v4;

  result = (id)+[FRMacros iPhone](FRMacros, "iPhone");
  if ((_DWORD)result)
  {
    result = objc_msgSend(*(id *)(a1 + 32), "maxScreenSide");
    v4 = v3 == 896.0;
  }
  else
  {
    v4 = 0;
  }
  byte_10010A658 = v4;
  return result;
}

void sub_100050258(id a1)
{
  id v1;

  v1 = (id)objc_claimAutoreleasedReturnValue(+[UIDevice currentDevice](UIDevice, "currentDevice"));
  byte_10010A659 = objc_msgSend(v1, "_supportsForceTouch");

}

void sub_1000502D4(id a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  id v4;

  v1 = NFInternalBuild(a1);
  if ((v1 & 1) != 0)
  {
    v3 = NewsCoreUserDefaults(v1, v2);
    v4 = (id)objc_claimAutoreleasedReturnValue(v3);
    byte_10010A668 = objc_msgSend(v4, "BOOLForKey:", FCRunningUIAutomationTestsSharedPreferenceKey);

  }
  else
  {
    byte_10010A668 = 0;
  }
}

void sub_1000503B8(id a1)
{
  uint64_t v1;
  id v2;

  v2 = (id)objc_claimAutoreleasedReturnValue(+[UIScreen mainScreen](UIScreen, "mainScreen"));
  objc_msgSend(v2, "scale");
  qword_10010A678 = v1;

}

void sub_1000512C8(uint64_t a1)
{
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));
}

void sub_1000512D0(uint64_t a1)
{
  void *v2;
  void *v3;
  id v4;
  void *v5;
  NSMutableArray *v6;
  id v7;
  id v8;
  __int128 v9;
  id v10;
  uint64_t v11;
  void *i;
  void *v13;
  void *v14;
  unsigned int v15;
  id v16;
  NSObject *v17;
  uint64_t v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  __int128 v23;
  uint64_t v24;
  id v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  uint8_t buf[4];
  uint64_t v31;
  __int16 v32;
  id v33;
  _BYTE v34[128];

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "resourcesLock"));
  objc_msgSend(v2, "lock");

  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "fontsToRegister"));
  v4 = objc_msgSend(v3, "copy");

  v24 = a1;
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "resourcesLock"));
  objc_msgSend(v5, "unlock");

  v6 = objc_opt_new(NSMutableArray);
  v26 = 0u;
  v27 = 0u;
  v28 = 0u;
  v29 = 0u;
  v7 = v4;
  v8 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v26, v34, 16);
  if (v8)
  {
    v10 = v8;
    v11 = *(_QWORD *)v27;
    *(_QWORD *)&v9 = 134218242;
    v23 = v9;
    do
    {
      for (i = 0; i != v10; i = (char *)i + 1)
      {
        if (*(_QWORD *)v27 != v11)
          objc_enumerationMutation(v7);
        v13 = *(void **)(*((_QWORD *)&v26 + 1) + 8 * (_QWORD)i);
        v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "fileURL", v23));
        v25 = 0;
        v15 = +[FRFont registerFontWithURL:error:](FRFont, "registerFontWithURL:error:", v14, &v25);
        v16 = v25;

        if (v15)
        {
          -[NSMutableArray addObject:](v6, "addObject:", v13);
        }
        else
        {
          v17 = FRArticleLog;
          if (os_log_type_enabled((os_log_t)FRArticleLog, OS_LOG_TYPE_ERROR))
          {
            v18 = *(_QWORD *)(v24 + 32);
            *(_DWORD *)buf = v23;
            v31 = v18;
            v32 = 2114;
            v33 = v16;
            _os_log_error_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_ERROR, "%p failed to load font with error: %{public}@", buf, 0x16u);
          }
        }

      }
      v10 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v26, v34, 16);
    }
    while (v10);
  }

  dispatch_group_leave(*(dispatch_group_t *)(v24 + 40));
  v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(v24 + 32), "resourcesLock"));
  objc_msgSend(v19, "lock");

  v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(v24 + 32), "fontResources"));
  objc_msgSend(v20, "addObjectsFromArray:", v6);

  v21 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(v24 + 32), "fontsToRegister"));
  objc_msgSend(v21, "removeAllObjects");

  v22 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(v24 + 32), "resourcesLock"));
  objc_msgSend(v22, "unlock");

}

void sub_100051568(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  int v4;
  uint64_t v5;

  v2 = FRArticleLog;
  if (os_log_type_enabled((os_log_t)FRArticleLog, OS_LOG_TYPE_DEFAULT))
  {
    v3 = *(_QWORD *)(a1 + 32);
    v4 = 134217984;
    v5 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "%p did fetch embed configuration", (uint8_t *)&v4, 0xCu);
  }
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 40));
}

void sub_100051614(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  int v4;
  uint64_t v5;

  v2 = FRArticleLog;
  if (os_log_type_enabled((os_log_t)FRArticleLog, OS_LOG_TYPE_DEFAULT))
  {
    v3 = *(_QWORD *)(a1 + 32);
    v4 = 134217984;
    v5 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "%p did fetch linked content", (uint8_t *)&v4, 0xCu);
  }
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 40));
}

void sub_1000516C0(uint64_t a1)
{
  uint64_t v1;
  void *v3;
  id v4;

  v1 = *(_QWORD *)(a1 + 40);
  if (v1)
  {
    v4 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "context"));
    v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "error"));
    (*(void (**)(uint64_t, id, void *))(v1 + 16))(v1, v4, v3);

  }
}

void sub_100051A2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22)
{
  id *v22;
  uint64_t v23;

  objc_destroyWeak(v22);
  _Block_object_dispose(&a22, 8);
  objc_destroyWeak((id *)(v23 - 72));
  _Unwind_Resume(a1);
}

void sub_100051A58(uint64_t a1)
{
  id WeakRetained;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  id v8;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  v8 = WeakRetained;
  if (WeakRetained)
  {
    v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "loadingGroup"));
    v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "loadAssetsOnce"));
    v5 = objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "executeWithCompletionHandler:", *(_QWORD *)(a1 + 32)));
    v6 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
    v7 = *(void **)(v6 + 40);
    *(_QWORD *)(v6 + 40) = v5;

  }
  else
  {
    (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
  }

}

id sub_100051AE8(uint64_t a1)
{
  objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), "cancel");
  return objc_msgSend(*(id *)(a1 + 32), "cancel");
}

void sub_100052240(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  NSObject *v8;
  char *v9;
  uint64_t v10;
  id v11;
  void *v12;
  id v13;
  void *v14;
  void *v15;
  void *v16;
  id v17;
  void *v18;
  void *v19;
  void *v20;
  uint64_t v21;
  id v22;
  id v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  id v31;
  id v32;
  id v33;
  id v34;
  id v35;
  _QWORD block[5];
  id v37;
  id v38;
  id v39;
  id v40;
  id v41;
  _QWORD v42[5];
  id v43;
  uint8_t buf[4];
  uint64_t v45;

  v5 = a2;
  v6 = a3;
  v7 = v6;
  v8 = FRArticleLog;
  v9 = "";
  if (v5)
  {
    v35 = v6;
    if (os_log_type_enabled((os_log_t)FRArticleLog, OS_LOG_TYPE_DEFAULT))
    {
      v10 = *(_QWORD *)(a1 + 32);
      *(_DWORD *)buf = 134217984;
      v45 = v10;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "%p successfully downloaded Flint JSON", buf, 0xCu);
    }
    v11 = objc_alloc((Class)SXHostApplication);
    v12 = (void *)objc_claimAutoreleasedReturnValue(+[UIApplication sharedApplication](UIApplication, "sharedApplication"));
    v13 = objc_msgSend(v11, "initWithApplication:", v12);

    v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "headline"));
    v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "articleID"));
    v16 = (void *)objc_claimAutoreleasedReturnValue(+[NSURL nss_NewsURLForArticleID:](NSURL, "nss_NewsURLForArticleID:", v15));

    v17 = objc_alloc((Class)SXContext);
    v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "anfContent"));
    v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v18, "identifier"));
    v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "data"));
    v21 = *(_QWORD *)(a1 + 32);
    v43 = 0;
    v22 = objc_msgSend(v17, "initWithIdentifier:shareURL:JSONData:resourceDataSource:host:error:", v19, v16, v20, v21, v13, &v43);
    v23 = v43;

    v24 = 0;
    v25 = 0;
    if (!v23)
    {
      v26 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v22, "documentController"));
      v27 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v26, "requiredResourceURLs"));
      v42[0] = _NSConcreteStackBlock;
      v42[1] = 3221225472;
      v42[2] = sub_1000525C4;
      v42[3] = &unk_1000DB738;
      v42[4] = *(_QWORD *)(a1 + 32);
      v25 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v27, "fc_arrayByTransformingWithBlock:", v42));

      v28 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "resourceManager"));
      v29 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v28, "cachedResourcesWithIdentifiers:", v25));
      v24 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v29, "fc_dictionaryWithKeySelector:", "resourceID"));

    }
    v7 = v35;
    v9 = "{UIEdgeInsets=dddd}24@0:8d16" + 28;
  }
  else
  {
    if (os_log_type_enabled((os_log_t)FRArticleLog, OS_LOG_TYPE_ERROR))
      sub_10007F828(a1, (uint64_t)v7, v8);
    v23 = v7;
    v24 = 0;
    v25 = 0;
    v22 = 0;
  }
  block[0] = _NSConcreteStackBlock;
  block[1] = *((_QWORD *)v9 + 303);
  block[2] = sub_1000525D0;
  block[3] = &unk_1000DCB30;
  v30 = *(void **)(a1 + 40);
  block[4] = *(_QWORD *)(a1 + 32);
  v37 = v22;
  v38 = v23;
  v39 = v25;
  v40 = v24;
  v41 = v30;
  v31 = v24;
  v32 = v25;
  v33 = v23;
  v34 = v22;
  dispatch_async((dispatch_queue_t)&_dispatch_main_q, block);

}

id sub_1000525C4(uint64_t a1, uint64_t a2)
{
  return objc_msgSend(*(id *)(a1 + 32), "_resourceIDFromResourceURL:", a2);
}

uint64_t sub_1000525D0(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "context"));

  if (!v2)
  {
    objc_msgSend(*(id *)(a1 + 32), "setContext:", *(_QWORD *)(a1 + 40));
    objc_msgSend(*(id *)(a1 + 32), "setError:", *(_QWORD *)(a1 + 48));
    objc_msgSend(*(id *)(a1 + 32), "setRequiredResourceIDs:", *(_QWORD *)(a1 + 56));
    if (*(_QWORD *)(a1 + 64))
    {
      v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "resourcesLock"));
      objc_msgSend(v3, "lock");

      v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "resourcesByID"));
      objc_msgSend(v4, "addEntriesFromDictionary:", *(_QWORD *)(a1 + 64));

      v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "resourcesLock"));
      objc_msgSend(v5, "unlock");

    }
  }
  return (*(uint64_t (**)(_QWORD, BOOL))(*(_QWORD *)(a1 + 72) + 16))(*(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 40) != 0);
}

void sub_1000528E0(id *a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  id v14;
  id v15;
  void *v16;
  id v17;
  id v18;
  NSObject *v19;
  id v20;
  id v21;
  id v22;
  _QWORD v23[4];
  id v24;
  BOOL v25;
  uint8_t buf[4];
  id v27;
  __int16 v28;
  id v29;
  __int16 v30;
  id v31;
  __int16 v32;
  id v33;

  v5 = a3;
  v6 = a2;
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "allValues"));
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "fc_arrayByTransformingWithBlock:", &stru_1000DCB98));

  v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[4], "resourcesLock"));
  objc_msgSend(v9, "lock");

  v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[4], "fontResources"));
  objc_msgSend(v10, "removeAllObjects");

  v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[4], "resourcesByID"));
  objc_msgSend(v11, "addEntriesFromDictionary:", v6);

  v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[4], "fontsToRegister"));
  objc_msgSend(v12, "addObjectsFromArray:", v8);

  v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[4], "resourcesLock"));
  objc_msgSend(v13, "unlock");

  v14 = objc_msgSend(v8, "count");
  v15 = objc_msgSend(a1[5], "count");
  v16 = (void *)FRArticleLog;
  if (v14 != v15)
  {
    if (!os_log_type_enabled((os_log_t)FRArticleLog, OS_LOG_TYPE_ERROR))
      goto LABEL_6;
    v20 = a1[4];
    v19 = v16;
    v21 = objc_msgSend(v8, "count");
    v22 = objc_msgSend(a1[5], "count");
    *(_DWORD *)buf = 134218754;
    v27 = v20;
    v28 = 2048;
    v29 = v21;
    v30 = 2048;
    v31 = v22;
    v32 = 2112;
    v33 = v5;
    _os_log_error_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_ERROR, "%p failed to download %lu of %lu fonts with error: %@", buf, 0x2Au);
    goto LABEL_4;
  }
  if (os_log_type_enabled((os_log_t)FRArticleLog, OS_LOG_TYPE_DEFAULT))
  {
    v18 = a1[4];
    v17 = a1[5];
    v19 = v16;
    *(_DWORD *)buf = 134218240;
    v27 = v18;
    v28 = 2048;
    v29 = objc_msgSend(v17, "count");
    _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "%p successfully downloaded %lu fonts", buf, 0x16u);
LABEL_4:

  }
LABEL_6:
  v23[0] = _NSConcreteStackBlock;
  v23[1] = 3221225472;
  v23[2] = sub_100052BC4;
  v23[3] = &unk_1000DCBC0;
  v24 = a1[6];
  v25 = v14 == v15;
  dispatch_async((dispatch_queue_t)&_dispatch_main_q, v23);

}

id sub_100052B88(id a1, FCResource *a2)
{
  FCResource *v2;
  FCResource *v3;
  FCResource *v4;

  v2 = a2;
  if (-[FCResource isOnDisk](v2, "isOnDisk"))
    v3 = v2;
  else
    v3 = 0;
  v4 = v3;

  return v4;
}

uint64_t sub_100052BC4(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32), *(unsigned __int8 *)(a1 + 40));
}

uint64_t sub_100052BD8(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void sub_100052E00(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  void *v8;
  void *v9;
  id v10;
  void *v11;
  id v12;
  void *v13;
  uint64_t v14;
  NSObject *v15;
  uint64_t v16;
  NSObject *v17;
  id v18;
  void *v19;
  int v20;
  uint64_t v21;
  __int16 v22;
  id v23;
  __int16 v24;
  id v25;
  __int16 v26;
  id v27;

  v5 = a2;
  v6 = a3;
  +[NSThread isMainThread](NSThread, "isMainThread");
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "resourcesLock"));
  objc_msgSend(v7, "lock");

  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "resourcesByID"));
  objc_msgSend(v8, "addEntriesFromDictionary:", v5);

  v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "resourcesLock"));
  objc_msgSend(v9, "unlock");

  v10 = objc_msgSend(v5, "count");
  v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "requiredResourceIDs"));
  v12 = objc_msgSend(v11, "count");

  v13 = (void *)FRArticleLog;
  if (v10 == v12)
  {
    if (os_log_type_enabled((os_log_t)FRArticleLog, OS_LOG_TYPE_DEFAULT))
    {
      v14 = *(_QWORD *)(a1 + 32);
      v15 = v13;
      v20 = 134218240;
      v21 = v14;
      v22 = 2048;
      v23 = objc_msgSend(v5, "count");
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "%p successfully loaded %lu asset URLs", (uint8_t *)&v20, 0x16u);

    }
  }
  else if (os_log_type_enabled((os_log_t)FRArticleLog, OS_LOG_TYPE_ERROR))
  {
    v16 = *(_QWORD *)(a1 + 32);
    v17 = v13;
    v18 = objc_msgSend(v5, "count");
    v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "requiredResourceIDs"));
    v20 = 134218754;
    v21 = v16;
    v22 = 2048;
    v23 = v18;
    v24 = 2048;
    v25 = objc_msgSend(v19, "count");
    v26 = 2112;
    v27 = v6;
    _os_log_error_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_ERROR, "%p failed to load %lu of %lu fonts with error: %@", (uint8_t *)&v20, 0x2Au);

  }
  (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();

}

uint64_t sub_100053038(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void sub_1000532B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id sub_1000532DC(id a1, FCResource *a2)
{
  return -[FCResource assetHandle](a2, "assetHandle");
}

void sub_1000532E4(_QWORD *a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  id v6;
  id v7;
  void *v8;
  uint64_t v9;
  NSObject *v10;
  uint64_t v11;
  id v12;
  id v13;
  void *v14;
  int v15;
  uint64_t v16;
  __int16 v17;
  id v18;
  __int16 v19;
  id v20;
  __int16 v21;
  void *v22;

  v3 = a2;
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1[6] + 8) + 40), "allValues"));
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "fc_arrayByTransformingWithBlock:", &stru_1000DCC50));

  v6 = objc_msgSend(v5, "count");
  v7 = objc_msgSend(*(id *)(*(_QWORD *)(a1[6] + 8) + 40), "count");
  v8 = (void *)FRArticleLog;
  if (v6 != v7)
  {
    if (!os_log_type_enabled((os_log_t)FRArticleLog, OS_LOG_TYPE_ERROR))
      goto LABEL_6;
    v11 = a1[4];
    v10 = v8;
    v12 = objc_msgSend(v5, "count");
    v13 = objc_msgSend(*(id *)(*(_QWORD *)(a1[6] + 8) + 40), "count");
    v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "error"));
    v15 = 134218754;
    v16 = v11;
    v17 = 2048;
    v18 = v12;
    v19 = 2048;
    v20 = v13;
    v21 = 2112;
    v22 = v14;
    _os_log_error_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_ERROR, "%p failed to download %lu of %lu assets with error: %@", (uint8_t *)&v15, 0x2Au);

    goto LABEL_4;
  }
  if (os_log_type_enabled((os_log_t)FRArticleLog, OS_LOG_TYPE_DEFAULT))
  {
    v9 = a1[4];
    v10 = v8;
    v15 = 134218240;
    v16 = v9;
    v17 = 2048;
    v18 = objc_msgSend(v5, "count");
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "%p successfully downloaded %lu assets", (uint8_t *)&v15, 0x16u);
LABEL_4:

  }
LABEL_6:
  (*(void (**)(void))(a1[5] + 16))();

}

id sub_1000534F0(id a1, FCResource *a2)
{
  FCResource *v2;
  FCResource *v3;
  FCResource *v4;

  v2 = a2;
  if (-[FCResource isOnDisk](v2, "isOnDisk"))
    v3 = v2;
  else
    v3 = 0;
  v4 = v3;

  return v4;
}

void sub_100053710(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  id *v15;

  objc_destroyWeak(v15);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

uint64_t sub_100053730(uint64_t a1)
{
  _QWORD block[4];
  id v3;

  if (*(_QWORD *)(a1 + 32))
  {
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_1000537A4;
    block[3] = &unk_1000DAF28;
    v3 = *(id *)(a1 + 32);
    dispatch_async((dispatch_queue_t)&_dispatch_main_q, block);

  }
  return 0;
}

uint64_t sub_1000537A4(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void sub_1000537B0(uint64_t a1, void *a2)
{
  id v3;
  id WeakRetained;
  void *v5;
  id v6;
  void *v7;
  void *v8;
  id v9;
  id v10;
  uint64_t v11;
  void *i;
  void *v13;
  void *v14;
  void *v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  _BYTE v20[128];

  v3 = a2;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  v5 = WeakRetained;
  if (WeakRetained)
  {
    v6 = WeakRetained;
    if (objc_msgSend(v3, "status"))
    {
      (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
    }
    else
    {
      v15 = v6;
      v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableDictionary dictionary](NSMutableDictionary, "dictionary"));
      v16 = 0u;
      v17 = 0u;
      v18 = 0u;
      v19 = 0u;
      v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "fetchedObject"));
      v9 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v16, v20, 16);
      if (v9)
      {
        v10 = v9;
        v11 = *(_QWORD *)v17;
        do
        {
          for (i = 0; i != v10; i = (char *)i + 1)
          {
            if (*(_QWORD *)v17 != v11)
              objc_enumerationMutation(v8);
            v13 = *(void **)(*((_QWORD *)&v16 + 1) + 8 * (_QWORD)i);
            v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "identifier"));
            objc_msgSend(v7, "setObject:forKey:", v13, v14);

          }
          v10 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v16, v20, 16);
        }
        while (v10);
      }

      v6 = v15;
      objc_msgSend(v15, "setLinkedHeadlines:", v7);
      (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();

    }
  }
  else
  {
    (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
  }

}

void sub_100053AEC(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 56));
  _Unwind_Resume(a1);
}

void sub_100053B08(uint64_t a1)
{
  id WeakRetained;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  id v7;
  id v8;
  id v9;
  _QWORD v10[4];
  id v11;
  id v12;
  id v13;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 64));
  v3 = WeakRetained;
  if (WeakRetained)
  {
    v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "resourcesByID"));
    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "objectForKey:", *(_QWORD *)(a1 + 32)));

    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "assetHandle"));
    v7 = objc_msgSend(*(id *)(a1 + 40), "relativePriority");
    v10[0] = _NSConcreteStackBlock;
    v10[1] = 3221225472;
    v10[2] = sub_100053C2C;
    v10[3] = &unk_1000DCCF0;
    v11 = v5;
    v12 = *(id *)(a1 + 56);
    v13 = *(id *)(a1 + 48);
    v8 = v5;
    v9 = objc_msgSend(v6, "downloadIfNeededWithPriority:completion:", v7, v10);

  }
  else
  {
    (*(void (**)(void))(*(_QWORD *)(a1 + 48) + 16))();
  }

}

void sub_100053C2C(id *a1)
{
  _QWORD block[4];
  id v3;
  id v4;
  id v5;

  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_100053CC8;
  block[3] = &unk_1000DCCF0;
  v3 = a1[4];
  v4 = a1[5];
  v5 = a1[6];
  dispatch_async((dispatch_queue_t)&_dispatch_main_q, block);

}

void sub_100053CC8(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  id v4;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "fileURL"));

  if (v2)
  {
    v3 = *(_QWORD *)(a1 + 40);
    v4 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "fileURL"));
    (*(void (**)(uint64_t, id))(v3 + 16))(v3, v4);

  }
  else
  {
    (*(void (**)(void))(*(_QWORD *)(a1 + 48) + 16))();
  }
}

void sub_10005437C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,id location)
{
  uint64_t v33;

  _Block_object_dispose((const void *)(v33 - 200), 8);
  _Block_object_dispose((const void *)(v33 - 168), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1000543DC(_QWORD *a1)
{
  void *v2;
  uint64_t result;

  v2 = *(void **)(*(_QWORD *)(a1[5] + 8) + 40);
  if (v2)
    objc_msgSend(v2, "cancel");
  *(_BYTE *)(*(_QWORD *)(a1[6] + 8) + 24) = 1;
  result = a1[4];
  if (result)
    return (*(uint64_t (**)(uint64_t, _QWORD))(result + 16))(result, 0);
  return result;
}

void sub_100054438(uint64_t a1)
{
  id v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  id v8;
  _QWORD v9[4];
  id v10;
  id v11;

  if (!*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 72) + 8) + 24))
  {
    if ((*(_BYTE *)(a1 + 80) & 2) == 0)
    {
      v2 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "imageResourceResponseForFileURL:perserveColorSpace:withSize:andQuality:", *(_QWORD *)(a1 + 40), objc_msgSend(*(id *)(a1 + 48), "preserveColorspace"), *(_QWORD *)(a1 + 80), *(double *)(a1 + 88), *(double *)(a1 + 96)));
      if (!v2)
        goto LABEL_11;
      goto LABEL_10;
    }
    v2 = objc_alloc_init((Class)SXImageResourceResponse);
    v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "thumbnailImage"));
    if (!v3)
    {
      v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "thumbnailAssetHandle"));

      if (!v4)
        goto LABEL_9;
      v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "thumbnailAssetHandle"));
      v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "filePath"));
      v6 = (void *)objc_claimAutoreleasedReturnValue(+[UIImage imageWithContentsOfFile:](UIImage, "imageWithContentsOfFile:", v5));
      objc_msgSend(*(id *)(a1 + 32), "setThumbnailImage:", v6);

    }
LABEL_9:
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "thumbnailImage"));
    objc_msgSend(v2, "setImage:", v7);

    objc_msgSend(v2, "setImageQuality:", *(_QWORD *)(a1 + 80));
    if (!v2)
    {
LABEL_11:
      v9[0] = _NSConcreteStackBlock;
      v9[1] = 3221225472;
      v9[2] = sub_1000545EC;
      v9[3] = &unk_1000D97A8;
      v10 = *(id *)(a1 + 48);
      v11 = v2;
      v8 = v2;
      dispatch_async((dispatch_queue_t)&_dispatch_main_q, v9);

      goto LABEL_12;
    }
LABEL_10:
    objc_msgSend(*(id *)(a1 + 56), "addObject:", v2);
    goto LABEL_11;
  }
LABEL_12:
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 64));
}

void sub_1000545EC(uint64_t a1)
{
  void *v2;
  void (**v3)(id, _QWORD);

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "loadingBlock"));

  if (v2)
  {
    v3 = (void (**)(id, _QWORD))objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "loadingBlock"));
    v3[2](v3, *(_QWORD *)(a1 + 40));

  }
}

void sub_100054658(uint64_t a1)
{
  id WeakRetained;
  id v3;
  uint64_t v4;
  void *v5;
  _QWORD v6[4];
  id v7;
  uint64_t v8;
  id v9;
  id v10;
  id v11;
  __int128 v12;
  __int16 v13;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 88));
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_100054724;
  v6[3] = &unk_1000DCDE0;
  v13 = *(_WORD *)(a1 + 96);
  v3 = *(id *)(a1 + 32);
  v12 = *(_OWORD *)(a1 + 72);
  v4 = *(_QWORD *)(a1 + 40);
  v5 = *(void **)(a1 + 48);
  v7 = v3;
  v8 = v4;
  v9 = v5;
  v10 = *(id *)(a1 + 56);
  v11 = *(id *)(a1 + 64);
  FCPerformIfNonNil(WeakRetained, v6);

}

void sub_100054724(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  void *v6;
  BOOL v7;
  void *v8;
  id v9;
  id v10;
  uint64_t v11;
  void *v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  _QWORD v18[5];
  id v19;
  uint64_t v20;
  id v21;
  id v22;
  id v23;
  uint64_t v24;

  v3 = a2;
  v4 = v3;
  if (*(_BYTE *)(a1 + 88) && !*(_BYTE *)(a1 + 89))
  {
    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "resourcesByID"));
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "objectForKey:", *(_QWORD *)(a1 + 32)));

    if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 72) + 8) + 24))
      v7 = 1;
    else
      v7 = v6 == 0;
    if (v7)
    {
      dispatch_group_leave(*(dispatch_group_t *)(a1 + 64));
    }
    else
    {
      v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "assetHandle"));
      v9 = objc_msgSend(*(id *)(a1 + 40), "relativePriority");
      v18[0] = _NSConcreteStackBlock;
      v18[1] = 3221225472;
      v18[2] = sub_1000548B4;
      v18[3] = &unk_1000DCDB8;
      v18[4] = v4;
      v10 = v6;
      v11 = *(_QWORD *)(a1 + 40);
      v12 = *(void **)(a1 + 48);
      v19 = v10;
      v20 = v11;
      v13 = v12;
      v14 = *(_QWORD *)(a1 + 72);
      v21 = v13;
      v24 = v14;
      v22 = *(id *)(a1 + 56);
      v23 = *(id *)(a1 + 64);
      v15 = objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "downloadIfNeededWithPriority:completion:", v9, v18));
      v16 = *(_QWORD *)(*(_QWORD *)(a1 + 80) + 8);
      v17 = *(void **)(v16 + 40);
      *(_QWORD *)(v16 + 40) = v15;

      objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 80) + 8) + 40), "setRelativePriority:", objc_msgSend(*(id *)(a1 + 40), "relativePriority"));
    }

  }
  else
  {
    dispatch_group_leave(*(dispatch_group_t *)(a1 + 64));
  }

}

void sub_1000548B4(uint64_t a1)
{
  void *v2;
  id v3;
  uint64_t v4;
  void *v5;
  id v6;
  uint64_t v7;
  _QWORD v8[4];
  id v9;
  uint64_t v10;
  id v11;
  id v12;
  id v13;
  uint64_t v14;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "operationQueue"));
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_10005497C;
  v8[3] = &unk_1000DCD90;
  v3 = *(id *)(a1 + 40);
  v4 = *(_QWORD *)(a1 + 48);
  v5 = *(void **)(a1 + 56);
  v9 = v3;
  v10 = v4;
  v6 = v5;
  v7 = *(_QWORD *)(a1 + 80);
  v11 = v6;
  v14 = v7;
  v12 = *(id *)(a1 + 64);
  v13 = *(id *)(a1 + 72);
  objc_msgSend(v2, "addOperationWithBlock:", v8);

}

void sub_10005497C(uint64_t a1)
{
  id v2;
  uint64_t v3;
  void *v4;
  void *v5;
  void *v6;
  id v7;
  void *v8;
  id v9;
  _QWORD v10[4];
  id v11;
  id v12;

  v2 = *(id *)(a1 + 32);
  if ((objc_msgSend(v2, "isOnDisk") & 1) == 0)
  {
    v3 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "fallbackResourceForImageRequest:originalResource:", *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 32)));

    v2 = (id)v3;
  }
  if (!*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 72) + 8) + 24))
  {
    v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "fileURL"));

    if (v4)
    {
      v5 = *(void **)(a1 + 40);
      v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "fileURL"));
      v7 = objc_msgSend(*(id *)(a1 + 48), "preserveColorspace");
      objc_msgSend(*(id *)(a1 + 48), "size");
      v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "imageResourceResponseForFileURL:perserveColorSpace:withSize:andQuality:", v6, v7, 4));

      if (v8)
        objc_msgSend(*(id *)(a1 + 56), "addObject:", v8);
      v10[0] = _NSConcreteStackBlock;
      v10[1] = 3221225472;
      v10[2] = sub_100054AD0;
      v10[3] = &unk_1000D97A8;
      v11 = *(id *)(a1 + 48);
      v12 = v8;
      v9 = v8;
      dispatch_async((dispatch_queue_t)&_dispatch_main_q, v10);

    }
  }
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 64));

}

void sub_100054AD0(uint64_t a1)
{
  void *v2;
  void (**v3)(id, _QWORD);

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "loadingBlock"));

  if (v2)
  {
    v3 = (void (**)(id, _QWORD))objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "loadingBlock"));
    v3[2](v3, *(_QWORD *)(a1 + 40));

  }
}

uint64_t sub_100054B3C(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 40);
  if (result)
    return (*(uint64_t (**)(uint64_t, _QWORD))(result + 16))(result, *(_QWORD *)(a1 + 32));
  return result;
}

BOOL sub_100054FA0(id a1, FCResource *a2)
{
  return -[FCResource isOnDisk](a2, "isOnDisk");
}

uint64_t sub_100055560(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  objc_msgSend(*(id *)(a1 + 32), "setPresenting:", 0);
  result = *(_QWORD *)(a1 + 40);
  if (result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(result + 16))(result, a2);
  return result;
}

id FRZoomAnimationTimingFunction()
{
  if (qword_10010A690 != -1)
    dispatch_once(&qword_10010A690, &stru_1000DCE90);
  return (id)qword_10010A688;
}

void sub_10005560C(id a1)
{
  double v1;
  double v2;
  double v3;
  double v4;
  uint64_t v5;
  void *v6;

  LODWORD(v1) = 1051260355;
  LODWORD(v3) = 1045220557;
  LODWORD(v2) = 0;
  LODWORD(v4) = 1.0;
  v5 = objc_claimAutoreleasedReturnValue(+[CAMediaTimingFunction functionWithControlPoints::::](CAMediaTimingFunction, "functionWithControlPoints::::", v1, v2, v3, v4));
  v6 = (void *)qword_10010A688;
  qword_10010A688 = v5;

}

void sub_100055690(id a1)
{
  id v1;

  v1 = (id)objc_claimAutoreleasedReturnValue(+[NSUserDefaults standardUserDefaults](NSUserDefaults, "standardUserDefaults"));
  byte_10010A698 = objc_msgSend(v1, "BOOLForKey:", CFSTR("change_without_restarting"));

}

void sub_100055770(id a1)
{
  uint64_t v1;
  void *v2;
  id v3;

  v3 = (id)objc_claimAutoreleasedReturnValue(+[NSUserDefaults standardUserDefaults](NSUserDefaults, "standardUserDefaults"));
  v1 = objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "stringForKey:", CFSTR("animation_type")));
  v2 = (void *)qword_10010A6A8;
  qword_10010A6A8 = v1;

}

void sub_100055850(id a1)
{
  id v1;

  v1 = (id)objc_claimAutoreleasedReturnValue(+[NSUserDefaults standardUserDefaults](NSUserDefaults, "standardUserDefaults"));
  byte_10010A6B8 = objc_msgSend(v1, "BOOLForKey:", CFSTR("override_duration"));

}

void sub_100055944(id a1)
{
  float v1;
  id v2;

  v2 = (id)objc_claimAutoreleasedReturnValue(+[NSUserDefaults standardUserDefaults](NSUserDefaults, "standardUserDefaults"));
  objc_msgSend(v2, "floatForKey:", CFSTR("animation_duration"));
  byte_10010A6C8 = (float)(v1 / 10.0) != 0.0;

}

void sub_100055A28(id a1)
{
  id v1;

  v1 = (id)objc_claimAutoreleasedReturnValue(+[NSUserDefaults standardUserDefaults](NSUserDefaults, "standardUserDefaults"));
  byte_10010A6D8 = objc_msgSend(v1, "BOOLForKey:", CFSTR("animation_old_timing_enabled"));

}

void sub_100055AFC(id a1)
{
  id v1;

  v1 = (id)objc_claimAutoreleasedReturnValue(+[NSUserDefaults standardUserDefaults](NSUserDefaults, "standardUserDefaults"));
  byte_10010A6E8 = objc_msgSend(v1, "BOOLForKey:", CFSTR("animation_prewarm_animation_disabled"));

}

void sub_100055BD0(id a1)
{
  id v1;

  v1 = (id)objc_claimAutoreleasedReturnValue(+[NSUserDefaults standardUserDefaults](NSUserDefaults, "standardUserDefaults"));
  byte_10010A6F8 = objc_msgSend(v1, "BOOLForKey:", CFSTR("animation_synchronously_load_headerimage"));

}

void sub_100055CA4(id a1)
{
  id v1;

  v1 = (id)objc_claimAutoreleasedReturnValue(+[NSUserDefaults standardUserDefaults](NSUserDefaults, "standardUserDefaults"));
  byte_10010A708 = objc_msgSend(v1, "BOOLForKey:", CFSTR("animation_alternative_feedscale_disabled"));

}

void sub_100055F1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100055F34(uint64_t a1, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  void *v5;
  FRCardConfigurationCacheFontItem *v6;
  uint64_t v7;
  void *v8;
  id v9;

  v9 = a2;
  v3 = objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "objectForKey:", *(_QWORD *)(a1 + 32)));
  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v5 = *(void **)(v4 + 40);
  *(_QWORD *)(v4 + 40) = v3;

  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40))
  {
    v6 = objc_alloc_init(FRCardConfigurationCacheFontItem);
    v7 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
    v8 = *(void **)(v7 + 40);
    *(_QWORD *)(v7 + 40) = v6;

    objc_msgSend(v9, "setObject:forKey:", *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), *(_QWORD *)(a1 + 32));
  }

}

void sub_1000574C8(id a1, UIAlertAction *a2)
{
  UIAlertAction *v2;

  v2 = a2;
  exit(0);
}

void sub_10005768C(uint64_t a1)
{
  uint64_t v1;
  void *v2;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  v2 = *(void **)(v1 + 40);
  *(_QWORD *)(v1 + 40) = 0;

}

id sub_1000576A0(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "showAppUnsupportedAlert");
}

void sub_1000576A8(id a1)
{
  id v1;

  v1 = (id)objc_claimAutoreleasedReturnValue(+[FCAppleAccount sharedAccount](FCAppleAccount, "sharedAccount"));
  objc_msgSend(v1, "loadStoreFrontWithCompletionHandler:", &stru_1000DD040);

}

void sub_1000576E4(id a1)
{
  NSObject *v1;
  uint8_t v2[16];

  v1 = FCDefaultLog;
  if (os_log_type_enabled(FCDefaultLog, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v2 = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_DEFAULT, "Did finish loading the storefront", v2, 2u);
  }
}

void sub_1000578B8(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  id v6;
  _QWORD v7[4];
  id v8;

  v3 = a2;
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "cloudContext"));
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "appConfigurationManager"));
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_100057960;
  v7[3] = &unk_1000DD068;
  v8 = v3;
  v6 = v3;
  objc_msgSend(v5, "fetchAppConfigurationIfNeededWithCompletion:", v7);

}

uint64_t sub_100057960(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

id sub_10005796C(uint64_t a1, uint64_t a2)
{
  return _objc_msgSend(*(id *)(a1 + 32), "prewarmWithCompletion:", a2);
}

id sub_100057CAC(uint64_t a1)
{
  objc_msgSend(*(id *)(a1 + 32), "_application:openURL:options:animated:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(unsigned __int8 *)(a1 + 72));
  return _objc_msgSend(*(id *)(a1 + 64), "removeFromSuperview");
}

void sub_100057F7C(uint64_t a1)
{
  id v2;

  v2 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "urlRouterManager"));
  objc_msgSend(v2, "handleOpenURL:options:analyticsReferral:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56));

}

void sub_100058088(uint64_t a1)
{
  void *v1;
  id v2;

  v2 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "cloudContext"));
  v1 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "subscriptionController"));
  objc_msgSend(v1, "refreshAndNotifyAboutSubscribedTags");

}

void sub_1000580D0(uint64_t a1)
{
  id WeakRetained;
  void *v3;
  NSObject *v4;
  unsigned int v5;
  uint64_t state64;
  uint8_t buf[4];
  unsigned int v8;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (WeakRetained)
  {
    state64 = 0;
    notify_get_state(*(_DWORD *)(*(_QWORD *)(a1 + 32) + 8), &state64);
    objc_msgSend(WeakRetained, "setIsDeviceLocked:", state64 != 0);
    v3 = (void *)FCDefaultLog;
    if (os_log_type_enabled(FCDefaultLog, OS_LOG_TYPE_DEFAULT))
    {
      v4 = v3;
      v5 = objc_msgSend(WeakRetained, "isDeviceLocked");
      *(_DWORD *)buf = 67109120;
      v8 = v5;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "lock state change, isDeviceLocked=%d", buf, 8u);

    }
  }

}

void sub_100058714(id a1, NSArray *a2)
{
  NSArray *v2;
  id v3;
  __int128 v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  void *i;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  unsigned int v13;
  void *v14;
  NSObject *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  void *v27;
  uint8_t buf[4];
  void *v29;
  _BYTE v30[128];

  v2 = a2;
  v23 = 0u;
  v24 = 0u;
  v25 = 0u;
  v26 = 0u;
  v3 = -[NSArray countByEnumeratingWithState:objects:count:](v2, "countByEnumeratingWithState:objects:count:", &v23, v30, 16);
  if (v3)
  {
    v5 = v3;
    v6 = *(_QWORD *)v24;
    v7 = FCNotificationMarketingCategory;
    *(_QWORD *)&v4 = 138412290;
    v22 = v4;
    do
    {
      for (i = 0; i != v5; i = (char *)i + 1)
      {
        if (*(_QWORD *)v24 != v6)
          objc_enumerationMutation(v2);
        v9 = *(void **)(*((_QWORD *)&v23 + 1) + 8 * (_QWORD)i);
        v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "request", v22));
        v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "content"));
        v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "categoryIdentifier"));
        v13 = objc_msgSend(v12, "isEqualToString:", v7);

        if (v13)
        {
          v14 = (void *)FCPushNotificationsLog;
          if (os_log_type_enabled(FCPushNotificationsLog, OS_LOG_TYPE_INFO))
          {
            v15 = v14;
            v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "request"));
            v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v16, "identifier"));
            *(_DWORD *)buf = v22;
            v29 = v17;
            _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_INFO, "Removing notification with ID: %@", buf, 0xCu);

          }
          v18 = (void *)objc_claimAutoreleasedReturnValue(+[UNUserNotificationCenter currentNotificationCenter](UNUserNotificationCenter, "currentNotificationCenter"));
          v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "request"));
          v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v19, "identifier"));
          v27 = v20;
          v21 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v27, 1));
          objc_msgSend(v18, "removeDeliveredNotificationsWithIdentifiers:", v21);

        }
      }
      v5 = -[NSArray countByEnumeratingWithState:objects:count:](v2, "countByEnumeratingWithState:objects:count:", &v23, v30, 16);
    }
    while (v5);
  }

}

void sub_100058948(uint64_t a1, uint64_t a2)
{
  void *v4;
  _QWORD v5[4];
  id v6;
  uint64_t v7;

  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "todayAgent"));
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_1000589D8;
  v5[3] = &unk_1000DD180;
  v6 = *(id *)(a1 + 40);
  v7 = a2;
  objc_msgSend(v4, "serviceWidgetIfNeededWithCompletion:", v5);

}

uint64_t sub_1000589D8(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40));
}

void sub_1000589E8(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  void *v6;
  unsigned int v7;
  NSObject *v8;
  void *v9;
  void *v10;
  id v11;
  uint64_t v12;
  NSObject *v13;
  void *v14;
  void *v15;
  void *v16;
  unsigned int v17;
  NSObject *v18;
  void *v19;
  void *v20;
  id v21;
  uint64_t v22;
  _QWORD v23[4];
  id v24;
  uint64_t *v25;
  uint64_t *v26;
  _QWORD v27[5];
  NSObject *v28;
  uint64_t *v29;
  uint64_t *v30;
  _QWORD v31[4];
  NSObject *v32;
  uint64_t *v33;
  uint64_t *v34;
  _QWORD v35[7];
  uint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;

  v3 = a2;
  if (!objc_msgSend(*(id *)(a1 + 32), "safeIsAppRunningInBackground")
    || !objc_msgSend(v3, "wasHandled"))
  {
    goto LABEL_8;
  }
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "cloudContext"));
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "readingList"));
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "recordZoneIDs"));
  v7 = objc_msgSend(v5, "isBackedByAnyRecordZoneIDsInSet:", v6);

  if (!v7)
  {
    v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "cloudContext"));
    v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "subscriptionList"));
    v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "recordZoneIDs"));
    v17 = objc_msgSend(v15, "isBackedByAnyRecordZoneIDsInSet:", v16);

    if (v17)
    {
      v40 = 0;
      v41 = &v40;
      v42 = 0x2020000000;
      v43 = 1;
      v36 = 0;
      v37 = &v36;
      v38 = 0x2020000000;
      v39 = 1;
      v18 = dispatch_group_create();
      dispatch_group_enter(v18);
      v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "cloudContext"));
      v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v19, "subscriptionList"));
      v27[0] = _NSConcreteStackBlock;
      v27[1] = 3221225472;
      v27[2] = sub_100058ED0;
      v27[3] = &unk_1000DD270;
      v27[4] = *(_QWORD *)(a1 + 32);
      v29 = &v40;
      v30 = &v36;
      v8 = v18;
      v28 = v8;
      objc_msgSend(v20, "syncWithCompletion:", v27);

      v21 = &_dispatch_main_q;
      v23[0] = _NSConcreteStackBlock;
      v23[1] = 3221225472;
      v23[2] = sub_100058FA0;
      v23[3] = &unk_1000DD220;
      v25 = &v40;
      v26 = &v36;
      v22 = *(_QWORD *)(a1 + 48);
      v24 = *(id *)(a1 + 40);
      FCDispatchGroupNotifyWithTimeout(v8, &_dispatch_main_q, v22, v23);

      v13 = v28;
      goto LABEL_7;
    }
LABEL_8:
    (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
    goto LABEL_9;
  }
  v40 = 0;
  v41 = &v40;
  v42 = 0x2020000000;
  v43 = 1;
  v36 = 0;
  v37 = &v36;
  v38 = 0x2020000000;
  v39 = 1;
  v8 = dispatch_group_create();
  dispatch_group_enter(v8);
  v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "cloudContext"));
  v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "readingHistory"));
  v35[0] = _NSConcreteStackBlock;
  v35[1] = 3221225472;
  v35[2] = sub_100058D68;
  v35[3] = &unk_1000DD1F8;
  v35[4] = *(_QWORD *)(a1 + 32);
  v35[5] = &v40;
  v35[6] = &v36;
  objc_msgSend(v10, "syncWithCompletion:", v35);

  v11 = &_dispatch_main_q;
  v31[0] = _NSConcreteStackBlock;
  v31[1] = 3221225472;
  v31[2] = sub_100058E14;
  v31[3] = &unk_1000DD220;
  v33 = &v40;
  v34 = &v36;
  v12 = *(_QWORD *)(a1 + 48);
  v32 = *(id *)(a1 + 40);
  FCDispatchGroupNotifyWithTimeout(v8, &_dispatch_main_q, v12, v31);

  v13 = v32;
LABEL_7:

  _Block_object_dispose(&v36, 8);
  _Block_object_dispose(&v40, 8);
LABEL_9:

}

void sub_100058D40(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 160), 8);
  _Block_object_dispose((const void *)(v1 - 128), 8);
  _Unwind_Resume(a1);
}

void sub_100058D68(uint64_t a1, uint64_t a2)
{
  void *v3;
  void *v4;
  _QWORD v5[5];

  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = a2;
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "cloudContext"));
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "readingList"));

  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_100058E04;
  v5[3] = &unk_1000DD1D0;
  v5[4] = *(_QWORD *)(a1 + 48);
  objc_msgSend(v4, "syncWithCompletion:", v5);

}

uint64_t sub_100058E04(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(result + 32) + 8) + 24) = a2;
  return result;
}

uint64_t sub_100058E14(_QWORD *a1)
{
  void *v2;
  void *v3;
  void *v4;
  uint64_t Results;
  uint64_t v6;
  _BOOL8 ResultFromFCFetchResult;

  v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", *(_QWORD *)(*(_QWORD *)(a1[5] + 8) + 24)));
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", *(_QWORD *)(*(_QWORD *)(a1[6] + 8) + 24)));
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSSet setWithObjects:](NSSet, "setWithObjects:", v2, v3, 0));
  Results = FCAggregateFetchResultWithFetchResults();

  v6 = a1[4];
  ResultFromFCFetchResult = UIBackgroundFetchResultFromFCFetchResult(Results);
  return (*(uint64_t (**)(uint64_t, _BOOL8))(v6 + 16))(v6, ResultFromFCFetchResult);
}

void sub_100058ED0(uint64_t a1, uint64_t a2)
{
  void *v3;
  void *v4;
  _QWORD v5[4];
  id v6;
  uint64_t v7;

  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24) = a2;
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "cloudContext"));
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "subscriptionController"));
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_100058F8C;
  v5[3] = &unk_1000DD248;
  v7 = *(_QWORD *)(a1 + 56);
  v6 = *(id *)(a1 + 40);
  objc_msgSend(v4, "fetchSubscribedTagsWithCallbackQueue:preferCache:completion:", &_dispatch_main_q, 0, v5);

}

void sub_100058F8C(uint64_t a1)
{
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = 0;
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));
}

uint64_t sub_100058FA0(_QWORD *a1)
{
  void *v2;
  void *v3;
  void *v4;
  uint64_t Results;
  uint64_t v6;
  _BOOL8 ResultFromFCFetchResult;

  v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", *(_QWORD *)(*(_QWORD *)(a1[5] + 8) + 24)));
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", *(_QWORD *)(*(_QWORD *)(a1[6] + 8) + 24)));
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSSet setWithObjects:](NSSet, "setWithObjects:", v2, v3, 0));
  Results = FCAggregateFetchResultWithFetchResults();

  v6 = a1[4];
  ResultFromFCFetchResult = UIBackgroundFetchResultFromFCFetchResult(Results);
  return (*(uint64_t (**)(uint64_t, _BOOL8))(v6 + 16))(v6, ResultFromFCFetchResult);
}

void sub_100059458(uint64_t a1, _BOOL8 a2)
{
  NSObject *v4;
  void *v5;
  NSNumber *v6;
  void *v7;
  uint8_t v8[16];

  v4 = FRBackgroundFetchLog;
  if (os_log_type_enabled((os_log_t)FRBackgroundFetchLog, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v8 = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "did run bridged backround fetch", v8, 2u);
  }
  v5 = *(void **)(a1 + 32);
  v6 = +[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", FCFetchResultFromUIBackgroundFetchResult(a2));
  v7 = (void *)objc_claimAutoreleasedReturnValue(v6);
  objc_msgSend(v5, "addObject:", v7);

  dispatch_group_leave(*(dispatch_group_t *)(a1 + 40));
}

void sub_10005950C(uint64_t a1, _BOOL8 a2)
{
  NSObject *v4;
  void *v5;
  NSNumber *v6;
  void *v7;
  uint8_t v8[16];

  v4 = FRBackgroundFetchLog;
  if (os_log_type_enabled((os_log_t)FRBackgroundFetchLog, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v8 = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "did run legacy backround fetch", v8, 2u);
  }
  v5 = *(void **)(a1 + 32);
  v6 = +[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", FCFetchResultFromUIBackgroundFetchResult(a2));
  v7 = (void *)objc_claimAutoreleasedReturnValue(v6);
  objc_msgSend(v5, "addObject:", v7);

  dispatch_group_leave(*(dispatch_group_t *)(a1 + 40));
}

uint64_t sub_1000595C0(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t Results;
  _BOOL8 ResultFromFCFetchResult;
  uint8_t v7[16];

  v2 = FRBackgroundFetchLog;
  if (os_log_type_enabled((os_log_t)FRBackgroundFetchLog, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v7 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "finished performing background fetch", v7, 2u);
  }
  v3 = *(_QWORD *)(a1 + 40);
  Results = FCAggregateFetchResultWithFetchResults(*(_QWORD *)(a1 + 32));
  ResultFromFCFetchResult = UIBackgroundFetchResultFromFCFetchResult(Results);
  return (*(uint64_t (**)(uint64_t, _BOOL8))(v3 + 16))(v3, ResultFromFCFetchResult);
}

void sub_100059770(uint64_t a1)
{
  unsigned __int8 v2;
  id v3;

  v3 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "windowScene"));
  if (objc_msgSend(v3, "activationState") == (id)2)
    v2 = 1;
  else
    v2 = objc_msgSend(*(id *)(a1 + 40), "isDeviceLocked");
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24) = v2;

}

NSArray *__cdecl sub_100059820(FRAppDelegate *self, SEL a2)
{
  return self->_bundleAssemblies;
}

NSArray *__cdecl sub_100059844(FRAppDelegate *self, SEL a2)
{
  return self->_assemblies;
}

void sub_100059E34(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  NSObject *v7;
  uint64_t v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  id v13;
  NSObject *v14;
  void *v15;
  void *v16;
  void *v17;
  unsigned __int8 v18;
  NSObject *v19;
  id v20;
  void *v21;
  uint64_t v22;
  _QWORD v23[5];
  id v24;
  uint8_t buf[4];
  id v26;

  v5 = a2;
  v6 = a3;
  if (v6)
  {
    v7 = FRPresubscribeServiceLog;
    if (os_log_type_enabled((os_log_t)FRPresubscribeServiceLog, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Not presubscribing because we failed to fetch the app config", buf, 2u);
    }
    v8 = *(_QWORD *)(a1 + 40);
    if (v8)
      (*(void (**)(uint64_t, _QWORD))(v8 + 16))(v8, 0);
  }
  else
  {
    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "notificationsConfig"));
    v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "preSubscribedNotificationsChannelIDs"));
    v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSSet setWithArray:](NSSet, "setWithArray:", v10));

    v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "presubscribedFeedIDs"));
    v13 = objc_msgSend(v12, "mutableCopy");

    v14 = FRPresubscribeServiceLog;
    if (os_log_type_enabled((os_log_t)FRPresubscribeServiceLog, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138543362;
      v26 = v13;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "Presubscribing to app config feed IDs %{public}@", buf, 0xCu);
    }
    v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "topStoriesConfig"));
    v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v15, "channelID"));

    v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "topStoriesConfig"));
    if (objc_msgSend(v17, "isPromotingEnabled") && objc_msgSend(v16, "length"))
    {
      v18 = objc_msgSend(v13, "containsObject:", v16);

      if ((v18 & 1) == 0)
      {
        objc_msgSend(v13, "insertObject:atIndex:", v16, 0);
        v19 = FRPresubscribeServiceLog;
        if (os_log_type_enabled((os_log_t)FRPresubscribeServiceLog, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 138543362;
          v26 = v16;
          _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "Presubscribing to TS, with ID %{public}@", buf, 0xCu);
        }
      }
    }
    else
    {

    }
    v20 = objc_msgSend(v13, "count");
    v21 = *(void **)(a1 + 32);
    if (v20)
    {
      v23[0] = _NSConcreteStackBlock;
      v23[1] = 3221225472;
      v23[2] = sub_10005A120;
      v23[3] = &unk_1000D9AA8;
      v23[4] = v21;
      v24 = *(id *)(a1 + 40);
      objc_msgSend(v21, "_subscribeToFeedIDs:preSubscribedNotificationsChannelIDs:withCompletion:", v13, v11, v23);

    }
    else
    {
      objc_msgSend(*(id *)(a1 + 32), "_setHasUserBeenPresubscribed:", 1);
      v22 = *(_QWORD *)(a1 + 40);
      if (v22)
        (*(void (**)(uint64_t, _QWORD))(v22 + 16))(v22, 0);
    }

  }
}

uint64_t sub_10005A120(uint64_t a1)
{
  uint64_t result;

  objc_msgSend(*(id *)(a1 + 32), "_setHasUserBeenPresubscribed:", 1);
  result = *(_QWORD *)(a1 + 40);
  if (result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(result + 16))(result, 1);
  return result;
}

void sub_10005A2A4(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  uint64_t v5;
  id v6;
  _QWORD v7[4];
  id v8;
  uint64_t v9;

  v6 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "nf_objectsForKeysWithoutMarker:", *(_QWORD *)(a1 + 32)));
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_10005A340;
  v7[3] = &unk_1000DD338;
  v3 = *(id *)(a1 + 40);
  v4 = *(_QWORD *)(a1 + 48);
  v8 = v3;
  v9 = v4;
  objc_msgSend(v6, "enumerateObjectsUsingBlock:", v7);
  v5 = *(_QWORD *)(a1 + 56);
  if (v5)
    (*(void (**)(void))(v5 + 16))();

}

void sub_10005A340(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  id v6;
  void *v7;
  unsigned int v8;
  void *v9;
  void *v10;
  void *v11;
  unsigned __int8 v12;
  void *v13;
  _BOOL4 v14;
  NSObject *v15;
  void *v16;
  NSObject *v17;
  void *v18;
  int v19;
  void *v20;

  v3 = a2;
  v4 = *(void **)(a1 + 32);
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "identifier"));
  v6 = objc_msgSend(v4, "containsObject:", v5);

  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "subscriptionController"));
  v8 = objc_msgSend(v7, "hasSubscriptionToTag:", v3);

  if (v8)
  {
    if (!(_DWORD)v6)
      goto LABEL_12;
    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "subscriptionController"));
    objc_msgSend(v9, "setNotificationsEnabled:forTag:error:", 1, v3, 0);

  }
  else
  {
    v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "subscriptionController"));
    objc_msgSend(v10, "addSubscriptionToTag:notificationsEnabled:error:", v3, v6, 0);

    if (!(_DWORD)v6)
      goto LABEL_12;
  }
  v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "subscriptionController"));
  v12 = objc_msgSend(v11, "hasNotificationsEnabledForTag:", v3);

  v13 = (void *)FRPresubscribeServiceLog;
  v14 = os_log_type_enabled((os_log_t)FRPresubscribeServiceLog, OS_LOG_TYPE_DEFAULT);
  if ((v12 & 1) == 0)
  {
    if (v14)
    {
      v17 = v13;
      v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "identifier"));
      v19 = 138543362;
      v20 = v18;
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "Enabling notifications for tagID: %{public}@ failed. We will retry.", (uint8_t *)&v19, 0xCu);

    }
    v15 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "notificationManager"));
    -[NSObject autoEnableNotificationsForPreSubscribedChannels](v15, "autoEnableNotificationsForPreSubscribedChannels");
    goto LABEL_11;
  }
  if (v14)
  {
    v15 = v13;
    v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "identifier"));
    v19 = 138543362;
    v20 = v16;
    _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "Successfully enabled notifications for tagID: %{public}@", (uint8_t *)&v19, 0xCu);

LABEL_11:
  }
LABEL_12:

}

void sub_10005A900(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
  _Block_object_dispose(&a33, 8);
  _Unwind_Resume(a1);
}

void sub_10005A92C(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  _QWORD v5[4];
  id v6;
  id v7;
  uint64_t v8;

  v3 = a2;
  v4 = v3;
  if (v3)
  {
    v5[0] = _NSConcreteStackBlock;
    v5[1] = 3221225472;
    v5[2] = sub_10005A9CC;
    v5[3] = &unk_1000DD310;
    v8 = *(_QWORD *)(a1 + 40);
    v6 = v3;
    v7 = *(id *)(a1 + 32);
    FCPerformBlockOnMainThread(v5);

  }
  else
  {
    dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));
  }

}

void sub_10005A9CC(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;

  v2 = *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40);
  v3 = *(void **)(a1 + 32);
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "identifier"));
  objc_msgSend(v2, "setObject:forKey:", v3, v4);

  dispatch_group_leave(*(dispatch_group_t *)(a1 + 40));
}

void sub_10005AA28(uint64_t a1)
{
  uint64_t v1;
  id v2;

  v1 = *(_QWORD *)(a1 + 32);
  if (v1)
  {
    v2 = objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), "copy");
    (*(void (**)(uint64_t, id))(v1 + 16))(v1, v2);

  }
}

void sub_10005ABD4(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 56));
  _Unwind_Resume(a1);
}

void sub_10005ABF0(id *a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id WeakRetained;
  id v8;
  id v9;
  _QWORD v10[4];
  id v11;
  id v12;
  id v13;
  id v14;
  id v15;
  id v16;

  v5 = a2;
  v6 = a3;
  WeakRetained = objc_loadWeakRetained(a1 + 8);
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472;
  v10[2] = sub_10005ACF4;
  v10[3] = &unk_1000DD3D8;
  v11 = v6;
  v12 = a1[4];
  v16 = a1[7];
  v13 = a1[5];
  v14 = v5;
  v15 = a1[6];
  v8 = v5;
  v9 = v6;
  FCPerformIfNonNil(WeakRetained, v10);

}

void sub_10005ACF4(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  void *v6;
  uint64_t v7;
  id v8;
  id v9;
  id v10;
  void *v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  NSObject *v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  void *v19;
  _QWORD v20[4];
  id v21;
  id v22;
  uint64_t v23;
  void *v24;
  _QWORD v25[4];
  id v26;
  void *v27;
  id v28;
  uint64_t v29;
  void *v30;
  uint8_t buf[4];
  uint64_t v32;

  v3 = a2;
  v4 = v3;
  if (!*(_QWORD *)(a1 + 32))
  {
    if (!*(_QWORD *)(a1 + 56))
    {
      v20[0] = _NSConcreteStackBlock;
      v20[1] = 3221225472;
      v20[2] = sub_10005AFDC;
      v20[3] = &unk_1000DD3B0;
      v13 = *(void **)(a1 + 72);
      v14 = *(_QWORD *)(a1 + 48);
      v21 = *(id *)(a1 + 40);
      v22 = v3;
      v23 = v14;
      v24 = v13;
      v9 = v13;
      v10 = v21;
      sub_10005AFDC((uint64_t)v20);
      goto LABEL_15;
    }
    v10 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "headline"));
    v9 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "lastModifiedDate"));
    v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "lastModifiedDate"));
    if (*(_QWORD *)(a1 + 48))
    {
      if (objc_msgSend(v9, "compare:", v11) != (id)1)
      {
        v15 = FCDefaultLog;
        if (os_log_type_enabled(FCDefaultLog, OS_LOG_TYPE_DEFAULT))
        {
          v16 = *(_QWORD *)(a1 + 64);
          *(_DWORD *)buf = 138543362;
          v32 = v16;
          _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "ToC Editorial Manager: No update in editorial articleID: %{public}@", buf, 0xCu);
        }
        v17 = *(_QWORD *)(a1 + 72);
        if (v17)
        {
          v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "editorialItemCreator"));
          v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v18, "createEditorialItemFromCachedEntry:", *(_QWORD *)(a1 + 48)));
          (*(void (**)(uint64_t, void *))(v17 + 16))(v17, v19);

        }
        goto LABEL_14;
      }
      v12 = *(_QWORD *)(a1 + 48);
    }
    else
    {
      v12 = 0;
    }
    objc_msgSend(v4, "loadArticleMetadataWithHeadline:editorialItemFromCache:content:articleModifiedDate:completion:", v10, v12, *(_QWORD *)(a1 + 56), v9, *(_QWORD *)(a1 + 72));
LABEL_14:

    goto LABEL_15;
  }
  v25[0] = _NSConcreteStackBlock;
  v25[1] = 3221225472;
  v25[2] = sub_10005AF4C;
  v25[3] = &unk_1000DB878;
  v5 = *(void **)(a1 + 32);
  v26 = *(id *)(a1 + 40);
  v27 = v5;
  v6 = *(void **)(a1 + 72);
  v7 = *(_QWORD *)(a1 + 48);
  v28 = v3;
  v29 = v7;
  v30 = v6;
  v8 = v6;
  v9 = v5;
  v10 = v26;
  sub_10005AF4C((uint64_t)v25);

LABEL_15:
}

void sub_10005AF4C(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  void *v4;
  void *v5;

  v2 = (void *)FCDefaultLog;
  if (os_log_type_enabled(FCDefaultLog, OS_LOG_TYPE_ERROR))
    sub_100080338(a1, v2);
  v3 = *(_QWORD *)(a1 + 64);
  if (v3)
  {
    v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "editorialItemCreator"));
    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "createEditorialItemFromCachedEntry:", *(_QWORD *)(a1 + 56)));
    (*(void (**)(uint64_t, void *))(v3 + 16))(v3, v5);

  }
}

void sub_10005AFDC(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  void *v4;
  void *v5;

  v2 = (void *)FCDefaultLog;
  if (os_log_type_enabled(FCDefaultLog, OS_LOG_TYPE_ERROR))
    sub_1000803F8(a1, v2);
  v3 = *(_QWORD *)(a1 + 56);
  if (v3)
  {
    v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "editorialItemCreator"));
    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "createEditorialItemFromCachedEntry:", *(_QWORD *)(a1 + 48)));
    (*(void (**)(uint64_t, void *))(v3 + 16))(v3, v5);

  }
}

void sub_10005B268(id *a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  void *v8;
  void *v9;
  id v10;
  id v11;
  void *v12;
  _QWORD v13[4];
  id v14;
  id v15;
  id v16;
  id v17;
  id v18;
  id v19;
  id v20;
  id v21;
  id location;
  id v23;

  v5 = a2;
  v6 = a3;
  objc_initWeak(&location, a1[4]);
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[4], "articleController"));
  v23 = a1[5];
  v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v23, 1));
  v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "headlinesFetchOperationForArticleIDs:", v8));

  v13[0] = _NSConcreteStackBlock;
  v13[1] = 3221225472;
  v13[2] = sub_10005B48C;
  v13[3] = &unk_1000DD478;
  objc_copyWeak(&v21, &location);
  v10 = v5;
  v14 = v10;
  v11 = v6;
  v15 = v11;
  v20 = a1[9];
  v16 = a1[6];
  v17 = a1[7];
  v18 = a1[5];
  v19 = a1[8];
  objc_msgSend(v9, "setFetchCompletionBlock:", v13);
  v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSOperationQueue fc_sharedConcurrentQueue](NSOperationQueue, "fc_sharedConcurrentQueue"));
  objc_msgSend(v12, "addOperation:", v9);

  objc_destroyWeak(&v21);
  objc_destroyWeak(&location);

}

void sub_10005B450(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 72));
  _Unwind_Resume(a1);
}

void sub_10005B48C(id *a1, void *a2)
{
  id v3;
  id WeakRetained;
  id v5;
  _QWORD v6[4];
  id v7;
  id v8;
  id v9;
  id v10;
  id v11;
  id v12;
  id v13;
  id v14;

  v3 = a2;
  WeakRetained = objc_loadWeakRetained(a1 + 11);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_10005B5A8;
  v6[3] = &unk_1000DD450;
  v7 = a1[4];
  v8 = a1[5];
  v14 = a1[10];
  v9 = a1[6];
  v10 = a1[7];
  v11 = a1[8];
  v12 = v3;
  v13 = a1[9];
  v5 = v3;
  FCPerformIfNonNil(WeakRetained, v6);

}

void sub_10005B5A8(uint64_t a1, void *a2)
{
  id v3;
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  id *v7;
  id v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  void *v15;
  uint64_t v16;
  _QWORD v17[4];
  id v18;
  _QWORD v19[6];
  id v20;
  uint8_t buf[4];
  uint64_t v22;
  __int16 v23;
  uint64_t v24;

  v3 = a2;
  v4 = FCDefaultLog;
  if (os_log_type_enabled(FCDefaultLog, OS_LOG_TYPE_DEFAULT))
  {
    v5 = *(_QWORD *)(a1 + 32);
    v6 = *(_QWORD *)(a1 + 40);
    *(_DWORD *)buf = 138412546;
    v22 = v5;
    v23 = 2114;
    v24 = v6;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "ToC Editorial Manager: Load flint context finished with context: %@ error: %{public}@", buf, 0x16u);
  }
  if (*(_QWORD *)(a1 + 40))
  {
    v19[0] = _NSConcreteStackBlock;
    v19[1] = 3221225472;
    v19[2] = sub_10005B788;
    v19[3] = &unk_1000DBB48;
    v7 = &v20;
    v8 = *(id *)(a1 + 88);
    v9 = *(_QWORD *)(a1 + 48);
    v19[4] = v3;
    v19[5] = v9;
    v20 = v8;
    sub_10005B788((uint64_t)v19);
  }
  else
  {
    v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "articleEditorialItemProvider"));
    v11 = *(_QWORD *)(a1 + 32);
    v12 = *(_QWORD *)(a1 + 56);
    v13 = *(_QWORD *)(a1 + 64);
    v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 72), "fetchedObject"));
    v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "firstObject"));
    v17[0] = _NSConcreteStackBlock;
    v17[1] = 3221225472;
    v17[2] = sub_10005B7FC;
    v17[3] = &unk_1000DD428;
    v7 = &v18;
    v16 = *(_QWORD *)(a1 + 80);
    v18 = *(id *)(a1 + 88);
    objc_msgSend(v10, "createEditorialItemWithContext:articleModifiedDate:articleID:headline:flintDataProvider:completion:", v11, v12, v13, v15, v16, v17);

  }
}

void sub_10005B788(uint64_t a1)
{
  uint64_t v1;
  void *v3;
  id v4;

  v1 = *(_QWORD *)(a1 + 48);
  if (v1)
  {
    v4 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "editorialItemCreator"));
    v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "createEditorialItemFromCachedEntry:", *(_QWORD *)(a1 + 40)));
    (*(void (**)(uint64_t, void *))(v1 + 16))(v1, v3);

  }
}

uint64_t sub_10005B7FC(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 32);
  if (result)
    return (*(uint64_t (**)(void))(result + 16))();
  return result;
}

void sub_10005B938(uint64_t a1, void *a2)
{
  void *v2;
  id v3;

  v2 = *(void **)(a1 + 32);
  v3 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "fr_barButtonItemView"));
  objc_msgSend(v2, "fc_safelyAddObject:", v3);

}

id sub_10005B97C(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "favoritesPersonalizer");
}

id sub_10005B984(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "favoritesPersonalizer");
}

id sub_10005B98C(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "favoritesPersonalizer");
}

id sub_10005B994(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "spotlightManager");
}

FRTodayAgent *sub_10005B99C(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  FRTodayAgent *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  uint64_t v11;
  void *v12;
  FRTodayAgent *v13;

  v3 = a2;
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "resolveProtocol:", &OBJC_PROTOCOL___FCFeedPersonalizing));
  v5 = [FRTodayAgent alloc];
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "purchaseController"));
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "subscriptionController"));
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "resolveProtocol:", &OBJC_PROTOCOL___TSWidgetLocalNewsChannelServiceType));
  v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "bundleSubscriptionManager"));
  v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "resolveProtocol:", &OBJC_PROTOCOL___FRLimitedPersonalizationDataGeneratorType));
  v11 = *(_QWORD *)(a1 + 32);
  v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "resolveProtocol:", &OBJC_PROTOCOL___NPUserEmbeddingGeneratorType));

  v13 = -[FRTodayAgent initWithFeedPersonalizer:purchaseController:subscriptionController:localNewsChannelService:bundleSubscriptionManager:personalizationDataGenerator:privateDataContext:userEmbeddingGenerator:](v5, "initWithFeedPersonalizer:purchaseController:subscriptionController:localNewsChannelService:bundleSubscriptionManager:personalizationDataGenerator:privateDataContext:userEmbeddingGenerator:", v4, v6, v7, v8, v9, v10, v11, v12);
  return v13;
}

FRLimitedPersonalizationDataGeneratorType *__cdecl sub_10005BAD8(id a1, TFResolver *a2)
{
  TFResolver *v2;
  FRTimeAndCountAwareLimitedPersonalizationDataGenerator *v3;
  void *v4;
  void *v5;
  FRTimeAndCountAwareLimitedPersonalizationDataGenerator *v6;

  v2 = a2;
  v3 = [FRTimeAndCountAwareLimitedPersonalizationDataGenerator alloc];
  v4 = (void *)objc_claimAutoreleasedReturnValue(-[TFResolver resolveProtocol:name:](v2, "resolveProtocol:name:", &OBJC_PROTOCOL___FCPersonalizationDataGeneratorType, CFSTR("extension")));
  v5 = (void *)objc_claimAutoreleasedReturnValue(-[TFResolver resolveProtocol:](v2, "resolveProtocol:", &OBJC_PROTOCOL___FCCoreConfigurationManager));

  v6 = -[FRTimeAndCountAwareLimitedPersonalizationDataGenerator initWithGenerator:configurationManager:](v3, "initWithGenerator:configurationManager:", v4, v5);
  return (FRLimitedPersonalizationDataGeneratorType *)v6;
}

FRBackgroundFetchManager *sub_10005BB70(uint64_t a1, void *a2)
{
  id v3;
  FRBackgroundFetchManager *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  uint64_t v9;
  id v10;
  void *v11;
  FRBackgroundFetchManager *v12;

  v3 = a2;
  v4 = [FRBackgroundFetchManager alloc];
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "appConfigurationManager"));
  v6 = *(void **)(a1 + 32);
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "subscriptionController"));
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "privateDataUpdateCoordinator"));
  v10 = objc_msgSend(v3, "resolveClass:", objc_opt_class(FRTodayAgent, v9));
  v11 = (void *)objc_claimAutoreleasedReturnValue(v10);
  v12 = -[FRBackgroundFetchManager initWithResolver:appConfigManager:privateDataContext:subscriptionController:privateDataUpdateCoordinator:todayAgent:](v4, "initWithResolver:appConfigManager:privateDataContext:subscriptionController:privateDataUpdateCoordinator:todayAgent:", v3, v5, v6, v7, v8, v11);

  return v12;
}

void sub_10005BC50(id a1, TFResolver *a2, FRBackgroundFetchManager *a3)
{
  FRBackgroundFetchManager *v4;
  TFResolver *v5;
  uint64_t v6;
  id v7;
  id v8;

  v4 = a3;
  v5 = a2;
  v7 = -[TFResolver resolveClass:](v5, "resolveClass:", objc_opt_class(FCVanityURLRedirectService, v6));
  v8 = (id)objc_claimAutoreleasedReturnValue(v7);

  -[FRBackgroundFetchManager addFetchable:](v4, "addFetchable:", v8);
}

NSSNewsAnalyticsUserIDProvider *__cdecl sub_10005BD04(id a1, TFResolver *a2)
{
  void *v2;
  FRUserInfoUserIDProvider *v3;
  void *v4;
  FRUserInfoUserIDProvider *v5;

  v2 = (void *)objc_claimAutoreleasedReturnValue(-[TFResolver resolveProtocol:](a2, "resolveProtocol:", &OBJC_PROTOCOL___FCPrivateDataContext));
  v3 = [FRUserInfoUserIDProvider alloc];
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "userInfo"));
  v5 = -[FRUserInfoUserIDProvider initWithUserInfo:](v3, "initWithUserInfo:", v4);

  return (NSSNewsAnalyticsUserIDProvider *)v5;
}

void sub_10005C094(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  id v6;

  v3 = a2;
  v4 = *(void **)(a1 + 32);
  v6 = v3;
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "lowercaseString"));
  LOBYTE(v4) = objc_msgSend(v4, "containsObject:", v5);

  if ((v4 & 1) == 0)
    objc_msgSend(*(id *)(a1 + 40), "addObject:", v6);

}

id sub_10005CDD0(uint64_t a1)
{
  id result;

  result = objc_msgSend(*(id *)(a1 + 32), "endBackgroundTask:", *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24));
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = UIBackgroundTaskInvalid;
  return result;
}

void sub_10005CE18(uint64_t a1)
{
  void *v2;
  id v3;
  uint64_t v4;
  _QWORD v5[4];
  id v6;
  uint64_t v7;

  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_10005CE94;
  v5[3] = &unk_1000DBFB0;
  v2 = *(void **)(a1 + 32);
  v3 = *(id *)(a1 + 40);
  v4 = *(_QWORD *)(a1 + 48);
  v6 = v3;
  v7 = v4;
  objc_msgSend(v2, "scheduleLocalNotificationForArticleID:completion:", CFSTR("A_BUpuB2ATxS__HCPKpoh4Q"), v5);

}

id sub_10005CE94(uint64_t a1)
{
  id result;

  result = objc_msgSend(*(id *)(a1 + 32), "endBackgroundTask:", *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24));
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = UIBackgroundTaskInvalid;
  return result;
}

void sub_10005DC98(id a1)
{
  id v1;
  id v2;
  void *v3;
  void *v4;
  id v5;
  void *v6;
  id v7;
  id v8;
  void *v9;
  id v10;
  void *v11;
  id v12;

  v1 = objc_alloc((Class)NSBundle);
  v2 = FRURLForLocalInternalExtrasBundle();
  v3 = (void *)objc_claimAutoreleasedReturnValue(v2);
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "path"));
  v5 = objc_msgSend(v1, "initWithPath:", v4);
  v6 = (void *)qword_10010A720;
  qword_10010A720 = (uint64_t)v5;

  if (!qword_10010A720)
  {
    v7 = objc_alloc((Class)NSBundle);
    v8 = FRURLForInternalExtrasBundle();
    v12 = (id)objc_claimAutoreleasedReturnValue(v8);
    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "path"));
    v10 = objc_msgSend(v7, "initWithPath:", v9);
    v11 = (void *)qword_10010A720;
    qword_10010A720 = (uint64_t)v10;

  }
}

id sub_10005DF2C(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "_accessibilityRestoreFocusedElementIfApplicable");
}

id sub_10005E09C(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  id v6;

  v3 = a2;
  if (objc_msgSend(v3, "conformsToProtocol:", &OBJC_PROTOCOL___FRCollectionViewAccessibilityFocusRestoring))
  {
    v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "accessibilityCollectionViewFocusRestoreIdentifier"));
    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "_accessibilityFocusedIdentifierForRestoringAfterReload"));
    v6 = objc_msgSend(v4, "isEqual:", v5);

  }
  else
  {
    v6 = 0;
  }

  return v6;
}

void sub_10005E1DC(id a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  id v6;
  id v7;
  uint64_t v8;
  void *i;
  uint64_t v10;
  void *v11;
  id v12;
  void *v13;
  float v14;
  double v15;
  void *v16;
  float v17;
  double v18;
  void *v19;
  void *v20;
  id v21;
  void *v22;
  void *v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  _BYTE v28[128];
  _QWORD v29[2];
  _QWORD v30[2];
  _QWORD v31[2];
  _QWORD v32[2];
  _QWORD v33[2];
  _QWORD v34[2];

  v23 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableDictionary dictionary](NSMutableDictionary, "dictionary"));
  v33[0] = &off_1000E4BC0;
  v33[1] = &off_1000E4BD8;
  v34[0] = &off_1000E4B38;
  v34[1] = &off_1000E4B48;
  v1 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v34, v33, 2));
  v31[0] = &off_1000E4BC0;
  v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", UIFontWeightBold));
  v31[1] = &off_1000E4BD8;
  v32[0] = v2;
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", UIFontWeightSemibold));
  v32[1] = v3;
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v32, v31, 2));

  v29[0] = &off_1000E4BC0;
  v29[1] = &off_1000E4BD8;
  v30[0] = &__kCFBooleanTrue;
  v30[1] = &__kCFBooleanTrue;
  v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v30, v29, 2));
  v24 = 0u;
  v25 = 0u;
  v26 = 0u;
  v27 = 0u;
  v6 = objc_msgSend(&off_1000E49D0, "countByEnumeratingWithState:objects:count:", &v24, v28, 16);
  if (v6)
  {
    v7 = v6;
    v8 = *(_QWORD *)v25;
    do
    {
      for (i = 0; i != v7; i = (char *)i + 1)
      {
        if (*(_QWORD *)v25 != v8)
          objc_enumerationMutation(&off_1000E49D0);
        v10 = *(_QWORD *)(*((_QWORD *)&v24 + 1) + 8 * (_QWORD)i);
        v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "objectForKeyedSubscript:", v10));
        v12 = objc_msgSend(v11, "BOOLValue");

        v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "objectForKeyedSubscript:", v10));
        objc_msgSend(v13, "floatValue");
        v15 = v14;

        v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v1, "objectForKeyedSubscript:", v10));
        objc_msgSend(v16, "floatValue");
        v18 = v17;

        v19 = (void *)objc_claimAutoreleasedReturnValue(+[UIFont fr_systemFontNameForWeight:condensed:](UIFont, "fr_systemFontNameForWeight:condensed:", v12, v15));
        v20 = (void *)objc_claimAutoreleasedReturnValue(+[UIFont fr_fontWithName:size:](UIFont, "fr_fontWithName:size:", v19, v18));
        objc_msgSend(v23, "setObject:forKeyedSubscript:", v20, v10);

      }
      v7 = objc_msgSend(&off_1000E49D0, "countByEnumeratingWithState:objects:count:", &v24, v28, 16);
    }
    while (v7);
  }
  v21 = objc_msgSend(v23, "copy");
  v22 = (void *)qword_10010A738;
  qword_10010A738 = (uint64_t)v21;

}

void sub_10005E518(uint64_t a1)
{
  void *v2;
  id v3;
  id v4;
  uint64_t v5;
  void *i;
  void *v7;
  id v8;
  void *v9;
  void *v10;
  double v11;
  void *v12;
  double v13;
  double v14;
  id v15;
  id v16;
  id v17;
  id v18;
  id v19;
  void *v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  uint8_t buf[4];
  const char *v26;
  __int16 v27;
  char *v28;
  __int16 v29;
  int v30;
  __int16 v31;
  id v32;
  _BYTE v33[128];

  v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableDictionary dictionary](NSMutableDictionary, "dictionary"));
  v21 = 0u;
  v22 = 0u;
  v23 = 0u;
  v24 = 0u;
  v3 = objc_msgSend(&off_1000E49E8, "countByEnumeratingWithState:objects:count:", &v21, v33, 16);
  if (v3)
  {
    v4 = v3;
    v5 = *(_QWORD *)v22;
    do
    {
      for (i = 0; i != v4; i = (char *)i + 1)
      {
        if (*(_QWORD *)v22 != v5)
          objc_enumerationMutation(&off_1000E49E8);
        v7 = *(void **)(*((_QWORD *)&v21 + 1) + 8 * (_QWORD)i);
        v8 = objc_msgSend(v7, "integerValue");
        v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableDictionary dictionary](NSMutableDictionary, "dictionary"));
        v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "fr_fontForFeedHeaderType:", v8));
        if (v10)
        {
          objc_msgSend(v9, "setObject:forKeyedSubscript:", v10, NSFontAttributeName);
        }
        else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
        {
          v18 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("invalid nil value for '%s'"), "font");
          *(_DWORD *)buf = 136315906;
          v26 = "+[NSString(FRFeedAdditions) fr_attributesLookup]_block_invoke";
          v27 = 2080;
          v28 = "UIFont+FRFeedAdditions.m";
          v29 = 1024;
          v30 = 67;
          v31 = 2114;
          v32 = v18;
          _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "*** Assertion failure (Identifier: catch-all) : %s %s:%d %{public}@", buf, 0x26u);

        }
        objc_msgSend(*(id *)(a1 + 32), "fr_trackingForFeedHeaderType:", v8);
        if (vabdd_f64(0.0, v11) >= 0.00999999978)
        {
          v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:"));
          objc_msgSend(v9, "setObject:forKeyedSubscript:", v12, kCTTrackingAttributeName);

        }
        objc_msgSend(*(id *)(a1 + 32), "fr_leadingForFeedHeaderType:", v8);
        if (v13 > 0.0)
        {
          v14 = v13;
          v15 = objc_alloc_init((Class)NSMutableParagraphStyle);
          objc_msgSend(v15, "setMinimumLineHeight:", v14);
          objc_msgSend(v15, "setLineBreakMode:", 0);
          objc_msgSend(v15, "setAlignment:", 0);
          v16 = objc_msgSend(v15, "copy");
          objc_msgSend(v9, "setObject:forKeyedSubscript:", v16, NSParagraphStyleAttributeName);

        }
        v17 = objc_msgSend(v9, "copy");
        objc_msgSend(v2, "setObject:forKey:", v17, v7);

      }
      v4 = objc_msgSend(&off_1000E49E8, "countByEnumeratingWithState:objects:count:", &v21, v33, 16);
    }
    while (v4);
  }
  v19 = objc_msgSend(v2, "copy");
  v20 = (void *)qword_10010A748;
  qword_10010A748 = (uint64_t)v19;

}

void sub_10005EB80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10005EB98(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  id v5;

  v5 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "loadedConfiguration"));
  v2 = objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "embedForType:", *(_QWORD *)(a1 + 40)));
  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
  v4 = *(void **)(v3 + 40);
  *(_QWORD *)(v3 + 40) = v2;

}

uint64_t sub_10005EC68(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 32);
  if (result)
    return (*(uint64_t (**)(void))(result + 16))();
  return result;
}

void sub_10005EEEC(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  id v5;
  _QWORD v6[4];
  id v7;
  id v8;

  v3 = a2;
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_10005EF80;
  v6[3] = &unk_1000DAF50;
  v4 = *(void **)(a1 + 32);
  v7 = *(id *)(a1 + 40);
  v8 = v3;
  v5 = v3;
  objc_msgSend(v4, "syncWithCompletion:", v6);

}

uint64_t sub_10005EF80(uint64_t a1)
{
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
}

void sub_10005F794(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  uint64_t v12;
  va_list va;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  va_list va1;

  va_start(va1, a11);
  va_start(va, a11);
  v12 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

void sub_10005F7C8(uint64_t a1, void *a2, void *a3)
{
  id v5;
  unsigned __int16 v6;
  NSObject *v7;
  unsigned int v8;
  uint64_t v9;
  int v10;
  id v11;

  v5 = a2;
  v6 = (unsigned __int16)objc_msgSend(a3, "unsignedIntegerValue");
  if ((v6 & 0x2CDF) != 0)
  {
    v7 = FRTodayAgentLog;
    if (os_log_type_enabled((os_log_t)FRTodayAgentLog, OS_LOG_TYPE_DEFAULT))
    {
      v10 = 138412290;
      v11 = v5;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "History feature of interest changed for %@", (uint8_t *)&v10, 0xCu);
    }
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 24) = 1;
    if ((v6 & 0x2C46) != 0)
      *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 24) = 17;
  }
  if ((v6 & 0x99) != 0)
  {
    v8 = objc_msgSend(*(id *)(a1 + 32), "hasArticleBeenSeen:", v5);
    v9 = 48;
    if (v8)
      v9 = 40;
    objc_msgSend(*(id *)(a1 + v9), "addObject:", v5);
  }

}

void sub_10005FB9C(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  NSObject *v9;
  void *v10;
  uint64_t v11;
  void *v12;
  void *v13;
  id v14;
  id v15;
  _QWORD *v16;
  NSObject *v17;
  void *v18;
  void *v19;
  void *v20;
  uint64_t v21;
  void *v22;
  void *v23;
  id v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  uint64_t v29;
  NSObject *v30;
  id v31;
  id v32;
  id v33;
  id v34;
  id v35;
  NSObject *v36;
  void *v37;
  NSObject *v38;
  void *v39;
  void *v40;
  id v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  void *v45;
  void *v46;
  NSObject *v47;
  void *v48;
  void *v49;
  id v50;
  void *v51;
  void *v52;
  id v53;
  id v54;
  id v55;
  _QWORD *v56;
  NSObject *v57;
  void *v58;
  uint64_t v59;
  NSObject *v60;
  void *v61;
  id *v62;
  uint64_t v63;
  id v64;
  uint64_t v65;
  NSObject *v66;
  void *v67;
  id v68;
  void *v69;
  void *v70;
  void *v71;
  void *v72;
  _QWORD v73[5];
  void *v74;
  id v75;
  _QWORD v76[5];
  _QWORD v77[2];
  _QWORD v78[4];
  id v79;
  NSObject *v80;
  _QWORD v81[4];
  id v82;
  NSObject *v83;
  _QWORD v84[4];
  id v85;
  id v86;
  _QWORD v87[4];
  id v88;
  NSObject *v89;
  _QWORD block[5];
  id v91;
  id v92;
  id v93;
  id v94;
  id v95;
  id v96;
  NSObject *v97;
  uint8_t buf[8];
  _QWORD v99[4];
  id v100;
  id v101;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "privateDataContext"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "seenArticlesTransactions"));
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[FCFileCoordinatedTodayDropboxTransaction collapsedTransactionOfTransactions:](FCFileCoordinatedTodayDropboxTransaction, "collapsedTransactionOfTransactions:", v3));

  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "todayPrivateDataAccessor"));
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "seenArticlesTransactions"));
  objc_msgSend(v6, "removeAllObjects");

  v7 = (void *)objc_claimAutoreleasedReturnValue(+[FCFileCoordinatedTodayDropboxTransaction transactionOfIdentity](FCFileCoordinatedTodayDropboxTransaction, "transactionOfIdentity"));
  if (v7)
  {
    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "seenArticlesTransactions"));
    objc_msgSend(v8, "addObject:", v7);

  }
  if (!*(_QWORD *)(a1 + 48))
  {
    (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
    goto LABEL_38;
  }
  v9 = dispatch_group_create();
  v10 = (void *)objc_opt_new(FCThreadSafeMutableArray);
  v11 = *(_QWORD *)(a1 + 48);
  if ((v11 & 2) != 0)
  {
    v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "readingHistory"));
    v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "mostRecentlyReadArticlesWithMaxCount:", 200));
    v14 = objc_msgSend(v13, "copy");

    v99[0] = _NSConcreteStackBlock;
    v99[1] = 3221225472;
    v99[2] = sub_100060464;
    v99[3] = &unk_1000DDAB8;
    v100 = v14;
    v101 = v5;
    v15 = v14;
    v16 = objc_retainBlock(v99);
    objc_msgSend(v10, "addObject:", v16);

    v11 = *(_QWORD *)(a1 + 48);
  }
  if ((v11 & 4) != 0)
  {
    v69 = v5;
    v70 = v4;
    v71 = v2;
    v17 = FRTodayAgentLog;
    if (os_log_type_enabled((os_log_t)FRTodayAgentLog, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "Preparing to update subscriptions", buf, 2u);
    }
    v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "subscriptionController"));
    v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v18, "mutedTagIDs"));
    v20 = (void *)objc_claimAutoreleasedReturnValue(+[NSSet setWithArray:](NSSet, "setWithArray:", v19));

    v21 = objc_claimAutoreleasedReturnValue(objc_msgSend(v18, "autoFavoriteTagIDs"));
    v22 = (void *)v21;
    v23 = &__NSArray0__struct;
    if (v21)
      v23 = (void *)v21;
    v24 = v23;

    v25 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v18, "groupableTagIDs"));
    v26 = (void *)objc_claimAutoreleasedReturnValue(+[NSSet setWithArray:](NSSet, "setWithArray:", v25));

    v27 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v18, "allSubscribedTagIDs"));
    v28 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithArray:](NSArray, "arrayWithArray:", v27));

    dispatch_group_enter(v9);
    v29 = FCDispatchQueueForQualityOfService(*(_QWORD *)(a1 + 56));
    v30 = objc_claimAutoreleasedReturnValue(v29);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_1000604D8;
    block[3] = &unk_1000DDB30;
    block[4] = *(_QWORD *)(a1 + 32);
    v91 = v28;
    v92 = v18;
    v93 = v10;
    v94 = v20;
    v95 = v24;
    v96 = v26;
    v97 = v9;
    v31 = v26;
    v32 = v24;
    v33 = v20;
    v34 = v18;
    v35 = v28;
    dispatch_async(v30, block);

    v11 = *(_QWORD *)(a1 + 48);
    v4 = v70;
    v2 = v71;
    v5 = v69;
  }
  if ((v11 & 0x24) != 0)
  {
    v36 = FRTodayAgentLog;
    if (os_log_type_enabled((os_log_t)FRTodayAgentLog, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v36, OS_LOG_TYPE_DEFAULT, "Preparing to update local news", buf, 2u);
    }
    dispatch_group_enter(v9);
    v37 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "localNewsChannelService"));
    v87[0] = _NSConcreteStackBlock;
    v87[1] = 3221225472;
    v87[2] = sub_100060828;
    v87[3] = &unk_1000DDB80;
    v88 = v10;
    v89 = v9;
    objc_msgSend(v37, "fetchWidgetLocalNewsChannelIDWithCompletion:", v87);

    v11 = *(_QWORD *)(a1 + 48);
  }
  if ((v11 & 8) != 0)
  {
    v38 = FRTodayAgentLog;
    if (os_log_type_enabled((os_log_t)FRTodayAgentLog, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v38, OS_LOG_TYPE_DEFAULT, "Preparing to update user info", buf, 2u);
    }
    v39 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "userInfo"));
    v40 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v39, "onboardingVersionNumber"));
    v41 = objc_msgSend(v40, "copy");

    v44 = NewsCoreUserDefaults(v42, v43);
    v45 = (void *)objc_claimAutoreleasedReturnValue(v44);
    objc_msgSend(v45, "setObject:forKey:", v41, FCWidgetOnboardingVersionSharedPreferenceKey);

    v11 = *(_QWORD *)(a1 + 48);
    if ((v11 & 0x10) == 0)
    {
LABEL_18:
      if ((v11 & 0x20) == 0)
        goto LABEL_19;
LABEL_28:
      v57 = FRTodayAgentLog;
      if (os_log_type_enabled((os_log_t)FRTodayAgentLog, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v57, OS_LOG_TYPE_DEFAULT, "Preparing to update personalization data", buf, 2u);
      }
      dispatch_group_enter(v9);
      v58 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "personalizationDataGenerator"));
      v59 = *(_QWORD *)(a1 + 56);
      v81[0] = _NSConcreteStackBlock;
      v81[1] = 3221225472;
      v81[2] = sub_100060978;
      v81[3] = &unk_1000DDBD0;
      v82 = v10;
      v83 = v9;
      objc_msgSend(v58, "generateDerivedDataWithMaxAggregateCount:qualityOfService:completion:", 2000, v59, v81);

      if ((*(_QWORD *)(a1 + 48) & 0x40) == 0)
        goto LABEL_34;
      goto LABEL_31;
    }
  }
  else if ((v11 & 0x10) == 0)
  {
    goto LABEL_18;
  }
  v72 = v7;
  v46 = v5;
  v47 = FRTodayAgentLog;
  if (os_log_type_enabled((os_log_t)FRTodayAgentLog, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v47, OS_LOG_TYPE_DEFAULT, "Preparing to update purchase", buf, 2u);
  }
  v48 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "purchaseController"));
  v49 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v48, "allPurchasedTagIDs"));
  v50 = objc_msgSend(v49, "copy");

  v51 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "bundleSubscriptionManager"));
  v52 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v51, "cachedSubscription"));
  v53 = objc_msgSend(v52, "copy");

  v84[0] = _NSConcreteStackBlock;
  v84[1] = 3221225472;
  v84[2] = sub_100060930;
  v84[3] = &unk_1000DDBA8;
  v85 = v50;
  v86 = v53;
  v54 = v53;
  v55 = v50;
  v56 = objc_retainBlock(v84);
  objc_msgSend(v10, "addObject:", v56);

  v11 = *(_QWORD *)(a1 + 48);
  v5 = v46;
  v7 = v72;
  if ((v11 & 0x20) != 0)
    goto LABEL_28;
LABEL_19:
  if ((v11 & 0x40) != 0)
  {
LABEL_31:
    v60 = FRTodayAgentLog;
    if (os_log_type_enabled((os_log_t)FRTodayAgentLog, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v60, OS_LOG_TYPE_DEFAULT, "Preparing to update user embedding data", buf, 2u);
    }
    dispatch_group_enter(v9);
    v61 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "userEmbeddingGenerator"));
    v78[0] = _NSConcreteStackBlock;
    v78[1] = 3221225472;
    v78[2] = sub_100060A68;
    v78[3] = &unk_1000DDBF8;
    v79 = v10;
    v80 = v9;
    objc_msgSend(v61, "generateUserEmbeddingIfNeededWithCompletion:", v78);

  }
LABEL_34:
  if (FCDispatchGroupIsEmpty(v9))
  {
    v76[0] = _NSConcreteStackBlock;
    v76[1] = 3221225472;
    v76[2] = sub_100060B54;
    v76[3] = &unk_1000DC8A8;
    v62 = (id *)v77;
    v63 = *(_QWORD *)(a1 + 40);
    v76[4] = *(_QWORD *)(a1 + 32);
    v77[0] = v10;
    v77[1] = v63;
    v64 = v10;
    sub_100060B54((uint64_t)v76);
  }
  else
  {
    v65 = FCDispatchQueueForQualityOfService(*(_QWORD *)(a1 + 56));
    v66 = objc_claimAutoreleasedReturnValue(v65);
    v73[0] = _NSConcreteStackBlock;
    v73[1] = 3221225472;
    v73[2] = sub_100060DE8;
    v73[3] = &unk_1000DC8A8;
    v62 = &v74;
    v67 = *(void **)(a1 + 40);
    v73[4] = *(_QWORD *)(a1 + 32);
    v74 = v10;
    v75 = v67;
    v68 = v10;
    dispatch_group_notify(v9, v66, v73);

  }
LABEL_38:

}

void sub_100060464(uint64_t a1, void *a2)
{
  void *v3;
  void *v4;
  id v5;

  v3 = *(void **)(a1 + 32);
  v5 = a2;
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "fc_dictionaryWithKeyBlock:", &stru_1000DDA90));
  objc_msgSend(v5, "setRecentlyReadHistoryItems:", v4);

  (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
}

NSString *__cdecl sub_1000604D0(id a1, FCTodayReadHistoryItem *a2)
{
  return (NSString *)-[FCTodayReadHistoryItem articleID](a2, "articleID");
}

void sub_1000604D8(uint64_t a1)
{
  void *v2;
  void *v3;
  _QWORD v4[5];
  id v5;
  id v6;
  id v7;
  id v8;
  id v9;
  id v10;
  id v11;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "feedPersonalizer"));
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  v4[2] = sub_1000605D8;
  v4[3] = &unk_1000DDB30;
  v3 = *(void **)(a1 + 40);
  v4[4] = *(_QWORD *)(a1 + 32);
  v5 = v3;
  v6 = *(id *)(a1 + 48);
  v7 = *(id *)(a1 + 56);
  v8 = *(id *)(a1 + 64);
  v9 = *(id *)(a1 + 72);
  v10 = *(id *)(a1 + 80);
  v11 = *(id *)(a1 + 88);
  objc_msgSend(v2, "prepareForUseWithCompletionHandler:", v4);

}

void sub_1000605D8(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  id v6;
  id v7;
  _QWORD *v8;
  NSObject *v9;
  uint8_t v10[16];
  _QWORD v11[4];
  id v12;
  id v13;
  id v14;
  id v15;
  id v16;
  _QWORD v17[4];
  id v18;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "feedPersonalizer"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "rankTagIDsDescending:", *(_QWORD *)(a1 + 40)));

  v17[0] = _NSConcreteStackBlock;
  v17[1] = 3221225472;
  v17[2] = sub_10006077C;
  v17[3] = &unk_1000DDAE0;
  v18 = *(id *)(a1 + 48);
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "fc_arrayByTransformingWithBlock:", v17));
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472;
  v11[2] = sub_1000607BC;
  v11[3] = &unk_1000DDB08;
  v5 = *(void **)(a1 + 56);
  v12 = *(id *)(a1 + 64);
  v13 = *(id *)(a1 + 72);
  v6 = v3;
  v14 = v6;
  v7 = v4;
  v15 = v7;
  v16 = *(id *)(a1 + 80);
  v8 = objc_retainBlock(v11);
  objc_msgSend(v5, "addObject:", v8);

  v9 = FRTodayAgentLog;
  if (os_log_type_enabled((os_log_t)FRTodayAgentLog, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v10 = 0;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Updated subscriptions", v10, 2u);
  }
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 88));

}

id sub_10006077C(uint64_t a1, uint64_t a2)
{
  void *v2;
  void *v3;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "subscriptionForTagID:", a2));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "dateAdded"));

  return v3;
}

void sub_1000607BC(_QWORD *a1, void *a2)
{
  uint64_t v3;
  id v4;

  v3 = a1[4];
  v4 = a2;
  objc_msgSend(v4, "setMutedTagIDs:", v3);
  objc_msgSend(v4, "setAutoFavoriteTagIDs:", a1[5]);
  objc_msgSend(v4, "setRankedAllSubscribedTagIDs:", a1[6]);
  objc_msgSend(v4, "setRankedAllSubscriptionDates:", a1[7]);
  objc_msgSend(v4, "setGroupableTagIDs:", a1[8]);

}

void sub_100060828(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  _QWORD *v8;
  NSObject *v9;
  uint8_t v10[8];
  _QWORD v11[4];
  id v12;

  v5 = a2;
  v6 = a3;
  if (!v6)
  {
    v7 = *(void **)(a1 + 32);
    v11[0] = _NSConcreteStackBlock;
    v11[1] = 3221225472;
    v11[2] = sub_100060924;
    v11[3] = &unk_1000DDB58;
    v12 = v5;
    v8 = objc_retainBlock(v11);
    objc_msgSend(v7, "addObject:", v8);

  }
  v9 = FRTodayAgentLog;
  if (os_log_type_enabled((os_log_t)FRTodayAgentLog, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v10 = 0;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Updated local news", v10, 2u);
  }
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 40));

}

id sub_100060924(uint64_t a1, void *a2)
{
  return _objc_msgSend(a2, "setLocalNewsTagID:", *(_QWORD *)(a1 + 32));
}

void sub_100060930(uint64_t a1, void *a2)
{
  uint64_t v3;
  id v4;

  v3 = *(_QWORD *)(a1 + 32);
  v4 = a2;
  objc_msgSend(v4, "setPurchasedTagIDs:", v3);
  objc_msgSend(v4, "setBundleSubscription:", *(_QWORD *)(a1 + 40));

}

void sub_100060978(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  id v5;
  _QWORD *v6;
  NSObject *v7;
  uint8_t v8[8];
  _QWORD v9[4];
  id v10;

  v3 = objc_msgSend(a2, "copy");
  v4 = *(void **)(a1 + 32);
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472;
  v9[2] = sub_100060A5C;
  v9[3] = &unk_1000DDB58;
  v5 = v3;
  v10 = v5;
  v6 = objc_retainBlock(v9);
  objc_msgSend(v4, "addObject:", v6);

  v7 = FRTodayAgentLog;
  if (os_log_type_enabled((os_log_t)FRTodayAgentLog, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v8 = 0;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Updated personalization data", v8, 2u);
  }
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 40));

}

id sub_100060A5C(uint64_t a1, void *a2)
{
  return _objc_msgSend(a2, "setDerivedPersonalizationData:", *(_QWORD *)(a1 + 32));
}

void sub_100060A68(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  id v5;
  _QWORD *v6;
  NSObject *v7;
  uint8_t v8[8];
  _QWORD v9[4];
  id v10;

  v3 = a2;
  v4 = *(void **)(a1 + 32);
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472;
  v9[2] = sub_100060B48;
  v9[3] = &unk_1000DDB58;
  v5 = v3;
  v10 = v5;
  v6 = objc_retainBlock(v9);
  objc_msgSend(v4, "addObject:", v6);

  v7 = FRTodayAgentLog;
  if (os_log_type_enabled((os_log_t)FRTodayAgentLog, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v8 = 0;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Updated user embedding data", v8, 2u);
  }
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 40));

}

id sub_100060B48(uint64_t a1, void *a2)
{
  return _objc_msgSend(a2, "setUserEmbeddingData:", *(_QWORD *)(a1 + 32));
}

void sub_100060B54(uint64_t a1)
{
  void *v2;
  unsigned int v3;
  NSObject *v4;
  id v5;
  id v6;
  id v7;
  id v8;
  id v9;
  id v10;
  _QWORD v11[4];
  id v12;
  uint8_t buf[4];
  unsigned int v14;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "fileCoordinatedTodayDropbox"));
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472;
  v11[2] = sub_100060CE4;
  v11[3] = &unk_1000DDB58;
  v12 = *(id *)(a1 + 40);
  v3 = objc_msgSend(v2, "depositSyncWithAccessor:", v11);

  v4 = FRTodayAgentLog;
  if (os_log_type_enabled((os_log_t)FRTodayAgentLog, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109120;
    v14 = v3;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Finished updating today data with result %d", buf, 8u);
  }
  if (v3)
  {
    v5 = objc_alloc((Class)CHSTimelineController);
    v6 = objc_msgSend(v5, "initForAvocadoIdentifier:inBundleIdentifier:", NSSNewsTodayWidgetKind, NSSNewsTodayWidgetBundleID);
    v7 = objc_msgSend(v6, "reloadTimeline");

    v8 = objc_alloc((Class)CHSTimelineController);
    v9 = objc_msgSend(v8, "initForAvocadoIdentifier:inBundleIdentifier:", NSSNewsTagWidgetKind, NSSNewsTagWidgetBundleID);
    v10 = objc_msgSend(v9, "reloadTimeline");

  }
  (*(void (**)(void))(*(_QWORD *)(a1 + 48) + 16))();

}

void sub_100060CE4(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  id v5;
  id v6;
  uint64_t v7;
  void *v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  _BYTE v13[128];

  v3 = a2;
  v9 = 0u;
  v10 = 0u;
  v11 = 0u;
  v12 = 0u;
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "readOnlyArray", 0));
  v5 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v9, v13, 16);
  if (v5)
  {
    v6 = v5;
    v7 = *(_QWORD *)v10;
    do
    {
      v8 = 0;
      do
      {
        if (*(_QWORD *)v10 != v7)
          objc_enumerationMutation(v4);
        (*(void (**)(void))(*(_QWORD *)(*((_QWORD *)&v9 + 1) + 8 * (_QWORD)v8) + 16))();
        v8 = (char *)v8 + 1;
      }
      while (v6 != v8);
      v6 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v9, v13, 16);
    }
    while (v6);
  }

}

void sub_100060DE8(uint64_t a1)
{
  void *v2;
  unsigned int v3;
  NSObject *v4;
  id v5;
  id v6;
  id v7;
  id v8;
  id v9;
  id v10;
  _QWORD v11[4];
  id v12;
  uint8_t buf[4];
  unsigned int v14;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "fileCoordinatedTodayDropbox"));
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472;
  v11[2] = sub_100060F78;
  v11[3] = &unk_1000DDB58;
  v12 = *(id *)(a1 + 40);
  v3 = objc_msgSend(v2, "depositSyncWithAccessor:", v11);

  v4 = FRTodayAgentLog;
  if (os_log_type_enabled((os_log_t)FRTodayAgentLog, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109120;
    v14 = v3;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Finished updating today data with result %d", buf, 8u);
  }
  if (v3)
  {
    v5 = objc_alloc((Class)CHSTimelineController);
    v6 = objc_msgSend(v5, "initForAvocadoIdentifier:inBundleIdentifier:", NSSNewsTodayWidgetKind, NSSNewsTodayWidgetBundleID);
    v7 = objc_msgSend(v6, "reloadTimeline");

    v8 = objc_alloc((Class)CHSTimelineController);
    v9 = objc_msgSend(v8, "initForAvocadoIdentifier:inBundleIdentifier:", NSSNewsTagWidgetKind, NSSNewsTagWidgetBundleID);
    v10 = objc_msgSend(v9, "reloadTimeline");

  }
  (*(void (**)(void))(*(_QWORD *)(a1 + 48) + 16))();

}

void sub_100060F78(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  id v5;
  id v6;
  uint64_t v7;
  void *v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  _BYTE v13[128];

  v3 = a2;
  v9 = 0u;
  v10 = 0u;
  v11 = 0u;
  v12 = 0u;
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "readOnlyArray", 0));
  v5 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v9, v13, 16);
  if (v5)
  {
    v6 = v5;
    v7 = *(_QWORD *)v10;
    do
    {
      v8 = 0;
      do
      {
        if (*(_QWORD *)v10 != v7)
          objc_enumerationMutation(v4);
        (*(void (**)(void))(*(_QWORD *)(*((_QWORD *)&v9 + 1) + 8 * (_QWORD)v8) + 16))();
        v8 = (char *)v8 + 1;
      }
      while (v6 != v8);
      v6 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v9, v13, 16);
    }
    while (v6);
  }

}

double FRCenterOfRect(CGFloat a1, CGFloat a2, CGFloat a3, CGFloat a4)
{
  double MidX;
  CGRect v10;

  MidX = CGRectGetMidX(*(CGRect *)&a1);
  v10.origin.x = a1;
  v10.origin.y = a2;
  v10.size.width = a3;
  v10.size.height = a4;
  CGRectGetMidY(v10);
  return MidX;
}

double FRRectWithSize()
{
  return 0.0;
}

double FRRectWithCenterAndSize(double a1, double a2, double a3)
{
  return a1 - a3 * 0.5;
}

void sub_100062738(uint64_t a1, void *a2)
{
  void *v3;
  id v4;
  void *v5;
  id v6;
  const __CFString *v7;
  void *v8;
  void *v9;
  _QWORD v10[2];
  _QWORD v11[2];

  v10[0] = CFSTR("identifier");
  v10[1] = CFSTR("type");
  v11[0] = a2;
  v3 = *(void **)(a1 + 40);
  v4 = a2;
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "backingTag"));
  v6 = objc_msgSend(v5, "tagType");
  v7 = CFSTR("topic");
  if (v6 == (id)2)
    v7 = CFSTR("channel");
  v11[1] = v7;
  v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v11, v10, 2));
  v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "fc_jsonString"));
  objc_msgSend(*(id *)(a1 + 32), "setAccessibilityValue:", v9);

}

id sub_100062DB8(uint64_t a1, void *a2)
{
  id v3;
  id v4;

  v3 = a2;
  v4 = objc_msgSend(objc_alloc((Class)FCSingleTagFeedDescriptor), "initWithContext:tag:feedConfiguration:", *(_QWORD *)(a1 + 32), v3, 0);

  return v4;
}

void sub_10006317C(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 56));
  _Unwind_Resume(a1);
}

FRDataSourceUpdate *sub_100063198(uint64_t a1)
{
  id WeakRetained;
  void *v3;
  id v4;
  void *v5;
  void *v6;
  FRDataSourceUpdate *v7;
  void *v8;
  void *v9;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (WeakRetained)
  {
    v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "array"));
    v4 = objc_msgSend(v3, "copy");
    objc_msgSend(WeakRetained, "setKnownTags:", v4);

    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "knownTags"));
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "_filteredTagsForTags:", v5));
    objc_msgSend(WeakRetained, "setFilteredTags:", v6);

    v7 = objc_opt_new(FRDataSourceUpdate);
    v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSIndexSet indexSetWithIndexesInRange:](NSIndexSet, "indexSetWithIndexesInRange:", *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56)));
    v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSIndexPath fr_indexPathsForRows:inSection:](NSIndexPath, "fr_indexPathsForRows:inSection:", v8, 0));
    -[FRDataSourceUpdate setInsertedIndexPaths:](v7, "setInsertedIndexPaths:", v9);

  }
  else
  {
    v7 = 0;
  }

  return v7;
}

BOOL sub_100063AEC(id a1, int64_t a2)
{
  return FCAccountQueueIsDestructiveActionType(a2);
}

BOOL sub_100063AF4(id a1, int64_t a2)
{
  return 1;
}

uint64_t sub_100063AFC(uint64_t a1, void *a2)
{
  return (*(uint64_t (**)(_QWORD, id))(*(_QWORD *)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32), objc_msgSend(a2, "integerValue"));
}

void sub_100064278(uint64_t a1, uint64_t a2, void *a3)
{
  id v5;
  uint64_t v6;
  id v7;
  _QWORD v8[4];
  id v9;
  uint64_t v10;
  uint64_t v11;

  v5 = a3;
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_1000642F8;
  v8[3] = &unk_1000DDDD0;
  v6 = *(_QWORD *)(a1 + 32);
  v9 = v5;
  v10 = v6;
  v11 = a2;
  v7 = v5;
  FCPerformBlockOnMainThread(v8);

}

void sub_1000642F8(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  id v4;
  NSObject *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  _QWORD v10[6];
  uint8_t buf[4];
  uint64_t v12;

  v2 = *(void **)(a1 + 32);
  if (v2)
  {
    v10[0] = _NSConcreteStackBlock;
    v10[1] = 3221225472;
    v10[2] = sub_100064420;
    v10[3] = &unk_1000D97A8;
    v3 = *(_QWORD *)(a1 + 40);
    v10[4] = v2;
    v10[5] = v3;
    v4 = v2;
    sub_100064420((uint64_t)v10);
  }
  else
  {
    v5 = FCOperationLog;
    if (os_log_type_enabled(FCOperationLog, OS_LOG_TYPE_DEFAULT))
    {
      v6 = *(_QWORD *)(a1 + 48);
      *(_DWORD *)buf = 134217984;
      v12 = v6;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "FROnboardingDataManager: userOnboardingCompletionHandler completed with %ld", buf, 0xCu);
    }
    v7 = *(_QWORD *)(a1 + 48);
    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "delegate"));
    v4 = v8;
    if (v7)
      v9 = 2;
    else
      v9 = 0;
    objc_msgSend(v8, "dataManager:userType:", *(_QWORD *)(a1 + 40), v9);
  }

}

void sub_100064420(uint64_t a1)
{
  NSObject *v2;
  void *v3;

  v2 = FCDefaultLog;
  if (os_log_type_enabled(FCDefaultLog, OS_LOG_TYPE_ERROR))
    sub_100081D68(a1, v2);
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "delegate"));
  objc_msgSend(v3, "dataManager:error:", *(_QWORD *)(a1 + 40), 0);

}

void sub_100064528(uint64_t a1)
{
  id v2;

  v2 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "delegate"));
  objc_msgSend(v2, "dataManagerFeedPrepared:", *(_QWORD *)(a1 + 32));

}

id NNSetupCompanionSyncLog()
{
  if (qword_10010A760 != -1)
    dispatch_once(&qword_10010A760, &stru_1000DDE18);
  return (id)qword_10010A758;
}

void sub_1000646A8(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.nanonews", "CompanionSync");
  v2 = (void *)qword_10010A758;
  qword_10010A758 = (uint64_t)v1;

}

id sub_100064934(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 40), "_decreaseReferenceCountForFontWithFileURL:", *(_QWORD *)(a1 + 32));
}

void sub_100064E5C(id a1)
{
  id v1;
  void *v2;

  v1 = objc_alloc_init((Class)NSCountedSet);
  v2 = (void *)qword_10010A770;
  qword_10010A770 = (uint64_t)v1;

}

void sub_100064E84(id a1)
{
  dispatch_queue_attr_t v1;
  dispatch_queue_t v2;
  void *v3;
  NSObject *v4;

  v1 = dispatch_queue_attr_make_with_qos_class(0, (dispatch_qos_class_t)0xFFFF8000, 0);
  v4 = objc_claimAutoreleasedReturnValue(v1);
  v2 = dispatch_queue_create("com.apple.news.font.registration", v4);
  v3 = (void *)qword_10010A780;
  qword_10010A780 = (uint64_t)v2;

}

void sub_100065208(id a1)
{
  FRCardConfiguration *v1;
  void *v2;

  v1 = objc_alloc_init(FRCardConfiguration);
  v2 = (void *)qword_10010A788;
  qword_10010A788 = (uint64_t)v1;

}

void sub_10006649C(id a1)
{
  id v1;
  id v2;
  uint64_t v3;
  void *v4;
  _QWORD v5[2];

  v1 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue(+[UIColor colorWithRed:green:blue:alpha:](UIColor, "colorWithRed:green:blue:alpha:", 0.941176471, 0.945098039, 0.952941176, 1.0)));
  v5[0] = objc_msgSend(v1, "CGColor");
  v2 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue(+[UIColor colorWithRed:green:blue:alpha:](UIColor, "colorWithRed:green:blue:alpha:", 1.0, 1.0, 1.0, 0.75)));
  v5[1] = objc_msgSend(v2, "CGColor");
  v3 = objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", v5, 2));
  v4 = (void *)qword_10010A798;
  qword_10010A798 = v3;

}

void FROpenInNewsAlert(void *a1)
{
  id v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  id v9;

  v1 = a1;
  v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSBundle mainBundle](NSBundle, "mainBundle"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "localizedStringForKey:value:table:", CFSTR("Content Unavailable"), &stru_1000DF290, 0));
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSBundle mainBundle](NSBundle, "mainBundle"));
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "localizedStringForKey:value:table:", CFSTR("This content is not available in Apple News."), &stru_1000DF290, 0));
  v9 = (id)objc_claimAutoreleasedReturnValue(+[UIAlertController alertControllerWithTitle:message:preferredStyle:](UIAlertController, "alertControllerWithTitle:message:preferredStyle:", v3, v5, 1));

  v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSBundle mainBundle](NSBundle, "mainBundle"));
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "localizedStringForKey:value:table:", CFSTR("OK"), &stru_1000DF290, 0));
  v8 = (void *)objc_claimAutoreleasedReturnValue(+[UIAlertAction actionWithTitle:style:handler:](UIAlertAction, "actionWithTitle:style:handler:", v7, 0, 0));
  objc_msgSend(v9, "addAction:", v8);

  objc_msgSend(v1, "presentViewController:animated:completion:", v9, 1, 0);
}

double *FR_HSL_TO_RGB(double *result, double *a2, double *a3, double a4, double a5, double a6)
{
  uint64_t v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;

  if (a5 == 0.0)
  {
    if (result)
      *result = a6;
    if (a2)
      *a2 = a6;
    if (!a3)
      return result;
LABEL_27:
    *a3 = a6;
    return result;
  }
  v6 = 0;
  v7 = a5 + a6 - a6 * a5;
  v8 = (a5 + 1.0) * a6;
  if (a6 >= 0.5)
    v8 = v7;
  v9 = -(v8 - a6 * 2.0);
  v12 = a4 + 0.333333333;
  v13 = a4;
  v14 = a4 + -0.333333333;
  do
  {
    v10 = *(double *)((char *)&v12 + v6);
    if (v10 < 0.0)
      v10 = v10 + 1.0;
    if (v10 > 1.0)
      v10 = v10 + -1.0;
    if (v10 * 6.0 >= 1.0)
    {
      v11 = v8;
      if (v10 + v10 >= 1.0)
      {
        v11 = v9;
        if (v10 * 3.0 < 2.0)
          v11 = v9 + (v8 - v9) * (0.666666667 - v10) * 6.0;
      }
    }
    else
    {
      v11 = v9 + (v8 - v9) * 6.0 * v10;
    }
    *(double *)((char *)&v12 + v6) = v11;
    v6 += 8;
  }
  while (v6 != 24);
  if (result)
    *result = v12;
  if (a2)
    *a2 = v13;
  if (a3)
  {
    a6 = v14;
    goto LABEL_27;
  }
  return result;
}

double *FR_RGB_TO_HSL(double *result, double *a2, double *a3, double a4, double a5, double a6)
{
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;

  if (a4 >= a5)
    v6 = a4;
  else
    v6 = a5;
  if (a4 >= a5)
    v7 = a5;
  else
    v7 = a4;
  if (v6 >= a6)
    v8 = v6;
  else
    v8 = a6;
  if (v7 >= a6)
    v7 = a6;
  v9 = v7 + v8;
  v10 = (v7 + v8) * 0.5;
  if (v10 <= 0.0)
  {
    if (result)
      *result = 0.0;
    if (a2)
      *a2 = 0.0;
  }
  else
  {
    v11 = v8 - v7;
    if (v8 - v7 <= 0.0)
    {
      if (result)
        *result = 0.0;
      if (a2)
        *a2 = v11;
    }
    else
    {
      if (v10 > 0.5)
        v9 = 2.0 - v8 - v7;
      v12 = v11 / v9;
      v13 = (v8 - a4) / v11;
      v14 = (v8 - a5) / v11;
      v15 = (v8 - a6) / v11;
      v16 = v15 + 5.0;
      if (v7 != a5)
        v16 = 1.0 - v14;
      v17 = v14 + 3.0;
      if (v7 != a4)
        v17 = 5.0 - v13;
      v18 = v13 + 1.0;
      v19 = 3.0 - v15;
      if (v7 == a6)
        v20 = v18;
      else
        v20 = v19;
      if (v8 == a5)
        v21 = v20;
      else
        v21 = v17;
      if (v8 == a4)
        v22 = v16;
      else
        v22 = v21;
      if (result)
        *result = v22 / 6.0;
      if (a2)
        *a2 = v12;
    }
  }
  if (a3)
    *a3 = v10;
  return result;
}

void sub_100067764(id a1)
{
  uint64_t v1;
  void *v2;
  id v3;

  v3 = objc_alloc_init((Class)UIView);
  v1 = objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "tintColor"));
  v2 = (void *)qword_10010A7A8;
  qword_10010A7A8 = v1;

}

void sub_1000677F4(id a1)
{
  uint64_t v1;
  void *v2;
  id v3;

  v3 = (id)objc_claimAutoreleasedReturnValue(+[UIColor systemPinkColor](UIColor, "systemPinkColor"));
  v1 = objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "colorWithAlphaComponent:", 0.5));
  v2 = (void *)qword_10010A7B8;
  qword_10010A7B8 = v1;

}

void sub_100067880(id a1)
{
  uint64_t v1;
  void *v2;

  v1 = objc_claimAutoreleasedReturnValue(+[UIColor colorWithRed:green:blue:alpha:](UIColor, "colorWithRed:green:blue:alpha:", 0.960784314, 0.62745098, 0.0901960784, 1.0));
  v2 = (void *)qword_10010A7C8;
  qword_10010A7C8 = v1;

}

void sub_100067908(id a1)
{
  uint64_t v1;
  void *v2;

  v1 = objc_claimAutoreleasedReturnValue(+[UIColor colorWithRed:green:blue:alpha:](UIColor, "colorWithRed:green:blue:alpha:", 0.941176471, 0.588235294, 0.196078431, 1.0));
  v2 = (void *)qword_10010A7D8;
  qword_10010A7D8 = v1;

}

void sub_100067990(id a1)
{
  uint64_t v1;
  void *v2;

  v1 = objc_claimAutoreleasedReturnValue(+[UIColor colorWithRed:green:blue:alpha:](UIColor, "colorWithRed:green:blue:alpha:", 0.360784314, 0.752941176, 0.549019608, 1.0));
  v2 = (void *)qword_10010A7E8;
  qword_10010A7E8 = v1;

}

void sub_100067A18(id a1)
{
  uint64_t v1;
  void *v2;

  v1 = objc_claimAutoreleasedReturnValue(+[UIColor colorWithRed:green:blue:alpha:](UIColor, "colorWithRed:green:blue:alpha:", 1.0, 0.556862745, 0.0, 1.0));
  v2 = (void *)qword_10010A7F8;
  qword_10010A7F8 = v1;

}

void sub_100067ADC(id a1)
{
  uint64_t v1;
  void *v2;

  v1 = objc_claimAutoreleasedReturnValue(+[UIColor colorWithWhite:alpha:](UIColor, "colorWithWhite:alpha:", 0.0, 0.82));
  v2 = (void *)qword_10010A808;
  qword_10010A808 = v1;

}

void sub_100067B74(id a1)
{
  uint64_t v1;
  void *v2;

  v1 = objc_claimAutoreleasedReturnValue(+[UIColor colorWithWhite:alpha:](UIColor, "colorWithWhite:alpha:", 1.0, 0.82));
  v2 = (void *)qword_10010A818;
  qword_10010A818 = v1;

}

void sub_100067C2C(id a1)
{
  void *v1;
  uint64_t v2;
  void *v3;
  id v4;

  v4 = (id)objc_claimAutoreleasedReturnValue(+[UIColor whiteColor](UIColor, "whiteColor"));
  v1 = (void *)objc_claimAutoreleasedReturnValue(+[UIColor blackColor](UIColor, "blackColor"));
  v2 = objc_claimAutoreleasedReturnValue(+[UIColor fr_dynamicColor:withDarkStyleVariant:](UIColor, "fr_dynamicColor:withDarkStyleVariant:", v4, v1));
  v3 = (void *)qword_10010A828;
  qword_10010A828 = v2;

}

void sub_100067CA0(id a1)
{
  void *v1;
  uint64_t v2;
  void *v3;
  id v4;

  v4 = (id)objc_claimAutoreleasedReturnValue(+[UIColor colorWithWhite:alpha:](UIColor, "colorWithWhite:alpha:", 1.0, 0.82));
  v1 = (void *)objc_claimAutoreleasedReturnValue(+[UIColor colorWithWhite:alpha:](UIColor, "colorWithWhite:alpha:", 0.0, 0.82));
  v2 = objc_claimAutoreleasedReturnValue(+[UIColor fr_dynamicColor:withDarkStyleVariant:](UIColor, "fr_dynamicColor:withDarkStyleVariant:", v4, v1));
  v3 = (void *)qword_10010A838;
  qword_10010A838 = v2;

}

void sub_100067DBC(id a1)
{
  void *v1;
  uint64_t v2;
  void *v3;
  id v4;

  v4 = (id)objc_claimAutoreleasedReturnValue(+[UIColor colorWithWhite:alpha:](UIColor, "colorWithWhite:alpha:", 0.917647059, 1.0));
  v1 = (void *)objc_claimAutoreleasedReturnValue(+[UIColor colorWithWhite:alpha:](UIColor, "colorWithWhite:alpha:", 0.250980392, 1.0));
  v2 = objc_claimAutoreleasedReturnValue(+[UIColor fr_dynamicColor:withDarkStyleVariant:](UIColor, "fr_dynamicColor:withDarkStyleVariant:", v4, v1));
  v3 = (void *)qword_10010A848;
  qword_10010A848 = v2;

}

void sub_100067EA0(id a1)
{
  void *v1;
  uint64_t v2;
  void *v3;
  id v4;

  v4 = (id)objc_claimAutoreleasedReturnValue(+[UIColor colorWithWhite:alpha:](UIColor, "colorWithWhite:alpha:", 0.9, 1.0));
  v1 = (void *)objc_claimAutoreleasedReturnValue(+[UIColor colorWithWhite:alpha:](UIColor, "colorWithWhite:alpha:", 0.1, 1.0));
  v2 = objc_claimAutoreleasedReturnValue(+[UIColor fr_dynamicColor:withDarkStyleVariant:](UIColor, "fr_dynamicColor:withDarkStyleVariant:", v4, v1));
  v3 = (void *)qword_10010A858;
  qword_10010A858 = v2;

}

void sub_100067FC0(id a1)
{
  void *v1;
  uint64_t v2;
  void *v3;
  id v4;

  v4 = (id)objc_claimAutoreleasedReturnValue(+[UIColor whiteColor](UIColor, "whiteColor"));
  v1 = (void *)objc_claimAutoreleasedReturnValue(+[UIColor blackColor](UIColor, "blackColor"));
  v2 = objc_claimAutoreleasedReturnValue(+[UIColor fr_dynamicColor:withDarkStyleVariant:](UIColor, "fr_dynamicColor:withDarkStyleVariant:", v4, v1));
  v3 = (void *)qword_10010A868;
  qword_10010A868 = v2;

}

void sub_100068074(id a1)
{
  void *v1;
  uint64_t v2;
  void *v3;
  id v4;

  v4 = (id)objc_claimAutoreleasedReturnValue(+[UIColor colorWithWhite:alpha:](UIColor, "colorWithWhite:alpha:", 0.88627451, 1.0));
  v1 = (void *)objc_claimAutoreleasedReturnValue(+[UIColor colorWithWhite:alpha:](UIColor, "colorWithWhite:alpha:", 0.11372549, 1.0));
  v2 = objc_claimAutoreleasedReturnValue(+[UIColor fr_dynamicColor:withDarkStyleVariant:](UIColor, "fr_dynamicColor:withDarkStyleVariant:", v4, v1));
  v3 = (void *)qword_10010A878;
  qword_10010A878 = v2;

}

void sub_100068140(id a1)
{
  void *v1;
  uint64_t v2;
  void *v3;
  id v4;

  v4 = (id)objc_claimAutoreleasedReturnValue(+[UIColor colorWithWhite:alpha:](UIColor, "colorWithWhite:alpha:", 0.58, 1.0));
  v1 = (void *)objc_claimAutoreleasedReturnValue(+[UIColor colorWithWhite:alpha:](UIColor, "colorWithWhite:alpha:", 0.42, 1.0));
  v2 = objc_claimAutoreleasedReturnValue(+[UIColor fr_dynamicColor:withDarkStyleVariant:](UIColor, "fr_dynamicColor:withDarkStyleVariant:", v4, v1));
  v3 = (void *)qword_10010A888;
  qword_10010A888 = v2;

}

void sub_10006820C(id a1)
{
  void *v1;
  uint64_t v2;
  void *v3;
  id v4;

  v4 = (id)objc_claimAutoreleasedReturnValue(+[UIColor colorWithRed:green:blue:alpha:](UIColor, "colorWithRed:green:blue:alpha:", 0.937254902, 0.937254902, 0.956862745, 1.0));
  v1 = (void *)objc_claimAutoreleasedReturnValue(+[UIColor colorWithRed:green:blue:alpha:](UIColor, "colorWithRed:green:blue:alpha:", 0.062745098, 0.062745098, 0.0431372549, 1.0));
  v2 = objc_claimAutoreleasedReturnValue(+[UIColor fr_dynamicColor:withDarkStyleVariant:](UIColor, "fr_dynamicColor:withDarkStyleVariant:", v4, v1));
  v3 = (void *)qword_10010A898;
  qword_10010A898 = v2;

}

void sub_1000682F0(id a1)
{
  void *v1;
  uint64_t v2;
  void *v3;
  id v4;

  v4 = (id)objc_claimAutoreleasedReturnValue(+[UIColor blackColor](UIColor, "blackColor"));
  v1 = (void *)objc_claimAutoreleasedReturnValue(+[UIColor systemGrayColor](UIColor, "systemGrayColor"));
  v2 = objc_claimAutoreleasedReturnValue(+[UIColor fr_dynamicColor:withDarkStyleVariant:](UIColor, "fr_dynamicColor:withDarkStyleVariant:", v4, v1));
  v3 = (void *)qword_10010A8A8;
  qword_10010A8A8 = v2;

}

void sub_1000683B0(id a1)
{
  uint64_t v1;
  void *v2;

  v1 = objc_claimAutoreleasedReturnValue(+[UIColor colorWithRed:green:blue:alpha:](UIColor, "colorWithRed:green:blue:alpha:", 0.960784314, 0.62745098, 0.0901960784, 1.0));
  v2 = (void *)qword_10010A8B8;
  qword_10010A8B8 = v1;

}

void sub_100068438(id a1)
{
  void *v1;
  uint64_t v2;
  void *v3;
  id v4;

  v4 = (id)objc_claimAutoreleasedReturnValue(+[UIColor colorWithWhite:alpha:](UIColor, "colorWithWhite:alpha:", 0.92, 1.0));
  v1 = (void *)objc_claimAutoreleasedReturnValue(+[UIColor colorWithWhite:alpha:](UIColor, "colorWithWhite:alpha:", 0.08, 1.0));
  v2 = objc_claimAutoreleasedReturnValue(+[UIColor fr_dynamicColor:withDarkStyleVariant:](UIColor, "fr_dynamicColor:withDarkStyleVariant:", v4, v1));
  v3 = (void *)qword_10010A8C8;
  qword_10010A8C8 = v2;

}

void sub_100068510(id a1)
{
  void *v1;
  uint64_t v2;
  void *v3;
  id v4;

  v4 = (id)objc_claimAutoreleasedReturnValue(+[UIColor colorWithRed:green:blue:alpha:](UIColor, "colorWithRed:green:blue:alpha:", 0.235294118, 0.235294118, 0.262745098, 0.3));
  v1 = (void *)objc_claimAutoreleasedReturnValue(+[UIColor colorWithRed:green:blue:alpha:](UIColor, "colorWithRed:green:blue:alpha:", 0.921568627, 0.921568627, 0.960784314, 0.19));
  v2 = objc_claimAutoreleasedReturnValue(+[UIColor fr_dynamicColor:withDarkStyleVariant:](UIColor, "fr_dynamicColor:withDarkStyleVariant:", v4, v1));
  v3 = (void *)qword_10010A8D8;
  qword_10010A8D8 = v2;

}

void sub_1000685FC(id a1)
{
  uint64_t v1;
  void *v2;

  v1 = objc_claimAutoreleasedReturnValue(+[UIColor colorWithWhite:alpha:](UIColor, "colorWithWhite:alpha:", 0.156862745, 1.0));
  v2 = (void *)qword_10010A8E8;
  qword_10010A8E8 = v1;

}

void sub_100068674(id a1)
{
  uint64_t v1;
  void *v2;

  v1 = objc_claimAutoreleasedReturnValue(+[UIColor colorWithWhite:alpha:](UIColor, "colorWithWhite:alpha:", 0.843137255, 1.0));
  v2 = (void *)qword_10010A8F8;
  qword_10010A8F8 = v1;

}

void sub_10006872C(id a1)
{
  uint64_t v1;
  void *v2;

  v1 = objc_claimAutoreleasedReturnValue(+[UIColor colorWithWhite:alpha:](UIColor, "colorWithWhite:alpha:", 0.301960784, 1.0));
  v2 = (void *)qword_10010A908;
  qword_10010A908 = v1;

}

void sub_1000687A4(id a1)
{
  uint64_t v1;
  void *v2;

  v1 = objc_claimAutoreleasedReturnValue(+[UIColor colorWithWhite:alpha:](UIColor, "colorWithWhite:alpha:", 0.698039216, 1.0));
  v2 = (void *)qword_10010A918;
  qword_10010A918 = v1;

}

void sub_1000688B4(id a1)
{
  void *v1;
  uint64_t v2;
  void *v3;
  id v4;

  v4 = (id)objc_claimAutoreleasedReturnValue(+[UIColor colorWithWhite:alpha:](UIColor, "colorWithWhite:alpha:", 0.58, 1.0));
  v1 = (void *)objc_claimAutoreleasedReturnValue(+[UIColor colorWithWhite:alpha:](UIColor, "colorWithWhite:alpha:", 0.42, 1.0));
  v2 = objc_claimAutoreleasedReturnValue(+[UIColor fr_dynamicColor:withDarkStyleVariant:](UIColor, "fr_dynamicColor:withDarkStyleVariant:", v4, v1));
  v3 = (void *)qword_10010A928;
  qword_10010A928 = v2;

}

id sub_100068A84(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;

  v3 = objc_msgSend(a2, "userInterfaceStyle");
  v4 = 40;
  if (v3 == (id)2)
    v4 = 32;
  return *(id *)(a1 + v4);
}

id sub_100068E1C(uint64_t a1, void *a2)
{
  id v3;
  CGColorSpace *ColorSpace;
  id v5;
  const CGFloat *v6;
  CGColor *v7;
  CGFloat components[4];

  v3 = objc_retainAutorelease(a2);
  ColorSpace = CGColorGetColorSpace((CGColorRef)objc_msgSend(v3, "CGColor"));
  if (CGColorSpaceGetModel(ColorSpace))
  {
    v5 = v3;
  }
  else
  {
    v6 = CGColorGetComponents((CGColorRef)objc_msgSend(objc_retainAutorelease(v3), "CGColor"));
    components[0] = *v6;
    components[1] = components[0];
    components[2] = components[0];
    components[3] = v6[1];
    v7 = CGColorCreate(*(CGColorSpaceRef *)(a1 + 32), components);
    v5 = (id)objc_claimAutoreleasedReturnValue(+[UIColor colorWithCGColor:](UIColor, "colorWithCGColor:", v7));
    CGColorRelease(v7);
  }

  return v5;
}

id sub_1000690A8(uint64_t a1, void *a2)
{
  id v3;
  CGColorSpace *ColorSpace;
  id v5;
  const CGFloat *v6;
  CGColor *v7;
  CGFloat components[4];

  v3 = objc_retainAutorelease(a2);
  ColorSpace = CGColorGetColorSpace((CGColorRef)objc_msgSend(v3, "CGColor"));
  if (CGColorSpaceGetModel(ColorSpace))
  {
    v5 = v3;
  }
  else
  {
    v6 = CGColorGetComponents((CGColorRef)objc_msgSend(objc_retainAutorelease(v3), "CGColor"));
    components[0] = *v6;
    components[1] = components[0];
    components[2] = components[0];
    components[3] = v6[1];
    v7 = CGColorCreate(*(CGColorSpaceRef *)(a1 + 32), components);
    v5 = (id)objc_claimAutoreleasedReturnValue(+[UIColor colorWithCGColor:](UIColor, "colorWithCGColor:", v7));
    CGColorRelease(v7);
  }

  return v5;
}

void sub_100069424(uint64_t a1, double a2, double a3, double a4, double a5)
{
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  id v12;

  v8 = *(void **)(a1 + 32);
  v12 = (id)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:"));
  v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", a3));
  v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", a4));
  v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", a5));
  objc_msgSend(v8, "appendFormat:", CFSTR("R : %@ G : %@ B : %@ A : %@"), v12, v9, v10, v11);

}

void sub_1000694E8(uint64_t a1, double a2, double a3, double a4, double a5)
{
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  id v12;

  v8 = *(void **)(a1 + 32);
  v12 = (id)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:"));
  v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", a3));
  v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", a4));
  v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", a5));
  objc_msgSend(v8, "appendFormat:", CFSTR("H : %@ S : %@ B : %@ A : %@"), v12, v9, v10, v11);

}

void sub_1000695E0(id a1, double a2, double a3, double a4, double a5)
{
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  int v13;
  void *v14;
  __int16 v15;
  void *v16;
  __int16 v17;
  void *v18;
  __int16 v19;
  void *v20;

  if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT))
  {
    v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", a2));
    v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", a3));
    v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", a4));
    v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", a5));
    v13 = 138413058;
    v14 = v9;
    v15 = 2112;
    v16 = v10;
    v17 = 2112;
    v18 = v11;
    v19 = 2112;
    v20 = v12;
    _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT, "R : %@ G : %@ B : %@ A : %@", (uint8_t *)&v13, 0x2Au);

  }
}

void sub_100069720(id a1, double a2, double a3, double a4, double a5)
{
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  int v13;
  void *v14;
  __int16 v15;
  void *v16;
  __int16 v17;
  void *v18;
  __int16 v19;
  void *v20;

  if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT))
  {
    v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", a2));
    v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", a3));
    v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", a4));
    v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", a5));
    v13 = 138413058;
    v14 = v9;
    v15 = 2112;
    v16 = v10;
    v17 = 2112;
    v18 = v11;
    v19 = 2112;
    v20 = v12;
    _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT, "H : %@ S : %@ B : %@ A : %@", (uint8_t *)&v13, 0x2Au);

  }
}

void sub_1000698F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_100069908(uint64_t result, double a2)
{
  *(double *)(*(_QWORD *)(*(_QWORD *)(result + 32) + 8) + 24) = a2;
  return result;
}

void sub_1000699A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1000699C0(uint64_t result, double a2, double a3)
{
  *(double *)(*(_QWORD *)(*(_QWORD *)(result + 32) + 8) + 24) = a3;
  return result;
}

void sub_100069A60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_100069A78(uint64_t result, double a2, double a3, double a4)
{
  *(double *)(*(_QWORD *)(*(_QWORD *)(result + 32) + 8) + 24) = a4;
  return result;
}

void sub_100069B18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_100069B30(uint64_t result, double a2, double a3, double a4, double a5)
{
  *(double *)(*(_QWORD *)(*(_QWORD *)(result + 32) + 8) + 24) = a5;
  return result;
}

void sub_100069BD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_100069BE8(uint64_t result, double a2)
{
  *(double *)(*(_QWORD *)(*(_QWORD *)(result + 32) + 8) + 24) = a2;
  return result;
}

void sub_100069C88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_100069CA0(uint64_t result, double a2, double a3)
{
  *(double *)(*(_QWORD *)(*(_QWORD *)(result + 32) + 8) + 24) = a3;
  return result;
}

void sub_100069D40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_100069D58(uint64_t result, double a2, double a3, double a4)
{
  *(double *)(*(_QWORD *)(*(_QWORD *)(result + 32) + 8) + 24) = a4;
  return result;
}

void sub_10006A2A8(id a1)
{
  uint64_t v1;
  void *v2;

  v1 = objc_claimAutoreleasedReturnValue(+[UIColor colorWithRed:green:blue:alpha:](UIColor, "colorWithRed:green:blue:alpha:", 0.360784314, 0.752941176, 0.549019608, 1.0));
  v2 = (void *)qword_10010A938;
  qword_10010A938 = v1;

}

void sub_10006A33C(id a1)
{
  uint64_t v1;
  void *v2;

  v1 = objc_claimAutoreleasedReturnValue(+[UIColor colorWithRed:green:blue:alpha:](UIColor, "colorWithRed:green:blue:alpha:", 0.941176471, 0.588235294, 0.196078431, 1.0));
  v2 = (void *)qword_10010A948;
  qword_10010A948 = v1;

}

void sub_10006A4A0(id a1)
{
  uint64_t v1;
  void *v2;

  v1 = objc_claimAutoreleasedReturnValue(+[UIColor colorWithRed:green:blue:alpha:](UIColor, "colorWithRed:green:blue:alpha:", 1.0, 0.11372549, 0.282352941, 1.0));
  v2 = (void *)qword_10010A958;
  qword_10010A958 = v1;

}

void sub_10006A524(id a1)
{
  uint64_t v1;
  void *v2;

  v1 = objc_claimAutoreleasedReturnValue(+[UIColor colorWithRed:green:blue:alpha:](UIColor, "colorWithRed:green:blue:alpha:", 0.43, 0.43, 0.45, 1.0));
  v2 = (void *)qword_10010A968;
  qword_10010A968 = v1;

}

TSLocalDraftsDeviceManagerType *__cdecl sub_10006A628(id a1, TFResolver *a2)
{
  return (TSLocalDraftsDeviceManagerType *)objc_alloc_init((Class)TSLocalDraftsDeviceManager);
}

void sub_10006A8D4(uint64_t a1)
{
  void *v2;
  void *v3;
  id v4;
  void *v5;
  void *v6;
  void *v7;
  id v8;
  id v9;
  id v10;
  id v11;
  char *v12;
  char *v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  void *i;
  void *v18;
  id v19;
  char *v20;
  id v21;
  char *v22;
  void *v23;
  uint64_t v24;
  _QWORD *v25;
  void *v26;
  void *v27;
  id v28;
  id v29;
  id v30;
  void *v31;
  uint64_t v32;
  _QWORD v33[4];
  _QWORD *v34;
  _QWORD v35[9];
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  _BYTE v40[128];

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "generator"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "generateDerivedData"));

  v4 = v3;
  v5 = v4;
  if (v4)
  {
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "allAggregates"));
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "allValues"));
    v8 = objc_msgSend(v7, "mutableCopy");

    v38 = 0u;
    v39 = 0u;
    v36 = 0u;
    v37 = 0u;
    v9 = v8;
    v10 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v36, v40, 16);
    v32 = a1;
    if (v10)
    {
      v11 = v10;
      v12 = 0;
      v13 = 0;
      v14 = *(_QWORD *)v37;
      v15 = -1;
      v16 = -1;
      do
      {
        for (i = 0; i != v11; i = (char *)i + 1)
        {
          if (*(_QWORD *)v37 != v14)
            objc_enumerationMutation(v9);
          v18 = *(void **)(*((_QWORD *)&v36 + 1) + 8 * (_QWORD)i);
          v19 = objc_msgSend(v18, "timestamp");
          if ((unint64_t)v19 < v16)
            v16 = (unint64_t)v19;
          v20 = (char *)objc_msgSend(v18, "timestamp");
          if (v20 > v13)
            v13 = v20;
          v21 = objc_msgSend(v18, "eventCount");
          if ((unint64_t)v21 < v15)
            v15 = (unint64_t)v21;
          v22 = (char *)objc_msgSend(v18, "eventCount");
          if (v22 > v12)
            v12 = v22;
        }
        v11 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v36, v40, 16);
      }
      while (v11);
    }
    else
    {
      v12 = 0;
      v13 = 0;
      v15 = -1;
      v16 = -1;
    }

    v31 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(v32 + 32), "configurationManager"));
    v23 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v31, "configuration"));
    objc_msgSend(v23, "derivedPersonalizationDataBalanceValue");
    v35[0] = _NSConcreteStackBlock;
    v35[1] = 3221225472;
    v35[2] = sub_10006ABE4;
    v35[3] = &unk_1000DE390;
    v35[4] = &v13[-v16];
    v35[5] = v16;
    v35[6] = &v12[-v15];
    v35[7] = v15;
    v35[8] = v24;
    v33[0] = _NSConcreteStackBlock;
    v33[1] = 3221225472;
    v33[2] = sub_10006AC84;
    v33[3] = &unk_1000DE3B8;
    v34 = objc_retainBlock(v35);
    v25 = v34;
    objc_msgSend(v9, "sortUsingComparator:", v33);
    v26 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "fc_safeSubarrayWithCountFromBack:", *(_QWORD *)(v32 + 48)));
    v27 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v26, "fc_dictionaryWithKeyBlock:", &stru_1000DE3F8));
    v28 = objc_alloc((Class)FCDerivedPersonalizationData);
    v29 = objc_msgSend(v5, "scoringType");
    objc_msgSend(v5, "decayRate");
    v30 = objc_msgSend(v28, "initWithAggregates:scoringType:decayRate:", v27, v29);
    (*(void (**)(void))(*(_QWORD *)(v32 + 40) + 16))();

  }
  else
  {
    (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
  }

}

double sub_10006ABE4(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  double v5;
  double v6;
  double v7;

  v3 = a2;
  v4 = v3;
  v5 = 1.0;
  v6 = 1.0;
  if (*(_QWORD *)(a1 + 32))
    v6 = (double)((unint64_t)objc_msgSend(v3, "timestamp") - *(_QWORD *)(a1 + 40))
       / (double)*(unint64_t *)(a1 + 32);
  if (*(_QWORD *)(a1 + 48))
    v5 = (double)((unint64_t)objc_msgSend(v4, "eventCount") - *(_QWORD *)(a1 + 56))
       / (double)*(unint64_t *)(a1 + 48);
  v7 = v5 * (1.0 - *(double *)(a1 + 64)) + v6 * *(double *)(a1 + 64);

  return v7;
}

uint64_t sub_10006AC84(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  unsigned __int8 v8;
  uint64_t v9;
  void *v10;
  unsigned __int8 v11;
  double v12;
  double v13;

  v5 = a2;
  v6 = a3;
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "featureKey"));
  v8 = objc_msgSend(v7, "isEqualToString:", CFSTR("f0"));

  if ((v8 & 1) != 0)
  {
    v9 = 1;
  }
  else
  {
    v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "featureKey"));
    v11 = objc_msgSend(v10, "isEqualToString:", CFSTR("f0"));

    if ((v11 & 1) != 0)
    {
      v9 = -1;
    }
    else
    {
      v12 = (*(double (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
      v13 = (*(double (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
      if (v12 < v13)
        v9 = -1;
      else
        v9 = v12 > v13;
    }
  }

  return v9;
}

NSString *__cdecl sub_10006AD68(id a1, NTPBPersonalizationAggregate *a2)
{
  return (NSString *)-[NTPBPersonalizationAggregate featureKey](a2, "featureKey");
}

void sub_10006ADB0(uint64_t a1)
{
  void *v2;
  uint64_t *v3;
  unsigned int v4;
  const __CFArray *v5;
  const __CFArray *v6;
  void *v7;
  void *v8;
  const void *ValueAtIndex;
  float v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  void *v14;
  void *v15;
  CFTypeRef cf;

  v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSFileManager defaultManager](NSFileManager, "defaultManager"));
  v3 = (uint64_t *)(a1 + 32);
  v4 = objc_msgSend(v2, "fileExistsAtPath:", *(_QWORD *)(a1 + 32));

  if (v4)
  {
    v15 = 0;
    cf = 0;
    v5 = (const __CFArray *)CPBitmapCreateImagesFromPath(*v3, &v15, 2, &cf);
    v6 = v5;
    v7 = v15;
    if (v5 && CFArrayGetCount(v5) >= 1)
    {
      v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "objectForKeyedSubscript:", CFSTR("FRImageScaleKey")));
      ValueAtIndex = CFArrayGetValueAtIndex(v6, 0);
      objc_msgSend(v8, "floatValue");
      v11 = objc_claimAutoreleasedReturnValue(+[UIImage imageWithCGImage:scale:orientation:](UIImage, "imageWithCGImage:scale:orientation:", ValueAtIndex, 0, v10));
      v12 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
      v13 = *(void **)(v12 + 40);
      *(_QWORD *)(v12 + 40) = v11;

    }
    else
    {
      v14 = (void *)FCDefaultLog;
      if (os_log_type_enabled(FCDefaultLog, OS_LOG_TYPE_ERROR))
        sub_1000828A0(v3, (uint64_t)&cf, v14);
    }
    if (cf)
      CFRelease(cf);
    if (v6)
      CFRelease(v6);

  }
}

void sub_10006AF78(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  id v7;
  id v8;
  id v9;
  uint64_t v10;
  void *v11;
  void *v12;
  id v13;
  void *v14;
  double v15;
  double v16;
  void *v17;
  id v18;
  NSObject *v19;
  uint8_t buf;
  _BYTE v21[15];
  id v22;
  id v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  _BYTE v28[128];
  NSURLResourceKey v29;

  v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSFileManager defaultManager](NSFileManager, "defaultManager"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "rootPath"));
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSURL fileURLWithPath:isDirectory:](NSURL, "fileURLWithPath:isDirectory:", v3, 1));
  v29 = NSURLContentModificationDateKey;
  v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v29, 1));
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "contentsOfDirectoryAtURL:includingPropertiesForKeys:options:error:", v4, v5, 0, 0));

  v26 = 0u;
  v27 = 0u;
  v24 = 0u;
  v25 = 0u;
  v7 = v6;
  v8 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v24, v28, 16);
  if (v8)
  {
    v9 = v8;
    v10 = *(_QWORD *)v25;
    do
    {
      v11 = 0;
      do
      {
        if (*(_QWORD *)v25 != v10)
          objc_enumerationMutation(v7);
        v12 = *(void **)(*((_QWORD *)&v24 + 1) + 8 * (_QWORD)v11);
        v23 = 0;
        objc_msgSend(v12, "getResourceValue:forKey:error:", &v23, NSURLContentModificationDateKey, 0);
        v13 = v23;
        v14 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](NSDate, "date"));
        objc_msgSend(v14, "timeIntervalSinceDate:", v13);
        v16 = v15;

        if (v16 > *(double *)(a1 + 40))
        {
          v17 = (void *)objc_claimAutoreleasedReturnValue(+[NSFileManager defaultManager](NSFileManager, "defaultManager"));
          v22 = 0;
          objc_msgSend(v17, "removeItemAtURL:error:", v12, &v22);
          v18 = v22;

          if (v18)
          {
            v19 = FCDefaultLog;
            if (os_log_type_enabled(FCDefaultLog, OS_LOG_TYPE_ERROR))
              sub_100082948(&buf, v21, v19);
          }

        }
        v11 = (char *)v11 + 1;
      }
      while (v9 != v11);
      v9 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v24, v28, 16);
    }
    while (v9);
  }

}

void sub_10006B384(uint64_t a1)
{
  const __CFAllocator *Default;
  CFArrayRef v3;
  uint64_t v4;
  void *v5;
  NSDictionary *v6;
  uint64_t v7;
  void *v8;
  double Current;
  NSObject *v10;
  double v11;
  uint64_t v12;
  CFTypeRef cf;
  uint8_t buf[4];
  uint64_t v15;
  __int16 v16;
  double v17;
  const __CFString *v18;
  void *v19;
  void *values;

  cf = 0;
  values = *(void **)(a1 + 56);
  Default = CFAllocatorGetDefault();
  v3 = CFArrayCreate(Default, (const void **)&values, 1, &kCFTypeArrayCallBacks);
  v18 = CFSTR("FRImageScaleKey");
  v4 = *(_QWORD *)(a1 + 32);
  objc_msgSend(*(id *)(a1 + 40), "scale");
  v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:"));
  v19 = v5;
  v6 = +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v19, &v18, 1);

  v7 = CPBitmapWriteImagesToPath(v3, 1, v6, v4, 0, &cf);
  if (v3)
    CFRelease(v3);
  if (!v7)
  {
    v8 = (void *)FCDefaultLog;
    if (os_log_type_enabled(FCDefaultLog, OS_LOG_TYPE_ERROR))
      sub_100082984((uint64_t)&cf, v8);
  }
  if (cf)
    CFRelease(cf);
  CGImageRelease(*(CGImageRef *)(a1 + 56));
  Current = CFAbsoluteTimeGetCurrent();
  v10 = FCDefaultLog;
  if (os_log_type_enabled(FCDefaultLog, OS_LOG_TYPE_DEFAULT))
  {
    v11 = Current - *(double *)(a1 + 64);
    v12 = *(_QWORD *)(a1 + 48);
    *(_DWORD *)buf = 138412546;
    v15 = v12;
    v16 = 2048;
    v17 = v11;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "Cached image %@ to disk in %f ms", buf, 0x16u);
  }
}

uint64_t sub_10006B53C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void sub_10006B920(uint64_t a1, void *a2)
{
  void *v3;
  id v4;
  void *v5;
  void *v6;
  void *v7;
  id v8;

  v3 = *(void **)(a1 + 32);
  v4 = a2;
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "bundleIDMapping"));
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "jsonEncodableObject"));
  objc_msgSend(v4, "fc_safelySetObjectAllowingNil:forKey:", v6, CFSTR("bundle-id-mapping-data"));

  v8 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "urlMapping"));
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "jsonEncodableObject"));
  objc_msgSend(v4, "fc_safelySetObjectAllowingNil:forKey:", v7, CFSTR("url-mapping-data"));

}

void sub_10006BB64(uint64_t a1)
{
  void *v2;
  id v3;
  void *v4;
  uint64_t v5;
  void *v6;
  id v7;

  v2 = *(void **)(a1 + 32);
  v3 = FRURLForNewsAppCachesDirectory();
  v4 = (void *)objc_claimAutoreleasedReturnValue(v3);
  objc_msgSend(v2, "fc_quicklyClearDirectory:callbackQueue:completion:", v4, 0, 0);

  v5 = FCURLForContainerizedUserAccountCachesDirectory(1);
  v6 = (void *)objc_claimAutoreleasedReturnValue(v5);
  v7 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "URLByAppendingPathComponent:isDirectory:", CFSTR("com.apple.news"), 1));

  objc_msgSend(*(id *)(a1 + 32), "fc_quicklyClearDirectory:callbackQueue:completion:", v7, 0, 0);
}

void sub_10006BBFC(uint64_t a1)
{
  void *v1;
  uint64_t v2;
  id v3;

  v1 = *(void **)(a1 + 32);
  v2 = FRURLForNewsAppDocumentsDirectory();
  v3 = (id)objc_claimAutoreleasedReturnValue(v2);
  objc_msgSend(v1, "fc_removeContentsOfDirectoryAtURL:", v3);

}

void sub_10006CAD0(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;

  v5 = a2;
  v6 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(a3, "dictionary"));
  objc_msgSend(*(id *)(a1 + 32), "setObject:forKeyedSubscript:", v6, v5);

}

void sub_10006D0C8(id a1)
{
  uint64_t v1;
  void *v2;

  v1 = objc_claimAutoreleasedReturnValue(+[NSSet setWithArray:](NSSet, "setWithArray:", &off_1000E4AA8));
  v2 = (void *)qword_10010A978;
  qword_10010A978 = v1;

}

void sub_10006D9EC(uint64_t a1)
{
  _QWORD v2[4];
  id v3;
  id v4;

  v2[0] = _NSConcreteStackBlock;
  v2[1] = 3221225472;
  v2[2] = sub_10006DA6C;
  v2[3] = &unk_1000D9AA8;
  v3 = *(id *)(a1 + 32);
  v4 = *(id *)(a1 + 40);
  FCPerformBlockOnMainThread(v2);

}

void sub_10006DA6C(uint64_t a1)
{
  void *v1;
  _QWORD v2[4];
  id v3;

  v2[0] = _NSConcreteStackBlock;
  v2[1] = 3221225472;
  v2[2] = sub_10006DAD8;
  v2[3] = &unk_1000DAF28;
  v1 = *(void **)(a1 + 32);
  v3 = *(id *)(a1 + 40);
  objc_msgSend(v1, "executeOnce:", v2);

}

uint64_t sub_10006DAD8(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void sub_10006DAE8(uint64_t a1)
{
  void *v2;
  _QWORD v3[4];
  id v4;

  +[NSThread isMainThread](NSThread, "isMainThread");
  objc_msgSend(*(id *)(a1 + 32), "cancel");
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_10006DB6C;
  v3[3] = &unk_1000DAF28;
  v2 = *(void **)(a1 + 40);
  v4 = *(id *)(a1 + 48);
  objc_msgSend(v2, "executeOnce:", v3);

}

uint64_t sub_10006DB6C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

int64_t sub_10006DD20(id a1, FRArticlePrefetchOperation *a2, FRArticlePrefetchOperation *a3)
{
  return -[FRArticlePrefetchOperation compareExecutionOrder:](a2, "compareExecutionOrder:", a3);
}

void sub_10006E3B0(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  id v5;
  _QWORD v6[4];
  id v7;
  id v8;
  id v9;

  v3 = a2;
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_10006E448;
  v6[3] = &unk_1000DE568;
  v4 = *(void **)(a1 + 40);
  v7 = *(id *)(a1 + 32);
  v8 = v3;
  v9 = v4;
  v5 = v3;
  objc_msgSend(v7, "_doWorkIfNotCancelled:", v6);

}

id sub_10006E448(uint64_t a1)
{
  void *v2;
  void *v3;
  NSObject *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  id result;
  void *v11;
  void *v12;
  NSObject *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  NSObject *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  NSObject *v25;
  void *v26;
  void *v27;
  void *v28;
  _QWORD v29[5];
  id v30;
  _QWORD v31[5];
  id v32;
  _QWORD v33[5];
  id v34;
  _QWORD v35[5];
  id v36;
  uint8_t buf[4];
  void *v38;

  switch((unint64_t)objc_msgSend(*(id *)(a1 + 32), "component"))
  {
    case 0uLL:
      v2 = (void *)FRArticlePrefetchLog;
      if (os_log_type_enabled((os_log_t)FRArticlePrefetchLog, OS_LOG_TYPE_INFO))
      {
        v3 = *(void **)(a1 + 32);
        v4 = v2;
        v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "headline"));
        v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "articleID"));
        *(_DWORD *)buf = 138543362;
        v38 = v6;
        _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "will start prefetching JSON for article ID %{public}@", buf, 0xCu);

      }
      v35[0] = _NSConcreteStackBlock;
      v35[1] = 3221225472;
      v35[2] = sub_10006E87C;
      v35[3] = &unk_1000D9AA8;
      v7 = *(void **)(a1 + 40);
      v35[4] = *(_QWORD *)(a1 + 32);
      v36 = *(id *)(a1 + 48);
      v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "loadJSONWithCompletionBlock:", v35));
      v9 = v36;
      goto LABEL_17;
    case 1uLL:
      v11 = (void *)FRArticlePrefetchLog;
      if (os_log_type_enabled((os_log_t)FRArticlePrefetchLog, OS_LOG_TYPE_INFO))
      {
        v12 = *(void **)(a1 + 32);
        v13 = v11;
        v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "headline"));
        v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "articleID"));
        *(_DWORD *)buf = 138543362;
        v38 = v15;
        _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_INFO, "will start prefetching fonts for article ID %{public}@", buf, 0xCu);

      }
      v33[0] = _NSConcreteStackBlock;
      v33[1] = 3221225472;
      v33[2] = sub_10006E964;
      v33[3] = &unk_1000D9AA8;
      v16 = *(void **)(a1 + 40);
      v33[4] = *(_QWORD *)(a1 + 32);
      v34 = *(id *)(a1 + 48);
      v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v16, "loadFontsWithCompletionBlock:", v33));
      v9 = v34;
      goto LABEL_17;
    case 2uLL:
      v17 = (void *)FRArticlePrefetchLog;
      if (os_log_type_enabled((os_log_t)FRArticlePrefetchLog, OS_LOG_TYPE_INFO))
      {
        v18 = *(void **)(a1 + 32);
        v19 = v17;
        v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v18, "headline"));
        v21 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v20, "articleID"));
        *(_DWORD *)buf = 138543362;
        v38 = v21;
        _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_INFO, "will start prefetching asset URLs for article ID %{public}@", buf, 0xCu);

      }
      v31[0] = _NSConcreteStackBlock;
      v31[1] = 3221225472;
      v31[2] = sub_10006EA4C;
      v31[3] = &unk_1000D9AA8;
      v22 = *(void **)(a1 + 40);
      v31[4] = *(_QWORD *)(a1 + 32);
      v32 = *(id *)(a1 + 48);
      v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v22, "loadAssetURLsWithCompletionBlock:", v31));
      v9 = v32;
      goto LABEL_17;
    case 3uLL:
      v23 = (void *)FRArticlePrefetchLog;
      if (os_log_type_enabled((os_log_t)FRArticlePrefetchLog, OS_LOG_TYPE_INFO))
      {
        v24 = *(void **)(a1 + 32);
        v25 = v23;
        v26 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v24, "headline"));
        v27 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v26, "articleID"));
        *(_DWORD *)buf = 138543362;
        v38 = v27;
        _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_INFO, "will start prefetching assets for article ID %{public}@", buf, 0xCu);

      }
      v29[0] = _NSConcreteStackBlock;
      v29[1] = 3221225472;
      v29[2] = sub_10006EB34;
      v29[3] = &unk_1000D9AA8;
      v28 = *(void **)(a1 + 40);
      v29[4] = *(_QWORD *)(a1 + 32);
      v30 = *(id *)(a1 + 48);
      v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v28, "loadAssetsWithCompletionBlock:", v29));
      v9 = v30;
LABEL_17:

      result = v8;
      break;
    default:
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
        sub_100083638();
      result = 0;
      break;
  }
  return result;
}

uint64_t sub_10006E87C(uint64_t a1)
{
  void *v2;
  void *v3;
  NSObject *v4;
  void *v5;
  void *v6;
  int v8;
  void *v9;

  v2 = (void *)FRArticlePrefetchLog;
  if (os_log_type_enabled((os_log_t)FRArticlePrefetchLog, OS_LOG_TYPE_INFO))
  {
    v3 = *(void **)(a1 + 32);
    v4 = v2;
    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "headline"));
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "articleID"));
    v8 = 138543362;
    v9 = v6;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "did finish prefetching JSON for article ID %{public}@", (uint8_t *)&v8, 0xCu);

  }
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
}

uint64_t sub_10006E964(uint64_t a1)
{
  void *v2;
  void *v3;
  NSObject *v4;
  void *v5;
  void *v6;
  int v8;
  void *v9;

  v2 = (void *)FRArticlePrefetchLog;
  if (os_log_type_enabled((os_log_t)FRArticlePrefetchLog, OS_LOG_TYPE_INFO))
  {
    v3 = *(void **)(a1 + 32);
    v4 = v2;
    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "headline"));
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "articleID"));
    v8 = 138543362;
    v9 = v6;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "did finish prefetching fonts for article ID %{public}@", (uint8_t *)&v8, 0xCu);

  }
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
}

uint64_t sub_10006EA4C(uint64_t a1)
{
  void *v2;
  void *v3;
  NSObject *v4;
  void *v5;
  void *v6;
  int v8;
  void *v9;

  v2 = (void *)FRArticlePrefetchLog;
  if (os_log_type_enabled((os_log_t)FRArticlePrefetchLog, OS_LOG_TYPE_INFO))
  {
    v3 = *(void **)(a1 + 32);
    v4 = v2;
    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "headline"));
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "articleID"));
    v8 = 138543362;
    v9 = v6;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "did finish prefetching asset URLs for article ID %{public}@", (uint8_t *)&v8, 0xCu);

  }
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
}

uint64_t sub_10006EB34(uint64_t a1)
{
  void *v2;
  void *v3;
  NSObject *v4;
  void *v5;
  void *v6;
  int v8;
  void *v9;

  v2 = (void *)FRArticlePrefetchLog;
  if (os_log_type_enabled((os_log_t)FRArticlePrefetchLog, OS_LOG_TYPE_INFO))
  {
    v3 = *(void **)(a1 + 32);
    v4 = v2;
    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "headline"));
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "articleID"));
    v8 = 138543362;
    v9 = v6;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "did finish prefetching assets for article ID %{public}@", (uint8_t *)&v8, 0xCu);

  }
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
}

void sub_10006ECF8(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  id v5;
  _QWORD v6[4];
  id v7;
  id v8;
  id v9;

  v3 = a2;
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_10006ED90;
  v6[3] = &unk_1000DE568;
  v4 = *(void **)(a1 + 40);
  v7 = *(id *)(a1 + 32);
  v8 = v3;
  v9 = v4;
  v5 = v3;
  objc_msgSend(v7, "_doWorkIfNotCancelled:", v6);

}

id sub_10006ED90(id *a1)
{
  void *v2;
  id v3;
  NSObject *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  _QWORD v11[5];
  id v12;
  uint8_t buf[4];
  void *v14;

  if (objc_msgSend(a1[4], "component") == (id)4)
  {
    v2 = (void *)FRArticlePrefetchLog;
    if (os_log_type_enabled((os_log_t)FRArticlePrefetchLog, OS_LOG_TYPE_INFO))
    {
      v3 = a1[4];
      v4 = v2;
      v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "headline"));
      v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "articleID"));
      *(_DWORD *)buf = 138543362;
      v14 = v6;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "will start prefetching web excerpt for article ID %{public}@", buf, 0xCu);

    }
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[5], "webContent"));
    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "excerptAssetHandle"));
    v11[0] = _NSConcreteStackBlock;
    v11[1] = 3221225472;
    v11[2] = sub_10006EF2C;
    v11[3] = &unk_1000D9AA8;
    v11[4] = a1[4];
    v12 = a1[6];
    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "downloadIfNeededWithCompletionQueue:completion:", &_dispatch_main_q, v11));

  }
  else
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      sub_1000836E8();
    v9 = 0;
  }
  return v9;
}

uint64_t sub_10006EF2C(uint64_t a1)
{
  void *v2;
  void *v3;
  NSObject *v4;
  void *v5;
  void *v6;
  int v8;
  void *v9;

  v2 = (void *)FRArticlePrefetchLog;
  if (os_log_type_enabled((os_log_t)FRArticlePrefetchLog, OS_LOG_TYPE_INFO))
  {
    v3 = *(void **)(a1 + 32);
    v4 = v2;
    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "headline"));
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "articleID"));
    v8 = 138543362;
    v9 = v6;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "did finish prefetching web excerpt for article ID %{public}@", (uint8_t *)&v8, 0xCu);

  }
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
}

void sub_10006F310(uint64_t a1)
{
  void *v1;
  uint64_t v2;
  id v3;

  v1 = *(void **)(a1 + 32);
  v2 = *(_QWORD *)(a1 + 40);
  v3 = (id)objc_claimAutoreleasedReturnValue(+[CSSearchableIndex defaultSearchableIndex](CSSearchableIndex, "defaultSearchableIndex"));
  objc_msgSend(v1, "_indexTags:searchableIndex:", v2, v3);

}

void sub_10006F3F0(uint64_t a1)
{
  void *v1;
  id v2;

  v2 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "fc_arrayByTransformingWithBlock:", &stru_1000DE5F8));
  v1 = (void *)objc_claimAutoreleasedReturnValue(+[CSSearchableIndex defaultSearchableIndex](CSSearchableIndex, "defaultSearchableIndex"));
  objc_msgSend(v1, "deleteSearchableItemsWithIdentifiers:completionHandler:", v2, &stru_1000DE618);

}

NSString *__cdecl sub_10006F454(id a1, FCTagProviding *a2)
{
  return (NSString *)-[FCTagProviding identifier](a2, "identifier");
}

void sub_10006F45C(id a1, NSError *a2)
{
  NSError *v2;

  v2 = a2;
  if (v2 && os_log_type_enabled(FCDefaultLog, OS_LOG_TYPE_ERROR))
    sub_100083C44();

}

void sub_10006F4E0(id a1)
{
  id v1;

  v1 = (id)objc_claimAutoreleasedReturnValue(+[CSSearchableIndex defaultSearchableIndex](CSSearchableIndex, "defaultSearchableIndex"));
  objc_msgSend(v1, "deleteAllSearchableItemsWithCompletionHandler:", &stru_1000DE658);

}

void sub_10006F51C(id a1, NSError *a2)
{
  NSError *v2;

  v2 = a2;
  if (v2 && os_log_type_enabled(FCDefaultLog, OS_LOG_TYPE_ERROR))
    sub_100083C70();

}

void sub_10006F654(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  id v7;

  if (objc_msgSend(*(id *)(a1 + 32), "count"))
  {
    v2 = *(void **)(a1 + 40);
    v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "allObjects"));
    objc_msgSend(v2, "addSubscriptionsWithTags:", v3);

  }
  if (objc_msgSend(*(id *)(a1 + 48), "count"))
  {
    v4 = *(void **)(a1 + 40);
    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "allObjects"));
    objc_msgSend(v4, "removeSubscriptionsWithTags:", v5);

  }
  if (objc_msgSend(*(id *)(a1 + 56), "count"))
  {
    v6 = *(void **)(a1 + 40);
    v7 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 56), "allObjects"));
    objc_msgSend(v6, "addSubscriptionsWithTags:", v7);

  }
}

void sub_10006F960(uint64_t a1)
{
  void *v1;
  uint64_t v2;
  id v3;

  v1 = *(void **)(a1 + 32);
  v2 = *(_QWORD *)(a1 + 40);
  v3 = (id)objc_claimAutoreleasedReturnValue(+[CSSearchableIndex defaultSearchableIndex](CSSearchableIndex, "defaultSearchableIndex"));
  objc_msgSend(v1, "_indexArticleIDs:searchableIndex:acknowledgementHandler:", v2, v3, 0);

}

id sub_10006FA4C(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "removeArticlesWithIDs:", *(_QWORD *)(a1 + 40));
}

void sub_10006FA90(id a1)
{
  void *v1;
  void *v2;
  _QWORD v3[2];

  v1 = (void *)objc_claimAutoreleasedReturnValue(+[CSSearchableIndex defaultSearchableIndex](CSSearchableIndex, "defaultSearchableIndex"));
  v3[0] = NSSSpotlightArticleDomainIdentifier;
  v3[1] = NSSSpotlightFeedDomainIdentifier;
  v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", v3, 2));
  objc_msgSend(v1, "deleteSearchableItemsWithDomainIdentifiers:completionHandler:", v2, &stru_1000DE698);

}

void sub_10006FB44(id a1, NSError *a2)
{
  NSError *v2;

  v2 = a2;
  if (v2 && os_log_type_enabled(FCDefaultLog, OS_LOG_TYPE_ERROR))
    sub_100083C9C();

}

void sub_10006FDC4(uint64_t a1)
{
  NSObject *v2;
  void *v3;
  id v4;
  id v5;
  id v6;
  uint64_t v7;
  void *v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  _BYTE v13[128];

  v2 = FCDefaultLog;
  if (os_log_type_enabled(FCDefaultLog, OS_LOG_TYPE_DEBUG))
    sub_100083CC8(a1, v2);
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[CSSearchableIndex defaultSearchableIndex](CSSearchableIndex, "defaultSearchableIndex"));
  objc_msgSend(v3, "deleteSearchableItemsWithIdentifiers:completionHandler:", *(_QWORD *)(a1 + 32), &stru_1000DE6B8);

  v11 = 0u;
  v12 = 0u;
  v9 = 0u;
  v10 = 0u;
  v4 = objc_msgSend(*(id *)(a1 + 32), "copy", 0);
  v5 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v9, v13, 16);
  if (v5)
  {
    v6 = v5;
    v7 = *(_QWORD *)v10;
    do
    {
      v8 = 0;
      do
      {
        if (*(_QWORD *)v10 != v7)
          objc_enumerationMutation(v4);
        objc_msgSend(*(id *)(a1 + 40), "_removeThumbnailForArticleID:", *(_QWORD *)(*((_QWORD *)&v9 + 1) + 8 * (_QWORD)v8));
        v8 = (char *)v8 + 1;
      }
      while (v6 != v8);
      v6 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v9, v13, 16);
    }
    while (v6);
  }

}

void sub_10006FF08(id a1, NSError *a2)
{
  NSError *v2;

  v2 = a2;
  if (v2 && os_log_type_enabled(FCDefaultLog, OS_LOG_TYPE_ERROR))
    sub_100083C44();

}

void sub_1000700AC(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  _QWORD v5[5];

  if (objc_msgSend(*(id *)(a1 + 32), "count"))
  {
    v5[0] = _NSConcreteStackBlock;
    v5[1] = 3221225472;
    v5[2] = sub_10007014C;
    v5[3] = &unk_1000DE6E0;
    v2 = *(void **)(a1 + 32);
    v5[4] = *(_QWORD *)(a1 + 40);
    v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "fc_arrayByTransformingWithBlock:", v5));
    v4 = (void *)objc_claimAutoreleasedReturnValue(+[CSSearchableIndex defaultSearchableIndex](CSSearchableIndex, "defaultSearchableIndex"));
    objc_msgSend(v4, "indexSearchableItems:completionHandler:", v3, &stru_1000DE700);

  }
}

id sub_10007014C(uint64_t a1, uint64_t a2)
{
  return _objc_msgSend(*(id *)(a1 + 32), "_itemForTag:", a2);
}

void sub_100070158(id a1, NSError *a2)
{
  NSError *v2;

  v2 = a2;
  if (v2 && os_log_type_enabled(FCDefaultLog, OS_LOG_TYPE_ERROR))
    sub_100083D40();

}

void sub_1000702FC(uint64_t a1, void *a2)
{
  id v3;
  double v4;
  double v5;
  double v6;
  double v7;
  void *v8;
  void *v9;
  uint64_t v10;
  _QWORD v11[7];

  v3 = a2;
  +[FRMacros deviceScreenScaleFromPotentialBackgroundThread](FRMacros, "deviceScreenScaleFromPotentialBackgroundThread");
  v5 = v4;
  +[FRMacros minScreenSide](FRMacros, "minScreenSide");
  v7 = v5 * v6;
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "fetchedObject"));

  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472;
  v11[2] = sub_1000703FC;
  v11[3] = &unk_1000DE728;
  *(double *)&v11[5] = v7;
  *(double *)&v11[6] = v7;
  v11[4] = *(_QWORD *)(a1 + 32);
  v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "fc_arrayByTransformingWithBlock:", v11));
  if (objc_msgSend(v9, "count"))
    objc_msgSend(v9, "enumerateObjectsUsingBlock:", &stru_1000DE768);
  objc_msgSend(*(id *)(a1 + 40), "indexSearchableItems:completionHandler:", v9, &stru_1000DE788);
  v10 = *(_QWORD *)(a1 + 48);
  if (v10)
    (*(void (**)(void))(v10 + 16))();

}

id sub_1000703FC(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  void *v5;
  double v6;
  uint64_t v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  id v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  uint64_t v18;
  void *v19;
  void *v20;
  uint64_t v21;
  void *v22;
  void *v23;
  void *v24;
  id v25;
  void *v26;
  void *v27;
  void *v29;

  v3 = a2;
  if ((objc_msgSend(v3, "isDeleted") & 1) != 0)
  {
    v4 = 0;
  }
  else
  {
    v5 = (void *)objc_claimAutoreleasedReturnValue(+[UIScreen mainScreen](UIScreen, "mainScreen"));
    objc_msgSend(v5, "scale");
    v7 = FCThumbnailForHeadlineMinimumSize(v3, *(double *)(a1 + 40), *(double *)(a1 + 48), v6);
    v8 = (void *)objc_claimAutoreleasedReturnValue(v7);

    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "thumbnailAssetHandle"));
    v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "filePath"));

    v29 = v10;
    if (objc_msgSend(v10, "length")
      && objc_msgSend(*(id *)(a1 + 32), "_copyThumbnail:forHeadline:", v8, v3))
    {
      v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "_thumbnailURLForHeadline:", v3));
    }
    else
    {
      v11 = 0;
    }
    v12 = objc_msgSend(objc_alloc((Class)CSSearchableItemAttributeSet), "initWithItemContentType:", kUTTypeText);
    v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "title"));
    objc_msgSend(v12, "setTitle:", v13);

    v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "shortExcerpt"));
    objc_msgSend(v12, "setContentDescription:", v14);

    v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "shortExcerpt"));
    objc_msgSend(v12, "setTextContent:", v15);

    objc_msgSend(v12, "setThumbnailURL:", v11);
    v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "publishDate"));
    objc_msgSend(v12, "setContentCreationDate:", v16);

    v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "sourceName"));
    objc_msgSend(v12, "setNamedLocation:", v17);

    v18 = FCBundle(objc_msgSend(v12, "setLanguages:", &off_1000E4AC0));
    v19 = (void *)objc_claimAutoreleasedReturnValue(v18);
    v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v19, "localizedStringForKey:value:table:", CFSTR("news"), &stru_1000DF290, 0));
    v21 = FCBundle(v20);
    v22 = (void *)objc_claimAutoreleasedReturnValue(v21);
    v23 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v22, "localizedStringForKey:value:table:", CFSTR("article"), &stru_1000DF290, 0));
    v24 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:](NSArray, "arrayWithObjects:", v20, v23, 0));
    objc_msgSend(v12, "setKeywords:", v24);

    v25 = objc_alloc((Class)CSSearchableItem);
    v26 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "articleID"));
    v4 = objc_msgSend(v25, "initWithUniqueIdentifier:domainIdentifier:attributeSet:", v26, NSSSpotlightArticleDomainIdentifier, v12);

    v27 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "associator"));
    objc_msgSend(v27, "associateAppEntityFromHeadline:with:", v3, v4);

  }
  return v4;
}

void sub_1000706E0(id a1, CSSearchableItem *a2, unint64_t a3, BOOL *a4)
{
  void *v5;
  NSObject *v6;
  void *v7;
  int v8;
  void *v9;

  v5 = (void *)FCDefaultLog;
  if (os_log_type_enabled(FCDefaultLog, OS_LOG_TYPE_DEFAULT))
  {
    v6 = v5;
    v7 = (void *)objc_claimAutoreleasedReturnValue(-[CSSearchableItem debugDescription](a2, "debugDescription"));
    v8 = 138412290;
    v9 = v7;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Submitting item to CoreSpotlight %@", (uint8_t *)&v8, 0xCu);

  }
}

void sub_1000707A0(id a1, NSError *a2)
{
  NSError *v2;

  v2 = a2;
  if (v2 && os_log_type_enabled(FCDefaultLog, OS_LOG_TYPE_ERROR))
    sub_100083D40();

}

void sub_100070AD0(uint64_t a1)
{
  void *v2;
  _QWORD v3[5];
  id v4;
  id v5;

  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_100070B54;
  v3[3] = &unk_1000DC8A8;
  v2 = *(void **)(a1 + 40);
  v3[4] = *(_QWORD *)(a1 + 32);
  v4 = v2;
  v5 = *(id *)(a1 + 48);
  FCPerformBlockOnMainThread(v3);

}

void sub_100070B54(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  id v5;
  _QWORD *v6;
  void *v7;
  void *v8;
  _QWORD *v9;
  void *v10;
  void *v11;
  _QWORD *v12;
  void *v13;
  void *v14;
  void **v15;
  uint64_t v16;
  void (*v17)(uint64_t, void *);
  void *v18;
  uint64_t v19;
  id v20;
  _QWORD v21[5];
  id v22;
  _QWORD v23[5];
  id v24;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "subscriptionController"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "cachedSubscribedTags"));

  objc_msgSend(*(id *)(a1 + 32), "_indexTags:searchableIndex:", v3, *(_QWORD *)(a1 + 40));
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableSet set](NSMutableSet, "set"));
  v23[0] = _NSConcreteStackBlock;
  v23[1] = 3221225472;
  v23[2] = sub_100070D1C;
  v23[3] = &unk_1000DE7D8;
  v23[4] = *(_QWORD *)(a1 + 32);
  v24 = v4;
  v5 = v4;
  v6 = objc_retainBlock(v23);
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "readingHistory"));
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "sortedVisitedArticleIDs"));
  v21[0] = _NSConcreteStackBlock;
  v21[1] = 3221225472;
  v21[2] = sub_100070D98;
  v21[3] = &unk_1000DE800;
  v21[4] = *(_QWORD *)(a1 + 32);
  v9 = v6;
  v22 = v9;
  objc_msgSend(v8, "enumerateObjectsUsingBlock:", v21);

  v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "readingList"));
  v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "allSortedArticleIDsInReadingList"));
  v15 = _NSConcreteStackBlock;
  v16 = 3221225472;
  v17 = sub_100070E18;
  v18 = &unk_1000DE800;
  v19 = *(_QWORD *)(a1 + 32);
  v20 = v9;
  v12 = v9;
  objc_msgSend(v11, "enumerateObjectsUsingBlock:", &v15);

  v13 = *(void **)(a1 + 32);
  v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "allObjects", v15, v16, v17, v18, v19));
  objc_msgSend(v13, "_indexArticleIDs:searchableIndex:acknowledgementHandler:", v14, *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));

}

void sub_100070D1C(uint64_t a1, void *a2, _BYTE *a3, uint64_t a4)
{
  unsigned int v7;
  void *v8;
  id v9;

  v9 = a2;
  if ((objc_msgSend(*(id *)(a1 + 32), "_shouldIndexArticleWithDate:", a4) & 1) == 0)
  {
    *a3 = 1;
    goto LABEL_5;
  }
  v7 = objc_msgSend(*(id *)(a1 + 32), "_shouldIndexArticleID:", v9);
  v8 = v9;
  if (v7)
  {
    objc_msgSend(*(id *)(a1 + 40), "addObject:", v9);
LABEL_5:
    v8 = v9;
  }

}

void sub_100070D98(uint64_t a1, void *a2)
{
  void *v3;
  id v4;
  void *v5;
  id v6;

  v3 = *(void **)(a1 + 32);
  v4 = a2;
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "readingHistory"));
  v6 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "lastVisitedDateForArticleID:", v4));

  (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
}

void sub_100070E18(uint64_t a1, void *a2)
{
  void *v3;
  id v4;
  void *v5;
  id v6;

  v3 = *(void **)(a1 + 32);
  v4 = a2;
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "readingList"));
  v6 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "dateArticleWasAdded:", v4));

  (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
}

void sub_100070F5C(uint64_t a1)
{
  id v2;
  uint64_t v3;
  void *v4;
  _QWORD v5[4];
  id v6;
  uint64_t v7;
  id v8;
  id v9;

  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_100070FF0;
  v5[3] = &unk_1000DBC38;
  v2 = *(id *)(a1 + 32);
  v3 = *(_QWORD *)(a1 + 40);
  v4 = *(void **)(a1 + 48);
  v6 = v2;
  v7 = v3;
  v8 = v4;
  v9 = *(id *)(a1 + 56);
  FCPerformBlockOnMainThread(v5);

}

void sub_100070FF0(uint64_t a1)
{
  void *v2;
  void *v3;
  uint64_t v4;
  void *v5;
  id v6;
  id v7;
  _QWORD v8[4];
  id v9;
  uint64_t v10;
  id v11;

  v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray array](NSMutableArray, "array"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray array](NSMutableArray, "array"));
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_1000710C8;
  v8[3] = &unk_1000DC4E8;
  v5 = *(void **)(a1 + 32);
  v4 = *(_QWORD *)(a1 + 40);
  v9 = v3;
  v10 = v4;
  v11 = v2;
  v6 = v2;
  v7 = v3;
  objc_msgSend(v5, "enumerateObjectsUsingBlock:", v8);
  objc_msgSend(*(id *)(a1 + 40), "_indexTags:searchableIndex:", v6, *(_QWORD *)(a1 + 48));
  objc_msgSend(*(id *)(a1 + 40), "_indexArticleIDs:searchableIndex:acknowledgementHandler:", v7, *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56));

}

void sub_1000710C8(id *a1, void *a2)
{
  void *v3;
  void *v4;
  id v5;

  v5 = a2;
  if (objc_msgSend(v5, "fc_isValidArticleID"))
  {
    objc_msgSend(a1[4], "addObject:", v5);
  }
  else if (objc_msgSend(v5, "fc_isValidTagID"))
  {
    v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[5], "subscriptionController"));
    v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "subscribedTagForTagID:", v5));

    if (v4)
      objc_msgSend(a1[6], "addObject:", v4);

  }
}

void sub_1000711F8(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  id v4;
  void *v5;
  void *v6;
  void *v7;
  id v8;
  void *v9;
  id v10;
  id v11;
  id v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  unsigned __int8 v16;
  id v17;
  id v18;
  void *v19;
  uint64_t v20;
  void *v21;
  id v22;
  void *v23;
  void *v24;
  uint64_t v25;
  id v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  id v31;
  uint8_t buf[4];
  uint64_t v33;
  __int16 v34;
  id v35;
  __int16 v36;
  void *v37;
  _BYTE v38[128];

  v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSFileManager defaultManager](NSFileManager, "defaultManager"));
  v4 = objc_msgSend((id)objc_opt_class(*(_QWORD *)(a1 + 32), v3), "_spotlightFolder");
  v5 = (void *)objc_claimAutoreleasedReturnValue(v4);
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "path"));
  v31 = 0;
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "contentsOfDirectoryAtPath:error:", v6, &v31));
  v8 = v31;
  v9 = v8;
  if (v7)
  {
    v22 = v8;
    v23 = v6;
    v24 = v5;
    v25 = a1;
    v29 = 0u;
    v30 = 0u;
    v27 = 0u;
    v28 = 0u;
    v21 = v7;
    v10 = v7;
    v11 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v27, v38, 16);
    if (v11)
    {
      v12 = v11;
      v13 = *(_QWORD *)v28;
      do
      {
        v14 = 0;
        do
        {
          if (*(_QWORD *)v28 != v13)
            objc_enumerationMutation(v10);
          v15 = *(_QWORD *)(*((_QWORD *)&v27 + 1) + 8 * (_QWORD)v14);
          v26 = 0;
          v16 = objc_msgSend(v2, "removeItemAtPath:error:", v15, &v26);
          v17 = v26;
          if ((v16 & 1) == 0 && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
          {
            v18 = objc_msgSend(v17, "code");
            v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v17, "description"));
            *(_DWORD *)buf = 138412802;
            v33 = v15;
            v34 = 2048;
            v35 = v18;
            v36 = 2112;
            v37 = v19;
            _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "Couldn't delete file at path %@ - %ld - %@", buf, 0x20u);

          }
          v14 = (char *)v14 + 1;
        }
        while (v12 != v14);
        v12 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v27, v38, 16);
      }
      while (v12);
    }

    v5 = v24;
    a1 = v25;
    v9 = v22;
    v6 = v23;
    v7 = v21;
  }
  else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
  {
    sub_100083D6C(v9);
  }
  v20 = *(_QWORD *)(a1 + 40);
  if (v20)
    (*(void (**)(void))(v20 + 16))();

}

void sub_1000719AC(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, &a9, 0x16u);
}

void sub_1000719BC(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, &a9, 0x20u);
}

uint64_t sub_1000719F8()
{
  uint64_t v0;

  return v0;
}

void sub_100071AD4(uint64_t a1, uint64_t a2, void *a3)
{
  id v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  uint64_t v10;
  NSFileAttributeKey v11;
  void *v12;

  v5 = a3;
  if ((_DWORD)a2)
  {
    v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSFileManager defaultManager](NSFileManager, "defaultManager"));
    v11 = NSFileModificationDate;
    v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](NSDate, "date"));
    v12 = v7;
    v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v12, &v11, 1));
    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "path"));
    objc_msgSend(v6, "setAttributes:ofItemAtPath:error:", v8, v9, 0);

  }
  v10 = *(_QWORD *)(a1 + 40);
  if (v10)
    (*(void (**)(uint64_t, uint64_t, id))(v10 + 16))(v10, a2, v5);

}

void sub_100071E04(uint64_t a1)
{
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));
}

void sub_100071E0C(uint64_t a1)
{
  id v2;

  v2 = (id)objc_claimAutoreleasedReturnValue(+[NSUserDefaults standardUserDefaults](NSUserDefaults, "standardUserDefaults"));
  objc_msgSend(v2, "setBool:forKey:", 1, CFSTR("FRAppCacheSnapshotterShouldRestoreOldCacheSnapshotDefaultsKey"));
  objc_msgSend(v2, "synchronize");
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));

}

void sub_100071E68(id a1)
{
  exit(0);
}

void sub_1000720F8(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  unsigned __int8 v5;
  id v6;
  id v7;
  id v8;
  _QWORD v9[4];
  id v10;
  id v11;
  unsigned __int8 v12;
  id v13;

  v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSFileManager defaultManager](NSFileManager, "defaultManager"));
  v3 = *(_QWORD *)(a1 + 32);
  v4 = *(_QWORD *)(a1 + 40);
  v13 = 0;
  v5 = objc_msgSend(v2, "copyItemAtURL:toURL:error:", v3, v4, &v13);
  v6 = v13;

  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472;
  v9[2] = sub_1000721C4;
  v9[3] = &unk_1000DE9F8;
  v7 = *(id *)(a1 + 48);
  v12 = v5;
  v10 = v6;
  v11 = v7;
  v8 = v6;
  dispatch_async((dispatch_queue_t)&_dispatch_main_q, v9);

}

uint64_t sub_1000721C4(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 40);
  if (result)
    return (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(result + 16))(result, *(unsigned __int8 *)(a1 + 48), *(_QWORD *)(a1 + 32));
  return result;
}

void sub_10007283C(uint64_t a1, uint64_t a2, void *a3)
{
  void *v4;
  unsigned int v5;
  void *v6;
  void *v7;
  id v8;

  v8 = a3;
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "editorialItemID"));
  v5 = objc_msgSend(v4, "fc_isValidArticleID");

  if (v5)
  {
    v6 = *(void **)(a1 + 32);
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "editorialItemID"));
    objc_msgSend(v6, "addObject:", v7);

  }
}

id FRURLForInternalExtrasBundle()
{
  uint64_t v0;
  void *v1;
  void *v2;
  void *v3;

  v0 = FCURLForAppleInternalLibraryBundlesDirectory();
  v1 = (void *)objc_claimAutoreleasedReturnValue(v0);
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v1, "URLByAppendingPathComponent:", CFSTR("NewsInternalExtras")));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "URLByAppendingPathExtension:", CFSTR("bundle")));

  return v3;
}

id FRURLForLocalInternalExtrasBundle()
{
  void *v0;
  void *v1;
  void *v2;

  v0 = (void *)objc_claimAutoreleasedReturnValue(+[NSBundle mainBundle](NSBundle, "mainBundle"));
  v1 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v0, "pathForResource:ofType:", CFSTR("NewsInternalExtras"), CFSTR("bundle")));
  if (v1)
    v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSURL fileURLWithPath:isDirectory:](NSURL, "fileURLWithPath:isDirectory:", v1, 0));
  else
    v2 = 0;

  return v2;
}

void sub_100072BD8(uint64_t a1, void *a2, void *a3)
{
  id v5;
  void *v6;
  NSObject *v7;
  int v8;
  void *v9;
  __int16 v10;
  id v11;

  v5 = a3;
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "feedNavigationConfigJSON"));
  if (!v6 && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
    sub_1000847D8();
  v7 = FCDefaultLog;
  if (os_log_type_enabled(FCDefaultLog, OS_LOG_TYPE_DEFAULT))
  {
    v8 = 138412546;
    v9 = v6;
    v10 = 2112;
    v11 = v5;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Editorial Manager: AppConfiguration fetched with feed navigation config=%@ error=%@", (uint8_t *)&v8, 0x16u);
  }
  if (v6)
    objc_msgSend(*(id *)(a1 + 32), "processConfigurationWithJSON:completion:", v6, *(_QWORD *)(a1 + 40));

}

uint64_t sub_100073160(uint64_t a1)
{
  NSObject *v2;
  uint64_t result;

  v2 = FCDefaultLog;
  if (os_log_type_enabled(FCDefaultLog, OS_LOG_TYPE_ERROR))
    sub_1000848AC(a1, v2);
  result = *(_QWORD *)(a1 + 40);
  if (result)
    return (*(uint64_t (**)(uint64_t, void *, _QWORD))(result + 16))(result, &__NSArray0__struct, *(_QWORD *)(a1 + 32));
  return result;
}

void sub_100073310(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  id *v16;

  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100073334(uint64_t a1, void *a2)
{
  id v3;
  id WeakRetained;
  id v5;
  _QWORD v6[4];
  id v7;
  id v8;

  v3 = a2;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_1000733DC;
  v6[3] = &unk_1000DED80;
  v7 = v3;
  v8 = *(id *)(a1 + 32);
  v5 = v3;
  FCPerformIfNonNil(WeakRetained, v6);

}

void sub_1000733DC(uint64_t a1, void *a2)
{
  void *v3;
  void *v4;
  id v5;
  uint64_t v6;
  id v7;
  _QWORD v8[5];
  id v9;

  v7 = a2;
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableDictionary dictionary](NSMutableDictionary, "dictionary"));
  v4 = *(void **)(a1 + 32);
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_100073494;
  v8[3] = &unk_1000DED58;
  v8[4] = v7;
  v5 = v3;
  v9 = v5;
  objc_msgSend(v4, "enumerateKeysAndObjectsUsingBlock:", v8);
  v6 = *(_QWORD *)(a1 + 40);
  if (v6)
    (*(void (**)(uint64_t, id))(v6 + 16))(v6, v5);

}

void sub_100073494(uint64_t a1, uint64_t a2, void *a3)
{
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  FREditorialItemEntry *v12;
  void *v13;
  FREditorialItemEntry *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  id v19;
  void *v20;
  void *v21;
  void *v22;
  id v23;
  uint64_t v24;
  id v25;

  v25 = a3;
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v25, "identifier"));
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "editorialItemEntryManager"));
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "editorialItemsByID"));
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v25, "identifier"));
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "objectForKey:", v7));

  v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v25, "identifier"));
  v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("https://apple.news/%@"), v9));

  v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray array](NSMutableArray, "array"));
  if (!v8)
  {
    v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", 0));
    objc_msgSend(v11, "addObject:", v13);

    v14 = [FREditorialItemEntry alloc];
    v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v25, "identifier"));
    v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v25, "name"));
    v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v25, "subtitle"));
    LOBYTE(v24) = 1;
    v12 = -[FREditorialItemEntry initWithEditorialItemID:title:subtitle:subtitleColorString:image:actionUrlString:lastModifiedDate:documentVersion:lastSeenDocumentVersion:showBadge:](v14, "initWithEditorialItemID:title:subtitle:subtitleColorString:image:actionUrlString:lastModifiedDate:documentVersion:lastSeenDocumentVersion:showBadge:", v15, v16, v17, 0, 0, v10, 0, 0, 0, v24);

    v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "editorialItemEntryManager"));
    objc_msgSend(v18, "addEditorialItem:", v12);

    goto LABEL_5;
  }
  if (objc_msgSend(v8, "showBadge"))
  {
    v12 = (FREditorialItemEntry *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", 0));
    objc_msgSend(v11, "addObject:", v12);
LABEL_5:

  }
  v19 = objc_alloc((Class)TSEditorialItem);
  v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v25, "name"));
  v21 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v25, "subtitle"));
  v22 = (void *)objc_claimAutoreleasedReturnValue(+[NSURL URLWithString:](NSURL, "URLWithString:", v10));
  v23 = objc_msgSend(v19, "initWithIdentifier:title:subtitle:subtitleColor:attributes:actionURL:thumbnailImage:backingTag:headline:", v4, v20, v21, 0, v11, v22, 0, v25, 0);

  objc_msgSend(*(id *)(a1 + 40), "setObject:forKey:", v23, v4);
}

void sub_100074224(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  id v4;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "channelLogoView"));
  objc_msgSend(v2, "setAlpha:", 0.0);

  v3 = *(_QWORD *)(a1 + 40);
  v4 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "channelLogoView"));
  objc_msgSend(v4, "setImage:", v3);

}

void sub_100074280(uint64_t a1)
{
  id v1;

  v1 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "channelLogoView"));
  objc_msgSend(v1, "setAlpha:", 1.0);

}

id sub_100075644(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "setAlpha:", *(double *)(a1 + 40));
}

void sub_100075650(uint64_t a1)
{
  void *v2;
  void *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  double v7;
  void *v8;
  id v9;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "layer"));
  objc_msgSend(v2, "setValue:forKeyPath:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));

  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "layer"));
  objc_msgSend(v3, "removeAnimationForKey:", *(_QWORD *)(a1 + 48));

  v4 = *(unsigned __int8 *)(a1 + 72);
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "layer"));
  objc_msgSend(v5, "setShouldRasterize:", v4);

  v6 = 56;
  if (!*(_BYTE *)(a1 + 72))
    v6 = 64;
  v7 = *(double *)(a1 + v6);
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "layer"));
  objc_msgSend(v8, "setRasterizationScale:", v7);

  if (!*(_BYTE *)(a1 + 72))
  {
    v9 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "layer"));
    objc_msgSend(v9, "setFilters:", &__NSArray0__struct);

  }
}

unint64_t sub_100075E28()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10010A368;
  if (!qword_10010A368)
  {
    v1 = sub_100075E74(&qword_10010A370);
    result = swift_getWitnessTable(&protocol conformance descriptor for IntentResultContainer<A, B, C, D>, v1);
    atomic_store(result, (unint64_t *)&qword_10010A368);
  }
  return result;
}

uint64_t sub_100075E74(uint64_t *a1)
{
  uint64_t result;

  result = *a1;
  if (result < 0)
  {
    result = swift_getTypeByMangledNameInContextInMetadataState2(255, (char *)a1 + (int)result, -(result >> 32), 0, 0);
    *a1 = result;
  }
  return result;
}

uint64_t sub_100075EB8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;

  v3[19] = a2;
  v3[20] = a3;
  v3[18] = a1;
  v4 = type metadata accessor for AudioAppIntentHandler(0);
  v3[21] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v3[22] = v5;
  v3[23] = swift_task_alloc((*(_QWORD *)(v5 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_100075F1C, 0, 0);
}

uint64_t sub_100075F1C()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v0[24] = objc_opt_self(UIApplication);
  v1 = type metadata accessor for MainActor(0);
  v0[25] = v1;
  v0[26] = static MainActor.shared.getter(v1);
  v2 = dispatch thunk of Actor.unownedExecutor.getter(v1, &protocol witness table for MainActor);
  return swift_task_switch(sub_100075F98, v2, v3);
}

uint64_t sub_100075F98()
{
  _QWORD *v0;
  void *v1;

  v1 = (void *)v0[24];
  swift_release(v0[26]);
  v0[27] = objc_msgSend(v1, "sharedApplication");
  return swift_task_switch(sub_100075FF4, 0, 0);
}

uint64_t sub_100075FF4()
{
  uint64_t v0;
  void *v1;
  NSString v2;
  uint64_t v3;
  uint64_t v4;
  id v5;
  NSString v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  Swift::String v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  id v24;
  uint64_t v25;
  NSString v26;
  NSString v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  v1 = *(void **)(v0 + 216);
  v2 = String._bridgeToObjectiveC()();
  *(_QWORD *)(v0 + 224) = objc_msgSend(v1, "beginBackgroundTaskWithName:expirationHandler:", v2, 0);

  v5 = (id)NewsCoreUserDefaults(v3, v4);
  v6 = String._bridgeToObjectiveC()();
  v7 = objc_msgSend(v5, "valueForKey:", v6);

  if (v7)
  {
    _bridgeAnyObjectToAny(_:)(v7);
    swift_unknownObjectRelease(v7);
  }
  else
  {
    *(_OWORD *)(v0 + 48) = 0u;
    *(_OWORD *)(v0 + 64) = 0u;
  }
  sub_1000763D4(v0 + 48, v0 + 16);
  if (*(_QWORD *)(v0 + 40))
  {
    if (swift_dynamicCast(v0 + 128, v0 + 16, (char *)&type metadata for Any + 8, &type metadata for String, 6))
    {
      v9 = *(_QWORD *)(v0 + 128);
      v8 = *(_QWORD *)(v0 + 136);
      goto LABEL_9;
    }
  }
  else
  {
    sub_10007645C(v0 + 16);
  }
  v9 = 0;
  v8 = 0;
LABEL_9:
  ((void (*)(void))IntentParameter.wrappedValue.getter)();
  v10 = *(_QWORD *)(v0 + 88);
  if (!v8)
  {
    v11 = swift_bridgeObjectRelease(*(_QWORD *)(v0 + 88));
    goto LABEL_16;
  }
  if (v9 != *(_QWORD *)(v0 + 80) || v8 != v10)
  {
    v12 = _stringCompareWithSmolCheck(_:_:expecting:)(v9, v8);
    swift_bridgeObjectRelease(v10);
    v11 = swift_bridgeObjectRelease(v8);
    if ((v12 & 1) != 0)
      goto LABEL_15;
LABEL_16:
    v17 = *(_QWORD *)(v0 + 176);
    v16 = *(_QWORD *)(v0 + 184);
    v18 = *(_QWORD *)(v0 + 168);
    v19 = AppDependency.wrappedValue.getter(v11);
    IntentParameter.wrappedValue.getter(v19);
    v20._countAndFlagsBits = *(_QWORD *)(v0 + 96);
    v21 = *(void **)(v0 + 104);
    v20._object = v21;
    AudioAppIntentHandler.handleAudioPlayback(for:)(v20);
    swift_bridgeObjectRelease(v21);
    v22 = (*(uint64_t (**)(uint64_t, uint64_t))(v17 + 8))(v16, v18);
    v24 = (id)NewsCoreUserDefaults(v22, v23);
    IntentParameter.wrappedValue.getter(v24);
    v25 = *(_QWORD *)(v0 + 120);
    v26 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v25);
    v27 = String._bridgeToObjectiveC()();
    objc_msgSend(v24, "setValue:forKey:", v26, v27);

    goto LABEL_17;
  }
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 88));
  v11 = swift_bridgeObjectRelease(v8);
LABEL_15:
  v14 = *(_QWORD *)(v0 + 176);
  v13 = *(_QWORD *)(v0 + 184);
  v15 = *(_QWORD *)(v0 + 168);
  AppDependency.wrappedValue.getter(v11);
  AudioAppIntentHandler.pause()();
  (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v13, v15);
LABEL_17:
  v28 = *(_QWORD *)(v0 + 200);
  type metadata accessor for WidgetCenter(0);
  v29 = static WidgetCenter.shared.getter();
  dispatch thunk of WidgetCenter.reloadAllTimelines()();
  v30 = swift_release(v29);
  *(_QWORD *)(v0 + 232) = static MainActor.shared.getter(v30);
  v31 = dispatch thunk of Actor.unownedExecutor.getter(v28, &protocol witness table for MainActor);
  return swift_task_switch(sub_100076310, v31, v32);
}

uint64_t sub_100076310()
{
  _QWORD *v0;
  void *v1;

  v1 = (void *)v0[24];
  swift_release(v0[29]);
  v0[30] = objc_msgSend(v1, "sharedApplication");
  return swift_task_switch(sub_10007636C, 0, 0);
}

uint64_t sub_10007636C()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;

  v1 = *(void **)(v0 + 240);
  v2 = *(_QWORD *)(v0 + 184);
  objc_msgSend(v1, "endBackgroundTask:", *(_QWORD *)(v0 + 224));

  static IntentResult.result<>()();
  swift_task_dealloc(v2);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000763D4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10007641C(&qword_10010A380);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_10007641C(uint64_t *a1)
{
  uint64_t result;

  result = *a1;
  if (result < 0)
  {
    result = swift_getTypeByMangledNameInContext2((char *)a1 + (int)result, -(result >> 32), 0, 0);
    *a1 = result;
  }
  return result;
}

uint64_t sub_10007645C(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_10007641C(&qword_10010A380);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t sub_1000764A0()
{
  unint64_t result;

  result = qword_10010A388;
  if (!qword_10010A388)
  {
    result = swift_getWitnessTable(&unk_1000D0F08, &type metadata for ToggleAudioPlaybackIntent);
    atomic_store(result, (unint64_t *)&qword_10010A388);
  }
  return result;
}

unint64_t sub_1000764E8()
{
  unint64_t result;

  result = qword_10010A390;
  if (!qword_10010A390)
  {
    result = swift_getWitnessTable(&unk_1000D0F30, &type metadata for ToggleAudioPlaybackIntent);
    atomic_store(result, (unint64_t *)&qword_10010A390);
  }
  return result;
}

unint64_t sub_100076530()
{
  unint64_t result;

  result = qword_10010A398;
  if (!qword_10010A398)
  {
    result = swift_getWitnessTable(&unk_1000D0FC0, &type metadata for ToggleAudioPlaybackIntent);
    atomic_store(result, (unint64_t *)&qword_10010A398);
  }
  return result;
}

unint64_t sub_100076578()
{
  unint64_t result;

  result = qword_10010A3A0;
  if (!qword_10010A3A0)
  {
    result = swift_getWitnessTable(&unk_1000D0FE8, &type metadata for ToggleAudioPlaybackIntent);
    atomic_store(result, (unint64_t *)&qword_10010A3A0);
  }
  return result;
}

uint64_t sub_1000765BC(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_1000D5B8C, 1);
}

uint64_t sub_1000765CC(uint64_t a1, uint64_t a2)
{
  _QWORD v3[2];

  v3[0] = a2;
  v3[1] = sub_1000764E8();
  return swift_getOpaqueTypeConformance2(v3, &opaque type descriptor for <<opaque return type of static AppIntent.parameterSummary>>, 1);
}

uint64_t sub_10007660C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _BYTE *v3;
  uint64_t v4;
  _BYTE *v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE v11[16];

  v0 = type metadata accessor for LocalizedStringResource.BundleDescription(0);
  v1 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin();
  v3 = &v11[-((v2 + 15) & 0xFFFFFFFFFFFFFFF0)];
  type metadata accessor for Locale(0);
  __chkstk_darwin();
  v5 = &v11[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  type metadata accessor for String.LocalizationValue(0);
  __chkstk_darwin();
  v7 = &v11[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v8 = type metadata accessor for LocalizedStringResource(0);
  sub_100076E88(v8, qword_10010ACB8);
  sub_100076E70(v8, (uint64_t)qword_10010ACB8);
  v9 = String.LocalizationValue.init(stringLiteral:)(0xD000000000000012, 0x80000001000C8F60);
  static Locale.current.getter(v9);
  (*(void (**)(_BYTE *, _QWORD, uint64_t))(v1 + 104))(v3, enum case for LocalizedStringResource.BundleDescription.main(_:), v0);
  return LocalizedStringResource.init(_:table:locale:bundle:comment:)(v7, 0, 0, v5, v3, "Title for 'Play Article' AppIntent.", 35, 2);
}

uint64_t sub_100076780@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  if (qword_10010A360 != -1)
    swift_once(&qword_10010A360, sub_10007660C);
  v2 = type metadata accessor for LocalizedStringResource(0);
  v3 = sub_100076E70(v2, (uint64_t)qword_10010ACB8);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 16))(a1, v3, v2);
}

uint64_t sub_1000767F0()
{
  return 0;
}

uint64_t sub_100076804(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;

  v5 = *v1;
  v4 = v1[1];
  v6 = (_QWORD *)swift_task_alloc(dword_10010A37C);
  *(_QWORD *)(v2 + 16) = v6;
  *v6 = v2;
  v6[1] = sub_100076868;
  return sub_100075EB8(a1, v5, v4);
}

uint64_t sub_100076868()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  swift_task_dealloc(*(_QWORD *)(*v0 + 16));
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t sub_1000768B0@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = sub_100076A94();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t sub_1000768D4(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000764E8();
  return static AppIntent.persistentIdentifier.getter(a1, v2);
}

uint64_t destroy for ToggleAudioPlaybackIntent(_QWORD *a1)
{
  swift_release(*a1);
  return swift_release(a1[1]);
}

_QWORD *_s4News25ToggleAudioPlaybackIntentVwCP_0(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  ((void (*)(void))swift_retain)();
  swift_retain(v3);
  return a1;
}

uint64_t *assignWithCopy for ToggleAudioPlaybackIntent(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = *a2;
  v5 = *a1;
  *a1 = *a2;
  swift_retain(v4);
  swift_release(v5);
  v6 = a2[1];
  v7 = a1[1];
  a1[1] = v6;
  swift_retain(v6);
  swift_release(v7);
  return a1;
}

__n128 initializeWithTake for ToggleAudioPlaybackIntent(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  *a1 = *a2;
  return result;
}

_QWORD *assignWithTake for ToggleAudioPlaybackIntent(_QWORD *a1, _OWORD *a2)
{
  uint64_t v4;

  swift_release(*a1);
  v4 = a1[1];
  *(_OWORD *)a1 = *a2;
  swift_release(v4);
  return a1;
}

uint64_t getEnumTagSinglePayload for ToggleAudioPlaybackIntent(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 16))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ToggleAudioPlaybackIntent(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 16) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for ToggleAudioPlaybackIntent()
{
  return &type metadata for ToggleAudioPlaybackIntent;
}

uint64_t sub_100076A94()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(char *, uint64_t, uint64_t);
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v30;
  char *v31;
  char *v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  _OWORD v36[2];
  uint64_t v37;

  v0 = type metadata accessor for InputConnectionBehavior(0);
  v34 = *(_QWORD *)(v0 - 8);
  v35 = v0;
  __chkstk_darwin();
  v33 = (char *)&v30 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10007641C(&qword_10010A3B0);
  __chkstk_darwin();
  v32 = (char *)&v30 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10007641C(&qword_10010A3B8);
  __chkstk_darwin();
  v31 = (char *)&v30 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10007641C(&qword_10010A3C0);
  __chkstk_darwin();
  v5 = (char *)&v30 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for LocalizedStringResource.BundleDescription(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin();
  v9 = (char *)&v30 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for Locale(0);
  __chkstk_darwin();
  v11 = (char *)&v30 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for String.LocalizationValue(0);
  __chkstk_darwin();
  v13 = (char *)&v30 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for LocalizedStringResource(0);
  v15 = *(_QWORD *)(v14 - 8);
  __chkstk_darwin();
  v17 = (char *)&v30 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v30 = sub_10007641C(&qword_10010A3C8);
  v18 = String.LocalizationValue.init(stringLiteral:)(0x656C6369747241, 0xE700000000000000);
  static Locale.current.getter(v18);
  v19 = enum case for LocalizedStringResource.BundleDescription.main(_:);
  v20 = *(void (**)(char *, uint64_t, uint64_t))(v7 + 104);
  v20(v9, enum case for LocalizedStringResource.BundleDescription.main(_:), v6);
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v13, 0, 0, v11, v9, "Article ID.", 11, 2);
  v21 = String.LocalizationValue.init(stringLiteral:)(0xD000000000000034, 0x80000001000C8FB0);
  static Locale.current.getter(v21);
  v20(v9, v19, v6);
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v13, 0, 0, v11, v9, "The description of the 'ToggleAudioPlaybackIntent' which is used in widget.", 75, 2);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v5, 0, 1, v14);
  v22 = type metadata accessor for String.IntentInputOptions(0);
  v36[0] = 0uLL;
  v23 = v31;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 56))(v31, 1, 1, v22);
  v24 = type metadata accessor for IntentDialog(0);
  v25 = v32;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 56))(v32, 1, 1, v24);
  v26 = v33;
  (*(void (**)(char *, _QWORD, uint64_t))(v34 + 104))(v33, enum case for InputConnectionBehavior.default(_:), v35);
  v27 = IntentParameter<>.init(title:description:default:inputOptions:requestValueDialog:inputConnectionBehavior:)(v17, v5, v36, v23, v25, v26);
  sub_10007641C(&qword_10010A3D0);
  type metadata accessor for AppDependencyManager(0);
  memset(v36, 0, sizeof(v36));
  v37 = 0;
  v28 = static AppDependencyManager.shared.getter();
  AppDependency.__allocating_init(key:manager:)(v36, v28);
  return v27;
}

uint64_t sub_100076E70(uint64_t a1, uint64_t a2)
{
  if ((*(_BYTE *)(*(_QWORD *)(a1 - 8) + 82) & 2) != 0)
    return *(_QWORD *)a2;
  return a2;
}

uint64_t *sub_100076E88(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(a1 - 8);
  if ((*(_DWORD *)(v3 + 80) & 0x20000) != 0)
  {
    v4 = swift_slowAlloc(*(_QWORD *)(v3 + 64), *(_DWORD *)(v3 + 80));
    *a2 = v4;
    return (uint64_t *)v4;
  }
  return a2;
}

uint64_t sub_100076EC8()
{
  uint64_t v0;

  return swift_deallocClassInstance(v0, 16, 7);
}

uint64_t type metadata accessor for ResourceBundleClass()
{
  return objc_opt_self(_TtC4NewsP33_F5E3F2FC8685F20DF18ED4B59F4F243019ResourceBundleClass);
}

void sub_100076EF8()
{
  id v0;
  uint64_t v1;
  int v2[10];

  v0 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("Invalid parameter not satisfying %s"), "cloudContext");
  v2[0] = 136315906;
  sub_10001A714();
  sub_10001A704();
  sub_10000F524();
  sub_10000F518((void *)&_mh_execute_header, &_os_log_default, v1, "*** Assertion failure (Identifier: catch-all) : %s %s:%d %{public}@", (uint8_t *)v2);

  sub_10000F538();
}

void sub_100076FB4()
{
  id v0;
  uint64_t v1;
  int v2;
  const char *v3;
  __int16 v4;
  char *v5;
  __int16 v6;

  v0 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("Case not implemented"));
  v2 = 136315906;
  v3 = "-[FRAnalyticsController currentSession]";
  v4 = 2080;
  v5 = "FRAnalyticsController.m";
  v6 = 1024;
  sub_10000F550();
  sub_10000F518((void *)&_mh_execute_header, &_os_log_default, v1, "*** Assertion failure (Identifier: catch-all) : %s %s:%d %{public}@", (uint8_t *)&v2);

  sub_10000F544();
}

void sub_100077074()
{
  id v0;
  uint64_t v1;
  int v2[10];

  v0 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("Invalid parameter not satisfying %s"), "block");
  v2[0] = 136315906;
  sub_10001A714();
  sub_10001A704();
  sub_10000F524();
  sub_10000F518((void *)&_mh_execute_header, &_os_log_default, v1, "*** Assertion failure (Identifier: catch-all) : %s %s:%d %{public}@", (uint8_t *)v2);

  sub_10000F538();
}

void sub_100077130()
{
  id v0;
  uint64_t v1;
  int v2[10];

  v0 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("invalid nil value for '%s'"), "self.lastAppOpenDate");
  v2[0] = 136315906;
  sub_10001A714();
  sub_10001A704();
  sub_10000F524();
  sub_10000F518((void *)&_mh_execute_header, &_os_log_default, v1, "*** Assertion failure (Identifier: catch-all) : %s %s:%d %{public}@", (uint8_t *)v2);

  sub_10000F538();
}

void sub_1000771EC()
{
  id v0;
  uint64_t v1;
  int v2[10];

  v0 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("invalid nil value for '%s'"), "self.lastAppOpenDate");
  v2[0] = 136315906;
  sub_10001A714();
  sub_10001A704();
  sub_10000F524();
  sub_10000F518((void *)&_mh_execute_header, &_os_log_default, v1, "*** Assertion failure (Identifier: catch-all) : %s %s:%d %{public}@", (uint8_t *)v2);

  sub_10000F538();
}

void sub_1000772A8()
{
  id v0;
  uint64_t v1;
  int v2[10];

  v0 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("invalid nil value for '%s'"), "userIDDeterminationGroup");
  v2[0] = 136315906;
  sub_10001A714();
  sub_10001A704();
  sub_10000F524();
  sub_10000F518((void *)&_mh_execute_header, &_os_log_default, v1, "*** Assertion failure (Identifier: catch-all) : %s %s:%d %{public}@", (uint8_t *)v2);

  sub_10000F538();
}

void sub_100077364()
{
  id v0;
  uint64_t v1;
  int v2;
  const char *v3;
  __int16 v4;
  char *v5;
  __int16 v6;

  v0 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("ending a session when none is in progress"));
  v2 = 136315906;
  v3 = "-[FRAnalyticsController endSessionForReason:byStartingNewSession:resetUserID:forSceneID:]";
  v4 = 2080;
  v5 = "FRAnalyticsController.m";
  v6 = 1024;
  sub_10000F550();
  sub_10000F518((void *)&_mh_execute_header, &_os_log_default, v1, "*** Assertion failure (Identifier: catch-all) : %s %s:%d %{public}@", (uint8_t *)&v2);

  sub_10000F544();
}

void sub_100077424()
{
  id v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v0 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("shouldn't have an in-flight image refresh operation"));
  sub_10000F550();
  sub_10000F5A0((void *)&_mh_execute_header, &_os_log_default, v1, "*** Assertion failure (Identifier: catch-all) : %s %s:%d %{public}@", v2, v3, v4, v5, 2u);

  sub_10001C53C();
}

void sub_1000774E4(uint64_t a1, __CFError **a2, void *a3)
{
  __CFError *v4;
  NSObject *v5;
  int v6;
  uint64_t v7;
  __int16 v8;
  CFIndex Code;

  v4 = *a2;
  v5 = a3;
  v6 = 138412546;
  v7 = a1;
  v8 = 2048;
  Code = CFErrorGetCode(v4);
  _os_log_error_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "Error: Couldn't load image at path %@ - %ld", (uint8_t *)&v6, 0x16u);

  sub_10001C53C();
}

void sub_100077590()
{
  id v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v0 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("already have an image refresh operation"));
  sub_10000F550();
  sub_10000F5A0((void *)&_mh_execute_header, &_os_log_default, v1, "*** Assertion failure (Identifier: catch-all) : %s %s:%d %{public}@", v2, v3, v4, v5, 2u);

  sub_10001C53C();
}

void sub_100077654(uint64_t a1, NSObject *a2)
{
  uint64_t v2;
  int v3;
  uint64_t v4;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = 138543362;
  v4 = v2;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "ERROR: No image for %{public}@", (uint8_t *)&v3, 0xCu);
}

void sub_1000776CC()
{
  id v0;
  int v1;
  const char *v2;
  __int16 v3;
  char *v4;
  __int16 v5;
  int v6;
  __int16 v7;
  id v8;

  v0 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("Expecting a resource identifier for the embed configuration"));
  v1 = 136315906;
  v2 = "-[FREmbedConfigurationOperation performOperation]_block_invoke";
  v3 = 2080;
  v4 = "FREmbedConfigurationOperation.m";
  v5 = 1024;
  v6 = 40;
  v7 = 2114;
  v8 = v0;
  _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "*** Assertion failure (Identifier: catch-all) : %s %s:%d %{public}@", (uint8_t *)&v1, 0x26u);

}

void sub_1000777A8()
{
  id v0;
  int v1;
  int v2;
  int v3;
  int v4;
  int v5;
  uint64_t v6;

  v0 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("Invalid parameter not satisfying %s"));
  sub_10001A714();
  sub_10001A704();
  sub_10000F524();
  sub_10000F5B0((void *)&_mh_execute_header, &_os_log_default, v1, "*** Assertion failure (Identifier: catch-all) : %s %s:%d %{public}@", v2, v3, v4, v5, (uint64_t)"appActivityMonitor", v6, 2u);

  sub_10000F538();
}

void sub_100077860()
{
  id v0;
  int v1;
  int v2;
  int v3;
  int v4;
  int v5;
  uint64_t v6;

  v0 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("Invalid parameter not satisfying %s"));
  sub_10001A714();
  sub_10001A704();
  sub_10000F524();
  sub_10000F5B0((void *)&_mh_execute_header, &_os_log_default, v1, "*** Assertion failure (Identifier: catch-all) : %s %s:%d %{public}@", v2, v3, v4, v5, (uint64_t)"URL", v6, 2u);

  sub_10000F538();
}

void sub_100077918()
{
  id v0;
  int v1;
  int v2;
  int v3;
  int v4;
  int v5;
  uint64_t v6;

  v0 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("Invalid parameter not satisfying %s"));
  sub_10001A714();
  sub_10001A704();
  sub_10000F524();
  sub_10000F5B0((void *)&_mh_execute_header, &_os_log_default, v1, "*** Assertion failure (Identifier: catch-all) : %s %s:%d %{public}@", v2, v3, v4, v5, (uint64_t)"[URL nss_isNewsURL]", v6, 2u);

  sub_10000F538();
}

void sub_1000779D0()
{
  id v0;
  int v1;
  int v2;
  int v3;
  int v4;
  int v5;
  uint64_t v6;

  v0 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("Invalid parameter not satisfying %s"));
  sub_10001A714();
  sub_10001A704();
  sub_10000F524();
  sub_10000F5B0((void *)&_mh_execute_header, &_os_log_default, v1, "*** Assertion failure (Identifier: catch-all) : %s %s:%d %{public}@", v2, v3, v4, v5, (uint64_t)"URL", v6, 2u);

  sub_10000F538();
}

void sub_100077A88()
{
  id v0;
  int v1;
  int v2;
  int v3;
  int v4;
  int v5;
  uint64_t v6;

  v0 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("Invalid parameter not satisfying %s"));
  sub_10000F524();
  sub_10000F5B0((void *)&_mh_execute_header, &_os_log_default, v1, "*** Assertion failure (Identifier: catch-all) : %s %s:%d %{public}@", v2, v3, v4, v5, (uint64_t)"redirectService", v6, 2u);

  sub_10000F538();
}

void sub_100077B50()
{
  id v0;
  int v1;
  int v2;
  int v3;
  int v4;
  int v5;
  uint64_t v6;

  v0 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("Invalid parameter not satisfying %s"));
  sub_10000F524();
  sub_10000F5B0((void *)&_mh_execute_header, &_os_log_default, v1, "*** Assertion failure (Identifier: catch-all) : %s %s:%d %{public}@", v2, v3, v4, v5, (uint64_t)"analyticsReferralFactory", v6, 2u);

  sub_10000F538();
}

void sub_100077C18()
{
  id v0;
  uint64_t v1;
  int v2[10];

  v0 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("invalid nil value for '%s'"), "font");
  v2[0] = 136315906;
  sub_10001A714();
  sub_10001A704();
  sub_10000F524();
  sub_10000F518((void *)&_mh_execute_header, &_os_log_default, v1, "*** Assertion failure (Identifier: catch-all) : %s %s:%d %{public}@", (uint8_t *)v2);

  sub_10000F538();
}

void sub_100077CD4()
{
  id v0;
  uint64_t v1;
  int v2[10];

  v0 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("invalid nil value for '%s'"), "font");
  v2[0] = 136315906;
  sub_10001A714();
  sub_10001A704();
  sub_10000F524();
  sub_10000F518((void *)&_mh_execute_header, &_os_log_default, v1, "*** Assertion failure (Identifier: catch-all) : %s %s:%d %{public}@", (uint8_t *)v2);

  sub_10000F538();
}

void sub_100077D90()
{
  id v0;
  uint64_t v1;
  int v2[10];

  v0 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("invalid nil value for '%s'"), "font");
  v2[0] = 136315906;
  sub_10001A714();
  sub_10001A704();
  sub_10000F524();
  sub_10000F518((void *)&_mh_execute_header, &_os_log_default, v1, "*** Assertion failure (Identifier: catch-all) : %s %s:%d %{public}@", (uint8_t *)v2);

  sub_10000F538();
}

void sub_100077E4C()
{
  id v0;
  uint64_t v1;
  int v2;
  const char *v3;
  __int16 v4;
  char *v5;
  __int16 v6;

  v0 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("Invalid condensed font given"));
  v2 = 136315906;
  v3 = "+[UIFont(FRAdditions) fr_fontWithName:size:]";
  v4 = 2080;
  v5 = "UIFont+FRAdditions.m";
  v6 = 1024;
  sub_10000F550();
  sub_10000F518((void *)&_mh_execute_header, &_os_log_default, v1, "*** Assertion failure (Identifier: catch-all) : %s %s:%d %{public}@", (uint8_t *)&v2);

  sub_10000F544();
}

void sub_100077F0C()
{
  id v0;
  uint64_t v1;
  int v2;
  const char *v3;
  __int16 v4;
  char *v5;
  __int16 v6;

  v0 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("Invalid dynamic type mapping"));
  v2 = 136315906;
  v3 = "+[UIFont(FRAdditions) fr_appropriateValueForCurrentContentSizeCategoryUsingMap:]";
  v4 = 2080;
  v5 = "UIFont+FRAdditions.m";
  v6 = 1024;
  sub_10000F550();
  sub_10000F518((void *)&_mh_execute_header, &_os_log_default, v1, "*** Assertion failure (Identifier: catch-all) : %s %s:%d %{public}@", (uint8_t *)&v2);

  sub_10000F544();
}

void sub_100077FCC()
{
  id v0;
  uint64_t v1;
  int v2[10];

  v0 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("invalid nil value for '%s'"), "map[UIContentSizeCategoryLarge]");
  v2[0] = 136315906;
  sub_10001A714();
  sub_10001A704();
  sub_10000F524();
  sub_10000F518((void *)&_mh_execute_header, &_os_log_default, v1, "*** Assertion failure (Identifier: catch-all) : %s %s:%d %{public}@", (uint8_t *)v2);

  sub_10000F538();
}

void sub_100078088()
{
  id v0;
  int v1;
  int v2;
  int v3;
  int v4;
  int v5;
  uint64_t v6;

  v0 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("Invalid parameter not satisfying %s"));
  sub_10001A714();
  sub_10001A704();
  sub_10000F524();
  sub_10000F5B0((void *)&_mh_execute_header, &_os_log_default, v1, "*** Assertion failure (Identifier: catch-all) : %s %s:%d %{public}@", v2, v3, v4, v5, (uint64_t)"sharedDirectoryFileURL", v6, 2u);

  sub_10000F538();
}

void sub_100078140()
{
  id v0;
  int v1;
  int v2;
  int v3;
  int v4;
  int v5;
  uint64_t v6;

  v0 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("Invalid parameter not satisfying %s"));
  sub_10001A714();
  sub_10001A704();
  sub_10000F524();
  sub_10000F5B0((void *)&_mh_execute_header, &_os_log_default, v1, "*** Assertion failure (Identifier: catch-all) : %s %s:%d %{public}@", v2, v3, v4, v5, (uint64_t)"referralItem", v6, 2u);

  sub_10000F538();
}

void sub_1000781F8()
{
  id v0;
  int v1;
  int v2;
  int v3;
  int v4;
  int v5;
  uint64_t v6;

  v0 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("invalid nil value for '%s'"));
  sub_10001A714();
  sub_10001A704();
  sub_10000F524();
  sub_10000F5B0((void *)&_mh_execute_header, &_os_log_default, v1, "*** Assertion failure (Identifier: catch-all) : %s %s:%d %{public}@", v2, v3, v4, v5, (uint64_t)"sourceFilePath", v6, 2u);

  sub_10000F538();
}

void sub_1000782B0()
{
  id v0;
  int v1;
  int v2;
  int v3;
  int v4;
  int v5;
  uint64_t v6;

  v0 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("Invalid parameter not satisfying %s"));
  sub_10001A714();
  sub_10001A704();
  sub_10000F524();
  sub_10000F5B0((void *)&_mh_execute_header, &_os_log_default, v1, "*** Assertion failure (Identifier: catch-all) : %s %s:%d %{public}@", v2, v3, v4, v5, (uint64_t)"assetManager", v6, 2u);

  sub_10000F538();
}

void sub_100078368()
{
  id v0;
  int v1;
  int v2;
  int v3;
  int v4;
  int v5;
  uint64_t v6;

  v0 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("Invalid parameter not satisfying %s"));
  sub_10001A714();
  sub_10001A704();
  sub_10000F524();
  sub_10000F5B0((void *)&_mh_execute_header, &_os_log_default, v1, "*** Assertion failure (Identifier: catch-all) : %s %s:%d %{public}@", v2, v3, v4, v5, (uint64_t)"queryValue", v6, 2u);

  sub_10000F538();
}

void sub_100078420()
{
  id v0;
  int v1;
  int v2;
  int v3;
  int v4;
  int v5;
  uint64_t v6;

  v0 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("Invalid parameter not satisfying %s"));
  sub_10001A714();
  sub_10001A704();
  sub_10000F524();
  sub_10000F5B0((void *)&_mh_execute_header, &_os_log_default, v1, "*** Assertion failure (Identifier: catch-all) : %s %s:%d %{public}@", v2, v3, v4, v5, (uint64_t)"itemClass", v6, 2u);

  sub_10000F538();
}

void sub_1000784D8()
{
  id v0;
  uint64_t v1;
  int v2[10];

  v0 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("auto-favorites operation requires an aggregate store"));
  v2[0] = 136315906;
  sub_100027764();
  sub_100027754();
  sub_10000F550();
  sub_10000F518((void *)&_mh_execute_header, &_os_log_default, v1, "*** Assertion failure (Identifier: catch-all) : %s %s:%d %{public}@", (uint8_t *)v2);

  sub_10000F544();
}

void sub_100078588()
{
  id v0;
  uint64_t v1;
  int v2[10];

  v0 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("auto-favorites operation requires a tag ranker"));
  v2[0] = 136315906;
  sub_100027764();
  sub_100027754();
  sub_10000F550();
  sub_10000F518((void *)&_mh_execute_header, &_os_log_default, v1, "*** Assertion failure (Identifier: catch-all) : %s %s:%d %{public}@", (uint8_t *)v2);

  sub_10000F544();
}

void sub_100078638()
{
  id v0;
  uint64_t v1;
  int v2[10];

  v0 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("auto-favorites operation requires user info"));
  v2[0] = 136315906;
  sub_100027764();
  sub_100027754();
  sub_10000F550();
  sub_10000F518((void *)&_mh_execute_header, &_os_log_default, v1, "*** Assertion failure (Identifier: catch-all) : %s %s:%d %{public}@", (uint8_t *)v2);

  sub_10000F544();
}

void sub_1000786E8()
{
  id v0;
  uint64_t v1;
  int v2[10];

  v0 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("auto-favorites operation requires a tag controller"));
  v2[0] = 136315906;
  sub_100027764();
  sub_100027754();
  sub_10000F550();
  sub_10000F518((void *)&_mh_execute_header, &_os_log_default, v1, "*** Assertion failure (Identifier: catch-all) : %s %s:%d %{public}@", (uint8_t *)v2);

  sub_10000F544();
}

void sub_100078798()
{
  id v0;
  uint64_t v1;
  int v2[10];

  v0 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("auto-favorites operation requires a subscription controller"));
  v2[0] = 136315906;
  sub_100027764();
  sub_100027754();
  sub_10000F550();
  sub_10000F518((void *)&_mh_execute_header, &_os_log_default, v1, "*** Assertion failure (Identifier: catch-all) : %s %s:%d %{public}@", (uint8_t *)v2);

  sub_10000F544();
}

void sub_100078848()
{
  id v0;
  uint64_t v1;
  int v2[10];

  v0 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("auto-favorites operation requires configurable values"));
  v2[0] = 136315906;
  sub_100027764();
  sub_100027754();
  sub_10000F550();
  sub_10000F518((void *)&_mh_execute_header, &_os_log_default, v1, "*** Assertion failure (Identifier: catch-all) : %s %s:%d %{public}@", (uint8_t *)v2);

  sub_10000F544();
}

void sub_1000788F8()
{
  id v0;
  uint64_t v1;
  int v2[10];

  v0 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("We can't process signals without a whitelist"));
  v2[0] = 136315906;
  sub_100027764();
  sub_100027754();
  sub_10000F550();
  sub_10000F518((void *)&_mh_execute_header, &_os_log_default, v1, "*** Assertion failure (Identifier: catch-all) : %s %s:%d %{public}@", (uint8_t *)v2);

  sub_10000F544();
}

void sub_1000789AC()
{
  id v0;
  int v1;
  int v2;
  int v3;
  int v4;
  int v5;
  uint64_t v6;

  v0 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("Invalid parameter not satisfying %s"));
  sub_10001A714();
  sub_10001A704();
  sub_10000F524();
  sub_10000F5B0((void *)&_mh_execute_header, &_os_log_default, v1, "*** Assertion failure (Identifier: catch-all) : %s %s:%d %{public}@", v2, v3, v4, v5, (uint64_t)"completion", v6, 2u);

  sub_10000F538();
}

void sub_100078A68(uint64_t a1, void *a2)
{
  void *v2;
  NSObject *v3;
  void *v4;
  int v5;
  void *v6;

  v2 = *(void **)(a1 + 32);
  v3 = a2;
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "shortOperationDescription"));
  v5 = 138543362;
  v6 = v4;
  _os_log_error_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "%{public}@ failed to process signals because there's no whitelist", (uint8_t *)&v5, 0xCu);

}

void sub_100078B0C()
{
  id v0;
  int v1;
  int v2;
  int v3;
  int v4;
  int v5;
  uint64_t v6;

  v0 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("invalid nil value for '%s'"));
  sub_10001A714();
  sub_10001A704();
  sub_10000F524();
  sub_10000F5B0((void *)&_mh_execute_header, &_os_log_default, v1, "*** Assertion failure (Identifier: catch-all) : %s %s:%d %{public}@", v2, v3, v4, v5, (uint64_t)"locationAutoFavoriteCandidates", v6, 2u);

  sub_10000F538();
}

void sub_100078BD0()
{
  id v0;
  int v1;
  int v2;
  int v3;
  int v4;
  int v5;
  uint64_t v6;

  v0 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("invalid nil value for '%s'"));
  sub_10001A714();
  sub_10001A704();
  sub_10000F524();
  sub_10000F5B0((void *)&_mh_execute_header, &_os_log_default, v1, "*** Assertion failure (Identifier: catch-all) : %s %s:%d %{public}@", v2, v3, v4, v5, (uint64_t)"safariAutoFavoriteCandidates", v6, 2u);

  sub_10000F538();
}

void sub_100078C94()
{
  id v0;
  int v1;
  int v2;
  int v3;
  int v4;
  int v5;
  uint64_t v6;

  v0 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("invalid nil value for '%s'"));
  sub_10001A714();
  sub_10001A704();
  sub_10000F524();
  sub_10000F5B0((void *)&_mh_execute_header, &_os_log_default, v1, "*** Assertion failure (Identifier: catch-all) : %s %s:%d %{public}@", v2, v3, v4, v5, (uint64_t)"appUsageAutoFavoriteCandidates", v6, 2u);

  sub_10000F538();
}

void sub_100078D58()
{
  id v0;
  int v1;
  int v2;
  int v3;
  int v4;
  int v5;
  uint64_t v6;

  v0 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("invalid nil value for '%s'"));
  sub_10001A714();
  sub_10001A704();
  sub_10000F524();
  sub_10000F5B0((void *)&_mh_execute_header, &_os_log_default, v1, "*** Assertion failure (Identifier: catch-all) : %s %s:%d %{public}@", v2, v3, v4, v5, (uint64_t)"portraitAutoFavoriteCandidates", v6, 2u);

  sub_10000F538();
}

void sub_100078E1C()
{
  id v0;
  int v1;
  int v2;
  int v3;
  int v4;
  int v5;
  uint64_t v6;

  v0 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("invalid nil value for '%s'"));
  sub_10001A714();
  sub_10001A704();
  sub_10000F524();
  sub_10000F5B0((void *)&_mh_execute_header, &_os_log_default, v1, "*** Assertion failure (Identifier: catch-all) : %s %s:%d %{public}@", v2, v3, v4, v5, (uint64_t)"existingInternalSignalGroupableFavoriteCandidates", v6, 2u);

  sub_10000F538();
}

void sub_100078EE0()
{
  id v0;
  int v1;
  int v2;
  int v3;
  int v4;
  int v5;
  uint64_t v6;

  v0 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("invalid nil value for '%s'"));
  sub_10001A714();
  sub_10001A704();
  sub_10000F524();
  sub_10000F5B0((void *)&_mh_execute_header, &_os_log_default, v1, "*** Assertion failure (Identifier: catch-all) : %s %s:%d %{public}@", v2, v3, v4, v5, (uint64_t)"internalSignalGroupableFavoriteCandidates", v6, 2u);

  sub_10000F538();
}

void sub_100078FA4()
{
  id v0;
  int v1;
  int v2;
  int v3;
  int v4;
  int v5;
  uint64_t v6;

  v0 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("invalid nil value for '%s'"));
  sub_10001A714();
  sub_10001A704();
  sub_10000F524();
  sub_10000F5B0((void *)&_mh_execute_header, &_os_log_default, v1, "*** Assertion failure (Identifier: catch-all) : %s %s:%d %{public}@", v2, v3, v4, v5, (uint64_t)"existingInternalSignalAutoFavoriteCandidates", v6, 2u);

  sub_10000F538();
}

void sub_100079068()
{
  id v0;
  int v1;
  int v2;
  int v3;
  int v4;
  int v5;
  uint64_t v6;

  v0 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("invalid nil value for '%s'"));
  sub_10001A714();
  sub_10001A704();
  sub_10000F524();
  sub_10000F5B0((void *)&_mh_execute_header, &_os_log_default, v1, "*** Assertion failure (Identifier: catch-all) : %s %s:%d %{public}@", v2, v3, v4, v5, (uint64_t)"internalSignalAutoFavoriteCandidates", v6, 2u);

  sub_10000F538();
}

void sub_10007912C()
{
  id v0;
  int v1;
  int v2;
  int v3;
  int v4;
  int v5;
  uint64_t v6;

  v0 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("invalid nil value for '%s'"));
  sub_10001A714();
  sub_10001A704();
  sub_10000F524();
  sub_10000F5B0((void *)&_mh_execute_header, &_os_log_default, v1, "*** Assertion failure (Identifier: catch-all) : %s %s:%d %{public}@", v2, v3, v4, v5, (uint64_t)"defaultCandidates", v6, 2u);

  sub_10000F538();
}

void sub_1000791F0()
{
  id v0;
  int v1;
  int v2;
  int v3;
  int v4;
  int v5;
  uint64_t v6;

  v0 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("Invalid parameter not satisfying %s"));
  sub_10001A714();
  sub_10001A704();
  sub_10000F524();
  sub_10000F5B0((void *)&_mh_execute_header, &_os_log_default, v1, "*** Assertion failure (Identifier: catch-all) : %s %s:%d %{public}@", v2, v3, v4, v5, (uint64_t)"completion", v6, 2u);

  sub_10000F538();
}

void sub_1000792A8()
{
  id v0;
  int v1;
  int v2;
  int v3;
  int v4;
  int v5;
  uint64_t v6;

  v0 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("Invalid parameter not satisfying %s"));
  sub_10001A714();
  sub_10001A704();
  sub_10000F524();
  sub_10000F5B0((void *)&_mh_execute_header, &_os_log_default, v1, "*** Assertion failure (Identifier: catch-all) : %s %s:%d %{public}@", v2, v3, v4, v5, (uint64_t)"completion", v6, 2u);

  sub_10000F538();
}

void sub_100079364(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_10000F564((void *)&_mh_execute_header, a1, a3, "Tried to process url events with no mapping file", a5, a6, a7, a8, 0);
  sub_100027774();
}

void sub_100079394(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_10000F564((void *)&_mh_execute_header, a1, a3, "Tried to process app events with no mapping file", a5, a6, a7, a8, 0);
  sub_100027774();
}

void sub_1000793C4()
{
  id v0;
  int v1;
  int v2;
  int v3;
  int v4;
  int v5;
  uint64_t v6;

  v0 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("invalid nil value for '%s'"));
  sub_10001A714();
  sub_10001A704();
  sub_10000F524();
  sub_10000F5B0((void *)&_mh_execute_header, &_os_log_default, v1, "*** Assertion failure (Identifier: catch-all) : %s %s:%d %{public}@", v2, v3, v4, v5, (uint64_t)"bundleIDMapping", v6, 2u);

  sub_10000F538();
}

void sub_10007947C()
{
  id v0;
  int v1;
  int v2;
  int v3;
  int v4;
  int v5;
  uint64_t v6;

  v0 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("invalid nil value for '%s'"));
  sub_10001A714();
  sub_10001A704();
  sub_10000F524();
  sub_10000F5B0((void *)&_mh_execute_header, &_os_log_default, v1, "*** Assertion failure (Identifier: catch-all) : %s %s:%d %{public}@", v2, v3, v4, v5, (uint64_t)"urlMapping", v6, 2u);

  sub_10000F538();
}

void sub_100079534()
{
  id v0;
  int v1;
  int v2;
  int v3;
  int v4;
  int v5;
  uint64_t v6;

  v0 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("Invalid parameter not satisfying %s"));
  sub_10001A714();
  sub_10001A704();
  sub_10000F524();
  sub_10000F5B0((void *)&_mh_execute_header, &_os_log_default, v1, "*** Assertion failure (Identifier: catch-all) : %s %s:%d %{public}@", v2, v3, v4, v5, (uint64_t)"unwrappedCompletion", v6, 2u);

  sub_10000F538();
}

void sub_1000795EC()
{
  id v0;
  int v1;
  int v2;
  int v3;
  int v4;
  int v5;
  uint64_t v6;

  v0 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("Invalid parameter not satisfying %s"));
  sub_10001A714();
  sub_10001A704();
  sub_10000F524();
  sub_10000F5B0((void *)&_mh_execute_header, &_os_log_default, v1, "*** Assertion failure (Identifier: catch-all) : %s %s:%d %{public}@", v2, v3, v4, v5, (uint64_t)"safariSignals", v6, 2u);

  sub_10000F538();
}

void sub_1000796A4()
{
  id v0;
  int v1;
  int v2;
  int v3;
  int v4;
  int v5;
  uint64_t v6;

  v0 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("Invalid parameter not satisfying %s"));
  sub_10001A714();
  sub_10001A704();
  sub_10000F524();
  sub_10000F5B0((void *)&_mh_execute_header, &_os_log_default, v1, "*** Assertion failure (Identifier: catch-all) : %s %s:%d %{public}@", v2, v3, v4, v5, (uint64_t)"appSignals", v6, 2u);

  sub_10000F538();
}

void sub_10007975C(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_10000F564((void *)&_mh_execute_header, a1, a3, "Tried to process Safari signals without favorability scores", a5, a6, a7, a8, 0);
  sub_100027774();
}

void sub_10007978C()
{
  id v0;
  int v1;
  int v2;
  int v3;
  int v4;
  int v5;
  uint64_t v6;

  v0 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("invalid nil value for '%s'"));
  sub_10001A714();
  sub_10001A704();
  sub_10000F524();
  sub_10000F5B0((void *)&_mh_execute_header, &_os_log_default, v1, "*** Assertion failure (Identifier: catch-all) : %s %s:%d %{public}@", v2, v3, v4, v5, (uint64_t)"favorabilityScores", v6, 2u);

  sub_10000F538();
}

void sub_100079844()
{
  id v0;
  int v1;
  int v2;
  int v3;
  int v4;
  int v5;
  uint64_t v6;

  v0 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("Invalid parameter not satisfying %s"));
  sub_10001A714();
  sub_10001A704();
  sub_10000F524();
  sub_10000F5B0((void *)&_mh_execute_header, &_os_log_default, v1, "*** Assertion failure (Identifier: catch-all) : %s %s:%d %{public}@", v2, v3, v4, v5, (uint64_t)"completion", v6, 2u);

  sub_10000F538();
}

void sub_1000798FC()
{
  id v0;
  uint64_t v1;
  int v2[10];

  v0 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("This condition should never happen as we are using siri preferences to manage this now"));
  v2[0] = 136315906;
  sub_100027764();
  sub_100027754();
  sub_10000F550();
  sub_10000F518((void *)&_mh_execute_header, &_os_log_default, v1, "*** Assertion failure (Identifier: catch-all) : %s %s:%d %{public}@", (uint8_t *)v2);

  sub_10000F544();
}

void sub_1000799AC()
{
  id v0;
  int v1;
  int v2;
  int v3;
  int v4;
  int v5;
  uint64_t v6;

  v0 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("Invalid parameter not satisfying %s"));
  sub_10001A714();
  sub_10001A704();
  sub_10000F524();
  sub_10000F5B0((void *)&_mh_execute_header, &_os_log_default, v1, "*** Assertion failure (Identifier: catch-all) : %s %s:%d %{public}@", v2, v3, v4, v5, (uint64_t)"completion", v6, 2u);

  sub_10000F538();
}

void sub_100079A64(uint64_t a1, NSObject *a2)
{
  int v2;
  uint64_t v3;

  v2 = 138412290;
  v3 = a1;
  _os_log_debug_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_DEBUG, "No favorability multiplier specified for %@", (uint8_t *)&v2, 0xCu);
}

void sub_100079AD8(uint64_t a1, uint64_t a2, os_log_t log)
{
  int v3;
  uint64_t v4;
  __int16 v5;
  uint64_t v6;

  v3 = 138412546;
  v4 = a1;
  v5 = 2112;
  v6 = a2;
  _os_log_debug_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_DEBUG, "Found a favorability multiplier of %@ for tag %@", (uint8_t *)&v3, 0x16u);
}

void sub_100079B5C()
{
  id v0;
  int v1;
  int v2;
  int v3;
  int v4;
  int v5;
  uint64_t v6;

  v0 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("invalid nil value for '%s'"));
  sub_10001A714();
  sub_10001A704();
  sub_10000F524();
  sub_10000F5B0((void *)&_mh_execute_header, &_os_log_default, v1, "*** Assertion failure (Identifier: catch-all) : %s %s:%d %{public}@", v2, v3, v4, v5, (uint64_t)"tagID", v6, 2u);

  sub_10000F538();
}

void sub_100079C14()
{
  uint64_t v0;
  os_log_t v1;

  sub_100028AC4(__stack_chk_guard);
  sub_10000F5C0();
  sub_10000F574((void *)&_mh_execute_header, v0, v1, "Error in submitting portrait feedback for explicit engagement: %{public}@ with articleID: %{public}@ and topicIDs: %{public}@");
  sub_100028ABC();
}

void sub_100079C74()
{
  uint64_t v0;
  os_log_t v1;

  sub_100028AC4(__stack_chk_guard);
  sub_10000F5C0();
  sub_10000F574((void *)&_mh_execute_header, v0, v1, "Error in submitting portrait feedback for explicit rejection: %{public}@ with articleID: %{public}@ and topicIDs: %{public}@");
  sub_100028ABC();
}

void sub_100079CD4()
{
  uint64_t v0;
  os_log_t v1;

  sub_100028AC4(__stack_chk_guard);
  sub_10000F5C0();
  sub_10000F574((void *)&_mh_execute_header, v0, v1, "Error in submitting portrait feedback for implicit engagement: %{public}@ with articleID: %{public}@ and topicIDs: %{public}@");
  sub_100028ABC();
}

void sub_100079D34()
{
  uint64_t v0;
  os_log_t v1;

  sub_100028AC4(__stack_chk_guard);
  sub_10000F5C0();
  sub_10000F574((void *)&_mh_execute_header, v0, v1, "Error in submitting portrait feedback for implicit rejection: %{public}@ with articleID: %{public}@ and topicIDs: %{public}@");
  sub_100028ABC();
}

void sub_100079D94()
{
  id v0;
  int v1;
  int v2;
  int v3;
  int v4;
  int v5;
  uint64_t v6;

  v0 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("Invalid parameter not satisfying %s"));
  sub_10000F524();
  sub_10000F5B0((void *)&_mh_execute_header, &_os_log_default, v1, "*** Assertion failure (Identifier: catch-all) : %s %s:%d %{public}@", v2, v3, v4, v5, (uint64_t)"application", v6, 2u);

  sub_10000F538();
}

void sub_100079E5C()
{
  id v0;
  int v1;
  int v2;
  int v3;
  int v4;
  int v5;
  uint64_t v6;

  v0 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("Invalid parameter not satisfying %s"));
  sub_10000F524();
  sub_10000F5B0((void *)&_mh_execute_header, &_os_log_default, v1, "*** Assertion failure (Identifier: catch-all) : %s %s:%d %{public}@", v2, v3, v4, v5, (uint64_t)"URL", v6, 2u);

  sub_10000F538();
}

void sub_100079F24()
{
  id v0;
  uint8_t buf[4];
  const char *v2;
  __int16 v3;
  char *v4;
  __int16 v5;
  int v6;
  __int16 v7;
  id v8;

  v0 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("Invalid parameter not satisfying %s"), "thumbnailCreator != nil");
  *(_DWORD *)buf = 136315906;
  v2 = "-[FREditorialItemCreator initWithThumbnailCreator:]";
  v3 = 2080;
  v4 = "FREditorialItemCreator.m";
  v5 = 1024;
  v6 = 32;
  v7 = 2114;
  v8 = v0;
  _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "*** Assertion failure (Identifier: catch-all) : %s %s:%d %{public}@", buf, 0x26u);

}

void sub_10007A00C()
{
  id v0;
  int v1;
  int v2;
  int v3;
  int v4;
  int v5;
  uint64_t v6;

  v0 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("Invalid parameter not satisfying %s"));
  sub_10001A714();
  sub_10001A704();
  sub_10000F524();
  sub_10000F5B0((void *)&_mh_execute_header, &_os_log_default, v1, "*** Assertion failure (Identifier: catch-all) : %s %s:%d %{public}@", v2, v3, v4, v5, (uint64_t)"flintDocumentURLAssetHandlesByRemoteURL", v6, 2u);

  sub_10000F538();
}

void sub_10007A0C4()
{
  id v0;
  int v1;
  int v2;
  int v3;
  int v4;
  int v5;
  uint64_t v6;

  v0 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("Invalid parameter not satisfying %s"));
  sub_10001A714();
  sub_10001A704();
  sub_10000F524();
  sub_10000F5B0((void *)&_mh_execute_header, &_os_log_default, v1, "*** Assertion failure (Identifier: catch-all) : %s %s:%d %{public}@", v2, v3, v4, v5, (uint64_t)"JSONArray", v6, 2u);

  sub_10000F538();
}

void sub_10007A17C()
{
  id v0;
  int v1;
  int v2;
  int v3;
  int v4;
  int v5;
  uint64_t v6;

  v0 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("Invalid parameter not satisfying %s"));
  sub_10001A714();
  sub_10001A704();
  sub_10000F524();
  sub_10000F5B0((void *)&_mh_execute_header, &_os_log_default, v1, "*** Assertion failure (Identifier: catch-all) : %s %s:%d %{public}@", v2, v3, v4, v5, (uint64_t)"assetManager", v6, 2u);

  sub_10000F538();
}

void sub_10007A234()
{
  id v0;
  int v1;
  int v2;
  int v3;
  int v4;
  int v5;
  uint64_t v6;

  v0 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("Invalid parameter not satisfying %s"));
  sub_10001A714();
  sub_10001A704();
  sub_10000F524();
  sub_10000F5B0((void *)&_mh_execute_header, &_os_log_default, v1, "*** Assertion failure (Identifier: catch-all) : %s %s:%d %{public}@", v2, v3, v4, v5, (uint64_t)"assetHandlesByRemoteURL", v6, 2u);

  sub_10000F538();
}

void sub_10007A2EC()
{
  id v0;
  int v1;
  int v2;
  int v3;
  int v4;
  int v5;
  uint64_t v6;

  v0 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("Invalid parameter not satisfying %s"));
  sub_10001A714();
  sub_10001A704();
  sub_10000F524();
  sub_10000F5B0((void *)&_mh_execute_header, &_os_log_default, v1, "*** Assertion failure (Identifier: catch-all) : %s %s:%d %{public}@", v2, v3, v4, v5, (uint64_t)"encodableElement", v6, 2u);

  sub_10000F538();
}

void sub_10007A3A4()
{
  id v0;
  int v1;
  int v2;
  int v3;
  int v4;
  int v5;
  uint64_t v6;

  v0 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("Invalid parameter not satisfying %s"));
  sub_10001A714();
  sub_10001A704();
  sub_10000F524();
  sub_10000F5B0((void *)&_mh_execute_header, &_os_log_default, v1, "*** Assertion failure (Identifier: catch-all) : %s %s:%d %{public}@", v2, v3, v4, v5, (uint64_t)"JSONArray", v6, 2u);

  sub_10000F538();
}

void sub_10007A45C()
{
  void *v0;
  _DWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t *v6;

  sub_10002D410();
  *v1 = 136315906;
  sub_10002D3F8((uint64_t)v1, (uint64_t)"-[UIImage(FRAdditions) fr_imageAspectFitToSize:targetScale:croppedToCornerRadius:withMargin:withBackgroundColor:borderColor:]");
  sub_10002D3E8(v2, (uint64_t)"UIImage+FRAdditions.m");
  sub_10000F5E0(v3, v4, 236);
  sub_10000F518((void *)&_mh_execute_header, &_os_log_default, v5, "*** Assertion failure (Identifier: catch-all) : %s %s:%d %{public}@", v6);

  sub_10002D408();
}

void sub_10007A4C0()
{
  void *v0;
  _DWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t *v6;

  sub_10002D410();
  *v1 = 136315906;
  sub_10002D3F8((uint64_t)v1, (uint64_t)"-[UIImage(FRAdditions) fr_bannerImageWithLogo:]");
  sub_10002D3E8(v2, (uint64_t)"UIImage+FRAdditions.m");
  sub_10000F5E0(v3, v4, 420);
  sub_10000F518((void *)&_mh_execute_header, &_os_log_default, v5, "*** Assertion failure (Identifier: catch-all) : %s %s:%d %{public}@", v6);

  sub_10002D408();
}

void sub_10007A524(void *a1, void *a2)
{
  NSObject *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  __int16 v9;
  uint64_t v10;
  __int16 v11;
  void *v12;

  v3 = a1;
  objc_msgSend(a2, "size");
  v5 = v4;
  objc_msgSend(a2, "size");
  v7 = 134218498;
  v8 = v5;
  v9 = 2048;
  v10 = v6;
  v11 = 2114;
  v12 = a2;
  _os_log_error_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "*** error: invalid size: (%.2f x %.2f). Both dimensions must be >= 1: %{public}@", (uint8_t *)&v7, 0x20u);

}

void sub_10007A5EC(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_10000F588((void *)&_mh_execute_header, a2, a3, "*** error: image must be backed by a CGImage: %{public}@", a5, a6, a7, a8, 2u);
}

void sub_10007A654()
{
  void *v0;
  _DWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t *v6;

  sub_10002D410();
  *v1 = 136315906;
  sub_10002D3F8((uint64_t)v1, (uint64_t)"-[UIImage(FRAdditions) applyBlurWithRadius:tintColor:saturationDeltaFactor:maskImage:targetSize:screenScale:opaque:logoRect:logoImage:logoText:cornerRadius:punchThroughBanner:allowAldenTint:]");
  sub_10002D3E8(v2, (uint64_t)"UIImage+FRAdditions.m");
  sub_10000F5E0(v3, v4, 852);
  sub_10000F518((void *)&_mh_execute_header, &_os_log_default, v5, "*** Assertion failure (Identifier: catch-all) : %s %s:%d %{public}@", v6);

  sub_10002D408();
}

void sub_10007A6B8()
{
  void *v0;
  _DWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t *v6;

  sub_10002D410();
  *v1 = 136315906;
  sub_10002D3F8((uint64_t)v1, (uint64_t)"-[UIImage(FRAdditions) applyBlurWithRadius:tintColor:saturationDeltaFactor:maskImage:targetSize:screenScale:opaque:logoRect:logoImage:logoText:cornerRadius:punchThroughBanner:allowAldenTint:]");
  sub_10002D3E8(v2, (uint64_t)"UIImage+FRAdditions.m");
  sub_10000F5E0(v3, v4, 717);
  sub_10000F518((void *)&_mh_execute_header, &_os_log_default, v5, "*** Assertion failure (Identifier: catch-all) : %s %s:%d %{public}@", v6);

  sub_10002D408();
}

void sub_10007A71C(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_10000F588((void *)&_mh_execute_header, a2, a3, "*** error: maskImage must be backed by a CGImage: %{public}@", a5, a6, a7, a8, 2u);
}

void sub_10007A784()
{
  id v0;
  int v1;
  int v2;
  int v3;
  int v4;
  int v5;
  uint64_t v6;

  v0 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("Invalid parameter not satisfying %s"));
  sub_10001A714();
  sub_10001A704();
  sub_10000F524();
  sub_10000F5B0((void *)&_mh_execute_header, &_os_log_default, v1, "*** Assertion failure (Identifier: catch-all) : %s %s:%d %{public}@", v2, v3, v4, v5, (uint64_t)"applicationProxy", v6, 2u);

  sub_10000F538();
}

void sub_10007A83C(uint64_t a1)
{
  id v1;
  int v2;
  int v3;
  int v4;
  int v5;
  int v6;
  uint64_t v8;

  v1 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("Can't get version from LSApplicationProxy (current value: %@)"));
  sub_10001A714();
  sub_10001A704();
  sub_10000F524();
  sub_10000F5B0((void *)&_mh_execute_header, &_os_log_default, v2, "*** Assertion failure (Identifier: catch-all) : %s %s:%d %{public}@", v3, v4, v5, v6, a1, v8, 2u);

  sub_10000F538();
}

void sub_10007A8F0(uint64_t a1)
{
  id v1;
  int v2;
  int v3;
  int v4;
  int v5;
  int v6;
  uint64_t v8;

  v1 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("Operating system version string is missing or not valid (current value: %@)"));
  sub_10001A714();
  sub_10001A704();
  sub_10000F524();
  sub_10000F5B0((void *)&_mh_execute_header, &_os_log_default, v2, "*** Assertion failure (Identifier: catch-all) : %s %s:%d %{public}@", v3, v4, v5, v6, a1, v8, 2u);

  sub_10000F538();
}

void sub_10007A9A4()
{
  id v0;
  uint64_t v1;
  int v2;
  const char *v3;
  __int16 v4;
  char *v5;
  __int16 v6;
  int v7;
  __int16 v8;
  id v9;

  v0 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("BOGUS: Dynamic type interpolation code could not determine a valid value. Investigate!"));
  v2 = 136315906;
  v3 = "-[FRDynamicTypeValueScaler scaledValueForSizeCategory:]";
  v4 = 2080;
  v5 = "FRDynamicTypeValueScaler.m";
  v6 = 1024;
  v7 = 148;
  v8 = 2114;
  v9 = v0;
  sub_10000F518((void *)&_mh_execute_header, &_os_log_default, v1, "*** Assertion failure (Identifier: catch-all) : %s %s:%d %{public}@", (uint8_t *)&v2);

}

void sub_10007AA78()
{
  id v0;
  uint64_t v1;
  int v2;
  const char *v3;
  __int16 v4;
  char *v5;
  __int16 v6;
  int v7;
  __int16 v8;
  id v9;

  v0 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("Invalid parameter not satisfying %s"), "sizeCategory.length > 0");
  v2 = 136315906;
  v3 = "-[FRDynamicTypeValueScaler scaledValueForSizeCategory:]";
  v4 = 2080;
  v5 = "FRDynamicTypeValueScaler.m";
  v6 = 1024;
  v7 = 106;
  v8 = 2114;
  v9 = v0;
  sub_10000F518((void *)&_mh_execute_header, &_os_log_default, v1, "*** Assertion failure (Identifier: catch-all) : %s %s:%d %{public}@", (uint8_t *)&v2);

}

void sub_10007AB58(os_log_t log)
{
  uint8_t v1[16];

  *(_WORD *)v1 = 0;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "CloudKit is not reachable.", v1, 2u);
}

void sub_10007AB98(uint64_t a1, NSObject *a2)
{
  int v2;
  uint64_t v3;

  v2 = 138543362;
  v3 = a1;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "ERROR: Failed to fetch tags for the Notifications Manager with error: %{public}@", (uint8_t *)&v2, 0xCu);
}

void sub_10007AC0C(os_log_t log)
{
  uint8_t v1[16];

  *(_WORD *)v1 = 0;
  _os_log_debug_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_DEBUG, "Successfully cleared personalization debug data", v1, 2u);
}

void sub_10007AC4C(void *a1, void *a2)
{
  NSObject *v3;
  void *v4;
  int v5;
  void *v6;

  v3 = a1;
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "localizedDescription"));
  v5 = 138412290;
  v6 = v4;
  _os_log_debug_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "Failed to clear personalization debug data with error %@", (uint8_t *)&v5, 0xCu);

  sub_100033F28();
}

void sub_10007ACE8(uint64_t a1, NSObject *a2, uint64_t a3)
{
  int v3;
  uint64_t v4;

  v3 = 138412290;
  v4 = a1;
  sub_10000F5F4((void *)&_mh_execute_header, a2, a3, "Error when saving readable allowlist: %@", (uint8_t *)&v3);
}

void sub_10007AD54(uint64_t a1, NSObject *a2, uint64_t a3)
{
  uint64_t v3;
  int v4;
  uint64_t v5;

  v3 = *(_QWORD *)(a1 + 32);
  v4 = 138412290;
  v5 = v3;
  sub_10000F5F4((void *)&_mh_execute_header, a2, a3, "Error when saving readable allowlist: %@", (uint8_t *)&v4);
}

void sub_10007ADC4(os_log_t log)
{
  uint8_t v1[16];

  *(_WORD *)v1 = 0;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "Failed to construct file URL for saving readable allowlist", v1, 2u);
}

void sub_10007AE04()
{
  id v0;
  int v1;
  int v2;
  int v3;
  int v4;
  int v5;
  uint64_t v6;

  v0 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("invalid nil value for '%s'"));
  sub_10001A714();
  sub_10001A704();
  sub_10000F524();
  sub_10000F5B0((void *)&_mh_execute_header, &_os_log_default, v1, "*** Assertion failure (Identifier: catch-all) : %s %s:%d %{public}@", v2, v3, v4, v5, (uint64_t)"cloudContext", v6, 2u);

  sub_10000F538();
}

void sub_10007AEBC()
{
  id v0;
  int v1;
  int v2;
  int v3;
  int v4;
  int v5;
  uint64_t v6;

  v0 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("invalid nil value for '%s'"));
  sub_10001A714();
  sub_10001A704();
  sub_10000F524();
  sub_10000F5B0((void *)&_mh_execute_header, &_os_log_default, v1, "*** Assertion failure (Identifier: catch-all) : %s %s:%d %{public}@", v2, v3, v4, v5, (uint64_t)"favorabilityResourceData", v6, 2u);

  sub_10000F538();
}

void sub_10007AF74()
{
  id v0;
  int v1;
  int v2;
  int v3;
  int v4;
  int v5;
  uint64_t v6;

  v0 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("invalid nil value for '%s'"));
  sub_10001A714();
  sub_10001A704();
  sub_10000F524();
  sub_10000F5B0((void *)&_mh_execute_header, &_os_log_default, v1, "*** Assertion failure (Identifier: catch-all) : %s %s:%d %{public}@", v2, v3, v4, v5, (uint64_t)"whitelistResourceData", v6, 2u);

  sub_10000F538();
}

void sub_10007B02C()
{
  id v0;
  int v1;
  int v2;
  int v3;
  int v4;
  int v5;
  uint64_t v6;

  v0 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("invalid nil value for '%s'"));
  sub_10001A714();
  sub_10001A704();
  sub_10000F524();
  sub_10000F5B0((void *)&_mh_execute_header, &_os_log_default, v1, "*** Assertion failure (Identifier: catch-all) : %s %s:%d %{public}@", v2, v3, v4, v5, (uint64_t)"urlMappingResourceData", v6, 2u);

  sub_10000F538();
}

void sub_10007B0E4()
{
  id v0;
  int v1;
  int v2;
  int v3;
  int v4;
  int v5;
  uint64_t v6;

  v0 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("invalid nil value for '%s'"));
  sub_10001A714();
  sub_10001A704();
  sub_10000F524();
  sub_10000F5B0((void *)&_mh_execute_header, &_os_log_default, v1, "*** Assertion failure (Identifier: catch-all) : %s %s:%d %{public}@", v2, v3, v4, v5, (uint64_t)"bundleIDMappingResourceData", v6, 2u);

  sub_10000F538();
}

void sub_10007B19C()
{
  id v0;
  int v1;
  int v2;
  int v3;
  int v4;
  int v5;
  uint64_t v6;

  v0 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("invalid nil value for '%s'"));
  sub_10001A714();
  sub_10001A704();
  sub_10000F524();
  sub_10000F5B0((void *)&_mh_execute_header, &_os_log_default, v1, "*** Assertion failure (Identifier: catch-all) : %s %s:%d %{public}@", v2, v3, v4, v5, (uint64_t)"favorabilityResourceFileURL", v6, 2u);

  sub_10000F538();
}

void sub_10007B254()
{
  id v0;
  int v1;
  int v2;
  int v3;
  int v4;
  int v5;
  uint64_t v6;

  v0 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("invalid nil value for '%s'"));
  sub_10001A714();
  sub_10001A704();
  sub_10000F524();
  sub_10000F5B0((void *)&_mh_execute_header, &_os_log_default, v1, "*** Assertion failure (Identifier: catch-all) : %s %s:%d %{public}@", v2, v3, v4, v5, (uint64_t)"whitelistResourceFileURL", v6, 2u);

  sub_10000F538();
}

void sub_10007B30C()
{
  id v0;
  int v1;
  int v2;
  int v3;
  int v4;
  int v5;
  uint64_t v6;

  v0 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("invalid nil value for '%s'"));
  sub_10001A714();
  sub_10001A704();
  sub_10000F524();
  sub_10000F5B0((void *)&_mh_execute_header, &_os_log_default, v1, "*** Assertion failure (Identifier: catch-all) : %s %s:%d %{public}@", v2, v3, v4, v5, (uint64_t)"urlMappingResourceFileURL", v6, 2u);

  sub_10000F538();
}

void sub_10007B3C4()
{
  id v0;
  int v1;
  int v2;
  int v3;
  int v4;
  int v5;
  uint64_t v6;

  v0 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("invalid nil value for '%s'"));
  sub_10001A714();
  sub_10001A704();
  sub_10000F524();
  sub_10000F5B0((void *)&_mh_execute_header, &_os_log_default, v1, "*** Assertion failure (Identifier: catch-all) : %s %s:%d %{public}@", v2, v3, v4, v5, (uint64_t)"bundleIDMappingResourceFileURL", v6, 2u);

  sub_10000F538();
}

void sub_10007B47C()
{
  id v0;
  int v1;
  int v2;
  int v3;
  int v4;
  int v5;
  uint64_t v6;

  v0 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("invalid nil value for '%s'"));
  sub_10001A714();
  sub_10001A704();
  sub_10000F524();
  sub_10000F5B0((void *)&_mh_execute_header, &_os_log_default, v1, "*** Assertion failure (Identifier: catch-all) : %s %s:%d %{public}@", v2, v3, v4, v5, (uint64_t)"favorabilityResource", v6, 2u);

  sub_10000F538();
}

void sub_10007B534()
{
  id v0;
  int v1;
  int v2;
  int v3;
  int v4;
  int v5;
  uint64_t v6;

  v0 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("invalid nil value for '%s'"));
  sub_10001A714();
  sub_10001A704();
  sub_10000F524();
  sub_10000F5B0((void *)&_mh_execute_header, &_os_log_default, v1, "*** Assertion failure (Identifier: catch-all) : %s %s:%d %{public}@", v2, v3, v4, v5, (uint64_t)"whitelistResource", v6, 2u);

  sub_10000F538();
}

void sub_10007B5EC()
{
  id v0;
  int v1;
  int v2;
  int v3;
  int v4;
  int v5;
  uint64_t v6;

  v0 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("invalid nil value for '%s'"));
  sub_10001A714();
  sub_10001A704();
  sub_10000F524();
  sub_10000F5B0((void *)&_mh_execute_header, &_os_log_default, v1, "*** Assertion failure (Identifier: catch-all) : %s %s:%d %{public}@", v2, v3, v4, v5, (uint64_t)"urlMappingResource", v6, 2u);

  sub_10000F538();
}

void sub_10007B6A4()
{
  id v0;
  int v1;
  int v2;
  int v3;
  int v4;
  int v5;
  uint64_t v6;

  v0 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("invalid nil value for '%s'"));
  sub_10001A714();
  sub_10001A704();
  sub_10000F524();
  sub_10000F5B0((void *)&_mh_execute_header, &_os_log_default, v1, "*** Assertion failure (Identifier: catch-all) : %s %s:%d %{public}@", v2, v3, v4, v5, (uint64_t)"bundleIDMappingResource", v6, 2u);

  sub_10000F538();
}

void sub_10007B75C()
{
  id v0;
  int v1;
  int v2;
  int v3;
  int v4;
  int v5;
  uint64_t v6;

  v0 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("invalid nil value for '%s'"));
  sub_10001A714();
  sub_10001A704();
  sub_10000F524();
  sub_10000F5B0((void *)&_mh_execute_header, &_os_log_default, v1, "*** Assertion failure (Identifier: catch-all) : %s %s:%d %{public}@", v2, v3, v4, v5, (uint64_t)"resourceIdentifier", v6, 2u);

  sub_10000F538();
}

void sub_10007B814()
{
  id v0;
  uint64_t v1;
  int v2;
  const char *v3;
  __int16 v4;
  char *v5;
  __int16 v6;

  v0 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("This operation must not be performed on the main thread."));
  v2 = 136315906;
  v3 = "-[FRFavoritesPersonalizer prepareForUseWithCompletionHandler:]";
  v4 = 2080;
  v5 = "FRFavoritesPersonalizer.m";
  v6 = 1024;
  sub_10000F550();
  sub_10000F518((void *)&_mh_execute_header, &_os_log_default, v1, "*** Assertion failure (Identifier: catch-all) : %s %s:%d %{public}@", (uint8_t *)&v2);

  sub_10000F544();
}

void sub_10007B8D4(uint64_t a1)
{
  id v2;
  id v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  uint64_t v9;
  uint64_t v10;

  v2 = objc_alloc((Class)NSString);
  v9 = *(_QWORD *)(a1 + 32);
  v3 = objc_msgSend(v2, "initWithFormat:", CFSTR("Found a subscription with no tagID: %@"));
  sub_10001A714();
  sub_10001A704();
  sub_10000F524();
  sub_10000F5B0((void *)&_mh_execute_header, &_os_log_default, v4, "*** Assertion failure (Identifier: catch-all) : %s %s:%d %{public}@", v5, v6, v7, v8, v9, v10, 2u);

  sub_10000F538();
}

void sub_10007B98C()
{
  id v0;
  int v1;
  int v2;
  int v3;
  int v4;
  int v5;
  uint64_t v6;

  v0 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("invalid nil value for '%s'"));
  sub_10001A714();
  sub_10001A704();
  sub_10000F524();
  sub_10000F5B0((void *)&_mh_execute_header, &_os_log_default, v1, "*** Assertion failure (Identifier: catch-all) : %s %s:%d %{public}@", v2, v3, v4, v5, (uint64_t)"tagToAdd", v6, 2u);

  sub_10000F538();
}

void sub_10007BA44()
{
  id v0;
  int v1;
  int v2;
  int v3;
  int v4;
  int v5;
  uint64_t v6;

  v0 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("invalid nil value for '%s'"));
  sub_10001A714();
  sub_10001A704();
  sub_10000F524();
  sub_10000F5B0((void *)&_mh_execute_header, &_os_log_default, v1, "*** Assertion failure (Identifier: catch-all) : %s %s:%d %{public}@", v2, v3, v4, v5, (uint64_t)"tagToRemove", v6, 2u);

  sub_10000F538();
}

void sub_10007BAFC()
{
  id v0;
  int v1;
  int v2;
  int v3;
  int v4;
  int v5;
  uint64_t v6;

  v0 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("expected nil value for '%s'"));
  sub_10001A714();
  sub_10001A704();
  sub_10000F524();
  sub_10000F5B0((void *)&_mh_execute_header, &_os_log_default, v1, "*** Assertion failure (Identifier: catch-all) : %s %s:%d %{public}@", v2, v3, v4, v5, (uint64_t)"tagAdditionError", v6, 2u);

  sub_10000F538();
}

void sub_10007BBB4()
{
  id v0;
  uint64_t v1;
  int v2;
  const char *v3;
  __int16 v4;
  char *v5;
  __int16 v6;

  v0 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("Asked for origin of a TagID I didn't ask to subscribe to"));
  v2 = 136315906;
  v3 = "-[FRFavoritesPersonalizer _processAutoFavoritesOperationResult:cursor:error:completion:]_block_invoke_3";
  v4 = 2080;
  v5 = "FRFavoritesPersonalizer.m";
  v6 = 1024;
  sub_10000F550();
  sub_10000F518((void *)&_mh_execute_header, &_os_log_default, v1, "*** Assertion failure (Identifier: catch-all) : %s %s:%d %{public}@", (uint8_t *)&v2);

  sub_10000F544();
}

void sub_10007BC74(void *a1, void *a2)
{
  NSObject *v3;
  void *v4;
  uint64_t v5;
  int v6;
  void *v7;

  v3 = a1;
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "localizedDescription"));
  v6 = 138543362;
  v7 = v4;
  sub_10000F5F4((void *)&_mh_execute_header, v3, v5, "remove personalization store error: %{public}@", (uint8_t *)&v6);

  sub_100033F28();
}

void sub_10007BD08()
{
  id v0;
  uint64_t v1;
  int v2;
  const char *v3;
  __int16 v4;
  char *v5;
  __int16 v6;

  v0 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("Invalid parameter not satisfying %s"), "appActivityMonitor");
  v2 = 136315906;
  v3 = "-[FRApplicationUpdateNotifier initWithVersionHelpers:appActivityMonitor:]";
  v4 = 2080;
  v5 = "FRApplicationUpdateNotifier.m";
  v6 = 1024;
  sub_10000F524();
  sub_10000F518((void *)&_mh_execute_header, &_os_log_default, v1, "*** Assertion failure (Identifier: catch-all) : %s %s:%d %{public}@", (uint8_t *)&v2);

  sub_10000F538();
}

void sub_10007BDD4()
{
  id v0;
  uint64_t v1;
  int v2;
  const char *v3;
  __int16 v4;
  char *v5;
  __int16 v6;

  v0 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("Invalid parameter not satisfying %s"), "versionHelpers");
  v2 = 136315906;
  v3 = "-[FRApplicationUpdateNotifier initWithVersionHelpers:appActivityMonitor:]";
  v4 = 2080;
  v5 = "FRApplicationUpdateNotifier.m";
  v6 = 1024;
  sub_10000F524();
  sub_10000F518((void *)&_mh_execute_header, &_os_log_default, v1, "*** Assertion failure (Identifier: catch-all) : %s %s:%d %{public}@", (uint8_t *)&v2);

  sub_10000F538();
}

void sub_10007BEA0()
{
  id v0;
  uint64_t v1;
  int v2;
  const char *v3;
  __int16 v4;
  char *v5;
  __int16 v6;
  int v7;
  __int16 v8;
  id v9;

  v0 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("The notifier needs a view controller to present the alert"));
  v2 = 136315906;
  v3 = "-[FRApplicationUpdateNotifier showAppUpdateAlert]";
  v4 = 2080;
  v5 = "FRApplicationUpdateNotifier.m";
  v6 = 1024;
  v7 = 106;
  v8 = 2114;
  v9 = v0;
  sub_10000F518((void *)&_mh_execute_header, &_os_log_default, v1, "*** Assertion failure (Identifier: catch-all) : %s %s:%d %{public}@", (uint8_t *)&v2);

}

void sub_10007BF78()
{
  id v0;
  int v1;
  int v2;
  int v3;
  int v4;
  int v5;
  uint64_t v6;

  v0 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("Invalid parameter not satisfying %s"));
  sub_10001A714();
  sub_10001A704();
  sub_10000F524();
  sub_10000F5B0((void *)&_mh_execute_header, &_os_log_default, v1, "*** Assertion failure (Identifier: catch-all) : %s %s:%d %{public}@", v2, v3, v4, v5, (uint64_t)"queryItemName", v6, 2u);

  sub_10000F538();
}

void sub_10007C030()
{
  id v0;
  int v1;
  int v2;
  int v3;
  int v4;
  int v5;
  uint64_t v6;

  v0 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("Invalid parameter not satisfying %s"));
  sub_10001A714();
  sub_10001A704();
  sub_10000F524();
  sub_10000F5B0((void *)&_mh_execute_header, &_os_log_default, v1, "*** Assertion failure (Identifier: catch-all) : %s %s:%d %{public}@", v2, v3, v4, v5, (uint64_t)"queryItemName", v6, 2u);

  sub_10000F538();
}

void sub_10007C0EC()
{
  id v0;
  uint64_t v1;
  int v2;
  const char *v3;
  __int16 v4;
  char *v5;
  __int16 v6;

  v0 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("tag IDs with slashes won't be handled properly"));
  v2 = 136315906;
  v3 = "+[NSURL(FRAdditions) _urlForTagID:internal:]";
  v4 = 2080;
  v5 = "NSURL+FRAdditions.m";
  v6 = 1024;
  sub_10000F550();
  sub_10000F518((void *)&_mh_execute_header, &_os_log_default, v1, "*** Assertion failure (Identifier: catch-all) : %s %s:%d %{public}@", (uint8_t *)&v2);

  sub_10000F544();
}

void sub_10007C1AC()
{
  id v0;
  int v1;
  int v2;
  int v3;
  int v4;
  int v5;
  uint64_t v6;

  v0 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("Invalid parameter not satisfying %s"));
  sub_10001A714();
  sub_10001A704();
  sub_10000F524();
  sub_10000F5B0((void *)&_mh_execute_header, &_os_log_default, v1, "*** Assertion failure (Identifier: catch-all) : %s %s:%d %{public}@", v2, v3, v4, v5, (uint64_t)"tagID.length != 0", v6, 2u);

  sub_10000F538();
}

void sub_10007C264()
{
  id v0;
  int v1;
  int v2;
  int v3;
  int v4;
  int v5;
  uint64_t v6;

  v0 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("Invalid parameter not satisfying %s"));
  sub_10001A714();
  sub_10001A704();
  sub_10000F524();
  sub_10000F5B0((void *)&_mh_execute_header, &_os_log_default, v1, "*** Assertion failure (Identifier: catch-all) : %s %s:%d %{public}@", v2, v3, v4, v5, (uint64_t)"tagID != nil", v6, 2u);

  sub_10000F538();
}

void sub_10007C31C()
{
  id v0;
  int v1;
  int v2;
  int v3;
  int v4;
  int v5;
  uint64_t v6;

  v0 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("invalid nil value for '%s'"));
  sub_10001A714();
  sub_10001A704();
  sub_10000F524();
  sub_10000F5B0((void *)&_mh_execute_header, &_os_log_default, v1, "*** Assertion failure (Identifier: catch-all) : %s %s:%d %{public}@", v2, v3, v4, v5, (uint64_t)"pathComponent", v6, 2u);

  sub_10000F538();
}

void sub_10007C3D4()
{
  id v0;
  uint64_t v1;
  int v2;
  const char *v3;
  __int16 v4;
  char *v5;
  __int16 v6;

  v0 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("Path components count has to be atleast two"));
  v2 = 136315906;
  v3 = "-[NSURL(FRAdditions) _caseInsensitiveCompareWithFirstPathComponent:]";
  v4 = 2080;
  v5 = "NSURL+FRAdditions.m";
  v6 = 1024;
  sub_10000F550();
  sub_10000F518((void *)&_mh_execute_header, &_os_log_default, v1, "*** Assertion failure (Identifier: catch-all) : %s %s:%d %{public}@", (uint8_t *)&v2);

  sub_10000F544();
}

void sub_10007C494()
{
  id v0;
  int v1;
  int v2;
  int v3;
  int v4;
  int v5;
  uint64_t v6;

  v0 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("Invalid parameter not satisfying %s"));
  sub_10001A714();
  sub_10001A704();
  sub_10000F524();
  sub_10000F5B0((void *)&_mh_execute_header, &_os_log_default, v1, "*** Assertion failure (Identifier: catch-all) : %s %s:%d %{public}@", v2, v3, v4, v5, (uint64_t)"tagID.length != 0", v6, 2u);

  sub_10000F538();
}

void sub_10007C54C()
{
  id v0;
  int v1;
  int v2;
  int v3;
  int v4;
  int v5;
  uint64_t v6;

  v0 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("Invalid parameter not satisfying %s"));
  sub_10001A714();
  sub_10001A704();
  sub_10000F524();
  sub_10000F5B0((void *)&_mh_execute_header, &_os_log_default, v1, "*** Assertion failure (Identifier: catch-all) : %s %s:%d %{public}@", v2, v3, v4, v5, (uint64_t)"tagID != nil", v6, 2u);

  sub_10000F538();
}

void sub_10007C604()
{
  id v0;
  uint8_t buf[4];
  const char *v2;
  __int16 v3;
  char *v4;
  __int16 v5;
  int v6;
  __int16 v7;
  id v8;

  v0 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("Invalid parameter not satisfying %s"), "tagRanker");
  *(_DWORD *)buf = 136315906;
  v2 = "-[FRSubscribedTagRanker initWithTagRanker:]";
  v3 = 2080;
  v4 = "FRSubscribedTagRanker.m";
  v5 = 1024;
  v6 = 26;
  v7 = 2114;
  v8 = v0;
  _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "*** Assertion failure (Identifier: catch-all) : %s %s:%d %{public}@", buf, 0x26u);

}

void sub_10007C6EC()
{
  id v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v0 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("can't onboard user without a presubscribe service"));
  sub_100027764();
  sub_100027754();
  sub_10000F550();
  sub_10000F5A0((void *)&_mh_execute_header, &_os_log_default, v1, "*** Assertion failure (Identifier: catch-all) : %s %s:%d %{public}@", v2, v3, v4, v5, 2u);

  sub_10000F544();
}

void sub_10007C798()
{
  id v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v0 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("can't onboard user without an analytics controller"));
  sub_100027764();
  sub_100027754();
  sub_10000F550();
  sub_10000F5A0((void *)&_mh_execute_header, &_os_log_default, v1, "*** Assertion failure (Identifier: catch-all) : %s %s:%d %{public}@", v2, v3, v4, v5, 2u);

  sub_10000F544();
}

void sub_10007C844()
{
  id v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v0 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("can't onboard user without a cloud context"));
  sub_100027764();
  sub_100027754();
  sub_10000F550();
  sub_10000F5A0((void *)&_mh_execute_header, &_os_log_default, v1, "*** Assertion failure (Identifier: catch-all) : %s %s:%d %{public}@", v2, v3, v4, v5, 2u);

  sub_10000F544();
}

void sub_10007C8F0()
{
  id v0;
  int v1;
  int v2;
  int v3;
  int v4;
  int v5;

  v0 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("expected inequality between %s and %s"));
  sub_10001A714();
  sub_10001A704();
  sub_10000F524();
  sub_10000F5B0((void *)&_mh_execute_header, &_os_log_default, v1, "*** Assertion failure (Identifier: catch-all) : %s %s:%d %{public}@", v2, v3, v4, v5, (uint64_t)"index", (uint64_t)"NSNotFound", 2u);

  sub_10000F538();
}

void sub_10007C9B0()
{
  id v0;
  int v1;
  int v2;
  int v3;
  int v4;
  int v5;

  v0 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("expected equality between %s and %s"));
  sub_10001A714();
  sub_10001A704();
  sub_10000F524();
  sub_10000F5B0((void *)&_mh_execute_header, &_os_log_default, v1, "*** Assertion failure (Identifier: catch-all) : %s %s:%d %{public}@", v2, v3, v4, v5, (uint64_t)"alphabeticalCount", (uint64_t)"self.mostFrequentlyVisitedTags.count", 2u);

  sub_10000F538();
}

void sub_10007CA70()
{
  id v0;
  int v1;
  int v2;
  int v3;
  int v4;
  int v5;

  v0 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("expected equality between %s and %s"));
  sub_10001A714();
  sub_10001A704();
  sub_10000F524();
  sub_10000F5B0((void *)&_mh_execute_header, &_os_log_default, v1, "*** Assertion failure (Identifier: catch-all) : %s %s:%d %{public}@", v2, v3, v4, v5, (uint64_t)"alphabeticalCount", (uint64_t)"self.recentlyOpenedTags.count", 2u);

  sub_10000F538();
}

void sub_10007CB30(uint64_t a1, NSObject *a2)
{
  int v2;
  uint64_t v3;

  v2 = 138543362;
  v3 = a1;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "ERROR: Couldn't handle remote notification: %{public}@", (uint8_t *)&v2, 0xCu);
}

void sub_10007CBA4()
{
  id v0;
  int v1;
  int v2;
  int v3;
  int v4;
  int v5;
  uint64_t v6;

  v0 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("Invalid parameter not satisfying %s"));
  sub_10000F524();
  sub_10000F5B0((void *)&_mh_execute_header, &_os_log_default, v1, "*** Assertion failure (Identifier: catch-all) : %s %s:%d %{public}@", v2, v3, v4, v5, (uint64_t)"[URL nss_isNewsURL]", v6, 2u);

  sub_10000F538();
}

void sub_10007CC6C()
{
  id v0;
  int v1;
  int v2;
  int v3;
  int v4;
  int v5;
  uint64_t v6;

  v0 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("Invalid parameter not satisfying %s"));
  sub_10000F524();
  sub_10000F5B0((void *)&_mh_execute_header, &_os_log_default, v1, "*** Assertion failure (Identifier: catch-all) : %s %s:%d %{public}@", v2, v3, v4, v5, (uint64_t)"URL", v6, 2u);

  sub_10000F538();
}

void sub_10007CD34()
{
  id v0;
  int v1;
  int v2;
  int v3;
  int v4;
  int v5;
  uint64_t v6;

  v0 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("invalid nil value for '%s'"));
  sub_10001A714();
  sub_10001A704();
  sub_10000F524();
  sub_10000F5B0((void *)&_mh_execute_header, &_os_log_default, v1, "*** Assertion failure (Identifier: catch-all) : %s %s:%d %{public}@", v2, v3, v4, v5, (uint64_t)"todayAgent", v6, 2u);

  sub_10000F538();
}

void sub_10007CDEC()
{
  id v0;
  int v1;
  int v2;
  int v3;
  int v4;
  int v5;
  uint64_t v6;

  v0 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("invalid nil value for '%s'"));
  sub_10001A714();
  sub_10001A704();
  sub_10000F524();
  sub_10000F5B0((void *)&_mh_execute_header, &_os_log_default, v1, "*** Assertion failure (Identifier: catch-all) : %s %s:%d %{public}@", v2, v3, v4, v5, (uint64_t)"privateDataUpdateCoordinator", v6, 2u);

  sub_10000F538();
}

void sub_10007CEA4()
{
  id v0;
  int v1;
  int v2;
  int v3;
  int v4;
  int v5;
  uint64_t v6;

  v0 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("invalid nil value for '%s'"));
  sub_10001A714();
  sub_10001A704();
  sub_10000F524();
  sub_10000F5B0((void *)&_mh_execute_header, &_os_log_default, v1, "*** Assertion failure (Identifier: catch-all) : %s %s:%d %{public}@", v2, v3, v4, v5, (uint64_t)"subscriptionController", v6, 2u);

  sub_10000F538();
}

void sub_10007CF5C()
{
  id v0;
  int v1;
  int v2;
  int v3;
  int v4;
  int v5;
  uint64_t v6;

  v0 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("invalid nil value for '%s'"));
  sub_10001A714();
  sub_10001A704();
  sub_10000F524();
  sub_10000F5B0((void *)&_mh_execute_header, &_os_log_default, v1, "*** Assertion failure (Identifier: catch-all) : %s %s:%d %{public}@", v2, v3, v4, v5, (uint64_t)"privateDataContext", v6, 2u);

  sub_10000F538();
}

void sub_10007D014()
{
  id v0;
  int v1;
  int v2;
  int v3;
  int v4;
  int v5;
  uint64_t v6;

  v0 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("invalid nil value for '%s'"));
  sub_10001A714();
  sub_10001A704();
  sub_10000F524();
  sub_10000F5B0((void *)&_mh_execute_header, &_os_log_default, v1, "*** Assertion failure (Identifier: catch-all) : %s %s:%d %{public}@", v2, v3, v4, v5, (uint64_t)"appConfigManager", v6, 2u);

  sub_10000F538();
}

void sub_10007D0CC()
{
  id v0;
  int v1;
  int v2;
  int v3;
  int v4;
  int v5;
  uint64_t v6;

  v0 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("invalid nil value for '%s'"));
  sub_10001A714();
  sub_10001A704();
  sub_10000F524();
  sub_10000F5B0((void *)&_mh_execute_header, &_os_log_default, v1, "*** Assertion failure (Identifier: catch-all) : %s %s:%d %{public}@", v2, v3, v4, v5, (uint64_t)"resolver", v6, 2u);

  sub_10000F538();
}

void sub_10007D184()
{
  id v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v0 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("fetchables should be added before background fetch begins"));
  sub_10000F550();
  sub_10003CEB8((void *)&_mh_execute_header, &_os_log_default, v1, "*** Assertion failure (Identifier: AddFetchableWhileEnumerating) : %s %s:%d %{public}@", v2, v3, v4, v5, 2u);

  sub_10000F544();
}

void sub_10007D240()
{
  id v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v0 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("fetchables should only be added from the main thread "));
  sub_10000F550();
  sub_10003CEB8((void *)&_mh_execute_header, &_os_log_default, v1, "*** Assertion failure (Identifier: AddFetchableOffMain) : %s %s:%d %{public}@", v2, v3, v4, v5, 2u);

  sub_10000F544();
}

void sub_10007D2FC()
{
  id v0;
  int v1;
  int v2;
  int v3;
  int v4;
  int v5;
  uint64_t v6;

  v0 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("invalid nil value for '%s'"));
  sub_10000F524();
  sub_10000F5B0((void *)&_mh_execute_header, &_os_log_default, v1, "*** Assertion failure (Identifier: catch-all) : %s %s:%d %{public}@", v2, v3, v4, v5, (uint64_t)"assetManager", v6, 2u);

  sub_10000F538();
}

void sub_10007D3C4()
{
  id v0;
  int v1;
  int v2;
  int v3;
  int v4;
  int v5;
  uint64_t v6;

  v0 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("invalid nil value for '%s'"));
  sub_10000F524();
  sub_10000F5B0((void *)&_mh_execute_header, &_os_log_default, v1, "*** Assertion failure (Identifier: catch-all) : %s %s:%d %{public}@", v2, v3, v4, v5, (uint64_t)"feldsparContext", v6, 2u);

  sub_10000F538();
}

void sub_10007D48C(uint64_t a1, NSObject *a2, uint64_t a3)
{
  int v3;
  uint64_t v4;

  v3 = 138543362;
  v4 = a1;
  sub_10000F5F4((void *)&_mh_execute_header, a2, a3, "Oh no. %{public}@", (uint8_t *)&v3);
}

void sub_10007D4F8(uint64_t a1, NSObject *a2, uint64_t a3)
{
  int v3;
  uint64_t v4;

  v3 = 138543362;
  v4 = a1;
  sub_10000F5F4((void *)&_mh_execute_header, a2, a3, "ERROR: Couldn't remove cache: %{public}@", (uint8_t *)&v3);
}

void sub_10007D564(uint64_t a1, __CFError **a2, void *a3)
{
  __CFError *v4;
  NSObject *v5;
  int v6;
  uint64_t v7;
  __int16 v8;
  CFIndex Code;

  v4 = *a2;
  v5 = a3;
  v6 = 138412546;
  v7 = a1;
  v8 = 2048;
  Code = CFErrorGetCode(v4);
  _os_log_error_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "Error: Couldn't load image at path %@ - %ld", (uint8_t *)&v6, 0x16u);

}

void sub_10007D614(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_10000F564((void *)&_mh_execute_header, a1, a3, "Error setting cover version number.", a5, a6, a7, a8, 0);
}

void sub_10007D648(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_10000F564((void *)&_mh_execute_header, a1, a3, "Error setting logo version number.", a5, a6, a7, a8, 0);
}

void sub_10007D67C(__CFError **a1, void *a2)
{
  __CFError *v2;
  NSObject *v3;
  uint64_t v4;
  int v5;
  CFIndex Code;

  v2 = *a1;
  v3 = a2;
  v5 = 134217984;
  Code = CFErrorGetCode(v2);
  sub_10000F5F4((void *)&_mh_execute_header, v3, v4, "Error writing image to disk: %ld", (uint8_t *)&v5);

}

void sub_10007D70C()
{
  id v0;
  uint8_t buf[4];
  const char *v2;
  __int16 v3;
  char *v4;
  __int16 v5;
  int v6;
  __int16 v7;
  id v8;

  v0 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("invalid nil value for '%s'"), "maskImage");
  *(_DWORD *)buf = 136315906;
  v2 = "+[FRFeedImageGenerationOperation imageMaskOfSize:]";
  v3 = 2080;
  v4 = "FRFeedImageGenerationOperation.m";
  v5 = 1024;
  v6 = 882;
  v7 = 2114;
  v8 = v0;
  _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "*** Assertion failure (Identifier: catch-all) : %s %s:%d %{public}@", buf, 0x26u);

}

void sub_10007D7F4()
{
  id v0;
  uint64_t v1;
  int v2[10];

  v0 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("Invalid parameter not satisfying %s"), "observer != nil");
  v2[0] = 136315906;
  sub_10001A714();
  sub_10001A704();
  sub_10000F524();
  sub_10000F518((void *)&_mh_execute_header, &_os_log_default, v1, "*** Assertion failure (Identifier: catch-all) : %s %s:%d %{public}@", (uint8_t *)v2);

  sub_10000F538();
}

void sub_10007D8B0(uint64_t a1)
{
  id v1;
  uint64_t v2;
  int v3[10];

  v1 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%p is already an observer"), a1);
  v3[0] = 136315906;
  sub_10001A714();
  sub_10001A704();
  sub_10000F524();
  sub_10000F518((void *)&_mh_execute_header, &_os_log_default, v2, "*** Assertion failure (Identifier: catch-all) : %s %s:%d %{public}@", (uint8_t *)v3);

  sub_10000F538();
}

void sub_10007D968()
{
  id v0;
  uint64_t v1;
  int v2[10];

  v0 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("Invalid parameter not satisfying %s"), "observer != nil");
  v2[0] = 136315906;
  sub_10001A714();
  sub_10001A704();
  sub_10000F524();
  sub_10000F518((void *)&_mh_execute_header, &_os_log_default, v1, "*** Assertion failure (Identifier: catch-all) : %s %s:%d %{public}@", (uint8_t *)v2);

  sub_10000F538();
}

void sub_10007DA24()
{
  id v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v0 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("We only support one observer with this guarantee of being called last at this time"));
  sub_100027764();
  sub_100027754();
  sub_10000F550();
  sub_10000F5A0((void *)&_mh_execute_header, &_os_log_default, v1, "*** Assertion failure (Identifier: catch-all) : %s %s:%d %{public}@", v2, v3, v4, v5, 2u);

  sub_10000F544();
}

void sub_10007DAD0()
{
  id v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v0 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("cannot be notified of app launch twice"));
  sub_100027764();
  sub_100027754();
  sub_10000F550();
  sub_10000F5A0((void *)&_mh_execute_header, &_os_log_default, v1, "*** Assertion failure (Identifier: catch-all) : %s %s:%d %{public}@", v2, v3, v4, v5, 2u);

  sub_10000F544();
}

void sub_10007DB7C()
{
  id v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v0 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("cannot react to other application lifecycle events without first being notified of app launch"));
  sub_100027764();
  sub_100027754();
  sub_10000F550();
  sub_10000F5A0((void *)&_mh_execute_header, &_os_log_default, v1, "*** Assertion failure (Identifier: catch-all) : %s %s:%d %{public}@", v2, v3, v4, v5, 2u);

  sub_10000F544();
}

void sub_10007DC28()
{
  id v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v0 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("cannot react to other application lifecycle events without first being notified of app launch"));
  sub_100027764();
  sub_100027754();
  sub_10000F550();
  sub_10000F5A0((void *)&_mh_execute_header, &_os_log_default, v1, "*** Assertion failure (Identifier: catch-all) : %s %s:%d %{public}@", v2, v3, v4, v5, 2u);

  sub_10000F544();
}

void sub_10007DCD4()
{
  id v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v0 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("cannot react to other application lifecycle events without first being notified of app launch"));
  sub_100027764();
  sub_100027754();
  sub_10000F550();
  sub_10000F5A0((void *)&_mh_execute_header, &_os_log_default, v1, "*** Assertion failure (Identifier: catch-all) : %s %s:%d %{public}@", v2, v3, v4, v5, 2u);

  sub_10000F544();
}

void sub_10007DD80()
{
  id v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v0 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("cannot react to other application lifecycle events without first being notified of app launch"));
  sub_100027764();
  sub_100027754();
  sub_10000F550();
  sub_10000F5A0((void *)&_mh_execute_header, &_os_log_default, v1, "*** Assertion failure (Identifier: catch-all) : %s %s:%d %{public}@", v2, v3, v4, v5, 2u);

  sub_10000F544();
}

void sub_10007DE2C()
{
  id v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v0 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("cannot react to other application lifecycle events without first being notified of app launch"));
  sub_100027764();
  sub_100027754();
  sub_10000F550();
  sub_10000F5A0((void *)&_mh_execute_header, &_os_log_default, v1, "*** Assertion failure (Identifier: catch-all) : %s %s:%d %{public}@", v2, v3, v4, v5, 2u);

  sub_10000F544();
}

void sub_10007DED8()
{
  id v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v0 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("cannot react to other application lifecycle events without first being notified of app launch"));
  sub_100027764();
  sub_100027754();
  sub_10000F550();
  sub_10000F5A0((void *)&_mh_execute_header, &_os_log_default, v1, "*** Assertion failure (Identifier: catch-all) : %s %s:%d %{public}@", v2, v3, v4, v5, 2u);

  sub_10000F544();
}

void sub_10007DF84()
{
  id v0;
  int v1;
  int v2;
  int v3;
  int v4;
  int v5;
  uint64_t v6;

  v0 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("Invalid parameter not satisfying %s"));
  sub_10001A714();
  sub_10001A704();
  sub_10000F524();
  sub_10000F5B0((void *)&_mh_execute_header, &_os_log_default, v1, "*** Assertion failure (Identifier: catch-all) : %s %s:%d %{public}@", v2, v3, v4, v5, (uint64_t)"editorialItemCreator", v6, 2u);

  sub_10000F538();
}

void sub_10007E03C()
{
  id v0;
  int v1;
  int v2;
  int v3;
  int v4;
  int v5;
  uint64_t v6;

  v0 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("Invalid parameter not satisfying %s"));
  sub_10001A714();
  sub_10001A704();
  sub_10000F524();
  sub_10000F5B0((void *)&_mh_execute_header, &_os_log_default, v1, "*** Assertion failure (Identifier: catch-all) : %s %s:%d %{public}@", v2, v3, v4, v5, (uint64_t)"thumbnailCreator", v6, 2u);

  sub_10000F538();
}

void sub_10007E0F4()
{
  id v0;
  int v1;
  int v2;
  int v3;
  int v4;
  int v5;
  uint64_t v6;

  v0 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("Invalid parameter not satisfying %s"));
  sub_10001A714();
  sub_10001A704();
  sub_10000F524();
  sub_10000F5B0((void *)&_mh_execute_header, &_os_log_default, v1, "*** Assertion failure (Identifier: catch-all) : %s %s:%d %{public}@", v2, v3, v4, v5, (uint64_t)"editorialItemEntryManager", v6, 2u);

  sub_10000F538();
}

void sub_10007E1AC(uint64_t a1, NSObject *a2)
{
  uint64_t v2;
  int v3;
  uint64_t v4;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = 138543362;
  v4 = v2;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "Editorial Item Provider: ERROR: Document version is missing for editorial articleID: %{public}@, no badge", (uint8_t *)&v3, 0xCu);
}

void sub_10007E224()
{
  id v0;
  int v1;
  int v2;
  int v3;
  int v4;
  int v5;
  uint64_t v6;

  v0 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("Invalid parameter not satisfying %s"));
  sub_10001A714();
  sub_10001A704();
  sub_10000F524();
  sub_10000F5B0((void *)&_mh_execute_header, &_os_log_default, v1, "*** Assertion failure (Identifier: catch-all) : %s %s:%d %{public}@", v2, v3, v4, v5, (uint64_t)"routerManager", v6, 2u);

  sub_10000F538();
}

void sub_10007E2DC()
{
  id v0;
  int v1;
  int v2;
  int v3;
  int v4;
  int v5;
  uint64_t v6;

  v0 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("Invalid parameter not satisfying %s"));
  sub_10001A714();
  sub_10001A704();
  sub_10000F524();
  sub_10000F5B0((void *)&_mh_execute_header, &_os_log_default, v1, "*** Assertion failure (Identifier: catch-all) : %s %s:%d %{public}@", v2, v3, v4, v5, (uint64_t)"redirectService", v6, 2u);

  sub_10000F538();
}

void sub_10007E394()
{
  id v0;
  int v1;
  int v2;
  int v3;
  int v4;
  int v5;
  uint64_t v6;

  v0 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("Invalid parameter not satisfying %s"));
  sub_10001A714();
  sub_10001A704();
  sub_10000F524();
  sub_10000F5B0((void *)&_mh_execute_header, &_os_log_default, v1, "*** Assertion failure (Identifier: catch-all) : %s %s:%d %{public}@", v2, v3, v4, v5, (uint64_t)"analyticsReferralFactory", v6, 2u);

  sub_10000F538();
}

void sub_10007E44C()
{
  id v0;
  uint8_t buf[4];
  const char *v2;
  __int16 v3;
  char *v4;
  __int16 v5;
  int v6;
  __int16 v7;
  id v8;

  v0 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("Invalid parameter not satisfying %s"), "bridgedAppDelegate");
  *(_DWORD *)buf = 136315906;
  v2 = "-[FRRoutingAssembly initWithFeldsparContext:bridgedAppDelegate:window:]";
  v3 = 2080;
  v4 = "FRRoutingAssembly.m";
  v5 = 1024;
  v6 = 36;
  v7 = 2114;
  v8 = v0;
  _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "*** Assertion failure (Identifier: catch-all) : %s %s:%d %{public}@", buf, 0x26u);

}

void sub_10007E534()
{
  id v0;
  int v1;
  int v2;
  int v3;
  int v4;
  int v5;
  uint64_t v6;

  v0 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("invalid nil value for '%s'"));
  sub_10000F524();
  sub_10000F5B0((void *)&_mh_execute_header, &_os_log_default, v1, "*** Assertion failure (Identifier: catch-all) : %s %s:%d %{public}@", v2, v3, v4, v5, (uint64_t)"font", v6, 2u);

  sub_10000F538();
}

void sub_10007E5FC()
{
  id v0;
  int v1;
  int v2;
  int v3;
  int v4;
  int v5;
  uint64_t v6;

  v0 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("invalid nil value for '%s'"));
  sub_10000F524();
  sub_10000F5B0((void *)&_mh_execute_header, &_os_log_default, v1, "*** Assertion failure (Identifier: catch-all) : %s %s:%d %{public}@", v2, v3, v4, v5, (uint64_t)"text", v6, 2u);

  sub_10000F538();
}

void sub_10007E6C4()
{
  id v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v0 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("Case not implemented"));
  sub_10000F550();
  sub_10000F5A0((void *)&_mh_execute_header, &_os_log_default, v1, "*** Assertion failure (Identifier: catch-all) : %s %s:%d %{public}@", v2, v3, v4, v5, 2u);

  sub_10000F544();
}

void sub_10007E780()
{
  id v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v0 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("If we are performing animations, the provided animation style must be one of the two states which allow animation"));
  sub_10000F550();
  sub_10000F5A0((void *)&_mh_execute_header, &_os_log_default, v1, "*** Assertion failure (Identifier: catch-all) : %s %s:%d %{public}@", v2, v3, v4, v5, 2u);

  sub_10000F544();
}

void sub_10007E83C()
{
  id v0;
  int v1;
  int v2;
  int v3;
  int v4;
  int v5;
  uint64_t v6;

  v0 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("Invalid parameter not satisfying %s"));
  sub_10001A714();
  sub_10001A704();
  sub_10000F524();
  sub_10000F5B0((void *)&_mh_execute_header, &_os_log_default, v1, "*** Assertion failure (Identifier: catch-all) : %s %s:%d %{public}@", v2, v3, v4, v5, (uint64_t)"observer != nil", v6, 2u);

  sub_10000F538();
}

void sub_10007E8F4(uint64_t a1)
{
  id v1;
  int v2;
  int v3;
  int v4;
  int v5;
  int v6;
  uint64_t v8;

  v1 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("%p is already an observer"));
  sub_10001A714();
  sub_10001A704();
  sub_10000F524();
  sub_10000F5B0((void *)&_mh_execute_header, &_os_log_default, v2, "*** Assertion failure (Identifier: catch-all) : %s %s:%d %{public}@", v3, v4, v5, v6, a1, v8, 2u);

  sub_10000F538();
}

void sub_10007E9A8()
{
  id v0;
  int v1;
  int v2;
  int v3;
  int v4;
  int v5;
  uint64_t v6;

  v0 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("Invalid parameter not satisfying %s"));
  sub_10001A714();
  sub_10001A704();
  sub_10000F524();
  sub_10000F5B0((void *)&_mh_execute_header, &_os_log_default, v1, "*** Assertion failure (Identifier: catch-all) : %s %s:%d %{public}@", v2, v3, v4, v5, (uint64_t)"observer != nil", v6, 2u);

  sub_10000F538();
}

void sub_10007EA60(os_log_t log)
{
  uint8_t v1[16];

  *(_WORD *)v1 = 0;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "The remote notification has an invalid articleID", v1, 2u);
}

void sub_10007EAA0(uint64_t a1, NSObject *a2)
{
  int v2;
  uint64_t v3;

  v2 = 138543362;
  v3 = a1;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "Failed to schedule a local notification with error : %{public}@", (uint8_t *)&v2, 0xCu);
}

void sub_10007EB14()
{
  id v0;
  int v1;
  int v2;
  int v3;
  int v4;
  int v5;
  uint64_t v6;

  v0 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("Invalid parameter not satisfying %s"));
  sub_10001A714();
  sub_10001A704();
  sub_10000F524();
  sub_10000F5B0((void *)&_mh_execute_header, &_os_log_default, v1, "*** Assertion failure (Identifier: catch-all) : %s %s:%d %{public}@", v2, v3, v4, v5, (uint64_t)"newsUserInfo", v6, 2u);

  sub_10000F538();
}

void sub_10007EBCC()
{
  id v0;
  uint8_t buf[4];
  const char *v2;
  __int16 v3;
  char *v4;
  __int16 v5;
  int v6;
  __int16 v7;
  id v8;

  v0 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("Invalid parameter not satisfying %s"), "window");
  *(_DWORD *)buf = 136315906;
  v2 = "-[FRFeedSubscriptionAssembly initWithWindow:]";
  v3 = 2080;
  v4 = "FRFeedSubscriptionAssembly.m";
  v5 = 1024;
  v6 = 31;
  v7 = 2114;
  v8 = v0;
  _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "*** Assertion failure (Identifier: catch-all) : %s %s:%d %{public}@", buf, 0x26u);

}

void sub_10007ECB4()
{
  id v0;
  int v1;
  int v2;
  int v3;
  int v4;
  int v5;
  uint64_t v6;

  v0 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("Invalid parameter not satisfying %s"));
  sub_10001A714();
  sub_10001A704();
  sub_10000F524();
  sub_10000F5B0((void *)&_mh_execute_header, &_os_log_default, v1, "*** Assertion failure (Identifier: catch-all) : %s %s:%d %{public}@", v2, v3, v4, v5, (uint64_t)"ANFHelper != nil", v6, 2u);

  sub_10000F538();
}

void sub_10007ED6C()
{
  id v0;
  int v1;
  int v2;
  int v3;
  int v4;
  int v5;
  uint64_t v6;

  v0 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("Invalid parameter not satisfying %s"));
  sub_10001A714();
  sub_10001A704();
  sub_10000F524();
  sub_10000F5B0((void *)&_mh_execute_header, &_os_log_default, v1, "*** Assertion failure (Identifier: catch-all) : %s %s:%d %{public}@", v2, v3, v4, v5, (uint64_t)"thumbnailCreator != nil", v6, 2u);

  sub_10000F538();
}

void sub_10007EE24()
{
  id v0;
  int v1;
  int v2;
  int v3;
  int v4;
  int v5;
  uint64_t v6;

  v0 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("Invalid parameter not satisfying %s"));
  sub_10001A714();
  sub_10001A704();
  sub_10000F524();
  sub_10000F5B0((void *)&_mh_execute_header, &_os_log_default, v1, "*** Assertion failure (Identifier: catch-all) : %s %s:%d %{public}@", v2, v3, v4, v5, (uint64_t)"editorialConfigurationProvider != nil", v6, 2u);

  sub_10000F538();
}

void sub_10007EEDC()
{
  id v0;
  int v1;
  int v2;
  int v3;
  int v4;
  int v5;
  uint64_t v6;

  v0 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("Invalid parameter not satisfying %s"));
  sub_10001A714();
  sub_10001A704();
  sub_10000F524();
  sub_10000F5B0((void *)&_mh_execute_header, &_os_log_default, v1, "*** Assertion failure (Identifier: catch-all) : %s %s:%d %{public}@", v2, v3, v4, v5, (uint64_t)"tagEditorialItemDownloader != nil", v6, 2u);

  sub_10000F538();
}

void sub_10007EF94()
{
  id v0;
  int v1;
  int v2;
  int v3;
  int v4;
  int v5;
  uint64_t v6;

  v0 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("Invalid parameter not satisfying %s"));
  sub_10001A714();
  sub_10001A704();
  sub_10000F524();
  sub_10000F5B0((void *)&_mh_execute_header, &_os_log_default, v1, "*** Assertion failure (Identifier: catch-all) : %s %s:%d %{public}@", v2, v3, v4, v5, (uint64_t)"articleEditorialItemDownloader != nil", v6, 2u);

  sub_10000F538();
}

void sub_10007F04C()
{
  id v0;
  int v1;
  int v2;
  int v3;
  int v4;
  int v5;
  uint64_t v6;

  v0 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("Invalid parameter not satisfying %s"));
  sub_10001A714();
  sub_10001A704();
  sub_10000F524();
  sub_10000F5B0((void *)&_mh_execute_header, &_os_log_default, v1, "*** Assertion failure (Identifier: catch-all) : %s %s:%d %{public}@", v2, v3, v4, v5, (uint64_t)"editorialItemEntryManager != nil", v6, 2u);

  sub_10000F538();
}

void sub_10007F104()
{
  id v0;
  int v1;
  int v2;
  int v3;
  int v4;
  int v5;
  uint64_t v6;

  v0 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("Invalid parameter not satisfying %s"));
  sub_10001A714();
  sub_10001A704();
  sub_10000F524();
  sub_10000F5B0((void *)&_mh_execute_header, &_os_log_default, v1, "*** Assertion failure (Identifier: catch-all) : %s %s:%d %{public}@", v2, v3, v4, v5, (uint64_t)"cloudContext != nil", v6, 2u);

  sub_10000F538();
}

void sub_10007F1BC(uint64_t a1, void *a2)
{
  void *v2;
  NSObject *v3;
  void *v4;
  uint64_t v5;
  int v6;
  void *v7;

  v3 = sub_10004DA24(a1, a2);
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "error"));
  v6 = 138412290;
  v7 = v4;
  sub_10000F5F4((void *)&_mh_execute_header, v3, v5, "ToC Editorial Manager: Error while fetching editorial item headline=%@", (uint8_t *)&v6);

  sub_100033F28();
}

void sub_10007F248()
{
  id v0;
  int v1;
  int v2;
  int v3;
  int v4;
  int v5;
  uint64_t v6;

  v0 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("Invalid parameter not satisfying %s"));
  sub_10001A714();
  sub_10001A704();
  sub_10000F524();
  sub_10000F5B0((void *)&_mh_execute_header, &_os_log_default, v1, "*** Assertion failure (Identifier: catch-all) : %s %s:%d %{public}@", v2, v3, v4, v5, (uint64_t)"completion", v6, 2u);

  sub_10000F538();
}

void sub_10007F300()
{
  id v0;
  int v1;
  int v2;
  int v3;
  int v4;
  int v5;
  uint64_t v6;

  v0 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("Invalid parameter not satisfying %s"));
  sub_10001A714();
  sub_10001A704();
  sub_10000F524();
  sub_10000F5B0((void *)&_mh_execute_header, &_os_log_default, v1, "*** Assertion failure (Identifier: catch-all) : %s %s:%d %{public}@", v2, v3, v4, v5, (uint64_t)"articleID", v6, 2u);

  sub_10000F538();
}

void sub_10007F3B8(uint64_t a1, NSObject *a2, uint64_t a3)
{
  uint64_t v3;
  int v4;
  uint64_t v5;

  v3 = *(_QWORD *)(a1 + 32);
  v4 = 138412290;
  v5 = v3;
  sub_10000F5F4((void *)&_mh_execute_header, a2, a3, "ToC Editorial Manager: Error while parsing feed navigation configuration error=%@", (uint8_t *)&v4);
}

void sub_10007F428(uint64_t a1)
{
  id v2;
  id v3;
  int v4;
  id v5;
  __int16 v6;
  id v7;

  v2 = objc_msgSend(*(id *)(a1 + 32), "count");
  v3 = objc_msgSend(*(id *)(a1 + 40), "count");
  v4 = 134218240;
  v5 = v2;
  v6 = 2048;
  v7 = v3;
  _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "Error marking %lu IDs saved and %lu IDs unsaved…", (uint8_t *)&v4, 0x16u);
}

void sub_10007F4D0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  sub_10004F02C();
  sub_10000F588((void *)&_mh_execute_header, &_os_log_default, v0, "Error clearing article identifiers %@.", v1, v2, v3, v4, v5);
  sub_10000F598();
}

void sub_10007F538()
{
  id v0;
  uint8_t buf[4];
  const char *v2;
  __int16 v3;
  char *v4;
  __int16 v5;
  int v6;
  __int16 v7;
  id v8;

  v0 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("invalid nil value for '%s'"), "fetchOp");
  *(_DWORD *)buf = 136315906;
  v2 = "-[FRGizmoSyncManager _syncSeenIdentifiers:withCompletion:]_block_invoke";
  v3 = 2080;
  v4 = "FRGizmoSyncManager.m";
  v5 = 1024;
  v6 = 223;
  v7 = 2114;
  v8 = v0;
  _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "*** Assertion failure (Identifier: catch-all) : %s %s:%d %{public}@", buf, 0x26u);

}

void sub_10007F624()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  sub_10004F02C();
  sub_10000F588((void *)&_mh_execute_header, &_os_log_default, v0, "Error syncing seen from gizmo %@.", v1, v2, v3, v4, v5);
  sub_10000F598();
}

void sub_10007F68C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  sub_10004F02C();
  sub_10000F588((void *)&_mh_execute_header, &_os_log_default, v0, "Error syncing saved from gizmo %@.", v1, v2, v3, v4, v5);
  sub_10000F598();
}

void sub_10007F6F4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  sub_10004F02C();
  sub_10000F588((void *)&_mh_execute_header, &_os_log_default, v0, "Error syncing refresh dates with gizmo %@.", v1, v2, v3, v4, v5);
  sub_10000F598();
}

void sub_10007F75C()
{
  id v0;
  uint64_t v1;
  int v2;
  const char *v3;
  __int16 v4;
  char *v5;
  __int16 v6;

  v0 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("invalid nil value for '%s'"), "resourceManager");
  v2 = 136315906;
  v3 = "-[FRFlintDataProvider initWithANFContent:headline:resourceManager:cloudContext:embedConfigurationManager:]";
  v4 = 2080;
  v5 = "FRFlintDataProvider.m";
  v6 = 1024;
  sub_10000F524();
  sub_10000F518((void *)&_mh_execute_header, &_os_log_default, v1, "*** Assertion failure (Identifier: catch-all) : %s %s:%d %{public}@", (uint8_t *)&v2);

  sub_10000F538();
}

void sub_10007F828(uint64_t a1, uint64_t a2, os_log_t log)
{
  uint64_t v3;
  int v4;
  uint64_t v5;
  __int16 v6;
  uint64_t v7;

  v3 = *(_QWORD *)(a1 + 32);
  v4 = 134218242;
  v5 = v3;
  v6 = 2114;
  v7 = a2;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "%p failed to download Flint JSON with error: %{public}@", (uint8_t *)&v4, 0x16u);
}

void sub_10007F8B0(uint64_t a1, NSObject *a2)
{
  int v2;
  uint64_t v3;

  v2 = 134217984;
  v3 = a1;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "%p will not load asset URLs because there's no context", (uint8_t *)&v2, 0xCu);
}

void sub_10007F924()
{
  id v0;
  uint64_t v1;
  int v2;
  const char *v3;
  __int16 v4;
  char *v5;
  __int16 v6;
  int v7;
  __int16 v8;
  id v9;

  v0 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("must have a context to fetch resources"));
  v2 = 136315906;
  v3 = "-[FRFlintDataProvider _loadAssetURLsWithCompletionBlock:]";
  v4 = 2080;
  v5 = "FRFlintDataProvider.m";
  v6 = 1024;
  v7 = 464;
  v8 = 2114;
  v9 = v0;
  sub_10000F518((void *)&_mh_execute_header, &_os_log_default, v1, "*** Assertion failure (Identifier: catch-all) : %s %s:%d %{public}@", (uint8_t *)&v2);

}

void sub_10007F9F8()
{
  id v0;
  uint64_t v1;
  int v2;
  const char *v3;
  __int16 v4;
  char *v5;
  __int16 v6;

  v0 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("invalid nil value for '%s'"), "imageRequest");
  v2 = 136315906;
  v3 = "-[FRFlintDataProvider loadImagesForImageRequest:completionBlock:]";
  v4 = 2080;
  v5 = "FRFlintDataProvider.m";
  v6 = 1024;
  sub_10000F524();
  sub_10000F518((void *)&_mh_execute_header, &_os_log_default, v1, "*** Assertion failure (Identifier: catch-all) : %s %s:%d %{public}@", (uint8_t *)&v2);

  sub_10000F538();
}

void sub_10007FAC8()
{
  id v0;
  int v1;
  int v2;
  int v3;
  int v4;
  int v5;
  uint64_t v6;

  v0 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("Invalid parameter not satisfying %s"));
  sub_10000F524();
  sub_10000F5B0((void *)&_mh_execute_header, &_os_log_default, v1, "*** Assertion failure (Identifier: catch-all) : %s %s:%d %{public}@", v2, v3, v4, v5, (uint64_t)"channelName", v6, 2u);

  sub_10000F538();
}

void sub_10007FB90()
{
  id v0;
  int v1;
  int v2;
  int v3;
  int v4;
  int v5;
  uint64_t v6;

  v0 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("Invalid parameter not satisfying %s"));
  sub_10000F524();
  sub_10000F5B0((void *)&_mh_execute_header, &_os_log_default, v1, "*** Assertion failure (Identifier: catch-all) : %s %s:%d %{public}@", v2, v3, v4, v5, (uint64_t)"channelID", v6, 2u);

  sub_10000F538();
}

void sub_10007FC58()
{
  id v0;
  uint8_t buf[4];
  const char *v2;
  __int16 v3;
  char *v4;
  __int16 v5;
  int v6;
  __int16 v7;
  id v8;

  v0 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("Invalid parameter not satisfying %s"), "rowIndexes");
  *(_DWORD *)buf = 136315906;
  v2 = "+[NSIndexPath(FRAdditions) fr_indexPathsForRows:inSection:]";
  v3 = 2080;
  v4 = "NSIndexPath+FRAdditions.m";
  v5 = 1024;
  v6 = 34;
  v7 = 2114;
  v8 = v0;
  _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "*** Assertion failure (Identifier: catch-all) : %s %s:%d %{public}@", buf, 0x26u);

}

void sub_10007FD40()
{
  id v0;
  int v1;
  int v2;
  int v3;
  int v4;
  int v5;
  uint64_t v6;

  v0 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("invalid nil value for '%s'"));
  sub_10000F524();
  sub_10000F5B0((void *)&_mh_execute_header, &_os_log_default, v1, "*** Assertion failure (Identifier: catch-all) : %s %s:%d %{public}@", v2, v3, v4, v5, (uint64_t)"_resolver", v6, 2u);

  sub_10000F538();
}

void sub_10007FE08(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_10000F564((void *)&_mh_execute_header, a1, a3, "failed to register for device lock state changes", a5, a6, a7, a8, 0);
}

void sub_10007FE3C(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_10000F564((void *)&_mh_execute_header, a1, a3, "failed to unregister for device lock state changes", a5, a6, a7, a8, 0);
}

void sub_10007FE70(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_10000F588((void *)&_mh_execute_header, a2, a3, "Failed to register for remote notifications with error: %{public}@", a5, a6, a7, a8, 2u);
}

void sub_10007FED8()
{
  id v0;
  int v1;
  int v2;
  int v3;
  int v4;
  int v5;
  uint64_t v6;

  v0 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("invalid nil value for '%s'"));
  sub_10000F524();
  sub_10000F5B0((void *)&_mh_execute_header, &_os_log_default, v1, "*** Assertion failure (Identifier: catch-all) : %s %s:%d %{public}@", v2, v3, v4, v5, (uint64_t)"self.backgroundFetchManager", v6, 2u);

  sub_10000F538();
}

void sub_10007FFA0()
{
  id v0;
  int v1;
  int v2;
  int v3;
  int v4;
  int v5;
  uint64_t v6;

  v0 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("Invalid parameter not satisfying %s"));
  sub_10001A714();
  sub_10001A704();
  sub_10000F524();
  sub_10000F5B0((void *)&_mh_execute_header, &_os_log_default, v1, "*** Assertion failure (Identifier: catch-all) : %s %s:%d %{public}@", v2, v3, v4, v5, (uint64_t)"editorialItemCreator", v6, 2u);

  sub_10000F538();
}

void sub_100080058()
{
  id v0;
  int v1;
  int v2;
  int v3;
  int v4;
  int v5;
  uint64_t v6;

  v0 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("Invalid parameter not satisfying %s"));
  sub_10001A714();
  sub_10001A704();
  sub_10000F524();
  sub_10000F5B0((void *)&_mh_execute_header, &_os_log_default, v1, "*** Assertion failure (Identifier: catch-all) : %s %s:%d %{public}@", v2, v3, v4, v5, (uint64_t)"thumbnailCreator", v6, 2u);

  sub_10000F538();
}

void sub_100080110()
{
  id v0;
  int v1;
  int v2;
  int v3;
  int v4;
  int v5;
  uint64_t v6;

  v0 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("Invalid parameter not satisfying %s"));
  sub_10001A714();
  sub_10001A704();
  sub_10000F524();
  sub_10000F5B0((void *)&_mh_execute_header, &_os_log_default, v1, "*** Assertion failure (Identifier: catch-all) : %s %s:%d %{public}@", v2, v3, v4, v5, (uint64_t)"articleEditorialItemProvider", v6, 2u);

  sub_10000F538();
}

void sub_1000801C8()
{
  id v0;
  int v1;
  int v2;
  int v3;
  int v4;
  int v5;
  uint64_t v6;

  v0 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("Invalid parameter not satisfying %s"));
  sub_10001A714();
  sub_10001A704();
  sub_10000F524();
  sub_10000F5B0((void *)&_mh_execute_header, &_os_log_default, v1, "*** Assertion failure (Identifier: catch-all) : %s %s:%d %{public}@", v2, v3, v4, v5, (uint64_t)"editorialItemEntryManager", v6, 2u);

  sub_10000F538();
}

void sub_100080280()
{
  id v0;
  int v1;
  int v2;
  int v3;
  int v4;
  int v5;
  uint64_t v6;

  v0 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("Invalid parameter not satisfying %s"));
  sub_10001A714();
  sub_10001A704();
  sub_10000F524();
  sub_10000F5B0((void *)&_mh_execute_header, &_os_log_default, v1, "*** Assertion failure (Identifier: catch-all) : %s %s:%d %{public}@", v2, v3, v4, v5, (uint64_t)"dataProviderFactory", v6, 2u);

  sub_10000F538();
}

void sub_100080338(uint64_t a1, void *a2)
{
  void *v3;
  NSObject *v4;
  void *v5;
  uint64_t v6;
  int v7;
  void *v8;
  __int16 v9;
  uint64_t v10;

  v3 = *(void **)(a1 + 32);
  v4 = a2;
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "articleID"));
  v6 = *(_QWORD *)(a1 + 40);
  v7 = 138543618;
  v8 = v5;
  v9 = 2112;
  v10 = v6;
  _os_log_error_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "ToC Editorial Manager: Error while loading articleID: %{public}@ with error: %{error}@", (uint8_t *)&v7, 0x16u);

}

void sub_1000803F8(uint64_t a1, void *a2)
{
  void *v2;
  NSObject *v3;
  void *v4;
  int v5;
  void *v6;

  v2 = *(void **)(a1 + 32);
  v3 = a2;
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "articleID"));
  v5 = 138543362;
  v6 = v4;
  _os_log_error_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "ToC Editorial Manager: Content is nil after downloading articleID: %{public}@", (uint8_t *)&v5, 0xCu);

}

void sub_10008049C()
{
  id v0;
  int v1;
  int v2;
  int v3;
  int v4;
  int v5;
  uint64_t v6;

  v0 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("invalid nil value for '%s'"));
  sub_10000F524();
  sub_10000F5B0((void *)&_mh_execute_header, &_os_log_default, v1, "*** Assertion failure (Identifier: catch-all) : %s %s:%d %{public}@", v2, v3, v4, v5, (uint64_t)"privateDataUpdateCoordinator", v6, 2u);

  sub_10000F538();
}

void sub_100080564()
{
  id v0;
  int v1;
  int v2;
  int v3;
  int v4;
  int v5;
  uint64_t v6;

  v0 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("invalid nil value for '%s'"));
  sub_10000F524();
  sub_10000F5B0((void *)&_mh_execute_header, &_os_log_default, v1, "*** Assertion failure (Identifier: catch-all) : %s %s:%d %{public}@", v2, v3, v4, v5, (uint64_t)"feldsparContext", v6, 2u);

  sub_10000F538();
}

void sub_10008062C()
{
  id v0;
  int v1;
  int v2;
  int v3;
  int v4;
  int v5;
  uint64_t v6;

  v0 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("invalid nil value for '%s'"));
  sub_10001A714();
  sub_10001A704();
  sub_10000F524();
  sub_10000F5B0((void *)&_mh_execute_header, &_os_log_default, v1, "*** Assertion failure (Identifier: catch-all) : %s %s:%d %{public}@", v2, v3, v4, v5, (uint64_t)"tag", v6, 2u);

  sub_10000F538();
}

void sub_1000806E4()
{
  id v0;
  int v1;
  int v2;
  int v3;
  int v4;
  int v5;
  uint64_t v6;

  v0 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("invalid nil value for '%s'"));
  sub_10001A714();
  sub_10001A704();
  sub_10000F524();
  sub_10000F5B0((void *)&_mh_execute_header, &_os_log_default, v1, "*** Assertion failure (Identifier: catch-all) : %s %s:%d %{public}@", v2, v3, v4, v5, (uint64_t)"tag", v6, 2u);

  sub_10000F538();
}

void sub_10008079C(void *a1)
{
  id v2;
  void *v3;
  id v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  id v10;
  uint64_t v11;

  v2 = objc_alloc((Class)NSString);
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "populatedFeed"));
  v10 = objc_msgSend(v3, "feedType");
  v4 = objc_msgSend(v2, "initWithFormat:", CFSTR("Not providing an accessibility hint for this FCFeedType: %lu"));
  sub_10001A714();
  sub_10001A704();
  sub_10000F524();
  sub_10000F5B0((void *)&_mh_execute_header, &_os_log_default, v5, "*** Assertion failure (Identifier: catch-all) : %s %s:%d %{public}@", v6, v7, v8, v9, (uint64_t)v10, v11, 2u);

  sub_10000F538();
}

void sub_100080870()
{
  id v0;
  int v1;
  int v2;
  int v3;
  int v4;
  int v5;
  uint64_t v6;

  v0 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("invalid nil value for '%s'"));
  sub_10001A714();
  sub_10001A704();
  sub_10000F524();
  sub_10000F5B0((void *)&_mh_execute_header, &_os_log_default, v1, "*** Assertion failure (Identifier: catch-all) : %s %s:%d %{public}@", v2, v3, v4, v5, (uint64_t)"tag", v6, 2u);

  sub_10000F538();
}

void sub_100080928()
{
  id v0;
  uint64_t v1;
  int v2[10];

  v0 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("Unknown header type is not supported."));
  v2[0] = 136315906;
  sub_100027764();
  sub_100027754();
  sub_10000F550();
  sub_10000F518((void *)&_mh_execute_header, &_os_log_default, v1, "*** Assertion failure (Identifier: catch-all) : %s %s:%d %{public}@", (uint8_t *)v2);

  sub_10000F544();
}

void sub_1000809D8()
{
  id v0;
  uint64_t v1;
  int v2;
  const char *v3;
  __int16 v4;
  char *v5;
  __int16 v6;
  int v7;
  __int16 v8;
  id v9;

  v0 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("invalid nil value for '%s'"), "font");
  v2 = 136315906;
  v3 = "+[NSString(FRFeedAdditions) fr_fontForFeedHeaderType:]";
  v4 = 2080;
  v5 = "UIFont+FRFeedAdditions.m";
  v6 = 1024;
  v7 = 110;
  v8 = 2114;
  v9 = v0;
  sub_10000F518((void *)&_mh_execute_header, &_os_log_default, v1, "*** Assertion failure (Identifier: catch-all) : %s %s:%d %{public}@", (uint8_t *)&v2);

}

void sub_100080AB8()
{
  id v0;
  uint64_t v1;
  int v2[10];

  v0 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("Unknown not handled."));
  v2[0] = 136315906;
  sub_100027764();
  sub_100027754();
  sub_10000F550();
  sub_10000F518((void *)&_mh_execute_header, &_os_log_default, v1, "*** Assertion failure (Identifier: catch-all) : %s %s:%d %{public}@", (uint8_t *)v2);

  sub_10000F544();
}

void sub_100080B68()
{
  id v0;
  uint64_t v1;
  int v2[10];

  v0 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("Unknown not handled."));
  v2[0] = 136315906;
  sub_100027764();
  sub_100027754();
  sub_10000F550();
  sub_10000F518((void *)&_mh_execute_header, &_os_log_default, v1, "*** Assertion failure (Identifier: catch-all) : %s %s:%d %{public}@", (uint8_t *)v2);

  sub_10000F544();
}

void sub_100080C18()
{
  id v0;
  int v1;
  int v2;
  int v3;
  int v4;
  int v5;
  uint64_t v6;

  v0 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("Invalid parameter not satisfying %s"));
  sub_10001A714();
  sub_10001A704();
  sub_10000F524();
  sub_10000F5B0((void *)&_mh_execute_header, &_os_log_default, v1, "*** Assertion failure (Identifier: catch-all) : %s %s:%d %{public}@", v2, v3, v4, v5, (uint64_t)"userEmbeddingGenerator", v6, 2u);

  sub_10000F538();
}

void sub_100080CD0()
{
  id v0;
  int v1;
  int v2;
  int v3;
  int v4;
  int v5;
  uint64_t v6;

  v0 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("Invalid parameter not satisfying %s"));
  sub_10001A714();
  sub_10001A704();
  sub_10000F524();
  sub_10000F5B0((void *)&_mh_execute_header, &_os_log_default, v1, "*** Assertion failure (Identifier: catch-all) : %s %s:%d %{public}@", v2, v3, v4, v5, (uint64_t)"privateDataContext", v6, 2u);

  sub_10000F538();
}

void sub_100080D88()
{
  id v0;
  int v1;
  int v2;
  int v3;
  int v4;
  int v5;
  uint64_t v6;

  v0 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("Invalid parameter not satisfying %s"));
  sub_10001A714();
  sub_10001A704();
  sub_10000F524();
  sub_10000F5B0((void *)&_mh_execute_header, &_os_log_default, v1, "*** Assertion failure (Identifier: catch-all) : %s %s:%d %{public}@", v2, v3, v4, v5, (uint64_t)"personalizationDataGenerator", v6, 2u);

  sub_10000F538();
}

void sub_100080E40()
{
  id v0;
  int v1;
  int v2;
  int v3;
  int v4;
  int v5;
  uint64_t v6;

  v0 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("Invalid parameter not satisfying %s"));
  sub_10001A714();
  sub_10001A704();
  sub_10000F524();
  sub_10000F5B0((void *)&_mh_execute_header, &_os_log_default, v1, "*** Assertion failure (Identifier: catch-all) : %s %s:%d %{public}@", v2, v3, v4, v5, (uint64_t)"localNewsChannelService", v6, 2u);

  sub_10000F538();
}

void sub_100080EF8()
{
  id v0;
  int v1;
  int v2;
  int v3;
  int v4;
  int v5;
  uint64_t v6;

  v0 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("Invalid parameter not satisfying %s"));
  sub_10001A714();
  sub_10001A704();
  sub_10000F524();
  sub_10000F5B0((void *)&_mh_execute_header, &_os_log_default, v1, "*** Assertion failure (Identifier: catch-all) : %s %s:%d %{public}@", v2, v3, v4, v5, (uint64_t)"subscriptionController", v6, 2u);

  sub_10000F538();
}

void sub_100080FB0()
{
  id v0;
  int v1;
  int v2;
  int v3;
  int v4;
  int v5;
  uint64_t v6;

  v0 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("Invalid parameter not satisfying %s"));
  sub_10001A714();
  sub_10001A704();
  sub_10000F524();
  sub_10000F5B0((void *)&_mh_execute_header, &_os_log_default, v1, "*** Assertion failure (Identifier: catch-all) : %s %s:%d %{public}@", v2, v3, v4, v5, (uint64_t)"purchaseController", v6, 2u);

  sub_10000F538();
}

void sub_100081068()
{
  id v0;
  int v1;
  int v2;
  int v3;
  int v4;
  int v5;
  uint64_t v6;

  v0 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("Invalid parameter not satisfying %s"));
  sub_10001A714();
  sub_10001A704();
  sub_10000F524();
  sub_10000F5B0((void *)&_mh_execute_header, &_os_log_default, v1, "*** Assertion failure (Identifier: catch-all) : %s %s:%d %{public}@", v2, v3, v4, v5, (uint64_t)"feedPersonalizer", v6, 2u);

  sub_10000F538();
}

void sub_100081120()
{
  id v0;
  uint8_t buf[4];
  const char *v2;
  __int16 v3;
  char *v4;
  __int16 v5;
  int v6;
  __int16 v7;
  id v8;

  v0 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("Invalid parameter not satisfying %s"), "userInfo");
  *(_DWORD *)buf = 136315906;
  v2 = "-[FRUserInfoUserIDProvider initWithUserInfo:]";
  v3 = 2080;
  v4 = "FRUserInfoUserIDProvider.m";
  v5 = 1024;
  v6 = 28;
  v7 = 2114;
  v8 = v0;
  _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "*** Assertion failure (Identifier: catch-all) : %s %s:%d %{public}@", buf, 0x26u);

}

void sub_100081208()
{
  id v0;
  int v1;
  const char *v2;
  __int16 v3;
  char *v4;
  __int16 v5;
  int v6;
  __int16 v7;
  id v8;

  v0 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("Case not implemented"));
  v1 = 136315906;
  v2 = "-[FRFeedBasedDataSource collectionView:cellForItemAtIndexPath:]";
  v3 = 2080;
  v4 = "FRFeedBasedDataSource.m";
  v5 = 1024;
  v6 = 368;
  v7 = 2114;
  v8 = v0;
  _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "*** Assertion failure (Identifier: catch-all) : %s %s:%d %{public}@", (uint8_t *)&v1, 0x26u);

}

void sub_1000812E4(uint64_t a1)
{
  id v1;
  int v2;
  int v3;
  int v4;
  int v5;
  int v6;
  uint64_t v8;

  v1 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("WARNING: The feed is nil for indexPath %@"));
  sub_10001A714();
  sub_10001A704();
  sub_10000F524();
  sub_10000F5B0((void *)&_mh_execute_header, &_os_log_default, v2, "*** Assertion failure (Identifier: catch-all) : %s %s:%d %{public}@", v3, v4, v5, v6, a1, v8, 2u);

  sub_10000F538();
}

void sub_100081398(uint64_t a1)
{
  id v1;
  int v2;
  int v3;
  int v4;
  int v5;
  int v6;
  uint64_t v8;

  v1 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("WARNING: The backing tag is nil for feed %@"));
  sub_10001A714();
  sub_10001A704();
  sub_10000F524();
  sub_10000F5B0((void *)&_mh_execute_header, &_os_log_default, v2, "*** Assertion failure (Identifier: catch-all) : %s %s:%d %{public}@", v3, v4, v5, v6, a1, v8, 2u);

  sub_10000F538();
}

void sub_10008144C()
{
  id v0;
  int v1;
  int v2;
  int v3;
  int v4;
  int v5;
  uint64_t v6;

  v0 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("Invalid parameter not satisfying %s"));
  sub_10001A714();
  sub_10001A704();
  sub_10000F524();
  sub_10000F5B0((void *)&_mh_execute_header, &_os_log_default, v1, "*** Assertion failure (Identifier: catch-all) : %s %s:%d %{public}@", v2, v3, v4, v5, (uint64_t)"context != nil", v6, 2u);

  sub_10000F538();
}

void sub_100081504()
{
  id v0;
  uint64_t v1;
  int v2[10];

  v0 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("must not have consumed non-destructive"));
  v2[0] = 136315906;
  sub_100027764();
  sub_100027754();
  sub_10000F550();
  sub_10000F518((void *)&_mh_execute_header, &_os_log_default, v1, "*** Assertion failure (Identifier: catch-all) : %s %s:%d %{public}@", (uint8_t *)v2);

  sub_10000F544();
}

void sub_1000815B4()
{
  id v0;
  uint64_t v1;
  int v2[10];

  v0 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("must not have consumed destructive"));
  v2[0] = 136315906;
  sub_100027764();
  sub_100027754();
  sub_10000F550();
  sub_10000F518((void *)&_mh_execute_header, &_os_log_default, v1, "*** Assertion failure (Identifier: catch-all) : %s %s:%d %{public}@", (uint8_t *)v2);

  sub_10000F544();
}

void sub_100081664()
{
  id v0;
  uint64_t v1;
  int v2[10];

  v0 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("Invalid parameter not satisfying %s"), "consumptionBlock");
  v2[0] = 136315906;
  sub_10001A714();
  sub_10001A704();
  sub_10000F524();
  sub_10000F518((void *)&_mh_execute_header, &_os_log_default, v1, "*** Assertion failure (Identifier: catch-all) : %s %s:%d %{public}@", (uint8_t *)v2);

  sub_10000F538();
}

void sub_100081720()
{
  id v0;
  uint64_t v1;
  int v2[10];

  v0 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("must not have consumed non-destructive"));
  v2[0] = 136315906;
  sub_100027764();
  sub_100027754();
  sub_10000F550();
  sub_10000F518((void *)&_mh_execute_header, &_os_log_default, v1, "*** Assertion failure (Identifier: catch-all) : %s %s:%d %{public}@", (uint8_t *)v2);

  sub_10000F544();
}

void sub_1000817D0()
{
  id v0;
  uint64_t v1;
  int v2[10];

  v0 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("must have consumed destructive"));
  v2[0] = 136315906;
  sub_100027764();
  sub_100027754();
  sub_10000F550();
  sub_10000F518((void *)&_mh_execute_header, &_os_log_default, v1, "*** Assertion failure (Identifier: catch-all) : %s %s:%d %{public}@", (uint8_t *)v2);

  sub_10000F544();
}

void sub_100081880()
{
  id v0;
  uint64_t v1;
  int v2[10];

  v0 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("Invalid parameter not satisfying %s"), "consumptionBlock");
  v2[0] = 136315906;
  sub_10001A714();
  sub_10001A704();
  sub_10000F524();
  sub_10000F518((void *)&_mh_execute_header, &_os_log_default, v1, "*** Assertion failure (Identifier: catch-all) : %s %s:%d %{public}@", (uint8_t *)v2);

  sub_10000F538();
}

void sub_10008193C()
{
  id v0;
  uint64_t v1;
  int v2[10];

  v0 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("must have consumed destructive and non-destructive"));
  v2[0] = 136315906;
  sub_100027764();
  sub_100027754();
  sub_10000F550();
  sub_10000F518((void *)&_mh_execute_header, &_os_log_default, v1, "*** Assertion failure (Identifier: catch-all) : %s %s:%d %{public}@", (uint8_t *)v2);

  sub_10000F544();
}

void sub_1000819EC()
{
  id v0;
  uint64_t v1;
  int v2[10];

  v0 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("Invalid parameter not satisfying %s"), "consumptionBlock");
  v2[0] = 136315906;
  sub_10001A714();
  sub_10001A704();
  sub_10000F524();
  sub_10000F518((void *)&_mh_execute_header, &_os_log_default, v1, "*** Assertion failure (Identifier: catch-all) : %s %s:%d %{public}@", (uint8_t *)v2);

  sub_10000F538();
}

void sub_100081AA8()
{
  id v0;
  uint64_t v1;
  int v2[10];

  v0 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("Invalid parameter not satisfying %s"), "test");
  v2[0] = 136315906;
  sub_10001A714();
  sub_10001A704();
  sub_10000F524();
  sub_10000F518((void *)&_mh_execute_header, &_os_log_default, v1, "*** Assertion failure (Identifier: catch-all) : %s %s:%d %{public}@", (uint8_t *)v2);

  sub_10000F538();
}

void sub_100081B64()
{
  id v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v0 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("Editorial Item entry must have an editorial item ID"));
  sub_100027764();
  sub_100027754();
  sub_10000F550();
  sub_10000F5A0((void *)&_mh_execute_header, &_os_log_default, v1, "*** Assertion failure (Identifier: catch-all) : %s %s:%d %{public}@", v2, v3, v4, v5, 2u);

  sub_10000F544();
}

void sub_100081C10()
{
  id v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v0 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("Editorial Item entry must have an entryID"));
  sub_100027764();
  sub_100027754();
  sub_10000F550();
  sub_10000F5A0((void *)&_mh_execute_header, &_os_log_default, v1, "*** Assertion failure (Identifier: catch-all) : %s %s:%d %{public}@", v2, v3, v4, v5, 2u);

  sub_10000F544();
}

void sub_100081CBC()
{
  id v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v0 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("Editorial Item entry must have an entryID"));
  sub_100027764();
  sub_100027754();
  sub_10000F550();
  sub_10000F5A0((void *)&_mh_execute_header, &_os_log_default, v1, "*** Assertion failure (Identifier: catch-all) : %s %s:%d %{public}@", v2, v3, v4, v5, 2u);

  sub_10000F544();
}

void sub_100081D68(uint64_t a1, NSObject *a2)
{
  uint64_t v2;
  int v3;
  uint64_t v4;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = 138543362;
  v4 = v2;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "%{public}@", (uint8_t *)&v3, 0xCu);
}

void sub_100081DE0()
{
  id v0;
  int v1;
  int v2;
  int v3;
  int v4;
  int v5;
  uint64_t v6;

  v0 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("invalid nil value for '%s'"));
  sub_10001A714();
  sub_10001A704();
  sub_10000F524();
  sub_10000F5B0((void *)&_mh_execute_header, &_os_log_default, v1, "*** Assertion failure (Identifier: catch-all) : %s %s:%d %{public}@", v2, v3, v4, v5, (uint64_t)"fontFileURL", v6, 2u);

  sub_10000F538();
}

void sub_100081E9C()
{
  id v0;
  int v1;
  int v2;
  int v3;
  int v4;
  int v5;
  uint64_t v6;

  v0 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("invalid nil value for '%s'"));
  sub_10001A714();
  sub_10001A704();
  sub_10000F524();
  sub_10000F5B0((void *)&_mh_execute_header, &_os_log_default, v1, "*** Assertion failure (Identifier: catch-all) : %s %s:%d %{public}@", v2, v3, v4, v5, (uint64_t)"fontFileURL", v6, 2u);

  sub_10000F538();
}

void sub_100081F54()
{
  id v0;
  int v1;
  int v2;
  int v3;
  int v4;
  int v5;
  uint64_t v6;

  v0 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("invalid nil value for '%s'"));
  sub_10001A714();
  sub_10001A704();
  sub_10000F524();
  sub_10000F5B0((void *)&_mh_execute_header, &_os_log_default, v1, "*** Assertion failure (Identifier: catch-all) : %s %s:%d %{public}@", v2, v3, v4, v5, (uint64_t)"fontFileURL", v6, 2u);

  sub_10000F538();
}

void sub_10008200C(void *a1, void *a2)
{
  NSObject *v3;
  void *v4;
  int v5;
  void *v6;

  v3 = a1;
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "localizedDescription"));
  v5 = 138543362;
  v6 = v4;
  _os_log_error_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "_decreaseReferenceCountForFontWithFileURL %{public}@", (uint8_t *)&v5, 0xCu);

}

void sub_1000820B0()
{
  id v0;
  uint64_t v1;
  int v2[10];

  v0 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("Failed to unregister font while reference count was 0"));
  v2[0] = 136315906;
  sub_100027764();
  sub_100027754();
  sub_10000F550();
  sub_10000F518((void *)&_mh_execute_header, &_os_log_default, v1, "*** Assertion failure (Identifier: catch-all) : %s %s:%d %{public}@", (uint8_t *)v2);

  sub_10000F544();
}

void sub_100082160()
{
  id v0;
  int v1;
  int v2;
  int v3;
  int v4;
  int v5;
  uint64_t v6;

  v0 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("invalid nil value for '%s'"));
  sub_10001A714();
  sub_10001A704();
  sub_10000F524();
  sub_10000F5B0((void *)&_mh_execute_header, &_os_log_default, v1, "*** Assertion failure (Identifier: catch-all) : %s %s:%d %{public}@", v2, v3, v4, v5, (uint64_t)"fontFileURL", v6, 2u);

  sub_10000F538();
}

void sub_100082218()
{
  id v0;
  int v1;
  int v2;
  int v3;
  int v4;
  int v5;
  uint64_t v6;

  v0 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("invalid nil value for '%s'"));
  sub_10001A714();
  sub_10001A704();
  sub_10000F524();
  sub_10000F5B0((void *)&_mh_execute_header, &_os_log_default, v1, "*** Assertion failure (Identifier: catch-all) : %s %s:%d %{public}@", v2, v3, v4, v5, (uint64_t)"fontFileURL", v6, 2u);

  sub_10000F538();
}

void sub_1000822D0()
{
  id v0;
  int v1;
  int v2;
  int v3;
  int v4;
  int v5;
  uint64_t v6;

  v0 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("invalid nil value for '%s'"));
  sub_10001A714();
  sub_10001A704();
  sub_10000F524();
  sub_10000F5B0((void *)&_mh_execute_header, &_os_log_default, v1, "*** Assertion failure (Identifier: catch-all) : %s %s:%d %{public}@", v2, v3, v4, v5, (uint64_t)"fontFileURL", v6, 2u);

  sub_10000F538();
}

void sub_100082388()
{
  id v0;
  int v1;
  int v2;
  int v3;
  int v4;
  int v5;
  uint64_t v6;

  v0 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("expected nil value for '%s'"));
  sub_10001A714();
  sub_10001A704();
  sub_10000F524();
  sub_10000F5B0((void *)&_mh_execute_header, &_os_log_default, v1, "*** Assertion failure (Identifier: catch-all) : %s %s:%d %{public}@", v2, v3, v4, v5, (uint64_t)"*error", v6, 2u);

  sub_10000F538();
}

void sub_100082440()
{
  id v0;
  int v1;
  int v2;
  int v3;
  int v4;
  int v5;
  uint64_t v6;

  v0 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("invalid nil value for '%s'"));
  sub_10001A714();
  sub_10001A704();
  sub_10000F524();
  sub_10000F5B0((void *)&_mh_execute_header, &_os_log_default, v1, "*** Assertion failure (Identifier: catch-all) : %s %s:%d %{public}@", v2, v3, v4, v5, (uint64_t)"fontFileURL", v6, 2u);

  sub_10000F538();
}

void sub_1000824F8()
{
  id v0;
  uint64_t v1;
  int v2[10];

  v0 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("Attribute returned by font descriptor is not a CFStringRef"));
  v2[0] = 136315906;
  sub_100027764();
  sub_100027754();
  sub_10000F550();
  sub_10000F518((void *)&_mh_execute_header, &_os_log_default, v1, "*** Assertion failure (Identifier: catch-all) : %s %s:%d %{public}@", (uint8_t *)v2);

  sub_10000F544();
}

void sub_1000825A8()
{
  id v0;
  uint64_t v1;
  int v2[10];

  v0 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("Could not create, or found to many, font descriptors for font file"));
  v2[0] = 136315906;
  sub_100027764();
  sub_100027754();
  sub_10000F550();
  sub_10000F518((void *)&_mh_execute_header, &_os_log_default, v1, "*** Assertion failure (Identifier: catch-all) : %s %s:%d %{public}@", (uint8_t *)v2);

  sub_10000F544();
}

void sub_100082658()
{
  id v0;
  int v1;
  int v2;
  int v3;
  int v4;
  int v5;
  uint64_t v6;

  v0 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("invalid nil value for '%s'"));
  sub_10001A714();
  sub_10001A704();
  sub_10000F524();
  sub_10000F5B0((void *)&_mh_execute_header, &_os_log_default, v1, "*** Assertion failure (Identifier: catch-all) : %s %s:%d %{public}@", v2, v3, v4, v5, (uint64_t)"fontFileURL", v6, 2u);

  sub_10000F538();
}

void sub_100082710()
{
  id v0;
  int v1;
  int v2;
  int v3;
  int v4;
  int v5;
  uint64_t v6;

  v0 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("Invalid parameter not satisfying %s"));
  sub_10000F524();
  sub_10000F5B0((void *)&_mh_execute_header, &_os_log_default, v1, "*** Assertion failure (Identifier: catch-all) : %s %s:%d %{public}@", v2, v3, v4, v5, (uint64_t)"configurationManager", v6, 2u);

  sub_10000F538();
}

void sub_1000827D8()
{
  id v0;
  int v1;
  int v2;
  int v3;
  int v4;
  int v5;
  uint64_t v6;

  v0 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("Invalid parameter not satisfying %s"));
  sub_10000F524();
  sub_10000F5B0((void *)&_mh_execute_header, &_os_log_default, v1, "*** Assertion failure (Identifier: catch-all) : %s %s:%d %{public}@", v2, v3, v4, v5, (uint64_t)"generator", v6, 2u);

  sub_10000F538();
}

void sub_1000828A0(uint64_t *a1, uint64_t a2, void *a3)
{
  NSObject *v3;
  uint64_t v4;
  id v5;
  int v6;
  uint64_t v7;
  __int16 v8;
  CFIndex v9;

  v4 = *a1;
  v5 = a3;
  v6 = 138412546;
  v7 = v4;
  v8 = 2048;
  v9 = sub_10000F600();
  _os_log_error_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "Error: Couldn't load image at path %@ - %ld", (uint8_t *)&v6, 0x16u);

}

void sub_100082948(uint8_t *buf, _BYTE *a2, os_log_t log)
{
  *buf = 0;
  *a2 = 0;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "Failed to delete cached image.", buf, 2u);
}

void sub_100082984(uint64_t a1, void *a2)
{
  NSObject *v2;
  id v3;
  int v4;
  CFIndex v5;

  v3 = a2;
  v4 = 134217984;
  v5 = sub_10000F600();
  _os_log_error_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_ERROR, "Error writing image to disk: %ld", (uint8_t *)&v4, 0xCu);

}

void sub_100082A14()
{
  id v0;
  int v1;
  int v2;
  int v3;
  int v4;
  int v5;
  uint64_t v6;

  v0 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("expected nil value for '%s'"));
  sub_10001A714();
  sub_10001A704();
  sub_10000F524();
  sub_10000F5B0((void *)&_mh_execute_header, &_os_log_default, v1, "*** Assertion failure (Identifier: catch-all) : %s %s:%d %{public}@", v2, v3, v4, v5, (uint64_t)"error", v6, 2u);

  sub_10000F538();
}

void sub_100082ACC()
{
  id v0;
  int v1;
  int v2;
  int v3;
  int v4;
  int v5;
  uint64_t v6;

  v0 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("expected nil value for '%s'"));
  sub_10001A714();
  sub_10001A704();
  sub_10000F524();
  sub_10000F5B0((void *)&_mh_execute_header, &_os_log_default, v1, "*** Assertion failure (Identifier: catch-all) : %s %s:%d %{public}@", v2, v3, v4, v5, (uint64_t)"error", v6, 2u);

  sub_10000F538();
}

void sub_100082B84()
{
  id v0;
  int v1;
  int v2;
  int v3;
  int v4;
  int v5;
  uint64_t v6;

  v0 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("expected nil value for '%s'"));
  sub_10001A714();
  sub_10001A704();
  sub_10000F524();
  sub_10000F5B0((void *)&_mh_execute_header, &_os_log_default, v1, "*** Assertion failure (Identifier: catch-all) : %s %s:%d %{public}@", v2, v3, v4, v5, (uint64_t)"error", v6, 2u);

  sub_10000F538();
}

void sub_100082C3C()
{
  id v0;
  int v1;
  int v2;
  int v3;
  int v4;
  int v5;
  uint64_t v6;

  v0 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("expected nil value for '%s'"));
  sub_10001A714();
  sub_10001A704();
  sub_10000F524();
  sub_10000F5B0((void *)&_mh_execute_header, &_os_log_default, v1, "*** Assertion failure (Identifier: catch-all) : %s %s:%d %{public}@", v2, v3, v4, v5, (uint64_t)"error", v6, 2u);

  sub_10000F538();
}

void sub_100082CF4()
{
  id v0;
  int v1;
  int v2;
  int v3;
  int v4;
  int v5;
  uint64_t v6;

  v0 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("Invalid parameter not satisfying %s"));
  sub_10000F524();
  sub_10000F5B0((void *)&_mh_execute_header, &_os_log_default, v1, "*** Assertion failure (Identifier: catch-all) : %s %s:%d %{public}@", v2, v3, v4, v5, (uint64_t)"defaultsDataDestructionItems", v6, 2u);

  sub_10000F538();
}

void sub_100082DBC()
{
  id v0;
  int v1;
  int v2;
  int v3;
  int v4;
  int v5;
  uint64_t v6;

  v0 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("Invalid parameter not satisfying %s"));
  sub_10000F524();
  sub_10000F5B0((void *)&_mh_execute_header, &_os_log_default, v1, "*** Assertion failure (Identifier: catch-all) : %s %s:%d %{public}@", v2, v3, v4, v5, (uint64_t)"privateDataActionProvider", v6, 2u);

  sub_10000F538();
}

void sub_100082E84()
{
  id v0;
  int v1;
  int v2;
  int v3;
  int v4;
  int v5;
  uint64_t v6;

  v0 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("invalid nil value for '%s'"));
  sub_10001A714();
  sub_10001A704();
  sub_10000F524();
  sub_10000F5B0((void *)&_mh_execute_header, &_os_log_default, v1, "*** Assertion failure (Identifier: catch-all) : %s %s:%d %{public}@", v2, v3, v4, v5, (uint64_t)"contentContext", v6, 2u);

  sub_10000F538();
}

void sub_100082F3C()
{
  id v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v0 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("Cannot be zero capacity"));
  sub_100027764();
  sub_100027754();
  sub_10000F550();
  sub_10000F5A0((void *)&_mh_execute_header, &_os_log_default, v1, "*** Assertion failure (Identifier: catch-all) : %s %s:%d %{public}@", v2, v3, v4, v5, 2u);

  sub_10000F544();
}

void sub_100082FE8()
{
  id v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v0 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("Initializing FRRingBuffer with a dictionay with no max"));
  sub_100027764();
  sub_100027754();
  sub_10000F550();
  sub_10000F5A0((void *)&_mh_execute_header, &_os_log_default, v1, "*** Assertion failure (Identifier: catch-all) : %s %s:%d %{public}@", v2, v3, v4, v5, 2u);

  sub_10000F544();
}

void sub_100083094()
{
  id v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v0 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("Initializing FRRingBuffer with a dictionay with no min"));
  sub_100027764();
  sub_100027754();
  sub_10000F550();
  sub_10000F5A0((void *)&_mh_execute_header, &_os_log_default, v1, "*** Assertion failure (Identifier: catch-all) : %s %s:%d %{public}@", v2, v3, v4, v5, 2u);

  sub_10000F544();
}

void sub_100083140()
{
  id v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v0 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("Initializing FRRingBuffer with a dictionay with no position"));
  sub_100027764();
  sub_100027754();
  sub_10000F550();
  sub_10000F5A0((void *)&_mh_execute_header, &_os_log_default, v1, "*** Assertion failure (Identifier: catch-all) : %s %s:%d %{public}@", v2, v3, v4, v5, 2u);

  sub_10000F544();
}

void sub_1000831EC()
{
  id v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v0 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("Initializing FRRingBuffer with a dictionay with no values"));
  sub_100027764();
  sub_100027754();
  sub_10000F550();
  sub_10000F5A0((void *)&_mh_execute_header, &_os_log_default, v1, "*** Assertion failure (Identifier: catch-all) : %s %s:%d %{public}@", v2, v3, v4, v5, 2u);

  sub_10000F544();
}

void sub_100083298()
{
  id v0;
  uint64_t v1;
  int v2[10];

  v0 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("Invalid parameter not satisfying %s"), "headline != nil");
  v2[0] = 136315906;
  sub_10001A714();
  sub_10001A704();
  sub_10000F524();
  sub_10000F518((void *)&_mh_execute_header, &_os_log_default, v1, "*** Assertion failure (Identifier: catch-all) : %s %s:%d %{public}@", (uint8_t *)v2);

  sub_10000F538();
}

void sub_100083354()
{
  id v0;
  uint64_t v1;
  int v2[10];

  v0 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("Invalid parameter not satisfying %s"), "headline != nil");
  v2[0] = 136315906;
  sub_10001A714();
  sub_10001A704();
  sub_10000F524();
  sub_10000F518((void *)&_mh_execute_header, &_os_log_default, v1, "*** Assertion failure (Identifier: catch-all) : %s %s:%d %{public}@", (uint8_t *)v2);

  sub_10000F538();
}

void sub_100083410()
{
  id v0;
  uint64_t v1;
  int v2[10];

  v0 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("Invalid parameter not satisfying %s"), "headline != nil");
  v2[0] = 136315906;
  sub_10001A714();
  sub_10001A704();
  sub_10000F524();
  sub_10000F518((void *)&_mh_execute_header, &_os_log_default, v1, "*** Assertion failure (Identifier: catch-all) : %s %s:%d %{public}@", (uint8_t *)v2);

  sub_10000F538();
}

void sub_1000834CC()
{
  id v0;
  uint64_t v1;
  int v2[10];

  v0 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("Invalid parameter not satisfying %s"), "articleID != nil");
  v2[0] = 136315906;
  sub_10001A714();
  sub_10001A704();
  sub_10000F524();
  sub_10000F518((void *)&_mh_execute_header, &_os_log_default, v1, "*** Assertion failure (Identifier: catch-all) : %s %s:%d %{public}@", (uint8_t *)v2);

  sub_10000F538();
}

void sub_100083588()
{
  id v0;
  uint64_t v1;
  int v2[10];

  v0 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("imbalanced calls to push/pop prefetch suspended"));
  v2[0] = 136315906;
  sub_100027764();
  sub_100027754();
  sub_10000F550();
  sub_10000F518((void *)&_mh_execute_header, &_os_log_default, v1, "*** Assertion failure (Identifier: catch-all) : %s %s:%d %{public}@", (uint8_t *)v2);

  sub_10000F544();
}

void sub_100083638()
{
  id v0;
  uint64_t v1;
  int v2[10];

  v0 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("unsupported prefetch component for Flint articles"));
  v2[0] = 136315906;
  sub_100027764();
  sub_100027754();
  sub_10000F550();
  sub_10000F518((void *)&_mh_execute_header, &_os_log_default, v1, "*** Assertion failure (Identifier: catch-all) : %s %s:%d %{public}@", (uint8_t *)v2);

  sub_10000F544();
}

void sub_1000836E8()
{
  id v0;
  uint64_t v1;
  int v2[10];

  v0 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("unsupported prefetch component for web articles"));
  v2[0] = 136315906;
  sub_100027764();
  sub_100027754();
  sub_10000F550();
  sub_10000F518((void *)&_mh_execute_header, &_os_log_default, v1, "*** Assertion failure (Identifier: catch-all) : %s %s:%d %{public}@", (uint8_t *)v2);

  sub_10000F544();
}

void sub_100083798()
{
  id v0;
  uint64_t v1;
  int v2[10];

  v0 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("expected nil value for '%s'"), "[CSSearchableIndex defaultSearchableIndex].indexDelegate");
  v2[0] = 136315906;
  sub_10001A714();
  sub_10001A704();
  sub_10000F524();
  sub_10000F518((void *)&_mh_execute_header, &_os_log_default, v1, "*** Assertion failure (Identifier: catch-all) : %s %s:%d %{public}@", (uint8_t *)v2);

  sub_10000F538();
}

void sub_100083854()
{
  id v0;
  uint64_t v1;
  int v2[10];

  v0 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("Could not exclude spotlight thumbnails from backup."));
  v2[0] = 136315906;
  sub_100027764();
  sub_100027754();
  sub_10000F550();
  sub_10000F518((void *)&_mh_execute_header, &_os_log_default, v1, "*** Assertion failure (Identifier: catch-all) : %s %s:%d %{public}@", (uint8_t *)v2);

  sub_10000F544();
}

void sub_100083904(uint64_t a1)
{
  int v1;
  uint64_t v2;

  v1 = 138412290;
  v2 = a1;
  _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "Couldn't make spotlight directory at path %@", (uint8_t *)&v1, 0xCu);
}

void sub_100083980()
{
  id v0;
  uint64_t v1;
  int v2[10];

  v0 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("Problem making spotlight directory."));
  v2[0] = 136315906;
  sub_100027764();
  sub_100027754();
  sub_10000F550();
  sub_10000F518((void *)&_mh_execute_header, &_os_log_default, v1, "*** Assertion failure (Identifier: catch-all) : %s %s:%d %{public}@", (uint8_t *)v2);

  sub_10000F544();
}

void sub_100083A30()
{
  void *v0;
  id v1;
  id v2;
  void *v3;
  id v4;
  uint64_t v5;
  int v6[10];

  v1 = objc_alloc((Class)NSString);
  v2 = objc_msgSend((id)sub_1000719F8(), "description");
  v3 = (void *)objc_claimAutoreleasedReturnValue(v2);
  v4 = objc_msgSend(v0, "initWithFormat:", CFSTR("Couldn't remove the spotlight file. %@"), v3);
  v6[0] = 136315906;
  sub_10001A714();
  sub_10001A704();
  sub_10000F524();
  sub_10000F518((void *)&_mh_execute_header, &_os_log_default, v5, "*** Assertion failure (Identifier: catch-all) : %s %s:%d %{public}@", (uint8_t *)v6);

  sub_10000F538();
}

void sub_100083B00()
{
  id v0;
  uint64_t v1;
  int v2[10];

  v0 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("File is not a directory."));
  v2[0] = 136315906;
  sub_100027764();
  sub_100027754();
  sub_10000F550();
  sub_10000F518((void *)&_mh_execute_header, &_os_log_default, v1, "*** Assertion failure (Identifier: catch-all) : %s %s:%d %{public}@", (uint8_t *)v2);

  sub_10000F544();
}

void sub_100083BB0(void *a1)
{
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint8_t v7;

  objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "lastPathComponent"));
  objc_msgSend((id)sub_1000719F8(), "code");
  sub_1000719E4();
  sub_1000719BC((void *)&_mh_execute_header, &_os_log_default, v2, "Couldn't exclude spotlight thumbnails from backup - URL %@, Error: %ld, %@", v3, v4, v5, v6, v7);

  sub_10000F544();
}

void sub_100083C44()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000719A0();
  sub_10000F564((void *)&_mh_execute_header, v0, v1, "Could not delete items from CoreSpotlight", v2, v3, v4, v5, v6);
  sub_100027774();
}

void sub_100083C70()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000719A0();
  sub_10000F564((void *)&_mh_execute_header, v0, v1, "Could not delete all items from CoreSpotlight", v2, v3, v4, v5, v6);
  sub_100027774();
}

void sub_100083C9C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000719A0();
  sub_10000F564((void *)&_mh_execute_header, v0, v1, "Error deleting items from index", v2, v3, v4, v5, v6);
  sub_100027774();
}

void sub_100083CC8(uint64_t a1, NSObject *a2)
{
  uint64_t v2;
  int v3;
  uint64_t v4;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = 138412290;
  v4 = v2;
  _os_log_debug_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_DEBUG, "Deleting items from CoreSpotlight %@", (uint8_t *)&v3, 0xCu);
}

void sub_100083D40()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_1000719A0();
  sub_10000F564((void *)&_mh_execute_header, v0, v1, "Could not index items in CoreSpotlight", v2, v3, v4, v5, v6);
  sub_100027774();
}

void sub_100083D6C(void *a1)
{
  id v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint8_t v8;

  objc_msgSend(a1, "code");
  v1 = objc_msgSend((id)sub_1000719F8(), "description");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  sub_1000719CC();
  sub_1000719AC((void *)&_mh_execute_header, &_os_log_default, v3, "Couldn't get thumbnails to remove: %ld - %@", v4, v5, v6, v7, v8);

  sub_100033F28();
}

void sub_100083DF4()
{
  id v0;
  uint64_t v1;
  int v2[10];

  v0 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("invalid nil value for '%s'"), "articleID");
  v2[0] = 136315906;
  sub_10001A714();
  sub_10001A704();
  sub_10000F524();
  sub_10000F518((void *)&_mh_execute_header, &_os_log_default, v1, "*** Assertion failure (Identifier: catch-all) : %s %s:%d %{public}@", (uint8_t *)v2);

  sub_10000F538();
}

void sub_100083EB0()
{
  id v0;
  uint64_t v1;
  int v2[10];

  v0 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("Invalid parameter not satisfying %s"), "headline");
  v2[0] = 136315906;
  sub_10001A714();
  sub_10001A704();
  sub_10000F524();
  sub_10000F518((void *)&_mh_execute_header, &_os_log_default, v1, "*** Assertion failure (Identifier: catch-all) : %s %s:%d %{public}@", (uint8_t *)v2);

  sub_10000F538();
}

void sub_100083F6C()
{
  id v0;
  uint64_t v1;
  int v2[10];

  v0 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("Invalid parameter not satisfying %s"), "articleID");
  v2[0] = 136315906;
  sub_10001A714();
  sub_10001A704();
  sub_10000F524();
  sub_10000F518((void *)&_mh_execute_header, &_os_log_default, v1, "*** Assertion failure (Identifier: catch-all) : %s %s:%d %{public}@", (uint8_t *)v2);

  sub_10000F538();
}

void sub_100084028()
{
  id v0;
  uint64_t v1;
  int v2[10];

  v0 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("invalid nil value for '%s'"), "articleID");
  v2[0] = 136315906;
  sub_10001A714();
  sub_10001A704();
  sub_10000F524();
  sub_10000F518((void *)&_mh_execute_header, &_os_log_default, v1, "*** Assertion failure (Identifier: catch-all) : %s %s:%d %{public}@", (uint8_t *)v2);

  sub_10000F538();
}

void sub_1000840E4(void *a1)
{
  id v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint8_t v8;

  objc_msgSend(a1, "code");
  v1 = objc_msgSend((id)sub_1000719F8(), "description");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  sub_1000719CC();
  sub_1000719AC((void *)&_mh_execute_header, &_os_log_default, v3, "Error copying file: %ld, %@", v4, v5, v6, v7, v8);

  sub_100033F28();
}

void sub_10008416C()
{
  id v0;
  uint64_t v1;
  int v2[10];

  v0 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("Invalid parameter not satisfying %s"), "headline");
  v2[0] = 136315906;
  sub_10001A714();
  sub_10001A704();
  sub_10000F524();
  sub_10000F518((void *)&_mh_execute_header, &_os_log_default, v1, "*** Assertion failure (Identifier: catch-all) : %s %s:%d %{public}@", (uint8_t *)v2);

  sub_10000F538();
}

void sub_100084228()
{
  id v0;
  uint64_t v1;
  int v2[10];

  v0 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("No file path specified."));
  v2[0] = 136315906;
  sub_100027764();
  sub_100027754();
  sub_10000F550();
  sub_10000F518((void *)&_mh_execute_header, &_os_log_default, v1, "*** Assertion failure (Identifier: catch-all) : %s %s:%d %{public}@", (uint8_t *)v2);

  sub_10000F544();
}

void sub_1000842D8()
{
  id v0;
  uint64_t v1;
  int v2[10];

  v0 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("Invalid parameter not satisfying %s"), "thumbnail");
  v2[0] = 136315906;
  sub_10001A714();
  sub_10001A704();
  sub_10000F524();
  sub_10000F518((void *)&_mh_execute_header, &_os_log_default, v1, "*** Assertion failure (Identifier: catch-all) : %s %s:%d %{public}@", (uint8_t *)v2);

  sub_10000F538();
}

void sub_100084394()
{
  id v0;
  uint64_t v1;
  int v2[10];

  v0 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("This operation must not be performed on the main thread."));
  v2[0] = 136315906;
  sub_100027764();
  sub_100027754();
  sub_10000F550();
  sub_10000F518((void *)&_mh_execute_header, &_os_log_default, v1, "*** Assertion failure (Identifier: catch-all) : %s %s:%d %{public}@", (uint8_t *)v2);

  sub_10000F544();
}

void sub_100084444(uint64_t a1, void *a2)
{
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint8_t v9;

  objc_msgSend(a2, "code");
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "description"));
  sub_1000719E4();
  sub_1000719BC((void *)&_mh_execute_header, &_os_log_default, v4, "Error deleting spotlight thumbnail at path %@ : %ld, %@", v5, v6, v7, v8, v9);

}

void sub_1000844F8()
{
  id v0;
  uint64_t v1;
  int v2[10];

  v0 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("This operation must not be performed on the main thread."));
  v2[0] = 136315906;
  sub_100027764();
  sub_100027754();
  sub_10000F550();
  sub_10000F518((void *)&_mh_execute_header, &_os_log_default, v1, "*** Assertion failure (Identifier: catch-all) : %s %s:%d %{public}@", (uint8_t *)v2);

  sub_10000F544();
}

void sub_1000845A8(uint64_t a1, NSObject *a2)
{
  int v2;
  uint64_t v3;

  v2 = 138543362;
  v3 = a1;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "Unable to restore cache snapshot: %{public}@", (uint8_t *)&v2, 0xCu);
}

void sub_10008461C()
{
  id v0;
  int v1;
  const char *v2;
  __int16 v3;
  char *v4;
  __int16 v5;
  int v6;
  __int16 v7;
  id v8;

  v0 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("Override editorial data must have an identifier"));
  v1 = 136315906;
  v2 = "-[FREditorialOverrideItem initWithIdentifier:title:subtitle:subtitleColorString:actionUrlString:]";
  v3 = 2080;
  v4 = "FREditorialOverrideItem.m";
  v5 = 1024;
  v6 = 15;
  v7 = 2114;
  v8 = v0;
  _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "*** Assertion failure (Identifier: catch-all) : %s %s:%d %{public}@", (uint8_t *)&v1, 0x26u);

}

void sub_1000846F8()
{
  id v0;
  uint64_t v1;
  int v2;
  const char *v3;
  __int16 v4;
  char *v5;
  __int16 v6;
  int v7;
  __int16 v8;
  id v9;

  v0 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("Invalid parameter not satisfying %s"), "appConfigurationManager != nil");
  v2 = 136315906;
  v3 = "-[FREditorialConfigurationProvider initWithAppConfigurationManager:]";
  v4 = 2080;
  v5 = "FREditorialConfigurationProvider.m";
  v6 = 1024;
  v7 = 26;
  v8 = 2114;
  v9 = v0;
  sub_10000F518((void *)&_mh_execute_header, &_os_log_default, v1, "*** Assertion failure (Identifier: catch-all) : %s %s:%d %{public}@", (uint8_t *)&v2);

}

void sub_1000847D8()
{
  id v0;
  uint64_t v1;
  int v2;
  const char *v3;
  __int16 v4;
  char *v5;
  __int16 v6;
  int v7;
  __int16 v8;
  id v9;

  v0 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("Feed navigation config cannot be nil"));
  v2 = 136315906;
  v3 = "-[FREditorialConfigurationProvider fetchEditorialConfiguration:]_block_invoke";
  v4 = 2080;
  v5 = "FREditorialConfigurationProvider.m";
  v6 = 1024;
  v7 = 41;
  v8 = 2114;
  v9 = v0;
  sub_10000F518((void *)&_mh_execute_header, &_os_log_default, v1, "*** Assertion failure (Identifier: catch-all) : %s %s:%d %{public}@", (uint8_t *)&v2);

}

void sub_1000848AC(uint64_t a1, NSObject *a2)
{
  uint64_t v2;
  int v3;
  uint64_t v4;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = 138412290;
  v4 = v2;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "Editorial Manager: Error while parsing feed navigation configuration error=%@", (uint8_t *)&v3, 0xCu);
}

void sub_100084924()
{
  id v0;
  int v1;
  int v2;
  int v3;
  int v4;
  int v5;
  uint64_t v6;

  v0 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("Invalid parameter not satisfying %s"));
  sub_10000F524();
  sub_10000F5B0((void *)&_mh_execute_header, &_os_log_default, v1, "*** Assertion failure (Identifier: catch-all) : %s %s:%d %{public}@", v2, v3, v4, v5, (uint64_t)"editorialItemEntryManager", v6, 2u);

  sub_10000F538();
}

void sub_1000849EC()
{
  id v0;
  int v1;
  int v2;
  int v3;
  int v4;
  int v5;
  uint64_t v6;

  v0 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("Invalid parameter not satisfying %s"));
  sub_10000F524();
  sub_10000F5B0((void *)&_mh_execute_header, &_os_log_default, v1, "*** Assertion failure (Identifier: catch-all) : %s %s:%d %{public}@", v2, v3, v4, v5, (uint64_t)"tagController", v6, 2u);

  sub_10000F538();
}

id objc_msgSend_AL(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "AL");
}

id objc_msgSend_AM(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "AM");
}

id objc_msgSend_ANFHelper(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "ANFHelper");
}

id objc_msgSend_AXL(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "AXL");
}

id objc_msgSend_AXXL(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "AXXL");
}

id objc_msgSend_AXXXL(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "AXXXL");
}

id objc_msgSend_CGColor(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "CGColor");
}

id objc_msgSend_CGContext(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "CGContext");
}

id objc_msgSend_CGImage(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "CGImage");
}

id objc_msgSend_CGPath(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "CGPath");
}

id objc_msgSend_JSONArray(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "JSONArray");
}

id objc_msgSend_JSONObjectWithData_options_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "JSONObjectWithData:options:error:");
}

id objc_msgSend_L(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "L");
}

id objc_msgSend_M(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "M");
}

id objc_msgSend_S(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "S");
}

id objc_msgSend_URL(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "URL");
}

id objc_msgSend_URLByAppendingPathComponent_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "URLByAppendingPathComponent:");
}

id objc_msgSend_URLByAppendingPathComponent_isDirectory_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "URLByAppendingPathComponent:isDirectory:");
}

id objc_msgSend_URLByAppendingPathExtension_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "URLByAppendingPathExtension:");
}

id objc_msgSend_URLByDeletingLastPathComponent(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "URLByDeletingLastPathComponent");
}

id objc_msgSend_URLOverrideForURL_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "URLOverrideForURL:");
}

id objc_msgSend_URLWithString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "URLWithString:");
}

id objc_msgSend_URLWithSuffix_baseURL_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "URLWithSuffix:baseURL:");
}

id objc_msgSend_UUID(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "UUID");
}

id objc_msgSend_UUIDString(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "UUIDString");
}

id objc_msgSend_XL(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "XL");
}

id objc_msgSend_XS(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "XS");
}

id objc_msgSend_XXL(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "XXL");
}

id objc_msgSend_XXXL(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "XXXL");
}

id objc_msgSend__accessibilityClearChildren(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_accessibilityClearChildren");
}

id objc_msgSend__accessibilityFindSubviewDescendant_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_accessibilityFindSubviewDescendant:");
}

id objc_msgSend__accessibilityFocusedIdentifierForRestoringAfterReload(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_accessibilityFocusedIdentifierForRestoringAfterReload");
}

id objc_msgSend__accessibilityIsDescendantOfElement_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_accessibilityIsDescendantOfElement:");
}

id objc_msgSend__accessibilitySaveFocusedElementIfApplicable(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_accessibilitySaveFocusedElementIfApplicable");
}

id objc_msgSend__accessibilityViewAncestorIsKindOf_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_accessibilityViewAncestorIsKindOf:");
}

id objc_msgSend__animateWithDuration_delay_options_factory_animations_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_animateWithDuration:delay:options:factory:animations:completion:");
}

id objc_msgSend__application_openURL_options_animated_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_application:openURL:options:animated:");
}

id objc_msgSend__articleContextFromNotificationID_notificationSenderChannelID_title_userActionDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_articleContextFromNotificationID:notificationSenderChannelID:title:userActionDate:");
}

id objc_msgSend__articleOpenedFromQueryValue_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_articleOpenedFromQueryValue:");
}

id objc_msgSend__attemptSubscriptionToPopulatedFeed(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_attemptSubscriptionToPopulatedFeed");
}

id objc_msgSend__bannerImageForTheme_punchOutEffect_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_bannerImageForTheme:punchOutEffect:");
}

id objc_msgSend__buildSortedArrays(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_buildSortedArrays");
}

id objc_msgSend__cachedImageIfPerformanceAllows(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_cachedImageIfPerformanceAllows");
}

id objc_msgSend__canHandleRequest_forMainFrame_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_canHandleRequest:forMainFrame:");
}

id objc_msgSend__caseInsensitiveCompareWithFirstPathComponent_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_caseInsensitiveCompareWithFirstPathComponent:");
}

id objc_msgSend__checkForNeedToResetIdentifier(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_checkForNeedToResetIdentifier");
}

id objc_msgSend__cleanNumberOfItemsInSection_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_cleanNumberOfItemsInSection:");
}

id objc_msgSend__clearImage(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_clearImage");
}

id objc_msgSend__closeAppSessionForReason_startNewSession_resetUserID_forSceneID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_closeAppSessionForReason:startNewSession:resetUserID:forSceneID:");
}

id objc_msgSend__combinedStringWithTagNames_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_combinedStringWithTagNames:");
}

id objc_msgSend__configureBackgroundFetch(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_configureBackgroundFetch");
}

id objc_msgSend__configureIconImageView(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_configureIconImageView");
}

id objc_msgSend__considerExternalSignals_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_considerExternalSignals:");
}

id objc_msgSend__considerInternalAppUsage_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_considerInternalAppUsage:");
}

id objc_msgSend__considerInternalSignals_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_considerInternalSignals:");
}

id objc_msgSend__consumeActionsUpToActionPassingTest_withBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_consumeActionsUpToActionPassingTest:withBlock:");
}

id objc_msgSend__copyThumbnail_forHeadline_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_copyThumbnail:forHeadline:");
}

id objc_msgSend__createEntryForHeadline_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_createEntryForHeadline:");
}

id objc_msgSend__createNewAutoFavoritesOperation(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_createNewAutoFavoritesOperation");
}

id objc_msgSend__disableLoggingForUnsupportedControls(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_disableLoggingForUnsupportedControls");
}

id objc_msgSend__doWorkIfNotCancelled_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_doWorkIfNotCancelled:");
}

id objc_msgSend__editorialEntryIDForIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_editorialEntryIDForIdentifier:");
}

id objc_msgSend__editorialItemHasBadge_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_editorialItemHasBadge:");
}

id objc_msgSend__endAllSessionsWithReason_forSceneID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_endAllSessionsWithReason:forSceneID:");
}

id objc_msgSend__entryForHeadline_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_entryForHeadline:");
}

id objc_msgSend__extractWidgetEngagementFromReferralURL_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_extractWidgetEngagementFromReferralURL:");
}

id objc_msgSend__fetchEntryForHeadline_completionQueue_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_fetchEntryForHeadline:completionQueue:completionHandler:");
}

id objc_msgSend__fetchInterestTokenForArticleID_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_fetchInterestTokenForArticleID:completion:");
}

id objc_msgSend__fetchMetadataWithCompletion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_fetchMetadataWithCompletion:");
}

id objc_msgSend__fetchPreSubscribedChannelsWithCompletion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_fetchPreSubscribedChannelsWithCompletion:");
}

id objc_msgSend__fetchTagsAndRefreshEditorialItems(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_fetchTagsAndRefreshEditorialItems");
}

id objc_msgSend__filteredTagsForTags_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_filteredTagsForTags:");
}

id objc_msgSend__finalizeImageWithCoverImage_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_finalizeImageWithCoverImage:");
}

id objc_msgSend__findValidAutoFavoritesWithCandidates_channelsAllowedProvider_topicsAllowedProvider_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_findValidAutoFavoritesWithCandidates:channelsAllowedProvider:topicsAllowedProvider:completion:");
}

id objc_msgSend__finishTransition(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_finishTransition");
}

id objc_msgSend__flushIfNeeded(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_flushIfNeeded");
}

id objc_msgSend__fontSizeForTopicFeedsWhenInCardsOfSize_sizeCategory_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_fontSizeForTopicFeedsWhenInCardsOfSize:sizeCategory:");
}

id objc_msgSend__fontSizeForTopicTitleWhenInCardsOfSize_sizeCategory_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_fontSizeForTopicTitleWhenInCardsOfSize:sizeCategory:");
}

id objc_msgSend__fr_fontWeightLookup(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_fr_fontWeightLookup");
}

id objc_msgSend__fr_undoInvertColorsFilter(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_fr_undoInvertColorsFilter");
}

id objc_msgSend__getHSBA_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_getHSBA:");
}

id objc_msgSend__getRGBA_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_getRGBA:");
}

id objc_msgSend__globalPreferredLanguages(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_globalPreferredLanguages");
}

id objc_msgSend__gradientCGColors(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_gradientCGColors");
}

id objc_msgSend__hasUserBeenPresubscribed(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_hasUserBeenPresubscribed");
}

id objc_msgSend__headlineFromArticleNotificationPayload_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_headlineFromArticleNotificationPayload:");
}

id objc_msgSend__identifierWithPrefix_tags_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_identifierWithPrefix:tags:");
}

id objc_msgSend__imageAtPath_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_imageAtPath:");
}

id objc_msgSend__imageGenerationOptions(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_imageGenerationOptions");
}

id objc_msgSend__imageThatSuppressesAccessibilityHairlineThickening(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_imageThatSuppressesAccessibilityHairlineThickening");
}

id objc_msgSend__increaseReferenceCountForFontWithFileURL_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_increaseReferenceCountForFontWithFileURL:");
}

id objc_msgSend__indexArticleIDs_searchableIndex_acknowledgementHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_indexArticleIDs:searchableIndex:acknowledgementHandler:");
}

id objc_msgSend__indexTags_searchableIndex_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_indexTags:searchableIndex:");
}

id objc_msgSend__isAnimatingScroll(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_isAnimatingScroll");
}

id objc_msgSend__isScrollViewScrolling_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_isScrollViewScrolling:");
}

id objc_msgSend__isSimilarToColor_withinPercentage_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_isSimilarToColor:withinPercentage:");
}

id objc_msgSend__kerningFeedsWhenInCardsOfSize_isChannel_sizeCategory_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_kerningFeedsWhenInCardsOfSize:isChannel:sizeCategory:");
}

id objc_msgSend__luminance(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_luminance");
}

id objc_msgSend__markDirtyWithFlags_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_markDirtyWithFlags:");
}

id objc_msgSend__markDirtyWithFlags_qualityOfService_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_markDirtyWithFlags:qualityOfService:");
}

id objc_msgSend__markPurchasesDirty(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_markPurchasesDirty");
}

id objc_msgSend__mayWidgetsBeVisible(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_mayWidgetsBeVisible");
}

id objc_msgSend__newCompanionConnection(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_newCompanionConnection");
}

id objc_msgSend__nextSpecifiedCategoryStartingAtCategory_outValue_outIndex_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_nextSpecifiedCategoryStartingAtCategory:outValue:outIndex:");
}

id objc_msgSend__notificationAttachmentsWithThumbnailFileURL_publisherLogoFileURL_publisherLogoCompactFileURL_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_notificationAttachmentsWithThumbnailFileURL:publisherLogoFileURL:publisherLogoCompactFileURL:");
}

id objc_msgSend__notifiyObserversOfHandledNotificationResponseWithAnalyticsReferral_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_notifiyObserversOfHandledNotificationResponseWithAnalyticsReferral:");
}

id objc_msgSend__notifyOfTagsWithNotificationAvailable_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_notifyOfTagsWithNotificationAvailable:");
}

id objc_msgSend__notifyOfTagsWithNotificationEnabled_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_notifyOfTagsWithNotificationEnabled:");
}

id objc_msgSend__numberOfSections(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_numberOfSections");
}

id objc_msgSend__peformBackgroundFetchWithReason_timeout_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_peformBackgroundFetchWithReason:timeout:completionHandler:");
}

id objc_msgSend__performTransitionAnimationsForStyle_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_performTransitionAnimationsForStyle:");
}

id objc_msgSend__placeholderOfSize_withChin_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_placeholderOfSize:withChin:");
}

id objc_msgSend__populateAttributes_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_populateAttributes:");
}

id objc_msgSend__previousSpecifiedCategoryStartingAtCategory_outValue_outIndex_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_previousSpecifiedCategoryStartingAtCategory:outValue:outIndex:");
}

id objc_msgSend__processAutoFavoritesOperationResult_cursor_error_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_processAutoFavoritesOperationResult:cursor:error:completion:");
}

id objc_msgSend__processSignals_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_processSignals:");
}

id objc_msgSend__referenceCountForFontWithFileURL_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_referenceCountForFontWithFileURL:");
}

id objc_msgSend__referenceCountedSet(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_referenceCountedSet");
}

id objc_msgSend__registrationQueue(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_registrationQueue");
}

id objc_msgSend__removeAMSTokensFromUrl_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_removeAMSTokensFromUrl:");
}

id objc_msgSend__removeAllArticleThumbnailsWithCompletion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_removeAllArticleThumbnailsWithCompletion:");
}

id objc_msgSend__removeThumbnailForArticleID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_removeThumbnailForArticleID:");
}

id objc_msgSend__resetUserID(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_resetUserID");
}

id objc_msgSend__resourceIDFromResourceURL_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_resourceIDFromResourceURL:");
}

id objc_msgSend__restartAllSessions(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_restartAllSessions");
}

id objc_msgSend__revisitSuspendedState(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_revisitSuspendedState");
}

id objc_msgSend__runAndDrainCompletionBlocksForState_finished_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_runAndDrainCompletionBlocksForState:finished:");
}

id objc_msgSend__saveReadableAllowlist(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_saveReadableAllowlist");
}

id objc_msgSend__scaleImageViewDown(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_scaleImageViewDown");
}

id objc_msgSend__scaleImageViewUp(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_scaleImageViewUp");
}

id objc_msgSend__scaledValueForValue_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_scaledValueForValue:");
}

id objc_msgSend__scheduleFakeChannelSupportNotification_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_scheduleFakeChannelSupportNotification:");
}

id objc_msgSend__scheduleFakeNewArticleNotification_whenAppEntersBackground_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_scheduleFakeNewArticleNotification:whenAppEntersBackground:");
}

id objc_msgSend__scheduleLocalNotificationWithIdentifier_title_body_userInfo_category_timeInterval_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_scheduleLocalNotificationWithIdentifier:title:body:userInfo:category:timeInterval:");
}

id objc_msgSend__setCellPrefetchMode_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_setCellPrefetchMode:");
}

id objc_msgSend__setHasUserBeenPresubscribed_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_setHasUserBeenPresubscribed:");
}

id objc_msgSend__setOn_animationStyle_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_setOn:animationStyle:completion:");
}

id objc_msgSend__setTitle_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_setTitle:");
}

id objc_msgSend__setupViews(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_setupViews");
}

id objc_msgSend__shouldIndexArticleID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_shouldIndexArticleID:");
}

id objc_msgSend__shouldIndexArticleWithDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_shouldIndexArticleWithDate:");
}

id objc_msgSend__shouldUnregisterFontWithFileURL_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_shouldUnregisterFontWithFileURL:");
}

id objc_msgSend__spotlightFolder(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_spotlightFolder");
}

id objc_msgSend__startSessionWithReferral_sceneID_restartAllSessions_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_startSessionWithReferral:sceneID:restartAllSessions:");
}

id objc_msgSend__subscribeToFeedIDs_preSubscribedNotificationsChannelIDs_withCompletion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_subscribeToFeedIDs:preSubscribedNotificationsChannelIDs:withCompletion:");
}

id objc_msgSend__supportsForceTouch(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_supportsForceTouch");
}

id objc_msgSend__syncPreferredRefreshDatesWithCompletion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_syncPreferredRefreshDatesWithCompletion:");
}

id objc_msgSend__syncSavedIdentifiersOnGizmo_articleIdentifiersOnGizmo_withCompletion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_syncSavedIdentifiersOnGizmo:articleIdentifiersOnGizmo:withCompletion:");
}

id objc_msgSend__syncSeenIdentifiers_withCompletion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_syncSeenIdentifiers:withCompletion:");
}

id objc_msgSend__tagsForSortOrder_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_tagsForSortOrder:");
}

id objc_msgSend__thumbnailURLForArticleID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_thumbnailURLForArticleID:");
}

id objc_msgSend__thumbnailURLForHeadline_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_thumbnailURLForHeadline:");
}

id objc_msgSend__timeSinceLastActivation(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_timeSinceLastActivation");
}

id objc_msgSend__tintedImageWithCoverImage_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_tintedImageWithCoverImage:");
}

id objc_msgSend__topicCardImage(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_topicCardImage");
}

id objc_msgSend__topicGradientColorsFromHashedIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_topicGradientColorsFromHashedIdentifier:");
}

id objc_msgSend__unregisterFontAtFileURL_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_unregisterFontAtFileURL:error:");
}

id objc_msgSend__unsubscribeToPopulatedFeed(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_unsubscribeToPopulatedFeed");
}

id objc_msgSend__updateActionButtonPosition(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_updateActionButtonPosition");
}

id objc_msgSend__updateBackgroundFetchSettingsWithAppConfiguration_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_updateBackgroundFetchSettingsWithAppConfiguration:");
}

id objc_msgSend__updateButtonImage(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_updateButtonImage");
}

id objc_msgSend__updateHighlightedState(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_updateHighlightedState");
}

id objc_msgSend__updateNotificationUIEnabled(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_updateNotificationUIEnabled");
}

id objc_msgSend__updateNotificationsBadgeButton(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_updateNotificationsBadgeButton");
}

id objc_msgSend__updatePrivateDataControllersWithCompletion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_updatePrivateDataControllersWithCompletion:");
}

id objc_msgSend__updateSuspensionState(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_updateSuspensionState");
}

id objc_msgSend__urlForTagID_internal_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_urlForTagID:internal:");
}

id objc_msgSend_absoluteString(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "absoluteString");
}

id objc_msgSend_accessDates(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "accessDates");
}

id objc_msgSend_accessibilityCollectionViewFocusRestoreIdentifier(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "accessibilityCollectionViewFocusRestoreIdentifier");
}

id objc_msgSend_accessibilityLabel(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "accessibilityLabel");
}

id objc_msgSend_accessibilityPublisherOrTopicName(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "accessibilityPublisherOrTopicName");
}

id objc_msgSend_accessibilitySupportsCellSelection(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "accessibilitySupportsCellSelection");
}

id objc_msgSend_accessibilityTraits(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "accessibilityTraits");
}

id objc_msgSend_accessoryView(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "accessoryView");
}

id objc_msgSend_account(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "account");
}

id objc_msgSend_accountActionQueue(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "accountActionQueue");
}

id objc_msgSend_acquireHoldTokenOnUnderlyingAssets(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "acquireHoldTokenOnUnderlyingAssets");
}

id objc_msgSend_action(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "action");
}

id objc_msgSend_actionButton(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "actionButton");
}

id objc_msgSend_actionIdentifier(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "actionIdentifier");
}

id objc_msgSend_actionURL(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "actionURL");
}

id objc_msgSend_actionUrlString(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "actionUrlString");
}

id objc_msgSend_actionWithIdentifier_title_options_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "actionWithIdentifier:title:options:");
}

id objc_msgSend_actionWithTitle_style_handler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "actionWithTitle:style:handler:");
}

id objc_msgSend_activationState(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "activationState");
}

id objc_msgSend_activity(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "activity");
}

id objc_msgSend_activityIndicator(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "activityIndicator");
}

id objc_msgSend_activityMonitor(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "activityMonitor");
}

id objc_msgSend_activityObservingApplicationDidBecomeActive(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "activityObservingApplicationDidBecomeActive");
}

id objc_msgSend_activityObservingApplicationDidEnterBackground(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "activityObservingApplicationDidEnterBackground");
}

id objc_msgSend_activityObservingApplicationDidFinishLaunching(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "activityObservingApplicationDidFinishLaunching");
}

id objc_msgSend_activityObservingApplicationWillEnterForeground(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "activityObservingApplicationWillEnterForeground");
}

id objc_msgSend_activityObservingApplicationWillResignActive(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "activityObservingApplicationWillResignActive");
}

id objc_msgSend_activityObservingApplicationWillTerminate(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "activityObservingApplicationWillTerminate");
}

id objc_msgSend_activityObservingApplicationWindowDidBecomeBackground(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "activityObservingApplicationWindowDidBecomeBackground");
}

id objc_msgSend_activityObservingApplicationWindowDidBecomeForeground(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "activityObservingApplicationWindowDidBecomeForeground");
}

id objc_msgSend_activityObservingUserDidPerformAction(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "activityObservingUserDidPerformAction");
}

id objc_msgSend_addAction_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addAction:");
}

id objc_msgSend_addAnimation_forKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addAnimation:forKey:");
}

id objc_msgSend_addAppConfigObserver_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addAppConfigObserver:");
}

id objc_msgSend_addArticleToReadingList_eventInitiationLevel_origin_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addArticleToReadingList:eventInitiationLevel:origin:");
}

id objc_msgSend_addAttribute_value_range_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addAttribute:value:range:");
}

id objc_msgSend_addAutoFavoriteSubscriptionForTagIDs_groupableSubscriptionForTagIDs_originProvider_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addAutoFavoriteSubscriptionForTagIDs:groupableSubscriptionForTagIDs:originProvider:completion:");
}

id objc_msgSend_addClip(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addClip");
}

id objc_msgSend_addCompletionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addCompletionHandler:");
}

id objc_msgSend_addDelegate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addDelegate:");
}

id objc_msgSend_addEditorialItem_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addEditorialItem:");
}

id objc_msgSend_addEntriesFromDictionary_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addEntriesFromDictionary:");
}

id objc_msgSend_addFetchable_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addFetchable:");
}

id objc_msgSend_addGestureRecognizer_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addGestureRecognizer:");
}

id objc_msgSend_addInterestInArticleWithID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addInterestInArticleWithID:");
}

id objc_msgSend_addMonitor_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addMonitor:");
}

id objc_msgSend_addNotificationRequest_withCompletionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addNotificationRequest:withCompletionHandler:");
}

id objc_msgSend_addObject_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addObject:");
}

id objc_msgSend_addObjectsFromArray_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addObjectsFromArray:");
}

id objc_msgSend_addObserver_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addObserver:");
}

id objc_msgSend_addObserver_selector_name_object_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addObserver:selector:name:object:");
}

id objc_msgSend_addObserverForName_object_queue_usingBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addObserverForName:object:queue:usingBlock:");
}

id objc_msgSend_addOperation_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addOperation:");
}

id objc_msgSend_addOperationWithBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addOperationWithBlock:");
}

id objc_msgSend_addOrderedEditorialItemIDs_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addOrderedEditorialItemIDs:");
}

id objc_msgSend_addPreFlushTask_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addPreFlushTask:");
}

id objc_msgSend_addPrefetchInterestInHeadline_priority_options_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addPrefetchInterestInHeadline:priority:options:");
}

id objc_msgSend_addPrefetchOperationsToOrderedSet_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addPrefetchOperationsToOrderedSet:");
}

id objc_msgSend_addProgressivePersonalizationAutoFavorites_groupableSubscriptionForTagIDs_originProvider_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addProgressivePersonalizationAutoFavorites:groupableSubscriptionForTagIDs:originProvider:completion:");
}

id objc_msgSend_addRoutable_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addRoutable:");
}

id objc_msgSend_addSkipBackupAttributeToItemAtPath_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addSkipBackupAttributeToItemAtPath:");
}

id objc_msgSend_addStateObserver_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addStateObserver:");
}

id objc_msgSend_addSublayer_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addSublayer:");
}

id objc_msgSend_addSubscriptionToTag_notificationsEnabled_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addSubscriptionToTag:notificationsEnabled:error:");
}

id objc_msgSend_addSubscriptionsWithTags_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addSubscriptionsWithTags:");
}

id objc_msgSend_addSubview_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addSubview:");
}

id objc_msgSend_addTarget_action_forControlEvents_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addTarget:action:forControlEvents:");
}

id objc_msgSend_adjustLayoutAttributeForPageOffset_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "adjustLayoutAttributeForPageOffset:");
}

id objc_msgSend_afterBootstrapOnQueue_runBootstrapCallbackBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "afterBootstrapOnQueue:runBootstrapCallbackBlock:");
}

id objc_msgSend_aggregateStore(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "aggregateStore");
}

id objc_msgSend_aggregateStoreProvider(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "aggregateStoreProvider");
}

id objc_msgSend_aggregatesForFeatures_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "aggregatesForFeatures:");
}

id objc_msgSend_alertControllerWithTitle_message_preferredStyle_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "alertControllerWithTitle:message:preferredStyle:");
}

id objc_msgSend_alertPresentationCount(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "alertPresentationCount");
}

id objc_msgSend_allAggregates(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "allAggregates");
}

id objc_msgSend_allKeys(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "allKeys");
}

id objc_msgSend_allObjects(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "allObjects");
}

id objc_msgSend_allPurchasedTagIDs(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "allPurchasedTagIDs");
}

id objc_msgSend_allResourcesForImageIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "allResourcesForImageIdentifier:");
}

id objc_msgSend_allSortedArticleIDsInReadingList(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "allSortedArticleIDsInReadingList");
}

id objc_msgSend_allSubscribedTagIDs(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "allSubscribedTagIDs");
}

id objc_msgSend_allValues(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "allValues");
}

id objc_msgSend_allocWithZone_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "allocWithZone:");
}

id objc_msgSend_alpha(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "alpha");
}

id objc_msgSend_alphabeticalTags(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "alphabeticalTags");
}

id objc_msgSend_amsPushHandler(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "amsPushHandler");
}

id objc_msgSend_analyticsController(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "analyticsController");
}

id objc_msgSend_analyticsReferralFactory(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "analyticsReferralFactory");
}

id objc_msgSend_analyticsReferralForURL_sourceApplication_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "analyticsReferralForURL:sourceApplication:");
}

id objc_msgSend_anfContent(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "anfContent");
}

id objc_msgSend_anfDocumentAssetHandles(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "anfDocumentAssetHandles");
}

id objc_msgSend_animateWithDuration_delay_options_animations_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "animateWithDuration:delay:options:animations:completion:");
}

id objc_msgSend_animation(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "animation");
}

id objc_msgSend_animationDuration(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "animationDuration");
}

id objc_msgSend_animationForKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "animationForKey:");
}

id objc_msgSend_animationWithKeyPath_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "animationWithKeyPath:");
}

id objc_msgSend_anyObject(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "anyObject");
}

id objc_msgSend_appActivityMonitor(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "appActivityMonitor");
}

id objc_msgSend_appConfigManager(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "appConfigManager");
}

id objc_msgSend_appConfiguration(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "appConfiguration");
}

id objc_msgSend_appConfigurationManager(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "appConfigurationManager");
}

id objc_msgSend_appOpenedByUserActivity(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "appOpenedByUserActivity");
}

id objc_msgSend_appSessionCloseObserver(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "appSessionCloseObserver");
}

id objc_msgSend_appSessionObservers(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "appSessionObservers");
}

id objc_msgSend_appSessionStartMethod(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "appSessionStartMethod");
}

id objc_msgSend_appSessionStartReferral(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "appSessionStartReferral");
}

id objc_msgSend_appUsageAutoFavoriteCandidates(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "appUsageAutoFavoriteCandidates");
}

id objc_msgSend_appUsageOccurrenceDecayMultiplier(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "appUsageOccurrenceDecayMultiplier");
}

id objc_msgSend_appUsagePriorFactorExponent(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "appUsagePriorFactorExponent");
}

id objc_msgSend_appUsageSignalWeight(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "appUsageSignalWeight");
}

id objc_msgSend_appUsageTagFavorabilityExponent(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "appUsageTagFavorabilityExponent");
}

id objc_msgSend_appUsageTimeDecayMultiplier(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "appUsageTimeDecayMultiplier");
}

id objc_msgSend_appendFormat_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "appendFormat:");
}

id objc_msgSend_appendString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "appendString:");
}

id objc_msgSend_application(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "application");
}

id objc_msgSend_application_didFinishLaunchingWithOptions_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "application:didFinishLaunchingWithOptions:");
}

id objc_msgSend_application_didReceiveRemoteNotification_fetchCompletionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "application:didReceiveRemoteNotification:fetchCompletionHandler:");
}

id objc_msgSend_application_handleIntent_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "application:handleIntent:completionHandler:");
}

id objc_msgSend_application_openURL_options_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "application:openURL:options:");
}

id objc_msgSend_application_performFetchWithCompletionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "application:performFetchWithCompletionHandler:");
}

id objc_msgSend_application_willFinishLaunchingWithOptions_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "application:willFinishLaunchingWithOptions:");
}

id objc_msgSend_applicationProxy(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "applicationProxy");
}

id objc_msgSend_applicationState(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "applicationState");
}

id objc_msgSend_applicationUpdateNotifier(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "applicationUpdateNotifier");
}

id objc_msgSend_applicationVersionNumber(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "applicationVersionNumber");
}

id objc_msgSend_applicationVersionString(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "applicationVersionString");
}

id objc_msgSend_applicationWillFinishLaunching(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "applicationWillFinishLaunching");
}

id objc_msgSend_applicationsAvailableForOpeningURL_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "applicationsAvailableForOpeningURL:");
}

id objc_msgSend_applyBlurWithRadius_tintColor_saturationDeltaFactor_maskImage_targetSize_screenScale_opaque_logoRect_logoImage_logoText_cornerRadius_punchThroughBanner_allowAldenTint_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "applyBlurWithRadius:tintColor:saturationDeltaFactor:maskImage:targetSize:screenScale:opaque:logoRect:logoImage:logoText:cornerRadius:punchThroughBanner:allowAldenTint:");
}

id objc_msgSend_applyTag_context_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "applyTag:context:");
}

id objc_msgSend_archivedDataWithRootObject_requiringSecureCoding_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "archivedDataWithRootObject:requiringSecureCoding:error:");
}

id objc_msgSend_areAnimationsEnabled(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "areAnimationsEnabled");
}

id objc_msgSend_areFontsLocallyAvailable(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "areFontsLocallyAvailable");
}

id objc_msgSend_array(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "array");
}

id objc_msgSend_arrayByAddingObjectsFromArray_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "arrayByAddingObjectsFromArray:");
}

id objc_msgSend_arrayWithArray_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "arrayWithArray:");
}

id objc_msgSend_arrayWithObject_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "arrayWithObject:");
}

id objc_msgSend_arrayWithObjects_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "arrayWithObjects:");
}

id objc_msgSend_arrayWithObjects_count_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "arrayWithObjects:count:");
}

id objc_msgSend_articleContentPool(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "articleContentPool");
}

id objc_msgSend_articleController(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "articleController");
}

id objc_msgSend_articleEditorialItemDownloader(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "articleEditorialItemDownloader");
}

id objc_msgSend_articleEditorialItemProvider(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "articleEditorialItemProvider");
}

id objc_msgSend_articleFromNotificationUserInfo_thumbnailFileURL_publisherLogoFileURL_publisherLogoMaskFileURL_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "articleFromNotificationUserInfo:thumbnailFileURL:publisherLogoFileURL:publisherLogoMaskFileURL:completion:");
}

id objc_msgSend_articleID(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "articleID");
}

id objc_msgSend_articleRecordData(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "articleRecordData");
}

id objc_msgSend_articleWithID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "articleWithID:");
}

id objc_msgSend_articleWithID_forceArticleUpdate_qualityOfService_relativePriority_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "articleWithID:forceArticleUpdate:qualityOfService:relativePriority:");
}

id objc_msgSend_asChannel(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "asChannel");
}

id objc_msgSend_asVoid(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "asVoid");
}

id objc_msgSend_assetHandle(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "assetHandle");
}

id objc_msgSend_assetHandles(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "assetHandles");
}

id objc_msgSend_assetManager(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "assetManager");
}

id objc_msgSend_assignOrderToTagSubscriptionsIfNeeded(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "assignOrderToTagSubscriptionsIfNeeded");
}

id objc_msgSend_associateAppEntityFromHeadline_with_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "associateAppEntityFromHeadline:with:");
}

id objc_msgSend_associateChildOperation_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "associateChildOperation:");
}

id objc_msgSend_associator(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "associator");
}

id objc_msgSend_attachmentWithIdentifier_URL_options_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "attachmentWithIdentifier:URL:options:error:");
}

id objc_msgSend_attributedStringForTag_boundsSize_sizeCategory_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "attributedStringForTag:boundsSize:sizeCategory:");
}

id objc_msgSend_attributes(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "attributes");
}

id objc_msgSend_attributesOfItemAtPath_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "attributesOfItemAtPath:error:");
}

id objc_msgSend_audioPlaylist(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "audioPlaylist");
}

id objc_msgSend_auditCandidates_autoSubscriptionAddedDateByTagId_multiplierProvider_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "auditCandidates:autoSubscriptionAddedDateByTagId:multiplierProvider:");
}

id objc_msgSend_authorizationStatus(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "authorizationStatus");
}

id objc_msgSend_autoEnableNotificationsForPreSubscribedChannels(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "autoEnableNotificationsForPreSubscribedChannels");
}

id objc_msgSend_autoEnableNotificationsIsPending(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "autoEnableNotificationsIsPending");
}

id objc_msgSend_autoFavoriteMaxIdleTime(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "autoFavoriteMaxIdleTime");
}

id objc_msgSend_autoFavoriteMinClicks(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "autoFavoriteMinClicks");
}

id objc_msgSend_autoFavoriteMinEvents(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "autoFavoriteMinEvents");
}

id objc_msgSend_autoFavoriteMinObservationsExtAppUsage(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "autoFavoriteMinObservationsExtAppUsage");
}

id objc_msgSend_autoFavoriteMinObservationsSafari(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "autoFavoriteMinObservationsSafari");
}

id objc_msgSend_autoFavoriteMinRate(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "autoFavoriteMinRate");
}

id objc_msgSend_autoFavoriteMinRelativeRate(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "autoFavoriteMinRelativeRate");
}

id objc_msgSend_autoFavoriteMinScoreExtAppUsage(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "autoFavoriteMinScoreExtAppUsage");
}

id objc_msgSend_autoFavoriteMinScoreSafari(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "autoFavoriteMinScoreSafari");
}

id objc_msgSend_autoFavoriteTagIDs(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "autoFavoriteTagIDs");
}

id objc_msgSend_autoFavoriteTagIDsForLocation_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "autoFavoriteTagIDsForLocation:");
}

id objc_msgSend_autoFavoriteTagIDsToScores(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "autoFavoriteTagIDsToScores");
}

id objc_msgSend_autoFavorites(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "autoFavorites");
}

id objc_msgSend_autoFavoritesCompletionHandler(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "autoFavoritesCompletionHandler");
}

id objc_msgSend_autoFavoritesCursor(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "autoFavoritesCursor");
}

id objc_msgSend_autoFavoritesQueue(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "autoFavoritesQueue");
}

id objc_msgSend_autoGroupableFactor(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "autoGroupableFactor");
}

id objc_msgSend_autoUnfavoriteFactor(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "autoUnfavoriteFactor");
}

id objc_msgSend_autofavorites(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "autofavorites");
}

id objc_msgSend_avAssetFactory(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "avAssetFactory");
}

id objc_msgSend_avAssetPrewarmer(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "avAssetPrewarmer");
}

id objc_msgSend_backgroundColor(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "backgroundColor");
}

id objc_msgSend_backgroundColorForFeed_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "backgroundColorForFeed:");
}

id objc_msgSend_backgroundFetchInProgress(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "backgroundFetchInProgress");
}

id objc_msgSend_backgroundFetchManager(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "backgroundFetchManager");
}

id objc_msgSend_backgroundFetchScheduler(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "backgroundFetchScheduler");
}

id objc_msgSend_backgroundFetchWithAppConfiguration_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "backgroundFetchWithAppConfiguration:completionHandler:");
}

id objc_msgSend_backingTag(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "backingTag");
}

id objc_msgSend_bannerFrameForSize_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "bannerFrameForSize:");
}

id objc_msgSend_bannerHeightForWidth_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "bannerHeightForWidth:");
}

id objc_msgSend_bannerImageForMask(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "bannerImageForMask");
}

id objc_msgSend_bannerRectForSize_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "bannerRectForSize:");
}

id objc_msgSend_base64EncodedDataWithOptions_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "base64EncodedDataWithOptions:");
}

id objc_msgSend_baselineAggregateWithConfigurableValues_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "baselineAggregateWithConfigurableValues:");
}

id objc_msgSend_baselineRatePrior(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "baselineRatePrior");
}

id objc_msgSend_begin(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "begin");
}

id objc_msgSend_beginBackgroundTaskWithName_expirationHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "beginBackgroundTaskWithName:expirationHandler:");
}

id objc_msgSend_bezierPathWithRect_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "bezierPathWithRect:");
}

id objc_msgSend_bezierPathWithRoundedRect_cornerRadius_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "bezierPathWithRoundedRect:cornerRadius:");
}

id objc_msgSend_blackColor(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "blackColor");
}

id objc_msgSend_blue(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "blue");
}

id objc_msgSend_BOOLForKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "BOOLForKey:");
}

id objc_msgSend_BOOLValue(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "BOOLValue");
}

id objc_msgSend_bootstrapWithApplication_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "bootstrapWithApplication:");
}

id objc_msgSend_bootstrapper(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "bootstrapper");
}

id objc_msgSend_boundingRectWithSize_options_attributes_context_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "boundingRectWithSize:options:attributes:context:");
}

id objc_msgSend_boundingRectWithSize_options_context_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "boundingRectWithSize:options:context:");
}

id objc_msgSend_bounds(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "bounds");
}

id objc_msgSend_bridgedAppDelegate(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "bridgedAppDelegate");
}

id objc_msgSend_bringSubviewToFront_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "bringSubviewToFront:");
}

id objc_msgSend_buildMenuWithBuilder_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "buildMenuWithBuilder:");
}

id objc_msgSend_bundleIDMapping(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "bundleIDMapping");
}

id objc_msgSend_bundleIdentifier(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "bundleIdentifier");
}

id objc_msgSend_bundleProxyForCurrentProcess(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "bundleProxyForCurrentProcess");
}

id objc_msgSend_bundleSubscriptionManager(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "bundleSubscriptionManager");
}

id objc_msgSend_bytes(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "bytes");
}

id objc_msgSend_cStringUsingEncoding_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cStringUsingEncoding:");
}

id objc_msgSend_cache(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cache");
}

id objc_msgSend_cacheFontItemForFontSize_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cacheFontItemForFontSize:");
}

id objc_msgSend_cacheImageItemForCardSize_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cacheImageItemForCardSize:");
}

id objc_msgSend_cachedArticleIDs(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cachedArticleIDs");
}

id objc_msgSend_cachedImagePath(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cachedImagePath");
}

id objc_msgSend_cachedResourceWithIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cachedResourceWithIdentifier:");
}

id objc_msgSend_cachedResourcesWithIdentifiers_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cachedResourcesWithIdentifiers:");
}

id objc_msgSend_cachedSubscribedTags(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cachedSubscribedTags");
}

id objc_msgSend_cachedSubscription(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cachedSubscription");
}

id objc_msgSend_callback(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "callback");
}

id objc_msgSend_campaignID(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "campaignID");
}

id objc_msgSend_campaignType(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "campaignType");
}

id objc_msgSend_canAddSubscription(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "canAddSubscription");
}

id objc_msgSend_canHandleRemoteNotification_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "canHandleRemoteNotification:");
}

id objc_msgSend_canItemsPerPageLessThanNumberOfItemsPerPage(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "canItemsPerPageLessThanNumberOfItemsPerPage");
}

id objc_msgSend_canLoadCachedImageSynchronouslyForCell_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "canLoadCachedImageSynchronouslyForCell:");
}

id objc_msgSend_canPerformAction_withSender_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "canPerformAction:withSender:");
}

id objc_msgSend_canShowNotificationAlert(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "canShowNotificationAlert");
}

id objc_msgSend_cancel(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cancel");
}

id objc_msgSend_cancelHandlerWithBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cancelHandlerWithBlock:");
}

id objc_msgSend_cancelPreviousPerformRequestsWithTarget_selector_object_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cancelPreviousPerformRequestsWithTarget:selector:object:");
}

id objc_msgSend_candidatePortraitSignalsWithPortraitResults_disbabledTagIDs_globalThreshold_multiplierProvider_logBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "candidatePortraitSignalsWithPortraitResults:disbabledTagIDs:globalThreshold:multiplierProvider:logBlock:");
}

id objc_msgSend_canonicalLanguage(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "canonicalLanguage");
}

id objc_msgSend_capacity(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "capacity");
}

id objc_msgSend_cardCellDelegate(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cardCellDelegate");
}

id objc_msgSend_cardConfiguration(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cardConfiguration");
}

id objc_msgSend_cardCornerRadius(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cardCornerRadius");
}

id objc_msgSend_caseInsensitiveCompare_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "caseInsensitiveCompare:");
}

id objc_msgSend_categoryIdentifier(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "categoryIdentifier");
}

id objc_msgSend_categoryWithIdentifier_actions_intentIdentifiers_options_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "categoryWithIdentifier:actions:intentIdentifiers:options:");
}

id objc_msgSend_cellForItemAtIndexPath_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cellForItemAtIndexPath:");
}

id objc_msgSend_cellForRowAtIndexPath_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cellForRowAtIndexPath:");
}

id objc_msgSend_center(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "center");
}

id objc_msgSend_cgColor(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cgColor");
}

id objc_msgSend_changeWithoutRestartingEnabled(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "changeWithoutRestartingEnabled");
}

id objc_msgSend_channelBannerFrame(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "channelBannerFrame");
}

id objc_msgSend_channelFont(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "channelFont");
}

id objc_msgSend_channelID(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "channelID");
}

id objc_msgSend_channelLogoView(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "channelLogoView");
}

id objc_msgSend_channelPlaceholderImage(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "channelPlaceholderImage");
}

id objc_msgSend_channelTag(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "channelTag");
}

id objc_msgSend_characterAtIndex_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "characterAtIndex:");
}

id objc_msgSend_characterIsMember_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "characterIsMember:");
}

id objc_msgSend_checkForUpdate(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "checkForUpdate");
}

id objc_msgSend_clearAllSavedUserActivities(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "clearAllSavedUserActivities");
}

id objc_msgSend_clearAllSeenArticleIdentifiersWithReply_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "clearAllSeenArticleIdentifiersWithReply:");
}

id objc_msgSend_clearColor(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "clearColor");
}

id objc_msgSend_clearHistory(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "clearHistory");
}

id objc_msgSend_clearIndex(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "clearIndex");
}

id objc_msgSend_clearOldCacheItemsWithFeldsparContext_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "clearOldCacheItemsWithFeldsparContext:");
}

id objc_msgSend_clearPersonalizationData(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "clearPersonalizationData");
}

id objc_msgSend_clearReadingHistoryManager(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "clearReadingHistoryManager");
}

id objc_msgSend_clearRecommendations(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "clearRecommendations");
}

id objc_msgSend_clearableUserEmbedding(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "clearableUserEmbedding");
}

id objc_msgSend_clicks(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "clicks");
}

id objc_msgSend_cloudContext(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cloudContext");
}

id objc_msgSend_code(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "code");
}

id objc_msgSend_collapsedTransactionOfTransactions_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "collapsedTransactionOfTransactions:");
}

id objc_msgSend_collectionView(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "collectionView");
}

id objc_msgSend_collectionView_placeholderChannelFontForLayout_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "collectionView:placeholderChannelFontForLayout:");
}

id objc_msgSend_collectionView_placeholderChannelImageForLayout_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "collectionView:placeholderChannelImageForLayout:");
}

id objc_msgSend_collectionView_placeholderChannelStringAttributesForLayout_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "collectionView:placeholderChannelStringAttributesForLayout:");
}

id objc_msgSend_collectionView_placeholderTopicFontForLayout_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "collectionView:placeholderTopicFontForLayout:");
}

id objc_msgSend_collectionView_placeholderTopicImageForLayout_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "collectionView:placeholderTopicImageForLayout:");
}

id objc_msgSend_collectionView_placeholderTopicStringAttributesForLayout_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "collectionView:placeholderTopicStringAttributesForLayout:");
}

id objc_msgSend_collectionViewLayout(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "collectionViewLayout");
}

id objc_msgSend_collectionViews(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "collectionViews");
}

id objc_msgSend_colorWithAlphaComponent_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "colorWithAlphaComponent:");
}

id objc_msgSend_colorWithCGColor_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "colorWithCGColor:");
}

id objc_msgSend_colorWithDynamicProvider_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "colorWithDynamicProvider:");
}

id objc_msgSend_colorWithRed_green_blue_alpha_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "colorWithRed:green:blue:alpha:");
}

id objc_msgSend_colorWithWhite_alpha_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "colorWithWhite:alpha:");
}

id objc_msgSend_colors(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "colors");
}

id objc_msgSend_commit(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "commit");
}

id objc_msgSend_compactBannerImage(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "compactBannerImage");
}

id objc_msgSend_compactTitle(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "compactTitle");
}

id objc_msgSend_comparatorForSubscriptions(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "comparatorForSubscriptions");
}

id objc_msgSend_compare_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "compare:");
}

id objc_msgSend_compare_options_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "compare:options:");
}

id objc_msgSend_compare_options_range_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "compare:options:range:");
}

id objc_msgSend_component(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "component");
}

id objc_msgSend_component_fromDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "component:fromDate:");
}

id objc_msgSend_componentIdentifierUsingThumbnail(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "componentIdentifierUsingThumbnail");
}

id objc_msgSend_components_fromDate_toDate_options_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "components:fromDate:toDate:options:");
}

id objc_msgSend_componentsJoinedByString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "componentsJoinedByString:");
}

id objc_msgSend_componentsSeparatedByString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "componentsSeparatedByString:");
}

id objc_msgSend_componentsWithString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "componentsWithString:");
}

id objc_msgSend_componentsWithURL_resolvingAgainstBaseURL_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "componentsWithURL:resolvingAgainstBaseURL:");
}

id objc_msgSend_configurableValues(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "configurableValues");
}

id objc_msgSend_configuration(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "configuration");
}

id objc_msgSend_configurationManager(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "configurationManager");
}

id objc_msgSend_configurationStore(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "configurationStore");
}

id objc_msgSend_conformsToProtocol_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "conformsToProtocol:");
}

id objc_msgSend_considerBiome_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "considerBiome:");
}

id objc_msgSend_considerLocation_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "considerLocation:");
}

id objc_msgSend_consumeActionsUpToDestructiveActionSyncWithBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "consumeActionsUpToDestructiveActionSyncWithBlock:");
}

id objc_msgSend_consumeSeenArticleIdentifiers_withReply_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "consumeSeenArticleIdentifiers:withReply:");
}

id objc_msgSend_consumeUpdates(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "consumeUpdates");
}

id objc_msgSend_containerURLForSecurityApplicationGroupIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "containerURLForSecurityApplicationGroupIdentifier:");
}

id objc_msgSend_containsObject_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "containsObject:");
}

id objc_msgSend_containsObjectForKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "containsObjectForKey:");
}

id objc_msgSend_containsTraitsInCollection_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "containsTraitsInCollection:");
}

id objc_msgSend_content(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "content");
}

id objc_msgSend_contentDirectory(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "contentDirectory");
}

id objc_msgSend_contentStoreFrontID(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "contentStoreFrontID");
}

id objc_msgSend_contentType(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "contentType");
}

id objc_msgSend_contentView(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "contentView");
}

id objc_msgSend_contentWithContext_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "contentWithContext:");
}

id objc_msgSend_contents(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "contents");
}

id objc_msgSend_contentsOfDirectoryAtPath_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "contentsOfDirectoryAtPath:error:");
}

id objc_msgSend_contentsOfDirectoryAtURL_includingPropertiesForKeys_options_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "contentsOfDirectoryAtURL:includingPropertiesForKeys:options:error:");
}

id objc_msgSend_context(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "context");
}

id objc_msgSend_contextWithOptions_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "contextWithOptions:");
}

id objc_msgSend_convertTime_fromLayer_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "convertTime:fromLayer:");
}

id objc_msgSend_copy(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "copy");
}

id objc_msgSend_copyItemAtURL_toURL_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "copyItemAtURL:toURL:error:");
}

id objc_msgSend_copyURL_toURL_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "copyURL:toURL:completionHandler:");
}

id objc_msgSend_copyWithZone_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "copyWithZone:");
}

id objc_msgSend_coreDuetLastQueryDate(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "coreDuetLastQueryDate");
}

id objc_msgSend_cornerRadius(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cornerRadius");
}

id objc_msgSend_count(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "count");
}

id objc_msgSend_countByEnumeratingWithState_objects_count_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "countByEnumeratingWithState:objects:count:");
}

id objc_msgSend_countForObject_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "countForObject:");
}

id objc_msgSend_coverDownloadOperation(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "coverDownloadOperation");
}

id objc_msgSend_coverImageAssetHandle(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "coverImageAssetHandle");
}

id objc_msgSend_createBridgedAppResolver(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "createBridgedAppResolver");
}

id objc_msgSend_createCGImage_fromRect_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "createCGImage:fromRect:");
}

id objc_msgSend_createCarPlaySceneContainer(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "createCarPlaySceneContainer");
}

id objc_msgSend_createDirectoryAtPath_withIntermediateDirectories_attributes_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "createDirectoryAtPath:withIntermediateDirectories:attributes:error:");
}

id objc_msgSend_createDirectoryAtURL_withIntermediateDirectories_attributes_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "createDirectoryAtURL:withIntermediateDirectories:attributes:error:");
}

id objc_msgSend_createEditorialItemFromCachedEntry_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "createEditorialItemFromCachedEntry:");
}

id objc_msgSend_createEditorialItemWithContext_articleModifiedDate_articleID_headline_flintDataProvider_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "createEditorialItemWithContext:articleModifiedDate:articleID:headline:flintDataProvider:completion:");
}

id objc_msgSend_createSceneContainer(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "createSceneContainer");
}

id objc_msgSend_createSpotlightDirectoryIfNeeded(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "createSpotlightDirectoryIfNeeded");
}

id objc_msgSend_creationDateOFURL_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "creationDateOFURL:");
}

id objc_msgSend_creativeID(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "creativeID");
}

id objc_msgSend_crossfadeAnimation(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "crossfadeAnimation");
}

id objc_msgSend_ctrForTagID_withAggregate_baselineAggregate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "ctrForTagID:withAggregate:baselineAggregate:");
}

id objc_msgSend_currentCalendar(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "currentCalendar");
}

id objc_msgSend_currentDevice(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "currentDevice");
}

id objc_msgSend_currentNotificationCenter(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "currentNotificationCenter");
}

id objc_msgSend_currentTraitCollection(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "currentTraitCollection");
}

id objc_msgSend_cursor(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cursor");
}

id objc_msgSend_d_logState(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "d_logState");
}

id objc_msgSend_darkColor(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "darkColor");
}

id objc_msgSend_data(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "data");
}

id objc_msgSend_dataIsAnimatedImage_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dataIsAnimatedImage:");
}

id objc_msgSend_dataManager_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dataManager:error:");
}

id objc_msgSend_dataManager_userType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dataManager:userType:");
}

id objc_msgSend_dataManagerFeedPrepared_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dataManagerFeedPrepared:");
}

id objc_msgSend_dataProviderFactory(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dataProviderFactory");
}

id objc_msgSend_dataSource(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dataSource");
}

id objc_msgSend_dataUsingEncoding_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dataUsingEncoding:");
}

id objc_msgSend_dataWithContentsOfFile_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dataWithContentsOfFile:");
}

id objc_msgSend_dataWithContentsOfURL_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dataWithContentsOfURL:");
}

id objc_msgSend_dataWithJSONObject_options_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dataWithJSONObject:options:error:");
}

id objc_msgSend_date(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "date");
}

id objc_msgSend_dateAdded(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dateAdded");
}

id objc_msgSend_dateArticleWasAdded_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dateArticleWasAdded:");
}

id objc_msgSend_dateByAddingTimeInterval_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dateByAddingTimeInterval:");
}

id objc_msgSend_dateFormatterWithFormat_forReuse_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dateFormatterWithFormat:forReuse:");
}

id objc_msgSend_dateFromString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dateFromString:");
}

id objc_msgSend_dateLastOpened(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dateLastOpened");
}

id objc_msgSend_dateWithTimeIntervalSinceNow_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dateWithTimeIntervalSinceNow:");
}

id objc_msgSend_debugDescription(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "debugDescription");
}

id objc_msgSend_decayRate(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "decayRate");
}

id objc_msgSend_decodeObjectOfClasses_forKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "decodeObjectOfClasses:forKey:");
}

id objc_msgSend_defaultAvailability(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "defaultAvailability");
}

id objc_msgSend_defaultBannerImage(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "defaultBannerImage");
}

id objc_msgSend_defaultCandidates(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "defaultCandidates");
}

id objc_msgSend_defaultCenter(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "defaultCenter");
}

id objc_msgSend_defaultConfiguration(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "defaultConfiguration");
}

id objc_msgSend_defaultContext(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "defaultContext");
}

id objc_msgSend_defaultManager(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "defaultManager");
}

id objc_msgSend_defaultQueue(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "defaultQueue");
}

id objc_msgSend_defaultScoringConfig(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "defaultScoringConfig");
}

id objc_msgSend_defaultSearchableIndex(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "defaultSearchableIndex");
}

id objc_msgSend_defaultStore(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "defaultStore");
}

id objc_msgSend_defaultTags(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "defaultTags");
}

id objc_msgSend_defaultTimeZone(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "defaultTimeZone");
}

id objc_msgSend_defaultWorkspace(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "defaultWorkspace");
}

id objc_msgSend_defaultsDataDestructionItems(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "defaultsDataDestructionItems");
}

id objc_msgSend_delegate(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "delegate");
}

id objc_msgSend_deleteAllSearchableItemsWithCompletionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "deleteAllSearchableItemsWithCompletionHandler:");
}

id objc_msgSend_deleteItemsAtIndexPaths_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "deleteItemsAtIndexPaths:");
}

id objc_msgSend_deletePersonalizationVector(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "deletePersonalizationVector");
}

id objc_msgSend_deleteSearchableItemsWithDomainIdentifiers_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "deleteSearchableItemsWithDomainIdentifiers:completionHandler:");
}

id objc_msgSend_deleteSearchableItemsWithIdentifiers_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "deleteSearchableItemsWithIdentifiers:completionHandler:");
}

id objc_msgSend_deleteSections_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "deleteSections:");
}

id objc_msgSend_deletedIndexPaths(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "deletedIndexPaths");
}

id objc_msgSend_deletedSections(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "deletedSections");
}

id objc_msgSend_depositSyncWithAccessor_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "depositSyncWithAccessor:");
}

id objc_msgSend_dequeueReusableCellWithIdentifier_forIndexPath_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dequeueReusableCellWithIdentifier:forIndexPath:");
}

id objc_msgSend_dequeueReusableCellWithReuseIdentifier_forIndexPath_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dequeueReusableCellWithReuseIdentifier:forIndexPath:");
}

id objc_msgSend_dequeueTransactionsWithCompletion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dequeueTransactionsWithCompletion:");
}

id objc_msgSend_derivedPersonalizationDataBalanceValue(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "derivedPersonalizationDataBalanceValue");
}

id objc_msgSend_description(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "description");
}

id objc_msgSend_destinationURLForURL_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "destinationURLForURL:");
}

id objc_msgSend_destructiveHasBeenConsumed(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "destructiveHasBeenConsumed");
}

id objc_msgSend_destructivelyDecodeReferraltemOfClass_withQueryValue_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "destructivelyDecodeReferraltemOfClass:withQueryValue:error:");
}

id objc_msgSend_detailTextLabel(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "detailTextLabel");
}

id objc_msgSend_deviceManager(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "deviceManager");
}

id objc_msgSend_deviceScreenScaleFromPotentialBackgroundThread(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "deviceScreenScaleFromPotentialBackgroundThread");
}

id objc_msgSend_deviceToken(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "deviceToken");
}

id objc_msgSend_dictionary(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dictionary");
}

id objc_msgSend_dictionaryForKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dictionaryForKey:");
}

id objc_msgSend_dictionaryRepresentation(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dictionaryRepresentation");
}

id objc_msgSend_dictionaryWithCapacity_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dictionaryWithCapacity:");
}

id objc_msgSend_dictionaryWithContentsOfFile_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dictionaryWithContentsOfFile:");
}

id objc_msgSend_dictionaryWithObjects_forKeys_count_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dictionaryWithObjects:forKeys:count:");
}

id objc_msgSend_dictionaryWithValuesForKeys_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dictionaryWithValuesForKeys:");
}

id objc_msgSend_didCommitFirstFrame(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "didCommitFirstFrame");
}

id objc_msgSend_disableTransitionAnimation(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "disableTransitionAnimation");
}

id objc_msgSend_dismissViewControllerAnimated_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dismissViewControllerAnimated:completion:");
}

id objc_msgSend_dispose(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dispose");
}

id objc_msgSend_disregardCache(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "disregardCache");
}

id objc_msgSend_distantPast(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "distantPast");
}

id objc_msgSend_documentController(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "documentController");
}

id objc_msgSend_documentVersion(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "documentVersion");
}

id objc_msgSend_doubleValue(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "doubleValue");
}

id objc_msgSend_downloadArticleWithArticleID_editorialItemFromCache_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "downloadArticleWithArticleID:editorialItemFromCache:completion:");
}

id objc_msgSend_downloadEditorialItemWithIDs_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "downloadEditorialItemWithIDs:completion:");
}

id objc_msgSend_downloadIfNeededWithCompletion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "downloadIfNeededWithCompletion:");
}

id objc_msgSend_downloadIfNeededWithCompletionQueue_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "downloadIfNeededWithCompletionQueue:completion:");
}

id objc_msgSend_downloadIfNeededWithGroup_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "downloadIfNeededWithGroup:");
}

id objc_msgSend_downloadIfNeededWithPriority_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "downloadIfNeededWithPriority:completion:");
}

id objc_msgSend_downloadThumbnailIconWithContext_flintDataProvider_iconIdentifier_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "downloadThumbnailIconWithContext:flintDataProvider:iconIdentifier:completion:");
}

id objc_msgSend_dragController_contentRectOfCellAtIndexPath_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dragController:contentRectOfCellAtIndexPath:");
}

id objc_msgSend_dragController_feedForCellAtIndexPath_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dragController:feedForCellAtIndexPath:");
}

id objc_msgSend_dragController_headlineForCellAtIndexPath_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dragController:headlineForCellAtIndexPath:");
}

id objc_msgSend_dragItemsForFeed_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dragItemsForFeed:");
}

id objc_msgSend_dragItemsForHeadline_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dragItemsForHeadline:");
}

id objc_msgSend_drawAtPoint_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "drawAtPoint:");
}

id objc_msgSend_drawInRect_withAttributes_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "drawInRect:withAttributes:");
}

id objc_msgSend_drawWithRect_options_context_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "drawWithRect:options:context:");
}

id objc_msgSend_earlierDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "earlierDate:");
}

id objc_msgSend_editorialConfigurationProvider(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "editorialConfigurationProvider");
}

id objc_msgSend_editorialItemCreator(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "editorialItemCreator");
}

id objc_msgSend_editorialItemEntryManager(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "editorialItemEntryManager");
}

id objc_msgSend_editorialItemID(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "editorialItemID");
}

id objc_msgSend_editorialItemsByID(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "editorialItemsByID");
}

id objc_msgSend_editorialThumbnailImageWith_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "editorialThumbnailImageWith:");
}

id objc_msgSend_embedConfiguration(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "embedConfiguration");
}

id objc_msgSend_embedConfigurationAssetID(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "embedConfigurationAssetID");
}

id objc_msgSend_embedConfigurationData(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "embedConfigurationData");
}

id objc_msgSend_embedConfigurationIdentifier(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "embedConfigurationIdentifier");
}

id objc_msgSend_embedConfigurationManager(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "embedConfigurationManager");
}

id objc_msgSend_embedFetchCompletionBlock(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "embedFetchCompletionBlock");
}

id objc_msgSend_embedForType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "embedForType:");
}

id objc_msgSend_embeddedScrollView(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "embeddedScrollView");
}

id objc_msgSend_enableBackgroundDownloadsInSpiteOfHighPriorityTasks(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "enableBackgroundDownloadsInSpiteOfHighPriorityTasks");
}

id objc_msgSend_enableFlushing(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "enableFlushing");
}

id objc_msgSend_enableLocationBasedAutofavorites(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "enableLocationBasedAutofavorites");
}

id objc_msgSend_enableNewsPersonalizationAutoFavorites(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "enableNewsPersonalizationAutoFavorites");
}

id objc_msgSend_encodableElement(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "encodableElement");
}

id objc_msgSend_encodableElementClass(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "encodableElementClass");
}

id objc_msgSend_encodeObject_forKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "encodeObject:forKey:");
}

id objc_msgSend_endActiveViewingSession(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "endActiveViewingSession");
}

id objc_msgSend_endBackgroundTask_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "endBackgroundTask:");
}

id objc_msgSend_endPoint(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "endPoint");
}

id objc_msgSend_endSessionForReason_byStartingNewSession_resetUserID_forSceneID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "endSessionForReason:byStartingNewSession:resetUserID:forSceneID:");
}

id objc_msgSend_endpointConnectionClientID(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "endpointConnectionClientID");
}

id objc_msgSend_enqueueBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "enqueueBlock:");
}

id objc_msgSend_enqueueBlockForMainThread_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "enqueueBlockForMainThread:");
}

id objc_msgSend_enqueueNotification_postingStyle_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "enqueueNotification:postingStyle:");
}

id objc_msgSend_enqueueNotification_postingStyle_coalesceMask_forModes_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "enqueueNotification:postingStyle:coalesceMask:forModes:");
}

id objc_msgSend_entitlementService(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "entitlementService");
}

id objc_msgSend_entryID(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "entryID");
}

id objc_msgSend_enumerateAggregatesUsingBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "enumerateAggregatesUsingBlock:");
}

id objc_msgSend_enumerateKeysAndObjectsUsingBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "enumerateKeysAndObjectsUsingBlock:");
}

id objc_msgSend_enumerateObjectsUsingBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "enumerateObjectsUsingBlock:");
}

id objc_msgSend_enumerateSubstringsInRange_options_usingBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "enumerateSubstringsInRange:options:usingBlock:");
}

id objc_msgSend_enumeratorAtPath_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "enumeratorAtPath:");
}

id objc_msgSend_error(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "error");
}

id objc_msgSend_errorMessageForArticleViewWithOfflineReason_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "errorMessageForArticleViewWithOfflineReason:");
}

id objc_msgSend_errorOn_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "errorOn:error:");
}

id objc_msgSend_errorWithDomain_code_userInfo_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "errorWithDomain:code:userInfo:");
}

id objc_msgSend_eventCount(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "eventCount");
}

id objc_msgSend_events(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "events");
}

id objc_msgSend_exceededMaximumAllowedSubscription(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "exceededMaximumAllowedSubscription");
}

id objc_msgSend_exceptionWithName_reason_userInfo_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "exceptionWithName:reason:userInfo:");
}

id objc_msgSend_excerptAssetHandle(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "excerptAssetHandle");
}

id objc_msgSend_executeOnce_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "executeOnce:");
}

id objc_msgSend_executeWithArticleContentPool_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "executeWithArticleContentPool:completionHandler:");
}

id objc_msgSend_executeWithCallbackQueue_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "executeWithCallbackQueue:completionHandler:");
}

id objc_msgSend_executeWithCompletionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "executeWithCompletionHandler:");
}

id objc_msgSend_existingInternalSignalAutoFavoriteCandidates(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "existingInternalSignalAutoFavoriteCandidates");
}

id objc_msgSend_exploreArticleID(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "exploreArticleID");
}

id objc_msgSend_extent(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "extent");
}

id objc_msgSend_fallbackResourceForImageRequest_originalResource_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fallbackResourceForImageRequest:originalResource:");
}

id objc_msgSend_fastestEncoding(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fastestEncoding");
}

id objc_msgSend_favorabilityScores(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "favorabilityScores");
}

id objc_msgSend_favoriteTranslationForTagID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "favoriteTranslationForTagID:");
}

id objc_msgSend_favoritesPersonalizer(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "favoritesPersonalizer");
}

id objc_msgSend_fcDigestModeFromScheduledDeliverySetting_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fcDigestModeFromScheduledDeliverySetting:");
}

id objc_msgSend_fc_NewsArticleID(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fc_NewsArticleID");
}

id objc_msgSend_fc_allObjectsPassTest_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fc_allObjectsPassTest:");
}

id objc_msgSend_fc_array_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fc_array:");
}

id objc_msgSend_fc_arrayByTransformingWithBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fc_arrayByTransformingWithBlock:");
}

id objc_msgSend_fc_containsObjectPassingTest_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fc_containsObjectPassingTest:");
}

id objc_msgSend_fc_dateFromStringWithISO8601Format_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fc_dateFromStringWithISO8601Format:");
}

id objc_msgSend_fc_dateWithMillisecondTimeIntervalSince1970_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fc_dateWithMillisecondTimeIntervalSince1970:");
}

id objc_msgSend_fc_dictionary_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fc_dictionary:");
}

id objc_msgSend_fc_dictionaryByTransformingValuesWithBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fc_dictionaryByTransformingValuesWithBlock:");
}

id objc_msgSend_fc_dictionaryByTransformingValuesWithKeyAndValueBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fc_dictionaryByTransformingValuesWithKeyAndValueBlock:");
}

id objc_msgSend_fc_dictionaryWithKeyBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fc_dictionaryWithKeyBlock:");
}

id objc_msgSend_fc_dictionaryWithKeySelector_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fc_dictionaryWithKeySelector:");
}

id objc_msgSend_fc_dictionaryWithKeys_allowingNil_valueBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fc_dictionaryWithKeys:allowingNil:valueBlock:");
}

id objc_msgSend_fc_firstObjectPassingTest_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fc_firstObjectPassingTest:");
}

id objc_msgSend_fc_isEarlierThan_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fc_isEarlierThan:");
}

id objc_msgSend_fc_isHardPaywallNewsArticleURL_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fc_isHardPaywallNewsArticleURL:");
}

id objc_msgSend_fc_isLaterThan_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fc_isLaterThan:");
}

id objc_msgSend_fc_isNewsArticleURL(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fc_isNewsArticleURL");
}

id objc_msgSend_fc_isNewsTagURL(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fc_isNewsTagURL");
}

id objc_msgSend_fc_isValidArticleID(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fc_isValidArticleID");
}

id objc_msgSend_fc_isValidTagID(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fc_isValidTagID");
}

id objc_msgSend_fc_isWithinTimeInterval_ofDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fc_isWithinTimeInterval:ofDate:");
}

id objc_msgSend_fc_jsonString(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fc_jsonString");
}

id objc_msgSend_fc_processLaunchDate(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fc_processLaunchDate");
}

id objc_msgSend_fc_quicklyClearDirectory_callbackQueue_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fc_quicklyClearDirectory:callbackQueue:completion:");
}

id objc_msgSend_fc_removeContentsOfDirectoryAtURL_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fc_removeContentsOfDirectoryAtURL:");
}

id objc_msgSend_fc_removeFirstObject(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fc_removeFirstObject");
}

id objc_msgSend_fc_safeSubarrayWithCountFromBack_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fc_safeSubarrayWithCountFromBack:");
}

id objc_msgSend_fc_safeSubarrayWithCountFromFront_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fc_safeSubarrayWithCountFromFront:");
}

id objc_msgSend_fc_safelyAddObject_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fc_safelyAddObject:");
}

id objc_msgSend_fc_safelyAddStringIfNonNilAndNotZeroLength_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fc_safelyAddStringIfNonNilAndNotZeroLength:");
}

id objc_msgSend_fc_safelyIntersectSet_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fc_safelyIntersectSet:");
}

id objc_msgSend_fc_safelySetObject_forKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fc_safelySetObject:forKey:");
}

id objc_msgSend_fc_safelySetObjectAllowingNil_forKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fc_safelySetObjectAllowingNil:forKey:");
}

id objc_msgSend_fc_safelySetObjectAllowingNil_forKeyAllowingNil_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fc_safelySetObjectAllowingNil:forKeyAllowingNil:");
}

id objc_msgSend_fc_safelyUnionSet_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fc_safelyUnionSet:");
}

id objc_msgSend_fc_set_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fc_set:");
}

id objc_msgSend_fc_setByIntersectingSet_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fc_setByIntersectingSet:");
}

id objc_msgSend_fc_setByMinusingSet_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fc_setByMinusingSet:");
}

id objc_msgSend_fc_setByTransformingWithBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fc_setByTransformingWithBlock:");
}

id objc_msgSend_fc_setByUnioningSet_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fc_setByUnioningSet:");
}

id objc_msgSend_fc_sharedConcurrentQueue(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fc_sharedConcurrentQueue");
}

id objc_msgSend_fc_sharedSerialQueue(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fc_sharedSerialQueue");
}

id objc_msgSend_fc_subarrayUpToCountInclusive_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fc_subarrayUpToCountInclusive:");
}

id objc_msgSend_fc_timeIntervalUntilNow(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fc_timeIntervalUntilNow");
}

id objc_msgSend_fc_unionOfSetsInArray_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fc_unionOfSetsInArray:");
}

id objc_msgSend_featureForIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "featureForIdentifier:");
}

id objc_msgSend_featureFromTagID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "featureFromTagID:");
}

id objc_msgSend_featureKey(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "featureKey");
}

id objc_msgSend_featuresFromTagIDs_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "featuresFromTagIDs:");
}

id objc_msgSend_featuresFromTodayPersonalizationEvent_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "featuresFromTodayPersonalizationEvent:");
}

id objc_msgSend_featuresGenerator(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "featuresGenerator");
}

id objc_msgSend_feed(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "feed");
}

id objc_msgSend_feedAtIndexPath_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "feedAtIndexPath:");
}

id objc_msgSend_feedBackgroundColor(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "feedBackgroundColor");
}

id objc_msgSend_feedDataSource_presentNotificationManagerForTag_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "feedDataSource:presentNotificationManagerForTag:");
}

id objc_msgSend_feedDataSource_subscribedWithFeed_indexPathRow_preSubscribedTagIDs_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "feedDataSource:subscribedWithFeed:indexPathRow:preSubscribedTagIDs:");
}

id objc_msgSend_feedDataSource_toggleSubscription_subscriptionButton_indexPath_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "feedDataSource:toggleSubscription:subscriptionButton:indexPath:");
}

id objc_msgSend_feedDataSource_unsubscribedWithFeed_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "feedDataSource:unsubscribedWithFeed:");
}

id objc_msgSend_feedDataSource_wantsToPerformUpdate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "feedDataSource:wantsToPerformUpdate:");
}

id objc_msgSend_feedDataSourceDidReloadData_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "feedDataSourceDidReloadData:");
}

id objc_msgSend_feedDataSourceShouldAnimateLoadOfCellImages_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "feedDataSourceShouldAnimateLoadOfCellImages:");
}

id objc_msgSend_feedDataSourceShouldLoadImagesForCells_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "feedDataSourceShouldLoadImagesForCells:");
}

id objc_msgSend_feedNavigationAppearance(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "feedNavigationAppearance");
}

id objc_msgSend_feedNavigationConfigJSON(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "feedNavigationConfigJSON");
}

id objc_msgSend_feedPersonalizer(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "feedPersonalizer");
}

id objc_msgSend_feedSubscribedForCollectionViewCell_feed_preSubscribedTagIDs_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "feedSubscribedForCollectionViewCell:feed:preSubscribedTagIDs:");
}

id objc_msgSend_feedType(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "feedType");
}

id objc_msgSend_feedUnsubscribedForCollectionViewCell_feed_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "feedUnsubscribedForCollectionViewCell:feed:");
}

id objc_msgSend_feedsInSection_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "feedsInSection:");
}

id objc_msgSend_feldsparContext(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "feldsparContext");
}

id objc_msgSend_feldsparID(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "feldsparID");
}

id objc_msgSend_fetchANFDocumentDataProviderWithPriority_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchANFDocumentDataProviderWithPriority:completion:");
}

id objc_msgSend_fetchAppConfigurationIfNeededWithCompletion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchAppConfigurationIfNeededWithCompletion:");
}

id objc_msgSend_fetchAppConfigurationIfNeededWithCompletionQueue_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchAppConfigurationIfNeededWithCompletionQueue:completion:");
}

id objc_msgSend_fetchContentForHeadline_completionQueue_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchContentForHeadline:completionQueue:completionHandler:");
}

id objc_msgSend_fetchEditorialConfiguration_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchEditorialConfiguration:");
}

id objc_msgSend_fetchEmbedConfigurationWithCompletion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchEmbedConfigurationWithCompletion:");
}

id objc_msgSend_fetchFlintDataProviderForHeadline_completionQueue_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchFlintDataProviderForHeadline:completionQueue:completionHandler:");
}

id objc_msgSend_fetchFontResourcesWithIdentifiers_downloadAssets_relativePriority_completionBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchFontResourcesWithIdentifiers:downloadAssets:relativePriority:completionBlock:");
}

id objc_msgSend_fetchHeadlineMetadataWithReply_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchHeadlineMetadataWithReply:");
}

id objc_msgSend_fetchLocalAreasProvider_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchLocalAreasProvider:");
}

id objc_msgSend_fetchMappingResourcesWithCompletionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchMappingResourcesWithCompletionHandler:");
}

id objc_msgSend_fetchObjectsUpToCount_qualityOfService_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchObjectsUpToCount:qualityOfService:completion:");
}

id objc_msgSend_fetchResourcesWithIdentifiers_downloadAssets_relativePriority_callBackQueue_completionBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchResourcesWithIdentifiers:downloadAssets:relativePriority:callBackQueue:completionBlock:");
}

id objc_msgSend_fetchSignalsFromBiomeWithSafariBlockoutDuration_maxExternalSignalEventCount_resultsBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchSignalsFromBiomeWithSafariBlockoutDuration:maxExternalSignalEventCount:resultsBlock:");
}

id objc_msgSend_fetchSubscribedTagsWithCallbackQueue_preferCache_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchSubscribedTagsWithCallbackQueue:preferCache:completion:");
}

id objc_msgSend_fetchTagForTagID_qualityOfService_callbackQueue_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchTagForTagID:qualityOfService:callbackQueue:completionHandler:");
}

id objc_msgSend_fetchTagsForTagIDs_qualityOfService_callbackQueue_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchTagsForTagIDs:qualityOfService:callbackQueue:completionHandler:");
}

id objc_msgSend_fetchTranslationProvider_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchTranslationProvider:");
}

id objc_msgSend_fetchWidgetLocalNewsChannelIDWithCompletion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchWidgetLocalNewsChannelIDWithCompletion:");
}

id objc_msgSend_fetchables(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchables");
}

id objc_msgSend_fetchedObject(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchedObject");
}

id objc_msgSend_fileCoordinatedTodayDropbox(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fileCoordinatedTodayDropbox");
}

id objc_msgSend_fileCoordinatedTodayPrivateDataTransactionQueue(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fileCoordinatedTodayPrivateDataTransactionQueue");
}

id objc_msgSend_fileExistsAtPath_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fileExistsAtPath:");
}

id objc_msgSend_fileExistsAtPath_isDirectory_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fileExistsAtPath:isDirectory:");
}

id objc_msgSend_fileModificationDate(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fileModificationDate");
}

id objc_msgSend_filePath(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "filePath");
}

id objc_msgSend_fileURL(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fileURL");
}

id objc_msgSend_fileURLWithPath_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fileURLWithPath:");
}

id objc_msgSend_fileURLWithPath_isDirectory_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fileURLWithPath:isDirectory:");
}

id objc_msgSend_fillWithBlendMode_alpha_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fillWithBlendMode:alpha:");
}

id objc_msgSend_filledRectForRect_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "filledRectForRect:");
}

id objc_msgSend_filledStateImage(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "filledStateImage");
}

id objc_msgSend_filterWithName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "filterWithName:");
}

id objc_msgSend_filterWithName_keysAndValues_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "filterWithName:keysAndValues:");
}

id objc_msgSend_filterWithName_withInputParameters_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "filterWithName:withInputParameters:");
}

id objc_msgSend_filterWithType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "filterWithType:");
}

id objc_msgSend_filteredArrayUsingPredicate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "filteredArrayUsingPredicate:");
}

id objc_msgSend_filters(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "filters");
}

id objc_msgSend_finalizeRestoreOfCachesDirectory(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "finalizeRestoreOfCachesDirectory");
}

id objc_msgSend_finishedExecuting(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "finishedExecuting");
}

id objc_msgSend_finishedExecutingWithFailure(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "finishedExecutingWithFailure");
}

id objc_msgSend_finishedPerformingOperationWithError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "finishedPerformingOperationWithError:");
}

id objc_msgSend_firstIndex(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "firstIndex");
}

id objc_msgSend_firstObject(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "firstObject");
}

id objc_msgSend_firstly_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "firstly:");
}

id objc_msgSend_flintDataProvider(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "flintDataProvider");
}

id objc_msgSend_flintDataProviderFactory(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "flintDataProviderFactory");
}

id objc_msgSend_flintDataProviderForANFContent_headline_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "flintDataProviderForANFContent:headline:");
}

id objc_msgSend_flintDocumentURLAssetHandlesByRemoteURL(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "flintDocumentURLAssetHandlesByRemoteURL");
}

id objc_msgSend_flintResourceManager(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "flintResourceManager");
}

id objc_msgSend_floatForKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "floatForKey:");
}

id objc_msgSend_floatValue(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "floatValue");
}

id objc_msgSend_flushContentWithArticleID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "flushContentWithArticleID:");
}

id objc_msgSend_fontCache(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fontCache");
}

id objc_msgSend_fontForChannelFeedsWhenInCardsOfSize_sizeCategory_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fontForChannelFeedsWhenInCardsOfSize:sizeCategory:");
}

id objc_msgSend_fontForTopicFeedsWhenInCardsOfSize_sizeCategory_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fontForTopicFeedsWhenInCardsOfSize:sizeCategory:");
}

id objc_msgSend_fontResourceIDs(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fontResourceIDs");
}

id objc_msgSend_fontResources(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fontResources");
}

id objc_msgSend_fontWithName_size_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fontWithName:size:");
}

id objc_msgSend_fontWithSize_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fontWithSize:");
}

id objc_msgSend_fontsToRegister(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fontsToRegister");
}

id objc_msgSend_foregroundColor(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "foregroundColor");
}

id objc_msgSend_forwardingTargetForSelector_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "forwardingTargetForSelector:");
}

id objc_msgSend_fr_NewsURLForTagID_title_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fr_NewsURLForTagID:title:");
}

id objc_msgSend_fr_accessibilityApplyLowerPitchTokenToRange_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fr_accessibilityApplyLowerPitchTokenToRange:");
}

id objc_msgSend_fr_accessibilityAttributedStringWithLowPitchPrefix_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fr_accessibilityAttributedStringWithLowPitchPrefix:");
}

id objc_msgSend_fr_accessibilityUndoInvertColorsIfNecessary(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fr_accessibilityUndoInvertColorsIfNecessary");
}

id objc_msgSend_fr_accessoryColorForTextColor_backgroundColor_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fr_accessoryColorForTextColor:backgroundColor:");
}

id objc_msgSend_fr_animateWithDuration_delay_timingFunction_options_animations_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fr_animateWithDuration:delay:timingFunction:options:animations:completion:");
}

id objc_msgSend_fr_articleOpenedFrom(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fr_articleOpenedFrom");
}

id objc_msgSend_fr_attributesLookup(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fr_attributesLookup");
}

id objc_msgSend_fr_barButtonItemView(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fr_barButtonItemView");
}

id objc_msgSend_fr_campaignID(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fr_campaignID");
}

id objc_msgSend_fr_campaignType(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fr_campaignType");
}

id objc_msgSend_fr_canHandleNavigationAction_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fr_canHandleNavigationAction:");
}

id objc_msgSend_fr_colorBin(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fr_colorBin");
}

id objc_msgSend_fr_colorComponentsFromString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fr_colorComponentsFromString:");
}

id objc_msgSend_fr_colorWithHue_saturation_lightness_alpha_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fr_colorWithHue:saturation:lightness:alpha:");
}

id objc_msgSend_fr_creativeID(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fr_creativeID");
}

id objc_msgSend_fr_croppedImageWithAspectRatio_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fr_croppedImageWithAspectRatio:");
}

id objc_msgSend_fr_deepLinkURL(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fr_deepLinkURL");
}

id objc_msgSend_fr_dynamicColor_withDarkStyleVariant_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fr_dynamicColor:withDarkStyleVariant:");
}

id objc_msgSend_fr_feldsparArticleIDWithAssetManager_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fr_feldsparArticleIDWithAssetManager:completion:");
}

id objc_msgSend_fr_feldsparInternalExtrasBundle(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fr_feldsparInternalExtrasBundle");
}

id objc_msgSend_fr_firstAncestorOfType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fr_firstAncestorOfType:");
}

id objc_msgSend_fr_fontForFeedHeaderType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fr_fontForFeedHeaderType:");
}

id objc_msgSend_fr_fontLookup(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fr_fontLookup");
}

id objc_msgSend_fr_fontWithName_size_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fr_fontWithName:size:");
}

id objc_msgSend_fr_gregorianShortDisplayString(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fr_gregorianShortDisplayString");
}

id objc_msgSend_fr_imageCroppedToCornerRadius_withBackgroundColor_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fr_imageCroppedToCornerRadius:withBackgroundColor:");
}

id objc_msgSend_fr_immediatelyLoadedImageWithData_scale_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fr_immediatelyLoadedImageWithData:scale:");
}

id objc_msgSend_fr_indexPathsForRows_inSection_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fr_indexPathsForRows:inSection:");
}

id objc_msgSend_fr_isFeldsparFavoritesPickerURL(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fr_isFeldsparFavoritesPickerURL");
}

id objc_msgSend_fr_isFeldsparForYouURL(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fr_isFeldsparForYouURL");
}

id objc_msgSend_fr_isFeldsparHistoryURL(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fr_isFeldsparHistoryURL");
}

id objc_msgSend_fr_isFeldsparOpenInNewsErrorURL(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fr_isFeldsparOpenInNewsErrorURL");
}

id objc_msgSend_fr_isFeldsparReferableURL(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fr_isFeldsparReferableURL");
}

id objc_msgSend_fr_isFeldsparSavedURL(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fr_isFeldsparSavedURL");
}

id objc_msgSend_fr_isFeldsparSpotlightURL(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fr_isFeldsparSpotlightURL");
}

id objc_msgSend_fr_isFeldsparTabURL(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fr_isFeldsparTabURL");
}

id objc_msgSend_fr_isFromSafariSearchWithSourceApplication_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fr_isFromSafariSearchWithSourceApplication:");
}

id objc_msgSend_fr_isHTTPScheme(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fr_isHTTPScheme");
}

id objc_msgSend_fr_isPreviewURL(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fr_isPreviewURL");
}

id objc_msgSend_fr_isStoreURL(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fr_isStoreURL");
}

id objc_msgSend_fr_isSubcriptionURL(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fr_isSubcriptionURL");
}

id objc_msgSend_fr_isSubscriptionURLForWebOptIn(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fr_isSubscriptionURLForWebOptIn");
}

id objc_msgSend_fr_isWebArchiveURL(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fr_isWebArchiveURL");
}

id objc_msgSend_fr_leadingForFeedHeaderType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fr_leadingForFeedHeaderType:");
}

id objc_msgSend_fr_opaqueImageWithFillColor_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fr_opaqueImageWithFillColor:");
}

id objc_msgSend_fr_orderedContentSizeCategories(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fr_orderedContentSizeCategories");
}

id objc_msgSend_fr_parentCollectionView(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fr_parentCollectionView");
}

id objc_msgSend_fr_partOfDay(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fr_partOfDay");
}

id objc_msgSend_fr_plusDEffectWithForegroundColor_backgroundColor_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fr_plusDEffectWithForegroundColor:backgroundColor:");
}

id objc_msgSend_fr_plusLEffectWithForegroundColor_backgroundColor_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fr_plusLEffectWithForegroundColor:backgroundColor:");
}

id objc_msgSend_fr_recolorLabelSubviewsWithColor_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fr_recolorLabelSubviewsWithColor:");
}

id objc_msgSend_fr_scaledImageWithMaximumSize_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fr_scaledImageWithMaximumSize:");
}

id objc_msgSend_fr_scaledImageWithMaximumSize_targetScale_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fr_scaledImageWithMaximumSize:targetScale:");
}

id objc_msgSend_fr_scaledValueForValue_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fr_scaledValueForValue:");
}

id objc_msgSend_fr_scaledValueForValue_scalingRate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fr_scaledValueForValue:scalingRate:");
}

id objc_msgSend_fr_searchBackgroundColor(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fr_searchBackgroundColor");
}

id objc_msgSend_fr_searchResultsCellDetailTextColor(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fr_searchResultsCellDetailTextColor");
}

id objc_msgSend_fr_searchResultsCellSelectedTintColor(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fr_searchResultsCellSelectedTintColor");
}

id objc_msgSend_fr_searchResultsCellTextColor(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fr_searchResultsCellTextColor");
}

id objc_msgSend_fr_selfOrFirstAncestorOfType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fr_selfOrFirstAncestorOfType:");
}

id objc_msgSend_fr_shouldTitlecaseForFeedHeaderType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fr_shouldTitlecaseForFeedHeaderType:");
}

id objc_msgSend_fr_stringByDecodingHTMLEntities(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fr_stringByDecodingHTMLEntities");
}

id objc_msgSend_fr_systemFontNameForWeight_condensed_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fr_systemFontNameForWeight:condensed:");
}

id objc_msgSend_fr_topicCardBorderColorForDarkBackground(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fr_topicCardBorderColorForDarkBackground");
}

id objc_msgSend_fr_topicCardBorderColorForLightBackground(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fr_topicCardBorderColorForLightBackground");
}

id objc_msgSend_fr_topicCardBorderColorForParentBackgroundColor_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fr_topicCardBorderColorForParentBackgroundColor:");
}

id objc_msgSend_fr_topicCardDividerColorForDarkBackground(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fr_topicCardDividerColorForDarkBackground");
}

id objc_msgSend_fr_topicCardDividerColorForLightBackground(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fr_topicCardDividerColorForLightBackground");
}

id objc_msgSend_fr_topicCardDividerColorForParentBackgroundColor_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fr_topicCardDividerColorForParentBackgroundColor:");
}

id objc_msgSend_fr_topicCardTextColorForDarkBackground(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fr_topicCardTextColorForDarkBackground");
}

id objc_msgSend_fr_topicCardTextColorForLightBackground(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fr_topicCardTextColorForLightBackground");
}

id objc_msgSend_fr_topicCardTextColorForParentBackgroundColor_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fr_topicCardTextColorForParentBackgroundColor:");
}

id objc_msgSend_fr_trackingForFeedHeaderType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fr_trackingForFeedHeaderType:");
}

id objc_msgSend_fr_widgetEngagementFileURL(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fr_widgetEngagementFileURL");
}

id objc_msgSend_fr_widgetModeGroupID(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fr_widgetModeGroupID");
}

id objc_msgSend_fr_widgetReferralItemWithQueryItemName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fr_widgetReferralItemWithQueryItemName:");
}

id objc_msgSend_frame(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "frame");
}

id objc_msgSend_functionWithControlPoints__::(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "functionWithControlPoints::::");
}

id objc_msgSend_generateDerivedData(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "generateDerivedData");
}

id objc_msgSend_generateDerivedDataWithMaxAggregateCount_qualityOfService_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "generateDerivedDataWithMaxAggregateCount:qualityOfService:completion:");
}

id objc_msgSend_generateUserEmbeddingIfNeededWithCompletion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "generateUserEmbeddingIfNeededWithCompletion:");
}

id objc_msgSend_generator(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "generator");
}

id objc_msgSend_getBytes_length_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getBytes:length:");
}

id objc_msgSend_getDeliveredNotificationsWithCompletionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getDeliveredNotificationsWithCompletionHandler:");
}

id objc_msgSend_getHue_saturation_brightness_alpha_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getHue:saturation:brightness:alpha:");
}

id objc_msgSend_getHue_saturation_lightness_alpha_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getHue:saturation:lightness:alpha:");
}

id objc_msgSend_getNotificationSettingsWithCompletionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getNotificationSettingsWithCompletionHandler:");
}

id objc_msgSend_getRed_green_blue_alpha_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getRed:green:blue:alpha:");
}

id objc_msgSend_getResourceValue_forKey_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getResourceValue:forKey:error:");
}

id objc_msgSend_gizmoPreferencesNotifierDidNoticeUpdate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "gizmoPreferencesNotifierDidNoticeUpdate:");
}

id objc_msgSend_gizmoSyncManager(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "gizmoSyncManager");
}

id objc_msgSend_gizmoSyncManager_fetchOperationForArticleIDs_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "gizmoSyncManager:fetchOperationForArticleIDs:");
}

id objc_msgSend_gradientLayerWithChin_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "gradientLayerWithChin:");
}

id objc_msgSend_grayColor(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "grayColor");
}

id objc_msgSend_green(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "green");
}

id objc_msgSend_gridSpacingForWidth_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "gridSpacingForWidth:");
}

id objc_msgSend_groupCancelHandlerWithCancelHandlers_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "groupCancelHandlerWithCancelHandlers:");
}

id objc_msgSend_groupType(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "groupType");
}

id objc_msgSend_groupableCandidates(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "groupableCandidates");
}

id objc_msgSend_groupableFavoriteTagIDs(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "groupableFavoriteTagIDs");
}

id objc_msgSend_groupableTagIDs(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "groupableTagIDs");
}

id objc_msgSend_handle_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "handle:");
}

id objc_msgSend_handleMigration(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "handleMigration");
}

id objc_msgSend_handleNotificationResponse_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "handleNotificationResponse:");
}

id objc_msgSend_handleOpenURL_options_analyticsReferral_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "handleOpenURL:options:analyticsReferral:");
}

id objc_msgSend_handleRemoteNotification_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "handleRemoteNotification:completionHandler:");
}

id objc_msgSend_hasArticleBeenMarkedAsOffensive_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hasArticleBeenMarkedAsOffensive:");
}

id objc_msgSend_hasArticleBeenSeen_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hasArticleBeenSeen:");
}

id objc_msgSend_hasArticleBeenVisited_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hasArticleBeenVisited:");
}

id objc_msgSend_hasBeenNotifiedOfApplicationLaunch(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hasBeenNotifiedOfApplicationLaunch");
}

id objc_msgSend_hasNotificationsEnabled(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hasNotificationsEnabled");
}

id objc_msgSend_hasNotificationsEnabledForTag_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hasNotificationsEnabledForTag:");
}

id objc_msgSend_hasNotificationsEnabledWithSubscriptionController_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hasNotificationsEnabledWithSubscriptionController:");
}

id objc_msgSend_hasPrefix_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hasPrefix:");
}

id objc_msgSend_hasSubscriptionToTag_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hasSubscriptionToTag:");
}

id objc_msgSend_hasTelephonyScheme(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hasTelephonyScheme");
}

id objc_msgSend_hash(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hash");
}

id objc_msgSend_hashTableWithOptions_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hashTableWithOptions:");
}

id objc_msgSend_headline(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "headline");
}

id objc_msgSend_headlineNotification_base64Image(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "headlineNotification_base64Image");
}

id objc_msgSend_headlineNotification_base64PublisherImage(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "headlineNotification_base64PublisherImage");
}

id objc_msgSend_headlineNotification_date(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "headlineNotification_date");
}

id objc_msgSend_headlineNotification_identifier(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "headlineNotification_identifier");
}

id objc_msgSend_headlineNotification_publisher(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "headlineNotification_publisher");
}

id objc_msgSend_headlineNotification_title(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "headlineNotification_title");
}

id objc_msgSend_headlineWithContentContext_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "headlineWithContentContext:");
}

id objc_msgSend_headlinesFetchOperationForArticleIDs_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "headlinesFetchOperationForArticleIDs:");
}

id objc_msgSend_hideCellHighlightState(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hideCellHighlightState");
}

id objc_msgSend_hideHighlightState(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hideHighlightState");
}

id objc_msgSend_highWaterMark(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "highWaterMark");
}

id objc_msgSend_highlightedScrimView(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "highlightedScrimView");
}

id objc_msgSend_historyItemsForArticleIDs_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "historyItemsForArticleIDs:");
}

id objc_msgSend_horizontalDividerWidthForCardSize_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "horizontalDividerWidthForCardSize:");
}

id objc_msgSend_host(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "host");
}

id objc_msgSend_iPad(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "iPad");
}

id objc_msgSend_iPhone(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "iPhone");
}

id objc_msgSend_iconImageIdentifier(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "iconImageIdentifier");
}

id objc_msgSend_iconImageView(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "iconImageView");
}

id objc_msgSend_iconSubscriptionButtonLike(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "iconSubscriptionButtonLike");
}

id objc_msgSend_iconSubscriptionButtonLikeHeart(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "iconSubscriptionButtonLikeHeart");
}

id objc_msgSend_iconSubscriptionButtonLikeOpaque(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "iconSubscriptionButtonLikeOpaque");
}

id objc_msgSend_iconSubscriptionButtonLikeSelected(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "iconSubscriptionButtonLikeSelected");
}

id objc_msgSend_iconSubscriptionButtonLikeSelectedHeart(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "iconSubscriptionButtonLikeSelectedHeart");
}

id objc_msgSend_iconSubscriptionButtonLikeSelectedOpaque(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "iconSubscriptionButtonLikeSelectedOpaque");
}

id objc_msgSend_identifier(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "identifier");
}

id objc_msgSend_ignoredTagIDs(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "ignoredTagIDs");
}

id objc_msgSend_image(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "image");
}

id objc_msgSend_imageCache(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "imageCache");
}

id objc_msgSend_imageCacheDirectory(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "imageCacheDirectory");
}

id objc_msgSend_imageCacheName(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "imageCacheName");
}

id objc_msgSend_imageCachePrefix(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "imageCachePrefix");
}

id objc_msgSend_imageFromData_size_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "imageFromData:size:");
}

id objc_msgSend_imageFromNewGraphicsContextWithSize_opaque_forceSRGB_scale_contextBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "imageFromNewGraphicsContextWithSize:opaque:forceSRGB:scale:contextBlock:");
}

id objc_msgSend_imageFromNewGraphicsContextWithSize_opaque_scale_contextBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "imageFromNewGraphicsContextWithSize:opaque:scale:contextBlock:");
}

id objc_msgSend_imageIdentifier(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "imageIdentifier");
}

id objc_msgSend_imageMaskOfSize_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "imageMaskOfSize:");
}

id objc_msgSend_imageNamed_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "imageNamed:");
}

id objc_msgSend_imageOrientation(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "imageOrientation");
}

id objc_msgSend_imageResourceForIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "imageResourceForIdentifier:");
}

id objc_msgSend_imageResourceResponseForFileURL_perserveColorSpace_withSize_andQuality_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "imageResourceResponseForFileURL:perserveColorSpace:withSize:andQuality:");
}

id objc_msgSend_imageUpdateOperation(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "imageUpdateOperation");
}

id objc_msgSend_imageWithActions_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "imageWithActions:");
}

id objc_msgSend_imageWithCGImage_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "imageWithCGImage:");
}

id objc_msgSend_imageWithCGImage_scale_orientation_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "imageWithCGImage:scale:orientation:");
}

id objc_msgSend_imageWithContentsOfFile_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "imageWithContentsOfFile:");
}

id objc_msgSend_imageWithData_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "imageWithData:");
}

id objc_msgSend_inScope_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "inScope:");
}

id objc_msgSend_indexDelegate(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "indexDelegate");
}

id objc_msgSend_indexGreaterThanIndex_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "indexGreaterThanIndex:");
}

id objc_msgSend_indexOfObject_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "indexOfObject:");
}

id objc_msgSend_indexOfObjectWithOptions_passingTest_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "indexOfObjectWithOptions:passingTest:");
}

id objc_msgSend_indexPath(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "indexPath");
}

id objc_msgSend_indexPathByRemovingLastIndex(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "indexPathByRemovingLastIndex");
}

id objc_msgSend_indexPathForRow_inSection_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "indexPathForRow:inSection:");
}

id objc_msgSend_indexPathInvalidatingIndexesFollowingPosition_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "indexPathInvalidatingIndexesFollowingPosition:");
}

id objc_msgSend_indexSearchableItems_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "indexSearchableItems:completionHandler:");
}

id objc_msgSend_indexSetWithIndexesInRange_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "indexSetWithIndexesInRange:");
}

id objc_msgSend_init(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "init");
}

id objc_msgSend_initFileURLWithPath_isDirectory_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initFileURLWithPath:isDirectory:");
}

id objc_msgSend_initForAvocadoIdentifier_inBundleIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initForAvocadoIdentifier:inBundleIdentifier:");
}

id objc_msgSend_initForTestingWithTagType_identifier_name_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initForTestingWithTagType:identifier:name:");
}

id objc_msgSend_initWithANFContent_headline_resourceManager_cloudContext_embedConfigurationManager_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithANFContent:headline:resourceManager:cloudContext:embedConfigurationManager:");
}

id objc_msgSend_initWithAccount_clearReadingHistoryManager_personalizationData_analyticsController_newsletterManager_userEventHistoryStorage_userActivityManager_clearableUserEmbedding_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithAccount:clearReadingHistoryManager:personalizationData:analyticsController:newsletterManager:userEventHistoryStorage:userActivityManager:clearableUserEmbedding:");
}

id objc_msgSend_initWithActivity_identifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithActivity:identifier:");
}

id objc_msgSend_initWithActivity_identifier_object_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithActivity:identifier:object:");
}

id objc_msgSend_initWithActivityIndicatorStyle_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithActivityIndicatorStyle:");
}

id objc_msgSend_initWithAggregates_scoringType_decayRate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithAggregates:scoringType:decayRate:");
}

id objc_msgSend_initWithAnalyticsController_appActivityMonitor_cloudContext_window_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithAnalyticsController:appActivityMonitor:cloudContext:window:");
}

id objc_msgSend_initWithAnalyticsReferralFactory_redirectService_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithAnalyticsReferralFactory:redirectService:");
}

id objc_msgSend_initWithAnalyticsReferralFactory_redirectService_routerManager_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithAnalyticsReferralFactory:redirectService:routerManager:");
}

id objc_msgSend_initWithAppActivationMonitor_configurationManager_networkBehaviorMonitor_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithAppActivationMonitor:configurationManager:networkBehaviorMonitor:");
}

id objc_msgSend_initWithAppActivityMonitor_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithAppActivityMonitor:");
}

id objc_msgSend_initWithAppConfigManager_andResourceManager_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithAppConfigManager:andResourceManager:");
}

id objc_msgSend_initWithAppConfigManager_readingList_readingHistory_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithAppConfigManager:readingList:readingHistory:");
}

id objc_msgSend_initWithAppConfigurationManager_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithAppConfigurationManager:");
}

id objc_msgSend_initWithAppConfigurationManager_tagController_subscriptionController_purchaseController_notificationManager_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithAppConfigurationManager:tagController:subscriptionController:purchaseController:notificationManager:");
}

id objc_msgSend_initWithAppSessionStartFromNotificationType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithAppSessionStartFromNotificationType:");
}

id objc_msgSend_initWithAppSessionStartMethod_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithAppSessionStartMethod:");
}

id objc_msgSend_initWithApplication_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithApplication:");
}

id objc_msgSend_initWithApplication_bridgedAppDelegate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithApplication:bridgedAppDelegate:");
}

id objc_msgSend_initWithArray_copyItems_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithArray:copyItems:");
}

id objc_msgSend_initWithArticleController_dataProviderFactory_articleEditorialItemProvider_editorialItemEntryManager_thumbnailCreator_editorialItemCreator_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithArticleController:dataProviderFactory:articleEditorialItemProvider:editorialItemEntryManager:thumbnailCreator:editorialItemCreator:");
}

id objc_msgSend_initWithArticleID_sourceChannelID_sectionData_flintDocumentAssetHandle_articleRecordData_sourceChannelRecordData_parentIssueRecordData_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithArticleID:sourceChannelID:sectionData:flintDocumentAssetHandle:articleRecordData:sourceChannelRecordData:parentIssueRecordData:");
}

id objc_msgSend_initWithArticlePayload_sourceChannel_assetManager_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithArticlePayload:sourceChannel:assetManager:");
}

id objc_msgSend_initWithArticleRecordData_sourceChannel_parentIssue_assetManager_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithArticleRecordData:sourceChannel:parentIssue:assetManager:");
}

id objc_msgSend_initWithAssetHandles_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithAssetHandles:");
}

id objc_msgSend_initWithAssetManager_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithAssetManager:");
}

id objc_msgSend_initWithBackgroundTaskable_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithBackgroundTaskable:");
}

id objc_msgSend_initWithBackgroundTaskable_applicationProxy_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithBackgroundTaskable:applicationProxy:");
}

id objc_msgSend_initWithBase64EncodedString_options_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithBase64EncodedString:options:");
}

id objc_msgSend_initWithBlockedReason_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithBlockedReason:");
}

id objc_msgSend_initWithCGImage_scale_orientation_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithCGImage:scale:orientation:");
}

id objc_msgSend_initWithCacheDirectory_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithCacheDirectory:");
}

id objc_msgSend_initWithCalendarIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithCalendarIdentifier:");
}

id objc_msgSend_initWithCapacity_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithCapacity:");
}

id objc_msgSend_initWithCapacity_dictionary_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithCapacity:dictionary:");
}

id objc_msgSend_initWithClientContext_presentingViewController_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithClientContext:presentingViewController:");
}

id objc_msgSend_initWithCloudContext_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithCloudContext:");
}

id objc_msgSend_initWithCloudContext_activityMonitor_editorialItemEntryManager_articleEditorialItemDownloader_tagEditorialItemDownloader_editorialConfigurationProvider_thumbnailCreator_ANFHelper_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithCloudContext:activityMonitor:editorialItemEntryManager:articleEditorialItemDownloader:tagEditorialItemDownloader:editorialConfigurationProvider:thumbnailCreator:ANFHelper:");
}

id objc_msgSend_initWithCloudContext_articleContentPool_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithCloudContext:articleContentPool:");
}

id objc_msgSend_initWithCloudContext_configurationManager_appActivityMonitor_networkBehaviorMonitor_offlineModeMonitor_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithCloudContext:configurationManager:appActivityMonitor:networkBehaviorMonitor:offlineModeMonitor:");
}

id objc_msgSend_initWithCloudContext_dataProviderFactory_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithCloudContext:dataProviderFactory:");
}

id objc_msgSend_initWithCloudContext_resourceManager_embedConfigurationManager_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithCloudContext:resourceManager:embedConfigurationManager:");
}

id objc_msgSend_initWithCloudContext_storePath_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithCloudContext:storePath:");
}

id objc_msgSend_initWithColor_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithColor:");
}

id objc_msgSend_initWithConfiguration_configurationManager_contentHostDirectory_privateDataHostDirectory_privateDataActionProvider_networkBehaviorMonitor_networkReachability_appActivityMonitor_desiredHeadlineFieldOptions_feedUsage_deviceIsiPad_backgroundTaskable_privateDataSyncAvailability_pptContext_options_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithConfiguration:configurationManager:contentHostDirectory:privateDataHostDirectory:privateDataActionProvider:networkBehaviorMonitor:networkReachability:appActivityMonitor:desiredHeadlineFieldOptions:feedUsage:deviceIsiPad:backgroundTaskable:privateDataSyncAvailability:pptContext:options:");
}

id objc_msgSend_initWithConfigurationManager_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithConfigurationManager:");
}

id objc_msgSend_initWithConfigurationManager_resourceManager_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithConfigurationManager:resourceManager:");
}

id objc_msgSend_initWithConstructor_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithConstructor:");
}

id objc_msgSend_initWithContentContext_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithContentContext:");
}

id objc_msgSend_initWithContentsOfURL_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithContentsOfURL:");
}

id objc_msgSend_initWithContext_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithContext:");
}

id objc_msgSend_initWithContext_ANFHelper_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithContext:ANFHelper:");
}

id objc_msgSend_initWithContext_ANFHelper_articleDownloadService_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithContext:ANFHelper:articleDownloadService:");
}

id objc_msgSend_initWithContext_ANFHelper_articleID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithContext:ANFHelper:articleID:");
}

id objc_msgSend_initWithContext_articleIDs_ignoreCacheForArticleIDs_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithContext:articleIDs:ignoreCacheForArticleIDs:");
}

id objc_msgSend_initWithContext_privateDataUpdateCoordinator_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithContext:privateDataUpdateCoordinator:");
}

id objc_msgSend_initWithContext_resourceIDs_downloadAssets_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithContext:resourceIDs:downloadAssets:");
}

id objc_msgSend_initWithContext_tag_feedConfiguration_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithContext:tag:feedConfiguration:");
}

id objc_msgSend_initWithContextConfiguration_contentHostDirectoryFileURL_feldsparIDProvider_appShortVersionString_buildNumberString_networkBehaviorMonitor_appActivityMonitor_applicationState_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithContextConfiguration:contentHostDirectoryFileURL:feldsparIDProvider:appShortVersionString:buildNumberString:networkBehaviorMonitor:appActivityMonitor:applicationState:");
}

id objc_msgSend_initWithCoreDuetLastQueryDate_portraitLastQueryDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithCoreDuetLastQueryDate:portraitLastQueryDate:");
}

id objc_msgSend_initWithData_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithData:");
}

id objc_msgSend_initWithData_context_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithData:context:");
}

id objc_msgSend_initWithData_encoding_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithData:encoding:");
}

id objc_msgSend_initWithData_sourceChannel_assetManager_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithData:sourceChannel:assetManager:");
}

id objc_msgSend_initWithDataSource_context_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithDataSource:context:");
}

id objc_msgSend_initWithDelegate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithDelegate:");
}

id objc_msgSend_initWithDelegate_delegateProtocol_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithDelegate:delegateProtocol:");
}

id objc_msgSend_initWithDelegate_maxConcurrentOperationCount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithDelegate:maxConcurrentOperationCount:");
}

id objc_msgSend_initWithDiagnosticDumpDir_diagnosticDumpNotificationName_log_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithDiagnosticDumpDir:diagnosticDumpNotificationName:log:");
}

id objc_msgSend_initWithDictionary_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithDictionary:");
}

id objc_msgSend_initWithEditorialItemEntryManager_thumbnailCreator_editorialItemCreator_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithEditorialItemEntryManager:thumbnailCreator:editorialItemCreator:");
}

id objc_msgSend_initWithEditorialItemID_title_subtitle_subtitleColorString_image_actionUrlString_lastModifiedDate_documentVersion_lastSeenDocumentVersion_showBadge_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithEditorialItemID:title:subtitle:subtitleColorString:image:actionUrlString:lastModifiedDate:documentVersion:lastSeenDocumentVersion:showBadge:");
}

id objc_msgSend_initWithEncodableElement_assetHandlesByRemoteURL_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithEncodableElement:assetHandlesByRemoteURL:");
}

id objc_msgSend_initWithEntryID_dictionaryRepresentation_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithEntryID:dictionaryRepresentation:");
}

id objc_msgSend_initWithEntryID_editorialItemID_title_subtitle_subtitleColorString_image_actionUrlString_lastModifiedDate_documentVersion_lastSeenDocumentVersion_showBadge_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithEntryID:editorialItemID:title:subtitle:subtitleColorString:image:actionUrlString:lastModifiedDate:documentVersion:lastSeenDocumentVersion:showBadge:");
}

id objc_msgSend_initWithExplicitlyEngagedStrings_explicitlyRejectedStrings_implicitlyEngagedStrings_implicitlyRejectedStrings_mappingId_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithExplicitlyEngagedStrings:explicitlyRejectedStrings:implicitlyEngagedStrings:implicitlyRejectedStrings:mappingId:");
}

id objc_msgSend_initWithFeed_size_punchThroughEffect_cornerRadius_scale_sizeCategory_parentBackgroundColor_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithFeed:size:punchThroughEffect:cornerRadius:scale:sizeCategory:parentBackgroundColor:");
}

id objc_msgSend_initWithFeedPersonalizer_purchaseController_subscriptionController_localNewsChannelService_bundleSubscriptionManager_personalizationDataGenerator_privateDataContext_userEmbeddingGenerator_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithFeedPersonalizer:purchaseController:subscriptionController:localNewsChannelService:bundleSubscriptionManager:personalizationDataGenerator:privateDataContext:userEmbeddingGenerator:");
}

id objc_msgSend_initWithFeldsparContext_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithFeldsparContext:");
}

id objc_msgSend_initWithFeldsparContext_amsPushHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithFeldsparContext:amsPushHandler:");
}

id objc_msgSend_initWithFeldsparContext_assetManager_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithFeldsparContext:assetManager:");
}

id objc_msgSend_initWithFeldsparContext_bridgedAppDelegate_window_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithFeldsparContext:bridgedAppDelegate:window:");
}

id objc_msgSend_initWithFeldsparContext_dataProviderFactory_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithFeldsparContext:dataProviderFactory:");
}

id objc_msgSend_initWithFeldsparContext_tags_delegate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithFeldsparContext:tags:delegate:");
}

id objc_msgSend_initWithFileURL_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithFileURL:");
}

id objc_msgSend_initWithFormat_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithFormat:");
}

id objc_msgSend_initWithFrame_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithFrame:");
}

id objc_msgSend_initWithGenerator_configurationManager_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithGenerator:configurationManager:");
}

id objc_msgSend_initWithHeadline_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithHeadline:");
}

id objc_msgSend_initWithHeadline_component_priority_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithHeadline:component:priority:");
}

id objc_msgSend_initWithIdentifier_displayString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithIdentifier:displayString:");
}

id objc_msgSend_initWithIdentifier_shareURL_JSONData_resourceDataSource_host_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithIdentifier:shareURL:JSONData:resourceDataSource:host:error:");
}

id objc_msgSend_initWithIdentifier_title_subtitle_subtitleColor_attributes_actionURL_thumbnailImage_backingTag_headline_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithIdentifier:title:subtitle:subtitleColor:attributes:actionURL:thumbnailImage:backingTag:headline:");
}

id objc_msgSend_initWithIdentifier_title_subtitle_subtitleColorString_actionUrlString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithIdentifier:title:subtitle:subtitleColorString:actionUrlString:");
}

id objc_msgSend_initWithImage_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithImage:");
}

id objc_msgSend_initWithImageIdentifier_imageQualities_url_size_preserveColorspace_loadingBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithImageIdentifier:imageQualities:url:size:preserveColorspace:loadingBlock:");
}

id objc_msgSend_initWithItemContentType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithItemContentType:");
}

id objc_msgSend_initWithItemProvider_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithItemProvider:");
}

id objc_msgSend_initWithJSONArray_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithJSONArray:");
}

id objc_msgSend_initWithKeyValueStore_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithKeyValueStore:");
}

id objc_msgSend_initWithLoadJSONOnce_loadFontsOnce_loadAssetURLsOnce_loadAssetsOnce_loadLinkedContentOnce_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithLoadJSONOnce:loadFontsOnce:loadAssetURLsOnce:loadAssetsOnce:loadLinkedContentOnce:");
}

id objc_msgSend_initWithLocalStore_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithLocalStore:");
}

id objc_msgSend_initWithMachServiceName_options_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithMachServiceName:options:");
}

id objc_msgSend_initWithName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithName:");
}

id objc_msgSend_initWithName_directory_version_options_classRegistry_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithName:directory:version:options:classRegistry:");
}

id objc_msgSend_initWithName_target_selector_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithName:target:selector:");
}

id objc_msgSend_initWithNavigator_feldsparContext_cloudContext_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithNavigator:feldsparContext:cloudContext:");
}

id objc_msgSend_initWithNetworkReachability_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithNetworkReachability:");
}

id objc_msgSend_initWithNewsAppConfigurationManager_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithNewsAppConfigurationManager:");
}

id objc_msgSend_initWithNewsUserInfo_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithNewsUserInfo:");
}

id objc_msgSend_initWithNibName_bundle_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithNibName:bundle:");
}

id objc_msgSend_initWithObject_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithObject:");
}

id objc_msgSend_initWithObjects_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithObjects:");
}

id objc_msgSend_initWithOptions_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithOptions:");
}

id objc_msgSend_initWithPBBundleIDMapping_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithPBBundleIDMapping:");
}

id objc_msgSend_initWithPBFavorabilityScores_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithPBFavorabilityScores:");
}

id objc_msgSend_initWithPBPersonalizationWhitelist_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithPBPersonalizationWhitelist:");
}

id objc_msgSend_initWithPBURLMapping_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithPBURLMapping:");
}

id objc_msgSend_initWithPath_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithPath:");
}

id objc_msgSend_initWithPersistenceEnabled_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithPersistenceEnabled:");
}

id objc_msgSend_initWithPrivateDataActionProvider_defaultsDataDestructionItems_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithPrivateDataActionProvider:defaultsDataDestructionItems:");
}

id objc_msgSend_initWithQualityOfService_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithQualityOfService:");
}

id objc_msgSend_initWithQueue_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithQueue:");
}

id objc_msgSend_initWithResolver_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithResolver:");
}

id objc_msgSend_initWithResolver_appConfigManager_privateDataContext_subscriptionController_privateDataUpdateCoordinator_todayAgent_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithResolver:appConfigManager:privateDataContext:subscriptionController:privateDataUpdateCoordinator:todayAgent:");
}

id objc_msgSend_initWithSelectedArticleID_articleIDs_prefetchedHeadlines_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithSelectedArticleID:articleIDs:prefetchedHeadlines:");
}

id objc_msgSend_initWithSize_format_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithSize:format:");
}

id objc_msgSend_initWithStoreDirectoryFileURL_appActivityMonitor_backgroundTaskable_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithStoreDirectoryFileURL:appActivityMonitor:backgroundTaskable:");
}

id objc_msgSend_initWithString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithString:");
}

id objc_msgSend_initWithString_attributes_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithString:attributes:");
}

id objc_msgSend_initWithStyle_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithStyle:");
}

id objc_msgSend_initWithTagController_editorialItemEntryManager_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithTagController:editorialItemEntryManager:");
}

id objc_msgSend_initWithTagRanker_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithTagRanker:");
}

id objc_msgSend_initWithTarget_action_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithTarget:action:");
}

id objc_msgSend_initWithTarget_selector_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithTarget:selector:");
}

id objc_msgSend_initWithThumbnailCreator_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithThumbnailCreator:");
}

id objc_msgSend_initWithURL_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithURL:");
}

id objc_msgSend_initWithURL_resolvingAgainstBaseURL_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithURL:resolvingAgainstBaseURL:");
}

id objc_msgSend_initWithUniqueIdentifier_domainIdentifier_attributeSet_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithUniqueIdentifier:domainIdentifier:attributeSet:");
}

id objc_msgSend_initWithUrl_title_sourceApplication_previousArticleID_previousArticleVersion_adPreviewSessionID_adPreviewID_adQToken_maximumAdRequestsForCurrentAdPreviewID_userActionDate_presentationReason_notificationID_notificationSenderChannelID_referral_shouldAutoPlayVideo_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithUrl:title:sourceApplication:previousArticleID:previousArticleVersion:adPreviewSessionID:adPreviewID:adQToken:maximumAdRequestsForCurrentAdPreviewID:userActionDate:presentationReason:notificationID:notificationSenderChannelID:referral:shouldAutoPlayVideo:");
}

id objc_msgSend_initWithUserActivityType_creativeID_campaignID_campaignType_referringApplication_referringURL_appOpenedByUserActivity_widgetModeGroupID_widgetEngagement_appSessionStartMethod_appSessionStartNotificationType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithUserActivityType:creativeID:campaignID:campaignType:referringApplication:referringURL:appOpenedByUserActivity:widgetModeGroupID:widgetEngagement:appSessionStartMethod:appSessionStartNotificationType:");
}

id objc_msgSend_initWithUserDefaults_domainName_stickyKeys_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithUserDefaults:domainName:stickyKeys:");
}

id objc_msgSend_initWithUserInfo_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithUserInfo:");
}

id objc_msgSend_initWithValueClassBlock_objectValueClassBlock_purgeBlock_andJSONObject_andVersion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithValueClassBlock:objectValueClassBlock:purgeBlock:andJSONObject:andVersion:");
}

id objc_msgSend_initWithVersionHelpers_appActivityMonitor_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithVersionHelpers:appActivityMonitor:");
}

id objc_msgSend_initWithWithXS_S_M_L_XL_XXL_XXXL_AM_AL_AXL_AXXL_AXXXL_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithWithXS:S:M:L:XL:XXL:XXXL:AM:AL:AXL:AXXL:AXXXL:");
}

id objc_msgSend_initializeLoadingGroup(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initializeLoadingGroup");
}

id objc_msgSend_insertItemsAtIndexPaths_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "insertItemsAtIndexPaths:");
}

id objc_msgSend_insertObject_atIndex_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "insertObject:atIndex:");
}

id objc_msgSend_insertSections_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "insertSections:");
}

id objc_msgSend_insertedIndexPaths(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "insertedIndexPaths");
}

id objc_msgSend_insertedSections(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "insertedSections");
}

id objc_msgSend_insetForFeed_sizeCategory_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "insetForFeed:sizeCategory:");
}

id objc_msgSend_insetsForCollectionViewBounds_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "insetsForCollectionViewBounds:");
}

id objc_msgSend_instancesRespondToSelector_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "instancesRespondToSelector:");
}

id objc_msgSend_intValue(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "intValue");
}

id objc_msgSend_integerForKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "integerForKey:");
}

id objc_msgSend_integerValue(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "integerValue");
}

id objc_msgSend_interestTokens(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "interestTokens");
}

id objc_msgSend_interests(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "interests");
}

id objc_msgSend_interfaceOrientation(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "interfaceOrientation");
}

id objc_msgSend_interfaceWithProtocol_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "interfaceWithProtocol:");
}

id objc_msgSend_internalSignalAutoFavoriteCandidates(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "internalSignalAutoFavoriteCandidates");
}

id objc_msgSend_internalUsageSignalWeight(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "internalUsageSignalWeight");
}

id objc_msgSend_invalidate(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "invalidate");
}

id objc_msgSend_invalidateLayout(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "invalidateLayout");
}

id objc_msgSend_isANFDocumentCached(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isANFDocumentCached");
}

id objc_msgSend_isActive(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isActive");
}

id objc_msgSend_isAddable(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isAddable");
}

id objc_msgSend_isAlertPresentationIntervalPassed(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isAlertPresentationIntervalPassed");
}

id objc_msgSend_isAnimating(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isAnimating");
}

id objc_msgSend_isAppUpdateRequired(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isAppUpdateRequired");
}

id objc_msgSend_isArticleOnReadingList_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isArticleOnReadingList:");
}

id objc_msgSend_isAtEnd(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isAtEnd");
}

id objc_msgSend_isAvailable(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isAvailable");
}

id objc_msgSend_isBackedByAnyRecordZoneIDsInSet_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isBackedByAnyRecordZoneIDsInSet:");
}

id objc_msgSend_isBackgroundFetchEnabled(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isBackgroundFetchEnabled");
}

id objc_msgSend_isCancelled(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isCancelled");
}

id objc_msgSend_isCloudKitReachable(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isCloudKitReachable");
}

id objc_msgSend_isDateInToday_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isDateInToday:");
}

id objc_msgSend_isDateInYesterday_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isDateInYesterday:");
}

id objc_msgSend_isDecelerating(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isDecelerating");
}

id objc_msgSend_isDeleted(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isDeleted");
}

id objc_msgSend_isDeviceAbandoned(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isDeviceAbandoned");
}

id objc_msgSend_isDeviceLocked(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isDeviceLocked");
}

id objc_msgSend_isDirty(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isDirty");
}

id objc_msgSend_isDocumentLocallyAvailable(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isDocumentLocallyAvailable");
}

id objc_msgSend_isDragging(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isDragging");
}

id objc_msgSend_isEnabled(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isEnabled");
}

id objc_msgSend_isEqual_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isEqual:");
}

id objc_msgSend_isEqualToNumber_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isEqualToNumber:");
}

id objc_msgSend_isEqualToString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isEqualToString:");
}

id objc_msgSend_isFaceTimeAudioURL(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isFaceTimeAudioURL");
}

id objc_msgSend_isFaceTimeURL(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isFaceTimeURL");
}

id objc_msgSend_isHeadlineDraggable_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isHeadlineDraggable:");
}

id objc_msgSend_isHidden(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isHidden");
}

id objc_msgSend_isHighlighted(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isHighlighted");
}

id objc_msgSend_isLowDataModeEnabled(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isLowDataModeEnabled");
}

id objc_msgSend_isLowPowerModeEnabled(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isLowPowerModeEnabled");
}

id objc_msgSend_isMainFrame(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isMainFrame");
}

id objc_msgSend_isMainThread(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isMainThread");
}

id objc_msgSend_isNetworkReachable(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isNetworkReachable");
}

id objc_msgSend_isOSUpdateRequired(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isOSUpdateRequired");
}

id objc_msgSend_isOn(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isOn");
}

id objc_msgSend_isOnDisk(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isOnDisk");
}

id objc_msgSend_isPaid(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isPaid");
}

id objc_msgSend_isPrefetchDisabled(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isPrefetchDisabled");
}

id objc_msgSend_isPresenting(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isPresenting");
}

id objc_msgSend_isPresentingAlert(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isPresentingAlert");
}

id objc_msgSend_isPrivateDataSyncingEnabled(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isPrivateDataSyncingEnabled");
}

id objc_msgSend_isPromotingEnabled(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isPromotingEnabled");
}

id objc_msgSend_isRemovable(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isRemovable");
}

id objc_msgSend_isRunningInSupportedRegion(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isRunningInSupportedRegion");
}

id objc_msgSend_isRunningPPT(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isRunningPPT");
}

id objc_msgSend_isRunningTest(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isRunningTest");
}

id objc_msgSend_isSelected(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isSelected");
}

id objc_msgSend_isSports(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isSports");
}

id objc_msgSend_isSpringboardHandledURL(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isSpringboardHandledURL");
}

id objc_msgSend_isSubscribable(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isSubscribable");
}

id objc_msgSend_isSubscribedTo(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isSubscribedTo");
}

id objc_msgSend_isSubscribedToWithSubscriptionController_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isSubscribedToWithSubscriptionController:");
}

id objc_msgSend_isTagAllowed_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isTagAllowed:");
}

id objc_msgSend_isTagIDWhitelistedForNotifications_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isTagIDWhitelistedForNotifications:");
}

id objc_msgSend_isUIAutomationRunning(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isUIAutomationRunning");
}

id objc_msgSend_isUpdateRequired(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isUpdateRequired");
}

id objc_msgSend_isUserIDLoaded(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isUserIDLoaded");
}

id objc_msgSend_isValid(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isValid");
}

id objc_msgSend_isViewLoaded(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isViewLoaded");
}

id objc_msgSend_issueReadingHistory(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "issueReadingHistory");
}

id objc_msgSend_item(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "item");
}

id objc_msgSend_itemChangeDelegate(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "itemChangeDelegate");
}

id objc_msgSend_itemSize(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "itemSize");
}

id objc_msgSend_items(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "items");
}

id objc_msgSend_jsonEncodableObject(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "jsonEncodableObject");
}

id objc_msgSend_keyForColor_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "keyForColor:");
}

id objc_msgSend_keyForIdentifier_size_cornerRadius_punchThroughBanner_scale_sizeCategory_parentBackgroundColor_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "keyForIdentifier:size:cornerRadius:punchThroughBanner:scale:sizeCategory:parentBackgroundColor:");
}

id objc_msgSend_keyValueStore(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "keyValueStore");
}

id objc_msgSend_keyWindow(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "keyWindow");
}

id objc_msgSend_key_window(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "key_window");
}

id objc_msgSend_keyboardInputMonitor(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "keyboardInputMonitor");
}

id objc_msgSend_knownTags(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "knownTags");
}

id objc_msgSend_label(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "label");
}

id objc_msgSend_lastAppOpenDate(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "lastAppOpenDate");
}

id objc_msgSend_lastAppUsageAutoFavoriteResults(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "lastAppUsageAutoFavoriteResults");
}

id objc_msgSend_lastExternalSignalProcessingDate(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "lastExternalSignalProcessingDate");
}

id objc_msgSend_lastInternalSignalAutoFavorites(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "lastInternalSignalAutoFavorites");
}

id objc_msgSend_lastInternalSignalGroupableFavorites(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "lastInternalSignalGroupableFavorites");
}

id objc_msgSend_lastInternalSignalProcessingDate(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "lastInternalSignalProcessingDate");
}

id objc_msgSend_lastLocationAutoFavoriteResults(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "lastLocationAutoFavoriteResults");
}

id objc_msgSend_lastModified(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "lastModified");
}

id objc_msgSend_lastModifiedDate(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "lastModifiedDate");
}

id objc_msgSend_lastNotificationPayloadInfo(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "lastNotificationPayloadInfo");
}

id objc_msgSend_lastObject(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "lastObject");
}

id objc_msgSend_lastPathComponent(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "lastPathComponent");
}

id objc_msgSend_lastPortraitAutoFavoriteResults(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "lastPortraitAutoFavoriteResults");
}

id objc_msgSend_lastSafariAutoFavoriteResults(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "lastSafariAutoFavoriteResults");
}

id objc_msgSend_lastSeenDocumentVersion(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "lastSeenDocumentVersion");
}

id objc_msgSend_lastVisitedDateForArticleID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "lastVisitedDateForArticleID:");
}

id objc_msgSend_launchURLAction(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "launchURLAction");
}

id objc_msgSend_launchedToTest(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "launchedToTest");
}

id objc_msgSend_layer(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "layer");
}

id objc_msgSend_layoutFrame(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "layoutFrame");
}

id objc_msgSend_lazyBundleIDMapping(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "lazyBundleIDMapping");
}

id objc_msgSend_lazyFavorabilityScores(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "lazyFavorabilityScores");
}

id objc_msgSend_lazyURLMapping(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "lazyURLMapping");
}

id objc_msgSend_lazyWhitelist(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "lazyWhitelist");
}

id objc_msgSend_length(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "length");
}

id objc_msgSend_lightColor(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "lightColor");
}

id objc_msgSend_lineHeightForSize_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "lineHeightForSize:");
}

id objc_msgSend_lineWidth(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "lineWidth");
}

id objc_msgSend_linkedArticleIDs(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "linkedArticleIDs");
}

id objc_msgSend_linkedHeadlines(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "linkedHeadlines");
}

id objc_msgSend_load(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "load");
}

id objc_msgSend_loadAnimatedImageFromImageData_size_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "loadAnimatedImageFromImageData:size:");
}

id objc_msgSend_loadArticleMetadataWithHeadline_editorialItemFromCache_content_articleModifiedDate_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "loadArticleMetadataWithHeadline:editorialItemFromCache:content:articleModifiedDate:completion:");
}

id objc_msgSend_loadAssetURLsOnce(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "loadAssetURLsOnce");
}

id objc_msgSend_loadAssetURLsWithCompletionBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "loadAssetURLsWithCompletionBlock:");
}

id objc_msgSend_loadAssetsOnce(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "loadAssetsOnce");
}

id objc_msgSend_loadAssetsWithCompletionBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "loadAssetsWithCompletionBlock:");
}

id objc_msgSend_loadContextWithCompletionBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "loadContextWithCompletionBlock:");
}

id objc_msgSend_loadFeldsparIDWithCompletion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "loadFeldsparIDWithCompletion:");
}

id objc_msgSend_loadFontsOnce(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "loadFontsOnce");
}

id objc_msgSend_loadFontsWithCompletionBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "loadFontsWithCompletionBlock:");
}

id objc_msgSend_loadImagesForImageRequest_completionBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "loadImagesForImageRequest:completionBlock:");
}

id objc_msgSend_loadJSONOnce(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "loadJSONOnce");
}

id objc_msgSend_loadJSONWithCompletionBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "loadJSONWithCompletionBlock:");
}

id objc_msgSend_loadLinkedContentOnce(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "loadLinkedContentOnce");
}

id objc_msgSend_loadLinkedContentWithCompletionBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "loadLinkedContentWithCompletionBlock:");
}

id objc_msgSend_loadOrRegenerateUserID(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "loadOrRegenerateUserID");
}

id objc_msgSend_loadOrRegenerateUserStartDate(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "loadOrRegenerateUserStartDate");
}

id objc_msgSend_loadStoreFrontWithCompletionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "loadStoreFrontWithCompletionHandler:");
}

id objc_msgSend_loadedConfiguration(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "loadedConfiguration");
}

id objc_msgSend_loadingBlock(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "loadingBlock");
}

id objc_msgSend_loadingFont(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "loadingFont");
}

id objc_msgSend_loadingGroup(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "loadingGroup");
}

id objc_msgSend_loadingLabelSize(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "loadingLabelSize");
}

id objc_msgSend_loadingText(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "loadingText");
}

id objc_msgSend_localAreasManager(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "localAreasManager");
}

id objc_msgSend_localNewsChannelService(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "localNewsChannelService");
}

id objc_msgSend_localStore(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "localStore");
}

id objc_msgSend_localizedDescription(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "localizedDescription");
}

id objc_msgSend_localizedName(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "localizedName");
}

id objc_msgSend_localizedStringForKey_value_table_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "localizedStringForKey:value:table:");
}

id objc_msgSend_localizedStringWithFormat_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "localizedStringWithFormat:");
}

id objc_msgSend_locationAutoFavoriteCandidates(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "locationAutoFavoriteCandidates");
}

id objc_msgSend_locationManager(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "locationManager");
}

id objc_msgSend_locationObserver(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "locationObserver");
}

id objc_msgSend_locations(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "locations");
}

id objc_msgSend_lock(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "lock");
}

id objc_msgSend_logPPMessage_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "logPPMessage:");
}

id objc_msgSend_logoDownloadOperation(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "logoDownloadOperation");
}

id objc_msgSend_logoImageAssetHandle(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "logoImageAssetHandle");
}

id objc_msgSend_logoInsetsForBannerSize_logoAspectRatio_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "logoInsetsForBannerSize:logoAspectRatio:");
}

id objc_msgSend_lowercaseString(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "lowercaseString");
}

id objc_msgSend_mainBundle(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "mainBundle");
}

id objc_msgSend_mainQueue(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "mainQueue");
}

id objc_msgSend_mainScreen(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "mainScreen");
}

id objc_msgSend_markAllPrivateDataControllersAsNeedingUpdate(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "markAllPrivateDataControllersAsNeedingUpdate");
}

id objc_msgSend_markArticleAsReadWithHeadline_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "markArticleAsReadWithHeadline:");
}

id objc_msgSend_markArticleAsSeenWithHeadline_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "markArticleAsSeenWithHeadline:");
}

id objc_msgSend_markArticleIdentifiersAsSaved_articleIdentifiersAsNotSaved_withReply_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "markArticleIdentifiersAsSaved:articleIdentifiersAsNotSaved:withReply:");
}

id objc_msgSend_markAsDirty(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "markAsDirty");
}

id objc_msgSend_marketingNotificationsEnabled(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "marketingNotificationsEnabled");
}

id objc_msgSend_maskLookupTable(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "maskLookupTable");
}

id objc_msgSend_materialBlurRadius(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "materialBlurRadius");
}

id objc_msgSend_materialColorAlpha(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "materialColorAlpha");
}

id objc_msgSend_max(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "max");
}

id objc_msgSend_maxExternalSignalEventCount(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "maxExternalSignalEventCount");
}

id objc_msgSend_maxForKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "maxForKey:");
}

id objc_msgSend_maxNumberOfPages(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "maxNumberOfPages");
}

id objc_msgSend_maxNumberOfSuggestions(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "maxNumberOfSuggestions");
}

id objc_msgSend_maxScreenSide(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "maxScreenSide");
}

id objc_msgSend_maybeConsiderPortrait(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "maybeConsiderPortrait");
}

id objc_msgSend_maybeUpdateOnboardingVersion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "maybeUpdateOnboardingVersion:");
}

id objc_msgSend_mergedData(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "mergedData");
}

id objc_msgSend_message(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "message");
}

id objc_msgSend_metadata(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "metadata");
}

id objc_msgSend_metricMultiplierForTagID_withPriorFactorExponent_tagFavorabilityExponent_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "metricMultiplierForTagID:withPriorFactorExponent:tagFavorabilityExponent:");
}

id objc_msgSend_metricsForTextStyle_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "metricsForTextStyle:");
}

id objc_msgSend_min(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "min");
}

id objc_msgSend_minForKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "minForKey:");
}

id objc_msgSend_minScreenSide(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "minScreenSide");
}

id objc_msgSend_minimumBackgroundFetchInterval(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "minimumBackgroundFetchInterval");
}

id objc_msgSend_minimumLineSpacing(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "minimumLineSpacing");
}

id objc_msgSend_minimumOSVersionNumberForUpdate(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "minimumOSVersionNumberForUpdate");
}

id objc_msgSend_minimumOSVersionStringForUpdate(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "minimumOSVersionStringForUpdate");
}

id objc_msgSend_minimumVersionNumber(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "minimumVersionNumber");
}

id objc_msgSend_minimumVersionString(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "minimumVersionString");
}

id objc_msgSend_minusSet_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "minusSet:");
}

id objc_msgSend_mode(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "mode");
}

id objc_msgSend_month(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "month");
}

id objc_msgSend_mostFrequentLocation(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "mostFrequentLocation");
}

id objc_msgSend_mostFrequentlyVisitedTags(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "mostFrequentlyVisitedTags");
}

id objc_msgSend_mostRecentlyReadArticlesWithMaxCount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "mostRecentlyReadArticlesWithMaxCount:");
}

id objc_msgSend_moveItemAtURL_toURL_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "moveItemAtURL:toURL:error:");
}

id objc_msgSend_movedIndexPaths(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "movedIndexPaths");
}

id objc_msgSend_movedSections(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "movedSections");
}

id objc_msgSend_mutableCopy(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "mutableCopy");
}

id objc_msgSend_mutableTags(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "mutableTags");
}

id objc_msgSend_mutedTagIDs(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "mutedTagIDs");
}

id objc_msgSend_myEncodableElement(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "myEncodableElement");
}

id objc_msgSend_name(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "name");
}

id objc_msgSend_nameCompact(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "nameCompact");
}

id objc_msgSend_navigateToNotificationSettings(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "navigateToNotificationSettings");
}

id objc_msgSend_navigateToSpotlight(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "navigateToSpotlight");
}

id objc_msgSend_navigateWithActivityData_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "navigateWithActivityData:");
}

id objc_msgSend_navigateWithoutAnimationWithActivityData_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "navigateWithoutAnimationWithActivityData:");
}

id objc_msgSend_navigationType(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "navigationType");
}

id objc_msgSend_navigator(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "navigator");
}

id objc_msgSend_ne_color(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "ne_color");
}

id objc_msgSend_needsRapidUpdates(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "needsRapidUpdates");
}

id objc_msgSend_networkBehaviorMonitor(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "networkBehaviorMonitor");
}

id objc_msgSend_networkReachability(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "networkReachability");
}

id objc_msgSend_newFavoriteNotificationAlertsFrequency(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "newFavoriteNotificationAlertsFrequency");
}

id objc_msgSend_newsUserInfo(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "newsUserInfo");
}

id objc_msgSend_newsUserInfoLock(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "newsUserInfoLock");
}

id objc_msgSend_newsletterManager(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "newsletterManager");
}

id objc_msgSend_nextObject(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "nextObject");
}

id objc_msgSend_nf_object_isEqualToObject_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "nf_object:isEqualToObject:");
}

id objc_msgSend_nf_objectsForKeysWithoutMarker_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "nf_objectsForKeysWithoutMarker:");
}

id objc_msgSend_nonDestructiveHaveBeenConsumed(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "nonDestructiveHaveBeenConsumed");
}

id objc_msgSend_notification(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "notification");
}

id objc_msgSend_notificationArticleCacheTimeout(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "notificationArticleCacheTimeout");
}

id objc_msgSend_notificationArticleWithRapidUpdatesCacheTimeout(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "notificationArticleWithRapidUpdatesCacheTimeout");
}

id objc_msgSend_notificationAutoEnableHelper(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "notificationAutoEnableHelper");
}

id objc_msgSend_notificationBadgeImage(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "notificationBadgeImage");
}

id objc_msgSend_notificationController(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "notificationController");
}

id objc_msgSend_notificationManager(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "notificationManager");
}

id objc_msgSend_notificationManagerDidHandleNotificationResponse_withAnalyticsReferral_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "notificationManagerDidHandleNotificationResponse:withAnalyticsReferral:");
}

id objc_msgSend_notificationManagerFailedToHandleRemoteNotification_reason_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "notificationManagerFailedToHandleRemoteNotification:reason:");
}

id objc_msgSend_notificationSenderChannelID(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "notificationSenderChannelID");
}

id objc_msgSend_notificationSettings(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "notificationSettings");
}

id objc_msgSend_notificationUIEnabled(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "notificationUIEnabled");
}

id objc_msgSend_notificationWithName_object_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "notificationWithName:object:");
}

id objc_msgSend_notificationsBadgeButton(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "notificationsBadgeButton");
}

id objc_msgSend_notificationsConfig(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "notificationsConfig");
}

id objc_msgSend_notificationsConfiguration(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "notificationsConfiguration");
}

id objc_msgSend_notificationsEnabled(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "notificationsEnabled");
}

id objc_msgSend_notifyDeviceTokenIsAvailable_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "notifyDeviceTokenIsAvailable:");
}

id objc_msgSend_notifyWhenUserIDHasBeenDeterminedWithBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "notifyWhenUserIDHasBeenDeterminedWithBlock:");
}

id objc_msgSend_nss_NewsURLForArticleID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "nss_NewsURLForArticleID:");
}

id objc_msgSend_nss_NewsURLForArticleID_title_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "nss_NewsURLForArticleID:title:");
}

id objc_msgSend_nss_NewsURLForMyMagazines(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "nss_NewsURLForMyMagazines");
}

id objc_msgSend_nss_NewsURLWithPathComponents_internal_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "nss_NewsURLWithPathComponents:internal:");
}

id objc_msgSend_nss_campaignID(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "nss_campaignID");
}

id objc_msgSend_nss_gregorianDescriptionWithFlags_options_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "nss_gregorianDescriptionWithFlags:options:completion:");
}

id objc_msgSend_nss_isNewsURL(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "nss_isNewsURL");
}

id objc_msgSend_null(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "null");
}

id objc_msgSend_numEventsToDisableDefaultTopics(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "numEventsToDisableDefaultTopics");
}

id objc_msgSend_numSubscriptionsToDisableDefaultTopics(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "numSubscriptionsToDisableDefaultTopics");
}

id objc_msgSend_numberOfColumnsForCollectionViewBounds_isCompact_orientation_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "numberOfColumnsForCollectionViewBounds:isCompact:orientation:");
}

id objc_msgSend_numberOfItemsInSection_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "numberOfItemsInSection:");
}

id objc_msgSend_numberOfItemsPerPage(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "numberOfItemsPerPage");
}

id objc_msgSend_numberWithBool_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "numberWithBool:");
}

id objc_msgSend_numberWithDouble_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "numberWithDouble:");
}

id objc_msgSend_numberWithInteger_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "numberWithInteger:");
}

id objc_msgSend_numberWithLong_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "numberWithLong:");
}

id objc_msgSend_numberWithUnsignedInteger_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "numberWithUnsignedInteger:");
}

id objc_msgSend_object(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "object");
}

id objc_msgSend_objectAtIndex_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "objectAtIndex:");
}

id objc_msgSend_objectAtIndexedSubscript_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "objectAtIndexedSubscript:");
}

id objc_msgSend_objectForInfoDictionaryKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "objectForInfoDictionaryKey:");
}

id objc_msgSend_objectForKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "objectForKey:");
}

id objc_msgSend_objectForKeyedSubscript_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "objectForKeyedSubscript:");
}

id objc_msgSend_observableMostFrequentLocation(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "observableMostFrequentLocation");
}

id objc_msgSend_observe_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "observe:");
}

id objc_msgSend_observers(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "observers");
}

id objc_msgSend_offCompletionBlocks(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "offCompletionBlocks");
}

id objc_msgSend_offlineModeMonitor(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "offlineModeMonitor");
}

id objc_msgSend_oldWidth(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "oldWidth");
}

id objc_msgSend_onCompletionBlocks(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "onCompletionBlocks");
}

id objc_msgSend_onboardingVersion(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "onboardingVersion");
}

id objc_msgSend_onboardingVersionNumber(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "onboardingVersionNumber");
}

id objc_msgSend_openApplication_options_withResult_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "openApplication:options:withResult:");
}

id objc_msgSend_openURL_options_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "openURL:options:completionHandler:");
}

id objc_msgSend_operation(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "operation");
}

id objc_msgSend_operationForConfigurationManager_resourceManager_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "operationForConfigurationManager:resourceManager:");
}

id objc_msgSend_operationID(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "operationID");
}

id objc_msgSend_operationQueue(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "operationQueue");
}

id objc_msgSend_operationThrottler(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "operationThrottler");
}

id objc_msgSend_optionalTags(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "optionalTags");
}

id objc_msgSend_options(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "options");
}

id objc_msgSend_orderedEditorialItemIDs(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "orderedEditorialItemIDs");
}

id objc_msgSend_orderedSet(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "orderedSet");
}

id objc_msgSend_orderedSetWithObjects_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "orderedSetWithObjects:");
}

id objc_msgSend_orderedSizeCategories(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "orderedSizeCategories");
}

id objc_msgSend_outputImage(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "outputImage");
}

id objc_msgSend_overallOrder(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "overallOrder");
}

id objc_msgSend_overrideDurationEnabled(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "overrideDurationEnabled");
}

id objc_msgSend_pageOffset(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "pageOffset");
}

id objc_msgSend_pageSize(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "pageSize");
}

id objc_msgSend_pageSpacing(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "pageSpacing");
}

id objc_msgSend_paidAccessChecker(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "paidAccessChecker");
}

id objc_msgSend_parentBackgroundColor(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "parentBackgroundColor");
}

id objc_msgSend_parentIssueRecordData(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "parentIssueRecordData");
}

id objc_msgSend_parse(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "parse");
}

id objc_msgSend_passThroughTouches(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "passThroughTouches");
}

id objc_msgSend_path(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "path");
}

id objc_msgSend_pathComponents(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "pathComponents");
}

id objc_msgSend_pathExtension(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "pathExtension");
}

id objc_msgSend_pathForIdentifier_size_cornerRadius_punchThroughBanner_scale_sizeCategory_parentBackgroundColor_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "pathForIdentifier:size:cornerRadius:punchThroughBanner:scale:sizeCategory:parentBackgroundColor:");
}

id objc_msgSend_pathForResource_ofType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "pathForResource:ofType:");
}

id objc_msgSend_peekAtActionTypes(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "peekAtActionTypes");
}

id objc_msgSend_peformBackgroundFetchWithReason_timeout_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "peformBackgroundFetchWithReason:timeout:completionHandler:");
}

id objc_msgSend_performBatchUpdates_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "performBatchUpdates:completion:");
}

id objc_msgSend_performBlockWhenContentIsLoaded_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "performBlockWhenContentIsLoaded:");
}

id objc_msgSend_performSelector_withObject_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "performSelector:withObject:");
}

id objc_msgSend_performSelector_withObject_afterDelay_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "performSelector:withObject:afterDelay:");
}

id objc_msgSend_performSelector_withObject_withObject_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "performSelector:withObject:withObject:");
}

id objc_msgSend_performWithLockSync_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "performWithLockSync:");
}

id objc_msgSend_performWithPrivateDataContext_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "performWithPrivateDataContext:");
}

id objc_msgSend_performWithoutAnimation_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "performWithoutAnimation:");
}

id objc_msgSend_persistStates(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "persistStates");
}

id objc_msgSend_persistableProperties(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "persistableProperties");
}

id objc_msgSend_persistenceEnabled(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "persistenceEnabled");
}

id objc_msgSend_persistenceQueue(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "persistenceQueue");
}

id objc_msgSend_persistentIdentifier(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "persistentIdentifier");
}

id objc_msgSend_personalizationBundleIdMappingResourceId(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "personalizationBundleIdMappingResourceId");
}

id objc_msgSend_personalizationData(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "personalizationData");
}

id objc_msgSend_personalizationDataGenerator(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "personalizationDataGenerator");
}

id objc_msgSend_personalizationFavorabilityResourceId(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "personalizationFavorabilityResourceId");
}

id objc_msgSend_personalizationFeatureBundleForFeaturesGenerator_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "personalizationFeatureBundleForFeaturesGenerator:");
}

id objc_msgSend_personalizationTreatment(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "personalizationTreatment");
}

id objc_msgSend_personalizationUrlMappingResourceId(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "personalizationUrlMappingResourceId");
}

id objc_msgSend_personalizationValueWithBaseline_decayRate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "personalizationValueWithBaseline:decayRate:");
}

id objc_msgSend_personalizationValueWithBaseline_decayRate_baselineClicksMultiplier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "personalizationValueWithBaseline:decayRate:baselineClicksMultiplier:");
}

id objc_msgSend_personalizationWhitelistResourceId(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "personalizationWhitelistResourceId");
}

id objc_msgSend_pinAlertController(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "pinAlertController");
}

id objc_msgSend_placeholderChannelAttributes(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "placeholderChannelAttributes");
}

id objc_msgSend_placeholderChannelFont(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "placeholderChannelFont");
}

id objc_msgSend_placeholderChannelImage(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "placeholderChannelImage");
}

id objc_msgSend_placeholderChannelImageForCardOfSize_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "placeholderChannelImageForCardOfSize:");
}

id objc_msgSend_placeholderImageView(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "placeholderImageView");
}

id objc_msgSend_placeholderTagLabel(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "placeholderTagLabel");
}

id objc_msgSend_placeholderTopicAttributes(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "placeholderTopicAttributes");
}

id objc_msgSend_placeholderTopicFont(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "placeholderTopicFont");
}

id objc_msgSend_placeholderTopicImage(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "placeholderTopicImage");
}

id objc_msgSend_placeholderTopicImageForCardOfSize_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "placeholderTopicImageForCardOfSize:");
}

id objc_msgSend_pointSize(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "pointSize");
}

id objc_msgSend_pool(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "pool");
}

id objc_msgSend_popHighPriorityTaskInFlight(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "popHighPriorityTaskInFlight");
}

id objc_msgSend_popularTagIDs(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "popularTagIDs");
}

id objc_msgSend_populateWithFeed_context_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "populateWithFeed:context:");
}

id objc_msgSend_populatedFeed(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "populatedFeed");
}

id objc_msgSend_portrait(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "portrait");
}

id objc_msgSend_portraitAutoFavoriteCandidates(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "portraitAutoFavoriteCandidates");
}

id objc_msgSend_portraitDecayRate(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "portraitDecayRate");
}

id objc_msgSend_portraitDisabledTagIDs(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "portraitDisabledTagIDs");
}

id objc_msgSend_portraitGlobalThreshold(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "portraitGlobalThreshold");
}

id objc_msgSend_portraitLastQueryDate(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "portraitLastQueryDate");
}

id objc_msgSend_portraitPriorFactorExponent(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "portraitPriorFactorExponent");
}

id objc_msgSend_portraitSignalWeight(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "portraitSignalWeight");
}

id objc_msgSend_portraitTagFavorabilityExponent(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "portraitTagFavorabilityExponent");
}

id objc_msgSend_position(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "position");
}

id objc_msgSend_possiblyUnfetchedAppConfiguration(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "possiblyUnfetchedAppConfiguration");
}

id objc_msgSend_pptContext(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "pptContext");
}

id objc_msgSend_preSubscribedNotificationsChannelIDs(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "preSubscribedNotificationsChannelIDs");
}

id objc_msgSend_predicateWithBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "predicateWithBlock:");
}

id objc_msgSend_preferredContentSizeCategory(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "preferredContentSizeCategory");
}

id objc_msgSend_preferredFontForTextStyle_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "preferredFontForTextStyle:");
}

id objc_msgSend_preferredFormat(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "preferredFormat");
}

id objc_msgSend_preferredLocalizationsFromArray_forPreferences_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "preferredLocalizationsFromArray:forPreferences:");
}

id objc_msgSend_prefetchConfig(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "prefetchConfig");
}

id objc_msgSend_prefetchQueue(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "prefetchQueue");
}

id objc_msgSend_prefetchRequestsByID(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "prefetchRequestsByID");
}

id objc_msgSend_prepareAggregatesForUseWithCompletionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "prepareAggregatesForUseWithCompletionHandler:");
}

id objc_msgSend_prepareAppCacheSnapShot(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "prepareAppCacheSnapShot");
}

id objc_msgSend_prepareAutoFavoritesWithLanguageChange_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "prepareAutoFavoritesWithLanguageChange:completionHandler:");
}

id objc_msgSend_prepareFavoritesWithLanguageChange_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "prepareFavoritesWithLanguageChange:completionHandler:");
}

id objc_msgSend_prepareForUseWithApplicationDelegate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "prepareForUseWithApplicationDelegate:");
}

id objc_msgSend_prepareForUseWithCompletionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "prepareForUseWithCompletionHandler:");
}

id objc_msgSend_presentExplicitRestrictionAlertIfNeededOfType_completionBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "presentExplicitRestrictionAlertIfNeededOfType:completionBlock:");
}

id objc_msgSend_presentNotificationSettingsForCell_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "presentNotificationSettingsForCell:");
}

id objc_msgSend_presentViewController_animated_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "presentViewController:animated:completion:");
}

id objc_msgSend_presentedViewController(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "presentedViewController");
}

id objc_msgSend_presentingViewController(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "presentingViewController");
}

id objc_msgSend_preserveColorspace(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "preserveColorspace");
}

id objc_msgSend_presubscribeService(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "presubscribeService");
}

id objc_msgSend_presubscribeToChannelsIfNeededWithCompletion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "presubscribeToChannelsIfNeededWithCompletion:");
}

id objc_msgSend_presubscribedFeedIDs(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "presubscribedFeedIDs");
}

id objc_msgSend_prewarmAd(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "prewarmAd");
}

id objc_msgSend_prewarmStores(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "prewarmStores");
}

id objc_msgSend_prewarmTodayWithContext_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "prewarmTodayWithContext:");
}

id objc_msgSend_primaryLanguageCode(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "primaryLanguageCode");
}

id objc_msgSend_priority(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "priority");
}

id objc_msgSend_privateChannelMembershipController(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "privateChannelMembershipController");
}

id objc_msgSend_privateContainer(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "privateContainer");
}

id objc_msgSend_privateDataActionProvider(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "privateDataActionProvider");
}

id objc_msgSend_privateDataContext(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "privateDataContext");
}

id objc_msgSend_privateDataControllers(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "privateDataControllers");
}

id objc_msgSend_privateDataDirectory(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "privateDataDirectory");
}

id objc_msgSend_privateDataUpdateCoordinator(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "privateDataUpdateCoordinator");
}

id objc_msgSend_privatePushNotificationHandler(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "privatePushNotificationHandler");
}

id objc_msgSend_processAppSignals_safariSignals_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "processAppSignals:safariSignals:completion:");
}

id objc_msgSend_processConfigurationWithJSON_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "processConfigurationWithJSON:completion:");
}

id objc_msgSend_processExistingData(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "processExistingData");
}

id objc_msgSend_processExternalAppUsageSignals_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "processExternalAppUsageSignals:");
}

id objc_msgSend_processInfo(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "processInfo");
}

id objc_msgSend_processSafariSignals_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "processSafariSignals:");
}

id objc_msgSend_progressivePersonalization(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "progressivePersonalization");
}

id objc_msgSend_pruneImagesOlderThan_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "pruneImagesOlderThan:");
}

id objc_msgSend_publicContainer(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "publicContainer");
}

id objc_msgSend_publishDate(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "publishDate");
}

id objc_msgSend_punchThroughEffect(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "punchThroughEffect");
}

id objc_msgSend_purchaseController(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "purchaseController");
}

id objc_msgSend_purchaseManager(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "purchaseManager");
}

id objc_msgSend_purchaseProvider(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "purchaseProvider");
}

id objc_msgSend_purchasedTagIDs(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "purchasedTagIDs");
}

id objc_msgSend_pushHighPriorityTaskInFlight(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "pushHighPriorityTaskInFlight");
}

id objc_msgSend_puzzleController(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "puzzleController");
}

id objc_msgSend_puzzleHistory(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "puzzleHistory");
}

id objc_msgSend_puzzleTypeController(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "puzzleTypeController");
}

id objc_msgSend_qualities(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "qualities");
}

id objc_msgSend_qualityOfService(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "qualityOfService");
}

id objc_msgSend_query(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "query");
}

id objc_msgSend_queryItems(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "queryItems");
}

id objc_msgSend_rangeOfString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "rangeOfString:");
}

id objc_msgSend_rangeOfString_options_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "rangeOfString:options:");
}

id objc_msgSend_rankTagIDsDescending_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "rankTagIDsDescending:");
}

id objc_msgSend_readOnlyArray(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "readOnlyArray");
}

id objc_msgSend_readWriteWithAccessor_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "readWriteWithAccessor:");
}

id objc_msgSend_readableContentGuide(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "readableContentGuide");
}

id objc_msgSend_readingHistory(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "readingHistory");
}

id objc_msgSend_readingList(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "readingList");
}

id objc_msgSend_recentlyOpenedTags(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "recentlyOpenedTags");
}

id objc_msgSend_recommendedNotificationChannelIDs(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "recommendedNotificationChannelIDs");
}

id objc_msgSend_recordExposureEventForObserver_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "recordExposureEventForObserver:");
}

id objc_msgSend_recordExposureEventWithStartDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "recordExposureEventWithStartDate:");
}

id objc_msgSend_recordZoneIDs(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "recordZoneIDs");
}

id objc_msgSend_rectForOnePixelStroke_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "rectForOnePixelStroke:");
}

id objc_msgSend_red(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "red");
}

id objc_msgSend_redirectService(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "redirectService");
}

id objc_msgSend_referralItem(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "referralItem");
}

id objc_msgSend_referredArticlesWithAssetManager_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "referredArticlesWithAssetManager:");
}

id objc_msgSend_referringApplication(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "referringApplication");
}

id objc_msgSend_referringURL(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "referringURL");
}

id objc_msgSend_refreshAndNotifyAboutSubscribedTags(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "refreshAndNotifyAboutSubscribedTags");
}

id objc_msgSend_refreshAppConfigurationIfNeededWithCompletionQueue_refreshCompletion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "refreshAppConfigurationIfNeededWithCompletionQueue:refreshCompletion:");
}

id objc_msgSend_refreshAutoFavoritesInBackgroundDisregardingCache_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "refreshAutoFavoritesInBackgroundDisregardingCache:");
}

id objc_msgSend_refreshEditorialItems(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "refreshEditorialItems");
}

id objc_msgSend_refreshEditorialItemsWithItems_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "refreshEditorialItemsWithItems:");
}

id objc_msgSend_refreshOnboardingVersion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "refreshOnboardingVersion:");
}

id objc_msgSend_refreshThrottler(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "refreshThrottler");
}

id objc_msgSend_registerClass_factory_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "registerClass:factory:");
}

id objc_msgSend_registerClass_forCellReuseIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "registerClass:forCellReuseIdentifier:");
}

id objc_msgSend_registerClass_forCellWithReuseIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "registerClass:forCellWithReuseIdentifier:");
}

id objc_msgSend_registerClass_name_factory_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "registerClass:name:factory:");
}

id objc_msgSend_registerDefaults(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "registerDefaults");
}

id objc_msgSend_registerDefaults_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "registerDefaults:");
}

id objc_msgSend_registerDeviceToken_deviceDigestMode_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "registerDeviceToken:deviceDigestMode:");
}

id objc_msgSend_registerFeedback_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "registerFeedback:completion:");
}

id objc_msgSend_registerFontWithURL_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "registerFontWithURL:error:");
}

id objc_msgSend_registerForDeviceLockNotifications(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "registerForDeviceLockNotifications");
}

id objc_msgSend_registerForRemoteNotifications(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "registerForRemoteNotifications");
}

id objc_msgSend_registerProtocol_factory_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "registerProtocol:factory:");
}

id objc_msgSend_registerProtocol_name_factory_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "registerProtocol:name:factory:");
}

id objc_msgSend_registerSchemeForCustomProtocol_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "registerSchemeForCustomProtocol:");
}

id objc_msgSend_registerUserInfo_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "registerUserInfo:");
}

id objc_msgSend_relativePriority(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "relativePriority");
}

id objc_msgSend_reloadCachedTagImage(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "reloadCachedTagImage");
}

id objc_msgSend_reloadData(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "reloadData");
}

id objc_msgSend_reloadItemsAtIndexPaths_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "reloadItemsAtIndexPaths:");
}

id objc_msgSend_reloadSections_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "reloadSections:");
}

id objc_msgSend_reloadTagImage(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "reloadTagImage");
}

id objc_msgSend_reloadTimeline(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "reloadTimeline");
}

id objc_msgSend_remoteDefaults(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "remoteDefaults");
}

id objc_msgSend_remoteObjectProxyWithErrorHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "remoteObjectProxyWithErrorHandler:");
}

id objc_msgSend_remoteURL(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "remoteURL");
}

id objc_msgSend_removeAllAnimations(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeAllAnimations");
}

id objc_msgSend_removeAllAutoFavoriteSubscriptions_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeAllAutoFavoriteSubscriptions:");
}

id objc_msgSend_removeAllObjects(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeAllObjects");
}

id objc_msgSend_removeAllPendingNotificationRequests(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeAllPendingNotificationRequests");
}

id objc_msgSend_removeAnimationForKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeAnimationForKey:");
}

id objc_msgSend_removeAppConfigObserver_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeAppConfigObserver:");
}

id objc_msgSend_removeArticlesWithIDs_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeArticlesWithIDs:");
}

id objc_msgSend_removeDeliveredNotificationsWithIdentifiers_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeDeliveredNotificationsWithIdentifiers:");
}

id objc_msgSend_removeInterestInArticleWithID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeInterestInArticleWithID:");
}

id objc_msgSend_removeItemAtPath_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeItemAtPath:error:");
}

id objc_msgSend_removeItemAtURL_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeItemAtURL:error:");
}

id objc_msgSend_removeItemWithIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeItemWithIdentifier:");
}

id objc_msgSend_removeObject_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeObject:");
}

id objc_msgSend_removeObjectForKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeObjectForKey:");
}

id objc_msgSend_removeObserver_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeObserver:");
}

id objc_msgSend_removeObserver_name_object_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeObserver:name:object:");
}

id objc_msgSend_removePrefetchInterestInHeadline_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removePrefetchInterestInHeadline:");
}

id objc_msgSend_removeStateObserver_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeStateObserver:");
}

id objc_msgSend_removeSubscriptionToTag_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeSubscriptionToTag:");
}

id objc_msgSend_removeSubscriptionsWithTags_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeSubscriptionsWithTags:");
}

id objc_msgSend_removeTarget_action_forControlEvents_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeTarget:action:forControlEvents:");
}

id objc_msgSend_renderInContext_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "renderInContext:");
}

id objc_msgSend_request(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "request");
}

id objc_msgSend_requestWithIdentifier_content_trigger_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "requestWithIdentifier:content:trigger:");
}

id objc_msgSend_requiredResourceIDs(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "requiredResourceIDs");
}

id objc_msgSend_requiredResourceURLs(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "requiredResourceURLs");
}

id objc_msgSend_reset(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "reset");
}

id objc_msgSend_resetIdentifier(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "resetIdentifier");
}

id objc_msgSend_resetUserIDs(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "resetUserIDs");
}

id objc_msgSend_resignSessionForSceneID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "resignSessionForSceneID:");
}

id objc_msgSend_resolveAppSingletons(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "resolveAppSingletons");
}

id objc_msgSend_resolveClass_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "resolveClass:");
}

id objc_msgSend_resolveClass_name_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "resolveClass:name:");
}

id objc_msgSend_resolveProtocol_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "resolveProtocol:");
}

id objc_msgSend_resolveProtocol_name_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "resolveProtocol:name:");
}

id objc_msgSend_resolveURL_withQualityOfService_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "resolveURL:withQualityOfService:completion:");
}

id objc_msgSend_resolvedColorWithTraitCollection_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "resolvedColorWithTraitCollection:");
}

id objc_msgSend_resolver(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "resolver");
}

id objc_msgSend_resourceID(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "resourceID");
}

id objc_msgSend_resourceManager(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "resourceManager");
}

id objc_msgSend_resourceURLTranslator(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "resourceURLTranslator");
}

id objc_msgSend_resourcesByID(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "resourcesByID");
}

id objc_msgSend_resourcesLock(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "resourcesLock");
}

id objc_msgSend_resultAutoFavorites(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "resultAutoFavorites");
}

id objc_msgSend_resultCursor(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "resultCursor");
}

id objc_msgSend_resume(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "resume");
}

id objc_msgSend_retryHandler(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "retryHandler");
}

id objc_msgSend_reuseIdentifier(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "reuseIdentifier");
}

id objc_msgSend_reverseObjectEnumerator(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "reverseObjectEnumerator");
}

id objc_msgSend_rootPath(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "rootPath");
}

id objc_msgSend_rootViewController(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "rootViewController");
}

id objc_msgSend_routerManager(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "routerManager");
}

id objc_msgSend_routers(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "routers");
}

id objc_msgSend_row(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "row");
}

id objc_msgSend_runTest_options_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "runTest:options:");
}

id objc_msgSend_safariAutoFavoriteCandidates(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "safariAutoFavoriteCandidates");
}

id objc_msgSend_safariEventBlackoutSeconds(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "safariEventBlackoutSeconds");
}

id objc_msgSend_safariOccurrenceDecayMultiplier(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "safariOccurrenceDecayMultiplier");
}

id objc_msgSend_safariPriorFactorExponent(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "safariPriorFactorExponent");
}

id objc_msgSend_safariSignalWeight(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "safariSignalWeight");
}

id objc_msgSend_safariTagFavorabilityExponent(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "safariTagFavorabilityExponent");
}

id objc_msgSend_safariTimeDecayMultiplier(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "safariTimeDecayMultiplier");
}

id objc_msgSend_safeIsAppRunningInBackground(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "safeIsAppRunningInBackground");
}

id objc_msgSend_saveArticleWithID_notificationID_sourceChannelID_isFreeArticle_headline_userActionDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "saveArticleWithID:notificationID:sourceChannelID:isFreeArticle:headline:userActionDate:");
}

id objc_msgSend_saveViewAppearanceDateForObserver_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "saveViewAppearanceDateForObserver:");
}

id objc_msgSend_scale(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "scale");
}

id objc_msgSend_scaleAnimationDown(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "scaleAnimationDown");
}

id objc_msgSend_scaleAnimationUp(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "scaleAnimationUp");
}

id objc_msgSend_scaledFontForFont_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "scaledFontForFont:");
}

id objc_msgSend_scaledValueForSizeCategory_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "scaledValueForSizeCategory:");
}

id objc_msgSend_scanHexInt_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "scanHexInt:");
}

id objc_msgSend_scanInt_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "scanInt:");
}

id objc_msgSend_scanLocation(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "scanLocation");
}

id objc_msgSend_scanString_intoString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "scanString:intoString:");
}

id objc_msgSend_scanUpToString_intoString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "scanUpToString:intoString:");
}

id objc_msgSend_scannerWithString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "scannerWithString:");
}

id objc_msgSend_sceneSessionDictionary(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sceneSessionDictionary");
}

id objc_msgSend_sceneSessionIdentifier(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sceneSessionIdentifier");
}

id objc_msgSend_scheduleAnyFakeNotificationsFromInternalExtras_whenAppEntersBackground_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "scheduleAnyFakeNotificationsFromInternalExtras:whenAppEntersBackground:");
}

id objc_msgSend_scheduleLocalNotificationForArticleID_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "scheduleLocalNotificationForArticleID:completion:");
}

id objc_msgSend_scheduleLocalNotificationforChannels_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "scheduleLocalNotificationforChannels:");
}

id objc_msgSend_scheduleLowPriorityBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "scheduleLowPriorityBlock:");
}

id objc_msgSend_scheduleLowPriorityBlockForMainThread_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "scheduleLowPriorityBlockForMainThread:");
}

id objc_msgSend_scheduleLowPriorityOperation_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "scheduleLowPriorityOperation:");
}

id objc_msgSend_scheduleTasksWithOptions_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "scheduleTasksWithOptions:");
}

id objc_msgSend_scheduledDeliverySetting(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "scheduledDeliverySetting");
}

id objc_msgSend_scheme(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "scheme");
}

id objc_msgSend_scoreForTagID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "scoreForTagID:");
}

id objc_msgSend_scoresForTagIDs_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "scoresForTagIDs:");
}

id objc_msgSend_scoresForTopicMapping_query_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "scoresForTopicMapping:query:error:");
}

id objc_msgSend_scoringType(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "scoringType");
}

id objc_msgSend_scrollDirection(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "scrollDirection");
}

id objc_msgSend_searchResultTableViewCellDidFinishLayingOut_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "searchResultTableViewCellDidFinishLayingOut:");
}

id objc_msgSend_section(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "section");
}

id objc_msgSend_sectionInset(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sectionInset");
}

id objc_msgSend_sectionOrder(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sectionOrder");
}

id objc_msgSend_seenArticlesTransactions(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "seenArticlesTransactions");
}

id objc_msgSend_sendActionsForControlEvents_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sendActionsForControlEvents:");
}

id objc_msgSend_serviceWidgetIfNeededWithCompletion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "serviceWidgetIfNeededWithCompletion:");
}

id objc_msgSend_session(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "session");
}

id objc_msgSend_sessionDidStartWithSessionID_sourceApplication_url_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sessionDidStartWithSessionID:sourceApplication:url:");
}

id objc_msgSend_sessionInProgressForID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sessionInProgressForID:");
}

id objc_msgSend_set(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "set");
}

id objc_msgSend_setAXXXL_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAXXXL:");
}

id objc_msgSend_setAccessRestrictedBecauseOfAppVersion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAccessRestrictedBecauseOfAppVersion:");
}

id objc_msgSend_setAccessRestrictedBecauseOfDeviceAbandoned_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAccessRestrictedBecauseOfDeviceAbandoned:");
}

id objc_msgSend_setAccessRestrictedBecauseOfOSVersion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAccessRestrictedBecauseOfOSVersion:");
}

id objc_msgSend_setAccessibilityIgnoresInvertColors_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAccessibilityIgnoresInvertColors:");
}

id objc_msgSend_setAccessibilityLabel_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAccessibilityLabel:");
}

id objc_msgSend_setAccessibilityValue_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAccessibilityValue:");
}

id objc_msgSend_setAccessoryType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAccessoryType:");
}

id objc_msgSend_setAccessoryView_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAccessoryView:");
}

id objc_msgSend_setActionURL_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setActionURL:");
}

id objc_msgSend_setActions_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setActions:");
}

id objc_msgSend_setActivityIndicator_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setActivityIndicator:");
}

id objc_msgSend_setActivityMonitor_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setActivityMonitor:");
}

id objc_msgSend_setAggregateStore_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAggregateStore:");
}

id objc_msgSend_setAggregateStoreProvider_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAggregateStoreProvider:");
}

id objc_msgSend_setAlignment_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAlignment:");
}

id objc_msgSend_setAllowsGroupOpacity_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAllowsGroupOpacity:");
}

id objc_msgSend_setAlpha_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAlpha:");
}

id objc_msgSend_setAlphabeticalTags_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAlphabeticalTags:");
}

id objc_msgSend_setAmsPushHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAmsPushHandler:");
}

id objc_msgSend_setAnalyticsController_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAnalyticsController:");
}

id objc_msgSend_setAnalyticsReferralFactory_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAnalyticsReferralFactory:");
}

id objc_msgSend_setAnimatedImage_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAnimatedImage:");
}

id objc_msgSend_setAnimationDuration_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAnimationDuration:");
}

id objc_msgSend_setAppActivityMonitor_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAppActivityMonitor:");
}

id objc_msgSend_setAppConfiguration_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAppConfiguration:");
}

id objc_msgSend_setAppOpenedByUserActivity_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAppOpenedByUserActivity:");
}

id objc_msgSend_setAppSessionCloseObserver_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAppSessionCloseObserver:");
}

id objc_msgSend_setAppSessionStartMethod_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAppSessionStartMethod:");
}

id objc_msgSend_setAppSessionStartReferral_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAppSessionStartReferral:");
}

id objc_msgSend_setAppUsageAutoFavoriteCandidates_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAppUsageAutoFavoriteCandidates:");
}

id objc_msgSend_setApplicationIconBadgeNumber_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setApplicationIconBadgeNumber:");
}

id objc_msgSend_setApplicationUpdateNotifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setApplicationUpdateNotifier:");
}

id objc_msgSend_setArticleContentPool_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setArticleContentPool:");
}

id objc_msgSend_setArticlePrefetchManager_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setArticlePrefetchManager:");
}

id objc_msgSend_setAssociator_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAssociator:");
}

id objc_msgSend_setAttachments_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAttachments:");
}

id objc_msgSend_setAttributedText_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAttributedText:");
}

id objc_msgSend_setAttributes_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAttributes:");
}

id objc_msgSend_setAttributes_ofItemAtPath_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAttributes:ofItemAtPath:error:");
}

id objc_msgSend_setAttributes_range_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAttributes:range:");
}

id objc_msgSend_setAutoEnableNotificationsIsPending_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAutoEnableNotificationsIsPending:");
}

id objc_msgSend_setAutoFavoriteTagIDs_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAutoFavoriteTagIDs:");
}

id objc_msgSend_setAutoFavoriteTagIDsToScores_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAutoFavoriteTagIDsToScores:");
}

id objc_msgSend_setAutoFavorites_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAutoFavorites:");
}

id objc_msgSend_setAutoFavoritesCompletionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAutoFavoritesCompletionHandler:");
}

id objc_msgSend_setAutoFavoritesCursor_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAutoFavoritesCursor:");
}

id objc_msgSend_setAutofavorites_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAutofavorites:");
}

id objc_msgSend_setAutoresizesSubviews_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAutoresizesSubviews:");
}

id objc_msgSend_setAutoresizingMask_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAutoresizingMask:");
}

id objc_msgSend_setBackgroundColor_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setBackgroundColor:");
}

id objc_msgSend_setBackgroundFetchInProgress_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setBackgroundFetchInProgress:");
}

id objc_msgSend_setBackgroundFetchManager_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setBackgroundFetchManager:");
}

id objc_msgSend_setBackgroundFetchScheduler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setBackgroundFetchScheduler:");
}

id objc_msgSend_setBeginTime_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setBeginTime:");
}

id objc_msgSend_setBody_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setBody:");
}

id objc_msgSend_setBool_forKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setBool:forKey:");
}

id objc_msgSend_setBootstrapper_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setBootstrapper:");
}

id objc_msgSend_setBorderColor_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setBorderColor:");
}

id objc_msgSend_setBorderWidth_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setBorderWidth:");
}

id objc_msgSend_setBounds_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setBounds:");
}

id objc_msgSend_setBundleIDMapping_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setBundleIDMapping:");
}

id objc_msgSend_setBundleIDMappingData_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setBundleIDMappingData:");
}

id objc_msgSend_setBundleSubscription_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setBundleSubscription:");
}

id objc_msgSend_setByAddingObjectsFromArray_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setByAddingObjectsFromArray:");
}

id objc_msgSend_setCachePolicy_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCachePolicy:");
}

id objc_msgSend_setCachesInputImage_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCachesInputImage:");
}

id objc_msgSend_setCampaignID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCampaignID:");
}

id objc_msgSend_setCampaignType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCampaignType:");
}

id objc_msgSend_setCanonicalLanguage_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCanonicalLanguage:");
}

id objc_msgSend_setCapacity_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCapacity:");
}

id objc_msgSend_setCardCellDelegate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCardCellDelegate:");
}

id objc_msgSend_setCategoryIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCategoryIdentifier:");
}

id objc_msgSend_setCenter_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCenter:");
}

id objc_msgSend_setChannelBannerFrame_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setChannelBannerFrame:");
}

id objc_msgSend_setChannelFont_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setChannelFont:");
}

id objc_msgSend_setChannelPlaceholderImage_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setChannelPlaceholderImage:");
}

id objc_msgSend_setChannelTag_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setChannelTag:");
}

id objc_msgSend_setCharactersToBeSkipped_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCharactersToBeSkipped:");
}

id objc_msgSend_setClientIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setClientIdentifier:");
}

id objc_msgSend_setCloudContext_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCloudContext:");
}

id objc_msgSend_setColor_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setColor:");
}

id objc_msgSend_setColors_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setColors:");
}

id objc_msgSend_setCompletionBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCompletionBlock:");
}

id objc_msgSend_setConfigurableValues_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setConfigurableValues:");
}

id objc_msgSend_setConfigurationStore_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setConfigurationStore:");
}

id objc_msgSend_setContent_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setContent:");
}

id objc_msgSend_setContentCreationDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setContentCreationDate:");
}

id objc_msgSend_setContentDescription_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setContentDescription:");
}

id objc_msgSend_setContentMode_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setContentMode:");
}

id objc_msgSend_setContents_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setContents:");
}

id objc_msgSend_setContentsScale_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setContentsScale:");
}

id objc_msgSend_setContext_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setContext:");
}

id objc_msgSend_setCoreDuetLastQueryDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCoreDuetLastQueryDate:");
}

id objc_msgSend_setCornerRadius_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCornerRadius:");
}

id objc_msgSend_setCoverDownloadOperation_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCoverDownloadOperation:");
}

id objc_msgSend_setCreativeID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCreativeID:");
}

id objc_msgSend_setCrossfadeAnimation_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCrossfadeAnimation:");
}

id objc_msgSend_setCursor_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCursor:");
}

id objc_msgSend_setDamping_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDamping:");
}

id objc_msgSend_setDataProviderFactory_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDataProviderFactory:");
}

id objc_msgSend_setDateFormat_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDateFormat:");
}

id objc_msgSend_setDateLastOpened_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDateLastOpened:");
}

id objc_msgSend_setDecayRate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDecayRate:");
}

id objc_msgSend_setDefaultCandidates_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDefaultCandidates:");
}

id objc_msgSend_setDelegate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDelegate:");
}

id objc_msgSend_setDestructiveHasBeenConsumed_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDestructiveHasBeenConsumed:");
}

id objc_msgSend_setDeviceManager_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDeviceManager:");
}

id objc_msgSend_setDeviceToken_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDeviceToken:");
}

id objc_msgSend_setDiagnosticFileManager_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDiagnosticFileManager:");
}

id objc_msgSend_setDisregardCache_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDisregardCache:");
}

id objc_msgSend_setDuration_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDuration:");
}

id objc_msgSend_setEditorialItemsByID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setEditorialItemsByID:");
}

id objc_msgSend_setEmbedConfigurationData_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setEmbedConfigurationData:");
}

id objc_msgSend_setEmbedConfigurationIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setEmbedConfigurationIdentifier:");
}

id objc_msgSend_setEmbedConfigurationManager_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setEmbedConfigurationManager:");
}

id objc_msgSend_setEmbedFetchCompletionBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setEmbedFetchCompletionBlock:");
}

id objc_msgSend_setEnabled_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setEnabled:");
}

id objc_msgSend_setEndPoint_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setEndPoint:");
}

id objc_msgSend_setEntitlementsOverrideProvider_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setEntitlementsOverrideProvider:");
}

id objc_msgSend_setError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setError:");
}

id objc_msgSend_setExcludingSourceBundleIds_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setExcludingSourceBundleIds:");
}

id objc_msgSend_setExecutionQueue_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setExecutionQueue:");
}

id objc_msgSend_setExistingInternalSignalAutoFavoriteCandidates_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setExistingInternalSignalAutoFavoriteCandidates:");
}

id objc_msgSend_setFavorabilityScores_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setFavorabilityScores:");
}

id objc_msgSend_setFavorabilityScoresData_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setFavorabilityScoresData:");
}

id objc_msgSend_setFavoritesPersonalizer_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setFavoritesPersonalizer:");
}

id objc_msgSend_setFeaturesGenerator_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setFeaturesGenerator:");
}

id objc_msgSend_setFeedOrder_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setFeedOrder:");
}

id objc_msgSend_setFeedPersonalizer_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setFeedPersonalizer:");
}

id objc_msgSend_setFeldsparContext_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setFeldsparContext:");
}

id objc_msgSend_setFetchCompletionBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setFetchCompletionBlock:");
}

id objc_msgSend_setFetchCompletionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setFetchCompletionHandler:");
}

id objc_msgSend_setFetchCompletionQueue_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setFetchCompletionQueue:");
}

id objc_msgSend_setFileURL_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setFileURL:");
}

id objc_msgSend_setFill(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setFill");
}

id objc_msgSend_setFillColor_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setFillColor:");
}

id objc_msgSend_setFillMode_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setFillMode:");
}

id objc_msgSend_setFilledStateImage_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setFilledStateImage:");
}

id objc_msgSend_setFilteredTags_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setFilteredTags:");
}

id objc_msgSend_setFilters_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setFilters:");
}

id objc_msgSend_setFlintDataProvider_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setFlintDataProvider:");
}

id objc_msgSend_setFont_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setFont:");
}

id objc_msgSend_setFrame_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setFrame:");
}

id objc_msgSend_setFromDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setFromDate:");
}

id objc_msgSend_setFromValue_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setFromValue:");
}

id objc_msgSend_setGizmoSyncManager_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setGizmoSyncManager:");
}

id objc_msgSend_setGroupOrder_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setGroupOrder:");
}

id objc_msgSend_setGroupableCandidates_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setGroupableCandidates:");
}

id objc_msgSend_setGroupableFavoriteTagIDs_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setGroupableFavoriteTagIDs:");
}

id objc_msgSend_setGroupableTagIDs_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setGroupableTagIDs:");
}

id objc_msgSend_setHasBeenNotifiedOfApplicationLaunch_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setHasBeenNotifiedOfApplicationLaunch:");
}

id objc_msgSend_setHeadline_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setHeadline:");
}

id objc_msgSend_setHidden_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setHidden:");
}

id objc_msgSend_setHideHighlightState_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setHideHighlightState:");
}

id objc_msgSend_setHidesWhenStopped_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setHidesWhenStopped:");
}

id objc_msgSend_setHyphenationFactor_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setHyphenationFactor:");
}

id objc_msgSend_setImage_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setImage:");
}

id objc_msgSend_setImage_forState_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setImage:forState:");
}

id objc_msgSend_setImageQuality_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setImageQuality:");
}

id objc_msgSend_setImageUpdateOperation_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setImageUpdateOperation:");
}

id objc_msgSend_setInPreviewMode_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setInPreviewMode:");
}

id objc_msgSend_setIndexDelegate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setIndexDelegate:");
}

id objc_msgSend_setInitialVelocity_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setInitialVelocity:");
}

id objc_msgSend_setInsertedIndexPaths_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setInsertedIndexPaths:");
}

id objc_msgSend_setInternalSignalAutoFavoriteCandidates_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setInternalSignalAutoFavoriteCandidates:");
}

id objc_msgSend_setIsAccessibilityElement_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setIsAccessibilityElement:");
}

id objc_msgSend_setIsActive_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setIsActive:");
}

id objc_msgSend_setIsDeviceLocked_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setIsDeviceLocked:");
}

id objc_msgSend_setIsHandlingArticleNotification_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setIsHandlingArticleNotification:");
}

id objc_msgSend_setIsPresentingAlert_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setIsPresentingAlert:");
}

id objc_msgSend_setIsUserIDLoaded_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setIsUserIDLoaded:");
}

id objc_msgSend_setIssueViewingSessionManager_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setIssueViewingSessionManager:");
}

id objc_msgSend_setItemSize_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setItemSize:");
}

id objc_msgSend_setKeyQueue_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setKeyQueue:");
}

id objc_msgSend_setKeywords_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setKeywords:");
}

id objc_msgSend_setKnownTags_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setKnownTags:");
}

id objc_msgSend_setL_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setL:");
}

id objc_msgSend_setLabel_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLabel:");
}

id objc_msgSend_setLanguages_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLanguages:");
}

id objc_msgSend_setLastAppUsageAutoFavoriteResults_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLastAppUsageAutoFavoriteResults:");
}

id objc_msgSend_setLastExternalSignalProcessingDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLastExternalSignalProcessingDate:");
}

id objc_msgSend_setLastInternalSignalAutoFavorites_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLastInternalSignalAutoFavorites:");
}

id objc_msgSend_setLastInternalSignalGroupableFavorites_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLastInternalSignalGroupableFavorites:");
}

id objc_msgSend_setLastInternalSignalProcessingDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLastInternalSignalProcessingDate:");
}

id objc_msgSend_setLastLocationAutoFavoriteResults_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLastLocationAutoFavoriteResults:");
}

id objc_msgSend_setLastPortraitAutoFavoriteResults_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLastPortraitAutoFavoriteResults:");
}

id objc_msgSend_setLastSafariAutoFavoriteResults_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLastSafariAutoFavoriteResults:");
}

id objc_msgSend_setLineBreakMode_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLineBreakMode:");
}

id objc_msgSend_setLineSpacing_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLineSpacing:");
}

id objc_msgSend_setLineWidth_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLineWidth:");
}

id objc_msgSend_setLinkedHeadlines_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLinkedHeadlines:");
}

id objc_msgSend_setLoadingGroup_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLoadingGroup:");
}

id objc_msgSend_setLocalAreasManager_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLocalAreasManager:");
}

id objc_msgSend_setLocalChannelsProvider_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLocalChannelsProvider:");
}

id objc_msgSend_setLocalRegionProvider_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLocalRegionProvider:");
}

id objc_msgSend_setLocationAutoFavoriteCandidates_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLocationAutoFavoriteCandidates:");
}

id objc_msgSend_setLocationManager_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLocationManager:");
}

id objc_msgSend_setLocationObserver_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLocationObserver:");
}

id objc_msgSend_setLocations_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLocations:");
}

id objc_msgSend_setLogoDownloadOperation_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLogoDownloadOperation:");
}

id objc_msgSend_setMass_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setMass:");
}

id objc_msgSend_setMax_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setMax:");
}

id objc_msgSend_setMaxConcurrentOperationCount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setMaxConcurrentOperationCount:");
}

id objc_msgSend_setMin_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setMin:");
}

id objc_msgSend_setMinimumBackgroundFetchInterval_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setMinimumBackgroundFetchInterval:");
}

id objc_msgSend_setMinimumLineHeight_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setMinimumLineHeight:");
}

id objc_msgSend_setMinimumPressDuration_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setMinimumPressDuration:");
}

id objc_msgSend_setMode_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setMode:");
}

id objc_msgSend_setMostFrequentlyVisitedTags_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setMostFrequentlyVisitedTags:");
}

id objc_msgSend_setMutableTags_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setMutableTags:");
}

id objc_msgSend_setMutedTagIDs_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setMutedTagIDs:");
}

id objc_msgSend_setName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setName:");
}

id objc_msgSend_setNamedLocation_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setNamedLocation:");
}

id objc_msgSend_setNeedsDisplay(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setNeedsDisplay");
}

id objc_msgSend_setNetworkBehaviorMonitor_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setNetworkBehaviorMonitor:");
}

id objc_msgSend_setNewsUserInfo_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setNewsUserInfo:");
}

id objc_msgSend_setNextAlertPresentationDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setNextAlertPresentationDate:");
}

id objc_msgSend_setNonDestructiveHaveBeenConsumed_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setNonDestructiveHaveBeenConsumed:");
}

id objc_msgSend_setNotificationAutoEnableHelper_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setNotificationAutoEnableHelper:");
}

id objc_msgSend_setNotificationManager_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setNotificationManager:");
}

id objc_msgSend_setNotificationUIEnabled_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setNotificationUIEnabled:");
}

id objc_msgSend_setNotificationsConfiguration_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setNotificationsConfiguration:");
}

id objc_msgSend_setNotificationsEnabled_forTag_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setNotificationsEnabled:forTag:error:");
}

id objc_msgSend_setNumberOfLines_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setNumberOfLines:");
}

id objc_msgSend_setObject_atIndexedSubscript_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setObject:atIndexedSubscript:");
}

id objc_msgSend_setObject_forKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setObject:forKey:");
}

id objc_msgSend_setObject_forKeyedSubscript_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setObject:forKeyedSubscript:");
}

id objc_msgSend_setOfflineArticleManagerProvider_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setOfflineArticleManagerProvider:");
}

id objc_msgSend_setOfflineModeMonitor_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setOfflineModeMonitor:");
}

id objc_msgSend_setOldWidth_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setOldWidth:");
}

id objc_msgSend_setOnboardingVersion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setOnboardingVersion:");
}

id objc_msgSend_setOnboardingVersionNumber_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setOnboardingVersionNumber:");
}

id objc_msgSend_setOpaque_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setOpaque:");
}

id objc_msgSend_setOptions_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setOptions:");
}

id objc_msgSend_setOrderedEditorialItemIDs_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setOrderedEditorialItemIDs:");
}

id objc_msgSend_setOverrideDecayRate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setOverrideDecayRate:");
}

id objc_msgSend_setPath_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPath:");
}

id objc_msgSend_setPinAlertController_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPinAlertController:");
}

id objc_msgSend_setPlaceholderChannelAttributes_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPlaceholderChannelAttributes:");
}

id objc_msgSend_setPlaceholderChannelFont_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPlaceholderChannelFont:");
}

id objc_msgSend_setPlaceholderChannelImage_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPlaceholderChannelImage:");
}

id objc_msgSend_setPlaceholderTopicAttributes_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPlaceholderTopicAttributes:");
}

id objc_msgSend_setPlaceholderTopicFont_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPlaceholderTopicFont:");
}

id objc_msgSend_setPlaceholderTopicImage_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPlaceholderTopicImage:");
}

id objc_msgSend_setPopularTagIDs_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPopularTagIDs:");
}

id objc_msgSend_setPortraitAutoFavoriteCandidates_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPortraitAutoFavoriteCandidates:");
}

id objc_msgSend_setPortraitLastQueryDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPortraitLastQueryDate:");
}

id objc_msgSend_setPosition_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPosition:");
}

id objc_msgSend_setPreferredAction_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPreferredAction:");
}

id objc_msgSend_setPreferredRange_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPreferredRange:");
}

id objc_msgSend_setPreferredRefreshDates_withReply_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPreferredRefreshDates:withReply:");
}

id objc_msgSend_setPresenting_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPresenting:");
}

id objc_msgSend_setPresubscribeService_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPresubscribeService:");
}

id objc_msgSend_setPreviousMode_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPreviousMode:");
}

id objc_msgSend_setPriority_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPriority:");
}

id objc_msgSend_setPrivateDataControllers_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPrivateDataControllers:");
}

id objc_msgSend_setPrivateDataUpdateCoordinator_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPrivateDataUpdateCoordinator:");
}

id objc_msgSend_setPurchaseFlowOverrideProvider_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPurchaseFlowOverrideProvider:");
}

id objc_msgSend_setPurchasedTagIDs_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPurchasedTagIDs:");
}

id objc_msgSend_setPurpose_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPurpose:");
}

id objc_msgSend_setQualityOfService_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setQualityOfService:");
}

id objc_msgSend_setQuery_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setQuery:");
}

id objc_msgSend_setQueryItems_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setQueryItems:");
}

id objc_msgSend_setQueuePriority_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setQueuePriority:");
}

id objc_msgSend_setRankInSource_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setRankInSource:");
}

id objc_msgSend_setRankedAllSubscribedTagIDs_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setRankedAllSubscribedTagIDs:");
}

id objc_msgSend_setRankedAllSubscriptionDates_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setRankedAllSubscriptionDates:");
}

id objc_msgSend_setRasterizationScale_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setRasterizationScale:");
}

id objc_msgSend_setReadingHistory_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setReadingHistory:");
}

id objc_msgSend_setReadingList_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setReadingList:");
}

id objc_msgSend_setRecentlyOpenedTags_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setRecentlyOpenedTags:");
}

id objc_msgSend_setRecentlyReadHistoryItems_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setRecentlyReadHistoryItems:");
}

id objc_msgSend_setReferringApplication_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setReferringApplication:");
}

id objc_msgSend_setReferringURL_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setReferringURL:");
}

id objc_msgSend_setRelatedUniqueIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setRelatedUniqueIdentifier:");
}

id objc_msgSend_setRelativePriority_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setRelativePriority:");
}

id objc_msgSend_setRemoteObjectInterface_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setRemoteObjectInterface:");
}

id objc_msgSend_setRemovedOnCompletion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setRemovedOnCompletion:");
}

id objc_msgSend_setRequiredResourceIDs_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setRequiredResourceIDs:");
}

id objc_msgSend_setResolver_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setResolver:");
}

id objc_msgSend_setResourceValue_forKey_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setResourceValue:forKey:error:");
}

id objc_msgSend_setResultAutoFavorites_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setResultAutoFavorites:");
}

id objc_msgSend_setResultCursor_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setResultCursor:");
}

id objc_msgSend_setRetryHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setRetryHandler:");
}

id objc_msgSend_setRowHeight_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setRowHeight:");
}

id objc_msgSend_setRunningPPT_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setRunningPPT:");
}

id objc_msgSend_setRunningPPTWithApplication_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setRunningPPTWithApplication:");
}

id objc_msgSend_setSafariAutoFavoriteCandidates_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSafariAutoFavoriteCandidates:");
}

id objc_msgSend_setSavedArticleIdentifiers_withReply_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSavedArticleIdentifiers:withReply:");
}

id objc_msgSend_setScale_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setScale:");
}

id objc_msgSend_setScaleAnimationDown_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setScaleAnimationDown:");
}

id objc_msgSend_setScaleAnimationUp_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setScaleAnimationUp:");
}

id objc_msgSend_setScheme_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setScheme:");
}

id objc_msgSend_setSectionInset_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSectionInset:");
}

id objc_msgSend_setSelectionTintColor_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSelectionTintColor:");
}

id objc_msgSend_setSessionDuration_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSessionDuration:");
}

id objc_msgSend_setShouldPrefetchGlobalTags_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setShouldPrefetchGlobalTags:");
}

id objc_msgSend_setShouldRasterize_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setShouldRasterize:");
}

id objc_msgSend_setShowUIPrompt_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setShowUIPrompt:");
}

id objc_msgSend_setSignalProcessingTimeInterval_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSignalProcessingTimeInterval:");
}

id objc_msgSend_setSorter_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSorter:");
}

id objc_msgSend_setSpotlightManager_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSpotlightManager:");
}

id objc_msgSend_setStartPoint_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setStartPoint:");
}

id objc_msgSend_setStiffness_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setStiffness:");
}

id objc_msgSend_setStroke(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setStroke");
}

id objc_msgSend_setStrokeColor_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setStrokeColor:");
}

id objc_msgSend_setSubscribedTagRanker_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSubscribedTagRanker:");
}

id objc_msgSend_setSubscriptionController_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSubscriptionController:");
}

id objc_msgSend_setSubscriptionModificationDelegate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSubscriptionModificationDelegate:");
}

id objc_msgSend_setSubscriptionMonitorDelegate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSubscriptionMonitorDelegate:");
}

id objc_msgSend_setSubscriptionState_animated_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSubscriptionState:animated:completion:");
}

id objc_msgSend_setSubtitle_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSubtitle:");
}

id objc_msgSend_setSubtitleColor_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSubtitleColor:");
}

id objc_msgSend_setSuggestedName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSuggestedName:");
}

id objc_msgSend_setSuspended_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSuspended:");
}

id objc_msgSend_setSuspendedDepth_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSuspendedDepth:");
}

id objc_msgSend_setSyncingWatchData_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSyncingWatchData:");
}

id objc_msgSend_setSystemNotificationEnabled_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSystemNotificationEnabled:");
}

id objc_msgSend_setTabiBasedUserVectorAggregateVectorProvider_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTabiBasedUserVectorAggregateVectorProvider:");
}

id objc_msgSend_setTag_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTag:");
}

id objc_msgSend_setTagController_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTagController:");
}

id objc_msgSend_setTagRanker_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTagRanker:");
}

id objc_msgSend_setTagResults_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTagResults:");
}

id objc_msgSend_setText_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setText:");
}

id objc_msgSend_setTextAlignment_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTextAlignment:");
}

id objc_msgSend_setTextColor_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTextColor:");
}

id objc_msgSend_setTextContent_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTextContent:");
}

id objc_msgSend_setThumbnailImage_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setThumbnailImage:");
}

id objc_msgSend_setThumbnailURL_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setThumbnailURL:");
}

id objc_msgSend_setTimeStyle_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTimeStyle:");
}

id objc_msgSend_setTimeZone_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTimeZone:");
}

id objc_msgSend_setTimingFunction_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTimingFunction:");
}

id objc_msgSend_setTitle_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTitle:");
}

id objc_msgSend_setToValue_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setToValue:");
}

id objc_msgSend_setTodayAgent_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTodayAgent:");
}

id objc_msgSend_setTopicBannerFrame_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTopicBannerFrame:");
}

id objc_msgSend_setTopicFont_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTopicFont:");
}

id objc_msgSend_setTopicPlaceholderImage_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTopicPlaceholderImage:");
}

id objc_msgSend_setTouchInsets_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTouchInsets:");
}

id objc_msgSend_setTransformBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTransformBlock:");
}

id objc_msgSend_setURLMappingData_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setURLMappingData:");
}

id objc_msgSend_setUnderlyingImageCache_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setUnderlyingImageCache:");
}

id objc_msgSend_setUnfilledStateImage_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setUnfilledStateImage:");
}

id objc_msgSend_setUrlMapping_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setUrlMapping:");
}

id objc_msgSend_setUrlRouterManager_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setUrlRouterManager:");
}

id objc_msgSend_setUserActivity_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setUserActivity:");
}

id objc_msgSend_setUserActivityType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setUserActivityType:");
}

id objc_msgSend_setUserInfo_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setUserInfo:");
}

id objc_msgSend_setUserOnboardingCompletionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setUserOnboardingCompletionHandler:");
}

id objc_msgSend_setUserResponseHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setUserResponseHandler:");
}

id objc_msgSend_setUserStartDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setUserStartDate:");
}

id objc_msgSend_setValue_forKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setValue:forKey:");
}

id objc_msgSend_setValue_forKeyPath_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setValue:forKeyPath:");
}

id objc_msgSend_setValues_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setValues:");
}

id objc_msgSend_setValuesForKeysWithDictionary_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setValuesForKeysWithDictionary:");
}

id objc_msgSend_setViewController_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setViewController:");
}

id objc_msgSend_setVisiblePath_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setVisiblePath:");
}

id objc_msgSend_setWhitelist_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setWhitelist:");
}

id objc_msgSend_setWhitelistData_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setWhitelistData:");
}

id objc_msgSend_setWidgetEngagement_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setWidgetEngagement:");
}

id objc_msgSend_setWidgetModeGroupID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setWidgetModeGroupID:");
}

id objc_msgSend_setWindowIsForeground_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setWindowIsForeground:");
}

id objc_msgSend_setWithArray_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setWithArray:");
}

id objc_msgSend_setWithObject_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setWithObject:");
}

id objc_msgSend_setWithObjects_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setWithObjects:");
}

id objc_msgSend_setXS_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setXS:");
}

id objc_msgSend_setXXXL_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setXXXL:");
}

id objc_msgSend_set_accessibilityFocusedIdentifierForRestoringAfterReload_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "set_accessibilityFocusedIdentifierForRestoringAfterReload:");
}

id objc_msgSend_settlingDuration(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "settlingDuration");
}

id objc_msgSend_setup(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setup");
}

id objc_msgSend_setupAnalyticsControllerWithFeldsparContext_versionHelpers_referral_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setupAnalyticsControllerWithFeldsparContext:versionHelpers:referral:");
}

id objc_msgSend_setupAnalyticsReferralWithOptions_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setupAnalyticsReferralWithOptions:");
}

id objc_msgSend_setupCloudContextWithAppActivityMonitor_dataActionProvider_versionHelpers_configurationManager_networkBehaviorMonitor_networkReachability_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setupCloudContextWithAppActivityMonitor:dataActionProvider:versionHelpers:configurationManager:networkBehaviorMonitor:networkReachability:");
}

id objc_msgSend_setupCloudContextWithFavoritesPersonalizer_state_launchOptions_versionHelpers_referral_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setupCloudContextWithFavoritesPersonalizer:state:launchOptions:versionHelpers:referral:");
}

id objc_msgSend_setupDestructiveDataAction(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setupDestructiveDataAction");
}

id objc_msgSend_setupFeldsparUserAgent(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setupFeldsparUserAgent");
}

id objc_msgSend_setupLanguages(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setupLanguages");
}

id objc_msgSend_setupNotificationManagerWithFeldsparContext_state_launchOptions_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setupNotificationManagerWithFeldsparContext:state:launchOptions:");
}

id objc_msgSend_setupUserDefaultsForPPT(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setupUserDefaultsForPPT");
}

id objc_msgSend_sharedAccount(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sharedAccount");
}

id objc_msgSend_sharedApplication(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sharedApplication");
}

id objc_msgSend_sharedContext(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sharedContext");
}

id objc_msgSend_sharedDelegate(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sharedDelegate");
}

id objc_msgSend_sharedDirectoryFileURL(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sharedDirectoryFileURL");
}

id objc_msgSend_sharedInstance(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sharedInstance");
}

id objc_msgSend_sharedNetworkReachability(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sharedNetworkReachability");
}

id objc_msgSend_sharedOperationQueue(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sharedOperationQueue");
}

id objc_msgSend_shortExcerpt(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "shortExcerpt");
}

id objc_msgSend_shortOperationDescription(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "shortOperationDescription");
}

id objc_msgSend_shortVersionString(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "shortVersionString");
}

id objc_msgSend_shortcutCategoryList(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "shortcutCategoryList");
}

id objc_msgSend_shortcutList(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "shortcutList");
}

id objc_msgSend_shouldAcceptAggregate_withCtr_minEvents_minClicks_minRate_baseRate_multiplier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "shouldAcceptAggregate:withCtr:minEvents:minClicks:minRate:baseRate:multiplier:");
}

id objc_msgSend_shouldAnimateImageLoadForCell_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "shouldAnimateImageLoadForCell:");
}

id objc_msgSend_shouldHandleNotification_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "shouldHandleNotification:");
}

id objc_msgSend_shouldHandleNotificationResponse_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "shouldHandleNotificationResponse:");
}

id objc_msgSend_shouldHideHeadline_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "shouldHideHeadline:");
}

id objc_msgSend_shouldLoadImageForCell_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "shouldLoadImageForCell:");
}

id objc_msgSend_shouldPrefetchForYouFeed(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "shouldPrefetchForYouFeed");
}

id objc_msgSend_shouldPresentLastAlertForCurrentUpdate(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "shouldPresentLastAlertForCurrentUpdate");
}

id objc_msgSend_shouldRejectTagID_withAggregate_baseline_currentDate_addedDate_maxIdleTime_minEvents_minRate_baseRate_multiplier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "shouldRejectTagID:withAggregate:baseline:currentDate:addedDate:maxIdleTime:minEvents:minRate:baseRate:multiplier:");
}

id objc_msgSend_shouldReturnThumbnail(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "shouldReturnThumbnail");
}

id objc_msgSend_shouldShowBadgeForArticleID_currentDocumentVersion_lastSeenDocumentVersion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "shouldShowBadgeForArticleID:currentDocumentVersion:lastSeenDocumentVersion:");
}

id objc_msgSend_shouldShowUpdateAlert(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "shouldShowUpdateAlert");
}

id objc_msgSend_shouldUseNewsUINotificationHandling(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "shouldUseNewsUINotificationHandling");
}

id objc_msgSend_showAppUpdateAlert(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "showAppUpdateAlert");
}

id objc_msgSend_showArticleWithID_notificationID_channelID_title_forceArticleUpdate_userActionDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "showArticleWithID:notificationID:channelID:title:forceArticleUpdate:userActionDate:");
}

id objc_msgSend_showBadge(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "showBadge");
}

id objc_msgSend_showHeadline_notificationID_userActionDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "showHeadline:notificationID:userActionDate:");
}

id objc_msgSend_showNotificationsEnabledAlertForTag_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "showNotificationsEnabledAlertForTag:");
}

id objc_msgSend_signalProcessingTimeInterval(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "signalProcessingTimeInterval");
}

id objc_msgSend_size(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "size");
}

id objc_msgSend_sizeCategory(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sizeCategory");
}

id objc_msgSend_sizeThatFits_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sizeThatFits:");
}

id objc_msgSend_skipDescendants(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "skipDescendants");
}

id objc_msgSend_slowCachedTagForID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "slowCachedTagForID:");
}

id objc_msgSend_snapshotPreparedAndWaitingForRestoration(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "snapshotPreparedAndWaitingForRestoration");
}

id objc_msgSend_snapshotURL(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "snapshotURL");
}

id objc_msgSend_snapshotURLForCachesURL_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "snapshotURLForCachesURL:");
}

id objc_msgSend_sortSubscriptionsAlphabetically_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sortSubscriptionsAlphabetically:");
}

id objc_msgSend_sortSubscriptionsByRecency_sortedPopularTagIDs_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sortSubscriptionsByRecency:sortedPopularTagIDs:");
}

id objc_msgSend_sortUsingComparator_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sortUsingComparator:");
}

id objc_msgSend_sortedArrayUsingComparator_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sortedArrayUsingComparator:");
}

id objc_msgSend_sortedArrayWithOptions_usingComparator_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sortedArrayWithOptions:usingComparator:");
}

id objc_msgSend_sortedVisitedArticleIDs(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sortedVisitedArticleIDs");
}

id objc_msgSend_sorter(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sorter");
}

id objc_msgSend_sourceChannel(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sourceChannel");
}

id objc_msgSend_sourceChannelID(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sourceChannelID");
}

id objc_msgSend_sourceChannelRecordData(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sourceChannelRecordData");
}

id objc_msgSend_sourceName(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sourceName");
}

id objc_msgSend_spaceBetweenHorizontalDividerAndTopicNameForCardSize_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "spaceBetweenHorizontalDividerAndTopicNameForCardSize:");
}

id objc_msgSend_spaceBetweenTopicTitleAndHorizontalDividerForCardSize_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "spaceBetweenTopicTitleAndHorizontalDividerForCardSize:");
}

id objc_msgSend_specifiedValueForContentSizeCategory_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "specifiedValueForContentSizeCategory:");
}

id objc_msgSend_splitScreen(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "splitScreen");
}

id objc_msgSend_splitScreenEqual(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "splitScreenEqual");
}

id objc_msgSend_sportsEventController(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sportsEventController");
}

id objc_msgSend_spotlightManager(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "spotlightManager");
}

id objc_msgSend_spotlightQueue(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "spotlightQueue");
}

id objc_msgSend_standardUserDefaults(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "standardUserDefaults");
}

id objc_msgSend_startAnimating(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "startAnimating");
}

id objc_msgSend_startPoint(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "startPoint");
}

id objc_msgSend_startRecordingExposure(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "startRecordingExposure");
}

id objc_msgSend_startSessionIfNeededWithReferral_sceneID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "startSessionIfNeededWithReferral:sceneID:");
}

id objc_msgSend_state(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "state");
}

id objc_msgSend_stateRestorationURL(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stateRestorationURL");
}

id objc_msgSend_status(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "status");
}

id objc_msgSend_stopAnimating(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stopAnimating");
}

id objc_msgSend_storage(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "storage");
}

id objc_msgSend_storeQueue(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "storeQueue");
}

id objc_msgSend_string(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "string");
}

id objc_msgSend_stringByAppendingPathComponent_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stringByAppendingPathComponent:");
}

id objc_msgSend_stringByAppendingString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stringByAppendingString:");
}

id objc_msgSend_stringByRemovingPercentEncoding(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stringByRemovingPercentEncoding");
}

id objc_msgSend_stringByReplacingOccurrencesOfString_withString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stringByReplacingOccurrencesOfString:withString:");
}

id objc_msgSend_stringByTrimmingCharactersInSet_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stringByTrimmingCharactersInSet:");
}

id objc_msgSend_stringForKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stringForKey:");
}

id objc_msgSend_stringFromDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stringFromDate:");
}

id objc_msgSend_stringWithFormat_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stringWithFormat:");
}

id objc_msgSend_strings(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "strings");
}

id objc_msgSend_strippedString(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "strippedString");
}

id objc_msgSend_stroke(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stroke");
}

id objc_msgSend_style(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "style");
}

id objc_msgSend_subscribeNotificationPromptForTagID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "subscribeNotificationPromptForTagID:");
}

id objc_msgSend_subscribedTagForTagID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "subscribedTagForTagID:");
}

id objc_msgSend_subscribedTagIDs(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "subscribedTagIDs");
}

id objc_msgSend_subscriptionButton(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "subscriptionButton");
}

id objc_msgSend_subscriptionController(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "subscriptionController");
}

id objc_msgSend_subscriptionForTagID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "subscriptionForTagID:");
}

id objc_msgSend_subscriptionList(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "subscriptionList");
}

id objc_msgSend_subscriptionModificationDelegate(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "subscriptionModificationDelegate");
}

id objc_msgSend_subscriptionMonitorDelegate(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "subscriptionMonitorDelegate");
}

id objc_msgSend_subscriptionOrigin(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "subscriptionOrigin");
}

id objc_msgSend_subscriptionState(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "subscriptionState");
}

id objc_msgSend_subscriptionsWithType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "subscriptionsWithType:");
}

id objc_msgSend_substringFromIndex_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "substringFromIndex:");
}

id objc_msgSend_substringWithRange_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "substringWithRange:");
}

id objc_msgSend_subtitle(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "subtitle");
}

id objc_msgSend_subtitleColor(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "subtitleColor");
}

id objc_msgSend_subtitleColorString(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "subtitleColorString");
}

id objc_msgSend_subviews(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "subviews");
}

id objc_msgSend_superview(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "superview");
}

id objc_msgSend_supportsContentExtensions(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "supportsContentExtensions");
}

id objc_msgSend_supportsNotifications(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "supportsNotifications");
}

id objc_msgSend_suspendedDepth(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "suspendedDepth");
}

id objc_msgSend_syncWithCompletion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "syncWithCompletion:");
}

id objc_msgSend_syncWithGizmo(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "syncWithGizmo");
}

id objc_msgSend_synchronize(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "synchronize");
}

id objc_msgSend_synchronousImageLoadingEnabled(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "synchronousImageLoadingEnabled");
}

id objc_msgSend_syncingWatchData(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "syncingWatchData");
}

id objc_msgSend_system(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "system");
}

id objc_msgSend_systemBackgroundColor(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "systemBackgroundColor");
}

id objc_msgSend_systemFontOfSize_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "systemFontOfSize:");
}

id objc_msgSend_systemFontOfSize_weight_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "systemFontOfSize:weight:");
}

id objc_msgSend_systemGrayColor(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "systemGrayColor");
}

id objc_msgSend_systemNotificationEnabled(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "systemNotificationEnabled");
}

id objc_msgSend_systemPinkColor(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "systemPinkColor");
}

id objc_msgSend_systemVersion(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "systemVersion");
}

id objc_msgSend_systemVersionNumber(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "systemVersionNumber");
}

id objc_msgSend_systemVersionString(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "systemVersionString");
}

id objc_msgSend_tableViewDataOffset(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "tableViewDataOffset");
}

id objc_msgSend_tableViews(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "tableViews");
}

id objc_msgSend_tag(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "tag");
}

id objc_msgSend_tagController(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "tagController");
}

id objc_msgSend_tagEditorialItemDownloader(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "tagEditorialItemDownloader");
}

id objc_msgSend_tagID(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "tagID");
}

id objc_msgSend_tagImageLayer(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "tagImageLayer");
}

id objc_msgSend_tagOpenedDate(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "tagOpenedDate");
}

id objc_msgSend_tagRanker(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "tagRanker");
}

id objc_msgSend_tagResults(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "tagResults");
}

id objc_msgSend_tagScoresForBundleID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "tagScoresForBundleID:");
}

id objc_msgSend_tagScoresForURL_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "tagScoresForURL:");
}

id objc_msgSend_tagType(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "tagType");
}

id objc_msgSend_tags(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "tags");
}

id objc_msgSend_tappedEditorialItemWithIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "tappedEditorialItemWithIdentifier:");
}

id objc_msgSend_targetFrame(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "targetFrame");
}

id objc_msgSend_tempRestoreURL(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "tempRestoreURL");
}

id objc_msgSend_text(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "text");
}

id objc_msgSend_textColorForTag_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "textColorForTag:");
}

id objc_msgSend_textLabel(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "textLabel");
}

id objc_msgSend_textMargin(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "textMargin");
}

id objc_msgSend_theme(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "theme");
}

id objc_msgSend_thenOn_then_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "thenOn:then:");
}

id objc_msgSend_thumbnailAssetHandle(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "thumbnailAssetHandle");
}

id objc_msgSend_thumbnailCreator(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "thumbnailCreator");
}

id objc_msgSend_thumbnailImage(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "thumbnailImage");
}

id objc_msgSend_thumbnailImageIdentifier(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "thumbnailImageIdentifier");
}

id objc_msgSend_tickle(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "tickle");
}

id objc_msgSend_tickleWithCompletion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "tickleWithCompletion:");
}

id objc_msgSend_tickleWithQualityOfService_data_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "tickleWithQualityOfService:data:completion:");
}

id objc_msgSend_timeIntervalSince1970(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "timeIntervalSince1970");
}

id objc_msgSend_timeIntervalSinceDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "timeIntervalSinceDate:");
}

id objc_msgSend_timeIntervalSinceReferenceDate(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "timeIntervalSinceReferenceDate");
}

id objc_msgSend_timeSinceLastBackgroundFetch(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "timeSinceLastBackgroundFetch");
}

id objc_msgSend_timeZoneWithName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "timeZoneWithName:");
}

id objc_msgSend_timestamp(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "timestamp");
}

id objc_msgSend_tintColor(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "tintColor");
}

id objc_msgSend_title(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "title");
}

id objc_msgSend_todayAgent(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "todayAgent");
}

id objc_msgSend_todayPrivateDataAccessor(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "todayPrivateDataAccessor");
}

id objc_msgSend_topStoriesConfig(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "topStoriesConfig");
}

id objc_msgSend_topStoriesPublishDates(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "topStoriesPublishDates");
}

id objc_msgSend_topicBannerFrame(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "topicBannerFrame");
}

id objc_msgSend_topicColorsMapping(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "topicColorsMapping");
}

id objc_msgSend_topicFont(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "topicFont");
}

id objc_msgSend_topicFrameForSize_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "topicFrameForSize:");
}

id objc_msgSend_topicPlaceholderImage(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "topicPlaceholderImage");
}

id objc_msgSend_topicTextAttributesForCardSize_textColor_sizeCategory_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "topicTextAttributesForCardSize:textColor:sizeCategory:");
}

id objc_msgSend_topicTextRect_cardSize_textPadPath_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "topicTextRect:cardSize:textPadPath:");
}

id objc_msgSend_topicTextSize_cardSize_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "topicTextSize:cardSize:");
}

id objc_msgSend_topicTitleAttributesForCardSize_textColor_sizeCategory_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "topicTitleAttributesForCardSize:textColor:sizeCategory:");
}

id objc_msgSend_topicTitleTextSize_cardSize_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "topicTitleTextSize:cardSize:");
}

id objc_msgSend_topicTitleTopMarginForCardSize_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "topicTitleTopMarginForCardSize:");
}

id objc_msgSend_traitCollection(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "traitCollection");
}

id objc_msgSend_traitCollectionWithHorizontalSizeClass_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "traitCollectionWithHorizontalSizeClass:");
}

id objc_msgSend_transactionOfIdentity(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "transactionOfIdentity");
}

id objc_msgSend_transactionProcessingGroup(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "transactionProcessingGroup");
}

id objc_msgSend_transactionToClearSeenArticles(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "transactionToClearSeenArticles");
}

id objc_msgSend_transactionToMutateSeenArticlesWithInsertedOrUpdatedHistoryItems_deletedArticleIDs_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "transactionToMutateSeenArticlesWithInsertedOrUpdatedHistoryItems:deletedArticleIDs:");
}

id objc_msgSend_transformBlock(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "transformBlock");
}

id objc_msgSend_transitionWithView_duration_options_animations_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "transitionWithView:duration:options:animations:completion:");
}

id objc_msgSend_transitioningToSize(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "transitioningToSize");
}

id objc_msgSend_translateFileURLForURL_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "translateFileURLForURL:");
}

id objc_msgSend_translationManager(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "translationManager");
}

id objc_msgSend_triggerWithTimeInterval_repeats_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "triggerWithTimeInterval:repeats:");
}

id objc_msgSend_trimTheArticle_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "trimTheArticle:");
}

id objc_msgSend_ts_executeWithAnimated_duration_setupBlock_animationBlock_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "ts_executeWithAnimated:duration:setupBlock:animationBlock:completion:");
}

id objc_msgSend_type(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "type");
}

id objc_msgSend_unarchivedObjectOfClass_fromData_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "unarchivedObjectOfClass:fromData:error:");
}

id objc_msgSend_unarchivedObjectOfClasses_fromData_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "unarchivedObjectOfClasses:fromData:error:");
}

id objc_msgSend_underlyingImageCache(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "underlyingImageCache");
}

id objc_msgSend_unfilledStateImage(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "unfilledStateImage");
}

id objc_msgSend_uniqueKey(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "uniqueKey");
}

id objc_msgSend_unlock(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "unlock");
}

id objc_msgSend_unregisterFontWithURL_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "unregisterFontWithURL:");
}

id objc_msgSend_unregisterForDeviceLockNotifications(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "unregisterForDeviceLockNotifications");
}

id objc_msgSend_unregisterForRemoteNotifications(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "unregisterForRemoteNotifications");
}

id objc_msgSend_unsignedIntegerValue(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "unsignedIntegerValue");
}

id objc_msgSend_updateAlertDidDismiss_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateAlertDidDismiss:");
}

id objc_msgSend_updateAppObsolescenceState(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateAppObsolescenceState");
}

id objc_msgSend_updateEditorialItemWith_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateEditorialItemWith:");
}

id objc_msgSend_updateFeatures_withAction_displayRank_groupRank_groupType_individually_configurableValues_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateFeatures:withAction:displayRank:groupRank:groupType:individually:configurableValues:");
}

id objc_msgSend_updateInfos(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateInfos");
}

id objc_msgSend_updateOnboardingVersion(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateOnboardingVersion");
}

id objc_msgSend_updatePrivateDataControllersWithCompletion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updatePrivateDataControllersWithCompletion:");
}

id objc_msgSend_updateQueue(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateQueue");
}

id objc_msgSend_updateUnderlyingMappingWithQualityOfService_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateUnderlyingMappingWithQualityOfService:completion:");
}

id objc_msgSend_updatedIndexPaths(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updatedIndexPaths");
}

id objc_msgSend_updatedSections(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updatedSections");
}

id objc_msgSend_uppercaseString(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "uppercaseString");
}

id objc_msgSend_url(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "url");
}

id objc_msgSend_urlMapping(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "urlMapping");
}

id objc_msgSend_urlRouterManager(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "urlRouterManager");
}

id objc_msgSend_useManagedContextWithSize_opaque_forceSRGB_scale_contextBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "useManagedContextWithSize:opaque:forceSRGB:scale:contextBlock:");
}

id objc_msgSend_useManagedContextWithSize_opaque_scale_contextBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "useManagedContextWithSize:opaque:scale:contextBlock:");
}

id objc_msgSend_userActivityManager(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "userActivityManager");
}

id objc_msgSend_userActivityType(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "userActivityType");
}

id objc_msgSend_userEmbeddingGenerator(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "userEmbeddingGenerator");
}

id objc_msgSend_userEventHistory(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "userEventHistory");
}

id objc_msgSend_userEventHistoryStorage(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "userEventHistoryStorage");
}

id objc_msgSend_userIDDeterminationGroup(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "userIDDeterminationGroup");
}

id objc_msgSend_userInfo(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "userInfo");
}

id objc_msgSend_userInterfaceIdiom(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "userInterfaceIdiom");
}

id objc_msgSend_userInterfaceStyle(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "userInterfaceStyle");
}

id objc_msgSend_userOnboardingCompletionHandler(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "userOnboardingCompletionHandler");
}

id objc_msgSend_userResponseHandler(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "userResponseHandler");
}

id objc_msgSend_userStartDate(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "userStartDate");
}

id objc_msgSend_validateCommand_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "validateCommand:");
}

id objc_msgSend_value(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "value");
}

id objc_msgSend_valueForKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "valueForKey:");
}

id objc_msgSend_valueForKeyPath_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "valueForKeyPath:");
}

id objc_msgSend_valueSpecifierWithXS_L_XXXL_AXXXL_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "valueSpecifierWithXS:L:XXXL:AXXXL:");
}

id objc_msgSend_valueSpecifierWithXSFactor_largeSize_XXXLFactor_AXXXLFactor_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "valueSpecifierWithXSFactor:largeSize:XXXLFactor:AXXXLFactor:");
}

id objc_msgSend_valueWithCGSize_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "valueWithCGSize:");
}

id objc_msgSend_values(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "values");
}

id objc_msgSend_vectorWithValues_count_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "vectorWithValues:count:");
}

id objc_msgSend_versionHelpers(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "versionHelpers");
}

id objc_msgSend_view(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "view");
}

id objc_msgSend_viewController(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "viewController");
}

id objc_msgSend_visibleCells(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "visibleCells");
}

id objc_msgSend_visiblePathForIndexPath_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "visiblePathForIndexPath:");
}

id objc_msgSend_wasHandled(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "wasHandled");
}

id objc_msgSend_weakObjectsHashTable(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "weakObjectsHashTable");
}

id objc_msgSend_webContent(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "webContent");
}

id objc_msgSend_whenResolvingProtocol_scope_callbackBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "whenResolvingProtocol:scope:callbackBlock:");
}

id objc_msgSend_whiteColor(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "whiteColor");
}

id objc_msgSend_whitelist(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "whitelist");
}

id objc_msgSend_whitespaceAndNewlineCharacterSet(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "whitespaceAndNewlineCharacterSet");
}

id objc_msgSend_whitespaceCharacterSet(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "whitespaceCharacterSet");
}

id objc_msgSend_widgetEngagement(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "widgetEngagement");
}

id objc_msgSend_widgetModeGroupID(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "widgetModeGroupID");
}

id objc_msgSend_window(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "window");
}

id objc_msgSend_windowScene(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "windowScene");
}

id objc_msgSend_withConfiguration_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "withConfiguration:");
}

id objc_msgSend_writeToFile_options_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "writeToFile:options:error:");
}

id objc_msgSend_writeToURL_options_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "writeToURL:options:error:");
}
