void ITColor::ITColor(ITColor *this)
{
  this->mRed = 0.0;
  this->mGreen = 0.0;
  this->mBlue = 0.0;
  this->mAlpha = 1.0;
}

void ITColor::ITColor(ITColor *this, double a2, double a3, double a4, double a5)
{
  this->mRed = a2;
  this->mGreen = a3;
  this->mBlue = a4;
  this->mAlpha = a5;
}

double ITColor::CreateFromHSVColor(double *a1)
{
  uint64_t v2;
  uint64_t v3;
  double v4;

  v4 = 0.0;
  v2 = 0;
  v3 = 0;
  sub_100006468(&v4, (double *)&v3, (double *)&v2, *a1, a1[1], a1[2]);
  return v4;
}

double *sub_100006468(double *result, double *a2, double *a3, double a4, double a5, double a6)
{
  double v6;
  double v7;
  double v8;
  int v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  BOOL v19;
  BOOL v20;

  if (a5 > 1.0)
    a5 = 1.0;
  if (a5 >= 0.0)
    v6 = a5;
  else
    v6 = 0.0;
  if (a6 <= 1.0)
    v7 = a6;
  else
    v7 = 1.0;
  if (v7 < 0.0)
    v7 = 0.0;
  if (v6 == 0.0)
  {
    *result = v7;
    *a2 = v7;
  }
  else
  {
    if (a4 > 1.0)
      a4 = 1.0;
    if (a4 >= 0.0)
      v8 = a4 * 6.0;
    else
      v8 = 0.0;
    v9 = (int)v8;
    v10 = v6 * v7 * (v8 - (double)(int)v8);
    v11 = v7 - v6 * v7;
    v12 = v11 + v10;
    if (v11 + v10 > 1.0)
      v12 = 1.0;
    v13 = v7 - v10;
    if (v13 > 1.0)
      v13 = 1.0;
    v14 = v11;
    if ((v9 & 1) != 0)
      v15 = v13;
    else
      v15 = v12;
    if (v14 <= 1.0)
      v16 = v14;
    else
      v16 = 1.0;
    v17 = v7;
    switch(v9)
    {
      case 0:
      case 5:
        break;
      case 1:
      case 4:
        v17 = v15;
        break;
      default:
        v17 = v16;
        break;
    }
    *result = v17;
    v18 = v7;
    if ((v9 - 1) >= 2)
    {
      v19 = v9 == 3 || v9 == 0;
      v18 = v15;
      if (!v19)
        v18 = v16;
    }
    *a2 = v18;
    if ((v9 - 3) >= 2)
    {
      v20 = v9 == 5 || v9 == 2;
      v7 = v15;
      if (!v20)
        v7 = v16;
    }
  }
  *a3 = v7;
  return result;
}

double ITColor::CreateFromHSVDoubles(ITColor *this, double a2, double a3, double a4)
{
  uint64_t v5;
  uint64_t v6;
  double v7;

  v7 = 0.0;
  v5 = 0;
  v6 = 0;
  sub_100006468(&v7, (double *)&v6, (double *)&v5, a2, a3, a4);
  return v7;
}

double ITColor::GetHSVColor(ITColor *this)
{
  double v2;
  uint64_t v3;
  uint64_t v4;

  sub_1000065FC(&v2, (double *)&v3, (double *)&v4, this->mRed, this->mGreen, this->mBlue);
  return v2;
}

double *sub_1000065FC(double *result, double *a2, double *a3, double a4, double a5, double a6)
{
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;

  if (a4 >= 1.0)
    a4 = 1.0;
  v6 = 0.0;
  if (a4 < 0.0)
    a4 = 0.0;
  if (a5 >= 1.0)
    a5 = 1.0;
  if (a5 < 0.0)
    a5 = 0.0;
  if (a6 >= 1.0)
    a6 = 1.0;
  if (a6 >= 0.0)
    v7 = a6;
  else
    v7 = 0.0;
  if (a5 <= a4)
    v8 = a4;
  else
    v8 = a5;
  if (a5 >= a4)
    v9 = a4;
  else
    v9 = a5;
  if (v7 <= a4)
    v10 = a4;
  else
    v10 = v7;
  if (v7 >= a4)
    v11 = a4;
  else
    v11 = v7;
  if (a5 <= v7)
    v8 = v10;
  if (a5 >= v7)
    v9 = v11;
  if (v8 <= 1.0)
    v12 = v8;
  else
    v12 = 1.0;
  *a3 = v12;
  if (v8 == 0.0)
  {
    *a2 = 0.0;
  }
  else
  {
    v13 = v8 - v9;
    v14 = v13 / v8;
    if (v13 / v8 <= 1.0)
    {
      *a2 = v14;
      if (v14 == 0.0)
        goto LABEL_51;
    }
    else
    {
      *a2 = 1.0;
    }
    if (v13 == 0.0)
    {
      v15 = 0.0;
      v16 = 0.0;
    }
    else
    {
      v6 = (v8 - a4) / v13;
      v15 = (v8 - a5) / v13;
      v16 = (v8 - v7) / v13;
    }
    if (a4 == v8)
    {
      v17 = v16 - v15;
    }
    else if (a5 == v8)
    {
      v17 = v6 + 2.0 - v16;
    }
    else
    {
      v17 = v15 + 4.0 - v6;
    }
    v18 = v17 / 6.0;
    if (v18 < 0.0)
      v18 = v18 + 1.0;
    if (v18 <= 1.0)
      v6 = v18;
    else
      v6 = 1.0;
  }
LABEL_51:
  *result = v6;
  return result;
}

void ITColor::GetLuminance(ITColor *this)
{
  uint64_t v1;
  double v2;
  double v3;
  __int128 v4;
  double mBlue;

  v1 = 0;
  v4 = *(_OWORD *)&this->mRed;
  mBlue = this->mBlue;
  do
  {
    v2 = *(double *)((char *)&v4 + v1);
    if (v2 <= 0.0392800011)
      v3 = v2 / 12.9200001;
    else
      v3 = pow((v2 + 0.0549999997) / 1.05499995, 2.4);
    *(double *)((char *)&v4 + v1) = v3;
    v1 += 8;
  }
  while (v1 != 24);
}

double ITColor::GetContrastWithColor(ITColor *this, ITColor *a2)
{
  double v3;
  double v4;
  double v5;
  double v6;

  ITColor::GetLuminance(a2);
  v4 = v3;
  ITColor::GetLuminance(this);
  if (v5 <= v4)
    v6 = v4;
  else
    v6 = v5;
  if (v5 > v4)
    v5 = v4;
  return (v6 + 0.0500000007) / (v5 + 0.0500000007);
}

double ITColor::GetContrastWithLuminance(ITColor *this, double a2)
{
  double v3;
  double v4;

  ITColor::GetLuminance(this);
  if (v3 <= a2)
    v4 = a2;
  else
    v4 = v3;
  if (v3 > a2)
    v3 = a2;
  return (v4 + 0.0500000007) / (v3 + 0.0500000007);
}

double ITColor::CreateBlendedColorWithFraction(ITColor *this, double a2, ITColor a3)
{
  if (a2 < 1.0)
  {
    if (a2 <= 0.0)
      a3.mRed = this->mRed;
    else
      a3.mRed = (1.0 - a2) * this->mRed + a3.mRed * a2;
  }
  return a3.mRed;
}

BOOL isCloseToColor(ITColor *a1, double a2, double a3, double a4, double a5, double a6, double a7, double a8, double a9, double a10)
{
  double v23;
  double v24;
  double v25;
  ITColor *v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  ITColor v33;
  ITColor v34;

  if ((_DWORD)a1 && (a3 < 0.0500000007 && a7 < 0.0500000007 || a5 < 0.0149999997 && a9 < 0.0149999997))
  {
    v34.mRed = ITColor::CreateFromHSVDoubles(a1, a2, a3, a4);
    v34.mGreen = v23;
    v34.mBlue = v24;
    v34.mAlpha = v25;
    v33.mRed = ITColor::CreateFromHSVDoubles(v26, a6, a7, a8);
    v33.mGreen = v27;
    v33.mBlue = v28;
    v33.mAlpha = v29;
    if (ITColor::GetContrastWithColor(&v34, &v33) <= 1.65999997)
      return 1;
  }
  if (vabdd_f64(a3, a7) > a10 || vabdd_f64(a4, a8) > a10)
    return 0;
  if (vabdd_f64(a2, a6) <= a10)
    return 1;
  v30 = a2 + 1.0;
  if (a2 >= a10)
    v30 = a2;
  v31 = a6 + 1.0;
  if (a6 >= a10)
    v31 = a6;
  return vabdd_f64(v30, v31) <= a10;
}

void ImageAnalyzer::ImageAnalyzer(ImageAnalyzer *this)
{
  ITColor::ITColor((ITColor *)((char *)this + 40));
  ITColor::ITColor((ITColor *)((char *)this + 72));
  ITColor::ITColor((ITColor *)((char *)this + 104));
  ITColor::ITColor((ITColor *)((char *)this + 136));
  ITColor::ITColor((ITColor *)((char *)this + 168));
  ITColor::ITColor((ITColor *)((char *)this + 200));
  ITColor::ITColor((ITColor *)((char *)this + 232));
  ITColor::ITColor((ITColor *)((char *)this + 264));
  ITColor::ITColor((ITColor *)((char *)this + 296));
  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  *(_OWORD *)((char *)this + 328) = 0u;
  *(_OWORD *)((char *)this + 344) = 0u;
  *(_OWORD *)((char *)this + 360) = 0u;
  *(_OWORD *)((char *)this + 376) = 0u;
}

void ImageAnalyzer::~ImageAnalyzer(ImageAnalyzer *this)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  v2 = *(void **)this;
  if (v2)
  {
    free(v2);
    *(_QWORD *)this = 0;
  }
  v3 = (void *)*((_QWORD *)this + 2);
  if (v3)
  {
    free(v3);
    *((_QWORD *)this + 2) = 0;
  }
  v4 = (void *)*((_QWORD *)this + 1);
  if (v4)
  {
    free(v4);
    *((_QWORD *)this + 1) = 0;
  }
  v5 = (void *)*((_QWORD *)this + 44);
  if (v5)
  {
    *((_QWORD *)this + 45) = v5;
    operator delete(v5);
  }
  v6 = (void *)*((_QWORD *)this + 41);
  if (v6)
  {
    *((_QWORD *)this + 42) = v6;
    operator delete(v6);
  }
}

uint64_t ImageAnalyzer::AnalyzeImage(ImageAnalyzer *this, CGContext *a2)
{
  uint64_t result;

  if (!a2)
    return 0;
  result = ImageAnalyzer::GenerateColorMaps(this, a2);
  if ((_DWORD)result)
  {
    result = ImageAnalyzer::QuantizeColorMaps(this);
    if ((_DWORD)result)
    {
      ImageAnalyzer::PickBackgroundColor(this);
      ImageAnalyzer::PickTextColors(this);
      ImageAnalyzer::DoPostImageAnalysis(this);
      return 1;
    }
  }
  return result;
}

uint64_t ImageAnalyzer::GenerateColorMaps(ImageAnalyzer *this, CGContextRef context)
{
  int Width;
  int Height;
  uint64_t result;
  __int16 BitmapInfo;
  size_t v8;
  double v9;
  double v10;
  unint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t i;
  uint64_t v15;
  uint64_t v16;
  size_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  double HSVColor;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  double *v27;
  uint64_t v28;
  double v29;
  uint64_t v30;
  double *v31;
  uint64_t v32;
  uint64_t v33;
  size_t BytesPerRow;
  ITColor v35;
  ITColor v36;

  if (!context)
    return 0;
  BytesPerRow = CGBitmapContextGetBytesPerRow(context);
  Width = CGBitmapContextGetWidth(context);
  Height = CGBitmapContextGetHeight(context);
  result = 0;
  if (Height == 102 && Width == 102)
  {
    ITColor::ITColor(&v35);
    BitmapInfo = CGBitmapContextGetBitmapInfo(context);
    result = (uint64_t)CGBitmapContextGetData(context);
    v33 = result;
    if (result)
    {
      v8 = (102 * Width);
      result = (uint64_t)malloc_type_calloc(v8, 0x20uLL, 0x1000040E0EAB150uLL);
      *(_QWORD *)this = result;
      if (result)
      {
        result = (uint64_t)malloc_type_calloc(v8, 0x20uLL, 0x1000040E0EAB150uLL);
        *((_QWORD *)this + 1) = result;
        if (result)
        {
          v12 = 0;
          v13 = BitmapInfo & 0x3000;
          for (i = 1; i != 101; ++i)
          {
            v15 = 0;
            v16 = 24;
            do
            {
              v17 = v33 + BytesPerRow * i + v15;
              if (v13)
                v18 = 6;
              else
                v18 = 5;
              if (v13)
                v19 = 5;
              else
                v19 = 6;
              if (v13)
                v20 = 4;
              else
                v20 = 7;
              LOBYTE(v9) = *(_BYTE *)(v17 + v18);
              LOBYTE(v10) = *(_BYTE *)(v17 + v19);
              LOBYTE(v11) = *(_BYTE *)(v17 + v20);
              ITColor::ITColor(&v36, (double)*(unint64_t *)&v9 / 255.0, (double)*(unint64_t *)&v10 / 255.0, (double)v11 / 255.0, 1.0);
              v35 = v36;
              HSVColor = ITColor::GetHSVColor(&v36);
              v23 = v22;
              v25 = v24;
              ITColor::GetLuminance(&v36);
              v26 = *(_QWORD *)this + v12;
              v27 = (double *)(v26 + v16);
              *(v27 - 3) = HSVColor;
              v28 = v26 + 8 * v15;
              *(_QWORD *)(v28 + 8) = v23;
              *(_QWORD *)(v28 + 16) = v25;
              *v27 = v29;
              v30 = *((_QWORD *)this + 1) + v12;
              v31 = (double *)(v30 + v16);
              *(v31 - 3) = HSVColor;
              v32 = v30 + 8 * v15;
              *(_QWORD *)(v32 + 8) = v23;
              *(_QWORD *)(v32 + 16) = v25;
              *v31 = v29;
              v10 = *((double *)this + 48);
              v9 = v29 + v10;
              *((double *)this + 48) = v9;
              v15 += 4;
              v16 += 32;
            }
            while ((_DWORD)v15 != 400);
            v12 += 3200;
          }
          *((double *)this + 48) = v9 / 10000.0;
          return 1;
        }
      }
    }
  }
  return result;
}

uint64_t ImageAnalyzer::QuantizeColorMaps(ImageAnalyzer *this)
{
  uint64_t result;
  _BYTE *v3;
  uint64_t v4;
  double *v5;
  unint64_t v6;
  uint64_t v7;
  double *v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  unint64_t v15;
  unint64_t v16;
  double *v17;
  uint64_t v18;
  double *v19;
  char *v20;
  double *v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  unsigned int (*v27)(_QWORD, _QWORD);
  unsigned int (*v28)(_QWORD, _QWORD);
  unsigned int (*v29)(_QWORD, _QWORD);
  unsigned int (*v30)(_QWORD, _QWORD);
  _BOOL8 v31;
  double v32;
  uint64_t v33;
  uint64_t v34;
  double v35;
  unint64_t v36;
  double *v37;
  unint64_t v38;
  uint64_t v39;
  double v40;
  _OWORD *v41;
  __int128 v42;
  _OWORD *v43;
  unsigned int (*v44[4])(_QWORD, _QWORD);
  int v45;
  double v46;
  void *__p;
  double *v48;
  double *v49;

  result = (uint64_t)malloc_type_calloc(0x2710uLL, 8uLL, 0x100004000313F17uLL);
  *((_QWORD *)this + 2) = result;
  if (result)
  {
    result = (uint64_t)malloc_type_calloc(0x2710uLL, 1uLL, 0x100004077774924uLL);
    if (result)
    {
      v3 = (_BYTE *)result;
      v4 = 0;
      v5 = 0;
      v6 = 0;
      __p = 0;
      v48 = 0;
      v49 = 0;
      v7 = 1;
      do
      {
        if (!v3[v6])
        {
          v8 = (double *)(*(_QWORD *)this + 32 * v6);
          v9 = *v8;
          v10 = v8[1];
          v11 = v8[2];
          v12 = v8[3];
          v13 = ImageAnalyzer::WeightForPointOnEdge((ImageAnalyzer *)result, v6 - 100 * ((unsigned __int16)v6 / 0x64u), (unsigned __int16)v6 / 0x64u);
          v14 = v13;
          v48 = v5;
          if (v5 >= v49)
          {
            v15 = 0x5555555555555556 * (((char *)v49 - (char *)v5) >> 4);
            if (v15 <= 1)
              v15 = 1;
            if (0xAAAAAAAAAAAAAAABLL * (((char *)v49 - (char *)v5) >> 4) >= 0x2AAAAAAAAAAAAAALL)
              v16 = 0x555555555555555;
            else
              v16 = v15;
            v17 = (double *)sub_100008BD0((uint64_t)&v49, v16);
            *v17 = v9;
            v17[1] = v10;
            v17[2] = v11;
            v17[3] = v12;
            *((_DWORD *)v17 + 8) = v6;
            v17[5] = v14;
            v20 = (char *)__p;
            v19 = v48;
            v21 = v17;
            if (v48 != __p)
            {
              do
              {
                v22 = *((_OWORD *)v19 - 3);
                v23 = *((_OWORD *)v19 - 1);
                *((_OWORD *)v21 - 2) = *((_OWORD *)v19 - 2);
                *((_OWORD *)v21 - 1) = v23;
                *((_OWORD *)v21 - 3) = v22;
                v21 -= 6;
                v19 -= 6;
              }
              while (v19 != (double *)v20);
              v19 = (double *)v20;
            }
            v5 = v17 + 6;
            __p = v21;
            v48 = v17 + 6;
            v49 = &v17[6 * v18];
            if (v19)
              operator delete(v19);
          }
          else
          {
            *v5 = v9;
            v5[1] = v10;
            v5[2] = v11;
            v5[3] = v12;
            *((_DWORD *)v5 + 8) = v6;
            v5[5] = v13;
            v5 += 6;
          }
          v48 = v5;
          *(double *)(*((_QWORD *)this + 2) + 8 * v6) = v14;
          v3[v6] = 1;
          if (v6 <= 0x270E)
          {
            v24 = v4;
            v25 = v7;
            do
            {
              if (!v3[v25])
              {
                v26 = (_QWORD *)(*(_QWORD *)this + v24);
                v27 = (unsigned int (*)(_QWORD, _QWORD))v26[4];
                v28 = (unsigned int (*)(_QWORD, _QWORD))v26[5];
                v29 = (unsigned int (*)(_QWORD, _QWORD))v26[6];
                v30 = (unsigned int (*)(_QWORD, _QWORD))v26[7];
                v31 = isCloseToColor(0, v9, v10, v11, v12, *(double *)&v27, *(double *)&v28, *(double *)&v29, *(double *)&v30, 0.0799999982);
                if (v31)
                {
                  v32 = ImageAnalyzer::WeightForPointOnEdge((ImageAnalyzer *)v31, v25 - 100 * ((unsigned __int16)v25 / 0x64u), (unsigned __int16)v25 / 0x64u);
                  v44[0] = v27;
                  v44[1] = v28;
                  v44[2] = v29;
                  v44[3] = v30;
                  v45 = v25;
                  v46 = v32;
                  ImageAnalyzer::AddQuantizeColorEntryToSet(v33, (double *)v44, &__p);
                  v3[v25] = 1;
                }
              }
              ++v25;
              v24 += 32;
            }
            while (v25 != 10000);
            v5 = v48;
          }
          result = (uint64_t)__p;
          if (v5 != __p)
          {
            v44[0] = (unsigned int (*)(_QWORD, _QWORD))CompareQuantizeSortcolor;
            sub_100008C3C((__int128 *)__p, (__int128 *)v5, v44, 126 - 2 * __clz(0xAAAAAAAAAAAAAAABLL * (((char *)v5 - (_BYTE *)__p) >> 4)), 1);
            v5 = (double *)__p;
            v34 = *((unsigned int *)__p + 8);
            v35 = *((double *)__p + 5);
            v36 = 0xAAAAAAAAAAAAAAABLL * (((char *)v48 - (_BYTE *)__p) >> 4);
            if (v36 >= 2)
            {
              v37 = (double *)((char *)__p + 88);
              v38 = v36 - 1;
              do
              {
                v39 = *((unsigned int *)v37 - 2);
                v40 = *v37;
                if (!v3[v39])
                  v3[v39] = 1;
                v35 = v35 + v40;
                v37 += 6;
                v41 = (_OWORD *)(*(_QWORD *)this + 32 * v34);
                v42 = v41[1];
                v43 = (_OWORD *)(*(_QWORD *)this + 32 * v39);
                *v43 = *v41;
                v43[1] = v42;
                --v38;
              }
              while (v38);
            }
            *(double *)(*((_QWORD *)this + 2) + 8 * v34) = v35;
          }
        }
        ++v6;
        ++v7;
        v4 += 32;
      }
      while (v6 != 10000);
      free(v3);
      if (__p)
      {
        v48 = (double *)__p;
        operator delete(__p);
      }
      return 1;
    }
  }
  return result;
}

void sub_100007168(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void ImageAnalyzer::PickBackgroundColor(ImageAnalyzer *this)
{
  double v2;
  void **v3;
  __int128 v4;
  __int128 v5;
  double ContrastWithLuminance;
  unint64_t v7;
  double v8;
  uint64_t v9;
  uint64_t i;
  double *v11;
  double v12;
  double v13;
  double v14;
  _OWORD *v15;
  __int128 v16;
  __int128 v17;
  double HSVColor;
  double v19;
  double v20;
  double v21;
  double v22;
  __int128 v23;
  double v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  double v28;
  double v29;
  double v30;
  ITColor v31;

  v2 = *((double *)this + 48);
  v3 = ImageAnalyzer::DominantColors(this);
  v4 = *((_OWORD *)*v3 + 1);
  *(_OWORD *)((char *)this + 40) = *(_OWORD *)*v3;
  *(_OWORD *)((char *)this + 56) = v4;
  v5 = *(_OWORD *)((char *)this + 56);
  *(_OWORD *)&v31.mRed = *(_OWORD *)((char *)this + 40);
  *(_OWORD *)&v31.mBlue = v5;
  if (ITColor::GetContrastWithLuminance(&v31, 0.180000007) < 1.29999995)
  {
    ContrastWithLuminance = ITColor::GetContrastWithLuminance((ITColor *)((char *)this + 40), 0.180000007);
    v7 = (unint64_t)((_BYTE *)v3[1] - (_BYTE *)*v3) >> 5;
    if ((int)v7 >= 2)
    {
      v8 = ContrastWithLuminance;
      if ((_DWORD)v7 == 2)
        v9 = 2;
      else
        v9 = 3;
      for (i = 1; i != v9; ++i)
      {
        v11 = (double *)*((_QWORD *)this + 44);
        v12 = v11[i];
        if (v12 <= 0.0)
          break;
        v13 = *v11 / v12;
        if (v13 <= 0.9 || v13 >= 1.112)
          break;
        v14 = ITColor::GetContrastWithLuminance((ITColor *)*v3 + i, 0.180000007);
        if (v14 > v8)
        {
          v15 = (char *)*v3 + 32 * i;
          v16 = v15[1];
          *(_OWORD *)((char *)this + 40) = *v15;
          *(_OWORD *)((char *)this + 56) = v16;
          v8 = v14;
        }
      }
    }
  }
  v17 = *(_OWORD *)((char *)this + 56);
  *(_OWORD *)&v31.mRed = *(_OWORD *)((char *)this + 40);
  *(_OWORD *)&v31.mBlue = v17;
  if (ITColor::GetContrastWithLuminance(&v31, 0.180000007) < 1.29999995)
  {
    HSVColor = ITColor::GetHSVColor((ITColor *)((char *)this + 40));
    v20 = v19;
    v22 = v21;
    v28 = HSVColor;
    v29 = v19;
    v30 = v21;
    if (v2 < 0.180000007
      || (v23 = *(_OWORD *)((char *)this + 56),
          *(_OWORD *)&v31.mRed = *(_OWORD *)((char *)this + 40),
          *(_OWORD *)&v31.mBlue = v23,
          ITColor::GetLuminance(&v31),
          v24 < 0.180000007))
    {
      v29 = v20 * 1.10000002;
      v30 = v22 * 0.800000012;
    }
    *((double *)this + 5) = ITColor::CreateFromHSVColor(&v28);
    *((_QWORD *)this + 6) = v25;
    *((_QWORD *)this + 7) = v26;
    *((_QWORD *)this + 8) = v27;
  }
}

void ImageAnalyzer::PickTextColors(ImageAnalyzer *this)
{
  void **v2;
  unint64_t v3;
  unint64_t v4;
  void **v5;
  double ContrastWithColor;
  uint64_t v7;
  int v8;
  unint64_t v9;
  int v10;
  unsigned int v11;
  unsigned int v12;
  double v13;
  _OWORD *v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  double v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  double *v24;
  double v25;
  double v26;
  double v27;
  double v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  BOOL v34;
  char v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  __int128 v44;
  __int128 *v45;
  double v46;
  double v47;
  double v48;
  __int128 *v49;
  double v50;
  double v51;
  __int128 v52;
  double v53;
  double v54;
  __int128 v55;
  double v56;
  __int128 v57;
  double v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  __int128 *v63;
  double BlendedColorWithFraction;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  __int128 *v68;
  __int128 v69;
  double v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  __int128 *v75;
  double v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  __int128 *v80;
  double v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  unsigned int v85;
  unsigned int v86;
  ITColor v87;
  ITColor v88;
  ITColor v89;
  ITColor v90;
  ITColor v91;

  v2 = ImageAnalyzer::DominantColors(this);
  v3 = (_BYTE *)v2[1] - (_BYTE *)*v2;
  v4 = v3 >> 5;
  if ((v3 >> 5) < 2)
  {
    v34 = 0;
    v35 = 0;
    goto LABEL_28;
  }
  v5 = v2;
  ContrastWithColor = ITColor::GetContrastWithColor((ITColor *)*v2 + 1, (ITColor *)((char *)this + 40));
  v7 = 0;
  v8 = 0;
  v9 = (v3 >> 5);
  v10 = 1;
  v85 = v4;
  v11 = v4;
  v12 = 1;
  v86 = 1;
  v13 = ContrastWithColor;
  do
  {
    v14 = (char *)*v5 + v7;
    v15 = v14[1];
    *(_OWORD *)&v87.mRed = *v14;
    *(_OWORD *)&v87.mBlue = v15;
    if ((v8 & 1) == 0 && contrastsWithColor(v87, *(ITColor *)((char *)this + 40)))
    {
      ImageAnalyzer::EnhanceContrastWithColor(v87, *(ITColor *)((char *)this + 40), 0.449999988);
      *((_QWORD *)this + 9) = v16;
      *((_QWORD *)this + 10) = v17;
      *((_QWORD *)this + 11) = v18;
      *((_QWORD *)this + 12) = v19;
      v8 = 1;
      v11 = v10;
    }
    v20 = ITColor::GetContrastWithColor(&v87, (ITColor *)((char *)this + 40));
    if (v20 > v13)
    {
      if (v20 <= ContrastWithColor)
      {
        v13 = v20;
        v86 = v10 - 1;
      }
      else
      {
        v13 = ContrastWithColor;
        ContrastWithColor = v20;
        v86 = v12;
        v12 = v10 - 1;
      }
    }
    ++v10;
    v7 += 32;
  }
  while (32 * v9 != v7);
  if (v11 >= v85)
  {
LABEL_15:
    ITColor::ITColor(&v87);
    v29 = 0;
    if ((v8 & 1) != 0)
    {
      LODWORD(v4) = v85;
      goto LABEL_24;
    }
    LOBYTE(v21) = 1;
    goto LABEL_17;
  }
  v21 = 0;
  v22 = 32 * v11;
  v23 = v11;
  while (1)
  {
    v24 = (double *)((char *)*v5 + v22);
    v25 = *v24;
    v26 = v24[1];
    v27 = v24[2];
    v28 = v24[3];
    v88.mRed = *v24;
    v88.mGreen = v26;
    v88.mBlue = v27;
    v88.mAlpha = v28;
    if (contrastsEnoughWithColor(v88, *(ITColor *)((char *)this + 40)))
      break;
    v21 = ++v23 >= v9;
    v22 += 32;
    if (v9 == v23)
      goto LABEL_15;
  }
  v90.mRed = v25;
  v90.mGreen = v26;
  v90.mBlue = v27;
  v90.mAlpha = v28;
  ImageAnalyzer::EnhanceContrastWithColor(v90, *(ITColor *)((char *)this + 40), 0.449999988);
  *((_QWORD *)this + 13) = v36;
  *((_QWORD *)this + 14) = v37;
  *((_QWORD *)this + 15) = v38;
  *((_QWORD *)this + 16) = v39;
  if ((v8 & ~v21 & 1) != 0)
  {
    v35 = 1;
    v29 = 1;
    LODWORD(v4) = v85;
    goto LABEL_27;
  }
  ITColor::ITColor(&v87);
  v29 = 1;
  if ((v8 & 1) == 0)
  {
LABEL_17:
    ImageAnalyzer::EnhanceContrastWithColor(*((ITColor *)*v5 + v12), *(ITColor *)((char *)this + 40), 0.200000003);
    v87 = v89;
    if (contrastsEnoughWithColor(v89, *(ITColor *)((char *)this + 40)))
    {
      ImageAnalyzer::EnhanceContrastWithColor(v87, *(ITColor *)((char *)this + 40), 0.449999988);
      *((_QWORD *)this + 9) = v30;
      *((_QWORD *)this + 10) = v31;
      *((_QWORD *)this + 11) = v32;
      *((_QWORD *)this + 12) = v33;
      LOBYTE(v8) = 1;
    }
  }
  LODWORD(v4) = v85;
  if ((v21 & 1) != 0)
  {
LABEL_24:
    ImageAnalyzer::EnhanceContrastWithColor(*((ITColor *)*v5 + v86), *(ITColor *)((char *)this + 40), 0.200000003);
    v87 = v91;
    if (contrastsEnoughWithColor(v91, *(ITColor *)((char *)this + 40)))
    {
      ImageAnalyzer::EnhanceContrastWithColor(v87, *(ITColor *)((char *)this + 40), 0.449999988);
      *((_QWORD *)this + 13) = v40;
      *((_QWORD *)this + 14) = v41;
      *((_QWORD *)this + 15) = v42;
      *((_QWORD *)this + 16) = v43;
      v29 = 1;
    }
  }
  v35 = v8;
LABEL_27:
  v34 = v29 != 0;
LABEL_28:
  v44 = *(_OWORD *)((char *)this + 56);
  *(_OWORD *)&v87.mRed = *(_OWORD *)((char *)this + 40);
  *(_OWORD *)&v87.mBlue = v44;
  ITColor::GetLuminance(&v87);
  v45 = (__int128 *)((char *)this + 72);
  v47 = *((double *)this + 10);
  v46 = *((double *)this + 11);
  v48 = *((double *)this + 12);
  v49 = (__int128 *)((char *)this + 104);
  if (v50 >= 0.180000007)
  {
    v87.mRed = *((double *)this + 9);
    v87.mGreen = v47;
    v87.mBlue = v46;
    v87.mAlpha = v48;
    ITColor::GetLuminance(&v87);
    if (v51 >= 0.180000007)
      v35 = 0;
    v52 = *(_OWORD *)((char *)this + 120);
    *(_OWORD *)&v87.mRed = *(_OWORD *)((char *)this + 104);
    *(_OWORD *)&v87.mBlue = v52;
    ITColor::GetLuminance(&v87);
    if (v53 >= 0.180000007)
      v34 = 0;
    if ((v35 & 1) != 0)
      goto LABEL_50;
LABEL_40:
    v57 = *(_OWORD *)((char *)this + 56);
    *(_OWORD *)&v87.mRed = *(_OWORD *)((char *)this + 40);
    *(_OWORD *)&v87.mBlue = v57;
    ITColor::GetLuminance(&v87);
    if (v58 < 0.180000007)
    {
      if ((_DWORD)v4)
      {
        v59 = *((_QWORD *)this + 5);
        v60 = *((_QWORD *)this + 6);
        v61 = *((_QWORD *)this + 7);
        v62 = *((_QWORD *)this + 8);
        v63 = &ITColor::kWhite;
        goto LABEL_45;
      }
      v68 = &ITColor::kWhite;
    }
    else
    {
      if ((_DWORD)v4)
      {
        v59 = *((_QWORD *)this + 5);
        v60 = *((_QWORD *)this + 6);
        v61 = *((_QWORD *)this + 7);
        v62 = *((_QWORD *)this + 8);
        v63 = &ITColor::kBlack;
LABEL_45:
        BlendedColorWithFraction = ITColor::CreateBlendedColorWithFraction((ITColor *)v63, 0.0500000007, *(ITColor *)&v59);
LABEL_49:
        *((double *)this + 9) = BlendedColorWithFraction;
        *((_QWORD *)this + 10) = v65;
        *((_QWORD *)this + 11) = v66;
        *((_QWORD *)this + 12) = v67;
        goto LABEL_50;
      }
      v68 = &ITColor::kBlack;
    }
    BlendedColorWithFraction = *(double *)v68;
    v65 = *((_QWORD *)v68 + 1);
    v66 = *((_QWORD *)v68 + 2);
    v67 = *((_QWORD *)v68 + 3);
    goto LABEL_49;
  }
  v87.mRed = *((double *)this + 9);
  v87.mGreen = v47;
  v87.mBlue = v46;
  v87.mAlpha = v48;
  ITColor::GetLuminance(&v87);
  if (v54 < 0.180000007)
    v35 = 0;
  v55 = *(_OWORD *)((char *)this + 120);
  *(_OWORD *)&v87.mRed = *(_OWORD *)((char *)this + 104);
  *(_OWORD *)&v87.mBlue = v55;
  ITColor::GetLuminance(&v87);
  if (v56 < 0.180000007)
    v34 = 0;
  if ((v35 & 1) == 0)
    goto LABEL_40;
LABEL_50:
  if (v34)
    goto LABEL_61;
  v69 = *(_OWORD *)((char *)this + 56);
  *(_OWORD *)&v87.mRed = *(_OWORD *)((char *)this + 40);
  *(_OWORD *)&v87.mBlue = v69;
  ITColor::GetLuminance(&v87);
  if (v70 < 0.180000007)
  {
    if ((_DWORD)v4)
    {
      v71 = *((_QWORD *)this + 5);
      v72 = *((_QWORD *)this + 6);
      v73 = *((_QWORD *)this + 7);
      v74 = *((_QWORD *)this + 8);
      v75 = &ITColor::kWhite;
      goto LABEL_56;
    }
    v80 = &ITColor::kWhite;
LABEL_59:
    v76 = *(double *)v80;
    v77 = *((_QWORD *)v80 + 1);
    v78 = *((_QWORD *)v80 + 2);
    v79 = *((_QWORD *)v80 + 3);
    goto LABEL_60;
  }
  if (!(_DWORD)v4)
  {
    v80 = &ITColor::kBlack;
    goto LABEL_59;
  }
  v71 = *((_QWORD *)this + 5);
  v72 = *((_QWORD *)this + 6);
  v73 = *((_QWORD *)this + 7);
  v74 = *((_QWORD *)this + 8);
  v75 = &ITColor::kBlack;
LABEL_56:
  v76 = ITColor::CreateBlendedColorWithFraction((ITColor *)v75, 0.100000001, *(ITColor *)&v71);
LABEL_60:
  *((double *)this + 13) = v76;
  *((_QWORD *)this + 14) = v77;
  *((_QWORD *)this + 15) = v78;
  *((_QWORD *)this + 16) = v79;
LABEL_61:
  v81 = ITColor::GetContrastWithColor((ITColor *)((char *)this + 72), (ITColor *)((char *)this + 40));
  if (ITColor::GetContrastWithColor((ITColor *)((char *)this + 104), (ITColor *)((char *)this + 40)) > v81)
  {
    v83 = *v45;
    v82 = *(_OWORD *)((char *)this + 88);
    v84 = *(_OWORD *)((char *)this + 120);
    *v45 = *v49;
    *(_OWORD *)((char *)this + 88) = v84;
    *v49 = v83;
    *(_OWORD *)((char *)this + 120) = v82;
  }
}

void ImageAnalyzer::DoPostImageAnalysis(ImageAnalyzer *this)
{
  ImageAnalyzer *v1;
  ITColor *v2;
  ITColor *v3;
  ITColor *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  ITColor *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  ImageAnalyzer *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  ImageAnalyzer *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  ImageAnalyzer *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  ImageAnalyzer *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v1 = this;
  v2 = (ITColor *)((char *)this + 72);
  v3 = (ITColor *)((char *)this + 40);
  *((double *)this + 17) = ITColor::CreateBlendedColorWithFraction((ITColor *)((char *)this + 72), 0.200000003, *(ITColor *)((char *)this + 40));
  v4 = (ITColor *)((char *)v1 + 136);
  *((_QWORD *)v1 + 18) = v5;
  *((_QWORD *)v1 + 19) = v6;
  *((_QWORD *)v1 + 20) = v7;
  v8 = (ITColor *)((char *)v1 + 104);
  *((double *)v1 + 21) = ITColor::CreateBlendedColorWithFraction((ITColor *)((char *)v1 + 104), 0.200000003, *v3);
  *((_QWORD *)v1 + 22) = v9;
  v1 = (ImageAnalyzer *)((char *)v1 + 168);
  *((_QWORD *)v1 + 2) = v10;
  *((_QWORD *)v1 + 3) = v11;
  ImageAnalyzer::CalculateOneShadowColor(v12, v2, v3);
  *((_QWORD *)v1 + 4) = v13;
  *((_QWORD *)v1 + 5) = v14;
  *((_QWORD *)v1 + 6) = v15;
  *((_QWORD *)v1 + 7) = v16;
  ImageAnalyzer::CalculateOneShadowColor(v17, v8, v3);
  *((_QWORD *)v1 + 12) = v18;
  *((_QWORD *)v1 + 13) = v19;
  *((_QWORD *)v1 + 14) = v20;
  *((_QWORD *)v1 + 15) = v21;
  ImageAnalyzer::CalculateOneShadowColor(v22, v4, v3);
  *((_QWORD *)v1 + 8) = v23;
  *((_QWORD *)v1 + 9) = v24;
  *((_QWORD *)v1 + 10) = v25;
  *((_QWORD *)v1 + 11) = v26;
  ImageAnalyzer::CalculateOneShadowColor(v27, (ITColor *)v1, v3);
  *((_QWORD *)v1 + 16) = v28;
  *((_QWORD *)v1 + 17) = v29;
  *((_QWORD *)v1 + 18) = v30;
  *((_QWORD *)v1 + 19) = v31;
}

void ImageAnalyzer::AddQuantizeColorEntryToSet(uint64_t a1, double *a2, void **a3)
{
  _BYTE *v5;
  uint64_t v6;
  unint64_t v7;
  _OWORD *v8;
  unint64_t v9;
  __int128 v10;
  __int128 v11;
  _OWORD *v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  char *v17;
  char *v18;
  char *v19;
  __int128 v20;
  __int128 v21;
  char *v22;
  char *v23;
  __int128 v24;
  __int128 v25;

  v5 = a3[1];
  if (v5 == *a3)
  {
    v8 = a3[1];
LABEL_7:
    v9 = (unint64_t)a3[2];
    if ((unint64_t)v8 >= v9)
    {
      v13 = 0xAAAAAAAAAAAAAAABLL * (((char *)v8 - v5) >> 4);
      v14 = v13 + 1;
      if (v13 + 1 > 0x555555555555555)
        sub_100008B48();
      v15 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v9 - (_QWORD)v5) >> 4);
      if (2 * v15 > v14)
        v14 = 2 * v15;
      if (v15 >= 0x2AAAAAAAAAAAAAALL)
        v16 = 0x555555555555555;
      else
        v16 = v14;
      if (v16)
        v17 = (char *)sub_100008BD0((uint64_t)(a3 + 2), v16);
      else
        v17 = 0;
      v18 = &v17[48 * v13];
      v19 = &v17[48 * v16];
      v20 = *(_OWORD *)a2;
      v21 = *((_OWORD *)a2 + 2);
      *((_OWORD *)v18 + 1) = *((_OWORD *)a2 + 1);
      *((_OWORD *)v18 + 2) = v21;
      *(_OWORD *)v18 = v20;
      v12 = v18 + 48;
      v23 = (char *)*a3;
      v22 = (char *)a3[1];
      if (v22 != *a3)
      {
        do
        {
          v24 = *((_OWORD *)v22 - 3);
          v25 = *((_OWORD *)v22 - 1);
          *((_OWORD *)v18 - 2) = *((_OWORD *)v22 - 2);
          *((_OWORD *)v18 - 1) = v25;
          *((_OWORD *)v18 - 3) = v24;
          v18 -= 48;
          v22 -= 48;
        }
        while (v22 != v23);
        v22 = (char *)*a3;
      }
      *a3 = v18;
      a3[1] = v12;
      a3[2] = v19;
      if (v22)
        operator delete(v22);
    }
    else
    {
      v10 = *(_OWORD *)a2;
      v11 = *((_OWORD *)a2 + 2);
      v8[1] = *((_OWORD *)a2 + 1);
      v8[2] = v11;
      *v8 = v10;
      v12 = v8 + 3;
    }
    a3[1] = v12;
  }
  else
  {
    v6 = 0;
    v7 = 0;
    v5 = *a3;
    while (!isCloseToColor(0, *a2, a2[1], a2[2], a2[3], *(double *)&v5[v6], *(double *)&v5[v6 + 8], *(double *)&v5[v6 + 16], *(double *)&v5[v6 + 24], 0.0799999982))
    {
      ++v7;
      v5 = *a3;
      v8 = a3[1];
      v6 += 48;
      if (0xAAAAAAAAAAAAAAABLL * (((char *)v8 - (_BYTE *)*a3) >> 4) <= v7)
        goto LABEL_7;
    }
    *(double *)((char *)*a3 + v6 + 40) = a2[5] + *(double *)((char *)*a3 + v6 + 40);
  }
}

double ImageAnalyzer::WeightForPointOnEdge(ImageAnalyzer *this, unsigned int a2, unsigned int a3)
{
  double v3;
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double result;

  v3 = (double)a2;
  if (a2 <= 0x14 && a3 <= 0x14)
  {
    v4 = (double)a3;
    v5 = 20.0000003 - v3;
    goto LABEL_4;
  }
  if (a2 > 0x14)
  {
    if (a2 >= 0x50 && a3 <= 0x14)
    {
      v4 = (double)a3;
      v5 = 79.9999997 - v3;
LABEL_4:
      v6 = 20.0000003 - v4;
      if (v5 >= 1.0)
        v7 = v5 * 0.75;
      else
        v7 = 0.75;
      if (v6 >= 1.0)
        v8 = v6 * 0.75;
      else
        v8 = 0.75;
      if (v8 <= v7)
        v8 = v7;
      goto LABEL_22;
    }
    v8 = 1.0;
    if (a2 < 0x50)
      goto LABEL_22;
    v9 = 79.9999997;
  }
  else
  {
    v9 = 20.0000003;
  }
  v10 = v9 - v3;
  v8 = 0.75;
  if (v10 >= 1.0)
    v8 = v10 * 0.75;
LABEL_22:
  result = 1.0;
  if (v8 >= 1.0)
    return v8;
  return result;
}

BOOL CompareQuantizeSortcolor(uint64_t a1, uint64_t a2)
{
  return *(double *)(a1 + 40) > *(double *)(a2 + 40);
}

void **ImageAnalyzer::DominantColors(ImageAnalyzer *this)
{
  void **v1;
  ITColor *v3;
  uint64_t i;
  double v5;
  double v6;
  double v7;
  uint64_t v8;
  __int128 *v9;
  void **v10;
  unint64_t v11;
  __int128 *v12;
  char *v13;
  unint64_t v14;
  __int128 v15;
  _OWORD *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  __int128 *v22;
  __int128 v23;
  char *v24;
  char *v25;
  __int128 *v26;
  __int128 v27;
  __int128 *v28;
  unint64_t v29;
  char *v30;
  _QWORD *v31;
  char *v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  char *v37;
  char *v38;
  uint64_t v39;
  double v41[2];
  ITColor v42;
  uint64_t v43;
  __int128 *v44;
  __int128 *v45;
  uint64_t v46;
  BOOL (*v47)(double *, double *);

  v1 = (void **)((char *)this + 328);
  if (*((_QWORD *)this + 42) == *((_QWORD *)this + 41))
  {
    v44 = 0;
    v45 = 0;
    v46 = 0;
    ITColor::ITColor(&v42);
    for (i = 0; i != 10000; ++i)
    {
      if (*(double *)(*((_QWORD *)this + 2) + 8 * i) >= 1.0)
      {
        v41[0] = *(double *)(*((_QWORD *)this + 2) + 8 * i);
        v42.mRed = ITColor::CreateFromHSVDoubles(v3, *(double *)(*(_QWORD *)this + 32 * i), *(double *)(*(_QWORD *)this + 32 * i + 8), *(double *)(*(_QWORD *)this + 32 * i + 16));
        v42.mGreen = v5;
        v42.mBlue = v6;
        v42.mAlpha = v7;
        v43 = *(_QWORD *)(*(_QWORD *)this + 32 * i + 24);
        ImageAnalyzer::AddDominantColorEntryToSet(v8, v41, (void **)&v44);
      }
    }
    v9 = v45;
    if (v45 != v44)
    {
      v47 = CompareSortColor;
      sub_10000A308(v44, v45, (unsigned int (**)(_QWORD, _QWORD))&v47, 126 - 2 * __clz(((char *)v45 - (char *)v44) >> 6), 1);
      sub_10000844C(v1, ((char *)v45 - (char *)v44) >> 6);
      v10 = (void **)((char *)this + 352);
      sub_1000084E8((void **)this + 44, ((char *)v45 - (char *)v44) >> 6);
      v9 = v45;
      if (v45 != v44)
      {
        v11 = 0;
        v9 = v44;
        do
        {
          v12 = &v9[4 * v11 + 1];
          v13 = (char *)*((_QWORD *)this + 42);
          v14 = *((_QWORD *)this + 43);
          if ((unint64_t)v13 >= v14)
          {
            v17 = (v13 - (_BYTE *)*v1) >> 5;
            v18 = v17 + 1;
            if ((unint64_t)(v17 + 1) >> 59)
              sub_100008B48();
            v19 = v14 - (_QWORD)*v1;
            if (v19 >> 4 > v18)
              v18 = v19 >> 4;
            if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFE0)
              v20 = 0x7FFFFFFFFFFFFFFLL;
            else
              v20 = v18;
            if (v20)
              v21 = (char *)sub_10000B930((uint64_t)this + 344, v20);
            else
              v21 = 0;
            v22 = (__int128 *)&v21[32 * v17];
            v23 = v12[1];
            *v22 = *v12;
            v22[1] = v23;
            v25 = (char *)*((_QWORD *)this + 41);
            v24 = (char *)*((_QWORD *)this + 42);
            v26 = v22;
            if (v24 != v25)
            {
              do
              {
                v27 = *((_OWORD *)v24 - 1);
                *(v26 - 2) = *((_OWORD *)v24 - 2);
                *(v26 - 1) = v27;
                v26 -= 2;
                v24 -= 32;
              }
              while (v24 != v25);
              v24 = (char *)*v1;
            }
            v16 = v22 + 2;
            *((_QWORD *)this + 41) = v26;
            *((_QWORD *)this + 42) = v22 + 2;
            *((_QWORD *)this + 43) = &v21[32 * v20];
            if (v24)
              operator delete(v24);
          }
          else
          {
            v15 = v9[4 * v11 + 2];
            *(_OWORD *)v13 = *v12;
            *((_OWORD *)v13 + 1) = v15;
            v16 = v13 + 32;
          }
          *((_QWORD *)this + 42) = v16;
          v28 = &v44[4 * v11];
          v30 = (char *)*((_QWORD *)this + 45);
          v29 = *((_QWORD *)this + 46);
          if ((unint64_t)v30 >= v29)
          {
            v32 = (char *)*v10;
            v33 = (v30 - (_BYTE *)*v10) >> 3;
            v34 = v33 + 1;
            if ((unint64_t)(v33 + 1) >> 61)
              sub_100008B48();
            v35 = v29 - (_QWORD)v32;
            if (v35 >> 2 > v34)
              v34 = v35 >> 2;
            if ((unint64_t)v35 >= 0x7FFFFFFFFFFFFFF8)
              v36 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v36 = v34;
            if (v36)
            {
              v37 = (char *)sub_10000B964((uint64_t)this + 368, v36);
              v32 = (char *)*((_QWORD *)this + 44);
              v30 = (char *)*((_QWORD *)this + 45);
            }
            else
            {
              v37 = 0;
            }
            v38 = &v37[8 * v33];
            *(_QWORD *)v38 = *(_QWORD *)v28;
            v31 = v38 + 8;
            while (v30 != v32)
            {
              v39 = *((_QWORD *)v30 - 1);
              v30 -= 8;
              *((_QWORD *)v38 - 1) = v39;
              v38 -= 8;
            }
            *((_QWORD *)this + 44) = v38;
            *((_QWORD *)this + 45) = v31;
            *((_QWORD *)this + 46) = &v37[8 * v36];
            if (v32)
              operator delete(v32);
          }
          else
          {
            *(_QWORD *)v30 = *(_QWORD *)v28;
            v31 = v30 + 8;
          }
          *((_QWORD *)this + 45) = v31;
          ++v11;
          v9 = v44;
        }
        while (v11 < ((char *)v45 - (char *)v44) >> 6);
      }
    }
    if (v9)
    {
      v45 = v9;
      operator delete(v9);
    }
  }
  return v1;
}

void sub_100007F10(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL contrastsWithColor(ITColor a1, ITColor a2)
{
  double mAlpha;
  double mBlue;
  double mGreen;
  double mRed;
  double v6;
  _BOOL4 v7;
  double v8;
  ITColor v10;
  ITColor v11;
  ITColor v12;

  mAlpha = a2.mAlpha;
  mBlue = a2.mBlue;
  mGreen = a2.mGreen;
  mRed = a2.mRed;
  v11 = a1;
  v10 = a2;
  v12 = a1;
  ITColor::GetLuminance(&v12);
  v7 = v6 >= 0.180000007;
  v12.mRed = mRed;
  v12.mGreen = mGreen;
  v12.mBlue = mBlue;
  v12.mAlpha = mAlpha;
  ITColor::GetLuminance(&v12);
  return v7 != v8 >= 0.180000007 && ITColor::GetContrastWithColor(&v11, &v10) >= 4.5999999;
}

void ImageAnalyzer::EnhanceContrastWithColor(ITColor a1, ITColor a2, double a3)
{
  double mBlue;
  double mGreen;
  double mRed;
  double HSVColor;
  double v8;
  double v9;
  double v10;
  double v11;
  ITColor *v12;
  double v13;
  double v14;
  double mAlpha;
  ITColor v16;

  mAlpha = a2.mAlpha;
  mBlue = a2.mBlue;
  mGreen = a2.mGreen;
  mRed = a2.mRed;
  v16 = a1;
  HSVColor = ITColor::GetHSVColor(&v16);
  v9 = v8;
  v11 = v10;
  ITColor::GetLuminance(&v16);
  v16.mRed = mRed;
  v16.mGreen = mGreen;
  v16.mBlue = mBlue;
  v16.mAlpha = mAlpha;
  ITColor::GetLuminance(&v16);
  v13 = 1.0 - (1.0 - v11) * a3;
  if (v14 >= 0.180000007)
    v13 = v11 * a3;
  ITColor::CreateFromHSVDoubles(v12, HSVColor, v9, v13);
}

BOOL contrastsEnoughWithColor(ITColor a1, ITColor a2)
{
  double mAlpha;
  double mBlue;
  double mGreen;
  double mRed;
  double v6;
  _BOOL4 v7;
  double v8;
  ITColor v10;
  ITColor v11;
  ITColor v12;

  mAlpha = a2.mAlpha;
  mBlue = a2.mBlue;
  mGreen = a2.mGreen;
  mRed = a2.mRed;
  v11 = a1;
  v10 = a2;
  v12 = a1;
  ITColor::GetLuminance(&v12);
  v7 = v6 >= 0.180000007;
  v12.mRed = mRed;
  v12.mGreen = mGreen;
  v12.mBlue = mBlue;
  v12.mAlpha = mAlpha;
  ITColor::GetLuminance(&v12);
  return v7 != v8 >= 0.180000007 && ITColor::GetContrastWithColor(&v11, &v10) >= 3.0999999;
}

void ImageAnalyzer::CalculateOneShadowColor(ImageAnalyzer *this, ITColor *a2, ITColor *a3)
{
  double v5;
  double v6;
  double v7;
  __int128 *v8;
  __int128 v9;
  double v10;
  double v11;
  double v12;
  double v13;
  ITColor v14;

  ITColor::ITColor(&v14);
  ITColor::GetLuminance(a2);
  v6 = v5;
  ITColor::GetLuminance(a3);
  if (v6 >= v7)
    v8 = &ITColor::kBlack;
  else
    v8 = &ITColor::kWhite;
  v9 = v8[1];
  *(_OWORD *)&v14.mRed = *v8;
  *(_OWORD *)&v14.mBlue = v9;
  ITColor::GetLuminance(&v14);
  v11 = v10;
  ITColor::GetLuminance(a3);
  v13 = vabdd_f64(v11, v12);
  ITColor::CreateBlendedColorWithFraction(&v14, 1.0 - ((v13 + v13) * -0.599999994 + 1.0), *a3);
}

BOOL CompareSortColor(double *a1, double *a2)
{
  return *a1 > *a2;
}

void ImageAnalyzer::AddDominantColorEntryToSet(uint64_t a1, double *a2, void **a3)
{
  _BYTE *v5;
  uint64_t v6;
  unint64_t v7;
  double *v8;
  double v9;
  double v10;
  __int128 v11;
  double HSVColor;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  _OWORD *v25;
  unint64_t v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  _OWORD *v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  char *v35;
  char *v36;
  char *v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  char *v41;
  char *v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  ITColor v47;

  v5 = a3[1];
  if (v5 == *a3)
  {
    v25 = a3[1];
LABEL_7:
    v26 = (unint64_t)a3[2];
    if ((unint64_t)v25 >= v26)
    {
      v31 = ((char *)v25 - v5) >> 6;
      v32 = v31 + 1;
      if ((unint64_t)(v31 + 1) >> 58)
        sub_100008B48();
      v33 = v26 - (_QWORD)v5;
      if (v33 >> 5 > v32)
        v32 = v33 >> 5;
      if ((unint64_t)v33 >= 0x7FFFFFFFFFFFFFC0)
        v34 = 0x3FFFFFFFFFFFFFFLL;
      else
        v34 = v32;
      if (v34)
        v35 = (char *)sub_10000A2D4((uint64_t)(a3 + 2), v34);
      else
        v35 = 0;
      v36 = &v35[64 * v31];
      v37 = &v35[64 * v34];
      v38 = *(_OWORD *)a2;
      v39 = *((_OWORD *)a2 + 1);
      v40 = *((_OWORD *)a2 + 3);
      *((_OWORD *)v36 + 2) = *((_OWORD *)a2 + 2);
      *((_OWORD *)v36 + 3) = v40;
      *(_OWORD *)v36 = v38;
      *((_OWORD *)v36 + 1) = v39;
      v30 = v36 + 64;
      v42 = (char *)*a3;
      v41 = (char *)a3[1];
      if (v41 != *a3)
      {
        do
        {
          v43 = *((_OWORD *)v41 - 4);
          v44 = *((_OWORD *)v41 - 3);
          v45 = *((_OWORD *)v41 - 1);
          *((_OWORD *)v36 - 2) = *((_OWORD *)v41 - 2);
          *((_OWORD *)v36 - 1) = v45;
          *((_OWORD *)v36 - 4) = v43;
          *((_OWORD *)v36 - 3) = v44;
          v36 -= 64;
          v41 -= 64;
        }
        while (v41 != v42);
        v41 = (char *)*a3;
      }
      *a3 = v36;
      a3[1] = v30;
      a3[2] = v37;
      if (v41)
        operator delete(v41);
    }
    else
    {
      v27 = *(_OWORD *)a2;
      v28 = *((_OWORD *)a2 + 1);
      v29 = *((_OWORD *)a2 + 3);
      v25[2] = *((_OWORD *)a2 + 2);
      v25[3] = v29;
      *v25 = v27;
      v25[1] = v28;
      v30 = v25 + 4;
    }
    a3[1] = v30;
  }
  else
  {
    v6 = 0;
    v7 = 0;
    v5 = *a3;
    while (1)
    {
      v8 = (double *)&v5[v6];
      v9 = v8[4];
      v10 = v8[5];
      v11 = *((_OWORD *)a2 + 2);
      v46 = *((_OWORD *)v8 + 1);
      *(_OWORD *)&v47.mRed = *((_OWORD *)a2 + 1);
      *(_OWORD *)&v47.mBlue = v11;
      HSVColor = ITColor::GetHSVColor(&v47);
      v14 = v13;
      v16 = v15;
      ITColor::GetLuminance(&v47);
      v18 = v17;
      *(_OWORD *)&v47.mRed = v46;
      v47.mBlue = v9;
      v47.mAlpha = v10;
      v19 = ITColor::GetHSVColor(&v47);
      v21 = v20;
      v23 = v22;
      ITColor::GetLuminance(&v47);
      if (isCloseToColor((ITColor *)1, HSVColor, v14, v16, v18, v19, v21, v23, v24, 0.0700000003))
        break;
      ++v7;
      v5 = *a3;
      v25 = a3[1];
      v6 += 64;
      if (v7 >= ((char *)v25 - (_BYTE *)*a3) >> 6)
        goto LABEL_7;
    }
    *(double *)((char *)*a3 + v6) = *a2 + *(double *)((char *)*a3 + v6);
  }
}

void sub_10000844C(void **a1, unint64_t a2)
{
  uint64_t v3;
  _BYTE *v4;
  int64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;
  __int128 v13;

  v4 = a1[2];
  v3 = (uint64_t)(a1 + 2);
  if (a2 > (v4 - (_BYTE *)*a1) >> 5)
  {
    if (a2 >> 59)
      sub_100008B48();
    v5 = (_BYTE *)a1[1] - (_BYTE *)*a1;
    v6 = (char *)sub_10000B930(v3, a2);
    v7 = &v6[v5 & 0xFFFFFFFFFFFFFFE0];
    v9 = &v6[32 * v8];
    v11 = (char *)*a1;
    v10 = (char *)a1[1];
    v12 = v7;
    if (v10 != *a1)
    {
      do
      {
        v13 = *((_OWORD *)v10 - 1);
        *((_OWORD *)v12 - 2) = *((_OWORD *)v10 - 2);
        *((_OWORD *)v12 - 1) = v13;
        v12 -= 32;
        v10 -= 32;
      }
      while (v10 != v11);
      v10 = (char *)*a1;
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
      operator delete(v10);
  }
}

void sub_1000084E8(void **a1, unint64_t a2)
{
  uint64_t v3;
  _BYTE *v4;
  int64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  v4 = a1[2];
  v3 = (uint64_t)(a1 + 2);
  if (a2 > (v4 - (_BYTE *)*a1) >> 3)
  {
    if (a2 >> 61)
      sub_100008B48();
    v5 = (_BYTE *)a1[1] - (_BYTE *)*a1;
    v6 = (char *)sub_10000B964(v3, a2);
    v7 = &v6[v5 & 0xFFFFFFFFFFFFFFF8];
    v9 = &v6[8 * v8];
    v10 = (char *)*a1;
    v11 = (char *)a1[1];
    v12 = v7;
    if (v11 != *a1)
    {
      v12 = v7;
      do
      {
        v13 = *((_QWORD *)v11 - 1);
        v11 -= 8;
        *((_QWORD *)v12 - 1) = v13;
        v12 -= 8;
      }
      while (v11 != v10);
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
      operator delete(v10);
  }
}

BOOL AnalyzeImagePlease(_BOOL8 result, AnalyzedImageColors *a2)
{
  CGContext *v3;
  double v4;
  double v5;
  double v6;
  double v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  double v16;
  __int128 v17;
  double v18;
  __int128 v19;
  double v20;
  double v21;
  ITColor *v22;
  double *p_mRed;
  ITColor *begin;
  double mRed;
  unint64_t v26;
  vector<ITColor, std::allocator<ITColor>> *p_completeColorList;
  __compressed_pair<ITColor *, std::allocator<ITColor>> *p_end_cap;
  _OWORD *v29;
  __int128 v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  ITColor *v35;
  __int128 v36;
  ITColor *end;
  ITColor *v38;
  ITColor *v39;
  __int128 v40;
  uint64_t v41;
  vector<ITColor, std::allocator<ITColor>> *p_originalColorMap;
  vector<ITColor, std::allocator<ITColor>> *p_quantizedColorMap;
  vector<double, std::allocator<double>> *p_mColorCounts;
  ITColor *v45;
  double v46;
  double v47;
  double v48;
  double v49;
  double v50;
  double v51;
  double v52;
  double v53;
  ITColor *value;
  ITColor *v55;
  ITColor *v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  unint64_t v60;
  char *v61;
  char *v62;
  ITColor *v63;
  __int128 v64;
  double v65;
  double v66;
  double v67;
  double v68;
  double v69;
  double v70;
  double v71;
  double v72;
  ITColor *v73;
  ITColor *v74;
  ITColor *v75;
  uint64_t v76;
  unint64_t v77;
  uint64_t v78;
  unint64_t v79;
  char *v80;
  char *v81;
  ITColor *v82;
  __int128 v83;
  uint64_t v84;
  double *v85;
  double *v86;
  double *v87;
  uint64_t v88;
  unint64_t v89;
  uint64_t v90;
  unint64_t v91;
  char *v92;
  double *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  double v98;
  double v99;
  double v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  uint64_t v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  double v118;
  ITColor v119;

  if (result)
  {
    v3 = (CGContext *)result;
    ImageAnalyzer::ImageAnalyzer((ImageAnalyzer *)&v95);
    if ((ImageAnalyzer::AnalyzeImage((ImageAnalyzer *)&v95, v3) & 1) != 0)
    {
      v4 = v98;
      v5 = v99;
      v6 = v100;
      a2->backgroundColor.mRed = v98;
      a2->backgroundColor.mGreen = v5;
      a2->backgroundColor.mBlue = v6;
      v7 = *(double *)&v101;
      v8 = v102;
      *(_OWORD *)&a2->backgroundColor.mAlpha = v101;
      *(_OWORD *)&a2->primaryTextColor.mGreen = v8;
      v9 = v104;
      *(_OWORD *)&a2->primaryTextColor.mAlpha = v103;
      *(_OWORD *)&a2->secondaryTextColor.mGreen = v9;
      v10 = v106;
      *(_OWORD *)&a2->secondaryTextColor.mAlpha = v105;
      *(_OWORD *)&a2->tertiaryTextColor.mGreen = v10;
      v11 = v108;
      *(_OWORD *)&a2->tertiaryTextColor.mAlpha = v107;
      *(_OWORD *)&a2->quaternaryTextColor.mGreen = v11;
      v12 = v110;
      *(_OWORD *)&a2->quaternaryTextColor.mAlpha = v109;
      *(_QWORD *)&v8 = v111;
      *(_OWORD *)&a2->primaryDropShadowColor.mGreen = v12;
      *(_QWORD *)&a2->primaryDropShadowColor.mAlpha = v8;
      v13 = v113;
      *(_OWORD *)&a2->tertiaryDropShadowColor.mRed = v112;
      *(_OWORD *)&a2->tertiaryDropShadowColor.mBlue = v13;
      v14 = v115;
      *(_OWORD *)&a2->secondaryDropShadowColor.mRed = v114;
      *(_OWORD *)&a2->secondaryDropShadowColor.mBlue = v14;
      v15 = v117;
      *(_OWORD *)&a2->quarnaryDropShadowColor.mRed = v116;
      *(_OWORD *)&a2->quarnaryDropShadowColor.mBlue = v15;
      a2->colorsValid = 1;
      v119.mRed = v4;
      v119.mGreen = v5;
      v119.mBlue = v6;
      v119.mAlpha = v7;
      ITColor::GetLuminance(&v119);
      a2->isBackgroundLight = v16 >= 0.180000007;
      v17 = *(_OWORD *)&a2->primaryTextColor.mBlue;
      *(_OWORD *)&v119.mRed = *(_OWORD *)&a2->primaryTextColor.mRed;
      *(_OWORD *)&v119.mBlue = v17;
      ITColor::GetLuminance(&v119);
      a2->isPrimaryColorLight = v18 >= 0.180000007;
      v19 = *(_OWORD *)&a2->secondaryTextColor.mBlue;
      *(_OWORD *)&v119.mRed = *(_OWORD *)&a2->secondaryTextColor.mRed;
      *(_OWORD *)&v119.mBlue = v19;
      ITColor::GetLuminance(&v119);
      a2->isSecondaryColorLight = v20 >= 0.180000007;
      v21 = v118;
      a2->isBorderedImage = v118 > 0.0;
      a2->borderPercentage = v21;
      v22 = (ITColor *)ImageAnalyzer::DominantColors((ImageAnalyzer *)&v95);
      p_mRed = &v22->mRed;
      begin = a2->completeColorList.__begin_;
      a2->completeColorList.__end_ = begin;
      mRed = v22->mRed;
      if (*(_QWORD *)&v22->mGreen != *(_QWORD *)&v22->mRed)
      {
        v26 = 0;
        p_completeColorList = &a2->completeColorList;
        p_end_cap = &a2->completeColorList.__end_cap_;
        do
        {
          v29 = (_OWORD *)(*(_QWORD *)&mRed + 32 * v26);
          if (begin >= p_end_cap->__value_)
          {
            v31 = begin - p_completeColorList->__begin_;
            if ((unint64_t)(v31 + 1) >> 59)
              sub_100008B48();
            v32 = (char *)p_end_cap->__value_ - (char *)p_completeColorList->__begin_;
            v33 = v32 >> 4;
            if (v32 >> 4 <= (unint64_t)(v31 + 1))
              v33 = v31 + 1;
            if ((unint64_t)v32 >= 0x7FFFFFFFFFFFFFE0)
              v34 = 0x7FFFFFFFFFFFFFFLL;
            else
              v34 = v33;
            if (v34)
              v22 = (ITColor *)sub_10000B930((uint64_t)&a2->completeColorList.__end_cap_, v34);
            else
              v22 = 0;
            v35 = &v22[v31];
            v36 = v29[1];
            *(_OWORD *)&v35->mRed = *v29;
            *(_OWORD *)&v35->mBlue = v36;
            v38 = a2->completeColorList.__begin_;
            end = a2->completeColorList.__end_;
            v39 = v35;
            if (end != v38)
            {
              do
              {
                v40 = *(_OWORD *)&end[-1].mBlue;
                *(_OWORD *)&v39[-1].mRed = *(_OWORD *)&end[-1].mRed;
                *(_OWORD *)&v39[-1].mBlue = v40;
                --v39;
                --end;
              }
              while (end != v38);
              end = p_completeColorList->__begin_;
            }
            begin = v35 + 1;
            a2->completeColorList.__begin_ = v39;
            a2->completeColorList.__end_ = v35 + 1;
            a2->completeColorList.__end_cap_.__value_ = &v22[v34];
            if (end)
              operator delete(end);
          }
          else
          {
            v30 = v29[1];
            *(_OWORD *)&begin->mRed = *v29;
            *(_OWORD *)&begin->mBlue = v30;
            ++begin;
          }
          a2->completeColorList.__end_ = begin;
          ++v26;
          mRed = *p_mRed;
        }
        while (v26 < (uint64_t)(*((_QWORD *)p_mRed + 1) - *(_QWORD *)p_mRed) >> 5);
      }
      v41 = 0;
      a2->internalColorMapWidth = 100;
      p_originalColorMap = &a2->originalColorMap;
      a2->originalColorMap.__end_ = a2->originalColorMap.__begin_;
      p_quantizedColorMap = &a2->quantizedColorMap;
      a2->quantizedColorMap.__end_ = a2->quantizedColorMap.__begin_;
      p_mColorCounts = &a2->mColorCounts;
      a2->mColorCounts.__end_ = a2->mColorCounts.__begin_;
      do
      {
        v46 = ITColor::CreateFromHSVDoubles(v22, *(double *)(v96 + 32 * v41), *(double *)(v96 + 32 * v41 + 8), *(double *)(v96 + 32 * v41 + 16));
        v50 = v46;
        v51 = v47;
        v52 = v48;
        v53 = v49;
        v55 = a2->originalColorMap.__end_;
        value = a2->originalColorMap.__end_cap_.__value_;
        if (v55 >= value)
        {
          v45 = p_originalColorMap->__begin_;
          v57 = v55 - p_originalColorMap->__begin_;
          v58 = v57 + 1;
          if ((unint64_t)(v57 + 1) >> 59)
            sub_100008B48();
          v59 = (char *)value - (char *)v45;
          if (v59 >> 4 > v58)
            v58 = v59 >> 4;
          if ((unint64_t)v59 >= 0x7FFFFFFFFFFFFFE0)
            v60 = 0x7FFFFFFFFFFFFFFLL;
          else
            v60 = v58;
          if (v60)
          {
            v61 = (char *)sub_10000B930((uint64_t)&a2->originalColorMap.__end_cap_, v60);
            v45 = a2->originalColorMap.__begin_;
            v55 = a2->originalColorMap.__end_;
          }
          else
          {
            v61 = 0;
          }
          v62 = &v61[32 * v57];
          *(double *)v62 = v50;
          *((double *)v62 + 1) = v51;
          *((double *)v62 + 2) = v52;
          *((double *)v62 + 3) = v53;
          v63 = (ITColor *)v62;
          if (v55 != v45)
          {
            do
            {
              v64 = *(_OWORD *)&v55[-1].mBlue;
              *(_OWORD *)&v63[-1].mRed = *(_OWORD *)&v55[-1].mRed;
              *(_OWORD *)&v63[-1].mBlue = v64;
              --v63;
              --v55;
            }
            while (v55 != v45);
            v45 = p_originalColorMap->__begin_;
          }
          v56 = (ITColor *)(v62 + 32);
          a2->originalColorMap.__begin_ = v63;
          a2->originalColorMap.__end_ = (ITColor *)(v62 + 32);
          a2->originalColorMap.__end_cap_.__value_ = (ITColor *)&v61[32 * v60];
          if (v45)
            operator delete(v45);
        }
        else
        {
          v55->mRed = v46;
          v55->mGreen = v47;
          v56 = v55 + 1;
          v55->mBlue = v48;
          v55->mAlpha = v49;
        }
        a2->originalColorMap.__end_ = v56;
        v65 = ITColor::CreateFromHSVDoubles(v45, *(double *)(v95 + 32 * v41), *(double *)(v95 + 32 * v41 + 8), *(double *)(v95 + 32 * v41 + 16));
        v69 = v65;
        v70 = v66;
        v71 = v67;
        v72 = v68;
        v74 = a2->quantizedColorMap.__end_;
        v73 = a2->quantizedColorMap.__end_cap_.__value_;
        if (v74 >= v73)
        {
          v22 = p_quantizedColorMap->__begin_;
          v76 = v74 - p_quantizedColorMap->__begin_;
          v77 = v76 + 1;
          if ((unint64_t)(v76 + 1) >> 59)
            sub_100008B48();
          v78 = (char *)v73 - (char *)v22;
          if (v78 >> 4 > v77)
            v77 = v78 >> 4;
          if ((unint64_t)v78 >= 0x7FFFFFFFFFFFFFE0)
            v79 = 0x7FFFFFFFFFFFFFFLL;
          else
            v79 = v77;
          if (v79)
          {
            v80 = (char *)sub_10000B930((uint64_t)&a2->quantizedColorMap.__end_cap_, v79);
            v22 = a2->quantizedColorMap.__begin_;
            v74 = a2->quantizedColorMap.__end_;
          }
          else
          {
            v80 = 0;
          }
          v81 = &v80[32 * v76];
          *(double *)v81 = v69;
          *((double *)v81 + 1) = v70;
          *((double *)v81 + 2) = v71;
          *((double *)v81 + 3) = v72;
          v82 = (ITColor *)v81;
          if (v74 != v22)
          {
            do
            {
              v83 = *(_OWORD *)&v74[-1].mBlue;
              *(_OWORD *)&v82[-1].mRed = *(_OWORD *)&v74[-1].mRed;
              *(_OWORD *)&v82[-1].mBlue = v83;
              --v82;
              --v74;
            }
            while (v74 != v22);
            v22 = p_quantizedColorMap->__begin_;
          }
          v75 = (ITColor *)(v81 + 32);
          a2->quantizedColorMap.__begin_ = v82;
          a2->quantizedColorMap.__end_ = (ITColor *)(v81 + 32);
          a2->quantizedColorMap.__end_cap_.__value_ = (ITColor *)&v80[32 * v79];
          if (v22)
            operator delete(v22);
        }
        else
        {
          v74->mRed = v65;
          v74->mGreen = v66;
          v75 = v74 + 1;
          v74->mBlue = v67;
          v74->mAlpha = v68;
        }
        a2->quantizedColorMap.__end_ = v75;
        v84 = v97;
        v86 = a2->mColorCounts.__end_;
        v85 = a2->mColorCounts.__end_cap_.__value_;
        if (v86 >= v85)
        {
          v22 = (ITColor *)p_mColorCounts->__begin_;
          v88 = v86 - p_mColorCounts->__begin_;
          v89 = v88 + 1;
          if ((unint64_t)(v88 + 1) >> 61)
            sub_100008B48();
          v90 = (char *)v85 - (char *)v22;
          if (v90 >> 2 > v89)
            v89 = v90 >> 2;
          if ((unint64_t)v90 >= 0x7FFFFFFFFFFFFFF8)
            v91 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v91 = v89;
          if (v91)
          {
            v92 = (char *)sub_10000B964((uint64_t)&a2->mColorCounts.__end_cap_, v91);
            v22 = (ITColor *)a2->mColorCounts.__begin_;
            v86 = a2->mColorCounts.__end_;
          }
          else
          {
            v92 = 0;
          }
          v93 = (double *)&v92[8 * v88];
          *v93 = *(double *)(v84 + 8 * v41);
          v87 = v93 + 1;
          while (v86 != (double *)v22)
          {
            v94 = *((_QWORD *)v86-- - 1);
            *((_QWORD *)v93-- - 1) = v94;
          }
          a2->mColorCounts.__begin_ = v93;
          a2->mColorCounts.__end_ = v87;
          a2->mColorCounts.__end_cap_.__value_ = (double *)&v92[8 * v91];
          if (v22)
            operator delete(v22);
        }
        else
        {
          *v86 = *(double *)(v97 + 8 * v41);
          v87 = v86 + 1;
        }
        a2->mColorCounts.__end_ = v87;
        ++v41;
      }
      while (v41 != 10000);
      ImageAnalyzer::~ImageAnalyzer((ImageAnalyzer *)&v95);
      return a2->colorsValid;
    }
    else
    {
      ImageAnalyzer::~ImageAnalyzer((ImageAnalyzer *)&v95);
      return 0;
    }
  }
  return result;
}

void sub_100008B10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  ImageAnalyzer::~ImageAnalyzer((ImageAnalyzer *)va);
  _Unwind_Resume(a1);
}

void sub_100008B48()
{
  sub_100008B5C("vector");
}

void sub_100008B5C(const char *a1)
{
  std::logic_error *exception;

  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  sub_100008BAC(exception, a1);
}

void sub_100008B98(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::logic_error *sub_100008BAC(std::logic_error *a1, const char *a2)
{
  std::logic_error *result;

  result = std::logic_error::logic_error(a1, a2);
  return result;
}

void *sub_100008BD0(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x555555555555556)
    sub_100008C14();
  return operator new(48 * a2);
}

void sub_100008C14()
{
  std::bad_array_new_length *exception;
  std::bad_array_new_length *v1;

  exception = (std::bad_array_new_length *)__cxa_allocate_exception(8uLL);
  v1 = std::bad_array_new_length::bad_array_new_length(exception);
}

void sub_100008C3C(__int128 *a1, __int128 *a2, unsigned int (**a3)(_QWORD, _QWORD), uint64_t a4, char a5)
{
  __int128 *v9;
  __int128 *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  __int128 *v16;
  uint64_t v17;
  __int128 *v18;
  _OWORD *v19;
  __int128 *v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  unsigned int (*v27)(_QWORD, _QWORD);
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __n128 *v32;
  char v33;
  BOOL v34;
  unsigned int (*v35)(_QWORD, _QWORD);
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  _OWORD v45[3];
  _OWORD v46[3];
  _OWORD v47[3];
  _OWORD v48[3];
  __int128 v49;
  __int128 v50;
  __int128 v51;

LABEL_1:
  v9 = a2 - 3;
  v10 = a1;
LABEL_2:
  v11 = 1 - a4;
  while (2)
  {
    a1 = v10;
    v12 = v11;
    v13 = (char *)a2 - (char *)v10;
    v14 = 0xAAAAAAAAAAAAAAABLL * (a2 - v10);
    switch(v14)
    {
      case 0uLL:
      case 1uLL:
        return;
      case 2uLL:
        v35 = *a3;
        v37 = *(a2 - 2);
        v36 = *(a2 - 1);
        v48[0] = *(a2 - 3);
        v48[1] = v37;
        v48[2] = v36;
        v38 = *v10;
        v39 = v10[2];
        v47[1] = v10[1];
        v47[2] = v39;
        v47[0] = v38;
        if (v35(v48, v47))
        {
          v40 = *v10;
          v41 = v10[2];
          v50 = v10[1];
          v51 = v41;
          v49 = v40;
          v42 = *v9;
          v43 = *(a2 - 1);
          v10[1] = *(a2 - 2);
          v10[2] = v43;
          *v10 = v42;
          v44 = v50;
          *v9 = v49;
          *(a2 - 2) = v44;
          *(a2 - 1) = v51;
        }
        return;
      case 3uLL:
        sub_1000091C4(v10, v10 + 3, a2 - 3, a3);
        return;
      case 4uLL:
        sub_100009A3C((__n128 *)v10, (__n128 *)v10 + 3, (__n128 *)v10 + 6, (__n128 *)a2 - 3, a3);
        return;
      case 5uLL:
        sub_100009B7C((__n128 *)v10, (__n128 *)v10 + 3, (__n128 *)v10 + 6, (__n128 *)v10 + 9, (__n128 *)a2 - 3, a3);
        return;
      default:
        if (v13 <= 1151)
        {
          if ((a5 & 1) != 0)
            sub_100008F90((uint64_t)v10, a2, (uint64_t (**)(_QWORD, _QWORD))a3);
          else
            sub_1000090C0((uint64_t)v10, a2, (uint64_t (**)(_QWORD, _QWORD))a3);
          return;
        }
        if (v12 != 1)
        {
          v15 = v14 >> 1;
          v16 = &v10[3 * (v14 >> 1)];
          if ((unint64_t)v13 < 0x1801)
          {
            sub_1000091C4(v16, v10, a2 - 3, a3);
            if ((a5 & 1) != 0)
              goto LABEL_11;
          }
          else
          {
            sub_1000091C4(v10, v16, a2 - 3, a3);
            v17 = 3 * v15;
            v18 = &v10[3 * v15 - 3];
            sub_1000091C4(v10 + 3, v18, a2 - 6, a3);
            v19 = v10 + 6;
            v20 = &v10[v17 + 3];
            sub_1000091C4(v19, v20, a2 - 9, a3);
            sub_1000091C4(v18, v16, v20, a3);
            v21 = *a1;
            v22 = a1[2];
            v50 = a1[1];
            v51 = v22;
            v49 = v21;
            v23 = *v16;
            v24 = v16[2];
            a1[1] = v16[1];
            a1[2] = v24;
            *a1 = v23;
            v25 = v49;
            v26 = v51;
            v16[1] = v50;
            v16[2] = v26;
            *v16 = v25;
            if ((a5 & 1) != 0)
              goto LABEL_11;
          }
          v27 = *a3;
          v29 = *(a1 - 2);
          v28 = *(a1 - 1);
          v46[0] = *(a1 - 3);
          v46[1] = v29;
          v46[2] = v28;
          v30 = *a1;
          v31 = a1[2];
          v45[1] = a1[1];
          v45[2] = v31;
          v45[0] = v30;
          if ((((uint64_t (*)(_OWORD *, _OWORD *))v27)(v46, v45) & 1) == 0)
          {
            v10 = sub_1000093B4(a1, a2, (uint64_t (**)(_QWORD, _QWORD))a3);
            goto LABEL_16;
          }
LABEL_11:
          v32 = (__n128 *)sub_1000095E0(a1, a2, (uint64_t (**)(_QWORD, _QWORD))a3);
          if ((v33 & 1) == 0)
            goto LABEL_14;
          v34 = sub_1000097F0((__n128 *)a1, v32, a3);
          v10 = (__int128 *)&v32[3];
          if (!sub_1000097F0(v32 + 3, (__n128 *)a2, a3))
          {
            v11 = v12 + 1;
            if (v34)
              continue;
LABEL_14:
            sub_100008C3C(a1, v32, a3, -v12, a5 & 1);
            v10 = (__int128 *)&v32[3];
LABEL_16:
            a5 = 0;
            a4 = -v12;
            goto LABEL_2;
          }
          a4 = -v12;
          a2 = (__int128 *)v32;
          if (v34)
            return;
          goto LABEL_1;
        }
        if (v10 != a2)
          sub_100009D18((uint64_t)v10, a2, a2, a3);
        return;
    }
  }
}

  v9 = a2 - 4;
  v10 = a1;
LABEL_2:
  v11 = 1 - a4;
  while (2)
  {
    a1 = v10;
    v12 = v11;
    v13 = (char *)a2 - (char *)v10;
    v14 = ((char *)a2 - (char *)v10) >> 6;
    switch(v14)
    {
      case 0uLL:
      case 1uLL:
        return;
      case 2uLL:
        v36 = *a3;
        v37 = *(a2 - 1);
        v39 = *(a2 - 4);
        v38 = *(a2 - 3);
        v54[2] = *(a2 - 2);
        v54[3] = v37;
        v54[0] = v39;
        v54[1] = v38;
        v40 = v10[3];
        v42 = *v10;
        v41 = v10[1];
        v53[2] = v10[2];
        v53[3] = v40;
        v53[0] = v42;
        v53[1] = v41;
        if (v36(v54, v53))
        {
          v43 = *v10;
          v44 = v10[1];
          v45 = v10[3];
          v57 = v10[2];
          v58 = v45;
          v55 = v43;
          v56 = v44;
          v46 = *v9;
          v47 = *(a2 - 3);
          v48 = *(a2 - 1);
          v10[2] = *(a2 - 2);
          v10[3] = v48;
          *v10 = v46;
          v10[1] = v47;
          v49 = v56;
          *v9 = v55;
          *(a2 - 3) = v49;
          v50 = v58;
          *(a2 - 2) = v57;
          *(a2 - 1) = v50;
        }
        return;
      case 3uLL:
        sub_10000A870(v10, v10 + 4, a2 - 4, a3);
        return;
      case 4uLL:
        sub_10000B0DC((__n128 *)v10, (__n128 *)v10 + 4, (__n128 *)v10 + 8, (__n128 *)a2 - 4, a3);
        return;
      case 5uLL:
        sub_10000B224((uint64_t)v10, (__n128 *)v10 + 4, (__n128 *)v10 + 8, (__n128 *)v10 + 12, (__n128 *)a2 - 4, a3);
        return;
      default:
        if (v13 <= 1535)
        {
          if ((a5 & 1) != 0)
            sub_10000A638((uint64_t)v10, a2, (uint64_t (**)(_QWORD, _QWORD))a3);
          else
            sub_10000A768((uint64_t)v10, a2, (uint64_t (**)(_QWORD, _QWORD))a3);
          return;
        }
        if (v12 != 1)
        {
          v15 = v14 >> 1;
          v16 = &v10[4 * (v14 >> 1)];
          if ((unint64_t)v13 <= 0x2000)
          {
            sub_10000A870(&v10[4 * (v14 >> 1)], v10, a2 - 4, a3);
            if ((a5 & 1) != 0)
              goto LABEL_11;
          }
          else
          {
            sub_10000A870(v10, &v10[4 * (v14 >> 1)], a2 - 4, a3);
            sub_10000A870(v10 + 4, v16 - 4, a2 - 8, a3);
            sub_10000A870(v10 + 8, &v10[4 * v15 + 4], a2 - 12, a3);
            sub_10000A870(v16 - 4, v16, &v10[4 * v15 + 4], a3);
            v17 = *v10;
            v18 = v10[1];
            v19 = v10[3];
            v57 = v10[2];
            v58 = v19;
            v55 = v17;
            v56 = v18;
            v20 = *v16;
            v21 = v16[1];
            v22 = v16[3];
            v10[2] = v16[2];
            v10[3] = v22;
            *v10 = v20;
            v10[1] = v21;
            v23 = v55;
            v24 = v56;
            v25 = v58;
            v16[2] = v57;
            v16[3] = v25;
            *v16 = v23;
            v16[1] = v24;
            if ((a5 & 1) != 0)
              goto LABEL_11;
          }
          v26 = *a3;
          v27 = *(v10 - 1);
          v29 = *(v10 - 4);
          v28 = *(v10 - 3);
          v52[2] = *(v10 - 2);
          v52[3] = v27;
          v52[0] = v29;
          v52[1] = v28;
          v30 = v10[3];
          v32 = *v10;
          v31 = v10[1];
          v51[2] = v10[2];
          v51[3] = v30;
          v51[0] = v32;
          v51[1] = v31;
          if ((((uint64_t (*)(_OWORD *, _OWORD *))v26)(v52, v51) & 1) == 0)
          {
            v10 = sub_10000AA68(v10, a2, (uint64_t (**)(_QWORD, _QWORD))a3);
            goto LABEL_16;
          }
LABEL_11:
          v33 = sub_10000AC8C(v10, a2, (uint64_t (**)(_QWORD, _QWORD))a3);
          if ((v34 & 1) == 0)
            goto LABEL_14;
          v35 = sub_10000AE98((uint64_t)v10, (__n128 *)v33, a3);
          v10 = v33 + 4;
          if (!sub_10000AE98((uint64_t)(v33 + 4), (__n128 *)a2, a3))
          {
            v11 = v12 + 1;
            if (v35)
              continue;
LABEL_14:
            sub_10000A308(a1, v33, a3, -v12, a5 & 1);
            v10 = v33 + 4;
LABEL_16:
            a5 = 0;
            a4 = -v12;
            goto LABEL_2;
          }
          a4 = -v12;
          a2 = v33;
          if (v35)
            return;
          goto LABEL_1;
        }
        if (v10 != a2)
          sub_10000B3CC((uint64_t)v10, a2, a2, a3);
        return;
    }
  }
}

uint64_t sub_100008F90(uint64_t result, __int128 *a2, uint64_t (**a3)(_QWORD, _QWORD))
{
  uint64_t v3;
  uint64_t v4;
  _OWORD *v6;
  __int128 *v7;
  uint64_t v9;
  __int128 *v10;
  __int128 *v11;
  uint64_t (*v12)(_QWORD, _QWORD);
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  _OWORD *v18;
  __int128 v19;
  uint64_t (*v20)(_QWORD, _QWORD);
  __int128 v21;
  _OWORD *v22;
  __int128 v23;
  _OWORD v24[3];
  _OWORD v25[3];
  __int128 v26;
  __int128 v27;
  __int128 v28;
  _OWORD v29[3];
  _OWORD v30[3];
  uint64_t v31;
  uint64_t v32;

  if ((__int128 *)result != a2)
  {
    v31 = v3;
    v32 = v4;
    v6 = (_OWORD *)result;
    v7 = (__int128 *)(result + 48);
    if ((__int128 *)(result + 48) != a2)
    {
      v9 = 0;
      v10 = (__int128 *)result;
      do
      {
        v11 = v10;
        v10 = v7;
        v12 = *a3;
        v13 = v10[1];
        v30[0] = *v10;
        v30[1] = v13;
        v30[2] = v10[2];
        v14 = *v11;
        v15 = v11[2];
        v29[1] = v11[1];
        v29[2] = v15;
        v29[0] = v14;
        result = v12(v30, v29);
        if ((_DWORD)result)
        {
          v16 = v10[1];
          v26 = *v10;
          v27 = v16;
          v28 = v10[2];
          v17 = v9;
          while (1)
          {
            v18 = (_OWORD *)((char *)v6 + v17);
            v19 = *(_OWORD *)((char *)v6 + v17 + 16);
            v18[3] = *(_OWORD *)((char *)v6 + v17);
            v18[4] = v19;
            v18[5] = *(_OWORD *)((char *)v6 + v17 + 32);
            if (!v17)
              break;
            v20 = *a3;
            v25[0] = v26;
            v25[1] = v27;
            v25[2] = v28;
            v21 = *(v18 - 2);
            v24[0] = *(v18 - 3);
            v24[1] = v21;
            v24[2] = *(v18 - 1);
            result = v20(v25, v24);
            v17 -= 48;
            if ((result & 1) == 0)
            {
              v22 = (_OWORD *)((char *)v6 + v17 + 48);
              goto LABEL_10;
            }
          }
          v22 = v6;
LABEL_10:
          v23 = v27;
          *v22 = v26;
          v22[1] = v23;
          v22[2] = v28;
        }
        v7 = v10 + 3;
        v9 += 48;
      }
      while (v10 + 3 != a2);
    }
  }
  return result;
}

uint64_t sub_1000090C0(uint64_t result, __int128 *a2, uint64_t (**a3)(_QWORD, _QWORD))
{
  uint64_t v3;
  uint64_t v4;
  __int128 *v6;
  __int128 *i;
  __int128 *v9;
  uint64_t (*v10)(_QWORD, _QWORD);
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 *v15;
  __int128 *v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  uint64_t (*v20)(_QWORD, _QWORD);
  __int128 v21;
  __int128 v22;
  _OWORD v23[3];
  _OWORD v24[3];
  __int128 v25;
  __int128 v26;
  __int128 v27;
  _OWORD v28[3];
  _OWORD v29[3];
  uint64_t v30;
  uint64_t v31;

  if ((__int128 *)result != a2)
  {
    v30 = v3;
    v31 = v4;
    v6 = (__int128 *)result;
    for (i = (__int128 *)(result + 48); v6 + 3 != a2; i = v6 + 3)
    {
      v9 = v6;
      v6 = i;
      v10 = *a3;
      v11 = v6[1];
      v29[0] = *v6;
      v29[1] = v11;
      v29[2] = v6[2];
      v12 = *v9;
      v13 = v9[2];
      v28[1] = v9[1];
      v28[2] = v13;
      v28[0] = v12;
      result = v10(v29, v28);
      if ((_DWORD)result)
      {
        v14 = v6[1];
        v25 = *v6;
        v26 = v14;
        v27 = v6[2];
        v15 = v6;
        do
        {
          v16 = v15 - 3;
          v17 = *(v15 - 2);
          v18 = *(v15 - 1);
          v19 = *(v15 - 4);
          *v15 = *(v15 - 3);
          v15[1] = v17;
          v15[2] = v18;
          v20 = *a3;
          v24[0] = v25;
          v24[1] = v26;
          v24[2] = v27;
          v21 = *(v15 - 6);
          v23[1] = *(v15 - 5);
          v23[2] = v19;
          v23[0] = v21;
          result = v20(v24, v23);
          v15 = v16;
        }
        while ((result & 1) != 0);
        v22 = v26;
        *v16 = v25;
        v16[1] = v22;
        v16[2] = v27;
      }
    }
  }
  return result;
}

uint64_t sub_1000091C4(_OWORD *a1, _OWORD *a2, _OWORD *a3, unsigned int (**a4)(_QWORD, _QWORD))
{
  unsigned int (*v8)(_QWORD, _QWORD);
  __int128 v9;
  __int128 v10;
  char v11;
  unsigned int (*v12)(_QWORD, _QWORD);
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  uint64_t result;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  unsigned int (*v28)(_QWORD, _QWORD);
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  unsigned int (*v43)(_QWORD, _QWORD);
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  _OWORD v51[3];
  _OWORD v52[3];
  _OWORD v53[3];
  _OWORD v54[3];
  _OWORD v55[3];
  _OWORD v56[3];
  _OWORD v57[3];
  _OWORD v58[3];
  _OWORD v59[3];
  _OWORD v60[18];

  v8 = *a4;
  v9 = a2[1];
  v60[0] = *a2;
  v60[1] = v9;
  v60[2] = a2[2];
  v10 = a1[1];
  v59[0] = *a1;
  v59[1] = v10;
  v59[2] = a1[2];
  v11 = v8(v60, v59);
  v12 = *a4;
  if ((v11 & 1) != 0)
  {
    v13 = a3[1];
    v54[0] = *a3;
    v54[1] = v13;
    v54[2] = a3[2];
    v14 = a2[1];
    v53[0] = *a2;
    v53[1] = v14;
    v53[2] = a2[2];
    if (v12(v54, v53))
    {
      v15 = *a1;
      v16 = a1[1];
      v17 = a1[2];
      v19 = a3[1];
      v18 = a3[2];
      *a1 = *a3;
      a1[1] = v19;
      a1[2] = v18;
      a3[2] = v17;
      result = 1;
LABEL_9:
      *a3 = v15;
      a3[1] = v16;
      return result;
    }
    v38 = *a1;
    v39 = a1[1];
    v40 = a1[2];
    v42 = a2[1];
    v41 = a2[2];
    *a1 = *a2;
    a1[1] = v42;
    a1[2] = v41;
    a2[1] = v39;
    a2[2] = v40;
    *a2 = v38;
    v43 = *a4;
    v44 = *a3;
    v45 = a3[2];
    v52[1] = a3[1];
    v52[2] = v45;
    v46 = *a2;
    v47 = a2[1];
    v51[2] = a2[2];
    v52[0] = v44;
    v51[0] = v46;
    v51[1] = v47;
    if (v43(v52, v51))
    {
      v15 = *a2;
      v16 = a2[1];
      v48 = a2[2];
      v50 = a3[1];
      v49 = a3[2];
      *a2 = *a3;
      a2[1] = v50;
      a2[2] = v49;
      a3[2] = v48;
      result = 2;
      goto LABEL_9;
    }
  }
  else
  {
    v21 = a3[1];
    v58[0] = *a3;
    v58[1] = v21;
    v58[2] = a3[2];
    v22 = a2[1];
    v57[0] = *a2;
    v57[1] = v22;
    v57[2] = a2[2];
    result = ((uint64_t (*)(_OWORD *, _OWORD *))v12)(v58, v57);
    if (!(_DWORD)result)
      return result;
    v23 = *a2;
    v24 = a2[1];
    v25 = a2[2];
    v27 = a3[1];
    v26 = a3[2];
    *a2 = *a3;
    a2[1] = v27;
    a2[2] = v26;
    a3[1] = v24;
    a3[2] = v25;
    *a3 = v23;
    v28 = *a4;
    v29 = *a2;
    v30 = a2[2];
    v56[1] = a2[1];
    v56[2] = v30;
    v31 = *a1;
    v32 = a1[1];
    v55[2] = a1[2];
    v56[0] = v29;
    v55[0] = v31;
    v55[1] = v32;
    if (v28(v56, v55))
    {
      v33 = *a1;
      v34 = a1[1];
      v35 = a1[2];
      v37 = a2[1];
      v36 = a2[2];
      *a1 = *a2;
      a1[1] = v37;
      a1[2] = v36;
      a2[1] = v34;
      a2[2] = v35;
      result = 2;
      *a2 = v33;
      return result;
    }
  }
  return 1;
}

__int128 *sub_1000093B4(__int128 *a1, __int128 *a2, uint64_t (**a3)(_QWORD, _QWORD))
{
  __int128 *v4;
  __int128 v6;
  uint64_t (*v7)(_QWORD, _QWORD);
  __int128 v8;
  __int128 *v9;
  __int128 *v10;
  uint64_t (*v11)(_QWORD, _QWORD);
  __int128 v12;
  char v13;
  __int128 *v14;
  uint64_t (*v15)(_QWORD, _QWORD);
  __int128 v16;
  int v17;
  __int128 *v18;
  uint64_t (*v19)(_QWORD, _QWORD);
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  unsigned int (*v30)(_QWORD, _QWORD);
  __int128 v31;
  __int128 v32;
  __int128 v33;
  uint64_t (*v34)(_QWORD, _QWORD);
  __int128 *v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  _OWORD v41[3];
  _OWORD v42[3];
  _OWORD v43[3];
  _OWORD v44[3];
  _OWORD v45[3];
  _OWORD v46[3];
  _OWORD v47[3];
  _OWORD v48[3];
  _OWORD v49[3];
  _OWORD v50[3];
  _OWORD v51[3];
  _OWORD v52[3];
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;

  v4 = a2;
  v6 = a1[1];
  v53 = *a1;
  v54 = v6;
  v55 = a1[2];
  v7 = *a3;
  v52[0] = v53;
  v52[1] = v6;
  v52[2] = v55;
  v8 = *(a2 - 2);
  v51[0] = *(a2 - 3);
  v51[1] = v8;
  v51[2] = *(a2 - 1);
  if ((v7(v52, v51) & 1) != 0)
  {
    v9 = a1;
    do
    {
      v10 = v9 + 3;
      v11 = *a3;
      v50[0] = v53;
      v50[1] = v54;
      v50[2] = v55;
      v12 = v9[4];
      v49[0] = v9[3];
      v49[1] = v12;
      v49[2] = v9[5];
      v13 = v11(v50, v49);
      v9 = v10;
    }
    while ((v13 & 1) == 0);
  }
  else
  {
    v14 = a1 + 3;
    do
    {
      v10 = v14;
      if (v14 >= v4)
        break;
      v15 = *a3;
      v48[0] = v53;
      v48[1] = v54;
      v48[2] = v55;
      v16 = v10[1];
      v47[0] = *v10;
      v47[1] = v16;
      v47[2] = v10[2];
      v17 = v15(v48, v47);
      v14 = v10 + 3;
    }
    while (!v17);
  }
  if (v10 >= v4)
  {
    v18 = v4;
  }
  else
  {
    do
    {
      v18 = v4 - 3;
      v19 = *a3;
      v46[0] = v53;
      v46[1] = v54;
      v46[2] = v55;
      v20 = *(v4 - 2);
      v45[0] = *(v4 - 3);
      v45[1] = v20;
      v45[2] = *(v4 - 1);
      v4 -= 3;
    }
    while ((v19(v46, v45) & 1) != 0);
  }
  while (v10 < v18)
  {
    v21 = *v10;
    v22 = v10[2];
    v57 = v10[1];
    v58 = v22;
    v56 = v21;
    v23 = *v18;
    v24 = v18[2];
    v10[1] = v18[1];
    v10[2] = v24;
    *v10 = v23;
    v25 = v56;
    v26 = v58;
    v18[1] = v57;
    v18[2] = v26;
    *v18 = v25;
    do
    {
      v44[0] = v53;
      v44[1] = v54;
      v44[2] = v55;
      v28 = v10[3];
      v27 = v10[4];
      v29 = v10[5];
      v10 += 3;
      v30 = (unsigned int (*)(_QWORD, _QWORD))*a3;
      v43[1] = v27;
      v43[2] = v29;
      v43[0] = v28;
    }
    while (!v30(v44, v43));
    do
    {
      v42[0] = v53;
      v42[1] = v54;
      v42[2] = v55;
      v32 = *(v18 - 3);
      v31 = *(v18 - 2);
      v33 = *(v18 - 1);
      v18 -= 3;
      v34 = *a3;
      v41[1] = v31;
      v41[2] = v33;
      v41[0] = v32;
    }
    while ((v34(v42, v41) & 1) != 0);
  }
  v35 = v10 - 3;
  if (v10 - 3 != a1)
  {
    v36 = *v35;
    v37 = *(v10 - 1);
    a1[1] = *(v10 - 2);
    a1[2] = v37;
    *a1 = v36;
  }
  v38 = v53;
  v39 = v55;
  *(v10 - 2) = v54;
  *(v10 - 1) = v39;
  *v35 = v38;
  return v10;
}

__int128 *sub_1000095E0(__int128 *a1, __int128 *a2, uint64_t (**a3)(_QWORD, _QWORD))
{
  uint64_t v6;
  __int128 v7;
  uint64_t (*v8)(_QWORD, _QWORD);
  __int128 v9;
  __int128 *v10;
  __int128 *v11;
  __int128 *v12;
  unsigned int (*v13)(_QWORD, _QWORD);
  __int128 v14;
  uint64_t (*v15)(_QWORD, _QWORD);
  __int128 v16;
  __int128 *v17;
  __int128 *v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  uint64_t (*v27)(_QWORD, _QWORD);
  __int128 v28;
  __int128 v29;
  __int128 v30;
  unsigned int (*v31)(_QWORD, _QWORD);
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  _OWORD v37[3];
  _OWORD v38[3];
  _OWORD v39[3];
  _OWORD v40[3];
  _OWORD v41[3];
  _OWORD v42[3];
  _OWORD v43[3];
  _OWORD v44[3];
  _OWORD v45[3];
  _OWORD v46[3];
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;

  v6 = 0;
  v7 = a1[1];
  v47 = *a1;
  v48 = v7;
  v49 = a1[2];
  do
  {
    v8 = *a3;
    v9 = a1[v6 + 4];
    v46[0] = a1[v6 + 3];
    v46[1] = v9;
    v46[2] = a1[v6 + 5];
    v45[0] = v47;
    v45[1] = v48;
    v45[2] = v49;
    v6 += 3;
  }
  while ((v8(v46, v45) & 1) != 0);
  v10 = &a1[v6];
  v11 = &a1[v6 - 3];
  if (v6 == 3)
  {
    while (v10 < a2)
    {
      v15 = *a3;
      v12 = a2 - 3;
      v16 = *(a2 - 2);
      v44[0] = *(a2 - 3);
      v44[1] = v16;
      v44[2] = *(a2 - 1);
      v43[0] = v47;
      v43[1] = v48;
      v43[2] = v49;
      a2 -= 3;
      if ((v15(v44, v43) & 1) != 0)
        goto LABEL_9;
    }
    v12 = a2;
  }
  else
  {
    do
    {
      v12 = a2 - 3;
      v13 = (unsigned int (*)(_QWORD, _QWORD))*a3;
      v14 = *(a2 - 2);
      v42[0] = *(a2 - 3);
      v42[1] = v14;
      v42[2] = *(a2 - 1);
      v41[0] = v47;
      v41[1] = v48;
      v41[2] = v49;
      a2 -= 3;
    }
    while (!v13(v42, v41));
  }
LABEL_9:
  if (v10 < v12)
  {
    v17 = v10;
    v18 = v12;
    do
    {
      v20 = v17[1];
      v50 = *v17;
      v19 = v50;
      v51 = v20;
      v52 = v17[2];
      v21 = v52;
      v22 = *v18;
      v23 = v18[2];
      v17[1] = v18[1];
      v17[2] = v23;
      *v17 = v22;
      v18[1] = v20;
      v18[2] = v21;
      *v18 = v19;
      do
      {
        v25 = v17[4];
        v24 = v17[5];
        v26 = v17[3];
        v17 += 3;
        v27 = *a3;
        v40[0] = v26;
        v40[1] = v25;
        v40[2] = v24;
        v39[1] = v48;
        v39[2] = v49;
        v39[0] = v47;
      }
      while ((v27(v40, v39) & 1) != 0);
      do
      {
        v29 = *(v18 - 2);
        v28 = *(v18 - 1);
        v30 = *(v18 - 3);
        v18 -= 3;
        v31 = (unsigned int (*)(_QWORD, _QWORD))*a3;
        v38[0] = v30;
        v38[1] = v29;
        v38[2] = v28;
        v37[1] = v48;
        v37[2] = v49;
        v37[0] = v47;
      }
      while (!v31(v38, v37));
    }
    while (v17 < v18);
    v11 = v17 - 3;
  }
  if (v11 != a1)
  {
    v32 = *v11;
    v33 = v11[2];
    a1[1] = v11[1];
    a1[2] = v33;
    *a1 = v32;
  }
  v34 = v47;
  v35 = v49;
  v11[1] = v48;
  v11[2] = v35;
  *v11 = v34;
  return v11;
}

BOOL sub_1000097F0(__n128 *a1, __n128 *a2, unsigned int (**a3)(_QWORD, _QWORD))
{
  unint64_t v6;
  _BOOL8 result;
  unsigned int (*v8)(_QWORD, _QWORD);
  __n128 v9;
  __n128 v10;
  __n128 *v11;
  __n128 v12;
  __n128 v13;
  __n128 v14;
  __n128 v15;
  __n128 v16;
  __n128 *v17;
  __n128 *v18;
  uint64_t v19;
  int v20;
  unsigned int (*v21)(_QWORD, _QWORD);
  __n128 v22;
  __n128 v23;
  __n128 v24;
  __n128 v25;
  uint64_t v26;
  _OWORD *v27;
  __int128 v28;
  unsigned int (*v29)(_QWORD, _QWORD);
  __int128 v30;
  __n128 *v31;
  __n128 v32;
  _OWORD v33[3];
  _OWORD v34[3];
  __n128 v35;
  __n128 v36;
  __n128 v37;
  _OWORD v38[3];
  _OWORD v39[3];
  _OWORD v40[3];
  _OWORD v41[6];

  v6 = 0xAAAAAAAAAAAAAAABLL * (a2 - a1);
  result = 1;
  switch(v6)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      v8 = *a3;
      v9 = a2[-2];
      v41[0] = a2[-3];
      v41[1] = v9;
      v41[2] = a2[-1];
      v10 = a1[1];
      v40[0] = *a1;
      v40[1] = v10;
      v40[2] = a1[2];
      if (v8(v41, v40))
      {
        v11 = a2 - 3;
        v12 = *a1;
        v13 = a1[1];
        v14 = a1[2];
        v16 = a2[-2];
        v15 = a2[-1];
        *a1 = a2[-3];
        a1[1] = v16;
        a1[2] = v15;
        v11[1] = v13;
        v11[2] = v14;
        *v11 = v12;
      }
      return 1;
    case 3uLL:
      sub_1000091C4(a1, (__n128 *)a1[3].n128_u64, (__n128 *)a2[-3].n128_u64, a3);
      return 1;
    case 4uLL:
      sub_100009A3C(a1, a1 + 3, a1 + 6, a2 - 3, a3);
      return 1;
    case 5uLL:
      sub_100009B7C(a1, a1 + 3, a1 + 6, a1 + 9, a2 - 3, a3);
      return 1;
    default:
      v17 = a1 + 6;
      sub_1000091C4(a1, (__n128 *)a1[3].n128_u64, (__n128 *)a1[6].n128_u64, a3);
      v18 = a1 + 9;
      if (&a1[9] == a2)
        return 1;
      v19 = 0;
      v20 = 0;
      break;
  }
  while (1)
  {
    v21 = *a3;
    v22 = v18[1];
    v39[0] = *v18;
    v39[1] = v22;
    v39[2] = v18[2];
    v23 = *v17;
    v24 = v17[2];
    v38[1] = v17[1];
    v38[2] = v24;
    v38[0] = v23;
    if (v21(v39, v38))
    {
      v25 = v18[1];
      v35 = *v18;
      v36 = v25;
      v37 = v18[2];
      v26 = v19;
      while (1)
      {
        v27 = (_OWORD *)((char *)a1->n128_u64 + v26);
        v28 = *(__int128 *)((char *)&a1[7] + v26);
        v27[9] = *(__n128 *)((char *)&a1[6] + v26);
        v27[10] = v28;
        v27[11] = *(__n128 *)((char *)&a1[8] + v26);
        if (v26 == -96)
          break;
        v29 = *a3;
        v34[0] = v35;
        v34[1] = v36;
        v34[2] = v37;
        v30 = v27[4];
        v33[0] = v27[3];
        v33[1] = v30;
        v33[2] = v27[5];
        v26 -= 48;
        if ((((uint64_t (*)(_OWORD *, _OWORD *))v29)(v34, v33) & 1) == 0)
        {
          v31 = (__n128 *)((char *)a1 + v26 + 144);
          goto LABEL_12;
        }
      }
      v31 = a1;
LABEL_12:
      v32 = v36;
      *v31 = v35;
      v31[1] = v32;
      v31[2] = v37;
      if (++v20 == 8)
        return &v18[3] == a2;
    }
    v17 = v18;
    v19 += 48;
    v18 += 3;
    if (v18 == a2)
      return 1;
  }
}

__n128 sub_100009A3C(__n128 *a1, __n128 *a2, __n128 *a3, __n128 *a4, unsigned int (**a5)(_QWORD, _QWORD))
{
  unsigned int (*v10)(_QWORD, _QWORD);
  __n128 v11;
  __n128 v12;
  __n128 result;
  __n128 v14;
  __n128 v15;
  __n128 v16;
  __n128 v17;
  __n128 v18;
  unsigned int (*v19)(_QWORD, _QWORD);
  __n128 v20;
  __n128 v21;
  __n128 v22;
  __n128 v23;
  __n128 v24;
  __n128 v25;
  __n128 v26;
  __n128 v27;
  __n128 v28;
  unsigned int (*v29)(_QWORD, _QWORD);
  __n128 v30;
  __n128 v31;
  __n128 v32;
  __n128 v33;
  __n128 v34;
  __n128 v35;
  __n128 v36;
  __n128 v37;
  _OWORD v38[3];
  _OWORD v39[3];
  _OWORD v40[3];
  _OWORD v41[3];
  _OWORD v42[3];
  _OWORD v43[12];

  sub_1000091C4(a1, a2, a3, a5);
  v10 = *a5;
  v11 = a4[1];
  v43[0] = *a4;
  v43[1] = v11;
  v43[2] = a4[2];
  v12 = a3[1];
  v42[0] = *a3;
  v42[1] = v12;
  v42[2] = a3[2];
  if (v10(v43, v42))
  {
    v14 = *a3;
    v15 = a3[1];
    v16 = a3[2];
    v18 = a4[1];
    v17 = a4[2];
    *a3 = *a4;
    a3[1] = v18;
    a3[2] = v17;
    a4[1] = v15;
    a4[2] = v16;
    *a4 = v14;
    v19 = *a5;
    v20 = *a3;
    v21 = a3[2];
    v41[1] = a3[1];
    v41[2] = v21;
    v22 = *a2;
    v23 = a2[1];
    v40[2] = a2[2];
    v41[0] = v20;
    v40[0] = v22;
    v40[1] = v23;
    if (v19(v41, v40))
    {
      v24 = *a2;
      v25 = a2[1];
      v26 = a2[2];
      v28 = a3[1];
      v27 = a3[2];
      *a2 = *a3;
      a2[1] = v28;
      a2[2] = v27;
      a3[1] = v25;
      a3[2] = v26;
      *a3 = v24;
      v29 = *a5;
      v30 = *a2;
      v31 = a2[2];
      v39[1] = a2[1];
      v39[2] = v31;
      v32 = *a1;
      v33 = a1[1];
      v38[2] = a1[2];
      v39[0] = v30;
      v38[0] = v32;
      v38[1] = v33;
      if (v29(v39, v38))
      {
        result = *a1;
        v34 = a1[1];
        v35 = a1[2];
        v37 = a2[1];
        v36 = a2[2];
        *a1 = *a2;
        a1[1] = v37;
        a1[2] = v36;
        a2[1] = v34;
        a2[2] = v35;
        *a2 = result;
      }
    }
  }
  return result;
}

__n128 sub_100009B7C(__n128 *a1, __n128 *a2, __n128 *a3, __n128 *a4, __n128 *a5, unsigned int (**a6)(_QWORD, _QWORD))
{
  unsigned int (*v12)(_QWORD, _QWORD);
  __n128 v13;
  __n128 v14;
  __n128 result;
  __n128 v16;
  __n128 v17;
  __n128 v18;
  __n128 v19;
  __n128 v20;
  unsigned int (*v21)(_QWORD, _QWORD);
  __n128 v22;
  __n128 v23;
  __n128 v24;
  __n128 v25;
  __n128 v26;
  __n128 v27;
  __n128 v28;
  __n128 v29;
  __n128 v30;
  unsigned int (*v31)(_QWORD, _QWORD);
  __n128 v32;
  __n128 v33;
  __n128 v34;
  __n128 v35;
  __n128 v36;
  __n128 v37;
  __n128 v38;
  __n128 v39;
  __n128 v40;
  unsigned int (*v41)(_QWORD, _QWORD);
  __n128 v42;
  __n128 v43;
  __n128 v44;
  __int128 v45;
  __n128 v46;
  __n128 v47;
  __n128 v48;
  __n128 v49;
  _OWORD v50[3];
  _OWORD v51[3];
  _OWORD v52[3];
  _OWORD v53[3];
  _OWORD v54[3];
  _OWORD v55[3];
  _OWORD v56[3];
  _OWORD v57[15];

  sub_100009A3C((__n128 *)a1, a2, a3, a4, a6);
  v12 = *a6;
  v13 = a5[1];
  v57[0] = *a5;
  v57[1] = v13;
  v57[2] = a5[2];
  v14 = a4[1];
  v56[0] = *a4;
  v56[1] = v14;
  v56[2] = a4[2];
  if (v12(v57, v56))
  {
    v16 = *a4;
    v17 = a4[1];
    v18 = a4[2];
    v20 = a5[1];
    v19 = a5[2];
    *a4 = *a5;
    a4[1] = v20;
    a4[2] = v19;
    a5[1] = v17;
    a5[2] = v18;
    *a5 = v16;
    v21 = *a6;
    v22 = *a4;
    v23 = a4[2];
    v55[1] = a4[1];
    v55[2] = v23;
    v24 = *a3;
    v25 = a3[1];
    v54[2] = a3[2];
    v55[0] = v22;
    v54[0] = v24;
    v54[1] = v25;
    if (v21(v55, v54))
    {
      v26 = *a3;
      v27 = a3[1];
      v28 = a3[2];
      v30 = a4[1];
      v29 = a4[2];
      *a3 = *a4;
      a3[1] = v30;
      a3[2] = v29;
      a4[1] = v27;
      a4[2] = v28;
      *a4 = v26;
      v31 = *a6;
      v32 = *a3;
      v33 = a3[2];
      v53[1] = a3[1];
      v53[2] = v33;
      v34 = *a2;
      v35 = a2[1];
      v52[2] = a2[2];
      v53[0] = v32;
      v52[0] = v34;
      v52[1] = v35;
      if (v31(v53, v52))
      {
        v36 = *a2;
        v37 = a2[1];
        v38 = a2[2];
        v40 = a3[1];
        v39 = a3[2];
        *a2 = *a3;
        a2[1] = v40;
        a2[2] = v39;
        a3[1] = v37;
        a3[2] = v38;
        *a3 = v36;
        v41 = *a6;
        v42 = *a2;
        v43 = a2[2];
        v51[1] = a2[1];
        v51[2] = v43;
        v44 = *(__n128 *)a1;
        v45 = *(_OWORD *)(a1 + 16);
        v50[2] = *(_OWORD *)(a1 + 32);
        v51[0] = v42;
        v50[0] = v44;
        v50[1] = v45;
        if (v41(v51, v50))
        {
          result = *(__n128 *)a1;
          v46 = *(__n128 *)(a1 + 16);
          v47 = *(__n128 *)(a1 + 32);
          v49 = a2[1];
          v48 = a2[2];
          *(__n128 *)a1 = *a2;
          *(__n128 *)(a1 + 16) = v49;
          *(__n128 *)(a1 + 32) = v48;
          a2[1] = v46;
          a2[2] = v47;
          *a2 = result;
        }
      }
    }
  }
  return result;
}

_OWORD *sub_100009D18(uint64_t a1, _OWORD *a2, _OWORD *a3, unsigned int (**a4)(_QWORD, _QWORD))
{
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  __n128 *v12;
  _OWORD *v13;
  _OWORD *v14;
  unsigned int (*v15)(_OWORD *, _OWORD *);
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  int64_t v23;
  __n128 *v24;
  __n128 v25;
  __n128 *v26;
  __n128 v27;
  __n128 v28;
  __n128 v29;
  __n128 v30;
  _OWORD v33[3];
  _OWORD v34[6];
  __n128 v35;
  __n128 v36;
  __n128 v37;

  if ((_OWORD *)a1 != a2)
  {
    v8 = (uint64_t)a2 - a1;
    v9 = ((uint64_t)a2 - a1) / 48;
    if ((uint64_t)a2 - a1 >= 49)
    {
      v10 = (unint64_t)(v9 - 2) >> 1;
      v11 = v10 + 1;
      v12 = (__n128 *)(a1 + 48 * v10);
      do
      {
        sub_100009F00(a1, a4, v9, v12);
        v12 -= 3;
        --v11;
      }
      while (v11);
    }
    v13 = a2;
    if (a2 != a3)
    {
      v14 = a2;
      do
      {
        v15 = (unsigned int (*)(_OWORD *, _OWORD *))*a4;
        v16 = v14[1];
        v34[0] = *v14;
        v34[1] = v16;
        v34[2] = v14[2];
        v17 = *(_OWORD *)(a1 + 16);
        v33[0] = *(_OWORD *)a1;
        v33[1] = v17;
        v33[2] = *(_OWORD *)(a1 + 32);
        if (v15(v34, v33))
        {
          v18 = *v14;
          v19 = v14[1];
          v20 = v14[2];
          v22 = *(_OWORD *)(a1 + 16);
          v21 = *(_OWORD *)(a1 + 32);
          *v14 = *(_OWORD *)a1;
          v14[1] = v22;
          v14[2] = v21;
          *(_OWORD *)(a1 + 16) = v19;
          *(_OWORD *)(a1 + 32) = v20;
          *(_OWORD *)a1 = v18;
          sub_100009F00(a1, a4, v9, (__n128 *)a1);
        }
        v14 += 3;
      }
      while (v14 != a3);
      v13 = a3;
    }
    if (v8 >= 49)
    {
      v23 = v8 / 0x30uLL;
      v24 = (__n128 *)(a2 - 3);
      do
      {
        v25 = *(__n128 *)(a1 + 16);
        v35 = *(__n128 *)a1;
        v36 = v25;
        v37 = *(__n128 *)(a1 + 32);
        v26 = (__n128 *)sub_10000A0DC((_OWORD *)a1, (unsigned int (**)(_OWORD *, _OWORD *))a4, v23);
        if (v24 == v26)
        {
          v30 = v36;
          *v26 = v35;
          v26[1] = v30;
          v26[2] = v37;
        }
        else
        {
          v27 = *v24;
          v28 = v24[2];
          v26[1] = v24[1];
          v26[2] = v28;
          *v26 = v27;
          v29 = v36;
          *v24 = v35;
          v24[1] = v29;
          v24[2] = v37;
          sub_10000A1C4(a1, (uint64_t)&v26[3], a4, 0xAAAAAAAAAAAAAAABLL * (((uint64_t)&v26[3] - a1) >> 4));
        }
        v24 -= 3;
      }
      while (v23-- > 2);
    }
    return v13;
  }
  return a3;
}

__n128 sub_100009F00(uint64_t a1, unsigned int (**a2)(_QWORD, _QWORD), uint64_t a3, __n128 *a4)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  __n128 *v7;
  uint64_t v9;
  uint64_t v12;
  __n128 *v13;
  uint64_t v14;
  unsigned int (*v15)(_QWORD, _QWORD);
  __n128 v16;
  __n128 v17;
  __n128 v18;
  __n128 v19;
  unsigned int (*v20)(_QWORD, _QWORD);
  __n128 v21;
  __n128 v22;
  __n128 result;
  __n128 v24;
  __n128 *v25;
  __n128 v26;
  __n128 v27;
  uint64_t v28;
  unsigned int (*v29)(_QWORD, _QWORD);
  __n128 v30;
  __n128 v31;
  __n128 v32;
  __n128 v33;
  unsigned int (*v34)(_QWORD, _QWORD);
  __n128 v35;
  __n128 v36;
  _OWORD v37[3];
  _OWORD v38[3];
  _OWORD v39[3];
  _OWORD v40[3];
  __n128 v41;
  __n128 v42;
  __n128 v43;
  _OWORD v44[3];
  _OWORD v45[3];
  _OWORD v46[3];
  _OWORD v47[4];
  uint64_t v48;
  uint64_t v49;

  v6 = a3 - 2;
  if (a3 >= 2)
  {
    v48 = v4;
    v49 = v5;
    v7 = a4;
    v9 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) >= (uint64_t)(0xAAAAAAAAAAAAAAABLL * (((uint64_t)a4 - a1) >> 4)))
    {
      v12 = (0x5555555555555556 * (((uint64_t)a4 - a1) >> 4)) | 1;
      v13 = (__n128 *)(a1 + 48 * v12);
      v14 = 0x5555555555555556 * (((uint64_t)a4 - a1) >> 4) + 2;
      if (v14 < a3)
      {
        v15 = *a2;
        v16 = v13[1];
        v47[0] = *v13;
        v47[1] = v16;
        v17 = v13[3];
        v47[2] = v13[2];
        v18 = v13[4];
        v19 = v13[5];
        v46[0] = v17;
        v46[1] = v18;
        v46[2] = v19;
        if (v15(v47, v46))
        {
          v13 += 3;
          v12 = v14;
        }
      }
      v20 = *a2;
      v21 = v13[1];
      v45[0] = *v13;
      v45[1] = v21;
      v45[2] = v13[2];
      v22 = v7[1];
      v44[0] = *v7;
      v44[1] = v22;
      v44[2] = v7[2];
      if ((((uint64_t (*)(_OWORD *, _OWORD *))v20)(v45, v44) & 1) == 0)
      {
        v24 = v7[1];
        v41 = *v7;
        v42 = v24;
        v43 = v7[2];
        do
        {
          v25 = v13;
          v26 = *v13;
          v27 = v13[2];
          v7[1] = v13[1];
          v7[2] = v27;
          *v7 = v26;
          if (v9 < v12)
            break;
          v28 = (2 * v12) | 1;
          v13 = (__n128 *)(a1 + 48 * v28);
          if (2 * v12 + 2 < a3)
          {
            v29 = *a2;
            v30 = v13[1];
            v40[0] = *v13;
            v40[1] = v30;
            v31 = v13[3];
            v40[2] = v13[2];
            v32 = v13[4];
            v33 = v13[5];
            v39[0] = v31;
            v39[1] = v32;
            v39[2] = v33;
            if (v29(v40, v39))
            {
              v13 += 3;
              v28 = 2 * v12 + 2;
            }
          }
          v34 = *a2;
          v35 = v13[1];
          v38[0] = *v13;
          v38[1] = v35;
          v38[2] = v13[2];
          v37[0] = v41;
          v37[1] = v42;
          v37[2] = v43;
          v7 = v25;
          v12 = v28;
        }
        while (!v34(v38, v37));
        result = v41;
        v36 = v43;
        v25[1] = v42;
        v25[2] = v36;
        *v25 = result;
      }
    }
  }
  return result;
}

_OWORD *sub_10000A0DC(_OWORD *a1, unsigned int (**a2)(_OWORD *, _OWORD *), uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _OWORD *v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int (*v12)(_OWORD *, _OWORD *);
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  _OWORD v20[3];
  _OWORD v21[3];

  v6 = 0;
  v7 = a3 - 2;
  if (a3 < 2)
    v7 = a3 - 1;
  v8 = v7 >> 1;
  do
  {
    v9 = &a1[3 * v6 + 3];
    v10 = (2 * v6) | 1;
    v11 = 2 * v6 + 2;
    if (v11 < a3)
    {
      v12 = *a2;
      v14 = v9[1];
      v13 = v9[2];
      v21[0] = *v9;
      v21[1] = v14;
      v21[2] = v13;
      v15 = v9[3];
      v16 = v9[5];
      v20[1] = v9[4];
      v20[2] = v16;
      v20[0] = v15;
      if (v12(v21, v20))
      {
        v9 += 3;
        v10 = v11;
      }
    }
    v17 = *v9;
    v18 = v9[2];
    a1[1] = v9[1];
    a1[2] = v18;
    *a1 = v17;
    a1 = v9;
    v6 = v10;
  }
  while (v10 <= v8);
  return v9;
}

double sub_10000A1C4(uint64_t a1, uint64_t a2, unsigned int (**a3)(_QWORD, _QWORD), uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v9;
  unsigned int (*v10)(_QWORD, _QWORD);
  _OWORD *v11;
  __int128 v12;
  __int128 v13;
  double result;
  _OWORD *v15;
  __int128 v16;
  _OWORD *v17;
  __int128 v18;
  __int128 v19;
  unsigned int (*v20)(_QWORD, _QWORD);
  __int128 v21;
  char v22;
  __int128 v23;
  _OWORD v24[3];
  _OWORD v25[3];
  __int128 v26;
  __int128 v27;
  __int128 v28;
  _OWORD v29[3];
  _OWORD v30[3];
  uint64_t v31;
  uint64_t v32;

  if (a4 >= 2)
  {
    v31 = v4;
    v32 = v5;
    v9 = (unint64_t)(a4 - 2) >> 1;
    v10 = *a3;
    v11 = (_OWORD *)(a1 + 48 * v9);
    v12 = v11[1];
    v30[0] = *v11;
    v30[1] = v12;
    v30[2] = v11[2];
    v13 = *(_OWORD *)(a2 - 32);
    v29[0] = *(_OWORD *)(a2 - 48);
    v29[1] = v13;
    v29[2] = *(_OWORD *)(a2 - 16);
    if (v10(v30, v29))
    {
      v15 = (_OWORD *)(a2 - 48);
      v16 = *(_OWORD *)(a2 - 32);
      v26 = *(_OWORD *)(a2 - 48);
      v27 = v16;
      v28 = *(_OWORD *)(a2 - 16);
      do
      {
        v17 = v11;
        v18 = *v11;
        v19 = v11[2];
        v15[1] = v11[1];
        v15[2] = v19;
        *v15 = v18;
        if (!v9)
          break;
        v9 = (v9 - 1) >> 1;
        v20 = *a3;
        v11 = (_OWORD *)(a1 + 48 * v9);
        v21 = v11[1];
        v25[0] = *v11;
        v25[1] = v21;
        v25[2] = v11[2];
        v24[0] = v26;
        v24[1] = v27;
        v24[2] = v28;
        v22 = v20(v25, v24);
        v15 = v17;
      }
      while ((v22 & 1) != 0);
      v23 = v27;
      *v17 = v26;
      v17[1] = v23;
      result = *(double *)&v28;
      v17[2] = v28;
    }
  }
  return result;
}

void *sub_10000A2D4(uint64_t a1, unint64_t a2)
{
  if (a2 >> 58)
    sub_100008C14();
  return operator new(a2 << 6);
}

void sub_10000A308(__int128 *a1, __int128 *a2, unsigned int (**a3)(_QWORD, _QWORD), uint64_t a4, char a5)
{
  __int128 *v9;
  __int128 *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  __int128 *v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  unsigned int (*v26)(_QWORD, _QWORD);
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 *v33;
  char v34;
  BOOL v35;
  unsigned int (*v36)(_QWORD, _QWORD);
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  _OWORD v51[4];
  _OWORD v52[4];
  _OWORD v53[4];
  _OWORD v54[4];
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;

uint64_t sub_10000A638(uint64_t result, __int128 *a2, uint64_t (**a3)(_QWORD, _QWORD))
{
  uint64_t v3;
  uint64_t v4;
  _OWORD *v6;
  __int128 *v7;
  uint64_t v9;
  __int128 *v10;
  __int128 *v11;
  uint64_t (*v12)(_QWORD, _QWORD);
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  _OWORD *v21;
  __int128 v22;
  __int128 v23;
  uint64_t (*v24)(_QWORD, _QWORD);
  __int128 v25;
  __int128 v26;
  _OWORD *v27;
  __int128 v28;
  __int128 v29;
  _OWORD v30[4];
  _OWORD v31[4];
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  _OWORD v36[4];
  _OWORD v37[4];
  uint64_t v38;
  uint64_t v39;

  if ((__int128 *)result != a2)
  {
    v38 = v3;
    v39 = v4;
    v6 = (_OWORD *)result;
    v7 = (__int128 *)(result + 64);
    if ((__int128 *)(result + 64) != a2)
    {
      v9 = 0;
      v10 = (__int128 *)result;
      do
      {
        v11 = v10;
        v10 = v7;
        v12 = *a3;
        v13 = v10[1];
        v37[0] = *v10;
        v37[1] = v13;
        v14 = v10[3];
        v37[2] = v10[2];
        v37[3] = v14;
        v15 = v11[3];
        v17 = *v11;
        v16 = v11[1];
        v36[2] = v11[2];
        v36[3] = v15;
        v36[0] = v17;
        v36[1] = v16;
        result = v12(v37, v36);
        if ((_DWORD)result)
        {
          v18 = v10[1];
          v32 = *v10;
          v33 = v18;
          v19 = v10[3];
          v34 = v10[2];
          v35 = v19;
          v20 = v9;
          while (1)
          {
            v21 = (_OWORD *)((char *)v6 + v20);
            v22 = *(_OWORD *)((char *)v6 + v20 + 16);
            v21[4] = *(_OWORD *)((char *)v6 + v20);
            v21[5] = v22;
            v23 = *(_OWORD *)((char *)v6 + v20 + 48);
            v21[6] = *(_OWORD *)((char *)v6 + v20 + 32);
            v21[7] = v23;
            if (!v20)
              break;
            v24 = *a3;
            v31[0] = v32;
            v31[1] = v33;
            v31[2] = v34;
            v31[3] = v35;
            v25 = *(v21 - 3);
            v30[0] = *(v21 - 4);
            v30[1] = v25;
            v26 = *(v21 - 1);
            v30[2] = *(v21 - 2);
            v30[3] = v26;
            result = v24(v31, v30);
            v20 -= 64;
            if ((result & 1) == 0)
            {
              v27 = (_OWORD *)((char *)v6 + v20 + 64);
              goto LABEL_10;
            }
          }
          v27 = v6;
LABEL_10:
          v28 = v33;
          *v27 = v32;
          v27[1] = v28;
          v29 = v35;
          v27[2] = v34;
          v27[3] = v29;
        }
        v7 = v10 + 4;
        v9 += 64;
      }
      while (v10 + 4 != a2);
    }
  }
  return result;
}

uint64_t sub_10000A768(uint64_t result, __int128 *a2, uint64_t (**a3)(_QWORD, _QWORD))
{
  uint64_t v3;
  uint64_t v4;
  __int128 *v6;
  __int128 *i;
  __int128 *v9;
  uint64_t (*v10)(_QWORD, _QWORD);
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 *v18;
  __int128 *v19;
  __int128 v20;
  __int128 v21;
  uint64_t (*v22)(_QWORD, _QWORD);
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  _OWORD v28[4];
  _OWORD v29[4];
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  _OWORD v34[4];
  _OWORD v35[4];
  uint64_t v36;
  uint64_t v37;

  if ((__int128 *)result != a2)
  {
    v36 = v3;
    v37 = v4;
    v6 = (__int128 *)result;
    for (i = (__int128 *)(result + 64); v6 + 4 != a2; i = v6 + 4)
    {
      v9 = v6;
      v6 = i;
      v10 = *a3;
      v11 = v6[1];
      v35[0] = *v6;
      v35[1] = v11;
      v12 = v6[3];
      v35[2] = v6[2];
      v35[3] = v12;
      v13 = v9[3];
      v15 = *v9;
      v14 = v9[1];
      v34[2] = v9[2];
      v34[3] = v13;
      v34[0] = v15;
      v34[1] = v14;
      result = v10(v35, v34);
      if ((_DWORD)result)
      {
        v16 = v6[1];
        v30 = *v6;
        v31 = v16;
        v17 = v6[3];
        v32 = v6[2];
        v33 = v17;
        v18 = v6;
        do
        {
          v19 = v18 - 4;
          v20 = *(v18 - 3);
          *v18 = *(v18 - 4);
          v18[1] = v20;
          v21 = *(v18 - 1);
          v18[2] = *(v18 - 2);
          v18[3] = v21;
          v22 = *a3;
          v29[0] = v30;
          v29[1] = v31;
          v29[2] = v32;
          v29[3] = v33;
          v23 = *(v18 - 8);
          v24 = *(v18 - 7);
          v25 = *(v18 - 5);
          v28[2] = *(v18 - 6);
          v28[3] = v25;
          v28[0] = v23;
          v28[1] = v24;
          result = v22(v29, v28);
          v18 = v19;
        }
        while ((result & 1) != 0);
        v26 = v31;
        *v19 = v30;
        v19[1] = v26;
        v27 = v33;
        v19[2] = v32;
        v19[3] = v27;
      }
    }
  }
  return result;
}

uint64_t sub_10000A870(_OWORD *a1, _OWORD *a2, _OWORD *a3, unsigned int (**a4)(_QWORD, _QWORD))
{
  unsigned int (*v8)(_QWORD, _QWORD);
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  char v13;
  unsigned int (*v14)(_QWORD, _QWORD);
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  uint64_t result;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  unsigned int (*v38)(_QWORD, _QWORD);
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  unsigned int (*v59)(_QWORD, _QWORD);
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  _OWORD v71[4];
  _OWORD v72[4];
  _OWORD v73[4];
  _OWORD v74[4];
  _OWORD v75[4];
  _OWORD v76[4];
  _OWORD v77[4];
  _OWORD v78[4];
  _OWORD v79[4];
  _OWORD v80[24];

  v8 = *a4;
  v9 = a2[1];
  v80[0] = *a2;
  v80[1] = v9;
  v10 = a2[3];
  v80[2] = a2[2];
  v80[3] = v10;
  v11 = a1[1];
  v79[0] = *a1;
  v79[1] = v11;
  v12 = a1[3];
  v79[2] = a1[2];
  v79[3] = v12;
  v13 = v8(v80, v79);
  v14 = *a4;
  if ((v13 & 1) != 0)
  {
    v15 = a3[1];
    v74[0] = *a3;
    v74[1] = v15;
    v16 = a3[3];
    v74[2] = a3[2];
    v74[3] = v16;
    v17 = a2[1];
    v73[0] = *a2;
    v73[1] = v17;
    v18 = a2[3];
    v73[2] = a2[2];
    v73[3] = v18;
    if (v14(v74, v73))
    {
      v20 = a1[2];
      v19 = a1[3];
      v22 = *a1;
      v21 = a1[1];
      v23 = a3[3];
      v25 = *a3;
      v24 = a3[1];
      a1[2] = a3[2];
      a1[3] = v23;
      *a1 = v25;
      a1[1] = v24;
      *a3 = v22;
      a3[1] = v21;
      result = 1;
LABEL_9:
      a3[2] = v20;
      a3[3] = v19;
      return result;
    }
    v53 = a1[2];
    v52 = a1[3];
    v55 = *a1;
    v54 = a1[1];
    v56 = a2[3];
    v58 = *a2;
    v57 = a2[1];
    a1[2] = a2[2];
    a1[3] = v56;
    *a1 = v58;
    a1[1] = v57;
    *a2 = v55;
    a2[1] = v54;
    a2[2] = v53;
    a2[3] = v52;
    v59 = *a4;
    v60 = *a3;
    v61 = a3[1];
    v62 = a3[3];
    v72[2] = a3[2];
    v72[3] = v62;
    v72[0] = v60;
    v72[1] = v61;
    v63 = *a2;
    v64 = a2[1];
    v65 = a2[3];
    v71[2] = a2[2];
    v71[3] = v65;
    v71[0] = v63;
    v71[1] = v64;
    if (v59(v72, v71))
    {
      v20 = a2[2];
      v19 = a2[3];
      v67 = *a2;
      v66 = a2[1];
      v68 = a3[3];
      v70 = *a3;
      v69 = a3[1];
      a2[2] = a3[2];
      a2[3] = v68;
      *a2 = v70;
      a2[1] = v69;
      *a3 = v67;
      a3[1] = v66;
      result = 2;
      goto LABEL_9;
    }
  }
  else
  {
    v27 = a3[1];
    v78[0] = *a3;
    v78[1] = v27;
    v28 = a3[3];
    v78[2] = a3[2];
    v78[3] = v28;
    v29 = a2[1];
    v77[0] = *a2;
    v77[1] = v29;
    v30 = a2[3];
    v77[2] = a2[2];
    v77[3] = v30;
    result = ((uint64_t (*)(_OWORD *, _OWORD *))v14)(v78, v77);
    if (!(_DWORD)result)
      return result;
    v32 = a2[2];
    v31 = a2[3];
    v34 = *a2;
    v33 = a2[1];
    v35 = a3[3];
    v37 = *a3;
    v36 = a3[1];
    a2[2] = a3[2];
    a2[3] = v35;
    *a2 = v37;
    a2[1] = v36;
    *a3 = v34;
    a3[1] = v33;
    a3[2] = v32;
    a3[3] = v31;
    v38 = *a4;
    v39 = *a2;
    v40 = a2[1];
    v41 = a2[3];
    v76[2] = a2[2];
    v76[3] = v41;
    v76[0] = v39;
    v76[1] = v40;
    v42 = *a1;
    v43 = a1[1];
    v44 = a1[3];
    v75[2] = a1[2];
    v75[3] = v44;
    v75[0] = v42;
    v75[1] = v43;
    if (v38(v76, v75))
    {
      v46 = a1[2];
      v45 = a1[3];
      v48 = *a1;
      v47 = a1[1];
      v49 = a2[3];
      v51 = *a2;
      v50 = a2[1];
      a1[2] = a2[2];
      a1[3] = v49;
      *a1 = v51;
      a1[1] = v50;
      *a2 = v48;
      a2[1] = v47;
      result = 2;
      a2[2] = v46;
      a2[3] = v45;
      return result;
    }
  }
  return 1;
}

__int128 *sub_10000AA68(__int128 *a1, __int128 *a2, uint64_t (**a3)(_QWORD, _QWORD))
{
  __int128 *v4;
  __int128 v6;
  __int128 v7;
  uint64_t (*v8)(_QWORD, _QWORD);
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 *v12;
  __int128 *v13;
  uint64_t (*v14)(_QWORD, _QWORD);
  __int128 v15;
  __int128 v16;
  char v17;
  __int128 *v18;
  uint64_t (*v19)(_QWORD, _QWORD);
  __int128 v20;
  __int128 v21;
  int v22;
  __int128 *v23;
  uint64_t (*v24)(_QWORD, _QWORD);
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  unsigned int (*v40)(_QWORD, _QWORD);
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  uint64_t (*v45)(_QWORD, _QWORD);
  __int128 *v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  _OWORD v54[4];
  _OWORD v55[4];
  _OWORD v56[4];
  _OWORD v57[4];
  _OWORD v58[4];
  _OWORD v59[4];
  _OWORD v60[4];
  _OWORD v61[4];
  _OWORD v62[4];
  _OWORD v63[4];
  _OWORD v64[4];
  _OWORD v65[4];
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;

  v4 = a2;
  v6 = a1[1];
  v66 = *a1;
  v67 = v6;
  v7 = a1[3];
  v68 = a1[2];
  v69 = v7;
  v8 = *a3;
  v65[0] = v66;
  v65[1] = v6;
  v65[2] = v68;
  v65[3] = v7;
  v9 = *(a2 - 4);
  v10 = *(a2 - 3);
  v11 = *(a2 - 1);
  v64[2] = *(a2 - 2);
  v64[3] = v11;
  v64[0] = v9;
  v64[1] = v10;
  if ((v8(v65, v64) & 1) != 0)
  {
    v12 = a1;
    do
    {
      v13 = v12 + 4;
      v14 = *a3;
      v63[0] = v66;
      v63[1] = v67;
      v63[2] = v68;
      v63[3] = v69;
      v15 = v12[5];
      v62[0] = v12[4];
      v62[1] = v15;
      v16 = v12[7];
      v62[2] = v12[6];
      v62[3] = v16;
      v17 = v14(v63, v62);
      v12 = v13;
    }
    while ((v17 & 1) == 0);
  }
  else
  {
    v18 = a1 + 4;
    do
    {
      v13 = v18;
      if (v18 >= v4)
        break;
      v19 = *a3;
      v61[0] = v66;
      v61[1] = v67;
      v61[2] = v68;
      v61[3] = v69;
      v20 = v13[1];
      v60[0] = *v13;
      v60[1] = v20;
      v21 = v13[3];
      v60[2] = v13[2];
      v60[3] = v21;
      v22 = v19(v61, v60);
      v18 = v13 + 4;
    }
    while (!v22);
  }
  if (v13 >= v4)
  {
    v23 = v4;
  }
  else
  {
    do
    {
      v23 = v4 - 4;
      v24 = *a3;
      v59[0] = v66;
      v59[1] = v67;
      v59[2] = v68;
      v59[3] = v69;
      v25 = *(v4 - 3);
      v58[0] = *(v4 - 4);
      v58[1] = v25;
      v26 = *(v4 - 1);
      v58[2] = *(v4 - 2);
      v58[3] = v26;
      v4 -= 4;
    }
    while ((v24(v59, v58) & 1) != 0);
  }
  while (v13 < v23)
  {
    v27 = *v13;
    v28 = v13[1];
    v29 = v13[3];
    v72 = v13[2];
    v73 = v29;
    v70 = v27;
    v71 = v28;
    v30 = *v23;
    v31 = v23[1];
    v32 = v23[3];
    v13[2] = v23[2];
    v13[3] = v32;
    *v13 = v30;
    v13[1] = v31;
    v33 = v70;
    v34 = v71;
    v35 = v73;
    v23[2] = v72;
    v23[3] = v35;
    *v23 = v33;
    v23[1] = v34;
    do
    {
      v57[0] = v66;
      v57[1] = v67;
      v57[2] = v68;
      v57[3] = v69;
      v36 = v13[6];
      v37 = v13[7];
      v39 = v13[4];
      v38 = v13[5];
      v13 += 4;
      v40 = (unsigned int (*)(_QWORD, _QWORD))*a3;
      v56[2] = v36;
      v56[3] = v37;
      v56[0] = v39;
      v56[1] = v38;
    }
    while (!v40(v57, v56));
    do
    {
      v55[0] = v66;
      v55[1] = v67;
      v55[2] = v68;
      v55[3] = v69;
      v41 = *(v23 - 2);
      v42 = *(v23 - 1);
      v44 = *(v23 - 4);
      v43 = *(v23 - 3);
      v23 -= 4;
      v45 = *a3;
      v54[2] = v41;
      v54[3] = v42;
      v54[0] = v44;
      v54[1] = v43;
    }
    while ((v45(v55, v54) & 1) != 0);
  }
  v46 = v13 - 4;
  if (v13 - 4 != a1)
  {
    v47 = *v46;
    v48 = *(v13 - 3);
    v49 = *(v13 - 1);
    a1[2] = *(v13 - 2);
    a1[3] = v49;
    *a1 = v47;
    a1[1] = v48;
  }
  v50 = v66;
  v51 = v67;
  v52 = v69;
  *(v13 - 2) = v68;
  *(v13 - 1) = v52;
  *v46 = v50;
  *(v13 - 3) = v51;
  return v13;
}

__int128 *sub_10000AC8C(__int128 *a1, __int128 *a2, uint64_t (**a3)(_QWORD, _QWORD))
{
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  uint64_t (*v9)(_QWORD, _QWORD);
  __int128 v10;
  __int128 v11;
  __int128 *v12;
  __int128 *v13;
  __int128 *v14;
  unsigned int (*v15)(_QWORD, _QWORD);
  __int128 v16;
  __int128 v17;
  uint64_t (*v18)(_QWORD, _QWORD);
  __int128 v19;
  __int128 v20;
  __int128 *v21;
  __int128 *v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  uint64_t (*v34)(_QWORD, _QWORD);
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  unsigned int (*v39)(_QWORD, _QWORD);
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  _OWORD v47[4];
  _OWORD v48[4];
  _OWORD v49[4];
  _OWORD v50[4];
  _OWORD v51[4];
  _OWORD v52[4];
  _OWORD v53[4];
  _OWORD v54[4];
  _OWORD v55[4];
  _OWORD v56[4];
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;

  v6 = 0;
  v7 = a1[1];
  v57 = *a1;
  v58 = v7;
  v8 = a1[3];
  v59 = a1[2];
  v60 = v8;
  do
  {
    v9 = *a3;
    v10 = a1[v6 + 5];
    v56[0] = a1[v6 + 4];
    v56[1] = v10;
    v11 = a1[v6 + 7];
    v56[2] = a1[v6 + 6];
    v56[3] = v11;
    v55[0] = v57;
    v55[1] = v58;
    v55[2] = v59;
    v55[3] = v60;
    v6 += 4;
  }
  while ((v9(v56, v55) & 1) != 0);
  v12 = &a1[v6];
  v13 = &a1[v6 - 4];
  if (v6 == 4)
  {
    while (v12 < a2)
    {
      v18 = *a3;
      v14 = a2 - 4;
      v19 = *(a2 - 3);
      v54[0] = *(a2 - 4);
      v54[1] = v19;
      v20 = *(a2 - 1);
      v54[2] = *(a2 - 2);
      v54[3] = v20;
      v53[0] = v57;
      v53[1] = v58;
      v53[2] = v59;
      v53[3] = v60;
      a2 -= 4;
      if ((v18(v54, v53) & 1) != 0)
        goto LABEL_9;
    }
    v14 = a2;
  }
  else
  {
    do
    {
      v14 = a2 - 4;
      v15 = (unsigned int (*)(_QWORD, _QWORD))*a3;
      v16 = *(a2 - 3);
      v52[0] = *(a2 - 4);
      v52[1] = v16;
      v17 = *(a2 - 1);
      v52[2] = *(a2 - 2);
      v52[3] = v17;
      v51[0] = v57;
      v51[1] = v58;
      v51[2] = v59;
      v51[3] = v60;
      a2 -= 4;
    }
    while (!v15(v52, v51));
  }
LABEL_9:
  if (v12 < v14)
  {
    v21 = v12;
    v22 = v14;
    do
    {
      v24 = v21[1];
      v61 = *v21;
      v23 = v61;
      v62 = v24;
      v26 = v21[3];
      v63 = v21[2];
      v25 = v63;
      v64 = v26;
      v28 = v22[2];
      v27 = v22[3];
      v29 = v22[1];
      *v21 = *v22;
      v21[1] = v29;
      v21[2] = v28;
      v21[3] = v27;
      v22[2] = v25;
      v22[3] = v26;
      *v22 = v23;
      v22[1] = v24;
      do
      {
        v30 = v21[6];
        v31 = v21[7];
        v33 = v21[4];
        v32 = v21[5];
        v21 += 4;
        v34 = *a3;
        v50[2] = v30;
        v50[3] = v31;
        v50[0] = v33;
        v50[1] = v32;
        v49[0] = v57;
        v49[1] = v58;
        v49[2] = v59;
        v49[3] = v60;
      }
      while ((v34(v50, v49) & 1) != 0);
      do
      {
        v35 = *(v22 - 2);
        v36 = *(v22 - 1);
        v38 = *(v22 - 4);
        v37 = *(v22 - 3);
        v22 -= 4;
        v39 = (unsigned int (*)(_QWORD, _QWORD))*a3;
        v48[2] = v35;
        v48[3] = v36;
        v48[0] = v38;
        v48[1] = v37;
        v47[0] = v57;
        v47[1] = v58;
        v47[2] = v59;
        v47[3] = v60;
      }
      while (!v39(v48, v47));
    }
    while (v21 < v22);
    v13 = v21 - 4;
  }
  if (v13 != a1)
  {
    v40 = *v13;
    v41 = v13[1];
    v42 = v13[3];
    a1[2] = v13[2];
    a1[3] = v42;
    *a1 = v40;
    a1[1] = v41;
  }
  v43 = v57;
  v44 = v58;
  v45 = v60;
  v13[2] = v59;
  v13[3] = v45;
  *v13 = v43;
  v13[1] = v44;
  return v13;
}

BOOL sub_10000AE98(uint64_t a1, __n128 *a2, unsigned int (**a3)(_QWORD, _QWORD))
{
  uint64_t v6;
  _BOOL8 result;
  unsigned int (*v8)(_QWORD, _QWORD);
  __n128 v9;
  __n128 v10;
  __int128 v11;
  __int128 v12;
  __n128 *v13;
  __n128 v14;
  __n128 v15;
  __n128 v16;
  __n128 v17;
  __n128 v18;
  __n128 v19;
  __n128 v20;
  __n128 *v21;
  __n128 *v22;
  uint64_t v23;
  int v24;
  unsigned int (*v25)(_QWORD, _QWORD);
  __n128 v26;
  __n128 v27;
  __n128 v28;
  __n128 v29;
  __n128 v30;
  __n128 v31;
  __n128 v32;
  uint64_t v33;
  _OWORD *v34;
  __int128 v35;
  __int128 v36;
  unsigned int (*v37)(_QWORD, _QWORD);
  __int128 v38;
  __int128 v39;
  _OWORD *v40;
  __n128 v41;
  __n128 v42;
  _OWORD v43[4];
  _OWORD v44[4];
  __n128 v45;
  __n128 v46;
  __n128 v47;
  __n128 v48;
  _OWORD v49[4];
  _OWORD v50[4];
  _OWORD v51[4];
  _OWORD v52[8];

  v6 = ((uint64_t)a2 - a1) >> 6;
  result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v8 = *a3;
      v9 = a2[-3];
      v52[0] = a2[-4];
      v52[1] = v9;
      v10 = a2[-1];
      v52[2] = a2[-2];
      v52[3] = v10;
      v11 = *(_OWORD *)(a1 + 16);
      v51[0] = *(_OWORD *)a1;
      v51[1] = v11;
      v12 = *(_OWORD *)(a1 + 48);
      v51[2] = *(_OWORD *)(a1 + 32);
      v51[3] = v12;
      if (!v8(v52, v51))
        return 1;
      v13 = a2 - 4;
      v15 = *(__n128 *)(a1 + 32);
      v14 = *(__n128 *)(a1 + 48);
      v17 = *(__n128 *)a1;
      v16 = *(__n128 *)(a1 + 16);
      v18 = a2[-1];
      v20 = a2[-4];
      v19 = a2[-3];
      *(__n128 *)(a1 + 32) = a2[-2];
      *(__n128 *)(a1 + 48) = v18;
      *(__n128 *)a1 = v20;
      *(__n128 *)(a1 + 16) = v19;
      *v13 = v17;
      v13[1] = v16;
      result = 1;
      v13[2] = v15;
      v13[3] = v14;
      return result;
    case 3:
      sub_10000A870((_OWORD *)a1, (_OWORD *)(a1 + 64), (__n128 *)a2[-4].n128_u64, a3);
      return 1;
    case 4:
      sub_10000B0DC((__n128 *)a1, (__n128 *)(a1 + 64), (__n128 *)(a1 + 128), a2 - 4, a3);
      return 1;
    case 5:
      sub_10000B224(a1, (__n128 *)(a1 + 64), (__n128 *)(a1 + 128), (__n128 *)(a1 + 192), a2 - 4, a3);
      return 1;
    default:
      v21 = (__n128 *)(a1 + 128);
      sub_10000A870((_OWORD *)a1, (_OWORD *)(a1 + 64), (_OWORD *)(a1 + 128), a3);
      v22 = (__n128 *)(a1 + 192);
      if ((__n128 *)(a1 + 192) == a2)
        return 1;
      v23 = 0;
      v24 = 0;
      break;
  }
  while (1)
  {
    v25 = *a3;
    v26 = v22[1];
    v50[0] = *v22;
    v50[1] = v26;
    v27 = v22[3];
    v50[2] = v22[2];
    v50[3] = v27;
    v28 = v21[3];
    v30 = *v21;
    v29 = v21[1];
    v49[2] = v21[2];
    v49[3] = v28;
    v49[0] = v30;
    v49[1] = v29;
    if (v25(v50, v49))
    {
      v31 = v22[1];
      v45 = *v22;
      v46 = v31;
      v32 = v22[3];
      v47 = v22[2];
      v48 = v32;
      v33 = v23;
      while (1)
      {
        v34 = (_OWORD *)(a1 + v33);
        v35 = *(_OWORD *)(a1 + v33 + 144);
        v34[12] = *(_OWORD *)(a1 + v33 + 128);
        v34[13] = v35;
        v36 = *(_OWORD *)(a1 + v33 + 176);
        v34[14] = *(_OWORD *)(a1 + v33 + 160);
        v34[15] = v36;
        if (v33 == -128)
          break;
        v37 = *a3;
        v44[0] = v45;
        v44[1] = v46;
        v44[2] = v47;
        v44[3] = v48;
        v38 = v34[5];
        v43[0] = v34[4];
        v43[1] = v38;
        v39 = v34[7];
        v43[2] = v34[6];
        v43[3] = v39;
        v33 -= 64;
        if ((((uint64_t (*)(_OWORD *, _OWORD *))v37)(v44, v43) & 1) == 0)
        {
          v40 = (_OWORD *)(a1 + v33 + 192);
          goto LABEL_12;
        }
      }
      v40 = (_OWORD *)a1;
LABEL_12:
      v41 = v46;
      *v40 = v45;
      v40[1] = v41;
      v42 = v48;
      v40[2] = v47;
      v40[3] = v42;
      if (++v24 == 8)
        return &v22[4] == a2;
    }
    v21 = v22;
    v23 += 64;
    v22 += 4;
    if (v22 == a2)
      return 1;
  }
}

__n128 sub_10000B0DC(__n128 *a1, __n128 *a2, __n128 *a3, __n128 *a4, unsigned int (**a5)(_QWORD, _QWORD))
{
  unsigned int (*v10)(_QWORD, _QWORD);
  __n128 v11;
  __n128 v12;
  __n128 v13;
  __n128 v14;
  __n128 result;
  __n128 v16;
  __n128 v17;
  __n128 v18;
  __n128 v19;
  __n128 v20;
  __n128 v21;
  __n128 v22;
  unsigned int (*v23)(_QWORD, _QWORD);
  __n128 v24;
  __n128 v25;
  __n128 v26;
  __n128 v27;
  __n128 v28;
  __n128 v29;
  __n128 v30;
  __n128 v31;
  __n128 v32;
  __n128 v33;
  __n128 v34;
  __n128 v35;
  __n128 v36;
  unsigned int (*v37)(_QWORD, _QWORD);
  __n128 v38;
  __n128 v39;
  __n128 v40;
  __n128 v41;
  __n128 v42;
  __n128 v43;
  __n128 v44;
  __n128 v45;
  __n128 v46;
  __n128 v47;
  __n128 v48;
  __n128 v49;
  _OWORD v50[4];
  _OWORD v51[4];
  _OWORD v52[4];
  _OWORD v53[4];
  _OWORD v54[4];
  _OWORD v55[16];

  sub_10000A870(a1, a2, a3, a5);
  v10 = *a5;
  v11 = a4[1];
  v55[0] = *a4;
  v55[1] = v11;
  v12 = a4[3];
  v55[2] = a4[2];
  v55[3] = v12;
  v13 = a3[1];
  v54[0] = *a3;
  v54[1] = v13;
  v14 = a3[3];
  v54[2] = a3[2];
  v54[3] = v14;
  if (v10(v55, v54))
  {
    v17 = a3[2];
    v16 = a3[3];
    v19 = *a3;
    v18 = a3[1];
    v20 = a4[3];
    v22 = *a4;
    v21 = a4[1];
    a3[2] = a4[2];
    a3[3] = v20;
    *a3 = v22;
    a3[1] = v21;
    *a4 = v19;
    a4[1] = v18;
    a4[2] = v17;
    a4[3] = v16;
    v23 = *a5;
    v24 = *a3;
    v25 = a3[1];
    v26 = a3[3];
    v53[2] = a3[2];
    v53[3] = v26;
    v53[0] = v24;
    v53[1] = v25;
    v27 = *a2;
    v28 = a2[1];
    v29 = a2[3];
    v52[2] = a2[2];
    v52[3] = v29;
    v52[0] = v27;
    v52[1] = v28;
    if (v23(v53, v52))
    {
      v31 = a2[2];
      v30 = a2[3];
      v33 = *a2;
      v32 = a2[1];
      v34 = a3[3];
      v36 = *a3;
      v35 = a3[1];
      a2[2] = a3[2];
      a2[3] = v34;
      *a2 = v36;
      a2[1] = v35;
      *a3 = v33;
      a3[1] = v32;
      a3[2] = v31;
      a3[3] = v30;
      v37 = *a5;
      v38 = *a2;
      v39 = a2[1];
      v40 = a2[3];
      v51[2] = a2[2];
      v51[3] = v40;
      v51[0] = v38;
      v51[1] = v39;
      v41 = *a1;
      v42 = a1[1];
      v43 = a1[3];
      v50[2] = a1[2];
      v50[3] = v43;
      v50[0] = v41;
      v50[1] = v42;
      if (v37(v51, v50))
      {
        v44 = a1[2];
        result = a1[3];
        v46 = *a1;
        v45 = a1[1];
        v47 = a2[3];
        v49 = *a2;
        v48 = a2[1];
        a1[2] = a2[2];
        a1[3] = v47;
        *a1 = v49;
        a1[1] = v48;
        *a2 = v46;
        a2[1] = v45;
        a2[2] = v44;
        a2[3] = result;
      }
    }
  }
  return result;
}

__n128 sub_10000B224(uint64_t a1, __n128 *a2, __n128 *a3, __n128 *a4, __n128 *a5, unsigned int (**a6)(_QWORD, _QWORD))
{
  unsigned int (*v12)(_QWORD, _QWORD);
  __n128 v13;
  __n128 v14;
  __n128 v15;
  __n128 v16;
  __n128 result;
  __n128 v18;
  __n128 v19;
  __n128 v20;
  __n128 v21;
  __n128 v22;
  __n128 v23;
  __n128 v24;
  unsigned int (*v25)(_QWORD, _QWORD);
  __n128 v26;
  __n128 v27;
  __n128 v28;
  __n128 v29;
  __n128 v30;
  __n128 v31;
  __n128 v32;
  __n128 v33;
  __n128 v34;
  __n128 v35;
  __n128 v36;
  __n128 v37;
  __n128 v38;
  unsigned int (*v39)(_QWORD, _QWORD);
  __n128 v40;
  __n128 v41;
  __n128 v42;
  __n128 v43;
  __n128 v44;
  __n128 v45;
  __n128 v46;
  __n128 v47;
  __n128 v48;
  __n128 v49;
  __n128 v50;
  __n128 v51;
  __n128 v52;
  unsigned int (*v53)(_QWORD, _QWORD);
  __n128 v54;
  __n128 v55;
  __n128 v56;
  __n128 v57;
  __int128 v58;
  __int128 v59;
  __n128 v60;
  __n128 v61;
  __n128 v62;
  __n128 v63;
  __n128 v64;
  __n128 v65;
  _OWORD v66[4];
  _OWORD v67[4];
  _OWORD v68[4];
  _OWORD v69[4];
  _OWORD v70[4];
  _OWORD v71[4];
  _OWORD v72[4];
  _OWORD v73[20];

  sub_10000B0DC((__n128 *)a1, a2, a3, a4, a6);
  v12 = *a6;
  v13 = a5[1];
  v73[0] = *a5;
  v73[1] = v13;
  v14 = a5[3];
  v73[2] = a5[2];
  v73[3] = v14;
  v15 = a4[1];
  v72[0] = *a4;
  v72[1] = v15;
  v16 = a4[3];
  v72[2] = a4[2];
  v72[3] = v16;
  if (v12(v73, v72))
  {
    v19 = a4[2];
    v18 = a4[3];
    v21 = *a4;
    v20 = a4[1];
    v22 = a5[3];
    v24 = *a5;
    v23 = a5[1];
    a4[2] = a5[2];
    a4[3] = v22;
    *a4 = v24;
    a4[1] = v23;
    *a5 = v21;
    a5[1] = v20;
    a5[2] = v19;
    a5[3] = v18;
    v25 = *a6;
    v26 = *a4;
    v27 = a4[1];
    v28 = a4[3];
    v71[2] = a4[2];
    v71[3] = v28;
    v71[0] = v26;
    v71[1] = v27;
    v29 = *a3;
    v30 = a3[1];
    v31 = a3[3];
    v70[2] = a3[2];
    v70[3] = v31;
    v70[0] = v29;
    v70[1] = v30;
    if (v25(v71, v70))
    {
      v33 = a3[2];
      v32 = a3[3];
      v35 = *a3;
      v34 = a3[1];
      v36 = a4[3];
      v38 = *a4;
      v37 = a4[1];
      a3[2] = a4[2];
      a3[3] = v36;
      *a3 = v38;
      a3[1] = v37;
      *a4 = v35;
      a4[1] = v34;
      a4[2] = v33;
      a4[3] = v32;
      v39 = *a6;
      v40 = *a3;
      v41 = a3[1];
      v42 = a3[3];
      v69[2] = a3[2];
      v69[3] = v42;
      v69[0] = v40;
      v69[1] = v41;
      v43 = *a2;
      v44 = a2[1];
      v45 = a2[3];
      v68[2] = a2[2];
      v68[3] = v45;
      v68[0] = v43;
      v68[1] = v44;
      if (v39(v69, v68))
      {
        v47 = a2[2];
        v46 = a2[3];
        v49 = *a2;
        v48 = a2[1];
        v50 = a3[3];
        v52 = *a3;
        v51 = a3[1];
        a2[2] = a3[2];
        a2[3] = v50;
        *a2 = v52;
        a2[1] = v51;
        *a3 = v49;
        a3[1] = v48;
        a3[2] = v47;
        a3[3] = v46;
        v53 = *a6;
        v54 = *a2;
        v55 = a2[1];
        v56 = a2[3];
        v67[2] = a2[2];
        v67[3] = v56;
        v67[0] = v54;
        v67[1] = v55;
        v57 = *(__n128 *)a1;
        v58 = *(_OWORD *)(a1 + 16);
        v59 = *(_OWORD *)(a1 + 48);
        v66[2] = *(_OWORD *)(a1 + 32);
        v66[3] = v59;
        v66[0] = v57;
        v66[1] = v58;
        if (v53(v67, v66))
        {
          v60 = *(__n128 *)(a1 + 32);
          result = *(__n128 *)(a1 + 48);
          v62 = *(__n128 *)a1;
          v61 = *(__n128 *)(a1 + 16);
          v63 = a2[3];
          v65 = *a2;
          v64 = a2[1];
          *(__n128 *)(a1 + 32) = a2[2];
          *(__n128 *)(a1 + 48) = v63;
          *(__n128 *)a1 = v65;
          *(__n128 *)(a1 + 16) = v64;
          *a2 = v62;
          a2[1] = v61;
          a2[2] = v60;
          a2[3] = result;
        }
      }
    }
  }
  return result;
}

_OWORD *sub_10000B3CC(uint64_t a1, _OWORD *a2, _OWORD *a3, unsigned int (**a4)(_QWORD, _QWORD))
{
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  __n128 *v12;
  _OWORD *v13;
  _OWORD *v14;
  unsigned int (*v15)(_OWORD *, _OWORD *);
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;
  __n128 *v28;
  __n128 v29;
  __n128 v30;
  __n128 *v31;
  __n128 v32;
  __n128 v33;
  __n128 v34;
  __n128 v35;
  __n128 v36;
  __n128 v37;
  __n128 v38;
  _OWORD v41[4];
  _OWORD v42[8];
  __n128 v43;
  __n128 v44;
  __n128 v45;
  __n128 v46;

  if ((_OWORD *)a1 != a2)
  {
    v8 = (uint64_t)a2 - a1;
    v9 = ((uint64_t)a2 - a1) >> 6;
    if ((uint64_t)a2 - a1 >= 65)
    {
      v10 = (unint64_t)(v9 - 2) >> 1;
      v11 = v10 + 1;
      v12 = (__n128 *)(a1 + (v10 << 6));
      do
      {
        sub_10000B58C(a1, a4, v9, v12);
        v12 -= 4;
        --v11;
      }
      while (v11);
    }
    v13 = a2;
    if (a2 != a3)
    {
      v14 = a2;
      do
      {
        v15 = (unsigned int (*)(_OWORD *, _OWORD *))*a4;
        v16 = v14[1];
        v42[0] = *v14;
        v42[1] = v16;
        v17 = v14[3];
        v42[2] = v14[2];
        v42[3] = v17;
        v18 = *(_OWORD *)(a1 + 16);
        v41[0] = *(_OWORD *)a1;
        v41[1] = v18;
        v19 = *(_OWORD *)(a1 + 48);
        v41[2] = *(_OWORD *)(a1 + 32);
        v41[3] = v19;
        if (v15(v42, v41))
        {
          v21 = v14[2];
          v20 = v14[3];
          v23 = *v14;
          v22 = v14[1];
          v24 = *(_OWORD *)(a1 + 48);
          v26 = *(_OWORD *)a1;
          v25 = *(_OWORD *)(a1 + 16);
          v14[2] = *(_OWORD *)(a1 + 32);
          v14[3] = v24;
          *v14 = v26;
          v14[1] = v25;
          *(_OWORD *)a1 = v23;
          *(_OWORD *)(a1 + 16) = v22;
          *(_OWORD *)(a1 + 32) = v21;
          *(_OWORD *)(a1 + 48) = v20;
          sub_10000B58C(a1, a4, v9, (__n128 *)a1);
        }
        v14 += 4;
      }
      while (v14 != a3);
      v13 = a3;
    }
    if (v8 >= 65)
    {
      v27 = (unint64_t)v8 >> 6;
      v28 = (__n128 *)(a2 - 4);
      do
      {
        v29 = *(__n128 *)(a1 + 16);
        v43 = *(__n128 *)a1;
        v44 = v29;
        v30 = *(__n128 *)(a1 + 48);
        v45 = *(__n128 *)(a1 + 32);
        v46 = v30;
        v31 = (__n128 *)sub_10000B754((_OWORD *)a1, (unsigned int (**)(_OWORD *, _OWORD *))a4, v27);
        if (v28 == v31)
        {
          v37 = v44;
          *v31 = v43;
          v31[1] = v37;
          v38 = v46;
          v31[2] = v45;
          v31[3] = v38;
        }
        else
        {
          v32 = *v28;
          v33 = v28[1];
          v34 = v28[3];
          v31[2] = v28[2];
          v31[3] = v34;
          *v31 = v32;
          v31[1] = v33;
          v35 = v44;
          *v28 = v43;
          v28[1] = v35;
          v36 = v46;
          v28[2] = v45;
          v28[3] = v36;
          sub_10000B830(a1, (uint64_t)&v31[4], a4, ((uint64_t)&v31[4] - a1) >> 6);
        }
        v28 -= 4;
      }
      while (v27-- > 2);
    }
    return v13;
  }
  return a3;
}

__n128 sub_10000B58C(uint64_t a1, unsigned int (**a2)(_QWORD, _QWORD), uint64_t a3, __n128 *a4)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  __n128 *v7;
  int64_t v9;
  uint64_t v12;
  uint64_t v13;
  __n128 *v14;
  uint64_t v15;
  unsigned int (*v16)(_QWORD, _QWORD);
  __n128 v17;
  __n128 v18;
  __n128 v19;
  __n128 v20;
  unsigned int (*v21)(_QWORD, _QWORD);
  __n128 v22;
  __n128 v23;
  __n128 v24;
  __n128 v25;
  __n128 result;
  __n128 v27;
  __n128 v28;
  __n128 *v29;
  __n128 v30;
  __n128 v31;
  __n128 v32;
  uint64_t v33;
  unsigned int (*v34)(_QWORD, _QWORD);
  __n128 v35;
  __n128 v36;
  __n128 v37;
  __n128 v38;
  unsigned int (*v39)(_QWORD, _QWORD);
  __n128 v40;
  __n128 v41;
  __n128 v42;
  __n128 v43;
  _OWORD v44[4];
  _OWORD v45[4];
  _OWORD v46[4];
  _OWORD v47[4];
  __n128 v48;
  __n128 v49;
  __n128 v50;
  __n128 v51;
  _OWORD v52[4];
  _OWORD v53[4];
  _OWORD v54[4];
  _OWORD v55[4];
  uint64_t v56;
  uint64_t v57;

  v6 = a3 - 2;
  if (a3 >= 2)
  {
    v56 = v4;
    v57 = v5;
    v7 = a4;
    v9 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) >= ((uint64_t)a4 - a1) >> 6)
    {
      v12 = ((uint64_t)a4 - a1) >> 5;
      v13 = v12 + 1;
      v14 = (__n128 *)(a1 + ((v12 + 1) << 6));
      v15 = v12 + 2;
      if (v12 + 2 < a3)
      {
        v16 = *a2;
        v17 = v14[1];
        v55[0] = *v14;
        v55[1] = v17;
        v18 = v14[3];
        v55[2] = v14[2];
        v55[3] = v18;
        v19 = v14[5];
        v54[0] = v14[4];
        v54[1] = v19;
        v20 = v14[7];
        v54[2] = v14[6];
        v54[3] = v20;
        if (v16(v55, v54))
        {
          v14 += 4;
          v13 = v15;
        }
      }
      v21 = *a2;
      v22 = v14[1];
      v53[0] = *v14;
      v53[1] = v22;
      v23 = v14[3];
      v53[2] = v14[2];
      v53[3] = v23;
      v24 = v7[1];
      v52[0] = *v7;
      v52[1] = v24;
      v25 = v7[3];
      v52[2] = v7[2];
      v52[3] = v25;
      if ((((uint64_t (*)(_OWORD *, _OWORD *))v21)(v53, v52) & 1) == 0)
      {
        v27 = v7[1];
        v48 = *v7;
        v49 = v27;
        v28 = v7[3];
        v50 = v7[2];
        v51 = v28;
        do
        {
          v29 = v14;
          v30 = *v14;
          v31 = v14[1];
          v32 = v14[3];
          v7[2] = v14[2];
          v7[3] = v32;
          *v7 = v30;
          v7[1] = v31;
          if (v9 < v13)
            break;
          v33 = (2 * v13) | 1;
          v14 = (__n128 *)(a1 + (v33 << 6));
          if (2 * v13 + 2 < a3)
          {
            v34 = *a2;
            v35 = v14[1];
            v47[0] = *v14;
            v47[1] = v35;
            v36 = v14[3];
            v47[2] = v14[2];
            v47[3] = v36;
            v37 = v14[5];
            v46[0] = v14[4];
            v46[1] = v37;
            v38 = v14[7];
            v46[2] = v14[6];
            v46[3] = v38;
            if (v34(v47, v46))
            {
              v14 += 4;
              v33 = 2 * v13 + 2;
            }
          }
          v39 = *a2;
          v40 = v14[1];
          v45[0] = *v14;
          v45[1] = v40;
          v41 = v14[3];
          v45[2] = v14[2];
          v45[3] = v41;
          v44[0] = v48;
          v44[1] = v49;
          v44[2] = v50;
          v44[3] = v51;
          v7 = v29;
          v13 = v33;
        }
        while (!v39(v45, v44));
        result = v48;
        v42 = v49;
        v43 = v51;
        v29[2] = v50;
        v29[3] = v43;
        *v29 = result;
        v29[1] = v42;
      }
    }
  }
  return result;
}

_OWORD *sub_10000B754(_OWORD *a1, unsigned int (**a2)(_OWORD *, _OWORD *), uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _OWORD *v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int (*v12)(_OWORD *, _OWORD *);
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  _OWORD v23[4];
  _OWORD v24[4];

  v6 = 0;
  v7 = a3 - 2;
  if (a3 < 2)
    v7 = a3 - 1;
  v8 = v7 >> 1;
  do
  {
    v9 = &a1[4 * v6 + 4];
    v10 = (2 * v6) | 1;
    v11 = 2 * v6 + 2;
    if (v11 < a3)
    {
      v12 = *a2;
      v13 = v9[3];
      v15 = *v9;
      v14 = v9[1];
      v24[2] = v9[2];
      v24[3] = v13;
      v24[0] = v15;
      v24[1] = v14;
      v16 = v9[7];
      v18 = v9[4];
      v17 = v9[5];
      v23[2] = v9[6];
      v23[3] = v16;
      v23[0] = v18;
      v23[1] = v17;
      if (v12(v24, v23))
      {
        v9 += 4;
        v10 = v11;
      }
    }
    v19 = *v9;
    v20 = v9[1];
    v21 = v9[3];
    a1[2] = v9[2];
    a1[3] = v21;
    *a1 = v19;
    a1[1] = v20;
    a1 = v9;
    v6 = v10;
  }
  while (v10 <= v8);
  return v9;
}

double sub_10000B830(uint64_t a1, uint64_t a2, unsigned int (**a3)(_QWORD, _QWORD), uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unsigned int (*v10)(_QWORD, _QWORD);
  unint64_t v11;
  _OWORD *v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  double result;
  _OWORD *v18;
  __int128 v19;
  __int128 v20;
  _OWORD *v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  unsigned int (*v25)(_QWORD, _QWORD);
  __int128 v26;
  __int128 v27;
  char v28;
  __int128 v29;
  __int128 v30;
  _OWORD v31[4];
  _OWORD v32[4];
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  _OWORD v37[4];
  _OWORD v38[4];
  uint64_t v39;
  uint64_t v40;

  v6 = a4 - 2;
  if (a4 >= 2)
  {
    v39 = v4;
    v40 = v5;
    v10 = *a3;
    v11 = v6 >> 1;
    v12 = (_OWORD *)(a1 + (v6 >> 1 << 6));
    v13 = v12[1];
    v38[0] = *v12;
    v38[1] = v13;
    v14 = v12[3];
    v38[2] = v12[2];
    v38[3] = v14;
    v15 = *(_OWORD *)(a2 - 48);
    v37[0] = *(_OWORD *)(a2 - 64);
    v37[1] = v15;
    v16 = *(_OWORD *)(a2 - 16);
    v37[2] = *(_OWORD *)(a2 - 32);
    v37[3] = v16;
    if (v10(v38, v37))
    {
      v18 = (_OWORD *)(a2 - 64);
      v19 = *(_OWORD *)(a2 - 48);
      v33 = *(_OWORD *)(a2 - 64);
      v34 = v19;
      v20 = *(_OWORD *)(a2 - 16);
      v35 = *(_OWORD *)(a2 - 32);
      v36 = v20;
      do
      {
        v21 = v12;
        v22 = *v12;
        v23 = v12[1];
        v24 = v12[3];
        v18[2] = v12[2];
        v18[3] = v24;
        *v18 = v22;
        v18[1] = v23;
        if (!v11)
          break;
        v25 = *a3;
        v11 = (v11 - 1) >> 1;
        v12 = (_OWORD *)(a1 + (v11 << 6));
        v26 = v12[1];
        v32[0] = *v12;
        v32[1] = v26;
        v27 = v12[3];
        v32[2] = v12[2];
        v32[3] = v27;
        v31[0] = v33;
        v31[1] = v34;
        v31[2] = v35;
        v31[3] = v36;
        v28 = v25(v32, v31);
        v18 = v21;
      }
      while ((v28 & 1) != 0);
      v29 = v34;
      *v21 = v33;
      v21[1] = v29;
      result = *(double *)&v35;
      v30 = v36;
      v21[2] = v35;
      v21[3] = v30;
    }
  }
  return result;
}

void *sub_10000B930(uint64_t a1, unint64_t a2)
{
  if (a2 >> 59)
    sub_100008C14();
  return operator new(32 * a2);
}

void *sub_10000B964(uint64_t a1, unint64_t a2)
{
  if (a2 >> 61)
    sub_100008C14();
  return operator new(8 * a2);
}

BOOL sub_10000C06C(id a1, NTHeadlineProviding *a2)
{
  void *v2;
  unsigned __int8 v3;

  v2 = (void *)objc_claimAutoreleasedReturnValue(-[NTHeadlineProviding NewsURL](a2, "NewsURL"));
  if ((objc_msgSend(v2, "fc_isNewsArticleURL") & 1) != 0)
    v3 = 1;
  else
    v3 = objc_msgSend(v2, "fc_isHardPaywallNewsArticleURL:", 0);

  return v3;
}

void sub_10000C0E0(void *a1, NSObject *a2, int a3, const char *a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint8_t buf)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, &buf, 0x26u);
}

uint64_t CGColorSpaceGetSRGB(void)
{
  if (qword_1000BCC28 != -1)
    dispatch_once(&qword_1000BCC28, &stru_1000AA4A0);
  return qword_1000BCC20;
}

void sub_10000C170(id a1)
{
  qword_1000BCC20 = (uint64_t)CGColorSpaceCreateWithName(kCGColorSpaceSRGB);
}

BOOL FTWidgetLingerStatePropertiesAreDifferent(void *a1, void *a2)
{
  id v3;
  id v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  id v9;
  id v10;
  _BOOL8 v11;

  v3 = a1;
  v4 = a2;
  if (!v3 && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
  {
    sub_10007FEC0();
    if (v4)
      goto LABEL_6;
  }
  else if (v4)
  {
    goto LABEL_6;
  }
  if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
    sub_10007FE08();
LABEL_6:
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "todaySourceIdentifier"));
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "todaySourceIdentifier"));
  if (objc_msgSend(v5, "isEqual:", v6))
  {
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "appConfigTreatmentID"));
    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "appConfigTreatmentID"));
    if (+[NSObject nf_object:isEqualToObject:](NSObject, "nf_object:isEqualToObject:", v7, v8)&& (v9 = objc_msgSend(v3, "widgetDisplayMode"), v9 == objc_msgSend(v4, "widgetDisplayMode")))
    {
      v10 = objc_msgSend(v3, "appearanceType");
      v11 = v10 != objc_msgSend(v4, "appearanceType");
    }
    else
    {
      v11 = 1;
    }

  }
  else
  {
    v11 = 1;
  }

  return v11;
}

void sub_10000D6E8(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint8_t *a5)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, a5, 0x26u);
}

void sub_10000DEDC(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;

  v3 = a2;
  v4 = *(_QWORD *)(a1 + 32);
  if (!v4)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      sub_1000808E0();
    v4 = *(_QWORD *)(a1 + 32);
  }
  objc_msgSend(v3, "ft_setTemporalBoundsBySanitizingStartDate:endDate:", v4, *(_QWORD *)(a1 + 40));

}

id sub_10000DF38(id *a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  uint64_t v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;

  v3 = a2;
  if (!objc_msgSend(v3, "itemType"))
  {
    v6 = FCCheckedProtocolCast(&OBJC_PROTOCOL___NTHeadlineProviding, v3);
    v7 = (void *)objc_claimAutoreleasedReturnValue(v6);
    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "analyticsElement"));
    if (v5)
    {
      v4 = (void *)objc_opt_new(NTPBTodayWidgetHeadlineExposure);
      objc_msgSend(v4, "setWidgetContentType:", 1);
      v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "articleID"));
      objc_msgSend(v4, "setArticleId:", v8);

      v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "channelID"));
      objc_msgSend(v4, "setSourceChannelId:", v9);

      objc_msgSend(v4, "setWidgetType:", objc_msgSend(a1[4], "_pbWidgetTypeWithStackKind:", objc_msgSend(a1[5], "stackKind")));
      objc_msgSend(v4, "setWidgetExposureStackLocation:", objc_msgSend(a1[4], "_pbStackLocationWithStackLocation:", objc_msgSend(a1[5], "stackLocation")));
      v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "storyType"));
      objc_msgSend(v4, "setStoryType:", v10);

      if (!v4)
        goto LABEL_3;
      objc_msgSend(v4, "setWidgetArticleCount:", objc_msgSend(a1[6], "count"));
      objc_msgSend(v4, "setWidgetArticleRank:", objc_msgSend(a1[5], "absoluteOrderOfItem:", v3));
      v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[5], "sectionForItem:", v3));
      objc_msgSend(v4, "setWidgetArticleRankInSection:", objc_msgSend(a1[5], "absoluteOrderOfItemInSection:", v3));
      objc_msgSend(v4, "setWidgetSectionDisplayRank:", objc_msgSend(a1[5], "absoluteOrderOfSection:", v7));
      v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "identifier"));
      objc_msgSend(v4, "setWidgetSectionId:", v11);

      v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "subidentifier"));
      objc_msgSend(v4, "setWidgetSectionSubid:", v12);

      v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "items"));
      objc_msgSend(v4, "setWidgetArticleCountInSection:", objc_msgSend(v13, "count"));

      v14 = (void *)objc_opt_new(NTPBEventObject);
      objc_msgSend(v14, "setTodayWidgetHeadlineExposure:", v4);
      v5 = (void *)objc_claimAutoreleasedReturnValue(+[NTPBEvent nss_eventWithIdentifier](NTPBEvent, "nss_eventWithIdentifier"));
      v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[4], "eventAnnotator"));
      objc_msgSend(v15, "annotateEvent:withOptions:", v5, 47);

      objc_msgSend(a1[4], "_annotateEvent:withTrackableWidgetState:", v5, a1[5]);
      objc_msgSend(v5, "setEventObject:", v14);

    }
    else
    {
      v4 = 0;
    }

    goto LABEL_9;
  }
  v4 = 0;
LABEL_3:
  v5 = 0;
LABEL_9:

  return v5;
}

void sub_10000E1C8(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  int v7;
  int v8;
  double v9;
  id v10;

  v5 = a3;
  v6 = a2;
  v10 = (id)objc_opt_new(NTPBWidgetPersonalizationFeatureCTRPair);
  objc_msgSend(v10, "setPersonalizationFeatureId:", v6);

  objc_msgSend(v5, "floatValue");
  v8 = v7;

  LODWORD(v9) = v8;
  objc_msgSend(v10, "setCtr:", v9);
  objc_msgSend(*(id *)(a1 + 32), "addWidgetPersonalizationFeatureCTRPair:", v10);

}

id sub_10000E25C(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;

  v3 = a2;
  v4 = (void *)objc_opt_new(NTPBWidgetSectionsArticleCountPair);
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "identifier"));
  objc_msgSend(v4, "setWidgetSectionIdsExposed:", v5);

  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "subidentifier"));
  objc_msgSend(v4, "setWidgetSectionSubidsExposed:", v6);

  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "objectForKeyedSubscript:", v3));
  objc_msgSend(v4, "addCountOfArticlesExposedEachSection:", objc_msgSend(v7, "unsignedIntegerValue"));

  return v4;
}

id sub_10000EC28(uint64_t a1, void *a2)
{
  id v3;
  void *v4;

  v3 = a2;
  if ((objc_msgSend(*(id *)(a1 + 32), "isEqual:", v3) & 1) != 0)
    v4 = 0;
  else
    v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "identifier"));

  return v4;
}

BOOL sub_10000F15C(id a1, NTTodayResults *a2, NTTodayResultOperationFetchInfoProviding *a3)
{
  void *v3;
  void *v4;

  v3 = (void *)NTNewsSourceIdentifier;
  v4 = (void *)objc_claimAutoreleasedReturnValue(-[NTTodayResultOperationFetchInfoProviding todaySourceIdentifier](a3, "todaySourceIdentifier"));
  LOBYTE(v3) = objc_msgSend(v3, "isEqualToString:", v4) ^ 1;

  return (char)v3;
}

BOOL sub_10000F334(id a1, NTTodayResults *a2, NTTodayResultOperationFetchInfoProviding *a3)
{
  void *v3;
  void *v4;

  v3 = (void *)NTNewsSourceIdentifier;
  v4 = (void *)objc_claimAutoreleasedReturnValue(-[NTTodayResultOperationFetchInfoProviding todaySourceIdentifier](a3, "todaySourceIdentifier"));
  LOBYTE(v3) = objc_msgSend(v3, "isEqualToString:", v4);

  return (char)v3;
}

id FTCampaignIdentifierForSourceIdentifier(void *a1)
{
  id v1;
  id v2;

  v1 = a1;
  if (objc_msgSend(v1, "isEqualToString:", NTNewsSourceIdentifier)
    || objc_msgSend(v1, "isEqualToString:", NTUnknownSourceIdentifier))
  {
    v2 = NSSNewsWidgetNewsModeCampaignID;
  }
  else
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      sub_100081258();
    v2 = 0;
  }

  return v2;
}

double *FR_HSL_TO_RGB(double *result, double *a2, double *a3, double a4, double a5, double a6)
{
  uint64_t v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;

  if (a5 == 0.0)
  {
    if (result)
      *result = a6;
    if (a2)
      *a2 = a6;
    if (!a3)
      return result;
LABEL_27:
    *a3 = a6;
    return result;
  }
  v6 = 0;
  v7 = a5 + a6 - a6 * a5;
  v8 = (a5 + 1.0) * a6;
  if (a6 >= 0.5)
    v8 = v7;
  v9 = -(v8 - a6 * 2.0);
  v12 = a4 + 0.333333333;
  v13 = a4;
  v14 = a4 + -0.333333333;
  do
  {
    v10 = *(double *)((char *)&v12 + v6);
    if (v10 < 0.0)
      v10 = v10 + 1.0;
    if (v10 > 1.0)
      v10 = v10 + -1.0;
    if (v10 * 6.0 >= 1.0)
    {
      v11 = v8;
      if (v10 + v10 >= 1.0)
      {
        v11 = v9;
        if (v10 * 3.0 < 2.0)
          v11 = v9 + (v8 - v9) * (0.666666667 - v10) * 6.0;
      }
    }
    else
    {
      v11 = v9 + (v8 - v9) * 6.0 * v10;
    }
    *(double *)((char *)&v12 + v6) = v11;
    v6 += 8;
  }
  while (v6 != 24);
  if (result)
    *result = v12;
  if (a2)
    *a2 = v13;
  if (a3)
  {
    a6 = v14;
    goto LABEL_27;
  }
  return result;
}

double *FR_RGB_TO_HSL(double *result, double *a2, double *a3, double a4, double a5, double a6)
{
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;

  if (a4 >= a5)
    v6 = a4;
  else
    v6 = a5;
  if (a4 >= a5)
    v7 = a5;
  else
    v7 = a4;
  if (v6 >= a6)
    v8 = v6;
  else
    v8 = a6;
  if (v7 >= a6)
    v7 = a6;
  v9 = v7 + v8;
  v10 = (v7 + v8) * 0.5;
  if (v10 <= 0.0)
  {
    if (result)
      *result = 0.0;
    if (a2)
      *a2 = 0.0;
  }
  else
  {
    v11 = v8 - v7;
    if (v8 - v7 <= 0.0)
    {
      if (result)
        *result = 0.0;
      if (a2)
        *a2 = v11;
    }
    else
    {
      if (v10 > 0.5)
        v9 = 2.0 - v8 - v7;
      v12 = v11 / v9;
      v13 = (v8 - a4) / v11;
      v14 = (v8 - a5) / v11;
      v15 = (v8 - a6) / v11;
      v16 = v15 + 5.0;
      if (v7 != a5)
        v16 = 1.0 - v14;
      v17 = v14 + 3.0;
      if (v7 != a4)
        v17 = 5.0 - v13;
      v18 = v13 + 1.0;
      v19 = 3.0 - v15;
      if (v7 == a6)
        v20 = v18;
      else
        v20 = v19;
      if (v8 == a5)
        v21 = v20;
      else
        v21 = v17;
      if (v8 == a4)
        v22 = v16;
      else
        v22 = v21;
      if (result)
        *result = v22 / 6.0;
      if (a2)
        *a2 = v12;
    }
  }
  if (a3)
    *a3 = v10;
  return result;
}

void sub_100010878(id a1)
{
  uint64_t v1;
  void *v2;
  id v3;

  v3 = objc_alloc_init((Class)UIView);
  v1 = objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "tintColor"));
  v2 = (void *)qword_1000BCC30;
  qword_1000BCC30 = v1;

}

void sub_100010908(id a1)
{
  uint64_t v1;
  void *v2;
  id v3;

  v3 = (id)objc_claimAutoreleasedReturnValue(+[UIColor systemPinkColor](UIColor, "systemPinkColor"));
  v1 = objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "colorWithAlphaComponent:", 0.5));
  v2 = (void *)qword_1000BCC40;
  qword_1000BCC40 = v1;

}

void sub_100010994(id a1)
{
  uint64_t v1;
  void *v2;

  v1 = objc_claimAutoreleasedReturnValue(+[UIColor colorWithRed:green:blue:alpha:](UIColor, "colorWithRed:green:blue:alpha:", 0.960784314, 0.62745098, 0.0901960784, 1.0));
  v2 = (void *)qword_1000BCC50;
  qword_1000BCC50 = v1;

}

void sub_100010A1C(id a1)
{
  uint64_t v1;
  void *v2;

  v1 = objc_claimAutoreleasedReturnValue(+[UIColor colorWithRed:green:blue:alpha:](UIColor, "colorWithRed:green:blue:alpha:", 0.941176471, 0.588235294, 0.196078431, 1.0));
  v2 = (void *)qword_1000BCC60;
  qword_1000BCC60 = v1;

}

void sub_100010AA4(id a1)
{
  uint64_t v1;
  void *v2;

  v1 = objc_claimAutoreleasedReturnValue(+[UIColor colorWithRed:green:blue:alpha:](UIColor, "colorWithRed:green:blue:alpha:", 0.360784314, 0.752941176, 0.549019608, 1.0));
  v2 = (void *)qword_1000BCC70;
  qword_1000BCC70 = v1;

}

void sub_100010B2C(id a1)
{
  uint64_t v1;
  void *v2;

  v1 = objc_claimAutoreleasedReturnValue(+[UIColor colorWithRed:green:blue:alpha:](UIColor, "colorWithRed:green:blue:alpha:", 1.0, 0.556862745, 0.0, 1.0));
  v2 = (void *)qword_1000BCC80;
  qword_1000BCC80 = v1;

}

void sub_100010BF0(id a1)
{
  uint64_t v1;
  void *v2;

  v1 = objc_claimAutoreleasedReturnValue(+[UIColor colorWithWhite:alpha:](UIColor, "colorWithWhite:alpha:", 0.0, 0.82));
  v2 = (void *)qword_1000BCC90;
  qword_1000BCC90 = v1;

}

void sub_100010C88(id a1)
{
  uint64_t v1;
  void *v2;

  v1 = objc_claimAutoreleasedReturnValue(+[UIColor colorWithWhite:alpha:](UIColor, "colorWithWhite:alpha:", 1.0, 0.82));
  v2 = (void *)qword_1000BCCA0;
  qword_1000BCCA0 = v1;

}

void sub_100010D40(id a1)
{
  void *v1;
  uint64_t v2;
  void *v3;
  id v4;

  v4 = (id)objc_claimAutoreleasedReturnValue(+[UIColor whiteColor](UIColor, "whiteColor"));
  v1 = (void *)objc_claimAutoreleasedReturnValue(+[UIColor blackColor](UIColor, "blackColor"));
  v2 = objc_claimAutoreleasedReturnValue(+[UIColor fr_dynamicColor:withDarkStyleVariant:](UIColor, "fr_dynamicColor:withDarkStyleVariant:", v4, v1));
  v3 = (void *)qword_1000BCCB0;
  qword_1000BCCB0 = v2;

}

void sub_100010DB4(id a1)
{
  void *v1;
  uint64_t v2;
  void *v3;
  id v4;

  v4 = (id)objc_claimAutoreleasedReturnValue(+[UIColor colorWithWhite:alpha:](UIColor, "colorWithWhite:alpha:", 1.0, 0.82));
  v1 = (void *)objc_claimAutoreleasedReturnValue(+[UIColor colorWithWhite:alpha:](UIColor, "colorWithWhite:alpha:", 0.0, 0.82));
  v2 = objc_claimAutoreleasedReturnValue(+[UIColor fr_dynamicColor:withDarkStyleVariant:](UIColor, "fr_dynamicColor:withDarkStyleVariant:", v4, v1));
  v3 = (void *)qword_1000BCCC0;
  qword_1000BCCC0 = v2;

}

void sub_100010ED0(id a1)
{
  void *v1;
  uint64_t v2;
  void *v3;
  id v4;

  v4 = (id)objc_claimAutoreleasedReturnValue(+[UIColor colorWithWhite:alpha:](UIColor, "colorWithWhite:alpha:", 0.917647059, 1.0));
  v1 = (void *)objc_claimAutoreleasedReturnValue(+[UIColor colorWithWhite:alpha:](UIColor, "colorWithWhite:alpha:", 0.250980392, 1.0));
  v2 = objc_claimAutoreleasedReturnValue(+[UIColor fr_dynamicColor:withDarkStyleVariant:](UIColor, "fr_dynamicColor:withDarkStyleVariant:", v4, v1));
  v3 = (void *)qword_1000BCCD0;
  qword_1000BCCD0 = v2;

}

void sub_100010FB4(id a1)
{
  void *v1;
  uint64_t v2;
  void *v3;
  id v4;

  v4 = (id)objc_claimAutoreleasedReturnValue(+[UIColor colorWithWhite:alpha:](UIColor, "colorWithWhite:alpha:", 0.9, 1.0));
  v1 = (void *)objc_claimAutoreleasedReturnValue(+[UIColor colorWithWhite:alpha:](UIColor, "colorWithWhite:alpha:", 0.1, 1.0));
  v2 = objc_claimAutoreleasedReturnValue(+[UIColor fr_dynamicColor:withDarkStyleVariant:](UIColor, "fr_dynamicColor:withDarkStyleVariant:", v4, v1));
  v3 = (void *)qword_1000BCCE0;
  qword_1000BCCE0 = v2;

}

void sub_1000110D4(id a1)
{
  void *v1;
  uint64_t v2;
  void *v3;
  id v4;

  v4 = (id)objc_claimAutoreleasedReturnValue(+[UIColor whiteColor](UIColor, "whiteColor"));
  v1 = (void *)objc_claimAutoreleasedReturnValue(+[UIColor blackColor](UIColor, "blackColor"));
  v2 = objc_claimAutoreleasedReturnValue(+[UIColor fr_dynamicColor:withDarkStyleVariant:](UIColor, "fr_dynamicColor:withDarkStyleVariant:", v4, v1));
  v3 = (void *)qword_1000BCCF0;
  qword_1000BCCF0 = v2;

}

void sub_100011188(id a1)
{
  void *v1;
  uint64_t v2;
  void *v3;
  id v4;

  v4 = (id)objc_claimAutoreleasedReturnValue(+[UIColor colorWithWhite:alpha:](UIColor, "colorWithWhite:alpha:", 0.88627451, 1.0));
  v1 = (void *)objc_claimAutoreleasedReturnValue(+[UIColor colorWithWhite:alpha:](UIColor, "colorWithWhite:alpha:", 0.11372549, 1.0));
  v2 = objc_claimAutoreleasedReturnValue(+[UIColor fr_dynamicColor:withDarkStyleVariant:](UIColor, "fr_dynamicColor:withDarkStyleVariant:", v4, v1));
  v3 = (void *)qword_1000BCD00;
  qword_1000BCD00 = v2;

}

void sub_100011254(id a1)
{
  void *v1;
  uint64_t v2;
  void *v3;
  id v4;

  v4 = (id)objc_claimAutoreleasedReturnValue(+[UIColor colorWithWhite:alpha:](UIColor, "colorWithWhite:alpha:", 0.58, 1.0));
  v1 = (void *)objc_claimAutoreleasedReturnValue(+[UIColor colorWithWhite:alpha:](UIColor, "colorWithWhite:alpha:", 0.42, 1.0));
  v2 = objc_claimAutoreleasedReturnValue(+[UIColor fr_dynamicColor:withDarkStyleVariant:](UIColor, "fr_dynamicColor:withDarkStyleVariant:", v4, v1));
  v3 = (void *)qword_1000BCD10;
  qword_1000BCD10 = v2;

}

void sub_100011320(id a1)
{
  void *v1;
  uint64_t v2;
  void *v3;
  id v4;

  v4 = (id)objc_claimAutoreleasedReturnValue(+[UIColor colorWithRed:green:blue:alpha:](UIColor, "colorWithRed:green:blue:alpha:", 0.937254902, 0.937254902, 0.956862745, 1.0));
  v1 = (void *)objc_claimAutoreleasedReturnValue(+[UIColor colorWithRed:green:blue:alpha:](UIColor, "colorWithRed:green:blue:alpha:", 0.062745098, 0.062745098, 0.0431372549, 1.0));
  v2 = objc_claimAutoreleasedReturnValue(+[UIColor fr_dynamicColor:withDarkStyleVariant:](UIColor, "fr_dynamicColor:withDarkStyleVariant:", v4, v1));
  v3 = (void *)qword_1000BCD20;
  qword_1000BCD20 = v2;

}

void sub_100011404(id a1)
{
  void *v1;
  uint64_t v2;
  void *v3;
  id v4;

  v4 = (id)objc_claimAutoreleasedReturnValue(+[UIColor blackColor](UIColor, "blackColor"));
  v1 = (void *)objc_claimAutoreleasedReturnValue(+[UIColor systemGrayColor](UIColor, "systemGrayColor"));
  v2 = objc_claimAutoreleasedReturnValue(+[UIColor fr_dynamicColor:withDarkStyleVariant:](UIColor, "fr_dynamicColor:withDarkStyleVariant:", v4, v1));
  v3 = (void *)qword_1000BCD30;
  qword_1000BCD30 = v2;

}

void sub_1000114C4(id a1)
{
  uint64_t v1;
  void *v2;

  v1 = objc_claimAutoreleasedReturnValue(+[UIColor colorWithRed:green:blue:alpha:](UIColor, "colorWithRed:green:blue:alpha:", 0.960784314, 0.62745098, 0.0901960784, 1.0));
  v2 = (void *)qword_1000BCD40;
  qword_1000BCD40 = v1;

}

void sub_10001154C(id a1)
{
  void *v1;
  uint64_t v2;
  void *v3;
  id v4;

  v4 = (id)objc_claimAutoreleasedReturnValue(+[UIColor colorWithWhite:alpha:](UIColor, "colorWithWhite:alpha:", 0.92, 1.0));
  v1 = (void *)objc_claimAutoreleasedReturnValue(+[UIColor colorWithWhite:alpha:](UIColor, "colorWithWhite:alpha:", 0.08, 1.0));
  v2 = objc_claimAutoreleasedReturnValue(+[UIColor fr_dynamicColor:withDarkStyleVariant:](UIColor, "fr_dynamicColor:withDarkStyleVariant:", v4, v1));
  v3 = (void *)qword_1000BCD50;
  qword_1000BCD50 = v2;

}

void sub_100011624(id a1)
{
  void *v1;
  uint64_t v2;
  void *v3;
  id v4;

  v4 = (id)objc_claimAutoreleasedReturnValue(+[UIColor colorWithRed:green:blue:alpha:](UIColor, "colorWithRed:green:blue:alpha:", 0.235294118, 0.235294118, 0.262745098, 0.3));
  v1 = (void *)objc_claimAutoreleasedReturnValue(+[UIColor colorWithRed:green:blue:alpha:](UIColor, "colorWithRed:green:blue:alpha:", 0.921568627, 0.921568627, 0.960784314, 0.19));
  v2 = objc_claimAutoreleasedReturnValue(+[UIColor fr_dynamicColor:withDarkStyleVariant:](UIColor, "fr_dynamicColor:withDarkStyleVariant:", v4, v1));
  v3 = (void *)qword_1000BCD60;
  qword_1000BCD60 = v2;

}

void sub_100011710(id a1)
{
  uint64_t v1;
  void *v2;

  v1 = objc_claimAutoreleasedReturnValue(+[UIColor colorWithWhite:alpha:](UIColor, "colorWithWhite:alpha:", 0.156862745, 1.0));
  v2 = (void *)qword_1000BCD70;
  qword_1000BCD70 = v1;

}

void sub_100011788(id a1)
{
  uint64_t v1;
  void *v2;

  v1 = objc_claimAutoreleasedReturnValue(+[UIColor colorWithWhite:alpha:](UIColor, "colorWithWhite:alpha:", 0.843137255, 1.0));
  v2 = (void *)qword_1000BCD80;
  qword_1000BCD80 = v1;

}

void sub_100011840(id a1)
{
  uint64_t v1;
  void *v2;

  v1 = objc_claimAutoreleasedReturnValue(+[UIColor colorWithWhite:alpha:](UIColor, "colorWithWhite:alpha:", 0.301960784, 1.0));
  v2 = (void *)qword_1000BCD90;
  qword_1000BCD90 = v1;

}

void sub_1000118B8(id a1)
{
  uint64_t v1;
  void *v2;

  v1 = objc_claimAutoreleasedReturnValue(+[UIColor colorWithWhite:alpha:](UIColor, "colorWithWhite:alpha:", 0.698039216, 1.0));
  v2 = (void *)qword_1000BCDA0;
  qword_1000BCDA0 = v1;

}

void sub_1000119C8(id a1)
{
  void *v1;
  uint64_t v2;
  void *v3;
  id v4;

  v4 = (id)objc_claimAutoreleasedReturnValue(+[UIColor colorWithWhite:alpha:](UIColor, "colorWithWhite:alpha:", 0.58, 1.0));
  v1 = (void *)objc_claimAutoreleasedReturnValue(+[UIColor colorWithWhite:alpha:](UIColor, "colorWithWhite:alpha:", 0.42, 1.0));
  v2 = objc_claimAutoreleasedReturnValue(+[UIColor fr_dynamicColor:withDarkStyleVariant:](UIColor, "fr_dynamicColor:withDarkStyleVariant:", v4, v1));
  v3 = (void *)qword_1000BCDB0;
  qword_1000BCDB0 = v2;

}

id sub_100011B98(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;

  v3 = objc_msgSend(a2, "userInterfaceStyle");
  v4 = 40;
  if (v3 == (id)2)
    v4 = 32;
  return *(id *)(a1 + v4);
}

id sub_100011F30(uint64_t a1, void *a2)
{
  id v3;
  CGColorSpace *ColorSpace;
  id v5;
  const CGFloat *v6;
  CGColor *v7;
  CGFloat components[4];

  v3 = objc_retainAutorelease(a2);
  ColorSpace = CGColorGetColorSpace((CGColorRef)objc_msgSend(v3, "CGColor"));
  if (CGColorSpaceGetModel(ColorSpace))
  {
    v5 = v3;
  }
  else
  {
    v6 = CGColorGetComponents((CGColorRef)objc_msgSend(objc_retainAutorelease(v3), "CGColor"));
    components[0] = *v6;
    components[1] = components[0];
    components[2] = components[0];
    components[3] = v6[1];
    v7 = CGColorCreate(*(CGColorSpaceRef *)(a1 + 32), components);
    v5 = (id)objc_claimAutoreleasedReturnValue(+[UIColor colorWithCGColor:](UIColor, "colorWithCGColor:", v7));
    CGColorRelease(v7);
  }

  return v5;
}

id sub_1000121BC(uint64_t a1, void *a2)
{
  id v3;
  CGColorSpace *ColorSpace;
  id v5;
  const CGFloat *v6;
  CGColor *v7;
  CGFloat components[4];

  v3 = objc_retainAutorelease(a2);
  ColorSpace = CGColorGetColorSpace((CGColorRef)objc_msgSend(v3, "CGColor"));
  if (CGColorSpaceGetModel(ColorSpace))
  {
    v5 = v3;
  }
  else
  {
    v6 = CGColorGetComponents((CGColorRef)objc_msgSend(objc_retainAutorelease(v3), "CGColor"));
    components[0] = *v6;
    components[1] = components[0];
    components[2] = components[0];
    components[3] = v6[1];
    v7 = CGColorCreate(*(CGColorSpaceRef *)(a1 + 32), components);
    v5 = (id)objc_claimAutoreleasedReturnValue(+[UIColor colorWithCGColor:](UIColor, "colorWithCGColor:", v7));
    CGColorRelease(v7);
  }

  return v5;
}

void sub_100012538(uint64_t a1, double a2, double a3, double a4, double a5)
{
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  id v12;

  v8 = *(void **)(a1 + 32);
  v12 = (id)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:"));
  v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", a3));
  v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", a4));
  v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", a5));
  objc_msgSend(v8, "appendFormat:", CFSTR("R : %@ G : %@ B : %@ A : %@"), v12, v9, v10, v11);

}

void sub_1000125FC(uint64_t a1, double a2, double a3, double a4, double a5)
{
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  id v12;

  v8 = *(void **)(a1 + 32);
  v12 = (id)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:"));
  v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", a3));
  v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", a4));
  v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", a5));
  objc_msgSend(v8, "appendFormat:", CFSTR("H : %@ S : %@ B : %@ A : %@"), v12, v9, v10, v11);

}

void sub_1000126F4(id a1, double a2, double a3, double a4, double a5)
{
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  int v13;
  void *v14;
  __int16 v15;
  void *v16;
  __int16 v17;
  void *v18;
  __int16 v19;
  void *v20;

  if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT))
  {
    v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", a2));
    v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", a3));
    v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", a4));
    v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", a5));
    v13 = 138413058;
    v14 = v9;
    v15 = 2112;
    v16 = v10;
    v17 = 2112;
    v18 = v11;
    v19 = 2112;
    v20 = v12;
    _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT, "R : %@ G : %@ B : %@ A : %@", (uint8_t *)&v13, 0x2Au);

  }
}

void sub_100012834(id a1, double a2, double a3, double a4, double a5)
{
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  int v13;
  void *v14;
  __int16 v15;
  void *v16;
  __int16 v17;
  void *v18;
  __int16 v19;
  void *v20;

  if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT))
  {
    v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", a2));
    v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", a3));
    v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", a4));
    v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", a5));
    v13 = 138413058;
    v14 = v9;
    v15 = 2112;
    v16 = v10;
    v17 = 2112;
    v18 = v11;
    v19 = 2112;
    v20 = v12;
    _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT, "H : %@ S : %@ B : %@ A : %@", (uint8_t *)&v13, 0x2Au);

  }
}

void sub_100012A04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_100012A1C(uint64_t result, double a2)
{
  *(double *)(*(_QWORD *)(*(_QWORD *)(result + 32) + 8) + 24) = a2;
  return result;
}

void sub_100012ABC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_100012AD4(uint64_t result, double a2, double a3)
{
  *(double *)(*(_QWORD *)(*(_QWORD *)(result + 32) + 8) + 24) = a3;
  return result;
}

void sub_100012B74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_100012B8C(uint64_t result, double a2, double a3, double a4)
{
  *(double *)(*(_QWORD *)(*(_QWORD *)(result + 32) + 8) + 24) = a4;
  return result;
}

void sub_100012C2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_100012C44(uint64_t result, double a2, double a3, double a4, double a5)
{
  *(double *)(*(_QWORD *)(*(_QWORD *)(result + 32) + 8) + 24) = a5;
  return result;
}

void sub_100012CE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_100012CFC(uint64_t result, double a2)
{
  *(double *)(*(_QWORD *)(*(_QWORD *)(result + 32) + 8) + 24) = a2;
  return result;
}

void sub_100012D9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_100012DB4(uint64_t result, double a2, double a3)
{
  *(double *)(*(_QWORD *)(*(_QWORD *)(result + 32) + 8) + 24) = a3;
  return result;
}

void sub_100012E54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_100012E6C(uint64_t result, double a2, double a3, double a4)
{
  *(double *)(*(_QWORD *)(*(_QWORD *)(result + 32) + 8) + 24) = a4;
  return result;
}

void sub_1000133BC(id a1)
{
  uint64_t v1;
  void *v2;

  v1 = objc_claimAutoreleasedReturnValue(+[UIColor colorWithRed:green:blue:alpha:](UIColor, "colorWithRed:green:blue:alpha:", 0.360784314, 0.752941176, 0.549019608, 1.0));
  v2 = (void *)qword_1000BCDC0;
  qword_1000BCDC0 = v1;

}

void sub_100013450(id a1)
{
  uint64_t v1;
  void *v2;

  v1 = objc_claimAutoreleasedReturnValue(+[UIColor colorWithRed:green:blue:alpha:](UIColor, "colorWithRed:green:blue:alpha:", 0.941176471, 0.588235294, 0.196078431, 1.0));
  v2 = (void *)qword_1000BCDD0;
  qword_1000BCDD0 = v1;

}

void sub_1000135B4(id a1)
{
  uint64_t v1;
  void *v2;

  v1 = objc_claimAutoreleasedReturnValue(+[UIColor colorWithRed:green:blue:alpha:](UIColor, "colorWithRed:green:blue:alpha:", 1.0, 0.11372549, 0.282352941, 1.0));
  v2 = (void *)qword_1000BCDE0;
  qword_1000BCDE0 = v1;

}

void sub_100013638(id a1)
{
  uint64_t v1;
  void *v2;

  v1 = objc_claimAutoreleasedReturnValue(+[UIColor colorWithRed:green:blue:alpha:](UIColor, "colorWithRed:green:blue:alpha:", 0.43, 0.43, 0.45, 1.0));
  v2 = (void *)qword_1000BCDF0;
  qword_1000BCDF0 = v1;

}

void sub_1000138C8(id *a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  id v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  uint64_t v22;
  void *v23;

  v3 = a2;
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "analyticsElement"));
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "articleID"));

  if (v5)
  {
    v6 = objc_alloc_init((Class)NSMutableDictionary);
    objc_msgSend(v6, "setObject:forKey:", v5, FCWidgetArticleListArticleID);
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "sourceTagID"));
    objc_msgSend(v6, "fc_safelySetObject:forKey:", v7, FCWidgetArticleListSourceChannelID);

    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[4], "objectForKeyedSubscript:", v3));
    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "referralBarName"));
    objc_msgSend(v6, "fc_safelySetObjectAllowingNil:forKey:", v9, FCWidgetArticleListSectionName);

    v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "flintDocumentURL"));
    v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "absoluteString"));
    objc_msgSend(v6, "fc_safelySetObjectAllowingNil:forKey:", v11, FCWidgetArticleListFlintDocumentURL);

    v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "backingElement"));
    v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "articleRecordData"));
    v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "base64EncodedStringWithOptions:", 0));
    objc_msgSend(v6, "fc_safelySetObjectAllowingNil:forKey:", v14, FCWidgetArticleListArticleRecordData);

    v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "backingElement"));
    v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v15, "sourceChannelRecordData"));
    v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v16, "base64EncodedStringWithOptions:", 0));
    objc_msgSend(v6, "fc_safelySetObjectAllowingNil:forKey:", v17, FCWidgetArticleListSourceChannelRecordData);

    v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "backingElement"));
    v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v18, "parentIssueRecordData"));
    v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v19, "base64EncodedStringWithOptions:", 0));
    objc_msgSend(v6, "fc_safelySetObjectAllowingNil:forKey:", v20, FCWidgetArticleListParentIssueRecordData);

    objc_msgSend(a1[5], "addObject:", v6);
    v21 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "flintDocumentURL"));
    if (v21)
    {
      v22 = objc_claimAutoreleasedReturnValue(objc_msgSend(a1[6], "objectForKeyedSubscript:", v21));
      if (v22)
      {
        v23 = (void *)v22;
        objc_msgSend(a1[7], "setObject:forKeyedSubscript:", v22, v21);

      }
    }

  }
  else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
  {
    sub_1000816EC();
  }

}

__CFString *FTValidatedFreeValuedPropertyValue(void *a1)
{
  __CFString *v1;
  __CFString *v2;
  __CFString *v3;

  v1 = a1;
  if (!v1 && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
    sub_1000817A4();
  if (+[PETEventStringValidator stringIsValid:](PETEventStringValidator, "stringIsValid:", v1))v2 = v1;
  else
    v2 = CFSTR("invalid");
  v3 = v2;

  return v3;
}

__CFString *FTHeadlineSourcePropertyValueWithTodaySource(void *a1)
{
  __CFString *v1;

  if (!a1)
    return CFSTR("none");
  v1 = FTValidatedFreeValuedPropertyValue(a1);
  return (__CFString *)(id)objc_claimAutoreleasedReturnValue(v1);
}

__CFString *FTSectionPropertyValueWithSection(void *a1)
{
  __CFString *v1;

  if (!a1)
    return CFSTR("none");
  v1 = FTValidatedFreeValuedPropertyValue(a1);
  return (__CFString *)(id)objc_claimAutoreleasedReturnValue(v1);
}

__CFString *FTUserGroupPropertyValueWithAppConfigTreatmentID(void *a1)
{
  id v1;
  void *v2;
  void *v3;
  void *v4;
  __CFString *v5;
  __CFString *v6;

  v1 = a1;
  v2 = v1;
  if (v1 && (v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v1, "stringValue"))) != 0)
  {
    v4 = v3;
    v5 = FTValidatedFreeValuedPropertyValue(v3);
    v6 = (__CFString *)objc_claimAutoreleasedReturnValue(v5);

  }
  else
  {
    v6 = CFSTR("none");
  }

  return v6;
}

id FTLocalTimeHourPropertyValue(void *a1)
{
  id v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  v1 = a1;
  v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSCalendar currentCalendar](NSCalendar, "currentCalendar"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSTimeZone localTimeZone](NSTimeZone, "localTimeZone"));
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "componentsInTimeZone:fromDate:", v3, v1));

  v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", objc_msgSend(v4, "hour")));
  return v5;
}

id FTTimeZonePropertyValue()
{
  void *v0;
  void *v1;

  v0 = (void *)objc_claimAutoreleasedReturnValue(+[NSTimeZone localTimeZone](NSTimeZone, "localTimeZone"));
  v1 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v0, "abbreviation"));

  return v1;
}

__CFString *FTBooleanPropertyValue(int a1)
{
  if (a1)
    return CFSTR("yes");
  else
    return CFSTR("no");
}

BOOL sub_10001438C(id a1, NTTodayResults *a2, NTTodayResultOperationFetchInfoProviding *a3)
{
  void *v3;
  void *v4;

  v3 = (void *)NTNewsSourceIdentifier;
  v4 = (void *)objc_claimAutoreleasedReturnValue(-[NTTodayResultOperationFetchInfoProviding todaySourceIdentifier](a3, "todaySourceIdentifier"));
  LOBYTE(v3) = objc_msgSend(v3, "isEqualToString:", v4);

  return (char)v3;
}

NTPBEnvelope *__cdecl sub_10001476C(id a1, NSSNewsAnalyticsPBEventAccumulator *a2)
{
  return (NTPBEnvelope *)-[NSSNewsAnalyticsPBEventAccumulator dequeueEventsIntoEnvelope](a2, "dequeueEventsIntoEnvelope");
}

void sub_100014774(uint64_t a1)
{
  NSObject *v1;

  v1 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "submissionGroup"));
  dispatch_group_leave(v1);

}

id sub_100014C84(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  void *v8;

  v5 = a3;
  v6 = a2;
  v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](NSDate, "date"));
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "engagementWithHeaderAtDate:withTargetURL:trackableWidgetState:", v7, *(_QWORD *)(a1 + 32), v5));

  return v8;
}

void sub_100015670(uint64_t a1)
{
  NSObject *v1;

  v1 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "submissionGroup"));
  dispatch_group_leave(v1);

}

uint64_t sub_10001571C(uint64_t a1, uint64_t a2)
{
  return objc_opt_respondsToSelector(a2, *(_QWORD *)(a1 + 32)) & 1;
}

void sub_100015CD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_list va;

  va_start(va, a15);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_100015D14(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_100015D24(uint64_t a1)
{

}

void sub_100015D2C(uint64_t a1, void *a2, uint64_t a3, _BYTE *a4)
{
  id v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  uint64_t v13;
  void *v14;
  void *v15;
  id obj;

  v6 = a2;
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "filePath"));
  if (v7)
  {
    v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSURL fileURLWithPath:isDirectory:](NSURL, "fileURLWithPath:isDirectory:", v7, 0));
    if (v8)
    {
      v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSUUID UUID](NSUUID, "UUID"));
      v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "UUIDString"));

      v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "URLByAppendingPathComponent:isDirectory:", v10, 0));
      v12 = *(void **)(a1 + 40);
      v13 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
      obj = *(id *)(v13 + 40);
      objc_msgSend(v12, "copyItemAtURL:toURL:error:", v8, v11, &obj);
      objc_storeStrong((id *)(v13 + 40), obj);
      v14 = *(void **)(a1 + 48);
      v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "remoteURL"));
      objc_msgSend(v14, "setObject:forKeyedSubscript:", v11, v15);

      if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40))
        *a4 = 1;

    }
  }
  else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
  {
    sub_100081D1C();
  }

}

id sub_10001636C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _objc_msgSend(*(id *)(a1 + 32), "assetHandleForURL:prefetchedFileURL:importMethod:lifetimeHint:", a2, a3, 0, 0);
}

id PrefetchLog()
{
  if (qword_1000BCE00 != -1)
    dispatch_once(&qword_1000BCE00, &stru_1000AAC58);
  return (id)qword_1000BCE08;
}

void sub_100016810(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.news", "WidgetContentPrefetch");
  v2 = (void *)qword_1000BCE08;
  qword_1000BCE08 = (uint64_t)v1;

}

void sub_100016C5C(uint64_t a1)
{
  id *v2;
  void *v3;
  id v4;
  NSObject *v5;
  NSObject *v6;
  void *v7;
  int v8;
  void *v9;

  v2 = (id *)(a1 + 32);
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "filePath"));

  v4 = PrefetchLog();
  v5 = objc_claimAutoreleasedReturnValue(v4);
  v6 = v5;
  if (v3)
  {
    if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
    {
      v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "identifier"));
      v8 = 138543362;
      v9 = v7;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "successfully downloaded JSON for headline %{public}@", (uint8_t *)&v8, 0xCu);

    }
  }
  else if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
  {
    sub_10008218C(a1, v2, v6);
  }

  dispatch_group_leave(*(dispatch_group_t *)(a1 + 48));
}

void sub_100016D60(id *a1)
{
  void *v2;
  _QWORD v3[4];
  id v4;
  id v5;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[4], "assetManager"));
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_100016DF8;
  v3[3] = &unk_1000AACA8;
  v5 = a1[6];
  v4 = a1[5];
  objc_msgSend(v2, "saveWithCompletionHandler:", v3);

}

uint64_t sub_100016DF8(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 40);
  if (result)
    return (*(uint64_t (**)(uint64_t, _QWORD))(result + 16))(result, *(_QWORD *)(a1 + 32));
  return result;
}

id sub_100016E6C()
{
  if (qword_1000BCE18[0] != -1)
    dispatch_once(qword_1000BCE18, &stru_1000AACF0);
  return (id)qword_1000BCE10;
}

void sub_100016EAC(id a1)
{
  uint64_t v1;
  void *v2;

  v1 = objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:](NSArray, "arrayWithObjects:", FCErrorDomain, NSURLErrorDomain, NSCocoaErrorDomain, CKErrorDomain, 0));
  v2 = (void *)qword_1000BCE10;
  qword_1000BCE10 = v1;

}

void sub_100017364(id a1, NSMutableArray *a2)
{
  id v2;
  void *v3;
  NSMutableArray *v4;

  v4 = a2;
  v2 = sub_100016E6C();
  v3 = (void *)objc_claimAutoreleasedReturnValue(v2);
  -[NSMutableArray addObjectsFromArray:](v4, "addObjectsFromArray:", v3);

  -[NSMutableArray addObject:](v4, "addObject:", CFSTR("other"));
}

id sub_100018328(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  void *v8;

  v5 = a3;
  v6 = a2;
  v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](NSDate, "date"));
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "engagementWithPlaceholderAtDate:withTargetURL:trackableWidgetState:", v7, *(_QWORD *)(a1 + 32), v5));

  return v8;
}

void sub_100018848(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100018860(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  id v6;
  void *v7;
  void *v8;
  id v9;
  uint64_t v10;
  id v11;
  _QWORD v12[5];
  id v13;
  id v14;
  id v15;
  uint64_t v16;
  uint64_t v17;

  v6 = a2;
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "items"));
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472;
  v12[2] = sub_100018928;
  v12[3] = &unk_1000AAD70;
  v8 = *(void **)(a1 + 40);
  v12[4] = *(_QWORD *)(a1 + 32);
  v13 = v8;
  v14 = v6;
  v9 = *(id *)(a1 + 48);
  v10 = *(_QWORD *)(a1 + 56);
  v15 = v9;
  v16 = v10;
  v17 = a4;
  v11 = v6;
  objc_msgSend(v7, "enumerateObjectsUsingBlock:", v12);

}

void sub_100018928(uint64_t a1, void *a2, uint64_t a3, _BYTE *a4)
{
  id v6;
  void *v7;
  uint64_t v8;
  void *v9;
  void *v10;
  void *v11;
  id v12;
  id v13;

  v13 = a2;
  v6 = objc_msgSend(v13, "itemType");
  v7 = v13;
  if (!v6)
  {
    v8 = FCProtocolCast(&OBJC_PROTOCOL___NTHeadlineProviding, v13);
    v9 = (void *)objc_claimAutoreleasedReturnValue(v8);
    v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "personalizationEventAtDate:withAction:headline:section:trackableWidgetState:", *(_QWORD *)(a1 + 40), 1, v9, *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56)));
    if (v10)
    {
      v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "events"));
      objc_msgSend(v11, "addObject:", v10);

    }
    v12 = (id)++*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 24);
    if (v12 == objc_msgSend(*(id *)(a1 + 56), "absoluteItemCountForCurrentDisplayMode"))
    {
      *a4 = 1;
      **(_BYTE **)(a1 + 72) = 1;
    }

    v7 = v13;
  }

}

uint64_t sub_100018BD4(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void sub_100018D8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_100018DA8(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_100018DB8(uint64_t a1)
{

}

void sub_100018DC0(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  void *v6;
  id v7;
  uint64_t v8;
  _QWORD v9[4];
  id v10;
  uint64_t v11;
  uint64_t v12;

  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "items"));
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472;
  v9[2] = sub_100018E54;
  v9[3] = &unk_1000AADE8;
  v7 = *(id *)(a1 + 32);
  v8 = *(_QWORD *)(a1 + 40);
  v10 = v7;
  v11 = v8;
  v12 = a4;
  objc_msgSend(v6, "enumerateObjectsUsingBlock:", v9);

}

void sub_100018E54(uint64_t a1, void *a2, uint64_t a3, _BYTE *a4)
{
  void *v7;
  unsigned int v8;
  id v9;

  v9 = a2;
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "identifier"));
  v8 = objc_msgSend(v7, "isEqual:", *(_QWORD *)(a1 + 32));

  if (v8)
  {
    objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), a2);
    *a4 = 1;
    **(_BYTE **)(a1 + 48) = 1;
  }

}

BOOL sub_100019B84(id a1, NTHeadlineProviding *a2)
{
  void *v2;
  unsigned __int8 v3;

  v2 = (void *)objc_claimAutoreleasedReturnValue(-[NTHeadlineProviding analyticsElement](a2, "analyticsElement"));
  v3 = objc_msgSend(v2, "needsSeenStateTracking");

  return v3;
}

NTHeadlineProviding *__cdecl sub_100019BBC(id a1, NTTodayItem *a2)
{
  NTTodayItem *v2;
  NTTodayItem *v3;
  NTHeadlineProviding *v4;

  v2 = a2;
  if (-[NTTodayItem itemType](v2, "itemType"))
    v3 = 0;
  else
    v3 = v2;
  v4 = v3;

  return v4;
}

void sub_100019E20(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  id v8;
  id v9;
  id v10;
  uint64_t v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  char *v16;
  void *v17;
  id v18;
  char *v19;
  char *v20;
  void *v21;
  void *v22;
  NSObject *v23;
  id v24;
  uint64_t v25;
  NSMutableArray *v26;
  void *v27;
  NSMutableArray *v28;
  uint64_t v29;
  _QWORD v30[4];
  id v31;
  NSMutableArray *v32;
  id v33;
  uint64_t v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  uint8_t buf[4];
  const char *v40;
  __int16 v41;
  char *v42;
  __int16 v43;
  int v44;
  __int16 v45;
  id v46;
  _BYTE v47[128];

  v3 = a2;
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "objectForKeyedSubscript:", CFSTR("a")));
  v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableOrderedSet orderedSetWithOrderedSet:](NSMutableOrderedSet, "orderedSetWithOrderedSet:", v4));

  v27 = v3;
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "objectForKeyedSubscript:", CFSTR("b")));
  v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableDictionary dictionaryWithDictionary:](NSMutableDictionary, "dictionaryWithDictionary:", v6));

  v28 = objc_opt_new(NSMutableArray);
  v29 = a1;
  v35 = 0u;
  v36 = 0u;
  v37 = 0u;
  v38 = 0u;
  v8 = *(id *)(a1 + 32);
  v9 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v35, v47, 16);
  if (v9)
  {
    v10 = v9;
    v11 = *(_QWORD *)v36;
    do
    {
      v12 = 0;
      do
      {
        if (*(_QWORD *)v36 != v11)
          objc_enumerationMutation(v8);
        v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*((_QWORD *)&v35 + 1) + 8 * (_QWORD)v12), "analyticsElement"));
        v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "preseenCountTrackingIdentifier"));
        if (v14)
        {
          v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "objectForKeyedSubscript:", v14));
          if ((((v15 == 0) ^ objc_msgSend(v5, "containsObject:", v14)) & 1) == 0
            && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
          {
            v18 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("storage data structures must stay in sync"));
            *(_DWORD *)buf = 136315906;
            v40 = "-[FTSeenHeadlineWidgetEventTracker _registerOnceVisibleHeadlines:withLastSeenDate:minimumNumberOfTimes"
                  "PreseenToBeSeen:]_block_invoke";
            v41 = 2080;
            v42 = "FTSeenHeadlineWidgetEventTracker.m";
            v43 = 1024;
            v44 = 163;
            v45 = 2114;
            v46 = v18;
            _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "*** Assertion failure (Identifier: catch-all) : %s %s:%d %{public}@", buf, 0x26u);

          }
          v16 = (char *)objc_msgSend(v15, "unsignedIntegerValue") + 1;
          if ((unint64_t)v16 >= *(_QWORD *)(v29 + 64))
          {
            -[NSMutableArray addObject:](v28, "addObject:", v13);
            objc_msgSend(v5, "removeObject:", v14);
            objc_msgSend(v7, "removeObjectForKey:", v14);
          }
          else
          {
            objc_msgSend(v5, "removeObject:", v14);
            objc_msgSend(v5, "addObject:", v14);
            v17 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", v16));
            objc_msgSend(v7, "setObject:forKeyedSubscript:", v17, v14);

          }
        }

        v12 = (char *)v12 + 1;
      }
      while (v10 != v12);
      v10 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v35, v47, 16);
    }
    while (v10);
  }

  if ((unint64_t)objc_msgSend(v5, "count") >= 0x3E9)
  {
    v19 = (char *)objc_msgSend(v5, "count");
    v20 = v19 - 1000;
    if (v19 != (char *)1000)
    {
      v21 = (void *)objc_claimAutoreleasedReturnValue(+[NSIndexSet indexSetWithIndexesInRange:](NSIndexSet, "indexSetWithIndexesInRange:", 0, v20));
      v22 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "objectsAtIndexes:", v21));

      objc_msgSend(v5, "removeObjectsInRange:", 0, v20);
      objc_msgSend(v7, "removeObjectsForKeys:", v22);

    }
  }
  objc_msgSend(v27, "setObject:forKeyedSubscript:", v5, CFSTR("a"));
  objc_msgSend(v27, "setObject:forKeyedSubscript:", v7, CFSTR("b"));
  v23 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(v29 + 40), "submissionGroup"));
  dispatch_group_enter(v23);

  v30[0] = _NSConcreteStackBlock;
  v30[1] = 3221225472;
  v30[2] = sub_10001A278;
  v30[3] = &unk_1000AAE98;
  v31 = *(id *)(v29 + 48);
  v32 = v28;
  v24 = *(id *)(v29 + 56);
  v25 = *(_QWORD *)(v29 + 40);
  v33 = v24;
  v34 = v25;
  v26 = v28;
  FCPerformBlockOnMainThread(v30);

}

id sub_10001A278(_QWORD *a1)
{
  uint64_t v1;
  void *v2;
  uint64_t v3;
  _QWORD v5[5];

  v2 = (void *)a1[4];
  v1 = a1[5];
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_10001A2D4;
  v5[3] = &unk_1000AABC8;
  v3 = a1[6];
  v5[4] = a1[7];
  return objc_msgSend(v2, "writeUserDidSeeHeadlinesWithAnalyticsElements:atDate:withCompletion:", v1, v3, v5);
}

void sub_10001A2D4(uint64_t a1)
{
  NSObject *v1;

  v1 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "submissionGroup"));
  dispatch_group_leave(v1);

}

void sub_10001A304(uint64_t a1)
{
  NSObject *v1;

  v1 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "submissionGroup"));
  dispatch_group_leave(v1);

}

id sub_10001A64C(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  void *v8;

  v5 = a3;
  v6 = a2;
  v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](NSDate, "date"));
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "engagementWithBackgroundAtDate:withTargetURL:trackableWidgetState:", v7, *(_QWORD *)(a1 + 32), v5));

  return v8;
}

CGContext *TSDBitmapContextCreate(char a1, double a2, double a3)
{
  float v4;
  float v5;
  size_t v6;
  size_t v7;
  CGColorSpace *v8;
  uint32_t v9;
  uint64_t v10;
  size_t v11;
  CGColorSpaceRef DeviceRGB;
  int v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  CGContext *v17;

  v4 = a2;
  v5 = a3;
  v6 = vcvtps_u32_f32(v4);
  v7 = vcvtps_u32_f32(v5);
  if ((a1 & 1) != 0)
  {
    if ((a1 & 0x20) != 0)
      DeviceRGB = CGColorSpaceCreateWithName(kCGColorSpaceDisplayP3);
    else
      DeviceRGB = CGColorSpaceCreateDeviceRGB();
    v8 = DeviceRGB;
    if ((a1 & 4) != 0)
      v13 = 4102;
    else
      v13 = 8198;
    v14 = 5;
    if ((a1 & 4) == 0)
      v14 = 8;
    v15 = 2;
    if ((a1 & 4) == 0)
      v15 = 4;
    if ((a1 & 0x10) != 0)
      v16 = 8193;
    else
      v16 = 8194;
    if ((a1 & 2) != 0)
      v9 = v16;
    else
      v9 = v13;
    if ((a1 & 2) != 0)
      v11 = 8;
    else
      v11 = v14;
    if ((a1 & 2) != 0)
      v10 = 4;
    else
      v10 = v15;
  }
  else
  {
    v8 = 0;
    if ((a1 & 2) != 0)
      v9 = 7;
    else
      v9 = 8194;
    v10 = 4;
    if ((a1 & 2) != 0)
      v10 = 1;
    v11 = 8;
  }
  v17 = CGBitmapContextCreateWithData(0, v6, v7, v11, (v10 * v6 + 31) & 0xFFFFFFFFFFFFFFE0, v8, v9, 0, 0);
  if (v8)
    CGColorSpaceRelease(v8);
  if ((a1 & 8) != 0)
  {
    CGContextTranslateCTM(v17, 0.0, (double)v7);
    CGContextScaleCTM(v17, 1.0, -1.0);
  }
  return v17;
}

void sub_10001AFA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10, void *a11)
{
  void *v11;
  void *v12;
  void *v13;

  _Unwind_Resume(a1);
}

void sub_10001B210(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  void *v11;

  _Unwind_Resume(a1);
}

_QWORD *sub_10001B28C(_QWORD *a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  v2 = (void *)a1[46];
  if (v2)
  {
    a1[47] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[43];
  if (v3)
  {
    a1[44] = v3;
    operator delete(v3);
  }
  v4 = (void *)a1[40];
  if (v4)
  {
    a1[41] = v4;
    operator delete(v4);
  }
  v5 = (void *)a1[37];
  if (v5)
  {
    a1[38] = v5;
    operator delete(v5);
  }
  return a1;
}

uint64_t sub_10001B2EC(uint64_t a1)
{
  ITColor *v2;

  ITColor::ITColor((ITColor *)a1);
  ITColor::ITColor(v2 + 1);
  ITColor::ITColor((ITColor *)(a1 + 64));
  ITColor::ITColor((ITColor *)(a1 + 96));
  ITColor::ITColor((ITColor *)(a1 + 128));
  ITColor::ITColor((ITColor *)(a1 + 160));
  ITColor::ITColor((ITColor *)(a1 + 192));
  ITColor::ITColor((ITColor *)(a1 + 224));
  ITColor::ITColor((ITColor *)(a1 + 256));
  *(_DWORD *)(a1 + 288) = 0;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_OWORD *)(a1 + 312) = 0u;
  *(_OWORD *)(a1 + 328) = 0u;
  *(_OWORD *)(a1 + 344) = 0u;
  *(_OWORD *)(a1 + 360) = 0u;
  *(_OWORD *)(a1 + 376) = 0u;
  *(_OWORD *)(a1 + 389) = 0u;
  return a1;
}

_QWORD *sub_10001B36C(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (a4)
  {
    v6 = result;
    result = sub_10001B3E4(result, a4);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_10001B3C8(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *sub_10001B3E4(_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >> 59)
    sub_100008B48();
  result = (char *)sub_10000B930((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[32 * v4];
  return result;
}

uint64_t sub_10001B424@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for Date(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 16))(a1, v1, v3);
}

uint64_t sub_10001B460(__int128 *a1)
{
  __int128 v2;
  __int128 v3;

  v2 = *a1;
  if (!sub_10007F0A8(2, 17, 0, 0))
    return v2;
  v3 = v2;
  return swift_getOpaqueTypeMetadata2(0, &v3, &opaque type descriptor for <<opaque return type of WidgetConfiguration._containerBackgroundRemovable(_:)>>, 0);
}

uint64_t sub_10001B4C4(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD v4[2];

  v2 = *a1;
  v1 = a1[1];
  if (sub_10007F0A8(2, 17, 0, 0))
  {
    v4[0] = v2;
    v4[1] = v1;
    return swift_getOpaqueTypeConformance2(v4, &opaque type descriptor for <<opaque return type of WidgetConfiguration._containerBackgroundRemovable(_:)>>, 1);
  }
  return v1;
}

uint64_t sub_10001B520(uint64_t *a1)
{
  uint64_t result;

  result = *a1;
  if (result < 0)
  {
    result = swift_getTypeByMangledNameInContext2((char *)a1 + (int)result, -(result >> 32), 0, 0);
    *a1 = result;
  }
  return result;
}

uint64_t sub_10001B560(uint64_t *a1)
{
  uint64_t result;

  result = *a1;
  if (result < 0)
  {
    result = swift_getTypeByMangledNameInContextInMetadataState2(255, (char *)a1 + (int)result, -(result >> 32), 0, 0);
    *a1 = result;
  }
  return result;
}

uint64_t variable initialization expression of TodayIntentResponse.code()
{
  return 0;
}

void type metadata accessor for FTTrackableStackLocation(uint64_t a1)
{
  sub_10001C8D0(a1, &qword_1000B8F40, (uint64_t)&unk_1000AB328);
}

void type metadata accessor for FTTrackableStackKind(uint64_t a1)
{
  sub_10001C8D0(a1, &qword_1000B8F48, (uint64_t)&unk_1000AB348);
}

uint64_t initializeBufferWithCopyOfBuffer for MessageView(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *a2;
  *a1 = *a2;
  v3 = v2 + 16;
  swift_retain(v2);
  return v3;
}

__n128 sub_10001B60C(_OWORD *a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *a1 = *(_OWORD *)a2;
  a1[1] = v3;
  return result;
}

uint64_t sub_10001B618(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 32))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t sub_10001B638(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)result = (a2 - 1);
    *(_QWORD *)(result + 8) = 0;
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 32) = v3;
  return result;
}

void type metadata accessor for CGRect(uint64_t a1)
{
  sub_10001C8D0(a1, &qword_1000B8F50, (uint64_t)&unk_1000AB3C0);
}

void type metadata accessor for FTEventTrackingWidgetAppearanceType(uint64_t a1)
{
  sub_10001C8D0(a1, &qword_1000B8F58, (uint64_t)&unk_1000AB3E8);
}

uint64_t sub_10001B68C(uint64_t a1, uint64_t a2)
{
  return sub_10001B8B8(a1, a2, (uint64_t (*)(uint64_t))&String.hashValue.getter);
}

uint64_t sub_10001B6A0(uint64_t a1, uint64_t a2)
{
  return sub_10001B8B8(a1, a2, (uint64_t (*)(uint64_t))&String._bridgeToObjectiveC());
}

uint64_t sub_10001B6B8(uint64_t a1, id *a2)
{
  uint64_t result;
  uint64_t v5;
  NSString v6;
  uint64_t v7;
  uint64_t v8;

  v7 = 0;
  v8 = 0;
  result = static String._forceBridgeFromObjectiveC(_:result:)(a1, &v7);
  v5 = v8;
  if (v8)
  {
    v6 = String._bridgeToObjectiveC()();
    result = swift_bridgeObjectRelease(v5);
  }
  else
  {
    v6 = 0;
  }
  *a2 = v6;
  return result;
}

uint64_t sub_10001B72C(uint64_t a1, id *a2)
{
  char v4;
  uint64_t v5;
  NSString v6;
  uint64_t v8;
  uint64_t v9;

  v8 = 0;
  v9 = 0;
  v4 = static String._conditionallyBridgeFromObjectiveC(_:result:)(a1, &v8);
  v5 = v9;
  if (v9)
  {
    v6 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v5);
  }
  else
  {
    v6 = 0;
  }
  *a2 = v6;
  return v4 & 1;
}

uint64_t sub_10001B7A8@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  NSString v4;
  uint64_t result;

  static String._unconditionallyBridgeFromObjectiveC(_:)();
  v3 = v2;
  v4 = String._bridgeToObjectiveC()();
  result = swift_bridgeObjectRelease(v3);
  *a1 = v4;
  return result;
}

NSNumber sub_10001B7E8()
{
  return CGFloat._bridgeToObjectiveC()();
}

uint64_t sub_10001B7F0(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  char v4;
  uint64_t v5;
  uint64_t v6;
  char v7;

  v6 = 0;
  v7 = 1;
  result = static CGFloat._forceBridgeFromObjectiveC(_:result:)(a1, &v6);
  v4 = v7;
  v5 = v6;
  if (v7)
    v5 = 0;
  *(_QWORD *)a2 = v5;
  *(_BYTE *)(a2 + 8) = v4;
  return result;
}

uint64_t sub_10001B840(uint64_t a1, uint64_t a2)
{
  char v3;
  char v4;
  uint64_t v5;
  uint64_t v7;
  char v8;

  v7 = 0;
  v8 = 1;
  v3 = static CGFloat._conditionallyBridgeFromObjectiveC(_:result:)(a1, &v7);
  v4 = v8;
  v5 = v7;
  if (v8)
    v5 = 0;
  *(_QWORD *)a2 = v5;
  *(_BYTE *)(a2 + 8) = v4;
  return v3 & 1;
}

void sub_10001B894(double *a1@<X8>)
{
  *a1 = static CGFloat._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t sub_10001B8B8(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t))
{
  _QWORD *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v5 = static String._unconditionallyBridgeFromObjectiveC(_:)(*v3);
  v7 = v6;
  v8 = a3(v5);
  swift_bridgeObjectRelease(v7);
  return v8;
}

uint64_t sub_10001B8F4(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(*v1);
  v5 = v4;
  String.hash(into:)(a1, v3, v4);
  return swift_bridgeObjectRelease(v5);
}

Swift::Int sub_10001B934(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  Swift::Int v6;
  _QWORD v8[9];

  v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(*v1);
  v5 = v4;
  Hasher.init(_seed:)(v8, a1);
  String.hash(into:)(v8, v3, v5);
  v6 = Hasher._finalize()();
  swift_bridgeObjectRelease(v5);
  return v6;
}

void sub_10001B9A4(_QWORD *a1@<X8>)
{
  _QWORD *v1;

  *a1 = *v1;
}

BOOL sub_10001B9B0(_QWORD *a1, _QWORD *a2)
{
  return *a1 == *a2;
}

uint64_t sub_10001B9C8(_QWORD *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  char v10;

  v2 = *a2;
  v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(*a1);
  v5 = v4;
  v6 = static String._unconditionallyBridgeFromObjectiveC(_:)(v2);
  if (v3 == v6 && v5 == v7)
  {
    v10 = 1;
    v9 = v5;
  }
  else
  {
    v9 = v7;
    v10 = _stringCompareWithSmolCheck(_:_:expecting:)(v3, v5, v6, v7, 0);
  }
  swift_bridgeObjectRelease(v5);
  swift_bridgeObjectRelease(v9);
  return v10 & 1;
}

uint64_t sub_10001BA54@<X0>(uint64_t *a1@<X8>)
{
  _QWORD *v1;
  uint64_t result;
  uint64_t v4;

  result = static String._unconditionallyBridgeFromObjectiveC(_:)(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_10001BA7C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = sub_10001C96C(&qword_1000B99E0, (uint64_t (*)(uint64_t))type metadata accessor for URLResourceKey, (uint64_t)&unk_10008A9A0);
  v3 = sub_10001C96C(&qword_1000B94B0, (uint64_t (*)(uint64_t))type metadata accessor for URLResourceKey, (uint64_t)&unk_10008A8F4);
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()(a1, v2, v3, &protocol witness table for String);
}

uint64_t sub_10001BB00(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = sub_10001C96C((unint64_t *)&qword_1000B94E0, (uint64_t (*)(uint64_t))type metadata accessor for AttributeName, (uint64_t)&unk_10008A9E4);
  v3 = sub_10001C96C(&qword_1000B94E8, (uint64_t (*)(uint64_t))type metadata accessor for AttributeName, (uint64_t)&unk_10008A524);
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()(a1, v2, v3, &protocol witness table for String);
}

uint64_t sub_10001BB84@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  NSString v4;
  uint64_t result;

  v3 = *(_QWORD *)(a1 + 8);
  v4 = String._bridgeToObjectiveC()();
  result = swift_bridgeObjectRelease(v3);
  *a2 = v4;
  return result;
}

uint64_t sub_10001BBC8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = sub_10001C96C(&qword_1000B94D0, (uint64_t (*)(uint64_t))type metadata accessor for TraitKey, (uint64_t)&unk_10008A698);
  v3 = sub_10001C96C(&qword_1000B94D8, (uint64_t (*)(uint64_t))type metadata accessor for TraitKey, (uint64_t)&unk_10008A638);
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()(a1, v2, v3, &protocol witness table for String);
}

_QWORD *sub_10001BC4C@<X0>(_QWORD *result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *result;
  *(_BYTE *)(a2 + 8) = 0;
  return result;
}

double sub_10001BC5C@<D0>(_QWORD *a1@<X8>)
{
  double *v1;
  double result;

  result = *v1;
  *a1 = *(_QWORD *)v1;
  return result;
}

uint64_t sub_10001BC68(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;

  v2 = sub_10001C96C(&qword_1000B94B8, (uint64_t (*)(uint64_t))type metadata accessor for Weight, (uint64_t)&unk_10008A7F0);
  v3 = sub_10001C96C(&qword_1000B94C0, (uint64_t (*)(uint64_t))type metadata accessor for Weight, (uint64_t)&unk_10008A790);
  v4 = sub_10001CBC0();
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()(a1, v2, v3, v4);
}

void type metadata accessor for URLResourceKey(uint64_t a1)
{
  sub_10001C8D0(a1, &qword_1000B9380, (uint64_t)&unk_1000AB408);
}

void type metadata accessor for Weight(uint64_t a1)
{
  sub_10001C8D0(a1, &qword_1000B9388, (uint64_t)&unk_1000AB430);
}

void type metadata accessor for TraitKey(uint64_t a1)
{
  sub_10001C8D0(a1, &qword_1000B9390, (uint64_t)&unk_1000AB458);
}

void type metadata accessor for AttributeName(uint64_t a1)
{
  sub_10001C8D0(a1, &qword_1000B9398, (uint64_t)&unk_1000AB480);
}

_QWORD *sub_10001BD58(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  int *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int (*v19)(char *, uint64_t, uint64_t);
  id v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  _QWORD *v35;
  char *__dst;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v22 = *a2;
    *a1 = *a2;
    v23 = v22 + ((v5 + 16) & ~(unint64_t)v5);
    swift_retain(v22);
  }
  else
  {
    v7 = type metadata accessor for Date(0);
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = *(int *)(a3 + 20);
    v35 = a1;
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = *(void **)((char *)a2 + v8);
    v12 = *(_QWORD *)((char *)a2 + v8 + 8);
    *(_QWORD *)v9 = v11;
    *((_QWORD *)v9 + 1) = v12;
    v13 = *(_QWORD *)((char *)a2 + v8 + 16);
    *((_QWORD *)v9 + 2) = v13;
    v9[24] = *((_BYTE *)a2 + v8 + 24);
    v14 = (int *)type metadata accessor for TodayContent(0);
    v15 = v14[8];
    __dst = &v9[v15];
    v16 = &v10[v15];
    v17 = type metadata accessor for URL(0);
    v18 = *(_QWORD *)(v17 - 8);
    v19 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48);
    v20 = v11;
    swift_bridgeObjectRetain(v12);
    swift_unknownObjectRetain(v13);
    if (v19(v16, 1, v17))
    {
      v21 = sub_10001B520(&qword_1000B93A0);
      memcpy(__dst, v16, *(_QWORD *)(*(_QWORD *)(v21 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v18 + 16))(__dst, v16, v17);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v18 + 56))(__dst, 0, 1, v17);
    }
    v24 = v14[9];
    v25 = *(_QWORD *)&v10[v24];
    *(_QWORD *)&v9[v24] = v25;
    v26 = v14[10];
    v27 = &v9[v26];
    v28 = &v10[v26];
    v29 = *((_QWORD *)v28 + 1);
    *(_QWORD *)v27 = *(_QWORD *)v28;
    *((_QWORD *)v27 + 1) = v29;
    v30 = v14[11];
    v31 = &v9[v30];
    v32 = &v10[v30];
    v33 = *((_QWORD *)v32 + 1);
    *(_QWORD *)v31 = *(_QWORD *)v32;
    *((_QWORD *)v31 + 1) = v33;
    swift_retain(v25);
    swift_bridgeObjectRetain(v29);
    swift_bridgeObjectRetain(v33);
    return v35;
  }
  return (_QWORD *)v23;
}

uint64_t sub_10001BF14(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  int *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v4 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  v5 = a1 + *(int *)(a2 + 20);

  swift_bridgeObjectRelease(*(_QWORD *)(v5 + 8));
  swift_unknownObjectRelease(*(_QWORD *)(v5 + 16));
  v6 = (int *)type metadata accessor for TodayContent(0);
  v7 = v5 + v6[8];
  v8 = type metadata accessor for URL(0);
  v9 = *(_QWORD *)(v8 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8))
    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v7, v8);
  swift_release(*(_QWORD *)(v5 + v6[9]));
  swift_bridgeObjectRelease(*(_QWORD *)(v5 + v6[10] + 8));
  return swift_bridgeObjectRelease(*(_QWORD *)(v5 + v6[11] + 8));
}

uint64_t sub_10001BFF4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  int *v13;
  uint64_t v14;
  const void *v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int (*v18)(const void *, uint64_t, uint64_t);
  id v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  _QWORD *v29;
  uint64_t v30;
  void *__dst;
  uint64_t v33;

  v6 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v33 = a1;
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = *(void **)(a2 + v7);
  v11 = *(_QWORD *)(a2 + v7 + 8);
  *(_QWORD *)v8 = v10;
  *(_QWORD *)(v8 + 8) = v11;
  v12 = *(_QWORD *)(a2 + v7 + 16);
  *(_QWORD *)(v8 + 16) = v12;
  *(_BYTE *)(v8 + 24) = *(_BYTE *)(a2 + v7 + 24);
  v13 = (int *)type metadata accessor for TodayContent(0);
  v14 = v13[8];
  __dst = (void *)(v8 + v14);
  v15 = (const void *)(v9 + v14);
  v16 = type metadata accessor for URL(0);
  v17 = *(_QWORD *)(v16 - 8);
  v18 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v17 + 48);
  v19 = v10;
  swift_bridgeObjectRetain(v11);
  swift_unknownObjectRetain(v12);
  if (v18(v15, 1, v16))
  {
    v20 = sub_10001B520(&qword_1000B93A0);
    memcpy(__dst, v15, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v17 + 16))(__dst, v15, v16);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v17 + 56))(__dst, 0, 1, v16);
  }
  v21 = v13[9];
  v22 = *(_QWORD *)(v9 + v21);
  *(_QWORD *)(v8 + v21) = v22;
  v23 = v13[10];
  v24 = (_QWORD *)(v8 + v23);
  v25 = (_QWORD *)(v9 + v23);
  v26 = v25[1];
  *v24 = *v25;
  v24[1] = v26;
  v27 = v13[11];
  v28 = (_QWORD *)(v8 + v27);
  v29 = (_QWORD *)(v9 + v27);
  v30 = v29[1];
  *v28 = *v29;
  v28[1] = v30;
  swift_retain(v22);
  swift_bridgeObjectRetain(v26);
  swift_bridgeObjectRetain(v30);
  return v33;
}

uint64_t sub_10001C180(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  void *v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int *v17;
  uint64_t v18;
  void *v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t (*v23)(void *, uint64_t, uint64_t);
  int v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;

  v6 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = *(void **)(a2 + v7);
  v11 = *(void **)v8;
  *(_QWORD *)v8 = v10;
  v12 = v10;

  v13 = *(_QWORD *)(v9 + 8);
  v14 = *(_QWORD *)(v8 + 8);
  *(_QWORD *)(v8 + 8) = v13;
  swift_bridgeObjectRetain(v13);
  swift_bridgeObjectRelease(v14);
  v15 = *(_QWORD *)(v9 + 16);
  v16 = *(_QWORD *)(v8 + 16);
  *(_QWORD *)(v8 + 16) = v15;
  swift_unknownObjectRetain(v15);
  swift_unknownObjectRelease(v16);
  *(_BYTE *)(v8 + 24) = *(_BYTE *)(v9 + 24);
  v17 = (int *)type metadata accessor for TodayContent(0);
  v18 = v17[8];
  v19 = (void *)(v8 + v18);
  v20 = (void *)(v9 + v18);
  v21 = type metadata accessor for URL(0);
  v22 = *(_QWORD *)(v21 - 8);
  v23 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v22 + 48);
  v24 = v23(v19, 1, v21);
  v25 = v23(v20, 1, v21);
  if (!v24)
  {
    if (!v25)
    {
      (*(void (**)(void *, void *, uint64_t))(v22 + 24))(v19, v20, v21);
      goto LABEL_7;
    }
    (*(void (**)(void *, uint64_t))(v22 + 8))(v19, v21);
    goto LABEL_6;
  }
  if (v25)
  {
LABEL_6:
    v26 = sub_10001B520(&qword_1000B93A0);
    memcpy(v19, v20, *(_QWORD *)(*(_QWORD *)(v26 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, void *, uint64_t))(v22 + 16))(v19, v20, v21);
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v22 + 56))(v19, 0, 1, v21);
LABEL_7:
  v27 = v17[9];
  v28 = *(_QWORD *)(v9 + v27);
  v29 = *(_QWORD *)(v8 + v27);
  *(_QWORD *)(v8 + v27) = v28;
  swift_retain(v28);
  swift_release(v29);
  v30 = v17[10];
  v31 = (_QWORD *)(v8 + v30);
  v32 = (_QWORD *)(v9 + v30);
  *v31 = *v32;
  v33 = v32[1];
  v34 = v31[1];
  v31[1] = v33;
  swift_bridgeObjectRetain(v33);
  swift_bridgeObjectRelease(v34);
  v35 = v17[11];
  v36 = (_QWORD *)(v8 + v35);
  v37 = (_QWORD *)(v9 + v35);
  *v36 = *v37;
  v38 = v37[1];
  v39 = v36[1];
  v36[1] = v38;
  swift_bridgeObjectRetain(v38);
  swift_bridgeObjectRelease(v39);
  return a1;
}

uint64_t sub_10001C388(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int *v10;
  uint64_t v11;
  void *v12;
  const void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v6 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = a2 + v7;
  *(_OWORD *)v8 = *(_OWORD *)(a2 + v7);
  *(_QWORD *)(v8 + 16) = *(_QWORD *)(a2 + v7 + 16);
  *(_BYTE *)(v8 + 24) = *(_BYTE *)(a2 + v7 + 24);
  v10 = (int *)type metadata accessor for TodayContent(0);
  v11 = v10[8];
  v12 = (void *)(v8 + v11);
  v13 = (const void *)(v9 + v11);
  v14 = type metadata accessor for URL(0);
  v15 = *(_QWORD *)(v14 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14))
  {
    v16 = sub_10001B520(&qword_1000B93A0);
    memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v15 + 32))(v12, v13, v14);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
  }
  *(_QWORD *)(v8 + v10[9]) = *(_QWORD *)(v9 + v10[9]);
  *(_OWORD *)(v8 + v10[10]) = *(_OWORD *)(v9 + v10[10]);
  *(_OWORD *)(v8 + v10[11]) = *(_OWORD *)(v9 + v10[11]);
  return a1;
}

uint64_t sub_10001C4C0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  int *v13;
  uint64_t v14;
  void *v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t (*v19)(void *, uint64_t, uint64_t);
  int v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;

  v6 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = *(void **)(a1 + v7);
  *(_QWORD *)(a1 + v7) = *(_QWORD *)(a2 + v7);

  v11 = *(_QWORD *)(v8 + 8);
  *(_QWORD *)(v8 + 8) = *(_QWORD *)(v9 + 8);
  swift_bridgeObjectRelease(v11);
  v12 = *(_QWORD *)(v8 + 16);
  *(_QWORD *)(v8 + 16) = *(_QWORD *)(v9 + 16);
  swift_unknownObjectRelease(v12);
  *(_BYTE *)(v8 + 24) = *(_BYTE *)(v9 + 24);
  v13 = (int *)type metadata accessor for TodayContent(0);
  v14 = v13[8];
  v15 = (void *)(v8 + v14);
  v16 = (void *)(v9 + v14);
  v17 = type metadata accessor for URL(0);
  v18 = *(_QWORD *)(v17 - 8);
  v19 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v18 + 48);
  v20 = v19(v15, 1, v17);
  v21 = v19(v16, 1, v17);
  if (!v20)
  {
    if (!v21)
    {
      (*(void (**)(void *, void *, uint64_t))(v18 + 40))(v15, v16, v17);
      goto LABEL_7;
    }
    (*(void (**)(void *, uint64_t))(v18 + 8))(v15, v17);
    goto LABEL_6;
  }
  if (v21)
  {
LABEL_6:
    v22 = sub_10001B520(&qword_1000B93A0);
    memcpy(v15, v16, *(_QWORD *)(*(_QWORD *)(v22 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, void *, uint64_t))(v18 + 32))(v15, v16, v17);
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v18 + 56))(v15, 0, 1, v17);
LABEL_7:
  v23 = v13[9];
  v24 = *(_QWORD *)(v8 + v23);
  *(_QWORD *)(v8 + v23) = *(_QWORD *)(v9 + v23);
  swift_release(v24);
  v25 = v13[10];
  v26 = (_QWORD *)(v8 + v25);
  v27 = (uint64_t *)(v9 + v25);
  v29 = *v27;
  v28 = v27[1];
  v30 = v26[1];
  *v26 = v29;
  v26[1] = v28;
  swift_bridgeObjectRelease(v30);
  v31 = v13[11];
  v32 = (_QWORD *)(v8 + v31);
  v33 = (uint64_t *)(v9 + v31);
  v35 = *v33;
  v34 = v33[1];
  v36 = v32[1];
  *v32 = v35;
  v32[1] = v34;
  swift_bridgeObjectRelease(v36);
  return a1;
}

uint64_t sub_10001C68C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10001C698);
}

uint64_t sub_10001C698(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;

  v6 = type metadata accessor for Date(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
  }
  else
  {
    v8 = type metadata accessor for TodayContent(0);
    v10 = a1 + *(int *)(a3 + 20);
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48);
  }
  return v9(v10, a2, v8);
}

uint64_t sub_10001C70C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10001C718);
}

uint64_t sub_10001C718(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;

  v8 = type metadata accessor for Date(0);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    v10 = type metadata accessor for TodayContent(0);
    v12 = a1 + *(int *)(a4 + 20);
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56);
  }
  return v11(v12, a2, a2, v10);
}

uint64_t type metadata accessor for NewsTimelineEntry(uint64_t a1)
{
  uint64_t result;

  result = qword_1000B9400;
  if (!qword_1000B9400)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for NewsTimelineEntry);
  return result;
}

uint64_t sub_10001C7D0(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  unint64_t v4;
  _QWORD v5[2];

  result = type metadata accessor for Date(319);
  if (v3 <= 0x3F)
  {
    v5[0] = *(_QWORD *)(result - 8) + 64;
    result = type metadata accessor for TodayContent(319);
    if (v4 <= 0x3F)
    {
      v5[1] = *(_QWORD *)(result - 8) + 64;
      swift_initStructMetadata(a1, 256, 2, v5, a1 + 16);
      return 0;
    }
  }
  return result;
}

__n128 initializeWithTake for ImageColorAnalysisResult(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  *a1 = *a2;
  return result;
}

void type metadata accessor for CGPoint(uint64_t a1)
{
  sub_10001C8D0(a1, &qword_1000B9438, (uint64_t)&unk_1000AB500);
}

uint64_t getEnumTagSinglePayload for SourceView.LayoutOptions(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 16))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for SourceView.LayoutOptions(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)result = (a2 - 1);
    *(_QWORD *)(result + 8) = 0;
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 16) = v3;
  return result;
}

void type metadata accessor for CGSize(uint64_t a1)
{
  sub_10001C8D0(a1, &qword_1000B9440, (uint64_t)&unk_1000AB580);
}

void sub_10001C8D0(uint64_t a1, unint64_t *a2, uint64_t a3)
{
  unint64_t ForeignTypeMetadata;
  uint64_t v5;

  if (!*a2)
  {
    ForeignTypeMetadata = swift_getForeignTypeMetadata(0, a3);
    if (!v5)
      atomic_store(ForeignTypeMetadata, a2);
  }
}

uint64_t sub_10001C914()
{
  return sub_10001C96C(&qword_1000B9448, (uint64_t (*)(uint64_t))type metadata accessor for AttributeName, (uint64_t)&unk_10008A4E8);
}

uint64_t sub_10001C940()
{
  return sub_10001C96C(&qword_1000B9450, (uint64_t (*)(uint64_t))type metadata accessor for AttributeName, (uint64_t)&unk_10008A4BC);
}

uint64_t sub_10001C96C(unint64_t *a1, uint64_t (*a2)(uint64_t), uint64_t a3)
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    v6 = a2(255);
    result = swift_getWitnessTable(a3, v6);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10001C9AC()
{
  return sub_10001C96C(&qword_1000B9458, (uint64_t (*)(uint64_t))type metadata accessor for TraitKey, (uint64_t)&unk_10008A5FC);
}

uint64_t sub_10001C9D8()
{
  return sub_10001C96C(&qword_1000B9460, (uint64_t (*)(uint64_t))type metadata accessor for TraitKey, (uint64_t)&unk_10008A5D0);
}

uint64_t sub_10001CA04()
{
  return sub_10001C96C(&qword_1000B9468, (uint64_t (*)(uint64_t))type metadata accessor for TraitKey, (uint64_t)&unk_10008A66C);
}

uint64_t sub_10001CA30()
{
  return sub_10001C96C(&qword_1000B9470, (uint64_t (*)(uint64_t))type metadata accessor for Weight, (uint64_t)&unk_10008A754);
}

uint64_t sub_10001CA5C()
{
  return sub_10001C96C(&qword_1000B9478, (uint64_t (*)(uint64_t))type metadata accessor for Weight, (uint64_t)&unk_10008A728);
}

uint64_t sub_10001CA88()
{
  double *v0;

  return Double.hashValue.getter(*v0);
}

void sub_10001CA90()
{
  Swift::UInt64 *v0;
  Swift::UInt64 v1;

  if ((*v0 & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v1 = *v0;
  else
    v1 = 0;
  Hasher._combine(_:)(v1);
}

uint64_t sub_10001CAC0(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;

  if ((*v1 & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v2 = *v1;
  else
    v2 = 0;
  return static Hasher._hash(seed:_:)(a1, v2);
}

BOOL sub_10001CAD0(double *a1, double *a2)
{
  return *a1 == *a2;
}

uint64_t sub_10001CAE4()
{
  return sub_10001C96C(&qword_1000B9480, (uint64_t (*)(uint64_t))type metadata accessor for Weight, (uint64_t)&unk_10008A7C4);
}

uint64_t sub_10001CB10()
{
  return sub_10001C96C(&qword_1000B9488, (uint64_t (*)(uint64_t))type metadata accessor for URLResourceKey, (uint64_t)&unk_10008A8B8);
}

uint64_t sub_10001CB3C()
{
  return sub_10001C96C(&qword_1000B9490, (uint64_t (*)(uint64_t))type metadata accessor for URLResourceKey, (uint64_t)&unk_10008A88C);
}

uint64_t sub_10001CB68()
{
  return sub_10001C96C(&qword_1000B9498, (uint64_t (*)(uint64_t))type metadata accessor for URLResourceKey, (uint64_t)&unk_10008A928);
}

uint64_t sub_10001CB94()
{
  return sub_10001C96C((unint64_t *)&unk_1000B94A0, (uint64_t (*)(uint64_t))type metadata accessor for AttributeName, (uint64_t)&unk_10008A558);
}

unint64_t sub_10001CBC0()
{
  unint64_t result;

  result = qword_1000B94C8;
  if (!qword_1000B94C8)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for CGFloat, &type metadata for CGFloat);
    atomic_store(result, (unint64_t *)&qword_1000B94C8);
  }
  return result;
}

BOOL sub_10001CC20(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

Swift::Int sub_10001CC34()
{
  unsigned __int8 *v0;
  Swift::UInt v1;
  _QWORD v3[9];

  v1 = *v0;
  Hasher.init(_seed:)(v3, 0);
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void sub_10001CC78()
{
  unsigned __int8 *v0;

  Hasher._combine(_:)(*v0);
}

Swift::Int sub_10001CCA0(uint64_t a1)
{
  unsigned __int8 *v1;
  Swift::UInt v2;
  _QWORD v4[9];

  v2 = *v1;
  Hasher.init(_seed:)(v4, a1);
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

uint64_t sub_10001CCE0()
{
  _BYTE *v0;
  unint64_t v1;

  v1 = 0xD000000000000014;
  if (*v0 != 1)
    v1 = 0x6F74537465737361;
  if (*v0)
    return v1;
  else
    return 1702125924;
}

uint64_t sub_10001CD40@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_10001DD54(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_10001CD64()
{
  return 0;
}

void sub_10001CD70(_BYTE *a1@<X8>)
{
  *a1 = 3;
}

uint64_t sub_10001CD7C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10001DA1C();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10001CDA4(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10001DA1C();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10001CDCC(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  char v22;
  char v23;
  uint64_t v24;
  char v25;

  v3 = v1;
  v5 = sub_10001B520(&qword_1000B9890);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_10001D9B4(a1, v9);
  v11 = sub_10001DA1C();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for TrackableNewsTimelineEntry.CodingKeys, &type metadata for TrackableNewsTimelineEntry.CodingKeys, v11, v9, v10);
  v25 = 0;
  v12 = type metadata accessor for Date(0);
  v13 = sub_10001C96C(&qword_1000B9898, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
  KeyedEncodingContainer.encode<A>(_:forKey:)(v3, &v25, v5, v12, v13);
  if (!v2)
  {
    v14 = type metadata accessor for TrackableNewsTimelineEntry(0);
    v24 = *(_QWORD *)(v3 + *(int *)(v14 + 20));
    v23 = 1;
    v15 = type metadata accessor for TrackableWidgetState(0);
    v16 = sub_10001C96C(&qword_1000B98A0, type metadata accessor for TrackableWidgetState, (uint64_t)&unk_10008CA60);
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v24, &v23, v5, v15, v16);
    v17 = (uint64_t *)(v3 + *(int *)(v14 + 24));
    v18 = *v17;
    v19 = v17[1];
    v22 = 2;
    KeyedEncodingContainer.encode(_:forKey:)(v18, v19, &v22, v5);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_10001CF88@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  char v35;
  char v36;

  v27 = a2;
  v28 = type metadata accessor for Date(0);
  v3 = *(_QWORD *)(v28 - 8);
  __chkstk_darwin(v28);
  v29 = (char *)&v26 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v30 = sub_10001B520(&qword_1000B9878);
  v5 = *(_QWORD *)(v30 - 8);
  __chkstk_darwin(v30);
  v7 = (char *)&v26 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for TrackableNewsTimelineEntry(0);
  __chkstk_darwin(v8);
  v10 = (char *)&v26 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = a1[3];
  v11 = a1[4];
  sub_10001D9B4(a1, v12);
  v13 = sub_10001DA1C();
  v31 = v7;
  v14 = v32;
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for TrackableNewsTimelineEntry.CodingKeys, &type metadata for TrackableNewsTimelineEntry.CodingKeys, v13, v12, v11);
  if (v14)
    return sub_10001DA60(a1);
  v15 = (uint64_t)v10;
  v36 = 0;
  v16 = sub_10001C96C(&qword_1000BBD70, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
  v17 = v28;
  v18 = v30;
  KeyedDecodingContainer.decode<A>(_:forKey:)(v28, &v36, v30, v28, v16);
  v32 = v3;
  (*(void (**)(uint64_t, char *, uint64_t))(v3 + 32))(v15, v29, v17);
  v19 = type metadata accessor for TrackableWidgetState(0);
  v35 = 1;
  v20 = sub_10001C96C(&qword_1000B9888, type metadata accessor for TrackableWidgetState, (uint64_t)&unk_10008CA88);
  KeyedDecodingContainer.decode<A>(_:forKey:)(v19, &v35, v18, v19, v20);
  *(_QWORD *)(v15 + *(int *)(v8 + 20)) = v33;
  v34 = 2;
  v21 = KeyedDecodingContainer.decode(_:forKey:)(&v34, v30);
  v23 = v22;
  (*(void (**)(char *, uint64_t))(v5 + 8))(v31, v30);
  v24 = (uint64_t *)(v15 + *(int *)(v8 + 24));
  *v24 = v21;
  v24[1] = v23;
  sub_10001DA80(v15, v27);
  sub_10001DA60(a1);
  return sub_10001DAC4(v15);
}

uint64_t sub_10001D26C@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_10001CF88(a1, a2);
}

uint64_t sub_10001D280(_QWORD *a1)
{
  return sub_10001CDCC(a1);
}

uint64_t sub_10001D294()
{
  uint64_t v0;

  sub_10001DA60((_QWORD *)(v0 + 16));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 64));
  return swift_deallocClassInstance(v0, 72, 7);
}

uint64_t type metadata accessor for EntryStore()
{
  return objc_opt_self(_TtC7NewsTag10EntryStore);
}

uint64_t *sub_10001D2E0(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v14 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v14 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v14);
  }
  else
  {
    v7 = type metadata accessor for Date(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = *(int *)(a3 + 20);
    v9 = *(int *)(a3 + 24);
    v10 = *(uint64_t *)((char *)a2 + v8);
    *(uint64_t *)((char *)a1 + v8) = v10;
    v11 = (uint64_t *)((char *)a1 + v9);
    v12 = (uint64_t *)((char *)a2 + v9);
    v13 = v12[1];
    *v11 = *v12;
    v11[1] = v13;
    swift_retain(v10);
    swift_bridgeObjectRetain(v13);
  }
  return a1;
}

uint64_t sub_10001D384(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  swift_release(*(_QWORD *)(a1 + *(int *)(a2 + 20)));
  return swift_bridgeObjectRelease(*(_QWORD *)(a1 + *(int *)(a2 + 24) + 8));
}

uint64_t sub_10001D3D8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;

  v6 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = *(int *)(a3 + 24);
  v9 = *(_QWORD *)(a2 + v7);
  *(_QWORD *)(a1 + v7) = v9;
  v10 = (_QWORD *)(a1 + v8);
  v11 = (_QWORD *)(a2 + v8);
  v12 = v11[1];
  *v10 = *v11;
  v10[1] = v12;
  swift_retain(v9);
  swift_bridgeObjectRetain(v12);
  return a1;
}

uint64_t sub_10001D450(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;

  v6 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = *(_QWORD *)(a2 + v7);
  v9 = *(_QWORD *)(a1 + v7);
  *(_QWORD *)(a1 + v7) = v8;
  swift_retain(v8);
  swift_release(v9);
  v10 = *(int *)(a3 + 24);
  v11 = (_QWORD *)(a1 + v10);
  v12 = (_QWORD *)(a2 + v10);
  *v11 = *v12;
  v13 = v12[1];
  v14 = v11[1];
  v11[1] = v13;
  swift_bridgeObjectRetain(v13);
  swift_bridgeObjectRelease(v14);
  return a1;
}

uint64_t sub_10001D4E8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;

  v6 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = *(int *)(a3 + 24);
  *(_QWORD *)(a1 + *(int *)(a3 + 20)) = *(_QWORD *)(a2 + *(int *)(a3 + 20));
  *(_OWORD *)(a1 + v7) = *(_OWORD *)(a2 + v7);
  return a1;
}

uint64_t sub_10001D54C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v6 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = *(_QWORD *)(a1 + v7);
  *(_QWORD *)(a1 + v7) = *(_QWORD *)(a2 + v7);
  swift_release(v8);
  v9 = *(int *)(a3 + 24);
  v10 = (_QWORD *)(a1 + v9);
  v11 = (uint64_t *)(a2 + v9);
  v13 = *v11;
  v12 = v11[1];
  v14 = v10[1];
  *v10 = v13;
  v10[1] = v12;
  swift_bridgeObjectRelease(v14);
  return a1;
}

uint64_t sub_10001D5CC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10001D5D8);
}

uint64_t sub_10001D5D8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;

  v6 = type metadata accessor for Date(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 20));
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  return (v9 + 1);
}

uint64_t sub_10001D654(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10001D660);
}

uint64_t sub_10001D660(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = type metadata accessor for Date(0);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 20)) = (a2 - 1);
  return result;
}

uint64_t type metadata accessor for TrackableNewsTimelineEntry(uint64_t a1)
{
  uint64_t result;

  result = qword_1000B9830;
  if (!qword_1000B9830)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for TrackableNewsTimelineEntry);
  return result;
}

uint64_t sub_10001D714(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[3];

  result = type metadata accessor for Date(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(result - 8) + 64;
    v4[1] = (char *)&value witness table for Builtin.NativeObject + 64;
    v4[2] = &unk_10008AAA0;
    swift_initStructMetadata(a1, 256, 3, v4, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t sub_10001D794(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t *v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  Swift::String v16;
  uint64_t v17;
  Swift::String v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  __n128 v26;
  uint64_t v27;
  unint64_t v28;
  __n128 v29;
  void (*v30)(char *, uint64_t, __n128);
  char *v31;
  uint64_t v32;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v35 = a1;
  v2 = v1;
  v40 = type metadata accessor for URL(0);
  v37 = *(_QWORD *)(v40 - 8);
  v4 = __chkstk_darwin(v40);
  v6 = (char *)&v34 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v8 = (char *)&v34 - v7;
  sub_10001D9B4(v2 + 2, v2[5]);
  v9 = type metadata accessor for TrackableNewsTimelineEntry(0);
  v10 = (uint64_t *)(a1 + *(int *)(v9 + 24));
  v12 = *v10;
  v11 = (void *)v10[1];
  v13 = sub_10001E85C();
  v15 = v14;
  v38 = v13;
  v39 = v14;
  swift_bridgeObjectRetain(v14);
  v16._countAndFlagsBits = 45;
  v16._object = (void *)0xE100000000000000;
  String.append(_:)(v16);
  swift_bridgeObjectRelease(v15);
  v17 = v39;
  swift_bridgeObjectRetain(v39);
  v18._countAndFlagsBits = v12;
  v18._object = v11;
  String.append(_:)(v18);
  swift_bridgeObjectRelease(v17);
  v19 = v39;
  URL.appendingPathComponent(_:isDirectory:)(v38, v39, 1);
  swift_bridgeObjectRelease(v19);
  URL.appendingPathComponent(_:)(v2[7], v2[8]);
  v20 = type metadata accessor for JSONEncoder(0);
  swift_allocObject(v20, *(unsigned int *)(v20 + 48), *(unsigned __int16 *)(v20 + 52));
  v21 = JSONEncoder.init()();
  v22 = sub_10001C96C(&qword_1000B9870, type metadata accessor for TrackableNewsTimelineEntry, (uint64_t)&unk_10008AAE8);
  v23 = v36;
  v24 = dispatch thunk of JSONEncoder.encode<A>(_:)(v35, v9, v22);
  if (v23)
  {
    v26 = swift_release(v21);
  }
  else
  {
    v27 = v24;
    v28 = v25;
    v29 = swift_release(v21);
    Data.write(to:options:)(v6, 1, v27, v28, v29);
    sub_10001D9D8(v27, v28);
  }
  v30 = *(void (**)(char *, uint64_t, __n128))(v37 + 8);
  v31 = v6;
  v32 = v40;
  v30(v31, v40, v26);
  return ((uint64_t (*)(char *, uint64_t))v30)(v8, v32);
}

_QWORD *sub_10001D9B4(_QWORD *result, uint64_t a2)
{
  if ((*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80) & 0x20000) != 0)
    return (_QWORD *)(*result
                    + ((*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80) + 16) & ~(unint64_t)*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80)));
  return result;
}

uint64_t sub_10001D9D8(uint64_t result, unint64_t a2)
{
  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2)
      return result;
    swift_release(result);
  }
  return swift_release(a2 & 0x3FFFFFFFFFFFFFFFLL);
}

unint64_t sub_10001DA1C()
{
  unint64_t result;

  result = qword_1000B9880;
  if (!qword_1000B9880)
  {
    result = swift_getWitnessTable(&unk_10008AC0C, &type metadata for TrackableNewsTimelineEntry.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000B9880);
  }
  return result;
}

uint64_t sub_10001DA60(_QWORD *a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1[3] - 8);
  if ((*(_BYTE *)(v1 + 82) & 2) != 0)
    return swift_release(*a1);
  else
    return (*(uint64_t (**)(void))(v1 + 8))();
}

uint64_t sub_10001DA80(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for TrackableNewsTimelineEntry(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10001DAC4(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for TrackableNewsTimelineEntry(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

_BYTE *initializeBufferWithCopyOfBuffer for TrackableNewsTimelineEntry.CodingKeys(_BYTE *result, _BYTE *a2)
{
  *result = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for TrackableNewsTimelineEntry.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFE)
    goto LABEL_17;
  if (a2 + 2 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 2) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 2;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 2;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 2;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 3;
  v8 = v6 - 3;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for TrackableNewsTimelineEntry.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_10001DBE8 + 4 * byte_10008AA35[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_10001DC1C + 4 * byte_10008AA30[v4]))();
}

uint64_t sub_10001DC1C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10001DC24(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10001DC2CLL);
  return result;
}

uint64_t sub_10001DC38(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10001DC40);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_10001DC44(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10001DC4C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10001DC58(unsigned __int8 *a1)
{
  return *a1;
}

_BYTE *sub_10001DC64(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

ValueMetadata *type metadata accessor for TrackableNewsTimelineEntry.CodingKeys()
{
  return &type metadata for TrackableNewsTimelineEntry.CodingKeys;
}

unint64_t sub_10001DC80()
{
  unint64_t result;

  result = qword_1000B98A8;
  if (!qword_1000B98A8)
  {
    result = swift_getWitnessTable(&unk_10008ABE4, &type metadata for TrackableNewsTimelineEntry.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000B98A8);
  }
  return result;
}

unint64_t sub_10001DCC8()
{
  unint64_t result;

  result = qword_1000B98B0;
  if (!qword_1000B98B0)
  {
    result = swift_getWitnessTable(&unk_10008AB54, &type metadata for TrackableNewsTimelineEntry.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000B98B0);
  }
  return result;
}

unint64_t sub_10001DD10()
{
  unint64_t result;

  result = qword_1000B98B8;
  if (!qword_1000B98B8)
  {
    result = swift_getWitnessTable(&unk_10008AB7C, &type metadata for TrackableNewsTimelineEntry.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000B98B8);
  }
  return result;
}

uint64_t sub_10001DD54(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v7;
  char v8;

  if (a1 == 1702125924 && a2 == 0xE400000000000000)
  {
    v5 = 0xE400000000000000;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(1702125924, 0xE400000000000000, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0xD000000000000014)
  {
    v7 = 0x80000001000906F0;
    if (a2 == 0x80000001000906F0)
      goto LABEL_13;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000014, 0x80000001000906F0, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
LABEL_13:
    swift_bridgeObjectRelease(v7);
    return 1;
  }
  if (a1 == 0x6F74537465737361 && a2 == 0xEC00000044496572)
  {
    swift_bridgeObjectRelease(0xEC00000044496572);
    return 2;
  }
  else
  {
    v8 = _stringCompareWithSmolCheck(_:_:expecting:)(0x6F74537465737361, 0xEC00000044496572, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v8 & 1) != 0)
      return 2;
    else
      return 3;
  }
}

id sub_10001DEA8()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  id v3;
  id v4;
  void *v5;
  id v6;

  v1 = OBJC_IVAR____TtC7NewsTag16WidgetAssetStore____lazy_storage___pruneThrottler;
  v2 = *(void **)(v0 + OBJC_IVAR____TtC7NewsTag16WidgetAssetStore____lazy_storage___pruneThrottler);
  if (v2)
  {
    v3 = *(id *)(v0 + OBJC_IVAR____TtC7NewsTag16WidgetAssetStore____lazy_storage___pruneThrottler);
  }
  else
  {
    v4 = objc_msgSend(objc_allocWithZone((Class)FCOperationThrottler), "initWithDelegate:", v0);
    v5 = *(void **)(v0 + v1);
    *(_QWORD *)(v0 + v1) = v4;
    v3 = v4;

    v2 = 0;
  }
  v6 = v2;
  return v3;
}

_QWORD *sub_10001DF1C()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  id v3;
  NSURL *v4;
  void *v5;
  void *v6;
  id v7;
  id v8;
  uint64_t v9;
  id v10;
  int64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t (*v14)(char *, unint64_t, uint64_t);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  unint64_t v20;
  unint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  id v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  unint64_t v32;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  unint64_t v39;

  v0 = type metadata accessor for URL(0);
  v36 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin(v0);
  v2 = (char *)&v34 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = objc_msgSend((id)objc_opt_self(NSFileManager), "defaultManager");
  URL._bridgeToObjectiveC()(v4);
  v6 = v5;
  v38 = 0;
  v7 = objc_msgSend(v3, "contentsOfDirectoryAtURL:includingPropertiesForKeys:options:error:", v5, 0, 4, &v38);

  v8 = v38;
  if (!v7)
  {
    v23 = v38;
    v24 = _convertNSErrorToError(_:)(v8);

    swift_willThrow(v25);
    v26 = PrefetchLog();
    v27 = static os_log_type_t.error.getter(v26);
    v28 = sub_10001B520(&qword_1000B9980);
    v29 = swift_allocObject(v28, 72, 7);
    *(_OWORD *)(v29 + 16) = xmmword_10008AC60;
    v38 = 0;
    v39 = 0xE000000000000000;
    v37 = v24;
    v30 = sub_10001B520(&qword_1000B99D8);
    _print_unlocked<A, B>(_:_:)(&v37, &v38, v30, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
    v31 = v38;
    v32 = v39;
    *(_QWORD *)(v29 + 56) = &type metadata for String;
    *(_QWORD *)(v29 + 64) = sub_10001FB34();
    *(_QWORD *)(v29 + 32) = v31;
    *(_QWORD *)(v29 + 40) = v32;
    os_log(_:dso:log:type:_:)("failed to scan for files with %{public}@", 40, 2, &_mh_execute_header, v26, v27, v29);

    swift_bridgeObjectRelease(v29);
    swift_errorRelease(v24);
    return _swiftEmptyArrayStorage;
  }
  v9 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v7, v0);
  v10 = v8;

  v11 = *(_QWORD *)(v9 + 16);
  if (!v11)
  {
    swift_bridgeObjectRelease(v9);
    return _swiftEmptyArrayStorage;
  }
  v38 = _swiftEmptyArrayStorage;
  sub_10002123C(0, v11, 0);
  v12 = v9 + ((*(unsigned __int8 *)(v36 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v36 + 80));
  v13 = *(_QWORD *)(v36 + 72);
  v34 = v9;
  v35 = v13;
  v14 = *(uint64_t (**)(char *, unint64_t, uint64_t))(v36 + 16);
  do
  {
    v15 = v14(v2, v12, v0);
    v16 = URL.lastPathComponent.getter(v15);
    v18 = v17;
    (*(void (**)(char *, uint64_t))(v36 + 8))(v2, v0);
    v19 = v38;
    if ((swift_isUniquelyReferenced_nonNull_native(v38) & 1) == 0)
    {
      sub_10002123C(0, v19[2] + 1, 1);
      v19 = v38;
    }
    v21 = v19[2];
    v20 = v19[3];
    if (v21 >= v20 >> 1)
    {
      sub_10002123C(v20 > 1, v21 + 1, 1);
      v19 = v38;
    }
    v19[2] = v21 + 1;
    v22 = &v19[2 * v21];
    v22[4] = v16;
    v22[5] = v18;
    v12 += v35;
    --v11;
  }
  while (v11);
  swift_bridgeObjectRelease(v34);
  return v19;
}

uint64_t sub_10001E258@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  Swift::String v12;
  uint64_t v13;
  Swift::String v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  id v25;
  NSURL *v26;
  void *v27;
  void *v28;
  uint64_t v29;
  id v30;
  id v31;
  uint64_t v32;
  uint64_t v33;
  id v34;
  id v35;
  __n128 v36;
  id v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  id v44;
  uint64_t v45;

  v42 = a3;
  v6 = type metadata accessor for URL(0);
  v43 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v8 = (char *)&v40 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = (void *)sub_10001E85C();
  v11 = v10;
  v44 = v9;
  v45 = v10;
  swift_bridgeObjectRetain(v10);
  v12._countAndFlagsBits = 45;
  v12._object = (void *)0xE100000000000000;
  String.append(_:)(v12);
  swift_bridgeObjectRelease(v11);
  v13 = v45;
  swift_bridgeObjectRetain(v45);
  v14._countAndFlagsBits = a1;
  v14._object = a2;
  String.append(_:)(v14);
  swift_bridgeObjectRelease(v13);
  v16 = (uint64_t)v44;
  v15 = v45;
  v41 = v3;
  URL.appendingPathComponent(_:isDirectory:)(v44, v45, 1);
  v17 = PrefetchLog();
  v18 = static os_log_type_t.info.getter();
  v19 = sub_10001B520(&qword_1000B9980);
  v20 = swift_allocObject(v19, 72, 7);
  *(_OWORD *)(v20 + 16) = xmmword_10008AC60;
  v21 = sub_10001C96C((unint64_t *)&qword_1000B9988, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t)&protocol conformance descriptor for URL);
  v22 = dispatch thunk of CustomStringConvertible.description.getter(v6, v21);
  v24 = v23;
  *(_QWORD *)(v20 + 56) = &type metadata for String;
  *(_QWORD *)(v20 + 64) = sub_10001FB34();
  *(_QWORD *)(v20 + 32) = v22;
  *(_QWORD *)(v20 + 40) = v24;
  os_log(_:dso:log:type:_:)("creating directory at %@", 24, 2, &_mh_execute_header, v17, v18, v20);

  swift_bridgeObjectRelease(v20);
  v25 = objc_msgSend((id)objc_opt_self(NSFileManager), "defaultManager");
  URL._bridgeToObjectiveC()(v26);
  v28 = v27;
  v44 = 0;
  LOBYTE(v17) = objc_msgSend(v25, "createDirectoryAtURL:withIntermediateDirectories:attributes:error:", v27, 1, 0, &v44);

  v30 = v44;
  if ((v17 & 1) != 0)
  {
    v44 = *(id *)(v41 + OBJC_IVAR____TtC7NewsTag16WidgetAssetStore_lock);
    v31 = v44;
    __chkstk_darwin(v29);
    *(&v40 - 4) = v32;
    *(&v40 - 3) = v16;
    *(&v40 - 2) = v15;
    *(&v40 - 1) = (uint64_t)v8;
    v33 = type metadata accessor for UnfairLock(0);
    v34 = v30;
    swift_retain(v31);
    Lock.sync<A>(_:)(sub_10001FB78, &v40 - 6, v33, v6, &protocol witness table for UnfairLock);
    v35 = v44;
    swift_bridgeObjectRelease(v15);
    v36 = swift_release(v35);
    return (*(uint64_t (**)(char *, uint64_t, __n128))(v43 + 8))(v8, v6, v36);
  }
  else
  {
    v38 = v44;
    swift_bridgeObjectRelease(v15);
    _convertNSErrorToError(_:)(v30);

    swift_willThrow(v39);
    return (*(uint64_t (**)(char *, uint64_t))(v43 + 8))(v8, v6);
  }
}

uint64_t sub_10001E5A8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v9;
  _BYTE v11[24];
  uint64_t v12[2];

  swift_beginAccess(a1 + OBJC_IVAR____TtC7NewsTag16WidgetAssetStore_keysOfInterest, v11, 33, 0);
  swift_bridgeObjectRetain(a3);
  sub_10001FB84(v12, a2, a3);
  swift_endAccess(v11);
  swift_bridgeObjectRelease(v12[1]);
  v9 = type metadata accessor for URL(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 16))(a5, a4, v9);
}

uint64_t sub_10001E654@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  char *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;

  v22 = *(_QWORD *)&v2[OBJC_IVAR____TtC7NewsTag16WidgetAssetStore_lock];
  v19 = v2;
  v20 = a1;
  v4 = type metadata accessor for UnfairLock(0);
  swift_retain(v22);
  v5 = sub_10001B520((uint64_t *)&unk_1000B99C0);
  Lock.sync<A>(_:)(sub_100020F58, &v18, v4, v5, &protocol witness table for UnfairLock);
  swift_release(v22);
  v6 = v23;
  v7 = v2;
  v8 = swift_bridgeObjectRetain(v6);
  v9 = sub_10007032C(v8);
  swift_bridgeObjectRelease(v6);
  v21 = v9;
  sub_100024018((uint64_t *)&v21, v7);
  swift_bridgeObjectRelease(v6);

  v10 = (uint64_t)v21;
  v11 = v21[2];
  if (v11)
  {
    v12 = &v21[2 * v11];
    v13 = v12[2];
    v14 = v12[3];
    swift_bridgeObjectRetain(v14);
    swift_release(v10);
    URL.appendingPathComponent(_:isDirectory:)(v13, v14, 1);
    swift_bridgeObjectRelease(v14);
    v15 = type metadata accessor for URL(0);
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 56))(a2, 0, 1, v15);
  }
  else
  {
    swift_release(v21);
    v17 = type metadata accessor for URL(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 56))(a2, 1, 1, v17);
  }
}

Swift::Int sub_10001E7E0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, Swift::Int *a3@<X8>)
{
  uint64_t *v5;
  uint64_t v6;
  Swift::Int result;
  _QWORD v8[5];
  _BYTE v9[24];

  v5 = (uint64_t *)(a1 + OBJC_IVAR____TtC7NewsTag16WidgetAssetStore_keysOfInterest);
  swift_beginAccess(a1 + OBJC_IVAR____TtC7NewsTag16WidgetAssetStore_keysOfInterest, v9, 0, 0);
  v6 = *v5;
  v8[2] = a2;
  swift_bridgeObjectRetain(v6);
  result = sub_1000219C8((uint64_t)sub_1000242B8, (uint64_t)v8, v6);
  *a3 = result;
  return result;
}

uint64_t sub_10001E85C()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t ObjectType;
  uint64_t (*v8)(uint64_t, uint64_t);
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;

  v1 = v0;
  v2 = sub_10001B520(&qword_1000B99A0);
  v3 = swift_allocObject(v2, 80, 7);
  *(_OWORD *)(v3 + 16) = xmmword_10008AC70;
  v4 = (_QWORD *)((char *)v0 + *(int *)(type metadata accessor for NewsWidgetInfo(0) + 24));
  v5 = v4[1];
  *(_QWORD *)(v3 + 32) = *v4;
  *(_QWORD *)(v3 + 40) = v5;
  if (*v1)
  {
    v6 = v1[1];
    ObjectType = swift_getObjectType(*v1);
    v8 = *(uint64_t (**)(uint64_t, uint64_t))(v6 + 16);
    swift_bridgeObjectRetain(v5);
    v9 = v8(ObjectType, v6);
  }
  else
  {
    swift_bridgeObjectRetain(v5);
    v10 = 0xE300000000000000;
    v9 = 7104878;
  }
  *(_QWORD *)(v3 + 48) = v9;
  *(_QWORD *)(v3 + 56) = v10;
  v11 = type metadata accessor for InternalWidgetFamily(0);
  v12 = sub_10001C96C(&qword_1000B99A8, (uint64_t (*)(uint64_t))&type metadata accessor for InternalWidgetFamily, (uint64_t)&protocol conformance descriptor for InternalWidgetFamily);
  *(_QWORD *)(v3 + 64) = dispatch thunk of CustomStringConvertible.description.getter(v11, v12);
  *(_QWORD *)(v3 + 72) = v13;
  v14 = sub_10001B520(&qword_1000B99B0);
  v15 = sub_100020F0C();
  v16 = BidirectionalCollection<>.joined(separator:)(45, 0xE100000000000000, v14, v15);
  swift_bridgeObjectRelease(v3);
  return v16;
}

uint64_t sub_10001E9B4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t inited;
  NSString *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  id v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  __int128 v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char v36[40];

  v35 = a3;
  v5 = sub_10001B520((uint64_t *)&unk_1000BC550);
  __chkstk_darwin(v5);
  v7 = (char *)&v32 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for URLResourceValues(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v32 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for URL(0);
  v33 = *(_QWORD *)(v12 - 8);
  v34 = v12;
  __chkstk_darwin(v12);
  v14 = (char *)&v32 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  URL.appendingPathComponent(_:isDirectory:)(a1, a2, 1);
  v15 = sub_10001B520(&qword_1000B99D0);
  inited = swift_initStackObject(v15, v36);
  v32 = xmmword_10008AC60;
  *(_OWORD *)(inited + 16) = xmmword_10008AC60;
  *(_QWORD *)(inited + 32) = NSURLCreationDateKey;
  v17 = NSURLCreationDateKey;
  v18 = sub_100022CD8(inited);
  swift_setDeallocating(inited);
  type metadata accessor for URLResourceKey(0);
  swift_arrayDestroy(inited + 32, 1, v19);
  URL.resourceValues(forKeys:)(v18);
  v20 = swift_bridgeObjectRelease(v18);
  URLResourceValues.creationDate.getter(v20);
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  v21 = type metadata accessor for Date(0);
  v22 = *(_QWORD *)(v21 - 8);
  v23 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v22 + 48))(v7, 1, v21);
  v25 = v34;
  v24 = v35;
  v26 = v33;
  if (v23 == 1)
  {
    sub_100022D78((uint64_t)v7);
    v27 = PrefetchLog();
    v28 = static os_log_type_t.error.getter();
    v29 = sub_10001B520(&qword_1000B9980);
    v30 = swift_allocObject(v29, 72, 7);
    *(_OWORD *)(v30 + 16) = v32;
    *(_QWORD *)(v30 + 56) = &type metadata for String;
    *(_QWORD *)(v30 + 64) = sub_10001FB34();
    *(_QWORD *)(v30 + 32) = a1;
    *(_QWORD *)(v30 + 40) = a2;
    swift_bridgeObjectRetain(a2);
    os_log(_:dso:log:type:_:)("unable to find creation date of file for key %@", 47, 2, &_mh_execute_header, v27, v28, v30);

    swift_bridgeObjectRelease(v30);
    _s7NewsTag16TelemetryManagerC13lastFlushDate33_4E4017AC2BCC1D1AC48C0D84A0E547E910Foundation0G0Vvpfi_0();
    return (*(uint64_t (**)(char *, uint64_t))(v26 + 8))(v14, v25);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v33 + 8))(v14, v34);
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v22 + 32))(v24, v7, v21);
  }
}

id WidgetPersonalizationConfigurationManager.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)swift_getObjectType(v0);
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t sub_10001EE5C()
{
  return type metadata accessor for WidgetAssetStore(0);
}

uint64_t type metadata accessor for WidgetAssetStore(uint64_t a1)
{
  uint64_t result;

  result = qword_1000B9910;
  if (!qword_1000B9910)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for WidgetAssetStore);
  return result;
}

uint64_t sub_10001EEA0(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[5];

  v4[0] = "(";
  result = type metadata accessor for URL(319);
  if (v3 <= 0x3F)
  {
    v4[1] = *(_QWORD *)(result - 8) + 64;
    v4[2] = &unk_10008ACF0;
    v4[3] = (char *)&value witness table for Builtin.BridgeObject + 64;
    v4[4] = (char *)&value witness table for Builtin.NativeObject + 64;
    result = swift_updateClassMetadata2(a1, 256, 5, v4, a1 + 80);
    if (!result)
      return 0;
  }
  return result;
}

uint64_t sub_10001EF3C(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD v14[5];
  uint64_t v15;

  v3 = *a1;
  v4 = PrefetchLog();
  v5 = static os_log_type_t.error.getter();
  v6 = sub_10001B520(&qword_1000B9980);
  v7 = swift_allocObject(v6, 72, 7);
  *(_OWORD *)(v7 + 16) = xmmword_10008AC60;
  v8 = type metadata accessor for NewsWidgetInfo(0);
  v9 = Array.description.getter(v3, v8);
  v11 = v10;
  *(_QWORD *)(v7 + 56) = &type metadata for String;
  *(_QWORD *)(v7 + 64) = sub_10001FB34();
  *(_QWORD *)(v7 + 32) = v9;
  *(_QWORD *)(v7 + 40) = v11;
  os_log(_:dso:log:type:_:)("identified active infos as %@", 29, 2, &_mh_execute_header, v4, v5, v7);

  swift_bridgeObjectRelease(v7);
  v15 = *(_QWORD *)(a2 + OBJC_IVAR____TtC7NewsTag16WidgetAssetStore_lock);
  v14[2] = v3;
  v14[3] = a2;
  v12 = type metadata accessor for UnfairLock(0);
  swift_retain(v15);
  Lock.sync<A>(_:)(sub_100023050, v14, v12, (char *)&type metadata for () + 8, &protocol witness table for UnfairLock);
  return swift_release(v15);
}

uint64_t sub_10001F088(uint64_t a1, char *a2)
{
  unint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  char *v11;
  int64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  Swift::Int v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  int64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  char *v24;
  char *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  id v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  char *v44;
  unint64_t *v45;
  id v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  int64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  char *v57;
  uint64_t v58;
  char *i;
  id v60;
  unint64_t v61;
  unint64_t v62;
  unint64_t v64;
  int64_t v65;
  uint64_t *v66;
  uint64_t v67;
  uint64_t v68;
  id v69;
  NSURL *v70;
  void *v71;
  void *v72;
  uint64_t v73;
  id v74;
  uint64_t v75;
  uint64_t v76;
  id v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  char *v81;
  unint64_t *v82;
  unint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t result;
  uint64_t v91;
  char *v92;
  uint64_t v93;
  char *v94;
  __int128 v95;
  unint64_t v96;
  uint64_t v97;
  unint64_t *v98;
  int64_t v99;
  __int128 v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  unint64_t v105;
  _QWORD *v106;
  uint64_t v107[2];
  char v108[24];

  v4 = 0;
  v5 = type metadata accessor for URL(0);
  v101 = *(_QWORD *)(v5 - 8);
  v102 = v5;
  __chkstk_darwin(v5);
  v92 = (char *)&v91 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for NewsWidgetInfo(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v97 = (uint64_t)&v91 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = &_swiftEmptySetSingleton;
  v106 = &_swiftEmptySetSingleton;
  v96 = *(_QWORD *)(a1 + 16);
  if (!v96)
  {
LABEL_21:
    v33 = PrefetchLog();
    v34 = static os_log_type_t.error.getter();
    v97 = sub_10001B520(&qword_1000B9980);
    v35 = swift_allocObject(v97, 72, 7);
    v100 = xmmword_10008AC60;
    *(_OWORD *)(v35 + 16) = xmmword_10008AC60;
    v36 = swift_bridgeObjectRetain(v10);
    v37 = Set.description.getter(v36, &type metadata for String, &protocol witness table for String);
    v39 = v38;
    swift_bridgeObjectRelease(v10);
    *(_QWORD *)(v35 + 56) = &type metadata for String;
    v96 = sub_10001FB34();
    *(_QWORD *)(v35 + 64) = v96;
    *(_QWORD *)(v35 + 32) = v37;
    *(_QWORD *)(v35 + 40) = v39;
    os_log(_:dso:log:type:_:)("identified new keys of interest as %@", 37, 2, &_mh_execute_header, v33, v34, v35);

    swift_bridgeObjectRelease(v35);
    v40 = &a2[OBJC_IVAR____TtC7NewsTag16WidgetAssetStore_keysOfInterest];
    swift_beginAccess(&a2[OBJC_IVAR____TtC7NewsTag16WidgetAssetStore_keysOfInterest], v107, 1, 0);
    v41 = *(_QWORD *)v40;
    v42 = v10[2];
    v43 = *(_QWORD *)(*(_QWORD *)v40 + 16);
    v94 = v40;
    v44 = a2;
    if (v42 > v43 >> 3)
    {
      swift_bridgeObjectRetain(v10);
      swift_bridgeObjectRetain(v41);
      v45 = sub_100022170((uint64_t)v10, v41);
      swift_bridgeObjectRelease(v10);
    }
    else
    {
      v104 = v41;
      swift_bridgeObjectRetain(v10);
      swift_bridgeObjectRetain(v41);
      sub_100021FDC((uint64_t)v10);
      swift_bridgeObjectRelease(v10);
      v45 = (unint64_t *)v104;
    }
    v46 = PrefetchLog();
    v47 = static os_log_type_t.error.getter();
    v48 = swift_allocObject(v97, 72, 7);
    *(_OWORD *)(v48 + 16) = v100;
    v49 = Set.description.getter(v45, &type metadata for String, &protocol witness table for String);
    v50 = v96;
    *(_QWORD *)(v48 + 56) = &type metadata for String;
    *(_QWORD *)(v48 + 64) = v50;
    *(_QWORD *)(v48 + 32) = v49;
    *(_QWORD *)(v48 + 40) = v51;
    os_log(_:dso:log:type:_:)("identified keys to remove as %@", 31, 2, &_mh_execute_header, v46, v47, v48);

    swift_bridgeObjectRelease(v48);
    v52 = 0;
    v53 = v45[7];
    v98 = v45 + 7;
    v54 = 1 << *((_BYTE *)v45 + 32);
    v55 = -1;
    if (v54 < 64)
      v55 = ~(-1 << v54);
    v56 = v55 & v53;
    v57 = &v44[OBJC_IVAR____TtC7NewsTag16WidgetAssetStore_directoryUrl];
    v99 = (unint64_t)(v54 + 63) >> 6;
    v95 = xmmword_10008AC80;
    v58 = v102;
    for (i = v92; ; (*(void (**)(char *, uint64_t))(v101 + 8))(i, v58))
    {
      if (v56)
      {
        v61 = __clz(__rbit64(v56));
        v56 &= v56 - 1;
        v62 = v61 | (v52 << 6);
      }
      else
      {
        if (__OFADD__(v52++, 1))
        {
          __break(1u);
          goto LABEL_50;
        }
        if (v52 >= v99)
          goto LABEL_48;
        v64 = v98[v52];
        if (!v64)
        {
          v65 = v52 + 1;
          if (v52 + 1 >= v99)
            goto LABEL_48;
          v64 = v98[v65];
          if (!v64)
          {
            v65 = v52 + 2;
            if (v52 + 2 >= v99)
              goto LABEL_48;
            v64 = v98[v65];
            if (!v64)
            {
              v65 = v52 + 3;
              if (v52 + 3 >= v99)
              {
LABEL_48:
                swift_release(v45);
                v89 = *(_QWORD *)v94;
                *(_QWORD *)v94 = v106;
                return swift_bridgeObjectRelease(v89);
              }
              v64 = v98[v65];
              if (!v64)
              {
                while (1)
                {
                  v52 = v65 + 1;
                  if (__OFADD__(v65, 1))
                    break;
                  if (v52 >= v99)
                    goto LABEL_48;
                  v64 = v98[v52];
                  ++v65;
                  if (v64)
                    goto LABEL_41;
                }
LABEL_52:
                __break(1u);
              }
            }
          }
          v52 = v65;
        }
LABEL_41:
        v56 = (v64 - 1) & v64;
        v62 = __clz(__rbit64(v64)) + (v52 << 6);
      }
      v66 = (uint64_t *)(v45[6] + 16 * v62);
      v67 = *v66;
      v68 = v66[1];
      swift_bridgeObjectRetain(v68);
      URL.appendingPathComponent(_:isDirectory:)(v67, v68, 1);
      swift_bridgeObjectRelease(v68);
      v69 = objc_msgSend((id)objc_opt_self(NSFileManager), "defaultManager");
      URL._bridgeToObjectiveC()(v70);
      v72 = v71;
      v104 = 0;
      LODWORD(v68) = objc_msgSend(v69, "removeItemAtURL:error:", v71, &v104);

      v73 = v104;
      if ((_DWORD)v68)
      {
        v60 = (id)v104;
      }
      else
      {
        v74 = (id)v104;
        v75 = _convertNSErrorToError(_:)(v73);

        swift_willThrow(v76);
        v77 = PrefetchLog();
        LODWORD(v100) = static os_log_type_t.error.getter();
        v78 = swift_allocObject(v97, 112, 7);
        *(_OWORD *)(v78 + 16) = v95;
        v79 = sub_10001C96C((unint64_t *)&qword_1000B9988, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t)&protocol conformance descriptor for URL);
        v80 = dispatch thunk of CustomStringConvertible.description.getter(v102, v79);
        v81 = v57;
        v82 = v45;
        v83 = v96;
        *(_QWORD *)(v78 + 56) = &type metadata for String;
        *(_QWORD *)(v78 + 64) = v83;
        *(_QWORD *)(v78 + 32) = v80;
        *(_QWORD *)(v78 + 40) = v84;
        v104 = 0;
        v105 = 0xE000000000000000;
        v103 = v75;
        v85 = sub_10001B520(&qword_1000B99D8);
        _print_unlocked<A, B>(_:_:)(&v103, &v104, v85, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
        v86 = v104;
        v87 = v105;
        *(_QWORD *)(v78 + 96) = &type metadata for String;
        *(_QWORD *)(v78 + 104) = v83;
        v45 = v82;
        v57 = v81;
        *(_QWORD *)(v78 + 72) = v86;
        *(_QWORD *)(v78 + 80) = v87;
        os_log(_:dso:log:type:_:)("unable to remove %@ with %{public}@", 35, 2, &_mh_execute_header, v77, v100, v78);

        swift_bridgeObjectRelease(v78);
        v88 = v75;
        v58 = v102;
        swift_errorRelease(v88);
      }
    }
  }
  v11 = &a2[OBJC_IVAR____TtC7NewsTag16WidgetAssetStore_keysOfInterest];
  v94 = (char *)(a1 + ((*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80)));
  v91 = a1;
  swift_bridgeObjectRetain(a1);
  *(_QWORD *)&v95 = v11;
  swift_beginAccess(v11, v108, 0, 0);
  v12 = 0;
  v93 = *(_QWORD *)(v8 + 72);
  while (1)
  {
    v13 = *(_QWORD *)v95;
    v14 = v97;
    v15 = sub_1000240AC((uint64_t)&v94[v93 * v12], v97);
    __chkstk_darwin(v15);
    *(&v91 - 2) = v14;
    swift_bridgeObjectRetain(v13);
    v16 = sub_1000219C8((uint64_t)sub_1000240F0, (uint64_t)(&v91 - 4), v13);
    sub_10002410C(v14);
    v17 = *(_QWORD *)(v16 + 16);
    if (v17)
    {
      v98 = 0;
      v99 = v12;
      v18 = sub_10001B520(&qword_1000B99A0);
      v19 = (_QWORD *)swift_allocObject(v18, 16 * v17 + 32, 7);
      v20 = j__malloc_size(v19);
      v21 = v20 - 32;
      if (v20 < 32)
        v21 = v20 - 17;
      v19[2] = v17;
      v19[3] = 2 * (v21 >> 4);
      *(_QWORD *)&v100 = sub_1000708D8((uint64_t)v107, v19 + 4, v17, v16);
      v22 = v107[0];
      swift_retain_n(v16, 2);
      v23 = a2;
      sub_100024148(v22);
      if ((_QWORD)v100 != v17)
      {
LABEL_50:
        __break(1u);
LABEL_51:
        __break(1u);
        goto LABEL_52;
      }
      swift_release(v16);
      v4 = v98;
      v12 = v99;
    }
    else
    {
      v24 = a2;
      v19 = _swiftEmptyArrayStorage;
    }
    v107[0] = (uint64_t)v19;
    v25 = a2;
    sub_100024018(v107, v25);
    if (v4)
      break;
    swift_release(v16);

    v26 = (char *)v107[0];
    v104 = v107[0];
    v27 = *(_QWORD *)(v107[0] + 16);
    v28 = 2;
    if (v27 > 2)
      v28 = *(_QWORD *)(v107[0] + 16);
    v29 = v28 - 2;
    if (v28 != 2)
    {
      if (v27 < v29)
        goto LABEL_51;
      sub_100024150(0, v29);
      v26 = (char *)v104;
      v27 = *(_QWORD *)(v104 + 16);
    }
    if (v27)
    {
      v30 = (uint64_t *)(v26 + 40);
      do
      {
        v31 = *(v30 - 1);
        v32 = *v30;
        swift_bridgeObjectRetain(*v30);
        sub_10001FB84(v107, v31, v32);
        swift_bridgeObjectRelease(v107[1]);
        v30 += 2;
        --v27;
      }
      while (v27);
    }
    ++v12;
    swift_bridgeObjectRelease(v26);
    if (v12 == v96)
    {
      swift_bridgeObjectRelease(v91);
      v10 = v106;
      goto LABEL_21;
    }
  }

  result = swift_release(v107[0]);
  __break(1u);
  return result;
}

BOOL sub_10001F964()
{
  Swift::String v0;
  void *object;
  Swift::Bool v2;

  v0._countAndFlagsBits = sub_10001E85C();
  object = v0._object;
  v2 = String.hasPrefix(_:)(v0);
  swift_bridgeObjectRelease(object);
  return v2;
}

uint64_t sub_10001F9B8(uint64_t a1)
{
  id v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;

  v2 = PrefetchLog();
  v3 = static os_log_type_t.info.getter();
  v4 = sub_10001B520(&qword_1000B9980);
  v5 = swift_allocObject(v4, 72, 7);
  *(_OWORD *)(v5 + 16) = xmmword_10008AC60;
  v11 = 0;
  v12 = 0xE000000000000000;
  v10 = a1;
  v6 = sub_10001B520(&qword_1000B99D8);
  _print_unlocked<A, B>(_:_:)(&v10, &v11, v6, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
  v7 = v11;
  v8 = v12;
  *(_QWORD *)(v5 + 56) = &type metadata for String;
  *(_QWORD *)(v5 + 64) = sub_10001FB34();
  *(_QWORD *)(v5 + 32) = v7;
  *(_QWORD *)(v5 + 40) = v8;
  os_log(_:dso:log:type:_:)("pruning failed with error %{public}@", 36, 2, &_mh_execute_header, v2, v3, v5);

  return swift_bridgeObjectRelease(v5);
}

unint64_t sub_10001FB34()
{
  unint64_t result;

  result = qword_1000B9990;
  if (!qword_1000B9990)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for String, &type metadata for String);
    atomic_store(result, (unint64_t *)&qword_1000B9990);
  }
  return result;
}

uint64_t sub_10001FB78@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;

  return sub_10001E5A8(v1[2], v1[3], v1[4], v1[5], a1);
}

uint64_t sub_10001FB84(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v7;
  Swift::Int v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  BOOL v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  BOOL v21;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v23;
  _QWORD v24[9];

  v7 = *v3;
  Hasher.init(_seed:)(v24, *(_QWORD *)(*v3 + 40));
  swift_bridgeObjectRetain(v7);
  String.hash(into:)(v24, a2, a3);
  v8 = Hasher._finalize()();
  v9 = -1 << *(_BYTE *)(v7 + 32);
  v10 = v8 & ~v9;
  if (((*(_QWORD *)(v7 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) != 0)
  {
    v11 = *(_QWORD *)(v7 + 48);
    v12 = (_QWORD *)(v11 + 16 * v10);
    v13 = v12[1];
    v14 = *v12 == a2 && v13 == a3;
    if (v14 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v12, v13, a2, a3, 0) & 1) != 0)
    {
LABEL_7:
      swift_bridgeObjectRelease(a3);
      swift_bridgeObjectRelease(v7);
      v15 = (uint64_t *)(*(_QWORD *)(*v3 + 48) + 16 * v10);
      v16 = v15[1];
      *a1 = *v15;
      a1[1] = v16;
      swift_bridgeObjectRetain(v16);
      return 0;
    }
    v18 = ~v9;
    while (1)
    {
      v10 = (v10 + 1) & v18;
      if (((*(_QWORD *)(v7 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) == 0)
        break;
      v19 = (_QWORD *)(v11 + 16 * v10);
      v20 = v19[1];
      v21 = *v19 == a2 && v20 == a3;
      if (v21 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v19, v20, a2, a3, 0) & 1) != 0)
        goto LABEL_7;
    }
  }
  swift_bridgeObjectRelease(v7);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
  v24[0] = *v3;
  *v3 = 0x8000000000000000;
  swift_bridgeObjectRetain(a3);
  sub_100020544(a2, a3, v10, isUniquelyReferenced_nonNull_native);
  v23 = *v3;
  *v3 = v24[0];
  swift_bridgeObjectRelease(v23);
  *a1 = a2;
  a1[1] = a3;
  return 1;
}

uint64_t sub_10001FD30(_QWORD *a1, void *a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  Swift::Int v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v28;
  char v29;
  char isUniquelyReferenced_nonNull_native;
  id v31;
  uint64_t v32;
  void *v34;
  id v35;
  _QWORD v36[9];

  v3 = v2;
  v6 = *v2;
  v7 = *(_QWORD *)(*v2 + 40);
  v8 = static String._unconditionallyBridgeFromObjectiveC(_:)(a2);
  v10 = v9;
  Hasher.init(_seed:)(v36, v7);
  swift_bridgeObjectRetain(v6);
  String.hash(into:)(v36, v8, v10);
  v11 = Hasher._finalize()();
  swift_bridgeObjectRelease(v10);
  v12 = -1 << *(_BYTE *)(v6 + 32);
  v13 = v11 & ~v12;
  if (((*(_QWORD *)(v6 + 56 + ((v13 >> 3) & 0xFFFFFFFFFFFFF8)) >> v13) & 1) == 0)
  {
LABEL_15:
    swift_bridgeObjectRelease(v6);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
    v36[0] = *v3;
    *v3 = 0x8000000000000000;
    v31 = a2;
    sub_1000206DC(v31, v13, isUniquelyReferenced_nonNull_native);
    v32 = *v3;
    *v3 = v36[0];
    swift_bridgeObjectRelease(v32);
    *a1 = v31;
    return 1;
  }
  v14 = static String._unconditionallyBridgeFromObjectiveC(_:)(*(_QWORD *)(*(_QWORD *)(v6 + 48) + 8 * v13));
  v16 = v15;
  v17 = static String._unconditionallyBridgeFromObjectiveC(_:)(a2);
  if (v14 == v17 && v16 == v18)
  {
LABEL_16:
    swift_bridgeObjectRelease_n(v16, 2);
  }
  else
  {
    v20 = v18;
    v21 = _stringCompareWithSmolCheck(_:_:expecting:)(v14, v16, v17, v18, 0);
    swift_bridgeObjectRelease(v16);
    swift_bridgeObjectRelease(v20);
    if ((v21 & 1) == 0)
    {
      v22 = ~v12;
      do
      {
        v13 = (v13 + 1) & v22;
        if (((*(_QWORD *)(v6 + 56 + ((v13 >> 3) & 0xFFFFFFFFFFFFF8)) >> v13) & 1) == 0)
          goto LABEL_15;
        v23 = static String._unconditionallyBridgeFromObjectiveC(_:)(*(_QWORD *)(*(_QWORD *)(v6 + 48) + 8 * v13));
        v16 = v24;
        v25 = static String._unconditionallyBridgeFromObjectiveC(_:)(a2);
        if (v23 == v25 && v16 == v26)
          goto LABEL_16;
        v28 = v26;
        v29 = _stringCompareWithSmolCheck(_:_:expecting:)(v23, v16, v25, v26, 0);
        swift_bridgeObjectRelease(v16);
        swift_bridgeObjectRelease(v28);
      }
      while ((v29 & 1) == 0);
    }
  }

  swift_bridgeObjectRelease(v6);
  v34 = *(void **)(*(_QWORD *)(*v3 + 48) + 8 * v13);
  *a1 = v34;
  v35 = v34;
  return 0;
}

Swift::Int sub_10001FF58(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  Swift::Int result;
  int64_t v13;
  unint64_t v14;
  _QWORD *v15;
  unint64_t v16;
  unint64_t v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  char v27;
  unint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  _QWORD *v33;
  _QWORD v34[9];

  v2 = v1;
  v3 = *v1;
  if (*(_QWORD *)(*v1 + 24) <= a1)
    v4 = a1;
  else
    v4 = *(_QWORD *)(*v1 + 24);
  sub_10001B520(&qword_1000B9998);
  v5 = static _SetStorage.resize(original:capacity:move:)(v3, v4, 1);
  v6 = v5;
  if (*(_QWORD *)(v3 + 16))
  {
    v7 = 1 << *(_BYTE *)(v3 + 32);
    v32 = v2;
    v33 = (_QWORD *)(v3 + 56);
    if (v7 < 64)
      v8 = ~(-1 << v7);
    else
      v8 = -1;
    v9 = v8 & *(_QWORD *)(v3 + 56);
    v10 = (unint64_t)(v7 + 63) >> 6;
    v11 = v5 + 56;
    result = swift_retain(v3);
    v13 = 0;
    while (1)
    {
      if (v9)
      {
        v16 = __clz(__rbit64(v9));
        v9 &= v9 - 1;
        v17 = v16 | (v13 << 6);
      }
      else
      {
        v18 = v13 + 1;
        if (__OFADD__(v13, 1))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return result;
        }
        if (v18 >= v10)
          goto LABEL_36;
        v19 = v33[v18];
        ++v13;
        if (!v19)
        {
          v13 = v18 + 1;
          if (v18 + 1 >= v10)
            goto LABEL_36;
          v19 = v33[v13];
          if (!v19)
          {
            v13 = v18 + 2;
            if (v18 + 2 >= v10)
              goto LABEL_36;
            v19 = v33[v13];
            if (!v19)
            {
              v20 = v18 + 3;
              if (v20 >= v10)
              {
LABEL_36:
                swift_release(v3);
                v2 = v32;
                v31 = 1 << *(_BYTE *)(v3 + 32);
                if (v31 > 63)
                  bzero(v33, ((unint64_t)(v31 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v33 = -1 << v31;
                *(_QWORD *)(v3 + 16) = 0;
                break;
              }
              v19 = v33[v20];
              if (!v19)
              {
                while (1)
                {
                  v13 = v20 + 1;
                  if (__OFADD__(v20, 1))
                    goto LABEL_42;
                  if (v13 >= v10)
                    goto LABEL_36;
                  v19 = v33[v13];
                  ++v20;
                  if (v19)
                    goto LABEL_26;
                }
              }
              v13 = v20;
            }
          }
        }
LABEL_26:
        v9 = (v19 - 1) & v19;
        v17 = __clz(__rbit64(v19)) + (v13 << 6);
      }
      v21 = (uint64_t *)(*(_QWORD *)(v3 + 48) + 16 * v17);
      v22 = *v21;
      v23 = v21[1];
      Hasher.init(_seed:)(v34, *(_QWORD *)(v6 + 40));
      String.hash(into:)(v34, v22, v23);
      result = Hasher._finalize()();
      v24 = -1 << *(_BYTE *)(v6 + 32);
      v25 = result & ~v24;
      v26 = v25 >> 6;
      if (((-1 << v25) & ~*(_QWORD *)(v11 + 8 * (v25 >> 6))) != 0)
      {
        v14 = __clz(__rbit64((-1 << v25) & ~*(_QWORD *)(v11 + 8 * (v25 >> 6)))) | v25 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v27 = 0;
        v28 = (unint64_t)(63 - v24) >> 6;
        do
        {
          if (++v26 == v28 && (v27 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }
          v29 = v26 == v28;
          if (v26 == v28)
            v26 = 0;
          v27 |= v29;
          v30 = *(_QWORD *)(v11 + 8 * v26);
        }
        while (v30 == -1);
        v14 = __clz(__rbit64(~v30)) + (v26 << 6);
      }
      *(_QWORD *)(v11 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
      v15 = (_QWORD *)(*(_QWORD *)(v6 + 48) + 16 * v14);
      *v15 = v22;
      v15[1] = v23;
      ++*(_QWORD *)(v6 + 16);
    }
  }
  result = swift_release(v3);
  *v2 = v6;
  return result;
}

uint64_t sub_100020234(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t result;
  int64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  Swift::Int v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  char v28;
  unint64_t v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  int64_t v34;
  _QWORD *v35;
  _QWORD v36[9];

  v2 = v1;
  v3 = *v1;
  if (*(_QWORD *)(*v1 + 24) <= a1)
    v4 = a1;
  else
    v4 = *(_QWORD *)(*v1 + 24);
  sub_10001B520(&qword_1000B99E8);
  v5 = static _SetStorage.resize(original:capacity:move:)(v3, v4, 1);
  v6 = v5;
  if (*(_QWORD *)(v3 + 16))
  {
    v33 = v2;
    v7 = 1 << *(_BYTE *)(v3 + 32);
    v35 = (_QWORD *)(v3 + 56);
    if (v7 < 64)
      v8 = ~(-1 << v7);
    else
      v8 = -1;
    v9 = v8 & *(_QWORD *)(v3 + 56);
    v34 = (unint64_t)(v7 + 63) >> 6;
    v10 = v5 + 56;
    result = swift_retain(v3);
    v12 = 0;
    while (1)
    {
      if (v9)
      {
        v14 = __clz(__rbit64(v9));
        v9 &= v9 - 1;
        v15 = v14 | (v12 << 6);
      }
      else
      {
        v16 = v12 + 1;
        if (__OFADD__(v12, 1))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return result;
        }
        if (v16 >= v34)
          goto LABEL_36;
        v17 = v35[v16];
        ++v12;
        if (!v17)
        {
          v12 = v16 + 1;
          if (v16 + 1 >= v34)
            goto LABEL_36;
          v17 = v35[v12];
          if (!v17)
          {
            v12 = v16 + 2;
            if (v16 + 2 >= v34)
              goto LABEL_36;
            v17 = v35[v12];
            if (!v17)
            {
              v18 = v16 + 3;
              if (v18 >= v34)
              {
LABEL_36:
                swift_release(v3);
                v2 = v33;
                v32 = 1 << *(_BYTE *)(v3 + 32);
                if (v32 > 63)
                  bzero(v35, ((unint64_t)(v32 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v35 = -1 << v32;
                *(_QWORD *)(v3 + 16) = 0;
                break;
              }
              v17 = v35[v18];
              if (!v17)
              {
                while (1)
                {
                  v12 = v18 + 1;
                  if (__OFADD__(v18, 1))
                    goto LABEL_42;
                  if (v12 >= v34)
                    goto LABEL_36;
                  v17 = v35[v12];
                  ++v18;
                  if (v17)
                    goto LABEL_26;
                }
              }
              v12 = v18;
            }
          }
        }
LABEL_26:
        v9 = (v17 - 1) & v17;
        v15 = __clz(__rbit64(v17)) + (v12 << 6);
      }
      v19 = *(_QWORD *)(*(_QWORD *)(v3 + 48) + 8 * v15);
      v20 = *(_QWORD *)(v6 + 40);
      v21 = static String._unconditionallyBridgeFromObjectiveC(_:)(v19);
      v23 = v22;
      Hasher.init(_seed:)(v36, v20);
      String.hash(into:)(v36, v21, v23);
      v24 = Hasher._finalize()();
      result = swift_bridgeObjectRelease(v23);
      v25 = -1 << *(_BYTE *)(v6 + 32);
      v26 = v24 & ~v25;
      v27 = v26 >> 6;
      if (((-1 << v26) & ~*(_QWORD *)(v10 + 8 * (v26 >> 6))) != 0)
      {
        v13 = __clz(__rbit64((-1 << v26) & ~*(_QWORD *)(v10 + 8 * (v26 >> 6)))) | v26 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v28 = 0;
        v29 = (unint64_t)(63 - v25) >> 6;
        do
        {
          if (++v27 == v29 && (v28 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }
          v30 = v27 == v29;
          if (v27 == v29)
            v27 = 0;
          v28 |= v30;
          v31 = *(_QWORD *)(v10 + 8 * v27);
        }
        while (v31 == -1);
        v13 = __clz(__rbit64(~v31)) + (v27 << 6);
      }
      *(_QWORD *)(v10 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v13;
      *(_QWORD *)(*(_QWORD *)(v6 + 48) + 8 * v13) = v19;
      ++*(_QWORD *)(v6 + 16);
    }
  }
  result = swift_release(v3);
  *v2 = v6;
  return result;
}

uint64_t sub_100020544(uint64_t result, uint64_t a2, unint64_t a3, char a4)
{
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  BOOL v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  BOOL v26;
  uint64_t v27;
  _QWORD v28[9];

  v5 = v4;
  v8 = result;
  v9 = *(_QWORD *)(*v4 + 16);
  v10 = *(_QWORD *)(*v4 + 24);
  if (v10 > v9 && (a4 & 1) != 0)
    goto LABEL_22;
  v11 = v9 + 1;
  if ((a4 & 1) != 0)
  {
    sub_10001FF58(v11);
  }
  else
  {
    if (v10 > v9)
    {
      result = (uint64_t)sub_100020908();
      goto LABEL_22;
    }
    sub_100020C60(v11);
  }
  v12 = *v4;
  Hasher.init(_seed:)(v28, *(_QWORD *)(*v4 + 40));
  String.hash(into:)(v28, v8, a2);
  result = Hasher._finalize()();
  v13 = -1 << *(_BYTE *)(v12 + 32);
  a3 = result & ~v13;
  v14 = v12 + 56;
  if (((*(_QWORD *)(v12 + 56 + ((a3 >> 3) & 0xFFFFFFFFFFFFF8)) >> a3) & 1) != 0)
  {
    v15 = *(_QWORD *)(v12 + 48);
    v16 = (_QWORD *)(v15 + 16 * a3);
    v17 = v16[1];
    v18 = *v16 == v8 && v17 == a2;
    if (v18 || (result = _stringCompareWithSmolCheck(_:_:expecting:)(*v16, v17, v8, a2, 0), (result & 1) != 0))
    {
LABEL_21:
      result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
      __break(1u);
    }
    else
    {
      v19 = ~v13;
      while (1)
      {
        a3 = (a3 + 1) & v19;
        if (((*(_QWORD *)(v14 + ((a3 >> 3) & 0xFFFFFFFFFFFFF8)) >> a3) & 1) == 0)
          break;
        v20 = (_QWORD *)(v15 + 16 * a3);
        v21 = v20[1];
        if (*v20 != v8 || v21 != a2)
        {
          result = _stringCompareWithSmolCheck(_:_:expecting:)(*v20, v21, v8, a2, 0);
          if ((result & 1) == 0)
            continue;
        }
        goto LABEL_21;
      }
    }
  }
LABEL_22:
  v23 = *v5;
  *(_QWORD *)(*v5 + 8 * (a3 >> 6) + 56) |= 1 << a3;
  v24 = (uint64_t *)(*(_QWORD *)(v23 + 48) + 16 * a3);
  *v24 = v8;
  v24[1] = a2;
  v25 = *(_QWORD *)(v23 + 16);
  v26 = __OFADD__(v25, 1);
  v27 = v25 + 1;
  if (v26)
    __break(1u);
  else
    *(_QWORD *)(v23 + 16) = v27;
  return result;
}

id sub_1000206DC(id result, unint64_t a2, char a3)
{
  Swift::Int v3;
  uint64_t *v4;
  id v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  Swift::Int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  Swift::Int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  BOOL v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD v36[9];

  v4 = (uint64_t *)v3;
  v6 = result;
  v7 = *(_QWORD *)(*(_QWORD *)v3 + 16);
  v8 = *(_QWORD *)(*(_QWORD *)v3 + 24);
  if (v8 > v7 && (a3 & 1) != 0)
    goto LABEL_22;
  v9 = v7 + 1;
  if ((a3 & 1) != 0)
  {
    sub_100020234(v9);
  }
  else
  {
    if (v8 > v7)
    {
      result = sub_100020AB8();
LABEL_22:
      v31 = *v4;
      *(_QWORD *)(*v4 + 8 * (a2 >> 6) + 56) |= 1 << a2;
      *(_QWORD *)(*(_QWORD *)(v31 + 48) + 8 * a2) = v6;
      v32 = *(_QWORD *)(v31 + 16);
      v33 = __OFADD__(v32, 1);
      v34 = v32 + 1;
      if (!v33)
      {
        *(_QWORD *)(v31 + 16) = v34;
        return result;
      }
      __break(1u);
      goto LABEL_25;
    }
    sub_100020F60(v9);
  }
  v10 = *(_QWORD *)v3;
  v11 = *(_QWORD *)(*(_QWORD *)v3 + 40);
  v12 = static String._unconditionallyBridgeFromObjectiveC(_:)(v6);
  v14 = v13;
  Hasher.init(_seed:)(v36, v11);
  String.hash(into:)(v36, v12, v14);
  v3 = Hasher._finalize()();
  result = (id)swift_bridgeObjectRelease(v14);
  v15 = -1 << *(_BYTE *)(v10 + 32);
  a2 = v3 & ~v15;
  if (((*(_QWORD *)(v10 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) == 0)
    goto LABEL_22;
  v16 = static String._unconditionallyBridgeFromObjectiveC(_:)(*(_QWORD *)(*(_QWORD *)(v10 + 48) + 8 * a2));
  v3 = v17;
  v18 = static String._unconditionallyBridgeFromObjectiveC(_:)(v6);
  if (v16 == v18 && v3 == v19)
  {
LABEL_25:
    swift_bridgeObjectRelease_n(v3, 2);
    goto LABEL_26;
  }
  v21 = v19;
  v22 = _stringCompareWithSmolCheck(_:_:expecting:)(v16, v3, v18, v19, 0);
  swift_bridgeObjectRelease(v3);
  result = (id)swift_bridgeObjectRelease(v21);
  if ((v22 & 1) == 0)
  {
    v23 = ~v15;
    do
    {
      a2 = (a2 + 1) & v23;
      if (((*(_QWORD *)(v10 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) == 0)
        goto LABEL_22;
      v24 = static String._unconditionallyBridgeFromObjectiveC(_:)(*(_QWORD *)(*(_QWORD *)(v10 + 48) + 8 * a2));
      v3 = v25;
      v26 = static String._unconditionallyBridgeFromObjectiveC(_:)(v6);
      if (v24 == v26 && v3 == v27)
        goto LABEL_25;
      v29 = v27;
      v30 = _stringCompareWithSmolCheck(_:_:expecting:)(v24, v3, v26, v27, 0);
      swift_bridgeObjectRelease(v3);
      result = (id)swift_bridgeObjectRelease(v29);
    }
    while ((v30 & 1) == 0);
  }
LABEL_26:
  type metadata accessor for URLResourceKey(0);
  result = (id)ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v35);
  __break(1u);
  return result;
}

void *sub_100020908()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;

  v1 = v0;
  sub_10001B520(&qword_1000B9998);
  v2 = *v0;
  v3 = static _SetStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_28:
    result = (void *)swift_release(v2);
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 56);
  v6 = v2 + 56;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 56);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v20 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v20 >= v13)
      goto LABEL_28;
    v21 = *(_QWORD *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      v9 = v20 + 1;
      if (v20 + 1 >= v13)
        goto LABEL_28;
      v21 = *(_QWORD *)(v6 + 8 * v9);
      if (!v21)
      {
        v9 = v20 + 2;
        if (v20 + 2 >= v13)
          goto LABEL_28;
        v21 = *(_QWORD *)(v6 + 8 * v9);
        if (!v21)
          break;
      }
    }
LABEL_27:
    v12 = (v21 - 1) & v21;
    v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (_QWORD *)(*(_QWORD *)(v2 + 48) + v16);
    v18 = v17[1];
    v19 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    *v19 = *v17;
    v19[1] = v18;
    result = (void *)swift_bridgeObjectRetain(v18);
  }
  v22 = v20 + 3;
  if (v22 >= v13)
    goto LABEL_28;
  v21 = *(_QWORD *)(v6 + 8 * v22);
  if (v21)
  {
    v9 = v22;
    goto LABEL_27;
  }
  while (1)
  {
    v9 = v22 + 1;
    if (__OFADD__(v22, 1))
      break;
    if (v9 >= v13)
      goto LABEL_28;
    v21 = *(_QWORD *)(v6 + 8 * v9);
    ++v22;
    if (v21)
      goto LABEL_27;
  }
LABEL_30:
  __break(1u);
  return result;
}

id sub_100020AB8()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  id result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  void *v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;

  v1 = v0;
  sub_10001B520(&qword_1000B99E8);
  v2 = *v0;
  v3 = static _SetStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_28:
    result = (id)swift_release(v2);
    *v1 = v4;
    return result;
  }
  result = (id)(v3 + 56);
  v6 = v2 + 56;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 56);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v18 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v18 >= v13)
      goto LABEL_28;
    v19 = *(_QWORD *)(v6 + 8 * v18);
    ++v9;
    if (!v19)
    {
      v9 = v18 + 1;
      if (v18 + 1 >= v13)
        goto LABEL_28;
      v19 = *(_QWORD *)(v6 + 8 * v9);
      if (!v19)
      {
        v9 = v18 + 2;
        if (v18 + 2 >= v13)
          goto LABEL_28;
        v19 = *(_QWORD *)(v6 + 8 * v9);
        if (!v19)
          break;
      }
    }
LABEL_27:
    v12 = (v19 - 1) & v19;
    v15 = __clz(__rbit64(v19)) + (v9 << 6);
LABEL_12:
    v16 = 8 * v15;
    v17 = *(void **)(*(_QWORD *)(v2 + 48) + v16);
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + v16) = v17;
    result = v17;
  }
  v20 = v18 + 3;
  if (v20 >= v13)
    goto LABEL_28;
  v19 = *(_QWORD *)(v6 + 8 * v20);
  if (v19)
  {
    v9 = v20;
    goto LABEL_27;
  }
  while (1)
  {
    v9 = v20 + 1;
    if (__OFADD__(v20, 1))
      break;
    if (v9 >= v13)
      goto LABEL_28;
    v19 = *(_QWORD *)(v6 + 8 * v9);
    ++v20;
    if (v19)
      goto LABEL_27;
  }
LABEL_30:
  __break(1u);
  return result;
}

Swift::Int sub_100020C60(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  Swift::Int result;
  int64_t v13;
  unint64_t v14;
  _QWORD *v15;
  unint64_t v16;
  unint64_t v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  char v27;
  unint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t *v31;
  int64_t v32;
  _QWORD v33[9];

  v2 = v1;
  v3 = *v1;
  if (*(_QWORD *)(*v1 + 24) <= a1)
    v4 = a1;
  else
    v4 = *(_QWORD *)(*v1 + 24);
  sub_10001B520(&qword_1000B9998);
  v5 = static _SetStorage.resize(original:capacity:move:)(v3, v4, 0);
  v6 = v5;
  if (!*(_QWORD *)(v3 + 16))
  {
    result = swift_release(v3);
LABEL_38:
    *v2 = v6;
    return result;
  }
  v7 = 1 << *(_BYTE *)(v3 + 32);
  v8 = v3 + 56;
  if (v7 < 64)
    v9 = ~(-1 << v7);
  else
    v9 = -1;
  v10 = v9 & *(_QWORD *)(v3 + 56);
  v31 = v2;
  v32 = (unint64_t)(v7 + 63) >> 6;
  v11 = v5 + 56;
  result = swift_retain(v3);
  v13 = 0;
  while (1)
  {
    if (v10)
    {
      v16 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v17 = v16 | (v13 << 6);
      goto LABEL_27;
    }
    v18 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }
    if (v18 >= v32)
      goto LABEL_36;
    v19 = *(_QWORD *)(v8 + 8 * v18);
    ++v13;
    if (!v19)
    {
      v13 = v18 + 1;
      if (v18 + 1 >= v32)
        goto LABEL_36;
      v19 = *(_QWORD *)(v8 + 8 * v13);
      if (!v19)
      {
        v13 = v18 + 2;
        if (v18 + 2 >= v32)
          goto LABEL_36;
        v19 = *(_QWORD *)(v8 + 8 * v13);
        if (!v19)
          break;
      }
    }
LABEL_26:
    v10 = (v19 - 1) & v19;
    v17 = __clz(__rbit64(v19)) + (v13 << 6);
LABEL_27:
    v21 = (uint64_t *)(*(_QWORD *)(v3 + 48) + 16 * v17);
    v22 = *v21;
    v23 = v21[1];
    Hasher.init(_seed:)(v33, *(_QWORD *)(v6 + 40));
    swift_bridgeObjectRetain(v23);
    String.hash(into:)(v33, v22, v23);
    result = Hasher._finalize()();
    v24 = -1 << *(_BYTE *)(v6 + 32);
    v25 = result & ~v24;
    v26 = v25 >> 6;
    if (((-1 << v25) & ~*(_QWORD *)(v11 + 8 * (v25 >> 6))) != 0)
    {
      v14 = __clz(__rbit64((-1 << v25) & ~*(_QWORD *)(v11 + 8 * (v25 >> 6)))) | v25 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v27 = 0;
      v28 = (unint64_t)(63 - v24) >> 6;
      do
      {
        if (++v26 == v28 && (v27 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }
        v29 = v26 == v28;
        if (v26 == v28)
          v26 = 0;
        v27 |= v29;
        v30 = *(_QWORD *)(v11 + 8 * v26);
      }
      while (v30 == -1);
      v14 = __clz(__rbit64(~v30)) + (v26 << 6);
    }
    *(_QWORD *)(v11 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
    v15 = (_QWORD *)(*(_QWORD *)(v6 + 48) + 16 * v14);
    *v15 = v22;
    v15[1] = v23;
    ++*(_QWORD *)(v6 + 16);
  }
  v20 = v18 + 3;
  if (v20 >= v32)
  {
LABEL_36:
    result = swift_release_n(v3, 2);
    v2 = v31;
    goto LABEL_38;
  }
  v19 = *(_QWORD *)(v8 + 8 * v20);
  if (v19)
  {
    v13 = v20;
    goto LABEL_26;
  }
  while (1)
  {
    v13 = v20 + 1;
    if (__OFADD__(v20, 1))
      break;
    if (v13 >= v32)
      goto LABEL_36;
    v19 = *(_QWORD *)(v8 + 8 * v13);
    ++v20;
    if (v19)
      goto LABEL_26;
  }
LABEL_40:
  __break(1u);
  return result;
}

unint64_t sub_100020F0C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000B99B8;
  if (!qword_1000B99B8)
  {
    v1 = sub_10001B560(&qword_1000B99B0);
    result = swift_getWitnessTable(&protocol conformance descriptor for [A], v1);
    atomic_store(result, (unint64_t *)&qword_1000B99B8);
  }
  return result;
}

Swift::Int sub_100020F58@<X0>(Swift::Int *a1@<X8>)
{
  uint64_t v1;

  return sub_10001E7E0(*(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), a1);
}

uint64_t sub_100020F60(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t result;
  int64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  id v24;
  Swift::Int v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  char v29;
  unint64_t v30;
  BOOL v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  int64_t v35;
  _QWORD v36[9];

  v2 = v1;
  v3 = *v1;
  if (*(_QWORD *)(*v1 + 24) <= a1)
    v4 = a1;
  else
    v4 = *(_QWORD *)(*v1 + 24);
  sub_10001B520(&qword_1000B99E8);
  v5 = static _SetStorage.resize(original:capacity:move:)(v3, v4, 0);
  v6 = v5;
  if (!*(_QWORD *)(v3 + 16))
  {
    result = swift_release(v3);
LABEL_38:
    *v2 = v6;
    return result;
  }
  v7 = 1 << *(_BYTE *)(v3 + 32);
  v33 = v2;
  v34 = v3 + 56;
  if (v7 < 64)
    v8 = ~(-1 << v7);
  else
    v8 = -1;
  v9 = v8 & *(_QWORD *)(v3 + 56);
  v35 = (unint64_t)(v7 + 63) >> 6;
  v10 = v5 + 56;
  result = swift_retain(v3);
  v12 = 0;
  while (1)
  {
    if (v9)
    {
      v14 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      v15 = v14 | (v12 << 6);
      goto LABEL_27;
    }
    v16 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }
    if (v16 >= v35)
      goto LABEL_36;
    v17 = *(_QWORD *)(v34 + 8 * v16);
    ++v12;
    if (!v17)
    {
      v12 = v16 + 1;
      if (v16 + 1 >= v35)
        goto LABEL_36;
      v17 = *(_QWORD *)(v34 + 8 * v12);
      if (!v17)
      {
        v12 = v16 + 2;
        if (v16 + 2 >= v35)
          goto LABEL_36;
        v17 = *(_QWORD *)(v34 + 8 * v12);
        if (!v17)
          break;
      }
    }
LABEL_26:
    v9 = (v17 - 1) & v17;
    v15 = __clz(__rbit64(v17)) + (v12 << 6);
LABEL_27:
    v19 = *(void **)(*(_QWORD *)(v3 + 48) + 8 * v15);
    v20 = *(_QWORD *)(v6 + 40);
    v21 = static String._unconditionallyBridgeFromObjectiveC(_:)(v19);
    v23 = v22;
    Hasher.init(_seed:)(v36, v20);
    v24 = v19;
    String.hash(into:)(v36, v21, v23);
    v25 = Hasher._finalize()();
    result = swift_bridgeObjectRelease(v23);
    v26 = -1 << *(_BYTE *)(v6 + 32);
    v27 = v25 & ~v26;
    v28 = v27 >> 6;
    if (((-1 << v27) & ~*(_QWORD *)(v10 + 8 * (v27 >> 6))) != 0)
    {
      v13 = __clz(__rbit64((-1 << v27) & ~*(_QWORD *)(v10 + 8 * (v27 >> 6)))) | v27 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v29 = 0;
      v30 = (unint64_t)(63 - v26) >> 6;
      do
      {
        if (++v28 == v30 && (v29 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }
        v31 = v28 == v30;
        if (v28 == v30)
          v28 = 0;
        v29 |= v31;
        v32 = *(_QWORD *)(v10 + 8 * v28);
      }
      while (v32 == -1);
      v13 = __clz(__rbit64(~v32)) + (v28 << 6);
    }
    *(_QWORD *)(v10 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v13;
    *(_QWORD *)(*(_QWORD *)(v6 + 48) + 8 * v13) = v24;
    ++*(_QWORD *)(v6 + 16);
  }
  v18 = v16 + 3;
  if (v18 >= v35)
  {
LABEL_36:
    result = swift_release_n(v3, 2);
    v2 = v33;
    goto LABEL_38;
  }
  v17 = *(_QWORD *)(v34 + 8 * v18);
  if (v17)
  {
    v12 = v18;
    goto LABEL_26;
  }
  while (1)
  {
    v12 = v18 + 1;
    if (__OFADD__(v18, 1))
      break;
    if (v12 >= v35)
      goto LABEL_36;
    v17 = *(_QWORD *)(v34 + 8 * v12);
    ++v18;
    if (v17)
      goto LABEL_26;
  }
LABEL_40:
  __break(1u);
  return result;
}

uint64_t sub_10002123C(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_100021274(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_100021258(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_10002157C(a1, a2, a3, (_QWORD *)*v3);
  *v3 = result;
  return result;
}

uint64_t sub_100021274(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_10001B520(&qword_1000B99A0);
    v11 = (char *)swift_allocObject(v10, 16 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 17;
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * (v13 >> 4);
  }
  else
  {
    v11 = (char *)&_swiftEmptyArrayStorage;
  }
  v14 = v11 + 32;
  v15 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v14 >= &v15[16 * v8])
      memmove(v14, v15, 16 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v15 >= &v14[16 * v8] || v14 >= &v15[16 * v8])
  {
    swift_arrayInitWithCopy(v14);
LABEL_30:
    swift_release(a4);
    return (uint64_t)v11;
  }
LABEL_32:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_1000213DC(char a1, int64_t a2, char a3, _QWORD *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  size_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = a4[2];
  if (v7 <= v8)
    v9 = a4[2];
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_10001B520(&qword_1000B99F8);
    v11 = (_QWORD *)swift_allocObject(v10, 40 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    v11[2] = v8;
    v11[3] = 2 * ((uint64_t)(v12 - 32) / 40);
  }
  else
  {
    v11 = _swiftEmptyArrayStorage;
  }
  v13 = (unint64_t)(v11 + 4);
  v14 = (unint64_t)(a4 + 4);
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v13 >= v14 + 40 * v8)
      memmove(v11 + 4, a4 + 4, 40 * v8);
    a4[2] = 0;
    goto LABEL_28;
  }
  if (v14 >= v13 + 40 * v8 || v13 >= v14 + 40 * v8)
  {
    sub_10001B520(&qword_1000B9A00);
    swift_arrayInitWithCopy(v11 + 4);
LABEL_28:
    swift_release(a4);
    return (uint64_t)v11;
  }
LABEL_30:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_10002157C(char a1, int64_t a2, char a3, _QWORD *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  size_t v16;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  char *v24;
  unint64_t v25;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
LABEL_35:
        __break(1u);
        goto LABEL_36;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = a4[2];
  if (v7 <= v8)
    v9 = a4[2];
  else
    v9 = v7;
  if (!v9)
  {
    v15 = &_swiftEmptyArrayStorage;
    goto LABEL_19;
  }
  v10 = sub_10001B520((uint64_t *)&unk_1000B9A10);
  v11 = *(_QWORD *)(type metadata accessor for NewsWidgetInfo(0) - 8);
  v12 = *(_QWORD *)(v11 + 72);
  v13 = *(unsigned __int8 *)(v11 + 80);
  v14 = (v13 + 32) & ~v13;
  v15 = (_QWORD *)swift_allocObject(v10, v14 + v12 * v9, v13 | 7);
  v16 = j__malloc_size(v15);
  if (!v12)
  {
    __break(1u);
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  if (v16 - v14 == 0x8000000000000000 && v12 == -1)
    goto LABEL_34;
  v15[2] = v8;
  v15[3] = 2 * ((uint64_t)(v16 - v14) / v12);
LABEL_19:
  v18 = type metadata accessor for NewsWidgetInfo(0);
  v19 = *(_QWORD *)(v18 - 8);
  v20 = (*(unsigned __int8 *)(v19 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v19 + 80);
  v21 = (char *)v15 + v20;
  v22 = (char *)a4 + v20;
  if ((a1 & 1) != 0)
  {
    if (v15 < a4 || v21 >= &v22[*(_QWORD *)(v19 + 72) * v8])
    {
      swift_arrayInitWithTakeFrontToBack(v21, v22, v8, v18);
    }
    else if (v15 != a4)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    a4[2] = 0;
    goto LABEL_32;
  }
  v23 = *(_QWORD *)(v19 + 72) * v8;
  v24 = &v21[v23];
  v25 = (unint64_t)&v22[v23];
  if (v22 >= v24 || (unint64_t)v21 >= v25)
  {
    swift_arrayInitWithCopy(v21);
LABEL_32:
    swift_release(a4);
    return (uint64_t)v15;
  }
LABEL_36:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

char *sub_10002175C(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_10001B520(&qword_1000B99F0);
    v11 = (char *)swift_allocObject(v10, 16 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 17;
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * (v13 >> 4);
  }
  else
  {
    v11 = (char *)&_swiftEmptyArrayStorage;
  }
  v14 = v11 + 32;
  v15 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v11 != a4 || v14 >= &v15[16 * v8])
      memmove(v14, v15, 16 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v14, v15, 16 * v8);
  }
  swift_bridgeObjectRelease(a4);
  return v11;
}

char *sub_100021854(void **a1, const void **a2, _QWORD *a3)
{
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *result;
  uint64_t v7;
  char v9;

  v3 = (char *)*a2;
  v4 = *a3 - (_QWORD)v3;
  v5 = v4 + 15;
  if (v4 >= 0)
    v5 = *a3 - (_QWORD)v3;
  if (v4 <= -16)
  {
    v9 = 2;
    result = (char *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, v9, 1046, 0);
    __break(1u);
  }
  else
  {
    result = (char *)*a1;
    v7 = v5 >> 4;
    if (result != v3 || result >= &v3[16 * v7])
      return (char *)memmove(result, v3, 16 * v7);
  }
  return result;
}

char *sub_1000218FC(void **a1, const void **a2, _QWORD *a3)
{
  char *v3;
  uint64_t v4;
  char *result;
  uint64_t v6;
  char v7;

  v3 = (char *)*a2;
  v4 = *a3 - (_QWORD)v3;
  if (v4 <= -40)
  {
    v7 = 2;
    result = (char *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, v7, 1046, 0);
    __break(1u);
  }
  else
  {
    result = (char *)*a1;
    v6 = v4 / 40;
    if (result != v3 || result >= &v3[40 * v6])
      return (char *)memmove(result, v3, 40 * v6);
  }
  return result;
}

char *sub_1000219B4(uint64_t a1)
{
  return sub_10002175C(0, *(_QWORD *)(a1 + 16), 0, (char *)a1);
}

Swift::Int sub_1000219C8(uint64_t isStackAllocationSafe, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t (*v5)(_QWORD *);
  char v6;
  unsigned int v7;
  unint64_t v8;
  uint64_t v9;
  size_t v10;
  Swift::Int v11;
  uint64_t v12;
  void *v13;
  uint64_t v15;

  v5 = (uint64_t (*)(_QWORD *))isStackAllocationSafe;
  v6 = *(_BYTE *)(a3 + 32);
  v7 = v6 & 0x3F;
  v8 = (1 << v6) + 63;
  v9 = v8 >> 6;
  v10 = 8 * (v8 >> 6);
  if (v7 <= 0xD
    || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(8 * (v8 >> 6), 8), (isStackAllocationSafe & 1) != 0))
  {
    __chkstk_darwin(isStackAllocationSafe);
    bzero((char *)&v15 - ((v10 + 15) & 0x3FFFFFFFFFFFFFF0), v10);
    v11 = sub_100021B44((Swift::Int)&v15 - ((v10 + 15) & 0x3FFFFFFFFFFFFFF0), v9, a3, v5);
    v12 = swift_release(a3);
    if (v3)
      swift_willThrow(v12);
  }
  else
  {
    v13 = (void *)swift_slowAlloc(v10, -1);
    bzero(v13, v10);
    v11 = sub_100021B44((Swift::Int)v13, v9, a3, v5);
    swift_release(a3);
    swift_slowDealloc(v13, -1, -1);
  }
  return v11;
}

Swift::Int sub_100021B44(Swift::Int result, uint64_t a2, uint64_t a3, uint64_t (*a4)(_QWORD *))
{
  uint64_t v4;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  BOOL v13;
  unint64_t v14;
  int64_t v15;
  _QWORD *v16;
  uint64_t v17;
  char v18;
  unint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD v23[2];
  int64_t v24;

  v20 = (unint64_t *)result;
  v7 = 0;
  v21 = 0;
  v22 = a3 + 56;
  v8 = 1 << *(_BYTE *)(a3 + 32);
  v9 = -1;
  if (v8 < 64)
    v9 = ~(-1 << v8);
  v10 = v9 & *(_QWORD *)(a3 + 56);
  v24 = (unint64_t)(v8 + 63) >> 6;
  while (v10)
  {
    v11 = __clz(__rbit64(v10));
    v10 &= v10 - 1;
    v12 = v11 | (v7 << 6);
LABEL_17:
    v16 = (_QWORD *)(*(_QWORD *)(a3 + 48) + 16 * v12);
    v17 = v16[1];
    v23[0] = *v16;
    v23[1] = v17;
    swift_bridgeObjectRetain(v17);
    v18 = a4(v23);
    result = swift_bridgeObjectRelease(v17);
    if (v4)
      return result;
    if ((v18 & 1) != 0)
    {
      *(unint64_t *)((char *)v20 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
      v13 = __OFADD__(v21++, 1);
      if (v13)
        goto LABEL_30;
    }
  }
  v13 = __OFADD__(v7++, 1);
  if (v13)
  {
    __break(1u);
    goto LABEL_29;
  }
  if (v7 >= v24)
    goto LABEL_26;
  v14 = *(_QWORD *)(v22 + 8 * v7);
  if (v14)
  {
LABEL_16:
    v10 = (v14 - 1) & v14;
    v12 = __clz(__rbit64(v14)) + (v7 << 6);
    goto LABEL_17;
  }
  v15 = v7 + 1;
  if (v7 + 1 >= v24)
    goto LABEL_26;
  v14 = *(_QWORD *)(v22 + 8 * v15);
  if (v14)
    goto LABEL_15;
  v15 = v7 + 2;
  if (v7 + 2 >= v24)
    goto LABEL_26;
  v14 = *(_QWORD *)(v22 + 8 * v15);
  if (v14)
    goto LABEL_15;
  v15 = v7 + 3;
  if (v7 + 3 >= v24)
  {
LABEL_26:
    swift_retain(a3);
    return sub_100021D48(v20, a2, v21, a3);
  }
  v14 = *(_QWORD *)(v22 + 8 * v15);
  if (v14)
  {
LABEL_15:
    v7 = v15;
    goto LABEL_16;
  }
  while (1)
  {
    v7 = v15 + 1;
    if (__OFADD__(v15, 1))
      break;
    if (v7 >= v24)
      goto LABEL_26;
    v14 = *(_QWORD *)(v22 + 8 * v7);
    ++v15;
    if (v14)
      goto LABEL_16;
  }
LABEL_29:
  __break(1u);
LABEL_30:
  __break(1u);
  return result;
}

Swift::Int sub_100021D48(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  Swift::Int result;
  _QWORD *v8;
  unint64_t v9;
  uint64_t v10;
  Swift::Int v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  char v24;
  unint64_t v25;
  BOOL v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v30;
  _QWORD v32[9];

  v4 = a4;
  if (!a3)
  {
    v8 = &_swiftEmptySetSingleton;
LABEL_36:
    swift_release(v4);
    return (Swift::Int)v8;
  }
  v5 = a3;
  if (*(_QWORD *)(a4 + 16) == a3)
    return v4;
  sub_10001B520(&qword_1000B9998);
  result = static _SetStorage.allocate(capacity:)(v5);
  v8 = (_QWORD *)result;
  v30 = a2;
  if (a2 < 1)
    v9 = 0;
  else
    v9 = *a1;
  v10 = 0;
  v11 = result + 56;
  while (1)
  {
    if (v9)
    {
      v12 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      v13 = v12 | (v10 << 6);
      goto LABEL_24;
    }
    v14 = v10 + 1;
    if (__OFADD__(v10, 1))
      goto LABEL_39;
    if (v14 >= v30)
      goto LABEL_36;
    v15 = a1[v14];
    ++v10;
    if (!v15)
    {
      v10 = v14 + 1;
      if (v14 + 1 >= v30)
        goto LABEL_36;
      v15 = a1[v10];
      if (!v15)
      {
        v10 = v14 + 2;
        if (v14 + 2 >= v30)
          goto LABEL_36;
        v15 = a1[v10];
        if (!v15)
          break;
      }
    }
LABEL_23:
    v9 = (v15 - 1) & v15;
    v13 = __clz(__rbit64(v15)) + (v10 << 6);
LABEL_24:
    v17 = (uint64_t *)(*(_QWORD *)(v4 + 48) + 16 * v13);
    v18 = *v17;
    v19 = v17[1];
    Hasher.init(_seed:)(v32, v8[5]);
    swift_bridgeObjectRetain(v19);
    String.hash(into:)(v32, v18, v19);
    result = Hasher._finalize()();
    v20 = -1 << *((_BYTE *)v8 + 32);
    v21 = result & ~v20;
    v22 = v21 >> 6;
    if (((-1 << v21) & ~*(_QWORD *)(v11 + 8 * (v21 >> 6))) != 0)
    {
      v23 = __clz(__rbit64((-1 << v21) & ~*(_QWORD *)(v11 + 8 * (v21 >> 6)))) | v21 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v24 = 0;
      v25 = (unint64_t)(63 - v20) >> 6;
      do
      {
        if (++v22 == v25 && (v24 & 1) != 0)
        {
          __break(1u);
          goto LABEL_38;
        }
        v26 = v22 == v25;
        if (v22 == v25)
          v22 = 0;
        v24 |= v26;
        v27 = *(_QWORD *)(v11 + 8 * v22);
      }
      while (v27 == -1);
      v23 = __clz(__rbit64(~v27)) + (v22 << 6);
    }
    *(_QWORD *)(v11 + ((v23 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v23;
    v28 = (_QWORD *)(v8[6] + 16 * v23);
    *v28 = v18;
    v28[1] = v19;
    ++v8[2];
    if (__OFSUB__(v5--, 1))
    {
LABEL_38:
      __break(1u);
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }
    if (!v5)
      goto LABEL_36;
  }
  v16 = v14 + 3;
  if (v16 >= v30)
    goto LABEL_36;
  v15 = a1[v16];
  if (v15)
  {
    v10 = v16;
    goto LABEL_23;
  }
  while (1)
  {
    v10 = v16 + 1;
    if (__OFADD__(v16, 1))
      break;
    if (v10 >= v30)
      goto LABEL_36;
    v15 = a1[v10];
    ++v16;
    if (v15)
      goto LABEL_23;
  }
LABEL_40:
  __break(1u);
  return result;
}

uint64_t sub_100021FDC(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int64_t v7;
  int64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;

  if (!*(_QWORD *)(*(_QWORD *)v1 + 16))
    return result;
  v2 = result;
  v3 = result + 56;
  v4 = 1 << *(_BYTE *)(result + 32);
  v5 = -1;
  if (v4 < 64)
    v5 = ~(-1 << v4);
  v6 = v5 & *(_QWORD *)(result + 56);
  v7 = (unint64_t)(v4 + 63) >> 6;
  result = swift_bridgeObjectRetain(result);
  v8 = 0;
  while (1)
  {
    if (v6)
    {
      v9 = __clz(__rbit64(v6));
      v6 &= v6 - 1;
      v10 = v9 | (v8 << 6);
      goto LABEL_6;
    }
    v16 = v8 + 1;
    if (__OFADD__(v8, 1))
    {
      __break(1u);
      goto LABEL_27;
    }
    if (v16 >= v7)
      return swift_release(v2);
    v17 = *(_QWORD *)(v3 + 8 * v16);
    ++v8;
    if (!v17)
    {
      v8 = v16 + 1;
      if (v16 + 1 >= v7)
        return swift_release(v2);
      v17 = *(_QWORD *)(v3 + 8 * v8);
      if (!v17)
      {
        v8 = v16 + 2;
        if (v16 + 2 >= v7)
          return swift_release(v2);
        v17 = *(_QWORD *)(v3 + 8 * v8);
        if (!v17)
        {
          v8 = v16 + 3;
          if (v16 + 3 >= v7)
            return swift_release(v2);
          v17 = *(_QWORD *)(v3 + 8 * v8);
          if (!v17)
            break;
        }
      }
    }
LABEL_23:
    v6 = (v17 - 1) & v17;
    v10 = __clz(__rbit64(v17)) + (v8 << 6);
LABEL_6:
    v11 = (uint64_t *)(*(_QWORD *)(v2 + 48) + 16 * v10);
    v12 = *v11;
    v13 = v11[1];
    swift_bridgeObjectRetain(v13);
    sub_1000225D8(v12, v13);
    v15 = v14;
    swift_bridgeObjectRelease(v13);
    result = swift_bridgeObjectRelease(v15);
  }
  v18 = v16 + 4;
  if (v18 >= v7)
    return swift_release(v2);
  v17 = *(_QWORD *)(v3 + 8 * v18);
  if (v17)
  {
    v8 = v18;
    goto LABEL_23;
  }
  while (1)
  {
    v8 = v18 + 1;
    if (__OFADD__(v18, 1))
      break;
    if (v8 >= v7)
      return swift_release(v2);
    v17 = *(_QWORD *)(v3 + 8 * v8);
    ++v18;
    if (v17)
      goto LABEL_23;
  }
LABEL_27:
  __break(1u);
  return result;
}

unint64_t *sub_100022170(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  int64_t v9;
  unint64_t v10;
  unint64_t v11;
  int64_t v12;
  unint64_t v13;
  int64_t v14;
  int64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  Swift::Int v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  BOOL v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  BOOL v29;
  uint64_t isStackAllocationSafe;
  char v31;
  unsigned int v32;
  unint64_t v33;
  uint64_t v34;
  size_t v35;
  unint64_t *v36;
  void *v37;
  uint64_t v39;
  int64_t v40;
  uint64_t v41;
  _QWORD v42[9];
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  int64_t v46;
  unint64_t v47;

  v2 = a2;
  if (*(_QWORD *)(a2 + 16))
  {
    v4 = *(_QWORD *)(a1 + 56);
    v41 = a1 + 56;
    v5 = -1 << *(_BYTE *)(a1 + 32);
    v39 = ~v5;
    if (-v5 < 64)
      v6 = ~(-1 << -(char)v5);
    else
      v6 = -1;
    v7 = v6 & v4;
    v40 = (unint64_t)(63 - v5) >> 6;
    v8 = a2 + 56;
    swift_bridgeObjectRetain(a1);
    v9 = 0;
    while (1)
    {
      if (v7)
      {
        v10 = __clz(__rbit64(v7));
        v7 &= v7 - 1;
        v11 = v10 | (v9 << 6);
      }
      else
      {
        v12 = v9 + 1;
        if (__OFADD__(v9, 1))
        {
          __break(1u);
          goto LABEL_49;
        }
        if (v12 >= v40)
          goto LABEL_47;
        v13 = *(_QWORD *)(v41 + 8 * v12);
        v14 = v9 + 1;
        if (!v13)
        {
          v14 = v9 + 2;
          if (v9 + 2 >= v40)
            goto LABEL_47;
          v13 = *(_QWORD *)(v41 + 8 * v14);
          if (!v13)
          {
            v14 = v9 + 3;
            if (v9 + 3 >= v40)
              goto LABEL_47;
            v13 = *(_QWORD *)(v41 + 8 * v14);
            if (!v13)
            {
              v14 = v9 + 4;
              if (v9 + 4 >= v40)
                goto LABEL_47;
              v13 = *(_QWORD *)(v41 + 8 * v14);
              if (!v13)
              {
                v15 = v9 + 5;
                if (v9 + 5 >= v40)
                {
LABEL_47:
                  sub_100024148(a1);
                  return (unint64_t *)v2;
                }
                v13 = *(_QWORD *)(v41 + 8 * v15);
                if (!v13)
                {
                  while (1)
                  {
                    v14 = v15 + 1;
                    if (__OFADD__(v15, 1))
                      break;
                    if (v14 >= v40)
                      goto LABEL_47;
                    v13 = *(_QWORD *)(v41 + 8 * v14);
                    ++v15;
                    if (v13)
                      goto LABEL_24;
                  }
LABEL_49:
                  __break(1u);
                }
                v14 = v9 + 5;
              }
            }
          }
        }
LABEL_24:
        v7 = (v13 - 1) & v13;
        v11 = __clz(__rbit64(v13)) + (v14 << 6);
        v9 = v14;
      }
      v16 = (uint64_t *)(*(_QWORD *)(a1 + 48) + 16 * v11);
      v18 = *v16;
      v17 = v16[1];
      Hasher.init(_seed:)(v42, *(_QWORD *)(v2 + 40));
      swift_bridgeObjectRetain(v17);
      String.hash(into:)(v42, v18, v17);
      v19 = Hasher._finalize()();
      v20 = -1 << *(_BYTE *)(v2 + 32);
      v21 = v19 & ~v20;
      if (((*(_QWORD *)(v8 + ((v21 >> 3) & 0xFFFFFFFFFFFFF8)) >> v21) & 1) != 0)
        break;
LABEL_6:
      swift_bridgeObjectRelease(v17);
    }
    v22 = *(_QWORD *)(v2 + 48);
    v23 = (_QWORD *)(v22 + 16 * v21);
    v24 = v23[1];
    v25 = *v23 == v18 && v24 == v17;
    if (v25 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v23, v24, v18, v17, 0) & 1) != 0)
    {
      isStackAllocationSafe = swift_bridgeObjectRelease(v17);
      v43 = a1;
      v44 = v41;
      v45 = v39;
      v46 = v9;
      v47 = v7;
    }
    else
    {
      v26 = ~v20;
      do
      {
        v21 = (v21 + 1) & v26;
        if (((*(_QWORD *)(v8 + ((v21 >> 3) & 0xFFFFFFFFFFFFF8)) >> v21) & 1) == 0)
          goto LABEL_6;
        v27 = (_QWORD *)(v22 + 16 * v21);
        v28 = v27[1];
        v29 = *v27 == v18 && v28 == v17;
      }
      while (!v29 && (_stringCompareWithSmolCheck(_:_:expecting:)(*v27, v28, v18, v17, 0) & 1) == 0);
      v43 = a1;
      v44 = v41;
      v45 = v39;
      v46 = v9;
      v47 = v7;
      isStackAllocationSafe = swift_bridgeObjectRelease(v17);
    }
    v31 = *(_BYTE *)(v2 + 32);
    v32 = v31 & 0x3F;
    v33 = (1 << v31) + 63;
    v34 = v33 >> 6;
    v35 = 8 * (v33 >> 6);
    if (v32 < 0xE
      || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(8 * (v33 >> 6), 8), (_DWORD)isStackAllocationSafe))
    {
      __chkstk_darwin(isStackAllocationSafe);
      memcpy((char *)&v39 - ((v35 + 15) & 0x3FFFFFFFFFFFFFF0), (const void *)(v2 + 56), v35);
      v36 = sub_100022764((unint64_t *)((char *)&v39 - ((v35 + 15) & 0x3FFFFFFFFFFFFFF0)), v34, v2, v21, &v43);
      swift_release(v2);
      sub_100024148(v43);
    }
    else
    {
      v37 = (void *)swift_slowAlloc(v35, -1);
      memcpy(v37, (const void *)(v2 + 56), v35);
      v36 = sub_100022764((unint64_t *)v37, v34, v2, v21, &v43);
      swift_release(v2);
      sub_100024148(v43);
      swift_slowDealloc(v37, -1, -1);
    }
    return v36;
  }
  else
  {
    swift_release(a2);
    return (unint64_t *)&_swiftEmptySetSingleton;
  }
}

uint64_t sub_1000225D8(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v5;
  Swift::Int v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  BOOL v12;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  BOOL v20;
  _QWORD v22[9];

  v5 = *v2;
  Hasher.init(_seed:)(v22, *(_QWORD *)(*v2 + 40));
  swift_bridgeObjectRetain(v5);
  String.hash(into:)(v22, a1, a2);
  v6 = Hasher._finalize()();
  v7 = -1 << *(_BYTE *)(v5 + 32);
  v8 = v6 & ~v7;
  if (((*(_QWORD *)(v5 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFF8)) >> v8) & 1) == 0)
  {
LABEL_18:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  v9 = *(_QWORD *)(v5 + 48);
  v10 = (_QWORD *)(v9 + 16 * v8);
  v11 = v10[1];
  v12 = *v10 == a1 && v11 == a2;
  if (!v12 && (_stringCompareWithSmolCheck(_:_:expecting:)(*v10, v11, a1, a2, 0) & 1) == 0)
  {
    v17 = ~v7;
    do
    {
      v8 = (v8 + 1) & v17;
      if (((*(_QWORD *)(v5 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFF8)) >> v8) & 1) == 0)
        goto LABEL_18;
      v18 = (_QWORD *)(v9 + 16 * v8);
      v19 = v18[1];
      v20 = *v18 == a1 && v19 == a2;
    }
    while (!v20 && (_stringCompareWithSmolCheck(_:_:expecting:)(*v18, v19, a1, a2, 0) & 1) == 0);
  }
  swift_bridgeObjectRelease(v5);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v2);
  v14 = *v2;
  v22[0] = *v2;
  *v2 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    sub_100020908();
    v14 = v22[0];
  }
  v15 = *(_QWORD *)(*(_QWORD *)(v14 + 48) + 16 * v8);
  sub_100022A58(v8);
  v16 = *v2;
  *v2 = v22[0];
  swift_bridgeObjectRelease(v16);
  return v15;
}

unint64_t *sub_100022764(unint64_t *result, uint64_t a2, uint64_t a3, unint64_t a4, _QWORD *a5)
{
  uint64_t v7;
  uint64_t v8;
  int64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  int64_t v14;
  int64_t v15;
  uint64_t v16;
  unint64_t v17;
  int64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  Swift::Int v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  BOOL v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t i;
  unint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  BOOL v37;
  int64_t v38;
  uint64_t v40;
  unint64_t *v41;
  _QWORD v42[9];
  uint64_t v43;

  v7 = *(_QWORD *)(a3 + 16);
  v41 = result;
  *(unint64_t *)((char *)result + ((a4 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << a4) - 1;
  v8 = v7 - 1;
  v43 = a3 + 56;
  while (2)
  {
    v40 = v8;
    do
    {
      while (1)
      {
        v9 = a5[3];
        v10 = a5[4];
        if (v10)
        {
          v11 = (v10 - 1) & v10;
          v12 = __clz(__rbit64(v10)) | (v9 << 6);
          goto LABEL_16;
        }
        v13 = v9 + 1;
        if (__OFADD__(v9, 1))
        {
          __break(1u);
          goto LABEL_47;
        }
        v14 = (unint64_t)(a5[2] + 64) >> 6;
        v15 = a5[3];
        if (v13 >= v14)
          goto LABEL_45;
        v16 = a5[1];
        v17 = *(_QWORD *)(v16 + 8 * v13);
        if (!v17)
        {
          v18 = v9 + 2;
          v15 = v9 + 1;
          if (v9 + 2 >= v14)
            goto LABEL_45;
          v17 = *(_QWORD *)(v16 + 8 * v18);
          if (!v17)
          {
            v15 = v9 + 2;
            if (v9 + 3 >= v14)
              goto LABEL_45;
            v17 = *(_QWORD *)(v16 + 8 * (v9 + 3));
            if (v17)
            {
              v13 = v9 + 3;
              goto LABEL_15;
            }
            v18 = v9 + 4;
            v15 = v9 + 3;
            if (v9 + 4 >= v14)
              goto LABEL_45;
            v17 = *(_QWORD *)(v16 + 8 * v18);
            if (!v17)
            {
              v13 = v9 + 5;
              v15 = v9 + 4;
              if (v9 + 5 >= v14)
                goto LABEL_45;
              v17 = *(_QWORD *)(v16 + 8 * v13);
              if (!v17)
              {
                v15 = v14 - 1;
                v38 = v9 + 6;
                while (v14 != v38)
                {
                  v17 = *(_QWORD *)(v16 + 8 * v38++);
                  if (v17)
                  {
                    v13 = v38 - 1;
                    goto LABEL_15;
                  }
                }
LABEL_45:
                a5[3] = v15;
                a5[4] = 0;
                swift_retain(a3);
                return (unint64_t *)sub_100021D48(v41, a2, v40, a3);
              }
              goto LABEL_15;
            }
          }
          v13 = v18;
        }
LABEL_15:
        v11 = (v17 - 1) & v17;
        v12 = __clz(__rbit64(v17)) + (v13 << 6);
        v9 = v13;
LABEL_16:
        v19 = (uint64_t *)(*(_QWORD *)(*a5 + 48) + 16 * v12);
        v21 = *v19;
        v20 = v19[1];
        a5[3] = v9;
        a5[4] = v11;
        Hasher.init(_seed:)(v42, *(_QWORD *)(a3 + 40));
        swift_bridgeObjectRetain(v20);
        String.hash(into:)(v42, v21, v20);
        v22 = Hasher._finalize()();
        v23 = -1 << *(_BYTE *)(a3 + 32);
        v24 = v22 & ~v23;
        v25 = v24 >> 6;
        v26 = 1 << v24;
        if (((1 << v24) & *(_QWORD *)(v43 + 8 * (v24 >> 6))) == 0)
          goto LABEL_3;
        v27 = *(_QWORD *)(a3 + 48);
        v28 = (_QWORD *)(v27 + 16 * v24);
        v29 = v28[1];
        v30 = *v28 == v21 && v29 == v20;
        if (v30 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v28, v29, v21, v20, 0) & 1) != 0)
          break;
        v32 = ~v23;
        for (i = v24 + 1; ; i = v34 + 1)
        {
          v34 = i & v32;
          if (((*(_QWORD *)(v43 + (((i & v32) >> 3) & 0xFFFFFFFFFFFFF8)) >> (i & v32)) & 1) == 0)
            break;
          v35 = (_QWORD *)(v27 + 16 * v34);
          v36 = v35[1];
          v37 = *v35 == v21 && v36 == v20;
          if (v37 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v35, v36, v21, v20, 0) & 1) != 0)
          {
            result = (unint64_t *)swift_bridgeObjectRelease(v20);
            v25 = v34 >> 6;
            v26 = 1 << v34;
            goto LABEL_23;
          }
        }
LABEL_3:
        result = (unint64_t *)swift_bridgeObjectRelease(v20);
      }
      result = (unint64_t *)swift_bridgeObjectRelease(v20);
LABEL_23:
      v31 = v41[v25];
      v41[v25] = v31 & ~v26;
    }
    while ((v26 & v31) == 0);
    v8 = v40 - 1;
    if (__OFSUB__(v40, 1))
    {
LABEL_47:
      __break(1u);
      return result;
    }
    if (v40 != 1)
      continue;
    return (unint64_t *)&_swiftEmptySetSingleton;
  }
}

unint64_t sub_100022A58(unint64_t result)
{
  _QWORD *v1;
  int64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  Swift::Int v13;
  unint64_t v14;
  uint64_t v15;
  _OWORD *v16;
  _OWORD *v17;
  uint64_t v18;
  BOOL v19;
  uint64_t v20;
  _QWORD v21[9];

  v2 = result;
  v3 = *v1;
  v4 = *v1 + 56;
  v5 = -1 << *(_BYTE *)(*v1 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(v4 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    swift_retain(*v1);
    v8 = _HashTable.previousHole(before:)(v2, v4, v7);
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v9 = (v8 + 1) & v7;
      do
      {
        v10 = (uint64_t *)(*(_QWORD *)(v3 + 48) + 16 * v6);
        v11 = *v10;
        v12 = v10[1];
        Hasher.init(_seed:)(v21, *(_QWORD *)(v3 + 40));
        swift_bridgeObjectRetain(v12);
        String.hash(into:)(v21, v11, v12);
        v13 = Hasher._finalize()();
        swift_bridgeObjectRelease(v12);
        v14 = v13 & v7;
        if (v2 >= (uint64_t)v9)
        {
          if (v14 < v9)
            goto LABEL_5;
        }
        else if (v14 >= v9)
        {
          goto LABEL_11;
        }
        if (v2 >= (uint64_t)v14)
        {
LABEL_11:
          v15 = *(_QWORD *)(v3 + 48);
          v16 = (_OWORD *)(v15 + 16 * v2);
          v17 = (_OWORD *)(v15 + 16 * v6);
          if (v2 != v6 || (v2 = v6, v16 >= v17 + 1))
          {
            *v16 = *v17;
            v2 = v6;
          }
        }
LABEL_5:
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    *(_QWORD *)(v4 + (((unint64_t)v2 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << v2) - 1;
    result = swift_release(v3);
  }
  else
  {
    *(_QWORD *)(v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << result) - 1;
  }
  v18 = *(_QWORD *)(v3 + 16);
  v19 = __OFSUB__(v18, 1);
  v20 = v18 - 1;
  if (v19)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(v3 + 16) = v20;
    ++*(_DWORD *)(v3 + 36);
  }
  return result;
}

uint64_t sub_100022C1C(uint64_t a1)
{
  return sub_100021274(0, *(_QWORD *)(a1 + 16), 0, (char *)a1);
}

uint64_t sub_100022C30(_QWORD *a1)
{
  return sub_1000213DC(0, a1[2], 0, a1);
}

uint64_t sub_100022C44(uint64_t a1)
{
  uint64_t v2;
  uint64_t result;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7[2];
  uint64_t v8;

  v2 = *(_QWORD *)(a1 + 16);
  result = Set.init(minimumCapacity:)(v2, &type metadata for String, &protocol witness table for String);
  v8 = result;
  if (v2)
  {
    v4 = (uint64_t *)(a1 + 40);
    do
    {
      v5 = *(v4 - 1);
      v6 = *v4;
      swift_bridgeObjectRetain(*v4);
      sub_10001FB84(v7, v5, v6);
      swift_bridgeObjectRelease(v7[1]);
      v4 += 2;
      --v2;
    }
    while (v2);
    return v8;
  }
  return result;
}

uint64_t sub_100022CD8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  void **v7;
  void *v8;
  id v9;
  uint64_t v10;

  v2 = *(_QWORD *)(a1 + 16);
  type metadata accessor for URLResourceKey(0);
  v4 = v3;
  v5 = sub_10001C96C(&qword_1000B99E0, (uint64_t (*)(uint64_t))type metadata accessor for URLResourceKey, (uint64_t)&unk_10008A9A0);
  result = Set.init(minimumCapacity:)(v2, v4, v5);
  v10 = result;
  if (v2)
  {
    v7 = (void **)(a1 + 32);
    do
    {
      v8 = *v7++;
      sub_10001FD30(&v9, v8);

      --v2;
    }
    while (v2);
    return v10;
  }
  return result;
}

uint64_t sub_100022D78(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_10001B520((uint64_t *)&unk_1000BC550);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_100022DBC()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 16));
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100022DE0()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)(v0 + 16) + 16))();
}

void sub_100022DEC(uint64_t a1, uint64_t a2)
{
  void *v2;
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;

  v5 = PrefetchLog();
  v6 = static os_log_type_t.info.getter();
  os_log(_:dso:log:type:_:)("pruning asset store", 19, 2, &_mh_execute_header, v5, v6, _swiftEmptyArrayStorage);

  v20 = v2;
  v7 = sub_10001B520(&qword_1000B9A08);
  v8 = firstly<A>(closure:)(sub_100022F70, &v19, v7);
  v9 = swift_allocObject(&unk_1000AB838, 24, 7);
  *(_QWORD *)(v9 + 16) = v2;
  v10 = (void *)zalgo.getter(v2);
  v11 = Promise.then<A>(on:closure:)(v10, sub_100022FF4, v9, (char *)&type metadata for () + 8);
  swift_release(v8);
  swift_release(v9);

  v13 = (void *)zalgo.getter(v12);
  v14 = Promise.error(on:closure:)(v13, sub_10001F9B8, 0);
  swift_release(v11);

  v15 = swift_allocObject(&unk_1000AB860, 32, 7);
  *(_QWORD *)(v15 + 16) = a1;
  *(_QWORD *)(v15 + 24) = a2;
  v16 = swift_retain(a2);
  v17 = (void *)zalgo.getter(v16);
  v18 = Promise.always(on:closure:)(v17, sub_100023030, v15);
  swift_release(v18);
  swift_release(v14);
  swift_release(v15);

}

uint64_t sub_100022F70()
{
  uint64_t v0;

  sub_10001D9B4((_QWORD *)(*(_QWORD *)(v0 + 16) + OBJC_IVAR____TtC7NewsTag16WidgetAssetStore_infoService), *(_QWORD *)(*(_QWORD *)(v0 + 16) + OBJC_IVAR____TtC7NewsTag16WidgetAssetStore_infoService + 24));
  type metadata accessor for WidgetCenter(0);
  return sub_100068294();
}

uint64_t sub_100022FD0()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100022FF4(uint64_t *a1)
{
  uint64_t v1;

  return sub_10001EF3C(a1, *(_QWORD *)(v1 + 16));
}

uint64_t sub_10002300C()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100023030()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 16))();
}

uint64_t sub_100023050()
{
  uint64_t v0;

  return sub_10001F088(*(_QWORD *)(v0 + 16), *(char **)(v0 + 24));
}

uint64_t sub_100023058(char *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, void *a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void (*v26)(uint64_t, uint64_t);
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t *v30;
  uint64_t *v31;
  uint64_t *v32;
  uint64_t *v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  void (*v42)(uint64_t, uint64_t);
  uint64_t v43;
  uint64_t v44;
  uint64_t *v45;
  uint64_t result;
  uint64_t v47;
  char *v48;
  uint64_t *v49;
  uint64_t *v50;
  uint64_t *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  id v55;
  uint64_t v56;
  uint64_t *v57;
  uint64_t *v58;
  uint64_t *v59;
  uint64_t *v60;

  v55 = a5;
  v56 = type metadata accessor for Date(0);
  v52 = *(_QWORD *)(v56 - 8);
  v9 = __chkstk_darwin(v56);
  v54 = (uint64_t)&v47 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v53 = (uint64_t)&v47 - v11;
  v12 = (char *)a2 - a1;
  v13 = (char *)a2 - a1 + 15;
  if ((char *)a2 - a1 >= 0)
    v13 = (char *)a2 - a1;
  v14 = v13 >> 4;
  v51 = a3;
  v15 = (char *)a3 - (char *)a2;
  v16 = (char *)a3 - (char *)a2 + 15;
  if ((char *)a3 - (char *)a2 >= 0)
    v16 = (char *)a3 - (char *)a2;
  v17 = v16 >> 4;
  v48 = a1;
  v60 = (uint64_t *)a1;
  v57 = a4;
  v59 = a4;
  if (v14 >= v16 >> 4)
  {
    if (v15 < -15)
      goto LABEL_44;
    v31 = v57;
    if (v57 != a2 || &a2[2 * v17] <= v57)
      memmove(v57, a2, 16 * v17);
    v32 = &v31[2 * v17];
    v58 = v32;
    v60 = a2;
    if (v15 < 16 || v48 >= (char *)a2)
      goto LABEL_43;
    v33 = v51 - 2;
    v34 = a2;
    v35 = v53;
    while (1)
    {
      v51 = a2;
      v49 = v32;
      v50 = v33 + 2;
      v37 = *(v32 - 2);
      v36 = *(v32 - 1);
      v32 -= 2;
      v38 = *(v34 - 2);
      v39 = *(v34 - 1);
      v34 -= 2;
      swift_bridgeObjectRetain(v36);
      swift_bridgeObjectRetain(v39);
      sub_10001E9B4(v37, v36, v35);
      v40 = v54;
      sub_10001E9B4(v38, v39, v54);
      v41 = static Date.< infix(_:_:)(v35, v40);
      v42 = *(void (**)(uint64_t, uint64_t))(v52 + 8);
      v43 = v40;
      v44 = v56;
      v42(v43, v56);
      v42(v35, v44);
      swift_bridgeObjectRelease(v36);
      swift_bridgeObjectRelease(v39);
      if ((v41 & 1) != 0)
      {
        v32 = v49;
        if (v50 != v51 || v33 >= v51)
          *(_OWORD *)v33 = *(_OWORD *)v34;
        v60 = v34;
      }
      else
      {
        v58 = v32;
        if (v50 >= v49 && v33 < v49)
        {
          v45 = v57;
          v34 = v51;
          if (v50 != v49)
            *(_OWORD *)v33 = *(_OWORD *)v32;
          goto LABEL_41;
        }
        *(_OWORD *)v33 = *(_OWORD *)v32;
        v34 = v51;
      }
      v45 = v57;
LABEL_41:
      if (v32 > v45)
      {
        v33 -= 2;
        a2 = v34;
        if (v34 > (uint64_t *)v48)
          continue;
      }
      goto LABEL_43;
    }
  }
  if (v12 >= -15)
  {
    v18 = v57;
    v19 = (uint64_t *)v48;
    if (v57 != (uint64_t *)v48 || &v48[16 * v14] <= (char *)v57)
      memmove(v57, v48, 16 * v14);
    v50 = &v18[2 * v14];
    v58 = v50;
    if (v12 >= 16 && a2 < v51)
    {
      do
      {
        v57 = v18;
        v21 = *a2;
        v20 = a2[1];
        v23 = *v18;
        v22 = v18[1];
        swift_bridgeObjectRetain(v20);
        swift_bridgeObjectRetain(v22);
        v24 = v53;
        sub_10001E9B4(v21, v20, v53);
        v25 = v54;
        sub_10001E9B4(v23, v22, v54);
        LOBYTE(v23) = static Date.< infix(_:_:)(v24, v25);
        v26 = *(void (**)(uint64_t, uint64_t))(v52 + 8);
        v27 = v25;
        v28 = v56;
        v26(v27, v56);
        v26(v24, v28);
        swift_bridgeObjectRelease(v20);
        swift_bridgeObjectRelease(v22);
        if ((v23 & 1) != 0)
        {
          v18 = v57;
          v29 = a2 + 2;
          if (v19 < a2 || v19 >= v29 || v19 != a2)
            *(_OWORD *)v19 = *(_OWORD *)a2;
        }
        else
        {
          v30 = v57;
          if (v19 != v57)
            *(_OWORD *)v19 = *(_OWORD *)v57;
          v18 = v30 + 2;
          v59 = v18;
          v29 = a2;
        }
        v19 += 2;
        v60 = v19;
        if (v18 >= v50)
          break;
        a2 = v29;
      }
      while (v29 < v51);
    }
LABEL_43:
    sub_100021854((void **)&v60, (const void **)&v59, &v58);
    return 1;
  }
LABEL_44:

  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, 2, 1046, 0);
  __break(1u);
  return result;
}

uint64_t sub_10002349C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  void (*v23)(uint64_t, uint64_t);
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;

  v32 = a5;
  v30 = a1;
  v8 = type metadata accessor for Date(0);
  v35 = *(_QWORD *)(v8 - 8);
  v36 = v8;
  v9 = __chkstk_darwin(v8);
  v34 = (uint64_t)&v28 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = __chkstk_darwin(v9);
  v33 = (char *)&v28 - v12;
  v29 = a2;
  if (a3 != a2)
  {
    v37 = *a4;
    v13 = (uint64_t *)(v37 + 16 * a3);
    v14 = (uint64_t)v33;
LABEL_5:
    v15 = (uint64_t *)(v37 + 16 * a3);
    v16 = *v15;
    v17 = v15[1];
    v18 = v30;
    v31 = v13;
    v38 = a3;
    while (1)
    {
      v20 = *(v13 - 2);
      v19 = *(v13 - 1);
      swift_bridgeObjectRetain(v17);
      swift_bridgeObjectRetain(v19);
      sub_10001E9B4(v16, v17, v14);
      v21 = v34;
      sub_10001E9B4(v20, v19, v34);
      v22 = static Date.< infix(_:_:)(v14, v21);
      v23 = *(void (**)(uint64_t, uint64_t))(v35 + 8);
      v24 = v21;
      v25 = v36;
      v23(v24, v36);
      v23(v14, v25);
      swift_bridgeObjectRelease(v17);
      v26 = v19;
      v27 = v38;
      result = swift_bridgeObjectRelease(v26);
      if ((v22 & 1) == 0)
      {
LABEL_4:
        a3 = v27 + 1;
        v13 = v31 + 2;
        if (a3 == v29)
          return result;
        goto LABEL_5;
      }
      if (!v37)
        break;
      v16 = *v13;
      v17 = v13[1];
      *(_OWORD *)v13 = *((_OWORD *)v13 - 1);
      *(v13 - 1) = v17;
      *(v13 - 2) = v16;
      v13 -= 2;
      if (v27 == ++v18)
        goto LABEL_4;
    }
    __break(1u);
  }
  return result;
}

void sub_100023660(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  Swift::Int v8;
  unint64_t v9;
  Swift::Int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t *v15;
  char *v16;
  Swift::Int v17;
  unint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t *v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  uint64_t *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  void (*v62)(uint64_t, uint64_t);
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  char *v66;
  char *v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  char v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  BOOL v80;
  unint64_t v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  char *v87;
  uint64_t v88;
  uint64_t v89;
  BOOL v90;
  uint64_t v91;
  char v92;
  char *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  BOOL v97;
  uint64_t v98;
  uint64_t v99;
  char *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  char *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  unint64_t v108;
  uint64_t *v109;
  uint64_t v110;
  unint64_t v111;
  char *v112;
  char *v113;
  uint64_t *v114;
  id v115;
  uint64_t v116;
  unint64_t v117;
  char *v118;
  char *v119;
  uint64_t v120;
  unint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t *v125;
  uint64_t *v126;
  id v127;
  uint64_t v128;
  char *v129;
  _QWORD *v130;
  id v131;
  uint64_t v132;
  uint64_t *v133;
  uint64_t v134;
  _QWORD *v135;
  Swift::Int v136;
  char *v137;
  Swift::Int v138;
  char *v139;
  uint64_t *v140;
  uint64_t *v141;
  char *v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  char *v149;
  id v150;

  v147 = type metadata accessor for Date(0);
  v144 = *(_QWORD *)(v147 - 8);
  v5 = __chkstk_darwin(v147);
  v146 = (uint64_t)&v132 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v145 = (uint64_t)&v132 - v7;
  v8 = a1[1];
  v9 = (unint64_t)(id)a2;
  v10 = _minimumMergeRunLength(_:)(v8);
  if (v10 >= v8)
  {
    if ((v8 & 0x8000000000000000) == 0)
    {
      a2 = v9;
      if (v8)
      {
        v9 = (unint64_t)(id)v9;
        sub_10002349C(0, v8, 1, a1, v9);

      }
      goto LABEL_117;
    }
LABEL_140:
    __break(1u);
LABEL_141:
    __break(1u);
LABEL_142:
    __break(1u);
LABEL_143:
    __break(1u);
LABEL_144:
    v131 = v150;

    __break(1u);
LABEL_145:
    v9 = (unint64_t)v150;

    __break(1u);
LABEL_146:

    __break(1u);
LABEL_147:

    __break(1u);
LABEL_148:

    _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Can't construct Array with count < 0", 36, 2, "Swift/Array.swift", 17, 2, 936, 0);
    __break(1u);
    return;
  }
  if (v8 >= 0)
    v11 = v8;
  else
    v11 = v8 + 1;
  if (v8 < -1)
    goto LABEL_148;
  v150 = (id)v9;
  v138 = v8;
  v136 = v10;
  v143 = v2;
  v133 = a1;
  if (v8 < 2)
  {
    v14 = (char *)_swiftEmptyArrayStorage;
    v140 = &_swiftEmptyArrayStorage[4];
    v135 = _swiftEmptyArrayStorage;
    if (v8 != 1)
    {
      v18 = _swiftEmptyArrayStorage[2];
      a2 = v9;
LABEL_104:
      if (v18 < 2)
      {
LABEL_115:
        swift_bridgeObjectRelease(v14);
        goto LABEL_116;
      }
      v120 = *v133;
      v148 = *v133;
      while (1)
      {
        v121 = v18 - 2;
        if (v18 < 2)
          goto LABEL_135;
        if (!v120)
          goto LABEL_147;
        v137 = v14;
        v122 = *(_QWORD *)&v14[16 * v121 + 32];
        v123 = *(_QWORD *)&v14[16 * v18 + 24];
        v124 = *(_QWORD *)&v14[16 * v18 + 16];
        v149 = (char *)(v120 + 16 * v122);
        v125 = (uint64_t *)(v120 + 16 * v124);
        v126 = (uint64_t *)(v120 + 16 * v123);
        v127 = (id)a2;
        v128 = v143;
        sub_100023058(v149, v125, v126, v140, v127);
        v143 = v128;
        if (v128)
        {
          v119 = v137;
          goto LABEL_101;
        }

        if (v123 < v122)
          goto LABEL_136;
        v14 = v137;
        if ((swift_isUniquelyReferenced_nonNull_native(v137) & 1) == 0)
          v14 = sub_1000219B4((uint64_t)v14);
        if (v121 >= *((_QWORD *)v14 + 2))
          goto LABEL_137;
        v129 = &v14[16 * v121 + 32];
        *(_QWORD *)v129 = v122;
        *((_QWORD *)v129 + 1) = v123;
        v9 = *((_QWORD *)v14 + 2);
        if (v18 > v9)
          goto LABEL_138;
        memmove(&v14[16 * v18 + 16], &v14[16 * v18 + 32], 16 * (v9 - v18));
        *((_QWORD *)v14 + 2) = v9 - 1;
        v18 = v9 - 1;
        a2 = (uint64_t)v150;
        v120 = v148;
        if (v9 <= 2)
          goto LABEL_115;
      }
    }
  }
  else
  {
    v12 = v11 >> 1;
    v13 = static Array._allocateBufferUninitialized(minimumCapacity:)(v11 >> 1, &type metadata for String);
    *(_QWORD *)(v13 + 16) = v12;
    v135 = (_QWORD *)v13;
    v140 = (uint64_t *)(v13 + 32);
  }
  v15 = 0;
  v16 = (char *)*a1;
  v134 = *a1 + 24;
  v14 = (char *)_swiftEmptyArrayStorage;
  v17 = v138;
  a2 = v9;
  v149 = v16;
  while (1)
  {
    v19 = v15;
    v20 = (uint64_t)v15 + 1;
    v141 = v19;
    if (v20 >= v17)
    {
      v30 = (char *)v17;
      v148 = v20;
    }
    else
    {
      v137 = v14;
      v21 = (uint64_t *)&v16[16 * v20];
      v22 = *v21;
      v23 = v21[1];
      v24 = (uint64_t *)&v16[16 * (_QWORD)v19];
      v25 = *v24;
      v26 = v24[1];
      swift_bridgeObjectRetain(v23);
      swift_bridgeObjectRetain(v26);
      v27 = v145;
      sub_10001E9B4(v22, v23, v145);
      v28 = v146;
      v29 = v25;
      v30 = (char *)v138;
      sub_10001E9B4(v29, v26, v146);
      LODWORD(v142) = static Date.< infix(_:_:)(v27, v28);
      v9 = *(_QWORD *)(v144 + 8);
      v31 = v28;
      v32 = v147;
      ((void (*)(uint64_t, uint64_t))v9)(v31, v147);
      ((void (*)(uint64_t, uint64_t))v9)(v27, v32);
      swift_bridgeObjectRelease(v23);
      swift_bridgeObjectRelease(v26);
      v33 = (uint64_t)v19 + 2;
      if ((uint64_t)((char *)v19 + 2) < (uint64_t)v30)
      {
        v34 = (uint64_t *)(v134 + 16 * (_QWORD)v19);
        v35 = v34;
        while (1)
        {
          v36 = v35[2];
          v35 += 2;
          v38 = *(v34 - 1);
          v37 = *v34;
          v39 = v34[1];
          swift_bridgeObjectRetain(v36);
          swift_bridgeObjectRetain(v37);
          v40 = v145;
          sub_10001E9B4(v39, v36, v145);
          v41 = v146;
          sub_10001E9B4(v38, v37, v146);
          LODWORD(v38) = static Date.< infix(_:_:)(v40, v41);
          v42 = v41;
          v43 = v147;
          ((void (*)(uint64_t, uint64_t))v9)(v42, v147);
          ((void (*)(uint64_t, uint64_t))v9)(v40, v43);
          swift_bridgeObjectRelease(v36);
          swift_bridgeObjectRelease(v37);
          if (((v142 ^ v38) & 1) != 0)
            break;
          ++v33;
          v34 = v35;
          v30 = (char *)v138;
          if (v138 == v33)
          {
            v33 = v138;
            goto LABEL_24;
          }
        }
        v30 = (char *)v138;
LABEL_24:
        v19 = v141;
      }
      v14 = v137;
      v16 = v149;
      v148 = v33;
      if ((v142 & 1) != 0)
      {
        a2 = (uint64_t)v150;
        if (v33 < (uint64_t)v19)
          goto LABEL_141;
        if ((uint64_t)v19 < v33)
        {
          v44 = 16 * v33;
          v45 = 16 * (_QWORD)v19;
          v46 = v19;
          do
          {
            if (v46 != (uint64_t *)--v33)
            {
              if (!v16)
                goto LABEL_146;
              v47 = &v16[v44];
              v48 = *(_QWORD *)&v16[v45];
              v49 = *(_QWORD *)&v16[v45 + 8];
              *(_OWORD *)&v16[v45] = *(_OWORD *)&v16[v44 - 16];
              *((_QWORD *)v47 - 2) = v48;
              *((_QWORD *)v47 - 1) = v49;
            }
            v46 = (uint64_t *)((char *)v46 + 1);
            v44 -= 16;
            v45 += 16;
          }
          while ((uint64_t)v46 < v33);
        }
      }
      else
      {
        a2 = (uint64_t)v150;
      }
    }
    if (v148 < (uint64_t)v30)
    {
      if (__OFSUB__(v148, v19))
        goto LABEL_139;
      if (v148 - (uint64_t)v19 < v136)
      {
        v50 = (char *)v19 + v136;
        if (__OFADD__(v19, v136))
          goto LABEL_142;
        if ((uint64_t)v50 >= (uint64_t)v30)
          v50 = v30;
        if ((uint64_t)v50 < (uint64_t)v19)
          goto LABEL_143;
        v51 = v148;
        if ((char *)v148 != v50)
        {
          v137 = v14;
          v52 = &v16[16 * v148];
          v139 = v50;
          do
          {
            v54 = (uint64_t *)&v16[16 * v51];
            v55 = *v54;
            v56 = v54[1];
            v57 = v19;
            v142 = v52;
            v148 = v51;
            while (1)
            {
              v58 = *((_QWORD *)v52 - 2);
              v59 = *((_QWORD *)v52 - 1);
              swift_bridgeObjectRetain(v56);
              swift_bridgeObjectRetain(v59);
              v60 = v145;
              sub_10001E9B4(v55, v56, v145);
              v61 = v146;
              sub_10001E9B4(v58, v59, v146);
              a2 = static Date.< infix(_:_:)(v60, v61);
              v62 = *(void (**)(uint64_t, uint64_t))(v144 + 8);
              v63 = v61;
              v64 = v147;
              v62(v63, v147);
              v62(v60, v64);
              swift_bridgeObjectRelease(v56);
              swift_bridgeObjectRelease(v59);
              if ((a2 & 1) == 0)
                break;
              v16 = v149;
              if (!v149)
                goto LABEL_144;
              v55 = *(_QWORD *)v52;
              v56 = *((_QWORD *)v52 + 1);
              *(_OWORD *)v52 = *((_OWORD *)v52 - 1);
              *((_QWORD *)v52 - 1) = v56;
              *((_QWORD *)v52 - 2) = v55;
              v52 -= 16;
              v57 = (uint64_t *)((char *)v57 + 1);
              v53 = v148;
              if ((uint64_t *)v148 == v57)
                goto LABEL_45;
            }
            v53 = v148;
            v16 = v149;
LABEL_45:
            v51 = v53 + 1;
            v19 = v141;
            v52 = v142 + 16;
          }
          while ((char *)v51 != v139);
          v148 = (uint64_t)v139;
          v14 = v137;
          a2 = (uint64_t)v150;
        }
      }
    }
    if (v148 < (uint64_t)v19)
    {
LABEL_134:
      __break(1u);
LABEL_135:
      __break(1u);
LABEL_136:
      __break(1u);
LABEL_137:
      __break(1u);
LABEL_138:
      __break(1u);
LABEL_139:
      __break(1u);
      goto LABEL_140;
    }
    if ((swift_isUniquelyReferenced_nonNull_native(v14) & 1) == 0)
      v14 = sub_10002175C(0, *((_QWORD *)v14 + 2) + 1, 1, v14);
    v9 = *((_QWORD *)v14 + 2);
    v65 = *((_QWORD *)v14 + 3);
    v18 = v9 + 1;
    v16 = v149;
    if (v9 >= v65 >> 1)
    {
      v118 = sub_10002175C((char *)(v65 > 1), v9 + 1, 1, v14);
      v16 = v149;
      v14 = v118;
    }
    *((_QWORD *)v14 + 2) = v18;
    v66 = v14 + 32;
    v67 = &v14[16 * v9 + 32];
    v68 = v148;
    *(_QWORD *)v67 = v19;
    *((_QWORD *)v67 + 1) = v68;
    if (v9)
      break;
    v18 = 1;
LABEL_15:
    v17 = v138;
    v15 = (uint64_t *)v148;
    if (v148 >= v138)
      goto LABEL_104;
  }
  v139 = v14 + 32;
  while (1)
  {
    v69 = v18 - 1;
    if (v18 >= 4)
    {
      v74 = &v66[16 * v18];
      v75 = *((_QWORD *)v74 - 8);
      v76 = *((_QWORD *)v74 - 7);
      v80 = __OFSUB__(v76, v75);
      v77 = v76 - v75;
      if (v80)
        goto LABEL_123;
      v79 = *((_QWORD *)v74 - 6);
      v78 = *((_QWORD *)v74 - 5);
      v80 = __OFSUB__(v78, v79);
      v72 = v78 - v79;
      v73 = v80;
      if (v80)
        goto LABEL_124;
      v81 = v18 - 2;
      v82 = &v66[16 * v18 - 32];
      v84 = *(_QWORD *)v82;
      v83 = *((_QWORD *)v82 + 1);
      v80 = __OFSUB__(v83, v84);
      v85 = v83 - v84;
      if (v80)
        goto LABEL_126;
      v80 = __OFADD__(v72, v85);
      v86 = v72 + v85;
      if (v80)
        goto LABEL_129;
      if (v86 >= v77)
      {
        v104 = &v66[16 * v69];
        v106 = *(_QWORD *)v104;
        v105 = *((_QWORD *)v104 + 1);
        v80 = __OFSUB__(v105, v106);
        v107 = v105 - v106;
        if (v80)
          goto LABEL_133;
        v97 = v72 < v107;
        goto LABEL_90;
      }
    }
    else
    {
      if (v18 != 3)
      {
        v98 = *((_QWORD *)v14 + 4);
        v99 = *((_QWORD *)v14 + 5);
        v80 = __OFSUB__(v99, v98);
        v91 = v99 - v98;
        v92 = v80;
        goto LABEL_84;
      }
      v71 = *((_QWORD *)v14 + 4);
      v70 = *((_QWORD *)v14 + 5);
      v80 = __OFSUB__(v70, v71);
      v72 = v70 - v71;
      v73 = v80;
    }
    if ((v73 & 1) != 0)
      goto LABEL_125;
    v81 = v18 - 2;
    v87 = &v66[16 * v18 - 32];
    v89 = *(_QWORD *)v87;
    v88 = *((_QWORD *)v87 + 1);
    v90 = __OFSUB__(v88, v89);
    v91 = v88 - v89;
    v92 = v90;
    if (v90)
      goto LABEL_128;
    v93 = &v66[16 * v69];
    v95 = *(_QWORD *)v93;
    v94 = *((_QWORD *)v93 + 1);
    v80 = __OFSUB__(v94, v95);
    v96 = v94 - v95;
    if (v80)
      goto LABEL_131;
    if (__OFADD__(v91, v96))
      goto LABEL_132;
    if (v91 + v96 >= v72)
    {
      v97 = v72 < v96;
LABEL_90:
      if (v97)
        v69 = v81;
      goto LABEL_92;
    }
LABEL_84:
    if ((v92 & 1) != 0)
      goto LABEL_127;
    v100 = &v66[16 * v69];
    v102 = *(_QWORD *)v100;
    v101 = *((_QWORD *)v100 + 1);
    v80 = __OFSUB__(v101, v102);
    v103 = v101 - v102;
    if (v80)
      goto LABEL_130;
    if (v103 < v91)
      goto LABEL_15;
LABEL_92:
    v108 = v69 - 1;
    if (v69 - 1 >= v18)
    {
      __break(1u);
LABEL_120:
      __break(1u);
LABEL_121:
      __break(1u);
LABEL_122:
      __break(1u);
LABEL_123:
      __break(1u);
LABEL_124:
      __break(1u);
LABEL_125:
      __break(1u);
LABEL_126:
      __break(1u);
LABEL_127:
      __break(1u);
LABEL_128:
      __break(1u);
LABEL_129:
      __break(1u);
LABEL_130:
      __break(1u);
LABEL_131:
      __break(1u);
LABEL_132:
      __break(1u);
LABEL_133:
      __break(1u);
      goto LABEL_134;
    }
    if (!v16)
      goto LABEL_145;
    v109 = (uint64_t *)&v66[16 * v108];
    v110 = *v109;
    v111 = v69;
    v112 = &v66[16 * v69];
    a2 = *((_QWORD *)v112 + 1);
    v113 = &v16[16 * *v109];
    v141 = (uint64_t *)&v16[16 * *(_QWORD *)v112];
    v142 = v113;
    v114 = (uint64_t *)&v16[16 * a2];
    v115 = v150;
    v116 = v143;
    sub_100023058(v142, v141, v114, v140, v115);
    v143 = v116;
    if (v116)
      break;

    if (a2 < v110)
      goto LABEL_120;
    if (v111 > *((_QWORD *)v14 + 2))
      goto LABEL_121;
    v117 = v111;
    *v109 = v110;
    v66 = v139;
    *(_QWORD *)&v139[16 * v108 + 8] = a2;
    v9 = *((_QWORD *)v14 + 2);
    if (v117 >= v9)
      goto LABEL_122;
    v18 = v9 - 1;
    memmove(v112, v112 + 16, 16 * (v9 - 1 - v117));
    *((_QWORD *)v14 + 2) = v9 - 1;
    a2 = (uint64_t)v150;
    v16 = v149;
    if (v9 <= 2)
      goto LABEL_15;
  }
  v119 = v14;
LABEL_101:
  swift_bridgeObjectRelease(v119);
  a2 = (uint64_t)v150;

LABEL_116:
  v130 = v135;
  v135[2] = 0;

  swift_bridgeObjectRelease(v130);
LABEL_117:

}

void sub_100024018(uint64_t *a1, void *a2)
{
  uint64_t v3;
  id v4;
  uint64_t v5;
  id v6;
  uint64_t v7[2];

  v3 = *a1;
  v4 = a2;
  if ((swift_isUniquelyReferenced_nonNull_native(v3) & 1) == 0)
    v3 = sub_100022C1C(v3);
  v5 = *(_QWORD *)(v3 + 16);
  v7[0] = v3 + 32;
  v7[1] = v5;
  v6 = v4;
  sub_100023660(v7, (uint64_t)v6);

  *a1 = v3;
}

uint64_t sub_1000240AC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for NewsWidgetInfo(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

BOOL sub_1000240F0()
{
  return sub_10001F964();
}

uint64_t sub_10002410C(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for NewsWidgetInfo(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_100024148(uint64_t a1)
{
  return swift_release(a1 & 0x7FFFFFFFFFFFFFFFLL);
}

void *sub_100024150(uint64_t a1, int64_t a2)
{
  _QWORD *v2;
  _QWORD *v4;
  int64_t v5;
  uint64_t v7;
  uint64_t v8;
  int64_t v9;
  _QWORD *isUniquelyReferenced_nonNull_native;
  int64_t v11;
  void *result;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char v19;

  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_22;
  }
  v4 = (_QWORD *)*v2;
  v5 = *(_QWORD *)(*v2 + 16);
  if (v5 < a2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v7 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  v8 = a1 - a2;
  if (__OFSUB__(0, v7))
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  v9 = v5 - v7;
  if (__OFADD__(v5, v8))
  {
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  isUniquelyReferenced_nonNull_native = (_QWORD *)swift_isUniquelyReferenced_nonNull_native(*v2);
  if (!(_DWORD)isUniquelyReferenced_nonNull_native || v9 > v4[3] >> 1)
  {
    if (v5 <= v9)
      v11 = v5 + v8;
    else
      v11 = v5;
    v4 = sub_10005DD58(isUniquelyReferenced_nonNull_native, v11, 1, v4);
  }
  result = (void *)swift_arrayDestroy(&v4[2 * a1 + 4], v7, &type metadata for String);
  if (!v7)
    goto LABEL_20;
  v13 = v4[2];
  v14 = __OFSUB__(v13, a2);
  v15 = v13 - a2;
  if (v14)
    goto LABEL_26;
  if ((v15 & 0x8000000000000000) == 0)
  {
    v16 = (char *)&v4[2 * a2 + 4];
    if (a1 != a2 || &v4[2 * a1 + 4] >= (_QWORD *)&v16[16 * v15])
      result = memmove(&v4[2 * a1 + 4], v16, 16 * v15);
    v17 = v4[2];
    v14 = __OFADD__(v17, v8);
    v18 = v17 - v7;
    if (!v14)
    {
      v4[2] = v18;
LABEL_20:
      *v2 = v4;
      return result;
    }
    goto LABEL_27;
  }
LABEL_28:
  v19 = 2;
  result = (void *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, v19, 1046, 0);
  __break(1u);
  return result;
}

BOOL sub_1000242B8()
{
  return sub_1000240F0();
}

char *sub_1000242D0(char *a1, uint64_t a2, int *a3)
{
  int v5;
  int *v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  char *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  const void *v35;
  uint64_t v36;
  uint64_t v37;
  unsigned int (*v38)(const void *, uint64_t, uint64_t);
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  void *v43;
  void *v44;
  id v45;
  id v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  void *v50;
  uint64_t v51;
  uint64_t v52;
  int *v53;
  uint64_t v54;
  const void *v55;
  uint64_t v56;
  uint64_t v57;
  unsigned int (*v58)(const void *, uint64_t, uint64_t);
  id v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  _QWORD *v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  _QWORD *v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  uint64_t v73;
  int *v74;
  uint64_t v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  void (*v79)(char *, uint64_t, uint64_t);
  uint64_t v80;
  char *v81;
  uint64_t v82;
  uint64_t v83;
  int *v85;
  char *v86;
  uint64_t v87;
  uint64_t v88;
  int *v89;
  char *__dst;
  char *__dsta;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v20 = *(_QWORD *)a2;
    *(_QWORD *)a1 = *(_QWORD *)a2;
    v21 = (char *)(v20 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v20);
  }
  else
  {
    v6 = a3;
    v7 = *(_QWORD *)a2;
    v8 = *(_BYTE *)(a2 + 8);
    sub_100024758(*(_QWORD *)a2, v8);
    *(_QWORD *)a1 = v7;
    a1[8] = v8;
    v9 = *(_QWORD *)(a2 + 16);
    v10 = *(_QWORD *)(a2 + 24);
    v11 = *(_QWORD *)(a2 + 32);
    v12 = *(_QWORD *)(a2 + 40);
    v13 = *(_BYTE *)(a2 + 48);
    sub_100024764(v9, v10, v11, v12, v13);
    *((_QWORD *)a1 + 2) = v9;
    *((_QWORD *)a1 + 3) = v10;
    *((_QWORD *)a1 + 4) = v11;
    *((_QWORD *)a1 + 5) = v12;
    a1[48] = v13;
    v14 = v6[6];
    v15 = &a1[v14];
    v16 = (uint64_t *)(a2 + v14);
    v17 = sub_10001B520(&qword_1000B9A20);
    if (swift_getEnumCaseMultiPayload(v16, v17) == 1)
    {
      v18 = type metadata accessor for WidgetRenderingMode(0);
      (*(void (**)(char *, uint64_t *, uint64_t))(*(_QWORD *)(v18 - 8) + 16))(v15, v16, v18);
      v19 = 1;
    }
    else
    {
      v22 = *v16;
      *(_QWORD *)v15 = *v16;
      swift_retain(v22);
      v19 = 0;
    }
    swift_storeEnumTagMultiPayload(v15, v17, v19);
    v23 = v6[7];
    v24 = &a1[v23];
    v25 = a2 + v23;
    v26 = type metadata accessor for Item(0);
    v89 = v6;
    if (swift_getEnumCaseMultiPayload(v25, v26) == 1)
    {
      v27 = *(_QWORD *)v25;
      v28 = *(_QWORD *)(v25 + 8);
      v29 = *(_BYTE *)(v25 + 16);
      sub_100024770(*(_QWORD *)v25, v28, v29);
      *(_QWORD *)v24 = v27;
      *((_QWORD *)v24 + 1) = v28;
      v24[16] = v29;
      v30 = *(_QWORD *)(v25 + 24);
      *((_QWORD *)v24 + 3) = v30;
      swift_bridgeObjectRetain(v30);
      v31 = 1;
    }
    else
    {
      v87 = v26;
      v33 = *(_QWORD *)v25;
      v32 = *(_QWORD *)(v25 + 8);
      *(_QWORD *)v24 = *(_QWORD *)v25;
      *((_QWORD *)v24 + 1) = v32;
      v85 = (int *)type metadata accessor for Item.Headline(0);
      v34 = v85[6];
      __dst = &v24[v34];
      v35 = (const void *)(v25 + v34);
      v36 = type metadata accessor for URL(0);
      v37 = *(_QWORD *)(v36 - 8);
      v38 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v37 + 48);
      swift_unknownObjectRetain(v33);
      swift_retain(v32);
      if (v38(v35, 1, v36))
      {
        v39 = sub_10001B520(&qword_1000B93A0);
        memcpy(__dst, v35, *(_QWORD *)(*(_QWORD *)(v39 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, const void *, uint64_t))(v37 + 16))(__dst, v35, v36);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v37 + 56))(__dst, 0, 1, v36);
      }
      v26 = v87;
      v40 = v85[7];
      v41 = &v24[v40];
      v42 = v25 + v40;
      v43 = *(void **)(v42 + 8);
      if (v43)
      {
        v44 = *(void **)v42;
        *(_QWORD *)v41 = v44;
        *((_QWORD *)v41 + 1) = v43;
        v45 = v44;
        v46 = v43;
        v31 = 0;
      }
      else
      {
        v31 = 0;
        *(_OWORD *)v41 = *(_OWORD *)v42;
      }
      v6 = v89;
    }
    swift_storeEnumTagMultiPayload(v24, v26, v31);
    v47 = v6[8];
    __dsta = a1;
    v48 = &a1[v47];
    v88 = a2;
    v49 = a2 + v47;
    v50 = *(void **)(a2 + v47);
    v51 = *(_QWORD *)(v49 + 8);
    *(_QWORD *)v48 = v50;
    *((_QWORD *)v48 + 1) = v51;
    v52 = *(_QWORD *)(v49 + 16);
    *((_QWORD *)v48 + 2) = v52;
    v48[24] = *(_BYTE *)(v49 + 24);
    v53 = (int *)type metadata accessor for TodayContent(0);
    v54 = v53[8];
    v86 = &v48[v54];
    v55 = (const void *)(v49 + v54);
    v56 = type metadata accessor for URL(0);
    v57 = *(_QWORD *)(v56 - 8);
    v58 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v57 + 48);
    v59 = v50;
    swift_bridgeObjectRetain(v51);
    swift_unknownObjectRetain(v52);
    if (v58(v55, 1, v56))
    {
      v60 = sub_10001B520(&qword_1000B93A0);
      memcpy(v86, v55, *(_QWORD *)(*(_QWORD *)(v60 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, const void *, uint64_t))(v57 + 16))(v86, v55, v56);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v57 + 56))(v86, 0, 1, v56);
    }
    v61 = v53[9];
    v62 = *(_QWORD *)(v49 + v61);
    *(_QWORD *)&v48[v61] = v62;
    v63 = v53[10];
    v64 = &v48[v63];
    v65 = (_QWORD *)(v49 + v63);
    v66 = v65[1];
    *(_QWORD *)v64 = *v65;
    *((_QWORD *)v64 + 1) = v66;
    v67 = v53[11];
    v68 = &v48[v67];
    v69 = (_QWORD *)(v49 + v67);
    v70 = v69[1];
    *(_QWORD *)v68 = *v69;
    *((_QWORD *)v68 + 1) = v70;
    v71 = v89[9];
    v72 = &__dsta[v71];
    v73 = v88 + v71;
    *(_OWORD *)&__dsta[v71] = *(_OWORD *)(v88 + v71);
    v74 = (int *)type metadata accessor for LayoutContext(0);
    v75 = v74[6];
    v76 = &v72[v75];
    v77 = v73 + v75;
    v78 = type metadata accessor for InternalWidgetFamily(0);
    v79 = *(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v78 - 8) + 16);
    swift_retain(v62);
    swift_bridgeObjectRetain(v66);
    swift_bridgeObjectRetain(v70);
    v79(v76, v77, v78);
    v21 = __dsta;
    *(_OWORD *)&v72[v74[7]] = *(_OWORD *)(v73 + v74[7]);
    v80 = v74[8];
    v81 = &v72[v80];
    v82 = v73 + v80;
    v83 = type metadata accessor for ContentSizeCategory(0);
    (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v83 - 8) + 16))(v81, v82, v83);
    *(_QWORD *)&v72[v74[9]] = *(_QWORD *)(v73 + v74[9]);
    *(_QWORD *)&v72[v74[10]] = *(_QWORD *)(v73 + v74[10]);
    v72[v74[11]] = *(_BYTE *)(v73 + v74[11]);
    v72[v74[12]] = *(_BYTE *)(v73 + v74[12]);
  }
  return v21;
}

uint64_t sub_100024758(uint64_t result, char a2)
{
  if ((a2 & 1) == 0)
    return swift_retain(result);
  return result;
}

uint64_t sub_100024764(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  if ((a5 & 1) == 0)
    return swift_retain(result);
  return result;
}

uint64_t sub_100024770(uint64_t a1, uint64_t a2, char a3)
{
  if ((a3 & 1) != 0)
    return swift_retain(a1);
  else
    return swift_bridgeObjectRetain(a2);
}

uint64_t sub_100024780(uint64_t a1, int *a2)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  id *v13;
  uint64_t v14;
  int *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  sub_10002C790(*(_QWORD *)a1, *(_BYTE *)(a1 + 8));
  sub_1000249CC(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_BYTE *)(a1 + 48));
  v4 = (_QWORD *)(a1 + a2[6]);
  v5 = sub_10001B520(&qword_1000B9A20);
  if (swift_getEnumCaseMultiPayload(v4, v5) == 1)
  {
    v6 = type metadata accessor for WidgetRenderingMode(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v4, v6);
  }
  else
  {
    swift_release(*v4);
  }
  v7 = (_QWORD *)(a1 + a2[7]);
  v8 = type metadata accessor for Item(0);
  if (swift_getEnumCaseMultiPayload(v7, v8) == 1)
  {
    sub_1000249D8(*v7, v7[1], *((_BYTE *)v7 + 16));
    swift_bridgeObjectRelease(v7[3]);
  }
  else
  {
    swift_unknownObjectRelease(*v7);
    swift_release(v7[1]);
    v9 = type metadata accessor for Item.Headline(0);
    v10 = (char *)v7 + *(int *)(v9 + 24);
    v11 = type metadata accessor for URL(0);
    v12 = *(_QWORD *)(v11 - 8);
    if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11))
      (*(void (**)(char *, uint64_t))(v12 + 8))(v10, v11);
    v13 = (id *)((char *)v7 + *(int *)(v9 + 28));
    if (v13[1])
    {

    }
  }
  v14 = a1 + a2[8];

  swift_bridgeObjectRelease(*(_QWORD *)(v14 + 8));
  swift_unknownObjectRelease(*(_QWORD *)(v14 + 16));
  v15 = (int *)type metadata accessor for TodayContent(0);
  v16 = v14 + v15[8];
  v17 = type metadata accessor for URL(0);
  v18 = *(_QWORD *)(v17 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v18 + 48))(v16, 1, v17))
    (*(void (**)(uint64_t, uint64_t))(v18 + 8))(v16, v17);
  swift_release(*(_QWORD *)(v14 + v15[9]));
  swift_bridgeObjectRelease(*(_QWORD *)(v14 + v15[10] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v14 + v15[11] + 8));
  v19 = a1 + a2[9];
  v20 = type metadata accessor for LayoutContext(0);
  v21 = v19 + *(int *)(v20 + 24);
  v22 = type metadata accessor for InternalWidgetFamily(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 8))(v21, v22);
  v23 = v19 + *(int *)(v20 + 32);
  v24 = type metadata accessor for ContentSizeCategory(0);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 8))(v23, v24);
}

uint64_t sub_1000249CC(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  if ((a5 & 1) == 0)
    return swift_release(result);
  return result;
}

uint64_t sub_1000249D8(uint64_t a1, uint64_t a2, char a3)
{
  if ((a3 & 1) != 0)
    return swift_release(a1);
  else
    return swift_bridgeObjectRelease(a2);
}

uint64_t sub_1000249E8(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  const void *v33;
  uint64_t v34;
  uint64_t v35;
  unsigned int (*v36)(const void *, uint64_t, uint64_t);
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  void *v41;
  void *v42;
  id v43;
  id v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  void *v48;
  uint64_t v49;
  uint64_t v50;
  int *v51;
  uint64_t v52;
  const void *v53;
  uint64_t v54;
  uint64_t v55;
  unsigned int (*v56)(const void *, uint64_t, uint64_t);
  id v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  _QWORD *v62;
  _QWORD *v63;
  uint64_t v64;
  uint64_t v65;
  _QWORD *v66;
  _QWORD *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  int *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  void (*v77)(uint64_t, uint64_t, uint64_t);
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  void *__dst;
  int *v84;
  void *v85;
  uint64_t v86;
  uint64_t v87;
  int *v88;
  uint64_t v89;

  v6 = *(_QWORD *)a2;
  v7 = *(_BYTE *)(a2 + 8);
  sub_100024758(*(_QWORD *)a2, v7);
  *(_QWORD *)a1 = v6;
  *(_BYTE *)(a1 + 8) = v7;
  v8 = *(_QWORD *)(a2 + 16);
  v9 = *(_QWORD *)(a2 + 24);
  v10 = *(_QWORD *)(a2 + 32);
  v11 = *(_QWORD *)(a2 + 40);
  v12 = *(_BYTE *)(a2 + 48);
  sub_100024764(v8, v9, v10, v11, v12);
  *(_QWORD *)(a1 + 16) = v8;
  *(_QWORD *)(a1 + 24) = v9;
  *(_QWORD *)(a1 + 32) = v10;
  *(_QWORD *)(a1 + 40) = v11;
  *(_BYTE *)(a1 + 48) = v12;
  v13 = a3[6];
  v14 = (uint64_t *)(a1 + v13);
  v15 = (uint64_t *)(a2 + v13);
  v16 = sub_10001B520(&qword_1000B9A20);
  if (swift_getEnumCaseMultiPayload(v15, v16) == 1)
  {
    v17 = type metadata accessor for WidgetRenderingMode(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v17 - 8) + 16))(v14, v15, v17);
    v18 = 1;
  }
  else
  {
    v19 = *v15;
    *v14 = *v15;
    swift_retain(v19);
    v18 = 0;
  }
  swift_storeEnumTagMultiPayload(v14, v16, v18);
  v20 = a3[7];
  v21 = a1 + v20;
  v22 = a2 + v20;
  v23 = type metadata accessor for Item(0);
  v88 = a3;
  if (swift_getEnumCaseMultiPayload(v22, v23) == 1)
  {
    v24 = *(_QWORD *)v22;
    v25 = *(_QWORD *)(v22 + 8);
    v26 = *(_BYTE *)(v22 + 16);
    sub_100024770(*(_QWORD *)v22, v25, v26);
    *(_QWORD *)v21 = v24;
    *(_QWORD *)(v21 + 8) = v25;
    *(_BYTE *)(v21 + 16) = v26;
    v27 = *(_QWORD *)(v22 + 24);
    *(_QWORD *)(v21 + 24) = v27;
    swift_bridgeObjectRetain(v27);
    v28 = 1;
  }
  else
  {
    v86 = v23;
    v29 = *(_QWORD *)v22;
    v30 = *(_QWORD *)(v22 + 8);
    *(_QWORD *)v21 = *(_QWORD *)v22;
    *(_QWORD *)(v21 + 8) = v30;
    v31 = type metadata accessor for Item.Headline(0);
    v32 = *(int *)(v31 + 24);
    __dst = (void *)(v21 + v32);
    v84 = (int *)v31;
    v33 = (const void *)(v22 + v32);
    v34 = type metadata accessor for URL(0);
    v35 = *(_QWORD *)(v34 - 8);
    v36 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v35 + 48);
    swift_unknownObjectRetain(v29);
    swift_retain(v30);
    if (v36(v33, 1, v34))
    {
      v37 = sub_10001B520(&qword_1000B93A0);
      memcpy(__dst, v33, *(_QWORD *)(*(_QWORD *)(v37 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v35 + 16))(__dst, v33, v34);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v35 + 56))(__dst, 0, 1, v34);
    }
    v23 = v86;
    v38 = v84[7];
    v39 = (_QWORD *)(v21 + v38);
    v40 = v22 + v38;
    v41 = *(void **)(v40 + 8);
    a3 = v88;
    if (v41)
    {
      v42 = *(void **)v40;
      *v39 = v42;
      v39[1] = v41;
      v43 = v42;
      v44 = v41;
      v28 = 0;
    }
    else
    {
      v28 = 0;
      *(_OWORD *)v39 = *(_OWORD *)v40;
    }
  }
  swift_storeEnumTagMultiPayload(v21, v23, v28);
  v45 = a3[8];
  v89 = a1;
  v46 = a1 + v45;
  v87 = a2;
  v47 = a2 + v45;
  v48 = *(void **)(a2 + v45);
  v49 = *(_QWORD *)(a2 + v45 + 8);
  *(_QWORD *)v46 = v48;
  *(_QWORD *)(v46 + 8) = v49;
  v50 = *(_QWORD *)(a2 + v45 + 16);
  *(_QWORD *)(v46 + 16) = v50;
  *(_BYTE *)(v46 + 24) = *(_BYTE *)(a2 + v45 + 24);
  v51 = (int *)type metadata accessor for TodayContent(0);
  v52 = v51[8];
  v85 = (void *)(v46 + v52);
  v53 = (const void *)(v47 + v52);
  v54 = type metadata accessor for URL(0);
  v55 = *(_QWORD *)(v54 - 8);
  v56 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v55 + 48);
  v57 = v48;
  swift_bridgeObjectRetain(v49);
  swift_unknownObjectRetain(v50);
  if (v56(v53, 1, v54))
  {
    v58 = sub_10001B520(&qword_1000B93A0);
    memcpy(v85, v53, *(_QWORD *)(*(_QWORD *)(v58 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v55 + 16))(v85, v53, v54);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v55 + 56))(v85, 0, 1, v54);
  }
  v59 = v51[9];
  v60 = *(_QWORD *)(v47 + v59);
  *(_QWORD *)(v46 + v59) = v60;
  v61 = v51[10];
  v62 = (_QWORD *)(v46 + v61);
  v63 = (_QWORD *)(v47 + v61);
  v64 = v63[1];
  *v62 = *v63;
  v62[1] = v64;
  v65 = v51[11];
  v66 = (_QWORD *)(v46 + v65);
  v67 = (_QWORD *)(v47 + v65);
  v68 = v67[1];
  *v66 = *v67;
  v66[1] = v68;
  v69 = v88[9];
  v70 = v89 + v69;
  v71 = v87 + v69;
  *(_OWORD *)(v89 + v69) = *(_OWORD *)(v87 + v69);
  v72 = (int *)type metadata accessor for LayoutContext(0);
  v73 = v72[6];
  v74 = v70 + v73;
  v75 = v71 + v73;
  v76 = type metadata accessor for InternalWidgetFamily(0);
  v77 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v76 - 8) + 16);
  swift_retain(v60);
  swift_bridgeObjectRetain(v64);
  swift_bridgeObjectRetain(v68);
  v77(v74, v75, v76);
  *(_OWORD *)(v70 + v72[7]) = *(_OWORD *)(v71 + v72[7]);
  v78 = v72[8];
  v79 = v70 + v78;
  v80 = v71 + v78;
  v81 = type metadata accessor for ContentSizeCategory(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v81 - 8) + 16))(v79, v80, v81);
  *(_QWORD *)(v70 + v72[9]) = *(_QWORD *)(v71 + v72[9]);
  *(_QWORD *)(v70 + v72[10]) = *(_QWORD *)(v71 + v72[10]);
  *(_BYTE *)(v70 + v72[11]) = *(_BYTE *)(v71 + v72[11]);
  *(_BYTE *)(v70 + v72[12]) = *(_BYTE *)(v71 + v72[12]);
  return v89;
}

uint64_t sub_100024E3C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  char v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  const void *v40;
  uint64_t v41;
  uint64_t v42;
  unsigned int (*v43)(const void *, uint64_t, uint64_t);
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  void *v48;
  void *v49;
  id v50;
  id v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  void *v55;
  void *v56;
  id v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  int *v62;
  uint64_t v63;
  void *v64;
  void *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t (*v68)(void *, uint64_t, uint64_t);
  int v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  _QWORD *v75;
  _QWORD *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  _QWORD *v80;
  _QWORD *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  _QWORD *v85;
  uint64_t v86;
  int *v87;
  uint64_t v88;
  char *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  _QWORD *v93;
  _QWORD *v94;
  uint64_t v95;
  char *v96;
  uint64_t v97;
  uint64_t v98;
  void *__dst;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  int *v104;

  v6 = *(_QWORD *)a2;
  v7 = *(_BYTE *)(a2 + 8);
  sub_100024758(*(_QWORD *)a2, v7);
  v8 = *(_QWORD *)a1;
  v9 = *(_BYTE *)(a1 + 8);
  *(_QWORD *)a1 = v6;
  *(_BYTE *)(a1 + 8) = v7;
  sub_10002C790(v8, v9);
  v10 = *(_QWORD *)(a2 + 16);
  v11 = *(_QWORD *)(a2 + 24);
  v12 = *(_QWORD *)(a2 + 32);
  v13 = *(_QWORD *)(a2 + 40);
  v14 = *(_BYTE *)(a2 + 48);
  sub_100024764(v10, v11, v12, v13, v14);
  v15 = *(_QWORD *)(a1 + 16);
  v16 = *(_QWORD *)(a1 + 24);
  v17 = *(_QWORD *)(a1 + 32);
  v18 = *(_QWORD *)(a1 + 40);
  v19 = *(_BYTE *)(a1 + 48);
  *(_QWORD *)(a1 + 16) = v10;
  *(_QWORD *)(a1 + 24) = v11;
  *(_QWORD *)(a1 + 32) = v12;
  *(_QWORD *)(a1 + 40) = v13;
  *(_BYTE *)(a1 + 48) = v14;
  sub_1000249CC(v15, v16, v17, v18, v19);
  v104 = a3;
  if (a1 != a2)
  {
    v20 = a3[6];
    v21 = (uint64_t *)(a1 + v20);
    v22 = (uint64_t *)(a2 + v20);
    sub_10002CCF4(a1 + v20, &qword_1000B9A20);
    v23 = sub_10001B520(&qword_1000B9A20);
    if (swift_getEnumCaseMultiPayload(v22, v23) == 1)
    {
      v24 = type metadata accessor for WidgetRenderingMode(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v24 - 8) + 16))(v21, v22, v24);
      v25 = 1;
    }
    else
    {
      v26 = *v22;
      *v21 = *v22;
      swift_retain(v26);
      v25 = 0;
    }
    swift_storeEnumTagMultiPayload(v21, v23, v25);
    v27 = a3[7];
    v28 = a1 + v27;
    v29 = a2 + v27;
    sub_100027D34(a1 + v27, type metadata accessor for Item);
    v30 = type metadata accessor for Item(0);
    if (swift_getEnumCaseMultiPayload(v29, v30) == 1)
    {
      v31 = *(_QWORD *)v29;
      v32 = *(_QWORD *)(v29 + 8);
      v33 = *(_BYTE *)(v29 + 16);
      sub_100024770(*(_QWORD *)v29, v32, v33);
      *(_QWORD *)v28 = v31;
      *(_QWORD *)(v28 + 8) = v32;
      *(_BYTE *)(v28 + 16) = v33;
      v34 = *(_QWORD *)(v29 + 24);
      *(_QWORD *)(v28 + 24) = v34;
      swift_bridgeObjectRetain(v34);
      v35 = 1;
    }
    else
    {
      v102 = v30;
      v36 = *(_QWORD *)v29;
      *(_QWORD *)v28 = *(_QWORD *)v29;
      v37 = *(_QWORD *)(v29 + 8);
      *(_QWORD *)(v28 + 8) = v37;
      v38 = type metadata accessor for Item.Headline(0);
      v39 = *(int *)(v38 + 24);
      __dst = (void *)(v28 + v39);
      v101 = v38;
      v40 = (const void *)(v29 + v39);
      v41 = type metadata accessor for URL(0);
      v42 = *(_QWORD *)(v41 - 8);
      v43 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v42 + 48);
      swift_unknownObjectRetain(v36);
      swift_retain(v37);
      if (v43(v40, 1, v41))
      {
        v44 = sub_10001B520(&qword_1000B93A0);
        memcpy(__dst, v40, *(_QWORD *)(*(_QWORD *)(v44 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v42 + 16))(__dst, v40, v41);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v42 + 56))(__dst, 0, 1, v41);
      }
      v30 = v102;
      v45 = *(int *)(v101 + 28);
      v46 = (_QWORD *)(v28 + v45);
      v47 = v29 + v45;
      a3 = v104;
      if (*(_QWORD *)(v47 + 8))
      {
        v48 = *(void **)v47;
        *v46 = *(_QWORD *)v47;
        v49 = *(void **)(v47 + 8);
        v46[1] = v49;
        v50 = v48;
        v51 = v49;
        v35 = 0;
      }
      else
      {
        v35 = 0;
        *(_OWORD *)v46 = *(_OWORD *)v47;
      }
    }
    swift_storeEnumTagMultiPayload(v28, v30, v35);
  }
  v52 = a3[8];
  v53 = a1 + v52;
  v103 = a2;
  v54 = a2 + v52;
  v55 = *(void **)(a2 + v52);
  v56 = *(void **)v53;
  *(_QWORD *)v53 = v55;
  v57 = v55;

  v58 = *(_QWORD *)(v54 + 8);
  v59 = *(_QWORD *)(v53 + 8);
  *(_QWORD *)(v53 + 8) = v58;
  swift_bridgeObjectRetain(v58);
  swift_bridgeObjectRelease(v59);
  v60 = *(_QWORD *)(v54 + 16);
  v61 = *(_QWORD *)(v53 + 16);
  *(_QWORD *)(v53 + 16) = v60;
  swift_unknownObjectRetain(v60);
  swift_unknownObjectRelease(v61);
  *(_BYTE *)(v53 + 24) = *(_BYTE *)(v54 + 24);
  v62 = (int *)type metadata accessor for TodayContent(0);
  v63 = v62[8];
  v64 = (void *)(v53 + v63);
  v65 = (void *)(v54 + v63);
  v66 = type metadata accessor for URL(0);
  v67 = *(_QWORD *)(v66 - 8);
  v68 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v67 + 48);
  LODWORD(v61) = v68(v64, 1, v66);
  v69 = v68(v65, 1, v66);
  if (!(_DWORD)v61)
  {
    if (!v69)
    {
      (*(void (**)(void *, void *, uint64_t))(v67 + 24))(v64, v65, v66);
      goto LABEL_20;
    }
    (*(void (**)(void *, uint64_t))(v67 + 8))(v64, v66);
    goto LABEL_19;
  }
  if (v69)
  {
LABEL_19:
    v70 = sub_10001B520(&qword_1000B93A0);
    memcpy(v64, v65, *(_QWORD *)(*(_QWORD *)(v70 - 8) + 64));
    goto LABEL_20;
  }
  (*(void (**)(void *, void *, uint64_t))(v67 + 16))(v64, v65, v66);
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v67 + 56))(v64, 0, 1, v66);
LABEL_20:
  v71 = v62[9];
  v72 = *(_QWORD *)(v54 + v71);
  v73 = *(_QWORD *)(v53 + v71);
  *(_QWORD *)(v53 + v71) = v72;
  swift_retain(v72);
  swift_release(v73);
  v74 = v62[10];
  v75 = (_QWORD *)(v53 + v74);
  v76 = (_QWORD *)(v54 + v74);
  *v75 = *v76;
  v77 = v76[1];
  v78 = v75[1];
  v75[1] = v77;
  swift_bridgeObjectRetain(v77);
  swift_bridgeObjectRelease(v78);
  v79 = v62[11];
  v80 = (_QWORD *)(v53 + v79);
  v81 = (_QWORD *)(v54 + v79);
  *v80 = *v81;
  v82 = v81[1];
  v83 = v80[1];
  v80[1] = v82;
  swift_bridgeObjectRetain(v82);
  swift_bridgeObjectRelease(v83);
  v84 = v104[9];
  v85 = (_QWORD *)(a1 + v84);
  v86 = v103 + v84;
  *v85 = *(_QWORD *)(v103 + v84);
  v85[1] = *(_QWORD *)(v103 + v84 + 8);
  v87 = (int *)type metadata accessor for LayoutContext(0);
  v88 = v87[6];
  v89 = (char *)v85 + v88;
  v90 = v86 + v88;
  v91 = type metadata accessor for InternalWidgetFamily(0);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v91 - 8) + 24))(v89, v90, v91);
  v92 = v87[7];
  v93 = (_QWORD *)((char *)v85 + v92);
  v94 = (_QWORD *)(v86 + v92);
  *v93 = *v94;
  v93[1] = v94[1];
  v95 = v87[8];
  v96 = (char *)v85 + v95;
  v97 = v86 + v95;
  v98 = type metadata accessor for ContentSizeCategory(0);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v98 - 8) + 24))(v96, v97, v98);
  *(_QWORD *)((char *)v85 + v87[9]) = *(_QWORD *)(v86 + v87[9]);
  *(_QWORD *)((char *)v85 + v87[10]) = *(_QWORD *)(v86 + v87[10]);
  *((_BYTE *)v85 + v87[11]) = *(_BYTE *)(v86 + v87[11]);
  *((_BYTE *)v85 + v87[12]) = *(_BYTE *)(v86 + v87[12]);
  return a1;
}

uint64_t sub_100025374(uint64_t a1, uint64_t a2, int *a3)
{
  __int128 v6;
  uint64_t v7;
  void *v8;
  const void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _OWORD *v13;
  _OWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int *v25;
  uint64_t v26;
  void *v27;
  const void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *__dst;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  v6 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v6;
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  v7 = a3[6];
  v8 = (void *)(a1 + v7);
  v9 = (const void *)(a2 + v7);
  v10 = sub_10001B520(&qword_1000B9A20);
  if (swift_getEnumCaseMultiPayload(v9, v10) == 1)
  {
    v11 = type metadata accessor for WidgetRenderingMode(0);
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v11 - 8) + 32))(v8, v9, v11);
    swift_storeEnumTagMultiPayload(v8, v10, 1);
  }
  else
  {
    memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v10 - 8) + 64));
  }
  v12 = a3[7];
  v13 = (_OWORD *)(a1 + v12);
  v14 = (_OWORD *)(a2 + v12);
  v15 = type metadata accessor for Item(0);
  if (swift_getEnumCaseMultiPayload(v14, v15))
  {
    memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
  }
  else
  {
    *v13 = *v14;
    v16 = type metadata accessor for Item.Headline(0);
    v17 = *(int *)(v16 + 24);
    __dst = (char *)v13 + v17;
    v18 = (char *)v14 + v17;
    v19 = type metadata accessor for URL(0);
    v20 = *(_QWORD *)(v19 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v20 + 48))(v18, 1, v19))
    {
      v21 = sub_10001B520(&qword_1000B93A0);
      memcpy(__dst, v18, *(_QWORD *)(*(_QWORD *)(v21 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v20 + 32))(__dst, v18, v19);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v20 + 56))(__dst, 0, 1, v19);
    }
    *(_OWORD *)((char *)v13 + *(int *)(v16 + 28)) = *(_OWORD *)((char *)v14 + *(int *)(v16 + 28));
    swift_storeEnumTagMultiPayload(v13, v15, 0);
  }
  v22 = a3[8];
  v23 = a1 + v22;
  v24 = a2 + v22;
  *(_OWORD *)v23 = *(_OWORD *)(a2 + v22);
  *(_QWORD *)(v23 + 16) = *(_QWORD *)(a2 + v22 + 16);
  *(_BYTE *)(v23 + 24) = *(_BYTE *)(a2 + v22 + 24);
  v25 = (int *)type metadata accessor for TodayContent(0);
  v26 = v25[8];
  v27 = (void *)(v23 + v26);
  v28 = (const void *)(v24 + v26);
  v29 = type metadata accessor for URL(0);
  v30 = *(_QWORD *)(v29 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v30 + 48))(v28, 1, v29))
  {
    v31 = sub_10001B520(&qword_1000B93A0);
    memcpy(v27, v28, *(_QWORD *)(*(_QWORD *)(v31 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v30 + 32))(v27, v28, v29);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v30 + 56))(v27, 0, 1, v29);
  }
  *(_QWORD *)(v23 + v25[9]) = *(_QWORD *)(v24 + v25[9]);
  *(_OWORD *)(v23 + v25[10]) = *(_OWORD *)(v24 + v25[10]);
  *(_OWORD *)(v23 + v25[11]) = *(_OWORD *)(v24 + v25[11]);
  v32 = a3[9];
  v33 = a1 + v32;
  v34 = a2 + v32;
  *(_OWORD *)(a1 + v32) = *(_OWORD *)(a2 + v32);
  v35 = (int *)type metadata accessor for LayoutContext(0);
  v36 = v35[6];
  v37 = v33 + v36;
  v38 = v34 + v36;
  v39 = type metadata accessor for InternalWidgetFamily(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v39 - 8) + 32))(v37, v38, v39);
  *(_OWORD *)(v33 + v35[7]) = *(_OWORD *)(v34 + v35[7]);
  v40 = v35[8];
  v41 = v33 + v40;
  v42 = v34 + v40;
  v43 = type metadata accessor for ContentSizeCategory(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v43 - 8) + 32))(v41, v42, v43);
  *(_QWORD *)(v33 + v35[9]) = *(_QWORD *)(v34 + v35[9]);
  *(_QWORD *)(v33 + v35[10]) = *(_QWORD *)(v34 + v35[10]);
  *(_BYTE *)(v33 + v35[11]) = *(_BYTE *)(v34 + v35[11]);
  *(_BYTE *)(v33 + v35[12]) = *(_BYTE *)(v34 + v35[12]);
  return a1;
}

uint64_t sub_1000256E0(uint64_t a1, uint64_t *a2, int *a3)
{
  uint64_t v6;
  char v7;
  uint64_t v8;
  char v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  __int128 v16;
  uint64_t v17;
  void *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _OWORD *v23;
  _OWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  int *v39;
  uint64_t v40;
  void *v41;
  void *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t (*v45)(void *, uint64_t, uint64_t);
  int v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  uint64_t *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  _QWORD *v58;
  uint64_t *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  int *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t *v76;
  int *v77;

  v6 = *a2;
  v7 = *((_BYTE *)a2 + 8);
  v8 = *(_QWORD *)a1;
  v9 = *(_BYTE *)(a1 + 8);
  *(_QWORD *)a1 = v6;
  *(_BYTE *)(a1 + 8) = v7;
  sub_10002C790(v8, v9);
  v10 = *((_BYTE *)a2 + 48);
  v11 = *(_QWORD *)(a1 + 16);
  v12 = *(_QWORD *)(a1 + 24);
  v13 = *(_QWORD *)(a1 + 32);
  v14 = *(_QWORD *)(a1 + 40);
  v15 = *(_BYTE *)(a1 + 48);
  v16 = *((_OWORD *)a2 + 2);
  *(_OWORD *)(a1 + 16) = *((_OWORD *)a2 + 1);
  *(_OWORD *)(a1 + 32) = v16;
  *(_BYTE *)(a1 + 48) = v10;
  sub_1000249CC(v11, v12, v13, v14, v15);
  v77 = a3;
  if ((uint64_t *)a1 != a2)
  {
    v17 = a3[6];
    v18 = (void *)(a1 + v17);
    v19 = (char *)a2 + v17;
    sub_10002CCF4(a1 + v17, &qword_1000B9A20);
    v20 = sub_10001B520(&qword_1000B9A20);
    if (swift_getEnumCaseMultiPayload(v19, v20) == 1)
    {
      v21 = type metadata accessor for WidgetRenderingMode(0);
      (*(void (**)(void *, char *, uint64_t))(*(_QWORD *)(v21 - 8) + 32))(v18, v19, v21);
      swift_storeEnumTagMultiPayload(v18, v20, 1);
    }
    else
    {
      memcpy(v18, v19, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
    }
    v22 = a3[7];
    v23 = (_OWORD *)(a1 + v22);
    v24 = (_OWORD *)((char *)a2 + v22);
    sub_100027D34(a1 + v22, type metadata accessor for Item);
    v25 = type metadata accessor for Item(0);
    if (swift_getEnumCaseMultiPayload(v24, v25))
    {
      memcpy(v23, v24, *(_QWORD *)(*(_QWORD *)(v25 - 8) + 64));
    }
    else
    {
      *v23 = *v24;
      v26 = type metadata accessor for Item.Headline(0);
      v27 = *(int *)(v26 + 24);
      v28 = (char *)v23 + v27;
      v29 = (char *)v24 + v27;
      v30 = type metadata accessor for URL(0);
      v31 = *(_QWORD *)(v30 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v31 + 48))(v29, 1, v30))
      {
        v32 = sub_10001B520(&qword_1000B93A0);
        memcpy(v28, v29, *(_QWORD *)(*(_QWORD *)(v32 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v31 + 32))(v28, v29, v30);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v31 + 56))(v28, 0, 1, v30);
      }
      *(_OWORD *)((char *)v23 + *(int *)(v26 + 28)) = *(_OWORD *)((char *)v24 + *(int *)(v26 + 28));
      swift_storeEnumTagMultiPayload(v23, v25, 0);
      a3 = v77;
    }
  }
  v33 = a3[8];
  v34 = a1 + v33;
  v76 = a2;
  v35 = (uint64_t)a2 + v33;
  v36 = *(void **)(a1 + v33);
  *(_QWORD *)(a1 + v33) = *(uint64_t *)((char *)a2 + v33);

  v37 = *(_QWORD *)(v34 + 8);
  *(_QWORD *)(v34 + 8) = *(_QWORD *)(v35 + 8);
  swift_bridgeObjectRelease(v37);
  v38 = *(_QWORD *)(v34 + 16);
  *(_QWORD *)(v34 + 16) = *(_QWORD *)(v35 + 16);
  swift_unknownObjectRelease(v38);
  *(_BYTE *)(v34 + 24) = *(_BYTE *)(v35 + 24);
  v39 = (int *)type metadata accessor for TodayContent(0);
  v40 = v39[8];
  v41 = (void *)(v34 + v40);
  v42 = (void *)(v35 + v40);
  v43 = type metadata accessor for URL(0);
  v44 = *(_QWORD *)(v43 - 8);
  v45 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v44 + 48);
  v46 = v45(v41, 1, v43);
  v47 = v45(v42, 1, v43);
  if (!v46)
  {
    if (!v47)
    {
      (*(void (**)(void *, void *, uint64_t))(v44 + 40))(v41, v42, v43);
      goto LABEL_17;
    }
    (*(void (**)(void *, uint64_t))(v44 + 8))(v41, v43);
    goto LABEL_16;
  }
  if (v47)
  {
LABEL_16:
    v48 = sub_10001B520(&qword_1000B93A0);
    memcpy(v41, v42, *(_QWORD *)(*(_QWORD *)(v48 - 8) + 64));
    goto LABEL_17;
  }
  (*(void (**)(void *, void *, uint64_t))(v44 + 32))(v41, v42, v43);
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v44 + 56))(v41, 0, 1, v43);
LABEL_17:
  v49 = v39[9];
  v50 = *(_QWORD *)(v34 + v49);
  *(_QWORD *)(v34 + v49) = *(_QWORD *)(v35 + v49);
  swift_release(v50);
  v51 = v39[10];
  v52 = (_QWORD *)(v34 + v51);
  v53 = (uint64_t *)(v35 + v51);
  v55 = *v53;
  v54 = v53[1];
  v56 = v52[1];
  *v52 = v55;
  v52[1] = v54;
  swift_bridgeObjectRelease(v56);
  v57 = v39[11];
  v58 = (_QWORD *)(v34 + v57);
  v59 = (uint64_t *)(v35 + v57);
  v61 = *v59;
  v60 = v59[1];
  v62 = v58[1];
  *v58 = v61;
  v58[1] = v60;
  swift_bridgeObjectRelease(v62);
  v63 = v77[9];
  v64 = a1 + v63;
  v65 = (uint64_t)v76 + v63;
  *(_OWORD *)(a1 + v63) = *(_OWORD *)((char *)v76 + v63);
  v66 = (int *)type metadata accessor for LayoutContext(0);
  v67 = v66[6];
  v68 = v64 + v67;
  v69 = v65 + v67;
  v70 = type metadata accessor for InternalWidgetFamily(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v70 - 8) + 40))(v68, v69, v70);
  *(_OWORD *)(v64 + v66[7]) = *(_OWORD *)(v65 + v66[7]);
  v71 = v66[8];
  v72 = v64 + v71;
  v73 = v65 + v71;
  v74 = type metadata accessor for ContentSizeCategory(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v74 - 8) + 40))(v72, v73, v74);
  *(_QWORD *)(v64 + v66[9]) = *(_QWORD *)(v65 + v66[9]);
  *(_QWORD *)(v64 + v66[10]) = *(_QWORD *)(v65 + v66[10]);
  *(_BYTE *)(v64 + v66[11]) = *(_BYTE *)(v65 + v66[11]);
  *(_BYTE *)(v64 + v66[12]) = *(_BYTE *)(v65 + v66[12]);
  return a1;
}

uint64_t sub_100025B28(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100025B34);
}

uint64_t sub_100025B34(uint64_t a1, uint64_t a2, int *a3)
{
  unsigned int v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  if ((_DWORD)a2 == 254)
  {
    v4 = *(unsigned __int8 *)(a1 + 8);
    if (v4 > 1)
      return (v4 ^ 0xFF) + 1;
    else
      return 0;
  }
  else
  {
    v8 = sub_10001B520(&qword_1000B9A28);
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
    {
      v10 = v8;
      v11 = a3[6];
    }
    else
    {
      v12 = type metadata accessor for Item(0);
      v9 = *(_QWORD *)(v12 - 8);
      if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
      {
        v10 = v12;
        v11 = a3[7];
      }
      else
      {
        v13 = type metadata accessor for TodayContent(0);
        v9 = *(_QWORD *)(v13 - 8);
        if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
        {
          v10 = v13;
          v11 = a3[8];
        }
        else
        {
          v10 = type metadata accessor for LayoutContext(0);
          v9 = *(_QWORD *)(v10 - 8);
          v11 = a3[9];
        }
      }
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(a1 + v11, a2, v10);
  }
}

uint64_t sub_100025C18(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100025C24);
}

uint64_t sub_100025C24(uint64_t result, uint64_t a2, int a3, int *a4)
{
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v5 = result;
  if (a3 == 254)
  {
    *(_BYTE *)(result + 8) = -(char)a2;
  }
  else
  {
    v8 = sub_10001B520(&qword_1000B9A28);
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      v10 = v8;
      v11 = a4[6];
    }
    else
    {
      v12 = type metadata accessor for Item(0);
      v9 = *(_QWORD *)(v12 - 8);
      if (*(_DWORD *)(v9 + 84) == a3)
      {
        v10 = v12;
        v11 = a4[7];
      }
      else
      {
        v13 = type metadata accessor for TodayContent(0);
        v9 = *(_QWORD *)(v13 - 8);
        if (*(_DWORD *)(v9 + 84) == a3)
        {
          v10 = v13;
          v11 = a4[8];
        }
        else
        {
          v10 = type metadata accessor for LayoutContext(0);
          v9 = *(_QWORD *)(v10 - 8);
          v11 = a4[9];
        }
      }
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(v5 + v11, a2, a2, v10);
  }
  return result;
}

uint64_t type metadata accessor for SmallContentView(uint64_t a1)
{
  return sub_10002ABF8(a1, (uint64_t *)&unk_1000B9A88, (uint64_t)&nominal type descriptor for SmallContentView);
}

void sub_100025D1C(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  _QWORD v10[6];

  v10[0] = "\t";
  v10[1] = &unk_10008AD90;
  sub_100025DEC(319);
  if (v3 <= 0x3F)
  {
    v10[2] = *(_QWORD *)(v2 - 8) + 64;
    v4 = type metadata accessor for Item(319);
    if (v5 <= 0x3F)
    {
      v10[3] = *(_QWORD *)(v4 - 8) + 64;
      v6 = type metadata accessor for TodayContent(319);
      if (v7 <= 0x3F)
      {
        v10[4] = *(_QWORD *)(v6 - 8) + 64;
        v8 = type metadata accessor for LayoutContext(319);
        if (v9 <= 0x3F)
        {
          v10[5] = *(_QWORD *)(v8 - 8) + 64;
          swift_initStructMetadata(a1, 256, 6, v10, a1 + 16);
        }
      }
    }
  }
}

void sub_100025DEC(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_1000B9A98)
  {
    v2 = type metadata accessor for WidgetRenderingMode(255);
    v3 = type metadata accessor for Environment.Content(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_1000B9A98);
  }
}

uint64_t sub_100025E40(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_10009C2DC, 1);
}

uint64_t sub_100025E50@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t OpaqueTypeConformance2;
  char *v38;
  char *v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  _QWORD *v67;
  uint64_t v68;
  _OWORD v69[10];
  _OWORD v70[2];
  __int128 v71;
  _OWORD v72[9];
  _OWORD v73[2];

  v2 = v1;
  v65 = a1;
  v3 = type metadata accessor for ContainerBackgroundPlacement(0);
  v63 = *(_QWORD *)(v3 - 8);
  v64 = v3;
  __chkstk_darwin(v3);
  v62 = (char *)&v51 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for RedactionReasons(0);
  v60 = *(_QWORD *)(v5 - 8);
  v61 = v5;
  __chkstk_darwin(v5);
  v59 = (char *)&v51 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for Item.Headline(0);
  __chkstk_darwin(v7);
  v9 = (char *)&v51 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for Item(0);
  __chkstk_darwin(v10);
  v12 = (char *)&v51 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_10001B520(&qword_1000B93A0);
  __chkstk_darwin(v13);
  v15 = (char *)&v51 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = sub_10001B520(&qword_1000B9AD8);
  v52 = *(_QWORD *)(v16 - 8);
  __chkstk_darwin(v16);
  v66 = (char *)&v51 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = sub_10001B520(&qword_1000B9AE0);
  v57 = *(_QWORD *)(v18 - 8);
  v58 = v18;
  __chkstk_darwin(v18);
  v56 = (char *)&v51 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = sub_10001B520(&qword_1000B9AE8);
  v54 = *(_QWORD *)(v20 - 8);
  v55 = v20;
  v21 = __chkstk_darwin(v20);
  v53 = (char *)&v51 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = static Alignment.center.getter(v21);
  v25 = v24;
  sub_10002641C(v2, (uint64_t)v72);
  *(_QWORD *)&v71 = v23;
  *((_QWORD *)&v71 + 1) = v25;
  v26 = type metadata accessor for SmallContentView(0);
  sub_10002A83C(v2 + *(int *)(v26 + 28), (uint64_t)v12, type metadata accessor for Item);
  if (swift_getEnumCaseMultiPayload(v12, v10) == 1)
  {
    sub_100027D34((uint64_t)v12, type metadata accessor for Item);
    v27 = type metadata accessor for URL(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v27 - 8) + 56))(v15, 1, 1, v27);
  }
  else
  {
    sub_10002AC74((uint64_t)v12, (uint64_t)v9, type metadata accessor for Item.Headline);
    sub_10002CCB0((uint64_t)&v9[*(int *)(v7 + 24)], (uint64_t)v15, &qword_1000B93A0);
    sub_100027D34((uint64_t)v9, type metadata accessor for Item.Headline);
  }
  v28 = sub_10001B520(&qword_1000B9AF0);
  v29 = sub_10002CE94(&qword_1000B9AF8, &qword_1000B9AF0, (uint64_t)&protocol conformance descriptor for ZStack<A>);
  View.widgetURL(_:)(v15, v28, v29);
  sub_10002CCF4((uint64_t)v15, &qword_1000B93A0);
  v69[8] = v72[7];
  v69[9] = v72[8];
  v70[0] = v73[0];
  *(_OWORD *)((char *)v70 + 9) = *(_OWORD *)((char *)v73 + 9);
  v69[4] = v72[3];
  v69[5] = v72[4];
  v69[6] = v72[5];
  v69[7] = v72[6];
  v69[0] = v71;
  v69[1] = v72[0];
  v69[2] = v72[1];
  v69[3] = v72[2];
  sub_100027C58((uint64_t)v69);
  v30 = v2 + *(int *)(v26 + 36);
  if (*(_BYTE *)(v30 + *(int *)(type metadata accessor for LayoutContext(0) + 44)) == 1)
  {
    v31 = v59;
    static RedactionReasons.placeholder.getter();
    v32 = v61;
  }
  else
  {
    v67 = _swiftEmptyArrayStorage;
    v33 = sub_10001C96C(&qword_1000B9B00, (uint64_t (*)(uint64_t))&type metadata accessor for RedactionReasons, (uint64_t)&protocol conformance descriptor for RedactionReasons);
    v34 = sub_10001B520(&qword_1000B9B08);
    v35 = sub_10002CE94((unint64_t *)&qword_1000B9B10, &qword_1000B9B08, (uint64_t)&protocol conformance descriptor for [A]);
    v31 = v59;
    v36 = v34;
    v32 = v61;
    dispatch thunk of SetAlgebra.init<A>(_:)(&v67, v36, v35, v61, v33);
  }
  v67 = (_QWORD *)v28;
  v68 = v29;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v67, &opaque type descriptor for <<opaque return type of View.widgetURL(_:)>>, 1);
  v38 = v56;
  v39 = v66;
  View.redacted(reason:)(v31, v16, OpaqueTypeConformance2);
  (*(void (**)(char *, uint64_t))(v60 + 8))(v31, v32);
  v40 = (*(uint64_t (**)(char *, uint64_t))(v52 + 8))(v39, v16);
  v41 = v62;
  v42 = static ContainerBackgroundPlacement.widget.getter(v40);
  v43 = __chkstk_darwin(v42);
  v44 = static Alignment.center.getter(v43);
  v46 = v45;
  v67 = (_QWORD *)v16;
  v68 = OpaqueTypeConformance2;
  v47 = swift_getOpaqueTypeConformance2(&v67, &opaque type descriptor for <<opaque return type of View.redacted(reason:)>>, 1);
  v48 = v53;
  v49 = v58;
  View.containerBackground<A>(for:alignment:content:)(v41, v44, v46, sub_100027CFC, &v51 - 4, v58, &type metadata for AnyView, v47, &protocol witness table for AnyView);
  (*(void (**)(char *, uint64_t))(v63 + 8))(v41, v64);
  (*(void (**)(char *, uint64_t))(v57 + 8))(v38, v49);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v54 + 32))(v65, v48, v55);
}

__n128 sub_10002641C@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  void (*v19)(char *, uint64_t);
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __n128 result;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _BYTE v35[176];
  uint64_t v36[2];
  uint64_t v37;
  _OWORD v38[9];
  _OWORD v39[2];

  v4 = type metadata accessor for WidgetRenderingMode(0);
  v33 = *(_QWORD *)(v4 - 8);
  v34 = v4;
  v5 = __chkstk_darwin(v4);
  v7 = (char *)&v32 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v9 = (char *)&v32 - v8;
  v10 = type metadata accessor for SmallContentView(0);
  __chkstk_darwin(v10);
  v12 = (char *)&v32 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = *(_QWORD *)a1;
  v14 = *(_BYTE *)(a1 + 8);
  sub_100024758(*(_QWORD *)a1, v14);
  v15 = sub_10002A004(v13, v14);
  sub_10002C790(v13, v14);
  sub_10002A83C(a1, (uint64_t)v12, type metadata accessor for SmallContentView);
  if ((v15 & 1) != 0)
  {
    v16 = sub_100027D34((uint64_t)v12, type metadata accessor for SmallContentView);
  }
  else
  {
    v17 = sub_10002A3F0(&qword_1000B9A20, (uint64_t (*)(_QWORD))&type metadata accessor for WidgetRenderingMode, 0xD000000000000013, 0x8000000100090A60, v9);
    static WidgetRenderingMode.accented.getter(v17);
    v18 = static WidgetRenderingMode.== infix(_:_:)(v9, v7);
    v19 = *(void (**)(char *, uint64_t))(v33 + 8);
    v20 = v7;
    v21 = v34;
    v19(v20, v34);
    v19(v9, v21);
    v16 = sub_100027D34((uint64_t)v12, type metadata accessor for SmallContentView);
    if ((v18 & 1) == 0)
    {
      sub_100027484(v36);
      sub_10002A880((uint64_t)v36);
      goto LABEL_6;
    }
  }
  v22 = static Alignment.center.getter(v16);
  v24 = v23;
  sub_1000266EC(a1, (uint64_t)&v37);
  v36[0] = v22;
  v36[1] = v24;
  sub_10002A88C((uint64_t)v36);
LABEL_6:
  sub_10002CB18((uint64_t)v36, (uint64_t)v35, &qword_1000B9B38);
  v25 = sub_10001B520(&qword_1000B9B40);
  v26 = sub_10002CE94(&qword_1000B9B48, &qword_1000B9B40, (uint64_t)&protocol conformance descriptor for ZStack<A>);
  _ConditionalContent<>.init(storage:)(v38, v35, v25, &type metadata for AnyView, v26, &protocol witness table for AnyView);
  v27 = v39[0];
  *(_OWORD *)(a2 + 128) = v38[8];
  *(_OWORD *)(a2 + 144) = v27;
  *(_OWORD *)(a2 + 153) = *(_OWORD *)((char *)v39 + 9);
  v28 = v38[5];
  *(_OWORD *)(a2 + 64) = v38[4];
  *(_OWORD *)(a2 + 80) = v28;
  v29 = v38[7];
  *(_OWORD *)(a2 + 96) = v38[6];
  *(_OWORD *)(a2 + 112) = v29;
  v30 = v38[1];
  *(_OWORD *)a2 = v38[0];
  *(_OWORD *)(a2 + 16) = v30;
  result = (__n128)v38[3];
  *(_OWORD *)(a2 + 32) = v38[2];
  *(__n128 *)(a2 + 48) = result;
  return result;
}

uint64_t sub_1000266EC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  void (*v17)(char *, uint64_t);
  uint64_t v18;
  double v19;
  int EnumCaseMultiPayload;
  uint64_t v21;
  uint64_t v22;
  double v23;
  double v24;
  double v25;
  __int128 v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t result;
  uint64_t v39;
  _OWORD v41[2];
  char v42;
  _BYTE v43[40];
  uint64_t v44[2];

  v4 = type metadata accessor for Item(0);
  __chkstk_darwin(v4);
  v6 = (char *)v41 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0) + 16;
  v7 = type metadata accessor for WidgetRenderingMode(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = __chkstk_darwin(v7);
  v11 = (char *)v41 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0) + 16;
  __chkstk_darwin(v9);
  v13 = (_QWORD *)((char *)v41 - v12 + 16);
  v14 = type metadata accessor for SmallContentView(0);
  v15 = sub_10002A3F0(&qword_1000B9A20, (uint64_t (*)(_QWORD))&type metadata accessor for WidgetRenderingMode, 0xD000000000000013, 0x8000000100090A60, v13);
  static WidgetRenderingMode.accented.getter(v15);
  v16 = static WidgetRenderingMode.== infix(_:_:)(v13, v11);
  v17 = *(void (**)(char *, uint64_t))(v8 + 8);
  v17(v11, v7);
  v18 = ((uint64_t (*)(_QWORD *, uint64_t))v17)(v13, v7);
  v19 = 0.0;
  if ((v16 & 1) != 0
    && (sub_10002A83C(a1 + *(int *)(v14 + 28), (uint64_t)v6, type metadata accessor for Item),
        EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v6, v4),
        v18 = sub_100027D34((uint64_t)v6, type metadata accessor for Item),
        EnumCaseMultiPayload != 1))
  {
    sub_1000269FC(v44);
    v21 = v44[0];
    v26 = *(_OWORD *)(a1 + 32);
    v41[0] = *(_OWORD *)(a1 + 16);
    v41[1] = v26;
    v42 = *(_BYTE *)(a1 + 48);
    sub_10002CB18((uint64_t)v41, (uint64_t)v43, &qword_1000B9B50);
    sub_10002A894((uint64_t)v43, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_100024764);
    v27 = sub_10002A1E8();
    sub_10002A894((uint64_t)v41, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1000249CC);
    v19 = -v27;
    sub_10002A894((uint64_t)v43, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_100024764);
    sub_10002A1E8();
    v29 = v28;
    sub_10002A894((uint64_t)v41, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1000249CC);
    v23 = -v29;
    sub_10002A894((uint64_t)v43, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_100024764);
    sub_10002A1E8();
    v31 = v30;
    sub_10002A894((uint64_t)v41, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1000249CC);
    v24 = -v31;
    sub_10002A894((uint64_t)v43, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_100024764);
    sub_10002A1E8();
    v33 = v32;
    v34 = sub_10002A894((uint64_t)v41, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1000249CC);
    v25 = -v33;
    v18 = static Edge.Set.all.getter(v34);
    v22 = v18;
  }
  else
  {
    v21 = 0;
    v22 = 0;
    v23 = 0.0;
    v24 = 0.0;
    v25 = 0.0;
  }
  v35 = static VerticalAlignment.center.getter(v18);
  v36 = static HorizontalAlignment.center.getter();
  sub_100026F10(v44);
  v37 = v44[0];
  result = sub_100027484(v44);
  v39 = v44[0];
  *(_QWORD *)a2 = v21;
  *(_QWORD *)(a2 + 8) = v22;
  *(double *)(a2 + 16) = v19;
  *(double *)(a2 + 24) = v23;
  *(double *)(a2 + 32) = v24;
  *(double *)(a2 + 40) = v25;
  *(_BYTE *)(a2 + 48) = 0;
  *(_QWORD *)(a2 + 56) = v35;
  *(_QWORD *)(a2 + 64) = 0;
  *(_BYTE *)(a2 + 72) = 1;
  *(_QWORD *)(a2 + 80) = 0;
  *(_BYTE *)(a2 + 88) = 1;
  *(_QWORD *)(a2 + 96) = v36;
  *(_QWORD *)(a2 + 104) = 0;
  *(_BYTE *)(a2 + 112) = 1;
  *(_QWORD *)(a2 + 120) = v37;
  *(_QWORD *)(a2 + 128) = 0;
  *(_BYTE *)(a2 + 136) = 1;
  *(_QWORD *)(a2 + 144) = v39;
  return result;
}

uint64_t sub_1000269FC@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  void *v26;
  id v27;
  uint64_t KeyPath;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t result;
  uint64_t v38;
  char *v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  char *v48;
  char *v49;
  uint64_t v50;
  uint64_t *v51;
  uint64_t v52;
  uint64_t *v53;
  _BYTE v54[40];

  v2 = v1;
  v53 = a1;
  v3 = sub_10001B520(&qword_1000B9A28);
  __chkstk_darwin(v3);
  v51 = (uint64_t *)((char *)&v45 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  v52 = type metadata accessor for SmallBackgroundView(0);
  __chkstk_darwin(v52);
  v6 = (uint64_t *)((char *)&v45 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  v50 = sub_10001B520(&qword_1000B9B18);
  __chkstk_darwin(v50);
  v49 = (char *)&v45 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v46 = type metadata accessor for Item.Headline(0);
  __chkstk_darwin(v46);
  v9 = (char *)&v45 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for Item(0);
  __chkstk_darwin(v10);
  v12 = (char *)&v45 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_10001B520(&qword_1000B93A0);
  __chkstk_darwin(v13);
  v15 = (char *)&v45 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for URL(0);
  v17 = *(_QWORD *)(v16 - 8);
  v18 = __chkstk_darwin(v16);
  v47 = (char *)&v45 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18);
  v48 = (char *)&v45 - v20;
  v21 = (int *)type metadata accessor for SmallContentView(0);
  v22 = v2 + v21[9];
  if (*(_BYTE *)(v22 + *(int *)(type metadata accessor for LayoutContext(0) + 44)) == 1)
  {
    v23 = v2 + v21[8];
    v24 = type metadata accessor for TodayContent(0);
    sub_10002CCB0(v23 + *(int *)(v24 + 32), (uint64_t)v15, &qword_1000B93A0);
  }
  else
  {
    sub_10002A83C(v2 + v21[7], (uint64_t)v12, type metadata accessor for Item);
    if (swift_getEnumCaseMultiPayload(v12, v10) == 1)
    {
      sub_100027D34((uint64_t)v12, type metadata accessor for Item);
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v17 + 56))(v15, 1, 1, v16);
    }
    else
    {
      sub_10002AC74((uint64_t)v12, (uint64_t)v9, type metadata accessor for Item.Headline);
      sub_10002CCB0((uint64_t)&v9[*(int *)(v46 + 24)], (uint64_t)v15, &qword_1000B93A0);
      sub_100027D34((uint64_t)v9, type metadata accessor for Item.Headline);
    }
  }
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48))(v15, 1, v16) == 1)
  {
    sub_10002CCF4((uint64_t)v15, &qword_1000B93A0);
    v25 = sub_10007840C();
    v26 = sub_100078540();
    v27 = sub_100078734();
    sub_10007886C((uint64_t)v54);
    KeyPath = swift_getKeyPath(&unk_10008ADF8);
    v29 = swift_getKeyPath(&unk_10008AE28);
    v30 = (uint64_t)v51;
    *v51 = v29;
    v31 = sub_10001B520(&qword_1000B9A20);
    swift_storeEnumTagMultiPayload(v30, v31, 0);
    *v6 = v25;
    v6[1] = v26;
    v6[2] = v27;
    sub_10002CB18((uint64_t)v54, (uint64_t)(v6 + 3), (uint64_t *)&unk_1000BA260);
    v32 = v52;
    v33 = (_QWORD *)((char *)v6 + *(int *)(v52 + 32));
    *v33 = swift_getKeyPath(&unk_10008AE58);
    v34 = sub_10001B520(&qword_1000B9B20);
    swift_storeEnumTagMultiPayload(v33, v34, 0);
    v35 = (char *)v6 + *(int *)(v32 + 36);
    *(_QWORD *)v35 = KeyPath;
    v35[8] = 0;
    sub_10002CB18(v30, (uint64_t)v6 + *(int *)(v32 + 40), &qword_1000B9A28);
    v36 = sub_10001C96C(&qword_1000B9B28, type metadata accessor for SmallBackgroundView, (uint64_t)&unk_10008BFF0);
    result = AnyView.init<A>(_:)(v6, v32, v36);
    v38 = result;
  }
  else
  {
    v39 = v48;
    (*(void (**)(char *, char *, uint64_t))(v17 + 32))(v48, v15, v16);
    v40 = v47;
    v41 = (*(uint64_t (**)(char *, char *, uint64_t))(v17 + 16))(v47, v39, v16);
    __chkstk_darwin(v41);
    *(&v45 - 2) = v2;
    v42 = sub_10001C96C(&qword_1000B9B28, type metadata accessor for SmallBackgroundView, (uint64_t)&unk_10008BFF0);
    v43 = v49;
    Link.init(destination:label:)(v40, sub_10002A834, &v45 - 4, v52, v42);
    v44 = sub_10002CE94(&qword_1000B9B30, &qword_1000B9B18, (uint64_t)&protocol conformance descriptor for Link<A>);
    v38 = AnyView.init<A>(_:)(v43, v50, v44);
    result = (*(uint64_t (**)(char *, uint64_t))(v17 + 8))(v39, v16);
  }
  *v53 = v38;
  return result;
}

uint64_t sub_100026F10@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t KeyPath;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  uint64_t OpaqueTypeConformance2;
  char *v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t result;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t *v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  __int16 v70;
  uint64_t v71;
  char v72;
  uint64_t v73;
  char v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  char v80;
  uint64_t v81;
  char v82;
  uint64_t v83;
  uint64_t v84;

  v3 = type metadata accessor for Image.ResizingMode(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v56 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v64 = sub_10001B520(&qword_1000B9B58);
  v63 = *(_QWORD *)(v64 - 8);
  __chkstk_darwin(v64);
  v62 = (char *)&v56 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v61 = sub_10001B520(&qword_1000B9B60);
  __chkstk_darwin(v61);
  v9 = (char *)&v56 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_10001B520(&qword_1000B9B68);
  __chkstk_darwin(v10);
  v12 = (char *)&v56 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_10001B520(&qword_1000B9B70);
  v14 = *(_QWORD *)(v13 - 8);
  __chkstk_darwin(v13);
  v66 = (char *)&v56 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v67 = sub_10001B520(&qword_1000B9B78);
  __chkstk_darwin(v67);
  v65 = (char *)&v56 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = type metadata accessor for SmallContentView(0);
  v18 = *(_QWORD *)(v1 + *(int *)(v17 + 32) + 8);
  if (*(_QWORD *)(v18 + 16)
    && (v17 = type metadata accessor for Section(0),
        v19 = *(unsigned __int8 *)(*(_QWORD *)(v17 - 8) + 80),
        *(_BYTE *)(v18 + ((v19 + 32) & ~v19) + 24) == 1))
  {
    v56 = v12;
    v57 = v10;
    v58 = v14;
    v59 = v13;
    v60 = a1;
    if (qword_1000B8CF8 != -1)
      swift_once(&qword_1000B8CF8, sub_100036F00);
    v20 = Image.init(uiImage:)((id)qword_1000C0750);
    (*(void (**)(char *, _QWORD, uint64_t))(v4 + 104))(v6, enum case for Image.ResizingMode.stretch(_:), v3);
    v21 = Image.resizable(capInsets:resizingMode:)(v6, v20, 0.0, 0.0, 0.0, 0.0);
    swift_release(v20);
    v22 = (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    v23 = static Alignment.center.getter(v22);
    v25 = _FrameLayout.init(width:height:alignment:)(&v79, 0, 1, 0x402E000000000000, 0, v23, v24);
    v26 = v79;
    v27 = v80;
    v28 = v81;
    v29 = v82;
    v31 = v83;
    v30 = v84;
    v32 = static Color.white.getter(v25);
    KeyPath = swift_getKeyPath(&unk_10008AE88);
    v68 = v21;
    v69 = 0x3FF0000000000000;
    v70 = 0;
    v71 = v26;
    v72 = v27;
    v73 = v28;
    v74 = v29;
    v75 = v31;
    v76 = v30;
    v77 = KeyPath;
    v78 = v32;
    v34 = sub_10001B520(&qword_1000B9B80);
    v35 = sub_10002CD8C(&qword_1000B9B88, &qword_1000B9B80, (void (*)(void))sub_10002A96C);
    v36 = v62;
    View.widgetAccentable(_:)(1, v34, v35);
    swift_release(v32);
    swift_release(KeyPath);
    v37 = swift_release(v21);
    v38 = static Color.black.getter(v37);
    v39 = Color.opacity(_:)(0.3);
    swift_release(v38);
    v40 = v63;
    v41 = v64;
    (*(void (**)(char *, char *, uint64_t))(v63 + 16))(v9, v36, v64);
    v42 = &v9[*(int *)(v61 + 36)];
    *(_QWORD *)v42 = v39;
    *(_OWORD *)(v42 + 8) = xmmword_10008AD20;
    *((_QWORD *)v42 + 3) = 0x3FF0000000000000;
    v43 = (*(uint64_t (**)(char *, uint64_t))(v40 + 8))(v36, v41);
    v44 = static Color.black.getter(v43);
    v45 = Color.opacity(_:)(0.3);
    swift_release(v44);
    v46 = (uint64_t)v56;
    sub_10002CCB0((uint64_t)v9, (uint64_t)v56, &qword_1000B9B60);
    v47 = v57;
    v48 = v46 + *(int *)(v57 + 36);
    *(_QWORD *)v48 = v45;
    *(_OWORD *)(v48 + 8) = xmmword_10008AD30;
    *(_QWORD *)(v48 + 24) = 0x4000000000000000;
    sub_10002CCF4((uint64_t)v9, &qword_1000B9B60);
    v49 = sub_10002A9F8(&qword_1000B9BC0, &qword_1000B9B68, (void (*)(void))sub_10002AA64);
    v50 = v66;
    View.unredacted()(v47, v49);
    sub_10002CCF4(v46, &qword_1000B9B68);
    v68 = v47;
    v69 = v49;
    OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v68, &opaque type descriptor for <<opaque return type of View.unredacted()>>, 1);
    v52 = v65;
    v53 = v59;
    View.accessibilityHidden(_:)(1, v59, OpaqueTypeConformance2);
    (*(void (**)(char *, uint64_t))(v58 + 8))(v50, v53);
    v54 = sub_10002AB18();
    result = AnyView.init<A>(_:)(v52, v67, v54);
    a1 = v60;
  }
  else
  {
    result = AnyView.init<A>(_:)(v17, &type metadata for EmptyView, &protocol witness table for EmptyView);
  }
  *a1 = result;
  return result;
}

uint64_t sub_100027484@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  int *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  id *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  int *v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  void *v30;
  id v31;
  id v32;
  id v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t result;
  uint64_t v38;
  uint64_t KeyPath;
  uint64_t v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  id v49;
  id v50;
  void *v51;
  uint64_t v52;
  unint64_t v53;
  unint64_t v54;
  id v55;
  void *v56;
  uint64_t v57;
  unint64_t v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t OpaqueTypeConformance2;
  unint64_t v66;
  char *v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t *v80;
  _QWORD v81[2];
  uint64_t v82;
  uint64_t v83;
  char v84;
  uint64_t v85;
  uint64_t v86;

  v2 = v1;
  v80 = a1;
  v3 = type metadata accessor for AccessibilityChildBehavior(0);
  v74 = *(_QWORD *)(v3 - 8);
  v75 = v3;
  __chkstk_darwin(v3);
  v73 = (char *)&v70 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for LayoutContext(0);
  __chkstk_darwin(v5);
  v71 = (uint64_t)&v70 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for TodayContent(0);
  __chkstk_darwin(v7);
  v9 = (char *)&v70 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = (int *)type metadata accessor for SmallHeadlineContentView(0);
  __chkstk_darwin(v10);
  v12 = (char *)&v70 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_10001B520(&qword_1000B9BE0);
  v78 = *(_QWORD *)(v13 - 8);
  v79 = v13;
  __chkstk_darwin(v13);
  v72 = (char *)&v70 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v77 = sub_10001B520(&qword_1000B9BE8);
  __chkstk_darwin(v77);
  v76 = (char *)&v70 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for Item.Headline(0);
  v17 = __chkstk_darwin(v16);
  v19 = (char *)&v70 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  v21 = (id *)((char *)&v70 - v20);
  v22 = type metadata accessor for Item(0);
  __chkstk_darwin(v22);
  v24 = (char *)&v70 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = (int *)type metadata accessor for SmallContentView(0);
  sub_10002A83C(v2 + v25[7], (uint64_t)v24, type metadata accessor for Item);
  if (swift_getEnumCaseMultiPayload(v24, v22) == 1)
  {
    v26 = *(_QWORD *)v24;
    v27 = *((_QWORD *)v24 + 1);
    v28 = v24[16];
    v29 = *((_QWORD *)v24 + 3);
    v30 = (void *)objc_opt_self(UIColor);
    sub_100024770(v26, v27, v28);
    swift_bridgeObjectRetain(v29);
    v31 = objc_msgSend(v30, "secondaryLabelColor");
    v32 = objc_msgSend((id)objc_opt_self(UITraitCollection), "traitCollectionWithUserInterfaceStyle:", 2);
    v33 = objc_msgSend(v31, "resolvedColorWithTraitCollection:", v32);

    v34 = Color.init(_:)(v33);
    v82 = v26;
    v83 = v27;
    v84 = v28;
    v85 = v29;
    v86 = v34;
    v35 = sub_10002AC2C();
    v36 = AnyView.init<A>(_:)(&v82, &type metadata for MessageView, v35);
    sub_1000249D8(v26, v27, v28);
    result = swift_bridgeObjectRelease(v29);
  }
  else
  {
    sub_10002AC74((uint64_t)v24, (uint64_t)v21, type metadata accessor for Item.Headline);
    sub_10002A83C((uint64_t)v21, (uint64_t)v19, type metadata accessor for Item.Headline);
    sub_10002A83C(v2 + v25[8], (uint64_t)v9, type metadata accessor for TodayContent);
    v38 = v71;
    sub_10002A83C(v2 + v25[9], v71, type metadata accessor for LayoutContext);
    KeyPath = swift_getKeyPath(&unk_10008AEB8);
    v40 = swift_getKeyPath(&unk_10008AE28);
    v41 = (uint64_t *)&v12[v10[5]];
    *v41 = v40;
    v42 = sub_10001B520(&qword_1000B9A20);
    swift_storeEnumTagMultiPayload(v41, v42, 0);
    *(_QWORD *)v12 = KeyPath;
    v12[8] = 0;
    sub_10002AC74((uint64_t)v19, (uint64_t)&v12[v10[6]], type metadata accessor for Item.Headline);
    sub_10002AC74((uint64_t)v9, (uint64_t)&v12[v10[7]], type metadata accessor for TodayContent);
    v43 = sub_10002AC74(v38, (uint64_t)&v12[v10[8]], type metadata accessor for LayoutContext);
    v44 = v73;
    static AccessibilityChildBehavior.combine.getter(v43);
    v45 = sub_10001C96C(&qword_1000B9BF8, type metadata accessor for SmallHeadlineContentView, (uint64_t)&unk_10008AEFC);
    v46 = v72;
    View.accessibilityElement(children:)(v44, v10, v45);
    (*(void (**)(char *, uint64_t))(v74 + 8))(v44, v75);
    sub_100027D34((uint64_t)v12, type metadata accessor for SmallHeadlineContentView);
    v47 = sub_10001B520(&qword_1000B99A0);
    v48 = swift_allocObject(v47, 64, 7);
    *(_OWORD *)(v48 + 16) = xmmword_10008AC80;
    v49 = *v21;
    v50 = objc_msgSend(*v21, "title");
    if (v50)
    {
      v51 = v50;
      v52 = static String._unconditionallyBridgeFromObjectiveC(_:)(v50);
      v54 = v53;

    }
    else
    {
      v52 = 0;
      v54 = 0xE000000000000000;
    }
    *(_QWORD *)(v48 + 32) = v52;
    *(_QWORD *)(v48 + 40) = v54;
    v55 = objc_msgSend(v49, "sourceName");
    if (v55)
    {
      v56 = v55;
      v57 = static String._unconditionallyBridgeFromObjectiveC(_:)(v55);
      v59 = v58;

    }
    else
    {
      v57 = 0;
      v59 = 0xE000000000000000;
    }
    *(_QWORD *)(v48 + 48) = v57;
    *(_QWORD *)(v48 + 56) = v59;
    v82 = v48;
    v60 = sub_10001B520(&qword_1000B99B0);
    v61 = sub_10002CE94((unint64_t *)&qword_1000B99B8, &qword_1000B99B0, (uint64_t)&protocol conformance descriptor for [A]);
    v62 = BidirectionalCollection<>.joined(separator:)(8236, 0xE200000000000000, v60, v61);
    v64 = v63;
    swift_bridgeObjectRelease(v48);
    v82 = v62;
    v83 = v64;
    v81[0] = v10;
    v81[1] = v45;
    OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(v81, &opaque type descriptor for <<opaque return type of View.accessibilityElement(children:)>>, 1);
    v66 = sub_10002ACB8();
    v67 = v76;
    v68 = v79;
    View.accessibilityLabel<A>(_:)(&v82, v79, &type metadata for String, OpaqueTypeConformance2, v66);
    swift_bridgeObjectRelease(v64);
    (*(void (**)(char *, uint64_t))(v78 + 8))(v46, v68);
    v69 = sub_10002ACFC();
    v36 = AnyView.init<A>(_:)(v67, v77, v69);
    result = sub_100027D34((uint64_t)v21, type metadata accessor for Item.Headline);
  }
  *v80 = v36;
  return result;
}

uint64_t sub_100027ACC@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  void *v5;
  void *v6;
  id v7;
  uint64_t KeyPath;
  uint64_t v9;
  int *v10;
  _QWORD *v11;
  uint64_t v12;
  char *v13;
  _BYTE v16[40];

  v2 = sub_10001B520(&qword_1000B9A28);
  __chkstk_darwin(v2);
  v4 = &v16[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  type metadata accessor for SmallContentView(0);
  v5 = sub_10007840C();
  v6 = sub_100078540();
  v7 = sub_100078734();
  sub_10007886C((uint64_t)v16);
  KeyPath = swift_getKeyPath(&unk_10008ADF8);
  *v4 = swift_getKeyPath(&unk_10008AE28);
  v9 = sub_10001B520(&qword_1000B9A20);
  swift_storeEnumTagMultiPayload(v4, v9, 0);
  *a1 = v5;
  a1[1] = v6;
  a1[2] = v7;
  sub_10002CB18((uint64_t)v16, (uint64_t)(a1 + 3), (uint64_t *)&unk_1000BA260);
  v10 = (int *)type metadata accessor for SmallBackgroundView(0);
  v11 = (_QWORD *)((char *)a1 + v10[8]);
  *v11 = swift_getKeyPath(&unk_10008AE58);
  v12 = sub_10001B520(&qword_1000B9B20);
  swift_storeEnumTagMultiPayload(v11, v12, 0);
  v13 = (char *)a1 + v10[9];
  *(_QWORD *)v13 = KeyPath;
  v13[8] = 0;
  return sub_10002CB18((uint64_t)v4, (uint64_t)a1 + v10[10], &qword_1000B9A28);
}

uint64_t sub_100027C3C()
{
  return static View._viewListCount(inputs:)();
}

uint64_t sub_100027C58(uint64_t a1)
{
  sub_100027CC0(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 96), *(_QWORD *)(a1 + 104), *(_QWORD *)(a1 + 112), *(_QWORD *)(a1 + 120), *(_QWORD *)(a1 + 128), *(_QWORD *)(a1 + 136), *(_QWORD *)(a1 + 144), *(_QWORD *)(a1 + 152), *(_QWORD *)(a1 + 160),
    *(_QWORD *)(a1 + 168),
    *(_QWORD *)(a1 + 176),
    *(_BYTE *)(a1 + 184));
  return a1;
}

uint64_t sub_100027CC0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22)
{
  if ((a22 & 1) == 0)
  {
    swift_release(a18);
    swift_release(a21);
    a1 = a3;
  }
  return swift_release(a1);
}

uint64_t sub_100027CFC@<X0>(_QWORD *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = sub_1000269FC(&v3);
  *a1 = v3;
  return result;
}

uint64_t sub_100027D34(uint64_t a1, uint64_t (*a2)(_QWORD))
{
  uint64_t v3;

  v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_100027D70()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char v12;
  char v13;
  char v14;
  uint64_t v15;
  char v16;
  void (*v17)(char *, uint64_t);
  uint64_t v19;

  v1 = type metadata accessor for WidgetRenderingMode(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = __chkstk_darwin(v1);
  v5 = (char *)&v19 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  v7 = (char *)&v19 - v6;
  v8 = type metadata accessor for SmallHeadlineContentView(0);
  __chkstk_darwin(v8);
  v10 = (char *)&v19 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = *(_QWORD *)v0;
  v12 = *(_BYTE *)(v0 + 8);
  sub_100024758(*(_QWORD *)v0, v12);
  v13 = sub_10002A004(v11, v12);
  sub_10002C790(v11, v12);
  sub_10002A83C(v0, (uint64_t)v10, type metadata accessor for SmallHeadlineContentView);
  if ((v13 & 1) != 0)
  {
    sub_100027D34((uint64_t)v10, type metadata accessor for SmallHeadlineContentView);
    v14 = 0;
  }
  else
  {
    v15 = sub_10002A3F0(&qword_1000B9A20, (uint64_t (*)(_QWORD))&type metadata accessor for WidgetRenderingMode, 0xD000000000000013, 0x8000000100090A60, v7);
    static WidgetRenderingMode.accented.getter(v15);
    v16 = static WidgetRenderingMode.== infix(_:_:)(v7, v5);
    v17 = *(void (**)(char *, uint64_t))(v2 + 8);
    v17(v5, v1);
    v17(v7, v1);
    sub_100027D34((uint64_t)v10, type metadata accessor for SmallHeadlineContentView);
    v14 = v16 ^ 1;
  }
  return v14 & 1;
}

uint64_t sub_100027F1C@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;

  v3 = sub_10001B520(&qword_1000B9CB0);
  __chkstk_darwin(v3);
  v5 = (char *)&v23 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_10001B520(&qword_1000B9CB8);
  __chkstk_darwin(v6);
  v8 = (char *)&v23 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_10001B520(&qword_1000B9CC0);
  __chkstk_darwin(v9);
  v11 = (char *)&v23 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_100027D70();
  v13 = static HorizontalAlignment.leading.getter();
  if ((v12 & 1) != 0)
  {
    *(_QWORD *)v11 = v13;
    *((_QWORD *)v11 + 1) = 0;
    v11[16] = 1;
    v14 = sub_10001B520(&qword_1000B9CE0);
    sub_100029148(v1, (uint64_t)&v11[*(int *)(v14 + 44)]);
    v15 = &qword_1000B9CC0;
    sub_10002CCB0((uint64_t)v11, (uint64_t)v8, &qword_1000B9CC0);
    swift_storeEnumTagMultiPayload(v8, v6, 0);
    v16 = sub_10002CE94(&qword_1000B9CD0, &qword_1000B9CC0, (uint64_t)&protocol conformance descriptor for VStack<A>);
    v17 = sub_10002CE94(&qword_1000B9CD8, &qword_1000B9CB0, (uint64_t)&protocol conformance descriptor for VStack<A>);
    _ConditionalContent<>.init(storage:)(a1, v8, v9, v3, v16, v17);
    v18 = (uint64_t)v11;
  }
  else
  {
    *(_QWORD *)v5 = v13;
    *((_QWORD *)v5 + 1) = 0;
    v5[16] = 1;
    v19 = sub_10001B520(&qword_1000B9CC8);
    sub_10002817C((uint64_t)&v5[*(int *)(v19 + 44)]);
    v15 = &qword_1000B9CB0;
    sub_10002CCB0((uint64_t)v5, (uint64_t)v8, &qword_1000B9CB0);
    swift_storeEnumTagMultiPayload(v8, v6, 1);
    v20 = sub_10002CE94(&qword_1000B9CD0, &qword_1000B9CC0, (uint64_t)&protocol conformance descriptor for VStack<A>);
    v21 = sub_10002CE94(&qword_1000B9CD8, &qword_1000B9CB0, (uint64_t)&protocol conformance descriptor for VStack<A>);
    _ConditionalContent<>.init(storage:)(a1, v8, v9, v3, v20, v21);
    v18 = (uint64_t)v5;
  }
  return sub_10002CCF4(v18, v15);
}

void sub_10002817C(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  unsigned __int8 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  id v29;
  double v30;
  double v31;
  uint64_t v32;
  double v33;
  double v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  char *v38;
  double v39;
  uint64_t v40;
  void (*v41)(char *, char *, uint64_t, double);
  char *v42;
  void (*v43)(char *, uint64_t);
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  int *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  int v60;
  int v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  int v65;
  uint64_t v66;
  int v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  unsigned __int8 v79;
  uint64_t v80;
  unsigned __int8 v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  unsigned __int8 v85;
  uint64_t v86;
  unsigned __int8 v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  unsigned __int8 v91;
  uint64_t v92;
  unsigned __int8 v93;
  uint64_t v94;
  uint64_t v95;

  v2 = sub_10001B520(&qword_1000B9DB8);
  v76 = *(_QWORD *)(v2 - 8);
  v3 = __chkstk_darwin(v2);
  v5 = (char *)&v58 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  v7 = (char *)&v58 - v6;
  v8 = sub_10001B520(&qword_1000B9DC0);
  v9 = __chkstk_darwin(v8);
  v77 = (uint64_t)&v58 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v12 = (char *)&v58 - v11;
  v13 = sub_10001B520(&qword_1000B9D00);
  v14 = __chkstk_darwin(v13);
  v16 = (char *)&v58 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  v18 = (char *)&v58 - v17;
  type metadata accessor for SmallHeadlineContentView(0);
  v19 = sub_1000789C8();
  v20 = 0;
  v21 = 0;
  v22 = 0;
  v23 = 0;
  v24 = 0;
  v25 = 0;
  v26 = 0;
  if ((v19 & 1) != 0)
  {
    v20 = sub_10005D160();
    v27 = static Alignment.center.getter(v20);
    _FrameLayout.init(width:height:alignment:)(&v78, 0x4042000000000000, 0, 0x4042000000000000, 0, v27, v28);
    v21 = v78;
    v22 = v79;
    v23 = v80;
    v24 = v81;
    v25 = v82;
    v26 = v83;
  }
  v69 = v20;
  v70 = v22;
  v71 = v23;
  v72 = v24;
  v73 = v21;
  v74 = v25;
  v75 = v26;
  v62 = v18;
  sub_1000286E0((uint64_t)v18);
  v29 = sub_1000438AC();
  objc_msgSend(v29, "capHeight");
  v31 = v30;

  v32 = sub_100043B54();
  v34 = v31 + v33;
  v35 = static Alignment.center.getter(v32);
  v37 = _FrameLayout.init(width:height:alignment:)(&v84, 0, 1, *(_QWORD *)&v34, 0, v35, v36);
  v68 = v84;
  v67 = v85;
  v66 = v86;
  v65 = v87;
  v64 = v88;
  v63 = v89;
  *(_QWORD *)v12 = static VerticalAlignment.center.getter(v37);
  *((_QWORD *)v12 + 1) = 0;
  v12[16] = 1;
  v38 = &v12[*(int *)(sub_10001B520(&qword_1000B9DC8) + 44)];
  v39 = sub_100028C90((uint64_t)v7);
  v40 = v76;
  v41 = *(void (**)(char *, char *, uint64_t, double))(v76 + 16);
  v41(v5, v7, v2, v39);
  ((void (*)(char *, char *, uint64_t))v41)(v38, v5, v2);
  v42 = &v38[*(int *)(sub_10001B520(&qword_1000B9DD0) + 48)];
  *(_QWORD *)v42 = 0;
  v42[8] = 0;
  v43 = *(void (**)(char *, uint64_t))(v40 + 8);
  v43(v7, v2);
  v44 = ((uint64_t (*)(char *, uint64_t))v43)(v5, v2);
  v45 = static Alignment.center.getter(v44);
  _FrameLayout.init(width:height:alignment:)(&v90, 0, 1, 0, 0, v45, v46);
  v76 = v90;
  v61 = v91;
  v47 = v92;
  v60 = v93;
  v59 = v94;
  v58 = v95;
  sub_10002CCB0((uint64_t)v18, (uint64_t)v16, &qword_1000B9D00);
  v48 = v77;
  sub_10002CCB0((uint64_t)v12, v77, &qword_1000B9DC0);
  v49 = v69;
  v50 = v73;
  *(_QWORD *)a1 = v69;
  *(_QWORD *)(a1 + 8) = v50;
  v51 = v71;
  *(_QWORD *)(a1 + 16) = v70;
  *(_QWORD *)(a1 + 24) = v51;
  v52 = v74;
  *(_QWORD *)(a1 + 32) = v72;
  *(_QWORD *)(a1 + 40) = v52;
  *(_QWORD *)(a1 + 48) = v75;
  *(_QWORD *)(a1 + 56) = 0;
  *(_BYTE *)(a1 + 64) = 1;
  v53 = (int *)sub_10001B520(&qword_1000B9DD8);
  sub_10002CCB0((uint64_t)v16, a1 + v53[16], &qword_1000B9D00);
  v54 = a1 + v53[20];
  *(_QWORD *)v54 = 0;
  *(_BYTE *)(v54 + 8) = 1;
  *(_QWORD *)(v54 + 16) = v68;
  *(_BYTE *)(v54 + 24) = v67;
  *(_QWORD *)(v54 + 32) = v66;
  *(_BYTE *)(v54 + 40) = v65;
  v55 = v63;
  *(_QWORD *)(v54 + 48) = v64;
  *(_QWORD *)(v54 + 56) = v55;
  sub_10002CCB0(v48, a1 + v53[24], &qword_1000B9DC0);
  v56 = a1 + v53[28];
  *(_QWORD *)v56 = 0;
  *(_BYTE *)(v56 + 8) = 1;
  *(_QWORD *)(v56 + 16) = v76;
  *(_BYTE *)(v56 + 24) = v61;
  *(_QWORD *)(v56 + 32) = v47;
  *(_BYTE *)(v56 + 40) = v60;
  v57 = v58;
  *(_QWORD *)(v56 + 48) = v59;
  *(_QWORD *)(v56 + 56) = v57;
  swift_retain(v49);
  sub_10002CCF4((uint64_t)v12, &qword_1000B9DC0);
  sub_10002CCF4((uint64_t)v62, &qword_1000B9D00);
  sub_10002CCF4(v48, &qword_1000B9DC0);
  sub_10002CCF4((uint64_t)v16, &qword_1000B9D00);
  swift_release(v49);
}

uint64_t sub_1000286E0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  id *v14;
  id v15;
  id v16;
  uint64_t v17;
  id v18;
  void *v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  double v23;
  void *v24;
  id v25;
  double v26;
  double v27;
  double v28;
  char v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  double v34;
  double v35;
  uint64_t KeyPath;
  uint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  char *v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t *v52;
  void *v53;
  Swift::String v54;
  id v55;
  id v56;
  void *v57;
  uint64_t v58;
  void *v59;
  char v60;
  Swift::String v61;
  Swift::String v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  char *v74;
  uint64_t v76;
  char *v77;
  id v78;
  char *v79;
  uint64_t v80;
  char *v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  void *v86;
  uint64_t v87;
  uint64_t v88;

  v83 = a1;
  v2 = type metadata accessor for AccessibilityTraits(0);
  v84 = *(_QWORD *)(v2 - 8);
  v85 = v2;
  __chkstk_darwin(v2);
  v82 = (char *)&v76 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for LocalizedStringKey.StringInterpolation(0);
  __chkstk_darwin(v4);
  v77 = (char *)&v76 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = (int *)type metadata accessor for SourceView(0);
  __chkstk_darwin(v6);
  v8 = (char *)&v76 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v76 = sub_10001B520(&qword_1000B9D88);
  __chkstk_darwin(v76);
  v10 = (char *)&v76 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v88 = sub_10001B520(&qword_1000B9D90);
  __chkstk_darwin(v88);
  v12 = (char *)&v76 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v80 = sub_10001B520(&qword_1000B9D00);
  __chkstk_darwin(v80);
  v81 = (char *)&v76 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = (id *)(v1 + *(int *)(type metadata accessor for SmallHeadlineContentView(0) + 24));
  v15 = sub_100078AF8();
  v16 = *v14;
  if (v15)
  {
    objc_msgSend(v16, "sourceNameImageScale");
    v87 = v17;
    v86 = v15;
  }
  else
  {
    v18 = objc_msgSend(v16, "sourceName");
    if (v18)
    {
      v19 = v18;
      v86 = (void *)static String._unconditionallyBridgeFromObjectiveC(_:)(v18);
      v87 = v20;

    }
    else
    {
      v86 = 0;
      v87 = 0xE000000000000000;
    }
  }
  v21 = (char *)v14 + *(int *)(type metadata accessor for Item.Headline(0) + 28);
  v22 = *((_QWORD *)v21 + 1);
  v23 = 1.0;
  v79 = v12;
  if (v22)
  {
    v24 = *(void **)v21;
    if (v24)
    {
      v25 = v24;
      objc_msgSend(v25, "ts_luminance");
      v27 = v26;
      sub_10002CC78(0, (unint64_t *)&qword_1000B9DB0, UIColor_ptr);
      v28 = static UIColor.darkLightLuminanceThreshold.getter();

      if (v28 >= v27)
        v23 = 0.8;
    }
  }
  v78 = v15;
  v29 = v15 != 0;
  v30 = v86;
  v31 = v87;
  sub_10002CBBC(v86, v87, v29);
  sub_100045AD8();
  v33 = v32;
  sub_100045AD8();
  v35 = v34 + 3.0;
  KeyPath = swift_getKeyPath(&unk_10008AEB8);
  v37 = swift_getKeyPath(&unk_10008AE28);
  v38 = (uint64_t *)&v8[v6[5]];
  *v38 = v37;
  v39 = sub_10001B520(&qword_1000B9A20);
  swift_storeEnumTagMultiPayload(v38, v39, 0);
  *(_QWORD *)v8 = KeyPath;
  v8[8] = 0;
  v40 = &v8[v6[6]];
  *(_QWORD *)v40 = v30;
  *((_QWORD *)v40 + 1) = v31;
  v40[16] = v29;
  v41 = &v8[v6[7]];
  *(_QWORD *)v41 = v33;
  *((double *)v41 + 1) = v35;
  v42 = sub_100027D70();
  LOBYTE(KeyPath) = v42;
  v43 = static Color.white.getter(v42);
  if ((KeyPath & 1) == 0)
  {
    v44 = Color.opacity(_:)(v23);
    swift_release(v43);
    v43 = v44;
  }
  v45 = (uint64_t)v79;
  v46 = v77;
  v47 = swift_getKeyPath(&unk_10008AE88);
  sub_10002A83C((uint64_t)v8, (uint64_t)v10, type metadata accessor for SourceView);
  v48 = (uint64_t *)&v10[*(int *)(v76 + 36)];
  *v48 = v47;
  v48[1] = v43;
  v49 = sub_100027D34((uint64_t)v8, type metadata accessor for SourceView);
  v50 = static Color.black.getter(v49);
  v51 = Color.opacity(_:)(0.225);
  swift_release(v50);
  sub_10002CCB0((uint64_t)v10, v45, &qword_1000B9D88);
  v52 = (uint64_t *)(v45 + *(int *)(v88 + 36));
  *v52 = v51;
  v52[1] = 0x4020000000000000;
  v52[2] = 0;
  v52[3] = 0;
  sub_10002CCF4((uint64_t)v10, &qword_1000B9D88);
  LocalizedStringKey.StringInterpolation.init(literalCapacity:interpolationCount:)(0, 1);
  v53 = (void *)0xE000000000000000;
  v54._countAndFlagsBits = 0;
  v54._object = (void *)0xE000000000000000;
  LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v54);
  v55 = objc_msgSend(*v14, "sourceName");
  v56 = v78;
  if (v55)
  {
    v57 = v55;
    v58 = static String._unconditionallyBridgeFromObjectiveC(_:)(v55);
    v53 = v59;

  }
  else
  {
    v58 = 0;
  }
  v60 = v56 != 0;
  v61._countAndFlagsBits = v58;
  v61._object = v53;
  LocalizedStringKey.StringInterpolation.appendInterpolation(_:)(v61);
  swift_bridgeObjectRelease(v53);
  v62._countAndFlagsBits = 0;
  v62._object = (void *)0xE000000000000000;
  LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v62);
  v63 = LocalizedStringKey.init(stringInterpolation:)(v46);
  v64 = Text.init(_:tableName:bundle:comment:)(v63);
  v66 = v65;
  v68 = v67;
  v70 = v69 & 1;
  v71 = sub_10002A9F8(&qword_1000B9D98, &qword_1000B9D90, (void (*)(void))sub_10002CBCC);
  v72 = (uint64_t)v81;
  View.accessibility(label:)(v64, v66, v70, v68, v88, v71);
  sub_1000249D8(v64, v66, v70);
  swift_bridgeObjectRelease(v68);
  v73 = sub_10002CCF4(v45, &qword_1000B9D90);
  v74 = v82;
  static AccessibilityTraits.isImage.getter(v73);
  ModifiedContent<>.accessibility(removeTraits:)(v74, v80);
  sub_10002CC68(v86, v87, v60);
  (*(void (**)(char *, uint64_t))(v84 + 8))(v74, v85);
  return sub_10002CCF4(v72, &qword_1000B9D00);
}

double sub_100028C90@<D0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  id v14;
  void *v15;
  uint64_t v16;
  void *v17;
  void *v18;
  Swift::String v19;
  uint64_t v20;
  uint64_t v21;
  id v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  uint64_t v31;
  id v32;
  void *v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  char v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char v52;
  char v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t KeyPath;
  uint64_t v57;
  uint64_t v58;
  void *v59;
  id v60;
  void *v61;
  uint64_t v62;
  unint64_t v63;
  unint64_t v64;
  char *v65;
  id v66;
  id v67;
  uint64_t v68;
  uint64_t v69;
  __n128 v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  double result;
  uint64_t v76;
  uint64_t v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  char v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  char v88;
  uint64_t v89;
  uint64_t v90;
  _QWORD v91[3];

  v80 = a1;
  v81 = type metadata accessor for Locale.Language(0);
  v79 = *(_QWORD *)(v81 - 8);
  __chkstk_darwin(v81);
  v78 = (char *)&v76 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = type metadata accessor for SmallHeadlineContentView(0);
  v4 = sub_1000438AC();
  v5 = Font.init(_:)(v4);
  v6 = sub_10001B520(&qword_1000B9980);
  v7 = swift_allocObject(v6, 152, 7);
  *(_OWORD *)(v7 + 16) = xmmword_10008AC70;
  v76 = *(int *)(v3 + 24);
  v77 = v1;
  v8 = *(void **)(v1 + v76);
  v9 = objc_msgSend(v8, "identifier");
  v10 = static String._unconditionallyBridgeFromObjectiveC(_:)(v9);
  v12 = v11;

  *(_QWORD *)(v7 + 56) = &type metadata for String;
  v13 = sub_10001FB34();
  *(_QWORD *)(v7 + 64) = v13;
  *(_QWORD *)(v7 + 32) = v10;
  *(_QWORD *)(v7 + 40) = v12;
  v82 = 0;
  v83 = 0xE000000000000000;
  v14 = objc_msgSend(v8, "title");
  if (v14)
  {
    v15 = v14;
    v16 = static String._unconditionallyBridgeFromObjectiveC(_:)(v14);
    v18 = v17;

  }
  else
  {
    v16 = 0;
    v18 = (void *)0xE000000000000000;
  }
  v19._countAndFlagsBits = v16;
  v19._object = v18;
  String.append(_:)(v19);
  swift_bridgeObjectRelease(v18);
  v20 = v82;
  v21 = v83;
  *(_QWORD *)(v7 + 96) = &type metadata for String;
  *(_QWORD *)(v7 + 104) = v13;
  *(_QWORD *)(v7 + 72) = v20;
  *(_QWORD *)(v7 + 80) = v21;
  v82 = 0;
  v83 = 0xE000000000000000;
  v22 = objc_msgSend(v8, "language");
  if (v22)
  {
    v23 = v22;
    v24 = static String._unconditionallyBridgeFromObjectiveC(_:)(v22);
    v26 = v25;

  }
  else
  {
    v24 = 0;
    v26 = 0;
  }
  v91[0] = v24;
  v91[1] = v26;
  v27 = sub_10001B520(&qword_1000BBDD0);
  _print_unlocked<A, B>(_:_:)(v91, &v82, v27, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
  swift_bridgeObjectRelease(v26);
  v28 = v82;
  v29 = v83;
  *(_QWORD *)(v7 + 136) = &type metadata for String;
  *(_QWORD *)(v7 + 144) = v13;
  *(_QWORD *)(v7 + 112) = v28;
  *(_QWORD *)(v7 + 120) = v29;
  sub_10002CC78(0, (unint64_t *)&qword_1000BBB00, OS_os_log_ptr);
  v30 = (void *)static OS_os_log.default.getter();
  v31 = static os_log_type_t.default.getter();
  os_log(_:dso:log:type:_:)("creating smallTitleView for headline with identifier: %@, with title: %@, with language: %@", 91, 2, &_mh_execute_header, v30, v31, v7);
  swift_bridgeObjectRelease(v7);

  v32 = objc_msgSend(v8, "title");
  if (v32)
  {
    v33 = v32;
    v34 = static String._unconditionallyBridgeFromObjectiveC(_:)(v32);
    v36 = v35;

  }
  else
  {
    v34 = 0;
    v36 = 0xE000000000000000;
  }
  v37 = swift_retain(v5);
  v38 = Text.font(_:)(v37, v34, v36, 0, _swiftEmptyArrayStorage);
  v40 = v39;
  v42 = v41;
  v44 = v43;
  swift_bridgeObjectRelease(v36);
  v45 = ((uint64_t (*)(uint64_t))swift_release)(v5);
  v46 = v42 & 1;
  v47 = static Color.black.getter(v45);
  v48 = Color.opacity(_:)(0.225);
  swift_release(v47);
  v49 = Text.shadow(color:radius:x:y:)(v48, v38, v40, v46, v44, 8.0, 0.0, 0.0);
  v51 = v50;
  v53 = v52;
  v55 = v54;
  swift_release(v48);
  sub_1000249D8(v38, v40, v46);
  swift_bridgeObjectRelease(v44);
  KeyPath = swift_getKeyPath(&unk_10008AFB0);
  v57 = static Color.white.getter(KeyPath);
  v58 = swift_getKeyPath(&unk_10008AE88);
  v82 = v49;
  v83 = v51;
  v84 = v53 & 1;
  v85 = v55;
  v86 = KeyPath;
  v87 = 3;
  v88 = 0;
  v89 = v58;
  v90 = v57;
  v59 = *(void **)(v77 + v76);
  v60 = objc_msgSend(v59, "language");
  if (v60)
  {
    v61 = v60;
    v62 = static String._unconditionallyBridgeFromObjectiveC(_:)(v60);
    v64 = v63;

  }
  else
  {
    v64 = 0xE200000000000000;
    v62 = 28261;
  }
  v65 = v78;
  Locale.Language.init(identifier:)(v62, v64);
  v66 = objc_msgSend(v59, "language");
  v67 = v66;
  if (v66)

  v68 = sub_10001B520(&qword_1000B9DE0);
  v69 = sub_10002CD8C((unint64_t *)&qword_1000B9DE8, &qword_1000B9DE0, (void (*)(void))sub_10002CE10);
  View.typesettingLanguage(_:isEnabled:)(v65, v67 != 0, v68, v69);
  v70 = swift_release(v5);
  (*(void (**)(char *, uint64_t, __n128))(v79 + 8))(v65, v81, v70);
  v71 = v85;
  v72 = v86;
  v73 = v89;
  v74 = v90;
  sub_1000249D8(v82, v83, v84);
  swift_release(v73);
  swift_release(v72);
  swift_bridgeObjectRelease(v71);
  *(_QWORD *)&result = swift_release(v74).n128_u64[0];
  return result;
}

uint64_t sub_100029148@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  int *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  int v31;
  uint64_t v32[2];
  char v33;
  uint64_t v34;
  uint64_t v35;
  unsigned __int8 v36;
  uint64_t v37;
  unsigned __int8 v38;
  uint64_t v39;
  uint64_t v40;

  v4 = sub_10001B520(&qword_1000B9CE8);
  v5 = __chkstk_darwin(v4);
  v7 = (char *)&v27 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __chkstk_darwin(v5);
  v10 = (char *)&v27 - v9;
  *(_QWORD *)v10 = static VerticalAlignment.center.getter(v8);
  *((_QWORD *)v10 + 1) = 0;
  v10[16] = 1;
  v11 = sub_10001B520(&qword_1000B9CF0);
  v12 = sub_10002933C(a1, (uint64_t)&v10[*(int *)(v11 + 44)]);
  v13 = static Alignment.center.getter(v12);
  _FrameLayout.init(width:height:alignment:)(&v35, 0, 1, 0x4000000000000000, 0, v13, v14);
  v15 = v35;
  v16 = v37;
  v30 = v38;
  v31 = v36;
  v28 = v40;
  v29 = v39;
  sub_100029B28(v32);
  v17 = v32[0];
  v18 = v32[1];
  v19 = v33;
  v20 = v34;
  sub_10002CCB0((uint64_t)v10, (uint64_t)v7, &qword_1000B9CE8);
  sub_10002CCB0((uint64_t)v7, a2, &qword_1000B9CE8);
  v21 = (int *)sub_10001B520(&qword_1000B9CF8);
  v22 = a2 + v21[12];
  *(_QWORD *)v22 = 0;
  *(_BYTE *)(v22 + 8) = 1;
  *(_QWORD *)(v22 + 16) = v15;
  *(_BYTE *)(v22 + 24) = v31;
  *(_QWORD *)(v22 + 32) = v16;
  *(_BYTE *)(v22 + 40) = v30;
  v23 = v28;
  *(_QWORD *)(v22 + 48) = v29;
  *(_QWORD *)(v22 + 56) = v23;
  v24 = a2 + v21[16];
  *(_QWORD *)v24 = v17;
  *(_QWORD *)(v24 + 8) = v18;
  *(_BYTE *)(v24 + 16) = v19;
  *(_QWORD *)(v24 + 24) = v20;
  v25 = a2 + v21[20];
  *(_QWORD *)v25 = 0;
  *(_BYTE *)(v25 + 8) = 1;
  sub_100024770(v17, v18, v19);
  swift_bridgeObjectRetain(v20);
  sub_10002CCF4((uint64_t)v10, &qword_1000B9CE8);
  sub_1000249D8(v17, v18, v19);
  swift_bridgeObjectRelease(v20);
  return sub_10002CCF4((uint64_t)v7, &qword_1000B9CE8);
}

uint64_t sub_10002933C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE *v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t KeyPath;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void (*v30)(char *, _BYTE *, uint64_t);
  _BYTE *v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  _BYTE *v35;
  uint64_t OpaqueTypeConformance2;
  _BYTE *v37;
  uint64_t v38;
  _BYTE *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  _BYTE *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  _BYTE *v68;
  _BYTE *v69;
  _BYTE *v70;
  uint64_t v71;
  _BYTE *v72;
  uint64_t v73;
  uint64_t v74;
  int *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  _BYTE v81[12];
  int v82;
  uint64_t v83;
  int v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  _BYTE *v89;
  uint64_t v90;
  uint64_t v91;
  _BYTE *v92;
  _BYTE *v93;
  _BYTE *v94;
  uint64_t v95;
  uint64_t v96;
  _BYTE *v97;
  _BYTE *v98;
  _BYTE *v99;
  uint64_t v100;
  unsigned __int8 v101;
  _BYTE *v102;
  unsigned __int8 v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  unint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;

  v95 = a1;
  v96 = a2;
  v2 = sub_10001B520(&qword_1000B9D00);
  v3 = __chkstk_darwin(v2);
  v94 = &v81[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v3);
  v93 = &v81[-v5];
  v6 = sub_10001B520(&qword_1000B9D08);
  v7 = __chkstk_darwin(v6);
  v92 = &v81[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v7);
  v98 = &v81[-v9];
  v88 = sub_10001B520(&qword_1000B9D10);
  __chkstk_darwin(v88);
  v11 = (uint64_t *)&v81[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v12 = type metadata accessor for Image.Scale(0);
  v13 = *(_QWORD *)(v12 - 8);
  v14 = v12;
  __chkstk_darwin(v12);
  v16 = &v81[-((v15 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v87 = sub_10001B520(&qword_1000B9D18);
  __chkstk_darwin(v87);
  v18 = (uint64_t *)&v81[-((v17 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v90 = sub_10001B520(&qword_1000B9D20);
  v91 = *(_QWORD *)(v90 - 8);
  __chkstk_darwin(v90);
  v89 = &v81[-((v19 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v20 = sub_10001B520(&qword_1000B9D28);
  v21 = __chkstk_darwin(v20);
  v99 = &v81[-((v22 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v21);
  v97 = &v81[-v23];
  v86 = Image.init(_internalSystemName:)(1937204590, 0xE400000000000000);
  v24 = static Color.pink.getter();
  KeyPath = swift_getKeyPath(&unk_10008AE88);
  v26 = ((uint64_t (*)(void))static Font.footnote.getter)();
  v27 = swift_getKeyPath(&unk_10008AF50);
  v85 = v13;
  v28 = v14;
  (*(void (**)(_BYTE *, _QWORD, uint64_t))(v13 + 104))(v16, enum case for Image.Scale.medium(_:), v14);
  v29 = swift_getKeyPath(&unk_10008AF80);
  v30 = *(void (**)(char *, _BYTE *, uint64_t))(v13 + 16);
  v31 = v16;
  v30((char *)v11 + *(int *)(v88 + 28), v16, v28);
  *v11 = v29;
  v32 = v87;
  sub_10002CCB0((uint64_t)v11, (uint64_t)v18 + *(int *)(v87 + 36), &qword_1000B9D10);
  v33 = v86;
  *v18 = v86;
  v18[1] = KeyPath;
  v18[2] = v24;
  v18[3] = v27;
  v18[4] = v26;
  swift_retain(v33);
  swift_retain(KeyPath);
  swift_retain(v24);
  swift_retain(v27);
  swift_retain(v26);
  sub_10002CCF4((uint64_t)v11, &qword_1000B9D10);
  (*(void (**)(_BYTE *, uint64_t))(v85 + 8))(v31, v28);
  swift_release(v26);
  swift_release(v27);
  swift_release(v24);
  swift_release(KeyPath);
  swift_release(v33);
  v34 = sub_10002C98C();
  v35 = v89;
  View.widgetAccentable(_:)(1, v32, v34);
  sub_10002CCF4((uint64_t)v18, &qword_1000B9D18);
  v106 = v32;
  v107 = v34;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v106, &opaque type descriptor for <<opaque return type of View.widgetAccentable(_:)>>, 1);
  v37 = v99;
  v38 = v90;
  View.accessibilityHidden(_:)(1, v90, OpaqueTypeConformance2);
  (*(void (**)(_BYTE *, uint64_t))(v91 + 8))(v35, v38);
  v39 = v97;
  v40 = sub_10002CB18((uint64_t)v37, (uint64_t)v97, &qword_1000B9D28);
  v41 = static Alignment.center.getter(v40);
  v43 = _FrameLayout.init(width:height:alignment:)(&v100, 0x4008000000000000, 0, 0, 1, v41, v42);
  v91 = v100;
  LODWORD(v90) = v101;
  v89 = v102;
  LODWORD(v88) = v103;
  v87 = v104;
  v86 = v105;
  v44 = static Font.footnote.getter(v43);
  v45 = Text.font(_:)(v44, 108, 0xE100000000000000, 0, _swiftEmptyArrayStorage);
  v47 = v46;
  LOBYTE(v35) = v48;
  v50 = v49;
  swift_release(v44);
  v51 = v35 & 1;
  v53 = static Color.white.getter(v52);
  v54 = Text.foregroundColor(_:)(v53, v45, v47, v51, v50);
  v56 = v55;
  LOBYTE(v28) = v57;
  v59 = v58;
  swift_release(v53);
  sub_1000249D8(v45, v47, v51);
  swift_bridgeObjectRelease(v50);
  v106 = v54;
  v107 = v56;
  LOBYTE(v108) = v28 & 1;
  v109 = v59;
  v110 = 0x3FE6666666666666;
  v60 = sub_10001B520(&qword_1000B9D70);
  v61 = sub_10002CB5C((unint64_t *)&qword_1000B9D78, &qword_1000B9D70);
  v62 = v98;
  View.accessibilityHidden(_:)(1, v60, v61);
  sub_1000249D8(v54, v56, v28 & 1);
  v63 = swift_bridgeObjectRelease(v59);
  v64 = static Alignment.center.getter(v63);
  _FrameLayout.init(width:height:alignment:)(&v106, 0x4008000000000000, 0, 0, 1, v64, v65);
  v85 = v106;
  v84 = v107;
  v83 = v108;
  v82 = v109;
  v66 = v110;
  v67 = v111;
  v68 = v93;
  sub_1000286E0((uint64_t)v93);
  v69 = v99;
  sub_10002CCB0((uint64_t)v39, (uint64_t)v99, &qword_1000B9D28);
  v70 = v92;
  sub_10002CCB0((uint64_t)v62, (uint64_t)v92, &qword_1000B9D08);
  v71 = (uint64_t)v68;
  v72 = v94;
  sub_10002CCB0((uint64_t)v68, (uint64_t)v94, &qword_1000B9D00);
  v73 = (uint64_t)v69;
  v74 = v96;
  sub_10002CCB0(v73, v96, &qword_1000B9D28);
  v75 = (int *)sub_10001B520(&qword_1000B9D80);
  v76 = v74 + v75[12];
  *(_QWORD *)v76 = 0;
  *(_BYTE *)(v76 + 8) = 1;
  *(_QWORD *)(v76 + 16) = v91;
  *(_BYTE *)(v76 + 24) = v90;
  *(_QWORD *)(v76 + 32) = v89;
  *(_BYTE *)(v76 + 40) = v88;
  v77 = v86;
  *(_QWORD *)(v76 + 48) = v87;
  *(_QWORD *)(v76 + 56) = v77;
  sub_10002CCB0((uint64_t)v70, v74 + v75[16], &qword_1000B9D08);
  v78 = v74 + v75[20];
  *(_QWORD *)v78 = 0;
  *(_BYTE *)(v78 + 8) = 1;
  *(_QWORD *)(v78 + 16) = v85;
  *(_BYTE *)(v78 + 24) = v84;
  *(_QWORD *)(v78 + 32) = v83;
  *(_BYTE *)(v78 + 40) = v82;
  *(_QWORD *)(v78 + 48) = v66;
  *(_QWORD *)(v78 + 56) = v67;
  sub_10002CCB0((uint64_t)v72, v74 + v75[24], &qword_1000B9D00);
  v79 = v74 + v75[28];
  *(_QWORD *)v79 = 0;
  *(_BYTE *)(v79 + 8) = 1;
  sub_10002CCF4(v71, &qword_1000B9D00);
  sub_10002CCF4((uint64_t)v98, &qword_1000B9D08);
  sub_10002CCF4((uint64_t)v97, &qword_1000B9D28);
  sub_10002CCF4((uint64_t)v72, &qword_1000B9D00);
  sub_10002CCF4((uint64_t)v70, &qword_1000B9D08);
  return sub_10002CCF4((uint64_t)v99, &qword_1000B9D28);
}

uint64_t sub_100029B28@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  id v15;
  void *v16;
  uint64_t v17;
  void *v18;
  void *v19;
  Swift::String v20;
  uint64_t v21;
  unint64_t v22;
  id v23;
  id v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  void *v32;
  uint64_t v33;
  id v34;
  void *v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  char v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char v54;
  uint64_t v55;
  uint64_t v56;
  char v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char v63;
  char v64;
  uint64_t v65;
  uint64_t v66;
  id v67;
  id v68;
  void *v69;
  uint64_t v70;
  unint64_t v71;
  unint64_t v72;
  id v73;
  id v74;
  _BOOL8 v75;
  uint64_t v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  char v81;
  char v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t result;
  uint64_t *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t *v90;
  id v91;
  char *v92;
  _QWORD v93[2];
  uint64_t v94;
  unint64_t v95;

  v90 = a1;
  v2 = type metadata accessor for Locale.Language(0);
  v88 = *(_QWORD *)(v2 - 8);
  v89 = v2;
  __chkstk_darwin(v2);
  v92 = (char *)&v87 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for SmallHeadlineContentView(0);
  v5 = sub_1000438AC();
  v6 = Font.init(_:)(v5);
  v7 = sub_10001B520(&qword_1000B9980);
  v8 = swift_allocObject(v7, 152, 7);
  *(_OWORD *)(v8 + 16) = xmmword_10008AC70;
  v9 = *(void **)(v1 + *(int *)(v4 + 24));
  v10 = objc_msgSend(v9, "identifier");
  v11 = static String._unconditionallyBridgeFromObjectiveC(_:)(v10);
  v13 = v12;

  *(_QWORD *)(v8 + 56) = &type metadata for String;
  v14 = sub_10001FB34();
  *(_QWORD *)(v8 + 64) = v14;
  *(_QWORD *)(v8 + 32) = v11;
  *(_QWORD *)(v8 + 40) = v13;
  v94 = 0;
  v95 = 0xE000000000000000;
  v91 = v9;
  v15 = objc_msgSend(v9, "title");
  if (v15)
  {
    v16 = v15;
    v17 = static String._unconditionallyBridgeFromObjectiveC(_:)(v15);
    v19 = v18;

  }
  else
  {
    v17 = 0;
    v19 = (void *)0xE000000000000000;
  }
  v20._countAndFlagsBits = v17;
  v20._object = v19;
  String.append(_:)(v20);
  swift_bridgeObjectRelease(v19);
  v21 = v94;
  v22 = v95;
  *(_QWORD *)(v8 + 96) = &type metadata for String;
  *(_QWORD *)(v8 + 104) = v14;
  *(_QWORD *)(v8 + 72) = v21;
  *(_QWORD *)(v8 + 80) = v22;
  v94 = 0;
  v95 = 0xE000000000000000;
  v23 = v91;
  v24 = objc_msgSend(v91, "language");
  if (v24)
  {
    v25 = v24;
    v26 = static String._unconditionallyBridgeFromObjectiveC(_:)(v24);
    v28 = v27;

  }
  else
  {
    v26 = 0;
    v28 = 0;
  }
  v93[0] = v26;
  v93[1] = v28;
  v29 = sub_10001B520(&qword_1000BBDD0);
  _print_unlocked<A, B>(_:_:)(v93, &v94, v29, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
  swift_bridgeObjectRelease(v28);
  v30 = v94;
  v31 = v95;
  *(_QWORD *)(v8 + 136) = &type metadata for String;
  *(_QWORD *)(v8 + 144) = v14;
  *(_QWORD *)(v8 + 112) = v30;
  *(_QWORD *)(v8 + 120) = v31;
  sub_10002CC78(0, (unint64_t *)&qword_1000BBB00, OS_os_log_ptr);
  v32 = (void *)static OS_os_log.default.getter();
  v33 = static os_log_type_t.default.getter();
  os_log(_:dso:log:type:_:)("creating largeTitleView for headline with identifier: %@, with title: %@, with language: %@", 91, 2, &_mh_execute_header, v32, v33, v8);
  swift_bridgeObjectRelease(v8);

  v34 = objc_msgSend(v23, "title");
  if (v34)
  {
    v35 = v34;
    v36 = static String._unconditionallyBridgeFromObjectiveC(_:)(v34);
    v38 = v37;

  }
  else
  {
    v36 = 0;
    v38 = 0xE000000000000000;
  }
  v39 = swift_retain(v6);
  v40 = Text.font(_:)(v39, v36, v38, 0, _swiftEmptyArrayStorage);
  v42 = v41;
  v44 = v43;
  v46 = v45;
  swift_bridgeObjectRelease(v38);
  v87 = v6;
  swift_release(v6);
  v47 = v44 & 1;
  v49 = static Color.black.getter(v48);
  v50 = Color.opacity(_:)(0.225);
  swift_release(v49);
  v51 = Text.shadow(color:radius:x:y:)(v50, v40, v42, v47, v46, 8.0, 0.0, 0.0);
  v53 = v52;
  LOBYTE(v49) = v54;
  v56 = v55;
  swift_release(v50);
  v57 = v49 & 1;
  sub_1000249D8(v40, v42, v47);
  v58 = swift_bridgeObjectRelease(v46);
  v59 = static Color.white.getter(v58);
  v60 = Text.foregroundColor(_:)(v59, v51, v53, v49 & 1, v56);
  v62 = v61;
  v64 = v63;
  v66 = v65;
  swift_release(v59);
  sub_1000249D8(v51, v53, v57);
  swift_bridgeObjectRelease(v56);
  v67 = v91;
  v68 = objc_msgSend(v91, "language");
  if (v68)
  {
    v69 = v68;
    v70 = static String._unconditionallyBridgeFromObjectiveC(_:)(v68);
    v72 = v71;

  }
  else
  {
    v72 = 0xE200000000000000;
    v70 = 28261;
  }
  Locale.Language.init(identifier:)(v70, v72);
  v73 = objc_msgSend(v67, "language");
  v74 = v73;
  if (v73)

  v75 = v74 != 0;
  v76 = v64 & 1;
  v77 = v92;
  v78 = Text.typesettingLanguage(_:isEnabled:)(v92, v75, v60, v62, v76, v66);
  v80 = v79;
  v82 = v81;
  v84 = v83;
  sub_1000249D8(v60, v62, v76);
  swift_release(v87);
  swift_bridgeObjectRelease(v66);
  result = (*(uint64_t (**)(char *, uint64_t))(v88 + 8))(v77, v89);
  v86 = v90;
  *v90 = v78;
  v86[1] = v80;
  *((_BYTE *)v86 + 16) = v82 & 1;
  v86[3] = v84;
  return result;
}

uint64_t sub_100029FC8()
{
  return EnvironmentValues.redactionReasons.getter();
}

uint64_t sub_100029FE8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10002C8EC(a1, a2, a3, a4, (void (*)(_QWORD))&type metadata accessor for RedactionReasons, (uint64_t (*)(char *))&EnvironmentValues.redactionReasons.setter);
}

uint64_t sub_10002A004(uint64_t a1, char a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  os_log_type_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint8_t *v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;

  v4 = type metadata accessor for EnvironmentValues(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((a2 & 1) != 0)
    return a1 & 1;
  v8 = swift_retain(a1);
  v9 = static os_log_type_t.fault.getter(v8);
  v10 = static Log.runtimeIssuesLog.getter();
  v11 = v9;
  if (os_log_type_enabled(v10, v9))
  {
    v12 = (uint8_t *)swift_slowAlloc(12, -1);
    v13 = swift_slowAlloc(32, -1);
    v16 = v13;
    *(_DWORD *)v12 = 136315138;
    v15 = sub_10006AE74(1819242306, 0xE400000000000000, &v16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v15, &v16, v12 + 4, v12 + 12);
    _os_log_impl((void *)&_mh_execute_header, v10, v11, "Accessing Environment<%s>'s value outside of being installed on a View. This will always read the default value and will not update.", v12, 0xCu);
    swift_arrayDestroy(v13, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v13, -1, -1);
    swift_slowDealloc(v12, -1, -1);
  }

  EnvironmentValues.init()();
  swift_getAtKeyPath(&v16, v7, a1);
  sub_10002C790(a1, 0);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  return v16;
}

uint64_t sub_10002A1BC@<X0>(_QWORD *a1@<X8>)
{
  return sub_10002A3F0(&qword_1000B9A20, (uint64_t (*)(_QWORD))&type metadata accessor for WidgetRenderingMode, 0xD000000000000013, 0x8000000100090A60, a1);
}

double sub_10002A1E8()
{
  _BYTE *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v7;
  os_log_type_t v8;
  NSObject *v9;
  os_log_type_t v10;
  uint8_t *v11;
  uint64_t v12;
  uint8_t *v13;
  uint64_t v14;
  double v15;

  v1 = type metadata accessor for EnvironmentValues(0);
  v2 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  v4 = (char *)&v13 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = *(_QWORD *)v0;
  if (v0[32] == 1)
    return *(double *)v0;
  v7 = swift_retain(*(_QWORD *)v0);
  v8 = static os_log_type_t.fault.getter(v7);
  v9 = static Log.runtimeIssuesLog.getter();
  v10 = v8;
  if (os_log_type_enabled(v9, v8))
  {
    v11 = (uint8_t *)swift_slowAlloc(12, -1);
    v12 = swift_slowAlloc(32, -1);
    v15 = *(double *)&v12;
    *(_DWORD *)v11 = 136315138;
    v13 = v11 + 4;
    v14 = sub_10006AE74(0x65736E4965676445, 0xEA00000000007374, (uint64_t *)&v15);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v14, &v15, v13, v11 + 12);
    _os_log_impl((void *)&_mh_execute_header, v9, v10, "Accessing Environment<%s>'s value outside of being installed on a View. This will always read the default value and will not update.", v11, 0xCu);
    swift_arrayDestroy(v12, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v12, -1, -1);
    swift_slowDealloc(v11, -1, -1);
  }

  EnvironmentValues.init()();
  swift_getAtKeyPath(&v15, v4, v5);
  sub_10002A894((uint64_t)v0, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1000249CC);
  (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  return v15;
}

uint64_t sub_10002A3C4@<X0>(_QWORD *a1@<X8>)
{
  return sub_10002A3F0(&qword_1000B9B20, (uint64_t (*)(_QWORD))&type metadata accessor for RedactionReasons, 0xD000000000000010, 0x8000000100090A80, a1);
}

uint64_t sub_10002A3F0@<X0>(uint64_t *a1@<X0>, uint64_t (*a2)(_QWORD)@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  uint64_t v5;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t EnumCaseMultiPayload;
  uint64_t v19;
  uint64_t v21;
  os_log_type_t v22;
  NSObject *v23;
  uint64_t v24;
  uint8_t *v25;
  uint64_t v26;
  uint8_t *v27;
  uint64_t v28;
  unint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  v31 = a3;
  v9 = v5;
  v11 = type metadata accessor for EnvironmentValues(0);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v14 = (char *)&v28 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = sub_10001B520(a1);
  __chkstk_darwin(v15);
  v17 = (uint64_t *)((char *)&v28 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_10002CCB0(v9, (uint64_t)v17, a1);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v17, v15);
  if ((_DWORD)EnumCaseMultiPayload == 1)
  {
    v19 = a2(0);
    return (*(uint64_t (**)(_QWORD *, uint64_t *, uint64_t))(*(_QWORD *)(v19 - 8) + 32))(a5, v17, v19);
  }
  else
  {
    v21 = *v17;
    v22 = static os_log_type_t.fault.getter(EnumCaseMultiPayload);
    v23 = static Log.runtimeIssuesLog.getter();
    if (os_log_type_enabled(v23, v22))
    {
      v29 = a4;
      v24 = swift_slowAlloc(12, -1);
      v30 = a5;
      v25 = (uint8_t *)v24;
      v26 = swift_slowAlloc(32, -1);
      v33 = v26;
      *(_DWORD *)v25 = 136315138;
      v32 = sub_10006AE74(v31, v29, &v33);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v32, &v33, v25 + 4, v25 + 12);
      _os_log_impl((void *)&_mh_execute_header, v23, v22, "Accessing Environment<%s>'s value outside of being installed on a View. This will always read the default value and will not update.", v25, 0xCu);
      swift_arrayDestroy(v26, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v26, -1, -1);
      v27 = v25;
      a5 = v30;
      swift_slowDealloc(v27, -1, -1);
    }

    EnvironmentValues.init()();
    swift_getAtKeyPath(a5, v14, v21);
    swift_release(v21);
    return (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v14, v11);
  }
}

double sub_10002A628(uint64_t a1, char a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  os_log_type_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint8_t *v12;
  uint64_t v13;
  uint64_t v15;
  double v16;

  v4 = type metadata accessor for EnvironmentValues(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((a2 & 1) != 0)
    return *(double *)&a1;
  v8 = swift_retain(a1);
  v9 = static os_log_type_t.fault.getter(v8);
  v10 = static Log.runtimeIssuesLog.getter();
  v11 = v9;
  if (os_log_type_enabled(v10, v9))
  {
    v12 = (uint8_t *)swift_slowAlloc(12, -1);
    v13 = swift_slowAlloc(32, -1);
    v16 = *(double *)&v13;
    *(_DWORD *)v12 = 136315138;
    v15 = sub_10006AE74(0x74616F6C464743, 0xE700000000000000, (uint64_t *)&v16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v15, &v16, v12 + 4, v12 + 12);
    _os_log_impl((void *)&_mh_execute_header, v10, v11, "Accessing Environment<%s>'s value outside of being installed on a View. This will always read the default value and will not update.", v12, 0xCu);
    swift_arrayDestroy(v13, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v13, -1, -1);
    swift_slowDealloc(v12, -1, -1);
  }

  EnvironmentValues.init()();
  swift_getAtKeyPath(&v16, v7, a1);
  sub_10002C790(a1, 0);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  return v16;
}

uint64_t sub_10002A7F0()
{
  return EnvironmentValues.redactionReasons.getter();
}

uint64_t sub_10002A810(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10002C8EC(a1, a2, a3, a4, (void (*)(_QWORD))&type metadata accessor for RedactionReasons, (uint64_t (*)(char *))&EnvironmentValues.redactionReasons.setter);
}

uint64_t sub_10002A834@<X0>(_QWORD *a1@<X8>)
{
  return sub_100027ACC(a1);
}

uint64_t sub_10002A83C(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v5;

  v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_10002A880(uint64_t result)
{
  *(_BYTE *)(result + 168) = 1;
  return result;
}

uint64_t sub_10002A88C(uint64_t result)
{
  *(_BYTE *)(result + 168) = 0;
  return result;
}

uint64_t sub_10002A894(uint64_t a1, void (*a2)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))
{
  a2(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(unsigned __int8 *)(a1 + 32));
  return a1;
}

uint64_t sub_10002A8CC@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = EnvironmentValues.foregroundColor.getter();
  *a1 = result;
  return result;
}

uint64_t sub_10002A8F4@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = EnvironmentValues.foregroundColor.getter();
  *a1 = result;
  return result;
}

uint64_t sub_10002A91C(_QWORD *a1)
{
  uint64_t v1;

  v1 = swift_retain(*a1);
  return EnvironmentValues.foregroundColor.setter(v1);
}

uint64_t sub_10002A944(_QWORD *a1)
{
  uint64_t v1;

  v1 = swift_retain(*a1);
  return EnvironmentValues.foregroundColor.setter(v1);
}

unint64_t sub_10002A96C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000B9B90;
  if (!qword_1000B9B90)
  {
    v1 = sub_10001B560(&qword_1000B9B98);
    sub_10002CB5C(&qword_1000B9BA0, &qword_1000B9BA8);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000B9B90);
  }
  return result;
}

uint64_t sub_10002A9F8(unint64_t *a1, uint64_t *a2, void (*a3)(void))
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    v6 = sub_10001B560(a2);
    a3();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v6);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_10002AA64()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_1000B9BC8;
  if (!qword_1000B9BC8)
  {
    v1 = sub_10001B560(&qword_1000B9B60);
    v2[0] = sub_10001B560(&qword_1000B9B80);
    v2[1] = sub_10002CD8C(&qword_1000B9B88, &qword_1000B9B80, (void (*)(void))sub_10002A96C);
    swift_getOpaqueTypeConformance2(v2, &opaque type descriptor for <<opaque return type of View.widgetAccentable(_:)>>, 1);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000B9BC8);
  }
  return result;
}

unint64_t sub_10002AB18()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_1000B9BD0;
  if (!qword_1000B9BD0)
  {
    v1 = sub_10001B560(&qword_1000B9B78);
    v2[0] = sub_10001B560(&qword_1000B9B68);
    v2[1] = sub_10002A9F8(&qword_1000B9BC0, &qword_1000B9B68, (void (*)(void))sub_10002AA64);
    swift_getOpaqueTypeConformance2(v2, &opaque type descriptor for <<opaque return type of View.unredacted()>>, 1);
    sub_10001C96C((unint64_t *)&qword_1000B9BD8, (uint64_t (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier, (uint64_t)&protocol conformance descriptor for AccessibilityAttachmentModifier);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000B9BD0);
  }
  return result;
}

uint64_t type metadata accessor for SmallHeadlineContentView(uint64_t a1)
{
  return sub_10002ABF8(a1, qword_1000B9C68, (uint64_t)&nominal type descriptor for SmallHeadlineContentView);
}

uint64_t sub_10002ABF8(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t result;

  result = *a2;
  if (!*a2)
    return swift_getSingletonMetadata(a1, a3);
  return result;
}

unint64_t sub_10002AC2C()
{
  unint64_t result;

  result = qword_1000B9BF0;
  if (!qword_1000B9BF0)
  {
    result = swift_getWitnessTable(&unk_10008B04C, &type metadata for MessageView);
    atomic_store(result, (unint64_t *)&qword_1000B9BF0);
  }
  return result;
}

uint64_t sub_10002AC74(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v5;

  v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

unint64_t sub_10002ACB8()
{
  unint64_t result;

  result = qword_1000B9C00;
  if (!qword_1000B9C00)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for String, &type metadata for String);
    atomic_store(result, (unint64_t *)&qword_1000B9C00);
  }
  return result;
}

unint64_t sub_10002ACFC()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_1000B9C08;
  if (!qword_1000B9C08)
  {
    v1 = sub_10001B560(&qword_1000B9BE8);
    v2[0] = type metadata accessor for SmallHeadlineContentView(255);
    v2[1] = sub_10001C96C(&qword_1000B9BF8, type metadata accessor for SmallHeadlineContentView, (uint64_t)&unk_10008AEFC);
    swift_getOpaqueTypeConformance2(v2, &opaque type descriptor for <<opaque return type of View.accessibilityElement(children:)>>, 1);
    sub_10001C96C((unint64_t *)&qword_1000B9BD8, (uint64_t (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier, (uint64_t)&protocol conformance descriptor for AccessibilityAttachmentModifier);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000B9C08);
  }
  return result;
}

unint64_t sub_10002ADBC(unint64_t a1, char *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  char v8;
  uint64_t v9;
  _QWORD *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int (*v28)(char *, uint64_t, uint64_t);
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  char *v32;
  void *v33;
  void *v34;
  id v35;
  id v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  void *v41;
  uint64_t v42;
  uint64_t v43;
  int *v44;
  uint64_t v45;
  void *v46;
  char *v47;
  id v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  _QWORD *v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  int *v63;
  uint64_t v64;
  char *v65;
  uint64_t v66;
  unint64_t v67;
  void (*v68)(uint64_t, char *, uint64_t);
  uint64_t v69;
  uint64_t v70;
  char *v71;
  uint64_t v72;
  uint64_t v74;
  unsigned int (*v75)(char *, uint64_t, uint64_t);
  char *__dst;
  char *__dsta;
  unint64_t v78;
  uint64_t v79;
  uint64_t v80;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v15 = *(_QWORD *)a2;
    *(_QWORD *)a1 = *(_QWORD *)a2;
    v16 = v15 + ((v5 + 16) & ~(unint64_t)v5);
    swift_retain(v15);
  }
  else
  {
    v7 = *(_QWORD *)a2;
    v8 = a2[8];
    sub_100024758(*(_QWORD *)a2, v8);
    *(_QWORD *)a1 = v7;
    *(_BYTE *)(a1 + 8) = v8;
    v9 = *(int *)(a3 + 20);
    v10 = (_QWORD *)(a1 + v9);
    v11 = &a2[v9];
    v12 = sub_10001B520(&qword_1000B9A20);
    if (swift_getEnumCaseMultiPayload(v11, v12) == 1)
    {
      v13 = type metadata accessor for WidgetRenderingMode(0);
      (*(void (**)(_QWORD *, char *, uint64_t))(*(_QWORD *)(v13 - 8) + 16))(v10, v11, v13);
      v14 = 1;
    }
    else
    {
      v17 = *(_QWORD *)v11;
      *v10 = *(_QWORD *)v11;
      swift_retain(v17);
      v14 = 0;
    }
    swift_storeEnumTagMultiPayload(v10, v12, v14);
    v78 = a1;
    v79 = a3;
    v18 = *(int *)(a3 + 24);
    v19 = (_QWORD *)(a1 + v18);
    v20 = &a2[v18];
    v21 = *(_QWORD *)&a2[v18];
    v22 = *(_QWORD *)&a2[v18 + 8];
    *v19 = v21;
    v19[1] = v22;
    v23 = type metadata accessor for Item.Headline(0);
    v24 = *(int *)(v23 + 24);
    __dst = (char *)v19 + v24;
    v25 = &v20[v24];
    v26 = type metadata accessor for URL(0);
    v27 = *(_QWORD *)(v26 - 8);
    v28 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v27 + 48);
    swift_unknownObjectRetain(v21);
    swift_retain(v22);
    v75 = v28;
    if (v28(v25, 1, v26))
    {
      v29 = sub_10001B520(&qword_1000B93A0);
      memcpy(__dst, v25, *(_QWORD *)(*(_QWORD *)(v29 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v27 + 16))(__dst, v25, v26);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v27 + 56))(__dst, 0, 1, v26);
    }
    v30 = *(int *)(v23 + 28);
    v31 = (_QWORD *)((char *)v19 + v30);
    v32 = &v20[v30];
    v33 = (void *)*((_QWORD *)v32 + 1);
    v74 = v27;
    if (v33)
    {
      v34 = *(void **)v32;
      *v31 = v34;
      v31[1] = v33;
      v35 = v34;
      v36 = v33;
    }
    else
    {
      *(_OWORD *)v31 = *(_OWORD *)v32;
    }
    v37 = v78;
    v38 = *(int *)(v79 + 28);
    v39 = v78 + v38;
    __dsta = a2;
    v40 = &a2[v38];
    v41 = *(void **)&a2[v38];
    v42 = *((_QWORD *)v40 + 1);
    *(_QWORD *)v39 = v41;
    *(_QWORD *)(v39 + 8) = v42;
    v43 = *((_QWORD *)v40 + 2);
    *(_QWORD *)(v39 + 16) = v43;
    *(_BYTE *)(v39 + 24) = v40[24];
    v44 = (int *)type metadata accessor for TodayContent(0);
    v45 = v44[8];
    v46 = (void *)(v39 + v45);
    v47 = &v40[v45];
    v48 = v41;
    swift_bridgeObjectRetain(v42);
    swift_unknownObjectRetain(v43);
    if (v75(v47, 1, v26))
    {
      v49 = sub_10001B520(&qword_1000B93A0);
      memcpy(v46, v47, *(_QWORD *)(*(_QWORD *)(v49 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, char *, uint64_t))(v74 + 16))(v46, v47, v26);
      v37 = v78;
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v74 + 56))(v46, 0, 1, v26);
    }
    v50 = v44[9];
    v51 = *(_QWORD *)&v40[v50];
    *(_QWORD *)(v39 + v50) = v51;
    v52 = v44[10];
    v53 = (_QWORD *)(v39 + v52);
    v54 = &v40[v52];
    v55 = *((_QWORD *)v54 + 1);
    *v53 = *(_QWORD *)v54;
    v53[1] = v55;
    v56 = v44[11];
    v57 = (_QWORD *)(v39 + v56);
    v58 = &v40[v56];
    v59 = *((_QWORD *)v58 + 1);
    *v57 = *(_QWORD *)v58;
    v57[1] = v59;
    v60 = *(int *)(v79 + 32);
    v61 = v37 + v60;
    v62 = &__dsta[v60];
    *(_OWORD *)(v37 + v60) = *(_OWORD *)&__dsta[v60];
    v63 = (int *)type metadata accessor for LayoutContext(0);
    v64 = v63[6];
    v80 = v61 + v64;
    v65 = &v62[v64];
    v66 = type metadata accessor for InternalWidgetFamily(0);
    v67 = v37;
    v68 = *(void (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(v66 - 8) + 16);
    swift_retain(v51);
    swift_bridgeObjectRetain(v55);
    swift_bridgeObjectRetain(v59);
    v68(v80, v65, v66);
    v16 = v67;
    *(_OWORD *)(v61 + v63[7]) = *(_OWORD *)&v62[v63[7]];
    v69 = v63[8];
    v70 = v61 + v69;
    v71 = &v62[v69];
    v72 = type metadata accessor for ContentSizeCategory(0);
    (*(void (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(v72 - 8) + 16))(v70, v71, v72);
    *(_QWORD *)(v61 + v63[9]) = *(_QWORD *)&v62[v63[9]];
    *(_QWORD *)(v61 + v63[10]) = *(_QWORD *)&v62[v63[10]];
    *(_BYTE *)(v61 + v63[11]) = v62[v63[11]];
    *(_BYTE *)(v61 + v63[12]) = v62[v63[12]];
  }
  return v16;
}

uint64_t sub_10002B1A0(uint64_t a1, int *a2)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int (*v12)(char *, uint64_t, uint64_t);
  id *v13;
  uint64_t v14;
  int *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  sub_10002C790(*(_QWORD *)a1, *(_BYTE *)(a1 + 8));
  v4 = (_QWORD *)(a1 + a2[5]);
  v5 = sub_10001B520(&qword_1000B9A20);
  if (swift_getEnumCaseMultiPayload(v4, v5) == 1)
  {
    v6 = type metadata accessor for WidgetRenderingMode(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v4, v6);
  }
  else
  {
    swift_release(*v4);
  }
  v7 = (_QWORD *)(a1 + a2[6]);
  swift_unknownObjectRelease(*v7);
  swift_release(v7[1]);
  v8 = type metadata accessor for Item.Headline(0);
  v9 = (char *)v7 + *(int *)(v8 + 24);
  v10 = type metadata accessor for URL(0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48);
  if (!v12(v9, 1, v10))
    (*(void (**)(char *, uint64_t))(v11 + 8))(v9, v10);
  v13 = (id *)((char *)v7 + *(int *)(v8 + 28));
  if (v13[1])
  {

  }
  v14 = a1 + a2[7];

  swift_bridgeObjectRelease(*(_QWORD *)(v14 + 8));
  swift_unknownObjectRelease(*(_QWORD *)(v14 + 16));
  v15 = (int *)type metadata accessor for TodayContent(0);
  v16 = (char *)(v14 + v15[8]);
  if (!v12(v16, 1, v10))
    (*(void (**)(char *, uint64_t))(v11 + 8))(v16, v10);
  swift_release(*(_QWORD *)(v14 + v15[9]));
  swift_bridgeObjectRelease(*(_QWORD *)(v14 + v15[10] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v14 + v15[11] + 8));
  v17 = a1 + a2[8];
  v18 = type metadata accessor for LayoutContext(0);
  v19 = v17 + *(int *)(v18 + 24);
  v20 = type metadata accessor for InternalWidgetFamily(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 8))(v19, v20);
  v21 = v17 + *(int *)(v18 + 32);
  v22 = type metadata accessor for ContentSizeCategory(0);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 8))(v21, v22);
}

char *sub_10002B394(char *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  char v7;
  uint64_t v8;
  char *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  const void *v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int (*v25)(const void *, uint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  void *v30;
  void *v31;
  id v32;
  id v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  int *v40;
  uint64_t v41;
  char *v42;
  const void *v43;
  id v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  _QWORD *v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  _QWORD *v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  int *v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  void (*v64)(char *, uint64_t, uint64_t);
  uint64_t v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  unsigned int (*v70)(const void *, uint64_t, uint64_t);
  uint64_t v71;
  char *__dst;
  char *__dsta;
  uint64_t v74;

  v6 = *(_QWORD *)a2;
  v7 = *(_BYTE *)(a2 + 8);
  sub_100024758(*(_QWORD *)a2, v7);
  *(_QWORD *)a1 = v6;
  a1[8] = v7;
  v74 = a3;
  v8 = *(int *)(a3 + 20);
  v9 = &a1[v8];
  v10 = (uint64_t *)(a2 + v8);
  v11 = sub_10001B520(&qword_1000B9A20);
  if (swift_getEnumCaseMultiPayload(v10, v11) == 1)
  {
    v12 = type metadata accessor for WidgetRenderingMode(0);
    (*(void (**)(char *, uint64_t *, uint64_t))(*(_QWORD *)(v12 - 8) + 16))(v9, v10, v12);
    v13 = 1;
  }
  else
  {
    v14 = *v10;
    *(_QWORD *)v9 = *v10;
    swift_retain(v14);
    v13 = 0;
  }
  swift_storeEnumTagMultiPayload(v9, v11, v13);
  v15 = *(int *)(a3 + 24);
  v16 = &a1[v15];
  v71 = a2;
  v17 = a2 + v15;
  v18 = *(_QWORD *)(a2 + v15);
  v19 = *(_QWORD *)(a2 + v15 + 8);
  *(_QWORD *)v16 = v18;
  *((_QWORD *)v16 + 1) = v19;
  v20 = type metadata accessor for Item.Headline(0);
  v21 = *(int *)(v20 + 24);
  __dst = &v16[v21];
  v22 = (const void *)(v17 + v21);
  v23 = type metadata accessor for URL(0);
  v24 = *(_QWORD *)(v23 - 8);
  v25 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v24 + 48);
  swift_unknownObjectRetain(v18);
  swift_retain(v19);
  v70 = v25;
  if (v25(v22, 1, v23))
  {
    v26 = sub_10001B520(&qword_1000B93A0);
    memcpy(__dst, v22, *(_QWORD *)(*(_QWORD *)(v26 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, const void *, uint64_t))(v24 + 16))(__dst, v22, v23);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v24 + 56))(__dst, 0, 1, v23);
  }
  v27 = *(int *)(v20 + 28);
  v28 = &v16[v27];
  v29 = v17 + v27;
  v30 = *(void **)(v29 + 8);
  if (v30)
  {
    v31 = *(void **)v29;
    *(_QWORD *)v28 = v31;
    *((_QWORD *)v28 + 1) = v30;
    v32 = v31;
    v33 = v30;
  }
  else
  {
    *(_OWORD *)v28 = *(_OWORD *)v29;
  }
  v34 = *(int *)(v74 + 28);
  __dsta = a1;
  v35 = &a1[v34];
  v36 = v71 + v34;
  v37 = *(void **)(v71 + v34);
  v38 = *(_QWORD *)(v71 + v34 + 8);
  *(_QWORD *)v35 = v37;
  *((_QWORD *)v35 + 1) = v38;
  v39 = *(_QWORD *)(v71 + v34 + 16);
  *((_QWORD *)v35 + 2) = v39;
  v35[24] = *(_BYTE *)(v71 + v34 + 24);
  v40 = (int *)type metadata accessor for TodayContent(0);
  v41 = v40[8];
  v42 = &v35[v41];
  v43 = (const void *)(v36 + v41);
  v44 = v37;
  swift_bridgeObjectRetain(v38);
  swift_unknownObjectRetain(v39);
  if (v70(v43, 1, v23))
  {
    v45 = sub_10001B520(&qword_1000B93A0);
    memcpy(v42, v43, *(_QWORD *)(*(_QWORD *)(v45 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, const void *, uint64_t))(v24 + 16))(v42, v43, v23);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v24 + 56))(v42, 0, 1, v23);
  }
  v46 = v40[9];
  v47 = *(_QWORD *)(v36 + v46);
  *(_QWORD *)&v35[v46] = v47;
  v48 = v40[10];
  v49 = &v35[v48];
  v50 = (_QWORD *)(v36 + v48);
  v51 = v50[1];
  *(_QWORD *)v49 = *v50;
  *((_QWORD *)v49 + 1) = v51;
  v52 = v40[11];
  v53 = &v35[v52];
  v54 = (_QWORD *)(v36 + v52);
  v55 = v54[1];
  *(_QWORD *)v53 = *v54;
  *((_QWORD *)v53 + 1) = v55;
  v56 = *(int *)(v74 + 32);
  v57 = &__dsta[v56];
  v58 = v71 + v56;
  *(_OWORD *)&__dsta[v56] = *(_OWORD *)(v71 + v56);
  v59 = (int *)type metadata accessor for LayoutContext(0);
  v60 = v59[6];
  v61 = &v57[v60];
  v62 = v58 + v60;
  v63 = type metadata accessor for InternalWidgetFamily(0);
  v64 = *(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v63 - 8) + 16);
  swift_retain(v47);
  swift_bridgeObjectRetain(v51);
  swift_bridgeObjectRetain(v55);
  v64(v61, v62, v63);
  *(_OWORD *)&v57[v59[7]] = *(_OWORD *)(v58 + v59[7]);
  v65 = v59[8];
  v66 = &v57[v65];
  v67 = v58 + v65;
  v68 = type metadata accessor for ContentSizeCategory(0);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v68 - 8) + 16))(v66, v67, v68);
  *(_QWORD *)&v57[v59[9]] = *(_QWORD *)(v58 + v59[9]);
  *(_QWORD *)&v57[v59[10]] = *(_QWORD *)(v58 + v59[10]);
  v57[v59[11]] = *(_BYTE *)(v58 + v59[11]);
  v57[v59[12]] = *(_BYTE *)(v58 + v59[12]);
  return __dsta;
}

uint64_t sub_10002B744(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  char v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  void *v27;
  uint64_t v28;
  uint64_t (*v29)(void *, uint64_t, uint64_t);
  int v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  id v38;
  void *v39;
  id v40;
  void *v41;
  void *v42;
  id v43;
  void *v44;
  void *v45;
  id v46;
  id v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  void *v51;
  void *v52;
  id v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  int *v58;
  uint64_t v59;
  void *v60;
  void *v61;
  int v62;
  int v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  _QWORD *v69;
  _QWORD *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  _QWORD *v74;
  _QWORD *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  _QWORD *v79;
  uint64_t v80;
  int *v81;
  uint64_t v82;
  char *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  _QWORD *v87;
  _QWORD *v88;
  uint64_t v89;
  char *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v94;
  uint64_t v95;

  v6 = *(_QWORD *)a2;
  v7 = *(_BYTE *)(a2 + 8);
  sub_100024758(*(_QWORD *)a2, v7);
  v8 = *(_QWORD *)a1;
  v9 = *(_BYTE *)(a1 + 8);
  *(_QWORD *)a1 = v6;
  *(_BYTE *)(a1 + 8) = v7;
  sub_10002C790(v8, v9);
  if (a1 != a2)
  {
    v10 = *(int *)(a3 + 20);
    v11 = (uint64_t *)(a1 + v10);
    v12 = (uint64_t *)(a2 + v10);
    sub_10002CCF4(a1 + v10, &qword_1000B9A20);
    v13 = sub_10001B520(&qword_1000B9A20);
    if (swift_getEnumCaseMultiPayload(v12, v13) == 1)
    {
      v14 = type metadata accessor for WidgetRenderingMode(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v14 - 8) + 16))(v11, v12, v14);
      v15 = 1;
    }
    else
    {
      v16 = *v12;
      *v11 = *v12;
      swift_retain(v16);
      v15 = 0;
    }
    swift_storeEnumTagMultiPayload(v11, v13, v15);
  }
  v95 = a3;
  v17 = *(int *)(a3 + 24);
  v18 = a1 + v17;
  v19 = a2 + v17;
  v20 = *(_QWORD *)(a2 + v17);
  v21 = *(_QWORD *)(a1 + v17);
  *(_QWORD *)(a1 + v17) = v20;
  swift_unknownObjectRetain(v20);
  swift_unknownObjectRelease(v21);
  v22 = *(_QWORD *)(v19 + 8);
  v23 = *(_QWORD *)(v18 + 8);
  *(_QWORD *)(v18 + 8) = v22;
  swift_retain(v22);
  swift_release(v23);
  v24 = type metadata accessor for Item.Headline(0);
  v25 = *(int *)(v24 + 24);
  v26 = (void *)(v18 + v25);
  v27 = (void *)(v19 + v25);
  v28 = type metadata accessor for URL(0);
  v94 = *(_QWORD *)(v28 - 8);
  v29 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v94 + 48);
  v30 = v29(v26, 1, v28);
  v31 = v29(v27, 1, v28);
  if (v30)
  {
    if (!v31)
    {
      (*(void (**)(void *, void *, uint64_t))(v94 + 16))(v26, v27, v28);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v94 + 56))(v26, 0, 1, v28);
      goto LABEL_12;
    }
    goto LABEL_11;
  }
  if (v31)
  {
    (*(void (**)(void *, uint64_t))(v94 + 8))(v26, v28);
LABEL_11:
    v32 = sub_10001B520(&qword_1000B93A0);
    memcpy(v26, v27, *(_QWORD *)(*(_QWORD *)(v32 - 8) + 64));
    goto LABEL_12;
  }
  (*(void (**)(void *, void *, uint64_t))(v94 + 24))(v26, v27, v28);
LABEL_12:
  v33 = *(int *)(v24 + 28);
  v34 = v18 + v33;
  v35 = v19 + v33;
  v36 = *(_QWORD *)(v18 + v33 + 8);
  v37 = *(_QWORD *)(v35 + 8);
  if (v36)
  {
    if (v37)
    {
      v38 = *(id *)v34;
      v39 = *(void **)v35;
      *(_QWORD *)v34 = *(_QWORD *)v35;
      v40 = v39;

      v41 = *(void **)(v35 + 8);
      v42 = *(void **)(v34 + 8);
      *(_QWORD *)(v34 + 8) = v41;
      v43 = v41;

      goto LABEL_19;
    }
    sub_10002BC50((id *)v34);
  }
  else if (v37)
  {
    v44 = *(void **)v35;
    *(_QWORD *)v34 = *(_QWORD *)v35;
    v45 = *(void **)(v35 + 8);
    *(_QWORD *)(v34 + 8) = v45;
    v46 = v44;
    v47 = v45;
    goto LABEL_19;
  }
  *(_OWORD *)v34 = *(_OWORD *)v35;
LABEL_19:
  v48 = *(int *)(v95 + 28);
  v49 = a1 + v48;
  v50 = a2 + v48;
  v51 = *(void **)(a2 + v48);
  v52 = *(void **)v49;
  *(_QWORD *)v49 = v51;
  v53 = v51;

  v54 = *(_QWORD *)(v50 + 8);
  v55 = *(_QWORD *)(v49 + 8);
  *(_QWORD *)(v49 + 8) = v54;
  swift_bridgeObjectRetain(v54);
  swift_bridgeObjectRelease(v55);
  v56 = *(_QWORD *)(v50 + 16);
  v57 = *(_QWORD *)(v49 + 16);
  *(_QWORD *)(v49 + 16) = v56;
  swift_unknownObjectRetain(v56);
  swift_unknownObjectRelease(v57);
  *(_BYTE *)(v49 + 24) = *(_BYTE *)(v50 + 24);
  v58 = (int *)type metadata accessor for TodayContent(0);
  v59 = v58[8];
  v60 = (void *)(v49 + v59);
  v61 = (void *)(v50 + v59);
  v62 = v29((void *)(v49 + v59), 1, v28);
  v63 = v29(v61, 1, v28);
  if (!v62)
  {
    if (!v63)
    {
      (*(void (**)(void *, void *, uint64_t))(v94 + 24))(v60, v61, v28);
      goto LABEL_25;
    }
    (*(void (**)(void *, uint64_t))(v94 + 8))(v60, v28);
    goto LABEL_24;
  }
  if (v63)
  {
LABEL_24:
    v64 = sub_10001B520(&qword_1000B93A0);
    memcpy(v60, v61, *(_QWORD *)(*(_QWORD *)(v64 - 8) + 64));
    goto LABEL_25;
  }
  (*(void (**)(void *, void *, uint64_t))(v94 + 16))(v60, v61, v28);
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v94 + 56))(v60, 0, 1, v28);
LABEL_25:
  v65 = v58[9];
  v66 = *(_QWORD *)(v50 + v65);
  v67 = *(_QWORD *)(v49 + v65);
  *(_QWORD *)(v49 + v65) = v66;
  swift_retain(v66);
  swift_release(v67);
  v68 = v58[10];
  v69 = (_QWORD *)(v49 + v68);
  v70 = (_QWORD *)(v50 + v68);
  *v69 = *v70;
  v71 = v70[1];
  v72 = v69[1];
  v69[1] = v71;
  swift_bridgeObjectRetain(v71);
  swift_bridgeObjectRelease(v72);
  v73 = v58[11];
  v74 = (_QWORD *)(v49 + v73);
  v75 = (_QWORD *)(v50 + v73);
  *v74 = *v75;
  v76 = v75[1];
  v77 = v74[1];
  v74[1] = v76;
  swift_bridgeObjectRetain(v76);
  swift_bridgeObjectRelease(v77);
  v78 = *(int *)(v95 + 32);
  v79 = (_QWORD *)(a1 + v78);
  v80 = a2 + v78;
  *v79 = *(_QWORD *)(a2 + v78);
  v79[1] = *(_QWORD *)(a2 + v78 + 8);
  v81 = (int *)type metadata accessor for LayoutContext(0);
  v82 = v81[6];
  v83 = (char *)v79 + v82;
  v84 = v80 + v82;
  v85 = type metadata accessor for InternalWidgetFamily(0);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v85 - 8) + 24))(v83, v84, v85);
  v86 = v81[7];
  v87 = (_QWORD *)((char *)v79 + v86);
  v88 = (_QWORD *)(v80 + v86);
  *v87 = *v88;
  v87[1] = v88[1];
  v89 = v81[8];
  v90 = (char *)v79 + v89;
  v91 = v80 + v89;
  v92 = type metadata accessor for ContentSizeCategory(0);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v92 - 8) + 24))(v90, v91, v92);
  *(_QWORD *)((char *)v79 + v81[9]) = *(_QWORD *)(v80 + v81[9]);
  *(_QWORD *)((char *)v79 + v81[10]) = *(_QWORD *)(v80 + v81[10]);
  *((_BYTE *)v79 + v81[11]) = *(_BYTE *)(v80 + v81[11]);
  *((_BYTE *)v79 + v81[12]) = *(_BYTE *)(v80 + v81[12]);
  return a1;
}

id *sub_10002BC50(id *a1)
{
  destroy for ImageColorAnalysisResult(a1);
  return a1;
}

uint64_t sub_10002BC84(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v5;
  void *v6;
  const void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  const void *v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int (*v19)(const void *, uint64_t, uint64_t);
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int *v24;
  uint64_t v25;
  void *v26;
  const void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  v5 = a3[5];
  v6 = (void *)(a1 + v5);
  v7 = (const void *)(a2 + v5);
  v8 = sub_10001B520(&qword_1000B9A20);
  if (swift_getEnumCaseMultiPayload(v7, v8) == 1)
  {
    v9 = type metadata accessor for WidgetRenderingMode(0);
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v6, v7, v9);
    swift_storeEnumTagMultiPayload(v6, v8, 1);
  }
  else
  {
    memcpy(v6, v7, *(_QWORD *)(*(_QWORD *)(v8 - 8) + 64));
  }
  v10 = a3[6];
  v11 = a1 + v10;
  v12 = a2 + v10;
  *(_OWORD *)(a1 + v10) = *(_OWORD *)(a2 + v10);
  v13 = type metadata accessor for Item.Headline(0);
  v14 = *(int *)(v13 + 24);
  v15 = (void *)(v11 + v14);
  v16 = (const void *)(v12 + v14);
  v17 = type metadata accessor for URL(0);
  v18 = *(_QWORD *)(v17 - 8);
  v19 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v18 + 48);
  if (v19(v16, 1, v17))
  {
    v20 = sub_10001B520(&qword_1000B93A0);
    memcpy(v15, v16, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v18 + 32))(v15, v16, v17);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v18 + 56))(v15, 0, 1, v17);
  }
  *(_OWORD *)(v11 + *(int *)(v13 + 28)) = *(_OWORD *)(v12 + *(int *)(v13 + 28));
  v21 = a3[7];
  v22 = a1 + v21;
  v23 = a2 + v21;
  *(_OWORD *)v22 = *(_OWORD *)(a2 + v21);
  *(_QWORD *)(v22 + 16) = *(_QWORD *)(a2 + v21 + 16);
  *(_BYTE *)(v22 + 24) = *(_BYTE *)(a2 + v21 + 24);
  v24 = (int *)type metadata accessor for TodayContent(0);
  v25 = v24[8];
  v26 = (void *)(v22 + v25);
  v27 = (const void *)(v23 + v25);
  if (v19((const void *)(v23 + v25), 1, v17))
  {
    v28 = sub_10001B520(&qword_1000B93A0);
    memcpy(v26, v27, *(_QWORD *)(*(_QWORD *)(v28 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v18 + 32))(v26, v27, v17);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v18 + 56))(v26, 0, 1, v17);
  }
  *(_QWORD *)(v22 + v24[9]) = *(_QWORD *)(v23 + v24[9]);
  *(_OWORD *)(v22 + v24[10]) = *(_OWORD *)(v23 + v24[10]);
  *(_OWORD *)(v22 + v24[11]) = *(_OWORD *)(v23 + v24[11]);
  v29 = a3[8];
  v30 = a1 + v29;
  v31 = a2 + v29;
  *(_OWORD *)(a1 + v29) = *(_OWORD *)(a2 + v29);
  v32 = (int *)type metadata accessor for LayoutContext(0);
  v33 = v32[6];
  v34 = v30 + v33;
  v35 = v31 + v33;
  v36 = type metadata accessor for InternalWidgetFamily(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v36 - 8) + 32))(v34, v35, v36);
  *(_OWORD *)(v30 + v32[7]) = *(_OWORD *)(v31 + v32[7]);
  v37 = v32[8];
  v38 = v30 + v37;
  v39 = v31 + v37;
  v40 = type metadata accessor for ContentSizeCategory(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v40 - 8) + 32))(v38, v39, v40);
  *(_QWORD *)(v30 + v32[9]) = *(_QWORD *)(v31 + v32[9]);
  *(_QWORD *)(v30 + v32[10]) = *(_QWORD *)(v31 + v32[10]);
  *(_BYTE *)(v30 + v32[11]) = *(_BYTE *)(v31 + v32[11]);
  *(_BYTE *)(v30 + v32[12]) = *(_BYTE *)(v31 + v32[12]);
  return a1;
}

uint64_t sub_10002BF90(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  char v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  void *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  void *v23;
  uint64_t v24;
  uint64_t (*v25)(void *, uint64_t, uint64_t);
  int v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  id v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  int *v40;
  uint64_t v41;
  void *v42;
  void *v43;
  int v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  _QWORD *v56;
  uint64_t *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  int *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v74;
  uint64_t v75;

  v6 = *a2;
  v7 = *((_BYTE *)a2 + 8);
  v8 = *(_QWORD *)a1;
  v9 = *(_BYTE *)(a1 + 8);
  *(_QWORD *)a1 = v6;
  *(_BYTE *)(a1 + 8) = v7;
  sub_10002C790(v8, v9);
  if ((uint64_t *)a1 != a2)
  {
    v10 = *(int *)(a3 + 20);
    v11 = (void *)(a1 + v10);
    v12 = (char *)a2 + v10;
    sub_10002CCF4(a1 + v10, &qword_1000B9A20);
    v13 = sub_10001B520(&qword_1000B9A20);
    if (swift_getEnumCaseMultiPayload(v12, v13) == 1)
    {
      v14 = type metadata accessor for WidgetRenderingMode(0);
      (*(void (**)(void *, char *, uint64_t))(*(_QWORD *)(v14 - 8) + 32))(v11, v12, v14);
      swift_storeEnumTagMultiPayload(v11, v13, 1);
    }
    else
    {
      memcpy(v11, v12, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
    }
  }
  v75 = a3;
  v15 = *(int *)(a3 + 24);
  v16 = a1 + v15;
  v17 = (uint64_t)a2 + v15;
  v18 = *(_QWORD *)(a1 + v15);
  *(_QWORD *)(a1 + v15) = *(uint64_t *)((char *)a2 + v15);
  swift_unknownObjectRelease(v18);
  v19 = *(_QWORD *)(v16 + 8);
  *(_QWORD *)(v16 + 8) = *(_QWORD *)(v17 + 8);
  swift_release(v19);
  v20 = type metadata accessor for Item.Headline(0);
  v21 = *(int *)(v20 + 24);
  v22 = (void *)(v16 + v21);
  v23 = (void *)(v17 + v21);
  v24 = type metadata accessor for URL(0);
  v74 = *(_QWORD *)(v24 - 8);
  v25 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v74 + 48);
  v26 = v25(v22, 1, v24);
  v27 = v25(v23, 1, v24);
  if (v26)
  {
    if (!v27)
    {
      (*(void (**)(void *, void *, uint64_t))(v74 + 32))(v22, v23, v24);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v74 + 56))(v22, 0, 1, v24);
      goto LABEL_11;
    }
    goto LABEL_10;
  }
  if (v27)
  {
    (*(void (**)(void *, uint64_t))(v74 + 8))(v22, v24);
LABEL_10:
    v28 = sub_10001B520(&qword_1000B93A0);
    memcpy(v22, v23, *(_QWORD *)(*(_QWORD *)(v28 - 8) + 64));
    goto LABEL_11;
  }
  (*(void (**)(void *, void *, uint64_t))(v74 + 40))(v22, v23, v24);
LABEL_11:
  v29 = *(int *)(v20 + 28);
  v30 = v16 + v29;
  v31 = (_QWORD *)(v17 + v29);
  if (*(_QWORD *)(v16 + v29 + 8))
  {
    if (v31[1])
    {
      v32 = *(id *)v30;
      *(_QWORD *)v30 = *v31;

      v33 = *(void **)(v30 + 8);
      *(_QWORD *)(v30 + 8) = v31[1];

      goto LABEL_16;
    }
    sub_10002BC50((id *)v30);
  }
  *(_OWORD *)v30 = *(_OWORD *)v31;
LABEL_16:
  v34 = *(int *)(v75 + 28);
  v35 = a1 + v34;
  v36 = (uint64_t)a2 + v34;
  v37 = *(void **)(a1 + v34);
  *(_QWORD *)(a1 + v34) = *(uint64_t *)((char *)a2 + v34);

  v38 = *(_QWORD *)(v35 + 8);
  *(_QWORD *)(v35 + 8) = *(_QWORD *)(v36 + 8);
  swift_bridgeObjectRelease(v38);
  v39 = *(_QWORD *)(v35 + 16);
  *(_QWORD *)(v35 + 16) = *(_QWORD *)(v36 + 16);
  swift_unknownObjectRelease(v39);
  *(_BYTE *)(v35 + 24) = *(_BYTE *)(v36 + 24);
  v40 = (int *)type metadata accessor for TodayContent(0);
  v41 = v40[8];
  v42 = (void *)(v35 + v41);
  v43 = (void *)(v36 + v41);
  v44 = v25((void *)(v35 + v41), 1, v24);
  v45 = v25(v43, 1, v24);
  if (!v44)
  {
    if (!v45)
    {
      (*(void (**)(void *, void *, uint64_t))(v74 + 40))(v42, v43, v24);
      goto LABEL_22;
    }
    (*(void (**)(void *, uint64_t))(v74 + 8))(v42, v24);
    goto LABEL_21;
  }
  if (v45)
  {
LABEL_21:
    v46 = sub_10001B520(&qword_1000B93A0);
    memcpy(v42, v43, *(_QWORD *)(*(_QWORD *)(v46 - 8) + 64));
    goto LABEL_22;
  }
  (*(void (**)(void *, void *, uint64_t))(v74 + 32))(v42, v43, v24);
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v74 + 56))(v42, 0, 1, v24);
LABEL_22:
  v47 = v40[9];
  v48 = *(_QWORD *)(v35 + v47);
  *(_QWORD *)(v35 + v47) = *(_QWORD *)(v36 + v47);
  swift_release(v48);
  v49 = v40[10];
  v50 = (_QWORD *)(v35 + v49);
  v51 = (uint64_t *)(v36 + v49);
  v53 = *v51;
  v52 = v51[1];
  v54 = v50[1];
  *v50 = v53;
  v50[1] = v52;
  swift_bridgeObjectRelease(v54);
  v55 = v40[11];
  v56 = (_QWORD *)(v35 + v55);
  v57 = (uint64_t *)(v36 + v55);
  v59 = *v57;
  v58 = v57[1];
  v60 = v56[1];
  *v56 = v59;
  v56[1] = v58;
  swift_bridgeObjectRelease(v60);
  v61 = *(int *)(v75 + 32);
  v62 = a1 + v61;
  v63 = (uint64_t)a2 + v61;
  *(_OWORD *)(a1 + v61) = *(_OWORD *)((char *)a2 + v61);
  v64 = (int *)type metadata accessor for LayoutContext(0);
  v65 = v64[6];
  v66 = v62 + v65;
  v67 = v63 + v65;
  v68 = type metadata accessor for InternalWidgetFamily(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v68 - 8) + 40))(v66, v67, v68);
  *(_OWORD *)(v62 + v64[7]) = *(_OWORD *)(v63 + v64[7]);
  v69 = v64[8];
  v70 = v62 + v69;
  v71 = v63 + v69;
  v72 = type metadata accessor for ContentSizeCategory(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v72 - 8) + 40))(v70, v71, v72);
  *(_QWORD *)(v62 + v64[9]) = *(_QWORD *)(v63 + v64[9]);
  *(_QWORD *)(v62 + v64[10]) = *(_QWORD *)(v63 + v64[10]);
  *(_BYTE *)(v62 + v64[11]) = *(_BYTE *)(v63 + v64[11]);
  *(_BYTE *)(v62 + v64[12]) = *(_BYTE *)(v63 + v64[12]);
  return a1;
}

uint64_t sub_10002C408(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10002C414);
}

uint64_t sub_10002C414(uint64_t a1, uint64_t a2, int *a3)
{
  unsigned int v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  if ((_DWORD)a2 == 254)
  {
    v4 = *(unsigned __int8 *)(a1 + 8);
    if (v4 > 1)
      return (v4 ^ 0xFF) + 1;
    else
      return 0;
  }
  else
  {
    v8 = sub_10001B520(&qword_1000B9A28);
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
    {
      v10 = v8;
      v11 = a3[5];
    }
    else
    {
      v12 = type metadata accessor for Item.Headline(0);
      v9 = *(_QWORD *)(v12 - 8);
      if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
      {
        v10 = v12;
        v11 = a3[6];
      }
      else
      {
        v13 = type metadata accessor for TodayContent(0);
        v9 = *(_QWORD *)(v13 - 8);
        if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
        {
          v10 = v13;
          v11 = a3[7];
        }
        else
        {
          v10 = type metadata accessor for LayoutContext(0);
          v9 = *(_QWORD *)(v10 - 8);
          v11 = a3[8];
        }
      }
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(a1 + v11, a2, v10);
  }
}

uint64_t sub_10002C4F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10002C504);
}

uint64_t sub_10002C504(uint64_t result, uint64_t a2, int a3, int *a4)
{
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v5 = result;
  if (a3 == 254)
  {
    *(_BYTE *)(result + 8) = -(char)a2;
  }
  else
  {
    v8 = sub_10001B520(&qword_1000B9A28);
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      v10 = v8;
      v11 = a4[5];
    }
    else
    {
      v12 = type metadata accessor for Item.Headline(0);
      v9 = *(_QWORD *)(v12 - 8);
      if (*(_DWORD *)(v9 + 84) == a3)
      {
        v10 = v12;
        v11 = a4[6];
      }
      else
      {
        v13 = type metadata accessor for TodayContent(0);
        v9 = *(_QWORD *)(v13 - 8);
        if (*(_DWORD *)(v9 + 84) == a3)
        {
          v10 = v13;
          v11 = a4[7];
        }
        else
        {
          v10 = type metadata accessor for LayoutContext(0);
          v9 = *(_QWORD *)(v10 - 8);
          v11 = a4[8];
        }
      }
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(v5 + v11, a2, a2, v10);
  }
  return result;
}

void sub_10002C5E8(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  _QWORD v10[5];

  v10[0] = "\t";
  sub_100025DEC(319);
  if (v3 <= 0x3F)
  {
    v10[1] = *(_QWORD *)(v2 - 8) + 64;
    v4 = type metadata accessor for Item.Headline(319);
    if (v5 <= 0x3F)
    {
      v10[2] = *(_QWORD *)(v4 - 8) + 64;
      v6 = type metadata accessor for TodayContent(319);
      if (v7 <= 0x3F)
      {
        v10[3] = *(_QWORD *)(v6 - 8) + 64;
        v8 = type metadata accessor for LayoutContext(319);
        if (v9 <= 0x3F)
        {
          v10[4] = *(_QWORD *)(v8 - 8) + 64;
          swift_initStructMetadata(a1, 256, 5, v10, a1 + 16);
        }
      }
    }
  }
}

uint64_t sub_10002C6B0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t OpaqueTypeConformance2;
  uint64_t v3;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  void *v8;

  v0 = sub_10001B560(&qword_1000B9AE0);
  v1 = sub_10001B560(&qword_1000B9AD8);
  v5 = sub_10001B560(&qword_1000B9AF0);
  v6 = (void *)sub_10002CE94(&qword_1000B9AF8, &qword_1000B9AF0, (uint64_t)&protocol conformance descriptor for ZStack<A>);
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v5, &opaque type descriptor for <<opaque return type of View.widgetURL(_:)>>, 1);
  v5 = v1;
  v6 = (void *)OpaqueTypeConformance2;
  v3 = swift_getOpaqueTypeConformance2(&v5, &opaque type descriptor for <<opaque return type of View.redacted(reason:)>>, 1);
  v5 = v0;
  v6 = &type metadata for AnyView;
  v7 = v3;
  v8 = &protocol witness table for AnyView;
  return swift_getOpaqueTypeConformance2(&v5, &opaque type descriptor for <<opaque return type of View.containerBackground<A>(for:alignment:content:)>>, 1);
}

uint64_t sub_10002C780(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_10009C304, 1);
}

uint64_t sub_10002C790(uint64_t result, char a2)
{
  if ((a2 & 1) == 0)
    return swift_release(result);
  return result;
}

uint64_t sub_10002C79C@<X0>(uint64_t a1@<X8>)
{
  uint64_t result;
  char v3;

  result = EnvironmentValues.lineLimit.getter();
  *(_QWORD *)a1 = result;
  *(_BYTE *)(a1 + 8) = v3 & 1;
  return result;
}

uint64_t sub_10002C7CC(uint64_t a1)
{
  return EnvironmentValues.lineLimit.setter(*(_QWORD *)a1, *(unsigned __int8 *)(a1 + 8));
}

uint64_t sub_10002C7F8@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = EnvironmentValues.font.getter();
  *a1 = result;
  return result;
}

uint64_t sub_10002C820@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = EnvironmentValues.font.getter();
  *a1 = result;
  return result;
}

uint64_t sub_10002C848(_QWORD *a1)
{
  uint64_t v1;

  v1 = swift_retain(*a1);
  return EnvironmentValues.font.setter(v1);
}

uint64_t sub_10002C870(_QWORD *a1)
{
  uint64_t v1;

  v1 = swift_retain(*a1);
  return EnvironmentValues.font.setter(v1);
}

uint64_t sub_10002C898()
{
  return EnvironmentValues.imageScale.getter();
}

uint64_t sub_10002C8B8()
{
  return EnvironmentValues.imageScale.getter();
}

uint64_t sub_10002C8D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10002C8EC(a1, a2, a3, a4, (void (*)(_QWORD))&type metadata accessor for Image.Scale, (uint64_t (*)(char *))&EnvironmentValues.imageScale.setter);
}

uint64_t sub_10002C8EC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(_QWORD), uint64_t (*a6)(char *))
{
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v12;

  a5(0);
  __chkstk_darwin();
  v9 = (char *)&v12 - v8;
  (*(void (**)(char *, uint64_t))(v10 + 16))((char *)&v12 - v8, a1);
  return a6(v9);
}

uint64_t sub_10002C968(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10002C8EC(a1, a2, a3, a4, (void (*)(_QWORD))&type metadata accessor for Image.Scale, (uint64_t (*)(char *))&EnvironmentValues.imageScale.setter);
}

unint64_t sub_10002C98C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000B9D30;
  if (!qword_1000B9D30)
  {
    v1 = sub_10001B560(&qword_1000B9D18);
    sub_10002CA10();
    sub_10002CE94(&qword_1000B9D68, &qword_1000B9D10, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000B9D30);
  }
  return result;
}

unint64_t sub_10002CA10()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000B9D38;
  if (!qword_1000B9D38)
  {
    v1 = sub_10001B560(&qword_1000B9D40);
    sub_10002CA94();
    sub_10002CE94(&qword_1000B9D58, &qword_1000B9D60, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000B9D38);
  }
  return result;
}

unint64_t sub_10002CA94()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000B9D48;
  if (!qword_1000B9D48)
  {
    v1 = sub_10001B560(&qword_1000B9D50);
    sub_10002CE94(&qword_1000B9BB0, &qword_1000B9BB8, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000B9D48);
  }
  return result;
}

uint64_t sub_10002CB18(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;

  v5 = sub_10001B520(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_10002CB5C(unint64_t *a1, uint64_t *a2)
{
  uint64_t result;
  uint64_t v4;

  result = *a1;
  if (!result)
  {
    v4 = sub_10001B560(a2);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v4);
    atomic_store(result, a1);
  }
  return result;
}

id sub_10002CBBC(void *a1, uint64_t a2, char a3)
{
  if ((a3 & 1) != 0)
    return a1;
  else
    return (id)swift_bridgeObjectRetain(a2);
}

unint64_t sub_10002CBCC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000B9DA0;
  if (!qword_1000B9DA0)
  {
    v1 = sub_10001B560(&qword_1000B9D88);
    sub_10001C96C(&qword_1000B9DA8, type metadata accessor for SourceView, (uint64_t)&unk_10008B608);
    sub_10002CE94(&qword_1000B9BB0, &qword_1000B9BB8, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000B9DA0);
  }
  return result;
}

void sub_10002CC68(void *a1, uint64_t a2, char a3)
{
  if ((a3 & 1) != 0)

  else
    swift_bridgeObjectRelease(a2);
}

uint64_t sub_10002CC78(uint64_t a1, unint64_t *a2, _QWORD *a3)
{
  uint64_t result;
  uint64_t v5;

  result = *a2;
  if (!*a2)
  {
    v5 = objc_opt_self(*a3);
    result = swift_getObjCClassMetadata(v5);
    atomic_store(result, a2);
  }
  return result;
}

uint64_t sub_10002CCB0(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;

  v5 = sub_10001B520(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_10002CCF4(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;

  v3 = sub_10001B520(a2);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_10002CD30@<X0>(uint64_t a1@<X8>)
{
  uint64_t result;
  char v3;

  result = EnvironmentValues.lineLimit.getter();
  *(_QWORD *)a1 = result;
  *(_BYTE *)(a1 + 8) = v3 & 1;
  return result;
}

uint64_t sub_10002CD60(uint64_t a1)
{
  return EnvironmentValues.lineLimit.setter(*(_QWORD *)a1, *(unsigned __int8 *)(a1 + 8));
}

uint64_t sub_10002CD8C(unint64_t *a1, uint64_t *a2, void (*a3)(void))
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    v6 = sub_10001B560(a2);
    a3();
    sub_10002CE94(&qword_1000B9BB0, &qword_1000B9BB8, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v6);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_10002CE10()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000B9DF0;
  if (!qword_1000B9DF0)
  {
    v1 = sub_10001B560(&qword_1000B9DF8);
    sub_10002CE94(&qword_1000B9E00, &qword_1000B9E08, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000B9DF0);
  }
  return result;
}

uint64_t sub_10002CE94(unint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    v6 = sub_10001B560(a2);
    result = swift_getWitnessTable(a3, v6);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_10002CED8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000B9E10;
  if (!qword_1000B9E10)
  {
    v1 = sub_10001B560(&qword_1000B9E18);
    sub_10002CE94(&qword_1000B9CD0, &qword_1000B9CC0, (uint64_t)&protocol conformance descriptor for VStack<A>);
    sub_10002CE94(&qword_1000B9CD8, &qword_1000B9CB0, (uint64_t)&protocol conformance descriptor for VStack<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000B9E10);
  }
  return result;
}

uint64_t sub_10002CF80()
{
  _QWORD *v0;

  sub_10001DA60(v0 + 2);
  sub_10001DA60(v0 + 7);
  sub_10001DA60(v0 + 12);
  return swift_deallocClassInstance(v0, 136, 7);
}

uint64_t type metadata accessor for EventProcessingSidecarTask()
{
  return objc_opt_self(_TtC7NewsTag26EventProcessingSidecarTask);
}

uint64_t sub_10002CFD4(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v5;
  uint64_t v6;

  v5 = sub_100056B04(*a1);
  sub_10001D9B4((_QWORD *)(a2 + 96), *(_QWORD *)(a2 + 120));
  type metadata accessor for SessionReporter();
  v6 = sub_10003118C((uint64_t)v5, a3);
  swift_bridgeObjectRelease(v5);
  return v6;
}

uint64_t sub_10002D064(char *a1, char *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  unint64_t v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  unint64_t v38;
  NSObject *v39;
  os_log_type_t v40;
  uint64_t v41;
  uint8_t *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  uint8_t *v48;
  char v49;
  char *v50;
  char *v51;
  uint64_t v52;
  void (*v53)(char *, char *, uint64_t);
  char *v54;
  void (*v55)(char *, uint64_t);
  char *v56;
  char *v57;
  uint64_t result;
  uint64_t v59;
  uint64_t v60;
  void (*v61)(char *, uint64_t);
  char *v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  char *v67;
  void (*v68)(char *, char *, uint64_t);
  char *v69;
  char *v70;
  void (*v71)(char *, uint64_t);
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  void *v85;
  uint64_t v86;
  char *v87;
  char *v88;
  char *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  char *v93;
  uint64_t v94;
  char *v95;
  char *v96;
  char *v97;
  uint64_t v98;
  char *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;

  v97 = a2;
  v94 = sub_10001B520(&qword_1000B9ED0);
  v3 = __chkstk_darwin(v94);
  v95 = (char *)&v87 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  v89 = (char *)&v87 - v5;
  v92 = sub_10001B520(&qword_1000B9ED8);
  v6 = __chkstk_darwin(v92);
  v93 = (char *)&v87 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v98 = (uint64_t)&v87 - v8;
  v9 = type metadata accessor for Date(0);
  v100 = *(_QWORD *)(v9 - 8);
  v10 = __chkstk_darwin(v9);
  v12 = (char *)&v87 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __chkstk_darwin(v10);
  v99 = (char *)&v87 - v14;
  __chkstk_darwin(v13);
  v16 = (char *)&v87 - v15;
  v17 = sub_10001B520(&qword_1000BC520);
  __chkstk_darwin(v17);
  v19 = (char *)&v87 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = type metadata accessor for TrackableNewsTimelineEntry(0);
  v21 = *(_QWORD *)(v20 - 8);
  v22 = *(_QWORD *)(v21 + 64);
  v23 = __chkstk_darwin(v20);
  v91 = (uint64_t)&v87 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = __chkstk_darwin(v23);
  v26 = (char *)&v87 - v25;
  __chkstk_darwin(v24);
  v28 = (char *)&v87 - v27;
  v29 = *(int *)(type metadata accessor for TaskContext(0) + 20);
  v96 = a1;
  sub_10002D7B8((uint64_t)&a1[v29], (uint64_t)v19);
  v90 = v21;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v21 + 48))(v19, 1, v20) == 1)
  {
    sub_10002CCF4((uint64_t)v19, &qword_1000BC520);
    v30 = sub_10002D800();
    v31 = (void *)static OS_os_log.default.getter(v30);
    v32 = static os_log_type_t.default.getter();
    os_log(_:dso:log:type:_:)("event-processing sidecar task done, because there is no last entry", 66, 2, &_mh_execute_header, v31, v32, _swiftEmptyArrayStorage);

    v33 = sub_10001B520(&qword_1000BA250);
    swift_allocObject(v33, *(unsigned int *)(v33 + 48), *(unsigned __int16 *)(v33 + 52));
    return Promise.init(value:)();
  }
  v35 = sub_10002D83C((uint64_t)v19, (uint64_t)v28);
  Date.init()(v35);
  v36 = sub_10002D9DC(&qword_1000B9EE0, (uint64_t)&protocol conformance descriptor for Date);
  if ((dispatch thunk of static Comparable.< infix(_:_:)(v16, v28, v9, v36) & 1) != 0)
  {
    v37 = v16;
    sub_10001DA80((uint64_t)v28, (uint64_t)v26);
    v38 = sub_10002D800();
    v39 = static OS_os_log.default.getter(v38);
    v40 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v39, v40))
    {
      v41 = swift_slowAlloc(12, -1);
      v88 = v28;
      v42 = (uint8_t *)v41;
      v43 = swift_slowAlloc(32, -1);
      v102 = v43;
      *(_DWORD *)v42 = 136315138;
      v44 = sub_10002D9DC(&qword_1000B9EE8, (uint64_t)&protocol conformance descriptor for Date);
      v45 = dispatch thunk of CustomStringConvertible.description.getter(v9, v44);
      v47 = v46;
      v101 = sub_10006AE74(v45, v46, &v102);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v101, &v102, v42 + 4, v42 + 12);
      swift_bridgeObjectRelease(v47);
      sub_10001DAC4((uint64_t)v26);
      _os_log_impl((void *)&_mh_execute_header, v39, v40, "event-processing sidecar task cannot query because the last entry dated %s is in the future", v42, 0xCu);
      swift_arrayDestroy(v43, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v43, -1, -1);
      v48 = v42;
      v28 = v88;
      swift_slowDealloc(v48, -1, -1);

    }
    else
    {

      sub_10001DAC4((uint64_t)v26);
    }
    v86 = sub_10001B520(&qword_1000BA250);
    swift_allocObject(v86, *(unsigned int *)(v86 + 48), *(unsigned __int16 *)(v86 + 52));
    v34 = Promise.init(value:)();
    (*(void (**)(char *, uint64_t))(v100 + 8))(v37, v9);
    sub_10001DAC4((uint64_t)v28);
    return v34;
  }
  static Date.- infix(_:_:)(v16, 43200.0);
  v49 = dispatch thunk of static Comparable.>= infix(_:_:)(v12, v28, v9, v36);
  v50 = v16;
  v51 = v99;
  v52 = v100;
  v53 = *(void (**)(char *, char *, uint64_t))(v100 + 16);
  if ((v49 & 1) != 0)
    v54 = v12;
  else
    v54 = v28;
  v53(v99, v54, v9);
  v55 = *(void (**)(char *, uint64_t))(v52 + 8);
  v56 = v12;
  v57 = v51;
  v55(v56, v9);
  result = dispatch thunk of static Comparable.<= infix(_:_:)(v51, v50, v9, v36);
  if ((result & 1) != 0)
  {
    v59 = v94;
    v60 = *(int *)(v94 + 48);
    v88 = v28;
    v61 = v55;
    v62 = v89;
    v63 = &v89[v60];
    v53(v89, v57, v9);
    v53(v63, v50, v9);
    v64 = *(int *)(v59 + 48);
    v65 = v52;
    v87 = v50;
    v66 = v95;
    v67 = &v95[v64];
    v53(v95, v62, v9);
    v53(v67, v63, v9);
    v68 = *(void (**)(char *, char *, uint64_t))(v65 + 32);
    v69 = v93;
    v68(v93, v66, v9);
    v61(v67, v9);
    v70 = &v66[*(int *)(v59 + 48)];
    v68(v66, v62, v9);
    v68(v70, v63, v9);
    v68(&v69[*(int *)(v92 + 36)], v70, v9);
    v71 = v61;
    v61(v66, v9);
    v72 = (uint64_t)v69;
    v73 = v98;
    v74 = sub_10002D880(v72, v98);
    __chkstk_darwin(v74);
    v75 = v96;
    v76 = v97;
    *(&v87 - 4) = v97;
    *(&v87 - 3) = (char *)v73;
    *(&v87 - 2) = v75;
    v77 = sub_10001B520(&qword_1000BBB20);
    v78 = firstly<A>(closure:)(sub_10002D8C8, &v87 - 6, v77);
    v79 = (uint64_t)v88;
    v80 = v91;
    sub_10001DA80((uint64_t)v88, v91);
    v81 = *(unsigned __int8 *)(v90 + 80);
    v82 = (v81 + 24) & ~v81;
    v83 = swift_allocObject(&unk_1000AB910, v82 + v22, v81 | 7);
    *(_QWORD *)(v83 + 16) = v76;
    sub_10002D83C(v80, v83 + v82);
    v84 = swift_retain(v76);
    v85 = (void *)zalgo.getter(v84);
    v34 = Promise.then<A>(on:closure:)(v85, sub_10002D990, v83, (char *)&type metadata for () + 8);
    swift_release(v78);
    swift_release(v83);

    v71(v99, v9);
    v71(v87, v9);
    sub_10001DAC4(v79);
    sub_10002CCF4(v73, &qword_1000B9ED8);
    return v34;
  }
  __break(1u);
  return result;
}

uint64_t sub_10002D7B8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10001B520(&qword_1000BC520);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

unint64_t sub_10002D800()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000BBB00;
  if (!qword_1000BBB00)
  {
    v1 = objc_opt_self(OS_os_log);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_1000BBB00);
  }
  return result;
}

uint64_t sub_10002D83C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for TrackableNewsTimelineEntry(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_10002D880(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10001B520(&qword_1000B9ED8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_10002D8C8()
{
  uint64_t v0;

  return sub_100077344(*(_QWORD *)(v0 + 24), *(uint8_t **)(v0 + 32));
}

uint64_t sub_10002D8F0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v1 = type metadata accessor for TrackableNewsTimelineEntry(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 24) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  swift_release(*(_QWORD *)(v0 + 16));
  v7 = v0 + v4;
  v8 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v7, v8);
  swift_release(*(_QWORD *)(v7 + *(int *)(v1 + 20)));
  swift_bridgeObjectRelease(*(_QWORD *)(v7 + *(int *)(v1 + 24) + 8));
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_10002D990(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for TrackableNewsTimelineEntry(0) - 8) + 80);
  return sub_10002CFD4(a1, *(_QWORD *)(v1 + 16), v1 + ((v3 + 24) & ~v3));
}

uint64_t sub_10002D9DC(unint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    v5 = type metadata accessor for Date(255);
    result = swift_getWitnessTable(a2, v5);
    atomic_store(result, a1);
  }
  return result;
}

double destroy for MessageView(uint64_t a1)
{
  double result;

  sub_1000249D8(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 24));
  *(_QWORD *)&result = swift_release(*(_QWORD *)(a1 + 32)).n128_u64[0];
  return result;
}

uint64_t initializeWithCopy for MessageView(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;

  v4 = *(_QWORD *)a2;
  v5 = *(_QWORD *)(a2 + 8);
  v6 = *(_BYTE *)(a2 + 16);
  sub_100024770(*(_QWORD *)a2, v5, v6);
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v5;
  *(_BYTE *)(a1 + 16) = v6;
  v7 = *(_QWORD *)(a2 + 24);
  v8 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = v7;
  *(_QWORD *)(a1 + 32) = v8;
  swift_bridgeObjectRetain(v7);
  swift_retain(v8);
  return a1;
}

uint64_t assignWithCopy for MessageView(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v4 = *(_QWORD *)a2;
  v5 = *(_QWORD *)(a2 + 8);
  v6 = *(_BYTE *)(a2 + 16);
  sub_100024770(*(_QWORD *)a2, v5, v6);
  v7 = *(_QWORD *)a1;
  v8 = *(_QWORD *)(a1 + 8);
  v9 = *(_BYTE *)(a1 + 16);
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v5;
  *(_BYTE *)(a1 + 16) = v6;
  sub_1000249D8(v7, v8, v9);
  v10 = *(_QWORD *)(a2 + 24);
  v11 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease(v11);
  v12 = *(_QWORD *)(a2 + 32);
  v13 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = v12;
  swift_retain(v12);
  swift_release(v13);
  return a1;
}

__n128 initializeWithTake for MessageView(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t assignWithTake for MessageView(uint64_t a1, uint64_t a2)
{
  char v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;

  v4 = *(_BYTE *)(a2 + 16);
  v5 = *(_QWORD *)a1;
  v6 = *(_QWORD *)(a1 + 8);
  v7 = *(_BYTE *)(a1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_BYTE *)(a1 + 16) = v4;
  sub_1000249D8(v5, v6, v7);
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 24));
  v8 = *(_QWORD *)(a1 + 32);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  swift_release(v8);
  return a1;
}

uint64_t getEnumTagSinglePayload for MessageView(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 40))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for MessageView(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 40) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 24) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 40) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for MessageView()
{
  return &type metadata for MessageView;
}

uint64_t sub_10002DC5C(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_10009C384, 1);
}

uint64_t sub_10002DC6C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t inited;
  uint64_t v9;
  uint64_t v10;
  NSString *v11;
  NSString *v12;
  unint64_t v13;
  unint64_t v14;
  id v15;
  Class isa;
  id v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  __int128 v25;
  _BYTE v26[48];
  _BYTE v27[72];

  v2 = v1;
  v4 = sub_10001B520(&qword_1000B9EF0);
  __chkstk_darwin(v4);
  v6 = &v26[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v7 = sub_10001B520(&qword_1000B9EF8);
  inited = swift_initStackObject(v7, v27);
  v25 = xmmword_10008AC60;
  *(_OWORD *)(inited + 16) = xmmword_10008AC60;
  *(_QWORD *)(inited + 32) = UIFontDescriptorTraitsAttribute;
  v9 = sub_10001B520(&qword_1000B9F00);
  v10 = swift_initStackObject(v9, v26);
  *(_OWORD *)(v10 + 16) = v25;
  *(_QWORD *)(v10 + 32) = UIFontWeightTrait;
  *(UIFontWeight *)(v10 + 40) = UIFontWeightSemibold;
  v11 = UIFontDescriptorTraitsAttribute;
  v12 = UIFontWeightTrait;
  v13 = sub_10005F734(v10);
  *(_QWORD *)(inited + 64) = sub_10001B520(&qword_1000B9F08);
  *(_QWORD *)(inited + 40) = v13;
  v14 = sub_10005F83C(inited);
  v15 = objc_msgSend((id)objc_opt_self(UIFontDescriptor), "preferredFontDescriptorWithTextStyle:", UIFontTextStyleSubheadline);
  type metadata accessor for AttributeName(0);
  sub_10002E334();
  isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v14);
  v17 = objc_msgSend(v15, "fontDescriptorByAddingAttributes:", isa);

  v18 = objc_msgSend((id)objc_opt_self(UIFont), "fontWithDescriptor:size:", v17, 0.0);
  v19 = Font.init(_:)(v18);
  *(_QWORD *)v6 = static HorizontalAlignment.center.getter();
  *((_QWORD *)v6 + 1) = 0;
  v6[16] = 1;
  v20 = sub_10001B520(&qword_1000B9F10);
  v21 = sub_10002DEE8(v2, v19, &v6[*(int *)(v20 + 44)]);
  v22 = static Alignment.center.getter(v21);
  sub_10002E148(0.0, 1, 0.0, 1, INFINITY, 0, 0.0, 1, a1, 0.0, 1, 0.0, 1, v22, v23);

  swift_release(v19);
  return sub_10002E37C((uint64_t)v6);
}

uint64_t sub_10002DEE8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  char v23;
  uint64_t KeyPath;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  void (*v34)(char *, char *, uint64_t);
  char *v35;
  char *v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  char *v40;
  void (*v41)(char *, uint64_t);
  uint64_t v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;

  v50 = a3;
  v5 = sub_10001B520(&qword_1000B9F20);
  v48 = *(_QWORD *)(v5 - 8);
  v49 = v5;
  v6 = __chkstk_darwin(v5);
  v47 = (char *)&v43 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v9 = (char *)&v43 - v8;
  v10 = Text.font(_:)(a2, *(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(unsigned __int8 *)(a1 + 16), *(_QWORD *)(a1 + 24));
  v12 = v11;
  v14 = v13;
  v16 = v15 & 1;
  v17 = Text.foregroundColor(_:)(*(_QWORD *)(a1 + 32), v10, v11, v16, v13);
  v19 = v18;
  v21 = v20;
  v23 = v22 & 1;
  sub_1000249D8(v10, v12, v16);
  swift_bridgeObjectRelease(v14);
  KeyPath = swift_getKeyPath(&unk_10008B0A0);
  v51 = v17;
  v52 = v19;
  LOBYTE(v53) = v23;
  v54 = v21;
  v55 = KeyPath;
  LOBYTE(v56) = 1;
  v25 = sub_10001B520(&qword_1000B9F28);
  v26 = sub_10002E450();
  View.unredacted()(v25, v26);
  sub_1000249D8(v17, v19, v23);
  swift_release(KeyPath);
  v27 = swift_bridgeObjectRelease(v21);
  v28 = static Alignment.center.getter(v27);
  _FrameLayout.init(width:height:alignment:)(&v51, 0, 1, 0, 0, v28, v29);
  v46 = v51;
  v45 = v52;
  v44 = v53;
  LOBYTE(KeyPath) = v54;
  v30 = v55;
  v31 = v56;
  v32 = v47;
  v33 = v48;
  v34 = *(void (**)(char *, char *, uint64_t))(v48 + 16);
  v35 = v9;
  v36 = v9;
  v37 = v49;
  v34(v47, v35, v49);
  v38 = v50;
  *v50 = 0;
  *((_BYTE *)v38 + 8) = 1;
  v39 = sub_10001B520(&qword_1000B9F48);
  v34((char *)v38 + *(int *)(v39 + 48), v32, v37);
  v40 = (char *)v38 + *(int *)(v39 + 64);
  *(_QWORD *)v40 = 0;
  v40[8] = 1;
  *((_QWORD *)v40 + 2) = v46;
  v40[24] = v45;
  *((_QWORD *)v40 + 4) = v44;
  v40[40] = KeyPath;
  *((_QWORD *)v40 + 6) = v30;
  *((_QWORD *)v40 + 7) = v31;
  v41 = *(void (**)(char *, uint64_t))(v33 + 8);
  v41(v36, v37);
  return ((uint64_t (*)(char *, uint64_t))v41)(v32, v37);
}

__n128 sub_10002E148@<Q0>(double a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, double a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, double a10, char a11, double a12, char a13, uint64_t a14, uint64_t a15)
{
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  double v19;
  double v20;
  uint64_t v21;
  double v22;
  uint64_t v23;
  double v24;
  uint64_t v25;
  uint64_t v26;
  double v27;
  double v29;
  double v30;
  double v31;
  uint64_t v33;
  void *v34;
  uint64_t v35;
  __int128 v36;
  __int128 v37;
  __n128 result;
  unsigned int v39;
  double v40;
  double v41;
  double v42;
  double v43;
  _OWORD v44[7];

  v16 = v15;
  v18 = a15;
  v19 = a12;
  v20 = a10;
  v21 = a2 & 1;
  v22 = a1;
  if ((_DWORD)v21)
    v22 = -INFINITY;
  v23 = a4 & 1;
  v24 = a3;
  if ((a4 & 1) != 0)
    v24 = v22;
  v25 = a6 & 1;
  v26 = a8 & 1;
  v27 = a5;
  if ((a6 & 1) != 0)
    v27 = v24;
  if (v22 > v24 || v24 > v27)
    goto LABEL_22;
  v29 = a7;
  if ((a8 & 1) != 0)
    v29 = -INFINITY;
  v30 = a10;
  if ((a11 & 1) != 0)
    v30 = v29;
  v31 = a12;
  if ((a13 & 1) != 0)
    v31 = v30;
  if (v29 > v30 || v30 > v31)
  {
LABEL_22:
    v42 = a5;
    v43 = a7;
    v41 = a3;
    v40 = a1;
    v39 = v21;
    v33 = static os_log_type_t.fault.getter(*(_QWORD *)&a1);
    v34 = (void *)static Log.runtimeIssuesLog.getter();
    os_log(_:dso:log:_:_:)(v33, &_mh_execute_header, v34, "Contradictory frame constraints specified.", 42, 2, _swiftEmptyArrayStorage);

    v18 = a15;
    v21 = v39;
    a1 = v40;
    v20 = a10;
    a3 = v41;
    v19 = a12;
    a5 = v42;
    a7 = v43;
  }
  _FlexFrameLayout.init(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)(v44, *(_QWORD *)&a1, v21, *(_QWORD *)&a3, v23, *(_QWORD *)&a5, v25, *(_QWORD *)&a7, v26, *(_QWORD *)&v20, a11 & 1, *(_QWORD *)&v19, a13 & 1, a14, v18);
  sub_10002E3BC(v16, a9);
  v35 = a9 + *(int *)(sub_10001B520(&qword_1000B9F18) + 36);
  v36 = v44[5];
  *(_OWORD *)(v35 + 64) = v44[4];
  *(_OWORD *)(v35 + 80) = v36;
  *(_OWORD *)(v35 + 96) = v44[6];
  v37 = v44[1];
  *(_OWORD *)v35 = v44[0];
  *(_OWORD *)(v35 + 16) = v37;
  result = (__n128)v44[3];
  *(_OWORD *)(v35 + 32) = v44[2];
  *(__n128 *)(v35 + 48) = result;
  return result;
}

uint64_t sub_10002E2FC@<X0>(uint64_t a1@<X8>)
{
  return sub_10002DC6C(a1);
}

unint64_t sub_10002E334()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000B94E0;
  if (!qword_1000B94E0)
  {
    type metadata accessor for AttributeName(255);
    result = swift_getWitnessTable(&unk_10008A9E4, v1);
    atomic_store(result, (unint64_t *)&qword_1000B94E0);
  }
  return result;
}

uint64_t sub_10002E37C(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_10001B520(&qword_1000B9EF0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_10002E3BC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10001B520(&qword_1000B9EF0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10002E404@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = EnvironmentValues.multilineTextAlignment.getter();
  *a1 = result;
  return result;
}

uint64_t sub_10002E42C(unsigned __int8 *a1)
{
  return EnvironmentValues.multilineTextAlignment.setter(*a1);
}

unint64_t sub_10002E450()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000B9F30;
  if (!qword_1000B9F30)
  {
    v1 = sub_10001B560(&qword_1000B9F28);
    sub_10002CE94(&qword_1000B9F38, &qword_1000B9F40, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000B9F30);
  }
  return result;
}

unint64_t sub_10002E4D8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000B9F50;
  if (!qword_1000B9F50)
  {
    v1 = sub_10001B560(&qword_1000B9F18);
    sub_10002CE94(&qword_1000B9F58, &qword_1000B9EF0, (uint64_t)&protocol conformance descriptor for VStack<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000B9F50);
  }
  return result;
}

uint64_t sub_10002E55C@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;

  v3 = a1[3];
  v4 = a1[4];
  sub_10001D9B4(a1, v3);
  v5 = type metadata accessor for NTTodayContextResultsService();
  result = dispatch thunk of ResolverType.resolve<A>(_:)(v5, v5, v3, v4);
  if (result)
  {
    a2[3] = v5;
    a2[4] = (uint64_t)&off_1000AD790;
    *a2 = result;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_10002E5CC(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  void *v15;
  uint64_t result;
  NSURL *v17;
  void *v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  id v24;
  uint64_t v25;

  v2 = type metadata accessor for URL(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v25 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_10001B520(&qword_1000B93A0);
  __chkstk_darwin(v6);
  v8 = (char *)&v25 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_10001D9B4(a1, v9);
  v11 = sub_10001B520(&qword_1000BA030);
  v12 = dispatch thunk of ResolverType.resolve<A>(_:)(v11, v11, v9, v10);
  if (!v12)
  {
    __break(1u);
    goto LABEL_7;
  }
  v13 = v12;
  v14 = (id)FCURLForContainerizedUserAccountCachesDirectory(1);
  if (!v14)
  {
LABEL_7:
    result = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v3 + 56))(v8, 1, 1, v2);
    goto LABEL_8;
  }
  v15 = v14;
  static URL._unconditionallyBridgeFromObjectiveC(_:)(v14);

  (*(void (**)(char *, char *, uint64_t))(v3 + 32))(v8, v5, v2);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v3 + 56))(v8, 0, 1, v2);
  result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v3 + 48))(v8, 1, v2);
  if ((_DWORD)result == 1)
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  URL._bridgeToObjectiveC()(v17);
  v19 = v18;
  (*(void (**)(char *, uint64_t))(v3 + 8))(v8, v2);
  v20 = a1[3];
  v21 = a1[4];
  sub_10001D9B4(a1, v20);
  v22 = sub_10002CC78(0, (unint64_t *)&qword_1000BA028, FCNetworkBehaviorMonitor_ptr);
  result = dispatch thunk of ResolverType.resolve<A>(_:)(v22, v22, v20, v21);
  if (result)
  {
    v23 = (void *)result;
    v24 = objc_msgSend((id)objc_opt_self(FCContentContext), "nt_contentContextWithConfigurationManager:contentHostDirectory:networkBehaviorMonitor:", v13, v19, result);
    swift_unknownObjectRelease(v13);

    return (uint64_t)v24;
  }
LABEL_9:
  __break(1u);
  return result;
}

uint64_t sub_10002E7E0(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t result;

  v1 = a1[3];
  v2 = a1[4];
  sub_10001D9B4(a1, v1);
  v3 = sub_10002CC78(0, (unint64_t *)&unk_1000BA040, off_1000A9B48);
  result = dispatch thunk of ResolverType.resolve<A>(_:)(v3, v3, v1, v2);
  if (!result)
    __break(1u);
  return result;
}

id sub_10002E840(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  id result;
  void *v5;
  id v6;

  v1 = a1[3];
  v2 = a1[4];
  sub_10001D9B4(a1, v1);
  v3 = sub_10002CC78(0, (unint64_t *)&unk_1000BA040, off_1000A9B48);
  result = (id)dispatch thunk of ResolverType.resolve<A>(_:)(v3, v3, v1, v2);
  if (result)
  {
    v5 = result;
    v6 = objc_msgSend(result, "asWidgetUpdateEventTracker");

    return v6;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_10002E8C4(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t result;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  id v25;
  id v26;
  uint64_t v27;
  _QWORD *v28;

  v2 = type metadata accessor for OS_dispatch_queue.Attributes(0);
  __chkstk_darwin(v2);
  v4 = (char *)&v27 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v27 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for DispatchQoS(0);
  __chkstk_darwin(v9);
  v11 = (char *)&v27 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10002CC78(0, &qword_1000BC370, OS_dispatch_queue_ptr);
  static DispatchQoS.userInitiated.getter();
  (*(void (**)(char *, _QWORD, uint64_t))(v6 + 104))(v8, enum case for OS_dispatch_queue.AutoreleaseFrequency.workItem(_:), v5);
  v28 = _swiftEmptyArrayStorage;
  v12 = sub_10002F810();
  v13 = sub_10001B520(&qword_1000BA088);
  v14 = sub_10002F858();
  dispatch thunk of SetAlgebra.init<A>(_:)(&v28, v13, v14, v2, v12);
  v15 = (void *)OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)(0xD000000000000019, 0x8000000100090CF0, v11, v4, v8, 0);
  v16 = a1[3];
  v17 = a1[4];
  sub_10001D9B4(a1, v16);
  v18 = sub_10001B520((uint64_t *)&unk_1000BA000);
  result = dispatch thunk of ResolverType.resolve<A>(_:)(v18, v18, v16, v17);
  if (result)
  {
    v20 = result;
    v21 = a1[3];
    v22 = a1[4];
    sub_10001D9B4(a1, v21);
    v23 = sub_10001B520(&qword_1000BA098);
    result = dispatch thunk of ResolverType.resolve<A>(_:)(v23, v23, v21, v22);
    if (result)
    {
      v24 = result;
      v25 = objc_msgSend(objc_allocWithZone((Class)FCAsyncSerialQueue), "init");
      v26 = objc_msgSend(objc_allocWithZone((Class)NTTodayContext), "initWithContentContext:feedPersonalizerFactory:processVariant:accessQueue:fetchQueue:", v20, v24, 0, v15, v25);
      swift_unknownObjectRelease(v20);
      swift_unknownObjectRelease(v24);

      return (uint64_t)v26;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

id sub_10002EB3C(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  id result;
  id v5;
  id v6;

  v1 = a1[3];
  v2 = a1[4];
  sub_10001D9B4(a1, v1);
  v3 = sub_10001B520((uint64_t *)&unk_1000BA000);
  result = (id)dispatch thunk of ResolverType.resolve<A>(_:)(v3, v3, v1, v2);
  if (result)
  {
    v5 = result;
    v6 = objc_msgSend(result, "news_core_ConfigurationManager");
    swift_unknownObjectRelease(v5);
    return v6;
  }
  else
  {
    __break(1u);
  }
  return result;
}

id sub_10002EBB8()
{
  return objc_msgSend(objc_allocWithZone((Class)FCNetworkBehaviorMonitor), "initWithOptions:cacheDirectory:", 7, 0);
}

_QWORD *sub_10002EBE4(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *result;
  _QWORD *v5;
  uint64_t v6;

  v1 = a1[3];
  v2 = a1[4];
  sub_10001D9B4(a1, v1);
  v3 = sub_10002CC78(0, (unint64_t *)&unk_1000BCA50, NTTodayContext_ptr);
  result = (_QWORD *)dispatch thunk of ResolverType.resolve<A>(_:)(v3, v3, v1, v2);
  if (result)
  {
    v5 = result;
    v6 = type metadata accessor for NTTodayContextResultsService();
    result = (_QWORD *)swift_allocObject(v6, 40, 7);
    result[2] = 0;
    result[3] = 0;
    result[4] = v5;
  }
  else
  {
    __break(1u);
  }
  return result;
}

void sub_10002EC64(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  id v6;
  void *v7;
  NSString v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  id v13;
  void *v14;
  NSString v15;
  id v16;
  unint64_t v17;
  id v18;
  id v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  NSURL *v35;
  void *v36;
  void *v37;
  id v38;
  NSString v39;
  NSString v40;
  id v41;
  _QWORD v42[2];
  uint64_t v43;
  unint64_t v44;
  __int128 v45;
  __int128 v46;
  _BYTE v47[24];
  uint64_t v48;

  v2 = sub_10001B520(&qword_1000B93A0);
  v3 = __chkstk_darwin(v2);
  v5 = (char *)v42 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = (id)FCBundle(v3);
  if (!v6)
  {
    __break(1u);
    goto LABEL_29;
  }
  v7 = v6;
  v8 = String._bridgeToObjectiveC()();
  v9 = objc_msgSend(v7, "objectForInfoDictionaryKey:", v8);

  if (v9)
  {
    _bridgeAnyObjectToAny(_:)(&v45, v9);
    swift_unknownObjectRelease(v9);
  }
  else
  {
    v45 = 0u;
    v46 = 0u;
  }
  v10 = 0x6E776F6E6B6E55;
  sub_10002F788((uint64_t)&v45, (uint64_t)v47);
  if (v48)
  {
    v11 = swift_dynamicCast(&v43, v47, (char *)&type metadata for Any + 8, &type metadata for String, 6);
    if ((_DWORD)v11)
    {
      v12 = v44;
      goto LABEL_10;
    }
  }
  else
  {
    v11 = sub_10002F7D0((uint64_t)v47);
  }
  v12 = 0xE700000000000000;
LABEL_10:
  v13 = (id)FCBundle(v11);
  if (!v13)
  {
LABEL_29:
    __break(1u);
LABEL_30:
    __break(1u);
    goto LABEL_31;
  }
  v14 = v13;
  v15 = String._bridgeToObjectiveC()();
  v16 = objc_msgSend(v14, "objectForInfoDictionaryKey:", v15);

  if (v16)
  {
    _bridgeAnyObjectToAny(_:)(&v45, v16);
    swift_unknownObjectRelease(v16);
  }
  else
  {
    v45 = 0u;
    v46 = 0u;
  }
  sub_10002F788((uint64_t)&v45, (uint64_t)v47);
  if (v48)
  {
    if (swift_dynamicCast(&v43, v47, (char *)&type metadata for Any + 8, &type metadata for String, 6))
    {
      v10 = v43;
      v17 = v44;
      goto LABEL_19;
    }
  }
  else
  {
    sub_10002F7D0((uint64_t)v47);
  }
  v17 = 0xE700000000000000;
LABEL_19:
  v18 = objc_msgSend((id)objc_opt_self(FCContextConfiguration), "defaultConfiguration");
  v19 = (id)FCURLForContainerizedUserAccountCachesDirectory(1);
  v42[1] = v10;
  if (v19)
  {
    v20 = v19;
    static URL._unconditionallyBridgeFromObjectiveC(_:)(v19);

    v21 = type metadata accessor for URL(0);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 56))(v5, 0, 1, v21);
  }
  else
  {
    v22 = type metadata accessor for URL(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 56))(v5, 1, 1, v22);
  }
  v23 = a1[3];
  v24 = a1[4];
  sub_10001D9B4(a1, v23);
  v25 = sub_10001B520(&qword_1000BA038);
  v26 = dispatch thunk of ResolverType.resolve<A>(_:)(v25, v25, v23, v24);
  if (!v26)
    goto LABEL_30;
  v27 = v26;
  v29 = a1[3];
  v28 = a1[4];
  sub_10001D9B4(a1, v29);
  v30 = sub_10002CC78(0, (unint64_t *)&qword_1000BA028, FCNetworkBehaviorMonitor_ptr);
  v31 = dispatch thunk of ResolverType.resolve<A>(_:)(v30, v30, v29, v28);
  if (!v31)
  {
LABEL_31:
    __break(1u);
LABEL_32:
    __break(1u);
    return;
  }
  v32 = (void *)v31;
  v33 = type metadata accessor for URL(0);
  v34 = *(_QWORD *)(v33 - 8);
  v36 = 0;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v34 + 48))(v5, 1, v33) != 1)
  {
    URL._bridgeToObjectiveC()(v35);
    v36 = v37;
    (*(void (**)(char *, uint64_t))(v34 + 8))(v5, v33);
  }
  v38 = objc_allocWithZone((Class)FCConfigurationManager);
  v39 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v12);
  v40 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v17);
  v41 = objc_msgSend(v38, "initWithContextConfiguration:contentHostDirectoryFileURL:feldsparIDProvider:appShortVersionString:buildNumberString:networkBehaviorMonitor:", v18, v36, v27, v39, v40, v32);

  swift_unknownObjectRelease(v27);
  if (!v41)
    goto LABEL_32;
}

id sub_10002F094()
{
  return objc_msgSend((id)objc_opt_self(FCFeldsparIDProvider), "sharedInstance");
}

uint64_t sub_10002F0C0(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  Class isa;
  id v13;

  v2 = sub_10001B520((uint64_t *)&unk_1000BCA60);
  v3 = swift_allocObject(v2, 48, 7);
  *(_OWORD *)(v3 + 16) = xmmword_10008B0D0;
  v4 = a1[3];
  v5 = a1[4];
  sub_10001D9B4(a1, v4);
  v6 = sub_10001B520((uint64_t *)&unk_1000BA1A0);
  result = dispatch thunk of ResolverType.resolve<A>(_:name:)(v6, 0xD000000000000011, 0x8000000100090CB0, v6, v4, v5);
  if (result)
  {
    *(_QWORD *)(v3 + 32) = result;
    v8 = a1[3];
    v9 = a1[4];
    sub_10001D9B4(a1, v8);
    v10 = sub_10002CC78(0, (unint64_t *)&unk_1000BA050, off_1000A9B60);
    result = dispatch thunk of ResolverType.resolve<A>(_:)(v10, v10, v8, v9);
    if (result)
    {
      *(_QWORD *)(v3 + 40) = result;
      specialized Array._endMutation()();
      v11 = objc_allocWithZone((Class)FTAggregateWidgetEventTracker);
      sub_10001B520((uint64_t *)&unk_1000BA060);
      isa = Array._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease(v3);
      v13 = objc_msgSend(v11, "initWithEventTrackers:", isa);

      return (uint64_t)v13;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_10002F21C()
{
  uint64_t v0;

  return swift_deallocClassInstance(v0, 16, 7);
}

uint64_t type metadata accessor for TagWidgetServiceAssembly()
{
  return objc_opt_self(_TtC7NewsTag24TagWidgetServiceAssembly);
}

double sub_10002F250()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __n128 v8;
  uint64_t v9;
  void (*v10)(char *, uint64_t, uint64_t, __n128);
  uint64_t v11;
  __n128 v12;
  uint64_t (*v13)(char *, uint64_t, __n128);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __n128 v18;
  uint64_t v19;
  __n128 v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  __n128 v29;
  uint64_t v30;
  __n128 v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  __n128 v36;
  uint64_t v37;
  __n128 v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  __n128 v43;
  uint64_t v44;
  __n128 v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  __n128 v50;
  uint64_t v51;
  __n128 v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  __n128 v57;
  uint64_t v58;
  __n128 v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  __n128 v64;
  uint64_t v65;
  __n128 v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  __n128 v71;
  uint64_t v72;
  __n128 v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  double result;
  uint64_t v79;

  v0 = type metadata accessor for Scope(0);
  v1 = *(_QWORD *)(v0 - 8);
  v2 = __chkstk_darwin(v0);
  v4 = (char *)&v79 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = ProxyContainer.public.getter(v2);
  v6 = sub_10001B520(&qword_1000BCA20);
  v7 = RegistrationContainer.register<A>(_:name:factory:)(v6, 0, 0, sub_10002E55C, 0, v6);
  v8 = swift_release(v5);
  v9 = enum case for Scope.singleton(_:);
  v10 = *(void (**)(char *, uint64_t, uint64_t, __n128))(v1 + 104);
  v10(v4, enum case for Scope.singleton(_:), v0, v8);
  v11 = Definition.inScope(_:)(v4);
  swift_release(v11);
  v12 = swift_release(v7);
  v13 = *(uint64_t (**)(char *, uint64_t, __n128))(v1 + 8);
  v14 = v13(v4, v0, v12);
  v15 = ProxyContainer.public.getter(v14);
  v16 = sub_10001B520((uint64_t *)&unk_1000BA000);
  v17 = RegistrationContainer.register<A>(_:name:factory:)(v16, 0, 0, sub_10002E5CC, 0, v16);
  v18 = swift_release(v15);
  v10(v4, v9, v0, v18);
  v19 = Definition.inScope(_:)(v4);
  swift_release(v19);
  v20 = swift_release(v17);
  v21 = v13(v4, v0, v20);
  v22 = ProxyContainer.public.getter(v21);
  v23 = sub_10001B520((uint64_t *)&unk_1000BA1A0);
  v24 = RegistrationContainer.register<A>(_:name:factory:)(v23, 0, 0, sub_10002E7E0, 0, v23);
  swift_release(v24);
  swift_release(v22);
  v26 = ProxyContainer.public.getter(v25);
  v27 = sub_10001B520((uint64_t *)&unk_1000BA010);
  v28 = RegistrationContainer.register<A>(_:name:factory:)(v27, 0, 0, sub_10002E840, 0, v27);
  v29 = swift_release(v26);
  v10(v4, v9, v0, v29);
  v30 = Definition.inScope(_:)(v4);
  swift_release(v30);
  v31 = swift_release(v28);
  v32 = v13(v4, v0, v31);
  v33 = ProxyContainer.public.getter(v32);
  v34 = sub_10002CC78(0, (unint64_t *)&unk_1000BCA50, NTTodayContext_ptr);
  v35 = RegistrationContainer.register<A>(_:name:factory:)(v34, 0, 0, sub_10002E8C4, 0, v34);
  v36 = swift_release(v33);
  v10(v4, v9, v0, v36);
  v37 = Definition.inScope(_:)(v4);
  swift_release(v37);
  v38 = swift_release(v35);
  v39 = v13(v4, v0, v38);
  v40 = ProxyContainer.public.getter(v39);
  v41 = sub_10001B520(&qword_1000BA020);
  v42 = RegistrationContainer.register<A>(_:name:factory:)(v41, 0, 0, sub_10002EB3C, 0, v41);
  v43 = swift_release(v40);
  v10(v4, v9, v0, v43);
  v44 = Definition.inScope(_:)(v4);
  swift_release(v44);
  v45 = swift_release(v42);
  v46 = v13(v4, v0, v45);
  v47 = ProxyContainer.public.getter(v46);
  v48 = sub_10002CC78(0, (unint64_t *)&qword_1000BA028, FCNetworkBehaviorMonitor_ptr);
  v49 = RegistrationContainer.register<A>(_:name:factory:)(v48, 0, 0, sub_10002EBB8, 0, v48);
  v50 = swift_release(v47);
  v10(v4, v9, v0, v50);
  v51 = Definition.inScope(_:)(v4);
  swift_release(v51);
  v52 = swift_release(v49);
  v53 = v13(v4, v0, v52);
  v54 = ProxyContainer.private.getter(v53);
  v55 = type metadata accessor for NTTodayContextResultsService();
  v56 = RegistrationContainer.register<A>(_:name:factory:)(v55, 0, 0, sub_10002EBE4, 0, v55);
  v57 = swift_release(v54);
  v10(v4, v9, v0, v57);
  v58 = Definition.inScope(_:)(v4);
  swift_release(v58);
  v59 = swift_release(v56);
  v60 = v13(v4, v0, v59);
  v61 = ProxyContainer.private.getter(v60);
  v62 = sub_10001B520(&qword_1000BA030);
  v63 = RegistrationContainer.register<A>(_:name:factory:)(v62, 0, 0, sub_10002EC64, 0, v62);
  v64 = swift_release(v61);
  v10(v4, v9, v0, v64);
  v65 = Definition.inScope(_:)(v4);
  swift_release(v65);
  v66 = swift_release(v63);
  v67 = v13(v4, v0, v66);
  v68 = ProxyContainer.private.getter(v67);
  v69 = sub_10001B520(&qword_1000BA038);
  v70 = RegistrationContainer.register<A>(_:name:factory:)(v69, 0, 0, sub_10002F094, 0, v69);
  v71 = swift_release(v68);
  v10(v4, v9, v0, v71);
  v72 = Definition.inScope(_:)(v4);
  swift_release(v72);
  v73 = swift_release(v70);
  v74 = v13(v4, v0, v73);
  v75 = ProxyContainer.private.getter(v74);
  v76 = sub_10002CC78(0, (unint64_t *)&unk_1000BA040, off_1000A9B48);
  v77 = RegistrationContainer.register<A>(_:name:factory:)(v76, 0, 0, sub_10002F0C0, 0, v76);
  swift_release(v77);
  *(_QWORD *)&result = swift_release(v75).n128_u64[0];
  return result;
}

uint64_t sub_10002F788(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10001B520((uint64_t *)&unk_1000BA070);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_10002F7D0(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_10001B520((uint64_t *)&unk_1000BA070);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t sub_10002F810()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000BA080;
  if (!qword_1000BA080)
  {
    v1 = type metadata accessor for OS_dispatch_queue.Attributes(255);
    result = swift_getWitnessTable(&protocol conformance descriptor for OS_dispatch_queue.Attributes, v1);
    atomic_store(result, (unint64_t *)&qword_1000BA080);
  }
  return result;
}

unint64_t sub_10002F858()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000BA090;
  if (!qword_1000BA090)
  {
    v1 = sub_10001B560(&qword_1000BA088);
    result = swift_getWitnessTable(&protocol conformance descriptor for [A], v1);
    atomic_store(result, (unint64_t *)&qword_1000BA090);
  }
  return result;
}

ValueMetadata *type metadata accessor for AudioIndicatorView()
{
  return &type metadata for AudioIndicatorView;
}

uint64_t sub_10002F8B4(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_10009C404, 1);
}

uint64_t sub_10002F8C4@<X0>(uint64_t a1@<X0>, char *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t KeyPath;
  void (*v14)(char *, char *, uint64_t);
  uint64_t *v15;
  void (*v16)(char *, uint64_t);
  __n128 v17;
  _QWORD v19[2];

  v4 = sub_10001B520(&qword_1000BA0A8);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = __chkstk_darwin(v4);
  v8 = (char *)v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v10 = (char *)v19 - v9;
  v19[1] = a1;
  View.widgetAccentable(_:)(1, &type metadata for Color, &protocol witness table for Color);
  if (qword_1000B8D00 != -1)
    swift_once(&qword_1000B8D00, sub_100036FE0);
  v11 = Image.init(uiImage:)(objc_msgSend((id)qword_1000C0758, "imageWithRenderingMode:", 2));
  v12 = static Color.white.getter(v11);
  KeyPath = swift_getKeyPath(&unk_10008B1D8);
  v14 = *(void (**)(char *, char *, uint64_t))(v5 + 16);
  v14(v8, v10, v4);
  v14(a2, v8, v4);
  v15 = (uint64_t *)&a2[*(int *)(sub_10001B520(&qword_1000BA0B0) + 48)];
  *v15 = v11;
  v15[1] = KeyPath;
  v15[2] = v12;
  v16 = *(void (**)(char *, uint64_t))(v5 + 8);
  swift_retain(v11);
  swift_retain(KeyPath);
  swift_retain(v12);
  v16(v10, v4);
  swift_release(v12);
  swift_release(KeyPath);
  v17 = swift_release(v11);
  return ((uint64_t (*)(char *, uint64_t, __n128))v16)(v8, v4, v17);
}

uint64_t sub_10002FA7C@<X0>(uint64_t a1@<X0>, char *a2@<X8>)
{
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = *v2;
  *(_QWORD *)a2 = static Alignment.center.getter(a1);
  *((_QWORD *)a2 + 1) = v5;
  v6 = sub_10001B520(&qword_1000BA0A0);
  return sub_10002F8C4(v4, &a2[*(int *)(v6 + 44)]);
}

unint64_t sub_10002FACC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000BA0B8;
  if (!qword_1000BA0B8)
  {
    v1 = sub_10001B560((uint64_t *)&unk_1000BA0C0);
    result = swift_getWitnessTable(&protocol conformance descriptor for ZStack<A>, v1);
    atomic_store(result, (unint64_t *)&qword_1000BA0B8);
  }
  return result;
}

uint64_t sub_10002FB18@<X0>(uint64_t *a1@<X8>)
{
  return sub_10002FB40((uint64_t (*)(_QWORD))type metadata accessor for BiomeEventStore, (uint64_t)&off_1000AD808, a1);
}

uint64_t sub_10002FB2C@<X0>(uint64_t *a1@<X8>)
{
  return sub_10002FB40((uint64_t (*)(_QWORD))type metadata accessor for SessionAssembler, (uint64_t)&off_1000ACB40, a1);
}

uint64_t sub_10002FB40@<X0>(uint64_t (*a1)(_QWORD)@<X1>, uint64_t a2@<X2>, uint64_t *a3@<X8>)
{
  uint64_t v5;
  uint64_t result;

  v5 = a1(0);
  result = swift_allocObject(v5, 16, 7);
  a3[3] = v5;
  a3[4] = a2;
  *a3 = result;
  return result;
}

uint64_t sub_10002FB88@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;

  v3 = a1[3];
  v4 = a1[4];
  sub_10001D9B4(a1, v3);
  v5 = sub_10001B520((uint64_t *)&unk_1000BA1A0);
  result = dispatch thunk of ResolverType.resolve<A>(_:)(v5, v5, v3, v4);
  if (result)
  {
    v7 = result;
    v8 = type metadata accessor for SessionReporter();
    result = swift_allocObject(v8, 24, 7);
    *(_QWORD *)(result + 16) = v7;
    a2[3] = v8;
    a2[4] = (uint64_t)&off_1000ABA78;
    *a2 = result;
  }
  else
  {
    __break(1u);
  }
  return result;
}

_QWORD *sub_10002FC10(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *result;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  id v27;
  id v28;
  id v29;
  _QWORD v31[5];
  _QWORD v32[5];
  _QWORD v33[3];
  uint64_t v34;

  v2 = a1[3];
  v3 = a1[4];
  sub_10001D9B4(a1, v2);
  v4 = sub_10001B520((uint64_t *)&unk_1000BA180);
  result = dispatch thunk of ResolverType.resolve<A>(_:)(v33, v4, v4, v2, v3);
  if (!v34)
  {
    __break(1u);
    goto LABEL_6;
  }
  v6 = a1[3];
  v7 = a1[4];
  sub_10001D9B4(a1, v6);
  v8 = sub_1000301E0();
  result = (_QWORD *)dispatch thunk of ResolverType.resolve<A>(_:)(v8, v8, v6, v7);
  if (!result)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  v9 = result;
  v10 = a1[3];
  v11 = a1[4];
  sub_10001D9B4(a1, v10);
  v12 = sub_10001B520((uint64_t *)&unk_1000BA190);
  result = (_QWORD *)dispatch thunk of ResolverType.resolve<A>(_:)(v12, v12, v10, v11);
  if (result)
  {
    v13 = result;
    v14 = sub_10003021C((uint64_t)v33, v34);
    __chkstk_darwin(v14);
    v16 = (_QWORD *)((char *)&v31[-1] - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
    (*(void (**)(uint64_t *))(v17 + 16))(v16);
    v18 = *v16;
    v19 = type metadata accessor for TelemetryEnablement();
    v32[3] = v19;
    v32[4] = &off_1000AC910;
    v32[0] = v18;
    v20 = type metadata accessor for TelemetryManager(0);
    v21 = swift_allocObject(v20, *(unsigned int *)(v20 + 48), *(unsigned __int16 *)(v20 + 52));
    v22 = sub_10003021C((uint64_t)v32, v19);
    __chkstk_darwin(v22);
    v24 = (_QWORD *)((char *)&v31[-1] - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0));
    (*(void (**)(uint64_t *))(v25 + 16))(v24);
    v26 = *v24;
    v31[3] = v19;
    v31[4] = &off_1000AC910;
    v31[0] = v26;
    _s7NewsTag16TelemetryManagerC13lastFlushDate33_4E4017AC2BCC1D1AC48C0D84A0E547E910Foundation0G0Vvpfi_0();
    sub_100030244((uint64_t)v31, v21 + 16);
    *(_QWORD *)(v21 + 56) = v9;
    v27 = objc_allocWithZone((Class)NSSNewsAnalyticsTelemetryAnnotator);
    v28 = v9;
    v29 = objc_msgSend(v27, "initWithUserIDProvider:", v13);

    swift_unknownObjectRelease(v13);
    sub_10001DA60(v31);
    *(_QWORD *)(v21 + 64) = v29;
    sub_10001DA60(v32);
    sub_10001DA60(v33);
    return (_QWORD *)v21;
  }
LABEL_7:
  __break(1u);
  return result;
}

double sub_10002FE68()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  v0 = sub_10001B520((uint64_t *)&unk_1000BA180);
  v1 = RegistrationContainer.register<A>(_:name:factory:)(v0, 0, 0, sub_10002FEAC, 0, v0);
  *(_QWORD *)&result = swift_release(v1).n128_u64[0];
  return result;
}

uint64_t sub_10002FEAC@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v4 = a1[3];
  v5 = a1[4];
  sub_10001D9B4(a1, v4);
  v6 = sub_10001B520(&qword_1000BA020);
  result = dispatch thunk of ResolverType.resolve<A>(_:)(v6, v6, v4, v5);
  if (result)
  {
    v8 = result;
    v9 = a1[3];
    v10 = a1[4];
    sub_10001D9B4(a1, v9);
    v11 = sub_10001B520((uint64_t *)&unk_1000BA190);
    result = dispatch thunk of ResolverType.resolve<A>(_:)(v11, v11, v9, v10);
    if (result)
    {
      v12 = result;
      v13 = type metadata accessor for TelemetryEnablement();
      result = swift_allocObject(v13, 32, 7);
      *(_QWORD *)(result + 16) = v8;
      *(_QWORD *)(result + 24) = v12;
      a2[3] = v13;
      a2[4] = (uint64_t)&off_1000AC910;
      *a2 = result;
      return result;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t type metadata accessor for WidgetAnalyticsAssembly()
{
  return objc_opt_self(_TtC7NewsTag23WidgetAnalyticsAssembly);
}

double sub_10002FFA0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __n128 v8;
  uint64_t v9;
  void (*v10)(char *, uint64_t, uint64_t, __n128);
  uint64_t v11;
  __n128 v12;
  uint64_t (*v13)(char *, uint64_t, __n128);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __n128 v18;
  uint64_t v19;
  __n128 v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  __n128 v29;
  uint64_t v30;
  __n128 v31;
  uint64_t v32;
  uint64_t v33;
  double result;
  uint64_t v35;

  v0 = type metadata accessor for Scope(0);
  v1 = *(_QWORD *)(v0 - 8);
  v2 = __chkstk_darwin(v0);
  v4 = (char *)&v35 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = ProxyContainer.public.getter(v2);
  v6 = sub_10001B520(&qword_1000BA168);
  v7 = RegistrationContainer.register<A>(_:name:factory:)(v6, 0, 0, sub_10002FB18, 0, v6);
  v8 = swift_release(v5);
  v9 = enum case for Scope.singleton(_:);
  v10 = *(void (**)(char *, uint64_t, uint64_t, __n128))(v1 + 104);
  v10(v4, enum case for Scope.singleton(_:), v0, v8);
  v11 = Definition.inScope(_:)(v4);
  swift_release(v11);
  v12 = swift_release(v7);
  v13 = *(uint64_t (**)(char *, uint64_t, __n128))(v1 + 8);
  v14 = v13(v4, v0, v12);
  v15 = ProxyContainer.public.getter(v14);
  v16 = sub_10001B520(&qword_1000BA170);
  v17 = RegistrationContainer.register<A>(_:name:factory:)(v16, 0, 0, sub_10002FB2C, 0, v16);
  v18 = swift_release(v15);
  v10(v4, v9, v0, v18);
  v19 = Definition.inScope(_:)(v4);
  swift_release(v19);
  v20 = swift_release(v17);
  v21 = v13(v4, v0, v20);
  v22 = ProxyContainer.public.getter(v21);
  v23 = sub_10001B520(&qword_1000BA178);
  v24 = RegistrationContainer.register<A>(_:name:factory:)(v23, 0, 0, sub_10002FB88, 0, v23);
  swift_release(v24);
  swift_release(v22);
  v26 = ProxyContainer.public.getter(v25);
  v27 = type metadata accessor for TelemetryManager(0);
  v28 = RegistrationContainer.register<A>(_:name:factory:)(v27, 0, 0, sub_10002FC10, 0, v27);
  v29 = swift_release(v26);
  v10(v4, v9, v0, v29);
  v30 = Definition.inScope(_:)(v4);
  swift_release(v30);
  v31 = swift_release(v28);
  v32 = v13(v4, v0, v31);
  v33 = ProxyContainer.private.getter(v32);
  RegistrationContainer.lazy(block:)(sub_10002FE68, 0);
  *(_QWORD *)&result = swift_release(v33).n128_u64[0];
  return result;
}

unint64_t sub_1000301E0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000BA028;
  if (!qword_1000BA028)
  {
    v1 = objc_opt_self(FCNetworkBehaviorMonitor);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_1000BA028);
  }
  return result;
}

uint64_t sub_10003021C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  if ((*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80) & 0x20000) != 0)
  {
    swift_makeBoxUnique();
    return v2;
  }
  return result;
}

uint64_t sub_100030244(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 24) = v3;
  *(_QWORD *)(a2 + 32) = *(_QWORD *)(a1 + 32);
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t sub_100030288()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  return swift_deallocClassInstance(v0, 24, 7);
}

uint64_t type metadata accessor for SessionReporter()
{
  return objc_opt_self(_TtC7NewsTag15SessionReporter);
}

void sub_1000302CC(void (*a1)(__n128), uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  __n128 v23;
  _QWORD v24[5];
  uint64_t v25;

  v12 = swift_allocObject(&unk_1000ABA98, 32, 7);
  *(_QWORD *)(v12 + 16) = a1;
  *(_QWORD *)(v12 + 24) = a2;
  v13 = *(_QWORD *)(a5 + 16);
  if (v13)
  {
    v14 = *(void **)(a6 + 16);
    v15 = *(_QWORD *)(type metadata accessor for Session(0) - 8);
    v16 = a5 + ((*(unsigned __int8 *)(v15 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80));
    v17 = *(_QWORD *)(v15 + 72);
    swift_retain(a2);
    swift_bridgeObjectRetain(a5);
    do
    {
      sub_10003048C(v16, a7);
      v16 += v17;
      --v13;
    }
    while (v13);
    swift_bridgeObjectRelease(a5);
    v18 = sub_10002CC78(0, (unint64_t *)&qword_1000BBB00, OS_os_log_ptr);
    v19 = (void *)static OS_os_log.default.getter(v18);
    v20 = static os_log_type_t.default.getter();
    os_log(_:dso:log:type:_:)("session reporter will submit, if needed", 39, 2, &_mh_execute_header, v19, v20, _swiftEmptyArrayStorage);

    v21 = swift_allocObject(&unk_1000ABAC0, 32, 7);
    *(_QWORD *)(v21 + 16) = sub_100023030;
    *(_QWORD *)(v21 + 24) = v12;
    v24[4] = sub_100031214;
    v25 = v21;
    v24[0] = _NSConcreteStackBlock;
    v24[1] = 1107296256;
    v24[2] = sub_100031160;
    v24[3] = &unk_1000ABAD8;
    v22 = _Block_copy(v24);
    objc_msgSend(v14, "submitEventsIfNeededWithCompletion:", v22, swift_release(v25).n128_f64[0]);
    _Block_release(v22);
  }
  else
  {
    swift_retain(a2);
    v23 = swift_release(v12);
    a1(v23);
  }
}

void sub_10003048C(uint64_t a1, uint64_t a2)
{
  void *v2;
  id v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  id v17;
  void *v18;
  id v19;
  id v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  Class isa;
  _QWORD *v31;
  uint64_t v32;
  char **p_name;
  int v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _OWORD *v39;
  __int128 v40;
  uint64_t v41;
  id v42;
  void *v43;
  id v44;
  id v45;
  uint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  unint64_t v55;
  _QWORD *v56;
  unint64_t v57;
  void *v58;
  uint64_t v59;
  BOOL v60;
  unsigned __int8 v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  Class v68;
  uint64_t v69;
  uint64_t v70;
  _QWORD *v71;
  uint64_t v72;
  NSDate v73;
  uint64_t v74;
  uint64_t v75;
  NSURL *v76;
  void *v77;
  void *v78;
  uint64_t v79;
  unsigned __int8 v80;
  uint64_t v81;
  uint64_t v82;
  Class v83;
  uint64_t v84;
  uint64_t v85;
  Class v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  int *v92;
  char *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  id v97;
  _QWORD *v98;
  char *v99;
  char *v100;
  char *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  int v106;
  uint64_t v107;
  char *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  _QWORD *v112;
  unint64_t v113;
  uint64_t v114;
  uint64_t v115;
  unint64_t v116;
  _OWORD v117[2];
  char v118;
  _OWORD v119[2];
  char v120;
  _OWORD v121[2];
  char v122;

  v3 = v2;
  v105 = a1;
  v5 = type metadata accessor for DisappearanceEvent(0);
  __chkstk_darwin(v5);
  v90 = (uint64_t)&v88 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_10001B520(&qword_1000B93A0);
  __chkstk_darwin(v7);
  v101 = (char *)&v88 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_10001B520(&qword_1000BA258);
  __chkstk_darwin(v9);
  v99 = (char *)&v88 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v91 = type metadata accessor for EngagementEvent(0);
  v88 = *(_QWORD *)(v91 - 8);
  __chkstk_darwin(v91);
  v100 = (char *)&v88 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v96 = type metadata accessor for VisibleRectChangedEvent(0);
  v102 = *(_QWORD *)(v96 - 8);
  __chkstk_darwin(v96);
  v110 = (uint64_t)&v88 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for AppearanceEvent(0);
  __chkstk_darwin(v13);
  v15 = (char *)&v88 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = *(_QWORD *)(a2 + *(int *)(type metadata accessor for TrackableNewsTimelineEntry(0) + 20));
  v17 = *(id *)(v16 + OBJC_IVAR____TtC7NewsTag20TrackableWidgetState_results);
  v18 = sub_100060CD8();
  v19 = objc_msgSend(v17, "sections");
  v20 = objc_msgSend(v19, "array");

  v21 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v20, (char *)&type metadata for Any + 8);
  v22 = sub_1000500E8(v21);
  swift_bridgeObjectRelease(v21);
  swift_bridgeObjectRetain(v18);
  v23 = sub_100032418((unint64_t)v22, (uint64_t)v18);
  v111 = 0;
  v24 = v22;
  v25 = v105;
  swift_bridgeObjectRelease(v24);

  swift_bridgeObjectRelease_n(v18, 2);
  sub_10002A83C(v25, (uint64_t)v15, type metadata accessor for AppearanceEvent);
  memset(v121, 0, sizeof(v121));
  v122 = 1;
  v26 = *(int *)(v13 + 20);
  v103 = *(int *)(v13 + 24);
  v27 = v15[v103];
  v108 = v15;
  v104 = v26;
  v28 = v15[v26];
  v107 = v16;
  v29 = sub_100031234((uint64_t)v121, v28, v27);
  if ((objc_msgSend(v3, "respondsToSelector:", "widgetDidAppearAtDate:withTrackableWidgetState:") & 1) != 0)
  {
    swift_unknownObjectRetain(v3);
    swift_retain(v29);
    isa = Date._bridgeToObjectiveC()().super.isa;
    objc_msgSend(v3, "widgetDidAppearAtDate:withTrackableWidgetState:", isa, v29);
    swift_release(v29);
    swift_unknownObjectRelease(v3);

  }
  v89 = v29;
  v92 = (int *)type metadata accessor for Session(0);
  v31 = *(_QWORD **)(v25 + v92[5]);
  v32 = v31[2];
  p_name = &TagResolutionResult__metaData.name;
  v97 = v3;
  v95 = v32;
  if (!v32)
  {
    v71 = v23;
    v63 = (uint64_t)v101;
    v64 = (uint64_t)v100;
    v65 = (uint64_t)v99;
    goto LABEL_55;
  }
  v94 = (uint64_t)v31 + ((*(unsigned __int8 *)(v102 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v102 + 80));
  v98 = v31;
  swift_bridgeObjectRetain(v31);
  v34 = 0;
  v35 = 0;
  v93 = (char *)&type metadata for Any + 8;
  while (2)
  {
    if (v35 >= v98[2])
    {
LABEL_73:
      __break(1u);
      return;
    }
    v106 = v34;
    v36 = *(_QWORD *)(v102 + 72);
    v113 = v35;
    v37 = v94 + v36 * v35;
    v38 = v110;
    sub_10002A83C(v37, v110, type metadata accessor for VisibleRectChangedEvent);
    v39 = (_OWORD *)(v38 + *(int *)(v96 + 20));
    v40 = v39[1];
    v119[0] = *v39;
    v119[1] = v40;
    v120 = 0;
    v41 = sub_100031234((uint64_t)v119, v108[v104], v108[v103]);
    v42 = *(id *)(v41 + OBJC_IVAR____TtC7NewsTag20TrackableWidgetState_results);
    v109 = v41;
    v43 = sub_100060CD8();
    v44 = objc_msgSend(v42, "sections");
    v45 = objc_msgSend(v44, "array");

    v46 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v45, v93);
    v47 = sub_1000500E8(v46);
    swift_bridgeObjectRelease(v46);
    swift_bridgeObjectRetain(v43);
    v112 = v23;
    v48 = v111;
    v49 = (uint64_t)sub_100032418((unint64_t)v47, (uint64_t)v43);
    v111 = v48;
    v50 = (uint64_t)v112;
    swift_bridgeObjectRelease(v47);

    swift_bridgeObjectRelease_n(v43, 2);
    if ((unint64_t)v50 >> 62)
    {
      if (v50 < 0)
        v69 = v50;
      else
        v69 = v50 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v50);
      swift_bridgeObjectRetain(v49);
      v51 = _CocoaArrayWrapper.endIndex.getter(v69);
    }
    else
    {
      v51 = *(_QWORD *)((v50 & 0xFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain(v50);
      swift_bridgeObjectRetain(v49);
    }
    v52 = v49 & 0xFFFFFFFFFFFFFF8;
    if ((unint64_t)v49 >> 62)
    {
      if (v49 < 0)
        v70 = v49;
      else
        v70 = v49 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v49);
      v53 = _CocoaArrayWrapper.endIndex.getter(v70);
      swift_bridgeObjectRelease(v49);
    }
    else
    {
      v53 = *(_QWORD *)((v49 & 0xFFFFFFFFFFFFFF8) + 0x10);
    }
    v54 = 0;
    v55 = 0;
    ++v113;
    v115 = v50 & 0xFFFFFFFFFFFFFF8;
    v116 = v50 & 0xC000000000000001;
    v114 = v50 + 32;
    v56 = (_QWORD *)v49;
    v57 = v49 & 0xC000000000000001;
    while (v55 == v51)
    {
      v58 = 0;
      v59 = 0;
      v55 = v51;
      v23 = v56;
      if (v53 == v54)
        goto LABEL_37;
LABEL_21:
      if (v57)
      {
        v59 = specialized _ArrayBuffer._getElementSlowPath(_:)(v54, v23);
        if (__OFADD__(v54, 1))
          goto LABEL_69;
      }
      else
      {
        if (v54 >= *(_QWORD *)(v52 + 16))
        {
          __break(1u);
LABEL_69:
          __break(1u);
LABEL_70:
          __break(1u);
LABEL_71:
          __break(1u);
LABEL_72:
          __break(1u);
          goto LABEL_73;
        }
        v59 = v23[v54 + 4];
        swift_unknownObjectRetain(v59);
        if (__OFADD__(v54, 1))
          goto LABEL_69;
      }
      if (!v58)
        goto LABEL_37;
      if (!v59)
        goto LABEL_35;
      v61 = objc_msgSend(v58, "isEqual:", v59);
      swift_unknownObjectRelease(v58);
      swift_unknownObjectRelease(v59);
      ++v54;
      if ((v61 & 1) == 0)
      {
        swift_bridgeObjectRelease_n(v112, 2);
        v23 = v56;
        swift_bridgeObjectRelease(v56);
        goto LABEL_40;
      }
    }
    if (v116)
    {
      v58 = (void *)specialized _ArrayBuffer._getElementSlowPath(_:)(v55, v112);
      v60 = __OFADD__(v55++, 1);
      if (v60)
        goto LABEL_72;
    }
    else
    {
      if ((v55 & 0x8000000000000000) != 0)
        goto LABEL_70;
      if (v55 >= *(_QWORD *)(v115 + 16))
        goto LABEL_71;
      v58 = *(void **)(v114 + 8 * v55);
      swift_unknownObjectRetain(v58);
      v60 = __OFADD__(v55++, 1);
      if (v60)
        goto LABEL_72;
    }
    v23 = v56;
    if (v53 != v54)
      goto LABEL_21;
    if (v58)
    {
LABEL_35:
      swift_bridgeObjectRelease_n(v112, 2);
      swift_bridgeObjectRelease(v23);
      v62 = (uint64_t)v58;
LABEL_39:
      swift_unknownObjectRelease(v62);
LABEL_40:
      v3 = v97;
      v25 = v105;
      v63 = (uint64_t)v101;
      v64 = (uint64_t)v100;
      v65 = (uint64_t)v99;
      p_name = &TagResolutionResult__metaData.name;
      v35 = v113;
      goto LABEL_41;
    }
    v59 = 0;
LABEL_37:
    swift_bridgeObjectRelease(v23);
    swift_bridgeObjectRelease_n(v112, 2);
    if (v59)
    {
      v62 = v59;
      goto LABEL_39;
    }
    v3 = v97;
    v25 = v105;
    v63 = (uint64_t)v101;
    v64 = (uint64_t)v100;
    v65 = (uint64_t)v99;
    p_name = (char **)(&TagResolutionResult__metaData + 24);
    v35 = v113;
    if ((v106 & 1) != 0)
    {
LABEL_5:
      sub_100027D34(v110, type metadata accessor for VisibleRectChangedEvent);
      swift_release(v109);
      goto LABEL_6;
    }
LABEL_41:
    if ((objc_msgSend(v3, "respondsToSelector:", p_name[433]) & 1) == 0)
      goto LABEL_5;
    swift_unknownObjectRetain(v3);
    v66 = v109;
    swift_retain(v109);
    v67 = v110;
    v68 = Date._bridgeToObjectiveC()().super.isa;
    objc_msgSend(v3, p_name[433], v68, 5, v66);
    swift_release_n(v66, 2);
    swift_unknownObjectRelease(v3);

    v35 = v113;
    sub_100027D34(v67, type metadata accessor for VisibleRectChangedEvent);
LABEL_6:
    v34 = 1;
    if (v35 != v95)
      continue;
    break;
  }
  swift_bridgeObjectRelease(v23);
  v71 = v98;
LABEL_55:
  swift_bridgeObjectRelease(v71);
  sub_10002CCB0(v25 + v92[6], v65, &qword_1000BA258);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v88 + 48))(v65, 1, v91) == 1)
  {
    sub_10002CCF4(v65, &qword_1000BA258);
  }
  else
  {
    sub_10002AC74(v65, v64, type metadata accessor for EngagementEvent);
    if ((objc_msgSend(v3, "respondsToSelector:", "userEngagedWithWidgetAtDate:actionURL:trackableWidgetState:") & 1) != 0)
    {
      v72 = v64 + *(int *)(v91 + 20);
      swift_unknownObjectRetain(v3);
      v73.super.isa = Date._bridgeToObjectiveC()().super.isa;
      sub_10002CCB0(v72, v63, &qword_1000B93A0);
      v74 = type metadata accessor for URL(0);
      v75 = *(_QWORD *)(v74 - 8);
      v77 = 0;
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v75 + 48))(v63, 1, v74) != 1)
      {
        URL._bridgeToObjectiveC()(v76);
        v77 = v78;
        (*(void (**)(uint64_t, uint64_t))(v75 + 8))(v63, v74);
      }
      v3 = v97;
      objc_msgSend(v97, "userEngagedWithWidgetAtDate:actionURL:trackableWidgetState:", v73.super.isa, v77, v107);
      swift_unknownObjectRelease(v3);

    }
    sub_100027D34(v64, type metadata accessor for EngagementEvent);
  }
  v118 = 0;
  memset(v117, 0, sizeof(v117));
  v79 = sub_100031234((uint64_t)v117, v108[v104], v108[v103]);
  v80 = objc_msgSend(v3, "respondsToSelector:", p_name[433]);
  v81 = v89;
  if ((v80 & 1) != 0)
  {
    v82 = v90;
    sub_10002A83C(v25 + v92[7], v90, type metadata accessor for DisappearanceEvent);
    swift_unknownObjectRetain(v3);
    v83 = Date._bridgeToObjectiveC()().super.isa;
    objc_msgSend(v3, p_name[433], v83, 4, v79);
    swift_unknownObjectRelease(v3);

    v84 = type metadata accessor for Date(0);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v84 - 8) + 8))(v82, v84);
  }
  if ((objc_msgSend(v3, "respondsToSelector:", "widgetDidDisappearAtDate:withTrackableWidgetState:") & 1) != 0)
  {
    v85 = v90;
    sub_10002A83C(v25 + v92[7], v90, type metadata accessor for DisappearanceEvent);
    swift_unknownObjectRetain(v3);
    v86 = Date._bridgeToObjectiveC()().super.isa;
    objc_msgSend(v3, "widgetDidDisappearAtDate:withTrackableWidgetState:", v86, v107);
    swift_release(v79);
    swift_release(v81);
    swift_unknownObjectRelease(v3);

    sub_100027D34((uint64_t)v108, type metadata accessor for AppearanceEvent);
    v87 = type metadata accessor for Date(0);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v87 - 8) + 8))(v85, v87);
  }
  else
  {
    swift_release(v79);
    swift_release(v81);
    sub_100027D34((uint64_t)v108, type metadata accessor for AppearanceEvent);
  }
}

uint64_t sub_1000310D8(uint64_t (*a1)(void))
{
  uint64_t v2;
  void *v3;
  uint64_t v4;

  v2 = sub_10002CC78(0, (unint64_t *)&qword_1000BBB00, OS_os_log_ptr);
  v3 = (void *)static OS_os_log.default.getter(v2);
  v4 = static os_log_type_t.default.getter();
  os_log(_:dso:log:type:_:)("session reporter did submit, if needed", 38, 2, &_mh_execute_header, v3, v4, _swiftEmptyArrayStorage);

  return a1();
}

uint64_t sub_100031160(uint64_t a1)
{
  void (*v1)(uint64_t);
  uint64_t v2;
  uint64_t v3;

  v1 = *(void (**)(uint64_t))(a1 + 32);
  v2 = *(_QWORD *)(a1 + 40);
  v3 = swift_retain(v2);
  v1(v3);
  return swift_release(v2);
}

uint64_t sub_10003118C(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD v6[6];

  v3 = *v2;
  v6[2] = a1;
  v6[3] = v3;
  v6[4] = a2;
  v4 = sub_10001B520(&qword_1000BA250);
  swift_allocObject(v4, *(unsigned int *)(v4 + 48), *(unsigned __int16 *)(v4 + 52));
  return Promise.init(resolver:)(sub_1000311E4, v6);
}

void sub_1000311E4(void (*a1)(__n128), uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v4;

  sub_1000302CC(a1, a2, a3, a4, v4[2], v4[3], v4[4]);
}

uint64_t sub_1000311F0()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100031214()
{
  uint64_t v0;

  return sub_1000310D8(*(uint64_t (**)(void))(v0 + 16));
}

uint64_t sub_10003121C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10003122C(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_100031234(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  void *v13;
  void *v14;
  uint64_t (*v15)(_QWORD);
  uint64_t v16;
  uint64_t v17;
  id v18;
  id v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v27 = a2;
  v28 = a3;
  v29 = a1;
  v4 = *v3;
  v5 = type metadata accessor for Date(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v24 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for LayoutContext(0);
  __chkstk_darwin(v9);
  v11 = (char *)&v24 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = *(uint64_t *)((char *)v3 + OBJC_IVAR____TtC7NewsTag20TrackableWidgetState_entryID + 8);
  v26 = *(uint64_t *)((char *)v3 + OBJC_IVAR____TtC7NewsTag20TrackableWidgetState_entryID);
  v13 = *(void **)((char *)v3 + OBJC_IVAR____TtC7NewsTag20TrackableWidgetState_results);
  v14 = *(void **)((char *)v3 + OBJC_IVAR____TtC7NewsTag20TrackableWidgetState_fetchInfo);
  sub_10002A83C((uint64_t)v3 + OBJC_IVAR____TtC7NewsTag20TrackableWidgetState_layoutContext, (uint64_t)v11, v15);
  v16 = *(uint64_t *)((char *)v3 + OBJC_IVAR____TtC7NewsTag20TrackableWidgetState_contentID + 8);
  v17 = *(uint64_t *)((char *)v3 + OBJC_IVAR____TtC7NewsTag20TrackableWidgetState_appearanceType);
  v24 = *(uint64_t *)((char *)v3 + OBJC_IVAR____TtC7NewsTag20TrackableWidgetState_contentID);
  v25 = v17;
  v27 = v27;
  v28 = v28;
  swift_bridgeObjectRetain(v16);
  swift_bridgeObjectRetain(v12);
  v18 = v13;
  v19 = v14;
  Date.init()(v19);
  v20 = swift_allocObject(v4, *(unsigned int *)(v4 + 48), *(unsigned __int16 *)(v4 + 52));
  (*(void (**)(uint64_t, char *, uint64_t))(v6 + 32))(v20 + OBJC_IVAR____TtC7NewsTag20TrackableWidgetState_contentFetchDate, v8, v5);
  v21 = (_QWORD *)(v20 + OBJC_IVAR____TtC7NewsTag20TrackableWidgetState_entryID);
  *v21 = v26;
  v21[1] = v12;
  *(_QWORD *)(v20 + OBJC_IVAR____TtC7NewsTag20TrackableWidgetState_results) = v18;
  *(_QWORD *)(v20 + OBJC_IVAR____TtC7NewsTag20TrackableWidgetState_fetchInfo) = v19;
  sub_10002AC74((uint64_t)v11, v20 + OBJC_IVAR____TtC7NewsTag20TrackableWidgetState_layoutContext, type metadata accessor for LayoutContext);
  v22 = (_QWORD *)(v20 + OBJC_IVAR____TtC7NewsTag20TrackableWidgetState_contentID);
  *v22 = v24;
  v22[1] = v16;
  *(_QWORD *)(v20 + OBJC_IVAR____TtC7NewsTag20TrackableWidgetState_appearanceType) = v25;
  sub_100032588(v29, v20 + OBJC_IVAR____TtC7NewsTag20TrackableWidgetState_visibleRect);
  *(_QWORD *)(v20 + OBJC_IVAR____TtC7NewsTag20TrackableWidgetState_stackKind) = v27;
  *(_QWORD *)(v20 + OBJC_IVAR____TtC7NewsTag20TrackableWidgetState_stackLocation) = v28;
  return v20;
}

unint64_t sub_1000314A4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  Swift::Int v12;
  _QWORD v15[9];

  v2 = v1;
  v4 = type metadata accessor for URL(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v15[-1] - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for ImageStoreKey(0);
  __chkstk_darwin(v8);
  v10 = (char *)&v15[-1] - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  Hasher.init(_seed:)(v15, *(_QWORD *)(v2 + 40));
  sub_10002A83C(a1, (uint64_t)v10, type metadata accessor for ImageStoreKey);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48))(v10, 1, v4) == 1)
  {
    Hasher._combine(_:)(1uLL);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v5 + 32))(v7, v10, v4);
    Hasher._combine(_:)(0);
    v11 = sub_10003261C((unint64_t *)&qword_1000BA288, (uint64_t)&protocol conformance descriptor for URL);
    dispatch thunk of Hashable.hash(into:)(v15, v4, v11);
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  }
  v12 = Hasher._finalize()();
  return sub_1000317CC(a1, v12);
}

unint64_t sub_100031618(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  Swift::Int v7;
  _QWORD v9[9];

  v3 = *(_QWORD *)(v1 + 40);
  v4 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
  v6 = v5;
  Hasher.init(_seed:)(v9, v3);
  String.hash(into:)(v9, v4, v6);
  v7 = Hasher._finalize()();
  swift_bridgeObjectRelease(v6);
  return sub_100031AFC(a1, v7);
}

unint64_t sub_1000316A4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  Swift::Int v4;

  v2 = v1;
  v4 = NSObject._rawHashValue(seed:)(*(_QWORD *)(v2 + 40));
  return sub_100031C70(a1, v4);
}

unint64_t sub_1000316D4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  Swift::Int v5;
  _QWORD v7[9];

  Hasher.init(_seed:)(v7, *(_QWORD *)(v2 + 40));
  String.hash(into:)(v7, a1, a2);
  v5 = Hasher._finalize()();
  return sub_100031D88(a1, a2, v5);
}

unint64_t sub_100031738(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = v1;
  v4 = *(_QWORD *)(v2 + 40);
  v5 = type metadata accessor for URL(0);
  v6 = sub_10003261C((unint64_t *)&qword_1000BA288, (uint64_t)&protocol conformance descriptor for URL);
  v7 = dispatch thunk of Hashable._rawHashValue(seed:)(v4, v5, v6);
  return sub_100031E68(a1, v7);
}

unint64_t sub_10003179C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  Swift::Int v4;

  v2 = v1;
  v4 = AnyHashable._rawHashValue(seed:)(*(_QWORD *)(v2 + 40));
  return sub_100031FA0(a1, v4);
}

unint64_t sub_1000317CC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int (*v22)(char *, uint64_t, uint64_t);
  void (*v23)(char *, uint64_t, uint64_t);
  char *v24;
  char *v25;
  char v26;
  void (*v27)(char *, uint64_t);
  char *v28;
  char *v29;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  char *v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v39 = a1;
  v4 = type metadata accessor for URL(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = __chkstk_darwin(v4);
  v34 = (char *)&v31 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v33 = (char *)&v31 - v8;
  v9 = sub_10001B520(&qword_1000BA290);
  __chkstk_darwin(v9);
  v11 = (char *)&v31 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for ImageStoreKey(0);
  v13 = __chkstk_darwin(v12);
  v35 = (char *)&v31 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  v17 = (char *)&v31 - v16;
  v40 = v2;
  v18 = -1 << *(_BYTE *)(v2 + 32);
  v19 = a2 & ~v18;
  v38 = v2 + 64;
  if (((*(_QWORD *)(v2 + 64 + ((v19 >> 3) & 0xFFFFFFFFFFFFF8)) >> v19) & 1) != 0)
  {
    v36 = ~v18;
    v37 = *(_QWORD *)(v15 + 72);
    v20 = (uint64_t)v35;
    v32 = v9;
    while (1)
    {
      sub_10002A83C(*(_QWORD *)(v40 + 48) + v37 * v19, (uint64_t)v17, type metadata accessor for ImageStoreKey);
      v21 = (uint64_t)&v11[*(int *)(v9 + 48)];
      sub_10002A83C((uint64_t)v17, (uint64_t)v11, type metadata accessor for ImageStoreKey);
      sub_10002A83C(v39, v21, type metadata accessor for ImageStoreKey);
      v22 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48);
      if (v22(v11, 1, v4) == 1)
        break;
      sub_10002A83C((uint64_t)v11, v20, type metadata accessor for ImageStoreKey);
      if (v22((char *)v21, 1, v4) == 1)
      {
        (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v20, v4);
LABEL_4:
        sub_10002CCF4((uint64_t)v11, &qword_1000BA290);
        sub_100027D34((uint64_t)v17, type metadata accessor for ImageStoreKey);
        goto LABEL_5;
      }
      v23 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 32);
      v24 = v33;
      v23(v33, v20, v4);
      v25 = v34;
      v23(v34, v21, v4);
      v26 = static URL.== infix(_:_:)(v24, v25);
      v27 = *(void (**)(char *, uint64_t))(v5 + 8);
      v28 = v25;
      v20 = (uint64_t)v35;
      v27(v28, v4);
      v29 = v24;
      v9 = v32;
      v27(v29, v4);
      sub_100027D34((uint64_t)v11, type metadata accessor for ImageStoreKey);
      sub_100027D34((uint64_t)v17, type metadata accessor for ImageStoreKey);
      if ((v26 & 1) != 0)
        return v19;
LABEL_5:
      v19 = (v19 + 1) & v36;
      if (((*(_QWORD *)(v38 + ((v19 >> 3) & 0xFFFFFFFFFFFFF8)) >> v19) & 1) == 0)
        return v19;
    }
    if (v22((char *)v21, 1, v4) == 1)
    {
      sub_100027D34((uint64_t)v11, type metadata accessor for ImageStoreKey);
      sub_100027D34((uint64_t)v17, type metadata accessor for ImageStoreKey);
      return v19;
    }
    goto LABEL_4;
  }
  return v19;
}

unint64_t sub_100031AFC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  char v22;

  v3 = v2 + 64;
  v4 = -1 << *(_BYTE *)(v2 + 32);
  v5 = a2 & ~v4;
  if (((*(_QWORD *)(v2 + 64 + ((v5 >> 3) & 0xFFFFFFFFFFFFF8)) >> v5) & 1) != 0)
  {
    v7 = static String._unconditionallyBridgeFromObjectiveC(_:)(*(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * v5));
    v9 = v8;
    v10 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
    if (v7 == v10 && v9 == v11)
    {
LABEL_16:
      swift_bridgeObjectRelease_n(v9, 2);
      return v5;
    }
    v13 = v11;
    v14 = _stringCompareWithSmolCheck(_:_:expecting:)(v7, v9, v10, v11, 0);
    swift_bridgeObjectRelease(v9);
    swift_bridgeObjectRelease(v13);
    if ((v14 & 1) == 0)
    {
      v15 = ~v4;
      v5 = (v5 + 1) & v15;
      if (((*(_QWORD *)(v3 + ((v5 >> 3) & 0xFFFFFFFFFFFFF8)) >> v5) & 1) != 0)
      {
        while (1)
        {
          v16 = static String._unconditionallyBridgeFromObjectiveC(_:)(*(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * v5));
          v9 = v17;
          v18 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
          if (v16 == v18 && v9 == v19)
            break;
          v21 = v19;
          v22 = _stringCompareWithSmolCheck(_:_:expecting:)(v16, v9, v18, v19, 0);
          swift_bridgeObjectRelease(v9);
          swift_bridgeObjectRelease(v21);
          if ((v22 & 1) == 0)
          {
            v5 = (v5 + 1) & v15;
            if (((*(_QWORD *)(v3 + ((v5 >> 3) & 0xFFFFFFFFFFFFF8)) >> v5) & 1) != 0)
              continue;
          }
          return v5;
        }
        goto LABEL_16;
      }
    }
  }
  return v5;
}

unint64_t sub_100031C70(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t i;
  id v6;
  char v7;
  uint64_t v8;
  id v9;
  char v10;

  v3 = v2 + 64;
  v4 = -1 << *(_BYTE *)(v2 + 32);
  i = a2 & ~v4;
  if (((*(_QWORD *)(v2 + 64 + ((i >> 3) & 0xFFFFFFFFFFFFF8)) >> i) & 1) != 0)
  {
    sub_10002CC78(0, (unint64_t *)&qword_1000BBD00, NTSection_ptr);
    v6 = *(id *)(*(_QWORD *)(v2 + 48) + 8 * i);
    v7 = static NSObject.== infix(_:_:)();

    if ((v7 & 1) == 0)
    {
      v8 = ~v4;
      for (i = (i + 1) & v8; ((*(_QWORD *)(v3 + ((i >> 3) & 0xFFFFFFFFFFFFF8)) >> i) & 1) != 0; i = (i + 1) & v8)
      {
        v9 = *(id *)(*(_QWORD *)(v2 + 48) + 8 * i);
        v10 = static NSObject.== infix(_:_:)();

        if ((v10 & 1) != 0)
          break;
      }
    }
  }
  return i;
}

unint64_t sub_100031D88(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  BOOL v16;

  v4 = v3 + 64;
  v5 = -1 << *(_BYTE *)(v3 + 32);
  v6 = a3 & ~v5;
  if (((*(_QWORD *)(v3 + 64 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0)
  {
    v9 = *(_QWORD *)(v3 + 48);
    v10 = (_QWORD *)(v9 + 16 * v6);
    v11 = v10[1];
    v12 = *v10 == a1 && v11 == a2;
    if (!v12 && (_stringCompareWithSmolCheck(_:_:expecting:)(*v10, v11, a1, a2, 0) & 1) == 0)
    {
      v13 = ~v5;
      do
      {
        v6 = (v6 + 1) & v13;
        if (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) == 0)
          break;
        v14 = (_QWORD *)(v9 + 16 * v6);
        v15 = v14[1];
        v16 = *v14 == a1 && v15 == a2;
      }
      while (!v16 && (_stringCompareWithSmolCheck(_:_:expecting:)(*v14, v15, a1, a2, 0) & 1) == 0);
    }
  }
  return v6;
}

unint64_t sub_100031E68(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(char *, unint64_t, uint64_t);
  uint64_t v14;
  char v15;
  uint64_t v17;
  uint64_t v18;

  v3 = v2;
  v18 = a1;
  v5 = type metadata accessor for URL(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = -1 << *(_BYTE *)(v3 + 32);
  v10 = a2 & ~v9;
  if (((*(_QWORD *)(v3 + 64 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) != 0)
  {
    v11 = ~v9;
    v12 = *(_QWORD *)(v6 + 72);
    v13 = *(void (**)(char *, unint64_t, uint64_t))(v6 + 16);
    do
    {
      v13(v8, *(_QWORD *)(v3 + 48) + v12 * v10, v5);
      v14 = sub_10003261C((unint64_t *)&qword_1000BBAE0, (uint64_t)&protocol conformance descriptor for URL);
      v15 = dispatch thunk of static Equatable.== infix(_:_:)(v8, v18, v5, v14);
      (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
      if ((v15 & 1) != 0)
        break;
      v10 = (v10 + 1) & v11;
    }
    while (((*(_QWORD *)(v3 + 64 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) != 0);
  }
  return v10;
}

unint64_t sub_100031FA0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v6;
  char v7;
  _BYTE v9[40];

  v3 = -1 << *(_BYTE *)(v2 + 32);
  v4 = a2 & ~v3;
  if (((*(_QWORD *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFF8)) >> v4) & 1) != 0)
  {
    v6 = ~v3;
    do
    {
      sub_10003265C(*(_QWORD *)(v2 + 48) + 40 * v4, (uint64_t)v9);
      v7 = static AnyHashable.== infix(_:_:)(v9, a1);
      sub_100032698((uint64_t)v9);
      if ((v7 & 1) != 0)
        break;
      v4 = (v4 + 1) & v6;
    }
    while (((*(_QWORD *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFF8)) >> v4) & 1) != 0);
  }
  return v4;
}

uint64_t sub_100032064(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int isUniquelyReferenced_nonNull_bridgeObject;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  if ((unint64_t)a1 >> 62)
  {
    if (a1 < 0)
      v16 = a1;
    else
      v16 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v3 = _CocoaArrayWrapper.endIndex.getter(v16);
    swift_bridgeObjectRelease(a1);
  }
  else
  {
    v3 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  v4 = *v1;
  if (!((unint64_t)*v1 >> 62))
  {
    v5 = *(_QWORD *)((v4 & 0xFFFFFFFFFFFFF8) + 0x10);
    v6 = v5 + v3;
    if (!__OFADD__(v5, v3))
      goto LABEL_5;
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  if (v4 < 0)
    v17 = *v1;
  else
    v17 = v4 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(*v1);
  v5 = _CocoaArrayWrapper.endIndex.getter(v17);
  swift_bridgeObjectRelease(v4);
  v6 = v5 + v3;
  if (__OFADD__(v5, v3))
    goto LABEL_29;
LABEL_5:
  v4 = *v1;
  isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject(*v1);
  *v1 = v4;
  v5 = 0;
  if (isUniquelyReferenced_nonNull_bridgeObject && (v4 & 0x8000000000000000) == 0 && (v4 & 0x4000000000000000) == 0)
  {
    v8 = v4 & 0xFFFFFFFFFFFFFF8;
    if (v6 <= *(_QWORD *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
      goto LABEL_15;
    v5 = 1;
  }
  if ((unint64_t)v4 >> 62)
    goto LABEL_31;
  v9 = *(_QWORD *)((v4 & 0xFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    if (v9 <= v6)
      v9 = v6;
    swift_bridgeObjectRetain(v4);
    v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v5, v9, 1, v4);
    swift_bridgeObjectRelease(*v1);
    *v1 = v4;
    v8 = v4 & 0xFFFFFFFFFFFFFF8;
LABEL_15:
    result = sub_10003221C(v8 + 8 * *(_QWORD *)(v8 + 16) + 32, (*(_QWORD *)(v8 + 24) >> 1) - *(_QWORD *)(v8 + 16), a1);
    if (v11 >= v3)
      break;
LABEL_30:
    __break(1u);
LABEL_31:
    if (v4 < 0)
      v18 = v4;
    else
      v18 = v4 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v4);
    v9 = _CocoaArrayWrapper.endIndex.getter(v18);
    swift_bridgeObjectRelease(v4);
  }
  if (v11 < 1)
    goto LABEL_19;
  v12 = *(_QWORD *)((*v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  v13 = __OFADD__(v12, v11);
  v14 = v12 + v11;
  if (!v13)
  {
    *(_QWORD *)((*v1 & 0xFFFFFFFFFFFFFF8) + 0x10) = v14;
LABEL_19:
    v15 = swift_bridgeObjectRelease(result);
    return specialized Array._endMutation()(v15);
  }
  __break(1u);
  return result;
}

uint64_t sub_10003221C(unint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t i;
  void (*v13)(_QWORD *);
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t result;
  uint64_t *v18[4];

  v6 = (unint64_t)a3 >> 62;
  if ((unint64_t)a3 >> 62)
  {
    if (a3 < 0)
      v16 = a3;
    else
      v16 = a3 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a3);
    v7 = _CocoaArrayWrapper.endIndex.getter(v16);
    swift_bridgeObjectRelease(a3);
    if (!v7)
      return a3;
  }
  else
  {
    v7 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (!v7)
      return a3;
  }
  if (!a1)
    goto LABEL_25;
  v8 = a3 & 0xFFFFFFFFFFFFFF8;
  if (v6)
  {
    if (a3 < 0)
      v10 = a3;
    else
      v10 = a3 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a3);
    v11 = _CocoaArrayWrapper.endIndex.getter(v10);
    swift_bridgeObjectRelease(a3);
    if (v11 <= a2)
    {
      if (v7 >= 1)
      {
        sub_1000325D0();
        swift_bridgeObjectRetain(a3);
        for (i = 0; i != v7; ++i)
        {
          sub_10001B520(&qword_1000BA278);
          v13 = sub_10005059C(v18, i, a3);
          v15 = *v14;
          swift_unknownObjectRetain(*v14);
          ((void (*)(uint64_t **, _QWORD))v13)(v18, 0);
          *(_QWORD *)(a1 + 8 * i) = v15;
        }
        swift_bridgeObjectRelease(a3);
        return a3;
      }
      goto LABEL_24;
    }
LABEL_23:
    __break(1u);
LABEL_24:
    __break(1u);
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  v9 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (v9 > a2)
  {
    __break(1u);
    goto LABEL_23;
  }
  if (v8 + 32 >= a1 + 8 * v9 || v8 + 32 + 8 * v9 <= a1)
  {
    sub_10001B520(&qword_1000BA270);
    swift_arrayInitWithCopy(a1);
    return a3;
  }
LABEL_26:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

_QWORD *sub_100032418(unint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  id v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  id v10;
  unint64_t v11;
  _QWORD *v12;
  char v13;
  uint64_t v14;
  unint64_t v16;

  v3 = a1;
  if (a1 >> 62)
    goto LABEL_16;
  v4 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain(a1);
  for (; v4; v4 = _CocoaArrayWrapper.endIndex.getter(v14))
  {
    v16 = v3 & 0xC000000000000001;
    v5 = 4;
    while (1)
    {
      v6 = v16 ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v5 - 4, v3) : *(id *)(v3 + 8 * v5);
      v7 = v6;
      v8 = v5 - 3;
      if (__OFADD__(v5 - 4, 1))
        break;
      if (*(_QWORD *)(a2 + 16))
      {
        v9 = v3;
        v10 = v6;
        v11 = sub_1000316A4((uint64_t)v10);
        v12 = _swiftEmptyArrayStorage;
        if ((v13 & 1) != 0)
        {
          v12 = *(_QWORD **)(*(_QWORD *)(a2 + 56) + 8 * v11);
          swift_bridgeObjectRetain(v12);
        }

        v3 = v9;
      }
      else
      {
        v12 = _swiftEmptyArrayStorage;
      }

      sub_100032064((uint64_t)v12);
      ++v5;
      if (v8 == v4)
        goto LABEL_20;
    }
    __break(1u);
LABEL_16:
    if (v3 < 0)
      v14 = v3;
    else
      v14 = v3 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v3);
  }
LABEL_20:
  swift_bridgeObjectRelease(v3);
  return _swiftEmptyArrayStorage;
}

uint64_t sub_100032588(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10001B520((uint64_t *)&unk_1000BA260);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

unint64_t sub_1000325D0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000BA280;
  if (!qword_1000BA280)
  {
    v1 = sub_10001B560(&qword_1000BA278);
    result = swift_getWitnessTable(&protocol conformance descriptor for [A], v1);
    atomic_store(result, (unint64_t *)&qword_1000BA280);
  }
  return result;
}

uint64_t sub_10003261C(unint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    v5 = type metadata accessor for URL(255);
    result = swift_getWitnessTable(a2, v5);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10003265C(uint64_t a1, uint64_t a2)
{
  (*(void (**)(uint64_t, uint64_t))(*(&type metadata for AnyHashable - 1) + 16))(a2, a1);
  return a2;
}

uint64_t sub_100032698(uint64_t a1)
{
  (*(void (**)(void))(*(&type metadata for AnyHashable - 1) + 8))();
  return a1;
}

uint64_t sub_1000326D0()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 32));
  return swift_deallocClassInstance(v0, 40, 7);
}

uint64_t type metadata accessor for ProactiveSuggestionManager()
{
  return objc_opt_self(_TtC7NewsTag26ProactiveSuggestionManager);
}

char *sub_10003271C(char *a1, char **a2, uint64_t a3)
{
  int v3;
  char *v4;
  char *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int (*v14)(char *, uint64_t, uint64_t);
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *__dst;

  v3 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  v4 = *a2;
  *(_QWORD *)a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    v7 = &v4[(v3 + 16) & ~(unint64_t)v3];
    swift_retain(v4);
  }
  else
  {
    v7 = a1;
    v9 = a2[1];
    v8 = a2[2];
    *((_QWORD *)a1 + 1) = v9;
    *((_QWORD *)a1 + 2) = v8;
    a1[24] = *((_BYTE *)a2 + 24);
    v10 = *(int *)(a3 + 32);
    __dst = &a1[v10];
    v11 = (char *)a2 + v10;
    v12 = type metadata accessor for URL(0);
    v13 = *(_QWORD *)(v12 - 8);
    v14 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48);
    v15 = v4;
    v16 = v9;
    swift_bridgeObjectRetain(v8);
    if (v14(v11, 1, v12))
    {
      v17 = sub_10001B520(&qword_1000B93A0);
      memcpy(__dst, v11, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v13 + 16))(__dst, v11, v12);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v13 + 56))(__dst, 0, 1, v12);
    }
    v18 = *(int *)(a3 + 36);
    v19 = &v7[v18];
    v20 = (char *)a2 + v18;
    v21 = type metadata accessor for Date(0);
    v22 = *(_QWORD *)(v21 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v22 + 48))(v20, 1, v21))
    {
      v23 = sub_10001B520((uint64_t *)&unk_1000BC550);
      memcpy(v19, v20, *(_QWORD *)(*(_QWORD *)(v23 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v22 + 16))(v19, v20, v21);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v22 + 56))(v19, 0, 1, v21);
    }
  }
  return v7;
}

uint64_t sub_1000328CC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;

  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 16));
  v4 = a1 + *(int *)(a2 + 32);
  v5 = type metadata accessor for URL(0);
  v6 = *(_QWORD *)(v5 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5))
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v4, v5);
  v7 = a1 + *(int *)(a2 + 36);
  v8 = type metadata accessor for Date(0);
  v9 = *(_QWORD *)(v8 - 8);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8);
  if (!(_DWORD)result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(v9 + 8))(v7, v8);
  return result;
}

uint64_t sub_1000329A4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  const void *v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int (*v13)(const void *, uint64_t, uint64_t);
  id v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  const void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v5 = *(void **)a2;
  v6 = *(void **)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v6;
  v7 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 16) = v7;
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  v8 = *(int *)(a3 + 32);
  v9 = (void *)(a1 + v8);
  v10 = (const void *)(a2 + v8);
  v11 = type metadata accessor for URL(0);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v12 + 48);
  v14 = v5;
  v15 = v6;
  swift_bridgeObjectRetain(v7);
  if (v13(v10, 1, v11))
  {
    v16 = sub_10001B520(&qword_1000B93A0);
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v12 + 16))(v9, v10, v11);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
  }
  v17 = *(int *)(a3 + 36);
  v18 = (void *)(a1 + v17);
  v19 = (const void *)(a2 + v17);
  v20 = type metadata accessor for Date(0);
  v21 = *(_QWORD *)(v20 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v21 + 48))(v19, 1, v20))
  {
    v22 = sub_10001B520((uint64_t *)&unk_1000BC550);
    memcpy(v18, v19, *(_QWORD *)(*(_QWORD *)(v22 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v21 + 16))(v18, v19, v20);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v21 + 56))(v18, 0, 1, v20);
  }
  return a1;
}

uint64_t sub_100032B28(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v6;
  void *v7;
  id v8;
  void *v9;
  void *v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t (*v19)(void *, uint64_t, uint64_t);
  int v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t (*v28)(void *, uint64_t, uint64_t);
  int v29;
  int v30;
  uint64_t v31;

  v6 = *(void **)a1;
  v7 = *(void **)a2;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v8 = v7;

  v9 = *(void **)(a2 + 8);
  v10 = *(void **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v9;
  v11 = v9;

  v12 = *(_QWORD *)(a2 + 16);
  v13 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v12;
  swift_bridgeObjectRetain(v12);
  swift_bridgeObjectRelease(v13);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  v14 = *(int *)(a3 + 32);
  v15 = (void *)(a1 + v14);
  v16 = (void *)(a2 + v14);
  v17 = type metadata accessor for URL(0);
  v18 = *(_QWORD *)(v17 - 8);
  v19 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v18 + 48);
  v20 = v19(v15, 1, v17);
  v21 = v19(v16, 1, v17);
  if (v20)
  {
    if (!v21)
    {
      (*(void (**)(void *, void *, uint64_t))(v18 + 16))(v15, v16, v17);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v18 + 56))(v15, 0, 1, v17);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v21)
  {
    (*(void (**)(void *, uint64_t))(v18 + 8))(v15, v17);
LABEL_6:
    v22 = sub_10001B520(&qword_1000B93A0);
    memcpy(v15, v16, *(_QWORD *)(*(_QWORD *)(v22 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, void *, uint64_t))(v18 + 24))(v15, v16, v17);
LABEL_7:
  v23 = *(int *)(a3 + 36);
  v24 = (void *)(a1 + v23);
  v25 = (void *)(a2 + v23);
  v26 = type metadata accessor for Date(0);
  v27 = *(_QWORD *)(v26 - 8);
  v28 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v27 + 48);
  v29 = v28(v24, 1, v26);
  v30 = v28(v25, 1, v26);
  if (!v29)
  {
    if (!v30)
    {
      (*(void (**)(void *, void *, uint64_t))(v27 + 24))(v24, v25, v26);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v27 + 8))(v24, v26);
    goto LABEL_12;
  }
  if (v30)
  {
LABEL_12:
    v31 = sub_10001B520((uint64_t *)&unk_1000BC550);
    memcpy(v24, v25, *(_QWORD *)(*(_QWORD *)(v31 - 8) + 64));
    return a1;
  }
  (*(void (**)(void *, void *, uint64_t))(v27 + 16))(v24, v25, v26);
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v27 + 56))(v24, 0, 1, v26);
  return a1;
}

uint64_t sub_100032D48(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  void *v7;
  const void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  const void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  v6 = *(int *)(a3 + 32);
  v7 = (void *)(a1 + v6);
  v8 = (const void *)(a2 + v6);
  v9 = type metadata accessor for URL(0);
  v10 = *(_QWORD *)(v9 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9))
  {
    v11 = sub_10001B520(&qword_1000B93A0);
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v10 + 32))(v7, v8, v9);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
  }
  v12 = *(int *)(a3 + 36);
  v13 = (void *)(a1 + v12);
  v14 = (const void *)(a2 + v12);
  v15 = type metadata accessor for Date(0);
  v16 = *(_QWORD *)(v15 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v16 + 48))(v14, 1, v15))
  {
    v17 = sub_10001B520((uint64_t *)&unk_1000BC550);
    memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v16 + 32))(v13, v14, v15);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
  }
  return a1;
}

uint64_t sub_100032EA8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t (*v14)(void *, uint64_t, uint64_t);
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t (*v23)(void *, uint64_t, uint64_t);
  int v24;
  int v25;
  uint64_t v26;

  v6 = *(void **)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;

  v7 = *(void **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);

  v8 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRelease(v8);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  v9 = *(int *)(a3 + 32);
  v10 = (void *)(a1 + v9);
  v11 = (void *)(a2 + v9);
  v12 = type metadata accessor for URL(0);
  v13 = *(_QWORD *)(v12 - 8);
  v14 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v13 + 48);
  v15 = v14(v10, 1, v12);
  v16 = v14(v11, 1, v12);
  if (v15)
  {
    if (!v16)
    {
      (*(void (**)(void *, void *, uint64_t))(v13 + 32))(v10, v11, v12);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v10, 0, 1, v12);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v16)
  {
    (*(void (**)(void *, uint64_t))(v13 + 8))(v10, v12);
LABEL_6:
    v17 = sub_10001B520(&qword_1000B93A0);
    memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, void *, uint64_t))(v13 + 40))(v10, v11, v12);
LABEL_7:
  v18 = *(int *)(a3 + 36);
  v19 = (void *)(a1 + v18);
  v20 = (void *)(a2 + v18);
  v21 = type metadata accessor for Date(0);
  v22 = *(_QWORD *)(v21 - 8);
  v23 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v22 + 48);
  v24 = v23(v19, 1, v21);
  v25 = v23(v20, 1, v21);
  if (!v24)
  {
    if (!v25)
    {
      (*(void (**)(void *, void *, uint64_t))(v22 + 40))(v19, v20, v21);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v22 + 8))(v19, v21);
    goto LABEL_12;
  }
  if (v25)
  {
LABEL_12:
    v26 = sub_10001B520((uint64_t *)&unk_1000BC550);
    memcpy(v19, v20, *(_QWORD *)(*(_QWORD *)(v26 - 8) + 64));
    return a1;
  }
  (*(void (**)(void *, void *, uint64_t))(v22 + 32))(v19, v20, v21);
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v22 + 56))(v19, 0, 1, v21);
  return a1;
}

uint64_t sub_1000330B8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000330C4);
}

uint64_t sub_1000330C4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = sub_10001B520(&qword_1000B93A0);
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
    {
      v10 = v8;
      v11 = *(int *)(a3 + 32);
    }
    else
    {
      v10 = sub_10001B520((uint64_t *)&unk_1000BC550);
      v9 = *(_QWORD *)(v10 - 8);
      v11 = *(int *)(a3 + 36);
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(a1 + v11, a2, v10);
  }
}

uint64_t sub_10003316C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100033178);
}

uint64_t sub_100033178(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 8) = (a2 - 1);
  }
  else
  {
    v8 = sub_10001B520(&qword_1000B93A0);
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      v10 = v8;
      v11 = *(int *)(a4 + 32);
    }
    else
    {
      v10 = sub_10001B520((uint64_t *)&unk_1000BC550);
      v9 = *(_QWORD *)(v10 - 8);
      v11 = *(int *)(a4 + 36);
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(v5 + v11, a2, a2, v10);
  }
  return result;
}

uint64_t type metadata accessor for Section(uint64_t a1)
{
  uint64_t result;

  result = qword_1000BA398;
  if (!qword_1000BA398)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for Section);
  return result;
}

void sub_100033258(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v6[6];

  v6[0] = "\b";
  v6[1] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v6[2] = (char *)&value witness table for Builtin.BridgeObject + 64;
  v6[3] = &unk_10008B330;
  sub_10003332C(319, (unint64_t *)&qword_1000BBA90, (uint64_t (*)(uint64_t))&type metadata accessor for URL);
  if (v3 <= 0x3F)
  {
    v6[4] = *(_QWORD *)(v2 - 8) + 64;
    sub_10003332C(319, (unint64_t *)&unk_1000BA3B0, (uint64_t (*)(uint64_t))&type metadata accessor for Date);
    if (v5 <= 0x3F)
    {
      v6[5] = *(_QWORD *)(v4 - 8) + 64;
      swift_initStructMetadata(a1, 256, 6, v6, a1 + 16);
    }
  }
}

void sub_10003332C(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t))
{
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!*a2)
  {
    v5 = a3(255);
    v6 = type metadata accessor for Optional(a1, v5);
    if (!v7)
      atomic_store(v6, a2);
  }
}

uint64_t sub_100033378@<X0>(void *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X2>, uint64_t a4@<X3>, char a5@<W4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  id v14;
  _QWORD *v15;
  id v16;
  void *v17;
  id v18;
  uint64_t v19;
  _QWORD v21[6];

  v14 = objc_msgSend(a1, "items");
  v21[2] = a2;
  v21[3] = a3;
  v21[4] = a4;
  v15 = sub_100033610((void (*)(_OWORD *))sub_1000335F4, (uint64_t)v21);
  swift_bridgeObjectRelease(a4);

  v16 = objc_msgSend(a1, "backingTagID");
  if (v16)
  {
    v17 = v16;
    v18 = objc_msgSend((id)objc_opt_self(UIColor), "nu_safeColorForIdentifier:", v16);

  }
  else
  {
    v18 = 0;
  }
  v19 = type metadata accessor for Section(0);
  sub_1000338D4(a1, a3, a7 + *(int *)(v19 + 32));
  swift_release(a2);
  *(_QWORD *)a7 = v18;
  *(_QWORD *)(a7 + 8) = a1;
  *(_QWORD *)(a7 + 16) = v15;
  *(_BYTE *)(a7 + 24) = a5 & 1;
  sub_100033AD8(a6, a7 + *(int *)(v19 + 36));
  return sub_10001DA60(a3);
}

uint64_t sub_1000334C0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  uint64_t v9;
  void *v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char v16;
  uint64_t v17;
  id v18;
  void *v19;
  id v20;
  id v21;
  _QWORD v23[5];
  void *v24;

  sub_100033FBC(a1, (uint64_t)v23);
  v9 = sub_10001B520(&qword_1000BA270);
  swift_dynamicCast(&v24, v23, (char *)&type metadata for Any + 8, v9, 7);
  v10 = v24;
  sub_100030244(a3, (uint64_t)v23);
  swift_unknownObjectRetain(v10);
  swift_retain(a2);
  v11 = objc_msgSend(v10, "identifier");
  v12 = static String._unconditionallyBridgeFromObjectiveC(_:)(v11);
  v14 = v13;

  if (*(_QWORD *)(a4 + 16) && (v15 = sub_1000316D4(v12, v14), (v16 & 1) != 0))
  {
    v17 = *(_QWORD *)(a4 + 56) + 16 * v15;
    v18 = *(id *)v17;
    v19 = *(void **)(v17 + 8);
    v20 = *(id *)v17;
    v21 = v19;
  }
  else
  {
    v18 = 0;
    v19 = 0;
  }
  swift_bridgeObjectRelease(v14);
  sub_100078C34(v10, a2, v23, v18, v19, a5);
  return swift_unknownObjectRelease(v10);
}

uint64_t sub_1000335F4@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t *v2;

  return sub_1000334C0(a1, v2[2], v2[3], v2[4], a2);
}

_QWORD *sub_100033610(void (*a1)(_OWORD *), uint64_t a2)
{
  void *v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  id v16;
  unint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _OWORD v29[2];
  __int128 v30;
  uint64_t v31;
  void (*v32)(_OWORD *);

  v32 = a1;
  v5 = sub_10001B520(&qword_1000BA3F0);
  __chkstk_darwin(v5);
  v7 = (char *)&v23 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = type metadata accessor for Item(0);
  v8 = *(_QWORD *)(v28 - 8);
  v9 = __chkstk_darwin(v28);
  v27 = (uint64_t)&v23 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v26 = (uint64_t)&v23 - v11;
  v12 = type metadata accessor for NSFastEnumerationIterator(0);
  v13 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v15 = (char *)&v23 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = v2;
  NSOrderedSet.makeIterator()();

  v17 = sub_100033F20();
  dispatch thunk of IteratorProtocol.next()(&v30, v12, v17);
  v24 = v13;
  v18 = _swiftEmptyArrayStorage;
  if (v31)
  {
    v25 = a2;
    while (1)
    {
      sub_100033F68(&v30, v29);
      v32(v29);
      if (v3)
        break;
      sub_10001DA60(v29);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v7, 1, v28) == 1)
      {
        sub_10002CCF4((uint64_t)v7, &qword_1000BA3F0);
      }
      else
      {
        v19 = v26;
        sub_100033F78((uint64_t)v7, v26);
        sub_100033F78(v19, v27);
        if ((swift_isUniquelyReferenced_nonNull_native(v18) & 1) == 0)
          v18 = (_QWORD *)sub_10005DF98(0, v18[2] + 1, 1, (unint64_t)v18);
        v21 = v18[2];
        v20 = v18[3];
        if (v21 >= v20 >> 1)
          v18 = (_QWORD *)sub_10005DF98(v20 > 1, v21 + 1, 1, (unint64_t)v18);
        v18[2] = v21 + 1;
        sub_100033F78(v27, (uint64_t)v18+ ((*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80))+ *(_QWORD *)(v8 + 72) * v21);
      }
      dispatch thunk of IteratorProtocol.next()(&v30, v12, v17);
      if (!v31)
        goto LABEL_12;
    }
    sub_10001DA60(v29);
    (*(void (**)(char *, uint64_t))(v24 + 8))(v15, v12);
    swift_bridgeObjectRelease(v18);
  }
  else
  {
LABEL_12:
    (*(void (**)(char *, uint64_t))(v24 + 8))(v15, v12);
  }
  return v18;
}

uint64_t sub_1000338D4@<X0>(void *a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  id v16;
  void *v17;
  void (*v18)(char *, char *, uint64_t);
  void (*v19)(char *, uint64_t, uint64_t, uint64_t);
  void *v20;
  NSURL *v21;
  void *v22;
  void *v23;
  id v24;
  uint64_t v26;

  v6 = sub_10001B520(&qword_1000B93A0);
  __chkstk_darwin(v6);
  v8 = (char *)&v26 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for URL(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = __chkstk_darwin(v9);
  v13 = (char *)&v26 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v15 = (char *)&v26 - v14;
  v16 = objc_msgSend(a1, "nameActionURL");
  if (v16)
  {
    v17 = v16;
    static URL._unconditionallyBridgeFromObjectiveC(_:)(v16);

    v18 = *(void (**)(char *, char *, uint64_t))(v10 + 32);
    v18(v8, v13, v9);
    v19 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v10 + 56);
    v19(v8, 0, 1, v9);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) != 1)
    {
      v18(v15, v8, v9);
      v20 = (void *)objc_opt_self(FTHeaderEngagementDescriptor);
      URL._bridgeToObjectiveC()(v21);
      v23 = v22;
      v24 = objc_msgSend(v20, "engagementDescriptorWithTargetURL:", v22);

      sub_10001D9B4(a2, a2[3]);
      sub_10006C734(v24, a3);
      swift_unknownObjectRelease(v24);
      return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v15, v9);
    }
  }
  else
  {
    v19 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v10 + 56);
    v19(v8, 1, 1, v9);
  }
  sub_10002CCF4((uint64_t)v8, &qword_1000B93A0);
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))v19)(a3, 1, 1, v9);
}

uint64_t sub_100033AD8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10001B520((uint64_t *)&unk_1000BC550);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_100033B20()
{
  uint64_t v0;
  id *v1;
  void *v2;
  id v3;
  void *v4;
  uint64_t v5;
  void *v6;
  void *v7;
  Swift::String v8;
  UIColor v9;
  Class isa;
  id v11;
  void *v12;
  uint64_t v13;
  void *v14;
  void *v15;
  Swift::String v16;
  UIColor v17;
  Class v18;
  uint64_t v19;
  id v20;
  void *v21;
  objc_class *v22;
  objc_class *v23;
  id v24;
  uint64_t v25;
  _QWORD v27[5];
  uint64_t v28;

  v1 = (id *)v0;
  v2 = *(void **)(v0 + 8);
  v3 = objc_msgSend(v2, "nameColorLight");
  if (v3)
  {
    v4 = v3;
    v5 = static String._unconditionallyBridgeFromObjectiveC(_:)(v3);
    v7 = v6;

    sub_1000340C4();
    v8._countAndFlagsBits = v5;
    v8._object = v7;
    v9.super.isa = UIColor.init(hex:)(v8).super.isa;
  }
  else if (*(_QWORD *)v0)
  {
    v9.super.isa = (Class)*(id *)v0;
  }
  else
  {
    v9.super.isa = (Class)objc_msgSend((id)objc_opt_self(UIColor), "labelColor");
  }
  isa = v9.super.isa;
  v11 = objc_msgSend(v2, "nameColorDark");
  if (v11)
  {
    v12 = v11;
    v13 = static String._unconditionallyBridgeFromObjectiveC(_:)(v11);
    v15 = v14;

    sub_1000340C4();
    v16._countAndFlagsBits = v13;
    v16._object = v15;
    v17.super.isa = UIColor.init(hex:)(v16).super.isa;
  }
  else if (*v1)
  {
    v17.super.isa = (Class)*v1;
  }
  else
  {
    v17.super.isa = (Class)objc_msgSend((id)objc_opt_self(UIColor), "labelColor");
  }
  v18 = v17.super.isa;
  v19 = swift_allocObject(&unk_1000ABB28, 32, 7);
  *(_QWORD *)(v19 + 16) = isa;
  *(_QWORD *)(v19 + 24) = v18;
  v20 = objc_allocWithZone((Class)UIColor);
  v27[4] = sub_1000340A4;
  v28 = v19;
  v27[0] = _NSConcreteStackBlock;
  v27[1] = 1107296256;
  v27[2] = sub_10004F744;
  v27[3] = &unk_1000ABB40;
  v21 = _Block_copy(v27);
  v22 = isa;
  v23 = v18;
  v24 = objc_msgSend(v20, "initWithDynamicProvider:", v21);
  _Block_release(v21);
  swift_release(v28);
  v25 = Color.init(_:)(v24);

  return v25;
}

id sub_100033D14@<X0>(unint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v5;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  char *v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  char v23;
  id v24;
  id v25;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  id v30;

  v11 = type metadata accessor for Item(0);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = (void *)__chkstk_darwin(v11);
  v15 = (char *)&v27 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = *(_QWORD *)(v5 + 16);
  if (*(_QWORD *)(v16 + 16))
  {
    v30 = v13;
    v17 = swift_bridgeObjectRetain(v16);
    if ((swift_isUniquelyReferenced_nonNull_native(v17) & 1) != 0)
    {
      v18 = *(_QWORD *)(v16 + 16);
      if (v18)
        goto LABEL_4;
    }
    else
    {
      v16 = sub_10005E30C(v16);
      v18 = *(_QWORD *)(v16 + 16);
      if (v18)
      {
LABEL_4:
        v29 = a5;
        v28 = (*(unsigned __int8 *)(v12 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80);
        v27 = *(_QWORD *)(v12 + 72) * (v18 - 1);
        sub_100033FF8(v16 + v28 + v27);
        *(_QWORD *)(v16 + 16) = v18 - 1;
        *(_QWORD *)v15 = a1;
        *((_QWORD *)v15 + 1) = a2;
        v15[16] = a3 & 1;
        *((_QWORD *)v15 + 3) = a4;
        swift_storeEnumTagMultiPayload(v15, v30, 1);
        sub_100024770(a1, a2, a3 & 1);
        a1 = *(_QWORD *)(v16 + 24);
        swift_bridgeObjectRetain(a4);
        if (v18 <= a1 >> 1)
        {
LABEL_5:
          v19 = v28;
          v20 = v29;
          *(_QWORD *)(v16 + 16) = v18;
          sub_100033F78((uint64_t)v15, v16 + v19 + v27);
          v21 = *(void **)v5;
          v30 = *(id *)(v5 + 8);
          v22 = type metadata accessor for Section(0);
          sub_10002CCB0(v5 + *(int *)(v22 + 32), v20 + *(int *)(v22 + 32), &qword_1000B93A0);
          v23 = *(_BYTE *)(v5 + 24);
          sub_10002CCB0(v5 + *(int *)(v22 + 36), v20 + *(int *)(v22 + 36), (uint64_t *)&unk_1000BC550);
          v24 = v30;
          *(_QWORD *)v20 = v21;
          *(_QWORD *)(v20 + 8) = v24;
          *(_QWORD *)(v20 + 16) = v16;
          *(_BYTE *)(v20 + 24) = v23;
          v25 = v21;
          return v30;
        }
LABEL_9:
        v16 = sub_10005DF98(a1 > 1, v18, 1, v16);
        goto LABEL_5;
      }
    }
    __break(1u);
    goto LABEL_9;
  }
  return (id)sub_100034034(v5, a5);
}

unint64_t sub_100033F20()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000BB410;
  if (!qword_1000BB410)
  {
    v1 = type metadata accessor for NSFastEnumerationIterator(255);
    result = swift_getWitnessTable(&protocol conformance descriptor for NSFastEnumerationIterator, v1);
    atomic_store(result, (unint64_t *)&qword_1000BB410);
  }
  return result;
}

_OWORD *sub_100033F68(_OWORD *a1, _OWORD *a2)
{
  __int128 v2;

  v2 = a1[1];
  *a2 = *a1;
  a2[1] = v2;
  return a2;
}

uint64_t sub_100033F78(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for Item(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_100033FBC(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 24) = v3;
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t sub_100033FF8(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for Item(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_100034034(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for Section(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_100034078()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

id sub_1000340A4(void *a1)
{
  uint64_t v1;

  return sub_100067D8C(a1, *(void **)(v1 + 16), *(void **)(v1 + 24));
}

uint64_t sub_1000340AC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_1000340BC(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

unint64_t sub_1000340C4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000B9DB0;
  if (!qword_1000B9DB0)
  {
    v1 = objc_opt_self(UIColor);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_1000B9DB0);
  }
  return result;
}

id sub_100034100()
{
  id result;

  result = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for TodayIntent()), "init");
  qword_1000C0738 = (uint64_t)result;
  unk_1000C0740 = &off_1000ABB68;
  return result;
}

id sub_10003413C()
{
  id result;
  id v1;

  result = objc_msgSend(objc_allocWithZone((Class)NTPBTodayModuleContentRequest), "init");
  if (result)
  {
    v1 = result;
    objc_msgSend(result, "setModuleDescriptorType:", 0);
    return v1;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_10003418C()
{
  return 0;
}

uint64_t sub_100034198()
{
  uint64_t v0;
  id v1;

  if (qword_1000B8CE0 != -1)
    swift_once(&qword_1000B8CE0, sub_100034100);
  v0 = qword_1000C0738;
  v1 = (id)qword_1000C0738;
  return v0;
}

uint64_t sub_1000341F0@<X0>(uint64_t a1@<X8>)
{
  id v2;
  void *v3;
  uint64_t v4;
  uint64_t (*v5)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v6;
  uint64_t v7;

  v2 = objc_msgSend((id)objc_opt_self(NSURL), "nss_NewsURLForForYou");
  if (v2)
  {
    v3 = v2;
    static URL._unconditionallyBridgeFromObjectiveC(_:)();

    v4 = type metadata accessor for URL(0);
    v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56);
    v6 = a1;
    v7 = 0;
  }
  else
  {
    v4 = type metadata accessor for URL(0);
    v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56);
    v6 = a1;
    v7 = 1;
  }
  return v5(v6, v7, 1, v4);
}

id sub_10003427C()
{
  void *v0;
  id result;
  void *v2;
  id v3;
  void *v4;
  id v5;
  void *v6;
  NSString v7;
  uint64_t v8;
  uint64_t v9;
  id v10;
  id v11;

  result = objc_msgSend(objc_allocWithZone((Class)NTPBTodayModuleContentRequest), "init");
  if (result)
  {
    v2 = result;
    objc_msgSend(result, "setModuleDescriptorType:", 1);
    v3 = objc_msgSend(v0, "tag");
    if (v3)
    {
      v4 = v3;
      v5 = objc_msgSend(v3, "identifier");
      if (v5)
      {
        v6 = v5;
        objc_msgSend(v2, "setTagID:", v5);

        v7 = objc_msgSend(v4, "displayString");
        if (!v7)
        {
          static String._unconditionallyBridgeFromObjectiveC(_:)(0);
          v9 = v8;
          v7 = String._bridgeToObjectiveC()();
          swift_bridgeObjectRelease(v9);
        }
        objc_msgSend(v2, "setName:", v7);

        v10 = objc_msgSend(v4, "nameColorLight");
        objc_msgSend(v2, "setNameColorLight:", v10);

        v11 = objc_msgSend(v4, "nameColorDark");
        objc_msgSend(v2, "setNameColorDark:", v11);

        v4 = v11;
      }

    }
    return v2;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1000343E8@<X0>(uint64_t a1@<X8>)
{
  void *v1;
  id v3;
  void *v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  NSString v9;
  id v10;
  uint64_t v11;
  uint64_t (*v12)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;

  v3 = objc_msgSend(v1, "tag");
  if (v3 && (v4 = v3, v5 = objc_msgSend(v3, "identifier"), v4, v5))
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)(v5);
    v7 = v6;

    v8 = (void *)objc_opt_self(NSURL);
    v9 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v7);
    v10 = objc_msgSend(v8, "nss_NewsURLForTagID:", v9);

    static URL._unconditionallyBridgeFromObjectiveC(_:)(v10);
    v11 = type metadata accessor for URL(0);
    v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 56);
    v13 = a1;
    v14 = 0;
  }
  else
  {
    v11 = type metadata accessor for URL(0);
    v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 56);
    v13 = a1;
    v14 = 1;
  }
  return v12(v13, v14, 1, v11);
}

uint64_t sub_100034500()
{
  void *v0;
  uint64_t v1;
  id v2;
  void *v3;
  id v4;

  v1 = 1701736302;
  v2 = objc_msgSend(v0, "tag");
  if (v2)
  {
    v3 = v2;
    v4 = objc_msgSend(v2, "identifier");

    if (v4)
    {
      v1 = static String._unconditionallyBridgeFromObjectiveC(_:)(v4);

    }
  }
  return v1;
}

id sub_10003458C()
{
  void *v0;
  id v1;
  id v2;
  id v3;

  if (qword_1000B8CE8 != -1)
    swift_once(&qword_1000B8CE8, sub_100034638);
  v0 = (void *)qword_1000C0748;
  v1 = objc_allocWithZone((Class)type metadata accessor for TagIntent());
  v2 = v0;
  v3 = objc_msgSend(v1, "init");
  objc_msgSend(v3, "setTag:", v2);

  return v3;
}

void sub_100034638()
{
  uint64_t v0;
  uint64_t v1;
  id v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  NSString v8;
  NSString v9;
  id v10;

  v0 = aPlaceholder_0[1];
  v1 = swift_bridgeObjectRetain(aPlaceholder_0[1]);
  v2 = (id)NSSNewsTagWidgetPlaceholderName(v1);
  if (v2)
  {
    v3 = v2;
    v4 = type metadata accessor for Tag();
    static String._unconditionallyBridgeFromObjectiveC(_:)(v3);
    v6 = v5;

    v7 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata(v4));
    v8 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v0);
    v9 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v6);
    v10 = objc_msgSend(v7, "initWithIdentifier:displayString:", v8, v9);

    qword_1000C0748 = (uint64_t)v10;
  }
  else
  {
    __break(1u);
  }
}

uint64_t _s7NewsTag0B6IntentC14equalInContent3lhs3rhsSbAC_ACtFZ_0(void *a1, void *a2)
{
  id v3;
  void *v4;
  id v5;
  uint64_t v6;
  void *v7;
  id v8;
  void *v9;
  id v10;
  uint64_t v11;
  void *v12;
  char v13;

  v3 = objc_msgSend(a1, "tag");
  v4 = v3;
  if (v3)
  {
    v5 = objc_msgSend(v3, "identifier");

    if (v5)
    {
      v6 = static String._unconditionallyBridgeFromObjectiveC(_:)(v5);
      v4 = v7;

    }
    else
    {
      v6 = 0;
      v4 = 0;
    }
  }
  else
  {
    v6 = 0;
  }
  v8 = objc_msgSend(a2, "tag");
  v9 = v8;
  if (v8)
  {
    v10 = objc_msgSend(v8, "identifier");

    if (v10)
    {
      v11 = static String._unconditionallyBridgeFromObjectiveC(_:)(v10);
      v9 = v12;

      if (!v4)
        goto LABEL_16;
LABEL_11:
      if (v9)
      {
        if (v6 == v11 && v4 == v9)
        {
          swift_bridgeObjectRelease(v4);
          v13 = 1;
        }
        else
        {
          v13 = _stringCompareWithSmolCheck(_:_:expecting:)(v6, v4, v11, v9, 0);
          swift_bridgeObjectRelease(v4);
        }
      }
      else
      {
        v13 = 0;
        v9 = v4;
      }
      goto LABEL_20;
    }
    v11 = 0;
    v9 = 0;
    if (v4)
      goto LABEL_11;
  }
  else
  {
    v11 = 0;
    if (v4)
      goto LABEL_11;
  }
LABEL_16:
  if (!v9)
  {
    v13 = 1;
    return v13 & 1;
  }
  v13 = 0;
LABEL_20:
  swift_bridgeObjectRelease(v9);
  return v13 & 1;
}

_QWORD *sub_10003488C(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v9 = *a2;
    *a1 = *a2;
    a1 = (_QWORD *)(v9 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v9);
  }
  else
  {
    v7 = type metadata accessor for Date(0);
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = *(int *)(a3 + 24);
    *((_BYTE *)a1 + *(int *)(a3 + 20)) = *((_BYTE *)a2 + *(int *)(a3 + 20));
    *((_BYTE *)a1 + v8) = *((_BYTE *)a2 + v8);
  }
  return a1;
}

uint64_t sub_100034920(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;

  v6 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = *(int *)(a3 + 24);
  *(_BYTE *)(a1 + *(int *)(a3 + 20)) = *(_BYTE *)(a2 + *(int *)(a3 + 20));
  *(_BYTE *)(a1 + v7) = *(_BYTE *)(a2 + v7);
  return a1;
}

uint64_t sub_100034984(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  *(_BYTE *)(a1 + *(int *)(a3 + 20)) = *(_BYTE *)(a2 + *(int *)(a3 + 20));
  *(_BYTE *)(a1 + *(int *)(a3 + 24)) = *(_BYTE *)(a2 + *(int *)(a3 + 24));
  return a1;
}

uint64_t sub_1000349EC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;

  v6 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = *(int *)(a3 + 24);
  *(_BYTE *)(a1 + *(int *)(a3 + 20)) = *(_BYTE *)(a2 + *(int *)(a3 + 20));
  *(_BYTE *)(a1 + v7) = *(_BYTE *)(a2 + v7);
  return a1;
}

uint64_t sub_100034A50(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;

  v6 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = *(int *)(a3 + 24);
  *(_BYTE *)(a1 + *(int *)(a3 + 20)) = *(_BYTE *)(a2 + *(int *)(a3 + 20));
  *(_BYTE *)(a1 + v7) = *(_BYTE *)(a2 + v7);
  return a1;
}

uint64_t sub_100034AB4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100034AC0);
}

uint64_t sub_100034AC0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unsigned int v9;

  v6 = type metadata accessor for Date(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(unsigned __int8 *)(a1 + *(int *)(a3 + 20));
  if (v9 >= 4)
    return v9 - 3;
  else
    return 0;
}

uint64_t sub_100034B38(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100034B44);
}

uint64_t sub_100034B44(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = type metadata accessor for Date(0);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_BYTE *)(a1 + *(int *)(a4 + 20)) = a2 + 3;
  return result;
}

uint64_t type metadata accessor for AppearanceEvent(uint64_t a1)
{
  return sub_10002ABF8(a1, qword_1000BA460, (uint64_t)&nominal type descriptor for AppearanceEvent);
}

uint64_t sub_100034BD0(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[3];

  result = type metadata accessor for Date(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(result - 8) + 64;
    v4[1] = &unk_10008B3F8;
    v4[2] = &unk_10008B410;
    swift_initStructMetadata(a1, 256, 3, v4, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t *sub_100034C4C(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  _OWORD *v9;
  _OWORD *v10;
  __int128 v11;
  uint64_t v12;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v12 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v12 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v12);
  }
  else
  {
    v7 = type metadata accessor for Date(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = *(int *)(a3 + 20);
    v9 = (_OWORD *)((char *)a1 + v8);
    v10 = (_OWORD *)((char *)a2 + v8);
    v11 = v10[1];
    *v9 = *v10;
    v9[1] = v11;
  }
  return a1;
}

uint64_t sub_100034CDC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  _OWORD *v8;
  _OWORD *v9;
  __int128 v10;

  v6 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = (_OWORD *)(a1 + v7);
  v9 = (_OWORD *)(a2 + v7);
  v10 = v9[1];
  *v8 = *v9;
  v8[1] = v10;
  return a1;
}

uint64_t sub_100034D40(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;

  v6 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = (_QWORD *)(a1 + v7);
  v9 = (_QWORD *)(a2 + v7);
  *v8 = *v9;
  v8[1] = v9[1];
  v8[2] = v9[2];
  v8[3] = v9[3];
  return a1;
}

uint64_t sub_100034DBC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  _OWORD *v8;
  _OWORD *v9;
  __int128 v10;

  v6 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = (_OWORD *)(a1 + v7);
  v9 = (_OWORD *)(a2 + v7);
  v10 = v9[1];
  *v8 = *v9;
  v8[1] = v10;
  return a1;
}

uint64_t sub_100034E20(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  _OWORD *v8;
  _OWORD *v9;
  __int128 v10;

  v6 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = (_OWORD *)(a1 + v7);
  v9 = (_OWORD *)(a2 + v7);
  v10 = v9[1];
  *v8 = *v9;
  v8[1] = v10;
  return a1;
}

uint64_t sub_100034E84(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100034E90);
}

uint64_t sub_100034E94(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100034EA0);
}

uint64_t type metadata accessor for VisibleRectChangedEvent(uint64_t a1)
{
  return sub_10002ABF8(a1, qword_1000BA4F8, (uint64_t)&nominal type descriptor for VisibleRectChangedEvent);
}

uint64_t sub_100034EB8(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[2];

  result = type metadata accessor for Date(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(result - 8) + 64;
    v4[1] = " ";
    swift_initStructMetadata(a1, 256, 2, v4, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t *sub_100034F28(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v14 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v14 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v14);
  }
  else
  {
    v7 = type metadata accessor for Date(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = *(int *)(a3 + 20);
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = type metadata accessor for URL(0);
    v12 = *(_QWORD *)(v11 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11))
    {
      v13 = sub_10001B520(&qword_1000B93A0);
      memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v9, v10, v11);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
    }
  }
  return a1;
}

uint64_t sub_100035030(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;

  v4 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  v5 = a1 + *(int *)(a2 + 20);
  v6 = type metadata accessor for URL(0);
  v7 = *(_QWORD *)(v6 - 8);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6);
  if (!(_DWORD)result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(v7 + 8))(v5, v6);
  return result;
}

uint64_t sub_1000350C0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  void *v8;
  const void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v6 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = (void *)(a1 + v7);
  v9 = (const void *)(a2 + v7);
  v10 = type metadata accessor for URL(0);
  v11 = *(_QWORD *)(v10 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10))
  {
    v12 = sub_10001B520(&qword_1000B93A0);
    memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v11 + 16))(v8, v9, v10);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
  }
  return a1;
}

uint64_t sub_10003519C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(void *, uint64_t, uint64_t);
  int v13;
  int v14;
  uint64_t v15;

  v6 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = (void *)(a1 + v7);
  v9 = (void *)(a2 + v7);
  v10 = type metadata accessor for URL(0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v11 + 48);
  v13 = v12(v8, 1, v10);
  v14 = v12(v9, 1, v10);
  if (!v13)
  {
    if (!v14)
    {
      (*(void (**)(void *, void *, uint64_t))(v11 + 24))(v8, v9, v10);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v11 + 8))(v8, v10);
    goto LABEL_6;
  }
  if (v14)
  {
LABEL_6:
    v15 = sub_10001B520(&qword_1000B93A0);
    memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
    return a1;
  }
  (*(void (**)(void *, void *, uint64_t))(v11 + 16))(v8, v9, v10);
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
  return a1;
}

uint64_t sub_1000352C4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  void *v8;
  const void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v6 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = (void *)(a1 + v7);
  v9 = (const void *)(a2 + v7);
  v10 = type metadata accessor for URL(0);
  v11 = *(_QWORD *)(v10 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10))
  {
    v12 = sub_10001B520(&qword_1000B93A0);
    memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v11 + 32))(v8, v9, v10);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
  }
  return a1;
}

uint64_t sub_1000353A0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(void *, uint64_t, uint64_t);
  int v13;
  int v14;
  uint64_t v15;

  v6 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = (void *)(a1 + v7);
  v9 = (void *)(a2 + v7);
  v10 = type metadata accessor for URL(0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v11 + 48);
  v13 = v12(v8, 1, v10);
  v14 = v12(v9, 1, v10);
  if (!v13)
  {
    if (!v14)
    {
      (*(void (**)(void *, void *, uint64_t))(v11 + 40))(v8, v9, v10);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v11 + 8))(v8, v10);
    goto LABEL_6;
  }
  if (v14)
  {
LABEL_6:
    v15 = sub_10001B520(&qword_1000B93A0);
    memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
    return a1;
  }
  (*(void (**)(void *, void *, uint64_t))(v11 + 32))(v8, v9, v10);
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
  return a1;
}

uint64_t sub_1000354C8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000354D4);
}

uint64_t sub_1000354D4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;

  v6 = type metadata accessor for Date(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
  }
  else
  {
    v8 = sub_10001B520(&qword_1000B93A0);
    v10 = a1 + *(int *)(a3 + 20);
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48);
  }
  return v9(v10, a2, v8);
}

uint64_t sub_10003554C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100035558);
}

uint64_t sub_100035558(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;

  v8 = type metadata accessor for Date(0);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    v10 = sub_10001B520(&qword_1000B93A0);
    v12 = a1 + *(int *)(a4 + 20);
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56);
  }
  return v11(v12, a2, a2, v10);
}

uint64_t type metadata accessor for EngagementEvent(uint64_t a1)
{
  return sub_10002ABF8(a1, qword_1000BA588, (uint64_t)&nominal type descriptor for EngagementEvent);
}

void sub_1000355EC(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v6[2];

  v2 = type metadata accessor for Date(319);
  if (v3 <= 0x3F)
  {
    v6[0] = *(_QWORD *)(v2 - 8) + 64;
    sub_100035670(319);
    if (v5 <= 0x3F)
    {
      v6[1] = *(_QWORD *)(v4 - 8) + 64;
      swift_initStructMetadata(a1, 256, 2, v6, a1 + 16);
    }
  }
}

void sub_100035670(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_1000BBA90)
  {
    v2 = type metadata accessor for URL(255);
    v3 = type metadata accessor for Optional(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_1000BBA90);
  }
}

uint64_t sub_1000356C4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for Date(0);
  return (**(uint64_t (***)(uint64_t, uint64_t, uint64_t))(v4 - 8))(a1, a2, v4);
}

uint64_t sub_100035700(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for Date(0);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
}

uint64_t sub_100035734(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, a2, v4);
  return a1;
}

uint64_t sub_100035778(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 24))(a1, a2, v4);
  return a1;
}

uint64_t sub_1000357BC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a1, a2, v4);
  return a1;
}

uint64_t sub_100035800(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a1, a2, v4);
  return a1;
}

uint64_t sub_100035844(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100035850);
}

uint64_t sub_100035854(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for Date(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(a1, a2, v4);
}

uint64_t sub_100035890(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10003589C);
}

uint64_t sub_1000358A0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for Date(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(a1, a2, a2, v4);
}

uint64_t type metadata accessor for DisappearanceEvent(uint64_t a1)
{
  return sub_10002ABF8(a1, qword_1000BA618, (uint64_t)&nominal type descriptor for DisappearanceEvent);
}

uint64_t sub_1000358F4(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  uint64_t v4;

  result = type metadata accessor for Date(319);
  if (v3 <= 0x3F)
  {
    v4 = *(_QWORD *)(result - 8) + 64;
    swift_initStructMetadata(a1, 256, 1, &v4, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t getEnumTagSinglePayload for StackLocation(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFB)
    goto LABEL_17;
  if (a2 + 5 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 5) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 5;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 5;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 5;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 6;
  v8 = v6 - 6;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for StackLocation(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 5 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 5) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFB)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFA)
    return ((uint64_t (*)(void))((char *)&loc_100035A44 + 4 * byte_10008B3C5[v4]))();
  *a1 = a2 + 5;
  return ((uint64_t (*)(void))((char *)sub_100035A78 + 4 * asc_10008B3C0[v4]))();
}

uint64_t sub_100035A78(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100035A80(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100035A88);
  return result;
}

uint64_t sub_100035A94(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100035A9CLL);
  *(_BYTE *)result = a2 + 5;
  return result;
}

uint64_t sub_100035AA0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100035AA8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for StackLocation()
{
  return &type metadata for StackLocation;
}

uint64_t getEnumTagSinglePayload for StackKind(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFD)
    goto LABEL_17;
  if (a2 + 3 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 3) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 3;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 3;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 3;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 4;
  v8 = v6 - 4;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for StackKind(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_100035BA0 + 4 * byte_10008B3CF[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_100035BD4 + 4 * byte_10008B3CA[v4]))();
}

uint64_t sub_100035BD4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100035BDC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100035BE4);
  return result;
}

uint64_t sub_100035BF0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100035BF8);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_100035BFC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100035C04(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for StackKind()
{
  return &type metadata for StackKind;
}

unint64_t sub_100035C24()
{
  unint64_t result;

  result = qword_1000BA650;
  if (!qword_1000BA650)
  {
    result = swift_getWitnessTable(&unk_10008B51C, &type metadata for StackKind);
    atomic_store(result, (unint64_t *)&qword_1000BA650);
  }
  return result;
}

unint64_t sub_100035C6C()
{
  unint64_t result;

  result = qword_1000BA658;
  if (!qword_1000BA658)
  {
    result = swift_getWitnessTable(&unk_10008B584, &type metadata for StackLocation);
    atomic_store(result, (unint64_t *)&qword_1000BA658);
  }
  return result;
}

unint64_t sub_100035CC0(unint64_t a1, uint64_t a2, int *a3)
{
  int v5;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  char v22;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v15 = *(_QWORD *)a2;
    *(_QWORD *)a1 = *(_QWORD *)a2;
    a1 = v15 + ((v5 + 16) & ~(unint64_t)v5);
    swift_retain(v15);
  }
  else
  {
    v7 = *(_QWORD *)a2;
    v8 = *(_BYTE *)(a2 + 8);
    sub_100024758(*(_QWORD *)a2, v8);
    *(_QWORD *)a1 = v7;
    *(_BYTE *)(a1 + 8) = v8;
    v9 = a3[5];
    v10 = (uint64_t *)(a1 + v9);
    v11 = (uint64_t *)(a2 + v9);
    v12 = sub_10001B520(&qword_1000B9A20);
    if (swift_getEnumCaseMultiPayload(v11, v12) == 1)
    {
      v13 = type metadata accessor for WidgetRenderingMode(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v13 - 8) + 16))(v10, v11, v13);
      v14 = 1;
    }
    else
    {
      v16 = *v11;
      *v10 = *v11;
      swift_retain(v16);
      v14 = 0;
    }
    swift_storeEnumTagMultiPayload(v10, v12, v14);
    v17 = a3[6];
    v18 = a1 + v17;
    v19 = a2 + v17;
    v20 = *(void **)v19;
    v21 = *(_QWORD *)(v19 + 8);
    v22 = *(_BYTE *)(v19 + 16);
    sub_10002CBBC(*(void **)v19, v21, v22);
    *(_QWORD *)v18 = v20;
    *(_QWORD *)(v18 + 8) = v21;
    *(_BYTE *)(v18 + 16) = v22;
    *(_OWORD *)(a1 + a3[7]) = *(_OWORD *)(a2 + a3[7]);
  }
  return a1;
}

void sub_100035DF4(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;

  sub_10002C790(*(_QWORD *)a1, *(_BYTE *)(a1 + 8));
  v4 = (_QWORD *)(a1 + *(int *)(a2 + 20));
  v5 = sub_10001B520(&qword_1000B9A20);
  if (swift_getEnumCaseMultiPayload(v4, v5) == 1)
  {
    v6 = type metadata accessor for WidgetRenderingMode(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v4, v6);
  }
  else
  {
    swift_release(*v4);
  }
  sub_10002CC68(*(void **)(a1 + *(int *)(a2 + 24)), *(_QWORD *)(a1 + *(int *)(a2 + 24) + 8), *(_BYTE *)(a1 + *(int *)(a2 + 24) + 16));
}

uint64_t sub_100035E88(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  char v20;

  v6 = *(_QWORD *)a2;
  v7 = *(_BYTE *)(a2 + 8);
  sub_100024758(*(_QWORD *)a2, v7);
  *(_QWORD *)a1 = v6;
  *(_BYTE *)(a1 + 8) = v7;
  v8 = a3[5];
  v9 = (uint64_t *)(a1 + v8);
  v10 = (uint64_t *)(a2 + v8);
  v11 = sub_10001B520(&qword_1000B9A20);
  if (swift_getEnumCaseMultiPayload(v10, v11) == 1)
  {
    v12 = type metadata accessor for WidgetRenderingMode(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v12 - 8) + 16))(v9, v10, v12);
    v13 = 1;
  }
  else
  {
    v14 = *v10;
    *v9 = *v10;
    swift_retain(v14);
    v13 = 0;
  }
  swift_storeEnumTagMultiPayload(v9, v11, v13);
  v15 = a3[6];
  v16 = a1 + v15;
  v17 = a2 + v15;
  v18 = *(void **)v17;
  v19 = *(_QWORD *)(v17 + 8);
  v20 = *(_BYTE *)(v17 + 16);
  sub_10002CBBC(*(void **)v17, v19, v20);
  *(_QWORD *)v16 = v18;
  *(_QWORD *)(v16 + 8) = v19;
  *(_BYTE *)(v16 + 16) = v20;
  *(_OWORD *)(a1 + a3[7]) = *(_OWORD *)(a2 + a3[7]);
  return a1;
}

uint64_t sub_100035F90(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  char v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  char v22;
  void *v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  _QWORD *v27;
  _QWORD *v28;

  v6 = *(_QWORD *)a2;
  v7 = *(_BYTE *)(a2 + 8);
  sub_100024758(*(_QWORD *)a2, v7);
  v8 = *(_QWORD *)a1;
  v9 = *(_BYTE *)(a1 + 8);
  *(_QWORD *)a1 = v6;
  *(_BYTE *)(a1 + 8) = v7;
  sub_10002C790(v8, v9);
  if (a1 != a2)
  {
    v10 = a3[5];
    v11 = (uint64_t *)(a1 + v10);
    v12 = (uint64_t *)(a2 + v10);
    sub_1000360D0(a1 + v10);
    v13 = sub_10001B520(&qword_1000B9A20);
    if (swift_getEnumCaseMultiPayload(v12, v13) == 1)
    {
      v14 = type metadata accessor for WidgetRenderingMode(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v14 - 8) + 16))(v11, v12, v14);
      v15 = 1;
    }
    else
    {
      v16 = *v12;
      *v11 = *v12;
      swift_retain(v16);
      v15 = 0;
    }
    swift_storeEnumTagMultiPayload(v11, v13, v15);
  }
  v17 = a3[6];
  v18 = a1 + v17;
  v19 = a2 + v17;
  v20 = *(void **)v19;
  v21 = *(_QWORD *)(v19 + 8);
  v22 = *(_BYTE *)(v19 + 16);
  sub_10002CBBC(*(void **)v19, v21, v22);
  v23 = *(void **)v18;
  v24 = *(_QWORD *)(v18 + 8);
  v25 = *(_BYTE *)(v18 + 16);
  *(_QWORD *)v18 = v20;
  *(_QWORD *)(v18 + 8) = v21;
  *(_BYTE *)(v18 + 16) = v22;
  sub_10002CC68(v23, v24, v25);
  v26 = a3[7];
  v27 = (_QWORD *)(a1 + v26);
  v28 = (_QWORD *)(a2 + v26);
  *v27 = *v28;
  v27[1] = v28[1];
  return a1;
}

uint64_t sub_1000360D0(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_10001B520(&qword_1000B9A20);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_100036110(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void *v7;
  const void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  v6 = a3[5];
  v7 = (void *)(a1 + v6);
  v8 = (const void *)(a2 + v6);
  v9 = sub_10001B520(&qword_1000B9A20);
  if (swift_getEnumCaseMultiPayload(v8, v9) == 1)
  {
    v10 = type metadata accessor for WidgetRenderingMode(0);
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v7, v8, v10);
    swift_storeEnumTagMultiPayload(v7, v9, 1);
  }
  else
  {
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
  }
  v11 = a3[6];
  v12 = a3[7];
  v13 = a1 + v11;
  v14 = a2 + v11;
  *(_OWORD *)v13 = *(_OWORD *)v14;
  *(_BYTE *)(v13 + 16) = *(_BYTE *)(v14 + 16);
  *(_OWORD *)(a1 + v12) = *(_OWORD *)(a2 + v12);
  return a1;
}

uint64_t sub_1000361F4(uint64_t a1, uint64_t *a2, int *a3)
{
  uint64_t v6;
  char v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  void *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  void *v19;
  uint64_t v20;
  char v21;

  v6 = *a2;
  v7 = *((_BYTE *)a2 + 8);
  v8 = *(_QWORD *)a1;
  v9 = *(_BYTE *)(a1 + 8);
  *(_QWORD *)a1 = v6;
  *(_BYTE *)(a1 + 8) = v7;
  sub_10002C790(v8, v9);
  if ((uint64_t *)a1 != a2)
  {
    v10 = a3[5];
    v11 = (void *)(a1 + v10);
    v12 = (char *)a2 + v10;
    sub_1000360D0(a1 + v10);
    v13 = sub_10001B520(&qword_1000B9A20);
    if (swift_getEnumCaseMultiPayload(v12, v13) == 1)
    {
      v14 = type metadata accessor for WidgetRenderingMode(0);
      (*(void (**)(void *, char *, uint64_t))(*(_QWORD *)(v14 - 8) + 32))(v11, v12, v14);
      swift_storeEnumTagMultiPayload(v11, v13, 1);
    }
    else
    {
      memcpy(v11, v12, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
    }
  }
  v15 = a3[6];
  v16 = a1 + v15;
  v17 = (uint64_t)a2 + v15;
  v18 = *(_BYTE *)(v17 + 16);
  v19 = *(void **)v16;
  v20 = *(_QWORD *)(v16 + 8);
  v21 = *(_BYTE *)(v16 + 16);
  *(_OWORD *)v16 = *(_OWORD *)v17;
  *(_BYTE *)(v16 + 16) = v18;
  sub_10002CC68(v19, v20, v21);
  *(_OWORD *)(a1 + a3[7]) = *(_OWORD *)((char *)a2 + a3[7]);
  return a1;
}

uint64_t sub_100036304(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100036310);
}

uint64_t sub_100036310(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned int v4;
  uint64_t v8;

  if ((_DWORD)a2 == 254)
  {
    v4 = *(unsigned __int8 *)(a1 + 8);
    if (v4 > 1)
      return (v4 ^ 0xFF) + 1;
    else
      return 0;
  }
  else
  {
    v8 = sub_10001B520(&qword_1000B9A28);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 20), a2, v8);
  }
}

uint64_t sub_100036388(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100036394);
}

uint64_t sub_100036394(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 254)
  {
    *(_BYTE *)(result + 8) = -(char)a2;
  }
  else
  {
    v7 = sub_10001B520(&qword_1000B9A28);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 20), a2, a2, v7);
  }
  return result;
}

uint64_t type metadata accessor for SourceView(uint64_t a1)
{
  uint64_t result;

  result = qword_1000BA6B8;
  if (!qword_1000BA6B8)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for SourceView);
  return result;
}

void sub_100036444(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[4];

  v4[0] = "\t";
  sub_100025DEC(319);
  if (v3 <= 0x3F)
  {
    v4[1] = *(_QWORD *)(v2 - 8) + 64;
    v4[2] = &unk_10008B5D8;
    v4[3] = &unk_10008B5F0;
    swift_initStructMetadata(a1, 256, 4, v4, a1 + 16);
  }
}

uint64_t sub_1000364CC(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_10009C6EC, 1);
}

uint64_t sub_1000364DC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char v12;
  char v13;
  char v14;
  uint64_t v15;
  char v16;
  void (*v17)(char *, uint64_t);
  uint64_t v19;

  v1 = type metadata accessor for WidgetRenderingMode(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = __chkstk_darwin(v1);
  v5 = (char *)&v19 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  v7 = (char *)&v19 - v6;
  v8 = type metadata accessor for SourceView(0);
  __chkstk_darwin(v8);
  v10 = (char *)&v19 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = *(_QWORD *)v0;
  v12 = *(_BYTE *)(v0 + 8);
  sub_100024758(*(_QWORD *)v0, v12);
  v13 = sub_10002A004(v11, v12);
  sub_10002C790(v11, v12);
  sub_1000369E4(v0, (uint64_t)v10);
  if ((v13 & 1) != 0)
  {
    sub_100036A28((uint64_t)v10);
    v14 = 0;
  }
  else
  {
    v15 = sub_10002A1BC(v7);
    static WidgetRenderingMode.accented.getter(v15);
    v16 = static WidgetRenderingMode.== infix(_:_:)(v7, v5);
    v17 = *(void (**)(char *, uint64_t))(v2 + 8);
    v17(v5, v1);
    v17(v7, v1);
    sub_100036A28((uint64_t)v10);
    v14 = v16 ^ 1;
  }
  return v14 & 1;
}

void sub_100036648(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  __n128 v14;
  uint64_t v15;
  double v16;
  double v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  uint64_t v32;
  id v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  char v39;
  char v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t KeyPath;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  void *v55;
  uint64_t v56;
  __int16 v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char v61;
  __int128 v62;
  uint64_t v63;
  char v64;
  uint64_t v65;
  char v66;
  __int128 v67;

  v2 = v1;
  v4 = type metadata accessor for Image.ResizingMode(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v53 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for SourceView(0);
  v9 = v2 + *(int *)(v8 + 24);
  v11 = *(void **)v9;
  v10 = *(uint64_t *)(v9 + 8);
  if ((*(_BYTE *)(v9 + 16) & 1) != 0)
  {
    v12 = Image.init(uiImage:)(v11);
    (*(void (**)(char *, _QWORD, uint64_t))(v5 + 104))(v7, enum case for Image.ResizingMode.stretch(_:), v4);
    v13 = Image.resizable(capInsets:resizingMode:)(v7, v12, 0.0, 0.0, 0.0, 0.0);
    v14 = swift_release(v12);
    (*(void (**)(char *, uint64_t, __n128))(v5 + 8))(v7, v4, v14);
    v15 = sub_1000364DC();
    v16 = *(double *)(v2 + *(int *)(v8 + 28)) * *(double *)&v10;
    if ((v15 & 1) != 0)
      v16 = v16 * 1.2;
    v17 = v16;
    v18 = static Alignment.center.getter(v15);
    _FrameLayout.init(width:height:alignment:)(&v63, 0, 1, *(_QWORD *)&v17, 0, v18, v19);
    v55 = (void *)v13;
    v56 = 0;
    v57 = 1;
    v58 = v63;
    LOBYTE(v59) = v64;
    v60 = v65;
    v61 = v66;
    v62 = v67;
    v20 = sub_10001B520(&qword_1000B9B98);
    v21 = sub_10002A96C();
    v22 = AnyView.init<A>(_:)(&v55, v20, v21);
    sub_10002CC68(v11, v10, 1);
  }
  else
  {
    v55 = *(void **)v9;
    v56 = v10;
    v23 = sub_10002ACB8();
    v24 = StringProtocol.localizedUppercase.getter(&type metadata for String, v23);
    v54 = v25;
    v55 = (void *)v24;
    v56 = v25;
    swift_bridgeObjectRetain(v25);
    v26 = Text.init<A>(_:)(&v55, &type metadata for String, v23);
    v28 = v27;
    v30 = v29;
    v32 = v31 & 1;
    v33 = objc_msgSend((id)objc_opt_self(UIFont), "systemFontOfSize:weight:", *(double *)(v2 + *(int *)(v8 + 28) + 8), UIFontWeightBlack);
    v34 = Font.init(_:)(v33);
    v35 = Text.font(_:)(v34, v26, v28, v32, v30);
    v37 = v36;
    v38 = a1;
    v40 = v39;
    v42 = v41;
    swift_release(v34);
    v43 = v40 & 1;
    a1 = v38;
    sub_1000249D8(v26, v28, v32);
    swift_bridgeObjectRelease(v30);
    v44 = Text.tracking(_:)(v35, v37, v43, v42, -0.3);
    v46 = v45;
    LOBYTE(v28) = v47;
    v49 = v48;
    sub_1000249D8(v35, v37, v43);
    swift_bridgeObjectRelease(v42);
    KeyPath = swift_getKeyPath(&unk_10008B658);
    swift_bridgeObjectRelease(v54);
    v55 = (void *)v44;
    v56 = v46;
    LOBYTE(v57) = v28 & 1;
    v58 = v49;
    v59 = KeyPath;
    v60 = 1;
    v61 = 0;
    v51 = sub_10001B520(&qword_1000B9DF8);
    v52 = sub_10002CE10();
    v22 = AnyView.init<A>(_:)(&v55, v51, v52);
  }
  *a1 = v22;
}

void sub_1000369A8(_QWORD *a1@<X8>)
{
  uint64_t v2;

  sub_100036648(&v2);
  *a1 = v2;
}

uint64_t sub_1000369E4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for SourceView(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_100036A28(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for SourceView(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void destroy for SourceViewModel(uint64_t a1)
{
  sub_10002CC68(*(void **)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
}

uint64_t _s7NewsTag15SourceViewModelOwCP_0(uint64_t a1, uint64_t a2)
{
  void *v3;
  uint64_t v4;
  char v5;

  v3 = *(void **)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_BYTE *)(a2 + 16);
  sub_10002CBBC(*(void **)a2, v4, v5);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = v5;
  return a1;
}

uint64_t assignWithCopy for SourceViewModel(uint64_t a1, uint64_t a2)
{
  void *v3;
  uint64_t v4;
  char v5;
  void *v6;
  uint64_t v7;
  char v8;

  v3 = *(void **)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_BYTE *)(a2 + 16);
  sub_10002CBBC(*(void **)a2, v4, v5);
  v6 = *(void **)a1;
  v7 = *(_QWORD *)(a1 + 8);
  v8 = *(_BYTE *)(a1 + 16);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = v5;
  sub_10002CC68(v6, v7, v8);
  return a1;
}

__n128 initializeWithTake for SourceViewModel(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  a1[1].n128_u8[0] = a2[1].n128_u8[0];
  *a1 = result;
  return result;
}

uint64_t assignWithTake for SourceViewModel(uint64_t a1, uint64_t a2)
{
  char v3;
  void *v4;
  uint64_t v5;
  char v6;

  v3 = *(_BYTE *)(a2 + 16);
  v4 = *(void **)a1;
  v5 = *(_QWORD *)(a1 + 8);
  v6 = *(_BYTE *)(a1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_BYTE *)(a1 + 16) = v3;
  sub_10002CC68(v4, v5, v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for SourceViewModel(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 17))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 16);
  if (v3 <= 1)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for SourceViewModel(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_BYTE *)(result + 16) = 0;
    *(_QWORD *)result = a2 - 255;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 17) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 17) = 0;
    if (a2)
      *(_BYTE *)(result + 16) = -(char)a2;
  }
  return result;
}

uint64_t sub_100036BF8(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 16);
}

uint64_t sub_100036C00(uint64_t result, char a2)
{
  *(_BYTE *)(result + 16) = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for SourceViewModel()
{
  return &type metadata for SourceViewModel;
}

ValueMetadata *type metadata accessor for SourceView.LayoutOptions()
{
  return &type metadata for SourceView.LayoutOptions;
}

void *sub_100036C2C()
{
  return &protocol witness table for AnyView;
}

uint64_t destroy for AudioPlayButton(uint64_t a1)
{
  return swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
}

uint64_t _s7NewsTag15AudioPlayButtonVwCP_0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  swift_bridgeObjectRetain(v3);
  return a1;
}

uint64_t assignWithCopy for AudioPlayButton(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  return a1;
}

uint64_t assignWithTake for AudioPlayButton(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease(v5);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  return a1;
}

uint64_t getEnumTagSinglePayload for AudioPlayButton(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 17))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for AudioPlayButton(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_BYTE *)(result + 16) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 17) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 17) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for AudioPlayButton()
{
  return &type metadata for AudioPlayButton;
}

uint64_t sub_100036DA0(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_10009C730, 1);
}

double sub_100036DB0@<D0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t KeyPath;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  char v13;
  double result;
  uint64_t v15;
  char v16;
  uint64_t v17;
  char v18;
  __int128 v19;

  v2 = static Alignment.center.getter();
  v4 = v3;
  v5 = static Color.black.getter();
  v6 = Color.opacity(_:)(0.5);
  swift_release(v5);
  KeyPath = swift_getKeyPath(&unk_10008B708);
  v8 = static Alignment.center.getter();
  _FrameLayout.init(width:height:alignment:)(&v15, 0x403C000000000000, 0, 0x403C000000000000, 0, v8, v9);
  v10 = v15;
  v11 = v16;
  v12 = v17;
  v13 = v18;
  *(_QWORD *)a1 = v2;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = KeyPath;
  *(_QWORD *)(a1 + 24) = v6;
  *(_QWORD *)(a1 + 32) = v10;
  *(_BYTE *)(a1 + 40) = v11;
  *(_QWORD *)(a1 + 48) = v12;
  *(_BYTE *)(a1 + 56) = v13;
  result = *(double *)&v19;
  *(_OWORD *)(a1 + 64) = v19;
  return result;
}

unint64_t sub_100036E7C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000BA6F8;
  if (!qword_1000BA6F8)
  {
    v1 = sub_10001B560(&qword_1000BA700);
    result = swift_getWitnessTable(&protocol conformance descriptor for ZStack<A>, v1);
    atomic_store(result, (unint64_t *)&qword_1000BA6F8);
  }
  return result;
}

id sub_100036EC8()
{
  id result;

  result = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
  qword_1000BA708 = (uint64_t)result;
  return result;
}

void sub_100036F00()
{
  id v0;
  NSString v1;
  id v2;
  id v3;

  if (qword_1000B8CF0 != -1)
    swift_once(&qword_1000B8CF0, sub_100036EC8);
  v0 = (id)qword_1000BA708;
  v1 = String._bridgeToObjectiveC()();
  v2 = objc_msgSend((id)objc_opt_self(UIImage), "imageNamed:inBundle:compatibleWithTraitCollection:", v1, v0, 0);

  if (v2)
  {
    v3 = objc_msgSend(v2, "imageWithRenderingMode:", 2);

    qword_1000C0750 = (uint64_t)v3;
  }
  else
  {
    __break(1u);
  }
}

void sub_100036FE0()
{
  id v0;
  NSString v1;
  id v2;

  if (qword_1000B8CF0 != -1)
    swift_once(&qword_1000B8CF0, sub_100036EC8);
  v0 = (id)qword_1000BA708;
  v1 = String._bridgeToObjectiveC()();
  v2 = objc_msgSend((id)objc_opt_self(UIImage), "imageNamed:inBundle:compatibleWithTraitCollection:", v1, v0, 0);

  if (v2)
    qword_1000C0758 = (uint64_t)v2;
  else
    __break(1u);
}

id Images.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), "init");
}

id Images.init()()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for Images();
  return objc_msgSendSuper2(&v2, "init");
}

uint64_t type metadata accessor for Images()
{
  return objc_opt_self(_TtC7NewsTag6Images);
}

id Images.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for Images();
  return objc_msgSendSuper2(&v2, "dealloc");
}

_QWORD *sub_100037180(_QWORD *a1, _QWORD *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  unsigned int (*v42)(char *, uint64_t, uint64_t);
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  char *v46;
  void *v47;
  void *v48;
  id v49;
  id v50;
  _QWORD *v51;
  uint64_t v52;
  char *v53;
  char *v54;
  void *v55;
  uint64_t v56;
  uint64_t v57;
  int *v58;
  uint64_t v59;
  char *v60;
  char *v61;
  id v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  char *v76;
  uint64_t v77;
  void *v78;
  void *v79;
  __int128 v80;
  void *v81;
  id v82;
  id v83;
  id v84;
  uint64_t v86;
  char *__dst;
  uint64_t v88;
  _QWORD *v89;
  unsigned int (*v90)(char *, uint64_t, uint64_t);
  uint64_t v91;
  _QWORD *v92;
  int *v93;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v12 = *a2;
    *a1 = *a2;
    v13 = (_QWORD *)(v12 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v12);
  }
  else
  {
    v7 = sub_10001B520(&qword_1000B9B20);
    if (swift_getEnumCaseMultiPayload(a2, v7) == 1)
    {
      v8 = type metadata accessor for RedactionReasons(0);
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(a1, a2, v8);
      v9 = a1;
      v10 = v7;
      v11 = 1;
    }
    else
    {
      v14 = *a2;
      *a1 = *a2;
      swift_retain(v14);
      v9 = a1;
      v10 = v7;
      v11 = 0;
    }
    swift_storeEnumTagMultiPayload(v9, v10, v11);
    v15 = a3[5];
    v16 = (_QWORD *)((char *)a1 + v15);
    v17 = (_QWORD *)((char *)a2 + v15);
    v18 = sub_10001B520(&qword_1000B9A20);
    if (swift_getEnumCaseMultiPayload(v17, v18) == 1)
    {
      v19 = type metadata accessor for WidgetRenderingMode(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v19 - 8) + 16))(v16, v17, v19);
      v20 = v16;
      v21 = v18;
      v22 = 1;
    }
    else
    {
      v23 = *v17;
      *v16 = *v17;
      swift_retain(v23);
      v20 = v16;
      v21 = v18;
      v22 = 0;
    }
    swift_storeEnumTagMultiPayload(v20, v21, v22);
    v24 = a3[6];
    v25 = a3[7];
    v26 = (_QWORD *)((char *)a1 + v24);
    v27 = (_QWORD *)((char *)a2 + v24);
    v28 = v27[1];
    *v26 = *v27;
    v26[1] = v28;
    v29 = (_QWORD *)((char *)a1 + v25);
    v30 = (_QWORD *)((char *)a2 + v25);
    v31 = v30[1];
    *v29 = *v30;
    v29[1] = v31;
    v92 = a2;
    v93 = a3;
    v32 = a3[8];
    v89 = a1;
    v33 = (_QWORD *)((char *)a1 + v32);
    v34 = (char *)a2 + v32;
    v36 = *(_QWORD *)((char *)a2 + v32);
    v35 = *(_QWORD *)((char *)a2 + v32 + 8);
    *v33 = v36;
    v33[1] = v35;
    v37 = type metadata accessor for Item.Headline(0);
    v38 = *(int *)(v37 + 24);
    __dst = (char *)v33 + v38;
    v88 = v37;
    v39 = &v34[v38];
    v40 = type metadata accessor for URL(0);
    v41 = *(_QWORD *)(v40 - 8);
    v42 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v41 + 48);
    swift_retain(v28);
    swift_retain(v31);
    swift_unknownObjectRetain(v36);
    swift_retain(v35);
    v90 = v42;
    if (v42(v39, 1, v40))
    {
      v43 = sub_10001B520(&qword_1000B93A0);
      memcpy(__dst, v39, *(_QWORD *)(*(_QWORD *)(v43 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v41 + 16))(__dst, v39, v40);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v41 + 56))(__dst, 0, 1, v40);
    }
    v13 = v89;
    v44 = *(int *)(v88 + 28);
    v45 = (_QWORD *)((char *)v33 + v44);
    v46 = &v34[v44];
    v47 = (void *)*((_QWORD *)v46 + 1);
    v91 = v40;
    v86 = v41;
    if (v47)
    {
      v48 = *(void **)v46;
      *v45 = v48;
      v45[1] = v47;
      v49 = v48;
      v50 = v47;
    }
    else
    {
      *(_OWORD *)v45 = *(_OWORD *)v46;
    }
    v51 = v92;
    v52 = v93[9];
    v53 = (char *)v89 + v52;
    v54 = (char *)v92 + v52;
    v55 = *(void **)((char *)v92 + v52);
    v56 = *(_QWORD *)((char *)v92 + v52 + 8);
    *(_QWORD *)v53 = v55;
    *((_QWORD *)v53 + 1) = v56;
    v57 = *(_QWORD *)((char *)v92 + v52 + 16);
    *((_QWORD *)v53 + 2) = v57;
    v53[24] = *((_BYTE *)v92 + v52 + 24);
    v58 = (int *)type metadata accessor for TodayContent(0);
    v59 = v58[8];
    v60 = &v53[v59];
    v61 = &v54[v59];
    v62 = v55;
    swift_bridgeObjectRetain(v56);
    swift_unknownObjectRetain(v57);
    if (v90(v61, 1, v91))
    {
      v63 = sub_10001B520(&qword_1000B93A0);
      memcpy(v60, v61, *(_QWORD *)(*(_QWORD *)(v63 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v86 + 16))(v60, v61, v91);
      v51 = v92;
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v86 + 56))(v60, 0, 1, v91);
    }
    v64 = v58[9];
    v65 = *(_QWORD *)&v54[v64];
    *(_QWORD *)&v53[v64] = v65;
    v66 = v58[10];
    v67 = &v53[v66];
    v68 = &v54[v66];
    v69 = *((_QWORD *)v68 + 1);
    *(_QWORD *)v67 = *(_QWORD *)v68;
    *((_QWORD *)v67 + 1) = v69;
    v70 = v58[11];
    v71 = &v53[v70];
    v72 = &v54[v70];
    v73 = *((_QWORD *)v72 + 1);
    *(_QWORD *)v71 = *(_QWORD *)v72;
    *((_QWORD *)v71 + 1) = v73;
    v74 = v93[10];
    v75 = v93[11];
    v76 = (char *)v89 + v74;
    v77 = (uint64_t)v51 + v74;
    v78 = *(void **)v77;
    *(_QWORD *)v76 = *(_QWORD *)v77;
    *(_OWORD *)(v76 + 17) = *(_OWORD *)(v77 + 17);
    *(_OWORD *)(v76 + 8) = *(_OWORD *)(v77 + 8);
    *(_OWORD *)(v76 + 40) = *(_OWORD *)(v77 + 40);
    *((_QWORD *)v76 + 12) = *(_QWORD *)(v77 + 96);
    v79 = *(void **)(v77 + 64);
    *((_QWORD *)v76 + 7) = *(_QWORD *)(v77 + 56);
    *((_QWORD *)v76 + 8) = v79;
    v80 = *(_OWORD *)(v77 + 80);
    v81 = *(void **)(v77 + 72);
    *((_QWORD *)v76 + 9) = v81;
    *((_OWORD *)v76 + 5) = v80;
    *((_BYTE *)v89 + v75) = *((_BYTE *)v51 + v75);
    *((_BYTE *)v89 + v93[12]) = *((_BYTE *)v51 + v93[12]);
    swift_retain(v65);
    swift_bridgeObjectRetain(v69);
    swift_bridgeObjectRetain(v73);
    v82 = v78;
    v83 = v79;
    v84 = v81;
  }
  return v13;
}

void sub_100037598(_QWORD *a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int (*v14)(char *, uint64_t, uint64_t);
  id *v15;
  char *v16;
  int *v17;
  char *v18;
  id *v19;

  v4 = sub_10001B520(&qword_1000B9B20);
  if (swift_getEnumCaseMultiPayload(a1, v4) == 1)
  {
    v5 = type metadata accessor for RedactionReasons(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(a1, v5);
  }
  else
  {
    swift_release(*a1);
  }
  v6 = (_QWORD *)((char *)a1 + a2[5]);
  v7 = sub_10001B520(&qword_1000B9A20);
  if (swift_getEnumCaseMultiPayload(v6, v7) == 1)
  {
    v8 = type metadata accessor for WidgetRenderingMode(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v6, v8);
  }
  else
  {
    swift_release(*v6);
  }
  swift_release(*(_QWORD *)((char *)a1 + a2[6] + 8));
  swift_release(*(_QWORD *)((char *)a1 + a2[7] + 8));
  v9 = (_QWORD *)((char *)a1 + a2[8]);
  swift_unknownObjectRelease(*v9);
  swift_release(v9[1]);
  v10 = type metadata accessor for Item.Headline(0);
  v11 = (char *)v9 + *(int *)(v10 + 24);
  v12 = type metadata accessor for URL(0);
  v13 = *(_QWORD *)(v12 - 8);
  v14 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48);
  if (!v14(v11, 1, v12))
    (*(void (**)(char *, uint64_t))(v13 + 8))(v11, v12);
  v15 = (id *)((char *)v9 + *(int *)(v10 + 28));
  if (v15[1])
  {

  }
  v16 = (char *)a1 + a2[9];

  swift_bridgeObjectRelease(*((_QWORD *)v16 + 1));
  swift_unknownObjectRelease(*((_QWORD *)v16 + 2));
  v17 = (int *)type metadata accessor for TodayContent(0);
  v18 = &v16[v17[8]];
  if (!v14(v18, 1, v12))
    (*(void (**)(char *, uint64_t))(v13 + 8))(v18, v12);
  swift_release(*(_QWORD *)&v16[v17[9]]);
  swift_bridgeObjectRelease(*(_QWORD *)&v16[v17[10] + 8]);
  swift_bridgeObjectRelease(*(_QWORD *)&v16[v17[11] + 8]);
  v19 = (id *)((char *)a1 + a2[10]);

}

_QWORD *sub_1000377AC(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  unsigned int (*v39)(char *, uint64_t, uint64_t);
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  char *v43;
  void *v44;
  void *v45;
  id v46;
  id v47;
  uint64_t v48;
  _QWORD *v49;
  char *v50;
  char *v51;
  uint64_t v52;
  void *v53;
  uint64_t v54;
  int *v55;
  uint64_t v56;
  char *v57;
  char *v58;
  id v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  char *v74;
  void *v75;
  void *v76;
  __int128 v77;
  void *v78;
  id v79;
  id v80;
  id v81;
  uint64_t v83;
  char *__dst;
  uint64_t v85;
  unsigned int (*v86)(char *, uint64_t, uint64_t);
  _QWORD *v87;
  _QWORD *v88;
  int *v89;

  v6 = sub_10001B520(&qword_1000B9B20);
  if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
  {
    v7 = type metadata accessor for RedactionReasons(0);
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = a1;
    v9 = v6;
    v10 = 1;
  }
  else
  {
    v11 = *a2;
    *a1 = *a2;
    swift_retain(v11);
    v8 = a1;
    v9 = v6;
    v10 = 0;
  }
  swift_storeEnumTagMultiPayload(v8, v9, v10);
  v12 = a3[5];
  v13 = (_QWORD *)((char *)a1 + v12);
  v14 = (_QWORD *)((char *)a2 + v12);
  v15 = sub_10001B520(&qword_1000B9A20);
  if (swift_getEnumCaseMultiPayload(v14, v15) == 1)
  {
    v16 = type metadata accessor for WidgetRenderingMode(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v16 - 8) + 16))(v13, v14, v16);
    v17 = v13;
    v18 = v15;
    v19 = 1;
  }
  else
  {
    v20 = *v14;
    *v13 = *v14;
    swift_retain(v20);
    v17 = v13;
    v18 = v15;
    v19 = 0;
  }
  swift_storeEnumTagMultiPayload(v17, v18, v19);
  v21 = a3[6];
  v22 = a3[7];
  v23 = (_QWORD *)((char *)a1 + v21);
  v24 = (_QWORD *)((char *)a2 + v21);
  v25 = v24[1];
  *v23 = *v24;
  v23[1] = v25;
  v26 = (_QWORD *)((char *)a1 + v22);
  v27 = (_QWORD *)((char *)a2 + v22);
  v28 = v27[1];
  *v26 = *v27;
  v26[1] = v28;
  v88 = a2;
  v89 = a3;
  v29 = a3[8];
  v87 = a1;
  v30 = (_QWORD *)((char *)a1 + v29);
  v31 = (_QWORD *)((char *)a2 + v29);
  v33 = *v31;
  v32 = v31[1];
  *v30 = *v31;
  v30[1] = v32;
  v34 = type metadata accessor for Item.Headline(0);
  v35 = *(int *)(v34 + 24);
  __dst = (char *)v30 + v35;
  v85 = v34;
  v36 = (char *)v31 + v35;
  v37 = type metadata accessor for URL(0);
  v38 = *(_QWORD *)(v37 - 8);
  v39 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v38 + 48);
  swift_retain(v25);
  swift_retain(v28);
  swift_unknownObjectRetain(v33);
  swift_retain(v32);
  v86 = v39;
  if (v39(v36, 1, v37))
  {
    v40 = sub_10001B520(&qword_1000B93A0);
    memcpy(__dst, v36, *(_QWORD *)(*(_QWORD *)(v40 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v38 + 16))(__dst, v36, v37);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v38 + 56))(__dst, 0, 1, v37);
  }
  v41 = *(int *)(v85 + 28);
  v42 = (uint64_t *)((char *)v30 + v41);
  v43 = (char *)v31 + v41;
  v44 = (void *)*((_QWORD *)v43 + 1);
  v83 = v38;
  if (v44)
  {
    v45 = *(void **)v43;
    *v42 = v45;
    v42[1] = v44;
    v46 = v45;
    v47 = v44;
  }
  else
  {
    *(_OWORD *)v42 = *(_OWORD *)v43;
  }
  v48 = v89[9];
  v49 = v87;
  v50 = (char *)v87 + v48;
  v51 = (char *)v88 + v48;
  v53 = *(void **)((char *)v88 + v48);
  v52 = *(_QWORD *)((char *)v88 + v48 + 8);
  *(_QWORD *)v50 = v53;
  *((_QWORD *)v50 + 1) = v52;
  v54 = *(_QWORD *)((char *)v88 + v48 + 16);
  *((_QWORD *)v50 + 2) = v54;
  v50[24] = *((_BYTE *)v88 + v48 + 24);
  v55 = (int *)type metadata accessor for TodayContent(0);
  v56 = v55[8];
  v57 = &v50[v56];
  v58 = &v51[v56];
  v59 = v53;
  swift_bridgeObjectRetain(v52);
  swift_unknownObjectRetain(v54);
  if (v86(v58, 1, v37))
  {
    v60 = sub_10001B520(&qword_1000B93A0);
    memcpy(v57, v58, *(_QWORD *)(*(_QWORD *)(v60 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v83 + 16))(v57, v58, v37);
    v49 = v87;
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v83 + 56))(v57, 0, 1, v37);
  }
  v61 = v55[9];
  v62 = *(_QWORD *)&v51[v61];
  *(_QWORD *)&v50[v61] = v62;
  v63 = v55[10];
  v64 = &v50[v63];
  v65 = &v51[v63];
  v66 = *((_QWORD *)v65 + 1);
  *(_QWORD *)v64 = *(_QWORD *)v65;
  *((_QWORD *)v64 + 1) = v66;
  v67 = v55[11];
  v68 = &v50[v67];
  v69 = &v51[v67];
  v70 = *((_QWORD *)v69 + 1);
  *(_QWORD *)v68 = *(_QWORD *)v69;
  *((_QWORD *)v68 + 1) = v70;
  v71 = v89[10];
  v72 = v89[11];
  v73 = (uint64_t)v49 + v71;
  v74 = (char *)v88 + v71;
  v75 = *(void **)v74;
  *(_QWORD *)v73 = *(_QWORD *)v74;
  *(_OWORD *)(v73 + 17) = *(_OWORD *)(v74 + 17);
  *(_OWORD *)(v73 + 8) = *(_OWORD *)(v74 + 8);
  *(_OWORD *)(v73 + 40) = *(_OWORD *)(v74 + 40);
  *(_QWORD *)(v73 + 96) = *((_QWORD *)v74 + 12);
  v76 = (void *)*((_QWORD *)v74 + 8);
  *(_QWORD *)(v73 + 56) = *((_QWORD *)v74 + 7);
  *(_QWORD *)(v73 + 64) = v76;
  v77 = *((_OWORD *)v74 + 5);
  v78 = (void *)*((_QWORD *)v74 + 9);
  *(_QWORD *)(v73 + 72) = v78;
  *(_OWORD *)(v73 + 80) = v77;
  *((_BYTE *)v49 + v72) = *((_BYTE *)v88 + v72);
  *((_BYTE *)v49 + v89[12]) = *((_BYTE *)v88 + v89[12]);
  swift_retain(v62);
  swift_bridgeObjectRetain(v66);
  swift_bridgeObjectRetain(v70);
  v79 = v75;
  v80 = v76;
  v81 = v78;
  return v49;
}

_QWORD *sub_100037B9C(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  char *v41;
  uint64_t v42;
  uint64_t (*v43)(char *, uint64_t, uint64_t);
  int v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  id v52;
  void *v53;
  id v54;
  void *v55;
  void *v56;
  id v57;
  void *v58;
  void *v59;
  id v60;
  id v61;
  uint64_t v62;
  char *v63;
  char *v64;
  void *v65;
  void *v66;
  id v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  int *v72;
  uint64_t v73;
  char *v74;
  char *v75;
  int v76;
  int v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  char *v83;
  char *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  char *v88;
  char *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  char *v93;
  char *v94;
  void *v95;
  void *v96;
  id v97;
  __int128 v98;
  void *v99;
  void *v100;
  id v101;
  void *v102;
  void *v103;
  id v104;
  uint64_t v106;
  int *v107;

  if (a1 != a2)
  {
    sub_10002CCF4((uint64_t)a1, &qword_1000B9B20);
    v6 = sub_10001B520(&qword_1000B9B20);
    if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
    {
      v7 = type metadata accessor for RedactionReasons(0);
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
      v8 = a1;
      v9 = v6;
      v10 = 1;
    }
    else
    {
      v11 = *a2;
      *a1 = *a2;
      swift_retain(v11);
      v8 = a1;
      v9 = v6;
      v10 = 0;
    }
    swift_storeEnumTagMultiPayload(v8, v9, v10);
    v12 = a3[5];
    v13 = (_QWORD *)((char *)a1 + v12);
    v14 = (_QWORD *)((char *)a2 + v12);
    sub_10002CCF4((uint64_t)a1 + v12, &qword_1000B9A20);
    v15 = sub_10001B520(&qword_1000B9A20);
    if (swift_getEnumCaseMultiPayload(v14, v15) == 1)
    {
      v16 = type metadata accessor for WidgetRenderingMode(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v16 - 8) + 16))(v13, v14, v16);
      v17 = v13;
      v18 = v15;
      v19 = 1;
    }
    else
    {
      v20 = *v14;
      *v13 = *v14;
      swift_retain(v20);
      v17 = v13;
      v18 = v15;
      v19 = 0;
    }
    swift_storeEnumTagMultiPayload(v17, v18, v19);
  }
  v21 = a3[6];
  v22 = (_QWORD *)((char *)a1 + v21);
  v23 = (_QWORD *)((char *)a2 + v21);
  *v22 = *v23;
  v24 = v22[1];
  v25 = v23[1];
  v22[1] = v25;
  swift_retain(v25);
  swift_release(v24);
  v26 = a3[7];
  v27 = (_QWORD *)((char *)a1 + v26);
  v28 = (_QWORD *)((char *)a2 + v26);
  *v27 = *v28;
  v29 = v27[1];
  v30 = v28[1];
  v27[1] = v30;
  swift_retain(v30);
  swift_release(v29);
  v107 = a3;
  v31 = a3[8];
  v32 = (char *)a1 + v31;
  v33 = (char *)a2 + v31;
  v34 = *(_QWORD *)((char *)a2 + v31);
  v35 = *(_QWORD *)((char *)a1 + v31);
  *(_QWORD *)((char *)a1 + v31) = v34;
  swift_unknownObjectRetain(v34);
  swift_unknownObjectRelease(v35);
  v36 = *((_QWORD *)v33 + 1);
  v37 = *((_QWORD *)v32 + 1);
  *((_QWORD *)v32 + 1) = v36;
  swift_retain(v36);
  swift_release(v37);
  v38 = type metadata accessor for Item.Headline(0);
  v39 = *(int *)(v38 + 24);
  v40 = &v32[v39];
  v41 = &v33[v39];
  v42 = type metadata accessor for URL(0);
  v106 = *(_QWORD *)(v42 - 8);
  v43 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v106 + 48);
  v44 = v43(v40, 1, v42);
  v45 = v43(v41, 1, v42);
  if (v44)
  {
    if (!v45)
    {
      (*(void (**)(char *, char *, uint64_t))(v106 + 16))(v40, v41, v42);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v106 + 56))(v40, 0, 1, v42);
      goto LABEL_15;
    }
    goto LABEL_14;
  }
  if (v45)
  {
    (*(void (**)(char *, uint64_t))(v106 + 8))(v40, v42);
LABEL_14:
    v46 = sub_10001B520(&qword_1000B93A0);
    memcpy(v40, v41, *(_QWORD *)(*(_QWORD *)(v46 - 8) + 64));
    goto LABEL_15;
  }
  (*(void (**)(char *, char *, uint64_t))(v106 + 24))(v40, v41, v42);
LABEL_15:
  v47 = *(int *)(v38 + 28);
  v48 = &v32[v47];
  v49 = &v33[v47];
  v50 = *(_QWORD *)&v32[v47 + 8];
  v51 = *((_QWORD *)v49 + 1);
  if (v50)
  {
    if (v51)
    {
      v52 = *(id *)v48;
      v53 = *(void **)v49;
      *(_QWORD *)v48 = *(_QWORD *)v49;
      v54 = v53;

      v55 = (void *)*((_QWORD *)v49 + 1);
      v56 = (void *)*((_QWORD *)v48 + 1);
      *((_QWORD *)v48 + 1) = v55;
      v57 = v55;

      goto LABEL_22;
    }
    sub_10002BC50((id *)v48);
  }
  else if (v51)
  {
    v58 = *(void **)v49;
    *(_QWORD *)v48 = *(_QWORD *)v49;
    v59 = (void *)*((_QWORD *)v49 + 1);
    *((_QWORD *)v48 + 1) = v59;
    v60 = v58;
    v61 = v59;
    goto LABEL_22;
  }
  *(_OWORD *)v48 = *(_OWORD *)v49;
LABEL_22:
  v62 = v107[9];
  v63 = (char *)a1 + v62;
  v64 = (char *)a2 + v62;
  v65 = *(void **)((char *)a2 + v62);
  v66 = *(void **)v63;
  *(_QWORD *)v63 = v65;
  v67 = v65;

  v68 = *((_QWORD *)v64 + 1);
  v69 = *((_QWORD *)v63 + 1);
  *((_QWORD *)v63 + 1) = v68;
  swift_bridgeObjectRetain(v68);
  swift_bridgeObjectRelease(v69);
  v70 = *((_QWORD *)v64 + 2);
  v71 = *((_QWORD *)v63 + 2);
  *((_QWORD *)v63 + 2) = v70;
  swift_unknownObjectRetain(v70);
  swift_unknownObjectRelease(v71);
  v63[24] = v64[24];
  v72 = (int *)type metadata accessor for TodayContent(0);
  v73 = v72[8];
  v74 = &v63[v73];
  v75 = &v64[v73];
  v76 = v43(&v63[v73], 1, v42);
  v77 = v43(v75, 1, v42);
  if (!v76)
  {
    if (!v77)
    {
      (*(void (**)(char *, char *, uint64_t))(v106 + 24))(v74, v75, v42);
      goto LABEL_28;
    }
    (*(void (**)(char *, uint64_t))(v106 + 8))(v74, v42);
    goto LABEL_27;
  }
  if (v77)
  {
LABEL_27:
    v78 = sub_10001B520(&qword_1000B93A0);
    memcpy(v74, v75, *(_QWORD *)(*(_QWORD *)(v78 - 8) + 64));
    goto LABEL_28;
  }
  (*(void (**)(char *, char *, uint64_t))(v106 + 16))(v74, v75, v42);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v106 + 56))(v74, 0, 1, v42);
LABEL_28:
  v79 = v72[9];
  v80 = *(_QWORD *)&v64[v79];
  v81 = *(_QWORD *)&v63[v79];
  *(_QWORD *)&v63[v79] = v80;
  swift_retain(v80);
  swift_release(v81);
  v82 = v72[10];
  v83 = &v63[v82];
  v84 = &v64[v82];
  *(_QWORD *)v83 = *(_QWORD *)v84;
  v85 = *((_QWORD *)v84 + 1);
  v86 = *((_QWORD *)v83 + 1);
  *((_QWORD *)v83 + 1) = v85;
  swift_bridgeObjectRetain(v85);
  swift_bridgeObjectRelease(v86);
  v87 = v72[11];
  v88 = &v63[v87];
  v89 = &v64[v87];
  *(_QWORD *)v88 = *(_QWORD *)v89;
  v90 = *((_QWORD *)v89 + 1);
  v91 = *((_QWORD *)v88 + 1);
  *((_QWORD *)v88 + 1) = v90;
  swift_bridgeObjectRetain(v90);
  swift_bridgeObjectRelease(v91);
  v92 = v107[10];
  v93 = (char *)a1 + v92;
  v94 = (char *)a2 + v92;
  v95 = *(void **)((char *)a2 + v92);
  v96 = *(void **)v93;
  *(_QWORD *)v93 = v95;
  v97 = v95;

  *((_QWORD *)v93 + 1) = *((_QWORD *)v94 + 1);
  v98 = *((_OWORD *)v94 + 1);
  v93[32] = v94[32];
  *((_OWORD *)v93 + 1) = v98;
  *((_QWORD *)v93 + 5) = *((_QWORD *)v94 + 5);
  *((_QWORD *)v93 + 6) = *((_QWORD *)v94 + 6);
  *((_QWORD *)v93 + 7) = *((_QWORD *)v94 + 7);
  v99 = (void *)*((_QWORD *)v94 + 8);
  v100 = (void *)*((_QWORD *)v93 + 8);
  *((_QWORD *)v93 + 8) = v99;
  v101 = v99;

  v102 = (void *)*((_QWORD *)v94 + 9);
  v103 = (void *)*((_QWORD *)v93 + 9);
  *((_QWORD *)v93 + 9) = v102;
  v104 = v102;

  *((_QWORD *)v93 + 10) = *((_QWORD *)v94 + 10);
  *((_QWORD *)v93 + 11) = *((_QWORD *)v94 + 11);
  *((_QWORD *)v93 + 12) = *((_QWORD *)v94 + 12);
  *((_BYTE *)a1 + v107[11]) = *((_BYTE *)a2 + v107[11]);
  *((_BYTE *)a1 + v107[12]) = *((_BYTE *)a2 + v107[12]);
  return a1;
}

char *sub_10003813C(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int (*v23)(char *, uint64_t, uint64_t);
  uint64_t v24;
  uint64_t v25;
  char *v26;
  char *v27;
  int *v28;
  uint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  char *v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  int *v41;

  v6 = sub_10001B520(&qword_1000B9B20);
  if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
  {
    v7 = type metadata accessor for RedactionReasons(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a1, a2, v7);
    swift_storeEnumTagMultiPayload(a1, v6, 1);
  }
  else
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
  }
  v8 = a3[5];
  v9 = &a1[v8];
  v10 = &a2[v8];
  v11 = sub_10001B520(&qword_1000B9A20);
  if (swift_getEnumCaseMultiPayload(v10, v11) == 1)
  {
    v12 = type metadata accessor for WidgetRenderingMode(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 32))(v9, v10, v12);
    swift_storeEnumTagMultiPayload(v9, v11, 1);
  }
  else
  {
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
  }
  v13 = a3[7];
  *(_OWORD *)&a1[a3[6]] = *(_OWORD *)&a2[a3[6]];
  *(_OWORD *)&a1[v13] = *(_OWORD *)&a2[v13];
  v41 = a3;
  v14 = a3[8];
  v15 = &a1[v14];
  v16 = &a2[v14];
  *(_OWORD *)&a1[v14] = *(_OWORD *)&a2[v14];
  v17 = type metadata accessor for Item.Headline(0);
  v18 = *(int *)(v17 + 24);
  v19 = &v15[v18];
  v20 = &v16[v18];
  v21 = type metadata accessor for URL(0);
  v22 = *(_QWORD *)(v21 - 8);
  v23 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v22 + 48);
  if (v23(v20, 1, v21))
  {
    v24 = sub_10001B520(&qword_1000B93A0);
    memcpy(v19, v20, *(_QWORD *)(*(_QWORD *)(v24 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v22 + 32))(v19, v20, v21);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v22 + 56))(v19, 0, 1, v21);
  }
  *(_OWORD *)&v15[*(int *)(v17 + 28)] = *(_OWORD *)&v16[*(int *)(v17 + 28)];
  v25 = v41[9];
  v26 = &a1[v25];
  v27 = &a2[v25];
  *(_OWORD *)v26 = *(_OWORD *)&a2[v25];
  *((_QWORD *)v26 + 2) = *(_QWORD *)&a2[v25 + 16];
  v26[24] = a2[v25 + 24];
  v28 = (int *)type metadata accessor for TodayContent(0);
  v29 = v28[8];
  v30 = &v26[v29];
  v31 = &v27[v29];
  if (v23(&v27[v29], 1, v21))
  {
    v32 = sub_10001B520(&qword_1000B93A0);
    memcpy(v30, v31, *(_QWORD *)(*(_QWORD *)(v32 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v22 + 32))(v30, v31, v21);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v22 + 56))(v30, 0, 1, v21);
  }
  *(_QWORD *)&v26[v28[9]] = *(_QWORD *)&v27[v28[9]];
  *(_OWORD *)&v26[v28[10]] = *(_OWORD *)&v27[v28[10]];
  *(_OWORD *)&v26[v28[11]] = *(_OWORD *)&v27[v28[11]];
  v33 = v41[10];
  v34 = v41[11];
  v35 = &a1[v33];
  v36 = &a2[v33];
  v37 = *((_OWORD *)v36 + 1);
  *(_OWORD *)v35 = *(_OWORD *)v36;
  *((_OWORD *)v35 + 1) = v37;
  *((_QWORD *)v35 + 12) = *((_QWORD *)v36 + 12);
  v38 = *((_OWORD *)v36 + 5);
  *((_OWORD *)v35 + 4) = *((_OWORD *)v36 + 4);
  *((_OWORD *)v35 + 5) = v38;
  v39 = *((_OWORD *)v36 + 3);
  *((_OWORD *)v35 + 2) = *((_OWORD *)v36 + 2);
  *((_OWORD *)v35 + 3) = v39;
  a1[v34] = a2[v34];
  a1[v41[12]] = a2[v41[12]];
  return a1;
}

char *sub_100038444(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;
  uint64_t (*v31)(char *, uint64_t, uint64_t);
  int v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  char *v37;
  id v38;
  void *v39;
  uint64_t v40;
  char *v41;
  char *v42;
  void *v43;
  uint64_t v44;
  uint64_t v45;
  int *v46;
  uint64_t v47;
  char *v48;
  char *v49;
  int v50;
  int v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  char *v69;
  void *v70;
  void *v71;
  void *v72;
  uint64_t v73;
  uint64_t v75;
  int *v76;

  if (a1 != a2)
  {
    sub_10002CCF4((uint64_t)a1, &qword_1000B9B20);
    v6 = sub_10001B520(&qword_1000B9B20);
    if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
    {
      v7 = type metadata accessor for RedactionReasons(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a1, a2, v7);
      swift_storeEnumTagMultiPayload(a1, v6, 1);
    }
    else
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
    }
    v8 = a3[5];
    v9 = &a1[v8];
    v10 = &a2[v8];
    sub_10002CCF4((uint64_t)&a1[v8], &qword_1000B9A20);
    v11 = sub_10001B520(&qword_1000B9A20);
    if (swift_getEnumCaseMultiPayload(v10, v11) == 1)
    {
      v12 = type metadata accessor for WidgetRenderingMode(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 32))(v9, v10, v12);
      swift_storeEnumTagMultiPayload(v9, v11, 1);
    }
    else
    {
      memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
    }
  }
  v13 = a3[6];
  v14 = &a1[v13];
  v15 = &a2[v13];
  *(_QWORD *)v14 = *(_QWORD *)v15;
  v16 = *((_QWORD *)v14 + 1);
  *((_QWORD *)v14 + 1) = *((_QWORD *)v15 + 1);
  swift_release(v16);
  v17 = a3[7];
  v18 = &a1[v17];
  v19 = &a2[v17];
  *(_QWORD *)v18 = *(_QWORD *)v19;
  v20 = *((_QWORD *)v18 + 1);
  *((_QWORD *)v18 + 1) = *((_QWORD *)v19 + 1);
  swift_release(v20);
  v76 = a3;
  v21 = a3[8];
  v22 = &a1[v21];
  v23 = &a2[v21];
  v24 = *(_QWORD *)&a1[v21];
  *(_QWORD *)&a1[v21] = *(_QWORD *)&a2[v21];
  swift_unknownObjectRelease(v24);
  v25 = *((_QWORD *)v22 + 1);
  *((_QWORD *)v22 + 1) = *((_QWORD *)v23 + 1);
  swift_release(v25);
  v26 = type metadata accessor for Item.Headline(0);
  v27 = *(int *)(v26 + 24);
  v28 = &v22[v27];
  v29 = &v23[v27];
  v30 = type metadata accessor for URL(0);
  v75 = *(_QWORD *)(v30 - 8);
  v31 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v75 + 48);
  v32 = v31(v28, 1, v30);
  v33 = v31(v29, 1, v30);
  if (v32)
  {
    if (!v33)
    {
      (*(void (**)(char *, char *, uint64_t))(v75 + 32))(v28, v29, v30);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v75 + 56))(v28, 0, 1, v30);
      goto LABEL_14;
    }
    goto LABEL_13;
  }
  if (v33)
  {
    (*(void (**)(char *, uint64_t))(v75 + 8))(v28, v30);
LABEL_13:
    v34 = sub_10001B520(&qword_1000B93A0);
    memcpy(v28, v29, *(_QWORD *)(*(_QWORD *)(v34 - 8) + 64));
    goto LABEL_14;
  }
  (*(void (**)(char *, char *, uint64_t))(v75 + 40))(v28, v29, v30);
LABEL_14:
  v35 = *(int *)(v26 + 28);
  v36 = &v22[v35];
  v37 = &v23[v35];
  if (*(_QWORD *)&v22[v35 + 8])
  {
    if (*((_QWORD *)v37 + 1))
    {
      v38 = *(id *)v36;
      *(_QWORD *)v36 = *(_QWORD *)v37;

      v39 = (void *)*((_QWORD *)v36 + 1);
      *((_QWORD *)v36 + 1) = *((_QWORD *)v37 + 1);

      goto LABEL_19;
    }
    sub_10002BC50((id *)v36);
  }
  *(_OWORD *)v36 = *(_OWORD *)v37;
LABEL_19:
  v40 = v76[9];
  v41 = &a1[v40];
  v42 = &a2[v40];
  v43 = *(void **)&a1[v40];
  *(_QWORD *)&a1[v40] = *(_QWORD *)&a2[v40];

  v44 = *((_QWORD *)v41 + 1);
  *((_QWORD *)v41 + 1) = *((_QWORD *)v42 + 1);
  swift_bridgeObjectRelease(v44);
  v45 = *((_QWORD *)v41 + 2);
  *((_QWORD *)v41 + 2) = *((_QWORD *)v42 + 2);
  swift_unknownObjectRelease(v45);
  v41[24] = v42[24];
  v46 = (int *)type metadata accessor for TodayContent(0);
  v47 = v46[8];
  v48 = &v41[v47];
  v49 = &v42[v47];
  v50 = v31(&v41[v47], 1, v30);
  v51 = v31(v49, 1, v30);
  if (!v50)
  {
    if (!v51)
    {
      (*(void (**)(char *, char *, uint64_t))(v75 + 40))(v48, v49, v30);
      goto LABEL_25;
    }
    (*(void (**)(char *, uint64_t))(v75 + 8))(v48, v30);
    goto LABEL_24;
  }
  if (v51)
  {
LABEL_24:
    v52 = sub_10001B520(&qword_1000B93A0);
    memcpy(v48, v49, *(_QWORD *)(*(_QWORD *)(v52 - 8) + 64));
    goto LABEL_25;
  }
  (*(void (**)(char *, char *, uint64_t))(v75 + 32))(v48, v49, v30);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v75 + 56))(v48, 0, 1, v30);
LABEL_25:
  v53 = v46[9];
  v54 = *(_QWORD *)&v41[v53];
  *(_QWORD *)&v41[v53] = *(_QWORD *)&v42[v53];
  swift_release(v54);
  v55 = v46[10];
  v56 = &v41[v55];
  v57 = &v42[v55];
  v59 = *(_QWORD *)v57;
  v58 = *((_QWORD *)v57 + 1);
  v60 = *((_QWORD *)v56 + 1);
  *(_QWORD *)v56 = v59;
  *((_QWORD *)v56 + 1) = v58;
  swift_bridgeObjectRelease(v60);
  v61 = v46[11];
  v62 = &v41[v61];
  v63 = &v42[v61];
  v65 = *(_QWORD *)v63;
  v64 = *((_QWORD *)v63 + 1);
  v66 = *((_QWORD *)v62 + 1);
  *(_QWORD *)v62 = v65;
  *((_QWORD *)v62 + 1) = v64;
  swift_bridgeObjectRelease(v66);
  v67 = v76[10];
  v68 = &a1[v67];
  v69 = &a2[v67];
  v70 = *(void **)&a1[v67];
  *(_QWORD *)&a1[v67] = *(_QWORD *)&a2[v67];

  *((_QWORD *)v68 + 1) = *((_QWORD *)v69 + 1);
  *((_OWORD *)v68 + 1) = *((_OWORD *)v69 + 1);
  v68[32] = v69[32];
  *(_OWORD *)(v68 + 40) = *(_OWORD *)(v69 + 40);
  *((_QWORD *)v68 + 7) = *((_QWORD *)v69 + 7);
  v71 = (void *)*((_QWORD *)v68 + 8);
  *((_QWORD *)v68 + 8) = *((_QWORD *)v69 + 8);

  v72 = (void *)*((_QWORD *)v68 + 9);
  *((_QWORD *)v68 + 9) = *((_QWORD *)v69 + 9);

  *((_OWORD *)v68 + 5) = *((_OWORD *)v69 + 5);
  *((_QWORD *)v68 + 12) = *((_QWORD *)v69 + 12);
  v73 = v76[12];
  a1[v76[11]] = a2[v76[11]];
  a1[v73] = a2[v73];
  return a1;
}

uint64_t sub_100038938(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100038944);
}

uint64_t sub_100038944(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v17;

  v6 = sub_10001B520(&qword_1000BA738);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
    return v9(v10, a2, v8);
  }
  v11 = sub_10001B520(&qword_1000B9A28);
  v12 = *(_QWORD *)(v11 - 8);
  if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
  {
    v8 = v11;
    v13 = a3[5];
LABEL_9:
    v10 = a1 + v13;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
    return v9(v10, a2, v8);
  }
  v14 = type metadata accessor for Item.Headline(0);
  v12 = *(_QWORD *)(v14 - 8);
  if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
  {
    v8 = v14;
    v13 = a3[8];
    goto LABEL_9;
  }
  v15 = type metadata accessor for TodayContent(0);
  v12 = *(_QWORD *)(v15 - 8);
  if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
  {
    v8 = v15;
    v13 = a3[9];
    goto LABEL_9;
  }
  v17 = *(_QWORD *)(a1 + a3[10]);
  if (v17 >= 0xFFFFFFFF)
    LODWORD(v17) = -1;
  return (v17 + 1);
}

uint64_t sub_100038A3C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100038A48);
}

uint64_t sub_100038A48(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t result;

  v8 = sub_10001B520(&qword_1000BA738);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
    return v11(v12, a2, a2, v10);
  }
  v13 = sub_10001B520(&qword_1000B9A28);
  v14 = *(_QWORD *)(v13 - 8);
  if (*(_DWORD *)(v14 + 84) == a3)
  {
    v10 = v13;
    v15 = a4[5];
LABEL_9:
    v12 = a1 + v15;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
    return v11(v12, a2, a2, v10);
  }
  v16 = type metadata accessor for Item.Headline(0);
  v14 = *(_QWORD *)(v16 - 8);
  if (*(_DWORD *)(v14 + 84) == a3)
  {
    v10 = v16;
    v15 = a4[8];
    goto LABEL_9;
  }
  result = type metadata accessor for TodayContent(0);
  v14 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v14 + 84) == a3)
  {
    v10 = result;
    v15 = a4[9];
    goto LABEL_9;
  }
  *(_QWORD *)(a1 + a4[10]) = (a2 - 1);
  return result;
}

uint64_t type metadata accessor for HeadlineCell(uint64_t a1)
{
  return sub_10002ABF8(a1, (uint64_t *)&unk_1000BA798, (uint64_t)&nominal type descriptor for HeadlineCell);
}

void sub_100038B50(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  _QWORD v10[9];

  sub_100038C4C(319, (unint64_t *)&unk_1000BA7A8, (uint64_t (*)(uint64_t))&type metadata accessor for RedactionReasons);
  if (v3 <= 0x3F)
  {
    v10[0] = *(_QWORD *)(v2 - 8) + 64;
    sub_100038C4C(319, (unint64_t *)&qword_1000B9A98, (uint64_t (*)(uint64_t))&type metadata accessor for WidgetRenderingMode);
    if (v5 <= 0x3F)
    {
      v10[1] = *(_QWORD *)(v4 - 8) + 64;
      v10[2] = &unk_10008B758;
      v10[3] = &unk_10008B758;
      v6 = type metadata accessor for Item.Headline(319);
      if (v7 <= 0x3F)
      {
        v10[4] = *(_QWORD *)(v6 - 8) + 64;
        v8 = type metadata accessor for TodayContent(319);
        if (v9 <= 0x3F)
        {
          v10[5] = *(_QWORD *)(v8 - 8) + 64;
          v10[6] = &unk_10008B770;
          v10[7] = &unk_10008B788;
          v10[8] = &unk_10008B788;
          swift_initStructMetadata(a1, 256, 9, v10, a1 + 16);
        }
      }
    }
  }
}

void sub_100038C4C(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t))
{
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!*a2)
  {
    v5 = a3(255);
    v6 = type metadata accessor for Environment.Content(a1, v5);
    if (!v7)
      atomic_store(v6, a2);
  }
}

void destroy for HeadlineCell.LayoutOptions(id *a1)
{

}

uint64_t initializeWithCopy for HeadlineCell.LayoutOptions(uint64_t a1, uint64_t a2)
{
  void *v3;
  void *v4;
  void *v5;
  id v6;
  id v7;
  id v8;

  v3 = *(void **)a2;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 17) = *(_OWORD *)(a2 + 17);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  v4 = *(void **)(a2 + 64);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = v4;
  v5 = *(void **)(a2 + 72);
  *(_QWORD *)(a1 + 72) = v5;
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  v6 = v3;
  v7 = v4;
  v8 = v5;
  return a1;
}

uint64_t assignWithCopy for HeadlineCell.LayoutOptions(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  id v6;
  __int128 v7;
  void *v8;
  void *v9;
  id v10;
  void *v11;
  void *v12;
  id v13;

  v4 = *(void **)a2;
  v5 = *(void **)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v6 = v4;

  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  v7 = *(_OWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = v7;
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  v8 = *(void **)(a2 + 64);
  v9 = *(void **)(a1 + 64);
  *(_QWORD *)(a1 + 64) = v8;
  v10 = v8;

  v11 = *(void **)(a2 + 72);
  v12 = *(void **)(a1 + 72);
  *(_QWORD *)(a1 + 72) = v11;
  v13 = v11;

  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  return a1;
}

__n128 initializeWithTake for HeadlineCell.LayoutOptions(uint64_t a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __n128 result;
  __int128 v5;
  __int128 v6;

  v2 = *a2;
  v3 = a2[2];
  *(_OWORD *)(a1 + 16) = a2[1];
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)a1 = v2;
  result = (__n128)a2[3];
  v5 = a2[4];
  v6 = a2[5];
  *(_QWORD *)(a1 + 96) = *((_QWORD *)a2 + 12);
  *(_OWORD *)(a1 + 64) = v5;
  *(_OWORD *)(a1 + 80) = v6;
  *(__n128 *)(a1 + 48) = result;
  return result;
}

uint64_t assignWithTake for HeadlineCell.LayoutOptions(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;

  v4 = *(void **)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;

  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);

  v5 = *(void **)(a1 + 72);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);

  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  return a1;
}

uint64_t getEnumTagSinglePayload for HeadlineCell.LayoutOptions(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 104))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for HeadlineCell.LayoutOptions(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 104) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 104) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for HeadlineCell.LayoutOptions()
{
  return &type metadata for HeadlineCell.LayoutOptions;
}

uint64_t sub_100038F4C(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_10009C844, 1);
}

uint64_t sub_100038F5C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  uint64_t v14;
  void *v15;
  Swift::String v16;
  void *v17;
  id v18;
  void *v19;
  uint64_t v20;
  void *v21;
  Swift::String v22;
  Swift::String v23;
  id v24;
  void *v25;
  uint64_t v26;
  void *v27;
  void *v28;
  Swift::String v29;
  Swift::String v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  uint64_t v38;
  uint64_t v39;
  _BYTE v41[16];

  v2 = v1;
  v4 = type metadata accessor for LocalizedStringKey.StringInterpolation(0);
  __chkstk_darwin(v4);
  v6 = &v41[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v7 = sub_10001B520(&qword_1000BA7F8);
  __chkstk_darwin(v7);
  v9 = &v41[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v10 = sub_10001B520(&qword_1000BA800);
  v11 = __chkstk_darwin(v10);
  v13 = &v41[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)];
  *(_QWORD *)v9 = static HorizontalAlignment.leading.getter(v11);
  *((_QWORD *)v9 + 1) = 0;
  v9[16] = 1;
  v14 = sub_10001B520(&qword_1000BA808);
  sub_10003921C(v2, (uint64_t)&v9[*(int *)(v14 + 44)]);
  LocalizedStringKey.StringInterpolation.init(literalCapacity:interpolationCount:)(2, 2);
  v15 = (void *)0xE000000000000000;
  v16._countAndFlagsBits = 0;
  v16._object = (void *)0xE000000000000000;
  LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v16);
  v17 = *(void **)(v2 + *(int *)(type metadata accessor for HeadlineCell(0) + 32));
  v18 = objc_msgSend(v17, "sourceName");
  if (v18)
  {
    v19 = v18;
    v20 = static String._unconditionallyBridgeFromObjectiveC(_:)(v18);
    v15 = v21;

  }
  else
  {
    v20 = 0;
  }
  v22._countAndFlagsBits = v20;
  v22._object = v15;
  LocalizedStringKey.StringInterpolation.appendInterpolation(_:)(v22);
  swift_bridgeObjectRelease(v15);
  v23._countAndFlagsBits = 8236;
  v23._object = (void *)0xE200000000000000;
  LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v23);
  v24 = objc_msgSend(v17, "title");
  if (v24)
  {
    v25 = v24;
    v26 = static String._unconditionallyBridgeFromObjectiveC(_:)(v24);
    v28 = v27;

  }
  else
  {
    v26 = 0;
    v28 = (void *)0xE000000000000000;
  }
  v29._countAndFlagsBits = v26;
  v29._object = v28;
  LocalizedStringKey.StringInterpolation.appendInterpolation(_:)(v29);
  swift_bridgeObjectRelease(v28);
  v30._countAndFlagsBits = 0;
  v30._object = (void *)0xE000000000000000;
  LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v30);
  v31 = LocalizedStringKey.init(stringInterpolation:)(v6);
  v32 = Text.init(_:tableName:bundle:comment:)(v31);
  v34 = v33;
  v36 = v35;
  v38 = v37 & 1;
  v39 = sub_10002CE94(&qword_1000BA810, &qword_1000BA7F8, (uint64_t)&protocol conformance descriptor for VStack<A>);
  View.accessibility(label:)(v32, v34, v38, v36, v7, v39);
  sub_1000249D8(v32, v34, v38);
  swift_bridgeObjectRelease(v36);
  sub_10002CCF4((uint64_t)v9, &qword_1000BA7F8);
  return sub_10002CB18((uint64_t)v13, a1, &qword_1000BA800);
}

uint64_t sub_10003921C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  __int128 v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  unsigned __int8 v46;
  uint64_t v47;
  unsigned __int8 v48;
  uint64_t v49;
  uint64_t v50;
  _OWORD v51[3];
  uint64_t v52;
  char v53;
  uint64_t v54;
  char v55;
  uint64_t v56;
  uint64_t v57;

  v4 = sub_10001B520(&qword_1000BA818);
  __chkstk_darwin(v4);
  v6 = (char *)&v38 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_10001B520(&qword_1000BA820);
  v8 = __chkstk_darwin(v7);
  v10 = (char *)&v38 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v12 = (char *)&v38 - v11;
  v13 = type metadata accessor for HeadlineCell(0);
  v14 = a1 + *(int *)(v13 + 40);
  v15 = *(_QWORD *)(v14 + 96);
  v16 = static Alignment.center.getter(v13);
  v18 = _FrameLayout.init(width:height:alignment:)(&v45, 0, 1, v15, 0, v16, v17);
  v44 = v45;
  v43 = v46;
  v42 = v47;
  v41 = v48;
  v40 = v49;
  v39 = v50;
  *(_QWORD *)v6 = static VerticalAlignment.top.getter(v18);
  *((_QWORD *)v6 + 1) = 0;
  v6[16] = 1;
  v19 = sub_10001B520(&qword_1000BA828);
  v20 = sub_100039514(a1, (uint64_t)&v6[*(int *)(v19 + 44)]);
  v21 = *(_QWORD *)(v14 + 8);
  v22 = static Alignment.center.getter(v20);
  _FrameLayout.init(width:height:alignment:)(v51, 0, 1, v21, 0, v22, v23);
  sub_10002CCB0((uint64_t)v6, (uint64_t)v10, &qword_1000BA818);
  v24 = &v10[*(int *)(v7 + 36)];
  v25 = v51[1];
  *(_OWORD *)v24 = v51[0];
  *((_OWORD *)v24 + 1) = v25;
  *((_OWORD *)v24 + 2) = v51[2];
  sub_10002CCF4((uint64_t)v6, &qword_1000BA818);
  v26 = sub_10002CB18((uint64_t)v10, (uint64_t)v12, &qword_1000BA820);
  v27 = *(_QWORD *)(v14 + 96);
  v28 = static Alignment.center.getter(v26);
  _FrameLayout.init(width:height:alignment:)(&v52, 0, 1, v27, 0, v28, v29);
  v30 = v52;
  LOBYTE(v7) = v53;
  v31 = v54;
  LOBYTE(v15) = v55;
  v32 = v56;
  v38 = v57;
  sub_10002CCB0((uint64_t)v12, (uint64_t)v10, &qword_1000BA820);
  *(_QWORD *)a2 = 0;
  *(_BYTE *)(a2 + 8) = 1;
  *(_QWORD *)(a2 + 16) = v44;
  *(_BYTE *)(a2 + 24) = v43;
  *(_QWORD *)(a2 + 32) = v42;
  *(_BYTE *)(a2 + 40) = v41;
  v33 = v39;
  *(_QWORD *)(a2 + 48) = v40;
  *(_QWORD *)(a2 + 56) = v33;
  v34 = sub_10001B520(&qword_1000BA830);
  sub_10002CCB0((uint64_t)v10, a2 + *(int *)(v34 + 48), &qword_1000BA820);
  v35 = a2 + *(int *)(v34 + 64);
  *(_QWORD *)v35 = 0;
  *(_BYTE *)(v35 + 8) = 1;
  *(_QWORD *)(v35 + 16) = v30;
  *(_BYTE *)(v35 + 24) = v7;
  *(_QWORD *)(v35 + 32) = v31;
  *(_BYTE *)(v35 + 40) = v15;
  v36 = v38;
  *(_QWORD *)(v35 + 48) = v32;
  *(_QWORD *)(v35 + 56) = v36;
  sub_10002CCF4((uint64_t)v12, &qword_1000BA820);
  return sub_10002CCF4((uint64_t)v10, &qword_1000BA820);
}

uint64_t sub_100039514@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  int *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  int *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;

  v38 = a2;
  v3 = type metadata accessor for Item.Headline(0);
  __chkstk_darwin(v3);
  v5 = (char *)&v35 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = (int *)type metadata accessor for ThumbnailView(0);
  v7 = __chkstk_darwin(v6);
  v37 = (uint64_t)&v35 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v10 = (uint64_t *)((char *)&v35 - v9);
  v11 = sub_10001B520(&qword_1000BA838);
  v12 = __chkstk_darwin(v11);
  v36 = (uint64_t)&v35 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __chkstk_darwin(v12);
  v16 = (uint64_t *)((char *)&v35 - v15);
  *v16 = static Alignment.topLeading.getter(v14);
  v16[1] = v17;
  v18 = sub_10001B520(&qword_1000BA840);
  sub_1000397E0(a1, (_QWORD *)((char *)v16 + *(int *)(v18 + 44)));
  v19 = (int *)type metadata accessor for HeadlineCell(0);
  sub_10002A83C(a1 + v19[8], (uint64_t)v5, type metadata accessor for Item.Headline);
  v20 = a1 + v19[10];
  v21 = *(_QWORD *)(v20 + 8);
  v22 = *(_QWORD *)(v20 + 16);
  v23 = *(_QWORD *)(v20 + 24);
  v24 = *(_BYTE *)(v20 + 32);
  v25 = sub_10005D160();
  v26 = v19[12];
  LOBYTE(v19) = *(_BYTE *)(a1 + v19[11]);
  LOBYTE(a1) = *(_BYTE *)(a1 + v26);
  *v10 = swift_getKeyPath(&unk_10008B800);
  v27 = sub_10001B520(&qword_1000B9A20);
  swift_storeEnumTagMultiPayload(v10, v27, 0);
  sub_10002AC74((uint64_t)v5, (uint64_t)v10 + v6[5], type metadata accessor for Item.Headline);
  v28 = (char *)v10 + v6[6];
  *(_QWORD *)v28 = v21;
  *((_QWORD *)v28 + 1) = v22;
  *((_QWORD *)v28 + 2) = v23;
  v28[24] = v24;
  *(_QWORD *)((char *)v10 + v6[7]) = v25;
  *((_BYTE *)v10 + v6[8]) = (_BYTE)v19;
  *((_BYTE *)v10 + v6[9]) = a1;
  v29 = v36;
  sub_10002CCB0((uint64_t)v16, v36, &qword_1000BA838);
  v30 = v37;
  sub_10002A83C((uint64_t)v10, v37, type metadata accessor for ThumbnailView);
  v31 = v38;
  sub_10002CCB0(v29, v38, &qword_1000BA838);
  v32 = sub_10001B520(&qword_1000BA848);
  v33 = v31 + *(int *)(v32 + 48);
  *(_QWORD *)v33 = 0;
  *(_BYTE *)(v33 + 8) = 1;
  sub_10002A83C(v30, v31 + *(int *)(v32 + 64), type metadata accessor for ThumbnailView);
  sub_100027D34((uint64_t)v10, type metadata accessor for ThumbnailView);
  sub_10002CCF4((uint64_t)v16, &qword_1000BA838);
  sub_100027D34(v30, type metadata accessor for ThumbnailView);
  return sub_10002CCF4(v29, &qword_1000BA838);
}

double sub_1000397E0@<D0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int *v26;
  uint64_t (**v27)@<X0>(uint64_t@<X0>, uint64_t@<X8>);
  uint64_t (**v28)@<X0>(uint64_t@<X0>, uint64_t@<X8>);
  double result;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  v4 = sub_10001B520(&qword_1000B9D88);
  v5 = __chkstk_darwin(v4);
  v34 = (uint64_t)&v30 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v8 = (char *)&v30 - v7;
  v9 = type metadata accessor for HeadlineCell(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(_QWORD *)(v10 + 64);
  __chkstk_darwin(v9);
  v12 = (char *)&v30 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10003B1A8(&v35);
  v33 = v35;
  sub_10002A83C(a1, (uint64_t)v12, type metadata accessor for HeadlineCell);
  v13 = *(unsigned __int8 *)(v10 + 80);
  v14 = (v13 + 16) & ~v13;
  v15 = v14 + v11;
  v16 = v13 | 7;
  v17 = swift_allocObject(&unk_1000AC020, v15, v13 | 7);
  v18 = sub_10002AC74((uint64_t)v12, v17 + v14, type metadata accessor for HeadlineCell);
  v19 = static Alignment.center.getter(v18);
  v31 = v20;
  v32 = v19;
  sub_100039A84((uint64_t)v8);
  sub_10002A83C(a1, (uint64_t)v12, type metadata accessor for HeadlineCell);
  v21 = swift_allocObject(&unk_1000AC048, v15, v16);
  sub_10002AC74((uint64_t)v12, v21 + v14, type metadata accessor for HeadlineCell);
  sub_10002A83C(a1, (uint64_t)v12, type metadata accessor for HeadlineCell);
  v22 = swift_allocObject(&unk_1000AC070, v15, v16);
  sub_10002AC74((uint64_t)v12, v22 + v14, type metadata accessor for HeadlineCell);
  v23 = v34;
  sub_10002CCB0((uint64_t)v8, v34, &qword_1000B9D88);
  v24 = v33;
  *a2 = v33;
  a2[1] = (uint64_t)sub_10003B304;
  a2[2] = 0;
  a2[3] = (uint64_t)sub_10003BF14;
  v25 = v32;
  a2[4] = v17;
  a2[5] = v25;
  a2[6] = v31;
  v26 = (int *)sub_10001B520(&qword_1000BA850);
  sub_10002CCB0(v23, (uint64_t)a2 + v26[12], &qword_1000B9D88);
  v27 = (uint64_t (**)@<X0>(uint64_t@<X0>, uint64_t@<X8>))((char *)a2 + v26[16]);
  *v27 = sub_10003C188;
  v27[1] = (uint64_t (*)@<X0>(uint64_t@<X0>, uint64_t@<X8>))v21;
  v28 = (uint64_t (**)@<X0>(uint64_t@<X0>, uint64_t@<X8>))((char *)a2 + v26[20]);
  *v28 = sub_10003C1A0;
  v28[1] = (uint64_t (*)@<X0>(uint64_t@<X0>, uint64_t@<X8>))v22;
  swift_retain(v24);
  swift_retain(v17);
  swift_retain(v21);
  swift_retain(v22);
  sub_10002CCF4((uint64_t)v8, &qword_1000B9D88);
  swift_release(v21);
  swift_release(v22);
  sub_10002CCF4(v23, &qword_1000B9D88);
  swift_release(v17);
  *(_QWORD *)&result = swift_release(v24).n128_u64[0];
  return result;
}

uint64_t sub_100039A84@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  int *v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  void **v8;
  id v9;
  void *v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  id v14;
  void *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t KeyPath;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v31;

  v2 = v1;
  v4 = (int *)type metadata accessor for SourceView(0);
  __chkstk_darwin(v4);
  v6 = (char *)&v31 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for HeadlineCell(0);
  v8 = (void **)(v1 + *(int *)(v7 + 32));
  v9 = sub_100078AF8();
  v10 = *v8;
  if (v9)
  {
    objc_msgSend(v10, "sourceNameImageScale");
    v12 = v11;
    v13 = (uint64_t)v9;
  }
  else
  {
    v14 = objc_msgSend(v10, "sourceName");
    if (v14)
    {
      v15 = v14;
      v13 = static String._unconditionallyBridgeFromObjectiveC(_:)(v14);
      v12 = v16;

    }
    else
    {
      v13 = 0;
      v12 = 0xE000000000000000;
    }
  }
  v17 = v2 + *(int *)(v7 + 40);
  v18 = *(_QWORD *)(v17 + 80);
  v19 = *(_QWORD *)(v17 + 88);
  KeyPath = swift_getKeyPath(&unk_10008B860);
  v21 = swift_getKeyPath(&unk_10008B800);
  v22 = (uint64_t *)&v6[v4[5]];
  *v22 = v21;
  v23 = sub_10001B520(&qword_1000B9A20);
  v24 = swift_storeEnumTagMultiPayload(v22, v23, 0);
  *(_QWORD *)v6 = KeyPath;
  v6[8] = 0;
  v25 = &v6[v4[6]];
  *(_QWORD *)v25 = v13;
  *((_QWORD *)v25 + 1) = v12;
  v25[16] = v9 != 0;
  v26 = &v6[v4[7]];
  *(_QWORD *)v26 = v18;
  *((_QWORD *)v26 + 1) = v19;
  v27 = static Color.secondary.getter(v24);
  v28 = swift_getKeyPath(&unk_10008B888);
  sub_10002A83C((uint64_t)v6, a1, type metadata accessor for SourceView);
  v29 = (uint64_t *)(a1 + *(int *)(sub_10001B520(&qword_1000B9D88) + 36));
  *v29 = v28;
  v29[1] = v27;
  return sub_100027D34((uint64_t)v6, type metadata accessor for SourceView);
}

uint64_t sub_100039C4C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  double v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(_BYTE *, _BYTE *, uint64_t);
  _BYTE *v20;
  char v21;
  char v22;
  uint64_t v23;
  int *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void (*v29)(_BYTE *, uint64_t);
  uint64_t v30;
  __n128 v31;
  char v33;
  char v34;
  _BYTE v35[12];
  int v36;
  int v37;
  int v38;
  uint64_t v39;
  _BYTE *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  uint64_t v53;
  int v54;
  uint64_t v55;
  unsigned __int8 v56;
  unsigned __int8 v57;
  unsigned __int8 v58;
  char v59;
  char v60;
  char v61;
  char v62;
  uint64_t v63;
  unsigned __int8 v64;
  uint64_t v65;
  unsigned __int8 v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  char v70;
  uint64_t v71;
  char v72;
  uint64_t v73;
  char v74;
  uint64_t v75;
  unsigned __int8 v76;
  uint64_t v77;
  unsigned __int8 v78;
  uint64_t v79;
  unsigned __int8 v80;
  uint64_t v81;
  uint64_t v82;

  v4 = sub_10001B520(&qword_1000BA860);
  v39 = *(_QWORD *)(v4 - 8);
  v5 = v39;
  v6 = __chkstk_darwin(v4);
  v8 = &v35[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v6);
  v10 = &v35[-v9];
  v11 = type metadata accessor for HeadlineCell(0);
  v12 = *(double *)(a1 + *(int *)(v11 + 40) + 40) + *(double *)(a1 + *(int *)(v11 + 40) + 48);
  v13 = static Alignment.center.getter(v11);
  v15 = _FrameLayout.init(width:height:alignment:)(&v63, 0, 1, *(_QWORD *)&v12, 0, v13, v14);
  v55 = v63;
  v54 = v64;
  v53 = v65;
  v52 = v66;
  v51 = v67;
  v50 = v68;
  GeometryProxy.size.getter(v15);
  v40 = v10;
  sub_10003A078(0, 1, (uint64_t)v10);
  v16 = sub_10003A5C0(&v69);
  v49 = v69;
  v17 = static Alignment.center.getter(v16);
  v34 = 1;
  v33 = 1;
  _FlexFrameLayout.init(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)(&v69, 0, 1, 0, 1, 0, 1, 0, 0, 0, v33, 0, v34, v17, v18);
  v48 = v69;
  v47 = v71;
  v46 = v73;
  v45 = v75;
  v44 = v77;
  v43 = v79;
  v42 = v81;
  v41 = v82;
  v62 = 1;
  v61 = v70;
  v60 = v72;
  v59 = v74;
  v58 = v76;
  v57 = v78;
  v56 = v80;
  v19 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(v5 + 16);
  v20 = v8;
  v19(v8, v10, v4);
  LOBYTE(v10) = v62;
  v21 = v61;
  v22 = v60;
  LOBYTE(v8) = v59;
  v36 = v58;
  v37 = v57;
  v38 = v56;
  *(_QWORD *)a2 = 0;
  *(_BYTE *)(a2 + 8) = 1;
  *(_QWORD *)(a2 + 16) = v55;
  *(_BYTE *)(a2 + 24) = v54;
  *(_QWORD *)(a2 + 32) = v53;
  *(_BYTE *)(a2 + 40) = v52;
  v23 = v50;
  *(_QWORD *)(a2 + 48) = v51;
  *(_QWORD *)(a2 + 56) = v23;
  v24 = (int *)sub_10001B520(&qword_1000BA8A0);
  v25 = v4;
  v19((_BYTE *)(a2 + v24[12]), v20, v4);
  v26 = v49;
  *(_QWORD *)(a2 + v24[16]) = v49;
  v27 = a2 + v24[20];
  *(_QWORD *)v27 = 0;
  *(_BYTE *)(v27 + 8) = (_BYTE)v10;
  *(_QWORD *)(v27 + 16) = v48;
  *(_BYTE *)(v27 + 24) = v21;
  *(_QWORD *)(v27 + 32) = v47;
  *(_BYTE *)(v27 + 40) = v22;
  *(_QWORD *)(v27 + 48) = v46;
  *(_BYTE *)(v27 + 56) = (_BYTE)v8;
  *(_QWORD *)(v27 + 64) = v45;
  *(_BYTE *)(v27 + 72) = v36;
  *(_QWORD *)(v27 + 80) = v44;
  *(_BYTE *)(v27 + 88) = v37;
  *(_QWORD *)(v27 + 96) = v43;
  *(_BYTE *)(v27 + 104) = v38;
  v28 = v41;
  *(_QWORD *)(v27 + 112) = v42;
  *(_QWORD *)(v27 + 120) = v28;
  v29 = *(void (**)(_BYTE *, uint64_t))(v39 + 8);
  v30 = v26;
  swift_retain(v26);
  v29(v40, v25);
  v31 = swift_release(v30);
  return ((uint64_t (*)(_BYTE *, uint64_t, __n128))v29)(v20, v25, v31);
}

double sub_10003A078@<D0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  id v19;
  void *v20;
  uint64_t v21;
  void *v22;
  void *v23;
  Swift::String v24;
  uint64_t v25;
  uint64_t v26;
  id v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  uint64_t v36;
  id v37;
  void *v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char v47;
  char v48;
  uint64_t v49;
  uint64_t v50;
  __n128 v51;
  char v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char v57;
  char v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  char v66;
  void (*v67)(char *, uint64_t);
  uint64_t v68;
  char v69;
  uint64_t KeyPath;
  void *v71;
  id v72;
  void *v73;
  uint64_t v74;
  unint64_t v75;
  unint64_t v76;
  char *v77;
  id v78;
  id v79;
  uint64_t v80;
  unint64_t v81;
  __n128 v82;
  double result;
  uint64_t v84;
  uint64_t v85;
  char *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  int v90;
  uint64_t v91;
  char *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  char v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  char v103;
  uint64_t v104;
  _QWORD v105[3];

  v90 = a2;
  v89 = a1;
  v94 = a3;
  v95 = type metadata accessor for Locale.Language(0);
  v93 = *(_QWORD *)(v95 - 8);
  __chkstk_darwin(v95);
  v92 = (char *)&v84 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v88 = type metadata accessor for RedactionReasons(0);
  v87 = *(_QWORD *)(v88 - 8);
  v5 = __chkstk_darwin(v88);
  v86 = (char *)&v84 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v8 = (char *)&v84 - v7;
  v9 = type metadata accessor for HeadlineCell(0);
  v96 = Font.init(_:)(*(id *)(v3 + *(int *)(v9 + 40)));
  v10 = sub_10001B520(&qword_1000B9980);
  v11 = swift_allocObject(v10, 152, 7);
  *(_OWORD *)(v11 + 16) = xmmword_10008AC70;
  v12 = *(int *)(v9 + 32);
  v91 = v3;
  v85 = v12;
  v13 = *(void **)(v3 + v12);
  v14 = objc_msgSend(v13, "identifier");
  v15 = static String._unconditionallyBridgeFromObjectiveC(_:)(v14);
  v17 = v16;

  *(_QWORD *)(v11 + 56) = &type metadata for String;
  v18 = sub_10001FB34();
  *(_QWORD *)(v11 + 64) = v18;
  *(_QWORD *)(v11 + 32) = v15;
  *(_QWORD *)(v11 + 40) = v17;
  v97 = 0;
  v98 = 0xE000000000000000;
  v19 = objc_msgSend(v13, "title");
  if (v19)
  {
    v20 = v19;
    v21 = static String._unconditionallyBridgeFromObjectiveC(_:)(v19);
    v23 = v22;

  }
  else
  {
    v21 = 0;
    v23 = (void *)0xE000000000000000;
  }
  v24._countAndFlagsBits = v21;
  v24._object = v23;
  String.append(_:)(v24);
  swift_bridgeObjectRelease(v23);
  v25 = v97;
  v26 = v98;
  *(_QWORD *)(v11 + 96) = &type metadata for String;
  *(_QWORD *)(v11 + 104) = v18;
  *(_QWORD *)(v11 + 72) = v25;
  *(_QWORD *)(v11 + 80) = v26;
  v97 = 0;
  v98 = 0xE000000000000000;
  v27 = objc_msgSend(v13, "language");
  if (v27)
  {
    v28 = v27;
    v29 = static String._unconditionallyBridgeFromObjectiveC(_:)(v27);
    v31 = v30;

  }
  else
  {
    v29 = 0;
    v31 = 0;
  }
  v105[0] = v29;
  v105[1] = v31;
  v32 = sub_10001B520(&qword_1000BBDD0);
  _print_unlocked<A, B>(_:_:)(v105, &v97, v32, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
  swift_bridgeObjectRelease(v31);
  v33 = v97;
  v34 = v98;
  *(_QWORD *)(v11 + 136) = &type metadata for String;
  *(_QWORD *)(v11 + 144) = v18;
  *(_QWORD *)(v11 + 112) = v33;
  *(_QWORD *)(v11 + 120) = v34;
  sub_10002D800();
  v35 = (void *)static OS_os_log.default.getter();
  v36 = static os_log_type_t.default.getter();
  os_log(_:dso:log:type:_:)("creating titleView for headline with identifier: %@, with title: %@, with language: %@", 86, 2, &_mh_execute_header, v35, v36, v11);
  swift_bridgeObjectRelease(v11);

  v37 = objc_msgSend(v13, "title");
  if (v37)
  {
    v38 = v37;
    v39 = static String._unconditionallyBridgeFromObjectiveC(_:)(v37);
    v41 = v40;

  }
  else
  {
    v39 = 0;
    v41 = 0xE000000000000000;
  }
  v42 = v96;
  v43 = swift_retain(v96);
  v44 = Text.font(_:)(v43, v39, v41, 0, _swiftEmptyArrayStorage);
  v46 = v45;
  v48 = v47;
  v50 = v49;
  swift_bridgeObjectRelease(v41);
  v51 = swift_release(v42);
  v52 = v48 & 1;
  v53 = static Color.primary.getter(v51);
  v54 = Text.foregroundColor(_:)(v53, v44, v46, v48 & 1, v50);
  v56 = v55;
  v58 = v57;
  v60 = v59;
  swift_release(v53);
  sub_1000249D8(v44, v46, v52);
  swift_bridgeObjectRelease(v50);
  v61 = v91;
  v62 = sub_10002A3C4(v8);
  v63 = v86;
  static RedactionReasons.placeholder.getter(v62);
  v64 = sub_10001C96C(&qword_1000B9B00, (uint64_t (*)(uint64_t))&type metadata accessor for RedactionReasons, (uint64_t)&protocol conformance descriptor for RedactionReasons);
  v65 = v88;
  v66 = dispatch thunk of SetAlgebra.isSuperset(of:)(v63, v88, v64);
  v67 = *(void (**)(char *, uint64_t))(v87 + 8);
  v67(v63, v65);
  v67(v8, v65);
  if ((v66 & 1) != 0)
    v68 = 3;
  else
    v68 = v89;
  v69 = v90 & ~v66;
  KeyPath = swift_getKeyPath(&unk_10008B830);
  v97 = v54;
  v98 = v56;
  v99 = v58 & 1;
  v100 = v60;
  v101 = KeyPath;
  v102 = v68;
  v103 = v69 & 1;
  v104 = 0x4059000000000000;
  v71 = *(void **)(v61 + v85);
  v72 = objc_msgSend(v71, "language");
  if (v72)
  {
    v73 = v72;
    v74 = static String._unconditionallyBridgeFromObjectiveC(_:)(v72);
    v76 = v75;

  }
  else
  {
    v76 = 0xE200000000000000;
    v74 = 28261;
  }
  v77 = v92;
  Locale.Language.init(identifier:)(v74, v76);
  v78 = objc_msgSend(v71, "language");
  v79 = v78;
  if (v78)

  v80 = sub_10001B520(&qword_1000BA878);
  v81 = sub_10003C280();
  View.typesettingLanguage(_:isEnabled:)(v77, v79 != 0, v80, v81);
  v82 = swift_release(v96);
  (*(void (**)(char *, uint64_t, __n128))(v93 + 8))(v77, v95, v82);
  sub_1000249D8(v97, v98, v99);
  swift_bridgeObjectRelease(v100);
  *(_QWORD *)&result = swift_release(v101).n128_u64[0];
  return result;
}

uint64_t sub_10003A5C0@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  int *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  id v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  __int128 *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  double v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  void *v23;
  void *v24;
  id v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  uint64_t v36;
  char v37;
  uint64_t v38;
  char v39;
  __int128 v40;
  __int128 v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t result;
  __int128 v46;
  char v47;
  __int128 v48;
  char v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  __int128 v54;
  char v55;
  __int128 v56;
  double v57;

  v2 = v1;
  v4 = (int *)type metadata accessor for HeadlineCell(0);
  v5 = __chkstk_darwin(v4);
  v7 = (char *)&v46 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *(int *)(v5 + 32);
  v9 = objc_msgSend(*(id *)(v2 + v8), "storyType");
  if (!v9)
  {
    sub_10002A83C(v2, (uint64_t)v7, type metadata accessor for HeadlineCell);
LABEL_5:
    v13 = objc_msgSend(*(id *)&v7[v4[8]], "isBundlePaid");
    v14 = (__int128 *)sub_100027D34((uint64_t)v7, type metadata accessor for HeadlineCell);
    if (!v13)
      goto LABEL_7;
    goto LABEL_6;
  }
  v10 = v9;
  static String._unconditionallyBridgeFromObjectiveC(_:)(v9);
  v12 = v11;

  swift_bridgeObjectRelease(v12);
  sub_10002A83C(v2, (uint64_t)v7, type metadata accessor for HeadlineCell);
  if (!v12)
    goto LABEL_5;
  sub_100027D34((uint64_t)v7, type metadata accessor for HeadlineCell);
LABEL_6:
  v15 = (uint64_t *)(v2 + v4[7]);
  v16 = *v15;
  v17 = v15[1];
  *(_QWORD *)&v46 = v16;
  *((_QWORD *)&v46 + 1) = v17;
  sub_10001B520(&qword_1000BA870);
  State.wrappedValue.getter(&v57);
  v18 = v57;
  v19 = (uint64_t *)(v2 + v4[6]);
  v20 = *v19;
  v21 = v19[1];
  *(_QWORD *)&v46 = v20;
  *((_QWORD *)&v46 + 1) = v21;
  v14 = (__int128 *)State.wrappedValue.getter(&v57);
  if (v57 <= v18)
  {
    v24 = *(void **)(v2 + v8);
    v25 = objc_msgSend(v24, "storyType", v57);
    if (v25)
    {
      v26 = v25;
      v27 = static String._unconditionallyBridgeFromObjectiveC(_:)(v25);
      v29 = v28;

      v30 = Font.init(_:)(*(id *)(v2 + v4[10] + 64));
      v31 = static HorizontalAlignment.center.getter();
      sub_10003AC04(v27, v29, v30, v2, (uint64_t)&v46);
      swift_bridgeObjectRelease(v29);
      swift_release(v30);
      v32 = v47;
      v34 = *((_QWORD *)&v48 + 1);
      v33 = v48;
      v35 = v49;
      v36 = v50;
      v37 = v51;
      v38 = v52;
      v39 = v53;
      v40 = v46;
      v41 = v54;
      *(_QWORD *)&v46 = v31;
    }
    else
    {
      v14 = (__int128 *)objc_msgSend(v24, "isBundlePaid");
      if (!(_DWORD)v14)
        goto LABEL_7;
      v42 = Font.init(_:)(*(id *)(v2 + v4[10] + 64));
      v43 = static HorizontalAlignment.center.getter();
      sub_10003AECC(0x654EAF80E2BFA3EFLL, 0xAB000000002B7377, v42, v2, (uint64_t)&v46);
      swift_release(v42);
      v32 = v47;
      v34 = *((_QWORD *)&v48 + 1);
      v33 = v48;
      v35 = v49;
      v36 = v50;
      v37 = v51;
      v38 = v52;
      v39 = v53;
      v40 = v46;
      v41 = v54;
      *(_QWORD *)&v46 = v43;
    }
    *((_QWORD *)&v46 + 1) = 0;
    v47 = 1;
    v48 = v40;
    v49 = v32;
    v50 = v33;
    v51 = v34;
    LOBYTE(v52) = v35;
    v53 = v36;
    LOBYTE(v54) = v37;
    *((_QWORD *)&v54 + 1) = v38;
    v55 = v39;
    v56 = v41;
    v44 = sub_10001B520(&qword_1000BA8A8);
    v23 = (void *)sub_10002CE94(&qword_1000BA8B0, &qword_1000BA8A8, (uint64_t)&protocol conformance descriptor for VStack<A>);
    v14 = &v46;
    v22 = (void *)v44;
    goto LABEL_13;
  }
LABEL_7:
  v22 = &type metadata for EmptyView;
  v23 = &protocol witness table for EmptyView;
LABEL_13:
  result = AnyView.init<A>(_:)(v14, v22, v23);
  *a1 = result;
  return result;
}

uint64_t sub_10003A904@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t (*a4)(uint64_t, uint64_t)@<X3>, uint64_t a5@<X8>)
{
  *(_QWORD *)a5 = static HorizontalAlignment.leading.getter();
  *(_QWORD *)(a5 + 8) = 0;
  *(_BYTE *)(a5 + 16) = 0;
  sub_10001B520(a3);
  return a4(a2, a1);
}

uint64_t sub_10003A968@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  double v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  double v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  void (*v27)(char *, char *, uint64_t);
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  void (*v32)(char *, uint64_t);
  __n128 v33;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  unsigned __int8 v46;
  uint64_t v47;
  unsigned __int8 v48;
  uint64_t v49;
  uint64_t v50;

  v4 = type metadata accessor for HeadlineCell(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(_QWORD *)(v5 + 64);
  __chkstk_darwin(v4);
  v7 = sub_10001B520(&qword_1000BA860);
  v44 = *(_QWORD *)(v7 - 8);
  v8 = __chkstk_darwin(v7);
  v43 = (char *)&v35 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __chkstk_darwin(v8);
  v12 = (char *)&v35 - v11;
  v13 = *(double *)(a1 + *(int *)(v4 + 40) + 40) + *(double *)(a1 + *(int *)(v4 + 40) + 48);
  v14 = static Alignment.center.getter(v10);
  v16 = _FrameLayout.init(width:height:alignment:)(&v45, 0, 1, *(_QWORD *)&v13, 0, v14, v15);
  v42 = v45;
  v41 = v46;
  v40 = v47;
  v39 = v48;
  v37 = v50;
  v38 = v49;
  GeometryProxy.size.getter(v16);
  v17 = sub_10003A078(2, 0, (uint64_t)v12);
  v18 = static Color.green.getter(v17);
  sub_10002A83C(a1, (uint64_t)&v35 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), type metadata accessor for HeadlineCell);
  v19 = *(unsigned __int8 *)(v5 + 80);
  v20 = (v19 + 16) & ~v19;
  v21 = swift_allocObject(&unk_1000AC098, v20 + v6, v19 | 7);
  v22 = sub_10002AC74((uint64_t)&v35 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), v21 + v20, type metadata accessor for HeadlineCell);
  v36 = static Alignment.center.getter(v22);
  v24 = v23;
  v26 = v43;
  v25 = v44;
  v27 = *(void (**)(char *, char *, uint64_t))(v44 + 16);
  v27(v43, v12, v7);
  *(_QWORD *)a2 = 0;
  *(_BYTE *)(a2 + 8) = 1;
  *(_QWORD *)(a2 + 16) = v42;
  *(_BYTE *)(a2 + 24) = v41;
  *(_QWORD *)(a2 + 32) = v40;
  *(_BYTE *)(a2 + 40) = v39;
  v28 = v37;
  *(_QWORD *)(a2 + 48) = v38;
  *(_QWORD *)(a2 + 56) = v28;
  v29 = sub_10001B520(&qword_1000BA868);
  v27((char *)(a2 + *(int *)(v29 + 48)), v26, v7);
  v30 = (uint64_t *)(a2 + *(int *)(v29 + 64));
  *v30 = v18;
  v30[1] = (uint64_t)sub_10003B304;
  v30[2] = 0;
  v30[3] = (uint64_t)sub_10003C220;
  v31 = v36;
  v30[4] = v21;
  v30[5] = v31;
  v30[6] = v24;
  v32 = *(void (**)(char *, uint64_t))(v25 + 8);
  swift_retain(v18);
  swift_retain(v21);
  v32(v12, v7);
  swift_release(v21);
  v33 = swift_release(v18);
  return ((uint64_t (*)(char *, uint64_t, __n128))v32)(v26, v7, v33);
}

uint64_t sub_10003AC04@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  _QWORD *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void (*v31)(char *, uint64_t);
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char v42;
  char v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char v48;
  uint64_t v49;
  char v50;
  uint64_t v52;
  int v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char v59;
  __int128 v60;

  v52 = a4;
  v9 = type metadata accessor for WidgetRenderingMode(0);
  v54 = *(_QWORD *)(v9 - 8);
  v10 = __chkstk_darwin(v9);
  v12 = (char *)&v52 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v14 = (uint64_t *)((char *)&v52 - v13);
  v56 = a1;
  v57 = a2;
  v15 = sub_10002ACB8();
  v56 = StringProtocol.localizedUppercase.getter(&type metadata for String, v15);
  v57 = v16;
  v17 = Text.init<A>(_:)(&v56, &type metadata for String, v15);
  v19 = v18;
  v21 = v20;
  v23 = v22 & 1;
  v24 = Text.font(_:)(a3, v17, v18, v23, v20);
  v26 = v25;
  v53 = v27;
  v55 = v28;
  sub_1000249D8(v17, v19, v23);
  swift_bridgeObjectRelease(v21);
  type metadata accessor for HeadlineCell(0);
  v29 = sub_10002A1BC(v14);
  static WidgetRenderingMode.accented.getter(v29);
  v30 = sub_10001C96C(&qword_1000BA8B8, (uint64_t (*)(uint64_t))&type metadata accessor for WidgetRenderingMode, (uint64_t)&protocol conformance descriptor for WidgetRenderingMode);
  LOBYTE(v17) = dispatch thunk of static Equatable.== infix(_:_:)(v14, v12, v9, v30);
  v31 = *(void (**)(char *, uint64_t))(v54 + 8);
  v31(v12, v9);
  v32 = ((uint64_t (*)(_QWORD *, uint64_t))v31)(v14, v9);
  if ((v17 & 1) != 0)
    v33 = static Color.secondary.getter(v32);
  else
    v33 = sub_100078ED4();
  v34 = v33;
  v35 = v53 & 1;
  v56 = v33;
  v36 = v55;
  v37 = Text.foregroundStyle<A>(_:)(&v56, v24, v26, v53 & 1, v55, &type metadata for Color, &protocol witness table for Color);
  v39 = v38;
  v41 = v40;
  v43 = v42 & 1;
  sub_1000249D8(v24, v26, v35);
  swift_release(v34);
  v44 = swift_bridgeObjectRelease(v36);
  v45 = static Alignment.center.getter(v44);
  _FrameLayout.init(width:height:alignment:)(&v56, 0, 1, 0, 0, v45, v46);
  v47 = v56;
  v48 = v57;
  v49 = v58;
  v50 = v59;
  *(_QWORD *)a5 = v37;
  *(_QWORD *)(a5 + 8) = v39;
  *(_BYTE *)(a5 + 16) = v43;
  *(_QWORD *)(a5 + 24) = v41;
  *(_QWORD *)(a5 + 32) = 0;
  *(_BYTE *)(a5 + 40) = 1;
  *(_QWORD *)(a5 + 48) = v47;
  *(_BYTE *)(a5 + 56) = v48;
  *(_QWORD *)(a5 + 64) = v49;
  *(_BYTE *)(a5 + 72) = v50;
  *(_OWORD *)(a5 + 80) = v60;
  sub_100024770(v37, v39, v43);
  swift_bridgeObjectRetain(v41);
  sub_1000249D8(v37, v39, v43);
  return swift_bridgeObjectRelease(v41);
}

uint64_t sub_10003AECC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  _QWORD *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void (*v31)(char *, uint64_t);
  uint64_t v32;
  uint64_t v33;
  void *v34;
  uint64_t v35;
  char v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  char v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char v49;
  uint64_t v50;
  char v51;
  uint64_t v53;
  int v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char v60;
  __int128 v61;

  v53 = a4;
  v9 = type metadata accessor for WidgetRenderingMode(0);
  v55 = *(_QWORD *)(v9 - 8);
  v10 = __chkstk_darwin(v9);
  v12 = (char *)&v53 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v14 = (uint64_t *)((char *)&v53 - v13);
  v57 = a1;
  v58 = a2;
  v15 = sub_10002ACB8();
  v57 = StringProtocol.localizedCapitalized.getter(&type metadata for String, v15);
  v58 = v16;
  v17 = Text.init<A>(_:)(&v57, &type metadata for String, v15);
  v19 = v18;
  v21 = v20;
  v23 = v22 & 1;
  v24 = Text.font(_:)(a3, v17, v18, v23, v20);
  v26 = v25;
  v54 = v27;
  v56 = v28;
  sub_1000249D8(v17, v19, v23);
  swift_bridgeObjectRelease(v21);
  type metadata accessor for HeadlineCell(0);
  v29 = sub_10002A1BC(v14);
  static WidgetRenderingMode.accented.getter(v29);
  v30 = sub_10001C96C(&qword_1000BA8B8, (uint64_t (*)(uint64_t))&type metadata accessor for WidgetRenderingMode, (uint64_t)&protocol conformance descriptor for WidgetRenderingMode);
  LOBYTE(v17) = dispatch thunk of static Equatable.== infix(_:_:)(v14, v12, v9, v30);
  v31 = *(void (**)(char *, uint64_t))(v55 + 8);
  v31(v12, v9);
  v32 = ((uint64_t (*)(_QWORD *, uint64_t))v31)(v14, v9);
  if ((v17 & 1) != 0)
  {
    v33 = static Color.secondary.getter(v32);
  }
  else
  {
    v34 = (void *)objc_opt_self(UIColor);
    v33 = Color.init(_:)(objc_msgSend(v34, "systemPinkColor", v53));
  }
  v35 = v33;
  v36 = v54 & 1;
  v57 = v33;
  v37 = v56;
  v38 = Text.foregroundStyle<A>(_:)(&v57, v24, v26, v54 & 1, v56, &type metadata for Color, &protocol witness table for Color);
  v40 = v39;
  v42 = v41;
  v44 = v43 & 1;
  sub_1000249D8(v24, v26, v36);
  swift_release(v35);
  v45 = swift_bridgeObjectRelease(v37);
  v46 = static Alignment.center.getter(v45);
  _FrameLayout.init(width:height:alignment:)(&v57, 0, 1, 0, 0, v46, v47);
  v48 = v57;
  v49 = v58;
  v50 = v59;
  v51 = v60;
  *(_QWORD *)a5 = v38;
  *(_QWORD *)(a5 + 8) = v40;
  *(_BYTE *)(a5 + 16) = v44;
  *(_QWORD *)(a5 + 24) = v42;
  *(_QWORD *)(a5 + 32) = 0;
  *(_BYTE *)(a5 + 40) = 1;
  *(_QWORD *)(a5 + 48) = v48;
  *(_BYTE *)(a5 + 56) = v49;
  *(_QWORD *)(a5 + 64) = v50;
  *(_BYTE *)(a5 + 72) = v51;
  *(_OWORD *)(a5 + 80) = v61;
  sub_100024770(v38, v40, v44);
  swift_bridgeObjectRetain(v42);
  sub_1000249D8(v38, v40, v44);
  return swift_bridgeObjectRelease(v42);
}

uint64_t sub_10003B1A8@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  __int128 v8;
  char v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  char v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t result;
  __int128 v19;
  char v20;
  __int128 v21;
  char v22;
  __int128 v23;
  uint64_t v24;
  uint64_t v25;
  __int128 v26;
  char v27;
  __int128 v28;

  v3 = type metadata accessor for HeadlineCell(0);
  v4 = objc_msgSend(*(id *)(v1 + *(int *)(v3 + 32)), "isBundlePaid");
  v5 = Font.init(_:)(*(id *)(v1 + *(int *)(v3 + 40) + 64));
  v6 = static HorizontalAlignment.center.getter();
  if (v4)
    sub_10003AECC(0x654EAF80E2BFA3EFLL, 0xAB000000002B7377, v5, v1, (uint64_t)&v19);
  else
    sub_10003AC04(65, 0xE100000000000000, v5, v1, (uint64_t)&v19);
  swift_release(v5);
  v7 = v20;
  v8 = v21;
  v9 = v22;
  v10 = v23;
  v11 = BYTE8(v23);
  v12 = v24;
  v13 = v25;
  v14 = v19;
  v15 = v26;
  v19 = (unint64_t)v6;
  v20 = 1;
  v21 = v14;
  v22 = v7;
  v23 = v8;
  LOBYTE(v24) = v9;
  v25 = v10;
  LOBYTE(v26) = v11;
  *((_QWORD *)&v26 + 1) = v12;
  v27 = v13;
  v28 = v15;
  v16 = sub_10001B520(&qword_1000BA8A8);
  v17 = sub_10002CE94(&qword_1000BA8B0, &qword_1000BA8A8, (uint64_t)&protocol conformance descriptor for VStack<A>);
  result = AnyView.init<A>(_:)(&v19, v16, v17);
  *a1 = result;
  return result;
}

uint64_t sub_10003B308(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v8[3];

  v2 = *a1;
  v3 = (uint64_t *)(a2 + *(int *)(type metadata accessor for HeadlineCell(0) + 24));
  v4 = *v3;
  v5 = v3[1];
  v8[0] = v2;
  v8[1] = v4;
  v8[2] = v5;
  v6 = sub_10001B520(&qword_1000BA870);
  return State.wrappedValue.setter(v8, v6);
}

uint64_t sub_10003B374@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;

  v2 = static Color.clear.getter();
  result = GeometryProxy.size.getter();
  *a1 = v2;
  a1[1] = v4;
  return result;
}

uint64_t sub_10003B3B0(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v8[3];

  v2 = *a1;
  v3 = (uint64_t *)(a2 + *(int *)(type metadata accessor for HeadlineCell(0) + 28));
  v4 = *v3;
  v5 = v3[1];
  v8[0] = v2;
  v8[1] = v4;
  v8[2] = v5;
  v6 = sub_10001B520(&qword_1000BA870);
  return State.wrappedValue.setter(v8, v6);
}

uint64_t type metadata accessor for ThumbnailView(uint64_t a1)
{
  return sub_10002ABF8(a1, qword_1000BA918, (uint64_t)&nominal type descriptor for ThumbnailView);
}

void sub_10003B434()
{
  qword_1000C0760 = 0;
}

double sub_10003B440@<D0>(_QWORD *a1@<X8>)
{
  return sub_10003B490(&qword_1000B8D08, (double *)&qword_1000C0760, (uint64_t)sub_10003B434, a1);
}

void sub_10003B468()
{
  qword_1000C0768 = 0;
}

double sub_10003B474@<D0>(_QWORD *a1@<X8>)
{
  return sub_10003B490(&qword_1000B8D10, (double *)&qword_1000C0768, (uint64_t)sub_10003B468, a1);
}

double sub_10003B490@<D0>(_QWORD *a1@<X2>, double *a2@<X3>, uint64_t a3@<X4>, _QWORD *a4@<X8>)
{
  double result;

  if (*a1 != -1)
    swift_once(a1, a3);
  result = *a2;
  *a4 = *(_QWORD *)a2;
  return result;
}

_QWORD *sub_10003B4D4(double *a1, _QWORD *(*a2)(double *__return_ptr))
{
  double v3;
  _QWORD *result;
  double v5;
  double v6;

  v3 = *a1;
  result = a2(&v6);
  v5 = v6;
  if (v3 > v6)
    v5 = v3;
  *a1 = v5;
  return result;
}

double sub_10003B520@<D0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  _OWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  char v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v25;
  uint64_t v26;
  double result;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  uint64_t v34;
  char v35;
  uint64_t v36;
  uint64_t v37;

  v30 = sub_10001B520(&qword_1000BA968);
  __chkstk_darwin(v30);
  v4 = (char *)&v28 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for RoundedRectangle(0);
  __chkstk_darwin(v5);
  v7 = (_OWORD *)((char *)&v28 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_10003B704(&v31);
  v8 = v31;
  v9 = type metadata accessor for ThumbnailView(0);
  v10 = *(_QWORD *)(v1 + *(int *)(v9 + 24));
  v11 = static Alignment.center.getter(v9);
  _FrameLayout.init(width:height:alignment:)(&v32, v10, 0, v10, 0, v11, v12);
  v13 = v32;
  v14 = v33;
  v15 = v34;
  v16 = v35;
  v28 = v37;
  v29 = v36;
  v17 = (char *)v7 + *(int *)(v5 + 20);
  v18 = enum case for RoundedCornerStyle.continuous(_:);
  v19 = type metadata accessor for RoundedCornerStyle(0);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 104))(v17, v18, v19);
  __asm { FMOV            V0.2D, #8.0 }
  *v7 = _Q0;
  sub_10002A83C((uint64_t)v7, (uint64_t)v4, (uint64_t (*)(_QWORD))&type metadata accessor for RoundedRectangle);
  *(_WORD *)&v4[*(int *)(v30 + 36)] = 256;
  v25 = sub_10001B520(&qword_1000BA970);
  sub_10002CCB0((uint64_t)v4, a1 + *(int *)(v25 + 36), &qword_1000BA968);
  *(_QWORD *)a1 = v8;
  *(_QWORD *)(a1 + 8) = v13;
  *(_BYTE *)(a1 + 16) = v14;
  *(_QWORD *)(a1 + 24) = v15;
  *(_BYTE *)(a1 + 32) = v16;
  v26 = v28;
  *(_QWORD *)(a1 + 40) = v29;
  *(_QWORD *)(a1 + 48) = v26;
  swift_retain(v8);
  sub_10002CCF4((uint64_t)v4, &qword_1000BA968);
  sub_100027D34((uint64_t)v7, (uint64_t (*)(_QWORD))&type metadata accessor for RoundedRectangle);
  *(_QWORD *)&result = swift_release(v8).n128_u64[0];
  return result;
}

uint64_t sub_10003B704@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  int *v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  unint64_t v16;
  char v17;
  uint64_t v18;
  void *v19;
  uint64_t *v20;
  ValueMetadata *v21;
  unint64_t v22;
  uint64_t result;
  uint64_t v24;
  __int128 v25;
  __int128 v26;
  unint64_t v27;
  char v28;

  v2 = v1;
  v4 = (int *)type metadata accessor for ThumbnailView(0);
  v5 = sub_1000789C8();
  if ((v5 & 1) != 0)
  {
    v10 = sub_10003BD18(v1);
    if ((v11 & 1) != 0)
    {
      *(_QWORD *)&v25 = *(_QWORD *)(v1 + v4[7]);
      v22 = sub_10003D260();
      swift_retain(v25);
      v21 = &type metadata for AudioIndicatorView;
      v20 = (uint64_t *)&v25;
      v19 = (void *)v22;
      goto LABEL_9;
    }
    v12 = static Alignment.center.getter(v10);
    v14 = v13;
    sub_10003BE68(v2, (uint64_t)&v25);
    v15 = v25;
    v16 = v26;
    v17 = BYTE8(v26);
    *(_QWORD *)&v25 = v12;
    *((_QWORD *)&v25 + 1) = v14;
    v26 = v15;
    v27 = v16;
    v28 = v17;
  }
  else
  {
    if (*(_BYTE *)(v1 + v4[9]) != 1)
    {
      sub_10003B890((uint64_t *)&v25);
      v24 = v25;
      v21 = (ValueMetadata *)&type metadata for AnyView;
      v19 = &protocol witness table for AnyView;
      v20 = &v24;
      goto LABEL_9;
    }
    v6 = static Alignment.center.getter(v5);
    v8 = v7;
    sub_10003B890((uint64_t *)&v26);
    v9 = *(_BYTE *)(v1 + v4[8]);
    *(_QWORD *)&v25 = v6;
    *((_QWORD *)&v25 + 1) = v8;
    *((_QWORD *)&v26 + 1) = 0xD000000000000017;
    v27 = 0x8000000100090EC0;
    v28 = v9;
  }
  v18 = sub_10001B520(&qword_1000BA980);
  v19 = (void *)sub_10002CE94(&qword_1000BA988, &qword_1000BA980, (uint64_t)&protocol conformance descriptor for ZStack<A>);
  v20 = (uint64_t *)&v25;
  v21 = (ValueMetadata *)v18;
LABEL_9:
  result = AnyView.init<A>(_:)(v20, v21, v19);
  *a1 = result;
  return result;
}

uint64_t sub_10003B890@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  void *v26;
  id v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  __n128 v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _OWORD *v47;
  __int128 v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t result;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  char *v57;
  char *v58;
  char *v59;
  char *v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t *v67;
  _OWORD v68[3];

  v67 = a1;
  v2 = sub_10001B520(&qword_1000BA990);
  __chkstk_darwin(v2);
  v59 = (char *)&v53 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v61 = type metadata accessor for Image.ResizingMode(0);
  v66 = *(_QWORD *)(v61 - 8);
  __chkstk_darwin(v61);
  v60 = (char *)&v53 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_10001B520(&qword_1000BA998);
  v64 = *(_QWORD *)(v5 - 8);
  v65 = v5;
  __chkstk_darwin(v5);
  v62 = (char *)&v53 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v63 = sub_10001B520(&qword_1000BA9A0);
  __chkstk_darwin(v63);
  v58 = (char *)&v53 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_10001B520(&qword_1000BA9A8);
  v9 = __chkstk_darwin(v8);
  v11 = (char *)&v53 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v13 = (char *)&v53 - v12;
  v14 = sub_10001B520(&qword_1000BA9B0);
  __chkstk_darwin(v14);
  v16 = (char *)&v53 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = type metadata accessor for ImageStoreKey(0);
  v18 = *(_QWORD *)(v17 - 8);
  __chkstk_darwin(v17);
  v20 = (char *)&v53 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = type metadata accessor for ThumbnailView(0);
  v22 = v1;
  sub_10007960C(v16);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48))(v16, 1, v17) == 1)
  {
    v23 = sub_10002CCF4((uint64_t)v16, &qword_1000BA9B0);
    v24 = v67;
LABEL_5:
    result = AnyView.init<A>(_:)(v23, &type metadata for EmptyView, &protocol witness table for EmptyView);
    v51 = result;
    goto LABEL_6;
  }
  v54 = v21;
  v55 = v8;
  v25 = v66;
  v56 = v11;
  v57 = v13;
  sub_10002AC74((uint64_t)v16, (uint64_t)v20, type metadata accessor for ImageStoreKey);
  v26 = sub_10006BB90((uint64_t)v20);
  v23 = sub_100027D34((uint64_t)v20, type metadata accessor for ImageStoreKey);
  v24 = v67;
  if (!v26)
    goto LABEL_5;
  v27 = v26;
  v28 = Image.init(uiImage:)(v27);
  v29 = v60;
  v30 = v61;
  (*(void (**)(char *, _QWORD, uint64_t))(v25 + 104))(v60, enum case for Image.ResizingMode.stretch(_:), v61);
  v31 = Image.resizable(capInsets:resizingMode:)(v29, v28, 0.0, 0.0, 0.0, 0.0);
  v32 = swift_release(v28);
  v33 = (*(uint64_t (**)(char *, uint64_t, __n128))(v25 + 8))(v29, v30, v32);
  v34 = (uint64_t)v59;
  static WidgetAccentedRenderingMode.fullColor.getter(v33);
  v35 = type metadata accessor for WidgetAccentedRenderingMode(0);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v35 - 8) + 56))(v34, 0, 1, v35);
  v36 = v62;
  Image.widgetAccentedRenderingMode(_:)(v34, v31);
  swift_release(v31);
  sub_10002CCF4(v34, &qword_1000BA990);
  v38 = v64;
  v37 = v65;
  v39 = (uint64_t)v58;
  (*(void (**)(char *, char *, uint64_t))(v64 + 16))(v58, v36, v65);
  v40 = v39 + *(int *)(v63 + 36);
  *(_QWORD *)v40 = 0;
  *(_WORD *)(v40 + 8) = 257;
  v41 = (*(uint64_t (**)(char *, uint64_t))(v38 + 8))(v36, v37);
  v42 = *(_QWORD *)(v22 + *(int *)(v54 + 24));
  v43 = static Alignment.center.getter(v41);
  _FrameLayout.init(width:height:alignment:)(v68, v42, 0, v42, 0, v43, v44);
  v45 = (uint64_t)v57;
  sub_10002CCB0(v39, (uint64_t)v57, &qword_1000BA9A0);
  v46 = v55;
  v47 = (_OWORD *)(v45 + *(int *)(v55 + 36));
  v48 = v68[1];
  *v47 = v68[0];
  v47[1] = v48;
  v47[2] = v68[2];
  sub_10002CCF4(v39, &qword_1000BA9A0);
  v49 = (uint64_t)v56;
  sub_10002CCB0(v45, (uint64_t)v56, &qword_1000BA9A8);
  v50 = sub_10003D2A4();
  v51 = AnyView.init<A>(_:)(v49, v46, v50);

  result = sub_10002CCF4(v45, &qword_1000BA9A8);
LABEL_6:
  *v24 = v51;
  return result;
}

uint64_t sub_10003BD18(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  void *v10;
  uint64_t v12;

  v2 = sub_10001B520(&qword_1000BA9B0);
  __chkstk_darwin(v2);
  v4 = (char *)&v12 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for ImageStoreKey(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v12 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for ThumbnailView(0);
  sub_10007960C(v4);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5) == 1)
  {
    sub_10002CCF4((uint64_t)v4, &qword_1000BA9B0);
  }
  else
  {
    sub_10002AC74((uint64_t)v4, (uint64_t)v8, type metadata accessor for ImageStoreKey);
    v10 = sub_10006BB90((uint64_t)v8);
    sub_100027D34((uint64_t)v8, type metadata accessor for ImageStoreKey);

    if (v10)
      return *(_QWORD *)(a1 + *(int *)(v9 + 24) + 8);
  }
  return 0;
}

void sub_10003BE68(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;

  sub_10003B890(&v11);
  v4 = v11;
  v5 = type metadata accessor for ThumbnailView(0);
  v6 = objc_msgSend(*(id *)(a1 + *(int *)(v5 + 20)), "identifier");
  v7 = static String._unconditionallyBridgeFromObjectiveC(_:)(v6);
  v9 = v8;

  v10 = *(_BYTE *)(a1 + *(int *)(v5 + 32));
  *(_QWORD *)a2 = v4;
  *(_QWORD *)(a2 + 8) = v7;
  *(_QWORD *)(a2 + 16) = v9;
  *(_BYTE *)(a2 + 24) = v10;
}

uint64_t sub_10003BF14(uint64_t a1)
{
  return sub_10003C22C(a1, (uint64_t (*)(uint64_t, uint64_t))sub_10003B308);
}

uint64_t sub_10003BF24()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int (*v17)(char *, uint64_t, uint64_t);
  id *v18;
  char *v19;
  int *v20;
  char *v21;
  id *v22;
  uint64_t v24;
  uint64_t v25;

  v1 = (int *)type metadata accessor for HeadlineCell(0);
  v2 = *((_QWORD *)v1 - 1);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  v6 = (_QWORD *)(v0 + v4);
  v7 = sub_10001B520(&qword_1000B9B20);
  v24 = v5;
  if (swift_getEnumCaseMultiPayload(v0 + v4, v7) == 1)
  {
    v8 = type metadata accessor for RedactionReasons(0);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v0 + v4, v8);
  }
  else
  {
    swift_release(*v6);
  }
  v9 = (_QWORD *)((char *)v6 + v1[5]);
  v10 = sub_10001B520(&qword_1000B9A20);
  v25 = v0;
  if (swift_getEnumCaseMultiPayload(v9, v10) == 1)
  {
    v11 = type metadata accessor for WidgetRenderingMode(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v11 - 8) + 8))(v9, v11);
  }
  else
  {
    swift_release(*v9);
  }
  swift_release(*(_QWORD *)((char *)v6 + v1[6] + 8));
  swift_release(*(_QWORD *)((char *)v6 + v1[7] + 8));
  v12 = (_QWORD *)((char *)v6 + v1[8]);
  swift_unknownObjectRelease(*v12);
  swift_release(v12[1]);
  v13 = type metadata accessor for Item.Headline(0);
  v14 = (char *)v12 + *(int *)(v13 + 24);
  v15 = type metadata accessor for URL(0);
  v16 = *(_QWORD *)(v15 - 8);
  v17 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48);
  if (!v17(v14, 1, v15))
    (*(void (**)(char *, uint64_t))(v16 + 8))(v14, v15);
  v18 = (id *)((char *)v12 + *(int *)(v13 + 28));
  if (v18[1])
  {

  }
  v19 = (char *)v6 + v1[9];

  swift_bridgeObjectRelease(*((_QWORD *)v19 + 1));
  swift_unknownObjectRelease(*((_QWORD *)v19 + 2));
  v20 = (int *)type metadata accessor for TodayContent(0);
  v21 = &v19[v20[8]];
  if (!v17(v21, 1, v15))
    (*(void (**)(char *, uint64_t))(v16 + 8))(v21, v15);
  swift_release(*(_QWORD *)&v19[v20[9]]);
  swift_bridgeObjectRelease(*(_QWORD *)&v19[v20[10] + 8]);
  swift_bridgeObjectRelease(*(_QWORD *)&v19[v20[11] + 8]);
  v22 = (id *)((char *)v6 + v1[10]);

  return swift_deallocObject(v25, v4 + v24, v3 | 7);
}

uint64_t sub_10003C188@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_10003C1B4(a1, &qword_1000BA898, (uint64_t (*)(uint64_t, uint64_t))sub_100039C4C, a2);
}

uint64_t sub_10003C1A0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_10003C1B4(a1, &qword_1000BA858, (uint64_t (*)(uint64_t, uint64_t))sub_10003A968, a2);
}

uint64_t sub_10003C1B4@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t (*a3)(uint64_t, uint64_t)@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t v9;

  v9 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for HeadlineCell(0) - 8) + 80);
  return sub_10003A904(a1, v4 + ((v9 + 16) & ~v9), a2, a3, a4);
}

uint64_t sub_10003C220(uint64_t a1)
{
  return sub_10003C22C(a1, (uint64_t (*)(uint64_t, uint64_t))sub_10003B3B0);
}

uint64_t sub_10003C22C(uint64_t a1, uint64_t (*a2)(uint64_t, uint64_t))
{
  uint64_t v2;
  uint64_t v4;

  v4 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for HeadlineCell(0) - 8) + 80);
  return a2(a1, v2 + ((v4 + 16) & ~v4));
}

unint64_t sub_10003C280()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000BA880;
  if (!qword_1000BA880)
  {
    v1 = sub_10001B560(&qword_1000BA878);
    sub_10002CE10();
    sub_10002CE94(&qword_1000BA888, &qword_1000BA890, (uint64_t)&protocol conformance descriptor for _TraitWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000BA880);
  }
  return result;
}

ValueMetadata *type metadata accessor for StoryTypeAvailableHeightPreferenceKey()
{
  return &type metadata for StoryTypeAvailableHeightPreferenceKey;
}

ValueMetadata *type metadata accessor for StoryTypeRequiredHeightPreferenceKey()
{
  return &type metadata for StoryTypeRequiredHeightPreferenceKey;
}

_QWORD *sub_10003C330(_QWORD *a1, _QWORD *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int (*v24)(char *, uint64_t, uint64_t);
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  char *v28;
  void *v29;
  void *v30;
  id v31;
  id v32;
  uint64_t v33;
  uint64_t v34;
  _OWORD *v35;
  _OWORD *v36;
  uint64_t v37;
  char *__dst;
  uint64_t v40;
  int *v41;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v12 = *a2;
    *a1 = *a2;
    a1 = (_QWORD *)(v12 + ((v5 + 16) & ~(unint64_t)v5));
  }
  else
  {
    v7 = sub_10001B520(&qword_1000B9A20);
    if (swift_getEnumCaseMultiPayload(a2, v7) == 1)
    {
      v8 = type metadata accessor for WidgetRenderingMode(0);
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(a1, a2, v8);
      v9 = a1;
      v10 = v7;
      v11 = 1;
    }
    else
    {
      v13 = *a2;
      *a1 = *a2;
      swift_retain(v13);
      v9 = a1;
      v10 = v7;
      v11 = 0;
    }
    swift_storeEnumTagMultiPayload(v9, v10, v11);
    v41 = a3;
    v14 = a3[5];
    v15 = (_QWORD *)((char *)a1 + v14);
    v16 = (char *)a2 + v14;
    v17 = *(_QWORD *)((char *)a2 + v14);
    v18 = *(_QWORD *)((char *)a2 + v14 + 8);
    *v15 = v17;
    v15[1] = v18;
    v19 = type metadata accessor for Item.Headline(0);
    v20 = *(int *)(v19 + 24);
    __dst = (char *)v15 + v20;
    v40 = v19;
    v21 = &v16[v20];
    v22 = type metadata accessor for URL(0);
    v23 = *(_QWORD *)(v22 - 8);
    v24 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v23 + 48);
    swift_unknownObjectRetain(v17);
    swift_retain(v18);
    if (v24(v21, 1, v22))
    {
      v25 = sub_10001B520(&qword_1000B93A0);
      memcpy(__dst, v21, *(_QWORD *)(*(_QWORD *)(v25 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v23 + 16))(__dst, v21, v22);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v23 + 56))(__dst, 0, 1, v22);
    }
    v26 = *(int *)(v40 + 28);
    v27 = (_QWORD *)((char *)v15 + v26);
    v28 = &v16[v26];
    v29 = (void *)*((_QWORD *)v28 + 1);
    if (v29)
    {
      v30 = *(void **)v28;
      *v27 = v30;
      v27[1] = v29;
      v31 = v30;
      v32 = v29;
    }
    else
    {
      *(_OWORD *)v27 = *(_OWORD *)v28;
    }
    v33 = v41[6];
    v34 = v41[7];
    v35 = (_OWORD *)((char *)a1 + v33);
    v36 = (_OWORD *)((char *)a2 + v33);
    *v35 = *v36;
    *(_OWORD *)((char *)v35 + 9) = *(_OWORD *)((char *)v36 + 9);
    v12 = *(_QWORD *)((char *)a2 + v34);
    *(_QWORD *)((char *)a1 + v34) = v12;
    v37 = v41[9];
    *((_BYTE *)a1 + v41[8]) = *((_BYTE *)a2 + v41[8]);
    *((_BYTE *)a1 + v37) = *((_BYTE *)a2 + v37);
  }
  swift_retain(v12);
  return a1;
}

double sub_10003C544(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  id *v11;
  double result;

  v4 = sub_10001B520(&qword_1000B9A20);
  if (swift_getEnumCaseMultiPayload(a1, v4) == 1)
  {
    v5 = type metadata accessor for WidgetRenderingMode(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(a1, v5);
  }
  else
  {
    swift_release(*a1);
  }
  v6 = (_QWORD *)((char *)a1 + *(int *)(a2 + 20));
  swift_unknownObjectRelease(*v6);
  swift_release(v6[1]);
  v7 = type metadata accessor for Item.Headline(0);
  v8 = (char *)v6 + *(int *)(v7 + 24);
  v9 = type metadata accessor for URL(0);
  v10 = *(_QWORD *)(v9 - 8);
  if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9))
    (*(void (**)(char *, uint64_t))(v10 + 8))(v8, v9);
  v11 = (id *)((char *)v6 + *(int *)(v7 + 28));
  if (v11[1])
  {

  }
  *(_QWORD *)&result = swift_release(*(_QWORD *)((char *)a1 + *(int *)(a2 + 28))).n128_u64[0];
  return result;
}

_QWORD *sub_10003C650(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int (*v22)(char *, uint64_t, uint64_t);
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  char *v26;
  void *v27;
  void *v28;
  id v29;
  id v30;
  uint64_t v31;
  uint64_t v32;
  _OWORD *v33;
  _OWORD *v34;
  uint64_t v35;
  uint64_t v36;
  char *__dst;
  uint64_t v39;
  int *v40;

  v6 = sub_10001B520(&qword_1000B9A20);
  if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
  {
    v7 = type metadata accessor for WidgetRenderingMode(0);
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = a1;
    v9 = v6;
    v10 = 1;
  }
  else
  {
    v11 = *a2;
    *a1 = *a2;
    swift_retain(v11);
    v8 = a1;
    v9 = v6;
    v10 = 0;
  }
  swift_storeEnumTagMultiPayload(v8, v9, v10);
  v40 = a3;
  v12 = a3[5];
  v13 = (_QWORD *)((char *)a1 + v12);
  v14 = (char *)a2 + v12;
  v15 = *(_QWORD *)((char *)a2 + v12);
  v16 = *(_QWORD *)((char *)a2 + v12 + 8);
  *v13 = v15;
  v13[1] = v16;
  v17 = type metadata accessor for Item.Headline(0);
  v18 = *(int *)(v17 + 24);
  __dst = (char *)v13 + v18;
  v39 = v17;
  v19 = &v14[v18];
  v20 = type metadata accessor for URL(0);
  v21 = *(_QWORD *)(v20 - 8);
  v22 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v21 + 48);
  swift_unknownObjectRetain(v15);
  swift_retain(v16);
  if (v22(v19, 1, v20))
  {
    v23 = sub_10001B520(&qword_1000B93A0);
    memcpy(__dst, v19, *(_QWORD *)(*(_QWORD *)(v23 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v21 + 16))(__dst, v19, v20);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v21 + 56))(__dst, 0, 1, v20);
  }
  v24 = *(int *)(v39 + 28);
  v25 = (_QWORD *)((char *)v13 + v24);
  v26 = &v14[v24];
  v27 = (void *)*((_QWORD *)v26 + 1);
  if (v27)
  {
    v28 = *(void **)v26;
    *v25 = v28;
    v25[1] = v27;
    v29 = v28;
    v30 = v27;
  }
  else
  {
    *(_OWORD *)v25 = *(_OWORD *)v26;
  }
  v31 = v40[6];
  v32 = v40[7];
  v33 = (_OWORD *)((char *)a1 + v31);
  v34 = (_OWORD *)((char *)a2 + v31);
  *v33 = *v34;
  *(_OWORD *)((char *)v33 + 9) = *(_OWORD *)((char *)v34 + 9);
  v35 = *(_QWORD *)((char *)a2 + v32);
  *(_QWORD *)((char *)a1 + v32) = v35;
  v36 = v40[9];
  *((_BYTE *)a1 + v40[8]) = *((_BYTE *)a2 + v40[8]);
  *((_BYTE *)a1 + v36) = *((_BYTE *)a2 + v36);
  swift_retain(v35);
  return a1;
}

_QWORD *sub_10003C840(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t (*v24)(char *, uint64_t, uint64_t);
  int v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  id v33;
  void *v34;
  id v35;
  void *v36;
  void *v37;
  id v38;
  void *v39;
  void *v40;
  id v41;
  id v42;
  uint64_t v43;
  char *v44;
  char *v45;
  __int128 v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v51;
  int *v52;

  if (a1 != a2)
  {
    sub_10002CCF4((uint64_t)a1, &qword_1000B9A20);
    v6 = sub_10001B520(&qword_1000B9A20);
    if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
    {
      v7 = type metadata accessor for WidgetRenderingMode(0);
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
      v8 = a1;
      v9 = v6;
      v10 = 1;
    }
    else
    {
      v11 = *a2;
      *a1 = *a2;
      swift_retain(v11);
      v8 = a1;
      v9 = v6;
      v10 = 0;
    }
    swift_storeEnumTagMultiPayload(v8, v9, v10);
  }
  v52 = a3;
  v12 = a3[5];
  v13 = (char *)a1 + v12;
  v14 = (char *)a2 + v12;
  v15 = *(_QWORD *)((char *)a2 + v12);
  v16 = *(_QWORD *)((char *)a1 + v12);
  *(_QWORD *)((char *)a1 + v12) = v15;
  swift_unknownObjectRetain(v15);
  swift_unknownObjectRelease(v16);
  v17 = *((_QWORD *)v14 + 1);
  v18 = *((_QWORD *)v13 + 1);
  *((_QWORD *)v13 + 1) = v17;
  swift_retain(v17);
  swift_release(v18);
  v51 = type metadata accessor for Item.Headline(0);
  v19 = *(int *)(v51 + 24);
  v20 = &v13[v19];
  v21 = &v14[v19];
  v22 = type metadata accessor for URL(0);
  v23 = *(_QWORD *)(v22 - 8);
  v24 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v23 + 48);
  v25 = v24(v20, 1, v22);
  v26 = v24(v21, 1, v22);
  if (v25)
  {
    if (!v26)
    {
      (*(void (**)(char *, char *, uint64_t))(v23 + 16))(v20, v21, v22);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v23 + 56))(v20, 0, 1, v22);
      goto LABEL_12;
    }
    goto LABEL_11;
  }
  if (v26)
  {
    (*(void (**)(char *, uint64_t))(v23 + 8))(v20, v22);
LABEL_11:
    v27 = sub_10001B520(&qword_1000B93A0);
    memcpy(v20, v21, *(_QWORD *)(*(_QWORD *)(v27 - 8) + 64));
    goto LABEL_12;
  }
  (*(void (**)(char *, char *, uint64_t))(v23 + 24))(v20, v21, v22);
LABEL_12:
  v28 = *(int *)(v51 + 28);
  v29 = &v13[v28];
  v30 = &v14[v28];
  v31 = *(_QWORD *)&v13[v28 + 8];
  v32 = *(_QWORD *)&v14[v28 + 8];
  if (!v31)
  {
    if (v32)
    {
      v39 = *(void **)v30;
      *(_QWORD *)v29 = *(_QWORD *)v30;
      v40 = (void *)*((_QWORD *)v30 + 1);
      *((_QWORD *)v29 + 1) = v40;
      v41 = v39;
      v42 = v40;
      goto LABEL_19;
    }
LABEL_18:
    *(_OWORD *)v29 = *(_OWORD *)v30;
    goto LABEL_19;
  }
  if (!v32)
  {
    sub_10002BC50((id *)v29);
    goto LABEL_18;
  }
  v33 = *(id *)v29;
  v34 = *(void **)v30;
  *(_QWORD *)v29 = *(_QWORD *)v30;
  v35 = v34;

  v36 = (void *)*((_QWORD *)v30 + 1);
  v37 = (void *)*((_QWORD *)v29 + 1);
  *((_QWORD *)v29 + 1) = v36;
  v38 = v36;

LABEL_19:
  v43 = v52[6];
  v44 = (char *)a1 + v43;
  v45 = (char *)a2 + v43;
  *(_QWORD *)v44 = *(_QWORD *)v45;
  v46 = *(_OWORD *)(v45 + 8);
  v44[24] = v45[24];
  *(_OWORD *)(v44 + 8) = v46;
  v47 = v52[7];
  v48 = *(_QWORD *)((char *)a2 + v47);
  v49 = *(_QWORD *)((char *)a1 + v47);
  *(_QWORD *)((char *)a1 + v47) = v48;
  swift_retain(v48);
  swift_release(v49);
  *((_BYTE *)a1 + v52[8]) = *((_BYTE *)a2 + v52[8]);
  *((_BYTE *)a1 + v52[9]) = *((_BYTE *)a2 + v52[9]);
  return a1;
}

char *sub_10003CB04(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;

  v6 = sub_10001B520(&qword_1000B9A20);
  if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
  {
    v7 = type metadata accessor for WidgetRenderingMode(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a1, a2, v7);
    swift_storeEnumTagMultiPayload(a1, v6, 1);
  }
  else
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
  }
  v8 = a3[5];
  v9 = &a1[v8];
  v10 = &a2[v8];
  *(_OWORD *)&a1[v8] = *(_OWORD *)&a2[v8];
  v11 = type metadata accessor for Item.Headline(0);
  v12 = *(int *)(v11 + 24);
  v13 = &v9[v12];
  v14 = &v10[v12];
  v15 = type metadata accessor for URL(0);
  v16 = *(_QWORD *)(v15 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48))(v14, 1, v15))
  {
    v17 = sub_10001B520(&qword_1000B93A0);
    memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v16 + 32))(v13, v14, v15);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
  }
  *(_OWORD *)&v9[*(int *)(v11 + 28)] = *(_OWORD *)&v10[*(int *)(v11 + 28)];
  v18 = a3[6];
  v19 = a3[7];
  v20 = &a1[v18];
  v21 = &a2[v18];
  *(_OWORD *)v20 = *(_OWORD *)v21;
  *(_OWORD *)(v20 + 9) = *(_OWORD *)(v21 + 9);
  *(_QWORD *)&a1[v19] = *(_QWORD *)&a2[v19];
  v22 = a3[9];
  a1[a3[8]] = a2[a3[8]];
  a1[v22] = a2[v22];
  return a1;
}

char *sub_10003CCA0(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t (*v18)(char *, uint64_t, uint64_t);
  int v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  char *v24;
  id v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v34;
  int *v35;

  if (a1 != a2)
  {
    sub_10002CCF4((uint64_t)a1, &qword_1000B9A20);
    v6 = sub_10001B520(&qword_1000B9A20);
    if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
    {
      v7 = type metadata accessor for WidgetRenderingMode(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a1, a2, v7);
      swift_storeEnumTagMultiPayload(a1, v6, 1);
    }
    else
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
    }
  }
  v35 = a3;
  v8 = a3[5];
  v9 = &a1[v8];
  v10 = &a2[v8];
  v11 = *(_QWORD *)&a1[v8];
  *(_QWORD *)&a1[v8] = *(_QWORD *)&a2[v8];
  swift_unknownObjectRelease(v11);
  v12 = *((_QWORD *)v9 + 1);
  *((_QWORD *)v9 + 1) = *((_QWORD *)v10 + 1);
  swift_release(v12);
  v34 = type metadata accessor for Item.Headline(0);
  v13 = *(int *)(v34 + 24);
  v14 = &v9[v13];
  v15 = &v10[v13];
  v16 = type metadata accessor for URL(0);
  v17 = *(_QWORD *)(v16 - 8);
  v18 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v17 + 48);
  v19 = v18(v14, 1, v16);
  v20 = v18(v15, 1, v16);
  if (v19)
  {
    if (!v20)
    {
      (*(void (**)(char *, char *, uint64_t))(v17 + 32))(v14, v15, v16);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v17 + 56))(v14, 0, 1, v16);
      goto LABEL_11;
    }
    goto LABEL_10;
  }
  if (v20)
  {
    (*(void (**)(char *, uint64_t))(v17 + 8))(v14, v16);
LABEL_10:
    v21 = sub_10001B520(&qword_1000B93A0);
    memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v21 - 8) + 64));
    goto LABEL_11;
  }
  (*(void (**)(char *, char *, uint64_t))(v17 + 40))(v14, v15, v16);
LABEL_11:
  v22 = *(int *)(v34 + 28);
  v23 = &v9[v22];
  v24 = &v10[v22];
  if (!*(_QWORD *)&v9[v22 + 8])
  {
LABEL_15:
    *(_OWORD *)v23 = *(_OWORD *)v24;
    goto LABEL_16;
  }
  if (!*((_QWORD *)v24 + 1))
  {
    sub_10002BC50((id *)v23);
    goto LABEL_15;
  }
  v25 = *(id *)v23;
  *(_QWORD *)v23 = *(_QWORD *)v24;

  v26 = (void *)*((_QWORD *)v23 + 1);
  *((_QWORD *)v23 + 1) = *((_QWORD *)v24 + 1);

LABEL_16:
  v27 = v35[6];
  v28 = v35[7];
  v29 = &a1[v27];
  v30 = &a2[v27];
  *(_QWORD *)v29 = *(_QWORD *)v30;
  *(_OWORD *)(v29 + 8) = *(_OWORD *)(v30 + 8);
  v29[24] = v30[24];
  v31 = *(_QWORD *)&a1[v28];
  *(_QWORD *)&a1[v28] = *(_QWORD *)&a2[v28];
  swift_release(v31);
  v32 = v35[9];
  a1[v35[8]] = a2[v35[8]];
  a1[v32] = a2[v32];
  return a1;
}

uint64_t sub_10003CF18(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10003CF24);
}

uint64_t sub_10003CF24(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v14;

  v6 = sub_10001B520(&qword_1000B9A28);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
    return v9(v10, a2, v8);
  }
  v11 = type metadata accessor for Item.Headline(0);
  v12 = *(_QWORD *)(v11 - 8);
  if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
  {
    v8 = v11;
    v10 = a1 + *(int *)(a3 + 20);
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
    return v9(v10, a2, v8);
  }
  v14 = *(_QWORD *)(a1 + *(int *)(a3 + 28));
  if (v14 >= 0xFFFFFFFF)
    LODWORD(v14) = -1;
  return (v14 + 1);
}

uint64_t sub_10003CFD0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10003CFDC);
}

uint64_t sub_10003CFDC(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t result;
  uint64_t v14;

  v8 = sub_10001B520(&qword_1000B9A28);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
    return v11(v12, a2, a2, v10);
  }
  result = type metadata accessor for Item.Headline(0);
  v14 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v14 + 84) == a3)
  {
    v10 = result;
    v12 = a1 + *(int *)(a4 + 20);
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
    return v11(v12, a2, a2, v10);
  }
  *(_QWORD *)(a1 + *(int *)(a4 + 28)) = (a2 - 1);
  return result;
}

void sub_10003D084(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v6[6];

  sub_100038C4C(319, (unint64_t *)&qword_1000B9A98, (uint64_t (*)(uint64_t))&type metadata accessor for WidgetRenderingMode);
  if (v3 <= 0x3F)
  {
    v6[0] = *(_QWORD *)(v2 - 8) + 64;
    v4 = type metadata accessor for Item.Headline(319);
    if (v5 <= 0x3F)
    {
      v6[1] = *(_QWORD *)(v4 - 8) + 64;
      v6[2] = &unk_10008B928;
      v6[3] = (char *)&value witness table for Builtin.NativeObject + 64;
      v6[4] = &unk_10008B788;
      v6[5] = &unk_10008B788;
      swift_initStructMetadata(a1, 256, 6, v6, a1 + 16);
    }
  }
}

__n128 initializeWithCopy for ThumbnailView.LayoutOptions(uint64_t a1, uint64_t a2)
{
  __n128 result;

  result = *(__n128 *)a2;
  *(_OWORD *)(a1 + 9) = *(_OWORD *)(a2 + 9);
  *(__n128 *)a1 = result;
  return result;
}

uint64_t getEnumTagSinglePayload for ThumbnailView.LayoutOptions(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 25))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for ThumbnailView.LayoutOptions(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_BYTE *)(result + 24) = 0;
    *(_QWORD *)result = (a2 - 1);
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 25) = v3;
  return result;
}

ValueMetadata *type metadata accessor for ThumbnailView.LayoutOptions()
{
  return &type metadata for ThumbnailView.LayoutOptions;
}

unint64_t sub_10003D1B4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000BA960;
  if (!qword_1000BA960)
  {
    v1 = sub_10001B560(&qword_1000BA800);
    sub_10002CE94(&qword_1000BA810, &qword_1000BA7F8, (uint64_t)&protocol conformance descriptor for VStack<A>);
    sub_10001C96C((unint64_t *)&qword_1000B9BD8, (uint64_t (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier, (uint64_t)&protocol conformance descriptor for AccessibilityAttachmentModifier);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000BA960);
  }
  return result;
}

uint64_t sub_10003D250(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_10009C888, 1);
}

unint64_t sub_10003D260()
{
  unint64_t result;

  result = qword_1000BA978;
  if (!qword_1000BA978)
  {
    result = swift_getWitnessTable(&unk_10008B184, &type metadata for AudioIndicatorView);
    atomic_store(result, (unint64_t *)&qword_1000BA978);
  }
  return result;
}

unint64_t sub_10003D2A4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000BA9B8;
  if (!qword_1000BA9B8)
  {
    v1 = sub_10001B560(&qword_1000BA9A8);
    sub_10003D310();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000BA9B8);
  }
  return result;
}

unint64_t sub_10003D310()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000BA9C0;
  if (!qword_1000BA9C0)
  {
    v1 = sub_10001B560(&qword_1000BA9A0);
    swift_getOpaqueTypeConformance2(v1, &opaque type descriptor for <<opaque return type of Image.widgetAccentedRenderingMode(_:)>>, 1);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000BA9C0);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for MediaIndicatorDisplayStyle(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 17))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for MediaIndicatorDisplayStyle(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)result = 0;
    *(_QWORD *)(result + 8) = 0;
    *(_BYTE *)(result + 16) = 0;
    *(_DWORD *)result = a2 - 1;
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 17) = v3;
  return result;
}

uint64_t sub_10003D3D8(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 16))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t sub_10003D3F4(uint64_t result, int a2)
{
  if (a2)
  {
    *(_QWORD *)result = (a2 - 1);
    *(_QWORD *)(result + 8) = 0;
    *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    *(_BYTE *)(result + 16) = 0;
  }
  return result;
}

ValueMetadata *type metadata accessor for MediaIndicatorDisplayStyle()
{
  return &type metadata for MediaIndicatorDisplayStyle;
}

unint64_t sub_10003D428()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000BA9C8;
  if (!qword_1000BA9C8)
  {
    v1 = sub_10001B560(&qword_1000BA970);
    sub_10003D4AC();
    sub_10002CE94((unint64_t *)&qword_1000BA9E0, &qword_1000BA968, (uint64_t)&protocol conformance descriptor for _ClipEffect<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000BA9C8);
  }
  return result;
}

unint64_t sub_10003D4AC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000BA9D0;
  if (!qword_1000BA9D0)
  {
    v1 = sub_10001B560(&qword_1000BA9D8);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000BA9D0);
  }
  return result;
}

ValueMetadata *type metadata accessor for MediaIndicatorDisplayStyle.BadgeLayoutOptions()
{
  return &type metadata for MediaIndicatorDisplayStyle.BadgeLayoutOptions;
}

uint64_t type metadata accessor for ImageJoeColorAnalyzer()
{
  return objc_opt_self(_TtC7NewsTag21ImageJoeColorAnalyzer);
}

_QWORD *initializeBufferWithCopyOfBuffer for ImageColorAnalysisResult(_QWORD *a1, uint64_t a2)
{
  void *v3;
  void *v4;
  id v5;
  id v6;

  v3 = *(void **)a2;
  v4 = *(void **)(a2 + 8);
  *a1 = *(_QWORD *)a2;
  a1[1] = v4;
  v5 = v3;
  v6 = v4;
  return a1;
}

void destroy for ImageColorAnalysisResult(id *a1)
{

}

uint64_t assignWithCopy for ImageColorAnalysisResult(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  id v6;
  void *v7;
  void *v8;
  id v9;

  v4 = *(void **)a1;
  v5 = *(void **)a2;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v6 = v5;

  v7 = *(void **)(a2 + 8);
  v8 = *(void **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v7;
  v9 = v7;

  return a1;
}

uint64_t assignWithTake for ImageColorAnalysisResult(uint64_t a1, _OWORD *a2)
{
  void *v4;

  v4 = *(void **)(a1 + 8);
  *(_OWORD *)a1 = *a2;

  return a1;
}

uint64_t getEnumTagSinglePayload for ImageColorAnalysisResult(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 16))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ImageColorAnalysisResult(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 16) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for ImageColorAnalysisResult()
{
  return &type metadata for ImageColorAnalysisResult;
}

uint64_t sub_10003D784(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_allocateGenericValueMetadata(a1, a2, a3, 24);
}

uint64_t sub_10003D78C(uint64_t a1)
{
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
  return swift_release(*(_QWORD *)(a1 + 24));
}

uint64_t sub_10003D7B4(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  __int128 v4;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v3 = *(_QWORD *)(a2 + 24);
  v4 = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 24) = v3;
  swift_bridgeObjectRetain(v4);
  swift_retain(v3);
  return a1;
}

_QWORD *sub_10003D7FC(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  *a1 = *a2;
  v4 = a2[1];
  v5 = a1[1];
  a1[1] = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  v7 = a2[2];
  v6 = a2[3];
  v8 = a1[3];
  a1[2] = v7;
  a1[3] = v6;
  swift_retain(v6);
  swift_release(v8);
  return a1;
}

_QWORD *sub_10003D860(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  *a1 = *(_QWORD *)a2;
  swift_bridgeObjectRelease(a1[1]);
  v4 = *(_QWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 1) = *(_OWORD *)(a2 + 8);
  v5 = a1[3];
  a1[3] = v4;
  swift_release(v5);
  return a1;
}

uint64_t sub_10003D8AC(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 32))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t sub_10003D8F4(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 32) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 32) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

uint64_t type metadata accessor for NewsWidgetConfiguration(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10003DCE8(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for NewsWidgetConfiguration);
}

uint64_t sub_10003D940(uint64_t a1, uint64_t a2)
{
  __int128 v3;

  v3 = *(_OWORD *)(a2 + 16);
  return swift_getOpaqueTypeConformance2(&v3, &unk_10009C960, 1);
}

uint64_t sub_10003D974@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t WitnessTable;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v28;
  uint64_t v29;

  v28 = a7;
  v13 = type metadata accessor for LazyOptions(0);
  __chkstk_darwin(v13);
  v15 = (char *)&v28 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = type metadata accessor for NewsTimelineProvider(255, a5, a6, v16);
  type metadata accessor for Lazy(0, v17);
  v18 = swift_bridgeObjectRetain(a2);
  static LazyOptions.keepOnMain.getter(v18);
  v19 = (_QWORD *)swift_allocObject(&unk_1000AC3E8, 64, 7);
  v19[2] = a5;
  v19[3] = a6;
  v19[4] = a3;
  v19[5] = a4;
  v19[6] = a1;
  v19[7] = a2;
  swift_bridgeObjectRetain(a2);
  swift_retain(a4);
  v20 = Lazy.__allocating_init(options:loadBlock:)(v15, sub_10003DC4C, v19);
  WitnessTable = swift_getWitnessTable(&unk_10008D200, v17);
  v29 = TodayIntentResponseCode.rawValue.getter(v20, WitnessTable);
  v22 = type metadata accessor for ContentView(0);
  v24 = type metadata accessor for LazyIntentTimelineProvider(0, v17, WitnessTable, v23);
  v25 = sub_10003DC5C();
  v26 = swift_getWitnessTable(&unk_10008C748, v24);
  return IntentConfiguration.init<A>(kind:intent:provider:content:)(a1, a2, a5, &v29, sub_10003DC00, 0, a5, v22, v24, v25, v26);
}

_QWORD *sub_10003DB20@<X0>(void (*a1)(_QWORD *__return_ptr)@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t *a6@<X8>)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *result;
  uint64_t v15;
  __int128 v16[2];
  _QWORD v17[5];
  _QWORD v18[3];
  uint64_t v19;
  uint64_t v20;

  a1(v18);
  v11 = v19;
  v12 = v20;
  sub_10001D9B4(v18, v19);
  v13 = sub_10001B520((uint64_t *)&unk_1000BC9D0);
  result = dispatch thunk of ResolverType.resolve<A>(_:)(v17, v13, v13, v11, v12);
  if (v17[3])
  {
    type metadata accessor for NewsTimelineProvider(0, a4, a5, v15);
    sub_100030244((uint64_t)v18, (uint64_t)v16);
    swift_bridgeObjectRetain(a3);
    *a6 = sub_100072258(a2, a3, v17, v16);
    return (_QWORD *)sub_10001DA60(v18);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_10003DC00@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_10003DCA4(a1, a2);
}

uint64_t sub_10003DC08@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;

  return sub_10003D974(*v2, v2[1], v2[2], v2[3], *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), a2);
}

uint64_t sub_10003DC20()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 40));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 56));
  return swift_deallocObject(v0, 64, 7);
}

_QWORD *sub_10003DC4C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;

  return sub_10003DB20(*(void (**)(_QWORD *__return_ptr))(v1 + 32), *(_QWORD *)(v1 + 48), *(_QWORD *)(v1 + 56), *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), a1);
}

unint64_t sub_10003DC5C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000BAB00;
  if (!qword_1000BAB00)
  {
    v1 = type metadata accessor for ContentView(255);
    result = swift_getWitnessTable(&unk_10008C61C, v1);
    atomic_store(result, (unint64_t *)&qword_1000BAB00);
  }
  return result;
}

uint64_t sub_10003DCA4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for NewsTimelineEntry(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10003DCE8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD v6[3];

  v6[0] = a2;
  v6[1] = a3;
  v6[2] = a4;
  return swift_getGenericMetadata(a1, v6, a5);
}

uint64_t sub_10003DD14(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  v1 = *a1;
  v2 = type metadata accessor for ContentView(255);
  v3 = sub_10003DC5C();
  v4 = type metadata accessor for IntentConfiguration(255, v1, v2, v3);
  return swift_getWitnessTable(&protocol conformance descriptor for IntentConfiguration<A, B>, v4);
}

NSString *sub_10003DD60()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  int v6;
  id *v7;
  void (*v9)(char *, uint64_t);
  NSString *v10;
  uint64_t v11;

  v1 = v0;
  v2 = type metadata accessor for ContentSizeCategory(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin();
  v5 = (char *)&v11 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v5, v1, v2);
  v6 = (*(uint64_t (**)(char *, uint64_t))(v3 + 88))(v5, v2);
  if (v6 == enum case for ContentSizeCategory.extraSmall(_:))
  {
    v7 = (id *)&UIContentSizeCategoryExtraSmall;
    return (NSString *)*v7;
  }
  if (v6 == enum case for ContentSizeCategory.small(_:))
  {
    v7 = (id *)&UIContentSizeCategorySmall;
    return (NSString *)*v7;
  }
  if (v6 == enum case for ContentSizeCategory.medium(_:))
  {
    v7 = (id *)&UIContentSizeCategoryMedium;
    return (NSString *)*v7;
  }
  if (v6 == enum case for ContentSizeCategory.large(_:))
  {
    v7 = (id *)&UIContentSizeCategoryLarge;
    return (NSString *)*v7;
  }
  if (v6 == enum case for ContentSizeCategory.extraLarge(_:))
  {
    v7 = (id *)&UIContentSizeCategoryExtraLarge;
    return (NSString *)*v7;
  }
  if (v6 == enum case for ContentSizeCategory.extraExtraLarge(_:))
  {
    v7 = (id *)&UIContentSizeCategoryExtraExtraLarge;
    return (NSString *)*v7;
  }
  if (v6 == enum case for ContentSizeCategory.extraExtraExtraLarge(_:))
  {
    v7 = (id *)&UIContentSizeCategoryExtraExtraExtraLarge;
    return (NSString *)*v7;
  }
  if (v6 == enum case for ContentSizeCategory.accessibilityMedium(_:))
  {
    v7 = (id *)&UIContentSizeCategoryAccessibilityMedium;
    return (NSString *)*v7;
  }
  if (v6 == enum case for ContentSizeCategory.accessibilityLarge(_:))
  {
    v7 = (id *)&UIContentSizeCategoryAccessibilityLarge;
    return (NSString *)*v7;
  }
  if (v6 == enum case for ContentSizeCategory.accessibilityExtraLarge(_:))
  {
    v7 = (id *)&UIContentSizeCategoryAccessibilityExtraLarge;
    return (NSString *)*v7;
  }
  if (v6 == enum case for ContentSizeCategory.accessibilityExtraExtraLarge(_:))
  {
    v7 = (id *)&UIContentSizeCategoryAccessibilityExtraExtraLarge;
    return (NSString *)*v7;
  }
  if (v6 == enum case for ContentSizeCategory.accessibilityExtraExtraExtraLarge(_:))
  {
    v7 = (id *)&UIContentSizeCategoryAccessibilityExtraExtraExtraLarge;
    return (NSString *)*v7;
  }
  v9 = *(void (**)(char *, uint64_t))(v3 + 8);
  v10 = UIContentSizeCategoryUnspecified;
  v9(v5, v2);
  return v10;
}

uint64_t sub_10003DFA0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  void (*v11)(char *, uint64_t, uint64_t);
  uint64_t (*v12)(char *, uint64_t);
  int v13;
  int v14;
  int v15;
  _BOOL4 v17;
  int v18;
  int v19;
  int v20;
  int v21;
  char v22;
  char v23;
  char v24;
  char v25;
  char v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v32;
  uint64_t v33;
  int v34;
  int v35;
  int v36;
  int v37;
  _BOOL4 v38;
  int v39;
  _BOOL4 v40;
  int v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  void (*v47)(char *, uint64_t, uint64_t);

  v43 = a2;
  v45 = a1;
  v46 = a3;
  v4 = type metadata accessor for ContentSizeCategory(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = __chkstk_darwin(v4);
  v8 = (char *)&v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v10 = (char *)&v32 - v9;
  v11 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
  v44 = v3;
  v47 = v11;
  v11((char *)&v32 - v9, v3, v4);
  v12 = *(uint64_t (**)(char *, uint64_t))(v5 + 88);
  v13 = v12(v10, v4);
  v14 = v13;
  v15 = enum case for ContentSizeCategory.extraSmall(_:);
  v42 = enum case for ContentSizeCategory.small(_:);
  v17 = v13 == enum case for ContentSizeCategory.extraSmall(_:) || v13 == enum case for ContentSizeCategory.small(_:);
  v40 = v17;
  v41 = enum case for ContentSizeCategory.medium(_:);
  if (v13 == enum case for ContentSizeCategory.medium(_:))
    v17 = 1;
  v18 = 1;
  v38 = v17;
  v39 = enum case for ContentSizeCategory.large(_:);
  if (v17)
  {
    v19 = 1;
    v20 = 1;
    v21 = 1;
    v22 = 1;
    v23 = 1;
    v24 = 1;
    v25 = 1;
  }
  else
  {
    v19 = 1;
    v20 = 1;
    v21 = 1;
    v22 = 1;
    v23 = 1;
    v24 = 1;
    v25 = 1;
    if (v13 == enum case for ContentSizeCategory.large(_:))
      goto LABEL_28;
    if (v13 == enum case for ContentSizeCategory.extraLarge(_:))
      goto LABEL_26;
    if (v13 == enum case for ContentSizeCategory.extraExtraLarge(_:))
    {
LABEL_25:
      v24 = 0;
LABEL_26:
      v25 = 0;
      goto LABEL_28;
    }
    if (v13 == enum case for ContentSizeCategory.extraExtraExtraLarge(_:))
    {
LABEL_24:
      v23 = 0;
      goto LABEL_25;
    }
    if (v13 == enum case for ContentSizeCategory.accessibilityMedium(_:))
    {
LABEL_23:
      v22 = 0;
      goto LABEL_24;
    }
    if (v13 == enum case for ContentSizeCategory.accessibilityLarge(_:))
    {
LABEL_22:
      v21 = 0;
      goto LABEL_23;
    }
    if (v13 == enum case for ContentSizeCategory.accessibilityExtraLarge(_:))
    {
LABEL_21:
      v20 = 0;
      goto LABEL_22;
    }
    if (v13 == enum case for ContentSizeCategory.accessibilityExtraExtraLarge(_:))
    {
LABEL_20:
      v19 = 0;
      goto LABEL_21;
    }
    if (v13 == enum case for ContentSizeCategory.accessibilityExtraExtraExtraLarge(_:))
    {
      v18 = 0;
      goto LABEL_20;
    }
    (*(void (**)(char *, uint64_t))(v5 + 8))(v10, v4);
    v18 = 1;
    v19 = 1;
    v20 = 1;
    v21 = 1;
    v23 = 1;
  }
LABEL_28:
  v33 = v5;
  v36 = v20;
  v37 = v21;
  v26 = v23;
  v34 = v18;
  v35 = v19;
  v27 = v45;
  v47(v8, v45, v4);
  v28 = v12(v8, v4);
  if (v28 != v15)
  {
    if (v28 == v42)
    {
      if (v14 == v15)
        return ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v47)(v46, v27, v4);
    }
    else if (v28 == v41)
    {
      if (v40)
        return ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v47)(v46, v27, v4);
    }
    else if (v28 == v39)
    {
      if (v38)
        return ((uint64_t (*)(_QWORD, _QWORD, _QWORD))v47)(v46, v27, v4);
    }
    else if (v28 == enum case for ContentSizeCategory.extraLarge(_:))
    {
      if ((v25 & 1) != 0)
        return ((uint64_t (*)(_QWORD, _QWORD, _QWORD))v47)(v46, v27, v4);
    }
    else if (v28 == enum case for ContentSizeCategory.extraExtraLarge(_:))
    {
      if ((v24 & 1) != 0)
        return ((uint64_t (*)(_QWORD, _QWORD, _QWORD))v47)(v46, v27, v4);
    }
    else if (v28 == enum case for ContentSizeCategory.extraExtraExtraLarge(_:))
    {
      if ((v26 & 1) != 0)
        return ((uint64_t (*)(_QWORD, _QWORD, _QWORD))v47)(v46, v27, v4);
    }
    else if (v28 == enum case for ContentSizeCategory.accessibilityMedium(_:))
    {
      if ((v22 & 1) != 0)
        return ((uint64_t (*)(_QWORD, _QWORD, _QWORD))v47)(v46, v27, v4);
    }
    else if (v28 == enum case for ContentSizeCategory.accessibilityLarge(_:))
    {
      if ((v37 & 1) != 0)
        return ((uint64_t (*)(_QWORD, _QWORD, _QWORD))v47)(v46, v27, v4);
    }
    else if (v28 == enum case for ContentSizeCategory.accessibilityExtraLarge(_:))
    {
      if ((v36 & 1) != 0)
        return ((uint64_t (*)(_QWORD, _QWORD, _QWORD))v47)(v46, v27, v4);
    }
    else if (v28 == enum case for ContentSizeCategory.accessibilityExtraExtraLarge(_:))
    {
      if ((v35 & 1) != 0)
        return ((uint64_t (*)(_QWORD, _QWORD, _QWORD))v47)(v46, v27, v4);
    }
    else if (v28 == enum case for ContentSizeCategory.accessibilityExtraExtraExtraLarge(_:))
    {
      if ((v34 & 1) != 0)
        return ((uint64_t (*)(_QWORD, _QWORD, _QWORD))v47)(v46, v27, v4);
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v33 + 8))(v8, v4);
      if (v38)
        return ((uint64_t (*)(_QWORD, _QWORD, _QWORD))v47)(v46, v27, v4);
    }
  }
  v30 = v43;
  v29 = v44;
  if (sub_10003E3A8(v44, v43))
    v27 = v30;
  else
    v27 = v29;
  return ((uint64_t (*)(_QWORD, _QWORD, _QWORD))v47)(v46, v27, v4);
}

BOOL sub_10003E3A8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  void (*v11)(char *, uint64_t, uint64_t);
  uint64_t (*v12)(char *, uint64_t);
  int v13;
  unint64_t v14;
  int v15;
  int v16;
  unint64_t v17;
  uint64_t v19;

  v4 = type metadata accessor for ContentSizeCategory(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = ((uint64_t (*)(void))__chkstk_darwin)();
  v8 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v10 = (char *)&v19 - v9;
  v11 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
  v11((char *)&v19 - v9, a2, v4);
  v12 = *(uint64_t (**)(char *, uint64_t))(v5 + 88);
  v13 = v12(v10, v4);
  v14 = 0;
  v15 = enum case for ContentSizeCategory.extraSmall(_:);
  if (v13 != enum case for ContentSizeCategory.extraSmall(_:))
  {
    if (v13 == enum case for ContentSizeCategory.small(_:))
    {
      v14 = 1;
      goto LABEL_24;
    }
    if (v13 == enum case for ContentSizeCategory.medium(_:))
    {
      v14 = 2;
      goto LABEL_24;
    }
    if (v13 == enum case for ContentSizeCategory.large(_:))
      goto LABEL_7;
    if (v13 == enum case for ContentSizeCategory.extraLarge(_:))
    {
      v14 = 4;
    }
    else if (v13 == enum case for ContentSizeCategory.extraExtraLarge(_:))
    {
      v14 = 5;
    }
    else if (v13 == enum case for ContentSizeCategory.extraExtraExtraLarge(_:))
    {
      v14 = 6;
    }
    else if (v13 == enum case for ContentSizeCategory.accessibilityMedium(_:))
    {
      v14 = 7;
    }
    else if (v13 == enum case for ContentSizeCategory.accessibilityLarge(_:))
    {
      v14 = 8;
    }
    else if (v13 == enum case for ContentSizeCategory.accessibilityExtraLarge(_:))
    {
      v14 = 9;
    }
    else if (v13 == enum case for ContentSizeCategory.accessibilityExtraExtraLarge(_:))
    {
      v14 = 10;
    }
    else
    {
      if (v13 != enum case for ContentSizeCategory.accessibilityExtraExtraExtraLarge(_:))
      {
        (*(void (**)(char *, uint64_t))(v5 + 8))(v10, v4);
LABEL_7:
        v14 = 3;
        goto LABEL_24;
      }
      v14 = 11;
    }
  }
LABEL_24:
  v11(v8, a1, v4);
  v16 = v12(v8, v4);
  if (v16 == v15)
  {
    v17 = 0;
  }
  else if (v16 == enum case for ContentSizeCategory.small(_:))
  {
    v17 = 1;
  }
  else if (v16 == enum case for ContentSizeCategory.medium(_:))
  {
    v17 = 2;
  }
  else
  {
    if (v16 != enum case for ContentSizeCategory.large(_:))
    {
      if (v16 == enum case for ContentSizeCategory.extraLarge(_:))
      {
        v17 = 4;
        return v14 < v17;
      }
      if (v16 == enum case for ContentSizeCategory.extraExtraLarge(_:))
      {
        v17 = 5;
        return v14 < v17;
      }
      if (v16 == enum case for ContentSizeCategory.extraExtraExtraLarge(_:))
      {
        v17 = 6;
        return v14 < v17;
      }
      if (v16 == enum case for ContentSizeCategory.accessibilityMedium(_:))
      {
        v17 = 7;
        return v14 < v17;
      }
      if (v16 == enum case for ContentSizeCategory.accessibilityLarge(_:))
      {
        v17 = 8;
        return v14 < v17;
      }
      if (v16 == enum case for ContentSizeCategory.accessibilityExtraLarge(_:))
      {
        v17 = 9;
        return v14 < v17;
      }
      if (v16 == enum case for ContentSizeCategory.accessibilityExtraExtraLarge(_:))
      {
        v17 = 10;
        return v14 < v17;
      }
      if (v16 == enum case for ContentSizeCategory.accessibilityExtraExtraExtraLarge(_:))
      {
        v17 = 11;
        return v14 < v17;
      }
      (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
    }
    v17 = 3;
  }
  return v14 < v17;
}

double Type3Widget.body.getter@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void (*v24)(uint64_t *, uint64_t *, uint64_t);
  __n128 v25;
  uint64_t v26;
  double result;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t WitnessTable;
  void *v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;

  v4 = *(_QWORD *)(a1 - 8);
  v5 = *(_QWORD *)(v4 + 64);
  __chkstk_darwin(a1);
  v6 = (char *)&v28 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v4 + 16))(v6);
  v7 = *(unsigned __int8 *)(v4 + 80);
  v8 = (v7 + 32) & ~v7;
  v9 = swift_allocObject(&unk_1000AC440, v8 + v5, v7 | 7);
  v10 = *(_QWORD *)(a1 + 16);
  v11 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(v9 + 16) = v10;
  *(_QWORD *)(v9 + 24) = v11;
  (*(void (**)(uint64_t, char *, uint64_t))(v4 + 32))(v9 + v8, v6, a1);
  v12 = sub_10001B560(&qword_1000BA968);
  v13 = type metadata accessor for ModifiedContent(255, v10, v12);
  v14 = type metadata accessor for ModifiedContent(255, v13, &type metadata for _FrameLayout);
  v15 = type metadata accessor for ModifiedContent(0, v14, &type metadata for _PositionLayout);
  v16 = sub_10003ED64();
  v34 = v11;
  v35 = v16;
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v13);
  v33 = &protocol witness table for _FrameLayout;
  v17 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v14);
  v18 = sub_10003EDB0();
  v30 = v17;
  v31 = v18;
  v19 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v15);
  v20 = GeometryReader.init(content:)(sub_10003ECFC, v9, v15, v19);
  v22 = v21;
  v28 = v20;
  v29 = v21;
  v23 = type metadata accessor for GeometryReader(0, v15, v19);
  swift_getWitnessTable(&protocol conformance descriptor for GeometryReader<A>, v23);
  v24 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v23 - 8) + 16);
  v24(&v36, &v28, v23);
  v25 = swift_release(v22);
  v26 = v37;
  v28 = v36;
  v29 = v37;
  ((void (*)(uint64_t, uint64_t *, uint64_t, __n128))v24)(a2, &v28, v23, v25);
  *(_QWORD *)&result = swift_release(v26).n128_u64[0];
  return result;
}

uint64_t sub_10003E920@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, char *a5@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  int64x2_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int8 *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  double v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t WitnessTable;
  char *v32;
  uint64_t v33;
  double v34;
  uint64_t v35;
  double v36;
  double v37;
  uint64_t v38;
  char *v39;
  unint64_t v40;
  uint64_t v41;
  char *v42;
  void (*v43)(char *, char *, uint64_t);
  void (*v44)(char *, uint64_t);
  uint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  void *v59;
  uint64_t v60;
  unint64_t v61;

  v48 = a1;
  v49 = a2;
  v55 = a5;
  v7 = type metadata accessor for RoundedRectangle(0);
  __chkstk_darwin(v7);
  v9 = (int64x2_t *)((char *)&v46 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  v10 = sub_10001B560(&qword_1000BA968);
  v11 = type metadata accessor for ModifiedContent(0, a3, v10);
  v51 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v13 = (char *)&v46 - v12;
  v14 = type metadata accessor for ModifiedContent(0, v11, &type metadata for _FrameLayout);
  v54 = *(_QWORD *)(v14 - 8);
  __chkstk_darwin(v14);
  v47 = (char *)&v46 - v15;
  v16 = type metadata accessor for ModifiedContent(0, v14, &type metadata for _PositionLayout);
  v53 = *(_QWORD *)(v16 - 8);
  v17 = __chkstk_darwin(v16);
  v50 = (char *)&v46 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  v52 = (char *)&v46 - v19;
  v20 = &v9->i8[*(int *)(v7 + 20)];
  v21 = enum case for RoundedCornerStyle.continuous(_:);
  v22 = type metadata accessor for RoundedCornerStyle(0);
  (*(void (**)(__int8 *, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 104))(v20, v21, v22);
  *v9 = vdupq_n_s64(0x4044000000000000uLL);
  v23 = sub_10003F37C();
  View.clipShape<A>(_:style:)(v9, 256, a3, v7, a4, v23);
  v24 = sub_10003F3C4((uint64_t)v9);
  v25 = fmin(GeometryProxy.size.getter(v24) + -16.0, 400.0);
  v27 = static Alignment.center.getter(v26);
  v29 = v28;
  v30 = sub_10003ED64();
  v60 = a4;
  v61 = v30;
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v11);
  v32 = v47;
  View.frame(width:height:alignment:)(*(_QWORD *)&v25, 0, 0x4079000000000000, 0, v27, v29, v11, WitnessTable);
  v33 = (*(uint64_t (**)(char *, uint64_t))(v51 + 8))(v13, v11);
  v34 = GeometryProxy.size.getter(v33) * 0.5;
  GeometryProxy.size.getter(v35);
  v37 = v36 * 0.5;
  v58 = WitnessTable;
  v59 = &protocol witness table for _FrameLayout;
  v38 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v14);
  v39 = v50;
  View.position(x:y:)(v14, v38, v34, v37);
  (*(void (**)(char *, uint64_t))(v54 + 8))(v32, v14);
  v40 = sub_10003EDB0();
  v56 = v38;
  v57 = v40;
  swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v16);
  v42 = v52;
  v41 = v53;
  v43 = *(void (**)(char *, char *, uint64_t))(v53 + 16);
  v43(v52, v39, v16);
  v44 = *(void (**)(char *, uint64_t))(v41 + 8);
  v44(v39, v16);
  v43(v55, v42, v16);
  return ((uint64_t (*)(char *, uint64_t))v44)(v42, v16);
}

uint64_t sub_10003EC84(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v5 = *(_QWORD *)(v4 + 16);
  v6 = *(_QWORD *)(type metadata accessor for Type3Widget(0, v5, *(_QWORD *)(v4 + 24), a4) - 8);
  v7 = *(unsigned __int8 *)(v6 + 80);
  v8 = (v7 + 32) & ~v7;
  v9 = v8 + *(_QWORD *)(v6 + 64);
  v10 = v7 | 7;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4 + v8, v5);
  return swift_deallocObject(v4, v9, v10);
}

uint64_t type metadata accessor for Type3Widget(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10003DCE8(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for Type3Widget);
}

uint64_t sub_10003ECFC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X3>, char *a3@<X8>)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v6 = *(_QWORD *)(v3 + 16);
  v7 = *(_QWORD *)(v3 + 24);
  v8 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for Type3Widget(0, v6, v7, a2) - 8) + 80);
  return sub_10003E920(a1, v3 + ((v8 + 32) & ~v8), v6, v7, a3);
}

unint64_t sub_10003ED64()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000BA9E0;
  if (!qword_1000BA9E0)
  {
    v1 = sub_10001B560(&qword_1000BA968);
    result = swift_getWitnessTable(&protocol conformance descriptor for _ClipEffect<A>, v1);
    atomic_store(result, (unint64_t *)&qword_1000BA9E0);
  }
  return result;
}

unint64_t sub_10003EDB0()
{
  unint64_t result;

  result = qword_1000BAB08[0];
  if (!qword_1000BAB08[0])
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for _PositionLayout, &type metadata for _PositionLayout);
    atomic_store(result, qword_1000BAB08);
  }
  return result;
}

uint64_t sub_10003EDF4(uint64_t a1, uint64_t a2)
{
  __int128 v3;

  v3 = *(_OWORD *)(a2 + 16);
  return swift_getOpaqueTypeConformance2(&v3, &opaque type descriptor for <<opaque return type of Type3Widget.body>>, 1);
}

uint64_t sub_10003EE2C(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  uint64_t v4;

  result = swift_checkMetadataState(319, *(_QWORD *)(a1 + 16));
  if (v3 <= 0x3F)
  {
    v4 = *(_QWORD *)(result - 8) + 64;
    swift_initStructMetadata(a1, 0, 1, &v4, a1 + 32);
    return 0;
  }
  return result;
}

uint64_t *sub_10003EE98(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v8;

  v3 = a1;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 80);
  if (v5 <= 7 && *(_QWORD *)(v4 + 64) <= 0x18uLL && (*(_DWORD *)(v4 + 80) & 0x100000) == 0)
  {
    (*(void (**)(uint64_t *))(v4 + 16))(a1);
  }
  else
  {
    v8 = *a2;
    *v3 = *a2;
    v3 = (uint64_t *)(v8 + ((v5 + 16) & ~v5));
    swift_retain(v8);
  }
  return v3;
}

uint64_t sub_10003EF08(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 8))();
}

uint64_t sub_10003EF18(uint64_t a1, uint64_t a2, uint64_t a3)
{
  (*(void (**)(void))(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 16))();
  return a1;
}

uint64_t sub_10003EF48(uint64_t a1, uint64_t a2, uint64_t a3)
{
  (*(void (**)(void))(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 24))();
  return a1;
}

uint64_t sub_10003EF78(uint64_t a1, uint64_t a2, uint64_t a3)
{
  (*(void (**)(void))(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 32))();
  return a1;
}

uint64_t sub_10003EFA8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  (*(void (**)(void))(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 40))();
  return a1;
}

uint64_t sub_10003EFD8(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  char v8;
  int v9;
  unsigned int v10;
  int v11;

  if (!a2)
    return 0;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  v6 = a2 - v5;
  if (a2 <= v5)
    goto LABEL_18;
  v7 = *(_QWORD *)(v4 + 64);
  v8 = 8 * v7;
  if (v7 <= 3)
  {
    v10 = ((v6 + ~(-1 << v8)) >> v8) + 1;
    if (HIWORD(v10))
    {
      v9 = *(_DWORD *)(a1 + v7);
      if (!v9)
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v10 > 0xFF)
    {
      v9 = *(unsigned __int16 *)(a1 + v7);
      if (!*(_WORD *)(a1 + v7))
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v10 < 2)
    {
LABEL_18:
      if (v5)
        return (*(uint64_t (**)(void))(v4 + 48))();
      return 0;
    }
  }
  v9 = *(unsigned __int8 *)(a1 + v7);
  if (!*(_BYTE *)(a1 + v7))
    goto LABEL_18;
LABEL_11:
  v11 = (v9 - 1) << v8;
  if (v7 > 3)
    v11 = 0;
  if (!(_DWORD)v7)
    return v5 + v11 + 1;
  if (v7 > 3)
    LODWORD(v7) = 4;
  return ((uint64_t (*)(void))((char *)&loc_10003F088 + 4 * byte_10008BB20[(v7 - 1)]))();
}

void sub_10003F0D8(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  size_t v8;
  BOOL v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  int v14;

  v6 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v7 = *(_DWORD *)(v6 + 84);
  v8 = *(_QWORD *)(v6 + 64);
  v9 = a3 >= v7;
  v10 = a3 - v7;
  if (v10 != 0 && v9)
  {
    if (v8 <= 3)
    {
      v13 = ((v10 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v13))
      {
        v11 = &dword_100000004;
      }
      else if (v13 >= 0x100)
      {
        v11 = 2;
      }
      else
      {
        v11 = v13 > 1;
      }
    }
    else
    {
      v11 = &_mh_execute_header.magic + 1;
    }
  }
  else
  {
    v11 = 0;
  }
  if (v7 < a2)
  {
    v12 = ~v7 + a2;
    if (v8 < 4)
    {
      if ((_DWORD)v8)
      {
        v14 = v12 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if ((_DWORD)v8 == 3)
        {
          *a1 = v14;
          *((_BYTE *)a1 + 2) = BYTE2(v14);
        }
        else if ((_DWORD)v8 == 2)
        {
          *a1 = v14;
        }
        else
        {
          *(_BYTE *)a1 = v14;
        }
      }
    }
    else
    {
      bzero(a1, *(_QWORD *)(v6 + 64));
      *(_DWORD *)a1 = v12;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X11 }
}

uint64_t sub_10003F288(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t WitnessTable;
  uint64_t v7;

  v1 = *a1;
  v2 = sub_10001B560(&qword_1000BA968);
  v3 = type metadata accessor for ModifiedContent(255, v1, v2);
  v4 = type metadata accessor for ModifiedContent(255, v3, &type metadata for _FrameLayout);
  v5 = type metadata accessor for ModifiedContent(255, v4, &type metadata for _PositionLayout);
  sub_10003ED64();
  swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v3);
  swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v4);
  sub_10003EDB0();
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v5);
  v7 = type metadata accessor for GeometryReader(255, v5, WitnessTable);
  return swift_getWitnessTable(&protocol conformance descriptor for GeometryReader<A>, v7);
}

unint64_t sub_10003F37C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000BAB90;
  if (!qword_1000BAB90)
  {
    v1 = type metadata accessor for RoundedRectangle(255);
    result = swift_getWitnessTable(&protocol conformance descriptor for RoundedRectangle, v1);
    atomic_store(result, (unint64_t *)&qword_1000BAB90);
  }
  return result;
}

uint64_t sub_10003F3C4(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for RoundedRectangle(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

char *sub_10003F400(char *a1, char **a2, uint64_t a3)
{
  int v3;
  char *v4;
  char *v6;
  char *v7;
  char *v8;
  int *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int (*v14)(char *, uint64_t, uint64_t);
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  int *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void (*v34)(char *, uint64_t, uint64_t);
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  char *__dst;
  char *v42;

  v3 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  v4 = *a2;
  *(_QWORD *)a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    v6 = &v4[(v3 + 16) & ~(unint64_t)v3];
    swift_retain(v4);
  }
  else
  {
    v6 = a1;
    v7 = a2[1];
    v8 = a2[2];
    *((_QWORD *)a1 + 1) = v7;
    *((_QWORD *)a1 + 2) = v8;
    a1[24] = *((_BYTE *)a2 + 24);
    v9 = (int *)type metadata accessor for TodayContent(0);
    v10 = v9[8];
    __dst = &v6[v10];
    v11 = (char *)a2 + v10;
    v12 = type metadata accessor for URL(0);
    v13 = *(_QWORD *)(v12 - 8);
    v14 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48);
    v15 = v4;
    swift_bridgeObjectRetain(v7);
    swift_unknownObjectRetain(v8);
    if (v14(v11, 1, v12))
    {
      v16 = sub_10001B520(&qword_1000B93A0);
      memcpy(__dst, v11, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v13 + 16))(__dst, v11, v12);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v13 + 56))(__dst, 0, 1, v12);
    }
    v17 = v9[9];
    v18 = *(uint64_t *)((char *)a2 + v17);
    *(_QWORD *)&v6[v17] = v18;
    v19 = v9[10];
    v20 = &v6[v19];
    v21 = (char **)((char *)a2 + v19);
    v22 = v21[1];
    *(_QWORD *)v20 = *v21;
    *((_QWORD *)v20 + 1) = v22;
    v23 = v9[11];
    v24 = &v6[v23];
    v25 = (char **)((char *)a2 + v23);
    v26 = v25[1];
    *(_QWORD *)v24 = *v25;
    *((_QWORD *)v24 + 1) = v26;
    v27 = *(int *)(a3 + 20);
    v28 = &v6[v27];
    v29 = (uint64_t)a2 + v27;
    *(_OWORD *)&v6[v27] = *(_OWORD *)((char *)a2 + v27);
    v30 = (int *)type metadata accessor for LayoutContext(0);
    v31 = v30[6];
    v42 = &v28[v31];
    v32 = v29 + v31;
    v33 = type metadata accessor for InternalWidgetFamily(0);
    v34 = *(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v33 - 8) + 16);
    swift_retain(v18);
    swift_bridgeObjectRetain(v22);
    swift_bridgeObjectRetain(v26);
    v34(v42, v32, v33);
    *(_OWORD *)&v28[v30[7]] = *(_OWORD *)(v29 + v30[7]);
    v35 = v30[8];
    v36 = &v28[v35];
    v37 = v29 + v35;
    v38 = type metadata accessor for ContentSizeCategory(0);
    (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v38 - 8) + 16))(v36, v37, v38);
    *(_QWORD *)&v28[v30[9]] = *(_QWORD *)(v29 + v30[9]);
    *(_QWORD *)&v28[v30[10]] = *(_QWORD *)(v29 + v30[10]);
    v28[v30[11]] = *(_BYTE *)(v29 + v30[11]);
    v28[v30[12]] = *(_BYTE *)(v29 + v30[12]);
  }
  return v6;
}

uint64_t sub_10003F648(uint64_t a1, uint64_t a2)
{
  int *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
  swift_unknownObjectRelease(*(_QWORD *)(a1 + 16));
  v4 = (int *)type metadata accessor for TodayContent(0);
  v5 = a1 + v4[8];
  v6 = type metadata accessor for URL(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6))
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v5, v6);
  swift_release(*(_QWORD *)(a1 + v4[9]));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + v4[10] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + v4[11] + 8));
  v8 = a1 + *(int *)(a2 + 20);
  v9 = type metadata accessor for LayoutContext(0);
  v10 = v8 + *(int *)(v9 + 24);
  v11 = type metadata accessor for InternalWidgetFamily(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 8))(v10, v11);
  v12 = v8 + *(int *)(v9 + 32);
  v13 = type metadata accessor for ContentSizeCategory(0);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 8))(v12, v13);
}

uint64_t sub_10003F760(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v5;
  uint64_t v6;
  uint64_t v7;
  int *v8;
  uint64_t v9;
  const void *v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int (*v13)(const void *, uint64_t, uint64_t);
  id v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void (*v33)(uint64_t, uint64_t, uint64_t);
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void *__dst;
  uint64_t v41;

  v5 = *(void **)a2;
  v6 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v6;
  v7 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 16) = v7;
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  v8 = (int *)type metadata accessor for TodayContent(0);
  v9 = v8[8];
  __dst = (void *)(a1 + v9);
  v10 = (const void *)(a2 + v9);
  v11 = type metadata accessor for URL(0);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v12 + 48);
  v14 = v5;
  swift_bridgeObjectRetain(v6);
  swift_unknownObjectRetain(v7);
  if (v13(v10, 1, v11))
  {
    v15 = sub_10001B520(&qword_1000B93A0);
    memcpy(__dst, v10, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v12 + 16))(__dst, v10, v11);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v12 + 56))(__dst, 0, 1, v11);
  }
  v16 = v8[9];
  v17 = *(_QWORD *)(a2 + v16);
  *(_QWORD *)(a1 + v16) = v17;
  v18 = v8[10];
  v19 = (_QWORD *)(a1 + v18);
  v20 = (_QWORD *)(a2 + v18);
  v21 = v20[1];
  *v19 = *v20;
  v19[1] = v21;
  v22 = v8[11];
  v23 = (_QWORD *)(a1 + v22);
  v24 = (_QWORD *)(a2 + v22);
  v25 = v24[1];
  *v23 = *v24;
  v23[1] = v25;
  v26 = *(int *)(a3 + 20);
  v27 = a1 + v26;
  v28 = a2 + v26;
  *(_OWORD *)(a1 + v26) = *(_OWORD *)(a2 + v26);
  v29 = (int *)type metadata accessor for LayoutContext(0);
  v30 = v29[6];
  v41 = v27 + v30;
  v31 = v28 + v30;
  v32 = type metadata accessor for InternalWidgetFamily(0);
  v33 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v32 - 8) + 16);
  swift_retain(v17);
  swift_bridgeObjectRetain(v21);
  swift_bridgeObjectRetain(v25);
  v33(v41, v31, v32);
  *(_OWORD *)(v27 + v29[7]) = *(_OWORD *)(v28 + v29[7]);
  v34 = v29[8];
  v35 = v27 + v34;
  v36 = v28 + v34;
  v37 = type metadata accessor for ContentSizeCategory(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v37 - 8) + 16))(v35, v36, v37);
  *(_QWORD *)(v27 + v29[9]) = *(_QWORD *)(v28 + v29[9]);
  *(_QWORD *)(v27 + v29[10]) = *(_QWORD *)(v28 + v29[10]);
  *(_BYTE *)(v27 + v29[11]) = *(_BYTE *)(v28 + v29[11]);
  *(_BYTE *)(v27 + v29[12]) = *(_BYTE *)(v28 + v29[12]);
  return a1;
}

uint64_t sub_10003F980(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v6;
  void *v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int *v13;
  uint64_t v14;
  void *v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t (*v19)(void *, uint64_t, uint64_t);
  int v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  int *v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  _QWORD *v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;

  v6 = *(void **)a2;
  v7 = *(void **)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v8 = v6;

  v9 = *(_QWORD *)(a2 + 8);
  v10 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v9;
  swift_bridgeObjectRetain(v9);
  swift_bridgeObjectRelease(v10);
  v11 = *(_QWORD *)(a2 + 16);
  v12 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v11;
  swift_unknownObjectRetain(v11);
  swift_unknownObjectRelease(v12);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  v13 = (int *)type metadata accessor for TodayContent(0);
  v14 = v13[8];
  v15 = (void *)(a1 + v14);
  v16 = (void *)(a2 + v14);
  v17 = type metadata accessor for URL(0);
  v18 = *(_QWORD *)(v17 - 8);
  v19 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v18 + 48);
  v20 = v19(v15, 1, v17);
  v21 = v19(v16, 1, v17);
  if (!v20)
  {
    if (!v21)
    {
      (*(void (**)(void *, void *, uint64_t))(v18 + 24))(v15, v16, v17);
      goto LABEL_7;
    }
    (*(void (**)(void *, uint64_t))(v18 + 8))(v15, v17);
    goto LABEL_6;
  }
  if (v21)
  {
LABEL_6:
    v22 = sub_10001B520(&qword_1000B93A0);
    memcpy(v15, v16, *(_QWORD *)(*(_QWORD *)(v22 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, void *, uint64_t))(v18 + 16))(v15, v16, v17);
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v18 + 56))(v15, 0, 1, v17);
LABEL_7:
  v23 = v13[9];
  v24 = *(_QWORD *)(a2 + v23);
  v25 = *(_QWORD *)(a1 + v23);
  *(_QWORD *)(a1 + v23) = v24;
  swift_retain(v24);
  swift_release(v25);
  v26 = v13[10];
  v27 = (_QWORD *)(a1 + v26);
  v28 = (_QWORD *)(a2 + v26);
  *v27 = *v28;
  v29 = v28[1];
  v30 = v27[1];
  v27[1] = v29;
  swift_bridgeObjectRetain(v29);
  swift_bridgeObjectRelease(v30);
  v31 = v13[11];
  v32 = (_QWORD *)(a1 + v31);
  v33 = (_QWORD *)(a2 + v31);
  *v32 = *v33;
  v34 = v33[1];
  v35 = v32[1];
  v32[1] = v34;
  swift_bridgeObjectRetain(v34);
  swift_bridgeObjectRelease(v35);
  v36 = *(int *)(a3 + 20);
  v37 = (_QWORD *)(a1 + v36);
  v38 = a2 + v36;
  *v37 = *(_QWORD *)(a2 + v36);
  v37[1] = *(_QWORD *)(a2 + v36 + 8);
  v39 = (int *)type metadata accessor for LayoutContext(0);
  v40 = v39[6];
  v41 = (char *)v37 + v40;
  v42 = v38 + v40;
  v43 = type metadata accessor for InternalWidgetFamily(0);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v43 - 8) + 24))(v41, v42, v43);
  v44 = v39[7];
  v45 = (_QWORD *)((char *)v37 + v44);
  v46 = (_QWORD *)(v38 + v44);
  *v45 = *v46;
  v45[1] = v46[1];
  v47 = v39[8];
  v48 = (char *)v37 + v47;
  v49 = v38 + v47;
  v50 = type metadata accessor for ContentSizeCategory(0);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v50 - 8) + 24))(v48, v49, v50);
  *(_QWORD *)((char *)v37 + v39[9]) = *(_QWORD *)(v38 + v39[9]);
  *(_QWORD *)((char *)v37 + v39[10]) = *(_QWORD *)(v38 + v39[10]);
  *((_BYTE *)v37 + v39[11]) = *(_BYTE *)(v38 + v39[11]);
  *((_BYTE *)v37 + v39[12]) = *(_BYTE *)(v38 + v39[12]);
  return a1;
}

uint64_t sub_10003FC28(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int *v6;
  uint64_t v7;
  void *v8;
  const void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  v6 = (int *)type metadata accessor for TodayContent(0);
  v7 = v6[8];
  v8 = (void *)(a1 + v7);
  v9 = (const void *)(a2 + v7);
  v10 = type metadata accessor for URL(0);
  v11 = *(_QWORD *)(v10 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10))
  {
    v12 = sub_10001B520(&qword_1000B93A0);
    memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v11 + 32))(v8, v9, v10);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
  }
  *(_QWORD *)(a1 + v6[9]) = *(_QWORD *)(a2 + v6[9]);
  *(_OWORD *)(a1 + v6[10]) = *(_OWORD *)(a2 + v6[10]);
  *(_OWORD *)(a1 + v6[11]) = *(_OWORD *)(a2 + v6[11]);
  v13 = *(int *)(a3 + 20);
  v14 = a1 + v13;
  v15 = a2 + v13;
  *(_OWORD *)(a1 + v13) = *(_OWORD *)(a2 + v13);
  v16 = (int *)type metadata accessor for LayoutContext(0);
  v17 = v16[6];
  v18 = v14 + v17;
  v19 = v15 + v17;
  v20 = type metadata accessor for InternalWidgetFamily(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 32))(v18, v19, v20);
  *(_OWORD *)(v14 + v16[7]) = *(_OWORD *)(v15 + v16[7]);
  v21 = v16[8];
  v22 = v14 + v21;
  v23 = v15 + v21;
  v24 = type metadata accessor for ContentSizeCategory(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 32))(v22, v23, v24);
  *(_QWORD *)(v14 + v16[9]) = *(_QWORD *)(v15 + v16[9]);
  *(_QWORD *)(v14 + v16[10]) = *(_QWORD *)(v15 + v16[10]);
  *(_BYTE *)(v14 + v16[11]) = *(_BYTE *)(v15 + v16[11]);
  *(_BYTE *)(v14 + v16[12]) = *(_BYTE *)(v15 + v16[12]);
  return a1;
}

uint64_t sub_10003FDE8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v6;
  uint64_t v7;
  uint64_t v8;
  int *v9;
  uint64_t v10;
  void *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t (*v15)(void *, uint64_t, uint64_t);
  int v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;

  v6 = *(void **)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;

  v7 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRelease(v7);
  v8 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_unknownObjectRelease(v8);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  v9 = (int *)type metadata accessor for TodayContent(0);
  v10 = v9[8];
  v11 = (void *)(a1 + v10);
  v12 = (void *)(a2 + v10);
  v13 = type metadata accessor for URL(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v14 + 48);
  v16 = v15(v11, 1, v13);
  v17 = v15(v12, 1, v13);
  if (!v16)
  {
    if (!v17)
    {
      (*(void (**)(void *, void *, uint64_t))(v14 + 40))(v11, v12, v13);
      goto LABEL_7;
    }
    (*(void (**)(void *, uint64_t))(v14 + 8))(v11, v13);
    goto LABEL_6;
  }
  if (v17)
  {
LABEL_6:
    v18 = sub_10001B520(&qword_1000B93A0);
    memcpy(v11, v12, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, void *, uint64_t))(v14 + 32))(v11, v12, v13);
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v14 + 56))(v11, 0, 1, v13);
LABEL_7:
  v19 = v9[9];
  v20 = *(_QWORD *)(a1 + v19);
  *(_QWORD *)(a1 + v19) = *(_QWORD *)(a2 + v19);
  swift_release(v20);
  v21 = v9[10];
  v22 = (_QWORD *)(a1 + v21);
  v23 = (uint64_t *)(a2 + v21);
  v25 = *v23;
  v24 = v23[1];
  v26 = v22[1];
  *v22 = v25;
  v22[1] = v24;
  swift_bridgeObjectRelease(v26);
  v27 = v9[11];
  v28 = (_QWORD *)(a1 + v27);
  v29 = (uint64_t *)(a2 + v27);
  v31 = *v29;
  v30 = v29[1];
  v32 = v28[1];
  *v28 = v31;
  v28[1] = v30;
  swift_bridgeObjectRelease(v32);
  v33 = *(int *)(a3 + 20);
  v34 = a1 + v33;
  v35 = a2 + v33;
  *(_OWORD *)(a1 + v33) = *(_OWORD *)(a2 + v33);
  v36 = (int *)type metadata accessor for LayoutContext(0);
  v37 = v36[6];
  v38 = v34 + v37;
  v39 = v35 + v37;
  v40 = type metadata accessor for InternalWidgetFamily(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v40 - 8) + 40))(v38, v39, v40);
  *(_OWORD *)(v34 + v36[7]) = *(_OWORD *)(v35 + v36[7]);
  v41 = v36[8];
  v42 = v34 + v41;
  v43 = v35 + v41;
  v44 = type metadata accessor for ContentSizeCategory(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v44 - 8) + 40))(v42, v43, v44);
  *(_QWORD *)(v34 + v36[9]) = *(_QWORD *)(v35 + v36[9]);
  *(_QWORD *)(v34 + v36[10]) = *(_QWORD *)(v35 + v36[10]);
  *(_BYTE *)(v34 + v36[11]) = *(_BYTE *)(v35 + v36[11]);
  *(_BYTE *)(v34 + v36[12]) = *(_BYTE *)(v35 + v36[12]);
  return a1;
}

uint64_t sub_10004003C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100040048);
}

uint64_t sub_100040048(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;

  v6 = type metadata accessor for TodayContent(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
  }
  else
  {
    v8 = type metadata accessor for LayoutContext(0);
    v10 = a1 + *(int *)(a3 + 20);
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48);
  }
  return v9(v10, a2, v8);
}

uint64_t sub_1000400BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000400C8);
}

uint64_t sub_1000400C8(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;

  v8 = type metadata accessor for TodayContent(0);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    v10 = type metadata accessor for LayoutContext(0);
    v12 = a1 + *(int *)(a4 + 20);
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56);
  }
  return v11(v12, a2, a2, v10);
}

uint64_t type metadata accessor for RegularContentView(uint64_t a1)
{
  uint64_t result;

  result = qword_1000BABF0;
  if (!qword_1000BABF0)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for RegularContentView);
  return result;
}

uint64_t sub_100040180(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  unint64_t v4;
  _QWORD v5[2];

  result = type metadata accessor for TodayContent(319);
  if (v3 <= 0x3F)
  {
    v5[0] = *(_QWORD *)(result - 8) + 64;
    result = type metadata accessor for LayoutContext(319);
    if (v4 <= 0x3F)
    {
      v5[1] = *(_QWORD *)(result - 8) + 64;
      swift_initStructMetadata(a1, 256, 2, v5, a1 + 16);
      return 0;
    }
  }
  return result;
}

uint64_t sub_100040204(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_10009CA2C, 1);
}

double sub_100040214@<D0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  double result;
  uint64_t v15;
  uint64_t v16;

  v4 = sub_10001B520(&qword_1000BAC50);
  v5 = __chkstk_darwin(v4);
  v7 = (char *)&v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v9 = (char *)&v15 - v8;
  v10 = sub_100040338(&v16);
  v11 = v16;
  *(_QWORD *)v9 = static HorizontalAlignment.leading.getter(v10);
  *((_QWORD *)v9 + 1) = 0;
  v9[16] = 0;
  v12 = sub_10001B520(&qword_1000BAC58);
  sub_1000406E0(a1, &v9[*(int *)(v12 + 44)]);
  sub_10002CCB0((uint64_t)v9, (uint64_t)v7, &qword_1000BAC50);
  *a2 = v11;
  v13 = sub_10001B520(&qword_1000BAC60);
  sub_10002CCB0((uint64_t)v7, (uint64_t)a2 + *(int *)(v13 + 48), &qword_1000BAC50);
  swift_retain(v11);
  sub_10002CCF4((uint64_t)v9, &qword_1000BAC50);
  sub_10002CCF4((uint64_t)v7, &qword_1000BAC50);
  *(_QWORD *)&result = swift_release(v11).n128_u64[0];
  return result;
}

uint64_t sub_100040338@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  id v18;
  id v19;
  id v20;
  uint64_t v21;
  id v22;
  void *v23;
  id v24;
  id v25;
  id v26;
  uint64_t v27;
  uint64_t result;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  _QWORD aBlock[5];
  uint64_t v38;

  v36 = a1;
  v2 = sub_10001B520(&qword_1000BAC88);
  v35 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v4 = (char *)&v33 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v34 = sub_10001B520(&qword_1000BAC90);
  __chkstk_darwin(v34);
  v6 = (char *)&v33 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_10001B520(&qword_1000B93A0);
  __chkstk_darwin(v7);
  v9 = (char *)&v33 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for URL(0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = __chkstk_darwin(v10);
  v14 = (char *)&v33 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v16 = (char *)&v33 - v15;
  v17 = type metadata accessor for TodayContent(0);
  sub_10002CCB0(v1 + *(int *)(v17 + 32), (uint64_t)v9, &qword_1000B93A0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10) == 1)
  {
    sub_10002CCF4((uint64_t)v9, &qword_1000B93A0);
    v18 = objc_msgSend(*(id *)(v1 + 16), "widgetConfig");
    v19 = sub_100040F1C(v18, (SEL *)&selRef_backgroundColorLight);
    v20 = sub_100040F1C(v18, (SEL *)&selRef_backgroundColorDark);
    v21 = swift_allocObject(&unk_1000AC520, 32, 7);
    *(_QWORD *)(v21 + 16) = v19;
    *(_QWORD *)(v21 + 24) = v20;
    v22 = objc_allocWithZone((Class)UIColor);
    aBlock[4] = sub_1000340A4;
    v38 = v21;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_10004F744;
    aBlock[3] = &unk_1000AC538;
    v23 = _Block_copy(aBlock);
    v24 = v19;
    v25 = v20;
    v26 = objc_msgSend(v22, "initWithDynamicProvider:", v23);
    _Block_release(v23);
    swift_release(v38);
    v27 = Color.init(_:)(v26);

    aBlock[0] = v27;
    result = AnyView.init<A>(_:)(aBlock, &type metadata for Color, &protocol witness table for Color);
    v29 = result;
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v16, v9, v10);
    v30 = (*(uint64_t (**)(char *, char *, uint64_t))(v11 + 16))(v14, v16, v10);
    __chkstk_darwin(v30);
    *(&v33 - 2) = v1;
    Link.init(destination:label:)(v14, sub_10004150C, &v33 - 4, &type metadata for Color, &protocol witness table for Color);
    v31 = sub_10002CE94(&qword_1000BAC98, &qword_1000BAC88, (uint64_t)&protocol conformance descriptor for Link<A>);
    View.accessibilityHidden(_:)(1, v2, v31);
    (*(void (**)(char *, uint64_t))(v35 + 8))(v4, v2);
    v32 = sub_100041514();
    v29 = AnyView.init<A>(_:)(v6, v34, v32);
    result = (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v16, v10);
  }
  *v36 = v29;
  return result;
}

uint64_t sub_1000406E0@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void (*v22)(_BYTE *, _BYTE *, uint64_t);
  char v23;
  _BYTE *v24;
  _BYTE *v25;
  uint64_t v26;
  void (*v27)(_BYTE *, uint64_t);
  char v29;
  char v30;
  _BYTE v31[4];
  int v32;
  _BYTE *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _BYTE *v43;
  unsigned __int8 v44;
  char v45;
  char v46;
  char v47;
  char v48;
  char v49;
  char v50;
  uint64_t v51;
  char v52;
  uint64_t v53;
  char v54;
  uint64_t v55;
  char v56;
  uint64_t v57;
  char v58;
  uint64_t v59;
  char v60;
  uint64_t v61;
  unsigned __int8 v62;
  uint64_t v63;
  uint64_t v64;

  v43 = a2;
  v3 = type metadata accessor for RegularContentView(0);
  v4 = *(_QWORD *)(v3 - 8);
  v5 = *(_QWORD *)(v4 + 64);
  __chkstk_darwin(v3);
  v6 = sub_10001B520(&qword_1000BAC68);
  v34 = *(_QWORD *)(v6 - 8);
  v7 = v34;
  v8 = __chkstk_darwin(v6);
  v10 = &v31[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v8);
  v12 = &v31[-v11];
  v13 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 16);
  sub_10002A83C(a1, (uint64_t)&v31[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)], type metadata accessor for RegularContentView);
  v14 = *(unsigned __int8 *)(v4 + 80);
  v15 = (v14 + 16) & ~v14;
  v16 = swift_allocObject(&unk_1000AC4F8, v15 + v5, v14 | 7);
  sub_10002AC74((uint64_t)&v31[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)], v16 + v15, type metadata accessor for RegularContentView);
  v17 = type metadata accessor for SectionView(0);
  v18 = sub_10001C96C(&qword_1000BAC70, type metadata accessor for SectionView, (uint64_t)&unk_10008C448);
  v33 = v12;
  v19 = ForEach<>.init(_:content:)(0, v13, sub_100041378, v16, v17, v18);
  v20 = static Alignment.center.getter(v19);
  v30 = 1;
  v29 = 1;
  _FlexFrameLayout.init(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)(&v51, 0, 1, 0, 1, 0, 1, 0, 0, 0, v29, 0, v30, v20, v21);
  v42 = v51;
  v41 = v53;
  v40 = v55;
  v39 = v57;
  v38 = v59;
  v37 = v61;
  v36 = v63;
  v35 = v64;
  v50 = 1;
  v49 = v52;
  v48 = v54;
  v47 = v56;
  v46 = v58;
  v45 = v60;
  v44 = v62;
  v22 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(v7 + 16);
  v22(v10, v12, v6);
  LOBYTE(v17) = v50;
  LOBYTE(v16) = v49;
  LOBYTE(v5) = v48;
  v23 = v47;
  LOBYTE(v13) = v46;
  LOBYTE(v12) = v45;
  v32 = v44;
  v24 = v43;
  v22(v43, v10, v6);
  v25 = &v24[*(int *)(sub_10001B520(&qword_1000BAC78) + 48)];
  *(_QWORD *)v25 = 0;
  v25[8] = v17;
  *((_QWORD *)v25 + 2) = v42;
  v25[24] = v16;
  *((_QWORD *)v25 + 4) = v41;
  v25[40] = v5;
  *((_QWORD *)v25 + 6) = v40;
  v25[56] = v23;
  *((_QWORD *)v25 + 8) = v39;
  v25[72] = v13;
  *((_QWORD *)v25 + 10) = v38;
  v25[88] = (_BYTE)v12;
  *((_QWORD *)v25 + 12) = v37;
  v25[104] = v32;
  v26 = v35;
  *((_QWORD *)v25 + 14) = v36;
  *((_QWORD *)v25 + 15) = v26;
  v27 = *(void (**)(_BYTE *, uint64_t))(v34 + 8);
  v27(v33, v6);
  return ((uint64_t (*)(_BYTE *, uint64_t))v27)(v10, v6);
}

uint64_t sub_100040A5C@<X0>(unint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t result;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t KeyPath;
  uint64_t v20;
  int *v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29;
  uint64_t v30;
  _OWORD v31[9];
  uint64_t v32;

  v6 = type metadata accessor for TodayContent(0);
  __chkstk_darwin(v6);
  v8 = (char *)&v30 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for Section(0);
  v10 = __chkstk_darwin(v9);
  v12 = (char *)&v30 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = __chkstk_darwin(v10);
  v16 = (char *)&v30 - v15;
  if ((a1 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else
  {
    v17 = *(_QWORD *)(a2 + 8);
    if (*(_QWORD *)(v17 + 16) > a1)
    {
      v18 = v17
          + ((*(unsigned __int8 *)(v14 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80))
          + *(_QWORD *)(v14 + 72) * a1;
      sub_10002A83C(v18, (uint64_t)&v30 - v15, type metadata accessor for Section);
      sub_10002A83C(a2, (uint64_t)v8, type metadata accessor for TodayContent);
      sub_10002A83C(v18, (uint64_t)v12, type metadata accessor for Section);
      sub_100040C88(a1, (uint64_t)v31);
      sub_1000413C4((uint64_t)v12);
      KeyPath = swift_getKeyPath(&unk_10008BC08);
      v20 = swift_getKeyPath(&unk_10008BC38);
      v21 = (int *)type metadata accessor for SectionView(0);
      v22 = (uint64_t *)(a3 + v21[8]);
      *v22 = v20;
      v23 = sub_10001B520(&qword_1000BAC80);
      swift_storeEnumTagMultiPayload(v22, v23, 0);
      sub_10002AC74((uint64_t)v16, a3, type metadata accessor for Section);
      result = sub_10002AC74((uint64_t)v8, a3 + v21[5], type metadata accessor for TodayContent);
      v24 = a3 + v21[6];
      v25 = v31[7];
      *(_OWORD *)(v24 + 96) = v31[6];
      *(_OWORD *)(v24 + 112) = v25;
      *(_OWORD *)(v24 + 128) = v31[8];
      *(_QWORD *)(v24 + 144) = v32;
      v26 = v31[3];
      *(_OWORD *)(v24 + 32) = v31[2];
      *(_OWORD *)(v24 + 48) = v26;
      v27 = v31[5];
      *(_OWORD *)(v24 + 64) = v31[4];
      *(_OWORD *)(v24 + 80) = v27;
      v28 = v31[1];
      *(_OWORD *)v24 = v31[0];
      *(_OWORD *)(v24 + 16) = v28;
      v29 = a3 + v21[7];
      *(_QWORD *)v29 = KeyPath;
      *(_BYTE *)(v29 + 8) = 0;
      return result;
    }
  }
  __break(1u);
  return result;
}

void sub_100040C88(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v2;
  BOOL v4;
  double *v5;
  double v6;
  id v7;
  double v8;
  double v9;
  double v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  double v19;
  double v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  _QWORD v24[4];
  char v25;
  __int128 v26;
  uint64_t v27;
  __int128 v28;
  __int128 v29;
  uint64_t v30;
  char v31;

  if (__OFADD__(a1, 1))
  {
    __break(1u);
  }
  else
  {
    v4 = a1 + 1 != *(_QWORD *)(*(_QWORD *)(v2 + 8) + 16);
    v5 = (double *)(v2 + *(int *)(type metadata accessor for RegularContentView(0) + 20));
    v6 = sub_100043D4C();
    v7 = sub_1000454BC();
    objc_msgSend(v7, "nt_scaledValueForValue:", 1.0);
    v9 = v8;

    v10 = v9 * 12.0 + *v5 + 6.0;
    v11 = sub_1000454BC();
    sub_100043DD0((uint64_t)v24);
    v12 = v24[0];
    v13 = v24[1];
    v14 = v24[2];
    v15 = v24[3];
    v16 = v25;
    v17 = v27;
    v22 = v26;
    v23 = v29;
    v18 = v30;
    v19 = v5[1];
    sub_10004581C();
    v31 = v16;
    v21 = v28;
    *(_BYTE *)a2 = v4;
    *(double *)(a2 + 8) = v6;
    *(_QWORD *)(a2 + 16) = 0x402E000000000000;
    *(double *)(a2 + 24) = v10;
    *(_QWORD *)(a2 + 32) = v11;
    *(_QWORD *)(a2 + 40) = v12;
    *(_QWORD *)(a2 + 48) = v13;
    *(_QWORD *)(a2 + 56) = v14;
    *(_QWORD *)(a2 + 64) = v15;
    *(_BYTE *)(a2 + 72) = v16;
    *(_OWORD *)(a2 + 80) = v22;
    *(_QWORD *)(a2 + 96) = v17;
    *(_OWORD *)(a2 + 104) = v21;
    *(_OWORD *)(a2 + 120) = v23;
    *(_QWORD *)(a2 + 136) = v18;
    *(double *)(a2 + 144) = v19 - v20;
  }
}

void sub_100040DD8(_WORD *a1@<X8>)
{
  *a1 = 256;
}

void sub_100040DE4(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  id v3;
  id v4;
  id v5;
  uint64_t v6;
  id v7;
  void *v8;
  id v9;
  id v10;
  id v11;
  uint64_t v12;
  _QWORD v13[5];
  uint64_t v14;

  v3 = objc_msgSend(*(id *)(a1 + 16), "widgetConfig");
  v4 = sub_100040F1C(v3, (SEL *)&selRef_backgroundColorLight);
  v5 = sub_100040F1C(v3, (SEL *)&selRef_backgroundColorDark);
  v6 = swift_allocObject(&unk_1000AC570, 32, 7);
  *(_QWORD *)(v6 + 16) = v4;
  *(_QWORD *)(v6 + 24) = v5;
  v7 = objc_allocWithZone((Class)UIColor);
  v13[4] = sub_10004165C;
  v14 = v6;
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 1107296256;
  v13[2] = sub_10004F744;
  v13[3] = &unk_1000AC588;
  v8 = _Block_copy(v13);
  v9 = v4;
  v10 = v5;
  v11 = objc_msgSend(v7, "initWithDynamicProvider:", v8);
  _Block_release(v8);
  swift_release(v14);
  v12 = Color.init(_:)(v11);

  *a2 = v12;
}

id sub_100040F1C(void *a1, SEL *a2)
{
  id v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  NSString v6;
  id v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  id v15;

  if (!a1)
    return objc_msgSend((id)objc_opt_self(UIColor), "clearColor");
  v2 = objc_msgSend(a1, *a2);
  if (!v2)
    return objc_msgSend((id)objc_opt_self(UIColor), "clearColor");
  v3 = v2;
  static String._unconditionallyBridgeFromObjectiveC(_:)(v2);
  v5 = v4;

  swift_bridgeObjectRetain(v5);
  v6 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v5);
  v7 = objc_msgSend((id)objc_opt_self(FCColor), "colorWithHexString:", v6);

  objc_msgSend(v7, "red");
  v9 = v8;
  objc_msgSend(v7, "green");
  v11 = v10;
  objc_msgSend(v7, "blue");
  v13 = v12;
  objc_msgSend(v7, "alpha");
  v15 = objc_msgSend(objc_allocWithZone((Class)UIColor), "initWithRed:green:blue:alpha:", v9, v11, v13, v14);
  swift_bridgeObjectRelease(v5);

  return v15;
}

uint64_t sub_100041084()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;

  v20 = type metadata accessor for ContainerBackgroundPlacement(0);
  v1 = *(_QWORD *)(v20 - 8);
  __chkstk_darwin(v20);
  v3 = (char *)&v19 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_10001B520(&qword_1000BAC28);
  v5 = __chkstk_darwin(v4);
  v7 = (uint64_t *)((char *)&v19 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  *v7 = static Alignment.top.getter(v5);
  v7[1] = v8;
  v9 = sub_10001B520(&qword_1000BAC30);
  sub_100040214(v0, (_QWORD *)((char *)v7 + *(int *)(v9 + 44)));
  v11 = static ContainerBackgroundPlacement.widget.getter(v10);
  v12 = static Alignment.center.getter(v11);
  v14 = v13;
  v15 = sub_10001B520(&qword_1000BAC38);
  v16 = sub_10002CE94(&qword_1000BAC40, &qword_1000BAC28, (uint64_t)&protocol conformance descriptor for ZStack<A>);
  v17 = sub_10002CE94(&qword_1000BAC48, &qword_1000BAC38, (uint64_t)&protocol conformance descriptor for _ShapeView<A, B>);
  View.containerBackground<A>(for:alignment:content:)(v3, v12, v14, sub_100040DD8, 0, v4, v15, v16, v17);
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v20);
  return sub_10002CCF4((uint64_t)v7, &qword_1000BAC28);
}

uint64_t sub_10004121C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v1 = type metadata accessor for RegularContentView(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  v6 = v0 + v4;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v4 + 8));
  swift_unknownObjectRelease(*(_QWORD *)(v0 + v4 + 16));
  v7 = (int *)type metadata accessor for TodayContent(0);
  v8 = v0 + v4 + v7[8];
  v9 = type metadata accessor for URL(0);
  v10 = *(_QWORD *)(v9 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9))
    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v8, v9);
  swift_release(*(_QWORD *)(v6 + v7[9]));
  swift_bridgeObjectRelease(*(_QWORD *)(v6 + v7[10] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v6 + v7[11] + 8));
  v11 = v6 + *(int *)(v1 + 20);
  v12 = type metadata accessor for LayoutContext(0);
  v13 = v11 + *(int *)(v12 + 24);
  v14 = type metadata accessor for InternalWidgetFamily(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 8))(v13, v14);
  v15 = v11 + *(int *)(v12 + 32);
  v16 = type metadata accessor for ContentSizeCategory(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 8))(v15, v16);
  return swift_deallocObject(v0, v4 + v5, v3 | 7);
}

uint64_t sub_100041378@<X0>(unint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;

  v5 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for RegularContentView(0) - 8) + 80);
  return sub_100040A5C(a1, v2 + ((v5 + 16) & ~v5), a2);
}

uint64_t sub_1000413C4(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for Section(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void sub_100041400(double *a1@<X8>)
{
  *a1 = EnvironmentValues.pixelLength.getter();
}

uint64_t sub_100041428()
{
  return EnvironmentValues.colorScheme.getter();
}

uint64_t sub_100041448(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v7;

  v2 = type metadata accessor for ColorScheme(0);
  __chkstk_darwin(v2);
  v4 = (char *)&v7 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t))(v5 + 16))(v4, a1);
  return EnvironmentValues.colorScheme.setter(v4);
}

uint64_t sub_1000414C8()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1000414F4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100041504(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

void sub_10004150C(uint64_t *a1@<X8>)
{
  uint64_t v1;

  sub_100040DE4(*(_QWORD *)(v1 + 16), a1);
}

unint64_t sub_100041514()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000BACA0;
  if (!qword_1000BACA0)
  {
    v1 = sub_10001B560(&qword_1000BAC90);
    sub_10002CE94(&qword_1000BAC98, &qword_1000BAC88, (uint64_t)&protocol conformance descriptor for Link<A>);
    sub_10001C96C((unint64_t *)&qword_1000B9BD8, (uint64_t (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier, (uint64_t)&protocol conformance descriptor for AccessibilityAttachmentModifier);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000BACA0);
  }
  return result;
}

uint64_t sub_1000415B0()
{
  _QWORD v1[4];

  v1[0] = sub_10001B560(&qword_1000BAC28);
  v1[1] = sub_10001B560(&qword_1000BAC38);
  v1[2] = sub_10002CE94(&qword_1000BAC40, &qword_1000BAC28, (uint64_t)&protocol conformance descriptor for ZStack<A>);
  v1[3] = sub_10002CE94(&qword_1000BAC48, &qword_1000BAC38, (uint64_t)&protocol conformance descriptor for _ShapeView<A, B>);
  return swift_getOpaqueTypeConformance2(v1, &opaque type descriptor for <<opaque return type of View.containerBackground<A>(for:alignment:content:)>>, 1);
}

void sub_100041660(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  _QWORD v30[4];
  uint64_t v31;
  unint64_t v32;

  v12 = sub_10001B520(&qword_1000B9980);
  v13 = swift_allocObject(v12, 72, 7);
  *(_OWORD *)(v13 + 16) = xmmword_10008AC60;
  v31 = 0;
  v32 = 0xE000000000000000;
  v14 = type metadata accessor for EntryRequest(0);
  _print_unlocked<A, B>(_:_:)(a5, &v31, v14, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
  v15 = v31;
  v16 = v32;
  *(_QWORD *)(v13 + 56) = &type metadata for String;
  *(_QWORD *)(v13 + 64) = sub_10001FB34();
  *(_QWORD *)(v13 + 32) = v15;
  *(_QWORD *)(v13 + 40) = v16;
  v17 = sub_10002CC78(0, (unint64_t *)&qword_1000BBB00, OS_os_log_ptr);
  v18 = (void *)static OS_os_log.default.getter(v17);
  v19 = static os_log_type_t.default.getter();
  os_log(_:dso:log:type:_:)("fetching entry for request %{public}@", 37, 2, &_mh_execute_header, v18, v19, v13);
  swift_bridgeObjectRelease(v13);

  v30[2] = a6;
  v30[3] = a5;
  v20 = type metadata accessor for TodayContent(0);
  v21 = firstly<A>(closure:)(sub_100041E40, v30, v20);
  v22 = swift_allocObject(&unk_1000AC628, 32, 7);
  *(_QWORD *)(v22 + 16) = a1;
  *(_QWORD *)(v22 + 24) = a2;
  v23 = swift_retain(a2);
  v24 = (void *)zalgo.getter(v23);
  v25 = Promise.then<A>(on:closure:)(v24, sub_100041E7C, v22, (char *)&type metadata for () + 8);
  swift_release(v21);
  swift_release(v22);

  v26 = swift_allocObject(&unk_1000AC650, 32, 7);
  *(_QWORD *)(v26 + 16) = a3;
  *(_QWORD *)(v26 + 24) = a4;
  v27 = swift_retain(a4);
  v28 = (void *)zalgo.getter(v27);
  v29 = Promise.error(on:closure:)(v28, sub_100041E94, v26);
  swift_release(v29);
  swift_release(v25);
  swift_release(v26);

}

uint64_t sub_100041864(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE v14[16];
  uint64_t *v15;
  uint64_t v16;

  v4 = type metadata accessor for ContentServiceRequest(0);
  __chkstk_darwin(v4);
  v6 = (uint64_t *)&v14[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v7 = sub_10001D9B4((_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 40));
  v8 = sub_100041E9C();
  v9 = type metadata accessor for EntryRequest(0);
  sub_10002A83C(a2 + *(int *)(v9 + 20), (uint64_t)v6 + *(int *)(v4 + 20), type metadata accessor for LayoutContext);
  sub_10002A83C(a2 + *(int *)(v9 + 24), (uint64_t)v6 + *(int *)(v4 + 24), type metadata accessor for NewsWidgetInfo);
  *v6 = v8;
  v10 = *v7;
  v15 = v6;
  v16 = v10;
  v11 = sub_10001B520(&qword_1000BAD50);
  swift_allocObject(v11, *(unsigned int *)(v11 + 48), *(unsigned __int16 *)(v11 + 52));
  v12 = Promise.init(resolver:)(sub_100042728, v14);
  sub_100027D34((uint64_t)v6, type metadata accessor for ContentServiceRequest);
  return v12;
}

uint64_t sub_100041994(uint64_t a1, void (*a2)(char *))
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v10;

  v4 = type metadata accessor for NewsTimelineEntry(0);
  v5 = __chkstk_darwin(v4);
  v7 = (char *)&v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_10002A83C(a1, (uint64_t)&v7[*(int *)(v5 + 20)], type metadata accessor for TodayContent);
  Date.init()(v8);
  a2(v7);
  return sub_100027D34((uint64_t)v7, type metadata accessor for NewsTimelineEntry);
}

uint64_t sub_100041A44(uint64_t a1, uint64_t (*a2)(uint64_t))
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;

  v4 = static os_log_type_t.error.getter(a1);
  v5 = sub_10001B520(&qword_1000B9980);
  v6 = swift_allocObject(v5, 72, 7);
  *(_OWORD *)(v6 + 16) = xmmword_10008AC60;
  v14 = 0;
  v15 = 0xE000000000000000;
  v13 = a1;
  v7 = sub_10001B520(&qword_1000B99D8);
  _print_unlocked<A, B>(_:_:)(&v13, &v14, v7, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
  v8 = v14;
  v9 = v15;
  *(_QWORD *)(v6 + 56) = &type metadata for String;
  *(_QWORD *)(v6 + 64) = sub_10001FB34();
  *(_QWORD *)(v6 + 32) = v8;
  *(_QWORD *)(v6 + 40) = v9;
  v10 = sub_10002CC78(0, (unint64_t *)&qword_1000BBB00, OS_os_log_ptr);
  v11 = (void *)static OS_os_log.default.getter(v10);
  os_log(_:dso:log:type:_:)("encountered %{public}@ while fetching entry", 43, 2, &_mh_execute_header, v11, v4, v6);
  swift_bridgeObjectRelease(v6);

  return a2(a1);
}

uint64_t sub_100041B70@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  id *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD v26[2];
  unsigned __int8 v27;
  uint64_t v28;
  uint64_t v29;

  v7 = type metadata accessor for ContentServiceRequest(0);
  __chkstk_darwin(v7);
  v9 = (id *)((char *)&v26[-1] - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  v10 = type metadata accessor for TodayContent(0);
  v11 = __chkstk_darwin(v10);
  v13 = (char *)&v26[-1] - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v15 = (char *)&v26[-1] - v14;
  sub_10001D9B4((_QWORD *)(v3 + 16), *(_QWORD *)(v3 + 40));
  v16 = sub_100041E9C();
  v17 = type metadata accessor for EntryRequest(0);
  sub_10002A83C(a1 + *(int *)(v17 + 20), (uint64_t)v9 + *(int *)(v7 + 20), type metadata accessor for LayoutContext);
  sub_10002A83C(a1 + *(int *)(v17 + 24), (uint64_t)v9 + *(int *)(v7 + 24), type metadata accessor for NewsWidgetInfo);
  *v9 = (id)v16;
  v18 = (void *)_convertErrorToNSError(_:)(a2);
  sub_10006FD78(v18, (uint64_t)v26);
  v19 = v26[0];
  v20 = v26[1];
  LODWORD(v7) = v27;
  v21 = v28;
  sub_10006F0BC(v9, v29, (uint64_t)v13);
  sub_10005DA74(v19, v20, v7, v21, (uint64_t)v15);
  sub_100027D34((uint64_t)v13, type metadata accessor for TodayContent);
  sub_1000249D8(v19, v20, v7);

  swift_bridgeObjectRelease(v21);
  sub_100027D34((uint64_t)v9, type metadata accessor for ContentServiceRequest);
  v22 = type metadata accessor for NewsTimelineEntry(0);
  v23 = sub_10002A83C((uint64_t)v15, a3 + *(int *)(v22 + 20), type metadata accessor for TodayContent);
  Date.init()(v23);
  return sub_100027D34((uint64_t)v15, type metadata accessor for TodayContent);
}

uint64_t sub_100041D64()
{
  uint64_t v0;

  sub_10001DA60((_QWORD *)(v0 + 16));
  return swift_deallocClassInstance(v0, 56, 7);
}

uint64_t type metadata accessor for EntryService()
{
  return objc_opt_self(_TtC7NewsTag12EntryService);
}

uint64_t sub_100041DA8(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD v5[4];

  v2 = *v1;
  v5[2] = a1;
  v5[3] = v2;
  v3 = sub_10001B520(&qword_1000BAD48);
  swift_allocObject(v3, *(unsigned int *)(v3 + 48), *(unsigned __int16 *)(v3 + 52));
  return Promise.init(resolver:)(sub_100041DFC, v5);
}

void sub_100041DFC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  sub_100041660(a1, a2, a3, a4, *(_QWORD *)(v4 + 16), *(_QWORD *)(v4 + 24));
}

uint64_t type metadata accessor for EntryRequest(uint64_t a1)
{
  uint64_t result;

  result = qword_1000BADB8;
  if (!qword_1000BADB8)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for EntryRequest);
  return result;
}

uint64_t sub_100041E40()
{
  uint64_t v0;

  return sub_100041864(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t sub_100041E58()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100041E7C(uint64_t a1)
{
  uint64_t v1;

  return sub_100041994(a1, *(void (**)(char *))(v1 + 16));
}

uint64_t sub_100041E94(uint64_t a1)
{
  uint64_t v1;

  return sub_100041A44(a1, *(uint64_t (**)(uint64_t))(v1 + 16));
}

uint64_t sub_100041E9C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  id v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  id v21;
  void *v22;
  uint64_t result;
  NSURL *v24;
  void *v25;
  void *v26;
  char *v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  void (*v31)(char *, uint64_t, uint64_t);
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  double v38;
  id v39;
  double v40;
  double v41;
  double v42;
  double v43;
  double v44;
  double v45;
  double v46;
  double v47;
  double v48;
  double v49;
  double v50;
  double v51;
  double v52;
  double v53;
  id v54;
  double v55;
  double v56;
  id v57;
  uint64_t v58;
  NSString v59;
  id v60;
  void *v61;
  id v62;
  uint64_t v63;
  uint64_t v64;
  _QWORD v65[2];
  double *v66;
  char *v67;
  uint64_t v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;

  v1 = type metadata accessor for EntryRequest(0);
  __chkstk_darwin(v1);
  v68 = (uint64_t)v65 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = type metadata accessor for InternalWidgetFamily(0);
  v4 = *(_QWORD *)(v3 - 8);
  v5 = __chkstk_darwin(v3);
  v7 = (char *)v65 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v67 = (char *)v65 - v8;
  v9 = type metadata accessor for URL(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)v65 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_10001B520(&qword_1000B93A0);
  __chkstk_darwin(v13);
  v15 = (char *)v65 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v69 = (char *)objc_msgSend(objc_allocWithZone((Class)NTPBSectionSlotCostInfo), "init");
  if (!v69)
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  v16 = objc_msgSend(objc_allocWithZone((Class)NTPBTodayResultOperationInfo), "init");
  if (!v16)
  {
LABEL_41:
    __break(1u);
    goto LABEL_42;
  }
  v17 = v16;
  v65[1] = v1;
  v18 = *(int *)(v1 + 20);
  v71 = v0;
  v19 = v0 + v18;
  v70 = type metadata accessor for LayoutContext(0);
  v66 = (double *)(v19 + *(int *)(v70 + 28));
  objc_msgSend(v17, "setSlotsLimit:", v66[1]);
  objc_msgSend(v17, "setRespectsWidgetSlotsLimit:", 1);
  objc_msgSend(v17, "setRespectsWidgetVisibleSectionsPerQueueLimit:", 1);
  v20 = sub_100043F18();
  if (v20 < 0)
  {
    __break(1u);
    goto LABEL_33;
  }
  objc_msgSend(v17, "setSourceNameImageSizePreset:", v20);
  objc_msgSend(v17, "setFetchWidgetConfig:", 1);
  v21 = (id)FCURLForContainerizedUserAccountCachesDirectory(1);
  if (!v21)
  {
LABEL_42:
    result = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v10 + 56))(v15, 1, 1, v9);
    goto LABEL_43;
  }
  v22 = v21;
  static URL._unconditionallyBridgeFromObjectiveC(_:)(v21);

  (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v15, v12, v9);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v15, 0, 1, v9);
  result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v10 + 48))(v15, 1, v9);
  if ((_DWORD)result != 1)
  {
    URL._bridgeToObjectiveC()(v24);
    v26 = v25;
    (*(void (**)(char *, uint64_t))(v10 + 8))(v15, v9);
    objc_msgSend(v17, "setAssetsDirectoryFileURL:", v26);

    objc_msgSend(v17, "setThumbnailSizePreset:", 3);
    v27 = v67;
    (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v67, v19 + *(int *)(v70 + 24), v3);
    v28 = (*(uint64_t (**)(char *, uint64_t))(v4 + 88))(v27, v3);
    v29 = enum case for InternalWidgetFamily.systemSmall(_:);
    if (v28 == enum case for InternalWidgetFamily.systemSmall(_:))
    {
      v30 = 1;
    }
    else if (v28 == enum case for InternalWidgetFamily.systemMedium(_:))
    {
      v30 = 2;
    }
    else if (v28 == enum case for InternalWidgetFamily.systemLarge(_:))
    {
      v30 = 3;
    }
    else
    {
      v30 = 0;
      if (v28 != enum case for InternalWidgetFamily.systemExtraLarge(_:)
        && v28 != enum case for InternalWidgetFamily.transparentMedium(_:))
      {
        if (v28 == enum case for InternalWidgetFamily.newsLargeTall(_:))
        {
          v30 = 4;
        }
        else
        {
          (*(void (**)(char *, uint64_t, _QWORD))(v4 + 8))(v27, v3, 0);
          v30 = 0;
        }
      }
    }
    objc_msgSend(v17, "setWidgetSize:", v30);
    v31 = *(void (**)(char *, uint64_t, uint64_t))(v4 + 104);
    v31(v7, v29, v3);
    v32 = sub_100042730();
    dispatch thunk of RawRepresentable.rawValue.getter(&v73, v3, v32);
    dispatch thunk of RawRepresentable.rawValue.getter(&v72, v3, v32);
    v9 = v72;
    v33 = v73;
    v15 = *(char **)(v4 + 8);
    ((void (*)(char *, uint64_t))v15)(v7, v3);
    v34 = v68;
    sub_10002A83C(v71, v68, type metadata accessor for EntryRequest);
    if (v33 == v9)
    {
      sub_100027D34(v34, type metadata accessor for EntryRequest);
      v35 = v70;
    }
    else
    {
      v9 = v34;
      v35 = v70;
      v31(v7, enum case for InternalWidgetFamily.accessoryRectangular(_:), v3);
      dispatch thunk of RawRepresentable.rawValue.getter(&v73, v3, v32);
      dispatch thunk of RawRepresentable.rawValue.getter(&v72, v3, v32);
      v37 = v72;
      v36 = v73;
      ((void (*)(char *, uint64_t))v15)(v7, v3);
      sub_100027D34(v9, type metadata accessor for EntryRequest);
      if (v36 != v37)
      {
        v39 = sub_1000454BC();
        objc_msgSend(v39, "nt_scaledValueForValue:", 1.0);
        v41 = v40;

        v12 = v69;
        objc_msgSend(v69, "setSectionTitleSlotCost:", v41 * 12.0 + *(double *)v19 + 6.0);
        v42 = *(double *)(v19 + 8);
        sub_10004581C();
        objc_msgSend(v12, "setSectionFooterSlotCost:", v42 - v43);
        objc_msgSend(v12, "setHeadlineSlotCost:", sub_100043D4C());
        objc_msgSend(v17, "setDynamicThumbnailSizeMinimumSizeInPixels:", *(double *)(v19 + *(int *)(v35 + 36)) * 128.0, *(double *)(v19 + *(int *)(v35 + 36)) * 128.0);
        objc_msgSend(v17, "setAllowSectionTitles:", 1);
        sub_10004581C();
        v45 = v44 + v44 + 47.0;
        sub_10004581C();
        v47 = v46 + v46;
        sub_10004676C();
        objc_msgSend(v17, "setMinHeadlineScale:", v45 / (v47 + v48));
        sub_10004581C();
        v50 = v49 + v49 + 128.0;
        sub_10004581C();
        v52 = v51 + v51;
        sub_10004676C();
        objc_msgSend(v17, "setMaxHeadlineScale:", v50 / (v52 + v53));
LABEL_22:
        objc_msgSend(v17, "setSectionSlotCostInfo:", v12);
        objc_msgSend(v17, "setQualityOfService:", 25);
        v54 = objc_msgSend((id)objc_opt_self(UIScreen), "mainScreen");
        objc_msgSend(v54, "scale");
        v56 = v55;

        objc_msgSend(v17, "setScale:", v56);
        v57 = objc_msgSend((id)objc_opt_self(UITextInputMode), "activeInputModes");
        v58 = sub_10002CC78(0, &qword_1000BAD58, UITextInputMode_ptr);
        v10 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v57, v58);

        v19 = v71;
        if (!((unint64_t)v10 >> 62))
        {
          v59 = *(NSString *)((v10 & 0xFFFFFFFFFFFFF8) + 0x10);
          if (!v59)
            goto LABEL_29;
          goto LABEL_24;
        }
LABEL_33:
        if (v10 < 0)
          v64 = v10;
        else
          v64 = v10 & 0xFFFFFFFFFFFFFF8;
        swift_bridgeObjectRetain(v10);
        v59 = (NSString)_CocoaArrayWrapper.endIndex.getter(v64);
        swift_bridgeObjectRelease(v10);
        if (!v59)
          goto LABEL_29;
LABEL_24:
        if ((v10 & 0xC000000000000001) != 0)
        {
          v60 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v10);
          goto LABEL_27;
        }
        if (*(_QWORD *)((v10 & 0xFFFFFFFFFFFFF8) + 0x10))
        {
          v60 = *(id *)(v10 + 32);
LABEL_27:
          v61 = v60;
          swift_bridgeObjectRelease(v10);
          v62 = objc_msgSend(v61, "primaryLanguage");

          if (!v62)
          {
            v59 = 0;
            goto LABEL_31;
          }
          static String._unconditionallyBridgeFromObjectiveC(_:)(v62);
          v10 = v63;

          v59 = String._bridgeToObjectiveC()();
LABEL_29:
          swift_bridgeObjectRelease(v10);
LABEL_31:
          objc_msgSend(v17, "setKeyboardInputMode:", v59);

          objc_msgSend(v17, "setRequest:", *(_QWORD *)v19);
          return (uint64_t)v17;
        }
        __break(1u);
        goto LABEL_40;
      }
    }
    v12 = v69;
    objc_msgSend(v69, "setSectionTitleSlotCost:", 0.0);
    objc_msgSend(v12, "setSectionFooterSlotCost:", 0.0);
    objc_msgSend(v17, "slotsLimit");
    objc_msgSend(v12, "setHeadlineSlotCost:");
    v38 = *(double *)(v19 + *(int *)(v35 + 36));
    objc_msgSend(v17, "setDynamicThumbnailSizeMinimumSizeInPixels:", *v66 * v38, v66[1] * v38);
    objc_msgSend(v17, "setAllowSectionTitles:", 0);
    goto LABEL_22;
  }
LABEL_43:
  __break(1u);
  return result;
}

double sub_100042728(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  return sub_10006CAE4(a1, a2, a3, a4, *(uint64_t **)(v4 + 16), *(_QWORD *)(v4 + 24));
}

unint64_t sub_100042730()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000BC3A0;
  if (!qword_1000BC3A0)
  {
    v1 = type metadata accessor for InternalWidgetFamily(255);
    result = swift_getWitnessTable(&protocol conformance descriptor for InternalWidgetFamily, v1);
    atomic_store(result, (unint64_t *)&qword_1000BC3A0);
  }
  return result;
}

void **sub_100042778(void **a1, void **a2, uint64_t a3)
{
  int v3;
  char *v4;
  void **v7;
  uint64_t v8;
  char *v9;
  char *v10;
  int *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  void (*v15)(char *, char *, uint64_t);
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  char *v29;
  id v30;
  uint64_t v31;
  char *v32;
  char *v33;
  uint64_t v34;
  char *v36;
  __int128 v37;

  v3 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  v4 = (char *)*a2;
  *a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    v7 = (void **)&v4[(v3 + 16) & ~(unint64_t)v3];
    swift_retain(v4);
  }
  else
  {
    v7 = a1;
    v8 = *(int *)(a3 + 20);
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    *(_OWORD *)((char *)a1 + v8) = *(_OWORD *)((char *)a2 + v8);
    v11 = (int *)type metadata accessor for LayoutContext(0);
    v12 = v11[6];
    v36 = &v9[v12];
    v13 = &v10[v12];
    v14 = type metadata accessor for InternalWidgetFamily(0);
    v15 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v14 - 8) + 16);
    v16 = v4;
    v17 = v13;
    v18 = v14;
    v15(v36, v17, v14);
    *(_OWORD *)&v9[v11[7]] = *(_OWORD *)&v10[v11[7]];
    v19 = v11[8];
    v20 = &v9[v19];
    v21 = &v10[v19];
    v22 = type metadata accessor for ContentSizeCategory(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v22 - 8) + 16))(v20, v21, v22);
    *(_QWORD *)&v9[v11[9]] = *(_QWORD *)&v10[v11[9]];
    *(_QWORD *)&v9[v11[10]] = *(_QWORD *)&v10[v11[10]];
    v9[v11[11]] = v10[v11[11]];
    v9[v11[12]] = v10[v11[12]];
    v23 = *(int *)(a3 + 24);
    v24 = (char *)v7 + v23;
    v25 = (char *)a2 + v23;
    v37 = *(_OWORD *)((char *)a2 + v23);
    *(_OWORD *)((char *)v7 + v23) = v37;
    v26 = type metadata accessor for NewsWidgetInfo(0);
    v27 = *(int *)(v26 + 20);
    v28 = &v24[v27];
    v29 = &v25[v27];
    v30 = (id)v37;
    v15(v28, v29, v18);
    v31 = *(int *)(v26 + 24);
    v32 = &v24[v31];
    v33 = &v25[v31];
    v34 = *((_QWORD *)v33 + 1);
    *(_QWORD *)v32 = *(_QWORD *)v33;
    *((_QWORD *)v32 + 1) = v34;
    swift_bridgeObjectRetain(v34);
  }
  return v7;
}

uint64_t sub_100042920(id *a1, uint64_t a2)
{
  char *v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  void (*v8)(char *, uint64_t);
  char *v9;
  uint64_t v10;
  id *v11;
  uint64_t v12;

  v4 = (char *)a1 + *(int *)(a2 + 20);
  v5 = type metadata accessor for LayoutContext(0);
  v6 = &v4[*(int *)(v5 + 24)];
  v7 = type metadata accessor for InternalWidgetFamily(0);
  v8 = *(void (**)(char *, uint64_t))(*(_QWORD *)(v7 - 8) + 8);
  v8(v6, v7);
  v9 = &v4[*(int *)(v5 + 32)];
  v10 = type metadata accessor for ContentSizeCategory(0);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v10 - 8) + 8))(v9, v10);
  v11 = (id *)((char *)a1 + *(int *)(a2 + 24));

  v12 = type metadata accessor for NewsWidgetInfo(0);
  v8((char *)v11 + *(int *)(v12 + 20), v7);
  return swift_bridgeObjectRelease(*(id *)((char *)v11 + *(int *)(v12 + 24) + 8));
}

void **sub_1000429F8(void **a1, void **a2, uint64_t a3)
{
  void *v5;
  uint64_t v6;
  char *v7;
  char *v8;
  int *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  void (*v14)(char *, char *, uint64_t);
  id v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  id v27;
  uint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  __int128 v34;

  v5 = *a2;
  *a1 = *a2;
  v6 = *(int *)(a3 + 20);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  *(_OWORD *)((char *)a1 + v6) = *(_OWORD *)((char *)a2 + v6);
  v9 = (int *)type metadata accessor for LayoutContext(0);
  v10 = v9[6];
  v11 = &v7[v10];
  v12 = &v8[v10];
  v13 = type metadata accessor for InternalWidgetFamily(0);
  v14 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v13 - 8) + 16);
  v15 = v5;
  v14(v11, v12, v13);
  *(_OWORD *)&v7[v9[7]] = *(_OWORD *)&v8[v9[7]];
  v16 = v9[8];
  v17 = &v7[v16];
  v18 = &v8[v16];
  v19 = type metadata accessor for ContentSizeCategory(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v19 - 8) + 16))(v17, v18, v19);
  *(_QWORD *)&v7[v9[9]] = *(_QWORD *)&v8[v9[9]];
  *(_QWORD *)&v7[v9[10]] = *(_QWORD *)&v8[v9[10]];
  v7[v9[11]] = v8[v9[11]];
  v7[v9[12]] = v8[v9[12]];
  v20 = *(int *)(a3 + 24);
  v21 = (char *)a1 + v20;
  v22 = (char *)a2 + v20;
  v34 = *(_OWORD *)((char *)a2 + v20);
  *(_OWORD *)((char *)a1 + v20) = v34;
  v23 = type metadata accessor for NewsWidgetInfo(0);
  v24 = *(int *)(v23 + 20);
  v25 = &v21[v24];
  v26 = &v22[v24];
  v27 = (id)v34;
  v14(v25, v26, v13);
  v28 = *(int *)(v23 + 24);
  v29 = &v21[v28];
  v30 = &v22[v28];
  v31 = *((_QWORD *)v30 + 1);
  *(_QWORD *)v29 = *(_QWORD *)v30;
  *((_QWORD *)v29 + 1) = v31;
  swift_bridgeObjectRetain(v31);
  return a1;
}

void **sub_100042B74(void **a1, void **a2, uint64_t a3)
{
  void *v6;
  void *v7;
  id v8;
  uint64_t v9;
  _QWORD *v10;
  char *v11;
  int *v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  void (*v17)(char *, char *, uint64_t);
  uint64_t v18;
  _QWORD *v19;
  char *v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  char *v27;
  void *v28;
  uint64_t v29;
  void *v30;
  id v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;

  v6 = *a2;
  v7 = *a1;
  *a1 = *a2;
  v8 = v6;

  v9 = *(int *)(a3 + 20);
  v10 = (void **)((char *)a1 + v9);
  v11 = (char *)a2 + v9;
  *v10 = *(void **)((char *)a2 + v9);
  v10[1] = *(void **)((char *)a2 + v9 + 8);
  v12 = (int *)type metadata accessor for LayoutContext(0);
  v13 = v12[6];
  v14 = (char *)v10 + v13;
  v15 = &v11[v13];
  v16 = type metadata accessor for InternalWidgetFamily(0);
  v17 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v16 - 8) + 24);
  v17(v14, v15, v16);
  v18 = v12[7];
  v19 = (_QWORD *)((char *)v10 + v18);
  v20 = &v11[v18];
  *v19 = *(_QWORD *)v20;
  v19[1] = *((_QWORD *)v20 + 1);
  v21 = v12[8];
  v22 = (char *)v10 + v21;
  v23 = &v11[v21];
  v24 = type metadata accessor for ContentSizeCategory(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v24 - 8) + 24))(v22, v23, v24);
  *(_QWORD *)((char *)v10 + v12[9]) = *(_QWORD *)&v11[v12[9]];
  *(_QWORD *)((char *)v10 + v12[10]) = *(_QWORD *)&v11[v12[10]];
  *((_BYTE *)v10 + v12[11]) = v11[v12[11]];
  *((_BYTE *)v10 + v12[12]) = v11[v12[12]];
  v25 = *(int *)(a3 + 24);
  v26 = (char *)a1 + v25;
  v27 = (char *)a2 + v25;
  v28 = *(void **)((char *)a2 + v25);
  v29 = *((_QWORD *)v27 + 1);
  v30 = *(void **)v26;
  *(_QWORD *)v26 = v28;
  v31 = v28;

  *((_QWORD *)v26 + 1) = v29;
  v32 = type metadata accessor for NewsWidgetInfo(0);
  v17(&v26[*(int *)(v32 + 20)], &v27[*(int *)(v32 + 20)], v16);
  v33 = *(int *)(v32 + 24);
  v34 = &v26[v33];
  v35 = &v27[v33];
  *(_QWORD *)v34 = *(_QWORD *)v35;
  v36 = *((_QWORD *)v35 + 1);
  v37 = *((_QWORD *)v34 + 1);
  *((_QWORD *)v34 + 1) = v36;
  swift_bridgeObjectRetain(v36);
  swift_bridgeObjectRelease(v37);
  return a1;
}

_QWORD *sub_100042D10(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  int *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  void (*v14)(char *, char *, uint64_t);
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;

  *a1 = *a2;
  v6 = *(int *)(a3 + 20);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  *(_OWORD *)((char *)a1 + v6) = *(_OWORD *)((char *)a2 + v6);
  v9 = (int *)type metadata accessor for LayoutContext(0);
  v10 = v9[6];
  v11 = &v7[v10];
  v12 = &v8[v10];
  v13 = type metadata accessor for InternalWidgetFamily(0);
  v14 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v13 - 8) + 32);
  v14(v11, v12, v13);
  *(_OWORD *)&v7[v9[7]] = *(_OWORD *)&v8[v9[7]];
  v15 = v9[8];
  v16 = &v7[v15];
  v17 = &v8[v15];
  v18 = type metadata accessor for ContentSizeCategory(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v18 - 8) + 32))(v16, v17, v18);
  *(_QWORD *)&v7[v9[9]] = *(_QWORD *)&v8[v9[9]];
  *(_QWORD *)&v7[v9[10]] = *(_QWORD *)&v8[v9[10]];
  v7[v9[11]] = v8[v9[11]];
  v7[v9[12]] = v8[v9[12]];
  v19 = *(int *)(a3 + 24);
  v20 = (char *)a1 + v19;
  v21 = (char *)a2 + v19;
  *(_OWORD *)((char *)a1 + v19) = *(_OWORD *)((char *)a2 + v19);
  v22 = type metadata accessor for NewsWidgetInfo(0);
  v14(&v20[*(int *)(v22 + 20)], &v21[*(int *)(v22 + 20)], v13);
  *(_OWORD *)&v20[*(int *)(v22 + 24)] = *(_OWORD *)&v21[*(int *)(v22 + 24)];
  return a1;
}

void **sub_100042E58(void **a1, void **a2, uint64_t a3)
{
  void *v6;
  uint64_t v7;
  char *v8;
  char *v9;
  int *v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  void (*v15)(char *, char *, uint64_t);
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  v6 = *a1;
  *a1 = *a2;

  v7 = *(int *)(a3 + 20);
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  *(_OWORD *)((char *)a1 + v7) = *(_OWORD *)((char *)a2 + v7);
  v10 = (int *)type metadata accessor for LayoutContext(0);
  v11 = v10[6];
  v12 = &v8[v11];
  v13 = &v9[v11];
  v14 = type metadata accessor for InternalWidgetFamily(0);
  v15 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v14 - 8) + 40);
  v15(v12, v13, v14);
  *(_OWORD *)&v8[v10[7]] = *(_OWORD *)&v9[v10[7]];
  v16 = v10[8];
  v17 = &v8[v16];
  v18 = &v9[v16];
  v19 = type metadata accessor for ContentSizeCategory(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v19 - 8) + 40))(v17, v18, v19);
  *(_QWORD *)&v8[v10[9]] = *(_QWORD *)&v9[v10[9]];
  *(_QWORD *)&v8[v10[10]] = *(_QWORD *)&v9[v10[10]];
  v8[v10[11]] = v9[v10[11]];
  v8[v10[12]] = v9[v10[12]];
  v20 = *(int *)(a3 + 24);
  v21 = (char *)a1 + v20;
  v22 = (char *)a2 + v20;
  v23 = *(uint64_t *)((char *)a2 + v20);
  v24 = *((_QWORD *)v22 + 1);
  v25 = *(void **)v21;
  *(_QWORD *)v21 = v23;

  *((_QWORD *)v21 + 1) = v24;
  v26 = type metadata accessor for NewsWidgetInfo(0);
  v15(&v21[*(int *)(v26 + 20)], &v22[*(int *)(v26 + 20)], v14);
  v27 = *(int *)(v26 + 24);
  v28 = &v21[v27];
  v29 = &v22[v27];
  v31 = *(_QWORD *)v29;
  v30 = *((_QWORD *)v29 + 1);
  v32 = *((_QWORD *)v28 + 1);
  *(_QWORD *)v28 = v31;
  *((_QWORD *)v28 + 1) = v30;
  swift_bridgeObjectRelease(v32);
  return a1;
}

uint64_t sub_100042FC4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100042FD0);
}

uint64_t sub_100042FD0(char *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)a1;
    if (*(_QWORD *)a1 >= 0xFFFFFFFFuLL)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for LayoutContext(0);
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
    {
      v10 = v8;
      v11 = *(int *)(a3 + 20);
    }
    else
    {
      v10 = type metadata accessor for NewsWidgetInfo(0);
      v9 = *(_QWORD *)(v10 - 8);
      v11 = *(int *)(a3 + 24);
    }
    return (*(uint64_t (**)(char *, uint64_t, uint64_t))(v9 + 48))(&a1[v11], a2, v10);
  }
}

uint64_t sub_100043070(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10004307C);
}

char *sub_10004307C(char *result, uint64_t a2, int a3, uint64_t a4)
{
  char *v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)result = (a2 - 1);
  }
  else
  {
    v8 = type metadata accessor for LayoutContext(0);
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      v10 = v8;
      v11 = *(int *)(a4 + 20);
    }
    else
    {
      v10 = type metadata accessor for NewsWidgetInfo(0);
      v9 = *(_QWORD *)(v10 - 8);
      v11 = *(int *)(a4 + 24);
    }
    return (char *)(*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v9 + 56))(&v5[v11], a2, a2, v10);
  }
  return result;
}

uint64_t sub_100043118(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  unint64_t v4;
  _QWORD v5[3];

  v5[0] = (char *)&value witness table for Builtin.UnknownObject + 64;
  result = type metadata accessor for LayoutContext(319);
  if (v3 <= 0x3F)
  {
    v5[1] = *(_QWORD *)(result - 8) + 64;
    result = type metadata accessor for NewsWidgetInfo(319);
    if (v4 <= 0x3F)
    {
      v5[2] = *(_QWORD *)(result - 8) + 64;
      swift_initStructMetadata(a1, 256, 3, v5, a1 + 16);
      return 0;
    }
  }
  return result;
}

_QWORD *sub_1000431B0(_OWORD *a1, _QWORD *a2, int *a3)
{
  _QWORD *v4;
  int v5;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v4 = a1;
  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v17 = *a2;
    *v4 = *a2;
    v4 = (_QWORD *)(v17 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v17);
  }
  else
  {
    *a1 = *(_OWORD *)a2;
    v7 = a3[6];
    v8 = (char *)a1 + v7;
    v9 = (char *)a2 + v7;
    v10 = type metadata accessor for InternalWidgetFamily(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(v8, v9, v10);
    v11 = a3[8];
    *(_OWORD *)((char *)v4 + a3[7]) = *(_OWORD *)((char *)a2 + a3[7]);
    v12 = (char *)v4 + v11;
    v13 = (char *)a2 + v11;
    v14 = type metadata accessor for ContentSizeCategory(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v14 - 8) + 16))(v12, v13, v14);
    v15 = a3[10];
    *(_QWORD *)((char *)v4 + a3[9]) = *(_QWORD *)((char *)a2 + a3[9]);
    *(_QWORD *)((char *)v4 + v15) = *(_QWORD *)((char *)a2 + v15);
    v16 = a3[12];
    *((_BYTE *)v4 + a3[11]) = *((_BYTE *)a2 + a3[11]);
    *((_BYTE *)v4 + v16) = *((_BYTE *)a2 + v16);
  }
  return v4;
}

uint64_t sub_1000432A4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = a1 + *(int *)(a2 + 24);
  v5 = type metadata accessor for InternalWidgetFamily(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
  v6 = a1 + *(int *)(a2 + 32);
  v7 = type metadata accessor for ContentSizeCategory(0);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(v6, v7);
}

_OWORD *sub_100043310(_OWORD *a1, _OWORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  *a1 = *a2;
  v6 = a3[6];
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for InternalWidgetFamily(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 16))(v7, v8, v9);
  v10 = a3[8];
  *(_OWORD *)((char *)a1 + a3[7]) = *(_OWORD *)((char *)a2 + a3[7]);
  v11 = (char *)a1 + v10;
  v12 = (char *)a2 + v10;
  v13 = type metadata accessor for ContentSizeCategory(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v13 - 8) + 16))(v11, v12, v13);
  v14 = a3[10];
  *(_QWORD *)((char *)a1 + a3[9]) = *(_QWORD *)((char *)a2 + a3[9]);
  *(_QWORD *)((char *)a1 + v14) = *(_QWORD *)((char *)a2 + v14);
  v15 = a3[12];
  *((_BYTE *)a1 + a3[11]) = *((_BYTE *)a2 + a3[11]);
  *((_BYTE *)a1 + v15) = *((_BYTE *)a2 + v15);
  return a1;
}

_QWORD *sub_1000433D8(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;

  *a1 = *a2;
  a1[1] = a2[1];
  v6 = a3[6];
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for InternalWidgetFamily(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 24))(v7, v8, v9);
  v10 = a3[7];
  v11 = (_QWORD *)((char *)a1 + v10);
  v12 = (_QWORD *)((char *)a2 + v10);
  *v11 = *v12;
  v11[1] = v12[1];
  v13 = a3[8];
  v14 = (char *)a1 + v13;
  v15 = (char *)a2 + v13;
  v16 = type metadata accessor for ContentSizeCategory(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v16 - 8) + 24))(v14, v15, v16);
  *(_QWORD *)((char *)a1 + a3[9]) = *(_QWORD *)((char *)a2 + a3[9]);
  *(_QWORD *)((char *)a1 + a3[10]) = *(_QWORD *)((char *)a2 + a3[10]);
  *((_BYTE *)a1 + a3[11]) = *((_BYTE *)a2 + a3[11]);
  *((_BYTE *)a1 + a3[12]) = *((_BYTE *)a2 + a3[12]);
  return a1;
}

_OWORD *sub_1000434C4(_OWORD *a1, _OWORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  *a1 = *a2;
  v6 = a3[6];
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for InternalWidgetFamily(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v7, v8, v9);
  v10 = a3[8];
  *(_OWORD *)((char *)a1 + a3[7]) = *(_OWORD *)((char *)a2 + a3[7]);
  v11 = (char *)a1 + v10;
  v12 = (char *)a2 + v10;
  v13 = type metadata accessor for ContentSizeCategory(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v13 - 8) + 32))(v11, v12, v13);
  v14 = a3[10];
  *(_QWORD *)((char *)a1 + a3[9]) = *(_QWORD *)((char *)a2 + a3[9]);
  *(_QWORD *)((char *)a1 + v14) = *(_QWORD *)((char *)a2 + v14);
  v15 = a3[12];
  *((_BYTE *)a1 + a3[11]) = *((_BYTE *)a2 + a3[11]);
  *((_BYTE *)a1 + v15) = *((_BYTE *)a2 + v15);
  return a1;
}

_OWORD *sub_10004358C(_OWORD *a1, _OWORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  *a1 = *a2;
  v6 = a3[6];
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for InternalWidgetFamily(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 40))(v7, v8, v9);
  v10 = a3[8];
  *(_OWORD *)((char *)a1 + a3[7]) = *(_OWORD *)((char *)a2 + a3[7]);
  v11 = (char *)a1 + v10;
  v12 = (char *)a2 + v10;
  v13 = type metadata accessor for ContentSizeCategory(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v13 - 8) + 40))(v11, v12, v13);
  v14 = a3[10];
  *(_QWORD *)((char *)a1 + a3[9]) = *(_QWORD *)((char *)a2 + a3[9]);
  *(_QWORD *)((char *)a1 + v14) = *(_QWORD *)((char *)a2 + v14);
  v15 = a3[12];
  *((_BYTE *)a1 + a3[11]) = *((_BYTE *)a2 + a3[11]);
  *((_BYTE *)a1 + v15) = *((_BYTE *)a2 + v15);
  return a1;
}

uint64_t sub_100043654(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100043660);
}

uint64_t sub_100043660(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v12;

  v6 = type metadata accessor for InternalWidgetFamily(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = a3[6];
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1 + v9, a2, v8);
  }
  v10 = type metadata accessor for ContentSizeCategory(0);
  v7 = *(_QWORD *)(v10 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v10;
    v9 = a3[8];
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1 + v9, a2, v8);
  }
  v12 = *(unsigned __int8 *)(a1 + a3[11]);
  if (v12 >= 2)
    return ((v12 + 2147483646) & 0x7FFFFFFF) + 1;
  else
    return 0;
}

uint64_t sub_100043714(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100043720);
}

uint64_t sub_100043720(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;

  v8 = type metadata accessor for InternalWidgetFamily(0);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = a4[6];
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1 + v11, a2, a2, v10);
  }
  result = type metadata accessor for ContentSizeCategory(0);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = result;
    v11 = a4[8];
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1 + v11, a2, a2, v10);
  }
  *(_BYTE *)(a1 + a4[11]) = a2 + 1;
  return result;
}

uint64_t type metadata accessor for LayoutContext(uint64_t a1)
{
  uint64_t result;

  result = qword_1000BAE50;
  if (!qword_1000BAE50)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for LayoutContext);
  return result;
}

uint64_t sub_1000437FC(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  unint64_t v4;
  _QWORD v5[9];

  v5[0] = (char *)&value witness table for Builtin.Int64 + 64;
  v5[1] = (char *)&value witness table for Builtin.Int64 + 64;
  result = type metadata accessor for InternalWidgetFamily(319);
  if (v3 <= 0x3F)
  {
    v5[2] = *(_QWORD *)(result - 8) + 64;
    v5[3] = &unk_10008BD10;
    result = type metadata accessor for ContentSizeCategory(319);
    if (v4 <= 0x3F)
    {
      v5[4] = *(_QWORD *)(result - 8) + 64;
      v5[5] = (char *)&value witness table for Builtin.Int64 + 64;
      v5[6] = (char *)&value witness table for Builtin.Int64 + 64;
      v5[7] = &unk_10008BD28;
      v5[8] = &unk_10008BD28;
      swift_initStructMetadata(a1, 256, 9, v5, a1 + 16);
      return 0;
    }
  }
  return result;
}

id sub_1000438AC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  void *v11;
  void (*v12)(char *, uint64_t);
  NSString *v13;
  id v14;
  double v15;
  double v16;
  NSString *v17;
  id v18;
  id v19;
  uint64_t v21;
  unint64_t v22;

  v1 = type metadata accessor for ContentSizeCategory(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = __chkstk_darwin(v1);
  v5 = (char *)&v21 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __chkstk_darwin(v3);
  v8 = (char *)&v21 - v7;
  __chkstk_darwin(v6);
  v10 = (char *)&v21 - v9;
  v11 = (void *)objc_opt_self(UIFont);
  v21 = v0 + *(int *)(type metadata accessor for LayoutContext(0) + 32);
  v22 = 0x8000000100091000;
  sub_10004528C((unsigned int *)&enum case for ContentSizeCategory.medium(_:), (unsigned int *)&enum case for ContentSizeCategory.extraSmall(_:), 0x8000000100091000, 150, (uint64_t)v8);
  sub_10004528C((unsigned int *)&enum case for ContentSizeCategory.accessibilityMedium(_:), (unsigned int *)&enum case for ContentSizeCategory.extraExtraLarge(_:), 0x8000000100090FD0, 163, (uint64_t)v5);
  sub_10003DFA0((uint64_t)v8, (uint64_t)v5, (uint64_t)v10);
  v12 = *(void (**)(char *, uint64_t))(v2 + 8);
  v12(v5, v1);
  v12(v8, v1);
  v13 = sub_10003DD60();
  v12(v10, v1);
  v14 = objc_msgSend(v11, "nt_preferredFontForCondensedTextStyle:contentSizeCategory:", 2, v13);

  objc_msgSend(v14, "nt_scaledValueForValue:", 1.0);
  v16 = v15;

  sub_10004528C((unsigned int *)&enum case for ContentSizeCategory.medium(_:), (unsigned int *)&enum case for ContentSizeCategory.extraSmall(_:), v22, 150, (uint64_t)v8);
  sub_10004528C((unsigned int *)&enum case for ContentSizeCategory.accessibilityMedium(_:), (unsigned int *)&enum case for ContentSizeCategory.extraExtraLarge(_:), 0x8000000100090FD0, 163, (uint64_t)v5);
  sub_10003DFA0((uint64_t)v8, (uint64_t)v5, (uint64_t)v10);
  v12(v5, v1);
  v12(v8, v1);
  v17 = sub_10003DD60();
  v12(v10, v1);
  v18 = objc_msgSend(v11, "nt_preferredFontForCondensedTextStyle:contentSizeCategory:", 2, v17);

  v19 = objc_msgSend(v18, "fontWithSize:", v16 * 15.0);
  return v19;
}

uint64_t sub_100043B54()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t result;
  BOOL v10;
  uint64_t v11;
  Swift::String v12;
  void *object;
  unint64_t v14;
  unint64_t v15;

  v1 = type metadata accessor for LayoutContext(0);
  __chkstk_darwin(v1);
  v3 = (char *)&v14 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for InternalWidgetFamily(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, v0 + *(int *)(v1 + 24), v4);
  result = (*(uint64_t (**)(char *, uint64_t))(v5 + 88))(v7, v4);
  if ((_DWORD)result != enum case for InternalWidgetFamily.systemSmall(_:))
  {
    v10 = (_DWORD)result == enum case for InternalWidgetFamily.systemMedium(_:)
       || (_DWORD)result == enum case for InternalWidgetFamily.systemLarge(_:)
       || (_DWORD)result == enum case for InternalWidgetFamily.newsLargeTall(_:);
    if (!v10 && (_DWORD)result != enum case for InternalWidgetFamily.accessoryRectangular(_:))
    {
      sub_1000457D8(v0, (uint64_t)v3);
      v14 = 0;
      v15 = 0xE000000000000000;
      _StringGuts.grow(_:)(38);
      swift_bridgeObjectRelease(v15);
      v14 = 0xD000000000000024;
      v15 = 0x8000000100091150;
      v11 = sub_10001C96C(&qword_1000B99A8, (uint64_t (*)(uint64_t))&type metadata accessor for InternalWidgetFamily, (uint64_t)&protocol conformance descriptor for InternalWidgetFamily);
      v12._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v4, v11);
      object = v12._object;
      String.append(_:)(v12);
      swift_bridgeObjectRelease(object);
      result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, v14, v15, "NewsTag/LayoutContext.swift", 27, 2, 385, 0);
      __break(1u);
    }
  }
  return result;
}

double sub_100043D4C()
{
  uint64_t v0;
  double v1;
  double v2;
  double v3;
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;

  sub_10004581C();
  v2 = v1;
  sub_10004676C();
  v4 = v3;
  v5 = *(double *)(v0 + *(int *)(type metadata accessor for LayoutContext(0) + 40));
  sub_10004676C();
  v7 = v5 * v6;
  sub_10004581C();
  v9 = v7 - (v8 + v8);
  sub_10004581C();
  v11 = v9 + (v5 + v5) * v10;
  sub_10004676C();
  v13 = v2 + v4 * (sub_1000462FC() * (v11 / v12));
  sub_10004581C();
  return v14 + v13;
}

uint64_t sub_100043DD0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  id v3;
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  id v26;
  id v27;
  uint64_t v28;
  uint64_t v29;
  double v30;
  double v31;
  uint64_t result;
  uint64_t v33;

  v3 = sub_1000438AC();
  sub_10004676C();
  v5 = v4;
  v6 = *(double *)(v1 + *(int *)(type metadata accessor for LayoutContext(0) + 40));
  sub_10004676C();
  v8 = v6 * v7;
  sub_10004581C();
  v10 = v8 - (v9 + v9);
  sub_10004581C();
  v12 = v10 + (v6 + v6) * v11;
  sub_10004676C();
  v14 = v5 * (sub_1000462FC() * (v12 / v13));
  v15 = sub_100046268();
  v17 = v16;
  v19 = v18;
  sub_100045AD8();
  v21 = v20;
  sub_100043B54();
  v23 = v22;
  sub_100045D40();
  v25 = v24;
  v26 = sub_10004604C();
  v27 = objc_msgSend((id)objc_opt_self(UIFont), "nt_preferredFontForCondensedTextStyle:contentSizeCategory:", 2, UIContentSizeCategoryLarge);
  sub_100045AD8();
  v29 = v28;
  sub_100045AD8();
  v31 = v30 + 3.0;
  result = sub_10004581C();
  *(_QWORD *)a1 = v3;
  *(double *)(a1 + 8) = v14;
  *(_QWORD *)(a1 + 16) = v15;
  *(_QWORD *)(a1 + 24) = v17;
  *(_BYTE *)(a1 + 32) = v19 & 1;
  *(_QWORD *)(a1 + 40) = v21;
  *(_QWORD *)(a1 + 48) = v23;
  *(_QWORD *)(a1 + 56) = v25;
  *(_QWORD *)(a1 + 64) = v26;
  *(_QWORD *)(a1 + 72) = v27;
  *(_QWORD *)(a1 + 80) = v29;
  *(double *)(a1 + 88) = v31;
  *(_QWORD *)(a1 + 96) = v33;
  return result;
}

uint64_t sub_100043F18()
{
  uint64_t v0;
  double v1;
  double v2;
  double v3;
  BOOL v4;
  uint64_t v5;

  v1 = *(double *)(v0 + *(int *)(type metadata accessor for LayoutContext(0) + 36));
  sub_100045AD8();
  v3 = v1 * v2;
  v4 = v3 >= 24.0 || v3 < 22.0;
  v5 = 1;
  if (v4)
    v5 = 2;
  if (v3 >= 22.0 || v3 < 0.0)
    return v5;
  else
    return 0;
}

void sub_100043F70(char a1)
{
  __asm { BR              X10 }
}

uint64_t sub_100043FCC(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_1000440D8 + 4 * byte_10008BCC9[a2]))(0x614D6D6F74746F62);
}

uint64_t sub_1000440D8(uint64_t a1)
{
  uint64_t v1;
  char v2;

  if (a1 == 0x614D6D6F74746F62 && v1 == 0xEC0000006E696772)
    v2 = 1;
  else
    v2 = _stringCompareWithSmolCheck(_:_:expecting:)(a1, v1, 0x614D6D6F74746F62, 0xEC0000006E696772, 0);
  swift_bridgeObjectRelease(v1);
  swift_bridgeObjectRelease(0xEC0000006E696772);
  return v2 & 1;
}

uint64_t sub_100044244(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_10004427C + 4 * byte_10008BCD2[a1]))(0x696772614D706F74, 0xE90000000000006ELL);
}

uint64_t sub_10004427C()
{
  return 0x614D6D6F74746F62;
}

uint64_t sub_10004429C()
{
  return 0x6E49796C696D6166;
}

uint64_t sub_1000442B4()
{
  return 0x5379616C70736964;
}

uint64_t sub_100044300()
{
  return 0x696C64616548746ELL;
}

uint64_t sub_100044324()
{
  return 0x686563616C507369;
}

uint64_t sub_100044348()
{
  return 0x6569766572507369;
}

uint64_t sub_100044360(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_100044398 + 4 * byte_10008BCDB[a1]))(0x696772614D706F74, 0xE90000000000006ELL);
}

uint64_t sub_100044398()
{
  return 0x614D6D6F74746F62;
}

uint64_t sub_1000443B8()
{
  return 0x6E49796C696D6166;
}

uint64_t sub_1000443D0()
{
  return 0x5379616C70736964;
}

uint64_t sub_10004441C()
{
  return 0x696C64616548746ELL;
}

uint64_t sub_100044440()
{
  return 0x686563616C507369;
}

uint64_t sub_100044464()
{
  return 0x6569766572507369;
}

void sub_10004447C(char *a1)
{
  sub_100043F70(*a1);
}

Swift::Int sub_100044488()
{
  char *v0;
  char v1;
  _QWORD v3[9];

  v1 = *v0;
  Hasher.init(_seed:)(v3, 0);
  sub_1000444D4((uint64_t)v3, v1);
  return Hasher._finalize()();
}

void sub_1000444CC(uint64_t a1)
{
  char *v1;

  sub_1000444D4(a1, *v1);
}

void sub_1000444D4(uint64_t a1, char a2)
{
  __asm { BR              X10 }
}

uint64_t sub_100044518(uint64_t a1)
{
  String.hash(into:)(a1, 0x614D6D6F74746F62, 0xEC0000006E696772);
  return swift_bridgeObjectRelease(0xEC0000006E696772);
}

Swift::Int sub_100044610(uint64_t a1)
{
  char *v1;
  char v2;
  _QWORD v4[9];

  v2 = *v1;
  Hasher.init(_seed:)(v4, a1);
  sub_1000444D4((uint64_t)v4, v2);
  return Hasher._finalize()();
}

unint64_t sub_100044650@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = sub_100047264(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_10004467C@<X0>(uint64_t *a1@<X8>)
{
  unsigned __int8 *v1;
  uint64_t result;
  uint64_t v4;

  result = sub_100044244(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_1000446A4()
{
  unsigned __int8 *v0;

  return sub_100044360(*v0);
}

unint64_t sub_1000446AC@<X0>(Swift::String a1@<X1:X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = sub_100047264(a1);
  *a2 = result;
  return result;
}

void sub_1000446D0(_BYTE *a1@<X8>)
{
  *a1 = 9;
}

uint64_t sub_1000446DC(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100046D34();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100044704(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100046D34();
  return CodingKey.debugDescription.getter(a1, v2);
}

BOOL sub_10004472C(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

uint64_t sub_100044754(_QWORD *a1)
{
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  int *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  NSString *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  __int128 v26;
  char v27;

  v3 = v1;
  v5 = sub_10001B520(&qword_1000BAEE0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v24 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_10001D9B4(a1, v9);
  v11 = sub_100046D34();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for LayoutContext.CodingKeys, &type metadata for LayoutContext.CodingKeys, v11, v9, v10);
  *(_QWORD *)&v26 = *v3;
  v27 = 0;
  v12 = sub_100046E3C();
  KeyedEncodingContainer.encode<A>(_:forKey:)(&v26, &v27, v5, &type metadata for CGFloat, v12);
  if (!v2)
  {
    *(_QWORD *)&v26 = v3[1];
    v27 = 1;
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v26, &v27, v5, &type metadata for CGFloat, v12);
    v13 = (int *)type metadata accessor for LayoutContext(0);
    v14 = InternalWidgetFamily.rawValue.getter();
    LOBYTE(v26) = 2;
    KeyedEncodingContainer.encode(_:forKey:)(v14, &v26, v5);
    v26 = *(_OWORD *)((char *)v3 + v13[7]);
    v27 = 3;
    type metadata accessor for CGSize(0);
    v16 = v15;
    v17 = sub_10001C96C(&qword_1000BAEF0, (uint64_t (*)(uint64_t))type metadata accessor for CGSize, (uint64_t)&protocol conformance descriptor for CGSize);
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v26, &v27, v5, v16, v17);
    v19 = sub_10003DD60();
    v25 = static String._unconditionallyBridgeFromObjectiveC(_:)(v19);
    v21 = v20;

    LOBYTE(v26) = 4;
    KeyedEncodingContainer.encode(_:forKey:)(v25, v21, &v26, v5);
    swift_bridgeObjectRelease(v21);
    *(_QWORD *)&v26 = *(_QWORD *)((char *)v3 + v13[9]);
    v27 = 5;
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v26, &v27, v5, &type metadata for CGFloat, v12);
    *(_QWORD *)&v26 = *(_QWORD *)((char *)v3 + v13[10]);
    v27 = 6;
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v26, &v27, v5, &type metadata for CGFloat, v12);
    v22 = *((unsigned __int8 *)v3 + v13[11]);
    LOBYTE(v26) = 7;
    KeyedEncodingContainer.encode(_:forKey:)(v22, &v26, v5);
    v23 = *((unsigned __int8 *)v3 + v13[12]);
    LOBYTE(v26) = 8;
    KeyedEncodingContainer.encode(_:forKey:)(v23, &v26, v5);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_100044A8C@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  _BYTE *v37;
  char *v38;
  char *v39;
  char *v40;
  char *v41;
  uint64_t v42;
  int *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  NSString v50;
  id v51;
  uint64_t v52;
  unsigned int (*v53)(uint64_t, uint64_t, uint64_t);
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  _BYTE *v58;
  void (*v59)(char *, uint64_t);
  uint64_t v60;
  int *v61;
  char *v62;
  char v63;
  uint64_t v64;
  id v65;
  char *v66;
  int *v67;
  char *v68;
  uint64_t v69;
  char *v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  char *v76;
  _QWORD *v77;
  _QWORD *v78;
  __int128 v79;
  char v80;

  v69 = a2;
  v3 = sub_10001B520(&qword_1000BAEA8);
  __chkstk_darwin(v3);
  v71 = (char *)&v65 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for ContentSizeCategory(0);
  v6 = *(_QWORD *)(v5 - 8);
  v72 = v5;
  v73 = v6;
  __chkstk_darwin(v5);
  v70 = (char *)&v65 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_10001B520(&qword_1000BAEB0);
  __chkstk_darwin(v8);
  v76 = (char *)&v65 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for InternalWidgetFamily(0);
  v11 = *(_QWORD *)(v10 - 8);
  v74 = v10;
  v75 = v11;
  __chkstk_darwin(v10);
  v13 = (char *)&v65 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_10001B520(&qword_1000BAEB8);
  v15 = *(_QWORD *)(v14 - 8);
  __chkstk_darwin(v14);
  v17 = (char *)&v65 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = type metadata accessor for LayoutContext(0);
  __chkstk_darwin(v18);
  v20 = (char *)&v65 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = a1[3];
  v22 = a1[4];
  v77 = a1;
  sub_10001D9B4(a1, v21);
  v23 = sub_100046D34();
  v24 = v78;
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for LayoutContext.CodingKeys, &type metadata for LayoutContext.CodingKeys, v23, v21, v22);
  if (v24)
    return sub_10001DA60(v77);
  v25 = (uint64_t)v76;
  v67 = (int *)v18;
  v68 = v13;
  v78 = v20;
  v80 = 0;
  v26 = sub_100046D78();
  KeyedDecodingContainer.decode<A>(_:forKey:)(&type metadata for CGFloat, &v80, v14, &type metadata for CGFloat, v26);
  v27 = v14;
  v28 = v17;
  v29 = (char *)v78;
  *v78 = v79;
  v80 = 1;
  KeyedDecodingContainer.decode<A>(_:forKey:)(&type metadata for CGFloat, &v80, v14, &type metadata for CGFloat, v26);
  *((_QWORD *)v29 + 1) = v79;
  LOBYTE(v79) = 2;
  v30 = KeyedDecodingContainer.decode(_:forKey:)(&v79, v14);
  v66 = v28;
  v32 = v25;
  InternalWidgetFamily.init(rawValue:)(v30);
  v34 = v74;
  v33 = v75;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v75 + 48))(v25, 1, v74) == 1)
  {
    sub_10002CCF4(v25, &qword_1000BAEB0);
    v35 = sub_100046DBC();
    v36 = swift_allocError(&type metadata for LayoutContext.Errors, v35, 0, 0);
    *v37 = 0;
    swift_willThrow(v36);
    (*(void (**)(char *, uint64_t))(v15 + 8))(v66, v27);
    return sub_10001DA60(v77);
  }
  v38 = v68;
  (*(void (**)(char *, uint64_t, uint64_t))(v33 + 32))(v68, v32, v34);
  v39 = (char *)v27;
  v40 = v38;
  v41 = v39;
  v42 = v34;
  v43 = v67;
  (*(void (**)(char *, char *, uint64_t))(v33 + 16))(&v29[v67[6]], v40, v42);
  type metadata accessor for CGSize(0);
  v45 = v44;
  v80 = 3;
  v46 = sub_10001C96C(&qword_1000BAED8, (uint64_t (*)(uint64_t))type metadata accessor for CGSize, (uint64_t)&protocol conformance descriptor for CGSize);
  KeyedDecodingContainer.decode<A>(_:forKey:)(v45, &v80, v41, v45, v46);
  *(_OWORD *)&v29[v43[7]] = v79;
  LOBYTE(v79) = 4;
  KeyedDecodingContainer.decode(_:forKey:)(&v79, v41);
  v47 = v73;
  v49 = v48;
  v76 = v41;
  v50 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v49);
  v51 = v50;
  v52 = (uint64_t)v71;
  ContentSizeCategory.init(_:)();
  v53 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v47 + 48);
  v54 = v47;
  v55 = v72;
  if (v53(v52, 1, v72) == 1)
  {
    sub_10002CCF4(v52, &qword_1000BAEA8);
    v56 = sub_100046DBC();
    v57 = swift_allocError(&type metadata for LayoutContext.Errors, v56, 0, 0);
    *v58 = 1;
    swift_willThrow(v57);

    v59 = *(void (**)(char *, uint64_t))(v75 + 8);
    v60 = v74;
    v59(v68, v74);
    (*(void (**)(char *, char *))(v15 + 8))(v66, v76);
    sub_10001DA60(v77);
    return ((uint64_t (*)(char *, uint64_t))v59)((char *)v78 + v43[6], v60);
  }
  else
  {
    v65 = v51;
    v61 = v43;
    v62 = v70;
    (*(void (**)(char *, uint64_t, uint64_t))(v54 + 32))(v70, v52, v55);
    (*(void (**)(char *, char *, uint64_t))(v54 + 16))(&v29[v61[8]], v62, v55);
    v80 = 5;
    KeyedDecodingContainer.decode<A>(_:forKey:)(&type metadata for CGFloat, &v80, v76, &type metadata for CGFloat, v26);
    *(_QWORD *)&v29[v67[9]] = v79;
    v80 = 6;
    KeyedDecodingContainer.decode<A>(_:forKey:)(&type metadata for CGFloat, &v80, v76, &type metadata for CGFloat, v26);
    *(_QWORD *)&v29[v67[10]] = v79;
    LOBYTE(v79) = 7;
    v63 = KeyedDecodingContainer.decode(_:forKey:)(&v79, v76);
    *((_BYTE *)v78 + v67[11]) = v63 & 1;
    LOBYTE(v79) = 8;
    LOBYTE(v61) = KeyedDecodingContainer.decode(_:forKey:)(&v79, v76);

    (*(void (**)(char *, uint64_t))(v73 + 8))(v70, v72);
    (*(void (**)(char *, uint64_t))(v75 + 8))(v68, v74);
    (*(void (**)(char *, char *))(v15 + 8))(v66, v76);
    v64 = (uint64_t)v78;
    *((_BYTE *)v78 + v67[12]) = v61 & 1;
    sub_1000457D8(v64, v69);
    sub_10001DA60(v77);
    return sub_100046E00(v64);
  }
}

uint64_t sub_100045264@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_100044A8C(a1, a2);
}

uint64_t sub_100045278(_QWORD *a1)
{
  return sub_100044754(a1);
}

uint64_t sub_10004528C@<X0>(unsigned int *a1@<X0>, unsigned int *a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v5;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  int v17;
  uint64_t v18;
  BOOL v19;
  uint64_t v20;
  uint64_t result;
  uint64_t v22;
  Swift::String v23;
  void *object;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;

  v26 = a4;
  v10 = type metadata accessor for LayoutContext(0);
  __chkstk_darwin(v10);
  v12 = (char *)&v25 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for InternalWidgetFamily(0);
  v14 = *(_QWORD *)(v13 - 8);
  __chkstk_darwin(v13);
  v16 = (char *)&v25 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))(v16, v5 + *(int *)(v10 + 24), v13);
  v17 = (*(uint64_t (**)(char *, uint64_t))(v14 + 88))(v16, v13);
  if (v17 == enum case for InternalWidgetFamily.systemSmall(_:))
    goto LABEL_2;
  if (v17 == enum case for InternalWidgetFamily.systemMedium(_:)
    || (v17 != enum case for InternalWidgetFamily.systemLarge(_:)
      ? (v19 = v17 == enum case for InternalWidgetFamily.newsLargeTall(_:))
      : (v19 = 1),
        v19))
  {
    v18 = *a2;
    goto LABEL_10;
  }
  if (v17 == enum case for InternalWidgetFamily.accessoryRectangular(_:))
  {
LABEL_2:
    v18 = *a1;
LABEL_10:
    v20 = type metadata accessor for ContentSizeCategory(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 104))(a5, v18, v20);
  }
  sub_1000457D8(v5, (uint64_t)v12);
  v27 = 0;
  v28 = 0xE000000000000000;
  _StringGuts.grow(_:)(49);
  swift_bridgeObjectRelease(v28);
  v27 = 0xD00000000000002FLL;
  v28 = a3;
  v22 = sub_10001C96C(&qword_1000B99A8, (uint64_t (*)(uint64_t))&type metadata accessor for InternalWidgetFamily, (uint64_t)&protocol conformance descriptor for InternalWidgetFamily);
  v23._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v13, v22);
  object = v23._object;
  String.append(_:)(v23);
  swift_bridgeObjectRelease(object);
  result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, v27, v28, "NewsTag/LayoutContext.swift", 27, 2, v26, 0);
  __break(1u);
  return result;
}

id sub_1000454BC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t inited;
  uint64_t v12;
  uint64_t v13;
  NSString *v14;
  NSString *v15;
  unint64_t v16;
  unint64_t v17;
  void (*v18)(char *, uint64_t);
  NSString *v19;
  id v20;
  id v21;
  Class isa;
  id v23;
  id v24;
  __int128 v26;
  _BYTE v27[48];
  _BYTE v28[72];

  v0 = type metadata accessor for ContentSizeCategory(0);
  v1 = *(_QWORD *)(v0 - 8);
  v2 = __chkstk_darwin(v0);
  v4 = &v27[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v5 = __chkstk_darwin(v2);
  v7 = &v27[-v6 - 8];
  __chkstk_darwin(v5);
  v9 = &v27[-v8 - 8];
  v10 = sub_10001B520(&qword_1000B9EF8);
  inited = swift_initStackObject(v10, v28);
  v26 = xmmword_10008AC60;
  *(_OWORD *)(inited + 16) = xmmword_10008AC60;
  *(_QWORD *)(inited + 32) = UIFontDescriptorTraitsAttribute;
  v12 = sub_10001B520(&qword_1000B9F00);
  v13 = swift_initStackObject(v12, v27);
  *(_OWORD *)(v13 + 16) = v26;
  *(_QWORD *)(v13 + 32) = UIFontWeightTrait;
  *(UIFontWeight *)(v13 + 40) = UIFontWeightBold;
  v14 = UIFontDescriptorTraitsAttribute;
  v15 = UIFontWeightTrait;
  v16 = sub_10005F734(v13);
  *(_QWORD *)(inited + 64) = sub_10001B520(&qword_1000B9F08);
  *(_QWORD *)(inited + 40) = v16;
  v17 = sub_10005F83C(inited);
  type metadata accessor for LayoutContext(0);
  sub_10004528C((unsigned int *)&enum case for ContentSizeCategory.medium(_:), (unsigned int *)&enum case for ContentSizeCategory.extraSmall(_:), 0x8000000100091000, 150, (uint64_t)v7);
  sub_10004528C((unsigned int *)&enum case for ContentSizeCategory.accessibilityMedium(_:), (unsigned int *)&enum case for ContentSizeCategory.extraExtraLarge(_:), 0x8000000100090FD0, 163, (uint64_t)v4);
  sub_10003DFA0((uint64_t)v7, (uint64_t)v4, (uint64_t)v9);
  v18 = *(void (**)(char *, uint64_t))(v1 + 8);
  v18(v4, v0);
  v18(v7, v0);
  v19 = sub_10003DD60();
  v18(v9, v0);
  v20 = objc_msgSend((id)objc_opt_self(UITraitCollection), "traitCollectionWithPreferredContentSizeCategory:", v19);

  v21 = objc_msgSend((id)objc_opt_self(UIFontDescriptor), "preferredFontDescriptorWithTextStyle:compatibleWithTraitCollection:", UIFontTextStyleCallout, v20);
  type metadata accessor for AttributeName(0);
  sub_10001C96C((unint64_t *)&qword_1000B94E0, (uint64_t (*)(uint64_t))type metadata accessor for AttributeName, (uint64_t)&unk_10008A9E4);
  isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v17);
  v23 = objc_msgSend(v21, "fontDescriptorByAddingAttributes:", isa);

  v24 = objc_msgSend((id)objc_opt_self(UIFont), "fontWithDescriptor:size:", v23, 0.0);
  return v24;
}

uint64_t sub_1000457D8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for LayoutContext(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10004581C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t result;
  BOOL v12;
  uint64_t v13;
  Swift::String v14;
  void *object;
  uint64_t v16;
  Swift::String v17;
  void *v18;
  unint64_t v19;
  unint64_t v20;

  v1 = type metadata accessor for LayoutContext(0);
  v2 = __chkstk_darwin(v1);
  v4 = (char *)&v19 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v2);
  v6 = (char *)&v19 - v5;
  v7 = type metadata accessor for InternalWidgetFamily(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)&v19 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v10, v0 + *(int *)(v1 + 24), v7);
  result = (*(uint64_t (**)(char *, uint64_t))(v8 + 88))(v10, v7);
  if ((_DWORD)result == enum case for InternalWidgetFamily.systemSmall(_:))
  {
    sub_1000457D8(v0, (uint64_t)v6);
    v19 = 0;
    v20 = 0xE000000000000000;
    _StringGuts.grow(_:)(46);
    swift_bridgeObjectRelease(v20);
    v19 = 0xD00000000000002CLL;
    v20 = 0x8000000100091060;
    v13 = sub_10001C96C(&qword_1000B99A8, (uint64_t (*)(uint64_t))&type metadata accessor for InternalWidgetFamily, (uint64_t)&protocol conformance descriptor for InternalWidgetFamily);
    v14._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v7, v13);
    object = v14._object;
    String.append(_:)(v14);
    swift_bridgeObjectRelease(object);
    result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, v19, v20, "NewsTag/LayoutContext.swift", 27, 2, 409, 0);
LABEL_11:
    __break(1u);
    return result;
  }
  if ((_DWORD)result != enum case for InternalWidgetFamily.systemMedium(_:))
  {
    v12 = (_DWORD)result == enum case for InternalWidgetFamily.systemLarge(_:)
       || (_DWORD)result == enum case for InternalWidgetFamily.newsLargeTall(_:);
    if (!v12 && (_DWORD)result != enum case for InternalWidgetFamily.accessoryRectangular(_:))
    {
      sub_1000457D8(v0, (uint64_t)v4);
      v19 = 0;
      v20 = 0xE000000000000000;
      _StringGuts.grow(_:)(46);
      swift_bridgeObjectRelease(v20);
      v19 = 0xD00000000000002CLL;
      v20 = 0x8000000100091060;
      v16 = sub_10001C96C(&qword_1000B99A8, (uint64_t (*)(uint64_t))&type metadata accessor for InternalWidgetFamily, (uint64_t)&protocol conformance descriptor for InternalWidgetFamily);
      v17._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v7, v16);
      v18 = v17._object;
      String.append(_:)(v17);
      swift_bridgeObjectRelease(v18);
      result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, v19, v20, "NewsTag/LayoutContext.swift", 27, 2, 415, 0);
      goto LABEL_11;
    }
  }
  return result;
}

void sub_100045AD8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  int v8;
  uint64_t v11;
  Swift::String v12;
  void *object;
  unint64_t v14;
  unint64_t v15;

  v1 = type metadata accessor for LayoutContext(0);
  __chkstk_darwin(v1);
  v3 = (char *)&v14 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for InternalWidgetFamily(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, v0 + *(int *)(v1 + 24), v4);
  v8 = (*(uint64_t (**)(char *, uint64_t))(v5 + 88))(v7, v4);
  if (v8 != enum case for InternalWidgetFamily.systemSmall(_:))
  {
    if (v8 == enum case for InternalWidgetFamily.systemMedium(_:)
      || v8 == enum case for InternalWidgetFamily.systemLarge(_:)
      || v8 == enum case for InternalWidgetFamily.newsLargeTall(_:))
    {
      sub_10004676C();
      sub_10004676C();
      sub_10004581C();
      sub_10004581C();
      sub_10004676C();
      sub_1000462FC();
    }
    else if (v8 != enum case for InternalWidgetFamily.accessoryRectangular(_:))
    {
      sub_1000457D8(v0, (uint64_t)v3);
      v14 = 0;
      v15 = 0xE000000000000000;
      _StringGuts.grow(_:)(47);
      swift_bridgeObjectRelease(v15);
      v14 = 0xD00000000000002DLL;
      v15 = 0x80000001000910C0;
      v11 = sub_10001C96C(&qword_1000B99A8, (uint64_t (*)(uint64_t))&type metadata accessor for InternalWidgetFamily, (uint64_t)&protocol conformance descriptor for InternalWidgetFamily);
      v12._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v4, v11);
      object = v12._object;
      String.append(_:)(v12);
      swift_bridgeObjectRelease(object);
      _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, v14, v15, "NewsTag/LayoutContext.swift", 27, 2, 248, 0);
      __break(1u);
    }
  }
}

void sub_100045D40()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int v11;
  BOOL v12;
  uint64_t v13;
  Swift::String v14;
  void *object;
  uint64_t v16;
  Swift::String v17;
  void *v18;
  unint64_t v19;
  unint64_t v20;

  v1 = type metadata accessor for LayoutContext(0);
  v2 = __chkstk_darwin(v1);
  v4 = (char *)&v19 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v2);
  v6 = (char *)&v19 - v5;
  v7 = type metadata accessor for InternalWidgetFamily(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)&v19 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v10, v0 + *(int *)(v1 + 24), v7);
  v11 = (*(uint64_t (**)(char *, uint64_t))(v8 + 88))(v10, v7);
  if (v11 == enum case for InternalWidgetFamily.systemSmall(_:))
  {
    sub_1000457D8(v0, (uint64_t)v6);
    v19 = 0;
    v20 = 0xE000000000000000;
    _StringGuts.grow(_:)(41);
    swift_bridgeObjectRelease(v20);
    v19 = 0xD000000000000027;
    v20 = 0x8000000100091120;
    v13 = sub_10001C96C(&qword_1000B99A8, (uint64_t (*)(uint64_t))&type metadata accessor for InternalWidgetFamily, (uint64_t)&protocol conformance descriptor for InternalWidgetFamily);
    v14._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v7, v13);
    object = v14._object;
    String.append(_:)(v14);
    swift_bridgeObjectRelease(object);
    _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, v19, v20, "NewsTag/LayoutContext.swift", 27, 2, 394, 0);
  }
  else
  {
    if (v11 == enum case for InternalWidgetFamily.systemMedium(_:)
      || (v11 != enum case for InternalWidgetFamily.systemLarge(_:)
        ? (v12 = v11 == enum case for InternalWidgetFamily.newsLargeTall(_:))
        : (v12 = 1),
          v12 || v11 == enum case for InternalWidgetFamily.accessoryRectangular(_:)))
    {
      sub_10004676C();
      sub_10004581C();
      sub_10004581C();
      sub_10004676C();
      sub_1000462FC();
      return;
    }
    sub_1000457D8(v0, (uint64_t)v4);
    v19 = 0;
    v20 = 0xE000000000000000;
    _StringGuts.grow(_:)(41);
    swift_bridgeObjectRelease(v20);
    v19 = 0xD000000000000027;
    v20 = 0x8000000100091120;
    v16 = sub_10001C96C(&qword_1000B99A8, (uint64_t (*)(uint64_t))&type metadata accessor for InternalWidgetFamily, (uint64_t)&protocol conformance descriptor for InternalWidgetFamily);
    v17._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v7, v16);
    v18 = v17._object;
    String.append(_:)(v17);
    swift_bridgeObjectRelease(v18);
    _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, v19, v20, "NewsTag/LayoutContext.swift", 27, 2, 400, 0);
  }
  __break(1u);
}

id sub_10004604C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  void *v10;
  void *v11;
  void (*v12)(char *, uint64_t);
  NSString *v13;
  id v14;
  double v15;
  double v16;
  double v17;
  id v18;
  uint64_t v20;

  v0 = type metadata accessor for ContentSizeCategory(0);
  v1 = *(_QWORD *)(v0 - 8);
  v2 = __chkstk_darwin(v0);
  v4 = (char *)&v20 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __chkstk_darwin(v2);
  v7 = (char *)&v20 - v6;
  __chkstk_darwin(v5);
  v9 = (char *)&v20 - v8;
  sub_1000472AC();
  v10 = (void *)static UIFont.preferredFont(for:weight:)(UIFontTextStyleCaption1, UIFontWeightBold);
  v11 = (void *)objc_opt_self(UIFont);
  type metadata accessor for LayoutContext(0);
  sub_10004528C((unsigned int *)&enum case for ContentSizeCategory.medium(_:), (unsigned int *)&enum case for ContentSizeCategory.extraSmall(_:), 0x8000000100091000, 150, (uint64_t)v7);
  sub_10004528C((unsigned int *)&enum case for ContentSizeCategory.accessibilityMedium(_:), (unsigned int *)&enum case for ContentSizeCategory.extraExtraLarge(_:), 0x8000000100090FD0, 163, (uint64_t)v4);
  sub_10003DFA0((uint64_t)v7, (uint64_t)v4, (uint64_t)v9);
  v12 = *(void (**)(char *, uint64_t))(v1 + 8);
  v12(v4, v0);
  v12(v7, v0);
  v13 = sub_10003DD60();
  v12(v9, v0);
  v14 = objc_msgSend(v11, "nt_preferredFontForCondensedTextStyle:contentSizeCategory:", 2, v13);

  objc_msgSend(v14, "nt_scaledValueForValue:", 1.0);
  v16 = v15;

  sub_1000464B0();
  v18 = objc_msgSend(v10, "fontWithSize:", v16 * v17);

  return v18;
}

uint64_t sub_100046268()
{
  uint64_t v0;
  double v1;
  double v2;
  double v3;
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;

  sub_10004676C();
  v2 = v1;
  v3 = *(double *)(v0 + *(int *)(type metadata accessor for LayoutContext(0) + 40));
  sub_10004676C();
  v5 = v3 * v4;
  sub_10004581C();
  v7 = v5 - (v6 + v6);
  sub_10004581C();
  v9 = v7 + (v3 + v3) * v8;
  sub_10004676C();
  if (v2 * (sub_1000462FC() * (v9 / v10)) + -16.0 >= 36.0)
    return 0x4042000000000000;
  else
    return 0;
}

double sub_1000462FC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  void *v10;
  void (*v11)(char *, uint64_t);
  NSString *v12;
  id v13;
  double v14;
  double v15;
  uint64_t v17;

  v0 = type metadata accessor for ContentSizeCategory(0);
  v1 = *(_QWORD *)(v0 - 8);
  v2 = __chkstk_darwin(v0);
  v4 = (char *)&v17 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __chkstk_darwin(v2);
  v7 = (char *)&v17 - v6;
  __chkstk_darwin(v5);
  v9 = (char *)&v17 - v8;
  v10 = (void *)objc_opt_self(UIFont);
  type metadata accessor for LayoutContext(0);
  sub_10004528C((unsigned int *)&enum case for ContentSizeCategory.medium(_:), (unsigned int *)&enum case for ContentSizeCategory.extraSmall(_:), 0x8000000100091000, 150, (uint64_t)v7);
  sub_10004528C((unsigned int *)&enum case for ContentSizeCategory.accessibilityMedium(_:), (unsigned int *)&enum case for ContentSizeCategory.extraExtraLarge(_:), 0x8000000100090FD0, 163, (uint64_t)v4);
  sub_10003DFA0((uint64_t)v7, (uint64_t)v4, (uint64_t)v9);
  v11 = *(void (**)(char *, uint64_t))(v1 + 8);
  v11(v4, v0);
  v11(v7, v0);
  v12 = sub_10003DD60();
  v11(v9, v0);
  v13 = objc_msgSend(v10, "nt_preferredFontForCondensedTextStyle:contentSizeCategory:", 2, v12);

  objc_msgSend(v13, "nt_scaledValueForValue:", 1.0);
  v15 = v14;

  return v15;
}

uint64_t sub_1000464B0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t result;
  BOOL v12;
  uint64_t v13;
  Swift::String v14;
  void *object;
  uint64_t v16;
  Swift::String v17;
  void *v18;
  unint64_t v19;
  unint64_t v20;

  v1 = type metadata accessor for LayoutContext(0);
  v2 = __chkstk_darwin(v1);
  v4 = (char *)&v19 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v2);
  v6 = (char *)&v19 - v5;
  v7 = type metadata accessor for InternalWidgetFamily(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)&v19 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v10, v0 + *(int *)(v1 + 24), v7);
  result = (*(uint64_t (**)(char *, uint64_t))(v8 + 88))(v10, v7);
  if ((_DWORD)result == enum case for InternalWidgetFamily.systemSmall(_:))
  {
    sub_1000457D8(v0, (uint64_t)v6);
    v19 = 0;
    v20 = 0xE000000000000000;
    _StringGuts.grow(_:)(39);
    swift_bridgeObjectRelease(v20);
    v19 = 0xD000000000000025;
    v20 = 0x80000001000910F0;
    v13 = sub_10001C96C(&qword_1000B99A8, (uint64_t (*)(uint64_t))&type metadata accessor for InternalWidgetFamily, (uint64_t)&protocol conformance descriptor for InternalWidgetFamily);
    v14._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v7, v13);
    object = v14._object;
    String.append(_:)(v14);
    swift_bridgeObjectRelease(object);
    result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, v19, v20, "NewsTag/LayoutContext.swift", 27, 2, 330, 0);
LABEL_11:
    __break(1u);
    return result;
  }
  if ((_DWORD)result != enum case for InternalWidgetFamily.systemMedium(_:))
  {
    v12 = (_DWORD)result == enum case for InternalWidgetFamily.systemLarge(_:)
       || (_DWORD)result == enum case for InternalWidgetFamily.newsLargeTall(_:);
    if (!v12 && (_DWORD)result != enum case for InternalWidgetFamily.accessoryRectangular(_:))
    {
      sub_1000457D8(v0, (uint64_t)v4);
      v19 = 0;
      v20 = 0xE000000000000000;
      _StringGuts.grow(_:)(39);
      swift_bridgeObjectRelease(v20);
      v19 = 0xD000000000000025;
      v20 = 0x80000001000910F0;
      v16 = sub_10001C96C(&qword_1000B99A8, (uint64_t (*)(uint64_t))&type metadata accessor for InternalWidgetFamily, (uint64_t)&protocol conformance descriptor for InternalWidgetFamily);
      v17._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v7, v16);
      v18 = v17._object;
      String.append(_:)(v17);
      swift_bridgeObjectRelease(v18);
      result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, v19, v20, "NewsTag/LayoutContext.swift", 27, 2, 336, 0);
      goto LABEL_11;
    }
  }
  return result;
}

void sub_10004676C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  int v8;
  BOOL v9;
  uint64_t v10;
  Swift::String v11;
  void *object;
  unint64_t v13;
  unint64_t v14;

  v1 = type metadata accessor for LayoutContext(0);
  __chkstk_darwin(v1);
  v3 = (char *)&v13 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for InternalWidgetFamily(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v13 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, v0 + *(int *)(v1 + 24), v4);
  v8 = (*(uint64_t (**)(char *, uint64_t))(v5 + 88))(v7, v4);
  if (v8 != enum case for InternalWidgetFamily.systemSmall(_:))
  {
    if (v8 == enum case for InternalWidgetFamily.systemMedium(_:)
      || (v8 != enum case for InternalWidgetFamily.systemLarge(_:)
        ? (v9 = v8 == enum case for InternalWidgetFamily.newsLargeTall(_:))
        : (v9 = 1),
          v9))
    {
      sub_1000462FC();
    }
    else if (v8 != enum case for InternalWidgetFamily.accessoryRectangular(_:))
    {
      sub_1000457D8(v0, (uint64_t)v3);
      v13 = 0;
      v14 = 0xE000000000000000;
      _StringGuts.grow(_:)(43);
      swift_bridgeObjectRelease(v14);
      v13 = 0xD000000000000029;
      v14 = 0x8000000100091030;
      v10 = sub_10001C96C(&qword_1000B99A8, (uint64_t (*)(uint64_t))&type metadata accessor for InternalWidgetFamily, (uint64_t)&protocol conformance descriptor for InternalWidgetFamily);
      v11._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v4, v10);
      object = v11._object;
      String.append(_:)(v11);
      swift_bridgeObjectRelease(object);
      _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, v13, v14, "NewsTag/LayoutContext.swift", 27, 2, 372, 0);
      __break(1u);
    }
  }
}

void sub_10004698C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  void (*v15)(char *, uint64_t, uint64_t);
  uint64_t (*v16)(char *, uint64_t);
  int v17;
  int v18;
  int v21;
  BOOL v22;
  uint64_t v23;
  Swift::String v24;
  void *v25;
  uint64_t v26;
  Swift::String v27;
  void *object;
  unint64_t v29;
  unint64_t v30;

  v1 = type metadata accessor for LayoutContext(0);
  v2 = __chkstk_darwin(v1);
  v4 = (char *)&v29 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v2);
  v6 = (char *)&v29 - v5;
  v7 = type metadata accessor for InternalWidgetFamily(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = __chkstk_darwin(v7);
  v11 = (char *)&v29 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v13 = (char *)&v29 - v12;
  v14 = v0 + *(int *)(v1 + 24);
  v15 = *(void (**)(char *, uint64_t, uint64_t))(v8 + 16);
  v15((char *)&v29 - v12, v14, v7);
  v16 = *(uint64_t (**)(char *, uint64_t))(v8 + 88);
  v17 = v16(v13, v7);
  v18 = enum case for InternalWidgetFamily.systemSmall(_:);
  if (v17 != enum case for InternalWidgetFamily.systemSmall(_:))
  {
    if (v17 == enum case for InternalWidgetFamily.systemMedium(_:)
      || v17 == enum case for InternalWidgetFamily.systemLarge(_:)
      || v17 == enum case for InternalWidgetFamily.newsLargeTall(_:))
    {
      sub_10004581C();
      sub_10004676C();
      sub_10004581C();
      return;
    }
    if (v17 != enum case for InternalWidgetFamily.accessoryRectangular(_:))
    {
      sub_1000457D8(v0, (uint64_t)v4);
      v29 = 0;
      v30 = 0xE000000000000000;
      _StringGuts.grow(_:)(20);
      swift_bridgeObjectRelease(v30);
      v29 = 0xD000000000000025;
      v30 = 0x8000000100091090;
      v26 = sub_10001C96C(&qword_1000B99A8, (uint64_t (*)(uint64_t))&type metadata accessor for InternalWidgetFamily, (uint64_t)&protocol conformance descriptor for InternalWidgetFamily);
      v27._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v7, v26);
      object = v27._object;
      String.append(_:)(v27);
      swift_bridgeObjectRelease(object);
      _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, v29, v30, "NewsTag/LayoutContext.swift", 27, 2, 435, 0);
      goto LABEL_25;
    }
  }
  v15(v11, v14, v7);
  v21 = v16(v11, v7);
  if (v21 != v18)
  {
    if (v21 == enum case for InternalWidgetFamily.systemMedium(_:)
      || (v21 != enum case for InternalWidgetFamily.systemLarge(_:)
        ? (v22 = v21 == enum case for InternalWidgetFamily.newsLargeTall(_:))
        : (v22 = 1),
          v22))
    {
      sub_1000462FC();
      return;
    }
    if (v21 != enum case for InternalWidgetFamily.accessoryRectangular(_:))
    {
      sub_1000457D8(v0, (uint64_t)v6);
      v29 = 0;
      v30 = 0xE000000000000000;
      _StringGuts.grow(_:)(43);
      swift_bridgeObjectRelease(v30);
      v29 = 0xD000000000000029;
      v30 = 0x8000000100091030;
      v23 = sub_10001C96C(&qword_1000B99A8, (uint64_t (*)(uint64_t))&type metadata accessor for InternalWidgetFamily, (uint64_t)&protocol conformance descriptor for InternalWidgetFamily);
      v24._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v7, v23);
      v25 = v24._object;
      String.append(_:)(v24);
      swift_bridgeObjectRelease(v25);
      _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, v29, v30, "NewsTag/LayoutContext.swift", 27, 2, 372, 0);
LABEL_25:
      __break(1u);
    }
  }
}

unint64_t sub_100046D34()
{
  unint64_t result;

  result = qword_1000BAEC0;
  if (!qword_1000BAEC0)
  {
    result = swift_getWitnessTable(&unk_10008BF3C, &type metadata for LayoutContext.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000BAEC0);
  }
  return result;
}

unint64_t sub_100046D78()
{
  unint64_t result;

  result = qword_1000BAEC8;
  if (!qword_1000BAEC8)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for CGFloat, &type metadata for CGFloat);
    atomic_store(result, (unint64_t *)&qword_1000BAEC8);
  }
  return result;
}

unint64_t sub_100046DBC()
{
  unint64_t result;

  result = qword_1000BAED0;
  if (!qword_1000BAED0)
  {
    result = swift_getWitnessTable(&unk_10008BEFC, &type metadata for LayoutContext.Errors);
    atomic_store(result, (unint64_t *)&qword_1000BAED0);
  }
  return result;
}

uint64_t sub_100046E00(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for LayoutContext(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t sub_100046E3C()
{
  unint64_t result;

  result = qword_1000BAEE8;
  if (!qword_1000BAEE8)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for CGFloat, &type metadata for CGFloat);
    atomic_store(result, (unint64_t *)&qword_1000BAEE8);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for LayoutContext.Errors(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFF)
    goto LABEL_17;
  if (a2 + 1 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 1) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 1;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 1;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 1;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 2;
  v8 = v6 - 2;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for LayoutContext.Errors(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_100046F5C + 4 * byte_10008BCF2[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_100046F90 + 4 * byte_10008BCED[v4]))();
}

uint64_t sub_100046F90(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100046F98(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100046FA0);
  return result;
}

uint64_t sub_100046FAC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100046FB4);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_100046FB8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100046FC0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

_BYTE *sub_100046FCC(_BYTE *result, char a2)
{
  *result = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for LayoutContext.Errors()
{
  return &type metadata for LayoutContext.Errors;
}

uint64_t getEnumTagSinglePayload for LayoutContext.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xF8)
    goto LABEL_17;
  if (a2 + 8 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 8) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 8;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 8;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 8;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 9;
  v8 = v6 - 9;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for LayoutContext.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 8 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 8) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF8)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF7)
    return ((uint64_t (*)(void))((char *)&loc_1000470C4 + 4 * byte_10008BCFC[v4]))();
  *a1 = a2 + 8;
  return ((uint64_t (*)(void))((char *)sub_1000470F8 + 4 * byte_10008BCF7[v4]))();
}

uint64_t sub_1000470F8(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100047100(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100047108);
  return result;
}

uint64_t sub_100047114(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10004711CLL);
  *(_BYTE *)result = a2 + 8;
  return result;
}

uint64_t sub_100047120(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100047128(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for LayoutContext.CodingKeys()
{
  return &type metadata for LayoutContext.CodingKeys;
}

unint64_t sub_100047148()
{
  unint64_t result;

  result = qword_1000BAEF8;
  if (!qword_1000BAEF8)
  {
    result = swift_getWitnessTable(&unk_10008BE6C, &type metadata for LayoutContext.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000BAEF8);
  }
  return result;
}

unint64_t sub_100047190()
{
  unint64_t result;

  result = qword_1000BAF00;
  if (!qword_1000BAF00)
  {
    result = swift_getWitnessTable(&unk_10008BED4, &type metadata for LayoutContext.Errors);
    atomic_store(result, (unint64_t *)&qword_1000BAF00);
  }
  return result;
}

unint64_t sub_1000471D8()
{
  unint64_t result;

  result = qword_1000BAF08;
  if (!qword_1000BAF08)
  {
    result = swift_getWitnessTable(&unk_10008BDA4, &type metadata for LayoutContext.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000BAF08);
  }
  return result;
}

unint64_t sub_100047220()
{
  unint64_t result;

  result = qword_1000BAF10;
  if (!qword_1000BAF10)
  {
    result = swift_getWitnessTable(&unk_10008BDCC, &type metadata for LayoutContext.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000BAF10);
  }
  return result;
}

unint64_t sub_100047264(Swift::String string)
{
  void *object;
  Swift::String v2;
  unint64_t v3;

  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1000AAF08, v2);
  swift_bridgeObjectRelease(object);
  if (v3 >= 9)
    return 9;
  else
    return v3;
}

unint64_t sub_1000472AC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000BAF18;
  if (!qword_1000BAF18)
  {
    v1 = objc_opt_self(UIFont);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_1000BAF18);
  }
  return result;
}

char *sub_1000472E8(char *a1, char **a2, int *a3)
{
  int v4;
  char *v5;
  char *v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t *v12;
  char *v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  char *v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  v4 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  v5 = *a2;
  *(_QWORD *)a1 = *a2;
  if ((v4 & 0x20000) != 0)
  {
    a1 = &v5[(v4 + 16) & ~(unint64_t)v4];
    swift_retain(v5);
  }
  else
  {
    v8 = a2[1];
    v9 = a2[2];
    *((_QWORD *)a1 + 1) = v8;
    *((_QWORD *)a1 + 2) = v9;
    *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 3);
    *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 5);
    v10 = a3[8];
    v11 = &a1[v10];
    v12 = (uint64_t *)((char *)a2 + v10);
    a1[56] = *((_BYTE *)a2 + 56);
    v13 = v5;
    v14 = v8;
    v15 = v9;
    v16 = sub_10001B520(&qword_1000B9B20);
    if (swift_getEnumCaseMultiPayload(v12, v16) == 1)
    {
      v17 = type metadata accessor for RedactionReasons(0);
      (*(void (**)(char *, uint64_t *, uint64_t))(*(_QWORD *)(v17 - 8) + 16))(v11, v12, v17);
      v18 = 1;
    }
    else
    {
      v19 = *v12;
      *(_QWORD *)v11 = *v12;
      swift_retain(v19);
      v18 = 0;
    }
    swift_storeEnumTagMultiPayload(v11, v16, v18);
    v20 = a3[9];
    v21 = &a1[v20];
    v22 = (uint64_t)a2 + v20;
    v23 = *(_QWORD *)v22;
    v24 = *(_BYTE *)(v22 + 8);
    sub_100024758(*(_QWORD *)v22, v24);
    *(_QWORD *)v21 = v23;
    v21[8] = v24;
    v25 = a3[10];
    v26 = &a1[v25];
    v27 = (uint64_t *)((char *)a2 + v25);
    v28 = sub_10001B520(&qword_1000B9A20);
    if (swift_getEnumCaseMultiPayload(v27, v28) == 1)
    {
      v29 = type metadata accessor for WidgetRenderingMode(0);
      (*(void (**)(char *, uint64_t *, uint64_t))(*(_QWORD *)(v29 - 8) + 16))(v26, v27, v29);
      v30 = v26;
      v31 = v28;
      v32 = 1;
    }
    else
    {
      v33 = *v27;
      *(_QWORD *)v26 = *v27;
      swift_retain(v33);
      v30 = v26;
      v31 = v28;
      v32 = 0;
    }
    swift_storeEnumTagMultiPayload(v30, v31, v32);
  }
  return a1;
}

double sub_100047498(id *a1, int *a2)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  double result;

  v4 = (id *)((char *)a1 + a2[8]);
  v5 = sub_10001B520(&qword_1000B9B20);
  if (swift_getEnumCaseMultiPayload(v4, v5) == 1)
  {
    v6 = type metadata accessor for RedactionReasons(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v4, v6);
  }
  else
  {
    swift_release(*v4);
  }
  sub_10002C790(*(uint64_t *)((char *)a1 + a2[9]), *((_BYTE *)a1 + a2[9] + 8));
  v7 = (id *)((char *)a1 + a2[10]);
  v8 = sub_10001B520(&qword_1000B9A20);
  if (swift_getEnumCaseMultiPayload(v7, v8) == 1)
  {
    v9 = type metadata accessor for WidgetRenderingMode(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v9 - 8) + 8))(v7, v9);
  }
  else
  {
    *(_QWORD *)&result = swift_release(*v7).n128_u64[0];
  }
  return result;
}

uint64_t sub_100047590(uint64_t a1, uint64_t a2, int *a3)
{
  void *v6;
  void *v7;
  void *v8;
  __int128 v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t *v12;
  id v13;
  id v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v6 = *(void **)a2;
  v7 = *(void **)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v7;
  v8 = *(void **)(a2 + 16);
  *(_QWORD *)(a1 + 16) = v8;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  v9 = *(_OWORD *)(a2 + 40);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  v10 = a3[8];
  v11 = (uint64_t *)(a1 + v10);
  v12 = (uint64_t *)(a2 + v10);
  *(_OWORD *)(a1 + 40) = v9;
  v13 = v6;
  v14 = v7;
  v15 = v8;
  v16 = sub_10001B520(&qword_1000B9B20);
  if (swift_getEnumCaseMultiPayload(v12, v16) == 1)
  {
    v17 = type metadata accessor for RedactionReasons(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v17 - 8) + 16))(v11, v12, v17);
    v18 = 1;
  }
  else
  {
    v19 = *v12;
    *v11 = *v12;
    swift_retain(v19);
    v18 = 0;
  }
  swift_storeEnumTagMultiPayload(v11, v16, v18);
  v20 = a3[9];
  v21 = a1 + v20;
  v22 = a2 + v20;
  v23 = *(_QWORD *)v22;
  v24 = *(_BYTE *)(v22 + 8);
  sub_100024758(*(_QWORD *)v22, v24);
  *(_QWORD *)v21 = v23;
  *(_BYTE *)(v21 + 8) = v24;
  v25 = a3[10];
  v26 = (uint64_t *)(a1 + v25);
  v27 = (uint64_t *)(a2 + v25);
  v28 = sub_10001B520(&qword_1000B9A20);
  if (swift_getEnumCaseMultiPayload(v27, v28) == 1)
  {
    v29 = type metadata accessor for WidgetRenderingMode(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v29 - 8) + 16))(v26, v27, v29);
    v30 = 1;
  }
  else
  {
    v31 = *v27;
    *v26 = *v27;
    swift_retain(v31);
    v30 = 0;
  }
  swift_storeEnumTagMultiPayload(v26, v28, v30);
  return a1;
}

uint64_t sub_100047714(uint64_t a1, uint64_t a2, int *a3)
{
  void *v6;
  void *v7;
  id v8;
  void *v9;
  void *v10;
  id v11;
  void *v12;
  void *v13;
  id v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;

  v6 = *(void **)a1;
  v7 = *(void **)a2;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v8 = v7;

  v9 = *(void **)(a1 + 8);
  v10 = *(void **)(a2 + 8);
  *(_QWORD *)(a1 + 8) = v10;
  v11 = v10;

  v12 = *(void **)(a1 + 16);
  v13 = *(void **)(a2 + 16);
  *(_QWORD *)(a1 + 16) = v13;
  v14 = v13;

  v15 = *(_OWORD *)(a2 + 24);
  v16 = *(_OWORD *)(a2 + 40);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  *(_OWORD *)(a1 + 40) = v16;
  *(_OWORD *)(a1 + 24) = v15;
  if (a1 != a2)
  {
    v17 = a3[8];
    v18 = (uint64_t *)(a1 + v17);
    v19 = (uint64_t *)(a2 + v17);
    sub_10002CCF4(a1 + v17, &qword_1000B9B20);
    v20 = sub_10001B520(&qword_1000B9B20);
    if (swift_getEnumCaseMultiPayload(v19, v20) == 1)
    {
      v21 = type metadata accessor for RedactionReasons(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v21 - 8) + 16))(v18, v19, v21);
      v22 = 1;
    }
    else
    {
      v23 = *v19;
      *v18 = *v19;
      swift_retain(v23);
      v22 = 0;
    }
    swift_storeEnumTagMultiPayload(v18, v20, v22);
  }
  v24 = a3[9];
  v25 = a1 + v24;
  v26 = a2 + v24;
  v27 = *(_QWORD *)v26;
  v28 = *(_BYTE *)(v26 + 8);
  sub_100024758(*(_QWORD *)v26, v28);
  v29 = *(_QWORD *)v25;
  v30 = *(_BYTE *)(v25 + 8);
  *(_QWORD *)v25 = v27;
  *(_BYTE *)(v25 + 8) = v28;
  sub_10002C790(v29, v30);
  if (a1 != a2)
  {
    v31 = a3[10];
    v32 = (uint64_t *)(a1 + v31);
    v33 = (uint64_t *)(a2 + v31);
    sub_10002CCF4(a1 + v31, &qword_1000B9A20);
    v34 = sub_10001B520(&qword_1000B9A20);
    if (swift_getEnumCaseMultiPayload(v33, v34) == 1)
    {
      v35 = type metadata accessor for WidgetRenderingMode(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v35 - 8) + 16))(v32, v33, v35);
      v36 = 1;
    }
    else
    {
      v37 = *v33;
      *v32 = *v33;
      swift_retain(v37);
      v36 = 0;
    }
    swift_storeEnumTagMultiPayload(v32, v34, v36);
  }
  return a1;
}

uint64_t sub_1000478EC(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void *v7;
  const void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  const void *v16;
  uint64_t v17;
  uint64_t v18;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  v6 = a3[8];
  v7 = (void *)(a1 + v6);
  v8 = (const void *)(a2 + v6);
  v9 = sub_10001B520(&qword_1000B9B20);
  if (swift_getEnumCaseMultiPayload(v8, v9) == 1)
  {
    v10 = type metadata accessor for RedactionReasons(0);
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v7, v8, v10);
    swift_storeEnumTagMultiPayload(v7, v9, 1);
  }
  else
  {
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
  }
  v11 = a3[9];
  v12 = a3[10];
  v13 = a1 + v11;
  v14 = a2 + v11;
  *(_QWORD *)v13 = *(_QWORD *)v14;
  *(_BYTE *)(v13 + 8) = *(_BYTE *)(v14 + 8);
  v15 = (void *)(a1 + v12);
  v16 = (const void *)(a2 + v12);
  v17 = sub_10001B520(&qword_1000B9A20);
  if (swift_getEnumCaseMultiPayload(v16, v17) == 1)
  {
    v18 = type metadata accessor for WidgetRenderingMode(0);
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v18 - 8) + 32))(v15, v16, v18);
    swift_storeEnumTagMultiPayload(v15, v17, 1);
  }
  else
  {
    memcpy(v15, v16, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
  }
  return a1;
}

uint64_t sub_100047A54(uint64_t a1, uint64_t a2, int *a3)
{
  void *v6;
  void *v7;
  void *v8;
  uint64_t v9;
  void *v10;
  const void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  void *v21;
  const void *v22;
  uint64_t v23;
  uint64_t v24;

  v6 = *(void **)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;

  v7 = *(void **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);

  v8 = *(void **)(a1 + 16);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);

  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  if (a1 != a2)
  {
    v9 = a3[8];
    v10 = (void *)(a1 + v9);
    v11 = (const void *)(a2 + v9);
    sub_10002CCF4(a1 + v9, &qword_1000B9B20);
    v12 = sub_10001B520(&qword_1000B9B20);
    if (swift_getEnumCaseMultiPayload(v11, v12) == 1)
    {
      v13 = type metadata accessor for RedactionReasons(0);
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v13 - 8) + 32))(v10, v11, v13);
      swift_storeEnumTagMultiPayload(v10, v12, 1);
    }
    else
    {
      memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
    }
  }
  v14 = a3[9];
  v15 = a1 + v14;
  v16 = (uint64_t *)(a2 + v14);
  v17 = *v16;
  LOBYTE(v16) = *((_BYTE *)v16 + 8);
  v18 = *(_QWORD *)v15;
  v19 = *(_BYTE *)(v15 + 8);
  *(_QWORD *)v15 = v17;
  *(_BYTE *)(v15 + 8) = (_BYTE)v16;
  sub_10002C790(v18, v19);
  if (a1 != a2)
  {
    v20 = a3[10];
    v21 = (void *)(a1 + v20);
    v22 = (const void *)(a2 + v20);
    sub_10002CCF4(a1 + v20, &qword_1000B9A20);
    v23 = sub_10001B520(&qword_1000B9A20);
    if (swift_getEnumCaseMultiPayload(v22, v23) == 1)
    {
      v24 = type metadata accessor for WidgetRenderingMode(0);
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v24 - 8) + 32))(v21, v22, v24);
      swift_storeEnumTagMultiPayload(v21, v23, 1);
    }
    else
    {
      memcpy(v21, v22, *(_QWORD *)(*(_QWORD *)(v23 - 8) + 64));
    }
  }
  return a1;
}

uint64_t sub_100047C1C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100047C28);
}

uint64_t sub_100047C28(char *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  int v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  if ((_DWORD)a2 == 2147483646)
  {
    v4 = *(_QWORD *)a1;
    if (*(_QWORD *)a1 >= 0xFFFFFFFFuLL)
      LODWORD(v4) = -1;
    v5 = v4 - 1;
    if (v5 < 0)
      v5 = -1;
    return (v5 + 1);
  }
  else
  {
    v9 = sub_10001B520(&qword_1000BA738);
    v10 = *(_QWORD *)(v9 - 8);
    if (*(_DWORD *)(v10 + 84) == (_DWORD)a2)
    {
      v11 = v9;
      v12 = *(int *)(a3 + 32);
    }
    else
    {
      v11 = sub_10001B520(&qword_1000B9A28);
      v10 = *(_QWORD *)(v11 - 8);
      v12 = *(int *)(a3 + 40);
    }
    return (*(uint64_t (**)(char *, uint64_t, uint64_t))(v10 + 48))(&a1[v12], a2, v11);
  }
}

uint64_t sub_100047CDC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100047CE8);
}

char *sub_100047CE8(char *result, uint64_t a2, int a3, uint64_t a4)
{
  char *v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v5 = result;
  if (a3 == 2147483646)
  {
    *(_QWORD *)result = a2;
  }
  else
  {
    v8 = sub_10001B520(&qword_1000BA738);
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      v10 = v8;
      v11 = *(int *)(a4 + 32);
    }
    else
    {
      v10 = sub_10001B520(&qword_1000B9A28);
      v9 = *(_QWORD *)(v10 - 8);
      v11 = *(int *)(a4 + 40);
    }
    return (char *)(*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v9 + 56))(&v5[v11], a2, a2, v10);
  }
  return result;
}

uint64_t type metadata accessor for SmallBackgroundView(uint64_t a1)
{
  return sub_10002ABF8(a1, qword_1000BAF78, (uint64_t)&nominal type descriptor for SmallBackgroundView);
}

void sub_100047DA0(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v6[7];

  v6[0] = "\b";
  v6[1] = "\b";
  v6[2] = "\b";
  v6[3] = &unk_10008BFC0;
  sub_100038C4C(319, (unint64_t *)&unk_1000BA7A8, (uint64_t (*)(uint64_t))&type metadata accessor for RedactionReasons);
  if (v3 <= 0x3F)
  {
    v6[4] = *(_QWORD *)(v2 - 8) + 64;
    v6[5] = &unk_10008BFD8;
    sub_100038C4C(319, (unint64_t *)&qword_1000B9A98, (uint64_t (*)(uint64_t))&type metadata accessor for WidgetRenderingMode);
    if (v5 <= 0x3F)
    {
      v6[6] = *(_QWORD *)(v4 - 8) + 64;
      swift_initStructMetadata(a1, 256, 7, v6, a1 + 16);
    }
  }
}

uint64_t sub_100047E64(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_10009CB98, 1);
}

double sub_100047E74@<D0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  void (*v21)(char *, uint64_t);
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  double result;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  uint64_t KeyPath;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  id v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  uint64_t *v48;
  uint64_t *v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  _QWORD *v53;

  v53 = a2;
  v50 = sub_10001B520(&qword_1000BAFD0);
  __chkstk_darwin(v50);
  v52 = (uint64_t *)((char *)&v46 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  v51 = sub_10001B520(&qword_1000BAFD8);
  __chkstk_darwin(v51);
  v49 = (uint64_t *)((char *)&v46 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  v46 = type metadata accessor for Scrim(0);
  v5 = __chkstk_darwin(v46);
  v47 = (char *)&v46 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v48 = (uint64_t *)((char *)&v46 - v7);
  v8 = type metadata accessor for SmallBackgroundView(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(_QWORD *)(v9 + 64);
  __chkstk_darwin(v8);
  v11 = (char *)&v46 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for WidgetRenderingMode(0);
  v13 = *(_QWORD *)(v12 - 8);
  v14 = __chkstk_darwin(v12);
  v16 = (char *)&v46 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  v18 = (char *)&v46 - v17;
  v19 = sub_10002A1BC((uint64_t *)((char *)&v46 - v17));
  static WidgetRenderingMode.accented.getter(v19);
  v20 = sub_10001C96C(&qword_1000BA8B8, (uint64_t (*)(uint64_t))&type metadata accessor for WidgetRenderingMode, (uint64_t)&protocol conformance descriptor for WidgetRenderingMode);
  LOBYTE(v8) = dispatch thunk of static Equatable.== infix(_:_:)(v18, v16, v12, v20);
  v21 = *(void (**)(char *, uint64_t))(v13 + 8);
  v21(v16, v12);
  v21(v18, v12);
  if ((v8 & 1) != 0)
  {
    sub_10002A83C(a1, (uint64_t)&v46 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), type metadata accessor for SmallBackgroundView);
    v22 = *(unsigned __int8 *)(v9 + 80);
    v23 = (v22 + 16) & ~v22;
    v24 = swift_allocObject(&unk_1000AC8B8, v23 + v10, v22 | 7);
    sub_100048CD4((uint64_t)v11, v24 + v23);
    v25 = v52;
    *v52 = sub_100048D18;
    v25[1] = v24;
    swift_storeEnumTagMultiPayload(v25, v50, 1);
    v26 = sub_10001B520(&qword_1000BAFE8);
    v27 = sub_10002CE94(&qword_1000BAFF0, &qword_1000BAFD8, (uint64_t)&protocol conformance descriptor for TupleView<A>);
    v28 = sub_10002CE94(&qword_1000BAFF8, &qword_1000BAFE8, (uint64_t)&protocol conformance descriptor for GeometryReader<A>);
    _ConditionalContent<>.init(storage:)(v53, v25, v51, v26, v27, v28);
  }
  else
  {
    v30 = sub_10004832C();
    sub_10002A83C(a1, (uint64_t)&v46 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), type metadata accessor for SmallBackgroundView);
    v31 = *(unsigned __int8 *)(v9 + 80);
    v32 = (v31 + 16) & ~v31;
    v33 = swift_allocObject(&unk_1000AC890, v32 + v10, v31 | 7);
    sub_100048CD4((uint64_t)v11, v33 + v32);
    v34 = *(void **)(a1 + 16);
    KeyPath = swift_getKeyPath(&unk_10008C040);
    v36 = (uint64_t)v48;
    *v48 = KeyPath;
    v37 = sub_10001B520(&qword_1000B9A20);
    swift_storeEnumTagMultiPayload(v36, v37, 0);
    v38 = (uint64_t)v47;
    *(_QWORD *)(v36 + *(int *)(v46 + 20)) = v34;
    sub_10002A83C(v36, v38, type metadata accessor for Scrim);
    v39 = (uint64_t)v49;
    *v49 = v30;
    *(_QWORD *)(v39 + 8) = sub_100048D18;
    *(_QWORD *)(v39 + 16) = v33;
    v40 = sub_10001B520(&qword_1000BAFE0);
    sub_10002A83C(v38, v39 + *(int *)(v40 + 64), type metadata accessor for Scrim);
    v41 = v34;
    swift_retain_n(v30, 2);
    swift_retain_n(v33, 2);
    sub_100048D24(v38);
    swift_release(v30);
    swift_release(v33);
    v42 = v52;
    sub_10002CCB0(v39, (uint64_t)v52, &qword_1000BAFD8);
    swift_storeEnumTagMultiPayload(v42, v50, 0);
    v43 = sub_10001B520(&qword_1000BAFE8);
    v44 = sub_10002CE94(&qword_1000BAFF0, &qword_1000BAFD8, (uint64_t)&protocol conformance descriptor for TupleView<A>);
    v45 = sub_10002CE94(&qword_1000BAFF8, &qword_1000BAFE8, (uint64_t)&protocol conformance descriptor for GeometryReader<A>);
    _ConditionalContent<>.init(storage:)(v53, v42, v51, v43, v44, v45);
    sub_10002CCF4(v39, &qword_1000BAFD8);
    sub_100048D24(v36);
    swift_release(v30);
    *(_QWORD *)&result = swift_release(v33).n128_u64[0];
  }
  return result;
}

uint64_t sub_10004832C()
{
  id *v0;
  id *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  void (*v12)(char *, uint64_t);
  uint64_t v13;
  uint64_t v15;

  v1 = v0;
  v2 = type metadata accessor for WidgetRenderingMode(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = __chkstk_darwin(v2);
  v6 = (char *)&v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v8 = (uint64_t *)((char *)&v15 - v7);
  type metadata accessor for SmallBackgroundView(0);
  v9 = sub_10002A1BC(v8);
  static WidgetRenderingMode.accented.getter(v9);
  v10 = sub_10001C96C(&qword_1000BA8B8, (uint64_t (*)(uint64_t))&type metadata accessor for WidgetRenderingMode, (uint64_t)&protocol conformance descriptor for WidgetRenderingMode);
  v11 = dispatch thunk of static Equatable.== infix(_:_:)(v8, v6, v2, v10);
  v12 = *(void (**)(char *, uint64_t))(v3 + 8);
  v12(v6, v2);
  v13 = ((uint64_t (*)(_QWORD *, uint64_t))v12)(v8, v2);
  if ((v11 & 1) != 0)
    return static Color.black.getter(v13);
  if (*v1)
    return Color.init(_:)(*v1);
  return static Color.clear.getter(v13);
}

void sub_100048454(uint64_t *a1@<X8>, double a2@<D0>, double a3@<D1>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  char *v24;
  void *v25;
  uint64_t v26;
  id v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  void (*v31)(char *, uint64_t);
  uint64_t v32;
  id v33;
  double v34;
  double v35;
  double v36;
  double v37;
  uint64_t v38;
  uint64_t v39;
  char v40;
  double v41;
  id v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  __n128 v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  _OWORD *v59;
  __int128 v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  double v78;
  double v79;
  double v80;
  double v81;
  double v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  unint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  char *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  __int128 v100;
  uint64_t v101;
  uint64_t v102;
  _OWORD v103[3];
  uint64_t v104;
  __int128 v105;
  uint64_t v106;
  uint64_t v107;

  v4 = v3;
  v8 = sub_10001B520(&qword_1000BA990);
  __chkstk_darwin(v8);
  v10 = (char *)&v90 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v94 = type metadata accessor for Image.ResizingMode(0);
  v93 = *(_QWORD *)(v94 - 8);
  __chkstk_darwin(v94);
  v12 = (char *)&v90 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v99 = sub_10001B520(&qword_1000BA998);
  v98 = *(_QWORD *)(v99 - 8);
  __chkstk_darwin(v99);
  v96 = (char *)&v90 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v95 = sub_10001B520(&qword_1000BA9A0);
  __chkstk_darwin(v95);
  *(_QWORD *)&v100 = (char *)&v90 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v97 = sub_10001B520(&qword_1000BA9A8);
  __chkstk_darwin(v97);
  v102 = (uint64_t)&v90 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = sub_10001B520(&qword_1000BB000);
  __chkstk_darwin(v16);
  v101 = (uint64_t)&v90 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = type metadata accessor for RedactionReasons(0);
  v19 = *(_QWORD *)(v18 - 8);
  v20 = __chkstk_darwin(v18);
  v22 = (char *)&v90 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v20);
  v24 = (char *)&v90 - v23;
  v25 = *(void **)(v4 + 8);
  if (v25)
  {
    v91 = v16;
    v92 = a1;
    v26 = type metadata accessor for SmallBackgroundView(0);
    v27 = v25;
    v28 = sub_10002A3C4(v24);
    static RedactionReasons.placeholder.getter(v28);
    v29 = sub_10001C96C(&qword_1000B9B00, (uint64_t (*)(uint64_t))&type metadata accessor for RedactionReasons, (uint64_t)&protocol conformance descriptor for RedactionReasons);
    v30 = dispatch thunk of SetAlgebra.isSuperset(of:)(v22, v18, v29);
    v31 = *(void (**)(char *, uint64_t))(v19 + 8);
    v31(v22, v18);
    v31(v24, v18);
    if ((v30 & 1) == 0)
    {
      if ((*(_BYTE *)(v4 + 56) & 1) != 0)
      {
        v33 = v27;
      }
      else
      {
        v35 = *(double *)(v4 + 40);
        v34 = *(double *)(v4 + 48);
        v37 = *(double *)(v4 + 24);
        v36 = *(double *)(v4 + 32);
        v38 = v4 + *(int *)(v26 + 36);
        v39 = *(_QWORD *)v38;
        v40 = *(_BYTE *)(v38 + 8);
        sub_100024758(*(_QWORD *)v38, v40);
        v41 = sub_10002A628(v39, v40);
        sub_10002C790(v39, v40);
        v33 = (id)UIImage.croppedImage(of:with:scale:byRoundingCorners:cornerRadius:)(0, a2, a3, v37, v36, v35, v34, v41, 4.0);
      }
      v42 = v33;
      v43 = Image.init(uiImage:)(v42);
      v44 = v93;
      v45 = v94;
      (*(void (**)(char *, _QWORD, uint64_t))(v93 + 104))(v12, enum case for Image.ResizingMode.stretch(_:), v94);
      v46 = Image.resizable(capInsets:resizingMode:)(v12, v43, 0.0, 0.0, 0.0, 0.0);
      v47 = swift_release(v43);
      v48 = (*(uint64_t (**)(char *, uint64_t, __n128))(v44 + 8))(v12, v45, v47);
      static WidgetAccentedRenderingMode.desaturated.getter(v48);
      v49 = type metadata accessor for WidgetAccentedRenderingMode(0);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v49 - 8) + 56))(v10, 0, 1, v49);
      v50 = v96;
      Image.widgetAccentedRenderingMode(_:)(v10, v46);
      swift_release(v46);
      sub_10002CCF4((uint64_t)v10, &qword_1000BA990);
      v51 = v98;
      v52 = v100;
      v53 = v99;
      (*(void (**)(_QWORD, char *, uint64_t))(v98 + 16))(v100, v50, v99);
      v54 = v52 + *(int *)(v95 + 36);
      *(_QWORD *)v54 = 0;
      *(_WORD *)(v54 + 8) = 257;
      v55 = (*(uint64_t (**)(char *, uint64_t))(v51 + 8))(v50, v53);
      v56 = static Alignment.center.getter(v55);
      _FrameLayout.init(width:height:alignment:)(v103, 0, 1, *(_QWORD *)&a3, 0, v56, v57);
      v58 = v102;
      sub_10002CCB0(v52, v102, &qword_1000BA9A0);
      v59 = (_OWORD *)(v58 + *(int *)(v97 + 36));
      v60 = v103[1];
      *v59 = v103[0];
      v59[1] = v60;
      v59[2] = v103[2];
      v61 = sub_10002CCF4(v52, &qword_1000BA9A0);
      v62 = static Color.black.getter(v61);
      v63 = Gradient.Stop.init(color:location:)(v62, 0.0);
      v65 = v64;
      v66 = static Color.black.getter(v63);
      v67 = Gradient.Stop.init(color:location:)(v66, 0.7);
      v69 = v68;
      v70 = static Color.black.getter(v67);
      v71 = Color.opacity(_:)(0.0);
      swift_release(v70);
      v72 = Gradient.Stop.init(color:location:)(v71, 1.0);
      v74 = v73;
      v75 = sub_10001B520(&qword_1000BB008);
      v76 = swift_allocObject(v75, 80, 7);
      *(_OWORD *)(v76 + 16) = xmmword_10008AC70;
      *(_QWORD *)(v76 + 32) = v63;
      *(_QWORD *)(v76 + 40) = v65;
      *(_QWORD *)(v76 + 48) = v67;
      *(_QWORD *)(v76 + 56) = v69;
      *(_QWORD *)(v76 + 64) = v72;
      *(_QWORD *)(v76 + 72) = v74;
      swift_retain(v63);
      swift_retain(v67);
      swift_retain(v72);
      v77 = Gradient.init(stops:)(v76);
      v78 = static UnitPoint.top.getter();
      v80 = v79;
      v81 = static UnitPoint.bottom.getter();
      LinearGradient.init(gradient:startPoint:endPoint:)(&v104, v77, v78, v80, v81, v82);
      v83 = v104;
      v100 = v105;
      v84 = v106;
      v85 = v107;
      swift_release(v72);
      swift_release(v67);
      swift_release(v63);
      v86 = v101;
      sub_10002CCB0(v58, v101, &qword_1000BA9A8);
      v87 = v91;
      v88 = v86 + *(int *)(v91 + 36);
      *(_QWORD *)v88 = v83;
      *(_OWORD *)(v88 + 8) = v100;
      *(_QWORD *)(v88 + 24) = v84;
      *(_QWORD *)(v88 + 32) = v85;
      sub_10002CCF4(v58, &qword_1000BA9A8);
      v89 = sub_100048EE0();
      v32 = AnyView.init<A>(_:)(v86, v87, v89);

      a1 = v92;
      goto LABEL_11;
    }

    a1 = v92;
  }
  if (qword_1000B8D20 != -1)
    swift_once(&qword_1000B8D20, sub_100067DC0);
  *(_QWORD *)&v103[0] = Color.init(_:)((id)qword_1000C07C8);
  v32 = AnyView.init<A>(_:)(v103, &type metadata for Color, &protocol witness table for Color);
LABEL_11:
  *a1 = v32;
}

void sub_100048B58(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  double v3;
  uint64_t v4;
  double v5;
  uint64_t v6;

  v3 = GeometryProxy.size.getter(a1);
  GeometryProxy.size.getter(v4);
  sub_100048454(&v6, v3, v5 * 0.7);
  *a2 = v6;
}

double sub_100048BC8@<D0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  *a2 = static Alignment.top.getter(a1);
  a2[1] = v4;
  v5 = sub_10001B520(&qword_1000BAFC8);
  return sub_100047E74(v2, (_QWORD *)((char *)a2 + *(int *)(v5 + 44)));
}

uint64_t type metadata accessor for Scrim(uint64_t a1)
{
  return sub_10002ABF8(a1, qword_1000BB080, (uint64_t)&nominal type descriptor for Scrim);
}

void sub_100048C1C(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  void *v4;
  id v5;
  double v6;
  double v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v3 = type metadata accessor for Scrim(0);
  v4 = *(void **)(v1 + *(int *)(v3 + 20));
  if (v4)
  {
    v5 = v4;
    objc_msgSend(v5, "ts_luminance");
    v7 = v6;
    sub_1000340C4();
    if (static UIColor.darkLightLuminanceThreshold.getter() >= v7)
    {
      v10 = static Color.clear.getter(v8);
    }
    else
    {
      v9 = static Color.black.getter(v8);
      v10 = Color.opacity(_:)(0.2);
      swift_release(v9);
    }

  }
  else
  {
    v10 = static Color.clear.getter(v3);
  }
  *a1 = v10;
}

uint64_t sub_100048CD4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for SmallBackgroundView(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_100048D24(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for Scrim(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_100048D64()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;

  v1 = (int *)type metadata accessor for SmallBackgroundView(0);
  v2 = *((_QWORD *)v1 - 1);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  v6 = v0 + v4;

  v7 = (_QWORD *)(v0 + v4 + v1[8]);
  v8 = sub_10001B520(&qword_1000B9B20);
  if (swift_getEnumCaseMultiPayload(v7, v8) == 1)
  {
    v9 = type metadata accessor for RedactionReasons(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v9 - 8) + 8))(v7, v9);
  }
  else
  {
    swift_release(*v7);
  }
  sub_10002C790(*(_QWORD *)(v6 + v1[9]), *(_BYTE *)(v6 + v1[9] + 8));
  v10 = (_QWORD *)(v6 + v1[10]);
  v11 = sub_10001B520(&qword_1000B9A20);
  if (swift_getEnumCaseMultiPayload(v10, v11) == 1)
  {
    v12 = type metadata accessor for WidgetRenderingMode(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v12 - 8) + 8))(v10, v12);
  }
  else
  {
    swift_release(*v10);
  }
  return swift_deallocObject(v0, v4 + v5, v3 | 7);
}

void sub_100048E90(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  type metadata accessor for SmallBackgroundView(0);
  sub_100048B58(a1, a2);
}

unint64_t sub_100048EE0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000BB010;
  if (!qword_1000BB010)
  {
    v1 = sub_10001B560(&qword_1000BB000);
    sub_10003D2A4();
    sub_10002CE94(&qword_1000BB018, &qword_1000BB020, (uint64_t)&protocol conformance descriptor for _MaskEffect<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000BB010);
  }
  return result;
}

uint64_t *sub_100048F64(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  id v16;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v12 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v12 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v12);
  }
  else
  {
    v7 = sub_10001B520(&qword_1000B9A20);
    if (swift_getEnumCaseMultiPayload(a2, v7) == 1)
    {
      v8 = type metadata accessor for WidgetRenderingMode(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(a1, a2, v8);
      v9 = a1;
      v10 = v7;
      v11 = 1;
    }
    else
    {
      v13 = *a2;
      *a1 = *a2;
      swift_retain(v13);
      v9 = a1;
      v10 = v7;
      v11 = 0;
    }
    swift_storeEnumTagMultiPayload(v9, v10, v11);
    v14 = *(int *)(a3 + 20);
    v15 = *(void **)((char *)a2 + v14);
    *(uint64_t *)((char *)a1 + v14) = (uint64_t)v15;
    v16 = v15;
  }
  return a1;
}

void sub_100049040(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = sub_10001B520(&qword_1000B9A20);
  if (swift_getEnumCaseMultiPayload(a1, v4) == 1)
  {
    v5 = type metadata accessor for WidgetRenderingMode(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(a1, v5);
  }
  else
  {
    swift_release(*a1);
  }

}

uint64_t *sub_1000490B0(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  id v14;

  v6 = sub_10001B520(&qword_1000B9A20);
  if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
  {
    v7 = type metadata accessor for WidgetRenderingMode(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = a1;
    v9 = v6;
    v10 = 1;
  }
  else
  {
    v11 = *a2;
    *a1 = *a2;
    swift_retain(v11);
    v8 = a1;
    v9 = v6;
    v10 = 0;
  }
  swift_storeEnumTagMultiPayload(v8, v9, v10);
  v12 = *(int *)(a3 + 20);
  v13 = *(void **)((char *)a2 + v12);
  *(uint64_t *)((char *)a1 + v12) = (uint64_t)v13;
  v14 = v13;
  return a1;
}

uint64_t *sub_100049160(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  void *v14;
  id v15;

  if (a1 != a2)
  {
    sub_10002CCF4((uint64_t)a1, &qword_1000B9A20);
    v6 = sub_10001B520(&qword_1000B9A20);
    if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
    {
      v7 = type metadata accessor for WidgetRenderingMode(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
      v8 = a1;
      v9 = v6;
      v10 = 1;
    }
    else
    {
      v11 = *a2;
      *a1 = *a2;
      swift_retain(v11);
      v8 = a1;
      v9 = v6;
      v10 = 0;
    }
    swift_storeEnumTagMultiPayload(v8, v9, v10);
  }
  v12 = *(int *)(a3 + 20);
  v13 = *(void **)((char *)a1 + v12);
  v14 = *(void **)((char *)a2 + v12);
  *(uint64_t *)((char *)a1 + v12) = (uint64_t)v14;
  v15 = v14;

  return a1;
}

char *sub_100049230(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;

  v6 = sub_10001B520(&qword_1000B9A20);
  if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
  {
    v7 = type metadata accessor for WidgetRenderingMode(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a1, a2, v7);
    swift_storeEnumTagMultiPayload(a1, v6, 1);
  }
  else
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
  }
  *(_QWORD *)&a1[*(int *)(a3 + 20)] = *(_QWORD *)&a2[*(int *)(a3 + 20)];
  return a1;
}

char *sub_1000492D8(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;

  if (a1 != a2)
  {
    sub_10002CCF4((uint64_t)a1, &qword_1000B9A20);
    v6 = sub_10001B520(&qword_1000B9A20);
    if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
    {
      v7 = type metadata accessor for WidgetRenderingMode(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a1, a2, v7);
      swift_storeEnumTagMultiPayload(a1, v6, 1);
    }
    else
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
    }
  }
  v8 = *(int *)(a3 + 20);
  v9 = *(void **)&a1[v8];
  *(_QWORD *)&a1[v8] = *(_QWORD *)&a2[v8];

  return a1;
}

uint64_t sub_1000493A0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000493AC);
}

uint64_t sub_1000493AC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;
  int v10;

  v6 = sub_10001B520(&qword_1000B9A28);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 20));
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  v10 = v9 - 1;
  if (v10 < 0)
    v10 = -1;
  return (v10 + 1);
}

uint64_t sub_100049438(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100049444);
}

uint64_t sub_100049444(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = sub_10001B520(&qword_1000B9A28);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 20)) = a2;
  return result;
}

void sub_1000494C0(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[2];

  sub_100038C4C(319, (unint64_t *)&qword_1000B9A98, (uint64_t (*)(uint64_t))&type metadata accessor for WidgetRenderingMode);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(v2 - 8) + 64;
    v4[1] = "\b";
    swift_initStructMetadata(a1, 256, 2, v4, a1 + 16);
  }
}

uint64_t sub_100049540()
{
  return sub_10002CE94(&qword_1000BB0B8, (uint64_t *)&unk_1000BB0C0, (uint64_t)&protocol conformance descriptor for ZStack<A>);
}

uint64_t sub_10004956C(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_10009CBC0, 1);
}

void *sub_10004957C()
{
  return &protocol witness table for Color;
}

uint64_t sub_100049588()
{
  uint64_t v0;
  id v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  id v6;
  char v7;

  v1 = objc_msgSend(*(id *)(v0 + 24), "userID");
  if (v1)
  {
    v2 = v1;
    v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(v1);
    v5 = v4;

  }
  else
  {
    v3 = 0;
    v5 = 0;
  }
  v6 = objc_msgSend(*(id *)(v0 + 16), "possiblyUnfetchedAppConfiguration");
  if ((objc_msgSend(v6, "respondsToSelector:", "widgetTelemetrySamplingRate") & 1) != 0)
    objc_msgSend(v6, "widgetTelemetrySamplingRate");
  swift_unknownObjectRelease(v6);
  v7 = sub_100049760(v3, v5);
  swift_bridgeObjectRelease(v5);
  return v7 & 1;
}

uint64_t sub_100049668()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  swift_unknownObjectRelease(*(_QWORD *)(v0 + 24));
  return swift_deallocClassInstance(v0, 32, 7);
}

uint64_t type metadata accessor for TelemetryEnablement()
{
  return objc_opt_self(_TtC7NewsTag19TelemetryEnablement);
}

uint64_t sub_1000496B4(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;

  result = __DataStorage._bytes.getter();
  v5 = result;
  if (result)
  {
    result = __DataStorage._offset.getter();
    if (__OFSUB__(a1, result))
    {
LABEL_13:
      __break(1u);
      return result;
    }
    v5 += a1 - result;
  }
  v6 = __OFSUB__(a2, a1);
  v7 = a2 - a1;
  if (v6)
  {
    __break(1u);
    goto LABEL_13;
  }
  v8 = __DataStorage._length.getter();
  if (v8 >= v7)
    v9 = v7;
  else
    v9 = v8;
  v10 = v5 + v9;
  if (v5)
    v11 = v10;
  else
    v11 = 0;
  v12 = type metadata accessor for SHA256(0);
  v13 = sub_100049DAC();
  return dispatch thunk of HashFunction.update(bufferPointer:)(v5, v11, v12, v13);
}

uint64_t sub_100049760(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  unint64_t v11;
  unint64_t v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v17;
  _QWORD v18[5];
  int v19;

  v4 = type metadata accessor for SHA256(0);
  __chkstk_darwin(v4);
  v5 = type metadata accessor for SHA256Digest(0);
  v18[4] = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v6 = type metadata accessor for String.Encoding(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = __chkstk_darwin(v6);
  v10 = (char *)v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a2)
  {
    v18[3] = v5;
    static String.Encoding.utf8.getter(v8);
    String.data(using:allowLossyConversion:)(v10, 0, a1, a2);
    v12 = v11;
    (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
    if (v12 >> 60 != 15)
    {
      v19 = 0;
      v17 = sub_100049DAC();
      dispatch thunk of HashFunction.init()(v4, v17);
      __asm { BR              X10 }
    }
    v13 = FCAnalyticsLog;
    v14 = static os_log_type_t.default.getter();
    os_log(_:dso:log:type:_:)("TelemetryEnablement failed to convert the user ID to valid data", 63, 2, &_mh_execute_header, v13, v14, _swiftEmptyArrayStorage);
  }
  else
  {
    v13 = FCAnalyticsLog;
    v15 = static os_log_type_t.default.getter();
    os_log(_:dso:log:type:_:)("TelemetryEnablement has no user ID to hash", 42, 2, &_mh_execute_header, v13, v15, _swiftEmptyArrayStorage);
  }

  return 0;
}

unint64_t sub_100049DAC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000BB178;
  if (!qword_1000BB178)
  {
    v1 = type metadata accessor for SHA256(255);
    result = swift_getWitnessTable(&protocol conformance descriptor for SHA256, v1);
    atomic_store(result, (unint64_t *)&qword_1000BB178);
  }
  return result;
}

uint64_t sub_100049DF4(uint64_t result, unint64_t a2)
{
  if (a2 >> 60 != 15)
    return sub_100049E08(result, a2);
  return result;
}

uint64_t sub_100049E08(uint64_t result, unint64_t a2)
{
  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2)
      return result;
    swift_retain(result);
  }
  return swift_retain(a2 & 0x3FFFFFFFFFFFFFFFLL);
}

uint64_t sub_100049E4C(uint64_t result, unint64_t a2)
{
  if (a2 >> 60 != 15)
    return sub_10001D9D8(result, a2);
  return result;
}

id WidgetPersonalizationConfigurationManager.__allocating_init(appConfigurationManager:)(uint64_t a1)
{
  objc_class *v1;
  objc_class *v2;
  id v4;
  objc_class *v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  id v10;
  objc_super v12;

  v2 = v1;
  v4 = objc_allocWithZone(v1);
  v5 = (objc_class *)type metadata accessor for NewsAppConfigurationManager(0);
  objc_allocWithZone(v5);
  v6 = (char *)v4;
  v7 = swift_unknownObjectRetain(a1);
  v8 = NewsAppConfigurationManager.init(appConfigurationManager:transform:)(v7, sub_100049FDC, 0);
  v9 = (uint64_t *)&v6[OBJC_IVAR____TtC7NewsTag41WidgetPersonalizationConfigurationManager_configurationManager];
  v9[3] = (uint64_t)v5;
  v9[4] = (uint64_t)&protocol witness table for NewsAppConfigurationManager;
  *v9 = v8;

  v12.receiver = v6;
  v12.super_class = v2;
  v10 = objc_msgSendSuper2(&v12, "init");
  swift_unknownObjectRelease(a1);
  return v10;
}

id WidgetPersonalizationConfigurationManager.init(appConfigurationManager:)(uint64_t a1)
{
  void *v1;
  objc_class *ObjectType;
  objc_class *v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  id v9;
  objc_super v11;

  ObjectType = (objc_class *)swift_getObjectType(v1);
  v4 = (objc_class *)type metadata accessor for NewsAppConfigurationManager(0);
  objc_allocWithZone(v4);
  v5 = v1;
  v6 = swift_unknownObjectRetain(a1);
  v7 = NewsAppConfigurationManager.init(appConfigurationManager:transform:)(v6, sub_100049FDC, 0);
  v8 = (uint64_t *)&v5[OBJC_IVAR____TtC7NewsTag41WidgetPersonalizationConfigurationManager_configurationManager];
  v8[3] = (uint64_t)v4;
  v8[4] = (uint64_t)&protocol witness table for NewsAppConfigurationManager;
  *v8 = v7;

  v11.receiver = v5;
  v11.super_class = ObjectType;
  v9 = objc_msgSendSuper2(&v11, "init");
  swift_unknownObjectRelease(a1);
  return v9;
}

uint64_t sub_100049FDC@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  id v16;
  id v17;
  id v18;
  unint64_t v19;
  uint64_t v20;
  id v21;
  unint64_t v22;
  id v23;
  Class isa;
  id v25;
  unint64_t v26;
  id v27;
  Class v28;
  char *v29;
  char *v30;
  id v31;
  Class v32;
  id v33;
  id v35;
  unsigned int v36;
  unsigned int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  char *v43;
  uint64_t v44;
  char *v45;
  char *v46;
  id v47;

  v44 = a2;
  v3 = sub_10001B520(&qword_1000BB1B0);
  v40 = *(_QWORD *)(v3 - 8);
  v41 = v3;
  __chkstk_darwin(v3);
  v43 = (char *)&v35 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_10001B520(&qword_1000BB1B8);
  v38 = *(_QWORD *)(v5 - 8);
  v39 = v5;
  __chkstk_darwin(v5);
  v42 = (char *)&v35 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_10001B520(&qword_1000BB1C0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v46 = (char *)&v35 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_10001B520(&qword_1000BB1C8);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = (char *)&v35 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_10001B520(&qword_1000BB1D0);
  __chkstk_darwin(v14);
  v45 = (char *)&v35 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((objc_msgSend(a1, "respondsToSelector:", "articleEmbeddingsScoringEnabled") & 1) != 0)
    v16 = objc_msgSend(a1, "articleEmbeddingsScoringEnabled");
  else
    v16 = 0;
  (*(void (**)(char *, _QWORD, uint64_t))(v11 + 104))(v13, enum case for FeatureState.Feature.articleEmbeddingsScoring<A>(_:), v10);
  if ((objc_msgSend(a1, "respondsToSelector:", "newsPersonalizationConfiguration") & 1) != 0)
  {
    v17 = objc_msgSend(a1, "newsPersonalizationConfiguration");
    v18 = objc_msgSend(v17, "articleEmbeddingsConfiguration");

  }
  else
  {
    v18 = 0;
  }
  v47 = v18;
  v19 = sub_10004A760();
  static FeatureState.recoveringState<A>(isEnabled:feature:configuration:)(v16, v13, &v47, v19, v19);

  (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  if ((objc_msgSend(a1, "respondsToSelector:", "clientSideEngagementBoostEnabled") & 1) != 0)
    v37 = objc_msgSend(a1, "clientSideEngagementBoostEnabled");
  else
    v37 = 0;
  if ((objc_msgSend(a1, "respondsToSelector:", "fallbackToReverseChronSorting") & 1) != 0)
    v36 = objc_msgSend(a1, "fallbackToReverseChronSorting");
  else
    v36 = 0;
  v35 = objc_msgSend(a1, "personalizationTreatment");
  v20 = enum case for FeatureState.disabled<A>(_:);
  (*(void (**)(char *, _QWORD, uint64_t))(v8 + 104))(v46, enum case for FeatureState.disabled<A>(_:), v7);
  if ((objc_msgSend(a1, "respondsToSelector:", "publisherDampeningConfig") & 1) != 0)
  {
    v21 = objc_msgSend(a1, "publisherDampeningConfig");
  }
  else
  {
    v22 = sub_10005FD28((uint64_t)_swiftEmptyArrayStorage);
    v23 = objc_allocWithZone((Class)FCPersonalizationPublisherDampeningConfig);
    isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(v22);
    v21 = objc_msgSend(v23, "initWithConfig:", isa);

  }
  if ((objc_msgSend(a1, "respondsToSelector:", "shadowPublisherDampeningConfig") & 1) != 0)
  {
    v25 = objc_msgSend(a1, "shadowPublisherDampeningConfig");
  }
  else
  {
    v26 = sub_10005FD28((uint64_t)_swiftEmptyArrayStorage);
    v27 = objc_allocWithZone((Class)FCPersonalizationPublisherDampeningConfig);
    v28 = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(v26);
    v25 = objc_msgSend(v27, "initWithConfig:", v28);

  }
  v29 = v42;
  (*(void (**)(char *, uint64_t, uint64_t))(v38 + 104))(v42, v20, v39);
  v30 = v43;
  (*(void (**)(char *, uint64_t, uint64_t))(v40 + 104))(v43, v20, v41);
  v31 = objc_allocWithZone((Class)FCStatelessPersonalizationPublisherFavorability);
  sub_10001B520(&qword_1000BB1E0);
  v32 = Array._bridgeToObjectiveC()().super.isa;
  v33 = objc_msgSend(v31, "initWithArray:", v32);

  return Configuration.init(articleEmbeddingsScoringState:clientSideEngagementBoostEnabled:fallbackToReverseChronSorting:newsTabiPersonalizationState:personalizationTreatment:statelessPersonalizationState:extensionStatelessPersonalizationState:publisherDampeningConfig:shadowPublisherDampeningConfig:statelessPersonalizationPublisherFavorability:personalizationAnalyticsEnabled:tabiTagScoringEnabled:tabiCohortMembershipsEnabled:aggregatesInXavierEnabled:)(v45, v37, v36, v29, v35, v46, v30, v21, v25, v33, 0x1000000);
}

uint64_t WidgetPersonalizationConfigurationManager.configuration.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(v0 + OBJC_IVAR____TtC7NewsTag41WidgetPersonalizationConfigurationManager_configurationManager + 24);
  v2 = *(_QWORD *)(v0 + OBJC_IVAR____TtC7NewsTag41WidgetPersonalizationConfigurationManager_configurationManager + 32);
  sub_10001D9B4((_QWORD *)(v0 + OBJC_IVAR____TtC7NewsTag41WidgetPersonalizationConfigurationManager_configurationManager), v1);
  return dispatch thunk of ConfigurationManagerType.configuration.getter(v1, v2);
}

uint64_t WidgetPersonalizationConfigurationManager.fetchConfigurationIfNeeded(cachedOnly:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(v1 + OBJC_IVAR____TtC7NewsTag41WidgetPersonalizationConfigurationManager_configurationManager + 24);
  v4 = *(_QWORD *)(v1 + OBJC_IVAR____TtC7NewsTag41WidgetPersonalizationConfigurationManager_configurationManager + 32);
  sub_10001D9B4((_QWORD *)(v1 + OBJC_IVAR____TtC7NewsTag41WidgetPersonalizationConfigurationManager_configurationManager), v3);
  return dispatch thunk of ConfigurationManagerType.fetchConfigurationIfNeeded(cachedOnly:)(a1, v3, v4);
}

uint64_t WidgetPersonalizationConfigurationManager.onChangeOfConfiguration(perform:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;

  v5 = *(_QWORD *)(v2 + OBJC_IVAR____TtC7NewsTag41WidgetPersonalizationConfigurationManager_configurationManager + 24);
  v6 = *(_QWORD *)(v2 + OBJC_IVAR____TtC7NewsTag41WidgetPersonalizationConfigurationManager_configurationManager + 32);
  sub_10001D9B4((_QWORD *)(v2 + OBJC_IVAR____TtC7NewsTag41WidgetPersonalizationConfigurationManager_configurationManager), v5);
  return dispatch thunk of ConfigurationManagerType.onChangeOfConfiguration(perform:)(a1, a2, v5, v6);
}

void WidgetPersonalizationConfigurationManager.init()()
{
  _swift_stdlib_reportUnimplementedInitializer("NewsTag.WidgetPersonalizationConfigurationManager", 49, "init()", 6, 0);
  __break(1u);
}

uint64_t sub_10004A630()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;

  v1 = (_QWORD *)(*v0 + OBJC_IVAR____TtC7NewsTag41WidgetPersonalizationConfigurationManager_configurationManager);
  v2 = v1[3];
  v3 = v1[4];
  sub_10001D9B4(v1, v2);
  return dispatch thunk of ConfigurationManagerType.configuration.getter(v2, v3);
}

uint64_t sub_10004A688(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;

  v3 = (_QWORD *)(*v1 + OBJC_IVAR____TtC7NewsTag41WidgetPersonalizationConfigurationManager_configurationManager);
  v4 = v3[3];
  v5 = v3[4];
  sub_10001D9B4(v3, v4);
  return dispatch thunk of ConfigurationManagerType.fetchConfigurationIfNeeded(cachedOnly:)(a1, v4, v5);
}

uint64_t sub_10004A6DC(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;

  v5 = (_QWORD *)(*v2 + OBJC_IVAR____TtC7NewsTag41WidgetPersonalizationConfigurationManager_configurationManager);
  v6 = v5[3];
  v7 = v5[4];
  sub_10001D9B4(v5, v6);
  return dispatch thunk of ConfigurationManagerType.onChangeOfConfiguration(perform:)(a1, a2, v6, v7);
}

uint64_t type metadata accessor for WidgetPersonalizationConfigurationManager()
{
  return objc_opt_self(_TtC7NewsTag41WidgetPersonalizationConfigurationManager);
}

unint64_t sub_10004A760()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000BB1D8;
  if (!qword_1000BB1D8)
  {
    v1 = objc_opt_self(FCNewsArticleEmbeddingsConfiguration);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_1000BB1D8);
  }
  return result;
}

char *sub_10004A79C(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  const void *v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int (*v22)(const void *, uint64_t, uint64_t);
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  void *v27;
  void *v28;
  id v29;
  id v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  int *v37;
  uint64_t v38;
  const void *v39;
  uint64_t v40;
  uint64_t v41;
  unsigned int (*v42)(const void *, uint64_t, uint64_t);
  id v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  _QWORD *v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  _QWORD *v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  int *v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  void (*v63)(char *, uint64_t, uint64_t);
  uint64_t v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  char *__dst;
  char *__dsta;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v13 = *(_QWORD *)a2;
    *a1 = *(_QWORD *)a2;
    v14 = (char *)(v13 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v13);
  }
  else
  {
    v6 = a3;
    v7 = type metadata accessor for Item(0);
    v71 = v6;
    if (swift_getEnumCaseMultiPayload(a2, v7) == 1)
    {
      v8 = *(_QWORD *)a2;
      v9 = *(_QWORD *)(a2 + 8);
      v10 = *(_BYTE *)(a2 + 16);
      sub_100024770(*(_QWORD *)a2, v9, v10);
      *a1 = v8;
      a1[1] = v9;
      *((_BYTE *)a1 + 16) = v10;
      v11 = *(_QWORD *)(a2 + 24);
      a1[3] = v11;
      swift_bridgeObjectRetain(v11);
      v12 = 1;
    }
    else
    {
      v15 = *(_QWORD *)a2;
      v16 = *(_QWORD *)(a2 + 8);
      *a1 = *(_QWORD *)a2;
      a1[1] = v16;
      v17 = type metadata accessor for Item.Headline(0);
      v18 = *(int *)(v17 + 24);
      __dst = (char *)a1 + v18;
      v19 = (const void *)(a2 + v18);
      v20 = type metadata accessor for URL(0);
      v21 = *(_QWORD *)(v20 - 8);
      v22 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v21 + 48);
      swift_unknownObjectRetain(v15);
      swift_retain(v16);
      if (v22(v19, 1, v20))
      {
        v23 = sub_10001B520(&qword_1000B93A0);
        memcpy(__dst, v19, *(_QWORD *)(*(_QWORD *)(v23 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, const void *, uint64_t))(v21 + 16))(__dst, v19, v20);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v21 + 56))(__dst, 0, 1, v20);
      }
      v24 = *(int *)(v17 + 28);
      v25 = (uint64_t *)((char *)a1 + v24);
      v26 = a2 + v24;
      v27 = *(void **)(v26 + 8);
      v6 = v71;
      if (v27)
      {
        v28 = *(void **)v26;
        *v25 = v28;
        v25[1] = v27;
        v29 = v28;
        v30 = v27;
        v12 = 0;
      }
      else
      {
        v12 = 0;
        *(_OWORD *)v25 = *(_OWORD *)v26;
      }
    }
    swift_storeEnumTagMultiPayload(a1, v7, v12);
    v31 = *(int *)(v6 + 20);
    __dsta = (char *)a1;
    v32 = (char *)a1 + v31;
    v70 = a2;
    v33 = a2 + v31;
    v34 = *(void **)(a2 + v31);
    v35 = *(_QWORD *)(v33 + 8);
    *(_QWORD *)v32 = v34;
    *((_QWORD *)v32 + 1) = v35;
    v36 = *(_QWORD *)(v33 + 16);
    *((_QWORD *)v32 + 2) = v36;
    v32[24] = *(_BYTE *)(v33 + 24);
    v37 = (int *)type metadata accessor for TodayContent(0);
    v38 = v37[8];
    v69 = &v32[v38];
    v39 = (const void *)(v33 + v38);
    v40 = type metadata accessor for URL(0);
    v41 = *(_QWORD *)(v40 - 8);
    v42 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v41 + 48);
    v43 = v34;
    swift_bridgeObjectRetain(v35);
    swift_unknownObjectRetain(v36);
    if (v42(v39, 1, v40))
    {
      v44 = sub_10001B520(&qword_1000B93A0);
      memcpy(v69, v39, *(_QWORD *)(*(_QWORD *)(v44 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, const void *, uint64_t))(v41 + 16))(v69, v39, v40);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v41 + 56))(v69, 0, 1, v40);
    }
    v45 = v37[9];
    v46 = *(_QWORD *)(v33 + v45);
    *(_QWORD *)&v32[v45] = v46;
    v47 = v37[10];
    v48 = &v32[v47];
    v49 = (_QWORD *)(v33 + v47);
    v50 = v49[1];
    *(_QWORD *)v48 = *v49;
    *((_QWORD *)v48 + 1) = v50;
    v51 = v37[11];
    v52 = &v32[v51];
    v53 = (_QWORD *)(v33 + v51);
    v54 = v53[1];
    *(_QWORD *)v52 = *v53;
    *((_QWORD *)v52 + 1) = v54;
    v55 = *(int *)(v71 + 24);
    v56 = &__dsta[v55];
    v57 = v70 + v55;
    *(_OWORD *)&__dsta[v55] = *(_OWORD *)(v70 + v55);
    v58 = (int *)type metadata accessor for LayoutContext(0);
    v59 = v58[6];
    v60 = &v56[v59];
    v61 = v57 + v59;
    v62 = type metadata accessor for InternalWidgetFamily(0);
    v63 = *(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v62 - 8) + 16);
    swift_retain(v46);
    swift_bridgeObjectRetain(v50);
    swift_bridgeObjectRetain(v54);
    v63(v60, v61, v62);
    v14 = __dsta;
    *(_OWORD *)&v56[v58[7]] = *(_OWORD *)(v57 + v58[7]);
    v64 = v58[8];
    v65 = &v56[v64];
    v66 = v57 + v64;
    v67 = type metadata accessor for ContentSizeCategory(0);
    (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v67 - 8) + 16))(v65, v66, v67);
    *(_QWORD *)&v56[v58[9]] = *(_QWORD *)(v57 + v58[9]);
    *(_QWORD *)&v56[v58[10]] = *(_QWORD *)(v57 + v58[10]);
    v56[v58[11]] = *(_BYTE *)(v57 + v58[11]);
    v56[v58[12]] = *(_BYTE *)(v57 + v58[12]);
  }
  return v14;
}

uint64_t sub_10004AB50(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  id *v9;
  char *v10;
  int *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;

  v4 = type metadata accessor for Item(0);
  if (swift_getEnumCaseMultiPayload(a1, v4) == 1)
  {
    sub_1000249D8(*a1, a1[1], *((_BYTE *)a1 + 16));
    swift_bridgeObjectRelease(a1[3]);
  }
  else
  {
    swift_unknownObjectRelease(*a1);
    swift_release(a1[1]);
    v5 = type metadata accessor for Item.Headline(0);
    v6 = (char *)a1 + *(int *)(v5 + 24);
    v7 = type metadata accessor for URL(0);
    v8 = *(_QWORD *)(v7 - 8);
    if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7))
      (*(void (**)(char *, uint64_t))(v8 + 8))(v6, v7);
    v9 = (id *)((char *)a1 + *(int *)(v5 + 28));
    if (v9[1])
    {

    }
  }
  v10 = (char *)a1 + *(int *)(a2 + 20);

  swift_bridgeObjectRelease(*((_QWORD *)v10 + 1));
  swift_unknownObjectRelease(*((_QWORD *)v10 + 2));
  v11 = (int *)type metadata accessor for TodayContent(0);
  v12 = &v10[v11[8]];
  v13 = type metadata accessor for URL(0);
  v14 = *(_QWORD *)(v13 - 8);
  if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13))
    (*(void (**)(char *, uint64_t))(v14 + 8))(v12, v13);
  swift_release(*(_QWORD *)&v10[v11[9]]);
  swift_bridgeObjectRelease(*(_QWORD *)&v10[v11[10] + 8]);
  swift_bridgeObjectRelease(*(_QWORD *)&v10[v11[11] + 8]);
  v15 = (char *)a1 + *(int *)(a2 + 24);
  v16 = type metadata accessor for LayoutContext(0);
  v17 = &v15[*(int *)(v16 + 24)];
  v18 = type metadata accessor for InternalWidgetFamily(0);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v18 - 8) + 8))(v17, v18);
  v19 = &v15[*(int *)(v16 + 32)];
  v20 = type metadata accessor for ContentSizeCategory(0);
  return (*(uint64_t (**)(char *, uint64_t))(*(_QWORD *)(v20 - 8) + 8))(v19, v20);
}

uint64_t sub_10004AD28(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  const void *v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int (*v20)(const void *, uint64_t, uint64_t);
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  void *v25;
  void *v26;
  id v27;
  id v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  int *v35;
  uint64_t v36;
  const void *v37;
  uint64_t v38;
  uint64_t v39;
  unsigned int (*v40)(const void *, uint64_t, uint64_t);
  id v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  _QWORD *v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  _QWORD *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  int *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  void (*v61)(uint64_t, uint64_t, uint64_t);
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  void *__dst;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;

  v6 = type metadata accessor for Item(0);
  v68 = a3;
  v69 = a2;
  if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
  {
    v7 = *(_QWORD *)a2;
    v8 = *(_QWORD *)(a2 + 8);
    v9 = *(_BYTE *)(a2 + 16);
    sub_100024770(*(_QWORD *)a2, v8, v9);
    *(_QWORD *)a1 = v7;
    *(_QWORD *)(a1 + 8) = v8;
    *(_BYTE *)(a1 + 16) = v9;
    v10 = *(_QWORD *)(a2 + 24);
    *(_QWORD *)(a1 + 24) = v10;
    swift_bridgeObjectRetain(v10);
    v11 = 1;
  }
  else
  {
    v12 = *(_QWORD *)a2;
    v13 = *(_QWORD *)(a2 + 8);
    *(_QWORD *)a1 = *(_QWORD *)a2;
    *(_QWORD *)(a1 + 8) = v13;
    v14 = type metadata accessor for Item.Headline(0);
    v15 = *(int *)(v14 + 24);
    v16 = (void *)(a1 + v15);
    v17 = (const void *)(a2 + v15);
    v18 = type metadata accessor for URL(0);
    v19 = *(_QWORD *)(v18 - 8);
    v20 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v19 + 48);
    swift_unknownObjectRetain(v12);
    swift_retain(v13);
    if (v20(v17, 1, v18))
    {
      v21 = sub_10001B520(&qword_1000B93A0);
      memcpy(v16, v17, *(_QWORD *)(*(_QWORD *)(v21 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v19 + 16))(v16, v17, v18);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v19 + 56))(v16, 0, 1, v18);
    }
    v22 = *(int *)(v14 + 28);
    v23 = (_QWORD *)(a1 + v22);
    a3 = v68;
    a2 = v69;
    v24 = v69 + v22;
    v25 = *(void **)(v24 + 8);
    if (v25)
    {
      v26 = *(void **)v24;
      *v23 = v26;
      v23[1] = v25;
      v27 = v26;
      v28 = v25;
      v11 = 0;
    }
    else
    {
      v11 = 0;
      *(_OWORD *)v23 = *(_OWORD *)v24;
    }
  }
  swift_storeEnumTagMultiPayload(a1, v6, v11);
  v29 = *(int *)(a3 + 20);
  v70 = a1;
  v30 = a1 + v29;
  v31 = a2 + v29;
  v32 = *(void **)v31;
  v33 = *(_QWORD *)(v31 + 8);
  *(_QWORD *)v30 = *(_QWORD *)v31;
  *(_QWORD *)(v30 + 8) = v33;
  v34 = *(_QWORD *)(v31 + 16);
  *(_QWORD *)(v30 + 16) = v34;
  *(_BYTE *)(v30 + 24) = *(_BYTE *)(v31 + 24);
  v35 = (int *)type metadata accessor for TodayContent(0);
  v36 = v35[8];
  __dst = (void *)(v30 + v36);
  v37 = (const void *)(v31 + v36);
  v38 = type metadata accessor for URL(0);
  v39 = *(_QWORD *)(v38 - 8);
  v40 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v39 + 48);
  v41 = v32;
  swift_bridgeObjectRetain(v33);
  swift_unknownObjectRetain(v34);
  if (v40(v37, 1, v38))
  {
    v42 = sub_10001B520(&qword_1000B93A0);
    memcpy(__dst, v37, *(_QWORD *)(*(_QWORD *)(v42 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v39 + 16))(__dst, v37, v38);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v39 + 56))(__dst, 0, 1, v38);
  }
  v43 = v35[9];
  v44 = *(_QWORD *)(v31 + v43);
  *(_QWORD *)(v30 + v43) = v44;
  v45 = v35[10];
  v46 = (_QWORD *)(v30 + v45);
  v47 = (_QWORD *)(v31 + v45);
  v48 = v47[1];
  *v46 = *v47;
  v46[1] = v48;
  v49 = v35[11];
  v50 = (_QWORD *)(v30 + v49);
  v51 = (_QWORD *)(v31 + v49);
  v52 = v51[1];
  *v50 = *v51;
  v50[1] = v52;
  v53 = *(int *)(v68 + 24);
  v54 = v70 + v53;
  v55 = v69 + v53;
  *(_OWORD *)(v70 + v53) = *(_OWORD *)(v69 + v53);
  v56 = (int *)type metadata accessor for LayoutContext(0);
  v57 = v56[6];
  v58 = v54 + v57;
  v59 = v55 + v57;
  v60 = type metadata accessor for InternalWidgetFamily(0);
  v61 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v60 - 8) + 16);
  swift_retain(v44);
  swift_bridgeObjectRetain(v48);
  swift_bridgeObjectRetain(v52);
  v61(v58, v59, v60);
  *(_OWORD *)(v54 + v56[7]) = *(_OWORD *)(v55 + v56[7]);
  v62 = v56[8];
  v63 = v54 + v62;
  v64 = v55 + v62;
  v65 = type metadata accessor for ContentSizeCategory(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v65 - 8) + 16))(v63, v64, v65);
  *(_QWORD *)(v54 + v56[9]) = *(_QWORD *)(v55 + v56[9]);
  *(_QWORD *)(v54 + v56[10]) = *(_QWORD *)(v55 + v56[10]);
  *(_BYTE *)(v54 + v56[11]) = *(_BYTE *)(v55 + v56[11]);
  *(_BYTE *)(v54 + v56[12]) = *(_BYTE *)(v55 + v56[12]);
  return v70;
}

uint64_t sub_10004B0A0(uint64_t a1, char *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int (*v19)(char *, uint64_t, uint64_t);
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  char *v23;
  void *v24;
  void *v25;
  id v26;
  id v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  void *v31;
  void *v32;
  id v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int *v38;
  uint64_t v39;
  void *v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t (*v44)(void *, uint64_t, uint64_t);
  int v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  _QWORD *v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  _QWORD *v62;
  char *v63;
  int *v64;
  uint64_t v65;
  char *v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  _QWORD *v70;
  char *v71;
  uint64_t v72;
  char *v73;
  char *v74;
  uint64_t v75;
  void *__dst;
  char *__dsta;

  v3 = a3;
  if ((char *)a1 != a2)
  {
    sub_100027D34(a1, type metadata accessor for Item);
    v6 = type metadata accessor for Item(0);
    if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
    {
      v7 = *(_QWORD *)a2;
      v8 = *((_QWORD *)a2 + 1);
      v9 = a2[16];
      sub_100024770(*(_QWORD *)a2, v8, v9);
      *(_QWORD *)a1 = v7;
      *(_QWORD *)(a1 + 8) = v8;
      *(_BYTE *)(a1 + 16) = v9;
      v10 = *((_QWORD *)a2 + 3);
      *(_QWORD *)(a1 + 24) = v10;
      swift_bridgeObjectRetain(v10);
      v11 = 1;
    }
    else
    {
      v12 = *(_QWORD *)a2;
      *(_QWORD *)a1 = *(_QWORD *)a2;
      v13 = *((_QWORD *)a2 + 1);
      *(_QWORD *)(a1 + 8) = v13;
      v14 = type metadata accessor for Item.Headline(0);
      v15 = *(int *)(v14 + 24);
      __dst = (void *)(a1 + v15);
      v16 = &a2[v15];
      v17 = type metadata accessor for URL(0);
      v18 = *(_QWORD *)(v17 - 8);
      v19 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48);
      swift_unknownObjectRetain(v12);
      swift_retain(v13);
      if (v19(v16, 1, v17))
      {
        v20 = sub_10001B520(&qword_1000B93A0);
        memcpy(__dst, v16, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, char *, uint64_t))(v18 + 16))(__dst, v16, v17);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v18 + 56))(__dst, 0, 1, v17);
      }
      v21 = *(int *)(v14 + 28);
      v22 = (_QWORD *)(a1 + v21);
      v23 = &a2[v21];
      if (*((_QWORD *)v23 + 1))
      {
        v24 = *(void **)v23;
        *v22 = *(_QWORD *)v23;
        v25 = (void *)*((_QWORD *)v23 + 1);
        v22[1] = v25;
        v26 = v24;
        v27 = v25;
        v11 = 0;
      }
      else
      {
        v11 = 0;
        *(_OWORD *)v22 = *(_OWORD *)v23;
      }
      v3 = a3;
    }
    swift_storeEnumTagMultiPayload(a1, v6, v11);
  }
  v28 = *(int *)(v3 + 20);
  v29 = a1 + v28;
  __dsta = a2;
  v30 = &a2[v28];
  v31 = *(void **)&a2[v28];
  v32 = *(void **)v29;
  *(_QWORD *)v29 = v31;
  v33 = v31;

  v34 = *((_QWORD *)v30 + 1);
  v35 = *(_QWORD *)(v29 + 8);
  *(_QWORD *)(v29 + 8) = v34;
  swift_bridgeObjectRetain(v34);
  swift_bridgeObjectRelease(v35);
  v36 = *((_QWORD *)v30 + 2);
  v37 = *(_QWORD *)(v29 + 16);
  *(_QWORD *)(v29 + 16) = v36;
  swift_unknownObjectRetain(v36);
  swift_unknownObjectRelease(v37);
  *(_BYTE *)(v29 + 24) = v30[24];
  v38 = (int *)type metadata accessor for TodayContent(0);
  v39 = v38[8];
  v40 = (void *)(v29 + v39);
  v41 = &v30[v39];
  v42 = type metadata accessor for URL(0);
  v43 = *(_QWORD *)(v42 - 8);
  v44 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v43 + 48);
  v45 = v44(v40, 1, v42);
  v46 = v44(v41, 1, v42);
  if (!v45)
  {
    if (!v46)
    {
      (*(void (**)(void *, char *, uint64_t))(v43 + 24))(v40, v41, v42);
      goto LABEL_18;
    }
    (*(void (**)(void *, uint64_t))(v43 + 8))(v40, v42);
    goto LABEL_17;
  }
  if (v46)
  {
LABEL_17:
    v47 = sub_10001B520(&qword_1000B93A0);
    memcpy(v40, v41, *(_QWORD *)(*(_QWORD *)(v47 - 8) + 64));
    goto LABEL_18;
  }
  (*(void (**)(void *, char *, uint64_t))(v43 + 16))(v40, v41, v42);
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v43 + 56))(v40, 0, 1, v42);
LABEL_18:
  v48 = v38[9];
  v49 = *(_QWORD *)&v30[v48];
  v50 = *(_QWORD *)(v29 + v48);
  *(_QWORD *)(v29 + v48) = v49;
  swift_retain(v49);
  swift_release(v50);
  v51 = v38[10];
  v52 = (_QWORD *)(v29 + v51);
  v53 = &v30[v51];
  *v52 = *(_QWORD *)v53;
  v54 = *((_QWORD *)v53 + 1);
  v55 = v52[1];
  v52[1] = v54;
  swift_bridgeObjectRetain(v54);
  swift_bridgeObjectRelease(v55);
  v56 = v38[11];
  v57 = (_QWORD *)(v29 + v56);
  v58 = &v30[v56];
  *v57 = *(_QWORD *)v58;
  v59 = *((_QWORD *)v58 + 1);
  v60 = v57[1];
  v57[1] = v59;
  swift_bridgeObjectRetain(v59);
  swift_bridgeObjectRelease(v60);
  v61 = *(int *)(a3 + 24);
  v62 = (_QWORD *)(a1 + v61);
  v63 = &__dsta[v61];
  *v62 = *(_QWORD *)&__dsta[v61];
  v62[1] = *(_QWORD *)&__dsta[v61 + 8];
  v64 = (int *)type metadata accessor for LayoutContext(0);
  v65 = v64[6];
  v66 = (char *)v62 + v65;
  v67 = &v63[v65];
  v68 = type metadata accessor for InternalWidgetFamily(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v68 - 8) + 24))(v66, v67, v68);
  v69 = v64[7];
  v70 = (_QWORD *)((char *)v62 + v69);
  v71 = &v63[v69];
  *v70 = *(_QWORD *)v71;
  v70[1] = *((_QWORD *)v71 + 1);
  v72 = v64[8];
  v73 = (char *)v62 + v72;
  v74 = &v63[v72];
  v75 = type metadata accessor for ContentSizeCategory(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v75 - 8) + 24))(v73, v74, v75);
  *(_QWORD *)((char *)v62 + v64[9]) = *(_QWORD *)&v63[v64[9]];
  *(_QWORD *)((char *)v62 + v64[10]) = *(_QWORD *)&v63[v64[10]];
  *((_BYTE *)v62 + v64[11]) = v63[v64[11]];
  *((_BYTE *)v62 + v64[12]) = v63[v64[12]];
  return a1;
}

_OWORD *sub_10004B4DC(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  int *v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  int *v27;
  uint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;

  v6 = type metadata accessor for Item(0);
  if (swift_getEnumCaseMultiPayload(a2, v6))
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
  }
  else
  {
    *a1 = *a2;
    v7 = type metadata accessor for Item.Headline(0);
    v8 = *(int *)(v7 + 24);
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = type metadata accessor for URL(0);
    v12 = *(_QWORD *)(v11 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11))
    {
      v13 = sub_10001B520(&qword_1000B93A0);
      memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v9, v10, v11);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
    }
    *(_OWORD *)((char *)a1 + *(int *)(v7 + 28)) = *(_OWORD *)((char *)a2 + *(int *)(v7 + 28));
    swift_storeEnumTagMultiPayload(a1, v6, 0);
  }
  v14 = *(int *)(a3 + 20);
  v15 = (char *)a1 + v14;
  v16 = (char *)a2 + v14;
  *(_OWORD *)v15 = *(_OWORD *)((char *)a2 + v14);
  *((_QWORD *)v15 + 2) = *(_QWORD *)((char *)a2 + v14 + 16);
  v15[24] = *((_BYTE *)a2 + v14 + 24);
  v17 = (int *)type metadata accessor for TodayContent(0);
  v18 = v17[8];
  v19 = &v15[v18];
  v20 = &v16[v18];
  v21 = type metadata accessor for URL(0);
  v22 = *(_QWORD *)(v21 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v22 + 48))(v20, 1, v21))
  {
    v23 = sub_10001B520(&qword_1000B93A0);
    memcpy(v19, v20, *(_QWORD *)(*(_QWORD *)(v23 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v22 + 32))(v19, v20, v21);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v22 + 56))(v19, 0, 1, v21);
  }
  *(_QWORD *)&v15[v17[9]] = *(_QWORD *)&v16[v17[9]];
  *(_OWORD *)&v15[v17[10]] = *(_OWORD *)&v16[v17[10]];
  *(_OWORD *)&v15[v17[11]] = *(_OWORD *)&v16[v17[11]];
  v24 = *(int *)(a3 + 24);
  v25 = (char *)a1 + v24;
  v26 = (char *)a2 + v24;
  *(_OWORD *)((char *)a1 + v24) = *(_OWORD *)((char *)a2 + v24);
  v27 = (int *)type metadata accessor for LayoutContext(0);
  v28 = v27[6];
  v29 = &v25[v28];
  v30 = &v26[v28];
  v31 = type metadata accessor for InternalWidgetFamily(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v31 - 8) + 32))(v29, v30, v31);
  *(_OWORD *)&v25[v27[7]] = *(_OWORD *)&v26[v27[7]];
  v32 = v27[8];
  v33 = &v25[v32];
  v34 = &v26[v32];
  v35 = type metadata accessor for ContentSizeCategory(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v35 - 8) + 32))(v33, v34, v35);
  *(_QWORD *)&v25[v27[9]] = *(_QWORD *)&v26[v27[9]];
  *(_QWORD *)&v25[v27[10]] = *(_QWORD *)&v26[v27[10]];
  v25[v27[11]] = v26[v27[11]];
  v25[v27[12]] = v26[v27[12]];
  return a1;
}

_OWORD *sub_10004B798(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  int *v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t (*v26)(char *, uint64_t, uint64_t);
  int v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  char *v46;
  int *v47;
  uint64_t v48;
  char *v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  char *v54;
  uint64_t v55;
  _OWORD *v57;
  uint64_t v58;

  if (a1 != a2)
  {
    sub_100027D34((uint64_t)a1, type metadata accessor for Item);
    v6 = type metadata accessor for Item(0);
    if (swift_getEnumCaseMultiPayload(a2, v6))
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
    }
    else
    {
      *a1 = *a2;
      v7 = type metadata accessor for Item.Headline(0);
      v8 = *(int *)(v7 + 24);
      v9 = (char *)a1 + v8;
      v10 = (char *)a2 + v8;
      v11 = type metadata accessor for URL(0);
      v12 = *(_QWORD *)(v11 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11))
      {
        v13 = sub_10001B520(&qword_1000B93A0);
        memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v9, v10, v11);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
      }
      *(_OWORD *)((char *)a1 + *(int *)(v7 + 28)) = *(_OWORD *)((char *)a2 + *(int *)(v7 + 28));
      swift_storeEnumTagMultiPayload(a1, v6, 0);
    }
  }
  v57 = a2;
  v58 = a3;
  v14 = *(int *)(a3 + 20);
  v15 = (char *)a1 + v14;
  v16 = (char *)a2 + v14;
  v17 = *(void **)((char *)a1 + v14);
  *(_QWORD *)((char *)a1 + v14) = *(_QWORD *)((char *)a2 + v14);

  v18 = *((_QWORD *)v15 + 1);
  *((_QWORD *)v15 + 1) = *((_QWORD *)v16 + 1);
  swift_bridgeObjectRelease(v18);
  v19 = *((_QWORD *)v15 + 2);
  *((_QWORD *)v15 + 2) = *((_QWORD *)v16 + 2);
  swift_unknownObjectRelease(v19);
  v15[24] = v16[24];
  v20 = (int *)type metadata accessor for TodayContent(0);
  v21 = v20[8];
  v22 = &v15[v21];
  v23 = &v16[v21];
  v24 = type metadata accessor for URL(0);
  v25 = *(_QWORD *)(v24 - 8);
  v26 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v25 + 48);
  v27 = v26(v22, 1, v24);
  v28 = v26(v23, 1, v24);
  if (!v27)
  {
    if (!v28)
    {
      (*(void (**)(char *, char *, uint64_t))(v25 + 40))(v22, v23, v24);
      goto LABEL_14;
    }
    (*(void (**)(char *, uint64_t))(v25 + 8))(v22, v24);
    goto LABEL_13;
  }
  if (v28)
  {
LABEL_13:
    v29 = sub_10001B520(&qword_1000B93A0);
    memcpy(v22, v23, *(_QWORD *)(*(_QWORD *)(v29 - 8) + 64));
    goto LABEL_14;
  }
  (*(void (**)(char *, char *, uint64_t))(v25 + 32))(v22, v23, v24);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v25 + 56))(v22, 0, 1, v24);
LABEL_14:
  v30 = v20[9];
  v31 = *(_QWORD *)&v15[v30];
  *(_QWORD *)&v15[v30] = *(_QWORD *)&v16[v30];
  swift_release(v31);
  v32 = v20[10];
  v33 = &v15[v32];
  v34 = &v16[v32];
  v36 = *(_QWORD *)v34;
  v35 = *((_QWORD *)v34 + 1);
  v37 = *((_QWORD *)v33 + 1);
  *(_QWORD *)v33 = v36;
  *((_QWORD *)v33 + 1) = v35;
  swift_bridgeObjectRelease(v37);
  v38 = v20[11];
  v39 = &v15[v38];
  v40 = &v16[v38];
  v42 = *(_QWORD *)v40;
  v41 = *((_QWORD *)v40 + 1);
  v43 = *((_QWORD *)v39 + 1);
  *(_QWORD *)v39 = v42;
  *((_QWORD *)v39 + 1) = v41;
  swift_bridgeObjectRelease(v43);
  v44 = *(int *)(v58 + 24);
  v45 = (char *)a1 + v44;
  v46 = (char *)v57 + v44;
  *(_OWORD *)((char *)a1 + v44) = *(_OWORD *)((char *)v57 + v44);
  v47 = (int *)type metadata accessor for LayoutContext(0);
  v48 = v47[6];
  v49 = &v45[v48];
  v50 = &v46[v48];
  v51 = type metadata accessor for InternalWidgetFamily(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v51 - 8) + 40))(v49, v50, v51);
  *(_OWORD *)&v45[v47[7]] = *(_OWORD *)&v46[v47[7]];
  v52 = v47[8];
  v53 = &v45[v52];
  v54 = &v46[v52];
  v55 = type metadata accessor for ContentSizeCategory(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v55 - 8) + 40))(v53, v54, v55);
  *(_QWORD *)&v45[v47[9]] = *(_QWORD *)&v46[v47[9]];
  *(_QWORD *)&v45[v47[10]] = *(_QWORD *)&v46[v47[10]];
  v45[v47[11]] = v46[v47[11]];
  v45[v47[12]] = v46[v47[12]];
  return a1;
}

uint64_t sub_10004BB0C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10004BB18);
}

uint64_t sub_10004BB18(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v6 = type metadata accessor for Item(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
  }
  else
  {
    v11 = type metadata accessor for TodayContent(0);
    v12 = *(_QWORD *)(v11 - 8);
    if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
    {
      v8 = v11;
      v13 = *(int *)(a3 + 20);
    }
    else
    {
      v8 = type metadata accessor for LayoutContext(0);
      v12 = *(_QWORD *)(v8 - 8);
      v13 = *(int *)(a3 + 24);
    }
    v10 = a1 + v13;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
  }
  return v9(v10, a2, v8);
}

uint64_t sub_10004BBB0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10004BBBC);
}

uint64_t sub_10004BBBC(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v8 = type metadata accessor for Item(0);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    v13 = type metadata accessor for TodayContent(0);
    v14 = *(_QWORD *)(v13 - 8);
    if (*(_DWORD *)(v14 + 84) == a3)
    {
      v10 = v13;
      v15 = *(int *)(a4 + 20);
    }
    else
    {
      v10 = type metadata accessor for LayoutContext(0);
      v14 = *(_QWORD *)(v10 - 8);
      v15 = *(int *)(a4 + 24);
    }
    v12 = a1 + v15;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
  }
  return v11(v12, a2, a2, v10);
}

uint64_t type metadata accessor for RectangularContentView(uint64_t a1)
{
  return sub_10002ABF8(a1, qword_1000BB240, (uint64_t)&nominal type descriptor for RectangularContentView);
}

uint64_t sub_10004BC70(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  _QWORD v6[3];

  result = type metadata accessor for Item(319);
  if (v3 <= 0x3F)
  {
    v6[0] = *(_QWORD *)(result - 8) + 64;
    result = type metadata accessor for TodayContent(319);
    if (v4 <= 0x3F)
    {
      v6[1] = *(_QWORD *)(result - 8) + 64;
      result = type metadata accessor for LayoutContext(319);
      if (v5 <= 0x3F)
      {
        v6[2] = *(_QWORD *)(result - 8) + 64;
        swift_initStructMetadata(a1, 256, 3, v6, a1 + 16);
        return 0;
      }
    }
  }
  return result;
}

uint64_t sub_10004BD10(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_10009CCD0, 1);
}

uint64_t sub_10004BD20@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t EnumCaseMultiPayload;
  uint64_t v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  __n128 v40;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  uint64_t v58;

  v2 = v1;
  v48 = a1;
  v3 = sub_10001B520(&qword_1000B93A0);
  __chkstk_darwin(v3);
  v5 = (char *)&v42 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for RectangularHeadlineView(0);
  __chkstk_darwin(v6);
  v8 = (char *)&v42 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v43 = type metadata accessor for Item.Headline(0);
  __chkstk_darwin(v43);
  v10 = (char *)&v42 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for Item(0);
  v12 = __chkstk_darwin(v11);
  v14 = (char *)&v42 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v16 = (char *)&v42 - v15;
  v17 = sub_10001B520(&qword_1000BB280);
  v46 = *(_QWORD *)(v17 - 8);
  v47 = v17;
  v18 = __chkstk_darwin(v17);
  v20 = (char *)&v42 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = static Alignment.center.getter(v18);
  v44 = v22;
  v45 = v21;
  sub_10002A83C(v2, (uint64_t)v16, type metadata accessor for Item);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v16, v11);
  if ((_DWORD)EnumCaseMultiPayload == 1)
  {
    v24 = *(_QWORD *)v16;
    v25 = *((_QWORD *)v16 + 1);
    v26 = v16[16];
    v27 = *((_QWORD *)v16 + 3);
    v52 = (unint64_t)static VerticalAlignment.center.getter(EnumCaseMultiPayload);
    LOBYTE(v53) = 1;
    *((_QWORD *)&v53 + 1) = v24;
    *(_QWORD *)&v54 = v25;
    BYTE8(v54) = v26;
    *(_QWORD *)&v55 = v27;
    v28 = sub_10001B520(&qword_1000BB288);
    v29 = sub_10002CE94(&qword_1000BB290, &qword_1000BB288, (uint64_t)&protocol conformance descriptor for HStack<A>);
    v30 = AnyView.init<A>(_:)(&v52, v28, v29);
  }
  else
  {
    sub_10004C120((uint64_t)v16, (uint64_t)v10);
    sub_10002A83C((uint64_t)v10, (uint64_t)v8, type metadata accessor for Item.Headline);
    v31 = type metadata accessor for RectangularContentView(0);
    sub_100043DD0((uint64_t)&v52);
    sub_10002A83C(v2 + *(int *)(v31 + 20), (uint64_t)&v8[*(int *)(v6 + 24)], type metadata accessor for TodayContent);
    v32 = &v8[*(int *)(v6 + 20)];
    v33 = v57;
    *((_OWORD *)v32 + 4) = v56;
    *((_OWORD *)v32 + 5) = v33;
    *((_QWORD *)v32 + 12) = v58;
    v34 = v53;
    *(_OWORD *)v32 = v52;
    *((_OWORD *)v32 + 1) = v34;
    v35 = v55;
    *((_OWORD *)v32 + 2) = v54;
    *((_OWORD *)v32 + 3) = v35;
    v36 = sub_10004C164();
    v30 = AnyView.init<A>(_:)(v8, v6, v36);
    sub_100027D34((uint64_t)v10, type metadata accessor for Item.Headline);
  }
  v49 = v45;
  v50 = v44;
  v51 = v30;
  sub_10002A83C(v2, (uint64_t)v14, type metadata accessor for Item);
  if (swift_getEnumCaseMultiPayload(v14, v11) == 1)
  {
    sub_100027D34((uint64_t)v14, type metadata accessor for Item);
    v37 = type metadata accessor for URL(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v37 - 8) + 56))(v5, 1, 1, v37);
  }
  else
  {
    sub_10004C120((uint64_t)v14, (uint64_t)v10);
    sub_10002CCB0((uint64_t)&v10[*(int *)(v43 + 24)], (uint64_t)v5, &qword_1000B93A0);
    sub_100027D34((uint64_t)v10, type metadata accessor for Item.Headline);
  }
  v38 = sub_10001B520(&qword_1000BB298);
  v39 = sub_10002CE94(&qword_1000BB2A0, &qword_1000BB298, (uint64_t)&protocol conformance descriptor for ZStack<A>);
  View.widgetURL(_:)(v5, v38, v39);
  sub_10002CCF4((uint64_t)v5, &qword_1000B93A0);
  v40 = swift_release(v51);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t, __n128))(v46 + 32))(v48, v20, v47, v40);
}

uint64_t type metadata accessor for RectangularHeadlineView(uint64_t a1)
{
  return sub_10002ABF8(a1, qword_1000BB308, (uint64_t)&nominal type descriptor for RectangularHeadlineView);
}

uint64_t sub_10004C120(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for Item.Headline(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

unint64_t sub_10004C164()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000BB2A8;
  if (!qword_1000BB2A8)
  {
    v1 = type metadata accessor for RectangularHeadlineView(255);
    result = swift_getWitnessTable(&unk_10008C260, v1);
    atomic_store(result, (unint64_t *)&qword_1000BB2A8);
  }
  return result;
}

_QWORD *sub_10004C1AC(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  int v3;
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int (*v14)(char *, uint64_t, uint64_t);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  char *v19;
  void *v20;
  void *v21;
  id v22;
  id v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  char *v27;
  void *v28;
  void *v29;
  void *v30;
  char *v31;
  char *v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  int *v36;
  uint64_t v37;
  char *v38;
  id v39;
  id v40;
  id v41;
  id v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  char *v52;
  uint64_t v53;
  uint64_t v55;
  _QWORD *v56;
  char *__dst;
  char *__dsta;
  unsigned int (*v59)(char *, uint64_t, uint64_t);
  uint64_t v60;

  v3 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  v4 = *a2;
  *a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    v16 = v4 + ((v3 + 16) & ~(unint64_t)v3);
    swift_retain(v4);
  }
  else
  {
    v8 = a2[1];
    a1[1] = v8;
    v9 = type metadata accessor for Item.Headline(0);
    v10 = *(int *)(v9 + 24);
    __dst = (char *)a1 + v10;
    v11 = (char *)a2 + v10;
    v12 = type metadata accessor for URL(0);
    v13 = *(_QWORD *)(v12 - 8);
    v14 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48);
    swift_unknownObjectRetain(v4);
    swift_retain(v8);
    v59 = v14;
    if (v14(v11, 1, v12))
    {
      v15 = sub_10001B520(&qword_1000B93A0);
      memcpy(__dst, v11, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v13 + 16))(__dst, v11, v12);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v13 + 56))(__dst, 0, 1, v12);
    }
    v17 = *(int *)(v9 + 28);
    v18 = (_QWORD *)((char *)a1 + v17);
    v19 = (char *)a2 + v17;
    v20 = (void *)*((_QWORD *)v19 + 1);
    v60 = v12;
    v55 = v13;
    if (v20)
    {
      v21 = *(void **)v19;
      *v18 = v21;
      v18[1] = v20;
      v22 = v21;
      v23 = v20;
    }
    else
    {
      *(_OWORD *)v18 = *(_OWORD *)v19;
    }
    v24 = *(int *)(a3 + 20);
    v25 = *(int *)(a3 + 24);
    v26 = (char *)a1 + v24;
    v27 = (char *)a2 + v24;
    v28 = *(void **)v27;
    *(_QWORD *)v26 = *(_QWORD *)v27;
    *(_OWORD *)(v26 + 8) = *(_OWORD *)(v27 + 8);
    *(_OWORD *)(v26 + 17) = *(_OWORD *)(v27 + 17);
    *(_OWORD *)(v26 + 40) = *(_OWORD *)(v27 + 40);
    v29 = (void *)*((_QWORD *)v27 + 8);
    *((_QWORD *)v26 + 7) = *((_QWORD *)v27 + 7);
    *((_QWORD *)v26 + 8) = v29;
    v30 = (void *)*((_QWORD *)v27 + 9);
    *((_QWORD *)v26 + 9) = v30;
    *((_OWORD *)v26 + 5) = *((_OWORD *)v27 + 5);
    *((_QWORD *)v26 + 12) = *((_QWORD *)v27 + 12);
    v56 = a1;
    v31 = (char *)a1 + v25;
    v32 = (char *)a2 + v25;
    v33 = *(void **)((char *)a2 + v25);
    v34 = *(_QWORD *)((char *)a2 + v25 + 8);
    *(_QWORD *)v31 = v33;
    *((_QWORD *)v31 + 1) = v34;
    v35 = *(_QWORD *)((char *)a2 + v25 + 16);
    *((_QWORD *)v31 + 2) = v35;
    v31[24] = *((_BYTE *)a2 + v25 + 24);
    v36 = (int *)type metadata accessor for TodayContent(0);
    v37 = v36[8];
    __dsta = &v31[v37];
    v38 = &v32[v37];
    v39 = v28;
    v40 = v29;
    v41 = v30;
    v42 = v33;
    swift_bridgeObjectRetain(v34);
    swift_unknownObjectRetain(v35);
    if (v59(v38, 1, v60))
    {
      v43 = sub_10001B520(&qword_1000B93A0);
      memcpy(__dsta, v38, *(_QWORD *)(*(_QWORD *)(v43 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v55 + 16))(__dsta, v38, v60);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v55 + 56))(__dsta, 0, 1, v60);
    }
    v44 = v36[9];
    v45 = *(_QWORD *)&v32[v44];
    *(_QWORD *)&v31[v44] = v45;
    v46 = v36[10];
    v47 = &v31[v46];
    v48 = &v32[v46];
    v49 = *((_QWORD *)v48 + 1);
    *(_QWORD *)v47 = *(_QWORD *)v48;
    *((_QWORD *)v47 + 1) = v49;
    v50 = v36[11];
    v51 = &v31[v50];
    v52 = &v32[v50];
    v53 = *((_QWORD *)v52 + 1);
    *(_QWORD *)v51 = *(_QWORD *)v52;
    *((_QWORD *)v51 + 1) = v53;
    swift_retain(v45);
    swift_bridgeObjectRetain(v49);
    swift_bridgeObjectRetain(v53);
    return v56;
  }
  return (_QWORD *)v16;
}

uint64_t sub_10004C480(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int (*v8)(char *, uint64_t, uint64_t);
  id *v9;
  id *v10;
  char *v11;
  int *v12;
  char *v13;

  swift_unknownObjectRelease(*a1);
  swift_release(a1[1]);
  v4 = type metadata accessor for Item.Headline(0);
  v5 = (char *)a1 + *(int *)(v4 + 24);
  v6 = type metadata accessor for URL(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48);
  if (!v8(v5, 1, v6))
    (*(void (**)(char *, uint64_t))(v7 + 8))(v5, v6);
  v9 = (id *)((char *)a1 + *(int *)(v4 + 28));
  if (v9[1])
  {

  }
  v10 = (id *)((char *)a1 + *(int *)(a2 + 20));

  v11 = (char *)a1 + *(int *)(a2 + 24);
  swift_bridgeObjectRelease(*((_QWORD *)v11 + 1));
  swift_unknownObjectRelease(*((_QWORD *)v11 + 2));
  v12 = (int *)type metadata accessor for TodayContent(0);
  v13 = &v11[v12[8]];
  if (!v8(v13, 1, v6))
    (*(void (**)(char *, uint64_t))(v7 + 8))(v13, v6);
  swift_release(*(_QWORD *)&v11[v12[9]]);
  swift_bridgeObjectRelease(*(_QWORD *)&v11[v12[10] + 8]);
  return swift_bridgeObjectRelease(*(_QWORD *)&v11[v12[11] + 8]);
}

_QWORD *sub_10004C5D4(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int (*v13)(char *, uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  char *v17;
  void *v18;
  void *v19;
  id v20;
  id v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  void *v26;
  void *v27;
  void *v28;
  char *v29;
  char *v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  int *v34;
  uint64_t v35;
  char *v36;
  id v37;
  id v38;
  id v39;
  id v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  char *v50;
  uint64_t v51;
  uint64_t v53;
  char *__dst;
  unsigned int (*v55)(char *, uint64_t, uint64_t);
  uint64_t v56;
  _QWORD *v58;

  v5 = *a2;
  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  v7 = type metadata accessor for Item.Headline(0);
  v8 = *(int *)(v7 + 24);
  v9 = (char *)a1 + v8;
  v10 = (char *)a2 + v8;
  v11 = type metadata accessor for URL(0);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48);
  swift_unknownObjectRetain(v5);
  swift_retain(v6);
  v55 = v13;
  if (v13(v10, 1, v11))
  {
    v14 = sub_10001B520(&qword_1000B93A0);
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v9, v10, v11);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
  }
  v15 = *(int *)(v7 + 28);
  v16 = (_QWORD *)((char *)a1 + v15);
  v17 = (char *)a2 + v15;
  v18 = (void *)*((_QWORD *)v17 + 1);
  v56 = v11;
  v53 = v12;
  if (v18)
  {
    v19 = *(void **)v17;
    *v16 = v19;
    v16[1] = v18;
    v20 = v19;
    v21 = v18;
  }
  else
  {
    *(_OWORD *)v16 = *(_OWORD *)v17;
  }
  v22 = *(int *)(a3 + 20);
  v23 = *(int *)(a3 + 24);
  v24 = (char *)a1 + v22;
  v25 = (char *)a2 + v22;
  v26 = *(void **)v25;
  *(_QWORD *)v24 = *(_QWORD *)v25;
  *(_OWORD *)(v24 + 8) = *(_OWORD *)(v25 + 8);
  *(_OWORD *)(v24 + 17) = *(_OWORD *)(v25 + 17);
  *(_OWORD *)(v24 + 40) = *(_OWORD *)(v25 + 40);
  v27 = (void *)*((_QWORD *)v25 + 8);
  *((_QWORD *)v24 + 7) = *((_QWORD *)v25 + 7);
  *((_QWORD *)v24 + 8) = v27;
  v28 = (void *)*((_QWORD *)v25 + 9);
  *((_QWORD *)v24 + 9) = v28;
  *((_OWORD *)v24 + 5) = *((_OWORD *)v25 + 5);
  *((_QWORD *)v24 + 12) = *((_QWORD *)v25 + 12);
  v58 = a1;
  v29 = (char *)a1 + v23;
  v30 = (char *)a2 + v23;
  v31 = *(void **)((char *)a2 + v23);
  v32 = *(_QWORD *)((char *)a2 + v23 + 8);
  *(_QWORD *)v29 = v31;
  *((_QWORD *)v29 + 1) = v32;
  v33 = *(_QWORD *)((char *)a2 + v23 + 16);
  *((_QWORD *)v29 + 2) = v33;
  v29[24] = *((_BYTE *)a2 + v23 + 24);
  v34 = (int *)type metadata accessor for TodayContent(0);
  v35 = v34[8];
  __dst = &v29[v35];
  v36 = &v30[v35];
  v37 = v26;
  v38 = v27;
  v39 = v28;
  v40 = v31;
  swift_bridgeObjectRetain(v32);
  swift_unknownObjectRetain(v33);
  if (v55(v36, 1, v56))
  {
    v41 = sub_10001B520(&qword_1000B93A0);
    memcpy(__dst, v36, *(_QWORD *)(*(_QWORD *)(v41 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v53 + 16))(__dst, v36, v56);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v53 + 56))(__dst, 0, 1, v56);
  }
  v42 = v34[9];
  v43 = *(_QWORD *)&v30[v42];
  *(_QWORD *)&v29[v42] = v43;
  v44 = v34[10];
  v45 = &v29[v44];
  v46 = &v30[v44];
  v47 = *((_QWORD *)v46 + 1);
  *(_QWORD *)v45 = *(_QWORD *)v46;
  *((_QWORD *)v45 + 1) = v47;
  v48 = v34[11];
  v49 = &v29[v48];
  v50 = &v30[v48];
  v51 = *((_QWORD *)v50 + 1);
  *(_QWORD *)v49 = *(_QWORD *)v50;
  *((_QWORD *)v49 + 1) = v51;
  swift_retain(v43);
  swift_bridgeObjectRetain(v47);
  swift_bridgeObjectRetain(v51);
  return v58;
}

uint64_t *sub_10004C86C(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t (*v16)(char *, uint64_t, uint64_t);
  int v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  id v25;
  void *v26;
  id v27;
  void *v28;
  void *v29;
  id v30;
  void *v31;
  void *v32;
  id v33;
  id v34;
  uint64_t v35;
  char *v36;
  char *v37;
  void *v38;
  void *v39;
  id v40;
  __int128 v41;
  void *v42;
  void *v43;
  id v44;
  void *v45;
  void *v46;
  id v47;
  uint64_t v48;
  char *v49;
  char *v50;
  void *v51;
  void *v52;
  id v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  int *v58;
  uint64_t v59;
  char *v60;
  char *v61;
  int v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;

  v6 = *a2;
  v7 = *a1;
  *a1 = *a2;
  swift_unknownObjectRetain(v6);
  swift_unknownObjectRelease(v7);
  v8 = a2[1];
  v9 = a1[1];
  a1[1] = v8;
  swift_retain(v8);
  swift_release(v9);
  v10 = type metadata accessor for Item.Headline(0);
  v11 = *(int *)(v10 + 24);
  v12 = (char *)a1 + v11;
  v13 = (char *)a2 + v11;
  v14 = type metadata accessor for URL(0);
  v15 = *(_QWORD *)(v14 - 8);
  v16 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v15 + 48);
  v17 = v16(v12, 1, v14);
  v18 = v16(v13, 1, v14);
  if (v17)
  {
    if (!v18)
    {
      (*(void (**)(char *, char *, uint64_t))(v15 + 16))(v12, v13, v14);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v18)
  {
    (*(void (**)(char *, uint64_t))(v15 + 8))(v12, v14);
LABEL_6:
    v19 = sub_10001B520(&qword_1000B93A0);
    memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v15 + 24))(v12, v13, v14);
LABEL_7:
  v20 = *(int *)(v10 + 28);
  v21 = (char *)a1 + v20;
  v22 = (char *)a2 + v20;
  v23 = *(uint64_t *)((char *)a1 + v20 + 8);
  v24 = *(uint64_t *)((char *)a2 + v20 + 8);
  if (v23)
  {
    if (v24)
    {
      v25 = *(id *)v21;
      v26 = *(void **)v22;
      *(_QWORD *)v21 = *(_QWORD *)v22;
      v27 = v26;

      v28 = (void *)*((_QWORD *)v22 + 1);
      v29 = (void *)*((_QWORD *)v21 + 1);
      *((_QWORD *)v21 + 1) = v28;
      v30 = v28;

      goto LABEL_14;
    }
    sub_10002BC50((id *)v21);
  }
  else if (v24)
  {
    v31 = *(void **)v22;
    *(_QWORD *)v21 = *(_QWORD *)v22;
    v32 = (void *)*((_QWORD *)v22 + 1);
    *((_QWORD *)v21 + 1) = v32;
    v33 = v31;
    v34 = v32;
    goto LABEL_14;
  }
  *(_OWORD *)v21 = *(_OWORD *)v22;
LABEL_14:
  v35 = *(int *)(a3 + 20);
  v36 = (char *)a1 + v35;
  v37 = (char *)a2 + v35;
  v38 = *(void **)((char *)a2 + v35);
  v39 = *(void **)v36;
  *(_QWORD *)v36 = v38;
  v40 = v38;

  *((_QWORD *)v36 + 1) = *((_QWORD *)v37 + 1);
  v41 = *((_OWORD *)v37 + 1);
  v36[32] = v37[32];
  *((_OWORD *)v36 + 1) = v41;
  *((_QWORD *)v36 + 5) = *((_QWORD *)v37 + 5);
  *((_QWORD *)v36 + 6) = *((_QWORD *)v37 + 6);
  *((_QWORD *)v36 + 7) = *((_QWORD *)v37 + 7);
  v42 = (void *)*((_QWORD *)v37 + 8);
  v43 = (void *)*((_QWORD *)v36 + 8);
  *((_QWORD *)v36 + 8) = v42;
  v44 = v42;

  v45 = (void *)*((_QWORD *)v37 + 9);
  v46 = (void *)*((_QWORD *)v36 + 9);
  *((_QWORD *)v36 + 9) = v45;
  v47 = v45;

  *((_QWORD *)v36 + 10) = *((_QWORD *)v37 + 10);
  *((_QWORD *)v36 + 11) = *((_QWORD *)v37 + 11);
  *((_QWORD *)v36 + 12) = *((_QWORD *)v37 + 12);
  v48 = *(int *)(a3 + 24);
  v49 = (char *)a1 + v48;
  v50 = (char *)a2 + v48;
  v51 = *(void **)((char *)a2 + v48);
  v52 = *(void **)v49;
  *(_QWORD *)v49 = v51;
  v53 = v51;

  v54 = *((_QWORD *)v50 + 1);
  v55 = *((_QWORD *)v49 + 1);
  *((_QWORD *)v49 + 1) = v54;
  swift_bridgeObjectRetain(v54);
  swift_bridgeObjectRelease(v55);
  v56 = *((_QWORD *)v50 + 2);
  v57 = *((_QWORD *)v49 + 2);
  *((_QWORD *)v49 + 2) = v56;
  swift_unknownObjectRetain(v56);
  swift_unknownObjectRelease(v57);
  v49[24] = v50[24];
  v58 = (int *)type metadata accessor for TodayContent(0);
  v59 = v58[8];
  v60 = &v49[v59];
  v61 = &v50[v59];
  LODWORD(v37) = v16(&v49[v59], 1, v14);
  v62 = v16(v61, 1, v14);
  if (!(_DWORD)v37)
  {
    if (!v62)
    {
      (*(void (**)(char *, char *, uint64_t))(v15 + 24))(v60, v61, v14);
      goto LABEL_20;
    }
    (*(void (**)(char *, uint64_t))(v15 + 8))(v60, v14);
    goto LABEL_19;
  }
  if (v62)
  {
LABEL_19:
    v63 = sub_10001B520(&qword_1000B93A0);
    memcpy(v60, v61, *(_QWORD *)(*(_QWORD *)(v63 - 8) + 64));
    goto LABEL_20;
  }
  (*(void (**)(char *, char *, uint64_t))(v15 + 16))(v60, v61, v14);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v60, 0, 1, v14);
LABEL_20:
  v64 = v58[9];
  v65 = *(_QWORD *)&v50[v64];
  v66 = *(_QWORD *)&v49[v64];
  *(_QWORD *)&v49[v64] = v65;
  swift_retain(v65);
  swift_release(v66);
  v67 = v58[10];
  v68 = &v49[v67];
  v69 = &v50[v67];
  *(_QWORD *)v68 = *(_QWORD *)v69;
  v70 = *((_QWORD *)v69 + 1);
  v71 = *((_QWORD *)v68 + 1);
  *((_QWORD *)v68 + 1) = v70;
  swift_bridgeObjectRetain(v70);
  swift_bridgeObjectRelease(v71);
  v72 = v58[11];
  v73 = &v49[v72];
  v74 = &v50[v72];
  *(_QWORD *)v73 = *(_QWORD *)v74;
  v75 = *((_QWORD *)v74 + 1);
  v76 = *((_QWORD *)v73 + 1);
  *((_QWORD *)v73 + 1) = v75;
  swift_bridgeObjectRetain(v75);
  swift_bridgeObjectRelease(v76);
  return a1;
}

_OWORD *sub_10004CC4C(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int (*v12)(char *, uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  int *v25;
  uint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;

  *a1 = *a2;
  v6 = type metadata accessor for Item.Headline(0);
  v7 = *(int *)(v6 + 24);
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = type metadata accessor for URL(0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48);
  if (v12(v9, 1, v10))
  {
    v13 = sub_10001B520(&qword_1000B93A0);
    memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v8, v9, v10);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
  }
  *(_OWORD *)((char *)a1 + *(int *)(v6 + 28)) = *(_OWORD *)((char *)a2 + *(int *)(v6 + 28));
  v14 = *(int *)(a3 + 20);
  v15 = *(int *)(a3 + 24);
  v16 = (char *)a1 + v14;
  v17 = (char *)a2 + v14;
  v18 = *((_OWORD *)v17 + 1);
  *(_OWORD *)v16 = *(_OWORD *)v17;
  *((_OWORD *)v16 + 1) = v18;
  *((_QWORD *)v16 + 12) = *((_QWORD *)v17 + 12);
  v19 = *((_OWORD *)v17 + 5);
  *((_OWORD *)v16 + 4) = *((_OWORD *)v17 + 4);
  *((_OWORD *)v16 + 5) = v19;
  v20 = *((_OWORD *)v17 + 3);
  *((_OWORD *)v16 + 2) = *((_OWORD *)v17 + 2);
  *((_OWORD *)v16 + 3) = v20;
  v21 = (char *)a1 + v15;
  v22 = (char *)a2 + v15;
  v23 = *(_QWORD *)((char *)a2 + v15);
  v24 = *(_QWORD *)((char *)a2 + v15 + 8);
  *(_QWORD *)v21 = v23;
  *((_QWORD *)v21 + 1) = v24;
  *((_QWORD *)v21 + 2) = *((_QWORD *)v22 + 2);
  v21[24] = v22[24];
  v25 = (int *)type metadata accessor for TodayContent(0);
  v26 = v25[8];
  v27 = &v21[v26];
  v28 = &v22[v26];
  if (v12(&v22[v26], 1, v10))
  {
    v29 = sub_10001B520(&qword_1000B93A0);
    memcpy(v27, v28, *(_QWORD *)(*(_QWORD *)(v29 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v27, v28, v10);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v27, 0, 1, v10);
  }
  *(_QWORD *)&v21[v25[9]] = *(_QWORD *)&v22[v25[9]];
  *(_OWORD *)&v21[v25[10]] = *(_OWORD *)&v22[v25[10]];
  *(_OWORD *)&v21[v25[11]] = *(_OWORD *)&v22[v25[11]];
  return a1;
}

uint64_t *sub_10004CE24(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t (*v14)(char *, uint64_t, uint64_t);
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  _QWORD *v20;
  id v21;
  void *v22;
  uint64_t v23;
  char *v24;
  char *v25;
  void *v26;
  void *v27;
  void *v28;
  uint64_t v29;
  char *v30;
  char *v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  int *v35;
  uint64_t v36;
  char *v37;
  char *v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;

  v6 = *a1;
  *a1 = *a2;
  swift_unknownObjectRelease(v6);
  v7 = a1[1];
  a1[1] = a2[1];
  swift_release(v7);
  v8 = type metadata accessor for Item.Headline(0);
  v9 = *(int *)(v8 + 24);
  v10 = (char *)a1 + v9;
  v11 = (char *)a2 + v9;
  v12 = type metadata accessor for URL(0);
  v13 = *(_QWORD *)(v12 - 8);
  v14 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v13 + 48);
  v15 = v14(v10, 1, v12);
  v16 = v14(v11, 1, v12);
  if (v15)
  {
    if (!v16)
    {
      (*(void (**)(char *, char *, uint64_t))(v13 + 32))(v10, v11, v12);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v10, 0, 1, v12);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v16)
  {
    (*(void (**)(char *, uint64_t))(v13 + 8))(v10, v12);
LABEL_6:
    v17 = sub_10001B520(&qword_1000B93A0);
    memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v13 + 40))(v10, v11, v12);
LABEL_7:
  v18 = *(int *)(v8 + 28);
  v19 = (char *)a1 + v18;
  v20 = (uint64_t *)((char *)a2 + v18);
  if (*(uint64_t *)((char *)a1 + v18 + 8))
  {
    if (v20[1])
    {
      v21 = *(id *)v19;
      *(_QWORD *)v19 = *v20;

      v22 = (void *)*((_QWORD *)v19 + 1);
      *((_QWORD *)v19 + 1) = v20[1];

      goto LABEL_12;
    }
    sub_10002BC50((id *)v19);
  }
  *(_OWORD *)v19 = *(_OWORD *)v20;
LABEL_12:
  v23 = *(int *)(a3 + 20);
  v24 = (char *)a1 + v23;
  v25 = (char *)a2 + v23;
  v26 = *(void **)((char *)a1 + v23);
  *(uint64_t *)((char *)a1 + v23) = *(uint64_t *)((char *)a2 + v23);

  *((_QWORD *)v24 + 1) = *((_QWORD *)v25 + 1);
  *((_OWORD *)v24 + 1) = *((_OWORD *)v25 + 1);
  v24[32] = v25[32];
  *(_OWORD *)(v24 + 40) = *(_OWORD *)(v25 + 40);
  *((_QWORD *)v24 + 7) = *((_QWORD *)v25 + 7);
  v27 = (void *)*((_QWORD *)v24 + 8);
  *((_QWORD *)v24 + 8) = *((_QWORD *)v25 + 8);

  v28 = (void *)*((_QWORD *)v24 + 9);
  *((_QWORD *)v24 + 9) = *((_QWORD *)v25 + 9);

  *((_OWORD *)v24 + 5) = *((_OWORD *)v25 + 5);
  *((_QWORD *)v24 + 12) = *((_QWORD *)v25 + 12);
  v29 = *(int *)(a3 + 24);
  v30 = (char *)a1 + v29;
  v31 = (char *)a2 + v29;
  v32 = *(void **)((char *)a1 + v29);
  *(uint64_t *)((char *)a1 + v29) = *(uint64_t *)((char *)a2 + v29);

  v33 = *((_QWORD *)v30 + 1);
  *((_QWORD *)v30 + 1) = *((_QWORD *)v31 + 1);
  swift_bridgeObjectRelease(v33);
  v34 = *((_QWORD *)v30 + 2);
  *((_QWORD *)v30 + 2) = *((_QWORD *)v31 + 2);
  swift_unknownObjectRelease(v34);
  v30[24] = v31[24];
  v35 = (int *)type metadata accessor for TodayContent(0);
  v36 = v35[8];
  v37 = &v30[v36];
  v38 = &v31[v36];
  LODWORD(v25) = v14(&v30[v36], 1, v12);
  v39 = v14(v38, 1, v12);
  if (!(_DWORD)v25)
  {
    if (!v39)
    {
      (*(void (**)(char *, char *, uint64_t))(v13 + 40))(v37, v38, v12);
      goto LABEL_18;
    }
    (*(void (**)(char *, uint64_t))(v13 + 8))(v37, v12);
    goto LABEL_17;
  }
  if (v39)
  {
LABEL_17:
    v40 = sub_10001B520(&qword_1000B93A0);
    memcpy(v37, v38, *(_QWORD *)(*(_QWORD *)(v40 - 8) + 64));
    goto LABEL_18;
  }
  (*(void (**)(char *, char *, uint64_t))(v13 + 32))(v37, v38, v12);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v37, 0, 1, v12);
LABEL_18:
  v41 = v35[9];
  v42 = *(_QWORD *)&v30[v41];
  *(_QWORD *)&v30[v41] = *(_QWORD *)&v31[v41];
  swift_release(v42);
  v43 = v35[10];
  v44 = &v30[v43];
  v45 = &v31[v43];
  v47 = *(_QWORD *)v45;
  v46 = *((_QWORD *)v45 + 1);
  v48 = *((_QWORD *)v44 + 1);
  *(_QWORD *)v44 = v47;
  *((_QWORD *)v44 + 1) = v46;
  swift_bridgeObjectRelease(v48);
  v49 = v35[11];
  v50 = &v30[v49];
  v51 = &v31[v49];
  v53 = *(_QWORD *)v51;
  v52 = *((_QWORD *)v51 + 1);
  v54 = *((_QWORD *)v50 + 1);
  *(_QWORD *)v50 = v53;
  *((_QWORD *)v50 + 1) = v52;
  swift_bridgeObjectRelease(v54);
  return a1;
}

uint64_t sub_10004D174(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10004D180);
}

uint64_t sub_10004D180(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  unint64_t v11;

  v6 = type metadata accessor for Item.Headline(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
    return v9(v10, a2, v8);
  }
  if ((_DWORD)a2 != 0x7FFFFFFF)
  {
    v8 = type metadata accessor for TodayContent(0);
    v10 = a1 + *(int *)(a3 + 24);
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48);
    return v9(v10, a2, v8);
  }
  v11 = *(_QWORD *)(a1 + *(int *)(a3 + 20));
  if (v11 >= 0xFFFFFFFF)
    LODWORD(v11) = -1;
  return (v11 + 1);
}

uint64_t sub_10004D228(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10004D234);
}

uint64_t sub_10004D234(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;

  result = type metadata accessor for Item.Headline(0);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = result;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    if (a3 == 0x7FFFFFFF)
    {
      *(_QWORD *)(a1 + *(int *)(a4 + 20)) = (a2 - 1);
      return result;
    }
    v10 = type metadata accessor for TodayContent(0);
    v12 = a1 + *(int *)(a4 + 24);
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56);
  }
  return v11(v12, a2, a2, v10);
}

uint64_t sub_10004D2D8(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  unint64_t v4;
  _QWORD v5[3];

  result = type metadata accessor for Item.Headline(319);
  if (v3 <= 0x3F)
  {
    v5[0] = *(_QWORD *)(result - 8) + 64;
    v5[1] = "h";
    result = type metadata accessor for TodayContent(319);
    if (v4 <= 0x3F)
    {
      v5[2] = *(_QWORD *)(result - 8) + 64;
      swift_initStructMetadata(a1, 256, 3, v5, a1 + 16);
      return 0;
    }
  }
  return result;
}

uint64_t sub_10004D364(uint64_t a1)
{
  return sub_10004EC78(a1, &qword_1000BB298, &qword_1000BB2A0, (uint64_t)&protocol conformance descriptor for ZStack<A>, (uint64_t)&opaque type descriptor for <<opaque return type of View.widgetURL(_:)>>);
}

uint64_t sub_10004D388(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_10009CCF8, 1);
}

uint64_t sub_10004D398@<X0>(id *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  Swift::String v26;
  id v27;
  void *v28;
  uint64_t v29;
  void *v30;
  void *v31;
  Swift::String v32;
  Swift::String v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char v40;
  uint64_t v41;
  uint64_t OpaqueTypeConformance2;
  uint64_t v43;
  uint64_t v44;
  id *v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char v53;
  uint64_t v54;
  id v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t KeyPath;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  char *v78;
  void *v79;
  uint64_t v80;
  uint64_t v81;
  id *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  id v86;
  uint64_t v87;

  v84 = a2;
  v3 = type metadata accessor for LocalizedStringKey.StringInterpolation(0);
  __chkstk_darwin(v3);
  v5 = (char *)&v78 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for AccessibilityChildBehavior(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v78 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_10001B520(&qword_1000BB360);
  __chkstk_darwin(v10);
  v12 = (char *)&v78 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_10001B520(&qword_1000BB368);
  v80 = *(_QWORD *)(v13 - 8);
  v81 = v13;
  __chkstk_darwin(v13);
  v15 = (char *)&v78 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = sub_10001B520(&qword_1000BB370);
  v17 = __chkstk_darwin(v16);
  v83 = (uint64_t)&v78 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = __chkstk_darwin(v17);
  v78 = (char *)&v78 - v20;
  v21 = __chkstk_darwin(v19);
  v85 = (uint64_t)&v78 - v22;
  *(_QWORD *)v12 = static VerticalAlignment.lastTextBaseline.getter(v21);
  *((_QWORD *)v12 + 1) = 0;
  v12[16] = 1;
  v23 = sub_10001B520(&qword_1000BB378);
  v24 = sub_10004D904((uint64_t)a1, (uint64_t)&v12[*(int *)(v23 + 44)]);
  static AccessibilityChildBehavior.ignore.getter(v24);
  v25 = sub_10002CE94(&qword_1000BB380, &qword_1000BB360, (uint64_t)&protocol conformance descriptor for HStack<A>);
  v79 = (void *)v10;
  View.accessibilityElement(children:)(v9, v10, v25);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  sub_10002CCF4((uint64_t)v12, &qword_1000BB360);
  LocalizedStringKey.StringInterpolation.init(literalCapacity:interpolationCount:)(17, 1);
  v26._object = (void *)0x8000000100091400;
  v26._countAndFlagsBits = 0xD000000000000011;
  LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v26);
  v82 = a1;
  v27 = objc_msgSend(*a1, "sourceName");
  if (v27)
  {
    v28 = v27;
    v29 = static String._unconditionallyBridgeFromObjectiveC(_:)(v27);
    v31 = v30;

  }
  else
  {
    v29 = 0;
    v31 = (void *)0xE000000000000000;
  }
  v32._countAndFlagsBits = v29;
  v32._object = v31;
  LocalizedStringKey.StringInterpolation.appendInterpolation(_:)(v32);
  swift_bridgeObjectRelease(v31);
  v33._countAndFlagsBits = 0;
  v33._object = (void *)0xE000000000000000;
  LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v33);
  v34 = LocalizedStringKey.init(stringInterpolation:)(v5);
  v35 = Text.init(_:tableName:bundle:comment:)(v34);
  v37 = v36;
  v39 = v38;
  v41 = v40 & 1;
  v86 = v79;
  v87 = v25;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v86, &opaque type descriptor for <<opaque return type of View.accessibilityElement(children:)>>, 1);
  v43 = (uint64_t)v78;
  v44 = v81;
  View.accessibilityLabel(_:)(v35, v37, v41, v39, v81, OpaqueTypeConformance2);
  sub_1000249D8(v35, v37, v41);
  swift_bridgeObjectRelease(v39);
  (*(void (**)(char *, uint64_t))(v80 + 8))(v15, v44);
  sub_10002CB18(v43, v85, &qword_1000BB370);
  v45 = v82;
  v86 = sub_1000791DC();
  v87 = v46;
  v47 = sub_10002ACB8();
  v48 = Text.init<A>(_:)(&v86, &type metadata for String, v47);
  v50 = v49;
  v52 = v51;
  v54 = v53 & 1;
  v55 = *(id *)((char *)v45 + *(int *)(type metadata accessor for RectangularHeadlineView(0) + 20) + 72);
  v56 = Font.init(_:)(v55);
  v57 = Text.font(_:)(v56, v48, v50, v54, v52);
  v59 = v58;
  LOBYTE(v41) = v60;
  v62 = v61;
  swift_release(v56);
  LOBYTE(v56) = v41 & 1;
  sub_1000249D8(v48, v50, v54);
  v63 = swift_bridgeObjectRelease(v52);
  v64 = static Color.white.getter(v63);
  v65 = Text.foregroundColor(_:)(v64, v57, v59, v41 & 1, v62);
  v67 = v66;
  LOBYTE(v41) = v68;
  v70 = v69;
  swift_release(v64);
  LOBYTE(v64) = v41 & 1;
  sub_1000249D8(v57, v59, v56);
  swift_bridgeObjectRelease(v62);
  KeyPath = swift_getKeyPath(&unk_10008C2B0);
  v72 = swift_getKeyPath(&unk_10008C2E0);
  v73 = v85;
  v74 = v83;
  sub_10002CCB0(v85, v83, &qword_1000BB370);
  v75 = v84;
  sub_10002CCB0(v74, v84, &qword_1000BB370);
  v76 = v75 + *(int *)(sub_10001B520(&qword_1000BB388) + 48);
  *(_QWORD *)v76 = v65;
  *(_QWORD *)(v76 + 8) = v67;
  *(_BYTE *)(v76 + 16) = v64;
  *(_QWORD *)(v76 + 24) = v70;
  *(_QWORD *)(v76 + 32) = KeyPath;
  *(_QWORD *)(v76 + 40) = 3;
  *(_BYTE *)(v76 + 48) = 0;
  *(_QWORD *)(v76 + 56) = v72;
  *(_QWORD *)(v76 + 64) = 0x3FE8000000000000;
  sub_100024770(v65, v67, v64);
  swift_bridgeObjectRetain(v70);
  swift_retain(KeyPath);
  swift_retain(v72);
  sub_10002CCF4(v73, &qword_1000BB370);
  sub_1000249D8(v65, v67, v64);
  swift_release(v72);
  swift_release(KeyPath);
  swift_bridgeObjectRelease(v70);
  return sub_10002CCF4(v74, &qword_1000BB370);
}

uint64_t sub_10004D904@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t KeyPath;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  char *v51;
  uint64_t OpaqueTypeConformance2;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  _QWORD *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char v63;
  char v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  char v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  int *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  unint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  char v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  char v107;
  char v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  double v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  char v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  char v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t *v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  char *v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t *v144;
  uint64_t v145;
  unint64_t v146;
  char *v147;
  uint64_t v148;
  char *v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  void (*v153)(char *, char *, uint64_t);
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  void (*v157)(char *, uint64_t);
  uint64_t v159;
  uint64_t v160;
  int v161;
  uint64_t v162;
  char *v163;
  char *v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  char *v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  char *v177;
  uint64_t *v178;
  char *v179;
  char *v180;
  uint64_t v181;
  uint64_t v182;
  char *v183;
  uint64_t v184;
  char *v185;
  uint64_t v186;
  char *v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  char *v191;
  uint64_t v192;
  _QWORD v193[2];
  uint64_t v194;
  unsigned __int8 v195;
  uint64_t v196;
  unsigned __int8 v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  unint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;

  v190 = a2;
  v189 = type metadata accessor for Text.TruncationMode(0);
  v188 = *(_QWORD *)(v189 - 8);
  __chkstk_darwin(v189);
  v187 = (char *)&v159 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v175 = sub_10001B520(&qword_1000BB390);
  __chkstk_darwin(v175);
  v178 = (uint64_t *)((char *)&v159 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  v5 = sub_10001B520(&qword_1000BB398);
  __chkstk_darwin(v5);
  v177 = (char *)&v159 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v174 = sub_10001B520(&qword_1000BB3A0);
  __chkstk_darwin(v174);
  v179 = (char *)&v159 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v176 = sub_10001B520(&qword_1000BB3A8);
  __chkstk_darwin(v176);
  v181 = (uint64_t)&v159 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v182 = sub_10001B520(&qword_1000BB3B0);
  __chkstk_darwin(v182);
  v180 = (char *)&v159 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v186 = sub_10001B520(&qword_1000BB3B8);
  v184 = *(_QWORD *)(v186 - 8);
  v10 = __chkstk_darwin(v186);
  v185 = (char *)&v159 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v183 = (char *)&v159 - v12;
  v13 = sub_10001B520(&qword_1000B9D08);
  v14 = __chkstk_darwin(v13);
  v16 = (char *)&v159 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  v18 = (char *)&v159 - v17;
  v167 = sub_10001B520(&qword_1000B9D10);
  __chkstk_darwin(v167);
  v20 = (uint64_t *)((char *)&v159 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0));
  v21 = type metadata accessor for Image.Scale(0);
  v22 = *(_QWORD *)(v21 - 8);
  __chkstk_darwin(v21);
  v24 = (char *)&v159 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v169 = sub_10001B520(&qword_1000B9D18);
  __chkstk_darwin(v169);
  v26 = (uint64_t *)((char *)&v159 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0));
  v171 = sub_10001B520(&qword_1000B9D20);
  v170 = *(_QWORD *)(v171 - 8);
  __chkstk_darwin(v171);
  v168 = (char *)&v159 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = sub_10001B520(&qword_1000B9D28);
  v29 = __chkstk_darwin(v28);
  v173 = (uint64_t)&v159 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v29);
  v172 = (uint64_t)&v159 - v31;
  v32 = sub_10001B520(&qword_1000BB3C0);
  v33 = __chkstk_darwin(v32);
  v192 = (uint64_t)&v159 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v33);
  v36 = (char *)&v159 - v35;
  v37 = *(_QWORD *)(a1 + *(int *)(type metadata accessor for RectangularHeadlineView(0) + 24) + 8);
  v38 = *(_QWORD *)(v37 + 16);
  v191 = v36;
  if (v38
    && (v39 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for Section(0) - 8) + 80),
        *(_BYTE *)(v37 + ((v39 + 32) & ~v39) + 24) == 1))
  {
    v166 = Image.init(_internalSystemName:)(1937204590, 0xE400000000000000);
    v40 = ((uint64_t (*)(void))static Color.pink.getter)();
    v163 = v18;
    v41 = v40;
    KeyPath = swift_getKeyPath(&unk_10008C370);
    v43 = static Font.footnote.getter(KeyPath);
    v44 = swift_getKeyPath(&unk_10008C3A0);
    v165 = a1;
    v45 = v44;
    (*(void (**)(char *, _QWORD, uint64_t))(v22 + 104))(v24, enum case for Image.Scale.small(_:), v21);
    v46 = swift_getKeyPath(&unk_10008C3D0);
    v164 = v16;
    v47 = v46;
    (*(void (**)(char *, char *, uint64_t))(v22 + 16))((char *)v20 + *(int *)(v167 + 28), v24, v21);
    *v20 = v47;
    v48 = v169;
    sub_10002CCB0((uint64_t)v20, (uint64_t)v26 + *(int *)(v169 + 36), &qword_1000B9D10);
    v49 = v166;
    *v26 = v166;
    v26[1] = KeyPath;
    v26[2] = v41;
    v26[3] = v45;
    v26[4] = v43;
    swift_retain(v49);
    swift_retain(KeyPath);
    swift_retain(v41);
    swift_retain(v45);
    swift_retain(v43);
    sub_10002CCF4((uint64_t)v20, &qword_1000B9D10);
    (*(void (**)(char *, uint64_t))(v22 + 8))(v24, v21);
    swift_release(v43);
    swift_release(v45);
    swift_release(v41);
    swift_release(KeyPath);
    swift_release(v166);
    v50 = sub_10002C98C();
    v51 = v168;
    View.widgetAccentable(_:)(1, v48, v50);
    sub_10002CCF4((uint64_t)v26, &qword_1000B9D18);
    v200 = v48;
    v201 = v50;
    OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v200, &opaque type descriptor for <<opaque return type of View.widgetAccentable(_:)>>, 1);
    v53 = v173;
    v54 = v171;
    View.accessibilityHidden(_:)(1, v171, OpaqueTypeConformance2);
    (*(void (**)(char *, uint64_t))(v170 + 8))(v51, v54);
    v55 = sub_10002CB18(v53, v172, &qword_1000B9D28);
    v56 = static Alignment.center.getter(v55);
    v58 = _FrameLayout.init(width:height:alignment:)(&v194, 0x4008000000000000, 0, 0, 1, v56, v57);
    v171 = v194;
    LODWORD(v170) = v195;
    v169 = v196;
    LODWORD(v168) = v197;
    v167 = v198;
    v166 = v199;
    v59 = static Font.footnote.getter(v58);
    v60 = Text.font(_:)(v59, 108, 0xE100000000000000, 0, _swiftEmptyArrayStorage);
    v62 = v61;
    v64 = v63;
    v66 = v65;
    swift_release(v59);
    v67 = v64 & 1;
    v69 = static Color.white.getter(v68);
    v70 = Text.foregroundColor(_:)(v69, v60, v62, v67, v66);
    v72 = v71;
    LOBYTE(v48) = v73;
    v75 = v74;
    swift_release(v69);
    sub_1000249D8(v60, v62, v67);
    swift_bridgeObjectRelease(v66);
    v200 = v70;
    v201 = v72;
    LOBYTE(v202) = v48 & 1;
    v203 = v75;
    v204 = 0x3FE6666666666666;
    v76 = sub_10001B520(&qword_1000B9D70);
    v77 = sub_10004EBF0();
    v78 = (uint64_t)v163;
    View.accessibilityHidden(_:)(1, v76, v77);
    sub_1000249D8(v70, v72, v48 & 1);
    v79 = swift_bridgeObjectRelease(v75);
    v80 = static Alignment.center.getter(v79);
    _FrameLayout.init(width:height:alignment:)(&v200, 0x4008000000000000, 0, 0, 1, v80, v81);
    v162 = v200;
    v161 = v201;
    v160 = v202;
    LOBYTE(v70) = v203;
    v82 = v204;
    v83 = v205;
    v84 = v172;
    v85 = v173;
    sub_10002CCB0(v172, v173, &qword_1000B9D28);
    v86 = (uint64_t)v164;
    sub_10002CCB0(v78, (uint64_t)v164, &qword_1000B9D08);
    v87 = v192;
    sub_10002CCB0(v85, v192, &qword_1000B9D28);
    v88 = (int *)sub_10001B520(&qword_1000BB408);
    v89 = v87 + v88[12];
    *(_QWORD *)v89 = 0;
    *(_BYTE *)(v89 + 8) = 1;
    *(_QWORD *)(v89 + 16) = v171;
    *(_BYTE *)(v89 + 24) = v170;
    *(_QWORD *)(v89 + 32) = v169;
    *(_BYTE *)(v89 + 40) = (_BYTE)v168;
    v90 = v166;
    *(_QWORD *)(v89 + 48) = v167;
    *(_QWORD *)(v89 + 56) = v90;
    sub_10002CCB0(v86, v87 + v88[16], &qword_1000B9D08);
    v91 = v87 + v88[20];
    *(_QWORD *)v91 = 0;
    *(_BYTE *)(v91 + 8) = 1;
    *(_QWORD *)(v91 + 16) = v162;
    *(_BYTE *)(v91 + 24) = v161;
    *(_QWORD *)(v91 + 32) = v160;
    *(_BYTE *)(v91 + 40) = v70;
    *(_QWORD *)(v91 + 48) = v82;
    *(_QWORD *)(v91 + 56) = v83;
    sub_10002CCF4(v78, &qword_1000B9D08);
    sub_10002CCF4(v84, &qword_1000B9D28);
    sub_10002CCF4(v86, &qword_1000B9D08);
    sub_10002CCF4(v173, &qword_1000B9D28);
    v92 = sub_10001B520(&qword_1000BB3C8);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v92 - 8) + 56))(v87, 0, 1, v92);
    sub_10002CB18(v87, (uint64_t)v191, &qword_1000BB3C0);
  }
  else
  {
    v93 = sub_10001B520(&qword_1000BB3C8);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v93 - 8) + 56))(v36, 1, 1, v93);
  }
  v193[0] = sub_100079084();
  v193[1] = v94;
  v95 = sub_10002ACB8();
  v96 = Text.init<A>(_:)(v193, &type metadata for String, v95);
  v98 = v97;
  v100 = v99;
  v102 = v101 & 1;
  v103 = static Font.footnote.getter(v96);
  v104 = Text.font(_:)(v103, v96, v98, v102, v100);
  v106 = v105;
  v108 = v107;
  v110 = v109;
  swift_release(v103);
  LOBYTE(v103) = v108 & 1;
  sub_1000249D8(v96, v98, v102);
  v111 = swift_bridgeObjectRelease(v100);
  v112 = static Font.Weight.heavy.getter(v111);
  v113 = Text.fontWeight(_:)(*(_QWORD *)&v112, 0, v104, v106, v108 & 1, v110);
  v115 = v114;
  v117 = v116;
  v119 = v118 & 1;
  sub_1000249D8(v104, v106, v103);
  v120 = swift_bridgeObjectRelease(v110);
  v121 = static Color.pink.getter(v120);
  v122 = Text.foregroundColor(_:)(v121, v113, v115, v119, v117);
  v124 = v123;
  LOBYTE(v106) = v125;
  v127 = v126;
  swift_release(v121);
  LOBYTE(v121) = v106 & 1;
  sub_1000249D8(v113, v115, v119);
  swift_bridgeObjectRelease(v117);
  v128 = enum case for Text.Case.uppercase(_:);
  v129 = type metadata accessor for Text.Case(0);
  v130 = *(_QWORD *)(v129 - 8);
  v131 = (uint64_t)v177;
  (*(void (**)(char *, uint64_t, uint64_t))(v130 + 104))(v177, v128, v129);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v130 + 56))(v131, 0, 1, v129);
  v132 = swift_getKeyPath(&unk_10008C310);
  v133 = v178;
  sub_10002CCB0(v131, (uint64_t)v178 + *(int *)(v175 + 28), &qword_1000BB398);
  *v133 = v132;
  v134 = (uint64_t)v179;
  sub_10002CCB0((uint64_t)v133, (uint64_t)&v179[*(int *)(v174 + 36)], &qword_1000BB390);
  *(_QWORD *)v134 = v122;
  *(_QWORD *)(v134 + 8) = v124;
  *(_BYTE *)(v134 + 16) = v121;
  *(_QWORD *)(v134 + 24) = v127;
  sub_100024770(v122, v124, v121);
  swift_bridgeObjectRetain(v127);
  sub_10002CCF4((uint64_t)v133, &qword_1000BB390);
  sub_10002CCF4(v131, &qword_1000BB398);
  sub_1000249D8(v122, v124, v121);
  swift_bridgeObjectRelease(v127);
  v135 = swift_getKeyPath(&unk_10008C2B0);
  v136 = v181;
  sub_10002CCB0(v134, v181, &qword_1000BB3A0);
  v137 = v136 + *(int *)(v176 + 36);
  *(_QWORD *)v137 = v135;
  *(_QWORD *)(v137 + 8) = 1;
  *(_BYTE *)(v137 + 16) = 0;
  sub_10002CCF4(v134, &qword_1000BB3A0);
  v138 = v188;
  v139 = v187;
  v140 = v189;
  (*(void (**)(char *, _QWORD, uint64_t))(v188 + 104))(v187, enum case for Text.TruncationMode.tail(_:), v189);
  v141 = swift_getKeyPath(&unk_10008C340);
  v142 = v182;
  v143 = (uint64_t)v180;
  v144 = (uint64_t *)&v180[*(int *)(v182 + 36)];
  v145 = sub_10001B520(&qword_1000BB3D0);
  (*(void (**)(char *, char *, uint64_t))(v138 + 16))((char *)v144 + *(int *)(v145 + 28), v139, v140);
  *v144 = v141;
  sub_10002CCB0(v136, v143, &qword_1000BB3A8);
  (*(void (**)(char *, uint64_t))(v138 + 8))(v139, v140);
  sub_10002CCF4(v136, &qword_1000BB3A8);
  v146 = sub_10004EA4C();
  v147 = v185;
  View.widgetAccentable(_:)(1, v142, v146);
  sub_10002CCF4(v143, &qword_1000BB3B0);
  v148 = v184;
  v149 = v183;
  v150 = v186;
  (*(void (**)(char *, char *, uint64_t))(v184 + 32))(v183, v147, v186);
  v151 = (uint64_t)v191;
  v152 = v192;
  sub_10002CCB0((uint64_t)v191, v192, &qword_1000BB3C0);
  v153 = *(void (**)(char *, char *, uint64_t))(v148 + 16);
  v153(v147, v149, v150);
  v154 = v190;
  sub_10002CCB0(v152, v190, &qword_1000BB3C0);
  v155 = sub_10001B520(&qword_1000BB400);
  v153((char *)(v154 + *(int *)(v155 + 48)), v147, v150);
  v156 = v154 + *(int *)(v155 + 64);
  *(_QWORD *)v156 = 0;
  *(_BYTE *)(v156 + 8) = 1;
  v157 = *(void (**)(char *, uint64_t))(v148 + 8);
  v157(v149, v150);
  sub_10002CCF4(v151, &qword_1000BB3C0);
  v157(v147, v150);
  return sub_10002CCF4(v152, &qword_1000BB3C0);
}

uint64_t sub_10004E780()
{
  id *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;

  v1 = type metadata accessor for AccessibilityChildBehavior(0);
  v2 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  v4 = (char *)&v13 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_10001B520(&qword_1000BB348);
  v6 = __chkstk_darwin(v5);
  v8 = (char *)&v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)v8 = static HorizontalAlignment.leading.getter(v6);
  *((_QWORD *)v8 + 1) = 0;
  v8[16] = 1;
  v9 = sub_10001B520(&qword_1000BB350);
  v10 = sub_10004D398(v0, (uint64_t)&v8[*(int *)(v9 + 44)]);
  static AccessibilityChildBehavior.combine.getter(v10);
  v11 = sub_10002CE94(&qword_1000BB358, &qword_1000BB348, (uint64_t)&protocol conformance descriptor for VStack<A>);
  View.accessibilityElement(children:)(v4, v5, v11);
  (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  return sub_10002CCF4((uint64_t)v8, &qword_1000BB348);
}

void sub_10004E8BC(double *a1@<X8>)
{
  *a1 = EnvironmentValues.minimumScaleFactor.getter();
}

uint64_t sub_10004E8E4(double *a1)
{
  return EnvironmentValues.minimumScaleFactor.setter(*a1);
}

uint64_t sub_10004E908()
{
  return EnvironmentValues.textCase.getter();
}

uint64_t sub_10004E928(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v6;

  v2 = sub_10001B520(&qword_1000BB398);
  __chkstk_darwin(v2);
  v4 = (char *)&v6 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10002CCB0(a1, (uint64_t)v4, &qword_1000BB398);
  return EnvironmentValues.textCase.setter(v4);
}

uint64_t sub_10004E9AC()
{
  return EnvironmentValues.truncationMode.getter();
}

uint64_t sub_10004E9CC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v7;

  v2 = type metadata accessor for Text.TruncationMode(0);
  __chkstk_darwin(v2);
  v4 = (char *)&v7 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t))(v5 + 16))(v4, a1);
  return EnvironmentValues.truncationMode.setter(v4);
}

unint64_t sub_10004EA4C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000BB3D8;
  if (!qword_1000BB3D8)
  {
    v1 = sub_10001B560(&qword_1000BB3B0);
    sub_10004EAD0();
    sub_10002CE94(&qword_1000BB3F8, &qword_1000BB3D0, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000BB3D8);
  }
  return result;
}

unint64_t sub_10004EAD0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000BB3E0;
  if (!qword_1000BB3E0)
  {
    v1 = sub_10001B560(&qword_1000BB3A8);
    sub_10004EB54();
    sub_10002CE94(&qword_1000B9E00, &qword_1000B9E08, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000BB3E0);
  }
  return result;
}

unint64_t sub_10004EB54()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000BB3E8;
  if (!qword_1000BB3E8)
  {
    v1 = sub_10001B560(&qword_1000BB3A0);
    sub_10002CE94(&qword_1000BB3F0, &qword_1000BB390, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000BB3E8);
  }
  return result;
}

unint64_t sub_10004EBF0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000B9D78;
  if (!qword_1000B9D78)
  {
    v1 = sub_10001B560(&qword_1000B9D70);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000B9D78);
  }
  return result;
}

uint64_t sub_10004EC54(uint64_t a1)
{
  return sub_10004EC78(a1, &qword_1000BB348, &qword_1000BB358, (uint64_t)&protocol conformance descriptor for VStack<A>, (uint64_t)&opaque type descriptor for <<opaque return type of View.accessibilityElement(children:)>>);
}

uint64_t sub_10004EC78(uint64_t a1, uint64_t *a2, unint64_t *a3, uint64_t a4, uint64_t a5)
{
  _QWORD v10[2];

  v10[0] = sub_10001B560(a2);
  v10[1] = sub_10002CE94(a3, a2, a4);
  return swift_getOpaqueTypeConformance2(v10, a5, 1);
}

void sub_10004ECE8()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  id v5;
  unint64_t v6;
  id v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  uint64_t v23;
  __int128 v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;

  v1 = type metadata accessor for NSFastEnumerationIterator(0);
  v2 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  v4 = (char *)&v20 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = objc_msgSend(v0, "items");
  v6 = (unint64_t)objc_msgSend(v5, "count");
  v27 = _swiftEmptyArrayStorage;
  specialized ContiguousArray.reserveCapacity(_:)(v6);
  v7 = v5;
  NSOrderedSet.makeIterator()();

  if ((v6 & 0x8000000000000000) != 0)
  {
    __break(1u);
LABEL_10:
    __break(1u);
    return;
  }
  v21 = v2;
  if (v6)
  {
    v8 = sub_100033F20();
    do
    {
      dispatch thunk of IteratorProtocol.next()(&v24, v1, v8);
      if (!v25)
        goto LABEL_10;
      sub_100033FBC((uint64_t)&v24, (uint64_t)&v22);
      v9 = sub_10001B520(&qword_1000BA270);
      swift_dynamicCast(&v26, &v22, (char *)&type metadata for Any + 8, v9, 7);
      v10 = sub_10001DA60(&v24);
      v11 = v26;
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v10);
      v12 = v27[2];
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v12);
      v13 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v12, v11);
      specialized ContiguousArray._endMutation()(v13);
    }
    while (--v6);
  }
  v14 = sub_100033F20();
  dispatch thunk of IteratorProtocol.next()(&v22, v1, v14);
  while (v23)
  {
    sub_100033F68(&v22, &v24);
    sub_100033FBC((uint64_t)&v24, (uint64_t)&v22);
    v15 = sub_10001B520(&qword_1000BA270);
    swift_dynamicCast(&v26, &v22, (char *)&type metadata for Any + 8, v15, 7);
    v16 = sub_10001DA60(&v24);
    v17 = v26;
    specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v16);
    v18 = v27[2];
    specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v18);
    v19 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v18, v17);
    specialized ContiguousArray._endMutation()(v19);
    dispatch thunk of IteratorProtocol.next()(&v22, v1, v14);
  }
  (*(void (**)(char *, uint64_t))(v21 + 8))(v4, v1);
  sub_10002F7D0((uint64_t)&v22);

}

UIColor __swiftcall UIColor.init(hex:)(Swift::String hex)
{
  void *object;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  UIColor result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned __int8 *v9;
  char v10;
  char v11;
  uint64_t v12;
  unsigned __int8 *v13;
  int v14;
  unsigned __int8 v15;
  BOOL v16;
  uint64_t v17;
  unsigned __int8 *v18;
  int v19;
  unsigned __int8 v20;
  void ***p_aBlock;
  int v22;
  unsigned __int8 v23;
  id v24;
  id v25;
  void *v26;
  char v27;
  void **aBlock;
  uint64_t v29;
  id (*v30)(uint64_t, void *);
  void *v31;
  id (*v32)();
  uint64_t v33;

  object = hex._object;
  v2 = sub_10004F2F4(hex._countAndFlagsBits, (unint64_t)hex._object);
  v4 = v3;
  result.super.isa = (Class)swift_bridgeObjectRelease(object);
  v6 = HIBYTE(v4) & 0xF;
  v7 = v2 & 0xFFFFFFFFFFFFLL;
  if ((v4 & 0x2000000000000000) != 0)
    v8 = HIBYTE(v4) & 0xF;
  else
    v8 = v2 & 0xFFFFFFFFFFFFLL;
  if (!v8)
  {
    swift_bridgeObjectRelease(v4);
    goto LABEL_51;
  }
  if ((v4 & 0x1000000000000000) != 0)
  {
    LODWORD(v2) = sub_10004F794(v2, v4, 16);
    v11 = v27;
    goto LABEL_48;
  }
  if ((v4 & 0x2000000000000000) == 0)
  {
    if ((v2 & 0x1000000000000000) != 0)
      v9 = (unsigned __int8 *)((v4 & 0xFFFFFFFFFFFFFFFLL) + 32);
    else
      v9 = (unsigned __int8 *)_StringObject.sharedUTF8.getter(v2, v4);
    LODWORD(v2) = sub_10004F890(v9, v7, 16);
    v11 = v10 & 1;
LABEL_48:
    swift_bridgeObjectRelease(v4);
    if ((v11 & 1) == 0)
      return (UIColor)objc_msgSend(objc_allocWithZone((Class)swift_getObjCClassFromMetadata()), "initWithRed:green:blue:alpha:", (double)BYTE3(v2) / 255.0, (double)BYTE2(v2) / 255.0, (double)BYTE1(v2) / 255.0, (double)v2 / 255.0);
LABEL_51:
    v25 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
    v32 = sub_10004F718;
    v33 = 0;
    aBlock = _NSConcreteStackBlock;
    v29 = 1107296256;
    v30 = sub_10004F744;
    v31 = &unk_1000AC9B8;
    v26 = _Block_copy(&aBlock);
    v24 = objc_msgSend(v25, "initWithDynamicProvider:", v26);
    _Block_release(v26);
    return (UIColor)v24;
  }
  aBlock = (void **)v2;
  v29 = v4 & 0xFFFFFFFFFFFFFFLL;
  if (v2 == 43)
  {
    if (v6)
    {
      v17 = v6 - 1;
      if (v17)
      {
        v2 = 0;
        v18 = (unsigned __int8 *)&aBlock + 1;
        while (1)
        {
          v19 = *v18;
          v20 = v19 - 48;
          if ((v19 - 48) >= 0xA)
          {
            if ((v19 - 65) < 6)
            {
              v20 = v19 - 55;
            }
            else
            {
              if ((v19 - 97) > 5)
                goto LABEL_47;
              v20 = v19 - 87;
            }
          }
          if ((unint64_t)(v2 - 0x800000000000000) >> 60 != 15)
            break;
          v16 = __OFADD__(16 * v2, v20);
          v2 = 16 * v2 + v20;
          if (v16)
            break;
          ++v18;
          if (!--v17)
          {
LABEL_46:
            v11 = 0;
            goto LABEL_48;
          }
        }
      }
      goto LABEL_47;
    }
  }
  else
  {
    if (v2 != 45)
    {
      if (v6)
      {
        v2 = 0;
        p_aBlock = &aBlock;
        while (1)
        {
          v22 = *(unsigned __int8 *)p_aBlock;
          v23 = v22 - 48;
          if ((v22 - 48) >= 0xA)
          {
            if ((v22 - 65) < 6)
            {
              v23 = v22 - 55;
            }
            else
            {
              if ((v22 - 97) > 5)
                goto LABEL_47;
              v23 = v22 - 87;
            }
          }
          if ((unint64_t)(v2 - 0x800000000000000) >> 60 != 15)
            break;
          v16 = __OFADD__(16 * v2, v23);
          v2 = 16 * v2 + v23;
          if (v16)
            break;
          p_aBlock = (void ***)((char *)p_aBlock + 1);
          if (!--v6)
            goto LABEL_46;
        }
      }
      goto LABEL_47;
    }
    if (v6)
    {
      v12 = v6 - 1;
      if (v12)
      {
        v2 = 0;
        v13 = (unsigned __int8 *)&aBlock + 1;
        while (1)
        {
          v14 = *v13;
          v15 = v14 - 48;
          if ((v14 - 48) >= 0xA)
          {
            if ((v14 - 65) < 6)
            {
              v15 = v14 - 55;
            }
            else
            {
              if ((v14 - 97) > 5)
                break;
              v15 = v14 - 87;
            }
          }
          if ((unint64_t)(v2 - 0x800000000000000) >> 60 != 15)
            break;
          v16 = __OFSUB__(16 * v2, v15);
          v2 = 16 * v2 - v15;
          if (v16)
            break;
          ++v13;
          if (!--v12)
            goto LABEL_46;
        }
      }
LABEL_47:
      LODWORD(v2) = 0;
      v11 = 1;
      goto LABEL_48;
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

UIColor __swiftcall UIColor.init(hex:)(Swift::Int hex)
{
  return (UIColor)objc_msgSend(objc_allocWithZone((Class)((uint64_t (*)())swift_getObjCClassFromMetadata)()), "initWithRed:green:blue:alpha:", (double)BYTE3(hex) / 255.0, (double)BYTE2(hex) / 255.0, (double)BYTE1(hex) / 255.0, (double)hex / 255.0);
}

uint64_t sub_10004F2F4(uint64_t a1, unint64_t a2)
{
  Swift::String v4;
  Swift::Bool v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  Swift::String v42;
  uint64_t v44;
  unint64_t v45;

  v4._countAndFlagsBits = 35;
  v4._object = (void *)0xE100000000000000;
  v5 = String.hasPrefix(_:)(v4);
  swift_bridgeObjectRetain(a2);
  if (v5)
  {
    v6 = sub_10004FFC8(1uLL, a1, a2);
    v8 = v7;
    v10 = v9;
    v12 = v11;
    swift_bridgeObjectRelease(a2);
    a1 = static String._fromSubstring(_:)(v6, v8, v10, v12);
    a2 = v13;
    swift_bridgeObjectRelease(v12);
  }
  if (String.count.getter(a1, a2) != 8)
  {
    if (String.count.getter(a1, a2) == 6)
    {
      v44 = a1;
      v45 = a2;
LABEL_10:
      v42._countAndFlagsBits = 17990;
      v42._object = (void *)0xE200000000000000;
      String.append(_:)(v42);
      return v44;
    }
    if (String.count.getter(a1, a2) == 4)
    {
      v14 = String.index(_:offsetBy:)(15, 0, a1, a2);
      v15 = String.subscript.getter(v14, a1, a2);
      v17 = v16;
      v18 = String.index(_:offsetBy:)(15, 1, a1, a2);
      v19 = String.subscript.getter(v18, a1, a2);
      v21 = v20;
      v22 = String.index(_:offsetBy:)(15, 2, a1, a2);
      v23 = String.subscript.getter(v22, a1, a2);
      v25 = v24;
      v26 = String.index(_:offsetBy:)(15, 3, a1, a2);
      v27 = String.subscript.getter(v26, a1, a2);
      v29 = v28;
      swift_bridgeObjectRelease(a2);
      v44 = 0;
      v45 = 0xE000000000000000;
      _StringGuts.grow(_:)(16);
      Character.write<A>(to:)(&v44, v15, v17, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
      Character.write<A>(to:)(&v44, v15, v17, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
      swift_bridgeObjectRelease(v17);
      Character.write<A>(to:)(&v44, v19, v21, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
      Character.write<A>(to:)(&v44, v19, v21, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
      swift_bridgeObjectRelease(v21);
      Character.write<A>(to:)(&v44, v23, v25, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
      Character.write<A>(to:)(&v44, v23, v25, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
      swift_bridgeObjectRelease(v25);
      Character.write<A>(to:)(&v44, v27, v29, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
      Character.write<A>(to:)(&v44, v27, v29, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
      swift_bridgeObjectRelease(v29);
      return v44;
    }
    if (String.count.getter(a1, a2) == 3)
    {
      v30 = String.index(_:offsetBy:)(15, 0, a1, a2);
      v31 = String.subscript.getter(v30, a1, a2);
      v33 = v32;
      v34 = String.index(_:offsetBy:)(15, 1, a1, a2);
      v35 = String.subscript.getter(v34, a1, a2);
      v37 = v36;
      v38 = String.index(_:offsetBy:)(15, 2, a1, a2);
      v39 = String.subscript.getter(v38, a1, a2);
      v41 = v40;
      swift_bridgeObjectRelease(a2);
      v44 = 0;
      v45 = 0xE000000000000000;
      Character.write<A>(to:)(&v44, v31, v33, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
      Character.write<A>(to:)(&v44, v31, v33, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
      swift_bridgeObjectRelease(v33);
      Character.write<A>(to:)(&v44, v35, v37, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
      Character.write<A>(to:)(&v44, v35, v37, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
      swift_bridgeObjectRelease(v37);
      Character.write<A>(to:)(&v44, v39, v41, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
      Character.write<A>(to:)(&v44, v39, v41, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
      swift_bridgeObjectRelease(v41);
      goto LABEL_10;
    }
  }
  return a1;
}

id sub_10004F718()
{
  return objc_msgSend((id)objc_opt_self(UIColor), "clearColor");
}

id sub_10004F744(uint64_t a1, void *a2)
{
  uint64_t v3;
  uint64_t (*v4)(void);
  id v5;
  void *v6;

  v4 = *(uint64_t (**)(void))(a1 + 32);
  v3 = *(_QWORD *)(a1 + 40);
  swift_retain(v3);
  v5 = a2;
  v6 = (void *)v4();
  swift_release(v3);

  return v6;
}

unsigned __int8 *sub_10004F794(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unsigned __int8 *v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unsigned __int8 *v12;
  uint64_t v14;
  uint64_t v15;

  v14 = a1;
  v15 = a2;
  swift_bridgeObjectRetain(a2);
  v4 = String.init<A>(_:)(&v14, &type metadata for String, &protocol witness table for String, &protocol witness table for String);
  v6 = v4;
  v7 = v5;
  if ((v5 & 0x1000000000000000) == 0)
  {
    if ((v5 & 0x2000000000000000) == 0)
      goto LABEL_3;
LABEL_6:
    v9 = HIBYTE(v7) & 0xF;
    v14 = v6;
    v15 = v7 & 0xFFFFFFFFFFFFFFLL;
    v8 = (unsigned __int8 *)&v14;
    goto LABEL_7;
  }
  v6 = sub_10004FB0C(v4, v5);
  v11 = v10;
  swift_bridgeObjectRelease(v7);
  v7 = v11;
  if ((v11 & 0x2000000000000000) != 0)
    goto LABEL_6;
LABEL_3:
  if ((v6 & 0x1000000000000000) != 0)
  {
    v8 = (unsigned __int8 *)((v7 & 0xFFFFFFFFFFFFFFFLL) + 32);
    v9 = v6 & 0xFFFFFFFFFFFFLL;
  }
  else
  {
    v8 = (unsigned __int8 *)_StringObject.sharedUTF8.getter(v6, v7);
  }
LABEL_7:
  v12 = sub_10004F890(v8, v9, a3);
  swift_bridgeObjectRelease(v7);
  return v12;
}

uint64_t sub_10004F878(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10004F888(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

unsigned __int8 *sub_10004F890(unsigned __int8 *result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  int v4;
  uint64_t v5;
  unsigned __int8 v6;
  unsigned __int8 v7;
  unsigned __int8 v8;
  uint64_t v9;
  unsigned __int8 *i;
  unsigned int v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int8 v16;
  unsigned __int8 v17;
  unsigned __int8 v18;
  unsigned __int8 *v19;
  unsigned int v20;
  char v21;
  uint64_t v22;
  unsigned __int8 v23;
  unsigned __int8 v24;
  unsigned __int8 v25;
  uint64_t v26;
  unsigned int v27;
  char v28;
  uint64_t v29;

  v3 = a2;
  v4 = *result;
  if (v4 != 43)
  {
    if (v4 == 45)
    {
      if (a2 >= 1)
      {
        v5 = a2 - 1;
        if (a2 != 1)
        {
          v6 = a3 + 48;
          v7 = a3 + 55;
          v8 = a3 + 87;
          if (a3 > 10)
          {
            v6 = 58;
          }
          else
          {
            v8 = 97;
            v7 = 65;
          }
          if (result)
          {
            v9 = 0;
            for (i = result + 1; ; ++i)
            {
              v11 = *i;
              if (v11 < 0x30 || v11 >= v6)
              {
                if (v11 < 0x41 || v11 >= v7)
                {
                  v13 = 0;
                  if (v11 < 0x61 || v11 >= v8)
                    return (unsigned __int8 *)v13;
                  v12 = -87;
                }
                else
                {
                  v12 = -55;
                }
              }
              else
              {
                v12 = -48;
              }
              v14 = v9 * a3;
              if ((unsigned __int128)(v9 * (__int128)a3) >> 64 != (v9 * a3) >> 63)
                return 0;
              v9 = v14 - (v11 + v12);
              if (__OFSUB__(v14, (v11 + v12)))
                return 0;
              if (!--v5)
                return (unsigned __int8 *)v9;
            }
          }
          return 0;
        }
        return 0;
      }
      __break(1u);
      goto LABEL_66;
    }
    if (a2)
    {
      v23 = a3 + 48;
      v24 = a3 + 55;
      v25 = a3 + 87;
      if (a3 > 10)
      {
        v23 = 58;
      }
      else
      {
        v25 = 97;
        v24 = 65;
      }
      if (result)
      {
        v26 = 0;
        do
        {
          v27 = *result;
          if (v27 < 0x30 || v27 >= v23)
          {
            if (v27 < 0x41 || v27 >= v24)
            {
              v13 = 0;
              if (v27 < 0x61 || v27 >= v25)
                return (unsigned __int8 *)v13;
              v28 = -87;
            }
            else
            {
              v28 = -55;
            }
          }
          else
          {
            v28 = -48;
          }
          v29 = v26 * a3;
          if ((unsigned __int128)(v26 * (__int128)a3) >> 64 != (v26 * a3) >> 63)
            return 0;
          v26 = v29 + (v27 + v28);
          if (__OFADD__(v29, (v27 + v28)))
            return 0;
          ++result;
          --v3;
        }
        while (v3);
        return (unsigned __int8 *)(v29 + (v27 + v28));
      }
      return 0;
    }
    return 0;
  }
  if (a2 < 1)
  {
LABEL_66:
    __break(1u);
    return result;
  }
  v15 = a2 - 1;
  if (a2 == 1)
    return 0;
  v16 = a3 + 48;
  v17 = a3 + 55;
  v18 = a3 + 87;
  if (a3 > 10)
  {
    v16 = 58;
  }
  else
  {
    v18 = 97;
    v17 = 65;
  }
  if (!result)
    return 0;
  v9 = 0;
  v19 = result + 1;
  do
  {
    v20 = *v19;
    if (v20 < 0x30 || v20 >= v16)
    {
      if (v20 < 0x41 || v20 >= v17)
      {
        v13 = 0;
        if (v20 < 0x61 || v20 >= v18)
          return (unsigned __int8 *)v13;
        v21 = -87;
      }
      else
      {
        v21 = -55;
      }
    }
    else
    {
      v21 = -48;
    }
    v22 = v9 * a3;
    if ((unsigned __int128)(v9 * (__int128)a3) >> 64 != (v9 * a3) >> 63)
      return 0;
    v9 = v22 + (v20 + v21);
    if (__OFADD__(v22, (v20 + v21)))
      return 0;
    ++v19;
    --v15;
  }
  while (v15);
  return (unsigned __int8 *)v9;
}

uint64_t sub_10004FB0C(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;

  v2 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000) == 0)
    v2 = a1;
  v3 = 7;
  if (((a2 >> 60) & ((a1 & 0x800000000000000) == 0)) != 0)
    v3 = 11;
  v4 = String.subscript.getter(15, v3 | (v2 << 16), a1, a2);
  v6 = v5;
  v9 = sub_10004FB88(v4, v7, v8, v5);
  swift_bridgeObjectRelease(v6);
  return v9;
}

uint64_t sub_10004FB88(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  unint64_t v5;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD v15[5];

  v5 = a3;
  if ((a4 & 0x1000000000000000) != 0)
  {
    v12 = sub_10004FCCC(a1, a2, a3, a4);
    if (v12)
    {
      v9 = v12;
      v8 = (unint64_t)sub_10006B304(v12, 0);
      v5 = sub_10004FDB8((unint64_t)v15, v8 + 32, v9, a1, a2, v5, a4);
      v13 = v15[3];
      swift_bridgeObjectRetain(a4);
      swift_bridgeObjectRelease(v13);
      if (v5 != v9)
      {
        __break(1u);
        goto LABEL_11;
      }
    }
    else
    {
      v8 = (unint64_t)_swiftEmptyArrayStorage;
    }
    v14 = static String._uncheckedFromUTF8(_:)(v8 + 32, *(_QWORD *)(v8 + 16));
    swift_release(v8);
    return v14;
  }
  else
  {
    v8 = a1 >> 16;
    v9 = a2 >> 16;
    if ((a4 & 0x2000000000000000) == 0)
    {
      if ((a3 & 0x1000000000000000) != 0)
      {
        v10 = (a4 & 0xFFFFFFFFFFFFFFFLL) + 32;
LABEL_5:
        v10 += v8;
        return static String._uncheckedFromUTF8(_:)(v10, v9 - v8);
      }
LABEL_11:
      v10 = _StringObject.sharedUTF8.getter(v5, a4);
      if (!v10)
        return static String._uncheckedFromUTF8(_:)(v10, v9 - v8);
      goto LABEL_5;
    }
    v15[0] = a3;
    v15[1] = a4 & 0xFFFFFFFFFFFFFFLL;
    return static String._uncheckedFromUTF8(_:)((char *)v15 + v8, v9 - v8);
  }
}

unint64_t sub_10004FCCC(unint64_t result, unint64_t a2, unint64_t a3, unint64_t a4)
{
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;

  v7 = result;
  v8 = (a3 >> 59) & 1;
  if ((a4 & 0x1000000000000000) == 0)
    LOBYTE(v8) = 1;
  v9 = 4 << v8;
  if ((result & 0xC) == 4 << v8)
  {
    result = sub_10006B368(result, a3, a4);
    v7 = result;
  }
  if ((a2 & 0xC) == v9)
  {
    result = sub_10006B368(a2, a3, a4);
    a2 = result;
    if ((a4 & 0x1000000000000000) == 0)
      return (a2 >> 16) - (v7 >> 16);
  }
  else if ((a4 & 0x1000000000000000) == 0)
  {
    return (a2 >> 16) - (v7 >> 16);
  }
  v10 = HIBYTE(a4) & 0xF;
  if ((a4 & 0x2000000000000000) == 0)
    v10 = a3 & 0xFFFFFFFFFFFFLL;
  if (v10 < v7 >> 16)
  {
    __break(1u);
  }
  else if (v10 >= a2 >> 16)
  {
    return String.UTF8View._foreignDistance(from:to:)(v7, a2, a3, a4);
  }
  __break(1u);
  return result;
}

unint64_t sub_10004FDB8(unint64_t result, uint64_t a2, uint64_t a3, unint64_t a4, unint64_t a5, unint64_t a6, unint64_t a7)
{
  _QWORD *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  char v19;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v26;
  unint64_t v27;
  _QWORD v28[2];

  v9 = (_QWORD *)result;
  if (!a2)
    goto LABEL_5;
  if (!a3)
  {
    v12 = a4;
    v11 = 0;
    goto LABEL_33;
  }
  if (a3 < 0)
    goto LABEL_36;
  v10 = a5 >> 14;
  v27 = a4 >> 14;
  if (a4 >> 14 == a5 >> 14)
  {
LABEL_5:
    v11 = 0;
    v12 = a4;
LABEL_33:
    *v9 = a4;
    v9[1] = a5;
    v9[2] = a6;
    v9[3] = a7;
    v9[4] = v12;
    return v11;
  }
  v11 = 0;
  v14 = (a6 >> 59) & 1;
  if ((a7 & 0x1000000000000000) == 0)
    LOBYTE(v14) = 1;
  v15 = 4 << v14;
  v21 = (a7 & 0xFFFFFFFFFFFFFFFLL) + 32;
  v22 = a7 & 0xFFFFFFFFFFFFFFLL;
  v16 = HIBYTE(a7) & 0xF;
  if ((a7 & 0x2000000000000000) == 0)
    v16 = a6 & 0xFFFFFFFFFFFFLL;
  v23 = v16;
  v26 = a3 - 1;
  v12 = a4;
  while (1)
  {
    v17 = v12 & 0xC;
    result = v12;
    if (v17 == v15)
      result = sub_10006B368(v12, a6, a7);
    if (result >> 14 < v27 || result >> 14 >= v10)
      break;
    if ((a7 & 0x1000000000000000) != 0)
    {
      result = String.UTF8View._foreignSubscript(position:)();
      v19 = result;
      if (v17 != v15)
        goto LABEL_23;
    }
    else
    {
      v18 = result >> 16;
      if ((a7 & 0x2000000000000000) != 0)
      {
        v28[0] = a6;
        v28[1] = v22;
        v19 = *((_BYTE *)v28 + v18);
        if (v17 != v15)
          goto LABEL_23;
      }
      else
      {
        result = v21;
        if ((a6 & 0x1000000000000000) == 0)
          result = _StringObject.sharedUTF8.getter(a6, a7);
        v19 = *(_BYTE *)(result + v18);
        if (v17 != v15)
        {
LABEL_23:
          if ((a7 & 0x1000000000000000) == 0)
            goto LABEL_24;
          goto LABEL_27;
        }
      }
    }
    result = sub_10006B368(v12, a6, a7);
    v12 = result;
    if ((a7 & 0x1000000000000000) == 0)
    {
LABEL_24:
      v12 = (v12 & 0xFFFFFFFFFFFF0000) + 65540;
      goto LABEL_29;
    }
LABEL_27:
    if (v23 <= v12 >> 16)
      goto LABEL_35;
    v12 = String.UTF8View._foreignIndex(after:)(v12, a6, a7);
LABEL_29:
    *(_BYTE *)(a2 + v11) = v19;
    if (v26 == v11)
    {
      v11 = a3;
      goto LABEL_33;
    }
    ++v11;
    if (v10 == v12 >> 14)
      goto LABEL_33;
  }
  __break(1u);
LABEL_35:
  __break(1u);
LABEL_36:
  __break(1u);
  return result;
}

unint64_t sub_10004FFC8(unint64_t result, uint64_t a2, unint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  char v6;

  if ((result & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else
  {
    if ((a3 & 0x2000000000000000) != 0)
      v3 = HIBYTE(a3) & 0xF;
    else
      v3 = a2 & 0xFFFFFFFFFFFFLL;
    v4 = 7;
    if (((a3 >> 60) & ((a2 & 0x800000000000000) == 0)) != 0)
      v4 = 11;
    v5 = v4 | (v3 << 16);
    result = String.index(_:offsetBy:limitedBy:)(15, result, v5, a2, a3);
    if ((v6 & 1) != 0)
      result = v5;
    if (4 * v3 >= result >> 14)
      return String.subscript.getter();
  }
  __break(1u);
  return result;
}

_QWORD *NTTodayResults.sectionsArray.getter()
{
  void *v0;
  id v1;
  id v2;
  uint64_t v3;
  _QWORD *v4;

  v1 = objc_msgSend(v0, "sections");
  v2 = objc_msgSend(v1, "array");

  v3 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v2, (char *)&type metadata for Any + 8);
  v4 = sub_1000500E8(v3);
  swift_bridgeObjectRelease(v3);
  return v4;
}

_QWORD *sub_1000500E8(uint64_t a1)
{
  uint64_t v2;
  _QWORD *result;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE v10[32];
  uint64_t v11;
  _QWORD *v12;

  v2 = *(_QWORD *)(a1 + 16);
  result = _swiftEmptyArrayStorage;
  if (v2)
  {
    v12 = _swiftEmptyArrayStorage;
    specialized ContiguousArray.reserveCapacity(_:)(v2);
    v4 = a1 + 32;
    do
    {
      sub_100033FBC(v4, (uint64_t)v10);
      v5 = sub_1000506D8();
      v6 = swift_dynamicCast(&v11, v10, (char *)&type metadata for Any + 8, v5, 7);
      v7 = v11;
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v6);
      v8 = v12[2];
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v8);
      v9 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v8, v7);
      specialized ContiguousArray._endMutation()(v9);
      v4 += 32;
      --v2;
    }
    while (v2);
    return v12;
  }
  return result;
}

uint64_t sub_1000501C0@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, char a6@<W5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD v23[5];

  v16 = sub_10001B520((uint64_t *)&unk_1000BC550);
  __chkstk_darwin(v16);
  v18 = (char *)&v23[-1] - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100030244(a4, (uint64_t)v23);
  if (a1)
  {
    v19 = type metadata accessor for Date(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 56))(v18, 1, 1, v19);
    a6 = 0;
  }
  else
  {
    sub_100050690(a7, (uint64_t)v18);
  }
  swift_bridgeObjectRetain(a5);
  swift_retain(a3);
  sub_100033378(a2, a3, v23, a5, a6 & 1, (uint64_t)v18, a8);
  v20 = type metadata accessor for Section(0);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 56))(a8, 0, 1, v20);
}

_QWORD *NTTodayResults.allItems.getter()
{
  void *v0;
  id v1;
  id v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  id v7;
  void *v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;

  v1 = objc_msgSend(v0, "sections");
  v2 = objc_msgSend(v1, "array");

  v3 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v2, (char *)&type metadata for Any + 8);
  v4 = (uint64_t)sub_1000500E8(v3);
  swift_bridgeObjectRelease(v3);
  if ((unint64_t)v4 >> 62)
    goto LABEL_29;
  v5 = *(_QWORD *)((v4 & 0xFFFFFFFFFFFFF8) + 0x10);
  while (v5)
  {
    v6 = 0;
    v23 = v4;
    v24 = v4 & 0xC000000000000001;
    v21 = v4 + 32;
    v22 = v4 & 0xFFFFFFFFFFFFFF8;
    while (1)
    {
      if (v24)
      {
        v7 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v6, v23);
      }
      else
      {
        if (v6 >= *(_QWORD *)(v22 + 16))
          goto LABEL_28;
        v7 = *(id *)(v21 + 8 * v6);
      }
      v8 = v7;
      if (__OFADD__(v6++, 1))
        break;
      v4 = v5;
      sub_10004ECE8();
      v11 = v10;
      if ((unint64_t)v10 >> 62)
      {
        if (v10 >= 0)
          v10 &= 0xFFFFFFFFFFFFFF8uLL;
        v12 = _CocoaArrayWrapper.endIndex.getter(v10);
        if (!v12)
          goto LABEL_4;
      }
      else
      {
        v12 = *(_QWORD *)((v10 & 0xFFFFFFFFFFFFF8) + 0x10);
        if (!v12)
          goto LABEL_4;
      }
      if (v12 < 1)
        goto LABEL_27;
      v13 = 0;
      do
      {
        if ((v11 & 0xC000000000000001) != 0)
        {
          v14 = specialized _ArrayBuffer._getElementSlowPath(_:)(v13, v11);
        }
        else
        {
          v14 = *(_QWORD *)(v11 + 8 * v13 + 32);
          swift_unknownObjectRetain(v14);
        }
        v15 = swift_unknownObjectRetain(v14);
        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v15);
        v17 = *(_QWORD *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x10);
        v16 = *(_QWORD *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x18);
        if (v17 >= v16 >> 1)
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v16 > 1);
        ++v13;
        v18 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v17, v14);
        specialized Array._endMutation()(v18);
        swift_unknownObjectRelease(v14);
      }
      while (v12 != v13);
LABEL_4:

      swift_bridgeObjectRelease(v11);
      if (v6 == v5)
      {
        swift_bridgeObjectRelease(v23);
        return _swiftEmptyArrayStorage;
      }
    }
    __break(1u);
LABEL_27:
    __break(1u);
LABEL_28:
    __break(1u);
LABEL_29:
    if (v4 < 0)
      v20 = v4;
    else
      v20 = v4 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v4);
    v5 = _CocoaArrayWrapper.endIndex.getter(v20);
    swift_bridgeObjectRelease(v4);
  }
  swift_bridgeObjectRelease(v4);
  return _swiftEmptyArrayStorage;
}

uint64_t sub_100050570(uint64_t result)
{
  _QWORD *v1;
  unint64_t v2;

  v2 = *(_QWORD *)((*v1 & 0xFFFFFFFFFFFFF8) + 0x18);
  if (result + 1 > (uint64_t)(v2 >> 1))
    return specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v2 > 1);
  return result;
}

void (*sub_10005059C(uint64_t **a1, unint64_t a2, uint64_t a3))(_QWORD *a1)
{
  uint64_t *v6;

  v6 = (uint64_t *)malloc(0x28uLL);
  *a1 = v6;
  v6[4] = (uint64_t)sub_10005061C(v6, a2, a3);
  return sub_1000505F0;
}

void sub_1000505F0(_QWORD *a1)
{
  void *v1;

  v1 = (void *)*a1;
  (*(void (**)(_QWORD))(*a1 + 32))(*a1);
  free(v1);
}

uint64_t *sub_10005061C(uint64_t *result, unint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v4;

  v3 = result;
  if ((a3 & 0xC000000000000001) != 0)
  {
    v4 = specialized _ArrayBuffer._getElementSlowPath(_:)(a2, a3);
    goto LABEL_5;
  }
  if ((a2 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (*(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10) > a2)
  {
    v4 = swift_unknownObjectRetain(*(_QWORD *)(a3 + 8 * a2 + 32));
LABEL_5:
    *v3 = v4;
    return (uint64_t *)sub_100050688;
  }
  __break(1u);
  return result;
}

uint64_t sub_100050688(_QWORD *a1)
{
  return swift_unknownObjectRelease(*a1);
}

uint64_t sub_100050690(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10001B520((uint64_t *)&unk_1000BC550);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

unint64_t sub_1000506D8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000BBD00;
  if (!qword_1000BBD00)
  {
    v1 = objc_opt_self(NTSection);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_1000BBD00);
  }
  return result;
}

char *sub_100050714(char *a1, char **a2, int *a3)
{
  int v3;
  char *v4;
  char *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int (*v14)(const void *, uint64_t, uint64_t);
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  int *v31;
  uint64_t v32;
  char *v33;
  const void *v34;
  id v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  _QWORD *v41;
  uint64_t v42;
  char *v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  void *v49;
  void *v50;
  void *v51;
  void *v52;
  char *v53;
  uint64_t v54;
  char v55;
  id v56;
  id v57;
  id v58;
  id v59;
  uint64_t v60;
  char *v61;
  uint64_t *v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v70;
  char *__dst;
  unsigned int (*v72)(const void *, uint64_t, uint64_t);
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  int *v77;

  v3 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  v4 = *a2;
  *(_QWORD *)a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    v7 = &v4[(v3 + 16) & ~(unint64_t)v3];
    swift_retain(v4);
  }
  else
  {
    v7 = a1;
    v8 = a2[1];
    v9 = a2[2];
    *((_QWORD *)a1 + 1) = v8;
    *((_QWORD *)a1 + 2) = v9;
    a1[24] = *((_BYTE *)a2 + 24);
    v76 = type metadata accessor for Section(0);
    v10 = *(int *)(v76 + 32);
    __dst = &v7[v10];
    v11 = (char *)a2 + v10;
    v12 = type metadata accessor for URL(0);
    v13 = *(_QWORD *)(v12 - 8);
    v14 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v13 + 48);
    v15 = v4;
    v16 = v8;
    swift_bridgeObjectRetain(v9);
    v72 = v14;
    if (v14(v11, 1, v12))
    {
      v17 = sub_10001B520(&qword_1000B93A0);
      memcpy(__dst, v11, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v13 + 16))(__dst, v11, v12);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v13 + 56))(__dst, 0, 1, v12);
    }
    v18 = v13;
    v19 = *(int *)(v76 + 36);
    v20 = &v7[v19];
    v21 = (char *)a2 + v19;
    v22 = type metadata accessor for Date(0);
    v23 = *(_QWORD *)(v22 - 8);
    v74 = v12;
    v70 = v18;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v23 + 48))(v21, 1, v22))
    {
      v24 = sub_10001B520((uint64_t *)&unk_1000BC550);
      memcpy(v20, v21, *(_QWORD *)(*(_QWORD *)(v24 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v23 + 16))(v20, v21, v22);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v23 + 56))(v20, 0, 1, v22);
    }
    v77 = a3;
    v25 = a3[5];
    v26 = &v7[v25];
    v27 = (uint64_t)a2 + v25;
    v28 = *(char **)((char *)a2 + v25);
    v29 = *(uint64_t *)((char *)a2 + v25 + 8);
    *(_QWORD *)v26 = v28;
    *((_QWORD *)v26 + 1) = v29;
    v30 = *(uint64_t *)((char *)a2 + v25 + 16);
    *((_QWORD *)v26 + 2) = v30;
    v26[24] = *((_BYTE *)a2 + v25 + 24);
    v31 = (int *)type metadata accessor for TodayContent(0);
    v32 = v31[8];
    v33 = &v26[v32];
    v34 = (const void *)(v27 + v32);
    v35 = v28;
    swift_bridgeObjectRetain(v29);
    swift_unknownObjectRetain(v30);
    if (v72(v34, 1, v74))
    {
      v36 = sub_10001B520(&qword_1000B93A0);
      memcpy(v33, v34, *(_QWORD *)(*(_QWORD *)(v36 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, const void *, uint64_t))(v70 + 16))(v33, v34, v74);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v70 + 56))(v33, 0, 1, v74);
    }
    v37 = v31[9];
    v38 = *(_QWORD *)(v27 + v37);
    *(_QWORD *)&v26[v37] = v38;
    v39 = v31[10];
    v40 = &v26[v39];
    v41 = (_QWORD *)(v27 + v39);
    v75 = v41[1];
    *(_QWORD *)v40 = *v41;
    *((_QWORD *)v40 + 1) = v75;
    v42 = v31[11];
    v43 = &v26[v42];
    v44 = (_QWORD *)(v27 + v42);
    v73 = v44[1];
    *(_QWORD *)v43 = *v44;
    *((_QWORD *)v43 + 1) = v73;
    v45 = v77[6];
    v46 = v77[7];
    v47 = &v7[v45];
    v48 = (uint64_t)a2 + v45;
    *v47 = *(_BYTE *)v48;
    *(_OWORD *)(v47 + 8) = *(_OWORD *)(v48 + 8);
    v49 = *(void **)(v48 + 32);
    *((_QWORD *)v47 + 3) = *(_QWORD *)(v48 + 24);
    *((_QWORD *)v47 + 4) = v49;
    v50 = *(void **)(v48 + 40);
    *((_QWORD *)v47 + 5) = v50;
    *(_OWORD *)(v47 + 57) = *(_OWORD *)(v48 + 57);
    *((_OWORD *)v47 + 3) = *(_OWORD *)(v48 + 48);
    *((_OWORD *)v47 + 5) = *(_OWORD *)(v48 + 80);
    v51 = *(void **)(v48 + 104);
    *((_QWORD *)v47 + 12) = *(_QWORD *)(v48 + 96);
    *((_QWORD *)v47 + 13) = v51;
    v52 = *(void **)(v48 + 112);
    *((_QWORD *)v47 + 14) = v52;
    *(_OWORD *)(v47 + 120) = *(_OWORD *)(v48 + 120);
    *(_OWORD *)(v47 + 136) = *(_OWORD *)(v48 + 136);
    v53 = &v7[v46];
    v54 = *(uint64_t *)((char *)a2 + v46);
    v55 = *((_BYTE *)a2 + v46 + 8);
    swift_retain(v38);
    swift_bridgeObjectRetain(v75);
    swift_bridgeObjectRetain(v73);
    v56 = v49;
    v57 = v50;
    v58 = v51;
    v59 = v52;
    sub_100024758(v54, v55);
    *(_QWORD *)v53 = v54;
    v53[8] = v55;
    v60 = v77[8];
    v61 = &v7[v60];
    v62 = (uint64_t *)((char *)a2 + v60);
    v63 = sub_10001B520(&qword_1000BAC80);
    if (swift_getEnumCaseMultiPayload(v62, v63) == 1)
    {
      v64 = type metadata accessor for ColorScheme(0);
      (*(void (**)(char *, uint64_t *, uint64_t))(*(_QWORD *)(v64 - 8) + 16))(v61, v62, v64);
      v65 = v61;
      v66 = v63;
      v67 = 1;
    }
    else
    {
      v68 = *v62;
      *(_QWORD *)v61 = *v62;
      swift_retain(v68);
      v65 = v61;
      v66 = v63;
      v67 = 0;
    }
    swift_storeEnumTagMultiPayload(v65, v66, v67);
  }
  return v7;
}

double sub_100050B10(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int (*v8)(uint64_t, uint64_t, uint64_t);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int *v13;
  uint64_t v14;
  id *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  double result;

  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 16));
  v4 = type metadata accessor for Section(0);
  v5 = a1 + *(int *)(v4 + 32);
  v6 = type metadata accessor for URL(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
  if (!v8(v5, 1, v6))
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v5, v6);
  v9 = a1 + *(int *)(v4 + 36);
  v10 = type metadata accessor for Date(0);
  v11 = *(_QWORD *)(v10 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10))
    (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v9, v10);
  v12 = a1 + a2[5];

  swift_bridgeObjectRelease(*(_QWORD *)(v12 + 8));
  swift_unknownObjectRelease(*(_QWORD *)(v12 + 16));
  v13 = (int *)type metadata accessor for TodayContent(0);
  v14 = v12 + v13[8];
  if (!v8(v14, 1, v6))
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v14, v6);
  swift_release(*(_QWORD *)(v12 + v13[9]));
  swift_bridgeObjectRelease(*(_QWORD *)(v12 + v13[10] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v12 + v13[11] + 8));
  v15 = (id *)(a1 + a2[6]);

  sub_10002C790(*(_QWORD *)(a1 + a2[7]), *(_BYTE *)(a1 + a2[7] + 8));
  v16 = (_QWORD *)(a1 + a2[8]);
  v17 = sub_10001B520(&qword_1000BAC80);
  if (swift_getEnumCaseMultiPayload(v16, v17) == 1)
  {
    v18 = type metadata accessor for ColorScheme(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v18 - 8) + 8))(v16, v18);
  }
  else
  {
    *(_QWORD *)&result = swift_release(*v16).n128_u64[0];
  }
  return result;
}

uint64_t sub_100050D08(uint64_t a1, uint64_t a2, int *a3)
{
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  const void *v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int (*v13)(const void *, uint64_t, uint64_t);
  id v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  const void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  int *v29;
  uint64_t v30;
  void *v31;
  const void *v32;
  id v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  _QWORD *v39;
  uint64_t v40;
  _QWORD *v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  void *v47;
  void *v48;
  void *v49;
  void *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char v55;
  id v56;
  id v57;
  id v58;
  id v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t *v62;
  uint64_t *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v69;
  void *__dst;
  unsigned int (*v71)(const void *, uint64_t, uint64_t);
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;

  v5 = *(void **)a2;
  v6 = *(void **)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v6;
  v7 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 16) = v7;
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  v8 = type metadata accessor for Section(0);
  v9 = *(int *)(v8 + 32);
  __dst = (void *)(a1 + v9);
  v10 = (const void *)(a2 + v9);
  v11 = type metadata accessor for URL(0);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v12 + 48);
  v14 = v5;
  v15 = v6;
  swift_bridgeObjectRetain(v7);
  v71 = v13;
  v73 = v11;
  if (v13(v10, 1, v11))
  {
    v16 = sub_10001B520(&qword_1000B93A0);
    memcpy(__dst, v10, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v12 + 16))(__dst, v10, v11);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v12 + 56))(__dst, 0, 1, v11);
  }
  v17 = *(int *)(v8 + 36);
  v18 = (void *)(a1 + v17);
  v19 = (const void *)(a2 + v17);
  v20 = type metadata accessor for Date(0);
  v21 = *(_QWORD *)(v20 - 8);
  v69 = v12;
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v21 + 48))(v19, 1, v20))
  {
    v22 = sub_10001B520((uint64_t *)&unk_1000BC550);
    memcpy(v18, v19, *(_QWORD *)(*(_QWORD *)(v22 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v21 + 16))(v18, v19, v20);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v21 + 56))(v18, 0, 1, v20);
  }
  v23 = a3[5];
  v24 = a1 + v23;
  v25 = a2 + v23;
  v26 = *(void **)(a2 + v23);
  v27 = *(_QWORD *)(a2 + v23 + 8);
  *(_QWORD *)v24 = v26;
  *(_QWORD *)(v24 + 8) = v27;
  v28 = *(_QWORD *)(a2 + v23 + 16);
  *(_QWORD *)(v24 + 16) = v28;
  *(_BYTE *)(v24 + 24) = *(_BYTE *)(a2 + v23 + 24);
  v29 = (int *)type metadata accessor for TodayContent(0);
  v30 = v29[8];
  v31 = (void *)(v24 + v30);
  v32 = (const void *)(v25 + v30);
  v33 = v26;
  swift_bridgeObjectRetain(v27);
  swift_unknownObjectRetain(v28);
  if (v71(v32, 1, v73))
  {
    v34 = sub_10001B520(&qword_1000B93A0);
    memcpy(v31, v32, *(_QWORD *)(*(_QWORD *)(v34 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v69 + 16))(v31, v32, v73);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v69 + 56))(v31, 0, 1, v73);
  }
  v35 = v29[9];
  v36 = *(_QWORD *)(v25 + v35);
  *(_QWORD *)(v24 + v35) = v36;
  v37 = v29[10];
  v38 = (_QWORD *)(v24 + v37);
  v39 = (_QWORD *)(v25 + v37);
  v74 = v39[1];
  *v38 = *v39;
  v38[1] = v74;
  v40 = v29[11];
  v41 = (_QWORD *)(v24 + v40);
  v42 = (_QWORD *)(v25 + v40);
  v72 = v42[1];
  *v41 = *v42;
  v41[1] = v72;
  v43 = a3[6];
  v44 = a3[7];
  v45 = a1 + v43;
  v46 = a2 + v43;
  *(_BYTE *)v45 = *(_BYTE *)v46;
  *(_OWORD *)(v45 + 8) = *(_OWORD *)(v46 + 8);
  v47 = *(void **)(v46 + 32);
  *(_QWORD *)(v45 + 24) = *(_QWORD *)(v46 + 24);
  *(_QWORD *)(v45 + 32) = v47;
  v48 = *(void **)(v46 + 40);
  *(_QWORD *)(v45 + 40) = v48;
  *(_OWORD *)(v45 + 57) = *(_OWORD *)(v46 + 57);
  *(_OWORD *)(v45 + 48) = *(_OWORD *)(v46 + 48);
  *(_OWORD *)(v45 + 80) = *(_OWORD *)(v46 + 80);
  v49 = *(void **)(v46 + 104);
  *(_QWORD *)(v45 + 96) = *(_QWORD *)(v46 + 96);
  *(_QWORD *)(v45 + 104) = v49;
  v50 = *(void **)(v46 + 112);
  *(_QWORD *)(v45 + 112) = v50;
  *(_OWORD *)(v45 + 120) = *(_OWORD *)(v46 + 120);
  *(_OWORD *)(v45 + 136) = *(_OWORD *)(v46 + 136);
  v51 = a2;
  v52 = a1;
  v53 = a1 + v44;
  v54 = *(_QWORD *)(v51 + v44);
  v55 = *(_BYTE *)(v51 + v44 + 8);
  swift_retain(v36);
  swift_bridgeObjectRetain(v74);
  swift_bridgeObjectRetain(v72);
  v56 = v47;
  v57 = v48;
  v58 = v49;
  v59 = v50;
  sub_100024758(v54, v55);
  *(_QWORD *)v53 = v54;
  *(_BYTE *)(v53 + 8) = v55;
  v60 = v52;
  v61 = a3[8];
  v62 = (uint64_t *)(v52 + v61);
  v63 = (uint64_t *)(v51 + v61);
  v64 = sub_10001B520(&qword_1000BAC80);
  if (swift_getEnumCaseMultiPayload(v63, v64) == 1)
  {
    v65 = type metadata accessor for ColorScheme(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v65 - 8) + 16))(v62, v63, v65);
    v66 = 1;
  }
  else
  {
    v67 = *v63;
    *v62 = *v63;
    swift_retain(v67);
    v66 = 0;
  }
  swift_storeEnumTagMultiPayload(v62, v64, v66);
  return v60;
}

uint64_t sub_1000510D4(uint64_t a1, uint64_t a2, int *a3)
{
  void *v5;
  void *v6;
  id v7;
  void *v8;
  void *v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t (*v19)(void *, uint64_t, uint64_t);
  int v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t (*v28)(void *, uint64_t, uint64_t);
  int v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  void *v36;
  id v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int *v42;
  uint64_t v43;
  void *v44;
  void *v45;
  int v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  _QWORD *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  _QWORD *v58;
  _QWORD *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  void *v65;
  void *v66;
  id v67;
  void *v68;
  void *v69;
  id v70;
  __int128 v71;
  void *v72;
  void *v73;
  id v74;
  void *v75;
  void *v76;
  id v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  char v83;
  uint64_t v84;
  uint64_t *v85;
  uint64_t *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v92;

  v5 = *(void **)a1;
  v6 = *(void **)a2;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v7 = v6;

  v8 = *(void **)(a2 + 8);
  v9 = *(void **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v8;
  v10 = v8;

  v11 = *(_QWORD *)(a2 + 16);
  v12 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v11;
  swift_bridgeObjectRetain(v11);
  swift_bridgeObjectRelease(v12);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  v13 = type metadata accessor for Section(0);
  v14 = *(int *)(v13 + 32);
  v15 = (void *)(a1 + v14);
  v16 = (void *)(a2 + v14);
  v17 = type metadata accessor for URL(0);
  v18 = *(_QWORD *)(v17 - 8);
  v19 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v18 + 48);
  v20 = v19(v15, 1, v17);
  v21 = v19(v16, 1, v17);
  v92 = v18;
  if (v20)
  {
    if (!v21)
    {
      (*(void (**)(void *, void *, uint64_t))(v18 + 16))(v15, v16, v17);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v18 + 56))(v15, 0, 1, v17);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v21)
  {
    (*(void (**)(void *, uint64_t))(v18 + 8))(v15, v17);
LABEL_6:
    v22 = sub_10001B520(&qword_1000B93A0);
    memcpy(v15, v16, *(_QWORD *)(*(_QWORD *)(v22 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, void *, uint64_t))(v18 + 24))(v15, v16, v17);
LABEL_7:
  v23 = *(int *)(v13 + 36);
  v24 = (void *)(a1 + v23);
  v25 = (void *)(a2 + v23);
  v26 = type metadata accessor for Date(0);
  v27 = *(_QWORD *)(v26 - 8);
  v28 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v27 + 48);
  v29 = v28(v24, 1, v26);
  v30 = v28(v25, 1, v26);
  if (v29)
  {
    if (!v30)
    {
      (*(void (**)(void *, void *, uint64_t))(v27 + 16))(v24, v25, v26);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v27 + 56))(v24, 0, 1, v26);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v30)
  {
    (*(void (**)(void *, uint64_t))(v27 + 8))(v24, v26);
LABEL_12:
    v31 = sub_10001B520((uint64_t *)&unk_1000BC550);
    memcpy(v24, v25, *(_QWORD *)(*(_QWORD *)(v31 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(void *, void *, uint64_t))(v27 + 24))(v24, v25, v26);
LABEL_13:
  v32 = a3[5];
  v33 = a1 + v32;
  v34 = a2 + v32;
  v35 = *(void **)(a2 + v32);
  v36 = *(void **)v33;
  *(_QWORD *)v33 = v35;
  v37 = v35;

  v38 = *(_QWORD *)(v34 + 8);
  v39 = *(_QWORD *)(v33 + 8);
  *(_QWORD *)(v33 + 8) = v38;
  swift_bridgeObjectRetain(v38);
  swift_bridgeObjectRelease(v39);
  v40 = *(_QWORD *)(v34 + 16);
  v41 = *(_QWORD *)(v33 + 16);
  *(_QWORD *)(v33 + 16) = v40;
  swift_unknownObjectRetain(v40);
  swift_unknownObjectRelease(v41);
  *(_BYTE *)(v33 + 24) = *(_BYTE *)(v34 + 24);
  v42 = (int *)type metadata accessor for TodayContent(0);
  v43 = v42[8];
  v44 = (void *)(v33 + v43);
  v45 = (void *)(v34 + v43);
  v46 = v19((void *)(v33 + v43), 1, v17);
  v47 = v19(v45, 1, v17);
  if (v46)
  {
    if (!v47)
    {
      (*(void (**)(void *, void *, uint64_t))(v92 + 16))(v44, v45, v17);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v92 + 56))(v44, 0, 1, v17);
      goto LABEL_19;
    }
    goto LABEL_18;
  }
  if (v47)
  {
    (*(void (**)(void *, uint64_t))(v92 + 8))(v44, v17);
LABEL_18:
    v48 = sub_10001B520(&qword_1000B93A0);
    memcpy(v44, v45, *(_QWORD *)(*(_QWORD *)(v48 - 8) + 64));
    goto LABEL_19;
  }
  (*(void (**)(void *, void *, uint64_t))(v92 + 24))(v44, v45, v17);
LABEL_19:
  v49 = v42[9];
  v50 = *(_QWORD *)(v34 + v49);
  v51 = *(_QWORD *)(v33 + v49);
  *(_QWORD *)(v33 + v49) = v50;
  swift_retain(v50);
  swift_release(v51);
  v52 = v42[10];
  v53 = (_QWORD *)(v33 + v52);
  v54 = (_QWORD *)(v34 + v52);
  *v53 = *v54;
  v55 = v54[1];
  v56 = v53[1];
  v53[1] = v55;
  swift_bridgeObjectRetain(v55);
  swift_bridgeObjectRelease(v56);
  v57 = v42[11];
  v58 = (_QWORD *)(v33 + v57);
  v59 = (_QWORD *)(v34 + v57);
  *v58 = *v59;
  v60 = v59[1];
  v61 = v58[1];
  v58[1] = v60;
  swift_bridgeObjectRetain(v60);
  swift_bridgeObjectRelease(v61);
  v62 = a3[6];
  v63 = a1 + v62;
  v64 = a2 + v62;
  *(_BYTE *)v63 = *(_BYTE *)(a2 + v62);
  *(_QWORD *)(v63 + 8) = *(_QWORD *)(a2 + v62 + 8);
  *(_QWORD *)(v63 + 16) = *(_QWORD *)(a2 + v62 + 16);
  *(_QWORD *)(v63 + 24) = *(_QWORD *)(a2 + v62 + 24);
  v65 = *(void **)(a2 + v62 + 32);
  v66 = *(void **)(v63 + 32);
  *(_QWORD *)(v63 + 32) = v65;
  v67 = v65;

  v68 = *(void **)(v64 + 40);
  v69 = *(void **)(v63 + 40);
  *(_QWORD *)(v63 + 40) = v68;
  v70 = v68;

  *(_QWORD *)(v63 + 48) = *(_QWORD *)(v64 + 48);
  v71 = *(_OWORD *)(v64 + 56);
  *(_BYTE *)(v63 + 72) = *(_BYTE *)(v64 + 72);
  *(_OWORD *)(v63 + 56) = v71;
  *(_QWORD *)(v63 + 80) = *(_QWORD *)(v64 + 80);
  *(_QWORD *)(v63 + 88) = *(_QWORD *)(v64 + 88);
  *(_QWORD *)(v63 + 96) = *(_QWORD *)(v64 + 96);
  v72 = *(void **)(v64 + 104);
  v73 = *(void **)(v63 + 104);
  *(_QWORD *)(v63 + 104) = v72;
  v74 = v72;

  v75 = *(void **)(v64 + 112);
  v76 = *(void **)(v63 + 112);
  *(_QWORD *)(v63 + 112) = v75;
  v77 = v75;

  *(_QWORD *)(v63 + 120) = *(_QWORD *)(v64 + 120);
  *(_QWORD *)(v63 + 128) = *(_QWORD *)(v64 + 128);
  *(_QWORD *)(v63 + 136) = *(_QWORD *)(v64 + 136);
  *(_QWORD *)(v63 + 144) = *(_QWORD *)(v64 + 144);
  v78 = a3[7];
  v79 = a1 + v78;
  v80 = a2 + v78;
  v81 = *(_QWORD *)v80;
  LOBYTE(v76) = *(_BYTE *)(v80 + 8);
  sub_100024758(*(_QWORD *)v80, (char)v76);
  v82 = *(_QWORD *)v79;
  v83 = *(_BYTE *)(v79 + 8);
  *(_QWORD *)v79 = v81;
  *(_BYTE *)(v79 + 8) = (_BYTE)v76;
  sub_10002C790(v82, v83);
  if (a1 != a2)
  {
    v84 = a3[8];
    v85 = (uint64_t *)(a1 + v84);
    v86 = (uint64_t *)(a2 + v84);
    sub_10002CCF4(a1 + v84, &qword_1000BAC80);
    v87 = sub_10001B520(&qword_1000BAC80);
    if (swift_getEnumCaseMultiPayload(v86, v87) == 1)
    {
      v88 = type metadata accessor for ColorScheme(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v88 - 8) + 16))(v85, v86, v88);
      v89 = 1;
    }
    else
    {
      v90 = *v86;
      *v85 = *v86;
      swift_retain(v90);
      v89 = 0;
    }
    swift_storeEnumTagMultiPayload(v85, v87, v89);
  }
  return a1;
}

uint64_t sub_100051638(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  void *v8;
  const void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  const void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int *v23;
  uint64_t v24;
  void *v25;
  const void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  void *v40;
  const void *v41;
  uint64_t v42;
  uint64_t v43;
  unsigned int (*v45)(const void *, uint64_t, uint64_t);

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  v6 = type metadata accessor for Section(0);
  v7 = *(int *)(v6 + 32);
  v8 = (void *)(a1 + v7);
  v9 = (const void *)(a2 + v7);
  v10 = type metadata accessor for URL(0);
  v11 = *(_QWORD *)(v10 - 8);
  v45 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v11 + 48);
  if (v45(v9, 1, v10))
  {
    v12 = sub_10001B520(&qword_1000B93A0);
    memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v11 + 32))(v8, v9, v10);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
  }
  v13 = *(int *)(v6 + 36);
  v14 = (void *)(a1 + v13);
  v15 = (const void *)(a2 + v13);
  v16 = type metadata accessor for Date(0);
  v17 = *(_QWORD *)(v16 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v17 + 48))(v15, 1, v16))
  {
    v18 = sub_10001B520((uint64_t *)&unk_1000BC550);
    memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v17 + 32))(v14, v15, v16);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v17 + 56))(v14, 0, 1, v16);
  }
  v19 = a3;
  v20 = a3[5];
  v21 = a1 + v20;
  v22 = a2 + v20;
  *(_OWORD *)v21 = *(_OWORD *)(a2 + v20);
  *(_QWORD *)(v21 + 16) = *(_QWORD *)(a2 + v20 + 16);
  *(_BYTE *)(v21 + 24) = *(_BYTE *)(a2 + v20 + 24);
  v23 = (int *)type metadata accessor for TodayContent(0);
  v24 = v23[8];
  v25 = (void *)(v21 + v24);
  v26 = (const void *)(v22 + v24);
  if (v45((const void *)(v22 + v24), 1, v10))
  {
    v27 = sub_10001B520(&qword_1000B93A0);
    memcpy(v25, v26, *(_QWORD *)(*(_QWORD *)(v27 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v11 + 32))(v25, v26, v10);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v25, 0, 1, v10);
  }
  *(_QWORD *)(v21 + v23[9]) = *(_QWORD *)(v22 + v23[9]);
  *(_OWORD *)(v21 + v23[10]) = *(_OWORD *)(v22 + v23[10]);
  *(_OWORD *)(v21 + v23[11]) = *(_OWORD *)(v22 + v23[11]);
  v28 = v19[6];
  v29 = v19[7];
  v30 = a1 + v28;
  v31 = a2 + v28;
  v32 = *(_OWORD *)(v31 + 16);
  *(_OWORD *)v30 = *(_OWORD *)v31;
  *(_OWORD *)(v30 + 16) = v32;
  v33 = *(_OWORD *)(v31 + 80);
  *(_OWORD *)(v30 + 64) = *(_OWORD *)(v31 + 64);
  *(_OWORD *)(v30 + 80) = v33;
  v34 = *(_OWORD *)(v31 + 48);
  *(_OWORD *)(v30 + 32) = *(_OWORD *)(v31 + 32);
  *(_OWORD *)(v30 + 48) = v34;
  *(_QWORD *)(v30 + 144) = *(_QWORD *)(v31 + 144);
  v35 = *(_OWORD *)(v31 + 128);
  v36 = *(_OWORD *)(v31 + 96);
  *(_OWORD *)(v30 + 112) = *(_OWORD *)(v31 + 112);
  *(_OWORD *)(v30 + 128) = v35;
  *(_OWORD *)(v30 + 96) = v36;
  v37 = a1 + v29;
  v38 = a2 + v29;
  *(_BYTE *)(v37 + 8) = *(_BYTE *)(v38 + 8);
  *(_QWORD *)v37 = *(_QWORD *)v38;
  v39 = v19[8];
  v40 = (void *)(a1 + v39);
  v41 = (const void *)(a2 + v39);
  v42 = sub_10001B520(&qword_1000BAC80);
  if (swift_getEnumCaseMultiPayload(v41, v42) == 1)
  {
    v43 = type metadata accessor for ColorScheme(0);
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v43 - 8) + 32))(v40, v41, v43);
    swift_storeEnumTagMultiPayload(v40, v42, 1);
  }
  else
  {
    memcpy(v40, v41, *(_QWORD *)(*(_QWORD *)(v42 - 8) + 64));
  }
  return a1;
}

uint64_t sub_100051950(uint64_t a1, uint64_t a2, int *a3)
{
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t (*v14)(void *, uint64_t, uint64_t);
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t (*v23)(void *, uint64_t, uint64_t);
  int v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  int *v33;
  uint64_t v34;
  void *v35;
  void *v36;
  int v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  uint64_t *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  void *v57;
  void *v58;
  void *v59;
  void *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t *v63;
  uint64_t v64;
  uint64_t v65;
  char v66;
  uint64_t v67;
  void *v68;
  const void *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v73;

  v5 = *(void **)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;

  v6 = *(void **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);

  v7 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRelease(v7);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  v8 = type metadata accessor for Section(0);
  v9 = *(int *)(v8 + 32);
  v10 = (void *)(a1 + v9);
  v11 = (void *)(a2 + v9);
  v12 = type metadata accessor for URL(0);
  v13 = *(_QWORD *)(v12 - 8);
  v14 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v13 + 48);
  v15 = v14(v10, 1, v12);
  v16 = v14(v11, 1, v12);
  v73 = v13;
  if (v15)
  {
    if (!v16)
    {
      (*(void (**)(void *, void *, uint64_t))(v13 + 32))(v10, v11, v12);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v10, 0, 1, v12);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v16)
  {
    (*(void (**)(void *, uint64_t))(v13 + 8))(v10, v12);
LABEL_6:
    v17 = sub_10001B520(&qword_1000B93A0);
    memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, void *, uint64_t))(v13 + 40))(v10, v11, v12);
LABEL_7:
  v18 = *(int *)(v8 + 36);
  v19 = (void *)(a1 + v18);
  v20 = (void *)(a2 + v18);
  v21 = type metadata accessor for Date(0);
  v22 = *(_QWORD *)(v21 - 8);
  v23 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v22 + 48);
  v24 = v23(v19, 1, v21);
  v25 = v23(v20, 1, v21);
  if (v24)
  {
    if (!v25)
    {
      (*(void (**)(void *, void *, uint64_t))(v22 + 32))(v19, v20, v21);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v22 + 56))(v19, 0, 1, v21);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v25)
  {
    (*(void (**)(void *, uint64_t))(v22 + 8))(v19, v21);
LABEL_12:
    v26 = sub_10001B520((uint64_t *)&unk_1000BC550);
    memcpy(v19, v20, *(_QWORD *)(*(_QWORD *)(v26 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(void *, void *, uint64_t))(v22 + 40))(v19, v20, v21);
LABEL_13:
  v27 = a3[5];
  v28 = a1 + v27;
  v29 = a2 + v27;
  v30 = *(void **)(a1 + v27);
  *(_QWORD *)(a1 + v27) = *(_QWORD *)(a2 + v27);

  v31 = *(_QWORD *)(v28 + 8);
  *(_QWORD *)(v28 + 8) = *(_QWORD *)(v29 + 8);
  swift_bridgeObjectRelease(v31);
  v32 = *(_QWORD *)(v28 + 16);
  *(_QWORD *)(v28 + 16) = *(_QWORD *)(v29 + 16);
  swift_unknownObjectRelease(v32);
  *(_BYTE *)(v28 + 24) = *(_BYTE *)(v29 + 24);
  v33 = (int *)type metadata accessor for TodayContent(0);
  v34 = v33[8];
  v35 = (void *)(v28 + v34);
  v36 = (void *)(v29 + v34);
  v37 = v14((void *)(v28 + v34), 1, v12);
  v38 = v14(v36, 1, v12);
  if (v37)
  {
    if (!v38)
    {
      (*(void (**)(void *, void *, uint64_t))(v73 + 32))(v35, v36, v12);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v73 + 56))(v35, 0, 1, v12);
      goto LABEL_19;
    }
    goto LABEL_18;
  }
  if (v38)
  {
    (*(void (**)(void *, uint64_t))(v73 + 8))(v35, v12);
LABEL_18:
    v39 = sub_10001B520(&qword_1000B93A0);
    memcpy(v35, v36, *(_QWORD *)(*(_QWORD *)(v39 - 8) + 64));
    goto LABEL_19;
  }
  (*(void (**)(void *, void *, uint64_t))(v73 + 40))(v35, v36, v12);
LABEL_19:
  v40 = v33[9];
  v41 = *(_QWORD *)(v28 + v40);
  *(_QWORD *)(v28 + v40) = *(_QWORD *)(v29 + v40);
  swift_release(v41);
  v42 = v33[10];
  v43 = (_QWORD *)(v28 + v42);
  v44 = (uint64_t *)(v29 + v42);
  v46 = *v44;
  v45 = v44[1];
  v47 = v43[1];
  *v43 = v46;
  v43[1] = v45;
  swift_bridgeObjectRelease(v47);
  v48 = v33[11];
  v49 = (_QWORD *)(v28 + v48);
  v50 = (uint64_t *)(v29 + v48);
  v52 = *v50;
  v51 = v50[1];
  v53 = v49[1];
  *v49 = v52;
  v49[1] = v51;
  swift_bridgeObjectRelease(v53);
  v54 = a3[6];
  v55 = a1 + v54;
  v56 = a2 + v54;
  *(_BYTE *)v55 = *(_BYTE *)(a2 + v54);
  *(_OWORD *)(v55 + 8) = *(_OWORD *)(a2 + v54 + 8);
  *(_QWORD *)(v55 + 24) = *(_QWORD *)(a2 + v54 + 24);
  v57 = *(void **)(a1 + v54 + 32);
  *(_QWORD *)(v55 + 32) = *(_QWORD *)(a2 + v54 + 32);

  v58 = *(void **)(v55 + 40);
  *(_QWORD *)(v55 + 40) = *(_QWORD *)(v56 + 40);

  *(_QWORD *)(v55 + 48) = *(_QWORD *)(v56 + 48);
  *(_OWORD *)(v55 + 56) = *(_OWORD *)(v56 + 56);
  *(_BYTE *)(v55 + 72) = *(_BYTE *)(v56 + 72);
  *(_OWORD *)(v55 + 80) = *(_OWORD *)(v56 + 80);
  *(_QWORD *)(v55 + 96) = *(_QWORD *)(v56 + 96);
  v59 = *(void **)(v55 + 104);
  *(_QWORD *)(v55 + 104) = *(_QWORD *)(v56 + 104);

  v60 = *(void **)(v55 + 112);
  *(_QWORD *)(v55 + 112) = *(_QWORD *)(v56 + 112);

  *(_OWORD *)(v55 + 120) = *(_OWORD *)(v56 + 120);
  *(_OWORD *)(v55 + 136) = *(_OWORD *)(v56 + 136);
  v61 = a3[7];
  v62 = a1 + v61;
  v63 = (uint64_t *)(a2 + v61);
  v64 = *v63;
  LOBYTE(v63) = *((_BYTE *)v63 + 8);
  v65 = *(_QWORD *)v62;
  v66 = *(_BYTE *)(v62 + 8);
  *(_QWORD *)v62 = v64;
  *(_BYTE *)(v62 + 8) = (_BYTE)v63;
  sub_10002C790(v65, v66);
  if (a1 != a2)
  {
    v67 = a3[8];
    v68 = (void *)(a1 + v67);
    v69 = (const void *)(a2 + v67);
    sub_10002CCF4(a1 + v67, &qword_1000BAC80);
    v70 = sub_10001B520(&qword_1000BAC80);
    if (swift_getEnumCaseMultiPayload(v69, v70) == 1)
    {
      v71 = type metadata accessor for ColorScheme(0);
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v71 - 8) + 32))(v68, v69, v71);
      swift_storeEnumTagMultiPayload(v68, v70, 1);
    }
    else
    {
      memcpy(v68, v69, *(_QWORD *)(*(_QWORD *)(v70 - 8) + 64));
    }
  }
  return a1;
}

uint64_t sub_100051E30(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100051E3C);
}

uint64_t sub_100051E3C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;

  v6 = type metadata accessor for Section(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
    return v9(v10, a2, v8);
  }
  v11 = type metadata accessor for TodayContent(0);
  v12 = *(_QWORD *)(v11 - 8);
  if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
  {
    v8 = v11;
    v13 = a3[5];
LABEL_10:
    v10 = a1 + v13;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
    return v9(v10, a2, v8);
  }
  if ((_DWORD)a2 != 0x7FFFFFFF)
  {
    v8 = sub_10001B520(&qword_1000BB418);
    v12 = *(_QWORD *)(v8 - 8);
    v13 = a3[8];
    goto LABEL_10;
  }
  v14 = *(_QWORD *)(a1 + a3[6] + 32);
  if (v14 >= 0xFFFFFFFF)
    LODWORD(v14) = -1;
  return (v14 + 1);
}

uint64_t sub_100051F10(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100051F1C);
}

uint64_t sub_100051F1C(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t result;
  uint64_t v14;
  uint64_t v15;

  v8 = type metadata accessor for Section(0);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    result = type metadata accessor for TodayContent(0);
    v14 = *(_QWORD *)(result - 8);
    if (*(_DWORD *)(v14 + 84) == a3)
    {
      v10 = result;
      v15 = a4[5];
    }
    else
    {
      if (a3 == 0x7FFFFFFF)
      {
        *(_QWORD *)(a1 + a4[6] + 32) = (a2 - 1);
        return result;
      }
      v10 = sub_10001B520(&qword_1000BB418);
      v14 = *(_QWORD *)(v10 - 8);
      v15 = a4[8];
    }
    v12 = a1 + v15;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
  }
  return v11(v12, a2, a2, v10);
}

uint64_t type metadata accessor for SectionView(uint64_t a1)
{
  uint64_t result;

  result = qword_1000BB478;
  if (!qword_1000BB478)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for SectionView);
  return result;
}

void sub_100052028(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  _QWORD v8[5];

  v2 = type metadata accessor for Section(319);
  if (v3 <= 0x3F)
  {
    v8[0] = *(_QWORD *)(v2 - 8) + 64;
    v4 = type metadata accessor for TodayContent(319);
    if (v5 <= 0x3F)
    {
      v8[1] = *(_QWORD *)(v4 - 8) + 64;
      v8[2] = &unk_10008C418;
      v8[3] = &unk_10008C430;
      sub_1000520DC(319);
      if (v7 <= 0x3F)
      {
        v8[4] = *(_QWORD *)(v6 - 8) + 64;
        swift_initStructMetadata(a1, 256, 5, v8, a1 + 16);
      }
    }
  }
}

void sub_1000520DC(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_1000BB488)
  {
    v2 = type metadata accessor for ColorScheme(255);
    v3 = type metadata accessor for Environment.Content(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_1000BB488);
  }
}

uint64_t sub_100052130(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_10009CD64, 1);
}

void sub_100052140(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  _QWORD *v10;
  _QWORD *v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  double v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD v28[2];
  char v29;
  uint64_t v30;
  char v31;
  __int128 v32;
  uint64_t v33;
  char v34;
  uint64_t v35;
  char v36;
  __int128 v37;

  v4 = sub_10001B520(&qword_1000BB4D0);
  v5 = __chkstk_darwin(v4);
  v7 = (char *)&v28[-1] - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v9 = (char *)&v28[-1] - v8;
  v10 = (_QWORD *)type metadata accessor for SectionView(0);
  if (*(_BYTE *)(a1 + *((int *)v10 + 6)) == 1)
  {
    v11 = v10;
    v12 = objc_msgSend((id)objc_opt_self(UIColor), "separatorColor");
    v13 = Color.init(_:)(v12);
    v14 = a1 + *((int *)v11 + 7);
    v15 = *(_QWORD *)v14;
    v16 = *(_BYTE *)(v14 + 8);
    sub_100024758(*(_QWORD *)v14, v16);
    v17 = sub_10002A628(v15, v16);
    v18 = sub_10002C790(v15, v16);
    v19 = static Alignment.center.getter(v18);
    _FrameLayout.init(width:height:alignment:)(&v33, 0, 1, *(_QWORD *)&v17, 0, v19, v20);
    v28[0] = v13;
    v28[1] = v33;
    v29 = v34;
    v30 = v35;
    v31 = v36;
    v32 = v37;
    v21 = sub_10001B520(&qword_1000BB4E8);
    v22 = (void *)sub_1000540B8(&qword_1000BB4F0, &qword_1000BB4E8);
    v10 = v28;
    v23 = (void *)v21;
  }
  else
  {
    v23 = &type metadata for EmptyView;
    v22 = &protocol witness table for EmptyView;
  }
  v24 = AnyView.init<A>(_:)(v10, v23, v22);
  *(_QWORD *)v9 = static HorizontalAlignment.leading.getter(v24);
  *((_QWORD *)v9 + 1) = 0;
  v9[16] = 0;
  v25 = sub_10001B520(&qword_1000BB4D8);
  sub_100052388(a1, (uint64_t)&v9[*(int *)(v25 + 44)]);
  sub_10002CCB0((uint64_t)v9, (uint64_t)v7, &qword_1000BB4D0);
  *a2 = v24;
  v26 = sub_10001B520(&qword_1000BB4E0);
  sub_10002CCB0((uint64_t)v7, (uint64_t)a2 + *(int *)(v26 + 48), &qword_1000BB4D0);
  swift_retain(v24);
  sub_10002CCF4((uint64_t)v9, &qword_1000BB4D0);
  sub_10002CCF4((uint64_t)v7, &qword_1000BB4D0);
  swift_release(v24);
}

uint64_t sub_100052388@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _BYTE *v18;
  uint64_t v19;
  _BYTE *v20;
  uint64_t v21;
  void *v22;
  _BYTE *v23;
  uint64_t v24;
  void (*v25)(_BYTE *, uint64_t);
  _BYTE *v26;
  uint64_t v27;
  uint64_t KeyPath;
  uint64_t v29;
  _BYTE *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void (*v41)(_BYTE *, _BYTE *, uint64_t);
  _BYTE *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  void (*v49)(_BYTE *, uint64_t);
  char v51;
  char v52;
  _BYTE v53[12];
  int v54;
  int v55;
  int v56;
  _BYTE *v57;
  _BYTE *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  _BYTE *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  _BYTE *v69;
  uint64_t v70;
  _BYTE *v71;
  unsigned __int8 v72;
  unsigned __int8 v73;
  unsigned __int8 v74;
  char v75;
  char v76;
  char v77;
  char v78;
  uint64_t v79;
  char v80;
  uint64_t v81;
  char v82;
  _BYTE *v83;
  char v84;
  uint64_t v85;
  unsigned __int8 v86;
  uint64_t v87;
  unsigned __int8 v88;
  uint64_t v89;
  unsigned __int8 v90;
  uint64_t v91;
  uint64_t v92;

  v70 = a2;
  v3 = type metadata accessor for SectionView(0);
  v65 = *(_QWORD *)(v3 - 8);
  v66 = *(_QWORD *)(v65 + 64);
  __chkstk_darwin(v3);
  v64 = &v53[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v67 = sub_10001B520(&qword_1000BB4F8);
  v68 = *(_QWORD *)(v67 - 8);
  v5 = __chkstk_darwin(v67);
  v69 = &v53[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v5);
  v71 = &v53[-v7];
  v8 = type metadata accessor for AccessibilityTraits(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = &v53[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v12 = type metadata accessor for SectionHeaderView(0);
  __chkstk_darwin(v12);
  v14 = &v53[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v15 = sub_10001B520(&qword_1000BB500);
  v16 = __chkstk_darwin(v15);
  v18 = &v53[-((v17 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v16);
  v20 = &v53[-v19];
  sub_10002A83C(a1, (uint64_t)v14, type metadata accessor for Section);
  v21 = a1 + *(int *)(v3 + 24);
  v22 = *(void **)(v21 + 32);
  v23 = &v14[*(int *)(v12 + 20)];
  *(_OWORD *)v23 = *(_OWORD *)(v21 + 16);
  *((_QWORD *)v23 + 2) = v22;
  static AccessibilityTraits.isHeader.getter(v22);
  v24 = sub_10001C96C(&qword_1000BB508, type metadata accessor for SectionHeaderView, (uint64_t)&unk_10008C800);
  View.accessibilityAddTraits(_:)(v11, v12, v24);
  v25 = *(void (**)(_BYTE *, uint64_t))(v9 + 8);
  v26 = v71;
  v25(v11, v8);
  sub_100027D34((uint64_t)v14, type metadata accessor for SectionHeaderView);
  sub_10002CB18((uint64_t)v18, (uint64_t)v20, &qword_1000BB500);
  v79 = *(_QWORD *)(a1 + 16);
  v27 = v79;
  KeyPath = swift_getKeyPath(&unk_10008C498);
  v29 = a1;
  v30 = v64;
  sub_10002A83C(v29, (uint64_t)v64, type metadata accessor for SectionView);
  v31 = *(unsigned __int8 *)(v65 + 80);
  v32 = (v31 + 16) & ~v31;
  v33 = swift_allocObject(&unk_1000AC9F0, v32 + v66, v31 | 7);
  sub_10002AC74((uint64_t)v30, v33 + v32, type metadata accessor for SectionView);
  swift_bridgeObjectRetain(v27);
  v34 = sub_10001B520(&qword_1000BB510);
  v35 = sub_10002CE94(&qword_1000BB518, &qword_1000BB510, (uint64_t)&protocol conformance descriptor for [A]);
  v36 = ForEach<>.init(_:id:content:)(&v79, KeyPath, sub_100054058, v33, v34, &type metadata for AnyView, v35, &protocol witness table for String, &protocol witness table for AnyView);
  v37 = *(_QWORD *)(v21 + 144);
  v38 = static Alignment.center.getter(v36);
  v52 = 1;
  v51 = 1;
  _FlexFrameLayout.init(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)(&v79, 0, 1, 0, 1, 0, 1, v37, 0, 0, v51, 0, v52, v38, v39);
  v66 = v79;
  v65 = v81;
  v64 = v83;
  v63 = v85;
  v62 = v87;
  v61 = v89;
  v60 = v91;
  v59 = v92;
  v78 = 1;
  v77 = v80;
  v76 = v82;
  v75 = v84;
  v74 = v86;
  v73 = v88;
  v72 = v90;
  sub_10002CCB0((uint64_t)v20, (uint64_t)v18, &qword_1000BB500);
  v40 = v68;
  v41 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(v68 + 16);
  v58 = v20;
  v42 = v69;
  v43 = (uint64_t)v18;
  v57 = v18;
  v44 = v67;
  v41(v69, v26, v67);
  LOBYTE(v34) = v78;
  LOBYTE(v21) = v77;
  LOBYTE(KeyPath) = v76;
  LOBYTE(v26) = v75;
  v54 = v74;
  v55 = v73;
  v56 = v72;
  v45 = v70;
  sub_10002CCB0(v43, v70, &qword_1000BB500);
  v46 = sub_10001B520(&qword_1000BB520);
  v41((_BYTE *)(v45 + *(int *)(v46 + 48)), v42, v44);
  v47 = v45 + *(int *)(v46 + 64);
  *(_QWORD *)v47 = 0;
  *(_BYTE *)(v47 + 8) = v34;
  *(_QWORD *)(v47 + 16) = v66;
  *(_BYTE *)(v47 + 24) = v21;
  *(_QWORD *)(v47 + 32) = v65;
  *(_BYTE *)(v47 + 40) = KeyPath;
  *(_QWORD *)(v47 + 48) = v64;
  *(_BYTE *)(v47 + 56) = (_BYTE)v26;
  *(_QWORD *)(v47 + 64) = v63;
  *(_BYTE *)(v47 + 72) = v54;
  *(_QWORD *)(v47 + 80) = v62;
  *(_BYTE *)(v47 + 88) = v55;
  *(_QWORD *)(v47 + 96) = v61;
  *(_BYTE *)(v47 + 104) = v56;
  v48 = v59;
  *(_QWORD *)(v47 + 112) = v60;
  *(_QWORD *)(v47 + 120) = v48;
  v49 = *(void (**)(_BYTE *, uint64_t))(v40 + 8);
  v49(v71, v44);
  sub_10002CCF4((uint64_t)v58, &qword_1000BB500);
  v49(v42, v44);
  return sub_10002CCF4((uint64_t)v57, &qword_1000BB500);
}

uint64_t sub_1000529F8@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t result;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  unint64_t v42;
  __n128 v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  int v54;
  uint64_t v55;
  int v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  uint64_t *v60;
  uint64_t v61;
  uint64_t v62;
  unsigned __int8 v63;
  uint64_t v64;
  unsigned __int8 v65;
  uint64_t v66;
  uint64_t v67;

  v60 = a2;
  v4 = sub_10001B520(&qword_1000BB528);
  v51 = *(_QWORD *)(v4 - 8);
  v52 = v4;
  __chkstk_darwin(v4);
  v49 = (char *)&v44 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v50 = sub_10001B520(&qword_1000BB530);
  __chkstk_darwin(v50);
  v48 = (char *)&v44 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for Item.Headline(0);
  __chkstk_darwin(v7);
  v9 = (char *)&v44 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for Item(0);
  __chkstk_darwin(v10);
  v12 = (char *)&v44 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_10001B520(&qword_1000B93A0);
  __chkstk_darwin(v13);
  v15 = (char *)&v44 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for URL(0);
  v17 = *(_QWORD *)(v16 - 8);
  v18 = __chkstk_darwin(v16);
  v20 = (char *)&v44 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18);
  v59 = (char *)&v44 - v21;
  v47 = v2;
  sub_100052EF4(a1, (uint64_t)&v61);
  v22 = v61;
  v53 = v62;
  v54 = v63;
  v55 = v64;
  v56 = v65;
  v57 = v66;
  v58 = v67;
  v46 = a1;
  sub_10002A83C(a1, (uint64_t)v12, type metadata accessor for Item);
  if (swift_getEnumCaseMultiPayload(v12, v10) == 1)
  {
    sub_100027D34((uint64_t)v12, type metadata accessor for Item);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v17 + 56))(v15, 1, 1, v16);
  }
  else
  {
    sub_10002AC74((uint64_t)v12, (uint64_t)v9, type metadata accessor for Item.Headline);
    sub_10002CCB0((uint64_t)&v9[*(int *)(v7 + 24)], (uint64_t)v15, &qword_1000B93A0);
    sub_100027D34((uint64_t)v9, type metadata accessor for Item.Headline);
  }
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48))(v15, 1, v16) == 1)
  {
    sub_10002CCF4((uint64_t)v15, &qword_1000B93A0);
    v61 = v22;
    v62 = v53;
    v63 = v54;
    v64 = v55;
    v65 = v56;
    v66 = v57;
    v67 = v58;
    v23 = sub_10001B520(&qword_1000BA9D8);
    v24 = sub_1000540B8((unint64_t *)&qword_1000BA9D0, &qword_1000BA9D8);
    result = AnyView.init<A>(_:)(&v61, v23, v24);
    v26 = result;
  }
  else
  {
    v27 = v59;
    (*(void (**)(char *, char *, uint64_t))(v17 + 32))(v59, v15, v16);
    v28 = (*(uint64_t (**)(char *, char *, uint64_t))(v17 + 16))(v20, v27, v16);
    v45 = v22;
    v61 = v22;
    v62 = v53;
    v63 = v54;
    v64 = v55;
    v65 = v56;
    v66 = v57;
    v67 = v58;
    __chkstk_darwin(v28);
    *(&v44 - 2) = (uint64_t)&v61;
    swift_retain(v22);
    v29 = sub_10001B520(&qword_1000BA9D8);
    v30 = sub_1000540B8((unint64_t *)&qword_1000BA9D0, &qword_1000BA9D8);
    v31 = v49;
    Link.init(sensitiveUrl:label:)(v20, sub_100054114, &v44 - 4, v29, v30);
    swift_release(v61);
    v32 = sub_100053B8C(v46);
    v34 = v33;
    v36 = v35;
    v38 = v37 & 1;
    v39 = sub_10002CE94(&qword_1000BB538, &qword_1000BB528, (uint64_t)&protocol conformance descriptor for Link<A>);
    v40 = v48;
    v41 = v52;
    View.accessibilityLabel(_:)(v32, v34, v38, v36, v52, v39);
    sub_1000249D8(v32, v34, v38);
    swift_bridgeObjectRelease(v36);
    (*(void (**)(char *, uint64_t))(v51 + 8))(v31, v41);
    v42 = sub_100054144();
    v26 = AnyView.init<A>(_:)(v40, v50, v42);
    v43 = swift_release(v45);
    result = (*(uint64_t (**)(char *, uint64_t, __n128))(v17 + 8))(v59, v16, v43);
  }
  *v60 = v26;
  return result;
}

uint64_t sub_100052EF4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  void **v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  char *v29;
  uint64_t (*v30)(_QWORD);
  uint64_t v31;
  uint64_t v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  ValueMetadata *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  double v41;
  char v42;
  uint64_t v43;
  char v44;
  double v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  __int128 v57;
  uint64_t result;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  void *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  void *v69;
  void *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t *v74;
  uint64_t v75;
  uint64_t v76;
  void *v77;
  id v78;
  id v79;
  id v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  _QWORD *v84;
  uint64_t v85;
  _QWORD *v86;
  uint64_t v87;
  uint64_t v88;
  char v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  id v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  id v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  char v108;
  uint64_t v109;
  uint64_t v110;
  int *v111;
  uint64_t *v112;
  uint64_t v113;
  uint64_t *v114;
  uint64_t v115;
  char *v116;
  uint64_t v117;
  id v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  char v125;
  uint64_t v126;
  char v127;
  char v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  char *v140;
  uint64_t v141;
  uint64_t v142;
  int v143;
  id v144;
  id v145;
  id v146;
  int v147;
  uint64_t v148;
  uint64_t v149;
  _QWORD *v150;
  char *v151;
  int *v152;
  char *v153;
  uint64_t v154;
  uint64_t v155;
  char *v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  ValueMetadata *v168;
  __int128 v169;
  uint64_t v170;
  uint64_t v171;
  char v172;
  double v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  char v177;

  v160 = a2;
  v3 = sub_10001B520(&qword_1000B9A28);
  __chkstk_darwin(v3);
  v156 = (char *)&v140 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for Section(0);
  v155 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v158 = (uint64_t)&v140 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v161 = type metadata accessor for SectionView(0);
  v7 = __chkstk_darwin(v161);
  v154 = (uint64_t)&v140 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v159 = (uint64_t)&v140 - v9;
  v157 = type metadata accessor for TodayContent(0);
  __chkstk_darwin(v157);
  v162 = (uint64_t)&v140 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for HeadlineCell(0);
  __chkstk_darwin(v11);
  v13 = (char *)&v140 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for Item.Headline(0);
  v15 = __chkstk_darwin(v14);
  v17 = (char *)&v140 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  v19 = (void **)((char *)&v140 - v18);
  v20 = type metadata accessor for Item(0);
  v21 = *(_QWORD *)(v20 - 8);
  v22 = __chkstk_darwin(v20);
  v24 = (char *)&v140 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = __chkstk_darwin(v22);
  v27 = (char *)&v140 - v26;
  __chkstk_darwin(v25);
  v29 = (char *)&v140 - v28;
  sub_10002A83C(a1, (uint64_t)&v140 - v28, v30);
  if (swift_getEnumCaseMultiPayload(v29, v20) == 1)
  {
    v31 = *(_QWORD *)v29;
    v32 = *((_QWORD *)v29 + 1);
    v33 = v29[16];
    v34 = *((_QWORD *)v29 + 3);
    v35 = static HorizontalAlignment.center.getter();
    v36 = (void *)objc_opt_self(UIColor);
    v37 = (ValueMetadata *)v31;
    v159 = v31;
    sub_100024770(v31, v32, v33);
    v38 = v34;
    v162 = v34;
    swift_bridgeObjectRetain(v34);
    v39 = Color.init(_:)(objc_msgSend(v36, "secondaryLabelColor"));
    v40 = v163 + *(int *)(v161 + 24);
    v41 = *(double *)(v40 + 136);
    v42 = static Edge.Set.all.getter(v39);
    v43 = v160;
    v44 = v42;
    v45 = EdgeInsets.init(_all:)(v41);
    v165 = v35;
    v166 = 0;
    LOBYTE(v167) = 1;
    v168 = v37;
    *(_QWORD *)&v169 = v32;
    BYTE8(v169) = v33;
    v170 = v38;
    v171 = v39;
    v172 = v44;
    v173 = v45;
    v174 = v46;
    v175 = v47;
    v176 = v48;
    v177 = 0;
    v49 = sub_10001B520(&qword_1000BB548);
    v50 = sub_1000541E0();
    v51 = AnyView.init<A>(_:)(&v165, v49, v50);
    v52 = *(_QWORD *)(v40 + 8);
    v53 = static Alignment.center.getter(v51);
    _FrameLayout.init(width:height:alignment:)(&v165, 0, 1, v52, 0, v53, v54);
    v55 = v165;
    LOBYTE(v52) = v166;
    v56 = v167;
    LOBYTE(v37) = (_BYTE)v168;
    v57 = v169;
    swift_retain(v51);
    sub_1000249D8(v159, v32, v33);
    swift_release(v51);
    result = swift_bridgeObjectRelease(v162);
    *(_QWORD *)v43 = v51;
    *(_QWORD *)(v43 + 8) = v55;
    *(_BYTE *)(v43 + 16) = v52;
    *(_QWORD *)(v43 + 24) = v56;
    *(_BYTE *)(v43 + 32) = (_BYTE)v37;
    *(_OWORD *)(v43 + 40) = v57;
    return result;
  }
  v141 = v21;
  v140 = v24;
  v153 = v27;
  v142 = a1;
  v150 = v13;
  v152 = (int *)v11;
  sub_10002AC74((uint64_t)v29, (uint64_t)v19, type metadata accessor for Item.Headline);
  v151 = v17;
  sub_10002A83C((uint64_t)v19, (uint64_t)v17, type metadata accessor for Item.Headline);
  v59 = v161;
  v60 = v163;
  v61 = v163 + *(int *)(v161 + 20);
  sub_10002A83C(v61, v162, type metadata accessor for TodayContent);
  v62 = v59;
  v63 = v60 + *(int *)(v59 + 24);
  v64 = *(void **)(v63 + 40);
  v65 = *(_QWORD *)(v63 + 48);
  v149 = *(_QWORD *)(v63 + 56);
  v148 = *(_QWORD *)(v63 + 64);
  v147 = *(unsigned __int8 *)(v63 + 72);
  v66 = *(_QWORD *)(v63 + 80);
  v67 = *(_QWORD *)(v63 + 88);
  v68 = *(_QWORD *)(v63 + 96);
  v70 = *(void **)(v63 + 104);
  v69 = *(void **)(v63 + 112);
  v71 = *(_QWORD *)(v63 + 120);
  v72 = *(_QWORD *)(v63 + 128);
  v73 = *(_QWORD *)(v63 + 136);
  v74 = (uint64_t *)(v61 + *(int *)(v157 + 44));
  v75 = *v74;
  v76 = v74[1];
  v157 = (uint64_t)v19;
  v77 = *v19;
  swift_bridgeObjectRetain(v76);
  v145 = v64;
  v78 = v70;
  v79 = v69;
  v80 = objc_msgSend(v77, "identifier");
  v81 = static String._unconditionallyBridgeFromObjectiveC(_:)(v80);
  v83 = v82;

  v146 = v78;
  v144 = v79;
  if (v76)
  {
    v84 = v150;
    if (v75 == v81 && v76 == v83)
      v143 = 1;
    else
      v143 = _stringCompareWithSmolCheck(_:_:expecting:)(v75, v76, v81, v83, 0);
    v85 = v160;
    v86 = v156;
    v87 = v163;
    v88 = v155;
    swift_bridgeObjectRelease(v76);
  }
  else
  {
    v143 = 0;
    v85 = v160;
    v86 = v156;
    v84 = v150;
    v87 = v163;
    v88 = v155;
  }
  swift_bridgeObjectRelease(v83);
  v168 = &type metadata for FeatureFlags.NewsWidget;
  *(_QWORD *)&v169 = sub_100054264();
  v89 = isFeatureEnabled(_:)(&v165);
  sub_10001DA60(&v165);
  v90 = v159;
  sub_10002A83C(v87, v159, type metadata accessor for SectionView);
  v91 = v158;
  if ((v89 & 1) == 0)
  {
    sub_100027D34(v90, type metadata accessor for SectionView);
    v98 = v157;
    v99 = v154;
LABEL_20:
    v107 = v142;
    sub_10002A83C(v87, v99, type metadata accessor for SectionView);
    v105 = (uint64_t)v153;
    sub_10002A83C(v107, (uint64_t)v153, type metadata accessor for Item);
    goto LABEL_21;
  }
  v92 = *(_QWORD *)(v90 + *(int *)(v62 + 20) + 8);
  v93 = *(_QWORD *)(v92 + 16);
  if (v93)
  {
    sub_10002A83C(v92+ ((*(unsigned __int8 *)(v88 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v88 + 80))+ *(_QWORD *)(v88 + 72) * (v93 - 1), v158, type metadata accessor for Section);
    v94 = objc_msgSend(*(id *)(v91 + 8), "identifier");
    v95 = static String._unconditionallyBridgeFromObjectiveC(_:)(v94);
    v97 = v96;

    sub_100027D34(v91, type metadata accessor for Section);
  }
  else
  {
    v95 = 0;
    v97 = 0;
  }
  v100 = v90;
  v101 = objc_msgSend(*(id *)(v90 + 8), "identifier");
  v102 = static String._unconditionallyBridgeFromObjectiveC(_:)(v101);
  v104 = v103;

  if (!v97)
  {
    sub_100027D34(v100, type metadata accessor for SectionView);
    swift_bridgeObjectRelease(v104);
    v98 = v157;
    v99 = v154;
    v87 = v163;
    goto LABEL_20;
  }
  if (v95 != v102 || v97 != v104)
  {
    v128 = _stringCompareWithSmolCheck(_:_:expecting:)(v95, v97, v102, v104, 0);
    swift_bridgeObjectRelease(v104);
    sub_100027D34(v159, type metadata accessor for SectionView);
    swift_bridgeObjectRelease(v97);
    v99 = v154;
    sub_10002A83C(v163, v154, type metadata accessor for SectionView);
    v105 = (uint64_t)v153;
    sub_10002A83C(v142, (uint64_t)v153, type metadata accessor for Item);
    v98 = v157;
    v106 = v141;
    if ((v128 & 1) != 0)
      goto LABEL_25;
LABEL_21:
    sub_100027D34(v105, type metadata accessor for Item);
    sub_100027D34(v99, type metadata accessor for SectionView);
    goto LABEL_22;
  }
  swift_bridgeObjectRelease(v104);
  sub_100027D34(v159, type metadata accessor for SectionView);
  swift_bridgeObjectRelease(v97);
  v99 = v154;
  sub_10002A83C(v163, v154, type metadata accessor for SectionView);
  v105 = (uint64_t)v153;
  sub_10002A83C(v142, (uint64_t)v153, type metadata accessor for Item);
  v98 = v157;
  v106 = v141;
LABEL_25:
  v129 = *(_QWORD *)(v99 + 16);
  v130 = *(_QWORD *)(v129 + 16);
  if (v130)
  {
    v131 = (uint64_t)v140;
    sub_10002A83C(v129+ ((*(unsigned __int8 *)(v106 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v106 + 80))+ *(_QWORD *)(v106 + 72) * (v130 - 1), (uint64_t)v140, type metadata accessor for Item);
    v132 = sub_1000792E8();
    v134 = v133;
    sub_100027D34(v131, type metadata accessor for Item);
    v135 = sub_1000792E8();
    v137 = v136;
    if (v134)
    {
      if (v132 == v135 && v134 == v136)
      {
        swift_bridgeObjectRelease(v134);
        v108 = 1;
      }
      else
      {
        v108 = _stringCompareWithSmolCheck(_:_:expecting:)(v132, v134, v135, v136, 0);
        swift_bridgeObjectRelease(v137);
      }
      v98 = v157;
      sub_100027D34((uint64_t)v153, type metadata accessor for Item);
      sub_100027D34(v99, type metadata accessor for SectionView);
      swift_bridgeObjectRelease(v134);
      goto LABEL_23;
    }
    v98 = v157;
    v138 = (uint64_t)v153;
  }
  else
  {
    sub_1000792E8();
    v138 = v105;
    v137 = v139;
  }
  sub_100027D34(v138, type metadata accessor for Item);
  sub_100027D34(v99, type metadata accessor for SectionView);
  swift_bridgeObjectRelease(v137);
LABEL_22:
  v108 = 0;
LABEL_23:
  *v86 = swift_getKeyPath(&unk_10008C4C0);
  v109 = sub_10001B520(&qword_1000B9A20);
  swift_storeEnumTagMultiPayload(v86, v109, 0);
  *v84 = swift_getKeyPath(&unk_10008C4F0);
  v110 = sub_10001B520(&qword_1000B9B20);
  swift_storeEnumTagMultiPayload(v84, v110, 0);
  v111 = v152;
  sub_10002CB18((uint64_t)v86, (uint64_t)v84 + v152[5], &qword_1000B9A28);
  v112 = (_QWORD *)((char *)v84 + v111[6]);
  v164 = 0;
  State.init(wrappedValue:)(&v165, &v164, &type metadata for CGFloat);
  v113 = v166;
  *v112 = v165;
  v112[1] = v113;
  v114 = (_QWORD *)((char *)v84 + v111[7]);
  v164 = 0;
  State.init(wrappedValue:)(&v165, &v164, &type metadata for CGFloat);
  v115 = v166;
  *v114 = v165;
  v114[1] = v115;
  sub_10002AC74((uint64_t)v151, (uint64_t)v84 + v111[8], type metadata accessor for Item.Headline);
  sub_10002AC74(v162, (uint64_t)v84 + v111[9], type metadata accessor for TodayContent);
  v116 = (char *)v84 + v111[10];
  *(_QWORD *)v116 = v145;
  *((_QWORD *)v116 + 1) = v65;
  v117 = v148;
  *((_QWORD *)v116 + 2) = v149;
  *((_QWORD *)v116 + 3) = v117;
  v116[32] = v147;
  *((_QWORD *)v116 + 5) = v66;
  *((_QWORD *)v116 + 6) = v67;
  *((_QWORD *)v116 + 7) = v68;
  v118 = v144;
  *((_QWORD *)v116 + 8) = v146;
  *((_QWORD *)v116 + 9) = v118;
  *((_QWORD *)v116 + 10) = v71;
  *((_QWORD *)v116 + 11) = v72;
  *((_QWORD *)v116 + 12) = v73;
  *((_BYTE *)v84 + v111[11]) = v143 & 1;
  *((_BYTE *)v84 + v111[12]) = v108 & 1;
  v119 = sub_10001C96C(&qword_1000BB570, type metadata accessor for HeadlineCell, (uint64_t)&unk_10008B7B0);
  v120 = AnyView.init<A>(_:)(v84, v111, v119);
  v121 = *(_QWORD *)(v63 + 8);
  v122 = static Alignment.center.getter(v120);
  _FrameLayout.init(width:height:alignment:)(&v165, 0, 1, v121, 0, v122, v123);
  v124 = v165;
  v125 = v166;
  v126 = v167;
  v127 = (char)v168;
  *(_QWORD *)v85 = v120;
  *(_QWORD *)(v85 + 8) = v124;
  *(_BYTE *)(v85 + 16) = v125;
  *(_QWORD *)(v85 + 24) = v126;
  *(_BYTE *)(v85 + 32) = v127;
  *(_OWORD *)(v85 + 40) = v169;
  return sub_100027D34(v98, type metadata accessor for Item.Headline);
}

uint64_t sub_100053B8C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  id *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t (*v8)(_QWORD);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  id v13;
  void *v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  id v18;
  void *v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  _QWORD v31[3];

  v2 = type metadata accessor for Item.Headline(0);
  __chkstk_darwin(v2);
  v4 = (id *)((char *)&v31[-1] - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  v5 = type metadata accessor for Item(0);
  __chkstk_darwin(v5);
  v7 = (char *)&v31[-1] - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10002A83C(a1, (uint64_t)v7, v8);
  if (swift_getEnumCaseMultiPayload(v7, v5) == 1)
    return *(_QWORD *)v7;
  sub_10002AC74((uint64_t)v7, (uint64_t)v4, type metadata accessor for Item.Headline);
  v10 = sub_10001B520(&qword_1000B99A0);
  v11 = swift_allocObject(v10, 64, 7);
  *(_OWORD *)(v11 + 16) = xmmword_10008AC80;
  v12 = *v4;
  v13 = objc_msgSend(*v4, "title");
  if (v13)
  {
    v14 = v13;
    v15 = static String._unconditionallyBridgeFromObjectiveC(_:)(v13);
    v17 = v16;

  }
  else
  {
    v15 = 0;
    v17 = 0xE000000000000000;
  }
  *(_QWORD *)(v11 + 32) = v15;
  *(_QWORD *)(v11 + 40) = v17;
  v18 = objc_msgSend(v12, "sourceName");
  if (v18)
  {
    v19 = v18;
    v20 = static String._unconditionallyBridgeFromObjectiveC(_:)(v18);
    v22 = v21;

  }
  else
  {
    v20 = 0;
    v22 = 0xE000000000000000;
  }
  *(_QWORD *)(v11 + 48) = v20;
  *(_QWORD *)(v11 + 56) = v22;
  v31[0] = v11;
  v23 = sub_10001B520(&qword_1000B99B0);
  v24 = sub_10002CE94((unint64_t *)&qword_1000B99B8, &qword_1000B99B0, (uint64_t)&protocol conformance descriptor for [A]);
  v25 = BidirectionalCollection<>.joined(separator:)(8236, 0xE200000000000000, v23, v24);
  v27 = v26;
  swift_bridgeObjectRelease(v11);
  v31[0] = v25;
  v31[1] = v27;
  v28 = sub_10002ACB8();
  v9 = Text.init<A>(_:)(v31, &type metadata for String, v28);
  sub_100027D34((uint64_t)v4, type metadata accessor for Item.Headline);
  return v9;
}

void sub_100053DC8(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  *a1 = static Alignment.bottom.getter();
  a1[1] = v3;
  v4 = sub_10001B520(&qword_1000BB4C8);
  sub_100052140(v1, (_QWORD *)((char *)a1 + *(int *)(v4 + 44)));
}

uint64_t sub_100053E08@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = sub_1000792E8();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t sub_100053E30()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int (*v10)(uint64_t, uint64_t, uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int *v15;
  uint64_t v16;
  id *v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;
  uint64_t v23;

  v1 = (int *)type metadata accessor for SectionView(0);
  v2 = *((_QWORD *)v1 - 1);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v22 = *(_QWORD *)(v2 + 64);
  v23 = v0;
  v5 = v0 + v4;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v4 + 16));
  v6 = type metadata accessor for Section(0);
  v7 = v0 + v4 + *(int *)(v6 + 32);
  v8 = type metadata accessor for URL(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48);
  if (!v10(v7, 1, v8))
    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v7, v8);
  v11 = v5 + *(int *)(v6 + 36);
  v12 = type metadata accessor for Date(0);
  v13 = *(_QWORD *)(v12 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12))
    (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v11, v12);
  v14 = v5 + v1[5];

  swift_bridgeObjectRelease(*(_QWORD *)(v14 + 8));
  swift_unknownObjectRelease(*(_QWORD *)(v14 + 16));
  v15 = (int *)type metadata accessor for TodayContent(0);
  v16 = v14 + v15[8];
  if (!v10(v16, 1, v8))
    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v16, v8);
  swift_release(*(_QWORD *)(v14 + v15[9]));
  swift_bridgeObjectRelease(*(_QWORD *)(v14 + v15[10] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v14 + v15[11] + 8));
  v17 = (id *)(v5 + v1[6]);

  sub_10002C790(*(_QWORD *)(v5 + v1[7]), *(_BYTE *)(v5 + v1[7] + 8));
  v18 = (_QWORD *)(v5 + v1[8]);
  v19 = sub_10001B520(&qword_1000BAC80);
  if (swift_getEnumCaseMultiPayload(v18, v19) == 1)
  {
    v20 = type metadata accessor for ColorScheme(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v20 - 8) + 8))(v18, v20);
  }
  else
  {
    swift_release(*v18);
  }
  return swift_deallocObject(v23, v4 + v22, v3 | 7);
}

uint64_t sub_100054058@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t result;
  uint64_t v5;

  type metadata accessor for SectionView(0);
  result = sub_1000529F8(a1, &v5);
  *a2 = v5;
  return result;
}

uint64_t sub_1000540B8(unint64_t *a1, uint64_t *a2)
{
  uint64_t result;
  uint64_t v4;

  result = *a1;
  if (!result)
  {
    v4 = sub_10001B560(a2);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v4);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100054114@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  char v7;

  v2 = *(uint64_t **)(v1 + 16);
  v3 = *v2;
  v4 = v2[1];
  v5 = *((_BYTE *)v2 + 16);
  v6 = v2[3];
  v7 = *((_BYTE *)v2 + 32);
  *(_QWORD *)a1 = *v2;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 24) = v6;
  *(_BYTE *)(a1 + 32) = v7;
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(v2 + 5);
  return swift_retain(v3);
}

unint64_t sub_100054144()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000BB540;
  if (!qword_1000BB540)
  {
    v1 = sub_10001B560(&qword_1000BB530);
    sub_10002CE94(&qword_1000BB538, &qword_1000BB528, (uint64_t)&protocol conformance descriptor for Link<A>);
    sub_10001C96C((unint64_t *)&qword_1000B9BD8, (uint64_t (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier, (uint64_t)&protocol conformance descriptor for AccessibilityAttachmentModifier);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000BB540);
  }
  return result;
}

unint64_t sub_1000541E0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000BB550;
  if (!qword_1000BB550)
  {
    v1 = sub_10001B560(&qword_1000BB548);
    sub_10002CE94(&qword_1000BB558, &qword_1000BB560, (uint64_t)&protocol conformance descriptor for VStack<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000BB550);
  }
  return result;
}

unint64_t sub_100054264()
{
  unint64_t result;

  result = qword_1000BB568;
  if (!qword_1000BB568)
  {
    result = swift_getWitnessTable(&unk_10008CF08, &type metadata for FeatureFlags.NewsWidget);
    atomic_store(result, (unint64_t *)&qword_1000BB568);
  }
  return result;
}

void destroy for SectionView.LayoutOptions(id *a1)
{

}

uint64_t initializeWithCopy for SectionView.LayoutOptions(uint64_t a1, uint64_t a2)
{
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  id v7;
  id v8;
  id v9;
  id v10;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  v3 = *(void **)(a2 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v3;
  v4 = *(void **)(a2 + 40);
  *(_QWORD *)(a1 + 40) = v4;
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 57) = *(_OWORD *)(a2 + 57);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  v5 = *(void **)(a2 + 104);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 104) = v5;
  v6 = *(void **)(a2 + 112);
  *(_QWORD *)(a1 + 112) = v6;
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
  v7 = v3;
  v8 = v4;
  v9 = v5;
  v10 = v6;
  return a1;
}

uint64_t assignWithCopy for SectionView.LayoutOptions(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  id v6;
  void *v7;
  void *v8;
  id v9;
  __int128 v10;
  void *v11;
  void *v12;
  id v13;
  void *v14;
  void *v15;
  id v16;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  v4 = *(void **)(a2 + 32);
  v5 = *(void **)(a1 + 32);
  *(_QWORD *)(a1 + 32) = v4;
  v6 = v4;

  v7 = *(void **)(a2 + 40);
  v8 = *(void **)(a1 + 40);
  *(_QWORD *)(a1 + 40) = v7;
  v9 = v7;

  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  v10 = *(_OWORD *)(a2 + 56);
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  *(_OWORD *)(a1 + 56) = v10;
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  v11 = *(void **)(a2 + 104);
  v12 = *(void **)(a1 + 104);
  *(_QWORD *)(a1 + 104) = v11;
  v13 = v11;

  v14 = *(void **)(a2 + 112);
  v15 = *(void **)(a1 + 112);
  *(_QWORD *)(a1 + 112) = v14;
  v16 = v14;

  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  return a1;
}

__n128 initializeWithTake for SectionView.LayoutOptions(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __n128 result;
  __int128 v7;
  __int128 v8;

  v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  v3 = *(_OWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 48);
  v5 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v5;
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = v4;
  result = *(__n128 *)(a2 + 96);
  v7 = *(_OWORD *)(a2 + 112);
  v8 = *(_OWORD *)(a2 + 128);
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 112) = v7;
  *(_OWORD *)(a1 + 128) = v8;
  *(__n128 *)(a1 + 96) = result;
  return result;
}

uint64_t assignWithTake for SectionView.LayoutOptions(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);

  v4 = *(void **)(a1 + 40);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);

  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);

  v5 = *(void **)(a1 + 112);
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);

  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
  return a1;
}

uint64_t getEnumTagSinglePayload for SectionView.LayoutOptions(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 152))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 32);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for SectionView.LayoutOptions(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 152) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 32) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 152) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for SectionView.LayoutOptions()
{
  return &type metadata for SectionView.LayoutOptions;
}

uint64_t sub_100054600()
{
  return sub_10002CE94(&qword_1000BB578, &qword_1000BB580, (uint64_t)&protocol conformance descriptor for ZStack<A>);
}

ValueMetadata *type metadata accessor for AudioBadgeView()
{
  return &type metadata for AudioBadgeView;
}

uint64_t sub_10005463C(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_10009CDA8, 1);
}

double sub_10005464C@<D0>(uint64_t a1@<X8>)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  double result;

  v3 = *v1;
  v4 = swift_retain(v3);
  v5 = static Color.black.getter(v4);
  v6 = Color.opacity(_:)(0.05);
  v7 = swift_release(v5);
  v8 = static Color.black.getter(v7);
  v9 = Color.opacity(_:)(0.12);
  swift_release(v8);
  *(_QWORD *)a1 = v3;
  *(_WORD *)(a1 + 8) = 256;
  *(_QWORD *)(a1 + 16) = v6;
  *(_OWORD *)(a1 + 24) = xmmword_10008C540;
  *(_QWORD *)(a1 + 40) = 0x4000000000000000;
  *(_QWORD *)(a1 + 48) = v9;
  result = 10.0;
  *(_OWORD *)(a1 + 56) = xmmword_10008C550;
  *(_QWORD *)(a1 + 72) = 0x4000000000000000;
  return result;
}

uint64_t sub_1000546F8()
{
  return sub_10002A9F8(&qword_1000BB588, &qword_1000BB590, (void (*)(void))sub_100054724);
}

uint64_t sub_100054724()
{
  return sub_10002A9F8(&qword_1000BB598, &qword_1000BB5A0, (void (*)(void))sub_100054740);
}

unint64_t sub_100054740()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000BB5A8;
  if (!qword_1000BB5A8)
  {
    v1 = sub_10001B560(&qword_1000BB5B0);
    sub_10003D260();
    sub_1000547AC();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000BB5A8);
  }
  return result;
}

unint64_t sub_1000547AC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000BB5B8;
  if (!qword_1000BB5B8)
  {
    v1 = sub_10001B560(&qword_1000BB5C0);
    result = swift_getWitnessTable(&protocol conformance descriptor for _ClipEffect<A>, v1);
    atomic_store(result, (unint64_t *)&qword_1000BB5B8);
  }
  return result;
}

uint64_t Array.partitioned(using:)(uint64_t (*a1)(char *), uint64_t a2, void (*a3)(_QWORD, _QWORD, _QWORD), uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  Swift::Bool IsNativeType;
  unint64_t v24;
  char *v25;
  char v26;
  uint64_t v27;
  uint64_t WitnessTable;
  uint64_t v29;
  uint64_t result;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  void (*v38)(_QWORD, _QWORD, _QWORD);
  char *v39;
  uint64_t (*v40)(char *);
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;

  v5 = v4;
  v40 = a1;
  v41 = a2;
  v8 = *(_QWORD *)(a4 - 8);
  v9 = *(_QWORD *)(v8 + 64);
  v10 = __chkstk_darwin(a1);
  v39 = (char *)&v34 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __chkstk_darwin(v10);
  v43 = (char *)&v34 - v12;
  __chkstk_darwin(v11);
  v14 = (char *)&v34 - v13;
  v16 = type metadata accessor for Array(0, v15);
  v46 = ((uint64_t (*)(void))Array.init())();
  v17 = Array.init()(a4);
  v45 = v17;
  v18 = swift_bridgeObjectRetain(a3);
  if (Array.endIndex.getter(v18, a4))
  {
    v35 = v9;
    v36 = v14;
    v37 = v16;
    v38 = a3;
    v17 = 0;
    v19 = v16;
    while (1)
    {
      IsNativeType = Array._hoistableIsNativeTypeChecked()();
      Array._checkSubscript(_:wasNativeTypeChecked:)(v17, IsNativeType, a3, a4);
      if (IsNativeType)
      {
        v24 = (unint64_t)a3
            + ((*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80))
            + *(_QWORD *)(v8 + 72) * v17;
        a3 = *(void (**)(_QWORD, _QWORD, _QWORD))(v8 + 16);
        a3(v14, v24, a4);
        v16 = v17 + 1;
        if (__OFADD__(v17, 1))
          goto LABEL_13;
      }
      else
      {
        result = _ArrayBuffer._getElementSlowPath(_:)(v17, a3, a4);
        if (v35 != 8)
        {
          __break(1u);
          return result;
        }
        v31 = result;
        v44 = result;
        a3 = *(void (**)(_QWORD, _QWORD, _QWORD))(v8 + 16);
        a3(v14, &v44, a4);
        swift_unknownObjectRelease(v31);
        v16 = v17 + 1;
        if (__OFADD__(v17, 1))
        {
LABEL_13:
          __break(1u);
          break;
        }
      }
      v25 = v43;
      (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v43, v14, a4);
      v26 = v40(v25);
      if (v5)
      {
        (*(void (**)(char *, uint64_t))(v8 + 8))(v43, a4);
        swift_bridgeObjectRelease(v38);
        swift_bridgeObjectRelease(v45);
        return swift_bridgeObjectRelease(v46);
      }
      v42 = 0;
      if ((v26 & 1) != 0)
      {
        v27 = v45;
        v44 = v45;
        WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for [A], v19);
        if ((Collection.isEmpty.getter(v19, WitnessTable) & 1) == 0)
        {
          v44 = v27;
          v29 = type metadata accessor for Array(0, v19);
          swift_bridgeObjectRetain(v27);
          Array.append(_:)(&v44, v29);
          Array.removeAll(keepingCapacity:)(0);
        }
      }
      v20 = v39;
      v21 = v43;
      a3(v39, v43, a4);
      Array.append(_:)(v20, v19);
      (*(void (**)(char *, uint64_t))(v8 + 8))(v21, a4);
      a3 = v38;
      v22 = Array.endIndex.getter(v38, a4);
      ++v17;
      v5 = v42;
      v14 = v36;
      if (v16 == v22)
      {
        swift_bridgeObjectRelease(a3);
        v17 = v45;
        v16 = v37;
        goto LABEL_17;
      }
    }
  }
  swift_bridgeObjectRelease(a3);
LABEL_17:
  v44 = v17;
  v32 = swift_getWitnessTable(&protocol conformance descriptor for [A], v16);
  if ((Collection.isEmpty.getter(v16, v32) & 1) != 0)
  {
    swift_bridgeObjectRelease(v17);
  }
  else
  {
    v44 = v17;
    v33 = type metadata accessor for Array(0, v16);
    Array.append(_:)(&v44, v33);
  }
  return v46;
}

uint64_t sub_100054B50@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t result;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  void *v53;
  uint64_t v54;
  uint64_t v55;
  int v56;
  uint64_t v57;
  int *v58;
  char *v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  _BYTE v69[40];
  __int128 v70[2];
  __int128 v71;
  __int128 v72;
  uint64_t v73;

  v64 = a1;
  v65 = a3;
  v67 = a4;
  v62 = type metadata accessor for EngagementEvent(0);
  v61 = *(_QWORD *)(v62 - 8);
  __chkstk_darwin(v62);
  v68 = (uint64_t)&v59 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_10001B520(&qword_1000BA258);
  __chkstk_darwin(v6);
  v8 = (char *)&v59 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v63 = type metadata accessor for DisappearanceEvent(0);
  v9 = *(_QWORD *)(v63 - 8);
  __chkstk_darwin(v63);
  v11 = (char *)&v59 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_10001B520(&qword_1000BB668);
  v13 = __chkstk_darwin(v12);
  v15 = (char *)&v59 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  v66 = (uint64_t)&v59 - v16;
  v17 = sub_10001B520(&qword_1000BB670);
  __chkstk_darwin(v17);
  v19 = (char *)&v59 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = type metadata accessor for AppearanceEvent(0);
  v21 = *(_QWORD *)(v20 - 8);
  __chkstk_darwin(v20);
  v23 = (char *)&v59 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = *(_QWORD *)(a2 + 16);
  if (!v24)
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v21 + 56))(v19, 1, 1, v20);
    goto LABEL_6;
  }
  v25 = (uint64_t)v23;
  v59 = v8;
  v60 = v11;
  v26 = a2 + 32;
  sub_100030244(a2 + 32, (uint64_t)&v71);
  v27 = sub_10001B520(&qword_1000B9A00);
  v28 = swift_dynamicCast(v19, &v71, v27, v20, 6);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v21 + 56))(v19, v28 ^ 1u, 1, v20);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v21 + 48))(v19, 1, v20) == 1)
  {
LABEL_6:
    v36 = sub_10002CCF4((uint64_t)v19, &qword_1000BB670);
    v37 = static os_log_type_t.error.getter(v36);
    v38 = sub_10002D800();
    v39 = (void *)static OS_os_log.default.getter(v38);
    os_log(_:dso:log:type:_:)("discarding batch because it has no appearance event", 51, 2, &_mh_execute_header, v39, v37, _swiftEmptyArrayStorage);

LABEL_15:
    v54 = type metadata accessor for Session(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v54 - 8) + 56))(v67, 1, 1, v54);
  }
  v29 = v25;
  sub_10002AC74((uint64_t)v19, v25, type metadata accessor for AppearanceEvent);
  v30 = v66;
  sub_1000551B0(a2, v64, v65, v66);
  sub_10002CCB0(v30, (uint64_t)v15, &qword_1000BB668);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v15, 1, v63) == 1)
  {
    v31 = sub_10002CCF4((uint64_t)v15, &qword_1000BB668);
    v32 = static os_log_type_t.error.getter(v31);
    v33 = sub_10002D800();
    v34 = (void *)static OS_os_log.default.getter(v33);
    os_log(_:dso:log:type:_:)("discarding batch because it has no disappearance event", 54, 2, &_mh_execute_header, v34, v32, _swiftEmptyArrayStorage);

    v35 = v30;
LABEL_14:
    sub_10002CCF4(v35, &qword_1000BB668);
    sub_100027D34(v29, type metadata accessor for AppearanceEvent);
    goto LABEL_15;
  }
  v40 = a2;
  v41 = (uint64_t)v60;
  sub_10002AC74((uint64_t)v15, (uint64_t)v60, type metadata accessor for DisappearanceEvent);
  v42 = swift_bridgeObjectRetain(a2);
  v43 = sub_1000553B0(v42, a2 + 32, 1, (2 * v24) | 1, v29);
  v44 = v43;
  if (!*(_QWORD *)(v43 + 16))
  {
    v50 = swift_bridgeObjectRelease(v43);
    v51 = static os_log_type_t.error.getter(v50);
    v52 = sub_10002D800();
    v53 = (void *)static OS_os_log.default.getter(v52);
    os_log(_:dso:log:type:_:)("discarding batch because it has no visible rect changed events", 62, 2, &_mh_execute_header, v53, v51, _swiftEmptyArrayStorage);

    swift_bridgeObjectRelease(v40);
    sub_100027D34(v41, type metadata accessor for DisappearanceEvent);
    v35 = v66;
    goto LABEL_14;
  }
  result = swift_bridgeObjectRetain(a2);
  v46 = 0;
  v47 = v62;
  v48 = v66;
  while (1)
  {
    v49 = v46 + 1;
    if (__OFADD__(v46, 1))
    {
      __break(1u);
      return result;
    }
    sub_100030244(v26, (uint64_t)v70);
    sub_100030244((uint64_t)v70, (uint64_t)v69);
    if (swift_dynamicCast(v68, v69, v27, v47, 6))
      break;
    result = sub_10001DA60(v70);
    ++v46;
    v26 += 40;
    if (v49 == v24)
    {
      swift_bridgeObjectRelease(v40);
      v73 = 0;
      v71 = 0u;
      v72 = 0u;
      goto LABEL_18;
    }
  }
  sub_100027D34(v68, type metadata accessor for EngagementEvent);
  swift_bridgeObjectRelease(v40);
  sub_100056ED8(v70, (uint64_t)&v71);
LABEL_18:
  swift_bridgeObjectRelease(v40);
  sub_10002CCF4(v48, &qword_1000BB668);
  if (*((_QWORD *)&v72 + 1))
  {
    v55 = (uint64_t)v59;
    v56 = swift_dynamicCast(v59, &v71, v27, v47, 6);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v61 + 56))(v55, v56 ^ 1u, 1, v47);
  }
  else
  {
    sub_10002CCF4((uint64_t)&v71, &qword_1000BB678);
    v55 = (uint64_t)v59;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v61 + 56))(v59, 1, 1, v47);
  }
  v57 = v67;
  sub_10002AC74(v29, v67, type metadata accessor for AppearanceEvent);
  v58 = (int *)type metadata accessor for Session(0);
  sub_10002CCB0(v55, v57 + v58[6], &qword_1000BA258);
  sub_10002AC74((uint64_t)v60, v57 + v58[7], type metadata accessor for DisappearanceEvent);
  *(_QWORD *)(v57 + v58[5]) = v44;
  (*(void (**)(uint64_t, _QWORD, uint64_t, int *))(*((_QWORD *)v58 - 1) + 56))(v57, 0, 1, v58);
  return sub_10002CCF4(v55, &qword_1000BA258);
}

uint64_t sub_1000551B0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t (*v18)(uint64_t, uint64_t, uint64_t, uint64_t);
  unint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _BYTE v27[40];

  v8 = sub_10001B520(&qword_1000BB668);
  __chkstk_darwin(v8);
  v10 = &v27[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v11 = type metadata accessor for DisappearanceEvent(0);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v14 = &v27[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v15 = *(_QWORD *)(a1 + 16);
  if (v15)
  {
    sub_100030244(a1 + 40 * v15 - 8, (uint64_t)v27);
    v16 = sub_10001B520(&qword_1000B9A00);
    v17 = swift_dynamicCast(v10, v27, v16, v11, 6);
    v18 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v12 + 56);
    v18((uint64_t)v10, v17 ^ 1u, 1, v11);
    if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11) != 1)
    {
      sub_10002AC74((uint64_t)v10, (uint64_t)v14, type metadata accessor for DisappearanceEvent);
      sub_10002AC74((uint64_t)v14, a4, type metadata accessor for DisappearanceEvent);
      goto LABEL_7;
    }
  }
  else
  {
    v18 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v12 + 56);
    v18((uint64_t)v10, 1, 1, v11);
  }
  sub_10002CCF4((uint64_t)v10, &qword_1000BB668);
  if (*(_QWORD *)(a3 + 16) - 1 != a2)
  {
    v23 = a4;
    v24 = 1;
    return v18(v23, v24, 1, v11);
  }
  v19 = sub_10002D800();
  v20 = (void *)static OS_os_log.default.getter(v19);
  v21 = static os_log_type_t.default.getter();
  os_log(_:dso:log:type:_:)("creating missing disappearance for most recent batch", 52, 2, &_mh_execute_header, v20, v21, _swiftEmptyArrayStorage);

  Date.init()(v22);
LABEL_7:
  v23 = a4;
  v24 = 0;
  return v18(v23, v24, 1, v11);
}

uint64_t sub_1000553B0(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t result;
  uint64_t v22;
  unint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  unint64_t v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  _BYTE v54[40];
  _QWORD v55[5];

  v53 = a5;
  v51 = a1;
  v8 = sub_10001B520(&qword_1000BB680);
  __chkstk_darwin(v8);
  v10 = (char *)&v48 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for VisibleRectChangedEvent(0);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = __chkstk_darwin(v11);
  v49 = (char *)&v48 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = __chkstk_darwin(v13);
  v17 = (char *)&v48 - v16;
  __chkstk_darwin(v15);
  v19 = (char *)&v48 - v18;
  v20 = type metadata accessor for AppearanceEvent(0);
  result = __chkstk_darwin(v20);
  v52 = (uint64_t)&v48 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = (a4 >> 1) - a3;
  v50 = result;
  if (a4 >> 1 == a3)
  {
    v24 = _swiftEmptyArrayStorage;
  }
  else
  {
    if ((uint64_t)(a4 >> 1) <= a3)
    {
      __break(1u);
      return result;
    }
    swift_unknownObjectRetain(v51);
    v25 = a2 + 40 * a3;
    v24 = _swiftEmptyArrayStorage;
    do
    {
      sub_100030244(v25, (uint64_t)v55);
      sub_100030244((uint64_t)v55, (uint64_t)v54);
      v26 = sub_10001B520(&qword_1000B9A00);
      v27 = swift_dynamicCast(v10, v54, v26, v11, 6);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v10, v27 ^ 1u, 1, v11);
      sub_10001DA60(v55);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11) == 1)
      {
        sub_10002CCF4((uint64_t)v10, &qword_1000BB680);
      }
      else
      {
        sub_10002AC74((uint64_t)v10, (uint64_t)v19, type metadata accessor for VisibleRectChangedEvent);
        sub_10002AC74((uint64_t)v19, (uint64_t)v17, type metadata accessor for VisibleRectChangedEvent);
        if ((swift_isUniquelyReferenced_nonNull_native(v24) & 1) == 0)
          v24 = (_QWORD *)sub_10005E1B8(0, v24[2] + 1, 1, (unint64_t)v24);
        v29 = v24[2];
        v28 = v24[3];
        if (v29 >= v28 >> 1)
          v24 = (_QWORD *)sub_10005E1B8(v28 > 1, v29 + 1, 1, (unint64_t)v24);
        v24[2] = v29 + 1;
        sub_10002AC74((uint64_t)v17, (uint64_t)v24+ ((*(unsigned __int8 *)(v12 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80))+ *(_QWORD *)(v12 + 72) * v29, type metadata accessor for VisibleRectChangedEvent);
      }
      v25 += 40;
      --v23;
    }
    while (v23);
    swift_unknownObjectRelease(v51);
  }
  v30 = v24[2];
  v31 = v52;
  v32 = v53;
  sub_100056F34(v53, v52);
  if (v30)
  {
    sub_100027D34(v31, type metadata accessor for AppearanceEvent);
  }
  else
  {
    v33 = *(unsigned __int8 *)(v31 + *(int *)(v50 + 24));
    sub_100027D34(v31, type metadata accessor for AppearanceEvent);
    if (v33 != 1)
    {
      swift_bridgeObjectRelease(v24);
      v34 = sub_10002D800();
      v35 = (void *)static OS_os_log.default.getter(v34);
      v36 = static os_log_type_t.default.getter();
      os_log(_:dso:log:type:_:)("creating visible rect changed event for location other than today view", 70, 2, &_mh_execute_header, v35, v36, _swiftEmptyArrayStorage);

      v37 = type metadata accessor for Date(0);
      v38 = (uint64_t)v49;
      (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v37 - 8) + 16))(v49, v32, v37);
      v39 = v38 + *(int *)(v11 + 20);
      *(_QWORD *)v39 = 0;
      *(_QWORD *)(v39 + 8) = 0;
      __asm { FMOV            V0.2D, #1.0 }
      *(_OWORD *)(v39 + 16) = _Q0;
      v45 = sub_10001B520(&qword_1000BBB10);
      v46 = *(unsigned __int8 *)(v12 + 80);
      v47 = (v46 + 32) & ~v46;
      v24 = (_QWORD *)swift_allocObject(v45, v47 + *(_QWORD *)(v12 + 72), v46 | 7);
      *((_OWORD *)v24 + 1) = xmmword_10008AC60;
      sub_10002AC74(v38, (uint64_t)v24 + v47, type metadata accessor for VisibleRectChangedEvent);
    }
  }
  return (uint64_t)v24;
}

Swift::Int sub_1000557B0(_QWORD *a1)
{
  _QWORD *v2;
  uint64_t v3;
  Swift::Int result;
  uint64_t v5[2];

  v2 = (_QWORD *)*a1;
  if ((swift_isUniquelyReferenced_nonNull_native(*a1) & 1) == 0)
    v2 = (_QWORD *)sub_100022C30(v2);
  v3 = v2[2];
  v5[0] = (uint64_t)(v2 + 4);
  v5[1] = v3;
  result = sub_100055818(v5);
  *a1 = v2;
  return result;
}

Swift::Int sub_100055818(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  char *v6;
  Swift::Int v7;
  Swift::Int result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  Swift::Int v13;
  char *v14;
  unint64_t v15;
  Swift::Int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void (*v23)(uint64_t, uint64_t);
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  Swift::Int v35;
  Swift::Int v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  Swift::Int v40;
  Swift::Int v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  __int128 v45;
  Swift::Int v46;
  uint64_t v47;
  Swift::Int v48;
  uint64_t v49;
  uint64_t *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  void (*v55)(char *, uint64_t);
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  __int128 v59;
  unint64_t v60;
  unint64_t v61;
  char *v62;
  char *v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  BOOL v75;
  unint64_t v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  BOOL v85;
  uint64_t v86;
  char v87;
  char *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  BOOL v92;
  uint64_t v93;
  uint64_t v94;
  char *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  char *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  unint64_t v103;
  uint64_t v104;
  Swift::Int v105;
  char *v106;
  char *v107;
  uint64_t v108;
  char *v109;
  unint64_t v110;
  char *v111;
  uint64_t v112;
  uint64_t v113;
  unint64_t v114;
  _QWORD *v115;
  _QWORD *v116;
  uint64_t v117;
  uint64_t v118;
  unint64_t v119;
  char *v120;
  uint64_t v121;
  uint64_t v122;
  char *v123;
  unint64_t v124;
  _QWORD *v125;
  Swift::Int v126;
  uint64_t v127;
  char *v128;
  Swift::Int v129;
  Swift::Int v130;
  char *v131;
  char *v132;
  Swift::Int v133;
  char *v134;
  uint64_t *v135;
  uint64_t v136;
  uint64_t v137;
  _QWORD v138[3];
  uint64_t v139;
  uint64_t v140;
  __int128 v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;

  v144 = type metadata accessor for Date(0);
  v137 = *(_QWORD *)(v144 - 8);
  v2 = __chkstk_darwin(v144);
  v4 = (char *)&v125 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v2);
  v6 = (char *)&v125 - v5;
  v7 = a1[1];
  result = _minimumMergeRunLength(_:)(v7);
  if (result >= v7)
  {
    if (v7 < 0)
      goto LABEL_137;
    if (v7)
      return sub_1000561EC(0, v7, 1, a1);
    return result;
  }
  if (v7 >= 0)
    v9 = v7;
  else
    v9 = v7 + 1;
  if (v7 < -1)
    goto LABEL_145;
  v126 = result;
  if (v7 < 2)
  {
    v134 = (char *)&_swiftEmptyArrayStorage[4];
    v125 = _swiftEmptyArrayStorage;
    if (v7 != 1)
    {
      v15 = _swiftEmptyArrayStorage[2];
      v14 = (char *)_swiftEmptyArrayStorage;
LABEL_103:
      v117 = v136;
      if (v15 >= 2)
      {
        v118 = *a1;
        do
        {
          v119 = v15 - 2;
          if (v15 < 2)
            goto LABEL_132;
          if (!v118)
            goto LABEL_144;
          v106 = v14;
          v120 = v14 + 32;
          v121 = *(_QWORD *)&v14[16 * v119 + 32];
          v122 = *(_QWORD *)&v14[16 * v15 + 24];
          sub_1000563F0((char *)(v118 + 40 * v121), (char *)(v118 + 40 * *(_QWORD *)&v120[16 * v15 - 16]), v118 + 40 * v122, v134);
          if (v117)
            goto LABEL_100;
          if (v122 < v121)
            goto LABEL_133;
          if ((swift_isUniquelyReferenced_nonNull_native(v106) & 1) == 0)
            v106 = sub_1000219B4((uint64_t)v106);
          if (v119 >= *((_QWORD *)v106 + 2))
            goto LABEL_134;
          v123 = &v106[16 * v119 + 32];
          *(_QWORD *)v123 = v121;
          *((_QWORD *)v123 + 1) = v122;
          v124 = *((_QWORD *)v106 + 2);
          if (v15 > v124)
            goto LABEL_135;
          v14 = v106;
          memmove(&v106[16 * v15 + 16], &v106[16 * v15 + 32], 16 * (v124 - v15));
          *((_QWORD *)v106 + 2) = v124 - 1;
          v15 = v124 - 1;
        }
        while (v124 > 2);
      }
      swift_bridgeObjectRelease(v14);
      v116 = v125;
      v125[2] = 0;
      return swift_bridgeObjectRelease(v116);
    }
  }
  else
  {
    v10 = v9 >> 1;
    v11 = sub_10001B520(&qword_1000B9A00);
    v12 = static Array._allocateBufferUninitialized(minimumCapacity:)(v10, v11);
    *(_QWORD *)(v12 + 16) = v10;
    v125 = (_QWORD *)v12;
    v134 = (char *)(v12 + 32);
  }
  v13 = 0;
  v14 = (char *)_swiftEmptyArrayStorage;
  v135 = a1;
  v131 = v6;
  v132 = v4;
  while (1)
  {
    v16 = v13++;
    v130 = v16;
    if (v13 >= v7)
      break;
    v17 = *a1;
    sub_100030244(*a1 + 40 * v13, (uint64_t)&v141);
    v18 = v17;
    sub_100030244(v17 + 40 * v16, (uint64_t)v138);
    v133 = v7;
    v20 = v142;
    v19 = v143;
    sub_10001D9B4(&v141, v142);
    (*(void (**)(uint64_t, uint64_t))(v19 + 8))(v20, v19);
    v21 = v139;
    v22 = v140;
    sub_10001D9B4(v138, v139);
    v23 = *(void (**)(uint64_t, uint64_t))(v22 + 8);
    v24 = v22;
    v7 = v133;
    v23(v21, v24);
    LODWORD(v129) = static Date.< infix(_:_:)(v6, v4);
    v25 = *(char **)(v137 + 8);
    v26 = v144;
    ((void (*)(char *, uint64_t))v25)(v4, v144);
    v128 = v25;
    ((void (*)(char *, uint64_t))v25)(v6, v26);
    sub_10001DA60(v138);
    sub_10001DA60(&v141);
    v127 = v18;
    if (v16 + 2 >= v7)
    {
      v13 = v16 + 2;
    }
    else
    {
      v27 = v18 + 40 * v16 + 40;
      v13 = v16 + 2;
      while (1)
      {
        v28 = v27 + 40;
        sub_100030244(v27 + 40, (uint64_t)&v141);
        sub_100030244(v27, (uint64_t)v138);
        v30 = v142;
        v29 = v143;
        sub_10001D9B4(&v141, v142);
        (*(void (**)(uint64_t, uint64_t))(v29 + 8))(v30, v29);
        v31 = v139;
        v32 = v140;
        sub_10001D9B4(v138, v139);
        (*(void (**)(uint64_t, uint64_t))(v32 + 8))(v31, v32);
        LODWORD(v31) = static Date.< infix(_:_:)(v6, v4);
        v33 = v144;
        v34 = v128;
        ((void (*)(char *, uint64_t))v128)(v4, v144);
        ((void (*)(char *, uint64_t))v34)(v6, v33);
        sub_10001DA60(v138);
        sub_10001DA60(&v141);
        if (((v129 ^ v31) & 1) != 0)
          break;
        ++v13;
        v27 = v28;
        v7 = v133;
        if (v133 == v13)
        {
          v13 = v133;
          goto LABEL_23;
        }
      }
      v7 = v133;
    }
LABEL_23:
    a1 = v135;
    if ((v129 & 1) == 0)
      break;
    if (v13 < v16)
      goto LABEL_138;
    if (v16 >= v13)
      break;
    v35 = v16;
    v36 = v13;
    v37 = v14;
    v38 = 40 * v36 - 40;
    v39 = 40 * v35;
    v40 = v36;
    v41 = v35;
    do
    {
      if (v41 != --v36)
      {
        if (!v127)
          goto LABEL_143;
        v42 = v127 + v39;
        v43 = v127 + v38;
        sub_100056ED8((__int128 *)(v127 + v39), (uint64_t)&v141);
        v44 = *(_QWORD *)(v43 + 32);
        v45 = *(_OWORD *)(v43 + 16);
        *(_OWORD *)v42 = *(_OWORD *)v43;
        *(_OWORD *)(v42 + 16) = v45;
        *(_QWORD *)(v42 + 32) = v44;
        sub_100056ED8(&v141, v43);
      }
      ++v41;
      v38 -= 40;
      v39 += 40;
    }
    while (v41 < v36);
    v14 = v37;
    a1 = v135;
    v13 = v40;
    v4 = v132;
    v7 = v133;
    v16 = v130;
    if (v13 < v133)
      goto LABEL_33;
LABEL_52:
    if (v13 < v16)
      goto LABEL_131;
    if ((swift_isUniquelyReferenced_nonNull_native(v14) & 1) == 0)
      v14 = sub_10002175C(0, *((_QWORD *)v14 + 2) + 1, 1, v14);
    v61 = *((_QWORD *)v14 + 2);
    v60 = *((_QWORD *)v14 + 3);
    v15 = v61 + 1;
    if (v61 >= v60 >> 1)
      v14 = sub_10002175C((char *)(v60 > 1), v61 + 1, 1, v14);
    *((_QWORD *)v14 + 2) = v15;
    v62 = v14 + 32;
    v63 = &v14[16 * v61 + 32];
    *(_QWORD *)v63 = v16;
    *((_QWORD *)v63 + 1) = v13;
    if (v61)
    {
      a1 = v135;
      while (1)
      {
        v64 = v15 - 1;
        if (v15 >= 4)
        {
          v69 = &v62[16 * v15];
          v70 = *((_QWORD *)v69 - 8);
          v71 = *((_QWORD *)v69 - 7);
          v75 = __OFSUB__(v71, v70);
          v72 = v71 - v70;
          if (v75)
            goto LABEL_120;
          v74 = *((_QWORD *)v69 - 6);
          v73 = *((_QWORD *)v69 - 5);
          v75 = __OFSUB__(v73, v74);
          v67 = v73 - v74;
          v68 = v75;
          if (v75)
            goto LABEL_121;
          v76 = v15 - 2;
          v77 = &v62[16 * v15 - 32];
          v79 = *(_QWORD *)v77;
          v78 = *((_QWORD *)v77 + 1);
          v75 = __OFSUB__(v78, v79);
          v80 = v78 - v79;
          if (v75)
            goto LABEL_123;
          v75 = __OFADD__(v67, v80);
          v81 = v67 + v80;
          if (v75)
            goto LABEL_126;
          if (v81 >= v72)
          {
            v99 = &v62[16 * v64];
            v101 = *(_QWORD *)v99;
            v100 = *((_QWORD *)v99 + 1);
            v75 = __OFSUB__(v100, v101);
            v102 = v100 - v101;
            if (v75)
              goto LABEL_130;
            v92 = v67 < v102;
            goto LABEL_90;
          }
        }
        else
        {
          if (v15 != 3)
          {
            v93 = *((_QWORD *)v14 + 4);
            v94 = *((_QWORD *)v14 + 5);
            v75 = __OFSUB__(v94, v93);
            v86 = v94 - v93;
            v87 = v75;
            goto LABEL_84;
          }
          v66 = *((_QWORD *)v14 + 4);
          v65 = *((_QWORD *)v14 + 5);
          v75 = __OFSUB__(v65, v66);
          v67 = v65 - v66;
          v68 = v75;
        }
        if ((v68 & 1) != 0)
          goto LABEL_122;
        v76 = v15 - 2;
        v82 = &v62[16 * v15 - 32];
        v84 = *(_QWORD *)v82;
        v83 = *((_QWORD *)v82 + 1);
        v85 = __OFSUB__(v83, v84);
        v86 = v83 - v84;
        v87 = v85;
        if (v85)
          goto LABEL_125;
        v88 = &v62[16 * v64];
        v90 = *(_QWORD *)v88;
        v89 = *((_QWORD *)v88 + 1);
        v75 = __OFSUB__(v89, v90);
        v91 = v89 - v90;
        if (v75)
          goto LABEL_128;
        if (__OFADD__(v86, v91))
          goto LABEL_129;
        if (v86 + v91 >= v67)
        {
          v92 = v67 < v91;
LABEL_90:
          if (v92)
            v64 = v76;
          goto LABEL_92;
        }
LABEL_84:
        if ((v87 & 1) != 0)
          goto LABEL_124;
        v95 = &v62[16 * v64];
        v97 = *(_QWORD *)v95;
        v96 = *((_QWORD *)v95 + 1);
        v75 = __OFSUB__(v96, v97);
        v98 = v96 - v97;
        if (v75)
          goto LABEL_127;
        if (v98 < v86)
          goto LABEL_14;
LABEL_92:
        v103 = v64 - 1;
        if (v64 - 1 >= v15)
        {
          __break(1u);
LABEL_117:
          __break(1u);
LABEL_118:
          __break(1u);
LABEL_119:
          __break(1u);
LABEL_120:
          __break(1u);
LABEL_121:
          __break(1u);
LABEL_122:
          __break(1u);
LABEL_123:
          __break(1u);
LABEL_124:
          __break(1u);
LABEL_125:
          __break(1u);
LABEL_126:
          __break(1u);
LABEL_127:
          __break(1u);
LABEL_128:
          __break(1u);
LABEL_129:
          __break(1u);
LABEL_130:
          __break(1u);
LABEL_131:
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
LABEL_139:
          __break(1u);
          goto LABEL_140;
        }
        v104 = *a1;
        if (!*a1)
          goto LABEL_142;
        v105 = v13;
        v106 = v14;
        v107 = &v62[16 * v103];
        v108 = *(_QWORD *)v107;
        v109 = v62;
        v110 = v64;
        v111 = &v62[16 * v64];
        v112 = *((_QWORD *)v111 + 1);
        v113 = v136;
        sub_1000563F0((char *)(v104 + 40 * *(_QWORD *)v107), (char *)(v104 + 40 * *(_QWORD *)v111), v104 + 40 * v112, v134);
        v136 = v113;
        if (v113)
        {
LABEL_100:
          v115 = v125;
          swift_bridgeObjectRelease(v106);
          v115[2] = 0;
          v116 = v115;
          return swift_bridgeObjectRelease(v116);
        }
        if (v112 < v108)
          goto LABEL_117;
        if (v110 > *((_QWORD *)v106 + 2))
          goto LABEL_118;
        *(_QWORD *)v107 = v108;
        *(_QWORD *)&v109[16 * v103 + 8] = v112;
        v114 = *((_QWORD *)v106 + 2);
        if (v110 >= v114)
          goto LABEL_119;
        v14 = v106;
        v15 = v114 - 1;
        memmove(v111, v111 + 16, 16 * (v114 - 1 - v110));
        v62 = v109;
        *((_QWORD *)v106 + 2) = v114 - 1;
        v92 = v114 > 2;
        a1 = v135;
        v13 = v105;
        v6 = v131;
        v4 = v132;
        if (!v92)
          goto LABEL_14;
      }
    }
    v15 = 1;
    a1 = v135;
LABEL_14:
    v7 = a1[1];
    if (v13 >= v7)
      goto LABEL_103;
  }
  if (v13 >= v7)
    goto LABEL_52;
LABEL_33:
  if (__OFSUB__(v13, v16))
    goto LABEL_136;
  if (v13 - v16 >= v126)
    goto LABEL_52;
  if (__OFADD__(v16, v126))
    goto LABEL_139;
  if (v16 + v126 >= v7)
    v46 = v7;
  else
    v46 = v16 + v126;
  if (v46 >= v16)
  {
    if (v13 != v46)
    {
      v128 = v14;
      v129 = v46;
      v47 = 40 * v13 - 40;
      do
      {
        v133 = v47;
        while (1)
        {
          v48 = v13;
          v49 = *a1 + v47;
          sub_100030244(v49 + 40, (uint64_t)&v141);
          sub_100030244(v49, (uint64_t)v138);
          v50 = a1;
          v51 = v142;
          v52 = v143;
          sub_10001D9B4(&v141, v142);
          (*(void (**)(uint64_t, uint64_t))(v52 + 8))(v51, v52);
          v53 = v139;
          v54 = v140;
          sub_10001D9B4(v138, v139);
          (*(void (**)(uint64_t, uint64_t))(v54 + 8))(v53, v54);
          LOBYTE(v53) = static Date.< infix(_:_:)(v6, v4);
          v55 = *(void (**)(char *, uint64_t))(v137 + 8);
          v56 = v144;
          v55(v4, v144);
          v55(v6, v56);
          sub_10001DA60(v138);
          sub_10001DA60(&v141);
          if ((v53 & 1) == 0)
            break;
          v57 = *v50;
          if (!*v50)
            goto LABEL_141;
          a1 = v50;
          v58 = v57 + v47;
          sub_100056ED8((__int128 *)(v57 + v47 + 40), (uint64_t)&v141);
          v59 = *(_OWORD *)(v58 + 16);
          *(_OWORD *)(v58 + 40) = *(_OWORD *)v58;
          *(_OWORD *)(v58 + 56) = v59;
          *(_QWORD *)(v58 + 72) = *(_QWORD *)(v58 + 32);
          sub_100056ED8(&v141, v58);
          v47 -= 40;
          ++v16;
          v13 = v48;
          if (v48 == v16)
            goto LABEL_43;
        }
        a1 = v50;
        v13 = v48;
LABEL_43:
        ++v13;
        v47 = v133 + 40;
        v16 = v130;
      }
      while (v13 != v129);
      v13 = v129;
      v14 = v128;
    }
    goto LABEL_52;
  }
LABEL_140:
  __break(1u);
LABEL_141:
  __break(1u);
LABEL_142:
  __break(1u);
LABEL_143:
  __break(1u);
LABEL_144:
  __break(1u);
LABEL_145:
  result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Can't construct Array with count < 0", 36, 2, "Swift/Array.swift", 17, 2, 936, 0);
  __break(1u);
  return result;
}

uint64_t sub_1000561EC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t result;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void (*v21)(char *, uint64_t);
  uint64_t v22;
  uint64_t v23;
  __int128 v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD v30[3];
  uint64_t v31;
  uint64_t v32;
  __int128 v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;

  v27 = a1;
  v7 = type metadata accessor for Date(0);
  v29 = *(_QWORD *)(v7 - 8);
  v8 = __chkstk_darwin(v7);
  v10 = (char *)&v25 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = __chkstk_darwin(v8);
  v13 = (char *)&v25 - v12;
  v36 = a3;
  v26 = a2;
  if (a3 != a2)
  {
    v14 = 40 * v36 - 40;
LABEL_5:
    v15 = v27;
    v28 = v14;
    while (1)
    {
      v16 = *a4 + v14;
      sub_100030244(v16 + 40, (uint64_t)&v33);
      sub_100030244(v16, (uint64_t)v30);
      v17 = v34;
      v18 = v35;
      sub_10001D9B4(&v33, v34);
      (*(void (**)(uint64_t, uint64_t))(v18 + 8))(v17, v18);
      v19 = v31;
      v20 = v32;
      sub_10001D9B4(v30, v31);
      (*(void (**)(uint64_t, uint64_t))(v20 + 8))(v19, v20);
      LOBYTE(v19) = static Date.< infix(_:_:)(v13, v10);
      v21 = *(void (**)(char *, uint64_t))(v29 + 8);
      v21(v10, v7);
      v21(v13, v7);
      sub_10001DA60(v30);
      result = sub_10001DA60(&v33);
      if ((v19 & 1) == 0)
      {
LABEL_4:
        v14 = v28 + 40;
        if (++v36 == v26)
          return result;
        goto LABEL_5;
      }
      v22 = *a4;
      if (!*a4)
        break;
      v23 = v22 + v14;
      sub_100056ED8((__int128 *)(v22 + v14 + 40), (uint64_t)&v33);
      v24 = *(_OWORD *)(v23 + 16);
      *(_OWORD *)(v23 + 40) = *(_OWORD *)v23;
      *(_OWORD *)(v23 + 56) = v24;
      *(_QWORD *)(v23 + 72) = *(_QWORD *)(v23 + 32);
      result = sub_100056ED8(&v33, v23);
      v14 -= 40;
      if (v36 == ++v15)
        goto LABEL_4;
    }
    __break(1u);
  }
  return result;
}

uint64_t sub_1000563F0(char *a1, char *a2, unint64_t a3, char *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char v23;
  void (*v24)(char *, uint64_t);
  char *v25;
  uint64_t v26;
  _OWORD *v27;
  unint64_t v28;
  __int128 v29;
  __int128 v30;
  char *v31;
  __int128 v32;
  __int128 v33;
  char *v34;
  unint64_t v35;
  char *v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  char *v43;
  uint64_t v44;
  void (*v45)(char *, uint64_t);
  char *v46;
  __int128 v47;
  __int128 v48;
  char *v49;
  unint64_t v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  uint64_t result;
  uint64_t v56;
  char *v57;
  char *v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  _QWORD v62[3];
  uint64_t v63;
  uint64_t v64;
  _QWORD v65[3];
  uint64_t v66;
  uint64_t v67;
  char *v68;
  char *v69;
  char *v70;

  v8 = type metadata accessor for Date(0);
  v60 = *(_QWORD *)(v8 - 8);
  v61 = v8;
  v9 = __chkstk_darwin(v8);
  v59 = (char *)&v56 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v12 = (char *)&v56 - v11;
  v13 = a2 - a1;
  v14 = (a2 - a1) / 40;
  v15 = a3 - (_QWORD)a2;
  v16 = (uint64_t)(a3 - (_QWORD)a2) / 40;
  v70 = a1;
  v69 = a4;
  if (v14 >= v16)
  {
    if (v15 < -39)
      goto LABEL_45;
    if (a4 != a2 || &a2[40 * v16] <= a4)
      memmove(a4, a2, 40 * v16);
    v34 = &a4[40 * v16];
    v68 = v34;
    v70 = a2;
    if (v15 < 40 || a1 >= a2)
      goto LABEL_44;
    v35 = a3 - 40;
    v57 = a4;
    v58 = a1;
    while (1)
    {
      v36 = (char *)(v35 + 40);
      sub_100030244((uint64_t)(v34 - 40), (uint64_t)v65);
      v37 = a2 - 40;
      sub_100030244((uint64_t)(a2 - 40), (uint64_t)v62);
      v38 = v66;
      v39 = v67;
      sub_10001D9B4(v65, v66);
      (*(void (**)(uint64_t, uint64_t))(v39 + 8))(v38, v39);
      v40 = v63;
      v41 = v64;
      sub_10001D9B4(v62, v63);
      v42 = v12;
      v43 = v59;
      (*(void (**)(uint64_t, uint64_t))(v41 + 8))(v40, v41);
      LOBYTE(v40) = static Date.< infix(_:_:)(v42, v43);
      v44 = v61;
      v45 = *(void (**)(char *, uint64_t))(v60 + 8);
      v46 = v43;
      v12 = v42;
      v45(v46, v61);
      v45(v42, v44);
      sub_10001DA60(v62);
      sub_10001DA60(v65);
      if ((v40 & 1) != 0)
      {
        if (v36 != a2 || v35 >= (unint64_t)a2)
        {
          v47 = *(_OWORD *)v37;
          v48 = *(_OWORD *)(a2 - 24);
          *(_QWORD *)(v35 + 32) = *((_QWORD *)a2 - 1);
          *(_OWORD *)v35 = v47;
          *(_OWORD *)(v35 + 16) = v48;
        }
        v70 -= 40;
        v34 = v68;
      }
      else
      {
        v49 = v68;
        v34 = v68 - 40;
        v68 -= 40;
        if (v36 >= v49 && v35 < (unint64_t)v49)
        {
          v50 = (unint64_t)v58;
          if (v36 != v49)
          {
            v51 = *(_OWORD *)v34;
            v52 = *(_OWORD *)(v49 - 24);
            *(_QWORD *)(v35 + 32) = *((_QWORD *)v49 - 1);
            *(_OWORD *)v35 = v51;
            *(_OWORD *)(v35 + 16) = v52;
          }
          v37 = a2;
          goto LABEL_40;
        }
        v53 = *(_OWORD *)v34;
        v54 = *(_OWORD *)(v49 - 24);
        *(_QWORD *)(v35 + 32) = *((_QWORD *)v49 - 1);
        *(_OWORD *)v35 = v53;
        *(_OWORD *)(v35 + 16) = v54;
        v37 = a2;
      }
      v50 = (unint64_t)v58;
LABEL_40:
      if (v34 > v57)
      {
        v35 -= 40;
        a2 = v37;
        if ((unint64_t)v37 > v50)
          continue;
      }
      goto LABEL_44;
    }
  }
  if (v13 >= -39)
  {
    if (a4 != a1 || &a1[40 * v14] <= a4)
      memmove(a4, a1, 40 * v14);
    v17 = (unint64_t)&a4[40 * v14];
    v68 = (char *)v17;
    if (v13 >= 40 && (unint64_t)a2 < a3)
    {
      do
      {
        sub_100030244((uint64_t)a2, (uint64_t)v65);
        sub_100030244((uint64_t)a4, (uint64_t)v62);
        v18 = v66;
        v19 = v67;
        sub_10001D9B4(v65, v66);
        (*(void (**)(uint64_t, uint64_t))(v19 + 8))(v18, v19);
        v20 = v63;
        v21 = v64;
        sub_10001D9B4(v62, v63);
        v22 = v59;
        (*(void (**)(uint64_t, uint64_t))(v21 + 8))(v20, v21);
        v23 = static Date.< infix(_:_:)(v12, v22);
        v24 = *(void (**)(char *, uint64_t))(v60 + 8);
        v25 = v22;
        v26 = v61;
        v24(v25, v61);
        v24(v12, v26);
        sub_10001DA60(v62);
        sub_10001DA60(v65);
        v27 = v70;
        if ((v23 & 1) != 0)
        {
          v28 = (unint64_t)(a2 + 40);
          if (v70 >= a2 && (unint64_t)v70 < v28 && v70 == a2)
          {
            v27 = a2;
          }
          else
          {
            v29 = *(_OWORD *)a2;
            v30 = *((_OWORD *)a2 + 1);
            *((_QWORD *)v70 + 4) = *((_QWORD *)a2 + 4);
            *v27 = v29;
            v27[1] = v30;
          }
        }
        else
        {
          v31 = v69 + 40;
          if (v70 != v69 || v70 >= v31)
          {
            v32 = *(_OWORD *)v69;
            v33 = *((_OWORD *)v69 + 1);
            *((_QWORD *)v70 + 4) = *((_QWORD *)v69 + 4);
            *v27 = v32;
            v27[1] = v33;
          }
          v69 = v31;
          v28 = (unint64_t)a2;
        }
        v70 = (char *)v27 + 40;
        a4 = v69;
        if ((unint64_t)v69 >= v17)
          break;
        a2 = (char *)v28;
      }
      while (v28 < a3);
    }
LABEL_44:
    sub_1000218FC((void **)&v70, (const void **)&v69, &v68);
    return 1;
  }
LABEL_45:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, 2, 1046, 0);
  __break(1u);
  return result;
}

uint64_t type metadata accessor for SessionAssembler()
{
  return objc_opt_self(_TtC7NewsTag16SessionAssembler);
}

_QWORD *sub_1000568C0(uint64_t a1, void (*a2)(uint64_t, uint64_t))
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void (*v23)(uint64_t, uint64_t);

  v23 = a2;
  v4 = sub_10001B520(&qword_1000BB660);
  __chkstk_darwin(v4);
  v6 = (char *)&v19 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = type metadata accessor for Session(0);
  v7 = *(_QWORD *)(v22 - 8);
  v8 = __chkstk_darwin(v22);
  v21 = (uint64_t)&v19 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v11 = (char *)&v19 - v10;
  v12 = *(_QWORD *)(a1 + 16);
  if (!v12)
    return _swiftEmptyArrayStorage;
  v19 = v2;
  swift_bridgeObjectRetain(a1);
  v13 = 0;
  v14 = _swiftEmptyArrayStorage;
  v20 = a1;
  do
  {
    v15 = *(_QWORD *)(a1 + 8 * v13 + 32);
    swift_bridgeObjectRetain(v15);
    v23(v13, v15);
    swift_bridgeObjectRelease(v15);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v6, 1, v22) == 1)
    {
      sub_10002CCF4((uint64_t)v6, &qword_1000BB660);
    }
    else
    {
      sub_10002AC74((uint64_t)v6, (uint64_t)v11, type metadata accessor for Session);
      sub_10002AC74((uint64_t)v11, v21, type metadata accessor for Session);
      if ((swift_isUniquelyReferenced_nonNull_native(v14) & 1) == 0)
        v14 = (_QWORD *)sub_10005DE64(0, v14[2] + 1, 1, (unint64_t)v14);
      v17 = v14[2];
      v16 = v14[3];
      if (v17 >= v16 >> 1)
        v14 = (_QWORD *)sub_10005DE64(v16 > 1, v17 + 1, 1, (unint64_t)v14);
      v14[2] = v17 + 1;
      sub_10002AC74(v21, (uint64_t)v14+ ((*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80))+ *(_QWORD *)(v7 + 72) * v17, type metadata accessor for Session);
      a1 = v20;
    }
    ++v13;
  }
  while (v12 != v13);
  swift_bridgeObjectRelease(a1);
  return v14;
}

_QWORD *sub_100056B04(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  void *v24;
  size_t v26;
  uint64_t v27;
  uint64_t v28;
  __int128 v29[2];
  _QWORD v30[6];

  v2 = type metadata accessor for AppearanceEvent(0);
  __chkstk_darwin(v2);
  v4 = (char *)&v26 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v30[0] = a1;
  swift_bridgeObjectRetain(a1);
  sub_1000557B0(v30);
  v5 = v30[0];
  v6 = *(_QWORD *)(v30[0] + 16);
  if (v6)
  {
    v27 = v30[0];
    v28 = 0;
    v7 = v30[0] + 32;
    swift_retain(v30[0]);
    v8 = _swiftEmptyArrayStorage;
    v9 = _swiftEmptyArrayStorage;
    do
    {
      sub_100030244(v7, (uint64_t)v30);
      sub_100030244((uint64_t)v30, (uint64_t)v29);
      v10 = sub_10001B520(&qword_1000B9A00);
      if ((swift_dynamicCast(v4, v29, v10, v2, 6) & 1) != 0)
      {
        sub_100027D34((uint64_t)v4, type metadata accessor for AppearanceEvent);
        if (v9[2])
        {
          swift_bridgeObjectRetain(v9);
          if ((swift_isUniquelyReferenced_nonNull_native(v8) & 1) == 0)
            v8 = sub_10005DE8C(0, v8[2] + 1, 1, v8);
          v12 = v8[2];
          v11 = v8[3];
          if (v12 >= v11 >> 1)
            v8 = sub_10005DE8C((_QWORD *)(v11 > 1), v12 + 1, 1, v8);
          v8[2] = v12 + 1;
          v8[v12 + 4] = v9;
          swift_bridgeObjectRelease(v9);
          v9 = _swiftEmptyArrayStorage;
        }
      }
      sub_100030244((uint64_t)v30, (uint64_t)v29);
      if ((swift_isUniquelyReferenced_nonNull_native(v9) & 1) == 0)
        v9 = sub_10005DE78(0, v9[2] + 1, 1, v9);
      v14 = v9[2];
      v13 = v9[3];
      if (v14 >= v13 >> 1)
        v9 = sub_10005DE78((_QWORD *)(v13 > 1), v14 + 1, 1, v9);
      v9[2] = v14 + 1;
      sub_100056ED8(v29, (uint64_t)&v9[5 * v14 + 4]);
      sub_10001DA60(v30);
      v7 += 40;
      --v6;
    }
    while (v6);
    v5 = v27;
    swift_release(v27);
    if (v9[2])
      goto LABEL_16;
LABEL_22:
    swift_release(v5);
    v17 = swift_bridgeObjectRelease(v9);
    goto LABEL_23;
  }
  v9 = _swiftEmptyArrayStorage;
  v8 = _swiftEmptyArrayStorage;
  if (!_swiftEmptyArrayStorage[2])
    goto LABEL_22;
LABEL_16:
  if ((swift_isUniquelyReferenced_nonNull_native(v8) & 1) == 0)
    v8 = sub_10005DE8C(0, v8[2] + 1, 1, v8);
  v16 = v8[2];
  v15 = v8[3];
  if (v16 >= v15 >> 1)
    v8 = sub_10005DE8C((_QWORD *)(v15 > 1), v16 + 1, 1, v8);
  v8[2] = v16 + 1;
  v8[v16 + 4] = v9;
  swift_release(v5);
LABEL_23:
  __chkstk_darwin(v17);
  *(&v26 - 2) = (size_t)v8;
  v18 = swift_bridgeObjectRetain(v8);
  v19 = sub_1000568C0(v18, (void (*)(uint64_t, uint64_t))sub_100056EF0);
  swift_bridgeObjectRelease_n(v8, 2);
  v20 = sub_10001B520(&qword_1000B9980);
  v21 = swift_allocObject(v20, 72, 7);
  *(_OWORD *)(v21 + 16) = xmmword_10008AC60;
  v22 = v19[2];
  *(_QWORD *)(v21 + 56) = &type metadata for Int;
  *(_QWORD *)(v21 + 64) = &protocol witness table for Int;
  *(_QWORD *)(v21 + 32) = v22;
  v23 = sub_10002D800();
  v24 = (void *)static OS_os_log.default.getter(v23);
  static os_log_type_t.default.getter();
  os_log(_:dso:log:type:_:)("assembled %zd sessions", v26);
  swift_bridgeObjectRelease(v21);

  return v19;
}

uint64_t sub_100056ED8(__int128 *a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;

  v2 = *a1;
  v3 = a1[1];
  *(_QWORD *)(a2 + 32) = *((_QWORD *)a1 + 4);
  *(_OWORD *)a2 = v2;
  *(_OWORD *)(a2 + 16) = v3;
  return a2;
}

uint64_t sub_100056EF0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;

  return sub_100054B50(a1, a2, *(_QWORD *)(v3 + 16), a3);
}

uint64_t type metadata accessor for Session(uint64_t a1)
{
  uint64_t result;

  result = qword_1000BB6E0;
  if (!qword_1000BB6E0)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for Session);
  return result;
}

uint64_t sub_100056F34(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for AppearanceEvent(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

_QWORD *sub_100056F78(_QWORD *a1, _QWORD *a2, int *a3)
{
  int v5;
  uint64_t v7;
  void (*v8)(_QWORD *, _QWORD *, uint64_t);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int (*v16)(char *, uint64_t, uint64_t);
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void (*v26)(_QWORD *, _QWORD *, uint64_t);
  char *__dst;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v18 = *a2;
    *a1 = *a2;
    a1 = (_QWORD *)(v18 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v18);
  }
  else
  {
    v7 = type metadata accessor for Date(0);
    v8 = *(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v7 - 8) + 16);
    v8(a1, a2, v7);
    v9 = type metadata accessor for AppearanceEvent(0);
    *((_BYTE *)a1 + *(int *)(v9 + 20)) = *((_BYTE *)a2 + *(int *)(v9 + 20));
    *((_BYTE *)a1 + *(int *)(v9 + 24)) = *((_BYTE *)a2 + *(int *)(v9 + 24));
    v10 = a3[5];
    v11 = a3[6];
    v12 = *(_QWORD *)((char *)a2 + v10);
    *(_QWORD *)((char *)a1 + v10) = v12;
    __dst = (char *)a1 + v11;
    v13 = (char *)a2 + v11;
    v14 = type metadata accessor for EngagementEvent(0);
    v15 = *(_QWORD *)(v14 - 8);
    v16 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48);
    swift_bridgeObjectRetain(v12);
    if (v16(v13, 1, v14))
    {
      v17 = sub_10001B520(&qword_1000BA258);
      memcpy(__dst, v13, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
    }
    else
    {
      v26 = v8;
      v8(__dst, v13, v7);
      v19 = *(int *)(v14 + 20);
      v20 = &__dst[v19];
      v21 = &v13[v19];
      v22 = type metadata accessor for URL(0);
      v23 = *(_QWORD *)(v22 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v23 + 48))(v21, 1, v22))
      {
        v24 = sub_10001B520(&qword_1000B93A0);
        memcpy(v20, v21, *(_QWORD *)(*(_QWORD *)(v24 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v23 + 16))(v20, v21, v22);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v23 + 56))(v20, 0, 1, v22);
      }
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v15 + 56))(__dst, 0, 1, v14);
      v8 = v26;
    }
    v8((_QWORD *)((char *)a1 + a3[7]), (_QWORD *)((char *)a2 + a3[7]), v7);
  }
  return a1;
}

uint64_t sub_100057174(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v11)(uint64_t, uint64_t);

  v4 = type metadata accessor for Date(0);
  v11 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8);
  v11(a1, v4);
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + a2[5]));
  v5 = a1 + a2[6];
  v6 = type metadata accessor for EngagementEvent(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 48))(v5, 1, v6))
  {
    v11(v5, v4);
    v7 = v5 + *(int *)(v6 + 20);
    v8 = type metadata accessor for URL(0);
    v9 = *(_QWORD *)(v8 - 8);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8))
      (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v7, v8);
  }
  return ((uint64_t (*)(uint64_t, uint64_t))v11)(a1 + a2[7], v4);
}

uint64_t sub_10005726C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int (*v16)(char *, uint64_t, uint64_t);
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v25;
  uint64_t v26;

  v6 = type metadata accessor for Date(0);
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16);
  v7(a1, a2, v6);
  v8 = type metadata accessor for AppearanceEvent(0);
  *(_BYTE *)(a1 + *(int *)(v8 + 20)) = *(_BYTE *)(a2 + *(int *)(v8 + 20));
  *(_BYTE *)(a1 + *(int *)(v8 + 24)) = *(_BYTE *)(a2 + *(int *)(v8 + 24));
  v9 = *(int *)(a3 + 20);
  v10 = *(int *)(a3 + 24);
  v26 = a3;
  v11 = *(_QWORD *)(a2 + v9);
  *(_QWORD *)(a1 + v9) = v11;
  v12 = (char *)(a1 + v10);
  v13 = (char *)(a2 + v10);
  v14 = type metadata accessor for EngagementEvent(0);
  v15 = *(_QWORD *)(v14 - 8);
  v16 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48);
  swift_bridgeObjectRetain(v11);
  if (v16(v13, 1, v14))
  {
    v17 = sub_10001B520(&qword_1000BA258);
    memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
  }
  else
  {
    v25 = v15;
    v7((uint64_t)v12, (uint64_t)v13, v6);
    v18 = *(int *)(v14 + 20);
    v19 = &v12[v18];
    v20 = &v13[v18];
    v21 = type metadata accessor for URL(0);
    v22 = *(_QWORD *)(v21 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v22 + 48))(v20, 1, v21))
    {
      v23 = sub_10001B520(&qword_1000B93A0);
      memcpy(v19, v20, *(_QWORD *)(*(_QWORD *)(v23 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v22 + 16))(v19, v20, v21);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v22 + 56))(v19, 0, 1, v21);
    }
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v25 + 56))(v12, 0, 1, v14);
  }
  v7(a1 + *(int *)(v26 + 28), a2 + *(int *)(v26 + 28), v6);
  return a1;
}

uint64_t sub_10005743C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t (*v17)(char *, uint64_t, uint64_t);
  int v18;
  int v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void (*v27)(uint64_t, uint64_t, uint64_t);
  uint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t (*v33)(char *, uint64_t, uint64_t);
  int v34;
  int v35;
  uint64_t v36;
  uint64_t v38;
  uint64_t v39;
  void (*v40)(uint64_t, uint64_t, uint64_t);

  v6 = type metadata accessor for Date(0);
  v7 = *(_QWORD *)(v6 - 8);
  v40 = *(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 24);
  v40(a1, a2, v6);
  v8 = type metadata accessor for AppearanceEvent(0);
  *(_BYTE *)(a1 + *(int *)(v8 + 20)) = *(_BYTE *)(a2 + *(int *)(v8 + 20));
  *(_BYTE *)(a1 + *(int *)(v8 + 24)) = *(_BYTE *)(a2 + *(int *)(v8 + 24));
  v9 = *(int *)(a3 + 20);
  v10 = *(_QWORD *)(a2 + v9);
  v11 = *(_QWORD *)(a1 + v9);
  *(_QWORD *)(a1 + v9) = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease(v11);
  v39 = a3;
  v12 = *(int *)(a3 + 24);
  v13 = (char *)(a1 + v12);
  v14 = (char *)(a2 + v12);
  v15 = type metadata accessor for EngagementEvent(0);
  v16 = *(_QWORD *)(v15 - 8);
  v17 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v16 + 48);
  v18 = v17(v13, 1, v15);
  v19 = v17(v14, 1, v15);
  if (v18)
  {
    if (!v19)
    {
      (*(void (**)(char *, char *, uint64_t))(v7 + 16))(v13, v14, v6);
      v20 = *(int *)(v15 + 20);
      v21 = &v13[v20];
      v22 = &v14[v20];
      v23 = type metadata accessor for URL(0);
      v24 = *(_QWORD *)(v23 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v24 + 48))(v22, 1, v23))
      {
        v25 = sub_10001B520(&qword_1000B93A0);
        memcpy(v21, v22, *(_QWORD *)(*(_QWORD *)(v25 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v24 + 16))(v21, v22, v23);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v24 + 56))(v21, 0, 1, v23);
      }
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
      goto LABEL_13;
    }
LABEL_7:
    v26 = sub_10001B520(&qword_1000BA258);
    memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v26 - 8) + 64));
LABEL_13:
    v36 = v39;
    v27 = v40;
    goto LABEL_14;
  }
  if (v19)
  {
    sub_100027D34((uint64_t)v13, type metadata accessor for EngagementEvent);
    goto LABEL_7;
  }
  v27 = v40;
  v40((uint64_t)v13, (uint64_t)v14, v6);
  v28 = *(int *)(v15 + 20);
  v29 = &v13[v28];
  v30 = &v14[v28];
  v31 = type metadata accessor for URL(0);
  v32 = *(_QWORD *)(v31 - 8);
  v33 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v32 + 48);
  v34 = v33(v29, 1, v31);
  v35 = v33(v30, 1, v31);
  if (!v34)
  {
    if (!v35)
    {
      (*(void (**)(char *, char *, uint64_t))(v32 + 24))(v29, v30, v31);
      v36 = v39;
      goto LABEL_14;
    }
    (*(void (**)(char *, uint64_t))(v32 + 8))(v29, v31);
    goto LABEL_17;
  }
  if (v35)
  {
LABEL_17:
    v38 = sub_10001B520(&qword_1000B93A0);
    memcpy(v29, v30, *(_QWORD *)(*(_QWORD *)(v38 - 8) + 64));
    v36 = v39;
    goto LABEL_14;
  }
  (*(void (**)(char *, char *, uint64_t))(v32 + 16))(v29, v30, v31);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v32 + 56))(v29, 0, 1, v31);
  v36 = v39;
LABEL_14:
  v27(a1 + *(int *)(v36 + 28), a2 + *(int *)(v36 + 28), v6);
  return a1;
}

uint64_t sub_10005772C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void (*v21)(uint64_t, uint64_t, uint64_t);
  char *v22;

  v6 = type metadata accessor for Date(0);
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32);
  v7(a1, a2, v6);
  v8 = type metadata accessor for AppearanceEvent(0);
  *(_BYTE *)(a1 + *(int *)(v8 + 20)) = *(_BYTE *)(a2 + *(int *)(v8 + 20));
  *(_BYTE *)(a1 + *(int *)(v8 + 24)) = *(_BYTE *)(a2 + *(int *)(v8 + 24));
  v9 = a3[6];
  *(_QWORD *)(a1 + a3[5]) = *(_QWORD *)(a2 + a3[5]);
  v10 = (char *)(a1 + v9);
  v11 = (char *)(a2 + v9);
  v12 = type metadata accessor for EngagementEvent(0);
  v13 = *(_QWORD *)(v12 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12))
  {
    v14 = sub_10001B520(&qword_1000BA258);
    memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
  }
  else
  {
    v21 = v7;
    v7((uint64_t)v10, (uint64_t)v11, v6);
    v15 = *(int *)(v12 + 20);
    v22 = &v10[v15];
    v16 = &v11[v15];
    v17 = type metadata accessor for URL(0);
    v18 = *(_QWORD *)(v17 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48))(v16, 1, v17))
    {
      v19 = sub_10001B520(&qword_1000B93A0);
      memcpy(v22, v16, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v18 + 32))(v22, v16, v17);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v18 + 56))(v22, 0, 1, v17);
    }
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v10, 0, 1, v12);
    v7 = v21;
  }
  v7(a1 + a3[7], a2 + a3[7], v6);
  return a1;
}

uint64_t sub_1000578EC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t (*v16)(char *, uint64_t, uint64_t);
  int v17;
  int v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void (*v26)(uint64_t, uint64_t, uint64_t);
  uint64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t (*v32)(char *, uint64_t, uint64_t);
  int v33;
  int v34;
  uint64_t v35;
  uint64_t v37;
  uint64_t v38;
  void (*v39)(uint64_t, uint64_t, uint64_t);

  v6 = type metadata accessor for Date(0);
  v7 = *(_QWORD *)(v6 - 8);
  v39 = *(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 40);
  v39(a1, a2, v6);
  v8 = type metadata accessor for AppearanceEvent(0);
  *(_BYTE *)(a1 + *(int *)(v8 + 20)) = *(_BYTE *)(a2 + *(int *)(v8 + 20));
  *(_BYTE *)(a1 + *(int *)(v8 + 24)) = *(_BYTE *)(a2 + *(int *)(v8 + 24));
  v9 = *(int *)(a3 + 20);
  v10 = *(_QWORD *)(a1 + v9);
  *(_QWORD *)(a1 + v9) = *(_QWORD *)(a2 + v9);
  swift_bridgeObjectRelease(v10);
  v38 = a3;
  v11 = *(int *)(a3 + 24);
  v12 = (char *)(a1 + v11);
  v13 = (char *)(a2 + v11);
  v14 = type metadata accessor for EngagementEvent(0);
  v15 = *(_QWORD *)(v14 - 8);
  v16 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v15 + 48);
  v17 = v16(v12, 1, v14);
  v18 = v16(v13, 1, v14);
  if (v17)
  {
    if (!v18)
    {
      (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v12, v13, v6);
      v19 = *(int *)(v14 + 20);
      v20 = &v12[v19];
      v21 = &v13[v19];
      v22 = type metadata accessor for URL(0);
      v23 = *(_QWORD *)(v22 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v23 + 48))(v21, 1, v22))
      {
        v24 = sub_10001B520(&qword_1000B93A0);
        memcpy(v20, v21, *(_QWORD *)(*(_QWORD *)(v24 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v23 + 32))(v20, v21, v22);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v23 + 56))(v20, 0, 1, v22);
      }
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
      goto LABEL_13;
    }
LABEL_7:
    v25 = sub_10001B520(&qword_1000BA258);
    memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v25 - 8) + 64));
LABEL_13:
    v35 = v38;
    v26 = v39;
    goto LABEL_14;
  }
  if (v18)
  {
    sub_100027D34((uint64_t)v12, type metadata accessor for EngagementEvent);
    goto LABEL_7;
  }
  v26 = v39;
  v39((uint64_t)v12, (uint64_t)v13, v6);
  v27 = *(int *)(v14 + 20);
  v28 = &v12[v27];
  v29 = &v13[v27];
  v30 = type metadata accessor for URL(0);
  v31 = *(_QWORD *)(v30 - 8);
  v32 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v31 + 48);
  v33 = v32(v28, 1, v30);
  v34 = v32(v29, 1, v30);
  if (!v33)
  {
    if (!v34)
    {
      (*(void (**)(char *, char *, uint64_t))(v31 + 40))(v28, v29, v30);
      v35 = v38;
      goto LABEL_14;
    }
    (*(void (**)(char *, uint64_t))(v31 + 8))(v28, v30);
    goto LABEL_17;
  }
  if (v34)
  {
LABEL_17:
    v37 = sub_10001B520(&qword_1000B93A0);
    memcpy(v28, v29, *(_QWORD *)(*(_QWORD *)(v37 - 8) + 64));
    v35 = v38;
    goto LABEL_14;
  }
  (*(void (**)(char *, char *, uint64_t))(v31 + 32))(v28, v29, v30);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v31 + 56))(v28, 0, 1, v30);
  v35 = v38;
LABEL_14:
  v26(a1 + *(int *)(v35 + 28), a2 + *(int *)(v35 + 28), v6);
  return a1;
}

uint64_t sub_100057BD4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100057BE0);
}

uint64_t sub_100057BE0(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  unint64_t v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v6 = type metadata accessor for AppearanceEvent(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
    return v9(v10, a2, v8);
  }
  if ((_DWORD)a2 != 0x7FFFFFFF)
  {
    v13 = sub_10001B520(&qword_1000BA258);
    v14 = *(_QWORD *)(v13 - 8);
    if (*(_DWORD *)(v14 + 84) == (_DWORD)a2)
    {
      v8 = v13;
      v15 = a3[6];
    }
    else
    {
      v8 = type metadata accessor for DisappearanceEvent(0);
      v14 = *(_QWORD *)(v8 - 8);
      v15 = a3[7];
    }
    v10 = a1 + v15;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v14 + 48);
    return v9(v10, a2, v8);
  }
  v11 = *(_QWORD *)(a1 + a3[5]);
  if (v11 >= 0xFFFFFFFF)
    LODWORD(v11) = -1;
  return (v11 + 1);
}

uint64_t sub_100057CB0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100057CBC);
}

uint64_t sub_100057CBC(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  result = type metadata accessor for AppearanceEvent(0);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = result;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    if (a3 == 0x7FFFFFFF)
    {
      *(_QWORD *)(a1 + a4[5]) = (a2 - 1);
      return result;
    }
    v13 = sub_10001B520(&qword_1000BA258);
    v14 = *(_QWORD *)(v13 - 8);
    if (*(_DWORD *)(v14 + 84) == a3)
    {
      v10 = v13;
      v15 = a4[6];
    }
    else
    {
      v10 = type metadata accessor for DisappearanceEvent(0);
      v14 = *(_QWORD *)(v10 - 8);
      v15 = a4[7];
    }
    v12 = a1 + v15;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
  }
  return v11(v12, a2, a2, v10);
}

void sub_100057D88(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  _QWORD v8[4];

  v2 = type metadata accessor for AppearanceEvent(319);
  if (v3 <= 0x3F)
  {
    v8[0] = *(_QWORD *)(v2 - 8) + 64;
    v8[1] = (char *)&value witness table for Builtin.BridgeObject + 64;
    sub_100057E34(319);
    if (v5 <= 0x3F)
    {
      v8[2] = *(_QWORD *)(v4 - 8) + 64;
      v6 = type metadata accessor for Date(319);
      if (v7 <= 0x3F)
      {
        v8[3] = *(_QWORD *)(v6 - 8) + 64;
        swift_initStructMetadata(a1, 256, 4, v8, a1 + 16);
      }
    }
  }
}

void sub_100057E34(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_1000BB6F0)
  {
    v2 = type metadata accessor for EngagementEvent(255);
    v3 = type metadata accessor for Optional(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_1000BB6F0);
  }
}

_QWORD *sub_100057E88(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  int *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int (*v19)(char *, uint64_t, uint64_t);
  id v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  _QWORD *v35;
  char *__dst;

  v4 = type metadata accessor for NewsTimelineEntry(0);
  v5 = *(_DWORD *)(*(_QWORD *)(v4 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v22 = *a2;
    *a1 = *a2;
    v23 = v22 + ((v5 + 16) & ~(unint64_t)v5);
    swift_retain(v22);
  }
  else
  {
    v6 = v4;
    v7 = type metadata accessor for Date(0);
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = *(int *)(v6 + 20);
    v35 = a1;
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = *(void **)((char *)a2 + v8);
    v12 = *(_QWORD *)((char *)a2 + v8 + 8);
    *(_QWORD *)v9 = v11;
    *((_QWORD *)v9 + 1) = v12;
    v13 = *(_QWORD *)((char *)a2 + v8 + 16);
    *((_QWORD *)v9 + 2) = v13;
    v9[24] = *((_BYTE *)a2 + v8 + 24);
    v14 = (int *)type metadata accessor for TodayContent(0);
    v15 = v14[8];
    __dst = &v9[v15];
    v16 = &v10[v15];
    v17 = type metadata accessor for URL(0);
    v18 = *(_QWORD *)(v17 - 8);
    v19 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48);
    v20 = v11;
    swift_bridgeObjectRetain(v12);
    swift_unknownObjectRetain(v13);
    if (v19(v16, 1, v17))
    {
      v21 = sub_10001B520(&qword_1000B93A0);
      memcpy(__dst, v16, *(_QWORD *)(*(_QWORD *)(v21 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v18 + 16))(__dst, v16, v17);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v18 + 56))(__dst, 0, 1, v17);
    }
    v24 = v14[9];
    v25 = *(_QWORD *)&v10[v24];
    *(_QWORD *)&v9[v24] = v25;
    v26 = v14[10];
    v27 = &v9[v26];
    v28 = &v10[v26];
    v29 = *((_QWORD *)v28 + 1);
    *(_QWORD *)v27 = *(_QWORD *)v28;
    *((_QWORD *)v27 + 1) = v29;
    v30 = v14[11];
    v31 = &v9[v30];
    v32 = &v10[v30];
    v33 = *((_QWORD *)v32 + 1);
    *(_QWORD *)v31 = *(_QWORD *)v32;
    *((_QWORD *)v31 + 1) = v33;
    swift_retain(v25);
    swift_bridgeObjectRetain(v29);
    swift_bridgeObjectRetain(v33);
    return v35;
  }
  return (_QWORD *)v23;
}

uint64_t sub_10005804C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  int *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  v3 = a1 + *(int *)(type metadata accessor for NewsTimelineEntry(0) + 20);

  swift_bridgeObjectRelease(*(_QWORD *)(v3 + 8));
  swift_unknownObjectRelease(*(_QWORD *)(v3 + 16));
  v4 = (int *)type metadata accessor for TodayContent(0);
  v5 = v3 + v4[8];
  v6 = type metadata accessor for URL(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6))
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v5, v6);
  swift_release(*(_QWORD *)(v3 + v4[9]));
  swift_bridgeObjectRelease(*(_QWORD *)(v3 + v4[10] + 8));
  return swift_bridgeObjectRelease(*(_QWORD *)(v3 + v4[11] + 8));
}

uint64_t sub_100058130(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  int *v11;
  uint64_t v12;
  const void *v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int (*v16)(const void *, uint64_t, uint64_t);
  id v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t v28;
  void *__dst;
  uint64_t v31;

  v4 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, a2, v4);
  v5 = *(int *)(type metadata accessor for NewsTimelineEntry(0) + 20);
  v31 = a1;
  v6 = a1 + v5;
  v7 = a2 + v5;
  v8 = *(void **)(a2 + v5);
  v9 = *(_QWORD *)(a2 + v5 + 8);
  *(_QWORD *)v6 = v8;
  *(_QWORD *)(v6 + 8) = v9;
  v10 = *(_QWORD *)(a2 + v5 + 16);
  *(_QWORD *)(v6 + 16) = v10;
  *(_BYTE *)(v6 + 24) = *(_BYTE *)(a2 + v5 + 24);
  v11 = (int *)type metadata accessor for TodayContent(0);
  v12 = v11[8];
  __dst = (void *)(v6 + v12);
  v13 = (const void *)(v7 + v12);
  v14 = type metadata accessor for URL(0);
  v15 = *(_QWORD *)(v14 - 8);
  v16 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v15 + 48);
  v17 = v8;
  swift_bridgeObjectRetain(v9);
  swift_unknownObjectRetain(v10);
  if (v16(v13, 1, v14))
  {
    v18 = sub_10001B520(&qword_1000B93A0);
    memcpy(__dst, v13, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v15 + 16))(__dst, v13, v14);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v15 + 56))(__dst, 0, 1, v14);
  }
  v19 = v11[9];
  v20 = *(_QWORD *)(v7 + v19);
  *(_QWORD *)(v6 + v19) = v20;
  v21 = v11[10];
  v22 = (_QWORD *)(v6 + v21);
  v23 = (_QWORD *)(v7 + v21);
  v24 = v23[1];
  *v22 = *v23;
  v22[1] = v24;
  v25 = v11[11];
  v26 = (_QWORD *)(v6 + v25);
  v27 = (_QWORD *)(v7 + v25);
  v28 = v27[1];
  *v26 = *v27;
  v26[1] = v28;
  swift_retain(v20);
  swift_bridgeObjectRetain(v24);
  swift_bridgeObjectRetain(v28);
  return v31;
}

uint64_t sub_1000582C0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int *v15;
  uint64_t v16;
  void *v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t (*v21)(void *, uint64_t, uint64_t);
  int v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;

  v4 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 24))(a1, a2, v4);
  v5 = *(int *)(type metadata accessor for NewsTimelineEntry(0) + 20);
  v6 = a1 + v5;
  v7 = a2 + v5;
  v8 = *(void **)(a2 + v5);
  v9 = *(void **)v6;
  *(_QWORD *)v6 = v8;
  v10 = v8;

  v11 = *(_QWORD *)(v7 + 8);
  v12 = *(_QWORD *)(v6 + 8);
  *(_QWORD *)(v6 + 8) = v11;
  swift_bridgeObjectRetain(v11);
  swift_bridgeObjectRelease(v12);
  v13 = *(_QWORD *)(v7 + 16);
  v14 = *(_QWORD *)(v6 + 16);
  *(_QWORD *)(v6 + 16) = v13;
  swift_unknownObjectRetain(v13);
  swift_unknownObjectRelease(v14);
  *(_BYTE *)(v6 + 24) = *(_BYTE *)(v7 + 24);
  v15 = (int *)type metadata accessor for TodayContent(0);
  v16 = v15[8];
  v17 = (void *)(v6 + v16);
  v18 = (void *)(v7 + v16);
  v19 = type metadata accessor for URL(0);
  v20 = *(_QWORD *)(v19 - 8);
  v21 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v20 + 48);
  v22 = v21(v17, 1, v19);
  v23 = v21(v18, 1, v19);
  if (!v22)
  {
    if (!v23)
    {
      (*(void (**)(void *, void *, uint64_t))(v20 + 24))(v17, v18, v19);
      goto LABEL_7;
    }
    (*(void (**)(void *, uint64_t))(v20 + 8))(v17, v19);
    goto LABEL_6;
  }
  if (v23)
  {
LABEL_6:
    v24 = sub_10001B520(&qword_1000B93A0);
    memcpy(v17, v18, *(_QWORD *)(*(_QWORD *)(v24 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, void *, uint64_t))(v20 + 16))(v17, v18, v19);
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v20 + 56))(v17, 0, 1, v19);
LABEL_7:
  v25 = v15[9];
  v26 = *(_QWORD *)(v7 + v25);
  v27 = *(_QWORD *)(v6 + v25);
  *(_QWORD *)(v6 + v25) = v26;
  swift_retain(v26);
  swift_release(v27);
  v28 = v15[10];
  v29 = (_QWORD *)(v6 + v28);
  v30 = (_QWORD *)(v7 + v28);
  *v29 = *v30;
  v31 = v30[1];
  v32 = v29[1];
  v29[1] = v31;
  swift_bridgeObjectRetain(v31);
  swift_bridgeObjectRelease(v32);
  v33 = v15[11];
  v34 = (_QWORD *)(v6 + v33);
  v35 = (_QWORD *)(v7 + v33);
  *v34 = *v35;
  v36 = v35[1];
  v37 = v34[1];
  v34[1] = v36;
  swift_bridgeObjectRetain(v36);
  swift_bridgeObjectRelease(v37);
  return a1;
}

uint64_t sub_1000584CC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int *v8;
  uint64_t v9;
  void *v10;
  const void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v4 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a1, a2, v4);
  v5 = *(int *)(type metadata accessor for NewsTimelineEntry(0) + 20);
  v6 = a1 + v5;
  v7 = a2 + v5;
  *(_OWORD *)v6 = *(_OWORD *)(a2 + v5);
  *(_QWORD *)(v6 + 16) = *(_QWORD *)(a2 + v5 + 16);
  *(_BYTE *)(v6 + 24) = *(_BYTE *)(a2 + v5 + 24);
  v8 = (int *)type metadata accessor for TodayContent(0);
  v9 = v8[8];
  v10 = (void *)(v6 + v9);
  v11 = (const void *)(v7 + v9);
  v12 = type metadata accessor for URL(0);
  v13 = *(_QWORD *)(v12 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12))
  {
    v14 = sub_10001B520(&qword_1000B93A0);
    memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v13 + 32))(v10, v11, v12);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v10, 0, 1, v12);
  }
  *(_QWORD *)(v6 + v8[9]) = *(_QWORD *)(v7 + v8[9]);
  *(_OWORD *)(v6 + v8[10]) = *(_OWORD *)(v7 + v8[10]);
  *(_OWORD *)(v6 + v8[11]) = *(_OWORD *)(v7 + v8[11]);
  return a1;
}

uint64_t sub_100058608(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  int *v11;
  uint64_t v12;
  void *v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t (*v17)(void *, uint64_t, uint64_t);
  int v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  v4 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a1, a2, v4);
  v5 = *(int *)(type metadata accessor for NewsTimelineEntry(0) + 20);
  v6 = a1 + v5;
  v7 = a2 + v5;
  v8 = *(void **)(a1 + v5);
  *(_QWORD *)(a1 + v5) = *(_QWORD *)(a2 + v5);

  v9 = *(_QWORD *)(v6 + 8);
  *(_QWORD *)(v6 + 8) = *(_QWORD *)(v7 + 8);
  swift_bridgeObjectRelease(v9);
  v10 = *(_QWORD *)(v6 + 16);
  *(_QWORD *)(v6 + 16) = *(_QWORD *)(v7 + 16);
  swift_unknownObjectRelease(v10);
  *(_BYTE *)(v6 + 24) = *(_BYTE *)(v7 + 24);
  v11 = (int *)type metadata accessor for TodayContent(0);
  v12 = v11[8];
  v13 = (void *)(v6 + v12);
  v14 = (void *)(v7 + v12);
  v15 = type metadata accessor for URL(0);
  v16 = *(_QWORD *)(v15 - 8);
  v17 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v16 + 48);
  v18 = v17(v13, 1, v15);
  v19 = v17(v14, 1, v15);
  if (!v18)
  {
    if (!v19)
    {
      (*(void (**)(void *, void *, uint64_t))(v16 + 40))(v13, v14, v15);
      goto LABEL_7;
    }
    (*(void (**)(void *, uint64_t))(v16 + 8))(v13, v15);
    goto LABEL_6;
  }
  if (v19)
  {
LABEL_6:
    v20 = sub_10001B520(&qword_1000B93A0);
    memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, void *, uint64_t))(v16 + 32))(v13, v14, v15);
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
LABEL_7:
  v21 = v11[9];
  v22 = *(_QWORD *)(v6 + v21);
  *(_QWORD *)(v6 + v21) = *(_QWORD *)(v7 + v21);
  swift_release(v22);
  v23 = v11[10];
  v24 = (_QWORD *)(v6 + v23);
  v25 = (uint64_t *)(v7 + v23);
  v27 = *v25;
  v26 = v25[1];
  v28 = v24[1];
  *v24 = v27;
  v24[1] = v26;
  swift_bridgeObjectRelease(v28);
  v29 = v11[11];
  v30 = (_QWORD *)(v6 + v29);
  v31 = (uint64_t *)(v7 + v29);
  v33 = *v31;
  v32 = v31[1];
  v34 = v30[1];
  *v30 = v33;
  v30[1] = v32;
  swift_bridgeObjectRelease(v34);
  return a1;
}

uint64_t sub_1000587D8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000587E4);
}

uint64_t sub_1000587E4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for NewsTimelineEntry(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(a1, a2, v4);
}

uint64_t sub_100058820(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10005882C);
}

uint64_t sub_10005882C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for NewsTimelineEntry(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(a1, a2, a2, v4);
}

uint64_t type metadata accessor for ContentView(uint64_t a1)
{
  uint64_t result;

  result = qword_1000BB780;
  if (!qword_1000BB780)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for ContentView);
  return result;
}

uint64_t sub_1000588A8(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  uint64_t v4;

  result = type metadata accessor for NewsTimelineEntry(319);
  if (v3 <= 0x3F)
  {
    v4 = *(_QWORD *)(result - 8) + 64;
    swift_initStructMetadata(a1, 256, 1, &v4, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t sub_100058910(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_10009CE7C, 1);
}

uint64_t sub_100058920@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void (*v38)(char *, _QWORD, uint64_t);
  uint64_t v39;
  int *v40;
  int *v41;
  void (*v42)(char *, uint64_t);
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  int *v53;
  int *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t result;
  uint64_t v59;
  uint64_t *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  int *v69;
  uint64_t v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t KeyPath;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  int *v85;
  uint64_t v86;
  BOOL v87;
  uint64_t v88;
  uint64_t v89;
  char *v90;
  char *v91;
  uint64_t v92;
  uint64_t v93;
  unint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t OpaqueTypeConformance2;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  unint64_t v101;
  uint64_t v102;
  char *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  unint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t *v114;
  char *v115;
  uint64_t v116;
  uint64_t *v117;
  uint64_t v118;
  char *v119;
  uint64_t v120;
  char *v121;
  uint64_t v122;
  char *v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  char *v127;
  char *v128;
  uint64_t v129;
  char *v130;
  uint64_t v131;
  char *v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t *v138;
  uint64_t v139;
  uint64_t v140;
  int *v141;
  uint64_t v142;
  int *v143;

  v138 = a1;
  v126 = type metadata accessor for RegularContentView(0);
  __chkstk_darwin(v126);
  v125 = (uint64_t)&v111 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v127 = (char *)sub_10001B520(&qword_1000BB7B8);
  __chkstk_darwin(v127);
  v123 = (char *)&v111 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_10001B520(&qword_1000B9A28);
  __chkstk_darwin(v4);
  v114 = (uint64_t *)((char *)&v111 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  v6 = type metadata accessor for LayoutContext(0);
  __chkstk_darwin(v6);
  v116 = (uint64_t)&v111 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for TodayContent(0);
  __chkstk_darwin(v8);
  v113 = (uint64_t)&v111 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v118 = type metadata accessor for SmallContentView(0);
  __chkstk_darwin(v118);
  v117 = (uint64_t *)((char *)&v111 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  v120 = sub_10001B520(&qword_1000BB7C0);
  __chkstk_darwin(v120);
  v119 = (char *)&v111 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for RedactionReasons(0);
  v133 = *(_QWORD *)(v12 - 8);
  v134 = v12;
  v13 = __chkstk_darwin(v12);
  v121 = (char *)&v111 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = __chkstk_darwin(v13);
  v115 = (char *)&v111 - v16;
  __chkstk_darwin(v15);
  v132 = (char *)&v111 - v17;
  v131 = type metadata accessor for RectangularContentView(0);
  __chkstk_darwin(v131);
  v130 = (char *)&v111 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v129 = sub_10001B520(&qword_1000BB7C8);
  __chkstk_darwin(v129);
  v128 = (char *)&v111 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = sub_10001B520(&qword_1000BA3F0);
  v21 = __chkstk_darwin(v20);
  v124 = (uint64_t)&v111 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v21);
  v139 = (uint64_t)&v111 - v23;
  v24 = type metadata accessor for Item(0);
  v135 = *(_QWORD *)(v24 - 8);
  v136 = v24;
  v25 = __chkstk_darwin(v24);
  v112 = (uint64_t)&v111 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = __chkstk_darwin(v25);
  v122 = (uint64_t)&v111 - v28;
  __chkstk_darwin(v27);
  v30 = (char *)&v111 - v29;
  v31 = type metadata accessor for InternalWidgetFamily(0);
  v32 = *(_QWORD *)(v31 - 8);
  __chkstk_darwin(v31);
  v34 = (char *)&v111 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  v35 = *(int *)(type metadata accessor for NewsTimelineEntry(0) + 20);
  v137 = v1;
  v36 = v1 + v35;
  v37 = *(int *)(v8 + 36);
  v140 = v6;
  v38 = *(void (**)(char *, _QWORD, uint64_t))(v32 + 104);
  v38(v34, enum case for InternalWidgetFamily.accessoryRectangular(_:), v31);
  v39 = sub_10001C96C((unint64_t *)&qword_1000BC3A0, (uint64_t (*)(uint64_t))&type metadata accessor for InternalWidgetFamily, (uint64_t)&protocol conformance descriptor for InternalWidgetFamily);
  dispatch thunk of RawRepresentable.rawValue.getter(&v141, v31, v39);
  dispatch thunk of RawRepresentable.rawValue.getter(&v143, v31, v39);
  v40 = v141;
  v41 = v143;
  v42 = *(void (**)(char *, uint64_t))(v32 + 8);
  v42(v34, v31);
  if (v40 == v41)
  {
    v127 = v30;
    v44 = v129;
    v43 = (uint64_t)v130;
    v45 = v128;
    v46 = v36;
    v47 = v131;
    v48 = v132;
    v49 = v139;
    v50 = v140;
    sub_1000594C0(v139);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v135 + 48))(v49, 1, v136) == 1)
    {
      v51 = v139;
LABEL_7:
      v57 = sub_10005971C(v51);
      result = AnyView.init<A>(_:)(v57, &type metadata for EmptyView, &protocol witness table for EmptyView);
      v59 = result;
      v60 = v138;
      goto LABEL_21;
    }
    v61 = (uint64_t)v127;
    sub_10002AC74(v139, (uint64_t)v127, type metadata accessor for Item);
    v62 = v61;
    v63 = v43;
    sub_10002A83C(v62, v43, type metadata accessor for Item);
    sub_10002A83C(v46, v43 + *(int *)(v47 + 20), type metadata accessor for TodayContent);
    v64 = *(_QWORD *)(v46 + v37) + OBJC_IVAR____TtC7NewsTag20TrackableWidgetState_layoutContext;
    v65 = sub_10002A83C(v64, v43 + *(int *)(v47 + 24), type metadata accessor for LayoutContext);
    if (*(_BYTE *)(v64 + *(int *)(v50 + 44)) == 1)
    {
      static RedactionReasons.placeholder.getter(v65);
      v60 = v138;
      v66 = v134;
    }
    else
    {
      v141 = (int *)_swiftEmptyArrayStorage;
      v92 = sub_10001C96C(&qword_1000B9B00, (uint64_t (*)(uint64_t))&type metadata accessor for RedactionReasons, (uint64_t)&protocol conformance descriptor for RedactionReasons);
      v93 = sub_10001B520(&qword_1000B9B08);
      v94 = sub_1000596D0();
      v66 = v134;
      dispatch thunk of SetAlgebra.init<A>(_:)(&v141, v93, v94, v134, v92);
      v63 = v43;
      v60 = v138;
    }
    v95 = v133;
    v96 = sub_10001C96C(&qword_1000BB7E0, type metadata accessor for RectangularContentView, (uint64_t)&unk_10008C1D8);
    View.redacted(reason:)(v48, v47, v96);
    (*(void (**)(char *, uint64_t))(v95 + 8))(v48, v66);
    sub_100027D34(v63, type metadata accessor for RectangularContentView);
    v141 = (int *)v47;
    v142 = v96;
    OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v141, &opaque type descriptor for <<opaque return type of View.redacted(reason:)>>, 1);
    v59 = AnyView.init<A>(_:)(v45, v44, OpaqueTypeConformance2);
    v98 = (uint64_t)v127;
    goto LABEL_20;
  }
  v52 = v140;
  v38(v34, enum case for InternalWidgetFamily.systemSmall(_:), v31);
  dispatch thunk of RawRepresentable.rawValue.getter(&v141, v31, v39);
  dispatch thunk of RawRepresentable.rawValue.getter(&v143, v31, v39);
  v53 = v141;
  v54 = v143;
  v42(v34, v31);
  v55 = v52;
  if (v53 == v54)
  {
    v56 = v124;
    sub_1000594C0(v124);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v135 + 48))(v56, 1, v136) == 1)
    {
      v51 = v56;
      goto LABEL_7;
    }
    v73 = v122;
    sub_10002AC74(v56, v122, type metadata accessor for Item);
    v74 = v112;
    sub_10002A83C(v73, v112, type metadata accessor for Item);
    v75 = v113;
    sub_10002A83C(v36, v113, type metadata accessor for TodayContent);
    v76 = v37;
    v77 = *(_QWORD *)(v36 + v37) + OBJC_IVAR____TtC7NewsTag20TrackableWidgetState_layoutContext;
    v78 = v116;
    sub_10002A83C(v77, v116, type metadata accessor for LayoutContext);
    KeyPath = swift_getKeyPath(&unk_10008C670);
    v80 = swift_getKeyPath(&unk_10008C698);
    v81 = v36;
    v82 = (uint64_t)v114;
    *v114 = v80;
    v83 = sub_10001B520(&qword_1000B9A20);
    swift_storeEnumTagMultiPayload(v82, v83, 0);
    v84 = (uint64_t)v117;
    *v117 = KeyPath;
    *(_BYTE *)(v84 + 8) = 0;
    *(_QWORD *)(v84 + 16) = swift_getKeyPath(&unk_10008C6C8);
    *(_QWORD *)(v84 + 24) = 0;
    *(_QWORD *)(v84 + 32) = 0;
    *(_QWORD *)(v84 + 40) = 0;
    *(_BYTE *)(v84 + 48) = 0;
    v85 = (int *)v118;
    sub_100059920(v82, v84 + *(int *)(v118 + 24));
    sub_10002AC74(v74, v84 + v85[7], type metadata accessor for Item);
    sub_10002AC74(v75, v84 + v85[8], type metadata accessor for TodayContent);
    v86 = sub_10002AC74(v78, v84 + v85[9], type metadata accessor for LayoutContext);
    v87 = *(_BYTE *)(*(_QWORD *)(v81 + v76)
                   + OBJC_IVAR____TtC7NewsTag20TrackableWidgetState_layoutContext
                   + *(int *)(v55 + 44)) == 1;
    v60 = v138;
    v89 = v133;
    v88 = v134;
    v90 = v119;
    v91 = v115;
    if (v87)
    {
      static RedactionReasons.placeholder.getter(v86);
    }
    else
    {
      v141 = (int *)_swiftEmptyArrayStorage;
      v106 = sub_10001C96C(&qword_1000B9B00, (uint64_t (*)(uint64_t))&type metadata accessor for RedactionReasons, (uint64_t)&protocol conformance descriptor for RedactionReasons);
      v107 = sub_10001B520(&qword_1000B9B08);
      v108 = sub_1000596D0();
      dispatch thunk of SetAlgebra.init<A>(_:)(&v141, v107, v108, v88, v106);
    }
    v109 = sub_10001C96C(&qword_1000BB7D8, type metadata accessor for SmallContentView, (uint64_t)&unk_10008ADA8);
    View.redacted(reason:)(v91, v85, v109);
    (*(void (**)(char *, uint64_t))(v89 + 8))(v91, v88);
    sub_100027D34(v84, type metadata accessor for SmallContentView);
    v141 = v85;
    v142 = v109;
    v110 = swift_getOpaqueTypeConformance2(&v141, &opaque type descriptor for <<opaque return type of View.redacted(reason:)>>, 1);
    v59 = AnyView.init<A>(_:)(v90, v120, v110);
    v98 = v122;
LABEL_20:
    result = sub_100027D34(v98, type metadata accessor for Item);
    goto LABEL_21;
  }
  v67 = v125;
  sub_10002A83C(v36, v125, type metadata accessor for TodayContent);
  v68 = *(_QWORD *)(v36 + v37) + OBJC_IVAR____TtC7NewsTag20TrackableWidgetState_layoutContext;
  v69 = (int *)v126;
  v70 = sub_10002A83C(v68, v67 + *(int *)(v126 + 20), type metadata accessor for LayoutContext);
  if (*(_BYTE *)(v68 + *(int *)(v55 + 44)) == 1)
  {
    v71 = v121;
    static RedactionReasons.placeholder.getter(v70);
    v60 = v138;
    v72 = v134;
  }
  else
  {
    v141 = (int *)_swiftEmptyArrayStorage;
    v99 = sub_10001C96C(&qword_1000B9B00, (uint64_t (*)(uint64_t))&type metadata accessor for RedactionReasons, (uint64_t)&protocol conformance descriptor for RedactionReasons);
    v100 = sub_10001B520(&qword_1000B9B08);
    v101 = sub_1000596D0();
    v71 = v121;
    v72 = v134;
    dispatch thunk of SetAlgebra.init<A>(_:)(&v141, v100, v101, v134, v99);
    v60 = v138;
  }
  v102 = v133;
  v103 = v123;
  v104 = sub_10001C96C(&qword_1000BB7D0, type metadata accessor for RegularContentView, (uint64_t)&unk_10008BBB4);
  View.redacted(reason:)(v71, v69, v104);
  (*(void (**)(char *, uint64_t))(v102 + 8))(v71, v72);
  sub_100027D34(v67, type metadata accessor for RegularContentView);
  v141 = v69;
  v142 = v104;
  v105 = swift_getOpaqueTypeConformance2(&v141, &opaque type descriptor for <<opaque return type of View.redacted(reason:)>>, 1);
  result = AnyView.init<A>(_:)(v103, v127, v105);
  v59 = result;
LABEL_21:
  *v60 = v59;
  return result;
}

uint64_t sub_1000594C0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  _QWORD *v12;
  _QWORD *v13;
  void (*v14)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;

  v2 = type metadata accessor for Item(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = __chkstk_darwin(v2);
  v6 = (char *)&v19 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v8 = (char *)&v19 - v7;
  v9 = sub_10001B520(&qword_1000BA3F0);
  __chkstk_darwin(v9);
  v11 = (char *)&v19 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for NewsTimelineEntry(0);
  v12 = sub_10005D32C();
  v13 = v12;
  if (v12[2])
  {
    sub_10002A83C((uint64_t)v12 + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80)), (uint64_t)v11, type metadata accessor for Item);
    v14 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v3 + 56);
    v14(v11, 0, 1, v2);
  }
  else
  {
    v14 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v3 + 56);
    v14(v11, 1, 1, v2);
  }
  swift_bridgeObjectRelease(v13);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v3 + 48))(v11, 1, v2) == 1)
  {
    v15 = a1;
    v16 = 1;
    return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))v14)(v15, v16, 1, v2);
  }
  sub_10002AC74((uint64_t)v11, (uint64_t)v8, type metadata accessor for Item);
  sub_10002A83C((uint64_t)v8, (uint64_t)v6, type metadata accessor for Item);
  if (swift_getEnumCaseMultiPayload(v6, v2) == 1)
  {
    v17 = *((_QWORD *)v6 + 3);
    sub_1000249D8(*(_QWORD *)v6, *((_QWORD *)v6 + 1), v6[16]);
    swift_bridgeObjectRelease(v17);
    sub_10002AC74((uint64_t)v8, a1, type metadata accessor for Item);
    v15 = a1;
    v16 = 0;
    return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))v14)(v15, v16, 1, v2);
  }
  sub_10002AC74((uint64_t)v8, a1, type metadata accessor for Item);
  v14((char *)a1, 0, 1, v2);
  return sub_100027D34((uint64_t)v6, type metadata accessor for Item);
}

unint64_t sub_1000596D0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000B9B10;
  if (!qword_1000B9B10)
  {
    v1 = sub_10001B560(&qword_1000B9B08);
    result = swift_getWitnessTable(&protocol conformance descriptor for [A], v1);
    atomic_store(result, (unint64_t *)&qword_1000B9B10);
  }
  return result;
}

uint64_t sub_10005971C(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_10001B520(&qword_1000BA3F0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_10005975C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v3;

  v0 = type metadata accessor for EnvironmentValues.ShowsWidgetBackgroundKey(0);
  v1 = sub_10001C96C(qword_1000BB7E8, (uint64_t (*)(uint64_t))&type metadata accessor for EnvironmentValues.ShowsWidgetBackgroundKey, (uint64_t)&protocol conformance descriptor for EnvironmentValues.ShowsWidgetBackgroundKey);
  EnvironmentValues.subscript.getter(&v3, v0, v0, v1);
  return v3;
}

_QWORD *sub_1000597BC@<X0>(_BYTE *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *result;
  uint64_t v5;

  v2 = type metadata accessor for EnvironmentValues.ShowsWidgetBackgroundKey(0);
  v3 = sub_10001C96C(qword_1000BB7E8, (uint64_t (*)(uint64_t))&type metadata accessor for EnvironmentValues.ShowsWidgetBackgroundKey, (uint64_t)&protocol conformance descriptor for EnvironmentValues.ShowsWidgetBackgroundKey);
  result = EnvironmentValues.subscript.getter(&v5, v2, v2, v3);
  *a1 = v5;
  return result;
}

uint64_t sub_100059834()
{
  return EnvironmentValues.widgetRenderingMode.getter();
}

uint64_t sub_100059854()
{
  return EnvironmentValues.widgetRenderingMode.getter();
}

uint64_t sub_100059874(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v7;

  v2 = type metadata accessor for WidgetRenderingMode(0);
  __chkstk_darwin(v2);
  v4 = (char *)&v7 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t))(v5 + 16))(v4, a1);
  return EnvironmentValues.widgetRenderingMode.setter(v4);
}

void sub_1000598F4(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  *(double *)a1 = EnvironmentValues.widgetContentMargins.getter();
  *(_QWORD *)(a1 + 8) = v2;
  *(_QWORD *)(a1 + 16) = v3;
  *(_QWORD *)(a1 + 24) = v4;
}

uint64_t sub_100059920(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10001B520(&qword_1000B9A28);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void *sub_100059968()
{
  return &protocol witness table for AnyView;
}

uint64_t type metadata accessor for LazyIntentTimelineProvider(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10003DCE8(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for LazyIntentTimelineProvider);
}

uint64_t sub_100059980(uint64_t a1, uint64_t a2)
{
  return swift_getAssociatedConformanceWitness(*(_QWORD *)(a2 + 24), *(_QWORD *)(a2 + 16), a1, &protocol requirements base descriptor for IntentTimelineProvider, &associated conformance descriptor for IntentTimelineProvider.IntentTimelineProvider.Entry: TimelineEntry);
}

uint64_t sub_10005999C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v12;

  v7 = *(_QWORD *)(a3 - 8);
  v8 = __chkstk_darwin(a1);
  v10 = (char *)&v12 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  dispatch thunk of Lazy.value.getter(v8);
  dispatch thunk of IntentTimelineProvider.placeholder(in:)(a1, a3, a4);
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v10, a3);
}

uint64_t sub_100059A40(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, void (*a8)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v20;

  v15 = *(_QWORD *)(a6 - 8);
  v16 = __chkstk_darwin(a1);
  v18 = (char *)&v20 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  dispatch thunk of Lazy.value.getter(v16);
  a8(a1, a2, a3, a4, a6, a7);
  return (*(uint64_t (**)(char *, uint64_t))(v15 + 8))(v18, a6);
}

uint64_t sub_100059B00(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v11;

  v5 = *(_QWORD *)(a2 - 8);
  v6 = __chkstk_darwin(a1);
  v8 = (char *)&v11 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  dispatch thunk of Lazy.value.getter(v6);
  v9 = dispatch thunk of IntentTimelineProvider.recommendations()(a2, a3);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v8, a2);
  return v9;
}

uint64_t sub_100059B94(uint64_t a1)
{
  uint64_t *v1;

  return sub_100059B00(*v1, *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24));
}

uint64_t sub_100059BA4(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;

  return sub_10005999C(a1, *v2, *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24));
}

uint64_t sub_100059BB4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t *v5;

  return sub_100059A40(a1, a2, a3, a4, *v5, *(_QWORD *)(a5 + 16), *(_QWORD *)(a5 + 24), (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&dispatch thunk of IntentTimelineProvider.getSnapshot(for:in:completion:));
}

uint64_t sub_100059BDC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t *v5;

  return sub_100059A40(a1, a2, a3, a4, *v5, *(_QWORD *)(a5 + 16), *(_QWORD *)(a5 + 24), (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&dispatch thunk of IntentTimelineProvider.getTimeline(for:in:completion:));
}

uint64_t sub_100059C04(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v7;

  v7 = (_QWORD *)swift_task_alloc(async function pointer to IntentTimelineProvider.relevances()[1]);
  *(_QWORD *)(v3 + 16) = v7;
  *v7 = v3;
  v7[1] = sub_100059C70;
  return IntentTimelineProvider.relevances()(a1, a2, a3);
}

uint64_t sub_100059C70()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  v4 = *v0;
  v1 = *(_QWORD *)(v4 + 16);
  v2 = *v0;
  v4 = v2;
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t sub_100059CB8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v7;

  v7 = (_QWORD *)swift_task_alloc(async function pointer to IntentTimelineProvider.relevance()[1]);
  *(_QWORD *)(v3 + 16) = v7;
  *v7 = v3;
  v7[1] = sub_100059D24;
  return IntentTimelineProvider.relevance()(a1, a2, a3);
}

char *sub_100059D28(char *a1, char **a2, uint64_t a3)
{
  int v3;
  char *v4;
  char *v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int (*v14)(char *, uint64_t, uint64_t);
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  void *v27;
  id v28;
  char *__dst;

  v3 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  v4 = *a2;
  *(_QWORD *)a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    v6 = &v4[(v3 + 16) & ~(unint64_t)v3];
    swift_retain(v4);
  }
  else
  {
    v6 = a1;
    v7 = a2[1];
    v8 = a2[2];
    *((_QWORD *)a1 + 1) = v7;
    *((_QWORD *)a1 + 2) = v8;
    a1[24] = *((_BYTE *)a2 + 24);
    v9 = type metadata accessor for Section(0);
    v10 = *(int *)(v9 + 32);
    __dst = &v6[v10];
    v11 = (char *)a2 + v10;
    v12 = type metadata accessor for URL(0);
    v13 = *(_QWORD *)(v12 - 8);
    v14 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48);
    v15 = v4;
    v16 = v7;
    swift_bridgeObjectRetain(v8);
    if (v14(v11, 1, v12))
    {
      v17 = sub_10001B520(&qword_1000B93A0);
      memcpy(__dst, v11, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v13 + 16))(__dst, v11, v12);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v13 + 56))(__dst, 0, 1, v12);
    }
    v18 = *(int *)(v9 + 36);
    v19 = &v6[v18];
    v20 = (char *)a2 + v18;
    v21 = type metadata accessor for Date(0);
    v22 = *(_QWORD *)(v21 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v22 + 48))(v20, 1, v21))
    {
      v23 = sub_10001B520((uint64_t *)&unk_1000BC550);
      memcpy(v19, v20, *(_QWORD *)(*(_QWORD *)(v23 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v22 + 16))(v19, v20, v21);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v22 + 56))(v19, 0, 1, v21);
    }
    v24 = *(int *)(a3 + 20);
    v25 = &v6[v24];
    v26 = (uint64_t)a2 + v24;
    *(_OWORD *)v25 = *(_OWORD *)v26;
    v27 = *(void **)(v26 + 16);
    *((_QWORD *)v25 + 2) = v27;
    v28 = v27;
  }
  return v6;
}

void sub_100059F08(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 16));
  v4 = type metadata accessor for Section(0);
  v5 = a1 + *(int *)(v4 + 32);
  v6 = type metadata accessor for URL(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6))
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v5, v6);
  v8 = a1 + *(int *)(v4 + 36);
  v9 = type metadata accessor for Date(0);
  v10 = *(_QWORD *)(v9 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9))
    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v8, v9);

}

uint64_t sub_100059FE8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  const void *v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int (*v13)(const void *, uint64_t, uint64_t);
  id v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  const void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  id v27;
  void *__dst;

  v6 = *(void **)a2;
  v5 = *(void **)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v5;
  v7 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 16) = v7;
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  v8 = type metadata accessor for Section(0);
  v9 = *(int *)(v8 + 32);
  __dst = (void *)(a1 + v9);
  v10 = (const void *)(a2 + v9);
  v11 = type metadata accessor for URL(0);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v12 + 48);
  v14 = v6;
  v15 = v5;
  swift_bridgeObjectRetain(v7);
  if (v13(v10, 1, v11))
  {
    v16 = sub_10001B520(&qword_1000B93A0);
    memcpy(__dst, v10, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v12 + 16))(__dst, v10, v11);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v12 + 56))(__dst, 0, 1, v11);
  }
  v17 = *(int *)(v8 + 36);
  v18 = (void *)(a1 + v17);
  v19 = (const void *)(a2 + v17);
  v20 = type metadata accessor for Date(0);
  v21 = *(_QWORD *)(v20 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v21 + 48))(v19, 1, v20))
  {
    v22 = sub_10001B520((uint64_t *)&unk_1000BC550);
    memcpy(v18, v19, *(_QWORD *)(*(_QWORD *)(v22 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v21 + 16))(v18, v19, v20);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v21 + 56))(v18, 0, 1, v20);
  }
  v23 = *(int *)(a3 + 20);
  v24 = a1 + v23;
  v25 = a2 + v23;
  *(_OWORD *)v24 = *(_OWORD *)v25;
  v26 = *(void **)(v25 + 16);
  *(_QWORD *)(v24 + 16) = v26;
  v27 = v26;
  return a1;
}

uint64_t sub_10005A1A0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v6;
  void *v7;
  id v8;
  void *v9;
  void *v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t (*v20)(void *, uint64_t, uint64_t);
  int v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t (*v29)(void *, uint64_t, uint64_t);
  int v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  _QWORD *v35;
  void *v36;
  void *v37;
  id v38;

  v6 = *(void **)a1;
  v7 = *(void **)a2;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v8 = v7;

  v9 = *(void **)(a2 + 8);
  v10 = *(void **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v9;
  v11 = v9;

  v12 = *(_QWORD *)(a2 + 16);
  v13 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v12;
  swift_bridgeObjectRetain(v12);
  swift_bridgeObjectRelease(v13);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  v14 = type metadata accessor for Section(0);
  v15 = *(int *)(v14 + 32);
  v16 = (void *)(a1 + v15);
  v17 = (void *)(a2 + v15);
  v18 = type metadata accessor for URL(0);
  v19 = *(_QWORD *)(v18 - 8);
  v20 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v19 + 48);
  v21 = v20(v16, 1, v18);
  v22 = v20(v17, 1, v18);
  if (v21)
  {
    if (!v22)
    {
      (*(void (**)(void *, void *, uint64_t))(v19 + 16))(v16, v17, v18);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v19 + 56))(v16, 0, 1, v18);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v22)
  {
    (*(void (**)(void *, uint64_t))(v19 + 8))(v16, v18);
LABEL_6:
    v23 = sub_10001B520(&qword_1000B93A0);
    memcpy(v16, v17, *(_QWORD *)(*(_QWORD *)(v23 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, void *, uint64_t))(v19 + 24))(v16, v17, v18);
LABEL_7:
  v24 = *(int *)(v14 + 36);
  v25 = (void *)(a1 + v24);
  v26 = (void *)(a2 + v24);
  v27 = type metadata accessor for Date(0);
  v28 = *(_QWORD *)(v27 - 8);
  v29 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v28 + 48);
  v30 = v29(v25, 1, v27);
  v31 = v29(v26, 1, v27);
  if (!v30)
  {
    if (!v31)
    {
      (*(void (**)(void *, void *, uint64_t))(v28 + 24))(v25, v26, v27);
      goto LABEL_13;
    }
    (*(void (**)(void *, uint64_t))(v28 + 8))(v25, v27);
    goto LABEL_12;
  }
  if (v31)
  {
LABEL_12:
    v32 = sub_10001B520((uint64_t *)&unk_1000BC550);
    memcpy(v25, v26, *(_QWORD *)(*(_QWORD *)(v32 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(void *, void *, uint64_t))(v28 + 16))(v25, v26, v27);
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v28 + 56))(v25, 0, 1, v27);
LABEL_13:
  v33 = *(int *)(a3 + 20);
  v34 = (_QWORD *)(a1 + v33);
  v35 = (_QWORD *)(a2 + v33);
  *v34 = *v35;
  v34[1] = v35[1];
  v36 = (void *)v35[2];
  v37 = (void *)v34[2];
  v34[2] = v36;
  v38 = v36;

  return a1;
}

uint64_t sub_10005A3FC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  void *v8;
  const void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  const void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  v6 = type metadata accessor for Section(0);
  v7 = *(int *)(v6 + 32);
  v8 = (void *)(a1 + v7);
  v9 = (const void *)(a2 + v7);
  v10 = type metadata accessor for URL(0);
  v11 = *(_QWORD *)(v10 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10))
  {
    v12 = sub_10001B520(&qword_1000B93A0);
    memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v11 + 32))(v8, v9, v10);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
  }
  v13 = *(int *)(v6 + 36);
  v14 = (void *)(a1 + v13);
  v15 = (const void *)(a2 + v13);
  v16 = type metadata accessor for Date(0);
  v17 = *(_QWORD *)(v16 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v17 + 48))(v15, 1, v16))
  {
    v18 = sub_10001B520((uint64_t *)&unk_1000BC550);
    memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v17 + 32))(v14, v15, v16);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v17 + 56))(v14, 0, 1, v16);
  }
  v19 = *(int *)(a3 + 20);
  v20 = a1 + v19;
  v21 = a2 + v19;
  *(_OWORD *)v20 = *(_OWORD *)v21;
  *(_QWORD *)(v20 + 16) = *(_QWORD *)(v21 + 16);
  return a1;
}

uint64_t sub_10005A584(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t (*v15)(void *, uint64_t, uint64_t);
  int v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t (*v24)(void *, uint64_t, uint64_t);
  int v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;

  v6 = *(void **)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;

  v7 = *(void **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);

  v8 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRelease(v8);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  v9 = type metadata accessor for Section(0);
  v10 = *(int *)(v9 + 32);
  v11 = (void *)(a1 + v10);
  v12 = (void *)(a2 + v10);
  v13 = type metadata accessor for URL(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v14 + 48);
  v16 = v15(v11, 1, v13);
  v17 = v15(v12, 1, v13);
  if (v16)
  {
    if (!v17)
    {
      (*(void (**)(void *, void *, uint64_t))(v14 + 32))(v11, v12, v13);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v14 + 56))(v11, 0, 1, v13);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v17)
  {
    (*(void (**)(void *, uint64_t))(v14 + 8))(v11, v13);
LABEL_6:
    v18 = sub_10001B520(&qword_1000B93A0);
    memcpy(v11, v12, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, void *, uint64_t))(v14 + 40))(v11, v12, v13);
LABEL_7:
  v19 = *(int *)(v9 + 36);
  v20 = (void *)(a1 + v19);
  v21 = (void *)(a2 + v19);
  v22 = type metadata accessor for Date(0);
  v23 = *(_QWORD *)(v22 - 8);
  v24 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v23 + 48);
  v25 = v24(v20, 1, v22);
  v26 = v24(v21, 1, v22);
  if (!v25)
  {
    if (!v26)
    {
      (*(void (**)(void *, void *, uint64_t))(v23 + 40))(v20, v21, v22);
      goto LABEL_13;
    }
    (*(void (**)(void *, uint64_t))(v23 + 8))(v20, v22);
    goto LABEL_12;
  }
  if (v26)
  {
LABEL_12:
    v27 = sub_10001B520((uint64_t *)&unk_1000BC550);
    memcpy(v20, v21, *(_QWORD *)(*(_QWORD *)(v27 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(void *, void *, uint64_t))(v23 + 32))(v20, v21, v22);
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v23 + 56))(v20, 0, 1, v22);
LABEL_13:
  v28 = *(int *)(a3 + 20);
  v29 = a1 + v28;
  v30 = a2 + v28;
  *(_OWORD *)v29 = *(_OWORD *)v30;
  v31 = *(void **)(v29 + 16);
  *(_QWORD *)(v29 + 16) = *(_QWORD *)(v30 + 16);

  return a1;
}

uint64_t sub_10005A7C4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10005A7D0);
}

uint64_t sub_10005A7D0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;

  v6 = type metadata accessor for Section(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 20) + 16);
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  return (v9 + 1);
}

uint64_t sub_10005A850(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10005A85C);
}

uint64_t sub_10005A85C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = type metadata accessor for Section(0);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 20) + 16) = (a2 - 1);
  return result;
}

uint64_t type metadata accessor for SectionHeaderView(uint64_t a1)
{
  uint64_t result;

  result = qword_1000BB8D8;
  if (!qword_1000BB8D8)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for SectionHeaderView);
  return result;
}

uint64_t sub_10005A914(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[2];

  result = type metadata accessor for Section(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(result - 8) + 64;
    v4[1] = &unk_10008C7E8;
    swift_initStructMetadata(a1, 256, 2, v4, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t sub_10005A984(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_10009CF54, 1);
}

uint64_t sub_10005A994@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  id v9;
  void *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  __int128 v21;
  void *v22;
  void *v23;
  uint64_t result;
  _OWORD v25[3];

  v3 = sub_10001B520(&qword_1000BB910);
  __chkstk_darwin(v3);
  v5 = (_QWORD *)((char *)v25 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  v6 = sub_10001B520(&qword_1000BB918);
  __chkstk_darwin(v6);
  v8 = (char *)v25 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = objc_msgSend(*(id *)(v1 + 8), "name");
  if (v9)
  {
    v10 = v9;
    v11 = static String._unconditionallyBridgeFromObjectiveC(_:)(v9);
    v13 = v12;

    *v5 = static Alignment.topTrailing.getter();
    v5[1] = v14;
    v15 = sub_10001B520(&qword_1000BB920);
    sub_10005AB48((char *)v1, v11, v13, (uint64_t)v5 + *(int *)(v15 + 44));
    swift_bridgeObjectRelease(v13);
    v16 = type metadata accessor for SectionHeaderView(0);
    v17 = *(_QWORD *)(v1 + *(int *)(v16 + 20) + 8);
    v18 = static Alignment.center.getter(v16);
    _FrameLayout.init(width:height:alignment:)(v25, 0, 1, v17, 0, v18, v19);
    sub_10002CCB0((uint64_t)v5, (uint64_t)v8, &qword_1000BB910);
    v20 = &v8[*(int *)(v6 + 36)];
    v21 = v25[1];
    *(_OWORD *)v20 = v25[0];
    *((_OWORD *)v20 + 1) = v21;
    *((_OWORD *)v20 + 2) = v25[2];
    sub_10002CCF4((uint64_t)v5, &qword_1000BB910);
    v22 = (void *)sub_10005C190();
    v9 = v8;
    v23 = (void *)v6;
  }
  else
  {
    v23 = &type metadata for EmptyView;
    v22 = &protocol witness table for EmptyView;
  }
  result = AnyView.init<A>(_:)(v9, v23, v22);
  *a1 = result;
  return result;
}

uint64_t sub_10005AB48@<X0>(char *a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;

  v29 = a4;
  v7 = sub_10001B520(&qword_1000BB938);
  v8 = __chkstk_darwin(v7);
  v10 = (char *)&v29 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v12 = (char *)&v29 - v11;
  v13 = sub_10001B520(&qword_1000BB940);
  v14 = __chkstk_darwin(v13);
  v16 = (char *)&v29 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = __chkstk_darwin(v14);
  v19 = (char *)&v29 - v18;
  *(_QWORD *)v19 = static HorizontalAlignment.leading.getter(v17);
  *((_QWORD *)v19 + 1) = 0;
  v19[16] = 1;
  v20 = sub_10001B520(&qword_1000BB948);
  v21 = &v19[*(int *)(v20 + 44)];
  *(_QWORD *)v12 = static VerticalAlignment.lastTextBaseline.getter(v20);
  *((_QWORD *)v12 + 1) = 0x4008000000000000;
  v12[16] = 0;
  v22 = sub_10001B520(&qword_1000BB950);
  sub_10005B3A0(a1, a2, a3, (uint64_t)&v12[*(int *)(v22 + 44)]);
  sub_10002CCB0((uint64_t)v12, (uint64_t)v10, &qword_1000BB938);
  *(_QWORD *)v21 = 0;
  v21[8] = 1;
  v23 = sub_10001B520(&qword_1000BB958);
  sub_10002CCB0((uint64_t)v10, (uint64_t)&v21[*(int *)(v23 + 48)], &qword_1000BB938);
  sub_10002CCF4((uint64_t)v12, &qword_1000BB938);
  sub_10002CCF4((uint64_t)v10, &qword_1000BB938);
  sub_10005AD80(&v30);
  v24 = v30;
  v25 = static Edge.Set.top.getter();
  sub_10002CCB0((uint64_t)v19, (uint64_t)v16, &qword_1000BB940);
  v26 = v29;
  sub_10002CCB0((uint64_t)v16, v29, &qword_1000BB940);
  v27 = v26 + *(int *)(sub_10001B520(&qword_1000BB960) + 48);
  *(_QWORD *)v27 = v24;
  *(_BYTE *)(v27 + 8) = v25;
  *(_OWORD *)(v27 + 16) = 0u;
  *(_OWORD *)(v27 + 32) = 0u;
  *(_BYTE *)(v27 + 48) = 1;
  swift_retain(v24);
  sub_10002CCF4((uint64_t)v19, &qword_1000BB940);
  swift_release(v24);
  return sub_10002CCF4((uint64_t)v16, &qword_1000BB940);
}

void sub_10005AD80(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  __n128 v17;
  NSString v18;
  void *v19;
  id v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  uint64_t v27;
  void (*v28)(char *, uint64_t, uint64_t);
  uint64_t v29;
  uint64_t v30;
  NSString v31;
  id v32;
  double v33;
  double v34;
  double v35;
  double v36;
  double v37;
  double v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  double v45;
  double v46;
  double v47;
  double v48;
  double v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  uint64_t OpaqueTypeConformance2;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t *v71;
  __int128 v72;
  uint64_t v73;
  char *v74;
  char *v75;
  uint64_t v76;
  __int128 v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  __int16 v82;
  uint64_t v83;
  char v84;
  uint64_t v85;
  char v86;
  __int128 v87;
  uint64_t v88;
  __int128 v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  char v93;
  uint64_t v94;
  char v95;
  __int128 v96;

  v3 = sub_10001B520(&qword_1000BB968);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v75 = (char *)&v66 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_10001B520(&qword_1000BB970);
  __chkstk_darwin(v6);
  v74 = (char *)&v66 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)&v72 = type metadata accessor for Color.RGBColorSpace(0);
  v8 = *(_QWORD *)(v72 - 8);
  __chkstk_darwin(v72);
  v10 = (char *)&v66 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for Image.ResizingMode(0);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = __chkstk_darwin(v11);
  v15 = (char *)&v66 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v73 = v1;
  if (*(_BYTE *)(v1 + 24) == 1)
  {
    v68 = v4;
    v69 = v6;
    v70 = v3;
    v71 = a1;
    if (qword_1000B8CF8 != -1)
      swift_once(&qword_1000B8CF8, sub_100036F00);
    v16 = Image.init(uiImage:)((id)qword_1000C0750);
    (*(void (**)(char *, _QWORD, uint64_t))(v12 + 104))(v15, enum case for Image.ResizingMode.stretch(_:), v11);
    v67 = Image.resizable(capInsets:resizingMode:)(v15, v16, 0.0, 0.0, 0.0, 0.0);
    v17 = swift_release(v16);
    (*(void (**)(char *, uint64_t, __n128))(v12 + 8))(v15, v11, v17);
    v18 = String._bridgeToObjectiveC()();
    v19 = (void *)objc_opt_self(FCColor);
    v20 = objc_msgSend(v19, "colorWithHexString:", v18);

    objc_msgSend(v20, "red");
    v22 = v21;
    objc_msgSend(v20, "green");
    v24 = v23;
    objc_msgSend(v20, "blue");
    v26 = v25;
    v27 = enum case for Color.RGBColorSpace.sRGB(_:);
    v28 = *(void (**)(char *, uint64_t, uint64_t))(v8 + 104);
    v29 = v72;
    v28(v10, enum case for Color.RGBColorSpace.sRGB(_:), v72);
    v30 = Color.init(_:red:green:blue:opacity:)(v10, v22, v24, v26, 1.0);

    v31 = String._bridgeToObjectiveC()();
    v32 = objc_msgSend(v19, "colorWithHexString:", v31);

    objc_msgSend(v32, "red");
    v34 = v33;
    objc_msgSend(v32, "green");
    v36 = v35;
    objc_msgSend(v32, "blue");
    v38 = v37;
    v28(v10, v27, v29);
    v39 = Color.init(_:red:green:blue:opacity:)(v10, v34, v36, v38, 1.0);

    v40 = sub_10001B520(&qword_1000BB978);
    v41 = swift_allocObject(v40, 48, 7);
    *(_OWORD *)(v41 + 16) = xmmword_10008AC80;
    v42 = v30;
    *(_QWORD *)(v41 + 32) = v30;
    *(_QWORD *)(v41 + 40) = v39;
    v76 = v41;
    specialized Array._endMutation()();
    v43 = v76;
    swift_retain(v30);
    swift_retain(v39);
    v44 = Gradient.init(colors:)(v43);
    v45 = static UnitPoint.top.getter();
    v47 = v46;
    v48 = static UnitPoint.bottom.getter();
    LinearGradient.init(gradient:startPoint:endPoint:)(&v88, v44, v45, v47, v48, v49);
    v50 = v88;
    v72 = v89;
    v51 = v90;
    v52 = v91;
    v53 = *(_QWORD *)(v73 + *(int *)(type metadata accessor for SectionHeaderView(0) + 20));
    v54 = v67;
    v55 = swift_retain(v67);
    v56 = static Alignment.center.getter(v55);
    _FrameLayout.init(width:height:alignment:)(&v92, 0, 1, v53, 0, v56, v57);
    v76 = v50;
    v77 = v72;
    v78 = v51;
    v79 = v52;
    v80 = v54;
    v81 = 0x3FF0000000000000;
    v82 = 0;
    v83 = v92;
    v84 = v93;
    v85 = v94;
    v86 = v95;
    v87 = v96;
    v58 = sub_10001B520(&qword_1000BB980);
    v59 = sub_10005C214(&qword_1000BB988, &qword_1000BB980, (void (*)(void))sub_10005C27C);
    v60 = v75;
    View.unredacted()(v58, v59);
    sub_10005C368(&v88);
    swift_release(v54);
    v76 = v58;
    *(_QWORD *)&v77 = v59;
    OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v76, &opaque type descriptor for <<opaque return type of View.unredacted()>>, 1);
    v62 = v74;
    v63 = v70;
    View.widgetAccentable(_:)(1, v70, OpaqueTypeConformance2);
    (*(void (**)(char *, uint64_t))(v68 + 8))(v60, v63);
    v76 = v63;
    *(_QWORD *)&v77 = OpaqueTypeConformance2;
    v64 = swift_getOpaqueTypeConformance2(&v76, &opaque type descriptor for <<opaque return type of View.widgetAccentable(_:)>>, 1);
    v65 = AnyView.init<A>(_:)(v62, v69, v64);
    swift_release(v54);
    swift_release(v39);
    swift_release(v42);
    a1 = v71;
  }
  else
  {
    v65 = AnyView.init<A>(_:)(v13, &type metadata for EmptyView, &protocol witness table for EmptyView);
  }
  *a1 = v65;
}

uint64_t sub_10005B3A0@<X0>(char *a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t OpaqueTypeConformance2;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  unint64_t v59;
  _QWORD *v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  uint64_t v71;
  unint64_t v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  unint64_t v79;
  _QWORD *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  char *v88;
  char *v89;
  Swift::String v90;
  char *v91;
  char *v92;
  char *v93;
  Swift::String v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  char v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  char v105;
  char v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t *v113;
  uint64_t v114;
  unint64_t v116;
  __int16 v117;
  char *v118;
  char *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  char *v123;
  char *v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  char *v128;
  char *v129;
  char *v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  char *v135;
  uint64_t v136;
  uint64_t v137;
  char *v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  unint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  char *v149;
  uint64_t v150;
  uint64_t v151;
  _QWORD *v152;
  uint64_t v153;
  uint64_t v154;
  unint64_t v155;
  uint64_t v156;
  unint64_t v157;

  v144 = a3;
  v142 = a2;
  v151 = a4;
  v136 = type metadata accessor for Text.DateStyle.UnitsConfiguration.Style(0);
  v132 = *(_QWORD *)(v136 - 8);
  __chkstk_darwin(v136);
  v135 = (char *)&v118 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v137 = type metadata accessor for Text.DateStyle.UnitsConfiguration(0);
  v134 = *(_QWORD *)(v137 - 8);
  __chkstk_darwin(v137);
  v130 = (char *)&v118 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v133 = type metadata accessor for Text.DateStyle(0);
  v131 = *(_QWORD *)(v133 - 8);
  __chkstk_darwin(v133);
  v129 = (char *)&v118 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for LocalizedStringKey.StringInterpolation(0);
  __chkstk_darwin(v8);
  v128 = (char *)&v118 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_10001B520((uint64_t *)&unk_1000BC550);
  __chkstk_darwin(v10);
  v147 = (uint64_t)&v118 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v150 = type metadata accessor for Date(0);
  v153 = *(_QWORD *)(v150 - 8);
  __chkstk_darwin(v150);
  v149 = (char *)&v118 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v126 = sub_10001B520(&qword_1000BB9C8);
  v125 = *(_QWORD *)(v126 - 8);
  __chkstk_darwin(v126);
  v124 = (char *)&v118 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v146 = sub_10001B520(&qword_1000BB9D0);
  v14 = __chkstk_darwin(v146);
  v123 = (char *)&v118 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  v127 = (uint64_t)&v118 - v16;
  v143 = sub_10001B520(&qword_1000BB9D8);
  __chkstk_darwin(v143);
  v145 = (uint64_t)&v118 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v122 = type metadata accessor for AccessibilityTraits(0);
  v121 = *(_QWORD *)(v122 - 8);
  __chkstk_darwin(v122);
  v118 = (char *)&v118 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v139 = sub_10001B520(&qword_1000BB9E0);
  v120 = *(_QWORD *)(v139 - 8);
  __chkstk_darwin(v139);
  v20 = (char *)&v118 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v141 = sub_10001B520(&qword_1000BB9E8);
  v21 = __chkstk_darwin(v141);
  v23 = (char *)&v118 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = __chkstk_darwin(v21);
  v119 = (char *)&v118 - v25;
  __chkstk_darwin(v24);
  v27 = (char *)&v118 - v26;
  v28 = sub_10001B520(&qword_1000B93A0);
  __chkstk_darwin(v28);
  v30 = (char *)&v118 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  v31 = type metadata accessor for URL(0);
  v32 = *(_QWORD *)(v31 - 8);
  v33 = __chkstk_darwin(v31);
  v35 = (char *)&v118 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v33);
  v37 = (char *)&v118 - v36;
  v38 = sub_10001B520(&qword_1000BB9F0);
  v39 = __chkstk_darwin(v38);
  v148 = (uint64_t)&v118 - ((v40 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v39);
  v152 = (char **)((char *)&v118 - v41);
  v140 = type metadata accessor for Section(0);
  sub_10002CCB0((uint64_t)&a1[*(int *)(v140 + 32)], (uint64_t)v30, &qword_1000B93A0);
  v42 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v32 + 48))(v30, 1, v31);
  v138 = a1;
  if (v42 == 1)
  {
    sub_10002CCF4((uint64_t)v30, &qword_1000B93A0);
    v43 = sub_100033B20();
    v44 = v142;
    v45 = v144;
    sub_10005BF54(v142, v144, v43, (uint64_t)v20);
    swift_release(v43);
    v156 = v44;
    v157 = v45;
    v46 = sub_10001B560(&qword_1000BB9F8);
    v47 = sub_10001B560(&qword_1000B9DE0);
    v48 = sub_10005C390();
    v154 = v47;
    v155 = v48;
    OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v154, &opaque type descriptor for <<opaque return type of View.widgetAccentable(_:)>>, 1);
    v154 = v46;
    v155 = OpaqueTypeConformance2;
    v50 = swift_getOpaqueTypeConformance2(&v154, &opaque type descriptor for <<opaque return type of View.unredacted()>>, 1);
    v51 = sub_10002ACB8();
    v52 = v139;
    View.accessibilityLabel<A>(_:)(&v156, v139, &type metadata for String, v50, v51);
    v53 = (*(uint64_t (**)(char *, uint64_t))(v120 + 8))(v20, v52);
    v54 = v118;
    static AccessibilityTraits.isButton.getter(v53);
    v55 = (uint64_t)v119;
    v56 = v141;
    ModifiedContent<>.accessibilityAddTraits(_:)(v54, v141);
    (*(void (**)(char *, uint64_t))(v121 + 8))(v54, v122);
    sub_10002CCF4((uint64_t)v23, &qword_1000BB9E8);
    sub_10002CB18(v55, (uint64_t)v27, &qword_1000BB9E8);
    v57 = v145;
    sub_10002CCB0((uint64_t)v27, v145, &qword_1000BB9E8);
    swift_storeEnumTagMultiPayload(v57, v143, 1);
    v58 = sub_10005C414();
    v59 = sub_10005C4E0();
    v60 = v152;
    _ConditionalContent<>.init(storage:)(v152, v57, v146, v56, v58, v59);
    sub_10002CCF4((uint64_t)v27, &qword_1000BB9E8);
    v61 = a1;
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v32 + 32))(v37, v30, v31);
    v62 = (*(uint64_t (**)(char *, char *, uint64_t))(v32 + 16))(v35, v37, v31);
    __chkstk_darwin(v62);
    v63 = v142;
    *(&v118 - 4) = a1;
    *(&v118 - 3) = (char *)v63;
    v64 = v144;
    v116 = v144;
    v65 = sub_10001B560(&qword_1000BB9F8);
    v66 = sub_10001B560(&qword_1000B9DE0);
    v67 = sub_10005C390();
    v156 = v66;
    v157 = v67;
    v68 = swift_getOpaqueTypeConformance2(&v156, &opaque type descriptor for <<opaque return type of View.widgetAccentable(_:)>>, 1);
    v156 = v65;
    v157 = v68;
    v69 = swift_getOpaqueTypeConformance2(&v156, &opaque type descriptor for <<opaque return type of View.unredacted()>>, 1);
    v70 = v124;
    Link.init(destination:label:)(v35, sub_10005C604, &v118 - 6, v139, v69);
    v156 = v63;
    v157 = v64;
    v71 = sub_10002CE94(&qword_1000BBA08, &qword_1000BB9C8, (uint64_t)&protocol conformance descriptor for Link<A>);
    v72 = sub_10002ACB8();
    v73 = v123;
    v74 = v126;
    View.accessibilityLabel<A>(_:)(&v156, v126, &type metadata for String, v71, v72);
    (*(void (**)(char *, uint64_t))(v125 + 8))(v70, v74);
    v75 = (uint64_t)v73;
    v76 = v127;
    sub_10002CB18(v75, v127, &qword_1000BB9D0);
    v77 = v145;
    sub_10002CCB0(v76, v145, &qword_1000BB9D0);
    swift_storeEnumTagMultiPayload(v77, v143, 0);
    v78 = sub_10005C414();
    v79 = sub_10005C4E0();
    v80 = v152;
    _ConditionalContent<>.init(storage:)(v152, v77, v146, v141, v78, v79);
    sub_10002CCF4(v76, &qword_1000BB9D0);
    (*(void (**)(char *, uint64_t))(v32 + 8))(v37, v31);
    v61 = v138;
    v60 = v80;
  }
  v81 = v147;
  sub_10002CCB0((uint64_t)&v61[*(int *)(v140 + 36)], v147, (uint64_t *)&unk_1000BC550);
  v82 = v153;
  v83 = v150;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v153 + 48))(v81, 1, v150) == 1)
  {
    sub_10002CCF4(v81, (uint64_t *)&unk_1000BC550);
    v84 = 0;
    v85 = 0;
    v86 = 0;
    v87 = 0;
  }
  else
  {
    v88 = v149;
    (*(void (**)(char *, uint64_t, uint64_t))(v82 + 32))(v149, v81, v83);
    v89 = v128;
    LocalizedStringKey.StringInterpolation.init(literalCapacity:interpolationCount:)(2, 1);
    v90._countAndFlagsBits = 40;
    v90._object = (void *)0xE100000000000000;
    LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v90);
    v91 = v135;
    (*(void (**)(char *, _QWORD, uint64_t))(v132 + 104))(v135, enum case for Text.DateStyle.UnitsConfiguration.Style.brief(_:), v136);
    v92 = v130;
    Text.DateStyle.UnitsConfiguration.init(units:style:)(112, v91);
    v93 = v129;
    static Text.DateStyle.relative(unitConfiguration:)(v92);
    (*(void (**)(char *, uint64_t))(v134 + 8))(v92, v137);
    LocalizedStringKey.StringInterpolation.appendInterpolation(_:style:)(v88, v93);
    (*(void (**)(char *, uint64_t))(v131 + 8))(v93, v133);
    v94._countAndFlagsBits = 41;
    v94._object = (void *)0xE100000000000000;
    LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v94);
    v95 = LocalizedStringKey.init(stringInterpolation:)(v89);
    v117 = 256;
    v116 = 0;
    v96 = Text.init(_:tableName:bundle:comment:)(v95);
    v98 = v97;
    v100 = v99;
    v102 = v101 & 1;
    v103 = static Color.secondary.getter(v96);
    v84 = Text.foregroundColor(_:)(v103, v96, v98, v102, v100);
    v85 = v104;
    v106 = v105;
    v87 = v107;
    swift_release(v103);
    v86 = v106 & 1;
    v108 = v96;
    v61 = v138;
    sub_1000249D8(v108, v98, v102);
    swift_bridgeObjectRelease(v100);
    v60 = v152;
    (*(void (**)(char *, uint64_t))(v153 + 8))(v149, v83);
  }
  v109 = *(_QWORD *)&v61[*(int *)(type metadata accessor for SectionHeaderView(0) + 20)];
  v110 = v148;
  sub_10002CCB0((uint64_t)v60, v148, &qword_1000BB9F0);
  v111 = v151;
  sub_10002CCB0(v110, v151, &qword_1000BB9F0);
  v112 = sub_10001B520((uint64_t *)&unk_1000BBA18);
  v113 = (uint64_t *)(v111 + *(int *)(v112 + 48));
  *v113 = v84;
  v113[1] = v85;
  v113[2] = v86;
  v113[3] = v87;
  v114 = v111 + *(int *)(v112 + 64);
  *(_QWORD *)v114 = v109;
  *(_BYTE *)(v114 + 8) = 0;
  sub_10005C5A4(v84, v85, v86, v87);
  sub_10002CCF4((uint64_t)v60, &qword_1000BB9F0);
  sub_10005C5D4(v84, v85, v86, v87);
  return sub_10002CCF4(v110, &qword_1000BB9F0);
}

double sub_10005BEFC@<D0>(uint64_t a1@<X1>, unint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v6;
  double result;

  v6 = sub_100033B20();
  sub_10005BF54(a1, a2, v6, a3);
  *(_QWORD *)&result = swift_release(v6).n128_u64[0];
  return result;
}

uint64_t sub_10005BF54@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t v8;
  id v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t KeyPath;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  char *v32;
  uint64_t OpaqueTypeConformance2;
  uint64_t v34;
  __n128 v35;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  char v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char v49;
  uint64_t v50;
  uint64_t v51;

  v41 = a4;
  v40 = sub_10001B520(&qword_1000BB9F8);
  v42 = *(_QWORD *)(v40 - 8);
  __chkstk_darwin(v40);
  v39 = (char *)&v37 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *(id *)(v4 + *(int *)(type metadata accessor for SectionHeaderView(0) + 20) + 16);
  v10 = Font.init(_:)(v9);
  v38 = v10;
  v43 = a1;
  v44 = a2;
  v11 = sub_10002ACB8();
  swift_bridgeObjectRetain(a2);
  v12 = Text.init<A>(_:)(&v43, &type metadata for String, v11);
  v14 = v13;
  v16 = v15;
  v18 = v17 & 1;
  v19 = swift_retain(v10);
  v20 = Text.font(_:)(v19, v12, v14, v18, v16);
  v22 = v21;
  v24 = v23;
  v26 = v25;
  v37 = v25;
  swift_release(v10);
  v24 &= 1u;
  sub_1000249D8(v12, v14, v18);
  swift_bridgeObjectRelease(v16);
  KeyPath = swift_getKeyPath(&unk_10008C850);
  v28 = swift_getKeyPath(&unk_10008C880);
  v43 = v20;
  v44 = v22;
  v45 = v24;
  v46 = v26;
  v47 = KeyPath;
  v48 = 1;
  v49 = 0;
  v50 = v28;
  v51 = a3;
  v29 = a3;
  swift_retain(a3);
  v30 = sub_10001B520(&qword_1000B9DE0);
  v31 = sub_10005C390();
  v32 = v39;
  View.widgetAccentable(_:)(1, v30, v31);
  sub_1000249D8(v20, v22, v24);
  swift_release(v29);
  swift_release(v28);
  swift_release(KeyPath);
  swift_bridgeObjectRelease(v37);
  v43 = v30;
  v44 = v31;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v43, &opaque type descriptor for <<opaque return type of View.widgetAccentable(_:)>>, 1);
  v34 = v40;
  View.unredacted()(v40, OpaqueTypeConformance2);
  v35 = swift_release(v38);
  return (*(uint64_t (**)(char *, uint64_t, __n128))(v42 + 8))(v32, v34, v35);
}

unint64_t sub_10005C190()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000BB928;
  if (!qword_1000BB928)
  {
    v1 = sub_10001B560(&qword_1000BB918);
    sub_10002CE94(&qword_1000BB930, &qword_1000BB910, (uint64_t)&protocol conformance descriptor for ZStack<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000BB928);
  }
  return result;
}

uint64_t sub_10005C214(unint64_t *a1, uint64_t *a2, void (*a3)(void))
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    v6 = sub_10001B560(a2);
    a3();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v6);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10005C27C()
{
  return sub_10005C214(&qword_1000BB990, &qword_1000BB998, (void (*)(void))sub_10005C2A0);
}

unint64_t sub_10005C2A0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000BB9A0;
  if (!qword_1000BB9A0)
  {
    v1 = sub_10001B560(&qword_1000BB9A8);
    sub_10005C324();
    sub_10002CE94(&qword_1000BB9B8, &qword_1000BB9C0, (uint64_t)&protocol conformance descriptor for _MaskEffect<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000BB9A0);
  }
  return result;
}

unint64_t sub_10005C324()
{
  unint64_t result;

  result = qword_1000BB9B0;
  if (!qword_1000BB9B0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for LinearGradient, &type metadata for LinearGradient);
    atomic_store(result, (unint64_t *)&qword_1000BB9B0);
  }
  return result;
}

_QWORD *sub_10005C368(_QWORD *a1)
{
  swift_bridgeObjectRelease(*a1);
  return a1;
}

unint64_t sub_10005C390()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000B9DE8;
  if (!qword_1000B9DE8)
  {
    v1 = sub_10001B560(&qword_1000B9DE0);
    sub_10002CE10();
    sub_10002CE94(&qword_1000B9BB0, &qword_1000B9BB8, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000B9DE8);
  }
  return result;
}

unint64_t sub_10005C414()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000BBA00;
  if (!qword_1000BBA00)
  {
    v1 = sub_10001B560(&qword_1000BB9D0);
    sub_10002CE94(&qword_1000BBA08, &qword_1000BB9C8, (uint64_t)&protocol conformance descriptor for Link<A>);
    sub_10005C498();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000BBA00);
  }
  return result;
}

unint64_t sub_10005C498()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000B9BD8;
  if (!qword_1000B9BD8)
  {
    v1 = type metadata accessor for AccessibilityAttachmentModifier(255);
    result = swift_getWitnessTable(&protocol conformance descriptor for AccessibilityAttachmentModifier, v1);
    atomic_store(result, (unint64_t *)&qword_1000B9BD8);
  }
  return result;
}

unint64_t sub_10005C4E0()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  uint64_t OpaqueTypeConformance2;
  uint64_t v4;
  unint64_t v5;

  result = qword_1000BBA10;
  if (!qword_1000BBA10)
  {
    v1 = sub_10001B560(&qword_1000BB9E8);
    v2 = sub_10001B560(&qword_1000BB9F8);
    v4 = sub_10001B560(&qword_1000B9DE0);
    v5 = sub_10005C390();
    OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v4, &opaque type descriptor for <<opaque return type of View.widgetAccentable(_:)>>, 1);
    v4 = v2;
    v5 = OpaqueTypeConformance2;
    swift_getOpaqueTypeConformance2(&v4, &opaque type descriptor for <<opaque return type of View.unredacted()>>, 1);
    sub_10005C498();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000BBA10);
  }
  return result;
}

uint64_t sub_10005C5A4(uint64_t result, uint64_t a2, char a3, uint64_t a4)
{
  if (a4)
  {
    sub_100024770(result, a2, a3 & 1);
    return swift_bridgeObjectRetain(a4);
  }
  return result;
}

uint64_t sub_10005C5D4(uint64_t result, uint64_t a2, char a3, uint64_t a4)
{
  if (a4)
  {
    sub_1000249D8(result, a2, a3 & 1);
    return swift_bridgeObjectRelease(a4);
  }
  return result;
}

double sub_10005C604@<D0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_10005BEFC(*(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32), a1);
}

uint64_t initializeBufferWithCopyOfBuffer for SectionHeaderView.LayoutOptions(uint64_t a1, uint64_t a2)
{
  void *v3;
  id v4;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v3 = *(void **)(a2 + 16);
  *(_QWORD *)(a1 + 16) = v3;
  v4 = v3;
  return a1;
}

void destroy for SectionHeaderView.LayoutOptions(uint64_t a1)
{

}

_QWORD *assignWithCopy for SectionHeaderView.LayoutOptions(_QWORD *a1, _QWORD *a2)
{
  void *v3;
  void *v4;
  id v5;

  *a1 = *a2;
  a1[1] = a2[1];
  v3 = (void *)a2[2];
  v4 = (void *)a1[2];
  a1[2] = v3;
  v5 = v3;

  return a1;
}

__n128 initializeWithTake for SectionHeaderView.LayoutOptions(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  a1[1].n128_u64[0] = a2[1].n128_u64[0];
  *a1 = result;
  return result;
}

uint64_t assignWithTake for SectionHeaderView.LayoutOptions(uint64_t a1, uint64_t a2)
{
  void *v3;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v3 = *(void **)(a1 + 16);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);

  return a1;
}

uint64_t getEnumTagSinglePayload for SectionHeaderView.LayoutOptions(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 24))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 16);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for SectionHeaderView.LayoutOptions(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 24) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 16) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 24) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for SectionHeaderView.LayoutOptions()
{
  return &type metadata for SectionHeaderView.LayoutOptions;
}

void *sub_10005C784()
{
  return &protocol witness table for AnyView;
}

char *initializeBufferWithCopyOfBuffer for TodayContent(char *a1, char **a2, int *a3)
{
  int v3;
  char *v4;
  char *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int (*v14)(char *, uint64_t, uint64_t);
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  _QWORD *v25;
  uint64_t v26;
  char *__dst;

  v3 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  v4 = *a2;
  *(_QWORD *)a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    v7 = &v4[(v3 + 16) & ~(unint64_t)v3];
    swift_retain(v4);
  }
  else
  {
    v7 = a1;
    v8 = a2[1];
    v9 = a2[2];
    *((_QWORD *)a1 + 1) = v8;
    *((_QWORD *)a1 + 2) = v9;
    a1[24] = *((_BYTE *)a2 + 24);
    v10 = a3[8];
    __dst = &a1[v10];
    v11 = (char *)a2 + v10;
    v12 = type metadata accessor for URL(0);
    v13 = *(_QWORD *)(v12 - 8);
    v14 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48);
    v15 = v4;
    swift_bridgeObjectRetain(v8);
    swift_unknownObjectRetain(v9);
    if (v14(v11, 1, v12))
    {
      v16 = sub_10001B520(&qword_1000B93A0);
      memcpy(__dst, v11, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v13 + 16))(__dst, v11, v12);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v13 + 56))(__dst, 0, 1, v12);
    }
    v17 = a3[9];
    v18 = a3[10];
    v19 = *(uint64_t *)((char *)a2 + v17);
    *(_QWORD *)&v7[v17] = v19;
    v20 = &v7[v18];
    v21 = (char **)((char *)a2 + v18);
    v22 = v21[1];
    *(_QWORD *)v20 = *v21;
    *((_QWORD *)v20 + 1) = v22;
    v23 = a3[11];
    v24 = &v7[v23];
    v25 = (char **)((char *)a2 + v23);
    v26 = v25[1];
    *(_QWORD *)v24 = *v25;
    *((_QWORD *)v24 + 1) = v26;
    swift_retain(v19);
    swift_bridgeObjectRetain(v22);
    swift_bridgeObjectRetain(v26);
  }
  return v7;
}

uint64_t destroy for TodayContent(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
  swift_unknownObjectRelease(*(_QWORD *)(a1 + 16));
  v4 = a1 + a2[8];
  v5 = type metadata accessor for URL(0);
  v6 = *(_QWORD *)(v5 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5))
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v4, v5);
  swift_release(*(_QWORD *)(a1 + a2[9]));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + a2[10] + 8));
  return swift_bridgeObjectRelease(*(_QWORD *)(a1 + a2[11] + 8));
}

uint64_t initializeWithCopy for TodayContent(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  const void *v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int (*v13)(const void *, uint64_t, uint64_t);
  id v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  void *__dst;

  v7 = *(void **)a2;
  v6 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v6;
  v8 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 16) = v8;
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  v9 = a3[8];
  __dst = (void *)(a1 + v9);
  v10 = (const void *)(a2 + v9);
  v11 = type metadata accessor for URL(0);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v12 + 48);
  v14 = v7;
  swift_bridgeObjectRetain(v6);
  swift_unknownObjectRetain(v8);
  if (v13(v10, 1, v11))
  {
    v15 = sub_10001B520(&qword_1000B93A0);
    memcpy(__dst, v10, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v12 + 16))(__dst, v10, v11);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v12 + 56))(__dst, 0, 1, v11);
  }
  v16 = a3[9];
  v17 = a3[10];
  v18 = *(_QWORD *)(a2 + v16);
  *(_QWORD *)(a1 + v16) = v18;
  v19 = (_QWORD *)(a1 + v17);
  v20 = (_QWORD *)(a2 + v17);
  v21 = v20[1];
  *v19 = *v20;
  v19[1] = v21;
  v22 = a3[11];
  v23 = (_QWORD *)(a1 + v22);
  v24 = (_QWORD *)(a2 + v22);
  v25 = v24[1];
  *v23 = *v24;
  v23[1] = v25;
  swift_retain(v18);
  swift_bridgeObjectRetain(v21);
  swift_bridgeObjectRetain(v25);
  return a1;
}

uint64_t assignWithCopy for TodayContent(uint64_t a1, uint64_t a2, int *a3)
{
  void *v6;
  void *v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t (*v18)(void *, uint64_t, uint64_t);
  int v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;

  v6 = *(void **)a2;
  v7 = *(void **)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v8 = v6;

  v9 = *(_QWORD *)(a2 + 8);
  v10 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v9;
  swift_bridgeObjectRetain(v9);
  swift_bridgeObjectRelease(v10);
  v11 = *(_QWORD *)(a2 + 16);
  v12 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v11;
  swift_unknownObjectRetain(v11);
  swift_unknownObjectRelease(v12);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  v13 = a3[8];
  v14 = (void *)(a1 + v13);
  v15 = (void *)(a2 + v13);
  v16 = type metadata accessor for URL(0);
  v17 = *(_QWORD *)(v16 - 8);
  v18 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v17 + 48);
  v19 = v18(v14, 1, v16);
  v20 = v18(v15, 1, v16);
  if (!v19)
  {
    if (!v20)
    {
      (*(void (**)(void *, void *, uint64_t))(v17 + 24))(v14, v15, v16);
      goto LABEL_7;
    }
    (*(void (**)(void *, uint64_t))(v17 + 8))(v14, v16);
    goto LABEL_6;
  }
  if (v20)
  {
LABEL_6:
    v21 = sub_10001B520(&qword_1000B93A0);
    memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v21 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, void *, uint64_t))(v17 + 16))(v14, v15, v16);
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v17 + 56))(v14, 0, 1, v16);
LABEL_7:
  v22 = a3[9];
  v23 = *(_QWORD *)(a2 + v22);
  v24 = *(_QWORD *)(a1 + v22);
  *(_QWORD *)(a1 + v22) = v23;
  swift_retain(v23);
  swift_release(v24);
  v25 = a3[10];
  v26 = (_QWORD *)(a1 + v25);
  v27 = (_QWORD *)(a2 + v25);
  *v26 = *v27;
  v28 = v27[1];
  v29 = v26[1];
  v26[1] = v28;
  swift_bridgeObjectRetain(v28);
  swift_bridgeObjectRelease(v29);
  v30 = a3[11];
  v31 = (_QWORD *)(a1 + v30);
  v32 = (_QWORD *)(a2 + v30);
  *v31 = *v32;
  v33 = v32[1];
  v34 = v31[1];
  v31[1] = v33;
  swift_bridgeObjectRetain(v33);
  swift_bridgeObjectRelease(v34);
  return a1;
}

uint64_t initializeWithTake for TodayContent(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void *v7;
  const void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  v6 = a3[8];
  v7 = (void *)(a1 + v6);
  v8 = (const void *)(a2 + v6);
  v9 = type metadata accessor for URL(0);
  v10 = *(_QWORD *)(v9 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9))
  {
    v11 = sub_10001B520(&qword_1000B93A0);
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v10 + 32))(v7, v8, v9);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
  }
  v12 = a3[10];
  *(_QWORD *)(a1 + a3[9]) = *(_QWORD *)(a2 + a3[9]);
  *(_OWORD *)(a1 + v12) = *(_OWORD *)(a2 + v12);
  *(_OWORD *)(a1 + a3[11]) = *(_OWORD *)(a2 + a3[11]);
  return a1;
}

uint64_t assignWithTake for TodayContent(uint64_t a1, uint64_t a2, int *a3)
{
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t (*v14)(void *, uint64_t, uint64_t);
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v6 = *(void **)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;

  v7 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRelease(v7);
  v8 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_unknownObjectRelease(v8);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  v9 = a3[8];
  v10 = (void *)(a1 + v9);
  v11 = (void *)(a2 + v9);
  v12 = type metadata accessor for URL(0);
  v13 = *(_QWORD *)(v12 - 8);
  v14 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v13 + 48);
  v15 = v14(v10, 1, v12);
  v16 = v14(v11, 1, v12);
  if (!v15)
  {
    if (!v16)
    {
      (*(void (**)(void *, void *, uint64_t))(v13 + 40))(v10, v11, v12);
      goto LABEL_7;
    }
    (*(void (**)(void *, uint64_t))(v13 + 8))(v10, v12);
    goto LABEL_6;
  }
  if (v16)
  {
LABEL_6:
    v17 = sub_10001B520(&qword_1000B93A0);
    memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, void *, uint64_t))(v13 + 32))(v10, v11, v12);
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v10, 0, 1, v12);
LABEL_7:
  v18 = a3[9];
  v19 = *(_QWORD *)(a1 + v18);
  *(_QWORD *)(a1 + v18) = *(_QWORD *)(a2 + v18);
  swift_release(v19);
  v20 = a3[10];
  v21 = (_QWORD *)(a1 + v20);
  v22 = (uint64_t *)(a2 + v20);
  v24 = *v22;
  v23 = v22[1];
  v25 = v21[1];
  *v21 = v24;
  v21[1] = v23;
  swift_bridgeObjectRelease(v25);
  v26 = a3[11];
  v27 = (_QWORD *)(a1 + v26);
  v28 = (uint64_t *)(a2 + v26);
  v30 = *v28;
  v29 = v28[1];
  v31 = v27[1];
  *v27 = v30;
  v27[1] = v29;
  swift_bridgeObjectRelease(v31);
  return a1;
}

uint64_t getEnumTagSinglePayload for TodayContent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10005CF70);
}

uint64_t sub_10005CF70(char *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)a1;
    if (*(_QWORD *)a1 >= 0xFFFFFFFFuLL)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = sub_10001B520(&qword_1000B93A0);
    return (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(&a1[*(int *)(a3 + 32)], a2, v8);
  }
}

uint64_t storeEnumTagSinglePayload for TodayContent(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10005CFFC);
}

char *sub_10005CFFC(char *result, uint64_t a2, int a3, uint64_t a4)
{
  char *v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)result = (a2 - 1);
  }
  else
  {
    v7 = sub_10001B520(&qword_1000B93A0);
    return (char *)(*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(&v5[*(int *)(a4 + 32)], a2, a2, v7);
  }
  return result;
}

uint64_t type metadata accessor for TodayContent(uint64_t a1)
{
  uint64_t result;

  result = qword_1000BBA80;
  if (!qword_1000BBA80)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for TodayContent);
  return result;
}

void sub_10005D0B0(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[8];

  v4[0] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v4[1] = (char *)&value witness table for Builtin.BridgeObject + 64;
  v4[2] = "\b";
  v4[3] = &unk_10008C8E8;
  sub_100035670(319);
  if (v3 <= 0x3F)
  {
    v4[4] = *(_QWORD *)(v2 - 8) + 64;
    v4[5] = (char *)&value witness table for Builtin.NativeObject + 64;
    v4[6] = &unk_10008C900;
    v4[7] = &unk_10008C900;
    swift_initStructMetadata(a1, 256, 8, v4, a1 + 16);
  }
}

uint64_t sub_10005D160()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  id v5;
  void *v6;
  id v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  NSString v12;
  id v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  uint64_t v20;
  uint64_t v22;

  v1 = type metadata accessor for Color.RGBColorSpace(0);
  v2 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  v4 = (char *)&v22 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = objc_msgSend(*(id *)(v0 + 16), "widgetConfig");
  if (!v5)
    goto LABEL_8;
  v6 = v5;
  v7 = objc_msgSend(v5, "audioIndicatorColor");

  if (!v7)
    goto LABEL_8;
  v8 = static String._unconditionallyBridgeFromObjectiveC(_:)(v7);
  v10 = v9;

  v11 = HIBYTE(v10) & 0xF;
  if ((v10 & 0x2000000000000000) == 0)
    v11 = v8 & 0xFFFFFFFFFFFFLL;
  if (!v11)
  {
    swift_bridgeObjectRelease(v10);
LABEL_8:
    v12 = String._bridgeToObjectiveC()();
    goto LABEL_9;
  }
  v12 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v10);
LABEL_9:
  v13 = objc_msgSend((id)objc_opt_self(FCColor), "colorWithHexString:", v12);

  objc_msgSend(v13, "red");
  v15 = v14;
  objc_msgSend(v13, "green");
  v17 = v16;
  objc_msgSend(v13, "blue");
  v19 = v18;
  (*(void (**)(char *, _QWORD, uint64_t))(v2 + 104))(v4, enum case for Color.RGBColorSpace.sRGB(_:), v1);
  v20 = Color.init(_:red:green:blue:opacity:)(v4, v15, v17, v19, 1.0);

  return v20;
}

_QWORD *sub_10005D32C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *result;
  unint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v1 = type metadata accessor for Item(0);
  v22 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  v3 = (char *)&v19 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for Section(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v25 = (uint64_t)&v19 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *(_QWORD *)(v0 + 8);
  v24 = *(_QWORD *)(v7 + 16);
  if (v24)
  {
    v23 = v7 + ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80));
    result = (_QWORD *)swift_bridgeObjectRetain(v7);
    v9 = 0;
    v10 = _swiftEmptyArrayStorage;
    v20 = v7;
    v21 = v5;
    while (v9 < *(_QWORD *)(v7 + 16))
    {
      v11 = v25;
      sub_10002A83C(v23 + *(_QWORD *)(v5 + 72) * v9, v25, type metadata accessor for Section);
      v12 = *(_QWORD *)(v11 + 16);
      swift_bridgeObjectRetain(v12);
      sub_1000413C4(v11);
      v13 = *(_QWORD *)(v12 + 16);
      if (v13)
      {
        v14 = (*(unsigned __int8 *)(v22 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v22 + 80);
        v26 = v12;
        v15 = v12 + v14;
        v16 = *(_QWORD *)(v22 + 72);
        do
        {
          sub_10002A83C(v15, (uint64_t)v3, type metadata accessor for Item);
          if ((swift_isUniquelyReferenced_nonNull_native(v10) & 1) == 0)
            v10 = (_QWORD *)sub_10005DFAC(0, v10[2] + 1, 1, (unint64_t)v10, &qword_1000BBAF8, type metadata accessor for Item);
          v18 = v10[2];
          v17 = v10[3];
          if (v18 >= v17 >> 1)
            v10 = (_QWORD *)sub_10005DFAC(v17 > 1, v18 + 1, 1, (unint64_t)v10, &qword_1000BBAF8, type metadata accessor for Item);
          v10[2] = v18 + 1;
          sub_10002AC74((uint64_t)v3, (uint64_t)v10 + v14 + v18 * v16, type metadata accessor for Item);
          v15 += v16;
          --v13;
        }
        while (v13);
        result = (_QWORD *)swift_bridgeObjectRelease(v26);
        v7 = v20;
        v5 = v21;
      }
      else
      {
        result = (_QWORD *)swift_bridgeObjectRelease(v12);
      }
      if (++v9 == v24)
      {
        swift_bridgeObjectRelease(v7);
        return v10;
      }
    }
    __break(1u);
  }
  else
  {
    return _swiftEmptyArrayStorage;
  }
  return result;
}

uint64_t sub_10005D57C@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X3>, uint64_t a5@<X4>, int a6@<W5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  id v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v30;
  char v31;
  uint64_t v32;
  id v33;
  NSString v34;
  unsigned __int8 v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  int *v42;
  uint64_t result;
  _QWORD *v44;
  uint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  int v56;
  uint64_t v57;

  v57 = a8;
  v53 = a3;
  v54 = a7;
  v56 = a6;
  v55 = a2;
  v17 = sub_10001B520(&qword_1000B93A0);
  __chkstk_darwin(v17);
  v19 = (char *)&v48 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = sub_10001B520((uint64_t *)&unk_1000BC550);
  __chkstk_darwin(v20);
  v22 = (char *)&v48 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = objc_msgSend(a1, "sourceIdentifier");
  v24 = static String._unconditionallyBridgeFromObjectiveC(_:)(v23);
  v26 = v25;

  v27 = static String._unconditionallyBridgeFromObjectiveC(_:)(NTNewsSourceIdentifier);
  if (v24 == v27 && v26 == v28)
  {
    v31 = 1;
    v30 = v26;
  }
  else
  {
    v30 = v28;
    v31 = _stringCompareWithSmolCheck(_:_:expecting:)(v24, v26, v27, v28, 0);
  }
  v51 = a12;
  v52 = a13;
  v49 = a10;
  v50 = a11;
  swift_bridgeObjectRelease(v26);
  v32 = swift_bridgeObjectRelease(v30);
  v33 = (id)NewsCoreUserDefaults(v32);
  v34 = String._bridgeToObjectiveC()();
  v35 = objc_msgSend(v33, "BOOLForKey:", v34);

  if ((v35 & 1) != 0)
  {
    Date.init()();
    v36 = type metadata accessor for Date(0);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v36 - 8) + 56))(v22, 0, 1, v36);
  }
  else
  {
    v37 = type metadata accessor for Date(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v37 - 8) + 56))(v22, 1, 1, v37);
  }
  v38 = sub_10001D9B4(a4, a4[3]);
  v39 = v53;
  v40 = sub_10005E374(v53, *v38, a5, v31 & 1, (uint64_t)v22, a1);
  swift_bridgeObjectRelease(a5);
  sub_10002CCF4((uint64_t)v22, (uint64_t *)&unk_1000BC550);
  v41 = v54;
  sub_10005D86C(v54, a4, (uint64_t)v19);
  swift_release(v39);
  sub_10002CCF4(v41, &qword_1000B93A0);
  sub_10001DA60(a4);
  *(_QWORD *)a9 = a1;
  *(_QWORD *)(a9 + 8) = v40;
  *(_QWORD *)(a9 + 16) = v55;
  *(_BYTE *)(a9 + 24) = v56 & 1;
  v42 = (int *)type metadata accessor for TodayContent(0);
  result = sub_10005E488((uint64_t)v19, a9 + v42[8]);
  *(_QWORD *)(a9 + v42[9]) = v57;
  v44 = (_QWORD *)(a9 + v42[10]);
  v45 = v50;
  *v44 = v49;
  v44[1] = v45;
  v46 = (_QWORD *)(a9 + v42[11]);
  v47 = v52;
  *v46 = v51;
  v46[1] = v47;
  return result;
}

uint64_t sub_10005D86C@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  void (*v14)(char *, char *, uint64_t);
  uint64_t v15;
  unint64_t v16;
  void *v17;
  NSURL *v18;
  void *v19;
  void *v20;
  id v21;
  uint64_t v22;

  v6 = sub_10001B520(&qword_1000B93A0);
  __chkstk_darwin(v6);
  v8 = (char *)&v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for URL(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v22 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10005E4D0(a1, (uint64_t)v8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
  {
    sub_10002CCF4((uint64_t)v8, &qword_1000B93A0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v10 + 56))(a3, 1, 1, v9);
  }
  else
  {
    v14 = *(void (**)(char *, char *, uint64_t))(v10 + 32);
    v14(v12, v8, v9);
    if (qword_1000B8D28 != -1)
      swift_once(&qword_1000B8D28, sub_100070244);
    v15 = sub_10005E518(v9, (uint64_t)qword_1000C07D0);
    v16 = sub_10005E530();
    if ((dispatch thunk of static Equatable.== infix(_:_:)(v12, v15, v9, v16) & 1) != 0)
    {
      v14((char *)a3, v12, v9);
      return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v10 + 56))(a3, 0, 1, v9);
    }
    else
    {
      v17 = (void *)objc_opt_self(FTBackgroundEngagementDescriptor);
      URL._bridgeToObjectiveC()(v18);
      v20 = v19;
      v21 = objc_msgSend(v17, "engagementDescriptorWithTargetURL:", v19);

      sub_10001D9B4(a2, a2[3]);
      sub_10006C734(v21, a3);
      swift_unknownObjectRelease(v21);
      return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v12, v9);
    }
  }
}

uint64_t sub_10005DA74@<X0>(unint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  void *v29;
  void *v30;
  uint64_t v31;
  char v32;
  int *v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  _QWORD *v42;
  id v43;
  uint64_t v45;
  unint64_t v46;
  int v47;
  unint64_t v48;
  uint64_t v49;

  v6 = v5;
  v47 = a3;
  v48 = a1;
  v49 = a2;
  v9 = type metadata accessor for Section(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = __chkstk_darwin(v9);
  v13 = (char *)&v45 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __chkstk_darwin(v11);
  v16 = (char *)&v45 - v15;
  v17 = __chkstk_darwin(v14);
  v19 = (char *)&v45 - v18;
  __chkstk_darwin(v17);
  v21 = (char *)&v45 - v20;
  v22 = *(_QWORD *)(v6 + 8);
  v23 = *(_QWORD *)(v22 + 16);
  v24 = swift_bridgeObjectRetain(v22);
  if (!v23)
  {
    v27 = static os_log_type_t.fault.getter(v24);
    v28 = sub_10002D800();
    v29 = (void *)static OS_os_log.default.getter(v28);
    os_log(_:dso:log:type:_:)("received results with no sections", 33, 2, &_mh_execute_header, v29, v27, _swiftEmptyArrayStorage);

    goto LABEL_7;
  }
  if ((swift_isUniquelyReferenced_nonNull_native(v22) & 1) != 0)
  {
    v25 = *(_QWORD *)(v22 + 16);
    if (v25)
      goto LABEL_4;
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  v22 = sub_10005E340(v22);
  v25 = *(_QWORD *)(v22 + 16);
  if (!v25)
    goto LABEL_9;
LABEL_4:
  v23 = (uint64_t)v13;
  v26 = v25 - 1;
  v46 = (*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  v45 = *(_QWORD *)(v10 + 72);
  sub_10002AC74(v22 + v46 + v45 * (v25 - 1), (uint64_t)v19, type metadata accessor for Section);
  *(_QWORD *)(v22 + 16) = v26;
  sub_10002AC74((uint64_t)v19, (uint64_t)v21, type metadata accessor for Section);
  sub_100033D14(v48, v49, v47 & 1, a4, (uint64_t)v16);
  sub_10002A83C((uint64_t)v16, v23, type metadata accessor for Section);
  v10 = *(_QWORD *)(v22 + 16);
  v25 = *(_QWORD *)(v22 + 24);
  v19 = (char *)(v10 + 1);
  if (v10 >= v25 >> 1)
LABEL_10:
    v22 = sub_10005DFAC(v25 > 1, (int64_t)v19, 1, v22, &qword_1000BBAF0, type metadata accessor for Section);
  *(_QWORD *)(v22 + 16) = v19;
  sub_10002AC74(v23, v22 + v46 + v10 * v45, type metadata accessor for Section);
  sub_1000413C4((uint64_t)v16);
  sub_1000413C4((uint64_t)v21);
LABEL_7:
  v30 = *(void **)v6;
  v31 = *(_QWORD *)(v6 + 16);
  v32 = *(_BYTE *)(v6 + 24);
  v33 = (int *)type metadata accessor for TodayContent(0);
  sub_10005E4D0(v6 + v33[8], a5 + v33[8]);
  v34 = *(_QWORD *)(v6 + v33[9]);
  v35 = (uint64_t *)(v6 + v33[10]);
  v36 = *v35;
  v37 = v35[1];
  v38 = (uint64_t *)(v6 + v33[11]);
  v40 = *v38;
  v39 = v38[1];
  *(_QWORD *)a5 = v30;
  *(_QWORD *)(a5 + 8) = v22;
  *(_QWORD *)(a5 + 16) = v31;
  *(_BYTE *)(a5 + 24) = v32;
  *(_QWORD *)(a5 + v33[9]) = v34;
  v41 = (_QWORD *)(a5 + v33[10]);
  *v41 = v36;
  v41[1] = v37;
  v42 = (_QWORD *)(a5 + v33[11]);
  *v42 = v40;
  v42[1] = v39;
  swift_bridgeObjectRetain(v39);
  v43 = v30;
  swift_unknownObjectRetain(v31);
  swift_retain(v34);
  return swift_bridgeObjectRetain(v37);
}

_QWORD *sub_10005DD58(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  int64_t v12;
  uint64_t v13;
  _QWORD *v14;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      v10 = sub_10001B520(&qword_1000B99A0);
      v11 = (_QWORD *)swift_allocObject(v10, 16 * v9 + 32, 7);
      v12 = j__malloc_size(v11);
      v13 = v12 - 32;
      if (v12 < 32)
        v13 = v12 - 17;
      v11[2] = v8;
      v11[3] = 2 * (v13 >> 4);
      v14 = v11 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v11 = _swiftEmptyArrayStorage;
      v14 = &_swiftEmptyArrayStorage[4];
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v11 != a4 || v14 >= &a4[2 * v8 + 4])
          memmove(v14, a4 + 4, 16 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_10005E58C(0, v8, (unint64_t)v14, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease(a4);
    return v11;
  }
  __break(1u);
  return result;
}

uint64_t sub_10005DE64(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_10005DFAC(a1, a2, a3, a4, &qword_1000BBB08, type metadata accessor for Session);
}

_QWORD *sub_10005DE78(_QWORD *a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_10005E1E0(a1, a2, a3, a4, &qword_1000B99F8, &qword_1000B9A00);
}

_QWORD *sub_10005DE8C(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  int64_t v12;
  uint64_t v13;
  _QWORD *v14;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      v10 = sub_10001B520(&qword_1000BBB18);
      v11 = (_QWORD *)swift_allocObject(v10, 8 * v9 + 32, 7);
      v12 = j__malloc_size(v11);
      v13 = v12 - 32;
      if (v12 < 32)
        v13 = v12 - 25;
      v11[2] = v8;
      v11[3] = 2 * (v13 >> 3);
      v14 = v11 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v11 = _swiftEmptyArrayStorage;
      v14 = &_swiftEmptyArrayStorage[4];
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v11 != a4 || v14 >= &a4[v8 + 4])
          memmove(v14, a4 + 4, 8 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_10005E67C(0, v8, (unint64_t)v14, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease(a4);
    return v11;
  }
  __break(1u);
  return result;
}

uint64_t sub_10005DF98(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_10005DFAC(a1, a2, a3, a4, &qword_1000BBAF8, type metadata accessor for Item);
}

uint64_t sub_10005DFAC(char a1, int64_t a2, char a3, unint64_t a4, uint64_t *a5, uint64_t (*a6)(_QWORD))
{
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  size_t v19;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v9 = *(_QWORD *)(a4 + 24);
    v10 = v9 >> 1;
    if ((uint64_t)(v9 >> 1) < a2)
    {
      if (v10 + 0x4000000000000000 < 0)
      {
        __break(1u);
LABEL_29:
        result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Division by zero", 16, 2, "Swift/IntegerTypes.swift", 24, 2, 14377, 0);
LABEL_31:
        __break(1u);
        return result;
      }
      v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v10 = a2;
    }
  }
  else
  {
    v10 = a2;
  }
  v11 = *(_QWORD *)(a4 + 16);
  if (v10 <= v11)
    v12 = *(_QWORD *)(a4 + 16);
  else
    v12 = v10;
  if (!v12)
  {
    v18 = _swiftEmptyArrayStorage;
    goto LABEL_19;
  }
  v13 = sub_10001B520(a5);
  v14 = *(_QWORD *)(a6(0) - 8);
  v15 = *(_QWORD *)(v14 + 72);
  v16 = *(unsigned __int8 *)(v14 + 80);
  v17 = (v16 + 32) & ~v16;
  v18 = (_QWORD *)swift_allocObject(v13, v17 + v15 * v12, v16 | 7);
  v19 = j__malloc_size(v18);
  if (!v15)
    goto LABEL_29;
  if (v19 - v17 == 0x8000000000000000 && v15 == -1)
  {
    result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Division results in an overflow", 31, 2, "Swift/IntegerTypes.swift", 24, 2, 14384, 0);
    goto LABEL_31;
  }
  v18[2] = v11;
  v18[3] = 2 * ((uint64_t)(v19 - v17) / v15);
LABEL_19:
  v21 = a6(0);
  v22 = *(_QWORD *)(v21 - 8);
  v23 = (*(unsigned __int8 *)(v22 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v22 + 80);
  v24 = (unint64_t)v18 + v23;
  if ((a1 & 1) != 0)
  {
    v25 = a4 + v23;
    if ((unint64_t)v18 < a4 || v24 >= v25 + *(_QWORD *)(v22 + 72) * v11)
    {
      swift_arrayInitWithTakeFrontToBack((char *)v18 + v23, v25, v11, v21);
    }
    else if (v18 != (_QWORD *)a4)
    {
      swift_arrayInitWithTakeBackToFront((char *)v18 + v23);
    }
    *(_QWORD *)(a4 + 16) = 0;
  }
  else
  {
    sub_10005EA58(0, v11, v24, a4, a6);
  }
  swift_bridgeObjectRelease(a4);
  return (uint64_t)v18;
}

uint64_t sub_10005E1B8(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_10005DFAC(a1, a2, a3, a4, &qword_1000BBB10, type metadata accessor for VisibleRectChangedEvent);
}

_QWORD *sub_10005E1CC(_QWORD *a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_10005E1E0(a1, a2, a3, a4, &qword_1000BBB28, &qword_1000BBB30);
}

_QWORD *sub_10005E1E0(_QWORD *result, int64_t a2, char a3, _QWORD *a4, uint64_t *a5, uint64_t *a6)
{
  char v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  size_t v15;
  _QWORD *v16;

  v8 = (char)result;
  if ((a3 & 1) == 0)
  {
    v10 = a2;
    goto LABEL_8;
  }
  v9 = a4[3];
  v10 = v9 >> 1;
  if ((uint64_t)(v9 >> 1) >= a2)
    goto LABEL_8;
  if (v10 + 0x4000000000000000 >= 0)
  {
    v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v10 = a2;
LABEL_8:
    v11 = a4[2];
    if (v10 <= v11)
      v12 = a4[2];
    else
      v12 = v10;
    if (v12)
    {
      v13 = sub_10001B520(a5);
      v14 = (_QWORD *)swift_allocObject(v13, 40 * v12 + 32, 7);
      v15 = j__malloc_size(v14);
      v14[2] = v11;
      v14[3] = 2 * ((uint64_t)(v15 - 32) / 40);
      v16 = v14 + 4;
      if ((v8 & 1) != 0)
      {
LABEL_13:
        if (v14 != a4 || v16 >= &a4[5 * v11 + 4])
          memmove(v16, a4 + 4, 40 * v11);
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v14 = _swiftEmptyArrayStorage;
      v16 = &_swiftEmptyArrayStorage[4];
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    sub_10005EB70(0, v11, (unint64_t)v16, (uint64_t)a4, a6);
LABEL_22:
    swift_bridgeObjectRelease(a4);
    return v14;
  }
  __break(1u);
  return result;
}

uint64_t sub_10005E30C(unint64_t a1)
{
  return sub_10005DFAC(0, *(_QWORD *)(a1 + 16), 0, a1, &qword_1000BBAF8, type metadata accessor for Item);
}

uint64_t sub_10005E340(unint64_t a1)
{
  return sub_10005DFAC(0, *(_QWORD *)(a1 + 16), 0, a1, &qword_1000BBAF0, type metadata accessor for Section);
}

_QWORD *sub_10005E374(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6)
{
  id v8;
  id v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD v14[5];

  v14[3] = type metadata accessor for EngagementURLProvider(0);
  v14[4] = &off_1000AD308;
  v14[0] = a2;
  swift_retain(a2);
  v8 = objc_msgSend(a6, "sections");
  v9 = objc_msgSend(v8, "array");

  v10 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v9, (char *)&type metadata for Any + 8);
  v11 = sub_1000500E8(v10);
  swift_bridgeObjectRelease(v10);
  v12 = sub_10005E784((uint64_t)v11, (void (*)(uint64_t, id))sub_10005E578);
  swift_bridgeObjectRelease(v11);
  sub_10001DA60(v14);
  return v12;
}

uint64_t sub_10005E488(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10001B520(&qword_1000B93A0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_10005E4D0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10001B520(&qword_1000B93A0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10005E518(uint64_t a1, uint64_t a2)
{
  if ((*(_BYTE *)(*(_QWORD *)(a1 - 8) + 82) & 2) != 0)
    return *(_QWORD *)a2;
  return a2;
}

unint64_t sub_10005E530()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000BBAE0;
  if (!qword_1000BBAE0)
  {
    v1 = type metadata accessor for URL(255);
    result = swift_getWitnessTable(&protocol conformance descriptor for URL, v1);
    atomic_store(result, (unint64_t *)&qword_1000BBAE0);
  }
  return result;
}

uint64_t sub_10005E578@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;

  return sub_1000501C0(a1, a2, *(_QWORD *)(v3 + 16), *(_QWORD *)(v3 + 24), *(_QWORD *)(v3 + 32), *(_BYTE *)(v3 + 40), *(_QWORD *)(v3 + 48), a3);
}

uint64_t sub_10005E58C(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else
  {
    if (v4 < 0)
    {
      result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
      goto LABEL_9;
    }
    v5 = a4 + 16 * a1 + 32;
    v6 = a3 + 16 * v4;
    if (v5 >= v6 || v5 + 16 * v4 <= a3)
    {
      swift_arrayInitWithCopy(a3);
      return v6;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_9:
  __break(1u);
  return result;
}

uint64_t sub_10005E67C(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v6;
  unint64_t v7;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else
  {
    if (v4 < 0)
    {
      result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
      goto LABEL_9;
    }
    v6 = a4 + 8 * a1 + 32;
    v7 = a3 + 8 * v4;
    if (v6 >= v7 || v6 + 8 * v4 <= a3)
    {
      sub_10001B520(&qword_1000BBB20);
      swift_arrayInitWithCopy(a3);
      return v7;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_9:
  __break(1u);
  return result;
}

_QWORD *sub_10005E784(uint64_t a1, void (*a2)(uint64_t, id))
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void (*v28)(uint64_t, id);

  v3 = v2;
  v28 = a2;
  v5 = sub_10001B520(&qword_1000BBAE8);
  __chkstk_darwin(v5);
  v7 = (char *)&v22 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = type metadata accessor for Section(0);
  v8 = *(_QWORD *)(v27 - 8);
  v9 = __chkstk_darwin(v27);
  v26 = (uint64_t)&v22 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v23 = (uint64_t)&v22 - v11;
  if ((unint64_t)a1 >> 62)
    goto LABEL_18;
  v12 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain(a1);
  for (; v12; v12 = _CocoaArrayWrapper.endIndex.getter(v20))
  {
    v22 = v3;
    v25 = a1 & 0xC000000000000001;
    v13 = _swiftEmptyArrayStorage;
    v14 = 4;
    v24 = a1;
    while (1)
    {
      v3 = v12;
      v15 = v25 ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v14 - 4, a1) : *(id *)(a1 + 8 * v14);
      a1 = (uint64_t)v15;
      v16 = v14 - 3;
      if (__OFADD__(v14 - 4, 1))
        break;
      v28(v14 - 4, v15);

      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v7, 1, v27) == 1)
      {
        sub_10002CCF4((uint64_t)v7, &qword_1000BBAE8);
      }
      else
      {
        v17 = v23;
        sub_10002AC74((uint64_t)v7, v23, type metadata accessor for Section);
        sub_10002AC74(v17, v26, type metadata accessor for Section);
        if ((swift_isUniquelyReferenced_nonNull_native(v13) & 1) == 0)
          v13 = (_QWORD *)sub_10005DFAC(0, v13[2] + 1, 1, (unint64_t)v13, &qword_1000BBAF0, type metadata accessor for Section);
        v19 = v13[2];
        v18 = v13[3];
        if (v19 >= v18 >> 1)
          v13 = (_QWORD *)sub_10005DFAC(v18 > 1, v19 + 1, 1, (unint64_t)v13, &qword_1000BBAF0, type metadata accessor for Section);
        v13[2] = v19 + 1;
        sub_10002AC74(v26, (uint64_t)v13+ ((*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80))+ *(_QWORD *)(v8 + 72) * v19, type metadata accessor for Section);
      }
      a1 = v24;
      ++v14;
      if (v16 == v12)
      {
        swift_bridgeObjectRelease(v24);
        return v13;
      }
    }
    __break(1u);
LABEL_18:
    if (a1 < 0)
      v20 = a1;
    else
      v20 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
  }
  swift_bridgeObjectRelease(a1);
  return _swiftEmptyArrayStorage;
}

uint64_t sub_10005EA58(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t (*a5)(_QWORD))
{
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t result;

  v5 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v5 < 0)
  {
LABEL_9:
    result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
    goto LABEL_11;
  }
  v9 = *(_QWORD *)(a5(0) - 8);
  v10 = *(unsigned __int8 *)(v9 + 80);
  v11 = *(_QWORD *)(v9 + 72);
  v12 = a4 + ((v10 + 32) & ~v10) + v11 * a1;
  v13 = v11 * v5;
  v14 = a3 + v13;
  v15 = v12 + v13;
  if (v12 >= v14 || v15 <= a3)
  {
    swift_arrayInitWithCopy(a3);
    return v14;
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_10005EB70(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v5;
  unint64_t v7;
  unint64_t v8;
  uint64_t result;

  v5 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v5 < 0)
  {
LABEL_9:
    result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
    goto LABEL_11;
  }
  v7 = a4 + 40 * a1 + 32;
  v8 = a3 + 40 * v5;
  if (v7 >= v8 || v7 + 40 * v5 <= a3)
  {
    sub_10001B520(a5);
    swift_arrayInitWithCopy(a3);
    return v8;
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_10005EC78()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  void (*v16)(char *, char *, uint64_t);
  void (*v17)(char *, uint64_t);
  uint64_t v19;

  v0 = sub_10001B520(&qword_1000BBB40);
  __chkstk_darwin(v0);
  v2 = (char *)&v19 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = type metadata accessor for NewsLiveActivityWidgetBundle(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v19 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_10001B520(&qword_1000BBB48);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = __chkstk_darwin(v7);
  v11 = (char *)&v19 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __chkstk_darwin(v9);
  v14 = (char *)&v19 - v13;
  v15 = NewsLiveActivityWidgetBundle.init()(v12);
  NewsLiveActivityWidgetBundle.body.getter(v15);
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v14, v11, v7);
  v16 = *(void (**)(char *, char *, uint64_t))(v8 + 16);
  v16(v11, v14, v7);
  v16(v2, v11, v7);
  TupleWidget.init(_:)(v2, v0);
  v17 = *(void (**)(char *, uint64_t))(v8 + 8);
  v17(v14, v7);
  return ((uint64_t (*)(char *, uint64_t))v17)(v11, v7);
}

uint64_t sub_10005EE0C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;
  uint64_t v16;

  v0 = type metadata accessor for Container.Environment(0);
  v1 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin(v0);
  v3 = (char *)&v16 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_10001B520(&qword_1000BBB68);
  v5 = swift_allocObject(v4, 152, 7);
  *(_OWORD *)(v5 + 16) = xmmword_10008AC70;
  v6 = type metadata accessor for WidgetAnalyticsAssembly();
  v7 = swift_allocObject(v6, 16, 7);
  *(_QWORD *)(v5 + 56) = v6;
  *(_QWORD *)(v5 + 64) = sub_10001C96C(&qword_1000BBB70, (uint64_t (*)(uint64_t))type metadata accessor for WidgetAnalyticsAssembly, (uint64_t)&unk_10008B228);
  *(_QWORD *)(v5 + 32) = v7;
  v8 = type metadata accessor for WidgetServiceAssembly();
  v9 = swift_allocObject(v8, 16, 7);
  *(_QWORD *)(v5 + 96) = v8;
  *(_QWORD *)(v5 + 104) = sub_10001C96C(&qword_1000BBB78, (uint64_t (*)(uint64_t))type metadata accessor for WidgetServiceAssembly, (uint64_t)&unk_10008D528);
  *(_QWORD *)(v5 + 72) = v9;
  v10 = type metadata accessor for TagWidgetServiceAssembly();
  v11 = swift_allocObject(v10, 16, 7);
  *(_QWORD *)(v5 + 136) = v10;
  *(_QWORD *)(v5 + 144) = sub_10001C96C((unint64_t *)&unk_1000BBB80, (uint64_t (*)(uint64_t))type metadata accessor for TagWidgetServiceAssembly, (uint64_t)&unk_10008B0FC);
  *(_QWORD *)(v5 + 112) = v11;
  v12 = type metadata accessor for SingletonPool(0);
  swift_allocObject(v12, *(unsigned int *)(v12 + 48), *(unsigned __int16 *)(v12 + 52));
  v13 = SingletonPool.init()();
  (*(void (**)(char *, _QWORD, uint64_t))(v1 + 104))(v3, enum case for Container.Environment.normal(_:), v0);
  v14 = type metadata accessor for Container(0);
  swift_allocObject(v14, *(unsigned int *)(v14 + 48), *(unsigned __int16 *)(v14 + 52));
  result = Container.init(bundleAssemblies:assemblies:singletonPool:environment:)(_swiftEmptyArrayStorage, v5, v13, v3);
  qword_1000C0770 = result;
  return result;
}

uint64_t sub_10005EFF0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void (*v35)(uint64_t, _QWORD, uint64_t);
  uint64_t OpaqueTypeConformance2;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  id v54;
  id v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t (*v73)();
  uint64_t v74;

  v70 = a1;
  v1 = sub_10001B520(&qword_1000B8D48);
  v2 = *(_QWORD *)(v1 - 8);
  v60 = v1;
  v61 = v2;
  __chkstk_darwin(v1);
  v4 = (char *)&v59 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_10001B520(&qword_1000B8D40);
  v6 = *(_QWORD *)(v5 - 8);
  v64 = v5;
  v65 = v6;
  __chkstk_darwin(v5);
  v8 = (char *)&v59 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_10001B520(&qword_1000B8D38);
  v10 = *(_QWORD *)(v9 - 8);
  v66 = v9;
  v67 = v10;
  __chkstk_darwin(v9);
  v62 = (char *)&v59 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_10001B520(&qword_1000B8D30);
  v13 = *(_QWORD *)(v12 - 8);
  v68 = v12;
  v69 = v13;
  __chkstk_darwin(v12);
  v63 = (char *)&v59 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = static String._unconditionallyBridgeFromObjectiveC(_:)(NSSNewsTagWidgetKind);
  v17 = v16;
  v71 = v15;
  v72 = v16;
  v73 = sub_10005F4E4;
  v74 = 0;
  v18 = LocalizedStringKey.init(stringLiteral:)(0x6369706F54, 0xE500000000000000);
  v19 = Text.init(_:tableName:bundle:comment:)(v18);
  v21 = v20;
  v23 = v22;
  v25 = v24 & 1;
  v26 = sub_10001B520(&qword_1000B8D50);
  v27 = sub_10002CE94(&qword_1000B8D58, &qword_1000B8D50, (uint64_t)&unk_10008BAE0);
  WidgetConfiguration.configurationDisplayName(_:)(v19, v21, v25, v23, v26, v27);
  sub_1000249D8(v19, v21, v25);
  swift_bridgeObjectRelease(v17);
  swift_bridgeObjectRelease(v23);
  v28 = sub_10001B520(&qword_1000BBB60);
  v29 = type metadata accessor for WidgetFamily(0);
  v30 = *(_QWORD *)(v29 - 8);
  v31 = *(_QWORD *)(v30 + 72);
  v32 = *(unsigned __int8 *)(v30 + 80);
  v33 = (v32 + 32) & ~v32;
  v34 = swift_allocObject(v28, v33 + 4 * v31, v32 | 7);
  *(_OWORD *)(v34 + 16) = xmmword_10008C920;
  v35 = *(void (**)(uint64_t, _QWORD, uint64_t))(v30 + 104);
  v35(v34 + v33, enum case for WidgetFamily.accessoryRectangular(_:), v29);
  v35(v34 + v33 + v31, enum case for WidgetFamily.systemSmall(_:), v29);
  v35(v34 + v33 + 2 * v31, enum case for WidgetFamily.systemMedium(_:), v29);
  v35(v34 + v33 + 3 * v31, enum case for WidgetFamily.systemLarge(_:), v29);
  v71 = v26;
  v72 = v27;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v71, &opaque type descriptor for <<opaque return type of WidgetConfiguration.configurationDisplayName(_:)>>, 1);
  v37 = v60;
  WidgetConfiguration.supportedFamilies(_:)(v34, v60, OpaqueTypeConformance2);
  swift_bridgeObjectRelease(v34);
  v38 = v37;
  (*(void (**)(char *, uint64_t))(v61 + 8))(v4, v37);
  v39 = LocalizedStringKey.init(stringLiteral:)(0x1000000000000031, 0x80000001000916E0);
  v40 = Text.init(_:tableName:bundle:comment:)(v39);
  v42 = v41;
  v44 = v43;
  v46 = v45 & 1;
  v71 = v38;
  v72 = OpaqueTypeConformance2;
  v47 = swift_getOpaqueTypeConformance2(&v71, &opaque type descriptor for <<opaque return type of WidgetConfiguration.supportedFamilies(_:)>>, 1);
  v48 = v62;
  v49 = v64;
  WidgetConfiguration.description(_:)(v40, v42, v46, v44, v64, v47);
  sub_1000249D8(v40, v42, v46);
  swift_bridgeObjectRelease(v44);
  (*(void (**)(char *, uint64_t))(v65 + 8))(v8, v49);
  v71 = v49;
  v72 = v47;
  v50 = swift_getOpaqueTypeConformance2(&v71, &opaque type descriptor for <<opaque return type of WidgetConfiguration.description(_:)>>, 1);
  v51 = v63;
  v52 = v66;
  WidgetConfiguration.enableContentMarginsForFirstParty(_:)(1, v66, v50);
  v53 = v52;
  (*(void (**)(char *, uint64_t))(v67 + 8))(v48, v52);
  v54 = objc_msgSend((id)objc_opt_self(UIDevice), "currentDevice");
  v55 = objc_msgSend(v54, "userInterfaceIdiom");

  v71 = v53;
  v72 = v50;
  v56 = swift_getOpaqueTypeConformance2(&v71, &opaque type descriptor for <<opaque return type of WidgetConfiguration.enableContentMarginsForFirstParty(_:)>>, 1);
  v57 = v68;
  WidgetConfiguration._containerBackgroundRemovable(_:)(v55 != (id)5, v68, v56);
  return (*(uint64_t (**)(char *, uint64_t))(v69 + 8))(v51, v57);
}

uint64_t sub_10005F4E4()
{
  if (qword_1000B8D18 != -1)
    swift_once(&qword_1000B8D18, sub_10005EE0C);
  return Container.resolver.getter();
}

int main(int argc, const char **argv, const char **envp)
{
  sub_10005F570();
  static WidgetBundle.main()();
  return 0;
}

unint64_t sub_10005F570()
{
  unint64_t result;

  result = qword_1000BBB38;
  if (!qword_1000BBB38)
  {
    result = swift_getWitnessTable(&unk_10008C940, &type metadata for TagWidgetBundle);
    atomic_store(result, (unint64_t *)&qword_1000BBB38);
  }
  return result;
}

ValueMetadata *type metadata accessor for TagWidgetBundle()
{
  return &type metadata for TagWidgetBundle;
}

uint64_t sub_10005F5C4(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_10009CFDC, 1);
}

ValueMetadata *type metadata accessor for TagWidget()
{
  return &type metadata for TagWidget;
}

uint64_t sub_10005F5E4()
{
  return sub_10002CE94(&qword_1000BBB50, &qword_1000BBB58, (uint64_t)&protocol conformance descriptor for TupleWidget<A>);
}

uint64_t sub_10005F610(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_10009D004, 1);
}

uint64_t sub_10005F620()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t OpaqueTypeConformance2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;

  v0 = sub_10001B560(&qword_1000B8D30);
  v1 = sub_10001B560(&qword_1000B8D38);
  v2 = sub_10001B560(&qword_1000B8D40);
  v3 = sub_10001B560(&qword_1000B8D48);
  v9 = sub_10001B560(&qword_1000B8D50);
  v10 = sub_10002CE94(&qword_1000B8D58, &qword_1000B8D50, (uint64_t)&unk_10008BAE0);
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v9, &opaque type descriptor for <<opaque return type of WidgetConfiguration.configurationDisplayName(_:)>>, 1);
  v9 = v3;
  v10 = OpaqueTypeConformance2;
  v5 = swift_getOpaqueTypeConformance2(&v9, &opaque type descriptor for <<opaque return type of WidgetConfiguration.supportedFamilies(_:)>>, 1);
  v9 = v2;
  v10 = v5;
  v6 = swift_getOpaqueTypeConformance2(&v9, &opaque type descriptor for <<opaque return type of WidgetConfiguration.description(_:)>>, 1);
  v9 = v1;
  v10 = v6;
  v7 = swift_getOpaqueTypeConformance2(&v9, &opaque type descriptor for <<opaque return type of WidgetConfiguration.enableContentMarginsForFirstParty(_:)>>, 1);
  v9 = v0;
  v10 = v7;
  return swift_getOpaqueTypeConformance2(&v9, &unk_10009BF90, 1);
}

unint64_t sub_10005F734(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  id v8;
  unint64_t result;
  char v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;

  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
  {
    v4 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_10001B520(&qword_1000BBD30);
  v3 = static _DictionaryStorage.allocate(capacity:)(v2);
  v4 = (_QWORD *)v3;
  v5 = *(_QWORD *)(a1 + 16);
  if (!v5)
  {
LABEL_9:
    swift_bridgeObjectRelease(a1);
    return (unint64_t)v4;
  }
  swift_retain(v3);
  v6 = (uint64_t *)(a1 + 40);
  while (1)
  {
    v7 = *v6;
    v8 = (id)*(v6 - 1);
    result = sub_100031614();
    if ((v10 & 1) != 0)
      break;
    *(_QWORD *)((char *)v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v11 = 8 * result;
    *(_QWORD *)(v4[6] + v11) = v8;
    *(_QWORD *)(v4[7] + v11) = v7;
    v12 = v4[2];
    v13 = __OFADD__(v12, 1);
    v14 = v12 + 1;
    if (v13)
      goto LABEL_11;
    v4[2] = v14;
    v6 += 2;
    if (!--v5)
    {
      swift_release(v4);
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_10005F83C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t result;
  char v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;

  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
  {
    v4 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_10001B520(&qword_1000BBD20);
  v3 = static _DictionaryStorage.allocate(capacity:)(v2);
  v4 = (_QWORD *)v3;
  v5 = *(_QWORD *)(a1 + 16);
  if (!v5)
  {
LABEL_9:
    swift_bridgeObjectRelease(a1);
    return (unint64_t)v4;
  }
  v6 = v3 + 64;
  v7 = a1 + 32;
  swift_retain(v3);
  while (1)
  {
    sub_10002CCB0(v7, (uint64_t)&v14, &qword_1000BBD28);
    v8 = v14;
    result = sub_100031614(v14);
    if ((v10 & 1) != 0)
      break;
    *(_QWORD *)(v6 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    *(_QWORD *)(v4[6] + 8 * result) = v8;
    result = (unint64_t)sub_100033F68(&v15, (_OWORD *)(v4[7] + 32 * result));
    v11 = v4[2];
    v12 = __OFADD__(v11, 1);
    v13 = v11 + 1;
    if (v12)
      goto LABEL_11;
    v4[2] = v13;
    v7 += 40;
    if (!--v5)
    {
      swift_release(v4);
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_10005F968(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  id v8;
  unint64_t result;
  char v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;

  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
  {
    v4 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_10001B520(&qword_1000BBD18);
  v3 = static _DictionaryStorage.allocate(capacity:)(v2);
  v4 = (_QWORD *)v3;
  v5 = *(_QWORD *)(a1 + 16);
  if (!v5)
  {
LABEL_9:
    swift_bridgeObjectRelease(a1);
    return (unint64_t)v4;
  }
  swift_retain(v3);
  v6 = (uint64_t *)(a1 + 40);
  while (1)
  {
    v7 = *v6;
    v8 = (id)*(v6 - 1);
    swift_bridgeObjectRetain(v7);
    result = sub_1000316A4((uint64_t)v8);
    if ((v10 & 1) != 0)
      break;
    *(_QWORD *)((char *)v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v11 = 8 * result;
    *(_QWORD *)(v4[6] + v11) = v8;
    *(_QWORD *)(v4[7] + v11) = v7;
    v12 = v4[2];
    v13 = __OFADD__(v12, 1);
    v14 = v12 + 1;
    if (v13)
      goto LABEL_11;
    v4[2] = v14;
    v6 += 2;
    if (!--v5)
    {
      swift_release(v4);
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_10005FA70(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t result;
  char v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v2 = sub_10001B520(&qword_1000BBD40);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v24 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = *(_QWORD *)(a1 + 16);
  if (!v6)
  {
    v8 = &_swiftEmptyDictionarySingleton;
LABEL_9:
    v23 = a1;
LABEL_10:
    swift_bridgeObjectRelease(v23);
    return (unint64_t)v8;
  }
  sub_10001B520(&qword_1000BBD48);
  v7 = static _DictionaryStorage.allocate(capacity:)(v6);
  v8 = (_QWORD *)v7;
  v9 = *(_QWORD *)(a1 + 16);
  if (!v9)
    goto LABEL_9;
  v10 = *(int *)(v2 + 48);
  v11 = v7 + 64;
  v12 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v25 = a1;
  v13 = a1 + v12;
  v14 = *(_QWORD *)(v3 + 72);
  swift_retain(v7);
  while (1)
  {
    sub_10002CCB0(v13, (uint64_t)v5, &qword_1000BBD40);
    result = sub_100031738((uint64_t)v5);
    if ((v16 & 1) != 0)
      break;
    v17 = result;
    *(_QWORD *)(v11 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    v18 = v8[6];
    v19 = type metadata accessor for URL(0);
    result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(*(_QWORD *)(v19 - 8) + 32))(v18 + *(_QWORD *)(*(_QWORD *)(v19 - 8) + 72) * v17, v5, v19);
    *(_QWORD *)(v8[7] + 8 * v17) = *(_QWORD *)&v5[v10];
    v20 = v8[2];
    v21 = __OFADD__(v20, 1);
    v22 = v20 + 1;
    if (v21)
      goto LABEL_12;
    v8[2] = v22;
    v13 += v14;
    if (!--v9)
    {
      swift_release(v8);
      v23 = v25;
      goto LABEL_10;
    }
  }
  __break(1u);
LABEL_12:
  __break(1u);
  return result;
}

unint64_t sub_10005FC04(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  void **v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  void *v10;
  id v11;
  id v12;
  unint64_t result;
  char v14;
  uint64_t *v15;
  _QWORD *v16;
  uint64_t v17;
  BOOL v18;
  uint64_t v19;

  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
  {
    v4 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_10001B520(&qword_1000BBD38);
  v3 = static _DictionaryStorage.allocate(capacity:)(v2);
  v4 = (_QWORD *)v3;
  v5 = *(_QWORD *)(a1 + 16);
  if (!v5)
  {
LABEL_9:
    swift_bridgeObjectRelease(a1);
    return (unint64_t)v4;
  }
  swift_retain(v3);
  v6 = (void **)(a1 + 56);
  while (1)
  {
    v7 = (uint64_t)*(v6 - 3);
    v8 = (uint64_t)*(v6 - 2);
    v10 = *(v6 - 1);
    v9 = *v6;
    v11 = v10;
    v12 = v9;
    swift_bridgeObjectRetain(v8);
    result = sub_1000316D4(v7, v8);
    if ((v14 & 1) != 0)
      break;
    *(_QWORD *)((char *)v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v15 = (uint64_t *)(v4[6] + 16 * result);
    *v15 = v7;
    v15[1] = v8;
    v16 = (_QWORD *)(v4[7] + 16 * result);
    *v16 = v10;
    v16[1] = v12;
    v17 = v4[2];
    v18 = __OFADD__(v17, 1);
    v19 = v17 + 1;
    if (v18)
      goto LABEL_11;
    v4[2] = v19;
    v6 += 4;
    if (!--v5)
    {
      swift_release(v4);
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_10005FD28(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t result;
  char v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  _OWORD v16[2];
  uint64_t v17;
  __int128 v18;

  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
  {
    v4 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_10001B520(&qword_1000BBDF8);
  v3 = static _DictionaryStorage.allocate(capacity:)(v2);
  v4 = (_QWORD *)v3;
  v5 = *(_QWORD *)(a1 + 16);
  if (!v5)
  {
LABEL_9:
    swift_bridgeObjectRelease(a1);
    return (unint64_t)v4;
  }
  v6 = v3 + 64;
  v7 = a1 + 32;
  swift_retain(v3);
  while (1)
  {
    sub_10002CCB0(v7, (uint64_t)v16, &qword_1000BBE00);
    result = sub_10003179C((uint64_t)v16);
    if ((v9 & 1) != 0)
      break;
    *(_QWORD *)(v6 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    v10 = v4[6] + 40 * result;
    v11 = v16[0];
    v12 = v16[1];
    *(_QWORD *)(v10 + 32) = v17;
    *(_OWORD *)v10 = v11;
    *(_OWORD *)(v10 + 16) = v12;
    result = (unint64_t)sub_100033F68(&v18, (_OWORD *)(v4[7] + 32 * result));
    v13 = v4[2];
    v14 = __OFADD__(v13, 1);
    v15 = v13 + 1;
    if (v14)
      goto LABEL_11;
    v4[2] = v15;
    v7 += 72;
    if (!--v5)
    {
      swift_release(v4);
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

_QWORD *sub_10005FE68()
{
  uint64_t v0;
  id v1;
  void *v2;
  id v3;
  id v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;

  v1 = *(id *)(v0 + OBJC_IVAR____TtC7NewsTag20TrackableWidgetState_results);
  v2 = sub_100060CD8();
  v3 = objc_msgSend(v1, "sections");
  v4 = objc_msgSend(v3, "array");

  v5 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v4, (char *)&type metadata for Any + 8);
  v6 = sub_1000500E8(v5);
  swift_bridgeObjectRelease(v5);
  swift_bridgeObjectRetain(v2);
  v7 = sub_100032418((unint64_t)v6, (uint64_t)v2);
  swift_bridgeObjectRelease(v6);

  swift_bridgeObjectRelease_n(v2, 2);
  return v7;
}

uint64_t sub_100060024(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_10006005C + 4 * byte_10008C9D0[a1]))(0xD000000000000010, 0x80000001000905E0);
}

uint64_t sub_10006005C()
{
  return 0x44497972746E65;
}

uint64_t sub_100060074()
{
  return 0x4473746C75736572;
}

uint64_t sub_100060094()
{
  return 0x666E496863746566;
}

uint64_t sub_1000600B8()
{
  return 0x6F4374756F79616CLL;
}

uint64_t sub_1000600DC()
{
  return 0x49746E65746E6F63;
}

uint64_t sub_1000600F8(uint64_t a1)
{
  return a1 + 2;
}

uint64_t sub_100060164(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_10006019C + 4 * byte_10008C9DA[a1]))(0xD000000000000010, 0x80000001000905E0);
}

uint64_t sub_10006019C()
{
  return 0x44497972746E65;
}

uint64_t sub_1000601B4()
{
  return 0x4473746C75736572;
}

uint64_t sub_1000601D4()
{
  return 0x666E496863746566;
}

uint64_t sub_1000601F8()
{
  return 0x6F4374756F79616CLL;
}

uint64_t sub_10006021C()
{
  return 0x49746E65746E6F63;
}

uint64_t sub_100060238(uint64_t a1)
{
  return a1 + 2;
}

uint64_t sub_1000602A4(unsigned __int8 *a1, unsigned __int8 *a2)
{
  unsigned __int8 v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  char v10;

  v2 = *a2;
  v3 = sub_100060024(*a1);
  v5 = v4;
  v6 = sub_100060024(v2);
  if (v3 == v6 && v5 == v7)
  {
    v10 = 1;
    v9 = v5;
  }
  else
  {
    v9 = v7;
    v10 = _stringCompareWithSmolCheck(_:_:expecting:)(v3, v5, v6, v7, 0);
  }
  swift_bridgeObjectRelease(v5);
  swift_bridgeObjectRelease(v9);
  return v10 & 1;
}

Swift::Int sub_10006032C()
{
  unsigned __int8 *v0;
  unsigned __int8 v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD v6[9];

  v1 = *v0;
  Hasher.init(_seed:)(v6, 0);
  v2 = sub_100060024(v1);
  v4 = v3;
  String.hash(into:)(v6, v2, v3);
  swift_bridgeObjectRelease(v4);
  return Hasher._finalize()();
}

uint64_t sub_10006038C(uint64_t a1)
{
  unsigned __int8 *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = sub_100060024(*v1);
  v5 = v4;
  String.hash(into:)(a1, v3, v4);
  return swift_bridgeObjectRelease(v5);
}

Swift::Int sub_1000603CC(uint64_t a1)
{
  unsigned __int8 *v1;
  unsigned __int8 v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD v7[9];

  v2 = *v1;
  Hasher.init(_seed:)(v7, a1);
  v3 = sub_100060024(v2);
  v5 = v4;
  String.hash(into:)(v7, v3, v4);
  swift_bridgeObjectRelease(v5);
  return Hasher._finalize()();
}

unint64_t sub_100060428@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = sub_1000672D0(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_100060454@<X0>(uint64_t *a1@<X8>)
{
  unsigned __int8 *v1;
  uint64_t result;
  uint64_t v4;

  result = sub_100060024(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_10006047C()
{
  unsigned __int8 *v0;

  return sub_100060164(*v0);
}

unint64_t sub_100060484@<X0>(Swift::String a1@<X1:X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = sub_1000672D0(a1);
  *a2 = result;
  return result;
}

void sub_1000604A8(_BYTE *a1@<X8>)
{
  *a1 = 10;
}

uint64_t sub_1000604B4(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100066E8C();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000604DC(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100066E8C();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1000605F8(void *a1)
{
  uint64_t v1;
  id v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  unint64_t v9;
  id v10;
  BOOL v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  void *v27;

  v3 = objc_retainAutoreleasedReturnValue(objc_msgSend(*(id *)(v1
                                                             + OBJC_IVAR____TtC7NewsTag20TrackableWidgetState_results), "sections"));
  v4 = objc_msgSend(v3, "array");

  v5 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v4, (char *)&type metadata for Any + 8);
  v6 = (uint64_t)sub_1000500E8(v5);
  result = swift_bridgeObjectRelease(v5);
  if ((unint64_t)v6 >> 62)
  {
LABEL_31:
    if (v6 < 0)
      v21 = v6;
    else
      v21 = v6 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v6);
    v8 = _CocoaArrayWrapper.endIndex.getter(v21);
    result = swift_bridgeObjectRelease(v6);
    if (v8)
      goto LABEL_3;
  }
  else
  {
    v8 = *(_QWORD *)((v6 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v8)
    {
LABEL_3:
      v9 = 0;
      v25 = v6;
      v26 = v6 & 0xC000000000000001;
      v22 = v6 + 32;
      v23 = v6 & 0xFFFFFFFFFFFFFF8;
      v24 = v8;
      while (1)
      {
        if (v26)
        {
          v10 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v9, v25);
          v11 = __OFADD__(v9++, 1);
          if (v11)
          {
LABEL_30:
            __break(1u);
            goto LABEL_31;
          }
        }
        else
        {
          if (v9 >= *(_QWORD *)(v23 + 16))
          {
            __break(1u);
            return result;
          }
          v10 = *(id *)(v22 + 8 * v9);
          v11 = __OFADD__(v9++, 1);
          if (v11)
            goto LABEL_30;
        }
        v27 = v10;
        sub_10004ECE8();
        v13 = v12;
        if ((unint64_t)v12 >> 62)
        {
          if (v12 < 0)
            v19 = v12;
          else
            v19 = v12 & 0xFFFFFFFFFFFFFF8;
          swift_bridgeObjectRetain(v12);
          v14 = _CocoaArrayWrapper.endIndex.getter(v19);
          swift_bridgeObjectRelease(v13);
          if (v14)
          {
LABEL_13:
            v15 = 0;
            v6 = v13 & 0xC000000000000001;
            do
            {
              if (v6)
              {
                v16 = specialized _ArrayBuffer._getElementSlowPath(_:)(v15, v13);
                v17 = v15 + 1;
                if (__OFADD__(v15, 1))
                  goto LABEL_29;
              }
              else
              {
                v16 = *(_QWORD *)(v13 + 8 * v15 + 32);
                swift_unknownObjectRetain(v16);
                v17 = v15 + 1;
                if (__OFADD__(v15, 1))
                {
LABEL_29:
                  __break(1u);
                  goto LABEL_30;
                }
              }
              v18 = objc_msgSend(a1, "isEqual:", v16, v22);
              swift_unknownObjectRelease(v16);
              if (v18)
              {
                swift_bridgeObjectRelease(v25);
                swift_bridgeObjectRelease(v13);

                return v15;
              }
              ++v15;
            }
            while (v17 != v14);
          }
        }
        else
        {
          v14 = *(_QWORD *)((v12 & 0xFFFFFFFFFFFFF8) + 0x10);
          if (v14)
            goto LABEL_13;
        }

        result = swift_bridgeObjectRelease(v13);
        if (v9 == v24)
        {
          v20 = v25;
          goto LABEL_36;
        }
      }
    }
  }
  v20 = v6;
LABEL_36:
  swift_bridgeObjectRelease(v20);
  return -1;
}

uint64_t sub_1000608CC(void *a1)
{
  uint64_t v1;
  id v3;
  id v4;
  uint64_t v5;
  _QWORD *v6;
  id v7;
  uint64_t v8;
  char v9;

  v3 = objc_retainAutoreleasedReturnValue(objc_msgSend(*(id *)(v1
                                                             + OBJC_IVAR____TtC7NewsTag20TrackableWidgetState_results), "sections"));
  v4 = objc_msgSend(v3, "array");

  v5 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v4, (char *)&type metadata for Any + 8);
  v6 = sub_1000500E8(v5);
  swift_bridgeObjectRelease(v5);
  v7 = a1;
  v8 = sub_100067424((uint64_t)v6, (uint64_t)v7);
  LOBYTE(v4) = v9;
  swift_bridgeObjectRelease(v6);

  if ((v4 & 1) != 0)
    return -1;
  if (v8 < 0)
  {
    _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Negative value is not representable", 35, 2, "Swift/Integers.swift", 20, 2, 3451, 0);
    __break(1u);
    return -1;
  }
  return v8;
}

_QWORD *sub_100060A3C()
{
  uint64_t v0;
  id v1;
  id v2;
  id v3;
  uint64_t v4;
  _QWORD *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD v13[4];

  v1 = *(id *)(v0 + OBJC_IVAR____TtC7NewsTag20TrackableWidgetState_results);
  v2 = objc_msgSend(v1, "sections");
  v3 = objc_msgSend(v2, "array");

  v4 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v3, (char *)&type metadata for Any + 8);
  v5 = sub_1000500E8(v4);

  swift_bridgeObjectRelease(v4);
  v6 = sub_100060CD8();
  v13[2] = v6;
  v7 = sub_10002CC78(0, (unint64_t *)&qword_1000BBD00, NTSection_ptr);
  v8 = sub_10002CC78(0, &qword_1000BC590, NSNumber_ptr);
  v9 = sub_100066E34();
  v10 = Array.mapToDictionary<A>(_:)(sub_100067B30, v13, v5, v7, v8, v9);
  swift_bridgeObjectRelease(v6);
  v11 = sub_100067524((uint64_t)v5, v10);
  swift_bridgeObjectRelease(v5);
  swift_bridgeObjectRelease(v10);
  return v11;
}

void *sub_100060CD8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  char *v157;
  CGFloat *v158;
  void *result;
  CGFloat v160;
  CGFloat v161;
  CGFloat v162;
  CGFloat v163;
  uint64_t v164;
  id v165;
  CGFloat MinX;
  double *v167;
  uint64_t v168;
  uint64_t v169;
  double v170;
  double v171;
  double v172;
  CGFloat MinY;
  double v174;
  double v175;
  double v176;
  double v177;
  double v178;
  double v179;
  CGFloat v180;
  uint64_t v181;
  uint64_t v182;
  int v183;
  uint64_t v184;
  char v185;
  id v186;
  id v187;
  id v188;
  uint64_t v189;
  _QWORD *v190;
  uint64_t v191;
  uint64_t v192;
  unint64_t v193;
  unint64_t v194;
  id v195;
  id v196;
  uint64_t v197;
  uint64_t v198;
  char **v199;
  uint64_t v200;
  unint64_t v201;
  int v202;
  double v203;
  _QWORD *v204;
  id v205;
  unint64_t v206;
  char isUniquelyReferenced_nonNull_native;
  double v208;
  double v209;
  double v210;
  id v211;
  BOOL v212;
  unint64_t v213;
  double *v214;
  id v215;
  double v216;
  double v217;
  double v218;
  uint64_t v219;
  uint64_t v220;
  double v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  void (*v226)(char *, uint64_t, uint64_t);
  char *v227;
  uint64_t v228;
  uint64_t (*v229)(char *, uint64_t);
  int v230;
  double v231;
  char *v232;
  int v233;
  char *v234;
  int v235;
  void (*v236)(uint64_t, uint64_t, uint64_t);
  char *v237;
  int v238;
  void (*v239)(uint64_t, uint64_t, uint64_t);
  char *v240;
  int v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  void (*v246)(uint64_t, uint64_t);
  char *v247;
  int v248;
  NSString *v249;
  uint64_t *v250;
  char *v251;
  int v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  void (*v257)(uint64_t, uint64_t);
  char *v258;
  int v259;
  uint64_t *v260;
  void *v261;
  id v262;
  uint64_t v263;
  void *v264;
  double v265;
  id v266;
  double v267;
  double v268;
  char *v269;
  int v270;
  double v271;
  char *v272;
  int v273;
  void (*v274)(uint64_t, uint64_t, uint64_t);
  char *v275;
  int v276;
  void (*v277)(uint64_t, uint64_t, uint64_t);
  char *v278;
  int v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  void (*v284)(uint64_t, uint64_t);
  char *v285;
  int v286;
  NSString *v287;
  uint64_t *v288;
  char *v289;
  int v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  void (*v295)(uint64_t, uint64_t);
  char *v296;
  int v297;
  uint64_t *v298;
  void *v299;
  id v300;
  uint64_t v301;
  void *v302;
  double v303;
  id v304;
  double v305;
  double v306;
  char *v307;
  int v308;
  char *v309;
  int v310;
  double v311;
  char *v312;
  int v313;
  double v314;
  char *v315;
  int v316;
  void (*v317)(uint64_t, uint64_t, uint64_t);
  char *v318;
  int v319;
  void (*v320)(uint64_t, uint64_t, uint64_t);
  char *v321;
  int v322;
  uint64_t v323;
  uint64_t v324;
  uint64_t v325;
  uint64_t v326;
  void (*v327)(uint64_t, uint64_t);
  char *v328;
  int v329;
  NSString *v330;
  uint64_t *v331;
  char *v332;
  int v333;
  uint64_t v334;
  uint64_t v335;
  uint64_t v336;
  uint64_t v337;
  void (*v338)(uint64_t, uint64_t);
  char *v339;
  int v340;
  uint64_t *v341;
  void *v342;
  id v343;
  uint64_t v344;
  void *v345;
  double v346;
  id v347;
  double v348;
  double v349;
  char *v350;
  int v351;
  void (*v352)(char *, uint64_t, uint64_t);
  char *v353;
  int v354;
  uint64_t v355;
  void (*v356)(char *, char *, uint64_t);
  char *v357;
  int v358;
  int v359;
  _BOOL4 v361;
  int v362;
  int v363;
  char v364;
  char v365;
  char v366;
  char v367;
  char v368;
  char v369;
  char v370;
  char *v371;
  uint64_t v372;
  int v373;
  char *v374;
  uint64_t v375;
  int v376;
  int v377;
  _BOOL4 v379;
  int v380;
  int v381;
  int v382;
  char v383;
  char v384;
  char v385;
  char v386;
  char v387;
  char v388;
  char *v389;
  char *v390;
  char *v391;
  char *v392;
  uint64_t v393;
  int v394;
  char *v395;
  void (*v396)(char *, char *, uint64_t);
  void (*v397)(char *, uint64_t);
  char *v398;
  int v399;
  NSString *v400;
  uint64_t v401;
  uint64_t v402;
  id v403;
  uint64_t *v404;
  double v405;
  double v406;
  void *v407;
  id v408;
  double v409;
  double v410;
  double v411;
  double v412;
  double v413;
  id v414;
  uint64_t v415;
  uint64_t v416;
  uint64_t v417;
  uint64_t v418;
  uint64_t v419;
  uint64_t v420;
  uint64_t v421;
  UIContentSizeCategory *v422;
  uint64_t v423;
  Swift::String v424;
  void *object;
  uint64_t v426;
  char **v427;
  uint64_t v428;
  Swift::String v429;
  void *v430;
  uint64_t v431;
  UIContentSizeCategory *v432;
  uint64_t v433;
  Swift::String v434;
  void *v435;
  uint64_t v436;
  void **v437;
  uint64_t v438;
  char **v439;
  uint64_t v440;
  Swift::String v441;
  void *v442;
  uint64_t v443;
  Swift::String v444;
  void *v445;
  UIContentSizeCategory v446;
  UIContentSizeCategory v447;
  UIContentSizeCategory v448;
  UIContentSizeCategory v449;
  UIContentSizeCategory v450;
  char *v451;
  UIContentSizeCategory v452;
  int v453;
  char *v454;
  char *v455;
  char *v456;
  char *v457;
  char *v458;
  char *v459;
  char *v460;
  char *v461;
  char *v462;
  char *v463;
  char *v464;
  char *v465;
  char *v466;
  char *v467;
  char *v468;
  char *v469;
  char *v470;
  char *v471;
  char *v472;
  char *v473;
  char *v474;
  char *v475;
  UIContentSizeCategory v476;
  int v477;
  uint64_t v478;
  uint64_t v479;
  UIContentSizeCategory v480;
  _BYTE v481[4];
  int v482;
  uint64_t v483;
  unint64_t v484;
  uint64_t v485;
  id v486;
  UIContentSizeCategory v487;
  char v488;
  int v489;
  unint64_t v490;
  void *v491;
  UIContentSizeCategory v492;
  char *v493;
  char *v494;
  char *v495;
  char *v496;
  char *v497;
  char *v498;
  char *v499;
  char *v500;
  char *v501;
  char *v502;
  char *v503;
  char *v504;
  id v505;
  char *v506;
  char *v507;
  char *v508;
  char *v509;
  char *v510;
  char *v511;
  char *v512;
  uint64_t v513;
  uint64_t v514;
  char *v515;
  uint64_t v516;
  uint64_t v517;
  char *v518;
  uint64_t v519;
  uint64_t v520;
  char *v521;
  char *v522;
  char *v523;
  UIContentSizeCategory v524;
  int v525;
  uint64_t v526;
  uint64_t v527;
  uint64_t v528;
  uint64_t v529;
  uint64_t v530;
  uint64_t v531;
  UIContentSizeCategory v532;
  int v533;
  char *v534;
  char *v535;
  int v536;
  CGFloat v537;
  double v538;
  CGFloat v539;
  CGFloat v540;
  char *v541;
  uint64_t v542;
  uint64_t v543;
  uint64_t v544;
  CGFloat v545;
  char *v546;
  char *v547;
  char *v548;
  char *v549;
  char *v550;
  char *v551;
  char *v552;
  char *v553;
  char *v554;
  char *v555;
  char *v556;
  uint64_t v557;
  uint64_t v558;
  unint64_t v559;
  int v560;
  UIContentSizeCategory v561;
  int v562;
  _BOOL4 v563;
  int v564;
  int v565;
  char *v566;
  double v567;
  id v568;
  double v569;
  uint64_t v570;
  uint64_t v571;
  uint64_t v572;
  int v573;
  int v574;
  int v575;
  unsigned int v576;
  unsigned int v577;
  uint64_t v578;
  char *v579;
  int v580;
  id v581;
  uint64_t v582;
  char *v583;
  int v584;
  unsigned int v585;
  double *v586;
  void (*v587)(char *, char *, uint64_t);
  uint64_t (*v588)(char *, uint64_t);
  unsigned int v589;
  unint64_t v590;
  unint64_t v591;
  unint64_t v592;
  uint64_t v593;
  uint64_t v594;
  uint64_t v595;
  CGRect v596;
  CGRect v597;
  CGRect v598;
  CGRect v599;
  CGRect v600;
  CGRect v601;
  CGRect v602;
  CGRect v603;

  v1 = type metadata accessor for ContentSizeCategory(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = __chkstk_darwin(v1);
  v504 = (char *)&v446 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __chkstk_darwin(v3);
  v501 = (char *)&v446 - v6;
  v7 = __chkstk_darwin(v5);
  v520 = (uint64_t)&v446 - v8;
  v9 = __chkstk_darwin(v7);
  v519 = (uint64_t)&v446 - v10;
  v11 = __chkstk_darwin(v9);
  v534 = (char *)&v446 - v12;
  v13 = __chkstk_darwin(v11);
  v535 = (char *)&v446 - v14;
  v15 = __chkstk_darwin(v13);
  v555 = (char *)&v446 - v16;
  v17 = __chkstk_darwin(v15);
  v554 = (char *)&v446 - v18;
  v19 = __chkstk_darwin(v17);
  v556 = (char *)&v446 - v20;
  v21 = __chkstk_darwin(v19);
  v579 = (char *)&v446 - v22;
  v23 = __chkstk_darwin(v21);
  v583 = (char *)&v446 - v24;
  v25 = __chkstk_darwin(v23);
  v27 = (char *)&v446 - v26;
  v28 = __chkstk_darwin(v25);
  v523 = (char *)&v446 - v29;
  v30 = __chkstk_darwin(v28);
  v518 = (char *)&v446 - v31;
  v32 = __chkstk_darwin(v30);
  v531 = (uint64_t)&v446 - v33;
  v34 = __chkstk_darwin(v32);
  v530 = (uint64_t)&v446 - v35;
  v36 = __chkstk_darwin(v34);
  v503 = (char *)&v446 - v37;
  v38 = __chkstk_darwin(v36);
  v500 = (char *)&v446 - v39;
  v40 = __chkstk_darwin(v38);
  v517 = (uint64_t)&v446 - v41;
  v42 = __chkstk_darwin(v40);
  v516 = (uint64_t)&v446 - v43;
  v44 = __chkstk_darwin(v42);
  v522 = (char *)&v446 - v45;
  v46 = __chkstk_darwin(v44);
  v515 = (char *)&v446 - v47;
  v48 = __chkstk_darwin(v46);
  v529 = (uint64_t)&v446 - v49;
  v50 = __chkstk_darwin(v48);
  v528 = (uint64_t)&v446 - v51;
  v52 = __chkstk_darwin(v50);
  v502 = (char *)&v446 - v53;
  v54 = __chkstk_darwin(v52);
  v499 = (char *)&v446 - v55;
  v56 = __chkstk_darwin(v54);
  v514 = (uint64_t)&v446 - v57;
  v58 = __chkstk_darwin(v56);
  v513 = (uint64_t)&v446 - v59;
  v60 = __chkstk_darwin(v58);
  v521 = (char *)&v446 - v61;
  v62 = __chkstk_darwin(v60);
  v512 = (char *)&v446 - v63;
  v64 = __chkstk_darwin(v62);
  v527 = (uint64_t)&v446 - v65;
  __chkstk_darwin(v64);
  v526 = (uint64_t)&v446 - v66;
  v67 = type metadata accessor for LayoutContext(0);
  v68 = __chkstk_darwin(v67);
  v70 = (char *)&v446 - ((v69 + 15) & 0xFFFFFFFFFFFFFFF0);
  v71 = __chkstk_darwin(v68);
  v475 = (char *)&v446 - v72;
  v73 = __chkstk_darwin(v71);
  v474 = (char *)&v446 - v74;
  v75 = __chkstk_darwin(v73);
  v473 = (char *)&v446 - v76;
  v77 = __chkstk_darwin(v75);
  v472 = (char *)&v446 - v78;
  v79 = __chkstk_darwin(v77);
  v471 = (char *)&v446 - v80;
  v81 = __chkstk_darwin(v79);
  v470 = (char *)&v446 - v82;
  v83 = __chkstk_darwin(v81);
  v469 = (char *)&v446 - v84;
  v85 = __chkstk_darwin(v83);
  v468 = (char *)&v446 - v86;
  v87 = __chkstk_darwin(v85);
  v467 = (char *)&v446 - v88;
  v89 = __chkstk_darwin(v87);
  v466 = (char *)&v446 - v90;
  v91 = __chkstk_darwin(v89);
  v465 = (char *)&v446 - v92;
  v93 = __chkstk_darwin(v91);
  v464 = (char *)&v446 - v94;
  v95 = __chkstk_darwin(v93);
  v463 = (char *)&v446 - v96;
  v97 = __chkstk_darwin(v95);
  v462 = (char *)&v446 - v98;
  v99 = __chkstk_darwin(v97);
  v461 = (char *)&v446 - v100;
  v101 = __chkstk_darwin(v99);
  v460 = (char *)&v446 - v102;
  v103 = __chkstk_darwin(v101);
  v459 = (char *)&v446 - v104;
  v105 = __chkstk_darwin(v103);
  v458 = (char *)&v446 - v106;
  v107 = __chkstk_darwin(v105);
  v457 = (char *)&v446 - v108;
  v109 = __chkstk_darwin(v107);
  v456 = (char *)&v446 - v110;
  v111 = __chkstk_darwin(v109);
  v455 = (char *)&v446 - v112;
  __chkstk_darwin(v111);
  v454 = (char *)&v446 - v113;
  v114 = type metadata accessor for InternalWidgetFamily(0);
  v115 = __chkstk_darwin(v114);
  v498 = (char *)&v446 - ((v116 + 15) & 0xFFFFFFFFFFFFFFF0);
  v117 = __chkstk_darwin(v115);
  v497 = (char *)&v446 - v118;
  v119 = __chkstk_darwin(v117);
  v553 = (char *)&v446 - v120;
  v121 = __chkstk_darwin(v119);
  v552 = (char *)&v446 - v122;
  v123 = __chkstk_darwin(v121);
  v511 = (char *)&v446 - v124;
  v125 = __chkstk_darwin(v123);
  v510 = (char *)&v446 - v126;
  v127 = __chkstk_darwin(v125);
  v496 = (char *)&v446 - v128;
  v129 = __chkstk_darwin(v127);
  v495 = (char *)&v446 - v130;
  v131 = __chkstk_darwin(v129);
  v551 = (char *)&v446 - v132;
  v133 = __chkstk_darwin(v131);
  v550 = (char *)&v446 - v134;
  v135 = __chkstk_darwin(v133);
  v549 = (char *)&v446 - v136;
  v137 = __chkstk_darwin(v135);
  v509 = (char *)&v446 - v138;
  v139 = __chkstk_darwin(v137);
  v508 = (char *)&v446 - v140;
  v141 = __chkstk_darwin(v139);
  v494 = (char *)&v446 - v142;
  v143 = __chkstk_darwin(v141);
  v493 = (char *)&v446 - v144;
  v145 = __chkstk_darwin(v143);
  v548 = (char *)&v446 - v146;
  v147 = __chkstk_darwin(v145);
  v507 = (char *)&v446 - v148;
  v149 = __chkstk_darwin(v147);
  v506 = (char *)&v446 - v150;
  v151 = __chkstk_darwin(v149);
  v547 = (char *)&v446 - v152;
  v153 = __chkstk_darwin(v151);
  v546 = (char *)&v446 - v154;
  __chkstk_darwin(v153);
  v157 = (char *)&v446 - v156;
  v158 = (CGFloat *)(v0 + OBJC_IVAR____TtC7NewsTag20TrackableWidgetState_visibleRect);
  if ((*(_BYTE *)(v0 + OBJC_IVAR____TtC7NewsTag20TrackableWidgetState_visibleRect + 32) & 1) != 0)
    return (void *)sub_10005F968((uint64_t)_swiftEmptyArrayStorage);
  v451 = v70;
  v161 = v158[2];
  v160 = v158[3];
  v162 = *v158;
  v163 = v158[1];
  v164 = v155;
  v165 = *(id *)(v0 + OBJC_IVAR____TtC7NewsTag20TrackableWidgetState_results);
  v596.origin.x = v162;
  v596.origin.y = v163;
  v596.size.width = v161;
  v596.size.height = v160;
  MinX = CGRectGetMinX(v596);
  v167 = (double *)(v0 + OBJC_IVAR____TtC7NewsTag20TrackableWidgetState_layoutContext);
  v168 = *(int *)(v67 + 28);
  v169 = (uint64_t)v167 + v168;
  v170 = *(double *)((char *)v167 + v168);
  v171 = ceil(MinX * v170);
  if (v170 >= v171)
    v172 = v171;
  else
    v172 = *(double *)((char *)v167 + v168);
  v597.origin.x = v162;
  v597.origin.y = v163;
  v597.size.width = v161;
  v597.size.height = v160;
  MinY = CGRectGetMinY(v597);
  v174 = *(double *)(v169 + 8);
  v175 = ceil(MinY * v174);
  if (v174 >= v175)
    v176 = v175;
  else
    v176 = *(double *)(v169 + 8);
  v598.origin.x = v162;
  v598.origin.y = v163;
  v598.size.width = v161;
  v598.size.height = v160;
  v177 = ceil(v170 * CGRectGetWidth(v598));
  if (v170 < v177)
    v177 = v170;
  v545 = v177;
  v599.origin.x = v162;
  v599.origin.y = v163;
  v178 = v174;
  v599.size.width = v161;
  v599.size.height = v160;
  v179 = ceil(v174 * CGRectGetHeight(v599));
  if (v174 >= v179)
    v180 = v179;
  else
    v180 = v174;
  v578 = v67;
  v181 = *(int *)(v67 + 24);
  v586 = v167;
  v182 = (uint64_t)v167 + v181;
  v183 = enum case for InternalWidgetFamily.systemSmall(_:);
  (*(void (**)(char *, _QWORD, uint64_t))(v164 + 104))(v157, enum case for InternalWidgetFamily.systemSmall(_:), v114);
  v184 = sub_10001C96C((unint64_t *)&unk_1000BBCF0, (uint64_t (*)(uint64_t))&type metadata accessor for InternalWidgetFamily, (uint64_t)&protocol conformance descriptor for InternalWidgetFamily);
  v572 = v182;
  v185 = dispatch thunk of static Equatable.== infix(_:_:)(v182, v157, v114, v184);
  v544 = v164;
  (*(void (**)(char *, uint64_t))(v164 + 8))(v157, v114);
  v486 = v165;
  if ((v185 & 1) != 0)
  {
    v602.origin.x = 0.0;
    v602.origin.y = 0.0;
    v600.origin.x = v172;
    v600.origin.y = v176;
    v600.size.width = v545;
    v600.size.height = v180;
    v602.size.width = v170;
    v602.size.height = v174;
    if (CGRectContainsRect(v600, v602))
    {
      v186 = v486;
      v187 = objc_msgSend(v486, "sections");
      v188 = objc_msgSend(v187, "array");

      v189 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v188, (char *)&type metadata for Any + 8);
      v190 = sub_1000500E8(v189);
      swift_bridgeObjectRelease(v189);
      v191 = sub_10002CC78(0, (unint64_t *)&qword_1000BBD00, NTSection_ptr);
      v192 = sub_10001B520(&qword_1000BA278);
      v193 = sub_100066E34();
      v194 = Array.mapToDictionary<A>(_:)(sub_100065D9C, 0, v190, v191, v192, v193);

      swift_bridgeObjectRelease(v190);
    }
    else
    {
      v194 = sub_10005F968((uint64_t)_swiftEmptyArrayStorage);

    }
    return (void *)v194;
  }
  v195 = objc_msgSend(v165, "sections");
  v196 = objc_msgSend(v195, "array");

  v197 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v196, (char *)&type metadata for Any + 8);
  v198 = (uint64_t)sub_1000500E8(v197);
  swift_bridgeObjectRelease(v197);
  v199 = &v518;
  v485 = v198;
  if ((unint64_t)v198 >> 62)
  {
LABEL_496:
    v419 = (uint64_t)*(v199 - 32);
    if (v198 < 0)
      v420 = v419;
    else
      v420 = v198 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v485);
    v198 = v485;
    v200 = _CocoaArrayWrapper.endIndex.getter(v420);
    swift_bridgeObjectRelease(v198);
  }
  else
  {
    v200 = *(_QWORD *)((v198 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  if (!v200)
  {

    swift_bridgeObjectRelease(v198);
    return &_swiftEmptyDictionarySingleton;
  }
  v201 = 0;
  v484 = v198 & 0xC000000000000001;
  v202 = enum case for InternalWidgetFamily.systemMedium(_:);
  v580 = enum case for InternalWidgetFamily.systemLarge(_:);
  v575 = enum case for InternalWidgetFamily.newsLargeTall(_:);
  v564 = enum case for InternalWidgetFamily.accessoryRectangular(_:);
  v589 = enum case for ContentSizeCategory.extraSmall(_:);
  v585 = enum case for ContentSizeCategory.medium(_:);
  v577 = enum case for ContentSizeCategory.extraExtraLarge(_:);
  v576 = enum case for ContentSizeCategory.accessibilityMedium(_:);
  v584 = enum case for ContentSizeCategory.small(_:);
  v565 = enum case for ContentSizeCategory.large(_:);
  v562 = enum case for ContentSizeCategory.extraLarge(_:);
  v525 = enum case for ContentSizeCategory.extraExtraExtraLarge(_:);
  v489 = enum case for ContentSizeCategory.accessibilityLarge(_:);
  v482 = enum case for ContentSizeCategory.accessibilityExtraLarge(_:);
  v477 = enum case for ContentSizeCategory.accessibilityExtraExtraLarge(_:);
  v453 = enum case for ContentSizeCategory.accessibilityExtraExtraExtraLarge(_:);
  v447 = UIContentSizeCategoryUnspecified;
  v446 = UIContentSizeCategoryAccessibilityExtraExtraExtraLarge;
  v448 = UIContentSizeCategoryAccessibilityExtraExtraLarge;
  v449 = UIContentSizeCategoryAccessibilityExtraLarge;
  v450 = UIContentSizeCategoryAccessibilityLarge;
  v452 = UIContentSizeCategoryAccessibilityMedium;
  v476 = UIContentSizeCategoryExtraExtraExtraLarge;
  v480 = UIContentSizeCategoryExtraExtraLarge;
  v487 = UIContentSizeCategoryExtraLarge;
  v492 = UIContentSizeCategoryLarge;
  v524 = UIContentSizeCategoryMedium;
  v203 = 0.0;
  v532 = UIContentSizeCategorySmall;
  v561 = UIContentSizeCategoryExtraSmall;
  v479 = v198 & 0xFFFFFFFFFFFFFF8;
  v478 = v198 + 32;
  v199 = &v523;
  v491 = &_swiftEmptyDictionarySingleton;
  v538 = v178;
  v574 = v183;
  v573 = enum case for InternalWidgetFamily.systemMedium(_:);
  v542 = v114;
  v582 = v1;
  v543 = v2;
  v541 = v27;
  v540 = v170;
  v539 = v172;
  v537 = v176;
  v483 = v200;
  while (1)
  {
    if (v484)
    {
      v211 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v201, v198);
    }
    else
    {
      if (v201 >= *(_QWORD *)(v479 + 16))
        goto LABEL_495;
      v211 = *(id *)(v478 + 8 * v201);
    }
    v505 = v211;
    v212 = __OFADD__(v201, 1);
    v213 = v201 + 1;
    if (v212)
    {
LABEL_494:
      __break(1u);
LABEL_495:
      __break(1u);
      goto LABEL_496;
    }
    v490 = v213;
    v214 = v586;
    v215 = sub_1000454BC();
    objc_msgSend(v215, "nt_scaledValueForValue:", 1.0, v446);
    v217 = v216;

    v218 = *v214;
    v592 = (unint64_t)_swiftEmptyArrayStorage;
    sub_10004ECE8();
    v198 = v219;
    if ((unint64_t)v219 >> 62)
    {
      v418 = v219 < 0 ? v219 : v219 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v219);
      v220 = _CocoaArrayWrapper.endIndex.getter(v418);
      swift_bridgeObjectRelease(v198);
    }
    else
    {
      v220 = *(_QWORD *)((v219 & 0xFFFFFFFFFFFFF8) + 0x10);
    }
    v221 = v203 + v217 * 12.0 + v218 + 6.0;
    if (v220)
      break;
    swift_bridgeObjectRelease(v198);
    v204 = _swiftEmptyArrayStorage;
LABEL_22:
    v205 = v505;
    v206 = (unint64_t)v491;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v491);
    v590 = v206;
    sub_100066524((uint64_t)v204, v205, isUniquelyReferenced_nonNull_native);
    v491 = (void *)v590;

    swift_bridgeObjectRelease(0x8000000000000000);
    v208 = v586[1];
    sub_10004581C();
    v210 = v209;

    v203 = v221 + v208 - v210;
    v201 = v490;
    v183 = v574;
    v198 = v485;
    v199 = (char **)((char *)&v595 + 4);
    v202 = v573;
    if (v490 == v483)
    {

      swift_bridgeObjectRelease(v198);
      return v491;
    }
  }
  v559 = v198 & 0xC000000000000001;
  v222 = 4;
  v558 = v198;
  v557 = v220;
  while (1)
  {
    v223 = v222 - 4;
    if (v559)
    {
      v581 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v222 - 4, v198);
      v224 = v222 - 3;
      if (__OFADD__(v223, 1))
        goto LABEL_493;
    }
    else
    {
      v581 = *(id *)(v198 + 8 * v222);
      swift_unknownObjectRetain(v581);
      v224 = v222 - 3;
      if (__OFADD__(v223, 1))
      {
LABEL_493:
        __break(1u);
        goto LABEL_494;
      }
    }
    v570 = v224;
    v571 = v222;
    v568 = objc_msgSend(v581, "itemType");
    v225 = v544;
    v226 = *(void (**)(char *, uint64_t, uint64_t))(v544 + 16);
    v227 = v546;
    v228 = v572;
    v226(v546, v572, v114);
    v229 = *(uint64_t (**)(char *, uint64_t))(v225 + 88);
    v230 = v229(v227, v114);
    if (v230 == v183)
    {
      v421 = (uint64_t)v586;
      v422 = &v487;
LABEL_503:
      sub_10002A83C(v421, (uint64_t)*(v422 - 32), type metadata accessor for LayoutContext);
      v590 = 0;
      v591 = 0xE000000000000000;
      _StringGuts.grow(_:)(46);
      swift_bridgeObjectRelease(v591);
      v590 = 0xD00000000000002CLL;
      v591 = 0x8000000100091060;
      v423 = sub_10001C96C(&qword_1000B99A8, (uint64_t (*)(uint64_t))&type metadata accessor for InternalWidgetFamily, (uint64_t)&protocol conformance descriptor for InternalWidgetFamily);
      v424._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v114, v423);
      object = v424._object;
      String.append(_:)(v424);
      swift_bridgeObjectRelease(object);
      result = (void *)_assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, v590, v591, "NewsTag/LayoutContext.swift", 27, 2, 409, 0);
      goto LABEL_518;
    }
    v231 = 4.5;
    if (v230 != v202)
    {
      v231 = 6.0;
      if (v230 != v580 && v230 != v575)
      {
        v231 = 1.0;
        if (v230 != v564)
        {
          v426 = (uint64_t)v586;
          v427 = (char **)&v488;
          goto LABEL_507;
        }
      }
    }
    v569 = v231;
    v232 = v547;
    v226(v547, v228, v114);
    v233 = v229(v232, v114);
    v176 = v178;
    if (v233 != v183)
    {
      if (v233 == v202)
      {
        v234 = v506;
        v226(v506, v228, v114);
        v235 = v229(v234, v114);
        if (v235 != v183)
        {
          if (v235 == v202 || v235 == v580 || v235 == v575)
          {
            v236 = *(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 104);
            v236(v527, v589, v1);
            goto LABEL_55;
          }
          if (v235 != v564)
          {
            v438 = (uint64_t)v586;
            v439 = (char **)&v490;
            goto LABEL_517;
          }
        }
        v236 = *(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 104);
        v236(v527, v585, v1);
LABEL_55:
        v240 = v507;
        v226(v507, v228, v114);
        v241 = v229(v240, v114);
        v242 = v576;
        if (v241 != v183)
        {
          v242 = v577;
          if (v241 != v202)
          {
            v242 = v577;
            if (v241 != v580)
            {
              v242 = v577;
              if (v241 != v575)
              {
                v242 = v576;
                if (v241 != v564)
                {
                  v436 = (uint64_t)v586;
                  v437 = &v491;
                  goto LABEL_516;
                }
              }
            }
          }
        }
        v243 = (uint64_t)v512;
        v236((uint64_t)v512, v242, v1);
        v244 = v526;
        v245 = v527;
        sub_10003DFA0(v527, v243, v526);
        v246 = *(void (**)(uint64_t, uint64_t))(v2 + 8);
        v246(v243, v1);
        v246(v245, v1);
        v247 = v521;
        (*(void (**)(char *, uint64_t, uint64_t))(v2 + 16))(v521, v244, v1);
        v248 = (*(uint64_t (**)(char *, uint64_t))(v2 + 88))(v247, v1);
        if (v248 == v589)
        {
          v249 = v561;
          v228 = v572;
        }
        else
        {
          v228 = v572;
          if (v248 == v584)
          {
            v250 = (uint64_t *)&v566;
          }
          else if (v248 == v585)
          {
            v250 = (uint64_t *)&v556;
          }
          else if (v248 == v565)
          {
            v250 = (uint64_t *)&v524;
          }
          else if (v248 == v562)
          {
            v250 = &v520;
          }
          else if (v248 == v577)
          {
            v250 = &v514;
          }
          else if (v248 == v525)
          {
            v250 = (uint64_t *)&v510;
          }
          else if (v248 == v576)
          {
            v250 = &v485;
          }
          else if (v248 == v489)
          {
            v250 = &v483;
          }
          else if (v248 == v482)
          {
            v250 = (uint64_t *)v481;
          }
          else if (v248 == v477)
          {
            v250 = (uint64_t *)&v480;
          }
          else
          {
            if (v248 != v453)
            {
              v249 = v447;
              v246((uint64_t)v521, v1);
              goto LABEL_122;
            }
            v250 = &v478;
          }
          v249 = (NSString *)(id)*(v250 - 32);
        }
LABEL_122:
        v261 = (void *)objc_opt_self(UIFont);
        v246(v526, v1);
        v262 = objc_msgSend(v261, "nt_preferredFontForCondensedTextStyle:contentSizeCategory:", 2, v249);
        *(double *)&v263 = 45.0;
LABEL_127:
        v265 = *(double *)&v263;
        v266 = v262;

        objc_msgSend(v266, "nt_scaledValueForValue:", 1.0);
        v268 = v267;

        v176 = v268 * v265;
        v183 = v574;
        v202 = v573;
        goto LABEL_128;
      }
      if (v233 == v580 || v233 == v575)
      {
        v237 = v493;
        v226(v493, v228, v114);
        v238 = v229(v237, v114);
        if (v238 == v183)
          goto LABEL_52;
        if (v238 == v202 || v238 == v580 || v238 == v575)
        {
          v239 = *(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 104);
          v239(v514, v589, v1);
        }
        else
        {
          if (v238 != v564)
          {
            v438 = (uint64_t)v586;
            v439 = &v493;
            goto LABEL_517;
          }
LABEL_52:
          v239 = *(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 104);
          v239(v514, v585, v1);
        }
        v251 = v494;
        v226(v494, v228, v114);
        v252 = v229(v251, v114);
        v253 = v576;
        if (v252 != v183)
        {
          v253 = v577;
          if (v252 != v202)
          {
            v253 = v577;
            if (v252 != v580)
            {
              v253 = v577;
              if (v252 != v575)
              {
                v253 = v576;
                if (v252 != v564)
                {
                  v436 = (uint64_t)v586;
                  v437 = (void **)&v494;
                  goto LABEL_516;
                }
              }
            }
          }
        }
        v254 = (uint64_t)v499;
        v239((uint64_t)v499, v253, v1);
        v255 = v513;
        v256 = v514;
        sub_10003DFA0(v514, v254, v513);
        v257 = *(void (**)(uint64_t, uint64_t))(v2 + 8);
        v257(v254, v1);
        v257(v256, v1);
        v258 = v502;
        (*(void (**)(char *, uint64_t, uint64_t))(v2 + 16))(v502, v255, v1);
        v259 = (*(uint64_t (**)(char *, uint64_t))(v2 + 88))(v258, v1);
        if (v259 == v589)
        {
          v249 = v561;
          v228 = v572;
        }
        else
        {
          v228 = v572;
          if (v259 == v584)
          {
            v260 = (uint64_t *)&v566;
          }
          else if (v259 == v585)
          {
            v260 = (uint64_t *)&v556;
          }
          else if (v259 == v565)
          {
            v260 = (uint64_t *)&v524;
          }
          else if (v259 == v562)
          {
            v260 = &v520;
          }
          else if (v259 == v577)
          {
            v260 = &v514;
          }
          else if (v259 == v525)
          {
            v260 = (uint64_t *)&v510;
          }
          else if (v259 == v576)
          {
            v260 = &v485;
          }
          else if (v259 == v489)
          {
            v260 = &v483;
          }
          else if (v259 == v482)
          {
            v260 = (uint64_t *)v481;
          }
          else if (v259 == v477)
          {
            v260 = (uint64_t *)&v480;
          }
          else
          {
            if (v259 != v453)
            {
              v249 = v447;
              v257((uint64_t)v502, v1);
              goto LABEL_126;
            }
            v260 = &v478;
          }
          v249 = (NSString *)(id)*(v260 - 32);
        }
LABEL_126:
        v264 = (void *)objc_opt_self(UIFont);
        v257(v513, v1);
        v262 = objc_msgSend(v264, "nt_preferredFontForCondensedTextStyle:contentSizeCategory:", 2, v249);
        *(double *)&v263 = 72.0;
        goto LABEL_127;
      }
      v176 = v178;
      if (v233 != v564)
      {
        v431 = (uint64_t)v586;
        v432 = &v492;
        goto LABEL_508;
      }
    }
LABEL_128:
    v170 = *(double *)((char *)v586 + *(int *)(v578 + 40));
    v269 = v548;
    v226(v548, v228, v114);
    v270 = v229(v269, v114);
    v271 = v178;
    if (v270 == v183)
      goto LABEL_214;
    if (v270 != v202)
    {
      if (v270 != v580 && v270 != v575)
      {
        v271 = v178;
        if (v270 == v564)
          goto LABEL_214;
        v431 = (uint64_t)v586;
        v432 = (UIContentSizeCategory *)&v497;
LABEL_508:
        sub_10002A83C(v431, (uint64_t)*(v432 - 32), type metadata accessor for LayoutContext);
        v590 = 0;
        v591 = 0xE000000000000000;
        _StringGuts.grow(_:)(43);
        swift_bridgeObjectRelease(v591);
        v590 = 0xD000000000000029;
        v591 = 0x8000000100091030;
        v433 = sub_10001C96C(&qword_1000B99A8, (uint64_t (*)(uint64_t))&type metadata accessor for InternalWidgetFamily, (uint64_t)&protocol conformance descriptor for InternalWidgetFamily);
        v434._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v114, v433);
        v435 = v434._object;
        String.append(_:)(v434);
        swift_bridgeObjectRelease(v435);
        result = (void *)_assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, v590, v591, "NewsTag/LayoutContext.swift", 27, 2, 372, 0);
        goto LABEL_518;
      }
      v275 = v495;
      v226(v495, v228, v114);
      v276 = v229(v275, v114);
      if (v276 != v183)
      {
        if (v276 == v202 || v276 == v580 || v276 == v575)
        {
          v277 = *(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 104);
          v277(v517, v589, v1);
          goto LABEL_151;
        }
        if (v276 != v564)
        {
          v438 = (uint64_t)v586;
          v439 = &v502;
          goto LABEL_517;
        }
      }
      v277 = *(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 104);
      v277(v517, v585, v1);
LABEL_151:
      v289 = v496;
      v226(v496, v228, v114);
      v290 = v229(v289, v114);
      v291 = v576;
      if (v290 != v183)
      {
        v291 = v577;
        if (v290 != v202)
        {
          v291 = v577;
          if (v290 != v580)
          {
            v291 = v577;
            if (v290 != v575)
            {
              v291 = v576;
              if (v290 != v564)
              {
                v436 = (uint64_t)v586;
                v437 = (void **)&v503;
                goto LABEL_516;
              }
            }
          }
        }
      }
      v292 = (uint64_t)v500;
      v277((uint64_t)v500, v291, v1);
      v293 = v516;
      v294 = v517;
      sub_10003DFA0(v517, v292, v516);
      v295 = *(void (**)(uint64_t, uint64_t))(v2 + 8);
      v295(v292, v1);
      v295(v294, v1);
      v296 = v503;
      (*(void (**)(char *, uint64_t, uint64_t))(v2 + 16))(v503, v293, v1);
      v297 = (*(uint64_t (**)(char *, uint64_t))(v2 + 88))(v296, v1);
      if (v297 == v589)
      {
        v287 = v561;
        v228 = v572;
      }
      else
      {
        v228 = v572;
        if (v297 == v584)
        {
          v298 = (uint64_t *)&v566;
        }
        else if (v297 == v585)
        {
          v298 = (uint64_t *)&v556;
        }
        else if (v297 == v565)
        {
          v298 = (uint64_t *)&v524;
        }
        else if (v297 == v562)
        {
          v298 = &v520;
        }
        else if (v297 == v577)
        {
          v298 = &v514;
        }
        else if (v297 == v525)
        {
          v298 = (uint64_t *)&v510;
        }
        else if (v297 == v576)
        {
          v298 = &v485;
        }
        else if (v297 == v489)
        {
          v298 = &v483;
        }
        else if (v297 == v482)
        {
          v298 = (uint64_t *)v481;
        }
        else if (v297 == v477)
        {
          v298 = (uint64_t *)&v480;
        }
        else
        {
          if (v297 != v453)
          {
            v287 = v447;
            v295((uint64_t)v503, v1);
            goto LABEL_212;
          }
          v298 = &v478;
        }
        v287 = (NSString *)(id)*(v298 - 32);
      }
LABEL_212:
      v302 = (void *)objc_opt_self(UIFont);
      v295(v516, v1);
      v300 = objc_msgSend(v302, "nt_preferredFontForCondensedTextStyle:contentSizeCategory:", 2, v287);
      *(double *)&v301 = 72.0;
      goto LABEL_213;
    }
    v272 = v508;
    v226(v508, v228, v114);
    v273 = v229(v272, v114);
    if (v273 != v183)
    {
      if (v273 == v202 || v273 == v580 || v273 == v575)
      {
        v274 = *(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 104);
        v274(v529, v589, v1);
        goto LABEL_140;
      }
      if (v273 != v564)
      {
        v438 = (uint64_t)v586;
        v439 = &v495;
        goto LABEL_517;
      }
    }
    v274 = *(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 104);
    v274(v529, v585, v1);
LABEL_140:
    v278 = v509;
    v226(v509, v228, v114);
    v279 = v229(v278, v114);
    v280 = v576;
    if (v279 != v183)
    {
      v280 = v577;
      if (v279 != v202)
      {
        v280 = v577;
        if (v279 != v580)
        {
          v280 = v577;
          if (v279 != v575)
          {
            v280 = v576;
            if (v279 != v564)
            {
              v436 = (uint64_t)v586;
              v437 = (void **)&v496;
              goto LABEL_516;
            }
          }
        }
      }
    }
    v281 = (uint64_t)v515;
    v274((uint64_t)v515, v280, v1);
    v282 = v528;
    v283 = v529;
    sub_10003DFA0(v529, v281, v528);
    v284 = *(void (**)(uint64_t, uint64_t))(v2 + 8);
    v284(v281, v1);
    v284(v283, v1);
    v285 = v522;
    (*(void (**)(char *, uint64_t, uint64_t))(v2 + 16))(v522, v282, v1);
    v286 = (*(uint64_t (**)(char *, uint64_t))(v2 + 88))(v285, v1);
    if (v286 == v589)
    {
      v287 = v561;
      v228 = v572;
    }
    else
    {
      v228 = v572;
      if (v286 == v584)
      {
        v288 = (uint64_t *)&v566;
      }
      else if (v286 == v585)
      {
        v288 = (uint64_t *)&v556;
      }
      else if (v286 == v565)
      {
        v288 = (uint64_t *)&v524;
      }
      else if (v286 == v562)
      {
        v288 = &v520;
      }
      else if (v286 == v577)
      {
        v288 = &v514;
      }
      else if (v286 == v525)
      {
        v288 = (uint64_t *)&v510;
      }
      else if (v286 == v576)
      {
        v288 = &v485;
      }
      else if (v286 == v489)
      {
        v288 = &v483;
      }
      else if (v286 == v482)
      {
        v288 = (uint64_t *)v481;
      }
      else if (v286 == v477)
      {
        v288 = (uint64_t *)&v480;
      }
      else
      {
        if (v286 != v453)
        {
          v287 = v447;
          v284((uint64_t)v522, v1);
          goto LABEL_207;
        }
        v288 = &v478;
      }
      v287 = (NSString *)(id)*(v288 - 32);
    }
LABEL_207:
    v299 = (void *)objc_opt_self(UIFont);
    v284(v528, v1);
    v300 = objc_msgSend(v299, "nt_preferredFontForCondensedTextStyle:contentSizeCategory:", 2, v287);
    *(double *)&v301 = 45.0;
LABEL_213:
    v303 = *(double *)&v301;
    v304 = v300;

    objc_msgSend(v304, "nt_scaledValueForValue:", 1.0);
    v306 = v305;

    v271 = v306 * v303;
    v183 = v574;
    v202 = v573;
LABEL_214:
    v307 = v549;
    v226(v549, v228, v114);
    v308 = v229(v307, v114);
    if (v308 == v183)
    {
      v421 = (uint64_t)v586;
      v422 = (UIContentSizeCategory *)&v498;
      goto LABEL_503;
    }
    v172 = 9.0;
    if (v308 != v202)
    {
      v172 = 12.0;
      if (v308 != v580 && v308 != v575)
      {
        v172 = 2.0;
        if (v308 != v564)
        {
          v426 = (uint64_t)v586;
          v427 = &v499;
          goto LABEL_507;
        }
      }
    }
    v309 = v550;
    v226(v550, v228, v114);
    v310 = v229(v309, v114);
    if (v310 == v183)
    {
      v421 = (uint64_t)v586;
      v422 = (UIContentSizeCategory *)&v500;
      goto LABEL_503;
    }
    v311 = 4.5;
    if (v310 != v202)
    {
      v311 = 6.0;
      if (v310 != v580 && v310 != v575)
      {
        v311 = 1.0;
        if (v310 != v564)
          break;
      }
    }
    v567 = v271;
    v312 = v551;
    v226(v551, v228, v114);
    v313 = v229(v312, v114);
    v314 = v178;
    if (v313 != v183)
    {
      if (v313 == v202)
      {
        v315 = v510;
        v226(v510, v228, v114);
        v316 = v229(v315, v114);
        if (v316 == v183)
          goto LABEL_227;
        if (v316 == v202 || v316 == v580 || v316 == v575)
        {
          v317 = *(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 104);
          v317(v531, v589, v1);
LABEL_236:
          v321 = v511;
          v226(v511, v228, v114);
          v322 = v229(v321, v114);
          v323 = v576;
          if (v322 == v183
            || (v323 = v577, v322 == v202)
            || (v323 = v577, v322 == v580)
            || (v323 = v577, v322 == v575)
            || (v323 = v576, v322 == v564))
          {
            v324 = (uint64_t)v518;
            v317((uint64_t)v518, v323, v1);
            v325 = v530;
            v326 = v531;
            sub_10003DFA0(v531, v324, v530);
            v327 = *(void (**)(uint64_t, uint64_t))(v2 + 8);
            v327(v324, v1);
            v327(v326, v1);
            v328 = v523;
            (*(void (**)(char *, uint64_t, uint64_t))(v2 + 16))(v523, v325, v1);
            v329 = (*(uint64_t (**)(char *, uint64_t))(v2 + 88))(v328, v1);
            if (v329 == v589)
            {
              v330 = v561;
              v228 = v572;
            }
            else
            {
              v228 = v572;
              if (v329 == v584)
              {
                v331 = (uint64_t *)&v566;
              }
              else if (v329 == v585)
              {
                v331 = (uint64_t *)&v556;
              }
              else if (v329 == v565)
              {
                v331 = (uint64_t *)&v524;
              }
              else if (v329 == v562)
              {
                v331 = &v520;
              }
              else if (v329 == v577)
              {
                v331 = &v514;
              }
              else if (v329 == v525)
              {
                v331 = (uint64_t *)&v510;
              }
              else if (v329 == v576)
              {
                v331 = &v485;
              }
              else if (v329 == v489)
              {
                v331 = &v483;
              }
              else if (v329 == v482)
              {
                v331 = (uint64_t *)v481;
              }
              else if (v329 == v477)
              {
                v331 = (uint64_t *)&v480;
              }
              else
              {
                if (v329 != v453)
                {
                  v330 = v447;
                  v327((uint64_t)v523, v1);
                  goto LABEL_303;
                }
                v331 = &v478;
              }
              v330 = (NSString *)(id)*(v331 - 32);
            }
LABEL_303:
            v342 = (void *)objc_opt_self(UIFont);
            v327(v530, v1);
            v343 = objc_msgSend(v342, "nt_preferredFontForCondensedTextStyle:contentSizeCategory:", 2, v330);
            *(double *)&v344 = 45.0;
LABEL_309:
            v346 = *(double *)&v344;
            v347 = v343;

            objc_msgSend(v347, "nt_scaledValueForValue:", 1.0);
            v349 = v348;

            v314 = v349 * v346;
            v183 = v574;
            v202 = v573;
            goto LABEL_310;
          }
          v436 = (uint64_t)v586;
          v437 = &v505;
LABEL_516:
          sub_10002A83C(v436, (uint64_t)*(v437 - 32), type metadata accessor for LayoutContext);
          v590 = 0;
          v591 = 0xE000000000000000;
          _StringGuts.grow(_:)(49);
          swift_bridgeObjectRelease(v591);
          v590 = 0xD00000000000002FLL;
          v591 = 0x8000000100090FD0;
          v440 = sub_10001C96C(&qword_1000B99A8, (uint64_t (*)(uint64_t))&type metadata accessor for InternalWidgetFamily, (uint64_t)&protocol conformance descriptor for InternalWidgetFamily);
          v441._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v114, v440);
          v442 = v441._object;
          String.append(_:)(v441);
          swift_bridgeObjectRelease(v442);
          result = (void *)_assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, v590, v591, "NewsTag/LayoutContext.swift", 27, 2, 163, 0);
          goto LABEL_518;
        }
        if (v316 == v564)
        {
LABEL_227:
          v317 = *(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 104);
          v317(v531, v585, v1);
          goto LABEL_236;
        }
        v438 = (uint64_t)v586;
        v439 = &v504;
LABEL_517:
        sub_10002A83C(v438, (uint64_t)*(v439 - 32), type metadata accessor for LayoutContext);
        v590 = 0;
        v591 = 0xE000000000000000;
        _StringGuts.grow(_:)(49);
        swift_bridgeObjectRelease(v591);
        v590 = 0xD00000000000002FLL;
        v591 = 0x8000000100091000;
        v443 = sub_10001C96C(&qword_1000B99A8, (uint64_t (*)(uint64_t))&type metadata accessor for InternalWidgetFamily, (uint64_t)&protocol conformance descriptor for InternalWidgetFamily);
        v444._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v114, v443);
        v445 = v444._object;
        String.append(_:)(v444);
        swift_bridgeObjectRelease(v445);
        result = (void *)_assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, v590, v591, "NewsTag/LayoutContext.swift", 27, 2, 150, 0);
        goto LABEL_518;
      }
      if (v313 == v580 || v313 == v575)
      {
        v318 = v497;
        v226(v497, v228, v114);
        v319 = v229(v318, v114);
        if (v319 == v183)
          goto LABEL_233;
        if (v319 == v202 || v319 == v580 || v319 == v575)
        {
          v320 = *(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 104);
          v320(v520, v589, v1);
        }
        else
        {
          if (v319 != v564)
          {
            v438 = (uint64_t)v586;
            v439 = &v509;
            goto LABEL_517;
          }
LABEL_233:
          v320 = *(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 104);
          v320(v520, v585, v1);
        }
        v332 = v498;
        v226(v498, v228, v114);
        v333 = v229(v332, v114);
        v334 = v576;
        if (v333 != v183)
        {
          v334 = v577;
          if (v333 != v202)
          {
            v334 = v577;
            if (v333 != v580)
            {
              v334 = v577;
              if (v333 != v575)
              {
                v334 = v576;
                if (v333 != v564)
                {
                  v436 = (uint64_t)v586;
                  v437 = (void **)&v484;
                  goto LABEL_516;
                }
              }
            }
          }
        }
        v335 = (uint64_t)v501;
        v320((uint64_t)v501, v334, v1);
        v336 = v519;
        v337 = v520;
        sub_10003DFA0(v520, v335, v519);
        v338 = *(void (**)(uint64_t, uint64_t))(v2 + 8);
        v338(v335, v1);
        v338(v337, v1);
        v339 = v504;
        (*(void (**)(char *, uint64_t, uint64_t))(v2 + 16))(v504, v336, v1);
        v340 = (*(uint64_t (**)(char *, uint64_t))(v2 + 88))(v339, v1);
        if (v340 == v589)
        {
          v330 = v561;
          v228 = v572;
        }
        else
        {
          v228 = v572;
          if (v340 == v584)
          {
            v341 = (uint64_t *)&v566;
          }
          else if (v340 == v585)
          {
            v341 = (uint64_t *)&v556;
          }
          else if (v340 == v565)
          {
            v341 = (uint64_t *)&v524;
          }
          else if (v340 == v562)
          {
            v341 = &v520;
          }
          else if (v340 == v577)
          {
            v341 = &v514;
          }
          else if (v340 == v525)
          {
            v341 = (uint64_t *)&v510;
          }
          else if (v340 == v576)
          {
            v341 = &v485;
          }
          else if (v340 == v489)
          {
            v341 = &v483;
          }
          else if (v340 == v482)
          {
            v341 = (uint64_t *)v481;
          }
          else if (v340 == v477)
          {
            v341 = (uint64_t *)&v480;
          }
          else
          {
            if (v340 != v453)
            {
              v330 = v447;
              v338((uint64_t)v504, v1);
              goto LABEL_308;
            }
            v341 = &v478;
          }
          v330 = (NSString *)(id)*(v341 - 32);
        }
LABEL_308:
        v345 = (void *)objc_opt_self(UIFont);
        v338(v519, v1);
        v343 = objc_msgSend(v345, "nt_preferredFontForCondensedTextStyle:contentSizeCategory:", 2, v330);
        *(double *)&v344 = 72.0;
        goto LABEL_309;
      }
      v314 = v178;
      if (v313 != v564)
      {
        v431 = (uint64_t)v586;
        v432 = (UIContentSizeCategory *)&v506;
        goto LABEL_508;
      }
    }
LABEL_310:
    v350 = v552;
    v226(v552, v228, v114);
    v351 = v229(v350, v114);
    if (v351 != v183)
    {
      if (v351 == v202 || v351 == v580 || v351 == v575)
      {
        v352 = *(void (**)(char *, uint64_t, uint64_t))(v2 + 104);
        v352(v583, v589, v1);
        goto LABEL_314;
      }
      if (v351 != v564)
      {
        v438 = (uint64_t)v586;
        v439 = &v507;
        goto LABEL_517;
      }
    }
    v352 = *(void (**)(char *, uint64_t, uint64_t))(v2 + 104);
    v352(v583, v585, v1);
LABEL_314:
    v353 = v553;
    v226(v553, v228, v114);
    v354 = v229(v353, v114);
    v355 = v576;
    if (v354 != v183)
    {
      v355 = v577;
      if (v354 != v202)
      {
        v355 = v577;
        if (v354 != v580)
        {
          v355 = v577;
          if (v354 != v575)
          {
            v355 = v576;
            if (v354 != v564)
            {
              v436 = (uint64_t)v586;
              v437 = (void **)&v508;
              goto LABEL_516;
            }
          }
        }
      }
    }
    v352(v579, v355, v1);
    v356 = *(void (**)(char *, char *, uint64_t))(v2 + 16);
    v357 = v556;
    v566 = (char *)v586 + *(int *)(v578 + 32);
    v587 = v356;
    ((void (*)(char *))v356)(v556);
    v588 = *(uint64_t (**)(char *, uint64_t))(v2 + 88);
    v358 = v588(v357, v1);
    v359 = v358;
    v361 = v358 == v589 || v358 == v584;
    v563 = v361;
    v362 = v358 == v585 || v361;
    v363 = 1;
    v560 = v362;
    v364 = 1;
    v365 = 1;
    v366 = 1;
    v367 = 1;
    v368 = 1;
    v369 = 1;
    v370 = 1;
    if ((v362 & 1) == 0 && v358 != v565)
    {
      if (v358 == v562)
        goto LABEL_345;
      if (v358 == v577)
        goto LABEL_344;
      if (v358 == v525)
        goto LABEL_343;
      if (v358 == v576)
        goto LABEL_342;
      if (v358 == v489)
        goto LABEL_341;
      if (v358 == v482)
        goto LABEL_340;
      if (v358 == v477)
        goto LABEL_339;
      if (v358 == v453)
      {
        v363 = 0;
LABEL_339:
        v364 = 0;
LABEL_340:
        v365 = 0;
LABEL_341:
        v366 = 0;
LABEL_342:
        v367 = 0;
LABEL_343:
        v368 = 0;
LABEL_344:
        v369 = 0;
LABEL_345:
        v370 = 0;
        goto LABEL_346;
      }
      (*(void (**)(char *, uint64_t))(v543 + 8))(v556, v582);
      v363 = 1;
    }
LABEL_346:
    v536 = v363;
    v371 = v554;
    v372 = v582;
    v587(v554, v583, v582);
    v373 = v588(v371, v372);
    if (v373 == v589)
      goto LABEL_347;
    if (v373 == v584)
    {
      v390 = v583;
      if (v359 == v589)
        goto LABEL_399;
      goto LABEL_347;
    }
    if (v373 == v585)
    {
      v390 = v583;
      v391 = (char *)&v594 + 4;
      goto LABEL_393;
    }
    if (v373 == v565)
    {
      v390 = v583;
      v391 = (char *)&v593 + 4;
      goto LABEL_393;
    }
    if (v373 == v562)
    {
      v390 = v583;
      if ((v370 & 1) != 0)
        goto LABEL_399;
    }
    else if (v373 == v577)
    {
      v390 = v583;
      if ((v369 & 1) != 0)
        goto LABEL_399;
    }
    else if (v373 == v525)
    {
      v390 = v583;
      if ((v368 & 1) != 0)
        goto LABEL_399;
    }
    else if (v373 == v576)
    {
      v390 = v583;
      if ((v367 & 1) != 0)
        goto LABEL_399;
    }
    else if (v373 == v489)
    {
      v390 = v583;
      if ((v366 & 1) != 0)
        goto LABEL_399;
    }
    else if (v373 == v482)
    {
      v390 = v583;
      if ((v365 & 1) != 0)
        goto LABEL_399;
    }
    else if (v373 == v477)
    {
      v390 = v583;
      if ((v364 & 1) != 0)
        goto LABEL_399;
    }
    else
    {
      if (v373 == v453)
      {
        v390 = v583;
        v391 = (char *)&v570 + 4;
LABEL_393:
        if ((*((_DWORD *)v391 - 64) & 1) != 0)
          goto LABEL_399;
        goto LABEL_347;
      }
      (*(void (**)(char *, uint64_t))(v543 + 8))(v554, v582);
      v390 = v583;
      if (v560)
        goto LABEL_399;
    }
LABEL_347:
    v374 = v535;
    v375 = v582;
    v587(v535, v579, v582);
    v376 = v588(v374, v375);
    v377 = v376;
    v379 = v376 == v589 || v376 == v584;
    v563 = v379;
    v380 = v376 == v585 || v379;
    v381 = 1;
    v560 = v380;
    v382 = 1;
    v383 = 1;
    v384 = 1;
    v385 = 1;
    v386 = 1;
    v387 = 1;
    v388 = 1;
    if ((v380 & 1) != 0)
    {
      v389 = v566;
    }
    else
    {
      v389 = v566;
      if (v376 == v565)
        goto LABEL_384;
      if (v376 == v562)
        goto LABEL_373;
      if (v376 == v577)
        goto LABEL_372;
      if (v376 == v525)
        goto LABEL_371;
      if (v376 == v576)
        goto LABEL_370;
      if (v376 == v489)
        goto LABEL_369;
      if (v376 == v482)
        goto LABEL_368;
      if (v376 == v477)
        goto LABEL_367;
      if (v376 == v453)
      {
        v381 = 0;
LABEL_367:
        v382 = 0;
LABEL_368:
        v383 = 0;
LABEL_369:
        v384 = 0;
LABEL_370:
        v385 = 0;
LABEL_371:
        v386 = 0;
LABEL_372:
        v387 = 0;
LABEL_373:
        v388 = 0;
        goto LABEL_384;
      }
      (*(void (**)(char *, uint64_t))(v543 + 8))(v535, v582);
      v389 = v566;
      v381 = 1;
      v382 = 1;
    }
LABEL_384:
    v536 = v382;
    v533 = v381;
    v392 = v534;
    v393 = v582;
    v587(v534, v389, v582);
    v394 = v588(v392, v393);
    if (v394 == v589)
    {
      v390 = v389;
      goto LABEL_399;
    }
    if (v394 == v584)
    {
      v390 = v579;
      if (v377 != v589)
        goto LABEL_398;
      goto LABEL_399;
    }
    if (v394 == v585)
    {
      v390 = v579;
      v395 = (char *)&v594 + 4;
LABEL_397:
      if ((*((_DWORD *)v395 - 64) & 1) != 0)
        goto LABEL_399;
LABEL_398:
      v390 = v566;
      goto LABEL_399;
    }
    if (v394 == v565)
      goto LABEL_396;
    if (v394 == v562)
    {
      v390 = v579;
      if ((v388 & 1) == 0)
        goto LABEL_398;
    }
    else if (v394 == v577)
    {
      v390 = v579;
      if ((v387 & 1) == 0)
        goto LABEL_398;
    }
    else if (v394 == v525)
    {
      v390 = v579;
      if ((v386 & 1) == 0)
        goto LABEL_398;
    }
    else if (v394 == v576)
    {
      v390 = v579;
      if ((v385 & 1) == 0)
        goto LABEL_398;
    }
    else if (v394 == v489)
    {
      v390 = v579;
      if ((v384 & 1) == 0)
        goto LABEL_398;
    }
    else
    {
      if (v394 != v482)
      {
        if (v394 == v477)
        {
          v390 = v579;
          v395 = (char *)&v570 + 4;
        }
        else if (v394 == v453)
        {
          v390 = v579;
          v395 = (char *)&v567 + 4;
        }
        else
        {
          (*(void (**)(char *, uint64_t))(v543 + 8))(v534, v582);
LABEL_396:
          v390 = v579;
          v395 = (char *)&v593 + 4;
        }
        goto LABEL_397;
      }
      v390 = v579;
      if ((v383 & 1) == 0)
        goto LABEL_398;
    }
LABEL_399:
    v27 = v541;
    v1 = v582;
    v396 = v587;
    v587(v541, v390, v582);
    v2 = v543;
    v397 = *(void (**)(char *, uint64_t))(v543 + 8);
    v397(v579, v1);
    v397(v583, v1);
    v398 = v555;
    v396(v555, v27, v1);
    v399 = v588(v398, v1);
    if (v399 == v589)
    {
      v400 = v561;
      v114 = v542;
      v198 = v558;
      v401 = v557;
      v402 = v571;
      v403 = v568;
    }
    else
    {
      v114 = v542;
      v198 = v558;
      v401 = v557;
      v402 = v571;
      v403 = v568;
      if (v399 == v584)
      {
        v404 = (uint64_t *)&v566;
      }
      else if (v399 == v585)
      {
        v404 = (uint64_t *)&v556;
      }
      else if (v399 == v565)
      {
        v404 = (uint64_t *)&v524;
      }
      else if (v399 == v562)
      {
        v404 = &v520;
      }
      else if (v399 == v577)
      {
        v404 = &v514;
      }
      else if (v399 == v525)
      {
        v404 = (uint64_t *)&v510;
      }
      else if (v399 == v576)
      {
        v404 = &v485;
      }
      else if (v399 == v489)
      {
        v404 = &v483;
      }
      else if (v399 == v482)
      {
        v404 = (uint64_t *)v481;
      }
      else if (v399 == v477)
      {
        v404 = (uint64_t *)&v480;
      }
      else
      {
        if (v399 != v453)
        {
          v400 = v447;
          v397(v555, v1);
          goto LABEL_469;
        }
        v404 = &v478;
      }
      v400 = (NSString *)(id)*(v404 - 32);
    }
LABEL_469:
    if (v403)
      v405 = 0.0;
    else
      v405 = 1.0;
    v406 = (v170 * v567 - v172 + (v170 + v170) * v311) / v314;
    v407 = (void *)objc_opt_self(UIFont);
    v397(v27, v1);
    v408 = objc_msgSend(v407, "nt_preferredFontForCondensedTextStyle:contentSizeCategory:", 2, v400);

    objc_msgSend(v408, "nt_scaledValueForValue:", 1.0);
    v410 = v409;

    v411 = v569 + v176 * (v406 * v410);
    sub_10004581C();
    v413 = (v412 + v411) * v405;
    v603.origin.x = 0.0;
    v601.origin.x = v539;
    v601.origin.y = v537;
    v601.size.width = v545;
    v601.size.height = v180;
    v603.origin.y = v221;
    v603.size.width = v540;
    v603.size.height = v413;
    if (CGRectContainsRect(v601, v603))
    {
      v414 = v581;
      v415 = swift_unknownObjectRetain(v581);
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v415);
      v416 = *(_QWORD *)((v592 & 0xFFFFFFFFFFFFF8) + 0x10);
      sub_100050570(v416);
      v417 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v416, v414);
      specialized Array._endMutation()(v417);
    }
    swift_unknownObjectRelease(v581);
    v221 = v221 + v413;
    v222 = v402 + 1;
    v178 = v538;
    v183 = v574;
    v202 = v573;
    if (v570 == v401)
    {
      swift_bridgeObjectRelease(v198);
      v204 = (_QWORD *)v592;
      goto LABEL_22;
    }
  }
  v426 = (uint64_t)v586;
  v427 = &v501;
LABEL_507:
  sub_10002A83C(v426, (uint64_t)*(v427 - 32), type metadata accessor for LayoutContext);
  v590 = 0;
  v591 = 0xE000000000000000;
  _StringGuts.grow(_:)(46);
  swift_bridgeObjectRelease(v591);
  v590 = 0xD00000000000002CLL;
  v591 = 0x8000000100091060;
  v428 = sub_10001C96C(&qword_1000B99A8, (uint64_t (*)(uint64_t))&type metadata accessor for InternalWidgetFamily, (uint64_t)&protocol conformance descriptor for InternalWidgetFamily);
  v429._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v114, v428);
  v430 = v429._object;
  String.append(_:)(v429);
  swift_bridgeObjectRelease(v430);
  result = (void *)_assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, v590, v591, "NewsTag/LayoutContext.swift", 27, 2, 415, 0);
LABEL_518:
  __break(1u);
  return result;
}

_QWORD *sub_100064898(id a1)
{
  uint64_t v1;
  id v3;
  void *v4;
  id v5;
  id v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *result;
  uint64_t v11;
  uint64_t i;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  id v16;
  uint64_t v17;
  _QWORD *v18;

  v3 = *(id *)(v1 + OBJC_IVAR____TtC7NewsTag20TrackableWidgetState_results);
  v4 = sub_100060CD8();
  v5 = objc_msgSend(v3, "sections");
  v6 = objc_msgSend(v5, "array");

  v7 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v6, (char *)&type metadata for Any + 8);
  v8 = sub_1000500E8(v7);
  swift_bridgeObjectRelease(v7);
  swift_bridgeObjectRetain(v4);
  v9 = (uint64_t)sub_100032418((unint64_t)v8, (uint64_t)v4);
  swift_bridgeObjectRelease(v8);

  result = (_QWORD *)swift_bridgeObjectRelease_n(v4, 2);
  v18 = _swiftEmptyArrayStorage;
  if (!((unint64_t)v9 >> 62))
  {
    v11 = *(_QWORD *)((v9 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v11)
      goto LABEL_3;
LABEL_17:
    swift_bridgeObjectRelease(v9);
    return _swiftEmptyArrayStorage;
  }
  if (v9 < 0)
    v17 = v9;
  else
    v17 = v9 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v9);
  v11 = _CocoaArrayWrapper.endIndex.getter(v17);
  result = (_QWORD *)swift_bridgeObjectRelease(v9);
  if (!v11)
    goto LABEL_17;
LABEL_3:
  if (v11 < 1)
  {
    __break(1u);
  }
  else
  {
    for (i = 0; i != v11; ++i)
    {
      if ((v9 & 0xC000000000000001) != 0)
      {
        v15 = (void *)specialized _ArrayBuffer._getElementSlowPath(_:)(i, v9);
      }
      else
      {
        v15 = *(void **)(v9 + 8 * i + 32);
        swift_unknownObjectRetain(v15);
      }
      v16 = objc_msgSend(v15, "itemType", v18);
      if (v16 == a1)
      {
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v16);
        v13 = v18[2];
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v13);
        v14 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v13, v15);
        specialized ContiguousArray._endMutation()(v14);
      }
      else
      {
        swift_unknownObjectRelease(v15);
      }
    }
    swift_bridgeObjectRelease(v9);
    return v18;
  }
  return result;
}

id sub_100064B08@<X0>(id *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  id v5;
  unint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  id result;
  uint64_t v11;

  if (*(_QWORD *)(a2 + 16))
  {
    v5 = *a1;
    v6 = sub_1000316A4((uint64_t)v5);
    if ((v7 & 1) != 0)
    {
      v8 = *(_QWORD *)(*(_QWORD *)(a2 + 56) + 8 * v6);
      swift_bridgeObjectRetain(v8);
    }
    else
    {
      v8 = (uint64_t)_swiftEmptyArrayStorage;
    }

  }
  else
  {
    v8 = (uint64_t)_swiftEmptyArrayStorage;
  }
  if ((unint64_t)v8 >> 62)
  {
    if (v8 < 0)
      v11 = v8;
    else
      v11 = v8 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v8);
    v9 = _CocoaArrayWrapper.endIndex.getter(v11);
    swift_bridgeObjectRelease(v8);
  }
  else
  {
    v9 = *(_QWORD *)((v8 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  swift_bridgeObjectRelease(v8);
  result = objc_msgSend(objc_allocWithZone((Class)NSNumber), "initWithInteger:", v9);
  *a3 = result;
  return result;
}

uint64_t sub_100064F44(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v18;
  uint64_t v19;
  id v20;
  id v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  id v29;
  id v30;
  uint64_t v31;
  void *v32;
  void *v33;
  uint64_t v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  char v44;
  __int128 v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  unint64_t v53;
  uint64_t v54;
  id v55;
  char v56;
  _OWORD v57[2];
  char v58;

  v3 = v1;
  v5 = sub_10001B520((uint64_t *)&unk_1000BBDB0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v51 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_10001D9B4(a1, v9);
  v11 = sub_100066E8C();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for TrackableWidgetState.CodingKeys, &type metadata for TrackableWidgetState.CodingKeys, v11, v9, v10);
  v12 = v3 + OBJC_IVAR____TtC7NewsTag20TrackableWidgetState_contentFetchDate;
  LOBYTE(v57[0]) = 0;
  v13 = type metadata accessor for Date(0);
  v14 = sub_10001C96C(&qword_1000B9898, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
  KeyedEncodingContainer.encode<A>(_:forKey:)(v12, v57, v5, v13, v14);
  if (v2)
    return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  v15 = *(_QWORD *)(v3 + OBJC_IVAR____TtC7NewsTag20TrackableWidgetState_entryID);
  v16 = *(_QWORD *)(v3 + OBJC_IVAR____TtC7NewsTag20TrackableWidgetState_entryID + 8);
  LOBYTE(v57[0]) = 1;
  KeyedEncodingContainer.encode(_:forKey:)(v15, v16, v57, v5);
  v18 = (void *)objc_opt_self(NSKeyedArchiver);
  v19 = *(_QWORD *)(v3 + OBJC_IVAR____TtC7NewsTag20TrackableWidgetState_results);
  *(_QWORD *)&v57[0] = 0;
  v20 = objc_msgSend(v18, "archivedDataWithRootObject:requiringSecureCoding:error:", v19, 1, v57);
  v21 = *(id *)&v57[0];
  if (!v20)
  {
    v26 = v21;
    _convertNSErrorToError(_:)(v21);

    swift_willThrow(v27);
    return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  }
  v55 = v18;
  v22 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v20);
  v24 = v23;

  *(_QWORD *)&v57[0] = v22;
  *((_QWORD *)&v57[0] + 1) = v24;
  v56 = 2;
  v25 = sub_100066F58();
  KeyedEncodingContainer.encode<A>(_:forKey:)(v57, &v56, v5, &type metadata for Data, v25);
  v52 = v25;
  v53 = v24;
  v54 = v22;
  v28 = *(_QWORD *)(v3 + OBJC_IVAR____TtC7NewsTag20TrackableWidgetState_fetchInfo);
  *(_QWORD *)&v57[0] = 0;
  v29 = objc_msgSend(v55, "archivedDataWithRootObject:requiringSecureCoding:error:", v28, 1, v57);
  v30 = *(id *)&v57[0];
  if (!v29)
  {
    v35 = v30;
    _convertNSErrorToError(_:)(v30);

    swift_willThrow(v36);
    sub_10001D9D8(v54, v53);
    return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  }
  v31 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v29);
  v33 = v32;

  *(_QWORD *)&v57[0] = v31;
  *((_QWORD *)&v57[0] + 1) = v33;
  v56 = 3;
  KeyedEncodingContainer.encode<A>(_:forKey:)(v57, &v56, v5, &type metadata for Data, v52);
  v34 = v54;
  v55 = v33;
  v37 = v3 + OBJC_IVAR____TtC7NewsTag20TrackableWidgetState_layoutContext;
  LOBYTE(v57[0]) = 4;
  v38 = type metadata accessor for LayoutContext(0);
  v39 = sub_10001C96C(&qword_1000BBDC8, type metadata accessor for LayoutContext, (uint64_t)&unk_10008BD40);
  KeyedEncodingContainer.encode<A>(_:forKey:)(v37, v57, v5, v38, v39);
  v40 = *(_QWORD *)(v3 + OBJC_IVAR____TtC7NewsTag20TrackableWidgetState_contentID + 8);
  *(_QWORD *)&v57[0] = *(_QWORD *)(v3 + OBJC_IVAR____TtC7NewsTag20TrackableWidgetState_contentID);
  *((_QWORD *)&v57[0] + 1) = v40;
  v56 = 5;
  swift_bridgeObjectRetain(v40);
  v41 = sub_10001B520(&qword_1000BBDD0);
  v42 = sub_100066F9C();
  KeyedEncodingContainer.encode<A>(_:forKey:)(v57, &v56, v5, v41, v42);
  swift_bridgeObjectRelease(v40);
  v43 = *(_QWORD *)(v3 + OBJC_IVAR____TtC7NewsTag20TrackableWidgetState_appearanceType);
  LOBYTE(v57[0]) = 6;
  KeyedEncodingContainer.encode(_:forKey:)(v43, v57, v5);
  v44 = *(_BYTE *)(v3 + OBJC_IVAR____TtC7NewsTag20TrackableWidgetState_visibleRect + 32);
  v45 = *(_OWORD *)(v3 + OBJC_IVAR____TtC7NewsTag20TrackableWidgetState_visibleRect + 16);
  v57[0] = *(_OWORD *)(v3 + OBJC_IVAR____TtC7NewsTag20TrackableWidgetState_visibleRect);
  v57[1] = v45;
  v58 = v44;
  v56 = 7;
  v46 = sub_10001B520((uint64_t *)&unk_1000BA260);
  v47 = sub_100066FF8();
  KeyedEncodingContainer.encode<A>(_:forKey:)(v57, &v56, v5, v46, v47);
  v48 = v53;
  v49 = *(_QWORD *)(v3 + OBJC_IVAR____TtC7NewsTag20TrackableWidgetState_stackKind);
  LOBYTE(v57[0]) = 8;
  KeyedEncodingContainer.encode(_:forKey:)(v49, v57, v5);
  v50 = *(_QWORD *)(v3 + OBJC_IVAR____TtC7NewsTag20TrackableWidgetState_stackLocation);
  LOBYTE(v57[0]) = 9;
  KeyedEncodingContainer.encode(_:forKey:)(v50, v57, v5);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  sub_10001D9D8(v31, (unint64_t)v55);
  return sub_10001D9D8(v34, v48);
}

_QWORD *sub_1000654CC(_QWORD *a1)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  _QWORD *v25;
  uint64_t *v26;
  unint64_t v27;
  __int128 v28;
  uint64_t v29;
  void *v30;
  int v31;
  char *v32;
  _QWORD *v33;
  id v35;
  unint64_t v36;
  uint64_t v37;
  _BYTE *v38;
  __int128 v39;
  uint64_t v40;
  uint64_t v41;
  void *v42;
  char *v43;
  uint64_t v44;
  id v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  _BYTE *v50;
  uint64_t v51;
  uint64_t *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char v58;
  char *v59;
  __int128 v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  unint64_t v66;
  id v67;
  uint64_t v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  _QWORD *v72;
  uint64_t v73;
  char *v74;
  uint64_t v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  _OWORD v79[2];
  char v80;
  char v81;

  v78 = *v1;
  v73 = type metadata accessor for LayoutContext(0);
  __chkstk_darwin(v73);
  v74 = (char *)&v63 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v75 = type metadata accessor for Date(0);
  v4 = *(_QWORD *)(v75 - 8);
  __chkstk_darwin(v75);
  v76 = (char *)&v63 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_10001B520(&qword_1000BBD60);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v63 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = a1[3];
  v10 = a1[4];
  sub_10001D9B4(a1, v11);
  v12 = sub_100066E8C();
  v13 = v77;
  v14 = v10;
  v15 = v1;
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for TrackableWidgetState.CodingKeys, &type metadata for TrackableWidgetState.CodingKeys, v12, v11, v14);
  v16 = v78;
  if (!v13)
  {
    v77 = v7;
    v71 = v4;
    v72 = a1;
    LOBYTE(v79[0]) = 0;
    v17 = sub_10001C96C(&qword_1000BBD70, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
    v18 = v75;
    KeyedDecodingContainer.decode<A>(_:forKey:)(v75, v79, v6, v75, v17);
    v19 = v6;
    v20 = (char *)v1 + OBJC_IVAR____TtC7NewsTag20TrackableWidgetState_contentFetchDate;
    (*(void (**)(uint64_t, char *, uint64_t))(v71 + 32))((uint64_t)v1 + OBJC_IVAR____TtC7NewsTag20TrackableWidgetState_contentFetchDate, v76, v18);
    LOBYTE(v79[0]) = 1;
    v21 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v79, v6);
    v23 = 0x6E776F6E6B6E75;
    if (v22)
      v23 = v21;
    v24 = 0xE700000000000000;
    if (v22)
      v24 = v22;
    v25 = &unk_1000C0000;
    v26 = (_QWORD *)((char *)v1 + OBJC_IVAR____TtC7NewsTag20TrackableWidgetState_entryID);
    *v26 = v23;
    v26[1] = v24;
    v81 = 2;
    v27 = sub_100066ED0();
    KeyedDecodingContainer.decode<A>(_:forKey:)(&type metadata for Data, &v81, v19, &type metadata for Data, v27);
    v76 = (char *)v1;
    v69 = v9;
    v70 = v19;
    v28 = v79[0];
    sub_10002CC78(0, &qword_1000BBD80, NSKeyedUnarchiver_ptr);
    v29 = sub_10002CC78(0, &qword_1000BBD88, NTTodayResults_ptr);
    v30 = (void *)static NSKeyedUnarchiver.unarchivedObject<A>(ofClass:from:)(v29, v28, *((_QWORD *)&v28 + 1), v29);
    if (v30)
    {
      v68 = v28;
      *(_QWORD *)((char *)v1 + OBJC_IVAR____TtC7NewsTag20TrackableWidgetState_results) = v30;
      v81 = 3;
      v35 = v30;
      KeyedDecodingContainer.decode<A>(_:forKey:)(&type metadata for Data, &v81, v70, &type metadata for Data, v27);
      v66 = *((_QWORD *)&v28 + 1);
      v67 = v35;
      v39 = v79[0];
      v40 = sub_10002CC78(0, &qword_1000BBD98, NTPBTodayResultOperationFetchInfo_ptr);
      v41 = static NSKeyedUnarchiver.unarchivedObject<A>(ofClass:from:)(v40, v39, *((_QWORD *)&v39 + 1), v40);
      v42 = (void *)v41;
      v65 = v39;
      v43 = v69;
      if (v41)
      {
        v64 = *((_QWORD *)&v39 + 1);
        *(_QWORD *)((char *)v15 + OBJC_IVAR____TtC7NewsTag20TrackableWidgetState_fetchInfo) = v41;
        LOBYTE(v79[0]) = 4;
        v44 = sub_10001C96C(&qword_1000BBDA0, type metadata accessor for LayoutContext, (uint64_t)&unk_10008BD68);
        v45 = v42;
        v46 = (uint64_t)v74;
        v47 = v70;
        KeyedDecodingContainer.decode<A>(_:forKey:)(v73, v79, v70, v73, v44);
        sub_10002AC74(v46, (uint64_t)&v76[OBJC_IVAR____TtC7NewsTag20TrackableWidgetState_layoutContext], type metadata accessor for LayoutContext);
        LOBYTE(v79[0]) = 5;
        v51 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v79, v47);
        v52 = (uint64_t *)&v76[OBJC_IVAR____TtC7NewsTag20TrackableWidgetState_contentID];
        *v52 = v51;
        v52[1] = v53;
        LOBYTE(v79[0]) = 6;
        v54 = KeyedDecodingContainer.decode(_:forKey:)(v79, v47);
        *(_QWORD *)&v76[OBJC_IVAR____TtC7NewsTag20TrackableWidgetState_appearanceType] = v54;
        type metadata accessor for CGRect(0);
        v56 = v55;
        v81 = 7;
        v57 = sub_10001C96C(&qword_1000BBDA8, (uint64_t (*)(uint64_t))type metadata accessor for CGRect, (uint64_t)&protocol conformance descriptor for CGRect);
        KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v79, v56, &v81, v70, v56, v57);
        v58 = v80;
        v59 = &v76[OBJC_IVAR____TtC7NewsTag20TrackableWidgetState_visibleRect];
        v60 = v79[1];
        *(_OWORD *)v59 = v79[0];
        *((_OWORD *)v59 + 1) = v60;
        v59[32] = v58;
        LOBYTE(v79[0]) = 8;
        v61 = KeyedDecodingContainer.decode(_:forKey:)(v79, v70);
        *(_QWORD *)&v76[OBJC_IVAR____TtC7NewsTag20TrackableWidgetState_stackKind] = v61;
        LOBYTE(v79[0]) = 9;
        v62 = KeyedDecodingContainer.decode(_:forKey:)(v79, v70);
        (*(void (**)(char *, uint64_t))(v77 + 8))(v69, v70);
        sub_10001D9D8(v68, v66);

        sub_10001D9D8(v65, v64);
        v15 = v76;
        *(_QWORD *)&v76[OBJC_IVAR____TtC7NewsTag20TrackableWidgetState_stackLocation] = v62;
        v33 = v72;
        goto LABEL_11;
      }
      v48 = sub_100066F14();
      v49 = swift_allocError(&type metadata for TrackableWidgetState.Errors, v48, 0, 0);
      *v50 = 4;
      swift_willThrow(v49);
      sub_10001D9D8(v68, v66);
      sub_10001D9D8(v65, *((unint64_t *)&v39 + 1));

      (*(void (**)(char *, uint64_t))(v39 + 8))(v43, v70);
      v31 = 1;
      v25 = (_QWORD *)&unk_1000C0000;
    }
    else
    {
      v36 = sub_100066F14();
      v37 = swift_allocError(&type metadata for TrackableWidgetState.Errors, v36, 0, 0);
      *v38 = 3;
      swift_willThrow(v37);
      sub_10001D9D8(v28, *((unint64_t *)&v28 + 1));
      (*(void (**)(char *, uint64_t))(v77 + 8))(v69, v70);
      v31 = 0;
    }
    (*(void (**)(char *, uint64_t))(v71 + 8))(v20, v75);
    v32 = v76;
    swift_bridgeObjectRelease(*(_QWORD *)&v76[v25[240] + 8]);
    if (v31)

    v15 = v76;
    a1 = v72;
    v16 = v78;
  }
  swift_deallocPartialClassInstance(v15, v16, *(unsigned int *)(*v15 + 48), *(unsigned __int16 *)(*v15 + 52));
  v33 = a1;
LABEL_11:
  sub_10001DA60(v33);
  return v15;
}

void sub_100065D9C(_QWORD *a1@<X8>)
{
  uint64_t v2;

  sub_10004ECE8();
  *a1 = v2;
}

uint64_t sub_100065DD4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0 + OBJC_IVAR____TtC7NewsTag20TrackableWidgetState_contentFetchDate;
  v2 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + OBJC_IVAR____TtC7NewsTag20TrackableWidgetState_entryID + 8));

  sub_100046E00(v0 + OBJC_IVAR____TtC7NewsTag20TrackableWidgetState_layoutContext);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + OBJC_IVAR____TtC7NewsTag20TrackableWidgetState_contentID + 8));
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t sub_100065E7C()
{
  return type metadata accessor for TrackableWidgetState(0);
}

uint64_t type metadata accessor for TrackableWidgetState(uint64_t a1)
{
  uint64_t result;

  result = qword_1000BBC18;
  if (!qword_1000BBC18)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for TrackableWidgetState);
  return result;
}

uint64_t sub_100065EC0(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  unint64_t v4;
  _QWORD v5[10];

  result = type metadata accessor for Date(319);
  if (v3 <= 0x3F)
  {
    v5[0] = *(_QWORD *)(result - 8) + 64;
    v5[1] = &unk_10008CA18;
    v5[2] = (char *)&value witness table for Builtin.UnknownObject + 64;
    v5[3] = (char *)&value witness table for Builtin.UnknownObject + 64;
    result = type metadata accessor for LayoutContext(319);
    if (v4 <= 0x3F)
    {
      v5[4] = *(_QWORD *)(result - 8) + 64;
      v5[5] = &unk_10008CA30;
      v5[6] = (char *)&value witness table for Builtin.Int64 + 64;
      v5[7] = &unk_10008CA48;
      v5[8] = (char *)&value witness table for Builtin.Int64 + 64;
      v5[9] = (char *)&value witness table for Builtin.Int64 + 64;
      result = swift_updateClassMetadata2(a1, 256, 10, v5, a1 + 80);
      if (!result)
        return 0;
    }
  }
  return result;
}

_QWORD *sub_100065F84@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  _QWORD *result;

  v6 = swift_allocObject(v2, *(unsigned int *)(v2 + 48), *(unsigned __int16 *)(v2 + 52));
  result = sub_1000654CC(a1);
  if (!v3)
    *a2 = v6;
  return result;
}

uint64_t sub_100065FD8(_QWORD *a1)
{
  return sub_100064F44(a1);
}

void sub_100065FF8(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int64_t v12;
  uint64_t v13;
  int64_t v14;
  Swift::Int v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  int64_t v23;
  _QWORD *v24;
  unint64_t v25;
  int64_t v26;
  char v27;
  unint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  id v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_10001B520(&qword_1000BBD18);
  v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  v8 = v7;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_43;
  v9 = 1 << *(_BYTE *)(v5 + 32);
  v36 = v3;
  v37 = v5 + 64;
  if (v9 < 64)
    v10 = ~(-1 << v9);
  else
    v10 = -1;
  v11 = v10 & *(_QWORD *)(v5 + 64);
  v12 = (unint64_t)(v9 + 63) >> 6;
  v13 = v7 + 64;
  swift_retain(v5);
  v14 = 0;
  while (1)
  {
    if (v11)
    {
      v21 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      v22 = v21 | (v14 << 6);
      goto LABEL_34;
    }
    v23 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return;
    }
    if (v23 >= v12)
      break;
    v24 = (_QWORD *)(v5 + 64);
    v25 = *(_QWORD *)(v37 + 8 * v23);
    ++v14;
    if (!v25)
    {
      v14 = v23 + 1;
      if (v23 + 1 >= v12)
        goto LABEL_36;
      v25 = *(_QWORD *)(v37 + 8 * v14);
      if (!v25)
      {
        v26 = v23 + 2;
        if (v26 >= v12)
        {
LABEL_36:
          swift_release(v5);
          v3 = v36;
          if ((a2 & 1) == 0)
            goto LABEL_43;
          goto LABEL_39;
        }
        v25 = *(_QWORD *)(v37 + 8 * v26);
        if (!v25)
        {
          while (1)
          {
            v14 = v26 + 1;
            if (__OFADD__(v26, 1))
              goto LABEL_45;
            if (v14 >= v12)
              goto LABEL_36;
            v25 = *(_QWORD *)(v37 + 8 * v14);
            ++v26;
            if (v25)
              goto LABEL_33;
          }
        }
        v14 = v26;
      }
    }
LABEL_33:
    v11 = (v25 - 1) & v25;
    v22 = __clz(__rbit64(v25)) + (v14 << 6);
LABEL_34:
    v31 = 8 * v22;
    v32 = *(void **)(*(_QWORD *)(v5 + 48) + v31);
    v33 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + v31);
    if ((a2 & 1) == 0)
    {
      v34 = v32;
      swift_bridgeObjectRetain(v33);
    }
    v15 = NSObject._rawHashValue(seed:)(*(_QWORD *)(v8 + 40));
    v16 = -1 << *(_BYTE *)(v8 + 32);
    v17 = v15 & ~v16;
    v18 = v17 >> 6;
    if (((-1 << v17) & ~*(_QWORD *)(v13 + 8 * (v17 >> 6))) != 0)
    {
      v19 = __clz(__rbit64((-1 << v17) & ~*(_QWORD *)(v13 + 8 * (v17 >> 6)))) | v17 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v27 = 0;
      v28 = (unint64_t)(63 - v16) >> 6;
      do
      {
        if (++v18 == v28 && (v27 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }
        v29 = v18 == v28;
        if (v18 == v28)
          v18 = 0;
        v27 |= v29;
        v30 = *(_QWORD *)(v13 + 8 * v18);
      }
      while (v30 == -1);
      v19 = __clz(__rbit64(~v30)) + (v18 << 6);
    }
    *(_QWORD *)(v13 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v19;
    v20 = 8 * v19;
    *(_QWORD *)(*(_QWORD *)(v8 + 48) + v20) = v32;
    *(_QWORD *)(*(_QWORD *)(v8 + 56) + v20) = v33;
    ++*(_QWORD *)(v8 + 16);
  }
  swift_release(v5);
  v3 = v36;
  v24 = (_QWORD *)(v5 + 64);
  if ((a2 & 1) == 0)
    goto LABEL_43;
LABEL_39:
  v35 = 1 << *(_BYTE *)(v5 + 32);
  if (v35 >= 64)
    bzero(v24, ((unint64_t)(v35 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v24 = -1 << v35;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_43:
  swift_release(v5);
  *v3 = v8;
}

void sub_1000662CC(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  unint64_t v15;
  int64_t v16;
  int64_t v17;
  id v18;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  unint64_t v22;
  int64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;

  v3 = v2;
  v6 = type metadata accessor for ImageStoreKey(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v26 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *v3;
  if (*(_QWORD *)(*v3 + 24) > a1)
    a1 = *(_QWORD *)(*v3 + 24);
  sub_10001B520((uint64_t *)&unk_1000BBD50);
  v11 = static _DictionaryStorage.resize(original:capacity:move:)(v10, a1, a2);
  if (*(_QWORD *)(v10 + 16))
  {
    v27 = v3;
    v12 = 1 << *(_BYTE *)(v10 + 32);
    v13 = (_QWORD *)(v10 + 64);
    v14 = -1;
    if (v12 < 64)
      v14 = ~(-1 << v12);
    v15 = v14 & *(_QWORD *)(v10 + 64);
    v16 = (unint64_t)(v12 + 63) >> 6;
    swift_retain(v10);
    v17 = 0;
    while (1)
    {
      if (v15)
      {
        v19 = __clz(__rbit64(v15));
        v15 &= v15 - 1;
        v20 = v19 | (v17 << 6);
      }
      else
      {
        v21 = v17 + 1;
        if (__OFADD__(v17, 1))
        {
          __break(1u);
LABEL_34:
          __break(1u);
          return;
        }
        if (v21 >= v16)
          goto LABEL_25;
        v22 = v13[v21];
        ++v17;
        if (!v22)
        {
          v17 = v21 + 1;
          if (v21 + 1 >= v16)
            goto LABEL_25;
          v22 = v13[v17];
          if (!v22)
          {
            v23 = v21 + 2;
            if (v23 >= v16)
            {
LABEL_25:
              swift_release(v10);
              if ((a2 & 1) == 0)
              {
                swift_release(v10);
                v3 = v27;
                goto LABEL_32;
              }
              v25 = 1 << *(_BYTE *)(v10 + 32);
              if (v25 >= 64)
                bzero((void *)(v10 + 64), ((unint64_t)(v25 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              else
                *v13 = -1 << v25;
              v3 = v27;
              *(_QWORD *)(v10 + 16) = 0;
              break;
            }
            v22 = v13[v23];
            if (!v22)
            {
              while (1)
              {
                v17 = v23 + 1;
                if (__OFADD__(v23, 1))
                  goto LABEL_34;
                if (v17 >= v16)
                  goto LABEL_25;
                v22 = v13[v17];
                ++v23;
                if (v22)
                  goto LABEL_22;
              }
            }
            v17 = v23;
          }
        }
LABEL_22:
        v15 = (v22 - 1) & v22;
        v20 = __clz(__rbit64(v22)) + (v17 << 6);
      }
      v24 = *(_QWORD *)(v10 + 48) + *(_QWORD *)(v7 + 72) * v20;
      if ((a2 & 1) != 0)
      {
        sub_10002AC74(v24, (uint64_t)v9, type metadata accessor for ImageStoreKey);
        v18 = *(id *)(*(_QWORD *)(v10 + 56) + 8 * v20);
      }
      else
      {
        sub_10002A83C(v24, (uint64_t)v9, type metadata accessor for ImageStoreKey);
        v18 = *(id *)(*(_QWORD *)(v10 + 56) + 8 * v20);
      }
      sub_1000667E0((uint64_t)v9, (uint64_t)v18, v11);
    }
  }
  swift_release(v10);
LABEL_32:
  *v3 = v11;
}

id sub_100066524(uint64_t a1, void *a2, char a3)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v7;
  char v8;
  unint64_t v9;
  uint64_t v10;
  _BOOL8 v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  id result;
  unint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;
  uint64_t v24;

  v4 = v3;
  v7 = *v3;
  v9 = sub_1000316A4((uint64_t)a2);
  v10 = *(_QWORD *)(v7 + 16);
  v11 = (v8 & 1) == 0;
  v12 = v10 + v11;
  if (__OFADD__(v10, v11))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v13 = v8;
  v14 = *(_QWORD *)(v7 + 24);
  if (v14 >= v12 && (a3 & 1) != 0)
    goto LABEL_7;
  if (v14 >= v12 && (a3 & 1) == 0)
  {
    sub_100066A58();
LABEL_7:
    v15 = (_QWORD *)*v4;
    if ((v13 & 1) != 0)
    {
LABEL_8:
      v16 = v15[7];
      result = (id)swift_bridgeObjectRelease(*(_QWORD *)(v16 + 8 * v9));
      *(_QWORD *)(v16 + 8 * v9) = a1;
      return result;
    }
LABEL_11:
    v15[(v9 >> 6) + 8] |= 1 << v9;
    v20 = 8 * v9;
    *(_QWORD *)(v15[6] + v20) = a2;
    *(_QWORD *)(v15[7] + v20) = a1;
    v21 = v15[2];
    v22 = __OFADD__(v21, 1);
    v23 = v21 + 1;
    if (!v22)
    {
      v15[2] = v23;
      return a2;
    }
    goto LABEL_14;
  }
  sub_100065FF8(v12, a3 & 1);
  v18 = sub_1000316A4((uint64_t)a2);
  if ((v13 & 1) == (v19 & 1))
  {
    v9 = v18;
    v15 = (_QWORD *)*v4;
    if ((v13 & 1) != 0)
      goto LABEL_8;
    goto LABEL_11;
  }
LABEL_15:
  v24 = sub_10002CC78(0, (unint64_t *)&qword_1000BBD00, NTSection_ptr);
  result = (id)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v24);
  __break(1u);
  return result;
}

void sub_100066684(uint64_t a1, uint64_t a2, char a3)
{
  _QWORD *v3;
  _QWORD **v4;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  _QWORD *v11;
  char v12;
  unint64_t v13;
  uint64_t v14;
  _BOOL8 v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  uint64_t v23;

  v4 = (_QWORD **)v3;
  v8 = type metadata accessor for ImageStoreKey(0);
  __chkstk_darwin(v8);
  v10 = (char *)&v23 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = (_QWORD *)*v3;
  v13 = sub_1000314A4(a2);
  v14 = v11[2];
  v15 = (v12 & 1) == 0;
  v16 = v14 + v15;
  if (__OFADD__(v14, v15))
  {
    __break(1u);
    goto LABEL_14;
  }
  v17 = v12;
  v18 = v11[3];
  if (v18 >= v16 && (a3 & 1) != 0)
  {
LABEL_7:
    v19 = *v4;
    if ((v17 & 1) != 0)
    {
LABEL_8:
      v20 = v19[7];

      *(_QWORD *)(v20 + 8 * v13) = a1;
      return;
    }
    goto LABEL_11;
  }
  if (v18 >= v16 && (a3 & 1) == 0)
  {
    sub_100066C00();
    goto LABEL_7;
  }
  sub_1000662CC(v16, a3 & 1);
  v21 = sub_1000314A4(a2);
  if ((v17 & 1) != (v22 & 1))
  {
LABEL_14:
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v8);
    __break(1u);
    return;
  }
  v13 = v21;
  v19 = *v4;
  if ((v17 & 1) != 0)
    goto LABEL_8;
LABEL_11:
  sub_10002A83C(a2, (uint64_t)v10, type metadata accessor for ImageStoreKey);
  sub_1000669C0(v13, (uint64_t)v10, a1, v19);
}

uint64_t sub_1000667E0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  Swift::Int v15;
  unint64_t v16;
  uint64_t result;
  _QWORD v19[9];

  v6 = type metadata accessor for URL(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v19[-1] - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for ImageStoreKey(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = (char *)&v19[-1] - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  Hasher.init(_seed:)(v19, *(_QWORD *)(a3 + 40));
  sub_10002A83C(a1, (uint64_t)v13, type metadata accessor for ImageStoreKey);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v13, 1, v6) == 1)
  {
    Hasher._combine(_:)(1uLL);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v9, v13, v6);
    Hasher._combine(_:)(0);
    v14 = sub_10001C96C((unint64_t *)&qword_1000BA288, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t)&protocol conformance descriptor for URL);
    dispatch thunk of Hashable.hash(into:)(v19, v6, v14);
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  }
  v15 = Hasher._finalize()();
  v16 = _HashTable.nextHole(atOrAfter:)(v15 & ~(-1 << *(_BYTE *)(a3 + 32)), a3 + 64, ~(-1 << *(_BYTE *)(a3 + 32)));
  *(_QWORD *)(a3 + 64 + ((v16 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v16;
  result = sub_10002AC74(a1, *(_QWORD *)(a3 + 48) + *(_QWORD *)(v11 + 72) * v16, type metadata accessor for ImageStoreKey);
  *(_QWORD *)(*(_QWORD *)(a3 + 56) + 8 * v16) = a2;
  ++*(_QWORD *)(a3 + 16);
  return result;
}

uint64_t sub_1000669C0(unint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;

  a4[(a1 >> 6) + 8] |= 1 << a1;
  v8 = a4[6];
  v9 = type metadata accessor for ImageStoreKey(0);
  result = sub_10002AC74(a2, v8 + *(_QWORD *)(*(_QWORD *)(v9 - 8) + 72) * a1, type metadata accessor for ImageStoreKey);
  *(_QWORD *)(a4[7] + 8 * a1) = a3;
  v11 = a4[2];
  v12 = __OFADD__(v11, 1);
  v13 = v11 + 1;
  if (v12)
    __break(1u);
  else
    a4[2] = v13;
  return result;
}

void sub_100066A58()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  id v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;

  v1 = v0;
  sub_10001B520(&qword_1000BBD18);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    swift_release(v2);
    *v1 = v4;
    return;
  }
  v5 = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)v5 >= v2 + 64 + 8 * v7)
    memmove(v5, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v20 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v20 >= v13)
      goto LABEL_26;
    v21 = *(_QWORD *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      v9 = v20 + 1;
      if (v20 + 1 >= v13)
        goto LABEL_26;
      v21 = *(_QWORD *)(v6 + 8 * v9);
      if (!v21)
        break;
    }
LABEL_25:
    v12 = (v21 - 1) & v21;
    v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    v16 = 8 * v15;
    v17 = *(void **)(*(_QWORD *)(v2 + 48) + v16);
    v18 = *(_QWORD *)(*(_QWORD *)(v2 + 56) + v16);
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + v16) = v17;
    *(_QWORD *)(*(_QWORD *)(v4 + 56) + v16) = v18;
    v19 = v17;
    swift_bridgeObjectRetain(v18);
  }
  v22 = v20 + 2;
  if (v22 >= v13)
    goto LABEL_26;
  v21 = *(_QWORD *)(v6 + 8 * v22);
  if (v21)
  {
    v9 = v22;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v22 + 1;
    if (__OFADD__(v22, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v21 = *(_QWORD *)(v6 + 8 * v9);
    ++v22;
    if (v21)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
}

void sub_100066C00()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  unint64_t v9;
  int64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  void *v20;
  id v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;

  v1 = v0;
  v2 = type metadata accessor for ImageStoreKey(0);
  v28 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v4 = (char *)&v25 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001B520((uint64_t *)&unk_1000BBD50);
  v5 = *v0;
  v6 = static _DictionaryStorage.copy(original:)(*v0);
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
  {
    swift_release(v5);
LABEL_28:
    *v1 = v7;
    return;
  }
  v26 = v1;
  v8 = (void *)(v6 + 64);
  v9 = (unint64_t)((1 << *(_BYTE *)(v7 + 32)) + 63) >> 6;
  if (v7 != v5 || (unint64_t)v8 >= v5 + 64 + 8 * v9)
    memmove(v8, (const void *)(v5 + 64), 8 * v9);
  v27 = v5 + 64;
  v11 = 0;
  *(_QWORD *)(v7 + 16) = *(_QWORD *)(v5 + 16);
  v12 = 1 << *(_BYTE *)(v5 + 32);
  v13 = -1;
  if (v12 < 64)
    v13 = ~(-1 << v12);
  v14 = v13 & *(_QWORD *)(v5 + 64);
  v15 = (unint64_t)(v12 + 63) >> 6;
  while (1)
  {
    if (v14)
    {
      v16 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      v17 = v16 | (v11 << 6);
      goto LABEL_12;
    }
    v22 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v22 >= v15)
      goto LABEL_26;
    v23 = *(_QWORD *)(v27 + 8 * v22);
    ++v11;
    if (!v23)
    {
      v11 = v22 + 1;
      if (v22 + 1 >= v15)
        goto LABEL_26;
      v23 = *(_QWORD *)(v27 + 8 * v11);
      if (!v23)
        break;
    }
LABEL_25:
    v14 = (v23 - 1) & v23;
    v17 = __clz(__rbit64(v23)) + (v11 << 6);
LABEL_12:
    v18 = *(_QWORD *)(v28 + 72) * v17;
    sub_10002A83C(*(_QWORD *)(v5 + 48) + v18, (uint64_t)v4, type metadata accessor for ImageStoreKey);
    v19 = 8 * v17;
    v20 = *(void **)(*(_QWORD *)(v5 + 56) + v19);
    sub_10002AC74((uint64_t)v4, *(_QWORD *)(v7 + 48) + v18, type metadata accessor for ImageStoreKey);
    *(_QWORD *)(*(_QWORD *)(v7 + 56) + v19) = v20;
    v21 = v20;
  }
  v24 = v22 + 2;
  if (v24 >= v15)
  {
LABEL_26:
    swift_release(v5);
    v1 = v26;
    goto LABEL_28;
  }
  v23 = *(_QWORD *)(v27 + 8 * v24);
  if (v23)
  {
    v11 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    v11 = v24 + 1;
    if (__OFADD__(v24, 1))
      break;
    if (v11 >= v15)
      goto LABEL_26;
    v23 = *(_QWORD *)(v27 + 8 * v11);
    ++v24;
    if (v23)
      goto LABEL_25;
  }
LABEL_30:
  __break(1u);
}

unint64_t sub_100066E34()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000BBD10;
  if (!qword_1000BBD10)
  {
    v1 = sub_10002CC78(255, (unint64_t *)&qword_1000BBD00, NTSection_ptr);
    result = swift_getWitnessTable(&protocol conformance descriptor for NSObject, v1);
    atomic_store(result, (unint64_t *)&qword_1000BBD10);
  }
  return result;
}

unint64_t sub_100066E8C()
{
  unint64_t result;

  result = qword_1000BBD68;
  if (!qword_1000BBD68)
  {
    result = swift_getWitnessTable(&unk_10008CC64, &type metadata for TrackableWidgetState.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000BBD68);
  }
  return result;
}

unint64_t sub_100066ED0()
{
  unint64_t result;

  result = qword_1000BBD78;
  if (!qword_1000BBD78)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Data, &type metadata for Data);
    atomic_store(result, (unint64_t *)&qword_1000BBD78);
  }
  return result;
}

unint64_t sub_100066F14()
{
  unint64_t result;

  result = qword_1000BBD90;
  if (!qword_1000BBD90)
  {
    result = swift_getWitnessTable(&unk_10008CC24, &type metadata for TrackableWidgetState.Errors);
    atomic_store(result, (unint64_t *)&qword_1000BBD90);
  }
  return result;
}

unint64_t sub_100066F58()
{
  unint64_t result;

  result = qword_1000BBDC0;
  if (!qword_1000BBDC0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Data, &type metadata for Data);
    atomic_store(result, (unint64_t *)&qword_1000BBDC0);
  }
  return result;
}

unint64_t sub_100066F9C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000BBDD8;
  if (!qword_1000BBDD8)
  {
    v1 = sub_10001B560(&qword_1000BBDD0);
    result = swift_getWitnessTable(&protocol conformance descriptor for <A> A?, v1);
    atomic_store(result, (unint64_t *)&qword_1000BBDD8);
  }
  return result;
}

unint64_t sub_100066FF8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000BBDE8;
  if (!qword_1000BBDE8)
  {
    v1 = sub_10001B560((uint64_t *)&unk_1000BA260);
    sub_10001C96C(&qword_1000BBDF0, (uint64_t (*)(uint64_t))type metadata accessor for CGRect, (uint64_t)&protocol conformance descriptor for CGRect);
    result = swift_getWitnessTable(&protocol conformance descriptor for <A> A?, v1);
    atomic_store(result, (unint64_t *)&qword_1000BBDE8);
  }
  return result;
}

id sub_100067074@<X0>(id *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  return sub_100064B08(a1, *(_QWORD *)(v2 + 16), a2);
}

id sub_10006708C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  id v9;
  uint64_t v10;

  if ((unint64_t)a1 >> 62)
    goto LABEL_13;
  v4 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain(a1);
  while (v4)
  {
    v5 = 4;
    while (1)
    {
      v6 = v5 - 4;
      if ((a1 & 0xC000000000000001) == 0)
        break;
      v7 = (void *)specialized _ArrayBuffer._getElementSlowPath(_:)(v5 - 4, a1);
      v8 = v5 - 3;
      if (__OFADD__(v6, 1))
        goto LABEL_12;
LABEL_9:
      v9 = objc_msgSend(v7, "isEqual:", a2);
      swift_unknownObjectRelease(v7);
      if ((v9 & 1) == 0)
      {
        ++v5;
        if (v8 != v4)
          continue;
      }
      goto LABEL_18;
    }
    v7 = *(void **)(a1 + 8 * v5);
    swift_unknownObjectRetain(v7);
    v8 = v5 - 3;
    if (!__OFADD__(v6, 1))
      goto LABEL_9;
LABEL_12:
    __break(1u);
LABEL_13:
    if (a1 < 0)
      v10 = a1;
    else
      v10 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v4 = _CocoaArrayWrapper.endIndex.getter(v10);
  }
  v9 = 0;
LABEL_18:
  swift_bridgeObjectRelease(a1);
  return v9;
}

void *sub_10006719C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  id v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned __int8 v11;
  uint64_t v13;

  if ((unint64_t)a1 >> 62)
    goto LABEL_14;
  v4 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain(a1);
  for (; v4; v4 = _CocoaArrayWrapper.endIndex.getter(v13))
  {
    v5 = 4;
    while (1)
    {
      v6 = (a1 & 0xC000000000000001) != 0
         ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v5 - 4, a1)
         : *(id *)(a1 + 8 * v5);
      v7 = v6;
      v8 = v5 - 3;
      if (__OFADD__(v5 - 4, 1))
        break;
      sub_10004ECE8();
      v10 = v9;
      swift_unknownObjectRetain(a2);
      v11 = sub_10006708C(v10, a2);
      swift_bridgeObjectRelease(v10);
      swift_unknownObjectRelease(a2);
      if ((v11 & 1) != 0)
      {
        swift_bridgeObjectRelease(a1);
        return v7;
      }

      ++v5;
      if (v8 == v4)
        goto LABEL_10;
    }
    __break(1u);
LABEL_14:
    if (a1 < 0)
      v13 = a1;
    else
      v13 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
  }
LABEL_10:
  swift_bridgeObjectRelease(a1);
  return 0;
}

unint64_t sub_1000672D0(Swift::String string)
{
  void *object;
  Swift::String v2;
  unint64_t v3;

  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1000AB030, v2);
  swift_bridgeObjectRelease(object);
  if (v3 >= 0xA)
    return 10;
  else
    return v3;
}

uint64_t sub_100067318(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  unsigned __int8 v7;
  uint64_t v8;
  uint64_t v9;

  if ((unint64_t)a1 >> 62)
    goto LABEL_12;
  v4 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  v5 = 0;
  if (v4)
  {
    while (1)
    {
      if ((a1 & 0xC000000000000001) != 0)
      {
        v6 = (void *)specialized _ArrayBuffer._getElementSlowPath(_:)(v5, a1);
      }
      else
      {
        v6 = *(void **)(a1 + 8 * v5 + 32);
        swift_unknownObjectRetain(v6);
      }
      v7 = objc_msgSend(v6, "isEqual:", a2);
      swift_unknownObjectRelease(v6);
      if ((v7 & 1) != 0)
        break;
      v8 = v5 + 1;
      if (__OFADD__(v5, 1))
      {
        __break(1u);
LABEL_12:
        if (a1 < 0)
          v9 = a1;
        else
          v9 = a1 & 0xFFFFFFFFFFFFFF8;
        swift_bridgeObjectRetain(a1);
        v4 = _CocoaArrayWrapper.endIndex.getter(v9);
        swift_bridgeObjectRelease(a1);
        v5 = 0;
        if (!v4)
          return v5;
      }
      else
      {
        ++v5;
        if (v8 == v4)
          return 0;
      }
    }
  }
  return v5;
}

uint64_t sub_100067424(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  id v6;
  void *v7;
  unsigned __int8 v8;
  uint64_t v9;
  uint64_t v10;

  if ((unint64_t)a1 >> 62)
    goto LABEL_12;
  v4 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  v5 = 0;
  if (v4)
  {
    while (1)
    {
      v6 = (a1 & 0xC000000000000001) != 0
         ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v5, a1)
         : *(id *)(a1 + 8 * v5 + 32);
      v7 = v6;
      v8 = objc_msgSend(v6, "isEqual:", a2);

      if ((v8 & 1) != 0)
        break;
      v9 = v5 + 1;
      if (__OFADD__(v5, 1))
      {
        __break(1u);
LABEL_12:
        if (a1 < 0)
          v10 = a1;
        else
          v10 = a1 & 0xFFFFFFFFFFFFFF8;
        swift_bridgeObjectRetain(a1);
        v4 = _CocoaArrayWrapper.endIndex.getter(v10);
        swift_bridgeObjectRelease(a1);
        v5 = 0;
        if (!v4)
          return v5;
      }
      else
      {
        ++v5;
        if (v9 == v4)
          return 0;
      }
    }
  }
  return v5;
}

_QWORD *sub_100067524(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  id v6;
  void *v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  unint64_t v13;
  char v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;
  void *v24;
  _QWORD *v25;

  v25 = _swiftEmptyArrayStorage;
  if ((unint64_t)a1 >> 62)
    goto LABEL_26;
  v3 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (v3)
  {
    while (1)
    {
      v4 = 0;
      v5 = a2 & 0xFFFFFFFFFFFFFF8;
      if (a2 < 0)
        v5 = a2;
      v21 = v5;
      while ((a1 & 0xC000000000000001) != 0)
      {
        v6 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v4, a1);
LABEL_12:
        v7 = v6;
        v8 = v4 + 1;
        if (__OFADD__(v4, 1))
          goto LABEL_25;
        if ((a2 & 0xC000000000000001) != 0)
        {
          v9 = __CocoaDictionary.lookup(_:)(v6, v21);
          if (!v9)
            goto LABEL_6;
          v10 = v9;
          v23 = v9;
          v11 = sub_10002CC78(0, &qword_1000BC590, NSNumber_ptr);
          swift_unknownObjectRetain(v10);
          swift_dynamicCast(&v24, &v23, (char *)&type metadata for Swift.AnyObject + 8, v11, 7);
          v12 = v24;
          swift_unknownObjectRelease(v10);

          if (!v12)
            goto LABEL_7;
        }
        else
        {
          if (!*(_QWORD *)(a2 + 16))
            goto LABEL_7;
          v13 = sub_1000316A4((uint64_t)v6);
          if ((v14 & 1) == 0)
          {
LABEL_6:

            goto LABEL_7;
          }
          v12 = *(id *)(*(_QWORD *)(a2 + 56) + 8 * v13);

          if (!v12)
            goto LABEL_7;
        }
        v15 = objc_msgSend(v12, "integerValue");

        if ((uint64_t)v15 > 0)
        {
          specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v16);
          v17 = v25[2];
          specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v17);
          v18 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v17, v7);
          specialized ContiguousArray._endMutation()(v18);
          goto LABEL_8;
        }
LABEL_7:

LABEL_8:
        ++v4;
        if (v8 == v3)
          return v25;
      }
      if (v4 < *(_QWORD *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10))
        break;
      __break(1u);
LABEL_25:
      __break(1u);
LABEL_26:
      if (a1 < 0)
        v20 = a1;
      else
        v20 = a1 & 0xFFFFFFFFFFFFFF8;
      v3 = _CocoaArrayWrapper.endIndex.getter(v20);
      if (!v3)
        return _swiftEmptyArrayStorage;
    }
    v6 = *(id *)(a1 + 8 * v4 + 32);
    goto LABEL_12;
  }
  return _swiftEmptyArrayStorage;
}

uint64_t getEnumTagSinglePayload for TrackableWidgetState.Errors(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFC)
    goto LABEL_17;
  if (a2 + 4 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 4) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 4;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 4;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 4;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 5;
  v8 = v6 - 5;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for TrackableWidgetState.Errors(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 4 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 4) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFC)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFB)
    return ((uint64_t (*)(void))((char *)&loc_100067834 + 4 * byte_10008C9E9[v4]))();
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_100067868 + 4 * byte_10008C9E4[v4]))();
}

uint64_t sub_100067868(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100067870(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100067878);
  return result;
}

uint64_t sub_100067884(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10006788CLL);
  *(_BYTE *)result = a2 + 4;
  return result;
}

uint64_t sub_100067890(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100067898(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for TrackableWidgetState.Errors()
{
  return &type metadata for TrackableWidgetState.Errors;
}

uint64_t getEnumTagSinglePayload for TrackableWidgetState.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xF7)
    goto LABEL_17;
  if (a2 + 9 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 9) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 9;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 9;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 9;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 0xA;
  v8 = v6 - 10;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for TrackableWidgetState.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 9 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 9) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF7)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF6)
    return ((uint64_t (*)(void))((char *)&loc_100067990 + 4 * byte_10008C9F3[v4]))();
  *a1 = a2 + 9;
  return ((uint64_t (*)(void))((char *)sub_1000679C4 + 4 * byte_10008C9EE[v4]))();
}

uint64_t sub_1000679C4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000679CC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1000679D4);
  return result;
}

uint64_t sub_1000679E0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1000679E8);
  *(_BYTE *)result = a2 + 9;
  return result;
}

uint64_t sub_1000679EC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000679F4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for TrackableWidgetState.CodingKeys()
{
  return &type metadata for TrackableWidgetState.CodingKeys;
}

unint64_t sub_100067A14()
{
  unint64_t result;

  result = qword_1000BBE08;
  if (!qword_1000BBE08)
  {
    result = swift_getWitnessTable(&unk_10008CB94, &type metadata for TrackableWidgetState.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000BBE08);
  }
  return result;
}

unint64_t sub_100067A5C()
{
  unint64_t result;

  result = qword_1000BBE10;
  if (!qword_1000BBE10)
  {
    result = swift_getWitnessTable(&unk_10008CBFC, &type metadata for TrackableWidgetState.Errors);
    atomic_store(result, (unint64_t *)&qword_1000BBE10);
  }
  return result;
}

unint64_t sub_100067AA4()
{
  unint64_t result;

  result = qword_1000BBE18;
  if (!qword_1000BBE18)
  {
    result = swift_getWitnessTable(&unk_10008CACC, &type metadata for TrackableWidgetState.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000BBE18);
  }
  return result;
}

unint64_t sub_100067AEC()
{
  unint64_t result;

  result = qword_1000BBE20;
  if (!qword_1000BBE20)
  {
    result = swift_getWitnessTable(&unk_10008CAF4, &type metadata for TrackableWidgetState.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000BBE20);
  }
  return result;
}

id sub_100067B30@<X0>(id *a1@<X0>, _QWORD *a2@<X8>)
{
  return sub_100067074(a1, a2);
}

uint64_t sub_100067B44(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  objc_class *v8;
  id v9;
  objc_class *v10;
  char *v11;
  uint64_t v12;
  uint64_t *v13;
  id v14;
  uint64_t v15;
  _QWORD v17[5];
  objc_super v18;

  v4 = v3;
  v8 = (objc_class *)type metadata accessor for WidgetPersonalizationConfigurationManager();
  v9 = objc_allocWithZone(v8);
  v10 = (objc_class *)type metadata accessor for NewsAppConfigurationManager(0);
  objc_allocWithZone(v10);
  swift_unknownObjectRetain(a2);
  v11 = (char *)v9;
  v12 = NewsAppConfigurationManager.init(appConfigurationManager:transform:)(a2, sub_100049FDC, 0);
  v13 = (uint64_t *)&v11[OBJC_IVAR____TtC7NewsTag41WidgetPersonalizationConfigurationManager_configurationManager];
  v13[3] = (uint64_t)v10;
  v13[4] = (uint64_t)&protocol witness table for NewsAppConfigurationManager;
  *v13 = v12;

  v18.receiver = v11;
  v18.super_class = v8;
  v14 = objc_msgSendSuper2(&v18, "init");
  type metadata accessor for XavierScoringService(0);
  v17[3] = v8;
  v17[4] = sub_100067D44();
  v17[0] = v14;
  v15 = *(_QWORD *)(v4 + OBJC_IVAR____TtC7NewsTag23FeedPersonalizerFactory_translationProvider);
  swift_unknownObjectRetain(v15);
  swift_unknownObjectRetain(a3);
  return XavierScoringService.__allocating_init(aggregateStore:configurationManager:translationProvider:todayPrivateData:)(a1, v17, v15, a3);
}

uint64_t type metadata accessor for FeedPersonalizerFactory()
{
  return objc_opt_self(_TtC7NewsTag23FeedPersonalizerFactory);
}

unint64_t sub_100067D44()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000BBE60;
  if (!qword_1000BBE60)
  {
    v1 = type metadata accessor for WidgetPersonalizationConfigurationManager();
    result = swift_getWitnessTable(&protocol conformance descriptor for WidgetPersonalizationConfigurationManager, v1);
    atomic_store(result, (unint64_t *)&qword_1000BBE60);
  }
  return result;
}

id sub_100067D8C(void *a1, void *a2, void *a3)
{
  void *v5;

  if (objc_msgSend(a1, "userInterfaceStyle") == (id)2)
    v5 = a3;
  else
    v5 = a2;
  return v5;
}

void sub_100067DC0()
{
  id v0;
  id v1;
  id v2;

  v0 = objc_msgSend((id)objc_opt_self(UIColor), "secondarySystemBackgroundColor");
  v1 = objc_msgSend((id)objc_opt_self(UITraitCollection), "traitCollectionWithUserInterfaceStyle:", 2);
  v2 = objc_msgSend(v0, "resolvedColorWithTraitCollection:", v1);

  qword_1000C07C8 = (uint64_t)v2;
}

UIImage *sub_100067E5C(CGFloat a1, CGFloat a2)
{
  void *v2;
  UIImage *v3;
  BOOL v6;
  id v8;
  CGRect v9;

  if (a1 == 0.0)
    return 0;
  v3 = 0;
  v6 = (*(_QWORD *)&a1 & 0xFFFFFFFFFFFFFLL) != 0 && (~*(_QWORD *)&a1 & 0x7FF0000000000000) == 0;
  if (!v6 && a2 != 0.0)
  {
    if ((~*(_QWORD *)&a2 & 0x7FF0000000000000) != 0 || (*(_QWORD *)&a2 & 0xFFFFFFFFFFFFFLL) == 0)
    {
      UIGraphicsBeginImageContextWithOptions(*(CGSize *)&a1, 0, 0.0);
      objc_msgSend(v2, "set");
      v8 = objc_msgSend((id)objc_opt_self(UIBezierPath), "ts_bezierPathWithPillRect:cornerRadius:", 0.0, 0.0, a1, a2, 2.0);
      objc_msgSend(v8, "addClip");

      v9.origin.x = 0.0;
      v9.origin.y = 0.0;
      v9.size.width = a1;
      v9.size.height = a2;
      UIRectFill(v9);
      v3 = UIGraphicsGetImageFromCurrentImageContext();
      UIGraphicsEndImageContext();
      return v3;
    }
    return 0;
  }
  return v3;
}

uint64_t sub_100067F68(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  _QWORD *v9;

  v8 = swift_allocObject(&unk_1000ACF90, 32, 7);
  *(_QWORD *)(v8 + 16) = a1;
  *(_QWORD *)(v8 + 24) = a2;
  v9 = (_QWORD *)swift_allocObject(&unk_1000ACFB8, 48, 7);
  v9[2] = sub_100068308;
  v9[3] = v8;
  v9[4] = a3;
  v9[5] = a4;
  swift_retain(a2);
  swift_retain(a4);
  dispatch thunk of WidgetCenter.getCurrentConfigurations(_:)(sub_100068364, v9);
  return swift_release(v9);
}

uint64_t sub_10006800C(uint64_t a1, char a2, void (*a3)(_QWORD), uint64_t a4, void (*a5)(uint64_t))
{
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  int64_t v17;
  _QWORD *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  uint64_t ObjectType;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v35;
  void (*v36)(_QWORD);
  uint64_t v37;
  uint64_t (*v38)(char *, unint64_t, uint64_t);
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;

  v10 = type metadata accessor for WidgetInfo(0);
  v40 = *(_QWORD *)(v10 - 8);
  v41 = v10;
  __chkstk_darwin(v10);
  v12 = (char *)&v35 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for NewsWidgetInfo(0);
  v14 = *(_QWORD *)(v13 - 8);
  __chkstk_darwin(v13);
  v16 = (uint64_t *)((char *)&v35 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
  if ((a2 & 1) != 0)
  {
    swift_errorRetain(a1);
    a5(a1);
    return sub_1000683B0(a1, 1);
  }
  v37 = a4;
  v17 = *(_QWORD *)(a1 + 16);
  v18 = &_swiftEmptyArrayStorage;
  if (!v17)
    goto LABEL_22;
  v36 = a3;
  v42 = &_swiftEmptyArrayStorage;
  sub_100021258(0, v17, 0);
  v19 = a1 + ((*(unsigned __int8 *)(v40 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v40 + 80));
  v20 = *(_QWORD *)(v40 + 72);
  v38 = *(uint64_t (**)(char *, unint64_t, uint64_t))(v40 + 16);
  v39 = v20;
  do
  {
    v21 = v38(v12, v19, v41);
    v22 = WidgetInfo.configuration.getter(v21);
    if (!v22)
    {
      v27 = 0;
      goto LABEL_14;
    }
    v23 = (void *)v22;
    ObjectType = swift_getObjectType(v22);
    v25 = swift_conformsToProtocol2(ObjectType, &protocol descriptor for NewsWidgetIntent);
    if (v25)
      v26 = v25;
    else
      v26 = 0;
    if (v25)
      v27 = v23;
    else
      v27 = 0;
    if (!v27)
    {

LABEL_14:
      v26 = 0;
    }
    v28 = WidgetInfo.internalFamily.getter();
    v29 = WidgetInfo.kind.getter(v28);
    *v16 = v27;
    v16[1] = v26;
    v30 = (_QWORD *)((char *)v16 + *(int *)(v13 + 24));
    *v30 = v29;
    v30[1] = v31;
    (*(void (**)(char *, uint64_t))(v40 + 8))(v12, v41);
    v18 = v42;
    if ((swift_isUniquelyReferenced_nonNull_native(v42) & 1) == 0)
    {
      sub_100021258(0, v18[2] + 1, 1);
      v18 = v42;
    }
    v33 = v18[2];
    v32 = v18[3];
    if (v33 >= v32 >> 1)
    {
      sub_100021258(v32 > 1, v33 + 1, 1);
      v18 = v42;
    }
    v18[2] = v33 + 1;
    sub_1000683BC((uint64_t)v16, (uint64_t)v18+ ((*(unsigned __int8 *)(v14 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80))+ *(_QWORD *)(v14 + 72) * v33);
    v19 += v39;
    --v17;
  }
  while (v17);
  a3 = v36;
LABEL_22:
  a3(v18);
  return swift_bridgeObjectRelease(v18);
}

uint64_t sub_100068294()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *v0;
  v2 = sub_10001B520(&qword_1000BBE70);
  swift_allocObject(v2, *(unsigned int *)(v2 + 48), *(unsigned __int16 *)(v2 + 52));
  return Promise.init(resolver:)(sub_1000682DC, v1);
}

uint64_t sub_1000682DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100067F68(a1, a2, a3, a4);
}

uint64_t sub_1000682E4()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100068308(uint64_t a1)
{
  uint64_t v1;
  uint64_t (*v2)(uint64_t *);
  uint64_t v4;

  v2 = *(uint64_t (**)(uint64_t *))(v1 + 16);
  v4 = a1;
  return v2(&v4);
}

uint64_t sub_100068338()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  swift_release(*(_QWORD *)(v0 + 40));
  return swift_deallocObject(v0, 48, 7);
}

uint64_t sub_100068364(uint64_t a1, char a2)
{
  uint64_t v2;

  return sub_10006800C(a1, a2 & 1, *(void (**)(_QWORD))(v2 + 16), *(_QWORD *)(v2 + 24), *(void (**)(uint64_t))(v2 + 32));
}

uint64_t type metadata accessor for NewsWidgetInfo(uint64_t a1)
{
  uint64_t result;

  result = qword_1000BBED0;
  if (!qword_1000BBED0)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for NewsWidgetInfo);
  return result;
}

uint64_t sub_1000683B0(uint64_t a1, char a2)
{
  if ((a2 & 1) != 0)
    return swift_errorRelease();
  else
    return swift_bridgeObjectRelease(a1);
}

uint64_t sub_1000683BC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for NewsWidgetInfo(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

char *sub_100068400(char *a1, char **a2, uint64_t a3)
{
  char *v3;
  int v4;
  char *v5;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(char *, uint64_t, uint64_t);
  char *v14;
  uint64_t v15;
  char *v16;
  _QWORD *v17;
  uint64_t v18;

  v3 = a1;
  v4 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  v5 = *a2;
  if ((v4 & 0x20000) != 0)
  {
    *(_QWORD *)a1 = v5;
    v3 = &v5[(v4 + 16) & ~(unint64_t)v4];
    swift_retain(v5);
  }
  else
  {
    v8 = a2[1];
    *(_QWORD *)a1 = v5;
    *((_QWORD *)a1 + 1) = v8;
    v9 = *(int *)(a3 + 20);
    v10 = &a1[v9];
    v11 = (uint64_t)a2 + v9;
    v12 = type metadata accessor for InternalWidgetFamily(0);
    v13 = *(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 16);
    v14 = v5;
    v13(v10, v11, v12);
    v15 = *(int *)(a3 + 24);
    v16 = &v3[v15];
    v17 = (char **)((char *)a2 + v15);
    v18 = v17[1];
    *(_QWORD *)v16 = *v17;
    *((_QWORD *)v16 + 1) = v18;
    swift_bridgeObjectRetain(v18);
  }
  return v3;
}

uint64_t sub_1000684C4(id *a1, uint64_t a2)
{
  char *v4;
  uint64_t v5;

  v4 = (char *)a1 + *(int *)(a2 + 20);
  v5 = type metadata accessor for InternalWidgetFamily(0);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
  return swift_bridgeObjectRelease(*(id *)((char *)a1 + *(int *)(a2 + 24) + 8));
}

__int128 *sub_100068524(__int128 *a1, __int128 *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  void (*v10)(char *, char *, uint64_t);
  id v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  __int128 v17;

  v17 = *a2;
  *a1 = *a2;
  v6 = *(int *)(a3 + 20);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for InternalWidgetFamily(0);
  v10 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 16);
  v11 = (id)v17;
  v10(v7, v8, v9);
  v12 = *(int *)(a3 + 24);
  v13 = (_QWORD *)((char *)a1 + v12);
  v14 = (_QWORD *)((char *)a2 + v12);
  v15 = v14[1];
  *v13 = *v14;
  v13[1] = v15;
  swift_bridgeObjectRetain(v15);
  return a1;
}

uint64_t sub_1000685CC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v6;
  uint64_t v7;
  void *v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;

  v6 = *(void **)a2;
  v7 = *(_QWORD *)(a2 + 8);
  v8 = *(void **)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v9 = v6;

  *(_QWORD *)(a1 + 8) = v7;
  v10 = *(int *)(a3 + 20);
  v11 = a1 + v10;
  v12 = a2 + v10;
  v13 = type metadata accessor for InternalWidgetFamily(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 24))(v11, v12, v13);
  v14 = *(int *)(a3 + 24);
  v15 = (_QWORD *)(a1 + v14);
  v16 = (_QWORD *)(a2 + v14);
  *v15 = *v16;
  v17 = v16[1];
  v18 = v15[1];
  v15[1] = v17;
  swift_bridgeObjectRetain(v17);
  swift_bridgeObjectRelease(v18);
  return a1;
}

_OWORD *sub_100068674(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;

  *a1 = *a2;
  v6 = *(int *)(a3 + 20);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for InternalWidgetFamily(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v7, v8, v9);
  *(_OWORD *)((char *)a1 + *(int *)(a3 + 24)) = *(_OWORD *)((char *)a2 + *(int *)(a3 + 24));
  return a1;
}

uint64_t sub_1000686EC(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v6 = a2[1];
  v7 = *(void **)a1;
  *(_QWORD *)a1 = *a2;

  *(_QWORD *)(a1 + 8) = v6;
  v8 = *(int *)(a3 + 20);
  v9 = a1 + v8;
  v10 = (char *)a2 + v8;
  v11 = type metadata accessor for InternalWidgetFamily(0);
  (*(void (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 40))(v9, v10, v11);
  v12 = *(int *)(a3 + 24);
  v13 = (_QWORD *)(a1 + v12);
  v14 = (_QWORD *)((char *)a2 + v12);
  v16 = *v14;
  v15 = v14[1];
  v17 = v13[1];
  *v13 = v16;
  v13[1] = v15;
  swift_bridgeObjectRelease(v17);
  return a1;
}

uint64_t sub_100068780(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10006878C);
}

uint64_t sub_10006878C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;

  v6 = type metadata accessor for InternalWidgetFamily(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1 + *(int *)(a3 + 20), a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 24) + 8);
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  return (v9 + 1);
}

uint64_t sub_100068810(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10006881C);
}

uint64_t sub_10006881C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = type metadata accessor for InternalWidgetFamily(0);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1 + *(int *)(a4 + 20), a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 24) + 8) = (a2 - 1);
  return result;
}

uint64_t sub_10006889C(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[3];

  v4[0] = &unk_10008CD18;
  result = type metadata accessor for InternalWidgetFamily(319);
  if (v3 <= 0x3F)
  {
    v4[1] = *(_QWORD *)(result - 8) + 64;
    v4[2] = &unk_10008CD30;
    swift_initStructMetadata(a1, 256, 3, v4, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t sub_10006891C(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  unint64_t v4;
  _QWORD v5[9];

  v5[0] = &unk_10008CD88;
  v5[1] = (char *)&value witness table for Builtin.Int64 + 64;
  v5[2] = &unk_10008CDA0;
  result = type metadata accessor for TaskContext(319);
  if (v3 <= 0x3F)
  {
    v5[3] = *(_QWORD *)(result - 8) + 64;
    v5[4] = (char *)&value witness table for Builtin.UnknownObject + 64;
    v5[5] = (char *)&value witness table for Builtin.UnknownObject + 64;
    v5[6] = (char *)&value witness table for Builtin.NativeObject + 64;
    v5[7] = (char *)&value witness table for Builtin.BridgeObject + 64;
    result = type metadata accessor for Optional(319, *(_QWORD *)(a1 + 80));
    if (v4 <= 0x3F)
    {
      v5[8] = *(_QWORD *)(result - 8) + 64;
      return swift_initClassMetadata2(a1, 0, 9, v5, a1 + 104);
    }
  }
  return result;
}

uint64_t sub_1000689F4(uint64_t a1, uint64_t a2, double a3)
{
  uint64_t v3;
  uint64_t v7;

  v7 = swift_allocObject(v3, *(unsigned int *)(v3 + 48), *(unsigned __int16 *)(v3 + 52));
  sub_100068A50(a1, a2, a3);
  return v7;
}

double *sub_100068A50(uint64_t a1, uint64_t a2, double a3)
{
  double *v3;
  double *v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v26;

  v4 = v3;
  v8 = *(_QWORD *)v3;
  v9 = type metadata accessor for UnfairLock.Options(0);
  __chkstk_darwin(v9);
  v11 = (char *)&v26 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for UUID(0);
  v13 = *(_QWORD *)(v12 - 8);
  v14 = __chkstk_darwin(v12);
  v16 = (char *)&v26 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = UUID.init()(v14);
  v18 = UUID.uuidString.getter(v17);
  v20 = v19;
  (*(void (**)(char *, uint64_t))(v13 + 8))(v16, v12);
  *((_QWORD *)v4 + 2) = v18;
  *((_QWORD *)v4 + 3) = v20;
  v21 = qword_1000BBF18;
  *(_QWORD *)((char *)v4 + v21) = dispatch_group_create();
  v22 = qword_1000BBF20;
  *(_QWORD *)((char *)v4 + v22) = dispatch_group_create();
  v23 = qword_1000BBF28;
  static UnfairLock.Options.dataSynchronization.getter();
  v24 = type metadata accessor for UnfairLock(0);
  swift_allocObject(v24, *(unsigned int *)(v24 + 48), *(unsigned __int16 *)(v24 + 52));
  *(_QWORD *)((char *)v4 + v23) = UnfairLock.init(options:)(v11);
  *(_QWORD *)((char *)v4 + qword_1000BBF30) = _swiftEmptyArrayStorage;
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(v8 + 80) - 8) + 56))((char *)v4 + *(_QWORD *)(*(_QWORD *)v4 + 168), 1, 1);
  v4[4] = a3 + -1.0;
  *((_QWORD *)v4 + 5) = a1;
  sub_10006B76C(a2, (uint64_t)v4 + qword_1000BBF10);
  return v4;
}

void sub_100068BF0(uint64_t a1, void (*a2)(_QWORD, _QWORD))
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  NSObject *v19;
  os_log_type_t v20;
  uint64_t v21;
  uint8_t *v22;
  void **v23;
  void **v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  void **v30;
  uint8_t *v31;
  NSObject *v32;
  NSObject *v33;
  double v34;
  void *v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  void *v40;
  _QWORD *v41;
  id v42;
  __n128 v43;
  id v44;
  uint64_t v45;
  _QWORD *v46;
  void *v47;
  uint64_t v48;
  char *v49;
  unint64_t v50;
  uint64_t v51;
  unint64_t v52;
  char *v53;
  uint64_t v54;
  __n128 v55;
  uint8_t *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  void (*v60)(_QWORD, _QWORD);
  char *v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  NSObject *v67;
  char *v68;
  uint64_t v69;
  _QWORD *v70;
  void **aBlock;
  uint64_t v72;
  uint64_t (*v73)(uint64_t);
  void *v74;
  void *v75;
  _QWORD *v76;

  v3 = v2;
  v6 = type metadata accessor for DispatchWorkItemFlags(0);
  v65 = *(_QWORD *)(v6 - 8);
  v66 = v6;
  __chkstk_darwin(v6);
  v64 = (char *)&v56 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for DispatchQoS(0);
  v62 = *(_QWORD *)(v8 - 8);
  v63 = v8;
  __chkstk_darwin(v8);
  v61 = (char *)&v56 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for DispatchTimeInterval(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = (uint8_t **)((char *)&v56 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  v69 = type metadata accessor for DispatchTime(0);
  v14 = *(_QWORD *)(v69 - 8);
  v15 = __chkstk_darwin(v69);
  v67 = ((char *)&v56 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v15);
  v68 = (char *)&v56 - v17;
  sub_10002CC78(0, (unint64_t *)&qword_1000BBB00, OS_os_log_ptr);
  v18 = swift_retain_n(v2, 2);
  v19 = static OS_os_log.default.getter(v18);
  v20 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v19, v20))
  {
    v21 = swift_slowAlloc(12, -1);
    v58 = v10;
    v22 = (uint8_t *)v21;
    v23 = (void **)swift_slowAlloc(32, -1);
    v60 = a2;
    v24 = v23;
    aBlock = v23;
    v59 = a1;
    *(_DWORD *)v22 = 136315138;
    v56 = v22 + 4;
    v25 = v14;
    v57 = v11;
    v27 = *(_QWORD *)(v3 + 16);
    v26 = *(_QWORD *)(v3 + 24);
    swift_bridgeObjectRetain(v26);
    v28 = v27;
    v14 = v25;
    v70 = (_QWORD *)sub_10006AE74(v28, v26, (uint64_t *)&aBlock);
    a1 = v59;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v70, &aBlock, v56, v22 + 12);
    swift_release_n(v3, 2);
    v29 = v26;
    v11 = v57;
    swift_bridgeObjectRelease(v29);
    _os_log_impl((void *)&_mh_execute_header, v19, v20, "task manager %s will start task", v22, 0xCu);
    swift_arrayDestroy(v24, 1, (char *)&type metadata for Any + 8);
    v30 = v24;
    a2 = v60;
    swift_slowDealloc(v30, -1, -1);
    v31 = v22;
    v10 = v58;
    swift_slowDealloc(v31, -1, -1);
  }
  else
  {
    swift_release_n(v3, 2);
  }

  dispatch_group_enter(*(dispatch_group_t *)(v3 + qword_1000BBF18));
  v32 = *(NSObject **)(v3 + qword_1000BBF20);
  dispatch_group_enter(v32);
  v33 = v67;
  static DispatchTime.now()();
  v34 = *(double *)(v3 + 32);
  if ((~*(_QWORD *)&v34 & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v34 <= -9.22337204e18)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  if (v34 < 9.22337204e18)
  {
    *v13 = (uint64_t)v34;
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(v11 + 104))(v13, enum case for DispatchTimeInterval.seconds(_:), v10);
    + infix(_:_:)(v33, v13);
    (*(void (**)(_QWORD *, uint64_t))(v11 + 8))(v13, v10);
    v60 = *(void (**)(_QWORD, _QWORD))(v14 + 8);
    v60(v33, v69);
    sub_10002CC78(0, &qword_1000BC370, OS_dispatch_queue_ptr);
    v67 = v32;
    v35 = (void *)static OS_dispatch_queue.main.getter();
    v36 = (_QWORD *)swift_allocObject(&unk_1000AD0C0, 40, 7);
    v36[2] = v3;
    v36[3] = a1;
    v36[4] = a2;
    swift_retain(v3);
    v37 = swift_retain(a2);
    v38 = DispatchTime.rawValue.getter(v37);
    v39 = (_QWORD *)swift_allocObject(&unk_1000AD0E8, 48, 7);
    v39[2] = v3;
    v39[3] = v35;
    v39[4] = sub_10006B598;
    v39[5] = v36;
    v75 = sub_10006B5D8;
    v76 = v39;
    aBlock = _NSConcreteStackBlock;
    v72 = 1107296256;
    v73 = sub_100031160;
    v74 = &unk_1000AD100;
    v40 = _Block_copy(&aBlock);
    v41 = v76;
    swift_retain(v3);
    v42 = v35;
    swift_retain(v36);
    v43 = swift_release(v41);
    v44 = (id)FCHandleOperationTimeout(v38, v42, v40, v43);
    _Block_release(v40);
    v45 = swift_allocObject(&unk_1000AD138, 24, 7);
    *(_QWORD *)(v45 + 16) = v44;
    v46 = (_QWORD *)swift_allocObject(&unk_1000AD160, 56, 7);
    v46[2] = v3;
    v46[3] = sub_10006B620;
    v46[4] = v45;
    v46[5] = sub_10006B598;
    v46[6] = v36;
    v75 = sub_10006B670;
    v76 = v46;
    aBlock = _NSConcreteStackBlock;
    v72 = 1107296256;
    v73 = sub_100031160;
    v74 = &unk_1000AD178;
    v47 = _Block_copy(&aBlock);
    swift_retain(v3);
    swift_retain(v36);
    v48 = swift_retain(v45);
    v49 = v61;
    static DispatchQoS.unspecified.getter(v48);
    v70 = _swiftEmptyArrayStorage;
    v50 = sub_10006B680();
    v51 = sub_10001B520((uint64_t *)&unk_1000BC540);
    v52 = sub_10006B6C8();
    v53 = v64;
    v54 = v66;
    dispatch thunk of SetAlgebra.init<A>(_:)(&v70, v51, v52, v66, v50);
    OS_dispatch_group.notify(qos:flags:queue:execute:)(v49, v53, v42, v47);
    _Block_release(v47);

    swift_release(v36);
    v55 = swift_release(v45);
    (*(void (**)(char *, uint64_t, __n128))(v65 + 8))(v53, v54, v55);
    (*(void (**)(char *, uint64_t))(v62 + 8))(v49, v63);
    v60(v68, v69);
    swift_release(v76);
    return;
  }
LABEL_10:
  __break(1u);
}

uint64_t sub_100069208(_QWORD *a1, void (*a2)(_QWORD), uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  os_log_type_t v14;
  uint64_t v15;
  uint8_t *v16;
  uint64_t v17;
  void (*v18)(_QWORD);
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint8_t *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  __n128 v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t result;
  uint8_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;

  v6 = *(_QWORD *)(*a1 + 80);
  v7 = type metadata accessor for Optional(0, v6);
  v35 = *(_QWORD *)(v7 - 8);
  v8 = __chkstk_darwin(v7);
  v10 = (char *)&v30 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v34 = (char *)&v30 - v11;
  sub_10002CC78(0, (unint64_t *)&qword_1000BBB00, OS_os_log_ptr);
  v12 = swift_retain_n(a1, 2);
  v13 = static OS_os_log.default.getter(v12);
  v14 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v13, v14))
  {
    v15 = swift_slowAlloc(12, -1);
    v33 = v6;
    v16 = (uint8_t *)v15;
    v17 = swift_slowAlloc(32, -1);
    v37 = v17;
    v31 = v7;
    v32 = a3;
    *(_DWORD *)v16 = 136315138;
    v30 = v16 + 4;
    v18 = a2;
    v19 = a1[2];
    v20 = a1[3];
    swift_bridgeObjectRetain(v20);
    v21 = v19;
    a2 = v18;
    v36 = sub_10006AE74(v21, v20, &v37);
    v7 = v31;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v36, &v37, v30, v16 + 12);
    swift_release_n(a1, 2);
    swift_bridgeObjectRelease(v20);
    _os_log_impl((void *)&_mh_execute_header, v13, v14, "task manager %s invoking result handler", v16, 0xCu);
    swift_arrayDestroy(v17, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v17, -1, -1);
    v22 = v16;
    v6 = v33;
    swift_slowDealloc(v22, -1, -1);
  }
  else
  {
    swift_release_n(a1, 2);
  }

  v37 = *(_QWORD *)((char *)a1 + qword_1000BBF28);
  v23 = v37;
  v24 = type metadata accessor for UnfairLock(0);
  swift_retain(v23);
  v25 = v34;
  Lock.sync<A>(_:)(sub_10006B764, a1, v24, v7, &protocol witness table for UnfairLock);
  v26 = swift_release(v37);
  v27 = v35;
  (*(void (**)(char *, char *, uint64_t, __n128))(v35 + 16))(v10, v25, v7, v26);
  v28 = *(_QWORD *)(v6 - 8);
  result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v28 + 48))(v10, 1, v6);
  if ((_DWORD)result == 1)
  {
    __break(1u);
  }
  else
  {
    a2(v10);
    (*(void (**)(char *, uint64_t))(v27 + 8))(v25, v7);
    return (*(uint64_t (**)(char *, uint64_t))(v28 + 8))(v10, v6);
  }
  return result;
}

uint64_t sub_1000694D8@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE v7[24];

  v3 = *a1;
  v4 = (uint64_t)a1 + *(_QWORD *)(*a1 + 168);
  swift_beginAccess(v4, v7, 0, 0);
  v5 = type metadata accessor for Optional(0, *(_QWORD *)(v3 + 80));
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, v4, v5);
}

double sub_100069548(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  uint8_t *v14;
  uint8_t *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint8_t *v23;
  uint8_t *v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  __n128 v35;
  double result;
  uint64_t v37;
  uint8_t *v38;
  uint8_t *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t aBlock[5];
  uint64_t v43;
  _QWORD *v44;
  uint64_t v45;

  v8 = type metadata accessor for DispatchWorkItemFlags(0);
  __chkstk_darwin(v8);
  v10 = (char *)&v37 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10002CC78(0, (unint64_t *)&qword_1000BBB00, OS_os_log_ptr);
  v11 = swift_retain_n(a1, 2);
  v12 = static OS_os_log.default.getter(v11);
  v13 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v12, v13))
  {
    v14 = (uint8_t *)swift_slowAlloc(12, -1);
    v40 = swift_slowAlloc(32, -1);
    v41 = a4;
    aBlock[0] = v40;
    *(_DWORD *)v14 = 136315138;
    v15 = v14 + 12;
    v38 = v14 + 4;
    v39 = v14;
    v16 = a3;
    v17 = v8;
    v18 = v10;
    v19 = a2;
    v21 = *(_QWORD *)(a1 + 16);
    v20 = *(_QWORD *)(a1 + 24);
    swift_bridgeObjectRetain(v20);
    v22 = v21;
    a2 = v19;
    v10 = v18;
    v8 = v17;
    a3 = v16;
    v44 = (_QWORD *)sub_10006AE74(v22, v20, aBlock);
    v23 = v15;
    a4 = v41;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v44, &v45, v38, v23);
    swift_release_n(a1, 2);
    swift_bridgeObjectRelease(v20);
    v24 = v39;
    _os_log_impl((void *)&_mh_execute_header, v12, v13, "task manager %s invoking cancellation handler", v39, 0xCu);
    v25 = v40;
    swift_arrayDestroy(v40, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v25, -1, -1);
    swift_slowDealloc(v24, -1, -1);
  }
  else
  {
    swift_release_n(a1, 2);
  }

  v44 = *(_QWORD **)(a1 + qword_1000BBF28);
  v26 = v44;
  v27 = type metadata accessor for UnfairLock(0);
  swift_retain(v26);
  v28 = sub_10001B520(&qword_1000BC068);
  Lock.sync<A>(_:)(sub_10006B714, a1, v27, v28, &protocol witness table for UnfairLock);
  swift_release(v44);
  swift_bridgeObjectRelease(aBlock[0]);
  aBlock[4] = a3;
  v43 = a4;
  aBlock[0] = (uint64_t)_NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = (uint64_t)sub_100031160;
  aBlock[3] = (uint64_t)&unk_1000AD1A0;
  v29 = _Block_copy(aBlock);
  v44 = _swiftEmptyArrayStorage;
  v30 = sub_10006B680();
  swift_retain(a4);
  v31 = sub_10001B520((uint64_t *)&unk_1000BC540);
  v32 = sub_10006B6C8();
  dispatch thunk of SetAlgebra.init<A>(_:)(&v44, v31, v32, v8, v30);
  v33 = type metadata accessor for DispatchWorkItem(0);
  swift_allocObject(v33, *(unsigned int *)(v33 + 48), *(unsigned __int16 *)(v33 + 52));
  v34 = DispatchWorkItem.init(flags:block:)(v10, v29);
  v35 = swift_release(v43);
  OS_dispatch_group.notify(queue:work:)(a2, v34, v35);
  *(_QWORD *)&result = swift_release(v34).n128_u64[0];
  return result;
}

uint64_t sub_100069888(uint64_t a1, uint64_t (*a2)(void), uint64_t a3, uint64_t (*a4)(void))
{
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint8_t *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t result;
  uint64_t (*v16)(void);
  uint64_t v17;
  uint64_t v18;

  sub_10002CC78(0, (unint64_t *)&qword_1000BBB00, OS_os_log_ptr);
  v7 = swift_retain_n(a1, 2);
  v8 = static OS_os_log.default.getter(v7);
  v9 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v8, v9))
  {
    v10 = (uint8_t *)swift_slowAlloc(12, -1);
    v11 = swift_slowAlloc(32, -1);
    v18 = v11;
    *(_DWORD *)v10 = 136315138;
    v16 = a2;
    v12 = *(_QWORD *)(a1 + 16);
    v13 = *(_QWORD *)(a1 + 24);
    swift_bridgeObjectRetain(v13);
    v17 = sub_10006AE74(v12, v13, &v18);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v17, &v18, v10 + 4, v10 + 12);
    swift_release_n(a1, 2);
    v14 = v13;
    a2 = v16;
    swift_bridgeObjectRelease(v14);
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "task manager %s completed all tasks", v10, 0xCu);
    swift_arrayDestroy(v11, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v11, -1, -1);
    swift_slowDealloc(v10, -1, -1);
  }
  else
  {
    swift_release_n(a1, 2);
  }

  result = a2();
  if ((result & 1) == 0)
    return a4();
  return result;
}

void sub_100069A50(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD v14[4];
  uint64_t v15;
  uint64_t v16;

  v2 = v1;
  sub_10002CC78(0, (unint64_t *)&qword_1000BBB00, OS_os_log_ptr);
  v4 = swift_retain_n(v1, 2);
  v5 = static OS_os_log.default.getter(v4);
  v6 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v5, v6))
  {
    v7 = (uint8_t *)swift_slowAlloc(12, -1);
    v8 = swift_slowAlloc(32, -1);
    v16 = v8;
    *(_DWORD *)v7 = 136315138;
    v9 = *(_QWORD *)(v2 + 16);
    v10 = *(_QWORD *)(v2 + 24);
    swift_bridgeObjectRetain(v10);
    v15 = sub_10006AE74(v9, v10, &v16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v15, &v16, v7 + 4, v7 + 12);
    swift_release_n(v2, 2);
    swift_bridgeObjectRelease(v10);
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "task manager %s did finish task", v7, 0xCu);
    swift_arrayDestroy(v8, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v8, -1, -1);
    swift_slowDealloc(v7, -1, -1);
  }
  else
  {
    swift_release_n(v2, 2);
  }

  v16 = *(_QWORD *)(v2 + qword_1000BBF28);
  v11 = v16;
  __chkstk_darwin(v12);
  v14[2] = v2;
  v14[3] = a1;
  v13 = type metadata accessor for UnfairLock(0);
  swift_retain(v11);
  Lock.sync<A>(_:)(sub_10006B564, v14, v13, (char *)&type metadata for () + 8, &protocol witness table for UnfairLock);
  swift_release(v16);
  dispatch_group_leave(*(dispatch_group_t *)(v2 + qword_1000BBF20));
  dispatch_group_leave(*(dispatch_group_t *)(v2 + qword_1000BBF18));
}

uint64_t sub_100069C78(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE v16[24];

  v4 = *(_QWORD *)(*(_QWORD *)a1 + 80);
  v5 = type metadata accessor for Optional(0, v4);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = __chkstk_darwin(v5);
  v9 = &v16[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  __chkstk_darwin(v7);
  v11 = &v16[-v10 - 8];
  v12 = *(_QWORD *)(v4 - 8);
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v12 + 16))(&v16[-v10 - 8], a2, v4);
  (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v11, 0, 1, v4);
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v6 + 32))(v9, v11, v5);
  v13 = a1 + *(_QWORD *)(*(_QWORD *)a1 + 168);
  swift_beginAccess(v13, v16, 33, 0);
  (*(void (**)(uint64_t, _BYTE *, uint64_t))(v6 + 40))(v13, v9, v5);
  return swift_endAccess(v16);
}

uint64_t sub_100069D98(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  char **v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  _BYTE v27[32];
  uint64_t v28;
  __int128 v29[2];

  v2 = v1;
  dispatch_group_enter(*(dispatch_group_t *)(v1 + qword_1000BBF20));
  *(_QWORD *)&v29[0] = *(_QWORD *)(v1 + qword_1000BBF28);
  v24 = v1;
  v25 = a1;
  v4 = type metadata accessor for UnfairLock(0);
  swift_retain(*(_QWORD *)&v29[0]);
  Lock.sync<A>(_:)(sub_10006AE6C, &v23, v4, (char *)&type metadata for () + 8, &protocol witness table for UnfairLock);
  swift_release(*(_QWORD *)&v29[0]);
  sub_100030244((uint64_t)a1, (uint64_t)v29);
  sub_10002CC78(0, (unint64_t *)&qword_1000BBB00, OS_os_log_ptr);
  v5 = swift_retain_n(v1, 2);
  v6 = static OS_os_log.default.getter(v5);
  v7 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v6, v7))
  {
    v8 = swift_slowAlloc(22, -1);
    v9 = swift_slowAlloc(64, -1);
    v28 = v9;
    *(_DWORD *)v8 = 136315394;
    v10 = *(_QWORD *)(v2 + 16);
    v11 = *(_QWORD *)(v2 + 24);
    swift_bridgeObjectRetain(v11);
    v26 = sub_10006AE74(v10, v11, &v28);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v26, v27, v8 + 4, v8 + 12);
    swift_release_n(v2, 2);
    swift_bridgeObjectRelease(v11);
    *(_WORD *)(v8 + 12) = 2080;
    sub_100030244((uint64_t)v29, (uint64_t)&v26);
    v12 = sub_10001B520(&qword_1000BBB30);
    v13 = String.init<A>(describing:)(&v26, v12);
    v15 = v14;
    v26 = sub_10006AE74(v13, v14, &v28);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v26, v27, v8 + 14, v8 + 22);
    swift_bridgeObjectRelease(v15);
    sub_10001DA60(v29);
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "task manager %s running sidecar task %s", (uint8_t *)v8, 0x16u);
    swift_arrayDestroy(v9, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v9, -1, -1);
    swift_slowDealloc(v8, -1, -1);

  }
  else
  {
    swift_release_n(v2, 2);

    sub_10001DA60(v29);
  }
  v16 = (char **)sub_10001D9B4(a1, a1[3]);
  v17 = sub_10002D064((char *)(v2 + qword_1000BBF10), *v16);
  sub_100030244((uint64_t)a1, (uint64_t)v29);
  v18 = swift_allocObject(&unk_1000AD098, 64, 7);
  *(_QWORD *)(v18 + 16) = v2;
  sub_100056ED8(v29, v18 + 24);
  v19 = swift_retain(v2);
  v20 = (void *)zalgo.getter(v19);
  v21 = Promise.always(on:closure:)(v20, sub_10006B558, v18);
  swift_release(v18);

  swift_release(v17);
  return v21;
}

uint64_t sub_10006A0A4(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  _QWORD *v4;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  _UNKNOWN **v17;
  _BYTE v18[24];
  _QWORD v19[5];

  sub_100030244(a2, (uint64_t)v19);
  v3 = (_QWORD *)(a1 + qword_1000BBF30);
  swift_beginAccess(a1 + qword_1000BBF30, v18, 33, 0);
  v4 = (_QWORD *)*v3;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
  *v3 = v4;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    v4 = sub_10005E1CC(0, v4[2] + 1, 1, v4);
    *v3 = v4;
  }
  v7 = v4[2];
  v6 = v4[3];
  if (v7 >= v6 >> 1)
  {
    v4 = sub_10005E1CC((_QWORD *)(v6 > 1), v7 + 1, 1, v4);
    *v3 = v4;
  }
  v8 = sub_10003021C((uint64_t)v19, v19[3]);
  __chkstk_darwin(v8);
  v10 = (uint64_t *)((char *)&v14 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v11 + 16))(v10);
  v12 = *v10;
  v16 = type metadata accessor for EventProcessingSidecarTask();
  v17 = &off_1000AB8E8;
  *(_QWORD *)&v15 = v12;
  v4[2] = v7 + 1;
  sub_100056ED8(&v15, (uint64_t)&v4[5 * v7 + 4]);
  sub_10001DA60(v19);
  return swift_endAccess(v18);
}

void sub_10006A210(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  _BYTE v15[32];
  uint64_t v16;
  _QWORD v17[5];

  sub_100030244(a2, (uint64_t)v17);
  sub_10002CC78(0, (unint64_t *)&qword_1000BBB00, OS_os_log_ptr);
  v3 = swift_retain_n(a1, 2);
  v4 = static OS_os_log.default.getter(v3);
  v5 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v4, v5))
  {
    v6 = swift_slowAlloc(22, -1);
    v7 = swift_slowAlloc(64, -1);
    v16 = v7;
    *(_DWORD *)v6 = 136315394;
    v8 = *(_QWORD *)(a1 + 16);
    v9 = *(_QWORD *)(a1 + 24);
    swift_bridgeObjectRetain(v9);
    v14 = sub_10006AE74(v8, v9, &v16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v14, v15, v6 + 4, v6 + 12);
    swift_release_n(a1, 2);
    swift_bridgeObjectRelease(v9);
    *(_WORD *)(v6 + 12) = 2080;
    sub_100030244((uint64_t)v17, (uint64_t)&v14);
    v10 = sub_10001B520(&qword_1000BBB30);
    v11 = String.init<A>(describing:)(&v14, v10);
    v13 = v12;
    v14 = sub_10006AE74(v11, v12, &v16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v14, v15, v6 + 14, v6 + 22);
    swift_bridgeObjectRelease(v13);
    sub_10001DA60(v17);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "task manager %s finished running sidecar task %s", (uint8_t *)v6, 0x16u);
    swift_arrayDestroy(v7, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v7, -1, -1);
    swift_slowDealloc(v6, -1, -1);

  }
  else
  {
    swift_release_n(a1, 2);

    sub_10001DA60(v17);
  }
  dispatch_group_leave(*(dispatch_group_t *)(a1 + qword_1000BBF20));
}

uint64_t *sub_10006A418()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *v0;
  swift_bridgeObjectRelease(v0[3]);

  sub_100027D34((uint64_t)v0 + qword_1000BBF10, type metadata accessor for TaskContext);
  swift_release(*(uint64_t *)((char *)v0 + qword_1000BBF28));
  swift_bridgeObjectRelease(*(uint64_t *)((char *)v0 + qword_1000BBF30));
  v2 = (uint64_t)v0 + *(_QWORD *)(*v0 + 168);
  v3 = type metadata accessor for Optional(0, *(_QWORD *)(v1 + 80));
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(v2, v3);
  return v0;
}

uint64_t sub_10006A4D4()
{
  uint64_t v0;

  sub_10006A418();
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t type metadata accessor for TaskManager(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10003DCE8(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for TaskManager);
}

uint64_t type metadata accessor for TaskContext(uint64_t a1)
{
  uint64_t result;

  result = qword_1000BC010;
  if (!qword_1000BC010)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for TaskContext);
  return result;
}

uint64_t *sub_10006A540(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  void (*v22)(char *, _QWORD, uint64_t, uint64_t);

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v14 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v14 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v14);
  }
  else
  {
    v7 = type metadata accessor for TimelineProviderContext(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = *(int *)(a3 + 20);
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = type metadata accessor for TrackableNewsTimelineEntry(0);
    v12 = *(_QWORD *)(v11 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11))
    {
      v13 = sub_10001B520(&qword_1000BC520);
      memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
    }
    else
    {
      v15 = type metadata accessor for Date(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v15 - 8) + 16))(v9, v10, v15);
      v16 = *(int *)(v11 + 20);
      v17 = *(_QWORD *)&v10[v16];
      *(_QWORD *)&v9[v16] = v17;
      v18 = *(int *)(v11 + 24);
      v19 = &v9[v18];
      v20 = &v10[v18];
      v21 = *((_QWORD *)v20 + 1);
      *(_QWORD *)v19 = *(_QWORD *)v20;
      *((_QWORD *)v19 + 1) = v21;
      v22 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v12 + 56);
      swift_retain(v17);
      swift_bridgeObjectRetain(v21);
      v22(v9, 0, 1, v11);
    }
  }
  return a1;
}

uint64_t sub_10006A680(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;

  v4 = type metadata accessor for TimelineProviderContext(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  v5 = a1 + *(int *)(a2 + 20);
  v6 = type metadata accessor for TrackableNewsTimelineEntry(0);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 48))(v5, 1, v6);
  if (!(_DWORD)result)
  {
    v8 = type metadata accessor for Date(0);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v5, v8);
    swift_release(*(_QWORD *)(v5 + *(int *)(v6 + 20)));
    return swift_bridgeObjectRelease(*(_QWORD *)(v5 + *(int *)(v6 + 24) + 8));
  }
  return result;
}

uint64_t sub_10006A72C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  void (*v20)(char *, _QWORD, uint64_t, uint64_t);

  v6 = type metadata accessor for TimelineProviderContext(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = (char *)(a1 + v7);
  v9 = (char *)(a2 + v7);
  v10 = type metadata accessor for TrackableNewsTimelineEntry(0);
  v11 = *(_QWORD *)(v10 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10))
  {
    v12 = sub_10001B520(&qword_1000BC520);
    memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
  }
  else
  {
    v13 = type metadata accessor for Date(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v13 - 8) + 16))(v8, v9, v13);
    v14 = *(int *)(v10 + 20);
    v15 = *(_QWORD *)&v9[v14];
    *(_QWORD *)&v8[v14] = v15;
    v16 = *(int *)(v10 + 24);
    v17 = &v8[v16];
    v18 = &v9[v16];
    v19 = *((_QWORD *)v18 + 1);
    *(_QWORD *)v17 = *(_QWORD *)v18;
    *((_QWORD *)v17 + 1) = v19;
    v20 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56);
    swift_retain(v15);
    swift_bridgeObjectRetain(v19);
    v20(v8, 0, 1, v10);
  }
  return a1;
}

uint64_t sub_10006A840(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(char *, uint64_t, uint64_t);
  int v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  void (*v22)(char *, _QWORD, uint64_t, uint64_t);
  uint64_t v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;

  v6 = type metadata accessor for TimelineProviderContext(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = (char *)(a1 + v7);
  v9 = (char *)(a2 + v7);
  v10 = type metadata accessor for TrackableNewsTimelineEntry(0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v11 + 48);
  v13 = v12(v8, 1, v10);
  v14 = v12(v9, 1, v10);
  if (!v13)
  {
    if (!v14)
    {
      v25 = type metadata accessor for Date(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v25 - 8) + 24))(v8, v9, v25);
      v26 = *(int *)(v10 + 20);
      v27 = *(_QWORD *)&v9[v26];
      v28 = *(_QWORD *)&v8[v26];
      *(_QWORD *)&v8[v26] = v27;
      swift_retain(v27);
      swift_release(v28);
      v29 = *(int *)(v10 + 24);
      v30 = &v8[v29];
      v31 = &v9[v29];
      *(_QWORD *)v30 = *(_QWORD *)v31;
      v32 = *((_QWORD *)v31 + 1);
      v33 = *((_QWORD *)v30 + 1);
      *((_QWORD *)v30 + 1) = v32;
      swift_bridgeObjectRetain(v32);
      swift_bridgeObjectRelease(v33);
      return a1;
    }
    sub_100027D34((uint64_t)v8, type metadata accessor for TrackableNewsTimelineEntry);
    goto LABEL_6;
  }
  if (v14)
  {
LABEL_6:
    v23 = sub_10001B520(&qword_1000BC520);
    memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v23 - 8) + 64));
    return a1;
  }
  v15 = type metadata accessor for Date(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v15 - 8) + 16))(v8, v9, v15);
  v16 = *(int *)(v10 + 20);
  v17 = *(_QWORD *)&v9[v16];
  *(_QWORD *)&v8[v16] = v17;
  v18 = *(int *)(v10 + 24);
  v19 = &v8[v18];
  v20 = &v9[v18];
  *(_QWORD *)v19 = *(_QWORD *)v20;
  v21 = *((_QWORD *)v20 + 1);
  *((_QWORD *)v19 + 1) = v21;
  v22 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56);
  swift_retain(v17);
  swift_bridgeObjectRetain(v21);
  v22(v8, 0, 1, v10);
  return a1;
}

uint64_t sub_10006A9FC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v6 = type metadata accessor for TimelineProviderContext(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = (char *)(a1 + v7);
  v9 = (char *)(a2 + v7);
  v10 = type metadata accessor for TrackableNewsTimelineEntry(0);
  v11 = *(_QWORD *)(v10 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10))
  {
    v12 = sub_10001B520(&qword_1000BC520);
    memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
  }
  else
  {
    v13 = type metadata accessor for Date(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v13 - 8) + 32))(v8, v9, v13);
    *(_QWORD *)&v8[*(int *)(v10 + 20)] = *(_QWORD *)&v9[*(int *)(v10 + 20)];
    *(_OWORD *)&v8[*(int *)(v10 + 24)] = *(_OWORD *)&v9[*(int *)(v10 + 24)];
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
  }
  return a1;
}

uint64_t sub_10006AAFC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(char *, uint64_t, uint64_t);
  int v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v6 = type metadata accessor for TimelineProviderContext(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = (char *)(a1 + v7);
  v9 = (char *)(a2 + v7);
  v10 = type metadata accessor for TrackableNewsTimelineEntry(0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v11 + 48);
  v13 = v12(v8, 1, v10);
  v14 = v12(v9, 1, v10);
  if (!v13)
  {
    if (!v14)
    {
      v18 = type metadata accessor for Date(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v18 - 8) + 40))(v8, v9, v18);
      v19 = *(int *)(v10 + 20);
      v20 = *(_QWORD *)&v8[v19];
      *(_QWORD *)&v8[v19] = *(_QWORD *)&v9[v19];
      swift_release(v20);
      v21 = *(int *)(v10 + 24);
      v22 = &v8[v21];
      v23 = &v9[v21];
      v25 = *(_QWORD *)v23;
      v24 = *((_QWORD *)v23 + 1);
      v26 = *((_QWORD *)v22 + 1);
      *(_QWORD *)v22 = v25;
      *((_QWORD *)v22 + 1) = v24;
      swift_bridgeObjectRelease(v26);
      return a1;
    }
    sub_100027D34((uint64_t)v8, type metadata accessor for TrackableNewsTimelineEntry);
    goto LABEL_6;
  }
  if (v14)
  {
LABEL_6:
    v16 = sub_10001B520(&qword_1000BC520);
    memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
    return a1;
  }
  v15 = type metadata accessor for Date(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v15 - 8) + 32))(v8, v9, v15);
  *(_QWORD *)&v8[*(int *)(v10 + 20)] = *(_QWORD *)&v9[*(int *)(v10 + 20)];
  *(_OWORD *)&v8[*(int *)(v10 + 24)] = *(_OWORD *)&v9[*(int *)(v10 + 24)];
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
  return a1;
}

uint64_t sub_10006AC84(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10006AC90);
}

uint64_t sub_10006AC90(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;

  v6 = type metadata accessor for TimelineProviderContext(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
  }
  else
  {
    v8 = sub_10001B520(&qword_1000BC520);
    v10 = a1 + *(int *)(a3 + 20);
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48);
  }
  return v9(v10, a2, v8);
}

uint64_t sub_10006AD08(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10006AD14);
}

uint64_t sub_10006AD14(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;

  v8 = type metadata accessor for TimelineProviderContext(0);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    v10 = sub_10001B520(&qword_1000BC520);
    v12 = a1 + *(int *)(a4 + 20);
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56);
  }
  return v11(v12, a2, a2, v10);
}

void sub_10006AD94(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v6[2];

  v2 = type metadata accessor for TimelineProviderContext(319);
  if (v3 <= 0x3F)
  {
    v6[0] = *(_QWORD *)(v2 - 8) + 64;
    sub_10006AE18(319);
    if (v5 <= 0x3F)
    {
      v6[1] = *(_QWORD *)(v4 - 8) + 64;
      swift_initStructMetadata(a1, 256, 2, v6, a1 + 16);
    }
  }
}

void sub_10006AE18(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_1000BC020)
  {
    v2 = type metadata accessor for TrackableNewsTimelineEntry(255);
    v3 = type metadata accessor for Optional(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_1000BC020);
  }
}

uint64_t sub_10006AE6C()
{
  uint64_t v0;

  return sub_10006A0A4(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t sub_10006AE74(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12[3];
  void *ObjectType;

  v6 = sub_10006AF44(v12, 0, 0, 1, a1, a2);
  v7 = v12[0];
  if (v6)
  {
    v8 = v6;
    ObjectType = (void *)swift_getObjectType(v6);
    v12[0] = v8;
    v9 = *a3;
    if (*a3)
    {
      sub_100033FBC((uint64_t)v12, *a3);
      *a3 = v9 + 32;
    }
  }
  else
  {
    ObjectType = &type metadata for _StringGuts;
    v12[0] = a1;
    v12[1] = a2;
    v10 = *a3;
    if (*a3)
    {
      sub_100033FBC((uint64_t)v12, *a3);
      *a3 = v10 + 32;
    }
    swift_bridgeObjectRetain(a2);
  }
  sub_10001DA60(v12);
  return v7;
}

uint64_t sub_10006AF44(uint64_t *a1, char *__dst, uint64_t a3, char a4, uint64_t a5, unint64_t a6)
{
  uint64_t v8;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  int v14;
  _QWORD __src[2];

  if ((a6 & 0x2000000000000000) != 0)
  {
    if ((a4 & 1) == 0)
    {
      if (__dst)
      {
        v12 = HIBYTE(a6) & 0xF;
        if (a3 - (uint64_t)__dst > v12)
        {
          __src[0] = a5;
          __src[1] = a6 & 0xFFFFFFFFFFFFFFLL;
          if (__src >= (_QWORD *)&__dst[v12] || (char *)__src + v12 <= __dst)
          {
            memcpy(__dst, __src, HIBYTE(a6) & 0xF);
            UnsafeMutableRawBufferPointer.subscript.setter(0, HIBYTE(a6) & 0xF, __dst, a3);
            result = 0;
            *a1 = (uint64_t)__dst;
            return result;
          }
          goto LABEL_17;
        }
      }
    }
LABEL_13:
    result = sub_10006B0FC(a5, a6);
    *a1 = v13;
    return result;
  }
  if ((a6 & 0x1000000000000000) != 0)
    goto LABEL_13;
  if ((a5 & 0x1000000000000000) != 0)
  {
    v8 = (a6 & 0xFFFFFFFFFFFFFFFLL) + 32;
    goto LABEL_5;
  }
  v8 = _StringObject.sharedUTF8.getter(a5, a6);
  if (!v8)
  {
    _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Unexpectedly found nil while unwrapping an Optional value", 57, 2, "Swift/StringTesting.swift", 25, 2, 151, 0);
    __break(1u);
LABEL_17:
    LOBYTE(v14) = 2;
    result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutableRawPointer.initializeMemory overlapping range", 58, 2, "Swift/UnsafeRawPointer.swift", 28, v14, 1173, 0);
    __break(1u);
    return result;
  }
LABEL_5:
  *a1 = v8;
  if ((a6 & 0x8000000000000000) != 0)
    return 0;
  else
    return swift_unknownObjectRetain(a6 & 0xFFFFFFFFFFFFFFFLL);
}

uint64_t sub_10006B0FC(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;

  v2 = (uint64_t)sub_10006B190(a1, a2);
  if ((swift_isUniquelyReferenced_nonNull_native(v2) & 1) == 0)
    v2 = sub_10006B3E0(0, *(_QWORD *)(v2 + 16) + 1, 1, (char *)v2);
  v4 = *(_QWORD *)(v2 + 16);
  v3 = *(_QWORD *)(v2 + 24);
  if (v4 >= v3 >> 1)
    v2 = sub_10006B3E0(v3 > 1, v4 + 1, 1, (char *)v2);
  *(_QWORD *)(v2 + 16) = v4 + 1;
  *(_BYTE *)(v2 + 32 + v4) = 0;
  return v2;
}

_QWORD *sub_10006B190(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  char v8;
  _QWORD *result;
  int v10;

  if ((a2 & 0x1000000000000000) != 0)
    goto LABEL_10;
  if ((a2 & 0x2000000000000000) != 0)
    v4 = HIBYTE(a2) & 0xF;
  else
    v4 = a1 & 0xFFFFFFFFFFFFLL;
  if (v4)
  {
    while (1)
    {
      v5 = sub_10006B304(v4, 0);
      if (v4 < 0)
        break;
      v6 = v5;
      v7 = _StringGuts.copyUTF8(into:)(v5 + 4, v4, a1, a2);
      if ((v8 & 1) != 0)
        goto LABEL_14;
      if (v7 == v4)
        return v6;
      LOBYTE(v10) = 2;
      _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "invalid Collection: less than 'count' elements in collection", 60, 2, "Swift/ContiguousArrayBuffer.swift", 33, v10, 1122, 0);
      __break(1u);
LABEL_10:
      v4 = String.UTF8View._foreignCount()();
      if (!v4)
        return _swiftEmptyArrayStorage;
    }
    LOBYTE(v10) = 2;
    _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutableBufferPointer with negative count", 46, 2, "Swift/UnsafeBufferPointer.swift", 31, v10, 71, 0);
    __break(1u);
LABEL_14:
    LOBYTE(v10) = 2;
    result = (_QWORD *)_assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Insufficient space allocated to copy string contents", 52, 2, "Swift/StringUTF8View.swift", 26, v10, 430, 0);
    __break(1u);
  }
  else
  {
    return _swiftEmptyArrayStorage;
  }
  return result;
}

_QWORD *sub_10006B304(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  _QWORD *v5;
  size_t v6;

  if (a2 <= a1)
    v2 = a1;
  else
    v2 = a2;
  if (!v2)
    return _swiftEmptyArrayStorage;
  v4 = sub_10001B520(&qword_1000BC050);
  v5 = (_QWORD *)swift_allocObject(v4, v2 + 32, 7);
  v6 = j__malloc_size(v5);
  v5[2] = a1;
  v5[3] = 2 * v6 - 64;
  return v5;
}

uint64_t sub_10006B368(unint64_t a1, uint64_t a2, uint64_t a3)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;

  v5 = a1;
  v6 = a1 >> 16;
  v7 = (unsigned __int16)a1 >> 14;
  if ((a3 & 0x1000000000000000) == 0 || (a2 & 0x800000000000000) != 0)
  {
    v13 = String.UTF16View.index(_:offsetBy:)(15, v6, a2);
    v14 = v13 + (v7 << 16);
    v15 = v13 & 0xFFFFFFFFFFFFFFFCLL | v5 & 3;
    v16 = v14 & 0xFFFFFFFFFFFF0000;
    if (!v7)
      v16 = v15;
    return v16 | 4;
  }
  else
  {
    v8 = String.UTF8View._foreignIndex(_:offsetBy:)(15, v6);
    v9 = v8 + (v7 << 16);
    v10 = v8 & 0xFFFFFFFFFFFFFFFCLL | v5 & 3;
    v11 = v9 & 0xFFFFFFFFFFFF0000;
    if (!v7)
      v11 = v10;
    return v11 | 8;
  }
}

uint64_t sub_10006B3E0(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  int64_t v8;
  int64_t v9;
  uint64_t v10;
  char *v11;
  size_t v12;
  char *v13;
  char *v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_10001B520(&qword_1000BC050);
    v11 = (char *)swift_allocObject(v10, v9 + 32, 7);
    v12 = j__malloc_size(v11);
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * v12 - 64;
  }
  else
  {
    v11 = (char *)_swiftEmptyArrayStorage;
  }
  v13 = v11 + 32;
  v14 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v13 >= &v14[v8])
      memmove(v13, v14, v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v14 >= &v13[v8] || v13 >= &v14[v8])
  {
    memcpy(v13, v14, v8);
LABEL_28:
    swift_bridgeObjectRelease(a4);
    return (uint64_t)v11;
  }
LABEL_30:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_10006B52C()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  sub_10001DA60((_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 64, 7);
}

void sub_10006B558()
{
  uint64_t v0;

  sub_10006A210(*(_QWORD *)(v0 + 16), v0 + 24);
}

uint64_t sub_10006B564()
{
  uint64_t v0;

  return sub_100069C78(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t sub_10006B56C()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 40, 7);
}

uint64_t sub_10006B598()
{
  uint64_t v0;

  return sub_100069208(*(_QWORD **)(v0 + 16), *(void (**)(_QWORD))(v0 + 24), *(_QWORD *)(v0 + 32));
}

uint64_t sub_10006B5A4()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));

  swift_release(*(_QWORD *)(v0 + 40));
  return swift_deallocObject(v0, 48, 7);
}

double sub_10006B5D8()
{
  uint64_t *v0;

  return sub_100069548(v0[2], v0[3], v0[4], v0[5]);
}

uint64_t sub_10006B5E4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10006B5F4(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10006B5FC()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 16));
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10006B620()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)(v0 + 16) + 16))();
}

uint64_t sub_10006B63C()
{
  _QWORD *v0;

  swift_release(v0[2]);
  swift_release(v0[4]);
  swift_release(v0[6]);
  return swift_deallocObject(v0, 56, 7);
}

uint64_t sub_10006B670()
{
  uint64_t v0;

  return sub_100069888(*(_QWORD *)(v0 + 16), *(uint64_t (**)(void))(v0 + 24), *(_QWORD *)(v0 + 32), *(uint64_t (**)(void))(v0 + 40));
}

unint64_t sub_10006B680()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000BC058;
  if (!qword_1000BC058)
  {
    v1 = type metadata accessor for DispatchWorkItemFlags(255);
    result = swift_getWitnessTable(&protocol conformance descriptor for DispatchWorkItemFlags, v1);
    atomic_store(result, (unint64_t *)&qword_1000BC058);
  }
  return result;
}

unint64_t sub_10006B6C8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000BC060;
  if (!qword_1000BC060)
  {
    v1 = sub_10001B560((uint64_t *)&unk_1000BC540);
    result = swift_getWitnessTable(&protocol conformance descriptor for [A], v1);
    atomic_store(result, (unint64_t *)&qword_1000BC060);
  }
  return result;
}

uint64_t sub_10006B714@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t *v3;
  uint64_t v4;
  _BYTE v6[24];

  v3 = (uint64_t *)(v1 + qword_1000BBF30);
  swift_beginAccess(v3, v6, 0, 0);
  v4 = *v3;
  *a1 = *v3;
  return swift_bridgeObjectRetain(v4);
}

uint64_t sub_10006B764@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;

  return sub_1000694D8(v1, a1);
}

uint64_t sub_10006B76C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for TaskContext(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

Swift::Int sub_10006B7C0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  _QWORD v12[9];

  v1 = v0;
  v2 = type metadata accessor for URL(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v12[-1] - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for ImageStoreKey(0);
  __chkstk_darwin(v6);
  v8 = (char *)&v12[-1] - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  Hasher.init(_seed:)(v12, 0);
  sub_10006C464(v1, (uint64_t)v8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v3 + 48))(v8, 1, v2) == 1)
  {
    Hasher._combine(_:)(1uLL);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v3 + 32))(v5, v8, v2);
    Hasher._combine(_:)(0);
    v9 = sub_10001C96C((unint64_t *)&qword_1000BA288, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t)&protocol conformance descriptor for URL);
    dispatch thunk of Hashable.hash(into:)(v12, v2, v9);
    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  }
  return Hasher._finalize()();
}

void sub_10006B910(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;

  v2 = v1;
  v4 = type metadata accessor for URL(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = __chkstk_darwin(v4);
  v8 = (char *)&v12 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v10 = (char *)&v12 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10006C464(v2, (uint64_t)v10);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48))(v10, 1, v4) == 1)
  {
    Hasher._combine(_:)(1uLL);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v5 + 32))(v8, v10, v4);
    Hasher._combine(_:)(0);
    v11 = sub_10001C96C((unint64_t *)&qword_1000BA288, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t)&protocol conformance descriptor for URL);
    dispatch thunk of Hashable.hash(into:)(a1, v4, v11);
    (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
  }
}

Swift::Int sub_10006BA3C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  _QWORD v14[9];

  v2 = v1;
  v4 = type metadata accessor for URL(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = __chkstk_darwin(v4);
  v8 = (char *)&v14[-1] - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v10 = (char *)&v14[-1] - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  Hasher.init(_seed:)(v14, a1);
  sub_10006C464(v2, (uint64_t)v10);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48))(v10, 1, v4) == 1)
  {
    Hasher._combine(_:)(1uLL);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v5 + 32))(v8, v10, v4);
    Hasher._combine(_:)(0);
    v11 = sub_10001C96C((unint64_t *)&qword_1000BA288, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t)&protocol conformance descriptor for URL);
    dispatch thunk of Hashable.hash(into:)(v14, v4, v11);
    (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
  }
  return Hasher._finalize()();
}

void *sub_10006BB90(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  char v4;
  void *v5;
  id v6;

  v2 = *(_QWORD *)(v1 + 16);
  if (!*(_QWORD *)(v2 + 16))
    return 0;
  v3 = sub_1000314A4(a1);
  if ((v4 & 1) == 0)
    return 0;
  v5 = *(void **)(*(_QWORD *)(v2 + 56) + 8 * v3);
  v6 = v5;
  return v5;
}

uint64_t sub_10006BBD4()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 16));
  return swift_deallocClassInstance(v0, 24, 7);
}

uint64_t type metadata accessor for ImageStore()
{
  return objc_opt_self(_TtC7NewsTag10ImageStore);
}

uint64_t *sub_10006BC18(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v5 = *(_QWORD *)(a3 - 8);
  v6 = *(_DWORD *)(v5 + 80);
  if ((v6 & 0x20000) != 0)
  {
    v9 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v9 + ((v6 + 16) & ~(unint64_t)v6));
    swift_retain(v9);
  }
  else
  {
    v7 = type metadata accessor for URL(0);
    v8 = *(_QWORD *)(v7 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v8 + 48))(a2, 1, v7))
    {
      memcpy(a1, a2, *(_QWORD *)(v5 + 64));
    }
    else
    {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v8 + 16))(a1, a2, v7);
      (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v8 + 56))(a1, 0, 1, v7);
    }
  }
  return a1;
}

uint64_t sub_10006BCE0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;

  v2 = type metadata accessor for URL(0);
  v3 = *(_QWORD *)(v2 - 8);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(a1, 1, v2);
  if (!(_DWORD)result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8))(a1, v2);
  return result;
}

void *sub_10006BD48(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;

  v6 = type metadata accessor for URL(0);
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v7 + 16))(a1, a2, v6);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  return a1;
}

void *sub_10006BDEC(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(void *, uint64_t, uint64_t);
  int v9;
  int v10;

  v6 = type metadata accessor for URL(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v7 + 48);
  v9 = v8(a1, 1, v6);
  v10 = v8(a2, 1, v6);
  if (!v9)
  {
    if (!v10)
    {
      (*(void (**)(void *, void *, uint64_t))(v7 + 24))(a1, a2, v6);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v7 + 8))(a1, v6);
    goto LABEL_6;
  }
  if (v10)
  {
LABEL_6:
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
    return a1;
  }
  (*(void (**)(void *, void *, uint64_t))(v7 + 16))(a1, a2, v6);
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  return a1;
}

void *sub_10006BEDC(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;

  v6 = type metadata accessor for URL(0);
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v7 + 32))(a1, a2, v6);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  return a1;
}

void *sub_10006BF80(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(void *, uint64_t, uint64_t);
  int v9;
  int v10;

  v6 = type metadata accessor for URL(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v7 + 48);
  v9 = v8(a1, 1, v6);
  v10 = v8(a2, 1, v6);
  if (!v9)
  {
    if (!v10)
    {
      (*(void (**)(void *, void *, uint64_t))(v7 + 40))(a1, a2, v6);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v7 + 8))(a1, v6);
    goto LABEL_6;
  }
  if (v10)
  {
LABEL_6:
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
    return a1;
  }
  (*(void (**)(void *, void *, uint64_t))(v7 + 32))(a1, a2, v6);
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  return a1;
}

uint64_t sub_10006C070(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10006C07C);
}

uint64_t sub_10006C07C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unsigned int v5;

  v4 = type metadata accessor for URL(0);
  v5 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(a1, a2, v4);
  if (v5 >= 2)
    return v5 - 1;
  else
    return 0;
}

uint64_t sub_10006C0C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10006C0D4);
}

uint64_t sub_10006C0D4(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;

  if (a2)
    v5 = (a2 + 1);
  else
    v5 = 0;
  v6 = type metadata accessor for URL(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56))(a1, v5, a3, v6);
}

uint64_t sub_10006C124(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for URL(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 48))(a1, 1, v2);
}

uint64_t sub_10006C15C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for URL(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(a1, a2, 1, v4);
}

uint64_t type metadata accessor for ImageStoreKey(uint64_t a1)
{
  uint64_t result;

  result = qword_1000BC180;
  if (!qword_1000BC180)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for ImageStoreKey);
  return result;
}

uint64_t sub_10006C1D8(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;

  result = type metadata accessor for URL(319);
  if (v3 <= 0x3F)
  {
    swift_initEnumMetadataSinglePayload(a1, 256, *(_QWORD *)(result - 8) + 64, 1);
    return 0;
  }
  return result;
}

uint64_t sub_10006C22C()
{
  return sub_10001C96C(&qword_1000BC190, type metadata accessor for ImageStoreKey, (uint64_t)&unk_10008CE54);
}

uint64_t sub_10006C25C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  unsigned int (*v19)(uint64_t, uint64_t, uint64_t);
  char v20;
  void (*v21)(char *, char *, uint64_t);
  void (*v22)(char *, uint64_t);
  uint64_t v24;

  v4 = type metadata accessor for URL(0);
  v5 = *(_QWORD **)(v4 - 8);
  v6 = __chkstk_darwin(v4);
  v8 = (char *)&v24 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v10 = (char *)&v24 - v9;
  v11 = type metadata accessor for ImageStoreKey(0);
  __chkstk_darwin(v11);
  v13 = (char *)&v24 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_10001B520(&qword_1000BA290);
  v15 = __chkstk_darwin(v14);
  v17 = (char *)&v24 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = (uint64_t)&v17[*(int *)(v15 + 48)];
  sub_10006C464(a1, (uint64_t)v17);
  sub_10006C464(a2, v18);
  v19 = (unsigned int (*)(uint64_t, uint64_t, uint64_t))v5[6];
  if (v19((uint64_t)v17, 1, v4) != 1)
  {
    sub_10006C464((uint64_t)v17, (uint64_t)v13);
    if (v19(v18, 1, v4) != 1)
    {
      v21 = (void (*)(char *, char *, uint64_t))v5[4];
      v21(v10, v13, v4);
      v21(v8, (char *)v18, v4);
      v20 = static URL.== infix(_:_:)(v10, v8);
      v22 = (void (*)(char *, uint64_t))v5[1];
      v22(v8, v4);
      v22(v10, v4);
      sub_10006C4E8((uint64_t)v17);
      return v20 & 1;
    }
    ((void (*)(char *, uint64_t))v5[1])(v13, v4);
    goto LABEL_6;
  }
  if (v19(v18, 1, v4) != 1)
  {
LABEL_6:
    sub_10006C4A8((uint64_t)v17);
    v20 = 0;
    return v20 & 1;
  }
  sub_10006C4E8((uint64_t)v17);
  v20 = 1;
  return v20 & 1;
}

uint64_t sub_10006C464(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for ImageStoreKey(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10006C4A8(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_10001B520(&qword_1000BA290);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_10006C4E8(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for ImageStoreKey(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t getEnumTagSinglePayload for FeatureFlags.NewsWidget(unsigned int *a1, int a2)
{
  int v2;
  int v3;

  if (!a2)
    return 0;
  if ((a2 + 1) >= 0x10000)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 1) < 0x100)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
    return *a1;
  if (v3 == 2)
    return *(unsigned __int16 *)a1;
  return *(unsigned __int8 *)a1;
}

uint64_t storeEnumTagSinglePayload for FeatureFlags.NewsWidget(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_10006C5B8 + 4 * byte_10008CE7C[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_10006C5D8 + 4 * byte_10008CE81[v4]))();
}

_BYTE *sub_10006C5B8(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_10006C5D8(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_10006C5E0(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_10006C5E8(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_10006C5F0(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_10006C5F8(_DWORD *result)
{
  *result = 0;
  return result;
}

uint64_t sub_10006C604()
{
  return 0;
}

ValueMetadata *type metadata accessor for FeatureFlags.NewsWidget()
{
  return &type metadata for FeatureFlags.NewsWidget;
}

unint64_t sub_10006C620()
{
  unint64_t result;

  result = qword_1000BC198;
  if (!qword_1000BC198)
  {
    result = swift_getWitnessTable(&unk_10008CEE0, &type metadata for FeatureFlags.NewsWidget);
    atomic_store(result, (unint64_t *)&qword_1000BC198);
  }
  return result;
}

uint64_t static Tag.supportsSecureCoding.getter()
{
  return 1;
}

Swift::Int sub_10006C66C()
{
  _QWORD v1[9];

  Hasher.init(_seed:)(v1, 0);
  Hasher._combine(_:)(0);
  return Hasher._finalize()();
}

void sub_10006C6AC()
{
  Hasher._combine(_:)(0);
}

Swift::Int sub_10006C6D0(uint64_t a1)
{
  _QWORD v2[9];

  Hasher.init(_seed:)(v2, a1);
  Hasher._combine(_:)(0);
  return Hasher._finalize()();
}

const char *sub_10006C70C()
{
  return "NewsWidget";
}

const char *sub_10006C720()
{
  return "playbutton";
}

uint64_t sub_10006C734@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  id v8;
  void *v9;
  uint64_t v10;
  id v11;
  NSDictionary v12;
  uint64_t v13;
  NSURL *v14;
  void *v15;
  void *v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;

  v22 = a2;
  v4 = sub_10001B520(&qword_1000B93A0);
  __chkstk_darwin(v4);
  v6 = (char *)&v21 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = v2[4];
  v8 = objc_msgSend(a1, "userEngagementWithWidgetEventTracker:trackableWidgetState:", v2[3], v7);
  v9 = (void *)v2[2];
  v10 = type metadata accessor for URL(0);
  sub_10006CA20();
  sub_10006CA5C();
  v11 = v8;
  v12.super.isa = Dictionary._bridgeToObjectiveC()().super.isa;
  sub_10005E4D0((uint64_t)v2 + OBJC_IVAR____TtC7NewsTag21EngagementURLProvider_sharedDirectoryFileUrl, (uint64_t)v6);
  v13 = *(_QWORD *)(v10 - 8);
  v15 = 0;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v6, 1, v10) != 1)
  {
    URL._bridgeToObjectiveC()(v14);
    v15 = v16;
    (*(void (**)(char *, uint64_t))(v13 + 8))(v6, v10);
  }
  v17 = objc_msgSend(v9, "URLForEngagement:event:trackableWidgetState:prefetchAssetsByRemoteURL:sharedDirectoryFileURL:", a1, v11, v7, v12.super.isa, v15);

  if (v17)
  {
    v18 = v22;
    static URL._unconditionallyBridgeFromObjectiveC(_:)(v17);

    v19 = 0;
  }
  else
  {
    v19 = 1;
    v18 = v22;
  }

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v13 + 56))(v18, v19, 1, v10);
}

uint64_t sub_10006C8F4()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 32));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 40));
  sub_10006CAA4(v0 + OBJC_IVAR____TtC7NewsTag21EngagementURLProvider_sharedDirectoryFileUrl);
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t sub_10006C944()
{
  return type metadata accessor for EngagementURLProvider(0);
}

uint64_t type metadata accessor for EngagementURLProvider(uint64_t a1)
{
  uint64_t result;

  result = qword_1000BC1D0;
  if (!qword_1000BC1D0)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for EngagementURLProvider);
  return result;
}

void sub_10006C988(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[5];

  v4[0] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v4[1] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v4[2] = (char *)&value witness table for Builtin.NativeObject + 64;
  v4[3] = (char *)&value witness table for Builtin.BridgeObject + 64;
  sub_100035670(319);
  if (v3 <= 0x3F)
  {
    v4[4] = *(_QWORD *)(v2 - 8) + 64;
    swift_updateClassMetadata2(a1, 256, 5, v4, a1 + 80);
  }
}

unint64_t sub_10006CA20()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000BC3C0;
  if (!qword_1000BC3C0)
  {
    v1 = objc_opt_self(FCAssetHandle);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_1000BC3C0);
  }
  return result;
}

unint64_t sub_10006CA5C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000BA288;
  if (!qword_1000BA288)
  {
    v1 = type metadata accessor for URL(255);
    result = swift_getWitnessTable(&protocol conformance descriptor for URL, v1);
    atomic_store(result, (unint64_t *)&qword_1000BA288);
  }
  return result;
}

uint64_t sub_10006CAA4(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_10001B520(&qword_1000B93A0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

double sub_10006CAE4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5, uint64_t a6)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  double result;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;

  v28 = a2;
  v29 = a3;
  v30 = a1;
  v9 = type metadata accessor for ContentServiceRequest(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(_QWORD *)(v10 + 64);
  __chkstk_darwin(v9);
  v12 = sub_10001B520(&qword_1000B9980);
  v13 = swift_allocObject(v12, 72, 7);
  *(_OWORD *)(v13 + 16) = xmmword_10008AC60;
  v31 = 0;
  v32 = 0xE000000000000000;
  _print_unlocked<A, B>(_:_:)(a5, &v31, v9, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
  v14 = v31;
  v15 = v32;
  *(_QWORD *)(v13 + 56) = &type metadata for String;
  *(_QWORD *)(v13 + 64) = sub_10001FB34();
  *(_QWORD *)(v13 + 32) = v14;
  *(_QWORD *)(v13 + 40) = v15;
  v16 = sub_10002CC78(0, (unint64_t *)&qword_1000BBB00, OS_os_log_ptr);
  v17 = (void *)static OS_os_log.default.getter(v16);
  v18 = static os_log_type_t.default.getter();
  os_log(_:dso:log:type:_:)("fetching content for request %{public}@", 39, 2, &_mh_execute_header, v17, v18, v13);
  swift_bridgeObjectRelease(v13);

  sub_10001D9B4((_QWORD *)(a6 + 32), *(_QWORD *)(a6 + 56));
  v19 = *a5;
  sub_10002A83C((uint64_t)a5, (uint64_t)&v27 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0), type metadata accessor for ContentServiceRequest);
  v20 = *(unsigned __int8 *)(v10 + 80);
  v21 = (v20 + 40) & ~v20;
  v22 = (v11 + v21 + 7) & 0xFFFFFFFFFFFFFFF8;
  v23 = (_QWORD *)swift_allocObject(&unk_1000AD350, v22 + 16, v20 | 7);
  v23[2] = v29;
  v23[3] = a4;
  v23[4] = a6;
  sub_10002AC74((uint64_t)&v27 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0), (uint64_t)v23 + v21, type metadata accessor for ContentServiceRequest);
  v24 = (_QWORD *)((char *)v23 + v22);
  v25 = v28;
  *v24 = v30;
  v24[1] = v25;
  swift_retain(a4);
  swift_retain(a6);
  swift_retain(v25);
  sub_100075C24(v19, (uint64_t)sub_1000701B0, (uint64_t)v23);
  *(_QWORD *)&result = swift_release(v23).n128_u64[0];
  return result;
}

void sub_10006CCF8(void *a1, uint64_t a2, void *a3, uint64_t a4, void (*a5)(uint64_t), void (*a6)(uint64_t), uint64_t a7, id *a8, void (*a9)(char *), void (*a10)(char *))
{
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  id v25;
  id v26;
  id v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  id *v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  Class isa;
  __n128 v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t i;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  _BYTE *v53;
  _QWORD *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char v61;
  int v62;
  uint64_t v63;
  uint64_t v64;
  id *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  unint64_t v72;
  void *v73;
  unint64_t v74;
  unint64_t v75;
  unint64_t v76;
  unint64_t v77;
  uint64_t v78;
  void (*v79)(char *);
  void *v80;
  uint64_t v81;
  void (**v82)(char *);
  void (*v83)(char *);
  void (**v84)(uint64_t);
  void (*v85)(uint64_t);
  void (*v86)(uint64_t);
  id v87;
  id v88;
  uint64_t v89;
  uint64_t v90;
  void *v91;
  uint64_t v92;
  _QWORD *v93;
  uint64_t v94;
  void *v95;
  uint64_t v96;
  uint64_t v97;
  _QWORD *v98;
  uint64_t v99;
  uint64_t v100;
  id v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  void *v105;
  void (*v106)(char *);
  void (*v107)(char *);
  id *v108;
  void (*v109)(uint64_t);
  void (*v110)(uint64_t);
  __objc2_prot *v111;
  unint64_t v112;
  unint64_t v113;

  v108 = a8;
  v109 = a5;
  v110 = a6;
  v106 = a9;
  v107 = (void (*)(char *))a10;
  v15 = type metadata accessor for TodayContent(0);
  v16 = __chkstk_darwin(v15);
  v18 = (char *)&v99 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  v20 = (char *)&v99 - v19;
  v21 = type metadata accessor for ContentServiceRequest(0);
  v22 = *(_QWORD *)(*(_QWORD *)(v21 - 8) + 64);
  __chkstk_darwin(v21);
  v24 = (char *)&v99 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!a1 || !a2 || !a3)
  {
    if (a4)
    {
      v51 = a4;
    }
    else
    {
      v52 = sub_100070894();
      v51 = swift_allocError(&type metadata for ContentService.Errors, v52, 0, 0);
      *v53 = 0;
    }
    swift_errorRetain(a4);
    v109(v51);
    swift_errorRelease(v51);
    return;
  }
  v103 = v23;
  v104 = a7;
  v25 = a1;
  v26 = a3;
  v105 = v25;
  v27 = objc_msgSend(v25, "sections");
  v28 = (uint64_t)objc_msgSend(v27, "count");

  if (v28 < 1)
  {
    v55 = LocalizedStringKey.init(stringLiteral:)(0x69726F7453206F4ELL, 0xEA00000000007365);
    LOWORD(v98) = 2;
    v97 = 47;
    v56 = Text.init(_:tableName:bundle:comment:)(v55);
    v58 = v57;
    v60 = v59;
    v62 = v61 & 1;
    sub_10006F0BC(v108, 1, (uint64_t)v18);
    sub_10005DA74(v56, v58, v62, v60, (uint64_t)v20);
    sub_100027D34((uint64_t)v18, type metadata accessor for TodayContent);
    sub_1000249D8(v56, v58, v62);
    swift_bridgeObjectRelease(v60);
    v106(v20);

    sub_100027D34((uint64_t)v20, type metadata accessor for TodayContent);
    return;
  }
  v29 = sub_10001B520(&qword_1000B9980);
  v30 = swift_allocObject(v29, 72, 7);
  *(_OWORD *)(v30 + 16) = xmmword_10008AC60;
  v112 = 0;
  v113 = 0xE000000000000000;
  v31 = v108;
  _print_unlocked<A, B>(_:_:)(v108, &v112, v21, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
  v32 = v112;
  v33 = v113;
  *(_QWORD *)(v30 + 56) = &type metadata for String;
  *(_QWORD *)(v30 + 64) = sub_10001FB34();
  *(_QWORD *)(v30 + 32) = v32;
  *(_QWORD *)(v30 + 40) = v33;
  v34 = sub_10002CC78(0, (unint64_t *)&qword_1000BBB00, OS_os_log_ptr);
  v35 = (void *)static OS_os_log.default.getter(v34);
  v36 = static os_log_type_t.default.getter();
  os_log(_:dso:log:type:_:)("fetched today results for request %{public}@", 44, 2, &_mh_execute_header, v35, v36, v30);
  swift_bridgeObjectRelease(v30);

  v102 = sub_100070E24((uint64_t)v31, v105, a2);
  v37 = swift_bridgeObjectRetain(a2);
  v38 = sub_100070410(v37);
  swift_bridgeObjectRelease(a2);
  type metadata accessor for URL(0);
  isa = Array._bridgeToObjectiveC()().super.isa;
  v40 = swift_release(v38);
  NTDeleteOnDiskAssets(isa, v40);

  v41 = (uint64_t)NTTodayResults.allItems.getter();
  v42 = v41;
  v112 = (unint64_t)_swiftEmptyArrayStorage;
  if ((unint64_t)v41 >> 62)
  {
    if (v41 < 0)
      v63 = v41;
    else
      v63 = v41 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v41);
    v43 = _CocoaArrayWrapper.endIndex.getter(v63);
    if (v43)
      goto LABEL_7;
LABEL_28:
    swift_bridgeObjectRelease(v42);
    v54 = _swiftEmptyArrayStorage;
LABEL_29:
    v64 = swift_bridgeObjectRelease(v42);
    __chkstk_darwin(v64);
    v65 = v108;
    *(&v99 - 4) = (uint64_t)v26;
    *(&v99 - 3) = (uint64_t)v65;
    v97 = v104;
    v98 = v54;
    v66 = sub_10001B520(&qword_1000BC360);
    swift_allocObject(v66, *(unsigned int *)(v66 + 48), *(unsigned __int16 *)(v66 + 52));
    v67 = Promise.init(resolver:)(sub_100071BD8, &v99 - 6);
    v101 = (id)v67;
    swift_bridgeObjectRelease(v54);
    v68 = sub_10001B520(&qword_1000BC368);
    v100 = firstly<A>(closure:)(sub_100071BE4, v67, v68);
    sub_10002CC78(0, &qword_1000BC370, OS_dispatch_queue_ptr);
    v99 = static OS_dispatch_queue.main.getter();
    sub_10002A83C((uint64_t)v65, (uint64_t)&v99 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0), type metadata accessor for ContentServiceRequest);
    v69 = *(unsigned __int8 *)(v103 + 80);
    v70 = (v69 + 16) & ~v69;
    v71 = (v22 + v70 + 7) & 0xFFFFFFFFFFFFFFF8;
    v72 = (v71 + 15) & 0xFFFFFFFFFFFFFFF8;
    v73 = v26;
    v74 = (v72 + 15) & 0xFFFFFFFFFFFFFFF8;
    v75 = (v74 + 15) & 0xFFFFFFFFFFFFFFF8;
    v76 = (v75 + 15) & 0xFFFFFFFFFFFFFFF8;
    v77 = (v76 + 23) & 0xFFFFFFFFFFFFFFF8;
    v78 = swift_allocObject(&unk_1000AD378, v77 + 16, v69 | 7);
    sub_10002AC74((uint64_t)v24, v78 + v70, type metadata accessor for ContentServiceRequest);
    v80 = v105;
    v79 = v106;
    *(_QWORD *)(v78 + v71) = v105;
    *(_QWORD *)(v78 + v72) = v73;
    *(_QWORD *)(v78 + v74) = v102;
    v81 = v104;
    *(_QWORD *)(v78 + v75) = v104;
    v82 = (void (**)(char *))(v78 + v76);
    v83 = v107;
    *v82 = v79;
    v82[1] = v83;
    v84 = (void (**)(uint64_t))(v78 + v77);
    v86 = v109;
    v85 = v110;
    *v84 = v109;
    v84[1] = v85;
    v87 = v80;
    v88 = v73;
    v89 = v81;
    swift_retain(v81);
    swift_retain(v83);
    swift_retain(v85);
    v91 = (void *)v99;
    v90 = v100;
    v92 = Promise.then<A>(on:closure:)(v99, sub_100071DA4, v78, (char *)&type metadata for () + 8);
    swift_release(v90);

    swift_release(v78);
    v93 = (_QWORD *)swift_allocObject(&unk_1000AD3A0, 40, 7);
    v93[2] = v89;
    v93[3] = v86;
    v93[4] = v85;
    swift_retain(v89);
    v94 = swift_retain(v85);
    v95 = (void *)zalgo.getter(v94);
    v96 = Promise.error(on:closure:)(v95, sub_100071E8C, v93);

    swift_release(v101);
    swift_release(v96);
    swift_release(v92);
    swift_release(v93);

    return;
  }
  v43 = *(_QWORD *)((v41 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain(v41);
  if (!v43)
    goto LABEL_28;
LABEL_7:
  v101 = v26;
  if (v43 >= 1)
  {
    for (i = 0; i != v43; ++i)
    {
      if ((v42 & 0xC000000000000001) != 0)
      {
        v45 = specialized _ArrayBuffer._getElementSlowPath(_:)(i, v42);
      }
      else
      {
        v45 = *(_QWORD *)(v42 + 8 * i + 32);
        swift_unknownObjectRetain(v45);
      }
      v111 = &OBJC_PROTOCOL___NTHeadlineProviding;
      v46 = swift_dynamicCastObjCProtocolConditional(v45, 1, &v111);
      if (v46)
      {
        v47 = v46;
        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v46);
        v49 = *(_QWORD *)((v112 & 0xFFFFFFFFFFFFFF8) + 0x10);
        v48 = *(_QWORD *)((v112 & 0xFFFFFFFFFFFFFF8) + 0x18);
        if (v49 >= v48 >> 1)
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v48 > 1);
        v50 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v49, v47);
        specialized Array._endMutation()(v50);
      }
      else
      {
        swift_unknownObjectRelease(v45);
      }
    }
    swift_bridgeObjectRelease(v42);
    v54 = (_QWORD *)v112;
    v26 = v101;
    goto LABEL_29;
  }
  __break(1u);
}

void sub_10006D460(void (*a1)(_QWORD *), uint64_t a2, uint64_t a3, uint64_t a4, void *a5, id *a6, uint64_t a7)
{
  uint64_t v12;
  id v13;
  void *v14;
  char *v15;
  unint64_t v16;
  unint64_t v17;
  void *v18;
  Class isa;
  id v20;
  uint64_t v21;
  void *v22;
  _QWORD v23[5];
  uint64_t v24;

  v12 = swift_allocObject(&unk_1000AD3C8, 32, 7);
  *(_QWORD *)(v12 + 16) = a1;
  *(_QWORD *)(v12 + 24) = a2;
  swift_retain(a2);
  v13 = objc_msgSend(a5, "widgetConfig");
  if (v13)
  {
    v14 = v13;
    if ((objc_msgSend(v13, "contentPrefetchEnabled") & 1) != 0
      && (v15 = (char *)a6 + *(int *)(type metadata accessor for ContentServiceRequest(0) + 20),
          (v15[*(int *)(type metadata accessor for LayoutContext(0) + 48)] & 1) == 0))
    {
      v18 = *(void **)(a7 + 88);
      sub_10001B520(&qword_1000BC3B8);
      isa = Array._bridgeToObjectiveC()().super.isa;
      v20 = objc_msgSend(*a6, "qualityOfService");
      v21 = swift_allocObject(&unk_1000AD3F0, 32, 7);
      *(_QWORD *)(v21 + 16) = sub_100068308;
      *(_QWORD *)(v21 + 24) = v12;
      v23[4] = sub_100023030;
      v24 = v21;
      v23[0] = _NSConcreteStackBlock;
      v23[1] = 1107296256;
      v23[2] = sub_10006D658;
      v23[3] = &unk_1000AD408;
      v22 = _Block_copy(v23);
      objc_msgSend(v18, "prefetchContentForHeadlines:withQualityOfService:completionHandler:", isa, v20, v22, swift_release(v24).n128_f64[0]);
      _Block_release(v22);

    }
    else
    {
      swift_release(v12);
      v16 = sub_10005FA70((uint64_t)_swiftEmptyArrayStorage);
      v23[0] = v16;
      a1(v23);
      swift_bridgeObjectRelease(v16);

    }
  }
  else
  {
    swift_release(v12);
    v17 = sub_10005FA70((uint64_t)_swiftEmptyArrayStorage);
    v23[0] = v17;
    a1(v23);
    swift_bridgeObjectRelease(v17);
  }
}

uint64_t sub_10006D658(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  void (*v4)(uint64_t);
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v4 = *(void (**)(uint64_t))(a1 + 32);
  v3 = *(_QWORD *)(a1 + 40);
  v5 = type metadata accessor for URL(0);
  v6 = sub_10002CC78(0, (unint64_t *)&qword_1000BC3C0, FCAssetHandle_ptr);
  v7 = sub_10001C96C((unint64_t *)&qword_1000BA288, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t)&protocol conformance descriptor for URL);
  v8 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(a2, v5, v6, v7);
  swift_retain(v3);
  v4(v8);
  swift_release(v3);
  return swift_bridgeObjectRelease(v8);
}

id sub_10006D704(uint64_t *a1, id *a2, char *a3, char *a4, uint64_t a5, uint64_t a6, void (*a7)(_QWORD), uint64_t a8, void (*a9)(_QWORD))
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  int *v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  _QWORD *v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char v53;
  uint64_t v54;
  _QWORD *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  id result;
  void *v61;
  id v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  void (**v67)(uint64_t, char *, _QWORD *);
  char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t *v71;
  char *v72;
  char *v73;
  uint64_t *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  char *v79;
  char *v80;
  uint64_t v81;
  char *v82;
  uint64_t v83;
  char *v84;
  uint64_t *v85;
  uint64_t v86;
  char *v87;
  void (**v88)(uint64_t, char *, _QWORD *);
  uint64_t v89;
  uint64_t v90;
  int v91;
  char *v92;
  void (**v93)(uint64_t, char *, _QWORD *);
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  char *v98;
  void (**v99)(uint64_t, char *, _QWORD *);
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  void (*v103)(_QWORD, _QWORD, _QWORD, _QWORD);
  uint64_t v104;
  _QWORD *v105;
  void *v106;
  uint64_t v107;
  uint64_t *v108;
  uint64_t v109;
  char *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  id v114;
  NSString v115;
  id v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  char *v120;
  char *v121;
  uint64_t v122;
  id v123;
  void (*v124)(_QWORD, _QWORD);
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  char *v133;
  uint64_t *v134;
  char *v135;
  uint64_t v136;
  void (*v137)(_QWORD);
  char *v138;
  void (**v139)(uint64_t, char *, _QWORD *);
  char *v140;
  _QWORD *v141;
  char *v142;
  char *v143;
  uint64_t v144;
  uint64_t v145;
  char *v146;
  uint64_t *v147;
  uint64_t v148;
  _QWORD v149[6];

  v136 = a8;
  v137 = a7;
  v148 = a6;
  v144 = a5;
  v142 = a4;
  v12 = sub_10001B520((uint64_t *)&unk_1000BC378);
  __chkstk_darwin(v12);
  v130 = (uint64_t)&v127 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v129 = type metadata accessor for TodayContent(0);
  v128 = *(_QWORD *)(v129 - 8);
  __chkstk_darwin(v129);
  v135 = (char *)&v127 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = sub_10001B520(&qword_1000B93A0);
  v16 = __chkstk_darwin(v15);
  v138 = (char *)&v127 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  v133 = (char *)&v127 - v18;
  v19 = sub_10001B520(&qword_1000BC388);
  v20 = __chkstk_darwin(v19);
  v134 = (uint64_t *)((char *)&v127 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0));
  v22 = __chkstk_darwin(v20);
  v131 = (uint64_t)&v127 - v23;
  __chkstk_darwin(v22);
  v147 = (uint64_t *)((char *)&v127 - v24);
  v141 = (_QWORD *)type metadata accessor for Date(0);
  v139 = (void (**)(uint64_t, char *, _QWORD *))*(v141 - 1);
  __chkstk_darwin(v141);
  v140 = (char *)&v127 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v146 = (char *)type metadata accessor for UUID(0);
  v26 = *((_QWORD *)v146 - 1);
  __chkstk_darwin(v146);
  v28 = (char *)&v127 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v29 = (int *)type metadata accessor for LayoutContext(0);
  v30 = __chkstk_darwin(v29);
  v32 = (char *)&v127 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v30);
  v34 = (uint64_t *)((char *)&v127 - v33);
  v132 = *a1;
  v35 = (id *)((char *)a2 + *(int *)(type metadata accessor for ContentServiceRequest(0) + 20));
  v143 = a3;
  objc_msgSend(a3, "headlineScale");
  v37 = v36;
  v38 = *v35;
  v39 = v35[1];
  v40 = v29[6];
  v41 = (char *)v35 + v40;
  v42 = (char *)v34 + v40;
  v43 = type metadata accessor for InternalWidgetFamily(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v43 - 8) + 16))(v42, v41, v43);
  v44 = v29[8];
  v45 = (_QWORD *)((char *)v35 + v29[7]);
  v46 = *v45;
  v47 = v45[1];
  v48 = (char *)v35 + v44;
  v49 = (char *)v34 + v44;
  v50 = type metadata accessor for ContentSizeCategory(0);
  v51 = (*(uint64_t (**)(char *, char *, uint64_t))(*(_QWORD *)(v50 - 8) + 16))(v49, v48, v50);
  v52 = *(_QWORD *)((char *)v35 + v29[9]);
  v53 = *((_BYTE *)v35 + v29[12]);
  v54 = (uint64_t)a2;
  *v34 = v38;
  v34[1] = v39;
  v55 = (_QWORD *)((char *)v34 + v29[7]);
  *v55 = v46;
  v55[1] = v47;
  *(_QWORD *)((char *)v34 + v29[9]) = v52;
  *(_QWORD *)((char *)v34 + v29[10]) = v37;
  *((_BYTE *)v34 + v29[11]) = 0;
  *((_BYTE *)v34 + v29[12]) = v53;
  v56 = UUID.init()(v51);
  v57 = UUID.uuidString.getter(v56);
  v59 = v58;
  (*(void (**)(char *, char *))(v26 + 8))(v28, v146);
  v146 = v32;
  sub_10002A83C((uint64_t)v34, (uint64_t)v32, type metadata accessor for LayoutContext);
  result = objc_msgSend(*a2, "request");
  if (result)
  {
    v61 = result;
    v62 = objc_msgSend(result, "tagID");

    if (v62)
    {
      v64 = static String._unconditionallyBridgeFromObjectiveC(_:)(v62);
      v66 = v65;

    }
    else
    {
      v64 = 0;
      v66 = 0;
    }
    v67 = v139;
    v68 = v140;
    Date.init()(v63);
    v69 = type metadata accessor for TrackableWidgetState(0);
    v70 = swift_allocObject(v69, *(unsigned int *)(v69 + 48), *(unsigned __int16 *)(v69 + 52));
    v67[4](v70 + OBJC_IVAR____TtC7NewsTag20TrackableWidgetState_contentFetchDate, v68, v141);
    v71 = (uint64_t *)(v70 + OBJC_IVAR____TtC7NewsTag20TrackableWidgetState_entryID);
    *v71 = v57;
    v71[1] = v59;
    v73 = v142;
    v72 = v143;
    *(_QWORD *)(v70 + OBJC_IVAR____TtC7NewsTag20TrackableWidgetState_results) = v143;
    *(_QWORD *)(v70 + OBJC_IVAR____TtC7NewsTag20TrackableWidgetState_fetchInfo) = v73;
    sub_10002AC74((uint64_t)v146, v70 + OBJC_IVAR____TtC7NewsTag20TrackableWidgetState_layoutContext, type metadata accessor for LayoutContext);
    v74 = (uint64_t *)(v70 + OBJC_IVAR____TtC7NewsTag20TrackableWidgetState_contentID);
    *v74 = v64;
    v74[1] = v66;
    *(_QWORD *)(v70 + OBJC_IVAR____TtC7NewsTag20TrackableWidgetState_appearanceType) = 0;
    v75 = v70 + OBJC_IVAR____TtC7NewsTag20TrackableWidgetState_visibleRect;
    *(_OWORD *)v75 = 0u;
    *(_OWORD *)(v75 + 16) = 0u;
    *(_BYTE *)(v75 + 32) = 1;
    *(_QWORD *)(v70 + OBJC_IVAR____TtC7NewsTag20TrackableWidgetState_stackKind) = 0;
    *(_QWORD *)(v70 + OBJC_IVAR____TtC7NewsTag20TrackableWidgetState_stackLocation) = 0;
    v76 = type metadata accessor for ImageStore();
    v77 = swift_allocObject(v76, 24, 7);
    v78 = v144;
    *(_QWORD *)(v77 + 16) = v144;
    v79 = v73;
    v80 = v72;
    v81 = v78;
    v82 = v80;
    swift_bridgeObjectRetain(v81);
    v83 = v148;
    v84 = sub_10006E110(v54, v82, v77);
    v85 = v147;
    v86 = v145;
    sub_10006E89C(v54, v83, v147);
    if (v86)
    {
      swift_bridgeObjectRelease(v84);
      a9(v86);
      swift_errorRelease(v86);
      swift_release(v70);
      swift_release(v77);
    }
    else
    {
      v145 = v54;
      v146 = v79;
      v143 = v84;
      v144 = v77;
      v87 = *(char **)(v83 + 72);
      v88 = *(void (***)(uint64_t, char *, _QWORD *))(v83 + 136);
      v89 = v131;
      sub_100071EA8((uint64_t)v85, v131);
      v90 = sub_10001B520((uint64_t *)&unk_1000BC390);
      v141 = *(_QWORD **)(*(_QWORD *)(v90 - 8) + 48);
      v91 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v141)(v89, 1, v90);
      v142 = v82;
      v139 = v88;
      v140 = v87;
      if (v91 == 1)
      {
        v92 = v87;
        v93 = v88;
        v94 = v132;
        swift_bridgeObjectRetain(v132);
        sub_10002CCF4(v89, &qword_1000BC388);
        v95 = type metadata accessor for URL(0);
        v96 = (uint64_t)v133;
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v95 - 8) + 56))(v133, 1, 1, v95);
      }
      else
      {
        v97 = *(_QWORD *)(v89 + 8);
        v98 = v87;
        v99 = v88;
        v94 = v132;
        swift_bridgeObjectRetain(v132);
        swift_bridgeObjectRelease(v97);
        v100 = v89 + *(int *)(v90 + 48);
        v101 = type metadata accessor for URL(0);
        v102 = *(_QWORD *)(v101 - 8);
        v96 = (uint64_t)v133;
        (*(void (**)(char *, uint64_t, uint64_t))(v102 + 32))(v133, v100, v101);
        v103 = *(void (**)(_QWORD, _QWORD, _QWORD, _QWORD))(v102 + 56);
        v85 = v147;
        v103(v96, 0, 1, v101);
      }
      v104 = type metadata accessor for EngagementURLProvider(0);
      v105 = (_QWORD *)swift_allocObject(v104, *(unsigned int *)(v104 + 48), *(unsigned __int16 *)(v104 + 52));
      v106 = v139;
      v105[2] = v140;
      v105[3] = v106;
      v105[4] = v70;
      v105[5] = v94;
      sub_10005E488(v96, (uint64_t)v105 + OBJC_IVAR____TtC7NewsTag21EngagementURLProvider_sharedDirectoryFileUrl);
      v149[3] = v104;
      v149[4] = &off_1000AD308;
      v149[0] = v105;
      v107 = *(_QWORD *)(v70 + OBJC_IVAR____TtC7NewsTag20TrackableWidgetState_appearanceType);
      swift_retain(v70);
      swift_retain(v105);
      sub_10006EA30(v146, v145, v107, v138);
      v108 = v134;
      sub_100071EA8((uint64_t)v85, (uint64_t)v134);
      if (((unsigned int (*)(uint64_t *, uint64_t, uint64_t))v141)(v108, 1, v90) == 1)
      {
        v109 = sub_10002CCF4((uint64_t)v108, &qword_1000BC388);
        v145 = 0;
        v141 = 0;
      }
      else
      {
        v145 = *v108;
        v141 = (_QWORD *)v108[1];
        v110 = (char *)v108 + *(int *)(v90 + 48);
        v111 = type metadata accessor for URL(0);
        v109 = (*(uint64_t (**)(char *, uint64_t))(*(_QWORD *)(v111 - 8) + 8))(v110, v111);
      }
      v112 = (uint64_t)v135;
      v113 = v144;
      v114 = (id)NewsCoreUserDefaults(v109);
      v115 = String._bridgeToObjectiveC()();
      v116 = objc_msgSend(v114, "stringForKey:", v115);

      if (v116)
      {
        v117 = static String._unconditionallyBridgeFromObjectiveC(_:)(v116);
        v119 = v118;

      }
      else
      {
        v117 = 0;
        v119 = 0xE000000000000000;
      }
      v120 = v146;
      v121 = v142;
      swift_retain(v70);
      swift_retain(v113);
      sub_10005D57C(v121, (uint64_t)v120, v113, v149, (uint64_t)v143, 0, (uint64_t)v138, v70, v112, v145, (uint64_t)v141, v117, v119);
      v122 = v148;
      sub_10001D9B4((_QWORD *)(v148 + 96), *(_QWORD *)(v148 + 120));
      v123 = sub_10001DEA8();
      objc_msgSend(v123, "tickle");

      v124 = *(void (**)(_QWORD, _QWORD))(v122 + 16);
      if (v124)
      {
        v125 = *(_QWORD *)(v122 + 24);
        v126 = v130;
        sub_10002A83C(v112, v130, type metadata accessor for TodayContent);
        (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v128 + 56))(v126, 0, 1, v129);
        swift_retain(v125);
        v124(v126, 0);
        sub_100071E98((uint64_t)v124, v125);
        sub_10002CCF4(v126, (uint64_t *)&unk_1000BC378);
      }
      v137(v112);
      swift_release(v70);
      swift_release(v105);
      swift_release(v113);
      sub_100027D34(v112, type metadata accessor for TodayContent);
      sub_10002CCF4((uint64_t)v147, &qword_1000BC388);
    }
    return (id)sub_100027D34((uint64_t)v34, type metadata accessor for LayoutContext);
  }
  else
  {
    __break(1u);
  }
  return result;
}

char *sub_10006E110(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  id v22;
  id v23;
  uint64_t v24;
  uint64_t v25;
  id v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  void *v31;
  id v32;
  void *v33;
  uint64_t v34;
  void (*v35)(char *, uint64_t, uint64_t);
  void (*v36)(char *, _QWORD, uint64_t, uint64_t);
  char *v37;
  void *v38;
  id v39;
  char *v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  char *v44;
  uint64_t v45;
  char *v46;
  void *v47;
  id v48;
  char v49;
  char *result;
  unint64_t v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t inited;
  char *v56;
  id v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  id v68;
  uint64_t v69;
  id v70;
  id *v71;
  uint64_t v72;
  char *v73;
  uint64_t v74;
  char v75[64];
  __objc2_prot *v76;
  uint64_t v77;
  uint64_t v78;

  v72 = a3;
  v4 = type metadata accessor for ImageStoreKey(0);
  __chkstk_darwin(v4);
  v6 = (char *)&v68 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_10001B520(&qword_1000B93A0);
  __chkstk_darwin(v7);
  v9 = (char *)&v68 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for URL(0);
  v74 = *(_QWORD *)(v10 - 8);
  v11 = __chkstk_darwin(v10);
  v13 = (uint64_t)&v68 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v73 = (char *)&v68 - v14;
  v15 = type metadata accessor for InternalWidgetFamily(0);
  v16 = *(_QWORD *)(v15 - 8);
  __chkstk_darwin(v15);
  v18 = (char *)&v68 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for ContentServiceRequest(0);
  type metadata accessor for LayoutContext(0);
  (*(void (**)(char *, _QWORD, uint64_t))(v16 + 104))(v18, enum case for InternalWidgetFamily.systemSmall(_:), v15);
  v19 = sub_10001C96C((unint64_t *)&qword_1000BC3A0, (uint64_t (*)(uint64_t))&type metadata accessor for InternalWidgetFamily, (uint64_t)&protocol conformance descriptor for InternalWidgetFamily);
  dispatch thunk of RawRepresentable.rawValue.getter(&v78, v15, v19);
  dispatch thunk of RawRepresentable.rawValue.getter(&v77, v15, v19);
  v21 = v77;
  v20 = v78;
  (*(void (**)(char *, uint64_t))(v16 + 8))(v18, v15);
  if (v20 != v21)
    return (char *)sub_10005FC04((uint64_t)_swiftEmptyArrayStorage);
  v22 = objc_msgSend(a2, "sections");
  v23 = objc_msgSend(v22, "array");

  v24 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v23, (char *)&type metadata for Any + 8);
  v25 = (uint64_t)sub_1000500E8(v24);
  swift_bridgeObjectRelease(v24);
  if ((unint64_t)v25 >> 62)
  {
    if (v25 < 0)
      v63 = v25;
    else
      v63 = v25 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v25);
    v64 = _CocoaArrayWrapper.endIndex.getter(v63);
    swift_bridgeObjectRelease(v25);
    if (!v64)
      goto LABEL_52;
  }
  else if (!*(_QWORD *)((v25 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
LABEL_52:
    swift_bridgeObjectRelease(v25);
    return (char *)sub_10005FC04((uint64_t)_swiftEmptyArrayStorage);
  }
  if ((v25 & 0xC000000000000001) != 0)
  {
    v26 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v25);
  }
  else
  {
    if (!*(_QWORD *)((v25 & 0xFFFFFFFFFFFFF8) + 0x10))
    {
      __break(1u);
LABEL_48:
      if (v25 < 0)
        v65 = v25;
      else
        v65 = v25 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v25);
      v66 = _CocoaArrayWrapper.endIndex.getter(v65);
      swift_bridgeObjectRelease(v25);
      if (v66)
        goto LABEL_9;
      goto LABEL_52;
    }
    v26 = *(id *)(v25 + 32);
  }
  v27 = v26;
  swift_bridgeObjectRelease(v25);
  sub_10004ECE8();
  v25 = v28;

  if ((unint64_t)v25 >> 62)
    goto LABEL_48;
  if (!*(_QWORD *)((v25 & 0xFFFFFFFFFFFFF8) + 0x10))
    goto LABEL_52;
LABEL_9:
  if ((v25 & 0xC000000000000001) != 0)
    goto LABEL_56;
  if (!*(_QWORD *)((v25 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    __break(1u);
    goto LABEL_58;
  }
  v29 = *(_QWORD *)(v25 + 32);
  swift_unknownObjectRetain(v29);
  while (1)
  {
    swift_bridgeObjectRelease(v25);
    v76 = &OBJC_PROTOCOL___NTHeadlineProviding;
    v30 = (void *)swift_dynamicCastObjCProtocolConditional(v29, 1, &v76);
    if (!v30)
    {
      swift_unknownObjectRelease(v29);
      return (char *)sub_10005FC04((uint64_t)_swiftEmptyArrayStorage);
    }
    v31 = v30;
    v32 = objc_msgSend(v30, "thumbnailRemoteURL");
    if (!v32)
    {
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v74 + 56))(v9, 1, 1, v10);
LABEL_31:
      sub_10002CCF4((uint64_t)v9, &qword_1000B93A0);
LABEL_32:
      v51 = sub_10005FC04((uint64_t)_swiftEmptyArrayStorage);
      swift_unknownObjectRelease(v29);
      return (char *)v51;
    }
    v33 = v32;
    static URL._unconditionallyBridgeFromObjectiveC(_:)(v32);

    v34 = v74;
    v35 = *(void (**)(char *, uint64_t, uint64_t))(v74 + 32);
    v35(v9, v13, v10);
    v36 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v34 + 56);
    v36(v9, 0, 1, v10);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v34 + 48))(v9, 1, v10) == 1)
      goto LABEL_31;
    v70 = v31;
    v37 = v73;
    v35(v73, (uint64_t)v9, v10);
    (*(void (**)(char *, char *, uint64_t))(v34 + 16))(v6, v37, v10);
    v36(v6, 0, 1, v10);
    v38 = sub_10006BB90((uint64_t)v6);
    sub_100027D34((uint64_t)v6, type metadata accessor for ImageStoreKey);
    if (!v38)
    {
      (*(void (**)(char *, uint64_t))(v34 + 8))(v37, v10);
      goto LABEL_32;
    }
    v39 = objc_msgSend(v71[10], "colorsForImage:", v38);
    v72 = sub_10002CC78(0, (unint64_t *)&qword_1000B9DB0, UIColor_ptr);
    v13 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v39, v72);

    v68 = v38;
    v69 = v29;
    if ((unint64_t)v13 >> 62)
      break;
    v40 = *(char **)((v13 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain(v13);
    if (!v40)
      goto LABEL_25;
LABEL_18:
    v71 = (id *)objc_opt_self(UIColor);
    v41 = v13 & 0xC000000000000001;
    v42 = 4;
    v6 = v40;
    v43 = v13 & 0xC000000000000001;
    while (1)
    {
      v25 = v42 - 4;
      v44 = v41
          ? (char *)specialized _ArrayBuffer._getElementSlowPath(_:)(v42 - 4, v13)
          : (char *)*(id *)(v13 + 8 * v42);
      v9 = v44;
      v46 = (char *)(v42 - 3);
      if (__OFADD__(v25, 1))
        break;
      v47 = (void *)UIColor.legibleForeground.getter(v44, v45);
      v48 = objc_msgSend(v71, "whiteColor");
      v49 = static NSObject.== infix(_:_:)(v47, v48);

      if ((v49 & 1) != 0)
      {
        result = (char *)swift_bridgeObjectRelease(v13);
        goto LABEL_35;
      }

      ++v42;
      v40 = v6;
      v41 = v13 & 0xC000000000000001;
      if (v46 == v6)
        goto LABEL_25;
    }
    __break(1u);
LABEL_56:
    v29 = specialized _ArrayBuffer._getElementSlowPath(_:)(0, v25);
  }
LABEL_58:
  if (v13 < 0)
    v67 = v13;
  else
    v67 = v13 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v13);
  v40 = (char *)_CocoaArrayWrapper.endIndex.getter(v67);
  if (v40)
    goto LABEL_18;
LABEL_25:
  swift_bridgeObjectRelease(v13);
  if (qword_1000B8D20 != -1)
    swift_once(&qword_1000B8D20, sub_100067DC0);
  if (!v40)
  {
    v9 = (char *)(id)qword_1000C07C8;
    swift_bridgeObjectRelease(v13);
    v53 = v73;
    v52 = v74;
LABEL_40:
    v54 = sub_10001B520(&qword_1000BC3B0);
    inited = swift_initStackObject(v54, v75);
    *(_OWORD *)(inited + 16) = xmmword_10008AC60;
    v56 = v9;
    v57 = objc_msgSend(v70, "identifier");
    v58 = static String._unconditionallyBridgeFromObjectiveC(_:)(v57);
    v60 = v59;

    *(_QWORD *)(inited + 32) = v58;
    *(_QWORD *)(inited + 40) = v60;
    *(_QWORD *)(inited + 48) = v40;
    *(_QWORD *)(inited + 56) = v56;
    v61 = v40;
    v62 = v56;
    v51 = sub_10005FC04(inited);

    swift_unknownObjectRelease(v69);
    (*(void (**)(char *, uint64_t))(v52 + 8))(v53, v10);
    return (char *)v51;
  }
  v43 = v13 & 0xC000000000000001;
  result = (char *)(id)qword_1000C07C8;
  v9 = result;
LABEL_35:
  if (v43)
  {
    v40 = (char *)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v13);
    v53 = v73;
    v52 = v74;
LABEL_38:
    swift_bridgeObjectRelease(v13);
    goto LABEL_40;
  }
  v53 = v73;
  v52 = v74;
  if (*(_QWORD *)((v13 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    v40 = (char *)*(id *)(v13 + 32);
    goto LABEL_38;
  }
  __break(1u);
  return result;
}

uint64_t sub_10006E89C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v7 = type metadata accessor for UUID(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)&v23 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = a1 + *(int *)(type metadata accessor for ContentServiceRequest(0) + 20);
  v12 = type metadata accessor for LayoutContext(0);
  if ((*(_BYTE *)(v11 + *(int *)(v12 + 48)) & 1) != 0)
  {
    v13 = sub_10001B520((uint64_t *)&unk_1000BC390);
    return (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 56))(a3, 1, 1, v13);
  }
  else
  {
    v15 = UUID.init()(v12);
    v16 = UUID.uuidString.getter(v15);
    v24 = v3;
    v17 = v16;
    v19 = v18;
    (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
    v20 = sub_10001B520((uint64_t *)&unk_1000BC390);
    v21 = (uint64_t)a3 + *(int *)(v20 + 48);
    *a3 = v17;
    a3[1] = (uint64_t)v19;
    sub_10001D9B4((_QWORD *)(a2 + 96), *(_QWORD *)(a2 + 120));
    swift_bridgeObjectRetain(v19);
    v22 = v24;
    sub_10001E258(v17, v19, v21);
    if (v22)
    {
      return swift_bridgeObjectRelease_n(v19, 2);
    }
    else
    {
      (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 56))(a3, 0, 1, v20);
      return swift_bridgeObjectRelease(v19);
    }
  }
}

uint64_t sub_10006EA30@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char *a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  id v15;
  void *v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t ObjectType;
  void (*v22)(uint64_t, uint64_t);
  uint64_t v23;
  void (*v24)(char *, char *, uint64_t);
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unsigned __int8 v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  void *v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  void *v54;
  uint64_t v55;
  void (*v57)(char *, char *, uint64_t);
  char *v58;
  uint64_t v59;
  unint64_t v60;

  v8 = sub_10001B520(&qword_1000B93A0);
  __chkstk_darwin(v8);
  v10 = (char *)&v57 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for URL(0);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v14 = (char *)&v57 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = objc_msgSend(a1, "widgetConfig");
  v16 = v15;
  if ((unint64_t)(a3 - 1) < 4)
  {

    goto LABEL_3;
  }
  if (a3)
  {

LABEL_14:
    v37 = sub_10001B520(&qword_1000B9980);
    v38 = swift_allocObject(v37, 72, 7);
    *(_OWORD *)(v38 + 16) = xmmword_10008AC60;
    v59 = 0;
    v60 = 0xE000000000000000;
    v39 = type metadata accessor for ContentServiceRequest(0);
    _print_unlocked<A, B>(_:_:)(a2, &v59, v39, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
    v40 = v59;
    v41 = v60;
    *(_QWORD *)(v38 + 56) = &type metadata for String;
    *(_QWORD *)(v38 + 64) = sub_10001FB34();
    *(_QWORD *)(v38 + 32) = v40;
    *(_QWORD *)(v38 + 40) = v41;
    sub_10002CC78(0, (unint64_t *)&qword_1000BBB00, OS_os_log_ptr);
    v42 = (void *)static OS_os_log.default.getter();
    v43 = static os_log_type_t.default.getter();
    os_log(_:dso:log:type:_:)("background interaction not allowed, so returning no-op URL for request %{public}@", 81, 2, &_mh_execute_header, v42, v43, v38);
    swift_bridgeObjectRelease(v38);

    if (qword_1000B8D28 != -1)
      swift_once(&qword_1000B8D28, sub_100070244);
    v44 = sub_10005E518(v11, (uint64_t)qword_1000C07D0);
    (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(a4, v44, v11);
    goto LABEL_22;
  }
  if (v15)
  {
    v29 = objc_msgSend(v15, "widgetBackgroundInteractionEnabled");

    if ((v29 & 1) == 0)
      goto LABEL_14;
  }
LABEL_3:
  v17 = type metadata accessor for ContentServiceRequest(0);
  v18 = (uint64_t *)(a2 + *(int *)(v17 + 24));
  v19 = *v18;
  if (*v18)
  {
    v58 = a4;
    v20 = v18[1];
    ObjectType = swift_getObjectType(v19);
    v22 = *(void (**)(uint64_t, uint64_t))(v20 + 32);
    v23 = v20;
    a4 = v58;
    v22(ObjectType, v23);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11) != 1)
    {
      v24 = *(void (**)(char *, char *, uint64_t))(v12 + 32);
      v24(v14, v10, v11);
      v25 = sub_10001B520(&qword_1000B9980);
      v26 = swift_allocObject(v25, 152, 7);
      *(_OWORD *)(v26 + 16) = xmmword_10008AC70;
      v59 = 0;
      v60 = 0xE000000000000000;
      v57 = v24;
      v27 = 0xE700000000000000;
      v28 = 0x736569726F7473;
      switch(a3)
      {
        case 0:
          break;
        case 1:
          v27 = 0xEA00000000007365;
          v28 = 0x69726F7473206F6ELL;
          break;
        case 2:
          v27 = 0xE500000000000000;
          v28 = 0x726F727265;
          break;
        case 3:
          v28 = 0x656E696C66666FLL;
          break;
        case 4:
          v27 = 0xEB00000000726564;
          v28 = 0x6C6F686563616C70;
          break;
        default:
          v28 = 0x6E776F6E6B6E75;
          break;
      }
      v45 = v27;
      String.append(_:)(*(Swift::String *)&v28);
      swift_bridgeObjectRelease(v27);
      v46 = v59;
      v47 = v60;
      *(_QWORD *)(v26 + 56) = &type metadata for String;
      v48 = sub_10001FB34();
      *(_QWORD *)(v26 + 64) = v48;
      *(_QWORD *)(v26 + 32) = v46;
      *(_QWORD *)(v26 + 40) = v47;
      v49 = sub_10001C96C((unint64_t *)&qword_1000B9988, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t)&protocol conformance descriptor for URL);
      v50 = dispatch thunk of CustomStringConvertible.description.getter(v11, v49);
      *(_QWORD *)(v26 + 96) = &type metadata for String;
      *(_QWORD *)(v26 + 104) = v48;
      *(_QWORD *)(v26 + 72) = v50;
      *(_QWORD *)(v26 + 80) = v51;
      v59 = 0;
      v60 = 0xE000000000000000;
      _print_unlocked<A, B>(_:_:)(a2, &v59, v17, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
      v52 = v59;
      v53 = v60;
      *(_QWORD *)(v26 + 136) = &type metadata for String;
      *(_QWORD *)(v26 + 144) = v48;
      *(_QWORD *)(v26 + 112) = v52;
      *(_QWORD *)(v26 + 120) = v53;
      sub_10002CC78(0, (unint64_t *)&qword_1000BBB00, OS_os_log_ptr);
      v54 = (void *)static OS_os_log.default.getter();
      v55 = static os_log_type_t.default.getter();
      os_log(_:dso:log:type:_:)("background interaction allowed with appearance type %{public}@, so returning %@ for request %{public}@", 102, 2, &_mh_execute_header, v54, v55, v26);
      swift_bridgeObjectRelease(v26);

      a4 = v58;
      v57(v58, v14, v11);
LABEL_22:
      v36 = 0;
      return (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v12 + 56))(a4, v36, 1, v11);
    }
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v12 + 56))(v10, 1, 1, v11);
  }
  sub_10002CCF4((uint64_t)v10, &qword_1000B93A0);
  v30 = sub_10001B520(&qword_1000B9980);
  v31 = swift_allocObject(v30, 72, 7);
  *(_OWORD *)(v31 + 16) = xmmword_10008AC60;
  v59 = 0;
  v60 = 0xE000000000000000;
  _print_unlocked<A, B>(_:_:)(a2, &v59, v17, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
  v32 = v59;
  v33 = v60;
  *(_QWORD *)(v31 + 56) = &type metadata for String;
  *(_QWORD *)(v31 + 64) = sub_10001FB34();
  *(_QWORD *)(v31 + 32) = v32;
  *(_QWORD *)(v31 + 40) = v33;
  sub_10002CC78(0, (unint64_t *)&qword_1000BBB00, OS_os_log_ptr);
  v34 = (void *)static OS_os_log.default.getter();
  v35 = static os_log_type_t.default.getter();
  os_log(_:dso:log:type:_:)("no configuration, so returning nil URL for request %{public}@", 61, 2, &_mh_execute_header, v34, v35, v31);
  swift_bridgeObjectRelease(v31);

  v36 = 1;
  return (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v12 + 56))(a4, v36, 1, v11);
}

uint64_t sub_10006EFDC(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t))
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  void (*v9)(char *, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;

  v6 = sub_10001B520((uint64_t *)&unk_1000BC378);
  __chkstk_darwin(v6);
  v8 = (char *)&v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *(void (**)(char *, uint64_t))(a2 + 16);
  if (v9)
  {
    v10 = *(_QWORD *)(a2 + 24);
    v11 = type metadata accessor for TodayContent(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 56))(v8, 1, 1, v11);
    swift_retain(v10);
    v9(v8, a1);
    sub_100071E98((uint64_t)v9, v10);
    sub_10002CCF4((uint64_t)v8, (uint64_t *)&unk_1000BC378);
  }
  return a3(a1);
}

void sub_10006F0BC(id *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  int *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  id v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  double v30;
  CGFloat v31;
  id v32;
  UIImage *v33;
  UIImage *v34;
  uint64_t v35;
  char isUniquelyReferenced_nonNull_native;
  id v37;
  void *v38;
  id v39;
  NSString v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t *v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char v60;
  _QWORD *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  void (*v66)(char *, uint64_t);
  id v67;
  void *v68;
  id v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t *v76;
  uint64_t v77;
  id v78;
  uint64_t *v79;
  uint64_t v80;
  uint64_t v81;
  id v82;
  char *v83;
  void *v84;
  uint64_t v85;
  uint64_t v86;
  char *v87;
  uint64_t v88;
  uint64_t v89;
  void *v90;
  void *v91;
  uint64_t v92;
  uint64_t v93;
  void *v94;
  id v95;
  unint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  _QWORD *v102;
  uint64_t v103;
  uint64_t v104;
  id v105;
  uint64_t v106;
  id v107;
  uint64_t v108;
  id v109;
  NSString v110;
  id v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  __n128 v115;
  char *v116;
  uint64_t v117;
  uint64_t v118;
  char *v119;
  uint64_t v120;
  char *v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  char *v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  _QWORD *v129;
  uint64_t v130;
  uint64_t v131;
  id v132;
  char *v133;
  id *v134;
  _QWORD v135[7];

  v128 = a2;
  v123 = a3;
  v5 = sub_10001B520(&qword_1000B93A0);
  v6 = __chkstk_darwin(v5);
  v119 = (char *)&v116 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v116 = (char *)&v116 - v8;
  v9 = type metadata accessor for URL(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v122 = (uint64_t)&v116 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for Date(0);
  v126 = *(_QWORD *)(v12 - 8);
  v127 = v12;
  __chkstk_darwin(v12);
  v125 = (char *)&v116 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v131 = type metadata accessor for UUID(0);
  v129 = *(_QWORD **)(v131 - 8);
  v14 = __chkstk_darwin(v131);
  v121 = (char *)&v116 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  v17 = (char *)&v116 - v16;
  v18 = (int *)type metadata accessor for LayoutContext(0);
  v19 = __chkstk_darwin(v18);
  v133 = (char *)&v116 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v19);
  v22 = (char **)((char *)&v116 - v21);
  v23 = type metadata accessor for ImageStoreKey(0);
  __chkstk_darwin(v23);
  v25 = (char *)&v116 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v124 = v3;
  v26 = objc_msgSend(*(id *)(*sub_10001D9B4((_QWORD *)(v3 + 32), *(_QWORD *)(v3 + 56)) + 32), "placeholderResultsWithOperationInfo:", *a1);
  v27 = swift_allocObject(&unk_1000AD440, 24, 7);
  *(_QWORD *)(v27 + 16) = &_swiftEmptyDictionarySingleton;
  v120 = type metadata accessor for ContentServiceRequest(0);
  v28 = *(int *)(v120 + 20);
  v134 = a1;
  v29 = (id *)((char *)a1 + v28);
  v132 = v26;
  objc_msgSend(v26, "headlineScale");
  sub_10004698C();
  v31 = v30;
  v32 = objc_msgSend((id)objc_opt_self(UIColor), "blackColor");
  v33 = sub_100067E5C(v31, v31);

  if (v33)
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v10 + 56))(v25, 1, 1, v9);
    v34 = v33;
    v35 = *(_QWORD *)(v27 + 16);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v35);
    v135[0] = v35;
    *(_QWORD *)(v27 + 16) = 0x8000000000000000;
    sub_100066684((uint64_t)v34, (uint64_t)v25, isUniquelyReferenced_nonNull_native);
    *(_QWORD *)(v27 + 16) = v135[0];
    swift_bridgeObjectRelease(0x8000000000000000);
    sub_100027D34((uint64_t)v25, type metadata accessor for ImageStoreKey);

  }
  v130 = v27;
  v117 = v10;
  v118 = v9;
  v37 = objc_msgSend(objc_allocWithZone((Class)NTPBTodayResultOperationFetchInfo), "init");
  if (!v37)
  {
    __break(1u);
LABEL_18:
    __break(1u);
    return;
  }
  v38 = v37;
  v39 = v132;
  v40 = objc_msgSend(v132, "sourceIdentifier");
  if (!v40)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)(0);
    v42 = v41;
    v40 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v42);
  }
  objc_msgSend(v38, "setTodaySourceIdentifier:", v40);

  objc_msgSend(v39, "headlineScale");
  v44 = v43;
  v45 = *v29;
  v46 = v29[1];
  v47 = v18[6];
  v48 = (char *)v29 + v47;
  v49 = (char *)v22 + v47;
  v50 = type metadata accessor for InternalWidgetFamily(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v50 - 8) + 16))(v49, v48, v50);
  v51 = v18[8];
  v52 = (_QWORD *)((char *)v29 + v18[7]);
  v53 = *v52;
  v54 = v52[1];
  v55 = (char *)v29 + v51;
  v56 = (char *)v22 + v51;
  v57 = type metadata accessor for ContentSizeCategory(0);
  v58 = (*(uint64_t (**)(char *, char *, uint64_t))(*(_QWORD *)(v57 - 8) + 16))(v56, v55, v57);
  v59 = *(_QWORD *)((char *)v29 + v18[9]);
  v60 = *((_BYTE *)v29 + v18[12]);
  *v22 = v45;
  v22[1] = v46;
  v61 = (_QWORD *)((char *)v22 + v18[7]);
  *v61 = v53;
  v61[1] = v54;
  *(_QWORD *)((char *)v22 + v18[9]) = v59;
  *(_QWORD *)((char *)v22 + v18[10]) = v44;
  *((_BYTE *)v22 + v18[11]) = 1;
  *((_BYTE *)v22 + v18[12]) = v60;
  v62 = UUID.init()(v58);
  v63 = UUID.uuidString.getter(v62);
  v65 = v64;
  v66 = (void (*)(char *, uint64_t))v129[1];
  v66(v17, v131);
  sub_10002A83C((uint64_t)v22, (uint64_t)v133, type metadata accessor for LayoutContext);
  v67 = objc_msgSend(*v134, "request");
  if (!v67)
    goto LABEL_18;
  v68 = v67;
  v69 = objc_msgSend(v67, "tagID");

  if (v69)
  {
    v70 = static String._unconditionallyBridgeFromObjectiveC(_:)(v69);
    v72 = v71;

  }
  else
  {
    v70 = 0;
    v72 = 0;
  }
  v73 = v125;
  Date.init()();
  v74 = type metadata accessor for TrackableWidgetState(0);
  v75 = swift_allocObject(v74, *(unsigned int *)(v74 + 48), *(unsigned __int16 *)(v74 + 52));
  (*(void (**)(uint64_t, char *, uint64_t))(v126 + 32))(v75 + OBJC_IVAR____TtC7NewsTag20TrackableWidgetState_contentFetchDate, v73, v127);
  v76 = (uint64_t *)(v75 + OBJC_IVAR____TtC7NewsTag20TrackableWidgetState_entryID);
  *v76 = v63;
  v76[1] = v65;
  v78 = v132;
  v77 = (uint64_t)v133;
  *(_QWORD *)(v75 + OBJC_IVAR____TtC7NewsTag20TrackableWidgetState_results) = v132;
  *(_QWORD *)(v75 + OBJC_IVAR____TtC7NewsTag20TrackableWidgetState_fetchInfo) = v38;
  sub_10002AC74(v77, v75 + OBJC_IVAR____TtC7NewsTag20TrackableWidgetState_layoutContext, type metadata accessor for LayoutContext);
  v79 = (uint64_t *)(v75 + OBJC_IVAR____TtC7NewsTag20TrackableWidgetState_contentID);
  *v79 = v70;
  v79[1] = v72;
  v80 = v128;
  *(_QWORD *)(v75 + OBJC_IVAR____TtC7NewsTag20TrackableWidgetState_appearanceType) = v128;
  v81 = v75 + OBJC_IVAR____TtC7NewsTag20TrackableWidgetState_visibleRect;
  *(_OWORD *)v81 = 0u;
  *(_OWORD *)(v81 + 16) = 0u;
  *(_BYTE *)(v81 + 32) = 1;
  *(_QWORD *)(v75 + OBJC_IVAR____TtC7NewsTag20TrackableWidgetState_stackKind) = 0;
  *(_QWORD *)(v75 + OBJC_IVAR____TtC7NewsTag20TrackableWidgetState_stackLocation) = 0;
  v82 = v38;
  v83 = (char *)v78;
  v84 = v83;
  if (v80 == 4)
  {
    v85 = v130;
    sub_10006FAD0(v124, v75, v83, v82, v130, 1, (uint64_t)v134, v123);

    swift_release(v75);
    sub_100027D34((uint64_t)v22, type metadata accessor for LayoutContext);
    v86 = v85;
  }
  else
  {
    v132 = v82;
    v133 = v83;
    v87 = v121;
    v88 = UUID.init()(v83);
    v89 = UUID.uuidString.getter(v88);
    v91 = v90;
    v66(v87, v131);
    v92 = v124;
    sub_10001D9B4((_QWORD *)(v124 + 96), *(_QWORD *)(v124 + 120));
    v93 = v122;
    sub_10001E258(v89, v91, v122);
    v131 = v89;
    v94 = *(void **)(v92 + 136);
    v129 = *(id *)(v92 + 72);
    v95 = v94;
    swift_retain(v75);
    v96 = sub_10005FA70((uint64_t)_swiftEmptyArrayStorage);
    v97 = v93;
    v98 = v117;
    v99 = (uint64_t)v116;
    v100 = v118;
    (*(void (**)(char *, uint64_t, uint64_t))(v117 + 16))(v116, v97, v118);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v98 + 56))(v99, 0, 1, v100);
    v101 = type metadata accessor for EngagementURLProvider(0);
    v102 = (_QWORD *)swift_allocObject(v101, *(unsigned int *)(v101 + 48), *(unsigned __int16 *)(v101 + 52));
    v102[2] = v129;
    v102[3] = v95;
    v102[4] = v75;
    v102[5] = v96;
    sub_10005E488(v99, (uint64_t)v102 + OBJC_IVAR____TtC7NewsTag21EngagementURLProvider_sharedDirectoryFileUrl);
    v103 = *(_QWORD *)(v130 + 16);
    v104 = type metadata accessor for ImageStore();
    v129 = (_QWORD *)swift_allocObject(v104, 24, 7);
    v129[2] = v103;
    v135[3] = v101;
    v135[4] = &off_1000AD308;
    v135[0] = v102;
    v105 = v132;
    swift_bridgeObjectRetain(v103);
    swift_retain(v102);
    v132 = (id)sub_10005FC04((uint64_t)_swiftEmptyArrayStorage);
    v106 = *(_QWORD *)(v75 + OBJC_IVAR____TtC7NewsTag20TrackableWidgetState_appearanceType);
    v107 = v105;
    sub_10006EA30(v107, (uint64_t)v134, v106, v119);

    v109 = (id)NewsCoreUserDefaults(v108);
    v110 = String._bridgeToObjectiveC()();
    v111 = objc_msgSend(v109, "stringForKey:", v110);

    if (v111)
    {
      v112 = static String._unconditionallyBridgeFromObjectiveC(_:)(v111);
      v114 = v113;

    }
    else
    {
      v112 = 0;
      v114 = 0xE000000000000000;
    }
    sub_10005D57C(v133, (uint64_t)v107, (uint64_t)v129, v135, (uint64_t)v132, 1, (uint64_t)v119, v75, v123, v131, (uint64_t)v91, v112, v114);

    v115 = swift_release(v102);
    (*(void (**)(uint64_t, uint64_t, __n128))(v117 + 8))(v122, v118, v115);
    sub_100027D34((uint64_t)v22, type metadata accessor for LayoutContext);
    v86 = v130;
  }
  swift_release(v86);
}

double sub_10006FAD0@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, void *a4@<X3>, uint64_t a5@<X4>, int a6@<W5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  void *v17;
  id v18;
  id v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  id v29;
  NSString v30;
  id v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  double result;
  unint64_t v36;
  void *v37;
  void *v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  _QWORD v42[5];
  char v43[24];

  v38 = a3;
  v39 = a7;
  v40 = a6;
  v37 = a4;
  v41 = a8;
  v11 = sub_10001B520(&qword_1000B93A0);
  v12 = __chkstk_darwin(v11);
  v14 = (char *)&v36 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v16 = (char *)&v36 - v15;
  v36 = a5 + 16;
  v17 = *(void **)(a1 + 136);
  v18 = *(id *)(a1 + 72);
  v19 = v17;
  swift_retain(a2);
  v20 = sub_10005FA70((uint64_t)_swiftEmptyArrayStorage);
  v21 = type metadata accessor for URL(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 56))(v16, 1, 1, v21);
  v22 = type metadata accessor for EngagementURLProvider(0);
  v23 = (_QWORD *)swift_allocObject(v22, *(unsigned int *)(v22 + 48), *(unsigned __int16 *)(v22 + 52));
  v23[2] = v18;
  v23[3] = v19;
  v23[4] = a2;
  v23[5] = v20;
  sub_10005E488((uint64_t)v16, (uint64_t)v23 + OBJC_IVAR____TtC7NewsTag21EngagementURLProvider_sharedDirectoryFileUrl);
  swift_beginAccess(v36, v43, 0, 0);
  v24 = *(_QWORD *)(a5 + 16);
  v25 = type metadata accessor for ImageStore();
  v26 = swift_allocObject(v25, 24, 7);
  *(_QWORD *)(v26 + 16) = v24;
  v42[3] = v22;
  v42[4] = &off_1000AD308;
  v27 = v37;
  v42[0] = v23;
  v38 = v38;
  swift_bridgeObjectRetain(v24);
  swift_retain(v23);
  v36 = sub_10005FC04((uint64_t)_swiftEmptyArrayStorage);
  sub_10006EA30(v27, v39, *(_QWORD *)(a2 + OBJC_IVAR____TtC7NewsTag20TrackableWidgetState_appearanceType), v14);
  v28 = swift_retain(a2);
  v29 = (id)NewsCoreUserDefaults(v28);
  v30 = String._bridgeToObjectiveC()();
  v31 = objc_msgSend(v29, "stringForKey:", v30);

  if (v31)
  {
    v32 = static String._unconditionallyBridgeFromObjectiveC(_:)(v31);
    v34 = v33;

  }
  else
  {
    v32 = 0;
    v34 = 0xE000000000000000;
  }
  swift_unknownObjectRetain(v27);
  sub_10005D57C(v38, (uint64_t)v27, v26, v42, v36, v40 & 1, (uint64_t)v14, a2, v41, 0, 0, v32, v34);
  *(_QWORD *)&result = swift_release(v23).n128_u64[0];
  return result;
}

uint64_t sub_10006FD78@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (objc_msgSend(a1, "fc_isOfflineError"))
  {
    v3 = LocalizedStringKey.init(stringLiteral:)(0xD000000000000015, 0x8000000100091FE0);
    result = Text.init(_:tableName:bundle:comment:)(v3);
    v8 = 3;
  }
  else
  {
    v9 = LocalizedStringKey.init(stringLiteral:)(0x1000000000000017, 0x8000000100091F90);
    v8 = 2;
    result = Text.init(_:tableName:bundle:comment:)(v9);
  }
  *(_QWORD *)a2 = result;
  *(_QWORD *)(a2 + 8) = v5;
  *(_BYTE *)(a2 + 16) = v6 & 1;
  *(_QWORD *)(a2 + 24) = v7;
  *(_QWORD *)(a2 + 32) = v8;
  return result;
}

uint64_t FTEventTrackingWidgetAppearanceType.debugDescription.getter(uint64_t a1)
{
  uint64_t result;

  result = 0x736569726F7473;
  switch(a1)
  {
    case 0:
      return result;
    case 1:
      result = 0x69726F7473206F6ELL;
      break;
    case 2:
      result = 0x726F727265;
      break;
    case 3:
      result = 0x656E696C66666FLL;
      break;
    case 4:
      result = 0x6C6F686563616C70;
      break;
    default:
      result = 0x6E776F6E6B6E75;
      break;
  }
  return result;
}

uint64_t sub_10006FF08()
{
  uint64_t v0;

  sub_100071E98(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
  sub_10001DA60((_QWORD *)(v0 + 32));

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 80));
  sub_10001DA60((_QWORD *)(v0 + 96));

  return swift_deallocClassInstance(v0, 144, 7);
}

uint64_t sub_10006FF5C()
{
  _QWORD *v0;
  uint64_t result;

  result = 0x736569726F7473;
  switch(*v0)
  {
    case 0:
      return result;
    case 1:
      result = 0x69726F7473206F6ELL;
      break;
    case 2:
      result = 0x726F727265;
      break;
    case 3:
      result = 0x656E696C66666FLL;
      break;
    case 4:
      result = 0x6C6F686563616C70;
      break;
    default:
      result = 0x6E776F6E6B6E75;
      break;
  }
  return result;
}

uint64_t type metadata accessor for ContentService()
{
  return objc_opt_self(_TtC7NewsTag14ContentService);
}

uint64_t type metadata accessor for ContentServiceRequest(uint64_t a1)
{
  uint64_t result;

  result = qword_1000BC438;
  if (!qword_1000BC438)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for ContentServiceRequest);
  return result;
}

uint64_t sub_100070068()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  id *v14;
  uint64_t v15;
  uint64_t v17;

  v1 = type metadata accessor for ContentServiceRequest(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 40) & ~v3;
  v17 = v3 | 7;
  v5 = (*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  swift_release(*(_QWORD *)(v0 + 24));
  swift_release(*(_QWORD *)(v0 + 32));
  v6 = v0 + v4;

  v7 = v0 + v4 + *(int *)(v1 + 20);
  v8 = type metadata accessor for LayoutContext(0);
  v9 = v7 + *(int *)(v8 + 24);
  v10 = type metadata accessor for InternalWidgetFamily(0);
  v11 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 8);
  v11(v9, v10);
  v12 = v7 + *(int *)(v8 + 32);
  v13 = type metadata accessor for ContentSizeCategory(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 8))(v12, v13);
  v14 = (id *)(v6 + *(int *)(v1 + 24));

  v15 = type metadata accessor for NewsWidgetInfo(0);
  v11((uint64_t)v14 + *(int *)(v15 + 20), v10);
  swift_bridgeObjectRelease(*(id *)((char *)v14 + *(int *)(v15 + 24) + 8));
  swift_release(*(_QWORD *)(v0 + v5 + 8));
  return swift_deallocObject(v0, v5 + 16, v17);
}

void sub_1000701B0(void *a1, uint64_t a2, void *a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v9;
  unint64_t v10;
  void (**v11)(char *);

  v9 = *(_QWORD *)(type metadata accessor for ContentServiceRequest(0) - 8);
  v10 = (*(unsigned __int8 *)(v9 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
  v11 = (void (**)(char *))(v4 + ((*(_QWORD *)(v9 + 64) + v10 + 7) & 0xFFFFFFFFFFFFFFF8));
  sub_10006CCF8(a1, a2, a3, a4, *(void (**)(uint64_t))(v4 + 16), *(void (**)(uint64_t))(v4 + 24), *(_QWORD *)(v4 + 32), (id *)(v4 + v10), *v11, v11[1]);
}

uint64_t sub_100070244()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;

  v0 = sub_10001B520(&qword_1000B93A0);
  __chkstk_darwin(v0);
  v2 = (char *)&v7 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = type metadata accessor for URL(0);
  sub_100071EF0(v3, qword_1000C07D0);
  v4 = sub_10005E518(v3, (uint64_t)qword_1000C07D0);
  URL.init(string:)(0x2F3A6F6E6F726863, 0xEE00706F2D6F6E2FLL);
  v5 = *(_QWORD *)(v3 - 8);
  result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v5 + 48))(v2, 1, v3);
  if ((_DWORD)result != 1)
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v5 + 32))(v4, v2, v3);
  __break(1u);
  return result;
}

_QWORD *sub_10007032C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  _QWORD *v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return _swiftEmptyArrayStorage;
  v3 = sub_10001B520(&qword_1000B99A0);
  v4 = (_QWORD *)swift_allocObject(v3, 16 * v1 + 32, 7);
  v5 = j__malloc_size(v4);
  v6 = v5 - 32;
  if (v5 < 32)
    v6 = v5 - 17;
  v4[2] = v1;
  v4[3] = 2 * (v6 >> 4);
  v7 = sub_1000708D8((uint64_t)&v10, v4 + 4, v1, a1);
  v8 = v10;
  swift_bridgeObjectRetain(a1);
  sub_100024148(v8);
  if (v7 != v1)
  {
    __break(1u);
    return _swiftEmptyArrayStorage;
  }
  return v4;
}

_QWORD *sub_100070410(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *result;
  uint64_t v11;
  uint64_t v12;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return _swiftEmptyArrayStorage;
  v3 = sub_10001B520((uint64_t *)&unk_1000BC3D0);
  v4 = *(_QWORD *)(type metadata accessor for URL(0) - 8);
  v5 = *(_QWORD *)(v4 + 72);
  v6 = *(unsigned __int8 *)(v4 + 80);
  v7 = (v6 + 32) & ~v6;
  v8 = (_QWORD *)swift_allocObject(v3, v7 + v5 * v1, v6 | 7);
  result = (_QWORD *)j__malloc_size(v8);
  if (v5)
  {
    if ((_QWORD *)((char *)result - v7) != (_QWORD *)0x8000000000000000 || v5 != -1)
    {
      v8[2] = v1;
      v8[3] = 2 * (((uint64_t)result - v7) / v5);
      swift_bridgeObjectRetain(a1);
      v11 = sub_100070AD4(&v12, (uint64_t)v8 + v7, v1, a1);
      sub_100024148(v12);
      if (v11 == v1)
        return v8;
      __break(1u);
      return _swiftEmptyArrayStorage;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

unint64_t sub_100070508(unint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  unint64_t result;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int64_t v20;
  uint64_t v21;
  void (*v22)(char *, char *, uint64_t);
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  char *v29;
  Swift::Int v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  _QWORD *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  BOOL v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD v51[9];

  v4 = type metadata accessor for URL(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v45 = (char *)&v44 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v44 = type metadata accessor for ImageStoreKey(0);
  v7 = __chkstk_darwin(v44);
  v9 = (char *)&v44 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = __chkstk_darwin(v7);
  v13 = (char *)&v44 - v12;
  v14 = a2 + 64;
  v15 = -1 << *(_BYTE *)(a2 + 32);
  v16 = (a1 + 1) & ~v15;
  if (((1 << v16) & *(_QWORD *)(a2 + 64 + 8 * (v16 >> 6))) != 0)
  {
    v49 = v5;
    v50 = v11;
    v17 = ~v15;
    result = _HashTable.previousHole(before:)(a1, a2 + 64, ~v15);
    v18 = a2 + 64;
    if ((*(_QWORD *)(v14 + 8 * (v16 >> 6)) & (1 << v16)) != 0)
    {
      v19 = *(_QWORD *)(v50 + 72);
      v47 = (result + 1) & v17;
      v48 = v17;
      v50 = v19;
      do
      {
        v20 = v19 * v16;
        sub_10002A83C(*(_QWORD *)(a2 + 48) + v19 * v16, (uint64_t)v13, type metadata accessor for ImageStoreKey);
        Hasher.init(_seed:)(v51, *(_QWORD *)(a2 + 40));
        sub_10002A83C((uint64_t)v13, (uint64_t)v9, type metadata accessor for ImageStoreKey);
        v21 = v49;
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v49 + 48))(v9, 1, v4) == 1)
        {
          Hasher._combine(_:)(1uLL);
        }
        else
        {
          v22 = *(void (**)(char *, char *, uint64_t))(v21 + 32);
          v46 = a1;
          v23 = v13;
          v24 = a2;
          v25 = v18;
          v26 = v4;
          v27 = v45;
          v22(v45, v9, v26);
          Hasher._combine(_:)(0);
          v28 = sub_10001C96C((unint64_t *)&qword_1000BA288, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t)&protocol conformance descriptor for URL);
          dispatch thunk of Hashable.hash(into:)(v51, v26, v28);
          v29 = v27;
          v4 = v26;
          v18 = v25;
          a2 = v24;
          v13 = v23;
          a1 = v46;
          (*(void (**)(char *, uint64_t))(v21 + 8))(v29, v4);
        }
        v30 = Hasher._finalize()();
        result = sub_100027D34((uint64_t)v13, type metadata accessor for ImageStoreKey);
        v31 = v48;
        v32 = v30 & v48;
        if ((uint64_t)a1 >= (uint64_t)v47)
        {
          v19 = v50;
          if (v32 < v47)
            goto LABEL_5;
        }
        else
        {
          v19 = v50;
          if (v32 >= v47)
            goto LABEL_14;
        }
        if ((uint64_t)a1 >= (uint64_t)v32)
        {
LABEL_14:
          v33 = *(_QWORD *)(a2 + 48);
          result = v33 + v19 * a1;
          v34 = v33 + v20;
          if ((uint64_t)(v19 * a1) < v20 || result >= v34 + v19)
          {
            result = swift_arrayInitWithTakeFrontToBack(result, v34, 1, v44);
LABEL_19:
            v19 = v50;
          }
          else if (v19 * a1 != v20)
          {
            result = swift_arrayInitWithTakeBackToFront(result);
            goto LABEL_19;
          }
          v35 = *(_QWORD *)(a2 + 56);
          v36 = (_QWORD *)(v35 + 8 * a1);
          v37 = (_QWORD *)(v35 + 8 * v16);
          if (a1 != v16 || (a1 = v16, v36 >= v37 + 1))
          {
            *v36 = *v37;
            a1 = v16;
          }
        }
LABEL_5:
        v16 = (v16 + 1) & v31;
      }
      while (((*(_QWORD *)(v18 + ((v16 >> 3) & 0xFFFFFFFFFFFFF8)) >> v16) & 1) != 0);
    }
    v38 = (uint64_t *)(v18 + 8 * (a1 >> 6));
    v39 = *v38;
    v40 = (-1 << a1) - 1;
  }
  else
  {
    v38 = (uint64_t *)(v14 + 8 * (a1 >> 6));
    v40 = *v38;
    v39 = (-1 << a1) - 1;
  }
  *v38 = v40 & v39;
  v41 = *(_QWORD *)(a2 + 16);
  v42 = __OFSUB__(v41, 1);
  v43 = v41 - 1;
  if (v42)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v43;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

unint64_t sub_100070894()
{
  unint64_t result;

  result = qword_1000BC358;
  if (!qword_1000BC358)
  {
    result = swift_getWitnessTable(&unk_10008D110, &type metadata for ContentService.Errors);
    atomic_store(result, (unint64_t *)&qword_1000BC358);
  }
  return result;
}

uint64_t sub_1000708D8(uint64_t result, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  int64_t v12;
  uint64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  _QWORD *v20;
  uint64_t v21;

  v5 = (_QWORD *)result;
  v6 = a4 + 56;
  v7 = -1 << *(_BYTE *)(a4 + 32);
  if (-v7 < 64)
    v8 = ~(-1 << -(char)v7);
  else
    v8 = -1;
  v9 = v8 & *(_QWORD *)(a4 + 56);
  if (!a2)
  {
    v12 = 0;
    v10 = 0;
LABEL_38:
    *v5 = a4;
    v5[1] = v6;
    v5[2] = ~v7;
    v5[3] = v12;
    v5[4] = v9;
    return v10;
  }
  v10 = a3;
  if (!a3)
  {
    v12 = 0;
    goto LABEL_38;
  }
  if (a3 < 0)
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  v11 = a2;
  v12 = 0;
  v13 = 0;
  v14 = (unint64_t)(63 - v7) >> 6;
  if (!v9)
    goto LABEL_9;
LABEL_8:
  v15 = __clz(__rbit64(v9));
  v9 &= v9 - 1;
  v16 = v15 | (v12 << 6);
  while (1)
  {
    ++v13;
    v20 = (_QWORD *)(*(_QWORD *)(a4 + 48) + 16 * v16);
    v21 = v20[1];
    *v11 = *v20;
    v11[1] = v21;
    if (v13 == v10)
    {
      swift_bridgeObjectRetain(v21);
      goto LABEL_38;
    }
    v11 += 2;
    result = swift_bridgeObjectRetain(v21);
    if (v9)
      goto LABEL_8;
LABEL_9:
    v17 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
      __break(1u);
      goto LABEL_40;
    }
    if (v17 >= v14)
      goto LABEL_33;
    v18 = *(_QWORD *)(v6 + 8 * v17);
    if (!v18)
      break;
LABEL_18:
    v9 = (v18 - 1) & v18;
    v16 = __clz(__rbit64(v18)) + (v17 << 6);
    v12 = v17;
  }
  v12 += 2;
  if (v17 + 1 >= v14)
  {
    v9 = 0;
    v12 = v17;
    goto LABEL_37;
  }
  v18 = *(_QWORD *)(v6 + 8 * v12);
  if (v18)
    goto LABEL_14;
  v19 = v17 + 2;
  if (v17 + 2 >= v14)
    goto LABEL_33;
  v18 = *(_QWORD *)(v6 + 8 * v19);
  if (v18)
    goto LABEL_17;
  v12 = v17 + 3;
  if (v17 + 3 >= v14)
  {
    v9 = 0;
    v12 = v17 + 2;
    goto LABEL_37;
  }
  v18 = *(_QWORD *)(v6 + 8 * v12);
  if (v18)
  {
LABEL_14:
    v17 = v12;
    goto LABEL_18;
  }
  v19 = v17 + 4;
  if (v17 + 4 >= v14)
  {
LABEL_33:
    v9 = 0;
LABEL_37:
    v10 = v13;
    goto LABEL_38;
  }
  v18 = *(_QWORD *)(v6 + 8 * v19);
  if (v18)
  {
LABEL_17:
    v17 = v19;
    goto LABEL_18;
  }
  while (1)
  {
    v17 = v19 + 1;
    if (__OFADD__(v19, 1))
      break;
    if (v17 >= v14)
    {
      v9 = 0;
      v12 = v14 - 1;
      goto LABEL_37;
    }
    v18 = *(_QWORD *)(v6 + 8 * v17);
    ++v19;
    if (v18)
      goto LABEL_18;
  }
LABEL_41:
  __break(1u);
  return result;
}

uint64_t sub_100070AD4(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  int64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  int64_t v26;
  unint64_t v27;
  int64_t v28;
  uint64_t v29;
  void (*v30)(char *, char *, uint64_t);
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  int64_t v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  int64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;

  v8 = sub_10001B520(&qword_1000B93A0);
  __chkstk_darwin(v8);
  v10 = (char *)&v33 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for URL(0);
  v41 = *(_QWORD *)(v11 - 8);
  result = __chkstk_darwin(v11);
  v40 = (char *)&v33 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v42 = a4;
  v15 = a4 + 64;
  v14 = *(_QWORD *)(a4 + 64);
  v16 = -1 << *(_BYTE *)(a4 + 32);
  v35 = a1;
  v36 = v16;
  v17 = -v16;
  if (v17 < 64)
    v18 = ~(-1 << v17);
  else
    v18 = -1;
  v19 = v18 & v14;
  if (!a2)
  {
    v20 = 0;
    v21 = 0;
LABEL_39:
    v31 = v35;
    v32 = ~v36;
    *v35 = v42;
    v31[1] = v15;
    v31[2] = v32;
    v31[3] = v20;
    v31[4] = v19;
    return v21;
  }
  if (!a3)
  {
    v20 = 0;
    v21 = 0;
    goto LABEL_39;
  }
  if (a3 < 0)
    goto LABEL_41;
  v20 = 0;
  v21 = 0;
  v37 = a4 + 64;
  v38 = (unint64_t)(63 - v36) >> 6;
  v34 = v38 - 1;
  v39 = a3;
  v22 = v40;
  v23 = v41;
  if (!v19)
    goto LABEL_9;
LABEL_8:
  v24 = __clz(__rbit64(v19));
  v19 &= v19 - 1;
  v25 = v24 | (v20 << 6);
  while (1)
  {
    v29 = *(_QWORD *)(v23 + 72);
    (*(void (**)(char *, unint64_t, uint64_t))(v23 + 16))(v10, *(_QWORD *)(v42 + 56) + v29 * v25, v11);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v23 + 56))(v10, 0, 1, v11);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v23 + 48))(v10, 1, v11) == 1)
    {
      v15 = v37;
      goto LABEL_38;
    }
    ++v21;
    v30 = *(void (**)(char *, char *, uint64_t))(v23 + 32);
    v30(v22, v10, v11);
    result = ((uint64_t (*)(uint64_t, char *, uint64_t))v30)(a2, v22, v11);
    if (v21 == v39)
    {
      v21 = v39;
      v15 = v37;
      goto LABEL_39;
    }
    a2 += v29;
    v23 = v41;
    if (v19)
      goto LABEL_8;
LABEL_9:
    v26 = v20 + 1;
    if (__OFADD__(v20, 1))
      break;
    v15 = v37;
    if (v26 >= v38)
      goto LABEL_37;
    v27 = *(_QWORD *)(v37 + 8 * v26);
    if (!v27)
    {
      v28 = v20 + 2;
      ++v20;
      if (v26 + 1 >= v38)
        goto LABEL_37;
      v27 = *(_QWORD *)(v37 + 8 * v28);
      if (v27)
        goto LABEL_14;
      v20 = v26 + 1;
      if (v26 + 2 >= v38)
        goto LABEL_37;
      v27 = *(_QWORD *)(v37 + 8 * (v26 + 2));
      if (v27)
      {
        v26 += 2;
      }
      else
      {
        v20 = v26 + 2;
        if (v26 + 3 >= v38)
          goto LABEL_37;
        v27 = *(_QWORD *)(v37 + 8 * (v26 + 3));
        if (!v27)
        {
          v28 = v26 + 4;
          v20 = v26 + 3;
          if (v26 + 4 < v38)
          {
            v27 = *(_QWORD *)(v37 + 8 * v28);
            if (!v27)
            {
              while (1)
              {
                v26 = v28 + 1;
                if (__OFADD__(v28, 1))
                  goto LABEL_42;
                if (v26 >= v38)
                {
                  v20 = v34;
                  goto LABEL_37;
                }
                v27 = *(_QWORD *)(v37 + 8 * v26);
                ++v28;
                if (v27)
                  goto LABEL_21;
              }
            }
LABEL_14:
            v26 = v28;
            goto LABEL_21;
          }
LABEL_37:
          (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v23 + 56))(v10, 1, 1, v11);
          v19 = 0;
LABEL_38:
          sub_10002CCF4((uint64_t)v10, &qword_1000B93A0);
          goto LABEL_39;
        }
        v26 += 3;
      }
    }
LABEL_21:
    v19 = (v27 - 1) & v27;
    v25 = __clz(__rbit64(v27)) + (v26 << 6);
    v20 = v26;
  }
  __break(1u);
LABEL_41:
  __break(1u);
LABEL_42:
  __break(1u);
  return result;
}

uint64_t sub_100070E24(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t (*v15)(uint64_t);
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  id v30;
  id v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  id v36;
  BOOL v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  void *v44;
  char *v45;
  uint64_t v46;
  id v47;
  void *v48;
  char *v49;
  void (*v50)(char *, char *, uint64_t);
  uint64_t v51;
  void (*v52)(char *, uint64_t, uint64_t, uint64_t);
  unsigned int (*v53)(uint64_t, uint64_t, uint64_t);
  uint64_t v54;
  unint64_t v55;
  char v56;
  void (*v57)(uint64_t (*)(uint64_t), unint64_t, uint64_t);
  uint64_t v58;
  unsigned int v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  id v64;
  NSString v65;
  void *v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  _BOOL8 v70;
  uint64_t v71;
  unint64_t v72;
  char v73;
  void (*v74)(char *, uint64_t);
  id v75;
  void *v76;
  char *v77;
  void (*v78)(uint64_t, char *, uint64_t);
  uint64_t v79;
  unint64_t v80;
  char v81;
  unint64_t v82;
  void (*v83)(uint64_t, unint64_t, uint64_t);
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  id v88;
  NSString v89;
  void *v90;
  uint64_t v91;
  unint64_t v92;
  uint64_t v93;
  _BOOL8 v94;
  uint64_t v95;
  char v96;
  unint64_t v97;
  int v98;
  int v99;
  void (*v100)(char *, uint64_t);
  char v101;
  char v102;
  char v103;
  uint64_t v104;
  void *v105;
  void *v106;
  unint64_t v107;
  char v108;
  char v109;
  char v110;
  uint64_t v111;
  void *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  void *v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  void *v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t result;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  unsigned int isUniquelyReferenced_nonNull_native;
  uint64_t v133;
  uint64_t v134;
  unint64_t v135;
  char *v136;
  char *v137;
  uint64_t v138;
  uint64_t (*v139)(uint64_t);
  id v140;
  unint64_t v141;
  uint64_t v142;
  uint64_t (*v143)(uint64_t);
  char *v144;
  uint64_t v145;
  char *v146;
  char *v147;
  uint64_t v148;
  _QWORD *v149;
  uint64_t v150;
  void *v151;
  uint64_t v152;
  char *v153;
  uint64_t (*v154)(uint64_t);
  unint64_t v155;
  _QWORD *v156;
  _BYTE v157[24];
  __objc2_prot *v158;
  void *v159;

  v148 = a3;
  v128 = type metadata accessor for ImageStoreKey(0);
  v131 = *(_QWORD *)(v128 - 8);
  v4 = __chkstk_darwin(v128);
  v138 = (uint64_t)&v127 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v139 = (uint64_t (*)(uint64_t))((char *)&v127 - v6);
  v7 = sub_10001B520(&qword_1000B93A0);
  v8 = __chkstk_darwin(v7);
  v10 = (uint64_t)&v127 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __chkstk_darwin(v8);
  v146 = (char *)&v127 - v12;
  v13 = __chkstk_darwin(v11);
  v15 = (uint64_t (*)(uint64_t))((char *)&v127 - v14);
  __chkstk_darwin(v13);
  v147 = (char *)&v127 - v16;
  v17 = type metadata accessor for URL(0);
  v18 = *(_QWORD *)(v17 - 8);
  v19 = __chkstk_darwin(v17);
  v136 = (char *)&v127 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = __chkstk_darwin(v19);
  v23 = (char *)&v127 - v22;
  v24 = __chkstk_darwin(v21);
  v137 = (char *)&v127 - v25;
  v26 = __chkstk_darwin(v24);
  v153 = (char *)&v127 - v27;
  __chkstk_darwin(v26);
  v29 = (uint64_t)&v127 - v28;
  v159 = &_swiftEmptyDictionarySingleton;
  v30 = objc_msgSend(a2, "sections");
  v31 = objc_msgSend(v30, "array");

  v32 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v31, (char *)&type metadata for Any + 8);
  v33 = (uint64_t)sub_1000500E8(v32);
  swift_bridgeObjectRelease(v32);
  if ((unint64_t)v33 >> 62)
    goto LABEL_93;
  v34 = *(_QWORD *)((v33 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (!v34)
  {
LABEL_97:
    swift_bridgeObjectRelease(v33);
    swift_beginAccess(&v159, v157, 0, 0);
    return (uint64_t)v159;
  }
LABEL_3:
  v35 = 0;
  v135 = v33 & 0xC000000000000001;
  v130 = v33 & 0xFFFFFFFFFFFFFF8;
  v129 = v33 + 32;
  v149 = (_QWORD *)v18;
  v134 = v33;
  v142 = v10;
  v143 = v15;
  v144 = v23;
  v145 = v29;
  v133 = v34;
  while (1)
  {
    if (v135)
    {
      v36 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v35, v33);
    }
    else
    {
      if (v35 >= *(_QWORD *)(v130 + 16))
        goto LABEL_88;
      v36 = *(id *)(v129 + 8 * v35);
    }
    v33 = (uint64_t)v36;
    v37 = __OFADD__(v35, 1);
    v38 = v35 + 1;
    if (v37)
    {
LABEL_87:
      __break(1u);
LABEL_88:
      __break(1u);
LABEL_89:
      __break(1u);
LABEL_90:
      __break(1u);
LABEL_91:
      __break(1u);
LABEL_92:
      __break(1u);
LABEL_93:
      if (v33 < 0)
        v125 = v33;
      else
        v125 = v33 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v33);
      v34 = _CocoaArrayWrapper.endIndex.getter(v125);
      swift_bridgeObjectRelease(v33);
      if (!v34)
        goto LABEL_97;
      goto LABEL_3;
    }
    sub_10004ECE8();
    v10 = v39;
    v141 = v38;
    v140 = (id)v33;
    if ((unint64_t)v39 >> 62)
    {
      v124 = v39 < 0 ? v39 : v39 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v39);
      v15 = (uint64_t (*)(uint64_t))_CocoaArrayWrapper.endIndex.getter(v124);
      swift_bridgeObjectRelease(v10);
    }
    else
    {
      v15 = *(uint64_t (**)(uint64_t))((v39 & 0xFFFFFFFFFFFFF8) + 0x10);
    }
    v33 = (uint64_t)v146;
    v40 = v10;
    if (v15)
      break;
LABEL_4:

    swift_bridgeObjectRelease(v40);
    v35 = v141;
    v33 = v134;
    if (v141 == v133)
      goto LABEL_97;
  }
  v154 = v15;
  v155 = v10 & 0xC000000000000001;
  v41 = 4;
  v150 = v10;
  while (1)
  {
    v42 = v41 - 4;
    if (v155)
    {
      v23 = (char *)specialized _ArrayBuffer._getElementSlowPath(_:)(v41 - 4, v40);
      v10 = v41 - 3;
      if (__OFADD__(v42, 1))
        goto LABEL_86;
    }
    else
    {
      v23 = *(char **)(v40 + 8 * v41);
      swift_unknownObjectRetain(v23);
      v10 = v41 - 3;
      if (__OFADD__(v42, 1))
      {
LABEL_86:
        __break(1u);
        goto LABEL_87;
      }
    }
    v158 = &OBJC_PROTOCOL___NTHeadlineProviding;
    v43 = swift_dynamicCastObjCProtocolConditional(v23, 1, &v158);
    if (v43)
      break;
    swift_unknownObjectRelease(v23);
LABEL_15:
    v15 = v154;
LABEL_16:
    ++v41;
    if ((uint64_t (*)(uint64_t))v10 == v15)
      goto LABEL_4;
  }
  v44 = (void *)v43;
  v45 = v23;
  v46 = v17;
  v29 = (uint64_t)v45;
  swift_unknownObjectRetain(v45);
  v47 = objc_msgSend(v44, "thumbnailRemoteURL");
  if (!v47)
  {
    v51 = (uint64_t)v147;
    v52 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v18 + 56);
    v52(v147, 1, 1, v46);
    goto LABEL_27;
  }
  v48 = v47;
  v151 = v44;
  v152 = v10;
  v49 = v153;
  static URL._unconditionallyBridgeFromObjectiveC(_:)(v47);

  v50 = *(void (**)(char *, char *, uint64_t))(v18 + 32);
  v51 = (uint64_t)v147;
  v50(v147, v49, v46);
  v52 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v18 + 56);
  v52((char *)v51, 0, 1, v46);
  v53 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v18 + 48);
  if (v53(v51, 1, v46) == 1)
  {
    v18 = (uint64_t)v149;
    v44 = v151;
    v10 = v152;
LABEL_27:
    sub_10002CCF4(v51, &qword_1000B93A0);
    v17 = v46;
    v23 = (char *)v29;
    goto LABEL_39;
  }
  v54 = v145;
  v50((char *)v145, (char *)v51, v46);
  v17 = v46;
  if (*(_QWORD *)(v148 + 16) && (v55 = sub_100031738(v54), (v56 & 1) != 0))
  {
    v57 = (void (*)(uint64_t (*)(uint64_t), unint64_t, uint64_t))v149[2];
    v58 = (uint64_t)v143;
    v57(v143, *(_QWORD *)(v148 + 56) + v149[9] * v55, v46);
    v52((char *)v58, 0, 1, v46);
    v59 = v53(v58, 1, v46);
    v10 = v152;
    v23 = (char *)v29;
    if (v59 != 1)
    {
      v18 = (uint64_t)v137;
      v50(v137, (char *)v58, v17);
      v60 = (uint64_t)v139;
      v57(v139, v145, v17);
      v61 = ((uint64_t (*)(uint64_t, _QWORD, uint64_t, uint64_t))v52)(v60, 0, 1, v17);
      URL.path.getter(v61);
      v63 = v62;
      v64 = objc_allocWithZone((Class)UIImage);
      v65 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(v63);
      v29 = (uint64_t)objc_msgSend(v64, "initWithContentsOfFile:", v65);

      swift_beginAccess(&v159, v157, 33, 0);
      v66 = v159;
      if (v29)
      {
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v159);
        v33 = (uint64_t)v159;
        v156 = v159;
        v159 = (void *)0x8000000000000000;
        v68 = sub_1000314A4(v60);
        v69 = *(_QWORD *)(v33 + 16);
        v70 = (v67 & 1) == 0;
        v71 = v69 + v70;
        v15 = type metadata accessor for ImageStoreKey;
        if (__OFADD__(v69, v70))
          goto LABEL_89;
        v18 = v67;
        if (*(_QWORD *)(v33 + 24) >= v71)
        {
          if ((isUniquelyReferenced_nonNull_native & 1) == 0)
            sub_100066C00();
        }
        else
        {
          sub_1000662CC(v71, isUniquelyReferenced_nonNull_native);
          v72 = sub_1000314A4((uint64_t)v139);
          if ((v18 & 1) != (v73 & 1))
            goto LABEL_98;
          v68 = v72;
        }
        v113 = (uint64_t)v139;
        v33 = (uint64_t)v156;
        if ((v18 & 1) != 0)
        {
          v114 = v156[7];
          v115 = 8 * v68;

          *(_QWORD *)(v114 + v115) = v29;
        }
        else
        {
          v156[(v68 >> 6) + 8] |= 1 << v68;
          sub_10002A83C(v113, *(_QWORD *)(v33 + 48) + *(_QWORD *)(v131 + 72) * v68, type metadata accessor for ImageStoreKey);
          *(_QWORD *)(*(_QWORD *)(v33 + 56) + 8 * v68) = v29;
          v116 = *(_QWORD *)(v33 + 16);
          v37 = __OFADD__(v116, 1);
          v117 = v116 + 1;
          if (v37)
            goto LABEL_91;
          *(_QWORD *)(v33 + 16) = v117;
        }
        v118 = v159;
        v159 = (void *)v33;
        swift_bridgeObjectRelease(v118);
        sub_100027D34((uint64_t)v139, type metadata accessor for ImageStoreKey);
        v33 = (uint64_t)v146;
        v18 = (uint64_t)v149;
      }
      else
      {
        swift_bridgeObjectRetain(v159);
        v29 = sub_1000314A4(v60);
        v102 = v101;
        swift_bridgeObjectRelease(v66);
        if ((v102 & 1) != 0)
        {
          v103 = swift_isUniquelyReferenced_nonNull_native(v159);
          v104 = (uint64_t)v159;
          v156 = v159;
          v159 = (void *)0x8000000000000000;
          v18 = (uint64_t)v149;
          if ((v103 & 1) == 0)
          {
            sub_100066C00();
            v104 = (uint64_t)v156;
          }
          sub_100027D34(*(_QWORD *)(v104 + 48) + *(_QWORD *)(v131 + 72) * v29, type metadata accessor for ImageStoreKey);
          v105 = *(void **)(*(_QWORD *)(v104 + 56) + 8 * v29);
          sub_100070508(v29, v104);
          v106 = v159;
          v159 = (void *)v104;
          swift_bridgeObjectRelease(v106);
        }
        else
        {
          v105 = 0;
          v18 = (uint64_t)v149;
        }
        sub_100027D34((uint64_t)v139, type metadata accessor for ImageStoreKey);

        v33 = (uint64_t)v146;
      }
      swift_endAccess(v157);
      v74 = *(void (**)(char *, uint64_t))(v18 + 8);
      v74(v137, v17);
      goto LABEL_38;
    }
  }
  else
  {
    v58 = (uint64_t)v143;
    v52((char *)v143, 1, 1, v46);
    v10 = v152;
    v23 = (char *)v29;
  }
  sub_10002CCF4(v58, &qword_1000B93A0);
  v18 = (uint64_t)v149;
  v74 = (void (*)(char *, uint64_t))v149[1];
  v33 = (uint64_t)v146;
LABEL_38:
  v44 = v151;
  v74((char *)v145, v17);
LABEL_39:
  v75 = objc_msgSend(v44, "sourceNameImageRemoteURL");
  if (!v75)
  {
    v52((char *)v33, 1, 1, v17);
    goto LABEL_50;
  }
  v76 = v75;
  v77 = v153;
  static URL._unconditionallyBridgeFromObjectiveC(_:)(v75);

  v78 = *(void (**)(uint64_t, char *, uint64_t))(v18 + 32);
  v78(v33, v77, v17);
  v52((char *)v33, 0, 1, v17);
  v29 = *(_QWORD *)(v18 + 48);
  if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v29)(v33, 1, v17) == 1)
  {
LABEL_50:
    swift_unknownObjectRelease_n(v23, 2);
    sub_10002CCF4(v33, &qword_1000B93A0);
    v40 = v150;
    goto LABEL_15;
  }
  v79 = (uint64_t)v144;
  v78((uint64_t)v144, (char *)v33, v17);
  if (!*(_QWORD *)(v148 + 16) || (v80 = sub_100031738(v79), (v81 & 1) == 0))
  {
    v84 = v142;
    v52((char *)v142, 1, 1, v17);
    goto LABEL_52;
  }
  v82 = *(_QWORD *)(v148 + 56) + *(_QWORD *)(v18 + 72) * v80;
  v83 = *(void (**)(uint64_t, unint64_t, uint64_t))(v18 + 16);
  v84 = v142;
  v83(v142, v82, v17);
  v52((char *)v84, 0, 1, v17);
  if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v29)(v84, 1, v17) == 1)
  {
LABEL_52:
    sub_10002CCF4(v84, &qword_1000B93A0);
    swift_unknownObjectRelease_n(v23, 2);
    v18 = (uint64_t)v149;
    v40 = v150;
    v100 = (void (*)(char *, uint64_t))v149[1];
    v33 = (uint64_t)v146;
    v15 = v154;
LABEL_53:
    v100(v144, v17);
    goto LABEL_16;
  }
  v78((uint64_t)v136, (char *)v84, v17);
  v18 = v138;
  v83(v138, (unint64_t)v144, v17);
  v85 = ((uint64_t (*)(uint64_t, _QWORD, uint64_t, uint64_t))v52)(v18, 0, 1, v17);
  URL.path.getter(v85);
  v87 = v86;
  v88 = objc_allocWithZone((Class)UIImage);
  v89 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v87);
  v15 = (uint64_t (*)(uint64_t))objc_msgSend(v88, "initWithContentsOfFile:", v89);

  swift_beginAccess(&v159, v157, 33, 0);
  v90 = v159;
  if (!v15)
  {
    swift_bridgeObjectRetain(v159);
    v107 = sub_1000314A4(v18);
    v109 = v108;
    swift_bridgeObjectRelease(v90);
    if ((v109 & 1) != 0)
    {
      v110 = swift_isUniquelyReferenced_nonNull_native(v159);
      v111 = (uint64_t)v159;
      v156 = v159;
      v159 = (void *)0x8000000000000000;
      v18 = (uint64_t)v149;
      v40 = v150;
      if ((v110 & 1) == 0)
      {
        sub_100066C00();
        v111 = (uint64_t)v156;
      }
      sub_100027D34(*(_QWORD *)(v111 + 48) + *(_QWORD *)(v131 + 72) * v107, type metadata accessor for ImageStoreKey);
      v29 = *(_QWORD *)(*(_QWORD *)(v111 + 56) + 8 * v107);
      sub_100070508(v107, v111);
      v112 = v159;
      v159 = (void *)v111;
      swift_bridgeObjectRelease(v112);
    }
    else
    {
      v29 = 0;
      v18 = (uint64_t)v149;
      v40 = v150;
    }
    sub_100027D34(v138, type metadata accessor for ImageStoreKey);

LABEL_81:
    v33 = (uint64_t)v146;
    v15 = v154;
    swift_endAccess(v157);
    v100 = *(void (**)(char *, uint64_t))(v18 + 8);
    v100(v136, v17);
    swift_unknownObjectRelease_n(v23, 2);
    goto LABEL_53;
  }
  v29 = swift_isUniquelyReferenced_nonNull_native(v159);
  v33 = (uint64_t)v159;
  v156 = v159;
  v159 = (void *)0x8000000000000000;
  v92 = sub_1000314A4(v18);
  v93 = *(_QWORD *)(v33 + 16);
  v94 = (v91 & 1) == 0;
  v95 = v93 + v94;
  if (__OFADD__(v93, v94))
    goto LABEL_90;
  if (*(_QWORD *)(v33 + 24) >= v95)
  {
    v18 = (uint64_t)v149;
    v40 = v150;
    if ((v29 & 1) == 0)
    {
      v29 = v91;
      sub_100066C00();
      LOBYTE(v91) = v29;
    }
LABEL_71:
    v119 = v138;
    v33 = (uint64_t)v156;
    if ((v91 & 1) != 0)
    {
      v29 = v156[7];
      v120 = 8 * v92;

      *(_QWORD *)(v29 + v120) = v15;
    }
    else
    {
      v156[(v92 >> 6) + 8] |= 1 << v92;
      sub_10002A83C(v119, *(_QWORD *)(v33 + 48) + *(_QWORD *)(v131 + 72) * v92, type metadata accessor for ImageStoreKey);
      *(_QWORD *)(*(_QWORD *)(v33 + 56) + 8 * v92) = v15;
      v121 = *(_QWORD *)(v33 + 16);
      v37 = __OFADD__(v121, 1);
      v122 = v121 + 1;
      if (v37)
        goto LABEL_92;
      *(_QWORD *)(v33 + 16) = v122;
    }
    v123 = v159;
    v159 = (void *)v33;
    swift_bridgeObjectRelease(v123);
    sub_100027D34(v138, type metadata accessor for ImageStoreKey);
    goto LABEL_81;
  }
  v96 = v91;
  sub_1000662CC(v95, v29);
  v97 = sub_1000314A4(v138);
  v98 = v91 & 1;
  LOBYTE(v91) = v96;
  v99 = v96 & 1;
  v18 = (uint64_t)v149;
  v40 = v150;
  if (v99 == v98)
  {
    v92 = v97;
    goto LABEL_71;
  }
LABEL_98:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v128);
  __break(1u);
  return result;
}

void sub_100071BD8(void (*a1)(_QWORD *), uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  sub_10006D460(a1, a2, a3, a4, *(void **)(v4 + 16), *(id **)(v4 + 24), *(_QWORD *)(v4 + 32));
}

uint64_t sub_100071BE4()
{
  uint64_t v0;

  return swift_retain(v0);
}

uint64_t sub_100071BFC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  void (*v12)(char *, uint64_t);
  uint64_t v13;
  uint64_t v14;
  id *v15;
  uint64_t v16;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;

  v1 = type metadata accessor for ContentServiceRequest(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = (*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  v6 = (v5 + 15) & 0xFFFFFFFFFFFFFFF8;
  v18 = (v6 + 15) & 0xFFFFFFFFFFFFFFF8;
  v19 = (v18 + 15) & 0xFFFFFFFFFFFFFFF8;
  v20 = (v19 + 15) & 0xFFFFFFFFFFFFFFF8;
  v21 = (v20 + 23) & 0xFFFFFFFFFFFFFFF8;
  v22 = v3 | 7;
  v7 = v0 + v4;

  v8 = v7 + *(int *)(v1 + 20);
  v9 = type metadata accessor for LayoutContext(0);
  v10 = (char *)(v8 + *(int *)(v9 + 24));
  v11 = type metadata accessor for InternalWidgetFamily(0);
  v12 = *(void (**)(char *, uint64_t))(*(_QWORD *)(v11 - 8) + 8);
  v12(v10, v11);
  v13 = v8 + *(int *)(v9 + 32);
  v14 = type metadata accessor for ContentSizeCategory(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 8))(v13, v14);
  v15 = (id *)(v7 + *(int *)(v1 + 24));

  v16 = type metadata accessor for NewsWidgetInfo(0);
  v12((char *)v15 + *(int *)(v16 + 20), v11);
  swift_bridgeObjectRelease(*(id *)((char *)v15 + *(int *)(v16 + 24) + 8));

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v18));
  swift_release(*(_QWORD *)(v0 + v19));
  swift_release(*(_QWORD *)(v0 + v20 + 8));
  swift_release(*(_QWORD *)(v0 + v21 + 8));
  return swift_deallocObject(v0, v21 + 16, v22);
}

id sub_100071DA4(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;

  v3 = *(_QWORD *)(type metadata accessor for ContentServiceRequest(0) - 8);
  v4 = (*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v5 = (*(_QWORD *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  v6 = (v5 + 15) & 0xFFFFFFFFFFFFFFF8;
  v7 = (v6 + 15) & 0xFFFFFFFFFFFFFFF8;
  v8 = (v7 + 15) & 0xFFFFFFFFFFFFFFF8;
  return sub_10006D704(a1, (id *)(v1 + v4), *(char **)(v1 + v5), *(char **)(v1 + v6), *(_QWORD *)(v1 + v7), *(_QWORD *)(v1 + v8), *(void (**)(_QWORD))(v1 + ((v8 + 15) & 0xFFFFFFFFFFFFFFF8)), *(_QWORD *)(v1 + ((v8 + 15) & 0xFFFFFFFFFFFFFFF8) + 8), *(void (**)(_QWORD))(v1 + ((((v8 + 15) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8)));
}

uint64_t sub_100071E60()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 40, 7);
}

uint64_t sub_100071E8C(uint64_t a1)
{
  uint64_t v1;

  return sub_10006EFDC(a1, *(_QWORD *)(v1 + 16), *(uint64_t (**)(uint64_t))(v1 + 24));
}

uint64_t sub_100071E98(uint64_t result, uint64_t a2)
{
  if (result)
    return swift_release(a2);
  return result;
}

uint64_t sub_100071EA8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10001B520(&qword_1000BC388);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t *sub_100071EF0(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(a1 - 8);
  if ((*(_DWORD *)(v3 + 80) & 0x20000) != 0)
  {
    v4 = swift_slowAlloc(*(_QWORD *)(v3 + 64), *(_DWORD *)(v3 + 80));
    *a2 = v4;
    return (uint64_t *)v4;
  }
  return a2;
}

uint64_t sub_100071F30()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100071F54(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100071F64(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_100071F6C()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 24, 7);
}

uint64_t storeEnumTagSinglePayload for ContentService.Errors(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_100071FDC + 4 * byte_10008CFBF[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_100072010 + 4 * byte_10008CFBA[v4]))();
}

uint64_t sub_100072010(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100072018(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100072020);
  return result;
}

uint64_t sub_10007202C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100072034);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_100072038(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100072040(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ContentService.Errors()
{
  return &type metadata for ContentService.Errors;
}

uint64_t sub_10007205C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100072068);
}

uint64_t sub_100072068(char *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)a1;
    if (*(_QWORD *)a1 >= 0xFFFFFFFFuLL)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for LayoutContext(0);
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
    {
      v10 = v8;
      v11 = *(int *)(a3 + 20);
    }
    else
    {
      v10 = type metadata accessor for NewsWidgetInfo(0);
      v9 = *(_QWORD *)(v10 - 8);
      v11 = *(int *)(a3 + 24);
    }
    return (*(uint64_t (**)(char *, uint64_t, uint64_t))(v9 + 48))(&a1[v11], a2, v10);
  }
}

uint64_t sub_100072108(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100072114);
}

char *sub_100072114(char *result, uint64_t a2, int a3, uint64_t a4)
{
  char *v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)result = (a2 - 1);
  }
  else
  {
    v8 = type metadata accessor for LayoutContext(0);
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      v10 = v8;
      v11 = *(int *)(a4 + 20);
    }
    else
    {
      v10 = type metadata accessor for NewsWidgetInfo(0);
      v9 = *(_QWORD *)(v10 - 8);
      v11 = *(int *)(a4 + 24);
    }
    return (char *)(*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v9 + 56))(&v5[v11], a2, a2, v10);
  }
  return result;
}

unint64_t sub_1000721B4()
{
  unint64_t result;

  result = qword_1000BC478;
  if (!qword_1000BC478)
  {
    result = swift_getWitnessTable(&unk_10008D0E8, &type metadata for ContentService.Errors);
    atomic_store(result, (unint64_t *)&qword_1000BC478);
  }
  return result;
}

uint64_t sub_1000721FC(uint64_t a1)
{
  _QWORD v2[5];

  v2[0] = &unk_10008D1A8;
  v2[1] = &unk_10008D1C0;
  v2[2] = &unk_10008D1C0;
  v2[3] = &unk_10008D1C0;
  v2[4] = (char *)&value witness table for Builtin.UnknownObject + 64;
  return swift_initClassMetadata2(a1, 0, 5, v2, a1 + 96);
}

uint64_t sub_100072258(uint64_t a1, uint64_t a2, _QWORD *a3, __int128 *a4)
{
  uint64_t v4;
  uint64_t v9;

  v9 = swift_allocObject(v4, 160, 7);
  sub_1000722BC(a1, a2, a3, a4);
  return v9;
}

_QWORD *sub_1000722BC(uint64_t a1, uint64_t a2, _QWORD *a3, __int128 *a4)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *result;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  __int128 v31;
  uint64_t v32;

  v5 = v4;
  v28 = a3;
  v29 = a1;
  v30 = a2;
  v27 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0);
  v7 = *(_QWORD *)(v27 - 8);
  __chkstk_darwin(v27);
  v9 = (char *)&v26 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for OS_dispatch_queue.Attributes(0);
  __chkstk_darwin(v10);
  v12 = (char *)&v26 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for DispatchQoS(0);
  __chkstk_darwin(v13);
  v15 = (char *)&v26 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = sub_10002CC78(0, &qword_1000BC370, OS_dispatch_queue_ptr);
  static DispatchQoS.unspecified.getter(v26);
  *(_QWORD *)&v31 = _swiftEmptyArrayStorage;
  v16 = sub_10001C96C((unint64_t *)&qword_1000BA080, (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes, (uint64_t)&protocol conformance descriptor for OS_dispatch_queue.Attributes);
  v17 = sub_10001B520(&qword_1000BA088);
  v18 = sub_100075BDC((unint64_t *)&qword_1000BA090, &qword_1000BA088);
  v19 = v16;
  v20 = v28;
  dispatch thunk of SetAlgebra.init<A>(_:)(&v31, v17, v18, v10, v19);
  (*(void (**)(char *, _QWORD, uint64_t))(v7 + 104))(v9, enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:), v27);
  v5[19] = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)(0xD000000000000022, 0x8000000100092210, v15, v12, v9, 0);
  v21 = v30;
  v5[2] = v29;
  v5[3] = v21;
  sub_100030244((uint64_t)v20, (uint64_t)(v5 + 4));
  v22 = *((_QWORD *)a4 + 3);
  v23 = *((_QWORD *)a4 + 4);
  sub_10001D9B4(a4, v22);
  v24 = sub_10001B520(&qword_1000BC598);
  result = dispatch thunk of ResolverType.resolve<A>(_:)(&v31, v24, v24, v22, v23);
  if (v32)
  {
    sub_10001DA60(v20);
    sub_100056ED8(&v31, (uint64_t)(v5 + 9));
    sub_100056ED8(a4, (uint64_t)(v5 + 14));
    return v5;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_100072514@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  id *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  void *v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;

  v3 = v2;
  v6 = *v2;
  v7 = type metadata accessor for ContentServiceRequest(0);
  __chkstk_darwin(v7);
  v9 = (id *)((char *)&v23 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  v10 = type metadata accessor for TodayContent(0);
  __chkstk_darwin(v10);
  v12 = (char *)&v23 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for EntryRequest(0);
  __chkstk_darwin(v13);
  v15 = (uint64_t *)((char *)&v23 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  v16 = (void *)(*(uint64_t (**)(void))(*(_QWORD *)(v6 + 88) + 24))();
  sub_100072700(v16, v17, a1, v15);

  v18 = sub_10001D9B4(v3 + 4, v3[7]);
  sub_10001D9B4((_QWORD *)(*v18 + 16), *(_QWORD *)(*v18 + 40));
  v19 = sub_100041E9C();
  sub_10002A83C((uint64_t)v15 + *(int *)(v13 + 20), (uint64_t)v9 + *(int *)(v7 + 20), type metadata accessor for LayoutContext);
  sub_10002A83C((uint64_t)v15 + *(int *)(v13 + 24), (uint64_t)v9 + *(int *)(v7 + 24), type metadata accessor for NewsWidgetInfo);
  *v9 = (id)v19;
  sub_10006F0BC(v9, 4, (uint64_t)v12);
  sub_100027D34((uint64_t)v9, type metadata accessor for ContentServiceRequest);
  v20 = type metadata accessor for NewsTimelineEntry(0);
  v21 = sub_10002A83C((uint64_t)v12, a2 + *(int *)(v20 + 20), type metadata accessor for TodayContent);
  Date.init()(v21);
  sub_100027D34((uint64_t)v12, type metadata accessor for TodayContent);
  return sub_100027D34((uint64_t)v15, type metadata accessor for EntryRequest);
}

id sub_100072700@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  int *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t KeyPath;
  uint64_t v26;
  __n128 v27;
  uint64_t (*v28)(char *, uint64_t, __n128);
  uint64_t v29;
  uint64_t v30;
  double *v31;
  double v32;
  double v33;
  double v34;
  uint64_t v35;
  uint64_t v36;
  __n128 v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  double v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char v48;
  double *v54;
  uint64_t ObjectType;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t *v62;
  char *v63;
  uint64_t v64;
  char *v65;
  uint64_t v67;
  char *v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t *v76;
  uint64_t v77;
  id v78;

  v70 = a2;
  v78 = a1;
  v76 = a4;
  v5 = type metadata accessor for InternalWidgetFamily(0);
  v74 = *(_QWORD *)(v5 - 8);
  v75 = v5;
  __chkstk_darwin(v5);
  v73 = (char *)&v67 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = (int *)type metadata accessor for LayoutContext(0);
  v8 = __chkstk_darwin(v7);
  v71 = (uint64_t)&v67 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v11 = (char *)&v67 - v10;
  v12 = sub_10001B520(&qword_1000BAEA8);
  __chkstk_darwin(v12);
  v68 = (char *)&v67 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for ContentSizeCategory(0);
  v15 = *(_QWORD *)(v14 - 8);
  __chkstk_darwin(v14);
  v69 = (char *)&v67 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = type metadata accessor for TimelineProviderContext.EnvironmentVariants(0);
  v18 = *(_QWORD *)(v17 - 8);
  v19 = __chkstk_darwin(v17);
  v21 = (char *)&v67 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = __chkstk_darwin(v19);
  v24 = (char *)&v67 - v23;
  v77 = a3;
  TimelineProviderContext.environmentVariants.getter(v22);
  KeyPath = swift_getKeyPath(&unk_10008D270);
  v26 = TimelineProviderContext.EnvironmentVariants.subscript.getter();
  v27 = swift_release(KeyPath);
  v28 = *(uint64_t (**)(char *, uint64_t, __n128))(v18 + 8);
  v29 = v28(v24, v17, v27);
  if (v26)
  {
    v30 = *(_QWORD *)(v26 + 16);
    if (v30)
    {
      v31 = (double *)(v26 + 32);
      v32 = 2.0;
      do
      {
        v33 = *v31++;
        v34 = v33;
        if (v32 <= v33)
          v32 = v34;
        --v30;
      }
      while (v30);
    }
    else
    {
      v32 = 2.0;
    }
    v29 = swift_bridgeObjectRelease(v26);
  }
  else
  {
    v32 = 3.0;
  }
  TimelineProviderContext.environmentVariants.getter(v29);
  v35 = swift_getKeyPath(&unk_10008D2A0);
  v36 = TimelineProviderContext.EnvironmentVariants.subscript.getter();
  v37 = swift_release(v35);
  v28(v21, v17, v37);
  if (v36)
  {
    if (*(_QWORD *)(v36 + 16))
    {
      v38 = (uint64_t)v68;
      (*(void (**)(char *, unint64_t, uint64_t))(v15 + 16))(v68, v36 + ((*(unsigned __int8 *)(v15 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80)), v14);
      v39 = 0;
      v40 = v69;
      v41 = v70;
    }
    else
    {
      v39 = 1;
      v40 = v69;
      v41 = v70;
      v38 = (uint64_t)v68;
    }
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v15 + 56))(v38, v39, 1, v14);
    swift_bridgeObjectRelease(v36);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v15 + 48))(v38, 1, v14) != 1)
    {
      v42 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v15 + 32))(v40, v38, v14);
      goto LABEL_19;
    }
  }
  else
  {
    v38 = (uint64_t)v68;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v15 + 56))(v68, 1, 1, v14);
    v40 = v69;
    v41 = v70;
  }
  (*(void (**)(char *, _QWORD, uint64_t))(v15 + 104))(v40, enum case for ContentSizeCategory.large(_:), v14);
  v42 = sub_10002CCF4(v38, &qword_1000BAEA8);
LABEL_19:
  v43 = TimelineProviderContext.internalFamily.getter(v42);
  v44 = TimelineProviderContext.displaySize.getter(v43);
  v46 = v45;
  v47 = (*(uint64_t (**)(char *, char *, uint64_t))(v15 + 16))(&v11[v7[8]], v40, v14);
  v48 = TimelineProviderContext.isPreview.getter(v47);
  __asm { FMOV            V0.2D, #16.0 }
  *(_OWORD *)v11 = _Q0;
  v54 = (double *)&v11[v7[7]];
  *v54 = v44;
  *((_QWORD *)v54 + 1) = v46;
  *(double *)&v11[v7[9]] = v32;
  *(_QWORD *)&v11[v7[10]] = 0x3FF0000000000000;
  v11[v7[11]] = 0;
  v11[v7[12]] = v48 & 1;
  ObjectType = swift_getObjectType(v78);
  v70 = (*(uint64_t (**)(uint64_t, uint64_t))(v41 + 8))(ObjectType, v41);
  v56 = v71;
  v57 = sub_10002A83C((uint64_t)v11, v71, type metadata accessor for LayoutContext);
  v58 = v73;
  TimelineProviderContext.internalFamily.getter(v57);
  sub_100027D34((uint64_t)v11, type metadata accessor for LayoutContext);
  (*(void (**)(char *, uint64_t))(v15 + 8))(v40, v14);
  v60 = *(_QWORD *)(v72 + 16);
  v59 = *(_QWORD *)(v72 + 24);
  v61 = type metadata accessor for EntryRequest(0);
  v62 = v76;
  v63 = (char *)v76 + *(int *)(v61 + 24);
  *(_QWORD *)v63 = v78;
  *((_QWORD *)v63 + 1) = v41;
  v64 = type metadata accessor for NewsWidgetInfo(0);
  (*(void (**)(char *, char *, uint64_t))(v74 + 32))(&v63[*(int *)(v64 + 20)], v58, v75);
  v65 = &v63[*(int *)(v64 + 24)];
  *(_QWORD *)v65 = v60;
  *((_QWORD *)v65 + 1) = v59;
  *v62 = v70;
  sub_10002AC74(v56, (uint64_t)v62 + *(int *)(v61 + 20), type metadata accessor for LayoutContext);
  swift_bridgeObjectRetain(v59);
  return v78;
}

uint64_t sub_100072BCC(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  NSObject *v14;
  os_log_type_t v15;
  uint8_t *v16;
  _QWORD *v17;
  uint64_t v18;
  id v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  id v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  void *v46;
  _QWORD *v47;
  uint64_t v48;
  uint64_t v49;
  id v50;
  uint64_t v51;
  void *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  id v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t *v71;
  uint64_t v72;
  id v73;
  uint64_t v74;

  v72 = a4;
  v70 = a3;
  v64 = a2;
  v6 = *v4;
  v7 = type metadata accessor for TimelineProviderContext(0);
  v67 = *(_QWORD *)(v7 - 8);
  v68 = v7;
  __chkstk_darwin(v7);
  v65 = v8;
  v66 = (char *)&v56 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for EntryRequest(0);
  v62 = *(_QWORD *)(v9 - 8);
  v10 = __chkstk_darwin(v9);
  v69 = (uint64_t)&v56 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v63 = v11;
  __chkstk_darwin(v10);
  v71 = (uint64_t *)((char *)&v56 - v12);
  sub_10002CC78(0, (unint64_t *)&qword_1000BBB00, OS_os_log_ptr);
  v13 = a1;
  v14 = static OS_os_log.default.getter(v13);
  v15 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v14, v15))
  {
    v16 = (uint8_t *)swift_slowAlloc(12, -1);
    v17 = (_QWORD *)swift_slowAlloc(8, -1);
    *(_DWORD *)v16 = 138412290;
    v73 = v13;
    v18 = v6;
    v19 = v13;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v73, &v74, v16 + 4, v16 + 12);
    *v17 = v13;

    v6 = v18;
    _os_log_impl((void *)&_mh_execute_header, v14, v15, "fetching news entry for configuration %@", v16, 0xCu);
    v20 = sub_10001B520((uint64_t *)&unk_1000BC570);
    swift_arrayDestroy(v17, 1, v20);
    swift_slowDealloc(v17, -1, -1);
    swift_slowDealloc(v16, -1, -1);
  }
  else
  {

  }
  v21 = v71;
  v58 = *(_QWORD *)(v6 + 88);
  v22 = v58;
  v23 = v64;
  v24 = v61;
  v25 = sub_100072700(v13, v58, v64, v71);
  __chkstk_darwin(v25);
  *(&v56 - 2) = v24;
  *(&v56 - 1) = (uint64_t)v21;
  v26 = type metadata accessor for NewsTimelineEntry(0);
  v27 = firstly<A>(closure:)(sub_10007585C, &v56 - 4, v26);
  v28 = (_QWORD *)swift_allocObject(&unk_1000AD6C0, 56, 7);
  v57 = *(_QWORD *)(v6 + 80);
  v28[2] = v57;
  v28[3] = v22;
  v29 = v70;
  v28[4] = v13;
  v28[5] = v29;
  v30 = v72;
  v28[6] = v72;
  v59 = v13;
  v31 = swift_retain(v30);
  v32 = (void *)zalgo.getter(v31);
  v60 = Promise.then<A>(on:closure:)(v32, sub_1000758F4, v28, (char *)&type metadata for () + 8);
  swift_release(v27);
  swift_release(v28);

  v33 = v66;
  v34 = v67;
  v35 = v68;
  (*(void (**)(char *, uint64_t, uint64_t))(v67 + 16))(v66, v23, v68);
  sub_10002A83C((uint64_t)v21, v69, type metadata accessor for EntryRequest);
  v36 = *(unsigned __int8 *)(v34 + 80);
  v37 = (v36 + 32) & ~v36;
  v38 = (v65 + v37 + 7) & 0xFFFFFFFFFFFFFFF8;
  v39 = (v38 + 15) & 0xFFFFFFFFFFFFFFF8;
  v40 = (v39 + 23) & 0xFFFFFFFFFFFFFFF8;
  v41 = *(unsigned __int8 *)(v62 + 80);
  v42 = v24;
  v43 = (v41 + v40 + 8) & ~v41;
  v44 = swift_allocObject(&unk_1000AD6E8, v43 + v63, v36 | v41 | 7);
  v45 = v58;
  *(_QWORD *)(v44 + 16) = v57;
  *(_QWORD *)(v44 + 24) = v45;
  (*(void (**)(uint64_t, char *, uint64_t))(v34 + 32))(v44 + v37, v33, v35);
  v46 = v59;
  *(_QWORD *)(v44 + v38) = v59;
  v47 = (_QWORD *)(v44 + v39);
  v48 = v69;
  v49 = v72;
  *v47 = v70;
  v47[1] = v49;
  *(_QWORD *)(v44 + v40) = v42;
  sub_10002AC74(v48, v44 + v43, type metadata accessor for EntryRequest);
  v50 = v46;
  swift_retain(v49);
  v51 = swift_retain(v42);
  v52 = (void *)zalgo.getter(v51);
  v53 = v60;
  v54 = Promise.error(on:closure:)(v52, sub_100075AA4, v44);
  swift_release(v54);
  swift_release(v53);
  swift_release(v44);

  return sub_100027D34((uint64_t)v71, type metadata accessor for EntryRequest);
}

uint64_t sub_100073020(void *a1, uint64_t a2, id a3, uint64_t a4)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t result;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  id v34;
  _QWORD *v35;
  _QWORD *v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  void (*v53)(uint64_t, uint64_t, uint64_t);
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  double v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  void (*v61)(_QWORD, _QWORD);
  char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  _QWORD *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  unint64_t v78;
  char *v79;
  uint64_t v80;
  id v81;
  char *v82;
  uint64_t v83;
  id v84;
  char *v85;
  uint64_t v86;
  void *v87;
  uint64_t v88;
  uint64_t v89;
  void (*v90)(char *, uint64_t);
  uint64_t v91;
  uint64_t v92;
  _QWORD *v93;
  uint64_t v94;
  id v95;
  char *v96;
  char *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  id v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  _QWORD *v107;
  uint64_t v108;
  uint64_t v109;
  char *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  _QWORD v115[6];

  v5 = v4;
  v102 = a4;
  v101 = a3;
  v109 = a2;
  v95 = a1;
  v6 = *v4;
  v7 = type metadata accessor for TimelineProviderContext(0);
  v112 = *(_QWORD *)(v7 - 8);
  v113 = v7;
  __chkstk_darwin(v7);
  v105 = v8;
  v110 = (char *)&v92 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v98 = type metadata accessor for TaskContext(0);
  v9 = __chkstk_darwin(v98);
  v99 = (uint64_t)&v92 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v114 = (uint64_t)&v92 - v11;
  v12 = sub_10001B520(&qword_1000B93A0);
  __chkstk_darwin(v12);
  v14 = (char *)&v92 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for URL(0);
  v16 = *(_QWORD *)(v15 - 8);
  v17 = __chkstk_darwin(v15);
  v96 = (char *)&v92 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  v97 = (char *)&v92 - v19;
  v20 = sub_10001B520(&qword_1000BC520);
  __chkstk_darwin(v20);
  v111 = (uint64_t)&v92 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = type metadata accessor for NewsWidgetInfo(0);
  v100 = *(_QWORD *)(v22 - 8);
  v23 = __chkstk_darwin(v22);
  v103 = (uint64_t)&v92 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v106 = v24;
  __chkstk_darwin(v23);
  v26 = (uint64_t *)((char *)&v92 - v25);
  v28 = v4[17];
  v27 = v4[18];
  v93 = v4 + 14;
  sub_10001D9B4(v4 + 14, v28);
  v29 = type metadata accessor for TelemetryManager(0);
  result = dispatch thunk of ResolverType.resolve<A>(_:)(v29, v29, v28, v27);
  v104 = result;
  if (result)
  {
    v94 = v6;
    v31 = *(_QWORD *)(v6 + 88);
    TimelineProviderContext.internalFamily.getter(result);
    v32 = v4[2];
    v33 = v4[3];
    v34 = v95;
    *v26 = v95;
    v26[1] = v31;
    v108 = v31;
    v35 = (_QWORD *)((char *)v26 + *(int *)(v22 + 24));
    *v35 = v32;
    v35[1] = v33;
    v36 = sub_10001D9B4(v4 + 9, v4[12]);
    v37 = *v36;
    sub_10001D9B4((_QWORD *)(*v36 + 16), *(_QWORD *)(*v36 + 40));
    swift_bridgeObjectRetain(v33);
    v95 = v34;
    sub_10001E654((uint64_t)v26, (uint64_t)v14);
    v38 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v16 + 48))(v14, 1, v15);
    v107 = v26;
    if (v38 == 1)
    {
      sub_10002CCF4((uint64_t)v14, &qword_1000B93A0);
      v39 = type metadata accessor for TrackableNewsTimelineEntry(0);
      v40 = v111;
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v39 - 8) + 56))(v111, 1, 1, v39);
      v41 = v106;
      v42 = v102;
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v16 + 32))(v97, v14, v15);
      v43 = v96;
      URL.appendingPathComponent(_:)(*(_QWORD *)(v37 + 56), *(_QWORD *)(v37 + 64));
      v44 = Data.init(contentsOf:options:)(v43, 0);
      v42 = v102;
      v45 = v44;
      v92 = v15;
      v47 = v46;
      v48 = type metadata accessor for JSONDecoder(0);
      swift_allocObject(v48, *(unsigned int *)(v48 + 48), *(unsigned __int16 *)(v48 + 52));
      v49 = JSONDecoder.init()();
      v50 = type metadata accessor for TrackableNewsTimelineEntry(0);
      v51 = sub_10001C96C((unint64_t *)&unk_1000BC530, type metadata accessor for TrackableNewsTimelineEntry, (uint64_t)&unk_10008AB10);
      v40 = v111;
      dispatch thunk of JSONDecoder.decode<A>(_:from:)(v50, v45, v47, v50, v51);
      swift_release(v49);
      sub_10001D9D8(v45, v47);
      v90 = *(void (**)(char *, uint64_t))(v16 + 8);
      v91 = v92;
      v90(v96, v92);
      v90(v97, v91);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v50 - 8) + 56))(v40, 0, 1, v50);
      v41 = v106;
      v26 = v107;
    }
    v52 = (uint64_t)v101;
    v53 = *(void (**)(uint64_t, uint64_t, uint64_t))(v112 + 16);
    v54 = v114;
    v55 = v109;
    v53(v114, v109, v113);
    sub_10002CCB0(v40, v54 + *(int *)(v98 + 20), &qword_1000BC520);
    v56 = sub_10001B560(&qword_1000BC528);
    v102 = *(_QWORD *)(v94 + 80);
    type metadata accessor for TaskManager(0, v56, v102, v108);
    v57 = static WidgetCenter.Private_Timeouts.timeline.getter();
    v58 = v54;
    v59 = v99;
    sub_10002A83C(v58, v99, type metadata accessor for TaskContext);
    v101 = v95;
    v60 = sub_1000689F4((uint64_t)v101, v59, v57);
    v61 = (void (*)(_QWORD, _QWORD))v42;
    v62 = (char *)v60;
    sub_100068BF0(v52, v61);
    if ((sub_10007385C(v40) & 1) != 0)
    {
      v63 = v5[17];
      v64 = v5[18];
      sub_10001D9B4(v93, v63);
      v65 = type metadata accessor for EventProcessingSidecarTask();
      v66 = dispatch thunk of ResolverType.resolve<A>(_:)(v65, v65, v63, v64);
      if (v66)
      {
        v67 = v66;
        v115[3] = v65;
        v115[4] = &off_1000AB8E8;
        v115[0] = v66;
        swift_retain(v66);
        v68 = sub_100069D98(v115);
        swift_release(v68);
        swift_release(v67);
        sub_10001DA60(v115);
      }
    }
    v99 = sub_100073A10(v5);
    v98 = firstly<A>(closure:)(sub_100071BE4, v99, (char *)&type metadata for () + 8);
    v97 = v62;
    v69 = v113;
    v53((uint64_t)v110, v55, v113);
    v70 = v103;
    sub_10002A83C((uint64_t)v26, v103, type metadata accessor for NewsWidgetInfo);
    v71 = v5;
    v72 = v112;
    v73 = *(unsigned __int8 *)(v112 + 80);
    v74 = (v73 + 48) & ~v73;
    v75 = *(unsigned __int8 *)(v100 + 80);
    v76 = (v105 + v75 + v74) & ~v75;
    v77 = (v41 + v76 + 7) & 0xFFFFFFFFFFFFFFF8;
    v78 = (v77 + 15) & 0xFFFFFFFFFFFFFFF8;
    v79 = (char *)swift_allocObject(&unk_1000AD620, v78 + 8, v73 | v75 | 7);
    v80 = v108;
    *((_QWORD *)v79 + 2) = v102;
    *((_QWORD *)v79 + 3) = v80;
    v81 = v101;
    *((_QWORD *)v79 + 4) = v71;
    *((_QWORD *)v79 + 5) = v81;
    (*(void (**)(char *, char *, uint64_t))(v72 + 32))(&v79[v74], v110, v69);
    sub_10002AC74(v70, (uint64_t)&v79[v76], type metadata accessor for NewsWidgetInfo);
    v82 = v97;
    *(_QWORD *)&v79[v77] = v97;
    v83 = v104;
    *(_QWORD *)&v79[v78] = v104;
    v84 = v81;
    swift_retain(v71);
    v85 = v82;
    swift_retain(v82);
    v86 = swift_retain(v83);
    v87 = (void *)zalgo.getter(v86);
    v88 = v98;
    v89 = Promise.always(on:closure:)(v87, sub_100075618, v79);
    swift_release(v79);

    swift_release(v89);
    swift_release(v88);
    sub_100074354();
    swift_release(v85);
    swift_release(v83);
    swift_release(v99);
    sub_100027D34(v114, type metadata accessor for TaskContext);
    sub_10002CCF4(v111, &qword_1000BC520);
    return sub_100027D34((uint64_t)v107, type metadata accessor for NewsWidgetInfo);
  }
  else
  {
    __break(1u);
  }
  return result;
}

void *sub_10007385C(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *result;
  void *v7;
  id v8;
  id v9;
  char v10;
  char v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v3 = v1[17];
  v4 = v1[18];
  sub_10001D9B4(v1 + 14, v3);
  v5 = sub_10001B520(&qword_1000BA020);
  result = (void *)dispatch thunk of ResolverType.resolve<A>(_:)(v5, v5, v3, v4);
  if (result)
  {
    v7 = result;
    v8 = objc_msgSend(result, "possiblyUnfetchedAppConfiguration");
    if ((objc_msgSend(v8, "respondsToSelector:", "widgetAnalyticsEnabled") & 1) != 0
      && objc_msgSend(v8, "widgetAnalyticsEnabled"))
    {
      v9 = sub_1000750A4(a1);
      if ((v10 & 1) != 0)
      {
        v17 = 0;
        goto LABEL_10;
      }
      v11 = sub_1000753A4((uint64_t)v9, (uint64_t)&off_1000AB000);
      v12 = sub_10002CC78(0, (unint64_t *)&qword_1000BBB00, OS_os_log_ptr);
      v13 = (void *)static OS_os_log.default.getter(v12);
      v14 = static os_log_type_t.default.getter();
      if ((v11 & 1) == 0)
      {
        os_log(_:dso:log:type:_:)("widget analytics enabled", 24, 2, &_mh_execute_header, v13, v14, _swiftEmptyArrayStorage);
        v17 = 1;
        goto LABEL_9;
      }
      os_log(_:dso:log:type:_:)("widget analytics disabled because onboarding version is not sufficiently high", 77, 2, &_mh_execute_header, v13, v14, _swiftEmptyArrayStorage);
    }
    else
    {
      v15 = sub_10002CC78(0, (unint64_t *)&qword_1000BBB00, OS_os_log_ptr);
      v13 = (void *)static OS_os_log.default.getter(v15);
      v16 = static os_log_type_t.default.getter();
      os_log(_:dso:log:type:_:)("widget analytics disabled because of app config setting", 55, 2, &_mh_execute_header, v13, v16, _swiftEmptyArrayStorage);
    }
    v17 = 0;
LABEL_9:

LABEL_10:
    swift_unknownObjectRelease(v7);
    swift_unknownObjectRelease(v8);
    return (void *)v17;
  }
  __break(1u);
  return result;
}

uint64_t sub_100073A10(_QWORD *a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD v15[5];

  v2 = a1 + 14;
  v3 = a1[17];
  v4 = a1[18];
  sub_10001D9B4(a1 + 14, v3);
  v5 = sub_10001B520((uint64_t *)&unk_1000BA1A0);
  result = dispatch thunk of ResolverType.resolve<A>(_:name:)(v5, 0x646165486E656553, 0xEC000000656E696CLL, v5, v3, v4);
  if (result)
  {
    v7 = result;
    v9 = a1[17];
    v8 = a1[18];
    sub_10001D9B4(v2, v9);
    v10 = type metadata accessor for EventProcessingSidecarTask();
    v11 = swift_allocObject(&unk_1000AD710, 24, 7);
    *(_QWORD *)(v11 + 16) = v7;
    swift_unknownObjectRetain(v7);
    v12 = dispatch thunk of ResolverType.resolve<A>(_:with:)(v10, sub_100075BD4, v11, v10, v9, v8);
    swift_release(v11);
    if (v12)
    {
      v15[3] = v10;
      v15[4] = &off_1000AB8E8;
      v15[0] = v12;
      swift_retain(v12);
      v13 = sub_100069D98(v15);
      swift_release(v12);
      swift_unknownObjectRelease(v7);
      sub_10001DA60(v15);
    }
    else
    {
      v14 = sub_10001B520(&qword_1000BA250);
      swift_allocObject(v14, *(unsigned int *)(v14 + 48), *(unsigned __int16 *)(v14 + 52));
      v13 = Promise.init(value:)();
      swift_unknownObjectRelease(v7);
    }
    return v13;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_100073B94(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = a1[3];
  v4 = a1[4];
  sub_10001D9B4(a1, v3);
  v5 = sub_10001B520((uint64_t *)&unk_1000BA1A0);
  return dispatch thunk of ContextType.use<A>(_:for:)(a2, v5, v5, v3, v4);
}

double sub_100073BEC(uint64_t *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t (*v18)(_QWORD);
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  double result;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;

  v33 = a5;
  v34 = a6;
  v35 = a2;
  v9 = *a1;
  v31 = a3;
  v32 = v9;
  v10 = type metadata accessor for TimelineProviderContext(0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(_QWORD *)(v11 + 64);
  __chkstk_darwin(v10);
  v13 = (char *)&v30 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for NewsWidgetInfo(0);
  v15 = *(_QWORD *)(v14 - 8);
  v16 = *(_QWORD *)(v15 + 64);
  __chkstk_darwin(v14);
  v17 = (char *)&v30 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10002A83C(a4, (uint64_t)v17, v18);
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v13, a3, v10);
  v19 = *(unsigned __int8 *)(v15 + 80);
  v20 = (v19 + 40) & ~v19;
  v21 = *(unsigned __int8 *)(v11 + 80);
  v22 = (v16 + v21 + v20) & ~v21;
  v23 = (v12 + v22 + 7) & 0xFFFFFFFFFFFFFFF8;
  v24 = (v23 + 15) & 0xFFFFFFFFFFFFFFF8;
  v25 = (char *)swift_allocObject(&unk_1000AD698, v24 + 8, v19 | v21 | 7);
  v26 = v32;
  *((_QWORD *)v25 + 2) = *(_QWORD *)(v32 + 80);
  *((_QWORD *)v25 + 3) = *(_QWORD *)(v26 + 88);
  *((_QWORD *)v25 + 4) = a1;
  sub_10002AC74((uint64_t)v17, (uint64_t)&v25[v20], type metadata accessor for NewsWidgetInfo);
  (*(void (**)(char *, char *, uint64_t))(v11 + 32))(&v25[v22], v13, v10);
  v28 = v33;
  v27 = v34;
  *(_QWORD *)&v25[v23] = v33;
  *(_QWORD *)&v25[v24] = v27;
  swift_retain(a1);
  swift_retain(v28);
  swift_retain(v27);
  sub_100072BCC(v35, v31, (uint64_t)sub_1000757D0, (uint64_t)v25);
  *(_QWORD *)&result = swift_release(v25).n128_u64[0];
  return result;
}

uint64_t sub_100073DA8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  id v37;
  char *v38;
  double v39;
  double v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  void (*v54)(char *, uint64_t);
  uint64_t v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  char *v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;

  v72 = a6;
  v70 = a5;
  v60 = a4;
  v61 = a2;
  v62 = a3;
  v71 = sub_10001B520(&qword_1000BC528);
  v69 = *(_QWORD *)(v71 - 8);
  __chkstk_darwin(v71);
  v68 = (char *)&v56 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for TimelineReloadPolicy(0);
  v66 = *(_QWORD *)(v8 - 8);
  v67 = v8;
  v9 = __chkstk_darwin(v8);
  v64 = (char *)&v56 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v65 = (char *)&v56 - v11;
  v12 = type metadata accessor for InternalWidgetFamily(0);
  v58 = *(_QWORD *)(v12 - 8);
  v59 = v12;
  __chkstk_darwin(v12);
  v57 = (char *)&v56 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for TrackableNewsTimelineEntry(0);
  v15 = __chkstk_darwin(v14);
  v17 = (char *)&v56 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  v19 = (char *)&v56 - v18;
  v20 = type metadata accessor for Date(0);
  v73 = *(_QWORD *)(v20 - 8);
  v74 = v20;
  v21 = __chkstk_darwin(v20);
  v23 = (char *)&v56 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = __chkstk_darwin(v21);
  v26 = (char *)&v56 - v25;
  Date.init()(v24);
  v27 = type metadata accessor for NewsTimelineEntry(0);
  v28 = *(int *)(v27 + 20);
  v75 = a1;
  v29 = a1 + v28;
  v30 = type metadata accessor for TodayContent(0);
  v31 = (uint64_t *)(v29 + *(int *)(v30 + 40));
  v32 = v31[1];
  if (v32)
  {
    v33 = v30;
    v34 = *v31;
    (*(void (**)(char *, uint64_t, uint64_t))(v73 + 16))(v17, v75, v74);
    v35 = *(_QWORD *)(v29 + *(int *)(v33 + 36));
    *(_QWORD *)&v17[*(int *)(v14 + 20)] = v35;
    v36 = &v17[*(int *)(v14 + 24)];
    *(_QWORD *)v36 = v34;
    *((_QWORD *)v36 + 1) = v32;
    sub_10002AC74((uint64_t)v17, (uint64_t)v19, type metadata accessor for TrackableNewsTimelineEntry);
    sub_10001D9B4((_QWORD *)(v61 + 72), *(_QWORD *)(v61 + 96));
    swift_retain(v35);
    swift_bridgeObjectRetain(v32);
    sub_10001D794((uint64_t)v19);
    sub_100027D34((uint64_t)v19, type metadata accessor for TrackableNewsTimelineEntry);
  }
  v37 = objc_msgSend(*(id *)(v29 + 16), "widgetConfig");
  if (!v37)
  {
    v38 = v57;
    TimelineProviderContext.internalFamily.getter(0);
    v37 = sub_100074204();
    (*(void (**)(char *, uint64_t))(v58 + 8))(v38, v59);
  }
  v39 = (double)(uint64_t)objc_msgSend(v37, "widgetSystemReloadInterval");
  v40 = (double)(uint64_t)objc_msgSend(v37, "widgetSystemReloadJitterMax");
  v63 = v26;
  static Date.+ infix(_:_:)(v26, v39);
  v41 = v65;
  static TimelineReloadPolicy.after(_:jitteredUpTo:)(v23, v40);
  v42 = sub_10001B520((uint64_t *)&unk_1000BC580);
  v43 = *(_QWORD *)(v27 - 8);
  v44 = *(_QWORD *)(v43 + 72);
  v45 = *(unsigned __int8 *)(v43 + 80);
  v46 = (v45 + 32) & ~v45;
  v47 = swift_allocObject(v42, v46 + v44, v45 | 7);
  *(_OWORD *)(v47 + 16) = xmmword_10008AC60;
  sub_10002A83C(v75, v47 + v46, type metadata accessor for NewsTimelineEntry);
  v49 = v66;
  v48 = v67;
  v50 = v64;
  (*(void (**)(char *, char *, uint64_t))(v66 + 16))(v64, v41, v67);
  v51 = sub_10001C96C(qword_1000BC500, type metadata accessor for NewsTimelineEntry, (uint64_t)&unk_10008A394);
  v52 = (uint64_t)v68;
  Timeline.init(entries:policy:)(v47, v50, v27, v51);
  sub_100069A50(v52);
  TelemetryManager.flush()();

  (*(void (**)(uint64_t, uint64_t))(v69 + 8))(v52, v71);
  (*(void (**)(char *, uint64_t))(v49 + 8))(v41, v48);
  v53 = v74;
  v54 = *(void (**)(char *, uint64_t))(v73 + 8);
  v54(v23, v74);
  return ((uint64_t (*)(char *, uint64_t))v54)(v63, v53);
}

id sub_100074204()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  int v6;
  int v7;
  int v8;
  id result;
  void *v10;
  uint64_t v12;

  v1 = v0;
  v2 = type metadata accessor for InternalWidgetFamily(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v12 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v5, v1, v2);
  v6 = (*(uint64_t (**)(char *, uint64_t))(v3 + 88))(v5, v2);
  v7 = enum case for InternalWidgetFamily.systemSmall(_:);
  v8 = enum case for InternalWidgetFamily.accessoryRectangular(_:);
  result = objc_msgSend(objc_allocWithZone((Class)NTPBTodayWidgetConfig), "init");
  v10 = result;
  if (v6 == v7 || v6 == v8)
  {
    if (result)
    {
      objc_msgSend(result, "setWidgetSystemReloadInterval:", 7200);
      objc_msgSend(v10, "setWidgetSystemReloadJitterMax:", 600);
      return v10;
    }
    __break(1u);
  }
  else if (result)
  {
    objc_msgSend(result, "setWidgetSystemReloadInterval:", 300);
    objc_msgSend(v10, "setWidgetSystemReloadJitterMax:", 600);
    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
    return v10;
  }
  __break(1u);
  return result;
}

uint64_t sub_100074354()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  _QWORD *v15;
  _QWORD aBlock[6];

  v1 = type metadata accessor for DispatchWorkItemFlags(0);
  v2 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  v4 = (char *)&v14 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for DispatchQoS(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = *(_QWORD *)(v0 + 152);
  aBlock[4] = sub_100074BF8;
  aBlock[5] = 0;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100031160;
  aBlock[3] = &unk_1000AD638;
  v9 = _Block_copy(aBlock);
  static DispatchQoS.unspecified.getter(v9);
  v15 = _swiftEmptyArrayStorage;
  v10 = sub_10001C96C((unint64_t *)&qword_1000BC058, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v11 = sub_10001B520((uint64_t *)&unk_1000BC540);
  v12 = sub_100075BDC((unint64_t *)&qword_1000BC060, (uint64_t *)&unk_1000BC540);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v15, v11, v12, v1, v10);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v8, v4, v9);
  _Block_release(v9);
  (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

void sub_10007450C(double *a1@<X8>)
{
  *a1 = EnvironmentValues.displayScale.getter();
}

uint64_t sub_100074534(double *a1)
{
  return EnvironmentValues.displayScale.setter(*a1);
}

uint64_t sub_100074558(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v7;

  v2 = type metadata accessor for ContentSizeCategory(0);
  __chkstk_darwin(v2);
  v4 = (char *)&v7 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t))(v5 + 16))(v4, a1);
  return EnvironmentValues.sizeCategory.setter(v4);
}

uint64_t sub_1000745D4(uint64_t a1, void *a2, uint64_t (*a3)(uint64_t))
{
  id v6;
  NSObject *v7;
  os_log_type_t v8;
  uint8_t *v9;
  id v10;
  uint64_t v11;
  _QWORD *v13;
  uint64_t v14;
  id v15;
  uint64_t v16;

  sub_10002CC78(0, (unint64_t *)&qword_1000BBB00, OS_os_log_ptr);
  v6 = a2;
  v7 = static OS_os_log.default.getter(v6);
  v8 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v7, v8))
  {
    v9 = (uint8_t *)swift_slowAlloc(12, -1);
    v13 = (_QWORD *)swift_slowAlloc(8, -1);
    *(_DWORD *)v9 = 138412290;
    v15 = v6;
    v14 = a1;
    v10 = v6;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v15, &v16, v9 + 4, v9 + 12);
    *v13 = v6;

    a1 = v14;
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "returning content entry for configuration %@", v9, 0xCu);
    v11 = sub_10001B520((uint64_t *)&unk_1000BC570);
    swift_arrayDestroy(v13, 1, v11);
    swift_slowDealloc(v13, -1, -1);
    swift_slowDealloc(v9, -1, -1);
  }
  else
  {

  }
  return a3(a1);
}

uint64_t sub_10007477C(uint8_t *a1, uint64_t a2, void *a3, void (*a4)(_QWORD), uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v12;
  id *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char v19;
  id v20;
  NSObject *v21;
  os_log_type_t v22;
  _BOOL4 v23;
  uint8_t *v24;
  id v25;
  id v26;
  _QWORD *v27;
  uint8_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint8_t *v31;
  id v32;
  id v33;
  _QWORD *v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t v46;
  void (*v47)(_QWORD);
  uint8_t *v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  id v52;
  uint64_t v53;

  v48 = a1;
  v50 = type metadata accessor for ContentServiceRequest(0);
  __chkstk_darwin(v50);
  v13 = (id *)((char *)&v43 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  v14 = type metadata accessor for TodayContent(0);
  __chkstk_darwin(v14);
  v51 = (uint64_t *)((char *)&v43 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
  v49 = type metadata accessor for NewsTimelineEntry(0);
  v16 = __chkstk_darwin(v49);
  v18 = (char *)&v43 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = TimelineProviderContext.isPreview.getter(v16);
  sub_10002CC78(0, (unint64_t *)&qword_1000BBB00, OS_os_log_ptr);
  v20 = a3;
  v21 = static OS_os_log.default.getter(v20);
  v22 = static os_log_type_t.default.getter();
  v23 = os_log_type_enabled(v21, v22);
  if ((v19 & 1) != 0)
  {
    if (v23)
    {
      v47 = a4;
      v24 = (uint8_t *)swift_slowAlloc(12, -1);
      v44 = (_QWORD *)swift_slowAlloc(8, -1);
      v48 = v24;
      *(_DWORD *)v24 = 138412290;
      v45 = a6;
      v52 = v20;
      v25 = v20;
      v46 = a5;
      v26 = v25;
      a4 = v47;
      a6 = v45;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v52, &v53, v24 + 4, v24 + 12);
      v27 = v44;
      *v44 = v20;

      v28 = v48;
      _os_log_impl((void *)&_mh_execute_header, v21, v22, "returning placeholder for configuration %@", v48, 0xCu);
      v29 = sub_10001B520((uint64_t *)&unk_1000BC570);
      swift_arrayDestroy(v27, 1, v29);
      swift_slowDealloc(v27, -1, -1);
      swift_slowDealloc(v28, -1, -1);
    }
    else
    {

    }
    v36 = sub_10001D9B4((_QWORD *)(a6 + 32), *(_QWORD *)(a6 + 56));
    sub_10001D9B4((_QWORD *)(*v36 + 16), *(_QWORD *)(*v36 + 40));
    v37 = sub_100041E9C();
    v38 = type metadata accessor for EntryRequest(0);
    v39 = v50;
    sub_10002A83C(a7 + *(int *)(v38 + 20), (uint64_t)v13 + *(int *)(v50 + 20), type metadata accessor for LayoutContext);
    sub_10002A83C(a7 + *(int *)(v38 + 24), (uint64_t)v13 + *(int *)(v39 + 24), type metadata accessor for NewsWidgetInfo);
    *v13 = (id)v37;
    v40 = v51;
    sub_10006F0BC(v13, 4, (uint64_t)v51);
    sub_100027D34((uint64_t)v13, type metadata accessor for ContentServiceRequest);
    v41 = sub_10002A83C((uint64_t)v40, (uint64_t)&v18[*(int *)(v49 + 20)], type metadata accessor for TodayContent);
    Date.init()(v41);
    sub_100027D34((uint64_t)v40, type metadata accessor for TodayContent);
  }
  else
  {
    if (v23)
    {
      v30 = swift_slowAlloc(12, -1);
      v46 = a5;
      v31 = (uint8_t *)v30;
      v51 = (_QWORD *)swift_slowAlloc(8, -1);
      v52 = v20;
      v47 = a4;
      *(_DWORD *)v31 = 138412290;
      v32 = v20;
      v45 = a6;
      v33 = v32;
      a4 = v47;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v52, &v53, v31 + 4, v31 + 12);
      v34 = v51;
      *v51 = v20;

      a6 = v45;
      _os_log_impl((void *)&_mh_execute_header, v21, v22, "returning error within preview for configuration %@", v31, 0xCu);
      v35 = sub_10001B520((uint64_t *)&unk_1000BC570);
      swift_arrayDestroy(v34, 1, v35);
      swift_slowDealloc(v34, -1, -1);
      swift_slowDealloc(v31, -1, -1);
    }
    else
    {

    }
    sub_10001D9B4((_QWORD *)(a6 + 32), *(_QWORD *)(a6 + 56));
    sub_100041B70(a7, (uint64_t)v48, (uint64_t)v18);
  }
  a4(v18);
  return sub_100027D34((uint64_t)v18, type metadata accessor for NewsTimelineEntry);
}

void sub_100074BF8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  id v17;
  unsigned int v18;
  char *v19;
  id v20;
  NSString v21;
  id v22;
  char *v23;
  int v24;
  uint64_t v25;
  double v26;
  void (*v27)(char *, uint64_t);
  uint64_t v28;
  id v29;
  void *v30;
  id v31;
  uint64_t v32;
  uint64_t v33;
  id v34;
  Class isa;
  NSString v36;
  id v37[2];
  _QWORD aBlock[3];
  void *v39;
  uint64_t (*v40)(_QWORD, _QWORD);
  uint64_t v41;
  _OWORD v42[2];

  v0 = type metadata accessor for Date(0);
  v1 = *(_QWORD *)(v0 - 8);
  v2 = __chkstk_darwin(v0);
  v4 = (char *)v37 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __chkstk_darwin(v2);
  v7 = (char *)v37 - v6;
  __chkstk_darwin(v5);
  v9 = (char *)v37 - v8;
  v10 = sub_10001B520((uint64_t *)&unk_1000BC550);
  v11 = __chkstk_darwin(v10);
  v13 = (char *)v37 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __chkstk_darwin(v11);
  v16 = (char *)v37 - v15;
  v17 = (id)NewsCoreUserDefaults(v14);
  v18 = objc_msgSend(v17, "BOOLForKey:", NDDownloadServiceHasUnfinishedWorkKey);

  if (v18)
  {
    v19 = v4;
    v37[0] = (id)objc_opt_self(NSUserDefaults);
    v20 = objc_msgSend(v37[0], "standardUserDefaults");
    v37[1] = "sidecarTaskQueue";
    v21 = String._bridgeToObjectiveC()();
    v22 = objc_msgSend(v20, "objectForKey:", v21);

    if (v22)
    {
      _bridgeAnyObjectToAny(_:)(v42, v22);
      swift_unknownObjectRelease(v22);
    }
    else
    {
      memset(v42, 0, sizeof(v42));
    }
    sub_10002F788((uint64_t)v42, (uint64_t)aBlock);
    v23 = v19;
    if (v39)
    {
      v24 = swift_dynamicCast(v16, aBlock, (char *)&type metadata for Any + 8, v0, 6);
      v25 = (*(uint64_t (**)(char *, _QWORD, uint64_t, uint64_t))(v1 + 56))(v16, v24 ^ 1u, 1, v0);
    }
    else
    {
      sub_10002CCF4((uint64_t)aBlock, (uint64_t *)&unk_1000BA070);
      v25 = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v1 + 56))(v16, 1, 1, v0);
    }
    Date.init()(v25);
    sub_10002CCB0((uint64_t)v16, (uint64_t)v13, (uint64_t *)&unk_1000BC550);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v1 + 48))(v13, 1, v0) == 1)
    {
      _s7NewsTag16TelemetryManagerC13lastFlushDate33_4E4017AC2BCC1D1AC48C0D84A0E547E910Foundation0G0Vvpfi_0();
      sub_10002CCF4((uint64_t)v13, (uint64_t *)&unk_1000BC550);
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v1 + 32))(v7, v13, v0);
    }
    v26 = Date.timeIntervalSince(_:)(v7);
    v27 = *(void (**)(char *, uint64_t))(v1 + 8);
    v27(v7, v0);
    v28 = ((uint64_t (*)(char *, uint64_t))v27)(v9, v0);
    if (v26 > 3600.0)
    {
      v29 = (id)NDDownloadServiceXPCConnection(v28);
      objc_msgSend(v29, "resume");
      v40 = TodayIntentResponseCode.rawValue.getter;
      v41 = 0;
      aBlock[0] = _NSConcreteStackBlock;
      aBlock[1] = 1107296256;
      aBlock[2] = sub_100075054;
      v39 = &unk_1000AD660;
      v30 = _Block_copy(aBlock);
      v31 = objc_msgSend(v29, "remoteObjectProxyWithErrorHandler:", v30);
      _Block_release(v30);
      _bridgeAnyObjectToAny(_:)(aBlock, v31);
      swift_unknownObjectRelease(v31);
      v32 = sub_10001B520((uint64_t *)&unk_1000BC560);
      if ((swift_dynamicCast(v42, aBlock, (char *)&type metadata for Any + 8, v32, 6) & 1) != 0)
      {
        v33 = *(_QWORD *)&v42[0];
        objc_msgSend(*(id *)&v42[0], "ping");
        v34 = objc_msgSend(v37[0], "standardUserDefaults");
        Date.init()(v34);
        isa = Date._bridgeToObjectiveC()().super.isa;
        v27(v23, v0);
        v36 = String._bridgeToObjectiveC()();
        objc_msgSend(v34, "setObject:forKey:", isa, v36);
        swift_unknownObjectRelease(v33);

      }
    }
    sub_10002CCF4((uint64_t)v16, (uint64_t *)&unk_1000BC550);
  }
}

void sub_100075054(uint64_t a1, void *a2)
{
  uint64_t v3;
  void (*v4)(void);
  id v5;

  v4 = *(void (**)(void))(a1 + 32);
  v3 = *(_QWORD *)(a1 + 40);
  swift_retain(v3);
  v5 = a2;
  v4();
  swift_release(v3);

}

id sub_1000750A4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  id v6;
  id v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;
  void *v23;
  _OWORD v24[2];
  _BYTE v25[24];
  uint64_t v26;

  v2 = sub_10001B520(&qword_1000BC520);
  v3 = __chkstk_darwin(v2);
  v5 = (char *)&v22 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = (id)NewsCoreUserDefaults(v3);
  v7 = objc_msgSend(v6, "objectForKey:", FCWidgetOnboardingVersionSharedPreferenceKey);

  if (v7)
  {
    _bridgeAnyObjectToAny(_:)(v24, v7);
    swift_unknownObjectRelease(v7);
  }
  else
  {
    memset(v24, 0, sizeof(v24));
  }
  sub_10002F788((uint64_t)v24, (uint64_t)v25);
  if (v26)
  {
    v8 = sub_10002CC78(0, &qword_1000BC590, NSNumber_ptr);
    if ((swift_dynamicCast(&v23, v25, (char *)&type metadata for Any + 8, v8, 6) & 1) != 0)
    {
      v9 = v23;
      v10 = sub_10002CC78(0, (unint64_t *)&qword_1000BBB00, OS_os_log_ptr);
      v11 = (void *)static OS_os_log.default.getter(v10);
      v12 = static os_log_type_t.default.getter();
      os_log(_:dso:log:type:_:)("retrieved onboarding version via default", 40, 2, &_mh_execute_header, v11, v12, _swiftEmptyArrayStorage);

      v13 = objc_msgSend(v9, "integerValue");
      goto LABEL_11;
    }
  }
  else
  {
    sub_10002CCF4((uint64_t)v25, (uint64_t *)&unk_1000BA070);
  }
  sub_10002CCB0(a1, (uint64_t)v5, &qword_1000BC520);
  v14 = type metadata accessor for TrackableNewsTimelineEntry(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 48))(v5, 1, v14) == 1)
  {
    sub_10002CCF4((uint64_t)v5, &qword_1000BC520);
    v15 = sub_10002CC78(0, (unint64_t *)&qword_1000BBB00, OS_os_log_ptr);
    v9 = (void *)static OS_os_log.default.getter(v15);
    v16 = static os_log_type_t.default.getter();
    os_log(_:dso:log:type:_:)("failed to retrieve onboarding version", 37, 2, &_mh_execute_header, v9, v16, _swiftEmptyArrayStorage);
    v13 = 0;
  }
  else
  {
    v17 = *(_QWORD *)&v5[*(int *)(v14 + 20)];
    swift_retain(v17);
    sub_100027D34((uint64_t)v5, type metadata accessor for TrackableNewsTimelineEntry);
    v18 = *(id *)(v17 + OBJC_IVAR____TtC7NewsTag20TrackableWidgetState_fetchInfo);
    v13 = objc_msgSend(v18, "onboardingVersion", swift_release(v17).n128_f64[0]);

    v19 = sub_10002CC78(0, (unint64_t *)&qword_1000BBB00, OS_os_log_ptr);
    v9 = (void *)static OS_os_log.default.getter(v19);
    v20 = static os_log_type_t.default.getter();
    os_log(_:dso:log:type:_:)("retrieved onboarding version via fetch info", 43, 2, &_mh_execute_header, v9, v20, _swiftEmptyArrayStorage);
  }
LABEL_11:

  return v13;
}

uint64_t sub_1000753A4(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t i;
  uint64_t v4;
  _BOOL8 v5;
  BOOL v6;

  v2 = *(_QWORD *)(a2 + 16);
  if (!v2)
    return 0;
  if (*(_QWORD *)(a2 + 32) == result)
    return 1;
  if (v2 == 1)
    return 0;
  for (i = 5; ; ++i)
  {
    v4 = i - 3;
    if (__OFADD__(i - 4, 1))
      break;
    v6 = *(_QWORD *)(a2 + 8 * i) == result;
    v5 = v6;
    v6 = v6 || v4 == v2;
    if (v6)
      return v5;
  }
  __break(1u);
  return result;
}

uint64_t sub_100075408()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 24));
  sub_10001DA60((_QWORD *)(v0 + 32));
  sub_10001DA60((_QWORD *)(v0 + 72));
  sub_10001DA60((_QWORD *)(v0 + 112));

  return v0;
}

uint64_t sub_100075444()
{
  uint64_t v0;

  sub_100075408();
  return swift_deallocClassInstance(v0, 160, 7);
}

uint64_t type metadata accessor for NewsTimelineProvider(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10003DCE8(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for NewsTimelineProvider);
}

uint64_t sub_100075470()
{
  return sub_10001C96C(qword_1000BC500, type metadata accessor for NewsTimelineEntry, (uint64_t)&unk_10008A394);
}

uint64_t sub_1000754A0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_100072514(a1, a2);
}

uint64_t sub_1000754C0()
{
  return sub_100072BC8();
}

uint64_t sub_1000754E0(void *a1, uint64_t a2, void *a3, uint64_t a4)
{
  return sub_100073020(a1, a2, a3, a4);
}

uint64_t sub_100075500()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v1 = type metadata accessor for TimelineProviderContext(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 48) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  v6 = type metadata accessor for NewsWidgetInfo(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(unsigned __int8 *)(v7 + 80);
  v9 = (v4 + v5 + v8) & ~v8;
  v10 = v3 | v8 | 7;
  v11 = (*(_QWORD *)(v7 + 64) + v9 + 7) & 0xFFFFFFFFFFFFFFF8;
  v12 = (v11 + 15) & 0xFFFFFFFFFFFFFFF8;
  swift_release(*(_QWORD *)(v0 + 32));

  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  v13 = v0 + v9 + *(int *)(v6 + 20);
  v14 = type metadata accessor for InternalWidgetFamily(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 8))(v13, v14);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v9 + *(int *)(v6 + 24) + 8));
  swift_release(*(_QWORD *)(v0 + v11));
  swift_release(*(_QWORD *)(v0 + v12));
  return swift_deallocObject(v0, v12 + 8, v10);
}

double sub_100075618()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;

  v1 = *(_QWORD *)(type metadata accessor for TimelineProviderContext(0) - 8);
  v2 = (*(unsigned __int8 *)(v1 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  v3 = *(_QWORD *)(v1 + 64);
  v4 = *(_QWORD *)(type metadata accessor for NewsWidgetInfo(0) - 8);
  v5 = (v2 + v3 + *(unsigned __int8 *)(v4 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v6 = (*(_QWORD *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFFFF8;
  return sub_100073BEC(*(uint64_t **)(v0 + 32), *(void **)(v0 + 40), v0 + v2, v0 + v5, *(_QWORD *)(v0 + v6), *(_QWORD *)(v0 + ((v6 + 15) & 0xFFFFFFFFFFFFF8)));
}

uint64_t sub_10007569C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_1000756AC(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_1000756B4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;

  v1 = type metadata accessor for NewsWidgetInfo(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 40) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  v6 = type metadata accessor for TimelineProviderContext(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(unsigned __int8 *)(v7 + 80);
  v9 = (v4 + v5 + v8) & ~v8;
  v16 = v3 | v8 | 7;
  v10 = (*(_QWORD *)(v7 + 64) + v9 + 7) & 0xFFFFFFFFFFFFFFF8;
  v11 = (v10 + 15) & 0xFFFFFFFFFFFFFFF8;
  swift_release(*(_QWORD *)(v0 + 32));
  v12 = v0 + v4;

  v13 = v0 + v4 + *(int *)(v1 + 20);
  v14 = type metadata accessor for InternalWidgetFamily(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 8))(v13, v14);
  swift_bridgeObjectRelease(*(_QWORD *)(v12 + *(int *)(v1 + 24) + 8));
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v0 + v9, v6);
  swift_release(*(_QWORD *)(v0 + v10));
  swift_release(*(_QWORD *)(v0 + v11));
  return swift_deallocObject(v0, v11 + 8, v16);
}

uint64_t sub_1000757D0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;

  v3 = *(_QWORD *)(type metadata accessor for NewsWidgetInfo(0) - 8);
  v4 = (*(unsigned __int8 *)(v3 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v5 = *(_QWORD *)(v3 + 64);
  v6 = *(_QWORD *)(type metadata accessor for TimelineProviderContext(0) - 8);
  v7 = (v4 + v5 + *(unsigned __int8 *)(v6 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  v8 = (*(_QWORD *)(v6 + 64) + v7 + 7) & 0xFFFFFFFFFFFFFFF8;
  return sub_100073DA8(a1, *(_QWORD *)(v1 + 32), v1 + v4, v1 + v7, *(_QWORD *)(v1 + v8), *(_QWORD *)(v1 + ((v8 + 15) & 0xFFFFFFFFFFFFF8)));
}

uint64_t sub_10007585C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(v0 + 16);
  v2 = *(_QWORD *)(v0 + 24);
  sub_10001D9B4((_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 56));
  type metadata accessor for EntryService();
  return sub_100041DA8(v2);
}

uint64_t sub_1000758C8()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 48));
  return swift_deallocObject(v0, 56, 7);
}

uint64_t sub_1000758F4(uint64_t a1)
{
  uint64_t v1;

  return sub_1000745D4(a1, *(void **)(v1 + 32), *(uint64_t (**)(uint64_t))(v1 + 40));
}

uint64_t sub_100075914()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  id *v13;
  char *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  void (*v18)(char *, uint64_t);
  char *v19;
  uint64_t v20;
  id *v21;
  uint64_t v22;
  uint64_t v24;

  v1 = type metadata accessor for TimelineProviderContext(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 32) & ~v3;
  v5 = (*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  v6 = (v5 + 15) & 0xFFFFFFFFFFFFFFF8;
  v7 = (v6 + 23) & 0xFFFFFFFFFFFFFFF8;
  v8 = type metadata accessor for EntryRequest(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(unsigned __int8 *)(v9 + 80);
  v11 = (v10 + v7 + 8) & ~v10;
  v24 = v11 + *(_QWORD *)(v9 + 64);
  v12 = v3 | v10 | 7;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);

  swift_release(*(_QWORD *)(v0 + v6 + 8));
  swift_release(*(_QWORD *)(v0 + v7));
  v13 = (id *)(v0 + v11);

  v14 = (char *)v13 + *(int *)(v8 + 20);
  v15 = type metadata accessor for LayoutContext(0);
  v16 = &v14[*(int *)(v15 + 24)];
  v17 = type metadata accessor for InternalWidgetFamily(0);
  v18 = *(void (**)(char *, uint64_t))(*(_QWORD *)(v17 - 8) + 8);
  v18(v16, v17);
  v19 = &v14[*(int *)(v15 + 32)];
  v20 = type metadata accessor for ContentSizeCategory(0);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v20 - 8) + 8))(v19, v20);
  v21 = (id *)((char *)v13 + *(int *)(v8 + 24));

  v22 = type metadata accessor for NewsWidgetInfo(0);
  v18((char *)v21 + *(int *)(v22 + 20), v17);
  swift_bridgeObjectRelease(*(id *)((char *)v21 + *(int *)(v22 + 24) + 8));
  return swift_deallocObject(v0, v24, v12);
}

uint64_t sub_100075AA4(uint8_t *a1)
{
  uint64_t v1;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;

  v3 = *(_QWORD *)(type metadata accessor for TimelineProviderContext(0) - 8);
  v4 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v5 = (*(_QWORD *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  v6 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for EntryRequest(0) - 8) + 80);
  return sub_10007477C(a1, v1 + v4, *(void **)(v1 + v5), *(void (**)(_QWORD))(v1 + ((v5 + 15) & 0xFFFFFFFFFFFFFFF8)), *(_QWORD *)(v1 + ((v5 + 15) & 0xFFFFFFFFFFFFFFF8) + 8), *(_QWORD *)(v1 + ((((v5 + 15) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8)), v1 + ((v6 + ((((v5 + 15) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 8) & ~v6));
}

void sub_100075B40(double *a1@<X8>)
{
  *a1 = EnvironmentValues.displayScale.getter();
}

uint64_t sub_100075B68(double *a1)
{
  return EnvironmentValues.displayScale.setter(*a1);
}

uint64_t sub_100075B8C()
{
  return EnvironmentValues.sizeCategory.getter();
}

uint64_t sub_100075BB0()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100075BD4(_QWORD *a1)
{
  uint64_t v1;

  return sub_100073B94(a1, *(_QWORD *)(v1 + 16));
}

uint64_t sub_100075BDC(unint64_t *a1, uint64_t *a2)
{
  uint64_t result;
  uint64_t v4;

  result = *a1;
  if (!result)
  {
    v4 = sub_10001B560(a2);
    result = swift_getWitnessTable(&protocol conformance descriptor for [A], v4);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100075C24(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  void *v20;
  uint64_t v21;
  double v22;
  uint64_t v24;
  uint64_t v25;
  id v26;
  uint64_t v27;
  _QWORD aBlock[5];
  uint64_t v29;

  v4 = v3;
  v25 = a2;
  v27 = a1;
  v6 = type metadata accessor for Date(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(_QWORD *)(v7 + 64);
  v9 = __chkstk_darwin(v6);
  v10 = (char *)&v24 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __chkstk_darwin(v9);
  v13 = (char *)&v24 - v12;
  Date.init()(v11);
  v26 = *(id *)(v3 + 32);
  (*(void (**)(char *, char *, uint64_t))(v7 + 16))(v10, v13, v6);
  v14 = *(unsigned __int8 *)(v7 + 80);
  v15 = (v14 + 16) & ~v14;
  v16 = (v8 + v15 + 7) & 0xFFFFFFFFFFFFFFF8;
  v17 = (v16 + 15) & 0xFFFFFFFFFFFFFFF8;
  v18 = swift_allocObject(&unk_1000AD7C0, v17 + 16, v14 | 7);
  (*(void (**)(uint64_t, char *, uint64_t))(v7 + 32))(v18 + v15, v10, v6);
  *(_QWORD *)(v18 + v16) = v4;
  v19 = (_QWORD *)(v18 + v17);
  *v19 = v25;
  v19[1] = a3;
  aBlock[4] = sub_1000760B8;
  v29 = v18;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100075F18;
  aBlock[3] = &unk_1000AD7D8;
  v20 = _Block_copy(aBlock);
  v21 = v29;
  swift_retain(v4);
  swift_retain(a3);
  *(_QWORD *)&v22 = swift_release(v21).n128_u64[0];
  objc_msgSend(v26, "fetchLatestResultsWithOperationInfo:completion:", v27, v20, v22);
  _Block_release(v20);
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v13, v6);
}

void sub_100075DD4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void (*a7)(uint64_t, uint64_t, void *, uint64_t))
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  double v18;
  uint64_t v19;
  void *v20;
  void (*v21)(uint64_t, void *, uint64_t, double);
  uint64_t v22;
  uint64_t v23;
  void (*v24)(uint64_t, uint64_t, void *, uint64_t);

  v24 = a7;
  v13 = type metadata accessor for Date(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = __chkstk_darwin(v13);
  v17 = (char *)&v23 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  Date.init()(v15);
  v18 = Date.timeIntervalSince(_:)(a5);
  (*(void (**)(char *, uint64_t))(v14 + 8))(v17, v13);
  v19 = objc_opt_self(NTPBTodayResultOperationFetchInfo);
  v20 = (void *)swift_dynamicCastObjCClass(a3, v19);
  if (v20)
    swift_unknownObjectRetain(a3);
  v21 = *(void (**)(uint64_t, void *, uint64_t, double))(a6 + 16);
  if (v21)
  {
    v22 = *(_QWORD *)(a6 + 24);
    swift_retain(v22);
    v21(a1, v20, a4, v18);
    sub_100071E98((uint64_t)v21, v22);
  }
  v24(a1, a2, v20, a4);

}

uint64_t sub_100075F18(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, void *a5)
{
  uint64_t v7;
  uint64_t v9;
  void (*v10)(void *, uint64_t, uint64_t, void *);
  uint64_t v11;
  unint64_t v12;
  id v13;
  id v14;

  v7 = a3;
  v10 = *(void (**)(void *, uint64_t, uint64_t, void *))(a1 + 32);
  v9 = *(_QWORD *)(a1 + 40);
  if (a3)
  {
    v11 = type metadata accessor for URL(0);
    v12 = sub_10006CA5C();
    v7 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v7, v11, v11, v12);
  }
  swift_retain(v9);
  v13 = a2;
  swift_unknownObjectRetain(a4);
  v14 = a5;
  v10(a2, v7, a4, a5);
  swift_release(v9);

  swift_unknownObjectRelease(a4);
  return swift_bridgeObjectRelease(v7);
}

uint64_t sub_100075FDC()
{
  uint64_t v0;

  sub_100071E98(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));

  return swift_deallocClassInstance(v0, 40, 7);
}

uint64_t type metadata accessor for NTTodayContextResultsService()
{
  return objc_opt_self(_TtC7NewsTag28NTTodayContextResultsService);
}

uint64_t sub_100076028()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;

  v1 = type metadata accessor for Date(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = v3 | 7;
  v6 = (*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  v7 = (v6 + 15) & 0xFFFFFFFFFFFFFFF8;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_release(*(_QWORD *)(v0 + v6));
  swift_release(*(_QWORD *)(v0 + v7 + 8));
  return swift_deallocObject(v0, v7 + 16, v5);
}

void sub_1000760B8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;

  v9 = *(_QWORD *)(type metadata accessor for Date(0) - 8);
  v10 = (*(unsigned __int8 *)(v9 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
  v11 = (*(_QWORD *)(v9 + 64) + v10 + 7) & 0xFFFFFFFFFFFFFFF8;
  sub_100075DD4(a1, a2, a3, a4, v4 + v10, *(_QWORD *)(v4 + v11), *(void (**)(uint64_t, uint64_t, void *, uint64_t))(v4 + ((v11 + 15) & 0xFFFFFFFFFFFFFFF8)));
}

uint64_t sub_100076140(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100076150(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t type metadata accessor for BiomeEventStore()
{
  return objc_opt_self(_TtC7NewsTag15BiomeEventStore);
}

void sub_100076178(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  void *v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  void *v30;
  _QWORD *v31;
  double v32;
  id v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  id v39;
  void **aBlock;
  uint64_t v41;
  void (*v42)(uint64_t, void *);
  void *v43;
  void *v44;
  _QWORD *v45;

  v37 = a7;
  v38 = a8;
  v39 = a5;
  v35 = a3;
  v12 = type metadata accessor for TaskContext(0);
  v36 = *(_QWORD *)(v12 - 8);
  v13 = *(_QWORD *)(v36 + 64);
  __chkstk_darwin(v12);
  v14 = (char *)&v34 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = sub_10001B520(&qword_1000B9ED8);
  v16 = *(_QWORD *)(v15 - 8);
  v17 = *(_QWORD *)(v16 + 64);
  __chkstk_darwin(v15);
  v18 = (char *)&v34 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = swift_allocObject(&unk_1000AD850, 32, 7);
  *(_QWORD *)(v19 + 16) = a1;
  *(_QWORD *)(v19 + 24) = a2;
  v20 = (_QWORD *)swift_allocObject(&unk_1000AD878, 56, 7);
  v20[2] = a6;
  v20[3] = sub_100068308;
  v21 = v35;
  v20[4] = v19;
  v20[5] = v21;
  v20[6] = a4;
  v44 = sub_100077724;
  v45 = v20;
  aBlock = _NSConcreteStackBlock;
  v41 = 1107296256;
  v42 = sub_1000766C4;
  v43 = &unk_1000AD890;
  v22 = _Block_copy(&aBlock);
  v23 = v45;
  swift_retain(a2);
  swift_retain(a6);
  swift_retain(a4);
  swift_release(v23);
  sub_100077654(v37, (uint64_t)v18);
  sub_10007774C(v38, (uint64_t)v14);
  v24 = *(unsigned __int8 *)(v16 + 80);
  v25 = (v24 + 16) & ~v24;
  v26 = *(unsigned __int8 *)(v36 + 80);
  v27 = (v17 + v26 + v25) & ~v26;
  v28 = (v13 + v27 + 7) & 0xFFFFFFFFFFFFFFF8;
  v29 = swift_allocObject(&unk_1000AD8C8, v28 + 8, v24 | v26 | 7);
  sub_10002CB18((uint64_t)v18, v29 + v25, &qword_1000B9ED8);
  sub_10006B76C((uint64_t)v14, v29 + v27);
  *(_QWORD *)(v29 + v28) = a6;
  v44 = sub_1000778E8;
  v45 = (_QWORD *)v29;
  aBlock = _NSConcreteStackBlock;
  v41 = 1107296256;
  v42 = sub_1000766C4;
  v43 = &unk_1000AD8E0;
  v30 = _Block_copy(&aBlock);
  v31 = v45;
  swift_retain(a6);
  *(_QWORD *)&v32 = swift_release(v31).n128_u64[0];
  v33 = objc_msgSend(v39, "sinkWithCompletion:receiveInput:", v22, v30, v32);
  _Block_release(v30);
  _Block_release(v22);

}

uint64_t sub_100076408(void *a1, uint64_t a2, void (*a3)(uint64_t), uint64_t a4, void (*a5)(id))
{
  id v9;
  id v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  void *v19;
  uint64_t result;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD v29[3];
  uint64_t v30;
  unint64_t v31;

  v9 = objc_msgSend(a1, "state");
  if (v9 == (id)1)
  {
    v10 = objc_msgSend(a1, "error");
    if (!v10)
    {
      v11 = sub_1000779A4();
      v10 = (id)swift_allocError(&type metadata for BiomeEventStore.Errors, v11, 0, 0);
    }
    v12 = static os_log_type_t.error.getter();
    v13 = sub_10001B520(&qword_1000B9980);
    v14 = swift_allocObject(v13, 72, 7);
    *(_OWORD *)(v14 + 16) = xmmword_10008AC60;
    v30 = 0;
    v31 = 0xE000000000000000;
    v29[0] = v10;
    v15 = sub_10001B520(&qword_1000B99D8);
    _print_unlocked<A, B>(_:_:)(v29, &v30, v15, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
    v16 = v30;
    v17 = v31;
    *(_QWORD *)(v14 + 56) = &type metadata for String;
    *(_QWORD *)(v14 + 64) = sub_10001FB34();
    *(_QWORD *)(v14 + 32) = v16;
    *(_QWORD *)(v14 + 40) = v17;
    v18 = sub_10002D800();
    v19 = (void *)static OS_os_log.default.getter(v18);
    os_log(_:dso:log:type:_:)("event store encountered error %@", 32, 2, &_mh_execute_header, v19, v12, v14);
    swift_bridgeObjectRelease(v14);

    a5(v10);
    return swift_errorRelease(v10);
  }
  else if (v9)
  {
    result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0x656C646E61686E75, 0xEE00657361632064, "NewsTag/EventStore.swift", 24, 2, 87, 0);
    __break(1u);
  }
  else
  {
    v21 = sub_10001B520(&qword_1000B9980);
    v22 = swift_allocObject(v21, 72, 7);
    *(_OWORD *)(v22 + 16) = xmmword_10008AC60;
    swift_beginAccess(a2 + 16, &v30, 0, 0);
    v23 = *(_QWORD *)(*(_QWORD *)(a2 + 16) + 16);
    *(_QWORD *)(v22 + 56) = &type metadata for Int;
    *(_QWORD *)(v22 + 64) = &protocol witness table for Int;
    *(_QWORD *)(v22 + 32) = v23;
    v24 = sub_10002D800();
    v25 = (void *)static OS_os_log.default.getter(v24);
    static os_log_type_t.default.getter();
    os_log(_:dso:log:type:_:)("event store found %zd events", v28);
    swift_bridgeObjectRelease(v22);

    swift_beginAccess(a2 + 16, v29, 0, 0);
    v26 = *(_QWORD *)(a2 + 16);
    v27 = swift_bridgeObjectRetain(v26);
    a3(v27);
    return swift_bridgeObjectRelease(v26);
  }
  return result;
}

void sub_1000766C8(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;
  id v23;
  void *v24;
  id v25;
  id v26;
  uint64_t v27;
  char v28;
  char v29;
  void (*v30)(char *, uint64_t);
  id v31;
  id v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void (*v41)(char *, uint64_t);
  id v42;
  void *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  void (*v47)(char *, uint64_t);
  id v48;
  id v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char v53;
  id v54;
  _QWORD *v55;
  _QWORD *v56;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v58;
  unint64_t v59;
  uint64_t v60;
  id v61;
  uint64_t v62;
  char *v63;
  uint64_t v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  _BYTE v68[24];
  __int128 v69;
  uint64_t v70;
  _QWORD v71[6];

  v62 = a4;
  v64 = a3;
  v6 = sub_10001B520(&qword_1000BAEB0);
  __chkstk_darwin(v6);
  v8 = (char *)&v60 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for InternalWidgetFamily(0);
  v66 = *(_QWORD *)(v9 - 8);
  v67 = v9;
  v10 = __chkstk_darwin(v9);
  v63 = (char *)&v60 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v65 = (char *)&v60 - v12;
  v13 = sub_10001B520(&qword_1000B9ED8);
  __chkstk_darwin(v13);
  v15 = (char *)&v60 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for Date(0);
  v17 = *(_QWORD *)(v16 - 8);
  v18 = __chkstk_darwin(v16);
  v20 = (char *)&v60 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18);
  v22 = (char *)&v60 - v21;
  v23 = objc_msgSend(a1, "eventBody");
  if (!v23)
    return;
  v24 = v23;
  v25 = objc_msgSend(v23, "homeScreenEvent");

  if (!v25)
    return;
  v61 = v25;
  v26 = objc_msgSend(v25, "date");
  static Date._unconditionallyBridgeFromObjectiveC(_:)(v26);

  v27 = sub_10001C96C(&qword_1000B9EE0, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
  v28 = dispatch thunk of static Comparable.>= infix(_:_:)(v22, a2, v16, v27);
  (*(void (**)(char *, char *, uint64_t))(v17 + 16))(v20, v22, v16);
  sub_100077654(a2, (uint64_t)v15);
  if ((v28 & 1) == 0)
  {
    sub_10002CCF4((uint64_t)v15, &qword_1000B9ED8);
    v47 = *(void (**)(char *, uint64_t))(v17 + 8);
    v47(v20, v16);
    v47(v22, v16);
    goto LABEL_10;
  }
  v29 = dispatch thunk of static Comparable.<= infix(_:_:)(v20, &v15[*(int *)(v13 + 36)], v16, v27);
  sub_10002CCF4((uint64_t)v15, &qword_1000B9ED8);
  v30 = *(void (**)(char *, uint64_t))(v17 + 8);
  v30(v20, v16);
  v30(v22, v16);
  if ((v29 & 1) == 0)
  {
LABEL_10:

    return;
  }
  v31 = v61;
  v32 = objc_msgSend(v61, "widgetSize");
  if ((unint64_t)v32 >= 4)
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v66 + 56))(v8, 1, 1, v67);

    sub_10002CCF4((uint64_t)v8, &qword_1000BAEB0);
    return;
  }
  v33 = v66;
  v34 = v67;
  (*(void (**)(char *, _QWORD, uint64_t))(v66 + 104))(v8, *(unsigned int *)*(&off_1000AD998 + (_QWORD)v32), v67);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v33 + 56))(v8, 0, 1, v34);
  v35 = v65;
  v36 = (*(uint64_t (**)(char *, char *, uint64_t))(v33 + 32))(v65, v8, v34);
  v37 = v63;
  TimelineProviderContext.internalFamily.getter(v36);
  v38 = sub_10001C96C((unint64_t *)&qword_1000BC3A0, (uint64_t (*)(uint64_t))&type metadata accessor for InternalWidgetFamily, (uint64_t)&protocol conformance descriptor for InternalWidgetFamily);
  dispatch thunk of RawRepresentable.rawValue.getter(v71, v34, v38);
  dispatch thunk of RawRepresentable.rawValue.getter(&v69, v34, v38);
  v39 = v71[0];
  v40 = v69;
  v41 = *(void (**)(char *, uint64_t))(v33 + 8);
  v41(v37, v34);
  if (v39 != v40)
    goto LABEL_24;
  v42 = objc_msgSend(v61, "widgetBundleId");
  if (v42)
  {
    v43 = v42;
    v44 = static String._unconditionallyBridgeFromObjectiveC(_:)(v42);
    v46 = v45;

  }
  else
  {
    v44 = 0;
    v46 = 0;
  }
  v48 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
  v49 = objc_msgSend(v48, "bundleIdentifier");

  if (!v49)
  {
    if (!v46)
      goto LABEL_26;
    goto LABEL_21;
  }
  v50 = static String._unconditionallyBridgeFromObjectiveC(_:)(v49);
  v52 = v51;

  if (!v46)
  {
    if (!v52)
      goto LABEL_26;
    goto LABEL_23;
  }
  if (!v52)
  {
LABEL_21:
    v52 = v46;
LABEL_23:
    swift_bridgeObjectRelease(v52);
LABEL_24:
    v41(v35, v34);
    goto LABEL_10;
  }
  if (v44 == v50 && v46 == v52)
  {
    swift_bridgeObjectRelease(v46);
    swift_bridgeObjectRelease(v52);
    goto LABEL_26;
  }
  v53 = _stringCompareWithSmolCheck(_:_:expecting:)(v44, v46, v50, v52, 0);
  swift_bridgeObjectRelease(v46);
  swift_bridgeObjectRelease(v52);
  if ((v53 & 1) == 0)
    goto LABEL_24;
LABEL_26:
  v54 = v61;
  sub_100076CC8((uint64_t)&v69);
  if (v70)
  {
    v55 = (_QWORD *)(v62 + 16);
    sub_100056ED8(&v69, (uint64_t)v71);
    sub_100030244((uint64_t)v71, (uint64_t)&v69);
    swift_beginAccess(v55, v68, 33, 0);
    v56 = (_QWORD *)*v55;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v55);
    *v55 = v56;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      v56 = sub_10005DE78(0, v56[2] + 1, 1, v56);
      *v55 = v56;
    }
    v59 = v56[2];
    v58 = v56[3];
    if (v59 >= v58 >> 1)
    {
      v56 = sub_10005DE78((_QWORD *)(v58 > 1), v59 + 1, 1, v56);
      *v55 = v56;
    }
    v56[2] = v59 + 1;
    sub_100056ED8(&v69, (uint64_t)&v56[5 * v59 + 4]);
    swift_endAccess(v68);

    sub_10001DA60(v71);
    v41(v35, v34);
  }
  else
  {
    v41(v35, v34);

    sub_10002CCF4((uint64_t)&v69, &qword_1000BB678);
  }
}

void sub_100076CC8(uint64_t a1@<X8>)
{
  void *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  NSString v13;
  uint64_t v14;
  uint64_t v15;
  id v16;
  id v17;
  void *v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  id v23;
  uint64_t v24;
  _QWORD *v25;
  id v26;
  id v27;
  char v28;
  id v29;
  char v30;
  uint64_t v31;
  _QWORD *v32;
  id v33;
  void *v34;
  id v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  id v44;
  uint64_t v45;
  _QWORD *v46;
  _QWORD *v47;
  uint64_t v48;
  unint64_t v49;
  void *v50;
  uint64_t v51;
  id v52;

  v3 = sub_10001B520(&qword_1000B93A0);
  v4 = __chkstk_darwin(v3);
  v6 = (char *)&v51 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v8 = (char *)&v51 - v7;
  v9 = type metadata accessor for Date(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v51 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = objc_msgSend(v1, "eventTypeString");
  if (!v13)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)(0);
    v15 = v14;
    v13 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v15);
  }
  v16 = v13;
  if ((objc_msgSend(v16, "isEqualToString:", CFSTR("Unknown")) & 1) != 0
    || (objc_msgSend(v16, "isEqualToString:", CFSTR("HomeScreenPageShown")) & 1) != 0
    || (objc_msgSend(v16, "isEqualToString:", CFSTR("HomeScreenDisappeared")) & 1) != 0
    || (objc_msgSend(v16, "isEqualToString:", CFSTR("StackChanged")) & 1) != 0)
  {
    goto LABEL_20;
  }
  if ((objc_msgSend(v16, "isEqualToString:", CFSTR("WidgetTapped")) & 1) == 0)
  {
    if ((objc_msgSend(v16, "isEqualToString:", CFSTR("WidgetLongLook")) & 1) == 0
      && (objc_msgSend(v16, "isEqualToString:", CFSTR("WidgetUserFeedback")) & 1) == 0
      && (objc_msgSend(v16, "isEqualToString:", CFSTR("UserStackConfigChanged")) & 1) == 0
      && (objc_msgSend(v16, "isEqualToString:", CFSTR("DeviceLocked")) & 1) == 0
      && (objc_msgSend(v16, "isEqualToString:", CFSTR("DeviceUnlocked")) & 1) == 0
      && (objc_msgSend(v16, "isEqualToString:", CFSTR("PinnedWidgetAdded")) & 1) == 0
      && (objc_msgSend(v16, "isEqualToString:", CFSTR("PinnedWidgetDeleted")) & 1) == 0
      && (objc_msgSend(v16, "isEqualToString:", CFSTR("SpecialPageAppeared")) & 1) == 0
      && (objc_msgSend(v16, "isEqualToString:", CFSTR("SpecialPageDisappeared")) & 1) == 0)
    {
      if ((objc_msgSend(v16, "isEqualToString:", CFSTR("StackShown")) & 1) != 0)
      {

        v26 = objc_msgSend(v1, "date");
        static Date._unconditionallyBridgeFromObjectiveC(_:)(v26);

        v27 = objc_msgSend(v1, "stackKind");
        if ((unint64_t)v27 >= 4)
          v28 = 0;
        else
          v28 = (char)v27;
        v29 = objc_msgSend(v1, "stackLocation");
        if ((unint64_t)v29 >= 6)
          v30 = 0;
        else
          v30 = (char)v29;
        v31 = type metadata accessor for AppearanceEvent(0);
        *(_QWORD *)(a1 + 24) = v31;
        *(_QWORD *)(a1 + 32) = &off_1000ABBC8;
        v32 = sub_100077968((_QWORD *)a1);
        (*(void (**)(_QWORD *, char *, uint64_t))(v10 + 32))(v32, v12, v9);
        *((_BYTE *)v32 + *(int *)(v31 + 20)) = v28;
        *((_BYTE *)v32 + *(int *)(v31 + 24)) = v30;
        return;
      }
      if ((objc_msgSend(v16, "isEqualToString:", CFSTR("StackDisappeared")) & 1) != 0)
      {

        v52 = objc_msgSend(v1, "date");
        *(_QWORD *)(a1 + 24) = type metadata accessor for DisappearanceEvent(0);
        *(_QWORD *)(a1 + 32) = &off_1000ABBD8;
        sub_100077968((_QWORD *)a1);
        static Date._unconditionallyBridgeFromObjectiveC(_:)(v52);

        return;
      }
      if ((objc_msgSend(v16, "isEqualToString:", CFSTR("StackCreated")) & 1) == 0
        && (objc_msgSend(v16, "isEqualToString:", CFSTR("StackDeleted")) & 1) == 0
        && (objc_msgSend(v16, "isEqualToString:", CFSTR("WidgetAddedToStack")) & 1) == 0
        && (objc_msgSend(v16, "isEqualToString:", CFSTR("WidgetRemovedFromStack")) & 1) == 0)
      {
        if ((objc_msgSend(v16, "isEqualToString:", CFSTR("StackVisibilityChanged")) & 1) != 0)
        {

          v33 = objc_msgSend(v1, "metadata");
          if (v33)
          {
            v34 = v33;
            v35 = objc_msgSend(v33, "visibleRect");

            if (v35)
            {
              objc_msgSend(v35, "rect");
              v37 = v36;
              v39 = v38;
              v41 = v40;
              v43 = v42;

              v44 = objc_msgSend(v1, "date");
              v45 = type metadata accessor for VisibleRectChangedEvent(0);
              *(_QWORD *)(a1 + 24) = v45;
              *(_QWORD *)(a1 + 32) = &off_1000ABBF8;
              v46 = sub_100077968((_QWORD *)a1);
              static Date._unconditionallyBridgeFromObjectiveC(_:)(v44);

              v47 = (_QWORD *)((char *)v46 + *(int *)(v45 + 20));
              *v47 = v37;
              v47[1] = v39;
              v47[2] = v41;
              v47[3] = v43;
              return;
            }
          }
          v48 = static os_log_type_t.error.getter();
          v49 = sub_10002D800();
          v50 = (void *)static OS_os_log.default.getter(v49);
          os_log(_:dso:log:type:_:)("event store found visibility changed event without rect", 55, 2, &_mh_execute_header, v50, v48, _swiftEmptyArrayStorage);

LABEL_21:
          *(_QWORD *)(a1 + 32) = 0;
          *(_OWORD *)a1 = 0u;
          *(_OWORD *)(a1 + 16) = 0u;
          return;
        }
        if ((objc_msgSend(v16, "isEqualToString:", CFSTR("AppAdded")) & 1) == 0)
          objc_msgSend(v16, "isEqualToString:", CFSTR("AppRemoved"));
      }
    }
LABEL_20:

    goto LABEL_21;
  }

  v17 = objc_msgSend(v1, "metadata");
  if (v17)
  {
    v18 = v17;
    v19 = objc_msgSend(v17, "engagedUrl");

    if (v19)
    {
      static URL._unconditionallyBridgeFromObjectiveC(_:)(v19);

      v20 = type metadata accessor for URL(0);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 56))(v6, 0, 1, v20);
    }
    else
    {
      v22 = type metadata accessor for URL(0);
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 56))(v6, 1, 1, v22);
    }
    sub_10002CB18((uint64_t)v6, (uint64_t)v8, &qword_1000B93A0);
  }
  else
  {
    v21 = type metadata accessor for URL(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 56))(v8, 1, 1, v21);
  }
  v23 = objc_msgSend(v1, "date");
  v24 = type metadata accessor for EngagementEvent(0);
  *(_QWORD *)(a1 + 24) = v24;
  *(_QWORD *)(a1 + 32) = &off_1000ABBE8;
  v25 = sub_100077968((_QWORD *)a1);
  static Date._unconditionallyBridgeFromObjectiveC(_:)(v23);

  sub_10002CB18((uint64_t)v8, (uint64_t)v25 + *(int *)(v24 + 20), &qword_1000B93A0);
}

uint64_t sub_100077344(uint64_t a1, uint8_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  unint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint8_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  Swift::String v14;
  unint64_t v15;
  uint64_t v16;
  id v17;
  const __CFDate *isa;
  uint64_t v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  uint8_t *v24;
  uint64_t v25;
  uint8_t *v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;

  v4 = sub_10001B520(&qword_1000B9ED8);
  __chkstk_darwin(v4);
  v6 = (char *)&v24 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100077654(a1, (uint64_t)v6);
  v7 = sub_10002D800();
  v8 = static OS_os_log.default.getter(v7);
  v9 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v8, v9))
  {
    v10 = (uint8_t *)swift_slowAlloc(12, -1);
    v11 = swift_slowAlloc(32, -1);
    v26 = a2;
    v27 = 0;
    v12 = v11;
    v25 = a1;
    *(_DWORD *)v10 = 136315138;
    v24 = v10 + 4;
    v28 = 0xE000000000000000;
    v29 = v11;
    v13 = type metadata accessor for Date(0);
    _print_unlocked<A, B>(_:_:)(v6, &v27, v13, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
    v14._countAndFlagsBits = 3026478;
    v14._object = (void *)0xE300000000000000;
    String.append(_:)(v14);
    _print_unlocked<A, B>(_:_:)(&v6[*(int *)(v4 + 36)], &v27, v13, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
    v15 = v28;
    v27 = sub_10006AE74(v27, v28, &v29);
    a1 = v25;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v27, &v28, v24, v10 + 12);
    swift_bridgeObjectRelease(v15);
    sub_10002CCF4((uint64_t)v6, &qword_1000B9ED8);
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "event store querying for events in range %s", v10, 0xCu);
    swift_arrayDestroy(v12, 1, (char *)&type metadata for Any + 8);
    v16 = v12;
    a2 = v26;
    swift_slowDealloc(v16, -1, -1);
    swift_slowDealloc(v10, -1, -1);

  }
  else
  {

    sub_10002CCF4((uint64_t)v6, &qword_1000B9ED8);
  }
  v17 = objc_msgSend(objc_allocWithZone((Class)ATXBiomeUIStream), "init");
  isa = Date._bridgeToObjectiveC()().super.isa;
  v19 = swift_allocObject(&unk_1000AD828, 24, 7);
  *(_QWORD *)(v19 + 16) = _swiftEmptyArrayStorage;
  v20 = objc_msgSend(v17, "publisherFromStartTime:", CFDateGetAbsoluteTime(isa));
  *(&v24 - 4) = (uint8_t *)__chkstk_darwin(v20);
  *(&v24 - 3) = (uint8_t *)v19;
  *(&v24 - 2) = (uint8_t *)a1;
  *(&v24 - 1) = a2;
  v21 = sub_10001B520(&qword_1000BC6E0);
  swift_allocObject(v21, *(unsigned int *)(v21 + 48), *(unsigned __int16 *)(v21 + 52));
  v22 = Promise.init(resolver:)(sub_1000776C0, &v24 - 6);

  swift_release(v19);
  return v22;
}

uint64_t sub_100077654(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10001B520(&qword_1000B9ED8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10007769C()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 24, 7);
}

void sub_1000776C0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  sub_100076178(a1, a2, a3, a4, *(void **)(v4 + 16), *(_QWORD *)(v4 + 24), *(_QWORD *)(v4 + 32), *(_QWORD *)(v4 + 40));
}

uint64_t sub_1000776CC()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1000776F0()
{
  _QWORD *v0;

  swift_release(v0[2]);
  swift_release(v0[4]);
  swift_release(v0[6]);
  return swift_deallocObject(v0, 56, 7);
}

uint64_t sub_100077724(void *a1)
{
  uint64_t v1;

  return sub_100076408(a1, *(_QWORD *)(v1 + 16), *(void (**)(uint64_t))(v1 + 24), *(_QWORD *)(v1 + 32), *(void (**)(id))(v1 + 40));
}

uint64_t sub_100077734(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100077744(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10007774C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for TaskContext(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_100077790()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;

  v1 = sub_10001B520(&qword_1000B9ED8);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  v6 = type metadata accessor for TaskContext(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(unsigned __int8 *)(v7 + 80);
  v9 = (v4 + v5 + v8) & ~v8;
  v10 = *(_QWORD *)(v7 + 64);
  v11 = v0 + v4;
  v12 = type metadata accessor for Date(0);
  v13 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 8);
  v13(v11, v12);
  v13(v11 + *(int *)(v1 + 36), v12);
  v14 = type metadata accessor for TimelineProviderContext(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 8))(v0 + v9, v14);
  v15 = v0 + v9 + *(int *)(v6 + 20);
  v16 = type metadata accessor for TrackableNewsTimelineEntry(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 48))(v15, 1, v16))
  {
    v13(v15, v12);
    swift_release(*(_QWORD *)(v15 + *(int *)(v16 + 20)));
    swift_bridgeObjectRelease(*(_QWORD *)(v15 + *(int *)(v16 + 24) + 8));
  }
  v17 = (v10 + v9 + 7) & 0xFFFFFFFFFFFFFFF8;
  v18 = v17 + 8;
  swift_release(*(_QWORD *)(v0 + v17));
  return swift_deallocObject(v0, v18, v3 | v8 | 7);
}

void sub_1000778E8(void *a1)
{
  uint64_t v1;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;

  v3 = *(_QWORD *)(sub_10001B520(&qword_1000B9ED8) - 8);
  v4 = (*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v5 = *(_QWORD *)(v3 + 64);
  v6 = *(_QWORD *)(type metadata accessor for TaskContext(0) - 8);
  v7 = (v4 + v5 + *(unsigned __int8 *)(v6 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  sub_1000766C8(a1, v1 + v4, v1 + v7, *(_QWORD *)(v1 + ((*(_QWORD *)(v6 + 64) + v7 + 7) & 0xFFFFFFFFFFFFF8)));
}

_QWORD *sub_100077968(_QWORD *a1)
{
  _QWORD *v1;
  uint64_t v2;

  v1 = a1;
  if ((*(_BYTE *)(*(_QWORD *)(a1[3] - 8) + 82) & 2) != 0)
  {
    *a1 = swift_allocBox();
    return (_QWORD *)v2;
  }
  return v1;
}

unint64_t sub_1000779A4()
{
  unint64_t result;

  result = qword_1000BC6E8;
  if (!qword_1000BC6E8)
  {
    result = swift_getWitnessTable(&unk_10008D3BC, &type metadata for BiomeEventStore.Errors);
    atomic_store(result, (unint64_t *)&qword_1000BC6E8);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for BiomeEventStore.Errors(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_100077A28 + 4 * byte_10008D310[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_100077A48 + 4 * byte_10008D315[v4]))();
}

_BYTE *sub_100077A28(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_100077A48(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_100077A50(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_100077A58(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_100077A60(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_100077A68(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for BiomeEventStore.Errors()
{
  return &type metadata for BiomeEventStore.Errors;
}

unint64_t sub_100077A88()
{
  unint64_t result;

  result = qword_1000BC6F0;
  if (!qword_1000BC6F0)
  {
    result = swift_getWitnessTable(&unk_10008D394, &type metadata for BiomeEventStore.Errors);
    atomic_store(result, (unint64_t *)&qword_1000BC6F0);
  }
  return result;
}

Swift::Void __swiftcall TelemetryManager.flush()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  void *v13;
  void *v14;
  void *v15;
  void (*v16)(char *, void *, uint64_t);
  Class isa;
  void (*v18)(char *, uint64_t);
  Class v19;
  id v20;
  void *v21;
  char **p_name;
  id v23;
  void *v24;
  id v25;
  void *v26;
  id v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  NSData v31;
  uint64_t v32;
  id v33;
  uint64_t v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  id v38;
  id v39;
  void *v40;
  uint64_t v41;
  uint64_t v42;
  id v43;
  _QWORD v44[3];
  id v45;
  _QWORD v46[3];
  _BYTE v47[24];

  v1 = v0;
  v2 = type metadata accessor for Date(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = __chkstk_darwin(v2);
  v6 = (char *)v44 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v8 = (char *)v44 - v7;
  sub_10001D9B4((_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 40));
  v9 = sub_100049588();
  v45 = FCAnalyticsLog;
  v10 = static os_log_type_t.default.getter();
  if ((v9 & 1) != 0)
  {
    os_log(_:dso:log:type:_:)("Will flush telemetry events", 27, 2, &_mh_execute_header, v45, v10, _swiftEmptyArrayStorage);

    Date.init()(v11);
    v12 = objc_msgSend(objc_allocWithZone((Class)NTPBTelemetry), "init");
    if (!v12)
    {
      __break(1u);
      goto LABEL_16;
    }
    v13 = v12;
    v14 = *(void **)(v1 + 56);
    v15 = (void *)(v1 + OBJC_IVAR____TtC7NewsTag16TelemetryManager_lastFlushDate);
    swift_beginAccess(v1 + OBJC_IVAR____TtC7NewsTag16TelemetryManager_lastFlushDate, v47, 0, 0);
    v16 = *(void (**)(char *, void *, uint64_t))(v3 + 16);
    v45 = v15;
    v16(v6, v15, v2);
    isa = Date._bridgeToObjectiveC()().super.isa;
    v18 = *(void (**)(char *, uint64_t))(v3 + 8);
    v18(v6, v2);
    v19 = Date._bridgeToObjectiveC()().super.isa;
    objc_msgSend(v14, "populateTelemetry:withNetworkEventsFromDate:toDate:", v13, isa, v19);

    v20 = objc_msgSend(v13, "networkEventGroups");
    if (v20)
    {
      v21 = v20;
      p_name = &TagResolutionResult__metaData.name;
      if (objc_msgSend(v20, "count"))
      {
        objc_msgSend(*(id *)(v1 + 64), "annotateTelemetry:withOptions:", v13, 4095);
        v23 = objc_msgSend((id)objc_opt_self(NTPBEnvelope), "nss_envelopeWithIdentifier");
        if (v23)
        {
          v24 = v23;
          objc_msgSend(v23, "setContentType:", 2);
          v25 = objc_msgSend(v13, "data");
          if (v25)
          {
            v26 = v25;
            v44[2] = v18;
            v27 = objc_msgSend(v25, "fc_zlibDeflate");

            if (v27)
            {
              v28 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v27);
              v30 = v29;

              v31.super.isa = Data._bridgeToObjectiveC()().super.isa;
              v32 = v28;
              p_name = (char **)(&TagResolutionResult__metaData + 24);
              sub_10001D9D8(v32, v30);
            }
            else
            {
              v31.super.isa = 0;
            }
            objc_msgSend(v24, "setContent:", v31.super.isa);

            v35 = (void *)FCAnalyticsLog;
            v36 = sub_10001B520(&qword_1000B9980);
            v37 = swift_allocObject(v36, 112, 7);
            *(_OWORD *)(v37 + 16) = xmmword_10008AC80;
            v44[1] = v35;
            v38 = objc_msgSend(v21, p_name[111]);
            *(_QWORD *)(v37 + 56) = &type metadata for Int;
            *(_QWORD *)(v37 + 64) = &protocol witness table for Int;
            *(_QWORD *)(v37 + 32) = v38;
            v39 = objc_msgSend(v24, "content");
            if (v39)
            {
              v40 = v39;
              static Data._unconditionallyBridgeFromObjectiveC(_:)(v39);
              v42 = v41;

              __asm { BR              X10 }
            }
LABEL_18:
            __break(1u);
            JUMPOUT(0x100078150);
          }
LABEL_17:
          __break(1u);
          goto LABEL_18;
        }
LABEL_16:
        __break(1u);
        goto LABEL_17;
      }

    }
    v33 = FCAnalyticsLog;
    v34 = static os_log_type_t.default.getter();
    os_log(_:dso:log:type:_:)("Found no telemetry event groups to submit", 41, 2, &_mh_execute_header, v33, v34, _swiftEmptyArrayStorage);

    v43 = v45;
    swift_beginAccess(v45, v46, 33, 0);
    (*(void (**)(id, char *, uint64_t))(v3 + 24))(v43, v8, v2);
    swift_endAccess(v46);
    v18(v8, v2);
  }
  else
  {
    os_log(_:dso:log:type:_:)("Will not flush telemetry events because telemetry is disabled", 61, 2, &_mh_execute_header, v45, v10, _swiftEmptyArrayStorage);

  }
}

uint64_t TelemetryManager.deinit()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  sub_10001DA60((_QWORD *)(v0 + 16));

  v1 = v0 + OBJC_IVAR____TtC7NewsTag16TelemetryManager_lastFlushDate;
  v2 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  return v0;
}

uint64_t TelemetryManager.__deallocating_deinit()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  sub_10001DA60((_QWORD *)(v0 + 16));

  v1 = v0 + OBJC_IVAR____TtC7NewsTag16TelemetryManager_lastFlushDate;
  v2 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

unint64_t sub_100078224()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000BC700;
  if (!qword_1000BC700)
  {
    v1 = objc_opt_self(NTPBEnvelope);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_1000BC700);
  }
  return result;
}

uint64_t sub_100078260()
{
  return type metadata accessor for TelemetryManager(0);
}

uint64_t type metadata accessor for TelemetryManager(uint64_t a1)
{
  uint64_t result;

  result = qword_1000BC730;
  if (!qword_1000BC730)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for TelemetryManager);
  return result;
}

uint64_t sub_1000782A4(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[4];

  v4[0] = "(";
  v4[1] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v4[2] = (char *)&value witness table for Builtin.UnknownObject + 64;
  result = type metadata accessor for Date(319);
  if (v3 <= 0x3F)
  {
    v4[3] = *(_QWORD *)(result - 8) + 64;
    result = swift_updateClassMetadata2(a1, 256, 4, v4, a1 + 80);
    if (!result)
      return 0;
  }
  return result;
}

uint64_t NTPBTodaySectionConfigWebEmbed.conforms(to:)(__objc2_prot *a1)
{
  uint64_t result;
  objc_super v3;

  v3.super_class = (Class)NTPBTodaySectionConfigWebEmbed;
  LODWORD(result) = -[__objc2_prot conformsToProtocol:](&v3, "conformsToProtocol:", a1);
  if (&OBJC_PROTOCOL___NTTodayItem == a1)
    return 1;
  else
    return result;
}

void *sub_10007840C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t (*v8)(_QWORD);
  void *v9;
  char *v10;
  id v11;
  id v12;
  uint64_t v14;

  v1 = v0;
  v2 = type metadata accessor for Item.Headline(0);
  __chkstk_darwin(v2);
  v4 = (char *)&v14 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for Item(0);
  __chkstk_darwin(v5);
  v7 = (char *)&v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10002A83C(v1, (uint64_t)v7, v8);
  if (swift_getEnumCaseMultiPayload(v7, v5) == 1)
  {
    sub_100027D34((uint64_t)v7, type metadata accessor for Item);
    return 0;
  }
  else
  {
    sub_10002AC74((uint64_t)v7, (uint64_t)v4, type metadata accessor for Item.Headline);
    v10 = &v4[*(int *)(v2 + 28)];
    v11 = *(id *)v10;
    v9 = (void *)*((_QWORD *)v10 + 1);
    sub_10007AA78(*(id *)v10, v9);
    sub_100027D34((uint64_t)v4, type metadata accessor for Item.Headline);
    if (v9)
    {
      v12 = v9;
      sub_1000798A8(v11, v9);
    }
  }
  return v9;
}

void *sub_100078540()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t (*v14)(_QWORD);
  uint64_t v15;
  void *v16;
  uint64_t v18;

  v1 = sub_10001B520(&qword_1000BA9B0);
  __chkstk_darwin(v1);
  v3 = (char *)&v18 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for ImageStoreKey(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v18 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for Item.Headline(0);
  __chkstk_darwin(v8);
  v10 = (char *)&v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for Item(0);
  __chkstk_darwin(v11);
  v13 = (char *)&v18 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10002A83C(v0, (uint64_t)v13, v14);
  if (swift_getEnumCaseMultiPayload(v13, v11) == 1)
  {
    v15 = *((_QWORD *)v13 + 3);
    sub_1000249D8(*(_QWORD *)v13, *((_QWORD *)v13 + 1), v13[16]);
    swift_bridgeObjectRelease(v15);
    return 0;
  }
  else
  {
    sub_10002AC74((uint64_t)v13, (uint64_t)v10, type metadata accessor for Item.Headline);
    sub_10007960C(v3);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48))(v3, 1, v4) == 1)
    {
      sub_10002CCF4((uint64_t)v3, &qword_1000BA9B0);
      v16 = 0;
    }
    else
    {
      sub_10002AC74((uint64_t)v3, (uint64_t)v7, type metadata accessor for ImageStoreKey);
      v16 = sub_10006BB90((uint64_t)v7);
      sub_100027D34((uint64_t)v7, type metadata accessor for ImageStoreKey);
    }
    sub_100027D34((uint64_t)v10, type metadata accessor for Item.Headline);
  }
  return v16;
}

id sub_100078734()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t (*v8)(_QWORD);
  char *v9;
  id v10;
  void *v11;
  id v12;
  uint64_t v14;

  v1 = v0;
  v2 = type metadata accessor for Item.Headline(0);
  __chkstk_darwin(v2);
  v4 = (char *)&v14 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for Item(0);
  __chkstk_darwin(v5);
  v7 = (char *)&v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10002A83C(v1, (uint64_t)v7, v8);
  if (swift_getEnumCaseMultiPayload(v7, v5) == 1)
  {
    sub_100027D34((uint64_t)v7, type metadata accessor for Item);
    return 0;
  }
  sub_10002AC74((uint64_t)v7, (uint64_t)v4, type metadata accessor for Item.Headline);
  v9 = &v4[*(int *)(v2 + 28)];
  v10 = *(id *)v9;
  v11 = (void *)*((_QWORD *)v9 + 1);
  sub_10007AA78(*(id *)v9, v11);
  sub_100027D34((uint64_t)v4, type metadata accessor for Item.Headline);
  if (!v11)
    return 0;
  v12 = v10;
  sub_1000798A8(v10, v11);
  return v10;
}

uint64_t sub_10007886C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  id *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t (*v9)(_QWORD);
  int EnumCaseMultiPayload;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v3 = type metadata accessor for Item.Headline(0);
  __chkstk_darwin(v3);
  v5 = (id *)((char *)&v21 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  v6 = type metadata accessor for Item(0);
  __chkstk_darwin(v6);
  v8 = (char *)&v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10002A83C(v1, (uint64_t)v8, v9);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v8, v6);
  if (EnumCaseMultiPayload == 1)
  {
    v11 = *((_QWORD *)v8 + 3);
    sub_1000249D8(*(_QWORD *)v8, *((_QWORD *)v8 + 1), v8[16]);
    result = swift_bridgeObjectRelease(v11);
    v13 = 0;
    v14 = 0;
    v15 = 0;
    v16 = 0;
  }
  else
  {
    sub_10002AC74((uint64_t)v8, (uint64_t)v5, type metadata accessor for Item.Headline);
    objc_msgSend(*v5, "thumbnailFocalFrame");
    v13 = v17;
    v14 = v18;
    v15 = v19;
    v16 = v20;
    result = sub_100027D34((uint64_t)v5, type metadata accessor for Item.Headline);
  }
  *(_QWORD *)a1 = v13;
  *(_QWORD *)(a1 + 8) = v14;
  *(_QWORD *)(a1 + 16) = v15;
  *(_QWORD *)(a1 + 24) = v16;
  *(_BYTE *)(a1 + 32) = EnumCaseMultiPayload == 1;
  return result;
}

id sub_1000789C8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  id v9;
  NSURL *v10;
  void *v11;
  void *v12;
  uint64_t v14;

  v1 = sub_10001B520(&qword_1000B93A0);
  __chkstk_darwin(v1);
  v3 = (char *)&v14 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for URL(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for Item.Headline(0);
  sub_10005E4D0(v0 + *(int *)(v8 + 24), (uint64_t)v3);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48))(v3, 1, v4) == 1)
  {
    sub_10002CCF4((uint64_t)v3, &qword_1000B93A0);
    return 0;
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v5 + 32))(v7, v3, v4);
    URL._bridgeToObjectiveC()(v10);
    v12 = v11;
    v9 = objc_msgSend(v11, "nss_isAudioURL");

    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  }
  return v9;
}

id sub_100078AF8()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  id v7;
  void *v8;
  void *v9;
  uint64_t v11;

  v0 = sub_10001B520(&qword_1000BA9B0);
  __chkstk_darwin(v0);
  v2 = (char *)&v11 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = type metadata accessor for ImageStoreKey(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100079434(v2);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v4 + 48))(v2, 1, v3) == 1)
  {
    sub_10002CCF4((uint64_t)v2, &qword_1000BA9B0);
    return 0;
  }
  else
  {
    sub_10002AC74((uint64_t)v2, (uint64_t)v6, type metadata accessor for ImageStoreKey);
    v8 = sub_10006BB90((uint64_t)v6);
    if (v8)
    {
      v9 = v8;
      v7 = objc_msgSend(v8, "imageWithRenderingMode:", 2);

    }
    else
    {
      v7 = 0;
    }
    sub_100027D34((uint64_t)v6, type metadata accessor for ImageStoreKey);
  }
  return v7;
}

uint64_t sub_100078C34@<X0>(void *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X2>, void *a4@<X3>, void *a5@<X4>, _QWORD *a6@<X8>)
{
  void *v12;
  id v13;
  id v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;
  id v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  unsigned int v27;
  __objc2_prot *v28;

  if (objc_msgSend(a1, "itemType"))
  {
    sub_1000798A8(a4, a5);
    swift_unknownObjectRelease(a1);
  }
  else
  {
    v28 = &OBJC_PROTOCOL___NTHeadlineProviding;
    v12 = (void *)swift_dynamicCastObjCProtocolConditional(a1, 1, &v28);
    swift_unknownObjectRetain(a1);
    if (v12)
    {
      v13 = objc_msgSend(v12, "title");
      if (v13)
      {

        v14 = objc_msgSend(objc_allocWithZone((Class)FTHeadlineRowOpenURLEngagementDescriptor), "initWithHeadline:", v12);
        sub_10001D9B4(a3, a3[3]);
        v15 = type metadata accessor for Item.Headline(0);
        sub_10006C734(v14, (uint64_t)a6 + *(int *)(v15 + 24));

        swift_unknownObjectRelease(a1);
        *a6 = v12;
        a6[1] = a2;
        v16 = (_QWORD *)((char *)a6 + *(int *)(v15 + 28));
        *v16 = a4;
        v16[1] = a5;
        v17 = type metadata accessor for Item(0);
        swift_storeEnumTagMultiPayload(a6, v17, 0);
        (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 56))(a6, 0, 1, v17);
        return sub_10001DA60(a3);
      }
      v27 = static os_log_type_t.fault.getter(0);
      v19 = sub_10001B520(&qword_1000B9980);
      v20 = swift_allocObject(v19, 72, 7);
      *(_OWORD *)(v20 + 16) = xmmword_10008AC60;
      v21 = objc_msgSend(v12, "identifier");
      v22 = static String._unconditionallyBridgeFromObjectiveC(_:)(v21);
      v24 = v23;

      *(_QWORD *)(v20 + 56) = &type metadata for String;
      *(_QWORD *)(v20 + 64) = sub_10001FB34();
      *(_QWORD *)(v20 + 32) = v22;
      *(_QWORD *)(v20 + 40) = v24;
      sub_10002CC78(0, (unint64_t *)&qword_1000BBB00, OS_os_log_ptr);
      v25 = (void *)static OS_os_log.default.getter();
      os_log(_:dso:log:type:_:)("Cannot create an item without a title, identifier=%{public}@", 60, 2, &_mh_execute_header, v25, v27, v20);
      sub_1000798A8(a4, a5);
      swift_bridgeObjectRelease(v20);

    }
    else
    {
      sub_1000798A8(a4, a5);
    }
    swift_unknownObjectRelease_n(a1, 2);
  }
  swift_release(a2);
  sub_10001DA60(a3);
  v26 = type metadata accessor for Item(0);
  return (*(uint64_t (**)(_QWORD *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 56))(a6, 1, 1, v26);
}

uint64_t sub_100078ED4()
{
  id *v0;
  id v1;
  id v2;
  void *v3;
  uint64_t v4;
  void *v5;
  void *v6;
  id v7;
  void *v8;
  uint64_t v9;
  void *v10;
  void *v11;
  Swift::String v12;
  Class isa;
  Swift::String v14;
  Class v15;
  uint64_t v16;
  id v17;
  void *v18;
  objc_class *v19;
  objc_class *v20;
  id v21;
  uint64_t v22;
  _QWORD v24[5];
  uint64_t v25;

  v1 = *v0;
  v2 = objc_msgSend(*v0, "storyTypeColorLight");
  if (v2)
  {
    v3 = v2;
    v4 = static String._unconditionallyBridgeFromObjectiveC(_:)(v2);
    v6 = v5;

    v7 = objc_msgSend(v1, "storyTypeColorDark");
    if (v7)
    {
      v8 = v7;
      v9 = static String._unconditionallyBridgeFromObjectiveC(_:)(v7);
      v11 = v10;

      sub_10002CC78(0, (unint64_t *)&qword_1000B9DB0, UIColor_ptr);
      v12._countAndFlagsBits = v4;
      v12._object = v6;
      isa = UIColor.init(hex:)(v12).super.isa;
      v14._countAndFlagsBits = v9;
      v14._object = v11;
      v15 = UIColor.init(hex:)(v14).super.isa;
      v16 = swift_allocObject(&unk_1000ADA28, 32, 7);
      *(_QWORD *)(v16 + 16) = isa;
      *(_QWORD *)(v16 + 24) = v15;
      v17 = objc_allocWithZone((Class)UIColor);
      v24[4] = sub_1000340A4;
      v25 = v16;
      v24[0] = _NSConcreteStackBlock;
      v24[1] = 1107296256;
      v24[2] = sub_10004F744;
      v24[3] = &unk_1000ADA40;
      v18 = _Block_copy(v24);
      v19 = isa;
      v20 = v15;
      v21 = objc_msgSend(v17, "initWithDynamicProvider:", v18);
      _Block_release(v18);
      swift_release(v25);
      v22 = Color.init(_:)(v21);

      return v22;
    }
    v2 = (id)swift_bridgeObjectRelease(v6);
  }
  return static Color.secondary.getter(v2);
}

id sub_100079084()
{
  id *v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  id v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  id v11;
  void *v12;
  id result;
  uint64_t v14;
  uint64_t v15;

  v1 = sub_10001B520((uint64_t *)&unk_1000BC920);
  __chkstk_darwin(v1);
  v3 = (char *)&v15 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = objc_msgSend(*v0, "compactSourceName");
  if (v4)
  {
    v5 = v4;
    v6 = static String._unconditionallyBridgeFromObjectiveC(_:)(v4);
    v8 = v7;

  }
  else
  {
    v6 = 0;
    v8 = 0;
  }
  static CharacterSet.whitespacesAndNewlines.getter();
  v9 = type metadata accessor for CharacterSet(0);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 56))(v3, 0, 1, v9);
  v10 = isNilOrEmpty(_:trim:)(v6, v8, v3);
  swift_bridgeObjectRelease(v8);
  sub_10002CCF4((uint64_t)v3, (uint64_t *)&unk_1000BC920);
  v11 = *v0;
  if ((v10 & 1) != 0)
  {
    v11 = objc_msgSend(v11, "sourceName");
    v12 = v11;
    if (v11)
    {
LABEL_8:
      v14 = static String._unconditionallyBridgeFromObjectiveC(_:)(v12);

      return (id)v14;
    }
    __break(1u);
  }
  result = objc_msgSend(v11, "compactSourceName");
  v12 = result;
  if (result)
    goto LABEL_8;
  __break(1u);
  return result;
}

id sub_1000791DC()
{
  id *v0;
  uint64_t v1;
  uint64_t v2;
  id *v3;
  id v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  id result;
  void *v10;
  uint64_t v11;

  v1 = type metadata accessor for Item.Headline(0);
  __chkstk_darwin(v1);
  v3 = (id *)((char *)&v11 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0));
  v4 = objc_msgSend(*v0, "titleCompact");
  if (v4)
  {
    v5 = v4;
    v6 = static String._unconditionallyBridgeFromObjectiveC(_:)(v4);
    v8 = v7;

    sub_10002A83C((uint64_t)v0, (uint64_t)v3, type metadata accessor for Item.Headline);
    if (v8)
    {
LABEL_7:
      sub_100027D34((uint64_t)v3, type metadata accessor for Item.Headline);
      return (id)v6;
    }
  }
  else
  {
    sub_10002A83C((uint64_t)v0, (uint64_t)v3, type metadata accessor for Item.Headline);
  }
  result = objc_msgSend(*v3, "title");
  if (result)
  {
    v10 = result;
    v6 = static String._unconditionallyBridgeFromObjectiveC(_:)(result);

    goto LABEL_7;
  }
  __break(1u);
  return result;
}

uint64_t sub_1000792E8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  id *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t (*v8)(_QWORD);
  uint64_t v9;
  uint64_t v10;
  id v11;
  uint64_t v13;

  v1 = v0;
  v2 = type metadata accessor for Item.Headline(0);
  __chkstk_darwin(v2);
  v4 = (id *)((char *)&v13 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  v5 = type metadata accessor for Item(0);
  __chkstk_darwin(v5);
  v7 = (char *)&v13 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10002A83C(v1, (uint64_t)v7, v8);
  if (swift_getEnumCaseMultiPayload(v7, v5) == 1)
  {
    v9 = *((_QWORD *)v7 + 3);
    sub_1000249D8(*(_QWORD *)v7, *((_QWORD *)v7 + 1), v7[16]);
    swift_bridgeObjectRelease(v9);
    return 0x6567617373656DLL;
  }
  else
  {
    sub_10002AC74((uint64_t)v7, (uint64_t)v4, type metadata accessor for Item.Headline);
    v11 = objc_msgSend(*v4, "identifier");
    v10 = static String._unconditionallyBridgeFromObjectiveC(_:)(v11);

    sub_100027D34((uint64_t)v4, type metadata accessor for Item.Headline);
  }
  return v10;
}

uint64_t sub_100079434@<X0>(char *a1@<X8>)
{
  id *v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  id v13;
  void *v14;
  void (*v15)(char *, char *, uint64_t);
  void (*v16)(char *, _QWORD, uint64_t, uint64_t);
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;

  v3 = sub_10001B520(&qword_1000B93A0);
  __chkstk_darwin(v3);
  v5 = (char *)&v20 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for URL(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = __chkstk_darwin(v6);
  v10 = (char *)&v20 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v12 = (char *)&v20 - v11;
  v13 = objc_msgSend(*v1, "sourceNameImageRemoteURL");
  if (v13)
  {
    v14 = v13;
    static URL._unconditionallyBridgeFromObjectiveC(_:)(v13);

    v15 = *(void (**)(char *, char *, uint64_t))(v7 + 32);
    v15(v5, v10, v6);
    v16 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56);
    v16(v5, 0, 1, v6);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) != 1)
    {
      v15(v12, v5, v6);
      v15(a1, v12, v6);
      v16(a1, 0, 1, v6);
      v17 = type metadata accessor for ImageStoreKey(0);
      return (*(uint64_t (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 56))(a1, 0, 1, v17);
    }
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v7 + 56))(v5, 1, 1, v6);
  }
  sub_10002CCF4((uint64_t)v5, &qword_1000B93A0);
  v19 = type metadata accessor for ImageStoreKey(0);
  return (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 56))(a1, 1, 1, v19);
}

uint64_t sub_10007960C@<X0>(char *a1@<X8>)
{
  id *v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  id v13;
  uint64_t v14;
  id v16;
  void *v17;
  void (*v18)(char *, char *, uint64_t);
  void (*v19)(char *, _QWORD, uint64_t, uint64_t);
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v3 = sub_10001B520(&qword_1000B93A0);
  __chkstk_darwin(v3);
  v5 = (char *)&v22 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for URL(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = __chkstk_darwin(v6);
  v10 = (char *)&v22 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v12 = (char *)&v22 - v11;
  v13 = *v1;
  if ((objc_msgSend(*v1, "needsPlaceholderThumbnail") & 1) != 0)
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v7 + 56))(a1, 1, 1, v6);
    v14 = type metadata accessor for ImageStoreKey(0);
    return (*(uint64_t (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 56))(a1, 0, 1, v14);
  }
  v16 = objc_msgSend(v13, "thumbnailRemoteURL");
  if (v16)
  {
    v17 = v16;
    static URL._unconditionallyBridgeFromObjectiveC(_:)(v16);

    v18 = *(void (**)(char *, char *, uint64_t))(v7 + 32);
    v18(v5, v10, v6);
    v19 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56);
    v19(v5, 0, 1, v6);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) != 1)
    {
      v18(v12, v5, v6);
      v18(a1, v12, v6);
      v19(a1, 0, 1, v6);
      v20 = type metadata accessor for ImageStoreKey(0);
      return (*(uint64_t (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 56))(a1, 0, 1, v20);
    }
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v7 + 56))(v5, 1, 1, v6);
  }
  sub_10002CCF4((uint64_t)v5, &qword_1000B93A0);
  v21 = type metadata accessor for ImageStoreKey(0);
  return (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 56))(a1, 1, 1, v21);
}

uint64_t sub_100079850()
{
  id *v0;
  id v1;
  uint64_t v2;

  v1 = objc_msgSend(*v0, "identifier");
  v2 = static String._unconditionallyBridgeFromObjectiveC(_:)(v1);

  return v2;
}

void sub_1000798A8(void *a1, void *a2)
{
  if (a2)
  {

  }
}

uint64_t type metadata accessor for Item(uint64_t a1)
{
  return sub_10002ABF8(a1, qword_1000BC8E0, (uint64_t)&nominal type descriptor for Item);
}

uint64_t type metadata accessor for Item.Headline(uint64_t a1)
{
  return sub_10002ABF8(a1, qword_1000BC828, (uint64_t)&nominal type descriptor for Item.Headline);
}

uint64_t *sub_1000798FC(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v3;
  uint64_t v4;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int (*v14)(char *, uint64_t, uint64_t);
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  char *v18;
  void *v19;
  void *v20;
  id v21;
  id v22;

  v3 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  v4 = *a2;
  *a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    v7 = (uint64_t *)(v4 + ((v3 + 16) & ~(unint64_t)v3));
    swift_retain(v4);
  }
  else
  {
    v7 = a1;
    v8 = a2[1];
    a1[1] = v8;
    v9 = *(int *)(a3 + 24);
    v10 = (char *)a1 + v9;
    v11 = (char *)a2 + v9;
    v12 = type metadata accessor for URL(0);
    v13 = *(_QWORD *)(v12 - 8);
    v14 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48);
    swift_unknownObjectRetain(v4);
    swift_retain(v8);
    if (v14(v11, 1, v12))
    {
      v15 = sub_10001B520(&qword_1000B93A0);
      memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v10, v11, v12);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v10, 0, 1, v12);
    }
    v16 = *(int *)(a3 + 28);
    v17 = (uint64_t *)((char *)v7 + v16);
    v18 = (char *)a2 + v16;
    v19 = (void *)*((_QWORD *)v18 + 1);
    if (v19)
    {
      v20 = *(void **)v18;
      *v17 = v20;
      v17[1] = v19;
      v21 = v20;
      v22 = v19;
    }
    else
    {
      *(_OWORD *)v17 = *(_OWORD *)v18;
    }
  }
  return v7;
}

void sub_100079A40(_QWORD *a1, uint64_t a2)
{
  char *v4;
  uint64_t v5;
  uint64_t v6;
  id *v7;

  swift_unknownObjectRelease(*a1);
  swift_release(a1[1]);
  v4 = (char *)a1 + *(int *)(a2 + 24);
  v5 = type metadata accessor for URL(0);
  v6 = *(_QWORD *)(v5 - 8);
  if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5))
    (*(void (**)(char *, uint64_t))(v6 + 8))(v4, v5);
  v7 = (id *)((char *)a1 + *(int *)(a2 + 28));
  if (v7[1])
  {

  }
}

uint64_t *sub_100079AF0(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int (*v13)(char *, uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  char *v17;
  void *v18;
  void *v19;
  id v20;
  id v21;

  v6 = *a2;
  v7 = a2[1];
  *a1 = *a2;
  a1[1] = v7;
  v8 = *(int *)(a3 + 24);
  v9 = (char *)a1 + v8;
  v10 = (char *)a2 + v8;
  v11 = type metadata accessor for URL(0);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48);
  swift_unknownObjectRetain(v6);
  swift_retain(v7);
  if (v13(v10, 1, v11))
  {
    v14 = sub_10001B520(&qword_1000B93A0);
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v9, v10, v11);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
  }
  v15 = *(int *)(a3 + 28);
  v16 = (uint64_t *)((char *)a1 + v15);
  v17 = (char *)a2 + v15;
  v18 = (void *)*((_QWORD *)v17 + 1);
  if (v18)
  {
    v19 = *(void **)v17;
    *v16 = v19;
    v16[1] = v18;
    v20 = v19;
    v21 = v18;
  }
  else
  {
    *(_OWORD *)v16 = *(_OWORD *)v17;
  }
  return a1;
}

uint64_t *sub_100079C04(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t (*v15)(char *, uint64_t, uint64_t);
  int v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  id v24;
  void *v25;
  id v26;
  void *v27;
  void *v28;
  id v29;
  void *v30;
  void *v31;
  id v32;
  id v33;

  v6 = *a2;
  v7 = *a1;
  *a1 = *a2;
  swift_unknownObjectRetain(v6);
  swift_unknownObjectRelease(v7);
  v8 = a2[1];
  v9 = a1[1];
  a1[1] = v8;
  swift_retain(v8);
  swift_release(v9);
  v10 = *(int *)(a3 + 24);
  v11 = (char *)a1 + v10;
  v12 = (char *)a2 + v10;
  v13 = type metadata accessor for URL(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48);
  v16 = v15(v11, 1, v13);
  v17 = v15(v12, 1, v13);
  if (v16)
  {
    if (!v17)
    {
      (*(void (**)(char *, char *, uint64_t))(v14 + 16))(v11, v12, v13);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v14 + 56))(v11, 0, 1, v13);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v17)
  {
    (*(void (**)(char *, uint64_t))(v14 + 8))(v11, v13);
LABEL_6:
    v18 = sub_10001B520(&qword_1000B93A0);
    memcpy(v11, v12, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v14 + 24))(v11, v12, v13);
LABEL_7:
  v19 = *(int *)(a3 + 28);
  v20 = (char *)a1 + v19;
  v21 = (char *)a2 + v19;
  v22 = *(uint64_t *)((char *)a1 + v19 + 8);
  v23 = *((_QWORD *)v21 + 1);
  if (!v22)
  {
    if (v23)
    {
      v30 = *(void **)v21;
      *(_QWORD *)v20 = *(_QWORD *)v21;
      v31 = (void *)*((_QWORD *)v21 + 1);
      *((_QWORD *)v20 + 1) = v31;
      v32 = v30;
      v33 = v31;
      return a1;
    }
LABEL_13:
    *(_OWORD *)v20 = *(_OWORD *)v21;
    return a1;
  }
  if (!v23)
  {
    sub_10002BC50((id *)v20);
    goto LABEL_13;
  }
  v24 = *(id *)v20;
  v25 = *(void **)v21;
  *(_QWORD *)v20 = *(_QWORD *)v21;
  v26 = v25;

  v27 = (void *)*((_QWORD *)v21 + 1);
  v28 = (void *)*((_QWORD *)v20 + 1);
  *((_QWORD *)v20 + 1) = v27;
  v29 = v27;

  return a1;
}

_OWORD *sub_100079DBC(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  *a1 = *a2;
  v6 = *(int *)(a3 + 24);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for URL(0);
  v10 = *(_QWORD *)(v9 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9))
  {
    v11 = sub_10001B520(&qword_1000B93A0);
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v7, v8, v9);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
  }
  *(_OWORD *)((char *)a1 + *(int *)(a3 + 28)) = *(_OWORD *)((char *)a2 + *(int *)(a3 + 28));
  return a1;
}

uint64_t *sub_100079E94(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t (*v13)(char *, uint64_t, uint64_t);
  int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  id *v18;
  char *v19;
  id v20;
  id v21;

  v6 = *a1;
  *a1 = *a2;
  swift_unknownObjectRelease(v6);
  v7 = a1[1];
  a1[1] = a2[1];
  swift_release(v7);
  v8 = *(int *)(a3 + 24);
  v9 = (char *)a1 + v8;
  v10 = (char *)a2 + v8;
  v11 = type metadata accessor for URL(0);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v12 + 48);
  v14 = v13(v9, 1, v11);
  v15 = v13(v10, 1, v11);
  if (v14)
  {
    if (!v15)
    {
      (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v9, v10, v11);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v15)
  {
    (*(void (**)(char *, uint64_t))(v12 + 8))(v9, v11);
LABEL_6:
    v16 = sub_10001B520(&qword_1000B93A0);
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v12 + 40))(v9, v10, v11);
LABEL_7:
  v17 = *(int *)(a3 + 28);
  v18 = (id *)((char *)a1 + v17);
  v19 = (char *)a2 + v17;
  if (!*(uint64_t *)((char *)a1 + v17 + 8))
  {
LABEL_11:
    *(_OWORD *)v18 = *(_OWORD *)v19;
    return a1;
  }
  if (!*((_QWORD *)v19 + 1))
  {
    sub_10002BC50(v18);
    goto LABEL_11;
  }
  v20 = *v18;
  *v18 = *(id *)v19;

  v21 = v18[1];
  v18[1] = (id)*((_QWORD *)v19 + 1);

  return a1;
}

uint64_t sub_10007A014(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10007A020);
}

uint64_t sub_10007A020(char *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)a1;
    if (*(_QWORD *)a1 >= 0xFFFFFFFFuLL)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = sub_10001B520(&qword_1000B93A0);
    return (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(&a1[*(int *)(a3 + 24)], a2, v8);
  }
}

uint64_t sub_10007A0A0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10007A0AC);
}

char *sub_10007A0AC(char *result, uint64_t a2, int a3, uint64_t a4)
{
  char *v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)result = (a2 - 1);
  }
  else
  {
    v7 = sub_10001B520(&qword_1000B93A0);
    return (char *)(*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(&v5[*(int *)(a4 + 24)], a2, a2, v7);
  }
  return result;
}

void sub_10007A124(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[4];

  v4[0] = "\b";
  v4[1] = (char *)&value witness table for Builtin.NativeObject + 64;
  sub_100035670(319);
  if (v3 <= 0x3F)
  {
    v4[2] = *(_QWORD *)(v2 - 8) + 64;
    v4[3] = &unk_10008D4B0;
    swift_initStructMetadata(a1, 256, 4, v4, a1 + 16);
  }
}

unint64_t sub_10007A1AC(unint64_t a1, uint64_t a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  const void *v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int (*v22)(const void *, uint64_t, uint64_t);
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  void *v27;
  void *v28;
  id v29;
  id v30;
  void *__dst;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v14 = *(_QWORD *)a2;
    *(_QWORD *)a1 = *(_QWORD *)a2;
    a1 = v14 + ((v5 + 16) & ~(unint64_t)v5);
    swift_retain(v14);
  }
  else
  {
    if (swift_getEnumCaseMultiPayload(a2, a3) == 1)
    {
      v7 = *(_QWORD *)a2;
      v8 = *(_QWORD *)(a2 + 8);
      v9 = *(_BYTE *)(a2 + 16);
      sub_100024770(*(_QWORD *)a2, v8, v9);
      *(_QWORD *)a1 = v7;
      *(_QWORD *)(a1 + 8) = v8;
      *(_BYTE *)(a1 + 16) = v9;
      v10 = *(_QWORD *)(a2 + 24);
      *(_QWORD *)(a1 + 24) = v10;
      swift_bridgeObjectRetain(v10);
      v11 = a1;
      v12 = a3;
      v13 = 1;
    }
    else
    {
      v15 = *(_QWORD *)a2;
      v16 = *(_QWORD *)(a2 + 8);
      *(_QWORD *)a1 = *(_QWORD *)a2;
      *(_QWORD *)(a1 + 8) = v16;
      v17 = type metadata accessor for Item.Headline(0);
      v18 = *(int *)(v17 + 24);
      __dst = (void *)(a1 + v18);
      v19 = (const void *)(a2 + v18);
      v20 = type metadata accessor for URL(0);
      v21 = *(_QWORD *)(v20 - 8);
      v22 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v21 + 48);
      swift_unknownObjectRetain(v15);
      swift_retain(v16);
      if (v22(v19, 1, v20))
      {
        v23 = sub_10001B520(&qword_1000B93A0);
        memcpy(__dst, v19, *(_QWORD *)(*(_QWORD *)(v23 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v21 + 16))(__dst, v19, v20);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v21 + 56))(__dst, 0, 1, v20);
      }
      v24 = *(int *)(v17 + 28);
      v25 = (_QWORD *)(a1 + v24);
      v26 = a2 + v24;
      v27 = *(void **)(v26 + 8);
      if (v27)
      {
        v28 = *(void **)v26;
        *v25 = v28;
        v25[1] = v27;
        v29 = v28;
        v30 = v27;
      }
      else
      {
        *(_OWORD *)v25 = *(_OWORD *)v26;
      }
      v11 = a1;
      v12 = a3;
      v13 = 0;
    }
    swift_storeEnumTagMultiPayload(v11, v12, v13);
  }
  return a1;
}

void sub_10007A368(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  id *v7;

  if (swift_getEnumCaseMultiPayload(a1, a2) == 1)
  {
    sub_1000249D8(*a1, a1[1], *((_BYTE *)a1 + 16));
    swift_bridgeObjectRelease(a1[3]);
  }
  else
  {
    swift_unknownObjectRelease(*a1);
    swift_release(a1[1]);
    v3 = type metadata accessor for Item.Headline(0);
    v4 = (char *)a1 + *(int *)(v3 + 24);
    v5 = type metadata accessor for URL(0);
    v6 = *(_QWORD *)(v5 - 8);
    if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5))
      (*(void (**)(char *, uint64_t))(v6 + 8))(v4, v5);
    v7 = (id *)((char *)a1 + *(int *)(v3 + 28));
    if (v7[1])
    {

    }
  }
}

uint64_t sub_10007A450(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  const void *v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int (*v18)(const void *, uint64_t, uint64_t);
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  void *v23;
  void *v24;
  id v25;
  id v26;
  void *__dst;

  if (swift_getEnumCaseMultiPayload(a2, a3) == 1)
  {
    v6 = *(_QWORD *)a2;
    v7 = *(_QWORD *)(a2 + 8);
    v8 = *(_BYTE *)(a2 + 16);
    sub_100024770(*(_QWORD *)a2, v7, v8);
    *(_QWORD *)a1 = v6;
    *(_QWORD *)(a1 + 8) = v7;
    *(_BYTE *)(a1 + 16) = v8;
    v9 = *(_QWORD *)(a2 + 24);
    *(_QWORD *)(a1 + 24) = v9;
    swift_bridgeObjectRetain(v9);
    v10 = 1;
  }
  else
  {
    v11 = *(_QWORD *)a2;
    v12 = *(_QWORD *)(a2 + 8);
    *(_QWORD *)a1 = *(_QWORD *)a2;
    *(_QWORD *)(a1 + 8) = v12;
    v13 = type metadata accessor for Item.Headline(0);
    v14 = *(int *)(v13 + 24);
    __dst = (void *)(a1 + v14);
    v15 = (const void *)(a2 + v14);
    v16 = type metadata accessor for URL(0);
    v17 = *(_QWORD *)(v16 - 8);
    v18 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v17 + 48);
    swift_unknownObjectRetain(v11);
    swift_retain(v12);
    if (v18(v15, 1, v16))
    {
      v19 = sub_10001B520(&qword_1000B93A0);
      memcpy(__dst, v15, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v17 + 16))(__dst, v15, v16);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v17 + 56))(__dst, 0, 1, v16);
    }
    v20 = *(int *)(v13 + 28);
    v21 = (_QWORD *)(a1 + v20);
    v22 = a2 + v20;
    v23 = *(void **)(v22 + 8);
    if (v23)
    {
      v24 = *(void **)v22;
      *v21 = v24;
      v21[1] = v23;
      v25 = v24;
      v26 = v23;
      v10 = 0;
    }
    else
    {
      v10 = 0;
      *(_OWORD *)v21 = *(_OWORD *)v22;
    }
  }
  swift_storeEnumTagMultiPayload(a1, a3, v10);
  return a1;
}

uint64_t sub_10007A5DC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  const void *v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int (*v18)(const void *, uint64_t, uint64_t);
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  void *v23;
  void *v24;
  id v25;
  id v26;
  void *__dst;

  if (a1 != a2)
  {
    sub_100027D34(a1, type metadata accessor for Item);
    if (swift_getEnumCaseMultiPayload(a2, a3) == 1)
    {
      v6 = *(_QWORD *)a2;
      v7 = *(_QWORD *)(a2 + 8);
      v8 = *(_BYTE *)(a2 + 16);
      sub_100024770(*(_QWORD *)a2, v7, v8);
      *(_QWORD *)a1 = v6;
      *(_QWORD *)(a1 + 8) = v7;
      *(_BYTE *)(a1 + 16) = v8;
      v9 = *(_QWORD *)(a2 + 24);
      *(_QWORD *)(a1 + 24) = v9;
      swift_bridgeObjectRetain(v9);
      v10 = 1;
    }
    else
    {
      v11 = *(_QWORD *)a2;
      *(_QWORD *)a1 = *(_QWORD *)a2;
      v12 = *(_QWORD *)(a2 + 8);
      *(_QWORD *)(a1 + 8) = v12;
      v13 = type metadata accessor for Item.Headline(0);
      v14 = *(int *)(v13 + 24);
      __dst = (void *)(a1 + v14);
      v15 = (const void *)(a2 + v14);
      v16 = type metadata accessor for URL(0);
      v17 = *(_QWORD *)(v16 - 8);
      v18 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v17 + 48);
      swift_unknownObjectRetain(v11);
      swift_retain(v12);
      if (v18(v15, 1, v16))
      {
        v19 = sub_10001B520(&qword_1000B93A0);
        memcpy(__dst, v15, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v17 + 16))(__dst, v15, v16);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v17 + 56))(__dst, 0, 1, v16);
      }
      v20 = *(int *)(v13 + 28);
      v21 = (_QWORD *)(a1 + v20);
      v22 = a2 + v20;
      if (*(_QWORD *)(v22 + 8))
      {
        v23 = *(void **)v22;
        *v21 = *(_QWORD *)v22;
        v24 = *(void **)(v22 + 8);
        v21[1] = v24;
        v25 = v23;
        v26 = v24;
        v10 = 0;
      }
      else
      {
        v10 = 0;
        *(_OWORD *)v21 = *(_OWORD *)v22;
      }
    }
    swift_storeEnumTagMultiPayload(a1, a3, v10);
  }
  return a1;
}

_OWORD *sub_10007A790(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  if (swift_getEnumCaseMultiPayload(a2, a3))
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  }
  else
  {
    *a1 = *a2;
    v6 = type metadata accessor for Item.Headline(0);
    v7 = *(int *)(v6 + 24);
    v8 = (char *)a1 + v7;
    v9 = (char *)a2 + v7;
    v10 = type metadata accessor for URL(0);
    v11 = *(_QWORD *)(v10 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10))
    {
      v12 = sub_10001B520(&qword_1000B93A0);
      memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v8, v9, v10);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
    }
    *(_OWORD *)((char *)a1 + *(int *)(v6 + 28)) = *(_OWORD *)((char *)a2 + *(int *)(v6 + 28));
    swift_storeEnumTagMultiPayload(a1, a3, 0);
  }
  return a1;
}

_OWORD *sub_10007A8AC(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  if (a1 != a2)
  {
    sub_100027D34((uint64_t)a1, type metadata accessor for Item);
    if (swift_getEnumCaseMultiPayload(a2, a3))
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
    }
    else
    {
      *a1 = *a2;
      v6 = type metadata accessor for Item.Headline(0);
      v7 = *(int *)(v6 + 24);
      v8 = (char *)a1 + v7;
      v9 = (char *)a2 + v7;
      v10 = type metadata accessor for URL(0);
      v11 = *(_QWORD *)(v10 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10))
      {
        v12 = sub_10001B520(&qword_1000B93A0);
        memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v8, v9, v10);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
      }
      *(_OWORD *)((char *)a1 + *(int *)(v6 + 28)) = *(_OWORD *)((char *)a2 + *(int *)(v6 + 28));
      swift_storeEnumTagMultiPayload(a1, a3, 0);
    }
  }
  return a1;
}

uint64_t sub_10007A9E0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a3 - 8) + 48))();
}

uint64_t sub_10007A9EC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a4 - 8) + 56))();
}

uint64_t sub_10007A9FC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_storeEnumTagMultiPayload(a1, a3, a2);
}

uint64_t sub_10007AA0C(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[2];

  result = type metadata accessor for Item.Headline(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(result - 8) + 64;
    v4[1] = " ";
    swift_initEnumMetadataMultiPayload(a1, 256, 2, v4);
    return 0;
  }
  return result;
}

id sub_10007AA78(id result, void *a2)
{
  id v2;

  if (a2)
  {
    v2 = result;
    return a2;
  }
  return result;
}

uint64_t sub_10007AAA4()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10007AAD0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10007AAE0(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

_QWORD *sub_10007AAE8@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  id v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  _QWORD *v36;
  _QWORD v37[3];
  uint64_t v38;
  _QWORD v39[3];
  uint64_t v40;

  v4 = a1[3];
  v5 = a1[4];
  sub_10001D9B4(a1, v4);
  v6 = sub_10001B520(&qword_1000BCA20);
  result = dispatch thunk of ResolverType.resolve<A>(_:)(v39, v6, v6, v4, v5);
  if (!v40)
  {
    __break(1u);
    goto LABEL_9;
  }
  v8 = a1[3];
  v9 = a1[4];
  sub_10001D9B4(a1, v8);
  v10 = sub_10002CC78(0, &qword_1000BCA10, off_1000A9B58);
  result = (_QWORD *)dispatch thunk of ResolverType.resolve<A>(_:)(v10, v10, v8, v9);
  if (!result)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  v11 = (uint64_t)result;
  v12 = a1[3];
  v13 = a1[4];
  sub_10001D9B4(a1, v12);
  v14 = sub_10001B520(&qword_1000BC9F8);
  result = (_QWORD *)dispatch thunk of ResolverType.resolve<A>(_:)(v14, v14, v12, v13);
  if (!result)
  {
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  v15 = (uint64_t)result;
  v16 = a1[3];
  v17 = a1[4];
  sub_10001D9B4(a1, v16);
  v18 = sub_10002CC78(0, (unint64_t *)&unk_1000BCA40, off_1000A9B50);
  result = (_QWORD *)dispatch thunk of ResolverType.resolve<A>(_:)(v18, v18, v16, v17);
  if (!result)
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  v19 = (uint64_t)result;
  v20 = a1[3];
  v21 = a1[4];
  sub_10001D9B4(a1, v20);
  v22 = sub_10001B520(&qword_1000BCA30);
  result = dispatch thunk of ResolverType.resolve<A>(_:)(v37, v22, v22, v20, v21);
  if (!v38)
  {
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  v23 = a1[3];
  v24 = a1[4];
  sub_10001D9B4(a1, v23);
  v25 = sub_10002CC78(0, &qword_1000BCA00, off_1000A9B68);
  result = (_QWORD *)dispatch thunk of ResolverType.resolve<A>(_:name:)(v25, 0x656D656761676E45, 0xEA0000000000746ELL, v25, v23, v24);
  if (result)
  {
    v26 = result;
    v27 = objc_msgSend(result, "nonVideoContentEventTracker");

    v28 = sub_10003021C((uint64_t)v39, v40);
    __chkstk_darwin(v28);
    v30 = (_QWORD *)((char *)v37 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0));
    (*(void (**)(uint64_t *))(v31 + 16))(v30);
    v32 = sub_10003021C((uint64_t)v37, v38);
    __chkstk_darwin(v32);
    v34 = (_QWORD *)((char *)v37 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0));
    (*(void (**)(uint64_t *))(v35 + 16))(v34);
    v36 = sub_10007C180(*v30, v11, v15, v19, *v34, (uint64_t)v27);
    sub_10001DA60(v37);
    sub_10001DA60(v39);
    result = (_QWORD *)type metadata accessor for ContentService();
    a2[3] = result;
    a2[4] = &off_1000AD318;
    *a2 = v36;
    return result;
  }
LABEL_13:
  __break(1u);
  return result;
}

_QWORD *sub_10007ADEC@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *result;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD v20[5];
  _QWORD v21[3];
  uint64_t v22;

  v3 = a1[3];
  v4 = a1[4];
  sub_10001D9B4(a1, v3);
  v5 = sub_10001B520(&qword_1000BC9C8);
  result = dispatch thunk of ResolverType.resolve<A>(_:)(v21, v5, v5, v3, v4);
  if (v22)
  {
    v7 = sub_10003021C((uint64_t)v21, v22);
    __chkstk_darwin(v7);
    v9 = (_QWORD *)((char *)v20 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
    (*(void (**)(uint64_t *))(v10 + 16))(v9);
    v11 = *v9;
    v12 = type metadata accessor for ContentService();
    v20[3] = v12;
    v20[4] = &off_1000AD318;
    v20[0] = v11;
    v13 = type metadata accessor for EntryService();
    v14 = (_QWORD *)swift_allocObject(v13, 56, 7);
    v15 = sub_10003021C((uint64_t)v20, v12);
    __chkstk_darwin(v15);
    v17 = (_QWORD *)((char *)v20 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
    (*(void (**)(uint64_t *))(v18 + 16))(v17);
    v19 = *v17;
    v14[5] = v12;
    v14[6] = &off_1000AD318;
    v14[2] = v19;
    sub_10001DA60(v20);
    result = (_QWORD *)sub_10001DA60(v21);
    a2[3] = v13;
    a2[4] = &off_1000AC5F8;
    *a2 = v14;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_10007AF74(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t result;

  v1 = a1[3];
  v2 = a1[4];
  sub_10001D9B4(a1, v1);
  v3 = type metadata accessor for FeedPersonalizerFactory();
  result = dispatch thunk of ResolverType.resolve<A>(_:)(v3, v3, v1, v2);
  if (!result)
    __break(1u);
  return result;
}

id sub_10007AFC4()
{
  return objc_msgSend((id)objc_opt_self(FTNewsModeProactiveWidgetEventTracker), "widgetEventTrackerWithMaxRowCount:", 10);
}

id sub_10007AFFC()
{
  return objc_msgSend(objc_allocWithZone((Class)FTNewsAnalyticsUserIDWidgetEventTracker), "init");
}

uint64_t sub_10007B020(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  id v8;
  Class isa;
  id v10;

  v2 = sub_10001B520((uint64_t *)&unk_1000BCA60);
  v3 = swift_allocObject(v2, 40, 7);
  *(_OWORD *)(v3 + 16) = xmmword_10008D400;
  v4 = a1[3];
  v5 = a1[4];
  sub_10001D9B4(a1, v4);
  v6 = sub_10002CC78(0, &qword_1000BCA08, &off_1000A9B70);
  result = dispatch thunk of ResolverType.resolve<A>(_:)(v6, v6, v4, v5);
  if (result)
  {
    *(_QWORD *)(v3 + 32) = result;
    specialized Array._endMutation()(result);
    v8 = objc_allocWithZone((Class)FTAggregateWidgetEventTracker);
    sub_10001B520((uint64_t *)&unk_1000BA060);
    isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(v3);
    v10 = objc_msgSend(v8, "initWithEventTrackers:", isa);

    return (uint64_t)v10;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_10007B120(_QWORD *a1)
{
  return sub_10007B134(a1, (unint64_t *)&unk_1000BA050, off_1000A9B60);
}

uint64_t sub_10007B134(_QWORD *a1, unint64_t *a2, _QWORD *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;

  v5 = a1[3];
  v6 = a1[4];
  sub_10001D9B4(a1, v5);
  v7 = sub_10002CC78(0, a2, a3);
  result = dispatch thunk of ResolverType.resolve<A>(_:)(v7, v7, v5, v6);
  if (!result)
    __break(1u);
  return result;
}

_QWORD *sub_10007B1A0@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *result;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD v20[5];
  _QWORD v21[3];
  uint64_t v22;

  v3 = a1[3];
  v4 = a1[4];
  sub_10001D9B4(a1, v3);
  v5 = sub_10001B520(&qword_1000BCA30);
  result = dispatch thunk of ResolverType.resolve<A>(_:)(v21, v5, v5, v3, v4);
  if (v22)
  {
    v7 = sub_10003021C((uint64_t)v21, v22);
    __chkstk_darwin(v7);
    v9 = (_QWORD *)((char *)v20 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
    (*(void (**)(uint64_t *))(v10 + 16))(v9);
    v11 = *v9;
    v12 = type metadata accessor for WidgetAssetStore(0);
    v20[3] = v12;
    v20[4] = &off_1000AB7D8;
    v20[0] = v11;
    v13 = type metadata accessor for EntryStore();
    v14 = (_QWORD *)swift_allocObject(v13, 72, 7);
    v15 = sub_10003021C((uint64_t)v20, v12);
    __chkstk_darwin(v15);
    v17 = (_QWORD *)((char *)v20 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
    (*(void (**)(uint64_t *))(v18 + 16))(v17);
    v19 = *v17;
    v14[5] = v12;
    v14[6] = &off_1000AB7D8;
    v14[2] = v19;
    v14[7] = 0x7972746E65;
    v14[8] = 0xE500000000000000;
    sub_10001DA60(v20);
    result = (_QWORD *)sub_10001DA60(v21);
    a2[3] = v13;
    a2[4] = &off_1000AB668;
    *a2 = v14;
  }
  else
  {
    __break(1u);
  }
  return result;
}

_QWORD *sub_10007B33C(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *result;
  uint64_t v5;
  objc_class *v6;
  char *v7;
  objc_super v8;
  uint64_t v9;

  v1 = a1[3];
  v2 = a1[4];
  sub_10001D9B4(a1, v1);
  v3 = sub_10001B520(&qword_1000BC9E0);
  result = dispatch thunk of ResolverType.resolve<A>(_:)(&v9, v3, v3, v1, v2);
  v5 = v9;
  if (v9 == 1)
  {
    __break(1u);
  }
  else
  {
    v6 = (objc_class *)type metadata accessor for FeedPersonalizerFactory();
    v7 = (char *)objc_allocWithZone(v6);
    *(_QWORD *)&v7[OBJC_IVAR____TtC7NewsTag23FeedPersonalizerFactory_translationProvider] = v5;
    v8.receiver = v7;
    v8.super_class = v6;
    return objc_msgSendSuper2(&v8, "init");
  }
  return result;
}

void *sub_10007B3D4@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *result;
  void *v7;
  id v8;

  v3 = a1[3];
  v4 = a1[4];
  sub_10001D9B4(a1, v3);
  v5 = sub_10001B520(&qword_1000BC9E8);
  result = (void *)dispatch thunk of ResolverType.resolve<A>(_:)(v5, v5, v3, v4);
  if (result)
  {
    v7 = result;
    v8 = objc_msgSend(result, "possiblyUnfetchedTranslationProvider");
    result = (void *)swift_unknownObjectRelease(v7);
    *a2 = v8;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_10007B454(_QWORD *a1)
{
  return sub_10007B134(a1, &qword_1000BC9F0, FCTranslationManager_ptr);
}

uint64_t sub_10007B468(_QWORD *a1)
{
  return sub_10007B4C0(a1, (uint64_t *)&unk_1000BA000, (Class *)FCTranslationManager_ptr, (SEL *)&selRef_initWithContentContext_);
}

uint64_t sub_10007B484()
{
  uint64_t v0;

  v0 = type metadata accessor for ImageJoeColorAnalyzer();
  return swift_allocObject(v0, 16, 7);
}

uint64_t sub_10007B4A4(_QWORD *a1)
{
  return sub_10007B4C0(a1, (uint64_t *)&unk_1000BA190, (Class *)off_1000A9B68, (SEL *)&selRef_initWithUserIDProvider_);
}

uint64_t sub_10007B4C0(_QWORD *a1, uint64_t *a2, Class *a3, SEL *a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  id v12;

  v7 = a1[3];
  v8 = a1[4];
  sub_10001D9B4(a1, v7);
  v9 = sub_10001B520(a2);
  result = dispatch thunk of ResolverType.resolve<A>(_:)(v9, v9, v7, v8);
  if (result)
  {
    v11 = result;
    v12 = objc_msgSend(objc_allocWithZone(*a3), *a4, result);
    swift_unknownObjectRelease(v11);
    return (uint64_t)v12;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_10007B550(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  void *v15;
  uint64_t result;
  id v17;
  NSURL *v18;
  void *v19;
  void *v20;
  id v21;
  uint64_t v22;

  v2 = type metadata accessor for URL(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v22 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_10001B520(&qword_1000B93A0);
  __chkstk_darwin(v6);
  v8 = (char *)&v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_10001D9B4(a1, v9);
  v11 = sub_10001B520(&qword_1000BCA18);
  v12 = dispatch thunk of ResolverType.resolve<A>(_:)(v11, v11, v9, v10);
  if (!v12)
  {
    __break(1u);
    goto LABEL_6;
  }
  v13 = v12;
  v14 = (id)FCURLForContainerizedUserAccountDocumentDirectory(1);
  if (!v14)
  {
LABEL_6:
    result = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v3 + 56))(v8, 1, 1, v2);
    goto LABEL_7;
  }
  v15 = v14;
  static URL._unconditionallyBridgeFromObjectiveC(_:)(v14);

  (*(void (**)(char *, char *, uint64_t))(v3 + 32))(v8, v5, v2);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v3 + 56))(v8, 0, 1, v2);
  result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v3 + 48))(v8, 1, v2);
  if ((_DWORD)result != 1)
  {
    v17 = objc_allocWithZone((Class)FTSeenHeadlineWidgetEventTracker);
    URL._bridgeToObjectiveC()(v18);
    v20 = v19;
    v21 = objc_msgSend(v17, "initWithTodayEventTracker:documentsDirectory:", v13, v19);
    swift_unknownObjectRelease(v13);

    (*(void (**)(char *, uint64_t))(v3 + 8))(v8, v2);
    return (uint64_t)v21;
  }
LABEL_7:
  __break(1u);
  return result;
}

uint64_t sub_10007B714(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  void *v5;
  id v6;

  v1 = a1[3];
  v2 = a1[4];
  sub_10001D9B4(a1, v1);
  v3 = sub_10002CC78(0, &qword_1000BCA28, FCNewsAvailabilityMonitor_ptr);
  result = dispatch thunk of ResolverType.resolve<A>(_:)(v3, v3, v1, v2);
  if (result)
  {
    v5 = (void *)result;
    v6 = objc_msgSend(objc_allocWithZone((Class)FTEngagementURLProvider), "initWithAvailabilityMonitor:", result);

    return (uint64_t)v6;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_10007B7A0(_QWORD *a1)
{
  return sub_10007B134(a1, (unint64_t *)&unk_1000BCA50, NTTodayContext_ptr);
}

uint64_t sub_10007B7B4(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v3 = a2[3];
  v4 = a2[4];
  sub_10001D9B4(a2, v3);
  v5 = sub_10001B520((uint64_t *)&unk_1000BA010);
  result = dispatch thunk of ResolverType.resolve<A>(_:)(v5, v5, v3, v4);
  if (result)
  {
    v7 = result;
    v8 = sub_10001D9B4(a1, a1[3]);
    v9 = swift_allocObject(&unk_1000ADAB0, 24, 7);
    *(_QWORD *)(v9 + 16) = v7;
    v10 = *v8;
    v12 = *(_QWORD *)(*v8 + 16);
    v11 = *(_QWORD *)(*v8 + 24);
    *(_QWORD *)(v10 + 16) = sub_10007CE54;
    *(_QWORD *)(v10 + 24) = v9;
    return sub_100071E98(v12, v11);
  }
  else
  {
    __break(1u);
  }
  return result;
}

void sub_10007B854(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, double a5)
{
  uint64_t v9;
  id v10;

  if (a3)
    v9 = _convertErrorToNSError(_:)(a3);
  else
    v9 = 0;
  v10 = (id)v9;
  objc_msgSend(a4, "widgetPerformedUpdateWithTodayResults:fetchInfo:error:updateFetchDuration:", a1, a2, a5);

}

void sub_10007B8D0(void *a1)
{
  void *v2;
  _QWORD v3[6];

  v3[4] = TodayIntentResponseCode.rawValue.getter;
  v3[5] = 0;
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 1107296256;
  v3[2] = sub_10007B954;
  v3[3] = &unk_1000ADA78;
  v2 = _Block_copy(v3);
  objc_msgSend(a1, "fetchTranslationProvider:", v2);
  _Block_release(v2);
}

uint64_t sub_10007B954(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v5;
  void (*v6)(uint64_t, void *);
  id v7;

  v6 = *(void (**)(uint64_t, void *))(a1 + 32);
  v5 = *(_QWORD *)(a1 + 40);
  swift_retain(v5);
  swift_unknownObjectRetain(a2);
  v7 = a3;
  v6(a2, a3);
  swift_release(v5);

  return swift_unknownObjectRelease(a2);
}

id sub_10007B9BC()
{
  return objc_msgSend(objc_allocWithZone((Class)FCNewsAvailabilityMonitor), "initWithProcessVariant:", 0);
}

uint64_t sub_10007B9E4@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  id v15;
  id v16;
  uint64_t result;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  objc_class *v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  id v29;
  _QWORD v30[3];
  uint64_t v31;
  _UNKNOWN **v32;
  _QWORD v33[3];
  uint64_t v34;

  v4 = type metadata accessor for URL(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)v30 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_10001B520(&qword_1000B93A0);
  __chkstk_darwin(v8);
  v10 = (char *)v30 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = a1[3];
  v12 = a1[4];
  sub_10001D9B4(a1, v11);
  v13 = sub_10001B520(&qword_1000BCA38);
  dispatch thunk of ResolverType.resolve<A>(_:)(v33, v13, v13, v11, v12);
  if (!v34)
  {
    __break(1u);
    goto LABEL_6;
  }
  v14 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
  v15 = objc_msgSend(v14, "bundleIdentifier");

  v16 = (id)FCURLForWidgetReferralItems(v15);
  if (!v16)
  {
LABEL_6:
    result = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56))(v10, 1, 1, v4);
    goto LABEL_7;
  }
  static URL._unconditionallyBridgeFromObjectiveC(_:)(v16);

  (*(void (**)(char *, char *, uint64_t))(v5 + 32))(v10, v7, v4);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v5 + 56))(v10, 0, 1, v4);
  result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v5 + 48))(v10, 1, v4);
  if ((_DWORD)result != 1)
  {
    v18 = sub_10003021C((uint64_t)v33, v34);
    __chkstk_darwin(v18);
    v20 = (_QWORD *)((char *)v30 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0));
    (*(void (**)(uint64_t *))(v21 + 16))(v20);
    v22 = *v20;
    v31 = type metadata accessor for WidgetCenter(0);
    v32 = &off_1000ACF70;
    v30[0] = v22;
    v23 = (objc_class *)type metadata accessor for WidgetAssetStore(0);
    v24 = (char *)objc_allocWithZone(v23);
    v25 = sub_10003021C((uint64_t)v30, v31);
    __chkstk_darwin(v25);
    v27 = (_QWORD *)((char *)v30 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0));
    (*(void (**)(uint64_t *))(v28 + 16))(v27);
    v29 = sub_10007BD3C(*v27, (uint64_t)v10, v24);
    sub_10001DA60(v30);
    result = sub_10001DA60(v33);
    a2[3] = v23;
    a2[4] = &off_1000AB7D8;
    *a2 = v29;
    return result;
  }
LABEL_7:
  __break(1u);
  return result;
}

uint64_t sub_10007BCB8@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;

  v2 = type metadata accessor for WidgetCenter(0);
  result = static WidgetCenter.shared.getter();
  a1[3] = v2;
  a1[4] = (uint64_t)&off_1000ACF70;
  *a1 = result;
  return result;
}

id sub_10007BCF4()
{
  return objc_msgSend(objc_allocWithZone((Class)FTContentPrefetchManager), "init");
}

uint64_t type metadata accessor for WidgetServiceAssembly()
{
  return objc_opt_self(_TtC7NewsTag21WidgetServiceAssembly);
}

id sub_10007BD3C(uint64_t a1, uint64_t a2, char *a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  id v14;
  NSURL *v15;
  void *v16;
  void *v17;
  unsigned int v18;
  id v19;
  id v20;
  id v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  id v25;
  id v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  id v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  id v55;
  uint64_t v57;
  unsigned int v58;
  uint64_t v59;
  objc_class *ObjectType;
  objc_super v61;
  id v62[3];
  _QWORD v63[5];

  ObjectType = (objc_class *)swift_getObjectType(a3);
  v6 = type metadata accessor for UnfairLock.Options(0);
  __chkstk_darwin(v6);
  v8 = (char *)&v57 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v63[3] = type metadata accessor for WidgetCenter(0);
  v63[4] = &off_1000ACF70;
  v63[0] = a1;
  *(_QWORD *)&a3[OBJC_IVAR____TtC7NewsTag16WidgetAssetStore____lazy_storage___pruneThrottler] = 0;
  v9 = OBJC_IVAR____TtC7NewsTag16WidgetAssetStore_lock;
  v10 = a3;
  static UnfairLock.Options.dataSynchronization.getter();
  v11 = type metadata accessor for UnfairLock(0);
  swift_allocObject(v11, *(unsigned int *)(v11 + 48), *(unsigned __int16 *)(v11 + 52));
  *(_QWORD *)&a3[v9] = UnfairLock.init(options:)(v8);
  sub_100030244((uint64_t)v63, (uint64_t)&v10[OBJC_IVAR____TtC7NewsTag16WidgetAssetStore_infoService]);
  v12 = &v10[OBJC_IVAR____TtC7NewsTag16WidgetAssetStore_directoryUrl];
  v13 = type metadata accessor for URL(0);
  v59 = *(_QWORD *)(v13 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v59 + 16))(v12, a2, v13);
  v14 = objc_msgSend((id)objc_opt_self(NSFileManager), "defaultManager");
  URL._bridgeToObjectiveC()(v15);
  v17 = v16;
  v62[0] = 0;
  v18 = objc_msgSend(v14, "createDirectoryAtURL:withIntermediateDirectories:attributes:error:", v16, 1, 0, v62);

  v19 = v62[0];
  if (v18)
  {
    v20 = v62[0];
  }
  else
  {
    v21 = v62[0];
    v22 = _convertNSErrorToError(_:)(v19);

    swift_willThrow(v23);
    v24 = (void *)_convertErrorToNSError(_:)(v22);
    v25 = objc_msgSend(v24, "code");

    if (v25 == (id)516)
    {
      swift_errorRelease(v22);
    }
    else
    {
      v26 = PrefetchLog();
      v27 = v10;
      v28 = v13;
      v29 = static os_log_type_t.error.getter(v26);
      v30 = sub_10001B520(&qword_1000B9980);
      v31 = swift_allocObject(v30, 72, 7);
      *(_OWORD *)(v31 + 16) = xmmword_10008AC60;
      v32 = sub_10007CDD0();
      v33 = dispatch thunk of CustomStringConvertible.description.getter(v28, v32);
      v35 = v34;
      *(_QWORD *)(v31 + 56) = &type metadata for String;
      *(_QWORD *)(v31 + 64) = sub_10001FB34();
      *(_QWORD *)(v31 + 32) = v33;
      *(_QWORD *)(v31 + 40) = v35;
      v36 = v29;
      v13 = v28;
      v10 = v27;
      os_log(_:dso:log:type:_:)("error creating asset store directory at %{public}@", 50, 2, &_mh_execute_header, v26, v36, v31);
      swift_errorRelease(v22);

      swift_bridgeObjectRelease(v31);
    }
  }
  v37 = sub_10001DF1C();
  v38 = sub_100022C44((uint64_t)v37);
  swift_bridgeObjectRelease(v37);
  v39 = a2;
  v40 = &v10[OBJC_IVAR____TtC7NewsTag16WidgetAssetStore_keysOfInterest];
  *(_QWORD *)&v10[OBJC_IVAR____TtC7NewsTag16WidgetAssetStore_keysOfInterest] = v38;
  v41 = PrefetchLog();
  v58 = static os_log_type_t.info.getter();
  v42 = sub_10001B520(&qword_1000B9980);
  v43 = swift_allocObject(v42, 112, 7);
  *(_OWORD *)(v43 + 16) = xmmword_10008AC80;
  v44 = sub_10007CDD0();
  v45 = dispatch thunk of CustomStringConvertible.description.getter(v13, v44);
  v46 = v13;
  v48 = v47;
  *(_QWORD *)(v43 + 56) = &type metadata for String;
  v49 = sub_10001FB34();
  *(_QWORD *)(v43 + 64) = v49;
  *(_QWORD *)(v43 + 32) = v45;
  *(_QWORD *)(v43 + 40) = v48;
  swift_beginAccess(v40, v62, 0, 0);
  v50 = *(_QWORD *)v40;
  v51 = swift_bridgeObjectRetain(*(_QWORD *)v40);
  v52 = Set.description.getter(v51, &type metadata for String, &protocol witness table for String);
  v54 = v53;
  swift_bridgeObjectRelease(v50);

  *(_QWORD *)(v43 + 96) = &type metadata for String;
  *(_QWORD *)(v43 + 104) = v49;
  *(_QWORD *)(v43 + 72) = v52;
  *(_QWORD *)(v43 + 80) = v54;
  os_log(_:dso:log:type:_:)("set up asset store at %@ with keys %@", 37, 2, &_mh_execute_header, v41, v58, v43);

  swift_bridgeObjectRelease(v43);
  v61.receiver = v10;
  v61.super_class = ObjectType;
  v55 = objc_msgSendSuper2(&v61, "init");
  (*(void (**)(uint64_t, uint64_t))(v59 + 8))(v39, v46);
  sub_10001DA60(v63);
  return v55;
}

_QWORD *sub_10007C180(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD v27[3];
  uint64_t v28;
  _UNKNOWN **v29;
  _QWORD v30[5];

  v12 = type metadata accessor for NTTodayContextResultsService();
  v30[3] = v12;
  v30[4] = &off_1000AD790;
  v30[0] = a1;
  v13 = type metadata accessor for WidgetAssetStore(0);
  v28 = v13;
  v29 = &off_1000AB7D8;
  v27[0] = a5;
  v14 = type metadata accessor for ContentService();
  v15 = (_QWORD *)swift_allocObject(v14, 144, 7);
  v16 = sub_10003021C((uint64_t)v30, v12);
  __chkstk_darwin(v16);
  v18 = (_QWORD *)((char *)v27 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v19 + 16))(v18);
  v20 = sub_10003021C((uint64_t)v27, v28);
  __chkstk_darwin(v20);
  v22 = (_QWORD *)((char *)v27 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v23 + 16))(v22);
  v24 = *v18;
  v25 = *v22;
  v15[7] = v12;
  v15[8] = &off_1000AD790;
  v15[4] = v24;
  v15[15] = v13;
  v15[16] = &off_1000AB7D8;
  v15[17] = a6;
  v15[2] = 0;
  v15[3] = 0;
  v15[9] = a2;
  v15[10] = a3;
  v15[11] = a4;
  v15[12] = v25;
  sub_10001DA60(v27);
  sub_10001DA60(v30);
  return v15;
}

uint64_t sub_10007C310(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __n128 v17;
  uint64_t v18;
  void (*v19)(char *, uint64_t, uint64_t, __n128);
  void (*v20)(char *, uint64_t, uint64_t, __n128);
  uint64_t v21;
  __n128 v22;
  uint64_t (*v23)(char *, uint64_t, __n128);
  uint64_t v24;
  uint64_t (*v25)(char *, uint64_t, __n128);
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  __n128 v29;
  uint64_t v30;
  __n128 v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  __n128 v40;
  uint64_t v41;
  __n128 v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  __n128 v50;
  uint64_t v51;
  __n128 v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  __n128 v57;
  uint64_t v58;
  __n128 v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  __n128 v68;
  uint64_t v69;
  __n128 v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  __n128 v74;
  uint64_t v75;
  __n128 v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  __n128 v81;
  uint64_t v82;
  __n128 v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  __n128 v88;
  uint64_t v89;
  __n128 v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  __n128 v95;
  uint64_t v96;
  __n128 v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  __n128 v106;
  uint64_t v107;
  __n128 v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  __n128 v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  void (*v120)(char *, uint64_t, uint64_t);
  void (*v121)(char *, uint64_t);
  __n128 v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  __n128 v129;
  uint64_t v130;
  uint64_t v131;
  void (*v132)(char *, uint64_t, uint64_t, __n128);
  uint64_t v133;
  __n128 v134;
  uint64_t (*v135)(char *, uint64_t, __n128);
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  __n128 v140;
  uint64_t v141;
  __n128 v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  __n128 v147;
  uint64_t v148;
  __n128 v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  __n128 v154;
  uint64_t v155;
  __n128 v156;
  _QWORD v158[2];
  uint64_t v159;
  void (*v160)(char *, uint64_t, uint64_t, __n128);
  uint64_t (*v161)(char *, uint64_t, __n128);
  unsigned int v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  _QWORD v166[3];
  uint64_t v167;
  uint64_t v168;

  v2 = type metadata accessor for CallbackScope(0);
  v164 = *(_QWORD *)(v2 - 8);
  v165 = v2;
  __chkstk_darwin(v2);
  v4 = (char *)v158 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for Scope(0);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = __chkstk_darwin(v5);
  v9 = (char *)v158 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = ProxyContainer.public.getter(v7);
  v11 = sub_10001B520(&qword_1000BC9C8);
  v12 = RegistrationContainer.register<A>(_:name:factory:)(v11, 0, 0, sub_10007AAE8, 0, v11);
  swift_release(v12);
  swift_release(v10);
  v14 = ProxyContainer.public.getter(v13);
  v15 = sub_10001B520((uint64_t *)&unk_1000BC9D0);
  v16 = RegistrationContainer.register<A>(_:name:factory:)(v15, 0, 0, sub_10007ADEC, 0, v15);
  v17 = swift_release(v14);
  v18 = enum case for Scope.singleton(_:);
  v19 = *(void (**)(char *, uint64_t, uint64_t, __n128))(v6 + 104);
  v19(v9, enum case for Scope.singleton(_:), v5, v17);
  v20 = v19;
  v21 = Definition.inScope(_:)(v9);
  swift_release(v21);
  v22 = swift_release(v16);
  v23 = *(uint64_t (**)(char *, uint64_t, __n128))(v6 + 8);
  v24 = v23(v9, v5, v22);
  v25 = v23;
  v26 = ProxyContainer.public.getter(v24);
  v27 = sub_10001B520(&qword_1000BA098);
  v28 = RegistrationContainer.register<A>(_:name:factory:)(v27, 0, 0, sub_10007AF74, 0, v27);
  v29 = swift_release(v26);
  v20(v9, v18, v5, v29);
  v30 = Definition.inScope(_:)(v9);
  swift_release(v30);
  v31 = swift_release(v28);
  v32 = v25(v9, v5, v31);
  v33 = ProxyContainer.public.getter(v32);
  v34 = sub_10001B520((uint64_t *)&unk_1000BA1A0);
  v35 = RegistrationContainer.register<A>(_:name:factory:)(v34, 0xD000000000000011, 0x8000000100090CB0, sub_10007AFC4, 0, v34);
  swift_release(v35);
  swift_release(v33);
  v37 = ProxyContainer.public.getter(v36);
  v38 = sub_10002CC78(0, (unint64_t *)&unk_1000BA050, off_1000A9B60);
  v39 = RegistrationContainer.register<A>(_:name:factory:)(v38, 0, 0, sub_10007AFFC, 0, v38);
  v40 = swift_release(v37);
  v20(v9, v18, v5, v40);
  v41 = Definition.inScope(_:)(v9);
  swift_release(v41);
  v42 = swift_release(v39);
  v43 = v25(v9, v5, v42);
  v44 = ProxyContainer.public.getter(v43);
  v45 = RegistrationContainer.register<A>(_:name:factory:)(v34, 0x646165486E656553, 0xEC000000656E696CLL, sub_10007B020, 0, v34);
  swift_release(v45);
  swift_release(v44);
  v47 = ProxyContainer.public.getter(v46);
  v48 = sub_10001B520((uint64_t *)&unk_1000BA190);
  v49 = RegistrationContainer.register<A>(_:name:factory:)(v48, 0, 0, sub_10007B120, 0, v48);
  v50 = swift_release(v47);
  v20(v9, v18, v5, v50);
  v51 = Definition.inScope(_:)(v9);
  swift_release(v51);
  v52 = swift_release(v49);
  v53 = v25(v9, v5, v52);
  v54 = ProxyContainer.public.getter(v53);
  v55 = sub_10001B520(&qword_1000BC598);
  v56 = RegistrationContainer.register<A>(_:name:factory:)(v55, 0, 0, sub_10007B1A0, 0, v55);
  v57 = swift_release(v54);
  v20(v9, v18, v5, v57);
  v58 = Definition.inScope(_:)(v9);
  swift_release(v58);
  v59 = swift_release(v56);
  v60 = v25(v9, v5, v59);
  v61 = ProxyContainer.private.getter(v60);
  v62 = type metadata accessor for FeedPersonalizerFactory();
  v63 = RegistrationContainer.register<A>(_:name:factory:)(v62, 0, 0, sub_10007B33C, 0, v62);
  swift_release(v63);
  swift_release(v61);
  v65 = ProxyContainer.private.getter(v64);
  v66 = sub_10001B520(&qword_1000BC9E0);
  v67 = RegistrationContainer.register<A>(_:name:factory:)(v66, 0, 0, sub_10007B3D4, 0, v66);
  v68 = swift_release(v65);
  v20(v9, v18, v5, v68);
  v69 = Definition.inScope(_:)(v9);
  swift_release(v69);
  v70 = swift_release(v67);
  v71 = v25(v9, v5, v70);
  v72 = ProxyContainer.private.getter(v71);
  v163 = sub_10001B520(&qword_1000BC9E8);
  v73 = RegistrationContainer.register<A>(_:name:factory:)(v163, 0, 0, sub_10007B454, 0, v163);
  v74 = swift_release(v72);
  v20(v9, v18, v5, v74);
  v75 = Definition.inScope(_:)(v9);
  swift_release(v75);
  v76 = swift_release(v73);
  v77 = v25(v9, v5, v76);
  v78 = ProxyContainer.private.getter(v77);
  v79 = sub_10002CC78(0, &qword_1000BC9F0, FCTranslationManager_ptr);
  v80 = RegistrationContainer.register<A>(_:name:factory:)(v79, 0, 0, sub_10007B468, 0, v79);
  v81 = swift_release(v78);
  v20(v9, v18, v5, v81);
  v82 = Definition.inScope(_:)(v9);
  swift_release(v82);
  v83 = swift_release(v80);
  v84 = v25(v9, v5, v83);
  v85 = ProxyContainer.private.getter(v84);
  v86 = sub_10001B520(&qword_1000BC9F8);
  v87 = RegistrationContainer.register<A>(_:name:factory:)(v86, 0, 0, sub_10007B484, 0, v86);
  v88 = swift_release(v85);
  v20(v9, v18, v5, v88);
  v89 = Definition.inScope(_:)(v9);
  swift_release(v89);
  v90 = swift_release(v87);
  v91 = v25(v9, v5, v90);
  v92 = ProxyContainer.private.getter(v91);
  v93 = sub_10002CC78(0, &qword_1000BCA00, off_1000A9B68);
  v94 = RegistrationContainer.register<A>(_:name:factory:)(v93, 0x656D656761676E45, 0xEA0000000000746ELL, sub_10007B4A4, 0, v93);
  v95 = swift_release(v92);
  v162 = v18;
  v20(v9, v18, v5, v95);
  v160 = v20;
  v96 = Definition.inScope(_:)(v9);
  swift_release(v96);
  v97 = swift_release(v94);
  v98 = v25(v9, v5, v97);
  v161 = v25;
  v99 = ProxyContainer.private.getter(v98);
  v100 = sub_10002CC78(0, &qword_1000BCA08, &off_1000A9B70);
  v101 = RegistrationContainer.register<A>(_:name:factory:)(v100, 0, 0, sub_10007B550, 0, v100);
  swift_release(v101);
  swift_release(v99);
  v103 = ProxyContainer.private.getter(v102);
  v104 = sub_10002CC78(0, &qword_1000BCA10, off_1000A9B58);
  v105 = RegistrationContainer.register<A>(_:name:factory:)(v104, 0, 0, sub_10007B714, 0, v104);
  v106 = swift_release(v103);
  v159 = v5;
  v20(v9, v18, v5, v106);
  v107 = Definition.inScope(_:)(v9);
  swift_release(v107);
  v108 = swift_release(v105);
  v109 = v25(v9, v5, v108);
  v158[1] = a1;
  v110 = ProxyContainer.private.getter(v109);
  v111 = sub_10001B520(&qword_1000BCA18);
  v112 = RegistrationContainer.register<A>(_:name:factory:)(v111, 0, 0, sub_10007B7A0, 0, v111);
  swift_release(v112);
  v113 = swift_release(v110);
  ProxyContainer.callback.getter(v166, v113);
  v114 = v167;
  v115 = v168;
  sub_10001D9B4(v166, v167);
  v116 = sub_10001B520(&qword_1000BCA20);
  v117 = enum case for CallbackScope.any(_:);
  v118 = v164;
  v119 = v165;
  v120 = *(void (**)(char *, uint64_t, uint64_t))(v164 + 104);
  v120(v4, enum case for CallbackScope.any(_:), v165);
  dispatch thunk of CallbackRegistrationType.whenResolving<A>(_:scope:callback:)(v116, v4, sub_10007B7B4, 0, v116, v114, v115);
  v121 = *(void (**)(char *, uint64_t))(v118 + 8);
  v121(v4, v119);
  sub_10001DA60(v166);
  ProxyContainer.callback.getter(v166, v122);
  v123 = v167;
  v124 = v168;
  sub_10001D9B4(v166, v167);
  v120(v4, v117, v119);
  dispatch thunk of CallbackRegistrationType.whenResolving<A>(_:scope:callback:)(v163, v4, sub_10007B8D0, 0, v163, v123, v124);
  v121(v4, v119);
  v125 = sub_10001DA60(v166);
  v126 = ProxyContainer.private.getter(v125);
  v127 = sub_10002CC78(0, &qword_1000BCA28, FCNewsAvailabilityMonitor_ptr);
  v128 = RegistrationContainer.register<A>(_:name:factory:)(v127, 0, 0, sub_10007B9BC, 0, v127);
  v129 = swift_release(v126);
  v130 = v162;
  v131 = v159;
  v132 = v160;
  v160(v9, v162, v159, v129);
  v133 = Definition.inScope(_:)(v9);
  swift_release(v133);
  v134 = swift_release(v128);
  v135 = v161;
  v136 = v161(v9, v131, v134);
  v137 = ProxyContainer.private.getter(v136);
  v138 = sub_10001B520(&qword_1000BCA30);
  v139 = RegistrationContainer.register<A>(_:name:factory:)(v138, 0, 0, sub_10007B9E4, 0, v138);
  v140 = swift_release(v137);
  v132(v9, v130, v131, v140);
  v141 = Definition.inScope(_:)(v9);
  swift_release(v141);
  v142 = swift_release(v139);
  v143 = v135(v9, v131, v142);
  v144 = ProxyContainer.private.getter(v143);
  v145 = sub_10001B520(&qword_1000BCA38);
  v146 = RegistrationContainer.register<A>(_:name:factory:)(v145, 0, 0, sub_10007BCB8, 0, v145);
  v147 = swift_release(v144);
  v132(v9, v130, v131, v147);
  v148 = Definition.inScope(_:)(v9);
  swift_release(v148);
  v149 = swift_release(v146);
  v150 = v135(v9, v131, v149);
  v151 = ProxyContainer.private.getter(v150);
  v152 = sub_10002CC78(0, (unint64_t *)&unk_1000BCA40, off_1000A9B50);
  v153 = RegistrationContainer.register<A>(_:name:factory:)(v152, 0, 0, sub_10007BCF4, 0, v152);
  v154 = swift_release(v151);
  v132(v9, v130, v131, v154);
  v155 = Definition.inScope(_:)(v9);
  swift_release(v155);
  v156 = swift_release(v153);
  return v135(v9, v131, v156);
}

unint64_t sub_10007CDD0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000B9988;
  if (!qword_1000B9988)
  {
    v1 = type metadata accessor for URL(255);
    result = swift_getWitnessTable(&protocol conformance descriptor for URL, v1);
    atomic_store(result, (unint64_t *)&qword_1000B9988);
  }
  return result;
}

uint64_t sub_10007CE18(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10007CE28(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10007CE30()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 24, 7);
}

void sub_10007CE54(uint64_t a1, uint64_t a2, uint64_t a3, double a4)
{
  uint64_t v4;

  sub_10007B854(a1, a2, a3, *(void **)(v4 + 16), a4);
}

id TagIntent.init()()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for TagIntent();
  return objc_msgSendSuper2(&v2, "init");
}

uint64_t type metadata accessor for TagIntent()
{
  return objc_opt_self(TagIntent);
}

id TagIntent.init(coder:)(void *a1)
{
  void *v1;
  id v3;
  objc_super v5;

  v5.receiver = v1;
  v5.super_class = (Class)type metadata accessor for TagIntent();
  v3 = objc_msgSendSuper2(&v5, "initWithCoder:", a1);

  return v3;
}

id TodayIntent.__allocating_init(identifier:backingStore:)(uint64_t a1, uint64_t a2, void *a3)
{
  objc_class *v3;
  objc_class *v4;
  NSString v7;
  id v8;

  v4 = v3;
  if (a2)
  {
    v7 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(a2);
  }
  else
  {
    v7 = 0;
  }
  v8 = objc_msgSend(objc_allocWithZone(v4), "initWithIdentifier:backingStore:", v7, a3);

  return v8;
}

id TagIntent.init(identifier:backingStore:)(uint64_t a1, uint64_t a2, void *a3)
{
  void *v3;
  NSString v6;
  id v7;
  objc_super v9;

  if (a2)
  {
    v6 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(a2);
  }
  else
  {
    v6 = 0;
  }
  v9.receiver = v3;
  v9.super_class = (Class)type metadata accessor for TagIntent();
  v7 = objc_msgSendSuper2(&v9, "initWithIdentifier:backingStore:", v6, a3);

  return v7;
}

id TodayIntent.__allocating_init(domain:verb:parametersByName:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  objc_class *v5;
  NSString v9;
  NSString v10;
  NSDictionary v11;
  id v12;

  v9 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a2);
  v10 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a4);
  if (a5)
  {
    v11.super.isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(a5);
  }
  else
  {
    v11.super.isa = 0;
  }
  v12 = objc_msgSend(objc_allocWithZone(v5), "initWithDomain:verb:parametersByName:", v9, v10, v11.super.isa);

  return v12;
}

id TagIntent.init(domain:verb:parametersByName:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  void *v5;
  NSString v9;
  NSString v10;
  NSDictionary v11;
  id v12;
  objc_super v14;

  v9 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a2);
  v10 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a4);
  if (a5)
  {
    v11.super.isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(a5);
  }
  else
  {
    v11.super.isa = 0;
  }
  v14.receiver = v5;
  v14.super_class = (Class)type metadata accessor for TagIntent();
  v12 = objc_msgSendSuper2(&v14, "initWithDomain:verb:parametersByName:", v9, v10, v11.super.isa);

  return v12;
}

id TagIntent.__deallocating_deinit()
{
  return sub_10007DB0C(type metadata accessor for TagIntent);
}

unint64_t TodayIntentResponseCode.init(rawValue:)(unint64_t a1)
{
  return sub_10007DB3C(a1);
}

Swift::Int sub_10007D400()
{
  Swift::UInt *v0;
  Swift::UInt v1;
  _QWORD v3[9];

  v1 = *v0;
  Hasher.init(_seed:)(v3, 0);
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void sub_10007D444()
{
  Swift::UInt *v0;

  Hasher._combine(_:)(*v0);
}

Swift::Int sub_10007D46C(uint64_t a1)
{
  Swift::UInt *v1;
  Swift::UInt v2;
  _QWORD v4[9];

  v2 = *v1;
  Hasher.init(_seed:)(v4, a1);
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

unint64_t sub_10007D4AC@<X0>(unint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t result;
  char v4;

  result = sub_10007DB3C(*a1);
  *(_QWORD *)a2 = result;
  *(_BYTE *)(a2 + 8) = v4 & 1;
  return result;
}

uint64_t TagIntentResponse.code.getter()
{
  uint64_t v0;
  uint64_t v1;
  _BYTE v3[24];

  v1 = v0 + OBJC_IVAR___TagIntentResponse_code;
  swift_beginAccess(v0 + OBJC_IVAR___TagIntentResponse_code, v3, 0, 0);
  return *(_QWORD *)v1;
}

char *TagIntentResponse.__allocating_init(code:userActivity:)(uint64_t a1, void *a2)
{
  objc_class *v2;
  char *v5;
  char *v6;
  char *v7;
  char v9[24];

  v5 = (char *)objc_msgSend(objc_allocWithZone(v2), "init");
  v6 = &v5[OBJC_IVAR___TagIntentResponse_code];
  swift_beginAccess(&v5[OBJC_IVAR___TagIntentResponse_code], v9, 1, 0);
  *(_QWORD *)v6 = a1;
  v7 = v5;
  objc_msgSend(v7, "setUserActivity:", a2);

  return v7;
}

char *TagIntentResponse.init(code:userActivity:)(uint64_t a1, void *a2)
{
  void *v2;
  char *v5;
  char *v6;
  char *v7;
  char v9[24];

  v5 = (char *)objc_msgSend(v2, "init");
  v6 = &v5[OBJC_IVAR___TagIntentResponse_code];
  swift_beginAccess(&v5[OBJC_IVAR___TagIntentResponse_code], v9, 1, 0);
  *(_QWORD *)v6 = a1;
  v7 = v5;
  objc_msgSend(v7, "setUserActivity:", a2);

  return v7;
}

id TagIntentResponse.init()()
{
  char *v0;
  objc_super v2;

  *(_QWORD *)&v0[OBJC_IVAR___TagIntentResponse_code] = 0;
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for TagIntentResponse();
  return objc_msgSendSuper2(&v2, "init");
}

id TodayIntent.__allocating_init(coder:)(void *a1)
{
  objc_class *v1;
  id v3;

  v3 = objc_msgSend(objc_allocWithZone(v1), "initWithCoder:", a1);

  return v3;
}

id TagIntentResponse.init(coder:)(void *a1)
{
  char *v1;
  id v3;
  objc_super v5;

  *(_QWORD *)&v1[OBJC_IVAR___TagIntentResponse_code] = 0;
  v5.receiver = v1;
  v5.super_class = (Class)type metadata accessor for TagIntentResponse();
  v3 = objc_msgSendSuper2(&v5, "initWithCoder:", a1);

  return v3;
}

id TodayIntentResponse.__allocating_init(backingStore:)(void *a1)
{
  objc_class *v1;
  id v3;

  v3 = objc_msgSend(objc_allocWithZone(v1), "initWithBackingStore:", a1);

  return v3;
}

id TagIntentResponse.init(backingStore:)(void *a1)
{
  char *v1;
  id v3;
  objc_super v5;

  *(_QWORD *)&v1[OBJC_IVAR___TagIntentResponse_code] = 0;
  v5.receiver = v1;
  v5.super_class = (Class)type metadata accessor for TagIntentResponse();
  v3 = objc_msgSendSuper2(&v5, "initWithBackingStore:", a1);

  return v3;
}

id sub_10007D930(char *a1, uint64_t a2, uint64_t a3, SEL *a4)
{
  objc_super v7;

  *(_QWORD *)&a1[OBJC_IVAR___TagIntentResponse_code] = 0;
  v7.receiver = a1;
  v7.super_class = (Class)type metadata accessor for TagIntentResponse();
  return objc_msgSendSuper2(&v7, *a4, a3);
}

id TodayIntentResponse.__allocating_init(propertiesByName:)(uint64_t a1)
{
  objc_class *v1;
  NSDictionary v3;
  id v4;

  if (a1)
  {
    v3.super.isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(a1);
  }
  else
  {
    v3.super.isa = 0;
  }
  v4 = objc_msgSend(objc_allocWithZone(v1), "initWithPropertiesByName:", v3.super.isa);

  return v4;
}

id TagIntentResponse.init(propertiesByName:)(uint64_t a1)
{
  char *v1;
  NSDictionary v3;
  id v4;
  objc_super v6;

  *(_QWORD *)&v1[OBJC_IVAR___TagIntentResponse_code] = 0;
  if (a1)
  {
    v3.super.isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(a1);
  }
  else
  {
    v3.super.isa = 0;
  }
  v6.receiver = v1;
  v6.super_class = (Class)type metadata accessor for TagIntentResponse();
  v4 = objc_msgSendSuper2(&v6, "initWithPropertiesByName:", v3.super.isa);

  if (v4)
  return v4;
}

id TagIntentResponse.__deallocating_deinit()
{
  return sub_10007DB0C(type metadata accessor for TagIntentResponse);
}

id sub_10007DB0C(uint64_t (*a1)(void))
{
  void *v1;
  objc_super v3;

  v3.receiver = v1;
  v3.super_class = (Class)a1();
  return objc_msgSendSuper2(&v3, "dealloc");
}

unint64_t sub_10007DB3C(unint64_t result)
{
  if (result > 6)
    return 0;
  return result;
}

uint64_t type metadata accessor for TagIntentResponse()
{
  return objc_opt_self(TagIntentResponse);
}

unint64_t sub_10007DB70()
{
  unint64_t result;

  result = qword_1000BCA78;
  if (!qword_1000BCA78)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for TagIntentResponseCode, &type metadata for TagIntentResponseCode);
    atomic_store(result, (unint64_t *)&qword_1000BCA78);
  }
  return result;
}

uint64_t sub_10007DBB4@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v3;
  uint64_t result;
  _BYTE v5[24];

  v3 = (_QWORD *)(*a1 + OBJC_IVAR___TagIntentResponse_code);
  result = swift_beginAccess(v3, v5, 0, 0);
  *a2 = *v3;
  return result;
}

uint64_t sub_10007DC04(uint64_t *a1, _QWORD *a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t result;
  _BYTE v5[24];

  v2 = *a1;
  v3 = (_QWORD *)(*a2 + OBJC_IVAR___TagIntentResponse_code);
  result = swift_beginAccess(v3, v5, 1, 0);
  *v3 = v2;
  return result;
}

ValueMetadata *type metadata accessor for TagIntentResponseCode()
{
  return &type metadata for TagIntentResponseCode;
}

id TodayIntent.init()()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for TodayIntent();
  return objc_msgSendSuper2(&v2, "init");
}

uint64_t type metadata accessor for TodayIntent()
{
  return objc_opt_self(TodayIntent);
}

id TodayIntent.init(coder:)(void *a1)
{
  void *v1;
  id v3;
  objc_super v5;

  v5.receiver = v1;
  v5.super_class = (Class)type metadata accessor for TodayIntent();
  v3 = objc_msgSendSuper2(&v5, "initWithCoder:", a1);

  return v3;
}

id TodayIntent.init(identifier:backingStore:)(uint64_t a1, uint64_t a2, void *a3)
{
  void *v3;
  NSString v6;
  id v7;
  objc_super v9;

  if (a2)
  {
    v6 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(a2);
  }
  else
  {
    v6 = 0;
  }
  v9.receiver = v3;
  v9.super_class = (Class)type metadata accessor for TodayIntent();
  v7 = objc_msgSendSuper2(&v9, "initWithIdentifier:backingStore:", v6, a3);

  return v7;
}

id TodayIntent.init(domain:verb:parametersByName:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  void *v5;
  NSString v9;
  NSString v10;
  NSDictionary v11;
  id v12;
  objc_super v14;

  v9 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a2);
  v10 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a4);
  if (a5)
  {
    v11.super.isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(a5);
  }
  else
  {
    v11.super.isa = 0;
  }
  v14.receiver = v5;
  v14.super_class = (Class)type metadata accessor for TodayIntent();
  v12 = objc_msgSendSuper2(&v14, "initWithDomain:verb:parametersByName:", v9, v10, v11.super.isa);

  return v12;
}

id TodayIntent.__deallocating_deinit()
{
  return sub_10007DB0C(type metadata accessor for TodayIntent);
}

uint64_t TodayIntentResponse.code.getter()
{
  uint64_t v0;
  uint64_t v1;
  _BYTE v3[24];

  v1 = v0 + OBJC_IVAR___TodayIntentResponse_code;
  swift_beginAccess(v0 + OBJC_IVAR___TodayIntentResponse_code, v3, 0, 0);
  return *(_QWORD *)v1;
}

char *TodayIntentResponse.__allocating_init(code:userActivity:)(uint64_t a1, void *a2)
{
  objc_class *v2;
  char *v5;
  char *v6;
  char *v7;
  char v9[24];

  v5 = (char *)objc_msgSend(objc_allocWithZone(v2), "init");
  v6 = &v5[OBJC_IVAR___TodayIntentResponse_code];
  swift_beginAccess(&v5[OBJC_IVAR___TodayIntentResponse_code], v9, 1, 0);
  *(_QWORD *)v6 = a1;
  v7 = v5;
  objc_msgSend(v7, "setUserActivity:", a2);

  return v7;
}

char *TodayIntentResponse.init(code:userActivity:)(uint64_t a1, void *a2)
{
  void *v2;
  char *v5;
  char *v6;
  char *v7;
  char v9[24];

  v5 = (char *)objc_msgSend(v2, "init");
  v6 = &v5[OBJC_IVAR___TodayIntentResponse_code];
  swift_beginAccess(&v5[OBJC_IVAR___TodayIntentResponse_code], v9, 1, 0);
  *(_QWORD *)v6 = a1;
  v7 = v5;
  objc_msgSend(v7, "setUserActivity:", a2);

  return v7;
}

id TodayIntentResponse.init()()
{
  char *v0;
  objc_super v2;

  *(_QWORD *)&v0[OBJC_IVAR___TodayIntentResponse_code] = 0;
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for TodayIntentResponse();
  return objc_msgSendSuper2(&v2, "init");
}

id TodayIntentResponse.init(coder:)(void *a1)
{
  char *v1;
  id v3;
  objc_super v5;

  *(_QWORD *)&v1[OBJC_IVAR___TodayIntentResponse_code] = 0;
  v5.receiver = v1;
  v5.super_class = (Class)type metadata accessor for TodayIntentResponse();
  v3 = objc_msgSendSuper2(&v5, "initWithCoder:", a1);

  return v3;
}

id TodayIntentResponse.init(backingStore:)(void *a1)
{
  char *v1;
  id v3;
  objc_super v5;

  *(_QWORD *)&v1[OBJC_IVAR___TodayIntentResponse_code] = 0;
  v5.receiver = v1;
  v5.super_class = (Class)type metadata accessor for TodayIntentResponse();
  v3 = objc_msgSendSuper2(&v5, "initWithBackingStore:", a1);

  return v3;
}

id sub_10007E484(char *a1, uint64_t a2, uint64_t a3, SEL *a4)
{
  objc_super v7;

  *(_QWORD *)&a1[OBJC_IVAR___TodayIntentResponse_code] = 0;
  v7.receiver = a1;
  v7.super_class = (Class)type metadata accessor for TodayIntentResponse();
  return objc_msgSendSuper2(&v7, *a4, a3);
}

id TodayIntentResponse.init(propertiesByName:)(uint64_t a1)
{
  char *v1;
  NSDictionary v3;
  id v4;
  objc_super v6;

  *(_QWORD *)&v1[OBJC_IVAR___TodayIntentResponse_code] = 0;
  if (a1)
  {
    v3.super.isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(a1);
  }
  else
  {
    v3.super.isa = 0;
  }
  v6.receiver = v1;
  v6.super_class = (Class)type metadata accessor for TodayIntentResponse();
  v4 = objc_msgSendSuper2(&v6, "initWithPropertiesByName:", v3.super.isa);

  if (v4)
  return v4;
}

id TodayIntentResponse.__deallocating_deinit()
{
  return sub_10007DB0C(type metadata accessor for TodayIntentResponse);
}

uint64_t type metadata accessor for TodayIntentResponse()
{
  return objc_opt_self(TodayIntentResponse);
}

unint64_t sub_10007E604()
{
  unint64_t result;

  result = qword_1000BCAD8;
  if (!qword_1000BCAD8)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for TodayIntentResponseCode, &type metadata for TodayIntentResponseCode);
    atomic_store(result, (unint64_t *)&qword_1000BCAD8);
  }
  return result;
}

uint64_t sub_10007E648@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v3;
  uint64_t result;
  _BYTE v5[24];

  v3 = (_QWORD *)(*a1 + OBJC_IVAR___TodayIntentResponse_code);
  result = swift_beginAccess(v3, v5, 0, 0);
  *a2 = *v3;
  return result;
}

uint64_t sub_10007E698(uint64_t *a1, _QWORD *a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t result;
  _BYTE v5[24];

  v2 = *a1;
  v3 = (_QWORD *)(*a2 + OBJC_IVAR___TodayIntentResponse_code);
  result = swift_beginAccess(v3, v5, 1, 0);
  *v3 = v2;
  return result;
}

ValueMetadata *type metadata accessor for TodayIntentResponseCode()
{
  return &type metadata for TodayIntentResponseCode;
}

id Tag.__allocating_init(identifier:display:pronunciationHint:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  objc_class *v6;
  NSString v10;
  NSString v11;
  NSString v12;
  id v13;

  if (a2)
  {
    v10 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(a2);
  }
  else
  {
    v10 = 0;
  }
  v11 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a4);
  if (a6)
  {
    v12 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(a6);
  }
  else
  {
    v12 = 0;
  }
  v13 = objc_msgSend(objc_allocWithZone(v6), "initWithIdentifier:displayString:pronunciationHint:", v10, v11, v12);

  return v13;
}

id Tag.init(identifier:display:pronunciationHint:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  void *v6;
  NSString v10;
  NSString v11;
  NSString v12;
  id v13;
  objc_super v15;

  if (a2)
  {
    v10 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(a2);
  }
  else
  {
    v10 = 0;
  }
  v11 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a4);
  if (a6)
  {
    v12 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(a6);
  }
  else
  {
    v12 = 0;
  }
  v15.receiver = v6;
  v15.super_class = (Class)type metadata accessor for Tag();
  v13 = objc_msgSendSuper2(&v15, "initWithIdentifier:displayString:pronunciationHint:", v10, v11, v12);

  return v13;
}

uint64_t type metadata accessor for Tag()
{
  return objc_opt_self(Tag);
}

id Tag.init(coder:)(void *a1)
{
  void *v1;
  id v3;
  objc_super v5;

  v5.receiver = v1;
  v5.super_class = (Class)type metadata accessor for Tag();
  v3 = objc_msgSendSuper2(&v5, "initWithCoder:", a1);

  return v3;
}

id Tag.__deallocating_deinit()
{
  return sub_10007DB0C(type metadata accessor for Tag);
}

id static TagResolutionResult.success(with:)(uint64_t a1)
{
  uint64_t v1;
  objc_super v4;

  v4.receiver = (id)swift_getObjCClassFromMetadata(v1);
  v4.super_class = (Class)&OBJC_METACLASS___TagResolutionResult;
  return objc_msgSendSuper2(&v4, "successWithResolvedObject:", a1);
}

id static TagResolutionResult.disambiguation(with:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  void *ObjCClassFromMetadata;
  Class isa;
  id v5;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  objc_super v10;

  v1 = a1;
  if ((unint64_t)a1 >> 62)
  {
    if (a1 < 0)
      v7 = a1;
    else
      v7 = a1 & 0xFFFFFFFFFFFFFF8;
    v8 = sub_10007EB7C();
    swift_bridgeObjectRetain(v1);
    v9 = _bridgeCocoaArray<A>(_:)(v7, v8);
    swift_bridgeObjectRelease(v1);
    v1 = v9;
  }
  else
  {
    v2 = swift_bridgeObjectRetain(a1);
    dispatch thunk of __ContiguousArrayStorageBase.staticElementType.getter(v2);
    sub_10007EB7C();
  }
  ObjCClassFromMetadata = (void *)swift_getObjCClassFromMetadata();
  sub_10007EB7C();
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v1);
  v10.receiver = ObjCClassFromMetadata;
  v10.super_class = (Class)&OBJC_METACLASS___TagResolutionResult;
  v5 = objc_msgSendSuper2(&v10, "disambiguationWithObjectsToDisambiguate:", isa);

  return v5;
}

unint64_t sub_10007EB7C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000BCB58;
  if (!qword_1000BCB58)
  {
    v1 = objc_opt_self(INObject);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_1000BCB58);
  }
  return result;
}

id static TagResolutionResult.confirmationRequired(with:)(uint64_t a1)
{
  uint64_t v1;
  objc_super v4;

  v4.receiver = (id)swift_getObjCClassFromMetadata(v1);
  v4.super_class = (Class)&OBJC_METACLASS___TagResolutionResult;
  return objc_msgSendSuper2(&v4, "confirmationRequiredWithObjectToConfirm:", a1);
}

void static TagResolutionResult.success(with:)()
{
  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0, 0xE000000000000000, "NewsTag/Tag.swift", 17, 2, 50, 0);
  __break(1u);
}

void static TagResolutionResult.disambiguation(with:)()
{
  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0, 0xE000000000000000, "NewsTag/Tag.swift", 17, 2, 55, 0);
  __break(1u);
}

void static TagResolutionResult.confirmationRequired(with:)()
{
  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0, 0xE000000000000000, "NewsTag/Tag.swift", 17, 2, 60, 0);
  __break(1u);
}

id TagResolutionResult.__allocating_init(JSONDictionary:intent:)(uint64_t a1, void *a2)
{
  objc_class *v2;
  id v5;
  Class isa;
  id v7;

  v5 = objc_allocWithZone(v2);
  isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(a1);
  v7 = objc_msgSend(v5, "initWithJSONDictionary:forIntent:", isa, a2);

  return v7;
}

id TagResolutionResult.init(JSONDictionary:intent:)(uint64_t a1, void *a2)
{
  void *v2;
  Class isa;
  id v6;
  id v7;
  objc_super v9;

  isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(a1);
  v9.receiver = v2;
  v9.super_class = (Class)type metadata accessor for TagResolutionResult();
  v6 = objc_msgSendSuper2(&v9, "initWithJSONDictionary:forIntent:", isa, a2);

  v7 = v6;
  if (v7)

  return v7;
}

uint64_t type metadata accessor for TagResolutionResult()
{
  return objc_opt_self(TagResolutionResult);
}

id TagResolutionResult.__deallocating_deinit()
{
  return sub_10007DB0C(type metadata accessor for TagResolutionResult);
}

uint64_t type metadata accessor for ResourceBundleClass()
{
  return objc_opt_self(_TtC7NewsTagP33_B5E60A3023690C425E904FF3B3A470F019ResourceBundleClass);
}

uint64_t sub_10007F0A0()
{
  return sub_10007F238(1);
}

uint64_t sub_10007F0A8(int a1, int a2, int a3, int a4)
{
  BOOL v9;
  _DWORD v10[2];

  if (qword_1000C0728 == -1)
  {
    if (qword_1000C0730)
    {
LABEL_3:
      v10[0] = a1;
      v10[1] = (a2 << 16) | (a3 << 8) | a4;
      return _availability_version_check(1, v10);
    }
  }
  else
  {
    dispatch_once_f(&qword_1000C0728, 0, (dispatch_function_t)sub_10007F230);
    if (qword_1000C0730)
      goto LABEL_3;
  }
  if (qword_1000C0720 == -1)
  {
    v9 = dword_1000C0710 < a2;
    if (dword_1000C0710 > a2)
      return 1;
  }
  else
  {
    dispatch_once_f(&qword_1000C0720, 0, (dispatch_function_t)sub_10007F0A0);
    v9 = dword_1000C0710 < a2;
    if (dword_1000C0710 > a2)
      return 1;
  }
  if (v9)
    return 0;
  if (dword_1000C0714 > a3)
    return 1;
  return dword_1000C0714 >= a3 && dword_1000C0718 >= a4;
}

uint64_t sub_10007F230()
{
  return sub_10007F238(0);
}

uint64_t sub_10007F238(uint64_t result)
{
  void *v1;
  BOOL v2;
  unsigned __int8 *v4;
  uint64_t (*v5)(_QWORD);
  unint64_t v6;
  uint64_t (*v7)(_QWORD, uint64_t, _QWORD, _QWORD);
  uint64_t (*v8)(_QWORD, const char *, uint64_t, unsigned __int8 *);
  uint64_t (*v9)(uint64_t, uint64_t);
  uint64_t (*v10)(uint64_t);
  uint64_t (*v11)(void);
  FILE *v12;
  FILE *v13;
  uint64_t v14;
  size_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  FILE *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  FILE *v27;
  unsigned int (*v28)(uint64_t, char *, uint64_t, uint64_t);
  char v29[32];

  v1 = (void *)qword_1000C0730;
  if (qword_1000C0730)
    v2 = (_DWORD)result == 0;
  else
    v2 = 0;
  if (!v2)
  {
    if (&__availability_version_check)
    {
      qword_1000C0730 = (uint64_t)&__availability_version_check;
      v1 = &__availability_version_check;
    }
    if (!v1 || (_DWORD)result != 0)
    {
      result = (uint64_t)dlsym((void *)0xFFFFFFFFFFFFFFFELL, "kCFAllocatorNull");
      if (result)
      {
        v4 = *(unsigned __int8 **)result;
        result = (uint64_t)dlsym((void *)0xFFFFFFFFFFFFFFFELL, "CFDataCreateWithBytesNoCopy");
        if (result)
        {
          v5 = (uint64_t (*)(_QWORD))result;
          v6 = (unint64_t)dlsym((void *)0xFFFFFFFFFFFFFFFELL, "CFPropertyListCreateWithData");
          result = (uint64_t)dlsym((void *)0xFFFFFFFFFFFFFFFELL, "CFPropertyListCreateFromXMLData");
          if (v6 | result)
          {
            v7 = (uint64_t (*)(_QWORD, uint64_t, _QWORD, _QWORD))result;
            result = (uint64_t)dlsym((void *)0xFFFFFFFFFFFFFFFELL, "CFStringCreateWithCStringNoCopy");
            if (result)
            {
              v8 = (uint64_t (*)(_QWORD, const char *, uint64_t, unsigned __int8 *))result;
              result = (uint64_t)dlsym((void *)0xFFFFFFFFFFFFFFFELL, "CFDictionaryGetValue");
              if (result)
              {
                v9 = (uint64_t (*)(uint64_t, uint64_t))result;
                result = (uint64_t)dlsym((void *)0xFFFFFFFFFFFFFFFELL, "CFGetTypeID");
                if (result)
                {
                  v10 = (uint64_t (*)(uint64_t))result;
                  result = (uint64_t)dlsym((void *)0xFFFFFFFFFFFFFFFELL, "CFStringGetTypeID");
                  if (result)
                  {
                    v11 = (uint64_t (*)(void))result;
                    result = (uint64_t)dlsym((void *)0xFFFFFFFFFFFFFFFELL, "CFStringGetCString");
                    v28 = (unsigned int (*)(uint64_t, char *, uint64_t, uint64_t))result;
                    if (result)
                    {
                      result = (uint64_t)dlsym((void *)0xFFFFFFFFFFFFFFFELL, "CFRelease");
                      if (result)
                      {
                        v12 = (FILE *)result;
                        result = (uint64_t)fopen("/System/Library/CoreServices/SystemVersion.plist", "r");
                        if (result)
                        {
                          v13 = (FILE *)result;
                          v27 = v12;
                          fseek((FILE *)result, 0, 2);
                          v14 = ftell(v13);
                          if (v14 < 0)
                          {
                            v16 = 0;
                          }
                          else
                          {
                            v15 = v14;
                            rewind(v13);
                            v16 = malloc(v15);
                            if (v16)
                            {
                              v26 = v16;
                              if (fread(v16, 1uLL, v15, v13) == v15)
                              {
                                v17 = v5(0);
                                if (v17)
                                {
                                  v18 = v17;
                                  v19 = v13;
                                  if (v6)
                                    v20 = ((uint64_t (*)(_QWORD, uint64_t, _QWORD, _QWORD, _QWORD))v6)(0, v17, 0, 0, 0);
                                  else
                                    v20 = v7(0, v17, 0, 0);
                                  v21 = v20;
                                  if (v20)
                                  {
                                    v22 = v8(0, "ProductVersion", 1536, v4);
                                    if (v22)
                                    {
                                      v23 = v22;
                                      v24 = v9(v21, v22);
                                      ((void (*)(uint64_t))v27)(v23);
                                      if (v24)
                                      {
                                        v25 = v10(v24);
                                        if (v25 == v11())
                                        {
                                          if (v28(v24, v29, 32, 134217984))
                                            sscanf(v29, "%d.%d.%d", &dword_1000C0710, &dword_1000C0714, &dword_1000C0718);
                                        }
                                      }
                                    }
                                    ((void (*)(uint64_t))v27)(v21);
                                    v19 = v13;
                                  }
                                  ((void (*)(uint64_t))v27)(v18);
                                }
                                else
                                {
                                  v19 = v13;
                                }
                                v16 = v26;
                              }
                              else
                              {
                                v16 = v26;
                                v19 = v13;
                              }
                              goto LABEL_41;
                            }
                          }
                          v19 = v13;
LABEL_41:
                          free(v16);
                          return fclose(v19);
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  return result;
}

void sub_10007F568()
{
  id v0;
  int v1;
  int v2;
  int v3;
  int v4;
  int v5;
  uint64_t v6;

  v0 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("Invalid parameter not satisfying %s"));
  sub_10000C120();
  sub_10000C110();
  sub_10000C0F0();
  sub_10000C0E0((void *)&_mh_execute_header, &_os_log_default, v1, "*** Assertion failure (Identifier: catch-all) : %s %s:%d %{public}@", v2, v3, v4, v5, (uint64_t)"headline", v6, 2u);

  sub_10000C104();
}

void sub_10007F620()
{
  id v0;
  int v1;
  int v2;
  int v3;
  int v4;
  int v5;
  uint64_t v6;

  v0 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("Invalid parameter not satisfying %s"));
  sub_10000C120();
  sub_10000C110();
  sub_10000C0F0();
  sub_10000C0E0((void *)&_mh_execute_header, &_os_log_default, v1, "*** Assertion failure (Identifier: catch-all) : %s %s:%d %{public}@", v2, v3, v4, v5, (uint64_t)"trackableWidgetState", v6, 2u);

  sub_10000C104();
}

void sub_10007F6D8()
{
  id v0;
  int v1;
  int v2;
  int v3;
  int v4;
  int v5;
  uint64_t v6;

  v0 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("Invalid parameter not satisfying %s"));
  sub_10000C120();
  sub_10000C110();
  sub_10000C0F0();
  sub_10000C0E0((void *)&_mh_execute_header, &_os_log_default, v1, "*** Assertion failure (Identifier: catch-all) : %s %s:%d %{public}@", v2, v3, v4, v5, (uint64_t)"widgetEventTracker", v6, 2u);

  sub_10000C104();
}

void sub_10007F790()
{
  id v0;
  int v1;
  int v2;
  int v3;
  int v4;
  int v5;
  uint64_t v6;

  v0 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("Invalid parameter not satisfying %s"));
  sub_10000C120();
  sub_10000C110();
  sub_10000C0F0();
  sub_10000C0E0((void *)&_mh_execute_header, &_os_log_default, v1, "*** Assertion failure (Identifier: catch-all) : %s %s:%d %{public}@", v2, v3, v4, v5, (uint64_t)"assetHandlesByRemoteURL", v6, 2u);

  sub_10000C104();
}

void sub_10007F848()
{
  id v0;
  int v1;
  int v2;
  int v3;
  int v4;
  int v5;
  uint64_t v6;

  v0 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("Invalid parameter not satisfying %s"));
  sub_10000C120();
  sub_10000C110();
  sub_10000C0F0();
  sub_10000C0E0((void *)&_mh_execute_header, &_os_log_default, v1, "*** Assertion failure (Identifier: catch-all) : %s %s:%d %{public}@", v2, v3, v4, v5, (uint64_t)"trackableWidgetState", v6, 2u);

  sub_10000C104();
}

void sub_10007F900()
{
  id v0;
  int v1;
  int v2;
  int v3;
  int v4;
  int v5;
  uint64_t v6;

  v0 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("Invalid parameter not satisfying %s"));
  sub_10000C120();
  sub_10000C110();
  sub_10000C0F0();
  sub_10000C0E0((void *)&_mh_execute_header, &_os_log_default, v1, "*** Assertion failure (Identifier: catch-all) : %s %s:%d %{public}@", v2, v3, v4, v5, (uint64_t)"flintDocumentURLAssetHandlesByRemoteURL", v6, 2u);

  sub_10000C104();
}

void sub_10007F9B8()
{
  id v0;
  int v1;
  int v2;
  int v3;
  int v4;
  int v5;
  uint64_t v6;

  v0 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("Invalid parameter not satisfying %s"));
  sub_10000C120();
  sub_10000C110();
  sub_10000C0F0();
  sub_10000C0E0((void *)&_mh_execute_header, &_os_log_default, v1, "*** Assertion failure (Identifier: catch-all) : %s %s:%d %{public}@", v2, v3, v4, v5, (uint64_t)"JSONArray", v6, 2u);

  sub_10000C104();
}

void sub_10007FA70()
{
  id v0;
  int v1;
  int v2;
  int v3;
  int v4;
  int v5;
  uint64_t v6;

  v0 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("Invalid parameter not satisfying %s"));
  sub_10000C120();
  sub_10000C110();
  sub_10000C0F0();
  sub_10000C0E0((void *)&_mh_execute_header, &_os_log_default, v1, "*** Assertion failure (Identifier: catch-all) : %s %s:%d %{public}@", v2, v3, v4, v5, (uint64_t)"assetManager", v6, 2u);

  sub_10000C104();
}

void sub_10007FB28()
{
  id v0;
  int v1;
  int v2;
  int v3;
  int v4;
  int v5;
  uint64_t v6;

  v0 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("Invalid parameter not satisfying %s"));
  sub_10000C120();
  sub_10000C110();
  sub_10000C0F0();
  sub_10000C0E0((void *)&_mh_execute_header, &_os_log_default, v1, "*** Assertion failure (Identifier: catch-all) : %s %s:%d %{public}@", v2, v3, v4, v5, (uint64_t)"assetHandlesByRemoteURL", v6, 2u);

  sub_10000C104();
}

void sub_10007FBE0()
{
  id v0;
  int v1;
  int v2;
  int v3;
  int v4;
  int v5;
  uint64_t v6;

  v0 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("Invalid parameter not satisfying %s"));
  sub_10000C120();
  sub_10000C110();
  sub_10000C0F0();
  sub_10000C0E0((void *)&_mh_execute_header, &_os_log_default, v1, "*** Assertion failure (Identifier: catch-all) : %s %s:%d %{public}@", v2, v3, v4, v5, (uint64_t)"encodableElement", v6, 2u);

  sub_10000C104();
}

void sub_10007FC98()
{
  id v0;
  int v1;
  int v2;
  int v3;
  int v4;
  int v5;
  uint64_t v6;

  v0 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("Invalid parameter not satisfying %s"));
  sub_10000C120();
  sub_10000C110();
  sub_10000C0F0();
  sub_10000C0E0((void *)&_mh_execute_header, &_os_log_default, v1, "*** Assertion failure (Identifier: catch-all) : %s %s:%d %{public}@", v2, v3, v4, v5, (uint64_t)"JSONArray", v6, 2u);

  sub_10000C104();
}

void sub_10007FD50()
{
  id v0;
  int v1;
  int v2;
  int v3;
  int v4;
  int v5;
  uint64_t v6;

  v0 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("Invalid parameter not satisfying %s"));
  sub_10000C120();
  sub_10000C110();
  sub_10000C0F0();
  sub_10000C0E0((void *)&_mh_execute_header, &_os_log_default, v1, "*** Assertion failure (Identifier: catch-all) : %s %s:%d %{public}@", v2, v3, v4, v5, (uint64_t)"todaySourceIdentifier", v6, 2u);

  sub_10000C104();
}

void sub_10007FE08()
{
  id v0;
  int v1;
  int v2;
  int v3;
  int v4;
  int v5;
  uint64_t v6;

  v0 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("Invalid parameter not satisfying %s"));
  sub_10000C120();
  sub_10000C110();
  sub_10000C0F0();
  sub_10000C0E0((void *)&_mh_execute_header, &_os_log_default, v1, "*** Assertion failure (Identifier: catch-all) : %s %s:%d %{public}@", v2, v3, v4, v5, (uint64_t)"b", v6, 2u);

  sub_10000C104();
}

void sub_10007FEC0()
{
  id v0;
  int v1;
  int v2;
  int v3;
  int v4;
  int v5;
  uint64_t v6;

  v0 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("Invalid parameter not satisfying %s"));
  sub_10000C120();
  sub_10000C110();
  sub_10000C0F0();
  sub_10000C0E0((void *)&_mh_execute_header, &_os_log_default, v1, "*** Assertion failure (Identifier: catch-all) : %s %s:%d %{public}@", v2, v3, v4, v5, (uint64_t)"a", v6, 2u);

  sub_10000C104();
}

void sub_10007FF78()
{
  id v0;
  int v1;
  int v2;
  int v3;
  int v4;
  int v5;
  uint64_t v6;

  v0 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("expected nil value for '%s'"));
  sub_10000C120();
  sub_10000C110();
  sub_10000C0F0();
  sub_10000C0E0((void *)&_mh_execute_header, &_os_log_default, v1, "*** Assertion failure (Identifier: catch-all) : %s %s:%d %{public}@", v2, v3, v4, v5, (uint64_t)"self.startDate", v6, 2u);

  sub_10000C104();
}

void sub_100080030()
{
  id v0;
  int v1;
  int v2;
  int v3;
  int v4;
  int v5;
  uint64_t v6;

  v0 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("expected nil value for '%s'"));
  sub_10000C120();
  sub_10000C110();
  sub_10000C0F0();
  sub_10000C0E0((void *)&_mh_execute_header, &_os_log_default, v1, "*** Assertion failure (Identifier: catch-all) : %s %s:%d %{public}@", v2, v3, v4, v5, (uint64_t)"self.startState", v6, 2u);

  sub_10000C104();
}

void sub_1000800E8()
{
  id v0;
  uint64_t v1;
  int v2;
  const char *v3;
  __int16 v4;
  char *v5;
  __int16 v6;

  v0 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("start and end events must be balanced!"));
  v2 = 136315906;
  v3 = "-[FTWidgetLingerEventTracker trackWidgetLingerEventExtremity:atDate:withTodaySource:appConfigTreatmentID:widgetDi"
       "splayMode:appearanceType:]";
  v4 = 2080;
  v5 = "FTWidgetLingerEventTracker.m";
  v6 = 1024;
  sub_10000D700();
  sub_10000D6E8((void *)&_mh_execute_header, &_os_log_default, v1, "*** Assertion failure (Identifier: catch-all) : %s %s:%d %{public}@", (uint8_t *)&v2);

  sub_10000D6F4();
}

void sub_1000801A8()
{
  id v0;
  int v1;
  int v2;
  int v3;
  int v4;
  int v5;
  uint64_t v6;

  v0 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("invalid nil value for '%s'"));
  sub_10000C120();
  sub_10000C110();
  sub_10000C0F0();
  sub_10000C0E0((void *)&_mh_execute_header, &_os_log_default, v1, "*** Assertion failure (Identifier: catch-all) : %s %s:%d %{public}@", v2, v3, v4, v5, (uint64_t)"startDate", v6, 2u);

  sub_10000C104();
}

void sub_100080260()
{
  id v0;
  int v1;
  int v2;
  int v3;
  int v4;
  int v5;
  uint64_t v6;

  v0 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("invalid nil value for '%s'"));
  sub_10000C120();
  sub_10000C110();
  sub_10000C0F0();
  sub_10000C0E0((void *)&_mh_execute_header, &_os_log_default, v1, "*** Assertion failure (Identifier: catch-all) : %s %s:%d %{public}@", v2, v3, v4, v5, (uint64_t)"startState", v6, 2u);

  sub_10000C104();
}

void sub_100080318()
{
  id v0;
  uint64_t v1;
  int v2;
  const char *v3;
  __int16 v4;
  char *v5;
  __int16 v6;

  v0 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("start and end events must be balanced!"));
  v2 = 136315906;
  v3 = "-[FTWidgetLingerEventTracker trackWidgetLingerEventExtremity:atDate:withTodaySource:appConfigTreatmentID:widgetDi"
       "splayMode:appearanceType:]";
  v4 = 2080;
  v5 = "FTWidgetLingerEventTracker.m";
  v6 = 1024;
  sub_10000D700();
  sub_10000D6E8((void *)&_mh_execute_header, &_os_log_default, v1, "*** Assertion failure (Identifier: catch-all) : %s %s:%d %{public}@", (uint8_t *)&v2);

  sub_10000D6F4();
}

void sub_1000803D8()
{
  id v0;
  int v1;
  int v2;
  int v3;
  int v4;
  int v5;
  uint64_t v6;

  v0 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("Invalid parameter not satisfying %s"));
  sub_10000C120();
  sub_10000C110();
  sub_10000C0F0();
  sub_10000C0E0((void *)&_mh_execute_header, &_os_log_default, v1, "*** Assertion failure (Identifier: catch-all) : %s %s:%d %{public}@", v2, v3, v4, v5, (uint64_t)"todaySourceIdentifier", v6, 2u);

  sub_10000C104();
}

void sub_100080490()
{
  id v0;
  int v1;
  int v2;
  int v3;
  int v4;
  int v5;
  uint64_t v6;

  v0 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("Invalid parameter not satisfying %s"));
  sub_10000C120();
  sub_10000C110();
  sub_10000C0F0();
  sub_10000C0E0((void *)&_mh_execute_header, &_os_log_default, v1, "*** Assertion failure (Identifier: catch-all) : %s %s:%d %{public}@", v2, v3, v4, v5, (uint64_t)"date", v6, 2u);

  sub_10000C104();
}

void sub_100080548()
{
  id v0;
  int v1;
  int v2;
  int v3;
  int v4;
  int v5;
  uint64_t v6;

  v0 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("Invalid parameter not satisfying %s"));
  sub_10000C120();
  sub_10000C110();
  sub_10000C0F0();
  sub_10000C0E0((void *)&_mh_execute_header, &_os_log_default, v1, "*** Assertion failure (Identifier: catch-all) : %s %s:%d %{public}@", v2, v3, v4, v5, (uint64_t)"endTodaySourceIdentifier", v6, 2u);

  sub_10000C104();
}

void sub_100080600()
{
  id v0;
  int v1;
  int v2;
  int v3;
  int v4;
  int v5;
  uint64_t v6;

  v0 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("Invalid parameter not satisfying %s"));
  sub_10000C120();
  sub_10000C110();
  sub_10000C0F0();
  sub_10000C0E0((void *)&_mh_execute_header, &_os_log_default, v1, "*** Assertion failure (Identifier: catch-all) : %s %s:%d %{public}@", v2, v3, v4, v5, (uint64_t)"userIDProvider", v6, 2u);

  sub_10000C104();
}

void sub_1000806B8()
{
  id v0;
  int v1;
  int v2;
  int v3;
  int v4;
  int v5;
  uint64_t v6;

  v0 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("Invalid parameter not satisfying %s"));
  sub_10000C120();
  sub_10000C110();
  sub_10000C0F0();
  sub_10000C0E0((void *)&_mh_execute_header, &_os_log_default, v1, "*** Assertion failure (Identifier: catch-all) : %s %s:%d %{public}@", v2, v3, v4, v5, (uint64_t)"sessionManager", v6, 2u);

  sub_10000C104();
}

void sub_100080770()
{
  id v0;
  int v1;
  int v2;
  int v3;
  int v4;
  int v5;
  uint64_t v6;

  v0 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("Invalid parameter not satisfying %s"));
  sub_10000C120();
  sub_10000C110();
  sub_10000C0F0();
  sub_10000C0E0((void *)&_mh_execute_header, &_os_log_default, v1, "*** Assertion failure (Identifier: catch-all) : %s %s:%d %{public}@", v2, v3, v4, v5, (uint64_t)"trackableWidgetState", v6, 2u);

  sub_10000C104();
}

void sub_100080828()
{
  id v0;
  int v1;
  int v2;
  int v3;
  int v4;
  int v5;
  uint64_t v6;

  v0 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("Invalid parameter not satisfying %s"));
  sub_10000C120();
  sub_10000C110();
  sub_10000C0F0();
  sub_10000C0E0((void *)&_mh_execute_header, &_os_log_default, v1, "*** Assertion failure (Identifier: catch-all) : %s %s:%d %{public}@", v2, v3, v4, v5, (uint64_t)"changeDate", v6, 2u);

  sub_10000C104();
}

void sub_1000808E0()
{
  id v0;
  int v1;
  int v2;
  int v3;
  int v4;
  int v5;
  uint64_t v6;

  v0 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("invalid nil value for '%s'"));
  sub_10000C120();
  sub_10000C110();
  sub_10000C0F0();
  sub_10000C0E0((void *)&_mh_execute_header, &_os_log_default, v1, "*** Assertion failure (Identifier: catch-all) : %s %s:%d %{public}@", v2, v3, v4, v5, (uint64_t)"lastVisibleItemsChangeDate", v6, 2u);

  sub_10000C104();
}

void sub_100080998()
{
  id v0;
  int v1;
  int v2;
  int v3;
  int v4;
  int v5;
  uint64_t v6;

  v0 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("Invalid parameter not satisfying %s"));
  sub_10000C120();
  sub_10000C110();
  sub_10000C0F0();
  sub_10000C0E0((void *)&_mh_execute_header, &_os_log_default, v1, "*** Assertion failure (Identifier: catch-all) : %s %s:%d %{public}@", v2, v3, v4, v5, (uint64_t)"trackableWidgetState", v6, 2u);

  sub_10000C104();
}

void sub_100080A50()
{
  id v0;
  int v1;
  int v2;
  int v3;
  int v4;
  int v5;
  uint64_t v6;

  v0 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("Invalid parameter not satisfying %s"));
  sub_10000C120();
  sub_10000C110();
  sub_10000C0F0();
  sub_10000C0E0((void *)&_mh_execute_header, &_os_log_default, v1, "*** Assertion failure (Identifier: catch-all) : %s %s:%d %{public}@", v2, v3, v4, v5, (uint64_t)"engagement", v6, 2u);

  sub_10000C104();
}

void sub_100080B08()
{
  id v0;
  int v1;
  int v2;
  int v3;
  int v4;
  int v5;
  uint64_t v6;

  v0 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("Invalid parameter not satisfying %s"));
  sub_10000C120();
  sub_10000C110();
  sub_10000C0F0();
  sub_10000C0E0((void *)&_mh_execute_header, &_os_log_default, v1, "*** Assertion failure (Identifier: catch-all) : %s %s:%d %{public}@", v2, v3, v4, v5, (uint64_t)"date", v6, 2u);

  sub_10000C104();
}

void sub_100080BC0()
{
  id v0;
  int v1;
  int v2;
  int v3;
  int v4;
  int v5;
  uint64_t v6;

  v0 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("Invalid parameter not satisfying %s"));
  sub_10000C120();
  sub_10000C110();
  sub_10000C0F0();
  sub_10000C0E0((void *)&_mh_execute_header, &_os_log_default, v1, "*** Assertion failure (Identifier: catch-all) : %s %s:%d %{public}@", v2, v3, v4, v5, (uint64_t)"trackableWidgetState", v6, 2u);

  sub_10000C104();
}

void sub_100080C78()
{
  id v0;
  int v1;
  int v2;
  int v3;
  int v4;
  int v5;
  uint64_t v6;

  v0 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("Invalid parameter not satisfying %s"));
  sub_10000C120();
  sub_10000C110();
  sub_10000C0F0();
  sub_10000C0E0((void *)&_mh_execute_header, &_os_log_default, v1, "*** Assertion failure (Identifier: catch-all) : %s %s:%d %{public}@", v2, v3, v4, v5, (uint64_t)"event", v6, 2u);

  sub_10000C104();
}

void sub_100080D30()
{
  id v0;
  int v1;
  int v2;
  int v3;
  int v4;
  int v5;
  uint64_t v6;

  v0 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("Invalid parameter not satisfying %s"));
  sub_10000C0F0();
  sub_10000C0E0((void *)&_mh_execute_header, &_os_log_default, v1, "*** Assertion failure (Identifier: catch-all) : %s %s:%d %{public}@", v2, v3, v4, v5, (uint64_t)"section", v6, 2u);

  sub_10000C104();
}

void sub_100080DF8()
{
  id v0;
  int v1;
  int v2;
  int v3;
  int v4;
  int v5;
  uint64_t v6;

  v0 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("Invalid parameter not satisfying %s"));
  sub_10000C0F0();
  sub_10000C0E0((void *)&_mh_execute_header, &_os_log_default, v1, "*** Assertion failure (Identifier: catch-all) : %s %s:%d %{public}@", v2, v3, v4, v5, (uint64_t)"todaySource", v6, 2u);

  sub_10000C104();
}

void sub_100080EC0()
{
  id v0;
  int v1;
  int v2;
  int v3;
  int v4;
  int v5;
  uint64_t v6;

  v0 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("Invalid parameter not satisfying %s"));
  sub_10000C120();
  sub_10000C110();
  sub_10000C0F0();
  sub_10000C0E0((void *)&_mh_execute_header, &_os_log_default, v1, "*** Assertion failure (Identifier: catch-all) : %s %s:%d %{public}@", v2, v3, v4, v5, (uint64_t)"reporter", v6, 2u);

  sub_10000C104();
}

void sub_100080F78()
{
  id v0;
  int v1;
  int v2;
  int v3;
  int v4;
  int v5;
  uint64_t v6;

  v0 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("Invalid parameter not satisfying %s"));
  sub_10000C120();
  sub_10000C110();
  sub_10000C0F0();
  sub_10000C0E0((void *)&_mh_execute_header, &_os_log_default, v1, "*** Assertion failure (Identifier: catch-all) : %s %s:%d %{public}@", v2, v3, v4, v5, (uint64_t)"URL", v6, 2u);

  sub_10000C104();
}

void sub_100081030()
{
  id v0;
  int v1;
  int v2;
  int v3;
  int v4;
  int v5;
  uint64_t v6;

  v0 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("Invalid parameter not satisfying %s"));
  sub_10000C120();
  sub_10000C110();
  sub_10000C0F0();
  sub_10000C0E0((void *)&_mh_execute_header, &_os_log_default, v1, "*** Assertion failure (Identifier: catch-all) : %s %s:%d %{public}@", v2, v3, v4, v5, (uint64_t)"trackableWidgetState", v6, 2u);

  sub_10000C104();
}

void sub_1000810E8()
{
  id v0;
  int v1;
  int v2;
  int v3;
  int v4;
  int v5;
  uint64_t v6;

  v0 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("Invalid parameter not satisfying %s"));
  sub_10000C120();
  sub_10000C110();
  sub_10000C0F0();
  sub_10000C0E0((void *)&_mh_execute_header, &_os_log_default, v1, "*** Assertion failure (Identifier: catch-all) : %s %s:%d %{public}@", v2, v3, v4, v5, (uint64_t)"widgetEventTracker", v6, 2u);

  sub_10000C104();
}

void sub_1000811A0()
{
  id v0;
  int v1;
  int v2;
  int v3;
  int v4;
  int v5;
  uint64_t v6;

  v0 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("Invalid parameter not satisfying %s"));
  sub_10000C120();
  sub_10000C110();
  sub_10000C0F0();
  sub_10000C0E0((void *)&_mh_execute_header, &_os_log_default, v1, "*** Assertion failure (Identifier: catch-all) : %s %s:%d %{public}@", v2, v3, v4, v5, (uint64_t)"trackableWidgetState", v6, 2u);

  sub_10000C104();
}

void sub_100081258()
{
  id v0;
  int v1;
  const char *v2;
  __int16 v3;
  char *v4;
  __int16 v5;
  int v6;
  __int16 v7;
  id v8;

  v0 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("Case not implemented"));
  v1 = 136315906;
  v2 = "NSString *FTCampaignIdentifierForSourceIdentifier(NSString *__strong)";
  v3 = 2080;
  v4 = "FTConstants.m";
  v5 = 1024;
  v6 = 30;
  v7 = 2114;
  v8 = v0;
  _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "*** Assertion failure (Identifier: catch-all) : %s %s:%d %{public}@", (uint8_t *)&v1, 0x26u);

}

void sub_100081334()
{
  id v0;
  int v1;
  int v2;
  int v3;
  int v4;
  int v5;
  uint64_t v6;

  v0 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("Invalid parameter not satisfying %s"));
  sub_10000C0F0();
  sub_10000C0E0((void *)&_mh_execute_header, &_os_log_default, v1, "*** Assertion failure (Identifier: catch-all) : %s %s:%d %{public}@", v2, v3, v4, v5, (uint64_t)"todaySource", v6, 2u);

  sub_10000C104();
}

void sub_1000813FC()
{
  id v0;
  int v1;
  int v2;
  int v3;
  int v4;
  int v5;
  uint64_t v6;

  v0 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("Invalid parameter not satisfying %s"));
  sub_10000C0F0();
  sub_10000C0E0((void *)&_mh_execute_header, &_os_log_default, v1, "*** Assertion failure (Identifier: catch-all) : %s %s:%d %{public}@", v2, v3, v4, v5, (uint64_t)"appearanceDate", v6, 2u);

  sub_10000C104();
}

void sub_1000814C4()
{
  id v0;
  int v1;
  int v2;
  int v3;
  int v4;
  int v5;
  uint64_t v6;

  v0 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("Invalid parameter not satisfying %s"));
  sub_10000C120();
  sub_10000C110();
  sub_10000C0F0();
  sub_10000C0E0((void *)&_mh_execute_header, &_os_log_default, v1, "*** Assertion failure (Identifier: catch-all) : %s %s:%d %{public}@", v2, v3, v4, v5, (uint64_t)"assetHandlesByRemoteURL", v6, 2u);

  sub_10000C104();
}

void sub_10008157C()
{
  id v0;
  int v1;
  int v2;
  int v3;
  int v4;
  int v5;
  uint64_t v6;

  v0 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("Invalid parameter not satisfying %s"));
  sub_10000C120();
  sub_10000C110();
  sub_10000C0F0();
  sub_10000C0E0((void *)&_mh_execute_header, &_os_log_default, v1, "*** Assertion failure (Identifier: catch-all) : %s %s:%d %{public}@", v2, v3, v4, v5, (uint64_t)"sectionsByHeadline", v6, 2u);

  sub_10000C104();
}

void sub_100081634()
{
  id v0;
  int v1;
  int v2;
  int v3;
  int v4;
  int v5;
  uint64_t v6;

  v0 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("Invalid parameter not satisfying %s"));
  sub_10000C120();
  sub_10000C110();
  sub_10000C0F0();
  sub_10000C0E0((void *)&_mh_execute_header, &_os_log_default, v1, "*** Assertion failure (Identifier: catch-all) : %s %s:%d %{public}@", v2, v3, v4, v5, (uint64_t)"headlines", v6, 2u);

  sub_10000C104();
}

void sub_1000816EC()
{
  id v0;
  int v1;
  int v2;
  int v3;
  int v4;
  int v5;
  uint64_t v6;

  v0 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("invalid nil value for '%s'"));
  sub_10000C120();
  sub_10000C110();
  sub_10000C0F0();
  sub_10000C0E0((void *)&_mh_execute_header, &_os_log_default, v1, "*** Assertion failure (Identifier: catch-all) : %s %s:%d %{public}@", v2, v3, v4, v5, (uint64_t)"NewsArticleID", v6, 2u);

  sub_10000C104();
}

void sub_1000817A4()
{
  id v0;
  int v1;
  int v2;
  int v3;
  int v4;
  int v5;
  uint64_t v6;

  v0 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("Invalid parameter not satisfying %s"));
  sub_10000C0F0();
  sub_10000C0E0((void *)&_mh_execute_header, &_os_log_default, v1, "*** Assertion failure (Identifier: catch-all) : %s %s:%d %{public}@", v2, v3, v4, v5, (uint64_t)"unvalidatedValue", v6, 2u);

  sub_10000C104();
}

void sub_10008186C()
{
  id v0;
  int v1;
  int v2;
  int v3;
  int v4;
  int v5;
  uint64_t v6;

  v0 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("Invalid parameter not satisfying %s"));
  sub_10000C0F0();
  sub_10000C0E0((void *)&_mh_execute_header, &_os_log_default, v1, "*** Assertion failure (Identifier: catch-all) : %s %s:%d %{public}@", v2, v3, v4, v5, (uint64_t)"name", v6, 2u);

  sub_10000C104();
}

void sub_100081934()
{
  id v0;
  uint8_t buf[4];
  const char *v2;
  __int16 v3;
  char *v4;
  __int16 v5;
  int v6;
  __int16 v7;
  id v8;

  v0 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("Invalid parameter not satisfying %s"), "userIDProvider");
  *(_DWORD *)buf = 136315906;
  v2 = "-[FTNewsAnalyticsWidgetEventTracker initWithUserIDProvider:]";
  v3 = 2080;
  v4 = "FTNewsAnalyticsWidgetEventTracker.m";
  v5 = 1024;
  v6 = 41;
  v7 = 2114;
  v8 = v0;
  _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "*** Assertion failure (Identifier: catch-all) : %s %s:%d %{public}@", buf, 0x26u);

}

void sub_100081A1C()
{
  id v0;
  int v1;
  int v2;
  int v3;
  int v4;
  int v5;
  uint64_t v6;

  v0 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("Invalid parameter not satisfying %s"));
  sub_10000C0F0();
  sub_10000C0E0((void *)&_mh_execute_header, &_os_log_default, v1, "*** Assertion failure (Identifier: catch-all) : %s %s:%d %{public}@", v2, v3, v4, v5, (uint64_t)"eventTrackers", v6, 2u);

  sub_10000C104();
}

void sub_100081AE4()
{
  id v0;
  int v1;
  int v2;
  int v3;
  int v4;
  int v5;
  uint64_t v6;

  v0 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("Invalid parameter not satisfying %s"));
  sub_10000C0F0();
  sub_10000C0E0((void *)&_mh_execute_header, &_os_log_default, v1, "*** Assertion failure (Identifier: catch-all) : %s %s:%d %{public}@", v2, v3, v4, v5, (uint64_t)"trackableWidgetState", v6, 2u);

  sub_10000C104();
}

void sub_100081BAC()
{
  id v0;
  int v1;
  int v2;
  int v3;
  int v4;
  int v5;
  uint64_t v6;

  v0 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("Invalid parameter not satisfying %s"));
  sub_10000C120();
  sub_10000C110();
  sub_10000C0F0();
  sub_10000C0E0((void *)&_mh_execute_header, &_os_log_default, v1, "*** Assertion failure (Identifier: catch-all) : %s %s:%d %{public}@", v2, v3, v4, v5, (uint64_t)"sharedDirectoryFileURL", v6, 2u);

  sub_10000C104();
}

void sub_100081C64()
{
  id v0;
  int v1;
  int v2;
  int v3;
  int v4;
  int v5;
  uint64_t v6;

  v0 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("Invalid parameter not satisfying %s"));
  sub_10000C120();
  sub_10000C110();
  sub_10000C0F0();
  sub_10000C0E0((void *)&_mh_execute_header, &_os_log_default, v1, "*** Assertion failure (Identifier: catch-all) : %s %s:%d %{public}@", v2, v3, v4, v5, (uint64_t)"referralItem", v6, 2u);

  sub_10000C104();
}

void sub_100081D1C()
{
  id v0;
  int v1;
  int v2;
  int v3;
  int v4;
  int v5;
  uint64_t v6;

  v0 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("invalid nil value for '%s'"));
  sub_10000C120();
  sub_10000C110();
  sub_10000C0F0();
  sub_10000C0E0((void *)&_mh_execute_header, &_os_log_default, v1, "*** Assertion failure (Identifier: catch-all) : %s %s:%d %{public}@", v2, v3, v4, v5, (uint64_t)"sourceFilePath", v6, 2u);

  sub_10000C104();
}

void sub_100081DD4()
{
  id v0;
  int v1;
  int v2;
  int v3;
  int v4;
  int v5;
  uint64_t v6;

  v0 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("Invalid parameter not satisfying %s"));
  sub_10000C120();
  sub_10000C110();
  sub_10000C0F0();
  sub_10000C0E0((void *)&_mh_execute_header, &_os_log_default, v1, "*** Assertion failure (Identifier: catch-all) : %s %s:%d %{public}@", v2, v3, v4, v5, (uint64_t)"assetManager", v6, 2u);

  sub_10000C104();
}

void sub_100081E8C()
{
  id v0;
  int v1;
  int v2;
  int v3;
  int v4;
  int v5;
  uint64_t v6;

  v0 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("Invalid parameter not satisfying %s"));
  sub_10000C120();
  sub_10000C110();
  sub_10000C0F0();
  sub_10000C0E0((void *)&_mh_execute_header, &_os_log_default, v1, "*** Assertion failure (Identifier: catch-all) : %s %s:%d %{public}@", v2, v3, v4, v5, (uint64_t)"queryValue", v6, 2u);

  sub_10000C104();
}

void sub_100081F44()
{
  id v0;
  int v1;
  int v2;
  int v3;
  int v4;
  int v5;
  uint64_t v6;

  v0 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("Invalid parameter not satisfying %s"));
  sub_10000C120();
  sub_10000C110();
  sub_10000C0F0();
  sub_10000C0E0((void *)&_mh_execute_header, &_os_log_default, v1, "*** Assertion failure (Identifier: catch-all) : %s %s:%d %{public}@", v2, v3, v4, v5, (uint64_t)"itemClass", v6, 2u);

  sub_10000C104();
}

void sub_100081FFC()
{
  id v0;
  int v1;
  int v2;
  int v3;
  int v4;
  int v5;
  uint64_t v6;

  v0 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("Invalid parameter not satisfying %s"));
  sub_10000C0F0();
  sub_10000C0E0((void *)&_mh_execute_header, &_os_log_default, v1, "*** Assertion failure (Identifier: catch-all) : %s %s:%d %{public}@", v2, v3, v4, v5, (uint64_t)"availabilityMonitor", v6, 2u);

  sub_10000C104();
}

void sub_1000820C4()
{
  id v0;
  int v1;
  int v2;
  int v3;
  int v4;
  int v5;
  uint64_t v6;

  v0 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("Invalid parameter not satisfying %s"));
  sub_10000C0F0();
  sub_10000C0E0((void *)&_mh_execute_header, &_os_log_default, v1, "*** Assertion failure (Identifier: catch-all) : %s %s:%d %{public}@", v2, v3, v4, v5, (uint64_t)"engagementDescriptor", v6, 2u);

  sub_10000C104();
}

void sub_10008218C(uint64_t a1, id *a2, NSObject *a3)
{
  void *v5;
  void *v6;
  int v7;
  void *v8;
  __int16 v9;
  void *v10;

  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "identifier"));
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*a2, "downloadError"));
  v7 = 138543618;
  v8 = v5;
  v9 = 2114;
  v10 = v6;
  _os_log_error_impl((void *)&_mh_execute_header, a3, OS_LOG_TYPE_ERROR, "failed to download JSON for headline %{public}@ with error %{public}@", (uint8_t *)&v7, 0x16u);

}

void sub_100082250()
{
  id v0;
  int v1;
  int v2;
  int v3;
  int v4;
  int v5;
  uint64_t v6;

  v0 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("Invalid parameter not satisfying %s"));
  sub_10000C0F0();
  sub_10000C0E0((void *)&_mh_execute_header, &_os_log_default, v1, "*** Assertion failure (Identifier: catch-all) : %s %s:%d %{public}@", v2, v3, v4, v5, (uint64_t)"updateFetchDuration >= 0", v6, 2u);

  sub_10000C104();
}

void sub_100082318()
{
  id v0;
  int v1;
  int v2;
  int v3;
  int v4;
  int v5;
  uint64_t v6;

  v0 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("Invalid parameter not satisfying %s"));
  sub_10000C0F0();
  sub_10000C0E0((void *)&_mh_execute_header, &_os_log_default, v1, "*** Assertion failure (Identifier: catch-all) : %s %s:%d %{public}@", v2, v3, v4, v5, (uint64_t)"todaySourceIdentifier", v6, 2u);

  sub_10000C104();
}

void sub_1000823E0()
{
  id v0;
  int v1;
  int v2;
  int v3;
  int v4;
  int v5;
  uint64_t v6;

  v0 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("Invalid parameter not satisfying %s"));
  sub_10000C120();
  sub_10000C110();
  sub_10000C0F0();
  sub_10000C0E0((void *)&_mh_execute_header, &_os_log_default, v1, "*** Assertion failure (Identifier: catch-all) : %s %s:%d %{public}@", v2, v3, v4, v5, (uint64_t)"predicate", v6, 2u);

  sub_10000C104();
}

void sub_100082498()
{
  id v0;
  int v1;
  int v2;
  int v3;
  int v4;
  int v5;
  uint64_t v6;

  v0 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("Invalid parameter not satisfying %s"));
  sub_10000C120();
  sub_10000C110();
  sub_10000C0F0();
  sub_10000C0E0((void *)&_mh_execute_header, &_os_log_default, v1, "*** Assertion failure (Identifier: catch-all) : %s %s:%d %{public}@", v2, v3, v4, v5, (uint64_t)"widgetEventTracker", v6, 2u);

  sub_10000C104();
}

void sub_100082550()
{
  id v0;
  int v1;
  int v2;
  int v3;
  int v4;
  int v5;
  uint64_t v6;

  v0 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("Invalid parameter not satisfying %s"));
  sub_10000C120();
  sub_10000C110();
  sub_10000C0F0();
  sub_10000C0E0((void *)&_mh_execute_header, &_os_log_default, v1, "*** Assertion failure (Identifier: catch-all) : %s %s:%d %{public}@", v2, v3, v4, v5, (uint64_t)"trackableWidgetState", v6, 2u);

  sub_10000C104();
}

void sub_100082608()
{
  id v0;
  int v1;
  int v2;
  int v3;
  int v4;
  int v5;
  uint64_t v6;

  v0 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("Invalid parameter not satisfying %s"));
  sub_10000C120();
  sub_10000C110();
  sub_10000C0F0();
  sub_10000C0E0((void *)&_mh_execute_header, &_os_log_default, v1, "*** Assertion failure (Identifier: catch-all) : %s %s:%d %{public}@", v2, v3, v4, v5, (uint64_t)"date", v6, 2u);

  sub_10000C104();
}

void sub_1000826C0()
{
  id v0;
  int v1;
  int v2;
  int v3;
  int v4;
  int v5;
  uint64_t v6;

  v0 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("Invalid parameter not satisfying %s"));
  sub_10000C120();
  sub_10000C110();
  sub_10000C0F0();
  sub_10000C0E0((void *)&_mh_execute_header, &_os_log_default, v1, "*** Assertion failure (Identifier: catch-all) : %s %s:%d %{public}@", v2, v3, v4, v5, (uint64_t)"trackableWidgetState", v6, 2u);

  sub_10000C104();
}

void sub_100082778()
{
  id v0;
  int v1;
  int v2;
  int v3;
  int v4;
  int v5;
  uint64_t v6;

  v0 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("Invalid parameter not satisfying %s"));
  sub_10000C120();
  sub_10000C110();
  sub_10000C0F0();
  sub_10000C0E0((void *)&_mh_execute_header, &_os_log_default, v1, "*** Assertion failure (Identifier: catch-all) : %s %s:%d %{public}@", v2, v3, v4, v5, (uint64_t)"fetchInfo", v6, 2u);

  sub_10000C104();
}

void sub_100082830()
{
  id v0;
  int v1;
  int v2;
  int v3;
  int v4;
  int v5;
  uint64_t v6;

  v0 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("Invalid parameter not satisfying %s"));
  sub_10000C0F0();
  sub_10000C0E0((void *)&_mh_execute_header, &_os_log_default, v1, "*** Assertion failure (Identifier: catch-all) : %s %s:%d %{public}@", v2, v3, v4, v5, (uint64_t)"otherQueryItems", v6, 2u);

  sub_10000C104();
}

void sub_1000828F8()
{
  id v0;
  int v1;
  int v2;
  int v3;
  int v4;
  int v5;
  uint64_t v6;

  v0 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("Invalid parameter not satisfying %s"));
  sub_10000C0F0();
  sub_10000C0E0((void *)&_mh_execute_header, &_os_log_default, v1, "*** Assertion failure (Identifier: catch-all) : %s %s:%d %{public}@", v2, v3, v4, v5, (uint64_t)"sourceIdentifier", v6, 2u);

  sub_10000C104();
}

void sub_1000829C0()
{
  id v0;
  int v1;
  int v2;
  int v3;
  int v4;
  int v5;
  uint64_t v6;

  v0 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("Invalid parameter not satisfying %s"));
  sub_10000C120();
  sub_10000C110();
  sub_10000C0F0();
  sub_10000C0E0((void *)&_mh_execute_header, &_os_log_default, v1, "*** Assertion failure (Identifier: catch-all) : %s %s:%d %{public}@", v2, v3, v4, v5, (uint64_t)"trackableWidgetState", v6, 2u);

  sub_10000C104();
}

void sub_100082A78()
{
  id v0;
  int v1;
  int v2;
  int v3;
  int v4;
  int v5;
  uint64_t v6;

  v0 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("Invalid parameter not satisfying %s"));
  sub_10000C120();
  sub_10000C110();
  sub_10000C0F0();
  sub_10000C0E0((void *)&_mh_execute_header, &_os_log_default, v1, "*** Assertion failure (Identifier: catch-all) : %s %s:%d %{public}@", v2, v3, v4, v5, (uint64_t)"section", v6, 2u);

  sub_10000C104();
}

void sub_100082B30()
{
  id v0;
  int v1;
  int v2;
  int v3;
  int v4;
  int v5;
  uint64_t v6;

  v0 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("Invalid parameter not satisfying %s"));
  sub_10000C120();
  sub_10000C110();
  sub_10000C0F0();
  sub_10000C0E0((void *)&_mh_execute_header, &_os_log_default, v1, "*** Assertion failure (Identifier: catch-all) : %s %s:%d %{public}@", v2, v3, v4, v5, (uint64_t)"headline", v6, 2u);

  sub_10000C104();
}

void sub_100082BE8()
{
  id v0;
  int v1;
  int v2;
  int v3;
  int v4;
  int v5;
  uint64_t v6;

  v0 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("Invalid parameter not satisfying %s"));
  sub_10000C120();
  sub_10000C110();
  sub_10000C0F0();
  sub_10000C0E0((void *)&_mh_execute_header, &_os_log_default, v1, "*** Assertion failure (Identifier: catch-all) : %s %s:%d %{public}@", v2, v3, v4, v5, (uint64_t)"date", v6, 2u);

  sub_10000C104();
}

void sub_100082CA0()
{
  id v0;
  uint8_t buf[4];
  const char *v2;
  __int16 v3;
  char *v4;
  __int16 v5;
  int v6;
  __int16 v7;
  id v8;

  v0 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("Invalid parameter not satisfying %s"), "trackableWidgetState");
  *(_DWORD *)buf = 136315906;
  v2 = "-[FTProactiveWidgetEventTracker widgetDidAppearAtDate:withTrackableWidgetState:]";
  v3 = 2080;
  v4 = "FTProactiveWidgetEventTracker.m";
  v5 = 1024;
  v6 = 59;
  v7 = 2114;
  v8 = v0;
  _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "*** Assertion failure (Identifier: catch-all) : %s %s:%d %{public}@", buf, 0x26u);

}

void sub_100082D88()
{
  id v0;
  int v1;
  int v2;
  int v3;
  int v4;
  int v5;
  uint64_t v6;

  v0 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("Invalid parameter not satisfying %s"));
  sub_10000C120();
  sub_10000C110();
  sub_10000C0F0();
  sub_10000C0E0((void *)&_mh_execute_header, &_os_log_default, v1, "*** Assertion failure (Identifier: catch-all) : %s %s:%d %{public}@", v2, v3, v4, v5, (uint64_t)"documentsDirectoryFileURL", v6, 2u);

  sub_10000C104();
}

void sub_100082E40()
{
  id v0;
  int v1;
  int v2;
  int v3;
  int v4;
  int v5;
  uint64_t v6;

  v0 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("Invalid parameter not satisfying %s"));
  sub_10000C120();
  sub_10000C110();
  sub_10000C0F0();
  sub_10000C0E0((void *)&_mh_execute_header, &_os_log_default, v1, "*** Assertion failure (Identifier: catch-all) : %s %s:%d %{public}@", v2, v3, v4, v5, (uint64_t)"todayEventTracker", v6, 2u);

  sub_10000C104();
}

void sub_100082EF8()
{
  id v0;
  int v1;
  int v2;
  int v3;
  int v4;
  int v5;
  uint64_t v6;

  v0 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("invalid nil value for '%s'"));
  sub_10000C120();
  sub_10000C110();
  sub_10000C0F0();
  sub_10000C0E0((void *)&_mh_execute_header, &_os_log_default, v1, "*** Assertion failure (Identifier: catch-all) : %s %s:%d %{public}@", v2, v3, v4, v5, (uint64_t)"visibleHeadlinesAppearanceDate", v6, 2u);

  sub_10000C104();
}

void sub_100082FB0()
{
  id v0;
  int v1;
  int v2;
  int v3;
  int v4;
  int v5;
  uint64_t v6;

  v0 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("invalid nil value for '%s'"));
  sub_10000C120();
  sub_10000C110();
  sub_10000C0F0();
  sub_10000C0E0((void *)&_mh_execute_header, &_os_log_default, v1, "*** Assertion failure (Identifier: catch-all) : %s %s:%d %{public}@", v2, v3, v4, v5, (uint64_t)"visibleHeadlines", v6, 2u);

  sub_10000C104();
}

void sub_100083068()
{
  id v0;
  int v1;
  int v2;
  int v3;
  int v4;
  int v5;
  uint64_t v6;

  v0 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("Invalid parameter not satisfying %s"));
  sub_10000C120();
  sub_10000C110();
  sub_10000C0F0();
  sub_10000C0E0((void *)&_mh_execute_header, &_os_log_default, v1, "*** Assertion failure (Identifier: catch-all) : %s %s:%d %{public}@", v2, v3, v4, v5, (uint64_t)"date", v6, 2u);

  sub_10000C104();
}

void sub_100083120()
{
  id v0;
  int v1;
  int v2;
  int v3;
  int v4;
  int v5;
  uint64_t v6;

  v0 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("Invalid parameter not satisfying %s"));
  sub_10000C120();
  sub_10000C110();
  sub_10000C0F0();
  sub_10000C0E0((void *)&_mh_execute_header, &_os_log_default, v1, "*** Assertion failure (Identifier: catch-all) : %s %s:%d %{public}@", v2, v3, v4, v5, (uint64_t)"visibleHeadlines", v6, 2u);

  sub_10000C104();
}

void sub_1000831D8()
{
  id v0;
  int v1;
  int v2;
  int v3;
  int v4;
  int v5;
  uint64_t v6;

  v0 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", CFSTR("invalid nil value for '%s'"));
  sub_10000C120();
  sub_10000C110();
  sub_10000C0F0();
  sub_10000C0E0((void *)&_mh_execute_header, &_os_log_default, v1, "*** Assertion failure (Identifier: catch-all) : %s %s:%d %{public}@", v2, v3, v4, v5, (uint64_t)"contentContext", v6, 2u);

  sub_10000C104();
}

uint64_t _s7NewsTag16TelemetryManagerC13lastFlushDate33_4E4017AC2BCC1D1AC48C0D84A0E547E9LL10Foundation0G0Vvpfi_0()
{
  return static Date.distantPast.getter();
}

void operator delete(void *__p)
{
  while (1)
    ;
}

void *__cdecl operator new(size_t __sz)
{
  while (1)
    ;
}

id objc_msgSend_CGColor(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "CGColor");
}

id objc_msgSend_CGImage(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "CGImage");
}

id objc_msgSend_CTRByPersonalizationFeatureID(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "CTRByPersonalizationFeatureID");
}

id objc_msgSend_JSONArray(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "JSONArray");
}

id objc_msgSend_NewsURL(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "NewsURL");
}

id objc_msgSend_URL(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "URL");
}

id objc_msgSend_URLByAppendingPathComponent_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "URLByAppendingPathComponent:");
}

id objc_msgSend_URLByAppendingPathComponent_isDirectory_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "URLByAppendingPathComponent:isDirectory:");
}

id objc_msgSend_URLWithString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "URLWithString:");
}

id objc_msgSend_UUID(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "UUID");
}

id objc_msgSend_UUIDString(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "UUIDString");
}

id objc_msgSend__annotateEvent_withTrackableWidgetState_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_annotateEvent:withTrackableWidgetState:");
}

id objc_msgSend__eventTrackersRespondingToSelector_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_eventTrackersRespondingToSelector:");
}

id objc_msgSend__getHSBA_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_getHSBA:");
}

id objc_msgSend__getRGBA_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_getRGBA:");
}

id objc_msgSend__isSimilarToColor_withinPercentage_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_isSimilarToColor:withinPercentage:");
}

id objc_msgSend__luminance(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_luminance");
}

id objc_msgSend__newWidgetEngagementWithTrackableWidgetState_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_newWidgetEngagementWithTrackableWidgetState:");
}

id objc_msgSend__pbDisplayModeWithDisplayMode_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_pbDisplayModeWithDisplayMode:");
}

id objc_msgSend__pbStackLocationWithStackLocation_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_pbStackLocationWithStackLocation:");
}

id objc_msgSend__pbWidgetTypeWithStackKind_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_pbWidgetTypeWithStackKind:");
}

id objc_msgSend__registerOnceVisibleHeadlines_withLastSeenDate_minimumNumberOfTimesPreseenToBeSeen_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_registerOnceVisibleHeadlines:withLastSeenDate:minimumNumberOfTimesPreseenToBeSeen:");
}

id objc_msgSend__shouldReportEventWithTodayResults_fetchInfo_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_shouldReportEventWithTodayResults:fetchInfo:");
}

id objc_msgSend__shouldReportEventWithTrackableWidgetState_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_shouldReportEventWithTrackableWidgetState:");
}

id objc_msgSend__trackWidgetLingerEventWithEndTodaySource_endAppConfigTreatmentID_endWidgetDisplayMode_endAppearanceType_endPropertiesChanged_lingerInterval_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_trackWidgetLingerEventWithEndTodaySource:endAppConfigTreatmentID:endWidgetDisplayMode:endAppearanceType:endPropertiesChanged:lingerInterval:");
}

id objc_msgSend__widgetEngagementForHeadline_inSection_withTrackableWidgetState_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_widgetEngagementForHeadline:inSection:withTrackableWidgetState:");
}

id objc_msgSend_abbreviation(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "abbreviation");
}

id objc_msgSend_absoluteItemCountForCurrentDisplayMode(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "absoluteItemCountForCurrentDisplayMode");
}

id objc_msgSend_absoluteOrderOfItem_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "absoluteOrderOfItem:");
}

id objc_msgSend_absoluteOrderOfItemInSection_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "absoluteOrderOfItemInSection:");
}

id objc_msgSend_absoluteOrderOfSection_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "absoluteOrderOfSection:");
}

id objc_msgSend_absoluteString(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "absoluteString");
}

id objc_msgSend_accumulator(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "accumulator");
}

id objc_msgSend_activeDisplayMode(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "activeDisplayMode");
}

id objc_msgSend_addCountOfArticlesExposedEachSection_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addCountOfArticlesExposedEachSection:");
}

id objc_msgSend_addEvents_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addEvents:");
}

id objc_msgSend_addObject_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addObject:");
}

id objc_msgSend_addObjectsFromArray_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addObjectsFromArray:");
}

id objc_msgSend_addWidgetPersonalizationFeatureCTRPair_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addWidgetPersonalizationFeatureCTRPair:");
}

id objc_msgSend_allItemsCount(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "allItemsCount");
}

id objc_msgSend_allObjects(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "allObjects");
}

id objc_msgSend_allValues(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "allValues");
}

id objc_msgSend_analyticsElement(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "analyticsElement");
}

id objc_msgSend_analyzeImage_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "analyzeImage:");
}

id objc_msgSend_annotateEvent_withOptions_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "annotateEvent:withOptions:");
}

id objc_msgSend_annotateSession_withOptions_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "annotateSession:withOptions:");
}

id objc_msgSend_appConfigTreatmentID(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "appConfigTreatmentID");
}

id objc_msgSend_appearanceType(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "appearanceType");
}

id objc_msgSend_appendFormat_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "appendFormat:");
}

id objc_msgSend_appendString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "appendString:");
}

id objc_msgSend_archivedDataWithRootObject_requiringSecureCoding_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "archivedDataWithRootObject:requiringSecureCoding:error:");
}

id objc_msgSend_array(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "array");
}

id objc_msgSend_arrayWithArray_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "arrayWithArray:");
}

id objc_msgSend_arrayWithObjects_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "arrayWithObjects:");
}

id objc_msgSend_arrayWithObjects_count_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "arrayWithObjects:count:");
}

id objc_msgSend_articleID(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "articleID");
}

id objc_msgSend_articleRecordData(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "articleRecordData");
}

id objc_msgSend_asChannel(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "asChannel");
}

id objc_msgSend_assetHandleForCKAssetURL_lifetimeHint_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "assetHandleForCKAssetURL:lifetimeHint:");
}

id objc_msgSend_assetHandles(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "assetHandles");
}

id objc_msgSend_assetManager(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "assetManager");
}

id objc_msgSend_availabilityMonitor(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "availabilityMonitor");
}

id objc_msgSend_backgroundColor(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "backgroundColor");
}

id objc_msgSend_backingElement(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "backingElement");
}

id objc_msgSend_base64EncodedStringWithOptions_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "base64EncodedStringWithOptions:");
}

id objc_msgSend_baseNewsURL(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "baseNewsURL");
}

id objc_msgSend_blackColor(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "blackColor");
}

id objc_msgSend_blue(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "blue");
}

id objc_msgSend_cellularRadioAccessTechnology(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cellularRadioAccessTechnology");
}

id objc_msgSend_channelID(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "channelID");
}

id objc_msgSend_code(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "code");
}

id objc_msgSend_color_isCloseToOtherColor_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "color:isCloseToOtherColor:");
}

id objc_msgSend_colorWithAlphaComponent_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "colorWithAlphaComponent:");
}

id objc_msgSend_colorWithCGColor_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "colorWithCGColor:");
}

id objc_msgSend_colorWithDynamicProvider_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "colorWithDynamicProvider:");
}

id objc_msgSend_colorWithRed_green_blue_alpha_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "colorWithRed:green:blue:alpha:");
}

id objc_msgSend_colorWithWhite_alpha_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "colorWithWhite:alpha:");
}

id objc_msgSend_components_fromDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "components:fromDate:");
}

id objc_msgSend_componentsInTimeZone_fromDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "componentsInTimeZone:fromDate:");
}

id objc_msgSend_componentsSeparatedByString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "componentsSeparatedByString:");
}

id objc_msgSend_containsObject_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "containsObject:");
}

id objc_msgSend_contentID(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "contentID");
}

id objc_msgSend_copy(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "copy");
}

id objc_msgSend_copyItemAtURL_toURL_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "copyItemAtURL:toURL:error:");
}

id objc_msgSend_count(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "count");
}

id objc_msgSend_countByEnumeratingWithState_objects_count_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "countByEnumeratingWithState:objects:count:");
}

id objc_msgSend_createDirectoryAtURL_withIntermediateDirectories_attributes_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "createDirectoryAtURL:withIntermediateDirectories:attributes:error:");
}

id objc_msgSend_currentCalendar(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "currentCalendar");
}

id objc_msgSend_currentDevice(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "currentDevice");
}

id objc_msgSend_currentSession(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "currentSession");
}

id objc_msgSend_currentTraitCollection(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "currentTraitCollection");
}

id objc_msgSend_data(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "data");
}

id objc_msgSend_date(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "date");
}

id objc_msgSend_dateFromComponents_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dateFromComponents:");
}

id objc_msgSend_decodeObjectOfClasses_forKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "decodeObjectOfClasses:forKey:");
}

id objc_msgSend_defaultManager(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "defaultManager");
}

id objc_msgSend_dictionaryWithDictionary_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dictionaryWithDictionary:");
}

id objc_msgSend_dictionaryWithObjects_forKeys_count_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dictionaryWithObjects:forKeys:count:");
}

id objc_msgSend_domain(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "domain");
}

id objc_msgSend_dominantColors(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dominantColors");
}

id objc_msgSend_downloadError(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "downloadError");
}

id objc_msgSend_downloadIfNeededWithCompletion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "downloadIfNeededWithCompletion:");
}

id objc_msgSend_enableFlushingWithFlushingThreshold_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "enableFlushingWithFlushingThreshold:");
}

id objc_msgSend_encodableElement(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "encodableElement");
}

id objc_msgSend_encodableElementClass(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "encodableElementClass");
}

id objc_msgSend_encodeObject_forKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "encodeObject:forKey:");
}

id objc_msgSend_encodeQueryValueWithError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "encodeQueryValueWithError:");
}

id objc_msgSend_engagementWithBackgroundAtDate_withTargetURL_trackableWidgetState_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "engagementWithBackgroundAtDate:withTargetURL:trackableWidgetState:");
}

id objc_msgSend_engagementWithHeaderAtDate_withTargetURL_trackableWidgetState_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "engagementWithHeaderAtDate:withTargetURL:trackableWidgetState:");
}

id objc_msgSend_engagementWithPlaceholderAtDate_withTargetURL_trackableWidgetState_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "engagementWithPlaceholderAtDate:withTargetURL:trackableWidgetState:");
}

id objc_msgSend_engagementWithRowAtDate_forHeadline_withTrackableWidgetState_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "engagementWithRowAtDate:forHeadline:withTrackableWidgetState:");
}

id objc_msgSend_entryID(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "entryID");
}

id objc_msgSend_enumerateKeysAndObjectsUsingBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "enumerateKeysAndObjectsUsingBlock:");
}

id objc_msgSend_enumerateObjectsUsingBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "enumerateObjectsUsingBlock:");
}

id objc_msgSend_eventAccumulators(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "eventAccumulators");
}

id objc_msgSend_eventAnnotator(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "eventAnnotator");
}

id objc_msgSend_eventTrackers(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "eventTrackers");
}

id objc_msgSend_eventTrackersProxy(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "eventTrackersProxy");
}

id objc_msgSend_events(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "events");
}

id objc_msgSend_exceptionWithName_reason_userInfo_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "exceptionWithName:reason:userInfo:");
}

id objc_msgSend_extentsOfSections_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "extentsOfSections:");
}

id objc_msgSend_fc_NewsArticleID(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fc_NewsArticleID");
}

id objc_msgSend_fc_array_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fc_array:");
}

id objc_msgSend_fc_arrayByTransformingWithBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fc_arrayByTransformingWithBlock:");
}

id objc_msgSend_fc_arrayOfObjectsPassingTest_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fc_arrayOfObjectsPassingTest:");
}

id objc_msgSend_fc_dictionaryByTransformingValuesWithKeyAndValueBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fc_dictionaryByTransformingValuesWithKeyAndValueBlock:");
}

id objc_msgSend_fc_isHardPaywallNewsArticleURL_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fc_isHardPaywallNewsArticleURL:");
}

id objc_msgSend_fc_isNewsArticleURL(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fc_isNewsArticleURL");
}

id objc_msgSend_fc_rotateElementsFromTheIndexOfSelectedItem_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fc_rotateElementsFromTheIndexOfSelectedItem:");
}

id objc_msgSend_fc_safelySetObject_forKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fc_safelySetObject:forKey:");
}

id objc_msgSend_fc_safelySetObjectAllowingNil_forKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fc_safelySetObjectAllowingNil:forKey:");
}

id objc_msgSend_fc_stringWithISO8601Format(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fc_stringWithISO8601Format");
}

id objc_msgSend_fetchDate(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchDate");
}

id objc_msgSend_fetchInfoForVisibleResults(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchInfoForVisibleResults");
}

id objc_msgSend_fileCoordinatedFIFOHost(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fileCoordinatedFIFOHost");
}

id objc_msgSend_fileCoordinatedStore(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fileCoordinatedStore");
}

id objc_msgSend_filePath(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "filePath");
}

id objc_msgSend_fileURLWithPath_isDirectory_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fileURLWithPath:isDirectory:");
}

id objc_msgSend_flintDocumentURL(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "flintDocumentURL");
}

id objc_msgSend_flintDocumentURLAssetHandlesByRemoteURL(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "flintDocumentURLAssetHandlesByRemoteURL");
}

id objc_msgSend_floatValue(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "floatValue");
}

id objc_msgSend_fontDescriptorByAddingAttributes_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fontDescriptorByAddingAttributes:");
}

id objc_msgSend_fontDescriptorWithSymbolicTraits_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fontDescriptorWithSymbolicTraits:");
}

id objc_msgSend_fontWithDescriptor_size_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fontWithDescriptor:size:");
}

id objc_msgSend_fr_accessoryColorForTextColor_backgroundColor_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fr_accessoryColorForTextColor:backgroundColor:");
}

id objc_msgSend_fr_colorBin(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fr_colorBin");
}

id objc_msgSend_fr_colorWithHue_saturation_lightness_alpha_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fr_colorWithHue:saturation:lightness:alpha:");
}

id objc_msgSend_fr_dynamicColor_withDarkStyleVariant_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fr_dynamicColor:withDarkStyleVariant:");
}

id objc_msgSend_fr_plusDEffectWithForegroundColor_backgroundColor_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fr_plusDEffectWithForegroundColor:backgroundColor:");
}

id objc_msgSend_fr_plusLEffectWithForegroundColor_backgroundColor_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fr_plusLEffectWithForegroundColor:backgroundColor:");
}

id objc_msgSend_fr_topicCardBorderColorForDarkBackground(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fr_topicCardBorderColorForDarkBackground");
}

id objc_msgSend_fr_topicCardBorderColorForLightBackground(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fr_topicCardBorderColorForLightBackground");
}

id objc_msgSend_fr_topicCardDividerColorForDarkBackground(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fr_topicCardDividerColorForDarkBackground");
}

id objc_msgSend_fr_topicCardDividerColorForLightBackground(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fr_topicCardDividerColorForLightBackground");
}

id objc_msgSend_fr_topicCardTextColorForDarkBackground(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fr_topicCardTextColorForDarkBackground");
}

id objc_msgSend_fr_topicCardTextColorForLightBackground(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fr_topicCardTextColorForLightBackground");
}

id objc_msgSend_ft_appearanceTypeProperty(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "ft_appearanceTypeProperty");
}

id objc_msgSend_ft_BOOLeanPropertyWithName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "ft_BOOLeanPropertyWithName:");
}

id objc_msgSend_ft_eventWithDate_action_headline_section_headlineIndexInSection_precedingHeadlinesCount_precedingSectionsCount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "ft_eventWithDate:action:headline:section:headlineIndexInSection:precedingHeadlinesCount:precedingSectionsCount:");
}

id objc_msgSend_ft_headlineSourceProperty(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "ft_headlineSourceProperty");
}

id objc_msgSend_ft_itemWithHeadlines_sectionsByHeadline_assetHandlesByRemoteURL_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "ft_itemWithHeadlines:sectionsByHeadline:assetHandlesByRemoteURL:");
}

id objc_msgSend_ft_localTimeHourProperty(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "ft_localTimeHourProperty");
}

id objc_msgSend_ft_referralURLWithSourceIdentifier_appConfigTreatmentID_widgetEngagement_otherQueryItems_sharedDirectoryFileURL_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "ft_referralURLWithSourceIdentifier:appConfigTreatmentID:widgetEngagement:otherQueryItems:sharedDirectoryFileURL:");
}

id objc_msgSend_ft_sectionProperty(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "ft_sectionProperty");
}

id objc_msgSend_ft_setTemporalBoundsBySanitizingStartDate_endDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "ft_setTemporalBoundsBySanitizingStartDate:endDate:");
}

id objc_msgSend_ft_timeZoneProperty(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "ft_timeZoneProperty");
}

id objc_msgSend_ft_userGroupProperty(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "ft_userGroupProperty");
}

id objc_msgSend_ft_widgetDisplayModeProperty(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "ft_widgetDisplayModeProperty");
}

id objc_msgSend_getCharacters_range_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getCharacters:range:");
}

id objc_msgSend_getHue_saturation_brightness_alpha_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getHue:saturation:brightness:alpha:");
}

id objc_msgSend_getHue_saturation_lightness_alpha_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getHue:saturation:lightness:alpha:");
}

id objc_msgSend_getRed_green_blue_alpha_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getRed:green:blue:alpha:");
}

id objc_msgSend_green(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "green");
}

id objc_msgSend_hashTableWithOptions_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hashTableWithOptions:");
}

id objc_msgSend_headline(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "headline");
}

id objc_msgSend_hour(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hour");
}

id objc_msgSend_identifier(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "identifier");
}

id objc_msgSend_indexOfObject_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "indexOfObject:");
}

id objc_msgSend_indexSetWithIndexesInRange_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "indexSetWithIndexesInRange:");
}

id objc_msgSend_initWithArticleID_sourceChannelID_sectionData_flintDocumentAssetHandle_articleRecordData_sourceChannelRecordData_parentIssueRecordData_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithArticleID:sourceChannelID:sectionData:flintDocumentAssetHandle:articleRecordData:sourceChannelRecordData:parentIssueRecordData:");
}

id objc_msgSend_initWithArticleRecordData_sourceChannel_parentIssue_assetManager_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithArticleRecordData:sourceChannel:parentIssue:assetManager:");
}

id objc_msgSend_initWithBase64EncodedString_options_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithBase64EncodedString:options:");
}

id objc_msgSend_initWithCalendarIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithCalendarIdentifier:");
}

id objc_msgSend_initWithContentType_contentTypeVersion_contentTypeMinorVersion_contentTypePatchVersion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithContentType:contentTypeVersion:contentTypeMinorVersion:contentTypePatchVersion:");
}

id objc_msgSend_initWithContentsOfURL_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithContentsOfURL:");
}

id objc_msgSend_initWithData_context_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithData:context:");
}

id objc_msgSend_initWithData_sourceChannel_assetManager_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithData:sourceChannel:assetManager:");
}

id objc_msgSend_initWithEncodableElement_assetHandlesByRemoteURL_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithEncodableElement:assetHandlesByRemoteURL:");
}

id objc_msgSend_initWithEnvelopeDescriptor_sessionManager_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithEnvelopeDescriptor:sessionManager:");
}

id objc_msgSend_initWithEventTrackers_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithEventTrackers:");
}

id objc_msgSend_initWithFeatureId_event_registerProperties_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithFeatureId:event:registerProperties:");
}

id objc_msgSend_initWithFileURL_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithFileURL:");
}

id objc_msgSend_initWithFileURL_allowedClasses_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithFileURL:allowedClasses:");
}

id objc_msgSend_initWithFormat_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithFormat:");
}

id objc_msgSend_initWithJSONArray_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithJSONArray:");
}

id objc_msgSend_initWithJSONArray_flintDocumentURLAssetHandlesByRemoteURL_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithJSONArray:flintDocumentURLAssetHandlesByRemoteURL:");
}

id objc_msgSend_initWithMaxRowCount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithMaxRowCount:");
}

id objc_msgSend_initWithMaxRowCount_trackedEvents_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithMaxRowCount:trackedEvents:");
}

id objc_msgSend_initWithName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithName:");
}

id objc_msgSend_initWithName_directory_keyManager_avAssetFactory_resourceURLGenerator_networkBehaviorMonitor_networkReachability_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithName:directory:keyManager:avAssetFactory:resourceURLGenerator:networkBehaviorMonitor:networkReachability:");
}

id objc_msgSend_initWithName_value_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithName:value:");
}

id objc_msgSend_initWithReferralItem_sharedDirectoryFileURL_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithReferralItem:sharedDirectoryFileURL:");
}

id objc_msgSend_initWithSessionManager_userIDProvider_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithSessionManager:userIDProvider:");
}

id objc_msgSend_initWithTodaySource_appConfigTreatmentID_widgetDisplayMode_appearanceType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithTodaySource:appConfigTreatmentID:widgetDisplayMode:appearanceType:");
}

id objc_msgSend_initWithURL_engagementReporter_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithURL:engagementReporter:");
}

id objc_msgSend_initWithURL_resolvingAgainstBaseURL_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithURL:resolvingAgainstBaseURL:");
}

id objc_msgSend_initWithWidgetEventTracker_predicate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithWidgetEventTracker:predicate:");
}

id objc_msgSend_integerValue(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "integerValue");
}

id objc_msgSend_interfaceOrientation(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "interfaceOrientation");
}

id objc_msgSend_isEqual_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isEqual:");
}

id objc_msgSend_isEqualToString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isEqualToString:");
}

id objc_msgSend_isLingerInProgress(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isLingerInProgress");
}

id objc_msgSend_isMainThread(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isMainThread");
}

id objc_msgSend_isNewsAvailable(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isNewsAvailable");
}

id objc_msgSend_itemExposuresSinceLastWidgetAppearance(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "itemExposuresSinceLastWidgetAppearance");
}

id objc_msgSend_itemType(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "itemType");
}

id objc_msgSend_items(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "items");
}

id objc_msgSend_keyWindow(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "keyWindow");
}

id objc_msgSend_lastVisibleItemsChangeArticleCount(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "lastVisibleItemsChangeArticleCount");
}

id objc_msgSend_lastVisibleItemsChangeDate(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "lastVisibleItemsChangeDate");
}

id objc_msgSend_lastVisibleItemsChangePairs(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "lastVisibleItemsChangePairs");
}

id objc_msgSend_length(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "length");
}

id objc_msgSend_localTimeZone(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "localTimeZone");
}

id objc_msgSend_makeObjectsPerformSelector_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "makeObjectsPerformSelector:");
}

id objc_msgSend_makeObjectsPerformSelector_withObject_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "makeObjectsPerformSelector:withObject:");
}

id objc_msgSend_minimumArticleExposureDurationToBePreseen(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "minimumArticleExposureDurationToBePreseen");
}

id objc_msgSend_minimumNumberOfTimesPreseenToBeSeen(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "minimumNumberOfTimesPreseenToBeSeen");
}

id objc_msgSend_mutableCopy(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "mutableCopy");
}

id objc_msgSend_myEncodableElement(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "myEncodableElement");
}

id objc_msgSend_needsSeenStateTracking(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "needsSeenStateTracking");
}

id objc_msgSend_nf_object_isEqualToObject_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "nf_object:isEqualToObject:");
}

id objc_msgSend_nss_URLWithCampaignID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "nss_URLWithCampaignID:");
}

id objc_msgSend_nss_eventWithIdentifier(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "nss_eventWithIdentifier");
}

id objc_msgSend_nss_setStartDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "nss_setStartDate:");
}

id objc_msgSend_numberWithDouble_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "numberWithDouble:");
}

id objc_msgSend_numberWithInteger_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "numberWithInteger:");
}

id objc_msgSend_numberWithUnsignedInteger_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "numberWithUnsignedInteger:");
}

id objc_msgSend_objectAtIndexedSubscript_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "objectAtIndexedSubscript:");
}

id objc_msgSend_objectForKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "objectForKey:");
}

id objc_msgSend_objectForKeyedSubscript_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "objectForKeyedSubscript:");
}

id objc_msgSend_objectsAtIndexes_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "objectsAtIndexes:");
}

id objc_msgSend_observeEvent_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "observeEvent:");
}

id objc_msgSend_observeEvents_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "observeEvents:");
}

id objc_msgSend_observers(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "observers");
}

id objc_msgSend_openInNewsReferralItemQueryItemName(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "openInNewsReferralItemQueryItemName");
}

id objc_msgSend_openInNewsReferralItemWithTrackableWidgetState_assetHandlesByRemoteURL_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "openInNewsReferralItemWithTrackableWidgetState:assetHandlesByRemoteURL:");
}

id objc_msgSend_orderHeadlineEngagementEventTracker(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "orderHeadlineEngagementEventTracker");
}

id objc_msgSend_orderedSetWithOrderedSet_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "orderedSetWithOrderedSet:");
}

id objc_msgSend_outstandingItemExposureEvents(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "outstandingItemExposureEvents");
}

id objc_msgSend_parentIssueRecordData(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "parentIssueRecordData");
}

id objc_msgSend_path(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "path");
}

id objc_msgSend_personalizationEventAtDate_withAction_headline_section_trackableWidgetState_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "personalizationEventAtDate:withAction:headline:section:trackableWidgetState:");
}

id objc_msgSend_personalizationMetadata(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "personalizationMetadata");
}

id objc_msgSend_predicate(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "predicate");
}

id objc_msgSend_preferredFontDescriptorWithTextStyle_compatibleWithTraitCollection_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "preferredFontDescriptorWithTextStyle:compatibleWithTraitCollection:");
}

id objc_msgSend_preseenCountTrackingIdentifier(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "preseenCountTrackingIdentifier");
}

id objc_msgSend_propertyWithName_enumMapping_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "propertyWithName:enumMapping:");
}

id objc_msgSend_propertyWithName_enumMapping_autoSanitizeValues_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "propertyWithName:enumMapping:autoSanitizeValues:");
}

id objc_msgSend_propertyWithName_possibleValues_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "propertyWithName:possibleValues:");
}

id objc_msgSend_propertyWithName_range_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "propertyWithName:range:");
}

id objc_msgSend_propertyWithName_range_clampValues_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "propertyWithName:range:clampValues:");
}

id objc_msgSend_queryItemWithName_value_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "queryItemWithName:value:");
}

id objc_msgSend_queryItems(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "queryItems");
}

id objc_msgSend_red(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "red");
}

id objc_msgSend_referralBarName(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "referralBarName");
}

id objc_msgSend_referralItem(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "referralItem");
}

id objc_msgSend_remoteURL(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "remoteURL");
}

id objc_msgSend_removeAllObjects(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeAllObjects");
}

id objc_msgSend_removeItemAtURL_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeItemAtURL:error:");
}

id objc_msgSend_removeObject_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeObject:");
}

id objc_msgSend_removeObjectForKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeObjectForKey:");
}

id objc_msgSend_removeObjectsForKeys_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeObjectsForKeys:");
}

id objc_msgSend_removeObjectsInRange_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeObjectsInRange:");
}

id objc_msgSend_reporter(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "reporter");
}

id objc_msgSend_resolvedColorWithTraitCollection_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "resolvedColorWithTraitCollection:");
}

id objc_msgSend_saveWithCompletionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "saveWithCompletionHandler:");
}

id objc_msgSend_sectionForItem_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sectionForItem:");
}

id objc_msgSend_sections(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sections");
}

id objc_msgSend_sessionAnnotator(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sessionAnnotator");
}

id objc_msgSend_sessionHasEngagement(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sessionHasEngagement");
}

id objc_msgSend_setAppConfigTreatmentId_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAppConfigTreatmentId:");
}

id objc_msgSend_setArticleId_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setArticleId:");
}

id objc_msgSend_setContentFetchDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setContentFetchDate:");
}

id objc_msgSend_setContentId_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setContentId:");
}

id objc_msgSend_setCtr_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCtr:");
}

id objc_msgSend_setCurrentSession_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCurrentSession:");
}

id objc_msgSend_setDuration_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDuration:");
}

id objc_msgSend_setEngagementTargetUrl_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setEngagementTargetUrl:");
}

id objc_msgSend_setEntryId_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setEntryId:");
}

id objc_msgSend_setEnvelopes_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setEnvelopes:");
}

id objc_msgSend_setEventObject_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setEventObject:");
}

id objc_msgSend_setEvents_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setEvents:");
}

id objc_msgSend_setGestureType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setGestureType:");
}

id objc_msgSend_setItemExposuresSinceLastWidgetAppearance_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setItemExposuresSinceLastWidgetAppearance:");
}

id objc_msgSend_setLastVisibleItemsChangeArticleCount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLastVisibleItemsChangeArticleCount:");
}

id objc_msgSend_setLastVisibleItemsChangeDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLastVisibleItemsChangeDate:");
}

id objc_msgSend_setLastVisibleItemsChangePairs_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLastVisibleItemsChangePairs:");
}

id objc_msgSend_setLingerInProgress_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLingerInProgress:");
}

id objc_msgSend_setObject_forKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setObject:forKey:");
}

id objc_msgSend_setObject_forKeyedSubscript_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setObject:forKeyedSubscript:");
}

id objc_msgSend_setOtherVisibleSections_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setOtherVisibleSections:");
}

id objc_msgSend_setOutstandingItemExposureEvents_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setOutstandingItemExposureEvents:");
}

id objc_msgSend_setPersonalizationFeatureId_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPersonalizationFeatureId:");
}

id objc_msgSend_setQueryItems_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setQueryItems:");
}

id objc_msgSend_setRunningObsolete_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setRunningObsolete:");
}

id objc_msgSend_setSessionHasEngagement_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSessionHasEngagement:");
}

id objc_msgSend_setSourceChannelId_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSourceChannelId:");
}

id objc_msgSend_setStartDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setStartDate:");
}

id objc_msgSend_setStartState_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setStartState:");
}

id objc_msgSend_setStoryType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setStoryType:");
}

id objc_msgSend_setSubmissionCompletion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSubmissionCompletion:");
}

id objc_msgSend_setTodayWidgetExposure_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTodayWidgetExposure:");
}

id objc_msgSend_setTodayWidgetHeadlineExposure_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTodayWidgetHeadlineExposure:");
}

id objc_msgSend_setUserID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setUserID:");
}

id objc_msgSend_setUserId_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setUserId:");
}

id objc_msgSend_setUserSegmentationSegmentSetIds_count_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setUserSegmentationSegmentSetIds:count:");
}

id objc_msgSend_setUserSegmentationTreatmentIds_count_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setUserSegmentationTreatmentIds:count:");
}

id objc_msgSend_setVisibleHeadlines_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setVisibleHeadlines:");
}

id objc_msgSend_setVisibleHeadlinesAppearanceDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setVisibleHeadlinesAppearanceDate:");
}

id objc_msgSend_setWebEmbedId_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setWebEmbedId:");
}

id objc_msgSend_setWidgetAppearanceDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setWidgetAppearanceDate:");
}

id objc_msgSend_setWidgetAppearanceType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setWidgetAppearanceType:");
}

id objc_msgSend_setWidgetArticleCount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setWidgetArticleCount:");
}

id objc_msgSend_setWidgetArticleCountInSection_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setWidgetArticleCountInSection:");
}

id objc_msgSend_setWidgetArticleRank_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setWidgetArticleRank:");
}

id objc_msgSend_setWidgetArticleRankInSection_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setWidgetArticleRankInSection:");
}

id objc_msgSend_setWidgetContentType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setWidgetContentType:");
}

id objc_msgSend_setWidgetDisplayMode_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setWidgetDisplayMode:");
}

id objc_msgSend_setWidgetDisplayModeSessionEnd_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setWidgetDisplayModeSessionEnd:");
}

id objc_msgSend_setWidgetEngagement_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setWidgetEngagement:");
}

id objc_msgSend_setWidgetEngagementType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setWidgetEngagementType:");
}

id objc_msgSend_setWidgetExposureStackLocation_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setWidgetExposureStackLocation:");
}

id objc_msgSend_setWidgetHeadlineExposureCount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setWidgetHeadlineExposureCount:");
}

id objc_msgSend_setWidgetSectionDisplayRank_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setWidgetSectionDisplayRank:");
}

id objc_msgSend_setWidgetSectionId_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setWidgetSectionId:");
}

id objc_msgSend_setWidgetSectionIdsExposed_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setWidgetSectionIdsExposed:");
}

id objc_msgSend_setWidgetSectionSubid_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setWidgetSectionSubid:");
}

id objc_msgSend_setWidgetSectionSubidsExposed_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setWidgetSectionSubidsExposed:");
}

id objc_msgSend_setWidgetSectionsArticleCountPairs_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setWidgetSectionsArticleCountPairs:");
}

id objc_msgSend_setWidgetSessionId_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setWidgetSessionId:");
}

id objc_msgSend_setWidgetType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setWidgetType:");
}

id objc_msgSend_setWidgetUserId_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setWidgetUserId:");
}

id objc_msgSend_setWithObjects_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setWithObjects:");
}

id objc_msgSend_sharedApplication(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sharedApplication");
}

id objc_msgSend_sharedDirectoryFileURL(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sharedDirectoryFileURL");
}

id objc_msgSend_sharedNetworkReachability(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sharedNetworkReachability");
}

id objc_msgSend_slowCachedTagForID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "slowCachedTagForID:");
}

id objc_msgSend_sourceChannelID(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sourceChannelID");
}

id objc_msgSend_sourceChannelRecordData(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sourceChannelRecordData");
}

id objc_msgSend_sourceTagID(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sourceTagID");
}

id objc_msgSend_stackKind(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stackKind");
}

id objc_msgSend_stackLocation(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stackLocation");
}

id objc_msgSend_start(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "start");
}

id objc_msgSend_startDate(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "startDate");
}

id objc_msgSend_startState(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "startState");
}

id objc_msgSend_storyType(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "storyType");
}

id objc_msgSend_stringIsValid_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stringIsValid:");
}

id objc_msgSend_stringValue(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stringValue");
}

id objc_msgSend_stringWithFormat_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stringWithFormat:");
}

id objc_msgSend_subidentifier(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "subidentifier");
}

id objc_msgSend_submissionGroup(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "submissionGroup");
}

id objc_msgSend_submitEventsIfNeededWithCompletion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "submitEventsIfNeededWithCompletion:");
}

id objc_msgSend_submitUpdate_withCompletion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "submitUpdate:withCompletion:");
}

id objc_msgSend_systemGrayColor(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "systemGrayColor");
}

id objc_msgSend_systemPinkColor(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "systemPinkColor");
}

id objc_msgSend_tagController(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "tagController");
}

id objc_msgSend_timeIntervalSince1970(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "timeIntervalSince1970");
}

id objc_msgSend_timeIntervalSinceDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "timeIntervalSinceDate:");
}

id objc_msgSend_timeOfDayHeadlineEngagementEventTracker(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "timeOfDayHeadlineEngagementEventTracker");
}

id objc_msgSend_timeOfDayWidgetAppearanceEventTracker(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "timeOfDayWidgetAppearanceEventTracker");
}

id objc_msgSend_tintColor(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "tintColor");
}

id objc_msgSend_todayEventTracker(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "todayEventTracker");
}

id objc_msgSend_todayResults(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "todayResults");
}

id objc_msgSend_todaySourceIdentifier(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "todaySourceIdentifier");
}

id objc_msgSend_trackAppearanceAtDate_withHeadlineSource_appConfigTreatmentID_appearanceType_allItemsCount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "trackAppearanceAtDate:withHeadlineSource:appConfigTreatmentID:appearanceType:allItemsCount:");
}

id objc_msgSend_trackDisappearance(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "trackDisappearance");
}

id objc_msgSend_trackEventWithPropertyValues_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "trackEventWithPropertyValues:");
}

id objc_msgSend_trackEventWithPropertyValues_value_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "trackEventWithPropertyValues:value:");
}

id objc_msgSend_trackUpdateWithTodaySource_appConfigTreatmentID_error_updateFetchDuration_wifiReachable_cellularRadioAccessTechnology_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "trackUpdateWithTodaySource:appConfigTreatmentID:error:updateFetchDuration:wifiReachable:cellularRadioAccessTechnology:");
}

id objc_msgSend_trackWidgetLingerEventExtremity_atDate_withTodaySource_appConfigTreatmentID_widgetDisplayMode_appearanceType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "trackWidgetLingerEventExtremity:atDate:withTodaySource:appConfigTreatmentID:widgetDisplayMode:appearanceType:");
}

id objc_msgSend_trackedEvents(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "trackedEvents");
}

id objc_msgSend_traitCollectionWithPreferredContentSizeCategory_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "traitCollectionWithPreferredContentSizeCategory:");
}

id objc_msgSend_unarchivedObjectOfClasses_fromData_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "unarchivedObjectOfClasses:fromData:error:");
}

id objc_msgSend_uniqueKey(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "uniqueKey");
}

id objc_msgSend_unsignedIntegerValue(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "unsignedIntegerValue");
}

id objc_msgSend_userEngagedWithWidgetAtDate_actionURL_trackableWidgetState_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "userEngagedWithWidgetAtDate:actionURL:trackableWidgetState:");
}

id objc_msgSend_userID(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "userID");
}

id objc_msgSend_userIDProvider(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "userIDProvider");
}

id objc_msgSend_userInterfaceIdiom(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "userInterfaceIdiom");
}

id objc_msgSend_userInterfaceStyle(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "userInterfaceStyle");
}

id objc_msgSend_userSegmentationSegmentSetIds(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "userSegmentationSegmentSetIds");
}

id objc_msgSend_userSegmentationSegmentSetIdsCount(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "userSegmentationSegmentSetIdsCount");
}

id objc_msgSend_userSegmentationTreatmentIds(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "userSegmentationTreatmentIds");
}

id objc_msgSend_userSegmentationTreatmentIdsCount(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "userSegmentationTreatmentIdsCount");
}

id objc_msgSend_visibleHeadlines(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "visibleHeadlines");
}

id objc_msgSend_visibleHeadlinesAppearanceDate(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "visibleHeadlinesAppearanceDate");
}

id objc_msgSend_visibleItems(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "visibleItems");
}

id objc_msgSend_visibleItemsDidChangeAtDate_withTriggerEvent_trackableWidgetState_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "visibleItemsDidChangeAtDate:withTriggerEvent:trackableWidgetState:");
}

id objc_msgSend_visibleSections(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "visibleSections");
}

id objc_msgSend_whiteColor(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "whiteColor");
}

id objc_msgSend_widgetAppearanceDate(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "widgetAppearanceDate");
}

id objc_msgSend_widgetAppearanceEventTracker(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "widgetAppearanceEventTracker");
}

id objc_msgSend_widgetConfig(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "widgetConfig");
}

id objc_msgSend_widgetDidAppearAtDate_withTrackableWidgetState_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "widgetDidAppearAtDate:withTrackableWidgetState:");
}

id objc_msgSend_widgetDidDisappearAtDate_withTrackableWidgetState_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "widgetDidDisappearAtDate:withTrackableWidgetState:");
}

id objc_msgSend_widgetDisappearanceEventTracker(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "widgetDisappearanceEventTracker");
}

id objc_msgSend_widgetDisplayMode(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "widgetDisplayMode");
}

id objc_msgSend_widgetEventTracker(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "widgetEventTracker");
}

id objc_msgSend_widgetLingerEventTracker(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "widgetLingerEventTracker");
}

id objc_msgSend_widgetPerformedUpdateWithTodayResults_fetchInfo_error_updateFetchDuration_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "widgetPerformedUpdateWithTodayResults:fetchInfo:error:updateFetchDuration:");
}

id objc_msgSend_widgetUpdateEventTracker(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "widgetUpdateEventTracker");
}

id objc_msgSend_widgetUpdateFailureEventTracker(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "widgetUpdateFailureEventTracker");
}

id objc_msgSend_wifiReachable(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "wifiReachable");
}

id objc_msgSend_windowScene(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "windowScene");
}

id objc_msgSend_writeToURL_atomically_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "writeToURL:atomically:");
}

id objc_msgSend_writeToURL_options_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "writeToURL:options:error:");
}

id objc_msgSend_writeUserDidSeeHeadlinesWithAnalyticsElements_atDate_withCompletion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "writeUserDidSeeHeadlinesWithAnalyticsElements:atDate:withCompletion:");
}

id objc_msgSend_writeWithAccessor_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "writeWithAccessor:completion:");
}
