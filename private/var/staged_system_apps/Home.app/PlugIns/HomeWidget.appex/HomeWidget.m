uint64_t sub_100004E04()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t, _QWORD, uint64_t);
  uint64_t result;

  v0 = sub_10000527C(&qword_1000A4FE0);
  v1 = type metadata accessor for ServiceKind(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = *(unsigned __int8 *)(v2 + 80);
  v5 = (v4 + 32) & ~v4;
  v6 = swift_allocObject(v0, v5 + 30 * v3, v4 | 7);
  *(_OWORD *)(v6 + 16) = xmmword_100086B90;
  v7 = v6 + v5;
  v8 = *(void (**)(uint64_t, _QWORD, uint64_t))(v2 + 104);
  v8(v7, enum case for ServiceKind.airPurifier(_:), v1);
  v8(v7 + v3, enum case for ServiceKind.battery(_:), v1);
  v8(v7 + 2 * v3, enum case for ServiceKind.carbonDioxideSensor(_:), v1);
  v8(v7 + 3 * v3, enum case for ServiceKind.carbonMonoxideSensor(_:), v1);
  v8(v7 + 4 * v3, enum case for ServiceKind.contactSensor(_:), v1);
  v8(v7 + 5 * v3, enum case for ServiceKind.door(_:), v1);
  v8(v7 + 6 * v3, enum case for ServiceKind.fan(_:), v1);
  v8(v7 + 7 * v3, enum case for ServiceKind.faucet(_:), v1);
  v8(v7 + 8 * v3, enum case for ServiceKind.garageDoorOpener(_:), v1);
  v8(v7 + 9 * v3, enum case for ServiceKind.heaterCooler(_:), v1);
  v8(v7 + 10 * v3, enum case for ServiceKind.humidifierDehumidifier(_:), v1);
  v8(v7 + 11 * v3, enum case for ServiceKind.humiditySensor(_:), v1);
  v8(v7 + 12 * v3, enum case for ServiceKind.inputSource(_:), v1);
  v8(v7 + 13 * v3, enum case for ServiceKind.irrigationSystem(_:), v1);
  v8(v7 + 14 * v3, enum case for ServiceKind.leakSensor(_:), v1);
  v8(v7 + 15 * v3, enum case for ServiceKind.lightbulb(_:), v1);
  v8(v7 + 16 * v3, enum case for ServiceKind.lightSensor(_:), v1);
  v8(v7 + 17 * v3, enum case for ServiceKind.lockMechanism(_:), v1);
  v8(v7 + 18 * v3, enum case for ServiceKind.outlet(_:), v1);
  v8(v7 + 19 * v3, enum case for ServiceKind.securitySystem(_:), v1);
  v8(v7 + 20 * v3, enum case for ServiceKind.slats(_:), v1);
  v8(v7 + 21 * v3, enum case for ServiceKind.smokeSensor(_:), v1);
  v8(v7 + 22 * v3, enum case for ServiceKind.switch(_:), v1);
  v8(v7 + 23 * v3, enum case for ServiceKind.television(_:), v1);
  v8(v7 + 24 * v3, enum case for ServiceKind.temperatureSensor(_:), v1);
  v8(v7 + 25 * v3, enum case for ServiceKind.thermostat(_:), v1);
  v8(v7 + 26 * v3, enum case for ServiceKind.valve(_:), v1);
  v8(v7 + 27 * v3, enum case for ServiceKind.ventilationFan(_:), v1);
  v8(v7 + 28 * v3, enum case for ServiceKind.window(_:), v1);
  result = ((uint64_t (*)(uint64_t, _QWORD, uint64_t))v8)(v7 + 29 * v3, enum case for ServiceKind.windowCovering(_:), v1);
  static Array<A>.interactiveWidget = v6;
  return result;
}

uint64_t *Array<A>.interactiveWidget.unsafeMutableAddressor()
{
  if (qword_1000A4E60 != -1)
    swift_once(&qword_1000A4E60, sub_100004E04);
  return &static Array<A>.interactiveWidget;
}

uint64_t static Array<A>.interactiveWidget.getter()
{
  if (qword_1000A4E60 != -1)
    swift_once(&qword_1000A4E60, sub_100004E04);
  return swift_bridgeObjectRetain(static Array<A>.interactiveWidget);
}

uint64_t variable initialization expression of HomeManagerActor.homeHasUpdatedOnce()
{
  return 0;
}

void *variable initialization expression of HomeManagerActor.blocks()
{
  return &_swiftEmptyArrayStorage;
}

uint64_t sub_100005264(__int128 *a1)
{
  return sub_100005350(a1, (uint64_t)&opaque type descriptor for <<opaque return type of WidgetConfiguration._containerBackgroundRemovable(_:)>>);
}

uint64_t sub_100005270(uint64_t *a1)
{
  return sub_1000053C8(a1, (uint64_t)&opaque type descriptor for <<opaque return type of WidgetConfiguration._containerBackgroundRemovable(_:)>>);
}

uint64_t sub_10000527C(uint64_t *a1)
{
  uint64_t result;

  result = *a1;
  if (result < 0)
  {
    result = swift_getTypeByMangledNameInContext2((char *)a1 + (int)result, -(result >> 32), 0, 0);
    *a1 = result;
  }
  return result;
}

uint64_t sub_1000052BC(uint64_t *a1)
{
  uint64_t result;

  result = *a1;
  if (result < 0)
  {
    result = swift_getTypeByMangledNameInContextInMetadataState2(255, (char *)a1 + (int)result, -(result >> 32), 0, 0);
    *a1 = result;
  }
  return result;
}

unint64_t sub_100005300()
{
  unint64_t result;

  result = qword_1000A4FB0;
  if (!qword_1000A4FB0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for String, &type metadata for String);
    atomic_store(result, (unint64_t *)&qword_1000A4FB0);
  }
  return result;
}

uint64_t sub_100005344(__int128 *a1)
{
  return sub_100005350(a1, (uint64_t)&opaque type descriptor for <<opaque return type of WidgetConfiguration._contentMarginsDisabled()>>);
}

uint64_t sub_100005350(__int128 *a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;

  v4 = *a1;
  if (!sub_100084B20(2, 17, 0, 0))
    return v4;
  v5 = v4;
  return swift_getOpaqueTypeMetadata2(0, &v5, a2, 0);
}

uint64_t sub_1000053BC(uint64_t *a1)
{
  return sub_1000053C8(a1, (uint64_t)&opaque type descriptor for <<opaque return type of WidgetConfiguration._contentMarginsDisabled()>>);
}

uint64_t sub_1000053C8(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD v6[2];

  v4 = *a1;
  v3 = a1[1];
  if (sub_100084B20(2, 17, 0, 0))
  {
    v6[0] = v4;
    v6[1] = v3;
    return swift_getOpaqueTypeConformance2(v6, a2, 1);
  }
  return v3;
}

uint64_t variable initialization expression of TileIconView._showsWidgetBackground()
{
  return swift_getKeyPath(&unk_100086BB0);
}

uint64_t variable initialization expression of TileNameAndStatusView._renderingMode@<X0>(_QWORD *a1@<X8>)
{
  return sub_1000054A4((uint64_t)&unk_100086BD8, &qword_1000A4FC0, a1);
}

uint64_t variable initialization expression of TileIconView._colorScheme@<X0>(_QWORD *a1@<X8>)
{
  return sub_1000054A4((uint64_t)&unk_100086C08, &qword_1000A4FC8, a1);
}

uint64_t variable initialization expression of TileNameAndStatusView._sizeCategory@<X0>(_QWORD *a1@<X8>)
{
  return sub_1000054A4((uint64_t)&unk_100086C38, &qword_1000A4FD0, a1);
}

uint64_t sub_1000054A4@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v5;

  *a3 = swift_getKeyPath(a1);
  v5 = sub_10000527C(a2);
  return swift_storeEnumTagMultiPayload(a3, v5, 0);
}

__n128 sub_1000054E0(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  *a1 = *a2;
  return result;
}

uint64_t sub_1000054F0(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 16))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t sub_100005510(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)result = (a2 - 1);
    *(_QWORD *)(result + 8) = 0;
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 16) = v3;
  return result;
}

void type metadata accessor for CGSize()
{
  unint64_t ForeignTypeMetadata;
  uint64_t v1;

  if (!qword_1000A4FD8)
  {
    ForeignTypeMetadata = swift_getForeignTypeMetadata(0, &unk_10009E2A8);
    if (!v1)
      atomic_store(ForeignTypeMetadata, (unint64_t *)&qword_1000A4FD8);
  }
}

uint64_t ServiceKind.widgetTogglingCharacteristicKind.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  int v8;
  unsigned int *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;

  v2 = v1;
  v4 = type metadata accessor for ServiceKind(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin();
  v7 = (char *)&v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, v2, v4);
  v8 = (*(uint64_t (**)(char *, uint64_t))(v5 + 88))(v7, v4);
  if (v8 != enum case for ServiceKind.airPurifier(_:)
    && v8 != enum case for ServiceKind.fan(_:)
    && v8 != enum case for ServiceKind.faucet(_:)
    && v8 != enum case for ServiceKind.heaterCooler(_:)
    && v8 != enum case for ServiceKind.humidifierDehumidifier(_:)
    && v8 != enum case for ServiceKind.irrigationSystem(_:))
  {
    if (v8 != enum case for ServiceKind.lightbulb(_:))
    {
      if (v8 == enum case for ServiceKind.microphone(_:))
      {
LABEL_14:
        v9 = (unsigned int *)&enum case for CharacteristicKind.mute(_:);
        goto LABEL_8;
      }
      if (v8 != enum case for ServiceKind.outlet(_:))
      {
        if (v8 == enum case for ServiceKind.speaker(_:))
          goto LABEL_14;
        if (v8 != enum case for ServiceKind.switch(_:))
        {
          if (v8 != enum case for ServiceKind.targetControl(_:)
            && v8 != enum case for ServiceKind.television(_:)
            && v8 != enum case for ServiceKind.valve(_:)
            && v8 != enum case for ServiceKind.ventilationFan(_:))
          {
            v14 = type metadata accessor for CharacteristicKind(0);
            (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 56))(a1, 1, 1, v14);
            return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
          }
          goto LABEL_7;
        }
      }
    }
    v9 = (unsigned int *)&enum case for CharacteristicKind.powerState(_:);
    goto LABEL_8;
  }
LABEL_7:
  v9 = (unsigned int *)&enum case for CharacteristicKind.active(_:);
LABEL_8:
  v10 = *v9;
  v11 = type metadata accessor for CharacteristicKind(0);
  v12 = *(_QWORD *)(v11 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v12 + 104))(a1, v10, v11);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v12 + 56))(a1, 0, 1, v11);
}

uint64_t ServiceKind.widgetTargetCharacteristicType.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  int v8;
  unsigned int *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v2 = v1;
  v4 = type metadata accessor for ServiceKind(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin();
  v7 = (char *)&v18 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, v2, v4);
  v8 = (*(uint64_t (**)(char *, uint64_t))(v5 + 88))(v7, v4);
  if (v8 != enum case for ServiceKind.door(_:))
  {
    if (v8 == enum case for ServiceKind.faucet(_:))
      goto LABEL_4;
    if (v8 == enum case for ServiceKind.garageDoorOpener(_:))
    {
      v9 = (unsigned int *)&enum case for CharacteristicKind.targetDoorState(_:);
      goto LABEL_17;
    }
    if (v8 == enum case for ServiceKind.heaterCooler(_:))
    {
      v9 = (unsigned int *)&enum case for CharacteristicKind.targetHeaterCoolerState(_:);
      goto LABEL_17;
    }
    if (v8 == enum case for ServiceKind.humidifierDehumidifier(_:))
    {
      v9 = (unsigned int *)&enum case for CharacteristicKind.targetHumidifierDehumidifierState(_:);
      goto LABEL_17;
    }
    if (v8 == enum case for ServiceKind.lockMechanism(_:))
    {
      v9 = (unsigned int *)&enum case for CharacteristicKind.targetLockMechanismState(_:);
      goto LABEL_17;
    }
    if (v8 == enum case for ServiceKind.securitySystem(_:))
    {
      v9 = (unsigned int *)&enum case for CharacteristicKind.targetSecuritySystemState(_:);
      goto LABEL_17;
    }
    if (v8 == enum case for ServiceKind.thermostat(_:))
    {
      v9 = (unsigned int *)&enum case for CharacteristicKind.targetHeatingCoolingMode(_:);
      goto LABEL_17;
    }
    if (v8 == enum case for ServiceKind.valve(_:))
    {
LABEL_4:
      v9 = (unsigned int *)&enum case for CharacteristicKind.active(_:);
      goto LABEL_17;
    }
    if (v8 != enum case for ServiceKind.window(_:) && v8 != enum case for ServiceKind.windowCovering(_:))
    {
      v15 = enum case for CharacteristicKind.active(_:);
      v16 = type metadata accessor for CharacteristicKind(0);
      v17 = *(_QWORD *)(v16 - 8);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v17 + 104))(a1, v15, v16);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v17 + 56))(a1, 0, 1, v16);
      return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    }
  }
  v9 = (unsigned int *)&enum case for CharacteristicKind.targetPosition(_:);
LABEL_17:
  v10 = *v9;
  v11 = type metadata accessor for CharacteristicKind(0);
  v12 = *(_QWORD *)(v11 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v12 + 104))(a1, v10, v11);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v12 + 56))(a1, 0, 1, v11);
}

uint64_t ServiceKind.widgetCurrentCharacteristicType.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  int v8;
  unsigned int *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v2 = v1;
  v4 = type metadata accessor for ServiceKind(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin();
  v7 = (char *)&v18 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, v2, v4);
  v8 = (*(uint64_t (**)(char *, uint64_t))(v5 + 88))(v7, v4);
  if (v8 != enum case for ServiceKind.door(_:))
  {
    if (v8 == enum case for ServiceKind.garageDoorOpener(_:))
    {
      v9 = (unsigned int *)&enum case for CharacteristicKind.currentDoorState(_:);
      goto LABEL_11;
    }
    if (v8 == enum case for ServiceKind.lockMechanism(_:))
    {
      v9 = (unsigned int *)&enum case for CharacteristicKind.currentLockMechanismState(_:);
      goto LABEL_11;
    }
    if (v8 == enum case for ServiceKind.securitySystem(_:))
    {
      v9 = (unsigned int *)&enum case for CharacteristicKind.currentSecuritySystemState(_:);
      goto LABEL_11;
    }
    if (v8 == enum case for ServiceKind.thermostat(_:))
    {
      v9 = (unsigned int *)&enum case for CharacteristicKind.currentHeatingCooling(_:);
      goto LABEL_11;
    }
    if (v8 != enum case for ServiceKind.window(_:) && v8 != enum case for ServiceKind.windowCovering(_:))
    {
      v15 = enum case for CharacteristicKind.powerState(_:);
      v16 = type metadata accessor for CharacteristicKind(0);
      v17 = *(_QWORD *)(v16 - 8);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v17 + 104))(a1, v15, v16);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v17 + 56))(a1, 0, 1, v16);
      return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    }
  }
  v9 = (unsigned int *)&enum case for CharacteristicKind.currentPosition(_:);
LABEL_11:
  v10 = *v9;
  v11 = type metadata accessor for CharacteristicKind(0);
  v12 = *(_QWORD *)(v11 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v12 + 104))(a1, v10, v11);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v12 + 56))(a1, 0, 1, v11);
}

uint64_t ServiceKind.widgetDisplayCharacteristicType.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(uint64_t, _QWORD, uint64_t);
  uint64_t v16;
  unsigned int *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int *v24;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;

  v1 = v0;
  v2 = type metadata accessor for ServiceKind(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v64 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v5, v1, v2);
  v6 = (*(uint64_t (**)(char *, uint64_t))(v3 + 88))(v5, v2);
  if (v6 == enum case for ServiceKind.airPurifier(_:))
    goto LABEL_6;
  if (v6 != enum case for ServiceKind.door(_:))
  {
    if (v6 != enum case for ServiceKind.fan(_:))
    {
      if (v6 == enum case for ServiceKind.garageDoorOpener(_:))
      {
        v26 = sub_10000527C(&qword_1000A4FE8);
        v19 = type metadata accessor for CharacteristicKind(0);
        v20 = *(_QWORD *)(v19 - 8);
        v27 = *(unsigned __int8 *)(v20 + 80);
        v28 = (v27 + 32) & ~v27;
        v13 = swift_allocObject(v26, v28 + *(_QWORD *)(v20 + 72), v27 | 7);
        *(_OWORD *)(v13 + 16) = xmmword_100086C80;
        v23 = v13 + v28;
        v24 = (unsigned int *)&enum case for CharacteristicKind.obstructionDetected(_:);
        goto LABEL_7;
      }
      if (v6 == enum case for ServiceKind.heaterCooler(_:))
      {
        v29 = sub_10000527C(&qword_1000A4FE8);
        v8 = type metadata accessor for CharacteristicKind(0);
        v30 = *(_QWORD *)(v8 - 8);
        v31 = *(_QWORD *)(v30 + 72);
        v32 = *(unsigned __int8 *)(v30 + 80);
        v33 = (v32 + 32) & ~v32;
        v13 = swift_allocObject(v29, v33 + 4 * v31, v32 | 7);
        *(_OWORD *)(v13 + 16) = xmmword_100086CB0;
        v34 = v13 + v33;
        v15 = *(void (**)(uint64_t, _QWORD, uint64_t))(v30 + 104);
        v15(v34, enum case for CharacteristicKind.currentTemperature(_:), v8);
        v15(v34 + v31, enum case for CharacteristicKind.currentHeaterCoolerState(_:), v8);
        v15(v34 + 2 * v31, enum case for CharacteristicKind.heatingThreshold(_:), v8);
        v16 = v34 + 3 * v31;
      }
      else
      {
        if (v6 == enum case for ServiceKind.humidifierDehumidifier(_:))
        {
          v35 = sub_10000527C(&qword_1000A4FE8);
          v8 = type metadata accessor for CharacteristicKind(0);
          v36 = *(_QWORD *)(v8 - 8);
          v37 = *(_QWORD *)(v36 + 72);
          v38 = *(unsigned __int8 *)(v36 + 80);
          v39 = (v38 + 32) & ~v38;
          v13 = swift_allocObject(v35, v39 + 5 * v37, v38 | 7);
          *(_OWORD *)(v13 + 16) = xmmword_100086C90;
          v40 = v13 + v39;
          v15 = *(void (**)(uint64_t, _QWORD, uint64_t))(v36 + 104);
          v15(v40, enum case for CharacteristicKind.active(_:), v8);
          v15(v40 + v37, enum case for CharacteristicKind.rotationSpeed(_:), v8);
          v15(v40 + 2 * v37, enum case for CharacteristicKind.humidifierThreshold(_:), v8);
          v15(v40 + 3 * v37, enum case for CharacteristicKind.dehumidifierThreshold(_:), v8);
          v16 = v40 + 4 * v37;
          v17 = (unsigned int *)&enum case for CharacteristicKind.currentHumidifierDehumidifierState(_:);
          goto LABEL_4;
        }
        if (v6 == enum case for ServiceKind.irrigationSystem(_:))
        {
          v41 = sub_10000527C(&qword_1000A4FE8);
          v8 = type metadata accessor for CharacteristicKind(0);
          v42 = *(_QWORD *)(v8 - 8);
          v43 = *(_QWORD *)(v42 + 72);
          v44 = *(unsigned __int8 *)(v42 + 80);
          v45 = (v44 + 32) & ~v44;
          v13 = swift_allocObject(v41, v45 + 2 * v43, v44 | 7);
          *(_OWORD *)(v13 + 16) = xmmword_100086CA0;
          v46 = v13 + v45;
          v15 = *(void (**)(uint64_t, _QWORD, uint64_t))(v42 + 104);
          v15(v46, enum case for CharacteristicKind.inUse(_:), v8);
          v16 = v46 + v43;
          v17 = (unsigned int *)&enum case for CharacteristicKind.programMode(_:);
          goto LABEL_4;
        }
        if (v6 == enum case for ServiceKind.lightbulb(_:))
        {
          v47 = sub_10000527C(&qword_1000A4FE8);
          v19 = type metadata accessor for CharacteristicKind(0);
          v20 = *(_QWORD *)(v19 - 8);
          v48 = *(unsigned __int8 *)(v20 + 80);
          v49 = (v48 + 32) & ~v48;
          v13 = swift_allocObject(v47, v49 + *(_QWORD *)(v20 + 72), v48 | 7);
          *(_OWORD *)(v13 + 16) = xmmword_100086C80;
          v23 = v13 + v49;
          v24 = (unsigned int *)&enum case for CharacteristicKind.brightness(_:);
          goto LABEL_7;
        }
        if (v6 != enum case for ServiceKind.thermostat(_:))
        {
          if (v6 == enum case for ServiceKind.valve(_:))
          {
            v56 = sub_10000527C(&qword_1000A4FE8);
            v19 = type metadata accessor for CharacteristicKind(0);
            v20 = *(_QWORD *)(v19 - 8);
            v57 = *(unsigned __int8 *)(v20 + 80);
            v58 = (v57 + 32) & ~v57;
            v13 = swift_allocObject(v56, v58 + *(_QWORD *)(v20 + 72), v57 | 7);
            *(_OWORD *)(v13 + 16) = xmmword_100086C80;
            v23 = v13 + v58;
            v24 = (unsigned int *)&enum case for CharacteristicKind.inUse(_:);
            goto LABEL_7;
          }
          if (v6 != enum case for ServiceKind.ventilationFan(_:))
          {
            if (v6 != enum case for ServiceKind.window(_:) && v6 != enum case for ServiceKind.windowCovering(_:))
            {
              v59 = sub_10000527C(&qword_1000A4FE8);
              v60 = type metadata accessor for CharacteristicKind(0);
              v61 = *(_QWORD *)(v60 - 8);
              v62 = *(unsigned __int8 *)(v61 + 80);
              v63 = (v62 + 32) & ~v62;
              v13 = swift_allocObject(v59, v63 + *(_QWORD *)(v61 + 72), v62 | 7);
              *(_OWORD *)(v13 + 16) = xmmword_100086C80;
              (*(void (**)(uint64_t, _QWORD, uint64_t))(v61 + 104))(v13 + v63, enum case for CharacteristicKind.powerState(_:), v60);
              (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
              return v13;
            }
            goto LABEL_3;
          }
          goto LABEL_6;
        }
        v50 = sub_10000527C(&qword_1000A4FE8);
        v8 = type metadata accessor for CharacteristicKind(0);
        v51 = *(_QWORD *)(v8 - 8);
        v52 = *(_QWORD *)(v51 + 72);
        v53 = *(unsigned __int8 *)(v51 + 80);
        v54 = (v53 + 32) & ~v53;
        v13 = swift_allocObject(v50, v54 + 5 * v52, v53 | 7);
        *(_OWORD *)(v13 + 16) = xmmword_100086C90;
        v55 = v13 + v54;
        v15 = *(void (**)(uint64_t, _QWORD, uint64_t))(v51 + 104);
        v15(v55, enum case for CharacteristicKind.currentTemperature(_:), v8);
        v15(v55 + v52, enum case for CharacteristicKind.targetTemperature(_:), v8);
        v15(v55 + 2 * v52, enum case for CharacteristicKind.currentHeatingCooling(_:), v8);
        v15(v55 + 3 * v52, enum case for CharacteristicKind.heatingThreshold(_:), v8);
        v16 = v55 + 4 * v52;
      }
      v17 = (unsigned int *)&enum case for CharacteristicKind.coolingThreshold(_:);
      goto LABEL_4;
    }
LABEL_6:
    v18 = sub_10000527C(&qword_1000A4FE8);
    v19 = type metadata accessor for CharacteristicKind(0);
    v20 = *(_QWORD *)(v19 - 8);
    v21 = *(unsigned __int8 *)(v20 + 80);
    v22 = (v21 + 32) & ~v21;
    v13 = swift_allocObject(v18, v22 + *(_QWORD *)(v20 + 72), v21 | 7);
    *(_OWORD *)(v13 + 16) = xmmword_100086C80;
    v23 = v13 + v22;
    v24 = (unsigned int *)&enum case for CharacteristicKind.rotationSpeed(_:);
LABEL_7:
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v20 + 104))(v23, *v24, v19);
    return v13;
  }
LABEL_3:
  v7 = sub_10000527C(&qword_1000A4FE8);
  v8 = type metadata accessor for CharacteristicKind(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(_QWORD *)(v9 + 72);
  v11 = *(unsigned __int8 *)(v9 + 80);
  v12 = (v11 + 32) & ~v11;
  v13 = swift_allocObject(v7, v12 + 2 * v10, v11 | 7);
  *(_OWORD *)(v13 + 16) = xmmword_100086CA0;
  v14 = v13 + v12;
  v15 = *(void (**)(uint64_t, _QWORD, uint64_t))(v9 + 104);
  v15(v14, enum case for CharacteristicKind.positionState(_:), v8);
  v16 = v14 + v10;
  v17 = (unsigned int *)&enum case for CharacteristicKind.obstructionDetected(_:);
LABEL_4:
  v15(v16, *v17, v8);
  return v13;
}

void *ServiceKind.widgetRelevantCharacteristic.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  unsigned int (*v22)(char *, uint64_t, uint64_t);
  void (*v23)(char *, uint64_t);
  char *v24;
  void (*v25)(char *, uint64_t);
  uint64_t v26;
  char *v27;
  void (*v28)(char *, uint64_t);
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  void (*v34)(char *, unint64_t, uint64_t);
  char *v36;
  char *v37;
  uint64_t v38;
  void *v39;

  v0 = sub_10000527C(&qword_1000A4FF0);
  v1 = __chkstk_darwin(v0);
  v38 = (uint64_t)&v36 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = __chkstk_darwin(v1);
  v5 = (char *)&v36 - v4;
  __chkstk_darwin(v3);
  v7 = (char *)&v36 - v6;
  v8 = type metadata accessor for CharacteristicKind(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = __chkstk_darwin(v8);
  v37 = (char *)&v36 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __chkstk_darwin(v10);
  v36 = (char *)&v36 - v13;
  v14 = __chkstk_darwin(v12);
  v16 = (char *)&v36 - v15;
  v17 = __chkstk_darwin(v14);
  v19 = (char *)&v36 - v18;
  __chkstk_darwin(v17);
  v21 = (char *)&v36 - v20;
  v39 = &_swiftEmptySetSingleton;
  ServiceKind.widgetTogglingCharacteristicKind.getter((uint64_t)v7);
  v22 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48);
  if (v22(v7, 1, v8) == 1)
  {
    sub_1000066D8((uint64_t)v7);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v21, v7, v8);
    (*(void (**)(char *, char *, uint64_t))(v9 + 16))(v16, v21, v8);
    sub_100006718((uint64_t)v19, v16);
    v23 = *(void (**)(char *, uint64_t))(v9 + 8);
    v23(v19, v8);
    v23(v21, v8);
  }
  ServiceKind.widgetTargetCharacteristicType.getter((uint64_t)v5);
  if (v22(v5, 1, v8) == 1)
  {
    sub_1000066D8((uint64_t)v5);
  }
  else
  {
    v24 = v36;
    (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v36, v5, v8);
    (*(void (**)(char *, char *, uint64_t))(v9 + 16))(v16, v24, v8);
    sub_100006718((uint64_t)v19, v16);
    v25 = *(void (**)(char *, uint64_t))(v9 + 8);
    v25(v19, v8);
    v25(v24, v8);
  }
  v26 = v38;
  ServiceKind.widgetCurrentCharacteristicType.getter(v38);
  if (v22((char *)v26, 1, v8) == 1)
  {
    sub_1000066D8(v26);
  }
  else
  {
    v27 = v37;
    (*(void (**)(char *, uint64_t, uint64_t))(v9 + 32))(v37, v26, v8);
    (*(void (**)(char *, char *, uint64_t))(v9 + 16))(v16, v27, v8);
    sub_100006718((uint64_t)v19, v16);
    v28 = *(void (**)(char *, uint64_t))(v9 + 8);
    v28(v19, v8);
    v28(v27, v8);
  }
  v29 = ServiceKind.widgetDisplayCharacteristicType.getter();
  if (v29)
  {
    v30 = v29;
    v31 = *(_QWORD *)(v29 + 16);
    if (v31)
    {
      v32 = v29 + ((*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80));
      v33 = *(_QWORD *)(v9 + 72);
      v34 = *(void (**)(char *, unint64_t, uint64_t))(v9 + 16);
      do
      {
        v34(v16, v32, v8);
        sub_100006718((uint64_t)v19, v16);
        (*(void (**)(char *, uint64_t))(v9 + 8))(v19, v8);
        v32 += v33;
        --v31;
      }
      while (v31);
    }
    swift_bridgeObjectRelease(v30);
  }
  return v39;
}

uint64_t sub_1000066D8(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_10000527C(&qword_1000A4FF0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_100006718(uint64_t a1, char *a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(_QWORD, _QWORD, _QWORD);
  uint64_t v21;
  void (*v22)(_QWORD, _QWORD, _QWORD);
  uint64_t v23;
  char v24;
  void (*v25)(char *, uint64_t);
  uint64_t v26;
  char isUniquelyReferenced_nonNull_native;
  char *v28;
  uint64_t v29;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;

  v3 = v2;
  v6 = type metadata accessor for CharacteristicKind(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v31 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *v3;
  v11 = *(_QWORD *)(*v3 + 40);
  v13 = sub_100008C7C(&qword_1000A5008, v12, (uint64_t)&protocol conformance descriptor for CharacteristicKind);
  swift_bridgeObjectRetain(v10);
  v35 = a2;
  v14 = dispatch thunk of Hashable._rawHashValue(seed:)(v11, v6, v13);
  v15 = -1 << *(_BYTE *)(v10 + 32);
  v16 = v14 & ~v15;
  v17 = v10;
  v18 = v10 + 56;
  if (((*(_QWORD *)(v10 + 56 + ((v16 >> 3) & 0xFFFFFFFFFFFFF8)) >> v16) & 1) != 0)
  {
    v31 = v3;
    v32 = a1;
    v33 = ~v15;
    v34 = v7;
    v19 = *(_QWORD *)(v7 + 72);
    v20 = *(void (**)(_QWORD, _QWORD, _QWORD))(v7 + 16);
    while (1)
    {
      v21 = v17;
      v22 = v20;
      v20(v9, *(_QWORD *)(v17 + 48) + v19 * v16, v6);
      v23 = sub_100008C7C(&qword_1000A5010, (uint64_t (*)(uint64_t))&type metadata accessor for CharacteristicKind, (uint64_t)&protocol conformance descriptor for CharacteristicKind);
      v24 = dispatch thunk of static Equatable.== infix(_:_:)(v9, v35, v6, v23);
      v25 = *(void (**)(char *, uint64_t))(v34 + 8);
      v25(v9, v6);
      if ((v24 & 1) != 0)
        break;
      v16 = (v16 + 1) & v33;
      v17 = v21;
      v20 = v22;
      if (((*(_QWORD *)(v18 + ((v16 >> 3) & 0xFFFFFFFFFFFFF8)) >> v16) & 1) == 0)
      {
        swift_bridgeObjectRelease(v21);
        v3 = v31;
        a1 = v32;
        v26 = v34;
        goto LABEL_7;
      }
    }
    swift_bridgeObjectRelease(v21);
    v25(v35, v6);
    v22(v32, *(_QWORD *)(*v31 + 48) + v19 * v16, v6);
    return 0;
  }
  else
  {
    swift_bridgeObjectRelease(v10);
    v20 = *(void (**)(_QWORD, _QWORD, _QWORD))(v7 + 16);
    v26 = v7;
LABEL_7:
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
    v28 = v35;
    v20(v9, v35, v6);
    v36 = *v3;
    *v3 = 0x8000000000000000;
    sub_100007BE4((uint64_t)v9, v16, isUniquelyReferenced_nonNull_native);
    v29 = *v3;
    *v3 = v36;
    swift_bridgeObjectRelease(v29);
    (*(void (**)(uint64_t, char *, uint64_t))(v26 + 32))(a1, v28, v6);
    return 1;
  }
}

uint64_t sub_100006974(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  Swift::Int v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v18;
  uint64_t v20;
  _QWORD v21[9];

  v3 = v2;
  v6 = type metadata accessor for WidgetTileInfo(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v21[-1] - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *v2;
  Hasher.init(_seed:)(v21, *(_QWORD *)(*v2 + 40));
  swift_bridgeObjectRetain(v10);
  sub_100019DE4((uint64_t)v21);
  v11 = Hasher._finalize()();
  v12 = -1 << *(_BYTE *)(v10 + 32);
  v13 = v11 & ~v12;
  if (((*(_QWORD *)(v10 + 56 + ((v13 >> 3) & 0xFFFFFFFFFFFFF8)) >> v13) & 1) != 0)
  {
    v20 = a1;
    v14 = ~v12;
    v15 = *(_QWORD *)(v7 + 72);
    while (1)
    {
      sub_100008BB8(*(_QWORD *)(v10 + 48) + v15 * v13, (uint64_t)v9);
      v16 = sub_10001AB38((uint64_t)v9, a2);
      sub_100008BFC((uint64_t)v9);
      if ((v16 & 1) != 0)
        break;
      v13 = (v13 + 1) & v14;
      if (((*(_QWORD *)(v10 + 56 + ((v13 >> 3) & 0xFFFFFFFFFFFFF8)) >> v13) & 1) == 0)
      {
        swift_bridgeObjectRelease(v10);
        a1 = v20;
        goto LABEL_7;
      }
    }
    swift_bridgeObjectRelease(v10);
    sub_100008BFC(a2);
    sub_100008BB8(*(_QWORD *)(*v3 + 48) + v15 * v13, v20);
    return 0;
  }
  else
  {
    swift_bridgeObjectRelease(v10);
LABEL_7:
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
    sub_100008BB8(a2, (uint64_t)v9);
    v21[0] = *v3;
    *v3 = 0x8000000000000000;
    sub_100007E28((uint64_t)v9, v13, isUniquelyReferenced_nonNull_native);
    v18 = *v3;
    *v3 = v21[0];
    swift_bridgeObjectRelease(v18);
    sub_100008C38(a2, a1);
    return 1;
  }
}

uint64_t sub_100006B40(Swift::Int *a1, void *a2)
{
  return sub_100006B88(a1, a2, &qword_1000A5030, HMAccessory_ptr, &qword_1000A5038, (void (*)(uint64_t))sub_100010C38);
}

uint64_t sub_100006B64(Swift::Int *a1, void *a2)
{
  return sub_100006B88(a1, a2, &qword_1000A5040, HMCharacteristic_ptr, &qword_1000A5048, (void (*)(uint64_t))sub_100010C44);
}

uint64_t sub_100006B88(Swift::Int *a1, void *a2, unint64_t *a3, _QWORD *a4, uint64_t *a5, void (*a6)(uint64_t))
{
  uint64_t *v6;
  uint64_t *v10;
  uint64_t v13;
  uint64_t v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t result;
  Swift::Int v19;
  Swift::Int v20;
  uint64_t v21;
  unint64_t v22;
  id v23;
  char v24;
  uint64_t v25;
  id v26;
  char v27;
  void *v28;
  id v29;
  Swift::Int v30;
  unint64_t v31;
  uint64_t v32;
  id v33;
  char isUniquelyReferenced_nonNull_native;
  id v35;
  uint64_t v36;
  uint64_t v37;
  id v38;
  uint64_t v39;
  _QWORD *v41;
  uint64_t v44;
  Swift::Int v45;

  v10 = v6;
  v13 = *v6;
  if ((*v6 & 0xC000000000000001) != 0)
  {
    if (v13 < 0)
      v14 = *v6;
    else
      v14 = v13 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(*v6);
    v15 = a2;
    v16 = __CocoaSet.member(for:)();

    if (v16)
    {
      swift_bridgeObjectRelease(v13);

      v44 = v16;
      v17 = sub_100008CBC(0, a3, a4);
      swift_unknownObjectRetain(v16);
      swift_dynamicCast(&v45, &v44, (char *)&type metadata for Swift.AnyObject + 8, v17, 7);
      *a1 = v45;
      swift_unknownObjectRelease(v16);
      return 0;
    }
    result = __CocoaSet.count.getter(v14);
    if (__OFADD__(result, 1))
    {
      __break(1u);
      return result;
    }
    v30 = sub_1000070B4(v14, result + 1, a5, a3, a4);
    v45 = v30;
    v31 = *(_QWORD *)(v30 + 16);
    if (*(_QWORD *)(v30 + 24) <= v31)
    {
      v37 = v31 + 1;
      v38 = v15;
      sub_10000756C(v37, a5);
      v32 = v45;
    }
    else
    {
      v32 = v30;
      v33 = v15;
    }
    sub_100007B64((uint64_t)v15, v32);
    v39 = *v10;
    *v10 = v32;
    swift_bridgeObjectRelease(v39);
    *a1 = (Swift::Int)v15;
  }
  else
  {
    v19 = *(_QWORD *)(v13 + 40);
    swift_bridgeObjectRetain(v13);
    v20 = NSObject._rawHashValue(seed:)(v19);
    v21 = -1 << *(_BYTE *)(v13 + 32);
    v22 = v20 & ~v21;
    v41 = a4;
    if (((*(_QWORD *)(v13 + 56 + ((v22 >> 3) & 0xFFFFFFFFFFFFF8)) >> v22) & 1) != 0)
    {
      sub_100008CBC(0, a3, a4);
      v23 = *(id *)(*(_QWORD *)(v13 + 48) + 8 * v22);
      v24 = static NSObject.== infix(_:_:)(v23, a2);

      if ((v24 & 1) != 0)
      {
LABEL_12:

        swift_bridgeObjectRelease(v13);
        v28 = *(void **)(*(_QWORD *)(*v10 + 48) + 8 * v22);
        *a1 = (Swift::Int)v28;
        v29 = v28;
        return 0;
      }
      v25 = ~v21;
      while (1)
      {
        v22 = (v22 + 1) & v25;
        if (((*(_QWORD *)(v13 + 56 + ((v22 >> 3) & 0xFFFFFFFFFFFFF8)) >> v22) & 1) == 0)
          break;
        v26 = *(id *)(*(_QWORD *)(v13 + 48) + 8 * v22);
        v27 = static NSObject.== infix(_:_:)(v26, a2);

        if ((v27 & 1) != 0)
          goto LABEL_12;
      }
    }
    swift_bridgeObjectRelease(v13);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v10);
    v45 = *v10;
    *v10 = 0x8000000000000000;
    v35 = a2;
    sub_100007FE4((uint64_t)v35, v22, isUniquelyReferenced_nonNull_native, a5, a3, v41, a6);
    v36 = *v10;
    *v10 = v45;
    swift_bridgeObjectRelease(v36);
    *a1 = (Swift::Int)v35;
  }
  return 1;
}

uint64_t sub_100006E58(uint64_t a1, char *a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(_QWORD, _QWORD, _QWORD);
  uint64_t v21;
  void (*v22)(_QWORD, _QWORD, _QWORD);
  uint64_t v23;
  char v24;
  void (*v25)(char *, uint64_t);
  uint64_t v26;
  char isUniquelyReferenced_nonNull_native;
  char *v28;
  uint64_t v29;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;

  v3 = v2;
  v6 = type metadata accessor for UUID(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v31 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *v3;
  v11 = *(_QWORD *)(*v3 + 40);
  v13 = sub_100008C7C((unint64_t *)&qword_1000A5020, v12, (uint64_t)&protocol conformance descriptor for UUID);
  swift_bridgeObjectRetain(v10);
  v35 = a2;
  v14 = dispatch thunk of Hashable._rawHashValue(seed:)(v11, v6, v13);
  v15 = -1 << *(_BYTE *)(v10 + 32);
  v16 = v14 & ~v15;
  v17 = v10;
  v18 = v10 + 56;
  if (((*(_QWORD *)(v10 + 56 + ((v16 >> 3) & 0xFFFFFFFFFFFFF8)) >> v16) & 1) != 0)
  {
    v31 = v3;
    v32 = a1;
    v33 = ~v15;
    v34 = v7;
    v19 = *(_QWORD *)(v7 + 72);
    v20 = *(void (**)(_QWORD, _QWORD, _QWORD))(v7 + 16);
    while (1)
    {
      v21 = v17;
      v22 = v20;
      v20(v9, *(_QWORD *)(v17 + 48) + v19 * v16, v6);
      v23 = sub_100008C7C((unint64_t *)&unk_1000A7670, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v24 = dispatch thunk of static Equatable.== infix(_:_:)(v9, v35, v6, v23);
      v25 = *(void (**)(char *, uint64_t))(v34 + 8);
      v25(v9, v6);
      if ((v24 & 1) != 0)
        break;
      v16 = (v16 + 1) & v33;
      v17 = v21;
      v20 = v22;
      if (((*(_QWORD *)(v18 + ((v16 >> 3) & 0xFFFFFFFFFFFFF8)) >> v16) & 1) == 0)
      {
        swift_bridgeObjectRelease(v21);
        v3 = v31;
        a1 = v32;
        v26 = v34;
        goto LABEL_7;
      }
    }
    swift_bridgeObjectRelease(v21);
    v25(v35, v6);
    v22(v32, *(_QWORD *)(*v31 + 48) + v19 * v16, v6);
    return 0;
  }
  else
  {
    swift_bridgeObjectRelease(v10);
    v20 = *(void (**)(_QWORD, _QWORD, _QWORD))(v7 + 16);
    v26 = v7;
LABEL_7:
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
    v28 = v35;
    v20(v9, v35, v6);
    v36 = *v3;
    *v3 = 0x8000000000000000;
    sub_100008170((uint64_t)v9, v16, isUniquelyReferenced_nonNull_native);
    v29 = *v3;
    *v3 = v36;
    swift_bridgeObjectRelease(v29);
    (*(void (**)(uint64_t, char *, uint64_t))(v26 + 32))(a1, v28, v6);
    return 1;
  }
}

Swift::Int sub_1000070B4(uint64_t a1, uint64_t a2, uint64_t *a3, unint64_t *a4, _QWORD *a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  Swift::Int result;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  char v23;
  unint64_t v24;
  BOOL v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  if (a2)
  {
    sub_10000527C(a3);
    v10 = static _SetStorage.convert(_:capacity:)(a1, a2);
    v29 = v10;
    v11 = __CocoaSet.makeIterator()(a1);
    v12 = __CocoaSet.Iterator.next()(v11);
    if (v12)
    {
      v13 = v12;
      v14 = sub_100008CBC(0, a4, a5);
      do
      {
        v27 = v13;
        swift_dynamicCast(&v28, &v27, (char *)&type metadata for Swift.AnyObject + 8, v14, 7);
        v10 = v29;
        v22 = *(_QWORD *)(v29 + 16);
        if (*(_QWORD *)(v29 + 24) <= v22)
        {
          sub_10000756C(v22 + 1, a3);
          v10 = v29;
        }
        v15 = v28;
        result = NSObject._rawHashValue(seed:)(*(_QWORD *)(v10 + 40));
        v17 = v10 + 56;
        v18 = -1 << *(_BYTE *)(v10 + 32);
        v19 = result & ~v18;
        v20 = v19 >> 6;
        if (((-1 << v19) & ~*(_QWORD *)(v10 + 56 + 8 * (v19 >> 6))) != 0)
        {
          v21 = __clz(__rbit64((-1 << v19) & ~*(_QWORD *)(v10 + 56 + 8 * (v19 >> 6)))) | v19 & 0x7FFFFFFFFFFFFFC0;
        }
        else
        {
          v23 = 0;
          v24 = (unint64_t)(63 - v18) >> 6;
          do
          {
            if (++v20 == v24 && (v23 & 1) != 0)
            {
              __break(1u);
              return result;
            }
            v25 = v20 == v24;
            if (v20 == v24)
              v20 = 0;
            v23 |= v25;
            v26 = *(_QWORD *)(v17 + 8 * v20);
          }
          while (v26 == -1);
          v21 = __clz(__rbit64(~v26)) + (v20 << 6);
        }
        *(_QWORD *)(v17 + ((v21 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v21;
        *(_QWORD *)(*(_QWORD *)(v10 + 48) + 8 * v21) = v15;
        ++*(_QWORD *)(v10 + 16);
        v13 = __CocoaSet.Iterator.next()(result);
      }
      while (v13);
    }
    swift_release(v11);
  }
  else
  {
    swift_unknownObjectRelease(a1);
    return (Swift::Int)&_swiftEmptySetSingleton;
  }
  return v10;
}

uint64_t sub_1000072B4(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  int64_t v15;
  uint64_t v16;
  uint64_t result;
  int64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  Swift::Int v22;
  unint64_t v23;
  int64_t v24;
  unint64_t v25;
  int64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  _QWORD *v30;
  _QWORD v31[9];

  v2 = v1;
  v4 = type metadata accessor for WidgetTileInfo(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v28 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *v2;
  if (*(_QWORD *)(*v2 + 24) > a1)
    a1 = *(_QWORD *)(*v2 + 24);
  sub_10000527C(&qword_1000A4FF8);
  v9 = static _SetStorage.resize(original:capacity:move:)(v8, a1, 1);
  v10 = v9;
  if (!*(_QWORD *)(v8 + 16))
    goto LABEL_29;
  v11 = 1 << *(_BYTE *)(v8 + 32);
  v12 = *(_QWORD *)(v8 + 56);
  v29 = v2;
  v30 = (_QWORD *)(v8 + 56);
  if (v11 < 64)
    v13 = ~(-1 << v11);
  else
    v13 = -1;
  v14 = v13 & v12;
  v15 = (unint64_t)(v11 + 63) >> 6;
  v16 = v9 + 56;
  result = swift_retain(v8);
  v18 = 0;
  while (1)
  {
    if (v14)
    {
      v19 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      v20 = v19 | (v18 << 6);
      goto LABEL_9;
    }
    v24 = v18 + 1;
    if (__OFADD__(v18, 1))
    {
      __break(1u);
LABEL_31:
      __break(1u);
      return result;
    }
    if (v24 >= v15)
      goto LABEL_25;
    v25 = v30[v24];
    ++v18;
    if (!v25)
    {
      v18 = v24 + 1;
      if (v24 + 1 >= v15)
        goto LABEL_25;
      v25 = v30[v18];
      if (!v25)
      {
        v18 = v24 + 2;
        if (v24 + 2 >= v15)
          goto LABEL_25;
        v25 = v30[v18];
        if (!v25)
          break;
      }
    }
LABEL_24:
    v14 = (v25 - 1) & v25;
    v20 = __clz(__rbit64(v25)) + (v18 << 6);
LABEL_9:
    v21 = *(_QWORD *)(v5 + 72);
    sub_100008C38(*(_QWORD *)(v8 + 48) + v21 * v20, (uint64_t)v7);
    Hasher.init(_seed:)(v31, *(_QWORD *)(v10 + 40));
    sub_100019DE4((uint64_t)v31);
    v22 = Hasher._finalize()();
    v23 = _HashTable.nextHole(atOrAfter:)(v22 & ~(-1 << *(_BYTE *)(v10 + 32)), v10 + 56, ~(-1 << *(_BYTE *)(v10 + 32)));
    *(_QWORD *)(v16 + ((v23 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v23;
    result = sub_100008C38((uint64_t)v7, *(_QWORD *)(v10 + 48) + v23 * v21);
    ++*(_QWORD *)(v10 + 16);
  }
  v26 = v24 + 3;
  if (v26 < v15)
  {
    v25 = v30[v26];
    if (!v25)
    {
      while (1)
      {
        v18 = v26 + 1;
        if (__OFADD__(v26, 1))
          goto LABEL_31;
        if (v18 >= v15)
          goto LABEL_25;
        v25 = v30[v18];
        ++v26;
        if (v25)
          goto LABEL_24;
      }
    }
    v18 = v26;
    goto LABEL_24;
  }
LABEL_25:
  swift_release(v8);
  v27 = 1 << *(_BYTE *)(v8 + 32);
  if (v27 > 63)
    bzero(v30, ((unint64_t)(v27 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v30 = -1 << v27;
  v2 = v29;
  *(_QWORD *)(v8 + 16) = 0;
LABEL_29:
  result = swift_release(v8);
  *v2 = v10;
  return result;
}

Swift::Int sub_100007560(uint64_t a1)
{
  return sub_10000756C(a1, &qword_1000A5000);
}

Swift::Int sub_10000756C(uint64_t a1, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  unint64_t v11;
  int64_t v12;
  uint64_t v13;
  Swift::Int result;
  int64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  int64_t v19;
  unint64_t v20;
  int64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;

  v3 = v2;
  v4 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v5 = a1;
  else
    v5 = *(_QWORD *)(*v2 + 24);
  sub_10000527C(a2);
  v6 = static _SetStorage.resize(original:capacity:move:)(v4, v5, 1);
  v7 = v6;
  if (*(_QWORD *)(v4 + 16))
  {
    v31 = v3;
    v8 = 1 << *(_BYTE *)(v4 + 32);
    v9 = (_QWORD *)(v4 + 56);
    if (v8 < 64)
      v10 = ~(-1 << v8);
    else
      v10 = -1;
    v11 = v10 & *(_QWORD *)(v4 + 56);
    v12 = (unint64_t)(v8 + 63) >> 6;
    v13 = v6 + 56;
    result = swift_retain(v4);
    v15 = 0;
    while (1)
    {
      if (v11)
      {
        v17 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        v18 = v17 | (v15 << 6);
      }
      else
      {
        v19 = v15 + 1;
        if (__OFADD__(v15, 1))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return result;
        }
        if (v19 >= v12)
          goto LABEL_36;
        v20 = v9[v19];
        ++v15;
        if (!v20)
        {
          v15 = v19 + 1;
          if (v19 + 1 >= v12)
            goto LABEL_36;
          v20 = v9[v15];
          if (!v20)
          {
            v15 = v19 + 2;
            if (v19 + 2 >= v12)
              goto LABEL_36;
            v20 = v9[v15];
            if (!v20)
            {
              v21 = v19 + 3;
              if (v21 >= v12)
              {
LABEL_36:
                swift_release(v4);
                v3 = v31;
                v30 = 1 << *(_BYTE *)(v4 + 32);
                if (v30 > 63)
                  bzero((void *)(v4 + 56), ((unint64_t)(v30 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v9 = -1 << v30;
                *(_QWORD *)(v4 + 16) = 0;
                break;
              }
              v20 = v9[v21];
              if (!v20)
              {
                while (1)
                {
                  v15 = v21 + 1;
                  if (__OFADD__(v21, 1))
                    goto LABEL_42;
                  if (v15 >= v12)
                    goto LABEL_36;
                  v20 = v9[v15];
                  ++v21;
                  if (v20)
                    goto LABEL_26;
                }
              }
              v15 = v21;
            }
          }
        }
LABEL_26:
        v11 = (v20 - 1) & v20;
        v18 = __clz(__rbit64(v20)) + (v15 << 6);
      }
      v22 = *(_QWORD *)(*(_QWORD *)(v4 + 48) + 8 * v18);
      result = NSObject._rawHashValue(seed:)(*(_QWORD *)(v7 + 40));
      v23 = -1 << *(_BYTE *)(v7 + 32);
      v24 = result & ~v23;
      v25 = v24 >> 6;
      if (((-1 << v24) & ~*(_QWORD *)(v13 + 8 * (v24 >> 6))) != 0)
      {
        v16 = __clz(__rbit64((-1 << v24) & ~*(_QWORD *)(v13 + 8 * (v24 >> 6)))) | v24 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v26 = 0;
        v27 = (unint64_t)(63 - v23) >> 6;
        do
        {
          if (++v25 == v27 && (v26 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }
          v28 = v25 == v27;
          if (v25 == v27)
            v25 = 0;
          v26 |= v28;
          v29 = *(_QWORD *)(v13 + 8 * v25);
        }
        while (v29 == -1);
        v16 = __clz(__rbit64(~v29)) + (v25 << 6);
      }
      *(_QWORD *)(v13 + ((v16 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v16;
      *(_QWORD *)(*(_QWORD *)(v7 + 48) + 8 * v16) = v22;
      ++*(_QWORD *)(v7 + 16);
    }
  }
  result = swift_release(v4);
  *v3 = v7;
  return result;
}

uint64_t sub_100007804(uint64_t a1, uint64_t (*a2)(uint64_t), uint64_t *a3, unint64_t *a4, uint64_t a5)
{
  uint64_t *v5;
  uint64_t *v7;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t result;
  int64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  int64_t v25;
  unint64_t v26;
  int64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void (*v31)(char *, unint64_t, uint64_t);
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  char v37;
  unint64_t v38;
  BOOL v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t *v43;
  int64_t v44;
  _QWORD *v45;
  uint64_t v46;
  uint64_t (*v47)(uint64_t);
  unint64_t *v48;
  uint64_t v49;

  v48 = a4;
  v49 = a5;
  v7 = v5;
  v47 = a2;
  v9 = a2(0);
  v46 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v11 = (char *)&v42 - v10;
  v12 = *v7;
  if (*(_QWORD *)(*v7 + 24) > a1)
    a1 = *(_QWORD *)(*v7 + 24);
  sub_10000527C(a3);
  v13 = static _SetStorage.resize(original:capacity:move:)(v12, a1, 1);
  v14 = v13;
  if (!*(_QWORD *)(v12 + 16))
    goto LABEL_39;
  v15 = 1 << *(_BYTE *)(v12 + 32);
  v16 = *(_QWORD *)(v12 + 56);
  v45 = (_QWORD *)(v12 + 56);
  if (v15 < 64)
    v17 = ~(-1 << v15);
  else
    v17 = -1;
  v18 = v17 & v16;
  v43 = v7;
  v44 = (unint64_t)(v15 + 63) >> 6;
  v19 = v13 + 56;
  result = swift_retain(v12);
  v21 = 0;
  while (1)
  {
    if (v18)
    {
      v23 = __clz(__rbit64(v18));
      v18 &= v18 - 1;
      v24 = v23 | (v21 << 6);
      goto LABEL_26;
    }
    v25 = v21 + 1;
    if (__OFADD__(v21, 1))
    {
LABEL_40:
      __break(1u);
LABEL_41:
      __break(1u);
      return result;
    }
    if (v25 >= v44)
      goto LABEL_35;
    v26 = v45[v25];
    ++v21;
    if (!v26)
    {
      v21 = v25 + 1;
      if (v25 + 1 >= v44)
        goto LABEL_35;
      v26 = v45[v21];
      if (!v26)
      {
        v21 = v25 + 2;
        if (v25 + 2 >= v44)
          goto LABEL_35;
        v26 = v45[v21];
        if (!v26)
          break;
      }
    }
LABEL_25:
    v18 = (v26 - 1) & v26;
    v24 = __clz(__rbit64(v26)) + (v21 << 6);
LABEL_26:
    v28 = v12;
    v29 = *(_QWORD *)(v12 + 48);
    v30 = *(_QWORD *)(v46 + 72);
    v31 = *(void (**)(char *, unint64_t, uint64_t))(v46 + 32);
    v31(v11, v29 + v30 * v24, v9);
    v32 = *(_QWORD *)(v14 + 40);
    v33 = sub_100008C7C(v48, v47, v49);
    result = dispatch thunk of Hashable._rawHashValue(seed:)(v32, v9, v33);
    v34 = -1 << *(_BYTE *)(v14 + 32);
    v35 = result & ~v34;
    v36 = v35 >> 6;
    if (((-1 << v35) & ~*(_QWORD *)(v19 + 8 * (v35 >> 6))) != 0)
    {
      v22 = __clz(__rbit64((-1 << v35) & ~*(_QWORD *)(v19 + 8 * (v35 >> 6)))) | v35 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v37 = 0;
      v38 = (unint64_t)(63 - v34) >> 6;
      do
      {
        if (++v36 == v38 && (v37 & 1) != 0)
        {
          __break(1u);
          goto LABEL_40;
        }
        v39 = v36 == v38;
        if (v36 == v38)
          v36 = 0;
        v37 |= v39;
        v40 = *(_QWORD *)(v19 + 8 * v36);
      }
      while (v40 == -1);
      v22 = __clz(__rbit64(~v40)) + (v36 << 6);
    }
    *(_QWORD *)(v19 + ((v22 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v22;
    result = ((uint64_t (*)(unint64_t, char *, uint64_t))v31)(*(_QWORD *)(v14 + 48) + v22 * v30, v11, v9);
    ++*(_QWORD *)(v14 + 16);
    v12 = v28;
  }
  v27 = v25 + 3;
  if (v27 < v44)
  {
    v26 = v45[v27];
    if (!v26)
    {
      while (1)
      {
        v21 = v27 + 1;
        if (__OFADD__(v27, 1))
          goto LABEL_41;
        if (v21 >= v44)
          goto LABEL_35;
        v26 = v45[v21];
        ++v27;
        if (v26)
          goto LABEL_25;
      }
    }
    v21 = v27;
    goto LABEL_25;
  }
LABEL_35:
  swift_release(v12);
  v7 = v43;
  v41 = 1 << *(_BYTE *)(v12 + 32);
  if (v41 > 63)
    bzero(v45, ((unint64_t)(v41 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v45 = -1 << v41;
  *(_QWORD *)(v12 + 16) = 0;
LABEL_39:
  result = swift_release(v12);
  *v7 = v14;
  return result;
}

unint64_t sub_100007B64(uint64_t a1, uint64_t a2)
{
  Swift::Int v4;
  unint64_t result;

  v4 = NSObject._rawHashValue(seed:)(*(_QWORD *)(a2 + 40));
  result = _HashTable.nextHole(atOrAfter:)(v4 & ~(-1 << *(_BYTE *)(a2 + 32)), a2 + 56, ~(-1 << *(_BYTE *)(a2 + 32)));
  *(_QWORD *)(a2 + 56 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
  *(_QWORD *)(*(_QWORD *)(a2 + 48) + 8 * result) = a1;
  ++*(_QWORD *)(a2 + 16);
  return result;
}

uint64_t sub_100007BE4(uint64_t a1, unint64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(char *, unint64_t, uint64_t);
  uint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t result;
  uint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;

  v30 = a1;
  v6 = type metadata accessor for CharacteristicKind(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v29 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *(_QWORD *)(*v3 + 16);
  v11 = *(_QWORD *)(*v3 + 24);
  v29 = v3;
  if (v11 > v10 && (a3 & 1) != 0)
    goto LABEL_12;
  v12 = v10 + 1;
  if ((a3 & 1) != 0)
  {
    sub_100007804(v12, (uint64_t (*)(uint64_t))&type metadata accessor for CharacteristicKind, &qword_1000A5018, &qword_1000A5008, (uint64_t)&protocol conformance descriptor for CharacteristicKind);
  }
  else
  {
    if (v11 > v10)
    {
      sub_100010A2C();
      goto LABEL_12;
    }
    sub_10000889C(v12, (uint64_t (*)(uint64_t))&type metadata accessor for CharacteristicKind, &qword_1000A5018, &qword_1000A5008, (uint64_t)&protocol conformance descriptor for CharacteristicKind);
  }
  v13 = *v3;
  v14 = *(_QWORD *)(*v3 + 40);
  v15 = sub_100008C7C(&qword_1000A5008, (uint64_t (*)(uint64_t))&type metadata accessor for CharacteristicKind, (uint64_t)&protocol conformance descriptor for CharacteristicKind);
  v16 = dispatch thunk of Hashable._rawHashValue(seed:)(v14, v6, v15);
  v17 = -1 << *(_BYTE *)(v13 + 32);
  a2 = v16 & ~v17;
  if (((*(_QWORD *)(v13 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0)
  {
    v18 = ~v17;
    v19 = *(_QWORD *)(v7 + 72);
    v20 = *(void (**)(char *, unint64_t, uint64_t))(v7 + 16);
    do
    {
      v20(v9, *(_QWORD *)(v13 + 48) + v19 * a2, v6);
      v21 = sub_100008C7C(&qword_1000A5010, (uint64_t (*)(uint64_t))&type metadata accessor for CharacteristicKind, (uint64_t)&protocol conformance descriptor for CharacteristicKind);
      v22 = dispatch thunk of static Equatable.== infix(_:_:)(v9, v30, v6, v21);
      (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
      if ((v22 & 1) != 0)
        goto LABEL_15;
      a2 = (a2 + 1) & v18;
    }
    while (((*(_QWORD *)(v13 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0);
  }
LABEL_12:
  v23 = v30;
  v24 = *v29;
  *(_QWORD *)(*v29 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v7 + 32))(*(_QWORD *)(v24 + 48) + *(_QWORD *)(v7 + 72) * a2, v23, v6);
  v26 = *(_QWORD *)(v24 + 16);
  v27 = __OFADD__(v26, 1);
  v28 = v26 + 1;
  if (!v27)
  {
    *(_QWORD *)(v24 + 16) = v28;
    return result;
  }
  __break(1u);
LABEL_15:
  result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v6);
  __break(1u);
  return result;
}

uint64_t sub_100007E28(uint64_t a1, unint64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  Swift::Int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t result;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD v27[9];

  v4 = v3;
  v8 = type metadata accessor for WidgetTileInfo(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v27[-1] - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = *(_QWORD *)(*v4 + 16);
  v13 = *(_QWORD *)(*v4 + 24);
  if (v13 > v12 && (a3 & 1) != 0)
    goto LABEL_12;
  v14 = v12 + 1;
  if ((a3 & 1) != 0)
  {
    sub_1000072B4(v14);
  }
  else
  {
    if (v13 > v12)
    {
      sub_100010A40();
      goto LABEL_12;
    }
    sub_1000083B4(v14);
  }
  v15 = *v4;
  Hasher.init(_seed:)(v27, *(_QWORD *)(*v4 + 40));
  sub_100019DE4((uint64_t)v27);
  v16 = Hasher._finalize()();
  v17 = -1 << *(_BYTE *)(v15 + 32);
  a2 = v16 & ~v17;
  if (((*(_QWORD *)(v15 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0)
  {
    v26 = v8;
    v18 = ~v17;
    v19 = *(_QWORD *)(v9 + 72);
    do
    {
      sub_100008BB8(*(_QWORD *)(v15 + 48) + v19 * a2, (uint64_t)v11);
      v20 = sub_10001AB38((uint64_t)v11, a1);
      sub_100008BFC((uint64_t)v11);
      if ((v20 & 1) != 0)
        goto LABEL_15;
      a2 = (a2 + 1) & v18;
    }
    while (((*(_QWORD *)(v15 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0);
  }
LABEL_12:
  v21 = *v4;
  *(_QWORD *)(*v4 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  result = sub_100008C38(a1, *(_QWORD *)(v21 + 48) + *(_QWORD *)(v9 + 72) * a2);
  v23 = *(_QWORD *)(v21 + 16);
  v24 = __OFADD__(v23, 1);
  v25 = v23 + 1;
  if (!v24)
  {
    *(_QWORD *)(v21 + 16) = v25;
    return result;
  }
  __break(1u);
LABEL_15:
  result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v26);
  __break(1u);
  return result;
}

void sub_100007FE4(uint64_t a1, unint64_t a2, char a3, uint64_t *a4, unint64_t *a5, _QWORD *a6, void (*a7)(uint64_t))
{
  uint64_t *v7;
  uint64_t *v10;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  Swift::Int v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  char v21;
  uint64_t v22;
  id v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  BOOL v27;
  uint64_t v28;

  v10 = v7;
  v13 = *(_QWORD *)(*v7 + 16);
  v14 = *(_QWORD *)(*v7 + 24);
  if (v14 > v13 && (a3 & 1) != 0)
    goto LABEL_14;
  v15 = v13 + 1;
  if ((a3 & 1) != 0)
  {
    sub_10000756C(v15, a4);
  }
  else
  {
    if (v14 > v13)
    {
      a7(v15);
      goto LABEL_14;
    }
    sub_100008628(v15, a4);
  }
  v16 = *v7;
  v17 = NSObject._rawHashValue(seed:)(*(_QWORD *)(*v7 + 40));
  v18 = -1 << *(_BYTE *)(v16 + 32);
  a2 = v17 & ~v18;
  if (((*(_QWORD *)(v16 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0)
  {
    v19 = sub_100008CBC(0, a5, a6);
    v20 = *(id *)(*(_QWORD *)(v16 + 48) + 8 * a2);
    v21 = static NSObject.== infix(_:_:)(v20, a1);

    if ((v21 & 1) != 0)
    {
LABEL_13:
      ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v19);
      __break(1u);
    }
    else
    {
      v22 = ~v18;
      while (1)
      {
        a2 = (a2 + 1) & v22;
        if (((*(_QWORD *)(v16 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) == 0)
          break;
        v23 = *(id *)(*(_QWORD *)(v16 + 48) + 8 * a2);
        v24 = static NSObject.== infix(_:_:)(v23, a1);

        if ((v24 & 1) != 0)
          goto LABEL_13;
      }
    }
  }
LABEL_14:
  v25 = *v10;
  *(_QWORD *)(*v10 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  *(_QWORD *)(*(_QWORD *)(v25 + 48) + 8 * a2) = a1;
  v26 = *(_QWORD *)(v25 + 16);
  v27 = __OFADD__(v26, 1);
  v28 = v26 + 1;
  if (v27)
    __break(1u);
  else
    *(_QWORD *)(v25 + 16) = v28;
}

uint64_t sub_100008170(uint64_t a1, unint64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(char *, unint64_t, uint64_t);
  uint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t result;
  uint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;

  v30 = a1;
  v6 = type metadata accessor for UUID(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v29 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *(_QWORD *)(*v3 + 16);
  v11 = *(_QWORD *)(*v3 + 24);
  v29 = v3;
  if (v11 > v10 && (a3 & 1) != 0)
    goto LABEL_12;
  v12 = v10 + 1;
  if ((a3 & 1) != 0)
  {
    sub_100007804(v12, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, &qword_1000A5028, (unint64_t *)&qword_1000A5020, (uint64_t)&protocol conformance descriptor for UUID);
  }
  else
  {
    if (v11 > v10)
    {
      sub_100010DF0();
      goto LABEL_12;
    }
    sub_10000889C(v12, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, &qword_1000A5028, (unint64_t *)&qword_1000A5020, (uint64_t)&protocol conformance descriptor for UUID);
  }
  v13 = *v3;
  v14 = *(_QWORD *)(*v3 + 40);
  v15 = sub_100008C7C((unint64_t *)&qword_1000A5020, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
  v16 = dispatch thunk of Hashable._rawHashValue(seed:)(v14, v6, v15);
  v17 = -1 << *(_BYTE *)(v13 + 32);
  a2 = v16 & ~v17;
  if (((*(_QWORD *)(v13 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0)
  {
    v18 = ~v17;
    v19 = *(_QWORD *)(v7 + 72);
    v20 = *(void (**)(char *, unint64_t, uint64_t))(v7 + 16);
    do
    {
      v20(v9, *(_QWORD *)(v13 + 48) + v19 * a2, v6);
      v21 = sub_100008C7C((unint64_t *)&unk_1000A7670, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v22 = dispatch thunk of static Equatable.== infix(_:_:)(v9, v30, v6, v21);
      (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
      if ((v22 & 1) != 0)
        goto LABEL_15;
      a2 = (a2 + 1) & v18;
    }
    while (((*(_QWORD *)(v13 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0);
  }
LABEL_12:
  v23 = v30;
  v24 = *v29;
  *(_QWORD *)(*v29 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v7 + 32))(*(_QWORD *)(v24 + 48) + *(_QWORD *)(v7 + 72) * a2, v23, v6);
  v26 = *(_QWORD *)(v24 + 16);
  v27 = __OFADD__(v26, 1);
  v28 = v26 + 1;
  if (!v27)
  {
    *(_QWORD *)(v24 + 16) = v28;
    return result;
  }
  __break(1u);
LABEL_15:
  result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v6);
  __break(1u);
  return result;
}

uint64_t sub_1000083B4(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  int64_t v15;
  uint64_t v16;
  uint64_t result;
  int64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  Swift::Int v22;
  unint64_t v23;
  int64_t v24;
  unint64_t v25;
  int64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  _QWORD v30[9];

  v2 = v1;
  v4 = type metadata accessor for WidgetTileInfo(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v27 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *v2;
  if (*(_QWORD *)(*v2 + 24) > a1)
    a1 = *(_QWORD *)(*v2 + 24);
  sub_10000527C(&qword_1000A4FF8);
  v9 = static _SetStorage.resize(original:capacity:move:)(v8, a1, 0);
  v10 = v9;
  if (!*(_QWORD *)(v8 + 16))
  {
    result = swift_release(v8);
LABEL_27:
    *v2 = v10;
    return result;
  }
  v11 = 1 << *(_BYTE *)(v8 + 32);
  v12 = *(_QWORD *)(v8 + 56);
  v28 = v2;
  v29 = v8 + 56;
  if (v11 < 64)
    v13 = ~(-1 << v11);
  else
    v13 = -1;
  v14 = v13 & v12;
  v15 = (unint64_t)(v11 + 63) >> 6;
  v16 = v9 + 56;
  result = swift_retain(v8);
  v18 = 0;
  while (1)
  {
    if (v14)
    {
      v19 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      v20 = v19 | (v18 << 6);
      goto LABEL_9;
    }
    v24 = v18 + 1;
    if (__OFADD__(v18, 1))
    {
      __break(1u);
      goto LABEL_29;
    }
    if (v24 >= v15)
      goto LABEL_25;
    v25 = *(_QWORD *)(v29 + 8 * v24);
    ++v18;
    if (!v25)
    {
      v18 = v24 + 1;
      if (v24 + 1 >= v15)
        goto LABEL_25;
      v25 = *(_QWORD *)(v29 + 8 * v18);
      if (!v25)
      {
        v18 = v24 + 2;
        if (v24 + 2 >= v15)
          goto LABEL_25;
        v25 = *(_QWORD *)(v29 + 8 * v18);
        if (!v25)
          break;
      }
    }
LABEL_24:
    v14 = (v25 - 1) & v25;
    v20 = __clz(__rbit64(v25)) + (v18 << 6);
LABEL_9:
    v21 = *(_QWORD *)(v5 + 72);
    sub_100008BB8(*(_QWORD *)(v8 + 48) + v21 * v20, (uint64_t)v7);
    Hasher.init(_seed:)(v30, *(_QWORD *)(v10 + 40));
    sub_100019DE4((uint64_t)v30);
    v22 = Hasher._finalize()();
    v23 = _HashTable.nextHole(atOrAfter:)(v22 & ~(-1 << *(_BYTE *)(v10 + 32)), v10 + 56, ~(-1 << *(_BYTE *)(v10 + 32)));
    *(_QWORD *)(v16 + ((v23 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v23;
    result = sub_100008C38((uint64_t)v7, *(_QWORD *)(v10 + 48) + v23 * v21);
    ++*(_QWORD *)(v10 + 16);
  }
  v26 = v24 + 3;
  if (v26 >= v15)
  {
LABEL_25:
    result = swift_release_n(v8, 2);
    v2 = v28;
    goto LABEL_27;
  }
  v25 = *(_QWORD *)(v29 + 8 * v26);
  if (v25)
  {
    v18 = v26;
    goto LABEL_24;
  }
  while (1)
  {
    v18 = v26 + 1;
    if (__OFADD__(v26, 1))
      break;
    if (v18 >= v15)
      goto LABEL_25;
    v25 = *(_QWORD *)(v29 + 8 * v18);
    ++v26;
    if (v25)
      goto LABEL_24;
  }
LABEL_29:
  __break(1u);
  return result;
}

Swift::Int sub_100008628(uint64_t a1, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int64_t v12;
  uint64_t v13;
  Swift::Int result;
  int64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  int64_t v19;
  unint64_t v20;
  int64_t v21;
  Swift::Int v22;
  id v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  char v27;
  unint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t *v31;

  v3 = v2;
  v4 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v5 = a1;
  else
    v5 = *(_QWORD *)(*v2 + 24);
  sub_10000527C(a2);
  v6 = static _SetStorage.resize(original:capacity:move:)(v4, v5, 0);
  v7 = v6;
  if (!*(_QWORD *)(v4 + 16))
  {
    result = swift_release(v4);
LABEL_38:
    *v3 = v7;
    return result;
  }
  v31 = v3;
  v8 = 1 << *(_BYTE *)(v4 + 32);
  v9 = v4 + 56;
  if (v8 < 64)
    v10 = ~(-1 << v8);
  else
    v10 = -1;
  v11 = v10 & *(_QWORD *)(v4 + 56);
  v12 = (unint64_t)(v8 + 63) >> 6;
  v13 = v6 + 56;
  result = swift_retain(v4);
  v15 = 0;
  while (1)
  {
    if (v11)
    {
      v17 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      v18 = v17 | (v15 << 6);
      goto LABEL_27;
    }
    v19 = v15 + 1;
    if (__OFADD__(v15, 1))
    {
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }
    if (v19 >= v12)
      goto LABEL_36;
    v20 = *(_QWORD *)(v9 + 8 * v19);
    ++v15;
    if (!v20)
    {
      v15 = v19 + 1;
      if (v19 + 1 >= v12)
        goto LABEL_36;
      v20 = *(_QWORD *)(v9 + 8 * v15);
      if (!v20)
      {
        v15 = v19 + 2;
        if (v19 + 2 >= v12)
          goto LABEL_36;
        v20 = *(_QWORD *)(v9 + 8 * v15);
        if (!v20)
          break;
      }
    }
LABEL_26:
    v11 = (v20 - 1) & v20;
    v18 = __clz(__rbit64(v20)) + (v15 << 6);
LABEL_27:
    v22 = *(_QWORD *)(v7 + 40);
    v23 = *(id *)(*(_QWORD *)(v4 + 48) + 8 * v18);
    result = NSObject._rawHashValue(seed:)(v22);
    v24 = -1 << *(_BYTE *)(v7 + 32);
    v25 = result & ~v24;
    v26 = v25 >> 6;
    if (((-1 << v25) & ~*(_QWORD *)(v13 + 8 * (v25 >> 6))) != 0)
    {
      v16 = __clz(__rbit64((-1 << v25) & ~*(_QWORD *)(v13 + 8 * (v25 >> 6)))) | v25 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v27 = 0;
      v28 = (unint64_t)(63 - v24) >> 6;
      do
      {
        if (++v26 == v28 && (v27 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }
        v29 = v26 == v28;
        if (v26 == v28)
          v26 = 0;
        v27 |= v29;
        v30 = *(_QWORD *)(v13 + 8 * v26);
      }
      while (v30 == -1);
      v16 = __clz(__rbit64(~v30)) + (v26 << 6);
    }
    *(_QWORD *)(v13 + ((v16 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v16;
    *(_QWORD *)(*(_QWORD *)(v7 + 48) + 8 * v16) = v23;
    ++*(_QWORD *)(v7 + 16);
  }
  v21 = v19 + 3;
  if (v21 >= v12)
  {
LABEL_36:
    result = swift_release_n(v4, 2);
    v3 = v31;
    goto LABEL_38;
  }
  v20 = *(_QWORD *)(v9 + 8 * v21);
  if (v20)
  {
    v15 = v21;
    goto LABEL_26;
  }
  while (1)
  {
    v15 = v21 + 1;
    if (__OFADD__(v21, 1))
      break;
    if (v15 >= v12)
      goto LABEL_36;
    v20 = *(_QWORD *)(v9 + 8 * v15);
    ++v21;
    if (v20)
      goto LABEL_26;
  }
LABEL_40:
  __break(1u);
  return result;
}

uint64_t sub_10000889C(uint64_t a1, uint64_t (*a2)(uint64_t), uint64_t *a3, unint64_t *a4, uint64_t a5)
{
  uint64_t *v5;
  uint64_t *v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t result;
  int64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  int64_t v26;
  unint64_t v27;
  int64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  char v35;
  unint64_t v36;
  BOOL v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  int64_t v41;
  uint64_t (*v42)(uint64_t);
  unint64_t *v43;
  uint64_t v44;

  v43 = a4;
  v44 = a5;
  v7 = v5;
  v42 = a2;
  v9 = a2(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v39 - v11;
  v13 = *v7;
  if (*(_QWORD *)(*v7 + 24) > a1)
    a1 = *(_QWORD *)(*v7 + 24);
  sub_10000527C(a3);
  v14 = static _SetStorage.resize(original:capacity:move:)(v13, a1, 0);
  v15 = v14;
  if (!*(_QWORD *)(v13 + 16))
  {
    result = swift_release(v13);
LABEL_37:
    *v7 = v15;
    return result;
  }
  v16 = 1 << *(_BYTE *)(v13 + 32);
  v17 = *(_QWORD *)(v13 + 56);
  v39 = v7;
  v40 = v13 + 56;
  if (v16 < 64)
    v18 = ~(-1 << v16);
  else
    v18 = -1;
  v19 = v18 & v17;
  v41 = (unint64_t)(v16 + 63) >> 6;
  v20 = v14 + 56;
  result = swift_retain(v13);
  v22 = 0;
  while (1)
  {
    if (v19)
    {
      v24 = __clz(__rbit64(v19));
      v19 &= v19 - 1;
      v25 = v24 | (v22 << 6);
      goto LABEL_26;
    }
    v26 = v22 + 1;
    if (__OFADD__(v22, 1))
    {
LABEL_38:
      __break(1u);
      goto LABEL_39;
    }
    if (v26 >= v41)
      goto LABEL_35;
    v27 = *(_QWORD *)(v40 + 8 * v26);
    ++v22;
    if (!v27)
    {
      v22 = v26 + 1;
      if (v26 + 1 >= v41)
        goto LABEL_35;
      v27 = *(_QWORD *)(v40 + 8 * v22);
      if (!v27)
      {
        v22 = v26 + 2;
        if (v26 + 2 >= v41)
          goto LABEL_35;
        v27 = *(_QWORD *)(v40 + 8 * v22);
        if (!v27)
          break;
      }
    }
LABEL_25:
    v19 = (v27 - 1) & v27;
    v25 = __clz(__rbit64(v27)) + (v22 << 6);
LABEL_26:
    v29 = *(_QWORD *)(v10 + 72);
    (*(void (**)(char *, unint64_t, uint64_t))(v10 + 16))(v12, *(_QWORD *)(v13 + 48) + v29 * v25, v9);
    v30 = *(_QWORD *)(v15 + 40);
    v31 = sub_100008C7C(v43, v42, v44);
    result = dispatch thunk of Hashable._rawHashValue(seed:)(v30, v9, v31);
    v32 = -1 << *(_BYTE *)(v15 + 32);
    v33 = result & ~v32;
    v34 = v33 >> 6;
    if (((-1 << v33) & ~*(_QWORD *)(v20 + 8 * (v33 >> 6))) != 0)
    {
      v23 = __clz(__rbit64((-1 << v33) & ~*(_QWORD *)(v20 + 8 * (v33 >> 6)))) | v33 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v35 = 0;
      v36 = (unint64_t)(63 - v32) >> 6;
      do
      {
        if (++v34 == v36 && (v35 & 1) != 0)
        {
          __break(1u);
          goto LABEL_38;
        }
        v37 = v34 == v36;
        if (v34 == v36)
          v34 = 0;
        v35 |= v37;
        v38 = *(_QWORD *)(v20 + 8 * v34);
      }
      while (v38 == -1);
      v23 = __clz(__rbit64(~v38)) + (v34 << 6);
    }
    *(_QWORD *)(v20 + ((v23 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v23;
    result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(v10 + 32))(*(_QWORD *)(v15 + 48) + v23 * v29, v12, v9);
    ++*(_QWORD *)(v15 + 16);
  }
  v28 = v26 + 3;
  if (v28 >= v41)
  {
LABEL_35:
    result = swift_release_n(v13, 2);
    v7 = v39;
    goto LABEL_37;
  }
  v27 = *(_QWORD *)(v40 + 8 * v28);
  if (v27)
  {
    v22 = v28;
    goto LABEL_25;
  }
  while (1)
  {
    v22 = v28 + 1;
    if (__OFADD__(v28, 1))
      break;
    if (v22 >= v41)
      goto LABEL_35;
    v27 = *(_QWORD *)(v40 + 8 * v22);
    ++v28;
    if (v27)
      goto LABEL_25;
  }
LABEL_39:
  __break(1u);
  return result;
}

uint64_t sub_100008BB8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for WidgetTileInfo(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_100008BFC(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for WidgetTileInfo(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_100008C38(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for WidgetTileInfo(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_100008C7C(unint64_t *a1, uint64_t (*a2)(uint64_t), uint64_t a3)
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    v6 = a2(255);
    result = swift_getWitnessTable(a3, v6);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100008CBC(uint64_t a1, unint64_t *a2, _QWORD *a3)
{
  uint64_t result;
  uint64_t v5;

  result = *a2;
  if (!*a2)
  {
    v5 = objc_opt_self(*a3);
    result = swift_getObjCClassMetadata(v5);
    atomic_store(result, a2);
  }
  return result;
}

uint64_t sub_100008CF4()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  id v5;
  id v6;
  uint64_t v7;
  unint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  double v14;
  unint64_t v15;
  char v16;
  double v17;
  unint64_t v18;
  char v19;
  double v20;
  _QWORD v23[2];
  _QWORD v24[5];
  __int128 v25;
  __int128 v26;

  v1 = type metadata accessor for Color.RGBColorSpace(0);
  v2 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  v4 = (char *)&v23[-1] - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = objc_msgSend(v0, "applicationData");
  v6 = objc_msgSend(v5, "dictionary");

  v7 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v6, &type metadata for AnyHashable, (char *)&type metadata for Any + 8, &protocol witness table for AnyHashable);
  v23[0] = 0xD00000000000001FLL;
  v23[1] = 0x800000010008A080;
  AnyHashable.init<A>(_:)(v24, v23, &type metadata for String, &protocol witness table for String);
  if (*(_QWORD *)(v7 + 16) && (v8 = sub_10001A528((uint64_t)v24), (v9 & 1) != 0))
  {
    sub_100008FA8(*(_QWORD *)(v7 + 56) + 32 * v8, (uint64_t)&v25);
  }
  else
  {
    v25 = 0u;
    v26 = 0u;
  }
  swift_bridgeObjectRelease(v7);
  sub_100008F34((uint64_t)v24);
  if (*((_QWORD *)&v26 + 1))
  {
    v10 = sub_10000527C(&qword_1000A5058);
    if ((swift_dynamicCast(v23, &v25, (char *)&type metadata for Any + 8, v10, 6) & 1) != 0)
    {
      v11 = v23[0];
      if (*(_QWORD *)(v23[0] + 16))
      {
        v12 = sub_10001A4C4(114, 0xE100000000000000);
        if ((v13 & 1) != 0)
        {
          if (*(_QWORD *)(v11 + 16))
          {
            v14 = *(double *)(*(_QWORD *)(v11 + 56) + 8 * v12);
            v15 = sub_10001A4C4(103, 0xE100000000000000);
            if ((v16 & 1) != 0)
            {
              if (*(_QWORD *)(v11 + 16))
              {
                v17 = *(double *)(*(_QWORD *)(v11 + 56) + 8 * v15);
                v18 = sub_10001A4C4(98, 0xE100000000000000);
                if ((v19 & 1) != 0)
                {
                  v20 = *(double *)(*(_QWORD *)(v11 + 56) + 8 * v18);
                  swift_bridgeObjectRelease(v11);
                  (*(void (**)(char *, _QWORD, uint64_t))(v2 + 104))(v4, enum case for Color.RGBColorSpace.sRGB(_:), v1);
                  return Color.init(_:red:green:blue:opacity:)(v4, v14, v17, v20, 1.0);
                }
              }
            }
          }
        }
      }
      swift_bridgeObjectRelease(v11);
    }
  }
  else
  {
    sub_100008F68((uint64_t)&v25);
  }
  return 0;
}

uint64_t sub_100008F34(uint64_t a1)
{
  (*(void (**)(void))(*(&type metadata for AnyHashable - 1) + 8))();
  return a1;
}

uint64_t sub_100008F68(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_10000527C(&qword_1000A5050);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_100008FA8(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 24) = v3;
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t sub_100008FE4(uint64_t a1, uint64_t a2)
{
  return sub_100008FFC(a1, a2, (uint64_t)&type metadata for Int);
}

uint64_t sub_100008FF0(uint64_t a1, uint64_t a2)
{
  return sub_100008FFC(a1, a2, (uint64_t)&type metadata for Double);
}

uint64_t sub_100008FFC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  void *v16;
  void *v17;
  uint64_t v18;
  id v19;
  void (*v20)(char *, char *, uint64_t);
  uint64_t v21;
  unint64_t v22;
  char v23;
  void *v24;
  void *v25;
  id v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  _OWORD v31[2];
  __int128 v32;
  __int128 v33;

  v6 = sub_10000527C(&qword_1000A5060);
  __chkstk_darwin(v6);
  v8 = (char *)&v29 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for UUID(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = __chkstk_darwin(v9);
  v13 = (char *)&v29 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v15 = (char *)&v29 - v14;
  if (!a2)
  {
LABEL_9:
    v24 = (void *)HMService.characteristic(for:)(a1);
    if (v24)
    {
      v25 = v24;
      v26 = objc_msgSend(v24, "value");

      if (v26)
      {
        _bridgeAnyObjectToAny(_:)(v31, v26);
        swift_unknownObjectRelease(v26);
      }
      else
      {
        memset(v31, 0, sizeof(v31));
      }
      sub_100009B94((uint64_t)v31, (uint64_t)&v32);
    }
    else
    {
      v32 = 0u;
      v33 = 0u;
    }
    goto LABEL_17;
  }
  v16 = (void *)HMService.characteristic(for:)(a1);
  if (!v16)
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v10 + 56))(v8, 1, 1, v9);
    goto LABEL_8;
  }
  v17 = v16;
  v30 = a2;
  v18 = a3;
  v19 = objc_msgSend(v16, "uniqueIdentifier");

  static UUID._unconditionallyBridgeFromObjectiveC(_:)(v19);
  a3 = v18;
  v20 = *(void (**)(char *, char *, uint64_t))(v10 + 32);
  v20(v8, v13, v9);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v8, 0, 1, v9);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
  {
LABEL_8:
    sub_100009BDC((uint64_t)v8);
    goto LABEL_9;
  }
  v20(v15, v8, v9);
  v21 = v30;
  if (*(_QWORD *)(v30 + 16) && (v22 = sub_10001A558((uint64_t)v15), (v23 & 1) != 0))
  {
    sub_100008FA8(*(_QWORD *)(v21 + 56) + 32 * v22, (uint64_t)&v32);
  }
  else
  {
    v32 = 0u;
    v33 = 0u;
  }
  (*(void (**)(char *, uint64_t))(v10 + 8))(v15, v9);
LABEL_17:
  v27 = sub_10000527C(&qword_1000A5050);
  if ((swift_dynamicCast(v31, &v32, v27, a3, 6) & 1) == 0)
    *(_QWORD *)&v31[0] = 0;
  return *(_QWORD *)&v31[0];
}

uint64_t _sSo9HMServiceC10HomeWidgetE9BOOLValue3for4withSbSg0B9DataModel18CharacteristicKindO_SDy10Foundation4UUIDVypGSgtF_0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  void *v14;
  void *v15;
  id v16;
  void (*v17)(char *, char *, uint64_t);
  unint64_t v18;
  char v19;
  void *v20;
  void *v21;
  id v22;
  uint64_t v23;
  _OWORD v25[2];
  __int128 v26;
  __int128 v27;

  v4 = sub_10000527C(&qword_1000A5060);
  __chkstk_darwin(v4);
  v6 = (char *)v25 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for UUID(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = __chkstk_darwin(v7);
  v11 = (char *)v25 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v13 = (char *)v25 - v12;
  if (!a2)
  {
LABEL_9:
    v20 = (void *)HMService.characteristic(for:)(a1);
    if (v20)
    {
      v21 = v20;
      v22 = objc_msgSend(v20, "value");

      if (v22)
      {
        _bridgeAnyObjectToAny(_:)(v25, v22);
        swift_unknownObjectRelease(v22);
      }
      else
      {
        memset(v25, 0, sizeof(v25));
      }
      sub_100009B94((uint64_t)v25, (uint64_t)&v26);
    }
    else
    {
      v26 = 0u;
      v27 = 0u;
    }
    goto LABEL_17;
  }
  v14 = (void *)HMService.characteristic(for:)(a1);
  if (!v14)
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v8 + 56))(v6, 1, 1, v7);
    goto LABEL_8;
  }
  v15 = v14;
  v16 = objc_msgSend(v14, "uniqueIdentifier");

  static UUID._unconditionallyBridgeFromObjectiveC(_:)(v16);
  v17 = *(void (**)(char *, char *, uint64_t))(v8 + 32);
  v17(v6, v11, v7);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v8 + 56))(v6, 0, 1, v7);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7) == 1)
  {
LABEL_8:
    sub_100009BDC((uint64_t)v6);
    goto LABEL_9;
  }
  v17(v13, v6, v7);
  if (*(_QWORD *)(a2 + 16) && (v18 = sub_10001A558((uint64_t)v13), (v19 & 1) != 0))
  {
    sub_100008FA8(*(_QWORD *)(a2 + 56) + 32 * v18, (uint64_t)&v26);
  }
  else
  {
    v26 = 0u;
    v27 = 0u;
  }
  (*(void (**)(char *, uint64_t))(v8 + 8))(v13, v7);
LABEL_17:
  v23 = sub_10000527C(&qword_1000A5050);
  if ((swift_dynamicCast(v25, &v26, v23, &type metadata for Bool, 6) & 1) == 0)
    LOBYTE(v25[0]) = 2;
  return LOBYTE(v25[0]);
}

uint64_t HMService.intValue(for:with:)(uint64_t a1, uint64_t a2)
{
  return sub_100008FFC(a1, a2, (uint64_t)&type metadata for Int);
}

uint64_t HMService.doubleValue(for:with:)(uint64_t a1, uint64_t a2)
{
  return sub_100008FFC(a1, a2, (uint64_t)&type metadata for Double);
}

Swift::Bool_optional __swiftcall HMService.powerState(with:)(Swift::OpaquePointer_optional with)
{
  void *rawValue;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  void (*v6)(char *, _QWORD, uint64_t);
  Swift::Bool_optional v7;
  void (*v8)(char *, uint64_t);
  uint64_t v10;

  rawValue = with.value._rawValue;
  v2 = type metadata accessor for CharacteristicKind(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = *(void (**)(char *, _QWORD, uint64_t))(v3 + 104);
  v6(v5, enum case for CharacteristicKind.powerState(_:), v2);
  v7.value = _sSo9HMServiceC10HomeWidgetE9BOOLValue3for4withSbSg0B9DataModel18CharacteristicKindO_SDy10Foundation4UUIDVypGSgtF_0((uint64_t)v5, (uint64_t)rawValue);
  v8 = *(void (**)(char *, uint64_t))(v3 + 8);
  v8(v5, v2);
  if (v7.value == 2)
  {
    v6(v5, enum case for CharacteristicKind.active(_:), v2);
    v7.value = _sSo9HMServiceC10HomeWidgetE9BOOLValue3for4withSbSg0B9DataModel18CharacteristicKindO_SDy10Foundation4UUIDVypGSgtF_0((uint64_t)v5, (uint64_t)rawValue);
    v8(v5, v2);
  }
  return v7;
}

uint64_t HMService.characteristic<A>(for:with:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v8;
  char v9;
  uint64_t v11;

  v8 = sub_100008FFC(a1, a2, (uint64_t)&type metadata for Int);
  if ((v9 & 1) != 0)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a3 - 8) + 56))(a5, 1, 1, a3);
  v11 = v8;
  return dispatch thunk of RawRepresentable.init(rawValue:)(&v11, a3, a4);
}

Swift::Bool __swiftcall HMService.isInFlight(cache:)(Swift::OpaquePointer_optional cache)
{
  void *rawValue;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  int v23;
  void (*v24)(char *, _QWORD, uint64_t);
  uint64_t v25;
  char v26;
  char v27;
  void (*v28)(char *, uint64_t);
  uint64_t v29;
  uint64_t v30;
  char v31;
  char v32;
  char v33;
  _BOOL4 v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  unint64_t v39;
  void (*v40)(char *, _QWORD, uint64_t);
  uint64_t v41;
  uint64_t v42;
  char v43;
  char v44;
  void (*v45)(char *, uint64_t);
  uint64_t v46;
  uint64_t v47;
  char v48;
  char v49;
  void (*v50)(char *, _QWORD, uint64_t);
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char v54;
  char v55;
  void (*v56)(uint64_t, uint64_t);
  uint64_t v57;
  uint64_t v58;
  char v59;
  uint64_t v60;
  uint64_t v63;
  char *v64;
  char *v65;
  char *v66;

  rawValue = cache.value._rawValue;
  v2 = type metadata accessor for CharacteristicKind(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = __chkstk_darwin(v2);
  v64 = (char *)&v63 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __chkstk_darwin(v4);
  v65 = (char *)&v63 - v7;
  v8 = __chkstk_darwin(v6);
  v66 = (char *)&v63 - v9;
  v10 = __chkstk_darwin(v8);
  v12 = (char *)&v63 - v11;
  v13 = __chkstk_darwin(v10);
  v15 = (char *)&v63 - v14;
  __chkstk_darwin(v13);
  v17 = (char *)&v63 - v16;
  v18 = type metadata accessor for ServiceKind(0);
  v19 = *(_QWORD *)(v18 - 8);
  v20 = __chkstk_darwin(v18);
  v22 = (char *)&v63 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  HMService.serviceKind.getter(v20);
  v23 = (*(uint64_t (**)(char *, uint64_t))(v19 + 88))(v22, v18);
  if (v23 == enum case for ServiceKind.door(_:))
    goto LABEL_2;
  v36 = v2;
  if (v23 == enum case for ServiceKind.garageDoorOpener(_:))
  {
    (*(void (**)(char *, _QWORD, uint64_t))(v3 + 104))(v15, enum case for CharacteristicKind.currentDoorState(_:), v2);
    v37 = sub_100008FFC((uint64_t)v15, (uint64_t)rawValue, (uint64_t)&type metadata for Int);
    if ((v38 & 1) != 0)
    {
      (*(void (**)(char *, uint64_t))(v3 + 8))(v15, v2);
    }
    else
    {
      v39 = v37;
      (*(void (**)(char *, uint64_t))(v3 + 8))(v15, v2);
      if (v39 < 5)
        return (0xCu >> v39) & 1;
    }
LABEL_21:
    LOBYTE(v35) = 0;
    return v35;
  }
  if (v23 == enum case for ServiceKind.lockMechanism(_:))
  {
    v40 = *(void (**)(char *, _QWORD, uint64_t))(v3 + 104);
    v40(v12, enum case for CharacteristicKind.currentLockMechanismState(_:), v2);
    v41 = (uint64_t)rawValue;
    v42 = sub_100008FFC((uint64_t)v12, (uint64_t)rawValue, (uint64_t)&type metadata for Int);
    v44 = v43;
    v45 = *(void (**)(char *, uint64_t))(v3 + 8);
    v45(v12, v2);
    if ((v44 & 1) == 0)
    {
      v46 = (uint64_t)v66;
      v40(v66, enum case for CharacteristicKind.targetLockMechanismState(_:), v2);
      v47 = sub_100008FFC(v46, v41, (uint64_t)&type metadata for Int);
      v49 = v48;
      v45((char *)v46, v2);
      if ((v49 & 1) == 0)
      {
        if (v42 == 1)
        {
          LOBYTE(v35) = v47 == 0;
          return v35;
        }
        if (!v42)
        {
          LOBYTE(v35) = v47 == 1;
          return v35;
        }
      }
    }
    goto LABEL_21;
  }
  if (v23 == enum case for ServiceKind.securitySystem(_:))
  {
    v50 = *(void (**)(char *, _QWORD, uint64_t))(v3 + 104);
    v51 = (uint64_t)v65;
    v52 = v36;
    v50(v65, enum case for CharacteristicKind.currentSecuritySystemState(_:), v36);
    v53 = sub_100008FFC(v51, (uint64_t)rawValue, (uint64_t)&type metadata for Int);
    v55 = v54;
    v56 = *(void (**)(uint64_t, uint64_t))(v3 + 8);
    v56(v51, v52);
    if ((v55 & 1) == 0)
    {
      v57 = (uint64_t)v64;
      v50(v64, enum case for CharacteristicKind.targetSecuritySystemState(_:), v52);
      v58 = sub_100008FFC(v57, (uint64_t)rawValue, (uint64_t)&type metadata for Int);
      if ((v59 & 1) != 0)
      {
        v56(v57, v52);
      }
      else
      {
        v60 = v58;
        v56(v57, v52);
        if (v60 == 3)
        {
          LOBYTE(v35) = v53 != 3;
          return v35;
        }
        if (v53 == 3)
        {
          LOBYTE(v35) = 1;
          return v35;
        }
      }
    }
    goto LABEL_21;
  }
  if (v23 != enum case for ServiceKind.window(_:) && v23 != enum case for ServiceKind.windowCovering(_:))
  {
    (*(void (**)(char *, uint64_t))(v19 + 8))(v22, v18);
    goto LABEL_21;
  }
LABEL_2:
  v24 = *(void (**)(char *, _QWORD, uint64_t))(v3 + 104);
  v24(v17, enum case for CharacteristicKind.targetPosition(_:), v2);
  v25 = sub_100008FFC((uint64_t)v17, (uint64_t)rawValue, (uint64_t)&type metadata for Int);
  v27 = v26;
  v28 = *(void (**)(char *, uint64_t))(v3 + 8);
  v28(v17, v2);
  if ((v27 & 1) != 0)
    goto LABEL_21;
  v29 = v2;
  v24(v17, enum case for CharacteristicKind.currentPosition(_:), v2);
  v30 = sub_100008FFC((uint64_t)v17, (uint64_t)rawValue, (uint64_t)&type metadata for Int);
  v32 = v31;
  v28(v17, v29);
  if ((v32 & 1) != 0)
    goto LABEL_21;
  v24(v17, enum case for CharacteristicKind.obstructionDetected(_:), v29);
  v33 = _sSo9HMServiceC10HomeWidgetE9BOOLValue3for4withSbSg0B9DataModel18CharacteristicKindO_SDy10Foundation4UUIDVypGSgtF_0((uint64_t)v17, (uint64_t)rawValue);
  v28(v17, v29);
  LOBYTE(v35) = (v33 & 1) == 0 && v25 != v30;
  return v35;
}

uint64_t sub_100009B94(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10000527C(&qword_1000A5050);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_100009BDC(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_10000527C(&qword_1000A5060);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_100009C1C(void *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  id v28;
  uint64_t v29;
  NSObject *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t result;
  uint64_t v34;
  _QWORD *v35;
  NSObject *v36;
  id v37;
  uint64_t v38;
  uint64_t v39;
  id v40;
  void *v41;
  id v42;
  uint64_t v43;
  id v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  unint64_t v55;
  id v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  _QWORD *v63;
  id v64;
  void *v65;
  uint64_t v66;
  unint64_t v67;
  unint64_t v68;
  uint64_t v69;
  id v70;
  id v71;
  unint64_t v72;
  _QWORD *v73;
  id v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  id v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  __objc2_prot_list *v82;
  __objc2_prot_list *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  NSObject *v92;
  os_log_type_t v93;
  NSObject *v94;
  NSObject *v95;
  uint64_t v96;
  uint64_t v97;
  NSObject *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  NSObject *v102;
  uint64_t v103;
  char *v104;
  uint64_t v105;
  BOOL v106;
  NSObject *v107;
  NSObject *v108;
  int v109;
  uint8_t *v110;
  NSObject *v111;
  int64_t v112;
  _QWORD *v113;
  int64_t v114;
  uint64_t v115;
  char v116;
  char v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  unint64_t v121;
  unint64_t v122;
  int64_t v123;
  uint64_t v124;
  char v125;
  uint64_t v126;
  unint64_t v127;
  unint64_t v128;
  _QWORD *v129;
  _QWORD *v130;
  NSObject *v131;
  _QWORD *v132;
  _QWORD *v133;
  uint64_t v134;
  uint64_t v135;
  char *v136;
  uint64_t v137;
  uint64_t v138;
  NSObject *v139;
  os_log_type_t v140;
  uint64_t v141;
  uint64_t v142;
  NSObject *v143;
  int v144;
  uint8_t *v145;
  NSObject *v146;
  uint64_t v147;
  _QWORD *v148;
  int64_t v149;
  int v150;
  int v151;
  char v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  unint64_t v156;
  unint64_t v157;
  int64_t v158;
  uint64_t v159;
  char v160;
  uint64_t v161;
  unint64_t v162;
  unint64_t v163;
  _QWORD *v164;
  NSObject *v165;
  unint64_t v166;
  uint64_t v167;
  id v168;
  char *v169;
  uint64_t v170;
  uint64_t v171;
  char *v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  char *v176;
  uint64_t v177;
  unint64_t v178;
  NSObject *v179;
  uint64_t v180;
  uint8_t *v181;
  NSObject *v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  char v186[24];
  char v187[24];
  _QWORD *v188;
  _QWORD *p_isa;
  _BYTE v190[16];
  NSObject *v191;
  char v192[8];
  _QWORD *v193;
  _QWORD *v194;

  v4 = type metadata accessor for UUID(0);
  v183 = *(_QWORD *)(v4 - 8);
  v184 = v4;
  v5 = __chkstk_darwin(v4);
  v169 = (char *)&v165 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __chkstk_darwin(v5);
  v176 = (char *)&v165 - v8;
  __chkstk_darwin(v7);
  v172 = (char *)&v165 - v9;
  v10 = sub_10000527C(&qword_1000A5068);
  v11 = __chkstk_darwin(v10);
  v13 = (char *)&v165 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v15 = (char *)&v165 - v14;
  v16 = type metadata accessor for WidgetTileInfo(0);
  v185 = *(_QWORD *)(v16 - 8);
  v17 = __chkstk_darwin(v16);
  v175 = (uint64_t)&v165 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = __chkstk_darwin(v17);
  v174 = (uint64_t)&v165 - v20;
  v21 = __chkstk_darwin(v19);
  v180 = (uint64_t)&v165 - v22;
  v23 = __chkstk_darwin(v21);
  v171 = (uint64_t)&v165 - v24;
  v25 = __chkstk_darwin(v23);
  v179 = ((char *)&v165 - v26);
  __chkstk_darwin(v25);
  v170 = (uint64_t)&v165 - v27;
  v194 = &_swiftEmptySetSingleton;
  v168 = a1;
  v28 = objc_msgSend(a1, "serviceGroups");
  v167 = sub_100008CBC(0, &qword_1000A5070, HMServiceGroup_ptr);
  v29 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v28, v167);

  swift_bridgeObjectRetain(a2);
  v30 = 0;
  v31 = (uint64_t)sub_100014358(v29, a2);
  swift_bridgeObjectRelease(v29);
  v181 = (uint8_t *)a2;
  swift_bridgeObjectRelease(a2);
  v166 = (unint64_t)v31 >> 62;
  if ((unint64_t)v31 >> 62)
    goto LABEL_57;
  v32 = *(_QWORD *)((v31 & 0xFFFFFFFFFFFFF8) + 0x10);
  result = swift_bridgeObjectRetain(v31);
LABEL_3:
  v173 = v31;
  v182 = v13;
  if (v32)
  {
    if (v32 >= 1)
    {
      v165 = v30;
      v34 = 0;
      v178 = v31 & 0xC000000000000001;
      v35 = _swiftEmptyArrayStorage;
      v177 = v32;
      while (1)
      {
        if (v178)
          v36 = specialized _ArrayBuffer._getElementSlowPath(_:)(v34, v31);
        else
          v36 = *(id *)(v31 + 8 * v34 + 32);
        v30 = v36;
        v37 = -[NSObject services](v36, "services", v165);
        v38 = sub_100008CBC(0, &qword_1000A5078, HMService_ptr);
        v39 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v37, v38);

        if ((unint64_t)v39 >> 62)
        {
          if (v39 < 0)
            v50 = v39;
          else
            v50 = v39 & 0xFFFFFFFFFFFFFF8;
          swift_bridgeObjectRetain(v39);
          v51 = _CocoaArrayWrapper.endIndex.getter(v50);
          swift_bridgeObjectRelease(v39);
          if (!v51)
          {
LABEL_22:
            swift_bridgeObjectRelease(v39);
            v52 = v185;
            (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v185 + 56))(v15, 1, 1, v16);

            if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v52 + 48))(v15, 1, v16) != 1)
              goto LABEL_23;
            goto LABEL_6;
          }
        }
        else if (!*(_QWORD *)((v39 & 0xFFFFFFFFFFFFF8) + 0x10))
        {
          goto LABEL_22;
        }
        if ((v39 & 0xC000000000000001) != 0)
        {
          v40 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v39);
        }
        else
        {
          if (!*(_QWORD *)((v39 & 0xFFFFFFFFFFFFF8) + 0x10))
          {
            __break(1u);
LABEL_57:
            if (v31 < 0)
              v85 = v31;
            else
              v85 = v31 & 0xFFFFFFFFFFFFFF8;
            swift_bridgeObjectRetain(v31);
            result = _CocoaArrayWrapper.endIndex.getter(v85);
            v32 = result;
            goto LABEL_3;
          }
          v40 = *(id *)(v39 + 32);
        }
        v41 = v40;
        swift_bridgeObjectRelease(v39);
        v42 = -[NSObject uniqueIdentifier](v30, "uniqueIdentifier");
        v43 = (uint64_t)v172;
        static UUID._unconditionallyBridgeFromObjectiveC(_:)(v42);

        v44 = -[NSObject name](v30, "name");
        v45 = static String._unconditionallyBridgeFromObjectiveC(_:)(v44);
        v47 = v46;

        sub_10000FED0(v41, v43, v45, v47, v30, 1, (uint64_t)v15);
        swift_bridgeObjectRelease(v47);
        (*(void (**)(uint64_t, uint64_t))(v183 + 8))(v43, v184);
        v48 = v185;
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v185 + 56))(v15, 0, 1, v16);

        v49 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v48 + 48))(v15, 1, v16);
        v31 = v173;
        v13 = (char *)v182;
        if (v49 != 1)
        {
LABEL_23:
          v53 = v170;
          sub_100008C38((uint64_t)v15, v170);
          sub_100008C38(v53, (uint64_t)v179);
          if ((swift_isUniquelyReferenced_nonNull_native(v35) & 1) == 0)
            v35 = (_QWORD *)sub_10005AA10(0, v35[2] + 1, 1, (unint64_t)v35);
          v55 = v35[2];
          v54 = v35[3];
          if (v55 >= v54 >> 1)
            v35 = (_QWORD *)sub_10005AA10(v54 > 1, v55 + 1, 1, (unint64_t)v35);
          v35[2] = v55 + 1;
          sub_100008C38((uint64_t)v179, (uint64_t)v35+ ((*(unsigned __int8 *)(v185 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v185 + 80))+ *(_QWORD *)(v185 + 72) * v55);
          goto LABEL_7;
        }
LABEL_6:
        sub_100014EFC((uint64_t)v15, &qword_1000A5068);
LABEL_7:
        if (v177 == ++v34)
        {
          swift_bridgeObjectRelease(v31);
          v30 = v165;
          goto LABEL_31;
        }
      }
    }
    __break(1u);
    goto LABEL_133;
  }
  swift_bridgeObjectRelease(v31);
  v35 = _swiftEmptyArrayStorage;
LABEL_31:
  sub_100014290((uint64_t)v35);
  swift_bridgeObjectRelease(v35);
  v179 = v194[2];
  v56 = objc_msgSend(v168, "actionSets");
  v57 = sub_100008CBC(0, &qword_1000A5080, HMActionSet_ptr);
  v58 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v56, v57);

  v59 = (uint64_t)v181;
  swift_bridgeObjectRetain(v181);
  v60 = (uint64_t)sub_100014358(v58, v59);
  swift_bridgeObjectRelease(v58);
  swift_bridgeObjectRelease(v59);
  if ((unint64_t)v60 >> 62)
  {
    if (v60 < 0)
      v86 = v60;
    else
      v86 = v60 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v60);
    result = _CocoaArrayWrapper.endIndex.getter(v86);
    v61 = result;
  }
  else
  {
    v61 = *(_QWORD *)((v60 & 0xFFFFFFFFFFFFF8) + 0x10);
    result = swift_bridgeObjectRetain(v60);
  }
  v178 = (unint64_t)v60 >> 62;
  if (v61)
  {
    if (v61 < 1)
    {
LABEL_133:
      __break(1u);
LABEL_134:
      __break(1u);
LABEL_135:
      __break(1u);
LABEL_136:
      __break(1u);
      return result;
    }
    v62 = 0;
    v63 = _swiftEmptyArrayStorage;
    do
    {
      if ((v60 & 0xC000000000000001) != 0)
        v64 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v62, v60);
      else
        v64 = *(id *)(v60 + 8 * v62 + 32);
      v65 = v64;
      sub_10000B710(v64, (uint64_t)v13);

      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v185 + 48))(v13, 1, v16) == 1)
      {
        sub_100014EFC((uint64_t)v13, &qword_1000A5068);
      }
      else
      {
        v66 = v171;
        sub_100008C38((uint64_t)v13, v171);
        sub_100008C38(v66, v180);
        if ((swift_isUniquelyReferenced_nonNull_native(v63) & 1) == 0)
          v63 = (_QWORD *)sub_10005AA10(0, v63[2] + 1, 1, (unint64_t)v63);
        v68 = v63[2];
        v67 = v63[3];
        if (v68 >= v67 >> 1)
          v63 = (_QWORD *)sub_10005AA10(v67 > 1, v68 + 1, 1, (unint64_t)v63);
        v63[2] = v68 + 1;
        sub_100008C38(v180, (uint64_t)v63+ ((*(unsigned __int8 *)(v185 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v185 + 80))+ *(_QWORD *)(v185 + 72) * v68);
        v13 = (char *)v182;
      }
      ++v62;
    }
    while (v61 != v62);
  }
  else
  {
    v63 = _swiftEmptyArrayStorage;
  }
  swift_bridgeObjectRelease(v60);
  sub_100014290((uint64_t)v63);
  swift_bridgeObjectRelease(v63);
  v69 = v194[2];
  v70 = v168;
  v71 = objc_msgSend(v168, "serviceGroups");
  v72 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v71, v167);

  v73 = sub_10000BD2C(v72);
  swift_bridgeObjectRelease(v72);
  v74 = objc_msgSend(v70, "accessories");
  v75 = sub_100008CBC(0, &qword_1000A5030, HMAccessory_ptr);
  v76 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v74, v75);

  v77 = sub_10000BFA4(v76);
  v182 = v30;
  swift_bridgeObjectRelease(v76);
  v78 = objc_msgSend(v70, "accessories");
  v79 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v78, v75);

  if ((unint64_t)v79 >> 62)
  {
    if (v79 < 0)
      v87 = v79;
    else
      v87 = v79 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v79);
    result = _CocoaArrayWrapper.endIndex.getter(v87);
    v80 = result;
    if (result)
      goto LABEL_50;
  }
  else
  {
    v80 = *(_QWORD *)((v79 & 0xFFFFFFFFFFFFF8) + 0x10);
    result = swift_bridgeObjectRetain(v79);
    if (v80)
    {
LABEL_50:
      if (v80 < 1)
        goto LABEL_134;
      v81 = 0;
      do
      {
        if ((v79 & 0xC000000000000001) != 0)
          v82 = (__objc2_prot_list *)specialized _ArrayBuffer._getElementSlowPath(_:)(v81, v79);
        else
          v82 = (__objc2_prot_list *)*(id *)(v79 + 8 * v81 + 32);
        v83 = v82;
        ++v81;
        v84 = sub_10000C48C(v82, (uint64_t)v181, (uint64_t)v73, v77);
        sub_10000B528(v84);

      }
      while (v80 != v81);
    }
  }
  swift_bridgeObjectRelease_n(v79, 2);
  swift_bridgeObjectRelease(v77);
  swift_bridgeObjectRelease(v73);
  if (qword_1000A4F08 != -1)
    goto LABEL_131;
  while (1)
  {
    v88 = type metadata accessor for Logger(0);
    v89 = sub_100014698(v88, (uint64_t)qword_1000A7A80);
    v90 = v173;
    swift_bridgeObjectRetain(v173);
    v91 = swift_bridgeObjectRetain(v60);
    v92 = Logger.logObject.getter(v91);
    v93 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v92, v93))
    {
      v94 = (v69 - (_QWORD)v179);
      v95 = v179;
      v96 = swift_slowAlloc(52, -1);
      *(_DWORD *)v96 = 134219008;
      v191 = v95;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v191, v192, v96 + 4, v96 + 12);
      *(_WORD *)(v96 + 12) = 2048;
      if (v166)
      {
        v97 = v173;
        if (v173 < 0)
          v101 = v173;
        else
          v101 = v173 & 0xFFFFFFFFFFFFFF8;
        swift_bridgeObjectRetain(v173);
        v98 = _CocoaArrayWrapper.endIndex.getter(v101);
        swift_bridgeObjectRelease(v97);
      }
      else
      {
        v97 = v173;
        v98 = *(NSObject **)((v173 & 0xFFFFFFFFFFFFF8) + 0x10);
      }
      swift_bridgeObjectRelease(v97);
      v191 = v98;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v191, v192, v96 + 14, v96 + 22);
      swift_bridgeObjectRelease(v97);
      *(_WORD *)(v96 + 22) = 2048;
      v191 = v94;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v191, v192, v96 + 24, v96 + 32);
      *(_WORD *)(v96 + 32) = 2048;
      v100 = (uint64_t)v181;
      if (v178)
      {
        if (v60 < 0)
          v103 = v60;
        else
          v103 = v60 & 0xFFFFFFFFFFFFFF8;
        swift_bridgeObjectRetain(v60);
        v102 = _CocoaArrayWrapper.endIndex.getter(v103);
        swift_bridgeObjectRelease(v60);
      }
      else
      {
        v102 = *(NSObject **)((v60 & 0xFFFFFFFFFFFFF8) + 0x10);
      }
      swift_bridgeObjectRelease(v60);
      v191 = v102;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v191, v192, v96 + 34, v96 + 42);
      swift_bridgeObjectRelease(v60);
      *(_WORD *)(v96 + 42) = 2048;
      result = swift_beginAccess(&v194, v186, 0, 0);
      v104 = (char *)v94 + (_QWORD)v95;
      if (__OFADD__(v95, v94))
        goto LABEL_135;
      v105 = v194[2];
      v106 = __OFSUB__(v105, v104);
      v107 = (v105 - (_QWORD)v104);
      if (v106)
        goto LABEL_136;
      v191 = v107;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v191, v192, v96 + 44, v96 + 52);
      _os_log_impl((void *)&_mh_execute_header, v92, v93, "Added: %ld serviceGroups (out of %ld), %ld action sets (out of %ld) and %ld accessories/services to widgetTileInfos", (uint8_t *)v96, 0x34u);
      swift_slowDealloc(v96, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n(v90, 2);
      v99 = swift_bridgeObjectRelease_n(v60, 2);
      v100 = (uint64_t)v181;
    }
    v108 = Logger.logObject.getter(v99);
    v109 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v108, (os_log_type_t)v109))
    {
      v180 = v89;
      v110 = (uint8_t *)swift_slowAlloc(12, -1);
      v111 = swift_slowAlloc(32, -1);
      v191 = v111;
      *(_DWORD *)v110 = 136315138;
      swift_beginAccess(&v194, v187, 0, 0);
      v60 = (uint64_t)v194;
      v112 = v194[2];
      v113 = _swiftEmptyArrayStorage;
      if (v112)
      {
        v173 = (uint64_t)v111;
        LODWORD(v177) = v109;
        v178 = (unint64_t)v110;
        v179 = v108;
        p_isa = _swiftEmptyArrayStorage;
        swift_bridgeObjectRetain(v194);
        sub_10002D858(0, v112, 0);
        v114 = sub_100013E1C(v60);
        v69 = v115;
        v117 = v116 & 1;
        while ((v114 & 0x8000000000000000) == 0 && v114 < 1 << *(_BYTE *)(v60 + 32))
        {
          if (((*(_QWORD *)(v60 + 56 + (((unint64_t)v114 >> 3) & 0xFFFFFFFFFFFFF8)) >> v114) & 1) == 0)
            goto LABEL_126;
          if (*(_DWORD *)(v60 + 36) != (_DWORD)v69)
            goto LABEL_127;
          v118 = v174;
          sub_100008BB8(*(_QWORD *)(v60 + 48) + *(_QWORD *)(v185 + 72) * v114, v174);
          v119 = v118;
          v120 = v175;
          sub_100008C38(v119, v175);
          (*(void (**)(char *, uint64_t, uint64_t))(v183 + 16))(v176, v120, v184);
          sub_100008BFC(v120);
          v113 = p_isa;
          if ((swift_isUniquelyReferenced_nonNull_native(p_isa) & 1) == 0)
          {
            sub_10002D858(0, v113[2] + 1, 1);
            v113 = p_isa;
          }
          v122 = v113[2];
          v121 = v113[3];
          if (v122 >= v121 >> 1)
          {
            sub_10002D858(v121 > 1, v122 + 1, 1);
            v113 = p_isa;
          }
          v113[2] = v122 + 1;
          (*(void (**)(unint64_t, char *, uint64_t))(v183 + 32))((unint64_t)v113+ ((*(unsigned __int8 *)(v183 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v183 + 80))+ *(_QWORD *)(v183 + 72) * v122, v176, v184);
          p_isa = v113;
          v123 = sub_100013EBC(v114, v69, v117 & 1, v60);
          v114 = v123;
          v69 = v124;
          v117 = v125 & 1;
          if (!--v112)
          {
            sub_100014DB8(v123, v124, v125 & 1);
            swift_bridgeObjectRelease(v60);
            v100 = (uint64_t)v181;
            v108 = v179;
            v110 = (uint8_t *)v178;
            LOBYTE(v109) = v177;
            v111 = v173;
            goto LABEL_101;
          }
        }
        __break(1u);
LABEL_126:
        __break(1u);
LABEL_127:
        __break(1u);
        goto LABEL_128;
      }
LABEL_101:
      v126 = Array.description.getter(v113, v184);
      v128 = v127;
      swift_bridgeObjectRelease(v113);
      p_isa = (_QWORD *)sub_100023980(v126, v128, (uint64_t *)&v191);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&p_isa, v190, v110 + 4, v110 + 12);
      swift_bridgeObjectRelease(v128);
      _os_log_impl((void *)&_mh_execute_header, v108, (os_log_type_t)v109, "widgetTileInfos UUIDs: %s", v110, 0xCu);
      swift_arrayDestroy(v111, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v111, -1, -1);
      swift_slowDealloc(v110, -1, -1);

    }
    else
    {

    }
    v129 = sub_10000B13C(v100, (uint64_t *)&v194);
    v191 = &_swiftEmptySetSingleton;
    v130 = sub_100014AAC((uint64_t)v129, (uint64_t)&v191);
    v131 = v191;
    swift_bridgeObjectRelease(v129);
    swift_bridgeObjectRelease(v131);
    v193 = v130;
    v132 = (_QWORD *)v130[2];
    swift_beginAccess(&v194, &v191, 0, 0);
    v133 = v194;
    if (v132 == (_QWORD *)v194[2])
      goto LABEL_124;
    swift_bridgeObjectRetain_n(v130, 2);
    v134 = sub_100014CB0((uint64_t)v130);
    swift_bridgeObjectRelease(v130);
    if (v133[2] <= *(_QWORD *)(v134 + 16) >> 3)
    {
      p_isa = (_QWORD *)v134;
      v137 = swift_bridgeObjectRetain(v133);
      sub_100011028(v137);
      swift_bridgeObjectRelease(v133);
      v136 = (char *)p_isa;
    }
    else
    {
      v135 = swift_bridgeObjectRetain(v133);
      v136 = sub_100011504(v135, v134);
      swift_bridgeObjectRelease(v133);
    }
    swift_bridgeObjectRetain(v100);
    v138 = swift_bridgeObjectRetain(v130);
    v139 = Logger.logObject.getter(v138);
    v140 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v139, v140))
    {
      v141 = swift_slowAlloc(32, -1);
      *(_DWORD *)v141 = 134218496;
      p_isa = *(_QWORD **)(v100 + 16);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&p_isa, v190, v141 + 4, v141 + 12);
      swift_bridgeObjectRelease(v100);
      *(_WORD *)(v141 + 12) = 2048;
      p_isa = (_QWORD *)v194[2];
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&p_isa, v190, v141 + 14, v141 + 22);
      *(_WORD *)(v141 + 22) = 2048;
      swift_bridgeObjectRelease(v130);
      p_isa = v132;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&p_isa, v190, v141 + 24, v141 + 32);
      swift_bridgeObjectRelease(v130);
      _os_log_impl((void *)&_mh_execute_header, v139, v140, "WidgetTileInfos output inconsistency - uuids:%ld widgetTileInfos:%ld sortedWidgetTileInfos: %ld", (uint8_t *)v141, 0x20u);
      swift_slowDealloc(v141, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease(v100);
      swift_bridgeObjectRelease_n(v130, 2);
    }
    v142 = swift_bridgeObjectRetain(v136);
    v143 = Logger.logObject.getter(v142);
    v144 = static os_log_type_t.error.getter();
    if (!os_log_type_enabled(v143, (os_log_type_t)v144))
    {

      swift_bridgeObjectRelease_n(v136, 2);
      goto LABEL_124;
    }
    v145 = (uint8_t *)swift_slowAlloc(12, -1);
    v146 = swift_slowAlloc(32, -1);
    v147 = (uint64_t)v146;
    p_isa = &v146->isa;
    *(_DWORD *)v145 = 136315138;
    v60 = *((_QWORD *)v136 + 2);
    v148 = _swiftEmptyArrayStorage;
    if (!v60)
      break;
    v179 = v146;
    LODWORD(v180) = v144;
    v181 = v145;
    v182 = v143;
    v188 = _swiftEmptyArrayStorage;
    sub_10002D858(0, v60, 0);
    v149 = sub_100013E1C((uint64_t)v136);
    v151 = v150;
    v69 = v152 & 1;
    while ((v149 & 0x8000000000000000) == 0 && v149 < 1 << v136[32])
    {
      if (((*(_QWORD *)&v136[(((unint64_t)v149 >> 3) & 0xFFFFFFFFFFFFF8) + 56] >> v149) & 1) == 0)
        goto LABEL_129;
      if (*((_DWORD *)v136 + 9) != v151)
        goto LABEL_130;
      v153 = v174;
      sub_100008BB8(*((_QWORD *)v136 + 6) + *(_QWORD *)(v185 + 72) * v149, v174);
      v154 = v153;
      v155 = v175;
      sub_100008C38(v154, v175);
      (*(void (**)(char *, uint64_t, uint64_t))(v183 + 16))(v169, v155, v184);
      sub_100008BFC(v155);
      v148 = v188;
      if ((swift_isUniquelyReferenced_nonNull_native(v188) & 1) == 0)
      {
        sub_10002D858(0, v148[2] + 1, 1);
        v148 = v188;
      }
      v157 = v148[2];
      v156 = v148[3];
      if (v157 >= v156 >> 1)
      {
        sub_10002D858(v156 > 1, v157 + 1, 1);
        v148 = v188;
      }
      v148[2] = v157 + 1;
      (*(void (**)(unint64_t, char *, uint64_t))(v183 + 32))((unint64_t)v148+ ((*(unsigned __int8 *)(v183 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v183 + 80))+ *(_QWORD *)(v183 + 72) * v157, v169, v184);
      v188 = v148;
      v158 = sub_100013EBC(v149, v151, v69 & 1, (uint64_t)v136);
      v149 = v158;
      v151 = v159;
      v69 = v160 & 1;
      if (!--v60)
      {
        sub_100014DB8(v158, v159, v160 & 1);
        v145 = v181;
        v143 = v182;
        LOBYTE(v144) = v180;
        v147 = (uint64_t)v179;
        goto LABEL_123;
      }
    }
LABEL_128:
    __break(1u);
LABEL_129:
    __break(1u);
LABEL_130:
    __break(1u);
LABEL_131:
    swift_once(&qword_1000A4F08, sub_100053184);
  }
LABEL_123:
  v161 = Array.description.getter(v148, v184);
  v163 = v162;
  swift_bridgeObjectRelease(v148);
  v188 = (_QWORD *)sub_100023980(v161, v163, (uint64_t *)&p_isa);
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v188, &p_isa, v145 + 4, v145 + 12);
  swift_bridgeObjectRelease_n(v136, 2);
  swift_bridgeObjectRelease(v163);
  _os_log_impl((void *)&_mh_execute_header, v143, (os_log_type_t)v144, "Rejected these widgets out for some reason: %s", v145, 0xCu);
  swift_arrayDestroy(v147, 1, (char *)&type metadata for Any + 8);
  swift_slowDealloc(v147, -1, -1);
  swift_slowDealloc(v145, -1, -1);

LABEL_124:
  swift_beginAccess(&v193, &p_isa, 0, 0);
  v164 = v193;
  swift_bridgeObjectRelease(v194);
  return (uint64_t)v164;
}

_QWORD *sub_10000B13C(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(char *, uint64_t, uint64_t, uint64_t);
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  void (*v30)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t *v37;
  void (*v38)(char *, uint64_t, uint64_t);
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  char v45[24];
  uint64_t v46;

  v5 = sub_10000527C(&qword_1000A5068);
  __chkstk_darwin(v5);
  v42 = (uint64_t)&v32 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v41 = type metadata accessor for WidgetTileInfo(0);
  v43 = *(_QWORD *)(v41 - 8);
  v7 = __chkstk_darwin(v41);
  v40 = (uint64_t)&v32 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v34 = (uint64_t)&v32 - v9;
  v10 = type metadata accessor for UUID(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v39 = (char *)&v32 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_10000527C(&qword_1000A5060);
  __chkstk_darwin(v13);
  v15 = (char *)&v32 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = *(_QWORD *)(a1 + 16);
  if (v16)
  {
    v46 = v2;
    v17 = a1;
    v18 = a1 + ((*(unsigned __int8 *)(v11 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80));
    v33 = v17;
    swift_bridgeObjectRetain(v17);
    swift_beginAccess(a2, v45, 0, 0);
    v35 = *(_QWORD *)(v11 + 72);
    v38 = *(void (**)(char *, uint64_t, uint64_t))(v11 + 16);
    v44 = _swiftEmptyArrayStorage;
    v36 = v15;
    v37 = a2;
    v38(v15, v18, v10);
    while (1)
    {
      v19 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v11 + 56);
      v19(v15, 0, 1, v10);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v15, 1, v10) == 1)
      {
        a1 = v33;
        goto LABEL_16;
      }
      v20 = v39;
      v21 = (*(uint64_t (**)(char *, char *, uint64_t))(v11 + 32))(v39, v15, v10);
      v22 = *a2;
      __chkstk_darwin(v21);
      *(&v32 - 2) = (uint64_t)v20;
      swift_bridgeObjectRetain(v22);
      v23 = v42;
      v24 = v46;
      sub_10001D4F0((uint64_t (*)(char *))sub_100014DCC, v22, v42);
      v46 = v24;
      swift_bridgeObjectRelease(v22);
      (*(void (**)(char *))(v11 + 8))(v20);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v43 + 48))(v23, 1, v41) == 1)
      {
        sub_100014EFC(v23, &qword_1000A5068);
        v15 = v36;
      }
      else
      {
        v25 = v34;
        sub_100008C38(v23, v34);
        sub_100008C38(v25, v40);
        if ((swift_isUniquelyReferenced_nonNull_native(v44) & 1) == 0)
          v44 = (_QWORD *)sub_10005AA10(0, v44[2] + 1, 1, (unint64_t)v44);
        v15 = v36;
        v27 = v44[2];
        v26 = v44[3];
        if (v27 >= v26 >> 1)
          v44 = (_QWORD *)sub_10005AA10(v26 > 1, v27 + 1, 1, (unint64_t)v44);
        v28 = v43;
        v29 = v44;
        v44[2] = v27 + 1;
        sub_100008C38(v40, (uint64_t)v29+ ((*(unsigned __int8 *)(v28 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v28 + 80))+ *(_QWORD *)(v28 + 72) * v27);
      }
      v18 += v35;
      --v16;
      a2 = v37;
      if (!v16)
        break;
      v38(v15, v18, v10);
    }
    a1 = v33;
    v19(v15, 1, 1, v10);
  }
  else
  {
    v30 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v11 + 56);
    swift_bridgeObjectRetain(a1);
    v44 = _swiftEmptyArrayStorage;
    v30(v15, 1, 1, v10);
  }
LABEL_16:
  swift_bridgeObjectRelease(a1);
  return v44;
}

uint64_t sub_10000B528(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t result;
  uint64_t v11;
  char *v12;
  int64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  int64_t v18;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  unint64_t v22;
  int64_t v23;
  uint64_t v24;

  v2 = type metadata accessor for WidgetTileInfo(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = __chkstk_darwin(v2);
  v6 = (char *)&v24 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __chkstk_darwin(v4);
  v9 = (char *)&v24 - v8;
  result = __chkstk_darwin(v7);
  v12 = (char *)&v24 - v11;
  v13 = 0;
  v14 = a1 + 56;
  v15 = 1 << *(_BYTE *)(a1 + 32);
  v16 = -1;
  if (v15 < 64)
    v16 = ~(-1 << v15);
  v17 = v16 & *(_QWORD *)(a1 + 56);
  v18 = (unint64_t)(v15 + 63) >> 6;
  while (1)
  {
    if (v17)
    {
      v19 = __clz(__rbit64(v17));
      v17 &= v17 - 1;
      v20 = v19 | (v13 << 6);
      goto LABEL_5;
    }
    v21 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v21 >= v18)
      return swift_release(a1);
    v22 = *(_QWORD *)(v14 + 8 * v21);
    ++v13;
    if (!v22)
    {
      v13 = v21 + 1;
      if (v21 + 1 >= v18)
        return swift_release(a1);
      v22 = *(_QWORD *)(v14 + 8 * v13);
      if (!v22)
      {
        v13 = v21 + 2;
        if (v21 + 2 >= v18)
          return swift_release(a1);
        v22 = *(_QWORD *)(v14 + 8 * v13);
        if (!v22)
        {
          v13 = v21 + 3;
          if (v21 + 3 >= v18)
            return swift_release(a1);
          v22 = *(_QWORD *)(v14 + 8 * v13);
          if (!v22)
            break;
        }
      }
    }
LABEL_22:
    v17 = (v22 - 1) & v22;
    v20 = __clz(__rbit64(v22)) + (v13 << 6);
LABEL_5:
    sub_100008BB8(*(_QWORD *)(a1 + 48) + *(_QWORD *)(v3 + 72) * v20, (uint64_t)v12);
    sub_100008C38((uint64_t)v12, (uint64_t)v6);
    sub_100006974((uint64_t)v9, (uint64_t)v6);
    result = sub_100008BFC((uint64_t)v9);
  }
  v23 = v21 + 4;
  if (v23 >= v18)
    return swift_release(a1);
  v22 = *(_QWORD *)(v14 + 8 * v23);
  if (v22)
  {
    v13 = v23;
    goto LABEL_22;
  }
  while (1)
  {
    v13 = v23 + 1;
    if (__OFADD__(v23, 1))
      break;
    if (v13 >= v18)
      return swift_release(a1);
    v22 = *(_QWORD *)(v14 + 8 * v13);
    ++v23;
    if (v22)
      goto LABEL_22;
  }
LABEL_25:
  __break(1u);
  return result;
}

uint64_t sub_10000B710@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  id v24;
  uint64_t v25;
  char v26;
  char v27;
  uint64_t v28;
  id v29;
  NSObject *v30;
  os_log_type_t v31;
  uint64_t v32;
  uint64_t v33;
  id v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  id v43;
  id v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  void (*v54)(char *, char *, uint64_t);
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  void (*v58)(char *, _QWORD, uint64_t);
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  id v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78[2];

  v76 = a2;
  v3 = type metadata accessor for StaticRenderingMode(0);
  v71 = *(_QWORD *)(v3 - 8);
  v72 = v3;
  v4 = __chkstk_darwin(v3);
  v6 = (char *)&v66 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v8 = (char *)&v66 - v7;
  v9 = type metadata accessor for UUID(0);
  v10 = *(_QWORD *)(v9 - 8);
  v74 = v9;
  v75 = v10;
  v11 = __chkstk_darwin(v9);
  v13 = (char *)&v66 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __chkstk_darwin(v11);
  v16 = (char *)&v66 - v15;
  __chkstk_darwin(v14);
  v73 = (char *)&v66 - v17;
  v18 = objc_msgSend(a1, "actions");
  v19 = sub_100008CBC(0, &qword_1000A50B0, HMAction_ptr);
  v20 = sub_100014E30(&qword_1000A50B8, &qword_1000A50B0, HMAction_ptr);
  v21 = static Set._unconditionallyBridgeFromObjectiveC(_:)(v18, v19, v20);

  if ((v21 & 0xC000000000000001) != 0)
  {
    if (v21 < 0)
      v22 = v21;
    else
      v22 = v21 & 0xFFFFFFFFFFFFFF8;
    v23 = __CocoaSet.count.getter(v22);
  }
  else
  {
    v23 = *(_QWORD *)(v21 + 16);
  }
  swift_bridgeObjectRelease(v21);
  if (v23 < 1)
  {
    v41 = type metadata accessor for WidgetTileInfo(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v41 - 8) + 56))(v76, 1, 1, v41);
  }
  else
  {
    v24 = objc_msgSend(a1, "actions");
    v25 = static Set._unconditionallyBridgeFromObjectiveC(_:)(v24, v19, v20);

    sub_10000EB78(v25);
    v27 = v26;
    swift_bridgeObjectRelease(v25);
    if ((v27 & 1) != 0)
    {
      if (qword_1000A4F08 != -1)
        swift_once(&qword_1000A4F08, sub_100053184);
      v28 = type metadata accessor for Logger(0);
      sub_100014698(v28, (uint64_t)qword_1000A7A80);
      v29 = a1;
      v30 = Logger.logObject.getter(v29);
      v31 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v30, v31))
      {
        v32 = swift_slowAlloc(22, -1);
        v33 = swift_slowAlloc(64, -1);
        v78[0] = v33;
        *(_DWORD *)v32 = 136315394;
        v77 = sub_100023980(0xD000000000000015, 0x800000010008A150, v78);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v77, v78, v32 + 4, v32 + 12);
        *(_WORD *)(v32 + 12) = 2080;
        v72 = v32 + 14;
        v34 = objc_msgSend(v29, "uniqueIdentifier");
        v35 = v73;
        static UUID._unconditionallyBridgeFromObjectiveC(_:)(v34);

        v36 = sub_100008C7C(&qword_1000A7600, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
        v37 = v74;
        v38 = dispatch thunk of CustomStringConvertible.description.getter(v74, v36);
        v40 = v39;
        (*(void (**)(char *, uint64_t))(v75 + 8))(v35, v37);
        v77 = sub_100023980(v38, v40, v78);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v77, v78, v72, v32 + 22);

        swift_bridgeObjectRelease(v40);
        _os_log_impl((void *)&_mh_execute_header, v30, v31, "%s Ignoring action set %s with unsupportedActions (media playback, apple media accessory etc).", (uint8_t *)v32, 0x16u);
        swift_arrayDestroy(v33, 2, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v33, -1, -1);
        swift_slowDealloc(v32, -1, -1);

      }
      else
      {

      }
      v52 = type metadata accessor for WidgetTileInfo(0);
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v52 - 8) + 56))(v76, 1, 1, v52);
    }
    else
    {
      v70 = v8;
      v43 = objc_msgSend(a1, "uniqueIdentifier");
      static UUID._unconditionallyBridgeFromObjectiveC(_:)(v43);

      v44 = objc_msgSend(a1, "name");
      v45 = static String._unconditionallyBridgeFromObjectiveC(_:)(v44);
      v68 = v46;
      v69 = v45;

      v47 = HMActionSet.iconSymbol.getter();
      v66 = v48;
      v67 = v47;
      v49 = sub_100008CF4();
      if (v49)
      {
        v50 = v49;
        v51 = (uint64_t)v6;
      }
      else
      {
        v51 = (uint64_t)v6;
        v50 = static Color.orange.getter();
      }
      v53 = v74;
      v54 = *(void (**)(char *, char *, uint64_t))(v75 + 16);
      v55 = (uint64_t)v73;
      v54(v73, v16, v74);
      v56 = (uint64_t)v13;
      v54(v13, v16, v53);
      v57 = (uint64_t)v70;
      v58 = *(void (**)(char *, _QWORD, uint64_t))(v71 + 104);
      v59 = v72;
      v58(v70, enum case for StaticRenderingMode.monochrome(_:), v72);
      v58((char *)v51, enum case for StaticRenderingMode.hierarchical(_:), v59);
      v60 = v66;
      swift_bridgeObjectRetain(v66);
      v61 = sub_10002F268((uint64_t)_swiftEmptyArrayStorage);
      v62 = a1;
      v65 = (uint64_t)a1;
      v63 = v76;
      sub_100016388(v55, v56, v69, v68, 0, 0, v67, v60, v76, v67, v60, v57, v51, v50, 1, v65, 2, v61, 0,
        2,
        0,
        1,
        0,
        0,
        2);
      (*(void (**)(char *, uint64_t))(v75 + 8))(v16, v53);
      v64 = type metadata accessor for WidgetTileInfo(0);
      return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v64 - 8) + 56))(v63, 0, 1, v64);
    }
  }
}

_QWORD *sub_10000BD2C(unint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  id v7;
  void *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  int64_t v12;
  char isUniquelyReferenced_nonNull_native;
  int64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *result;
  uint64_t v31;
  unint64_t v32;
  char *v33;
  id v34;

  v2 = v1;
  v3 = a1;
  if (a1 >> 62)
    goto LABEL_36;
  v4 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain(a1);
  while (v4)
  {
    v32 = v3 & 0xC000000000000001;
    v5 = _swiftEmptyArrayStorage;
    v6 = 4;
    v31 = v3;
    while (1)
    {
      v7 = v32 ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v6 - 4, v3) : *(id *)(v3 + 8 * v6);
      v8 = v7;
      v9 = v6 - 3;
      if (__OFADD__(v6 - 4, 1))
        break;
      v34 = v7;
      sub_10000EEC8(&v34, &v33);
      if (v2)
      {
        swift_bridgeObjectRelease(v5);
        swift_bridgeObjectRelease(v31);

        return v5;
      }

      v10 = v33;
      v11 = *((_QWORD *)v33 + 2);
      v12 = v5[2];
      v3 = v12 + v11;
      if (__OFADD__(v12, v11))
        goto LABEL_32;
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v5);
      if ((isUniquelyReferenced_nonNull_native & 1) != 0 && v3 <= v5[3] >> 1)
      {
        if (*((_QWORD *)v10 + 2))
          goto LABEL_20;
      }
      else
      {
        if (v12 <= v3)
          v14 = v12 + v11;
        else
          v14 = v12;
        v5 = (_QWORD *)sub_10005AA24(isUniquelyReferenced_nonNull_native, v14, 1, (unint64_t)v5);
        if (*((_QWORD *)v10 + 2))
        {
LABEL_20:
          v15 = v5[2];
          v3 = (v5[3] >> 1) - v15;
          v16 = type metadata accessor for UUID(0);
          if (v3 < v11)
            goto LABEL_34;
          v17 = *(_QWORD *)(v16 - 8);
          v18 = (*(unsigned __int8 *)(v17 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v17 + 80);
          v19 = *(_QWORD *)(v17 + 72);
          v20 = (char *)v5 + v18 + v19 * v15;
          v21 = &v10[v18];
          v22 = v19 * v11;
          v23 = &v20[v22];
          v24 = &v21[v22];
          if (v21 < v23 && v20 < v24)
          {
            result = (_QWORD *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
            __break(1u);
            return result;
          }
          swift_arrayInitWithCopy(v20);
          if (v11)
          {
            v26 = v5[2];
            v27 = __OFADD__(v26, v11);
            v28 = v26 + v11;
            if (v27)
              goto LABEL_35;
            v5[2] = v28;
          }
          goto LABEL_5;
        }
      }
      if (v11)
        goto LABEL_33;
LABEL_5:
      swift_bridgeObjectRelease(v10);
      ++v6;
      v3 = v31;
      if (v9 == v4)
      {
        swift_bridgeObjectRelease(v31);
        return v5;
      }
    }
    __break(1u);
LABEL_32:
    __break(1u);
LABEL_33:
    __break(1u);
LABEL_34:
    __break(1u);
LABEL_35:
    __break(1u);
LABEL_36:
    if (v3 < 0)
      v29 = v3;
    else
      v29 = v3 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v3);
    v4 = _CocoaArrayWrapper.endIndex.getter(v29);
  }
  swift_bridgeObjectRelease(v3);
  return _swiftEmptyArrayStorage;
}

uint64_t sub_10000BFA4(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  id v5;
  void *v6;
  uint64_t v7;
  id v8;
  id v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  int64_t v13;
  int64_t v14;
  int isUniquelyReferenced_nonNull_native;
  int64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t result;

  if ((unint64_t)a1 >> 62)
    goto LABEL_36;
  v2 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain(a1);
  while (v2)
  {
    v3 = _swiftEmptyArrayStorage;
    v4 = 4;
    while (1)
    {
      v5 = (a1 & 0xC000000000000001) != 0
         ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v4 - 4, a1)
         : *(id *)(a1 + 8 * v4);
      v6 = v5;
      v7 = v4 - 3;
      if (__OFADD__(v4 - 4, 1))
        break;
      v8 = objc_msgSend(v5, "uniqueIdentifiersForBridgedAccessories");
      if (v8)
      {
        v9 = v8;
        v10 = type metadata accessor for UUID(0);
        v11 = (_QWORD *)static Array._unconditionallyBridgeFromObjectiveC(_:)(v9, v10);

        v6 = v9;
      }
      else
      {
        v11 = _swiftEmptyArrayStorage;
      }

      v12 = v11[2];
      v13 = v3[2];
      v14 = v13 + v12;
      if (__OFADD__(v13, v12))
        goto LABEL_32;
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v3);
      if (isUniquelyReferenced_nonNull_native && v14 <= v3[3] >> 1)
      {
        if (v11[2])
          goto LABEL_22;
      }
      else
      {
        if (v13 <= v14)
          v16 = v13 + v12;
        else
          v16 = v13;
        v3 = (_QWORD *)sub_10005AA24(isUniquelyReferenced_nonNull_native, v16, 1, (unint64_t)v3);
        if (v11[2])
        {
LABEL_22:
          v17 = v3[2];
          v18 = (v3[3] >> 1) - v17;
          v19 = type metadata accessor for UUID(0);
          if (v18 < v12)
            goto LABEL_34;
          v20 = *(_QWORD *)(v19 - 8);
          v21 = (*(unsigned __int8 *)(v20 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v20 + 80);
          v22 = *(_QWORD *)(v20 + 72);
          v23 = (char *)v3 + v21 + v22 * v17;
          v24 = (char *)v11 + v21;
          v25 = v22 * v12;
          v26 = &v23[v25];
          v27 = &v24[v25];
          if (v24 < v26 && v23 < v27)
          {
            result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
            __break(1u);
            return result;
          }
          swift_arrayInitWithCopy(v23);
          if (v12)
          {
            v29 = v3[2];
            v30 = __OFADD__(v29, v12);
            v31 = v29 + v12;
            if (v30)
              goto LABEL_35;
            v3[2] = v31;
          }
          goto LABEL_5;
        }
      }
      if (v12)
        goto LABEL_33;
LABEL_5:
      swift_bridgeObjectRelease(v11);
      ++v4;
      if (v7 == v2)
        goto LABEL_41;
    }
    __break(1u);
LABEL_32:
    __break(1u);
LABEL_33:
    __break(1u);
LABEL_34:
    __break(1u);
LABEL_35:
    __break(1u);
LABEL_36:
    if (a1 < 0)
      v32 = a1;
    else
      v32 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v2 = _CocoaArrayWrapper.endIndex.getter(v32);
  }
  v3 = _swiftEmptyArrayStorage;
LABEL_41:
  swift_bridgeObjectRelease(a1);
  return (uint64_t)v3;
}

_QWORD *sub_10000C214(unint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  id v7;
  void *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  int64_t v12;
  char isUniquelyReferenced_nonNull_native;
  int64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *result;
  uint64_t v31;
  unint64_t v32;
  char *v33;
  id v34;

  v2 = v1;
  v3 = a1;
  if (a1 >> 62)
    goto LABEL_36;
  v4 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain(a1);
  while (v4)
  {
    v32 = v3 & 0xC000000000000001;
    v5 = _swiftEmptyArrayStorage;
    v6 = 4;
    v31 = v3;
    while (1)
    {
      v7 = v32 ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v6 - 4, v3) : *(id *)(v3 + 8 * v6);
      v8 = v7;
      v9 = v6 - 3;
      if (__OFADD__(v6 - 4, 1))
        break;
      v34 = v7;
      sub_10000F208(&v34, &v33);
      if (v2)
      {
        swift_bridgeObjectRelease(v5);
        swift_bridgeObjectRelease(v31);

        return v5;
      }

      v10 = v33;
      v11 = *((_QWORD *)v33 + 2);
      v12 = v5[2];
      v3 = v12 + v11;
      if (__OFADD__(v12, v11))
        goto LABEL_32;
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v5);
      if ((isUniquelyReferenced_nonNull_native & 1) != 0 && v3 <= v5[3] >> 1)
      {
        if (*((_QWORD *)v10 + 2))
          goto LABEL_20;
      }
      else
      {
        if (v12 <= v3)
          v14 = v12 + v11;
        else
          v14 = v12;
        v5 = (_QWORD *)sub_10005AA24(isUniquelyReferenced_nonNull_native, v14, 1, (unint64_t)v5);
        if (*((_QWORD *)v10 + 2))
        {
LABEL_20:
          v15 = v5[2];
          v3 = (v5[3] >> 1) - v15;
          v16 = type metadata accessor for UUID(0);
          if (v3 < v11)
            goto LABEL_34;
          v17 = *(_QWORD *)(v16 - 8);
          v18 = (*(unsigned __int8 *)(v17 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v17 + 80);
          v19 = *(_QWORD *)(v17 + 72);
          v20 = (char *)v5 + v18 + v19 * v15;
          v21 = &v10[v18];
          v22 = v19 * v11;
          v23 = &v20[v22];
          v24 = &v21[v22];
          if (v21 < v23 && v20 < v24)
          {
            result = (_QWORD *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
            __break(1u);
            return result;
          }
          swift_arrayInitWithCopy(v20);
          if (v11)
          {
            v26 = v5[2];
            v27 = __OFADD__(v26, v11);
            v28 = v26 + v11;
            if (v27)
              goto LABEL_35;
            v5[2] = v28;
          }
          goto LABEL_5;
        }
      }
      if (v11)
        goto LABEL_33;
LABEL_5:
      swift_bridgeObjectRelease(v10);
      ++v6;
      v3 = v31;
      if (v9 == v4)
      {
        swift_bridgeObjectRelease(v31);
        return v5;
      }
    }
    __break(1u);
LABEL_32:
    __break(1u);
LABEL_33:
    __break(1u);
LABEL_34:
    __break(1u);
LABEL_35:
    __break(1u);
LABEL_36:
    if (v3 < 0)
      v29 = v3;
    else
      v29 = v3 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v3);
    v4 = _CocoaArrayWrapper.endIndex.getter(v29);
  }
  swift_bridgeObjectRelease(v3);
  return _swiftEmptyArrayStorage;
}

uint64_t sub_10000C48C(__objc2_prot_list *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  Swift::Int v28;
  id v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  void (**v36)(char *, uint64_t);
  __objc2_prot_list *v37;
  uint64_t v38;
  Swift::Int v39;
  unsigned __int8 v40;
  _QWORD *v41;
  unint64_t v42;
  char *v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  char v48;
  unint64_t v49;
  BOOL v50;
  uint64_t v51;
  __objc2_prot_list *v52;
  id v53;
  unint64_t v54;
  uint64_t v55;
  void (*v56)(char *, uint64_t);
  __objc2_prot_list *v57;
  __objc2_prot_list *v58;
  void (**v59)(char *, uint64_t);
  __objc2_prot_list *v60;
  NSObject *v61;
  uint64_t v62;
  id v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  unint64_t v69;
  uint64_t v70;
  uint64_t v71;
  _QWORD *v72;
  char *v73;
  uint64_t v74;
  char v75;
  char v76;
  uint64_t v77;
  uint64_t v78;
  char v79;
  char *v80;
  uint64_t v81;
  uint64_t v82;
  char v83;
  char v84;
  void *v85;
  void *v86;
  id v87;
  _QWORD *v88;
  unint64_t v89;
  unint64_t v90;
  uint64_t v91;
  uint64_t isUniquelyReferenced_nonNull_native;
  uint64_t v93;
  void (*v94)(_QWORD **, _QWORD);
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  unint64_t v98;
  unint64_t v99;
  uint64_t v100;
  uint64_t v101;
  unint64_t v102;
  unint64_t v103;
  os_log_t v104;
  _QWORD *v105;
  uint64_t v106;
  id v107;
  uint64_t v108;
  __objc2_prot_list *v109;
  uint64_t v110;
  uint64_t v111;
  id v112;
  void *v113;
  id v114;
  _QWORD *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  id v119;
  void *v120;
  __objc2_prot_list *v121;
  id v122;
  _QWORD *v123;
  uint64_t v124;
  id v125;
  uint64_t v126;
  id v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  void (*v134)(uint64_t, uint64_t);
  uint64_t v135;
  __objc2_prot_list *v136;
  id v137;
  uint64_t v138;
  uint64_t v139;
  __objc2_prot_list *v140;
  NSObject *v141;
  os_log_type_t v142;
  int v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  unint64_t v148;
  unint64_t v149;
  id v150;
  char *v151;
  uint64_t v152;
  unint64_t v153;
  unint64_t v154;
  os_log_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  NSObject *v162;
  os_log_type_t v163;
  uint8_t *v164;
  _QWORD *v165;
  uint64_t v166;
  uint64_t v167;
  unint64_t v168;
  unint64_t v169;
  __objc2_prot_list *v170;
  NSObject *v171;
  os_log_type_t v172;
  uint8_t *v173;
  _QWORD *v174;
  id v175;
  char *v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  unint64_t v181;
  unint64_t v182;
  uint64_t v183;
  __objc2_prot_list *v184;
  NSObject *v185;
  int v186;
  uint64_t v187;
  uint64_t v188;
  int64_t v189;
  _QWORD *v190;
  int64_t v191;
  Swift::Int v192;
  char v193;
  char v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  unint64_t v199;
  unint64_t v200;
  unint64_t v201;
  int64_t v202;
  uint64_t v203;
  char v204;
  uint64_t v205;
  uint64_t v206;
  unint64_t v207;
  unint64_t v208;
  id v209;
  char *v210;
  uint64_t v211;
  uint64_t v212;
  unint64_t v213;
  unint64_t v214;
  os_log_t v215;
  uint64_t result;
  _QWORD *v217;
  os_log_t v218;
  uint64_t v219;
  uint64_t v220;
  __objc2_prot_list *v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  int v228;
  char *v229;
  uint64_t v230;
  int v231;
  uint64_t v232;
  __objc2_prot_list *v233;
  char *v234;
  void (**v235)(char *, uint64_t);
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  char *v240;
  __objc2_prot_list *v241;
  NSObject *v242;
  uint64_t v243;
  os_log_t v244;
  uint8_t *v245;
  uint64_t v246;
  _QWORD *p_isa;
  uint64_t v248;
  _QWORD *v249;
  _QWORD *v250;
  char *v251;
  uint64_t v252;
  char v253;
  _QWORD *v254;

  v241 = (__objc2_prot_list *)a3;
  v242 = a4;
  v232 = a2;
  v5 = sub_10000527C(&qword_1000A5068);
  __chkstk_darwin(v5);
  v227 = (uint64_t)&v217 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v226 = type metadata accessor for WidgetTileInfo(0);
  v239 = *(_QWORD *)(v226 - 8);
  v7 = __chkstk_darwin(v226);
  v222 = (uint64_t)&v217 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __chkstk_darwin(v7);
  v225 = (uint64_t)&v217 - v10;
  v11 = __chkstk_darwin(v9);
  v223 = (uint64_t)&v217 - v12;
  v13 = __chkstk_darwin(v11);
  v237 = (uint64_t)&v217 - v14;
  v15 = __chkstk_darwin(v13);
  v238 = (uint64_t)&v217 - v16;
  __chkstk_darwin(v15);
  v224 = (uint64_t)&v217 - v17;
  v18 = type metadata accessor for UUID(0);
  v19 = *(_QWORD *)(v18 - 8);
  v20 = __chkstk_darwin(v18);
  v240 = (char *)&v217 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = __chkstk_darwin(v20);
  v24 = (char *)&v217 - v23;
  __chkstk_darwin(v22);
  v234 = (char *)&v217 - v25;
  v236 = type metadata accessor for Logger(0);
  v235 = *(void (***)(char *, uint64_t))(v236 - 8);
  __chkstk_darwin(v236);
  v27 = (char *)&v217 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = (Swift::Int)&_swiftEmptySetSingleton;
  v254 = &_swiftEmptySetSingleton;
  v233 = a1;
  v29 = -[__objc2_prot_list hf_visibleServices](a1, "hf_visibleServices");
  v30 = sub_100008CBC(0, &qword_1000A5078, HMService_ptr);
  v31 = sub_100014E30(&qword_1000A5098, &qword_1000A5078, HMService_ptr);
  v245 = (uint8_t *)v30;
  v32 = static Set._unconditionallyBridgeFromObjectiveC(_:)(v29, v30, v31);

  v243 = v18;
  v246 = v19;
  v229 = v27;
  if ((v32 & 0xC000000000000001) != 0)
  {
    p_isa = &_swiftEmptySetSingleton;
    if (v32 < 0)
      v33 = v32;
    else
      v33 = v32 & 0xFFFFFFFFFFFFFF8;
    v34 = __CocoaSet.makeIterator()(v33);
    v35 = (_QWORD *)__CocoaSet.Iterator.next()(v34);
    if (v35)
    {
      v36 = (void (**)(char *, uint64_t))((char *)&type metadata for Swift.AnyObject + 8);
      v37 = &HomeManagerActor;
      v38 = -1;
      v28 = 1;
      do
      {
        v250 = v35;
        swift_dynamicCast(&v251, &v250, (char *)&type metadata for Swift.AnyObject + 8, v245, 7);
        v40 = objc_msgSend(v251, "hf_isSensorService");
        v27 = v251;
        if ((v40 & 1) != 0)
        {

        }
        else
        {
          v41 = p_isa;
          v42 = p_isa[2];
          if (p_isa[3] <= v42)
          {
            sub_100007560(v42 + 1);
            v41 = p_isa;
          }
          v39 = NSObject._rawHashValue(seed:)(v41[5]);
          v43 = (char *)(v41 + 7);
          v44 = -1 << *((_BYTE *)v41 + 32);
          v45 = v39 & ~v44;
          v46 = v45 >> 6;
          if (((-1 << v45) & ~v41[(v45 >> 6) + 7]) != 0)
          {
            v47 = __clz(__rbit64((-1 << v45) & ~v41[(v45 >> 6) + 7])) | v45 & 0x7FFFFFFFFFFFFFC0;
          }
          else
          {
            v48 = 0;
            v49 = (unint64_t)(63 - v44) >> 6;
            do
            {
              if (++v46 == v49 && (v48 & 1) != 0)
              {
                __break(1u);
                __break(1u);
                goto LABEL_88;
              }
              v50 = v46 == v49;
              if (v46 == v49)
                v46 = 0;
              v48 |= v50;
              v51 = *(_QWORD *)&v43[8 * v46];
            }
            while (v51 == -1);
            v47 = __clz(__rbit64(~v51)) + (v46 << 6);
          }
          *(_QWORD *)&v43[(v47 >> 3) & 0x1FFFFFFFFFFFFFF8] |= 1 << v47;
          *(_QWORD *)(v41[6] + 8 * v47) = v27;
          ++v41[2];
        }
        v35 = (_QWORD *)__CocoaSet.Iterator.next()(v39);
      }
      while (v35);
      v28 = (Swift::Int)p_isa;
      v27 = v229;
    }
    swift_release(v34);
  }
  else
  {
    v28 = sub_100013B28(v32);
  }
  v41 = (_QWORD *)v236;
  v36 = v235;
  v244 = (os_log_t)(v28 & 0xC000000000000001);
  v52 = v233;
  if ((v28 & 0xC000000000000001) != 0)
  {
    if (__CocoaSet.count.getter(v28) < 2)
    {
LABEL_28:
      v228 = 0;
      v231 = 1;
      goto LABEL_31;
    }
  }
  else if (*(uint64_t *)(v28 + 16) < 2)
  {
    goto LABEL_28;
  }
  v231 = HMAccessory.showAsIndividualTiles.getter();
  v228 = v231;
LABEL_31:
  v37 = v52;
  v53 = -[__objc2_prot_list services](v52, "services");
  v54 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v53, v245);

  v38 = (uint64_t)sub_10000C214(v54);
  swift_bridgeObjectRelease(v54);
  if (qword_1000A4F08 != -1)
LABEL_88:
    swift_once(&qword_1000A4F08, sub_100053184);
  v55 = sub_100014698((uint64_t)v41, (uint64_t)qword_1000A7A80);
  v56 = v36[2];
  v230 = v55;
  ((void (*)(char *))v56)(v27);
  v57 = v37;
  swift_retain_n(v28, 2);
  swift_bridgeObjectRetain_n(v38, 2);
  v58 = v57;
  v59 = v36;
  v60 = v58;
  v61 = Logger.logObject.getter(v58);
  LODWORD(v233) = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v61, (os_log_type_t)v233))
  {
    v218 = v61;
    v219 = v38;
    v62 = swift_slowAlloc(48, -1);
    v217 = (_QWORD *)swift_slowAlloc(128, -1);
    v250 = v217;
    *(_DWORD *)v62 = 136316162;
    p_isa = (_QWORD *)sub_100023980(0xD000000000000047, 0x800000010008A0A0, (uint64_t *)&v250);
    v221 = (__objc2_prot_list *)&v248;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&p_isa, &v248, v62 + 4, v62 + 12);
    *(_WORD *)(v62 + 12) = 2080;
    v220 = v62 + 14;
    v63 = -[__objc2_prot_list uniqueIdentifier](v60, "uniqueIdentifier");
    v64 = v234;
    static UUID._unconditionallyBridgeFromObjectiveC(_:)(v63);

    v65 = sub_100008C7C(&qword_1000A7600, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v66 = v243;
    v67 = dispatch thunk of CustomStringConvertible.description.getter(v243, v65);
    v69 = v68;
    v70 = v246;
    (*(void (**)(char *, uint64_t))(v246 + 8))(v64, v66);
    p_isa = (_QWORD *)sub_100023980(v67, v69, (uint64_t *)&v250);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&p_isa, v221, v220, v62 + 22);

    v221 = v60;
    swift_bridgeObjectRelease(v69);
    v220 = v62;
    *(_WORD *)(v62 + 22) = 2080;
    if (v244)
      v71 = __CocoaSet.count.getter(v28);
    else
      v71 = *(_QWORD *)(v28 + 16);
    v72 = _swiftEmptyArrayStorage;
    if (v71)
    {
      v249 = _swiftEmptyArrayStorage;
      sub_10002D858(0, v71 & ~(v71 >> 63), 0);
      if (v244)
      {
        v73 = (char *)__CocoaSet.startIndex.getter(v28);
        v75 = 1;
      }
      else
      {
        v73 = (char *)sub_100014208(v28);
        v75 = v76 & 1;
      }
      v251 = v73;
      v252 = v74;
      v253 = v75;
      if ((v71 & 0x8000000000000000) == 0)
        goto LABEL_45;
      __break(1u);
LABEL_43:
      v77 = (uint64_t)v251;
      v78 = v252;
      v79 = v253;
      v80 = (char *)sub_100013EBC((int64_t)v251, v252, v253, v28);
      v82 = v81;
      v84 = v83;
      sub_100014DB8(v77, v78, v79);
      v251 = v80;
      v252 = v82;
      v66 = v243;
      v70 = v246;
      v253 = v84 & 1;
      while (--v71)
      {
LABEL_45:
        sub_100013FA0((uint64_t)v251, v252, v253, v28);
        v86 = v85;
        v87 = objc_msgSend(v85, "uniqueIdentifier");
        static UUID._unconditionallyBridgeFromObjectiveC(_:)(v87);

        v88 = v249;
        if ((swift_isUniquelyReferenced_nonNull_native(v249) & 1) == 0)
        {
          sub_10002D858(0, v88[2] + 1, 1);
          v88 = v249;
        }
        v90 = v88[2];
        v89 = v88[3];
        if (v90 >= v89 >> 1)
        {
          sub_10002D858(v89 > 1, v90 + 1, 1);
          v88 = v249;
        }
        v88[2] = v90 + 1;
        (*(void (**)(unint64_t, char *, uint64_t))(v70 + 32))((unint64_t)v88+ ((*(unsigned __int8 *)(v70 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v70 + 80))+ *(_QWORD *)(v70 + 72) * v90, v24, v66);
        v249 = v88;
        if (!v244)
          goto LABEL_43;
        if ((v253 & 1) == 0)
          goto LABEL_115;
        v91 = __CocoaSet.Index.handleBitPattern.getter(v251, v252);
        if (v91)
          isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v91);
        else
          isUniquelyReferenced_nonNull_native = 1;
        v93 = sub_10000527C(&qword_1000A50A0);
        v94 = (void (*)(_QWORD **, _QWORD))Set.Index._asCocoa.modify(&p_isa, v93);
        __CocoaSet.formIndex(after:isUnique:)(v95, isUniquelyReferenced_nonNull_native, v28);
        v94(&p_isa, 0);
      }
      sub_100014DB8((uint64_t)v251, v252, v253);
      v72 = v249;
    }
    v96 = v220;
    v97 = Array.description.getter(v72, v66);
    v99 = v98;
    swift_bridgeObjectRelease(v72);
    p_isa = (_QWORD *)sub_100023980(v97, v99, (uint64_t *)&v250);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&p_isa, &v248, v96 + 24, v96 + 32);
    swift_release_n(v28, 2);
    swift_bridgeObjectRelease(v99);
    *(_WORD *)(v96 + 32) = 1024;
    LODWORD(p_isa) = v228 & 1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&p_isa, (char *)&p_isa + 4, v96 + 34, v96 + 38);
    *(_WORD *)(v96 + 38) = 2080;
    v38 = v219;
    v100 = swift_bridgeObjectRetain(v219);
    v101 = Array.description.getter(v100, v66);
    v103 = v102;
    swift_bridgeObjectRelease(v38);
    p_isa = (_QWORD *)sub_100023980(v101, v103, (uint64_t *)&v250);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&p_isa, &v248, v96 + 40, v96 + 48);
    swift_bridgeObjectRelease_n(v38, 2);
    swift_bridgeObjectRelease(v103);
    v104 = v218;
    _os_log_impl((void *)&_mh_execute_header, v218, (os_log_type_t)v233, "%s for accessory %s - allVisibleServices: %s needToBeShownAsSeparateTile: %{BOOL}d linkedServiceIDs: %s", (uint8_t *)v96, 0x30u);
    v105 = v217;
    swift_arrayDestroy(v217, 4, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v105, -1, -1);
    swift_slowDealloc(v96, -1, -1);

    v235[1](v229, v236);
    v60 = v221;
  }
  else
  {

    swift_bridgeObjectRelease_n(v38, 2);
    swift_release_n(v28, 2);

    v59[1](v27, (uint64_t)v41);
    v66 = v243;
  }
  v106 = v232;
  if ((v231 & 1) == 0)
  {
    swift_bridgeObjectRelease(v38);
    swift_release(v28);
    if (v106)
    {
      swift_bridgeObjectRetain(v106);
      v114 = -[__objc2_prot_list uniqueIdentifier](v60, "uniqueIdentifier");
      v115 = v234;
      static UUID._unconditionallyBridgeFromObjectiveC(_:)(v114);

      __chkstk_darwin(v116);
      *(&v217 - 2) = v115;
      LOBYTE(v114) = sub_10002BC68((uint64_t (*)(char *))sub_100014E70, (_BOOL8)(&v217 - 4), v106);
      v117 = v246;
      (*(void (**)(_QWORD *, uint64_t))(v246 + 8))(v115, v66);
      swift_bridgeObjectRelease(v106);
      if ((v114 & 1) == 0)
        goto LABEL_72;
    }
    else
    {
      v117 = v246;
    }
    v118 = v227;
    sub_10000F560(v60, v227);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v239 + 48))(v118, 1, v226) != 1)
    {
      v157 = v224;
      sub_100008C38(v118, v224);
      v158 = v237;
      sub_100008BB8(v157, v237);
      v159 = v238;
      sub_100006974(v238, v158);
      sub_100008BFC(v159);
      v160 = v223;
      v161 = sub_100008BB8(v157, v223);
      v162 = Logger.logObject.getter(v161);
      v163 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v162, v163))
      {
        v164 = (uint8_t *)swift_slowAlloc(12, -1);
        v165 = (_QWORD *)swift_slowAlloc(32, -1);
        p_isa = v165;
        *(_DWORD *)v164 = 136315138;
        v166 = sub_100008C7C(&qword_1000A7600, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
        v167 = dispatch thunk of CustomStringConvertible.description.getter(v66, v166);
        v169 = v168;
        v251 = (char *)sub_100023980(v167, v168, (uint64_t *)&p_isa);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v251, &v252, v164 + 4, v164 + 12);
        swift_bridgeObjectRelease(v169);
        sub_100008BFC(v160);
        _os_log_impl((void *)&_mh_execute_header, v162, v163, "Returning widgetTileInfo for accessory %s", v164, 0xCu);
        swift_arrayDestroy(v165, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v165, -1, -1);
        swift_slowDealloc(v164, -1, -1);

      }
      else
      {

        sub_100008BFC(v160);
      }
      sub_100008BFC(v157);
      return (uint64_t)v254;
    }
    sub_100014EFC(v118, &qword_1000A5068);
LABEL_72:
    v119 = -[__objc2_prot_list hf_primaryService](v60, "hf_primaryService");
    if (v119)
    {
      v120 = v119;
      v121 = v60;
      if (!v106)
        goto LABEL_75;
      swift_bridgeObjectRetain(v106);
      v122 = objc_msgSend(v120, "uniqueIdentifier");
      v123 = v234;
      static UUID._unconditionallyBridgeFromObjectiveC(_:)(v122);

      __chkstk_darwin(v124);
      *(&v217 - 2) = v123;
      LOBYTE(v122) = sub_10002BC68((uint64_t (*)(char *))sub_100014E70, (_BOOL8)(&v217 - 4), v106);
      (*(void (**)(_QWORD *, uint64_t))(v117 + 8))(v123, v243);
      swift_bridgeObjectRelease(v106);
      if ((v122 & 1) != 0)
      {
LABEL_75:
        v125 = objc_msgSend(v120, "uniqueIdentifier");
        v126 = (uint64_t)v234;
        static UUID._unconditionallyBridgeFromObjectiveC(_:)(v125);

        v127 = objc_msgSend(v120, "name");
        v128 = static String._unconditionallyBridgeFromObjectiveC(_:)(v127);
        v130 = v129;

        v131 = v238;
        sub_10000FED0(v120, v126, v128, v130, 0, 255, v238);
        v132 = v130;
        v133 = v131;
        swift_bridgeObjectRelease(v132);
        v134 = *(void (**)(uint64_t, uint64_t))(v117 + 8);
        v134(v126, v243);
        v135 = v225;
        sub_100008C38(v131, v225);
        v136 = v121;
        v137 = -[__objc2_prot_list hf_primaryService](v121, "hf_primaryService");

        if (v137)
        {
          v138 = v237;
          sub_100008BB8(v135, v237);
          sub_100006974(v133, v138);
          sub_100008BFC(v133);
          v139 = v222;
          sub_100008BB8(v135, v222);
          v140 = v136;
          v141 = Logger.logObject.getter(v140);
          v142 = static os_log_type_t.default.getter();
          v143 = v142;
          if (os_log_type_enabled(v141, v142))
          {
            v144 = swift_slowAlloc(22, -1);
            v246 = swift_slowAlloc(64, -1);
            p_isa = (_QWORD *)v246;
            *(_DWORD *)v144 = 136315394;
            v145 = sub_100008C7C(&qword_1000A7600, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
            LODWORD(v245) = v143;
            v146 = v243;
            v147 = dispatch thunk of CustomStringConvertible.description.getter(v243, v145);
            v149 = v148;
            v251 = (char *)sub_100023980(v147, v148, (uint64_t *)&p_isa);
            v244 = v141;
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v251, &v252, v144 + 4, v144 + 12);
            swift_bridgeObjectRelease(v149);
            sub_100008BFC(v139);
            *(_WORD *)(v144 + 12) = 2080;
            v150 = -[__objc2_prot_list uniqueIdentifier](v140, "uniqueIdentifier");
            v151 = v234;
            static UUID._unconditionallyBridgeFromObjectiveC(_:)(v150);

            v152 = dispatch thunk of CustomStringConvertible.description.getter(v146, v145);
            v154 = v153;
            v134((uint64_t)v151, v146);
            v251 = (char *)sub_100023980(v152, v154, (uint64_t *)&p_isa);
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v251, &v252, v144 + 14, v144 + 22);

            swift_bridgeObjectRelease(v154);
            v155 = v244;
            _os_log_impl((void *)&_mh_execute_header, v244, (os_log_type_t)v245, "Returning widgetTileInfo for primary service %s of accessory %s", (uint8_t *)v144, 0x16u);
            v156 = v246;
            swift_arrayDestroy(v246, 2, (char *)&type metadata for Any + 8);
            swift_slowDealloc(v156, -1, -1);
            swift_slowDealloc(v144, -1, -1);

            sub_100008BFC(v225);
          }
          else
          {

            sub_100008BFC(v139);
            sub_100008BFC(v135);
          }
          return (uint64_t)v254;
        }
        sub_100008BFC(v135);
      }

      v60 = v121;
    }
    v170 = v60;
    v171 = Logger.logObject.getter(v170);
    v172 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v171, v172))
    {
      v173 = (uint8_t *)swift_slowAlloc(12, -1);
      v174 = (_QWORD *)swift_slowAlloc(32, -1);
      p_isa = v174;
      *(_DWORD *)v173 = 136315138;
      v245 = v173 + 4;
      v175 = -[__objc2_prot_list uniqueIdentifier](v170, "uniqueIdentifier");
      v176 = v234;
      static UUID._unconditionallyBridgeFromObjectiveC(_:)(v175);

      v177 = sub_100008C7C(&qword_1000A7600, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v178 = v243;
      v179 = dispatch thunk of CustomStringConvertible.description.getter(v243, v177);
      v180 = v117;
      v182 = v181;
      (*(void (**)(char *, uint64_t))(v180 + 8))(v176, v178);
      v251 = (char *)sub_100023980(v179, v182, (uint64_t *)&p_isa);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v251, &v252, v245, v173 + 12);

      swift_bridgeObjectRelease(v182);
      _os_log_impl((void *)&_mh_execute_header, v171, v172, "Returning no widgetTileInfo for accessory %s", v173, 0xCu);
      swift_arrayDestroy(v174, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v174, -1, -1);
      swift_slowDealloc(v173, -1, -1);

    }
    else
    {

    }
    return (uint64_t)v254;
  }
  v107 = -[__objc2_prot_list services](v60, "services");
  v108 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v107, v245);

  v109 = v60;
  if ((unint64_t)v108 >> 62)
  {
    if (v108 < 0)
      v183 = v108;
    else
      v183 = v108 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v108);
    v110 = _CocoaArrayWrapper.endIndex.getter(v183);
    if (!v110)
      goto LABEL_93;
  }
  else
  {
    v110 = *(_QWORD *)((v108 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain(v108);
    if (!v110)
      goto LABEL_93;
  }
  if (v110 < 1)
    goto LABEL_114;
  v111 = 0;
  do
  {
    if ((v108 & 0xC000000000000001) != 0)
      v112 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v111, v108);
    else
      v112 = *(id *)(v108 + 8 * v111 + 32);
    v113 = v112;
    ++v111;
    p_isa = v112;
    sub_10000F6E0((id *)&p_isa, (uint64_t)v241, (uint64_t)v242, v109, v28, v38, v106, (uint64_t)&v254);

  }
  while (v110 != v111);
LABEL_93:
  swift_release(v28);
  swift_bridgeObjectRelease_n(v108, 2);
  swift_bridgeObjectRelease(v38);
  v184 = v109;
  v185 = Logger.logObject.getter(v184);
  v186 = static os_log_type_t.default.getter();
  if (!os_log_type_enabled(v185, (os_log_type_t)v186))
  {

LABEL_109:
    swift_beginAccess(&v254, &p_isa, 0, 0);
    return (uint64_t)v254;
  }
  LODWORD(v245) = v186;
  v187 = swift_slowAlloc(22, -1);
  v244 = (os_log_t)swift_slowAlloc(64, -1);
  p_isa = &v244->isa;
  *(_DWORD *)v187 = 136315394;
  swift_beginAccess(&v254, &v251, 0, 0);
  v188 = (uint64_t)v254;
  v189 = v254[2];
  v190 = _swiftEmptyArrayStorage;
  if (!v189)
  {
    v195 = v243;
    v205 = v246;
LABEL_108:
    v206 = Array.description.getter(v190, v195);
    v208 = v207;
    swift_bridgeObjectRelease(v190);
    v250 = (_QWORD *)sub_100023980(v206, v208, (uint64_t *)&p_isa);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v250, &v251, v187 + 4, v187 + 12);
    swift_bridgeObjectRelease(v208);
    *(_WORD *)(v187 + 12) = 2080;
    v209 = -[__objc2_prot_list uniqueIdentifier](v184, "uniqueIdentifier");
    v210 = v234;
    static UUID._unconditionallyBridgeFromObjectiveC(_:)(v209);

    v211 = sub_100008C7C(&qword_1000A7600, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v212 = dispatch thunk of CustomStringConvertible.description.getter(v195, v211);
    v214 = v213;
    (*(void (**)(char *, uint64_t))(v205 + 8))(v210, v195);
    v250 = (_QWORD *)sub_100023980(v212, v214, (uint64_t *)&p_isa);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v250, &v251, v187 + 14, v187 + 22);

    swift_bridgeObjectRelease(v214);
    _os_log_impl((void *)&_mh_execute_header, v185, (os_log_type_t)v245, "Returning widgetTileInfo for services %s of accessory %s", (uint8_t *)v187, 0x16u);
    v215 = v244;
    swift_arrayDestroy(v244, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v215, -1, -1);
    swift_slowDealloc(v187, -1, -1);

    goto LABEL_109;
  }
  v236 = v187;
  v241 = v184;
  v242 = v185;
  v250 = _swiftEmptyArrayStorage;
  swift_bridgeObjectRetain(v254);
  sub_10002D858(0, v189, 0);
  v191 = sub_100013E1C(v188);
  v28 = v192;
  v194 = v193 & 1;
  v195 = v243;
  while ((v191 & 0x8000000000000000) == 0 && v191 < 1 << *(_BYTE *)(v188 + 32))
  {
    if (((*(_QWORD *)(v188 + 56 + (((unint64_t)v191 >> 3) & 0xFFFFFFFFFFFFF8)) >> v191) & 1) == 0)
      goto LABEL_112;
    if (*(_DWORD *)(v188 + 36) != (_DWORD)v28)
      goto LABEL_113;
    v196 = v238;
    sub_100008BB8(*(_QWORD *)(v188 + 48) + *(_QWORD *)(v239 + 72) * v191, v238);
    v197 = v196;
    v198 = v237;
    sub_100008C38(v197, v237);
    (*(void (**)(char *, uint64_t, uint64_t))(v246 + 16))(v240, v198, v195);
    sub_100008BFC(v198);
    v190 = v250;
    if ((swift_isUniquelyReferenced_nonNull_native(v250) & 1) == 0)
    {
      sub_10002D858(0, v190[2] + 1, 1);
      v190 = v250;
    }
    v200 = v190[2];
    v199 = v190[3];
    if (v200 >= v199 >> 1)
    {
      sub_10002D858(v199 > 1, v200 + 1, 1);
      v190 = v250;
    }
    v190[2] = v200 + 1;
    v201 = (unint64_t)v190
         + ((*(unsigned __int8 *)(v246 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v246 + 80))
         + *(_QWORD *)(v246 + 72) * v200;
    v195 = v243;
    (*(void (**)(unint64_t, char *, uint64_t))(v246 + 32))(v201, v240, v243);
    v250 = v190;
    v202 = sub_100013EBC(v191, v28, v194 & 1, v188);
    v191 = v202;
    v28 = v203;
    v194 = v204 & 1;
    if (!--v189)
    {
      sub_100014DB8(v202, v203, v204 & 1);
      swift_bridgeObjectRelease(v188);
      v205 = v246;
      v184 = v241;
      v185 = v242;
      v187 = v236;
      goto LABEL_108;
    }
  }
  __break(1u);
LABEL_112:
  __break(1u);
LABEL_113:
  __break(1u);
LABEL_114:
  __break(1u);
LABEL_115:
  swift_release(v28);
  result = swift_bridgeObjectRelease(v219);
  __break(1u);
  return result;
}

uint64_t sub_10000DD00(uint64_t a1, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  id v23;
  id v24;
  id v25;
  uint64_t v26;
  void (*v27)(char *, id, uint64_t);
  char v28;
  char *v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void (*v34)(uint64_t, uint64_t, uint64_t, uint64_t);
  id v35;
  void *v36;
  id v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unsigned int (*v44)(uint64_t, uint64_t, uint64_t);
  void (*v45)(uint64_t, uint64_t);
  char *v46;
  uint64_t v47;
  char *v48;
  void (*v49)(char *, uint64_t);
  char *v50;
  char *v51;
  uint64_t v52;
  char *v53;
  char *v54;
  char *v55;
  char *v56;
  void (*v57)(char *, uint64_t);
  uint64_t v58;
  id v59;

  v59 = a2;
  v3 = sub_10000527C(&qword_1000A5090);
  __chkstk_darwin(v3);
  v5 = (char *)&v50 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_10000527C(&qword_1000A5060);
  v7 = __chkstk_darwin(v6);
  v9 = (char *)&v50 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __chkstk_darwin(v7);
  v12 = (char *)&v50 - v11;
  __chkstk_darwin(v10);
  v14 = (char *)&v50 - v13;
  v15 = type metadata accessor for UUID(0);
  v58 = *(_QWORD *)(v15 - 8);
  v16 = __chkstk_darwin(v15);
  v18 = (char *)&v50 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  v20 = (char *)&v50 - v19;
  v21 = a1 + *(int *)(type metadata accessor for WidgetTileInfo(0) + 56);
  if (*(_BYTE *)(v21 + 8))
    return static UUID.== infix(_:_:)(a1, v59) & 1;
  v52 = v3;
  v53 = v12;
  v55 = v5;
  v56 = v14;
  v54 = v9;
  v23 = *(id *)v21;
  v24 = objc_msgSend(v23, "uniqueIdentifier");
  static UUID._unconditionallyBridgeFromObjectiveC(_:)(v24);

  v25 = v59;
  LOBYTE(v24) = static UUID.== infix(_:_:)(v59, v20);
  v26 = v58;
  v57 = *(void (**)(char *, uint64_t))(v58 + 8);
  v57(v20, v15);
  v27 = *(void (**)(char *, id, uint64_t))(v26 + 16);
  v27(v18, v25, v15);
  if ((v24 & 1) == 0)
  {
    v29 = v20;
    v30 = v23;
    v31 = (uint64_t)v56;
    v27(v56, v18, v15);
    v32 = v58;
    v33 = 1;
    v34 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v58 + 56);
    v34(v31, 0, 1, v15);
    v59 = v30;
    v35 = objc_msgSend(v30, "accessory");
    v50 = v29;
    v51 = v18;
    if (v35)
    {
      v36 = v35;
      v37 = objc_msgSend(v35, "uniqueIdentifier");

      v38 = (uint64_t)v53;
      static UUID._unconditionallyBridgeFromObjectiveC(_:)(v37);

      v33 = 0;
      v39 = (uint64_t)v54;
      v40 = (uint64_t)v55;
    }
    else
    {
      v39 = (uint64_t)v54;
      v40 = (uint64_t)v55;
      v38 = (uint64_t)v53;
    }
    v41 = v52;
    v34(v38, v33, 1, v15);
    v42 = v40 + *(int *)(v41 + 48);
    sub_100014DE8(v31, v40);
    sub_100014DE8(v38, v42);
    v43 = v31;
    v44 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v32 + 48);
    if (v44(v40, 1, v15) == 1)
    {

      sub_100014EFC(v38, &qword_1000A5060);
      v40 = (uint64_t)v55;
      sub_100014EFC(v43, &qword_1000A5060);
      v57(v51, v15);
      if (v44(v42, 1, v15) == 1)
      {
        sub_100014EFC(v40, &qword_1000A5060);
        goto LABEL_5;
      }
    }
    else
    {
      sub_100014DE8(v40, v39);
      if (v44(v42, 1, v15) != 1)
      {
        v46 = v50;
        (*(void (**)(char *, uint64_t, uint64_t))(v32 + 32))(v50, v42, v15);
        v47 = sub_100008C7C((unint64_t *)&unk_1000A7670, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
        v28 = dispatch thunk of static Equatable.== infix(_:_:)(v39, v46, v15, v47);

        v48 = v46;
        v49 = v57;
        v57(v48, v15);
        sub_100014EFC(v38, &qword_1000A5060);
        sub_100014EFC((uint64_t)v56, &qword_1000A5060);
        v49(v51, v15);
        v49((char *)v39, v15);
        sub_100014EFC(v40, &qword_1000A5060);
        return v28 & 1;
      }

      sub_100014EFC(v38, &qword_1000A5060);
      sub_100014EFC((uint64_t)v56, &qword_1000A5060);
      v45 = (void (*)(uint64_t, uint64_t))v57;
      v57(v51, v15);
      v45(v39, v15);
    }
    sub_100014EFC(v40, &qword_1000A5090);
    v28 = 0;
    return v28 & 1;
  }
  v57(v18, v15);

LABEL_5:
  v28 = 1;
  return v28 & 1;
}

uint64_t sub_10000E1C0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t result;
  int64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t i;
  int64_t v22;
  unint64_t v23;
  int64_t v24;
  int64_t v25;
  uint64_t v26;

  v2 = type metadata accessor for UUID(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = __chkstk_darwin(v2);
  v6 = (char *)&v25 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v8 = (char *)&v25 - v7;
  v9 = sub_10000527C(&qword_1000A5060);
  __chkstk_darwin(v9);
  v11 = (char *)&v25 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = *(_QWORD *)(a1 + 16);
  v13 = sub_100008C7C((unint64_t *)&qword_1000A5020, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
  result = Set.init(minimumCapacity:)(v12, v2, v13);
  v15 = 0;
  v16 = a1 + 64;
  v17 = 1 << *(_BYTE *)(a1 + 32);
  v18 = -1;
  if (v17 < 64)
    v18 = ~(-1 << v17);
  v19 = v18 & *(_QWORD *)(a1 + 64);
  v25 = (unint64_t)(v17 + 63) >> 6;
  v26 = result;
  if (!v19)
    goto LABEL_5;
LABEL_4:
  v20 = __clz(__rbit64(v19));
  v19 &= v19 - 1;
  for (i = v20 | (v15 << 6); ; i = __clz(__rbit64(v23)) + (v15 << 6))
  {
    (*(void (**)(char *, unint64_t, uint64_t))(v3 + 16))(v11, *(_QWORD *)(a1 + 48) + *(_QWORD *)(v3 + 72) * i, v2);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v3 + 56))(v11, 0, 1, v2);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v3 + 48))(v11, 1, v2) == 1)
      goto LABEL_25;
    (*(void (**)(char *, char *, uint64_t))(v3 + 32))(v6, v11, v2);
    sub_100006E58((uint64_t)v8, v6);
    result = (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v8, v2);
    if (v19)
      goto LABEL_4;
LABEL_5:
    v22 = v15 + 1;
    if (__OFADD__(v15, 1))
    {
      __break(1u);
      goto LABEL_27;
    }
    if (v22 >= v25)
      goto LABEL_24;
    v23 = *(_QWORD *)(v16 + 8 * v22);
    ++v15;
    if (!v23)
    {
      v15 = v22 + 1;
      if (v22 + 1 >= v25)
        goto LABEL_24;
      v23 = *(_QWORD *)(v16 + 8 * v15);
      if (!v23)
      {
        v15 = v22 + 2;
        if (v22 + 2 >= v25)
          goto LABEL_24;
        v23 = *(_QWORD *)(v16 + 8 * v15);
        if (!v23)
        {
          v15 = v22 + 3;
          if (v22 + 3 >= v25)
            goto LABEL_24;
          v23 = *(_QWORD *)(v16 + 8 * v15);
          if (!v23)
            break;
        }
      }
    }
LABEL_20:
    v19 = (v23 - 1) & v23;
  }
  v24 = v22 + 4;
  if (v24 >= v25)
  {
LABEL_24:
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v3 + 56))(v11, 1, 1, v2);
LABEL_25:
    swift_release(a1);
    return v26;
  }
  v23 = *(_QWORD *)(v16 + 8 * v24);
  if (v23)
  {
    v15 = v24;
    goto LABEL_20;
  }
  while (1)
  {
    v15 = v24 + 1;
    if (__OFADD__(v24, 1))
      break;
    if (v15 >= v25)
      goto LABEL_24;
    v23 = *(_QWORD *)(v16 + 8 * v15);
    ++v24;
    if (v23)
      goto LABEL_20;
  }
LABEL_27:
  __break(1u);
  return result;
}

uint64_t sub_10000E48C(void *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  id v11;
  _QWORD *v12;
  int64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  void *v18;
  uint64_t v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  id v26;
  void *v27;
  id v28;
  uint64_t v29;
  id v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _BOOL8 v34;
  uint64_t v35;
  uint64_t v36;
  id v37;
  id v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  id v42;
  void *v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  id v47;
  unint64_t v48;
  id v49;
  uint64_t v50;
  uint64_t v51;
  id v52;
  __objc2_prot_list *v53;
  __objc2_prot_list *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v58;
  __objc2_prot_list *v59;
  __objc2_prot_list *v60;
  uint64_t v61;
  BOOL v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  id v68;
  _QWORD *v69;

  v2 = type metadata accessor for UUID(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v65 = (char *)&v65 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_10000527C(&qword_1000A5068);
  v6 = __chkstk_darwin(v5);
  v8 = (char *)&v65 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v10 = (char *)&v65 - v9;
  v11 = objc_msgSend(a1, "serviceGroups");
  v12 = (_QWORD *)sub_100008CBC(0, &qword_1000A5070, HMServiceGroup_ptr);
  v13 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v11, v12);

  v68 = a1;
  v69 = v12;
  v66 = v3;
  v67 = v2;
  if ((unint64_t)v13 >> 62)
  {
LABEL_21:
    if (v13 < 0)
      v36 = v13;
    else
      v36 = v13 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v13);
    v14 = _CocoaArrayWrapper.endIndex.getter(v36);
    if (v14)
      goto LABEL_3;
  }
  else
  {
    v14 = *(_QWORD *)((v13 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain(v13);
    if (v14)
    {
LABEL_3:
      v15 = v13 & 0xC000000000000001;
      v16 = 4;
      do
      {
        if (v15)
          v17 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v16 - 4, v13);
        else
          v17 = *(id *)(v13 + 8 * v16);
        v18 = v17;
        v19 = v16 - 3;
        if (__OFADD__(v16 - 4, 1))
        {
          __break(1u);
          goto LABEL_21;
        }
        v20 = objc_msgSend(v17, "services");
        v21 = sub_100008CBC(0, &qword_1000A5078, HMService_ptr);
        v22 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v20, v21);

        if ((unint64_t)v22 >> 62)
        {
          if (v22 < 0)
            v25 = v22;
          else
            v25 = v22 & 0xFFFFFFFFFFFFFF8;
          swift_bridgeObjectRetain(v22);
          v23 = _CocoaArrayWrapper.endIndex.getter(v25);
          swift_bridgeObjectRelease(v22);
          if (v23)
          {
LABEL_16:
            if ((v22 & 0xC000000000000001) != 0)
            {
              v26 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v22);
            }
            else
            {
              if (!*(_QWORD *)((v22 & 0xFFFFFFFFFFFFF8) + 0x10))
              {
                __break(1u);
                goto LABEL_70;
              }
              v26 = *(id *)(v22 + 32);
            }
            v27 = v26;
            swift_bridgeObjectRelease(v22);
            v28 = objc_msgSend(v18, "uniqueIdentifier");
            v29 = (uint64_t)v65;
            static UUID._unconditionallyBridgeFromObjectiveC(_:)(v28);

            v30 = objc_msgSend(v18, "name");
            v31 = static String._unconditionallyBridgeFromObjectiveC(_:)(v30);
            v33 = v32;

            v34 = 1;
            sub_10000FED0(v27, v29, v31, v33, v18, 1, (uint64_t)v10);

            swift_bridgeObjectRelease(v33);
            (*(void (**)(uint64_t, uint64_t))(v66 + 8))(v29, v67);
            v35 = type metadata accessor for WidgetTileInfo(0);
            (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v35 - 8) + 56))(v10, 0, 1, v35);
            sub_100014EFC((uint64_t)v10, &qword_1000A5068);
            swift_bridgeObjectRelease_n(v13, 2);

            return v34;
          }
        }
        else
        {
          v23 = *(_QWORD *)((v22 & 0xFFFFFFFFFFFFF8) + 0x10);
          if (v23)
            goto LABEL_16;
        }
        swift_bridgeObjectRelease(v22);
        v24 = type metadata accessor for WidgetTileInfo(0);
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 56))(v10, 1, 1, v24);
        sub_100014EFC((uint64_t)v10, &qword_1000A5068);

        ++v16;
      }
      while (v19 != v14);
    }
  }
  swift_bridgeObjectRelease_n(v13, 2);
  v37 = v68;
  v38 = objc_msgSend(v68, "actionSets");
  v39 = sub_100008CBC(0, &qword_1000A5080, HMActionSet_ptr);
  v15 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v38, v39);

  if ((unint64_t)v15 >> 62)
    goto LABEL_58;
  v40 = *(_QWORD *)((v15 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain(v15);
  if (v40)
    goto LABEL_27;
  while (1)
  {
LABEL_34:
    swift_bridgeObjectRelease_n(v15, 2);
    v47 = objc_msgSend(v37, "serviceGroups");
    v48 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v47, v69);

    v69 = sub_10000BD2C(v48);
    swift_bridgeObjectRelease(v48);
    v49 = objc_msgSend(v37, "accessories");
    v50 = sub_100008CBC(0, &qword_1000A5030, HMAccessory_ptr);
    v51 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v49, v50);

    v15 = sub_10000BFA4(v51);
    swift_bridgeObjectRelease(v51);
    v52 = objc_msgSend(v37, "accessories");
    v23 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v52, v50);

    if ((unint64_t)v23 >> 62)
    {
      if (v23 < 0)
        v64 = v23;
      else
        v64 = v23 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v23);
      v19 = _CocoaArrayWrapper.endIndex.getter(v64);
      if (!v19)
        break;
    }
    else
    {
      v19 = *(_QWORD *)((v23 & 0xFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain(v23);
      if (!v19)
        break;
    }
    v13 = v23 & 0xC000000000000001;
    if ((v23 & 0xC000000000000001) != 0)
LABEL_70:
      v53 = (__objc2_prot_list *)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v23);
    else
      v53 = (__objc2_prot_list *)*(id *)(v23 + 32);
    v54 = v53;
    v55 = sub_10000C48C(v53, 0, (uint64_t)v69, v15);
    v56 = *(_QWORD *)(v55 + 16);

    swift_bridgeObjectRelease(v55);
    if (v56)
    {
      v34 = 1;
      goto LABEL_43;
    }
    if (v19 == 1)
      break;
    v58 = 5;
    while (1)
    {
      v59 = v13
          ? (__objc2_prot_list *)specialized _ArrayBuffer._getElementSlowPath(_:)(v58 - 4, v23)
          : (__objc2_prot_list *)*(id *)(v23 + 8 * v58);
      v60 = v59;
      v37 = (id)(v58 - 3);
      if (__OFADD__(v58 - 4, 1))
        break;
      v61 = sub_10000C48C(v59, 0, (uint64_t)v69, v15);
      v8 = *(char **)(v61 + 16);

      swift_bridgeObjectRelease(v61);
      v34 = v8 != 0;
      ++v58;
      if (v8)
        v62 = 1;
      else
        v62 = v37 == (id)v19;
      if (v62)
        goto LABEL_43;
    }
    while (1)
    {
      __break(1u);
LABEL_58:
      v63 = v15 < 0 ? v15 : v15 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v15);
      v40 = _CocoaArrayWrapper.endIndex.getter(v63);
      if (!v40)
        break;
LABEL_27:
      v41 = 4;
      while (1)
      {
        v42 = (v15 & 0xC000000000000001) != 0
            ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v41 - 4, v15)
            : *(id *)(v15 + 8 * v41);
        v43 = v42;
        v44 = v41 - 3;
        if (__OFADD__(v41 - 4, 1))
          break;
        sub_10000B710(v42, (uint64_t)v8);
        v45 = type metadata accessor for WidgetTileInfo(0);
        v46 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v45 - 8) + 48))(v8, 1, v45);
        sub_100014EFC((uint64_t)v8, &qword_1000A5068);

        if (v46 != 1)
        {
          swift_bridgeObjectRelease_n(v15, 2);
          return 1;
        }
        ++v41;
        if (v44 == v40)
          goto LABEL_34;
      }
      __break(1u);
    }
  }
  v34 = 0;
LABEL_43:
  swift_bridgeObjectRelease_n(v23, 2);
  swift_bridgeObjectRelease(v15);
  swift_bridgeObjectRelease(v69);
  return v34;
}

void sub_10000EB78(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  id v21;
  int64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  id v27;
  uint64_t v28;
  void *v29;
  int64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD v33[5];
  void *v34;

  v1 = a1;
  if ((a1 & 0xC000000000000001) != 0)
  {
    if (a1 < 0)
      v2 = a1;
    else
      v2 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v3 = __CocoaSet.makeIterator()(v2);
    v4 = sub_100008CBC(0, &qword_1000A50B0, HMAction_ptr);
    v5 = sub_100014E30(&qword_1000A50B8, &qword_1000A50B0, HMAction_ptr);
    v6 = Set.Iterator.init(_cocoa:)(v33, v3, v4, v5);
    v1 = v33[0];
    v31 = v33[1];
    v7 = v33[2];
    v8 = v33[3];
    v9 = v33[4];
  }
  else
  {
    v10 = -1 << *(_BYTE *)(a1 + 32);
    v31 = a1 + 56;
    v11 = ~v10;
    v12 = -v10;
    if (v12 < 64)
      v13 = ~(-1 << v12);
    else
      v13 = -1;
    v9 = v13 & *(_QWORD *)(a1 + 56);
    v6 = (_QWORD *)swift_bridgeObjectRetain(a1);
    v7 = v11;
    v8 = 0;
  }
  v30 = (unint64_t)(v7 + 64) >> 6;
  while (v1 < 0)
  {
    v18 = __CocoaSet.Iterator.next()(v6);
    if (!v18)
      goto LABEL_43;
    v19 = v18;
    v32 = v18;
    v20 = sub_100008CBC(0, &qword_1000A50B0, HMAction_ptr);
    swift_unknownObjectRetain(v19);
    swift_dynamicCast(&v34, &v32, (char *)&type metadata for Swift.AnyObject + 8, v20, 7);
    v21 = v34;
    swift_unknownObjectRelease(v19);
    v17 = v8;
    v15 = v9;
    if (!v21)
      goto LABEL_43;
LABEL_37:
    v25 = objc_opt_self(HMMediaPlaybackAction);
    v26 = (void *)swift_dynamicCastObjCClass(v21, v25);
    if (v26)
      v27 = v21;
    v28 = objc_opt_self(HMAppleMediaAccessoryPowerAction);
    v29 = (void *)swift_dynamicCastObjCClass(v21, v28);
    if (v29)
    {
      v14 = v21;
      if (v26)
      {

LABEL_43:
        sub_100014DC4(v1);
        return;
      }
LABEL_12:

      goto LABEL_13;
    }
    if (!v26)
      goto LABEL_12;

    v29 = v26;
LABEL_13:

    v8 = v17;
    v9 = v15;
  }
  if (v9)
  {
    v15 = (v9 - 1) & v9;
    v16 = __clz(__rbit64(v9)) | (v8 << 6);
    v17 = v8;
LABEL_36:
    v21 = *(id *)(*(_QWORD *)(v1 + 48) + 8 * v16);
    if (!v21)
      goto LABEL_43;
    goto LABEL_37;
  }
  v22 = v8 + 1;
  if (!__OFADD__(v8, 1))
  {
    if (v22 >= v30)
      goto LABEL_43;
    v23 = *(_QWORD *)(v31 + 8 * v22);
    v17 = v8 + 1;
    if (!v23)
    {
      v17 = v8 + 2;
      if (v8 + 2 >= v30)
        goto LABEL_43;
      v23 = *(_QWORD *)(v31 + 8 * v17);
      if (!v23)
      {
        v17 = v8 + 3;
        if (v8 + 3 >= v30)
          goto LABEL_43;
        v23 = *(_QWORD *)(v31 + 8 * v17);
        if (!v23)
        {
          v17 = v8 + 4;
          if (v8 + 4 >= v30)
            goto LABEL_43;
          v23 = *(_QWORD *)(v31 + 8 * v17);
          if (!v23)
          {
            v17 = v8 + 5;
            if (v8 + 5 >= v30)
              goto LABEL_43;
            v23 = *(_QWORD *)(v31 + 8 * v17);
            if (!v23)
            {
              v24 = v8 + 6;
              while (v30 != v24)
              {
                v23 = *(_QWORD *)(v31 + 8 * v24++);
                if (v23)
                {
                  v17 = v24 - 1;
                  goto LABEL_35;
                }
              }
              goto LABEL_43;
            }
          }
        }
      }
    }
LABEL_35:
    v15 = (v23 - 1) & v23;
    v16 = __clz(__rbit64(v23)) + (v17 << 6);
    goto LABEL_36;
  }
  __break(1u);
}

uint64_t sub_10000EEC8@<X0>(id *a1@<X0>, char **a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t result;
  uint64_t v21;
  char *v22;
  id v23;
  void *v24;
  id v25;
  char *v26;
  void (*v27)(char *, char *, uint64_t);
  char *v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  char **v32;
  uint64_t v33;
  char *v34;
  unint64_t v35;
  uint64_t v36;
  char *v37;
  char *v38;

  v3 = v2;
  v32 = a2;
  v5 = sub_10000527C(&qword_1000A5060);
  __chkstk_darwin(v5);
  v7 = (char *)&v32 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for UUID(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = __chkstk_darwin(v8);
  v12 = (char *)&v32 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __chkstk_darwin(v10);
  v38 = (char *)&v32 - v14;
  __chkstk_darwin(v13);
  v34 = (char *)&v32 - v15;
  v16 = objc_msgSend(*a1, "services");
  v17 = sub_100008CBC(0, &qword_1000A5078, HMService_ptr);
  v18 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v16, v17);

  if (!((unint64_t)v18 >> 62))
  {
    v19 = *(_QWORD *)((v18 & 0xFFFFFFFFFFFFF8) + 0x10);
    result = swift_bridgeObjectRetain(v18);
    v33 = v3;
    if (v19)
      goto LABEL_3;
LABEL_20:
    v22 = (char *)_swiftEmptyArrayStorage;
LABEL_21:
    result = swift_bridgeObjectRelease_n(v18, 2);
    *v32 = v22;
    return result;
  }
  if (v18 < 0)
    v31 = v18;
  else
    v31 = v18 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v18);
  result = _CocoaArrayWrapper.endIndex.getter(v31);
  v19 = result;
  v33 = v3;
  if (!result)
    goto LABEL_20;
LABEL_3:
  if (v19 >= 1)
  {
    v21 = 0;
    v35 = v18 & 0xC000000000000001;
    v22 = (char *)_swiftEmptyArrayStorage;
    v36 = v18;
    v37 = v12;
    do
    {
      if (v35)
        v23 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v21, v18);
      else
        v23 = *(id *)(v18 + 8 * v21 + 32);
      v24 = v23;
      v25 = objc_msgSend(v23, "uniqueIdentifier", v32);
      v26 = v38;
      static UUID._unconditionallyBridgeFromObjectiveC(_:)(v25);

      v27 = *(void (**)(char *, char *, uint64_t))(v9 + 32);
      v27(v7, v26, v8);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v9 + 56))(v7, 0, 1, v8);

      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1)
      {
        sub_100014EFC((uint64_t)v7, &qword_1000A5060);
      }
      else
      {
        v28 = v34;
        v27(v34, v7, v8);
        v27(v37, v28, v8);
        if ((swift_isUniquelyReferenced_nonNull_native(v22) & 1) == 0)
          v22 = (char *)sub_10005AA24(0, *((_QWORD *)v22 + 2) + 1, 1, (unint64_t)v22);
        v30 = *((_QWORD *)v22 + 2);
        v29 = *((_QWORD *)v22 + 3);
        if (v30 >= v29 >> 1)
          v22 = (char *)sub_10005AA24(v29 > 1, v30 + 1, 1, (unint64_t)v22);
        *((_QWORD *)v22 + 2) = v30 + 1;
        v27(&v22[((*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80))+ *(_QWORD *)(v9 + 72) * v30], v37, v8);
      }
      ++v21;
      v18 = v36;
    }
    while (v19 != v21);
    goto LABEL_21;
  }
  __break(1u);
  return result;
}

id sub_10000F208@<X0>(id *a1@<X0>, char **a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  id result;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  id v23;
  void *v24;
  id v25;
  char *v26;
  void (*v27)(char *, char *, uint64_t);
  char *v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char **v33;
  char *v34;
  unint64_t v35;
  uint64_t v36;
  char *v37;
  char *v38;

  v3 = v2;
  v33 = a2;
  v5 = sub_10000527C(&qword_1000A5060);
  __chkstk_darwin(v5);
  v7 = (char *)&v32 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for UUID(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = __chkstk_darwin(v8);
  v12 = (char *)&v32 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __chkstk_darwin(v10);
  v38 = (char *)&v32 - v14;
  __chkstk_darwin(v13);
  v34 = (char *)&v32 - v15;
  result = objc_msgSend(*a1, "linkedServices");
  if (!result)
  {
    v22 = (char *)_swiftEmptyArrayStorage;
LABEL_24:
    *v33 = v22;
    return result;
  }
  v17 = result;
  v18 = sub_100008CBC(0, &qword_1000A5078, HMService_ptr);
  v19 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v17, v18);

  if (!((unint64_t)v19 >> 62))
  {
    v20 = *(_QWORD *)((v19 & 0xFFFFFFFFFFFFF8) + 0x10);
    result = (id)swift_bridgeObjectRetain(v19);
    v32 = v3;
    if (v20)
      goto LABEL_4;
LABEL_22:
    v22 = (char *)_swiftEmptyArrayStorage;
LABEL_23:
    result = (id)swift_bridgeObjectRelease_n(v19, 2);
    goto LABEL_24;
  }
  if (v19 < 0)
    v31 = v19;
  else
    v31 = v19 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v19);
  result = (id)_CocoaArrayWrapper.endIndex.getter(v31);
  v20 = (uint64_t)result;
  v32 = v3;
  if (!result)
    goto LABEL_22;
LABEL_4:
  if (v20 >= 1)
  {
    v21 = 0;
    v35 = v19 & 0xC000000000000001;
    v22 = (char *)_swiftEmptyArrayStorage;
    v36 = v19;
    v37 = v12;
    do
    {
      if (v35)
        v23 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v21, v19);
      else
        v23 = *(id *)(v19 + 8 * v21 + 32);
      v24 = v23;
      v25 = objc_msgSend(v23, "uniqueIdentifier", v32);
      v26 = v38;
      static UUID._unconditionallyBridgeFromObjectiveC(_:)(v25);

      v27 = *(void (**)(char *, char *, uint64_t))(v9 + 32);
      v27(v7, v26, v8);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v9 + 56))(v7, 0, 1, v8);

      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1)
      {
        sub_100014EFC((uint64_t)v7, &qword_1000A5060);
      }
      else
      {
        v28 = v34;
        v27(v34, v7, v8);
        v27(v37, v28, v8);
        if ((swift_isUniquelyReferenced_nonNull_native(v22) & 1) == 0)
          v22 = (char *)sub_10005AA24(0, *((_QWORD *)v22 + 2) + 1, 1, (unint64_t)v22);
        v30 = *((_QWORD *)v22 + 2);
        v29 = *((_QWORD *)v22 + 3);
        if (v30 >= v29 >> 1)
          v22 = (char *)sub_10005AA24(v29 > 1, v30 + 1, 1, (unint64_t)v22);
        *((_QWORD *)v22 + 2) = v30 + 1;
        v27(&v22[((*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80))+ *(_QWORD *)(v9 + 72) * v30], v37, v8);
      }
      ++v21;
      v19 = v36;
    }
    while (v20 != v21);
    goto LABEL_23;
  }
  __break(1u);
  return result;
}

uint64_t sub_10000F560@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  id v8;
  void *v9;
  id v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;

  v4 = type metadata accessor for UUID(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v18 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = objc_msgSend(a1, "hf_primaryService");
  if (v8)
  {
    v9 = v8;
    v10 = objc_msgSend(a1, "uniqueIdentifier");
    static UUID._unconditionallyBridgeFromObjectiveC(_:)(v10);

    v11 = objc_msgSend(a1, "name");
    v12 = static String._unconditionallyBridgeFromObjectiveC(_:)(v11);
    v14 = v13;

    sub_10000FED0(v9, (uint64_t)v7, v12, v14, 0, 255, a2);
    swift_bridgeObjectRelease(v14);
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    v15 = type metadata accessor for WidgetTileInfo(0);
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 56))(a2, 0, 1, v15);
  }
  else
  {
    v17 = type metadata accessor for WidgetTileInfo(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 56))(a2, 1, 1, v17);
  }
}

void sub_10000F6E0(id *a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  id v34;
  id v35;
  id v36;
  void (*v37)(uint64_t, uint64_t);
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char v42;
  void (*v43)(char *, uint64_t);
  uint64_t v44;
  __objc2_prot_list *v45;
  id v46;
  uint64_t v47;
  uint64_t v48;
  void (*v49)(uint64_t, uint64_t);
  uint64_t v50;
  uint64_t v51;
  char v52;
  char *v53;
  char *v54;
  uint64_t v55;
  void (*v56)(uint64_t, uint64_t);
  uint64_t v57;
  char v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  id v62;
  void *v63;
  int v64;
  int v65;
  BOOL v66;
  uint64_t v67;
  __objc2_prot_list *v68;
  id v69;
  uint64_t v70;
  uint64_t v71;
  id v72;
  id v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  id v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  char *v88;
  char *v89;
  id v90;
  _BOOL4 v91;
  uint64_t v92;
  uint64_t v93;
  void (*v94)(char *, _QWORD, uint64_t);
  char *v95;
  uint64_t v96;
  void (*v97)(uint64_t, uint64_t);
  id v98;
  char *v99;
  char *v100;
  char v101[16];
  char *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  id v107;

  v87 = a8;
  v93 = a7;
  v83 = a6;
  v92 = a5;
  v90 = a4;
  v95 = (char *)a3;
  v98 = (id)a2;
  v9 = type metadata accessor for WidgetTileInfo(0);
  v10 = __chkstk_darwin(v9);
  v86 = (uint64_t)&v83 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __chkstk_darwin(v10);
  v85 = (uint64_t)&v83 - v13;
  __chkstk_darwin(v12);
  v84 = (uint64_t)&v83 - v14;
  v15 = type metadata accessor for ServiceKind(0);
  v16 = *(_QWORD *)(v15 - 8);
  v17 = __chkstk_darwin(v15);
  v89 = (char *)&v83 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = __chkstk_darwin(v17);
  v88 = (char *)&v83 - v20;
  v21 = __chkstk_darwin(v19);
  v100 = (char *)&v83 - v22;
  v23 = __chkstk_darwin(v21);
  v99 = (char *)&v83 - v24;
  v25 = __chkstk_darwin(v23);
  v27 = (char *)&v83 - v26;
  __chkstk_darwin(v25);
  v29 = (char *)&v83 - v28;
  v30 = type metadata accessor for UUID(0);
  v31 = *(_QWORD *)(v30 - 8);
  __chkstk_darwin(v30);
  v33 = (char *)&v83 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  v34 = *a1;
  v35 = objc_msgSend(*a1, "uniqueIdentifier");
  static UUID._unconditionallyBridgeFromObjectiveC(_:)(v35);

  v102 = v33;
  v36 = v107;
  v91 = sub_10002BC68((uint64_t (*)(char *))sub_100014E70, (_BOOL8)v101, (uint64_t)v98);
  v37 = *(void (**)(uint64_t, uint64_t))(v31 + 8);
  v96 = v30;
  v97 = v37;
  v98 = v36;
  v38 = ((uint64_t (*)(char *, uint64_t))v37)(v33, v30);
  v107 = v34;
  HMService.serviceKind.getter(v38);
  v94 = *(void (**)(char *, _QWORD, uint64_t))(v16 + 104);
  v94(v27, enum case for ServiceKind.valve(_:), v15);
  v39 = sub_100008C7C((unint64_t *)&qword_1000A50A8, (uint64_t (*)(uint64_t))&type metadata accessor for ServiceKind, (uint64_t)&protocol conformance descriptor for ServiceKind);
  dispatch thunk of RawRepresentable.rawValue.getter(&v105, v15, v39);
  dispatch thunk of RawRepresentable.rawValue.getter(&v103, v15, v39);
  v40 = v106;
  v41 = v104;
  if (v105 == v103 && v106 == v104)
  {
    v42 = 1;
    v41 = v106;
  }
  else
  {
    v42 = _stringCompareWithSmolCheck(_:_:expecting:)(v105, v106, v103, v104, 0);
  }
  swift_bridgeObjectRelease(v40);
  swift_bridgeObjectRelease(v41);
  v43 = *(void (**)(char *, uint64_t))(v16 + 8);
  v43(v27, v15);
  v44 = ((uint64_t (*)(char *, uint64_t))v43)(v29, v15);
  if ((v42 & 1) != 0)
  {
    v45 = &HomeManagerActor;
    v46 = objc_msgSend(v90, "uniqueIdentifier");
    static UUID._unconditionallyBridgeFromObjectiveC(_:)(v46);

    __chkstk_darwin(v47);
    *(&v83 - 2) = (uint64_t)v33;
    v48 = (uint64_t)v98;
    LODWORD(v90) = sub_10002BC68((uint64_t (*)(char *))sub_100014E70, (_BOOL8)(&v83 - 4), (uint64_t)v95);
    v98 = (id)v48;
    v49 = v97;
    v44 = ((uint64_t (*)(char *, uint64_t))v97)(v33, v96);
  }
  else
  {
    LODWORD(v90) = 0;
    v49 = v97;
    v45 = &HomeManagerActor;
  }
  HMService.serviceKind.getter(v44);
  v94(v100, enum case for ServiceKind.lockMechanism(_:), v15);
  dispatch thunk of RawRepresentable.rawValue.getter(&v105, v15, v39);
  dispatch thunk of RawRepresentable.rawValue.getter(&v103, v15, v39);
  v50 = v106;
  v51 = v104;
  v95 = v33;
  if (v105 == v103 && v106 == v104)
  {
    swift_bridgeObjectRelease_n(v106, 2);
    v52 = 1;
    v54 = v99;
    v53 = v100;
    v55 = v96;
    v56 = v49;
    v57 = v93;
  }
  else
  {
    v58 = _stringCompareWithSmolCheck(_:_:expecting:)(v105, v106, v103, v104, 0);
    swift_bridgeObjectRelease(v50);
    swift_bridgeObjectRelease(v51);
    v43(v100, v15);
    v59 = ((uint64_t (*)(char *, uint64_t))v43)(v99, v15);
    if ((v58 & 1) != 0)
    {
      v52 = 1;
      v55 = v96;
      v45 = &HomeManagerActor;
      v56 = v49;
      v57 = v93;
      goto LABEL_19;
    }
    HMService.serviceKind.getter(v59);
    v94(v89, enum case for ServiceKind.lockManagement(_:), v15);
    dispatch thunk of RawRepresentable.rawValue.getter(&v105, v15, v39);
    dispatch thunk of RawRepresentable.rawValue.getter(&v103, v15, v39);
    v60 = v106;
    v61 = v104;
    v56 = v49;
    if (v105 == v103 && v106 == v104)
    {
      v52 = 1;
      v61 = v106;
    }
    else
    {
      v52 = _stringCompareWithSmolCheck(_:_:expecting:)(v105, v106, v103, v104, 0);
    }
    v57 = v93;
    swift_bridgeObjectRelease(v60);
    swift_bridgeObjectRelease(v61);
    v55 = v96;
    v45 = &HomeManagerActor;
    v54 = v88;
    v53 = v89;
  }
  v43(v53, v15);
  v43(v54, v15);
LABEL_19:
  v62 = v107;
  v63 = v98;
  sub_1000146B0(v92, v62);
  v65 = v64;

  if ((v52 & 1) != 0)
  {
    v66 = 0;
    if (v57)
      goto LABEL_21;
  }
  else
  {
    v80 = objc_msgSend(v62, (SEL)v45[338].count);
    v81 = (uint64_t)v95;
    static UUID._unconditionallyBridgeFromObjectiveC(_:)(v80);

    __chkstk_darwin(v82);
    *(&v83 - 2) = v81;
    v66 = sub_10002BC68((uint64_t (*)(char *))sub_100014E70, (_BOOL8)(&v83 - 4), v83);
    v56(v81, v55);
    if (v57)
    {
LABEL_21:
      swift_bridgeObjectRetain(v57);
      LODWORD(v100) = v65;
      v67 = v55;
      v68 = &HomeManagerActor;
      v69 = objc_msgSend(v62, "uniqueIdentifier");
      v70 = (uint64_t)v95;
      static UUID._unconditionallyBridgeFromObjectiveC(_:)(v69);

      __chkstk_darwin(v71);
      *(&v83 - 2) = v70;
      LODWORD(v69) = sub_10002BC68((uint64_t (*)(char *))sub_100014E70, (_BOOL8)(&v83 - 4), v57);
      v107 = v63;
      v56 = v97;
      v97(v70, v67);
      swift_bridgeObjectRelease(v57);
      if ((v66 || (v69 & v100 & 1) == 0) | (v91 | v90) & 1)
        return;
      goto LABEL_22;
    }
  }
  v107 = v63;
  v67 = v55;
  v68 = &HomeManagerActor;
  v70 = (uint64_t)v95;
  if ((v66 || (v65 & 1) == 0) | (v91 | v90) & 1)
    return;
LABEL_22:
  v72 = objc_msgSend(v62, (SEL)v68[338].count, v83);
  static UUID._unconditionallyBridgeFromObjectiveC(_:)(v72);

  v73 = objc_msgSend(v62, "name");
  v74 = static String._unconditionallyBridgeFromObjectiveC(_:)(v73);
  v76 = v75;

  v77 = v85;
  sub_10000FED0(v62, v70, v74, v76, 0, 255, v85);
  swift_bridgeObjectRelease(v76);
  v56(v70, v67);
  v78 = v84;
  sub_100008C38(v77, v84);
  v79 = v86;
  sub_100008BB8(v78, v86);
  sub_100006974(v77, v79);
  sub_100008BFC(v77);
  sub_100008BFC(v78);
}

uint64_t sub_10000FED0@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void *a5@<X4>, int a6@<W5>, uint64_t a7@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  void *v42;
  id v43;
  void *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  void *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  unint64_t v69;
  void (*v70)(char *, uint64_t);
  unint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  void (*v77)(char *, uint64_t);
  char v78;
  uint64_t v79;
  uint64_t v80;
  void (*v81)(uint64_t, uint64_t);
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  void (*v86)(uint64_t, uint64_t, uint64_t);
  id v87;
  void *v88;
  uint64_t v89;
  unint64_t v90;
  unint64_t v91;
  id v92;
  char *v93;
  uint64_t v94;
  uint64_t v95;
  char *v96;
  id v97;
  void *v98;
  uint64_t v99;
  id v100;
  id v101;
  void *v102;
  uint64_t v103;
  uint64_t v104;
  void (*v105)(uint64_t, uint64_t, uint64_t);
  id v106;
  void *v107;
  char v108;
  char v109;
  void *v110;
  uint64_t v111;
  char v112;
  id v113;
  unint64_t v114;
  uint64_t v115;
  uint64_t v116;
  void (*v117)(char *, uint64_t);
  uint64_t v119;
  char *v120;
  char *v121;
  int v122;
  char *v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  void *v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  char *v131;
  char *v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  unint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  char *v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;

  v122 = a6;
  v127 = a5;
  v133 = a2;
  v124 = a7;
  v10 = sub_10000527C(&qword_1000A5060);
  __chkstk_darwin(v10);
  v121 = (char *)&v119 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v139 = type metadata accessor for UUID(0);
  v128 = *(_QWORD *)(v139 - 8);
  v12 = __chkstk_darwin(v139);
  v123 = (char *)&v119 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __chkstk_darwin(v12);
  v120 = (char *)&v119 - v15;
  v16 = __chkstk_darwin(v14);
  v137 = (uint64_t)&v119 - v17;
  __chkstk_darwin(v16);
  v136 = (uint64_t)&v119 - v18;
  v19 = type metadata accessor for StaticRenderingMode(0);
  v140 = *(_QWORD *)(v19 - 8);
  v141 = v19;
  v20 = __chkstk_darwin(v19);
  v135 = (uint64_t)&v119 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = __chkstk_darwin(v20);
  v134 = (uint64_t)&v119 - v23;
  v24 = __chkstk_darwin(v22);
  v131 = (char *)&v119 - v25;
  __chkstk_darwin(v24);
  v143 = (char *)&v119 - v26;
  v27 = sub_10000527C(&qword_1000A50C0);
  v28 = __chkstk_darwin(v27);
  v30 = (char *)&v119 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v28);
  v32 = (char *)&v119 - v31;
  v33 = sub_10000527C(&qword_1000A50C8);
  __chkstk_darwin(v33);
  v35 = (char *)&v119 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  v36 = type metadata accessor for ServiceKind(0);
  v37 = *(_QWORD *)(v36 - 8);
  v38 = __chkstk_darwin(v36);
  v132 = (char *)&v119 - ((v39 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v38);
  v41 = (char *)&v119 - v40;
  v42 = a1;
  v43 = objc_msgSend(a1, "associatedServiceType");
  v142 = v36;
  v126 = a4;
  v125 = a3;
  if (v43)
  {
    v44 = v43;
    v45 = static String._unconditionallyBridgeFromObjectiveC(_:)(v43);
    v47 = v46;

    String.serviceKind.getter(v45, v47);
    swift_bridgeObjectRelease(v47);
    v48 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v37 + 48))(v35, 1, v36);
    if ((_DWORD)v48 != 1)
    {
      v49 = v36;
      v50 = v41;
      v51 = (*(uint64_t (**)(char *, char *, uint64_t))(v37 + 32))(v41, v35, v49);
      v52 = (uint64_t)v131;
      v53 = v42;
      goto LABEL_6;
    }
  }
  else
  {
    v48 = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v37 + 56))(v35, 1, 1, v36);
  }
  v50 = v41;
  v53 = v42;
  HMService.serviceKind.getter(v48);
  v51 = sub_100014EFC((uint64_t)v35, &qword_1000A50C8);
  v52 = (uint64_t)v131;
LABEL_6:
  v54 = v139;
  v55 = HMService.customIconSFSymbol.getter(v51);
  if (v56)
  {
    IconSymbol.init(rawValue:)(v55);
    v57 = type metadata accessor for IconSymbol(0);
    v58 = *(_QWORD *)(v57 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v58 + 48))(v32, 1, v57) != 1)
    {
      v130 = IconSymbol.offStateSymbolName.getter();
      v138 = v59;
      v60 = (*(uint64_t (**)(char *, uint64_t))(v58 + 8))(v32, v57);
      goto LABEL_11;
    }
  }
  else
  {
    v61 = type metadata accessor for IconSymbol(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v61 - 8) + 56))(v32, 1, 1, v61);
  }
  v62 = sub_100014EFC((uint64_t)v32, &qword_1000A50C0);
  v60 = ServiceKind.iconSymbolDeactivated.getter(v62);
  v130 = v60;
  v138 = v63;
LABEL_11:
  v64 = HMService.customIconSFSymbol.getter(v60);
  if (v65)
  {
    IconSymbol.init(rawValue:)(v64);
    v66 = type metadata accessor for IconSymbol(0);
    v67 = *(_QWORD *)(v66 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v67 + 48))(v30, 1, v66) != 1)
    {
      v129 = IconSymbol.onStateSymbolName.getter();
      v70 = *(void (**)(char *, uint64_t))(v67 + 8);
      v69 = v71;
      v70(v30, v66);
      goto LABEL_16;
    }
    v64 = sub_100014EFC((uint64_t)v30, &qword_1000A50C0);
  }
  v129 = ServiceKind.iconSymbolActivated.getter(v64);
  v69 = v68;
LABEL_16:
  sub_1000108D4((void (*)(void))&IconSymbol.offStateSymbolRenderingMode.getter, (uint64_t (*)(uint64_t))&ServiceKind.iconSymbolDeactivatedRenderingMode.getter, (uint64_t)v143);
  v72 = sub_1000108D4((void (*)(void))&IconSymbol.onStateSymbolRenderingMode.getter, (uint64_t (*)(uint64_t))&ServiceKind.iconSymbolActivatedRenderingMode.getter, v52);
  v139 = ServiceKind.foregroundColor.getter(v72);
  v73 = v142;
  (*(void (**)(char *, _QWORD, uint64_t))(v37 + 104))(v132, enum case for ServiceKind.television(_:), v142);
  v74 = sub_100008C7C((unint64_t *)&qword_1000A50A8, (uint64_t (*)(uint64_t))&type metadata accessor for ServiceKind, (uint64_t)&protocol conformance descriptor for ServiceKind);
  dispatch thunk of RawRepresentable.rawValue.getter(&v146, v73, v74);
  dispatch thunk of RawRepresentable.rawValue.getter(&v144, v73, v74);
  v75 = v147;
  v76 = v145;
  if (v146 == v144 && v147 == v145)
  {
    swift_bridgeObjectRelease_n(v147, 2);
    v77 = *(void (**)(char *, uint64_t))(v37 + 8);
    v77(v132, v142);
LABEL_20:
    v132 = (char *)v77;
    swift_bridgeObjectRelease(v138);
    swift_bridgeObjectRelease(v69);
    v80 = v140;
    v79 = v141;
    v81 = *(void (**)(uint64_t, uint64_t))(v140 + 8);
    v81(v52, v141);
    v82 = (uint64_t)v143;
    v81((uint64_t)v143, v79);
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v80 + 104))(v82, enum case for StaticRenderingMode.hierarchical(_:), v79);
    v83 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v80 + 16))(v52, v82, v79);
    v84 = static Color.teal.getter(v83);
    swift_release(v139);
    v69 = 0xE200000000000000;
    v129 = 30324;
    v130 = 30324;
    v138 = 0xE200000000000000;
    v139 = v84;
    v85 = v128;
    goto LABEL_22;
  }
  v78 = _stringCompareWithSmolCheck(_:_:expecting:)(v146, v147, v144, v145, 0);
  swift_bridgeObjectRelease(v75);
  swift_bridgeObjectRelease(v76);
  v77 = *(void (**)(char *, uint64_t))(v37 + 8);
  v77(v132, v142);
  if ((v78 & 1) != 0)
    goto LABEL_20;
  v132 = (char *)v77;
  v85 = v128;
LABEL_22:
  v86 = *(void (**)(uint64_t, uint64_t, uint64_t))(v85 + 16);
  v86(v136, v133, v54);
  v87 = objc_msgSend(v53, "accessory");
  if (v87)
  {
    v88 = v87;
    v89 = v52;
    v90 = v69;
    v91 = v138;
    v92 = objc_msgSend(v87, "uniqueIdentifier");

    v93 = v120;
    static UUID._unconditionallyBridgeFromObjectiveC(_:)(v92);

    v85 = v128;
    v94 = (uint64_t)v121;
    (*(void (**)(char *, char *, uint64_t))(v128 + 32))(v121, v93, v54);
    v95 = 0;
  }
  else
  {
    v89 = v52;
    v90 = v69;
    v91 = v138;
    v95 = 1;
    v94 = (uint64_t)v121;
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v85 + 56))(v94, v95, 1, v54);
  v96 = v123;
  v86((uint64_t)v123, v133, v54);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v85 + 48))(v94, 1, v54) == 1)
  {
    (*(void (**)(uint64_t, char *, uint64_t))(v85 + 32))(v137, v96, v54);
    sub_100014EFC(v94, &qword_1000A5060);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v85 + 8))(v96, v54);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v85 + 32))(v137, v94, v54);
  }
  v97 = objc_msgSend(v53, "accessory");
  v98 = v97;
  v99 = v91;
  if (v97)
  {
    v100 = objc_msgSend(v97, "room");

    if (v100)
    {
      v101 = objc_msgSend(v100, "name");

      v100 = (id)static String._unconditionallyBridgeFromObjectiveC(_:)(v101);
      v98 = v102;

    }
    else
    {
      v98 = 0;
    }
  }
  else
  {
    v100 = 0;
  }
  v103 = v90;
  v104 = v141;
  v105 = *(void (**)(uint64_t, uint64_t, uint64_t))(v140 + 16);
  v105(v134, (uint64_t)v143, v141);
  v105(v135, v89, v104);
  v106 = objc_msgSend(v53, "accessory");
  if (v106)
  {
    v107 = v106;
    v108 = objc_msgSend(v106, "isReachable");

  }
  else
  {
    v108 = 0;
  }
  v109 = v122;
  v110 = v127;
  v111 = (uint64_t)v127;
  v112 = v122;
  if ((_BYTE)v122 == 0xFF)
  {
    v113 = v53;
    v110 = v127;
    v112 = 0;
    v111 = (uint64_t)v53;
  }
  sub_100014F38(v110, v109);
  v114 = sub_10002F268((uint64_t)_swiftEmptyArrayStorage);
  v115 = v126;
  swift_bridgeObjectRetain(v126);
  sub_100016388(v136, v137, v125, v115, (uint64_t)v100, (uint64_t)v98, v130, v99, v124, v129, v103, v134, v135, v139, v108, v111, v112, v114, 0,
    2,
    0,
    1,
    0,
    0,
    2);
  v116 = v141;
  v117 = *(void (**)(char *, uint64_t))(v140 + 8);
  v117(v131, v141);
  v117(v143, v116);
  return ((uint64_t (*)(char *, uint64_t))v132)(v50, v142);
}

uint64_t sub_1000108D4@<X0>(void (*a1)(void)@<X2>, uint64_t (*a2)(uint64_t)@<X3>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t (*v16)(uint64_t);
  void (*v17)(void);
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;

  v6 = sub_10000527C(&qword_1000A50C0);
  __chkstk_darwin(v6);
  v8 = (char *)&v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for StaticRenderingMode(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = __chkstk_darwin(v9);
  v13 = (char *)&v21 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = HMService.customIconSFSymbol.getter(v11);
  if (!v15)
    return a2(v14);
  v16 = a2;
  v17 = a1;
  IconSymbol.init(rawValue:)(v14);
  v18 = type metadata accessor for IconSymbol(0);
  v19 = *(_QWORD *)(v18 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v19 + 48))(v8, 1, v18) == 1)
  {
    v14 = sub_100014EFC((uint64_t)v8, &qword_1000A50C0);
    a2 = v16;
    return a2(v14);
  }
  v17();
  (*(void (**)(char *, uint64_t))(v19 + 8))(v8, v18);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v10 + 32))(a3, v13, v9);
}

void *sub_100010A2C()
{
  return sub_100010E04((uint64_t (*)(_QWORD))&type metadata accessor for CharacteristicKind, &qword_1000A5018);
}

void *sub_100010A40()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *result;
  uint64_t v10;
  unint64_t v11;
  int64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  unint64_t v22;
  int64_t v23;
  uint64_t v24;

  v1 = v0;
  v2 = type metadata accessor for WidgetTileInfo(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v24 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000527C(&qword_1000A4FF8);
  v6 = *v0;
  v7 = static _SetStorage.copy(original:)(*v0);
  v8 = v7;
  if (!*(_QWORD *)(v6 + 16))
  {
LABEL_28:
    result = (void *)swift_release(v6);
    *v1 = v8;
    return result;
  }
  result = (void *)(v7 + 56);
  v10 = v6 + 56;
  v11 = (unint64_t)((1 << *(_BYTE *)(v8 + 32)) + 63) >> 6;
  if (v8 != v6 || (unint64_t)result >= v6 + 56 + 8 * v11)
    result = memmove(result, (const void *)(v6 + 56), 8 * v11);
  v13 = 0;
  *(_QWORD *)(v8 + 16) = *(_QWORD *)(v6 + 16);
  v14 = 1 << *(_BYTE *)(v6 + 32);
  v15 = -1;
  if (v14 < 64)
    v15 = ~(-1 << v14);
  v16 = v15 & *(_QWORD *)(v6 + 56);
  v17 = (unint64_t)(v14 + 63) >> 6;
  while (1)
  {
    if (v16)
    {
      v18 = __clz(__rbit64(v16));
      v16 &= v16 - 1;
      v19 = v18 | (v13 << 6);
      goto LABEL_12;
    }
    v21 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v21 >= v17)
      goto LABEL_28;
    v22 = *(_QWORD *)(v10 + 8 * v21);
    ++v13;
    if (!v22)
    {
      v13 = v21 + 1;
      if (v21 + 1 >= v17)
        goto LABEL_28;
      v22 = *(_QWORD *)(v10 + 8 * v13);
      if (!v22)
      {
        v13 = v21 + 2;
        if (v21 + 2 >= v17)
          goto LABEL_28;
        v22 = *(_QWORD *)(v10 + 8 * v13);
        if (!v22)
          break;
      }
    }
LABEL_27:
    v16 = (v22 - 1) & v22;
    v19 = __clz(__rbit64(v22)) + (v13 << 6);
LABEL_12:
    v20 = *(_QWORD *)(v3 + 72) * v19;
    sub_100008BB8(*(_QWORD *)(v6 + 48) + v20, (uint64_t)v5);
    result = (void *)sub_100008C38((uint64_t)v5, *(_QWORD *)(v8 + 48) + v20);
  }
  v23 = v21 + 3;
  if (v23 >= v17)
    goto LABEL_28;
  v22 = *(_QWORD *)(v10 + 8 * v23);
  if (v22)
  {
    v13 = v23;
    goto LABEL_27;
  }
  while (1)
  {
    v13 = v23 + 1;
    if (__OFADD__(v23, 1))
      break;
    if (v13 >= v17)
      goto LABEL_28;
    v22 = *(_QWORD *)(v10 + 8 * v13);
    ++v23;
    if (v22)
      goto LABEL_27;
  }
LABEL_30:
  __break(1u);
  return result;
}

id sub_100010C38()
{
  return sub_100010C50(&qword_1000A5038);
}

id sub_100010C44()
{
  return sub_100010C50(&qword_1000A5048);
}

id sub_100010C50(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  id result;
  uint64_t v7;
  unint64_t v8;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  void *v18;
  int64_t v19;
  unint64_t v20;
  int64_t v21;

  v2 = v1;
  sub_10000527C(a1);
  v3 = *v1;
  v4 = static _SetStorage.copy(original:)(*v1);
  v5 = v4;
  if (!*(_QWORD *)(v3 + 16))
  {
LABEL_28:
    result = (id)swift_release(v3);
    *v2 = v5;
    return result;
  }
  result = (id)(v4 + 56);
  v7 = v3 + 56;
  v8 = (unint64_t)((1 << *(_BYTE *)(v5 + 32)) + 63) >> 6;
  if (v5 != v3 || (unint64_t)result >= v3 + 56 + 8 * v8)
    result = memmove(result, (const void *)(v3 + 56), 8 * v8);
  v10 = 0;
  *(_QWORD *)(v5 + 16) = *(_QWORD *)(v3 + 16);
  v11 = 1 << *(_BYTE *)(v3 + 32);
  v12 = -1;
  if (v11 < 64)
    v12 = ~(-1 << v11);
  v13 = v12 & *(_QWORD *)(v3 + 56);
  v14 = (unint64_t)(v11 + 63) >> 6;
  while (1)
  {
    if (v13)
    {
      v15 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      v16 = v15 | (v10 << 6);
      goto LABEL_12;
    }
    v19 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v19 >= v14)
      goto LABEL_28;
    v20 = *(_QWORD *)(v7 + 8 * v19);
    ++v10;
    if (!v20)
    {
      v10 = v19 + 1;
      if (v19 + 1 >= v14)
        goto LABEL_28;
      v20 = *(_QWORD *)(v7 + 8 * v10);
      if (!v20)
      {
        v10 = v19 + 2;
        if (v19 + 2 >= v14)
          goto LABEL_28;
        v20 = *(_QWORD *)(v7 + 8 * v10);
        if (!v20)
          break;
      }
    }
LABEL_27:
    v13 = (v20 - 1) & v20;
    v16 = __clz(__rbit64(v20)) + (v10 << 6);
LABEL_12:
    v17 = 8 * v16;
    v18 = *(void **)(*(_QWORD *)(v3 + 48) + v17);
    *(_QWORD *)(*(_QWORD *)(v5 + 48) + v17) = v18;
    result = v18;
  }
  v21 = v19 + 3;
  if (v21 >= v14)
    goto LABEL_28;
  v20 = *(_QWORD *)(v7 + 8 * v21);
  if (v20)
  {
    v10 = v21;
    goto LABEL_27;
  }
  while (1)
  {
    v10 = v21 + 1;
    if (__OFADD__(v21, 1))
      break;
    if (v10 >= v14)
      goto LABEL_28;
    v20 = *(_QWORD *)(v7 + 8 * v10);
    ++v21;
    if (v20)
      goto LABEL_27;
  }
LABEL_30:
  __break(1u);
  return result;
}

void *sub_100010DF0()
{
  return sub_100010E04((uint64_t (*)(_QWORD))&type metadata accessor for UUID, &qword_1000A5028);
}

void *sub_100010E04(uint64_t (*a1)(_QWORD), uint64_t *a2)
{
  uint64_t *v2;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *result;
  uint64_t v13;
  unint64_t v14;
  int64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  int64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  int64_t v24;
  unint64_t v25;
  int64_t v26;
  uint64_t v27;
  uint64_t *v28;

  v4 = v2;
  v5 = a1(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v27 - v7;
  sub_10000527C(a2);
  v9 = *v2;
  v10 = static _SetStorage.copy(original:)(*v2);
  v11 = v10;
  if (!*(_QWORD *)(v9 + 16))
  {
    result = (void *)swift_release(v9);
LABEL_30:
    *v4 = v11;
    return result;
  }
  v28 = v4;
  result = (void *)(v10 + 56);
  v13 = v9 + 56;
  v14 = (unint64_t)((1 << *(_BYTE *)(v11 + 32)) + 63) >> 6;
  if (v11 != v9 || (unint64_t)result >= v9 + 56 + 8 * v14)
    result = memmove(result, (const void *)(v9 + 56), 8 * v14);
  v16 = 0;
  *(_QWORD *)(v11 + 16) = *(_QWORD *)(v9 + 16);
  v17 = 1 << *(_BYTE *)(v9 + 32);
  v18 = -1;
  if (v17 < 64)
    v18 = ~(-1 << v17);
  v19 = v18 & *(_QWORD *)(v9 + 56);
  v20 = (unint64_t)(v17 + 63) >> 6;
  while (1)
  {
    if (v19)
    {
      v21 = __clz(__rbit64(v19));
      v19 &= v19 - 1;
      v22 = v21 | (v16 << 6);
      goto LABEL_12;
    }
    v24 = v16 + 1;
    if (__OFADD__(v16, 1))
    {
      __break(1u);
      goto LABEL_32;
    }
    if (v24 >= v20)
      goto LABEL_28;
    v25 = *(_QWORD *)(v13 + 8 * v24);
    ++v16;
    if (!v25)
    {
      v16 = v24 + 1;
      if (v24 + 1 >= v20)
        goto LABEL_28;
      v25 = *(_QWORD *)(v13 + 8 * v16);
      if (!v25)
      {
        v16 = v24 + 2;
        if (v24 + 2 >= v20)
          goto LABEL_28;
        v25 = *(_QWORD *)(v13 + 8 * v16);
        if (!v25)
          break;
      }
    }
LABEL_27:
    v19 = (v25 - 1) & v25;
    v22 = __clz(__rbit64(v25)) + (v16 << 6);
LABEL_12:
    v23 = *(_QWORD *)(v6 + 72) * v22;
    (*(void (**)(char *, unint64_t, uint64_t))(v6 + 16))(v8, *(_QWORD *)(v9 + 48) + v23, v5);
    result = (void *)(*(uint64_t (**)(unint64_t, char *, uint64_t))(v6 + 32))(*(_QWORD *)(v11 + 48) + v23, v8, v5);
  }
  v26 = v24 + 3;
  if (v26 >= v20)
  {
LABEL_28:
    result = (void *)swift_release(v9);
    v4 = v28;
    goto LABEL_30;
  }
  v25 = *(_QWORD *)(v13 + 8 * v26);
  if (v25)
  {
    v16 = v26;
    goto LABEL_27;
  }
  while (1)
  {
    v16 = v26 + 1;
    if (__OFADD__(v26, 1))
      break;
    if (v16 >= v20)
      goto LABEL_28;
    v25 = *(_QWORD *)(v13 + 8 * v16);
    ++v26;
    if (v25)
      goto LABEL_27;
  }
LABEL_32:
  __break(1u);
  return result;
}

uint64_t sub_100011028(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t result;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  int64_t v18;
  int64_t v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;
  uint64_t v25;

  v3 = sub_10000527C(&qword_1000A5068);
  __chkstk_darwin(v3);
  v5 = (char *)&v25 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for WidgetTileInfo(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = __chkstk_darwin(v6);
  v10 = (char *)&v25 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = __chkstk_darwin(v8);
  v13 = (char *)&v25 - v12;
  if (!*(_QWORD *)(*(_QWORD *)v1 + 16))
    return result;
  v14 = a1 + 56;
  v15 = 1 << *(_BYTE *)(a1 + 32);
  v16 = -1;
  if (v15 < 64)
    v16 = ~(-1 << v15);
  v17 = v16 & *(_QWORD *)(a1 + 56);
  v18 = (unint64_t)(v15 + 63) >> 6;
  result = swift_bridgeObjectRetain(a1);
  v19 = 0;
  while (1)
  {
    if (v17)
    {
      v20 = __clz(__rbit64(v17));
      v17 &= v17 - 1;
      v21 = v20 | (v19 << 6);
      goto LABEL_6;
    }
    v22 = v19 + 1;
    if (__OFADD__(v19, 1))
    {
      __break(1u);
      goto LABEL_27;
    }
    if (v22 >= v18)
      return swift_release(a1);
    v23 = *(_QWORD *)(v14 + 8 * v22);
    ++v19;
    if (!v23)
    {
      v19 = v22 + 1;
      if (v22 + 1 >= v18)
        return swift_release(a1);
      v23 = *(_QWORD *)(v14 + 8 * v19);
      if (!v23)
      {
        v19 = v22 + 2;
        if (v22 + 2 >= v18)
          return swift_release(a1);
        v23 = *(_QWORD *)(v14 + 8 * v19);
        if (!v23)
        {
          v19 = v22 + 3;
          if (v22 + 3 >= v18)
            return swift_release(a1);
          v23 = *(_QWORD *)(v14 + 8 * v19);
          if (!v23)
            break;
        }
      }
    }
LABEL_23:
    v17 = (v23 - 1) & v23;
    v21 = __clz(__rbit64(v23)) + (v19 << 6);
LABEL_6:
    sub_100008BB8(*(_QWORD *)(a1 + 48) + *(_QWORD *)(v7 + 72) * v21, (uint64_t)v13);
    sub_100008C38((uint64_t)v13, (uint64_t)v10);
    sub_1000120D4((uint64_t)v10, (uint64_t)v5);
    sub_100014EFC((uint64_t)v5, &qword_1000A5068);
    result = sub_100008BFC((uint64_t)v10);
  }
  v24 = v22 + 4;
  if (v24 >= v18)
    return swift_release(a1);
  v23 = *(_QWORD *)(v14 + 8 * v24);
  if (v23)
  {
    v19 = v24;
    goto LABEL_23;
  }
  while (1)
  {
    v19 = v24 + 1;
    if (__OFADD__(v24, 1))
      break;
    if (v19 >= v18)
      return swift_release(a1);
    v23 = *(_QWORD *)(v14 + 8 * v19);
    ++v24;
    if (v23)
      goto LABEL_23;
  }
LABEL_27:
  __break(1u);
  return result;
}

uint64_t sub_100011250(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t result;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  int64_t v18;
  unint64_t v19;
  unint64_t i;
  int64_t v21;
  unint64_t v22;
  int64_t v23;
  uint64_t v24;
  int64_t v25;

  v3 = type metadata accessor for UUID(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v24 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_10000527C(&qword_1000A5060);
  v8 = __chkstk_darwin(v7);
  v10 = (char *)&v24 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = __chkstk_darwin(v8);
  v13 = (char *)&v24 - v12;
  if (!*(_QWORD *)(*(_QWORD *)v1 + 16))
    return result;
  v14 = a1 + 56;
  v15 = 1 << *(_BYTE *)(a1 + 32);
  v16 = -1;
  if (v15 < 64)
    v16 = ~(-1 << v15);
  v17 = v16 & *(_QWORD *)(a1 + 56);
  v25 = (unint64_t)(v15 + 63) >> 6;
  result = swift_bridgeObjectRetain(a1);
  v18 = 0;
  if (!v17)
    goto LABEL_6;
LABEL_5:
  v19 = __clz(__rbit64(v17));
  v17 &= v17 - 1;
  for (i = v19 | (v18 << 6); ; i = __clz(__rbit64(v22)) + (v18 << 6))
  {
    (*(void (**)(char *, unint64_t, uint64_t))(v4 + 16))(v13, *(_QWORD *)(a1 + 48) + *(_QWORD *)(v4 + 72) * i, v3);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v4 + 56))(v13, 0, 1, v3);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v4 + 48))(v13, 1, v3) == 1)
      return swift_release(a1);
    (*(void (**)(char *, char *, uint64_t))(v4 + 32))(v6, v13, v3);
    sub_1000122AC((uint64_t)v6, (uint64_t)v10);
    sub_100014EFC((uint64_t)v10, &qword_1000A5060);
    result = (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    if (v17)
      goto LABEL_5;
LABEL_6:
    v21 = v18 + 1;
    if (__OFADD__(v18, 1))
    {
      __break(1u);
      goto LABEL_29;
    }
    if (v21 >= v25)
      goto LABEL_25;
    v22 = *(_QWORD *)(v14 + 8 * v21);
    ++v18;
    if (!v22)
    {
      v18 = v21 + 1;
      if (v21 + 1 >= v25)
        goto LABEL_25;
      v22 = *(_QWORD *)(v14 + 8 * v18);
      if (!v22)
      {
        v18 = v21 + 2;
        if (v21 + 2 >= v25)
          goto LABEL_25;
        v22 = *(_QWORD *)(v14 + 8 * v18);
        if (!v22)
        {
          v18 = v21 + 3;
          if (v21 + 3 >= v25)
            goto LABEL_25;
          v22 = *(_QWORD *)(v14 + 8 * v18);
          if (!v22)
            break;
        }
      }
    }
LABEL_21:
    v17 = (v22 - 1) & v22;
  }
  v23 = v21 + 4;
  if (v23 >= v25)
  {
LABEL_25:
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v4 + 56))(v13, 1, 1, v3);
    return swift_release(a1);
  }
  v22 = *(_QWORD *)(v14 + 8 * v23);
  if (v22)
  {
    v18 = v23;
    goto LABEL_21;
  }
  while (1)
  {
    v18 = v23 + 1;
    if (__OFADD__(v23, 1))
      break;
    if (v18 >= v25)
      goto LABEL_25;
    v22 = *(_QWORD *)(v14 + 8 * v18);
    ++v23;
    if (v22)
      goto LABEL_21;
  }
LABEL_29:
  __break(1u);
  return result;
}

char *sub_100011504(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  Swift::Int v28;
  uint64_t v29;
  unint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  unint64_t v35;
  int64_t v36;
  uint64_t v37;
  uint64_t isStackAllocationSafe;
  uint64_t v39;
  char v40;
  unsigned int v41;
  unint64_t v42;
  uint64_t v43;
  size_t v44;
  char *v45;
  void *v47;
  char *v48;
  unint64_t v49;
  uint64_t v50;
  unint64_t v51;
  int64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  _QWORD v60[9];
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  int64_t v64;
  uint64_t v65;

  v4 = sub_10000527C(&qword_1000A5068);
  __chkstk_darwin(v4);
  v6 = (char *)&v49 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v55 = type metadata accessor for WidgetTileInfo(0);
  v7 = *(_QWORD *)(v55 - 8);
  v8 = __chkstk_darwin(v55);
  v10 = (char *)&v49 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v12 = (char *)&v49 - v11;
  if (!*(_QWORD *)(a2 + 16))
  {
    swift_release(a2);
    return (char *)&_swiftEmptySetSingleton;
  }
  v53 = v6;
  v13 = *(_QWORD *)(a1 + 56);
  v14 = -1 << *(_BYTE *)(a1 + 32);
  if (-v14 < 64)
    v15 = ~(-1 << -(char)v14);
  else
    v15 = -1;
  v16 = v15 & v13;
  v61 = a1;
  v62 = a1 + 56;
  v56 = a1 + 56;
  v54 = ~v14;
  v63 = ~v14;
  v64 = 0;
  v65 = v15 & v13;
  v59 = a2;
  v57 = (char *)(a2 + 56);
  v17 = (unint64_t)(63 - v14) >> 6;
  v49 = v17 - 1;
  swift_bridgeObjectRetain(a1);
  v18 = 0;
  v52 = v17;
  v51 = v17 - 6;
  v50 = a1 + 104;
  while (1)
  {
    if (v16)
    {
      v58 = (v16 - 1) & v16;
      v19 = __clz(__rbit64(v16)) | (v18 << 6);
      v20 = v18;
      v21 = (uint64_t)v53;
LABEL_9:
      sub_100008BB8(*(_QWORD *)(a1 + 48) + *(_QWORD *)(v7 + 72) * v19, v21);
      v22 = 0;
      goto LABEL_10;
    }
    v20 = v18 + 1;
    v21 = (uint64_t)v53;
    if (__OFADD__(v18, 1))
      __break(1u);
    if (v20 >= v52)
    {
      v58 = 0;
      v22 = 1;
      v20 = v18;
      goto LABEL_10;
    }
    v35 = *(_QWORD *)(v56 + 8 * v20);
    if (v35)
      goto LABEL_19;
    v36 = v18 + 2;
    if (v18 + 2 >= v52)
    {
      v58 = 0;
      v22 = 1;
      goto LABEL_10;
    }
    v35 = *(_QWORD *)(v56 + 8 * v36);
    if (v35)
      goto LABEL_23;
    if (v18 + 3 >= v52)
    {
LABEL_36:
      v58 = 0;
      v22 = 1;
      v20 = v36;
      goto LABEL_10;
    }
    v35 = *(_QWORD *)(v56 + 8 * (v18 + 3));
    if (v35)
    {
      v20 = v18 + 3;
      goto LABEL_19;
    }
    v36 = v18 + 4;
    if (v18 + 4 >= v52)
    {
      v58 = 0;
      v22 = 1;
      v20 = v18 + 3;
    }
    else
    {
      v35 = *(_QWORD *)(v56 + 8 * v36);
      if (v35)
      {
LABEL_23:
        v20 = v36;
LABEL_19:
        v58 = (v35 - 1) & v35;
        v19 = __clz(__rbit64(v35)) + (v20 << 6);
        goto LABEL_9;
      }
      v20 = v18 + 5;
      if (v18 + 5 >= v52)
        goto LABEL_36;
      v35 = *(_QWORD *)(v56 + 8 * v20);
      if (v35)
        goto LABEL_19;
      v37 = v18;
      while (v51 != v37)
      {
        v35 = *(_QWORD *)(v50 + 8 * v37++);
        if (v35)
        {
          v20 = v37 + 5;
          goto LABEL_19;
        }
      }
      v58 = 0;
      v22 = 1;
      v20 = v49;
    }
LABEL_10:
    v23 = v55;
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v7 + 56))(v21, v22, 1, v55);
    v61 = a1;
    v62 = v56;
    v63 = v54;
    v64 = v20;
    v24 = v20;
    v65 = v58;
    v25 = v7;
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(v21, 1, v23) == 1)
    {
      sub_100014DC4(a1);
      sub_100014EFC(v21, &qword_1000A5068);
      return (char *)v59;
    }
    v26 = a1;
    sub_100008C38(v21, (uint64_t)v12);
    v27 = v59;
    Hasher.init(_seed:)(v60, *(_QWORD *)(v59 + 40));
    sub_100019DE4((uint64_t)v60);
    v28 = Hasher._finalize()();
    v29 = -1 << *(_BYTE *)(v27 + 32);
    v30 = v28 & ~v29;
    v31 = v57;
    if (((*(_QWORD *)&v57[(v30 >> 3) & 0xFFFFFFFFFFFFF8] >> v30) & 1) != 0)
      break;
LABEL_6:
    sub_100008BFC((uint64_t)v12);
    v18 = v24;
    v16 = v58;
    a1 = v26;
    v7 = v25;
  }
  v32 = ~v29;
  v33 = *(_QWORD *)(v25 + 72);
  while (1)
  {
    sub_100008BB8(*(_QWORD *)(v27 + 48) + v33 * v30, (uint64_t)v10);
    v34 = sub_10001AB38((uint64_t)v10, (uint64_t)v12);
    sub_100008BFC((uint64_t)v10);
    if ((v34 & 1) != 0)
      break;
    v30 = (v30 + 1) & v32;
    v27 = v59;
    if (((*(_QWORD *)&v31[(v30 >> 3) & 0xFFFFFFFFFFFFF8] >> v30) & 1) == 0)
      goto LABEL_6;
  }
  isStackAllocationSafe = sub_100008BFC((uint64_t)v12);
  v39 = v59;
  v40 = *(_BYTE *)(v59 + 32);
  v41 = v40 & 0x3F;
  v42 = (1 << v40) + 63;
  v43 = v42 >> 6;
  v44 = 8 * (v42 >> 6);
  if (v41 <= 0xD
    || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(8 * (v42 >> 6), 8), (_DWORD)isStackAllocationSafe))
  {
    __chkstk_darwin(isStackAllocationSafe);
    memcpy((char *)&v49 - ((v44 + 15) & 0x3FFFFFFFFFFFFFF0), v57, v44);
    v45 = sub_1000124F8((unint64_t *)((char *)&v49 - ((v44 + 15) & 0x3FFFFFFFFFFFFFF0)), v43, v39, v30, &v61);
    swift_release(v39);
    sub_100014DC4(v61);
    return v45;
  }
  else
  {
    v47 = (void *)swift_slowAlloc(v44, -1);
    memcpy(v47, v57, v44);
    v48 = sub_1000124F8((unint64_t *)v47, v43, v39, v30, &v61);
    swift_release(v39);
    sub_100014DC4(v61);
    swift_slowDealloc(v47, -1, -1);
    return v48;
  }
}

void *sub_100011B18(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int64_t v23;
  uint64_t v24;
  unint64_t v25;
  int64_t v26;
  uint64_t v27;
  uint64_t v28;
  int64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void (*v41)(char *, unint64_t, uint64_t);
  uint64_t v42;
  char v43;
  void (*v44)(char *, uint64_t);
  uint64_t isStackAllocationSafe;
  char v46;
  unsigned int v47;
  unint64_t v48;
  uint64_t v49;
  size_t v50;
  void *v51;
  void *v53;
  uint64_t v54;
  char *v55;
  unint64_t v56;
  int64_t v57;
  uint64_t v58;
  char *v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  int64_t v64;
  unint64_t v65;

  v4 = sub_10000527C(&qword_1000A5060);
  __chkstk_darwin(v4);
  v6 = (char *)&v54 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for UUID(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = __chkstk_darwin(v7);
  v11 = (char *)&v54 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v60 = (char *)&v54 - v12;
  if (!*(_QWORD *)(a2 + 16))
  {
    swift_release(a2);
    return &_swiftEmptySetSingleton;
  }
  v13 = -1 << *(_BYTE *)(a1 + 32);
  v14 = *(_QWORD *)(a1 + 56);
  v15 = ~v13;
  v16 = -v13;
  if (v16 < 64)
    v17 = ~(-1 << v16);
  else
    v17 = -1;
  v61 = a1;
  v62 = a1 + 56;
  v18 = a1;
  v19 = a1 + 56;
  v20 = v17 & v14;
  v21 = v15;
  v63 = v15;
  v64 = 0;
  v65 = v17 & v14;
  v59 = (char *)(a2 + 56);
  v22 = v18;
  swift_bridgeObjectRetain(v18);
  v23 = 0;
  v55 = v6;
  v58 = a2;
  v56 = v20;
  v57 = 0;
  if (!v20)
    goto LABEL_8;
LABEL_6:
  v24 = (v20 - 1) & v20;
  v25 = __clz(__rbit64(v20)) | (v23 << 6);
  v26 = v23;
  v27 = v19;
LABEL_7:
  (*(void (**)(char *, unint64_t, uint64_t))(v8 + 16))(v6, *(_QWORD *)(v22 + 48) + *(_QWORD *)(v8 + 72) * v25, v7);
  v28 = 0;
  while (1)
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v8 + 56))(v6, v28, 1, v7);
    v61 = v22;
    v62 = v27;
    v63 = v21;
    v64 = v26;
    v65 = v24;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7) == 1)
    {
      sub_100014DC4(v22);
      sub_100014EFC((uint64_t)v6, &qword_1000A5060);
      return (void *)v58;
    }
    (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v60, v6, v7);
    v32 = v58;
    v33 = *(_QWORD *)(v58 + 40);
    v34 = sub_100008C7C((unint64_t *)&qword_1000A5020, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v35 = dispatch thunk of Hashable._rawHashValue(seed:)(v33, v7, v34);
    v36 = -1 << *(_BYTE *)(v32 + 32);
    v37 = v35 & ~v36;
    if (((*(_QWORD *)&v59[(v37 >> 3) & 0xFFFFFFFFFFFFF8] >> v37) & 1) != 0)
      break;
    v44 = *(void (**)(char *, uint64_t))(v8 + 8);
LABEL_34:
    v44(v60, v7);
    v23 = v64;
    v20 = v65;
    v22 = v61;
    v19 = v62;
    v21 = v63;
    v6 = v55;
    v56 = v65;
    v57 = v64;
    if (v65)
      goto LABEL_6;
LABEL_8:
    v26 = v23 + 1;
    if (__OFADD__(v23, 1))
      __break(1u);
    v27 = v19;
    v29 = (unint64_t)(v21 + 64) >> 6;
    if (v26 >= v29)
      goto LABEL_26;
    v30 = *(_QWORD *)(v19 + 8 * v26);
    if (v30)
      goto LABEL_11;
    v23 += 2;
    if (v26 + 1 >= v29)
      goto LABEL_36;
    v30 = *(_QWORD *)(v19 + 8 * v23);
    if (v30)
      goto LABEL_14;
    if (v26 + 2 >= v29)
    {
LABEL_26:
      v24 = 0;
      v28 = 1;
      v26 = v23;
    }
    else
    {
      v30 = *(_QWORD *)(v19 + 8 * (v26 + 2));
      if (v30)
      {
        v26 += 2;
        goto LABEL_11;
      }
      v23 = v26 + 3;
      if (v26 + 3 >= v29)
      {
        v24 = 0;
        v28 = 1;
        v26 += 2;
      }
      else
      {
        v30 = *(_QWORD *)(v19 + 8 * v23);
        if (v30)
        {
LABEL_14:
          v26 = v23;
LABEL_11:
          v24 = (v30 - 1) & v30;
          v25 = __clz(__rbit64(v30)) + (v26 << 6);
          goto LABEL_7;
        }
        v26 += 4;
        if (v26 >= v29)
          goto LABEL_26;
        v30 = *(_QWORD *)(v19 + 8 * v26);
        if (v30)
          goto LABEL_11;
        v26 = v29 - 1;
        v31 = v57 + 6;
        while (v29 != v31)
        {
          v30 = *(_QWORD *)(v19 + 8 * v31++);
          if (v30)
          {
            v26 = v31 - 1;
            goto LABEL_11;
          }
        }
LABEL_36:
        v24 = 0;
        v28 = 1;
      }
    }
  }
  v38 = v32;
  v39 = ~v36;
  v40 = *(_QWORD *)(v8 + 72);
  v41 = *(void (**)(char *, unint64_t, uint64_t))(v8 + 16);
  while (1)
  {
    v41(v11, *(_QWORD *)(v38 + 48) + v40 * v37, v7);
    v42 = sub_100008C7C((unint64_t *)&unk_1000A7670, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v43 = dispatch thunk of static Equatable.== infix(_:_:)(v11, v60, v7, v42);
    v44 = *(void (**)(char *, uint64_t))(v8 + 8);
    v44(v11, v7);
    if ((v43 & 1) != 0)
      break;
    v37 = (v37 + 1) & v39;
    if (((*(_QWORD *)&v59[(v37 >> 3) & 0xFFFFFFFFFFFFF8] >> v37) & 1) == 0)
      goto LABEL_34;
  }
  isStackAllocationSafe = ((uint64_t (*)(char *, uint64_t))v44)(v60, v7);
  v46 = *(_BYTE *)(v38 + 32);
  v47 = v46 & 0x3F;
  v48 = (1 << v46) + 63;
  v49 = v48 >> 6;
  v50 = 8 * (v48 >> 6);
  if (v47 <= 0xD
    || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(8 * (v48 >> 6), 8), (_DWORD)isStackAllocationSafe))
  {
    __chkstk_darwin(isStackAllocationSafe);
    memcpy((char *)&v54 - ((v50 + 15) & 0x3FFFFFFFFFFFFFF0), v59, v50);
    v51 = sub_1000128C0((unint64_t *)((char *)&v54 - ((v50 + 15) & 0x3FFFFFFFFFFFFFF0)), v49, v38, v37, &v61);
    swift_release(v38);
    sub_100014DC4(v61);
  }
  else
  {
    v53 = (void *)swift_slowAlloc(v50, -1);
    memcpy(v53, v59, v50);
    v51 = sub_1000128C0((unint64_t *)v53, v49, v38, v37, &v61);
    swift_release(v38);
    sub_100014DC4(v61);
    swift_slowDealloc(v53, -1, -1);
  }
  return v51;
}

uint64_t sub_1000120D4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  Swift::Int v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD v25[9];

  v3 = v2;
  v6 = type metadata accessor for WidgetTileInfo(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v22 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *v2;
  Hasher.init(_seed:)(v25, *(_QWORD *)(*v2 + 40));
  swift_bridgeObjectRetain(v10);
  sub_100019DE4((uint64_t)v25);
  v11 = Hasher._finalize()();
  v12 = -1 << *(_BYTE *)(v10 + 32);
  v13 = v11 & ~v12;
  if (((*(_QWORD *)(v10 + 56 + ((v13 >> 3) & 0xFFFFFFFFFFFFF8)) >> v13) & 1) != 0)
  {
    v23 = v6;
    v24 = a2;
    v14 = ~v12;
    v22 = v7;
    v15 = *(_QWORD *)(v7 + 72);
    while (1)
    {
      sub_100008BB8(*(_QWORD *)(v10 + 48) + v15 * v13, (uint64_t)v9);
      v16 = sub_10001AB38((uint64_t)v9, a1);
      sub_100008BFC((uint64_t)v9);
      if ((v16 & 1) != 0)
        break;
      v13 = (v13 + 1) & v14;
      if (((*(_QWORD *)(v10 + 56 + ((v13 >> 3) & 0xFFFFFFFFFFFFF8)) >> v13) & 1) == 0)
      {
        swift_bridgeObjectRelease(v10);
        v17 = 1;
        a2 = v24;
        goto LABEL_10;
      }
    }
    swift_bridgeObjectRelease(v10);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
    v19 = *v3;
    v25[0] = *v3;
    *v3 = 0x8000000000000000;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      sub_100010A40();
      v19 = v25[0];
    }
    a2 = v24;
    sub_100008C38(*(_QWORD *)(v19 + 48) + v15 * v13, v24);
    sub_1000134AC(v13);
    v20 = *v3;
    *v3 = v25[0];
    swift_bridgeObjectRelease(v20);
    v17 = 0;
LABEL_10:
    v7 = v22;
    v6 = v23;
  }
  else
  {
    swift_bridgeObjectRelease(v10);
    v17 = 1;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v7 + 56))(a2, v17, 1, v6);
}

uint64_t sub_1000122AC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(char *, unint64_t, uint64_t);
  unint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t *v24;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  v3 = v2;
  v6 = type metadata accessor for UUID(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v30 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *v3;
  v11 = *(_QWORD *)(*v3 + 40);
  v13 = sub_100008C7C((unint64_t *)&qword_1000A5020, v12, (uint64_t)&protocol conformance descriptor for UUID);
  swift_bridgeObjectRetain(v10);
  v33 = a1;
  v14 = dispatch thunk of Hashable._rawHashValue(seed:)(v11, v6, v13);
  v15 = -1 << *(_BYTE *)(v10 + 32);
  v16 = v14 & ~v15;
  if (((*(_QWORD *)(v10 + 56 + ((v16 >> 3) & 0xFFFFFFFFFFFFF8)) >> v16) & 1) != 0)
  {
    v31 = v3;
    v32 = a2;
    v17 = ~v15;
    v18 = *(_QWORD *)(v7 + 72);
    v34 = v7;
    v19 = *(void (**)(char *, unint64_t, uint64_t))(v7 + 16);
    while (1)
    {
      v20 = v18 * v16;
      v19(v9, *(_QWORD *)(v10 + 48) + v18 * v16, v6);
      v21 = sub_100008C7C((unint64_t *)&unk_1000A7670, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v22 = dispatch thunk of static Equatable.== infix(_:_:)(v9, v33, v6, v21);
      (*(void (**)(char *, uint64_t))(v34 + 8))(v9, v6);
      if ((v22 & 1) != 0)
        break;
      v16 = (v16 + 1) & v17;
      if (((*(_QWORD *)(v10 + 56 + ((v16 >> 3) & 0xFFFFFFFFFFFFF8)) >> v16) & 1) == 0)
      {
        swift_bridgeObjectRelease(v10);
        v23 = 1;
        a2 = v32;
        v7 = v34;
        return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v7 + 56))(a2, v23, 1, v6);
      }
    }
    swift_bridgeObjectRelease(v10);
    v24 = v31;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v31);
    v26 = *v24;
    v35 = *v24;
    *v24 = 0x8000000000000000;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      sub_100010E04((uint64_t (*)(_QWORD))&type metadata accessor for UUID, &qword_1000A5028);
      v26 = v35;
    }
    v27 = *(_QWORD *)(v26 + 48) + v20;
    v7 = v34;
    a2 = v32;
    (*(void (**)(uint64_t, unint64_t, uint64_t))(v34 + 32))(v32, v27, v6);
    sub_1000138AC(v16);
    v28 = *v24;
    *v24 = v35;
    swift_bridgeObjectRelease(v28);
    v23 = 0;
  }
  else
  {
    swift_bridgeObjectRelease(v10);
    v23 = 1;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v7 + 56))(a2, v23, 1, v6);
}

char *sub_1000124F8(unint64_t *a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t *a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *result;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int64_t v33;
  int64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int64_t v38;
  Swift::Int v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  int64_t v56;
  uint64_t v57;
  _QWORD v58[9];
  uint64_t v59;

  v49 = a2;
  v9 = sub_10000527C(&qword_1000A5068);
  __chkstk_darwin(v9);
  v52 = (uint64_t)&v48 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for WidgetTileInfo(0);
  v12 = *(_QWORD *)(v11 - 8);
  v53 = v11;
  v54 = v12;
  v13 = __chkstk_darwin(v11);
  v15 = (char *)&v48 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = (char *)__chkstk_darwin(v13);
  v18 = (char *)&v48 - v17;
  v19 = *(_QWORD *)(a3 + 16);
  v20 = (a4 >> 3) & 0x1FFFFFFFFFFFFFF8;
  v21 = *(unint64_t *)((char *)a1 + v20) & ((-1 << a4) - 1);
  v51 = a1;
  *(unint64_t *)((char *)a1 + v20) = v21;
  v22 = v19 - 1;
  v23 = a3 + 56;
  while (2)
  {
    v50 = v22;
    do
    {
      while (1)
      {
        v25 = *a5;
        v24 = a5[1];
        v26 = a5[2];
        v27 = a5[3];
        v28 = a5[4];
        v59 = v24;
        v57 = v26;
        if (v28)
        {
          v55 = (v28 - 1) & v28;
          v56 = v27;
          v29 = __clz(__rbit64(v28)) | (v27 << 6);
          v30 = v54;
LABEL_6:
          v31 = v52;
          sub_100008BB8(*(_QWORD *)(v25 + 48) + *(_QWORD *)(v30 + 72) * v29, v52);
          v32 = 0;
          goto LABEL_13;
        }
        v33 = v27 + 1;
        v30 = v54;
        if (__OFADD__(v27, 1))
        {
          __break(1u);
          goto LABEL_42;
        }
        v34 = (unint64_t)(v26 + 64) >> 6;
        if (v33 >= v34)
        {
          v55 = 0;
          v56 = v27;
        }
        else
        {
          v35 = *(_QWORD *)(v24 + 8 * v33);
          if (v35)
            goto LABEL_10;
          if (v27 + 2 >= v34)
            goto LABEL_34;
          v35 = *(_QWORD *)(v24 + 8 * (v27 + 2));
          if (v35)
          {
            v33 = v27 + 2;
LABEL_10:
            v55 = (v35 - 1) & v35;
            v56 = v33;
            v29 = __clz(__rbit64(v35)) + (v33 << 6);
            goto LABEL_6;
          }
          if (v27 + 3 < v34)
          {
            v35 = *(_QWORD *)(v24 + 8 * (v27 + 3));
            if (v35)
            {
              v33 = v27 + 3;
              goto LABEL_10;
            }
            v33 = v27 + 4;
            if (v27 + 4 >= v34)
            {
              v55 = 0;
              v56 = v27 + 3;
              goto LABEL_12;
            }
            v35 = *(_QWORD *)(v24 + 8 * v33);
            if (v35)
              goto LABEL_10;
            v33 = v34 - 1;
            v47 = v27 + 5;
            while (v34 != v47)
            {
              v35 = *(_QWORD *)(v24 + 8 * v47++);
              if (v35)
              {
                v33 = v47 - 1;
                goto LABEL_10;
              }
            }
LABEL_34:
            v55 = 0;
            v56 = v33;
            goto LABEL_12;
          }
          v55 = 0;
          v56 = v27 + 2;
        }
LABEL_12:
        v32 = 1;
        v31 = v52;
LABEL_13:
        v36 = v53;
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v30 + 56))(v31, v32, 1, v53);
        v37 = v59;
        *a5 = v25;
        a5[1] = v37;
        v38 = v56;
        a5[2] = v57;
        a5[3] = v38;
        a5[4] = v55;
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v30 + 48))(v31, 1, v36) == 1)
        {
          sub_100014EFC(v31, &qword_1000A5068);
          swift_retain(a3);
          return sub_100012D04(v51, v49, v50, a3);
        }
        sub_100008C38(v31, (uint64_t)v18);
        Hasher.init(_seed:)(v58, *(_QWORD *)(a3 + 40));
        sub_100019DE4((uint64_t)v58);
        v39 = Hasher._finalize()();
        v40 = -1 << *(_BYTE *)(a3 + 32);
        v41 = v39 & ~v40;
        if (((*(_QWORD *)(v23 + ((v41 >> 3) & 0xFFFFFFFFFFFFF8)) >> v41) & 1) != 0)
          break;
LABEL_3:
        result = (char *)sub_100008BFC((uint64_t)v18);
      }
      v42 = ~v40;
      v43 = *(_QWORD *)(v54 + 72);
      while (1)
      {
        sub_100008BB8(*(_QWORD *)(a3 + 48) + v43 * v41, (uint64_t)v15);
        v44 = sub_10001AB38((uint64_t)v15, (uint64_t)v18);
        sub_100008BFC((uint64_t)v15);
        if ((v44 & 1) != 0)
          break;
        v41 = (v41 + 1) & v42;
        if (((*(_QWORD *)(v23 + ((v41 >> 3) & 0xFFFFFFFFFFFFF8)) >> v41) & 1) == 0)
          goto LABEL_3;
      }
      result = (char *)sub_100008BFC((uint64_t)v18);
      v45 = (v41 >> 3) & 0x1FFFFFFFFFFFFFF8;
      v46 = *(unint64_t *)((char *)v51 + v45);
      *(unint64_t *)((char *)v51 + v45) = v46 & ~(1 << v41);
    }
    while ((v46 & (1 << v41)) == 0);
    v22 = v50 - 1;
    if (__OFSUB__(v50, 1))
    {
LABEL_42:
      __break(1u);
      return result;
    }
    if (v50 != 1)
      continue;
    return (char *)&_swiftEmptySetSingleton;
  }
}

void *sub_1000128C0(unint64_t *a1, uint64_t a2, uint64_t a3, unint64_t a4, _QWORD *a5)
{
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  void *result;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t (*v23)(char *, uint64_t);
  uint64_t v24;
  uint64_t v25;
  int64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  void (*v40)(char *, unint64_t, uint64_t);
  uint64_t v41;
  char v42;
  int64_t v43;
  int64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  int64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t *v53;
  char *v54;
  _QWORD *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;

  v51 = a2;
  v9 = sub_10000527C(&qword_1000A5060);
  __chkstk_darwin(v9);
  v11 = (char *)&v50 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for UUID(0);
  v13 = *(_QWORD *)(v12 - 8);
  v14 = __chkstk_darwin(v12);
  v16 = (char *)&v50 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = (void *)__chkstk_darwin(v14);
  v59 = (char *)&v50 - v18;
  v19 = *(_QWORD *)(a3 + 16);
  v20 = (a4 >> 3) & 0x1FFFFFFFFFFFFFF8;
  v21 = *(unint64_t *)((char *)a1 + v20) & ((-1 << a4) - 1);
  v53 = a1;
  v54 = v11;
  *(unint64_t *)((char *)a1 + v20) = v21;
  v22 = v19 - 1;
  v57 = a3 + 56;
  v58 = a3;
  v55 = a5;
  while (2)
  {
    v52 = v22;
    do
    {
      while (1)
      {
        v24 = *a5;
        v25 = a5[1];
        v27 = a5[2];
        v26 = a5[3];
        v28 = a5[4];
        v56 = v27;
        if (v28)
        {
          v29 = (v28 - 1) & v28;
          v30 = __clz(__rbit64(v28)) | (v26 << 6);
LABEL_7:
          (*(void (**)(char *, unint64_t, uint64_t))(v13 + 16))(v11, *(_QWORD *)(v24 + 48) + *(_QWORD *)(v13 + 72) * v30, v12);
          v31 = 0;
          goto LABEL_8;
        }
        v43 = v26 + 1;
        if (__OFADD__(v26, 1))
        {
          __break(1u);
          goto LABEL_42;
        }
        v44 = (unint64_t)(v27 + 64) >> 6;
        if (v43 >= v44)
        {
          v29 = 0;
          v31 = 1;
          goto LABEL_8;
        }
        v45 = *(_QWORD *)(v25 + 8 * v43);
        if (v45)
          goto LABEL_17;
        if (v26 + 2 >= v44)
          goto LABEL_34;
        v45 = *(_QWORD *)(v25 + 8 * (v26 + 2));
        if (v45)
        {
          v43 = v26 + 2;
LABEL_17:
          v29 = (v45 - 1) & v45;
          v30 = __clz(__rbit64(v45)) + (v43 << 6);
          v26 = v43;
          goto LABEL_7;
        }
        if (v26 + 3 >= v44)
        {
          v29 = 0;
          v31 = 1;
          v26 += 2;
          goto LABEL_8;
        }
        v45 = *(_QWORD *)(v25 + 8 * (v26 + 3));
        if (v45)
        {
          v43 = v26 + 3;
          goto LABEL_17;
        }
        v43 = v26 + 4;
        if (v26 + 4 < v44)
        {
          v45 = *(_QWORD *)(v25 + 8 * v43);
          if (v45)
            goto LABEL_17;
          v43 = v44 - 1;
          v48 = v26 + 5;
          while (v44 != v48)
          {
            v45 = *(_QWORD *)(v25 + 8 * v48++);
            if (v45)
            {
              v43 = v48 - 1;
              goto LABEL_17;
            }
          }
LABEL_34:
          v29 = 0;
          v31 = 1;
          v26 = v43;
          goto LABEL_8;
        }
        v29 = 0;
        v31 = 1;
        v26 += 3;
LABEL_8:
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v13 + 56))(v11, v31, 1, v12);
        *a5 = v24;
        a5[1] = v25;
        a5[2] = v56;
        a5[3] = v26;
        a5[4] = v29;
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12) == 1)
        {
          sub_100014EFC((uint64_t)v11, &qword_1000A5060);
          v49 = v58;
          swift_retain(v58);
          return (void *)sub_1000131AC(v53, v51, v52, v49);
        }
        (*(void (**)(char *, char *, uint64_t))(v13 + 32))(v59, v11, v12);
        v32 = v58;
        v33 = *(_QWORD *)(v58 + 40);
        v34 = sub_100008C7C((unint64_t *)&qword_1000A5020, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
        v35 = dispatch thunk of Hashable._rawHashValue(seed:)(v33, v12, v34);
        v36 = -1 << *(_BYTE *)(v32 + 32);
        v37 = v35 & ~v36;
        if (((*(_QWORD *)(v57 + ((v37 >> 3) & 0xFFFFFFFFFFFFF8)) >> v37) & 1) != 0)
          break;
        v23 = *(uint64_t (**)(char *, uint64_t))(v13 + 8);
LABEL_4:
        result = (void *)v23(v59, v12);
        v11 = v54;
        a5 = v55;
      }
      v38 = ~v36;
      v39 = *(_QWORD *)(v13 + 72);
      v40 = *(void (**)(char *, unint64_t, uint64_t))(v13 + 16);
      while (1)
      {
        v40(v16, *(_QWORD *)(v58 + 48) + v39 * v37, v12);
        v41 = sub_100008C7C((unint64_t *)&unk_1000A7670, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
        v42 = dispatch thunk of static Equatable.== infix(_:_:)(v16, v59, v12, v41);
        v23 = *(uint64_t (**)(char *, uint64_t))(v13 + 8);
        v23(v16, v12);
        if ((v42 & 1) != 0)
          break;
        v37 = (v37 + 1) & v38;
        if (((*(_QWORD *)(v57 + ((v37 >> 3) & 0xFFFFFFFFFFFFF8)) >> v37) & 1) == 0)
          goto LABEL_4;
      }
      result = (void *)v23(v59, v12);
      v46 = (v37 >> 3) & 0x1FFFFFFFFFFFFFF8;
      v11 = v54;
      v47 = *(unint64_t *)((char *)v53 + v46);
      *(unint64_t *)((char *)v53 + v46) = v47 & ~(1 << v37);
      a5 = v55;
    }
    while ((v47 & (1 << v37)) == 0);
    v22 = v52 - 1;
    if (__OFSUB__(v52, 1))
    {
LABEL_42:
      __break(1u);
      return result;
    }
    if (v52 != 1)
      continue;
    return &_swiftEmptySetSingleton;
  }
}

char *sub_100012D04(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  char *result;
  unint64_t v14;
  uint64_t v15;
  char *v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  Swift::Int v23;
  unint64_t v24;
  uint64_t v26;
  unint64_t *v27;
  uint64_t v28;
  _QWORD v29[9];

  v8 = type metadata accessor for WidgetTileInfo(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v26 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!a3)
  {
    swift_release(a4);
    return (char *)&_swiftEmptySetSingleton;
  }
  if (*(_QWORD *)(a4 + 16) == a3)
    return (char *)a4;
  sub_10000527C(&qword_1000A4FF8);
  result = (char *)static _SetStorage.allocate(capacity:)(a3);
  v12 = result;
  v27 = a1;
  v28 = a2;
  if (a2 < 1)
    v14 = 0;
  else
    v14 = *a1;
  v15 = 0;
  v16 = result + 56;
  while (1)
  {
    if (v14)
    {
      v17 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      v18 = v17 | (v15 << 6);
    }
    else
    {
      v19 = v15 + 1;
      if (__OFADD__(v15, 1))
        goto LABEL_30;
      if (v19 >= v28)
      {
LABEL_27:
        swift_release(a4);
        return v12;
      }
      v20 = v27[v19];
      ++v15;
      if (!v20)
      {
        v15 = v19 + 1;
        if (v19 + 1 >= v28)
          goto LABEL_27;
        v20 = v27[v15];
        if (!v20)
        {
          v15 = v19 + 2;
          if (v19 + 2 >= v28)
            goto LABEL_27;
          v20 = v27[v15];
          if (!v20)
          {
            v21 = v19 + 3;
            if (v21 >= v28)
              goto LABEL_27;
            v20 = v27[v21];
            if (!v20)
            {
              while (1)
              {
                v15 = v21 + 1;
                if (__OFADD__(v21, 1))
                  goto LABEL_31;
                if (v15 >= v28)
                  goto LABEL_27;
                v20 = v27[v15];
                ++v21;
                if (v20)
                  goto LABEL_24;
              }
            }
            v15 = v21;
          }
        }
      }
LABEL_24:
      v14 = (v20 - 1) & v20;
      v18 = __clz(__rbit64(v20)) + (v15 << 6);
    }
    v22 = *(_QWORD *)(v9 + 72);
    sub_100008BB8(*(_QWORD *)(a4 + 48) + v22 * v18, (uint64_t)v11);
    Hasher.init(_seed:)(v29, *((_QWORD *)v12 + 5));
    sub_100019DE4((uint64_t)v29);
    v23 = Hasher._finalize()();
    v24 = _HashTable.nextHole(atOrAfter:)(v23 & ~(-1 << v12[32]), v12 + 56, ~(-1 << v12[32]));
    *(_QWORD *)&v16[(v24 >> 3) & 0x1FFFFFFFFFFFFFF8] |= 1 << v24;
    result = (char *)sub_100008C38((uint64_t)v11, *((_QWORD *)v12 + 6) + v24 * v22);
    ++*((_QWORD *)v12 + 2);
    if (__OFSUB__(a3--, 1))
      break;
    if (!a3)
      goto LABEL_27;
  }
  __break(1u);
LABEL_30:
  __break(1u);
LABEL_31:
  __break(1u);
  return result;
}

Swift::Int sub_100012F50(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  Swift::Int result;
  _QWORD *v9;
  unint64_t v10;
  uint64_t v11;
  Swift::Int v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  Swift::Int v18;
  id v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  char v24;
  unint64_t v25;
  BOOL v26;
  uint64_t v27;
  unint64_t *v29;

  v4 = a4;
  if (!a3)
  {
    v9 = &_swiftEmptySetSingleton;
LABEL_36:
    swift_release(v4);
    return (Swift::Int)v9;
  }
  v5 = a3;
  if (*(_QWORD *)(a4 + 16) == a3)
    return v4;
  sub_10000527C(&qword_1000A5000);
  result = static _SetStorage.allocate(capacity:)(v5);
  v9 = (_QWORD *)result;
  v29 = a1;
  if (a2 < 1)
    v10 = 0;
  else
    v10 = *a1;
  v11 = 0;
  v12 = result + 56;
  while (1)
  {
    if (v10)
    {
      v13 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v14 = v13 | (v11 << 6);
      goto LABEL_24;
    }
    v15 = v11 + 1;
    if (__OFADD__(v11, 1))
      goto LABEL_39;
    if (v15 >= a2)
      goto LABEL_36;
    v16 = v29[v15];
    ++v11;
    if (!v16)
    {
      v11 = v15 + 1;
      if (v15 + 1 >= a2)
        goto LABEL_36;
      v16 = v29[v11];
      if (!v16)
      {
        v11 = v15 + 2;
        if (v15 + 2 >= a2)
          goto LABEL_36;
        v16 = v29[v11];
        if (!v16)
          break;
      }
    }
LABEL_23:
    v10 = (v16 - 1) & v16;
    v14 = __clz(__rbit64(v16)) + (v11 << 6);
LABEL_24:
    v18 = v9[5];
    v19 = *(id *)(*(_QWORD *)(v4 + 48) + 8 * v14);
    result = NSObject._rawHashValue(seed:)(v18);
    v20 = -1 << *((_BYTE *)v9 + 32);
    v21 = result & ~v20;
    v22 = v21 >> 6;
    if (((-1 << v21) & ~*(_QWORD *)(v12 + 8 * (v21 >> 6))) != 0)
    {
      v23 = __clz(__rbit64((-1 << v21) & ~*(_QWORD *)(v12 + 8 * (v21 >> 6)))) | v21 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v24 = 0;
      v25 = (unint64_t)(63 - v20) >> 6;
      do
      {
        if (++v22 == v25 && (v24 & 1) != 0)
        {
          __break(1u);
          goto LABEL_38;
        }
        v26 = v22 == v25;
        if (v22 == v25)
          v22 = 0;
        v24 |= v26;
        v27 = *(_QWORD *)(v12 + 8 * v22);
      }
      while (v27 == -1);
      v23 = __clz(__rbit64(~v27)) + (v22 << 6);
    }
    *(_QWORD *)(v12 + ((v23 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v23;
    *(_QWORD *)(v9[6] + 8 * v23) = v19;
    ++v9[2];
    if (__OFSUB__(v5--, 1))
    {
LABEL_38:
      __break(1u);
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }
    if (!v5)
      goto LABEL_36;
  }
  v17 = v15 + 3;
  if (v17 >= a2)
    goto LABEL_36;
  v16 = v29[v17];
  if (v16)
  {
    v11 = v17;
    goto LABEL_23;
  }
  while (1)
  {
    v11 = v17 + 1;
    if (__OFADD__(v17, 1))
      break;
    if (v11 >= a2)
      goto LABEL_36;
    v16 = v29[v11];
    ++v17;
    if (v16)
      goto LABEL_23;
  }
LABEL_40:
  __break(1u);
  return result;
}

uint64_t sub_1000131AC(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t result;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  char v32;
  unint64_t v33;
  BOOL v34;
  uint64_t v35;
  uint64_t v37;
  unint64_t *v38;
  uint64_t v39;
  uint64_t v40;

  v8 = type metadata accessor for UUID(0);
  __chkstk_darwin(v8);
  v11 = (char *)&v37 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!a3)
  {
    swift_release(a4);
    return (uint64_t)&_swiftEmptySetSingleton;
  }
  if (*(_QWORD *)(a4 + 16) == a3)
    return a4;
  v40 = v9;
  sub_10000527C(&qword_1000A5028);
  result = static _SetStorage.allocate(capacity:)(a3);
  v12 = result;
  v38 = a1;
  v39 = a2;
  if (a2 < 1)
    v14 = 0;
  else
    v14 = *a1;
  v15 = 0;
  v16 = result + 56;
  v17 = v40;
  while (1)
  {
    if (v14)
    {
      v18 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      v19 = v18 | (v15 << 6);
    }
    else
    {
      v20 = v15 + 1;
      if (__OFADD__(v15, 1))
        goto LABEL_40;
      if (v20 >= v39)
      {
LABEL_37:
        swift_release(a4);
        return v12;
      }
      v21 = v38[v20];
      ++v15;
      if (!v21)
      {
        v15 = v20 + 1;
        if (v20 + 1 >= v39)
          goto LABEL_37;
        v21 = v38[v15];
        if (!v21)
        {
          v15 = v20 + 2;
          if (v20 + 2 >= v39)
            goto LABEL_37;
          v21 = v38[v15];
          if (!v21)
          {
            v22 = v20 + 3;
            if (v22 >= v39)
              goto LABEL_37;
            v21 = v38[v22];
            if (!v21)
            {
              while (1)
              {
                v15 = v22 + 1;
                if (__OFADD__(v22, 1))
                  goto LABEL_41;
                if (v15 >= v39)
                  goto LABEL_37;
                v21 = v38[v15];
                ++v22;
                if (v21)
                  goto LABEL_24;
              }
            }
            v15 = v22;
          }
        }
      }
LABEL_24:
      v14 = (v21 - 1) & v21;
      v19 = __clz(__rbit64(v21)) + (v15 << 6);
    }
    v23 = a4;
    v24 = *(_QWORD *)(a4 + 48);
    v25 = *(_QWORD *)(v17 + 72);
    (*(void (**)(char *, unint64_t, uint64_t))(v17 + 16))(v11, v24 + v25 * v19, v8);
    v26 = *(_QWORD *)(v12 + 40);
    v27 = sub_100008C7C((unint64_t *)&qword_1000A5020, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    result = dispatch thunk of Hashable._rawHashValue(seed:)(v26, v8, v27);
    v28 = -1 << *(_BYTE *)(v12 + 32);
    v29 = result & ~v28;
    v30 = v29 >> 6;
    if (((-1 << v29) & ~*(_QWORD *)(v16 + 8 * (v29 >> 6))) != 0)
    {
      v31 = __clz(__rbit64((-1 << v29) & ~*(_QWORD *)(v16 + 8 * (v29 >> 6)))) | v29 & 0x7FFFFFFFFFFFFFC0;
      v17 = v40;
    }
    else
    {
      v32 = 0;
      v33 = (unint64_t)(63 - v28) >> 6;
      v17 = v40;
      do
      {
        if (++v30 == v33 && (v32 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }
        v34 = v30 == v33;
        if (v30 == v33)
          v30 = 0;
        v32 |= v34;
        v35 = *(_QWORD *)(v16 + 8 * v30);
      }
      while (v35 == -1);
      v31 = __clz(__rbit64(~v35)) + (v30 << 6);
    }
    *(_QWORD *)(v16 + ((v31 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v31;
    result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(v17 + 32))(*(_QWORD *)(v12 + 48) + v31 * v25, v11, v8);
    ++*(_QWORD *)(v12 + 16);
    if (__OFSUB__(a3--, 1))
      break;
    a4 = v23;
    if (!a3)
      goto LABEL_37;
  }
LABEL_39:
  __break(1u);
LABEL_40:
  __break(1u);
LABEL_41:
  __break(1u);
  return result;
}

uint64_t sub_1000134AC(unint64_t a1)
{
  uint64_t *v1;
  int *v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  BOOL v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD v39[9];

  v3 = (int *)type metadata accessor for WidgetTileInfo(0);
  v4 = *((_QWORD *)v3 - 1);
  __chkstk_darwin(v3);
  v6 = (char *)&v34 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v35 = v1;
  result = *v1;
  v8 = *v1 + 56;
  v9 = -1 << *(_BYTE *)(result + 32);
  v10 = (a1 + 1) & ~v9;
  if (((1 << v10) & *(_QWORD *)(v8 + 8 * (v10 >> 6))) != 0)
  {
    v11 = ~v9;
    v37 = result;
    swift_retain(result);
    _HashTable.previousHole(before:)(a1, v8, v11);
    if ((*(_QWORD *)(v8 + 8 * (v10 >> 6)) & (1 << v10)) != 0)
    {
      v12 = *(_QWORD *)(v4 + 72);
      v13 = v37;
      v36 = v8;
      v38 = v12;
      sub_100008BB8(*(_QWORD *)(v37 + 48) + v12 * v10, (uint64_t)v6);
      Hasher.init(_seed:)(v39, *(_QWORD *)(v13 + 40));
      v14 = type metadata accessor for UUID(0);
      v15 = sub_100008C7C((unint64_t *)&qword_1000A5020, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      dispatch thunk of Hashable.hash(into:)(v39, v14, v15);
      v16 = &v6[v3[6]];
      v17 = *(_QWORD *)v16;
      v18 = *((_QWORD *)v16 + 1);
      swift_bridgeObjectRetain(v18);
      String.hash(into:)(v39, v17, v18);
      swift_bridgeObjectRelease(v18);
      v19 = &v6[v3[7]];
      v20 = *((_QWORD *)v19 + 1);
      if (v20)
      {
        v21 = *(_QWORD *)v19;
        Hasher._combine(_:)(1u);
        swift_bridgeObjectRetain(v20);
        String.hash(into:)(v39, v21, v20);
        swift_bridgeObjectRelease(v20);
      }
      else
      {
        Hasher._combine(_:)(0);
      }
      v22 = &v6[v3[8]];
      v23 = *(_QWORD *)v22;
      v24 = *((_QWORD *)v22 + 1);
      swift_bridgeObjectRetain(v24);
      String.hash(into:)(v39, v23, v24);
      swift_bridgeObjectRelease(v24);
      v25 = &v6[v3[9]];
      v26 = *(_QWORD *)v25;
      v27 = *((_QWORD *)v25 + 1);
      swift_bridgeObjectRetain(v27);
      String.hash(into:)(v39, v26, v27);
      swift_bridgeObjectRelease(v27);
      v28 = *(_QWORD *)&v6[v3[12]];
      swift_retain(v28);
      Color.hash(into:)(v39, v28);
      swift_release(v28);
      Hasher._combine(_:)(v6[v3[13]]);
      __asm { BR              X9 }
    }
    v29 = v37;
    *(_QWORD *)(v8 + ((a1 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << a1) - 1;
    result = swift_release(v29);
  }
  else
  {
    *(_QWORD *)(v8 + ((a1 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << a1) - 1;
  }
  v30 = *v35;
  v31 = *(_QWORD *)(*v35 + 16);
  v32 = __OFSUB__(v31, 1);
  v33 = v31 - 1;
  if (v32)
  {
    __break(1u);
    JUMPOUT(0x10001389CLL);
  }
  *(_QWORD *)(v30 + 16) = v33;
  ++*(_DWORD *)(v30 + 36);
  return result;
}

uint64_t sub_1000138AC(int64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  int64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v22;
  int64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t *v30;
  void (*v31)(char *, unint64_t, uint64_t);
  uint64_t v32;
  uint64_t v33;

  v3 = type metadata accessor for UUID(0);
  v33 = *(_QWORD *)(v3 - 8);
  result = __chkstk_darwin(v3);
  v6 = (char *)&v30 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *v1;
  v8 = *v1 + 56;
  v9 = -1 << *(_BYTE *)(*v1 + 32);
  v10 = (a1 + 1) & ~v9;
  if (((1 << v10) & *(_QWORD *)(v8 + 8 * (v10 >> 6))) != 0)
  {
    v30 = v1;
    v11 = ~v9;
    swift_retain(v7);
    v12 = _HashTable.previousHole(before:)(a1, v8, v11);
    v32 = v8;
    if ((*(_QWORD *)(v8 + 8 * (v10 >> 6)) & (1 << v10)) != 0)
    {
      v13 = (v12 + 1) & v11;
      v14 = *(_QWORD *)(v33 + 72);
      v31 = *(void (**)(char *, unint64_t, uint64_t))(v33 + 16);
      do
      {
        v15 = v14 * v10;
        v31(v6, *(_QWORD *)(v7 + 48) + v14 * v10, v3);
        v16 = *(_QWORD *)(v7 + 40);
        v17 = sub_100008C7C((unint64_t *)&qword_1000A5020, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
        v18 = dispatch thunk of Hashable._rawHashValue(seed:)(v16, v3, v17);
        (*(void (**)(char *, uint64_t))(v33 + 8))(v6, v3);
        v19 = v18 & v11;
        if (a1 >= (uint64_t)v13)
        {
          if (v19 < v13 || a1 < (uint64_t)v19)
            goto LABEL_6;
        }
        else if (v19 < v13 && a1 < (uint64_t)v19)
        {
          goto LABEL_6;
        }
        v22 = *(_QWORD *)(v7 + 48);
        v23 = v14 * a1;
        v24 = v22 + v14 * a1;
        v25 = v22 + v15;
        if (v14 * a1 < v15 || v24 >= v25 + v14)
        {
          swift_arrayInitWithTakeFrontToBack(v24, v25, 1, v3);
        }
        else
        {
          a1 = v10;
          if (v23 == v15)
            goto LABEL_6;
          swift_arrayInitWithTakeBackToFront(v24);
        }
        a1 = v10;
LABEL_6:
        v10 = (v10 + 1) & v11;
      }
      while (((*(_QWORD *)(v32 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) != 0);
    }
    *(_QWORD *)(v32 + (((unint64_t)a1 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << a1) - 1;
    result = swift_release(v7);
    v1 = v30;
  }
  else
  {
    *(_QWORD *)(v8 + (((unint64_t)a1 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << a1) - 1;
  }
  v26 = *v1;
  v27 = *(_QWORD *)(*v1 + 16);
  v28 = __OFSUB__(v27, 1);
  v29 = v27 - 1;
  if (v28)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(v26 + 16) = v29;
    ++*(_DWORD *)(v26 + 36);
  }
  return result;
}

Swift::Int sub_100013B28(uint64_t isStackAllocationSafe)
{
  uint64_t v1;
  uint64_t v2;
  char v3;
  unsigned int v4;
  unint64_t v5;
  uint64_t v6;
  size_t v7;
  Swift::Int v8;
  uint64_t v9;
  void *v10;
  uint64_t v12;

  v2 = isStackAllocationSafe;
  v3 = *(_BYTE *)(isStackAllocationSafe + 32);
  v4 = v3 & 0x3F;
  v5 = (1 << v3) + 63;
  v6 = v5 >> 6;
  v7 = 8 * (v5 >> 6);
  if (v4 <= 0xD
    || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(8 * (v5 >> 6), 8), (isStackAllocationSafe & 1) != 0))
  {
    __chkstk_darwin(isStackAllocationSafe);
    bzero((char *)&v12 - ((v7 + 15) & 0x3FFFFFFFFFFFFFF0), v7);
    v8 = sub_100013C84((Swift::Int)&v12 - ((v7 + 15) & 0x3FFFFFFFFFFFFFF0), v6, v2);
    v9 = swift_release(v2);
    if (v1)
      swift_willThrow(v9);
  }
  else
  {
    v10 = (void *)swift_slowAlloc(v7, -1);
    bzero(v10, v7);
    v8 = sub_100013C84((Swift::Int)v10, v6, v2);
    swift_release(v2);
    swift_slowDealloc(v10, -1, -1);
  }
  return v8;
}

Swift::Int sub_100013C84(Swift::Int result, uint64_t a2, uint64_t a3)
{
  unint64_t *v4;
  uint64_t v5;
  int64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  int64_t v11;
  unint64_t v12;
  unint64_t v13;
  int64_t v14;
  unint64_t v15;
  int64_t v16;

  v4 = (unint64_t *)result;
  v5 = 0;
  v6 = 0;
  v7 = a3 + 56;
  v8 = 1 << *(_BYTE *)(a3 + 32);
  v9 = -1;
  if (v8 < 64)
    v9 = ~(-1 << v8);
  v10 = v9 & *(_QWORD *)(a3 + 56);
  v11 = (unint64_t)(v8 + 63) >> 6;
  while (1)
  {
    if (v10)
    {
      v12 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v13 = v12 | (v6 << 6);
      goto LABEL_5;
    }
    v14 = v6 + 1;
    if (__OFADD__(v6, 1))
    {
      __break(1u);
      goto LABEL_26;
    }
    if (v14 >= v11)
      goto LABEL_24;
    v15 = *(_QWORD *)(v7 + 8 * v14);
    ++v6;
    if (!v15)
    {
      v6 = v14 + 1;
      if (v14 + 1 >= v11)
        goto LABEL_24;
      v15 = *(_QWORD *)(v7 + 8 * v6);
      if (!v15)
      {
        v6 = v14 + 2;
        if (v14 + 2 >= v11)
          goto LABEL_24;
        v15 = *(_QWORD *)(v7 + 8 * v6);
        if (!v15)
          break;
      }
    }
LABEL_20:
    v10 = (v15 - 1) & v15;
    v13 = __clz(__rbit64(v15)) + (v6 << 6);
LABEL_5:
    result = (Swift::Int)objc_msgSend(*(id *)(*(_QWORD *)(a3 + 48) + 8 * v13), "hf_isSensorService");
    if ((result & 1) == 0)
    {
      *(unint64_t *)((char *)v4 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v13;
      if (__OFADD__(v5++, 1))
      {
        __break(1u);
LABEL_24:
        swift_retain(a3);
        return sub_100012F50(v4, a2, v5, a3);
      }
    }
  }
  v16 = v14 + 3;
  if (v16 >= v11)
    goto LABEL_24;
  v15 = *(_QWORD *)(v7 + 8 * v16);
  if (v15)
  {
    v6 = v16;
    goto LABEL_20;
  }
  while (1)
  {
    v6 = v16 + 1;
    if (__OFADD__(v16, 1))
      break;
    if (v6 >= v11)
      goto LABEL_24;
    v15 = *(_QWORD *)(v7 + 8 * v6);
    ++v16;
    if (v15)
      goto LABEL_20;
  }
LABEL_26:
  __break(1u);
  return result;
}

uint64_t sub_100013E1C(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;

  v1 = *(_QWORD *)(a1 + 56);
  if (v1)
  {
    v2 = 0;
    return __clz(__rbit64(v1)) + v2;
  }
  v5 = *(_BYTE *)(a1 + 32);
  v6 = v5 & 0x3F;
  v3 = 1 << v5;
  if (v6 < 7)
    return v3;
  v1 = *(_QWORD *)(a1 + 64);
  if (v1)
  {
    v2 = 64;
    return __clz(__rbit64(v1)) + v2;
  }
  if (v6 < 8)
    return v3;
  v1 = *(_QWORD *)(a1 + 72);
  if (v1)
  {
    v2 = 128;
    return __clz(__rbit64(v1)) + v2;
  }
  v7 = (unint64_t)(v3 + 63) >> 6;
  if (v7 <= 3)
    v7 = 3;
  v8 = v7 - 3;
  v9 = (unint64_t *)(a1 + 80);
  v2 = 128;
  while (v8)
  {
    v10 = *v9++;
    v1 = v10;
    --v8;
    v2 += 64;
    if (v10)
      return __clz(__rbit64(v1)) + v2;
  }
  return v3;
}

int64_t sub_100013EBC(int64_t result, int a2, char a3, uint64_t a4)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;

  if ((a3 & 1) != 0)
    goto LABEL_20;
  v4 = result;
  if (result < 0 || (result = 1 << *(_BYTE *)(a4 + 32), result <= (uint64_t)v4))
  {
    __break(1u);
    goto LABEL_18;
  }
  v5 = v4 >> 6;
  v6 = a4 + 56;
  v7 = *(_QWORD *)(a4 + 56 + 8 * (v4 >> 6));
  if (((v7 >> v4) & 1) == 0)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  if (*(_DWORD *)(a4 + 36) != a2)
  {
LABEL_19:
    __break(1u);
LABEL_20:
    __break(1u);
    return result;
  }
  v8 = v7 & (-2 << (v4 & 0x3F));
  if (v8)
    return __clz(__rbit64(v8)) | v4 & 0xFFFFFFFFFFFFFFC0;
  v9 = v5 + 1;
  v10 = (unint64_t)(result + 63) >> 6;
  if (v5 + 1 < v10)
  {
    v11 = *(_QWORD *)(v6 + 8 * v9);
    if (v11)
      return __clz(__rbit64(v11)) + (v9 << 6);
    v9 = v5 + 2;
    if (v5 + 2 < v10)
    {
      v11 = *(_QWORD *)(v6 + 8 * v9);
      if (v11)
        return __clz(__rbit64(v11)) + (v9 << 6);
      while (v10 - 3 != v5)
      {
        v11 = *(_QWORD *)(a4 + 80 + 8 * v5++);
        if (v11)
        {
          v9 = v5 + 2;
          return __clz(__rbit64(v11)) + (v9 << 6);
        }
      }
    }
  }
  return result;
}

void sub_100013FA0(uint64_t a1, uint64_t a2, char a3, uint64_t a4)
{
  void *v4;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  Swift::Int v13;
  uint64_t v14;
  id v15;
  char v16;
  uint64_t v17;
  id v18;
  char v19;
  id v20;
  uint64_t v21;
  void *v22;

  v7 = a1;
  if ((a4 & 0xC000000000000001) == 0)
  {
    if ((a3 & 1) != 0)
      goto LABEL_13;
    if (a1 < 0 || 1 << *(_BYTE *)(a4 + 32) <= a1)
    {
      __break(1u);
    }
    else if (((*(_QWORD *)(a4 + (((unint64_t)a1 >> 3) & 0xFFFFFFFFFFFFF8) + 56) >> a1) & 1) != 0)
    {
      if (*(_DWORD *)(a4 + 36) == (_DWORD)a2)
        goto LABEL_20;
      __break(1u);
LABEL_13:
      if (__CocoaSet.Index.age.getter(a1, a2) == *(_DWORD *)(a4 + 36))
      {
        v11 = __CocoaSet.Index.element.getter(v7, a2);
        v21 = v11;
        v12 = sub_100008CBC(0, &qword_1000A5078, HMService_ptr);
        swift_unknownObjectRetain(v11);
        swift_dynamicCast(&v22, &v21, (char *)&type metadata for Swift.AnyObject + 8, v12, 7);
        v4 = v22;
        swift_unknownObjectRelease(v11);
        v13 = NSObject._rawHashValue(seed:)(*(_QWORD *)(a4 + 40));
        v14 = -1 << *(_BYTE *)(a4 + 32);
        v7 = v13 & ~v14;
        if (((*(_QWORD *)(a4 + 56 + ((v7 >> 3) & 0xFFFFFFFFFFFFF8)) >> v7) & 1) != 0)
        {
          v15 = *(id *)(*(_QWORD *)(a4 + 48) + 8 * v7);
          v16 = static NSObject.== infix(_:_:)(v15, v4);

          if ((v16 & 1) == 0)
          {
            v17 = ~v14;
            do
            {
              v7 = (v7 + 1) & v17;
              if (((*(_QWORD *)(a4 + 56 + ((v7 >> 3) & 0xFFFFFFFFFFFFF8)) >> v7) & 1) == 0)
                goto LABEL_24;
              v18 = *(id *)(*(_QWORD *)(a4 + 48) + 8 * v7);
              v19 = static NSObject.== infix(_:_:)(v18, v4);

            }
            while ((v19 & 1) == 0);
          }

LABEL_20:
          v20 = *(id *)(*(_QWORD *)(a4 + 48) + 8 * v7);
          return;
        }
LABEL_24:

        __break(1u);
        goto LABEL_25;
      }
LABEL_23:
      __break(1u);
      goto LABEL_24;
    }
    __break(1u);
    goto LABEL_23;
  }
  if ((a3 & 1) == 0)
  {
LABEL_25:
    __break(1u);
    return;
  }
  if (a4 < 0)
    v8 = a4;
  else
    v8 = a4 & 0xFFFFFFFFFFFFFF8;
  v9 = __CocoaSet.element(at:)(a1, a2, v8);
  v21 = v9;
  v10 = sub_100008CBC(0, &qword_1000A5078, HMService_ptr);
  swift_unknownObjectRetain(v9);
  swift_dynamicCast(&v22, &v21, (char *)&type metadata for Swift.AnyObject + 8, v10, 7);
  swift_unknownObjectRelease(v9);
}

uint64_t sub_100014208(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;

  v1 = *(_QWORD *)(a1 + 56);
  if (v1)
  {
    v2 = 0;
    return __clz(__rbit64(v1)) + v2;
  }
  v5 = *(_BYTE *)(a1 + 32);
  v6 = v5 & 0x3F;
  v3 = 1 << v5;
  if (v6 < 7)
    return v3;
  v1 = *(_QWORD *)(a1 + 64);
  if (v1)
  {
    v2 = 64;
    return __clz(__rbit64(v1)) + v2;
  }
  v7 = (unint64_t)(v3 + 63) >> 6;
  if (v7 <= 2)
    v7 = 2;
  v8 = v7 - 2;
  v9 = (unint64_t *)(a1 + 72);
  v2 = 64;
  while (v8)
  {
    v10 = *v9++;
    v1 = v10;
    --v8;
    v2 += 64;
    if (v10)
      return __clz(__rbit64(v1)) + v2;
  }
  return v3;
}

uint64_t sub_100014290(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v2 = type metadata accessor for WidgetTileInfo(0);
  v3 = __chkstk_darwin(v2);
  v5 = (char *)&v13 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = __chkstk_darwin(v3);
  v9 = (char *)&v13 - v8;
  v10 = *(_QWORD *)(a1 + 16);
  if (v10)
  {
    v11 = a1 + ((*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80));
    v12 = *(_QWORD *)(v7 + 72);
    do
    {
      sub_100008BB8(v11, (uint64_t)v5);
      sub_100006974((uint64_t)v9, (uint64_t)v5);
      result = sub_100008BFC((uint64_t)v9);
      v11 += v12;
      --v10;
    }
    while (v10);
  }
  return result;
}

_QWORD *sub_100014358(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  void (*v14)(char *, uint64_t, uint64_t, uint64_t);
  id v15;
  BOOL v16;
  unint64_t v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  void (*v21)(char *, uint64_t, uint64_t);
  char *v22;
  uint64_t v23;
  char v24;
  void (*v25)(char *, uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  id v38;
  unint64_t v39;
  char *v40;
  uint64_t v41;
  void (*v42)(char *, uint64_t, uint64_t);
  char *v43;
  _QWORD *v44;

  v4 = sub_10000527C(&qword_1000A5060);
  __chkstk_darwin(v4);
  v6 = (char *)&v31 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for UUID(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = __chkstk_darwin(v7);
  v40 = (char *)&v31 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v43 = (char *)&v31 - v11;
  v44 = _swiftEmptyArrayStorage;
  if ((unint64_t)a1 >> 62)
    goto LABEL_23;
  v12 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (v12)
  {
    while (1)
    {
      v13 = 0;
      v36 = a1 & 0xFFFFFFFFFFFFFF8;
      v37 = a1 & 0xC000000000000001;
      v32 = a1 + 32;
      v33 = v12;
      v34 = a1;
      v35 = a2;
      while (v37)
      {
        v15 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v13, a1);
        v16 = __OFADD__(v13, 1);
        v17 = v13 + 1;
        if (v16)
        {
LABEL_20:
          __break(1u);
          return v44;
        }
LABEL_11:
        v38 = v15;
        v39 = v17;
        v18 = objc_msgSend(v15, "uniqueIdentifier");
        static UUID._unconditionallyBridgeFromObjectiveC(_:)(v18);

        v19 = *(_QWORD *)(a2 + 16);
        if (v19)
        {
          v20 = a2 + ((*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80));
          swift_bridgeObjectRetain(a2);
          v21 = *(void (**)(char *, uint64_t, uint64_t))(v8 + 16);
          v41 = *(_QWORD *)(v8 + 72);
          v42 = v21;
          while (1)
          {
            v42(v6, v20, v7);
            v14 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v8 + 56);
            v14(v6, 0, 1, v7);
            if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7) == 1)
              break;
            v22 = v40;
            (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v40, v6, v7);
            v23 = sub_100008C7C((unint64_t *)&unk_1000A7670, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
            v24 = dispatch thunk of static Equatable.== infix(_:_:)(v22, v43, v7, v23);
            v25 = *(void (**)(char *, uint64_t))(v8 + 8);
            v25(v22, v7);
            if ((v24 & 1) != 0)
            {
              a2 = v35;
              swift_bridgeObjectRelease(v35);
              v26 = ((uint64_t (*)(char *, uint64_t))v25)(v43, v7);
              specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v26);
              v27 = v44[2];
              specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v27);
              v28 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v27, v38);
              specialized ContiguousArray._endMutation()(v28);
              goto LABEL_7;
            }
            v20 += v41;
            if (!--v19)
              goto LABEL_5;
          }
        }
        else
        {
          swift_bridgeObjectRetain(a2);
          v14 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v8 + 56);
LABEL_5:
          v14(v6, 1, 1, v7);
        }
        a2 = v35;
        swift_bridgeObjectRelease(v35);
        (*(void (**)(char *, uint64_t))(v8 + 8))(v43, v7);

LABEL_7:
        a1 = v34;
        v13 = v39;
        if (v39 == v33)
          return v44;
      }
      if (v13 < *(_QWORD *)(v36 + 16))
        break;
      __break(1u);
LABEL_23:
      if (a1 < 0)
        v30 = a1;
      else
        v30 = a1 & 0xFFFFFFFFFFFFFF8;
      v12 = _CocoaArrayWrapper.endIndex.getter(v30);
      if (!v12)
        return _swiftEmptyArrayStorage;
    }
    v15 = *(id *)(v32 + 8 * v13);
    v16 = __OFADD__(v13, 1);
    v17 = v13 + 1;
    if (v16)
      goto LABEL_20;
    goto LABEL_11;
  }
  return _swiftEmptyArrayStorage;
}

uint64_t sub_100014698(uint64_t a1, uint64_t a2)
{
  if ((*(_BYTE *)(*(_QWORD *)(a1 - 8) + 82) & 2) != 0)
    return *(_QWORD *)a2;
  return a2;
}

void sub_1000146B0(uint64_t a1, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  id v22;
  uint64_t v23;
  id v24;
  char *v25;
  id v26;
  char *v27;
  uint64_t v28;
  void (*v29)(char *, uint64_t);
  char *v30;
  uint64_t v31;
  int64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD v38[2];
  char *v39;
  uint64_t v40;
  int64_t v41;
  uint64_t v42;
  char *v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  id v47;
  unint64_t v48;
  uint64_t v49;
  _QWORD v50[5];
  void *v51;

  v47 = a2;
  v3 = type metadata accessor for UUID(0);
  v45 = *(_QWORD *)(v3 - 8);
  v46 = v3;
  v4 = __chkstk_darwin(v3);
  v44 = (char *)v38 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v43 = (char *)v38 - v6;
  if ((a1 & 0xC000000000000001) != 0)
  {
    if (a1 < 0)
      v7 = a1;
    else
      v7 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v8 = __CocoaSet.makeIterator()(v7);
    v9 = sub_100008CBC(0, &qword_1000A5078, HMService_ptr);
    v10 = sub_100014E30(&qword_1000A5098, &qword_1000A5078, HMService_ptr);
    v11 = Set.Iterator.init(_cocoa:)(v50, v8, v9, v10);
    a1 = v50[0];
    v42 = v50[1];
    v12 = v50[2];
    v13 = v50[3];
    v14 = v50[4];
  }
  else
  {
    v15 = -1 << *(_BYTE *)(a1 + 32);
    v16 = *(_QWORD *)(a1 + 56);
    v42 = a1 + 56;
    v12 = ~v15;
    v17 = -v15;
    if (v17 < 64)
      v18 = ~(-1 << v17);
    else
      v18 = -1;
    v14 = v18 & v16;
    v11 = (_QWORD *)swift_bridgeObjectRetain(a1);
    v13 = 0;
  }
  v38[1] = v12;
  v40 = a1 & 0x7FFFFFFFFFFFFFFFLL;
  v41 = (unint64_t)(v12 + 64) >> 6;
  v39 = (char *)&type metadata for Swift.AnyObject + 8;
  while (a1 < 0)
  {
    v35 = __CocoaSet.Iterator.next()(v11);
    v36 = v35;
    if (!v35)
      goto LABEL_34;
    v49 = v35;
    v37 = sub_100008CBC(0, &qword_1000A5078, HMService_ptr);
    swift_unknownObjectRetain(v36);
    swift_dynamicCast(&v51, &v49, v39, v37, 7);
    v22 = v51;
    swift_unknownObjectRelease(v36);
    v21 = v13;
    if (!v22)
      goto LABEL_34;
LABEL_13:
    v48 = v14;
    v23 = v21;
    v24 = objc_msgSend(v22, "uniqueIdentifier");
    v25 = v43;
    static UUID._unconditionallyBridgeFromObjectiveC(_:)(v24);

    v26 = objc_msgSend(v47, "uniqueIdentifier");
    v27 = v44;
    static UUID._unconditionallyBridgeFromObjectiveC(_:)(v26);

    LOBYTE(v26) = static UUID.== infix(_:_:)(v25, v27);
    v28 = a1;
    v29 = *(void (**)(char *, uint64_t))(v45 + 8);
    v30 = v27;
    v31 = v46;
    v29(v30, v46);
    v29(v25, v31);
    a1 = v28;
    v13 = v23;
    v14 = v48;

    if ((v26 & 1) != 0)
      goto LABEL_34;
  }
  if (v14)
  {
    v19 = __clz(__rbit64(v14));
    v14 &= v14 - 1;
    v20 = v19 | (v13 << 6);
    v21 = v13;
LABEL_12:
    v22 = *(id *)(*(_QWORD *)(a1 + 48) + 8 * v20);
    if (!v22)
      goto LABEL_34;
    goto LABEL_13;
  }
  v32 = v13 + 1;
  if (!__OFADD__(v13, 1))
  {
    if (v32 >= v41)
      goto LABEL_34;
    v33 = *(_QWORD *)(v42 + 8 * v32);
    v21 = v13 + 1;
    if (!v33)
    {
      v21 = v13 + 2;
      if (v13 + 2 >= v41)
        goto LABEL_34;
      v33 = *(_QWORD *)(v42 + 8 * v21);
      if (!v33)
      {
        v21 = v13 + 3;
        if (v13 + 3 >= v41)
          goto LABEL_34;
        v33 = *(_QWORD *)(v42 + 8 * v21);
        if (!v33)
        {
          v21 = v13 + 4;
          if (v13 + 4 >= v41)
            goto LABEL_34;
          v33 = *(_QWORD *)(v42 + 8 * v21);
          if (!v33)
          {
            v21 = v13 + 5;
            if (v13 + 5 >= v41)
              goto LABEL_34;
            v33 = *(_QWORD *)(v42 + 8 * v21);
            if (!v33)
            {
              v34 = v13 + 6;
              while (v41 != v34)
              {
                v33 = *(_QWORD *)(v42 + 8 * v34++);
                if (v33)
                {
                  v21 = v34 - 1;
                  goto LABEL_31;
                }
              }
LABEL_34:
              sub_100014DC4(a1);
              return;
            }
          }
        }
      }
    }
LABEL_31:
    v14 = (v33 - 1) & v33;
    v20 = __clz(__rbit64(v33)) + (v21 << 6);
    goto LABEL_12;
  }
  __break(1u);
}

_QWORD *sub_100014AAC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  _QWORD *result;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  char v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  _QWORD v28[2];
  char *v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;

  v5 = type metadata accessor for WidgetTileInfo(0);
  v6 = __chkstk_darwin(v5);
  v32 = (uint64_t)v28 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __chkstk_darwin(v6);
  v10 = (char *)v28 - v9;
  v11 = __chkstk_darwin(v8);
  v13 = (char *)v28 - v12;
  __chkstk_darwin(v11);
  v16 = (char *)v28 - v15;
  result = _swiftEmptyArrayStorage;
  v33 = _swiftEmptyArrayStorage;
  v18 = *(_QWORD *)(a1 + 16);
  if (v18)
  {
    v28[1] = v2;
    v19 = *(_QWORD *)(v14 + 72);
    v30 = (*(unsigned __int8 *)(v14 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80);
    v20 = a1 + v30;
    v21 = v19;
    v22 = _swiftEmptyArrayStorage;
    v31 = a2;
    v29 = v10;
    do
    {
      sub_100008BB8(v20, (uint64_t)v16);
      sub_100008BB8((uint64_t)v16, (uint64_t)v10);
      v23 = sub_100006974((uint64_t)v13, (uint64_t)v10);
      sub_100008BFC((uint64_t)v13);
      if ((v23 & 1) != 0)
      {
        v24 = v21;
        sub_100008C38((uint64_t)v16, v32);
        if ((swift_isUniquelyReferenced_nonNull_native(v22) & 1) == 0)
          sub_10002D82C(0, v22[2] + 1, 1);
        v22 = v33;
        v26 = v33[2];
        v25 = v33[3];
        if (v26 >= v25 >> 1)
        {
          sub_10002D82C(v25 > 1, v26 + 1, 1);
          v22 = v33;
        }
        v22[2] = v26 + 1;
        v27 = (uint64_t)v22 + v30 + v26 * v24;
        v21 = v24;
        sub_100008C38(v32, v27);
        v10 = v29;
      }
      else
      {
        sub_100008BFC((uint64_t)v16);
      }
      v20 += v21;
      --v18;
    }
    while (v18);
    return v33;
  }
  return result;
}

uint64_t sub_100014CB0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t (*v10)(uint64_t);
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v2 = type metadata accessor for WidgetTileInfo(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = __chkstk_darwin(v2);
  v6 = (char *)&v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v8 = (char *)&v15 - v7;
  v9 = *(_QWORD *)(a1 + 16);
  v11 = sub_100008C7C(&qword_1000A5088, v10, (uint64_t)&unk_100086DF0);
  result = Set.init(minimumCapacity:)(v9, v2, v11);
  v16 = result;
  if (v9)
  {
    v13 = a1 + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
    v14 = *(_QWORD *)(v3 + 72);
    do
    {
      sub_100008BB8(v13, (uint64_t)v6);
      sub_100006974((uint64_t)v8, (uint64_t)v6);
      sub_100008BFC((uint64_t)v8);
      v13 += v14;
      --v9;
    }
    while (v9);
    return v16;
  }
  return result;
}

uint64_t sub_100014DB8(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t result;

  if ((a3 & 1) != 0)
    return swift_bridgeObjectRelease();
  return result;
}

uint64_t sub_100014DC4(uint64_t a1)
{
  return swift_release(a1 & 0x7FFFFFFFFFFFFFFFLL);
}

uint64_t sub_100014DCC(uint64_t a1)
{
  uint64_t v1;

  return sub_10000DD00(a1, *(void **)(v1 + 16)) & 1;
}

uint64_t sub_100014DE8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10000527C(&qword_1000A5060);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_100014E30(unint64_t *a1, unint64_t *a2, _QWORD *a3)
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    v5 = sub_100008CBC(255, a2, a3);
    result = swift_getWitnessTable(&protocol conformance descriptor for NSObject, v5);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100014E70(uint64_t a1)
{
  return sub_100014E88(a1) & 1;
}

uint64_t sub_100014E88(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *(_QWORD *)(v1 + 16);
  v4 = type metadata accessor for UUID(0);
  v5 = sub_100008C7C((unint64_t *)&unk_1000A7670, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
  return dispatch thunk of static Equatable.== infix(_:_:)(a1, v3, v4, v5) & 1;
}

uint64_t sub_100014EFC(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;

  v3 = sub_10000527C(a2);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

id sub_100014F38(id result, char a2)
{
  if (a2 != -1)
    return result;
  return result;
}

uint64_t sub_100014F4C(uint64_t a1)
{
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t i;
  void *v10;
  void **v11;
  void *v12;
  uint64_t v13;
  id v14;
  uint64_t v15;

  v2 = (unint64_t)a1 >> 62;
  if ((unint64_t)a1 >> 62)
  {
    if (a1 < 0)
      v13 = a1;
    else
      v13 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v3 = _CocoaArrayWrapper.endIndex.getter(v13);
    swift_bridgeObjectRelease(a1);
  }
  else
  {
    v3 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  v4 = sub_100008CBC(0, &qword_1000A5030, HMAccessory_ptr);
  v5 = sub_100014E30((unint64_t *)&qword_1000A50D0, &qword_1000A5030, HMAccessory_ptr);
  result = Set.init(minimumCapacity:)(v3, v4, v5);
  v15 = result;
  if (v2)
  {
    if (a1 < 0)
      v8 = a1;
    else
      v8 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v7 = _CocoaArrayWrapper.endIndex.getter(v8);
    result = swift_bridgeObjectRelease(a1);
    if (!v7)
      return v15;
  }
  else
  {
    v7 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (!v7)
      return v15;
  }
  if (v7 >= 1)
  {
    if ((a1 & 0xC000000000000001) != 0)
    {
      for (i = 0; i != v7; ++i)
      {
        v10 = (void *)specialized _ArrayBuffer._getElementSlowPath(_:)(i, a1);
        sub_100006B40((Swift::Int *)&v14, v10);

      }
    }
    else
    {
      v11 = (void **)(a1 + 32);
      do
      {
        v12 = *v11++;
        sub_100006B40((Swift::Int *)&v14, v12);

        --v7;
      }
      while (v7);
    }
    return v15;
  }
  __break(1u);
  return result;
}

uint64_t sub_1000150C4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(char *, uint64_t, uint64_t);
  void (*v16)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v18;
  uint64_t v19;

  v2 = type metadata accessor for UUID(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = __chkstk_darwin(v2);
  v6 = (char *)&v18 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v8 = (char *)&v18 - v7;
  v9 = sub_10000527C(&qword_1000A5060);
  __chkstk_darwin(v9);
  v11 = (char *)&v18 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = *(_QWORD *)(a1 + 16);
  v13 = sub_100008C7C((unint64_t *)&qword_1000A5020, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
  v19 = Set.init(minimumCapacity:)(v12, v2, v13);
  if (v12)
  {
    v14 = a1 + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
    v18 = *(_QWORD *)(v3 + 72);
    v15 = *(void (**)(char *, uint64_t, uint64_t))(v3 + 16);
    while (1)
    {
      v15(v11, v14, v2);
      v16 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v3 + 56);
      v16(v11, 0, 1, v2);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v3 + 48))(v11, 1, v2) == 1)
        break;
      (*(void (**)(char *, char *, uint64_t))(v3 + 32))(v6, v11, v2);
      sub_100006E58((uint64_t)v8, v6);
      (*(void (**)(char *, uint64_t))(v3 + 8))(v8, v2);
      v14 += v18;
      if (!--v12)
        goto LABEL_7;
    }
  }
  else
  {
    v16 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v3 + 56);
LABEL_7:
    v16(v11, 1, 1, v2);
  }
  return v19;
}

char *sub_100015294(char *a1, char *a2, int *a3)
{
  int v5;
  uint64_t v7;
  void (*v8)(char *, char *, uint64_t);
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  void (*v28)(char *, char *, uint64_t);
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  char *v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  char *v40;
  char *v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  id v48;
  uint64_t v49;
  char *v51;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v49 = *(_QWORD *)a2;
    *(_QWORD *)a1 = *(_QWORD *)a2;
    a1 = (char *)(v49 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = type metadata accessor for UUID(0);
    v8 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 16);
    v8(a1, a2, v7);
    v8(&a1[a3[5]], &a2[a3[5]], v7);
    v9 = a3[6];
    v10 = a3[7];
    v11 = &a1[v9];
    v12 = &a2[v9];
    v13 = *((_QWORD *)v12 + 1);
    *(_QWORD *)v11 = *(_QWORD *)v12;
    *((_QWORD *)v11 + 1) = v13;
    v14 = &a1[v10];
    v15 = &a2[v10];
    v16 = *((_QWORD *)v15 + 1);
    *(_QWORD *)v14 = *(_QWORD *)v15;
    *((_QWORD *)v14 + 1) = v16;
    v17 = a3[8];
    v18 = a3[9];
    v19 = &a1[v17];
    v20 = &a2[v17];
    v21 = *((_QWORD *)v20 + 1);
    *(_QWORD *)v19 = *(_QWORD *)v20;
    *((_QWORD *)v19 + 1) = v21;
    v22 = &a1[v18];
    v23 = &a2[v18];
    v24 = *((_QWORD *)v23 + 1);
    *(_QWORD *)v22 = *(_QWORD *)v23;
    *((_QWORD *)v22 + 1) = v24;
    v25 = a3[10];
    v51 = &a1[v25];
    v26 = &a2[v25];
    v27 = type metadata accessor for StaticRenderingMode(0);
    v28 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v27 - 8) + 16);
    swift_bridgeObjectRetain(v13);
    swift_bridgeObjectRetain(v16);
    swift_bridgeObjectRetain(v21);
    swift_bridgeObjectRetain(v24);
    v28(v51, v26, v27);
    v28(&a1[a3[11]], &a2[a3[11]], v27);
    v29 = a3[13];
    *(_QWORD *)&a1[a3[12]] = *(_QWORD *)&a2[a3[12]];
    a1[v29] = a2[v29];
    v30 = a3[14];
    v31 = a3[15];
    v32 = &a1[v30];
    v33 = &a2[v30];
    v34 = *(void **)v33;
    LOBYTE(v33) = v33[8];
    *(_QWORD *)v32 = v34;
    v32[8] = (char)v33;
    v35 = *(_QWORD *)&a2[v31];
    *(_QWORD *)&a1[v31] = v35;
    v36 = a3[17];
    a1[a3[16]] = a2[a3[16]];
    a1[v36] = a2[v36];
    v37 = a3[18];
    v38 = a3[19];
    v39 = &a1[v37];
    v40 = &a2[v37];
    *(_QWORD *)v39 = *(_QWORD *)v40;
    v39[8] = v40[8];
    v41 = &a1[v38];
    v42 = &a2[v38];
    v43 = *((_QWORD *)v42 + 1);
    *(_QWORD *)v41 = *(_QWORD *)v42;
    *((_QWORD *)v41 + 1) = v43;
    v44 = a3[21];
    a1[a3[20]] = a2[a3[20]];
    v45 = *(_QWORD *)&a2[v44];
    *(_QWORD *)&a1[v44] = v45;
    v46 = a3[22];
    v47 = *(_QWORD *)&a2[v46];
    *(_QWORD *)&a1[v46] = v47;
    swift_retain();
    v48 = v34;
    swift_bridgeObjectRetain(v35);
    swift_bridgeObjectRetain(v43);
    swift_bridgeObjectRetain(v45);
    swift_bridgeObjectRetain(v47);
  }
  return a1;
}

uint64_t sub_1000154B8(uint64_t a1, int *a2)
{
  uint64_t v4;
  void (*v5)(uint64_t, uint64_t);
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t);

  v4 = type metadata accessor for UUID(0);
  v5 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8);
  v5(a1, v4);
  v5(a1 + a2[5], v4);
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + a2[6] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + a2[7] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + a2[8] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + a2[9] + 8));
  v6 = a1 + a2[10];
  v7 = type metadata accessor for StaticRenderingMode(0);
  v8 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 8);
  v8(v6, v7);
  v8(a1 + a2[11], v7);
  swift_release(*(_QWORD *)(a1 + a2[12]));

  swift_bridgeObjectRelease(*(_QWORD *)(a1 + a2[15]));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + a2[19] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + a2[21]));
  return swift_bridgeObjectRelease(*(_QWORD *)(a1 + a2[22]));
}

uint64_t sub_1000155D8(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void (*v27)(uint64_t, uint64_t, uint64_t);
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  id v47;
  uint64_t v49;

  v6 = type metadata accessor for UUID(0);
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16);
  v7(a1, a2, v6);
  v7(a1 + a3[5], a2 + a3[5], v6);
  v8 = a3[6];
  v9 = a3[7];
  v10 = (_QWORD *)(a1 + v8);
  v11 = (_QWORD *)(a2 + v8);
  v12 = v11[1];
  *v10 = *v11;
  v10[1] = v12;
  v13 = (_QWORD *)(a1 + v9);
  v14 = (_QWORD *)(a2 + v9);
  v15 = v14[1];
  *v13 = *v14;
  v13[1] = v15;
  v16 = a3[8];
  v17 = a3[9];
  v18 = (_QWORD *)(a1 + v16);
  v19 = (_QWORD *)(a2 + v16);
  v20 = v19[1];
  *v18 = *v19;
  v18[1] = v20;
  v21 = (_QWORD *)(a1 + v17);
  v22 = (_QWORD *)(a2 + v17);
  v23 = v22[1];
  *v21 = *v22;
  v21[1] = v23;
  v24 = a3[10];
  v49 = a1 + v24;
  v25 = a2 + v24;
  v26 = type metadata accessor for StaticRenderingMode(0);
  v27 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 16);
  swift_bridgeObjectRetain(v12);
  swift_bridgeObjectRetain(v15);
  swift_bridgeObjectRetain(v20);
  swift_bridgeObjectRetain(v23);
  v27(v49, v25, v26);
  v27(a1 + a3[11], a2 + a3[11], v26);
  v28 = a3[13];
  *(_QWORD *)(a1 + a3[12]) = *(_QWORD *)(a2 + a3[12]);
  *(_BYTE *)(a1 + v28) = *(_BYTE *)(a2 + v28);
  v29 = a3[14];
  v30 = a3[15];
  v31 = a1 + v29;
  v32 = a2 + v29;
  v33 = *(void **)v32;
  LOBYTE(v32) = *(_BYTE *)(v32 + 8);
  *(_QWORD *)v31 = v33;
  *(_BYTE *)(v31 + 8) = v32;
  v34 = *(_QWORD *)(a2 + v30);
  *(_QWORD *)(a1 + v30) = v34;
  v35 = a3[17];
  *(_BYTE *)(a1 + a3[16]) = *(_BYTE *)(a2 + a3[16]);
  *(_BYTE *)(a1 + v35) = *(_BYTE *)(a2 + v35);
  v36 = a3[18];
  v37 = a3[19];
  v38 = a1 + v36;
  v39 = a2 + v36;
  *(_QWORD *)v38 = *(_QWORD *)v39;
  *(_BYTE *)(v38 + 8) = *(_BYTE *)(v39 + 8);
  v40 = (_QWORD *)(a1 + v37);
  v41 = (_QWORD *)(a2 + v37);
  v42 = v41[1];
  *v40 = *v41;
  v40[1] = v42;
  v43 = a3[21];
  *(_BYTE *)(a1 + a3[20]) = *(_BYTE *)(a2 + a3[20]);
  v44 = *(_QWORD *)(a2 + v43);
  *(_QWORD *)(a1 + v43) = v44;
  v45 = a3[22];
  v46 = *(_QWORD *)(a2 + v45);
  *(_QWORD *)(a1 + v45) = v46;
  swift_retain();
  v47 = v33;
  swift_bridgeObjectRetain(v34);
  swift_bridgeObjectRetain(v42);
  swift_bridgeObjectRetain(v44);
  swift_bridgeObjectRetain(v46);
  return a1;
}

uint64_t sub_1000157D0(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void (*v32)(uint64_t, uint64_t, uint64_t);
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  void *v39;
  id v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t *v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  _QWORD *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;

  v6 = type metadata accessor for UUID(0);
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24);
  v7(a1, a2, v6);
  v7(a1 + a3[5], a2 + a3[5], v6);
  v8 = a3[6];
  v9 = (_QWORD *)(a1 + v8);
  v10 = (_QWORD *)(a2 + v8);
  *v9 = *v10;
  v11 = v10[1];
  v12 = v9[1];
  v9[1] = v11;
  swift_bridgeObjectRetain(v11);
  swift_bridgeObjectRelease(v12);
  v13 = a3[7];
  v14 = (_QWORD *)(a1 + v13);
  v15 = (_QWORD *)(a2 + v13);
  *v14 = *v15;
  v16 = v15[1];
  v17 = v14[1];
  v14[1] = v16;
  swift_bridgeObjectRetain(v16);
  swift_bridgeObjectRelease(v17);
  v18 = a3[8];
  v19 = (_QWORD *)(a1 + v18);
  v20 = (_QWORD *)(a2 + v18);
  *v19 = *v20;
  v21 = v20[1];
  v22 = v19[1];
  v19[1] = v21;
  swift_bridgeObjectRetain(v21);
  swift_bridgeObjectRelease(v22);
  v23 = a3[9];
  v24 = (_QWORD *)(a1 + v23);
  v25 = (_QWORD *)(a2 + v23);
  *v24 = *v25;
  v26 = v25[1];
  v27 = v24[1];
  v24[1] = v26;
  swift_bridgeObjectRetain(v26);
  swift_bridgeObjectRelease(v27);
  v28 = a3[10];
  v29 = a1 + v28;
  v30 = a2 + v28;
  v31 = type metadata accessor for StaticRenderingMode(0);
  v32 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v31 - 8) + 24);
  v32(v29, v30, v31);
  v32(a1 + a3[11], a2 + a3[11], v31);
  v33 = a3[12];
  v34 = *(_QWORD *)(a1 + v33);
  *(_QWORD *)(a1 + v33) = *(_QWORD *)(a2 + v33);
  swift_retain();
  swift_release(v34);
  *(_BYTE *)(a1 + a3[13]) = *(_BYTE *)(a2 + a3[13]);
  v35 = a3[14];
  v36 = a1 + v35;
  v37 = a2 + v35;
  v38 = *(void **)v37;
  LOBYTE(v37) = *(_BYTE *)(v37 + 8);
  v39 = *(void **)v36;
  *(_QWORD *)v36 = v38;
  *(_BYTE *)(v36 + 8) = v37;
  v40 = v38;

  v41 = a3[15];
  v42 = *(_QWORD *)(a2 + v41);
  v43 = *(_QWORD *)(a1 + v41);
  *(_QWORD *)(a1 + v41) = v42;
  swift_bridgeObjectRetain(v42);
  swift_bridgeObjectRelease(v43);
  *(_BYTE *)(a1 + a3[16]) = *(_BYTE *)(a2 + a3[16]);
  *(_BYTE *)(a1 + a3[17]) = *(_BYTE *)(a2 + a3[17]);
  v44 = a3[18];
  v45 = a1 + v44;
  v46 = (uint64_t *)(a2 + v44);
  v47 = *v46;
  *(_BYTE *)(v45 + 8) = *((_BYTE *)v46 + 8);
  *(_QWORD *)v45 = v47;
  v48 = a3[19];
  v49 = (_QWORD *)(a1 + v48);
  v50 = (_QWORD *)(a2 + v48);
  *v49 = *v50;
  v51 = v50[1];
  v52 = v49[1];
  v49[1] = v51;
  swift_bridgeObjectRetain(v51);
  swift_bridgeObjectRelease(v52);
  *(_BYTE *)(a1 + a3[20]) = *(_BYTE *)(a2 + a3[20]);
  v53 = a3[21];
  v54 = *(_QWORD *)(a2 + v53);
  v55 = *(_QWORD *)(a1 + v53);
  *(_QWORD *)(a1 + v53) = v54;
  swift_bridgeObjectRetain(v54);
  swift_bridgeObjectRelease(v55);
  v56 = a3[22];
  v57 = *(_QWORD *)(a2 + v56);
  v58 = *(_QWORD *)(a1 + v56);
  *(_QWORD *)(a1 + v56) = v57;
  swift_bridgeObjectRetain(v57);
  swift_bridgeObjectRelease(v58);
  return a1;
}

uint64_t sub_100015A4C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(uint64_t, uint64_t, uint64_t);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v6 = type metadata accessor for UUID(0);
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32);
  v7(a1, a2, v6);
  v7(a1 + a3[5], a2 + a3[5], v6);
  v8 = a3[7];
  *(_OWORD *)(a1 + a3[6]) = *(_OWORD *)(a2 + a3[6]);
  *(_OWORD *)(a1 + v8) = *(_OWORD *)(a2 + v8);
  v9 = a3[9];
  *(_OWORD *)(a1 + a3[8]) = *(_OWORD *)(a2 + a3[8]);
  *(_OWORD *)(a1 + v9) = *(_OWORD *)(a2 + v9);
  v10 = a3[10];
  v11 = a1 + v10;
  v12 = a2 + v10;
  v13 = type metadata accessor for StaticRenderingMode(0);
  v14 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 32);
  v14(v11, v12, v13);
  v14(a1 + a3[11], a2 + a3[11], v13);
  v15 = a3[13];
  *(_QWORD *)(a1 + a3[12]) = *(_QWORD *)(a2 + a3[12]);
  *(_BYTE *)(a1 + v15) = *(_BYTE *)(a2 + v15);
  v16 = a3[14];
  v17 = a3[15];
  v18 = a1 + v16;
  v19 = a2 + v16;
  *(_BYTE *)(v18 + 8) = *(_BYTE *)(v19 + 8);
  *(_QWORD *)v18 = *(_QWORD *)v19;
  *(_QWORD *)(a1 + v17) = *(_QWORD *)(a2 + v17);
  v20 = a3[17];
  *(_BYTE *)(a1 + a3[16]) = *(_BYTE *)(a2 + a3[16]);
  *(_BYTE *)(a1 + v20) = *(_BYTE *)(a2 + v20);
  v21 = a3[18];
  v22 = a3[19];
  v23 = a1 + v21;
  v24 = a2 + v21;
  *(_QWORD *)v23 = *(_QWORD *)v24;
  *(_BYTE *)(v23 + 8) = *(_BYTE *)(v24 + 8);
  *(_OWORD *)(a1 + v22) = *(_OWORD *)(a2 + v22);
  v25 = a3[21];
  *(_BYTE *)(a1 + a3[20]) = *(_BYTE *)(a2 + a3[20]);
  *(_QWORD *)(a1 + v25) = *(_QWORD *)(a2 + v25);
  *(_QWORD *)(a1 + a3[22]) = *(_QWORD *)(a2 + a3[22]);
  return a1;
}

uint64_t sub_100015BC0(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  _QWORD *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void (*v36)(uint64_t, uint64_t, uint64_t);
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t v42;
  void *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  uint64_t *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;

  v6 = type metadata accessor for UUID(0);
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40);
  v7(a1, a2, v6);
  v7(a1 + a3[5], a2 + a3[5], v6);
  v8 = a3[6];
  v9 = (_QWORD *)(a1 + v8);
  v10 = (uint64_t *)(a2 + v8);
  v12 = *v10;
  v11 = v10[1];
  v13 = v9[1];
  *v9 = v12;
  v9[1] = v11;
  swift_bridgeObjectRelease(v13);
  v14 = a3[7];
  v15 = (_QWORD *)(a1 + v14);
  v16 = (uint64_t *)(a2 + v14);
  v18 = *v16;
  v17 = v16[1];
  v19 = v15[1];
  *v15 = v18;
  v15[1] = v17;
  swift_bridgeObjectRelease(v19);
  v20 = a3[8];
  v21 = (_QWORD *)(a1 + v20);
  v22 = (uint64_t *)(a2 + v20);
  v24 = *v22;
  v23 = v22[1];
  v25 = v21[1];
  *v21 = v24;
  v21[1] = v23;
  swift_bridgeObjectRelease(v25);
  v26 = a3[9];
  v27 = (_QWORD *)(a1 + v26);
  v28 = (uint64_t *)(a2 + v26);
  v30 = *v28;
  v29 = v28[1];
  v31 = v27[1];
  *v27 = v30;
  v27[1] = v29;
  swift_bridgeObjectRelease(v31);
  v32 = a3[10];
  v33 = a1 + v32;
  v34 = a2 + v32;
  v35 = type metadata accessor for StaticRenderingMode(0);
  v36 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v35 - 8) + 40);
  v36(v33, v34, v35);
  v36(a1 + a3[11], a2 + a3[11], v35);
  v37 = a3[12];
  v38 = *(_QWORD *)(a1 + v37);
  *(_QWORD *)(a1 + v37) = *(_QWORD *)(a2 + v37);
  swift_release(v38);
  v39 = a3[14];
  *(_BYTE *)(a1 + a3[13]) = *(_BYTE *)(a2 + a3[13]);
  v40 = a1 + v39;
  v41 = (uint64_t *)(a2 + v39);
  v42 = *v41;
  LOBYTE(v41) = *((_BYTE *)v41 + 8);
  v43 = *(void **)v40;
  *(_QWORD *)v40 = v42;
  *(_BYTE *)(v40 + 8) = (_BYTE)v41;

  v44 = a3[15];
  v45 = *(_QWORD *)(a1 + v44);
  *(_QWORD *)(a1 + v44) = *(_QWORD *)(a2 + v44);
  swift_bridgeObjectRelease(v45);
  v46 = a3[17];
  *(_BYTE *)(a1 + a3[16]) = *(_BYTE *)(a2 + a3[16]);
  *(_BYTE *)(a1 + v46) = *(_BYTE *)(a2 + v46);
  v47 = a3[18];
  v48 = a3[19];
  v49 = a1 + v47;
  v50 = a2 + v47;
  *(_BYTE *)(v49 + 8) = *(_BYTE *)(v50 + 8);
  *(_QWORD *)v49 = *(_QWORD *)v50;
  v51 = (_QWORD *)(a1 + v48);
  v52 = (uint64_t *)(a2 + v48);
  v54 = *v52;
  v53 = v52[1];
  v55 = v51[1];
  *v51 = v54;
  v51[1] = v53;
  swift_bridgeObjectRelease(v55);
  v56 = a3[21];
  *(_BYTE *)(a1 + a3[20]) = *(_BYTE *)(a2 + a3[20]);
  v57 = *(_QWORD *)(a1 + v56);
  *(_QWORD *)(a1 + v56) = *(_QWORD *)(a2 + v56);
  swift_bridgeObjectRelease(v57);
  v58 = a3[22];
  v59 = *(_QWORD *)(a1 + v58);
  *(_QWORD *)(a1 + v58) = *(_QWORD *)(a2 + v58);
  swift_bridgeObjectRelease(v59);
  return a1;
}

uint64_t sub_100015DB8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100015DC4);
}

uint64_t sub_100015DC4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  unint64_t v11;

  v6 = type metadata accessor for UUID(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
    return v9(v10, a2, v8);
  }
  if ((_DWORD)a2 != 0x7FFFFFFF)
  {
    v8 = type metadata accessor for StaticRenderingMode(0);
    v10 = a1 + *(int *)(a3 + 40);
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48);
    return v9(v10, a2, v8);
  }
  v11 = *(_QWORD *)(a1 + *(int *)(a3 + 24) + 8);
  if (v11 >= 0xFFFFFFFF)
    LODWORD(v11) = -1;
  return (v11 + 1);
}

uint64_t sub_100015E70(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100015E7C);
}

uint64_t sub_100015E7C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;

  result = type metadata accessor for UUID(0);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = result;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    if (a3 == 0x7FFFFFFF)
    {
      *(_QWORD *)(a1 + *(int *)(a4 + 24) + 8) = (a2 - 1);
      return result;
    }
    v10 = type metadata accessor for StaticRenderingMode(0);
    v12 = a1 + *(int *)(a4 + 40);
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56);
  }
  return v11(v12, a2, a2, v10);
}

uint64_t type metadata accessor for WidgetTileInfo(uint64_t a1)
{
  uint64_t result;

  result = qword_1000A5130;
  if (!qword_1000A5130)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for WidgetTileInfo);
  return result;
}

uint64_t sub_100015F60(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  unint64_t v4;
  _QWORD v5[6];
  uint64_t v6;
  uint64_t v7;
  char *v8;
  void *v9;
  void *v10;
  char *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  char *v17;
  char *v18;

  result = type metadata accessor for UUID(319);
  if (v3 <= 0x3F)
  {
    v5[0] = *(_QWORD *)(result - 8) + 64;
    v5[1] = v5[0];
    v5[2] = &unk_100086D38;
    v5[3] = &unk_100086D50;
    v5[4] = &unk_100086D38;
    v5[5] = &unk_100086D38;
    result = type metadata accessor for StaticRenderingMode(319);
    if (v4 <= 0x3F)
    {
      v6 = *(_QWORD *)(result - 8) + 64;
      v7 = v6;
      v8 = (char *)&value witness table for Builtin.NativeObject + 64;
      v9 = &unk_100086D68;
      v10 = &unk_100086D80;
      v11 = (char *)&value witness table for Builtin.BridgeObject + 64;
      v12 = &unk_100086D68;
      v13 = &unk_100086D98;
      v14 = &unk_100086DB0;
      v15 = &unk_100086D50;
      v16 = &unk_100086D98;
      v17 = (char *)&value witness table for Builtin.BridgeObject + 64;
      v18 = (char *)&value witness table for Builtin.BridgeObject + 64;
      swift_initStructMetadata(a1, 256, 19, v5, a1 + 16);
      return 0;
    }
  }
  return result;
}

void sub_10001604C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  int64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  int64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  unint64_t v21;
  int64_t v22;
  id v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  int64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  _QWORD v32[5];
  unint64_t v33;

  v1 = a1;
  v33 = (unint64_t)&_swiftEmptyArrayStorage;
  if ((a1 & 0xC000000000000001) != 0)
  {
    if (a1 < 0)
      v2 = a1;
    else
      v2 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v3 = __CocoaSet.makeIterator()(v2);
    v4 = sub_100008CBC(0, &qword_1000A50B0, HMAction_ptr);
    v5 = sub_100014E30(&qword_1000A50B8, &qword_1000A50B0, HMAction_ptr);
    v6 = Set.Iterator.init(_cocoa:)(v32, v3, v4, v5);
    v1 = v32[0];
    v29 = v32[1];
    v7 = v32[2];
    v8 = v32[3];
    v9 = v32[4];
  }
  else
  {
    v10 = -1 << *(_BYTE *)(a1 + 32);
    v29 = a1 + 56;
    v7 = ~v10;
    v11 = -v10;
    if (v11 < 64)
      v12 = ~(-1 << v11);
    else
      v12 = -1;
    v9 = v12 & *(_QWORD *)(a1 + 56);
    v6 = (_QWORD *)swift_bridgeObjectRetain(a1);
    v8 = 0;
  }
  v28 = v7;
  v13 = (unint64_t)(v7 + 64) >> 6;
  while (v1 < 0)
  {
    v17 = __CocoaSet.Iterator.next()(v6);
    if (!v17)
      goto LABEL_39;
    v18 = v17;
    v30 = v17;
    v19 = sub_100008CBC(0, &qword_1000A50B0, HMAction_ptr);
    swift_unknownObjectRetain(v18);
    swift_dynamicCast(&v31, &v30, (char *)&type metadata for Swift.AnyObject + 8, v19, 7);
    v20 = v31;
    swift_unknownObjectRelease(v18);
    v16 = v8;
    v14 = v9;
    if (!v20)
      goto LABEL_39;
LABEL_29:
    v23 = objc_msgSend(v20, "hf_affectedCharacteristic", v28);

    v8 = v16;
    v9 = v14;
    if (v23)
    {
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v6);
      v25 = *(_QWORD *)((v33 & 0xFFFFFFFFFFFFFF8) + 0x10);
      v24 = *(_QWORD *)((v33 & 0xFFFFFFFFFFFFFF8) + 0x18);
      if (v25 >= v24 >> 1)
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v24 > 1, v25 + 1, 1);
      v26 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v25, v23);
      v6 = (_QWORD *)specialized Array._endMutation()(v26);
      v8 = v16;
      v9 = v14;
    }
  }
  if (v9)
  {
    v14 = (v9 - 1) & v9;
    v15 = __clz(__rbit64(v9)) | (v8 << 6);
    v16 = v8;
LABEL_28:
    v20 = *(id *)(*(_QWORD *)(v1 + 48) + 8 * v15);
    if (!v20)
      goto LABEL_39;
    goto LABEL_29;
  }
  v16 = v8 + 1;
  if (!__OFADD__(v8, 1))
  {
    if (v16 >= v13)
      goto LABEL_39;
    v21 = *(_QWORD *)(v29 + 8 * v16);
    if (!v21)
    {
      v22 = v8 + 2;
      if (v8 + 2 >= v13)
        goto LABEL_39;
      v21 = *(_QWORD *)(v29 + 8 * v22);
      if (v21)
        goto LABEL_26;
      v22 = v8 + 3;
      if (v8 + 3 >= v13)
        goto LABEL_39;
      v21 = *(_QWORD *)(v29 + 8 * v22);
      if (v21)
        goto LABEL_26;
      v22 = v8 + 4;
      if (v8 + 4 >= v13)
        goto LABEL_39;
      v21 = *(_QWORD *)(v29 + 8 * v22);
      if (v21)
      {
LABEL_26:
        v16 = v22;
      }
      else
      {
        v16 = v8 + 5;
        if (v8 + 5 >= v13)
          goto LABEL_39;
        v21 = *(_QWORD *)(v29 + 8 * v16);
        if (!v21)
        {
          v27 = v8 + 6;
          while (v13 != v27)
          {
            v21 = *(_QWORD *)(v29 + 8 * v27++);
            if (v21)
            {
              v16 = v27 - 1;
              goto LABEL_27;
            }
          }
LABEL_39:
          sub_100014DC4(v1);
          return;
        }
      }
    }
LABEL_27:
    v14 = (v21 - 1) & v21;
    v15 = __clz(__rbit64(v21)) + (v16 << 6);
    goto LABEL_28;
  }
  __break(1u);
}

uint64_t sub_100016388@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, char a17, uint64_t a18, char a19, char a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,char a25)
{
  int *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void (*v33)(uint64_t, _QWORD, uint64_t);
  void *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  uint64_t v39;
  void (*v40)(uint64_t, uint64_t, uint64_t);
  _QWORD *v41;
  _QWORD *v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v45;
  void (*v46)(uint64_t, uint64_t, uint64_t);
  uint64_t result;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  _QWORD *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;

  v26 = (int *)type metadata accessor for WidgetTileInfo(0);
  v52 = (_QWORD *)(a9 + v26[7]);
  v62 = a9 + v26[18];
  v63 = v26[17];
  v64 = v26[20];
  v61 = (_QWORD *)(a9 + v26[19]);
  v51 = v26[21];
  v50 = sub_10000527C(&qword_1000A4FE0);
  v27 = type metadata accessor for ServiceKind(0);
  v28 = *(_QWORD *)(v27 - 8);
  v29 = *(_QWORD *)(v28 + 72);
  v30 = *(unsigned __int8 *)(v28 + 80);
  v31 = (v30 + 32) & ~v30;
  v49 = v30 | 7;
  v32 = swift_allocObject(v50, v31 + 5 * v29, v30 | 7);
  *(_OWORD *)(v32 + 16) = xmmword_100086C90;
  v33 = *(void (**)(uint64_t, _QWORD, uint64_t))(v28 + 104);
  v33(v32 + v31, enum case for ServiceKind.door(_:), v27);
  v33(v32 + v31 + v29, enum case for ServiceKind.garageDoorOpener(_:), v27);
  v33(v32 + v31 + 2 * v29, enum case for ServiceKind.lockMechanism(_:), v27);
  v33(v32 + v31 + 3 * v29, enum case for ServiceKind.window(_:), v27);
  v33(v32 + v31 + 4 * v29, enum case for ServiceKind.windowCovering(_:), v27);
  v34 = sub_10001B2B8(v32);
  swift_setDeallocating(v32);
  swift_arrayDestroy(v32 + v31, 5, v27);
  swift_deallocClassInstance(v32, 32, 7);
  *(_QWORD *)(a9 + v51) = v34;
  v35 = v26[22];
  v36 = swift_allocObject(v50, v31 + v29, v49);
  *(_OWORD *)(v36 + 16) = xmmword_100086C80;
  v37 = v36 + v31;
  v33(v37, enum case for ServiceKind.irrigationSystem(_:), v27);
  v38 = sub_10001B2B8(v36);
  swift_setDeallocating(v36);
  swift_arrayDestroy(v37, 1, v27);
  swift_deallocClassInstance(v36, 32, 7);
  *(_QWORD *)(a9 + v35) = v38;
  v39 = type metadata accessor for UUID(0);
  v40 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v39 - 8) + 32);
  v40(a9, a1, v39);
  v40(a9 + v26[5], a2, v39);
  v41 = (_QWORD *)(a9 + v26[6]);
  *v41 = a3;
  v41[1] = a4;
  *v52 = a5;
  v52[1] = a6;
  v42 = (_QWORD *)(a9 + v26[8]);
  *v42 = a7;
  v42[1] = a8;
  v43 = (_QWORD *)(a9 + v26[9]);
  *v43 = a10;
  v43[1] = a11;
  v44 = a9 + v26[10];
  v45 = type metadata accessor for StaticRenderingMode(0);
  v46 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v45 - 8) + 32);
  v46(v44, a12, v45);
  result = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v46)(a9 + v26[11], a13, v45);
  *(_QWORD *)(a9 + v26[12]) = a14;
  *(_BYTE *)(a9 + v26[13]) = a15;
  v48 = a9 + v26[14];
  *(_QWORD *)v48 = a16;
  *(_BYTE *)(v48 + 8) = a17;
  *(_QWORD *)(a9 + v26[15]) = a18;
  *(_BYTE *)(a9 + v26[16]) = a19;
  *(_BYTE *)(a9 + v63) = a20;
  *(_QWORD *)v62 = a21;
  *(_BYTE *)(v62 + 8) = a22 & 1;
  *v61 = a23;
  v61[1] = a24;
  *(_BYTE *)(a9 + v64) = a25;
  return result;
}

void sub_10001677C(uint64_t a1, uint64_t a2, char a3)
{
  __asm { BR              X10 }
}

void sub_1000167B0(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  void *v14;
  uint64_t v15;
  id v16;

  Hasher._combine(_:)(1uLL);
  v16 = v14;
  ((void (*)(uint64_t))NSObject.hash(into:))(v15);

}

void sub_10001680C(uint64_t a1, char a2)
{
  _QWORD v3[9];

  Hasher.init(_seed:)(v3, 0);
  __asm { BR              X10 }
}

Swift::Int sub_10001684C()
{
  void *v0;
  id v1;
  uint64_t v3;

  Hasher._combine(_:)(1uLL);
  v1 = v0;
  ((void (*)(uint64_t *))NSObject.hash(into:))(&v3);

  return Hasher._finalize()();
}

void sub_1000168AC()
{
  uint64_t v0;

  sub_10001680C(*(_QWORD *)v0, *(_BYTE *)(v0 + 8));
}

void sub_1000168B8(uint64_t a1)
{
  uint64_t v1;

  sub_10001677C(a1, *(_QWORD *)v1, *(_BYTE *)(v1 + 8));
}

void sub_1000168C4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[9];

  v2 = *(unsigned __int8 *)(v1 + 8);
  Hasher.init(_seed:)(v3, a1);
  __asm { BR              X9 }
}

Swift::Int sub_1000168FC()
{
  void *v0;
  id v1;
  uint64_t v3;

  Hasher._combine(_:)(1uLL);
  v1 = v0;
  ((void (*)(uint64_t *))NSObject.hash(into:))(&v3);

  return Hasher._finalize()();
}

void sub_10001695C(uint64_t a1)
{
  sub_10001AA60(*(_QWORD *)a1, *(_BYTE *)(a1 + 8));
}

void sub_100016974()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD v11[3];
  uint64_t v12;

  v1 = sub_10000527C(&qword_1000A4FF0);
  v2 = __chkstk_darwin(v1);
  __chkstk_darwin(v2);
  v3 = type metadata accessor for ServiceKind(0);
  v11[1] = *(_QWORD *)(v3 - 8);
  v11[2] = v3;
  v4 = __chkstk_darwin(v3);
  v5 = __chkstk_darwin(v4);
  __chkstk_darwin(v5);
  v11[0] = (char *)v11 - v6;
  v7 = type metadata accessor for WidgetTileInfo(0);
  v8 = __chkstk_darwin(v7);
  v9 = __chkstk_darwin(v8);
  v10 = *(int *)(__chkstk_darwin(v9) + 56);
  v12 = v0;
  __asm { BR              X11 }
}

uint64_t sub_100016B00@<X0>(void *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  id v9;
  void *v10;
  char v11;
  id v12;
  void *v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  void (*v25)(uint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v32;

  v7 = v1;
  v8 = a1;
  v9 = objc_msgSend(v8, "accessory");
  if (v9
    && (v10 = v9,
        v11 = ((uint64_t (*)(void))HMAccessory.showAsIndividualTiles.getter)(),
        v10,
        (v11 & 1) != 0)
    || (v12 = objc_msgSend(v8, "accessory")) == 0)
  {
    v20 = sub_100008BB8(*(_QWORD *)(v6 - 88), v2);
    v21 = *(_QWORD *)(v6 - 96);
  }
  else
  {
    v13 = v12;
    v14 = objc_msgSend(v12, "hf_visibleServices");

    v15 = sub_100008CBC(0, &qword_1000A5078, HMService_ptr);
    v16 = sub_100014E30(&qword_1000A5098, &qword_1000A5078, HMService_ptr);
    v17 = ((uint64_t (*)(id, uint64_t, uint64_t))static Set._unconditionallyBridgeFromObjectiveC(_:))(v14, v15, v16);

    if ((v17 & 0xC000000000000001) != 0)
    {
      if (v17 < 0)
        v18 = v17;
      else
        v18 = v17 & 0xFFFFFFFFFFFFFF8;
      v19 = ((uint64_t (*)(uint64_t))__CocoaSet.count.getter)(v18);
    }
    else
    {
      v19 = *(_QWORD *)(v17 + 16);
    }
    v21 = *(_QWORD *)(v6 - 96);
    swift_bridgeObjectRelease(v17);
    v20 = sub_100008BB8(*(_QWORD *)(v6 - 88), v2);
    if (v19 >= 2)
    {
      sub_100008BFC(v2);

LABEL_19:
      v32 = 0;
      return v32 & 1;
    }
  }
  v22 = *(_QWORD *)(v2 + *(int *)(v3 + 88));
  v23 = *(_QWORD *)(v6 - 112);
  v24 = v8;
  ((void (*)(uint64_t))HMService.serviceKind.getter)(v20);
  LOBYTE(v22) = sub_100016F18(v23, v22);
  v25 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 104) + 8);
  v25(v23, v21);
  v26 = sub_100008BFC(v2);
  if ((v22 & 1) != 0)
  {

    goto LABEL_19;
  }
  ((void (*)(uint64_t))HMService.serviceKind.getter)(v26);
  ServiceKind.widgetTogglingCharacteristicKind.getter(v7);
  v25(v5, v21);
  v27 = type metadata accessor for CharacteristicKind(0);
  v28 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v27 - 8) + 48))(v7, 1, v27);
  sub_100014EFC(v7, &qword_1000A4FF0);
  v29 = sub_100008BB8(*(_QWORD *)(v6 - 88), v4);
  if (v28 == 1)
  {
    v30 = *(_QWORD *)(v4 + *(int *)(v3 + 84));
    v31 = *(_QWORD *)(v6 - 112);
    ((void (*)(uint64_t))HMService.serviceKind.getter)(v29);
    v32 = sub_100016F18(v31, v30);

    v25(v31, v21);
  }
  else
  {

    v32 = 1;
  }
  sub_100008BFC(v4);
  return v32 & 1;
}

uint64_t sub_100016F18(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(char *, unint64_t, uint64_t);
  uint64_t v15;
  char v16;
  uint64_t v18;
  uint64_t v19;

  v4 = type metadata accessor for ServiceKind(0);
  v19 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v6 = (char *)&v18 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*(_QWORD *)(a2 + 16)
    && (v7 = *(_QWORD *)(a2 + 40),
        v8 = sub_100008C7C(&qword_1000A51B8, (uint64_t (*)(uint64_t))&type metadata accessor for ServiceKind, (uint64_t)&protocol conformance descriptor for ServiceKind), v9 = dispatch thunk of Hashable._rawHashValue(seed:)(v7, v4, v8), v10 = -1 << *(_BYTE *)(a2 + 32), v11 = v9 & ~v10, ((*(_QWORD *)(a2 + 56 + ((v11 >> 3) & 0xFFFFFFFFFFFFF8)) >> v11) & 1) != 0))
  {
    v12 = ~v10;
    v13 = *(_QWORD *)(v19 + 72);
    v14 = *(void (**)(char *, unint64_t, uint64_t))(v19 + 16);
    do
    {
      v14(v6, *(_QWORD *)(a2 + 48) + v13 * v11, v4);
      v15 = sub_100008C7C(&qword_1000A51C0, (uint64_t (*)(uint64_t))&type metadata accessor for ServiceKind, (uint64_t)&protocol conformance descriptor for ServiceKind);
      v16 = dispatch thunk of static Equatable.== infix(_:_:)(v6, a1, v4, v15);
      (*(void (**)(char *, uint64_t))(v19 + 8))(v6, v4);
      if ((v16 & 1) != 0)
        break;
      v11 = (v11 + 1) & v12;
    }
    while (((*(_QWORD *)(a2 + 56 + ((v11 >> 3) & 0xFFFFFFFFFFFFF8)) >> v11) & 1) != 0);
  }
  else
  {
    v16 = 0;
  }
  return v16 & 1;
}

uint64_t sub_10001709C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  int v6;
  uint64_t v8;

  v1 = type metadata accessor for UUID(0);
  __chkstk_darwin(v1);
  v2 = type metadata accessor for WidgetTileInfo(0);
  v3 = __chkstk_darwin(v2);
  v5 = (char *)&v8 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = *(unsigned __int8 *)(v0 + *(int *)(v3 + 68));
  if (v6 == 2)
  {
    sub_100008BB8(v0, (uint64_t)v5);
    __asm { BR              X11 }
  }
  return v6 & 1;
}

BOOL sub_1000173A0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  char v16;
  uint64_t v17;
  unsigned int *v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  char v26;
  void (*v27)(char *, _QWORD, uint64_t);
  uint64_t v28;
  uint64_t v29;
  char v30;
  char v31;
  void (*v32)(char *, uint64_t);
  uint64_t v33;
  char v34;
  char v35;
  uint64_t v38;
  void (*v39)(char *, _QWORD, uint64_t);
  char v40;
  void (*v41)(char *, uint64_t);
  uint64_t v42;
  uint64_t v43;

  v3 = type metadata accessor for CharacteristicKind(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v42 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for ServiceKind(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = __chkstk_darwin(v7);
  v11 = (char *)&v42 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  HMService.serviceKind.getter(v9);
  v12 = (*(uint64_t (**)(char *, uint64_t))(v8 + 88))(v11, v7);
  if (v12 == enum case for ServiceKind.door(_:))
  {
LABEL_2:
    (*(void (**)(char *, _QWORD, uint64_t))(v4 + 104))(v6, enum case for CharacteristicKind.currentPosition(_:), v3);
    v13 = type metadata accessor for WidgetTileInfo(0);
    v14 = sub_100008FE4((uint64_t)v6, *(_QWORD *)(a2 + *(int *)(v13 + 60)));
    v16 = v15;
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    if ((v16 & 1) == 0)
      return v14 > 0;
    return 0;
  }
  if (v12 == enum case for ServiceKind.garageDoorOpener(_:))
  {
    v18 = (unsigned int *)&enum case for CharacteristicKind.currentDoorState(_:);
    goto LABEL_8;
  }
  if (v12 == enum case for ServiceKind.lockMechanism(_:))
  {
    v18 = (unsigned int *)&enum case for CharacteristicKind.currentLockMechanismState(_:);
LABEL_8:
    (*(void (**)(char *, _QWORD, uint64_t))(v4 + 104))(v6, *v18, v3);
    v19 = type metadata accessor for WidgetTileInfo(0);
    v20 = sub_100008FE4((uint64_t)v6, *(_QWORD *)(a2 + *(int *)(v19 + 60)));
    v22 = v21;
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    if ((v22 & 1) == 0)
      return v20 != 1;
    return 0;
  }
  if (v12 == enum case for ServiceKind.securitySystem(_:))
  {
    (*(void (**)(char *, _QWORD, uint64_t))(v4 + 104))(v6, enum case for CharacteristicKind.currentSecuritySystemState(_:), v3);
    v23 = type metadata accessor for WidgetTileInfo(0);
    v24 = sub_100008FE4((uint64_t)v6, *(_QWORD *)(a2 + *(int *)(v23 + 60)));
    v26 = v25;
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    if ((v26 & 1) == 0)
      return v24 != 3;
    return 0;
  }
  if (v12 == enum case for ServiceKind.thermostat(_:))
  {
    v27 = *(void (**)(char *, _QWORD, uint64_t))(v4 + 104);
    v27(v6, enum case for CharacteristicKind.targetHeatingCoolingMode(_:), v3);
    v28 = *(int *)(type metadata accessor for WidgetTileInfo(0) + 60);
    v29 = sub_100008FE4((uint64_t)v6, *(_QWORD *)(a2 + v28));
    v31 = v30;
    v32 = *(void (**)(char *, uint64_t))(v4 + 8);
    v32(v6, v3);
    if ((v31 & 1) == 0)
    {
      v27(v6, enum case for CharacteristicKind.currentHeatingCooling(_:), v3);
      v33 = sub_100008FE4((uint64_t)v6, *(_QWORD *)(a2 + v28));
      v35 = v34;
      v32(v6, v3);
      if ((v35 & 1) == 0)
        return (v29 | v33) != 0;
    }
    return 0;
  }
  if (v12 == enum case for ServiceKind.window(_:) || v12 == enum case for ServiceKind.windowCovering(_:))
    goto LABEL_2;
  v38 = *(_QWORD *)(a2 + *(int *)(type metadata accessor for WidgetTileInfo(0) + 60));
  v39 = *(void (**)(char *, _QWORD, uint64_t))(v4 + 104);
  v39(v6, enum case for CharacteristicKind.powerState(_:), v3);
  v43 = v38;
  v40 = _sSo9HMServiceC10HomeWidgetE9BOOLValue3for4withSbSg0B9DataModel18CharacteristicKindO_SDy10Foundation4UUIDVypGSgtF_0((uint64_t)v6, v38);
  v41 = *(void (**)(char *, uint64_t))(v4 + 8);
  v41(v6, v3);
  if (v40 == 2
    && (v39(v6, enum case for CharacteristicKind.active(_:), v3),
        v40 = _sSo9HMServiceC10HomeWidgetE9BOOLValue3for4withSbSg0B9DataModel18CharacteristicKindO_SDy10Foundation4UUIDVypGSgtF_0((uint64_t)v6, v43), v41(v6, v3), v40 == 2))
  {
    v17 = 0;
  }
  else
  {
    v17 = v40 & 1;
  }
  (*(void (**)(char *, uint64_t))(v8 + 8))(v11, v7);
  return v17;
}

void sub_100017778()
{
  uint64_t v0;
  int *v1;
  int *v2;
  uint64_t v3;
  int v4;
  void *v5;
  void *v6;
  id v7;
  id v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  Swift::OpaquePointer_optional v16;
  Swift::OpaquePointer_optional v17;

  v1 = (int *)type metadata accessor for WidgetTileInfo(0);
  if (*(_BYTE *)(v0 + v1[20]) == 2)
  {
    v2 = v1;
    v3 = v0 + v1[14];
    v4 = *(unsigned __int8 *)(v3 + 8);
    if ((v4 - 2) >= 2)
    {
      v5 = *(void **)v3;
      if (!v4)
      {
        v6 = *(void **)(v0 + v1[15]);
        v7 = v5;
        v16.value._rawValue = v6;
        HMService.isInFlight(cache:)(v16);

        return;
      }
      v8 = v5;
      v9 = objc_msgSend(v8, "services");
      v10 = sub_100008CBC(0, &qword_1000A5078, HMService_ptr);
      v11 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v9, v10);

      if ((unint64_t)v11 >> 62)
      {
        if (v11 < 0)
          v14 = v11;
        else
          v14 = v11 & 0xFFFFFFFFFFFFFF8;
        swift_bridgeObjectRetain(v11);
        v15 = _CocoaArrayWrapper.endIndex.getter(v14);
        swift_bridgeObjectRelease(v11);
        if (v15)
        {
LABEL_9:
          if ((v11 & 0xC000000000000001) != 0)
          {
            v12 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v11);
          }
          else
          {
            if (!*(_QWORD *)((v11 & 0xFFFFFFFFFFFFF8) + 0x10))
            {
              __break(1u);
              return;
            }
            v12 = *(id *)(v11 + 32);
          }
          v13 = v12;
          swift_bridgeObjectRelease(v11);
          v17.value._rawValue = *(void **)(v0 + v2[15]);
          HMService.isInFlight(cache:)(v17);

          return;
        }
      }
      else if (*(_QWORD *)((v11 & 0xFFFFFFFFFFFFF8) + 0x10))
      {
        goto LABEL_9;
      }

      swift_bridgeObjectRelease(v11);
    }
  }
}

void sub_100017910()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  id v3;
  id v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  uint64_t v9;
  uint64_t v10;

  v1 = v0 + *(int *)(type metadata accessor for WidgetTileInfo(0) + 56);
  if (*(unsigned __int8 *)(v1 + 8) - 2 >= 2)
  {
    v2 = *(void **)v1;
    if (!*(_BYTE *)(v1 + 8))
    {
      v3 = v2;
      return;
    }
    v4 = v2;
    v5 = objc_msgSend(v4, "services");
    v6 = sub_100008CBC(0, &qword_1000A5078, HMService_ptr);
    v7 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v5, v6);

    if ((unint64_t)v7 >> 62)
    {
      if (v7 < 0)
        v9 = v7;
      else
        v9 = v7 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v7);
      v10 = _CocoaArrayWrapper.endIndex.getter(v9);
      swift_bridgeObjectRelease(v7);
      if (v10)
      {
LABEL_6:
        if ((v7 & 0xC000000000000001) != 0)
        {
          specialized _ArrayBuffer._getElementSlowPath(_:)(0, v7);
        }
        else
        {
          if (!*(_QWORD *)((v7 & 0xFFFFFFFFFFFFF8) + 0x10))
          {
            __break(1u);
            return;
          }
          v8 = *(id *)(v7 + 32);
        }
      }
    }
    else if (*(_QWORD *)((v7 & 0xFFFFFFFFFFFFF8) + 0x10))
    {
      goto LABEL_6;
    }
    swift_bridgeObjectRelease(v7);

  }
}

uint64_t sub_100017A38()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 32) = v0;
  return swift_task_switch(sub_100017A50, 0, 0);
}

uint64_t sub_100017A50()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  v1 = HomeWidget.shared.unsafeMutableAddressor();
  v2 = *v1;
  *(_QWORD *)(v0 + 40) = *v1;
  v3 = dword_1000A76AC;
  swift_retain(v2);
  v4 = (_QWORD *)swift_task_alloc(v3);
  *(_QWORD *)(v0 + 48) = v4;
  *v4 = v0;
  v4[1] = sub_100017AB0;
  return HomeWidget.manager.getter();
}

uint64_t sub_100017AB0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v3 = *(_QWORD *)(*(_QWORD *)v1 + 40);
  v2 = *(_QWORD *)(*(_QWORD *)v1 + 48);
  *(_QWORD *)(*(_QWORD *)v1 + 56) = a1;
  swift_task_dealloc(v2);
  swift_release(v3);
  return swift_task_switch(sub_100017B14, 0, 0);
}

uint64_t sub_100017B14()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  uint8_t *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;

  v1 = *(_QWORD *)(v0 + 56);
  if (v1)
  {
    v2 = *(_QWORD *)(v0 + 32);
    v3 = swift_task_alloc(32);
    *(_QWORD *)(v0 + 64) = v3;
    *(_QWORD *)(v3 + 16) = v2;
    *(_QWORD *)(v3 + 24) = v1;
    v4 = (_QWORD *)swift_task_alloc(async function pointer to withCheckedContinuation<A>(isolation:function:_:)[1]);
    *(_QWORD *)(v0 + 72) = v4;
    v5 = sub_10000527C(&qword_1000A51E0);
    *v4 = v0;
    v4[1] = sub_100017D48;
    return withCheckedContinuation<A>(isolation:function:_:)(v0 + 24, 0, 0, 0x6174536863746566, 0xEC00000029286574, sub_10001B834, v3, v5);
  }
  else
  {
    if (qword_1000A4F08 != -1)
      swift_once(&qword_1000A4F08, sub_100053184);
    v7 = type metadata accessor for Logger(0);
    v8 = sub_100014698(v7, (uint64_t)qword_1000A7A80);
    v9 = Logger.logObject.getter(v8);
    v10 = static os_log_type_t.error.getter(v9);
    if (os_log_type_enabled(v9, v10))
    {
      v11 = (uint8_t *)swift_slowAlloc(12, -1);
      v12 = swift_slowAlloc(32, -1);
      v14 = v12;
      *(_DWORD *)v11 = 136315138;
      *(_QWORD *)(v0 + 16) = sub_100023980(0x6174536863746566, 0xEC00000029286574, &v14);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 16, v0 + 24, v11 + 4, v11 + 12);
      _os_log_impl((void *)&_mh_execute_header, v9, v10, "%s unable to get shared HMHomeManager instance", v11, 0xCu);
      swift_arrayDestroy(v12, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v12, -1, -1);
      swift_slowDealloc(v11, -1, -1);
    }

    v13 = sub_10002F268((uint64_t)_swiftEmptyArrayStorage);
    return (*(uint64_t (**)(unint64_t))(v0 + 8))(v13);
  }
}

uint64_t sub_100017D48()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 64);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 72));
  swift_task_dealloc(v1);
  return swift_task_switch(sub_100017DA4, 0, 0);
}

uint64_t sub_100017DA4()
{
  uint64_t v0;

  return (*(uint64_t (**)(_QWORD))(v0 + 8))(*(_QWORD *)(v0 + 24));
}

void sub_100017DD8(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  id v23;
  uint64_t v24;
  uint64_t v25;
  id v26;
  NSObject *v27;
  os_log_type_t v28;
  uint64_t v29;
  id v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  void **v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  NSObject *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  id v50;
  void *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  _QWORD *v56;
  unint64_t v57;
  unint64_t v58;
  _QWORD *v59;
  id v60;
  uint64_t v61;
  void **v62;
  void **v63;
  id v64;
  NSArray v65;
  uint64_t v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  void *v71;
  uint8_t *v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  unint64_t v76;
  unint64_t v77;
  void **v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  void *v85;
  uint64_t v86;
  void **v87;
  uint8_t *v88;
  int v89;
  uint64_t v90;
  uint64_t v91;
  char *v92;
  uint64_t v93;
  uint64_t v94;
  id v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  unint64_t v99;
  NSObject *v100;
  char *v101;
  uint64_t v102;
  void **v103;
  _QWORD *v104;
  void **aBlock;
  uint64_t v106;
  void (*v107)(uint64_t, void *, void *);
  void *v108;
  uint64_t (*v109)(uint64_t, uint64_t);
  uint64_t v110;

  v95 = a3;
  v5 = type metadata accessor for CharacteristicKind(0);
  v102 = *(_QWORD *)(v5 - 8);
  v103 = (void **)v5;
  __chkstk_darwin(v5);
  v7 = (char *)&v86 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for WidgetTileInfo(0);
  __chkstk_darwin(v8);
  v10 = (char *)&v86 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_10000527C(&qword_1000A51E8);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v97 = v13;
  v14 = (char *)&v86 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v98 = type metadata accessor for Logger(0);
  v15 = *(_QWORD *)(v98 - 8);
  v16 = __chkstk_darwin(v98);
  __chkstk_darwin(v16);
  v19 = (char *)&v86 - v18;
  v20 = *(int *)(v8 + 56);
  v96 = a2;
  v21 = a2 + v20;
  if (*(_BYTE *)(v21 + 8) == 2)
  {
    v93 = v12;
    v22 = qword_1000A4F08;
    v23 = *(id *)v21;
    if (v22 != -1)
      swift_once(&qword_1000A4F08, sub_100053184);
    v92 = v14;
    v24 = v98;
    v25 = sub_100014698(v98, (uint64_t)qword_1000A7A80);
    (*(void (**)(char *, uint64_t, uint64_t))(v15 + 16))(v19, v25, v24);
    v26 = v23;
    v27 = Logger.logObject.getter(v26);
    v28 = static os_log_type_t.default.getter(v27);
    if (os_log_type_enabled(v27, v28))
    {
      v29 = swift_slowAlloc(22, -1);
      v103 = (void **)swift_slowAlloc(64, -1);
      aBlock = v103;
      *(_DWORD *)v29 = 136315394;
      v94 = v15;
      v104 = (_QWORD *)sub_100023980(0x6174536863746566, 0xEC00000029286574, (uint64_t *)&aBlock);
      v90 = a1;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v104, &aBlock, v29 + 4, v29 + 12);
      *(_WORD *)(v29 + 12) = 2080;
      v102 = v29 + 14;
      v30 = objc_msgSend(v26, "name");
      v31 = static String._unconditionallyBridgeFromObjectiveC(_:)(v30);
      v32 = v11;
      v34 = v33;

      v104 = (_QWORD *)sub_100023980(v31, v34, (uint64_t *)&aBlock);
      a1 = v90;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v104, &aBlock, v102, v29 + 22);

      v35 = v34;
      v11 = v32;
      swift_bridgeObjectRelease(v35);
      _os_log_impl((void *)&_mh_execute_header, v27, v28, "%s fetching state for action set %s", (uint8_t *)v29, 0x16u);
      v36 = v103;
      swift_arrayDestroy(v103, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v36, -1, -1);
      swift_slowDealloc(v29, -1, -1);

      (*(void (**)(char *, uint64_t))(v94 + 8))(v19, v98);
    }
    else
    {

      (*(void (**)(char *, uint64_t))(v15 + 8))(v19, v24);
    }
    v60 = objc_msgSend(v95, "widgetManager");
    v61 = sub_10000527C(&qword_1000A5200);
    v62 = (void **)swift_allocObject(v61, 40, 7);
    *((_OWORD *)v62 + 1) = xmmword_100086CF0;
    v62[4] = v26;
    aBlock = v62;
    specialized Array._endMutation()(v62);
    v63 = aBlock;
    sub_100008CBC(0, &qword_1000A5080, HMActionSet_ptr);
    v64 = v26;
    v65.super.isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(v63);
    v67 = v92;
    v66 = v93;
    (*(void (**)(char *, uint64_t, uint64_t))(v93 + 16))(v92, a1, v11);
    v68 = *(unsigned __int8 *)(v66 + 80);
    v69 = (v68 + 16) & ~v68;
    v70 = swift_allocObject(&unk_10009E340, v69 + v97, v68 | 7);
    (*(void (**)(uint64_t, char *, uint64_t))(v66 + 32))(v70 + v69, v67, v11);
    v109 = sub_10001B918;
    v110 = v70;
    aBlock = _NSConcreteStackBlock;
    v106 = 1107296256;
    v107 = sub_10001916C;
    v108 = &unk_10009E358;
    v71 = _Block_copy(&aBlock);
    swift_release(v110);
    objc_msgSend(v60, "fetchStateForActionSets:completion:", v65.super.isa, v71);
    _Block_release(v71);

    goto LABEL_31;
  }
  v91 = v17;
  v94 = v15;
  if (qword_1000A4F08 != -1)
    swift_once(&qword_1000A4F08, sub_100053184);
  v37 = v98;
  v38 = sub_100014698(v98, (uint64_t)qword_1000A7A80);
  v39 = v94;
  v40 = v91;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v94 + 16))(v91, v38, v37);
  v41 = sub_100008BB8(v96, (uint64_t)v10);
  v42 = Logger.logObject.getter(v41);
  v89 = static os_log_type_t.default.getter(v42);
  if (!os_log_type_enabled(v42, (os_log_type_t)v89))
  {
    sub_100008BFC((uint64_t)v10);

    (*(void (**)(uint64_t, uint64_t))(v39 + 8))(v40, v37);
LABEL_30:
    v60 = objc_msgSend(v95, "widgetManager");
    sub_100019170();
    v80 = v79;
    sub_100008CBC(0, &qword_1000A5040, HMCharacteristic_ptr);
    v65.super.isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(v80);
    (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v14, a1, v11);
    v81 = *(unsigned __int8 *)(v12 + 80);
    v82 = v14;
    v83 = (v81 + 16) & ~v81;
    v84 = swift_allocObject(&unk_10009E2F0, v83 + v97, v81 | 7);
    (*(void (**)(uint64_t, char *, uint64_t))(v12 + 32))(v84 + v83, v82, v11);
    v109 = sub_10001B840;
    v110 = v84;
    aBlock = _NSConcreteStackBlock;
    v106 = 1107296256;
    v107 = sub_10001916C;
    v108 = &unk_10009E308;
    v85 = _Block_copy(&aBlock);
    swift_release(v110);
    objc_msgSend(v60, "fetchStateForCharacteristics:completion:", v65.super.isa, v85);
    _Block_release(v85);
LABEL_31:

    return;
  }
  v93 = v12;
  v43 = swift_slowAlloc(22, -1);
  v87 = (void **)swift_slowAlloc(64, -1);
  aBlock = v87;
  *(_DWORD *)v43 = 136315394;
  v104 = (_QWORD *)sub_100023980(0x6174536863746566, 0xEC00000029286574, (uint64_t *)&aBlock);
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v104, &aBlock, v43 + 4, v43 + 12);
  v88 = (uint8_t *)v43;
  *(_WORD *)(v43 + 12) = 2080;
  sub_100019170();
  v45 = v44;
  if (!((unint64_t)v44 >> 62))
  {
    v46 = *(_QWORD *)((v44 & 0xFFFFFFFFFFFFF8) + 0x10);
    v92 = v14;
    if (v46)
      goto LABEL_11;
LABEL_28:
    swift_bridgeObjectRelease(v45);
    v56 = _swiftEmptyArrayStorage;
LABEL_29:
    v104 = v56;
    v72 = v88;
    v73 = sub_10000527C(&qword_1000A51F0);
    v74 = sub_10001B864();
    v75 = BidirectionalCollection<>.joined(separator:)(8236, 0xE200000000000000, v73, v74);
    v77 = v76;
    swift_bridgeObjectRelease(v56);
    v104 = (_QWORD *)sub_100023980(v75, v77, (uint64_t *)&aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v104, &aBlock, v72 + 14, v72 + 22);
    swift_bridgeObjectRelease(v77);
    sub_100008BFC((uint64_t)v10);
    _os_log_impl((void *)&_mh_execute_header, v42, (os_log_type_t)v89, "%s fetching characteristics %s", v72, 0x16u);
    v78 = v87;
    swift_arrayDestroy(v87, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v78, -1, -1);
    swift_slowDealloc(v72, -1, -1);

    (*(void (**)(uint64_t, uint64_t))(v94 + 8))(v91, v98);
    v14 = v92;
    v12 = v93;
    goto LABEL_30;
  }
  if (v44 >= 0)
    v44 &= 0xFFFFFFFFFFFFFF8uLL;
  v46 = _CocoaArrayWrapper.endIndex.getter(v44);
  v92 = v14;
  if (!v46)
    goto LABEL_28;
LABEL_11:
  v90 = a1;
  v86 = v11;
  v104 = _swiftEmptyArrayStorage;
  sub_10002D884(0, v46 & ~(v46 >> 63), 0);
  if ((v46 & 0x8000000000000000) == 0)
  {
    v47 = 0;
    v99 = v45 & 0xC000000000000001;
    v100 = v42;
    v101 = v10;
    v48 = v45;
    v49 = v46;
    do
    {
      if (v99)
        v50 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v47, v45);
      else
        v50 = *(id *)(v45 + 8 * v47 + 32);
      v51 = v50;
      v52 = HMCharacteristic.characteristicKind.getter();
      v53 = CharacteristicKind.humanReadableDescription.getter(v52);
      v55 = v54;
      (*(void (**)(char *, void **))(v102 + 8))(v7, v103);

      v56 = v104;
      if ((swift_isUniquelyReferenced_nonNull_native(v104) & 1) == 0)
      {
        sub_10002D884(0, v56[2] + 1, 1);
        v56 = v104;
      }
      v58 = v56[2];
      v57 = v56[3];
      if (v58 >= v57 >> 1)
      {
        sub_10002D884(v57 > 1, v58 + 1, 1);
        v56 = v104;
      }
      ++v47;
      v56[2] = v58 + 1;
      v59 = &v56[2 * v58];
      v59[4] = v53;
      v59[5] = v55;
      v42 = v100;
      v10 = v101;
      v45 = v48;
    }
    while (v49 != v47);
    swift_bridgeObjectRelease(v48);
    v11 = v86;
    a1 = v90;
    goto LABEL_29;
  }
  __break(1u);
}

void sub_1000187B8(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  id v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  NSObject *v20;
  os_log_type_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;

  v6 = type metadata accessor for Logger(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v28 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1)
  {
    v10 = a1;
    v11 = objc_msgSend(v10, "isOnByActionSetUniqueIdentifier");
    v12 = type metadata accessor for UUID(0);
    v13 = sub_100008CBC(0, (unint64_t *)&qword_1000A5210, NSNumber_ptr);
    v14 = sub_100008C7C((unint64_t *)&qword_1000A5020, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v15 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v11, v12, v13, v14);

    v16 = sub_100018BA0(v15);
    swift_bridgeObjectRelease(v15);
    v32 = v16;
    v17 = sub_10000527C(&qword_1000A51E8);
    CheckedContinuation.resume(returning:)(&v32, v17);

  }
  else
  {
    if (qword_1000A4F08 != -1)
      swift_once(&qword_1000A4F08, sub_100053184);
    v18 = sub_100014698(v6, (uint64_t)qword_1000A7A80);
    (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, v18, v6);
    swift_errorRetain(a2);
    v19 = swift_errorRetain(a2);
    v20 = Logger.logObject.getter(v19);
    v21 = static os_log_type_t.default.getter(v20);
    if (os_log_type_enabled(v20, v21))
    {
      v30 = a3;
      v22 = swift_slowAlloc(22, -1);
      v28 = (uint64_t *)swift_slowAlloc(8, -1);
      v29 = swift_slowAlloc(32, -1);
      v32 = v29;
      *(_DWORD *)v22 = 136315394;
      v31 = sub_100023980(0x6174536863746566, 0xEC00000029286574, (uint64_t *)&v32);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v31, &v32, v22 + 4, v22 + 12);
      *(_WORD *)(v22 + 12) = 2112;
      if (a2)
      {
        swift_errorRetain(a2);
        v23 = _swift_stdlib_bridgeErrorToNSError(a2);
        v31 = v23;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v31, &v32, v22 + 14, v22 + 22);
      }
      else
      {
        v31 = 0;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v31, &v32, v22 + 14, v22 + 22);
        v23 = 0;
      }
      v24 = v28;
      *v28 = v23;
      swift_errorRelease(a2);
      swift_errorRelease(a2);
      _os_log_impl((void *)&_mh_execute_header, v20, v21, "%s Failed to get current action set state with error: %@", (uint8_t *)v22, 0x16u);
      v25 = sub_10000527C(&qword_1000A5208);
      swift_arrayDestroy(v24, 1, v25);
      swift_slowDealloc(v24, -1, -1);
      v26 = v29;
      swift_arrayDestroy(v29, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v26, -1, -1);
      swift_slowDealloc(v22, -1, -1);

      (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
    }
    else
    {
      swift_errorRelease(a2);
      swift_errorRelease(a2);

      (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
    }
    v32 = sub_10002F268((uint64_t)_swiftEmptyArrayStorage);
    v27 = sub_10000527C(&qword_1000A51E8);
    CheckedContinuation.resume(returning:)(&v32, v27);
  }
}

uint64_t sub_100018BA0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  uint64_t result;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  int64_t v23;
  unint64_t v24;
  int64_t v25;
  int64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  char *v35;
  void (*v36)(char *, uint64_t, uint64_t);
  uint64_t v37;
  id v38;
  char *v39;
  char *v40;
  char *v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  char v48;
  unint64_t v49;
  BOOL v50;
  uint64_t v51;
  uint64_t v52;
  int64_t v53;
  uint64_t v54;
  char *v55;
  char *v56;
  char *v57;
  uint64_t v58;
  char *v59;
  char *v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  int64_t v67;
  uint64_t v68;
  _OWORD v69[2];
  _OWORD v70[2];

  v65 = sub_10000527C(&qword_1000A5218);
  __chkstk_darwin(v65);
  v64 = (char *)&v52 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v63 = sub_10000527C(&qword_1000A5220);
  __chkstk_darwin(v63);
  v62 = (char *)&v52 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for UUID(0);
  v61 = *(_QWORD *)(v4 - 8);
  v5 = __chkstk_darwin(v4);
  v7 = (char *)&v52 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v59 = (char *)&v52 - v8;
  v58 = sub_10000527C(&qword_1000A5228);
  v9 = __chkstk_darwin(v58);
  v57 = (char *)&v52 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v56 = (char *)&v52 - v11;
  v66 = a1;
  v12 = *(_QWORD *)(a1 + 16);
  if (v12)
  {
    sub_10000527C(&qword_1000A5230);
    v13 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)(v12);
  }
  else
  {
    v13 = &_swiftEmptyDictionarySingleton;
  }
  v14 = *(_QWORD *)(v66 + 64);
  v54 = v66 + 64;
  v15 = -1 << *(_BYTE *)(v66 + 32);
  if (-v15 < 64)
    v16 = ~(-1 << -(char)v15);
  else
    v16 = -1;
  v17 = v16 & v14;
  v52 = -1 << *(_BYTE *)(v66 + 32);
  v53 = (unint64_t)(63 - v15) >> 6;
  v18 = (char *)(v13 + 8);
  swift_bridgeObjectRetain(v66);
  result = swift_retain(v13);
  v67 = 0;
  v55 = (char *)&type metadata for Any + 8;
  v60 = v7;
  v20 = (uint64_t)v57;
  while (1)
  {
    if (v17)
    {
      v68 = (v17 - 1) & v17;
      v22 = __clz(__rbit64(v17)) | (v67 << 6);
      goto LABEL_28;
    }
    v23 = v67 + 1;
    if (__OFADD__(v67, 1))
    {
LABEL_38:
      __break(1u);
      goto LABEL_39;
    }
    if (v23 >= v53)
      goto LABEL_37;
    v24 = *(_QWORD *)(v54 + 8 * v23);
    v25 = v67 + 1;
    if (!v24)
    {
      v25 = v67 + 2;
      if (v67 + 2 >= v53)
        goto LABEL_37;
      v24 = *(_QWORD *)(v54 + 8 * v25);
      if (!v24)
      {
        v25 = v67 + 3;
        if (v67 + 3 >= v53)
          goto LABEL_37;
        v24 = *(_QWORD *)(v54 + 8 * v25);
        if (!v24)
        {
          v25 = v67 + 4;
          if (v67 + 4 >= v53)
            goto LABEL_37;
          v24 = *(_QWORD *)(v54 + 8 * v25);
          if (!v24)
            break;
        }
      }
    }
LABEL_27:
    v67 = v25;
    v68 = (v24 - 1) & v24;
    v22 = __clz(__rbit64(v24)) + (v25 << 6);
LABEL_28:
    v27 = v66;
    v28 = v61;
    v29 = *(_QWORD *)(v61 + 72);
    v30 = (uint64_t)v56;
    (*(void (**)(char *, unint64_t, uint64_t))(v61 + 16))(v56, *(_QWORD *)(v66 + 48) + v29 * v22, v4);
    v31 = *(void **)(*(_QWORD *)(v27 + 56) + 8 * v22);
    v32 = v58;
    *(_QWORD *)(v30 + *(int *)(v58 + 48)) = v31;
    sub_10001B984(v30, v20);
    v33 = *(int *)(v32 + 48);
    v34 = v64;
    v35 = &v64[*(int *)(v65 + 48)];
    v36 = *(void (**)(char *, uint64_t, uint64_t))(v28 + 32);
    v36(v64, v20, v4);
    *(_QWORD *)&v70[0] = *(_QWORD *)(v20 + v33);
    v37 = sub_100008CBC(0, (unint64_t *)&qword_1000A5210, NSNumber_ptr);
    v38 = v31;
    swift_dynamicCast(v35, v70, v37, v55, 7);
    v39 = v62;
    v40 = &v62[*(int *)(v63 + 48)];
    v36(v62, (uint64_t)v34, v4);
    sub_10001B9CC(v35, v40);
    v41 = v59;
    v36(v59, (uint64_t)v39, v4);
    sub_10001B9CC(v40, v70);
    v42 = v60;
    v36(v60, (uint64_t)v41, v4);
    sub_10001B9CC(v70, v69);
    v43 = v13[5];
    v44 = sub_100008C7C((unint64_t *)&qword_1000A5020, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    result = dispatch thunk of Hashable._rawHashValue(seed:)(v43, v4, v44);
    v45 = -1 << *((_BYTE *)v13 + 32);
    v46 = result & ~v45;
    v47 = v46 >> 6;
    if (((-1 << v46) & ~*(_QWORD *)&v18[8 * (v46 >> 6)]) != 0)
    {
      v21 = __clz(__rbit64((-1 << v46) & ~*(_QWORD *)&v18[8 * (v46 >> 6)])) | v46 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v48 = 0;
      v49 = (unint64_t)(63 - v45) >> 6;
      do
      {
        if (++v47 == v49 && (v48 & 1) != 0)
        {
          __break(1u);
          goto LABEL_38;
        }
        v50 = v47 == v49;
        if (v47 == v49)
          v47 = 0;
        v48 |= v50;
        v51 = *(_QWORD *)&v18[8 * v47];
      }
      while (v51 == -1);
      v21 = __clz(__rbit64(~v51)) + (v47 << 6);
    }
    *(_QWORD *)&v18[(v21 >> 3) & 0x1FFFFFFFFFFFFFF8] |= 1 << v21;
    v36((char *)(v13[6] + v21 * v29), (uint64_t)v42, v4);
    result = (uint64_t)sub_10001B9CC(v69, (_OWORD *)(v13[7] + 32 * v21));
    ++v13[2];
    v17 = v68;
  }
  v26 = v67 + 5;
  if (v67 + 5 >= v53)
  {
LABEL_37:
    swift_release(v13);
    sub_100014DC4(v66);
    return (uint64_t)v13;
  }
  v24 = *(_QWORD *)(v54 + 8 * v26);
  if (v24)
  {
    v25 = v67 + 5;
    goto LABEL_27;
  }
  while (1)
  {
    v25 = v26 + 1;
    if (__OFADD__(v26, 1))
      break;
    if (v25 >= v53)
      goto LABEL_37;
    v24 = *(_QWORD *)(v54 + 8 * v25);
    ++v26;
    if (v24)
      goto LABEL_27;
  }
LABEL_39:
  __break(1u);
  return result;
}

void sub_100019170()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v7[16];

  v1 = type metadata accessor for CharacteristicKind(0);
  v2 = __chkstk_darwin(v1);
  __chkstk_darwin(v2);
  v3 = type metadata accessor for ServiceKind(0);
  v7[7] = *(_QWORD *)(v3 - 8);
  v7[8] = v3;
  v4 = __chkstk_darwin(v3);
  v7[6] = (char *)v7 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v6 = *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for WidgetTileInfo(0) + 56) + 8);
  v7[2] = _swiftEmptyArrayStorage;
  __asm { BR              X11 }
}

uint64_t sub_100019278@<X0>(void *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  id v3;
  void *v4;
  id v5;

  v3 = a1;
  ((void (*)(void))HMService.serviceKind.getter)();
  v4 = ServiceKind.widgetRelevantCharacteristic.getter();
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v2 - 152) + 8))(v1, *(_QWORD *)(v2 - 144));
  v5 = v3;
  *(_QWORD *)(v2 - 192) = sub_10001B520((uint64_t)v4, (uint64_t)v5);
  swift_bridgeObjectRelease(v4);

  return *(_QWORD *)(v2 - 192);
}

void sub_10001972C(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  id v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  NSObject *v18;
  os_log_type_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;

  v6 = type metadata accessor for Logger(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v26 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1)
  {
    v10 = a1;
    v11 = objc_msgSend(v10, "valueByCharacteristicUniqueIdentifier");
    v12 = type metadata accessor for UUID(0);
    v13 = sub_100008C7C((unint64_t *)&qword_1000A5020, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v14 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v11, v12, (char *)&type metadata for Any + 8, v13);

    v30 = v14;
    v15 = sub_10000527C(&qword_1000A51E8);
    CheckedContinuation.resume(returning:)(&v30, v15);

  }
  else
  {
    if (qword_1000A4F08 != -1)
      swift_once(&qword_1000A4F08, sub_100053184);
    v16 = sub_100014698(v6, (uint64_t)qword_1000A7A80);
    (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, v16, v6);
    swift_errorRetain(a2);
    v17 = swift_errorRetain(a2);
    v18 = Logger.logObject.getter(v17);
    v19 = static os_log_type_t.default.getter(v18);
    if (os_log_type_enabled(v18, v19))
    {
      v28 = a3;
      v20 = swift_slowAlloc(22, -1);
      v26 = (uint64_t *)swift_slowAlloc(8, -1);
      v27 = swift_slowAlloc(32, -1);
      v30 = v27;
      *(_DWORD *)v20 = 136315394;
      v29 = sub_100023980(0x6174536863746566, 0xEC00000029286574, (uint64_t *)&v30);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v29, &v30, v20 + 4, v20 + 12);
      *(_WORD *)(v20 + 12) = 2112;
      if (a2)
      {
        swift_errorRetain(a2);
        v21 = _swift_stdlib_bridgeErrorToNSError(a2);
        v29 = v21;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v29, &v30, v20 + 14, v20 + 22);
      }
      else
      {
        v29 = 0;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v29, &v30, v20 + 14, v20 + 22);
        v21 = 0;
      }
      v22 = v26;
      *v26 = v21;
      swift_errorRelease(a2);
      swift_errorRelease(a2);
      _os_log_impl((void *)&_mh_execute_header, v18, v19, "%s Failed to get current characteristic values with error: %@", (uint8_t *)v20, 0x16u);
      v23 = sub_10000527C(&qword_1000A5208);
      swift_arrayDestroy(v22, 1, v23);
      swift_slowDealloc(v22, -1, -1);
      v24 = v27;
      swift_arrayDestroy(v27, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v24, -1, -1);
      swift_slowDealloc(v20, -1, -1);

      (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
    }
    else
    {
      swift_errorRelease(a2);
      swift_errorRelease(a2);

      (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
    }
    v30 = sub_10002F268((uint64_t)_swiftEmptyArrayStorage);
    v25 = sub_10000527C(&qword_1000A51E8);
    CheckedContinuation.resume(returning:)(&v30, v25);
  }
}

void sub_100019AE8(uint64_t a1, void *a2, void *a3)
{
  uint64_t v5;
  void (*v6)(void *, void *);
  id v7;
  id v8;

  v6 = *(void (**)(void *, void *))(a1 + 32);
  v5 = *(_QWORD *)(a1 + 40);
  swift_retain(v5);
  v8 = a2;
  v7 = a3;
  v6(a2, a3);
  swift_release(v5);

}

void *sub_100019B5C()
{
  uint64_t v0;
  uint64_t v1;
  int v2;
  uint64_t v3;
  void *v4;
  id v5;
  id v6;
  id v7;
  uint64_t v8;
  uint64_t inited;
  uint64_t v10;
  void *result;
  id v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t i;
  uint64_t v18;
  id v19;
  void *v20;
  id v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v1 = v0 + *(int *)(type metadata accessor for WidgetTileInfo(0) + 56);
  v2 = *(unsigned __int8 *)(v1 + 8);
  if ((v2 - 2) < 2)
    return &_swiftEmptySetSingleton;
  v4 = *(void **)v1;
  if (!v2)
  {
    v5 = v4;
    v6 = objc_msgSend(v5, "accessory");
    if (v6)
    {
      v7 = v6;
      v8 = sub_10000527C(&qword_1000A5200);
      inited = swift_initStackObject(v8, &v28);
      *(_OWORD *)(inited + 16) = xmmword_100086CF0;
      *(_QWORD *)(inited + 32) = v7;
      v29 = inited;
      specialized Array._endMutation()(inited);
      v10 = v29;
      v3 = sub_100014F4C(v29);
      swift_bridgeObjectRelease(v10);

      return (void *)v3;
    }

    return &_swiftEmptySetSingleton;
  }
  v12 = v4;
  v13 = objc_msgSend(v12, "services");
  v14 = sub_100008CBC(0, &qword_1000A5078, HMService_ptr);
  v15 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v13, v14);

  v29 = (uint64_t)_swiftEmptyArrayStorage;
  if ((unint64_t)v15 >> 62)
  {
    if (v15 < 0)
      v26 = v15;
    else
      v26 = v15 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v15);
    result = (void *)_CocoaArrayWrapper.endIndex.getter(v26);
    v16 = (uint64_t)result;
    if (result)
      goto LABEL_9;
LABEL_25:
    swift_bridgeObjectRelease(v15);
    v25 = _swiftEmptyArrayStorage;
    goto LABEL_26;
  }
  v16 = *(_QWORD *)((v15 & 0xFFFFFFFFFFFFF8) + 0x10);
  result = (void *)swift_bridgeObjectRetain(v15);
  if (!v16)
    goto LABEL_25;
LABEL_9:
  if (v16 < 1)
  {
    __break(1u);
    return result;
  }
  for (i = 0; i != v16; ++i)
  {
    if ((v15 & 0xC000000000000001) != 0)
      v19 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(i, v15);
    else
      v19 = *(id *)(v15 + 8 * i + 32);
    v20 = v19;
    v21 = objc_msgSend(v19, "accessory");

    if (v21)
    {
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v22);
      v24 = *(_QWORD *)((v29 & 0xFFFFFFFFFFFFFF8) + 0x10);
      v23 = *(_QWORD *)((v29 & 0xFFFFFFFFFFFFFF8) + 0x18);
      if (v24 >= v23 >> 1)
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v23 > 1, v24 + 1, 1);
      v18 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v24, v21);
      specialized Array._endMutation()(v18);
    }
  }
  swift_bridgeObjectRelease(v15);
  v25 = (_QWORD *)v29;
LABEL_26:
  swift_bridgeObjectRelease(v15);
  v27 = sub_100014F4C((uint64_t)v25);

  swift_bridgeObjectRelease(v25);
  return (void *)v27;
}

void sub_100019DE4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  int *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v2 = v1;
  v4 = type metadata accessor for UUID(0);
  v5 = sub_100008C7C((unint64_t *)&qword_1000A5020, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
  dispatch thunk of Hashable.hash(into:)(a1, v4, v5);
  v6 = (int *)type metadata accessor for WidgetTileInfo(0);
  v7 = (uint64_t *)(v1 + v6[6]);
  v8 = *v7;
  v9 = v7[1];
  swift_bridgeObjectRetain(v9);
  String.hash(into:)(a1, v8, v9);
  swift_bridgeObjectRelease(v9);
  v10 = (uint64_t *)(v2 + v6[7]);
  v11 = v10[1];
  if (v11)
  {
    v12 = *v10;
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain(v11);
    String.hash(into:)(a1, v12, v11);
    swift_bridgeObjectRelease(v11);
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  v13 = (uint64_t *)(v2 + v6[8]);
  v14 = *v13;
  v15 = v13[1];
  swift_bridgeObjectRetain(v15);
  String.hash(into:)(a1, v14, v15);
  swift_bridgeObjectRelease(v15);
  v16 = (uint64_t *)(v2 + v6[9]);
  v17 = *v16;
  v18 = v16[1];
  swift_bridgeObjectRetain(v18);
  String.hash(into:)(a1, v17, v18);
  swift_bridgeObjectRelease(v18);
  v19 = *(_QWORD *)(v2 + v6[12]);
  swift_retain(v19);
  Color.hash(into:)(a1, v19);
  swift_release(v19);
  Hasher._combine(_:)(*(_BYTE *)(v2 + v6[13]));
  __asm { BR              X10 }
}

void sub_100019F78(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  uint64_t v18;
  void *v19;
  id v20;

  Hasher._combine(_:)(1uLL);
  v20 = v19;
  ((void (*)(uint64_t))NSObject.hash(into:))(v18);

}

uint64_t sub_100019FEC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for UUID(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 16))(a1, v1, v3);
}

Swift::Int sub_10001A024()
{
  _QWORD v1[9];

  Hasher.init(_seed:)(v1, 0);
  sub_100019DE4((uint64_t)v1);
  return Hasher._finalize()();
}

Swift::Int sub_10001A064(uint64_t a1)
{
  _QWORD v2[9];

  Hasher.init(_seed:)(v2, a1);
  sub_100019DE4((uint64_t)v2);
  return Hasher._finalize()();
}

uint64_t sub_10001A0A0()
{
  return sub_100008C7C(&qword_1000A51B0, type metadata accessor for WidgetTileInfo, (uint64_t)&unk_100086DC8);
}

uint64_t sub_10001A0CC()
{
  return sub_100008C7C((unint64_t *)&qword_1000A5020, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
}

uint64_t sub_10001A0F8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  Swift::String v6;
  uint64_t v7;
  uint64_t v8;
  Swift::String v9;
  void *object;
  Swift::String v11;
  int *v12;
  uint64_t *v13;
  uint64_t v14;
  void *v15;
  Swift::String v16;
  Swift::String v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  void *v24;
  Swift::String v25;
  Swift::String v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  Swift::String v30;
  Swift::String v31;
  uint64_t v32;
  uint64_t v33;
  Swift::String v34;
  void *v35;
  Swift::String v36;
  uint64_t *v37;
  uint64_t v38;
  void *v39;
  Swift::String v40;
  Swift::String v41;
  uint64_t *v42;
  uint64_t v43;
  void *v44;
  Swift::String v45;
  Swift::String v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  Swift::String v50;
  char v51;
  BOOL v52;
  uint64_t v53;
  unint64_t v54;
  unint64_t v55;
  _QWORD v57[2];
  uint64_t v58;
  unint64_t v59;

  v1 = v0;
  v2 = type metadata accessor for DeviceDisplayNames(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)v57 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v58 = 0;
  v59 = 0xE000000000000000;
  _StringGuts.grow(_:)(156);
  v6._countAndFlagsBits = 0xD000000000000014;
  v6._object = (void *)0x800000010008A170;
  String.append(_:)(v6);
  v7 = type metadata accessor for UUID(0);
  v8 = sub_100008C7C(&qword_1000A7600, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
  v9._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v7, v8);
  object = v9._object;
  String.append(_:)(v9);
  swift_bridgeObjectRelease(object);
  v11._countAndFlagsBits = 0x203A656D616E202CLL;
  v11._object = (void *)0xE800000000000000;
  String.append(_:)(v11);
  v12 = (int *)type metadata accessor for WidgetTileInfo(0);
  v13 = (uint64_t *)(v0 + v12[6]);
  v14 = *v13;
  v15 = (void *)v13[1];
  swift_bridgeObjectRetain(v15);
  v16._countAndFlagsBits = v14;
  v16._object = v15;
  String.append(_:)(v16);
  swift_bridgeObjectRelease(v15);
  v17._countAndFlagsBits = 0x616C70736964202CLL;
  v17._object = (void *)0xEF203A656D614E79;
  String.append(_:)(v17);
  v18 = (uint64_t *)(v0 + v12[7]);
  v19 = *v18;
  v20 = v18[1];
  swift_bridgeObjectRetain(v20);
  swift_bridgeObjectRetain(v15);
  v21 = DeviceDisplayNames.init(name:roomName:)(v14, v15, v19, v20);
  v22 = DeviceDisplayNames.displayName.getter(v21);
  v24 = v23;
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  v25._countAndFlagsBits = v22;
  v25._object = v24;
  String.append(_:)(v25);
  swift_bridgeObjectRelease(v24);
  v26._countAndFlagsBits = 0x614E6D6F6F72202CLL;
  v26._object = (void *)0xEC000000203A656DLL;
  String.append(_:)(v26);
  v27 = v18[1];
  if (v27)
    v28 = *v18;
  else
    v28 = 0;
  if (v27)
    v29 = (void *)v18[1];
  else
    v29 = (void *)0xE000000000000000;
  swift_bridgeObjectRetain(v27);
  v30._countAndFlagsBits = v28;
  v30._object = v29;
  String.append(_:)(v30);
  swift_bridgeObjectRelease(v29);
  v31._object = (void *)0x800000010008A190;
  v31._countAndFlagsBits = 0xD000000000000010;
  String.append(_:)(v31);
  v57[0] = sub_10007985C();
  v57[1] = v32;
  v33 = sub_10000527C(&qword_1000A51C8);
  v34._countAndFlagsBits = String.init<A>(describing:)(v57, v33);
  v35 = v34._object;
  String.append(_:)(v34);
  swift_bridgeObjectRelease(v35);
  v36._countAndFlagsBits = 0x79536E6F6369202CLL;
  v36._object = (void *)0xEE00203A6C6F626DLL;
  String.append(_:)(v36);
  v37 = (uint64_t *)(v1 + v12[8]);
  v38 = *v37;
  v39 = (void *)v37[1];
  swift_bridgeObjectRetain(v39);
  v40._countAndFlagsBits = v38;
  v40._object = v39;
  String.append(_:)(v40);
  swift_bridgeObjectRelease(v39);
  v41._countAndFlagsBits = 0xD000000000000017;
  v41._object = (void *)0x800000010008A1B0;
  String.append(_:)(v41);
  v42 = (uint64_t *)(v1 + v12[9]);
  v43 = *v42;
  v44 = (void *)v42[1];
  swift_bridgeObjectRetain(v44);
  v45._countAndFlagsBits = v43;
  v45._object = v44;
  String.append(_:)(v45);
  swift_bridgeObjectRelease(v44);
  v46._countAndFlagsBits = 0x636165527369202CLL;
  v46._object = (void *)0xEF203A656C626168;
  String.append(_:)(v46);
  if (*(_BYTE *)(v1 + v12[13]))
    v47 = 1702195828;
  else
    v47 = 0x65736C6166;
  if (*(_BYTE *)(v1 + v12[13]))
    v48 = 0xE400000000000000;
  else
    v48 = 0xE500000000000000;
  v49 = v48;
  String.append(_:)(*(Swift::String *)&v47);
  swift_bridgeObjectRelease(v48);
  v50._countAndFlagsBits = 0x697463417369202CLL;
  v50._object = (void *)0xEF203A6465746176;
  String.append(_:)(v50);
  v51 = sub_10001709C();
  v52 = (v51 & 1) == 0;
  if ((v51 & 1) != 0)
    v53 = 1702195828;
  else
    v53 = 0x65736C6166;
  if (v52)
    v54 = 0xE500000000000000;
  else
    v54 = 0xE400000000000000;
  v55 = v54;
  String.append(_:)(*(Swift::String *)&v53);
  swift_bridgeObjectRelease(v54);
  return v58;
}

unint64_t sub_10001A4C4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  Swift::Int v5;
  _QWORD v7[9];

  Hasher.init(_seed:)(v7, *(_QWORD *)(v2 + 40));
  String.hash(into:)(v7, a1, a2);
  v5 = Hasher._finalize()();
  return sub_10001A5C4(a1, a2, v5);
}

unint64_t sub_10001A528(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  Swift::Int v4;

  v2 = v1;
  v4 = AnyHashable._rawHashValue(seed:)(*(_QWORD *)(v2 + 40));
  return sub_10001A6A4(a1, v4);
}

unint64_t sub_10001A558(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = v1;
  v4 = *(_QWORD *)(v2 + 40);
  v5 = type metadata accessor for UUID(0);
  v6 = sub_100008C7C((unint64_t *)&qword_1000A5020, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
  v7 = dispatch thunk of Hashable._rawHashValue(seed:)(v4, v5, v6);
  return sub_10001A768(a1, v7);
}

unint64_t sub_10001A5C4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v9;
  _QWORD *v10;
  BOOL v11;
  uint64_t v12;
  _QWORD *v13;
  BOOL v14;

  v4 = v3 + 64;
  v5 = -1 << *(_BYTE *)(v3 + 32);
  v6 = a3 & ~v5;
  if (((*(_QWORD *)(v3 + 64 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0)
  {
    v9 = *(_QWORD *)(v3 + 48);
    v10 = (_QWORD *)(v9 + 16 * v6);
    v11 = *v10 == a1 && v10[1] == a2;
    if (!v11 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
    {
      v12 = ~v5;
      do
      {
        v6 = (v6 + 1) & v12;
        if (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) == 0)
          break;
        v13 = (_QWORD *)(v9 + 16 * v6);
        v14 = *v13 == a1 && v13[1] == a2;
      }
      while (!v14 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0);
    }
  }
  return v6;
}

unint64_t sub_10001A6A4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v6;
  char v7;
  _BYTE v9[40];

  v3 = -1 << *(_BYTE *)(v2 + 32);
  v4 = a2 & ~v3;
  if (((*(_QWORD *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFF8)) >> v4) & 1) != 0)
  {
    v6 = ~v3;
    do
    {
      sub_10001B9DC(*(_QWORD *)(v2 + 48) + 40 * v4, (uint64_t)v9);
      v7 = static AnyHashable.== infix(_:_:)(v9, a1);
      sub_100008F34((uint64_t)v9);
      if ((v7 & 1) != 0)
        break;
      v4 = (v4 + 1) & v6;
    }
    while (((*(_QWORD *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFF8)) >> v4) & 1) != 0);
  }
  return v4;
}

unint64_t sub_10001A768(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(char *, unint64_t, uint64_t);
  uint64_t v14;
  char v15;
  uint64_t v17;
  uint64_t v18;

  v3 = v2;
  v18 = a1;
  v5 = type metadata accessor for UUID(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = -1 << *(_BYTE *)(v3 + 32);
  v10 = a2 & ~v9;
  if (((*(_QWORD *)(v3 + 64 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) != 0)
  {
    v11 = ~v9;
    v12 = *(_QWORD *)(v6 + 72);
    v13 = *(void (**)(char *, unint64_t, uint64_t))(v6 + 16);
    do
    {
      v13(v8, *(_QWORD *)(v3 + 48) + v12 * v10, v5);
      v14 = sub_100008C7C((unint64_t *)&unk_1000A7670, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v15 = dispatch thunk of static Equatable.== infix(_:_:)(v8, v18, v5, v14);
      (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
      if ((v15 & 1) != 0)
        break;
      v10 = (v10 + 1) & v11;
    }
    while (((*(_QWORD *)(v3 + 64 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) != 0);
  }
  return v10;
}

void (*sub_10001A8A8(void (**a1)(id *a1), unint64_t a2, uint64_t a3))(_QWORD *)
{
  void (*v6)(id *);

  v6 = (void (*)(id *))malloc(0x28uLL);
  *a1 = v6;
  *((_QWORD *)v6 + 4) = sub_10001A980(v6, a2, a3);
  return sub_10001A8FC;
}

void (*sub_10001A900(void (**a1)(id *), unint64_t a2, uint64_t a3))(_QWORD *)
{
  void (*v6)(id *);

  v6 = (void (*)(id *))malloc(0x28uLL);
  *a1 = v6;
  *((_QWORD *)v6 + 4) = sub_10001A9F4(v6, a2, a3);
  return sub_10001A8FC;
}

void sub_10001A954(_QWORD *a1)
{
  void *v1;

  v1 = (void *)*a1;
  (*(void (**)(_QWORD))(*a1 + 32))(*a1);
  free(v1);
}

void (*sub_10001A980(void (*result)(id *a1), unint64_t a2, uint64_t a3))(id *a1)
{
  void (*v3)(id *);
  id v4;

  v3 = result;
  if ((a3 & 0xC000000000000001) != 0)
  {
    v4 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(a2, a3);
    goto LABEL_5;
  }
  if ((a2 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (*(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10) > a2)
  {
    v4 = *(id *)(a3 + 8 * a2 + 32);
LABEL_5:
    *(_QWORD *)v3 = v4;
    return destroy for WidgetTileInfo.ContentType;
  }
  __break(1u);
  return result;
}

void destroy for WidgetTileInfo.ContentType(id *a1)
{

}

void (*sub_10001A9F4(void (*result)(id *), unint64_t a2, uint64_t a3))(id *)
{
  void (*v3)(id *);
  id v4;

  v3 = result;
  if ((a3 & 0xC000000000000001) != 0)
  {
    v4 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(a2, a3);
    goto LABEL_5;
  }
  if ((a2 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (*(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10) > a2)
  {
    v4 = *(id *)(a3 + 8 * a2 + 32);
LABEL_5:
    *(_QWORD *)v3 = v4;
    return j__s10HomeWidget14WidgetTileInfoV11ContentTypeOwxx;
  }
  __break(1u);
  return result;
}

void sub_10001AA60(uint64_t a1, char a2)
{
  __asm { BR              X10 }
}

uint64_t sub_10001AA94(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  void *v4;
  void *v5;
  id v6;
  id v7;
  char v8;

  if (a4)
    return 0;
  sub_100008CBC(0, &qword_1000A51D0, NSObject_ptr);
  v6 = v5;
  v7 = v4;
  v8 = ((uint64_t (*)(id, id))static NSObject.== infix(_:_:))(v6, v7);

  return v8 & 1;
}

uint64_t sub_10001AB38(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  char *v37;
  char v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  char v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  char v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  char v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  _QWORD *v70;
  uint64_t v71;
  char v72;
  uint64_t v73;
  char v74;
  int *v75;
  char v76;
  int v77;
  int *v78;
  int v79;
  uint64_t v80;
  int *v81;
  char *v82;
  char *v83;
  char *v84;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  char *v88;
  char *v89;

  v4 = type metadata accessor for WidgetTileInfo(0);
  v5 = __chkstk_darwin(v4);
  v85 = (char *)&v80 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __chkstk_darwin(v5);
  v83 = (char *)&v80 - v8;
  v9 = __chkstk_darwin(v7);
  v82 = (char *)&v80 - v10;
  v11 = __chkstk_darwin(v9);
  v84 = (char *)&v80 - v12;
  v13 = __chkstk_darwin(v11);
  v88 = (char *)&v80 - v14;
  v15 = __chkstk_darwin(v13);
  v86 = (uint64_t)&v80 - v16;
  v17 = __chkstk_darwin(v15);
  v89 = (char *)&v80 - v18;
  v19 = __chkstk_darwin(v17);
  v87 = (uint64_t)&v80 - v20;
  v21 = __chkstk_darwin(v19);
  v23 = (char *)&v80 - v22;
  v24 = __chkstk_darwin(v21);
  v26 = (char *)&v80 - v25;
  v27 = __chkstk_darwin(v24);
  v29 = (char *)&v80 - v28;
  v30 = __chkstk_darwin(v27);
  v32 = (char *)&v80 - v31;
  v33 = __chkstk_darwin(v30);
  v35 = (char *)&v80 - v34;
  __chkstk_darwin(v33);
  v37 = (char *)&v80 - v36;
  v38 = static UUID.== infix(_:_:)(a1, a2);
  sub_100008BB8(a1, (uint64_t)v37);
  sub_100008BB8(a2, (uint64_t)v35);
  if ((v38 & 1) == 0)
  {
    sub_100008BFC((uint64_t)v37);
    sub_100008BFC((uint64_t)v35);
    sub_100008BB8(a1, (uint64_t)v32);
    sub_100008BB8(a2, (uint64_t)v29);
    v46 = (uint64_t)v89;
    goto LABEL_9;
  }
  v81 = (int *)v4;
  v39 = *(int *)(v4 + 24);
  v40 = *(_QWORD *)&v37[v39];
  v41 = *(_QWORD *)&v37[v39 + 8];
  v42 = &v35[v39];
  v43 = *((_QWORD *)v42 + 1);
  if (v40 == *(_QWORD *)v42 && v41 == v43)
  {
    sub_100008BFC((uint64_t)v37);
    sub_100008BFC((uint64_t)v35);
    sub_100008BB8(a1, (uint64_t)v32);
    sub_100008BB8(a2, (uint64_t)v29);
    v46 = (uint64_t)v89;
    goto LABEL_18;
  }
  v45 = _stringCompareWithSmolCheck(_:_:expecting:)(v40, v41, *(_QWORD *)v42, v43, 0);
  sub_100008BFC((uint64_t)v37);
  sub_100008BFC((uint64_t)v35);
  sub_100008BB8(a1, (uint64_t)v32);
  sub_100008BB8(a2, (uint64_t)v29);
  v46 = (uint64_t)v89;
  if ((v45 & 1) == 0)
  {
LABEL_9:
    sub_100008BFC((uint64_t)v29);
    sub_100008BFC((uint64_t)v32);
LABEL_10:
    v48 = (uint64_t)v82;
    v47 = (uint64_t)v83;
    v49 = (uint64_t)v84;
LABEL_11:
    sub_100008BB8(a1, (uint64_t)v26);
    sub_100008BB8(a2, (uint64_t)v23);
    goto LABEL_12;
  }
LABEL_18:
  v55 = v81[7];
  v56 = &v32[v55];
  v57 = *(_QWORD *)&v32[v55 + 8];
  v58 = &v29[v55];
  v59 = *((_QWORD *)v58 + 1);
  if (!v57)
  {
    swift_bridgeObjectRetain(*((_QWORD *)v58 + 1));
    sub_100008BFC((uint64_t)v29);
    sub_100008BFC((uint64_t)v32);
    v48 = (uint64_t)v82;
    v47 = (uint64_t)v83;
    v49 = (uint64_t)v84;
    if (!v59)
      goto LABEL_25;
    swift_bridgeObjectRelease(v59);
    goto LABEL_11;
  }
  if (!v59)
  {
    swift_bridgeObjectRetain(v57);
    sub_100008BFC((uint64_t)v29);
    sub_100008BFC((uint64_t)v32);
    swift_bridgeObjectRelease(v57);
    goto LABEL_10;
  }
  v49 = (uint64_t)v84;
  if (*(_QWORD *)v56 != *(_QWORD *)v58 || v57 != v59)
  {
    v60 = _stringCompareWithSmolCheck(_:_:expecting:)(*(_QWORD *)v56, v57, *(_QWORD *)v58, *((_QWORD *)v58 + 1), 0);
    swift_bridgeObjectRetain(v57);
    sub_100008BFC((uint64_t)v29);
    sub_100008BFC((uint64_t)v32);
    swift_bridgeObjectRelease(v57);
    sub_100008BB8(a1, (uint64_t)v26);
    sub_100008BB8(a2, (uint64_t)v23);
    v48 = (uint64_t)v82;
    v47 = (uint64_t)v83;
    if ((v60 & 1) != 0)
      goto LABEL_28;
LABEL_12:
    sub_100008BFC((uint64_t)v26);
    sub_100008BFC((uint64_t)v23);
    v50 = v87;
    sub_100008BB8(a1, v87);
    sub_100008BB8(a2, v46);
    v51 = (uint64_t)v88;
    goto LABEL_13;
  }
  swift_bridgeObjectRetain(v57);
  sub_100008BFC((uint64_t)v29);
  sub_100008BFC((uint64_t)v32);
  swift_bridgeObjectRelease(v57);
  v48 = (uint64_t)v82;
  v47 = (uint64_t)v83;
LABEL_25:
  sub_100008BB8(a1, (uint64_t)v26);
  sub_100008BB8(a2, (uint64_t)v23);
LABEL_28:
  v61 = v81[8];
  v62 = *(_QWORD *)&v26[v61];
  v63 = *(_QWORD *)&v26[v61 + 8];
  v64 = &v23[v61];
  v65 = *((_QWORD *)v64 + 1);
  if (v62 != *(_QWORD *)v64 || v63 != v65)
  {
    v66 = _stringCompareWithSmolCheck(_:_:expecting:)(v62, v63, *(_QWORD *)v64, v65, 0);
    sub_100008BFC((uint64_t)v26);
    sub_100008BFC((uint64_t)v23);
    v50 = v87;
    sub_100008BB8(a1, v87);
    sub_100008BB8(a2, v46);
    v51 = (uint64_t)v88;
    if ((v66 & 1) != 0)
      goto LABEL_32;
LABEL_13:
    sub_100008BFC(v50);
    sub_100008BFC(v46);
    v52 = v86;
    sub_100008BB8(a1, v86);
    sub_100008BB8(a2, v51);
    v53 = (uint64_t)v85;
    goto LABEL_14;
  }
  sub_100008BFC((uint64_t)v26);
  sub_100008BFC((uint64_t)v23);
  v50 = v87;
  sub_100008BB8(a1, v87);
  sub_100008BB8(a2, v46);
  v51 = (uint64_t)v88;
LABEL_32:
  v67 = v81[9];
  v68 = *(_QWORD *)(v50 + v67);
  v69 = *(_QWORD *)(v50 + v67 + 8);
  v70 = (_QWORD *)(v46 + v67);
  v71 = v70[1];
  v52 = v86;
  if (v68 == *v70 && v69 == v71)
  {
    sub_100008BFC(v50);
    sub_100008BFC(v46);
    sub_100008BB8(a1, v52);
    sub_100008BB8(a2, v51);
    v53 = (uint64_t)v85;
    goto LABEL_36;
  }
  v72 = _stringCompareWithSmolCheck(_:_:expecting:)(v68, v69, *v70, v71, 0);
  v73 = v50;
  v74 = v72;
  sub_100008BFC(v73);
  sub_100008BFC(v46);
  sub_100008BB8(a1, v52);
  sub_100008BB8(a2, v51);
  v53 = (uint64_t)v85;
  if ((v74 & 1) == 0)
  {
LABEL_14:
    sub_100008BFC(v52);
    sub_100008BFC(v51);
    sub_100008BB8(a1, v49);
    sub_100008BB8(a2, v48);
LABEL_15:
    sub_100008BFC(v48);
    sub_100008BFC(v49);
    sub_100008BB8(a1, v47);
    sub_100008BB8(a2, v53);
    goto LABEL_16;
  }
LABEL_36:
  v75 = v81;
  v76 = static Color.== infix(_:_:)(*(_QWORD *)(v52 + v81[12]), *(_QWORD *)(v51 + v81[12]));
  sub_100008BFC(v52);
  sub_100008BFC(v51);
  sub_100008BB8(a1, v49);
  sub_100008BB8(a2, v48);
  if ((v76 & 1) == 0)
    goto LABEL_15;
  v77 = *(unsigned __int8 *)(v49 + v75[13]);
  sub_100008BFC(v49);
  v78 = v75;
  v79 = *(unsigned __int8 *)(v48 + v75[13]);
  sub_100008BFC(v48);
  sub_100008BB8(a1, v47);
  sub_100008BB8(a2, v53);
  if (v77 == v79)
    __asm { BR              X11 }
LABEL_16:
  sub_100008BFC(v47);
  sub_100008BFC(v53);
  return 0;
}

void sub_10001B240(int a1@<W8>)
{
  void *v1;
  void *v2;
  id v3;
  id v4;

  if (!a1)
  {
    sub_100008CBC(0, &qword_1000A51D0, NSObject_ptr);
    v3 = v2;
    v4 = v1;
    static NSObject.== infix(_:_:)(v3, v4);

    JUMPOUT(0x10001AEC4);
  }
  JUMPOUT(0x10001AEC0);
}

void *sub_10001B2B8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  void (*v25)(char *, uint64_t);
  void *result;
  uint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void (*v34)(char *, uint64_t, uint64_t);
  uint64_t v35;

  v2 = type metadata accessor for ServiceKind(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = __chkstk_darwin(v2);
  v6 = (char *)&v30 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v8 = (char *)&v30 - v7;
  v9 = *(_QWORD *)(a1 + 16);
  if (v9)
  {
    sub_10000527C(&qword_1000A5238);
    v10 = static _SetStorage.allocate(capacity:)(v9);
    v11 = 0;
    v12 = *(unsigned __int8 *)(v3 + 80);
    v31 = v9;
    v32 = a1 + ((v12 + 32) & ~v12);
    v13 = *(_QWORD *)(v3 + 72);
    v34 = *(void (**)(char *, uint64_t, uint64_t))(v3 + 16);
    v35 = v10 + 56;
    while (1)
    {
      v33 = v11;
      v34(v8, v32 + v13 * v11, v2);
      v14 = *(_QWORD *)(v10 + 40);
      v15 = sub_100008C7C(&qword_1000A51B8, (uint64_t (*)(uint64_t))&type metadata accessor for ServiceKind, (uint64_t)&protocol conformance descriptor for ServiceKind);
      v16 = dispatch thunk of Hashable._rawHashValue(seed:)(v14, v2, v15);
      v17 = ~(-1 << *(_BYTE *)(v10 + 32));
      v18 = v16 & v17;
      v19 = (v16 & (unint64_t)v17) >> 6;
      v20 = *(_QWORD *)(v35 + 8 * v19);
      v21 = 1 << (v16 & v17);
      if ((v21 & v20) != 0)
      {
        do
        {
          v34(v6, *(_QWORD *)(v10 + 48) + v18 * v13, v2);
          v22 = sub_100008C7C(&qword_1000A51C0, (uint64_t (*)(uint64_t))&type metadata accessor for ServiceKind, (uint64_t)&protocol conformance descriptor for ServiceKind);
          v23 = dispatch thunk of static Equatable.== infix(_:_:)(v6, v8, v2, v22);
          v24 = v3;
          v25 = *(void (**)(char *, uint64_t))(v3 + 8);
          v25(v6, v2);
          if ((v23 & 1) != 0)
          {
            v25(v8, v2);
            v3 = v24;
            v9 = v31;
            goto LABEL_4;
          }
          v18 = (v18 + 1) & v17;
          v19 = v18 >> 6;
          v20 = *(_QWORD *)(v35 + 8 * (v18 >> 6));
          v21 = 1 << v18;
          v3 = v24;
        }
        while ((v20 & (1 << v18)) != 0);
        v9 = v31;
      }
      *(_QWORD *)(v35 + 8 * v19) = v21 | v20;
      result = (void *)(*(uint64_t (**)(unint64_t, char *, uint64_t))(v3 + 32))(*(_QWORD *)(v10 + 48) + v18 * v13, v8, v2);
      v27 = *(_QWORD *)(v10 + 16);
      v28 = __OFADD__(v27, 1);
      v29 = v27 + 1;
      if (v28)
        break;
      *(_QWORD *)(v10 + 16) = v29;
LABEL_4:
      v11 = v33 + 1;
      if (v33 + 1 == v9)
        return (void *)v10;
    }
    __break(1u);
  }
  else
  {
    return &_swiftEmptySetSingleton;
  }
  return result;
}

uint64_t sub_10001B520(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t result;
  int64_t v15;
  unint64_t v16;
  unint64_t v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;

  v28 = a2;
  v3 = type metadata accessor for CharacteristicKind(0);
  v4 = *(_QWORD *)(v3 - 8);
  v5 = ((uint64_t (*)(void))__chkstk_darwin)();
  v7 = (char *)&v25 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v9 = (char *)&v25 - v8;
  v30 = (unint64_t)&_swiftEmptyArrayStorage;
  v10 = *(_QWORD *)(a1 + 56);
  v26 = a1 + 56;
  v11 = 1 << *(_BYTE *)(a1 + 32);
  v12 = -1;
  if (v11 < 64)
    v12 = ~(-1 << v11);
  v13 = v12 & v10;
  v27 = (unint64_t)(v11 + 63) >> 6;
  v29 = a1;
  result = swift_bridgeObjectRetain(a1);
  v15 = 0;
  while (v13)
  {
    v16 = __clz(__rbit64(v13));
    v13 &= v13 - 1;
    v17 = v16 | (v15 << 6);
LABEL_22:
    (*(void (**)(char *, unint64_t, uint64_t))(v4 + 16))(v9, *(_QWORD *)(v29 + 48) + *(_QWORD *)(v4 + 72) * v17, v3);
    (*(void (**)(char *, char *, uint64_t))(v4 + 32))(v7, v9, v3);
    v21 = HMService.characteristic(for:)(v7);
    result = (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v7, v3);
    if (v21)
    {
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(result);
      v23 = *(_QWORD *)((v30 & 0xFFFFFFFFFFFFFF8) + 0x10);
      v22 = *(_QWORD *)((v30 & 0xFFFFFFFFFFFFFF8) + 0x18);
      if (v23 >= v22 >> 1)
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v22 > 1, v23 + 1, 1);
      v24 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v23, v21);
      result = specialized Array._endMutation()(v24);
    }
  }
  v18 = v15 + 1;
  if (__OFADD__(v15, 1))
  {
    __break(1u);
    goto LABEL_28;
  }
  if (v18 >= v27)
    goto LABEL_26;
  v19 = *(_QWORD *)(v26 + 8 * v18);
  ++v15;
  if (v19)
    goto LABEL_21;
  v15 = v18 + 1;
  if (v18 + 1 >= v27)
    goto LABEL_26;
  v19 = *(_QWORD *)(v26 + 8 * v15);
  if (v19)
    goto LABEL_21;
  v15 = v18 + 2;
  if (v18 + 2 >= v27)
    goto LABEL_26;
  v19 = *(_QWORD *)(v26 + 8 * v15);
  if (v19)
    goto LABEL_21;
  v15 = v18 + 3;
  if (v18 + 3 >= v27)
    goto LABEL_26;
  v19 = *(_QWORD *)(v26 + 8 * v15);
  if (v19)
  {
LABEL_21:
    v13 = (v19 - 1) & v19;
    v17 = __clz(__rbit64(v19)) + (v15 << 6);
    goto LABEL_22;
  }
  v20 = v18 + 4;
  if (v20 >= v27)
  {
LABEL_26:
    swift_release(v29);
    return v30;
  }
  v19 = *(_QWORD *)(v26 + 8 * v20);
  if (v19)
  {
    v15 = v20;
    goto LABEL_21;
  }
  while (1)
  {
    v15 = v20 + 1;
    if (__OFADD__(v20, 1))
      break;
    if (v15 >= v27)
      goto LABEL_26;
    v19 = *(_QWORD *)(v26 + 8 * v15);
    ++v20;
    if (v19)
      goto LABEL_21;
  }
LABEL_28:
  __break(1u);
  return result;
}

uint64_t sub_10001B7BC(uint64_t a1)
{
  uint64_t v1;

  return a1 & ~(-1 << *(_BYTE *)(v1 + 32));
}

uint64_t sub_10001B7E8()
{
  uint64_t v0;
  Swift::Int v1;
  _QWORD v3[9];

  Hasher.init(_seed:)(v3, *(_QWORD *)(v0 + 40));
  String.hash(into:)(v3, 1953460082, 0xE400000000000000);
  v1 = Hasher._finalize()();
  return sub_10001B7BC(v1);
}

void sub_10001B834(uint64_t a1)
{
  uint64_t v1;

  sub_100017DD8(a1, *(_QWORD *)(v1 + 16), *(void **)(v1 + 24));
}

uint64_t sub_10001B840(uint64_t a1, uint64_t a2)
{
  return sub_10001B924(a1, a2, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_10001972C);
}

uint64_t sub_10001B84C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10001B85C(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

unint64_t sub_10001B864()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000A51F8;
  if (!qword_1000A51F8)
  {
    v1 = sub_1000052BC(&qword_1000A51F0);
    result = swift_getWitnessTable(&protocol conformance descriptor for [A], v1);
    atomic_store(result, (unint64_t *)&qword_1000A51F8);
  }
  return result;
}

uint64_t sub_10001B8B4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = sub_10000527C(&qword_1000A51E8);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_10001B918(uint64_t a1, uint64_t a2)
{
  return sub_10001B924(a1, a2, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1000187B8);
}

uint64_t sub_10001B924(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v3;
  uint64_t v6;

  v6 = *(unsigned __int8 *)(*(_QWORD *)(sub_10000527C(&qword_1000A51E8) - 8) + 80);
  return a3(a1, a2, v3 + ((v6 + 16) & ~v6));
}

uint64_t sub_10001B984(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10000527C(&qword_1000A5228);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

_OWORD *sub_10001B9CC(_OWORD *a1, _OWORD *a2)
{
  __int128 v2;

  v2 = a1[1];
  *a2 = *a1;
  a2[1] = v2;
  return a2;
}

uint64_t sub_10001B9DC(uint64_t a1, uint64_t a2)
{
  (*(void (**)(uint64_t, uint64_t))(*(&type metadata for AnyHashable - 1) + 16))(a2, a1);
  return a2;
}

uint64_t initializeBufferWithCopyOfBuffer for WidgetTileInfo.ContentType(uint64_t a1, uint64_t a2)
{
  void *v3;
  char v4;
  id v5;

  v3 = *(void **)a2;
  v4 = *(_BYTE *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = v4;
  v5 = v3;
  return a1;
}

uint64_t assignWithCopy for WidgetTileInfo.ContentType(uint64_t a1, uint64_t a2)
{
  void *v3;
  char v4;
  void *v5;
  id v6;

  v3 = *(void **)a2;
  v4 = *(_BYTE *)(a2 + 8);
  v5 = *(void **)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = v4;
  v6 = v3;

  return a1;
}

uint64_t initializeWithTake for WidgetTileInfo.ContentType(uint64_t result, uint64_t *a2)
{
  uint64_t v2;

  v2 = *a2;
  *(_BYTE *)(result + 8) = *((_BYTE *)a2 + 8);
  *(_QWORD *)result = v2;
  return result;
}

uint64_t assignWithTake for WidgetTileInfo.ContentType(uint64_t a1, uint64_t a2)
{
  char v3;
  void *v4;

  v3 = *(_BYTE *)(a2 + 8);
  v4 = *(void **)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = v3;

  return a1;
}

uint64_t getEnumTagSinglePayload for WidgetTileInfo.ContentType(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFD && *(_BYTE *)(a1 + 9))
    return (*(_DWORD *)a1 + 253);
  v3 = *(unsigned __int8 *)(a1 + 8);
  if (v3 <= 3)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for WidgetTileInfo.ContentType(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFC)
  {
    *(_BYTE *)(result + 8) = 0;
    *(_QWORD *)result = a2 - 253;
    if (a3 >= 0xFD)
      *(_BYTE *)(result + 9) = 1;
  }
  else
  {
    if (a3 >= 0xFD)
      *(_BYTE *)(result + 9) = 0;
    if (a2)
      *(_BYTE *)(result + 8) = -(char)a2;
  }
  return result;
}

uint64_t sub_10001BB60(uint64_t a1)
{
  if (*(unsigned __int8 *)(a1 + 8) <= 2u)
    return *(unsigned __int8 *)(a1 + 8);
  else
    return (*(_DWORD *)a1 + 3);
}

uint64_t sub_10001BB7C(uint64_t result, unsigned int a2)
{
  if (a2 >= 3)
  {
    *(_QWORD *)result = a2 - 3;
    LOBYTE(a2) = 3;
  }
  *(_BYTE *)(result + 8) = a2;
  return result;
}

ValueMetadata *type metadata accessor for WidgetTileInfo.ContentType()
{
  return &type metadata for WidgetTileInfo.ContentType;
}

unint64_t sub_10001BBA8()
{
  unint64_t result;

  result = qword_1000A5240;
  if (!qword_1000A5240)
  {
    result = swift_getWitnessTable(&unk_100086EC4, &type metadata for WidgetTileInfo.ContentType);
    atomic_store(result, (unint64_t *)&qword_1000A5240);
  }
  return result;
}

uint64_t sub_10001BBEC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  int *v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  void *v25;
  id v26;
  void *v27;
  uint64_t v28;
  id v29;
  id v30;
  uint64_t v31;
  void *v32;
  id v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  void (*v38)(char *, uint64_t);
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void (*v42)(char *, _QWORD, uint64_t);
  uint64_t v43;
  uint64_t v44;
  char v45;
  char v46;
  void (*v47)(uint64_t, uint64_t);
  char v48;
  char v49;
  uint64_t v50;
  uint64_t v51;
  NSObject *v52;
  os_log_type_t v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  char v57;
  uint64_t v58;
  id v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char v63;
  uint64_t v64;
  void (*v65)(char *, _QWORD, uint64_t);
  void *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char v71;
  char v72;
  void (*v73)(uint64_t, uint64_t);
  char v74;
  char v75;
  char v76;
  uint64_t v77;
  char *v78;
  char v79;
  uint64_t v80;
  char *v81;
  char v82;
  void *v83;
  uint64_t v84;
  uint64_t v85;
  NSObject *v86;
  os_log_type_t v87;
  _BOOL4 v88;
  char *v89;
  uint64_t v90;
  uint64_t v91;
  char *v92;
  char v93;
  uint64_t v94;
  id v95;
  char *v96;
  char v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  void (*v101)(char *, _QWORD, uint64_t);
  void *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  char *v107;
  uint64_t v108;
  char *v109;
  uint64_t v110;
  char *v111;
  char *v112;
  uint64_t v113;
  char *v114;
  uint64_t v115;

  v2 = v1;
  v105 = a1;
  v3 = type metadata accessor for WidgetRenderingMode(0);
  v106 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v107 = (char *)&v100 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v110 = type metadata accessor for CharacteristicKind(0);
  v108 = *(_QWORD *)(v110 - 8);
  __chkstk_darwin(v110);
  v109 = (char *)&v100 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for ServiceKind(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = __chkstk_darwin(v6);
  v10 = (char *)&v100 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __chkstk_darwin(v8);
  v111 = (char *)&v100 - v12;
  v13 = __chkstk_darwin(v11);
  v15 = (char *)&v100 - v14;
  v16 = __chkstk_darwin(v13);
  v18 = (char *)&v100 - v17;
  v19 = static Color.primary.getter(v16);
  v20 = (int *)type metadata accessor for WidgetTileInfo(0);
  if ((*(_BYTE *)(v1 + v20[18] + 8) & 1) == 0)
  {
    v21 = sub_10001709C();
    if ((v21 & 1) == 0)
    {
      v28 = static Color.white.getter(v21);
      swift_release(v19);
      return v28;
    }
  }
  v22 = v1 + v20[14];
  v23 = *(unsigned __int8 *)(v22 + 8);
  if ((v23 - 2) < 2)
    return v19;
  v103 = v3;
  v104 = v19;
  v25 = *(void **)v22;
  if (v23)
  {
    v29 = v25;
    v30 = objc_msgSend(v29, "services");
    v31 = sub_100008CBC(0, &qword_1000A5078, HMService_ptr);
    v19 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v30, v31);

    if ((unint64_t)v19 >> 62)
    {
      if (v19 < 0)
        v99 = v19;
      else
        v99 = v19 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v19);
      v32 = (void *)_CocoaArrayWrapper.endIndex.getter(v99);
      swift_bridgeObjectRelease(v19);
      if (v32)
        goto LABEL_10;
    }
    else
    {
      v32 = *(void **)((v19 & 0xFFFFFFFFFFFFF8) + 0x10);
      if (v32)
      {
LABEL_10:
        if ((v19 & 0xC000000000000001) != 0)
        {
          v33 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v19);
        }
        else
        {
          if (!*(_QWORD *)((v19 & 0xFFFFFFFFFFFFF8) + 0x10))
          {
            __break(1u);
LABEL_74:
            swift_once(&qword_1000A4F08, sub_100053184);
LABEL_25:
            v50 = type metadata accessor for Logger(0);
            v51 = sub_100014698(v50, (uint64_t)qword_1000A7A80);
            v52 = Logger.logObject.getter(v51);
            v53 = static os_log_type_t.default.getter(v52);
            if (os_log_type_enabled(v52, v53))
            {
              v54 = swift_slowAlloc(22, -1);
              *(_DWORD *)v54 = 134218240;
              v114 = v10;
              UnsafeMutableRawBufferPointer.copyMemory(from:)(&v114, &v115, v54 + 4, v54 + 12);
              *(_WORD *)(v54 + 12) = 2048;
              v114 = (char *)v20;
              UnsafeMutableRawBufferPointer.copyMemory(from:)(&v114, &v115, v54 + 14, v54 + 22);
              _os_log_impl((void *)&_mh_execute_header, v52, v53, "thermostat: targetHeatingCoolingMode: %ld currentHeatingCooling: %ld", (uint8_t *)v54, 0x16u);
              swift_slowDealloc(v54, -1, -1);
            }

            if (v10)
            {
              if (v20 == (int *)1)
              {
                v81 = v107;
                static WidgetRenderingMode.vibrant.getter(v55);
                v82 = static WidgetRenderingMode.== infix(_:_:)(v105, v81);
                v58 = (*(uint64_t (**)(char *, uint64_t))(v106 + 8))(v81, v103);
                if ((v82 & 1) == 0)
                {
                  v59 = objc_msgSend((id)objc_opt_self(UIColor), "systemOrangeColor");
                  goto LABEL_58;
                }
                goto LABEL_47;
              }
              if (v20 == (int *)2)
              {
                v56 = v107;
                static WidgetRenderingMode.vibrant.getter(v55);
                v57 = static WidgetRenderingMode.== infix(_:_:)(v105, v56);
                v58 = (*(uint64_t (**)(char *, uint64_t))(v106 + 8))(v56, v103);
                if ((v57 & 1) == 0)
                {
                  v59 = objc_msgSend((id)objc_opt_self(UIColor), "systemCyanColor");
LABEL_58:
                  v80 = Color.init(_:)(v59);
                  goto LABEL_59;
                }
                goto LABEL_47;
              }
LABEL_40:

              return v19;
            }
            if (v20)
            {
              v78 = v107;
              static WidgetRenderingMode.vibrant.getter(v55);
              v79 = static WidgetRenderingMode.== infix(_:_:)(v105, v78);
              v58 = (*(uint64_t (**)(char *, uint64_t))(v106 + 8))(v78, v103);
              if ((v79 & 1) == 0)
              {
                v80 = static Color.secondary.getter(v58);
LABEL_59:
                v28 = v80;

LABEL_60:
                swift_release(v19);
                return v28;
              }
LABEL_47:
              v80 = static Color.primary.getter(v58);
              goto LABEL_59;
            }
            v28 = static Color.white.getter(v55);
            swift_release(v19);

            return v28;
          }
          v33 = *(id *)(v19 + 32);
        }
        v27 = v33;
        swift_bridgeObjectRelease(v19);

        v19 = v104;
        goto LABEL_14;
      }
    }
    swift_bridgeObjectRelease(v19);

    return v104;
  }
  v26 = v25;
  v27 = v26;
LABEL_14:
  if ((*(_BYTE *)(v2 + v20[13]) & 1) == 0)
  {
    v28 = static Color.secondary.getter(v26);
    swift_release(v19);

    return v28;
  }
  v102 = v27;
  HMService.serviceKind.getter(v26);
  v101 = *(void (**)(char *, _QWORD, uint64_t))(v7 + 104);
  v101(v15, enum case for ServiceKind.thermostat(_:), v6);
  v34 = sub_100008C7C((unint64_t *)&qword_1000A50A8, (uint64_t (*)(uint64_t))&type metadata accessor for ServiceKind, (uint64_t)&protocol conformance descriptor for ServiceKind);
  dispatch thunk of RawRepresentable.rawValue.getter(&v114, v6, v34);
  v100 = v34;
  dispatch thunk of RawRepresentable.rawValue.getter(&v112, v6, v34);
  v35 = v115;
  v36 = v113;
  if (v114 == v112 && v115 == v113)
  {
    v37 = 1;
    v36 = v115;
  }
  else
  {
    v37 = _stringCompareWithSmolCheck(_:_:expecting:)(v114, v115, v112, v113, 0);
  }
  swift_bridgeObjectRelease(v35);
  swift_bridgeObjectRelease(v36);
  v38 = *(void (**)(char *, uint64_t))(v7 + 8);
  v38(v15, v6);
  v39 = ((uint64_t (*)(char *, uint64_t))v38)(v18, v6);
  if ((v37 & 1) != 0)
  {
    v40 = v108;
    v41 = (uint64_t)v109;
    v42 = *(void (**)(char *, _QWORD, uint64_t))(v108 + 104);
    v43 = v110;
    v42(v109, enum case for CharacteristicKind.targetHeatingCoolingMode(_:), v110);
    v44 = v20[15];
    v32 = v102;
    v10 = (char *)sub_100008FE4(v41, *(_QWORD *)(v2 + v44));
    v46 = v45;
    v47 = *(void (**)(uint64_t, uint64_t))(v40 + 8);
    v47(v41, v43);
    v19 = v104;
    if ((v46 & 1) != 0)
      goto LABEL_40;
    v42((char *)v41, enum case for CharacteristicKind.currentHeatingCooling(_:), v43);
    v20 = (int *)sub_100008FE4(v41, *(_QWORD *)(v2 + v44));
    v49 = v48;
    v47(v41, v43);
    if ((v49 & 1) != 0)
      goto LABEL_40;
    if (qword_1000A4F08 == -1)
      goto LABEL_25;
    goto LABEL_74;
  }
  v32 = v102;
  HMService.serviceKind.getter(v39);
  v101(v10, enum case for ServiceKind.heaterCooler(_:), v6);
  v60 = v100;
  dispatch thunk of RawRepresentable.rawValue.getter(&v114, v6, v100);
  dispatch thunk of RawRepresentable.rawValue.getter(&v112, v6, v60);
  v61 = v115;
  v62 = v113;
  v19 = v104;
  if (v114 == v112 && v115 == v113)
  {
    swift_bridgeObjectRelease_n(v115, 2);
    v38(v10, v6);
    v38(v111, v6);
  }
  else
  {
    v63 = _stringCompareWithSmolCheck(_:_:expecting:)(v114, v115, v112, v113, 0);
    swift_bridgeObjectRelease(v61);
    swift_bridgeObjectRelease(v62);
    v38(v10, v6);
    v38(v111, v6);
    if ((v63 & 1) == 0)
      goto LABEL_40;
  }
  v64 = v108;
  v65 = *(void (**)(char *, _QWORD, uint64_t))(v108 + 104);
  v66 = v32;
  v67 = (uint64_t)v109;
  v68 = v110;
  v65(v109, enum case for CharacteristicKind.targetHeaterCoolerState(_:), v110);
  v69 = v20[15];
  v70 = sub_100008FE4(v67, *(_QWORD *)(v2 + v69));
  v72 = v71;
  v73 = *(void (**)(uint64_t, uint64_t))(v64 + 8);
  v73(v67, v68);
  if ((v72 & 1) != 0
    || (v65((char *)v67, enum case for CharacteristicKind.currentHeaterCoolerState(_:), v68),
        v111 = (char *)sub_100008FE4(v67, *(_QWORD *)(v2 + v69)),
        v75 = v74,
        v73(v67, v68),
        (v75 & 1) != 0)
    || (v65((char *)v67, enum case for CharacteristicKind.active(_:), v68),
        v76 = _sSo9HMServiceC10HomeWidgetE9BOOLValue3for4withSbSg0B9DataModel18CharacteristicKindO_SDy10Foundation4UUIDVypGSgtF_0(v67, *(_QWORD *)(v2 + v69)), v77 = ((uint64_t (*)(uint64_t, uint64_t))v73)(v67, v68), v76 == 2))
  {

    return v19;
  }
  if ((v76 & 1) == 0)
  {
    v28 = static Color.white.getter(v77);
    swift_release(v19);

    return v28;
  }
  v83 = v66;
  if (qword_1000A4F08 != -1)
    swift_once(&qword_1000A4F08, sub_100053184);
  v84 = type metadata accessor for Logger(0);
  v85 = sub_100014698(v84, (uint64_t)qword_1000A7A80);
  v86 = Logger.logObject.getter(v85);
  v87 = static os_log_type_t.default.getter(v86);
  v88 = os_log_type_enabled(v86, v87);
  v89 = v111;
  if (v88)
  {
    v90 = swift_slowAlloc(22, -1);
    *(_DWORD *)v90 = 134218240;
    v114 = (char *)v70;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v114, &v115, v90 + 4, v90 + 12);
    *(_WORD *)(v90 + 12) = 2048;
    v114 = v89;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v114, &v115, v90 + 14, v90 + 22);
    _os_log_impl((void *)&_mh_execute_header, v86, v87, "heaterCooler: targetHeaterCoolerState: %ld currentHeaterCoolerState: %ld", (uint8_t *)v90, 0x16u);
    swift_slowDealloc(v90, -1, -1);
  }

  if (v89 == (char *)2)
  {
    v96 = v107;
    static WidgetRenderingMode.vibrant.getter(v91);
    v97 = static WidgetRenderingMode.== infix(_:_:)(v105, v96);
    v94 = (*(uint64_t (**)(char *, uint64_t))(v106 + 8))(v96, v103);
    if ((v97 & 1) == 0)
    {
      v95 = objc_msgSend((id)objc_opt_self(UIColor), "systemOrangeColor");
      goto LABEL_65;
    }
LABEL_62:
    v98 = static Color.primary.getter(v94);
LABEL_66:
    v28 = v98;

    goto LABEL_60;
  }
  if (v89 == (char *)3)
  {
    v92 = v107;
    static WidgetRenderingMode.vibrant.getter(v91);
    v93 = static WidgetRenderingMode.== infix(_:_:)(v105, v92);
    v94 = (*(uint64_t (**)(char *, uint64_t))(v106 + 8))(v92, v103);
    if ((v93 & 1) == 0)
    {
      v95 = objc_msgSend((id)objc_opt_self(UIColor), "systemCyanColor");
LABEL_65:
      v98 = Color.init(_:)(v95);
      goto LABEL_66;
    }
    goto LABEL_62;
  }

  return v19;
}

unint64_t sub_10001C640()
{
  unint64_t result;

  result = qword_1000A5248;
  if (!qword_1000A5248)
  {
    result = swift_getWitnessTable(&unk_100086FD0, &type metadata for OpenURLInHomeIntent);
    atomic_store(result, (unint64_t *)&qword_1000A5248);
  }
  return result;
}

unint64_t sub_10001C688()
{
  unint64_t result;

  result = qword_1000A5250;
  if (!qword_1000A5250)
  {
    result = swift_getWitnessTable(&unk_100086FF8, &type metadata for OpenURLInHomeIntent);
    atomic_store(result, (unint64_t *)&qword_1000A5250);
  }
  return result;
}

uint64_t sub_10001C6CC(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_10008C564, 1);
}

uint64_t sub_10001C6DC(uint64_t a1, uint64_t a2)
{
  _QWORD v3[2];

  v3[0] = a2;
  v3[1] = sub_10001C71C();
  return swift_getOpaqueTypeConformance2(v3, &opaque type descriptor for <<opaque return type of static AppIntent.parameterSummary>>, 1);
}

unint64_t sub_10001C71C()
{
  unint64_t result;

  result = qword_1000A5258;
  if (!qword_1000A5258)
  {
    result = swift_getWitnessTable(&unk_100086F40, &type metadata for OpenURLInHomeIntent);
    atomic_store(result, (unint64_t *)&qword_1000A5258);
  }
  return result;
}

uint64_t sub_10001C760()
{
  uint64_t v0;

  return swift_deallocClassInstance(v0, 16, 7);
}

uint64_t sub_10001C770()
{
  uint64_t v0;

  v0 = type metadata accessor for LocalizedStringResource(0);
  sub_10001D27C(v0, qword_1000A7918);
  sub_100014698(v0, (uint64_t)qword_1000A7918);
  return LocalizedStringResource.init(stringLiteral:)(0xD000000000000023, 0x800000010008A310);
}

uint64_t sub_10001C7D0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = sub_10000527C(&qword_1000A5340);
  sub_10001D27C(v0, qword_1000A7930);
  v1 = sub_100014698(v0, (uint64_t)qword_1000A7930);
  IntentDescription.init(stringLiteral:)(0xD000000000000054, 0x800000010008A2B0);
  v2 = type metadata accessor for IntentDescription(0);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 56))(v1, 0, 1, v2);
}

uint64_t sub_10001C858(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2[4] = a1;
  v2[5] = a2;
  v3 = type metadata accessor for URL(0);
  v2[6] = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v2[7] = v4;
  v2[8] = swift_task_alloc((*(_QWORD *)(v4 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for Logger(0);
  v2[9] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v2[10] = v6;
  v2[11] = swift_task_alloc((*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_10001C8E0, 0, 0);
}

uint64_t sub_10001C8E0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  _BOOL4 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void (*v29)(uint64_t, uint64_t);
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  NSObject *v35;
  os_log_type_t v36;
  uint8_t *v37;
  char v38;
  uint64_t v39;
  uint64_t v40;
  id v41;
  NSURL *v42;
  NSObject *v43;
  id v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v48;
  uint64_t v49;
  char v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;

  if (qword_1000A4F08 != -1)
    swift_once(&qword_1000A4F08, sub_100053184);
  v2 = *(_QWORD *)(v0 + 80);
  v1 = *(_QWORD *)(v0 + 88);
  v3 = *(_QWORD *)(v0 + 72);
  v4 = *(_QWORD *)(v0 + 40);
  v5 = sub_100014698(v3, (uint64_t)qword_1000A7A80);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16))(v1, v5, v3);
  v6 = swift_retain_n(v4, 2);
  v7 = Logger.logObject.getter(v6);
  v8 = static os_log_type_t.default.getter();
  v9 = os_log_type_enabled(v7, v8);
  v11 = *(_QWORD *)(v0 + 80);
  v10 = *(_QWORD *)(v0 + 88);
  v12 = *(_QWORD *)(v0 + 72);
  if (v9)
  {
    v55 = *(_QWORD *)(v0 + 80);
    v56 = *(_QWORD *)(v0 + 88);
    v13 = *(_QWORD *)(v0 + 64);
    v52 = *(_QWORD *)(v0 + 56);
    v14 = *(_QWORD *)(v0 + 48);
    v51 = *(_QWORD *)(v0 + 40);
    v15 = swift_slowAlloc(22, -1);
    v54 = swift_slowAlloc(64, -1);
    v57 = v54;
    *(_DWORD *)v15 = 136315394;
    *(_QWORD *)(v0 + 16) = sub_100023980(0x286D726F66726570, 0xE900000000000029, &v57);
    v16 = UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 16, v0 + 24, v15 + 4, v15 + 12);
    *(_WORD *)(v15 + 12) = 2080;
    IntentParameter.wrappedValue.getter(v16);
    v17 = sub_10001D1EC();
    v18 = dispatch thunk of CustomStringConvertible.description.getter(v14, v17);
    v53 = v12;
    v20 = v19;
    (*(void (**)(uint64_t, uint64_t))(v52 + 8))(v13, v14);
    *(_QWORD *)(v0 + 24) = sub_100023980(v18, v20, &v57);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 24, v0 + 32, v15 + 14, v15 + 22);
    swift_bridgeObjectRelease(v20);
    swift_release_n(v51, 2);
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "OpenURLInHomeIntent %s - url is %s", (uint8_t *)v15, 0x16u);
    swift_arrayDestroy(v54, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v54, -1, -1);
    swift_slowDealloc(v15, -1, -1);

    v21 = (*(uint64_t (**)(uint64_t, uint64_t))(v55 + 8))(v56, v53);
  }
  else
  {
    swift_release_n(*(_QWORD *)(v0 + 40), 2);

    v21 = (*(uint64_t (**)(uint64_t, uint64_t))(v11 + 8))(v10, v12);
  }
  v23 = *(_QWORD *)(v0 + 56);
  v22 = *(_QWORD *)(v0 + 64);
  v24 = *(_QWORD *)(v0 + 48);
  v25 = IntentParameter.wrappedValue.getter(v21);
  v26 = URL.scheme.getter(v25);
  v28 = v27;
  v29 = *(void (**)(uint64_t, uint64_t))(v23 + 8);
  v29(v22, v24);
  v30 = static String._unconditionallyBridgeFromObjectiveC(_:)(HFHomeURLScheme);
  v32 = v31;
  if (v28)
  {
    if (v26 == v30 && v28 == v31)
      goto LABEL_9;
    v38 = _stringCompareWithSmolCheck(_:_:expecting:)(v26, v28, v30, v31, 0);
    swift_bridgeObjectRelease(v32);
    if ((v38 & 1) != 0)
      goto LABEL_14;
    v49 = static String._unconditionallyBridgeFromObjectiveC(_:)(HFHomePrivateURLScheme);
    v32 = v48;
    if (v26 == v49 && v28 == v48)
    {
LABEL_9:
      swift_bridgeObjectRelease(v32);
LABEL_14:
      swift_bridgeObjectRelease(v28);
LABEL_15:
      v39 = *(_QWORD *)(v0 + 64);
      v40 = *(_QWORD *)(v0 + 48);
      v41 = objc_msgSend((id)objc_opt_self(HFOpenURLRouter), "sharedInstance");
      IntentParameter.wrappedValue.getter(v41);
      URL._bridgeToObjectiveC()(v42);
      v35 = v43;
      v29(v39, v40);
      v44 = objc_msgSend(v41, "openURL:", v35);

      goto LABEL_16;
    }
    v50 = _stringCompareWithSmolCheck(_:_:expecting:)(v26, v28, v49, v48, 0);
    swift_bridgeObjectRelease(v32);
    v34 = swift_bridgeObjectRelease(v28);
    if ((v50 & 1) != 0)
      goto LABEL_15;
  }
  else
  {
    swift_bridgeObjectRelease(v31);
    static String._unconditionallyBridgeFromObjectiveC(_:)(HFHomePrivateURLScheme);
    v34 = swift_bridgeObjectRelease(v33);
  }
  v35 = Logger.logObject.getter(v34);
  v36 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v35, v36))
  {
    v37 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v37 = 0;
    _os_log_impl((void *)&_mh_execute_header, v35, v36, "OpenURLInHomeIntent - URL does not appear to be a Home app URL", v37, 2u);
    swift_slowDealloc(v37, -1, -1);
  }
LABEL_16:
  v45 = *(_QWORD *)(v0 + 88);
  v46 = *(_QWORD *)(v0 + 64);

  static IntentResult.result<>()();
  swift_task_dealloc(v45);
  swift_task_dealloc(v46);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10001CD84@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  if (qword_1000A4E68 != -1)
    swift_once(&qword_1000A4E68, sub_10001C770);
  v2 = type metadata accessor for LocalizedStringResource(0);
  v3 = sub_100014698(v2, (uint64_t)qword_1000A7918);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 16))(a1, v3, v2);
}

uint64_t sub_10001CDF4()
{
  return 1;
}

uint64_t sub_10001CE04@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  if (qword_1000A4E70 != -1)
    swift_once(&qword_1000A4E70, sub_10001C7D0);
  v2 = sub_10000527C(&qword_1000A5340);
  v3 = sub_100014698(v2, (uint64_t)qword_1000A7930);
  return sub_10001D234(v3, a1);
}

uint64_t sub_10001CE64(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  _QWORD *v5;

  v4 = *v1;
  v5 = (_QWORD *)swift_task_alloc(dword_1000A5334);
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_10001CEBC;
  return sub_10001C858(a1, v4);
}

uint64_t sub_10001CEBC()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  v4 = *v0;
  v1 = *(_QWORD *)(v4 + 16);
  v2 = *v0;
  v4 = v2;
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t sub_10001CF04@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = sub_10001CFD0();
  *a1 = result;
  return result;
}

uint64_t sub_10001CF28(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10001C71C();
  return static AppIntent.persistentIdentifier.getter(a1, v2);
}

uint64_t type metadata accessor for OpenURLInHomeIntentFailSafe()
{
  return objc_opt_self(_TtC10HomeWidget27OpenURLInHomeIntentFailSafe);
}

ValueMetadata *type metadata accessor for OpenURLInHomeIntent()
{
  return &type metadata for OpenURLInHomeIntent;
}

unint64_t sub_10001CF84()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000A5300;
  if (!qword_1000A5300)
  {
    v1 = sub_1000052BC(&qword_1000A5308);
    result = swift_getWitnessTable(&protocol conformance descriptor for IntentResultContainer<A, B, C, D>, v1);
    atomic_store(result, (unint64_t *)&qword_1000A5300);
  }
  return result;
}

uint64_t sub_10001CFD0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;

  v0 = type metadata accessor for InputConnectionBehavior(0);
  v1 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin(v0);
  v3 = (char *)&v20 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_10000527C(&qword_1000A5310);
  __chkstk_darwin(v4);
  v6 = (char *)&v20 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_10000527C(&qword_1000A5318);
  __chkstk_darwin(v7);
  v9 = (char *)&v20 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_10000527C(&qword_1000A5320);
  __chkstk_darwin(v10);
  v12 = (char *)&v20 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for LocalizedStringResource(0);
  v14 = *(_QWORD *)(v13 - 8);
  __chkstk_darwin(v13);
  v16 = (char *)&v20 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000527C(&qword_1000A5328);
  LocalizedStringResource.init(stringLiteral:)(0xD000000000000018, 0x800000010008A290);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v14 + 56))(v12, 1, 1, v13);
  v17 = type metadata accessor for URL(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 56))(v9, 1, 1, v17);
  v18 = type metadata accessor for IntentDialog(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 56))(v6, 1, 1, v18);
  (*(void (**)(char *, _QWORD, uint64_t))(v1 + 104))(v3, enum case for InputConnectionBehavior.default(_:), v0);
  return IntentParameter<>.init(title:description:default:requestValueDialog:inputConnectionBehavior:)(v16, v12, v9, v6, v3);
}

unint64_t sub_10001D1EC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000A5338;
  if (!qword_1000A5338)
  {
    v1 = type metadata accessor for URL(255);
    result = swift_getWitnessTable(&protocol conformance descriptor for URL, v1);
    atomic_store(result, (unint64_t *)&qword_1000A5338);
  }
  return result;
}

uint64_t sub_10001D234(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10000527C(&qword_1000A5340);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t *sub_10001D27C(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(a1 - 8);
  if ((*(_DWORD *)(v3 + 80) & 0x20000) != 0)
  {
    v4 = swift_slowAlloc(*(_QWORD *)(v3 + 64), *(_DWORD *)(v3 + 80));
    *a2 = v4;
    return (uint64_t *)v4;
  }
  return a2;
}

uint64_t sub_10001D2BC(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  id v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int64_t v10;
  int64_t v11;
  int isUniquelyReferenced_nonNull_native;
  int64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  char *v20;
  unint64_t v21;
  uint64_t v22;
  char *v23;
  unint64_t v24;
  uint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t result;
  char v31;

  if ((unint64_t)a1 >> 62)
    goto LABEL_33;
  v2 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain(a1);
  while (v2)
  {
    v3 = _swiftEmptyArrayStorage;
    v4 = 4;
    while (1)
    {
      v5 = (a1 & 0xC000000000000001) != 0
         ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v4 - 4, a1)
         : *(id *)(a1 + 8 * v4);
      v6 = v5;
      v7 = v4 - 3;
      if (__OFADD__(v4 - 4, 1))
        break;
      v8 = sub_10002B07C(v5);

      v9 = *(_QWORD *)(v8 + 16);
      v10 = v3[2];
      v11 = v10 + v9;
      if (__OFADD__(v10, v9))
        goto LABEL_29;
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v3);
      if (isUniquelyReferenced_nonNull_native && v11 <= v3[3] >> 1)
      {
        if (*(_QWORD *)(v8 + 16))
          goto LABEL_19;
      }
      else
      {
        if (v10 <= v11)
          v13 = v10 + v9;
        else
          v13 = v10;
        v3 = (_QWORD *)sub_10005AA24(isUniquelyReferenced_nonNull_native, v13, 1, (unint64_t)v3);
        if (*(_QWORD *)(v8 + 16))
        {
LABEL_19:
          v14 = v3[2];
          v15 = (v3[3] >> 1) - v14;
          v16 = type metadata accessor for UUID(0);
          if (v15 < v9)
            goto LABEL_31;
          v17 = *(_QWORD *)(v16 - 8);
          v18 = (*(unsigned __int8 *)(v17 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v17 + 80);
          v19 = *(_QWORD *)(v17 + 72);
          v20 = (char *)v3 + v18 + v19 * v14;
          v21 = v8 + v18;
          v22 = v19 * v9;
          v23 = &v20[v22];
          v24 = v21 + v22;
          if (v21 < (unint64_t)v23 && (unint64_t)v20 < v24)
          {
            v31 = 2;
            result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, v31, 1092, 0);
            __break(1u);
            return result;
          }
          swift_arrayInitWithCopy(v20);
          if (v9)
          {
            v26 = v3[2];
            v27 = __OFADD__(v26, v9);
            v28 = v26 + v9;
            if (v27)
              goto LABEL_32;
            v3[2] = v28;
          }
          goto LABEL_5;
        }
      }
      if (v9)
        goto LABEL_30;
LABEL_5:
      swift_bridgeObjectRelease(v8);
      ++v4;
      if (v7 == v2)
        goto LABEL_38;
    }
    __break(1u);
LABEL_29:
    __break(1u);
LABEL_30:
    __break(1u);
LABEL_31:
    __break(1u);
LABEL_32:
    __break(1u);
LABEL_33:
    if (a1 < 0)
      v29 = a1;
    else
      v29 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v2 = _CocoaArrayWrapper.endIndex.getter(v29);
  }
  v3 = _swiftEmptyArrayStorage;
LABEL_38:
  swift_bridgeObjectRelease(a1);
  return (uint64_t)v3;
}

uint64_t sub_10001D4F0@<X0>(uint64_t (*a1)(char *)@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t result;
  int64_t v16;
  unint64_t v17;
  unint64_t i;
  unint64_t v20;
  int64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int64_t v29;
  uint64_t v30;

  v27 = a3;
  v26 = type metadata accessor for WidgetTileInfo(0);
  v30 = *(_QWORD *)(v26 - 8);
  v6 = __chkstk_darwin(v26);
  v8 = (char *)&v26 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v10 = (char *)&v26 - v9;
  v11 = *(_QWORD *)(a2 + 56);
  v28 = a2 + 56;
  v12 = 1 << *(_BYTE *)(a2 + 32);
  v13 = -1;
  if (v12 < 64)
    v13 = ~(-1 << v12);
  v14 = v13 & v11;
  v29 = (unint64_t)(v12 + 63) >> 6;
  result = swift_bridgeObjectRetain(a2);
  v16 = 0;
  if (!v14)
    goto LABEL_5;
LABEL_4:
  v17 = __clz(__rbit64(v14));
  v14 &= v14 - 1;
  for (i = v17 | (v16 << 6); ; i = __clz(__rbit64(v20)) + (v16 << 6))
  {
    sub_100026C34(*(_QWORD *)(a2 + 48) + *(_QWORD *)(v30 + 72) * i, (uint64_t)v10, type metadata accessor for WidgetTileInfo);
    sub_100026D98((uint64_t)v10, (uint64_t)v8, type metadata accessor for WidgetTileInfo);
    v22 = a1(v8);
    if (v3)
    {
      sub_100026C78((uint64_t)v8, type metadata accessor for WidgetTileInfo);
      return swift_release(a2);
    }
    if ((v22 & 1) != 0)
    {
      swift_release(a2);
      v23 = v27;
      sub_100026D98((uint64_t)v8, v27, type metadata accessor for WidgetTileInfo);
      v24 = 0;
      v25 = v26;
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v30 + 56))(v23, v24, 1, v25);
    }
    result = sub_100026C78((uint64_t)v8, type metadata accessor for WidgetTileInfo);
    if (v14)
      goto LABEL_4;
LABEL_5:
    if (__OFADD__(v16++, 1))
      break;
    if (v16 >= v29)
      goto LABEL_28;
    v20 = *(_QWORD *)(v28 + 8 * v16);
    if (!v20)
    {
      v21 = v16 + 1;
      if (v16 + 1 >= v29)
        goto LABEL_28;
      v20 = *(_QWORD *)(v28 + 8 * v21);
      if (v20)
        goto LABEL_16;
      v21 = v16 + 2;
      if (v16 + 2 >= v29)
        goto LABEL_28;
      v20 = *(_QWORD *)(v28 + 8 * v21);
      if (v20)
        goto LABEL_16;
      v21 = v16 + 3;
      if (v16 + 3 >= v29)
        goto LABEL_28;
      v20 = *(_QWORD *)(v28 + 8 * v21);
      if (v20)
      {
LABEL_16:
        v16 = v21;
        goto LABEL_17;
      }
      v21 = v16 + 4;
      if (v16 + 4 < v29)
      {
        v20 = *(_QWORD *)(v28 + 8 * v21);
        if (!v20)
        {
          while (1)
          {
            v16 = v21 + 1;
            if (__OFADD__(v21, 1))
              goto LABEL_31;
            if (v16 >= v29)
              goto LABEL_28;
            v20 = *(_QWORD *)(v28 + 8 * v16);
            ++v21;
            if (v20)
              goto LABEL_17;
          }
        }
        goto LABEL_16;
      }
LABEL_28:
      v25 = v26;
      v23 = v27;
      swift_release(a2);
      v24 = 1;
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v30 + 56))(v23, v24, 1, v25);
    }
LABEL_17:
    v14 = (v20 - 1) & v20;
  }
  __break(1u);
LABEL_31:
  __break(1u);
  return result;
}

void *sub_10001D7A8(uint64_t (*a1)(id *), uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  id v9;
  void *v10;
  uint64_t v11;
  char v12;
  uint64_t v14;
  id v15;

  v4 = v3;
  if ((unint64_t)a3 >> 62)
    goto LABEL_16;
  v7 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain(a3);
  for (; v7; v7 = _CocoaArrayWrapper.endIndex.getter(v14))
  {
    v8 = 4;
    while (1)
    {
      v9 = (a3 & 0xC000000000000001) != 0
         ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v8 - 4, a3)
         : *(id *)(a3 + 8 * v8);
      v10 = v9;
      v11 = v8 - 3;
      if (__OFADD__(v8 - 4, 1))
        break;
      v15 = v9;
      v12 = a1(&v15);
      if (v4)
      {
        swift_bridgeObjectRelease(a3);

        return v10;
      }
      if ((v12 & 1) != 0)
      {
        swift_bridgeObjectRelease(a3);
        return v10;
      }

      ++v8;
      if (v11 == v7)
        goto LABEL_11;
    }
    __break(1u);
LABEL_16:
    if (a3 < 0)
      v14 = a3;
    else
      v14 = a3 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a3);
  }
LABEL_11:
  swift_bridgeObjectRelease(a3);
  return 0;
}

Swift::Int *maxNumberOfTiles.unsafeMutableAddressor()
{
  return &maxNumberOfTiles;
}

uint64_t sub_10001D8D4()
{
  return sub_100008C7C(&qword_1000A5350, type metadata accessor for AccessoryAndSceneEntity, (uint64_t)&unk_100087160);
}

uint64_t type metadata accessor for AccessoryAndSceneEntity(uint64_t a1)
{
  uint64_t result;

  result = qword_1000A5460;
  if (!qword_1000A5460)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for AccessoryAndSceneEntity);
  return result;
}

uint64_t sub_10001D93C()
{
  return sub_100008C7C(&qword_1000A5358, type metadata accessor for AccessoryAndSceneEntity, (uint64_t)&unk_100087198);
}

uint64_t sub_10001D968()
{
  return sub_100008C7C(&qword_1000A5360, type metadata accessor for AccessoryAndSceneEntity, (uint64_t)&unk_1000870C0);
}

unint64_t sub_10001D998()
{
  unint64_t result;

  result = qword_1000A5368;
  if (!qword_1000A5368)
  {
    result = swift_getWitnessTable(&unk_1000872F8, &type metadata for AccessoryAndSceneQuery);
    atomic_store(result, (unint64_t *)&qword_1000A5368);
  }
  return result;
}

void *sub_10001D9DC()
{
  return &protocol witness table for UUID;
}

uint64_t sub_10001D9E8()
{
  id v0;
  NSString v1;
  id v2;
  uint64_t result;

  v0 = objc_allocWithZone((Class)NSUserDefaults);
  v1 = String._bridgeToObjectiveC()();
  v2 = objc_msgSend(v0, "initWithSuiteName:", v1);

  result = AppStorage.init<A>(wrappedValue:_:store:)(0, 0xD00000000000001DLL, 0x800000010008A550, v2);
  qword_1000A5348 = result;
  return result;
}

uint64_t sub_10001DA80@<X0>(uint64_t a1@<X8>)
{
  void (*v1)(char *, unint64_t, uint64_t);
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  id v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  NSObject *v19;
  os_log_type_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  void (*v28)(char *, uint64_t);
  id v29;
  uint64_t v31;
  char *v32;
  id v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;

  v3 = type metadata accessor for Logger(0);
  v34 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v5 = (char *)&v31 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for URL(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = __chkstk_darwin(v6);
  v10 = (char *)&v31 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v12 = (char *)&v31 - v11;
  v13 = objc_msgSend((id)objc_opt_self(NSFileManager), "defaultManager");
  v14 = objc_msgSend(v13, "URLsForDirectory:inDomains:", 13, 1);

  v15 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v14, v6);
  if (*(_QWORD *)(v15 + 16))
  {
    v1 = *(void (**)(char *, unint64_t, uint64_t))(v7 + 16);
    v1(v12, v15 + ((*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80)), v6);
    swift_bridgeObjectRelease(v15);
    URL.appendingPathComponent(_:)(0xD000000000000020, 0x800000010008A340);
    v14 = v12;
    if (qword_1000A4F18 == -1)
      goto LABEL_3;
  }
  else
  {
    __break(1u);
  }
  swift_once(&qword_1000A4F18, sub_1000531CC);
LABEL_3:
  v16 = sub_100014698(v3, (uint64_t)qword_1000A7AB0);
  (*(void (**)(char *, uint64_t, uint64_t))(v34 + 16))(v5, v16, v3);
  v17 = ((uint64_t (*)(char *, uint64_t, uint64_t))v1)(v10, a1, v6);
  v18 = v5;
  v19 = Logger.logObject.getter(v17);
  v20 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v19, v20))
  {
    v21 = swift_slowAlloc(22, -1);
    v33 = v14;
    v22 = v21;
    v23 = swift_slowAlloc(64, -1);
    v36 = v23;
    *(_DWORD *)v22 = 136315394;
    v32 = v18;
    v35 = sub_100023980(0x617461446F6D6564, 0xED000029284C5255, &v36);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v35, &v36, v22 + 4, v22 + 12);
    *(_WORD *)(v22 + 12) = 2080;
    v31 = v3;
    v24 = sub_100008C7C((unint64_t *)&qword_1000A5338, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t)&protocol conformance descriptor for URL);
    v25 = dispatch thunk of CustomStringConvertible.description.getter(v6, v24);
    v27 = v26;
    v35 = sub_100023980(v25, v26, &v36);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v35, &v36, v22 + 14, v22 + 22);
    swift_bridgeObjectRelease(v27);
    v28 = *(void (**)(char *, uint64_t))(v7 + 8);
    v28(v10, v6);
    _os_log_impl((void *)&_mh_execute_header, v19, v20, "%s demoDataURL: (%s)", (uint8_t *)v22, 0x16u);
    swift_arrayDestroy(v23, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v23, -1, -1);
    swift_slowDealloc(v22, -1, -1);

    (*(void (**)(char *, uint64_t))(v34 + 8))(v32, v31);
    v29 = v33;
  }
  else
  {

    v28 = *(void (**)(char *, uint64_t))(v7 + 8);
    v28(v10, v6);
    (*(void (**)(char *, uint64_t))(v34 + 8))(v18, v3);
    v29 = v14;
  }
  return ((uint64_t (*)(id, uint64_t))v28)(v29, v6);
}

uint64_t sub_10001DE38()
{
  uint64_t KeyPath;
  uint64_t result;

  sub_10000527C(&qword_1000A5528);
  KeyPath = swift_getKeyPath(&unk_100087460);
  result = IntentParameterDependency.__allocating_init<A, B>(_:)(KeyPath);
  qword_1000A7950 = result;
  return result;
}

uint64_t sub_10001DE78@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  Swift::String v15;
  uint64_t v16;
  int *v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  void *v27;
  Swift::String v28;
  Swift::String v29;
  char *v30;
  char *v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  char *v42;
  uint64_t v43;

  v43 = a1;
  v2 = sub_10000527C(&qword_1000A5500);
  __chkstk_darwin(v2);
  v42 = (char *)&v38 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_10000527C(&qword_1000A5320);
  __chkstk_darwin(v4);
  v41 = (char *)&v38 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for LocalizedStringResource(0);
  v39 = *(_QWORD *)(v6 - 8);
  v40 = v6;
  __chkstk_darwin(v6);
  v38 = (char *)&v38 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for DeviceDisplayNames(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v38 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for String.LocalizationValue.StringInterpolation(0);
  __chkstk_darwin(v12);
  v14 = (char *)&v38 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  String.LocalizationValue.StringInterpolation.init(literalCapacity:interpolationCount:)(0, 1);
  v15._countAndFlagsBits = 0;
  v15._object = (void *)0xE000000000000000;
  String.LocalizationValue.StringInterpolation.appendLiteral(_:)(v15);
  v16 = v1 + *(int *)(type metadata accessor for AccessoryAndSceneEntity(0) + 24);
  v17 = (int *)type metadata accessor for WidgetTileInfo(0);
  v18 = v17[7];
  v19 = (uint64_t *)(v16 + v17[6]);
  v21 = *v19;
  v20 = v19[1];
  v23 = *(_QWORD *)(v16 + v18);
  v22 = *(_QWORD *)(v16 + v18 + 8);
  swift_bridgeObjectRetain(v22);
  swift_bridgeObjectRetain(v20);
  v24 = DeviceDisplayNames.init(name:roomName:)(v21, v20, v23, v22);
  v25 = DeviceDisplayNames.displayName.getter(v24);
  v27 = v26;
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  v28._countAndFlagsBits = v25;
  v28._object = v27;
  String.LocalizationValue.StringInterpolation.appendInterpolation(_:)(v28);
  swift_bridgeObjectRelease(v27);
  v29._countAndFlagsBits = 0;
  v29._object = (void *)0xE000000000000000;
  String.LocalizationValue.StringInterpolation.appendLiteral(_:)(v29);
  v30 = v38;
  LocalizedStringResource.init(stringInterpolation:)(v14);
  v31 = v41;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v39 + 56))(v41, 1, 1, v40);
  v32 = (uint64_t *)(v16 + v17[8]);
  v33 = *v32;
  v34 = v32[1];
  swift_bridgeObjectRetain(v34);
  v35 = v42;
  DisplayRepresentation.Image.init(systemName:isTemplate:)(v33, v34, 2);
  v36 = type metadata accessor for DisplayRepresentation.Image(0);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v36 - 8) + 56))(v35, 0, 1, v36);
  return DisplayRepresentation.init(title:subtitle:image:)(v30, v31, v35);
}

uint64_t sub_10001E12C()
{
  uint64_t v0;

  v0 = type metadata accessor for TypeDisplayRepresentation(0);
  sub_10001D27C(v0, qword_1000A7958);
  sub_100014698(v0, (uint64_t)qword_1000A7958);
  return TypeDisplayRepresentation.init(stringLiteral:)(0xD000000000000014, 0x800000010008A700);
}

uint64_t sub_10001E18C@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v2;

  if (qword_1000A4E80 != -1)
    swift_once(&qword_1000A4E80, sub_10001DE38);
  v2 = qword_1000A7950;
  *a1 = qword_1000A7950;
  return swift_retain(v2);
}

uint64_t sub_10001E1DC()
{
  return sub_100008C7C(&qword_1000A5370, type metadata accessor for AccessoryAndSceneEntity, (uint64_t)&unk_100087138);
}

Swift::Int sub_10001E208()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD v3[9];

  Hasher.init(_seed:)(v3, 0);
  v0 = type metadata accessor for UUID(0);
  v1 = sub_100008C7C((unint64_t *)&qword_1000A5020, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
  dispatch thunk of Hashable.hash(into:)(v3, v0, v1);
  dispatch thunk of Hashable.hash(into:)(v3, v0, v1);
  sub_100019DE4((uint64_t)v3);
  return Hasher._finalize()();
}

void sub_10001E2B8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = type metadata accessor for UUID(0);
  v3 = sub_100008C7C((unint64_t *)&qword_1000A5020, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
  dispatch thunk of Hashable.hash(into:)(a1, v2, v3);
  dispatch thunk of Hashable.hash(into:)(a1, v2, v3);
  sub_100019DE4(a1);
}

Swift::Int sub_10001E350(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD v4[9];

  Hasher.init(_seed:)(v4, a1);
  v1 = type metadata accessor for UUID(0);
  v2 = sub_100008C7C((unint64_t *)&qword_1000A5020, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
  dispatch thunk of Hashable.hash(into:)(v4, v1, v2);
  dispatch thunk of Hashable.hash(into:)(v4, v1, v2);
  sub_100019DE4((uint64_t)v4);
  return Hasher._finalize()();
}

uint64_t sub_10001E3FC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if ((static UUID.== infix(_:_:)(a1, a2) & 1) != 0
    && (static UUID.== infix(_:_:)(a1 + *(int *)(a3 + 20), a2 + *(int *)(a3 + 20)) & 1) != 0)
  {
    return sub_10001AB38(a1 + *(int *)(a3 + 24), a2 + *(int *)(a3 + 24));
  }
  else
  {
    return 0;
  }
}

uint64_t sub_10001E464()
{
  return sub_100008C7C(&qword_1000A5378, type metadata accessor for AccessoryAndSceneEntity, (uint64_t)&unk_1000871C8);
}

uint64_t sub_10001E490()
{
  return sub_100008C7C(&qword_1000A5380, type metadata accessor for AccessoryAndSceneEntity, (uint64_t)&unk_1000871F0);
}

uint64_t sub_10001E4BC()
{
  return sub_100008C7C(&qword_1000A5388, type metadata accessor for AccessoryAndSceneEntity, (uint64_t)&unk_100087218);
}

uint64_t sub_10001E4E8()
{
  return sub_100008C7C(&qword_1000A5390, type metadata accessor for AccessoryAndSceneEntity, (uint64_t)&unk_100087270);
}

uint64_t sub_10001E518@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  if (qword_1000A4E88 != -1)
    swift_once(&qword_1000A4E88, sub_10001E12C);
  v2 = type metadata accessor for TypeDisplayRepresentation(0);
  v3 = sub_100014698(v2, (uint64_t)qword_1000A7958);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 16))(a1, v3, v2);
}

uint64_t sub_10001E588()
{
  return sub_1000229D8(&qword_1000A5398, &qword_1000A53A0, (uint64_t)&protocol conformance descriptor for EmptyResolverSpecification<A>);
}

uint64_t sub_10001E5B4(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100008C7C(qword_1000A53C8, type metadata accessor for AccessoryAndSceneEntity, (uint64_t)&unk_100087068);
  return static AppEntity.defaultResolverSpecification.getter(a1, v2);
}

uint64_t sub_10001E604()
{
  return sub_100008C7C((unint64_t *)&unk_1000A53A8, type metadata accessor for AccessoryAndSceneEntity, (uint64_t)&unk_1000872A0);
}

uint64_t sub_10001E634(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100008C7C(&qword_1000A5390, type metadata accessor for AccessoryAndSceneEntity, (uint64_t)&unk_100087270);
  return InstanceDisplayRepresentable.localizedStringResource.getter(a1, v2);
}

uint64_t sub_10001E684()
{
  Swift::String v0;
  uint64_t v1;
  Swift::String v2;
  void *object;
  Swift::String v4;
  uint64_t v5;
  Swift::String v6;
  void *v7;

  _StringGuts.grow(_:)(65);
  v0._object = (void *)0x800000010008A570;
  v0._countAndFlagsBits = 0xD00000000000001BLL;
  String.append(_:)(v0);
  type metadata accessor for AccessoryAndSceneEntity(0);
  v1 = type metadata accessor for WidgetTileInfo(0);
  v2._countAndFlagsBits = UUID.uuidString.getter(v1);
  object = v2._object;
  String.append(_:)(v2);
  swift_bridgeObjectRelease(object);
  v4._countAndFlagsBits = 0xD000000000000022;
  v4._object = (void *)0x800000010008A590;
  String.append(_:)(v4);
  v6._countAndFlagsBits = UUID.uuidString.getter(v5);
  v7 = v6._object;
  String.append(_:)(v6);
  swift_bridgeObjectRelease(v7);
  URL.init(string:)(0, 0xE000000000000000);
  return swift_bridgeObjectRelease(0xE000000000000000);
}

uint64_t sub_10001E78C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, _QWORD, uint64_t);
  void *v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  id v16;
  uint64_t v18;

  v1 = type metadata accessor for ServiceKind(0);
  v2 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  v4 = (char *)&v18 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_10000527C(&qword_1000A4FE0);
  v6 = *(_QWORD *)(v2 + 72);
  v7 = *(unsigned __int8 *)(v2 + 80);
  v8 = (v7 + 32) & ~v7;
  v9 = swift_allocObject(v5, v8 + 5 * v6, v7 | 7);
  *(_OWORD *)(v9 + 16) = xmmword_100086C90;
  v10 = v9 + v8;
  v11 = *(void (**)(uint64_t, _QWORD, uint64_t))(v2 + 104);
  v11(v10, enum case for ServiceKind.garageDoorOpener(_:), v1);
  v11(v10 + v6, enum case for ServiceKind.door(_:), v1);
  v11(v10 + 2 * v6, enum case for ServiceKind.window(_:), v1);
  v11(v10 + 3 * v6, enum case for ServiceKind.windowCovering(_:), v1);
  v11(v10 + 4 * v6, enum case for ServiceKind.lockMechanism(_:), v1);
  v12 = sub_10001B2B8(v9);
  swift_setDeallocating(v9);
  swift_arrayDestroy(v10, 5, v1);
  swift_deallocClassInstance(v9, 32, 7);
  v13 = v0 + *(int *)(type metadata accessor for AccessoryAndSceneEntity(0) + 24);
  v14 = v13 + *(int *)(type metadata accessor for WidgetTileInfo(0) + 56);
  if (*(_BYTE *)(v14 + 8))
  {
    swift_bridgeObjectRelease(v12);
    v15 = 0;
  }
  else
  {
    v16 = *(id *)v14;
    HMService.serviceKind.getter(v16);
    v15 = sub_100016F18((uint64_t)v4, (uint64_t)v12);
    swift_bridgeObjectRelease(v12);

    (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  }
  return v15 & 1;
}

uint64_t sub_10001E97C()
{
  *(_QWORD *)&xmmword_1000A7970 = *UserHomeSettings.shared.unsafeMutableAddressor();
  *((_QWORD *)&xmmword_1000A7970 + 1) = &protocol witness table for UserHomeSettings;
  return swift_retain(xmmword_1000A7970);
}

uint64_t sub_10001E9A8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  char *v7;
  uint64_t v9;

  v2 = sub_10000527C(&qword_1000A54B8);
  v3 = __chkstk_darwin(v2);
  v5 = (char *)&v9 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  v7 = (char *)&v9 - v6;
  sub_100026CB4(a1, (uint64_t)&v9 - v6, &qword_1000A54B8);
  sub_100026CB4((uint64_t)v7, (uint64_t)v5, &qword_1000A54B8);
  IntentParameter.wrappedValue.setter(v5);
  return sub_100014EFC((uint64_t)v7, &qword_1000A54B8);
}

uint64_t sub_10001EA6C(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v2[5] = a1;
  v2[6] = a2;
  v3 = type metadata accessor for UUID(0);
  v2[7] = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v2[8] = v4;
  v2[9] = swift_task_alloc((*(_QWORD *)(v4 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = *(_QWORD *)(type metadata accessor for AccessoryAndSceneEntity(0) - 8);
  v2[10] = v5;
  v6 = (*(_QWORD *)(v5 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[11] = swift_task_alloc(v6);
  v2[12] = swift_task_alloc(v6);
  v7 = type metadata accessor for HomeEntity(0);
  v2[13] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v7 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_10000527C(&qword_1000A5060);
  v2[14] = v8;
  v9 = (*(_QWORD *)(*(_QWORD *)(v8 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[15] = swift_task_alloc(v9);
  v2[16] = swift_task_alloc(v9);
  v2[17] = swift_task_alloc(v9);
  v2[18] = swift_task_alloc(v9);
  v10 = type metadata accessor for Logger(0);
  v2[19] = v10;
  v11 = *(_QWORD *)(v10 - 8);
  v2[20] = v11;
  v2[21] = swift_task_alloc((*(_QWORD *)(v11 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_10001EB98, 0, 0);
}

uint64_t sub_10001EB98()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t KeyPath;
  unint64_t v20;
  void (*v21)(uint64_t, uint64_t, uint64_t);
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  void (*v48)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  void (*v55)(uint64_t, uint64_t, uint64_t);
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  _QWORD *v64;
  unint64_t v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  void (*v76)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v77;
  BOOL v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  unint64_t v96;
  uint64_t v97;
  uint64_t v98;
  _QWORD *v99;
  uint64_t v100;
  uint64_t *v101;
  unint64_t v102;
  uint64_t v103;
  _QWORD *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  unint64_t v108;
  uint64_t v109;
  uint64_t v110;
  _QWORD *v111;
  uint64_t v112;
  os_log_type_t v113;
  uint64_t v114;
  uint64_t (*v115)(char, uint64_t, uint64_t);
  _QWORD *v116;

  if (qword_1000A4F08 != -1)
    swift_once(&qword_1000A4F08, sub_100053184);
  v1 = *(_QWORD *)(v0 + 40);
  v2 = *(_QWORD *)(v0 + 160);
  v3 = *(_QWORD *)(v0 + 168);
  v4 = *(_QWORD *)(v0 + 152);
  v101 = (uint64_t *)(v0 + 40);
  v5 = *(_QWORD *)(v0 + 48);
  v6 = sub_100014698(v4, (uint64_t)qword_1000A7A80);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16))(v3, v6, v4);
  swift_retain_n(v5, 2);
  v7 = swift_bridgeObjectRetain_n(v1, 2);
  v8 = Logger.logObject.getter(v7);
  v9 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v8, v9))
  {
    v113 = v9;
    v10 = v0 + 24;
    v109 = v0 + 32;
    v11 = swift_slowAlloc(32, -1);
    v111 = (_QWORD *)swift_slowAlloc(96, -1);
    v116 = v111;
    *(_DWORD *)v11 = 136315650;
    *(_QWORD *)(v0 + 16) = sub_100023980(0x7365697469746E65, 0xEE00293A726F6628, (uint64_t *)&v116);
    v12 = UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 16, v0 + 24, v11 + 4, v11 + 12);
    *(_WORD *)(v11 + 12) = 2080;
    v13 = IntentParameterDependency.wrappedValue.getter(v12);
    if (v13)
    {
      v14 = v13;
      v15 = *(_QWORD *)(v0 + 144);
      v16 = *(_QWORD *)(v0 + 104);
      v18 = *(_QWORD *)(v0 + 56);
      v17 = *(_QWORD *)(v0 + 64);
      KeyPath = swift_getKeyPath(&unk_100087438);
      v20 = sub_100024008();
      IntentProjection.subscript.getter(KeyPath, v20);
      swift_release(KeyPath);
      swift_release(v14);
      v21 = *(void (**)(uint64_t, uint64_t, uint64_t))(v17 + 16);
      v10 = v0 + 24;
      v21(v15, v16, v18);
      sub_100026C78(v16, type metadata accessor for HomeEntity);
      v22 = 0;
    }
    else
    {
      v22 = 1;
    }
    v103 = *(_QWORD *)(v0 + 160);
    v27 = *(_QWORD *)(v0 + 144);
    v105 = *(_QWORD *)(v0 + 152);
    v107 = *(_QWORD *)(v0 + 168);
    v28 = *(_QWORD *)(v0 + 112);
    v29 = *(_QWORD *)(v0 + 56);
    v30 = *(_QWORD *)(v0 + 40);
    v31 = *(_QWORD *)(v0 + 48);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 + 64) + 56))(v27, v22, 1, v29);
    v32 = String.init<A>(describing:)(v27, v28);
    v34 = v33;
    *(_QWORD *)(v0 + 24) = sub_100023980(v32, v33, (uint64_t *)&v116);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v10, v109, v11 + 14, v11 + 22);
    swift_bridgeObjectRelease(v34);
    swift_release_n(v31, 2);
    *(_WORD *)(v11 + 22) = 2080;
    v35 = swift_bridgeObjectRetain(v30);
    v36 = Array.description.getter(v35, v29);
    v38 = v37;
    swift_bridgeObjectRelease(v30);
    *(_QWORD *)(v0 + 32) = sub_100023980(v36, v38, (uint64_t *)&v116);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v109, v101, v11 + 24, v11 + 32);
    swift_bridgeObjectRelease(v38);
    swift_bridgeObjectRelease_n(v30, 2);
    _os_log_impl((void *)&_mh_execute_header, v8, v113, "%s HomeID:%s identifiers:%s", (uint8_t *)v11, 0x20u);
    swift_arrayDestroy(v111, 3, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v111, -1, -1);
    swift_slowDealloc(v11, -1, -1);

    (*(void (**)(uint64_t, uint64_t))(v103 + 8))(v107, v105);
  }
  else
  {
    v23 = *(_QWORD *)(v0 + 160);
    v24 = *(_QWORD *)(v0 + 168);
    v25 = *(_QWORD *)(v0 + 152);
    v26 = *(_QWORD *)(v0 + 40);
    swift_release_n(*(_QWORD *)(v0 + 48), 2);
    swift_bridgeObjectRelease_n(v26, 2);

    (*(void (**)(uint64_t, uint64_t))(v23 + 8))(v24, v25);
  }
  if (qword_1000A4E78 != -1)
    swift_once(&qword_1000A4E78, sub_10001D9E8);
  v39 = qword_1000A5348;
  v40 = swift_retain(qword_1000A5348);
  AppStorage.wrappedValue.getter(v40, &type metadata for Bool);
  v41 = swift_release(v39);
  if (*(_BYTE *)(v0 + 184) != 1)
  {
    v68 = IntentParameterDependency.wrappedValue.getter(v41);
    v69 = *(_QWORD *)(v0 + 128);
    if (v68)
    {
      v70 = v68;
      v71 = *(_QWORD *)(v0 + 104);
      v72 = *(_QWORD *)(v0 + 56);
      v73 = *(_QWORD *)(v0 + 64);
      v74 = swift_getKeyPath(&unk_100087438);
      v75 = sub_100024008();
      IntentProjection.subscript.getter(v74, v75);
      swift_release(v74);
      swift_release(v70);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v73 + 16))(v69, v71, v72);
      sub_100026C78(v71, type metadata accessor for HomeEntity);
      v76 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v73 + 56);
      v76(v69, 0, 1, v72);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v73 + 48))(v69, 1, v72) != 1)
      {
        v77 = sub_100014EFC(*(_QWORD *)(v0 + 128), &qword_1000A5060);
        v78 = 0;
LABEL_39:
        v89 = IntentParameterDependency.wrappedValue.getter(v77);
        if (v89)
        {
          v90 = v89;
          v91 = *(_QWORD *)(v0 + 120);
          v92 = *(_QWORD *)(v0 + 104);
          v93 = *(_QWORD *)(v0 + 56);
          v94 = *(_QWORD *)(v0 + 64);
          v95 = swift_getKeyPath(&unk_100087438);
          v96 = sub_100024008();
          IntentProjection.subscript.getter(v95, v96);
          swift_release(v95);
          swift_release(v90);
          (*(void (**)(uint64_t, uint64_t, uint64_t))(v94 + 16))(v91, v92, v93);
          sub_100026C78(v92, type metadata accessor for HomeEntity);
          v97 = 0;
        }
        else
        {
          v97 = 1;
        }
        v98 = *(_QWORD *)(v0 + 40);
        v76(*(_QWORD *)(v0 + 120), v97, 1, *(_QWORD *)(v0 + 56));
        v115 = (uint64_t (*)(char, uint64_t, uint64_t))((char *)&dword_1000A54D8 + dword_1000A54D8);
        v99 = (_QWORD *)swift_task_alloc(unk_1000A54DC);
        *(_QWORD *)(v0 + 176) = v99;
        *v99 = v0;
        v99[1] = sub_10001F4B0;
        return v115(v78, *(_QWORD *)(v0 + 120), v98);
      }
    }
    else
    {
      v76 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 + 64) + 56);
      v76(*(_QWORD *)(v0 + 128), 1, 1, *(_QWORD *)(v0 + 56));
    }
    v88 = *(_QWORD *)(v0 + 40);
    v77 = sub_100014EFC(*(_QWORD *)(v0 + 128), &qword_1000A5060);
    v78 = *(_QWORD *)(v88 + 16) != 0;
    goto LABEL_39;
  }
  if (qword_1000A4EB0 != -1)
    swift_once(&qword_1000A4EB0, sub_100029B78);
  v42 = *v101;
  v43 = qword_1000A79D0;
  v116 = _swiftEmptyArrayStorage;
  v44 = *(_QWORD *)(qword_1000A79D0 + 16);
  swift_bridgeObjectRetain(v42);
  swift_bridgeObjectRetain(v43);
  v110 = v44;
  if (v44)
  {
    v45 = 0;
    v46 = *(_QWORD *)(v0 + 80);
    v47 = *(_QWORD *)(v0 + 64);
    v112 = *(_QWORD *)(v46 + 72);
    v100 = v43;
    v102 = (*(unsigned __int8 *)(v46 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v46 + 80);
    v108 = v43 + v102;
    v104 = _swiftEmptyArrayStorage;
    v106 = v42;
    do
    {
      v114 = v45;
      sub_100026C34(v108 + v45 * v112, *(_QWORD *)(v0 + 96), type metadata accessor for AccessoryAndSceneEntity);
      v51 = *(_QWORD *)(v42 + 16);
      v52 = *(_QWORD *)(v0 + 40);
      if (v51)
      {
        v53 = v52 + ((*(unsigned __int8 *)(v47 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v47 + 80));
        swift_bridgeObjectRetain(v52);
        v54 = *(_QWORD *)(v47 + 72);
        v55 = *(void (**)(uint64_t, uint64_t, uint64_t))(v47 + 16);
        while (1)
        {
          v56 = *(_QWORD *)(v0 + 136);
          v57 = *(_QWORD *)(v0 + 56);
          v55(v56, v53, v57);
          v48 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v47 + 56);
          v48(v56, 0, 1, v57);
          if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v47 + 48))(v56, 1, v57) == 1)
            break;
          v58 = *(_QWORD *)(v0 + 96);
          v59 = *(_QWORD *)(v0 + 72);
          v60 = *(_QWORD *)(v0 + 56);
          (*(void (**)(uint64_t, _QWORD, uint64_t))(v47 + 32))(v59, *(_QWORD *)(v0 + 136), v60);
          v61 = sub_100008C7C((unint64_t *)&unk_1000A7670, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
          LOBYTE(v58) = dispatch thunk of static Equatable.== infix(_:_:)(v59, v58, v60, v61);
          (*(void (**)(uint64_t, uint64_t))(v47 + 8))(v59, v60);
          if ((v58 & 1) != 0)
          {
            v62 = *(_QWORD *)(v0 + 88);
            v63 = *(_QWORD *)(v0 + 96);
            swift_bridgeObjectRelease(*(_QWORD *)(v0 + 40));
            sub_100026D98(v63, v62, type metadata accessor for AccessoryAndSceneEntity);
            v64 = v104;
            if ((swift_isUniquelyReferenced_nonNull_native(v104) & 1) == 0)
            {
              sub_10002D8A0(0, v104[2] + 1, 1);
              v64 = v116;
            }
            v42 = v106;
            v50 = v114;
            v66 = v64[2];
            v65 = v64[3];
            if (v66 >= v65 >> 1)
            {
              sub_10002D8A0(v65 > 1, v66 + 1, 1);
              v64 = v116;
            }
            v67 = *(_QWORD *)(v0 + 88);
            v64[2] = v66 + 1;
            v104 = v64;
            sub_100026D98(v67, (uint64_t)v64 + v102 + v66 * v112, type metadata accessor for AccessoryAndSceneEntity);
            goto LABEL_19;
          }
          v53 += v54;
          if (!--v51)
            goto LABEL_17;
        }
      }
      else
      {
        swift_bridgeObjectRetain(v52);
        v48 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v47 + 56);
LABEL_17:
        v48(*(_QWORD *)(v0 + 136), 1, 1, *(_QWORD *)(v0 + 56));
      }
      v49 = *(_QWORD *)(v0 + 96);
      swift_bridgeObjectRelease(*(_QWORD *)(v0 + 40));
      sub_100026C78(v49, type metadata accessor for AccessoryAndSceneEntity);
      v42 = v106;
      v50 = v114;
LABEL_19:
      v45 = v50 + 1;
    }
    while (v45 != v110);
    v43 = v100;
    v42 = *v101;
  }
  else
  {
    v104 = _swiftEmptyArrayStorage;
  }
  swift_bridgeObjectRelease(v42);
  swift_bridgeObjectRelease(v43);
  v79 = *(_QWORD *)(v0 + 136);
  v80 = *(_QWORD *)(v0 + 144);
  v82 = *(_QWORD *)(v0 + 120);
  v81 = *(_QWORD *)(v0 + 128);
  v84 = *(_QWORD *)(v0 + 96);
  v83 = *(_QWORD *)(v0 + 104);
  v85 = *(_QWORD *)(v0 + 88);
  v86 = *(_QWORD *)(v0 + 72);
  swift_task_dealloc(*(_QWORD *)(v0 + 168));
  swift_task_dealloc(v80);
  swift_task_dealloc(v79);
  swift_task_dealloc(v81);
  swift_task_dealloc(v82);
  swift_task_dealloc(v83);
  swift_task_dealloc(v84);
  swift_task_dealloc(v85);
  swift_task_dealloc(v86);
  return (*(uint64_t (**)(_QWORD *))(v0 + 8))(v104);
}

uint64_t sub_10001F4B0(uint64_t a1)
{
  uint64_t *v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;

  v3 = (_QWORD *)*v1;
  v4 = *(_QWORD *)(*v1 + 120);
  v15 = *v1;
  swift_task_dealloc(*(_QWORD *)(*v1 + 176));
  sub_100014EFC(v4, &qword_1000A5060);
  v5 = v3[21];
  v7 = v3[17];
  v6 = v3[18];
  v9 = v3[15];
  v8 = v3[16];
  v11 = v3[12];
  v10 = v3[13];
  v12 = v3[11];
  v13 = v3[9];
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  return (*(uint64_t (**)(uint64_t))(v15 + 8))(a1);
}

uint64_t sub_10001F590(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;

  v4[7] = a3;
  v4[8] = a4;
  v4[5] = a1;
  v4[6] = a2;
  v5 = type metadata accessor for HomeEntity(0);
  v4[9] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v5 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_10000527C(&qword_1000A5060);
  v4[10] = v6;
  v7 = (*(_QWORD *)(*(_QWORD *)(v6 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v4[11] = swift_task_alloc(v7);
  v4[12] = swift_task_alloc(v7);
  return swift_task_switch(sub_10001F624, 0, 0);
}

uint64_t sub_10001F624()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t KeyPath;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v39;
  uint64_t v40;

  if (qword_1000A4F08 != -1)
    swift_once(&qword_1000A4F08, sub_100053184);
  v1 = v0[7];
  v2 = v0[8];
  v3 = type metadata accessor for Logger(0);
  sub_100014698(v3, (uint64_t)qword_1000A7A80);
  swift_retain_n(v2, 2);
  v4 = swift_bridgeObjectRetain_n(v1, 2);
  v5 = Logger.logObject.getter(v4);
  v6 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v5, v6))
  {
    v7 = swift_slowAlloc(32, -1);
    v8 = swift_slowAlloc(96, -1);
    v40 = v8;
    *(_DWORD *)v7 = 136315650;
    v0[2] = sub_100023980(0xD000000000000013, 0x800000010008A6E0, &v40);
    v9 = UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 2, v0 + 3, v7 + 4, v7 + 12);
    *(_WORD *)(v7 + 12) = 2080;
    v10 = IntentParameterDependency.wrappedValue.getter(v9);
    v11 = v0[12];
    v39 = v8;
    if (v10)
    {
      v12 = v10;
      v13 = v0[9];
      KeyPath = swift_getKeyPath(&unk_100087438);
      v15 = sub_100024008();
      IntentProjection.subscript.getter(KeyPath, v15);
      swift_release(KeyPath);
      swift_release(v12);
      v16 = type metadata accessor for UUID(0);
      v17 = *(_QWORD *)(v16 - 8);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v17 + 16))(v11, v13, v16);
      sub_100026C78(v13, type metadata accessor for HomeEntity);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v17 + 56))(v11, 0, 1, v16);
    }
    else
    {
      v19 = type metadata accessor for UUID(0);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 56))(v11, 1, 1, v19);
    }
    v20 = v0[7];
    v21 = v0[8];
    v22 = v0[6];
    v23 = String.init<A>(describing:)(v0[12], v0[10]);
    v25 = v24;
    v0[3] = sub_100023980(v23, v24, &v40);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 3, v0 + 4, v7 + 14, v7 + 22);
    swift_bridgeObjectRelease(v25);
    swift_release_n(v21, 2);
    *(_WORD *)(v7 + 22) = 2080;
    swift_bridgeObjectRetain(v20);
    v0[4] = sub_100023980(v22, v20, &v40);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 4, v0 + 5, v7 + 24, v7 + 32);
    swift_bridgeObjectRelease_n(v20, 3);
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "%s Generating suggested entities in home %s matching with string %s", (uint8_t *)v7, 0x20u);
    swift_arrayDestroy(v39, 3, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v39, -1, -1);
    swift_slowDealloc(v7, -1, -1);
  }
  else
  {
    v18 = v0[7];
    swift_release_n(v0[8], 2);
    swift_bridgeObjectRelease_n(v18, 2);
  }

  v27 = IntentParameterDependency.wrappedValue.getter(v26);
  if (v27)
  {
    v28 = v27;
    v29 = v0[11];
    v30 = v0[9];
    v31 = swift_getKeyPath(&unk_100087438);
    v32 = sub_100024008();
    IntentProjection.subscript.getter(v31, v32);
    swift_release(v31);
    swift_release(v28);
    v33 = type metadata accessor for UUID(0);
    v34 = *(_QWORD *)(v33 - 8);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v34 + 16))(v29, v30, v33);
    sub_100026C78(v30, type metadata accessor for HomeEntity);
    v35 = 0;
  }
  else
  {
    v33 = type metadata accessor for UUID(0);
    v34 = *(_QWORD *)(v33 - 8);
    v35 = 1;
  }
  v36 = v0[7];
  (*(void (**)(_QWORD, uint64_t, uint64_t, uint64_t))(v34 + 56))(v0[11], v35, 1, v33);
  v37 = (_QWORD *)swift_task_alloc(dword_1000A54AC);
  v0[13] = v37;
  *v37 = v0;
  v37[1] = sub_10001FA20;
  return sub_10001FAA4(v0[5], v0[11], v0[6], v36);
}

uint64_t sub_10001FA20()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;

  v1 = *(_QWORD *)(*v0 + 96);
  v2 = *(_QWORD *)(*v0 + 88);
  v3 = *(_QWORD *)(*v0 + 72);
  v5 = *v0;
  swift_task_dealloc(*(_QWORD *)(*v0 + 104));
  sub_100014EFC(v2, &qword_1000A5060);
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  return (*(uint64_t (**)(void))(v5 + 8))();
}

uint64_t sub_10001FAA4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;

  v4[25] = a3;
  v4[26] = a4;
  v4[23] = a1;
  v4[24] = a2;
  v5 = sub_10000527C(&qword_1000A54C8);
  v4[27] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v4[28] = v6;
  v4[29] = swift_task_alloc((*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for Logger(0);
  v4[30] = v7;
  v8 = *(_QWORD *)(v7 - 8);
  v4[31] = v8;
  v9 = (*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v4[32] = swift_task_alloc(v9);
  v4[33] = swift_task_alloc(v9);
  v10 = type metadata accessor for LocalizedStringResource(0);
  v4[34] = v10;
  v11 = *(_QWORD *)(v10 - 8);
  v4[35] = v11;
  v4[36] = swift_task_alloc((*(_QWORD *)(v11 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_10000527C(&qword_1000A54D0);
  v4[37] = v12;
  v13 = *(_QWORD *)(v12 - 8);
  v4[38] = v13;
  v14 = (*(_QWORD *)(v13 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v4[39] = swift_task_alloc(v14);
  v4[40] = swift_task_alloc(v14);
  v4[41] = swift_task_alloc(v14);
  v4[42] = swift_task_alloc(v14);
  v4[43] = swift_task_alloc(v14);
  v4[44] = swift_task_alloc(v14);
  v15 = type metadata accessor for DeviceDisplayNames(0);
  v4[45] = v15;
  v16 = *(_QWORD *)(v15 - 8);
  v4[46] = v16;
  v4[47] = swift_task_alloc((*(_QWORD *)(v16 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = type metadata accessor for WidgetTileInfo(0);
  v4[48] = v17;
  v18 = (*(_QWORD *)(*(_QWORD *)(v17 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v4[49] = swift_task_alloc(v18);
  v4[50] = swift_task_alloc(v18);
  v19 = type metadata accessor for AccessoryAndSceneEntity(0);
  v4[51] = v19;
  v20 = *(_QWORD *)(v19 - 8);
  v4[52] = v20;
  v21 = (*(_QWORD *)(v20 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v4[53] = swift_task_alloc(v21);
  v4[54] = swift_task_alloc(v21);
  v4[55] = swift_task_alloc(v21);
  v4[56] = swift_task_alloc(v21);
  v4[57] = swift_task_alloc(v21);
  v4[58] = swift_task_alloc(v21);
  v22 = type metadata accessor for UUID(0);
  v4[59] = v22;
  v23 = *(_QWORD *)(v22 - 8);
  v4[60] = v23;
  v24 = (*(_QWORD *)(v23 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v4[61] = swift_task_alloc(v24);
  v4[62] = swift_task_alloc(v24);
  v25 = sub_10000527C(&qword_1000A5320);
  v4[63] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v25 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = sub_10000527C(qword_1000A53F0);
  v4[64] = v26;
  v27 = *(_QWORD *)(v26 - 8);
  v4[65] = v27;
  v28 = (*(_QWORD *)(v27 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v4[66] = swift_task_alloc(v28);
  v4[67] = swift_task_alloc(v28);
  return swift_task_switch(sub_10001FD34, 0, 0);
}

uint64_t sub_10001FD34()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void (*v4)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v5;
  _QWORD *v6;
  uint64_t (*v8)(char, uint64_t, uint64_t);

  v1 = v0[63];
  v2 = v0[51];
  v3 = v0[34];
  v4 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v0[35] + 56);
  v0[68] = v4;
  v4(v1, 1, 1, v3);
  v5 = sub_100008C7C(&qword_1000A5388, type metadata accessor for AccessoryAndSceneEntity, (uint64_t)&unk_100087218);
  v0[69] = v5;
  IntentItemCollection.init(promptLabel:usesIndexedCollation:sectionsBuilder:)(v1, 0, sub_100021DE4, 0, v2, v5);
  v8 = (uint64_t (*)(char, uint64_t, uint64_t))((char *)&dword_1000A54D8 + dword_1000A54D8);
  v6 = (_QWORD *)swift_task_alloc(unk_1000A54DC);
  v0[70] = v6;
  *v6 = v0;
  v6[1] = sub_10001FE0C;
  return v8(0, v0[24], 0);
}

uint64_t sub_10001FE0C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 560);
  *(_QWORD *)(*(_QWORD *)v1 + 568) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_10001FE68, 0, 0);
}

uint64_t sub_10001FE68()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  _BOOL4 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  NSObject *v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t *v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t *v50;
  NSObject *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  Class isa;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v73;
  char v74;
  unint64_t v75;
  unint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  char v81;
  uint64_t v82;
  _QWORD *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;
  unint64_t v89;
  uint64_t v90;
  uint64_t isUniquelyReferenced_nonNull_native;
  char v92;
  unint64_t v93;
  uint64_t v94;
  _BOOL8 v95;
  uint64_t v96;
  char v97;
  unint64_t v98;
  char v99;
  uint64_t *v100;
  uint64_t v101;
  BOOL v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  _QWORD *v114;
  NSObject *v115;
  _QWORD *v116;
  int64_t v117;
  unint64_t v118;
  unint64_t v119;
  int64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  unint64_t v124;
  uint64_t v125;
  void (*v126)(unint64_t, uint64_t, uint64_t);
  _QWORD *v127;
  uint64_t v128;
  uint64_t *v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  _QWORD *v139;
  unint64_t v140;
  unint64_t v141;
  unint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  NSObject *v151;
  os_log_type_t v152;
  uint64_t v153;
  _QWORD *v154;
  int64_t v155;
  _QWORD *v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  _QWORD *v161;
  uint64_t v162;
  char v163;
  unint64_t v164;
  unint64_t v165;
  _QWORD *v166;
  int64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  unint64_t v172;
  unint64_t v173;
  uint64_t v174;
  _QWORD *v175;
  uint64_t v176;
  int64_t v177;
  _QWORD *v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  unint64_t v185;
  unint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t *v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  NSObject *v195;
  os_log_type_t v196;
  uint64_t v197;
  uint64_t v198;
  _QWORD *v199;
  uint64_t v200;
  uint64_t v201;
  int64_t v202;
  unint64_t v203;
  _QWORD *v204;
  uint64_t v205;
  _QWORD *v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  unint64_t v212;
  unint64_t v213;
  uint64_t v214;
  uint64_t v215;
  int64_t v216;
  char v217;
  int64_t v218;
  uint64_t v219;
  unint64_t v220;
  uint64_t v221;
  char *v222;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  unint64_t v233;
  unint64_t v234;
  void (*v235)(uint64_t, uint64_t, uint64_t, _QWORD);
  _QWORD *v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  _QWORD *v248;
  unint64_t v249;
  unint64_t v250;
  _QWORD *v251;
  uint64_t v252;
  uint64_t v253;
  _QWORD *v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  _QWORD *v258;
  os_log_type_t v259;
  uint64_t v260;
  uint64_t v261;
  uint8_t *v262;
  uint64_t v263;
  void (*v264)(uint64_t, uint64_t);
  uint64_t v265;
  _QWORD *v266;
  _QWORD *v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  os_log_t v271;
  NSObject *v272;
  os_log_t v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  _QWORD *v284;
  uint64_t v285;
  uint64_t v286;
  unint64_t v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  _QWORD *v293;
  void *v294;
  uint64_t v295;
  uint64_t v296;
  _QWORD *v297;
  os_log_type_t v298;
  unint64_t v299;
  uint64_t v300;
  os_log_type_t log;
  os_log_t loga;
  os_log_t logb;
  NSObject *logc;
  os_log_t logd;
  os_log_t loge;
  uint64_t v307;
  void (*v308)(unint64_t, uint64_t, uint64_t);
  void (*v309)(_QWORD, _QWORD);
  void (*v310)(uint64_t, unint64_t, uint64_t);
  uint64_t v311;
  NSObject *v312;
  unint64_t v313;
  unint64_t v314;
  uint64_t v315;
  uint64_t v316;
  _QWORD *v317;
  uint64_t v318;
  uint64_t v319;
  uint64_t v320;
  _QWORD *v321;
  uint64_t v322;
  uint64_t v323;
  uint64_t v324;
  uint64_t v325;
  void (*v326)(uint64_t, _QWORD *, uint64_t);
  int64_t v327;
  uint64_t v328;
  uint64_t v329;
  _QWORD *v330;
  uint64_t v331;
  uint64_t v332[3];

  v1 = v0;
  if (qword_1000A4F08 != -1)
    goto LABEL_162;
  while (1)
  {
    v2 = v1[71];
    v3 = sub_100014698(v1[30], (uint64_t)qword_1000A7A80);
    v4 = swift_bridgeObjectRetain_n(v2, 2);
    v254 = (_QWORD *)v3;
    v5 = Logger.logObject.getter(v4);
    v6 = static os_log_type_t.default.getter();
    v7 = os_log_type_enabled(v5, v6);
    v8 = v1[71];
    v321 = v1;
    if (v7)
    {
      v9 = swift_slowAlloc(32, -1);
      v10 = swift_slowAlloc(64, -1);
      v332[0] = v10;
      *(_DWORD *)v9 = 136315650;
      v1[20] = sub_100023980(0xD00000000000002ELL, 0x800000010008A5E0, v332);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 20, v1 + 21, v9 + 4, v9 + 12);
      *(_WORD *)(v9 + 12) = 2048;
      v11 = *(_QWORD *)(v8 + 16);
      v1[21] = v11;
      v317 = v1 + 22;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 21, v1 + 22, v9 + 14, v9 + 22);
      *(_WORD *)(v9 + 22) = 2080;
      v12 = _swiftEmptyArrayStorage;
      if (v11)
      {
        v295 = v10;
        log = v6;
        v312 = v5;
        v13 = v1[71];
        v14 = v1[60];
        v15 = v1[52];
        v323 = v1[51];
        v330 = _swiftEmptyArrayStorage;
        sub_10002D858(0, v11, 0);
        v16 = v13 + ((*(unsigned __int8 *)(v15 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80));
        v17 = *(_QWORD *)(v15 + 72);
        v12 = v330;
        do
        {
          v18 = v1[62];
          v19 = v1[58];
          v20 = v1[59];
          sub_100026C34(v16, v19, type metadata accessor for AccessoryAndSceneEntity);
          (*(void (**)(uint64_t, uint64_t, uint64_t))(v14 + 16))(v18, v19 + *(int *)(v323 + 24), v20);
          sub_100026C78(v19, type metadata accessor for AccessoryAndSceneEntity);
          if ((swift_isUniquelyReferenced_nonNull_native(v12) & 1) == 0)
          {
            sub_10002D858(0, v12[2] + 1, 1);
            v12 = v330;
          }
          v22 = v12[2];
          v21 = v12[3];
          if (v22 >= v21 >> 1)
          {
            sub_10002D858(v21 > 1, v22 + 1, 1);
            v12 = v330;
          }
          v1 = v321;
          v23 = v321[62];
          v24 = v321[59];
          v12[2] = v22 + 1;
          (*(void (**)(unint64_t, uint64_t, uint64_t))(v14 + 32))((unint64_t)v12+ ((*(unsigned __int8 *)(v14 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80))+ *(_QWORD *)(v14 + 72) * v22, v23, v24);
          v330 = v12;
          v16 += v17;
          --v11;
        }
        while (v11);
        v5 = v312;
        v6 = log;
        v10 = v295;
      }
      v25 = v1[71];
      v26 = Array.description.getter(v12, v1[59]);
      v28 = v27;
      swift_bridgeObjectRelease(v12);
      v321[22] = sub_100023980(v26, v28, v332);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v317, v321 + 23, v9 + 24, v9 + 32);
      swift_bridgeObjectRelease_n(v25, 2);
      v29 = v28;
      v1 = v321;
      swift_bridgeObjectRelease(v29);
      _os_log_impl((void *)&_mh_execute_header, v5, v6, "%s Starting with %ld entities: %s", (uint8_t *)v9, 0x20u);
      swift_arrayDestroy(v10, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v10, -1, -1);
      swift_slowDealloc(v9, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n(v8, 2);
    }
    v30 = v1[71];
    v283 = *(_QWORD *)(v30 + 16);
    if (!v283)
      break;
    v31 = 0;
    v258 = v1 + 5;
    v266 = v1 + 9;
    v296 = v1[51];
    v307 = v1[48];
    v261 = v1[46];
    loga = (os_log_t)v1[26];
    v279 = v1[52];
    v287 = (*(unsigned __int8 *)(v279 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v279 + 80);
    v276 = v30 + v287;
    v32 = _swiftEmptyArrayStorage;
    v33 = &_swiftEmptyDictionarySingleton;
    v269 = v1[50] + 8;
    v274 = v1[71];
    while (v31 < *(_QWORD *)(v30 + 16))
    {
      v38 = v1[57];
      v39 = v1[50];
      v40 = *(_QWORD *)(v279 + 72);
      v313 = v31;
      sub_100026C34(v276 + v40 * v31, v38, type metadata accessor for AccessoryAndSceneEntity);
      v290 = v38 + *(int *)(v296 + 24);
      sub_100026C34(v290, v39, type metadata accessor for WidgetTileInfo);
      v41 = v307;
      v42 = (uint64_t *)(v39 + *(int *)(v307 + 28));
      v44 = *v42;
      v43 = v42[1];
      if (v43)
        v45 = *v42;
      else
        v45 = 0;
      v318 = v45;
      v46 = 0xE000000000000000;
      if (v43)
        v46 = v43;
      v324 = v46;
      v293 = v33;
      if (loga)
      {
        v47 = v1[47];
        v48 = v1[45];
        v49 = v1[25];
        v50 = (uint64_t *)(v1[50] + *(int *)(v307 + 24));
        v51 = v32;
        v52 = *v50;
        v53 = v50[1];
        swift_bridgeObjectRetain_n(v43, 2);
        swift_bridgeObjectRetain(v53);
        v54 = v53;
        v1 = v321;
        v55 = DeviceDisplayNames.init(name:roomName:)(v52, v54, v44, v43);
        v56 = DeviceDisplayNames.displayName.getter(v55);
        v58 = v57;
        (*(void (**)(uint64_t, uint64_t))(v261 + 8))(v47, v48);
        v321[11] = v56;
        v321[12] = v58;
        v321[9] = v49;
        v321[10] = loga;
        v33 = v293;
        v59 = sub_100005300();
        LOBYTE(v56) = StringProtocol.localizedStandardContains<A>(_:)(v266, &type metadata for String, &type metadata for String, v59, v59);
        v60 = v58;
        v32 = v51;
        v41 = v307;
        swift_bridgeObjectRelease(v60);
        if ((v56 & 1) == 0)
        {
          v61 = v321[25];
          v321[7] = v318;
          v321[8] = v324;
          v321[5] = v61;
          v321[6] = loga;
          if ((StringProtocol.localizedStandardContains<A>(_:)(v258, &type metadata for String, &type metadata for String, v59, v59) & 1) == 0)
          {
            v62 = v321[50];
            sub_100026C78(v321[57], type metadata accessor for AccessoryAndSceneEntity);
            swift_bridgeObjectRelease(v324);
            sub_100026C78(v62, type metadata accessor for WidgetTileInfo);
            goto LABEL_17;
          }
        }
      }
      else
      {
        swift_bridgeObjectRetain(v43);
      }
      if (*(_BYTE *)(v269 + *(int *)(v41 + 56)) != 2)
      {
        v271 = v32;
        if (v33[2])
        {
          swift_bridgeObjectRetain(v324);
          v80 = sub_10001A4C4(v318, v324);
          if ((v81 & 1) != 0)
          {
            v82 = *(_QWORD *)(v33[7] + 8 * v80);
            swift_bridgeObjectRetain(v82);
            swift_bridgeObjectRelease(v324);
            v332[0] = (uint64_t)_swiftEmptyArrayStorage;
            if (v82)
            {
              sub_100057C4C(v82);
              v83 = (_QWORD *)v332[0];
              goto LABEL_52;
            }
LABEL_51:
            v83 = _swiftEmptyArrayStorage;
LABEL_52:
            v84 = v83[2];
            if (v84)
            {
              v85 = (uint64_t)v83 + v287;
              swift_bridgeObjectRetain(v83);
              do
              {
                v86 = v1[57];
                v87 = v1[54];
                sub_100026C34(v85, v87, type metadata accessor for AccessoryAndSceneEntity);
                if ((static UUID.== infix(_:_:)(v87, v86) & 1) != 0
                  && (static UUID.== infix(_:_:)(v1[54] + *(int *)(v296 + 20), v1[57] + *(int *)(v296 + 20)) & 1) != 0
                  && (sub_10001AB38(v1[54] + *(int *)(v296 + 24), v290) & 1) != 0)
                {
                  sub_100026C78(v1[54], type metadata accessor for AccessoryAndSceneEntity);
                  swift_bridgeObjectRelease(v83);
                  goto LABEL_65;
                }
                sub_100026C78(v1[54], type metadata accessor for AccessoryAndSceneEntity);
                v85 += v40;
                --v84;
              }
              while (v84);
              swift_bridgeObjectRelease(v83);
            }
            sub_100026C34(v1[57], v1[53], type metadata accessor for AccessoryAndSceneEntity);
            if ((swift_isUniquelyReferenced_nonNull_native(v83) & 1) == 0)
              v83 = (_QWORD *)sub_10005AC44(0, v83[2] + 1, 1, (unint64_t)v83);
            v89 = v83[2];
            v88 = v83[3];
            if (v89 >= v88 >> 1)
              v83 = (_QWORD *)sub_10005AC44(v88 > 1, v89 + 1, 1, (unint64_t)v83);
            v90 = v1[53];
            v83[2] = v89 + 1;
            sub_100026D98(v90, (uint64_t)v83 + v287 + v89 * v40, type metadata accessor for AccessoryAndSceneEntity);
            v332[0] = (uint64_t)v83;
LABEL_65:
            v33 = v293;
            isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v293);
            v330 = v293;
            v93 = sub_10001A4C4(v318, v324);
            v94 = v293[2];
            v95 = (v92 & 1) == 0;
            v96 = v94 + v95;
            if (__OFADD__(v94, v95))
              goto LABEL_156;
            v97 = v92;
            if (v293[3] >= v96)
            {
              if ((isUniquelyReferenced_nonNull_native & 1) != 0)
              {
                if ((v92 & 1) == 0)
                  goto LABEL_72;
              }
              else
              {
                sub_100079024();
                v33 = v330;
                if ((v97 & 1) == 0)
                  goto LABEL_72;
              }
            }
            else
            {
              sub_100078040(v96, isUniquelyReferenced_nonNull_native);
              v33 = v330;
              v98 = sub_10001A4C4(v318, v324);
              if ((v97 & 1) != (v99 & 1))
                return KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
              v93 = v98;
              if ((v97 & 1) == 0)
              {
LABEL_72:
                v33[(v93 >> 6) + 8] |= 1 << v93;
                v100 = (uint64_t *)(v33[6] + 16 * v93);
                *v100 = v318;
                v100[1] = v324;
                *(_QWORD *)(v33[7] + 8 * v93) = v83;
                v101 = v33[2];
                v102 = __OFADD__(v101, 1);
                v103 = v101 + 1;
                if (v102)
                  goto LABEL_158;
                v33[2] = v103;
                swift_bridgeObjectRetain(v324);
                goto LABEL_16;
              }
            }
            v34 = v33[7];
            swift_bridgeObjectRelease(*(_QWORD *)(v34 + 8 * v93));
            *(_QWORD *)(v34 + 8 * v93) = v83;
LABEL_16:
            v35 = v1[57];
            v36 = v1[50];
            swift_bridgeObjectRelease(v324);
            swift_bridgeObjectRelease(0x8000000000000000);
            sub_100026C78(v35, type metadata accessor for AccessoryAndSceneEntity);
            sub_100026C78(v36, type metadata accessor for WidgetTileInfo);
            v32 = v271;
            goto LABEL_17;
          }
          swift_bridgeObjectRelease(v324);
        }
        v332[0] = (uint64_t)_swiftEmptyArrayStorage;
        goto LABEL_51;
      }
      swift_bridgeObjectRelease(v324);
      isa = v32[2].isa;
      if (!isa)
      {
LABEL_40:
        sub_100026C34(v1[57], v1[55], type metadata accessor for AccessoryAndSceneEntity);
        if ((swift_isUniquelyReferenced_nonNull_native(v32) & 1) == 0)
          v32 = sub_10005AC44(0, (int64_t)v32[2].isa + 1, 1, (unint64_t)v32);
        v30 = v274;
        v37 = v313;
        v76 = (unint64_t)v32[2].isa;
        v75 = (unint64_t)v32[3].isa;
        if (v76 >= v75 >> 1)
          v32 = sub_10005AC44(v75 > 1, v76 + 1, 1, (unint64_t)v32);
        v77 = v1[57];
        v78 = v1[55];
        v79 = v1[50];
        v32[2].isa = (Class)(v76 + 1);
        sub_100026D98(v78, (uint64_t)v32 + v287 + v76 * v40, type metadata accessor for AccessoryAndSceneEntity);
        sub_100026C78(v77, type metadata accessor for AccessoryAndSceneEntity);
        sub_100026C78(v79, type metadata accessor for WidgetTileInfo);
        v33 = v293;
        goto LABEL_18;
      }
      v64 = (uint64_t)v32 + v287;
      swift_bridgeObjectRetain_n(v32, 2);
      while (1)
      {
        v65 = sub_100026C34(v64, v1[56], type metadata accessor for AccessoryAndSceneEntity);
        v66 = UUID.uuidString.getter(v65);
        v68 = v67;
        v69 = UUID.uuidString.getter(v66);
        v71 = v1[56];
        if (v66 == v69 && v68 == v70)
          break;
        v73 = v70;
        v74 = _stringCompareWithSmolCheck(_:_:expecting:)(v66, v68, v69, v70, 0);
        swift_bridgeObjectRelease(v68);
        swift_bridgeObjectRelease(v73);
        sub_100026C78(v71, type metadata accessor for AccessoryAndSceneEntity);
        if ((v74 & 1) != 0)
          goto LABEL_75;
        v64 += v40;
        isa = (Class)((char *)isa - 1);
        if (!isa)
        {
          swift_bridgeObjectRelease_n(v32, 2);
          goto LABEL_40;
        }
      }
      swift_bridgeObjectRelease_n(v68, 2);
      sub_100026C78(v71, type metadata accessor for AccessoryAndSceneEntity);
LABEL_75:
      v104 = v1[57];
      v105 = v1[50];
      swift_bridgeObjectRelease_n(v32, 2);
      sub_100026C78(v104, type metadata accessor for AccessoryAndSceneEntity);
      sub_100026C78(v105, type metadata accessor for WidgetTileInfo);
      v33 = v293;
LABEL_17:
      v30 = v274;
      v37 = v313;
LABEL_18:
      v31 = v37 + 1;
      if (v31 == v283)
      {
        v294 = v33;
        swift_bridgeObjectRelease(v1[71]);
        goto LABEL_80;
      }
    }
    __break(1u);
LABEL_156:
    __break(1u);
LABEL_157:
    __break(1u);
LABEL_158:
    __break(1u);
LABEL_159:
    __break(1u);
LABEL_160:
    __break(1u);
LABEL_161:
    __break(1u);
LABEL_162:
    swift_once(&qword_1000A4F08, sub_100053184);
  }
  swift_bridgeObjectRelease(v30);
  v32 = _swiftEmptyArrayStorage;
  v294 = &_swiftEmptyDictionarySingleton;
LABEL_80:
  v106 = v1[69];
  v107 = v1[51];
  v109 = v1[43];
  v108 = v1[44];
  v111 = v1[37];
  v110 = v1[38];
  v112 = v1[36];
  LocalizedStringResource.init(stringLiteral:)(0x73656E656353, 0xE600000000000000);
  v113 = swift_bridgeObjectRetain(v32);
  v114 = sub_100021E2C(v113);
  v115 = v32;
  v116 = v114;
  v272 = v115;
  swift_bridgeObjectRelease(v115);
  IntentItemSection.init(_:items:)(v112, v116, v107, v106);
  v319 = *(_QWORD *)(v110 + 16);
  ((void (*)(uint64_t, uint64_t, uint64_t))v319)(v109, v108, v111);
  v117 = sub_10005AC58(0, 1, 1, (unint64_t)_swiftEmptyArrayStorage);
  v119 = *(_QWORD *)(v117 + 16);
  v118 = *(_QWORD *)(v117 + 24);
  v120 = v119 + 1;
  if (v119 >= v118 >> 1)
LABEL_164:
    v117 = sub_10005AC58(v118 > 1, v120, 1, v117);
  v121 = v1[43];
  v122 = v1[37];
  v123 = v1[38];
  *(_QWORD *)(v117 + 16) = v120;
  v124 = (*(unsigned __int8 *)(v123 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v123 + 80);
  v125 = *(_QWORD *)(v123 + 72);
  v126 = *(void (**)(unint64_t, uint64_t, uint64_t))(v123 + 32);
  v126(v117 + v124 + v125 * v119, v121, v122);
  v1[19] = v117;
  swift_bridgeObjectRetain_n(v294, 2);
  v127 = sub_100024084((uint64_t)v294);
  swift_bridgeObjectRelease(v294);
  v330 = v127;
  sub_100024340(&v330);
  v314 = v124;
  v267 = v1 + 16;
  swift_bridgeObjectRelease(v294);
  v297 = v330;
  v128 = v330[2];
  v291 = v125;
  if (v128)
  {
    logb = (os_log_t)v1[38];
    v129 = v330 + 6;
    v308 = v126;
    do
    {
      v130 = v1[69];
      v131 = v1[51];
      v133 = v1[41];
      v132 = v1[42];
      v134 = v1[36];
      v325 = v1[37];
      v135 = *(v129 - 2);
      v136 = *(v129 - 1);
      v137 = *v129;
      swift_bridgeObjectRetain(v136);
      swift_bridgeObjectRetain(v137);
      v138 = v136;
      v1 = v321;
      LocalizedStringResource.init(stringLiteral:)(v135, v138);
      v139 = sub_100021E2C(v137);
      swift_bridgeObjectRelease(v137);
      IntentItemSection.init(_:items:)(v134, v139, v131, v130);
      ((void (*)(uint64_t, uint64_t, uint64_t))v319)(v133, v132, v325);
      v140 = v321[19];
      if ((swift_isUniquelyReferenced_nonNull_native(v140) & 1) == 0)
        v140 = sub_10005AC58(0, *(_QWORD *)(v140 + 16) + 1, 1, v140);
      v142 = *(_QWORD *)(v140 + 16);
      v141 = *(_QWORD *)(v140 + 24);
      if (v142 >= v141 >> 1)
        v140 = sub_10005AC58(v141 > 1, v142 + 1, 1, v140);
      v143 = v321[41];
      v144 = v321[42];
      v145 = v321[37];
      *(_QWORD *)(v140 + 16) = v142 + 1;
      v308(v140 + v314 + v142 * v291, v143, v145);
      v321[19] = v140;
      ((void (*)(uint64_t, uint64_t))logb[1].isa)(v144, v145);
      v129 += 3;
      --v128;
    }
    while (v128);
  }
  v146 = v1[33];
  v147 = v1[30];
  v148 = v1[31];
  swift_release(v297);
  v326 = *(void (**)(uint64_t, _QWORD *, uint64_t))(v148 + 16);
  v326(v146, v254, v147);
  v149 = v1[19];
  v150 = swift_bridgeObjectRetain_n(v149, 3);
  v151 = Logger.logObject.getter(v150);
  v152 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v151, v152))
  {
    v298 = v152;
    logc = v151;
    v153 = swift_slowAlloc(32, -1);
    v288 = swift_slowAlloc(64, -1);
    v329 = v288;
    *(_DWORD *)v153 = 136315650;
    v1[13] = sub_100023980(0xD00000000000002ELL, 0x800000010008A5E0, &v329);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 13, v1 + 14, v153 + 4, v153 + 12);
    *(_WORD *)(v153 + 12) = 2048;
    v1[14] = *(_QWORD *)(v149 + 16);
    v284 = v1 + 15;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 14, v1 + 15, v153 + 14, v153 + 22);
    swift_bridgeObjectRelease(v149);
    *(_WORD *)(v153 + 22) = 2080;
    v154 = v1;
    v155 = *(_QWORD *)(v149 + 16);
    v156 = _swiftEmptyArrayStorage;
    if (v155)
    {
      v280 = v154[38];
      v332[0] = (uint64_t)_swiftEmptyArrayStorage;
      swift_bridgeObjectRetain(v149);
      sub_10002D884(0, v155, 0);
      ((void (*)(_QWORD, unint64_t, _QWORD))v319)(v154[40], v149 + v314, v154[37]);
      sub_100022220(&v330);
      v309 = *(void (**)(_QWORD, _QWORD))(v280 + 8);
      v309(v154[40], v154[37]);
      v161 = v330;
      v162 = v331;
      v156 = (_QWORD *)v332[0];
      v163 = swift_isUniquelyReferenced_nonNull_native(v332[0]);
      if ((v163 & 1) == 0)
      {
        sub_10002D884(0, v156[2] + 1, 1);
        v156 = (_QWORD *)v332[0];
      }
      v165 = v156[2];
      v164 = v156[3];
      if (v165 >= v164 >> 1)
      {
        sub_10002D884(v164 > 1, v165 + 1, 1);
        v156 = (_QWORD *)v332[0];
      }
      v156[2] = v165 + 1;
      v166 = &v156[2 * v165];
      v166[4] = v161;
      v166[5] = v162;
      v167 = v155 - 1;
      if (v155 != 1)
      {
        v246 = v149 + v291 + v314;
        do
        {
          ((void (*)(_QWORD, uint64_t, _QWORD))v319)(v321[40], v246, v321[37]);
          sub_100022220(&v330);
          v309(v321[40], v321[37]);
          v248 = v330;
          v247 = v331;
          v156 = (_QWORD *)v332[0];
          if ((swift_isUniquelyReferenced_nonNull_native(v332[0]) & 1) == 0)
          {
            sub_10002D884(0, v156[2] + 1, 1);
            v156 = (_QWORD *)v332[0];
          }
          v250 = v156[2];
          v249 = v156[3];
          if (v250 >= v249 >> 1)
          {
            sub_10002D884(v249 > 1, v250 + 1, 1);
            v156 = (_QWORD *)v332[0];
          }
          v156[2] = v250 + 1;
          v251 = &v156[2 * v250];
          v251[4] = v248;
          v251[5] = v247;
          v246 += v291;
          --v167;
        }
        while (v167);
      }
      swift_bridgeObjectRelease(v149);
    }
    v168 = v321[33];
    v170 = v321[30];
    v169 = v321[31];
    v171 = Array.description.getter(v156, &type metadata for String);
    v173 = v172;
    swift_bridgeObjectRelease(v156);
    v321[15] = sub_100023980(v171, v173, &v329);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v284, v267, v153 + 24, v153 + 32);
    swift_bridgeObjectRelease_n(v149, 2);
    swift_bridgeObjectRelease(v173);
    _os_log_impl((void *)&_mh_execute_header, logc, v298, "%s Returning ItemCollection with allSections (%ld) items = %s", (uint8_t *)v153, 0x20u);
    swift_arrayDestroy(v288, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v288, -1, -1);
    swift_slowDealloc(v153, -1, -1);

    v174 = v170;
    v1 = v321;
    v264 = *(void (**)(uint64_t, uint64_t))(v169 + 8);
    v264(v168, v174);
  }
  else
  {
    v157 = v1[33];
    v158 = v1[30];
    v159 = v1[31];

    swift_bridgeObjectRelease_n(v149, 3);
    v264 = *(void (**)(uint64_t, uint64_t))(v159 + 8);
    v264(v157, v158);
  }
  v175 = v1 + 19;
  swift_beginAccess(v1 + 19, v1 + 2, 0, 0);
  v176 = v1[19];
  v177 = *(_QWORD *)(v176 + 16);
  v178 = _swiftEmptyArrayStorage;
  if (v177)
  {
    v179 = v1[38];
    v330 = _swiftEmptyArrayStorage;
    swift_bridgeObjectRetain(v176);
    sub_10002D8E8(0, v177, 0);
    v180 = v176 + v314;
    v178 = v330;
    do
    {
      v181 = v1[39];
      v182 = v1[37];
      ((void (*)(uint64_t, uint64_t, uint64_t))v319)(v181, v180, v182);
      v183 = IntentItemSection.items.getter(v182);
      v184 = *(_QWORD *)(v183 + 16);
      swift_bridgeObjectRelease(v183);
      (*(void (**)(uint64_t, uint64_t))(v179 + 8))(v181, v182);
      if ((swift_isUniquelyReferenced_nonNull_native(v178) & 1) == 0)
      {
        sub_10002D8E8(0, v178[2] + 1, 1);
        v178 = v330;
      }
      v186 = v178[2];
      v185 = v178[3];
      if (v186 >= v185 >> 1)
      {
        sub_10002D8E8(v185 > 1, v186 + 1, 1);
        v178 = v330;
      }
      v178[2] = v186 + 1;
      v178[v186 + 4] = v184;
      v180 += v291;
      --v177;
      v1 = v321;
    }
    while (v177);
    swift_bridgeObjectRelease(v176);
  }
  v187 = v178[2];
  v188 = 0;
  if (v187)
  {
    v189 = v178 + 4;
    do
    {
      v190 = *v189++;
      v102 = __OFADD__(v188, v190);
      v188 += v190;
      if (v102)
        goto LABEL_157;
    }
    while (--v187);
  }
  v191 = v1[32];
  v192 = v1[30];
  swift_bridgeObjectRelease(v272);
  swift_bridgeObjectRelease(v178);
  v326(v191, v254, v192);
  v193 = v1[19];
  v194 = swift_bridgeObjectRetain_n(v193, 2);
  v195 = Logger.logObject.getter(v194);
  v196 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v195, v196))
  {
    v259 = v196;
    v272 = v195;
    v197 = swift_slowAlloc(32, -1);
    v256 = swift_slowAlloc(64, -1);
    v332[0] = v256;
    *(_DWORD *)v197 = 136315650;
    v1[18] = sub_100023980(0xD00000000000002ELL, 0x800000010008A5E0, v332);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 18, v175, v197 + 4, v197 + 12);
    *(_WORD *)(v197 + 12) = 2048;
    v1[17] = v188;
    v254 = v1 + 17;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 17, v1 + 18, v197 + 14, v197 + 22);
    v262 = (uint8_t *)v197;
    *(_WORD *)(v197 + 22) = 2080;
    v277 = *(_QWORD *)(v193 + 16);
    if (v277)
    {
      v119 = v1[60];
      logd = (os_log_t)v1[51];
      v319 = v1[28];
      v252 = v193;
      swift_bridgeObjectRetain_n(v193, 2);
      v198 = 0;
      v199 = _swiftEmptyArrayStorage;
      v299 = v119;
      while (1)
      {
        v285 = v198;
        v200 = IntentItemSection.items.getter(v1[37]);
        v201 = v200;
        v202 = *(_QWORD *)(v200 + 16);
        if (v202)
        {
          v330 = _swiftEmptyArrayStorage;
          sub_10002D858(0, v202, 0);
          v281 = v201;
          v203 = v201 + ((*(unsigned __int8 *)(v319 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v319 + 80));
          v310 = *(void (**)(uint64_t, unint64_t, uint64_t))(v319 + 16);
          v315 = *(_QWORD *)(v319 + 72);
          v204 = v330;
          do
          {
            v327 = v202;
            v205 = v1[61];
            v206 = v1;
            v207 = v1[59];
            v208 = v206[58];
            v209 = v206[49];
            v210 = v206[29];
            v211 = v206[27];
            v310(v210, v203, v211);
            IntentItem.value.getter(v211);
            sub_100026C34(v208 + SLODWORD(logd[3].isa), v209, type metadata accessor for WidgetTileInfo);
            sub_100026C78(v208, type metadata accessor for AccessoryAndSceneEntity);
            (*(void (**)(uint64_t, uint64_t, uint64_t))(v119 + 16))(v205, v209, v207);
            sub_100026C78(v209, type metadata accessor for WidgetTileInfo);
            (*(void (**)(uint64_t, uint64_t))(v319 + 8))(v210, v211);
            if ((swift_isUniquelyReferenced_nonNull_native(v204) & 1) == 0)
            {
              sub_10002D858(0, v204[2] + 1, 1);
              v204 = v330;
            }
            v213 = v204[2];
            v212 = v204[3];
            v1 = v321;
            v119 = v299;
            if (v213 >= v212 >> 1)
            {
              sub_10002D858(v212 > 1, v213 + 1, 1);
              v204 = v330;
            }
            v214 = v321[61];
            v215 = v321[59];
            v204[2] = v213 + 1;
            (*(void (**)(unint64_t, uint64_t, uint64_t))(v299 + 32))((unint64_t)v204+ ((*(unsigned __int8 *)(v299 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v299 + 80))+ *(_QWORD *)(v299 + 72) * v213, v214, v215);
            v330 = v204;
            v203 += v315;
            v202 = v327 - 1;
          }
          while (v327 != 1);
          swift_bridgeObjectRelease(v281);
        }
        else
        {
          swift_bridgeObjectRelease(v200);
          v204 = _swiftEmptyArrayStorage;
        }
        v117 = v204[2];
        v216 = v199[2];
        v120 = v216 + v117;
        if (__OFADD__(v216, v117))
          goto LABEL_159;
        v217 = swift_isUniquelyReferenced_nonNull_native(v199);
        if ((v217 & 1) == 0 || v120 > v199[3] >> 1)
        {
          if (v216 <= v120)
            v218 = v216 + v117;
          else
            v218 = v216;
          v199 = (_QWORD *)sub_10005AA24(v217, v218, 1, (unint64_t)v199);
        }
        if (v204[2])
        {
          v219 = v199[2];
          if ((v199[3] >> 1) - v219 < v117)
            goto LABEL_161;
          v220 = (*(unsigned __int8 *)(v119 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v119 + 80);
          v221 = *(_QWORD *)(v119 + 72);
          v222 = (char *)v199 + v220 + v221 * v219;
          if ((char *)v204 + v220 < &v222[v221 * v117] && v222 < (char *)v204 + v220 + v221 * v117)
          {
            swift_bridgeObjectRelease(v252);
            return _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
          }
          swift_arrayInitWithCopy(v222);
          if (v117)
          {
            v224 = v199[2];
            v102 = __OFADD__(v224, v117);
            v118 = v224 + v117;
            if (v102)
            {
              __break(1u);
              goto LABEL_164;
            }
            v199[2] = v118;
          }
        }
        else if (v117)
        {
          goto LABEL_160;
        }
        v198 = v285 + 1;
        swift_bridgeObjectRelease(v204);
        if (v285 + 1 == v277)
        {
          v229 = v252;
          swift_bridgeObjectRelease_n(v252, 2);
          goto LABEL_146;
        }
      }
    }
    v199 = _swiftEmptyArrayStorage;
    v229 = v193;
LABEL_146:
    v230 = v1[32];
    v231 = v1[30];
    v232 = Array.description.getter(v199, v1[59]);
    v234 = v233;
    swift_bridgeObjectRelease(v199);
    v1[16] = sub_100023980(v232, v234, v332);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v267, v254, v262 + 24, v262 + 32);
    swift_bridgeObjectRelease_n(v229, 2);
    swift_bridgeObjectRelease(v234);
    _os_log_impl((void *)&_mh_execute_header, v272, v259, "%s Returning %ld entities: %s", v262, 0x20u);
    swift_arrayDestroy(v256, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v256, -1, -1);
    swift_slowDealloc(v262, -1, -1);

    v227 = v230;
    v228 = v231;
  }
  else
  {
    v225 = v1[32];
    v226 = v1[30];

    swift_bridgeObjectRelease_n(v193, 2);
    v227 = v225;
    v228 = v226;
  }
  v264(v227, v228);
  v235 = (void (*)(uint64_t, uint64_t, uint64_t, _QWORD))v1[68];
  v253 = v1[69];
  v255 = v1[67];
  v236 = v1;
  v237 = v1[66];
  v238 = v236[65];
  v240 = v236[63];
  v239 = v236[64];
  v257 = v236[62];
  v260 = v236[61];
  v263 = v236[58];
  v265 = v236[57];
  v268 = v236[56];
  v270 = v236[55];
  v273 = (os_log_t)v236[54];
  v275 = v236[53];
  v241 = v236[51];
  v278 = v236[50];
  v282 = v236[49];
  v242 = v236[44];
  v286 = v236[47];
  v289 = v236[43];
  v292 = v236[42];
  v300 = v236[41];
  loge = (os_log_t)v236[40];
  v243 = v236[38];
  v244 = v236[37];
  v311 = v236[39];
  v316 = v236[36];
  v320 = v236[33];
  v322 = v236[32];
  v328 = v236[29];
  v245 = v236[23];
  v235(v240, 1, 1, v236[34]);
  IntentItemCollection.init(promptLabel:usesIndexedCollation:sections:)(v240, 0, v236[19], v241, v253);
  (*(void (**)(uint64_t, uint64_t))(v243 + 8))(v242, v244);
  (*(void (**)(uint64_t, uint64_t))(v238 + 8))(v255, v239);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v238 + 32))(v245, v237, v239);
  swift_bridgeObjectRelease(v294);
  swift_task_dealloc(v255);
  swift_task_dealloc(v237);
  swift_task_dealloc(v240);
  swift_task_dealloc(v257);
  swift_task_dealloc(v260);
  swift_task_dealloc(v263);
  swift_task_dealloc(v265);
  swift_task_dealloc(v268);
  swift_task_dealloc(v270);
  swift_task_dealloc(v273);
  swift_task_dealloc(v275);
  swift_task_dealloc(v278);
  swift_task_dealloc(v282);
  swift_task_dealloc(v286);
  swift_task_dealloc(v242);
  swift_task_dealloc(v289);
  swift_task_dealloc(v292);
  swift_task_dealloc(v300);
  swift_task_dealloc(loge);
  swift_task_dealloc(v311);
  swift_task_dealloc(v316);
  swift_task_dealloc(v320);
  swift_task_dealloc(v322);
  swift_task_dealloc(v328);
  return ((uint64_t (*)(void))v236[1])();
}

uint64_t sub_100021944(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;

  v2[4] = a1;
  v2[5] = a2;
  v3 = type metadata accessor for HomeEntity(0);
  v2[6] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v3 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_10000527C(&qword_1000A5060);
  v2[7] = v4;
  v5 = (*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[8] = swift_task_alloc(v5);
  v2[9] = swift_task_alloc(v5);
  return swift_task_switch(sub_1000219D4, 0, 0);
}

uint64_t sub_1000219D4()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  _BOOL4 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t KeyPath;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v36;

  if (qword_1000A4F08 != -1)
    swift_once(&qword_1000A4F08, sub_100053184);
  v1 = v0[5];
  v2 = type metadata accessor for Logger(0);
  sub_100014698(v2, (uint64_t)qword_1000A7A80);
  v3 = swift_retain_n(v1, 2);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.default.getter();
  v6 = os_log_type_enabled(v4, v5);
  v7 = v0[5];
  if (v6)
  {
    v8 = swift_slowAlloc(22, -1);
    v9 = swift_slowAlloc(64, -1);
    v36 = v9;
    *(_DWORD *)v8 = 136315394;
    v0[2] = sub_100023980(0xD000000000000013, 0x800000010008A5C0, &v36);
    v10 = UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 2, v0 + 3, v8 + 4, v8 + 12);
    *(_WORD *)(v8 + 12) = 2080;
    v11 = IntentParameterDependency.wrappedValue.getter(v10);
    v12 = v0[9];
    if (v11)
    {
      v13 = v11;
      v14 = v0[6];
      KeyPath = swift_getKeyPath(&unk_100087438);
      v16 = sub_100024008();
      IntentProjection.subscript.getter(KeyPath, v16);
      swift_release(v13);
      swift_release(KeyPath);
      v17 = type metadata accessor for UUID(0);
      v18 = *(_QWORD *)(v17 - 8);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v18 + 16))(v12, v14, v17);
      sub_100026C78(v14, type metadata accessor for HomeEntity);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v18 + 56))(v12, 0, 1, v17);
    }
    else
    {
      v20 = type metadata accessor for UUID(0);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 56))(v12, 1, 1, v20);
    }
    v21 = v0[5];
    v22 = String.init<A>(describing:)(v0[9], v0[7]);
    v24 = v23;
    v0[3] = sub_100023980(v22, v23, &v36);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 3, v0 + 4, v8 + 14, v8 + 22);
    swift_release_n(v21, 2);
    swift_bridgeObjectRelease(v24);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "%s Generating suggested entities for all accessories and scenes in home %s", (uint8_t *)v8, 0x16u);
    swift_arrayDestroy(v9, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v9, -1, -1);
    swift_slowDealloc(v8, -1, -1);

  }
  else
  {

    v19 = swift_release_n(v7, 2);
  }
  v25 = IntentParameterDependency.wrappedValue.getter(v19);
  if (v25)
  {
    v26 = v25;
    v27 = v0[8];
    v28 = v0[6];
    v29 = swift_getKeyPath(&unk_100087438);
    v30 = sub_100024008();
    IntentProjection.subscript.getter(v29, v30);
    swift_release(v26);
    swift_release(v29);
    v31 = type metadata accessor for UUID(0);
    v32 = *(_QWORD *)(v31 - 8);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v32 + 16))(v27, v28, v31);
    sub_100026C78(v28, type metadata accessor for HomeEntity);
    v33 = 0;
  }
  else
  {
    v31 = type metadata accessor for UUID(0);
    v32 = *(_QWORD *)(v31 - 8);
    v33 = 1;
  }
  (*(void (**)(_QWORD, uint64_t, uint64_t, uint64_t))(v32 + 56))(v0[8], v33, 1, v31);
  v34 = (_QWORD *)swift_task_alloc(dword_1000A54AC);
  v0[10] = v34;
  *v34 = v0;
  v34[1] = sub_100021D60;
  return sub_10001FAA4(v0[4], v0[8], 0, 0);
}

uint64_t sub_100021D60()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;

  v1 = *(_QWORD *)(*v0 + 72);
  v2 = *(_QWORD *)(*v0 + 64);
  v3 = *(_QWORD *)(*v0 + 48);
  v5 = *v0;
  swift_task_dealloc(*(_QWORD *)(*v0 + 80));
  sub_100014EFC(v2, &qword_1000A5060);
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  return (*(uint64_t (**)(void))(v5 + 8))();
}

uint64_t sub_100021DE4()
{
  uint64_t v0;
  uint64_t v1;

  v0 = type metadata accessor for AccessoryAndSceneEntity(0);
  v1 = sub_100008C7C(&qword_1000A5388, type metadata accessor for AccessoryAndSceneEntity, (uint64_t)&unk_100087218);
  return static IntentItemSection.Builder.buildBlock()(v0, v1);
}

_QWORD *sub_100021E2C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  int64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  char *v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  int64_t v43;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  char *v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  char *v58;
  int64_t v59;
  _QWORD *v60;

  v2 = sub_10000527C(&qword_1000A5500);
  __chkstk_darwin(v2);
  v58 = (char *)&v45 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_10000527C(&qword_1000A5320);
  __chkstk_darwin(v4);
  v57 = (char *)&v45 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for DeviceDisplayNames(0);
  v55 = *(_QWORD *)(v6 - 8);
  v56 = v6;
  __chkstk_darwin(v6);
  v49 = (char *)&v45 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for LocalizedStringResource(0);
  v53 = *(_QWORD *)(v8 - 8);
  v54 = v8;
  __chkstk_darwin(v8);
  v52 = (char *)&v45 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v51 = type metadata accessor for AccessoryAndSceneEntity(0);
  v10 = *(_QWORD *)(v51 - 8);
  v11 = __chkstk_darwin(v51);
  v50 = (char *)&v45 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v46 = (uint64_t)&v45 - v13;
  v14 = sub_10000527C(&qword_1000A54C8);
  v47 = *(_QWORD *)(v14 - 8);
  v48 = v14;
  __chkstk_darwin(v14);
  v16 = (char *)&v45 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = *(_QWORD *)(a1 + 16);
  v18 = &_swiftEmptyArrayStorage;
  if (v17)
  {
    v60 = &_swiftEmptyArrayStorage;
    sub_10002D8CC(0, v17, 0);
    v19 = a1 + ((*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80));
    v45 = *(_QWORD *)(v10 + 72);
    v21 = (uint64_t)v50;
    v20 = v51;
    do
    {
      v59 = v17;
      v22 = v46;
      sub_100026C34(v19, v46, type metadata accessor for AccessoryAndSceneEntity);
      sub_100026C34(v22, v21, type metadata accessor for AccessoryAndSceneEntity);
      v23 = v22 + *(int *)(v20 + 24);
      v24 = type metadata accessor for WidgetTileInfo(0);
      v25 = (uint64_t *)(v23 + *(int *)(v24 + 24));
      v26 = *v25;
      v27 = v25[1];
      v28 = (uint64_t *)(v23 + *(int *)(v24 + 28));
      v29 = *v28;
      v30 = v28[1];
      swift_bridgeObjectRetain(v30);
      swift_bridgeObjectRetain(v27);
      v31 = v49;
      v32 = DeviceDisplayNames.init(name:roomName:)(v26, v27, v29, v30);
      v33 = DeviceDisplayNames.displayName.getter(v32);
      v35 = v34;
      (*(void (**)(char *, uint64_t))(v55 + 8))(v31, v56);
      v36 = v52;
      LocalizedStringResource.init(stringLiteral:)(v33, v35);
      v37 = v57;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v53 + 56))(v57, 1, 1, v54);
      v38 = type metadata accessor for DisplayRepresentation.Image(0);
      v39 = v58;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v38 - 8) + 56))(v58, 1, 1, v38);
      v40 = sub_100008C7C(&qword_1000A5388, type metadata accessor for AccessoryAndSceneEntity, (uint64_t)&unk_100087218);
      IntentItem.init(_:title:subtitle:image:)(v21, v36, v37, v39, v20, v40);
      sub_100026C78(v22, type metadata accessor for AccessoryAndSceneEntity);
      v18 = v60;
      if ((swift_isUniquelyReferenced_nonNull_native(v60) & 1) == 0)
      {
        sub_10002D8CC(0, v18[2] + 1, 1);
        v18 = v60;
      }
      v42 = v18[2];
      v41 = v18[3];
      v43 = v59;
      if (v42 >= v41 >> 1)
      {
        sub_10002D8CC(v41 > 1, v42 + 1, 1);
        v18 = v60;
      }
      v18[2] = v42 + 1;
      (*(void (**)(unint64_t, char *, uint64_t))(v47 + 32))((unint64_t)v18+ ((*(unsigned __int8 *)(v47 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v47 + 80))+ *(_QWORD *)(v47 + 72) * v42, v16, v48);
      v19 += v45;
      v17 = v43 - 1;
    }
    while (v17);
  }
  return v18;
}

void sub_100022220(_QWORD *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  Swift::String v13;
  void *object;
  Swift::String v15;
  uint64_t v16;
  uint64_t v17;
  Swift::String v18;
  void *v19;
  Swift::String v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;

  v2 = sub_10000527C(&qword_1000A54E0);
  __chkstk_darwin(v2);
  v4 = (char *)&v22 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_10000527C(&qword_1000A5320);
  __chkstk_darwin(v5);
  v7 = (char *)&v22 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = 0;
  v24 = 0xE000000000000000;
  v8 = sub_10000527C(&qword_1000A54D0);
  IntentItemSection.description.getter();
  v9 = type metadata accessor for DisplayRepresentation(0);
  v10 = *(_QWORD *)(v9 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v4, 1, v9) == 1)
  {
    sub_100014EFC((uint64_t)v4, &qword_1000A54E0);
    v11 = type metadata accessor for LocalizedStringResource(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 56))(v7, 1, 1, v11);
  }
  else
  {
    DisplayRepresentation.title.getter();
    (*(void (**)(char *, uint64_t))(v10 + 8))(v4, v9);
    v12 = type metadata accessor for LocalizedStringResource(0);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(v7, 0, 1, v12);
  }
  v13._countAndFlagsBits = String.init<A>(describing:)(v7, v5);
  object = v13._object;
  String.append(_:)(v13);
  swift_bridgeObjectRelease(object);
  v15._countAndFlagsBits = 5972026;
  v15._object = (void *)0xE300000000000000;
  String.append(_:)(v15);
  v16 = IntentItemSection.items.getter(v8);
  v17 = *(_QWORD *)(v16 + 16);
  swift_bridgeObjectRelease(v16);
  v25 = v17;
  v18._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
  v19 = v18._object;
  String.append(_:)(v18);
  swift_bridgeObjectRelease(v19);
  v20._countAndFlagsBits = 0x736D657469205DLL;
  v20._object = (void *)0xE700000000000000;
  String.append(_:)(v20);
  v21 = v24;
  *a1 = v23;
  a1[1] = v21;
}

uint64_t sub_100022438(id *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  id v16;
  uint64_t v17;
  uint64_t (*v18)(uint64_t, uint64_t, uint64_t);
  int v19;
  uint64_t *v20;
  char v21;
  char *v22;
  uint64_t v23;
  void (*v24)(char *, uint64_t);
  uint64_t v26;
  char *v27;

  v4 = type metadata accessor for UUID(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v27 = (char *)&v26 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_10000527C(&qword_1000A5090);
  __chkstk_darwin(v7);
  v9 = (char *)&v26 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_10000527C(&qword_1000A5060);
  v11 = __chkstk_darwin(v10);
  v13 = (char *)&v26 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v15 = (char *)&v26 - v14;
  v16 = objc_msgSend(*a1, "uniqueIdentifier");
  static UUID._unconditionallyBridgeFromObjectiveC(_:)(v16);

  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v5 + 56))(v15, 0, 1, v4);
  v17 = (uint64_t)&v9[*(int *)(v7 + 48)];
  sub_100026CB4((uint64_t)v15, (uint64_t)v9, &qword_1000A5060);
  sub_100026CB4(a2, v17, &qword_1000A5060);
  v18 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 + 48);
  if (v18((uint64_t)v9, 1, v4) == 1)
  {
    sub_100014EFC((uint64_t)v15, &qword_1000A5060);
    v19 = v18(v17, 1, v4);
    if (v19 == 1)
      v20 = &qword_1000A5060;
    else
      v20 = &qword_1000A5090;
    if (v19 == 1)
      v21 = -1;
    else
      v21 = 0;
  }
  else
  {
    sub_100026CB4((uint64_t)v9, (uint64_t)v13, &qword_1000A5060);
    if (v18(v17, 1, v4) == 1)
    {
      sub_100014EFC((uint64_t)v15, &qword_1000A5060);
      (*(void (**)(char *, uint64_t))(v5 + 8))(v13, v4);
      v21 = 0;
      v20 = &qword_1000A5090;
    }
    else
    {
      v22 = v27;
      (*(void (**)(char *, uint64_t, uint64_t))(v5 + 32))(v27, v17, v4);
      v23 = sub_100008C7C((unint64_t *)&unk_1000A7670, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v21 = dispatch thunk of static Equatable.== infix(_:_:)(v13, v22, v4, v23);
      v24 = *(void (**)(char *, uint64_t))(v5 + 8);
      v24(v22, v4);
      v20 = &qword_1000A5060;
      sub_100014EFC((uint64_t)v15, &qword_1000A5060);
      v24(v13, v4);
    }
  }
  sub_100014EFC((uint64_t)v9, v20);
  return v21 & 1;
}

uint64_t sub_1000226F8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v8;
  _QWORD *v9;

  v8 = *v3;
  v9 = (_QWORD *)swift_task_alloc(dword_1000A5534);
  *(_QWORD *)(v4 + 16) = v9;
  *v9 = v4;
  v9[1] = sub_10001CEBC;
  return sub_10001F590(a1, a2, a3, v8);
}

unint64_t sub_10002276C()
{
  unint64_t result;

  result = qword_1000A53B8;
  if (!qword_1000A53B8)
  {
    result = swift_getWitnessTable(&unk_100087350, &type metadata for AccessoryAndSceneQuery);
    atomic_store(result, (unint64_t *)&qword_1000A53B8);
  }
  return result;
}

unint64_t sub_1000227B4()
{
  unint64_t result;

  result = qword_1000A53C0;
  if (!qword_1000A53C0)
  {
    result = swift_getWitnessTable(&unk_1000873B0, &type metadata for AccessoryAndSceneQuery);
    atomic_store(result, (unint64_t *)&qword_1000A53C0);
  }
  return result;
}

uint64_t sub_1000227F8()
{
  return sub_100008C7C(qword_1000A53C8, type metadata accessor for AccessoryAndSceneEntity, (uint64_t)&unk_100087068);
}

uint64_t sub_100022824@<X0>(uint64_t *a1@<X8>)
{
  uint64_t KeyPath;
  uint64_t result;

  sub_10000527C(&qword_1000A5528);
  KeyPath = swift_getKeyPath(&unk_100087460);
  result = IntentParameterDependency.__allocating_init<A, B>(_:)(KeyPath);
  *a1 = result;
  return result;
}

uint64_t sub_100022864(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  _QWORD *v5;

  v4 = *v1;
  v5 = (_QWORD *)swift_task_alloc(dword_1000A5524);
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_1000228B8;
  return sub_10001EA6C(a1, v4);
}

uint64_t sub_1000228B8(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = *(_QWORD *)(*v2 + 16);
  v5 = *v2;
  v6 = swift_task_dealloc(v4);
  if (!v1)
    v6 = a1;
  return (*(uint64_t (**)(uint64_t))(v5 + 8))(v6);
}

uint64_t sub_10002290C(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  _QWORD *v5;

  v4 = *v1;
  v5 = (_QWORD *)swift_task_alloc(dword_1000A54A4);
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_100026DE0;
  return sub_100021944(a1, v4);
}

unint64_t sub_100022968()
{
  unint64_t result;

  result = qword_1000A53E0;
  if (!qword_1000A53E0)
  {
    result = swift_getWitnessTable(&unk_1000873D8, &type metadata for AccessoryAndSceneQuery);
    atomic_store(result, (unint64_t *)&qword_1000A53E0);
  }
  return result;
}

uint64_t sub_1000229AC()
{
  return sub_1000229D8(&qword_1000A53E8, qword_1000A53F0, (uint64_t)&protocol conformance descriptor for IntentItemCollection<A>);
}

uint64_t sub_1000229D8(unint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    v6 = sub_1000052BC(a2);
    result = swift_getWitnessTable(a3, v6);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100022A18(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;
  unint64_t v6;

  v5 = (_QWORD *)swift_task_alloc(async function pointer to EntityQuery.results()[1]);
  *(_QWORD *)(v2 + 16) = v5;
  v6 = sub_10001D998();
  *v5 = v2;
  v5[1] = sub_100026DE0;
  return EntityQuery.results()(a1, a2, v6);
}

uint64_t sub_100022A84(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v7;

  v7 = (_QWORD *)swift_task_alloc(async function pointer to DynamicOptionsProvider.defaultResult()[1]);
  *(_QWORD *)(v3 + 16) = v7;
  *v7 = v3;
  v7[1] = sub_10001CEBC;
  return DynamicOptionsProvider.defaultResult()(a1, a2, a3);
}

ValueMetadata *type metadata accessor for AccessoryAndSceneQuery()
{
  return &type metadata for AccessoryAndSceneQuery;
}

uint64_t *sub_100022B04(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  void (*v8)(uint64_t *, uint64_t *, uint64_t);
  uint64_t v9;
  char *v10;
  char *v11;
  int *v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  void (*v32)(char *, char *, uint64_t);
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  char *v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  char *v43;
  uint64_t v44;
  char *v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t *v51;
  uint64_t v52;
  id v53;
  uint64_t v54;
  char *v56;
  uint64_t *v57;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v54 = *a2;
    *a1 = *a2;
    v51 = (uint64_t *)(v54 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v54);
  }
  else
  {
    v7 = type metadata accessor for UUID(0);
    v8 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16);
    v8(a1, a2, v7);
    v8((uint64_t *)((char *)a1 + *(int *)(a3 + 20)), (uint64_t *)((char *)a2 + *(int *)(a3 + 20)), v7);
    v9 = *(int *)(a3 + 24);
    v10 = (char *)a1 + v9;
    v11 = (char *)a2 + v9;
    v8((uint64_t *)((char *)a1 + v9), (uint64_t *)v11, v7);
    v57 = a1;
    v12 = (int *)type metadata accessor for WidgetTileInfo(0);
    v8((uint64_t *)&v10[v12[5]], (uint64_t *)&v11[v12[5]], v7);
    v13 = v12[6];
    v14 = &v10[v13];
    v15 = &v11[v13];
    v16 = *((_QWORD *)v15 + 1);
    *(_QWORD *)v14 = *(_QWORD *)v15;
    *((_QWORD *)v14 + 1) = v16;
    v17 = v12[7];
    v18 = &v10[v17];
    v19 = &v11[v17];
    v20 = *((_QWORD *)v19 + 1);
    *(_QWORD *)v18 = *(_QWORD *)v19;
    *((_QWORD *)v18 + 1) = v20;
    v21 = v12[8];
    v22 = &v10[v21];
    v23 = &v11[v21];
    v24 = *((_QWORD *)v23 + 1);
    *(_QWORD *)v22 = *(_QWORD *)v23;
    *((_QWORD *)v22 + 1) = v24;
    v25 = v12[9];
    v26 = &v10[v25];
    v27 = &v11[v25];
    v28 = *((_QWORD *)v27 + 1);
    *(_QWORD *)v26 = *(_QWORD *)v27;
    *((_QWORD *)v26 + 1) = v28;
    v29 = v12[10];
    v56 = &v10[v29];
    v30 = &v11[v29];
    v31 = type metadata accessor for StaticRenderingMode(0);
    v32 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v31 - 8) + 16);
    swift_bridgeObjectRetain(v16);
    swift_bridgeObjectRetain(v20);
    swift_bridgeObjectRetain(v24);
    swift_bridgeObjectRetain(v28);
    v32(v56, v30, v31);
    v32(&v10[v12[11]], &v11[v12[11]], v31);
    v33 = v12[12];
    v34 = *(_QWORD *)&v11[v33];
    *(_QWORD *)&v10[v33] = v34;
    v10[v12[13]] = v11[v12[13]];
    v35 = v12[14];
    v36 = &v10[v35];
    v37 = &v11[v35];
    v38 = *(void **)v37;
    LOBYTE(v37) = v37[8];
    *(_QWORD *)v36 = v38;
    v36[8] = (char)v37;
    v39 = v12[15];
    v40 = *(_QWORD *)&v11[v39];
    *(_QWORD *)&v10[v39] = v40;
    v10[v12[16]] = v11[v12[16]];
    v10[v12[17]] = v11[v12[17]];
    v41 = v12[18];
    v42 = &v10[v41];
    v43 = &v11[v41];
    *(_QWORD *)v42 = *(_QWORD *)v43;
    v42[8] = v43[8];
    v44 = v12[19];
    v45 = &v10[v44];
    v46 = &v11[v44];
    v47 = *((_QWORD *)v46 + 1);
    *(_QWORD *)v45 = *(_QWORD *)v46;
    *((_QWORD *)v45 + 1) = v47;
    v10[v12[20]] = v11[v12[20]];
    v48 = v12[21];
    v49 = *(_QWORD *)&v11[v48];
    *(_QWORD *)&v10[v48] = v49;
    v50 = v12[22];
    v51 = v57;
    v52 = *(_QWORD *)&v11[v50];
    *(_QWORD *)&v10[v50] = v52;
    swift_retain(v34);
    v53 = v38;
    swift_bridgeObjectRetain(v40);
    swift_bridgeObjectRetain(v47);
    swift_bridgeObjectRetain(v49);
    swift_bridgeObjectRetain(v52);
  }
  return v51;
}

uint64_t sub_100022D88(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  void (*v5)(uint64_t, uint64_t);
  uint64_t v6;
  int *v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t);

  v4 = type metadata accessor for UUID(0);
  v5 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8);
  v5(a1, v4);
  v5(a1 + *(int *)(a2 + 20), v4);
  v6 = a1 + *(int *)(a2 + 24);
  v5(v6, v4);
  v7 = (int *)type metadata accessor for WidgetTileInfo(0);
  v5(v6 + v7[5], v4);
  swift_bridgeObjectRelease(*(_QWORD *)(v6 + v7[6] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v6 + v7[7] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v6 + v7[8] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v6 + v7[9] + 8));
  v8 = v6 + v7[10];
  v9 = type metadata accessor for StaticRenderingMode(0);
  v10 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 8);
  v10(v8, v9);
  v10(v6 + v7[11], v9);
  swift_release(*(_QWORD *)(v6 + v7[12]));

  swift_bridgeObjectRelease(*(_QWORD *)(v6 + v7[15]));
  swift_bridgeObjectRelease(*(_QWORD *)(v6 + v7[19] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v6 + v7[21]));
  return swift_bridgeObjectRelease(*(_QWORD *)(v6 + v7[22]));
}

uint64_t sub_100022ED8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int *v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void (*v31)(uint64_t, uint64_t, uint64_t);
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  _QWORD *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  id v51;
  uint64_t v53;

  v6 = type metadata accessor for UUID(0);
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16);
  v7(a1, a2, v6);
  v7(a1 + *(int *)(a3 + 20), a2 + *(int *)(a3 + 20), v6);
  v8 = *(int *)(a3 + 24);
  v9 = a1 + v8;
  v10 = a2 + v8;
  v7(a1 + v8, v10, v6);
  v11 = (int *)type metadata accessor for WidgetTileInfo(0);
  v7(v9 + v11[5], v10 + v11[5], v6);
  v12 = v11[6];
  v13 = (_QWORD *)(v9 + v12);
  v14 = (_QWORD *)(v10 + v12);
  v15 = v14[1];
  *v13 = *v14;
  v13[1] = v15;
  v16 = v11[7];
  v17 = (_QWORD *)(v9 + v16);
  v18 = (_QWORD *)(v10 + v16);
  v19 = v18[1];
  *v17 = *v18;
  v17[1] = v19;
  v20 = v11[8];
  v21 = (_QWORD *)(v9 + v20);
  v22 = (_QWORD *)(v10 + v20);
  v23 = v22[1];
  *v21 = *v22;
  v21[1] = v23;
  v24 = v11[9];
  v25 = (_QWORD *)(v9 + v24);
  v26 = (_QWORD *)(v10 + v24);
  v27 = v26[1];
  *v25 = *v26;
  v25[1] = v27;
  v28 = v11[10];
  v53 = v9 + v28;
  v29 = v10 + v28;
  v30 = type metadata accessor for StaticRenderingMode(0);
  v31 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v30 - 8) + 16);
  swift_bridgeObjectRetain(v15);
  swift_bridgeObjectRetain(v19);
  swift_bridgeObjectRetain(v23);
  swift_bridgeObjectRetain(v27);
  v31(v53, v29, v30);
  v31(v9 + v11[11], v10 + v11[11], v30);
  v32 = v11[12];
  v33 = *(_QWORD *)(v10 + v32);
  *(_QWORD *)(v9 + v32) = v33;
  *(_BYTE *)(v9 + v11[13]) = *(_BYTE *)(v10 + v11[13]);
  v34 = v11[14];
  v35 = v9 + v34;
  v36 = v10 + v34;
  v37 = *(void **)v36;
  LOBYTE(v36) = *(_BYTE *)(v36 + 8);
  *(_QWORD *)v35 = v37;
  *(_BYTE *)(v35 + 8) = v36;
  v38 = v11[15];
  v39 = *(_QWORD *)(v10 + v38);
  *(_QWORD *)(v9 + v38) = v39;
  *(_BYTE *)(v9 + v11[16]) = *(_BYTE *)(v10 + v11[16]);
  *(_BYTE *)(v9 + v11[17]) = *(_BYTE *)(v10 + v11[17]);
  v40 = v11[18];
  v41 = v9 + v40;
  v42 = v10 + v40;
  *(_QWORD *)v41 = *(_QWORD *)v42;
  *(_BYTE *)(v41 + 8) = *(_BYTE *)(v42 + 8);
  v43 = v11[19];
  v44 = (_QWORD *)(v9 + v43);
  v45 = (_QWORD *)(v10 + v43);
  v46 = v45[1];
  *v44 = *v45;
  v44[1] = v46;
  *(_BYTE *)(v9 + v11[20]) = *(_BYTE *)(v10 + v11[20]);
  v47 = v11[21];
  v48 = *(_QWORD *)(v10 + v47);
  *(_QWORD *)(v9 + v47) = v48;
  v49 = v11[22];
  v50 = *(_QWORD *)(v10 + v49);
  *(_QWORD *)(v9 + v49) = v50;
  swift_retain(v33);
  v51 = v37;
  swift_bridgeObjectRetain(v39);
  swift_bridgeObjectRetain(v46);
  swift_bridgeObjectRetain(v48);
  swift_bridgeObjectRetain(v50);
  return a1;
}

uint64_t sub_10002312C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int *v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void (*v36)(uint64_t, uint64_t, uint64_t);
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  void *v43;
  void *v44;
  id v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t *v51;
  uint64_t v52;
  uint64_t v53;
  _QWORD *v54;
  _QWORD *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;

  v6 = type metadata accessor for UUID(0);
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24);
  v7(a1, a2, v6);
  v7(a1 + *(int *)(a3 + 20), a2 + *(int *)(a3 + 20), v6);
  v8 = *(int *)(a3 + 24);
  v9 = a1 + v8;
  v10 = a2 + v8;
  v7(a1 + v8, v10, v6);
  v11 = (int *)type metadata accessor for WidgetTileInfo(0);
  v7(v9 + v11[5], v10 + v11[5], v6);
  v12 = v11[6];
  v13 = (_QWORD *)(v9 + v12);
  v14 = (_QWORD *)(v10 + v12);
  *v13 = *v14;
  v15 = v14[1];
  v16 = v13[1];
  v13[1] = v15;
  swift_bridgeObjectRetain(v15);
  swift_bridgeObjectRelease(v16);
  v17 = v11[7];
  v18 = (_QWORD *)(v9 + v17);
  v19 = (_QWORD *)(v10 + v17);
  *v18 = *v19;
  v20 = v19[1];
  v21 = v18[1];
  v18[1] = v20;
  swift_bridgeObjectRetain(v20);
  swift_bridgeObjectRelease(v21);
  v22 = v11[8];
  v23 = (_QWORD *)(v9 + v22);
  v24 = (_QWORD *)(v10 + v22);
  *v23 = *v24;
  v25 = v24[1];
  v26 = v23[1];
  v23[1] = v25;
  swift_bridgeObjectRetain(v25);
  swift_bridgeObjectRelease(v26);
  v27 = v11[9];
  v28 = (_QWORD *)(v9 + v27);
  v29 = (_QWORD *)(v10 + v27);
  *v28 = *v29;
  v30 = v29[1];
  v31 = v28[1];
  v28[1] = v30;
  swift_bridgeObjectRetain(v30);
  swift_bridgeObjectRelease(v31);
  v32 = v11[10];
  v33 = v9 + v32;
  v34 = v10 + v32;
  v35 = type metadata accessor for StaticRenderingMode(0);
  v36 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v35 - 8) + 24);
  v36(v33, v34, v35);
  v36(v9 + v11[11], v10 + v11[11], v35);
  v37 = v11[12];
  v38 = *(_QWORD *)(v10 + v37);
  v39 = *(_QWORD *)(v9 + v37);
  *(_QWORD *)(v9 + v37) = v38;
  swift_retain(v38);
  swift_release(v39);
  *(_BYTE *)(v9 + v11[13]) = *(_BYTE *)(v10 + v11[13]);
  v40 = v11[14];
  v41 = v9 + v40;
  v42 = v10 + v40;
  v43 = *(void **)v42;
  LOBYTE(v42) = *(_BYTE *)(v42 + 8);
  v44 = *(void **)v41;
  *(_QWORD *)v41 = v43;
  *(_BYTE *)(v41 + 8) = v42;
  v45 = v43;

  v46 = v11[15];
  v47 = *(_QWORD *)(v10 + v46);
  v48 = *(_QWORD *)(v9 + v46);
  *(_QWORD *)(v9 + v46) = v47;
  swift_bridgeObjectRetain(v47);
  swift_bridgeObjectRelease(v48);
  *(_BYTE *)(v9 + v11[16]) = *(_BYTE *)(v10 + v11[16]);
  *(_BYTE *)(v9 + v11[17]) = *(_BYTE *)(v10 + v11[17]);
  v49 = v11[18];
  v50 = v9 + v49;
  v51 = (uint64_t *)(v10 + v49);
  v52 = *v51;
  *(_BYTE *)(v50 + 8) = *((_BYTE *)v51 + 8);
  *(_QWORD *)v50 = v52;
  v53 = v11[19];
  v54 = (_QWORD *)(v9 + v53);
  v55 = (_QWORD *)(v10 + v53);
  *v54 = *v55;
  v56 = v55[1];
  v57 = v54[1];
  v54[1] = v56;
  swift_bridgeObjectRetain(v56);
  swift_bridgeObjectRelease(v57);
  *(_BYTE *)(v9 + v11[20]) = *(_BYTE *)(v10 + v11[20]);
  v58 = v11[21];
  v59 = *(_QWORD *)(v10 + v58);
  v60 = *(_QWORD *)(v9 + v58);
  *(_QWORD *)(v9 + v58) = v59;
  swift_bridgeObjectRetain(v59);
  swift_bridgeObjectRelease(v60);
  v61 = v11[22];
  v62 = *(_QWORD *)(v10 + v61);
  v63 = *(_QWORD *)(v9 + v61);
  *(_QWORD *)(v9 + v61) = v62;
  swift_bridgeObjectRetain(v62);
  swift_bridgeObjectRelease(v63);
  return a1;
}

uint64_t sub_1000233E4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(uint64_t, uint64_t, uint64_t);
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v6 = type metadata accessor for UUID(0);
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32);
  v7(a1, a2, v6);
  v7(a1 + *(int *)(a3 + 20), a2 + *(int *)(a3 + 20), v6);
  v8 = *(int *)(a3 + 24);
  v9 = a1 + v8;
  v10 = a2 + v8;
  v7(a1 + v8, v10, v6);
  v11 = (int *)type metadata accessor for WidgetTileInfo(0);
  v7(v9 + v11[5], v10 + v11[5], v6);
  *(_OWORD *)(v9 + v11[6]) = *(_OWORD *)(v10 + v11[6]);
  *(_OWORD *)(v9 + v11[7]) = *(_OWORD *)(v10 + v11[7]);
  *(_OWORD *)(v9 + v11[8]) = *(_OWORD *)(v10 + v11[8]);
  *(_OWORD *)(v9 + v11[9]) = *(_OWORD *)(v10 + v11[9]);
  v12 = v11[10];
  v13 = v9 + v12;
  v14 = v10 + v12;
  v15 = type metadata accessor for StaticRenderingMode(0);
  v16 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 32);
  v16(v13, v14, v15);
  v16(v9 + v11[11], v10 + v11[11], v15);
  *(_QWORD *)(v9 + v11[12]) = *(_QWORD *)(v10 + v11[12]);
  *(_BYTE *)(v9 + v11[13]) = *(_BYTE *)(v10 + v11[13]);
  v17 = v11[14];
  v18 = v9 + v17;
  v19 = v10 + v17;
  *(_QWORD *)v18 = *(_QWORD *)v19;
  *(_BYTE *)(v18 + 8) = *(_BYTE *)(v19 + 8);
  *(_QWORD *)(v9 + v11[15]) = *(_QWORD *)(v10 + v11[15]);
  *(_BYTE *)(v9 + v11[16]) = *(_BYTE *)(v10 + v11[16]);
  *(_BYTE *)(v9 + v11[17]) = *(_BYTE *)(v10 + v11[17]);
  v20 = v11[18];
  v21 = v9 + v20;
  v22 = v10 + v20;
  *(_QWORD *)v21 = *(_QWORD *)v22;
  *(_BYTE *)(v21 + 8) = *(_BYTE *)(v22 + 8);
  *(_OWORD *)(v9 + v11[19]) = *(_OWORD *)(v10 + v11[19]);
  *(_BYTE *)(v9 + v11[20]) = *(_BYTE *)(v10 + v11[20]);
  *(_QWORD *)(v9 + v11[21]) = *(_QWORD *)(v10 + v11[21]);
  *(_QWORD *)(v9 + v11[22]) = *(_QWORD *)(v10 + v11[22]);
  return a1;
}

uint64_t sub_1000235B0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int *v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  void (*v40)(uint64_t, uint64_t, uint64_t);
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t *v45;
  uint64_t v46;
  void *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  _QWORD *v54;
  uint64_t *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;

  v6 = type metadata accessor for UUID(0);
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40);
  v7(a1, a2, v6);
  v7(a1 + *(int *)(a3 + 20), a2 + *(int *)(a3 + 20), v6);
  v8 = *(int *)(a3 + 24);
  v9 = a1 + v8;
  v10 = a2 + v8;
  v7(a1 + v8, v10, v6);
  v11 = (int *)type metadata accessor for WidgetTileInfo(0);
  v7(v9 + v11[5], v10 + v11[5], v6);
  v12 = v11[6];
  v13 = (_QWORD *)(v9 + v12);
  v14 = (uint64_t *)(v10 + v12);
  v16 = *v14;
  v15 = v14[1];
  v17 = v13[1];
  *v13 = v16;
  v13[1] = v15;
  swift_bridgeObjectRelease(v17);
  v18 = v11[7];
  v19 = (_QWORD *)(v9 + v18);
  v20 = (uint64_t *)(v10 + v18);
  v22 = *v20;
  v21 = v20[1];
  v23 = v19[1];
  *v19 = v22;
  v19[1] = v21;
  swift_bridgeObjectRelease(v23);
  v24 = v11[8];
  v25 = (_QWORD *)(v9 + v24);
  v26 = (uint64_t *)(v10 + v24);
  v28 = *v26;
  v27 = v26[1];
  v29 = v25[1];
  *v25 = v28;
  v25[1] = v27;
  swift_bridgeObjectRelease(v29);
  v30 = v11[9];
  v31 = (_QWORD *)(v9 + v30);
  v32 = (uint64_t *)(v10 + v30);
  v34 = *v32;
  v33 = v32[1];
  v35 = v31[1];
  *v31 = v34;
  v31[1] = v33;
  swift_bridgeObjectRelease(v35);
  v36 = v11[10];
  v37 = v9 + v36;
  v38 = v10 + v36;
  v39 = type metadata accessor for StaticRenderingMode(0);
  v40 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v39 - 8) + 40);
  v40(v37, v38, v39);
  v40(v9 + v11[11], v10 + v11[11], v39);
  v41 = v11[12];
  v42 = *(_QWORD *)(v9 + v41);
  *(_QWORD *)(v9 + v41) = *(_QWORD *)(v10 + v41);
  swift_release(v42);
  *(_BYTE *)(v9 + v11[13]) = *(_BYTE *)(v10 + v11[13]);
  v43 = v11[14];
  v44 = v9 + v43;
  v45 = (uint64_t *)(v10 + v43);
  v46 = *v45;
  LOBYTE(v45) = *((_BYTE *)v45 + 8);
  v47 = *(void **)v44;
  *(_QWORD *)v44 = v46;
  *(_BYTE *)(v44 + 8) = (_BYTE)v45;

  v48 = v11[15];
  v49 = *(_QWORD *)(v9 + v48);
  *(_QWORD *)(v9 + v48) = *(_QWORD *)(v10 + v48);
  swift_bridgeObjectRelease(v49);
  *(_BYTE *)(v9 + v11[16]) = *(_BYTE *)(v10 + v11[16]);
  *(_BYTE *)(v9 + v11[17]) = *(_BYTE *)(v10 + v11[17]);
  v50 = v11[18];
  v51 = v9 + v50;
  v52 = v10 + v50;
  *(_BYTE *)(v51 + 8) = *(_BYTE *)(v52 + 8);
  *(_QWORD *)v51 = *(_QWORD *)v52;
  v53 = v11[19];
  v54 = (_QWORD *)(v9 + v53);
  v55 = (uint64_t *)(v10 + v53);
  v57 = *v55;
  v56 = v55[1];
  v58 = v54[1];
  *v54 = v57;
  v54[1] = v56;
  swift_bridgeObjectRelease(v58);
  *(_BYTE *)(v9 + v11[20]) = *(_BYTE *)(v10 + v11[20]);
  v59 = v11[21];
  v60 = *(_QWORD *)(v9 + v59);
  *(_QWORD *)(v9 + v59) = *(_QWORD *)(v10 + v59);
  swift_bridgeObjectRelease(v60);
  v61 = v11[22];
  v62 = *(_QWORD *)(v9 + v61);
  *(_QWORD *)(v9 + v61) = *(_QWORD *)(v10 + v61);
  swift_bridgeObjectRelease(v62);
  return a1;
}

uint64_t sub_1000237F4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100023800);
}

uint64_t sub_100023800(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;

  v6 = type metadata accessor for UUID(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
  }
  else
  {
    v8 = type metadata accessor for WidgetTileInfo(0);
    v10 = a1 + *(int *)(a3 + 24);
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48);
  }
  return v9(v10, a2, v8);
}

uint64_t sub_100023874(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100023880);
}

uint64_t sub_100023880(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;

  v8 = type metadata accessor for UUID(0);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    v10 = type metadata accessor for WidgetTileInfo(0);
    v12 = a1 + *(int *)(a4 + 24);
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56);
  }
  return v11(v12, a2, a2, v10);
}

uint64_t sub_1000238FC(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  unint64_t v4;
  _QWORD v5[3];

  result = type metadata accessor for UUID(319);
  if (v3 <= 0x3F)
  {
    v5[0] = *(_QWORD *)(result - 8) + 64;
    v5[1] = v5[0];
    result = type metadata accessor for WidgetTileInfo(319);
    if (v4 <= 0x3F)
    {
      v5[2] = *(_QWORD *)(result - 8) + 64;
      swift_initStructMetadata(a1, 256, 3, v5, a1 + 16);
      return 0;
    }
  }
  return result;
}

uint64_t sub_100023980(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12[3];
  void *ObjectType;

  v6 = sub_100023A50(v12, 0, 0, 1, a1, a2);
  v7 = v12[0];
  if (v6)
  {
    v8 = v6;
    ObjectType = (void *)swift_getObjectType();
    v12[0] = v8;
    v9 = *a3;
    if (*a3)
    {
      sub_100008FA8((uint64_t)v12, *a3);
      *a3 = v9 + 32;
    }
  }
  else
  {
    ObjectType = &type metadata for _StringGuts;
    v12[0] = a1;
    v12[1] = a2;
    v10 = *a3;
    if (*a3)
    {
      sub_100008FA8((uint64_t)v12, *a3);
      *a3 = v10 + 32;
    }
    swift_bridgeObjectRetain(a2);
  }
  sub_100023FC0(v12);
  return v7;
}

uint64_t sub_100023A50(uint64_t *a1, char *__dst, uint64_t a3, char a4, uint64_t a5, unint64_t a6)
{
  uint64_t v8;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  int v14;
  _QWORD __src[2];

  if ((a6 & 0x2000000000000000) != 0)
  {
    if ((a4 & 1) == 0)
    {
      if (__dst)
      {
        v12 = HIBYTE(a6) & 0xF;
        if (a3 - (uint64_t)__dst > v12)
        {
          __src[0] = a5;
          __src[1] = a6 & 0xFFFFFFFFFFFFFFLL;
          if (__src >= (_QWORD *)&__dst[v12] || (char *)__src + v12 <= __dst)
          {
            memcpy(__dst, __src, HIBYTE(a6) & 0xF);
            UnsafeMutableRawBufferPointer.subscript.setter(0, HIBYTE(a6) & 0xF, __dst, a3);
            result = 0;
            *a1 = (uint64_t)__dst;
            return result;
          }
          goto LABEL_17;
        }
      }
    }
LABEL_13:
    result = sub_100023C08(a5, a6);
    *a1 = v13;
    return result;
  }
  if ((a6 & 0x1000000000000000) != 0)
    goto LABEL_13;
  if ((a5 & 0x1000000000000000) != 0)
  {
    v8 = (a6 & 0xFFFFFFFFFFFFFFFLL) + 32;
    goto LABEL_5;
  }
  v8 = _StringObject.sharedUTF8.getter(a5, a6);
  if (!v8)
  {
    _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Unexpectedly found nil while unwrapping an Optional value", 57, 2, "Swift/StringTesting.swift", 25, 2, 151, 0);
    __break(1u);
LABEL_17:
    LOBYTE(v14) = 2;
    result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutableRawPointer.initializeMemory overlapping range", 58, 2, "Swift/UnsafeRawPointer.swift", 28, v14, 1173, 0);
    __break(1u);
    return result;
  }
LABEL_5:
  *a1 = v8;
  if ((a6 & 0x8000000000000000) != 0)
    return 0;
  else
    return swift_unknownObjectRetain(a6 & 0xFFFFFFFFFFFFFFFLL);
}

uint64_t sub_100023C08(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;

  v2 = (uint64_t)sub_100023C9C(a1, a2);
  if ((swift_isUniquelyReferenced_nonNull_native(v2) & 1) == 0)
    v2 = sub_100023E74(0, *(_QWORD *)(v2 + 16) + 1, 1, (char *)v2);
  v4 = *(_QWORD *)(v2 + 16);
  v3 = *(_QWORD *)(v2 + 24);
  if (v4 >= v3 >> 1)
    v2 = sub_100023E74(v3 > 1, v4 + 1, 1, (char *)v2);
  *(_QWORD *)(v2 + 16) = v4 + 1;
  *(_BYTE *)(v2 + 32 + v4) = 0;
  return v2;
}

_QWORD *sub_100023C9C(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  char v8;
  _QWORD *result;
  int v10;

  if ((a2 & 0x1000000000000000) != 0)
    goto LABEL_10;
  if ((a2 & 0x2000000000000000) != 0)
    v4 = HIBYTE(a2) & 0xF;
  else
    v4 = a1 & 0xFFFFFFFFFFFFLL;
  if (v4)
  {
    while (1)
    {
      v5 = sub_100023E10(v4, 0);
      if (v4 < 0)
        break;
      v6 = v5;
      v7 = _StringGuts.copyUTF8(into:)(v5 + 4, v4, a1, a2);
      if ((v8 & 1) != 0)
        goto LABEL_14;
      if (v7 == v4)
        return v6;
      LOBYTE(v10) = 2;
      _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "invalid Collection: less than 'count' elements in collection", 60, 2, "Swift/ContiguousArrayBuffer.swift", 33, v10, 1122, 0);
      __break(1u);
LABEL_10:
      v4 = String.UTF8View._foreignCount()();
      if (!v4)
        return &_swiftEmptyArrayStorage;
    }
    LOBYTE(v10) = 2;
    _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutableBufferPointer with negative count", 46, 2, "Swift/UnsafeBufferPointer.swift", 31, v10, 71, 0);
    __break(1u);
LABEL_14:
    LOBYTE(v10) = 2;
    result = (_QWORD *)_assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Insufficient space allocated to copy string contents", 52, 2, "Swift/StringUTF8View.swift", 26, v10, 430, 0);
    __break(1u);
  }
  else
  {
    return &_swiftEmptyArrayStorage;
  }
  return result;
}

_QWORD *sub_100023E10(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  _QWORD *v5;
  size_t v6;

  if (a2 <= a1)
    v2 = a1;
  else
    v2 = a2;
  if (!v2)
    return &_swiftEmptyArrayStorage;
  v4 = sub_10000527C(&qword_1000A7680);
  v5 = (_QWORD *)swift_allocObject(v4, v2 + 32, 7);
  v6 = j__malloc_size(v5);
  v5[2] = a1;
  v5[3] = 2 * v6 - 64;
  return v5;
}

uint64_t sub_100023E74(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  int64_t v8;
  int64_t v9;
  uint64_t v10;
  char *v11;
  size_t v12;
  char *v13;
  char *v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_10000527C(&qword_1000A7680);
    v11 = (char *)swift_allocObject(v10, v9 + 32, 7);
    v12 = j__malloc_size(v11);
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * v12 - 64;
  }
  else
  {
    v11 = (char *)&_swiftEmptyArrayStorage;
  }
  v13 = v11 + 32;
  v14 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v13 >= &v14[v8])
      memmove(v13, v14, v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v14 >= &v13[v8] || v13 >= &v14[v8])
  {
    memcpy(v13, v14, v8);
LABEL_28:
    swift_bridgeObjectRelease(a4);
    return (uint64_t)v11;
  }
LABEL_30:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_100023FC0(_QWORD *a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1[3] - 8);
  if ((*(_BYTE *)(v1 + 82) & 2) != 0)
    return swift_release(*a1);
  else
    return (*(uint64_t (**)(void))(v1 + 8))();
}

uint64_t sub_100023FE4()
{
  return IntentParameter.wrappedValue.getter();
}

unint64_t sub_100024008()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000A54B0;
  if (!qword_1000A54B0)
  {
    v1 = sub_1000052BC(&qword_1000A54B8);
    sub_100008C7C(&qword_1000A54C0, type metadata accessor for HomeEntity, (uint64_t)&unk_1000878B0);
    result = swift_getWitnessTable(&protocol conformance descriptor for <A> A?, v1);
    atomic_store(result, (unint64_t *)&qword_1000A54B0);
  }
  return result;
}

_QWORD *sub_100024084(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  _QWORD *v4;
  size_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return &_swiftEmptyArrayStorage;
  v3 = sub_10000527C(&qword_1000A54E8);
  v4 = (_QWORD *)swift_allocObject(v3, 24 * v1 + 32, 7);
  v5 = j__malloc_size(v4);
  v4[2] = v1;
  v4[3] = 2 * ((uint64_t)(v5 - 32) / 24);
  v6 = sub_100025158((uint64_t)&v9, v4 + 4, v1, a1);
  v7 = v9;
  swift_bridgeObjectRetain(a1);
  sub_100014DC4(v7);
  if (v6 != v1)
  {
    __break(1u);
    return &_swiftEmptyArrayStorage;
  }
  return v4;
}

_QWORD *sub_100024178(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  size_t v14;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  char *v21;
  unint64_t v22;
  _QWORD *result;

  v4 = a4 >> 1;
  v5 = (a4 >> 1) - a3;
  if (__OFSUB__(a4 >> 1, a3))
    goto LABEL_21;
  if (!v5)
    return _swiftEmptyArrayStorage;
  if (v5 > 0)
  {
    v8 = sub_10000527C(&qword_1000A5538);
    v9 = *(_QWORD *)(type metadata accessor for AccessoryAndSceneEntity(0) - 8);
    v10 = *(_QWORD *)(v9 + 72);
    v11 = *(unsigned __int8 *)(v9 + 80);
    v12 = (v11 + 32) & ~v11;
    v13 = (_QWORD *)swift_allocObject(v8, v12 + v10 * v5, v11 | 7);
    v14 = j__malloc_size(v13);
    if (!v10)
    {
LABEL_22:
      __break(1u);
LABEL_23:
      __break(1u);
      goto LABEL_24;
    }
    if (v14 - v12 == 0x8000000000000000 && v10 == -1)
      goto LABEL_23;
    v13[2] = v5;
    v13[3] = 2 * ((uint64_t)(v14 - v12) / v10);
    if (v4 != a3)
      goto LABEL_10;
    goto LABEL_20;
  }
  v13 = _swiftEmptyArrayStorage;
  if (v4 == a3)
  {
LABEL_20:
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
LABEL_10:
  if (v5 < 0)
  {
LABEL_24:
    result = (_QWORD *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
    goto LABEL_25;
  }
  v16 = *(_QWORD *)(type metadata accessor for AccessoryAndSceneEntity(0) - 8);
  v17 = (char *)v13 + ((*(unsigned __int8 *)(v16 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80));
  v18 = *(_QWORD *)(v16 + 72);
  v19 = a2 + v18 * a3;
  v20 = v18 * v5;
  v21 = &v17[v20];
  v22 = v19 + v20;
  if (v19 >= (unint64_t)v21 || (unint64_t)v17 >= v22)
  {
    swift_arrayInitWithCopy(v17);
    return v13;
  }
  result = (_QWORD *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_25:
  __break(1u);
  return result;
}

Swift::Int sub_100024340(_QWORD *a1)
{
  _QWORD *v2;
  uint64_t v3;
  Swift::Int result;
  uint64_t v5[2];

  v2 = (_QWORD *)*a1;
  if ((swift_isUniquelyReferenced_nonNull_native(*a1) & 1) == 0)
    v2 = (_QWORD *)sub_100025370(v2);
  v3 = v2[2];
  v5[0] = (uint64_t)(v2 + 4);
  v5[1] = v3;
  result = sub_1000243A8(v5);
  *a1 = v2;
  return result;
}

Swift::Int sub_1000243A8(uint64_t *a1)
{
  uint64_t v1;
  Swift::Int v3;
  Swift::Int result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  Swift::Int v10;
  uint64_t v11;
  char *v12;
  unint64_t v13;
  Swift::Int v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  int v21;
  Swift::Int v22;
  uint64_t *v23;
  Swift::Int v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v30;
  uint64_t v31;
  Swift::Int v32;
  Swift::Int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  __int128 v37;
  __int128 v38;
  Swift::Int v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  Swift::Int v44;
  uint64_t v45;
  uint64_t v46;
  BOOL v47;
  __int128 v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  char *v52;
  char *v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  BOOL v65;
  unint64_t v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  BOOL v75;
  uint64_t v76;
  char v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  BOOL v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  char *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  unint64_t v93;
  uint64_t v94;
  char *v95;
  uint64_t v96;
  char *v97;
  uint64_t v98;
  unint64_t v99;
  char *v100;
  char *v101;
  uint64_t v102;
  unint64_t v103;
  uint64_t v104;
  uint64_t v105;
  char *v106;
  unint64_t v107;
  uint64_t v108;
  uint64_t *v109;
  uint64_t v110;
  _QWORD *v111;
  Swift::Int v112;
  Swift::Int v113;
  uint64_t v114;
  char *__dst;

  v3 = a1[1];
  result = _minimumMergeRunLength(_:)(v3);
  if (result >= v3)
  {
    if ((v3 & 0x8000000000000000) == 0)
    {
      if (v3)
        return sub_100024ACC(0, v3, 1, a1);
      return result;
    }
    goto LABEL_154;
  }
  if (v3 >= 0)
    v5 = v3;
  else
    v5 = v3 + 1;
  if (v3 < -1)
  {
LABEL_162:
    result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Can't construct Array with count < 0", 36, 2, "Swift/Array.swift", 17, 2, 936, 0);
    __break(1u);
    return result;
  }
  v112 = result;
  v109 = a1;
  if (v3 < 2)
  {
    v9 = _swiftEmptyArrayStorage;
    __dst = (char *)&_swiftEmptyArrayStorage[4];
    if (v3 != 1)
    {
      v13 = _swiftEmptyArrayStorage[2];
      v12 = (char *)_swiftEmptyArrayStorage;
LABEL_120:
      v101 = v12;
      v111 = v9;
      if (v13 < 2)
        goto LABEL_117;
      v102 = *v109;
      while (1)
      {
        v103 = v13 - 2;
        if (v13 < 2)
          goto LABEL_149;
        if (!v102)
          goto LABEL_161;
        v100 = v101;
        v104 = *(_QWORD *)&v101[16 * v103 + 32];
        v105 = *(_QWORD *)&v101[16 * v13 + 24];
        sub_100024BB0((char *)(v102 + 24 * v104), (char *)(v102 + 24 * *(_QWORD *)&v101[16 * v13 + 16]), v102 + 24 * v105, __dst);
        if (v1)
          goto LABEL_116;
        if (v105 < v104)
          goto LABEL_150;
        if ((swift_isUniquelyReferenced_nonNull_native(v100) & 1) == 0)
          v100 = sub_100025144((uint64_t)v100);
        if (v103 >= *((_QWORD *)v100 + 2))
          goto LABEL_151;
        v106 = &v100[16 * v103 + 32];
        *(_QWORD *)v106 = v104;
        *((_QWORD *)v106 + 1) = v105;
        v107 = *((_QWORD *)v100 + 2);
        if (v13 > v107)
          goto LABEL_152;
        memmove(&v100[16 * v13 + 16], &v100[16 * v13 + 32], 16 * (v107 - v13));
        v101 = v100;
        *((_QWORD *)v100 + 2) = v107 - 1;
        v13 = v107 - 1;
        if (v107 <= 2)
          goto LABEL_117;
      }
    }
    v111 = _swiftEmptyArrayStorage;
  }
  else
  {
    v6 = v5 >> 1;
    v7 = sub_10000527C(&qword_1000A54F0);
    v8 = static Array._allocateBufferUninitialized(minimumCapacity:)(v6, v7);
    *(_QWORD *)(v8 + 16) = v6;
    v111 = (_QWORD *)v8;
    __dst = (char *)(v8 + 32);
  }
  v10 = 0;
  v11 = *a1;
  v110 = *a1 + 8;
  v108 = *a1 - 24;
  v12 = (char *)_swiftEmptyArrayStorage;
  v113 = v3;
  v114 = v11;
  while (1)
  {
    v14 = v10++;
    if (v10 >= v3)
      goto LABEL_46;
    v15 = (uint64_t *)(v11 + 24 * v10);
    v16 = *v15;
    v17 = v15[1];
    v18 = (_QWORD *)(v11 + 24 * v14);
    v19 = v18[1];
    if (v16 == *v18 && v17 == v19)
    {
      v22 = v14 + 2;
      if (v14 + 2 >= v3)
        goto LABEL_45;
      v21 = 0;
    }
    else
    {
      v21 = _stringCompareWithSmolCheck(_:_:expecting:)(v16, v17, *v18, v19, 1);
      v22 = v14 + 2;
      if (v14 + 2 >= v3)
        goto LABEL_36;
    }
    v23 = (uint64_t *)(v110 + 24 * v22);
    do
    {
      v25 = *(v23 - 1);
      v26 = *v23;
      v27 = (_QWORD *)(v11 + 24 * v10);
      v28 = v27[1];
      if (v25 == *v27 && v26 == v28)
      {
        if ((v21 & 1) != 0)
          goto LABEL_37;
      }
      else if (((v21 ^ _stringCompareWithSmolCheck(_:_:expecting:)(v25, v26, *v27, v28, 1)) & 1) != 0)
      {
        goto LABEL_36;
      }
      v23 += 3;
      v24 = v22 + 1;
      v10 = v22;
      v22 = v24;
    }
    while (v24 < v3);
    v22 = v24;
LABEL_36:
    v10 = v22;
    if ((v21 & 1) != 0)
    {
LABEL_37:
      if (v22 < v14)
        goto LABEL_157;
      if (v14 < v22)
      {
        v30 = 24 * v22;
        v31 = 24 * v14;
        v32 = v22;
        v33 = v14;
        do
        {
          if (v33 != --v32)
          {
            if (!v11)
              goto LABEL_160;
            v34 = v11 + v31;
            v35 = v11 + v30;
            v36 = *(_QWORD *)(v11 + v31);
            v37 = *(_OWORD *)(v11 + v31 + 8);
            v38 = *(_OWORD *)(v11 + v30 - 24);
            *(_QWORD *)(v34 + 16) = *(_QWORD *)(v11 + v30 - 8);
            *(_OWORD *)v34 = v38;
            *(_QWORD *)(v35 - 24) = v36;
            *(_OWORD *)(v35 - 16) = v37;
          }
          ++v33;
          v30 -= 24;
          v31 += 24;
        }
        while (v33 < v32);
      }
LABEL_45:
      v10 = v22;
    }
LABEL_46:
    if (v10 < v3)
    {
      if (__OFSUB__(v10, v14))
        goto LABEL_153;
      if (v10 - v14 < v112)
      {
        if (__OFADD__(v14, v112))
          goto LABEL_155;
        if (v14 + v112 >= v3)
          v39 = v3;
        else
          v39 = v14 + v112;
        if (v39 < v14)
          goto LABEL_156;
        if (v10 != v39)
        {
          v40 = v108 + 24 * v10;
          do
          {
            v41 = (uint64_t *)(v11 + 24 * v10);
            v42 = *v41;
            v43 = v41[1];
            v44 = v14;
            v45 = v40;
            do
            {
              v46 = *(_QWORD *)(v45 + 8);
              v47 = v42 == *(_QWORD *)v45 && v43 == v46;
              if (v47 || (_stringCompareWithSmolCheck(_:_:expecting:)(v42, v43, *(_QWORD *)v45, v46, 1) & 1) == 0)
                break;
              if (!v11)
                goto LABEL_158;
              v48 = *(_OWORD *)(v45 + 32);
              v49 = *(_QWORD *)(v45 + 16);
              v42 = *(_QWORD *)(v45 + 24);
              *(_OWORD *)(v45 + 24) = *(_OWORD *)v45;
              *(_QWORD *)(v45 + 40) = v49;
              *(_QWORD *)v45 = v42;
              *(_OWORD *)(v45 + 8) = v48;
              v43 = v48;
              v45 -= 24;
              ++v44;
            }
            while (v10 != v44);
            ++v10;
            v40 += 24;
          }
          while (v10 != v39);
          v10 = v39;
        }
      }
    }
    if (v10 < v14)
    {
LABEL_148:
      __break(1u);
LABEL_149:
      __break(1u);
LABEL_150:
      __break(1u);
LABEL_151:
      __break(1u);
LABEL_152:
      __break(1u);
LABEL_153:
      __break(1u);
LABEL_154:
      __break(1u);
LABEL_155:
      __break(1u);
LABEL_156:
      __break(1u);
LABEL_157:
      __break(1u);
LABEL_158:
      __break(1u);
LABEL_159:
      __break(1u);
LABEL_160:
      __break(1u);
LABEL_161:
      __break(1u);
      goto LABEL_162;
    }
    if ((swift_isUniquelyReferenced_nonNull_native(v12) & 1) == 0)
      v12 = sub_100024E84(0, *((_QWORD *)v12 + 2) + 1, 1, v12);
    v51 = *((_QWORD *)v12 + 2);
    v50 = *((_QWORD *)v12 + 3);
    v13 = v51 + 1;
    if (v51 >= v50 >> 1)
      v12 = sub_100024E84((char *)(v50 > 1), v51 + 1, 1, v12);
    *((_QWORD *)v12 + 2) = v13;
    v52 = v12 + 32;
    v53 = &v12[16 * v51 + 32];
    *(_QWORD *)v53 = v14;
    *((_QWORD *)v53 + 1) = v10;
    if (v51)
      break;
    v13 = 1;
    v11 = v114;
LABEL_15:
    v3 = v113;
    if (v10 >= v113)
    {
      v9 = v111;
      goto LABEL_120;
    }
  }
  v11 = v114;
  while (1)
  {
    v54 = v13 - 1;
    if (v13 >= 4)
    {
      v59 = &v52[16 * v13];
      v60 = *((_QWORD *)v59 - 8);
      v61 = *((_QWORD *)v59 - 7);
      v65 = __OFSUB__(v61, v60);
      v62 = v61 - v60;
      if (v65)
        goto LABEL_137;
      v64 = *((_QWORD *)v59 - 6);
      v63 = *((_QWORD *)v59 - 5);
      v65 = __OFSUB__(v63, v64);
      v57 = v63 - v64;
      v58 = v65;
      if (v65)
        goto LABEL_138;
      v66 = v13 - 2;
      v67 = &v52[16 * v13 - 32];
      v69 = *(_QWORD *)v67;
      v68 = *((_QWORD *)v67 + 1);
      v65 = __OFSUB__(v68, v69);
      v70 = v68 - v69;
      if (v65)
        goto LABEL_140;
      v65 = __OFADD__(v57, v70);
      v71 = v57 + v70;
      if (v65)
        goto LABEL_143;
      if (v71 >= v62)
      {
        v89 = &v52[16 * v54];
        v91 = *(_QWORD *)v89;
        v90 = *((_QWORD *)v89 + 1);
        v65 = __OFSUB__(v90, v91);
        v92 = v90 - v91;
        if (v65)
          goto LABEL_147;
        v82 = v57 < v92;
        goto LABEL_105;
      }
    }
    else
    {
      if (v13 != 3)
      {
        v83 = *((_QWORD *)v12 + 4);
        v84 = *((_QWORD *)v12 + 5);
        v65 = __OFSUB__(v84, v83);
        v76 = v84 - v83;
        v77 = v65;
        goto LABEL_99;
      }
      v56 = *((_QWORD *)v12 + 4);
      v55 = *((_QWORD *)v12 + 5);
      v65 = __OFSUB__(v55, v56);
      v57 = v55 - v56;
      v58 = v65;
    }
    if ((v58 & 1) != 0)
      goto LABEL_139;
    v66 = v13 - 2;
    v72 = &v52[16 * v13 - 32];
    v74 = *(_QWORD *)v72;
    v73 = *((_QWORD *)v72 + 1);
    v75 = __OFSUB__(v73, v74);
    v76 = v73 - v74;
    v77 = v75;
    if (v75)
      goto LABEL_142;
    v78 = &v52[16 * v54];
    v80 = *(_QWORD *)v78;
    v79 = *((_QWORD *)v78 + 1);
    v65 = __OFSUB__(v79, v80);
    v81 = v79 - v80;
    if (v65)
      goto LABEL_145;
    if (__OFADD__(v76, v81))
      goto LABEL_146;
    if (v76 + v81 >= v57)
    {
      v82 = v57 < v81;
LABEL_105:
      if (v82)
        v54 = v66;
      goto LABEL_107;
    }
LABEL_99:
    if ((v77 & 1) != 0)
      goto LABEL_141;
    v85 = &v52[16 * v54];
    v87 = *(_QWORD *)v85;
    v86 = *((_QWORD *)v85 + 1);
    v65 = __OFSUB__(v86, v87);
    v88 = v86 - v87;
    if (v65)
      goto LABEL_144;
    if (v88 < v76)
      goto LABEL_15;
LABEL_107:
    v93 = v54 - 1;
    if (v54 - 1 >= v13)
    {
      __break(1u);
LABEL_134:
      __break(1u);
LABEL_135:
      __break(1u);
LABEL_136:
      __break(1u);
LABEL_137:
      __break(1u);
LABEL_138:
      __break(1u);
LABEL_139:
      __break(1u);
LABEL_140:
      __break(1u);
LABEL_141:
      __break(1u);
LABEL_142:
      __break(1u);
LABEL_143:
      __break(1u);
LABEL_144:
      __break(1u);
LABEL_145:
      __break(1u);
LABEL_146:
      __break(1u);
LABEL_147:
      __break(1u);
      goto LABEL_148;
    }
    if (!v11)
      goto LABEL_159;
    v94 = v11;
    v95 = &v52[16 * v93];
    v96 = *(_QWORD *)v95;
    v97 = &v52[16 * v54];
    v98 = *((_QWORD *)v97 + 1);
    sub_100024BB0((char *)(v94 + 24 * *(_QWORD *)v95), (char *)(v94 + 24 * *(_QWORD *)v97), v94 + 24 * v98, __dst);
    if (v1)
      break;
    if (v98 < v96)
      goto LABEL_134;
    if (v54 > *((_QWORD *)v12 + 2))
      goto LABEL_135;
    *(_QWORD *)v95 = v96;
    *(_QWORD *)&v52[16 * v93 + 8] = v98;
    v99 = *((_QWORD *)v12 + 2);
    if (v54 >= v99)
      goto LABEL_136;
    v13 = v99 - 1;
    memmove(&v52[16 * v54], v97 + 16, 16 * (v99 - 1 - v54));
    *((_QWORD *)v12 + 2) = v99 - 1;
    v82 = v99 > 2;
    v11 = v114;
    if (!v82)
      goto LABEL_15;
  }
  v100 = v12;
LABEL_116:
  v101 = v100;
LABEL_117:
  swift_bridgeObjectRelease(v101);
  v111[2] = 0;
  return swift_bridgeObjectRelease(v111);
}

uint64_t sub_100024ACC(uint64_t result, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  __int128 v14;
  uint64_t v15;

  if (a3 != a2)
  {
    v4 = a3;
    v6 = result;
    v7 = *a4;
    v8 = *a4 + 24 * a3 - 24;
LABEL_5:
    v9 = (uint64_t *)(v7 + 24 * v4);
    result = *v9;
    v10 = v9[1];
    v11 = v6;
    v12 = v8;
    while (1)
    {
      v13 = result == *(_QWORD *)v12 && v10 == *(_QWORD *)(v12 + 8);
      if (v13 || (result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) == 0))
      {
LABEL_4:
        ++v4;
        v8 += 24;
        if (v4 == a2)
          return result;
        goto LABEL_5;
      }
      if (!v7)
        break;
      v14 = *(_OWORD *)(v12 + 32);
      v15 = *(_QWORD *)(v12 + 16);
      result = *(_QWORD *)(v12 + 24);
      *(_OWORD *)(v12 + 24) = *(_OWORD *)v12;
      *(_QWORD *)(v12 + 40) = v15;
      *(_QWORD *)v12 = result;
      *(_OWORD *)(v12 + 8) = v14;
      v10 = v14;
      v12 -= 24;
      if (v4 == ++v11)
        goto LABEL_4;
    }
    __break(1u);
  }
  return result;
}

uint64_t sub_100024BB0(char *__src, char *a2, unint64_t a3, char *__dst)
{
  char *v4;
  char *v6;
  char *v7;
  int64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  char *v16;
  __int128 v17;
  __int128 v18;
  char *v19;
  unint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  BOOL v27;
  __int128 v28;
  __int128 v29;
  uint64_t result;
  char *v31;
  char *v32;
  char *v33;

  v4 = __dst;
  v6 = a2;
  v7 = __src;
  v8 = a2 - __src;
  v9 = (a2 - __src) / 24;
  v10 = a3 - (_QWORD)a2;
  v11 = (uint64_t)(a3 - (_QWORD)a2) / 24;
  v33 = __src;
  v32 = __dst;
  if (v9 >= v11)
  {
    if (v10 >= -23)
    {
      if (__dst != a2 || &a2[24 * v11] <= __dst)
        memmove(__dst, a2, 24 * v11);
      v19 = &v4[24 * v11];
      v31 = v19;
      v33 = v6;
      if (v7 < v6 && v10 >= 24)
      {
        v20 = a3 - 24;
        v21 = v6;
        while (1)
        {
          v22 = (char *)(v20 + 24);
          v23 = *((_QWORD *)v19 - 3);
          v24 = *((_QWORD *)v19 - 2);
          v25 = *((_QWORD *)v21 - 3);
          v26 = *((_QWORD *)v21 - 2);
          v21 -= 24;
          v27 = v23 == v25 && v24 == v26;
          if (v27 || (_stringCompareWithSmolCheck(_:_:expecting:)(v23, v24, v25, v26, 1) & 1) == 0)
          {
            v31 = v19 - 24;
            if (v22 < v19 || v20 >= (unint64_t)v19 || v22 != v19)
            {
              v29 = *(_OWORD *)(v19 - 24);
              *(_QWORD *)(v20 + 16) = *((_QWORD *)v19 - 1);
              *(_OWORD *)v20 = v29;
            }
            v21 = v6;
            v19 -= 24;
            if (v6 <= v7)
              goto LABEL_46;
          }
          else
          {
            if (v22 != v6 || v20 >= (unint64_t)v6)
            {
              v28 = *(_OWORD *)v21;
              *(_QWORD *)(v20 + 16) = *((_QWORD *)v21 + 2);
              *(_OWORD *)v20 = v28;
            }
            v33 = v21;
            if (v21 <= v7)
              goto LABEL_46;
          }
          v20 -= 24;
          v6 = v21;
          if (v19 <= v4)
            goto LABEL_46;
        }
      }
      goto LABEL_46;
    }
  }
  else if (v8 >= -23)
  {
    if (__dst != __src || &__src[24 * v9] <= __dst)
      memmove(__dst, __src, 24 * v9);
    v12 = &v4[24 * v9];
    v31 = v12;
    if ((unint64_t)v6 < a3 && v8 >= 24)
    {
      do
      {
        v13 = *((_QWORD *)v6 + 1);
        v14 = *((_QWORD *)v4 + 1);
        v15 = *(_QWORD *)v6 == *(_QWORD *)v4 && v13 == v14;
        if (v15 || (_stringCompareWithSmolCheck(_:_:expecting:)(*(_QWORD *)v6, v13, *(_QWORD *)v4, v14, 1) & 1) == 0)
        {
          if (v7 != v4)
          {
            v18 = *(_OWORD *)v4;
            *((_QWORD *)v7 + 2) = *((_QWORD *)v4 + 2);
            *(_OWORD *)v7 = v18;
          }
          v4 += 24;
          v32 = v4;
          v16 = v6;
        }
        else
        {
          v16 = v6 + 24;
          if (v7 < v6 || v7 >= v16 || v7 != v6)
          {
            v17 = *(_OWORD *)v6;
            *((_QWORD *)v7 + 2) = *((_QWORD *)v6 + 2);
            *(_OWORD *)v7 = v17;
          }
        }
        v7 += 24;
        if (v4 >= v12)
          break;
        v6 = v16;
      }
      while ((unint64_t)v16 < a3);
      v33 = v7;
    }
LABEL_46:
    sub_100024F7C((void **)&v33, (const void **)&v32, &v31);
    return 1;
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, 2, 1046, 0);
  __break(1u);
  return result;
}

char *sub_100024E84(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_10000527C(&qword_1000A54F8);
    v11 = (char *)swift_allocObject(v10, 16 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 17;
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * (v13 >> 4);
  }
  else
  {
    v11 = (char *)&_swiftEmptyArrayStorage;
  }
  v14 = v11 + 32;
  v15 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v11 != a4 || v14 >= &v15[16 * v8])
      memmove(v14, v15, 16 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v14, v15, 16 * v8);
  }
  swift_bridgeObjectRelease(a4);
  return v11;
}

char *sub_100024F7C(void **a1, const void **a2, _QWORD *a3)
{
  char *v3;
  uint64_t v4;
  char *result;
  uint64_t v6;
  char v7;

  v3 = (char *)*a2;
  v4 = *a3 - (_QWORD)v3;
  if (v4 <= -24)
  {
    v7 = 2;
    result = (char *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, v7, 1046, 0);
    __break(1u);
  }
  else
  {
    result = (char *)*a1;
    v6 = v4 / 24;
    if (result != v3 || result >= &v3[24 * v6])
      return (char *)memmove(result, v3, 24 * v6);
  }
  return result;
}

uint64_t sub_100025038(unint64_t *a1, unint64_t *a2, uint64_t *a3)
{
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;

  v3 = *a1;
  v4 = *a2;
  v5 = *a3;
  result = type metadata accessor for AccessoryAndSceneEntity(0);
  v7 = *(_QWORD *)(*(_QWORD *)(result - 8) + 72);
  if (!v7)
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v8 = v5 - v4;
  if (v5 - v4 == 0x8000000000000000 && v7 == -1)
    goto LABEL_14;
  v10 = v8 / v7;
  if (v8 / v7 < 0)
  {
LABEL_15:
    result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, 2, 1046, 0);
    __break(1u);
    return result;
  }
  if (v3 < v4 || v3 >= v4 + v10 * v7)
    return swift_arrayInitWithTakeFrontToBack(v3, v4, v10, result);
  if (v3 != v4)
    return swift_arrayInitWithTakeBackToFront(v3);
  return result;
}

char *sub_100025144(uint64_t a1)
{
  return sub_100024E84(0, *(_QWORD *)(a1 + 16), 0, (char *)a1);
}

uint64_t sub_100025158(uint64_t result, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  int64_t v12;
  uint64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v5 = (_QWORD *)result;
  v6 = a4 + 64;
  v7 = -1 << *(_BYTE *)(a4 + 32);
  if (-v7 < 64)
    v8 = ~(-1 << -(char)v7);
  else
    v8 = -1;
  v9 = v8 & *(_QWORD *)(a4 + 64);
  if (!a2)
  {
    v12 = 0;
    v10 = 0;
LABEL_39:
    *v5 = a4;
    v5[1] = v6;
    v5[2] = ~v7;
    v5[3] = v12;
    v5[4] = v9;
    return v10;
  }
  v10 = a3;
  if (!a3)
  {
    v12 = 0;
    goto LABEL_39;
  }
  if (a3 < 0)
    goto LABEL_41;
  v11 = a2;
  v12 = 0;
  v13 = 0;
  v14 = (unint64_t)(63 - v7) >> 6;
  v23 = -1 << *(_BYTE *)(a4 + 32);
  if (!v9)
    goto LABEL_9;
LABEL_8:
  v15 = __clz(__rbit64(v9));
  v9 &= v9 - 1;
  v16 = v15 | (v12 << 6);
  while (1)
  {
    ++v13;
    v20 = (_QWORD *)(*(_QWORD *)(a4 + 48) + 16 * v16);
    v21 = v20[1];
    v22 = *(_QWORD *)(*(_QWORD *)(a4 + 56) + 8 * v16);
    *v11 = *v20;
    v11[1] = v21;
    v11[2] = v22;
    if (v13 == v10)
    {
      swift_bridgeObjectRetain(v21);
      swift_bridgeObjectRetain(v22);
      goto LABEL_38;
    }
    v11 += 3;
    swift_bridgeObjectRetain(v21);
    result = swift_bridgeObjectRetain(v22);
    if (v9)
      goto LABEL_8;
LABEL_9:
    v17 = v12 + 1;
    if (__OFADD__(v12, 1))
      break;
    if (v17 >= v14)
      goto LABEL_33;
    v18 = *(_QWORD *)(v6 + 8 * v17);
    if (!v18)
    {
      v12 += 2;
      if (v17 + 1 >= v14)
      {
        v9 = 0;
        v12 = v17;
      }
      else
      {
        v18 = *(_QWORD *)(v6 + 8 * v12);
        if (v18)
          goto LABEL_14;
        v19 = v17 + 2;
        if (v17 + 2 >= v14)
          goto LABEL_33;
        v18 = *(_QWORD *)(v6 + 8 * v19);
        if (v18)
        {
LABEL_17:
          v17 = v19;
          goto LABEL_18;
        }
        v12 = v17 + 3;
        if (v17 + 3 < v14)
        {
          v18 = *(_QWORD *)(v6 + 8 * v12);
          if (v18)
          {
LABEL_14:
            v17 = v12;
            goto LABEL_18;
          }
          v19 = v17 + 4;
          if (v17 + 4 >= v14)
          {
LABEL_33:
            v9 = 0;
            goto LABEL_37;
          }
          v18 = *(_QWORD *)(v6 + 8 * v19);
          if (!v18)
          {
            while (1)
            {
              v17 = v19 + 1;
              if (__OFADD__(v19, 1))
                goto LABEL_42;
              if (v17 >= v14)
              {
                v9 = 0;
                v12 = v14 - 1;
                goto LABEL_37;
              }
              v18 = *(_QWORD *)(v6 + 8 * v17);
              ++v19;
              if (v18)
                goto LABEL_18;
            }
          }
          goto LABEL_17;
        }
        v9 = 0;
        v12 = v17 + 2;
      }
LABEL_37:
      v10 = v13;
LABEL_38:
      v7 = v23;
      goto LABEL_39;
    }
LABEL_18:
    v9 = (v18 - 1) & v18;
    v16 = __clz(__rbit64(v18)) + (v17 << 6);
    v12 = v17;
  }
  __break(1u);
LABEL_41:
  __break(1u);
LABEL_42:
  __break(1u);
  return result;
}

uint64_t sub_100025370(_QWORD *a1)
{
  return sub_10002DDF0(0, a1[2], 0, a1);
}

uint64_t sub_100025384(_QWORD *a1)
{
  return sub_10002DA98(0, a1[2], 0, a1);
}

uint64_t sub_100025398(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t result;
  uint64_t v18;
  unint64_t v19;
  uint64_t (*v20)(char *, uint64_t);
  unint64_t v21;
  void (*v22)(char *, unint64_t, uint64_t);
  unsigned int (*v23)(char *, uint64_t, uint64_t);
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  char v27;
  _QWORD *v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  void (*v40)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v41;
  char *v42;
  void (*v43)(char *, char *, uint64_t);
  _QWORD *v44;

  v4 = sub_10000527C(&qword_1000A5060);
  v5 = __chkstk_darwin(v4);
  v7 = (char *)&v31 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v9 = (char *)&v31 - v8;
  v10 = type metadata accessor for UUID(0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = __chkstk_darwin(v10);
  v36 = (char *)&v31 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __chkstk_darwin(v12);
  v16 = (char *)&v31 - v15;
  result = __chkstk_darwin(v14);
  v42 = (char *)&v31 - v18;
  v44 = _swiftEmptyArrayStorage;
  v34 = *(_QWORD *)(a1 + 16);
  if (v34)
  {
    v19 = 0;
    v35 = a2;
    v32 = v9;
    v33 = a1;
    v39 = v11;
    while (v19 < *(_QWORD *)(a1 + 16))
    {
      v21 = (*(unsigned __int8 *)(v11 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80);
      v37 = v19;
      v38 = v21;
      v41 = *(_QWORD *)(v11 + 72);
      v22 = *(void (**)(char *, unint64_t, uint64_t))(v11 + 16);
      v22(v9, a1 + v21 + v41 * v19, v10);
      v40 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v11 + 56);
      v40(v9, 0, 1, v10);
      v23 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48);
      if (v23(v9, 1, v10) == 1)
        goto LABEL_23;
      v43 = *(void (**)(char *, char *, uint64_t))(v11 + 32);
      v43(v42, v9, v10);
      if (a2)
      {
        v24 = *(_QWORD *)(a2 + 16);
        if (v24)
        {
          v25 = a2 + v38;
          swift_bridgeObjectRetain(a2);
          while (1)
          {
            v22(v7, v25, v10);
            v40(v7, 0, 1, v10);
            if (v23(v7, 1, v10) == 1)
            {
              swift_bridgeObjectRelease(v35);
              v11 = v39;
              v20 = *(uint64_t (**)(char *, uint64_t))(v39 + 8);
              a1 = v33;
LABEL_4:
              result = v20(v42, v10);
              v9 = v32;
              goto LABEL_5;
            }
            v43(v16, v7, v10);
            v26 = sub_100008C7C((unint64_t *)&unk_1000A7670, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
            v27 = dispatch thunk of static Equatable.== infix(_:_:)(v16, v42, v10, v26);
            v20 = *(uint64_t (**)(char *, uint64_t))(v39 + 8);
            v20(v16, v10);
            if ((v27 & 1) != 0)
              break;
            v25 += v41;
            if (!--v24)
            {
              v40(v7, 1, 1, v10);
              swift_bridgeObjectRelease(v35);
              a1 = v33;
              v11 = v39;
              goto LABEL_4;
            }
          }
          swift_bridgeObjectRelease(v35);
        }
      }
      v43(v36, v42, v10);
      v28 = v44;
      if ((swift_isUniquelyReferenced_nonNull_native(v44) & 1) == 0)
      {
        sub_10002D858(0, v28[2] + 1, 1);
        v28 = v44;
      }
      v30 = v28[2];
      v29 = v28[3];
      if (v30 >= v29 >> 1)
      {
        sub_10002D858(v29 > 1, v30 + 1, 1);
        v28 = v44;
      }
      v28[2] = v30 + 1;
      result = ((uint64_t (*)(char *, char *, uint64_t))v43)((char *)v28 + v38 + v30 * v41, v36, v10);
      v44 = v28;
      v9 = v32;
      a1 = v33;
      v11 = v39;
LABEL_5:
      v19 = v37 + 1;
      a2 = v35;
      if (v37 + 1 == v34)
        goto LABEL_22;
    }
    __break(1u);
  }
  else
  {
    v40 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v11 + 56);
LABEL_22:
    v40(v9, 1, 1, v10);
LABEL_23:
    swift_bridgeObjectRelease(a1);
    sub_100014EFC((uint64_t)v9, &qword_1000A5060);
    return (uint64_t)v44;
  }
  return result;
}

_QWORD *sub_10002578C(uint64_t a1, void *a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  id v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void (*v23)(char *, uint64_t, uint64_t);
  uint64_t v24;
  uint64_t v25;
  id v26;

  v26 = a2;
  v4 = type metadata accessor for AccessoryAndSceneEntity(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = __chkstk_darwin(v4);
  v8 = (char *)&v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v10 = (char *)&v20 - v9;
  v11 = *(_QWORD *)(a1 + 16);
  if (!v11)
    return _swiftEmptyArrayStorage;
  v22 = v2;
  v12 = *(_QWORD *)(type metadata accessor for WidgetTileInfo(0) - 8);
  v13 = a1 + ((*(unsigned __int8 *)(v12 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80));
  v25 = *(_QWORD *)(v12 + 72);
  v14 = type metadata accessor for UUID(0);
  v23 = *(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 16);
  v24 = v14;
  v21 = a1;
  swift_bridgeObjectRetain(a1);
  v15 = _swiftEmptyArrayStorage;
  do
  {
    v23(v10, v13, v24);
    v16 = objc_msgSend(v26, "uniqueIdentifier");
    static UUID._unconditionallyBridgeFromObjectiveC(_:)(v16);

    sub_100026C34(v13, (uint64_t)&v10[*(int *)(v4 + 24)], type metadata accessor for WidgetTileInfo);
    sub_100026D98((uint64_t)v10, (uint64_t)v8, type metadata accessor for AccessoryAndSceneEntity);
    if ((swift_isUniquelyReferenced_nonNull_native(v15) & 1) == 0)
      v15 = (_QWORD *)sub_10005AC44(0, v15[2] + 1, 1, (unint64_t)v15);
    v18 = v15[2];
    v17 = v15[3];
    if (v18 >= v17 >> 1)
      v15 = (_QWORD *)sub_10005AC44(v17 > 1, v18 + 1, 1, (unint64_t)v15);
    v15[2] = v18 + 1;
    sub_100026D98((uint64_t)v8, (uint64_t)v15+ ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80))+ *(_QWORD *)(v5 + 72) * v18, type metadata accessor for AccessoryAndSceneEntity);
    v13 += v25;
    --v11;
  }
  while (v11);
  swift_bridgeObjectRelease(v21);
  return v15;
}

uint64_t sub_1000259B0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  id v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  id v10;
  _QWORD *v11;
  uint64_t v12;
  int64_t v13;
  int64_t v14;
  int isUniquelyReferenced_nonNull_native;
  int64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t result;
  char v34;

  if ((unint64_t)a1 >> 62)
    goto LABEL_33;
  v3 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain(a1);
  while (v3)
  {
    v4 = _swiftEmptyArrayStorage;
    v5 = 4;
    while (1)
    {
      v6 = (a1 & 0xC000000000000001) != 0
         ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v5 - 4, a1)
         : *(id *)(a1 + 8 * v5);
      v7 = v6;
      v8 = v5 - 3;
      if (__OFADD__(v5 - 4, 1))
        break;
      v9 = sub_100009C1C(v6, a2);
      v10 = v7;
      v11 = sub_10002578C(v9, v10);
      swift_bridgeObjectRelease(v9);

      v12 = v11[2];
      v13 = v4[2];
      v14 = v13 + v12;
      if (__OFADD__(v13, v12))
        goto LABEL_29;
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v4);
      if (isUniquelyReferenced_nonNull_native && v14 <= v4[3] >> 1)
      {
        if (v11[2])
          goto LABEL_19;
      }
      else
      {
        if (v13 <= v14)
          v16 = v13 + v12;
        else
          v16 = v13;
        v4 = (_QWORD *)sub_10005AC44(isUniquelyReferenced_nonNull_native, v16, 1, (unint64_t)v4);
        if (v11[2])
        {
LABEL_19:
          v17 = v4[2];
          v18 = (v4[3] >> 1) - v17;
          v19 = type metadata accessor for AccessoryAndSceneEntity(0);
          if (v18 < v12)
            goto LABEL_31;
          v20 = *(_QWORD *)(v19 - 8);
          v21 = (*(unsigned __int8 *)(v20 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v20 + 80);
          v22 = *(_QWORD *)(v20 + 72);
          v23 = (char *)v4 + v21 + v22 * v17;
          v24 = (char *)v11 + v21;
          v25 = v22 * v12;
          v26 = &v23[v25];
          v27 = &v24[v25];
          if (v24 < v26 && v23 < v27)
          {
            swift_bridgeObjectRelease(a2);
            v34 = 2;
            result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, v34, 1092, 0);
            __break(1u);
            return result;
          }
          swift_arrayInitWithCopy(v23);
          if (v12)
          {
            v29 = v4[2];
            v30 = __OFADD__(v29, v12);
            v31 = v29 + v12;
            if (v30)
              goto LABEL_32;
            v4[2] = v31;
          }
          goto LABEL_5;
        }
      }
      if (v12)
        goto LABEL_30;
LABEL_5:
      swift_bridgeObjectRelease(v11);
      ++v5;
      if (v8 == v3)
        goto LABEL_38;
    }
    __break(1u);
LABEL_29:
    __break(1u);
LABEL_30:
    __break(1u);
LABEL_31:
    __break(1u);
LABEL_32:
    __break(1u);
LABEL_33:
    if (a1 < 0)
      v32 = a1;
    else
      v32 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v3 = _CocoaArrayWrapper.endIndex.getter(v32);
  }
  v4 = _swiftEmptyArrayStorage;
LABEL_38:
  swift_bridgeObjectRelease(a1);
  return (uint64_t)v4;
}

uint64_t sub_100025C28(char a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)(v3 + 72) = a2;
  *(_QWORD *)(v3 + 80) = a3;
  *(_BYTE *)(v3 + 208) = a1;
  v4 = sub_10000527C(&qword_1000A5060);
  *(_QWORD *)(v3 + 88) = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_10000527C(&qword_1000A5508);
  *(_QWORD *)(v3 + 96) = v5;
  *(_QWORD *)(v3 + 104) = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v5 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_100025CB0, 0, 0);
}

uint64_t sub_100025CB0()
{
  _QWORD *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  v1 = HomeWidget.shared.unsafeMutableAddressor();
  v0[14] = v1;
  v2 = *v1;
  v0[15] = *v1;
  v3 = dword_1000A76AC;
  swift_retain(v2);
  v4 = (_QWORD *)swift_task_alloc(v3);
  v0[16] = v4;
  *v4 = v0;
  v4[1] = sub_100025D14;
  return HomeWidget.manager.getter();
}

uint64_t sub_100025D14(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v3 = *(_QWORD *)(*(_QWORD *)v1 + 120);
  v2 = *(_QWORD *)(*(_QWORD *)v1 + 128);
  *(_QWORD *)(*(_QWORD *)v1 + 136) = a1;
  swift_task_dealloc(v2);
  swift_release(v3);
  return swift_task_switch(sub_100025D78, 0, 0);
}

uint64_t sub_100025D78()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  if (*(_QWORD *)(v0 + 136))
  {
    v1 = HomeSettingsActor.shared.unsafeMutableAddressor();
    *(_QWORD *)(v0 + 144) = v1;
    return swift_task_switch(sub_100025F48, *v1, 0);
  }
  else
  {
    if (qword_1000A4F08 != -1)
      swift_once(&qword_1000A4F08, sub_100053184);
    v3 = type metadata accessor for Logger(0);
    v4 = sub_100014698(v3, (uint64_t)qword_1000A7A80);
    v5 = Logger.logObject.getter(v4);
    v6 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v5, v6))
    {
      v7 = (uint8_t *)swift_slowAlloc(12, -1);
      v8 = swift_slowAlloc(32, -1);
      v10 = v8;
      *(_DWORD *)v7 = 136315138;
      *(_QWORD *)(v0 + 56) = sub_100023980(0xD00000000000003ALL, 0x800000010008A6A0, &v10);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 56, v0 + 64, v7 + 4, v7 + 12);
      _os_log_impl((void *)&_mh_execute_header, v5, v6, "%s unable to get shared HMHomeManager instance", v7, 0xCu);
      swift_arrayDestroy(v8, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v8, -1, -1);
      swift_slowDealloc(v7, -1, -1);
    }

    v9 = *(_QWORD *)(v0 + 88);
    swift_task_dealloc(*(_QWORD *)(v0 + 104));
    swift_task_dealloc(v9);
    return (*(uint64_t (**)(_QWORD *))(v0 + 8))(_swiftEmptyArrayStorage);
  }
}

uint64_t sub_100025F48()
{
  if (qword_1000A4E90 != -1)
    swift_once(&qword_1000A4E90, sub_10001E97C);
  return swift_task_switch(sub_100025FA4, 0, 0);
}

uint64_t sub_100025FA4()
{
  uint64_t v0;

  return swift_task_switch(sub_100025FBC, **(_QWORD **)(v0 + 144), 0);
}

uint64_t sub_100025FBC()
{
  uint64_t v0;
  uint64_t v1;

  v1 = xmmword_1000A7970;
  *(_OWORD *)(v0 + 152) = xmmword_1000A7970;
  swift_unknownObjectRetain(v1);
  return swift_task_switch(sub_100026004, 0, 0);
}

uint64_t sub_100026004()
{
  uint64_t v0;
  uint64_t v1;
  _BYTE *v2;
  int v3;
  uint64_t v4;
  id v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t inited;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  void *v16;
  uint64_t v17;
  id v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  id v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  id v32;
  unint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  NSObject *v41;
  os_log_type_t v42;
  uint8_t *v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;

  v1 = *(_QWORD *)(v0 + 72);
  v2 = *(_BYTE **)(v0 + 104);
  v3 = *(unsigned __int8 *)(v0 + 208);
  v4 = (uint64_t)&v2[*(int *)(*(_QWORD *)(v0 + 96) + 48)];
  *v2 = v3;
  sub_100026CB4(v1, v4, &qword_1000A5060);
  if (v3 == 1)
  {
    v5 = objc_msgSend(*(id *)(v0 + 136), "homes");
    v6 = sub_100026D40();
    v7 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v5, v6);

  }
  else
  {
    v8 = type metadata accessor for UUID(0);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(v4, 1, v8) == 1)
    {
      v9 = *(uint64_t **)(v0 + 112);
      v10 = sub_10000527C(&qword_1000A5518);
      inited = swift_initStackObject(v10, v0 + 16);
      *(_QWORD *)(v0 + 168) = inited;
      *(_OWORD *)(inited + 16) = xmmword_100086C80;
      v12 = *v9;
      *(_QWORD *)(v0 + 176) = *v9;
      v13 = dword_1000A76DC;
      swift_retain(v12);
      v14 = (_QWORD *)swift_task_alloc(v13);
      *(_QWORD *)(v0 + 184) = v14;
      *v14 = v0;
      v14[1] = sub_100026508;
      return HomeWidget.recommendedHome(userSettings:)(*(_QWORD *)(v0 + 152), *(_QWORD *)(v0 + 160));
    }
    v16 = *(void **)(v0 + 136);
    v17 = *(_QWORD *)(v0 + 88);
    sub_100026CF8(v4, v17);
    v18 = objc_msgSend(v16, "homes");
    v19 = sub_100026D40();
    v20 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v18, v19);

    v21 = swift_task_alloc(32);
    *(_QWORD *)(v21 + 16) = v17;
    v22 = sub_10001D7A8(sub_100026D7C, v21, v20);
    swift_bridgeObjectRelease(v20);
    swift_task_dealloc(v21);
    v7 = (uint64_t)_swiftEmptyArrayStorage;
    v47 = (uint64_t)_swiftEmptyArrayStorage;
    if (v22)
    {
      v23 = v22;
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v23);
      v24 = *(_QWORD *)((v47 & 0xFFFFFFFFFFFFFF8) + 0x10);
      v25 = *(_QWORD *)((v47 & 0xFFFFFFFFFFFFFF8) + 0x18);
      if (v24 >= v25 >> 1)
      {
        v46 = *(_QWORD *)((v47 & 0xFFFFFFFFFFFFFF8) + 0x10);
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v25 > 1, v24 + 1, 1);
        v24 = v46;
      }
      v26 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v24, v23);
      specialized Array._endMutation()(v26);
      v7 = v47;
    }
    v4 = *(_QWORD *)(v0 + 88);

  }
  sub_100014EFC(v4, &qword_1000A5060);
  if (!((unint64_t)v7 >> 62))
  {
    if (*(uint64_t *)((v7 & 0xFFFFFFFFFFFFF8) + 0x10) >= 1)
      goto LABEL_12;
LABEL_19:
    swift_bridgeObjectRelease(v7);
    if (qword_1000A4F08 != -1)
      swift_once(&qword_1000A4F08, sub_100053184);
    v39 = type metadata accessor for Logger(0);
    v40 = sub_100014698(v39, (uint64_t)qword_1000A7A80);
    v41 = Logger.logObject.getter(v40);
    v42 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v41, v42))
    {
      v43 = (uint8_t *)swift_slowAlloc(12, -1);
      v44 = swift_slowAlloc(32, -1);
      v47 = v44;
      *(_DWORD *)v43 = 136315138;
      *(_QWORD *)(v0 + 64) = sub_100023980(0xD00000000000003ALL, 0x800000010008A6A0, &v47);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 64, v0 + 72, v43 + 4, v43 + 12);
      _os_log_impl((void *)&_mh_execute_header, v41, v42, "%s Unable to match against any valid HMHome's", v43, 0xCu);
      swift_arrayDestroy(v44, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v44, -1, -1);
      swift_slowDealloc(v43, -1, -1);
    }

    v36 = *(_QWORD *)(v0 + 152);
    v31 = *(void **)(v0 + 136);
    goto LABEL_24;
  }
  if (v7 < 0)
    v37 = v7;
  else
    v37 = v7 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v7);
  v38 = _CocoaArrayWrapper.endIndex.getter(v37);
  swift_bridgeObjectRelease(v7);
  if (v38 < 1)
    goto LABEL_19;
LABEL_12:
  v27 = *(_QWORD *)(v0 + 80);
  v28 = sub_10001D2BC(v7);
  swift_bridgeObjectRelease(v7);
  swift_bridgeObjectRetain(v27);
  v29 = sub_100025398(v28, v27);
  swift_bridgeObjectRelease(v27);
  v30 = *(_QWORD *)(v0 + 152);
  v31 = *(void **)(v0 + 136);
  if (!*(_QWORD *)(v29 + 16))
  {
    swift_bridgeObjectRelease(v29);
    v36 = v30;
LABEL_24:
    swift_unknownObjectRelease(v36);
    v35 = _swiftEmptyArrayStorage;
    goto LABEL_25;
  }
  v32 = objc_msgSend(*(id *)(v0 + 136), "homes");
  v33 = sub_100026D40();
  v34 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v32, v33);

  swift_bridgeObjectRetain(v29);
  v35 = (_QWORD *)sub_1000259B0(v34, v29);
  swift_bridgeObjectRelease_n(v29, 2);
  swift_bridgeObjectRelease(v34);
  swift_unknownObjectRelease(v30);
LABEL_25:

  v45 = *(_QWORD *)(v0 + 88);
  swift_task_dealloc(*(_QWORD *)(v0 + 104));
  swift_task_dealloc(v45);
  return (*(uint64_t (**)(_QWORD *))(v0 + 8))(v35);
}

uint64_t sub_100026508(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(uint64_t);

  v4 = *v2;
  v5 = *(_QWORD *)(*v2 + 184);
  *(_QWORD *)(*v2 + 192) = v1;
  swift_task_dealloc(v5);
  swift_release(*(_QWORD *)(v4 + 176));
  if (v1)
  {
    swift_errorRelease(v1);
    v6 = sub_1000268E0;
  }
  else
  {
    *(_QWORD *)(v4 + 200) = a1;
    v6 = sub_10002658C;
  }
  return swift_task_switch(v6, 0, 0);
}

uint64_t sub_10002658C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  id v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  id v15;
  unint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  NSObject *v24;
  os_log_type_t v25;
  uint8_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v30;

  v2 = *(_QWORD *)(v1 + 168);
  *(_QWORD *)(v2 + 32) = *(_QWORD *)(v1 + 200);
  v30 = v2;
  specialized Array._endMutation()(a1);
  v3 = v30;
  v4 = (uint64_t)_swiftEmptyArrayStorage;
  v30 = (uint64_t)_swiftEmptyArrayStorage;
  v5 = *(void **)(v3 + 32);
  if (v5)
  {
    v6 = v5;
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v6);
    v8 = *(_QWORD *)((v30 & 0xFFFFFFFFFFFFFF8) + 0x10);
    v7 = *(_QWORD *)((v30 & 0xFFFFFFFFFFFFFF8) + 0x18);
    if (v8 >= v7 >> 1)
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v7 > 1, v8 + 1, 1);
    v9 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v8, v6);
    specialized Array._endMutation()(v9);
    v4 = v30;
  }
  swift_bridgeObjectRelease(v3);
  if (!((unint64_t)v4 >> 62))
  {
    if (*(uint64_t *)((v4 & 0xFFFFFFFFFFFFF8) + 0x10) >= 1)
      goto LABEL_7;
LABEL_14:
    swift_bridgeObjectRelease(v4);
    if (qword_1000A4F08 != -1)
      swift_once(&qword_1000A4F08, sub_100053184);
    v22 = type metadata accessor for Logger(0);
    v23 = sub_100014698(v22, (uint64_t)qword_1000A7A80);
    v24 = Logger.logObject.getter(v23);
    v25 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v24, v25))
    {
      v26 = (uint8_t *)swift_slowAlloc(12, -1);
      v27 = swift_slowAlloc(32, -1);
      v30 = v27;
      *(_DWORD *)v26 = 136315138;
      *(_QWORD *)(v1 + 64) = sub_100023980(0xD00000000000003ALL, 0x800000010008A6A0, &v30);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 64, v1 + 72, v26 + 4, v26 + 12);
      _os_log_impl((void *)&_mh_execute_header, v24, v25, "%s Unable to match against any valid HMHome's", v26, 0xCu);
      swift_arrayDestroy(v27, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v27, -1, -1);
      swift_slowDealloc(v26, -1, -1);
    }

    v19 = *(_QWORD *)(v1 + 152);
    v14 = *(void **)(v1 + 136);
    goto LABEL_19;
  }
  if (v4 < 0)
    v20 = v4;
  else
    v20 = v4 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v4);
  v21 = _CocoaArrayWrapper.endIndex.getter(v20);
  swift_bridgeObjectRelease(v4);
  if (v21 < 1)
    goto LABEL_14;
LABEL_7:
  v10 = *(_QWORD *)(v1 + 80);
  v11 = sub_10001D2BC(v4);
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRetain(v10);
  v12 = sub_100025398(v11, v10);
  swift_bridgeObjectRelease(v10);
  v13 = *(_QWORD *)(v1 + 152);
  v14 = *(void **)(v1 + 136);
  if (!*(_QWORD *)(v12 + 16))
  {
    swift_bridgeObjectRelease(v12);
    v19 = v13;
LABEL_19:
    swift_unknownObjectRelease(v19);
    v18 = _swiftEmptyArrayStorage;
    goto LABEL_20;
  }
  v15 = objc_msgSend(*(id *)(v1 + 136), "homes");
  v16 = sub_100026D40();
  v17 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v15, v16);

  swift_bridgeObjectRetain(v12);
  v18 = (_QWORD *)sub_1000259B0(v17, v12);
  swift_bridgeObjectRelease_n(v12, 2);
  swift_bridgeObjectRelease(v17);
  swift_unknownObjectRelease(v13);
LABEL_20:

  v28 = *(_QWORD *)(v1 + 88);
  swift_task_dealloc(*(_QWORD *)(v1 + 104));
  swift_task_dealloc(v28);
  return (*(uint64_t (**)(_QWORD *))(v1 + 8))(v18);
}

uint64_t sub_1000268E0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  id v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  id v15;
  unint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  NSObject *v24;
  os_log_type_t v25;
  uint8_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v30;

  v2 = *(_QWORD *)(v1 + 168);
  *(_QWORD *)(v2 + 32) = 0;
  v30 = v2;
  specialized Array._endMutation()(a1);
  v3 = v30;
  v4 = (uint64_t)_swiftEmptyArrayStorage;
  v30 = (uint64_t)_swiftEmptyArrayStorage;
  v5 = *(void **)(v3 + 32);
  if (v5)
  {
    v6 = v5;
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v6);
    v8 = *(_QWORD *)((v30 & 0xFFFFFFFFFFFFFF8) + 0x10);
    v7 = *(_QWORD *)((v30 & 0xFFFFFFFFFFFFFF8) + 0x18);
    if (v8 >= v7 >> 1)
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v7 > 1, v8 + 1, 1);
    v9 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v8, v6);
    specialized Array._endMutation()(v9);
    v4 = v30;
  }
  swift_bridgeObjectRelease(v3);
  if (!((unint64_t)v4 >> 62))
  {
    if (*(uint64_t *)((v4 & 0xFFFFFFFFFFFFF8) + 0x10) >= 1)
      goto LABEL_7;
LABEL_14:
    swift_bridgeObjectRelease(v4);
    if (qword_1000A4F08 != -1)
      swift_once(&qword_1000A4F08, sub_100053184);
    v22 = type metadata accessor for Logger(0);
    v23 = sub_100014698(v22, (uint64_t)qword_1000A7A80);
    v24 = Logger.logObject.getter(v23);
    v25 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v24, v25))
    {
      v26 = (uint8_t *)swift_slowAlloc(12, -1);
      v27 = swift_slowAlloc(32, -1);
      v30 = v27;
      *(_DWORD *)v26 = 136315138;
      *(_QWORD *)(v1 + 64) = sub_100023980(0xD00000000000003ALL, 0x800000010008A6A0, &v30);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 64, v1 + 72, v26 + 4, v26 + 12);
      _os_log_impl((void *)&_mh_execute_header, v24, v25, "%s Unable to match against any valid HMHome's", v26, 0xCu);
      swift_arrayDestroy(v27, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v27, -1, -1);
      swift_slowDealloc(v26, -1, -1);
    }

    v19 = *(_QWORD *)(v1 + 152);
    v14 = *(void **)(v1 + 136);
    goto LABEL_19;
  }
  if (v4 < 0)
    v20 = v4;
  else
    v20 = v4 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v4);
  v21 = _CocoaArrayWrapper.endIndex.getter(v20);
  swift_bridgeObjectRelease(v4);
  if (v21 < 1)
    goto LABEL_14;
LABEL_7:
  v10 = *(_QWORD *)(v1 + 80);
  v11 = sub_10001D2BC(v4);
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRetain(v10);
  v12 = sub_100025398(v11, v10);
  swift_bridgeObjectRelease(v10);
  v13 = *(_QWORD *)(v1 + 152);
  v14 = *(void **)(v1 + 136);
  if (!*(_QWORD *)(v12 + 16))
  {
    swift_bridgeObjectRelease(v12);
    v19 = v13;
LABEL_19:
    swift_unknownObjectRelease(v19);
    v18 = _swiftEmptyArrayStorage;
    goto LABEL_20;
  }
  v15 = objc_msgSend(*(id *)(v1 + 136), "homes");
  v16 = sub_100026D40();
  v17 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v15, v16);

  swift_bridgeObjectRetain(v12);
  v18 = (_QWORD *)sub_1000259B0(v17, v12);
  swift_bridgeObjectRelease_n(v12, 2);
  swift_bridgeObjectRelease(v17);
  swift_unknownObjectRelease(v13);
LABEL_20:

  v28 = *(_QWORD *)(v1 + 88);
  swift_task_dealloc(*(_QWORD *)(v1 + 104));
  swift_task_dealloc(v28);
  return (*(uint64_t (**)(_QWORD *))(v1 + 8))(v18);
}

uint64_t sub_100026C34(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v5;

  v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_100026C78(uint64_t a1, uint64_t (*a2)(_QWORD))
{
  uint64_t v3;

  v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_100026CB4(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;

  v5 = sub_10000527C(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_100026CF8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10000527C(&qword_1000A5060);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

unint64_t sub_100026D40()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000A5510;
  if (!qword_1000A5510)
  {
    v1 = objc_opt_self(HMHome);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_1000A5510);
  }
  return result;
}

uint64_t sub_100026D7C(id *a1)
{
  uint64_t v1;

  return sub_100022438(a1, *(_QWORD *)(v1 + 16)) & 1;
}

uint64_t sub_100026D98(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v5;

  v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

unint64_t sub_100026DE8()
{
  unint64_t result;

  result = qword_1000A5540;
  if (!qword_1000A5540)
  {
    result = swift_getWitnessTable(&unk_100087520, &type metadata for ToggleIntent);
    atomic_store(result, (unint64_t *)&qword_1000A5540);
  }
  return result;
}

unint64_t sub_100026E30()
{
  unint64_t result;

  result = qword_1000A5548;
  if (!qword_1000A5548)
  {
    result = swift_getWitnessTable(&unk_100087548, &type metadata for ToggleIntent);
    atomic_store(result, (unint64_t *)&qword_1000A5548);
  }
  return result;
}

uint64_t sub_100026E74(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_10008C5EC, 1);
}

uint64_t sub_100026E84(uint64_t a1, uint64_t a2)
{
  _QWORD v3[2];

  v3[0] = a2;
  v3[1] = sub_100026EC4();
  return swift_getOpaqueTypeConformance2(v3, &opaque type descriptor for <<opaque return type of static AppIntent.parameterSummary>>, 1);
}

unint64_t sub_100026EC4()
{
  unint64_t result;

  result = qword_1000A5550;
  if (!qword_1000A5550)
  {
    result = swift_getWitnessTable(&unk_100087490, &type metadata for ToggleIntent);
    atomic_store(result, (unint64_t *)&qword_1000A5550);
  }
  return result;
}

uint64_t sub_100026F08()
{
  uint64_t v0;

  v0 = type metadata accessor for LocalizedStringResource(0);
  sub_10001D27C(v0, qword_1000A7980);
  sub_100014698(v0, (uint64_t)qword_1000A7980);
  return LocalizedStringResource.init(stringLiteral:)(0xD000000000000016, 0x800000010008A7A0);
}

uint64_t sub_100026F68@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  if (qword_1000A4E98 != -1)
    swift_once(&qword_1000A4E98, sub_100026F08);
  v2 = type metadata accessor for LocalizedStringResource(0);
  v3 = sub_100014698(v2, (uint64_t)qword_1000A7980);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 16))(a1, v3, v2);
}

uint64_t sub_100026FE4(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  _QWORD *v5;

  v4 = *v1;
  v5 = (_QWORD *)swift_task_alloc(dword_1000A5574);
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_10001CEBC;
  return sub_10002703C(a1, v4);
}

uint64_t sub_10002703C(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2[91] = a2;
  v2[90] = a1;
  v3 = type metadata accessor for AccessoryAndSceneEntity(0);
  v2[92] = v3;
  v2[93] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v3 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for WidgetTileInfo(0);
  v2[94] = v4;
  v5 = (*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[95] = swift_task_alloc(v5);
  v2[96] = swift_task_alloc(v5);
  v6 = type metadata accessor for Logger(0);
  v2[97] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v2[98] = v7;
  v2[99] = swift_task_alloc((*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_1000270F8, 0, 0);
}

uint64_t sub_1000270F8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  _BOOL4 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  NSObject *v36;
  os_log_type_t v37;
  uint8_t *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;

  v48 = v0 + 704;
  if (qword_1000A4F08 != -1)
    swift_once(&qword_1000A4F08, sub_100053184);
  v1 = *(_QWORD *)(v0 + 792);
  v2 = *(_QWORD *)(v0 + 784);
  v3 = *(_QWORD *)(v0 + 776);
  v4 = *(_QWORD *)(v0 + 728);
  v5 = sub_100014698(v3, (uint64_t)qword_1000A7A80);
  *(_QWORD *)(v0 + 800) = v5;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16))(v1, v5, v3);
  v6 = swift_retain_n(v4, 2);
  v7 = Logger.logObject.getter(v6);
  v8 = static os_log_type_t.default.getter();
  v9 = os_log_type_enabled(v7, v8);
  v10 = *(_QWORD *)(v0 + 792);
  v11 = *(_QWORD *)(v0 + 784);
  v12 = *(_QWORD *)(v0 + 776);
  if (v9)
  {
    v47 = *(_QWORD *)(v0 + 784);
    v13 = *(_QWORD *)(v0 + 768);
    v14 = *(_QWORD *)(v0 + 744);
    v45 = *(_QWORD *)(v0 + 728);
    v46 = *(_QWORD *)(v0 + 736);
    v15 = swift_slowAlloc(22, -1);
    v44 = swift_slowAlloc(64, -1);
    v49 = v44;
    *(_DWORD *)v15 = 136315394;
    *(_QWORD *)(v0 + 704) = sub_100023980(0x286D726F66726570, 0xE900000000000029, &v49);
    v16 = UnsafeMutableRawBufferPointer.copyMemory(from:)(v48, v0 + 712, v15 + 4, v15 + 12);
    *(_WORD *)(v15 + 12) = 2080;
    IntentParameter.wrappedValue.getter(v16);
    sub_100026C34(v14 + *(int *)(v46 + 24), v13, type metadata accessor for WidgetTileInfo);
    sub_100026C78(v14, type metadata accessor for AccessoryAndSceneEntity);
    v17 = sub_10001A0F8();
    v19 = v18;
    sub_100026C78(v13, type metadata accessor for WidgetTileInfo);
    *(_QWORD *)(v0 + 712) = sub_100023980(v17, v19, &v49);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 712, v0 + 720, v15 + 14, v15 + 22);
    swift_bridgeObjectRelease(v19);
    swift_release_n(v45, 2);
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "%s - tileInfo is %s", (uint8_t *)v15, 0x16u);
    swift_arrayDestroy(v44, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v44, -1, -1);
    swift_slowDealloc(v15, -1, -1);

    v20 = (*(uint64_t (**)(uint64_t, uint64_t))(v47 + 8))(v10, v12);
  }
  else
  {
    swift_release_n(*(_QWORD *)(v0 + 728), 2);

    v20 = (*(uint64_t (**)(uint64_t, uint64_t))(v11 + 8))(v10, v12);
  }
  v21 = *(_QWORD *)(v0 + 768);
  v22 = *(_QWORD *)(v0 + 744);
  v23 = *(_QWORD *)(v0 + 736);
  IntentParameter.wrappedValue.getter(v20);
  sub_100026C34(v22 + *(int *)(v23 + 24), v21, type metadata accessor for WidgetTileInfo);
  sub_100026C78(v22, type metadata accessor for AccessoryAndSceneEntity);
  sub_100016974();
  v25 = v24;
  v26 = sub_100026C78(v21, type metadata accessor for WidgetTileInfo);
  if ((v25 & 1) != 0)
  {
    v27 = *(_QWORD *)(v0 + 760);
    v28 = *(_QWORD *)(v0 + 752);
    v29 = *(_QWORD *)(v0 + 744);
    IntentParameter.wrappedValue.getter(v26);
    sub_100026C34(v29 + *(int *)(v23 + 24), v27, type metadata accessor for WidgetTileInfo);
    v30 = sub_100026C78(v29, type metadata accessor for AccessoryAndSceneEntity);
    if (*(unsigned __int8 *)(v27 + *(int *)(v28 + 56) + 8) > 2u)
    {
      v36 = Logger.logObject.getter(v30);
      v37 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v36, v37))
      {
        v38 = (uint8_t *)swift_slowAlloc(12, -1);
        v39 = swift_slowAlloc(32, -1);
        v49 = v39;
        *(_DWORD *)v38 = 136315138;
        *(_QWORD *)(v0 + 696) = sub_100023980(0x286D726F66726570, 0xE900000000000029, &v49);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 696, v48, v38 + 4, v38 + 12);
        _os_log_impl((void *)&_mh_execute_header, v36, v37, "%s - tile is toggled", v38, 0xCu);
        swift_arrayDestroy(v39, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v39, -1, -1);
        swift_slowDealloc(v38, -1, -1);
      }

      v40 = *(_QWORD *)(v0 + 760);
      v41 = *(_QWORD *)(v0 + 728);
      v42 = swift_task_alloc(32);
      *(_QWORD *)(v0 + 816) = v42;
      *(_QWORD *)(v42 + 16) = v41;
      *(_QWORD *)(v42 + 24) = v40;
      v43 = swift_asyncLet_begin(v0 + 16, 0, (char *)&type metadata for () + 8, &unk_1000A5580, v42);
      static IntentResult.result<>()(v43);
      return swift_asyncLet_finish(v0 + 16);
    }
    else
    {
      v31 = (_QWORD *)swift_task_alloc(dword_1000A663C);
      *(_QWORD *)(v0 + 808) = v31;
      *v31 = v0;
      v31[1] = sub_10002764C;
      return sub_100057F9C();
    }
  }
  else
  {
    static IntentResult.result<>()(v26);
    v33 = *(_QWORD *)(v0 + 768);
    v34 = *(_QWORD *)(v0 + 760);
    v35 = *(_QWORD *)(v0 + 744);
    swift_task_dealloc(*(_QWORD *)(v0 + 792));
    swift_task_dealloc(v33);
    swift_task_dealloc(v34);
    swift_task_dealloc(v35);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_10002764C()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 808));
  return swift_task_switch(sub_1000276A0, 0, 0);
}

uint64_t sub_1000276A0(uint64_t a1)
{
  _QWORD *v1;
  NSObject *v2;
  os_log_type_t v3;
  uint8_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  v2 = Logger.logObject.getter(a1);
  v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    v4 = (uint8_t *)swift_slowAlloc(12, -1);
    v5 = swift_slowAlloc(32, -1);
    v11 = v5;
    *(_DWORD *)v4 = 136315138;
    v1[87] = sub_100023980(0x286D726F66726570, 0xE900000000000029, &v11);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 87, v1 + 88, v4 + 4, v4 + 12);
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "%s - tile is toggled", v4, 0xCu);
    swift_arrayDestroy(v5, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v5, -1, -1);
    swift_slowDealloc(v4, -1, -1);
  }

  v6 = v1[95];
  v7 = v1[91];
  v8 = swift_task_alloc(32);
  v1[102] = v8;
  *(_QWORD *)(v8 + 16) = v7;
  *(_QWORD *)(v8 + 24) = v6;
  v9 = swift_asyncLet_begin(v1 + 2, 0, (char *)&type metadata for () + 8, &unk_1000A5580, v8);
  static IntentResult.result<>()(v9);
  return swift_asyncLet_finish(v1 + 2);
}

uint64_t sub_100027838()
{
  return swift_task_switch(sub_10002784C, 0, 0);
}

uint64_t sub_10002784C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *(_QWORD *)(v0 + 760);
  swift_task_dealloc(*(_QWORD *)(v0 + 816));
  sub_100026C78(v1, type metadata accessor for WidgetTileInfo);
  v2 = *(_QWORD *)(v0 + 768);
  v3 = *(_QWORD *)(v0 + 760);
  v4 = *(_QWORD *)(v0 + 744);
  swift_task_dealloc(*(_QWORD *)(v0 + 792));
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000278C8@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = sub_1000279BC();
  *a1 = result;
  return result;
}

uint64_t sub_1000278EC(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100026EC4();
  return static AppIntent.persistentIdentifier.getter(a1, v2);
}

ValueMetadata *type metadata accessor for ToggleIntent()
{
  return &type metadata for ToggleIntent;
}

uint64_t sub_100027924(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v5;

  v5 = (_QWORD *)swift_task_alloc(dword_1000A558C);
  *(_QWORD *)(v3 + 16) = v5;
  *v5 = v3;
  v5[1] = sub_100027970;
  return sub_100027FE8(a3);
}

uint64_t sub_100027970()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  swift_task_dealloc(*(_QWORD *)(*v0 + 16));
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t sub_1000279BC()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  void (*v21)(char *, uint64_t, uint64_t, uint64_t);
  unint64_t v22;
  uint64_t v24;
  uint64_t v25;

  v25 = type metadata accessor for InputConnectionBehavior(0);
  v0 = *(_QWORD *)(v25 - 8);
  __chkstk_darwin(v25);
  v2 = (char *)&v24 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = sub_10000527C(&qword_1000A5310);
  v4 = __chkstk_darwin(v3);
  v6 = (char *)&v24 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v8 = (char *)&v24 - v7;
  v9 = sub_10000527C(&qword_1000A5560);
  __chkstk_darwin(v9);
  v11 = (char *)&v24 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_10000527C(&qword_1000A5320);
  __chkstk_darwin(v12);
  v14 = (char *)&v24 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for LocalizedStringResource(0);
  v16 = *(_QWORD *)(v15 - 8);
  __chkstk_darwin(v15);
  v18 = (char *)&v24 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000527C(&qword_1000A5568);
  LocalizedStringResource.init(stringLiteral:)(0xD000000000000016, 0x800000010008A760);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v16 + 56))(v14, 1, 1, v15);
  v19 = type metadata accessor for AccessoryAndSceneEntity(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 56))(v11, 1, 1, v19);
  v20 = type metadata accessor for IntentDialog(0);
  v21 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 56);
  v21(v8, 1, 1, v20);
  v21(v6, 1, 1, v20);
  (*(void (**)(char *, _QWORD, uint64_t))(v0 + 104))(v2, enum case for InputConnectionBehavior.default(_:), v25);
  v22 = sub_100027F34();
  return IntentParameter<>.init(title:description:default:requestValueDialog:requestDisambiguationDialog:inputConnectionBehavior:)(v18, v14, v11, v8, v6, v2, v22);
}

uint64_t sub_100027C1C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  void (*v26)(char *, uint64_t, uint64_t, uint64_t);
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;

  v37 = a1;
  v1 = type metadata accessor for AccessoryAndSceneEntity(0);
  v32 = *(_QWORD *)(v1 - 8);
  v33 = v1;
  v2 = __chkstk_darwin(v1);
  v36 = (uint64_t)&v32 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v2);
  v5 = (char *)&v32 - v4;
  v6 = type metadata accessor for InputConnectionBehavior(0);
  v34 = *(_QWORD *)(v6 - 8);
  v35 = v6;
  __chkstk_darwin(v6);
  v8 = (char *)&v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_10000527C(&qword_1000A5310);
  v10 = __chkstk_darwin(v9);
  v12 = (char *)&v32 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v14 = (char *)&v32 - v13;
  v15 = sub_10000527C(&qword_1000A5560);
  __chkstk_darwin(v15);
  v17 = (char *)&v32 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = sub_10000527C(&qword_1000A5320);
  __chkstk_darwin(v18);
  v20 = (char *)&v32 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = type metadata accessor for LocalizedStringResource(0);
  v22 = *(_QWORD *)(v21 - 8);
  __chkstk_darwin(v21);
  v24 = (char *)&v32 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000527C(&qword_1000A5568);
  LocalizedStringResource.init(stringLiteral:)(0xD000000000000016, 0x800000010008A760);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v22 + 56))(v20, 1, 1, v21);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v32 + 56))(v17, 1, 1, v33);
  v25 = type metadata accessor for IntentDialog(0);
  v26 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 56);
  v26(v14, 1, 1, v25);
  v26(v12, 1, 1, v25);
  (*(void (**)(char *, _QWORD, uint64_t))(v34 + 104))(v8, enum case for InputConnectionBehavior.default(_:), v35);
  v27 = sub_100027F34();
  v28 = IntentParameter<>.init(title:description:default:requestValueDialog:requestDisambiguationDialog:inputConnectionBehavior:)(v24, v20, v17, v14, v12, v8, v27);
  v29 = v37;
  sub_100026C34(v37, (uint64_t)v5, type metadata accessor for AccessoryAndSceneEntity);
  v30 = v36;
  sub_100026C34((uint64_t)v5, v36, type metadata accessor for AccessoryAndSceneEntity);
  swift_retain(v28);
  IntentParameter.wrappedValue.setter(v30);
  sub_100026C78((uint64_t)v5, type metadata accessor for AccessoryAndSceneEntity);
  swift_release(v28);
  sub_100026C78(v29, type metadata accessor for AccessoryAndSceneEntity);
  return v28;
}

unint64_t sub_100027F34()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000A53C8[0];
  if (!qword_1000A53C8[0])
  {
    v1 = type metadata accessor for AccessoryAndSceneEntity(255);
    result = swift_getWitnessTable(&unk_100087068, v1);
    atomic_store(result, qword_1000A53C8);
  }
  return result;
}

uint64_t sub_100027F7C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;

  v2 = *(_QWORD *)(v0 + 24);
  v3 = (_QWORD *)swift_task_alloc(dword_1000A557C);
  *(_QWORD *)(v1 + 16) = v3;
  *v3 = v1;
  v3[1] = sub_10001CEBC;
  v4 = (_QWORD *)swift_task_alloc(dword_1000A558C);
  v3[2] = v4;
  *v4 = v3;
  v4[1] = sub_100027970;
  return sub_100027FE8(v2);
}

uint64_t sub_100027FE8(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1[15] = a1;
  v2 = type metadata accessor for WidgetTileInfo(0);
  v1[16] = v2;
  v3 = (*(_QWORD *)(*(_QWORD *)(v2 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v1[17] = swift_task_alloc(v3);
  v1[18] = swift_task_alloc(v3);
  v4 = type metadata accessor for ServiceKind(0);
  v1[19] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v1[20] = v5;
  v1[21] = swift_task_alloc((*(_QWORD *)(v5 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_10002807C, 0, 0);
}

uint64_t sub_10002807C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  NSObject *v18;
  os_log_type_t v19;
  _BOOL4 v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v42;
  os_log_type_t type;
  uint64_t v44;
  int v45;
  uint64_t v46;
  _BYTE *v47;
  uint64_t v48;
  uint64_t v49;

  *(_QWORD *)(v0 + 88) = 0;
  *(_WORD *)(v0 + 192) = 256;
  v47 = (_BYTE *)(v0 + 193);
  v1 = *(_QWORD *)(v0 + 128);
  v2 = *(_QWORD *)(v0 + 120);
  v3 = 0xE000000000000000;
  *(_QWORD *)(v0 + 96) = 0xE000000000000000;
  v4 = v2 + *(int *)(v1 + 56);
  v48 = v0 + 192;
  if (*(_BYTE *)(v4 + 8) == 2)
  {
    v46 = 0;
    *v47 = 0;
    *(_BYTE *)(v0 + 192) = 1;
    v12 = 1;
    v45 = 0;
  }
  else if (*(_BYTE *)(v4 + 8))
  {
    v45 = 1;
    v12 = 0;
    v46 = 0;
  }
  else
  {
    v6 = *(_QWORD *)(v0 + 160);
    v5 = *(_QWORD *)(v0 + 168);
    v7 = *(_QWORD *)(v0 + 152);
    v8 = *(id *)v4;
    v9 = HMService.serviceKind.getter(v8);
    v10 = ServiceKind.localizedDescription.getter(v9);
    v3 = v11;

    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v5, v7);
    v12 = 0;
    v46 = v10;
    *(_QWORD *)(v0 + 88) = v10;
    *(_QWORD *)(v0 + 96) = v3;
    v45 = 1;
  }
  if (qword_1000A4F08 != -1)
    swift_once(&qword_1000A4F08, sub_100053184);
  v13 = *(_QWORD *)(v0 + 136);
  v14 = *(_QWORD *)(v0 + 144);
  v15 = *(_QWORD *)(v0 + 120);
  v16 = type metadata accessor for Logger(0);
  sub_100014698(v16, (uint64_t)qword_1000A7A80);
  sub_100026C34(v15, v14, type metadata accessor for WidgetTileInfo);
  sub_100026C34(v15, v13, type metadata accessor for WidgetTileInfo);
  v17 = swift_bridgeObjectRetain_n(v3, 2);
  v18 = Logger.logObject.getter(v17);
  v19 = static os_log_type_t.error.getter();
  v20 = os_log_type_enabled(v18, v19);
  v22 = *(_QWORD *)(v0 + 136);
  v21 = *(_QWORD *)(v0 + 144);
  if (v20)
  {
    v42 = *(_QWORD *)(v0 + 128);
    type = v19;
    v23 = swift_slowAlloc(46, -1);
    v44 = swift_slowAlloc(64, -1);
    v49 = v44;
    *(_DWORD *)v23 = 136316418;
    *(_QWORD *)(v0 + 104) = sub_100023980(0xD00000000000001FLL, 0x800000010008A780, &v49);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 104, v0 + 112, v23 + 4, v23 + 12);
    *(_WORD *)(v23 + 12) = 1024;
    *(_DWORD *)(v0 + 180) = v45;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 180, v0 + 184, v23 + 14, v23 + 18);
    *(_WORD *)(v23 + 18) = 2080;
    swift_bridgeObjectRetain(v3);
    *(_QWORD *)(v0 + 112) = sub_100023980(v46, v3, &v49);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 112, v0 + 120, v23 + 20, v23 + 28);
    swift_bridgeObjectRelease_n(v3, 3);
    *(_WORD *)(v23 + 28) = 1024;
    *(_DWORD *)(v0 + 184) = v12;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 184, v0 + 188, v23 + 30, v23 + 34);
    *(_WORD *)(v23 + 34) = 1024;
    v24 = *(unsigned __int8 *)(v21 + *(int *)(v42 + 52));
    sub_100026C78(v21, type metadata accessor for WidgetTileInfo);
    *(_DWORD *)(v0 + 188) = v24;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 188, v48, v23 + 36, v23 + 40);
    *(_WORD *)(v23 + 40) = 1024;
    v25 = sub_10001709C() & 1;
    sub_100026C78(v22, type metadata accessor for WidgetTileInfo);
    *(_DWORD *)(v0 + 176) = v25;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 176, v0 + 180, v23 + 42, v23 + 46);
    _os_log_impl((void *)&_mh_execute_header, v18, type, "%s - isAccessory:%{BOOL}d accessoryCategoryType:%s isScene:%{BOOL}d isReachable:%{BOOL}d isActivated:%{BOOL}d", (uint8_t *)v23, 0x2Eu);
    swift_arrayDestroy(v44, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v44, -1, -1);
    swift_slowDealloc(v23, -1, -1);
  }
  else
  {
    sub_100026C78(*(_QWORD *)(v0 + 136), type metadata accessor for WidgetTileInfo);
    sub_100026C78(v21, type metadata accessor for WidgetTileInfo);
    swift_bridgeObjectRelease_n(v3, 2);
  }

  v26 = *(_QWORD *)(v0 + 168);
  v27 = *(_QWORD *)(v0 + 136);
  v28 = *(_QWORD *)(v0 + 144);
  v29 = *(_QWORD *)(v0 + 120);
  v30 = *(_QWORD *)(v0 + 128);
  swift_beginAccess(v47, v0 + 64, 0, 0);
  v31 = *(unsigned __int8 *)(v0 + 193);
  swift_beginAccess(v0 + 88, v0 + 40, 0, 0);
  v32 = *(_QWORD *)(v0 + 88);
  v33 = *(_QWORD *)(v0 + 96);
  swift_beginAccess(v48, v0 + 16, 0, 0);
  v34 = *(unsigned __int8 *)(v0 + 192);
  LODWORD(v30) = *(unsigned __int8 *)(v29 + *(int *)(v30 + 52));
  v35 = sub_10001709C();
  v36 = 256;
  if (!(_DWORD)v30)
    v36 = 0;
  v37 = 0x10000;
  if ((v35 & 1) == 0)
    v37 = 0;
  v38 = v36 | v34 | v37 | 0x2000000;
  v39 = type metadata accessor for WidgetAnalyticsEvent();
  v40 = swift_allocObject(v39, 65, 7);
  *(_BYTE *)(v40 + 16) = 1;
  *(_QWORD *)(v40 + 24) = v31;
  *(_QWORD *)(v40 + 32) = v32;
  *(_QWORD *)(v40 + 40) = v33;
  *(_QWORD *)(v40 + 48) = v38;
  *(_QWORD *)(v40 + 56) = 0;
  *(_BYTE *)(v40 + 64) = 1;
  sub_100028588(0, 0, 1);
  sub_100053D0C(v40);
  swift_release(v40);
  swift_task_dealloc(v26);
  swift_task_dealloc(v28);
  swift_task_dealloc(v27);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100028588(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;

  if (a3 != 1)
    return swift_bridgeObjectRelease(a3);
  return result;
}

unint64_t sub_1000285A0()
{
  unint64_t result;

  result = qword_1000A5590;
  if (!qword_1000A5590)
  {
    result = swift_getWitnessTable(&unk_1000875D0, &type metadata for RecommendedItemIntent);
    atomic_store(result, (unint64_t *)&qword_1000A5590);
  }
  return result;
}

unint64_t sub_1000285E8()
{
  unint64_t result;

  result = qword_1000A5598;
  if (!qword_1000A5598)
  {
    result = swift_getWitnessTable(&unk_100087660, &type metadata for RecommendedItemIntent);
    atomic_store(result, (unint64_t *)&qword_1000A5598);
  }
  return result;
}

unint64_t sub_100028630()
{
  unint64_t result;

  result = qword_1000A55A0;
  if (!qword_1000A55A0)
  {
    result = swift_getWitnessTable(&unk_100087688, &type metadata for RecommendedItemIntent);
    atomic_store(result, (unint64_t *)&qword_1000A55A0);
  }
  return result;
}

unint64_t sub_100028678()
{
  unint64_t result;

  result = qword_1000A55A8;
  if (!qword_1000A55A8)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Never, &type metadata for Never);
    atomic_store(result, (unint64_t *)&qword_1000A55A8);
  }
  return result;
}

uint64_t sub_1000286BC(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_10008C630, 1);
}

uint64_t sub_1000286CC()
{
  return IntentParameter.wrappedValue.getter();
}

uint64_t sub_1000286EC()
{
  uint64_t v0;

  v0 = type metadata accessor for LocalizedStringResource(0);
  sub_10001D27C(v0, qword_1000A7998);
  sub_100014698(v0, (uint64_t)qword_1000A7998);
  return LocalizedStringResource.init(stringLiteral:)(0xD000000000000010, 0x800000010008A820);
}

uint64_t sub_10002874C()
{
  return IntentParameter.projectedValue.getter();
}

uint64_t sub_10002876C()
{
  return IntentParameter.projectedValue.getter();
}

uint64_t sub_10002878C()
{
  return IntentParameter.projectedValue.getter();
}

uint64_t sub_1000287AC@<X0>(uint64_t a1@<X8>)
{
  uint64_t HasValueComparisonOperator;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t KeyPath;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(char *, uint64_t);
  _QWORD v20[2];

  v20[1] = a1;
  HasValueComparisonOperator = type metadata accessor for HasValueComparisonOperator(0);
  v2 = *(_QWORD *)(HasValueComparisonOperator - 8);
  __chkstk_darwin(HasValueComparisonOperator);
  v4 = (char *)v20 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_10000527C(&qword_1000A55F8);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = __chkstk_darwin(v5);
  v9 = (char *)v20 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v11 = (char *)v20 - v10;
  KeyPath = swift_getKeyPath(&unk_1000876C8);
  (*(void (**)(char *, _QWORD, uint64_t))(v2 + 104))(v4, enum case for HasValueComparisonOperator.hasNoValue(_:), HasValueComparisonOperator);
  v13 = sub_10000527C(&qword_1000A5600);
  v14 = sub_1000285A0();
  v15 = sub_1000229D8(&qword_1000A5610, &qword_1000A5600, (uint64_t)&protocol conformance descriptor for IntentParameterSummary<A>);
  v16 = sub_1000229D8(&qword_1000A5620, &qword_1000A55D8, (uint64_t)&protocol conformance descriptor for IntentParameter<A>);
  ParameterSummaryWhenCondition.init<A>(_:_:_:otherwise:)(KeyPath, v4, sub_1000289DC, 0, sub_100028AE4, 0, v13, v13, v14, v15, v15, v16);
  v17 = sub_1000229D8(&qword_1000A5608, &qword_1000A55F8, (uint64_t)&protocol conformance descriptor for ParameterSummaryWhenCondition<A, B, C>);
  static ParameterSummaryBuilder.buildExpression<A>(_:)(v9, &type metadata for RecommendedItemIntent, v5, v17);
  v18 = *(void (**)(char *, uint64_t))(v6 + 8);
  v18(v9, v5);
  static ParameterSummaryBuilder.buildBlock<A>(_:)(v11, &type metadata for RecommendedItemIntent, v5, v17);
  return ((uint64_t (*)(char *, uint64_t))v18)(v11, v5);
}

uint64_t sub_1000289B4@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = IntentParameter.projectedValue.getter();
  *a1 = result;
  return result;
}

uint64_t sub_1000289DC()
{
  return sub_100028AF0((uint64_t)sub_1000289E8);
}

uint64_t sub_1000289E8()
{
  uint64_t KeyPath;
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;

  KeyPath = swift_getKeyPath(&unk_1000876F0);
  v1 = sub_1000285A0();
  v2 = static IntentParameterSummary.ParameterKeyPathsBuilder.buildExpression<A>(_:)(KeyPath, v1);
  swift_release(KeyPath);
  v3 = swift_getKeyPath(&unk_100087718);
  swift_retain(v2);
  v4 = static IntentParameterSummary.ParameterKeyPathsBuilder.buildExpression<A>(_:)(v3, v1);
  swift_release(v3);
  v5 = sub_10000527C(&qword_1000A5200);
  v6 = swift_allocObject(v5, 48, 7);
  *(_OWORD *)(v6 + 16) = xmmword_100087580;
  *(_QWORD *)(v6 + 32) = v2;
  *(_QWORD *)(v6 + 40) = v4;
  v9 = v6;
  specialized Array._endMutation()(v6);
  swift_retain(v4);
  v7 = static IntentParameterSummary.ParameterKeyPathsBuilder.buildBlock(_:)(v9, &type metadata for RecommendedItemIntent, v1);
  swift_release(v4);
  swift_release(v2);
  swift_bridgeObjectRelease(v9);
  return v7;
}

uint64_t sub_100028AE4()
{
  return sub_100028AF0((uint64_t)sub_100028C14);
}

uint64_t sub_100028AF0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  unint64_t v9;
  uint64_t v10;
  void (*v11)(char *, uint64_t);
  uint64_t v13;

  v2 = sub_10000527C(&qword_1000A5600);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = __chkstk_darwin(v2);
  v6 = (char *)&v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v8 = (char *)&v13 - v7;
  v9 = sub_1000285A0();
  IntentParameterSummary.init(_:)(a1, 0, &type metadata for RecommendedItemIntent, v9);
  v10 = sub_1000229D8(&qword_1000A5610, &qword_1000A5600, (uint64_t)&protocol conformance descriptor for IntentParameterSummary<A>);
  static ParameterSummaryBuilder.buildExpression<A>(_:)(v6, &type metadata for RecommendedItemIntent, v2, v10);
  v11 = *(void (**)(char *, uint64_t))(v3 + 8);
  v11(v6, v2);
  static ParameterSummaryBuilder.buildBlock<A>(_:)(v8, &type metadata for RecommendedItemIntent, v2, v10);
  return ((uint64_t (*)(char *, uint64_t))v11)(v8, v2);
}

uint64_t sub_100028C14()
{
  uint64_t KeyPath;
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  KeyPath = swift_getKeyPath(&unk_1000876F0);
  v1 = sub_1000285A0();
  v2 = static IntentParameterSummary.ParameterKeyPathsBuilder.buildExpression<A>(_:)(KeyPath, v1);
  swift_release(KeyPath);
  v3 = swift_getKeyPath(&unk_1000876C8);
  swift_retain(v2);
  v4 = static IntentParameterSummary.ParameterKeyPathsBuilder.buildExpression<A>(_:)(v3, v1);
  swift_release(v3);
  v5 = swift_getKeyPath(&unk_100087718);
  swift_retain(v4);
  v6 = static IntentParameterSummary.ParameterKeyPathsBuilder.buildExpression<A>(_:)(v5, v1);
  swift_release(v5);
  v7 = sub_10000527C(&qword_1000A5200);
  v8 = swift_allocObject(v7, 56, 7);
  *(_OWORD *)(v8 + 16) = xmmword_100087590;
  *(_QWORD *)(v8 + 32) = v2;
  *(_QWORD *)(v8 + 40) = v4;
  *(_QWORD *)(v8 + 48) = v6;
  v11 = v8;
  specialized Array._endMutation()(v8);
  swift_retain(v6);
  v9 = static IntentParameterSummary.ParameterKeyPathsBuilder.buildBlock(_:)(v11, &type metadata for RecommendedItemIntent, v1);
  swift_release(v6);
  swift_release(v4);
  swift_release(v2);
  swift_bridgeObjectRelease(v11);
  return v9;
}

uint64_t sub_100028D54()
{
  return sub_100028AF0((uint64_t)sub_100028D60);
}

uint64_t sub_100028D60()
{
  uint64_t KeyPath;
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  KeyPath = swift_getKeyPath(&unk_1000876F0);
  v1 = sub_1000285A0();
  v2 = static IntentParameterSummary.ParameterKeyPathsBuilder.buildExpression<A>(_:)(KeyPath, v1);
  swift_release(KeyPath);
  v3 = sub_10000527C(&qword_1000A5200);
  v4 = swift_allocObject(v3, 40, 7);
  *(_OWORD *)(v4 + 16) = xmmword_100086CF0;
  *(_QWORD *)(v4 + 32) = v2;
  v7 = v4;
  specialized Array._endMutation()(v4);
  swift_retain(v2);
  v5 = static IntentParameterSummary.ParameterKeyPathsBuilder.buildBlock(_:)(v7, &type metadata for RecommendedItemIntent, v1);
  swift_release(v2);
  swift_bridgeObjectRelease(v7);
  return v5;
}

uint64_t sub_100028E24@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  if (qword_1000A4EA0 != -1)
    swift_once(&qword_1000A4EA0, sub_1000286EC);
  v2 = type metadata accessor for LocalizedStringResource(0);
  v3 = sub_100014698(v2, (uint64_t)qword_1000A7998);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 16))(a1, v3, v2);
}

uint64_t sub_100028E94(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t KeyPath;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  char v15;

  v3 = type metadata accessor for EquatableComparisonOperator(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  KeyPath = swift_getKeyPath(&unk_1000876F0);
  (*(void (**)(char *, _QWORD, uint64_t))(v4 + 104))(v6, enum case for EquatableComparisonOperator.equalTo(_:), v3);
  v15 = 0;
  v8 = sub_10000527C(&qword_1000A55F8);
  v9 = sub_10000527C(&qword_1000A5600);
  v10 = sub_1000229D8(&qword_1000A5608, &qword_1000A55F8, (uint64_t)&protocol conformance descriptor for ParameterSummaryWhenCondition<A, B, C>);
  v11 = sub_1000229D8(&qword_1000A5610, &qword_1000A5600, (uint64_t)&protocol conformance descriptor for IntentParameterSummary<A>);
  v12 = sub_1000229D8(&qword_1000A5618, &qword_1000A55D0, (uint64_t)&protocol conformance descriptor for IntentParameter<A>);
  return ParameterSummaryWhenCondition.init<A, B>(_:_:_:_:otherwise:)(KeyPath, v6, &v15, sub_1000287AC, 0, sub_100028D54, 0, v8, v9, &type metadata for Bool, a2, v10, v11, &protocol witness table for Bool, v12);
}

uint64_t sub_100029010(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v4;
  unint64_t v5;

  v4 = (_QWORD *)swift_task_alloc(async function pointer to WidgetConfigurationIntent.perform()[1]);
  *(_QWORD *)(v2 + 16) = v4;
  v5 = sub_100029A04();
  *v4 = v2;
  v4[1] = sub_100029074;
  return WidgetConfigurationIntent.perform()(a2, v5);
}

uint64_t sub_100029074()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t result;

  v2 = *(_QWORD *)(*v1 + 16);
  v3 = *v1;
  result = swift_task_dealloc(v2);
  if (v0)
    return (*(uint64_t (**)(void))(v3 + 8))();
  return result;
}

uint64_t sub_1000290D0@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;

  result = sub_100029338();
  *a1 = result;
  a1[1] = v3;
  a1[2] = v4;
  return result;
}

uint64_t sub_1000290F8(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000285A0();
  return static AppIntent.persistentIdentifier.getter(a1, v2);
}

uint64_t destroy for RecommendedItemIntent(_QWORD *a1)
{
  swift_release(*a1);
  swift_release(a1[1]);
  return swift_release(a1[2]);
}

uint64_t *_s10HomeWidget21RecommendedItemIntentVwCP_0(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *a2;
  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  v5 = a2[2];
  a1[2] = v5;
  swift_retain(v3);
  swift_retain(v4);
  swift_retain(v5);
  return a1;
}

uint64_t *assignWithCopy for RecommendedItemIntent(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v4 = *a2;
  v5 = *a1;
  *a1 = *a2;
  swift_retain(v4);
  swift_release(v5);
  v6 = a2[1];
  v7 = a1[1];
  a1[1] = v6;
  swift_retain(v6);
  swift_release(v7);
  v8 = a2[2];
  v9 = a1[2];
  a1[2] = v8;
  swift_retain(v8);
  swift_release(v9);
  return a1;
}

__n128 initializeWithTake for RecommendedItemIntent(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  a1[1].n128_u64[0] = a2[1].n128_u64[0];
  *a1 = result;
  return result;
}

_QWORD *assignWithTake for RecommendedItemIntent(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  swift_release(*a1);
  v4 = a1[1];
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_release(v4);
  v5 = a1[2];
  a1[2] = *(_QWORD *)(a2 + 16);
  swift_release(v5);
  return a1;
}

uint64_t getEnumTagSinglePayload for RecommendedItemIntent(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 24))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for RecommendedItemIntent(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 24) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 24) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for RecommendedItemIntent()
{
  return &type metadata for RecommendedItemIntent;
}

uint64_t sub_10002930C()
{
  return sub_1000229D8(&qword_1000A55B8, &qword_1000A55C0, (uint64_t)&protocol conformance descriptor for ParameterSummaryWhenCondition<A, B, C>);
}

uint64_t sub_100029338()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  void (*v31)(char *, uint64_t, uint64_t, uint64_t);
  char *v32;
  char *v33;
  char *v34;
  char *v35;
  uint64_t v36;
  char *v37;
  char *v38;
  uint64_t v39;
  char *v40;
  char *v41;
  char *v42;
  char *v43;
  unint64_t v44;
  uint64_t v45;
  char *v46;
  char *v47;
  uint64_t KeyPath;
  char *v49;
  unint64_t v50;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  char *v55;
  char *v56;
  uint64_t v57;
  char *v58;
  char *v59;
  void (*v60)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v61;
  unsigned int v62;
  uint64_t v63;
  unint64_t v64;
  unsigned int v65;
  void (*v66)(char *);
  uint64_t v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  _QWORD v71[3];

  v0 = sub_10000527C(&qword_1000A54B8);
  __chkstk_darwin(v0);
  v59 = (char *)&v52 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v69 = type metadata accessor for InputConnectionBehavior(0);
  v63 = *(_QWORD *)(v69 - 8);
  __chkstk_darwin(v69);
  v68 = (char *)&v52 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = sub_10000527C(&qword_1000A5310);
  v4 = __chkstk_darwin(v3);
  v58 = (char *)&v52 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v56 = (char *)&v52 - v6;
  v7 = sub_10000527C(&qword_1000A55C8);
  __chkstk_darwin(v7);
  v9 = (char *)&v52 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_10000527C(&qword_1000A5320);
  __chkstk_darwin(v10);
  v12 = (char *)&v52 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for LocalizedStringResource.BundleDescription(0);
  v14 = *(_QWORD *)(v13 - 8);
  v67 = v13;
  __chkstk_darwin(v13);
  v16 = (char *)&v52 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = type metadata accessor for Locale(0);
  __chkstk_darwin(v17);
  v18 = type metadata accessor for String.LocalizationValue(0);
  __chkstk_darwin(v18);
  v20 = (char *)&v52 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = type metadata accessor for LocalizedStringResource(0);
  v22 = *(_QWORD *)(v21 - 8);
  v61 = v21;
  v23 = __chkstk_darwin(v21);
  v55 = (char *)&v52 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v23);
  v26 = (char *)&v52 - v25;
  v57 = sub_10000527C(&qword_1000A55D0);
  v27 = String.LocalizationValue.init(stringLiteral:)(0x6E656D6D6F636552, 0xEB00000000646564);
  static Locale.current.getter(v27);
  v65 = enum case for LocalizedStringResource.BundleDescription.main(_:);
  v66 = *(void (**)(char *))(v14 + 104);
  v66(v16);
  v64 = 0x800000010008A7C0;
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v20, 0xD00000000000001ALL);
  v60 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v22 + 56);
  v28 = v12;
  v60(v12, 1, 1, v21);
  LOBYTE(v71[0]) = 1;
  v29 = type metadata accessor for Bool.IntentDisplayName(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v29 - 8) + 56))(v9, 1, 1, v29);
  v30 = type metadata accessor for IntentDialog(0);
  v31 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v30 - 8) + 56);
  v32 = v56;
  v31(v56, 1, 1, v30);
  v62 = enum case for InputConnectionBehavior.default(_:);
  v63 = *(_QWORD *)(v63 + 104);
  v33 = v68;
  ((void (*)(char *))v63)(v68);
  v34 = v26;
  v35 = v32;
  v57 = IntentParameter<>.init(title:description:default:displayName:requestValueDialog:inputConnectionBehavior:)(v34, v28, v71, v9, v32, v33);
  v54 = sub_10000527C(&qword_1000A55D8);
  v36 = String.LocalizationValue.init(stringLiteral:)(0xD000000000000010, 0x800000010008A7E0);
  static Locale.current.getter(v36);
  v53 = v16;
  ((void (*)(char *, _QWORD, uint64_t))v66)(v16, v65, v67);
  v37 = v55;
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v20, 0xD00000000000001ALL);
  v38 = v28;
  v60(v28, 1, 1, v61);
  v39 = type metadata accessor for HomeEntity(0);
  v40 = v59;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v39 - 8) + 56))(v59, 1, 1, v39);
  v41 = v35;
  v31(v35, 1, 1, v30);
  v42 = v58;
  v31(v58, 1, 1, v30);
  v43 = v68;
  ((void (*)(char *, _QWORD, uint64_t))v63)(v68, v62, v69);
  v44 = sub_100029994();
  v59 = (char *)IntentParameter<>.init(title:description:default:requestValueDialog:requestDisambiguationDialog:inputConnectionBehavior:)(v37, v38, v40, v41, v42, v43, v44);
  v54 = sub_10000527C(&qword_1000A55E8);
  v45 = String.LocalizationValue.init(stringLiteral:)(0xD000000000000016, 0x800000010008A800);
  static Locale.current.getter(v45);
  ((void (*)(char *, _QWORD, uint64_t))v66)(v53, v65, v67);
  v46 = v37;
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v20, 0xD00000000000001ALL);
  v60(v38, 1, 1, v61);
  v71[0] = 0;
  v47 = v41;
  v31(v41, 1, 1, v30);
  v31(v42, 1, 1, v30);
  sub_10000527C(&qword_1000A5528);
  KeyPath = swift_getKeyPath(&unk_1000876C8);
  v70 = IntentParameterDependency.__allocating_init<A, B>(_:)(KeyPath);
  v49 = v68;
  ((void (*)(char *, _QWORD, uint64_t))v63)(v68, v62, v69);
  v50 = sub_10001D998();
  IntentParameter<>.init<A>(title:description:default:requestValueDialog:requestDisambiguationDialog:inputConnectionBehavior:query:)(v46, v38, v71, v47, v42, v49, &v70, &type metadata for AccessoryAndSceneQuery, v50);
  return v57;
}

unint64_t sub_100029994()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000A55E0;
  if (!qword_1000A55E0)
  {
    v1 = type metadata accessor for HomeEntity(255);
    result = swift_getWitnessTable(&unk_100087740, v1);
    atomic_store(result, (unint64_t *)&qword_1000A55E0);
  }
  return result;
}

uint64_t sub_1000299DC@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = IntentParameter.projectedValue.getter();
  *a1 = result;
  return result;
}

unint64_t sub_100029A04()
{
  unint64_t result;

  result = qword_1000A55F0;
  if (!qword_1000A55F0)
  {
    result = swift_getWitnessTable(&unk_1000875A0, &type metadata for RecommendedItemIntent);
    atomic_store(result, (unint64_t *)&qword_1000A55F0);
  }
  return result;
}

uint64_t sub_100029A48@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = IntentParameter.projectedValue.getter();
  *a1 = result;
  return result;
}

uint64_t sub_100029A70@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = IntentParameter.projectedValue.getter();
  *a1 = result;
  return result;
}

uint64_t sub_100029A98()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;

  v0 = sub_10000527C(&qword_1000A5060);
  __chkstk_darwin(v0);
  v2 = (char *)&v7 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = type metadata accessor for UUID(0);
  sub_10001D27C(v3, qword_1000A79B0);
  v4 = sub_100014698(v3, (uint64_t)qword_1000A79B0);
  UUID.init(uuidString:)(0xD000000000000024, 0x800000010008A890);
  v5 = *(_QWORD *)(v3 - 8);
  result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v5 + 48))(v2, 1, v3);
  if ((_DWORD)result != 1)
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v5 + 32))(v4, v2, v3);
  __break(1u);
  return result;
}

uint64_t sub_100029B78()
{
  uint64_t result;

  result = sub_100029B94();
  qword_1000A79D0 = result;
  return result;
}

uint64_t sub_100029B94()
{
  uint64_t v0;
  char *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  Class isa;
  id v27;
  uint64_t v28;
  id v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  char v37;
  uint64_t v38;
  unint64_t v39;
  char v40;
  unint64_t v41;
  char v42;
  unint64_t v43;
  char v44;
  unint64_t v45;
  char v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  char v51;
  unint64_t v52;
  id v53;
  unint64_t v54;
  char v55;
  id v56;
  unint64_t v57;
  char v58;
  unint64_t v59;
  char v60;
  id v61;
  void (*v62)(char *, char *, uint64_t);
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  void (*v67)(char *, _QWORD, uint64_t);
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v77;
  unint64_t v78;
  unint64_t v79;
  uint64_t result;
  id v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  char *v87;
  uint64_t v88;
  uint64_t v89;
  unint64_t v90;
  uint64_t v91;
  char *v92;
  unsigned int v93;
  unsigned int v94;
  uint64_t v95;
  char *v96;
  uint64_t v97;
  char *v98;
  uint64_t v99;
  char *v100;
  char *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  char *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  unsigned int v113;
  void (*v114)(char *, char *, uint64_t);
  _QWORD *v115;
  char *v116;
  char *v117;
  uint64_t v118;
  uint64_t v119;
  id v120;
  id v121[2];
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  __int128 v130;
  __int128 v131;
  __int128 v132;

  v105 = type metadata accessor for AccessoryAndSceneEntity(0);
  v104 = *(_QWORD *)(v105 - 8);
  __chkstk_darwin(v105);
  v1 = (char *)&v85 - ((v0 + 15) & 0xFFFFFFFFFFFFFFF0);
  v103 = type metadata accessor for StaticRenderingMode(0);
  v102 = *(_QWORD *)(v103 - 8);
  v2 = __chkstk_darwin(v103);
  v101 = (char *)&v85 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v2);
  v100 = (char *)&v85 - v4;
  v5 = type metadata accessor for WidgetTileInfo(0);
  __chkstk_darwin(v5);
  v119 = (uint64_t)&v85 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_10000527C(&qword_1000A5060);
  __chkstk_darwin(v7);
  v9 = (char *)&v85 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v107 = type metadata accessor for UUID(0);
  v10 = *(_QWORD *)(v107 - 8);
  v11 = __chkstk_darwin(v107);
  v117 = (char *)&v85 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __chkstk_darwin(v11);
  v15 = (char *)&v85 - v14;
  __chkstk_darwin(v13);
  v17 = (char *)&v85 - v16;
  v18 = type metadata accessor for URL(0);
  v88 = *(_QWORD *)(v18 - 8);
  __chkstk_darwin(v18);
  v20 = (char *)&v85 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001DA80((uint64_t)v20);
  v87 = v20;
  v89 = Data.init(contentsOf:options:)(v20, 0);
  v90 = v21;
  v22 = qword_1000A79C8;
  v23 = qword_1000A79C8;
  v106 = v17;
  if (qword_1000A79C8)
    goto LABEL_5;
  v24 = v18;
  v25 = (void *)objc_opt_self(NSPropertyListSerialization);
  isa = Data._bridgeToObjectiveC()().super.isa;
  *(_QWORD *)&v132 = 0;
  v27 = objc_msgSend(v25, "propertyListWithData:options:format:error:", isa, 1, 0, &v132);

  v28 = v132;
  if (v27)
  {
    v29 = (id)v132;
    _bridgeAnyObjectToAny(_:)(&v132, v27);
    swift_unknownObjectRelease(v27);
    v30 = sub_10000527C(&qword_1000A5628);
    if ((swift_dynamicCast(&v130, &v132, (char *)&type metadata for Any + 8, v30, 6) & 1) == 0)
    {
      sub_10002A8EC(v89, v90);
      v33 = _swiftEmptyArrayStorage;
      v18 = v24;
LABEL_39:
      (*(void (**)(char *, uint64_t))(v88 + 8))(v87, v18);
      return (uint64_t)v33;
    }
    v23 = v130;
    v31 = qword_1000A79C8;
    qword_1000A79C8 = v130;
    swift_bridgeObjectRetain(v130);
    swift_bridgeObjectRelease(v31);
    v18 = v24;
    v17 = v106;
LABEL_5:
    v99 = *(_QWORD *)(v23 + 16);
    if (v99)
    {
      v86 = v18;
      v94 = enum case for StaticRenderingMode.hierarchical(_:);
      v93 = enum case for StaticRenderingMode.monochrome(_:);
      swift_bridgeObjectRetain(v22);
      v32 = 0;
      v33 = _swiftEmptyArrayStorage;
      v98 = (char *)&type metadata for Any + 8;
      v97 = 0x800000010008A870;
      v34 = v107;
      v96 = v1;
      v92 = v9;
      v91 = v10;
      v116 = v15;
      v95 = v23;
      do
      {
        v35 = *(_QWORD *)(v23 + 8 * v32 + 32);
        if (!*(_QWORD *)(v35 + 16))
        {
          __break(1u);
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
LABEL_43:
          __break(1u);
LABEL_44:
          __break(1u);
LABEL_45:
          __break(1u);
LABEL_46:
          __break(1u);
LABEL_47:
          __break(1u);
LABEL_48:
          __break(1u);
LABEL_49:
          __break(1u);
LABEL_50:
          __break(1u);
LABEL_51:
          __break(1u);
LABEL_52:
          __break(1u);
LABEL_53:
          __break(1u);
LABEL_54:
          __break(1u);
LABEL_55:
          __break(1u);
LABEL_56:
          __break(1u);
LABEL_57:
          __break(1u);
        }
        swift_bridgeObjectRetain(*(_QWORD *)(v23 + 8 * v32 + 32));
        v36 = sub_10001A4C4(25705, 0xE200000000000000);
        if ((v37 & 1) == 0)
          goto LABEL_41;
        v115 = v33;
        sub_100008FA8(*(_QWORD *)(v35 + 56) + 32 * v36, (uint64_t)&v130);
        sub_10001B9CC(&v130, &v132);
        swift_dynamicCast(&v128, &v132, v98, &type metadata for String, 7);
        v38 = v129;
        UUID.init(uuidString:)(v128, v129);
        swift_bridgeObjectRelease(v38);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v9, 1, v34) == 1)
          goto LABEL_56;
        v114 = *(void (**)(char *, char *, uint64_t))(v10 + 32);
        v114(v17, v9, v34);
        if (!*(_QWORD *)(v35 + 16))
          goto LABEL_42;
        v39 = sub_10001A4C4(1701667182, 0xE400000000000000);
        if ((v40 & 1) == 0)
          goto LABEL_43;
        sub_100008FA8(*(_QWORD *)(v35 + 56) + 32 * v39, (uint64_t)&v130);
        sub_10001B9CC(&v130, &v132);
        swift_dynamicCast(&v128, &v132, (char *)&type metadata for Any + 8, &type metadata for String, 7);
        if (!*(_QWORD *)(v35 + 16))
          goto LABEL_44;
        v41 = sub_10001A4C4(0x656D614E6D6F6F72, 0xE800000000000000);
        if ((v42 & 1) == 0)
          goto LABEL_45;
        sub_100008FA8(*(_QWORD *)(v35 + 56) + 32 * v41, (uint64_t)&v130);
        sub_10001B9CC(&v130, &v132);
        swift_dynamicCast(&v126, &v132, (char *)&type metadata for Any + 8, &type metadata for String, 7);
        if (!*(_QWORD *)(v35 + 16))
          goto LABEL_46;
        v43 = sub_10001A4C4(0x626D79536E6F6369, 0xEA00000000006C6FLL);
        if ((v44 & 1) == 0)
          goto LABEL_47;
        sub_100008FA8(*(_QWORD *)(v35 + 56) + 32 * v43, (uint64_t)&v130);
        sub_10001B9CC(&v130, &v132);
        swift_dynamicCast(&v124, &v132, (char *)&type metadata for Any + 8, &type metadata for String, 7);
        if (!*(_QWORD *)(v35 + 16))
          goto LABEL_48;
        v45 = sub_10001A4C4(0xD000000000000013, v97);
        if ((v46 & 1) == 0)
          goto LABEL_49;
        sub_100008FA8(*(_QWORD *)(v35 + 56) + 32 * v45, (uint64_t)&v130);
        sub_10001B9CC(&v130, &v132);
        v47 = swift_dynamicCast(&v122, &v132, (char *)&type metadata for Any + 8, &type metadata for String, 7);
        v48 = static Color.yellow.getter(v47);
        if (!*(_QWORD *)(v35 + 16))
          goto LABEL_50;
        v49 = v48;
        swift_retain(v48);
        v50 = sub_10001A4C4(0x6176697463417369, 0xEB00000000646574);
        if ((v51 & 1) == 0)
          goto LABEL_51;
        v118 = v49;
        sub_100008FA8(*(_QWORD *)(v35 + 56) + 32 * v50, (uint64_t)&v130);
        sub_10001B9CC(&v130, &v132);
        v52 = sub_10002A86C();
        swift_dynamicCast(v121, &v132, (char *)&type metadata for Any + 8, v52, 7);
        v53 = v121[0];
        objc_msgSend(v121[0], "BOOLValue");

        if (!*(_QWORD *)(v35 + 16))
          goto LABEL_52;
        v54 = sub_10001A4C4(0x6168636165527369, 0xEB00000000656C62);
        if ((v55 & 1) == 0)
          goto LABEL_53;
        sub_100008FA8(*(_QWORD *)(v35 + 56) + 32 * v54, (uint64_t)&v130);
        sub_10001B9CC(&v130, &v132);
        swift_dynamicCast(v121, &v132, (char *)&type metadata for Any + 8, v52, 7);
        v56 = v121[0];
        v113 = objc_msgSend(v121[0], "BOOLValue");

        if (!*(_QWORD *)(v35 + 16))
          goto LABEL_54;
        v57 = sub_10001A4C4(0x7453737574617473, 0xEC000000676E6972);
        if ((v58 & 1) == 0)
          goto LABEL_55;
        sub_100008FA8(*(_QWORD *)(v35 + 56) + 32 * v57, (uint64_t)&v130);
        sub_10001B9CC(&v130, &v132);
        swift_dynamicCast(v121, &v132, (char *)&type metadata for Any + 8, &type metadata for String, 7);
        if (*(_QWORD *)(v35 + 16) && (v59 = sub_10001A4C4(0x6168636165527369, 0xEB00000000656C62), (v60 & 1) != 0))
        {
          sub_100008FA8(*(_QWORD *)(v35 + 56) + 32 * v59, (uint64_t)&v130);
        }
        else
        {
          v130 = 0u;
          v131 = 0u;
        }
        v112 = v32;
        swift_bridgeObjectRelease(v35);
        if (!*((_QWORD *)&v131 + 1))
          goto LABEL_57;
        sub_10001B9CC(&v130, &v132);
        swift_dynamicCast(&v120, &v132, (char *)&type metadata for Any + 8, v52, 7);
        v61 = v120;
        objc_msgSend(v120, "BOOLValue");

        v62 = *(void (**)(char *, char *, uint64_t))(v10 + 16);
        v17 = v106;
        v62(v15, v106, v34);
        v62(v117, v17, v34);
        v63 = v129;
        v111 = v128;
        v64 = v127;
        v110 = v126;
        v65 = v125;
        v109 = v124;
        v66 = v123;
        v108 = v122;
        v67 = *(void (**)(char *, _QWORD, uint64_t))(v102 + 104);
        v68 = (uint64_t)v100;
        v69 = v103;
        v67(v100, v94, v103);
        v70 = (uint64_t)v101;
        v67(v101, v93, v69);
        swift_bridgeObjectRetain(v63);
        swift_bridgeObjectRetain(v64);
        swift_bridgeObjectRetain(v65);
        swift_bridgeObjectRetain(v66);
        v71 = sub_10002F268((uint64_t)_swiftEmptyArrayStorage);
        v84 = v66;
        v15 = v116;
        v72 = v64;
        v34 = v107;
        sub_100016388((uint64_t)v116, (uint64_t)v117, v111, v63, v110, v72, v109, v65, v119, v108, v84, v68, v70, v118, v113, 0, 3, v71, 0,
          2,
          0,
          1,
          0,
          0,
          2);
        v62(v15, v17, v34);
        if (qword_1000A4EA8 != -1)
          swift_once(&qword_1000A4EA8, sub_100029A98);
        v73 = sub_100014698(v34, (uint64_t)qword_1000A79B0);
        v74 = v105;
        v75 = (uint64_t)v96;
        v62(&v96[*(int *)(v105 + 20)], (char *)v73, v34);
        sub_100008BB8(v119, v75 + *(int *)(v74 + 24));
        v114((char *)v75, v15, v34);
        v33 = v115;
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v115);
        v77 = v112;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
          v33 = (_QWORD *)sub_10005AC44(0, v33[2] + 1, 1, (unint64_t)v33);
        v9 = v92;
        v10 = v91;
        v79 = v33[2];
        v78 = v33[3];
        if (v79 >= v78 >> 1)
          v33 = (_QWORD *)sub_10005AC44(v78 > 1, v79 + 1, 1, (unint64_t)v33);
        v32 = v77 + 1;
        v33[2] = v79 + 1;
        sub_10002A8A8(v75, (uint64_t)v33+ ((*(unsigned __int8 *)(v104 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v104 + 80))+ *(_QWORD *)(v104 + 72) * v79);
        swift_release(v118);
        sub_100008BFC(v119);
        (*(void (**)(char *, uint64_t))(v10 + 8))(v17, v34);
        swift_bridgeObjectRelease(v121[1]);
        swift_bridgeObjectRelease(v123);
        swift_bridgeObjectRelease(v125);
        swift_bridgeObjectRelease(v127);
        swift_bridgeObjectRelease(v129);
        v23 = v95;
      }
      while (v99 != v32);
      sub_10002A8EC(v89, v90);
      swift_bridgeObjectRelease(v23);
      v18 = v86;
    }
    else
    {
      swift_bridgeObjectRetain(v22);
      sub_10002A8EC(v89, v90);
      swift_bridgeObjectRelease(v23);
      v33 = _swiftEmptyArrayStorage;
    }
    goto LABEL_39;
  }
  v81 = (id)v132;
  v82 = _convertNSErrorToError(_:)(v28);

  swift_willThrow(v83);
  result = swift_unexpectedError(v82, "HomeWidget/Entities+Samples.swift", 33, 1, 196);
  __break(1u);
  return result;
}

unint64_t sub_10002A86C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000A5210;
  if (!qword_1000A5210)
  {
    v1 = objc_opt_self(NSNumber);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_1000A5210);
  }
  return result;
}

uint64_t sub_10002A8A8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for AccessoryAndSceneEntity(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_10002A8EC(uint64_t result, unint64_t a2)
{
  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2)
      return result;
    swift_release(result);
  }
  return swift_release(a2 & 0x3FFFFFFFFFFFFFFFLL);
}

_QWORD *sub_10002A930(unint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  id v7;
  void *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  int64_t v12;
  char isUniquelyReferenced_nonNull_native;
  int64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *result;
  uint64_t v31;
  unint64_t v32;
  char *v33;
  id v34;

  v2 = v1;
  v3 = a1;
  if (a1 >> 62)
    goto LABEL_36;
  v4 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain(a1);
  while (v4)
  {
    v32 = v3 & 0xC000000000000001;
    v5 = _swiftEmptyArrayStorage;
    v6 = 4;
    v31 = v3;
    while (1)
    {
      v7 = v32 ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v6 - 4, v3) : *(id *)(v3 + 8 * v6);
      v8 = v7;
      v9 = v6 - 3;
      if (__OFADD__(v6 - 4, 1))
        break;
      v34 = v7;
      sub_10002AD44(&v34, &v33);
      if (v2)
      {
        swift_bridgeObjectRelease(v5);
        swift_bridgeObjectRelease(v31);

        return v5;
      }

      v10 = v33;
      v11 = *((_QWORD *)v33 + 2);
      v12 = v5[2];
      v3 = v12 + v11;
      if (__OFADD__(v12, v11))
        goto LABEL_32;
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v5);
      if ((isUniquelyReferenced_nonNull_native & 1) != 0 && v3 <= v5[3] >> 1)
      {
        if (*((_QWORD *)v10 + 2))
          goto LABEL_20;
      }
      else
      {
        if (v12 <= v3)
          v14 = v12 + v11;
        else
          v14 = v12;
        v5 = (_QWORD *)sub_10005AA24(isUniquelyReferenced_nonNull_native, v14, 1, (unint64_t)v5);
        if (*((_QWORD *)v10 + 2))
        {
LABEL_20:
          v15 = v5[2];
          v3 = (v5[3] >> 1) - v15;
          v16 = type metadata accessor for UUID(0);
          if (v3 < v11)
            goto LABEL_34;
          v17 = *(_QWORD *)(v16 - 8);
          v18 = (*(unsigned __int8 *)(v17 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v17 + 80);
          v19 = *(_QWORD *)(v17 + 72);
          v20 = (char *)v5 + v18 + v19 * v15;
          v21 = &v10[v18];
          v22 = v19 * v11;
          v23 = &v20[v22];
          v24 = &v21[v22];
          if (v21 < v23 && v20 < v24)
          {
            result = (_QWORD *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
            __break(1u);
            return result;
          }
          swift_arrayInitWithCopy(v20);
          if (v11)
          {
            v26 = v5[2];
            v27 = __OFADD__(v26, v11);
            v28 = v26 + v11;
            if (v27)
              goto LABEL_35;
            v5[2] = v28;
          }
          goto LABEL_5;
        }
      }
      if (v11)
        goto LABEL_33;
LABEL_5:
      swift_bridgeObjectRelease(v10);
      ++v6;
      v3 = v31;
      if (v9 == v4)
      {
        swift_bridgeObjectRelease(v31);
        return v5;
      }
    }
    __break(1u);
LABEL_32:
    __break(1u);
LABEL_33:
    __break(1u);
LABEL_34:
    __break(1u);
LABEL_35:
    __break(1u);
LABEL_36:
    if (v3 < 0)
      v29 = v3;
    else
      v29 = v3 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v3);
    v4 = _CocoaArrayWrapper.endIndex.getter(v29);
  }
  swift_bridgeObjectRelease(v3);
  return _swiftEmptyArrayStorage;
}

void sub_10002ABA8()
{
  void *v0;
  id v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t i;
  id v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v1 = objc_msgSend(v0, "hf_visibleAccessories");
  v2 = sub_100008CBC(0, &qword_1000A5030, HMAccessory_ptr);
  v3 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v1, v2);

  if (!((unint64_t)v3 >> 62))
  {
    v4 = *(_QWORD *)((v3 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v4)
      goto LABEL_3;
LABEL_18:
    swift_bridgeObjectRelease(v3);
    return;
  }
  if (v3 < 0)
    v10 = v3;
  else
    v10 = v3 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v3);
  v4 = _CocoaArrayWrapper.endIndex.getter(v10);
  swift_bridgeObjectRelease(v3);
  if (!v4)
    goto LABEL_18;
LABEL_3:
  if (v4 < 1)
  {
    __break(1u);
  }
  else
  {
    for (i = 0; i != v4; ++i)
    {
      if ((v3 & 0xC000000000000001) != 0)
        v6 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(i, v3);
      else
        v6 = *(id *)(v3 + 8 * i + 32);
      v7 = v6;
      if ((objc_msgSend(v6, "hf_isCamera") & 1) != 0
        || (objc_msgSend(v7, "hf_isNetworkRouter") & 1) != 0)
      {

      }
      else
      {
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
        v8 = _swiftEmptyArrayStorage[2];
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v8);
        v9 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v8, v7);
        specialized ContiguousArray._endMutation()(v9);
      }
    }
    swift_bridgeObjectRelease(v3);
  }
}

uint64_t sub_10002AD44@<X0>(id *a1@<X0>, char **a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t result;
  uint64_t v21;
  char *v22;
  id v23;
  void *v24;
  id v25;
  char *v26;
  void (*v27)(char *, char *, uint64_t);
  char *v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  char **v32;
  uint64_t v33;
  char *v34;
  unint64_t v35;
  uint64_t v36;
  char *v37;
  char *v38;

  v3 = v2;
  v32 = a2;
  v5 = sub_10000527C(&qword_1000A5060);
  __chkstk_darwin(v5);
  v7 = (char *)&v32 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for UUID(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = __chkstk_darwin(v8);
  v12 = (char *)&v32 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __chkstk_darwin(v10);
  v38 = (char *)&v32 - v14;
  __chkstk_darwin(v13);
  v34 = (char *)&v32 - v15;
  v16 = objc_msgSend(*a1, "services");
  v17 = sub_100008CBC(0, &qword_1000A5078, HMService_ptr);
  v18 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v16, v17);

  if (!((unint64_t)v18 >> 62))
  {
    v19 = *(_QWORD *)((v18 & 0xFFFFFFFFFFFFF8) + 0x10);
    result = swift_bridgeObjectRetain(v18);
    v33 = v3;
    if (v19)
      goto LABEL_3;
LABEL_20:
    v22 = (char *)_swiftEmptyArrayStorage;
LABEL_21:
    result = swift_bridgeObjectRelease_n(v18, 2);
    *v32 = v22;
    return result;
  }
  if (v18 < 0)
    v31 = v18;
  else
    v31 = v18 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v18);
  result = _CocoaArrayWrapper.endIndex.getter(v31);
  v19 = result;
  v33 = v3;
  if (!result)
    goto LABEL_20;
LABEL_3:
  if (v19 >= 1)
  {
    v21 = 0;
    v35 = v18 & 0xC000000000000001;
    v22 = (char *)_swiftEmptyArrayStorage;
    v36 = v18;
    v37 = v12;
    do
    {
      if (v35)
        v23 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v21, v18);
      else
        v23 = *(id *)(v18 + 8 * v21 + 32);
      v24 = v23;
      v25 = objc_msgSend(v23, "uniqueIdentifier", v32);
      v26 = v38;
      static UUID._unconditionallyBridgeFromObjectiveC(_:)(v25);

      v27 = *(void (**)(char *, char *, uint64_t))(v9 + 32);
      v27(v7, v26, v8);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v9 + 56))(v7, 0, 1, v8);

      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1)
      {
        sub_100009BDC((uint64_t)v7);
      }
      else
      {
        v28 = v34;
        v27(v34, v7, v8);
        v27(v37, v28, v8);
        if ((swift_isUniquelyReferenced_nonNull_native(v22) & 1) == 0)
          v22 = (char *)sub_10005AA24(0, *((_QWORD *)v22 + 2) + 1, 1, (unint64_t)v22);
        v30 = *((_QWORD *)v22 + 2);
        v29 = *((_QWORD *)v22 + 3);
        if (v30 >= v29 >> 1)
          v22 = (char *)sub_10005AA24(v29 > 1, v30 + 1, 1, (unint64_t)v22);
        *((_QWORD *)v22 + 2) = v30 + 1;
        v27(&v22[((*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80))+ *(_QWORD *)(v9 + 72) * v30], v37, v8);
      }
      ++v21;
      v18 = v36;
    }
    while (v19 != v21);
    goto LABEL_21;
  }
  __break(1u);
  return result;
}

uint64_t sub_10002B07C(void *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t result;
  uint64_t v37;
  unint64_t v38;
  id v39;
  void *v40;
  id v41;
  char *v42;
  void (*v43)(char *, char *, uint64_t);
  char *v44;
  unint64_t v45;
  unint64_t v46;
  char *v47;
  char *v48;
  id v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  id v54;
  void *v55;
  id v56;
  char *v57;
  void (*v58)(char *, char *, uint64_t);
  char *v59;
  unint64_t v60;
  unint64_t v61;
  char *v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  _QWORD *v67;
  id v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  uint64_t v74;
  id v75;
  void *v76;
  id v77;
  char *v78;
  void (*v79)(char *, char *, uint64_t);
  uint64_t v80;
  char *v81;
  unint64_t v82;
  unint64_t v83;
  uint64_t v84;
  id v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  _QWORD *v91;
  id v92;
  void *v93;
  id v94;
  char *v95;
  void (*v96)(uint64_t, char *, uint64_t);
  char *v97;
  unint64_t v98;
  unint64_t v99;
  uint64_t v100;
  uint64_t v101;
  unint64_t v102;
  id v103;
  char *v104;
  char *v105;
  char *v106;
  char *v107;
  char *v108;
  unint64_t v109;
  char *v110;
  char *v111;
  char *v112;
  char *v113;
  char *v114;
  char *v115;
  char *v116;
  char *v117;

  v2 = sub_10000527C(&qword_1000A5060);
  v3 = __chkstk_darwin(v2);
  v5 = (char *)&v101 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __chkstk_darwin(v3);
  v8 = (char *)&v101 - v7;
  v9 = __chkstk_darwin(v6);
  v11 = (char *)&v101 - v10;
  __chkstk_darwin(v9);
  v13 = (char *)&v101 - v12;
  v14 = type metadata accessor for UUID(0);
  v15 = *(_QWORD *)(v14 - 8);
  v16 = __chkstk_darwin(v14);
  v110 = (char *)&v101 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = __chkstk_darwin(v16);
  v104 = (char *)&v101 - v19;
  v20 = __chkstk_darwin(v18);
  v111 = (char *)&v101 - v21;
  v22 = __chkstk_darwin(v20);
  v105 = (char *)&v101 - v23;
  v24 = __chkstk_darwin(v22);
  v113 = (char *)&v101 - v25;
  v26 = __chkstk_darwin(v24);
  v106 = (char *)&v101 - v27;
  v28 = __chkstk_darwin(v26);
  v114 = (char *)&v101 - v29;
  v30 = __chkstk_darwin(v28);
  v116 = (char *)&v101 - v31;
  __chkstk_darwin(v30);
  v107 = (char *)&v101 - v32;
  v103 = a1;
  sub_10002ABA8();
  v34 = v33;
  if ((unint64_t)v33 >> 62)
  {
    if (v33 < 0)
      v64 = v33;
    else
      v64 = v33 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v33);
    result = _CocoaArrayWrapper.endIndex.getter(v64);
    v35 = result;
  }
  else
  {
    v35 = *(_QWORD *)((v33 & 0xFFFFFFFFFFFFF8) + 0x10);
    result = swift_bridgeObjectRetain(v33);
  }
  v108 = v5;
  v112 = v8;
  if (v35)
  {
    if (v35 < 1)
    {
      __break(1u);
      goto LABEL_85;
    }
    v37 = 0;
    v38 = v34;
    v109 = v34 & 0xC000000000000001;
    v115 = (char *)_swiftEmptyArrayStorage;
    do
    {
      if (v109)
        v39 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v37, v38);
      else
        v39 = *(id *)(v38 + 8 * v37 + 32);
      v40 = v39;
      v41 = objc_msgSend(v39, "uniqueIdentifier");
      v42 = v116;
      static UUID._unconditionallyBridgeFromObjectiveC(_:)(v41);

      v43 = *(void (**)(char *, char *, uint64_t))(v15 + 32);
      v43(v13, v42, v14);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v13, 0, 1, v14);

      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14) == 1)
      {
        sub_100009BDC((uint64_t)v13);
      }
      else
      {
        v44 = v107;
        v43(v107, v13, v14);
        v43(v114, v44, v14);
        if ((swift_isUniquelyReferenced_nonNull_native(v115) & 1) == 0)
          v115 = (char *)sub_10005AA24(0, *((_QWORD *)v115 + 2) + 1, 1, (unint64_t)v115);
        v46 = *((_QWORD *)v115 + 2);
        v45 = *((_QWORD *)v115 + 3);
        if (v46 >= v45 >> 1)
          v115 = (char *)sub_10005AA24(v45 > 1, v46 + 1, 1, (unint64_t)v115);
        v47 = v114;
        v48 = v115;
        *((_QWORD *)v115 + 2) = v46 + 1;
        v43(&v48[((*(unsigned __int8 *)(v15 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80))+ *(_QWORD *)(v15 + 72) * v46], v47, v14);
      }
      ++v37;
    }
    while (v35 != v37);
    v34 = v38;
    swift_bridgeObjectRelease(v38);
  }
  else
  {
    swift_bridgeObjectRelease(v34);
    v115 = (char *)_swiftEmptyArrayStorage;
  }
  v49 = objc_msgSend(v103, "actionSets");
  v50 = sub_100008CBC(0, &qword_1000A5080, HMActionSet_ptr);
  v51 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v49, v50);

  v102 = v34;
  if (!((unint64_t)v51 >> 62))
  {
    v52 = *(_QWORD *)((v51 & 0xFFFFFFFFFFFFF8) + 0x10);
    result = swift_bridgeObjectRetain(v51);
    if (v52)
      goto LABEL_21;
LABEL_42:
    v114 = (char *)_swiftEmptyArrayStorage;
    goto LABEL_43;
  }
  if (v51 < 0)
    v65 = v51;
  else
    v65 = v51 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v51);
  result = _CocoaArrayWrapper.endIndex.getter(v65);
  v52 = result;
  if (!result)
    goto LABEL_42;
LABEL_21:
  if (v52 < 1)
  {
LABEL_85:
    __break(1u);
    goto LABEL_86;
  }
  v53 = 0;
  v114 = (char *)_swiftEmptyArrayStorage;
  do
  {
    if ((v51 & 0xC000000000000001) != 0)
      v54 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v53, v51);
    else
      v54 = *(id *)(v51 + 8 * v53 + 32);
    v55 = v54;
    v56 = objc_msgSend(v54, "uniqueIdentifier");
    v57 = v116;
    static UUID._unconditionallyBridgeFromObjectiveC(_:)(v56);

    v58 = *(void (**)(char *, char *, uint64_t))(v15 + 32);
    v58(v11, v57, v14);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v11, 0, 1, v14);

    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v11, 1, v14) == 1)
    {
      sub_100009BDC((uint64_t)v11);
    }
    else
    {
      v59 = v106;
      v58(v106, v11, v14);
      v58(v113, v59, v14);
      if ((swift_isUniquelyReferenced_nonNull_native(v114) & 1) == 0)
        v114 = (char *)sub_10005AA24(0, *((_QWORD *)v114 + 2) + 1, 1, (unint64_t)v114);
      v61 = *((_QWORD *)v114 + 2);
      v60 = *((_QWORD *)v114 + 3);
      if (v61 >= v60 >> 1)
        v114 = (char *)sub_10005AA24(v60 > 1, v61 + 1, 1, (unint64_t)v114);
      v62 = v113;
      v63 = v114;
      *((_QWORD *)v114 + 2) = v61 + 1;
      v58(&v63[((*(unsigned __int8 *)(v15 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80))+ *(_QWORD *)(v15 + 72) * v61], v62, v14);
    }
    ++v53;
  }
  while (v52 != v53);
LABEL_43:
  swift_bridgeObjectRelease_n(v51, 2);
  v66 = v102;
  v67 = sub_10002A930(v102);
  swift_bridgeObjectRelease(v66);
  v68 = objc_msgSend(v103, "serviceGroups");
  v69 = sub_100008CBC(0, &qword_1000A5070, HMServiceGroup_ptr);
  v70 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v68, v69);

  if (!((unint64_t)v70 >> 62))
  {
    v71 = *(_QWORD *)((v70 & 0xFFFFFFFFFFFFF8) + 0x10);
    result = swift_bridgeObjectRetain(v70);
    v109 = (unint64_t)v67;
    if (v71)
      goto LABEL_45;
LABEL_62:
    v73 = (char *)_swiftEmptyArrayStorage;
    goto LABEL_63;
  }
  if (v70 < 0)
    v84 = v70;
  else
    v84 = v70 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v70);
  result = _CocoaArrayWrapper.endIndex.getter(v84);
  v71 = result;
  v109 = (unint64_t)v67;
  if (!result)
    goto LABEL_62;
LABEL_45:
  if (v71 < 1)
  {
LABEL_86:
    __break(1u);
    goto LABEL_87;
  }
  v72 = 0;
  v113 = (char *)(v70 & 0xC000000000000001);
  v73 = (char *)_swiftEmptyArrayStorage;
  v74 = v70;
  do
  {
    if (v113)
      v75 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v72, v70);
    else
      v75 = *(id *)(v70 + 8 * v72 + 32);
    v76 = v75;
    v77 = objc_msgSend(v75, "uniqueIdentifier");
    v78 = v116;
    static UUID._unconditionallyBridgeFromObjectiveC(_:)(v77);

    v79 = *(void (**)(char *, char *, uint64_t))(v15 + 32);
    v80 = (uint64_t)v112;
    v79(v112, v78, v14);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v15 + 56))(v80, 0, 1, v14);

    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v15 + 48))(v80, 1, v14) == 1)
    {
      sub_100009BDC(v80);
      v70 = v74;
    }
    else
    {
      v81 = v105;
      v79(v105, (char *)v80, v14);
      v79(v111, v81, v14);
      if ((swift_isUniquelyReferenced_nonNull_native(v73) & 1) == 0)
        v73 = (char *)sub_10005AA24(0, *((_QWORD *)v73 + 2) + 1, 1, (unint64_t)v73);
      v70 = v74;
      v83 = *((_QWORD *)v73 + 2);
      v82 = *((_QWORD *)v73 + 3);
      if (v83 >= v82 >> 1)
        v73 = (char *)sub_10005AA24(v82 > 1, v83 + 1, 1, (unint64_t)v73);
      *((_QWORD *)v73 + 2) = v83 + 1;
      v79(&v73[((*(unsigned __int8 *)(v15 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80))+ *(_QWORD *)(v15 + 72) * v83], v111, v14);
    }
    ++v72;
  }
  while (v71 != v72);
LABEL_63:
  swift_bridgeObjectRelease_n(v70, 2);
  v85 = objc_msgSend(v103, "mediaSystems");
  v86 = sub_100008CBC(0, &qword_1000A5630, HMMediaSystem_ptr);
  v87 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v85, v86);

  if (!((unint64_t)v87 >> 62))
  {
    v88 = *(_QWORD *)((v87 & 0xFFFFFFFFFFFFF8) + 0x10);
    result = swift_bridgeObjectRetain(v87);
    v89 = (uint64_t)v108;
    if (v88)
      goto LABEL_65;
LABEL_82:
    v91 = _swiftEmptyArrayStorage;
LABEL_83:
    swift_bridgeObjectRelease_n(v87, 2);
    v117 = v115;
    sub_100057A80((uint64_t)v114);
    sub_100057A80(v109);
    sub_100057A80((uint64_t)v73);
    sub_100057A80((uint64_t)v91);
    return (uint64_t)v117;
  }
  if (v87 < 0)
    v100 = v87;
  else
    v100 = v87 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v87);
  result = _CocoaArrayWrapper.endIndex.getter(v100);
  v88 = result;
  v89 = (uint64_t)v108;
  if (!result)
    goto LABEL_82;
LABEL_65:
  if (v88 >= 1)
  {
    v90 = 0;
    v113 = (char *)(v87 & 0xC000000000000001);
    v91 = _swiftEmptyArrayStorage;
    v112 = (char *)v87;
    do
    {
      if (v113)
        v92 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v90, v87);
      else
        v92 = *(id *)(v87 + 8 * v90 + 32);
      v93 = v92;
      v94 = objc_msgSend(v92, "uniqueIdentifier");
      v95 = v116;
      static UUID._unconditionallyBridgeFromObjectiveC(_:)(v94);

      v96 = *(void (**)(uint64_t, char *, uint64_t))(v15 + 32);
      v96(v89, v95, v14);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v15 + 56))(v89, 0, 1, v14);

      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v15 + 48))(v89, 1, v14) == 1)
      {
        sub_100009BDC(v89);
        v87 = (uint64_t)v112;
      }
      else
      {
        v97 = v104;
        v96((uint64_t)v104, (char *)v89, v14);
        v96((uint64_t)v110, v97, v14);
        if ((swift_isUniquelyReferenced_nonNull_native(v91) & 1) == 0)
          v91 = (_QWORD *)sub_10005AA24(0, v91[2] + 1, 1, (unint64_t)v91);
        v87 = (uint64_t)v112;
        v99 = v91[2];
        v98 = v91[3];
        if (v99 >= v98 >> 1)
          v91 = (_QWORD *)sub_10005AA24(v98 > 1, v99 + 1, 1, (unint64_t)v91);
        v91[2] = v99 + 1;
        v96((uint64_t)v91+ ((*(unsigned __int8 *)(v15 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80))+ *(_QWORD *)(v15 + 72) * v99, v110, v14);
        v89 = (uint64_t)v108;
      }
      ++v90;
    }
    while (v88 != v90);
    goto LABEL_83;
  }
LABEL_87:
  __break(1u);
  return result;
}

uint64_t sub_10002BB60()
{
  return sub_100008C7C(&qword_1000A5638, type metadata accessor for HomeEntity, (uint64_t)&unk_1000877C0);
}

uint64_t type metadata accessor for HomeEntity(uint64_t a1)
{
  uint64_t result;

  result = qword_1000A5730;
  if (!qword_1000A5730)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for HomeEntity);
  return result;
}

uint64_t sub_10002BBC8()
{
  return sub_100008C7C(&qword_1000A5640, type metadata accessor for HomeEntity, (uint64_t)&unk_1000877F8);
}

uint64_t sub_10002BBF4()
{
  return sub_100008C7C(&qword_1000A5648, type metadata accessor for HomeEntity, (uint64_t)&unk_100087828);
}

unint64_t sub_10002BC24()
{
  unint64_t result;

  result = qword_1000A5650;
  if (!qword_1000A5650)
  {
    result = swift_getWitnessTable(&unk_100087960, &type metadata for HomeEntityQuery);
    atomic_store(result, (unint64_t *)&qword_1000A5650);
  }
  return result;
}

BOOL sub_10002BC68(uint64_t (*a1)(char *), _BOOL8 a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(char *, uint64_t, uint64_t, uint64_t);
  int v16;
  BOOL v17;
  void (*v18)(char *, char *, uint64_t);
  uint64_t v19;
  char *v20;
  char v21;
  char v22;
  void (*v23)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  char *v29;
  void (*v30)(char *, uint64_t, uint64_t);
  _BOOL8 v31;
  uint64_t (*v32)(char *);
  uint64_t v33;

  v4 = v3;
  v31 = a2;
  v32 = a1;
  v33 = type metadata accessor for UUID(0);
  v6 = *(_QWORD *)(v33 - 8);
  __chkstk_darwin(v33);
  v8 = (char *)&v25 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_10000527C(&qword_1000A5060);
  __chkstk_darwin(v9);
  v11 = (char *)&v25 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = *(_QWORD *)(a3 + 16);
  if (v12)
  {
    v13 = a3 + ((*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80));
    v28 = *(_QWORD *)(v6 + 72);
    v29 = v8;
    v30 = *(void (**)(char *, uint64_t, uint64_t))(v6 + 16);
    v26 = a3;
    swift_bridgeObjectRetain(a3);
    while (1)
    {
      v14 = v33;
      v30(v11, v13, v33);
      v15 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v6 + 56);
      v15(v11, 0, 1, v14);
      v16 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v6 + 48))(v11, 1, v14);
      v17 = v16 != 1;
      if (v16 == 1)
      {
        a3 = v26;
        goto LABEL_13;
      }
      v27 = 1;
      v18 = *(void (**)(char *, char *, uint64_t))(v6 + 32);
      v19 = v6;
      v20 = v29;
      v18(v29, v11, v14);
      v17 = v31;
      v21 = v32(v20);
      if (v4)
      {
        (*(void (**)(char *, uint64_t))(v19 + 8))(v20, v14);
        swift_bridgeObjectRelease(v26);
        return v17;
      }
      v22 = v21;
      v23 = v15;
      (*(void (**)(char *, uint64_t))(v19 + 8))(v20, v14);
      if ((v22 & 1) != 0)
        break;
      v13 += v28;
      --v12;
      v4 = 0;
      v6 = v19;
      if (!v12)
      {
        a3 = v26;
        goto LABEL_9;
      }
    }
    a3 = v26;
    v17 = v27;
  }
  else
  {
    v23 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v6 + 56);
    swift_bridgeObjectRetain(a3);
LABEL_9:
    v23(v11, 1, 1, v33);
    v17 = 0;
  }
LABEL_13:
  swift_bridgeObjectRelease(a3);
  return v17;
}

uint64_t sub_10002BE90()
{
  uint64_t v0;

  v0 = type metadata accessor for TypeDisplayRepresentation(0);
  sub_10001D27C(v0, qword_1000A79D8);
  sub_100014698(v0, (uint64_t)qword_1000A79D8);
  return TypeDisplayRepresentation.init(stringLiteral:)(0x64657463656C6553, 0xED0000656D6F4820);
}

uint64_t sub_10002BEF8@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  id v6;
  id v7;
  uint64_t v8;
  id v9;
  NSObject *v10;
  os_log_type_t v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  uint64_t v15;
  id v16;
  _QWORD *v17;
  os_log_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  id v23;
  id v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  os_log_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;

  v2 = type metadata accessor for Logger(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v30 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = objc_msgSend((id)objc_opt_self(HFHomeKitDispatcher), "sharedDispatcher");
  v7 = objc_msgSend(v6, "home");

  if (v7)
  {
    if (qword_1000A4F10 != -1)
      swift_once(&qword_1000A4F10, sub_1000531A8);
    v8 = sub_100014698(v2, (uint64_t)qword_1000A7A98);
    (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v5, v8, v2);
    v9 = v7;
    v10 = Logger.logObject.getter(v9);
    v11 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v10, v11))
    {
      v12 = swift_slowAlloc(22, -1);
      v33 = v10;
      v13 = v12;
      v31 = (_QWORD *)swift_slowAlloc(8, -1);
      v34 = swift_slowAlloc(32, -1);
      v37 = v34;
      *(_DWORD *)v13 = 136315394;
      v35 = v2;
      v36 = sub_100023980(0x64657463656C6573, 0xEC000000656D6F48, &v37);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v36, &v37, v13 + 4, v13 + 12);
      *(_WORD *)(v13 + 12) = 2112;
      v36 = (uint64_t)v9;
      v14 = v9;
      v32 = v3;
      v15 = a1;
      v16 = v14;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v36, &v37, v13 + 14, v13 + 22);
      v17 = v31;
      *v31 = v7;

      a1 = v15;
      v18 = v33;
      _os_log_impl((void *)&_mh_execute_header, v33, v11, "%s HFHomeKitDispatcher.home=%@", (uint8_t *)v13, 0x16u);
      v19 = sub_10000527C(&qword_1000A5208);
      swift_arrayDestroy(v17, 1, v19);
      swift_slowDealloc(v17, -1, -1);
      v20 = v34;
      swift_arrayDestroy(v34, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v20, -1, -1);
      swift_slowDealloc(v13, -1, -1);

      (*(void (**)(char *, uint64_t))(v32 + 8))(v5, v35);
    }
    else
    {

      (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
    }
    v23 = objc_msgSend(v9, "uniqueIdentifier");
    static UUID._unconditionallyBridgeFromObjectiveC(_:)(v23);

    v24 = objc_msgSend(v9, "name");
    v25 = static String._unconditionallyBridgeFromObjectiveC(_:)(v24);
    v27 = v26;

    v28 = type metadata accessor for HomeEntity(0);
    v29 = (uint64_t *)(a1 + *(int *)(v28 + 20));
    *v29 = v25;
    v29[1] = v27;
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v28 - 8) + 56))(a1, 0, 1, v28);
  }
  else
  {
    v21 = type metadata accessor for HomeEntity(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 56))(a1, 1, 1, v21);
  }
}

uint64_t sub_10002C298(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  if ((static UUID.== infix(_:_:)() & 1) == 0)
    return 0;
  v6 = *(int *)(a3 + 20);
  v7 = *(_QWORD *)(a1 + v6);
  v8 = *(_QWORD *)(a1 + v6 + 8);
  v9 = (_QWORD *)(a2 + v6);
  if (v7 == *v9 && v8 == v9[1])
    return 1;
  else
    return _stringCompareWithSmolCheck(_:_:expecting:)();
}

uint64_t sub_10002C30C()
{
  return sub_100008C7C(&qword_1000A5658, type metadata accessor for HomeEntity, (uint64_t)&unk_100087860);
}

uint64_t sub_10002C338()
{
  return sub_100008C7C(&qword_1000A5660, type metadata accessor for HomeEntity, (uint64_t)&unk_100087888);
}

uint64_t sub_10002C364()
{
  return sub_100008C7C(&qword_1000A54C0, type metadata accessor for HomeEntity, (uint64_t)&unk_1000878B0);
}

uint64_t sub_10002C390()
{
  return sub_100008C7C(&qword_1000A5668, type metadata accessor for HomeEntity, (uint64_t)&unk_100087908);
}

uint64_t sub_10002C3BC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  if (qword_1000A4EB8 != -1)
    swift_once(&qword_1000A4EB8, sub_10002BE90);
  v2 = type metadata accessor for TypeDisplayRepresentation(0);
  v3 = sub_100014698(v2, (uint64_t)qword_1000A79D8);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 16))(a1, v3, v2);
}

uint64_t sub_10002C42C()
{
  return sub_1000229D8(&qword_1000A5670, &qword_1000A5678, (uint64_t)&protocol conformance descriptor for EmptyResolverSpecification<A>);
}

uint64_t sub_10002C458(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100008C7C((unint64_t *)&qword_1000A55E0, type metadata accessor for HomeEntity, (uint64_t)&unk_100087740);
  return static AppEntity.defaultResolverSpecification.getter(a1, v2);
}

uint64_t sub_10002C4A8()
{
  return sub_100008C7C(&qword_1000A5680, type metadata accessor for HomeEntity, (uint64_t)&unk_100087938);
}

uint64_t sub_10002C4D4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  Swift::String v17;
  Swift::String v18;
  uint64_t v19;
  uint64_t v21;

  v3 = v1;
  v4 = sub_10000527C(&qword_1000A5500);
  __chkstk_darwin(v4);
  v6 = (char *)&v21 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_10000527C(&qword_1000A5320);
  __chkstk_darwin(v7);
  v9 = (char *)&v21 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for LocalizedStringResource(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = (char *)&v21 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for String.LocalizationValue.StringInterpolation(0);
  __chkstk_darwin(v14);
  v16 = (char *)&v21 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  String.LocalizationValue.StringInterpolation.init(literalCapacity:interpolationCount:)(0, 1);
  v17._countAndFlagsBits = 0;
  v17._object = (void *)0xE000000000000000;
  String.LocalizationValue.StringInterpolation.appendLiteral(_:)(v17);
  String.LocalizationValue.StringInterpolation.appendInterpolation(_:)(*(Swift::String *)(v3 + *(int *)(a1 + 20)));
  v18._countAndFlagsBits = 0;
  v18._object = (void *)0xE000000000000000;
  String.LocalizationValue.StringInterpolation.appendLiteral(_:)(v18);
  LocalizedStringResource.init(stringInterpolation:)(v16);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v11 + 56))(v9, 1, 1, v10);
  v19 = type metadata accessor for DisplayRepresentation.Image(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 56))(v6, 1, 1, v19);
  return DisplayRepresentation.init(title:subtitle:image:)(v13, v9, v6);
}

uint64_t sub_10002C68C(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100008C7C(&qword_1000A5668, type metadata accessor for HomeEntity, (uint64_t)&unk_100087908);
  return InstanceDisplayRepresentable.localizedStringResource.getter(a1, v2);
}

unint64_t sub_10002C6E0()
{
  unint64_t result;

  result = qword_1000A5688;
  if (!qword_1000A5688)
  {
    result = swift_getWitnessTable(&unk_1000879B8, &type metadata for HomeEntityQuery);
    atomic_store(result, (unint64_t *)&qword_1000A5688);
  }
  return result;
}

unint64_t sub_10002C728()
{
  unint64_t result;

  result = qword_1000A5690[0];
  if (!qword_1000A5690[0])
  {
    result = swift_getWitnessTable(&unk_100087A18, &type metadata for HomeEntityQuery);
    atomic_store(result, qword_1000A5690);
  }
  return result;
}

uint64_t sub_10002C76C()
{
  return sub_100008C7C((unint64_t *)&qword_1000A55E0, type metadata accessor for HomeEntity, (uint64_t)&unk_100087740);
}

uint64_t sub_10002C798(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v3;

  v1[4] = a1;
  v2 = sub_10000527C(&qword_1000A5320);
  v1[5] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v2 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = (_QWORD *)swift_task_alloc(dword_1000A576C);
  v1[6] = v3;
  *v3 = v1;
  v3[1] = sub_10002C804;
  return sub_10002E174();
}

uint64_t sub_10002C804(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 48);
  *(_QWORD *)(*(_QWORD *)v1 + 56) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_10002C860, 0, 0);
}

uint64_t sub_10002C860()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  _BOOL4 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;

  if (qword_1000A4F10 != -1)
    swift_once(&qword_1000A4F10, sub_1000531A8);
  v1 = *(_QWORD *)(v0 + 56);
  v2 = type metadata accessor for Logger(0);
  sub_100014698(v2, (uint64_t)qword_1000A7A98);
  v3 = swift_bridgeObjectRetain_n(v1, 2);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.default.getter();
  v6 = os_log_type_enabled(v4, v5);
  v7 = *(_QWORD *)(v0 + 56);
  if (v6)
  {
    v8 = swift_slowAlloc(22, -1);
    v9 = swift_slowAlloc(64, -1);
    v22 = v9;
    *(_DWORD *)v8 = 136315394;
    *(_QWORD *)(v0 + 16) = sub_100023980(0xD000000000000013, 0x800000010008A5C0, &v22);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 16, v0 + 24, v8 + 4, v8 + 12);
    *(_WORD *)(v8 + 12) = 2080;
    v10 = type metadata accessor for HomeEntity(0);
    v11 = swift_bridgeObjectRetain(v7);
    v12 = Array.description.getter(v11, v10);
    v14 = v13;
    swift_bridgeObjectRelease(v7);
    *(_QWORD *)(v0 + 24) = sub_100023980(v12, v14, &v22);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 24, v0 + 32, v8 + 14, v8 + 22);
    swift_bridgeObjectRelease_n(v7, 2);
    swift_bridgeObjectRelease(v14);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "%s found homes %s", (uint8_t *)v8, 0x16u);
    swift_arrayDestroy(v9, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v9, -1, -1);
    swift_slowDealloc(v8, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n(v7, 2);
  }
  v15 = *(_QWORD *)(v0 + 56);
  v16 = *(_QWORD *)(v0 + 40);
  v17 = type metadata accessor for LocalizedStringResource(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 56))(v16, 1, 1, v17);
  v18 = type metadata accessor for HomeEntity(0);
  v19 = sub_100008C7C(&qword_1000A5640, type metadata accessor for HomeEntity, (uint64_t)&unk_1000877F8);
  v20 = sub_100008C7C(&qword_1000A54C0, type metadata accessor for HomeEntity, (uint64_t)&unk_1000878B0);
  IntentItemCollection.init<>(promptLabel:usesIndexedCollation:items:)(v16, 0, v15, v18, v19, v20);
  swift_task_dealloc(v16);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10002CB1C(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;

  v1[5] = a1;
  v2 = type metadata accessor for Logger(0);
  v1[6] = v2;
  v3 = *(_QWORD *)(v2 - 8);
  v1[7] = v3;
  v1[8] = swift_task_alloc((*(_QWORD *)(v3 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_10000527C(&qword_1000A54B8);
  v1[9] = v4;
  v5 = (*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v1[10] = swift_task_alloc(v5);
  v1[11] = swift_task_alloc(v5);
  v1[12] = swift_task_alloc(v5);
  return swift_task_switch(sub_10002CBC0, 0, 0);
}

uint64_t sub_10002CBC0()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  v1 = HomeWidget.shared.unsafeMutableAddressor();
  v2 = *v1;
  *(_QWORD *)(v0 + 104) = *v1;
  v3 = dword_1000A76AC;
  swift_retain(v2);
  v4 = (_QWORD *)swift_task_alloc(v3);
  *(_QWORD *)(v0 + 112) = v4;
  *v4 = v0;
  v4[1] = sub_10002CC20;
  return HomeWidget.manager.getter();
}

uint64_t sub_10002CC20(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v3 = *(_QWORD *)(*(_QWORD *)v1 + 104);
  v2 = *(_QWORD *)(*(_QWORD *)v1 + 112);
  *(_QWORD *)(*(_QWORD *)v1 + 120) = a1;
  swift_task_dealloc(v2);
  swift_release(v3);
  return swift_task_switch(sub_10002CC84, 0, 0);
}

uint64_t sub_10002CC84()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  _BOOL4 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  NSObject *v21;
  os_log_type_t v22;
  uint8_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;

  v1 = *(void **)(v0 + 120);
  if (v1)
  {
    v2 = *(_QWORD *)(v0 + 96);

    sub_10002BEF8(v2);
    if (qword_1000A4F10 != -1)
      swift_once(&qword_1000A4F10, sub_1000531A8);
    v4 = *(_QWORD *)(v0 + 88);
    v3 = *(_QWORD *)(v0 + 96);
    v5 = *(_QWORD *)(v0 + 56);
    v6 = *(_QWORD *)(v0 + 64);
    v7 = *(_QWORD *)(v0 + 48);
    v8 = sub_100014698(v7, (uint64_t)qword_1000A7A98);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(v6, v8, v7);
    v9 = sub_10002E760(v3, v4);
    v10 = Logger.logObject.getter(v9);
    v11 = static os_log_type_t.default.getter();
    v12 = os_log_type_enabled(v10, v11);
    v13 = *(_QWORD *)(v0 + 88);
    if (v12)
    {
      v14 = *(_QWORD *)(v0 + 80);
      v34 = *(_QWORD *)(v0 + 72);
      v35 = *(_QWORD *)(v0 + 56);
      v36 = *(_QWORD *)(v0 + 48);
      v37 = *(_QWORD *)(v0 + 64);
      v15 = swift_slowAlloc(22, -1);
      v16 = swift_slowAlloc(64, -1);
      v38 = v16;
      *(_DWORD *)v15 = 136315394;
      *(_QWORD *)(v0 + 24) = sub_100023980(0x52746C7561666564, 0xEF2928746C757365, &v38);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 24, v0 + 32, v15 + 4, v15 + 12);
      *(_WORD *)(v15 + 12) = 2080;
      sub_10002E760(v13, v14);
      v17 = String.init<A>(describing:)(v14, v34);
      v19 = v18;
      *(_QWORD *)(v0 + 32) = sub_100023980(v17, v18, &v38);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 32, v0 + 40, v15 + 14, v15 + 22);
      swift_bridgeObjectRelease(v19);
      sub_10002E7A8(v13);
      _os_log_impl((void *)&_mh_execute_header, v10, v11, "%s returning selected home: %s", (uint8_t *)v15, 0x16u);
      swift_arrayDestroy(v16, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v16, -1, -1);
      swift_slowDealloc(v15, -1, -1);

      (*(void (**)(uint64_t, uint64_t))(v35 + 8))(v37, v36);
    }
    else
    {
      v28 = *(_QWORD *)(v0 + 56);
      v27 = *(_QWORD *)(v0 + 64);
      v29 = *(_QWORD *)(v0 + 48);
      sub_10002E7A8(*(_QWORD *)(v0 + 88));

      (*(void (**)(uint64_t, uint64_t))(v28 + 8))(v27, v29);
    }
    sub_10002E7E8(*(_QWORD *)(v0 + 96), *(_QWORD *)(v0 + 40));
  }
  else
  {
    if (qword_1000A4F10 != -1)
      swift_once(&qword_1000A4F10, sub_1000531A8);
    v20 = sub_100014698(*(_QWORD *)(v0 + 48), (uint64_t)qword_1000A7A98);
    v21 = Logger.logObject.getter(v20);
    v22 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v21, v22))
    {
      v23 = (uint8_t *)swift_slowAlloc(12, -1);
      v24 = swift_slowAlloc(32, -1);
      v38 = v24;
      *(_DWORD *)v23 = 136315138;
      *(_QWORD *)(v0 + 16) = sub_100023980(0x52746C7561666564, 0xEF2928746C757365, &v38);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 16, v0 + 24, v23 + 4, v23 + 12);
      _os_log_impl((void *)&_mh_execute_header, v21, v22, "%s Error loading HMHomeManager", v23, 0xCu);
      swift_arrayDestroy(v24, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v24, -1, -1);
      swift_slowDealloc(v23, -1, -1);
    }

    v25 = *(_QWORD *)(v0 + 40);
    v26 = type metadata accessor for HomeEntity(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 56))(v25, 1, 1, v26);
  }
  v30 = *(_QWORD *)(v0 + 88);
  v31 = *(_QWORD *)(v0 + 80);
  v32 = *(_QWORD *)(v0 + 64);
  swift_task_dealloc(*(_QWORD *)(v0 + 96));
  swift_task_dealloc(v30);
  swift_task_dealloc(v31);
  swift_task_dealloc(v32);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10002D08C(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t (*v5)(uint64_t);

  v5 = (uint64_t (*)(uint64_t))((char *)&dword_1000A5788 + dword_1000A5788);
  v3 = (_QWORD *)swift_task_alloc(unk_1000A578C);
  *(_QWORD *)(v1 + 16) = v3;
  *v3 = v1;
  v3[1] = sub_1000228B8;
  return v5(a1);
}

uint64_t sub_10002D0EC(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;

  v3 = (_QWORD *)swift_task_alloc(dword_1000A5784);
  *(_QWORD *)(v1 + 16) = v3;
  *v3 = v1;
  v3[1] = sub_10001CEBC;
  return sub_10002C798(a1);
}

unint64_t sub_10002D140()
{
  unint64_t result;

  result = qword_1000A56A8;
  if (!qword_1000A56A8)
  {
    result = swift_getWitnessTable(&unk_100087A40, &type metadata for HomeEntityQuery);
    atomic_store(result, (unint64_t *)&qword_1000A56A8);
  }
  return result;
}

uint64_t sub_10002D184()
{
  return sub_1000229D8(&qword_1000A56B0, qword_1000A56B8, (uint64_t)&protocol conformance descriptor for IntentItemCollection<A>);
}

uint64_t sub_10002D1B0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;
  unint64_t v6;

  v5 = (_QWORD *)swift_task_alloc(async function pointer to EntityQuery.results()[1]);
  *(_QWORD *)(v2 + 16) = v5;
  v6 = sub_10002BC24();
  *v5 = v2;
  v5[1] = sub_100026DE0;
  return EntityQuery.results()(a1, a2, v6);
}

uint64_t sub_10002D21C(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;

  v3 = (_QWORD *)swift_task_alloc(dword_1000A577C);
  *(_QWORD *)(v1 + 16) = v3;
  *v3 = v1;
  v3[1] = sub_10001CEBC;
  return sub_10002CB1C(a1);
}

uint64_t sub_10002D26C(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v3;

  v1[2] = a1;
  v2 = sub_10000527C(&qword_1000A5320);
  v1[3] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v2 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = (_QWORD *)swift_task_alloc(dword_1000A576C);
  v1[4] = v3;
  *v3 = v1;
  v3[1] = sub_10002D2D8;
  return sub_10002E174();
}

uint64_t sub_10002D2D8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 32);
  *(_QWORD *)(*(_QWORD *)v1 + 40) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_10002D334, 0, 0);
}

uint64_t sub_10002D334()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = *(_QWORD *)(v0 + 40);
  v2 = *(_QWORD *)(v0 + 24);
  v3 = type metadata accessor for LocalizedStringResource(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 56))(v2, 1, 1, v3);
  v4 = type metadata accessor for HomeEntity(0);
  v5 = sub_100008C7C(&qword_1000A5640, type metadata accessor for HomeEntity, (uint64_t)&unk_1000877F8);
  v6 = sub_100008C7C(&qword_1000A54C0, type metadata accessor for HomeEntity, (uint64_t)&unk_1000878B0);
  IntentItemCollection.init<>(promptLabel:usesIndexedCollation:items:)(v2, 0, v1, v4, v5, v6);
  swift_task_dealloc(v2);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

ValueMetadata *type metadata accessor for HomeEntityQuery()
{
  return &type metadata for HomeEntityQuery;
}

uint64_t *sub_10002D420(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v12 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v12 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v12);
  }
  else
  {
    v7 = type metadata accessor for UUID(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = *(int *)(a3 + 20);
    v9 = (uint64_t *)((char *)a1 + v8);
    v10 = (uint64_t *)((char *)a2 + v8);
    v11 = v10[1];
    *v9 = *v10;
    v9[1] = v11;
    swift_bridgeObjectRetain(v11);
  }
  return a1;
}

uint64_t sub_10002D4B4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  return swift_bridgeObjectRelease(*(_QWORD *)(a1 + *(int *)(a2 + 20) + 8));
}

uint64_t sub_10002D4FC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;

  v6 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = (_QWORD *)(a1 + v7);
  v9 = (_QWORD *)(a2 + v7);
  v10 = v9[1];
  *v8 = *v9;
  v8[1] = v10;
  swift_bridgeObjectRetain(v10);
  return a1;
}

uint64_t sub_10002D564(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;

  v6 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = (_QWORD *)(a1 + v7);
  v9 = (_QWORD *)(a2 + v7);
  *v8 = *v9;
  v10 = v9[1];
  v11 = v8[1];
  v8[1] = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease(v11);
  return a1;
}

uint64_t sub_10002D5E0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  *(_OWORD *)(a1 + *(int *)(a3 + 20)) = *(_OWORD *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t sub_10002D63C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v6 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = (_QWORD *)(a1 + v7);
  v9 = (uint64_t *)(a2 + v7);
  v11 = *v9;
  v10 = v9[1];
  v12 = v8[1];
  *v8 = v11;
  v8[1] = v10;
  swift_bridgeObjectRelease(v12);
  return a1;
}

uint64_t sub_10002D6A8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10002D6B4);
}

uint64_t sub_10002D6B4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;

  v6 = type metadata accessor for UUID(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 20) + 8);
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  return (v9 + 1);
}

uint64_t sub_10002D734(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10002D740);
}

uint64_t sub_10002D740(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = type metadata accessor for UUID(0);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 20) + 8) = (a2 - 1);
  return result;
}

uint64_t sub_10002D7BC(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[2];

  result = type metadata accessor for UUID(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(result - 8) + 64;
    v4[1] = &unk_100087AB8;
    swift_initStructMetadata(a1, 256, 2, v4, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t sub_10002D82C(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_10002DF94(a1, a2, a3, (_QWORD *)*v3, &qword_1000A57B0, type metadata accessor for WidgetTileInfo);
  *v3 = result;
  return result;
}

uint64_t sub_10002D858(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_10002DF94(a1, a2, a3, (_QWORD *)*v3, &qword_1000A5798, (uint64_t (*)(_QWORD))&type metadata accessor for UUID);
  *v3 = result;
  return result;
}

uint64_t sub_10002D884(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_10002D930(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_10002D8A0(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_10002DF94(a1, a2, a3, (_QWORD *)*v3, &qword_1000A5538, type metadata accessor for AccessoryAndSceneEntity);
  *v3 = result;
  return result;
}

uint64_t sub_10002D8CC(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_10002DAAC(a1, a2, a3, (_QWORD *)*v3);
  *v3 = result;
  return result;
}

uint64_t sub_10002D8E8(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_10002DC94(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_10002D904(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_10002DF94(a1, a2, a3, (_QWORD *)*v3, &qword_1000A5770, type metadata accessor for HomeEntity);
  *v3 = result;
  return result;
}

uint64_t sub_10002D930(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_10000527C(&qword_1000A5790);
    v11 = (char *)swift_allocObject(v10, 16 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 17;
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * (v13 >> 4);
  }
  else
  {
    v11 = (char *)_swiftEmptyArrayStorage;
  }
  v14 = v11 + 32;
  v15 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v14 >= &v15[16 * v8])
      memmove(v14, v15, 16 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v15 >= &v14[16 * v8] || v14 >= &v15[16 * v8])
  {
    swift_arrayInitWithCopy(v14);
LABEL_30:
    swift_release(a4);
    return (uint64_t)v11;
  }
LABEL_32:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_10002DA98(char a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_10002DF94(a1, a2, a3, a4, &qword_1000A5538, type metadata accessor for AccessoryAndSceneEntity);
}

uint64_t sub_10002DAAC(char a1, int64_t a2, char a3, _QWORD *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  size_t v16;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  char *v24;
  unint64_t v25;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
LABEL_35:
        __break(1u);
        goto LABEL_36;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = a4[2];
  if (v7 <= v8)
    v9 = a4[2];
  else
    v9 = v7;
  if (!v9)
  {
    v15 = &_swiftEmptyArrayStorage;
    goto LABEL_19;
  }
  v10 = sub_10000527C(&qword_1000A57A8);
  v11 = *(_QWORD *)(sub_10000527C(&qword_1000A54C8) - 8);
  v12 = *(_QWORD *)(v11 + 72);
  v13 = *(unsigned __int8 *)(v11 + 80);
  v14 = (v13 + 32) & ~v13;
  v15 = (_QWORD *)swift_allocObject(v10, v14 + v12 * v9, v13 | 7);
  v16 = j__malloc_size(v15);
  if (!v12)
  {
    __break(1u);
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  if (v16 - v14 == 0x8000000000000000 && v12 == -1)
    goto LABEL_34;
  v15[2] = v8;
  v15[3] = 2 * ((uint64_t)(v16 - v14) / v12);
LABEL_19:
  v18 = sub_10000527C(&qword_1000A54C8);
  v19 = *(_QWORD *)(v18 - 8);
  v20 = (*(unsigned __int8 *)(v19 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v19 + 80);
  v21 = (char *)v15 + v20;
  v22 = (char *)a4 + v20;
  if ((a1 & 1) != 0)
  {
    if (v15 < a4 || v21 >= &v22[*(_QWORD *)(v19 + 72) * v8])
    {
      swift_arrayInitWithTakeFrontToBack(v21, v22, v8, v18);
    }
    else if (v15 != a4)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    a4[2] = 0;
    goto LABEL_32;
  }
  v23 = *(_QWORD *)(v19 + 72) * v8;
  v24 = &v21[v23];
  v25 = (unint64_t)&v22[v23];
  if (v22 >= v24 || (unint64_t)v21 >= v25)
  {
    swift_arrayInitWithCopy(v21);
LABEL_32:
    swift_release(a4);
    return (uint64_t)v15;
  }
LABEL_36:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_10002DC94(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_10000527C(&qword_1000A57A0);
    v11 = (char *)swift_allocObject(v10, 8 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 25;
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * (v13 >> 3);
  }
  else
  {
    v11 = (char *)_swiftEmptyArrayStorage;
  }
  v14 = v11 + 32;
  v15 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v14 >= &v15[8 * v8])
      memmove(v14, v15, 8 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v15 >= &v14[8 * v8] || v14 >= &v15[8 * v8])
  {
    memcpy(v14, v15, 8 * v8);
LABEL_30:
    swift_release(a4);
    return (uint64_t)v11;
  }
LABEL_32:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_10002DDF0(char a1, int64_t a2, char a3, _QWORD *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  size_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = a4[2];
  if (v7 <= v8)
    v9 = a4[2];
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_10000527C(&qword_1000A54E8);
    v11 = (_QWORD *)swift_allocObject(v10, 24 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    v11[2] = v8;
    v11[3] = 2 * ((uint64_t)(v12 - 32) / 24);
  }
  else
  {
    v11 = _swiftEmptyArrayStorage;
  }
  v13 = (unint64_t)(v11 + 4);
  v14 = (unint64_t)(a4 + 4);
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v13 >= v14 + 24 * v8)
      memmove(v11 + 4, a4 + 4, 24 * v8);
    a4[2] = 0;
    goto LABEL_28;
  }
  if (v14 >= v13 + 24 * v8 || v13 >= v14 + 24 * v8)
  {
    sub_10000527C(&qword_1000A54F0);
    swift_arrayInitWithCopy(v11 + 4);
LABEL_28:
    swift_release(a4);
    return (uint64_t)v11;
  }
LABEL_30:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_10002DF94(char a1, int64_t a2, char a3, _QWORD *a4, uint64_t *a5, uint64_t (*a6)(_QWORD))
{
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  size_t v19;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  char *v27;
  unint64_t v28;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v9 = a4[3];
    v10 = v9 >> 1;
    if ((uint64_t)(v9 >> 1) < a2)
    {
      if (v10 + 0x4000000000000000 < 0)
      {
LABEL_35:
        __break(1u);
        goto LABEL_36;
      }
      v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v10 = a2;
    }
  }
  else
  {
    v10 = a2;
  }
  v11 = a4[2];
  if (v10 <= v11)
    v12 = a4[2];
  else
    v12 = v10;
  if (!v12)
  {
    v18 = _swiftEmptyArrayStorage;
    goto LABEL_19;
  }
  v13 = sub_10000527C(a5);
  v14 = *(_QWORD *)(a6(0) - 8);
  v15 = *(_QWORD *)(v14 + 72);
  v16 = *(unsigned __int8 *)(v14 + 80);
  v17 = (v16 + 32) & ~v16;
  v18 = (_QWORD *)swift_allocObject(v13, v17 + v15 * v12, v16 | 7);
  v19 = j__malloc_size(v18);
  if (!v15)
  {
    __break(1u);
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  if (v19 - v17 == 0x8000000000000000 && v15 == -1)
    goto LABEL_34;
  v18[2] = v11;
  v18[3] = 2 * ((uint64_t)(v19 - v17) / v15);
LABEL_19:
  v21 = a6(0);
  v22 = *(_QWORD *)(v21 - 8);
  v23 = (*(unsigned __int8 *)(v22 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v22 + 80);
  v24 = (char *)v18 + v23;
  v25 = (char *)a4 + v23;
  if ((a1 & 1) != 0)
  {
    if (v18 < a4 || v24 >= &v25[*(_QWORD *)(v22 + 72) * v11])
    {
      swift_arrayInitWithTakeFrontToBack(v24, v25, v11, v21);
    }
    else if (v18 != a4)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    a4[2] = 0;
    goto LABEL_32;
  }
  v26 = *(_QWORD *)(v22 + 72) * v11;
  v27 = &v24[v26];
  v28 = (unint64_t)&v25[v26];
  if (v25 >= v27 || (unint64_t)v24 >= v28)
  {
    swift_arrayInitWithCopy(v24);
LABEL_32:
    swift_release(a4);
    return (uint64_t)v18;
  }
LABEL_36:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_10002E174()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = type metadata accessor for HomeEntity(0);
  v0[4] = v1;
  v2 = *(_QWORD *)(v1 - 8);
  v0[5] = v2;
  v0[6] = swift_task_alloc((*(_QWORD *)(v2 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = type metadata accessor for Logger(0);
  v0[7] = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v0[8] = v4;
  v0[9] = swift_task_alloc((*(_QWORD *)(v4 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_10002E1F8, 0, 0);
}

uint64_t sub_10002E1F8()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  v1 = HomeWidget.shared.unsafeMutableAddressor();
  v2 = *v1;
  *(_QWORD *)(v0 + 80) = *v1;
  v3 = dword_1000A76AC;
  swift_retain(v2);
  v4 = (_QWORD *)swift_task_alloc(v3);
  *(_QWORD *)(v0 + 88) = v4;
  *v4 = v0;
  v4[1] = sub_10002E258;
  return HomeWidget.manager.getter();
}

uint64_t sub_10002E258(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v3 = *(_QWORD *)(*(_QWORD *)v1 + 80);
  v2 = *(_QWORD *)(*(_QWORD *)v1 + 88);
  *(_QWORD *)(*(_QWORD *)v1 + 96) = a1;
  swift_task_dealloc(v2);
  swift_release(v3);
  return swift_task_switch(sub_10002E2BC, 0, 0);
}

uint64_t sub_10002E2BC()
{
  uint64_t v0;
  void *v1;
  _QWORD *v2;
  id v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  _BOOL4 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t result;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  id v28;
  void *v29;
  uint64_t v30;
  id v31;
  id v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  void *v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD *v49;

  v1 = *(void **)(v0 + 96);
  v2 = _swiftEmptyArrayStorage;
  if (!v1)
    goto LABEL_24;
  v3 = objc_msgSend(*(id *)(v0 + 96), "hf_orderedHomes");
  v4 = sub_100026D40();
  v5 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v3, v4);

  if (qword_1000A4F10 != -1)
    swift_once(&qword_1000A4F10, sub_1000531A8);
  v7 = *(_QWORD *)(v0 + 64);
  v6 = *(_QWORD *)(v0 + 72);
  v8 = *(_QWORD *)(v0 + 56);
  v9 = sub_100014698(v8, (uint64_t)qword_1000A7A98);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16))(v6, v9, v8);
  v10 = swift_bridgeObjectRetain_n(v5, 2);
  v11 = Logger.logObject.getter(v10);
  v12 = static os_log_type_t.default.getter();
  v13 = os_log_type_enabled(v11, v12);
  v15 = *(_QWORD *)(v0 + 64);
  v14 = *(_QWORD *)(v0 + 72);
  v16 = *(_QWORD *)(v0 + 56);
  v48 = v5;
  v43 = v1;
  if (v13)
  {
    v46 = *(_QWORD *)(v0 + 64);
    v42 = v0 + 16;
    v17 = swift_slowAlloc(22, -1);
    v44 = v14;
    v18 = (_QWORD *)swift_slowAlloc(64, -1);
    v49 = v18;
    *(_DWORD *)v17 = 136315394;
    *(_QWORD *)(v0 + 16) = sub_100023980(0x69746E45656D6F68, 0xEE00292873656974, (uint64_t *)&v49);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 16, v0 + 24, v17 + 4, v17 + 12);
    *(_WORD *)(v17 + 12) = 2080;
    swift_bridgeObjectRetain(v48);
    v19 = Array.description.getter(v48, v4);
    v21 = v20;
    swift_bridgeObjectRelease(v48);
    *(_QWORD *)(v0 + 24) = sub_100023980(v19, v21, (uint64_t *)&v49);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 24, v0 + 32, v17 + 14, v17 + 22);
    swift_bridgeObjectRelease(v21);
    swift_bridgeObjectRelease_n(v48, 2);
    _os_log_impl((void *)&_mh_execute_header, v11, v12, "%s found homes %s", (uint8_t *)v17, 0x16u);
    swift_arrayDestroy(v18, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v18, -1, -1);
    v22 = v17;
    v5 = v48;
    swift_slowDealloc(v22, -1, -1);

    (*(void (**)(uint64_t, uint64_t))(v46 + 8))(v44, v16);
  }
  else
  {
    swift_bridgeObjectRelease_n(v5, 2);

    (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v14, v16);
  }
  if (!((unint64_t)v5 >> 62))
  {
    v23 = *(_QWORD *)((v5 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v23)
      goto LABEL_9;
LABEL_22:

LABEL_23:
    swift_bridgeObjectRelease(v5);
LABEL_24:
    v41 = *(_QWORD *)(v0 + 48);
    swift_task_dealloc(*(_QWORD *)(v0 + 72));
    swift_task_dealloc(v41);
    return (*(uint64_t (**)(_QWORD *))(v0 + 8))(v2);
  }
  if (v5 < 0)
    v40 = v5;
  else
    v40 = v5 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v5);
  v23 = _CocoaArrayWrapper.endIndex.getter(v40);
  swift_bridgeObjectRelease(v5);
  if (!v23)
    goto LABEL_22;
LABEL_9:
  v49 = _swiftEmptyArrayStorage;
  result = sub_10002D904(0, v23 & ~(v23 >> 63), 0);
  if ((v23 & 0x8000000000000000) == 0)
  {
    v25 = 0;
    v26 = *(_QWORD *)(v0 + 40);
    v45 = v5 & 0xC000000000000001;
    v47 = *(_QWORD *)(v0 + 32);
    v2 = v49;
    v27 = v23;
    do
    {
      if (v45)
        v28 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v25, v5);
      else
        v28 = *(id *)(v5 + 8 * v25 + 32);
      v29 = v28;
      v30 = *(_QWORD *)(v0 + 48);
      v31 = objc_msgSend(v28, "uniqueIdentifier", v42);
      static UUID._unconditionallyBridgeFromObjectiveC(_:)(v31);

      v32 = objc_msgSend(v29, "name");
      v33 = static String._unconditionallyBridgeFromObjectiveC(_:)(v32);
      v35 = v34;

      v36 = (uint64_t *)(v30 + *(int *)(v47 + 20));
      *v36 = v33;
      v36[1] = v35;
      v49 = v2;
      v38 = v2[2];
      v37 = v2[3];
      if (v38 >= v37 >> 1)
      {
        sub_10002D904(v37 > 1, v38 + 1, 1);
        v2 = v49;
      }
      v39 = *(_QWORD *)(v0 + 48);
      ++v25;
      v2[2] = v38 + 1;
      sub_10002E71C(v39, (uint64_t)v2+ ((*(unsigned __int8 *)(v26 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v26 + 80))+ *(_QWORD *)(v26 + 72) * v38);
      v5 = v48;
    }
    while (v27 != v25);

    goto LABEL_23;
  }
  __break(1u);
  return result;
}

uint64_t sub_10002E71C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for HomeEntity(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_10002E760(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10000527C(&qword_1000A54B8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10002E7A8(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_10000527C(&qword_1000A54B8);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_10002E7E8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10000527C(&qword_1000A54B8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_10002E830(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  _QWORD *v10;

  v1[4] = a1;
  v2 = type metadata accessor for UUID(0);
  v1[5] = v2;
  v3 = *(_QWORD *)(v2 - 8);
  v1[6] = v3;
  v1[7] = swift_task_alloc((*(_QWORD *)(v3 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_10000527C(&qword_1000A5060);
  v1[8] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for Logger(0);
  v1[9] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v1[10] = v6;
  v1[11] = swift_task_alloc((*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for HomeEntity(0);
  v1[12] = v7;
  v8 = *(_QWORD *)(v7 - 8);
  v1[13] = v8;
  v9 = (*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v1[14] = swift_task_alloc(v9);
  v1[15] = swift_task_alloc(v9);
  v10 = (_QWORD *)swift_task_alloc(dword_1000A576C);
  v1[16] = v10;
  *v10 = v1;
  v10[1] = sub_10002E924;
  return sub_10002E174();
}

uint64_t sub_10002E924(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 128);
  *(_QWORD *)(*(_QWORD *)v1 + 136) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_10002E980, 0, 0);
}

uint64_t sub_10002E980()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(uint64_t, uint64_t, uint64_t);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  NSObject *v31;
  os_log_type_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  _QWORD *v58;

  v1 = *(_QWORD *)(v0 + 32);
  v2 = *(_QWORD *)(v0 + 136);
  v58 = _swiftEmptyArrayStorage;
  v3 = *(_QWORD *)(v2 + 16);
  swift_bridgeObjectRetain(v1);
  v52 = v3;
  if (v3)
  {
    v4 = 0;
    v5 = *(_QWORD *)(v0 + 104);
    v6 = *(_QWORD *)(v0 + 48);
    v54 = *(_QWORD *)(v5 + 72);
    v46 = (*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
    v50 = v2 + v46;
    v47 = _swiftEmptyArrayStorage;
    v48 = v1;
    do
    {
      v56 = v4;
      sub_10002EE74(v50 + v4 * v54, *(_QWORD *)(v0 + 120));
      v10 = *(_QWORD *)(v1 + 16);
      v11 = *(_QWORD *)(v0 + 32);
      if (v10)
      {
        v12 = v11 + ((*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80));
        swift_bridgeObjectRetain(v11);
        v13 = *(_QWORD *)(v6 + 72);
        v14 = *(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16);
        while (1)
        {
          v15 = *(_QWORD *)(v0 + 64);
          v16 = *(_QWORD *)(v0 + 40);
          v14(v15, v12, v16);
          v7 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v6 + 56);
          v7(v15, 0, 1, v16);
          if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v15, 1, v16) == 1)
            break;
          v17 = *(_QWORD *)(v0 + 120);
          v18 = *(_QWORD *)(v0 + 56);
          v19 = *(_QWORD *)(v0 + 40);
          (*(void (**)(uint64_t, _QWORD, uint64_t))(v6 + 32))(v18, *(_QWORD *)(v0 + 64), v19);
          LOBYTE(v17) = static UUID.== infix(_:_:)(v18, v17);
          (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v18, v19);
          if ((v17 & 1) != 0)
          {
            v21 = *(_QWORD *)(v0 + 112);
            v20 = *(_QWORD *)(v0 + 120);
            swift_bridgeObjectRelease(*(_QWORD *)(v0 + 32));
            sub_10002E71C(v20, v21);
            v22 = v47;
            if ((swift_isUniquelyReferenced_nonNull_native(v47) & 1) == 0)
            {
              sub_10002D904(0, v47[2] + 1, 1);
              v22 = v58;
            }
            v1 = v48;
            v9 = v56;
            v24 = v22[2];
            v23 = v22[3];
            if (v24 >= v23 >> 1)
            {
              sub_10002D904(v23 > 1, v24 + 1, 1);
              v22 = v58;
            }
            v25 = *(_QWORD *)(v0 + 112);
            v22[2] = v24 + 1;
            v47 = v22;
            sub_10002E71C(v25, (uint64_t)v22 + v46 + v24 * v54);
            goto LABEL_6;
          }
          v12 += v13;
          if (!--v10)
            goto LABEL_4;
        }
      }
      else
      {
        swift_bridgeObjectRetain(v11);
        v7 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v6 + 56);
LABEL_4:
        v7(*(_QWORD *)(v0 + 64), 1, 1, *(_QWORD *)(v0 + 40));
      }
      v8 = *(_QWORD *)(v0 + 120);
      swift_bridgeObjectRelease(*(_QWORD *)(v0 + 32));
      sub_10002EEB8(v8);
      v1 = v48;
      v9 = v56;
LABEL_6:
      v4 = v9 + 1;
    }
    while (v4 != v52);
    v2 = *(_QWORD *)(v0 + 136);
    v1 = *(_QWORD *)(v0 + 32);
  }
  else
  {
    v47 = _swiftEmptyArrayStorage;
  }
  swift_bridgeObjectRelease(v1);
  swift_bridgeObjectRelease(v2);
  if (qword_1000A4F10 != -1)
    swift_once(&qword_1000A4F10, sub_1000531A8);
  v26 = *(_QWORD *)(v0 + 80);
  v27 = *(_QWORD *)(v0 + 88);
  v28 = *(_QWORD *)(v0 + 72);
  v29 = sub_100014698(v28, (uint64_t)qword_1000A7A98);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v26 + 16))(v27, v29, v28);
  v30 = swift_bridgeObjectRetain_n(v47, 2);
  v31 = Logger.logObject.getter(v30);
  v32 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v31, v32))
  {
    v49 = *(_QWORD *)(v0 + 96);
    v53 = *(_QWORD *)(v0 + 80);
    v55 = *(_QWORD *)(v0 + 72);
    v57 = *(_QWORD *)(v0 + 88);
    v33 = swift_slowAlloc(22, -1);
    v51 = (_QWORD *)swift_slowAlloc(64, -1);
    v58 = v51;
    *(_DWORD *)v33 = 136315394;
    *(_QWORD *)(v0 + 16) = sub_100023980(0x7365697469746E65, 0xEE00293A726F6628, (uint64_t *)&v58);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 16, v0 + 24, v33 + 4, v33 + 12);
    *(_WORD *)(v33 + 12) = 2080;
    v34 = swift_bridgeObjectRetain(v47);
    v35 = Array.description.getter(v34, v49);
    v37 = v36;
    swift_release(v47);
    *(_QWORD *)(v0 + 24) = sub_100023980(v35, v37, (uint64_t *)&v58);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 24, v0 + 32, v33 + 14, v33 + 22);
    swift_bridgeObjectRelease(v37);
    swift_release_n(v47, 2);
    _os_log_impl((void *)&_mh_execute_header, v31, v32, "%s matched homes %s", (uint8_t *)v33, 0x16u);
    swift_arrayDestroy(v51, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v51, -1, -1);
    swift_slowDealloc(v33, -1, -1);

    (*(void (**)(uint64_t, uint64_t))(v53 + 8))(v57, v55);
  }
  else
  {
    v38 = *(_QWORD *)(v0 + 80);
    v39 = *(_QWORD *)(v0 + 88);
    v40 = *(_QWORD *)(v0 + 72);
    swift_release_n(v47, 2);

    (*(void (**)(uint64_t, uint64_t))(v38 + 8))(v39, v40);
  }
  v41 = *(_QWORD *)(v0 + 112);
  v42 = *(_QWORD *)(v0 + 88);
  v44 = *(_QWORD *)(v0 + 56);
  v43 = *(_QWORD *)(v0 + 64);
  swift_task_dealloc(*(_QWORD *)(v0 + 120));
  swift_task_dealloc(v41);
  swift_task_dealloc(v42);
  swift_task_dealloc(v43);
  swift_task_dealloc(v44);
  return (*(uint64_t (**)(_QWORD *))(v0 + 8))(v47);
}

uint64_t sub_10002EE74(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for HomeEntity(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10002EEB8(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for HomeEntity(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t FeatureFlagsKey.isEnabled.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  _QWORD v6[5];

  v3 = a1;
  v6[3] = a1;
  v6[4] = a2;
  v4 = sub_10002EF50(v6);
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 16))(v4, v2, v3);
  LOBYTE(v3) = isFeatureEnabled(_:)(v6);
  sub_100023FC0(v6);
  return v3 & 1;
}

_QWORD *sub_10002EF50(_QWORD *a1)
{
  _QWORD *v1;
  uint64_t v2;

  v1 = a1;
  if ((*(_BYTE *)(*(_QWORD *)(a1[3] - 8) + 82) & 2) != 0)
  {
    *a1 = swift_allocBox();
    return (_QWORD *)v2;
  }
  return v1;
}

_BYTE *initializeBufferWithCopyOfBuffer for HomeKitFeatures(_BYTE *result, _BYTE *a2)
{
  *result = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for HomeKitFeatures(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFE)
    goto LABEL_17;
  if (a2 + 2 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 2) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 2;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 2;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 2;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 3;
  v8 = v6 - 3;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for HomeKitFeatures(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_10002F074 + 4 * byte_100087AD5[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_10002F0A8 + 4 * byte_100087AD0[v4]))();
}

uint64_t sub_10002F0A8(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10002F0B0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10002F0B8);
  return result;
}

uint64_t sub_10002F0C4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10002F0CCLL);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_10002F0D0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10002F0D8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10002F0E4(unsigned __int8 *a1)
{
  return *a1;
}

_BYTE *sub_10002F0EC(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

ValueMetadata *type metadata accessor for HomeKitFeatures()
{
  return &type metadata for HomeKitFeatures;
}

unint64_t sub_10002F108()
{
  unint64_t result;

  result = qword_1000A57B8;
  if (!qword_1000A57B8)
  {
    result = swift_getWitnessTable(&unk_100087B34, &type metadata for HomeKitFeatures);
    atomic_store(result, (unint64_t *)&qword_1000A57B8);
  }
  return result;
}

BOOL sub_10002F14C(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

Swift::Int sub_10002F160()
{
  unsigned __int8 *v0;
  Swift::UInt v1;
  _QWORD v3[9];

  v1 = *v0;
  Hasher.init(_seed:)(v3, 0);
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void sub_10002F1A4()
{
  unsigned __int8 *v0;

  Hasher._combine(_:)(*v0);
}

Swift::Int sub_10002F1CC(uint64_t a1)
{
  unsigned __int8 *v1;
  Swift::UInt v2;
  _QWORD v4[9];

  v2 = *v1;
  Hasher.init(_seed:)(v4, a1);
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

const char *sub_10002F20C()
{
  return "Home";
}

const char *sub_10002F220()
{
  _BYTE *v0;
  const char *v1;

  v1 = "RestrictedGuest";
  if (*v0 != 1)
    v1 = "ResidentSelection";
  if (*v0)
    return v1;
  else
    return "d0d2700c4dee4686a15d55";
}

unint64_t sub_10002F268(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t result;
  char v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v2 = sub_10000527C(&qword_1000A5220);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v24 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = *(_QWORD *)(a1 + 16);
  if (!v6)
  {
    v8 = &_swiftEmptyDictionarySingleton;
LABEL_9:
    v23 = a1;
LABEL_10:
    swift_bridgeObjectRelease(v23);
    return (unint64_t)v8;
  }
  sub_10000527C(&qword_1000A5230);
  v7 = static _DictionaryStorage.allocate(capacity:)(v6);
  v8 = (_QWORD *)v7;
  v9 = *(_QWORD *)(a1 + 16);
  if (!v9)
    goto LABEL_9;
  v10 = &v5[*(int *)(v2 + 48)];
  v11 = v7 + 64;
  v12 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v25 = a1;
  v13 = a1 + v12;
  v14 = *(_QWORD *)(v3 + 72);
  swift_retain(v7);
  while (1)
  {
    sub_100026CB4(v13, (uint64_t)v5, &qword_1000A5220);
    result = sub_10001A558((uint64_t)v5);
    if ((v16 & 1) != 0)
      break;
    v17 = result;
    *(_QWORD *)(v11 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    v18 = v8[6];
    v19 = type metadata accessor for UUID(0);
    (*(void (**)(unint64_t, char *, uint64_t))(*(_QWORD *)(v19 - 8) + 32))(v18 + *(_QWORD *)(*(_QWORD *)(v19 - 8) + 72) * v17, v5, v19);
    result = (unint64_t)sub_10001B9CC(v10, (_OWORD *)(v8[7] + 32 * v17));
    v20 = v8[2];
    v21 = __OFADD__(v20, 1);
    v22 = v20 + 1;
    if (v21)
      goto LABEL_12;
    v8[2] = v22;
    v13 += v14;
    if (!--v9)
    {
      swift_release(v8);
      v23 = v25;
      goto LABEL_10;
    }
  }
  __break(1u);
LABEL_12:
  __break(1u);
  return result;
}

unint64_t sub_10002F404(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t result;
  char v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  BOOL v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v2 = sub_10000527C(&qword_1000A58B0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v23 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = *(_QWORD *)(a1 + 16);
  if (!v6)
  {
    v8 = &_swiftEmptyDictionarySingleton;
LABEL_9:
    v22 = a1;
LABEL_10:
    swift_bridgeObjectRelease(v22);
    return (unint64_t)v8;
  }
  sub_10000527C(&qword_1000A58B8);
  v7 = static _DictionaryStorage.allocate(capacity:)(v6);
  v8 = (_QWORD *)v7;
  v9 = *(_QWORD *)(a1 + 16);
  if (!v9)
    goto LABEL_9;
  v10 = v7 + 64;
  v11 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v24 = a1;
  v12 = a1 + v11;
  v13 = *(_QWORD *)(v3 + 72);
  swift_retain(v7);
  while (1)
  {
    sub_100026CB4(v12, (uint64_t)v5, &qword_1000A58B0);
    result = sub_10001B7E8();
    if ((v15 & 1) != 0)
      break;
    v16 = result;
    *(_QWORD *)(v10 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    v17 = v8[7];
    v18 = type metadata accessor for DisplayRepresentation(0);
    result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(*(_QWORD *)(v18 - 8) + 32))(v17 + *(_QWORD *)(*(_QWORD *)(v18 - 8) + 72) * v16, v5, v18);
    v19 = v8[2];
    v20 = __OFADD__(v19, 1);
    v21 = v19 + 1;
    if (v20)
      goto LABEL_12;
    v8[2] = v21;
    v12 += v13;
    if (!--v9)
    {
      swift_release(v8);
      v22 = v24;
      goto LABEL_10;
    }
  }
  __break(1u);
LABEL_12:
  __break(1u);
  return result;
}

unint64_t sub_10002F584(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t result;
  char v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  BOOL v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v2 = sub_10000527C(&qword_1000A58D0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v23 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = *(_QWORD *)(a1 + 16);
  if (!v6)
  {
    v8 = &_swiftEmptyDictionarySingleton;
LABEL_9:
    v22 = a1;
LABEL_10:
    swift_bridgeObjectRelease(v22);
    return (unint64_t)v8;
  }
  sub_10000527C(&qword_1000A58D8);
  v7 = static _DictionaryStorage.allocate(capacity:)(v6);
  v8 = (_QWORD *)v7;
  v9 = *(_QWORD *)(a1 + 16);
  if (!v9)
    goto LABEL_9;
  v10 = v7 + 64;
  v11 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v24 = a1;
  v12 = a1 + v11;
  v13 = *(_QWORD *)(v3 + 72);
  swift_retain(v7);
  while (1)
  {
    sub_100026CB4(v12, (uint64_t)v5, &qword_1000A58D0);
    result = sub_10001B7E8();
    if ((v15 & 1) != 0)
      break;
    v16 = result;
    *(_QWORD *)(v10 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    v17 = v8[7];
    v18 = sub_10000527C(&qword_1000A58E0);
    result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(*(_QWORD *)(v18 - 8) + 32))(v17 + *(_QWORD *)(*(_QWORD *)(v18 - 8) + 72) * v16, v5, v18);
    v19 = v8[2];
    v20 = __OFADD__(v19, 1);
    v21 = v19 + 1;
    if (v20)
      goto LABEL_12;
    v8[2] = v21;
    v12 += v13;
    if (!--v9)
    {
      swift_release(v8);
      v22 = v24;
      goto LABEL_10;
    }
  }
  __break(1u);
LABEL_12:
  __break(1u);
  return result;
}

unint64_t sub_10002F708(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t result;
  char v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v2 = sub_10000527C(&qword_1000A5A08);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v24 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = *(_QWORD *)(a1 + 16);
  if (!v6)
  {
    v8 = &_swiftEmptyDictionarySingleton;
LABEL_9:
    v23 = a1;
LABEL_10:
    swift_bridgeObjectRelease(v23);
    return (unint64_t)v8;
  }
  sub_10000527C(&qword_1000A5A10);
  v7 = static _DictionaryStorage.allocate(capacity:)(v6);
  v8 = (_QWORD *)v7;
  v9 = *(_QWORD *)(a1 + 16);
  if (!v9)
    goto LABEL_9;
  v10 = *(int *)(v2 + 48);
  v11 = v7 + 64;
  v12 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v25 = a1;
  v13 = a1 + v12;
  v14 = *(_QWORD *)(v3 + 72);
  swift_retain(v7);
  while (1)
  {
    sub_100026CB4(v13, (uint64_t)v5, &qword_1000A5A08);
    result = sub_10001A558((uint64_t)v5);
    if ((v16 & 1) != 0)
      break;
    v17 = result;
    *(_QWORD *)(v11 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    v18 = v8[6];
    v19 = type metadata accessor for UUID(0);
    result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(*(_QWORD *)(v19 - 8) + 32))(v18 + *(_QWORD *)(*(_QWORD *)(v19 - 8) + 72) * v17, v5, v19);
    *(_QWORD *)(v8[7] + 8 * v17) = *(_QWORD *)&v5[v10];
    v20 = v8[2];
    v21 = __OFADD__(v20, 1);
    v22 = v20 + 1;
    if (v21)
      goto LABEL_12;
    v8[2] = v22;
    v13 += v14;
    if (!--v9)
    {
      swift_release(v8);
      v23 = v25;
      goto LABEL_10;
    }
  }
  __break(1u);
LABEL_12:
  __break(1u);
  return result;
}

unint64_t sub_10002F89C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t result;
  char v11;
  uint64_t *v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;

  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
  {
    v4 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_10000527C(&qword_1000A5A18);
  v3 = static _DictionaryStorage.allocate(capacity:)(v2);
  v4 = (_QWORD *)v3;
  v5 = *(_QWORD *)(a1 + 16);
  if (!v5)
  {
LABEL_9:
    swift_bridgeObjectRelease(a1);
    return (unint64_t)v4;
  }
  swift_retain(v3);
  v6 = (uint64_t *)(a1 + 48);
  while (1)
  {
    v7 = *(v6 - 2);
    v8 = *(v6 - 1);
    v9 = *v6;
    swift_bridgeObjectRetain(v8);
    result = sub_10001A4C4(v7, v8);
    if ((v11 & 1) != 0)
      break;
    *(_QWORD *)((char *)v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v12 = (uint64_t *)(v4[6] + 16 * result);
    *v12 = v7;
    v12[1] = v8;
    *(_QWORD *)(v4[7] + 8 * result) = v9;
    v13 = v4[2];
    v14 = __OFADD__(v13, 1);
    v15 = v13 + 1;
    if (v14)
      goto LABEL_11;
    v6 += 3;
    v4[2] = v15;
    if (!--v5)
    {
      swift_release(v4);
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_10002F9AC()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v9;

  v0 = sub_10000527C(&qword_1000A5320);
  __chkstk_darwin(v0);
  v2 = (char *)&v9 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = type metadata accessor for LocalizedStringResource(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for TypeDisplayRepresentation(0);
  sub_10001D27C(v7, qword_1000A79F0);
  sub_100014698(v7, (uint64_t)qword_1000A79F0);
  LocalizedStringResource.init(stringLiteral:)(0x70656544656D6F48, 0xED0000736B6E694CLL);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v4 + 56))(v2, 1, 1, v3);
  return TypeDisplayRepresentation.init(name:numericFormat:)(v6, v2);
}

unint64_t sub_10002FAC4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(char *, uint64_t, uint64_t, uint64_t);
  char *v20;
  uint64_t v21;
  char *v22;
  unint64_t result;
  uint64_t v24;
  char *v25;
  char *v26;

  v0 = sub_10000527C(&qword_1000A5500);
  __chkstk_darwin(v0);
  v26 = (char *)&v24 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v2 = sub_10000527C(&qword_1000A5320);
  __chkstk_darwin(v2);
  v25 = (char *)&v24 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = type metadata accessor for LocalizedStringResource.BundleDescription(0);
  v4 = *(_QWORD *)(v24 - 8);
  __chkstk_darwin(v24);
  v6 = (char *)&v24 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for Locale(0);
  __chkstk_darwin(v7);
  v8 = type metadata accessor for String.LocalizationValue(0);
  __chkstk_darwin(v8);
  v10 = (char *)&v24 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for LocalizedStringResource(0);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v14 = (char *)&v24 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = sub_10000527C(&qword_1000A58A8);
  v16 = sub_10000527C(&qword_1000A58B0);
  v17 = swift_allocObject(v15, ((*(unsigned __int8 *)(*(_QWORD *)(v16 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v16 - 8) + 80))+ *(_QWORD *)(*(_QWORD *)(v16 - 8) + 72), *(unsigned __int8 *)(*(_QWORD *)(v16 - 8) + 80) | 7);
  *(_OWORD *)(v17 + 16) = xmmword_100086C80;
  v18 = String.LocalizationValue.init(stringLiteral:)(0xD000000000000012, 0x800000010008A950);
  static Locale.current.getter(v18);
  (*(void (**)(char *, _QWORD, uint64_t))(v4 + 104))(v6, enum case for LocalizedStringResource.BundleDescription.main(_:), v24);
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v10, 0xD000000000000027);
  v19 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v12 + 56);
  v20 = v25;
  v19(v25, 1, 1, v11);
  v21 = type metadata accessor for DisplayRepresentation.Image(0);
  v22 = v26;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 56))(v26, 1, 1, v21);
  DisplayRepresentation.init(title:subtitle:image:)(v14, v20, v22);
  result = sub_10002F404(v17);
  qword_1000A7A08 = result;
  return result;
}

uint64_t sub_10002FD90()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;

  v0 = sub_10000527C(&qword_1000A58C0);
  sub_10001D27C(v0, qword_1000A7A10);
  sub_100014698(v0, (uint64_t)qword_1000A7A10);
  v1 = sub_10000527C(&qword_1000A58C8);
  v2 = *(_QWORD *)(sub_10000527C(&qword_1000A58D0) - 8);
  v3 = swift_allocObject(v1, ((*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80))+ *(_QWORD *)(v2 + 72), *(unsigned __int8 *)(v2 + 80) | 7);
  *(_OWORD *)(v3 + 16) = xmmword_100086C80;
  v4 = sub_10002FF5C();
  EnumURLRepresentation.EnumSingleURLRepresentation.init(stringLiteral:)(0xD000000000000011, 0x800000010008A9A0, &type metadata for HomeAppDeepLinks, v4);
  v5 = sub_10002F584(v3);
  return EnumURLRepresentation.init(_:)(v5, &type metadata for HomeAppDeepLinks, v4);
}

unint64_t sub_10002FE94()
{
  unint64_t result;

  result = qword_1000A57D0;
  if (!qword_1000A57D0)
  {
    result = swift_getWitnessTable(&unk_100087BA4, &type metadata for HomeAppDeepLinks);
    atomic_store(result, (unint64_t *)&qword_1000A57D0);
  }
  return result;
}

uint64_t sub_10002FEE4@<X0>(uint64_t *a1@<X0>, BOOL *a2@<X8>)
{
  Swift::String v3;
  void *v4;
  Swift::Int v5;
  uint64_t result;

  v3._countAndFlagsBits = *a1;
  v4 = (void *)a1[1];
  v3._object = v4;
  v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_10009DF28, v3);
  result = swift_bridgeObjectRelease(v4);
  *a2 = v5 != 0;
  return result;
}

uint64_t sub_10002FF34@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = sub_1000316D0();
  *a1 = result;
  a1[1] = v3;
  return result;
}

unint64_t sub_10002FF5C()
{
  unint64_t result;

  result = qword_1000A57D8;
  if (!qword_1000A57D8)
  {
    result = swift_getWitnessTable(&unk_100087C7C, &type metadata for HomeAppDeepLinks);
    atomic_store(result, (unint64_t *)&qword_1000A57D8);
  }
  return result;
}

unint64_t sub_10002FFA4()
{
  unint64_t result;

  result = qword_1000A57E0;
  if (!qword_1000A57E0)
  {
    result = swift_getWitnessTable(&unk_100087CBC, &type metadata for HomeAppDeepLinks);
    atomic_store(result, (unint64_t *)&qword_1000A57E0);
  }
  return result;
}

uint64_t sub_10002FFE8@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  if (qword_1000A4ED0 != -1)
    swift_once(&qword_1000A4ED0, sub_10002FD90);
  v2 = sub_10000527C(&qword_1000A58C0);
  v3 = sub_100014698(v2, (uint64_t)qword_1000A7A10);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 16))(a1, v3, v2);
}

unint64_t sub_100030060()
{
  unint64_t result;

  result = qword_1000A57E8;
  if (!qword_1000A57E8)
  {
    result = swift_getWitnessTable(&unk_100087CE4, &type metadata for HomeAppDeepLinks);
    atomic_store(result, (unint64_t *)&qword_1000A57E8);
  }
  return result;
}

unint64_t sub_1000300A8()
{
  unint64_t result;

  result = qword_1000A57F0;
  if (!qword_1000A57F0)
  {
    result = swift_getWitnessTable(&unk_100087D1C, &type metadata for HomeAppDeepLinks);
    atomic_store(result, (unint64_t *)&qword_1000A57F0);
  }
  return result;
}

unint64_t sub_1000300F0()
{
  unint64_t result;

  result = qword_1000A57F8;
  if (!qword_1000A57F8)
  {
    result = swift_getWitnessTable(&unk_100087C0C, &type metadata for HomeAppDeepLinks);
    atomic_store(result, (unint64_t *)&qword_1000A57F8);
  }
  return result;
}

void *sub_100030134()
{
  return &protocol witness table for String;
}

uint64_t sub_100030140(uint64_t a1)
{
  uint64_t v1;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = sub_100031930();
  v4 = URLRepresentableEnum.urlRepresentationParameter.getter(a1, v3);
  return sub_100031A78(*(uint64_t (**)(uint64_t, uint64_t))(v1 + 8), v1, v4, v5);
}

unint64_t sub_10003018C()
{
  unint64_t result;

  result = qword_1000A5808;
  if (!qword_1000A5808)
  {
    result = swift_getWitnessTable(&unk_100087D4C, &type metadata for HomeAppDeepLinks);
    atomic_store(result, (unint64_t *)&qword_1000A5808);
  }
  return result;
}

unint64_t sub_1000301D4()
{
  unint64_t result;

  result = qword_1000A5810;
  if (!qword_1000A5810)
  {
    result = swift_getWitnessTable(&unk_100087D74, &type metadata for HomeAppDeepLinks);
    atomic_store(result, (unint64_t *)&qword_1000A5810);
  }
  return result;
}

unint64_t sub_10003021C()
{
  unint64_t result;

  result = qword_1000A5818;
  if (!qword_1000A5818)
  {
    result = swift_getWitnessTable(&unk_100087D9C, &type metadata for HomeAppDeepLinks);
    atomic_store(result, (unint64_t *)&qword_1000A5818);
  }
  return result;
}

unint64_t sub_100030264()
{
  unint64_t result;

  result = qword_1000A5820;
  if (!qword_1000A5820)
  {
    result = swift_getWitnessTable(&unk_100087DF4, &type metadata for HomeAppDeepLinks);
    atomic_store(result, (unint64_t *)&qword_1000A5820);
  }
  return result;
}

uint64_t sub_1000302A8@<X0>(uint64_t a1@<X8>)
{
  return sub_100030CF8(&qword_1000A4EC0, (uint64_t (*)(_QWORD))&type metadata accessor for TypeDisplayRepresentation, (uint64_t)qword_1000A79F0, (uint64_t)sub_10002F9AC, a1);
}

uint64_t sub_1000302CC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100030C94(a1, a2, a3, (uint64_t (*)(void))sub_10002FF5C, (uint64_t)&opaque type descriptor for <<opaque return type of static AppEnum.defaultResolverSpecification>>);
}

uint64_t sub_1000302E0(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10002FF5C();
  return static AppEnum.defaultResolverSpecification.getter(a1, v2);
}

unint64_t sub_10003031C()
{
  unint64_t result;

  result = qword_1000A5828;
  if (!qword_1000A5828)
  {
    result = swift_getWitnessTable(&unk_100087E34, &type metadata for HomeAppDeepLinks);
    atomic_store(result, (unint64_t *)&qword_1000A5828);
  }
  return result;
}

unint64_t sub_100030364()
{
  unint64_t result;

  result = qword_1000A5830;
  if (!qword_1000A5830)
  {
    result = swift_getWitnessTable(&unk_100087E5C, &type metadata for HomeAppDeepLinks);
    atomic_store(result, (unint64_t *)&qword_1000A5830);
  }
  return result;
}

unint64_t sub_1000303AC()
{
  unint64_t result;

  result = qword_1000A5838;
  if (!qword_1000A5838)
  {
    result = swift_getWitnessTable(&unk_100087BCC, &type metadata for HomeAppDeepLinks);
    atomic_store(result, (unint64_t *)&qword_1000A5838);
  }
  return result;
}

uint64_t sub_1000303F0()
{
  if (qword_1000A4EC8 != -1)
    swift_once(&qword_1000A4EC8, sub_10002FAC4);
  return swift_bridgeObjectRetain(qword_1000A7A08);
}

uint64_t sub_100030430(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100030264();
  return CaseDisplayRepresentable.localizedStringResource.getter(a1, v2);
}

uint64_t sub_100030468()
{
  return sub_1000229D8(&qword_1000A5840, &qword_1000A5848, (uint64_t)&protocol conformance descriptor for [A]);
}

void sub_100030494(_QWORD *a1@<X8>)
{
  *a1 = &off_10009E090;
}

unint64_t sub_1000304A8()
{
  unint64_t result;

  result = qword_1000A5850;
  if (!qword_1000A5850)
  {
    result = swift_getWitnessTable(&unk_100087F14, &type metadata for LaunchHomeAppIntent);
    atomic_store(result, (unint64_t *)&qword_1000A5850);
  }
  return result;
}

Swift::Int sub_1000304EC()
{
  _QWORD v1[9];

  Hasher.init(_seed:)(v1, 0);
  Hasher._combine(_:)(0);
  return Hasher._finalize()();
}

void sub_10003052C()
{
  Hasher._combine(_:)(0);
}

Swift::Int sub_100030550(uint64_t a1)
{
  _QWORD v2[9];

  Hasher.init(_seed:)(v2, a1);
  Hasher._combine(_:)(0);
  return Hasher._finalize()();
}

uint64_t sub_10003059C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _BYTE *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE v11[16];

  v0 = type metadata accessor for LocalizedStringResource.BundleDescription(0);
  v1 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin(v0);
  v3 = &v11[-((v2 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v4 = type metadata accessor for Locale(0);
  __chkstk_darwin(v4);
  v5 = type metadata accessor for String.LocalizationValue(0);
  __chkstk_darwin(v5);
  v7 = &v11[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v8 = type metadata accessor for LocalizedStringResource(0);
  sub_10001D27C(v8, qword_1000A7A28);
  sub_100014698(v8, (uint64_t)qword_1000A7A28);
  v9 = String.LocalizationValue.init(stringLiteral:)(0xD000000000000012, 0x800000010008A950);
  static Locale.current.getter(v9);
  (*(void (**)(_BYTE *, _QWORD, uint64_t))(v1 + 104))(v3, enum case for LocalizedStringResource.BundleDescription.main(_:), v0);
  return LocalizedStringResource.init(_:table:locale:bundle:comment:)(v7, 0xD000000000000027);
}

uint64_t sub_100030720(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2[2] = a1;
  v2[3] = a2;
  v3 = type metadata accessor for HomeLauncherModuleLaunchedHomeEvent(0);
  v2[4] = v3;
  v2[5] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v3 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_10000527C(&qword_1000A5318);
  v2[6] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for URL(0);
  v2[7] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v2[8] = v6;
  v2[9] = swift_task_alloc((*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_1000307C8, 0, 0);
}

uint64_t sub_1000307C8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v2 = *(_QWORD *)(v1 + 56);
  v3 = *(_QWORD *)(v1 + 64);
  v4 = *(_QWORD *)(v1 + 48);
  IntentParameter.wrappedValue.getter(a1);
  v5 = sub_100031930();
  URLRepresentableEnum.urlRepresentation.getter(&type metadata for HomeAppDeepLinks, v5);
  v6 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(v4, 1, v2);
  v7 = *(_QWORD *)(v1 + 72);
  if (v6 == 1)
  {
    v9 = *(_QWORD *)(v1 + 40);
    v8 = *(_QWORD *)(v1 + 48);
    sub_100031974(v8);
    v10 = sub_1000319B4();
    v11 = swift_allocError(&type metadata for LaunchHomeAppIntent.Error, v10, 0, 0);
    swift_willThrow(v11);
    swift_task_dealloc(v7);
    swift_task_dealloc(v8);
    swift_task_dealloc(v9);
    return (*(uint64_t (**)(void))(v1 + 8))();
  }
  else
  {
    (*(void (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v1 + 64) + 32))(*(_QWORD *)(v1 + 72), *(_QWORD *)(v1 + 48), *(_QWORD *)(v1 + 56));
    v13 = type metadata accessor for MainActor(0);
    *(_QWORD *)(v1 + 80) = static MainActor.shared.getter();
    v14 = dispatch thunk of Actor.unownedExecutor.getter(v13, &protocol witness table for MainActor);
    return swift_task_switch(sub_100030908, v14, v15);
  }
}

uint64_t sub_100030908()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  id v5;
  NSURL *v6;
  void *v7;
  void *v8;
  id v9;

  v2 = v0[4];
  v1 = v0[5];
  v3 = swift_release(v0[10]);
  static Date.now.getter(v3);
  v4 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(v1, 0, 1, v4);
  *(_QWORD *)(v1 + *(int *)(v2 + 20)) = 1;
  sub_100008C7C(&qword_1000A5898, type metadata accessor for HomeLauncherModuleLaunchedHomeEvent, (uint64_t)&unk_100088128);
  AnalyticsEvent.sendLazy()();
  sub_1000319F8(v1);
  v5 = objc_msgSend((id)objc_opt_self(HFOpenURLRouter), "sharedInstance");
  URL._bridgeToObjectiveC()(v6);
  v8 = v7;
  v9 = objc_msgSend(v5, "openSensitiveURL:", v7);

  return swift_task_switch(sub_100030A14, 0, 0);
}

uint64_t sub_100030A14()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = *(_QWORD *)(v0 + 64);
  v1 = *(_QWORD *)(v0 + 72);
  v4 = *(_QWORD *)(v0 + 48);
  v3 = *(_QWORD *)(v0 + 56);
  v5 = *(_QWORD *)(v0 + 40);
  static IntentResult.result<>()();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  swift_task_dealloc(v1);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100030A8C()
{
  return IntentParameter.wrappedValue.getter();
}

uint64_t sub_100030AAC()
{
  return IntentParameter.wrappedValue.setter();
}

void (*sub_100030ACC(_QWORD *a1))(_QWORD *a1)
{
  _QWORD *v2;

  v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = IntentParameter.wrappedValue.modify();
  return sub_100030B14;
}

void sub_100030B14(_QWORD *a1)
{
  void *v1;

  v1 = (void *)*a1;
  (*(void (**)(_QWORD, _QWORD))(*a1 + 32))(*a1, 0);
  free(v1);
}

unint64_t sub_100030B48()
{
  unint64_t result;

  result = qword_1000A5858;
  if (!qword_1000A5858)
  {
    result = swift_getWitnessTable(&unk_100087F3C, &type metadata for LaunchHomeAppIntent);
    atomic_store(result, (unint64_t *)&qword_1000A5858);
  }
  return result;
}

uint64_t sub_100030B8C(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  unint64_t v5;

  v4 = sub_100031A34();
  v5 = sub_100031930();
  return static URLRepresentableIntent<>.urlRepresentation.getter(a1, v4, a2, v5);
}

unint64_t sub_100030BE4()
{
  unint64_t result;

  result = qword_1000A5860;
  if (!qword_1000A5860)
  {
    result = swift_getWitnessTable(&unk_100087FCC, &type metadata for LaunchHomeAppIntent);
    atomic_store(result, (unint64_t *)&qword_1000A5860);
  }
  return result;
}

unint64_t sub_100030C2C()
{
  unint64_t result;

  result = qword_1000A5868;
  if (!qword_1000A5868)
  {
    result = swift_getWitnessTable(&unk_100087FF4, &type metadata for LaunchHomeAppIntent);
    atomic_store(result, (unint64_t *)&qword_1000A5868);
  }
  return result;
}

uint64_t sub_100030C70(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_10008C6F0, 1);
}

uint64_t sub_100030C80(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100030C94(a1, a2, a3, (uint64_t (*)(void))sub_100030B48, (uint64_t)&opaque type descriptor for <<opaque return type of static AppIntent.parameterSummary>>);
}

uint64_t sub_100030C94(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void), uint64_t a5)
{
  _QWORD v7[2];

  v7[0] = a2;
  v7[1] = a4();
  return swift_getOpaqueTypeConformance2(v7, a5, 1);
}

uint64_t sub_100030CD4@<X0>(uint64_t a1@<X8>)
{
  return sub_100030CF8(&qword_1000A4ED8, (uint64_t (*)(_QWORD))&type metadata accessor for LocalizedStringResource, (uint64_t)qword_1000A7A28, (uint64_t)sub_10003059C, a1);
}

uint64_t sub_100030CF8@<X0>(_QWORD *a1@<X2>, uint64_t (*a2)(_QWORD)@<X3>, uint64_t a3@<X4>, uint64_t a4@<X5>, uint64_t a5@<X8>)
{
  uint64_t v8;
  uint64_t v9;

  if (*a1 != -1)
    swift_once(a1, a4);
  v8 = a2(0);
  v9 = sub_100014698(v8, a3);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(a5, v9, v8);
}

uint64_t sub_100030D68(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100031A34();
  return static OpenIntent.openAppWhenRun.getter(a1, v2);
}

uint64_t sub_100030D90(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  _QWORD *v5;

  v4 = *v1;
  v5 = (_QWORD *)swift_task_alloc(dword_1000A5884);
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_10001CEBC;
  return sub_100030720(a1, v4);
}

uint64_t sub_100030DE8@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = sub_1000316E0();
  *a1 = result;
  return result;
}

uint64_t sub_100030E0C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100030B48();
  return static AppIntent.persistentIdentifier.getter(a1, v2);
}

ValueMetadata *type metadata accessor for LaunchHomeAppIntent()
{
  return &type metadata for LaunchHomeAppIntent;
}

ValueMetadata *type metadata accessor for HomeAppDeepLinks()
{
  return &type metadata for HomeAppDeepLinks;
}

uint64_t sub_100030E60@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t OpaqueTypeConformance2;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  v40 = a1;
  v1 = type metadata accessor for LocalizedStringResource.BundleDescription(0);
  v38 = *(_QWORD *)(v1 - 8);
  v39 = v1;
  __chkstk_darwin(v1);
  v35 = (char *)&v30 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = type metadata accessor for Locale(0);
  __chkstk_darwin(v3);
  v34 = (char *)&v30 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for String.LocalizationValue(0);
  __chkstk_darwin(v5);
  v31 = (char *)&v30 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for LocalizedStringResource(0);
  v36 = *(_QWORD *)(v7 - 8);
  v37 = v7;
  __chkstk_darwin(v7);
  v9 = (char *)&v30 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_10000527C(&qword_1000A5998);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = (char *)&v30 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_10000527C(&qword_1000A59A0);
  v15 = *(_QWORD *)(v14 - 8);
  v32 = v14;
  v33 = v15;
  __chkstk_darwin(v14);
  v17 = (char *)&v30 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = qword_1000A57C0;
  v19 = off_1000A57C8;
  swift_bridgeObjectRetain(off_1000A57C8);
  v20 = sub_10000527C(&qword_1000A59A8);
  v21 = sub_1000052BC(&qword_1000A59B0);
  v22 = sub_1000229D8(&qword_1000A59B8, &qword_1000A59B0, (uint64_t)&protocol conformance descriptor for ControlWidgetButton<A, B, C>);
  v41 = v21;
  v42 = v22;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v41, &opaque type descriptor for <<opaque return type of ControlWidgetTemplate.tint(_:)>>, 1);
  StaticControlConfiguration.init(kind:content:)(v18, v19, sub_1000311B0, 0, v20, OpaqueTypeConformance2);
  v24 = sub_1000229D8(&qword_1000A59C0, &qword_1000A5998, (uint64_t)&protocol conformance descriptor for StaticControlConfiguration<A>);
  ControlWidgetConfiguration.showsInSystemSpaces()(v10, v24);
  (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  v25 = v31;
  v26 = String.LocalizationValue.init(stringLiteral:)(0xD00000000000001FLL, 0x800000010008A9C0);
  static Locale.current.getter(v26);
  (*(void (**)(char *, _QWORD, uint64_t))(v38 + 104))(v35, enum case for LocalizedStringResource.BundleDescription.main(_:), v39);
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v25, 0xD000000000000027);
  v41 = v10;
  v42 = v24;
  v27 = swift_getOpaqueTypeConformance2(&v41, &opaque type descriptor for <<opaque return type of ControlWidgetConfiguration.showsInSystemSpaces()>>, 1);
  v28 = v32;
  ControlWidgetConfiguration.description(_:)(v9, v32, v27);
  (*(void (**)(char *, uint64_t))(v36 + 8))(v9, v37);
  return (*(uint64_t (**)(char *, uint64_t))(v33 + 8))(v17, v28);
}

uint64_t sub_1000311B0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;

  v0 = sub_10000527C(&qword_1000A59B0);
  v1 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin(v0);
  v3 = (char *)&v11 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_1000316E0();
  v4 = sub_10000527C(&qword_1000A59C8);
  v5 = sub_1000229D8(&qword_1000A59D0, &qword_1000A59C8, (uint64_t)&protocol conformance descriptor for Label<A, B>);
  v6 = sub_100031A34();
  v7 = ControlWidgetButton.init<>(action:label:)(&v12, sub_1000312E4, 0, v4, &type metadata for LaunchHomeAppIntent, v5, v6);
  v8 = static Color.homeAccentColor.getter(v7);
  v9 = sub_1000229D8(&qword_1000A59B8, &qword_1000A59B0, (uint64_t)&protocol conformance descriptor for ControlWidgetButton<A, B, C>);
  ControlWidgetTemplate.tint(_:)(v8, v0, v9);
  swift_release(v8);
  return (*(uint64_t (**)(char *, uint64_t))(v1 + 8))(v3, v0);
}

uint64_t sub_1000312E4()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  _QWORD v11[3];

  v0 = type metadata accessor for Locale(0);
  __chkstk_darwin(v0);
  v2 = (char *)&v11[-1] - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = type metadata accessor for String.LocalizationValue(0);
  __chkstk_darwin(v3);
  v5 = (char *)&v11[-1] - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = String.LocalizationValue.init(stringLiteral:)(0xD00000000000001FLL, 0x800000010008A9E0);
  static Locale.current.getter(v6);
  v11[0] = String.init(localized:table:bundle:locale:comment:)(v5, 0xD000000000000027, 0x800000010008A970, 0, v2, 0, 0, 256);
  v11[1] = v7;
  v8 = sub_100005300();
  return Label<>.init<A>(_:systemImage:)(v11, 0x74696B656D6F68, 0xE700000000000000, &type metadata for String, v8);
}

uint64_t sub_100031410(char a1)
{
  if ((a1 & 1) != 0)
    return 0xD000000000000011;
  else
    return 0x6D617473656D6974;
}

BOOL sub_100031450(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

uint64_t sub_100031468()
{
  char *v0;

  return sub_100031410(*v0);
}

uint64_t sub_100031470@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_100032584(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_100031494()
{
  return 0;
}

void sub_1000314A0(_BYTE *a1@<X8>)
{
  *a1 = 2;
}

uint64_t sub_1000314AC(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10003226C();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000314D4(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10003226C();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1000314FC(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  char v17;
  char v18;

  v3 = v1;
  v5 = sub_10000527C(&qword_1000A59D8);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_100032248(a1, v9);
  v11 = sub_10003226C();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for HomeLauncherModuleLaunchedHomeEvent.CodingKeys, &type metadata for HomeLauncherModuleLaunchedHomeEvent.CodingKeys, v11, v9, v10);
  v18 = 0;
  v12 = type metadata accessor for Date(0);
  v13 = sub_100008C7C(&qword_1000A59E8, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
  KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v3, &v18, v5, v12, v13);
  if (!v2)
  {
    v14 = *(_QWORD *)(v3 + *(int *)(type metadata accessor for HomeLauncherModuleLaunchedHomeEvent(0) + 20));
    v17 = 1;
    KeyedEncodingContainer.encode(_:forKey:)(v14, &v17, v5);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

unint64_t sub_10003164C()
{
  return 0xD000000000000023;
}

unint64_t sub_100031668()
{
  return 0xD00000000000001CLL;
}

uint64_t sub_100031684@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_100026CB4(v1, a1, &qword_1000A58E8);
}

uint64_t sub_1000316A8()
{
  return AnalyticsEvent.payload()();
}

uint64_t sub_1000316BC(_QWORD *a1)
{
  return sub_1000314FC(a1);
}

uint64_t sub_1000316D0()
{
  return 1953460082;
}

uint64_t sub_1000316E0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _BYTE *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE *v16;
  uint64_t v17;
  void (*v18)(_BYTE *, uint64_t, uint64_t, uint64_t);
  unint64_t v19;
  _BYTE v21[15];
  char v22;

  v0 = type metadata accessor for InputConnectionBehavior(0);
  v1 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin(v0);
  v3 = &v21[-((v2 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v4 = sub_10000527C(&qword_1000A5310);
  v5 = __chkstk_darwin(v4);
  v7 = &v21[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v5);
  v9 = &v21[-v8];
  v10 = sub_10000527C(&qword_1000A5320);
  __chkstk_darwin(v10);
  v12 = &v21[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v13 = type metadata accessor for LocalizedStringResource(0);
  v14 = *(_QWORD *)(v13 - 8);
  __chkstk_darwin(v13);
  v16 = &v21[-((v15 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_10000527C(&qword_1000A5878);
  LocalizedStringResource.init(stringLiteral:)(0x6D6F48206E65704FLL, 0xE900000000000065);
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(v14 + 56))(v12, 1, 1, v13);
  v22 = 1;
  v17 = type metadata accessor for IntentDialog(0);
  v18 = *(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 56);
  v18(v9, 1, 1, v17);
  v18(v7, 1, 1, v17);
  (*(void (**)(_BYTE *, _QWORD, uint64_t))(v1 + 104))(v3, enum case for InputConnectionBehavior.default(_:), v0);
  v19 = sub_10002FF5C();
  return IntentParameter<>.init(title:description:default:requestValueDialog:requestDisambiguationDialog:inputConnectionBehavior:supportedValues:)(v16, v12, &v22, v9, v7, v3, &off_10009E0B8, v19);
}

uint64_t type metadata accessor for HomeLauncherModuleLaunchedHomeEvent(uint64_t a1)
{
  uint64_t result;

  result = qword_1000A5948;
  if (!qword_1000A5948)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for HomeLauncherModuleLaunchedHomeEvent);
  return result;
}

unint64_t sub_100031930()
{
  unint64_t result;

  result = qword_1000A5888;
  if (!qword_1000A5888)
  {
    result = swift_getWitnessTable(&unk_100087C44, &type metadata for HomeAppDeepLinks);
    atomic_store(result, (unint64_t *)&qword_1000A5888);
  }
  return result;
}

uint64_t sub_100031974(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_10000527C(&qword_1000A5318);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t sub_1000319B4()
{
  unint64_t result;

  result = qword_1000A5890;
  if (!qword_1000A5890)
  {
    result = swift_getWitnessTable(&unk_100088170, &type metadata for LaunchHomeAppIntent.Error);
    atomic_store(result, (unint64_t *)&qword_1000A5890);
  }
  return result;
}

uint64_t sub_1000319F8(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for HomeLauncherModuleLaunchedHomeEvent(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t sub_100031A34()
{
  unint64_t result;

  result = qword_1000A58A0;
  if (!qword_1000A58A0)
  {
    result = swift_getWitnessTable(&unk_100087E94, &type metadata for LaunchHomeAppIntent);
    atomic_store(result, (unint64_t *)&qword_1000A58A0);
  }
  return result;
}

uint64_t sub_100031A78(uint64_t (*a1)(uint64_t, uint64_t), uint64_t a2, uint64_t a3, uint64_t a4)
{
  return a1(a3, a4);
}

uint64_t _s10HomeWidget16HomeAppDeepLinksOwet_0(unsigned int *a1, int a2)
{
  int v2;
  int v3;

  if (!a2)
    return 0;
  if ((a2 + 1) >= 0x10000)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 1) < 0x100)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
    return *a1;
  if (v3 == 2)
    return *(unsigned __int16 *)a1;
  return *(unsigned __int8 *)a1;
}

uint64_t _s10HomeWidget16HomeAppDeepLinksOwst_0(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_100031B1C + 4 * byte_100087B90[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_100031B3C + 4 * byte_100087B95[v4]))();
}

_BYTE *sub_100031B1C(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_100031B3C(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_100031B44(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_100031B4C(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_100031B54(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_100031B5C(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for LaunchHomeAppIntent.Error()
{
  return &type metadata for LaunchHomeAppIntent.Error;
}

uint64_t *sub_100031B78(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v10 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v10 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v10);
  }
  else
  {
    v7 = type metadata accessor for Date(0);
    v8 = *(_QWORD *)(v7 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v8 + 48))(a2, 1, v7))
    {
      v9 = sub_10000527C(&qword_1000A58E8);
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
    }
    else
    {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v8 + 16))(a1, a2, v7);
      (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v8 + 56))(a1, 0, 1, v7);
    }
    *(uint64_t *)((char *)a1 + *(int *)(a3 + 20)) = *(uint64_t *)((char *)a2 + *(int *)(a3 + 20));
  }
  return a1;
}

uint64_t sub_100031C60(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;

  v2 = type metadata accessor for Date(0);
  v3 = *(_QWORD *)(v2 - 8);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(a1, 1, v2);
  if (!(_DWORD)result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8))(a1, v2);
  return result;
}

char *sub_100031CC8(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v6 = type metadata accessor for Date(0);
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
  {
    v8 = sub_10000527C(&qword_1000A58E8);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v8 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 16))(a1, a2, v6);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  *(_QWORD *)&a1[*(int *)(a3 + 20)] = *(_QWORD *)&a2[*(int *)(a3 + 20)];
  return a1;
}

char *sub_100031D84(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(char *, uint64_t, uint64_t);
  int v9;
  int v10;
  uint64_t v11;

  v6 = type metadata accessor for Date(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 48);
  v9 = v8(a1, 1, v6);
  v10 = v8(a2, 1, v6);
  if (!v9)
  {
    if (!v10)
    {
      (*(void (**)(char *, char *, uint64_t))(v7 + 24))(a1, a2, v6);
      goto LABEL_7;
    }
    (*(void (**)(char *, uint64_t))(v7 + 8))(a1, v6);
    goto LABEL_6;
  }
  if (v10)
  {
LABEL_6:
    v11 = sub_10000527C(&qword_1000A58E8);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v7 + 16))(a1, a2, v6);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
LABEL_7:
  *(_QWORD *)&a1[*(int *)(a3 + 20)] = *(_QWORD *)&a2[*(int *)(a3 + 20)];
  return a1;
}

char *sub_100031E8C(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v6 = type metadata accessor for Date(0);
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
  {
    v8 = sub_10000527C(&qword_1000A58E8);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v8 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 32))(a1, a2, v6);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  *(_QWORD *)&a1[*(int *)(a3 + 20)] = *(_QWORD *)&a2[*(int *)(a3 + 20)];
  return a1;
}

char *sub_100031F48(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(char *, uint64_t, uint64_t);
  int v9;
  int v10;
  uint64_t v11;

  v6 = type metadata accessor for Date(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 48);
  v9 = v8(a1, 1, v6);
  v10 = v8(a2, 1, v6);
  if (!v9)
  {
    if (!v10)
    {
      (*(void (**)(char *, char *, uint64_t))(v7 + 40))(a1, a2, v6);
      goto LABEL_7;
    }
    (*(void (**)(char *, uint64_t))(v7 + 8))(a1, v6);
    goto LABEL_6;
  }
  if (v10)
  {
LABEL_6:
    v11 = sub_10000527C(&qword_1000A58E8);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v7 + 32))(a1, a2, v6);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
LABEL_7:
  *(_QWORD *)&a1[*(int *)(a3 + 20)] = *(_QWORD *)&a2[*(int *)(a3 + 20)];
  return a1;
}

uint64_t sub_100032050(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10003205C);
}

uint64_t sub_10003205C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10000527C(&qword_1000A58E8);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(a1, a2, v4);
}

uint64_t sub_10003209C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000320A8);
}

uint64_t sub_1000320A8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10000527C(&qword_1000A58E8);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(a1, a2, a2, v4);
}

void sub_1000320EC(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[2];

  sub_100032160(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(v2 - 8) + 64;
    v4[1] = (char *)&value witness table for Builtin.Int64 + 64;
    swift_initStructMetadata(a1, 256, 2, v4, a1 + 16);
  }
}

void sub_100032160(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_1000A5958)
  {
    v2 = type metadata accessor for Date(255);
    v3 = type metadata accessor for Optional(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_1000A5958);
  }
}

ValueMetadata *type metadata accessor for LaunchHomeAppControl()
{
  return &type metadata for LaunchHomeAppControl;
}

unint64_t sub_1000321C8()
{
  unint64_t result;

  result = qword_1000A5988;
  if (!qword_1000A5988)
  {
    result = swift_getWitnessTable(&unk_100088100, &type metadata for LaunchHomeAppIntent.Error);
    atomic_store(result, (unint64_t *)&qword_1000A5988);
  }
  return result;
}

uint64_t sub_10003220C()
{
  return sub_100008C7C(&qword_1000A5990, type metadata accessor for HomeLauncherModuleLaunchedHomeEvent, (uint64_t)&unk_100088098);
}

uint64_t sub_100032238(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_10008C79C, 1);
}

_QWORD *sub_100032248(_QWORD *result, uint64_t a2)
{
  if ((*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80) & 0x20000) != 0)
    return (_QWORD *)(*result
                    + ((*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80) + 16) & ~(unint64_t)*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80)));
  return result;
}

unint64_t sub_10003226C()
{
  unint64_t result;

  result = qword_1000A59E0;
  if (!qword_1000A59E0)
  {
    result = swift_getWitnessTable(&unk_1000882B4, &type metadata for HomeLauncherModuleLaunchedHomeEvent.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000A59E0);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for HomeLauncherModuleLaunchedHomeEvent.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFF)
    goto LABEL_17;
  if (a2 + 1 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 1) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 1;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 1;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 1;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 2;
  v8 = v6 - 2;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for HomeLauncherModuleLaunchedHomeEvent.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_10003238C + 4 * byte_100087B9F[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1000323C0 + 4 * byte_100087B9A[v4]))();
}

uint64_t sub_1000323C0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000323C8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1000323D0);
  return result;
}

uint64_t sub_1000323DC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1000323E4);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1000323E8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000323F0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

_BYTE *sub_1000323FC(_BYTE *result, char a2)
{
  *result = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for HomeLauncherModuleLaunchedHomeEvent.CodingKeys()
{
  return &type metadata for HomeLauncherModuleLaunchedHomeEvent.CodingKeys;
}

uint64_t sub_100032418()
{
  uint64_t v0;
  uint64_t OpaqueTypeConformance2;
  uint64_t v3;
  uint64_t v4;

  v0 = sub_1000052BC(&qword_1000A59A0);
  v3 = sub_1000052BC(&qword_1000A5998);
  v4 = sub_1000229D8(&qword_1000A59C0, &qword_1000A5998, (uint64_t)&protocol conformance descriptor for StaticControlConfiguration<A>);
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v3, &opaque type descriptor for <<opaque return type of ControlWidgetConfiguration.showsInSystemSpaces()>>, 1);
  v3 = v0;
  v4 = OpaqueTypeConformance2;
  return swift_getOpaqueTypeConformance2(&v3, &opaque type descriptor for <<opaque return type of ControlWidgetConfiguration.description(_:)>>, 1);
}

unint64_t sub_1000324B0()
{
  unint64_t result;

  result = qword_1000A59F0;
  if (!qword_1000A59F0)
  {
    result = swift_getWitnessTable(&unk_10008828C, &type metadata for HomeLauncherModuleLaunchedHomeEvent.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000A59F0);
  }
  return result;
}

unint64_t sub_1000324F8()
{
  unint64_t result;

  result = qword_1000A59F8;
  if (!qword_1000A59F8)
  {
    result = swift_getWitnessTable(&unk_1000881FC, &type metadata for HomeLauncherModuleLaunchedHomeEvent.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000A59F8);
  }
  return result;
}

unint64_t sub_100032540()
{
  unint64_t result;

  result = qword_1000A5A00;
  if (!qword_1000A5A00)
  {
    result = swift_getWitnessTable(&unk_100088224, &type metadata for HomeLauncherModuleLaunchedHomeEvent.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000A5A00);
  }
  return result;
}

uint64_t sub_100032584(uint64_t a1, uint64_t a2)
{
  BOOL v3;
  char v6;

  v3 = a1 == 0x6D617473656D6974 && a2 == 0xE900000000000070;
  if (v3
    || (_stringCompareWithSmolCheck(_:_:expecting:)(0x6D617473656D6974, 0xE900000000000070, a1, a2, 0) & 1) != 0)
  {
    swift_bridgeObjectRelease(a2);
    return 0;
  }
  else if (a1 == 0xD000000000000011 && a2 == 0x800000010008AA20)
  {
    swift_bridgeObjectRelease(0x800000010008AA20);
    return 1;
  }
  else
  {
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000011, 0x800000010008AA20, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v6 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t sub_100032670(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t ObjectType;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned __int8 v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD v19[4];

  v6 = type metadata accessor for TaskPriority(0);
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, 1, v6) == 1)
  {
    sub_100034B4C(a1);
    v8 = 7168;
    v9 = *(_QWORD *)(a3 + 16);
    if (v9)
    {
LABEL_3:
      v10 = *(_QWORD *)(a3 + 24);
      ObjectType = swift_getObjectType(v9);
      swift_unknownObjectRetain(v9);
      v12 = dispatch thunk of Actor.unownedExecutor.getter(ObjectType, v10);
      v14 = v13;
      swift_unknownObjectRelease(v9);
      goto LABEL_6;
    }
  }
  else
  {
    v15 = TaskPriority.rawValue.getter();
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(a1, v6);
    v8 = v15 | 0x1C00;
    v9 = *(_QWORD *)(a3 + 16);
    if (v9)
      goto LABEL_3;
  }
  v12 = 0;
  v14 = 0;
LABEL_6:
  v16 = swift_allocObject(&unk_10009F240, 32, 7);
  *(_QWORD *)(v16 + 16) = a2;
  *(_QWORD *)(v16 + 24) = a3;
  if (v14 | v12)
  {
    v19[0] = 0;
    v19[1] = 0;
    v17 = v19;
    v19[2] = v12;
    v19[3] = v14;
  }
  else
  {
    v17 = 0;
  }
  return swift_task_create(v8, v17, (char *)&type metadata for () + 8, &unk_1000A5B08, v16);
}

id sub_1000327B4()
{
  objc_class *v0;
  uint64_t v1;
  uint64_t v2;
  id (__cdecl *v3)();
  id v4;
  id *v5;
  id result;
  objc_super v7;
  _BYTE v8[24];

  v0 = (objc_class *)type metadata accessor for HomeManagerActor();
  v1 = swift_allocObject(v0, 136, 15);
  swift_defaultActor_initialize(v1);
  *(_BYTE *)(v1 + 112) = 0;
  *(_QWORD *)(v1 + 120) = _swiftEmptyArrayStorage;
  swift_beginAccess(&static HomeManagerActor.homeManagerCreationBlock, v8, 0, 0);
  v3 = (id (__cdecl *)())static HomeManagerActor.homeManagerCreationBlock;
  v2 = qword_1000A5A28;
  swift_retain(v1);
  swift_retain(v2);
  v4 = v3();
  swift_release(v2);
  *(_QWORD *)(v1 + 128) = v4;
  swift_release(v1);
  v7.receiver = (id)v1;
  v7.super_class = v0;
  v5 = (id *)objc_msgSendSuper2(&v7, "init");
  result = objc_msgSend(v5[16], "setDelegate:", v5);
  qword_1000A7A40 = (uint64_t)v5;
  return result;
}

id *sub_100032888()
{
  objc_class *v0;
  objc_class *v1;
  uint64_t v2;
  uint64_t v3;
  id (__cdecl *v4)();
  id v5;
  id *v6;
  objc_super v8;
  _BYTE v9[24];

  v1 = v0;
  v2 = swift_allocObject(v0, 136, 15);
  swift_defaultActor_initialize();
  *(_BYTE *)(v2 + 112) = 0;
  *(_QWORD *)(v2 + 120) = _swiftEmptyArrayStorage;
  swift_beginAccess(&static HomeManagerActor.homeManagerCreationBlock, v9, 0, 0);
  v4 = (id (__cdecl *)())static HomeManagerActor.homeManagerCreationBlock;
  v3 = qword_1000A5A28;
  swift_retain(v2);
  swift_retain(v3);
  v5 = v4();
  swift_release(v3);
  *(_QWORD *)(v2 + 128) = v5;
  swift_release(v2);
  v8.receiver = (id)v2;
  v8.super_class = v1;
  v6 = (id *)objc_msgSendSuper2(&v8, "init");
  objc_msgSend(v6[16], "setDelegate:", v6);
  return v6;
}

uint64_t (**HomeManagerActor.homeManagerCreationBlock.unsafeMutableAddressor())()
{
  return &static HomeManagerActor.homeManagerCreationBlock;
}

uint64_t (*static HomeManagerActor.homeManagerCreationBlock.getter())()
{
  uint64_t (*v0)();
  _BYTE v2[24];

  swift_beginAccess(&static HomeManagerActor.homeManagerCreationBlock, v2, 0, 0);
  v0 = static HomeManagerActor.homeManagerCreationBlock;
  swift_retain(qword_1000A5A28);
  return v0;
}

uint64_t static HomeManagerActor.homeManagerCreationBlock.setter(uint64_t (*a1)(), uint64_t a2)
{
  uint64_t v4;
  _BYTE v6[24];

  sub_100034580((uint64_t)a1, a2);
  swift_beginAccess(&static HomeManagerActor.homeManagerCreationBlock, v6, 1, 0);
  v4 = qword_1000A5A28;
  static HomeManagerActor.homeManagerCreationBlock = a1;
  qword_1000A5A28 = a2;
  return swift_release(v4);
}

void (*static HomeManagerActor.homeManagerCreationBlock.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  _QWORD *v2;
  uint64_t v3;

  v2 = malloc(0x28uLL);
  *a1 = v2;
  swift_beginAccess(&static HomeManagerActor.homeManagerCreationBlock, v2, 1, 0);
  v3 = qword_1000A5A28;
  v2[3] = static HomeManagerActor.homeManagerCreationBlock;
  v2[4] = v3;
  swift_retain(v3);
  return sub_100032A74;
}

void sub_100032A74(uint64_t a1, char a2)
{
  _QWORD *v2;
  uint64_t (*v3)();
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2 = *(_QWORD **)a1;
  v3 = *(uint64_t (**)())(*(_QWORD *)a1 + 24);
  v4 = *(_QWORD *)(*(_QWORD *)a1 + 32);
  if ((a2 & 1) != 0)
  {
    swift_retain(*(_QWORD *)(*(_QWORD *)a1 + 32));
    sub_100034580((uint64_t)v3, v4);
    v5 = qword_1000A5A28;
    static HomeManagerActor.homeManagerCreationBlock = v3;
    qword_1000A5A28 = v4;
    swift_release(v5);
    v6 = v2[4];
  }
  else
  {
    sub_100034580(*(_QWORD *)(*(_QWORD *)a1 + 24), v4);
    v6 = qword_1000A5A28;
    static HomeManagerActor.homeManagerCreationBlock = v3;
    qword_1000A5A28 = v4;
  }
  swift_release(v6);
  free(v2);
}

id *sub_100032AFC()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t (*v3)();
  uint64_t v4;
  uint64_t v5;
  id *v6;
  objc_super v8;
  _BYTE v9[24];

  v1 = (_QWORD *)v0;
  swift_defaultActor_initialize(v0);
  *(_BYTE *)(v0 + 112) = 0;
  *(_QWORD *)(v0 + 120) = _swiftEmptyArrayStorage;
  swift_beginAccess(&static HomeManagerActor.homeManagerCreationBlock, v9, 0, 0);
  v3 = static HomeManagerActor.homeManagerCreationBlock;
  v2 = qword_1000A5A28;
  swift_retain(v1);
  v4 = swift_retain(v2);
  v5 = ((uint64_t (*)(uint64_t))v3)(v4);
  swift_release(v2);
  v1[16] = v5;
  swift_release(v1);
  v8.receiver = v1;
  v8.super_class = (Class)type metadata accessor for HomeManagerActor();
  v6 = (id *)objc_msgSendSuper2(&v8, "init");
  objc_msgSend(v6[16], "setDelegate:", v6);
  return v6;
}

uint64_t sub_100032BE0()
{
  uint64_t v0;

  v0 = type metadata accessor for Logger(0);
  sub_10001D27C(v0, qword_1000A7A48);
  sub_100014698(v0, (uint64_t)qword_1000A7A48);
  return Logger.init(subsystem:category:)(0x6C7070612E6D6F63, 0xEE00656D6F482E65, 0xD000000000000010, 0x8000000100088350);
}

uint64_t HomeManagerActor.deinit()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 120));

  swift_defaultActor_destroy(v0);
  return v0;
}

uint64_t HomeManagerActor.__deallocating_deinit()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 120));

  swift_defaultActor_destroy(v0);
  return swift_defaultActor_deallocate(v0);
}

uint64_t HomeWidget.unownedExecutor.getter()
{
  uint64_t v0;

  return v0;
}

uint64_t static HomeManagerActor.homeManager.getter()
{
  return swift_task_switch(sub_100032CD8, 0, 0);
}

uint64_t sub_100032CD8()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;

  v1 = (_QWORD *)swift_task_alloc(async function pointer to withCheckedContinuation<A>(isolation:function:_:)[1]);
  *(_QWORD *)(v0 + 24) = v1;
  v2 = sub_100008CBC(0, &qword_1000A5A48, HMHomeManager_ptr);
  *v1 = v0;
  v1[1] = sub_100032D78;
  return withCheckedContinuation<A>(isolation:function:_:)(v0 + 16, 0, 0, 0x616E614D656D6F68, 0xEB00000000726567, sub_100032DD4, 0, v2);
}

uint64_t sub_100032D78()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 24));
  return swift_task_switch(sub_100032DCC, 0, 0);
}

uint64_t sub_100032DCC()
{
  uint64_t v0;

  return (*(uint64_t (**)(_QWORD))(v0 + 8))(*(_QWORD *)(v0 + 16));
}

uint64_t sub_100032DD4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;

  v2 = sub_10000527C(&qword_1000A5B40);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = *(_QWORD *)(v3 + 64);
  __chkstk_darwin(v2);
  v5 = sub_10000527C(&qword_1000A5AE8);
  __chkstk_darwin(v5);
  v7 = (char *)&v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for TaskPriority(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 56))(v7, 1, 1, v8);
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))((char *)&v14 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v2);
  v9 = *(unsigned __int8 *)(v3 + 80);
  v10 = (v9 + 32) & ~v9;
  v11 = swift_allocObject(&unk_10009F358, v10 + v4, v9 | 7);
  *(_QWORD *)(v11 + 16) = 0;
  *(_QWORD *)(v11 + 24) = 0;
  (*(void (**)(uint64_t, char *, uint64_t))(v3 + 32))(v11 + v10, (char *)&v14 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), v2);
  v12 = sub_100032670((uint64_t)v7, (uint64_t)&unk_1000A5B50, v11);
  return swift_release(v12);
}

uint64_t sub_100032F0C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;

  v4[6] = a4;
  v5 = sub_10000527C(&qword_1000A5B40);
  v4[7] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v4[8] = v6;
  v7 = *(_QWORD *)(v6 + 64);
  v4[9] = v7;
  v8 = (v7 + 15) & 0xFFFFFFFFFFFFFFF0;
  v4[10] = swift_task_alloc(v8);
  v4[11] = swift_task_alloc(v8);
  return swift_task_switch(sub_100032F84, 0, 0);
}

uint64_t sub_100032F84()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t, uint64_t);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if (qword_1000A4EE0 != -1)
    swift_once(&qword_1000A4EE0, sub_1000327B4);
  v1 = v0[10];
  v2 = v0[11];
  v4 = v0[8];
  v3 = v0[9];
  v5 = v0[6];
  v6 = v0[7];
  v7 = qword_1000A7A40;
  v0[12] = qword_1000A7A40;
  v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16);
  v8(v2, v5, v6);
  v8(v1, v2, v6);
  v9 = *(unsigned __int8 *)(v4 + 80);
  v10 = (v9 + 16) & ~v9;
  v11 = swift_allocObject(&unk_10009F380, v10 + v3, v9 | 7);
  v0[13] = v11;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 32))(v11 + v10, v2, v6);
  return swift_task_switch(sub_100033068, v7, 0);
}

uint64_t sub_100033068()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;

  v1 = *(_QWORD *)(v0 + 96);
  if (*(_BYTE *)(v1 + 112) == 1)
  {
    v2 = *(void **)(v1 + 128);
    *(_QWORD *)(v0 + 40) = v2;
    v3 = *(_QWORD *)(v0 + 104);
    v4 = *(_QWORD *)(v0 + 56);
    v5 = v2;
    CheckedContinuation.resume(returning:)(v0 + 40, v4);
    v6 = v3;
  }
  else
  {
    v7 = *(_QWORD *)(v0 + 104);
    v8 = swift_allocObject(&unk_10009F3A8, 32, 7);
    *(_QWORD *)(v8 + 16) = sub_100035070;
    *(_QWORD *)(v8 + 24) = v7;
    v9 = (_QWORD *)(v1 + 120);
    swift_beginAccess(v1 + 120, v0 + 16, 33, 0);
    v10 = *(_QWORD **)(v1 + 120);
    swift_retain(v7);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v10);
    *(_QWORD *)(v1 + 120) = v10;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      v10 = sub_10005AF74(0, v10[2] + 1, 1, v10);
      *v9 = v10;
    }
    v13 = v10[2];
    v12 = v10[3];
    if (v13 >= v12 >> 1)
    {
      v10 = sub_10005AF74((_QWORD *)(v12 > 1), v13 + 1, 1, v10);
      *v9 = v10;
    }
    v14 = *(_QWORD *)(v0 + 104);
    v10[2] = v13 + 1;
    v15 = &v10[2 * v13];
    v15[4] = sub_1000350D8;
    v15[5] = v8;
    swift_endAccess(v0 + 16);
    v6 = v14;
  }
  swift_release(v6);
  v16 = *(_QWORD *)(v0 + 80);
  v17 = *(_QWORD *)(v0 + 88);
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v0 + 64) + 8))(v16, *(_QWORD *)(v0 + 56));
  swift_task_dealloc(v17);
  swift_task_dealloc(v16);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000331E4(void *a1)
{
  id v1;
  uint64_t v2;
  void *v4;

  v4 = a1;
  v1 = a1;
  v2 = sub_10000527C(&qword_1000A5B40);
  return CheckedContinuation.resume(returning:)(&v4, v2);
}

uint64_t sub_10003322C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  *(_QWORD *)(v4 + 16) = a4;
  return swift_task_switch(sub_100033244, a4, 0);
}

uint64_t sub_100033244()
{
  uint64_t v0;

  sub_100033274();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_100033274()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  __objc2_prot_list *v7;
  uint64_t *v8;
  id v9;
  void (*v10)(_QWORD);
  uint64_t v11;
  uint64_t count;
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  os_log_type_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  __objc2_prot_list *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  void (*v25)(_QWORD);
  id v26;
  _BYTE v27[24];

  if ((*(_BYTE *)(v0 + 112) & 1) == 0)
  {
    v1 = v0;
    objc_msgSend(*(id *)(v0 + 128), "setDelegate:", 0);
    *(_BYTE *)(v0 + 112) = 1;
    v2 = (_QWORD *)(v0 + 120);
    swift_beginAccess(v2, v27, 1, 0);
    v3 = *(_QWORD *)(v1 + 120);
    v4 = *(_QWORD *)(v3 + 16);
    if (v4)
    {
      v24 = v2;
      swift_bridgeObjectRetain_n(v3, 2);
      v5 = 0;
      v23 = v3;
      v6 = (_QWORD *)(v3 + 40);
      v7 = &HomeManagerActor;
      v8 = qword_1000A7A48;
      do
      {
        v10 = (void (*)(_QWORD))*(v6 - 1);
        v11 = *v6;
        count = v7[477].count;
        swift_retain_n(*v6, 2);
        if (count != -1)
          swift_once(&qword_1000A4EE8, sub_100032BE0);
        v13 = type metadata accessor for Logger(0);
        v14 = sub_100014698(v13, (uint64_t)v8);
        v15 = Logger.logObject.getter(v14);
        v16 = static os_log_type_t.fault.getter();
        if (os_log_type_enabled(v15, v16))
        {
          v25 = v10;
          v17 = v1;
          v18 = v4;
          v19 = v8;
          v20 = v7;
          v21 = swift_slowAlloc(12, -1);
          *(_DWORD *)v21 = 134217984;
          *(_QWORD *)(v21 + 4) = v5;
          _os_log_impl((void *)&_mh_execute_header, v15, v16, "catching up on block %ld", (uint8_t *)v21, 0xCu);
          v22 = v21;
          v7 = v20;
          v8 = v19;
          v4 = v18;
          v1 = v17;
          v10 = v25;
          swift_slowDealloc(v22, -1, -1);
        }
        ++v5;

        v26 = *(id *)(v1 + 128);
        v9 = v26;
        v10(&v26);
        swift_release_n(v11, 2);

        v6 += 2;
      }
      while (v4 != v5);
      swift_bridgeObjectRelease_n(v23, 2);
      v2 = v24;
      v3 = *v24;
    }
    *v2 = _swiftEmptyArrayStorage;
    swift_bridgeObjectRelease(v3);
  }
}

id sub_1000334BC()
{
  uint64_t v0;
  id v1;
  id v2;

  v0 = sub_100008CBC(0, (unint64_t *)&unk_1000A5B60, HMMutableHomeManagerConfiguration_ptr);
  v1 = objc_msgSend((id)swift_getObjCClassFromMetadata(v0), "defaultPrivateConfiguration");
  objc_msgSend(v1, "setCachePolicy:", 0);
  objc_msgSend(v1, "setDiscretionary:", 0);
  objc_msgSend(v1, "setAdaptive:", 1);
  v2 = objc_msgSend(objc_allocWithZone((Class)HMHomeManager), "initWithConfiguration:", v1);

  return v2;
}

uint64_t static DataModel.sharedAsync.getter()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1[4] = v0;
  v2 = type metadata accessor for MainActor(0);
  v1[5] = v2;
  v1[6] = static MainActor.shared.getter();
  v3 = dispatch thunk of Actor.unownedExecutor.getter(v2, &protocol witness table for MainActor);
  v1[7] = v3;
  v1[8] = v4;
  return swift_task_switch(sub_1000335D8, v3, v4);
}

uint64_t sub_1000335D8()
{
  _QWORD *v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  void *v7;
  _QWORD *v8;

  v1 = v0[4];
  if (byte_1000A5A38 == 1)
  {
    v2 = v0 + 3;
    v3 = static MainActor.shared.getter();
    v0[9] = v3;
    v4 = swift_task_alloc(32);
    v0[10] = v4;
    *(_QWORD *)(v4 + 16) = v1;
    v5 = (_QWORD *)swift_task_alloc(async function pointer to withCheckedContinuation<A>(isolation:function:_:)[1]);
    v0[11] = v5;
    v6 = type metadata accessor for DataModel(0);
    *v5 = v0;
    v5[1] = sub_100033710;
    v7 = sub_100034938;
  }
  else
  {
    v2 = v0 + 2;
    v3 = static MainActor.shared.getter();
    v0[12] = v3;
    v4 = swift_task_alloc(32);
    v0[13] = v4;
    *(_QWORD *)(v4 + 16) = v1;
    v8 = (_QWORD *)swift_task_alloc(async function pointer to withCheckedContinuation<A>(isolation:function:_:)[1]);
    v0[14] = v8;
    v6 = type metadata accessor for DataModel(0);
    *v8 = v0;
    v8[1] = sub_1000337AC;
    v7 = sub_100034930;
  }
  return withCheckedContinuation<A>(isolation:function:_:)(v2, v3, &protocol witness table for MainActor, 0x7341646572616873, 0xEB00000000636E79, v7, v4, v6);
}

uint64_t sub_100033710()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *v0;
  v2 = *(_QWORD *)(*v0 + 80);
  v3 = *(_QWORD *)(*v0 + 72);
  swift_task_dealloc(*(_QWORD *)(*v0 + 88));
  swift_release(v3);
  swift_task_dealloc(v2);
  return swift_task_switch(sub_100033778, *(_QWORD *)(v1 + 56), *(_QWORD *)(v1 + 64));
}

uint64_t sub_100033778()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 48));
  return (*(uint64_t (**)(_QWORD))(v0 + 8))(*(_QWORD *)(v0 + 24));
}

uint64_t sub_1000337AC()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *v0;
  v2 = *(_QWORD *)(*v0 + 104);
  v3 = *(_QWORD *)(*v0 + 96);
  swift_task_dealloc(*(_QWORD *)(*v0 + 112));
  swift_release(v3);
  swift_task_dealloc(v2);
  return swift_task_switch(sub_100033814, *(_QWORD *)(v1 + 56), *(_QWORD *)(v1 + 64));
}

uint64_t sub_100033814()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 48));
  return (*(uint64_t (**)(_QWORD))(v0 + 8))(*(_QWORD *)(v0 + 16));
}

void sub_100033844(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  void *v14;
  _QWORD aBlock[5];
  uint64_t v16;

  v4 = sub_10000527C(&qword_1000A5AE0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(_QWORD *)(v5 + 64);
  __chkstk_darwin(v4);
  v7 = (char *)aBlock - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1000A4EF0 != -1)
    swift_once(&qword_1000A4EF0, sub_1000344EC);
  v8 = dispatch thunk of DataModel.homeManager.getter();
  if (v8)
  {
    v9 = (void *)v8;
    (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))((char *)aBlock - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v4);
    v10 = *(unsigned __int8 *)(v5 + 80);
    v11 = (v10 + 16) & ~v10;
    v12 = (v6 + v11 + 7) & 0xFFFFFFFFFFFFFFF8;
    v13 = swift_allocObject(&unk_10009F1C8, v12 + 8, v10 | 7);
    (*(void (**)(uint64_t, char *, uint64_t))(v5 + 32))(v13 + v11, v7, v4);
    *(_QWORD *)(v13 + v12) = a2;
    aBlock[4] = sub_1000349D0;
    v16 = v13;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_100033B30;
    aBlock[3] = &unk_10009F1E0;
    v14 = _Block_copy(aBlock);
    swift_release(v16);
    swift_unknownObjectRelease(objc_msgSend(v9, "_refreshBeforeDate:completionHandler:", 0, v14));
    _Block_release(v14);

  }
}

uint64_t sub_1000339D4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;
  id v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;

  v0 = type metadata accessor for Logger(0);
  v1 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin(v0);
  v3 = (char *)&v11 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for DataModel(0);
  v4 = static DataModel.modelLogger.getter();
  v5 = Logger.logObject.getter(v4);
  v6 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v5, v6))
  {
    v7 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v7 = 0;
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "homemanager refresh is done", v7, 2u);
    swift_slowDealloc(v7, -1, -1);
  }

  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  if (qword_1000A4EF0 != -1)
    swift_once(&qword_1000A4EF0, sub_1000344EC);
  v12 = qword_1000A5A30;
  v8 = (id)qword_1000A5A30;
  v9 = sub_10000527C(&qword_1000A5AE0);
  return CheckedContinuation.resume(returning:)(&v12, v9);
}

void sub_100033B30(uint64_t a1, void *a2)
{
  uint64_t v3;
  void (*v4)(void *);
  id v5;

  v4 = *(void (**)(void *))(a1 + 32);
  v3 = *(_QWORD *)(a1 + 40);
  swift_retain(v3);
  v5 = a2;
  v4(a2);
  swift_release(v3);

}

uint64_t sub_100033B84(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v18;

  v4 = sub_10000527C(&qword_1000A5AE0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(_QWORD *)(v5 + 64);
  __chkstk_darwin(v4);
  v7 = (char *)&v18 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_10000527C(&qword_1000A5AE8);
  __chkstk_darwin(v8);
  v10 = (char *)&v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for TaskPriority(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 56))(v10, 1, 1, v11);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, a1, v4);
  type metadata accessor for MainActor(0);
  v12 = static MainActor.shared.getter();
  v13 = *(unsigned __int8 *)(v5 + 80);
  v14 = (v13 + 40) & ~v13;
  v15 = (char *)swift_allocObject(&unk_10009F218, v14 + v6, v13 | 7);
  *((_QWORD *)v15 + 2) = v12;
  *((_QWORD *)v15 + 3) = &protocol witness table for MainActor;
  *((_QWORD *)v15 + 4) = a2;
  (*(void (**)(char *, char *, uint64_t))(v5 + 32))(&v15[v14], v7, v4);
  v16 = sub_100032670((uint64_t)v10, (uint64_t)&unk_1000A5AF8, (uint64_t)v15);
  return swift_release(v16);
}

uint64_t sub_100033CE0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v5[5] = a4;
  v5[6] = a5;
  v6 = sub_10000527C(&qword_1000A5AE8);
  v5[7] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v6 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_10000527C(&qword_1000A5AE0);
  v5[8] = v7;
  v8 = *(_QWORD *)(v7 - 8);
  v5[9] = v8;
  v9 = *(_QWORD *)(v8 + 64);
  v5[10] = v9;
  v10 = (v9 + 15) & 0xFFFFFFFFFFFFFFF0;
  v5[11] = swift_task_alloc(v10);
  v5[12] = swift_task_alloc(v10);
  v5[13] = swift_task_alloc(v10);
  v11 = type metadata accessor for MainActor(0);
  v5[14] = v11;
  v5[15] = static MainActor.shared.getter();
  v12 = dispatch thunk of Actor.unownedExecutor.getter(v11, &protocol witness table for MainActor);
  v5[16] = v12;
  v5[17] = v13;
  return swift_task_switch(sub_100033DC0, v12, v13);
}

uint64_t sub_100033DC0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(uint64_t, uint64_t, uint64_t);

  if (qword_1000A4EE0 != -1)
    swift_once(&qword_1000A4EE0, sub_1000327B4);
  v1 = *(_QWORD *)(v0 + 96);
  v2 = *(_QWORD *)(v0 + 104);
  v4 = *(_QWORD *)(v0 + 72);
  v3 = *(_QWORD *)(v0 + 80);
  v5 = *(_QWORD *)(v0 + 64);
  v7 = *(_QWORD *)(v0 + 40);
  v6 = *(_QWORD *)(v0 + 48);
  v8 = qword_1000A7A40;
  *(_QWORD *)(v0 + 144) = qword_1000A7A40;
  v9 = *(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16);
  *(_QWORD *)(v0 + 152) = v9;
  v9(v2, v6, v5);
  v9(v1, v2, v5);
  LODWORD(v10) = *(_DWORD *)(v4 + 80);
  *(_DWORD *)(v0 + 176) = v10;
  v10 = v10;
  v11 = (v10 + 24) & ~v10;
  v12 = swift_allocObject(&unk_10009F268, v11 + v3, v10 | 7);
  *(_QWORD *)(v0 + 160) = v12;
  *(_QWORD *)(v12 + 16) = v7;
  v13 = *(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 32);
  *(_QWORD *)(v0 + 168) = v13;
  v13(v12 + v11, v2, v5);
  return swift_task_switch(sub_100033EBC, v8, 0);
}

uint64_t sub_100033EBC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  id v3;
  uint64_t v4;
  void (*v5)(uint64_t, uint64_t, uint64_t);
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  id v10;
  uint64_t v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v24;
  unint64_t v25;
  _QWORD *v26;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void (*v31)(char *, uint64_t, uint64_t);

  v1 = *(_QWORD *)(v0 + 144);
  if (*(_BYTE *)(v1 + 112) == 1)
  {
    v2 = qword_1000A4EF0;
    v3 = *(id *)(v1 + 128);
    if (v2 != -1)
      swift_once(&qword_1000A4EF0, sub_1000344EC);
    v4 = *(unsigned __int8 *)(v0 + 176);
    v5 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 152);
    v30 = *(_QWORD *)(v0 + 160);
    v31 = *(void (**)(char *, uint64_t, uint64_t))(v0 + 168);
    v6 = *(_QWORD *)(v0 + 88);
    v7 = *(_QWORD *)(v0 + 96);
    v28 = *(_QWORD *)(v0 + 80);
    v8 = *(_QWORD *)(v0 + 56);
    v9 = *(_QWORD *)(v0 + 64);
    v29 = *(_QWORD *)(v0 + 40);
    v10 = v3;
    dispatch thunk of DataModel.homeManager.setter(v3);
    v11 = type metadata accessor for TaskPriority(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 56))(v8, 1, 1, v11);
    v5(v6, v7, v9);
    v12 = v10;
    v13 = static MainActor.shared.getter();
    v14 = (v4 + 48) & ~v4;
    v15 = (_QWORD *)swift_allocObject(&unk_10009F2B8, v28 + v14, v4 | 7);
    v15[2] = v13;
    v15[3] = &protocol witness table for MainActor;
    v15[4] = v29;
    v15[5] = v12;
    v16 = (char *)v15 + v14;
    v17 = v30;
    v31(v16, v6, v9);
    v18 = sub_100032670(v8, (uint64_t)&unk_1000A5B18, (uint64_t)v15);
    swift_release(v18);

  }
  else
  {
    v19 = *(_QWORD *)(v0 + 160);
    v20 = swift_allocObject(&unk_10009F290, 32, 7);
    *(_QWORD *)(v20 + 16) = sub_100034C60;
    *(_QWORD *)(v20 + 24) = v19;
    v21 = (_QWORD *)(v1 + 120);
    swift_beginAccess(v1 + 120, v0 + 16, 33, 0);
    v22 = *(_QWORD **)(v1 + 120);
    swift_retain(v19);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v22);
    *(_QWORD *)(v1 + 120) = v22;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      v22 = sub_10005AF74(0, v22[2] + 1, 1, v22);
      *v21 = v22;
    }
    v25 = v22[2];
    v24 = v22[3];
    if (v25 >= v24 >> 1)
    {
      v22 = sub_10005AF74((_QWORD *)(v24 > 1), v25 + 1, 1, v22);
      *v21 = v22;
    }
    v17 = *(_QWORD *)(v0 + 160);
    v22[2] = v25 + 1;
    v26 = &v22[2 * v25];
    v26[4] = sub_100034CC8;
    v26[5] = v20;
    swift_endAccess(v0 + 16);
  }
  swift_release(v17);
  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 72) + 8))(*(_QWORD *)(v0 + 96), *(_QWORD *)(v0 + 64));
  return swift_task_switch(sub_100034138, *(_QWORD *)(v0 + 128), *(_QWORD *)(v0 + 136));
}

uint64_t sub_100034138()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *(_QWORD *)(v0 + 96);
  v2 = *(_QWORD *)(v0 + 104);
  v3 = *(_QWORD *)(v0 + 88);
  v4 = *(_QWORD *)(v0 + 56);
  swift_release(*(_QWORD *)(v0 + 120));
  swift_task_dealloc(v2);
  swift_task_dealloc(v1);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10003419C(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  id v13;
  uint64_t v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v22;

  v6 = sub_10000527C(&qword_1000A5AE0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(_QWORD *)(v7 + 64);
  __chkstk_darwin(v6);
  v9 = (char *)&v22 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_10000527C(&qword_1000A5AE8);
  __chkstk_darwin(v10);
  v12 = (char *)&v22 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1000A4EF0 != -1)
    swift_once(&qword_1000A4EF0, sub_1000344EC);
  v13 = a1;
  dispatch thunk of DataModel.homeManager.setter(a1);
  v14 = type metadata accessor for TaskPriority(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 56))(v12, 1, 1, v14);
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))((char *)&v22 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), a3, v6);
  type metadata accessor for MainActor(0);
  v15 = v13;
  v16 = static MainActor.shared.getter();
  v17 = *(unsigned __int8 *)(v7 + 80);
  v18 = (v17 + 48) & ~v17;
  v19 = (char *)swift_allocObject(&unk_10009F2E0, v18 + v8, v17 | 7);
  *((_QWORD *)v19 + 2) = v16;
  *((_QWORD *)v19 + 3) = &protocol witness table for MainActor;
  *((_QWORD *)v19 + 4) = a2;
  *((_QWORD *)v19 + 5) = v15;
  (*(void (**)(char *, char *, uint64_t))(v7 + 32))(&v19[v18], v9, v6);
  v20 = sub_100032670((uint64_t)v12, (uint64_t)&unk_1000A5B20, (uint64_t)v19);
  return swift_release(v20);
}

uint64_t sub_10003434C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v6[3] = a5;
  v6[4] = a6;
  v7 = type metadata accessor for MainActor(0);
  v6[5] = static MainActor.shared.getter();
  v8 = dispatch thunk of Actor.unownedExecutor.getter(v7, &protocol witness table for MainActor);
  v6[6] = v8;
  v6[7] = v9;
  return swift_task_switch(sub_1000343B8, v8, v9);
}

uint64_t sub_1000343B8()
{
  uint64_t v0;
  _QWORD *v1;

  if (qword_1000A4EF0 != -1)
    swift_once(&qword_1000A4EF0, sub_1000344EC);
  v1 = (_QWORD *)swift_task_alloc(async function pointer to DataModel.loadUpHomeSnapshots(homeManager:)[1]);
  *(_QWORD *)(v0 + 64) = v1;
  *v1 = v0;
  v1[1] = sub_100034438;
  return DataModel.loadUpHomeSnapshots(homeManager:)(*(_QWORD *)(v0 + 24));
}

uint64_t sub_100034438()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_task_dealloc(*(_QWORD *)(*v0 + 64));
  return swift_task_switch(sub_100034484, *(_QWORD *)(v1 + 48), *(_QWORD *)(v1 + 56));
}

uint64_t sub_100034484()
{
  uint64_t v0;
  void *v1;
  id v2;
  uint64_t v3;

  swift_release(*(_QWORD *)(v0 + 40));
  byte_1000A5A38 = 1;
  v1 = (void *)qword_1000A5A30;
  *(_QWORD *)(v0 + 16) = qword_1000A5A30;
  v2 = v1;
  v3 = sub_10000527C(&qword_1000A5AE0);
  CheckedContinuation.resume(returning:)(v0 + 16, v3);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000344EC()
{
  uint64_t result;

  type metadata accessor for DataModel(0);
  result = static DataModel.shared.getter();
  qword_1000A5A30 = result;
  return result;
}

uint64_t sub_10003451C(uint64_t a1, int *a2)
{
  uint64_t v2;
  _QWORD *v4;
  uint64_t (*v6)(uint64_t);

  v6 = (uint64_t (*)(uint64_t))((char *)a2 + *a2);
  v4 = (_QWORD *)swift_task_alloc(a2[1]);
  *(_QWORD *)(v2 + 16) = v4;
  *v4 = v2;
  v4[1] = sub_100027970;
  return v6(a1);
}

void sub_100034580(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  if (qword_1000A4EE8 != -1)
    swift_once(&qword_1000A4EE8, sub_100032BE0);
  v4 = type metadata accessor for Logger(0);
  sub_100014698(v4, (uint64_t)qword_1000A7A48);
  v5 = swift_retain_n(a2, 2);
  v6 = Logger.logObject.getter(v5);
  v7 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v6, v7))
  {
    v8 = (uint8_t *)swift_slowAlloc(12, -1);
    v9 = swift_slowAlloc(32, -1);
    v17 = v9;
    *(_DWORD *)v8 = 136315138;
    v10 = swift_allocObject(&unk_10009F3D0, 32, 7);
    *(_QWORD *)(v10 + 16) = a1;
    *(_QWORD *)(v10 + 24) = a2;
    v15 = (uint64_t)sub_1000350B0;
    v16 = v10;
    swift_retain(a2);
    v11 = sub_10000527C(&qword_1000A5B58);
    v12 = String.init<A>(describing:)(&v15, v11);
    v14 = v13;
    v15 = sub_100023980(v12, v13, &v17);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v15, &v16, v8 + 4, v8 + 12);
    swift_release_n(a2, 2);
    swift_bridgeObjectRelease(v14);
    swift_arrayDestroy(v9, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v9, -1, -1);
    swift_slowDealloc(v8, -1, -1);

  }
  else
  {

    swift_release_n(a2, 2);
  }
}

uint64_t _s10HomeWidget0A12ManagerActorC04homeC14DidUpdateHomesyySo06HMHomeC0CF_0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned __int8 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t ObjectType;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD v23[4];

  v1 = v0;
  v2 = sub_10000527C(&qword_1000A5AE8);
  __chkstk_darwin(v2);
  v4 = (char *)v23 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for TaskPriority(0);
  v6 = *(_QWORD *)(v5 - 8);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v6 + 56))(v4, 1, 1, v5);
  v7 = (_QWORD *)swift_allocObject(&unk_10009F308, 40, 7);
  v7[2] = 0;
  v8 = v7 + 2;
  v7[3] = 0;
  v7[4] = v1;
  v9 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5);
  v10 = swift_retain(v1);
  if (v9 == 1)
  {
    sub_100034B4C((uint64_t)v4);
    v11 = 0;
    v12 = 0;
    v13 = 7168;
  }
  else
  {
    v14 = TaskPriority.rawValue.getter(v10);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v4, v5);
    v13 = v14 | 0x1C00;
    v15 = *v8;
    if (*v8)
    {
      v16 = v7[3];
      ObjectType = swift_getObjectType(*v8);
      swift_unknownObjectRetain(v15);
      v11 = dispatch thunk of Actor.unownedExecutor.getter(ObjectType, v16);
      v12 = v18;
      swift_unknownObjectRelease(v15);
    }
    else
    {
      v11 = 0;
      v12 = 0;
    }
  }
  v19 = swift_allocObject(&unk_10009F330, 32, 7);
  *(_QWORD *)(v19 + 16) = &unk_1000A5B30;
  *(_QWORD *)(v19 + 24) = v7;
  if (v12 | v11)
  {
    v23[0] = 0;
    v23[1] = 0;
    v20 = v23;
    v23[2] = v11;
    v23[3] = v12;
  }
  else
  {
    v20 = 0;
  }
  v21 = swift_task_create(v13, v20, (char *)&type metadata for () + 8, &unk_1000A5B38, v19);
  return swift_release(v21);
}

uint64_t sub_100034930(uint64_t a1)
{
  uint64_t v1;

  return sub_100033B84(a1, *(_QWORD *)(v1 + 16));
}

void sub_100034938(uint64_t a1)
{
  uint64_t v1;

  sub_100033844(a1, *(_QWORD *)(v1 + 16));
}

uint64_t type metadata accessor for HomeManagerActor()
{
  return objc_opt_self(_TtC10HomeWidget16HomeManagerActor);
}

uint64_t sub_100034960()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v1 = sub_10000527C(&qword_1000A5AE0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = v3 | 7;
  v6 = ((*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v6, v5);
}

uint64_t sub_1000349D0()
{
  sub_10000527C(&qword_1000A5AE0);
  return sub_1000339D4();
}

uint64_t sub_100034A24(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100034A34(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_100034A3C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = sub_10000527C(&qword_1000A5AE0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 40) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_100034AB4(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  v4 = *(unsigned __int8 *)(*(_QWORD *)(sub_10000527C(&qword_1000A5AE0) - 8) + 80);
  v5 = v1[2];
  v6 = v1[3];
  v7 = v1[4];
  v8 = (uint64_t)v1 + ((v4 + 40) & ~v4);
  v9 = (_QWORD *)swift_task_alloc(dword_1000A5AF4);
  *(_QWORD *)(v2 + 16) = v9;
  *v9 = v2;
  v9[1] = sub_100026DE0;
  return sub_100033CE0(a1, v5, v6, v7, v8);
}

uint64_t sub_100034B4C(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_10000527C(&qword_1000A5AE8);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_100034B8C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int *v4;
  _QWORD *v5;

  v4 = *(int **)(v1 + 16);
  v5 = (_QWORD *)swift_task_alloc(dword_1000A5B04);
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_100026DE0;
  return ((uint64_t (*)(uint64_t, int *))((char *)&dword_1000A5B00 + dword_1000A5B00))(a1, v4);
}

uint64_t sub_100034BFC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = sub_10000527C(&qword_1000A5AE0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 24) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_100034C60(void *a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(unsigned __int8 *)(*(_QWORD *)(sub_10000527C(&qword_1000A5AE0) - 8) + 80);
  return sub_10003419C(a1, *(_QWORD *)(v1 + 16), v1 + ((v3 + 24) & ~v3));
}

uint64_t sub_100034CA4()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100034CC8(_QWORD *a1)
{
  uint64_t v1;

  return (*(uint64_t (**)(_QWORD))(v1 + 16))(*a1);
}

uint64_t sub_100034CF0(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;

  v4 = *(unsigned __int8 *)(*(_QWORD *)(sub_10000527C(&qword_1000A5AE0) - 8) + 80);
  v5 = v1[2];
  v6 = v1[3];
  v7 = v1[4];
  v8 = v1[5];
  v9 = (uint64_t)v1 + ((v4 + 48) & ~v4);
  v10 = (_QWORD *)swift_task_alloc(dword_1000A5B14);
  *(_QWORD *)(v2 + 16) = v10;
  *v10 = v2;
  v10[1] = sub_100026DE0;
  return sub_10003434C(a1, v5, v6, v7, v8, v9);
}

uint64_t sub_100034D90()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = sub_10000527C(&qword_1000A5AE0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 48) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));

  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_100034E10()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 40, 7);
}

uint64_t sub_100034E3C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;

  v2 = *(_QWORD *)(v0 + 32);
  v3 = (_QWORD *)swift_task_alloc(dword_1000A5B2C);
  *(_QWORD *)(v1 + 16) = v3;
  *v3 = v1;
  v3[1] = sub_100026DE0;
  v3[2] = v2;
  return swift_task_switch(sub_100033244, v2, 0);
}

uint64_t sub_100034E9C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int *v4;
  _QWORD *v5;

  v4 = *(int **)(v1 + 16);
  v5 = (_QWORD *)swift_task_alloc(dword_1000A5B04);
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_10001CEBC;
  return ((uint64_t (*)(uint64_t, int *))((char *)&dword_1000A5B00 + dword_1000A5B00))(a1, v4);
}

uint64_t sub_100034F0C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = sub_10000527C(&qword_1000A5B40);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 32) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_100034F84(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v4 = *(unsigned __int8 *)(*(_QWORD *)(sub_10000527C(&qword_1000A5B40) - 8) + 80);
  v5 = *(_QWORD *)(v1 + 16);
  v6 = *(_QWORD *)(v1 + 24);
  v7 = v1 + ((v4 + 32) & ~v4);
  v8 = (_QWORD *)swift_task_alloc(dword_1000A5B4C);
  *(_QWORD *)(v2 + 16) = v8;
  *v8 = v2;
  v8[1] = sub_10001CEBC;
  return sub_100032F0C(a1, v5, v6, v7);
}

uint64_t sub_10003500C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = sub_10000527C(&qword_1000A5B40);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_100035070(void *a1)
{
  sub_10000527C(&qword_1000A5B40);
  return sub_1000331E4(a1);
}

uint64_t sub_1000350B0@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t result;

  result = (*(uint64_t (**)(void))(v1 + 16))();
  *a1 = result;
  return result;
}

uint64_t sub_1000350EC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  char v15;
  unint64_t v16;
  void (*v17)(char *, char *, uint64_t);
  void (*v18)(char *, uint64_t);
  _QWORD v20[2];

  v20[1] = a1;
  v1 = sub_10000527C(&qword_1000A5BD8);
  __chkstk_darwin(v1);
  v3 = (char *)v20 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_10000527C(&qword_1000A5BE0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = __chkstk_darwin(v4);
  v8 = (char *)v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v10 = (char *)v20 - v9;
  v11 = sub_1000469AC(0);
  v13 = v12;
  v15 = v14;
  v16 = sub_100035384();
  _ControlWidgetAdaptor.init(_:)(v16, &type metadata for LaunchHomeAppControl, v16);
  v17 = *(void (**)(char *, char *, uint64_t))(v5 + 16);
  v17(v8, v10, v4);
  *(_QWORD *)v3 = v11;
  *((_QWORD *)v3 + 1) = v13;
  v3[16] = v15 & 1;
  v17(&v3[*(int *)(v1 + 48)], v8, v4);
  swift_bridgeObjectRetain(v13);
  TupleWidget.init(_:)(v3, v1);
  v18 = *(void (**)(char *, uint64_t))(v5 + 8);
  v18(v10, v4);
  v18(v8, v4);
  return swift_bridgeObjectRelease(v13);
}

Swift::String *homeDeepLinkURLPrefix.unsafeMutableAddressor()
{
  return &homeDeepLinkURLPrefix;
}

Swift::String *homeDeepLinkURLMainScreen.unsafeMutableAddressor()
{
  return &homeDeepLinkURLMainScreen;
}

void sub_10003527C()
{
  strcpy((char *)&homeAccessoryTypePseudoHost, "accessorytype");
  HIWORD(homeAccessoryTypePseudoHost._object) = -4864;
}

Swift::String *homeAccessoryTypePseudoHost.unsafeMutableAddressor()
{
  if (qword_1000A4EF8 != -1)
    swift_once(&qword_1000A4EF8, sub_10003527C);
  return &homeAccessoryTypePseudoHost;
}

int main(int argc, const char **argv, const char **envp)
{
  sub_100035320();
  static WidgetBundle.main()();
  return 0;
}

unint64_t sub_100035320()
{
  unint64_t result;

  result = qword_1000A5BD0;
  if (!qword_1000A5BD0)
  {
    result = swift_getWitnessTable(&unk_1000883A4, &type metadata for HomeWidgetBundle);
    atomic_store(result, (unint64_t *)&qword_1000A5BD0);
  }
  return result;
}

ValueMetadata *type metadata accessor for HomeWidgetBundle()
{
  return &type metadata for HomeWidgetBundle;
}

uint64_t sub_100035374(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_10008C864, 1);
}

unint64_t sub_100035384()
{
  unint64_t result;

  result = qword_1000A5BE8;
  if (!qword_1000A5BE8)
  {
    result = swift_getWitnessTable(&unk_1000881B0, &type metadata for LaunchHomeAppControl);
    atomic_store(result, (unint64_t *)&qword_1000A5BE8);
  }
  return result;
}

unint64_t sub_1000353CC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000A5BF0;
  if (!qword_1000A5BF0)
  {
    v1 = sub_1000052BC(&qword_1000A5BF8);
    result = swift_getWitnessTable(&protocol conformance descriptor for TupleWidget<A>, v1);
    atomic_store(result, (unint64_t *)&qword_1000A5BF0);
  }
  return result;
}

unint64_t sub_100035418(unint64_t a1, uint64_t a2, int *a3)
{
  int v5;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v20 = *(_QWORD *)a2;
    *(_QWORD *)a1 = *(_QWORD *)a2;
    a1 = v20 + ((v5 + 16) & ~(unint64_t)v5);
    swift_retain(v20);
  }
  else
  {
    v7 = *(_QWORD *)a2;
    v8 = *(_BYTE *)(a2 + 8);
    sub_100035568(*(_QWORD *)a2, v8);
    *(_QWORD *)a1 = v7;
    *(_BYTE *)(a1 + 8) = v8;
    v9 = *(_QWORD *)(a2 + 16);
    v10 = *(_QWORD *)(a2 + 24);
    v11 = *(_QWORD *)(a2 + 32);
    v12 = *(_QWORD *)(a2 + 40);
    v13 = *(_BYTE *)(a2 + 48);
    sub_100035574(v9, v10, v11, v12, v13);
    *(_QWORD *)(a1 + 16) = v9;
    *(_QWORD *)(a1 + 24) = v10;
    *(_QWORD *)(a1 + 32) = v11;
    *(_QWORD *)(a1 + 40) = v12;
    *(_BYTE *)(a1 + 48) = v13;
    v14 = a3[6];
    v15 = (uint64_t *)(a1 + v14);
    v16 = (uint64_t *)(a2 + v14);
    v17 = sub_10000527C(&qword_1000A5C00);
    if (swift_getEnumCaseMultiPayload(v16, v17) == 1)
    {
      v18 = type metadata accessor for WidgetFamily(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v18 - 8) + 16))(v15, v16, v18);
      v19 = 1;
    }
    else
    {
      v21 = *v16;
      *v15 = *v16;
      swift_retain(v21);
      v19 = 0;
    }
    swift_storeEnumTagMultiPayload(v15, v17, v19);
    v22 = a3[7];
    v23 = a3[8];
    v24 = *(_QWORD *)(a2 + v22);
    *(_QWORD *)(a1 + v22) = v24;
    *(_BYTE *)(a1 + v23) = *(_BYTE *)(a2 + v23);
    *(_BYTE *)(a1 + a3[9]) = *(_BYTE *)(a2 + a3[9]);
    swift_bridgeObjectRetain(v24);
  }
  return a1;
}

uint64_t sub_100035568(uint64_t result, char a2)
{
  if ((a2 & 1) == 0)
    return swift_retain(result);
  return result;
}

uint64_t sub_100035574(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  if ((a5 & 1) == 0)
    return swift_retain(result);
  return result;
}

uint64_t sub_100035580(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;

  sub_10003561C(*(_QWORD *)a1, *(_BYTE *)(a1 + 8));
  sub_100035628(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_BYTE *)(a1 + 48));
  v4 = (_QWORD *)(a1 + *(int *)(a2 + 24));
  v5 = sub_10000527C(&qword_1000A5C00);
  if (swift_getEnumCaseMultiPayload(v4, v5) == 1)
  {
    v6 = type metadata accessor for WidgetFamily(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v4, v6);
  }
  else
  {
    swift_release(*v4);
  }
  return swift_bridgeObjectRelease(*(_QWORD *)(a1 + *(int *)(a2 + 28)));
}

uint64_t sub_10003561C(uint64_t result, char a2)
{
  if ((a2 & 1) == 0)
    return swift_release(result);
  return result;
}

uint64_t sub_100035628(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  if ((a5 & 1) == 0)
    return swift_release(result);
  return result;
}

uint64_t sub_100035634(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v6 = *(_QWORD *)a2;
  v7 = *(_BYTE *)(a2 + 8);
  sub_100035568(*(_QWORD *)a2, v7);
  *(_QWORD *)a1 = v6;
  *(_BYTE *)(a1 + 8) = v7;
  v8 = *(_QWORD *)(a2 + 16);
  v9 = *(_QWORD *)(a2 + 24);
  v10 = *(_QWORD *)(a2 + 32);
  v11 = *(_QWORD *)(a2 + 40);
  v12 = *(_BYTE *)(a2 + 48);
  sub_100035574(v8, v9, v10, v11, v12);
  *(_QWORD *)(a1 + 16) = v8;
  *(_QWORD *)(a1 + 24) = v9;
  *(_QWORD *)(a1 + 32) = v10;
  *(_QWORD *)(a1 + 40) = v11;
  *(_BYTE *)(a1 + 48) = v12;
  v13 = a3[6];
  v14 = (uint64_t *)(a1 + v13);
  v15 = (uint64_t *)(a2 + v13);
  v16 = sub_10000527C(&qword_1000A5C00);
  if (swift_getEnumCaseMultiPayload(v15, v16) == 1)
  {
    v17 = type metadata accessor for WidgetFamily(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v17 - 8) + 16))(v14, v15, v17);
    v18 = 1;
  }
  else
  {
    v19 = *v15;
    *v14 = *v15;
    swift_retain(v19);
    v18 = 0;
  }
  swift_storeEnumTagMultiPayload(v14, v16, v18);
  v20 = a3[7];
  v21 = a3[8];
  v22 = *(_QWORD *)(a2 + v20);
  *(_QWORD *)(a1 + v20) = v22;
  *(_BYTE *)(a1 + v21) = *(_BYTE *)(a2 + v21);
  *(_BYTE *)(a1 + a3[9]) = *(_BYTE *)(a2 + a3[9]);
  swift_bridgeObjectRetain(v22);
  return a1;
}

uint64_t sub_100035758(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  char v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v6 = *(_QWORD *)a2;
  v7 = *(_BYTE *)(a2 + 8);
  sub_100035568(*(_QWORD *)a2, v7);
  v8 = *(_QWORD *)a1;
  v9 = *(_BYTE *)(a1 + 8);
  *(_QWORD *)a1 = v6;
  *(_BYTE *)(a1 + 8) = v7;
  sub_10003561C(v8, v9);
  v10 = *(_QWORD *)(a2 + 16);
  v11 = *(_QWORD *)(a2 + 24);
  v12 = *(_QWORD *)(a2 + 32);
  v13 = *(_QWORD *)(a2 + 40);
  v14 = *(_BYTE *)(a2 + 48);
  sub_100035574(v10, v11, v12, v13, v14);
  v15 = *(_QWORD *)(a1 + 16);
  v16 = *(_QWORD *)(a1 + 24);
  v17 = *(_QWORD *)(a1 + 32);
  v18 = *(_QWORD *)(a1 + 40);
  v19 = *(_BYTE *)(a1 + 48);
  *(_QWORD *)(a1 + 16) = v10;
  *(_QWORD *)(a1 + 24) = v11;
  *(_QWORD *)(a1 + 32) = v12;
  *(_QWORD *)(a1 + 40) = v13;
  *(_BYTE *)(a1 + 48) = v14;
  sub_100035628(v15, v16, v17, v18, v19);
  if (a1 != a2)
  {
    v20 = a3[6];
    v21 = (uint64_t *)(a1 + v20);
    v22 = (uint64_t *)(a2 + v20);
    sub_100014EFC(a1 + v20, &qword_1000A5C00);
    v23 = sub_10000527C(&qword_1000A5C00);
    if (swift_getEnumCaseMultiPayload(v22, v23) == 1)
    {
      v24 = type metadata accessor for WidgetFamily(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v24 - 8) + 16))(v21, v22, v24);
      v25 = 1;
    }
    else
    {
      v26 = *v22;
      *v21 = *v22;
      swift_retain(v26);
      v25 = 0;
    }
    swift_storeEnumTagMultiPayload(v21, v23, v25);
  }
  v27 = a3[7];
  v28 = *(_QWORD *)(a1 + v27);
  v29 = *(_QWORD *)(a2 + v27);
  *(_QWORD *)(a1 + v27) = v29;
  swift_bridgeObjectRetain(v29);
  swift_bridgeObjectRelease(v28);
  *(_BYTE *)(a1 + a3[8]) = *(_BYTE *)(a2 + a3[8]);
  *(_BYTE *)(a1 + a3[9]) = *(_BYTE *)(a2 + a3[9]);
  return a1;
}

uint64_t sub_1000358C0(uint64_t a1, uint64_t a2, int *a3)
{
  __int128 v6;
  uint64_t v7;
  void *v8;
  const void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  v6 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v6;
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  v7 = a3[6];
  v8 = (void *)(a1 + v7);
  v9 = (const void *)(a2 + v7);
  v10 = sub_10000527C(&qword_1000A5C00);
  if (swift_getEnumCaseMultiPayload(v9, v10) == 1)
  {
    v11 = type metadata accessor for WidgetFamily(0);
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v11 - 8) + 32))(v8, v9, v11);
    swift_storeEnumTagMultiPayload(v8, v10, 1);
  }
  else
  {
    memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v10 - 8) + 64));
  }
  v12 = a3[8];
  *(_QWORD *)(a1 + a3[7]) = *(_QWORD *)(a2 + a3[7]);
  *(_BYTE *)(a1 + v12) = *(_BYTE *)(a2 + v12);
  *(_BYTE *)(a1 + a3[9]) = *(_BYTE *)(a2 + a3[9]);
  return a1;
}

uint64_t sub_1000359B0(uint64_t a1, uint64_t *a2, int *a3)
{
  uint64_t v6;
  char v7;
  uint64_t v8;
  char v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  __int128 v16;
  uint64_t v17;
  void *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v6 = *a2;
  v7 = *((_BYTE *)a2 + 8);
  v8 = *(_QWORD *)a1;
  v9 = *(_BYTE *)(a1 + 8);
  *(_QWORD *)a1 = v6;
  *(_BYTE *)(a1 + 8) = v7;
  sub_10003561C(v8, v9);
  v10 = *((_BYTE *)a2 + 48);
  v11 = *(_QWORD *)(a1 + 16);
  v12 = *(_QWORD *)(a1 + 24);
  v13 = *(_QWORD *)(a1 + 32);
  v14 = *(_QWORD *)(a1 + 40);
  v15 = *(_BYTE *)(a1 + 48);
  v16 = *((_OWORD *)a2 + 2);
  *(_OWORD *)(a1 + 16) = *((_OWORD *)a2 + 1);
  *(_OWORD *)(a1 + 32) = v16;
  *(_BYTE *)(a1 + 48) = v10;
  sub_100035628(v11, v12, v13, v14, v15);
  if ((uint64_t *)a1 != a2)
  {
    v17 = a3[6];
    v18 = (void *)(a1 + v17);
    v19 = (char *)a2 + v17;
    sub_100014EFC(a1 + v17, &qword_1000A5C00);
    v20 = sub_10000527C(&qword_1000A5C00);
    if (swift_getEnumCaseMultiPayload(v19, v20) == 1)
    {
      v21 = type metadata accessor for WidgetFamily(0);
      (*(void (**)(void *, char *, uint64_t))(*(_QWORD *)(v21 - 8) + 32))(v18, v19, v21);
      swift_storeEnumTagMultiPayload(v18, v20, 1);
    }
    else
    {
      memcpy(v18, v19, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
    }
  }
  v22 = a3[7];
  v23 = *(_QWORD *)(a1 + v22);
  *(_QWORD *)(a1 + v22) = *(uint64_t *)((char *)a2 + v22);
  swift_bridgeObjectRelease(v23);
  v24 = a3[9];
  *(_BYTE *)(a1 + a3[8]) = *((_BYTE *)a2 + a3[8]);
  *(_BYTE *)(a1 + v24) = *((_BYTE *)a2 + v24);
  return a1;
}

uint64_t sub_100035ADC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100035AE8);
}

uint64_t sub_100035AE8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;
  int v10;

  v6 = sub_10000527C(&qword_1000A5C08);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1 + *(int *)(a3 + 24), a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 28));
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  v10 = v9 - 1;
  if (v10 < 0)
    v10 = -1;
  return (v10 + 1);
}

uint64_t sub_100035B78(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100035B84);
}

uint64_t sub_100035B84(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = sub_10000527C(&qword_1000A5C08);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1 + *(int *)(a4 + 24), a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 28)) = a2;
  return result;
}

uint64_t type metadata accessor for HomeInteractiveWidgetsEntryView(uint64_t a1)
{
  return sub_100050B64(a1, (uint64_t *)&unk_1000A5C68, (uint64_t)&nominal type descriptor for HomeInteractiveWidgetsEntryView);
}

void sub_100035C18(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[6];

  v4[0] = "\t";
  v4[1] = &unk_100088498;
  sub_100048D10(319, (unint64_t *)&unk_1000A5C78, (uint64_t (*)(uint64_t))&type metadata accessor for WidgetFamily);
  if (v3 <= 0x3F)
  {
    v4[2] = *(_QWORD *)(v2 - 8) + 64;
    v4[3] = &unk_1000884B0;
    v4[4] = &unk_1000884C8;
    v4[5] = &unk_1000884E0;
    swift_initStructMetadata(a1, 256, 6, v4, a1 + 16);
  }
}

uint64_t sub_100035CC0(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_10008C974, 1);
}

uint64_t sub_100035CD0(uint64_t (*a1)(char *), uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  char *v12;
  _QWORD *v13;
  unint64_t v14;
  _QWORD *v15;
  unint64_t v16;
  char v17;
  unint64_t v18;
  unint64_t v19;
  _QWORD v20[2];
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;

  v7 = type metadata accessor for AccessoryAndSceneEntity(0);
  v24 = *(_QWORD *)(v7 - 8);
  v8 = __chkstk_darwin(v7);
  v23 = (uint64_t)v20 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = __chkstk_darwin(v8);
  v12 = (char *)v20 - v11;
  v13 = _swiftEmptyArrayStorage;
  v25 = _swiftEmptyArrayStorage;
  v22 = *(_QWORD *)(a3 + 16);
  if (v22)
  {
    v14 = 0;
    v15 = _swiftEmptyArrayStorage;
    v20[1] = a2;
    v21 = a3;
    v20[0] = a1;
    while (v14 < *(_QWORD *)(a3 + 16))
    {
      v16 = (*(unsigned __int8 *)(v24 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v24 + 80);
      v13 = *(_QWORD **)(v24 + 72);
      sub_100026C34(a3 + v16 + (_QWORD)v13 * v14, (uint64_t)v12, type metadata accessor for AccessoryAndSceneEntity);
      v17 = a1(v12);
      if (v3)
      {
        sub_100026C78((uint64_t)v12, type metadata accessor for AccessoryAndSceneEntity);
        swift_release(v15);
        swift_bridgeObjectRelease(a3);
        return (uint64_t)v13;
      }
      if ((v17 & 1) != 0)
      {
        sub_100026D98((uint64_t)v12, v23, type metadata accessor for AccessoryAndSceneEntity);
        if ((swift_isUniquelyReferenced_nonNull_native(v15) & 1) == 0)
          sub_10002D8A0(0, v15[2] + 1, 1);
        v15 = v25;
        v19 = v25[2];
        v18 = v25[3];
        if (v19 >= v18 >> 1)
        {
          sub_10002D8A0(v18 > 1, v19 + 1, 1);
          v15 = v25;
        }
        v15[2] = v19 + 1;
        result = sub_100026D98(v23, (uint64_t)v15 + v16 + v19 * (_QWORD)v13, type metadata accessor for AccessoryAndSceneEntity);
        a3 = v21;
        a1 = (uint64_t (*)(char *))v20[0];
      }
      else
      {
        result = sub_100026C78((uint64_t)v12, type metadata accessor for AccessoryAndSceneEntity);
      }
      if (v22 == ++v14)
      {
        v13 = v25;
        goto LABEL_15;
      }
    }
    __break(1u);
  }
  else
  {
LABEL_15:
    swift_bridgeObjectRelease(a3);
    return (uint64_t)v13;
  }
  return result;
}

uint64_t sub_100035EE8()
{
  qword_1000A7A70 = *UserHomeSettings.shared.unsafeMutableAddressor();
  *(_QWORD *)algn_1000A7A78 = &protocol witness table for UserHomeSettings;
  return swift_retain(qword_1000A7A70);
}

uint64_t sub_100035F14(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;

  v5[7] = a4;
  v5[8] = a5;
  v5[5] = a2;
  v5[6] = a3;
  v5[4] = a1;
  return swift_task_switch(sub_100035F34, 0, 0);
}

uint64_t sub_100035F34()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t (*v15)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v16;

  if (qword_1000A4F08 != -1)
    swift_once(&qword_1000A4F08, sub_100053184);
  v1 = type metadata accessor for Logger(0);
  v2 = sub_100014698(v1, (uint64_t)qword_1000A7A80);
  v0[9] = v2;
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.default.getter(v3);
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc(12, -1);
    v6 = swift_slowAlloc(32, -1);
    v16 = v6;
    *(_DWORD *)v5 = 136315138;
    v0[3] = sub_100023980(0xD000000000000011, 0x800000010008B140, &v16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 3, v0 + 4, v5 + 4, v5 + 12);
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "%s Getting Snapshot for interactive widgets... - started", v5, 0xCu);
    swift_arrayDestroy(v6, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v6, -1, -1);
    swift_slowDealloc(v5, -1, -1);
  }

  v7 = (_QWORD *)swift_task_alloc(dword_1000A648C);
  v0[10] = v7;
  *v7 = v0;
  v7[1] = sub_100036124;
  v9 = v0[7];
  v8 = v0[8];
  v11 = v0[5];
  v10 = v0[6];
  v7[10] = v0[4];
  v7[11] = v11;
  v12 = unk_1000A649C;
  v15 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))((char *)&dword_1000A6498 + dword_1000A6498);
  v7[12] = v10;
  v7[13] = v9;
  v13 = (_QWORD *)swift_task_alloc(v12);
  v7[14] = v13;
  *v13 = v7;
  v13[1] = sub_100036340;
  return v15(v11, v10, v9, v8);
}

uint64_t sub_100036124()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 80));
  return swift_task_switch(sub_100036178, 0, 0);
}

uint64_t sub_100036178(uint64_t a1)
{
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint8_t *v4;
  uint64_t v5;
  uint64_t v7;

  v2 = Logger.logObject.getter(a1);
  v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    v4 = (uint8_t *)swift_slowAlloc(12, -1);
    v5 = swift_slowAlloc(32, -1);
    v7 = v5;
    *(_DWORD *)v4 = 136315138;
    *(_QWORD *)(v1 + 16) = sub_100023980(0xD000000000000011, 0x800000010008B140, &v7);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 16, v1 + 24, v4 + 4, v4 + 12);
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "%s Getting Snapshot for interactive widgets... - ended", v4, 0xCu);
    swift_arrayDestroy(v5, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v5, -1, -1);
    swift_slowDealloc(v4, -1, -1);
  }

  return (*(uint64_t (**)(void))(v1 + 8))();
}

uint64_t sub_1000362B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  _QWORD *v10;
  uint64_t (*v12)(uint64_t, uint64_t, uint64_t, uint64_t);

  v5[12] = a3;
  v5[13] = a4;
  v5[10] = a1;
  v5[11] = a2;
  v12 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))((char *)&dword_1000A6498 + dword_1000A6498);
  v10 = (_QWORD *)swift_task_alloc(unk_1000A649C);
  v5[14] = v10;
  *v10 = v5;
  v10[1] = sub_100036340;
  return v12(a2, a3, a4, a5);
}

uint64_t sub_100036340(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();

  v4 = *v2;
  v5 = *(_QWORD *)(*v2 + 112);
  *(_QWORD *)(*v2 + 120) = v1;
  swift_task_dealloc(v5);
  if (v1)
  {
    v6 = sub_10003644C;
  }
  else
  {
    *(_QWORD *)(v4 + 128) = a1;
    v6 = sub_1000363B4;
  }
  return swift_task_switch(v6, 0, 0);
}

uint64_t sub_1000363B4()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t (*v9)(void);

  v0[3] = v0[16];
  v1 = IntentParameter.wrappedValue.setter(v0 + 3);
  v2 = v0[12];
  v3 = v0[13];
  v5 = v0[10];
  v4 = v0[11];
  Date.init()(v1);
  v6 = type metadata accessor for AccessoriesAndScenesEntry(0);
  v7 = (_QWORD *)(v5 + *(int *)(v6 + 20));
  *v7 = v4;
  v7[1] = v2;
  v7[2] = v3;
  *(_BYTE *)(v5 + *(int *)(v6 + 24)) = 0;
  v9 = (uint64_t (*)(void))v0[1];
  swift_retain(v4);
  swift_retain(v2);
  swift_retain(v3);
  return v9();
}

uint64_t sub_10003644C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  NSObject *v21;
  os_log_type_t v22;
  _BOOL4 v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t (*v38)(void);
  uint64_t v39;

  *(_QWORD *)(v0 + 16) = *(_QWORD *)(v0 + 120);
  v1 = v0 + 56;
  ((void (*)(void))swift_errorRetain)();
  v2 = sub_10000527C(&qword_1000A64A0);
  if ((swift_dynamicCast(v0 + 136, v0 + 16, v2, &type metadata for AccessoriesAndScenesError, 0) & 1) != 0)
  {
    swift_errorRelease(*(_QWORD *)(v0 + 120));
    v3 = *(_BYTE *)(v0 + 136);
    if (qword_1000A4F08 != -1)
      swift_once(&qword_1000A4F08, sub_100053184);
    v4 = type metadata accessor for Logger(0);
    v5 = sub_100014698(v4, (uint64_t)qword_1000A7A80);
    v6 = Logger.logObject.getter(v5);
    v7 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v6, v7))
    {
      v8 = swift_slowAlloc(22, -1);
      v9 = (uint64_t *)swift_slowAlloc(8, -1);
      v10 = swift_slowAlloc(32, -1);
      v39 = v10;
      *(_DWORD *)v8 = 136315394;
      *(_QWORD *)(v0 + 64) = sub_100023980(0xD00000000000001ALL, 0x800000010008AE90, &v39);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 64, v0 + 72, v8 + 4, v8 + 12);
      *(_WORD *)(v8 + 12) = 2112;
      v11 = sub_100052E48();
      v12 = swift_allocError(&type metadata for AccessoriesAndScenesError, v11, 0, 0);
      *v13 = v3;
      v14 = _swift_stdlib_bridgeErrorToNSError(v12);
      *(_QWORD *)(v0 + 72) = v14;
      v1 = v0 + 56;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 72, v0 + 80, v8 + 14, v8 + 22);
      *v9 = v14;
      _os_log_impl((void *)&_mh_execute_header, v6, v7, "%s accessoriesAndScenes failed: %@", (uint8_t *)v8, 0x16u);
      v15 = sub_10000527C(&qword_1000A5208);
      swift_arrayDestroy(v9, 1, v15);
      swift_slowDealloc(v9, -1, -1);
      swift_arrayDestroy(v10, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v10, -1, -1);
      swift_slowDealloc(v8, -1, -1);
    }

    *(_QWORD *)(v0 + 56) = _swiftEmptyArrayStorage;
    IntentParameter.wrappedValue.setter(v1);
    v16 = swift_errorRelease(*(_QWORD *)(v0 + 16));
  }
  else
  {
    v17 = v0 + 32;
    swift_errorRelease(*(_QWORD *)(v0 + 16));
    if (qword_1000A4F08 != -1)
      swift_once(&qword_1000A4F08, sub_100053184);
    v18 = *(_QWORD *)(v0 + 120);
    v19 = type metadata accessor for Logger(0);
    sub_100014698(v19, (uint64_t)qword_1000A7A80);
    swift_errorRetain(v18);
    v20 = swift_errorRetain(v18);
    v21 = Logger.logObject.getter(v20);
    v22 = static os_log_type_t.error.getter();
    v23 = os_log_type_enabled(v21, v22);
    v24 = *(_QWORD *)(v0 + 120);
    if (v23)
    {
      v25 = swift_slowAlloc(22, -1);
      v26 = (uint64_t *)swift_slowAlloc(8, -1);
      v27 = swift_slowAlloc(32, -1);
      *(_DWORD *)v25 = 136315394;
      v39 = v27;
      *(_QWORD *)(v0 + 40) = sub_100023980(0xD00000000000001ALL, 0x800000010008AE90, &v39);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 40, v0 + 48, v25 + 4, v25 + 12);
      *(_WORD *)(v25 + 12) = 2112;
      swift_errorRetain(v24);
      v28 = _swift_stdlib_bridgeErrorToNSError(v24);
      *(_QWORD *)(v0 + 48) = v28;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 48, v0 + 56, v25 + 14, v25 + 22);
      *v26 = v28;
      v17 = v0 + 32;
      swift_errorRelease(v24);
      swift_errorRelease(v24);
      _os_log_impl((void *)&_mh_execute_header, v21, v22, "%s accessoriesAndScenes failed: %@", (uint8_t *)v25, 0x16u);
      v29 = sub_10000527C(&qword_1000A5208);
      swift_arrayDestroy(v26, 1, v29);
      swift_slowDealloc(v26, -1, -1);
      swift_arrayDestroy(v27, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v27, -1, -1);
      swift_slowDealloc(v25, -1, -1);
    }
    else
    {
      swift_errorRelease(*(_QWORD *)(v0 + 120));
      swift_errorRelease(v24);
    }

    v30 = *(_QWORD *)(v0 + 120);
    *(_QWORD *)(v0 + 32) = _swiftEmptyArrayStorage;
    IntentParameter.wrappedValue.setter(v17);
    v16 = swift_errorRelease(v30);
    v3 = 1;
  }
  v31 = *(_QWORD *)(v0 + 96);
  v32 = *(_QWORD *)(v0 + 104);
  v34 = *(_QWORD *)(v0 + 80);
  v33 = *(_QWORD *)(v0 + 88);
  Date.init()(v16);
  v35 = type metadata accessor for AccessoriesAndScenesEntry(0);
  v36 = (_QWORD *)(v34 + *(int *)(v35 + 20));
  *v36 = v33;
  v36[1] = v31;
  v36[2] = v32;
  *(_BYTE *)(v34 + *(int *)(v35 + 24)) = v3;
  v38 = *(uint64_t (**)(void))(v0 + 8);
  swift_retain(v33);
  swift_retain(v31);
  swift_retain(v32);
  return v38();
}

uint64_t sub_100036948(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v5[7] = a4;
  v5[8] = a5;
  v5[5] = a2;
  v5[6] = a3;
  v5[4] = a1;
  v6 = type metadata accessor for TimelineReloadPolicy(0);
  v5[9] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v6 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for AccessoriesAndScenesEntry(0);
  v5[10] = v7;
  v8 = *(_QWORD *)(v7 - 8);
  v5[11] = v8;
  v5[12] = swift_task_alloc((*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_1000369D0, 0, 0);
}

uint64_t sub_1000369D0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t (*v15)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v16;

  if (qword_1000A4F08 != -1)
    swift_once(&qword_1000A4F08, sub_100053184);
  v1 = type metadata accessor for Logger(0);
  v2 = sub_100014698(v1, (uint64_t)qword_1000A7A80);
  *(_QWORD *)(v0 + 104) = v2;
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.default.getter(v3);
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc(12, -1);
    v6 = swift_slowAlloc(32, -1);
    v16 = v6;
    *(_DWORD *)v5 = 136315138;
    *(_QWORD *)(v0 + 24) = sub_100023980(0xD000000000000011, 0x800000010008AE70, &v16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 24, v0 + 32, v5 + 4, v5 + 12);
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "%s Loading Timeline for interactive widgets... - started", v5, 0xCu);
    swift_arrayDestroy(v6, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v6, -1, -1);
    swift_slowDealloc(v5, -1, -1);
  }

  sub_10005457C(*(_QWORD *)(v0 + 40), *(_QWORD *)(v0 + 48), *(void **)(v0 + 56), *(void **)(v0 + 64));
  v7 = (_QWORD *)swift_task_alloc(dword_1000A648C);
  *(_QWORD *)(v0 + 112) = v7;
  *v7 = v0;
  v7[1] = sub_100036BCC;
  v9 = *(_QWORD *)(v0 + 56);
  v8 = *(_QWORD *)(v0 + 64);
  v11 = *(_QWORD *)(v0 + 40);
  v10 = *(_QWORD *)(v0 + 48);
  v7[10] = *(_QWORD *)(v0 + 96);
  v7[11] = v11;
  v12 = unk_1000A649C;
  v15 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))((char *)&dword_1000A6498 + dword_1000A6498);
  v7[12] = v10;
  v7[13] = v9;
  v13 = (_QWORD *)swift_task_alloc(v12);
  v7[14] = v13;
  *v13 = v7;
  v13[1] = sub_100036340;
  return v15(v11, v10, v9, v8);
}

uint64_t sub_100036BCC()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 112));
  return swift_task_switch(sub_100036C20, 0, 0);
}

uint64_t sub_100036C20()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  uint64_t v14;
  uint8_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;

  v1 = *(_QWORD *)(v0 + 96);
  v2 = *(_QWORD *)(v0 + 80);
  v3 = *(_QWORD *)(v0 + 88);
  v4 = *(_QWORD *)(v0 + 72);
  v5 = sub_10000527C(&qword_1000A6490);
  v6 = *(unsigned __int8 *)(v3 + 80);
  v7 = (v6 + 32) & ~v6;
  v8 = swift_allocObject(v5, v7 + *(_QWORD *)(v3 + 72), v6 | 7);
  *(_OWORD *)(v8 + 16) = xmmword_100086C80;
  v9 = sub_100026C34(v1, v8 + v7, type metadata accessor for AccessoriesAndScenesEntry);
  static TimelineReloadPolicy.never.getter(v9);
  v10 = sub_100008C7C(qword_1000A6430, type metadata accessor for AccessoriesAndScenesEntry, (uint64_t)&unk_100088A80);
  v11 = Timeline.init(entries:policy:)(v8, v4, v2, v10);
  v12 = Logger.logObject.getter(v11);
  v13 = static os_log_type_t.default.getter(v12);
  if (os_log_type_enabled(v12, v13))
  {
    v14 = *(_QWORD *)(v0 + 96);
    v15 = (uint8_t *)swift_slowAlloc(12, -1);
    v16 = swift_slowAlloc(32, -1);
    v19 = v16;
    *(_DWORD *)v15 = 136315138;
    *(_QWORD *)(v0 + 16) = sub_100023980(0xD000000000000011, 0x800000010008AE70, &v19);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 16, v0 + 24, v15 + 4, v15 + 12);
    _os_log_impl((void *)&_mh_execute_header, v12, v13, "%s Loading Timeline for interactive widgets... - ended", v15, 0xCu);
    swift_arrayDestroy(v16, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v16, -1, -1);
    swift_slowDealloc(v15, -1, -1);
  }
  else
  {
    v14 = *(_QWORD *)(v0 + 96);
  }

  sub_100026C78(v14, type metadata accessor for AccessoriesAndScenesEntry);
  v17 = *(_QWORD *)(v0 + 72);
  swift_task_dealloc(*(_QWORD *)(v0 + 96));
  swift_task_dealloc(v17);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100036E24@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  uint64_t *v9;

  Date.init()(a1);
  v3 = sub_100029338();
  v5 = v4;
  v7 = v6;
  result = type metadata accessor for AccessoriesAndScenesEntry(0);
  v9 = (uint64_t *)(a2 + *(int *)(result + 20));
  *v9 = v3;
  v9[1] = v5;
  v9[2] = v7;
  *(_BYTE *)(a2 + *(int *)(result + 24)) = 0;
  return result;
}

uint64_t sub_100036E7C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;

  v7 = *(_QWORD *)(a2 + 16);
  v8 = swift_task_alloc(dword_1000A6504);
  *(_QWORD *)(v3 + 16) = v8;
  *(_QWORD *)v8 = v3;
  *(_QWORD *)(v8 + 8) = sub_100026DE0;
  *(_QWORD *)(v8 + 56) = v7;
  *(_QWORD *)(v8 + 64) = a3;
  *(_OWORD *)(v8 + 40) = *(_OWORD *)a2;
  *(_QWORD *)(v8 + 32) = a1;
  return swift_task_switch(sub_100035F34, 0, 0);
}

uint64_t sub_100036EFC(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  v6 = *a2;
  v7 = a2[1];
  v8 = a2[2];
  v9 = (_QWORD *)swift_task_alloc(dword_1000A6484);
  *(_QWORD *)(v3 + 16) = v9;
  *v9 = v3;
  v9[1] = sub_100026DE0;
  return sub_100036948(a1, v6, v7, v8, a3);
}

uint64_t sub_100036F80(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v7;

  v7 = (_QWORD *)swift_task_alloc(async function pointer to AppIntentTimelineProvider.relevances()[1]);
  *(_QWORD *)(v3 + 16) = v7;
  *v7 = v3;
  v7[1] = sub_10001CEBC;
  return AppIntentTimelineProvider.relevances()(a1, a2, a3);
}

uint64_t sub_100036FEC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v7;

  v7 = (_QWORD *)swift_task_alloc(async function pointer to AppIntentTimelineProvider.relevance()[1]);
  *(_QWORD *)(v3 + 16) = v7;
  *v7 = v3;
  v7[1] = sub_100026DE0;
  return AppIntentTimelineProvider.relevance()(a1, a2, a3);
}

uint64_t sub_100037058(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  void (*v14)(char *, uint64_t, uint64_t);
  __n128 v15;
  uint64_t v16;
  unint64_t v17;
  char v18;
  _QWORD *v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v24;
  void (*v25)(uint64_t, uint64_t);
  char *v27;
  uint64_t v28;

  v4 = type metadata accessor for UUID(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = __chkstk_darwin(v4);
  v27 = (char *)&v27 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __chkstk_darwin(v6);
  v10 = (char *)&v27 - v9;
  __chkstk_darwin(v8);
  v12 = (char *)&v27 - v11;
  v13 = type metadata accessor for AccessoryAndSceneEntity(0);
  v14 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
  v14(v12, a1 + *(int *)(v13 + 20), v4);
  v16 = *a2;
  if (*(_QWORD *)(*a2 + 16) && (v17 = sub_10001A558((uint64_t)v12), (v18 & 1) != 0))
  {
    v19 = *(_QWORD **)(*(_QWORD *)(v16 + 56) + 8 * v17);
    v15 = swift_bridgeObjectRetain(v19);
  }
  else
  {
    v19 = _swiftEmptyArrayStorage;
  }
  ((void (*)(char *, uint64_t, uint64_t, __n128))v14)(v10, a1, v4, v15);
  if ((swift_isUniquelyReferenced_nonNull_native(v19) & 1) == 0)
    v19 = (_QWORD *)sub_10005AA24(0, v19[2] + 1, 1, (unint64_t)v19);
  v21 = v19[2];
  v20 = v19[3];
  if (v21 >= v20 >> 1)
    v19 = (_QWORD *)sub_10005AA24(v20 > 1, v21 + 1, 1, (unint64_t)v19);
  v19[2] = v21 + 1;
  (*(void (**)(unint64_t, char *, uint64_t))(v5 + 32))((unint64_t)v19+ ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80))+ *(_QWORD *)(v5 + 72) * v21, v10, v4);
  v22 = (uint64_t)v27;
  v14(v27, (uint64_t)v12, v4);
  swift_bridgeObjectRetain(v19);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*a2);
  v28 = *a2;
  *a2 = 0x8000000000000000;
  sub_100078CD4((uint64_t)v19, v22, isUniquelyReferenced_nonNull_native);
  v24 = *a2;
  *a2 = v28;
  swift_bridgeObjectRelease(v24);
  v25 = *(void (**)(uint64_t, uint64_t))(v5 + 8);
  v25(v22, v4);
  v25((uint64_t)v12, v4);
  return swift_bridgeObjectRelease(v19);
}

void sub_100037284(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, _QWORD *a6)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  void *v14;
  void *v15;
  uint64_t v16;
  uint64_t inited;
  uint64_t v18;
  id v19;
  _QWORD *v20;
  id v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  NSObject *v27;
  os_log_type_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  id v35;
  _BYTE v36[16];
  uint64_t v37;
  _BYTE v38[40];
  uint64_t v39;
  uint64_t v40[2];

  v10 = type metadata accessor for UUID(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = &v36[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v37 = a1;
  v14 = sub_10001D7A8(sub_100052E98, (uint64_t)v36, a3);
  if (v14)
  {
    v15 = v14;
    if (*(_QWORD *)(a2 + 16))
    {
      v16 = sub_10000527C(&qword_1000A5200);
      inited = swift_initStackObject(v16, v38);
      *(_OWORD *)(inited + 16) = xmmword_100086CF0;
      *(_QWORD *)(inited + 32) = v15;
      v40[0] = inited;
      specialized Array._endMutation()(inited);
      v18 = v40[0];
      v19 = v15;
      swift_bridgeObjectRetain(a2);
      v20 = (_QWORD *)sub_1000259B0(v18, a2);

      swift_bridgeObjectRelease(v18);
      swift_bridgeObjectRelease(a2);
      if (v20[2])
      {
LABEL_4:
        sub_100057C4C((uint64_t)v20);
        v21 = v15;
        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v21);
        v23 = *(_QWORD *)((*a6 & 0xFFFFFFFFFFFFFF8) + 0x10);
        v22 = *(_QWORD *)((*a6 & 0xFFFFFFFFFFFFFF8) + 0x18);
        if (v23 >= v22 >> 1)
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v22 > 1, v23 + 1, 1);
        v24 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v23, v21);
        specialized Array._endMutation()(v24);

        return;
      }
    }
    else
    {
      v35 = v14;
      v20 = _swiftEmptyArrayStorage;
      if (_swiftEmptyArrayStorage[2])
        goto LABEL_4;
    }
    swift_bridgeObjectRelease(v20);

    return;
  }
  if (qword_1000A4F08 != -1)
    swift_once(&qword_1000A4F08, sub_100053184);
  v25 = type metadata accessor for Logger(0);
  sub_100014698(v25, (uint64_t)qword_1000A7A80);
  v26 = (*(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v11 + 16))(v13, a1, v10);
  v27 = Logger.logObject.getter(v26);
  v28 = static os_log_type_t.error.getter(v27);
  if (os_log_type_enabled(v27, v28))
  {
    v29 = swift_slowAlloc(22, -1);
    v30 = swift_slowAlloc(64, -1);
    v40[0] = v30;
    *(_DWORD *)v29 = 136315394;
    v39 = sub_100023980(0xD000000000000031, 0x800000010008AEE0, v40);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v39, v40, v29 + 4, v29 + 12);
    *(_WORD *)(v29 + 12) = 2080;
    v31 = sub_100008C7C(&qword_1000A7600, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v32 = dispatch thunk of CustomStringConvertible.description.getter(v10, v31);
    v34 = v33;
    v39 = sub_100023980(v32, v33, v40);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v39, v40, v29 + 14, v29 + 22);
    swift_bridgeObjectRelease(v34);
    (*(void (**)(_BYTE *, uint64_t))(v11 + 8))(v13, v10);
    _os_log_impl((void *)&_mh_execute_header, v27, v28, "%s Could not find home with UUID %s", (uint8_t *)v29, 0x16u);
    swift_arrayDestroy(v30, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v30, -1, -1);
    swift_slowDealloc(v29, -1, -1);
  }
  else
  {
    (*(void (**)(_BYTE *, uint64_t))(v11 + 8))(v13, v10);
  }

}

uint64_t sub_10003761C(id *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  id v8;
  uint64_t v10;

  v4 = type metadata accessor for UUID(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = objc_msgSend(*a1, "uniqueIdentifier");
  static UUID._unconditionallyBridgeFromObjectiveC(_:)();

  LOBYTE(a2) = static UUID.== infix(_:_:)(v7, a2);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  return a2 & 1;
}

uint64_t sub_1000376DC(uint64_t result, uint64_t a2)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;

  if (result < 0)
  {
    __break(1u);
  }
  else
  {
    v3 = *(_QWORD *)(a2 + 16);
    if ((uint64_t)v3 >= result)
      v4 = result;
    else
      v4 = *(_QWORD *)(a2 + 16);
    if (result)
      v5 = v4;
    else
      v5 = 0;
    if (v3 >= v5)
    {
      type metadata accessor for AccessoryAndSceneEntity(0);
      return a2;
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_10003774C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(char *, uint64_t);
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  unint64_t v38;
  BOOL v39;
  uint64_t v40;
  char v42;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;

  v48 = a2;
  v3 = type metadata accessor for DeviceDisplayNames(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v44 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for AccessoryAndSceneEntity(0);
  v8 = a1 + *(int *)(v7 + 24);
  v9 = type metadata accessor for WidgetTileInfo(0);
  v10 = *(int *)(v9 + 24);
  v11 = (uint64_t *)(v8 + *(int *)(v9 + 28));
  v12 = *v11;
  v13 = v11[1];
  if (v13)
    v14 = *v11;
  else
    v14 = 0;
  v15 = 0xE000000000000000;
  if (v13)
    v15 = v13;
  v46 = v14;
  v47 = v15;
  v17 = *(_QWORD *)(v8 + v10);
  v16 = *(_QWORD *)(v8 + v10 + 8);
  swift_bridgeObjectRetain_n(v13, 2);
  swift_bridgeObjectRetain(v16);
  v18 = DeviceDisplayNames.init(name:roomName:)(v17, v16, v12, v13);
  v45 = DeviceDisplayNames.displayName.getter(v18);
  v49 = v19;
  v20 = *(void (**)(char *, uint64_t))(v4 + 8);
  v20(v6, v3);
  v21 = v48 + *(int *)(v7 + 24);
  v22 = *(int *)(v9 + 24);
  v23 = (uint64_t *)(v21 + *(int *)(v9 + 28));
  v24 = *v23;
  v25 = v23[1];
  if (v25)
    v26 = *v23;
  else
    v26 = 0;
  if (v25)
    v27 = v23[1];
  else
    v27 = 0xE000000000000000;
  v28 = (uint64_t *)(v21 + v22);
  v30 = *v28;
  v29 = v28[1];
  swift_bridgeObjectRetain_n(v25, 2);
  swift_bridgeObjectRetain(v29);
  v31 = v24;
  v32 = v46;
  v33 = DeviceDisplayNames.init(name:roomName:)(v30, v29, v31, v25);
  v34 = DeviceDisplayNames.displayName.getter(v33);
  v36 = v35;
  v37 = v6;
  v38 = v47;
  v20(v37, v3);
  v39 = v32 == v26 && v38 == v27;
  if (v39 || (_stringCompareWithSmolCheck(_:_:expecting:)(v32, v38, v26, v27, 0) & 1) != 0)
  {
    v40 = v49;
    if (v45 == v34 && v49 == v36)
    {
      v42 = 0;
      v36 = v49;
    }
    else
    {
      v42 = _stringCompareWithSmolCheck(_:_:expecting:)(v45, v49, v34, v36, 1);
    }
  }
  else
  {
    v42 = _stringCompareWithSmolCheck(_:_:expecting:)(v32, v38, v26, v27, 1);
    v40 = v49;
  }
  swift_bridgeObjectRelease(v27);
  swift_bridgeObjectRelease(v36);
  swift_bridgeObjectRelease(v38);
  swift_bridgeObjectRelease(v40);
  return v42 & 1;
}

void sub_100037988(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  NSString v13;
  NSString v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  id v23;
  Class v24;
  uint64_t v25;
  Class isa;
  id v27;
  uint64_t v28;
  _QWORD aBlock[5];
  uint64_t v30;

  v28 = a6;
  v9 = sub_10000527C(&qword_1000A64F8);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(_QWORD *)(v10 + 64);
  __chkstk_darwin(v9);
  v12 = (char *)&v25 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = objc_msgSend(a2, "widgetManager");
  sub_100008CBC(0, &qword_1000A5040, HMCharacteristic_ptr);
  isa = Array._bridgeToObjectiveC()().super.isa;
  v13 = String._bridgeToObjectiveC()();
  v14 = String._bridgeToObjectiveC()();
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v12, a1, v9);
  v15 = *(unsigned __int8 *)(v10 + 80);
  v16 = (v15 + 16) & ~v15;
  v17 = (v11 + v16 + 7) & 0xFFFFFFFFFFFFFFF8;
  v18 = (v17 + 15) & 0xFFFFFFFFFFFFFFF8;
  v19 = swift_allocObject(&unk_10009F8F0, v18 + 8, v15 | 7);
  (*(void (**)(uint64_t, char *, uint64_t))(v10 + 32))(v19 + v16, v12, v9);
  v20 = v28;
  *(_QWORD *)(v19 + v17) = v28;
  *(_QWORD *)(v19 + v18) = a3;
  aBlock[4] = sub_100052FE8;
  v30 = v19;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10001916C;
  aBlock[3] = &unk_10009F908;
  v21 = _Block_copy(aBlock);
  v22 = v30;
  swift_bridgeObjectRetain(v20);
  swift_bridgeObjectRetain(a3);
  swift_release(v22);
  v24 = isa;
  v23 = v27;
  objc_msgSend(v27, "monitorAndFetchStateForCharacteristics:widgetIdentifier:kind:completion:", isa, v13, v14, v21);
  _Block_release(v21);

}

void sub_100037B98(void *a1, uint64_t a2, uint64_t a3, _QWORD *a4, uint64_t a5)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  id v45;
  uint64_t v46;
  id v47;
  NSObject *v48;
  os_log_type_t v49;
  _BOOL4 v50;
  uint64_t v51;
  id v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  unint64_t v58;
  _QWORD *v59;
  uint64_t v60;
  NSObject *v61;
  os_log_type_t v62;
  uint64_t v63;
  uint64_t *v64;
  _QWORD *v65;
  uint64_t v66;
  id v67;
  NSObject *v68;
  os_log_type_t v69;
  _BOOL4 v70;
  uint64_t v71;
  id v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  unint64_t v79;
  _QWORD *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  id v85;
  uint64_t v86;
  uint64_t v87;
  _QWORD *v88;
  uint64_t v89;
  unint64_t v90;
  id v91;
  void *v92;
  id v93;
  unint64_t v94;
  unint64_t v95;
  uint64_t v96;
  id v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  _QWORD *v101;
  id v102;
  id v103;
  uint64_t v104;
  NSObject *v105;
  os_log_type_t v106;
  int v107;
  uint64_t v108;
  uint64_t v109;
  id v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  unint64_t v117;
  unint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  __n128 v122;
  _QWORD *v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  NSObject *v127;
  os_log_type_t v128;
  uint8_t *v129;
  _QWORD *v130;
  uint64_t v131;
  uint64_t v132;
  unint64_t v133;
  unint64_t v134;
  void (*v135)(uint64_t, char *, uint64_t);
  uint64_t v136;
  int *v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t *v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t *v146;
  uint64_t v147;
  void (*v148)(uint64_t, uint64_t, uint64_t);
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  void *v153;
  id v154;
  id v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  char *v159;
  void (*v160)(uint64_t, char *, uint64_t);
  uint64_t v161;
  uint64_t v162;
  char *v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  NSObject *v170;
  int v171;
  uint64_t v172;
  uint64_t *v173;
  _QWORD *v174;
  uint64_t v175;
  unint64_t v176;
  unint64_t v177;
  _QWORD **v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  unint64_t v182;
  unint64_t v183;
  uint64_t v184;
  _QWORD **v185;
  uint64_t v186;
  uint64_t v187;
  unint64_t v188;
  unint64_t v189;
  os_log_t v190;
  uint64_t v191;
  uint64_t v192;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v194;
  unint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  _QWORD *v203;
  __n128 v204;
  uint64_t v205;
  __n128 v206;
  char *v207;
  _QWORD **v208;
  char *v209;
  uint64_t v210;
  unint64_t v211;
  char *v212;
  char *v213;
  uint64_t v214;
  char *v215;
  uint64_t v216;
  uint64_t v217;
  char *v218;
  char *v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  char *v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  int v227;
  uint64_t v228;
  void (*v229)(uint64_t, char *, uint64_t);
  uint64_t v230;
  uint64_t v231;
  os_log_t v232;
  uint8_t *v233;
  uint64_t v234;
  _QWORD *v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  id v243;
  char *v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  _QWORD *v249;

  v237 = a5;
  v203 = a4;
  v202 = a3;
  v7 = type metadata accessor for Logger(0);
  v224 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v223 = (char *)&v202 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v217 = type metadata accessor for StaticRenderingMode(0);
  v216 = *(_QWORD *)(v217 - 8);
  v9 = __chkstk_darwin(v217);
  v215 = (char *)&v202 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v242 = (uint64_t)&v202 - v11;
  v222 = type metadata accessor for WidgetTileInfo(0);
  v12 = __chkstk_darwin(v222);
  v14 = (char *)&v202 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = __chkstk_darwin(v12);
  v17 = (char *)&v202 - v16;
  v18 = __chkstk_darwin(v15);
  v20 = (char *)&v202 - v19;
  v21 = __chkstk_darwin(v18);
  v214 = (uint64_t)&v202 - v22;
  v23 = __chkstk_darwin(v21);
  v241 = (uint64_t)&v202 - v24;
  __chkstk_darwin(v23);
  v26 = (char *)&v202 - v25;
  v245 = type metadata accessor for AccessoryAndSceneEntity(0);
  v27 = *(_QWORD *)(v245 - 8);
  v28 = __chkstk_darwin(v245);
  v240 = (uint64_t)&v202 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  v30 = __chkstk_darwin(v28);
  v247 = (uint64_t)&v202 - v31;
  v32 = __chkstk_darwin(v30);
  v205 = (uint64_t)&v202 - v33;
  v34 = __chkstk_darwin(v32);
  v36 = (char *)&v202 - v35;
  __chkstk_darwin(v34);
  v244 = (char *)&v202 - v37;
  v246 = type metadata accessor for UUID(0);
  v221 = *(_QWORD *)(v246 - 8);
  v38 = __chkstk_darwin(v246);
  v239 = (uint64_t)&v202 - ((v39 + 15) & 0xFFFFFFFFFFFFFFF0);
  v40 = __chkstk_darwin(v38);
  v238 = (uint64_t)&v202 - v41;
  __chkstk_darwin(v40);
  v43 = (char *)&v202 - v42;
  if (a1)
  {
    v236 = v27;
    v44 = qword_1000A4F08;
    v45 = a1;
    if (v44 != -1)
      swift_once(&qword_1000A4F08, sub_100053184);
    v46 = sub_100014698(v7, (uint64_t)qword_1000A7A80);
    v47 = v45;
    v226 = v46;
    v48 = Logger.logObject.getter(v47);
    v49 = static os_log_type_t.default.getter(v48);
    LODWORD(v243) = v49;
    v50 = os_log_type_enabled(v48, v49);
    v220 = v7;
    v219 = v14;
    v213 = v17;
    v212 = v20;
    v218 = v26;
    v207 = v36;
    if (v50)
    {
      v51 = swift_slowAlloc(22, -1);
      v235 = (_QWORD *)swift_slowAlloc(64, -1);
      v249 = v235;
      *(_DWORD *)v51 = 136315394;
      v248 = sub_100023980(0xD000000000000052, 0x800000010008B060, (uint64_t *)&v249);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v248, &v249, v51 + 4, v51 + 12);
      *(_WORD *)(v51 + 12) = 2080;
      v234 = v51 + 14;
      v52 = objc_msgSend(v47, "valueByCharacteristicUniqueIdentifier", v202);
      v53 = sub_100008C7C((unint64_t *)&qword_1000A5020, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v54 = v246;
      v55 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v52, v246, (char *)&type metadata for Any + 8, v53);

      v56 = Dictionary.description.getter(v55, v54, (char *)&type metadata for Any + 8, v53);
      v58 = v57;
      swift_bridgeObjectRelease(v55);
      v248 = sub_100023980(v56, v58, (uint64_t *)&v249);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v248, &v249, v234, v51 + 22);

      swift_bridgeObjectRelease(v58);
      _os_log_impl((void *)&_mh_execute_header, v48, (os_log_type_t)v243, "%s Current characteristic values: %s", (uint8_t *)v51, 0x16u);
      v59 = v235;
      swift_arrayDestroy(v235, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v59, -1, -1);
      swift_slowDealloc(v51, -1, -1);

    }
    else
    {

    }
    v67 = v47;
    v68 = Logger.logObject.getter(v67);
    v69 = static os_log_type_t.default.getter(v68);
    v70 = os_log_type_enabled(v68, v69);
    v243 = v67;
    if (v70)
    {
      v71 = swift_slowAlloc(22, -1);
      v235 = (_QWORD *)swift_slowAlloc(64, -1);
      v249 = v235;
      *(_DWORD *)v71 = 136315394;
      v248 = sub_100023980(0xD000000000000052, 0x800000010008B060, (uint64_t *)&v249);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v248, &v249, v71 + 4, v71 + 12);
      *(_WORD *)(v71 + 12) = 2080;
      v234 = v71 + 14;
      v72 = objc_msgSend(v67, "reachabilityByAccessoryUniqueIdentifier");
      v73 = sub_100008CBC(0, (unint64_t *)&qword_1000A5210, NSNumber_ptr);
      v74 = sub_100008C7C((unint64_t *)&qword_1000A5020, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v75 = v246;
      v76 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v72, v246, v73, v74);

      v77 = Dictionary.description.getter(v76, v75, v73, v74);
      v79 = v78;
      swift_bridgeObjectRelease(v76);
      v67 = v243;
      v248 = sub_100023980(v77, v79, (uint64_t *)&v249);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v248, &v249, v234, v71 + 22);

      swift_bridgeObjectRelease(v79);
      _os_log_impl((void *)&_mh_execute_header, v68, v69, "%s Current accessory reachability: %s", (uint8_t *)v71, 0x16u);
      v80 = v235;
      swift_arrayDestroy(v235, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v80, -1, -1);
      swift_slowDealloc(v71, -1, -1);

    }
    else
    {

    }
    v81 = (uint64_t)v218;
    v82 = v245;
    v83 = v237;
    if ((unint64_t)v237 >> 62)
    {
      if (v237 < 0)
        v200 = v237;
      else
        v200 = v237 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v237);
      v84 = _CocoaArrayWrapper.endIndex.getter(v200);
      swift_bridgeObjectRelease(v83);
    }
    else
    {
      v84 = *(_QWORD *)((v237 & 0xFFFFFFFFFFFFF8) + 0x10);
    }
    v85 = objc_msgSend(v67, "valueByCharacteristicUniqueIdentifier", v202);
    v225 = sub_100008C7C((unint64_t *)&qword_1000A5020, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v86 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v85, v246, (char *)&type metadata for Any + 8, v225);

    v87 = *(_QWORD *)(v86 + 16);
    swift_bridgeObjectRelease(v86);
    if (v84 != v87)
    {
      v88 = _swiftEmptyArrayStorage;
      if (v84)
      {
        v249 = _swiftEmptyArrayStorage;
        sub_10002D858(0, v84 & ~(v84 >> 63), 0);
        if (v84 < 0)
          __break(1u);
        v89 = 0;
        v88 = v249;
        v90 = v83 & 0xC000000000000001;
        do
        {
          if (v90)
            v91 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v89, v83);
          else
            v91 = *(id *)(v83 + 8 * v89 + 32);
          v92 = v91;
          v93 = objc_msgSend(v91, "uniqueIdentifier");
          static UUID._unconditionallyBridgeFromObjectiveC(_:)(v93);

          v249 = v88;
          v95 = v88[2];
          v94 = v88[3];
          if (v95 >= v94 >> 1)
          {
            sub_10002D858(v94 > 1, v95 + 1, 1);
            v88 = v249;
          }
          ++v89;
          v88[2] = v95 + 1;
          (*(void (**)(unint64_t, char *, uint64_t))(v221 + 32))((unint64_t)v88+ ((*(unsigned __int8 *)(v221 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v221 + 80))+ *(_QWORD *)(v221 + 72) * v95, v43, v246);
          v83 = v237;
        }
        while (v84 != v89);
        v67 = v243;
      }
      v96 = sub_1000150C4((uint64_t)v88);
      swift_bridgeObjectRelease(v88);
      v97 = objc_msgSend(v67, "valueByCharacteristicUniqueIdentifier");
      v98 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v97, v246, (char *)&type metadata for Any + 8, v225);

      v99 = sub_10000E1BC(v98);
      v100 = v99;
      if (*(_QWORD *)(v99 + 16) <= *(_QWORD *)(v96 + 16) >> 3)
      {
        v249 = (_QWORD *)v96;
        sub_100011250(v99);
        swift_bridgeObjectRelease(v100);
        v101 = v249;
      }
      else
      {
        v101 = sub_100011B18(v99, v96);
        swift_bridgeObjectRelease(v100);
      }
      v102 = v67;
      swift_bridgeObjectRetain_n(v83, 2);
      v103 = v102;
      v104 = ((uint64_t (*)(_QWORD *))swift_bridgeObjectRetain)(v101);
      v105 = Logger.logObject.getter(v104);
      v106 = static os_log_type_t.error.getter(v105);
      v107 = v106;
      if (os_log_type_enabled(v105, v106))
      {
        v108 = swift_slowAlloc(32, -1);
        LODWORD(v235) = v107;
        v109 = v108;
        v237 = swift_slowAlloc(32, -1);
        v249 = (_QWORD *)v237;
        *(_DWORD *)v109 = 134218498;
        swift_bridgeObjectRelease(v83);
        v248 = v84;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v248, &v249, v109 + 4, v109 + 12);
        swift_bridgeObjectRelease(v83);
        *(_WORD *)(v109 + 12) = 2048;
        v233 = (uint8_t *)(v109 + 14);
        v110 = objc_msgSend(v103, "valueByCharacteristicUniqueIdentifier");
        v234 = (uint64_t)&type metadata for Any + 8;
        v111 = v246;
        v112 = v225;
        v113 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v110, v246, (char *)&type metadata for Any + 8, v225);

        v114 = *(_QWORD *)(v113 + 16);
        swift_bridgeObjectRelease(v113);
        v248 = v114;
        v81 = (uint64_t)v218;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v248, &v249, v233, v109 + 22);

        *(_WORD *)(v109 + 22) = 2080;
        v115 = ((uint64_t (*)(_QWORD *))swift_bridgeObjectRetain)(v101);
        v116 = Set.description.getter(v115, v111, v112);
        v118 = v117;
        swift_bridgeObjectRelease(v101);
        v248 = sub_100023980(v116, v118, (uint64_t *)&v249);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v248, &v249, v109 + 24, v109 + 32);
        swift_bridgeObjectRelease_n(v101, 2);
        v67 = v243;
        swift_bridgeObjectRelease(v118);
        _os_log_impl((void *)&_mh_execute_header, v105, (os_log_type_t)v235, "Error: Asked for %ld characteristics but got %ld back instead, missing: %s", (uint8_t *)v109, 0x20u);
        v119 = v237;
        swift_arrayDestroy(v237, 1, v234);
        swift_slowDealloc(v119, -1, -1);
        swift_slowDealloc(v109, -1, -1);

      }
      else
      {

        swift_bridgeObjectRelease_n(v101, 2);
        swift_bridgeObjectRelease_n(v83, 2);

      }
      v82 = v245;
    }
    v120 = v203[2];
    if (v120)
    {
      v211 = (*(unsigned __int8 *)(v236 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v236 + 80);
      v121 = (uint64_t)v203 + v211;
      v210 = *(_QWORD *)(v236 + 72);
      v208 = &v249;
      v122 = swift_bridgeObjectRetain(v203);
      v123 = _swiftEmptyArrayStorage;
      v209 = (char *)&type metadata for Any + 8;
      v122.n128_u64[0] = 136315906;
      v206 = v122;
      v122.n128_u64[0] = 136315138;
      v204 = v122;
      v124 = (uint64_t)v244;
      do
      {
        v235 = v123;
        v236 = v121;
        v237 = v120;
        sub_100026C34(v121, v124, type metadata accessor for AccessoryAndSceneEntity);
        sub_100026C34(v124 + *(int *)(v82 + 24), v81, type metadata accessor for WidgetTileInfo);
        LODWORD(v234) = sub_10003936C(v81, v67, v124);
        if ((v234 & 1) == 0)
        {
          v125 = (uint64_t)v207;
          v126 = sub_100026C34(v124, (uint64_t)v207, type metadata accessor for AccessoryAndSceneEntity);
          v127 = Logger.logObject.getter(v126);
          v128 = static os_log_type_t.default.getter(v127);
          if (os_log_type_enabled(v127, v128))
          {
            v129 = (uint8_t *)swift_slowAlloc(12, -1);
            v130 = (_QWORD *)swift_slowAlloc(32, -1);
            v249 = v130;
            *(_DWORD *)v129 = v204.n128_u32[0];
            v233 = v129 + 4;
            v131 = v205;
            sub_100026C34(v125, v205, type metadata accessor for AccessoryAndSceneEntity);
            v132 = String.init<A>(describing:)(v131, v82);
            v134 = v133;
            v248 = sub_100023980(v132, v133, (uint64_t *)&v249);
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v248, v208, v233, v129 + 12);
            swift_bridgeObjectRelease(v134);
            sub_100026C78(v125, type metadata accessor for AccessoryAndSceneEntity);
            _os_log_impl((void *)&_mh_execute_header, v127, v128, "Unreachable item: %s", v129, 0xCu);
            swift_arrayDestroy(v130, 1, (char *)&type metadata for Any + 8);
            swift_slowDealloc(v130, -1, -1);
            swift_slowDealloc(v129, -1, -1);
          }
          else
          {
            sub_100026C78(v125, type metadata accessor for AccessoryAndSceneEntity);
          }

        }
        v135 = *(void (**)(uint64_t, char *, uint64_t))(v221 + 16);
        v229 = v135;
        v136 = v246;
        v135(v238, (char *)v81, v246);
        v137 = (int *)v222;
        v135(v239, (char *)(v81 + *(int *)(v222 + 20)), v136);
        v138 = v137[7];
        v139 = v81 + v137[6];
        v232 = *(os_log_t *)v139;
        v140 = v81;
        v228 = *(_QWORD *)(v139 + 8);
        v141 = v228;
        v142 = *(_QWORD *)(v140 + v138 + 8);
        v233 = *(uint8_t **)(v140 + v138);
        v143 = (uint64_t *)(v140 + v137[8]);
        v144 = *v143;
        v145 = v143[1];
        v146 = (uint64_t *)(v140 + v137[9]);
        v147 = v146[1];
        v230 = *v146;
        v231 = v144;
        v148 = *(void (**)(uint64_t, uint64_t, uint64_t))(v216 + 16);
        v149 = v217;
        v148(v242, v140 + v137[10], v217);
        v150 = (uint64_t)v215;
        v148((uint64_t)v215, v140 + v137[11], v149);
        v151 = *(_QWORD *)(v140 + v137[12]);
        v152 = v140 + v137[14];
        v153 = *(void **)v152;
        v227 = *(unsigned __int8 *)(v152 + 8);
        v154 = v153;
        swift_bridgeObjectRetain(v141);
        swift_bridgeObjectRetain(v142);
        swift_bridgeObjectRetain(v145);
        swift_bridgeObjectRetain(v147);
        swift_retain(v151);
        v155 = objc_msgSend(v243, "valueByCharacteristicUniqueIdentifier");
        v156 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v155, v136, v209, v225);

        v201 = v156;
        v157 = v241;
        sub_100016388(v238, v239, (uint64_t)v232, v228, (uint64_t)v233, v142, v231, v145, v241, v230, v147, v242, v150, v151, v234 & 1, (uint64_t)v153, v227, v201, 0,
          2,
          0,
          1,
          0,
          0,
          2);
        v158 = v247;
        v159 = v244;
        v160 = v229;
        v229(v247, v244, v136);
        v161 = v245;
        v160(v158 + *(int *)(v245 + 20), &v159[*(int *)(v245 + 20)], v136);
        sub_100026C34(v157, v158 + *(int *)(v161 + 24), type metadata accessor for WidgetTileInfo);
        v162 = v224;
        v163 = v223;
        v164 = v220;
        (*(void (**)(char *, uint64_t, uint64_t))(v224 + 16))(v223, v226, v220);
        v165 = v214;
        sub_100026C34(v157, v214, type metadata accessor for WidgetTileInfo);
        v166 = (uint64_t)v212;
        sub_100026C34(v157, (uint64_t)v212, type metadata accessor for WidgetTileInfo);
        v167 = (uint64_t)v213;
        sub_100026C34(v157, (uint64_t)v213, type metadata accessor for WidgetTileInfo);
        v168 = (uint64_t)v219;
        v169 = sub_100026C34(v157, (uint64_t)v219, type metadata accessor for WidgetTileInfo);
        v170 = Logger.logObject.getter(v169);
        v171 = static os_log_type_t.default.getter(v170);
        if (os_log_type_enabled(v170, (os_log_type_t)v171))
        {
          v232 = v170;
          LODWORD(v233) = v171;
          v172 = swift_slowAlloc(42, -1);
          v173 = (uint64_t *)swift_slowAlloc(8, -1);
          v174 = (_QWORD *)swift_slowAlloc(96, -1);
          v249 = v174;
          *(_DWORD *)v172 = v206.n128_u32[0];
          v175 = sub_10001A0F8();
          v177 = v176;
          v248 = sub_100023980(v175, v176, (uint64_t *)&v249);
          v178 = v208;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v248, v208, v172 + 4, v172 + 12);
          swift_bridgeObjectRelease(v177);
          sub_100026C78(v165, type metadata accessor for WidgetTileInfo);
          *(_WORD *)(v172 + 12) = 2112;
          sub_100017910();
          v180 = v179;
          v234 = (uint64_t)v174;
          if (v179)
            v248 = v179;
          else
            v248 = 0;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v248, v178, v172 + 14, v172 + 22);
          *v173 = v180;
          sub_100026C78(v166, type metadata accessor for WidgetTileInfo);
          *(_WORD *)(v172 + 22) = 2080;
          v181 = sub_10007985C();
          if (v182)
          {
            v183 = v182;
          }
          else
          {
            v181 = 7104878;
            v183 = 0xE300000000000000;
          }
          v248 = sub_100023980(v181, v183, (uint64_t *)&v249);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v248, v178, v172 + 24, v172 + 32);
          swift_bridgeObjectRelease(v183);
          sub_100026C78(v167, type metadata accessor for WidgetTileInfo);
          *(_WORD *)(v172 + 32) = 2080;
          v184 = (uint64_t)v219;
          v185 = v178;
          v186 = *(_QWORD *)&v219[*(int *)(v222 + 60)];
          swift_bridgeObjectRetain(v186);
          v187 = Dictionary.description.getter(v186, v246, (char *)&type metadata for Any + 8, v225);
          v189 = v188;
          swift_bridgeObjectRelease(v186);
          v248 = sub_100023980(v187, v189, (uint64_t *)&v249);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v248, v185, v172 + 34, v172 + 42);
          swift_bridgeObjectRelease(v189);
          sub_100026C78(v184, type metadata accessor for WidgetTileInfo);
          v190 = v232;
          _os_log_impl((void *)&_mh_execute_header, v232, (os_log_type_t)v233, "Created entity with widgetInfo: %s - service: %@ statusString: %s and characteristic data: %s", (uint8_t *)v172, 0x2Au);
          v191 = sub_10000527C(&qword_1000A5208);
          swift_arrayDestroy(v173, 1, v191);
          swift_slowDealloc(v173, -1, -1);
          v192 = v234;
          swift_arrayDestroy(v234, 3, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v192, -1, -1);
          swift_slowDealloc(v172, -1, -1);

          (*(void (**)(char *, uint64_t))(v224 + 8))(v223, v220);
        }
        else
        {
          sub_100026C78(v165, type metadata accessor for WidgetTileInfo);
          sub_100026C78(v166, type metadata accessor for WidgetTileInfo);
          sub_100026C78(v167, type metadata accessor for WidgetTileInfo);
          sub_100026C78(v168, type metadata accessor for WidgetTileInfo);

          (*(void (**)(char *, uint64_t))(v162 + 8))(v163, v164);
        }
        sub_100026C34(v247, v240, type metadata accessor for AccessoryAndSceneEntity);
        v123 = v235;
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v235);
        v81 = (uint64_t)v218;
        v124 = (uint64_t)v244;
        v82 = v245;
        v67 = v243;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
          v123 = (_QWORD *)sub_10005AC44(0, v123[2] + 1, 1, (unint64_t)v123);
        v195 = v123[2];
        v194 = v123[3];
        if (v195 >= v194 >> 1)
          v123 = (_QWORD *)sub_10005AC44(v194 > 1, v195 + 1, 1, (unint64_t)v123);
        v123[2] = v195 + 1;
        v196 = v210;
        sub_100026D98(v240, (uint64_t)v123 + v211 + v195 * v210, type metadata accessor for AccessoryAndSceneEntity);
        sub_100026C78(v247, type metadata accessor for AccessoryAndSceneEntity);
        sub_100026C78(v241, type metadata accessor for WidgetTileInfo);
        sub_100026C78(v81, type metadata accessor for WidgetTileInfo);
        sub_100026C78(v124, type metadata accessor for AccessoryAndSceneEntity);
        v121 = v236 + v196;
        v120 = v237 - 1;
      }
      while (v237 != 1);
      swift_bridgeObjectRelease(v203);
    }
    else
    {
      v123 = _swiftEmptyArrayStorage;
    }
    v249 = v123;
    v197 = sub_10000527C(&qword_1000A64F8);
    CheckedContinuation.resume(returning:)(&v249, v197);

  }
  else
  {
    if (qword_1000A4F08 != -1)
      swift_once(&qword_1000A4F08, sub_100053184);
    sub_100014698(v7, (uint64_t)qword_1000A7A80);
    swift_errorRetain(a2);
    v60 = swift_errorRetain(a2);
    v61 = Logger.logObject.getter(v60);
    v62 = static os_log_type_t.error.getter(v61);
    if (os_log_type_enabled(v61, v62))
    {
      v63 = swift_slowAlloc(22, -1);
      v64 = (uint64_t *)swift_slowAlloc(8, -1);
      v65 = (_QWORD *)swift_slowAlloc(32, -1);
      v249 = v65;
      *(_DWORD *)v63 = 136315394;
      v248 = sub_100023980(0xD000000000000052, 0x800000010008B060, (uint64_t *)&v249);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v248, &v249, v63 + 4, v63 + 12);
      *(_WORD *)(v63 + 12) = 2112;
      if (a2)
      {
        swift_errorRetain(a2);
        v66 = _swift_stdlib_bridgeErrorToNSError(a2);
        v248 = v66;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v248, &v249, v63 + 14, v63 + 22);
      }
      else
      {
        v248 = 0;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v248, &v249, v63 + 14, v63 + 22);
        v66 = 0;
      }
      *v64 = v66;
      swift_errorRelease(a2);
      swift_errorRelease(a2);
      _os_log_impl((void *)&_mh_execute_header, v61, v62, "%s Failed to get current characteristic values with error: %@", (uint8_t *)v63, 0x16u);
      v198 = sub_10000527C(&qword_1000A5208);
      swift_arrayDestroy(v64, 1, v198);
      swift_slowDealloc(v64, -1, -1);
      swift_arrayDestroy(v65, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v65, -1, -1);
      swift_slowDealloc(v63, -1, -1);
    }
    else
    {
      swift_errorRelease(a2);
      swift_errorRelease(a2);
    }

    v249 = v203;
    swift_bridgeObjectRetain(v203);
    v199 = sub_10000527C(&qword_1000A64F8);
    CheckedContinuation.resume(returning:)(&v249, v199);
  }
}

uint64_t sub_10003936C(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  void *v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  NSObject *v21;
  os_log_type_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31[2];

  v6 = type metadata accessor for AccessoryAndSceneEntity(0);
  v7 = __chkstk_darwin(v6);
  v9 = (char *)&v29 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v11 = (char *)&v29 - v10;
  v12 = sub_100019B5C();
  v13 = a2;
  sub_100045EFC((uint64_t)v12, v13);
  v15 = v14;
  swift_bridgeObjectRelease(v12);

  if ((unint64_t)v15 >> 62)
    goto LABEL_16;
  v16 = *(_QWORD *)((v15 & 0xFFFFFFFFFFFFF8) + 0x10);
  while (v16)
  {
    v9 = (char *)(v15 & 0xC000000000000001);
    swift_bridgeObjectRetain(v15);
    a1 = 0;
    a3 = 4;
    while (1)
    {
      v17 = v9
          ? (char *)specialized _ArrayBuffer._getElementSlowPath(_:)(a3 - 4, v15)
          : (char *)*(id *)(v15 + 8 * a3);
      v11 = v17;
      v6 = a3 - 3;
      if (__OFADD__(a3 - 4, 1))
        break;
      if ((a1 & 1) != 0)
      {

        if (v6 == v16)
        {
          swift_bridgeObjectRelease_n(v15, 2);
          return 1;
        }
        a1 = 1;
        ++a3;
      }
      else
      {
        a1 = (uint64_t)objc_msgSend(v17, "BOOLValue");

        if (v6 == v16)
        {
          swift_bridgeObjectRelease_n(v15, 2);
          return a1;
        }
        ++a3;
      }
    }
    __break(1u);
LABEL_16:
    if (v15 < 0)
      v18 = v15;
    else
      v18 = v15 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v15);
    v16 = _CocoaArrayWrapper.endIndex.getter(v18);
    swift_bridgeObjectRelease(v15);
  }
  swift_bridgeObjectRelease(v15);
  if (qword_1000A4F08 != -1)
    swift_once(&qword_1000A4F08, sub_100053184);
  v19 = type metadata accessor for Logger(0);
  sub_100014698(v19, (uint64_t)qword_1000A7A80);
  v20 = sub_100026C34(a3, (uint64_t)v11, type metadata accessor for AccessoryAndSceneEntity);
  v21 = Logger.logObject.getter(v20);
  v22 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v21, v22))
  {
    v23 = swift_slowAlloc(22, -1);
    v24 = swift_slowAlloc(64, -1);
    v31[0] = v24;
    *(_DWORD *)v23 = 136315394;
    v30 = sub_100023980(0xD000000000000052, 0x800000010008B060, v31);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v30, v31, v23 + 4, v23 + 12);
    *(_WORD *)(v23 + 12) = 2080;
    sub_100026C34((uint64_t)v11, (uint64_t)v9, type metadata accessor for AccessoryAndSceneEntity);
    v25 = String.init<A>(describing:)(v9, v6);
    v27 = v26;
    v30 = sub_100023980(v25, v26, v31);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v30, v31, v23 + 14, v23 + 22);
    swift_bridgeObjectRelease(v27);
    sub_100026C78((uint64_t)v11, type metadata accessor for AccessoryAndSceneEntity);
    _os_log_impl((void *)&_mh_execute_header, v21, v22, "%s Missing accessory reachability from homed for %s", (uint8_t *)v23, 0x16u);
    swift_arrayDestroy(v24, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v24, -1, -1);
    swift_slowDealloc(v23, -1, -1);
  }
  else
  {
    sub_100026C78((uint64_t)v11, type metadata accessor for AccessoryAndSceneEntity);
  }

  return *(unsigned __int8 *)(a1 + *(int *)(type metadata accessor for WidgetTileInfo(0) + 52));
}

void sub_10003970C(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  NSString v13;
  NSString v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  id v23;
  Class v24;
  uint64_t v25;
  Class isa;
  id v27;
  uint64_t v28;
  _QWORD aBlock[5];
  uint64_t v30;

  v28 = a6;
  v9 = sub_10000527C(&qword_1000A64F8);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(_QWORD *)(v10 + 64);
  __chkstk_darwin(v9);
  v12 = (char *)&v25 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = objc_msgSend(a2, "widgetManager");
  sub_100008CBC(0, &qword_1000A5080, HMActionSet_ptr);
  isa = Array._bridgeToObjectiveC()().super.isa;
  v13 = String._bridgeToObjectiveC()();
  v14 = String._bridgeToObjectiveC()();
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v12, a1, v9);
  v15 = *(unsigned __int8 *)(v10 + 80);
  v16 = (v15 + 16) & ~v15;
  v17 = (v11 + v16 + 7) & 0xFFFFFFFFFFFFFFF8;
  v18 = (v17 + 15) & 0xFFFFFFFFFFFFFFF8;
  v19 = swift_allocObject(&unk_10009F8A0, v18 + 8, v15 | 7);
  (*(void (**)(uint64_t, char *, uint64_t))(v10 + 32))(v19 + v16, v12, v9);
  v20 = v28;
  *(_QWORD *)(v19 + v17) = v28;
  *(_QWORD *)(v19 + v18) = a3;
  aBlock[4] = sub_100052F10;
  v30 = v19;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10001916C;
  aBlock[3] = &unk_10009F8B8;
  v21 = _Block_copy(aBlock);
  v22 = v30;
  swift_bridgeObjectRetain(v20);
  swift_bridgeObjectRetain(a3);
  swift_release(v22);
  v24 = isa;
  v23 = v27;
  objc_msgSend(v27, "monitorAndFetchStateForActionSets:widgetIdentifier:kind:completion:", isa, v13, v14, v21);
  _Block_release(v21);

}

void sub_10003991C(void *a1, uint64_t a2, uint64_t a3, _QWORD *a4, uint64_t a5)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  id v40;
  uint64_t v41;
  id v42;
  NSObject *v43;
  os_log_type_t v44;
  _BOOL4 v45;
  uint64_t v46;
  id v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  unint64_t v54;
  _QWORD *v55;
  uint64_t v56;
  NSObject *v57;
  os_log_type_t v58;
  uint64_t v59;
  uint64_t *v60;
  _QWORD *v61;
  uint64_t v62;
  _QWORD **v63;
  NSObject *v64;
  os_log_type_t v65;
  _BOOL4 v66;
  uint64_t v67;
  id v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  unint64_t v76;
  _QWORD *v77;
  uint64_t v78;
  uint64_t v79;
  id v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  _QWORD *v84;
  uint64_t v85;
  unint64_t v86;
  id v87;
  void *v88;
  id v89;
  unint64_t v90;
  unint64_t v91;
  uint64_t v92;
  id v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  _QWORD *v97;
  _QWORD **v98;
  _QWORD **v99;
  uint64_t v100;
  NSObject *v101;
  os_log_type_t v102;
  int v103;
  uint64_t v104;
  uint64_t v105;
  id v106;
  uint64_t v107;
  _QWORD *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  unint64_t v114;
  unint64_t v115;
  uint64_t v116;
  uint64_t v117;
  id v118;
  uint64_t v119;
  __n128 v120;
  _QWORD *v121;
  uint64_t v122;
  uint64_t v123;
  __objc2_prot_list *v124;
  id v125;
  uint64_t v126;
  uint64_t v127;
  unint64_t v128;
  char v129;
  Class isa;
  void (*v131)(uint64_t, uint64_t, uint64_t);
  uint64_t v132;
  int *v133;
  uint64_t v134;
  uint64_t *v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t *v139;
  uint64_t v140;
  uint64_t v141;
  void (*v142)(uint64_t, uint64_t, uint64_t);
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  void *v146;
  id v147;
  id v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  char *v153;
  uint64_t v154;
  uint64_t v155;
  char *v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  NSObject *v163;
  int v164;
  uint64_t v165;
  uint64_t v166;
  unint64_t v167;
  unint64_t v168;
  _QWORD **v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  unint64_t v174;
  unint64_t v175;
  uint64_t v176;
  uint64_t v177;
  char *v178;
  uint64_t v179;
  uint64_t v180;
  unint64_t v181;
  unint64_t v182;
  os_log_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v188;
  unint64_t v189;
  unint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  _QWORD v196[2];
  _QWORD *v197;
  char *v198;
  __n128 v199;
  _QWORD **v200;
  uint64_t v201;
  unint64_t v202;
  char *v203;
  char *v204;
  char *v205;
  uint64_t v206;
  uint64_t v207;
  char *v208;
  uint64_t v209;
  char *v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  char *v214;
  uint64_t v215;
  int v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  _QWORD *v220;
  os_log_t v221;
  uint64_t v222;
  _QWORD *v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  _QWORD **v234;
  char *v235;
  _QWORD *v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  _QWORD *v240;

  v225 = a5;
  v197 = a4;
  v196[1] = a3;
  v7 = type metadata accessor for Logger(0);
  v215 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v214 = (char *)v196 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v207 = type metadata accessor for StaticRenderingMode(0);
  v206 = *(_QWORD *)(v207 - 8);
  v9 = __chkstk_darwin(v207);
  v233 = (uint64_t)v196 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v232 = (uint64_t)v196 - v11;
  v213 = type metadata accessor for WidgetTileInfo(0);
  v12 = __chkstk_darwin(v213);
  v14 = (char *)v196 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = __chkstk_darwin(v12);
  v17 = (char *)v196 - v16;
  v18 = __chkstk_darwin(v15);
  v20 = (char *)v196 - v19;
  v21 = __chkstk_darwin(v18);
  v23 = (char *)v196 - v22;
  v24 = __chkstk_darwin(v21);
  v231 = (uint64_t)v196 - v25;
  __chkstk_darwin(v24);
  v208 = (char *)v196 - v26;
  v230 = type metadata accessor for AccessoryAndSceneEntity(0);
  v27 = *(_QWORD *)(v230 - 8);
  v28 = __chkstk_darwin(v230);
  v229 = (uint64_t)v196 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  v30 = __chkstk_darwin(v28);
  v237 = (uint64_t)v196 - v31;
  __chkstk_darwin(v30);
  v235 = (char *)v196 - v32;
  v238 = type metadata accessor for UUID(0);
  v212 = *(_QWORD *)(v238 - 8);
  v33 = __chkstk_darwin(v238);
  v228 = (uint64_t)v196 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  v35 = __chkstk_darwin(v33);
  v227 = (uint64_t)v196 - v36;
  __chkstk_darwin(v35);
  v38 = (char *)v196 - v37;
  if (a1)
  {
    v224 = v27;
    v39 = qword_1000A4F08;
    v40 = a1;
    if (v39 != -1)
      swift_once(&qword_1000A4F08, sub_100053184);
    v41 = sub_100014698(v7, (uint64_t)qword_1000A7A80);
    v42 = v40;
    v209 = v41;
    v43 = Logger.logObject.getter(v42);
    v44 = static os_log_type_t.default.getter(v43);
    v45 = os_log_type_enabled(v43, v44);
    v211 = v7;
    v210 = v14;
    v205 = v17;
    v204 = v20;
    v203 = v23;
    if (v45)
    {
      v46 = swift_slowAlloc(22, -1);
      v236 = (_QWORD *)swift_slowAlloc(64, -1);
      v240 = v236;
      *(_DWORD *)v46 = 136315394;
      v239 = sub_100023980(0xD00000000000004DLL, 0x800000010008AFD0, (uint64_t *)&v240);
      v234 = &v240;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v239, &v240, v46 + 4, v46 + 12);
      *(_WORD *)(v46 + 12) = 2080;
      v226 = v46 + 14;
      v47 = objc_msgSend(v42, "isOnByActionSetUniqueIdentifier");
      v48 = sub_100008CBC(0, (unint64_t *)&qword_1000A5210, NSNumber_ptr);
      v49 = sub_100008C7C((unint64_t *)&qword_1000A5020, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v50 = v238;
      v51 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v47, v238, v48, v49);

      v52 = Dictionary.description.getter(v51, v50, v48, v49);
      v54 = v53;
      swift_bridgeObjectRelease(v51);
      v239 = sub_100023980(v52, v54, (uint64_t *)&v240);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v239, v234, v226, v46 + 22);

      swift_bridgeObjectRelease(v54);
      _os_log_impl((void *)&_mh_execute_header, v43, v44, "%s Current action set stated: %s", (uint8_t *)v46, 0x16u);
      v55 = v236;
      swift_arrayDestroy(v236, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v55, -1, -1);
      swift_slowDealloc(v46, -1, -1);

    }
    else
    {

    }
    v63 = (_QWORD **)v42;
    v64 = Logger.logObject.getter(v63);
    v65 = static os_log_type_t.default.getter(v64);
    v66 = os_log_type_enabled(v64, v65);
    v234 = v63;
    if (v66)
    {
      v67 = swift_slowAlloc(22, -1);
      v236 = (_QWORD *)swift_slowAlloc(64, -1);
      v240 = v236;
      *(_DWORD *)v67 = 136315394;
      v239 = sub_100023980(0xD00000000000004DLL, 0x800000010008AFD0, (uint64_t *)&v240);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v239, &v240, v67 + 4, v67 + 12);
      *(_WORD *)(v67 + 12) = 2080;
      v226 = v67 + 14;
      v68 = objc_msgSend(v63, "didExecutionFailByActionSetUniqueIdentifier");
      v69 = sub_100008CBC(0, (unint64_t *)&qword_1000A5210, NSNumber_ptr);
      v70 = sub_100008C7C((unint64_t *)&qword_1000A5020, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v71 = v238;
      v72 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v68, v238, v69, v70);

      v73 = v70;
      v63 = v234;
      v74 = Dictionary.description.getter(v72, v71, v69, v73);
      v76 = v75;
      swift_bridgeObjectRelease(v72);
      v239 = sub_100023980(v74, v76, (uint64_t *)&v240);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v239, &v240, v226, v67 + 22);

      swift_bridgeObjectRelease(v76);
      _os_log_impl((void *)&_mh_execute_header, v64, v65, "%s Failed action sets: %s", (uint8_t *)v67, 0x16u);
      v77 = v236;
      swift_arrayDestroy(v236, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v77, -1, -1);
      swift_slowDealloc(v67, -1, -1);

    }
    else
    {

    }
    v78 = v225;
    if ((unint64_t)v225 >> 62)
    {
      if (v225 < 0)
        v195 = v225;
      else
        v195 = v225 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v225);
      v79 = _CocoaArrayWrapper.endIndex.getter(v195);
      swift_bridgeObjectRelease(v78);
    }
    else
    {
      v79 = *(_QWORD *)((v225 & 0xFFFFFFFFFFFFF8) + 0x10);
    }
    v80 = objc_msgSend(v63, "isOnByActionSetUniqueIdentifier");
    v81 = sub_100008CBC(0, (unint64_t *)&qword_1000A5210, NSNumber_ptr);
    v236 = (_QWORD *)sub_100008C7C((unint64_t *)&qword_1000A5020, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v82 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v80, v238, v81, v236);

    v83 = *(_QWORD *)(v82 + 16);
    swift_bridgeObjectRelease(v82);
    v226 = v81;
    if (v79 != v83)
    {
      v84 = _swiftEmptyArrayStorage;
      if (v79)
      {
        v240 = _swiftEmptyArrayStorage;
        sub_10002D858(0, v79 & ~(v79 >> 63), 0);
        if (v79 < 0)
          __break(1u);
        v85 = 0;
        v84 = v240;
        v86 = v78 & 0xC000000000000001;
        do
        {
          if (v86)
            v87 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v85, v78);
          else
            v87 = *(id *)(v78 + 8 * v85 + 32);
          v88 = v87;
          v89 = objc_msgSend(v87, "uniqueIdentifier");
          static UUID._unconditionallyBridgeFromObjectiveC(_:)(v89);

          v240 = v84;
          v91 = v84[2];
          v90 = v84[3];
          if (v91 >= v90 >> 1)
          {
            sub_10002D858(v90 > 1, v91 + 1, 1);
            v84 = v240;
          }
          ++v85;
          v84[2] = v91 + 1;
          (*(void (**)(unint64_t, char *, uint64_t))(v212 + 32))((unint64_t)v84+ ((*(unsigned __int8 *)(v212 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v212 + 80))+ *(_QWORD *)(v212 + 72) * v91, v38, v238);
          v78 = v225;
        }
        while (v79 != v85);
        v81 = v226;
      }
      v92 = sub_1000150C4((uint64_t)v84);
      swift_bridgeObjectRelease(v84);
      v93 = objc_msgSend(v63, "isOnByActionSetUniqueIdentifier");
      v94 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v93, v238, v81, v236);

      v95 = sub_10000E1BC(v94);
      v96 = v95;
      if (*(_QWORD *)(v95 + 16) <= *(_QWORD *)(v92 + 16) >> 3)
      {
        v240 = (_QWORD *)v92;
        sub_100011250(v95);
        swift_bridgeObjectRelease(v96);
        v97 = v240;
      }
      else
      {
        v97 = sub_100011B18(v95, v92);
        swift_bridgeObjectRelease(v96);
      }
      v98 = v63;
      swift_bridgeObjectRetain_n(v78, 2);
      v99 = v98;
      swift_bridgeObjectRetain(v97);
      v101 = Logger.logObject.getter(v100);
      v102 = static os_log_type_t.error.getter(v101);
      v103 = v102;
      if (os_log_type_enabled(v101, v102))
      {
        v104 = swift_slowAlloc(32, -1);
        LODWORD(v223) = v103;
        v105 = v104;
        v225 = swift_slowAlloc(32, -1);
        v240 = (_QWORD *)v225;
        *(_DWORD *)v105 = 134218498;
        swift_bridgeObjectRelease(v78);
        v239 = v79;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v239, &v240, v105 + 4, v105 + 12);
        swift_bridgeObjectRelease(v78);
        *(_WORD *)(v105 + 12) = 2048;
        v106 = objc_msgSend(v99, "isOnByActionSetUniqueIdentifier");
        v107 = v238;
        v108 = v236;
        v109 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v106, v238, v226, v236);

        v110 = *(_QWORD *)(v109 + 16);
        v111 = v109;
        v63 = v234;
        swift_bridgeObjectRelease(v111);
        v239 = v110;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v239, &v240, v105 + 14, v105 + 22);

        *(_WORD *)(v105 + 22) = 2080;
        swift_bridgeObjectRetain(v97);
        v113 = Set.description.getter(v112, v107, v108);
        v115 = v114;
        swift_bridgeObjectRelease(v97);
        v239 = sub_100023980(v113, v115, (uint64_t *)&v240);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v239, &v240, v105 + 24, v105 + 32);
        swift_bridgeObjectRelease_n(v97, 2);
        swift_bridgeObjectRelease(v115);
        _os_log_impl((void *)&_mh_execute_header, v101, (os_log_type_t)v223, "Error: Asked for %ld action sets but got %ld back instead, missing: %s", (uint8_t *)v105, 0x20u);
        v116 = v225;
        swift_arrayDestroy(v225, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v116, -1, -1);
        swift_slowDealloc(v105, -1, -1);

      }
      else
      {

        swift_bridgeObjectRelease_n(v97, 2);
        swift_bridgeObjectRelease_n(v78, 2);

      }
    }
    v117 = v197[2];
    if (v117)
    {
      v118 = v63;
      v202 = (*(unsigned __int8 *)(v224 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v224 + 80);
      v119 = (uint64_t)v197 + v202;
      v201 = *(_QWORD *)(v224 + 72);
      v200 = &v240;
      v120 = swift_bridgeObjectRetain(v197);
      v121 = _swiftEmptyArrayStorage;
      v120.n128_u64[0] = 136315906;
      v199 = v120;
      v198 = (char *)&type metadata for Any + 8;
      v122 = (uint64_t)v208;
      v123 = (uint64_t)v235;
      v124 = &HomeManagerActor;
      do
      {
        sub_100026C34(v119, v123, type metadata accessor for AccessoryAndSceneEntity);
        sub_100026C34(v123 + *(int *)(v230 + 24), v122, type metadata accessor for WidgetTileInfo);
        v125 = objc_msgSend(v118, (SEL)v124[397].count);
        v126 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v125, v238, v226, v236);

        v127 = *(_QWORD *)(v126 + 16);
        v224 = v119;
        v225 = v117;
        v223 = v121;
        if (v127 && (v128 = sub_10001A558(v122), (v129 & 1) != 0))
        {
          isa = (Class)*(id *)(*(_QWORD *)(v126 + 56) + 8 * v128);
          swift_bridgeObjectRelease(v126);
        }
        else
        {
          swift_bridgeObjectRelease(v126);
          isa = NSNumber.init(integerLiteral:)(0).super.super.isa;
        }
        LODWORD(v222) = Bool.init(truncating:)(isa);

        v131 = *(void (**)(uint64_t, uint64_t, uint64_t))(v212 + 16);
        v132 = v238;
        v131(v227, v122, v238);
        v133 = (int *)v213;
        v131(v228, v122 + *(int *)(v213 + 20), v132);
        v134 = v133[7];
        v135 = (uint64_t *)(v122 + v133[6]);
        v136 = v135[1];
        v220 = (_QWORD *)*v135;
        v137 = *(_QWORD *)(v122 + v134 + 8);
        v221 = *(os_log_t *)(v122 + v134);
        v217 = v137;
        v138 = v133[9];
        v139 = (uint64_t *)(v122 + v133[8]);
        v140 = v139[1];
        v219 = *v139;
        v141 = *(_QWORD *)(v122 + v138 + 8);
        v218 = *(_QWORD *)(v122 + v138);
        v142 = *(void (**)(uint64_t, uint64_t, uint64_t))(v206 + 16);
        v143 = v207;
        v142(v232, v122 + v133[10], v207);
        v142(v233, v122 + v133[11], v143);
        v144 = *(_QWORD *)(v122 + v133[12]);
        v145 = v122 + v133[14];
        v146 = *(void **)v145;
        v216 = *(unsigned __int8 *)(v145 + 8);
        v147 = v146;
        swift_bridgeObjectRetain(v136);
        swift_bridgeObjectRetain(v137);
        swift_bridgeObjectRetain(v140);
        swift_bridgeObjectRetain(v141);
        swift_retain(v144);
        v148 = objc_msgSend(v234, "isOnByActionSetUniqueIdentifier");
        v149 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v148, v132, v226, v236);

        v150 = sub_100018BA0(v149);
        swift_bridgeObjectRelease(v149);
        v151 = v231;
        sub_100016388(v227, v228, (uint64_t)v220, v136, (uint64_t)v221, v217, v219, v140, v231, v218, v141, v232, v233, v144, 1, (uint64_t)v146, v216, v150, v222 & 1,
          2,
          0,
          1,
          0,
          0,
          2);
        v152 = v237;
        v153 = v235;
        v131(v237, (uint64_t)v235, v132);
        v154 = v230;
        v131(v152 + *(int *)(v230 + 20), (uint64_t)&v153[*(int *)(v230 + 20)], v132);
        sub_100026C34(v151, v152 + *(int *)(v154 + 24), type metadata accessor for WidgetTileInfo);
        v155 = v215;
        v156 = v214;
        v157 = v211;
        (*(void (**)(char *, uint64_t, uint64_t))(v215 + 16))(v214, v209, v211);
        v158 = (uint64_t)v203;
        sub_100026C34(v151, (uint64_t)v203, type metadata accessor for WidgetTileInfo);
        v159 = (uint64_t)v204;
        sub_100026C34(v151, (uint64_t)v204, type metadata accessor for WidgetTileInfo);
        v160 = (uint64_t)v205;
        sub_100026C34(v151, (uint64_t)v205, type metadata accessor for WidgetTileInfo);
        v161 = (uint64_t)v210;
        v162 = sub_100026C34(v151, (uint64_t)v210, type metadata accessor for WidgetTileInfo);
        v163 = Logger.logObject.getter(v162);
        v164 = static os_log_type_t.default.getter(v163);
        if (os_log_type_enabled(v163, (os_log_type_t)v164))
        {
          LODWORD(v219) = v164;
          v165 = swift_slowAlloc(42, -1);
          v222 = swift_slowAlloc(8, -1);
          v220 = (_QWORD *)swift_slowAlloc(96, -1);
          v240 = v220;
          *(_DWORD *)v165 = v199.n128_u32[0];
          v166 = sub_10001A0F8();
          v168 = v167;
          v239 = sub_100023980(v166, v167, (uint64_t *)&v240);
          v169 = v200;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v239, v200, v165 + 4, v165 + 12);
          swift_bridgeObjectRelease(v168);
          sub_100026C78(v158, type metadata accessor for WidgetTileInfo);
          *(_WORD *)(v165 + 12) = 2112;
          sub_100017910();
          v171 = v170;
          v221 = v163;
          if (v170)
            v239 = v170;
          else
            v239 = 0;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v239, v169, v165 + 14, v165 + 22);
          v172 = v225;
          *(_QWORD *)v222 = v171;
          sub_100026C78(v159, type metadata accessor for WidgetTileInfo);
          *(_WORD *)(v165 + 22) = 2080;
          v173 = sub_10007985C();
          if (v174)
          {
            v175 = v174;
          }
          else
          {
            v173 = 7104878;
            v175 = 0xE300000000000000;
          }
          v239 = sub_100023980(v173, v175, (uint64_t *)&v240);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v239, v169, v165 + 24, v165 + 32);
          swift_bridgeObjectRelease(v175);
          sub_100026C78(v160, type metadata accessor for WidgetTileInfo);
          *(_WORD *)(v165 + 32) = 2080;
          v176 = (uint64_t)v210;
          v177 = *(_QWORD *)&v210[*(int *)(v213 + 60)];
          swift_bridgeObjectRetain(v177);
          v178 = v198;
          v180 = Dictionary.description.getter(v179, v238, v198, v236);
          v182 = v181;
          swift_bridgeObjectRelease(v177);
          v239 = sub_100023980(v180, v182, (uint64_t *)&v240);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v239, v169, v165 + 34, v165 + 42);
          swift_bridgeObjectRelease(v182);
          sub_100026C78(v176, type metadata accessor for WidgetTileInfo);
          v183 = v221;
          _os_log_impl((void *)&_mh_execute_header, v221, (os_log_type_t)v219, "Created entity with widgetInfo: %s - service: %@ statusString: %s and characteristic data: %s", (uint8_t *)v165, 0x2Au);
          v184 = sub_10000527C(&qword_1000A5208);
          v185 = v222;
          swift_arrayDestroy(v222, 1, v184);
          swift_slowDealloc(v185, -1, -1);
          v186 = (uint64_t)v220;
          swift_arrayDestroy(v220, 3, v178);
          swift_slowDealloc(v186, -1, -1);
          swift_slowDealloc(v165, -1, -1);

          (*(void (**)(char *, uint64_t))(v215 + 8))(v214, v211);
        }
        else
        {
          sub_100026C78(v158, type metadata accessor for WidgetTileInfo);
          sub_100026C78(v159, type metadata accessor for WidgetTileInfo);
          sub_100026C78(v160, type metadata accessor for WidgetTileInfo);
          sub_100026C78(v161, type metadata accessor for WidgetTileInfo);

          (*(void (**)(char *, uint64_t))(v155 + 8))(v156, v157);
          v172 = v225;
        }
        sub_100026C34(v237, v229, type metadata accessor for AccessoryAndSceneEntity);
        v121 = v223;
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v223);
        v122 = (uint64_t)v208;
        v118 = v234;
        v123 = (uint64_t)v235;
        v124 = &HomeManagerActor;
        v188 = v224;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
          v121 = (_QWORD *)sub_10005AC44(0, v121[2] + 1, 1, (unint64_t)v121);
        v190 = v121[2];
        v189 = v121[3];
        if (v190 >= v189 >> 1)
          v121 = (_QWORD *)sub_10005AC44(v189 > 1, v190 + 1, 1, (unint64_t)v121);
        v121[2] = v190 + 1;
        v191 = v201;
        sub_100026D98(v229, (uint64_t)v121 + v202 + v190 * v201, type metadata accessor for AccessoryAndSceneEntity);
        sub_100026C78(v237, type metadata accessor for AccessoryAndSceneEntity);
        sub_100026C78(v231, type metadata accessor for WidgetTileInfo);
        sub_100026C78(v122, type metadata accessor for WidgetTileInfo);
        sub_100026C78(v123, type metadata accessor for AccessoryAndSceneEntity);
        v119 = v188 + v191;
        v117 = v172 - 1;
      }
      while (v117);
      swift_bridgeObjectRelease(v197);
      v63 = (_QWORD **)v118;
    }
    else
    {
      v121 = _swiftEmptyArrayStorage;
    }
    v240 = v121;
    v192 = sub_10000527C(&qword_1000A64F8);
    CheckedContinuation.resume(returning:)(&v240, v192);

  }
  else
  {
    if (qword_1000A4F08 != -1)
      swift_once(&qword_1000A4F08, sub_100053184);
    sub_100014698(v7, (uint64_t)qword_1000A7A80);
    swift_errorRetain(a2);
    v56 = swift_errorRetain(a2);
    v57 = Logger.logObject.getter(v56);
    v58 = static os_log_type_t.error.getter(v57);
    if (os_log_type_enabled(v57, v58))
    {
      v59 = swift_slowAlloc(22, -1);
      v60 = (uint64_t *)swift_slowAlloc(8, -1);
      v61 = (_QWORD *)swift_slowAlloc(32, -1);
      v240 = v61;
      *(_DWORD *)v59 = 136315394;
      v239 = sub_100023980(0xD00000000000004DLL, 0x800000010008AFD0, (uint64_t *)&v240);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v239, &v240, v59 + 4, v59 + 12);
      *(_WORD *)(v59 + 12) = 2112;
      if (a2)
      {
        swift_errorRetain(a2);
        v62 = _swift_stdlib_bridgeErrorToNSError(a2);
        v239 = v62;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v239, &v240, v59 + 14, v59 + 22);
      }
      else
      {
        v239 = 0;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v239, &v240, v59 + 14, v59 + 22);
        v62 = 0;
      }
      *v60 = v62;
      swift_errorRelease(a2);
      swift_errorRelease(a2);
      _os_log_impl((void *)&_mh_execute_header, v57, v58, "%s Failed to get current action set states with error: %@", (uint8_t *)v59, 0x16u);
      v193 = sub_10000527C(&qword_1000A5208);
      swift_arrayDestroy(v60, 1, v193);
      swift_slowDealloc(v60, -1, -1);
      swift_arrayDestroy(v61, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v61, -1, -1);
      swift_slowDealloc(v59, -1, -1);
    }
    else
    {
      swift_errorRelease(a2);
      swift_errorRelease(a2);
    }

    v240 = v197;
    swift_bridgeObjectRetain(v197);
    v194 = sub_10000527C(&qword_1000A64F8);
    CheckedContinuation.resume(returning:)(&v240, v194);
  }
}

uint64_t sub_10003AFD8@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for Date(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 16))(a1, v1, v3);
}

uint64_t sub_10003B014@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  double v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t result;
  _OWORD v21[2];
  char v22;
  _BYTE v23[40];

  v3 = type metadata accessor for HomeInteractiveWidgetsEntryView(0);
  v4 = *(_QWORD *)(v3 - 8);
  v5 = *(_QWORD *)(v4 + 64);
  __chkstk_darwin(v3);
  v6 = (char *)v21 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100026C34(v1, (uint64_t)v6, type metadata accessor for HomeInteractiveWidgetsEntryView);
  v7 = *(unsigned __int8 *)(v4 + 80);
  v8 = (v7 + 16) & ~v7;
  v9 = swift_allocObject(&unk_10009F478, v8 + v5, v7 | 7);
  sub_100026D98((uint64_t)v6, v9 + v8, type metadata accessor for HomeInteractiveWidgetsEntryView);
  v10 = *(_QWORD *)v1;
  LOBYTE(v6) = *(_BYTE *)(v1 + 8);
  sub_100035568(*(_QWORD *)v1, (char)v6);
  LOBYTE(v8) = sub_100061B38(v10, (char)v6);
  v11 = sub_10003561C(v10, (char)v6);
  v12 = 0.0;
  v13 = 0;
  v14 = 0;
  v15 = 0;
  if ((v8 & 1) == 0)
  {
    v16 = *(_OWORD *)(v1 + 32);
    v21[0] = *(_OWORD *)(v1 + 16);
    v21[1] = v16;
    v22 = *(_BYTE *)(v1 + 48);
    sub_100052E04((uint64_t)v21, (uint64_t)v23, &qword_1000A5CB8);
    sub_100046E98((uint64_t)v23, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_100035574);
    v12 = sub_100061CF0();
    v13 = v17;
    v14 = v18;
    v15 = v19;
    v11 = sub_100046E98((uint64_t)v21, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_100035628);
  }
  result = static Edge.Set.all.getter(v11);
  *(_QWORD *)a1 = sub_100046E4C;
  *(_QWORD *)(a1 + 8) = v9;
  *(_BYTE *)(a1 + 16) = result;
  *(double *)(a1 + 24) = v12;
  *(_QWORD *)(a1 + 32) = v13;
  *(_QWORD *)(a1 + 40) = v14;
  *(_QWORD *)(a1 + 48) = v15;
  *(_BYTE *)(a1 + 56) = 0;
  return result;
}

void sub_10003B198(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD v31[8];
  uint64_t v32;
  char *v33;
  uint64_t v34;
  char *v35;
  char *v36;
  char *v37;
  char *v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  char *v45;
  char *v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  char *v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;

  v39 = a1;
  v59 = a3;
  v34 = type metadata accessor for WidgetViewsForMediumSystemFamily(0);
  __chkstk_darwin(v34);
  v31[7] = (char *)v31 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v32 = sub_10000527C(&qword_1000A5CC0);
  __chkstk_darwin(v32);
  v33 = (char *)v31 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v44 = sub_10000527C(&qword_1000A5CC8);
  __chkstk_darwin(v44);
  v35 = (char *)v31 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v42 = sub_10000527C(&qword_1000A5CD0);
  __chkstk_darwin(v42);
  v43 = (char *)v31 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_10000527C(&qword_1000A5CD8);
  __chkstk_darwin(v8);
  v37 = (char *)v31 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_10000527C(&qword_1000A5C08);
  __chkstk_darwin(v10);
  v36 = (char *)v31 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v41 = type metadata accessor for WidgetViewForLargeSquareTiles(0);
  __chkstk_darwin(v41);
  v38 = (char *)v31 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for WidgetFamily(0);
  v14 = __chkstk_darwin(v13);
  __chkstk_darwin(v14);
  v15 = type metadata accessor for HomeInteractiveWidgetsEntryView(0);
  v16 = __chkstk_darwin(v15);
  __chkstk_darwin(v16);
  v49 = sub_10000527C(&qword_1000A5CE0);
  v17 = __chkstk_darwin(v49);
  v40 = (char *)v31 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  v46 = (char *)v31 - v19;
  v47 = sub_10000527C(&qword_1000A5CE8);
  __chkstk_darwin(v47);
  v50 = (char *)v31 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v53 = sub_10000527C(&qword_1000A5CF0);
  v21 = __chkstk_darwin(v53);
  v45 = (char *)v31 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v21);
  v48 = (char *)v31 - v23;
  v52 = sub_10000527C(&qword_1000A5CF8);
  __chkstk_darwin(v52);
  v51 = (char *)v31 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v56 = sub_10000527C(&qword_1000A5D00);
  __chkstk_darwin(v56);
  v54 = (char *)v31 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v57 = sub_10000527C(&qword_1000A5D08);
  __chkstk_darwin(v57);
  v58 = (char *)v31 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v60 = sub_10000527C(&qword_1000A5D10);
  __chkstk_darwin(v60);
  v55 = (char *)v31 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = type metadata accessor for Locale(0);
  __chkstk_darwin(v28);
  v29 = type metadata accessor for String.LocalizationValue(0);
  __chkstk_darwin(v29);
  v30 = sub_10000527C(&qword_1000A5D18);
  __chkstk_darwin(v30);
  __asm { BR              X10 }
}

uint64_t sub_10003B74C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unsigned __int8 v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  char v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v5 = v1;
  v7 = String.LocalizationValue.init(stringLiteral:)(0x6553656D6F486F4ELL, 0xEB00000000705574);
  static Locale.current.getter(v7);
  *(_QWORD *)(v4 - 224) = String.init(localized:table:bundle:locale:comment:)(v3, 0xD00000000000001ALL, 0x800000010008A7C0, 0, v2, 0, 0, 256);
  *(_QWORD *)(v4 - 216) = v8;
  *(_OWORD *)(v4 - 208) = xmmword_100088400;
  *(_OWORD *)(v4 - 192) = xmmword_100088410;
  *(_BYTE *)(v4 - 176) = 0;
  v9 = sub_100046EF8();
  ((void (*)(uint64_t, ValueMetadata *, ValueMetadata *, unint64_t, unint64_t))_ConditionalContent<>.init(storage:))(v4 - 224, &type metadata for WidgetErrorView, &type metadata for WidgetErrorView, v9, v9);
  v10 = *(_BYTE *)(v4 - 112);
  v11 = *(_OWORD *)(v4 - 144);
  v12 = *(_OWORD *)(v4 - 128);
  *(_OWORD *)(v4 - 224) = *(_OWORD *)(v4 - 160);
  *(_OWORD *)(v4 - 208) = v11;
  *(_OWORD *)(v4 - 192) = v12;
  *(_WORD *)(v4 - 176) = v10;
  v13 = sub_10000527C(&qword_1000A5D28);
  v14 = sub_100046F3C();
  ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))_ConditionalContent<>.init(storage:))(v4 - 224, v13, v13, v14, v14);
  v15 = *(_BYTE *)(v4 - 112);
  v16 = *(_BYTE *)(v4 - 111);
  v17 = *(_OWORD *)(v4 - 144);
  v18 = *(_OWORD *)(v4 - 128);
  *(_OWORD *)v5 = *(_OWORD *)(v4 - 160);
  *(_OWORD *)(v5 + 16) = v17;
  *(_OWORD *)(v5 + 32) = v18;
  *(_BYTE *)(v5 + 48) = v15;
  *(_BYTE *)(v5 + 49) = v16;
  swift_storeEnumTagMultiPayload(v5, a1, 0);
  v19 = sub_10000527C(&qword_1000A5DB0);
  v20 = sub_100047268(&qword_1000A5DB8, &qword_1000A5DB0, (void (*)(void))sub_100046F3C);
  v21 = sub_1000471D4(&qword_1000A5DC0, &qword_1000A5D10, (void (*)(void))sub_1000471B0, (void (*)(void))sub_100047244);
  return ((uint64_t (*)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t))_ConditionalContent<>.init(storage:))(v5, v19, *(_QWORD *)(v4 - 240), v20, v21);
}

double sub_10003CE78@<D0>(uint64_t a1@<X0>, _QWORD *a2@<X8>, double a3@<D0>, double a4@<D1>)
{
  uint64_t v8;
  int *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  double *v14;
  double result;

  *a2 = swift_getKeyPath(&unk_100088570);
  v8 = sub_10000527C(&qword_1000A5C00);
  swift_storeEnumTagMultiPayload(a2, v8, 0);
  v9 = (int *)type metadata accessor for WidgetViewsForMediumSystemFamily(0);
  v10 = (char *)a2 + v9[5];
  *(_QWORD *)v10 = swift_getKeyPath(&unk_100088548);
  v10[8] = 0;
  v11 = v9[8];
  *(_QWORD *)((char *)a2 + v9[6]) = a1;
  if (*(_QWORD *)(a1 + 16) < 5uLL)
  {
    *((_BYTE *)a2 + v11) = 0;
    v13 = _stringCompareWithSmolCheck(_:_:expecting:)(0x6C676E6174636572, 0xE900000000000065, 0x7571536C6C616D73, 0xEB00000000657261, 0);
    swift_bridgeObjectRelease(0xE900000000000065);
    v12 = 2;
    if ((v13 & 1) != 0)
      v12 = 4;
  }
  else
  {
    *((_BYTE *)a2 + v11) = 1;
    swift_bridgeObjectRelease(0xEB00000000657261);
    v12 = 4;
  }
  *(_QWORD *)((char *)a2 + v9[7]) = v12;
  v14 = (double *)((char *)a2 + v9[9]);
  *v14 = a3;
  v14[1] = a4;
  *(double *)((char *)a2 + v9[10]) = (a3 + -40.0) * 0.25;
  result = (a4 + -24.0) * 0.5;
  *(double *)((char *)a2 + v9[11]) = result;
  *(_QWORD *)((char *)a2 + v9[12]) = 0x4020000000000000;
  return result;
}

uint64_t sub_10003CFF8()
{
  return static View._viewListCount(inputs:)();
}

uint64_t sub_10003D014@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;

  v4 = sub_10000527C(&qword_1000A5F70);
  v5 = __chkstk_darwin(v4);
  v7 = (char *)&v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __chkstk_darwin(v5);
  v10 = (char *)&v15 - v9;
  *(_QWORD *)v10 = static HorizontalAlignment.center.getter(v8);
  *((_QWORD *)v10 + 1) = 0;
  v10[16] = 1;
  v11 = sub_10000527C(&qword_1000A5F78);
  sub_10003D130(a1, &v10[*(int *)(v11 + 44)]);
  sub_100026CB4((uint64_t)v10, (uint64_t)v7, &qword_1000A5F70);
  *(_QWORD *)a2 = 0;
  *(_BYTE *)(a2 + 8) = 1;
  v12 = sub_10000527C(&qword_1000A5F80);
  sub_100026CB4((uint64_t)v7, a2 + *(int *)(v12 + 48), &qword_1000A5F70);
  v13 = a2 + *(int *)(v12 + 64);
  *(_QWORD *)v13 = 0;
  *(_BYTE *)(v13 + 8) = 1;
  sub_100014EFC((uint64_t)v10, &qword_1000A5F70);
  return sub_100014EFC((uint64_t)v7, &qword_1000A5F70);
}

uint64_t sub_10003D130@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  __n128 v32;
  uint64_t v33;
  double v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t KeyPath;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  __n128 v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  char *v57;
  unsigned int v58;
  void (*v59)(char *, _QWORD, uint64_t);
  unsigned int v60;
  uint64_t v61;
  uint64_t result;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  char *v66;
  void (*v67)(char *, char *, uint64_t);
  char *v68;
  char *v69;
  void (*v70)(char *, char *, uint64_t);
  uint64_t v71;
  void (*v72)(char *, uint64_t);
  char *v73;
  uint64_t v74;
  uint64_t v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  char *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t OpaqueTypeConformance2;
  uint64_t v87;
  uint64_t v88;
  void (*v89)(char *, uint64_t);
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  __n128 v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  char v97;
  char v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  char *v105;
  uint64_t v106;
  void (*v107)(char *, _QWORD, uint64_t);
  char *v108;
  uint64_t v109;
  char *v110;
  char *v111;
  void (*v112)(char *, char *, uint64_t);
  char *v113;
  char *v114;
  void (*v115)(char *, char *, uint64_t);
  uint64_t v116;
  void (*v117)(char *, uint64_t);
  char *v118;
  uint64_t v119;
  uint64_t v120;
  char *v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  _QWORD *v132;
  int *v133;
  char *v134;
  uint64_t v135;
  char *v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  void (*v140)(char *, char *, uint64_t);
  void (*v141)(char *, uint64_t);
  void (*v142)(char *, char *, uint64_t);
  uint64_t v143;
  uint64_t v144;
  unsigned int v145;
  unsigned int v146;
  void (*v147)(char *, _QWORD, uint64_t);
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  int v151;
  uint64_t v152;
  int v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  char *v157;
  uint64_t v158;
  _QWORD *v159;
  uint64_t v160;
  void (*v161)(char *, uint64_t);
  char *v162;
  _QWORD *v163;
  char *v164;
  uint64_t v165;
  char *v166;
  uint64_t v167;
  uint64_t v168;
  char *v169;
  uint64_t v170;
  uint64_t v171;
  char *v172;
  char *v173;
  char *v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  char v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  unsigned __int8 v184;
  uint64_t v185;
  unsigned __int8 v186;
  uint64_t v187;
  uint64_t v188;

  v159 = a2;
  v3 = sub_10000527C(&qword_1000A5F88);
  v4 = __chkstk_darwin(v3);
  v160 = (uint64_t)&v137 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v148 = (uint64_t)&v137 - v6;
  v168 = sub_10000527C(&qword_1000A5F90);
  v7 = __chkstk_darwin(v168);
  v162 = (char *)&v137 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v166 = (char *)&v137 - v9;
  v10 = type metadata accessor for DynamicTypeSize(0);
  v11 = *(_QWORD **)(v10 - 8);
  v12 = __chkstk_darwin(v10);
  v174 = (char *)&v137 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v173 = (char *)&v137 - v14;
  v167 = sub_10000527C(&qword_1000A5F98);
  v15 = __chkstk_darwin(v167);
  v164 = (char *)&v137 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  v165 = (uint64_t)&v137 - v17;
  v170 = sub_10000527C(&qword_1000A5FA0);
  v161 = *(void (**)(char *, uint64_t))(v170 - 8);
  __chkstk_darwin(v170);
  v169 = (char *)&v137 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v156 = sub_10000527C(&qword_1000A5FA8);
  v155 = *(_QWORD *)(v156 - 8);
  v19 = __chkstk_darwin(v156);
  v172 = (char *)&v137 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v19);
  v171 = (uint64_t)&v137 - v21;
  v22 = sub_10000527C(&qword_1000A5FB0);
  __chkstk_darwin(v22);
  v24 = (char *)&v137 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = sub_10000527C(&qword_1000A5FB8);
  v26 = __chkstk_darwin(v25);
  v158 = (uint64_t)&v137 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v26);
  v29 = (char *)&v137 - v28;
  v30 = a1[4];
  v31 = a1[5];
  v32 = swift_bridgeObjectRetain(v31);
  v33 = Image.init(_internalSystemName:)(v30, v31, v32);
  LODWORD(v31) = ((uint64_t (*)(void))static HierarchicalShapeStyle.primary.getter)();
  v34 = ((double (*)(void))static Font.Weight.semibold.getter)();
  v35 = type metadata accessor for Font.Design(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v35 - 8) + 56))(v24, 1, 1, v35);
  v36 = static Font.system(size:weight:design:)(*(_QWORD *)&v34, 0, v24, 34.0);
  sub_100014EFC((uint64_t)v24, &qword_1000A5FB0);
  KeyPath = swift_getKeyPath(&unk_100088918);
  v175 = v33;
  LODWORD(v176) = v31;
  v177 = KeyPath;
  v178 = v36;
  v38 = sub_10000527C(&qword_1000A5FC0);
  v39 = sub_1000491FC(&qword_1000A5FC8, &qword_1000A5FC0, (void (*)(void))sub_100049280);
  v157 = v29;
  View.accessibilityIdentifier(_:)(0xD000000000000026, 0x800000010008AC60, v38, v39);
  swift_release(v36);
  swift_release(KeyPath);
  v40 = swift_release(v33);
  v41 = static Alignment.center.getter(v40);
  _FrameLayout.init(width:height:alignment:)(&v183, 0, 1, 0x4022000000000000, 0, v41, v42);
  v154 = v183;
  v153 = v184;
  v152 = v185;
  v151 = v186;
  v150 = v187;
  v149 = v188;
  v43 = *a1;
  v44 = a1[1];
  v163 = a1;
  v45 = swift_bridgeObjectRetain(v44);
  LODWORD(v175) = static HierarchicalShapeStyle.primary.getter(v45);
  v46 = Text.foregroundStyle<A>(_:)(&v175, v43, v44, 0, _swiftEmptyArrayStorage, &type metadata for HierarchicalShapeStyle, &protocol witness table for HierarchicalShapeStyle);
  v48 = v47;
  LOBYTE(v38) = v49;
  v51 = v50;
  swift_bridgeObjectRelease(v44);
  v52 = swift_getKeyPath(&unk_100088948);
  v53 = static Font.footnote.getter();
  static Font.Weight.semibold.getter();
  v54 = Font.weight(_:)(v53);
  swift_release(v53);
  v55 = swift_getKeyPath(&unk_100088918);
  v175 = v46;
  v176 = v48;
  LOBYTE(v177) = v38 & 1;
  v178 = v51;
  v179 = v52;
  v57 = v173;
  v56 = v174;
  v180 = 1;
  v181 = v55;
  v182 = v54;
  v58 = enum case for DynamicTypeSize.xSmall(_:);
  v59 = (void (*)(char *, _QWORD, uint64_t))v11[13];
  v59(v173, enum case for DynamicTypeSize.xSmall(_:), v10);
  v60 = enum case for DynamicTypeSize.accessibility1(_:);
  v59(v56, enum case for DynamicTypeSize.accessibility1(_:), v10);
  v61 = sub_100008C7C(&qword_1000A6000, (uint64_t (*)(uint64_t))&type metadata accessor for DynamicTypeSize, (uint64_t)&protocol conformance descriptor for DynamicTypeSize);
  result = dispatch thunk of static Comparable.<= infix(_:_:)(v57, v56, v10, v61);
  if ((result & 1) != 0)
  {
    v144 = v61;
    v145 = v60;
    v146 = v58;
    v147 = v59;
    v63 = v10;
    v64 = v168;
    v65 = v166;
    v66 = &v166[*(int *)(v168 + 48)];
    v67 = (void (*)(char *, char *, uint64_t))v11[4];
    v67(v166, v57, v63);
    v67(v66, v56, v63);
    v68 = v162;
    v69 = &v162[*(int *)(v64 + 48)];
    v70 = (void (*)(char *, char *, uint64_t))v11[2];
    v70(v162, v65, v63);
    v140 = v70;
    v70(v69, v66, v63);
    v71 = (uint64_t)v164;
    v67(v164, v68, v63);
    v72 = (void (*)(char *, uint64_t))v11[1];
    v72(v69, v63);
    v73 = &v68[*(int *)(v64 + 48)];
    v67(v68, v65, v63);
    v67(v73, v66, v63);
    v74 = v167;
    v75 = v71 + *(int *)(v167 + 36);
    v142 = v67;
    v67((char *)v75, v73, v63);
    v76 = v68;
    v143 = v63;
    v141 = v72;
    v72(v68, v63);
    v77 = v165;
    sub_100052E04(v71, v165, &qword_1000A5F98);
    v78 = sub_10000527C(&qword_1000A6008);
    v79 = sub_1000491FC(&qword_1000A6010, &qword_1000A6008, (void (*)(void))sub_100049350);
    v80 = sub_1000229D8(&qword_1000A6038, &qword_1000A5F98, (uint64_t)&protocol conformance descriptor for ClosedRange<A>);
    v81 = v169;
    View.dynamicTypeSize<A>(_:)(v77, v78, v74, v79, v80);
    sub_100014EFC(v77, &qword_1000A5F98);
    v82 = v178;
    v83 = v179;
    v84 = v181;
    v85 = v182;
    sub_1000493D4(v175, v176, v177);
    swift_release(v84);
    swift_release(v83);
    swift_bridgeObjectRelease(v82);
    swift_release(v85);
    v139 = v78;
    v175 = v78;
    v176 = v74;
    v138 = v79;
    v177 = v79;
    v178 = v80;
    v137 = v80;
    OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v175, &opaque type descriptor for <<opaque return type of View.dynamicTypeSize<A>(_:)>>, 1);
    v87 = (uint64_t)v172;
    v88 = v170;
    View.accessibilityIdentifier(_:)(0xD000000000000025, 0x800000010008AC90, v170, OpaqueTypeConformance2);
    v89 = (void (*)(char *, uint64_t))*((_QWORD *)v161 + 1);
    v89(v81, v88);
    v90 = v171;
    sub_100052E04(v87, v171, &qword_1000A5FA8);
    v92 = v163[2];
    v91 = v163[3];
    if (String.count.getter(v92, v91) < 1)
    {
      v128 = 1;
      v127 = v148;
      goto LABEL_6;
    }
    v161 = v89;
    v163 = (_QWORD *)OpaqueTypeConformance2;
    v93 = swift_bridgeObjectRetain(v91);
    LODWORD(v175) = static HierarchicalShapeStyle.primary.getter(v93);
    v94 = Text.foregroundStyle<A>(_:)(&v175, v92, v91, 0, _swiftEmptyArrayStorage, &type metadata for HierarchicalShapeStyle, &protocol witness table for HierarchicalShapeStyle);
    v96 = v95;
    v98 = v97;
    v100 = v99;
    swift_bridgeObjectRelease(v91);
    v101 = swift_getKeyPath(&unk_100088948);
    v102 = static Font.footnote.getter();
    static Font.Weight.regular.getter();
    v103 = Font.weight(_:)(v102);
    swift_release(v102);
    v104 = swift_getKeyPath(&unk_100088918);
    v175 = v94;
    v176 = v96;
    LOBYTE(v177) = v98 & 1;
    v178 = v100;
    v179 = v101;
    v180 = 1;
    v181 = v104;
    v182 = v103;
    v105 = v173;
    v106 = v143;
    v107 = v147;
    v147(v173, v146, v143);
    v108 = v174;
    v107(v174, v145, v106);
    result = dispatch thunk of static Comparable.<= infix(_:_:)(v105, v108, v106, v144);
    if ((result & 1) != 0)
    {
      v109 = v168;
      v110 = v166;
      v111 = &v166[*(int *)(v168 + 48)];
      v112 = v142;
      v142(v166, v105, v106);
      v112(v111, v108, v106);
      v113 = v76;
      v114 = &v76[*(int *)(v109 + 48)];
      v115 = v140;
      v140(v76, v110, v106);
      v115(v114, v111, v106);
      v116 = (uint64_t)v164;
      v112(v164, v76, v106);
      v117 = v141;
      v141(v114, v106);
      v118 = &v113[*(int *)(v109 + 48)];
      v112(v113, v110, v106);
      v112(v118, v111, v106);
      v119 = v167;
      v112((char *)(v116 + *(int *)(v167 + 36)), v118, v106);
      v117(v113, v106);
      v120 = v165;
      sub_100052E04(v116, v165, &qword_1000A5F98);
      v121 = v169;
      View.dynamicTypeSize<A>(_:)(v120, v139, v119, v138, v137);
      sub_100014EFC(v120, &qword_1000A5F98);
      v122 = v178;
      v123 = v179;
      v124 = v181;
      v125 = v182;
      sub_1000493D4(v175, v176, v177);
      swift_release(v124);
      swift_release(v123);
      swift_bridgeObjectRelease(v122);
      swift_release(v125);
      v87 = (uint64_t)v172;
      v126 = v170;
      View.accessibilityIdentifier(_:)(0xD00000000000002CLL, 0x800000010008ACC0, v170, v163);
      v161(v121, v126);
      v127 = v148;
      sub_100052E04(v87, v148, &qword_1000A5FA8);
      v128 = 0;
      v90 = v171;
LABEL_6:
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v155 + 56))(v127, v128, 1, v156);
      v129 = (uint64_t)v157;
      v130 = v158;
      sub_100026CB4((uint64_t)v157, v158, &qword_1000A5FB8);
      sub_100026CB4(v90, v87, &qword_1000A5FA8);
      v131 = v160;
      sub_100026CB4(v127, v160, &qword_1000A5F88);
      v132 = v159;
      *v159 = 0;
      *((_BYTE *)v132 + 8) = 1;
      v133 = (int *)sub_10000527C(&qword_1000A6040);
      sub_100026CB4(v130, (uint64_t)v132 + v133[12], &qword_1000A5FB8);
      v134 = (char *)v132 + v133[16];
      *(_QWORD *)v134 = 0;
      v134[8] = 1;
      *((_QWORD *)v134 + 2) = v154;
      v134[24] = v153;
      *((_QWORD *)v134 + 4) = v152;
      v134[40] = v151;
      v135 = v149;
      *((_QWORD *)v134 + 6) = v150;
      *((_QWORD *)v134 + 7) = v135;
      sub_100026CB4(v87, (uint64_t)v132 + v133[20], &qword_1000A5FA8);
      sub_100026CB4(v131, (uint64_t)v132 + v133[24], &qword_1000A5F88);
      v136 = (char *)v132 + v133[28];
      *(_QWORD *)v136 = 0;
      v136[8] = 1;
      sub_100014EFC(v127, &qword_1000A5F88);
      sub_100014EFC(v90, &qword_1000A5FA8);
      sub_100014EFC(v129, &qword_1000A5FB8);
      sub_100014EFC(v131, &qword_1000A5F88);
      sub_100014EFC(v87, &qword_1000A5FA8);
      return sub_100014EFC(v130, &qword_1000A5FB8);
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_10003DEA8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  _OWORD *v7;
  __int128 v9;
  uint64_t v10;
  _OWORD v12[3];

  v9 = v7[1];
  v12[0] = *v7;
  v12[1] = v9;
  v12[2] = v7[2];
  *(_QWORD *)a7 = static VerticalAlignment.center.getter(a1, a2, a3, a4, a5, a6);
  *(_QWORD *)(a7 + 8) = 0;
  *(_BYTE *)(a7 + 16) = 1;
  v10 = sub_10000527C(&qword_1000A5F68);
  return sub_10003D014(v12, a7 + *(int *)(v10 + 44));
}

uint64_t sub_10003DF08@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  void (*v17)(char *, uint64_t, uint64_t);
  uint64_t v18;
  void (*v19)(char *, uint64_t);
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  double v25;
  uint64_t v26;
  double v27;
  double v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  double v37;
  double v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t KeyPath;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  _OWORD *v60;
  __int128 v61;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  int v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t *v71;
  uint64_t v72;
  uint64_t v73;
  _OWORD v74[3];

  v2 = (uint64_t)v1;
  v72 = a1;
  v3 = type metadata accessor for WidgetViewForLargeSquareTiles(0);
  v68 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v69 = v4;
  v70 = (uint64_t)&v63 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_10000527C(&qword_1000A6048);
  __chkstk_darwin(v5);
  v71 = (uint64_t *)((char *)&v63 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  v7 = type metadata accessor for WidgetFamily(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = __chkstk_darwin(v7);
  v11 = (char *)&v63 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v13 = (char *)&v63 - v12;
  v14 = *v1;
  v15 = *(_BYTE *)(v2 + 8);
  sub_100035568(v14, v15);
  v66 = sub_100061B38(v14, v15);
  sub_10003561C(v14, v15);
  v67 = v3;
  sub_100061EC4((uint64_t)v13);
  v16 = enum case for WidgetFamily.systemSmall(_:);
  v17 = *(void (**)(char *, uint64_t, uint64_t))(v8 + 104);
  v17(v11, enum case for WidgetFamily.systemSmall(_:), v7);
  v18 = sub_100008C7C(&qword_1000A5DC8, (uint64_t (*)(uint64_t))&type metadata accessor for WidgetFamily, (uint64_t)&protocol conformance descriptor for WidgetFamily);
  dispatch thunk of RawRepresentable.rawValue.getter(v74, v7, v18);
  dispatch thunk of RawRepresentable.rawValue.getter(&v73, v7, v18);
  v64 = v73;
  v65 = *(_QWORD *)&v74[0];
  v19 = *(void (**)(char *, uint64_t))(v8 + 8);
  v19(v11, v7);
  v19(v13, v7);
  sub_100061EC4((uint64_t)v13);
  v17(v11, v16, v7);
  dispatch thunk of RawRepresentable.rawValue.getter(v74, v7, v18);
  dispatch thunk of RawRepresentable.rawValue.getter(&v73, v7, v18);
  v20 = v73;
  v21 = *(_QWORD *)&v74[0];
  v19(v11, v7);
  v19(v13, v7);
  v22 = *(_QWORD *)v2;
  v23 = *(_BYTE *)(v2 + 8);
  sub_100035568(*(_QWORD *)v2, v23);
  LOBYTE(v16) = sub_100061B38(v22, v23);
  sub_10003561C(v22, v23);
  if ((v16 & 1) != 0)
  {
    v24 = 1;
    if (v21 != v20)
      v24 = 2;
    v25 = 0.0;
    if ((v66 & 1) != 0)
      v25 = 16.0;
    if (v65 != v64)
      v25 = 24.0;
    v26 = v67;
    v27 = *(double *)(v2 + *(int *)(v67 + 32));
    v28 = (v27 - v25) / (double)v24;
  }
  else
  {
    v26 = v67;
    v28 = *(double *)(v2 + *(int *)(v67 + 32));
    v27 = v28;
  }
  sub_100035568(v22, v23);
  v29 = sub_100061B38(v22, v23);
  v30 = sub_10003561C(v22, v23);
  v36 = v2 + *(int *)(v26 + 32);
  v37 = *(double *)(v36 + 8);
  if ((v29 & 1) != 0)
    v38 = v37 + -16.0;
  else
    v38 = *(double *)(v36 + 8);
  v39 = static VerticalAlignment.center.getter(v30, v31, v32, v33, v34, v35);
  v40 = (uint64_t)v71;
  *v71 = v39;
  *(_QWORD *)(v40 + 8) = 0;
  *(_BYTE *)(v40 + 16) = 1;
  sub_10000527C(&qword_1000A6050);
  v41 = *(_QWORD *)(v2 + *(int *)(v26 + 36));
  swift_bridgeObjectRetain(v41);
  v43 = sub_1000453DC(v42);
  swift_bridgeObjectRelease(v41);
  *(_QWORD *)&v74[0] = v43;
  KeyPath = swift_getKeyPath(&unk_100088978);
  v45 = v70;
  sub_100026C34(v2, v70, type metadata accessor for WidgetViewForLargeSquareTiles);
  v46 = *(unsigned __int8 *)(v68 + 80);
  v47 = (v46 + 16) & ~v46;
  v48 = (v69 + v47 + 7) & 0xFFFFFFFFFFFFFFF8;
  v49 = (v48 + 15) & 0xFFFFFFFFFFFFFFF8;
  v50 = swift_allocObject(&unk_10009F6C8, v49 + 8, v46 | 7);
  sub_100026D98(v45, v50 + v47, type metadata accessor for WidgetViewForLargeSquareTiles);
  *(double *)(v50 + v48) = v28;
  *(double *)(v50 + v49) = v38;
  v51 = swift_allocObject(&unk_10009F6F0, 32, 7);
  *(_QWORD *)(v51 + 16) = sub_100049568;
  *(_QWORD *)(v51 + 24) = v50;
  v52 = sub_10000527C(&qword_1000A6058);
  v53 = sub_10000527C(&qword_1000A6060);
  v54 = sub_1000229D8(&qword_1000A6068, &qword_1000A6058, (uint64_t)&protocol conformance descriptor for [A]);
  v55 = sub_1000229D8(&qword_1000A6070, &qword_1000A6060, (uint64_t)&protocol conformance descriptor for TupleView<A>);
  v56 = ForEach<>.init(_:id:content:)(v74, KeyPath, sub_100049600, v51, v52, v53, v54, &protocol witness table for Int, v55);
  v57 = static Alignment.center.getter(v56);
  _FrameLayout.init(width:height:alignment:)(v74, *(_QWORD *)&v27, 0, *(_QWORD *)&v37, 0, v57, v58);
  v59 = v72;
  sub_100026CB4(v40, v72, &qword_1000A6048);
  v60 = (_OWORD *)(v59 + *(int *)(sub_10000527C(&qword_1000A6078) + 36));
  v61 = v74[1];
  *v60 = v74[0];
  v60[1] = v61;
  v60[2] = v74[2];
  return sub_100014EFC(v40, &qword_1000A6048);
}

uint64_t sub_10003E444@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>, double a5@<D0>, double a6@<D1>)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  int *v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  double v44;
  uint64_t v45;
  uint64_t v46;
  char v47;
  char v48;
  unint64_t v49;
  char *v50;
  uint64_t v51;
  double v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t KeyPath;
  uint64_t v57;
  uint64_t *v58;
  uint64_t v59;
  char *v60;
  double *v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  Swift::String v66;
  uint64_t *v67;
  uint64_t v68;
  char *v69;
  uint64_t v70;
  void *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t (*v75)(char *, uint64_t, uint64_t);
  uint64_t v76;
  char *v77;
  uint64_t result;
  uint64_t v79;
  char *v80;
  char *v81;
  uint64_t v82;
  uint64_t v83;
  unint64_t v84;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  unint64_t v89;
  uint64_t v90;
  Swift::String v91;
  unint64_t v92;
  unint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t OpaqueTypeConformance2;
  uint64_t v98;
  uint64_t v99;
  unint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  char *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  void (*v108)(char *, uint64_t);
  uint64_t v109;
  uint64_t v110;
  int v111;
  unint64_t v112;
  char *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  unint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  double v130;
  double v131;
  double v132;
  uint64_t v133;
  char *v134;
  char *v135;
  char *v136;
  uint64_t v137;
  char *v138;
  uint64_t v139;
  char *v140;
  uint64_t v141;
  char *v142;
  char *v143;
  uint64_t v144;
  uint64_t v145;
  char *v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  char *v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  __int128 v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  __int128 v166;
  char v167;
  uint64_t v168;
  unint64_t v169;
  char *v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  unsigned __int8 v176;
  uint64_t v177;
  unint64_t v178;
  uint64_t v179;
  unsigned __int8 v180;
  __int128 v181;

  v147 = a1;
  v157 = a4;
  v155 = type metadata accessor for WidgetFamily(0);
  v154 = *(_QWORD *)(v155 - 8);
  v10 = __chkstk_darwin(v155);
  v153 = (char *)&v133 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v152 = (uint64_t)&v133 - v12;
  v151 = sub_10000527C(&qword_1000A6088);
  v137 = *(_QWORD *)(v151 - 8);
  __chkstk_darwin(v151);
  v136 = (char *)&v133 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_10000527C(&qword_1000A5318);
  v15 = __chkstk_darwin(v14);
  v134 = (char *)&v133 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  v18 = (char *)&v133 - v17;
  v19 = type metadata accessor for URL(0);
  v20 = *(_QWORD *)(v19 - 8);
  v21 = __chkstk_darwin(v19);
  v135 = (char *)&v133 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v21);
  v142 = (char *)&v133 - v23;
  v149 = sub_10000527C(&qword_1000A6090);
  __chkstk_darwin(v149);
  v150 = (uint64_t)&v133 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = sub_10000527C(&qword_1000A5CD8);
  __chkstk_darwin(v25);
  v27 = (uint64_t *)((char *)&v133 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0));
  v28 = (int *)type metadata accessor for LargeSquareTileViewToggleStyle(0);
  __chkstk_darwin(v28);
  v30 = (char *)&v133 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  v31 = type metadata accessor for AccessoryAndSceneEntity(0);
  __chkstk_darwin(v31);
  v33 = (char *)&v133 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  v141 = sub_10000527C(&qword_1000A6098);
  v139 = *(_QWORD *)(v141 - 8);
  __chkstk_darwin(v141);
  v138 = (char *)&v133 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  v145 = sub_10000527C(&qword_1000A60A0);
  v144 = *(_QWORD *)(v145 - 8);
  __chkstk_darwin(v145);
  v140 = (char *)&v133 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  v148 = sub_10000527C(&qword_1000A60A8);
  v36 = __chkstk_darwin(v148);
  v143 = (char *)&v133 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v36);
  v146 = (char *)&v133 - v38;
  v39 = sub_10000527C(&qword_1000A60B0);
  v40 = __chkstk_darwin(v39);
  v156 = (uint64_t)&v133 - ((v41 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v40);
  v160 = (uint64_t)&v133 - v42;
  v159 = type metadata accessor for WidgetViewForLargeSquareTiles(0);
  v43 = *(int *)(v159 + 32);
  v158 = a3;
  v44 = *(double *)(a3 + v43 + 8) / 10.0;
  v45 = a2;
  v46 = a2 + *(int *)(v31 + 24);
  sub_100016974();
  if ((v47 & 1) != 0)
  {
    v48 = sub_10001709C();
    sub_100026C34(v45, (uint64_t)v33, type metadata accessor for AccessoryAndSceneEntity);
    v168 = sub_100027C1C((uint64_t)v33);
    v49 = sub_100026EC4();
    v50 = v138;
    Toggle.init<A>(isOn:intent:label:)(v48 & 1, &v168, nullsub_1, 0, &type metadata for EmptyView, &type metadata for ToggleIntent, &protocol witness table for EmptyView, v49);
    v51 = sub_100026C34(v45, (uint64_t)v33, type metadata accessor for AccessoryAndSceneEntity);
    v52 = nullsub_1(v51, a5, a6);
    v54 = v53;
    *v27 = swift_getKeyPath(&unk_1000885A0);
    v55 = sub_10000527C(&qword_1000A4FC8);
    swift_storeEnumTagMultiPayload(v27, v55, 0);
    KeyPath = swift_getKeyPath(&unk_100088548);
    v57 = swift_getKeyPath(&unk_1000885D0);
    v58 = (uint64_t *)&v30[v28[6]];
    *v58 = v57;
    v59 = sub_10000527C(&qword_1000A4FC0);
    swift_storeEnumTagMultiPayload(v58, v59, 0);
    sub_100052E04((uint64_t)v27, (uint64_t)v30, &qword_1000A5CD8);
    v60 = &v30[v28[5]];
    *(_QWORD *)v60 = KeyPath;
    v60[8] = 0;
    sub_100026D98((uint64_t)v33, (uint64_t)&v30[v28[7]], type metadata accessor for AccessoryAndSceneEntity);
    v61 = (double *)&v30[v28[8]];
    *v61 = v52;
    *((_QWORD *)v61 + 1) = v54;
    *(double *)&v30[v28[9]] = v44;
    v62 = sub_1000229D8(&qword_1000A6100, &qword_1000A6098, (uint64_t)&protocol conformance descriptor for Toggle<A>);
    v63 = sub_100008C7C(&qword_1000A6108, type metadata accessor for LargeSquareTileViewToggleStyle, (uint64_t)&unk_100088B30);
    v64 = v140;
    v65 = v141;
    v142 = (char *)v62;
    View.toggleStyle<A>(_:)(v30, v141, v28, v62, v63);
    sub_100026C78((uint64_t)v30, type metadata accessor for LargeSquareTileViewToggleStyle);
    (*(void (**)(char *, uint64_t))(v139 + 8))(v50, v65);
    v168 = 0;
    v169 = 0xE000000000000000;
    _StringGuts.grow(_:)(52);
    v66._countAndFlagsBits = 0xD000000000000032;
    v66._object = (void *)0x800000010008AD10;
    String.append(_:)(v66);
    v67 = (uint64_t *)(v46 + *(int *)(type metadata accessor for WidgetTileInfo(0) + 28));
    v68 = v67[1];
    v69 = v64;
    if (v68)
    {
      v70 = *v67;
      v71 = (void *)v67[1];
      v72 = v155;
      v73 = (uint64_t)v146;
      v74 = v145;
    }
    else
    {
      v71 = (void *)0x800000010008AD50;
      v72 = v155;
      v73 = (uint64_t)v146;
      v74 = v145;
      v70 = 0xD000000000000011;
    }
    swift_bridgeObjectRetain(v68);
    v91._countAndFlagsBits = v70;
    v91._object = v71;
    String.append(_:)(v91);
    swift_bridgeObjectRelease(v71);
    v92 = v169;
    *(_QWORD *)&v161 = 32;
    *((_QWORD *)&v161 + 1) = 0xE100000000000000;
    v177 = 0;
    v178 = 0xE000000000000000;
    v93 = sub_100005300();
    v94 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(&v161, &v177, 0, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v93, v93, v93);
    v96 = v95;
    swift_bridgeObjectRelease(v92);
    v168 = v65;
    v169 = (unint64_t)v28;
    v170 = v142;
    v171 = v63;
    OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v168, &opaque type descriptor for <<opaque return type of View.toggleStyle<A>(_:)>>, 1);
    v98 = (uint64_t)v143;
    View.accessibilityIdentifier(_:)(v94, v96, v74, OpaqueTypeConformance2);
    swift_bridgeObjectRelease(v96);
    (*(void (**)(char *, uint64_t))(v144 + 8))(v69, v74);
    sub_100052E04(v98, v73, &qword_1000A60A8);
    v99 = v150;
    sub_100026CB4(v73, v150, &qword_1000A60A8);
    swift_storeEnumTagMultiPayload(v99, v149, 0);
    v100 = sub_10004974C();
    v101 = sub_1000229D8(&qword_1000A6118, &qword_1000A6088, (uint64_t)&protocol conformance descriptor for Link<A>);
    _ConditionalContent<>.init(storage:)(v99, v148, v151, v100, v101);
    sub_100014EFC(v73, &qword_1000A60A8);
    v79 = v158;
  }
  else
  {
    sub_10001E684();
    v75 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v20 + 48);
    v76 = v45;
    if (v75(v18, 1, v19) == 1)
    {
      v77 = v134;
      URL.init(string:)(0xD000000000000011, 0x800000010008ACF0);
      result = v75(v77, 1, v19);
      v79 = v158;
      v80 = v142;
      if ((_DWORD)result == 1)
      {
        __break(1u);
        return result;
      }
      (*(void (**)(char *, char *, uint64_t))(v20 + 32))(v142, v77, v19);
      sub_100014EFC((uint64_t)v18, &qword_1000A5318);
    }
    else
    {
      v80 = v142;
      (*(void (**)(char *, char *, uint64_t))(v20 + 32))(v142, v18, v19);
      v79 = v158;
    }
    v81 = v135;
    v82 = (*(uint64_t (**)(char *, char *, uint64_t))(v20 + 16))(v135, v80, v19);
    __chkstk_darwin(v82);
    *(&v133 - 6) = v76;
    *(&v133 - 5) = v79;
    v130 = v44;
    v131 = a5;
    v132 = a6;
    v83 = sub_10000527C(&qword_1000A60B8);
    v84 = sub_100049628();
    v85 = v136;
    Link.init(destination:label:)(v81, sub_100049618, &v133 - 8, v83, v84);
    v86 = v137;
    v87 = v150;
    v88 = v151;
    (*(void (**)(uint64_t, char *, uint64_t))(v137 + 16))(v150, v85, v151);
    swift_storeEnumTagMultiPayload(v87, v149, 1);
    v89 = sub_10004974C();
    v90 = sub_1000229D8(&qword_1000A6118, &qword_1000A6088, (uint64_t)&protocol conformance descriptor for Link<A>);
    _ConditionalContent<>.init(storage:)(v87, v148, v88, v89, v90);
    (*(void (**)(char *, uint64_t))(v86 + 8))(v85, v88);
    (*(void (**)(char *, uint64_t))(v20 + 8))(v80, v19);
    v72 = v155;
  }
  v102 = v152;
  sub_100061EC4(v152);
  v103 = v154;
  v104 = v153;
  (*(void (**)(char *, _QWORD, uint64_t))(v154 + 104))(v153, enum case for WidgetFamily.systemMedium(_:), v72);
  v105 = sub_100008C7C(&qword_1000A5DC8, (uint64_t (*)(uint64_t))&type metadata accessor for WidgetFamily, (uint64_t)&protocol conformance descriptor for WidgetFamily);
  dispatch thunk of RawRepresentable.rawValue.getter(&v168, v72, v105);
  dispatch thunk of RawRepresentable.rawValue.getter(&v161, v72, v105);
  v106 = v168;
  v107 = v161;
  v108 = *(void (**)(char *, uint64_t))(v103 + 8);
  v108(v104, v72);
  v109 = ((uint64_t (*)(uint64_t, uint64_t))v108)(v102, v72);
  v110 = 0;
  v111 = 255;
  v112 = 0;
  v113 = 0;
  v114 = 0;
  v115 = 0;
  if (v106 == v107)
  {
    v116 = 0;
    v117 = 0;
    v118 = 0;
    if (!v147)
    {
      if (*(_QWORD *)(*(_QWORD *)(v79 + *(int *)(v159 + 36)) + 16) == 1)
      {
        v119 = static Alignment.center.getter(v109);
        ((void (*)(_QWORD *__return_ptr, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))_FrameLayout.init(width:height:alignment:))(&v177, a5 + 8.0, 0, 0, 1, v119, v120);
        v161 = xmmword_100088430;
        v162 = v177;
        v163 = v178;
        v164 = v179;
        v165 = v180;
        v166 = v181;
        v167 = 0;
      }
      else
      {
        v121 = static Alignment.center.getter(v109);
        _FrameLayout.init(width:height:alignment:)(&v177, 0x4020000000000000, 0, 0, 1, v121, v122);
        v161 = xmmword_100088430;
        v162 = v177;
        v163 = v178;
        v164 = v179;
        v165 = v180;
        v166 = v181;
        v167 = 1;
      }
      v123 = sub_10000527C(&qword_1000A6128);
      v124 = sub_100049854();
      _ConditionalContent<>.init(storage:)(&v161, v123, v123, v124, v124);
      v110 = v168;
      v112 = v169;
      v113 = v170;
      v114 = v171;
      v115 = v172;
      v116 = v173;
      v117 = v174;
      v118 = v175;
      v111 = v176;
    }
  }
  else
  {
    v116 = 0;
    v117 = 0;
    v118 = 0;
  }
  v155 = v117;
  v158 = v118;
  LODWORD(v159) = v111;
  v125 = v160;
  v126 = v156;
  sub_100026CB4(v160, v156, &qword_1000A60B0);
  v127 = v157;
  sub_100026CB4(v126, v157, &qword_1000A60B0);
  v128 = v127 + *(int *)(sub_10000527C(&qword_1000A6120) + 48);
  *(_QWORD *)v128 = v110;
  *(_QWORD *)(v128 + 8) = v112;
  *(_QWORD *)(v128 + 16) = v113;
  *(_QWORD *)(v128 + 24) = v114;
  *(_QWORD *)(v128 + 32) = v115;
  *(_QWORD *)(v128 + 40) = v116;
  v129 = v158;
  *(_QWORD *)(v128 + 48) = v155;
  *(_QWORD *)(v128 + 56) = v129;
  *(_BYTE *)(v128 + 64) = v159;
  sub_100014EFC(v125, &qword_1000A60B0);
  return sub_100014EFC(v126, &qword_1000A60B0);
}

uint64_t sub_10003F22C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>, double a4@<D0>, double a5@<D1>, double a6@<D2>)
{
  uint64_t v12;
  uint64_t v13;
  double *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _OWORD *v30;
  __int128 v31;
  _OWORD v33[3];

  v12 = type metadata accessor for RoundedRectangle(0);
  __chkstk_darwin(v12);
  v14 = (double *)((char *)v33 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  v15 = sub_10000527C(&qword_1000A60E0);
  __chkstk_darwin(v15);
  v17 = (_QWORD *)((char *)v33 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
  v18 = sub_10000527C(&qword_1000A60D0);
  v19 = __chkstk_darwin(v18);
  v21 = (char *)v33 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  *v17 = static Alignment.center.getter(v19);
  v17[1] = v22;
  v23 = sub_10000527C(&qword_1000A6138);
  sub_10003F458(a1, a2, (uint64_t)v17 + *(int *)(v23 + 44));
  v24 = (char *)v14 + *(int *)(v12 + 20);
  v25 = enum case for RoundedCornerStyle.continuous(_:);
  v26 = type metadata accessor for RoundedCornerStyle(0);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 104))(v24, v25, v26);
  *v14 = a4;
  v14[1] = a4;
  sub_100026C34((uint64_t)v14, (uint64_t)&v21[*(int *)(v18 + 36)], (uint64_t (*)(_QWORD))&type metadata accessor for RoundedRectangle);
  sub_100026CB4((uint64_t)v17, (uint64_t)v21, &qword_1000A60E0);
  sub_100026C78((uint64_t)v14, (uint64_t (*)(_QWORD))&type metadata accessor for RoundedRectangle);
  v27 = sub_100014EFC((uint64_t)v17, &qword_1000A60E0);
  v28 = static Alignment.center.getter(v27);
  _FrameLayout.init(width:height:alignment:)(v33, *(_QWORD *)&a5, 0, *(_QWORD *)&a6, 0, v28, v29);
  sub_100026CB4((uint64_t)v21, a3, &qword_1000A60D0);
  v30 = (_OWORD *)(a3 + *(int *)(sub_10000527C(&qword_1000A60B8) + 36));
  v31 = v33[1];
  *v30 = v33[0];
  v30[1] = v31;
  v30[2] = v33[2];
  return sub_100014EFC((uint64_t)v21, &qword_1000A60D0);
}

uint64_t sub_10003F458@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  char v41;
  int *v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  uint64_t v48;
  char v49;
  uint64_t v50;
  uint64_t v51;
  char v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  char v58;
  void (*v59)(char *, uint64_t);
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  char v70;
  void (*v71)(char *, uint64_t);
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  Swift::String v82;
  uint64_t *v83;
  uint64_t v84;
  void *v85;
  Swift::String v86;
  unint64_t v87;
  unint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  char *v105;
  uint64_t v106;
  uint64_t v107;
  char *v108;
  uint64_t v109;
  uint64_t v110;
  char *v111;
  _QWORD *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  char *v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  _QWORD v124[2];
  _QWORD v125[3];
  unint64_t v126;

  v106 = a2;
  v118 = a3;
  v4 = type metadata accessor for Material(0);
  v109 = *(_QWORD *)(v4 - 8);
  v110 = v4;
  __chkstk_darwin(v4);
  v108 = (char *)&v101 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v107 = type metadata accessor for WidgetRenderingMode(0);
  v121 = *(_QWORD *)(v107 - 8);
  v6 = __chkstk_darwin(v107);
  v120 = (char *)&v101 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v119 = (uint64_t)&v101 - v8;
  v9 = type metadata accessor for AccessoryAndSceneEntity(0);
  v10 = __chkstk_darwin(v9);
  v102 = (uint64_t)&v101 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v101 = (uint64_t)&v101 - v12;
  v13 = (int *)type metadata accessor for LargeSquareTileView(0);
  __chkstk_darwin(v13);
  v15 = (uint64_t *)((char *)&v101 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  v103 = sub_10000527C(&qword_1000A6140);
  __chkstk_darwin(v103);
  v123 = (uint64_t)&v101 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v104 = sub_10000527C(&qword_1000A6148);
  __chkstk_darwin(v104);
  v105 = (char *)&v101 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v113 = sub_10000527C(&qword_1000A6150);
  __chkstk_darwin(v113);
  v114 = (uint64_t)&v101 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = sub_10000527C(&qword_1000A6158);
  v20 = __chkstk_darwin(v19);
  v117 = (uint64_t)&v101 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = __chkstk_darwin(v20);
  v111 = (char *)&v101 - v23;
  __chkstk_darwin(v22);
  v116 = (uint64_t)&v101 - v24;
  v25 = type metadata accessor for AccentableBackgroundView(0);
  v26 = __chkstk_darwin(v25);
  v115 = (uint64_t)&v101 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v26);
  v29 = (uint64_t *)((char *)&v101 - v28);
  v30 = a1 + *(int *)(v9 + 24);
  v31 = sub_10001709C();
  *v29 = swift_getKeyPath(&unk_1000885D0);
  v32 = sub_10000527C(&qword_1000A4FC0);
  swift_storeEnumTagMultiPayload(v29, v32, 0);
  v33 = *(int *)(v25 + 20);
  v112 = v29;
  *((_BYTE *)v29 + v33) = v31 & 1;
  v34 = a1;
  v35 = a1;
  v36 = v9;
  v37 = v101;
  sub_100026C34(v35, v101, type metadata accessor for AccessoryAndSceneEntity);
  v122 = v30;
  LOBYTE(v25) = sub_10001709C();
  v38 = v37;
  *v15 = swift_getKeyPath(&unk_1000885D0);
  swift_storeEnumTagMultiPayload(v15, v32, 0);
  v39 = (char *)v15 + v13[5];
  *(_QWORD *)v39 = swift_getKeyPath(&unk_100088548);
  v39[8] = 0;
  sub_100026C34(v37, (uint64_t)v15 + v13[6], type metadata accessor for AccessoryAndSceneEntity);
  v40 = (uint64_t)v15 + v13[7];
  sub_100026C34(v37 + *(int *)(v36 + 24), v40, type metadata accessor for WidgetTileInfo);
  *((_BYTE *)v15 + v13[8]) = v25 & 1;
  sub_100016974();
  *((_BYTE *)v15 + v13[9]) = v41 & 1;
  v42 = (int *)type metadata accessor for WidgetTileInfo(0);
  v43 = (uint64_t *)(v40 + v42[8]);
  v45 = *v43;
  v44 = v43[1];
  v46 = (_QWORD *)((char *)v15 + v13[10]);
  *v46 = v45;
  v46[1] = v44;
  LODWORD(v37) = *(unsigned __int8 *)(v40 + v42[13]);
  swift_bridgeObjectRetain(v44);
  if ((_DWORD)v37 == 1)
  {
    sub_100026C78(v38, type metadata accessor for AccessoryAndSceneEntity);
    v48 = *(_QWORD *)(v40 + v42[12]);
    swift_retain(v48);
  }
  else
  {
    v48 = static Color.white.getter(v47);
    sub_100026C78(v38, type metadata accessor for AccessoryAndSceneEntity);
  }
  *(_QWORD *)((char *)v15 + v13[11]) = v48;
  v49 = sub_10001709C();
  v50 = v34;
  v51 = v102;
  sub_100026C34(v34, v102, type metadata accessor for AccessoryAndSceneEntity);
  if ((v49 & 1) == 0)
  {
    sub_100026C78(v51, type metadata accessor for AccessoryAndSceneEntity);
    v53 = v108;
    v54 = v107;
    goto LABEL_9;
  }
  v52 = *(_BYTE *)(v51 + *(int *)(v36 + 24) + v42[13]);
  sub_100026C78(v51, type metadata accessor for AccessoryAndSceneEntity);
  v53 = v108;
  v54 = v107;
  if ((v52 & 1) == 0)
  {
LABEL_9:
    v63 = sub_100050198(v106);
    v62 = v63;
    goto LABEL_10;
  }
  type metadata accessor for WidgetViewForLargeSquareTiles(0);
  v55 = v119;
  v56 = sub_10006215C(v119);
  v57 = v120;
  static WidgetRenderingMode.accented.getter(v56);
  v58 = static WidgetRenderingMode.== infix(_:_:)(v55, v57);
  v59 = *(void (**)(char *, uint64_t))(v121 + 8);
  v59(v57, v54);
  v60 = ((uint64_t (*)(uint64_t, uint64_t))v59)(v55, v54);
  if ((v58 & 1) != 0)
  {
    v61 = static Color.clear.getter(v60);
    v62 = v61;
    goto LABEL_11;
  }
  if (qword_1000A4F40 != -1)
    swift_once(&qword_1000A4F40, sub_100076CC0);
  v62 = qword_1000A7AE8;
  v63 = qword_1000A7AE8;
LABEL_10:
  v61 = swift_retain(v63);
LABEL_11:
  v64 = static Edge.Set.all.getter(v61);
  v65 = v123;
  sub_100026C34((uint64_t)v15, v123, type metadata accessor for LargeSquareTileView);
  v66 = v65 + *(int *)(v103 + 36);
  *(_QWORD *)v66 = v62;
  *(_BYTE *)(v66 + 8) = v64;
  sub_100026C78((uint64_t)v15, type metadata accessor for LargeSquareTileView);
  type metadata accessor for WidgetViewForLargeSquareTiles(0);
  v67 = v119;
  v68 = sub_10006215C(v119);
  v69 = v120;
  static WidgetRenderingMode.vibrant.getter(v68);
  v70 = static WidgetRenderingMode.== infix(_:_:)(v67, v69);
  v71 = *(void (**)(char *, uint64_t))(v121 + 8);
  v71(v69, v54);
  v72 = ((uint64_t (*)(uint64_t, uint64_t))v71)(v67, v54);
  if ((v70 & 1) != 0)
    static Material.ultraThick.getter(v72);
  else
    static Material.thin.getter(v72);
  v73 = 0xD000000000000011;
  v74 = (uint64_t)v105;
  v76 = v109;
  v75 = v110;
  (*(void (**)(char *, char *, uint64_t))(v109 + 16))(&v105[*(int *)(v104 + 36)], v53, v110);
  v77 = v123;
  sub_100026CB4(v123, v74, &qword_1000A6140);
  (*(void (**)(char *, uint64_t))(v76 + 8))(v53, v75);
  sub_100014EFC(v77, &qword_1000A6140);
  v78 = v114;
  sub_100026CB4(v74, v114, &qword_1000A6148);
  v79 = v113;
  v80 = v78 + *(int *)(v113 + 52);
  v81 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v81 - 8) + 16))(v80, v50, v81);
  sub_100014EFC(v74, &qword_1000A6148);
  v125[2] = 0;
  v126 = 0xE000000000000000;
  _StringGuts.grow(_:)(55);
  v82._countAndFlagsBits = 0xD000000000000035;
  v82._object = (void *)0x800000010008AD70;
  String.append(_:)(v82);
  v83 = (uint64_t *)(v122 + v42[7]);
  v84 = v83[1];
  if (v84)
  {
    v73 = *v83;
    v85 = (void *)v83[1];
  }
  else
  {
    v85 = (void *)0x800000010008AD50;
  }
  swift_bridgeObjectRetain(v84);
  v86._countAndFlagsBits = v73;
  v86._object = v85;
  String.append(_:)(v86);
  swift_bridgeObjectRelease(v85);
  v87 = v126;
  v125[0] = 32;
  v125[1] = 0xE100000000000000;
  v124[0] = 0;
  v124[1] = 0xE000000000000000;
  v88 = sub_100005300();
  v89 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(v125, v124, 0, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v88, v88, v88);
  v91 = v90;
  swift_bridgeObjectRelease(v87);
  v92 = sub_1000229D8(&qword_1000A6160, &qword_1000A6150, (uint64_t)&protocol conformance descriptor for IDView<A, B>);
  v93 = (uint64_t)v111;
  View.accessibilityIdentifier(_:)(v89, v91, v79, v92);
  swift_bridgeObjectRelease(v91);
  sub_100014EFC(v78, &qword_1000A6150);
  v94 = v116;
  sub_100052E04(v93, v116, &qword_1000A6158);
  v95 = (uint64_t)v112;
  v96 = v115;
  sub_100026C34((uint64_t)v112, v115, type metadata accessor for AccentableBackgroundView);
  v97 = v117;
  sub_100026CB4(v94, v117, &qword_1000A6158);
  v98 = v118;
  sub_100026C34(v96, v118, type metadata accessor for AccentableBackgroundView);
  v99 = sub_10000527C(&qword_1000A6168);
  sub_100026CB4(v97, v98 + *(int *)(v99 + 48), &qword_1000A6158);
  sub_100014EFC(v94, &qword_1000A6158);
  sub_100026C78(v95, type metadata accessor for AccentableBackgroundView);
  sub_100014EFC(v97, &qword_1000A6158);
  return sub_100026C78(v96, type metadata accessor for AccentableBackgroundView);
}

uint64_t sub_10003FDC0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char v16;
  char v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _OWORD *v34;
  __int128 v35;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char v42;
  _OWORD v43[3];

  v3 = v2;
  v39 = a2;
  v41 = type metadata accessor for RoundedRectangle(0);
  __chkstk_darwin(v41);
  v6 = (uint64_t *)((char *)&v37 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  v7 = sub_10000527C(&qword_1000A6458);
  __chkstk_darwin(v7);
  v9 = (uint64_t *)((char *)&v37 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  v40 = sub_10000527C(&qword_1000A6460);
  __chkstk_darwin(v40);
  v11 = (char *)&v37 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for LargeSquareTileViewToggleStyle(0);
  v13 = __chkstk_darwin(v12);
  v15 = (char *)&v37 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v38 = a1;
  v16 = ToggleStyleConfiguration.isOn.getter(v13);
  v42 = v16 & 1;
  LOBYTE(a1) = sub_10001E78C();
  sub_100026C34(v3, (uint64_t)v15, type metadata accessor for LargeSquareTileViewToggleStyle);
  if ((a1 & 1) != 0)
  {
    type metadata accessor for AccessoryAndSceneEntity(0);
    v17 = sub_10001709C();
    v18 = sub_100026C78((uint64_t)v15, type metadata accessor for LargeSquareTileViewToggleStyle);
    v19 = v17 ^ v16;
    v20 = v38;
    v21 = v39;
    if ((v19 & 1) != 0)
    {
      v18 = sub_10001709C();
      v42 = v18 & 1;
    }
  }
  else
  {
    v18 = sub_100026C78((uint64_t)v15, type metadata accessor for LargeSquareTileViewToggleStyle);
    v20 = v38;
    v21 = v39;
  }
  *v9 = static Alignment.center.getter(v18);
  v9[1] = v22;
  v23 = sub_10000527C(&qword_1000A6468);
  sub_1000400E0(v20, v3, &v42, (uint64_t)v9 + *(int *)(v23 + 44));
  v24 = *(_QWORD *)(v3 + *(int *)(v12 + 36));
  v25 = (char *)v6 + *(int *)(v41 + 20);
  v26 = enum case for RoundedCornerStyle.continuous(_:);
  v27 = type metadata accessor for RoundedCornerStyle(0);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v27 - 8) + 104))(v25, v26, v27);
  *v6 = v24;
  v6[1] = v24;
  sub_100026C34((uint64_t)v6, (uint64_t)&v11[*(int *)(v40 + 36)], (uint64_t (*)(_QWORD))&type metadata accessor for RoundedRectangle);
  sub_100026CB4((uint64_t)v9, (uint64_t)v11, &qword_1000A6458);
  sub_100026C78((uint64_t)v6, (uint64_t (*)(_QWORD))&type metadata accessor for RoundedRectangle);
  v28 = sub_100014EFC((uint64_t)v9, &qword_1000A6458);
  v29 = (uint64_t *)(v3 + *(int *)(v12 + 32));
  v30 = *v29;
  v31 = v29[1];
  v32 = static Alignment.center.getter(v28);
  _FrameLayout.init(width:height:alignment:)(v43, v30, 0, v31, 0, v32, v33);
  sub_100026CB4((uint64_t)v11, v21, &qword_1000A6460);
  v34 = (_OWORD *)(v21 + *(int *)(sub_10000527C(&qword_1000A6470) + 36));
  v35 = v43[1];
  *v34 = v43[0];
  v34[1] = v35;
  v34[2] = v43[2];
  return sub_100014EFC((uint64_t)v11, &qword_1000A6460);
}

uint64_t sub_1000400E0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  int *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  char v38;
  uint64_t v39;
  char v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  char v44;
  int *v45;
  uint64_t *v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char v53;
  char v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  char v60;
  void (*v61)(char *, uint64_t);
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char v69;
  void (*v70)(char *, uint64_t);
  uint64_t v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v87;
  char *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  char *v96;
  uint64_t v97;
  char *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  char *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;

  v88 = a3;
  v106 = a4;
  v6 = type metadata accessor for Material(0);
  v104 = *(_QWORD *)(v6 - 8);
  v105 = v6;
  __chkstk_darwin(v6);
  v103 = (char *)&v87 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v101 = type metadata accessor for WidgetRenderingMode(0);
  v99 = *(_QWORD *)(v101 - 8);
  v8 = __chkstk_darwin(v101);
  v98 = (char *)&v87 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v97 = (uint64_t)&v87 - v10;
  v107 = type metadata accessor for AccessoryAndSceneEntity(0);
  __chkstk_darwin(v107);
  v12 = (char *)&v87 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = (int *)type metadata accessor for LargeSquareTileView(0);
  __chkstk_darwin(v13);
  v15 = (uint64_t *)((char *)&v87 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  v91 = sub_10000527C(&qword_1000A6140);
  __chkstk_darwin(v91);
  v111 = (uint64_t)&v87 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v92 = sub_10000527C(&qword_1000A6148);
  __chkstk_darwin(v92);
  v96 = (char *)&v87 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v93 = sub_10000527C(&qword_1000A6150);
  v18 = __chkstk_darwin(v93);
  v102 = (uint64_t)&v87 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = __chkstk_darwin(v18);
  v94 = (uint64_t)&v87 - v21;
  __chkstk_darwin(v20);
  v100 = (uint64_t)&v87 - v22;
  v23 = type metadata accessor for LargeSquareTileViewToggleStyle(0);
  v24 = __chkstk_darwin(v23);
  v26 = (char *)&v87 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v24);
  v28 = (char *)&v87 - v27;
  v29 = type metadata accessor for AccentableBackgroundView(0);
  v30 = __chkstk_darwin(v29);
  v95 = (uint64_t)&v87 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  v32 = __chkstk_darwin(v30);
  v34 = (uint64_t *)((char *)&v87 - v33);
  v35 = __chkstk_darwin(v32);
  v110 = (uint64_t)&v87 - v36;
  v90 = a1;
  LOBYTE(a1) = ToggleStyleConfiguration.isOn.getter(v35);
  v109 = a2;
  sub_100026C34(a2, (uint64_t)v28, type metadata accessor for LargeSquareTileViewToggleStyle);
  if ((a1 & 1) != 0)
  {
    v37 = &v28[*(int *)(v23 + 28) + (uint64_t)*(int *)(v107 + 24)];
    v38 = v37[*(int *)(type metadata accessor for WidgetTileInfo(0) + 52)];
  }
  else
  {
    v38 = 0;
  }
  sub_100026C78((uint64_t)v28, type metadata accessor for LargeSquareTileViewToggleStyle);
  *v34 = swift_getKeyPath(&unk_1000885D0);
  v39 = sub_10000527C(&qword_1000A4FC0);
  swift_storeEnumTagMultiPayload(v34, v39, 0);
  *((_BYTE *)v34 + *(int *)(v29 + 20)) = v38;
  sub_100026D98((uint64_t)v34, v110, type metadata accessor for AccentableBackgroundView);
  v108 = v23;
  v89 = v109 + *(int *)(v23 + 28);
  sub_100026C34(v89, (uint64_t)v12, type metadata accessor for AccessoryAndSceneEntity);
  v40 = *v88;
  *v15 = swift_getKeyPath(&unk_1000885D0);
  swift_storeEnumTagMultiPayload(v15, v39, 0);
  v41 = (char *)v15 + v13[5];
  *(_QWORD *)v41 = swift_getKeyPath(&unk_100088548);
  v41[8] = 0;
  sub_100026C34((uint64_t)v12, (uint64_t)v15 + v13[6], type metadata accessor for AccessoryAndSceneEntity);
  v42 = v107;
  v43 = (uint64_t)v15 + v13[7];
  sub_100026C34((uint64_t)&v12[*(int *)(v107 + 24)], v43, type metadata accessor for WidgetTileInfo);
  *((_BYTE *)v15 + v13[8]) = v40;
  sub_100016974();
  *((_BYTE *)v15 + v13[9]) = v44 & 1;
  v45 = (int *)type metadata accessor for WidgetTileInfo(0);
  v46 = (uint64_t *)(v43 + v45[8]);
  v48 = *v46;
  v47 = v46[1];
  v49 = (_QWORD *)((char *)v15 + v13[10]);
  *v49 = v48;
  v49[1] = v47;
  LODWORD(v41) = *(unsigned __int8 *)(v43 + v45[13]);
  swift_bridgeObjectRetain(v47);
  if ((_DWORD)v41 == 1)
  {
    sub_100026C78((uint64_t)v12, type metadata accessor for AccessoryAndSceneEntity);
    v51 = *(_QWORD *)(v43 + v45[12]);
    v52 = swift_retain(v51);
  }
  else
  {
    v51 = static Color.white.getter(v50);
    v52 = sub_100026C78((uint64_t)v12, type metadata accessor for AccessoryAndSceneEntity);
  }
  *(_QWORD *)((char *)v15 + v13[11]) = v51;
  v53 = ToggleStyleConfiguration.isOn.getter(v52);
  sub_100026C34(v109, (uint64_t)v26, type metadata accessor for LargeSquareTileViewToggleStyle);
  if ((v53 & 1) == 0)
  {
    sub_100026C78((uint64_t)v26, type metadata accessor for LargeSquareTileViewToggleStyle);
    v55 = v101;
    v56 = v99;
    goto LABEL_12;
  }
  v54 = v26[*(int *)(v108 + 28) + (uint64_t)*(int *)(v42 + 24) + v45[13]];
  sub_100026C78((uint64_t)v26, type metadata accessor for LargeSquareTileViewToggleStyle);
  v55 = v101;
  v56 = v99;
  if ((v54 & 1) == 0)
  {
LABEL_12:
    v64 = sub_100052B58();
    v63 = swift_retain(v64);
    v57 = v97;
    v59 = v98;
    goto LABEL_13;
  }
  v57 = v97;
  v58 = sub_10006215C(v97);
  v59 = v98;
  static WidgetRenderingMode.accented.getter(v58);
  v60 = static WidgetRenderingMode.== infix(_:_:)(v57, v59);
  v61 = *(void (**)(char *, uint64_t))(v56 + 8);
  v61(v59, v55);
  v62 = ((uint64_t (*)(uint64_t, uint64_t))v61)(v57, v55);
  if ((v60 & 1) != 0)
  {
    v63 = static Color.clear.getter(v62);
    v64 = v63;
  }
  else
  {
    if (qword_1000A4F40 != -1)
      swift_once(&qword_1000A4F40, sub_100076CC0);
    v64 = qword_1000A7AE8;
    v63 = swift_retain(qword_1000A7AE8);
  }
LABEL_13:
  v65 = static Edge.Set.all.getter(v63);
  v66 = v111;
  sub_100026C34((uint64_t)v15, v111, type metadata accessor for LargeSquareTileView);
  v67 = v66 + *(int *)(v91 + 36);
  *(_QWORD *)v67 = v64;
  *(_BYTE *)(v67 + 8) = v65;
  sub_100026C78((uint64_t)v15, type metadata accessor for LargeSquareTileView);
  v68 = sub_10006215C(v57);
  static WidgetRenderingMode.vibrant.getter(v68);
  v69 = static WidgetRenderingMode.== infix(_:_:)(v57, v59);
  v70 = *(void (**)(char *, uint64_t))(v56 + 8);
  v70(v59, v55);
  v71 = ((uint64_t (*)(uint64_t, uint64_t))v70)(v57, v55);
  v72 = v103;
  if ((v69 & 1) != 0)
    static Material.ultraThick.getter(v71);
  else
    static Material.thin.getter(v71);
  v73 = (uint64_t)v96;
  v75 = v104;
  v74 = v105;
  (*(void (**)(char *, char *, uint64_t))(v104 + 16))(&v96[*(int *)(v92 + 36)], v72, v105);
  v76 = v111;
  sub_100026CB4(v111, v73, &qword_1000A6140);
  (*(void (**)(char *, uint64_t))(v75 + 8))(v72, v74);
  sub_100014EFC(v76, &qword_1000A6140);
  v77 = v94;
  sub_100026CB4(v73, v94, &qword_1000A6148);
  v78 = v77 + *(int *)(v93 + 52);
  v79 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v79 - 8) + 16))(v78, v89, v79);
  sub_100014EFC(v73, &qword_1000A6148);
  v80 = v100;
  sub_100052E04(v77, v100, &qword_1000A6150);
  v81 = v110;
  v82 = v95;
  sub_100026C34(v110, v95, type metadata accessor for AccentableBackgroundView);
  v83 = v102;
  sub_100026CB4(v80, v102, &qword_1000A6150);
  v84 = v106;
  sub_100026C34(v82, v106, type metadata accessor for AccentableBackgroundView);
  v85 = sub_10000527C(&qword_1000A6478);
  sub_100026CB4(v83, v84 + *(int *)(v85 + 48), &qword_1000A6150);
  sub_100014EFC(v80, &qword_1000A6150);
  sub_100026C78(v81, type metadata accessor for AccentableBackgroundView);
  sub_100014EFC(v83, &qword_1000A6150);
  return sub_100026C78(v82, type metadata accessor for AccentableBackgroundView);
}

uint64_t sub_100040944(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t KeyPath;
  uint64_t v25;
  __int128 v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  uint64_t v39;

  v1 = a1[2];
  v39 = v1;
  v2 = *(_QWORD *)(v1 + 16);
  if (v2)
  {
    v3 = a1[3];
    result = type metadata accessor for AccessoryAndSceneEntity(0);
    v5 = 0;
    v6 = 0;
    v7 = *(unsigned __int8 *)(*(_QWORD *)(result - 8) + 80);
    v32 = v1 + ((v7 + 32) & ~v7);
    v8 = _swiftEmptyArrayStorage;
    v9 = v3;
    v34 = v3;
    v35 = v2;
    while (1)
    {
      v10 = v2 >= v9 ? v9 : v2;
      v11 = v5 + v3;
      if (__OFADD__(v5, v3))
        break;
      if (v2 >= v11)
        v12 = v5 + v3;
      else
        v12 = v2;
      if (v12 < v5)
        goto LABEL_28;
      if (v5 < 0)
        goto LABEL_29;
      v13 = type metadata accessor for __ContiguousArrayStorageBase(0);
      swift_bridgeObjectRetain(v1);
      v15 = swift_unknownObjectRetain_n(v14, 2);
      v16 = v1;
      v17 = (_QWORD *)swift_dynamicCastClass(v15, v13);
      if (!v17)
      {
        sub_100050578(&v39);
        v17 = _swiftEmptyArrayStorage;
      }
      v18 = v17[2];
      swift_release(v17);
      if (v10 + v6 == v18)
      {
        v1 = v16;
        v19 = (_QWORD *)swift_dynamicCastClass(v16, v13);
        if (!v19)
        {
          sub_100050578(&v39);
          v19 = _swiftEmptyArrayStorage;
        }
      }
      else
      {
        sub_100050578(&v39);
        v1 = v16;
        v19 = sub_100024178(v16, v32, v5, (2 * v12) | 1);
      }
      sub_100050578(&v39);
      result = swift_isUniquelyReferenced_nonNull_native(v8);
      if ((result & 1) == 0)
      {
        result = (uint64_t)sub_10005B1A4(0, v8[2] + 1, 1, v8);
        v8 = (_QWORD *)result;
      }
      v21 = v8[2];
      v20 = v8[3];
      if (v21 >= v20 >> 1)
      {
        result = (uint64_t)sub_10005B1A4((_QWORD *)(v20 > 1), v21 + 1, 1, v8);
        v8 = (_QWORD *)result;
      }
      v8[2] = v21 + 1;
      v8[v21 + 4] = v19;
      v2 = v35;
      if (v11 < v35)
      {
        v3 = v34;
        v9 += v34;
        v6 -= v34;
        v5 += v34;
        if (!v21)
          continue;
      }
      goto LABEL_26;
    }
    __break(1u);
LABEL_28:
    __break(1u);
LABEL_29:
    __break(1u);
  }
  else
  {
    v8 = _swiftEmptyArrayStorage;
LABEL_26:
    sub_1000456E0((uint64_t)v8);
    v23 = v22;
    swift_bridgeObjectRelease(v8);
    v36 = v23;
    KeyPath = swift_getKeyPath(&unk_100088998);
    v37 = *a1;
    v38 = *((_BYTE *)a1 + 8);
    v25 = swift_allocObject(&unk_10009F718, 72, 7);
    v26 = *((_OWORD *)a1 + 1);
    *(_OWORD *)(v25 + 16) = *(_OWORD *)a1;
    *(_OWORD *)(v25 + 32) = v26;
    *(_OWORD *)(v25 + 48) = *((_OWORD *)a1 + 2);
    *(_QWORD *)(v25 + 64) = a1[6];
    v27 = swift_allocObject(&unk_10009F740, 32, 7);
    *(_QWORD *)(v27 + 16) = sub_100050470;
    *(_QWORD *)(v27 + 24) = v25;
    sub_1000504A0(&v39);
    sub_1000504C8((uint64_t)&v37);
    v28 = sub_10000527C(&qword_1000A6190);
    v29 = sub_10000527C(&qword_1000A6198);
    v30 = sub_1000229D8(&qword_1000A61A0, &qword_1000A6190, (uint64_t)&protocol conformance descriptor for [A]);
    v31 = sub_1000504F4();
    return ForEach<>.init(_:id:content:)(&v36, KeyPath, sub_100050478, v27, v28, v29, v30, &protocol witness table for Int, v31);
  }
  return result;
}

uint64_t sub_100040C60@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  char v15;
  double v16;
  double v17;
  char v18;
  double v19;
  int v20;
  uint64_t v21;
  char v22;
  double v23;
  char v24;
  double v25;
  uint64_t v26;
  char v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  double v35;
  char v36;
  double v37;
  double v38;
  double v39;
  double v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t KeyPath;
  uint64_t v44;
  __int128 v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  _OWORD *v54;
  __int128 v55;
  uint64_t v56;
  _OWORD v57[3];
  uint64_t v58;

  v6 = sub_10000527C(&qword_1000A61B8);
  result = __chkstk_darwin(v6);
  v9 = (char *)&v56 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *(_QWORD *)(a2 + 24);
  v11 = *(_QWORD *)(a1 + 16);
  v12 = v10 - v11;
  if (__OFSUB__(v10, v11))
  {
    __break(1u);
    return result;
  }
  v13 = *(_QWORD *)a2;
  v14 = *(_BYTE *)(a2 + 8);
  sub_100035568(*(_QWORD *)a2, v14);
  v15 = sub_100061B38(v13, v14);
  sub_10003561C(v13, v14);
  v16 = *(double *)(a2 + 40);
  v17 = *(double *)(a2 + 48);
  sub_100035568(v13, v14);
  v18 = sub_100061B38(v13, v14);
  sub_10003561C(v13, v14);
  if ((v18 & 1) != 0)
    v19 = 16.0;
  else
    v19 = 0.0;
  v20 = *(unsigned __int8 *)(a2 + 32);
  if (*(_BYTE *)(a2 + 32))
  {
    if (v20 == 1)
      v21 = 0x7571536C6C616D73;
    else
      v21 = 0x757153656772616CLL;
    v22 = _stringCompareWithSmolCheck(_:_:expecting:)(v21, 0xEB00000000657261, 0x6C676E6174636572, 0xE900000000000065, 0);
    swift_bridgeObjectRelease(0xEB00000000657261);
    if ((v22 & 1) != 0)
    {
      v23 = v16 - v19;
    }
    else
    {
      sub_100035568(v13, v14);
      v24 = sub_100061B38(v13, v14);
      sub_10003561C(v13, v14);
      v25 = 8.0;
      if ((v24 & 1) != 0)
        v25 = 24.0;
      v23 = (v16 - v25) * 0.5;
    }
  }
  else
  {
    swift_bridgeObjectRelease(0xE900000000000065);
    v23 = v16 - v19;
  }
  if (!v20)
  {
    swift_bridgeObjectRelease(0xE900000000000065);
LABEL_23:
    sub_100035568(v13, v14);
    v36 = sub_100061B38(v13, v14);
    v29 = sub_10003561C(v13, v14);
    v37 = 8.0;
    if ((v36 & 1) != 0)
      v37 = 24.0;
    v35 = (v17 - v37) * 0.5;
    goto LABEL_26;
  }
  if (v20 == 1)
    v26 = 0x7571536C6C616D73;
  else
    v26 = 0x757153656772616CLL;
  v27 = _stringCompareWithSmolCheck(_:_:expecting:)(v26, 0xEB00000000657261, 0x6C676E6174636572, 0xE900000000000065, 0);
  swift_bridgeObjectRelease(0xEB00000000657261);
  if ((v27 & 1) != 0)
    goto LABEL_23;
  sub_100035568(v13, v14);
  v28 = sub_100061B38(v13, v14);
  v29 = sub_10003561C(v13, v14);
  v17 = v16;
  v35 = v23;
  if ((v28 & 1) != 0)
    goto LABEL_23;
LABEL_26:
  v38 = 8.0;
  v39 = (double)v12 * 8.0;
  if ((v15 & 1) != 0)
    v38 = 24.0;
  v40 = (v16 - v38) * 0.5 * (double)v12;
  *(_QWORD *)v9 = static VerticalAlignment.center.getter(v29, v30, v31, v32, v33, v34);
  *((_QWORD *)v9 + 1) = 0;
  v9[16] = 1;
  sub_10000527C(&qword_1000A61C0);
  swift_bridgeObjectRetain(a1);
  v42 = sub_1000453DC(v41);
  swift_bridgeObjectRelease(a1);
  *(_QWORD *)&v57[0] = v42;
  KeyPath = swift_getKeyPath(&unk_100088978);
  v58 = *(_QWORD *)(a2 + 16);
  v44 = swift_allocObject(&unk_10009F768, 112, 7);
  *(double *)(v44 + 16) = v23;
  *(double *)(v44 + 24) = v35;
  v45 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(v44 + 32) = *(_OWORD *)a2;
  *(_OWORD *)(v44 + 48) = v45;
  *(_OWORD *)(v44 + 64) = *(_OWORD *)(a2 + 32);
  *(_QWORD *)(v44 + 80) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(v44 + 88) = a1;
  *(double *)(v44 + 96) = v39;
  *(double *)(v44 + 104) = v40;
  v46 = swift_allocObject(&unk_10009F790, 32, 7);
  *(_QWORD *)(v46 + 16) = sub_1000505D8;
  *(_QWORD *)(v46 + 24) = v44;
  sub_100035568(v13, v14);
  swift_bridgeObjectRetain(a1);
  sub_1000504A0(&v58);
  v47 = sub_10000527C(&qword_1000A6058);
  v48 = sub_10000527C(&qword_1000A61C8);
  v49 = sub_1000229D8(&qword_1000A6068, &qword_1000A6058, (uint64_t)&protocol conformance descriptor for [A]);
  v50 = sub_1000229D8(&qword_1000A61D0, &qword_1000A61C8, (uint64_t)&protocol conformance descriptor for TupleView<A>);
  v51 = ForEach<>.init(_:id:content:)(v57, KeyPath, sub_100049600, v46, v47, v48, v49, &protocol witness table for Int, v50);
  v52 = static Alignment.center.getter(v51);
  _FrameLayout.init(width:height:alignment:)(v57, *(_QWORD *)&v16, 0, *(_QWORD *)&v35, 0, v52, v53);
  sub_100026CB4((uint64_t)v9, a3, &qword_1000A61B8);
  v54 = (_OWORD *)(a3 + *(int *)(sub_10000527C(&qword_1000A6198) + 36));
  v55 = v57[1];
  *v54 = v57[0];
  v54[1] = v55;
  v54[2] = v57[2];
  return sub_100014EFC((uint64_t)v9, &qword_1000A61B8);
}

uint64_t sub_10004114C@<X0>(unint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>, double a6@<D0>, double a7@<D1>, double a8@<D2>, double a9@<D3>)
{
  uint64_t v15;
  uint64_t v16;
  _BYTE *v17;
  uint64_t v18;
  uint64_t v19;
  _BYTE *v20;
  uint64_t v21;
  uint64_t v22;
  _BYTE *v23;
  uint64_t v24;
  uint64_t v25;
  _BYTE *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _BYTE *v32;
  uint64_t v33;
  uint64_t v34;
  double v35;
  double v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _OWORD *v40;
  __int128 v41;
  _BYTE *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t *v45;
  uint64_t v46;
  void *v47;
  Swift::String v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  __int128 v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  char v80;
  char v81;
  _BYTE *v82;
  _BYTE *v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t v86;
  uint64_t v87;
  _BYTE v89[4];
  int v90;
  uint64_t v91;
  uint64_t v92;
  unint64_t v93;
  unint64_t v94;
  _BYTE *v95;
  uint64_t v96;
  _BYTE *v97;
  __int128 v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  __int128 v103;
  __int16 v104;
  unint64_t v105;
  unint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  char v113;
  char v114;
  _OWORD v115[3];
  uint64_t v116;
  unint64_t v117;
  uint64_t v118;
  unsigned __int8 v119;
  __int128 v120;

  v92 = a4;
  v94 = a1;
  v96 = a5;
  v15 = 0xD000000000000011;
  v91 = type metadata accessor for AccessoryAndSceneEntity(0);
  __chkstk_darwin(v91);
  v17 = &v89[-((v16 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v18 = type metadata accessor for TileView(0);
  __chkstk_darwin(v18);
  v20 = &v89[-((v19 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v21 = sub_10000527C(&qword_1000A61D8);
  __chkstk_darwin(v21);
  v23 = &v89[-((v22 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v24 = sub_10000527C(&qword_1000A61E0);
  __chkstk_darwin(v24);
  v26 = &v89[-((v25 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v27 = sub_10000527C(&qword_1000A61E8);
  v28 = __chkstk_darwin(v27);
  v95 = &v89[-((v29 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v30 = __chkstk_darwin(v28);
  v32 = &v89[-v31];
  __chkstk_darwin(v30);
  v97 = &v89[-v33];
  v34 = sub_100026C34(a2, (uint64_t)v17, type metadata accessor for AccessoryAndSceneEntity);
  v35 = nullsub_1(v34, a6, a7);
  v93 = a3;
  v90 = *(unsigned __int8 *)(a3 + 32);
  v37 = sub_10006ABC8((uint64_t)v17, v90, (uint64_t)v20, v35, v36);
  v38 = static Alignment.center.getter(v37);
  _FrameLayout.init(width:height:alignment:)(v115, *(_QWORD *)&a6, 0, *(_QWORD *)&a7, 0, v38, v39);
  sub_100026C34((uint64_t)v20, (uint64_t)v23, type metadata accessor for TileView);
  v40 = &v23[*(int *)(v21 + 36)];
  v41 = v115[1];
  *v40 = v115[0];
  v40[1] = v41;
  v40[2] = v115[2];
  sub_100026C78((uint64_t)v20, type metadata accessor for TileView);
  sub_100026CB4((uint64_t)v23, (uint64_t)v26, &qword_1000A61D8);
  v42 = &v26[*(int *)(v24 + 52)];
  v43 = type metadata accessor for UUID(0);
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(*(_QWORD *)(v43 - 8) + 16))(v42, a2, v43);
  sub_100014EFC((uint64_t)v23, &qword_1000A61D8);
  v105 = 0;
  v106 = 0xE000000000000000;
  _StringGuts.grow(_:)(37);
  swift_bridgeObjectRelease(v106);
  v105 = 0xD000000000000023;
  v106 = 0x800000010008ADB0;
  v44 = a2 + *(int *)(v91 + 24);
  v45 = (uint64_t *)(v44 + *(int *)(type metadata accessor for WidgetTileInfo(0) + 28));
  v46 = v45[1];
  if (v46)
  {
    v15 = *v45;
    v47 = (void *)v45[1];
  }
  else
  {
    v47 = (void *)0x800000010008AD50;
  }
  swift_bridgeObjectRetain(v46);
  v48._countAndFlagsBits = v15;
  v48._object = v47;
  String.append(_:)(v48);
  swift_bridgeObjectRelease(v47);
  v49 = v106;
  *(_QWORD *)&v98 = 32;
  *((_QWORD *)&v98 + 1) = 0xE100000000000000;
  v116 = 0;
  v117 = 0xE000000000000000;
  v50 = sub_100005300();
  v51 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(&v98, &v116, 0, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v50, v50, v50);
  v53 = v52;
  swift_bridgeObjectRelease(v49);
  v54 = sub_1000229D8(&qword_1000A61F0, &qword_1000A61E0, (uint64_t)&protocol conformance descriptor for IDView<A, B>);
  View.accessibilityIdentifier(_:)(v51, v53, v24, v54);
  swift_bridgeObjectRelease(v53);
  sub_100014EFC((uint64_t)v26, &qword_1000A61E0);
  v55 = sub_100052E04((uint64_t)v32, (uint64_t)v97, &qword_1000A61E8);
  v56 = *(_QWORD *)(v92 + 16);
  if (v56 >= *(_QWORD *)(v93 + 24) || v56 - 1 != v94)
  {
    v59 = 0uLL;
    if (v94)
    {
      v60 = 0;
      v61 = 0;
      v62 = 0;
      v63 = 0;
      v64 = 0;
      v65 = 1;
LABEL_17:
      *(_QWORD *)&v98 = 0;
      *((_QWORD *)&v98 + 1) = v60;
      v99 = v61;
      v100 = v62;
      v101 = v63;
      v102 = v64;
      v103 = v59;
      LOBYTE(v104) = v65;
      HIBYTE(v104) = 1;
      goto LABEL_18;
    }
    v66 = 0xEB00000000657261;
    if (v90)
    {
      if (v90 == 1)
      {
        v67 = swift_bridgeObjectRelease(0xEB00000000657261);
LABEL_15:
        v70 = static Alignment.center.getter(v67);
        v60 = 1;
        _FrameLayout.init(width:height:alignment:)(&v116, 0x4020000000000000, 0, 0, 1, v70, v71);
        v65 = 0;
        v61 = v116;
        v62 = v117;
        v63 = v118;
        v64 = v119;
        v59 = v120;
        goto LABEL_17;
      }
      v68 = 0x757153656772616CLL;
    }
    else
    {
      v66 = 0xE900000000000065;
      v68 = 0x6C676E6174636572;
    }
    v69 = _stringCompareWithSmolCheck(_:_:expecting:)(v68, v66, 0x7571536C6C616D73, 0xEB00000000657261, 0);
    v67 = swift_bridgeObjectRelease(v66);
    if ((v69 & 1) == 0)
    {
      v60 = 0;
      v61 = 0;
      v62 = 0;
      v63 = 0;
      v64 = 0;
      v65 = 1;
      v59 = 0uLL;
      goto LABEL_17;
    }
    goto LABEL_15;
  }
  v57 = static Alignment.center.getter(v55);
  ((void (*)(_QWORD *__return_ptr, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))_FrameLayout.init(width:height:alignment:))(&v116, a8 + a9, 0, 0, 1, v57, v58);
  v98 = xmmword_100088430;
  v99 = v116;
  v100 = v117;
  v101 = v118;
  v102 = v119;
  v103 = v120;
  v104 = 0;
LABEL_18:
  v72 = sub_10000527C(&qword_1000A6128);
  v73 = sub_10000527C(&qword_1000A61F8);
  v74 = sub_100049854();
  v75 = sub_1000505EC(&qword_1000A6200, &qword_1000A61F8, (void (*)(void))sub_100049854);
  _ConditionalContent<>.init(storage:)(&v98, v72, v73, v74, v75);
  v94 = v105;
  v93 = v106;
  v92 = v107;
  v91 = v108;
  v76 = v109;
  v77 = v110;
  v78 = v111;
  v79 = v112;
  v80 = v113;
  v81 = v114;
  v82 = v97;
  v83 = v95;
  sub_100026CB4((uint64_t)v97, (uint64_t)v95, &qword_1000A61E8);
  v84 = v96;
  sub_100026CB4((uint64_t)v83, v96, &qword_1000A61E8);
  v85 = v84 + *(int *)(sub_10000527C(&qword_1000A6208) + 48);
  v86 = v93;
  *(_QWORD *)v85 = v94;
  *(_QWORD *)(v85 + 8) = v86;
  v87 = v91;
  *(_QWORD *)(v85 + 16) = v92;
  *(_QWORD *)(v85 + 24) = v87;
  *(_QWORD *)(v85 + 32) = v76;
  *(_QWORD *)(v85 + 40) = v77;
  *(_QWORD *)(v85 + 48) = v78;
  *(_QWORD *)(v85 + 56) = v79;
  *(_BYTE *)(v85 + 64) = v80;
  *(_BYTE *)(v85 + 65) = v81;
  sub_100014EFC((uint64_t)v82, &qword_1000A61E8);
  return sub_100014EFC((uint64_t)v83, &qword_1000A61E8);
}

uint64_t sub_100041948@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _OWORD *v13;
  __int128 v14;
  _OWORD v16[3];
  _OWORD v17[2];
  __int128 v18;
  uint64_t v19;

  v3 = sub_10000527C(&qword_1000A6178);
  v4 = __chkstk_darwin(v3);
  v6 = (char *)v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *(_OWORD *)(v1 + 16);
  v17[0] = *(_OWORD *)v1;
  v17[1] = v7;
  v18 = *(_OWORD *)(v1 + 32);
  v19 = *(_QWORD *)(v1 + 48);
  *(_QWORD *)v6 = static HorizontalAlignment.center.getter(v4);
  *((_QWORD *)v6 + 1) = 0;
  v6[16] = 1;
  sub_10000527C(&qword_1000A6180);
  v8 = sub_100040944((uint64_t *)v17);
  v9 = *((_QWORD *)&v18 + 1);
  v10 = v19;
  v11 = static Alignment.center.getter(v8);
  _FrameLayout.init(width:height:alignment:)(v16, v9, 0, v10, 0, v11, v12);
  sub_100026CB4((uint64_t)v6, a1, &qword_1000A6178);
  v13 = (_OWORD *)(a1 + *(int *)(sub_10000527C(&qword_1000A6188) + 36));
  v14 = v16[1];
  *v13 = v16[0];
  v13[1] = v14;
  v13[2] = v16[2];
  return sub_100014EFC((uint64_t)v6, &qword_1000A6178);
}

uint64_t sub_100041A64@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  _QWORD *v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t KeyPath;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;

  v44 = a2;
  v3 = type metadata accessor for WidgetViewsForMediumSystemFamily(0);
  v40 = *(_QWORD *)(v3 - 8);
  v4 = __chkstk_darwin(v3);
  v41 = v5;
  v42 = a1;
  v43 = (uint64_t)&v38 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = *(_QWORD *)(a1 + *(int *)(v4 + 24));
  v7 = *(_QWORD *)(v6 + 16);
  if (v7)
  {
    v8 = *(_QWORD *)(a1 + *(int *)(v4 + 28));
    result = type metadata accessor for AccessoryAndSceneEntity(0);
    v10 = 0;
    v11 = 0;
    v12 = *(unsigned __int8 *)(*(_QWORD *)(result - 8) + 80);
    v39 = v6 + ((v12 + 32) & ~v12);
    v13 = _swiftEmptyArrayStorage;
    v14 = v8;
    v45 = v8;
    v46 = v7;
    while (1)
    {
      v15 = v7 >= v14 ? v14 : v7;
      v16 = v10 + v8;
      if (__OFADD__(v10, v8))
        break;
      if (v7 >= v16)
        v17 = v10 + v8;
      else
        v17 = v7;
      if (v17 < v10)
        goto LABEL_28;
      if (v10 < 0)
        goto LABEL_29;
      v18 = type metadata accessor for __ContiguousArrayStorageBase(0);
      swift_bridgeObjectRetain(v6);
      v20 = swift_unknownObjectRetain_n(v19, 2);
      v21 = (_QWORD *)swift_dynamicCastClass(v20, v18);
      if (!v21)
      {
        swift_bridgeObjectRelease(v6);
        v21 = _swiftEmptyArrayStorage;
      }
      v22 = v21[2];
      swift_release(v21);
      if (v15 + v11 == v22)
      {
        v23 = (_QWORD *)swift_dynamicCastClass(v6, v18);
        if (!v23)
        {
          swift_bridgeObjectRelease(v6);
          v23 = _swiftEmptyArrayStorage;
        }
      }
      else
      {
        swift_bridgeObjectRelease(v6);
        v23 = sub_100024178(v6, v39, v10, (2 * v17) | 1);
      }
      swift_bridgeObjectRelease(v6);
      result = swift_isUniquelyReferenced_nonNull_native(v13);
      if ((result & 1) == 0)
      {
        result = (uint64_t)sub_10005B1A4(0, v13[2] + 1, 1, v13);
        v13 = (_QWORD *)result;
      }
      v25 = v13[2];
      v24 = v13[3];
      if (v25 >= v24 >> 1)
      {
        result = (uint64_t)sub_10005B1A4((_QWORD *)(v24 > 1), v25 + 1, 1, v13);
        v13 = (_QWORD *)result;
      }
      v13[2] = v25 + 1;
      v13[v25 + 4] = v23;
      v7 = v46;
      if (v16 < v46)
      {
        v8 = v45;
        v14 += v45;
        v11 -= v45;
        v10 += v45;
        if (!v25)
          continue;
      }
      goto LABEL_26;
    }
    __break(1u);
LABEL_28:
    __break(1u);
LABEL_29:
    __break(1u);
  }
  else
  {
    v13 = _swiftEmptyArrayStorage;
LABEL_26:
    sub_1000456E0((uint64_t)v13);
    v27 = v26;
    swift_bridgeObjectRelease(v13);
    v47 = v27;
    KeyPath = swift_getKeyPath(&unk_100088998);
    v29 = v43;
    sub_100026C34(v42, v43, type metadata accessor for WidgetViewsForMediumSystemFamily);
    v30 = *(unsigned __int8 *)(v40 + 80);
    v31 = (v30 + 16) & ~v30;
    v32 = swift_allocObject(&unk_10009F7B8, v31 + v41, v30 | 7);
    sub_100026D98(v29, v32 + v31, type metadata accessor for WidgetViewsForMediumSystemFamily);
    v33 = swift_allocObject(&unk_10009F7E0, 32, 7);
    *(_QWORD *)(v33 + 16) = sub_100050718;
    *(_QWORD *)(v33 + 24) = v32;
    v34 = sub_10000527C(&qword_1000A6190);
    v35 = sub_10000527C(&qword_1000A6230);
    v36 = sub_1000229D8(&qword_1000A61A0, &qword_1000A6190, (uint64_t)&protocol conformance descriptor for [A]);
    v37 = sub_10005076C();
    return ForEach<>.init(_:id:content:)(&v47, KeyPath, sub_100053178, v33, v34, v35, v36, &protocol witness table for Int, v37);
  }
  return result;
}

uint64_t sub_100041DC0@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  int *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  char v19;
  uint64_t v20;
  char v21;
  double v22;
  uint64_t v23;
  char v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  double v36;
  uint64_t result;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  double v41;
  double v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  _OWORD *v64;
  __int128 v65;
  _QWORD v66[2];
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  _OWORD v71[3];

  v69 = a3;
  v5 = sub_10000527C(&qword_1000A6248);
  __chkstk_darwin(v5);
  v70 = (uint64_t)v66 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = (int *)type metadata accessor for WidgetViewsForMediumSystemFamily(0);
  v67 = *((_QWORD *)v7 - 1);
  v8 = *(_QWORD *)(v67 + 64);
  v9 = __chkstk_darwin(v7);
  v68 = (uint64_t)v66 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __chkstk_darwin(v9);
  v12 = (char *)v66 - v11;
  v13 = __chkstk_darwin(v10);
  v15 = (char *)v66 - v14;
  v16 = a2 + *(int *)(v13 + 20);
  v17 = *(_QWORD *)v16;
  v18 = *(_BYTE *)(v16 + 8);
  sub_100035568(*(_QWORD *)v16, v18);
  v19 = sub_100061B38(v17, v18);
  sub_10003561C(v17, v18);
  sub_100026C34(a2, (uint64_t)v15, type metadata accessor for WidgetViewsForMediumSystemFamily);
  if ((v19 & 1) != 0)
  {
    if (!v15[v7[8]])
    {
      swift_bridgeObjectRelease(0xE900000000000065);
      sub_100026C78((uint64_t)v15, type metadata accessor for WidgetViewsForMediumSystemFamily);
LABEL_9:
      v22 = (*(double *)(a2 + v7[9]) + -24.0) * 0.5;
      goto LABEL_11;
    }
    if (v15[v7[8]] == 1)
      v20 = 0x536C6C616D73;
    else
      v20 = 0x53656772616CLL;
    v21 = _stringCompareWithSmolCheck(_:_:expecting:)(v20 & 0xFFFFFFFFFFFFLL | 0x7571000000000000, 0xEB00000000657261, 0x6C676E6174636572, 0xE900000000000065, 0);
    swift_bridgeObjectRelease(0xEB00000000657261);
    sub_100026C78((uint64_t)v15, type metadata accessor for WidgetViewsForMediumSystemFamily);
    if ((v21 & 1) != 0)
      goto LABEL_9;
  }
  else
  {
    sub_100026C78((uint64_t)v15, type metadata accessor for WidgetViewsForMediumSystemFamily);
  }
  v22 = *(double *)(a2 + v7[10]);
LABEL_11:
  v23 = *(_QWORD *)v16;
  v24 = *(_BYTE *)(v16 + 8);
  sub_100035568(*(_QWORD *)v16, v24);
  v25 = sub_100061B38(v23, v24);
  sub_10003561C(v23, v24);
  sub_100026C34(a2, (uint64_t)v12, type metadata accessor for WidgetViewsForMediumSystemFamily);
  if ((v25 & 1) != 0)
  {
    v26 = v70;
    v27 = a1;
    if (!v12[v7[8]])
    {
      swift_bridgeObjectRelease(0xE900000000000065);
      v29 = sub_100026C78((uint64_t)v12, type metadata accessor for WidgetViewsForMediumSystemFamily);
LABEL_19:
      v36 = (*(double *)(a2 + v7[9] + 8) + -24.0) * 0.5;
      goto LABEL_21;
    }
    if (v12[v7[8]] == 1)
      v28 = 0x536C6C616D73;
    else
      v28 = 0x53656772616CLL;
    v35 = _stringCompareWithSmolCheck(_:_:expecting:)(v28 & 0xFFFFFFFFFFFFLL | 0x7571000000000000, 0xEB00000000657261, 0x6C676E6174636572, 0xE900000000000065, 0);
    swift_bridgeObjectRelease(0xEB00000000657261);
    v29 = sub_100026C78((uint64_t)v12, type metadata accessor for WidgetViewsForMediumSystemFamily);
    if ((v35 & 1) != 0)
      goto LABEL_19;
  }
  else
  {
    v29 = sub_100026C78((uint64_t)v12, type metadata accessor for WidgetViewsForMediumSystemFamily);
    v26 = v70;
    v27 = a1;
  }
  v36 = *(double *)(a2 + v7[11]);
LABEL_21:
  result = static VerticalAlignment.center.getter(v29, v30, v31, v32, v33, v34);
  *(_QWORD *)v26 = result;
  *(_QWORD *)(v26 + 8) = 0;
  *(_BYTE *)(v26 + 16) = 1;
  v38 = *(_QWORD *)(a2 + v7[7]);
  v39 = *(_QWORD *)(v27 + 16);
  v40 = v38 - v39;
  if (__OFSUB__(v38, v39))
  {
    __break(1u);
  }
  else
  {
    v66[1] = v26 + *(int *)(sub_10000527C(&qword_1000A6250) + 44);
    v41 = v22 * (double)v40;
    v42 = *(double *)(a2 + v7[12]) * (double)v40;
    swift_bridgeObjectRetain(v27);
    v44 = sub_1000453DC(v43);
    swift_bridgeObjectRelease(v27);
    *(_QWORD *)&v71[0] = v44;
    v66[0] = swift_getKeyPath(&unk_100088978);
    v45 = v68;
    sub_100026C34(a2, v68, type metadata accessor for WidgetViewsForMediumSystemFamily);
    v46 = *(unsigned __int8 *)(v67 + 80);
    v47 = v27;
    v48 = (v46 + 32) & ~v46;
    v49 = (v8 + v48 + 7) & 0xFFFFFFFFFFFFFFF8;
    v50 = (v49 + 15) & 0xFFFFFFFFFFFFFFF8;
    v51 = (v50 + 15) & 0xFFFFFFFFFFFFFFF8;
    v52 = swift_allocObject(&unk_10009F808, v51 + 8, v46 | 7);
    *(double *)(v52 + 16) = v22;
    *(double *)(v52 + 24) = v36;
    sub_100026D98(v45, v52 + v48, type metadata accessor for WidgetViewsForMediumSystemFamily);
    *(_QWORD *)(v52 + v49) = v47;
    *(double *)(v52 + v50) = v42;
    *(double *)(v52 + v51) = v41;
    v53 = swift_allocObject(&unk_10009F830, 32, 7);
    *(_QWORD *)(v53 + 16) = sub_1000508DC;
    *(_QWORD *)(v53 + 24) = v52;
    swift_bridgeObjectRetain(v47);
    v54 = sub_10000527C(&qword_1000A6058);
    v55 = sub_10000527C(&qword_1000A6258);
    v56 = sub_1000229D8(&qword_1000A6068, &qword_1000A6058, (uint64_t)&protocol conformance descriptor for [A]);
    v57 = sub_1000229D8(&qword_1000A6260, &qword_1000A6258, (uint64_t)&protocol conformance descriptor for TupleView<A>);
    v58 = ForEach<>.init(_:id:content:)(v71, v66[0], sub_100049600, v53, v54, v55, v56, &protocol witness table for Int, v57);
    v59 = *(_QWORD *)(a2 + v7[9]);
    v60 = static Alignment.center.getter(v58);
    _FrameLayout.init(width:height:alignment:)(v71, v59, 0, *(_QWORD *)&v36, 0, v60, v61);
    v62 = v69;
    v63 = v70;
    sub_100026CB4(v70, v69, &qword_1000A6248);
    v64 = (_OWORD *)(v62 + *(int *)(sub_10000527C(&qword_1000A6230) + 36));
    v65 = v71[1];
    *v64 = v71[0];
    v64[1] = v65;
    v64[2] = v71[2];
    return sub_100014EFC(v63, &qword_1000A6248);
  }
  return result;
}

uint64_t sub_100042378@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>, double a6@<D0>, double a7@<D1>, double a8@<D2>, double a9@<D3>)
{
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  double v35;
  double v36;
  double v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  __int128 v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t *v47;
  uint64_t v48;
  void *v49;
  Swift::String v50;
  unint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  _QWORD *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  BOOL v72;
  int v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  BOOL v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v94;
  unint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  _QWORD v109[2];
  _OWORD v110[3];
  uint64_t v111;
  unint64_t v112;
  uint64_t v113;
  unsigned __int8 v114;
  uint64_t v115;
  uint64_t v116;
  unint64_t v117;
  unint64_t v118;
  uint64_t v119;
  unsigned __int8 v120;
  uint64_t v121;
  uint64_t v122;

  v103 = a4;
  v106 = a1;
  v107 = a5;
  v15 = 0xD000000000000011;
  v101 = type metadata accessor for AccessoryAndSceneEntity(0);
  __chkstk_darwin(v101);
  v17 = (char *)&v94 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = type metadata accessor for TileView(0);
  __chkstk_darwin(v18);
  v20 = (char *)&v94 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = sub_10000527C(&qword_1000A61D8);
  __chkstk_darwin(v21);
  v23 = (char *)&v94 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = sub_10000527C(&qword_1000A61E0);
  __chkstk_darwin(v24);
  v26 = (char *)&v94 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = sub_10000527C(&qword_1000A61E8);
  v28 = __chkstk_darwin(v27);
  v105 = (uint64_t)&v94 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  v30 = __chkstk_darwin(v28);
  v32 = (char *)&v94 - v31;
  __chkstk_darwin(v30);
  v108 = (uint64_t)&v94 - v33;
  v34 = sub_100026C34(a2, (uint64_t)v17, type metadata accessor for AccessoryAndSceneEntity);
  v35 = nullsub_1(v34, a6, a7);
  v37 = v36;
  v102 = type metadata accessor for WidgetViewsForMediumSystemFamily(0);
  v38 = *(int *)(v102 + 32);
  v104 = a3;
  v39 = sub_10006ABC8((uint64_t)v17, *(_BYTE *)(a3 + v38), (uint64_t)v20, v35, v37);
  v40 = static Alignment.center.getter(v39);
  _FrameLayout.init(width:height:alignment:)(v110, *(_QWORD *)&a6, 0, *(_QWORD *)&a7, 0, v40, v41);
  sub_100026C34((uint64_t)v20, (uint64_t)v23, type metadata accessor for TileView);
  v42 = &v23[*(int *)(v21 + 36)];
  v43 = v110[1];
  *(_OWORD *)v42 = v110[0];
  *((_OWORD *)v42 + 1) = v43;
  *((_OWORD *)v42 + 2) = v110[2];
  sub_100026C78((uint64_t)v20, type metadata accessor for TileView);
  sub_100026CB4((uint64_t)v23, (uint64_t)v26, &qword_1000A61D8);
  v44 = &v26[*(int *)(v24 + 52)];
  v45 = type metadata accessor for UUID(0);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v45 - 8) + 16))(v44, a2, v45);
  sub_100014EFC((uint64_t)v23, &qword_1000A61D8);
  v117 = 0;
  v118 = 0xE000000000000000;
  _StringGuts.grow(_:)(44);
  swift_bridgeObjectRelease(v118);
  v117 = 0xD00000000000002ALL;
  v118 = 0x800000010008ADE0;
  v46 = a2 + *(int *)(v101 + 24);
  v47 = (uint64_t *)(v46 + *(int *)(type metadata accessor for WidgetTileInfo(0) + 28));
  v48 = v47[1];
  if (v48)
  {
    v15 = *v47;
    v49 = (void *)v47[1];
  }
  else
  {
    v49 = (void *)0x800000010008AD50;
  }
  swift_bridgeObjectRetain(v48);
  v50._countAndFlagsBits = v15;
  v50._object = v49;
  String.append(_:)(v50);
  swift_bridgeObjectRelease(v49);
  v51 = v118;
  v111 = 32;
  v112 = 0xE100000000000000;
  v109[0] = 0;
  v109[1] = 0xE000000000000000;
  v52 = sub_100005300();
  v53 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(&v111, v109, 0, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v52, v52, v52);
  v55 = v54;
  swift_bridgeObjectRelease(v51);
  v56 = sub_1000229D8(&qword_1000A61F0, &qword_1000A61E0, (uint64_t)&protocol conformance descriptor for IDView<A, B>);
  View.accessibilityIdentifier(_:)(v53, v55, v24, v56);
  swift_bridgeObjectRelease(v55);
  sub_100014EFC((uint64_t)v26, &qword_1000A61E0);
  v57 = (_QWORD *)sub_100052E04((uint64_t)v32, v108, &qword_1000A61E8);
  v58 = 0;
  v59 = 0;
  v60 = 0;
  v61 = 0;
  v62 = 0;
  v63 = 0;
  v64 = 0;
  v65 = *(_QWORD *)(v103 + 16);
  v66 = v106;
  v67 = v104;
  v68 = v102;
  if (v65 - 2 >= v106)
  {
    v69 = *(_QWORD *)(v104 + *(int *)(v102 + 48));
    v70 = static Alignment.center.getter(v57);
    v58 = 1;
    v57 = _FrameLayout.init(width:height:alignment:)(&v111, v69, 0, 0, 1, v70, v71);
    v59 = v111;
    v60 = v112;
    v61 = v113;
    v62 = v114;
    v63 = v115;
    v64 = v116;
  }
  v72 = v65 < *(_QWORD *)(v67 + *(int *)(v68 + 28)) && v65 - 1 == v66;
  v73 = !v72;
  v103 = v58;
  v101 = v59;
  v100 = v60;
  v99 = v61;
  v98 = v62;
  v97 = v63;
  v96 = v64;
  LODWORD(v104) = v73;
  if (v72)
  {
    v79 = static Alignment.center.getter(v57);
    v102 = 1;
    ((void (*)(_QWORD *__return_ptr, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))_FrameLayout.init(width:height:alignment:))(&v117, a8 + a9, 0, 0, 1, v79, v80);
    v95 = v117;
    v74 = v118;
    v75 = v119;
    v76 = v120;
    v77 = v121;
    v78 = v122;
  }
  else
  {
    v102 = 0;
    v95 = 0;
    v74 = 0;
    v75 = 0;
    v76 = 0;
    v77 = 0;
    v78 = 0;
  }
  v81 = v65 - 2 < v66;
  v82 = v108;
  v83 = v105;
  sub_100026CB4(v108, v105, &qword_1000A61E8);
  v84 = v107;
  sub_100026CB4(v83, v107, &qword_1000A61E8);
  v85 = sub_10000527C(&qword_1000A6268);
  v86 = v84 + *(int *)(v85 + 48);
  v87 = v103;
  *(_QWORD *)v86 = 0;
  *(_QWORD *)(v86 + 8) = v87;
  v88 = v100;
  *(_QWORD *)(v86 + 16) = v101;
  *(_QWORD *)(v86 + 24) = v88;
  v89 = v98;
  *(_QWORD *)(v86 + 32) = v99;
  *(_QWORD *)(v86 + 40) = v89;
  v90 = v96;
  *(_QWORD *)(v86 + 48) = v97;
  *(_QWORD *)(v86 + 56) = v90;
  *(_BYTE *)(v86 + 64) = v81;
  v91 = v84 + *(int *)(v85 + 64);
  v92 = v102;
  *(_QWORD *)v91 = 0;
  *(_QWORD *)(v91 + 8) = v92;
  *(_QWORD *)(v91 + 16) = v95;
  *(_QWORD *)(v91 + 24) = v74;
  *(_QWORD *)(v91 + 32) = v75;
  *(_QWORD *)(v91 + 40) = v76;
  *(_QWORD *)(v91 + 48) = v77;
  *(_QWORD *)(v91 + 56) = v78;
  *(_BYTE *)(v91 + 64) = v104;
  sub_100014EFC(v82, &qword_1000A61E8);
  return sub_100014EFC(v83, &qword_1000A61E8);
}

uint64_t sub_100042A54@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _OWORD *v17;
  __int128 v18;
  _OWORD v20[3];

  v4 = v2;
  v6 = sub_10000527C(&qword_1000A6218);
  v7 = __chkstk_darwin(v6);
  v9 = (char *)v20 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)v9 = static HorizontalAlignment.center.getter(v7);
  *((_QWORD *)v9 + 1) = 0;
  v9[16] = 1;
  v10 = sub_10000527C(&qword_1000A6220);
  v11 = sub_100041A64(v4, (uint64_t)&v9[*(int *)(v10 + 44)]);
  v12 = (uint64_t *)(v4 + *(int *)(a1 + 36));
  v13 = *v12;
  v14 = v12[1];
  v15 = static Alignment.center.getter(v11);
  _FrameLayout.init(width:height:alignment:)(v20, v13, 0, v14, 0, v15, v16);
  sub_100026CB4((uint64_t)v9, a2, &qword_1000A6218);
  v17 = (_OWORD *)(a2 + *(int *)(sub_10000527C(&qword_1000A6228) + 36));
  v18 = v20[1];
  *v17 = v20[0];
  v17[1] = v18;
  v17[2] = v20[2];
  return sub_100014EFC((uint64_t)v9, &qword_1000A6218);
}

uint64_t sub_100042B68@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  void *v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t OpaqueTypeConformance2;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  void (*v55)(uint64_t, _QWORD, uint64_t);
  uint64_t v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  char *v79;
  char *v80;
  uint64_t v81;
  char *v82;
  uint64_t v83;
  char *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  char *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  void *v98;
  uint64_t v99;
  unint64_t v100;
  _QWORD v101[4];

  v96 = a4;
  v7 = type metadata accessor for WidgetBackgroundStyle(0);
  v94 = *(_QWORD *)(v7 - 8);
  v95 = v7;
  __chkstk_darwin(v7);
  v93 = (char *)&v75 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for Locale(0);
  __chkstk_darwin(v9);
  v11 = (char *)&v75 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for String.LocalizationValue(0);
  __chkstk_darwin(v12);
  v14 = (char *)&v75 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = sub_10000527C(&qword_1000A4FA0);
  v75 = *(_QWORD *)(v15 - 8);
  __chkstk_darwin(v15);
  v17 = (char *)&v75 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v77 = sub_10000527C(&qword_1000A4F98);
  v78 = *(_QWORD *)(v77 - 8);
  __chkstk_darwin(v77);
  v19 = (char *)&v75 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v81 = sub_10000527C(&qword_1000A4F90);
  v83 = *(_QWORD *)(v81 - 8);
  __chkstk_darwin(v81);
  v76 = (char *)&v75 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = sub_10000527C(&qword_1000A4F88);
  v22 = *(_QWORD *)(v21 - 8);
  v85 = v21;
  v86 = v22;
  __chkstk_darwin(v21);
  v79 = (char *)&v75 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = sub_10000527C(&qword_1000A4F80);
  v25 = *(_QWORD *)(v24 - 8);
  v87 = v24;
  v88 = v25;
  __chkstk_darwin(v24);
  v80 = (char *)&v75 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = sub_10000527C(&qword_1000A4F78);
  v28 = *(_QWORD *)(v27 - 8);
  v89 = v27;
  v90 = v28;
  __chkstk_darwin(v27);
  v82 = (char *)&v75 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  v30 = sub_10000527C(&qword_1000A4FB8);
  v31 = *(_QWORD *)(v30 - 8);
  v91 = v30;
  v92 = v31;
  __chkstk_darwin(v30);
  v84 = (char *)&v75 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  v33 = swift_allocObject(&unk_10009F858, 33, 7);
  *(_QWORD *)(v33 + 16) = a1;
  *(_QWORD *)(v33 + 24) = a2;
  *(_BYTE *)(v33 + 32) = a3;
  swift_bridgeObjectRetain_n(a2, 2);
  sub_10000527C(&qword_1000A6270);
  sub_1000509E8();
  sub_100050B0C();
  AppIntentConfiguration.init<A>(kind:intent:provider:content:)(a1, a2);
  v34 = String.LocalizationValue.init(stringLiteral:)(0xD000000000000022, 0x800000010008AE10);
  static Locale.current.getter(v34);
  v35 = String.init(localized:table:bundle:locale:comment:)(v14, 0xD00000000000001ALL, 0x800000010008A7C0, 0, v11, 0, 0, 256);
  v37 = v36;
  v97 = v35;
  v98 = v36;
  v38 = sub_1000229D8(&qword_1000A4FA8, &qword_1000A4FA0, (uint64_t)&protocol conformance descriptor for AppIntentConfiguration<A, B>);
  v39 = sub_100005300();
  WidgetConfiguration.configurationDisplayName<A>(_:)(&v97, v15, &type metadata for String, v38, v39);
  swift_bridgeObjectRelease(v37);
  (*(void (**)(char *, uint64_t))(v75 + 8))(v17, v15);
  v40 = String.LocalizationValue.init(stringLiteral:)(0xD000000000000029, 0x800000010008AE40);
  static Locale.current.getter(v40);
  v41 = String.init(localized:table:bundle:locale:comment:)(v14, 0xD00000000000001ALL, 0x800000010008A7C0, 0, v11, 0, 0, 256);
  v43 = v42;
  v101[0] = v41;
  v101[1] = v42;
  v97 = v15;
  v98 = &type metadata for String;
  v99 = v38;
  v100 = v39;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v97, &opaque type descriptor for <<opaque return type of WidgetConfiguration.configurationDisplayName<A>(_:)>>, 1);
  v45 = v76;
  v46 = v77;
  WidgetConfiguration.description<A>(_:)(v101, v77, &type metadata for String, OpaqueTypeConformance2, v39);
  swift_bridgeObjectRelease(v43);
  v47 = v46;
  (*(void (**)(char *, uint64_t))(v78 + 8))(v19, v46);
  v48 = sub_10000527C(&qword_1000A62A0);
  v49 = type metadata accessor for WidgetFamily(0);
  v50 = *(_QWORD *)(v49 - 8);
  v51 = *(_QWORD *)(v50 + 72);
  v52 = *(unsigned __int8 *)(v50 + 80);
  v53 = (v52 + 32) & ~v52;
  v54 = swift_allocObject(v48, v53 + 2 * v51, v52 | 7);
  *(_OWORD *)(v54 + 16) = xmmword_100086CA0;
  v55 = *(void (**)(uint64_t, _QWORD, uint64_t))(v50 + 104);
  v55(v54 + v53, enum case for WidgetFamily.systemSmall(_:), v49);
  v55(v54 + v53 + v51, enum case for WidgetFamily.systemMedium(_:), v49);
  v97 = v47;
  v98 = &type metadata for String;
  v99 = OpaqueTypeConformance2;
  v100 = v39;
  v56 = swift_getOpaqueTypeConformance2(&v97, &opaque type descriptor for <<opaque return type of WidgetConfiguration.description<A>(_:)>>, 1);
  v57 = v79;
  v58 = v81;
  WidgetConfiguration.supportedFamilies(_:)(v54, v81, v56);
  swift_bridgeObjectRelease(v54);
  v59 = v58;
  (*(void (**)(char *, uint64_t))(v83 + 8))(v45, v58);
  v60 = v93;
  v61 = v94;
  v62 = v95;
  (*(void (**)(char *, _QWORD, uint64_t))(v94 + 104))(v93, enum case for WidgetBackgroundStyle.blur(_:), v95);
  v97 = v59;
  v98 = (void *)v56;
  v63 = swift_getOpaqueTypeConformance2(&v97, &opaque type descriptor for <<opaque return type of WidgetConfiguration.supportedFamilies(_:)>>, 1);
  v64 = v80;
  v65 = v85;
  WidgetConfiguration.preferredBackgroundStyle(_:)(v60, v85, v63);
  (*(void (**)(char *, uint64_t))(v61 + 8))(v60, v62);
  (*(void (**)(char *, uint64_t))(v86 + 8))(v57, v65);
  v97 = v65;
  v98 = (void *)v63;
  v66 = swift_getOpaqueTypeConformance2(&v97, &opaque type descriptor for <<opaque return type of WidgetConfiguration.preferredBackgroundStyle(_:)>>, 1);
  v67 = v82;
  v68 = v87;
  WidgetConfiguration.supportsVibrantContent(_:)(1, v87, v66);
  (*(void (**)(char *, uint64_t))(v88 + 8))(v64, v68);
  v97 = v68;
  v98 = (void *)v66;
  v69 = swift_getOpaqueTypeConformance2(&v97, &opaque type descriptor for <<opaque return type of WidgetConfiguration.supportsVibrantContent(_:)>>, 1);
  v70 = v84;
  v71 = v89;
  WidgetConfiguration._containerBackgroundRemovable(_:)(1, v89, v69);
  (*(void (**)(char *, uint64_t))(v90 + 8))(v67, v71);
  v97 = v71;
  v98 = (void *)v69;
  v72 = swift_getOpaqueTypeConformance2(&v97, &unk_10008C408, 1);
  v73 = v91;
  WidgetConfiguration._contentMarginsDisabled()(v91, v72);
  return (*(uint64_t (**)(char *, uint64_t))(v92 + 8))(v70, v73);
}

uint64_t sub_1000432E4@<X0>(uint64_t a1@<X0>, char a2@<W3>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  int *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  char v21;
  uint64_t KeyPath;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  void (*v39)(uint64_t, char *, uint64_t);
  uint64_t v40;
  uint64_t v41;
  uint64_t OpaqueTypeConformance2;
  int *v44;
  char v45;
  char v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  int *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  int *v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;

  v66 = a3;
  v63 = sub_10000527C(&qword_1000A62A8);
  __chkstk_darwin(v63);
  v65 = (uint64_t)&v57 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for ContainerBackgroundPlacement(0);
  v60 = *(_QWORD *)(v6 - 8);
  v61 = v6;
  __chkstk_darwin(v6);
  v8 = (char *)&v57 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = (int *)type metadata accessor for HomeInteractiveWidgetsEntryView(0);
  __chkstk_darwin(v9);
  v11 = (char *)&v57 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v64 = sub_10000527C(&qword_1000A62B0);
  v12 = *(_QWORD *)(v64 - 8);
  v13 = __chkstk_darwin(v64);
  v15 = (char *)&v57 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  v62 = (char *)&v57 - v16;
  v17 = type metadata accessor for AccessoriesAndScenesEntry(0);
  v18 = IntentParameter.wrappedValue.getter(v17);
  if ((a2 & 1) != 0)
  {
    v58 = v67;
    IntentParameter.wrappedValue.getter(v18);
    v19 = (char)v67;
    v20 = *(int *)(v17 + 24);
    v59 = v12;
    v21 = *(_BYTE *)(a1 + v20);
    KeyPath = swift_getKeyPath(&unk_100088548);
    v23 = swift_getKeyPath(&unk_1000889B8);
    v24 = swift_getKeyPath(&unk_100088570);
    v25 = (uint64_t *)&v11[v9[6]];
    *v25 = v24;
    v26 = sub_10000527C(&qword_1000A5C00);
    v27 = swift_storeEnumTagMultiPayload(v25, v26, 0);
    *(_QWORD *)v11 = KeyPath;
    v11[8] = 0;
    *((_QWORD *)v11 + 2) = v23;
    *((_QWORD *)v11 + 3) = 0;
    *((_QWORD *)v11 + 4) = 0;
    *((_QWORD *)v11 + 5) = 0;
    v11[48] = 0;
    *(_QWORD *)&v11[v9[7]] = v58;
    v11[v9[8]] = v19;
    v11[v9[9]] = v21;
    v28 = static ContainerBackgroundPlacement.widget.getter(v27);
    v58 = (int *)&v57;
    v29 = __chkstk_darwin(v28);
    v30 = static Alignment.center.getter(v29);
    v32 = v31;
    v33 = sub_10000527C(&qword_1000A6280);
    v34 = sub_100008C7C(&qword_1000A6288, type metadata accessor for HomeInteractiveWidgetsEntryView, (uint64_t)&unk_1000884F8);
    v35 = sub_100050AB0();
    View.containerBackground<A>(for:alignment:content:)(v8, v30, v32, sub_100050BC4, &v57 - 4, v9, v33, v34, v35);
    (*(void (**)(char *, uint64_t))(v60 + 8))(v8, v61);
    sub_100026C78((uint64_t)v11, type metadata accessor for HomeInteractiveWidgetsEntryView);
    v36 = v59;
    v37 = v62;
    v38 = v64;
    (*(void (**)(char *, char *, uint64_t))(v59 + 32))(v62, v15, v64);
    v39 = *(void (**)(uint64_t, char *, uint64_t))(v36 + 16);
    v40 = v36;
    v41 = v65;
    v39(v65, v37, v38);
    swift_storeEnumTagMultiPayload(v41, v63, 0);
    v67 = v9;
    v68 = v33;
    v69 = v34;
    v70 = v35;
    OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v67, &opaque type descriptor for <<opaque return type of View.containerBackground<A>(for:alignment:content:)>>, 1);
    _ConditionalContent<>.init(storage:)(v41, v38, v9, OpaqueTypeConformance2, v34);
    return (*(uint64_t (**)(char *, uint64_t))(v40 + 8))(v37, v38);
  }
  else
  {
    v44 = v67;
    IntentParameter.wrappedValue.getter(v18);
    v45 = (char)v67;
    v46 = *(_BYTE *)(a1 + *(int *)(v17 + 24));
    v47 = swift_getKeyPath(&unk_100088548);
    v48 = swift_getKeyPath(&unk_1000889B8);
    v49 = swift_getKeyPath(&unk_100088570);
    v50 = (uint64_t *)&v11[v9[6]];
    *v50 = v49;
    v51 = sub_10000527C(&qword_1000A5C00);
    swift_storeEnumTagMultiPayload(v50, v51, 0);
    *(_QWORD *)v11 = v47;
    v11[8] = 0;
    *((_QWORD *)v11 + 2) = v48;
    *((_QWORD *)v11 + 3) = 0;
    *((_QWORD *)v11 + 4) = 0;
    *((_QWORD *)v11 + 5) = 0;
    v11[48] = 0;
    *(_QWORD *)&v11[v9[7]] = v44;
    v11[v9[8]] = v45;
    v11[v9[9]] = v46;
    v52 = v65;
    sub_100026C34((uint64_t)v11, v65, type metadata accessor for HomeInteractiveWidgetsEntryView);
    swift_storeEnumTagMultiPayload(v52, v63, 1);
    v53 = sub_1000052BC(&qword_1000A6280);
    v54 = sub_100008C7C(&qword_1000A6288, type metadata accessor for HomeInteractiveWidgetsEntryView, (uint64_t)&unk_1000884F8);
    v55 = sub_100050AB0();
    v67 = v9;
    v68 = v53;
    v69 = v54;
    v70 = v55;
    v56 = swift_getOpaqueTypeConformance2(&v67, &opaque type descriptor for <<opaque return type of View.containerBackground<A>(for:alignment:content:)>>, 1);
    _ConditionalContent<>.init(storage:)(v52, v64, v9, v56, v54);
    return sub_100026C78((uint64_t)v11, type metadata accessor for HomeInteractiveWidgetsEntryView);
  }
}

uint64_t sub_1000437B4@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;

  result = type metadata accessor for AccessoriesAndScenesEntry(0);
  v5 = 0;
  if (!*(_BYTE *)(a1 + *(int *)(result + 24)))
  {
    v6 = static Color.secondary.getter(result);
    v5 = Color.opacity(_:)(0.75);
    result = swift_release(v6);
  }
  *a2 = v5;
  return result;
}

unint64_t sub_100043814@<X0>(uint64_t a1@<X8>)
{
  unint64_t result;
  uint64_t v3;
  char v4;

  result = sub_1000469AC(0);
  *(_QWORD *)a1 = result;
  *(_QWORD *)(a1 + 8) = v3;
  *(_BYTE *)(a1 + 16) = v4 & 1;
  return result;
}

uint64_t sub_100043844@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_100042B68(*(_QWORD *)v1, *(_QWORD *)(v1 + 8), *(_BYTE *)(v1 + 16), a1);
}

uint64_t sub_100043850()
{
  return EnvironmentValues.widgetFamily.getter();
}

Swift::Int sub_100043870(_QWORD *a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  Swift::Int result;
  uint64_t v6[2];

  v2 = *(_QWORD *)(type metadata accessor for AccessoryAndSceneEntity(0) - 8);
  v3 = (_QWORD *)*a1;
  if ((swift_isUniquelyReferenced_nonNull_native(*a1) & 1) == 0)
    v3 = (_QWORD *)sub_100025384(v3);
  v4 = v3[2];
  v6[0] = (uint64_t)v3 + ((*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80));
  v6[1] = v4;
  result = sub_1000438F0(v6);
  *a1 = v3;
  return result;
}

Swift::Int sub_1000438F0(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  Swift::Int v22;
  Swift::Int result;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  Swift::Int v28;
  char *v29;
  uint64_t v30;
  Swift::Int v31;
  Swift::Int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  Swift::Int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t *v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  void (*v56)(char *, uint64_t);
  uint64_t v57;
  uint64_t v58;
  uint64_t *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  unint64_t v72;
  unint64_t v73;
  BOOL v74;
  uint64_t v75;
  int v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  Swift::Int v80;
  Swift::Int v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t v86;
  Swift::Int v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  Swift::Int v91;
  unint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t *v101;
  uint64_t v102;
  unint64_t v103;
  uint64_t v104;
  unint64_t v105;
  uint64_t v106;
  uint64_t v107;
  char *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  void (*v112)(char *, uint64_t);
  uint64_t v113;
  uint64_t v114;
  uint64_t *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  unint64_t v119;
  uint64_t *v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  unint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  char *v129;
  uint64_t v130;
  BOOL v131;
  uint64_t v132;
  char v133;
  unint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  unint64_t v138;
  unint64_t v139;
  unint64_t v140;
  char *v141;
  char *v142;
  Swift::Int v143;
  unint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  char v148;
  char *v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  BOOL v155;
  unint64_t v156;
  char *v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  char *v162;
  uint64_t v163;
  uint64_t v164;
  BOOL v165;
  uint64_t v166;
  char v167;
  char *v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  BOOL v172;
  uint64_t v173;
  uint64_t v174;
  char *v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  char *v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  unint64_t v183;
  char *v184;
  char *v185;
  uint64_t v186;
  char *v187;
  uint64_t v188;
  uint64_t v189;
  unint64_t v190;
  char *v191;
  char *v192;
  uint64_t v193;
  unint64_t v194;
  char *v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  char *v199;
  unint64_t v200;
  _QWORD *v201;
  uint64_t v202;
  _QWORD *v203;
  Swift::Int v204;
  Swift::Int v205;
  char *v206;
  uint64_t v207;
  Swift::Int v208;
  uint64_t v209;
  uint64_t v210;
  unint64_t v211;
  char *v212;
  char *v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t *v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  char *v220;
  uint64_t v221;
  uint64_t v222;
  Swift::Int v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  unint64_t v227;
  uint64_t v228;
  uint64_t v229;
  unint64_t v230;
  unint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;

  v2 = v1;
  v4 = type metadata accessor for DeviceDisplayNames(0);
  v221 = *(_QWORD *)(v4 - 8);
  v222 = v4;
  __chkstk_darwin(v4);
  v220 = (char *)&v202 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v224 = type metadata accessor for AccessoryAndSceneEntity(0);
  v214 = *(_QWORD *)(v224 - 8);
  v6 = __chkstk_darwin(v224);
  v207 = (uint64_t)&v202 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __chkstk_darwin(v6);
  v226 = (uint64_t)&v202 - v9;
  v10 = __chkstk_darwin(v8);
  v235 = (uint64_t)&v202 - v11;
  v12 = __chkstk_darwin(v10);
  v234 = (uint64_t)&v202 - v13;
  v14 = __chkstk_darwin(v12);
  v210 = (uint64_t)&v202 - v15;
  v16 = __chkstk_darwin(v14);
  v209 = (uint64_t)&v202 - v17;
  v18 = __chkstk_darwin(v16);
  v20 = (char *)&v202 - v19;
  __chkstk_darwin(v18);
  v212 = (char *)&v202 - v21;
  v22 = a1[1];
  result = _minimumMergeRunLength(_:)(v22);
  if (result >= v22)
  {
    if (v22 < 0)
      goto LABEL_188;
    if (v22)
      return sub_100044814(0, v22, 1, a1);
  }
  else
  {
    if (v22 >= 0)
      v24 = v22;
    else
      v24 = v22 + 1;
    if (v22 < -1)
    {
LABEL_196:
      result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Can't construct Array with count < 0", 36, 2, "Swift/Array.swift", 17, 2, 936, 0);
      __break(1u);
      return result;
    }
    v204 = result;
    if (v22 >= 2)
    {
      v215 = v1;
      v25 = v24 >> 1;
      v26 = static Array._allocateBufferUninitialized(minimumCapacity:)(v24 >> 1, v224);
      *(_QWORD *)(v26 + 16) = v25;
      v27 = *(unsigned __int8 *)(v214 + 80);
      v203 = (_QWORD *)v26;
      v211 = v26 + ((v27 + 32) & ~v27);
LABEL_13:
      v28 = 0;
      v29 = (char *)_swiftEmptyArrayStorage;
      v213 = v20;
      v30 = (uint64_t)v212;
      v216 = a1;
LABEL_14:
      v31 = v28;
      v32 = v28 + 1;
      v206 = v29;
      v208 = v28;
      if (v28 + 1 < v22)
      {
        v33 = *a1;
        v34 = *(_QWORD *)(v214 + 72);
        v35 = v30;
        sub_100026C34(*a1 + v34 * v32, v30, type metadata accessor for AccessoryAndSceneEntity);
        v217 = v33;
        v233 = v34;
        sub_100026C34(v33 + v34 * v31, (uint64_t)v20, type metadata accessor for AccessoryAndSceneEntity);
        v36 = v215;
        LODWORD(v227) = sub_10003774C(v35, (uint64_t)v20);
        v215 = v36;
        if (v36)
        {
          sub_100026C78((uint64_t)v20, type metadata accessor for AccessoryAndSceneEntity);
          sub_100026C78(v35, type metadata accessor for AccessoryAndSceneEntity);
          v192 = v206;
          goto LABEL_165;
        }
        sub_100026C78((uint64_t)v20, type metadata accessor for AccessoryAndSceneEntity);
        sub_100026C78(v35, type metadata accessor for AccessoryAndSceneEntity);
        if (v31 + 2 >= v22)
        {
          v32 = v31 + 2;
        }
        else
        {
          v37 = v217;
          v218 = v233 * (v31 + 2);
          v219 = v233 * v32;
          v38 = v31 + 2;
          v225 = v22;
          while (1)
          {
            v223 = v38;
            v39 = v209;
            sub_100026C34(v37 + v218, v209, type metadata accessor for AccessoryAndSceneEntity);
            v229 = v37;
            v40 = v210;
            sub_100026C34(v37 + v219, v210, type metadata accessor for AccessoryAndSceneEntity);
            v41 = v224;
            v42 = v39 + *(int *)(v224 + 24);
            v43 = type metadata accessor for WidgetTileInfo(0);
            v44 = *(int *)(v43 + 24);
            v45 = (unint64_t *)(v42 + *(int *)(v43 + 28));
            v46 = *v45;
            v47 = v45[1];
            if (v47)
              v48 = *v45;
            else
              v48 = 0;
            v49 = 0xE000000000000000;
            if (v47)
              v49 = v47;
            v230 = v49;
            v231 = v48;
            v50 = *(_QWORD *)(v42 + v44);
            v51 = *(_QWORD *)(v42 + v44 + 8);
            swift_bridgeObjectRetain_n(v47, 2);
            swift_bridgeObjectRetain(v51);
            v52 = v220;
            v53 = DeviceDisplayNames.init(name:roomName:)(v50, v51, v46, v47);
            v228 = DeviceDisplayNames.displayName.getter(v53);
            v232 = v54;
            v55 = v222;
            v56 = *(void (**)(char *, uint64_t))(v221 + 8);
            v56(v52, v222);
            v57 = v40 + *(int *)(v41 + 24);
            v58 = *(int *)(v43 + 24);
            v59 = (uint64_t *)(v57 + *(int *)(v43 + 28));
            v60 = *v59;
            v61 = v59[1];
            v62 = v61 ? *v59 : 0;
            v63 = v61 ? v59[1] : 0xE000000000000000;
            v64 = (uint64_t *)(v57 + v58);
            v65 = *v64;
            v66 = v64[1];
            swift_bridgeObjectRetain_n(v61, 2);
            swift_bridgeObjectRetain(v66);
            v67 = DeviceDisplayNames.init(name:roomName:)(v65, v66, v60, v61);
            v68 = DeviceDisplayNames.displayName.getter(v67);
            v70 = v69;
            v71 = v52;
            v72 = v230;
            v56(v71, v55);
            v73 = v231;
            v74 = v231 == v62 && v72 == v63;
            if (v74 || (_stringCompareWithSmolCheck(_:_:expecting:)(v231, v72, v62, v63, 0) & 1) != 0)
            {
              v75 = v232;
              if (v228 == v68 && v232 == v70)
              {
                v76 = 0;
                v70 = v232;
              }
              else
              {
                v76 = _stringCompareWithSmolCheck(_:_:expecting:)(v228, v232, v68, v70, 1);
              }
              v32 = v223;
            }
            else
            {
              v76 = _stringCompareWithSmolCheck(_:_:expecting:)(v73, v72, v62, v63, 1);
              v32 = v223;
              v75 = v232;
            }
            swift_bridgeObjectRelease(v63);
            swift_bridgeObjectRelease(v70);
            swift_bridgeObjectRelease(v72);
            swift_bridgeObjectRelease(v75);
            sub_100026C78(v210, type metadata accessor for AccessoryAndSceneEntity);
            sub_100026C78(v209, type metadata accessor for AccessoryAndSceneEntity);
            if (((v227 ^ v76) & 1) != 0)
              break;
            v38 = v32 + 1;
            v37 = v229 + v233;
            v22 = v225;
            if (v225 == v38)
            {
              v32 = v225;
              a1 = v216;
              v20 = v213;
              v31 = v208;
              goto LABEL_45;
            }
          }
          a1 = v216;
          v20 = v213;
          v31 = v208;
          v22 = v225;
        }
LABEL_45:
        v29 = v206;
        if ((v227 & 1) != 0)
        {
          if (v32 < v31)
          {
LABEL_191:
            __break(1u);
LABEL_192:
            __break(1u);
LABEL_193:
            __break(1u);
LABEL_194:
            __break(1u);
LABEL_195:
            __break(1u);
            goto LABEL_196;
          }
          if (v31 < v32)
          {
            v77 = v20;
            v225 = v22;
            v78 = 0;
            v79 = v233 * (v32 - 1);
            v80 = v32 * v233;
            v81 = v31;
            v82 = v31 * v233;
            v223 = v32;
            do
            {
              if (v81 != v32 + v78 - 1)
              {
                v85 = v217;
                if (!v217)
                  goto LABEL_194;
                v86 = v217 + v82;
                v232 = v217 + v79;
                sub_100026D98(v217 + v82, v207, type metadata accessor for AccessoryAndSceneEntity);
                if (v82 < v79 || v86 >= v85 + v80)
                {
                  v83 = v85 + v82;
                  v84 = v232;
                  swift_arrayInitWithTakeFrontToBack(v83, v232, 1, v224);
                }
                else
                {
                  v84 = v232;
                  if (v82 != v79)
                    swift_arrayInitWithTakeBackToFront(v86);
                }
                sub_100026D98(v207, v84, type metadata accessor for AccessoryAndSceneEntity);
                v29 = v206;
                v77 = v213;
                v32 = v223;
                v31 = v208;
              }
              ++v81;
              --v78;
              v79 -= v233;
              v80 -= v233;
              v82 += v233;
            }
            while (v81 < v32 + v78);
            v22 = v225;
            v20 = v77;
          }
        }
      }
      if (v32 >= v22)
        goto LABEL_98;
      if (__OFSUB__(v32, v31))
        goto LABEL_187;
      if (v32 - v31 >= v204)
        goto LABEL_98;
      if (__OFADD__(v31, v204))
        goto LABEL_189;
      if (v31 + v204 >= v22)
        v87 = v22;
      else
        v87 = v31 + v204;
      if (v87 >= v31)
      {
        if (v32 == v87)
          goto LABEL_98;
        v88 = *(_QWORD *)(v214 + 72);
        v89 = v88 * (v32 - 1);
        v217 = v88;
        v90 = v32 * v88;
        v205 = v87;
LABEL_71:
        v92 = 0;
        v223 = v32;
        v218 = v90;
        v219 = v89;
        while (1)
        {
          v93 = *a1;
          v228 = v90 + v92;
          v229 = v31;
          v94 = v90 + v92 + v93;
          v95 = v234;
          sub_100026C34(v94, v234, type metadata accessor for AccessoryAndSceneEntity);
          v230 = v92;
          v227 = v89 + v92;
          v96 = v235;
          sub_100026C34(v89 + v92 + v93, v235, type metadata accessor for AccessoryAndSceneEntity);
          v97 = v224;
          v98 = v95 + *(int *)(v224 + 24);
          v99 = type metadata accessor for WidgetTileInfo(0);
          v100 = *(int *)(v99 + 24);
          v101 = (uint64_t *)(v98 + *(int *)(v99 + 28));
          v102 = *v101;
          v103 = v101[1];
          if (v103)
            v104 = *v101;
          else
            v104 = 0;
          v105 = 0xE000000000000000;
          if (v103)
            v105 = v103;
          v231 = v105;
          v232 = v104;
          v106 = *(_QWORD *)(v98 + v100);
          v107 = *(_QWORD *)(v98 + v100 + 8);
          swift_bridgeObjectRetain_n(v103, 2);
          swift_bridgeObjectRetain(v107);
          v108 = v220;
          v109 = DeviceDisplayNames.init(name:roomName:)(v106, v107, v102, v103);
          v225 = DeviceDisplayNames.displayName.getter(v109);
          v233 = v110;
          v111 = v222;
          v112 = *(void (**)(char *, uint64_t))(v221 + 8);
          v112(v108, v222);
          v113 = v96 + *(int *)(v97 + 24);
          v114 = *(int *)(v99 + 24);
          v115 = (uint64_t *)(v113 + *(int *)(v99 + 28));
          v116 = *v115;
          v117 = v115[1];
          if (v117)
            v118 = *v115;
          else
            v118 = 0;
          if (v117)
            v119 = v115[1];
          else
            v119 = 0xE000000000000000;
          v120 = (uint64_t *)(v113 + v114);
          v122 = *v120;
          v121 = v120[1];
          swift_bridgeObjectRetain_n(v117, 2);
          swift_bridgeObjectRetain(v121);
          v123 = v121;
          v124 = v231;
          v125 = DeviceDisplayNames.init(name:roomName:)(v122, v123, v116, v117);
          v126 = DeviceDisplayNames.displayName.getter(v125);
          v128 = v127;
          v129 = v108;
          v130 = v232;
          v112(v129, v111);
          v131 = v130 == v118 && v124 == v119;
          if (v131 || (_stringCompareWithSmolCheck(_:_:expecting:)(v130, v124, v118, v119, 0) & 1) != 0)
          {
            a1 = v216;
            v132 = v233;
            if (v225 == v126 && v233 == v128)
            {
              swift_bridgeObjectRelease(v124);
              swift_bridgeObjectRelease(v119);
              swift_bridgeObjectRelease_n(v132, 2);
              sub_100026C78(v235, type metadata accessor for AccessoryAndSceneEntity);
              sub_100026C78(v234, type metadata accessor for AccessoryAndSceneEntity);
              v91 = v223;
              v90 = v218;
              v89 = v219;
LABEL_70:
              v32 = v91 + 1;
              v89 += v217;
              v90 += v217;
              v31 = v208;
              if (v32 != v205)
                goto LABEL_71;
              v32 = v205;
              v29 = v206;
              v20 = v213;
LABEL_98:
              if (v32 < v31)
                goto LABEL_183;
              if ((swift_isUniquelyReferenced_nonNull_native(v29) & 1) != 0)
                v29 = v206;
              else
                v29 = sub_100024E84(0, *((_QWORD *)v206 + 2) + 1, 1, v206);
              v139 = *((_QWORD *)v29 + 2);
              v138 = *((_QWORD *)v29 + 3);
              v140 = v139 + 1;
              v30 = (uint64_t)v212;
              v223 = v32;
              if (v139 >= v138 >> 1)
              {
                v191 = sub_100024E84((char *)(v138 > 1), v139 + 1, 1, v29);
                v30 = (uint64_t)v212;
                v29 = v191;
              }
              *((_QWORD *)v29 + 2) = v140;
              v141 = v29 + 32;
              v142 = &v29[16 * v139 + 32];
              v143 = v223;
              *(_QWORD *)v142 = v31;
              *((_QWORD *)v142 + 1) = v143;
              if (v139)
              {
LABEL_104:
                v144 = v140 - 1;
                if (v140 >= 4)
                {
                  v149 = &v141[16 * v140];
                  v150 = *((_QWORD *)v149 - 8);
                  v151 = *((_QWORD *)v149 - 7);
                  v155 = __OFSUB__(v151, v150);
                  v152 = v151 - v150;
                  if (v155)
                    goto LABEL_171;
                  v154 = *((_QWORD *)v149 - 6);
                  v153 = *((_QWORD *)v149 - 5);
                  v155 = __OFSUB__(v153, v154);
                  v147 = v153 - v154;
                  v148 = v155;
                  if (v155)
                    goto LABEL_172;
                  v156 = v140 - 2;
                  v157 = &v141[16 * v140 - 32];
                  v159 = *(_QWORD *)v157;
                  v158 = *((_QWORD *)v157 + 1);
                  v155 = __OFSUB__(v158, v159);
                  v160 = v158 - v159;
                  if (v155)
                    goto LABEL_174;
                  v155 = __OFADD__(v147, v160);
                  v161 = v147 + v160;
                  if (v155)
                    goto LABEL_177;
                  if (v161 >= v152)
                  {
                    v179 = &v141[16 * v144];
                    v181 = *(_QWORD *)v179;
                    v180 = *((_QWORD *)v179 + 1);
                    v155 = __OFSUB__(v180, v181);
                    v182 = v180 - v181;
                    if (v155)
                      goto LABEL_181;
                    v172 = v147 < v182;
                  }
                  else
                  {
LABEL_117:
                    if ((v148 & 1) != 0)
                      goto LABEL_173;
                    v156 = v140 - 2;
                    v162 = &v141[16 * v140 - 32];
                    v164 = *(_QWORD *)v162;
                    v163 = *((_QWORD *)v162 + 1);
                    v165 = __OFSUB__(v163, v164);
                    v166 = v163 - v164;
                    v167 = v165;
                    if (v165)
                      goto LABEL_176;
                    v168 = &v141[16 * v144];
                    v170 = *(_QWORD *)v168;
                    v169 = *((_QWORD *)v168 + 1);
                    v155 = __OFSUB__(v169, v170);
                    v171 = v169 - v170;
                    if (v155)
                      goto LABEL_179;
                    if (__OFADD__(v166, v171))
                      goto LABEL_180;
                    if (v166 + v171 < v147)
                      goto LABEL_129;
                    v172 = v147 < v171;
                  }
                  if (v172)
                    v144 = v156;
                }
                else
                {
                  if (v140 == 3)
                  {
                    v146 = *((_QWORD *)v29 + 4);
                    v145 = *((_QWORD *)v29 + 5);
                    v155 = __OFSUB__(v145, v146);
                    v147 = v145 - v146;
                    v148 = v155;
                    goto LABEL_117;
                  }
                  v173 = *((_QWORD *)v29 + 4);
                  v174 = *((_QWORD *)v29 + 5);
                  v155 = __OFSUB__(v174, v173);
                  v166 = v174 - v173;
                  v167 = v155;
LABEL_129:
                  if ((v167 & 1) != 0)
                    goto LABEL_175;
                  v175 = &v141[16 * v144];
                  v177 = *(_QWORD *)v175;
                  v176 = *((_QWORD *)v175 + 1);
                  v155 = __OFSUB__(v176, v177);
                  v178 = v176 - v177;
                  if (v155)
                    goto LABEL_178;
                  if (v178 < v166)
                    goto LABEL_146;
                }
                v183 = v144 - 1;
                if (v144 - 1 >= v140)
                {
                  __break(1u);
LABEL_168:
                  __break(1u);
LABEL_169:
                  __break(1u);
LABEL_170:
                  __break(1u);
LABEL_171:
                  __break(1u);
LABEL_172:
                  __break(1u);
LABEL_173:
                  __break(1u);
LABEL_174:
                  __break(1u);
LABEL_175:
                  __break(1u);
LABEL_176:
                  __break(1u);
LABEL_177:
                  __break(1u);
LABEL_178:
                  __break(1u);
LABEL_179:
                  __break(1u);
LABEL_180:
                  __break(1u);
LABEL_181:
                  __break(1u);
LABEL_182:
                  __break(1u);
LABEL_183:
                  __break(1u);
LABEL_184:
                  __break(1u);
LABEL_185:
                  __break(1u);
LABEL_186:
                  __break(1u);
LABEL_187:
                  __break(1u);
LABEL_188:
                  __break(1u);
LABEL_189:
                  __break(1u);
                  break;
                }
                if (!*a1)
                  goto LABEL_193;
                v184 = v29;
                v185 = &v141[16 * v183];
                v186 = *(_QWORD *)v185;
                v187 = &v141[16 * v144];
                v188 = *((_QWORD *)v187 + 1);
                v189 = v215;
                sub_100044C8C(*a1 + *(_QWORD *)(v214 + 72) * *(_QWORD *)v185, *a1 + *(_QWORD *)(v214 + 72) * *(_QWORD *)v187, *a1 + *(_QWORD *)(v214 + 72) * v188, v211);
                v215 = v189;
                if (v189)
                {
                  v192 = v184;
                  goto LABEL_165;
                }
                if (v188 < v186)
                  goto LABEL_168;
                if (v144 > *((_QWORD *)v184 + 2))
                  goto LABEL_169;
                *(_QWORD *)v185 = v186;
                *(_QWORD *)&v141[16 * v183 + 8] = v188;
                v190 = *((_QWORD *)v184 + 2);
                if (v144 >= v190)
                  goto LABEL_170;
                v140 = v190 - 1;
                memmove(&v141[16 * v144], v187 + 16, 16 * (v190 - 1 - v144));
                v29 = v184;
                *((_QWORD *)v184 + 2) = v190 - 1;
                v20 = v213;
                v30 = (uint64_t)v212;
                if (v190 <= 2)
                  goto LABEL_146;
                goto LABEL_104;
              }
              v140 = 1;
LABEL_146:
              v22 = a1[1];
              v28 = v223;
              if (v223 >= v22)
              {
                v2 = v215;
                goto LABEL_151;
              }
              goto LABEL_14;
            }
            v133 = _stringCompareWithSmolCheck(_:_:expecting:)(v225, v233, v126, v128, 1);
            v90 = v218;
            v89 = v219;
          }
          else
          {
            v133 = _stringCompareWithSmolCheck(_:_:expecting:)(v130, v124, v118, v119, 1);
            a1 = v216;
            v90 = v218;
            v89 = v219;
            v132 = v233;
          }
          swift_bridgeObjectRelease(v119);
          swift_bridgeObjectRelease(v128);
          swift_bridgeObjectRelease(v124);
          swift_bridgeObjectRelease(v132);
          sub_100026C78(v235, type metadata accessor for AccessoryAndSceneEntity);
          sub_100026C78(v234, type metadata accessor for AccessoryAndSceneEntity);
          v134 = v230;
          if ((v133 & 1) == 0)
          {
            v91 = v223;
            goto LABEL_70;
          }
          v135 = *a1;
          if (!*a1)
            goto LABEL_192;
          v136 = v135 + v90 + v230;
          v137 = v135 + v89 + v230;
          sub_100026D98(v136, v226, type metadata accessor for AccessoryAndSceneEntity);
          swift_arrayInitWithTakeFrontToBack(v136, v137, 1, v224);
          sub_100026D98(v226, v137, type metadata accessor for AccessoryAndSceneEntity);
          v92 = v134 - v217;
          v31 = v229 + 1;
          v91 = v223;
          if (v223 == v229 + 1)
            goto LABEL_70;
        }
      }
      __break(1u);
      goto LABEL_191;
    }
    v211 = (unint64_t)_swiftEmptyArrayStorage
         + ((*(unsigned __int8 *)(v214 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v214 + 80));
    v203 = _swiftEmptyArrayStorage;
    if (v22 == 1)
    {
      v215 = v1;
      goto LABEL_13;
    }
    v140 = _swiftEmptyArrayStorage[2];
    v29 = (char *)_swiftEmptyArrayStorage;
LABEL_151:
    v215 = v2;
    if (v140 >= 2)
    {
      v193 = *a1;
      do
      {
        v194 = v140 - 2;
        if (v140 < 2)
          goto LABEL_182;
        if (!v193)
          goto LABEL_195;
        v195 = v29;
        v196 = *(_QWORD *)&v29[16 * v194 + 32];
        v197 = *(_QWORD *)&v29[16 * v140 + 24];
        v198 = v215;
        sub_100044C8C(v193 + *(_QWORD *)(v214 + 72) * v196, v193 + *(_QWORD *)(v214 + 72) * *(_QWORD *)&v29[16 * v140 + 16], v193 + *(_QWORD *)(v214 + 72) * v197, v211);
        v215 = v198;
        if (v198)
        {
          v192 = v195;
          goto LABEL_165;
        }
        if (v197 < v196)
          goto LABEL_184;
        if ((swift_isUniquelyReferenced_nonNull_native(v195) & 1) == 0)
          v195 = sub_100025144((uint64_t)v195);
        if (v194 >= *((_QWORD *)v195 + 2))
          goto LABEL_185;
        v199 = &v195[16 * v194 + 32];
        *(_QWORD *)v199 = v196;
        *((_QWORD *)v199 + 1) = v197;
        v200 = *((_QWORD *)v195 + 2);
        if (v140 > v200)
          goto LABEL_186;
        memmove(&v195[16 * v140 + 16], &v195[16 * v140 + 32], 16 * (v200 - v140));
        v29 = v195;
        *((_QWORD *)v195 + 2) = v200 - 1;
        v140 = v200 - 1;
      }
      while (v200 > 2);
    }
    v192 = v29;
LABEL_165:
    swift_bridgeObjectRelease(v192);
    v201 = v203;
    v203[2] = 0;
    return swift_bridgeObjectRelease(v201);
  }
  return result;
}

uint64_t sub_100044814(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  _BYTE *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _BYTE *v21;
  uint64_t v22;
  _BYTE *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _BYTE *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void (*v37)(_BYTE *, uint64_t);
  _BYTE *v38;
  uint64_t v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  _BYTE *v56;
  uint64_t v57;
  BOOL v58;
  uint64_t v59;
  char v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  _BYTE v65[16];
  uint64_t v66;
  uint64_t v67;
  _BYTE *v68;
  _BYTE *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  _BYTE *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t *v81;
  uint64_t v82;
  uint64_t v83;
  unint64_t v84;
  uint64_t v85;
  uint64_t v86;
  _BYTE *v87;

  v81 = a4;
  v67 = a1;
  v6 = type metadata accessor for DeviceDisplayNames(0);
  v70 = *(_QWORD *)(v6 - 8);
  v71 = v6;
  __chkstk_darwin(v6);
  v69 = &v65[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v76 = type metadata accessor for AccessoryAndSceneEntity(0);
  v8 = __chkstk_darwin(v76);
  v78 = &v65[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v10 = __chkstk_darwin(v8);
  v87 = &v65[-v11];
  result = __chkstk_darwin(v10);
  v15 = &v65[-v14];
  v75 = a3;
  v66 = a2;
  if (a3 != a2)
  {
    v16 = *(_QWORD *)(v13 + 72);
    v17 = v16 * (v75 - 1);
    v72 = v16;
    v18 = v16 * v75;
    v68 = &v65[-v14];
LABEL_6:
    v19 = 0;
    v82 = v67;
    v73 = v18;
    v74 = v17;
    while (1)
    {
      v20 = *v81;
      v80 = v18 + v19;
      sub_100026C34(v18 + v19 + v20, (uint64_t)v15, type metadata accessor for AccessoryAndSceneEntity);
      v83 = v19;
      v79 = v17 + v19;
      v21 = v87;
      sub_100026C34(v17 + v19 + v20, (uint64_t)v87, type metadata accessor for AccessoryAndSceneEntity);
      v22 = v76;
      v23 = &v15[*(int *)(v76 + 24)];
      v24 = type metadata accessor for WidgetTileInfo(0);
      v25 = *(int *)(v24 + 24);
      v26 = (uint64_t *)&v23[*(int *)(v24 + 28)];
      v27 = *v26;
      v28 = v26[1];
      if (v28)
        v29 = *v26;
      else
        v29 = 0;
      v30 = 0xE000000000000000;
      if (v28)
        v30 = v28;
      v84 = v30;
      v85 = v29;
      v31 = *(_QWORD *)&v23[v25];
      v32 = *(_QWORD *)&v23[v25 + 8];
      swift_bridgeObjectRetain_n(v28, 2);
      swift_bridgeObjectRetain(v32);
      v33 = v69;
      v34 = DeviceDisplayNames.init(name:roomName:)(v31, v32, v27, v28);
      v77 = DeviceDisplayNames.displayName.getter(v34);
      v86 = v35;
      v36 = v71;
      v37 = *(void (**)(_BYTE *, uint64_t))(v70 + 8);
      v37(v33, v71);
      v38 = &v21[*(int *)(v22 + 24)];
      v39 = *(int *)(v24 + 24);
      v40 = (uint64_t *)&v38[*(int *)(v24 + 28)];
      v41 = *v40;
      v42 = v40[1];
      v43 = v42 ? *v40 : 0;
      v44 = v42 ? v40[1] : 0xE000000000000000;
      v45 = (uint64_t *)&v38[v39];
      v47 = *v45;
      v46 = v45[1];
      swift_bridgeObjectRetain_n(v42, 2);
      swift_bridgeObjectRetain(v46);
      v48 = v47;
      v49 = v44;
      v50 = v46;
      v51 = v84;
      v52 = DeviceDisplayNames.init(name:roomName:)(v48, v50, v41, v42);
      v53 = DeviceDisplayNames.displayName.getter(v52);
      v55 = v54;
      v56 = v33;
      v57 = v85;
      v37(v56, v36);
      v58 = v57 == v43 && v51 == v44;
      if (v58 || (_stringCompareWithSmolCheck(_:_:expecting:)(v57, v51, v43, v44, 0) & 1) != 0)
      {
        v18 = v73;
        v17 = v74;
        v59 = v86;
        if (v77 == v53 && v86 == v55)
        {
          swift_bridgeObjectRelease(v51);
          swift_bridgeObjectRelease(v49);
          swift_bridgeObjectRelease_n(v59, 2);
          sub_100026C78((uint64_t)v87, type metadata accessor for AccessoryAndSceneEntity);
          v15 = v68;
          result = sub_100026C78((uint64_t)v68, type metadata accessor for AccessoryAndSceneEntity);
LABEL_5:
          v17 += v72;
          v18 += v72;
          if (++v75 == v66)
            return result;
          goto LABEL_6;
        }
        v60 = _stringCompareWithSmolCheck(_:_:expecting:)(v77, v86, v53, v55, 1);
        v15 = v68;
      }
      else
      {
        v60 = _stringCompareWithSmolCheck(_:_:expecting:)(v57, v51, v43, v44, 1);
        v15 = v68;
        v18 = v73;
        v17 = v74;
        v59 = v86;
      }
      swift_bridgeObjectRelease(v49);
      swift_bridgeObjectRelease(v55);
      swift_bridgeObjectRelease(v51);
      swift_bridgeObjectRelease(v59);
      sub_100026C78((uint64_t)v87, type metadata accessor for AccessoryAndSceneEntity);
      result = sub_100026C78((uint64_t)v15, type metadata accessor for AccessoryAndSceneEntity);
      v61 = v83;
      if ((v60 & 1) == 0)
        goto LABEL_5;
      v62 = *v81;
      if (!*v81)
        break;
      v63 = v62 + v18 + v83;
      v64 = v62 + v17 + v83;
      sub_100026D98(v63, (uint64_t)v78, type metadata accessor for AccessoryAndSceneEntity);
      swift_arrayInitWithTakeFrontToBack(v63, v64, 1, v76);
      result = sub_100026D98((uint64_t)v78, v64, type metadata accessor for AccessoryAndSceneEntity);
      v19 = v61 - v72;
      if (v75 == ++v82)
        goto LABEL_5;
    }
    __break(1u);
  }
  return result;
}

uint64_t sub_100044C8C(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  int64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  BOOL v25;
  char v26;
  char v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  char v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t result;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  unint64_t v49;
  char *v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;

  v5 = v4;
  v52 = type metadata accessor for AccessoryAndSceneEntity(0);
  v10 = __chkstk_darwin(v52);
  v11 = __chkstk_darwin(v10);
  v12 = __chkstk_darwin(v11);
  v14 = (char *)&v46 - v13;
  __chkstk_darwin(v12);
  v18 = (char *)&v46 - v17;
  v53 = *(_QWORD *)(v19 + 72);
  if (!v53)
  {
    __break(1u);
LABEL_68:
    __break(1u);
LABEL_69:
    __break(1u);
    goto LABEL_70;
  }
  if (a2 - a1 == 0x8000000000000000 && v53 == -1)
    goto LABEL_68;
  v20 = a3 - a2;
  if (a3 - a2 == 0x8000000000000000 && v53 == -1)
    goto LABEL_69;
  v21 = (uint64_t)(a2 - a1) / v53;
  v56 = a1;
  v55 = a4;
  v22 = v20 / v53;
  if (v21 >= v20 / v53)
  {
    if ((v22 & 0x8000000000000000) == 0)
    {
      v24 = v22 * v53;
      v18 = v16;
      v50 = (char *)v15;
      if (a4 < a2 || a2 + v24 <= a4)
      {
        swift_arrayInitWithTakeFrontToBack(a4, a2, v22, v52);
      }
      else if (a4 != a2)
      {
        swift_arrayInitWithTakeBackToFront(a4);
      }
      v31 = a4 + v24;
      v54 = a4 + v24;
      v56 = a2;
      if (v24 < 1 || a1 >= a2)
        goto LABEL_65;
      v47 = a1;
      v33 = -v53;
      v48 = -v53;
      v49 = a4;
      while (1)
      {
        sub_100026C34(v31 + v33, (uint64_t)v18, type metadata accessor for AccessoryAndSceneEntity);
        v34 = a2;
        v35 = a2 + v33;
        v36 = a2 + v33;
        v37 = v33;
        v14 = v50;
        sub_100026C34(v36, (uint64_t)v50, type metadata accessor for AccessoryAndSceneEntity);
        v38 = sub_10003774C((uint64_t)v18, (uint64_t)v14);
        if (v5)
          goto LABEL_64;
        v39 = v38;
        v53 = 0;
        v51 = a3 + v37;
        sub_100026C78((uint64_t)v14, type metadata accessor for AccessoryAndSceneEntity);
        sub_100026C78((uint64_t)v18, type metadata accessor for AccessoryAndSceneEntity);
        if ((v39 & 1) != 0)
        {
          v40 = a3;
          v25 = a3 >= v34;
          a3 = v51;
          if (v25 && v51 < v34)
          {
            v41 = v49;
            if (v40 != v34)
              swift_arrayInitWithTakeBackToFront(v51);
          }
          else
          {
            swift_arrayInitWithTakeFrontToBack(v51, v35, 1, v52);
            v41 = v49;
          }
          v33 = v48;
          v56 += v48;
        }
        else
        {
          v42 = v54;
          v43 = v54 + v37;
          v54 += v37;
          v44 = a3;
          v25 = a3 >= v42;
          a3 = v51;
          if (v25 && v51 < v42)
          {
            v41 = v49;
            if (v44 != v42)
              swift_arrayInitWithTakeBackToFront(v51);
            v35 = v34;
            v33 = v48;
          }
          else
          {
            swift_arrayInitWithTakeFrontToBack(v51, v43, 1, v52);
            v35 = v34;
            v33 = v48;
            v41 = v49;
          }
        }
        v31 = v54;
        if (v54 > v41)
        {
          a2 = v35;
          v5 = v53;
          if (v35 > v47)
            continue;
        }
        goto LABEL_65;
      }
    }
  }
  else if ((v21 & 0x8000000000000000) == 0)
  {
    v23 = v21 * v53;
    if (a4 < a1 || a1 + v23 <= a4)
    {
      swift_arrayInitWithTakeFrontToBack(a4, a1, v21, v52);
    }
    else if (a4 != a1)
    {
      swift_arrayInitWithTakeBackToFront(a4);
    }
    v51 = a4 + v23;
    v54 = a4 + v23;
    v25 = v23 < 1 || a2 >= a3;
    if (v25)
      goto LABEL_65;
    while (1)
    {
      sub_100026C34(a2, (uint64_t)v18, type metadata accessor for AccessoryAndSceneEntity);
      sub_100026C34(a4, (uint64_t)v14, type metadata accessor for AccessoryAndSceneEntity);
      v26 = sub_10003774C((uint64_t)v18, (uint64_t)v14);
      if (v4)
        break;
      v27 = v26;
      sub_100026C78((uint64_t)v14, type metadata accessor for AccessoryAndSceneEntity);
      sub_100026C78((uint64_t)v18, type metadata accessor for AccessoryAndSceneEntity);
      v28 = v56;
      if ((v27 & 1) != 0)
      {
        v29 = a2 + v53;
        if (v56 < a2 || v56 >= v29)
        {
          swift_arrayInitWithTakeFrontToBack(v56, a2, 1, v52);
        }
        else if (v56 == a2)
        {
          v28 = a2;
        }
        else
        {
          swift_arrayInitWithTakeBackToFront(v56);
        }
      }
      else
      {
        v30 = v55 + v53;
        if (v56 < v55 || v56 >= v30)
        {
          swift_arrayInitWithTakeFrontToBack(v56, v55, 1, v52);
        }
        else if (v56 != v55)
        {
          swift_arrayInitWithTakeBackToFront(v56);
        }
        v55 = v30;
        v29 = a2;
      }
      v56 = v28 + v53;
      a4 = v55;
      if (v55 < v51)
      {
        a2 = v29;
        if (v29 < a3)
          continue;
      }
      goto LABEL_65;
    }
LABEL_64:
    sub_100026C78((uint64_t)v14, type metadata accessor for AccessoryAndSceneEntity);
    sub_100026C78((uint64_t)v18, type metadata accessor for AccessoryAndSceneEntity);
LABEL_65:
    sub_100025038(&v56, &v55, (uint64_t *)&v54);
    return 1;
  }
LABEL_70:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, 2, 1046, 0);
  __break(1u);
  return result;
}

unint64_t sub_100045208(unint64_t result, uint64_t a2)
{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  Swift::Int v12;
  unint64_t v13;
  uint64_t v14;
  _OWORD *v15;
  _OWORD *v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;
  _QWORD v26[9];

  v3 = result;
  v4 = a2 + 64;
  v5 = -1 << *(_BYTE *)(a2 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    result = _HashTable.previousHole(before:)(result, a2 + 64, ~v5);
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v8 = (result + 1) & v7;
      do
      {
        v9 = (uint64_t *)(*(_QWORD *)(a2 + 48) + 16 * v6);
        v10 = *v9;
        v11 = v9[1];
        Hasher.init(_seed:)(v26, *(_QWORD *)(a2 + 40));
        swift_bridgeObjectRetain(v11);
        String.hash(into:)(v26, v10, v11);
        v12 = Hasher._finalize()();
        result = swift_bridgeObjectRelease(v11);
        v13 = v12 & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v13 < v8)
            goto LABEL_5;
        }
        else if (v13 >= v8)
        {
          goto LABEL_11;
        }
        if (v3 >= (uint64_t)v13)
        {
LABEL_11:
          v14 = *(_QWORD *)(a2 + 48);
          v15 = (_OWORD *)(v14 + 16 * v3);
          v16 = (_OWORD *)(v14 + 16 * v6);
          if (v3 != v6 || v15 >= v16 + 1)
            *v15 = *v16;
          v17 = *(_QWORD *)(a2 + 56);
          v18 = (_QWORD *)(v17 + 8 * v3);
          v19 = (_QWORD *)(v17 + 8 * v6);
          if (v3 != v6 || (v3 = v6, v18 >= v19 + 1))
          {
            *v18 = *v19;
            v3 = v6;
          }
        }
LABEL_5:
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    v20 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    v21 = *v20;
    v22 = (-1 << v3) - 1;
  }
  else
  {
    v20 = (uint64_t *)(v4 + 8 * (result >> 6));
    v22 = *v20;
    v21 = (-1 << result) - 1;
  }
  *v20 = v22 & v21;
  v23 = *(_QWORD *)(a2 + 16);
  v24 = __OFSUB__(v23, 1);
  v25 = v23 - 1;
  if (v24)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v25;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

uint64_t sub_1000453DC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t result;
  unint64_t v24;
  uint64_t v25;
  int64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v39;
  BOOL v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;

  v53 = sub_10000527C(&qword_1000A6080);
  v2 = *(_QWORD *)(v53 - 8);
  v3 = __chkstk_darwin(v53);
  v51 = (char *)&v44 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __chkstk_darwin(v3);
  v50 = (uint64_t *)((char *)&v44 - v6);
  __chkstk_darwin(v5);
  v8 = (char *)&v44 - v7;
  v9 = *(unsigned __int8 *)(v2 + 80);
  v10 = *(_QWORD *)(a1 + 16);
  swift_bridgeObjectRetain(a1);
  v11 = _swiftEmptyArrayStorage;
  v49 = v10;
  v45 = a1;
  if (v10)
  {
    v47 = (v9 + 32) & ~v9;
    v12 = (char *)_swiftEmptyArrayStorage + v47;
    v13 = 0;
    v14 = 0;
    v15 = *(_QWORD *)(type metadata accessor for AccessoryAndSceneEntity(0) - 8);
    v16 = a1 + ((*(unsigned __int8 *)(v15 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80));
    v48 = *(_QWORD *)(v15 + 72);
    v46 = v9 | 7;
    v17 = _swiftEmptyArrayStorage;
    v52 = v2;
    while (1)
    {
      v18 = v53;
      v19 = (uint64_t)&v51[*(int *)(v53 + 48)];
      sub_100026C34(v16, v19, type metadata accessor for AccessoryAndSceneEntity);
      v20 = *(int *)(v18 + 48);
      v21 = (uint64_t)v50;
      v22 = (uint64_t)v50 + v20;
      *v50 = v13;
      sub_100026D98(v19, v22, type metadata accessor for AccessoryAndSceneEntity);
      result = sub_100052E04(v21, (uint64_t)v8, &qword_1000A6080);
      if (v14)
      {
        v11 = v17;
      }
      else
      {
        v24 = v17[3];
        v25 = v52;
        if ((uint64_t)((v24 >> 1) + 0x4000000000000000) < 0)
          goto LABEL_34;
        v26 = v24 & 0xFFFFFFFFFFFFFFFELL;
        if (v26 <= 1)
          v27 = 1;
        else
          v27 = v26;
        v28 = sub_10000527C(&qword_1000A6170);
        v29 = *(_QWORD *)(v25 + 72);
        v30 = v47;
        v11 = (_QWORD *)swift_allocObject(v28, v47 + v29 * v27, v46);
        result = j__malloc_size(v11);
        if (!v29)
          goto LABEL_35;
        v31 = result - v30;
        if (result - v30 == 0x8000000000000000 && v29 == -1)
          goto LABEL_36;
        v33 = v53;
        v34 = v31 / v29;
        v11[2] = v27;
        v11[3] = 2 * (v31 / v29);
        v35 = (char *)v11 + v30;
        v36 = v17[3] >> 1;
        v37 = v36 * v29;
        if (v17[2])
        {
          if (v11 < v17 || v35 >= (char *)v17 + v47 + v37)
          {
            swift_arrayInitWithTakeFrontToBack(v35, (char *)v17 + v47, v36, v33);
          }
          else if (v11 != v17)
          {
            swift_arrayInitWithTakeBackToFront(v35);
          }
          v17[2] = 0;
        }
        v12 = &v35[v37];
        v14 = (v34 & 0x7FFFFFFFFFFFFFFFLL) - v36;
        result = swift_release(v17);
      }
      v39 = v52;
      v40 = __OFSUB__(v14--, 1);
      if (v40)
        break;
      ++v13;
      sub_100052E04((uint64_t)v8, (uint64_t)v12, &qword_1000A6080);
      v12 += *(_QWORD *)(v39 + 72);
      v16 += v48;
      v17 = v11;
      if (v49 == v13)
        goto LABEL_29;
    }
    __break(1u);
LABEL_34:
    __break(1u);
LABEL_35:
    __break(1u);
LABEL_36:
    __break(1u);
    goto LABEL_37;
  }
  v14 = 0;
LABEL_29:
  result = swift_bridgeObjectRelease(v45);
  v41 = v11[3];
  if (v41 < 2)
    return (uint64_t)v11;
  v42 = v41 >> 1;
  v40 = __OFSUB__(v42, v14);
  v43 = v42 - v14;
  if (!v40)
  {
    v11[2] = v43;
    return (uint64_t)v11;
  }
LABEL_37:
  __break(1u);
  return result;
}

void sub_1000456E0(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  unint64_t v10;
  int64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  int64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = _swiftEmptyArrayStorage;
  if (v1)
  {
    swift_bridgeObjectRetain(a1);
    v4 = 0;
    v5 = 0;
    v6 = &_swiftEmptyArrayStorage[4];
    while (1)
    {
      v7 = a1 + 8 * v5;
      v8 = *(_QWORD *)(v7 + 32);
      if (v4)
      {
        swift_bridgeObjectRetain(*(_QWORD *)(v7 + 32));
        v9 = __OFSUB__(v4--, 1);
        if (v9)
          goto LABEL_30;
      }
      else
      {
        v10 = v2[3];
        if ((uint64_t)((v10 >> 1) + 0x4000000000000000) < 0)
          goto LABEL_31;
        v11 = v10 & 0xFFFFFFFFFFFFFFFELL;
        if (v11 <= 1)
          v12 = 1;
        else
          v12 = v11;
        v13 = sub_10000527C(&qword_1000A6210);
        v14 = (_QWORD *)swift_allocObject(v13, 16 * v12 + 32, 7);
        v15 = j__malloc_size(v14);
        v16 = v15 - 32;
        if (v15 < 32)
          v16 = v15 - 17;
        v17 = v16 >> 4;
        v14[2] = v12;
        v14[3] = 2 * (v16 >> 4);
        v18 = v14 + 4;
        v19 = v2[3] >> 1;
        v6 = &v14[2 * v19 + 4];
        v20 = (v17 & 0x7FFFFFFFFFFFFFFFLL) - v19;
        if (v2[2])
        {
          if (v14 != v2 || v18 >= &v2[2 * v19 + 4])
            memmove(v18, v2 + 4, 16 * v19);
          swift_bridgeObjectRetain(v8);
          v2[2] = 0;
        }
        else
        {
          swift_bridgeObjectRetain(v8);
        }
        swift_release(v2);
        v2 = v14;
        v9 = __OFSUB__(v20, 1);
        v4 = v20 - 1;
        if (v9)
        {
LABEL_30:
          __break(1u);
LABEL_31:
          __break(1u);
LABEL_32:
          __break(1u);
          return;
        }
      }
      *v6 = v5;
      v6[1] = v8;
      v6 += 2;
      if (v1 == ++v5)
      {
        swift_bridgeObjectRelease(a1);
        goto LABEL_26;
      }
    }
  }
  v4 = 0;
LABEL_26:
  v22 = v2[3];
  if (v22 >= 2)
  {
    v23 = v22 >> 1;
    v9 = __OFSUB__(v23, v4);
    v24 = v23 - v4;
    if (v9)
      goto LABEL_32;
    v2[2] = v24;
  }
}

void sub_10004586C(uint64_t a1, void (*a2)(char *, uint64_t, __n128))
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  int64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __n128 v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;
  uint64_t v21;
  uint64_t v22;
  int64_t v23;

  v4 = sub_10000527C(&qword_1000A64C8);
  __chkstk_darwin(v4);
  v6 = (char *)&v21 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *(_QWORD *)(a1 + 64);
  v22 = a1 + 64;
  v8 = 1 << *(_BYTE *)(a1 + 32);
  v9 = -1;
  if (v8 < 64)
    v9 = ~(-1 << v8);
  v10 = v9 & v7;
  v23 = (unint64_t)(v8 + 63) >> 6;
  swift_bridgeObjectRetain(a1);
  v11 = 0;
  while (1)
  {
    if (v10)
    {
      v12 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v13 = v12 | (v11 << 6);
      goto LABEL_5;
    }
    v18 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v18 >= v23)
      goto LABEL_23;
    v19 = *(_QWORD *)(v22 + 8 * v18);
    ++v11;
    if (!v19)
    {
      v11 = v18 + 1;
      if (v18 + 1 >= v23)
        goto LABEL_23;
      v19 = *(_QWORD *)(v22 + 8 * v11);
      if (!v19)
      {
        v11 = v18 + 2;
        if (v18 + 2 >= v23)
          goto LABEL_23;
        v19 = *(_QWORD *)(v22 + 8 * v11);
        if (!v19)
        {
          v11 = v18 + 3;
          if (v18 + 3 >= v23)
            goto LABEL_23;
          v19 = *(_QWORD *)(v22 + 8 * v11);
          if (!v19)
            break;
        }
      }
    }
LABEL_22:
    v10 = (v19 - 1) & v19;
    v13 = __clz(__rbit64(v19)) + (v11 << 6);
LABEL_5:
    v14 = *(_QWORD *)(a1 + 48);
    v15 = type metadata accessor for UUID(0);
    (*(void (**)(char *, unint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 16))(v6, v14 + *(_QWORD *)(*(_QWORD *)(v15 - 8) + 72) * v13, v15);
    v16 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8 * v13);
    *(_QWORD *)&v6[*(int *)(v4 + 48)] = v16;
    v17 = swift_bridgeObjectRetain(v16);
    a2(v6, v16, v17);
    sub_100014EFC((uint64_t)v6, &qword_1000A64C8);
  }
  v20 = v18 + 4;
  if (v20 >= v23)
  {
LABEL_23:
    swift_release(a1);
    return;
  }
  v19 = *(_QWORD *)(v22 + 8 * v20);
  if (v19)
  {
    v11 = v20;
    goto LABEL_22;
  }
  while (1)
  {
    v11 = v20 + 1;
    if (__OFADD__(v20, 1))
      break;
    if (v11 >= v23)
      goto LABEL_23;
    v19 = *(_QWORD *)(v22 + 8 * v11);
    ++v20;
    if (v19)
      goto LABEL_22;
  }
LABEL_25:
  __break(1u);
}

_QWORD *sub_100045AA0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __n128 v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  _QWORD *v35;
  void (*v36)(char *, uint64_t, uint64_t, uint64_t, __n128);
  __n128 v37;
  _QWORD v39[2];
  uint64_t v40;
  char *v41;
  void (*v42)(char *, uint64_t, uint64_t, uint64_t, __n128);
  void (*v43)(char *, uint64_t, uint64_t, __n128);
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  _QWORD *v50;
  uint64_t v51;
  uint64_t v52;

  v5 = sub_10000527C(&qword_1000A5560);
  __chkstk_darwin(v5);
  v7 = (char *)v39 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v48 = type metadata accessor for AccessoryAndSceneEntity(0);
  v52 = *(_QWORD *)(v48 - 8);
  v8 = __chkstk_darwin(v48);
  v47 = (uint64_t)v39 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __chkstk_darwin(v8);
  v12 = (char *)v39 - v11;
  __chkstk_darwin(v10);
  v40 = (uint64_t)v39 - v13;
  v14 = type metadata accessor for UUID(0);
  v15 = *(_QWORD *)(v14 - 8);
  __chkstk_darwin(v14);
  v17 = (char *)v39 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = sub_10000527C(&qword_1000A5060);
  __chkstk_darwin(v18);
  v49 = (char *)v39 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v46 = *(_QWORD *)(a1 + 16);
  if (v46)
  {
    v39[0] = a1;
    v39[1] = v2;
    v45 = a1 + ((*(unsigned __int8 *)(v15 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80));
    v20 = *(_QWORD *)(v15 + 72);
    v43 = *(void (**)(char *, uint64_t, uint64_t, __n128))(v15 + 16);
    v44 = v20;
    v21 = swift_bridgeObjectRetain(a1);
    v22 = 0;
    v50 = _swiftEmptyArrayStorage;
    v23 = v49;
    v41 = v7;
    v51 = v15;
    do
    {
      v43(v23, v45 + v44 * v22, v14, v21);
      v42 = *(void (**)(char *, uint64_t, uint64_t, uint64_t, __n128))(v15 + 56);
      ((void (*)(char *, _QWORD, uint64_t, uint64_t))v42)(v23, 0, 1, v14);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v23, 1, v14) == 1)
      {
        a1 = v39[0];
        goto LABEL_22;
      }
      (*(void (**)(char *, char *, uint64_t))(v15 + 32))(v17, v23, v14);
      v24 = *(_QWORD *)(a2 + 16);
      if (v24)
      {
        v25 = v52;
        v26 = a2 + ((*(unsigned __int8 *)(v52 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v52 + 80));
        v27 = a2;
        swift_bridgeObjectRetain(a2);
        v28 = *(_QWORD *)(v25 + 72);
        while (1)
        {
          sub_100026C34(v26, (uint64_t)v12, type metadata accessor for AccessoryAndSceneEntity);
          if ((static UUID.== infix(_:_:)(v12, v17) & 1) != 0)
            break;
          sub_100026C78((uint64_t)v12, type metadata accessor for AccessoryAndSceneEntity);
          v26 += v28;
          if (!--v24)
          {
            a2 = v27;
            swift_bridgeObjectRelease(v27);
            v29 = 1;
            v7 = v41;
            goto LABEL_13;
          }
        }
        a2 = v27;
        swift_bridgeObjectRelease(v27);
        v7 = v41;
        sub_100026D98((uint64_t)v12, (uint64_t)v41, type metadata accessor for AccessoryAndSceneEntity);
        v29 = 0;
      }
      else
      {
        v29 = 1;
      }
LABEL_13:
      v30 = v52;
      v31 = v48;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v52 + 56))(v7, v29, 1, v48);
      (*(void (**)(char *, uint64_t))(v51 + 8))(v17, v14);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v30 + 48))(v7, 1, v31) == 1)
      {
        sub_100014EFC((uint64_t)v7, &qword_1000A5560);
      }
      else
      {
        v32 = v40;
        sub_100026D98((uint64_t)v7, v40, type metadata accessor for AccessoryAndSceneEntity);
        sub_100026D98(v32, v47, type metadata accessor for AccessoryAndSceneEntity);
        if ((swift_isUniquelyReferenced_nonNull_native(v50) & 1) == 0)
          v50 = (_QWORD *)sub_10005AC44(0, v50[2] + 1, 1, (unint64_t)v50);
        v34 = v50[2];
        v33 = v50[3];
        if (v34 >= v33 >> 1)
          v50 = (_QWORD *)sub_10005AC44(v33 > 1, v34 + 1, 1, (unint64_t)v50);
        v35 = v50;
        v50[2] = v34 + 1;
        sub_100026D98(v47, (uint64_t)v35+ ((*(unsigned __int8 *)(v52 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v52 + 80))+ *(_QWORD *)(v52 + 72) * v34, type metadata accessor for AccessoryAndSceneEntity);
      }
      ++v22;
      v15 = v51;
      v23 = v49;
    }
    while (v22 != v46);
    a1 = v39[0];
    v42(v49, 1, 1, v14, v21);
  }
  else
  {
    v36 = *(void (**)(char *, uint64_t, uint64_t, uint64_t, __n128))(v15 + 56);
    v37 = swift_bridgeObjectRetain(a1);
    v50 = _swiftEmptyArrayStorage;
    v36(v49, 1, 1, v14, v37);
  }
LABEL_22:
  swift_bridgeObjectRelease(a1);
  return v50;
}

void sub_100045EFC(uint64_t a1, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  id v25;
  int64_t v26;
  unint64_t v27;
  uint64_t v28;
  id v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  id v33;
  unint64_t v34;
  char v35;
  id v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  _QWORD v41[2];
  char *v42;
  uint64_t v43;
  int64_t v44;
  uint64_t v45;
  uint64_t v46;
  id v47;
  uint64_t v48;
  void *v49;
  _QWORD v50[5];
  unint64_t v51;

  v47 = a2;
  v3 = type metadata accessor for UUID(0);
  v46 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v5 = (char *)v41 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v51 = (unint64_t)_swiftEmptyArrayStorage;
  if ((a1 & 0xC000000000000001) != 0)
  {
    if (a1 < 0)
      v6 = a1;
    else
      v6 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v7 = __CocoaSet.makeIterator()(v6);
    v8 = sub_100008CBC(0, &qword_1000A5030, HMAccessory_ptr);
    v9 = sub_100053074();
    v10 = Set.Iterator.init(_cocoa:)(v50, v7, v8, v9);
    a1 = v50[0];
    v45 = v50[1];
    v11 = v50[2];
    v12 = v50[3];
    v13 = v50[4];
  }
  else
  {
    v14 = -1 << *(_BYTE *)(a1 + 32);
    v15 = *(_QWORD *)(a1 + 56);
    v45 = a1 + 56;
    v16 = ~v14;
    v17 = -v14;
    if (v17 < 64)
      v18 = ~(-1 << v17);
    else
      v18 = -1;
    v13 = v18 & v15;
    v10 = (_QWORD *)swift_bridgeObjectRetain(a1);
    v11 = v16;
    v12 = 0;
  }
  v41[1] = v11;
  v43 = a1 & 0x7FFFFFFFFFFFFFFFLL;
  v44 = (unint64_t)(v11 + 64) >> 6;
  v42 = (char *)&type metadata for Swift.AnyObject + 8;
  while (a1 < 0)
  {
    v22 = __CocoaSet.Iterator.next()(v10);
    if (!v22)
      goto LABEL_41;
    v23 = v22;
    v48 = v22;
    v24 = sub_100008CBC(0, &qword_1000A5030, HMAccessory_ptr);
    swift_unknownObjectRetain(v23);
    swift_dynamicCast(&v49, &v48, v42, v24, 7);
    v25 = v49;
    swift_unknownObjectRelease(v23);
    v21 = v12;
    v19 = v13;
    if (!v25)
      goto LABEL_41;
LABEL_36:
    v29 = objc_msgSend(v47, "reachabilityByAccessoryUniqueIdentifier");
    v30 = sub_100008CBC(0, (unint64_t *)&qword_1000A5210, NSNumber_ptr);
    v31 = sub_100008C7C((unint64_t *)&qword_1000A5020, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v32 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v29, v3, v30, v31);

    v33 = objc_msgSend(v25, "uniqueIdentifier");
    static UUID._unconditionallyBridgeFromObjectiveC(_:)(v33);

    if (*(_QWORD *)(v32 + 16) && (v34 = sub_10001A558((uint64_t)v5), (v35 & 1) != 0))
    {
      v36 = *(id *)(*(_QWORD *)(v32 + 56) + 8 * v34);
      swift_bridgeObjectRelease(v32);
      (*(void (**)(char *, uint64_t))(v46 + 8))(v5, v3);

      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v37);
      v39 = *(_QWORD *)((v51 & 0xFFFFFFFFFFFFFF8) + 0x10);
      v38 = *(_QWORD *)((v51 & 0xFFFFFFFFFFFFFF8) + 0x18);
      if (v39 >= v38 >> 1)
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v38 > 1, v39 + 1, 1);
      v40 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v39, v36);
      v10 = (_QWORD *)specialized Array._endMutation()(v40);
    }
    else
    {
      swift_bridgeObjectRelease(v32);
      (*(void (**)(char *, uint64_t))(v46 + 8))(v5, v3);

    }
    v12 = v21;
    v13 = v19;
  }
  if (v13)
  {
    v19 = (v13 - 1) & v13;
    v20 = __clz(__rbit64(v13)) | (v12 << 6);
    v21 = v12;
LABEL_35:
    v25 = *(id *)(*(_QWORD *)(a1 + 48) + 8 * v20);
    if (!v25)
      goto LABEL_41;
    goto LABEL_36;
  }
  v26 = v12 + 1;
  if (!__OFADD__(v12, 1))
  {
    if (v26 >= v44)
      goto LABEL_41;
    v27 = *(_QWORD *)(v45 + 8 * v26);
    v21 = v12 + 1;
    if (!v27)
    {
      v21 = v12 + 2;
      if (v12 + 2 >= v44)
        goto LABEL_41;
      v27 = *(_QWORD *)(v45 + 8 * v21);
      if (!v27)
      {
        v21 = v12 + 3;
        if (v12 + 3 >= v44)
          goto LABEL_41;
        v27 = *(_QWORD *)(v45 + 8 * v21);
        if (!v27)
        {
          v21 = v12 + 4;
          if (v12 + 4 >= v44)
            goto LABEL_41;
          v27 = *(_QWORD *)(v45 + 8 * v21);
          if (!v27)
          {
            v21 = v12 + 5;
            if (v12 + 5 >= v44)
              goto LABEL_41;
            v27 = *(_QWORD *)(v45 + 8 * v21);
            if (!v27)
            {
              v28 = v12 + 6;
              while (v44 != v28)
              {
                v27 = *(_QWORD *)(v45 + 8 * v28++);
                if (v27)
                {
                  v21 = v28 - 1;
                  goto LABEL_34;
                }
              }
LABEL_41:
              sub_100014DC4(a1);
              return;
            }
          }
        }
      }
    }
LABEL_34:
    v19 = (v27 - 1) & v27;
    v20 = __clz(__rbit64(v27)) + (v21 << 6);
    goto LABEL_35;
  }
  __break(1u);
}

void *sub_10004634C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  void *v20;
  id v21;
  uint64_t v22;
  char *v23;
  id v24;
  uint64_t v25;
  uint64_t (*v26)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  unsigned int (*v35)(uint64_t, uint64_t, uint64_t);
  char *v36;
  uint64_t v37;
  char v38;
  void (*v39)(char *, uint64_t);
  char *v40;
  uint64_t v41;
  _QWORD v43[2];
  char *v44;
  uint64_t *v45;
  void *v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  void *v55;
  id v56;

  v3 = v2;
  v52 = a2;
  v5 = type metadata accessor for UUID(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v44 = (char *)v43 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v51 = sub_10000527C(&qword_1000A5090);
  __chkstk_darwin(v51);
  v9 = (char *)v43 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_10000527C(&qword_1000A54B8);
  __chkstk_darwin(v10);
  v50 = (char *)v43 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_10000527C(&qword_1000A5060);
  v13 = __chkstk_darwin(v12);
  v15 = (_QWORD *)((char *)v43 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  v16 = __chkstk_darwin(v13);
  v18 = (char *)v43 - v17;
  __chkstk_darwin(v16);
  v53 = (uint64_t)v43 - v19;
  if ((unint64_t)a1 >> 62)
    goto LABEL_22;
  v20 = *(void **)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain(a1);
  while (v20)
  {
    v43[1] = v3;
    v48 = v5;
    v49 = a1 & 0xC000000000000001;
    v5 = 4;
    v46 = v20;
    v47 = a1;
    v45 = v15;
    v54 = v18;
    while (1)
    {
      v3 = v5 - 4;
      if (!v49)
        break;
      v21 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v5 - 4, a1);
      v22 = v5 - 3;
      if (__OFADD__(v3, 1))
        goto LABEL_21;
LABEL_12:
      v55 = (void *)v22;
      v23 = v9;
      v56 = v21;
      v24 = objc_msgSend(v21, "uniqueIdentifier");
      v25 = v53;
      static UUID._unconditionallyBridgeFromObjectiveC(_:)(v24);

      v26 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v6 + 56);
      v27 = 1;
      v28 = v48;
      v29 = v26(v25, 0, 1, v48);
      v30 = (uint64_t)v50;
      IntentParameter.wrappedValue.getter(v29);
      v31 = type metadata accessor for HomeEntity(0);
      if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v31 - 8) + 48))(v30, 1, v31))
      {
        (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v54, v30, v28);
        v27 = 0;
      }
      sub_100014EFC(v30, &qword_1000A54B8);
      v32 = v54;
      v26((uint64_t)v54, v27, 1, v28);
      v18 = v32;
      v9 = v23;
      v33 = (uint64_t)&v23[*(int *)(v51 + 48)];
      v34 = (uint64_t)v23;
      v15 = &qword_1000A5060;
      sub_100026CB4(v25, v34, &qword_1000A5060);
      sub_100026CB4((uint64_t)v18, v33, &qword_1000A5060);
      v35 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48);
      if (v35((uint64_t)v9, 1, v28) == 1)
      {
        sub_100014EFC((uint64_t)v18, &qword_1000A5060);
        sub_100014EFC(v25, &qword_1000A5060);
        if (v35(v33, 1, v28) == 1)
        {
          sub_100014EFC((uint64_t)v9, &qword_1000A5060);
          a1 = v47;
          v20 = v56;
          goto LABEL_26;
        }
      }
      else
      {
        v15 = v45;
        sub_100026CB4((uint64_t)v9, (uint64_t)v45, &qword_1000A5060);
        if (v35(v33, 1, v28) != 1)
        {
          v36 = v44;
          (*(void (**)(char *, uint64_t, uint64_t))(v6 + 32))(v44, v33, v28);
          v37 = sub_100008C7C((unint64_t *)&unk_1000A7670, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
          v38 = dispatch thunk of static Equatable.== infix(_:_:)(v15, v36, v28, v37);
          v39 = *(void (**)(char *, uint64_t))(v6 + 8);
          v40 = v36;
          v18 = v54;
          v39(v40, v28);
          sub_100014EFC((uint64_t)v18, &qword_1000A5060);
          sub_100014EFC(v53, &qword_1000A5060);
          v39((char *)v15, v28);
          sub_100014EFC((uint64_t)v9, &qword_1000A5060);
          a1 = v47;
          v20 = v56;
          if ((v38 & 1) != 0)
            goto LABEL_26;
          goto LABEL_6;
        }
        sub_100014EFC((uint64_t)v18, &qword_1000A5060);
        sub_100014EFC(v53, &qword_1000A5060);
        (*(void (**)(uint64_t *, uint64_t))(v6 + 8))(v15, v28);
      }
      sub_100014EFC((uint64_t)v9, &qword_1000A5090);
      a1 = v47;
      v20 = v56;
LABEL_6:

      ++v5;
      if (v55 == v46)
      {
        swift_bridgeObjectRelease(a1);
        return 0;
      }
    }
    v21 = *(id *)(a1 + 8 * v5);
    v22 = v5 - 3;
    if (!__OFADD__(v3, 1))
      goto LABEL_12;
LABEL_21:
    __break(1u);
LABEL_22:
    if (a1 < 0)
      v41 = a1;
    else
      v41 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v20 = (void *)_CocoaArrayWrapper.endIndex.getter(v41);
  }
LABEL_26:
  swift_bridgeObjectRelease(a1);
  return v20;
}

_QWORD *sub_100046824(unint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  id v8;
  unint64_t v9;
  id v10;
  char v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;
  id v23;
  _QWORD *v24;

  v3 = a1;
  v24 = _swiftEmptyArrayStorage;
  if (a1 >> 62)
    goto LABEL_16;
  v4 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (v4)
  {
    while (1)
    {
      v5 = 0;
      v6 = v3 & 0xC000000000000001;
      v7 = v3 & 0xFFFFFFFFFFFFFF8;
      v22 = v3 & 0xFFFFFFFFFFFFFF8;
      while (v6)
      {
        v8 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v5, v3);
        v9 = v5 + 1;
        if (__OFADD__(v5, 1))
        {
LABEL_13:
          __break(1u);
          return v24;
        }
LABEL_9:
        v10 = v8;
        v11 = sub_100006B64((Swift::Int *)&v23, v10);

        if ((v11 & 1) != 0)
        {
          specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v12);
          v13 = v6;
          v14 = v4;
          v15 = v3;
          v16 = a2;
          v17 = v24[2];
          specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v17);
          v18 = v17;
          a2 = v16;
          v3 = v15;
          v4 = v14;
          v6 = v13;
          v7 = v22;
          v19 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v18, v10);
          specialized ContiguousArray._endMutation()(v19);
        }
        else
        {

        }
        ++v5;
        if (v9 == v4)
          return v24;
      }
      if (v5 < *(_QWORD *)(v7 + 16))
        break;
      __break(1u);
LABEL_16:
      if (v3 < 0)
        v21 = v3;
      else
        v21 = v3 & 0xFFFFFFFFFFFFFF8;
      v4 = _CocoaArrayWrapper.endIndex.getter(v21);
      if (!v4)
        return _swiftEmptyArrayStorage;
    }
    v8 = *(id *)(v3 + 8 * v5 + 32);
    v9 = v5 + 1;
    if (__OFADD__(v5, 1))
      goto LABEL_13;
    goto LABEL_9;
  }
  return _swiftEmptyArrayStorage;
}

unint64_t sub_1000469AC(int a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  void *object;
  NSString v19;
  id v20;
  NSString v21;
  NSString v22;
  id v23;
  void (*v24)(char *, char *, uint64_t);
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  void (*v28)(char *, uint64_t);
  _DWORD v30[7];
  char v31;

  v2 = sub_10000527C(&qword_1000A5318);
  __chkstk_darwin(v2);
  v4 = (char *)v30 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for URL(0);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = __chkstk_darwin(v5);
  v9 = (char *)v30 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __chkstk_darwin(v7);
  v12 = (char *)v30 - v11;
  __chkstk_darwin(v10);
  v14 = (char *)v30 - v13;
  if (qword_1000A4E78 != -1)
    swift_once(&qword_1000A4E78, sub_10001D9E8);
  v15 = qword_1000A5348;
  v16 = swift_retain(qword_1000A5348);
  AppStorage.wrappedValue.getter(v16, &type metadata for Bool);
  swift_release(v15);
  if (v31 == 1)
  {
    sub_10001DA80((uint64_t)v14);
    v17 = objc_msgSend((id)objc_opt_self(NSFileManager), "defaultManager");
    object = URL.path(percentEncoded:)(1)._object;
    v19 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(object);
    LOBYTE(object) = objc_msgSend(v17, "fileExistsAtPath:", v19);

    if ((object & 1) == 0)
    {
      v30[3] = a1;
      v20 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
      v21 = String._bridgeToObjectiveC()();
      v22 = String._bridgeToObjectiveC()();
      v23 = objc_msgSend(v20, "URLForResource:withExtension:", v21, v22);

      if (v23)
      {
        static URL._unconditionallyBridgeFromObjectiveC(_:)(v23);

        v24 = *(void (**)(char *, char *, uint64_t))(v6 + 32);
        v24(v4, v9, v5);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v6 + 56))(v4, 0, 1, v5);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5) != 1)
        {
          v24(v12, v4, v5);
          v25 = Data.init(contentsOf:options:)(v12, 0);
          v27 = v26;
          Data.write(to:options:)(v14, 1, v25, v26);
          sub_10002A8EC(v25, v27);
          v28 = *(void (**)(char *, uint64_t))(v6 + 8);
          v28(v12, v5);
          v28(v14, v5);
          return 0xD000000000000021;
        }
      }
      else
      {
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v6 + 56))(v4, 1, 1, v5);
      }
      (*(void (**)(char *, uint64_t))(v6 + 8))(v14, v5);
      sub_100014EFC((uint64_t)v4, &qword_1000A5318);
      return 0xD000000000000021;
    }
    (*(void (**)(char *, uint64_t))(v6 + 8))(v14, v5);
  }
  return 0xD000000000000021;
}

uint64_t sub_100046D6C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;

  v1 = type metadata accessor for HomeInteractiveWidgetsEntryView(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  v6 = v0 + v4;
  sub_10003561C(*(_QWORD *)(v0 + v4), *(_BYTE *)(v0 + v4 + 8));
  sub_100035628(*(_QWORD *)(v6 + 16), *(_QWORD *)(v6 + 24), *(_QWORD *)(v6 + 32), *(_QWORD *)(v6 + 40), *(_BYTE *)(v6 + 48));
  v7 = (_QWORD *)(v0 + v4 + *(int *)(v1 + 24));
  v8 = sub_10000527C(&qword_1000A5C00);
  if (swift_getEnumCaseMultiPayload(v7, v8) == 1)
  {
    v9 = type metadata accessor for WidgetFamily(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v9 - 8) + 8))(v7, v9);
  }
  else
  {
    swift_release(*v7);
  }
  swift_bridgeObjectRelease(*(_QWORD *)(v6 + *(int *)(v1 + 28)));
  return swift_deallocObject(v0, v4 + v5, v3 | 7);
}

void sub_100046E4C(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;

  v5 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for HomeInteractiveWidgetsEntryView(0) - 8) + 80);
  sub_10003B198(a1, v2 + ((v5 + 16) & ~v5), a2);
}

uint64_t sub_100046E98(uint64_t a1, void (*a2)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))
{
  a2(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(unsigned __int8 *)(a1 + 32));
  return a1;
}

uint64_t type metadata accessor for WidgetViewsForMediumSystemFamily(uint64_t a1)
{
  return sub_100050B64(a1, qword_1000A5E30, (uint64_t)&nominal type descriptor for WidgetViewsForMediumSystemFamily);
}

uint64_t type metadata accessor for WidgetViewForLargeSquareTiles(uint64_t a1)
{
  return sub_100050B64(a1, (uint64_t *)&unk_1000A5EE8, (uint64_t)&nominal type descriptor for WidgetViewForLargeSquareTiles);
}

unint64_t sub_100046EF8()
{
  unint64_t result;

  result = qword_1000A5D20;
  if (!qword_1000A5D20)
  {
    result = swift_getWitnessTable(&unk_1000888C4, &type metadata for WidgetErrorView);
    atomic_store(result, (unint64_t *)&qword_1000A5D20);
  }
  return result;
}

uint64_t sub_100046F3C()
{
  return sub_100047268(&qword_1000A5D30, &qword_1000A5D28, (void (*)(void))sub_100046EF8);
}

uint64_t sub_100046F58()
{
  return sub_1000505EC(&qword_1000A5D38, &qword_1000A5CE0, (void (*)(void))sub_100046F74);
}

unint64_t sub_100046F74()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000A5D40;
  if (!qword_1000A5D40)
  {
    v1 = sub_1000052BC(&qword_1000A5D48);
    sub_100008C7C(&qword_1000A5D50, type metadata accessor for WidgetViewForLargeSquareTiles, (uint64_t)&unk_100088874);
    sub_100046FF8();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000A5D40);
  }
  return result;
}

unint64_t sub_100046FF8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000A5D58;
  if (!qword_1000A5D58)
  {
    v1 = sub_1000052BC(&qword_1000A5CC8);
    sub_10004707C();
    sub_100008C7C(&qword_1000A5D68, type metadata accessor for WidgetViewsForMediumSystemFamily, (uint64_t)&unk_1000887D4);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000A5D58);
  }
  return result;
}

unint64_t sub_10004707C()
{
  unint64_t result;

  result = qword_1000A5D60;
  if (!qword_1000A5D60)
  {
    result = swift_getWitnessTable(&unk_100088824, &type metadata for WidgetViewsForSmallSystemFamily);
    atomic_store(result, (unint64_t *)&qword_1000A5D60);
  }
  return result;
}

unint64_t sub_1000470C0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000A5D80;
  if (!qword_1000A5D80)
  {
    v1 = sub_1000052BC(&qword_1000A5D78);
    sub_100046EF8();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000A5D80);
  }
  return result;
}

unint64_t sub_10004712C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000A5D88;
  if (!qword_1000A5D88)
  {
    v1 = sub_1000052BC(&qword_1000A5CF0);
    sub_1000471D4(&qword_1000A5D90, &qword_1000A5D70, (void (*)(void))sub_100046F3C, (void (*)(void))sub_100046F58);
    result = swift_getWitnessTable(&protocol conformance descriptor for <A> A?, v1);
    atomic_store(result, (unint64_t *)&qword_1000A5D88);
  }
  return result;
}

uint64_t sub_1000471B0()
{
  return sub_1000471D4(&qword_1000A5DA0, &qword_1000A5D98, (void (*)(void))sub_100046EF8, (void (*)(void))sub_1000470C0);
}

uint64_t sub_1000471D4(unint64_t *a1, uint64_t *a2, void (*a3)(void), void (*a4)(void))
{
  uint64_t result;
  uint64_t v8;

  result = *a1;
  if (!result)
  {
    v8 = sub_1000052BC(a2);
    a3();
    a4();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v8);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100047244()
{
  return sub_1000471D4(&qword_1000A5DA8, &qword_1000A5D00, (void (*)(void))sub_1000470C0, (void (*)(void))sub_10004712C);
}

uint64_t sub_100047268(unint64_t *a1, uint64_t *a2, void (*a3)(void))
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    v6 = sub_1000052BC(a2);
    a3();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v6);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1000472D0()
{
  return EnvironmentValues.widgetFamily.getter();
}

unint64_t sub_100047300()
{
  unint64_t result;

  result = qword_1000A5DD0;
  if (!qword_1000A5DD0)
  {
    result = swift_getWitnessTable(&unk_100087B5C, &type metadata for HomeKitFeatures);
    atomic_store(result, (unint64_t *)&qword_1000A5DD0);
  }
  return result;
}

uint64_t destroy for HomeInteractiveWidgets(uint64_t a1)
{
  return swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
}

uint64_t _s10HomeWidget22HomeInteractiveWidgetsVwCP_0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  swift_bridgeObjectRetain(v3);
  return a1;
}

uint64_t assignWithCopy for HomeInteractiveWidgets(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  return a1;
}

__n128 initializeWithTake for HomeInteractiveWidgets(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  a1[1].n128_u8[0] = a2[1].n128_u8[0];
  *a1 = result;
  return result;
}

uint64_t assignWithTake for HomeInteractiveWidgets(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease(v5);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  return a1;
}

uint64_t getEnumTagSinglePayload for HomeInteractiveWidgets(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 17))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for HomeInteractiveWidgets(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_BYTE *)(result + 16) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 17) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 17) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for HomeInteractiveWidgets()
{
  return &type metadata for HomeInteractiveWidgets;
}

_QWORD *sub_1000474C0(_QWORD *a1, _QWORD *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v12 = *a2;
    *a1 = *a2;
    a1 = (_QWORD *)(v12 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v12);
  }
  else
  {
    v7 = sub_10000527C(&qword_1000A5C00);
    if (swift_getEnumCaseMultiPayload(a2, v7) == 1)
    {
      v8 = type metadata accessor for WidgetFamily(0);
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(a1, a2, v8);
      v9 = a1;
      v10 = v7;
      v11 = 1;
    }
    else
    {
      v13 = *a2;
      *a1 = *a2;
      swift_retain(v13);
      v9 = a1;
      v10 = v7;
      v11 = 0;
    }
    swift_storeEnumTagMultiPayload(v9, v10, v11);
    v14 = a3[5];
    v15 = (char *)a1 + v14;
    v16 = (char *)a2 + v14;
    v17 = *(_QWORD *)v16;
    v18 = v16[8];
    sub_100035568(*(_QWORD *)v16, v18);
    *(_QWORD *)v15 = v17;
    v15[8] = v18;
    v19 = a3[6];
    v20 = a3[7];
    v21 = *(_QWORD *)((char *)a2 + v19);
    *(_QWORD *)((char *)a1 + v19) = v21;
    *(_QWORD *)((char *)a1 + v20) = *(_QWORD *)((char *)a2 + v20);
    v22 = a3[9];
    *((_BYTE *)a1 + a3[8]) = *((_BYTE *)a2 + a3[8]);
    *(_OWORD *)((char *)a1 + v22) = *(_OWORD *)((char *)a2 + v22);
    v23 = a3[11];
    *(_QWORD *)((char *)a1 + a3[10]) = *(_QWORD *)((char *)a2 + a3[10]);
    *(_QWORD *)((char *)a1 + v23) = *(_QWORD *)((char *)a2 + v23);
    *(_QWORD *)((char *)a1 + a3[12]) = *(_QWORD *)((char *)a2 + a3[12]);
    swift_bridgeObjectRetain(v21);
  }
  return a1;
}

uint64_t sub_100047608(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = sub_10000527C(&qword_1000A5C00);
  if (swift_getEnumCaseMultiPayload(a1, v4) == 1)
  {
    v5 = type metadata accessor for WidgetFamily(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(a1, v5);
  }
  else
  {
    swift_release(*a1);
  }
  sub_10003561C(*(_QWORD *)((char *)a1 + *(int *)(a2 + 20)), *((_BYTE *)a1 + *(int *)(a2 + 20) + 8));
  return swift_bridgeObjectRelease(*(_QWORD *)((char *)a1 + *(int *)(a2 + 24)));
}

_QWORD *sub_10004768C(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v6 = sub_10000527C(&qword_1000A5C00);
  if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
  {
    v7 = type metadata accessor for WidgetFamily(0);
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = a1;
    v9 = v6;
    v10 = 1;
  }
  else
  {
    v11 = *a2;
    *a1 = *a2;
    swift_retain(v11);
    v8 = a1;
    v9 = v6;
    v10 = 0;
  }
  swift_storeEnumTagMultiPayload(v8, v9, v10);
  v12 = a3[5];
  v13 = (char *)a1 + v12;
  v14 = (char *)a2 + v12;
  v15 = *(_QWORD *)v14;
  v16 = v14[8];
  sub_100035568(*(_QWORD *)v14, v16);
  *(_QWORD *)v13 = v15;
  v13[8] = v16;
  v17 = a3[6];
  v18 = a3[7];
  v19 = *(_QWORD *)((char *)a2 + v17);
  *(_QWORD *)((char *)a1 + v17) = v19;
  *(_QWORD *)((char *)a1 + v18) = *(_QWORD *)((char *)a2 + v18);
  v20 = a3[9];
  *((_BYTE *)a1 + a3[8]) = *((_BYTE *)a2 + a3[8]);
  *(_OWORD *)((char *)a1 + v20) = *(_OWORD *)((char *)a2 + v20);
  v21 = a3[11];
  *(_QWORD *)((char *)a1 + a3[10]) = *(_QWORD *)((char *)a2 + a3[10]);
  *(_QWORD *)((char *)a1 + v21) = *(_QWORD *)((char *)a2 + v21);
  *(_QWORD *)((char *)a1 + a3[12]) = *(_QWORD *)((char *)a2 + a3[12]);
  swift_bridgeObjectRetain(v19);
  return a1;
}

_QWORD *sub_1000477A8(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;

  if (a1 != a2)
  {
    sub_100014EFC((uint64_t)a1, &qword_1000A5C00);
    v6 = sub_10000527C(&qword_1000A5C00);
    if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
    {
      v7 = type metadata accessor for WidgetFamily(0);
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
      v8 = a1;
      v9 = v6;
      v10 = 1;
    }
    else
    {
      v11 = *a2;
      *a1 = *a2;
      swift_retain(v11);
      v8 = a1;
      v9 = v6;
      v10 = 0;
    }
    swift_storeEnumTagMultiPayload(v8, v9, v10);
  }
  v12 = a3[5];
  v13 = (char *)a1 + v12;
  v14 = (char *)a2 + v12;
  v15 = *(_QWORD *)v14;
  v16 = v14[8];
  sub_100035568(*(_QWORD *)v14, v16);
  v17 = *(_QWORD *)v13;
  v18 = v13[8];
  *(_QWORD *)v13 = v15;
  v13[8] = v16;
  sub_10003561C(v17, v18);
  v19 = a3[6];
  v20 = *(_QWORD *)((char *)a2 + v19);
  v21 = *(_QWORD *)((char *)a1 + v19);
  *(_QWORD *)((char *)a1 + v19) = v20;
  swift_bridgeObjectRetain(v20);
  swift_bridgeObjectRelease(v21);
  *(_QWORD *)((char *)a1 + a3[7]) = *(_QWORD *)((char *)a2 + a3[7]);
  *((_BYTE *)a1 + a3[8]) = *((_BYTE *)a2 + a3[8]);
  v22 = a3[9];
  v23 = (_QWORD *)((char *)a1 + v22);
  v24 = (_QWORD *)((char *)a2 + v22);
  *v23 = *v24;
  v23[1] = v24[1];
  *(_QWORD *)((char *)a1 + a3[10]) = *(_QWORD *)((char *)a2 + a3[10]);
  *(_QWORD *)((char *)a1 + a3[11]) = *(_QWORD *)((char *)a2 + a3[11]);
  *(_QWORD *)((char *)a1 + a3[12]) = *(_QWORD *)((char *)a2 + a3[12]);
  return a1;
}

char *sub_100047910(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v6 = sub_10000527C(&qword_1000A5C00);
  if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
  {
    v7 = type metadata accessor for WidgetFamily(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a1, a2, v7);
    swift_storeEnumTagMultiPayload(a1, v6, 1);
  }
  else
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
  }
  v8 = a3[5];
  v9 = a3[6];
  v10 = &a1[v8];
  v11 = &a2[v8];
  *(_QWORD *)v10 = *(_QWORD *)v11;
  v10[8] = v11[8];
  *(_QWORD *)&a1[v9] = *(_QWORD *)&a2[v9];
  v12 = a3[8];
  *(_QWORD *)&a1[a3[7]] = *(_QWORD *)&a2[a3[7]];
  a1[v12] = a2[v12];
  v13 = a3[10];
  *(_OWORD *)&a1[a3[9]] = *(_OWORD *)&a2[a3[9]];
  *(_QWORD *)&a1[v13] = *(_QWORD *)&a2[v13];
  v14 = a3[12];
  *(_QWORD *)&a1[a3[11]] = *(_QWORD *)&a2[a3[11]];
  *(_QWORD *)&a1[v14] = *(_QWORD *)&a2[v14];
  return a1;
}

char *sub_100047A0C(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  if (a1 != a2)
  {
    sub_100014EFC((uint64_t)a1, &qword_1000A5C00);
    v6 = sub_10000527C(&qword_1000A5C00);
    if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
    {
      v7 = type metadata accessor for WidgetFamily(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a1, a2, v7);
      swift_storeEnumTagMultiPayload(a1, v6, 1);
    }
    else
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
    }
  }
  v8 = a3[5];
  v9 = &a1[v8];
  v10 = &a2[v8];
  v11 = *(_QWORD *)v10;
  LOBYTE(v10) = v10[8];
  v12 = *(_QWORD *)v9;
  v13 = v9[8];
  *(_QWORD *)v9 = v11;
  v9[8] = (char)v10;
  sub_10003561C(v12, v13);
  v14 = a3[6];
  v15 = *(_QWORD *)&a1[v14];
  *(_QWORD *)&a1[v14] = *(_QWORD *)&a2[v14];
  swift_bridgeObjectRelease(v15);
  v16 = a3[8];
  *(_QWORD *)&a1[a3[7]] = *(_QWORD *)&a2[a3[7]];
  a1[v16] = a2[v16];
  v17 = a3[10];
  *(_OWORD *)&a1[a3[9]] = *(_OWORD *)&a2[a3[9]];
  *(_QWORD *)&a1[v17] = *(_QWORD *)&a2[v17];
  v18 = a3[12];
  *(_QWORD *)&a1[a3[11]] = *(_QWORD *)&a2[a3[11]];
  *(_QWORD *)&a1[v18] = *(_QWORD *)&a2[v18];
  return a1;
}

uint64_t sub_100047B38(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100047B44);
}

uint64_t sub_100047B44(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;

  v6 = sub_10000527C(&qword_1000A5C08);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 24));
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  return (v9 + 1);
}

uint64_t sub_100047BC4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100047BD0);
}

uint64_t sub_100047BD0(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = sub_10000527C(&qword_1000A5C08);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 24)) = (a2 - 1);
  return result;
}

void sub_100047C4C(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[9];

  sub_100048D10(319, (unint64_t *)&unk_1000A5C78, (uint64_t (*)(uint64_t))&type metadata accessor for WidgetFamily);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(v2 - 8) + 64;
    v4[1] = "\t";
    v4[2] = (char *)&value witness table for Builtin.BridgeObject + 64;
    v4[3] = (char *)&value witness table for Builtin.Int64 + 64;
    v4[4] = &unk_100088648;
    v4[5] = &unk_100088660;
    v4[6] = (char *)&value witness table for Builtin.Int64 + 64;
    v4[7] = (char *)&value witness table for Builtin.Int64 + 64;
    v4[8] = (char *)&value witness table for Builtin.Int64 + 64;
    swift_initStructMetadata(a1, 256, 9, v4, a1 + 16);
  }
}

uint64_t initializeBufferWithCopyOfBuffer for WidgetViewsForSmallSystemFamily(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *a2;
  *a1 = *a2;
  v3 = v2 + 16;
  swift_retain(v2);
  return v3;
}

uint64_t destroy for WidgetViewsForSmallSystemFamily(uint64_t a1)
{
  sub_10003561C(*(_QWORD *)a1, *(_BYTE *)(a1 + 8));
  return swift_bridgeObjectRelease(*(_QWORD *)(a1 + 16));
}

uint64_t initializeWithCopy for WidgetViewsForSmallSystemFamily(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;

  v4 = *(_QWORD *)a2;
  v5 = *(_BYTE *)(a2 + 8);
  sub_100035568(*(_QWORD *)a2, v5);
  *(_QWORD *)a1 = v4;
  *(_BYTE *)(a1 + 8) = v5;
  v6 = *(_QWORD *)(a2 + 16);
  v7 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = v6;
  *(_QWORD *)(a1 + 24) = v7;
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  swift_bridgeObjectRetain(v6);
  return a1;
}

uint64_t assignWithCopy for WidgetViewsForSmallSystemFamily(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  char v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;

  v4 = *(_QWORD *)a2;
  v5 = *(_BYTE *)(a2 + 8);
  sub_100035568(*(_QWORD *)a2, v5);
  v6 = *(_QWORD *)a1;
  v7 = *(_BYTE *)(a1 + 8);
  *(_QWORD *)a1 = v4;
  *(_BYTE *)(a1 + 8) = v5;
  sub_10003561C(v6, v7);
  v8 = *(_QWORD *)(a2 + 16);
  v9 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  return a1;
}

__n128 initializeWithTake for WidgetViewsForSmallSystemFamily(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  v4 = *(_OWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for WidgetViewsForSmallSystemFamily(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  char v5;
  uint64_t v6;
  char v7;
  uint64_t v8;

  v4 = *a2;
  v5 = *((_BYTE *)a2 + 8);
  v6 = *(_QWORD *)a1;
  v7 = *(_BYTE *)(a1 + 8);
  *(_QWORD *)a1 = v4;
  *(_BYTE *)(a1 + 8) = v5;
  sub_10003561C(v6, v7);
  v8 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = a2[2];
  swift_bridgeObjectRelease(v8);
  *(_QWORD *)(a1 + 24) = a2[3];
  *(_BYTE *)(a1 + 32) = *((_BYTE *)a2 + 32);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 5);
  return a1;
}

uint64_t getEnumTagSinglePayload for WidgetViewsForSmallSystemFamily(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 56))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 16);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for WidgetViewsForSmallSystemFamily(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 56) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 16) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 56) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for WidgetViewsForSmallSystemFamily()
{
  return &type metadata for WidgetViewsForSmallSystemFamily;
}

unint64_t sub_100047F78(unint64_t a1, uint64_t a2, int *a3)
{
  int v5;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v15 = *(_QWORD *)a2;
    *(_QWORD *)a1 = *(_QWORD *)a2;
    a1 = v15 + ((v5 + 16) & ~(unint64_t)v5);
    swift_retain(v15);
  }
  else
  {
    v7 = *(_QWORD *)a2;
    v8 = *(_BYTE *)(a2 + 8);
    sub_100035568(*(_QWORD *)a2, v8);
    *(_QWORD *)a1 = v7;
    *(_BYTE *)(a1 + 8) = v8;
    v9 = a3[5];
    v10 = (uint64_t *)(a1 + v9);
    v11 = (uint64_t *)(a2 + v9);
    v12 = sub_10000527C(&qword_1000A5C00);
    if (swift_getEnumCaseMultiPayload(v11, v12) == 1)
    {
      v13 = type metadata accessor for WidgetFamily(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v13 - 8) + 16))(v10, v11, v13);
      v14 = 1;
    }
    else
    {
      v16 = *v11;
      *v10 = *v11;
      swift_retain(v16);
      v14 = 0;
    }
    swift_storeEnumTagMultiPayload(v10, v12, v14);
    v17 = a3[6];
    v18 = (uint64_t *)(a1 + v17);
    v19 = (uint64_t *)(a2 + v17);
    v20 = sub_10000527C(&qword_1000A4FC8);
    if (swift_getEnumCaseMultiPayload(v19, v20) == 1)
    {
      v21 = type metadata accessor for ColorScheme(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v21 - 8) + 16))(v18, v19, v21);
      v22 = 1;
    }
    else
    {
      v23 = *v19;
      *v18 = *v19;
      swift_retain(v23);
      v22 = 0;
    }
    swift_storeEnumTagMultiPayload(v18, v20, v22);
    v24 = a3[7];
    v25 = (uint64_t *)(a1 + v24);
    v26 = (uint64_t *)(a2 + v24);
    v27 = sub_10000527C(&qword_1000A4FC0);
    if (swift_getEnumCaseMultiPayload(v26, v27) == 1)
    {
      v28 = type metadata accessor for WidgetRenderingMode(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v28 - 8) + 16))(v25, v26, v28);
      v29 = 1;
    }
    else
    {
      v30 = *v26;
      *v25 = *v26;
      swift_retain(v30);
      v29 = 0;
    }
    swift_storeEnumTagMultiPayload(v25, v27, v29);
    v31 = a3[9];
    *(_OWORD *)(a1 + a3[8]) = *(_OWORD *)(a2 + a3[8]);
    v32 = *(_QWORD *)(a2 + v31);
    *(_QWORD *)(a1 + v31) = v32;
    swift_bridgeObjectRetain(v32);
  }
  return a1;
}

uint64_t sub_10004816C(uint64_t a1, int *a2)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;

  sub_10003561C(*(_QWORD *)a1, *(_BYTE *)(a1 + 8));
  v4 = (_QWORD *)(a1 + a2[5]);
  v5 = sub_10000527C(&qword_1000A5C00);
  if (swift_getEnumCaseMultiPayload(v4, v5) == 1)
  {
    v6 = type metadata accessor for WidgetFamily(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v4, v6);
  }
  else
  {
    swift_release(*v4);
  }
  v7 = (_QWORD *)(a1 + a2[6]);
  v8 = sub_10000527C(&qword_1000A4FC8);
  if (swift_getEnumCaseMultiPayload(v7, v8) == 1)
  {
    v9 = type metadata accessor for ColorScheme(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v9 - 8) + 8))(v7, v9);
  }
  else
  {
    swift_release(*v7);
  }
  v10 = (_QWORD *)(a1 + a2[7]);
  v11 = sub_10000527C(&qword_1000A4FC0);
  if (swift_getEnumCaseMultiPayload(v10, v11) == 1)
  {
    v12 = type metadata accessor for WidgetRenderingMode(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v12 - 8) + 8))(v10, v12);
  }
  else
  {
    swift_release(*v10);
  }
  return swift_bridgeObjectRelease(*(_QWORD *)(a1 + a2[9]));
}

uint64_t sub_100048298(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  v6 = *(_QWORD *)a2;
  v7 = *(_BYTE *)(a2 + 8);
  sub_100035568(*(_QWORD *)a2, v7);
  *(_QWORD *)a1 = v6;
  *(_BYTE *)(a1 + 8) = v7;
  v8 = a3[5];
  v9 = (uint64_t *)(a1 + v8);
  v10 = (uint64_t *)(a2 + v8);
  v11 = sub_10000527C(&qword_1000A5C00);
  if (swift_getEnumCaseMultiPayload(v10, v11) == 1)
  {
    v12 = type metadata accessor for WidgetFamily(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v12 - 8) + 16))(v9, v10, v12);
    v13 = 1;
  }
  else
  {
    v14 = *v10;
    *v9 = *v10;
    swift_retain(v14);
    v13 = 0;
  }
  swift_storeEnumTagMultiPayload(v9, v11, v13);
  v15 = a3[6];
  v16 = (uint64_t *)(a1 + v15);
  v17 = (uint64_t *)(a2 + v15);
  v18 = sub_10000527C(&qword_1000A4FC8);
  if (swift_getEnumCaseMultiPayload(v17, v18) == 1)
  {
    v19 = type metadata accessor for ColorScheme(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v19 - 8) + 16))(v16, v17, v19);
    v20 = 1;
  }
  else
  {
    v21 = *v17;
    *v16 = *v17;
    swift_retain(v21);
    v20 = 0;
  }
  swift_storeEnumTagMultiPayload(v16, v18, v20);
  v22 = a3[7];
  v23 = (uint64_t *)(a1 + v22);
  v24 = (uint64_t *)(a2 + v22);
  v25 = sub_10000527C(&qword_1000A4FC0);
  if (swift_getEnumCaseMultiPayload(v24, v25) == 1)
  {
    v26 = type metadata accessor for WidgetRenderingMode(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v26 - 8) + 16))(v23, v24, v26);
    v27 = 1;
  }
  else
  {
    v28 = *v24;
    *v23 = *v24;
    swift_retain(v28);
    v27 = 0;
  }
  swift_storeEnumTagMultiPayload(v23, v25, v27);
  v29 = a3[9];
  *(_OWORD *)(a1 + a3[8]) = *(_OWORD *)(a2 + a3[8]);
  v30 = *(_QWORD *)(a2 + v29);
  *(_QWORD *)(a1 + v29) = v30;
  swift_bridgeObjectRetain(v30);
  return a1;
}

uint64_t sub_100048460(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  char v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;

  v6 = *(_QWORD *)a2;
  v7 = *(_BYTE *)(a2 + 8);
  sub_100035568(*(_QWORD *)a2, v7);
  v8 = *(_QWORD *)a1;
  v9 = *(_BYTE *)(a1 + 8);
  *(_QWORD *)a1 = v6;
  *(_BYTE *)(a1 + 8) = v7;
  sub_10003561C(v8, v9);
  if (a1 != a2)
  {
    v10 = a3[5];
    v11 = (uint64_t *)(a1 + v10);
    v12 = (uint64_t *)(a2 + v10);
    sub_100014EFC(a1 + v10, &qword_1000A5C00);
    v13 = sub_10000527C(&qword_1000A5C00);
    if (swift_getEnumCaseMultiPayload(v12, v13) == 1)
    {
      v14 = type metadata accessor for WidgetFamily(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v14 - 8) + 16))(v11, v12, v14);
      v15 = 1;
    }
    else
    {
      v16 = *v12;
      *v11 = *v12;
      swift_retain(v16);
      v15 = 0;
    }
    swift_storeEnumTagMultiPayload(v11, v13, v15);
    v17 = a3[6];
    v18 = (uint64_t *)(a1 + v17);
    v19 = (uint64_t *)(a2 + v17);
    sub_100014EFC(a1 + v17, &qword_1000A4FC8);
    v20 = sub_10000527C(&qword_1000A4FC8);
    if (swift_getEnumCaseMultiPayload(v19, v20) == 1)
    {
      v21 = type metadata accessor for ColorScheme(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v21 - 8) + 16))(v18, v19, v21);
      v22 = 1;
    }
    else
    {
      v23 = *v19;
      *v18 = *v19;
      swift_retain(v23);
      v22 = 0;
    }
    swift_storeEnumTagMultiPayload(v18, v20, v22);
    v24 = a3[7];
    v25 = (uint64_t *)(a1 + v24);
    v26 = (uint64_t *)(a2 + v24);
    sub_100014EFC(a1 + v24, &qword_1000A4FC0);
    v27 = sub_10000527C(&qword_1000A4FC0);
    if (swift_getEnumCaseMultiPayload(v26, v27) == 1)
    {
      v28 = type metadata accessor for WidgetRenderingMode(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v28 - 8) + 16))(v25, v26, v28);
      v29 = 1;
    }
    else
    {
      v30 = *v26;
      *v25 = *v26;
      swift_retain(v30);
      v29 = 0;
    }
    swift_storeEnumTagMultiPayload(v25, v27, v29);
  }
  v31 = a3[8];
  v32 = (_QWORD *)(a1 + v31);
  v33 = (_QWORD *)(a2 + v31);
  *v32 = *v33;
  v32[1] = v33[1];
  v34 = a3[9];
  v35 = *(_QWORD *)(a2 + v34);
  v36 = *(_QWORD *)(a1 + v34);
  *(_QWORD *)(a1 + v34) = v35;
  swift_bridgeObjectRetain(v35);
  swift_bridgeObjectRelease(v36);
  return a1;
}

uint64_t sub_10004868C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void *v7;
  const void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  const void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  const void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  v6 = a3[5];
  v7 = (void *)(a1 + v6);
  v8 = (const void *)(a2 + v6);
  v9 = sub_10000527C(&qword_1000A5C00);
  if (swift_getEnumCaseMultiPayload(v8, v9) == 1)
  {
    v10 = type metadata accessor for WidgetFamily(0);
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v7, v8, v10);
    swift_storeEnumTagMultiPayload(v7, v9, 1);
  }
  else
  {
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
  }
  v11 = a3[6];
  v12 = (void *)(a1 + v11);
  v13 = (const void *)(a2 + v11);
  v14 = sub_10000527C(&qword_1000A4FC8);
  if (swift_getEnumCaseMultiPayload(v13, v14) == 1)
  {
    v15 = type metadata accessor for ColorScheme(0);
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v15 - 8) + 32))(v12, v13, v15);
    swift_storeEnumTagMultiPayload(v12, v14, 1);
  }
  else
  {
    memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
  }
  v16 = a3[7];
  v17 = (void *)(a1 + v16);
  v18 = (const void *)(a2 + v16);
  v19 = sub_10000527C(&qword_1000A4FC0);
  if (swift_getEnumCaseMultiPayload(v18, v19) == 1)
  {
    v20 = type metadata accessor for WidgetRenderingMode(0);
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v20 - 8) + 32))(v17, v18, v20);
    swift_storeEnumTagMultiPayload(v17, v19, 1);
  }
  else
  {
    memcpy(v17, v18, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
  }
  v21 = a3[9];
  *(_OWORD *)(a1 + a3[8]) = *(_OWORD *)(a2 + a3[8]);
  *(_QWORD *)(a1 + v21) = *(_QWORD *)(a2 + v21);
  return a1;
}

uint64_t sub_100048850(uint64_t a1, uint64_t *a2, int *a3)
{
  uint64_t v6;
  char v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  void *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v6 = *a2;
  v7 = *((_BYTE *)a2 + 8);
  v8 = *(_QWORD *)a1;
  v9 = *(_BYTE *)(a1 + 8);
  *(_QWORD *)a1 = v6;
  *(_BYTE *)(a1 + 8) = v7;
  sub_10003561C(v8, v9);
  if ((uint64_t *)a1 != a2)
  {
    v10 = a3[5];
    v11 = (void *)(a1 + v10);
    v12 = (char *)a2 + v10;
    sub_100014EFC(a1 + v10, &qword_1000A5C00);
    v13 = sub_10000527C(&qword_1000A5C00);
    if (swift_getEnumCaseMultiPayload(v12, v13) == 1)
    {
      v14 = type metadata accessor for WidgetFamily(0);
      (*(void (**)(void *, char *, uint64_t))(*(_QWORD *)(v14 - 8) + 32))(v11, v12, v14);
      swift_storeEnumTagMultiPayload(v11, v13, 1);
    }
    else
    {
      memcpy(v11, v12, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
    }
    v15 = a3[6];
    v16 = (void *)(a1 + v15);
    v17 = (char *)a2 + v15;
    sub_100014EFC(a1 + v15, &qword_1000A4FC8);
    v18 = sub_10000527C(&qword_1000A4FC8);
    if (swift_getEnumCaseMultiPayload(v17, v18) == 1)
    {
      v19 = type metadata accessor for ColorScheme(0);
      (*(void (**)(void *, char *, uint64_t))(*(_QWORD *)(v19 - 8) + 32))(v16, v17, v19);
      swift_storeEnumTagMultiPayload(v16, v18, 1);
    }
    else
    {
      memcpy(v16, v17, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
    }
    v20 = a3[7];
    v21 = (void *)(a1 + v20);
    v22 = (char *)a2 + v20;
    sub_100014EFC(a1 + v20, &qword_1000A4FC0);
    v23 = sub_10000527C(&qword_1000A4FC0);
    if (swift_getEnumCaseMultiPayload(v22, v23) == 1)
    {
      v24 = type metadata accessor for WidgetRenderingMode(0);
      (*(void (**)(void *, char *, uint64_t))(*(_QWORD *)(v24 - 8) + 32))(v21, v22, v24);
      swift_storeEnumTagMultiPayload(v21, v23, 1);
    }
    else
    {
      memcpy(v21, v22, *(_QWORD *)(*(_QWORD *)(v23 - 8) + 64));
    }
  }
  v25 = a3[9];
  *(_OWORD *)(a1 + a3[8]) = *(_OWORD *)((char *)a2 + a3[8]);
  v26 = *(_QWORD *)(a1 + v25);
  *(_QWORD *)(a1 + v25) = *(uint64_t *)((char *)a2 + v25);
  swift_bridgeObjectRelease(v26);
  return a1;
}

uint64_t sub_100048A60(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100048A6C);
}

uint64_t sub_100048A6C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v13;

  v6 = sub_10000527C(&qword_1000A5C08);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = a3[5];
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1 + v9, a2, v8);
  }
  v10 = sub_10000527C(&qword_1000A5CD8);
  v7 = *(_QWORD *)(v10 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v10;
    v9 = a3[6];
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1 + v9, a2, v8);
  }
  v11 = sub_10000527C(&qword_1000A5E88);
  v7 = *(_QWORD *)(v11 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v11;
    v9 = a3[7];
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1 + v9, a2, v8);
  }
  v13 = *(_QWORD *)(a1 + a3[9]);
  if (v13 >= 0xFFFFFFFF)
    LODWORD(v13) = -1;
  return (v13 + 1);
}

uint64_t sub_100048B40(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100048B4C);
}

uint64_t sub_100048B4C(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;

  v8 = sub_10000527C(&qword_1000A5C08);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = a4[5];
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1 + v11, a2, a2, v10);
  }
  v12 = sub_10000527C(&qword_1000A5CD8);
  v9 = *(_QWORD *)(v12 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v12;
    v11 = a4[6];
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1 + v11, a2, a2, v10);
  }
  result = sub_10000527C(&qword_1000A5E88);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = result;
    v11 = a4[7];
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1 + v11, a2, a2, v10);
  }
  *(_QWORD *)(a1 + a4[9]) = (a2 - 1);
  return result;
}

void sub_100048C1C(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  _QWORD v8[6];

  v8[0] = "\t";
  sub_100048D10(319, (unint64_t *)&unk_1000A5C78, (uint64_t (*)(uint64_t))&type metadata accessor for WidgetFamily);
  if (v3 <= 0x3F)
  {
    v8[1] = *(_QWORD *)(v2 - 8) + 64;
    sub_100048D10(319, &qword_1000A5EF8, (uint64_t (*)(uint64_t))&type metadata accessor for ColorScheme);
    if (v5 <= 0x3F)
    {
      v8[2] = *(_QWORD *)(v4 - 8) + 64;
      sub_100048D10(319, (unint64_t *)&qword_1000A5F00, (uint64_t (*)(uint64_t))&type metadata accessor for WidgetRenderingMode);
      if (v7 <= 0x3F)
      {
        v8[3] = *(_QWORD *)(v6 - 8) + 64;
        v8[4] = &unk_100088660;
        v8[5] = (char *)&value witness table for Builtin.BridgeObject + 64;
        swift_initStructMetadata(a1, 256, 6, v8, a1 + 16);
      }
    }
  }
}

void sub_100048D10(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t))
{
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!*a2)
  {
    v5 = a3(255);
    v6 = type metadata accessor for Environment.Content(a1, v5);
    if (!v7)
      atomic_store(v6, a2);
  }
}

uint64_t destroy for WidgetErrorView(_QWORD *a1)
{
  swift_bridgeObjectRelease(a1[1]);
  swift_bridgeObjectRelease(a1[3]);
  return swift_bridgeObjectRelease(a1[5]);
}

_QWORD *initializeWithCopy for WidgetErrorView(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  v5 = a2[5];
  a1[4] = a2[4];
  a1[5] = v5;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  return a1;
}

_QWORD *assignWithCopy for WidgetErrorView(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  *a1 = *a2;
  v4 = a2[1];
  v5 = a1[1];
  a1[1] = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  a1[2] = a2[2];
  v6 = a2[3];
  v7 = a1[3];
  a1[3] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  a1[4] = a2[4];
  v8 = a2[5];
  v9 = a1[5];
  a1[5] = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  return a1;
}

__n128 initializeWithTake for WidgetErrorView(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v3;
  *(__n128 *)a1 = result;
  return result;
}

_QWORD *assignWithTake for WidgetErrorView(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v4 = a2[1];
  v5 = a1[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_bridgeObjectRelease(v5);
  v6 = a2[3];
  v7 = a1[3];
  a1[2] = a2[2];
  a1[3] = v6;
  swift_bridgeObjectRelease(v7);
  v8 = a2[5];
  v9 = a1[5];
  a1[4] = a2[4];
  a1[5] = v8;
  swift_bridgeObjectRelease(v9);
  return a1;
}

uint64_t getEnumTagSinglePayload for WidgetErrorView(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 48))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for WidgetErrorView(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 48) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 48) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for WidgetErrorView()
{
  return &type metadata for WidgetErrorView;
}

uint64_t getEnumTagSinglePayload for AccessoriesAndScenesError(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xF8)
    goto LABEL_17;
  if (a2 + 8 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 8) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 8;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 8;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 8;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 9;
  v8 = v6 - 9;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for AccessoriesAndScenesError(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 8 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 8) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF8)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF7)
    return ((uint64_t (*)(void))((char *)&loc_100049054 + 4 * byte_100088457[v4]))();
  *a1 = a2 + 8;
  return ((uint64_t (*)(void))((char *)sub_100049088 + 4 * byte_100088452[v4]))();
}

uint64_t sub_100049088(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100049090(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100049098);
  return result;
}

uint64_t sub_1000490A4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1000490ACLL);
  *(_BYTE *)result = a2 + 8;
  return result;
}

uint64_t sub_1000490B0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000490B8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for AccessoriesAndScenesError()
{
  return &type metadata for AccessoriesAndScenesError;
}

unint64_t sub_1000490D8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000A5F40;
  if (!qword_1000A5F40)
  {
    v1 = sub_1000052BC(&qword_1000A5F48);
    sub_1000229D8(&qword_1000A5F50, &qword_1000A5F58, (uint64_t)&protocol conformance descriptor for GeometryReader<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000A5F40);
  }
  return result;
}

unint64_t sub_100049160()
{
  unint64_t result;

  result = qword_1000A5F60;
  if (!qword_1000A5F60)
  {
    result = swift_getWitnessTable(&unk_10008876C, &type metadata for AccessoriesAndScenesError);
    atomic_store(result, (unint64_t *)&qword_1000A5F60);
  }
  return result;
}

uint64_t sub_1000491A4(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_10008CAA8, 1);
}

uint64_t sub_1000491B4(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_10008CA80, 1);
}

uint64_t sub_1000491C4(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_10008CA58, 1);
}

uint64_t sub_1000491D4(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_10008CA30, 1);
}

uint64_t sub_1000491E4(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_10008CA08, 1);
}

uint64_t sub_1000491FC(unint64_t *a1, uint64_t *a2, void (*a3)(void))
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    v6 = sub_1000052BC(a2);
    a3();
    sub_1000229D8(&qword_1000A5FF0, &qword_1000A5FF8, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v6);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_100049280()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000A5FD0;
  if (!qword_1000A5FD0)
  {
    v1 = sub_1000052BC(&qword_1000A5FD8);
    sub_1000229D8(&qword_1000A5FE0, &qword_1000A5FE8, (uint64_t)&protocol conformance descriptor for _ForegroundStyleModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000A5FD0);
  }
  return result;
}

uint64_t sub_100049304@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = EnvironmentValues.multilineTextAlignment.getter();
  *a1 = result;
  return result;
}

uint64_t sub_10004932C(unsigned __int8 *a1)
{
  return EnvironmentValues.multilineTextAlignment.setter(*a1);
}

unint64_t sub_100049350()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000A6018;
  if (!qword_1000A6018)
  {
    v1 = sub_1000052BC(&qword_1000A6020);
    sub_1000229D8(&qword_1000A6028, &qword_1000A6030, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000A6018);
  }
  return result;
}

uint64_t sub_1000493D4(uint64_t a1, uint64_t a2, char a3)
{
  if ((a3 & 1) != 0)
    return swift_release(a1);
  else
    return swift_bridgeObjectRelease(a2);
}

uint64_t sub_1000493E4()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;

  v1 = (int *)type metadata accessor for WidgetViewForLargeSquareTiles(0);
  v2 = *((_QWORD *)v1 - 1);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  v6 = v0 + v4;
  sub_10003561C(*(_QWORD *)(v0 + v4), *(_BYTE *)(v0 + v4 + 8));
  v7 = (_QWORD *)(v0 + v4 + v1[5]);
  v8 = sub_10000527C(&qword_1000A5C00);
  if (swift_getEnumCaseMultiPayload(v7, v8) == 1)
  {
    v9 = type metadata accessor for WidgetFamily(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v9 - 8) + 8))(v7, v9);
  }
  else
  {
    swift_release(*v7);
  }
  v10 = (_QWORD *)(v6 + v1[6]);
  v11 = sub_10000527C(&qword_1000A4FC8);
  if (swift_getEnumCaseMultiPayload(v10, v11) == 1)
  {
    v12 = type metadata accessor for ColorScheme(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v12 - 8) + 8))(v10, v12);
  }
  else
  {
    swift_release(*v10);
  }
  v13 = (_QWORD *)(v6 + v1[7]);
  v14 = sub_10000527C(&qword_1000A4FC0);
  if (swift_getEnumCaseMultiPayload(v13, v14) == 1)
  {
    v15 = type metadata accessor for WidgetRenderingMode(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v15 - 8) + 8))(v13, v15);
  }
  else
  {
    swift_release(*v13);
  }
  swift_bridgeObjectRelease(*(_QWORD *)(v6 + v1[9]));
  return swift_deallocObject(v0, ((((v5 + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 8, v3 | 7);
}

uint64_t sub_100049568@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;

  v7 = *(_QWORD *)(type metadata accessor for WidgetViewForLargeSquareTiles(0) - 8);
  v8 = (*(unsigned __int8 *)(v7 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  v9 = (*(_QWORD *)(v7 + 64) + v8 + 7) & 0xFFFFFFFFFFFFFFF8;
  return sub_10003E444(a1, a2, v3 + v8, a3, *(double *)(v3 + v9), *(double *)(v3 + ((v9 + 15) & 0xFFFFFFFFFFFFF8)));
}

uint64_t sub_1000495DC()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t type metadata accessor for LargeSquareTileViewToggleStyle(uint64_t a1)
{
  return sub_100050B64(a1, qword_1000A63A8, (uint64_t)&nominal type descriptor for LargeSquareTileViewToggleStyle);
}

uint64_t sub_100049618@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_10003F22C(*(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), a1, *(double *)(v1 + 32), *(double *)(v1 + 40), *(double *)(v1 + 48));
}

unint64_t sub_100049628()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000A60C0;
  if (!qword_1000A60C0)
  {
    v1 = sub_1000052BC(&qword_1000A60B8);
    sub_1000496B4(&qword_1000A60C8, &qword_1000A60D0, &qword_1000A60D8, &qword_1000A60E0);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000A60C0);
  }
  return result;
}

uint64_t sub_1000496B4(unint64_t *a1, uint64_t *a2, unint64_t *a3, uint64_t *a4)
{
  uint64_t result;
  uint64_t v8;

  result = *a1;
  if (!result)
  {
    v8 = sub_1000052BC(a2);
    sub_1000229D8(a3, a4, (uint64_t)&protocol conformance descriptor for ZStack<A>);
    sub_1000229D8(&qword_1000A60E8, &qword_1000A60F0, (uint64_t)&protocol conformance descriptor for _ContainerShapeModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v8);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_10004974C()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[4];

  result = qword_1000A60F8;
  if (!qword_1000A60F8)
  {
    v1 = sub_1000052BC(&qword_1000A60A8);
    v2[0] = sub_1000052BC(&qword_1000A6098);
    v2[1] = type metadata accessor for LargeSquareTileViewToggleStyle(255);
    v2[2] = sub_1000229D8(&qword_1000A6100, &qword_1000A6098, (uint64_t)&protocol conformance descriptor for Toggle<A>);
    v2[3] = sub_100008C7C(&qword_1000A6108, type metadata accessor for LargeSquareTileViewToggleStyle, (uint64_t)&unk_100088B30);
    swift_getOpaqueTypeConformance2(v2, &opaque type descriptor for <<opaque return type of View.toggleStyle<A>(_:)>>, 1);
    sub_100008C7C(&qword_1000A6110, (uint64_t (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier, (uint64_t)&protocol conformance descriptor for AccessibilityAttachmentModifier);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000A60F8);
  }
  return result;
}

unint64_t sub_100049854()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000A6130;
  if (!qword_1000A6130)
  {
    v1 = sub_1000052BC(&qword_1000A6128);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000A6130);
  }
  return result;
}

uint64_t sub_1000498B8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;

  v3[12] = a2;
  v3[13] = a3;
  v3[11] = a1;
  v4 = sub_10000527C(&qword_1000A54B8);
  v3[14] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = (*(_QWORD *)(*(_QWORD *)(sub_10000527C(&qword_1000A5060) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v3[15] = swift_task_alloc(v5);
  v3[16] = swift_task_alloc(v5);
  v6 = type metadata accessor for UUID(0);
  v3[17] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v3[18] = v7;
  v8 = (*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v3[19] = swift_task_alloc(v8);
  v3[20] = swift_task_alloc(v8);
  return swift_task_switch(sub_100049984, 0, 0);
}

uint64_t sub_100049984(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  NSObject *v19;
  os_log_type_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void *v39;
  uint64_t v40[2];

  v2 = IntentParameter.wrappedValue.getter(a1);
  if (*(_BYTE *)(v1 + 224) == 1)
  {
    v3 = *HomeWidget.shared.unsafeMutableAddressor();
    *(_QWORD *)(v1 + 168) = v3;
    swift_retain(v3);
    v4 = HomeSettingsActor.shared.unsafeMutableAddressor();
    *(_QWORD *)(v1 + 176) = v4;
    return swift_task_switch(sub_100049E10, *v4, 0);
  }
  else
  {
    v6 = *(_QWORD *)(v1 + 112);
    v39 = &_swiftEmptyDictionarySingleton;
    IntentParameter.wrappedValue.getter(v2);
    v7 = type metadata accessor for HomeEntity(0);
    v8 = 1;
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 48))(v6, 1, v7))
    {
      (*(void (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v1 + 144) + 16))(*(_QWORD *)(v1 + 128), *(_QWORD *)(v1 + 112), *(_QWORD *)(v1 + 136));
      v8 = 0;
    }
    v9 = *(_QWORD *)(v1 + 136);
    v10 = *(_QWORD *)(v1 + 144);
    v12 = *(_QWORD *)(v1 + 120);
    v11 = *(_QWORD *)(v1 + 128);
    sub_100014EFC(*(_QWORD *)(v1 + 112), &qword_1000A54B8);
    v13 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v10 + 56))(v11, v8, 1, v9);
    IntentParameter.wrappedValue.getter(v13);
    v14 = *(_QWORD *)(v1 + 48);
    *(_QWORD *)(v1 + 40) = v14;
    sub_100026CB4(v11, v12, &qword_1000A5060);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v10 + 48))(v12, 1, v9) == 1)
    {
      sub_100014EFC(*(_QWORD *)(v1 + 120), &qword_1000A5060);
    }
    else
    {
      (*(void (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v1 + 144) + 32))(*(_QWORD *)(v1 + 152), *(_QWORD *)(v1 + 120), *(_QWORD *)(v1 + 136));
      if (v14)
      {
        v15 = *(_QWORD *)(v1 + 152);
        v16 = swift_task_alloc(32);
        *(_QWORD *)(v16 + 16) = v15;
        swift_bridgeObjectRetain(v14);
        v14 = sub_100035CD0((uint64_t (*)(char *))sub_100052EB4, v16, v14);
        swift_task_dealloc(v16);
      }
      (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v1 + 144) + 8))(*(_QWORD *)(v1 + 152), *(_QWORD *)(v1 + 136));
      swift_bridgeObjectRelease(*(_QWORD *)(v1 + 40));
      *(_QWORD *)(v1 + 40) = v14;
    }
    if (qword_1000A4F08 != -1)
      swift_once(&qword_1000A4F08, sub_100053184);
    v17 = type metadata accessor for Logger(0);
    v18 = sub_100014698(v17, (uint64_t)qword_1000A7A80);
    v19 = Logger.logObject.getter(v18);
    v20 = static os_log_type_t.default.getter(v19);
    if (os_log_type_enabled(v19, v20))
    {
      v21 = swift_slowAlloc(22, -1);
      v22 = swift_slowAlloc(64, -1);
      v40[0] = v22;
      *(_DWORD *)v21 = 136315394;
      *(_QWORD *)(v1 + 72) = sub_100023980(0xD00000000000001CLL, 0x800000010008AF60, v40);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 72, v1 + 80, v21 + 4, v21 + 12);
      *(_WORD *)(v21 + 12) = 2080;
      swift_beginAccess(v1 + 40, v1 + 16, 0, 0);
      v23 = *(_QWORD *)(v1 + 40);
      *(_QWORD *)(v1 + 80) = v23;
      swift_bridgeObjectRetain(v23);
      v24 = sub_10000527C(&qword_1000A64D0);
      v25 = String.init<A>(describing:)(v1 + 80, v24);
      v27 = v26;
      *(_QWORD *)(v1 + 64) = sub_100023980(v25, v26, v40);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 64, v1 + 72, v21 + 14, v21 + 22);
      swift_bridgeObjectRelease(v27);
      _os_log_impl((void *)&_mh_execute_header, v19, v20, "%s Looking for configuration accessories %s", (uint8_t *)v21, 0x16u);
      swift_arrayDestroy(v22, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v22, -1, -1);
      swift_slowDealloc(v21, -1, -1);
    }

    IntentParameter.wrappedValue.getter(v28);
    v29 = *(_QWORD *)(v1 + 56);
    if (v29)
    {
      v30 = *(_QWORD *)(v29 + 16);
      if (v30)
      {
        v31 = *(_QWORD *)(type metadata accessor for AccessoryAndSceneEntity(0) - 8);
        v32 = v29 + ((*(unsigned __int8 *)(v31 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v31 + 80));
        v33 = *(_QWORD *)(v31 + 72);
        swift_bridgeObjectRetain(v29);
        do
        {
          sub_100037058(v32, &v39);
          v32 += v33;
          --v30;
        }
        while (v30);
        swift_bridgeObjectRelease(v29);
      }
      swift_bridgeObjectRelease(v29);
    }
    sub_100014EFC(*(_QWORD *)(v1 + 128), &qword_1000A5060);
    swift_bridgeObjectRelease(*(_QWORD *)(v1 + 40));
    v34 = v39;
    v35 = *(_QWORD *)(v1 + 152);
    v37 = *(_QWORD *)(v1 + 120);
    v36 = *(_QWORD *)(v1 + 128);
    v38 = *(_QWORD *)(v1 + 112);
    swift_task_dealloc(*(_QWORD *)(v1 + 160));
    swift_task_dealloc(v35);
    swift_task_dealloc(v36);
    swift_task_dealloc(v37);
    swift_task_dealloc(v38);
    return (*(uint64_t (**)(void *))(v1 + 8))(v34);
  }
}

uint64_t sub_100049E10()
{
  if (qword_1000A4F00 != -1)
    swift_once(&qword_1000A4F00, sub_100035EE8);
  return swift_task_switch(sub_100049E6C, 0, 0);
}

uint64_t sub_100049E6C()
{
  uint64_t v0;

  return swift_task_switch(sub_100049E84, **(_QWORD **)(v0 + 176), 0);
}

uint64_t sub_100049E84()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  v2 = qword_1000A7A70;
  v1 = *(_QWORD *)algn_1000A7A78;
  *(_QWORD *)(v0 + 184) = qword_1000A7A70;
  v3 = dword_1000A76DC;
  swift_unknownObjectRetain(v2);
  v4 = (_QWORD *)swift_task_alloc(v3);
  *(_QWORD *)(v0 + 192) = v4;
  *v4 = v0;
  v4[1] = sub_100049EFC;
  return HomeWidget.recommendedHome(userSettings:)(v2, v1);
}

uint64_t sub_100049EFC(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v12;

  v4 = *(_QWORD *)(*v2 + 192);
  v5 = *v2;
  swift_task_dealloc(v4);
  v6 = *(_QWORD *)(v5 + 168);
  swift_unknownObjectRelease(*(_QWORD *)(v5 + 184));
  swift_release(v6);
  if (v1)
  {
    swift_errorRelease(v1);
    v7 = *(_QWORD *)(v5 + 152);
    v9 = *(_QWORD *)(v5 + 120);
    v8 = *(_QWORD *)(v5 + 128);
    v10 = *(_QWORD *)(v5 + 112);
    swift_task_dealloc(*(_QWORD *)(v5 + 160));
    swift_task_dealloc(v7);
    swift_task_dealloc(v8);
    swift_task_dealloc(v9);
    swift_task_dealloc(v10);
    return (*(uint64_t (**)(_QWORD))(v5 + 8))(0);
  }
  else
  {
    *(_QWORD *)(v5 + 200) = a1;
    v12 = (_QWORD *)swift_task_alloc(dword_1000A75F4);
    *(_QWORD *)(v5 + 208) = v12;
    *v12 = v5;
    v12[1] = sub_100049FE0;
    return HMHome.fetchPredictions()();
  }
}

uint64_t sub_100049FE0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 208);
  *(_QWORD *)(*(_QWORD *)v1 + 216) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_10004A03C, 0, 0);
}

uint64_t sub_10004A03C()
{
  uint64_t v0;
  _QWORD *v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  id v15;
  _QWORD *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v1 = *(_QWORD **)(v0 + 216);
  v2 = *(void **)(v0 + 200);
  v3 = *(_QWORD *)(v0 + 160);
  v4 = *(_QWORD *)(v0 + 136);
  v5 = *(_QWORD *)(v0 + 144);
  v6 = sub_10000527C(&qword_1000A64D8);
  v7 = sub_10000527C(&qword_1000A5A08);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(_QWORD *)(v8 + 72);
  v10 = *(unsigned __int8 *)(v8 + 80);
  v11 = (v10 + 32) & ~v10;
  v12 = swift_allocObject(v6, v11 + v9, v10 | 7);
  *(_OWORD *)(v12 + 16) = xmmword_100086C80;
  v13 = v12 + v11;
  v14 = *(int *)(v7 + 48);
  v15 = objc_msgSend(v2, "uniqueIdentifier");
  static UUID._unconditionallyBridgeFromObjectiveC(_:)(v15);

  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 32))(v13, v3, v4);
  v16 = _swiftEmptyArrayStorage;
  if (v1)
    v16 = v1;
  *(_QWORD *)(v13 + v14) = v16;
  v17 = sub_10002F708(v12);

  v18 = *(_QWORD *)(v0 + 152);
  v20 = *(_QWORD *)(v0 + 120);
  v19 = *(_QWORD *)(v0 + 128);
  v21 = *(_QWORD *)(v0 + 112);
  swift_task_dealloc(*(_QWORD *)(v0 + 160));
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  return (*(uint64_t (**)(unint64_t))(v0 + 8))(v17);
}

uint64_t sub_10004A184()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  NSString v17;
  uint64_t v18;
  NSString v19;
  uint64_t v20;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  _QWORD *v25;

  v0 = type metadata accessor for UUID(0);
  v1 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin(v0);
  v3 = (char *)&v22 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for AccessoryAndSceneEntity(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v22 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = objc_msgSend(objc_allocWithZone((Class)IFObjectHasher), "init");
  v9 = IntentParameter.wrappedValue.getter(v8);
  if ((v25 & 1) != 0 || (IntentParameter.wrappedValue.getter(v9), !v25))
  {
    v19 = String._bridgeToObjectiveC()();

  }
  else
  {
    v10 = v25[2];
    if (v10)
    {
      v11 = (uint64_t)v25 + ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80));
      v12 = *(_QWORD *)(v5 + 72);
      v23 = v25;
      v24 = v12;
      do
      {
        sub_100026C34(v11, (uint64_t)v7, type metadata accessor for AccessoryAndSceneEntity);
        (*(void (**)(char *, char *, uint64_t))(v1 + 16))(v3, v7, v0);
        v13 = sub_100026C78((uint64_t)v7, type metadata accessor for AccessoryAndSceneEntity);
        UUID.uuidString.getter(v13);
        v14 = v8;
        v16 = v15;
        (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
        v17 = String._bridgeToObjectiveC()();
        v18 = v16;
        v8 = v14;
        swift_bridgeObjectRelease(v18);

        v11 += v24;
        --v10;
      }
      while (v10);
      swift_bridgeObjectRelease(v23);
    }
    else
    {
      swift_bridgeObjectRelease(v25);
    }
  }
  v25 = objc_msgSend(v8, "finalize");
  v20 = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for UInt64, &protocol witness table for UInt64);

  return v20;
}

uint64_t sub_10004A3DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;

  v4[5] = a3;
  v4[6] = a4;
  v4[3] = a1;
  v4[4] = a2;
  v5 = type metadata accessor for AccessoryAndSceneEntity(0);
  v4[7] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v4[8] = v6;
  v4[9] = swift_task_alloc((*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_10004A440, 0, 0);
}

uint64_t sub_10004A440()
{
  _QWORD *v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  _QWORD *v19;

  v1 = v0[3];
  v2 = _swiftEmptyArrayStorage;
  v19 = _swiftEmptyArrayStorage;
  v3 = *(_QWORD *)(v1 + 16);
  if (v3)
  {
    v4 = v0[8];
    v5 = v1 + ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
    v6 = *(_QWORD *)(v4 + 72);
    swift_bridgeObjectRetain(v1);
    do
    {
      v7 = v0[9];
      sub_100026C34(v5, v7, type metadata accessor for AccessoryAndSceneEntity);
      sub_100019170();
      v9 = v8;
      sub_100026C78(v7, type metadata accessor for AccessoryAndSceneEntity);
      sub_100057A94(v9);
      v5 += v6;
      --v3;
    }
    while (v3);
    swift_bridgeObjectRelease(v0[3]);
    v2 = v19;
    v1 = v0[3];
  }
  v11 = v0[5];
  v10 = v0[6];
  v12 = v0[4];
  v19 = &_swiftEmptySetSingleton;
  swift_bridgeObjectRetain(v2);
  v14 = sub_100046824(v13, (uint64_t)&v19);
  v0[10] = v14;
  swift_bridgeObjectRelease(v2);
  swift_bridgeObjectRelease(v19);
  swift_bridgeObjectRelease(v2);
  v15 = (_QWORD *)swift_task_alloc(64);
  v0[11] = v15;
  v15[2] = v10;
  v15[3] = v14;
  v15[4] = v12;
  v15[5] = v11;
  v15[6] = v1;
  v16 = (_QWORD *)swift_task_alloc(async function pointer to withCheckedContinuation<A>(isolation:function:_:)[1]);
  v0[12] = v16;
  v17 = sub_10000527C(&qword_1000A64F0);
  *v16 = v0;
  v16[1] = sub_10004A5EC;
  return withCheckedContinuation<A>(isolation:function:_:)(v0 + 2, 0, 0, 0xD000000000000052, 0x800000010008B060, sub_100052F34, v15, v17);
}

uint64_t sub_10004A5EC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 88);
  v2 = *(_QWORD *)(*(_QWORD *)v0 + 80);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 96));
  swift_bridgeObjectRelease(v2);
  swift_task_dealloc(v1);
  return swift_task_switch(sub_10005315C, 0, 0);
}

uint64_t sub_10004A654(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;

  v4[5] = a3;
  v4[6] = a4;
  v4[3] = a1;
  v4[4] = a2;
  v5 = type metadata accessor for AccessoryAndSceneEntity(0);
  v4[7] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v4[8] = v6;
  v4[9] = swift_task_alloc((*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_10004A6B8, 0, 0);
}

uint64_t sub_10004A6B8()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;

  v1 = v0[3];
  v2 = *(_QWORD *)(v1 + 16);
  if (v2)
  {
    v4 = v0[7];
    v3 = v0[8];
    v5 = v1 + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
    v6 = *(_QWORD *)(v3 + 72);
    swift_bridgeObjectRetain(v1);
    do
    {
      v7 = v0[9];
      sub_100026C34(v5, v7, type metadata accessor for AccessoryAndSceneEntity);
      v8 = v7 + *(int *)(v4 + 24);
      v9 = v8 + *(int *)(type metadata accessor for WidgetTileInfo(0) + 56);
      v10 = v0[9];
      if (*(_BYTE *)(v9 + 8) == 2)
      {
        v11 = *(id *)v9;
        v12 = sub_100026C78(v10, type metadata accessor for AccessoryAndSceneEntity);
        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v12);
        v14 = *(_QWORD *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x10);
        v13 = *(_QWORD *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x18);
        if (v14 >= v13 >> 1)
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v13 > 1, v14 + 1, 1);
        v15 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v14, v11);
        specialized Array._endMutation()(v15);
      }
      else
      {
        sub_100026C78(v0[9], type metadata accessor for AccessoryAndSceneEntity);
      }
      v5 += v6;
      --v2;
    }
    while (v2);
    swift_bridgeObjectRelease(v0[3]);
    v1 = v0[3];
  }
  v0[10] = _swiftEmptyArrayStorage;
  v17 = v0[5];
  v16 = v0[6];
  v18 = v0[4];
  v19 = (_QWORD *)swift_task_alloc(64);
  v0[11] = v19;
  v19[2] = v16;
  v19[3] = _swiftEmptyArrayStorage;
  v19[4] = v18;
  v19[5] = v17;
  v19[6] = v1;
  v20 = (_QWORD *)swift_task_alloc(async function pointer to withCheckedContinuation<A>(isolation:function:_:)[1]);
  v0[12] = v20;
  v21 = sub_10000527C(&qword_1000A64F0);
  *v20 = v0;
  v20[1] = sub_10004A8A4;
  return withCheckedContinuation<A>(isolation:function:_:)(v0 + 2, 0, 0, 0xD00000000000004DLL, 0x800000010008AFD0, sub_100052F00, v19, v21);
}

uint64_t sub_10004A8A4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 88);
  v2 = *(_QWORD *)(*(_QWORD *)v0 + 80);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 96));
  swift_bridgeObjectRelease(v2);
  swift_task_dealloc(v1);
  return swift_task_switch(sub_10004A90C, 0, 0);
}

uint64_t sub_10004A90C()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 16);
  swift_task_dealloc(*(_QWORD *)(v0 + 72));
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v1);
}

uint64_t sub_10004A944(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v4[6] = a3;
  v4[7] = a4;
  v4[4] = a1;
  v4[5] = a2;
  v5 = type metadata accessor for AccessoryAndSceneEntity(0);
  v4[8] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v4[9] = v6;
  v7 = (*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v4[10] = swift_task_alloc(v7);
  v4[11] = swift_task_alloc(v7);
  v4[12] = swift_task_alloc(v7);
  v4[13] = swift_task_alloc(v7);
  v4[14] = swift_task_alloc(v7);
  v8 = type metadata accessor for Logger(0);
  v4[15] = v8;
  v9 = *(_QWORD *)(v8 - 8);
  v4[16] = v9;
  v4[17] = swift_task_alloc((*(_QWORD *)(v9 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_10004AA04, 0, 0);
}

uint64_t sub_10004AA04()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  int64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  Swift::String v23;
  uint64_t v24;
  uint64_t *v25;
  void *v26;
  uint64_t v27;
  Swift::String v28;
  _QWORD *v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t (*v51)(uint64_t);
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  _QWORD *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t (*v59)(uint64_t);
  uint64_t v60;
  uint64_t (*v61)(uint64_t);
  unint64_t v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t (*v66)(uint64_t);
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  unint64_t v75;
  _QWORD *v76;
  uint64_t v77;
  _QWORD *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  _QWORD *v82;
  uint64_t v84;
  os_log_type_t v85;
  uint8_t *v86;
  NSObject *log;
  uint64_t v88;
  unint64_t v89;
  _QWORD *v90;
  unint64_t v91;
  uint64_t (*v92)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v93;
  _QWORD *v94;
  _QWORD *v95;
  uint64_t v96;

  if (qword_1000A4F08 != -1)
    swift_once(&qword_1000A4F08, sub_100053184);
  v2 = v0 + 4;
  v1 = v0[4];
  v4 = v0[16];
  v3 = v0[17];
  v5 = v0[15];
  v6 = sub_100014698(v5, (uint64_t)qword_1000A7A80);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16))(v3, v6, v5);
  swift_bridgeObjectRetain_n(v1, 2);
  v8 = Logger.logObject.getter(v7);
  v9 = static os_log_type_t.default.getter(v8);
  v10 = _swiftEmptyArrayStorage;
  v90 = v0;
  if (os_log_type_enabled(v8, v9))
  {
    v85 = v9;
    log = v8;
    v11 = *v2;
    v12 = swift_slowAlloc(22, -1);
    v84 = swift_slowAlloc(64, -1);
    v93 = v84;
    *(_DWORD *)v12 = 136315394;
    v0[2] = sub_100023980(0xD000000000000041, 0x800000010008AF80, &v93);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 2, v0 + 3, v12 + 4, v12 + 12);
    v86 = (uint8_t *)v12;
    *(_WORD *)(v12 + 12) = 2080;
    v13 = *(_QWORD *)(v11 + 16);
    v14 = _swiftEmptyArrayStorage;
    if (v13)
    {
      v15 = v0[9];
      v88 = v0[8];
      v16 = v0[4];
      v94 = _swiftEmptyArrayStorage;
      sub_10002D884(0, v13, 0);
      v17 = v16 + ((*(unsigned __int8 *)(v15 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80));
      v18 = *(_QWORD *)(v15 + 72);
      do
      {
        v19 = v0[14];
        sub_100026C34(v17, v19, type metadata accessor for AccessoryAndSceneEntity);
        v20 = type metadata accessor for UUID(0);
        v21 = sub_100008C7C(&qword_1000A7600, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
        v95 = (_QWORD *)dispatch thunk of CustomStringConvertible.description.getter(v20, v21);
        v96 = v22;
        v23._countAndFlagsBits = 58;
        v23._object = (void *)0xE100000000000000;
        String.append(_:)(v23);
        v24 = v19 + *(int *)(v88 + 24);
        v25 = (uint64_t *)(v24 + *(int *)(type metadata accessor for WidgetTileInfo(0) + 24));
        v27 = *v25;
        v26 = (void *)v25[1];
        swift_bridgeObjectRetain(v26);
        v28._countAndFlagsBits = v27;
        v28._object = v26;
        String.append(_:)(v28);
        swift_bridgeObjectRelease(v26);
        v29 = v95;
        v30 = v96;
        sub_100026C78(v19, type metadata accessor for AccessoryAndSceneEntity);
        v14 = v94;
        if ((swift_isUniquelyReferenced_nonNull_native(v94) & 1) == 0)
        {
          sub_10002D884(0, v14[2] + 1, 1);
          v14 = v94;
        }
        v32 = v14[2];
        v31 = v14[3];
        if (v32 >= v31 >> 1)
        {
          sub_10002D884(v31 > 1, v32 + 1, 1);
          v14 = v94;
        }
        v14[2] = v32 + 1;
        v33 = &v14[2 * v32];
        v33[4] = v29;
        v33[5] = v30;
        v17 += v18;
        --v13;
      }
      while (v13);
    }
    v37 = v0[16];
    v38 = v0[17];
    v39 = v0[15];
    v40 = v0[4];
    v41 = Array.description.getter(v14, &type metadata for String);
    v43 = v42;
    swift_bridgeObjectRelease(v14);
    v0[3] = sub_100023980(v41, v43, &v93);
    v2 = v0 + 4;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 3, v0 + 4, v86 + 14, v86 + 22);
    swift_bridgeObjectRelease(v43);
    swift_bridgeObjectRelease_n(v40, 2);
    _os_log_impl((void *)&_mh_execute_header, log, v85, "%s Monitoring characteristics for entities: %s", v86, 0x16u);
    swift_arrayDestroy(v84, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v84, -1, -1);
    swift_slowDealloc(v86, -1, -1);

    (*(void (**)(uint64_t, uint64_t))(v37 + 8))(v38, v39);
    v10 = _swiftEmptyArrayStorage;
  }
  else
  {
    v34 = v0[16];
    v35 = v0[17];
    v36 = v0[15];
    swift_bridgeObjectRelease_n(v0[4], 2);

    (*(void (**)(uint64_t, uint64_t))(v34 + 8))(v35, v36);
  }
  v44 = *v2;
  v95 = _swiftEmptyArrayStorage;
  v45 = *(_QWORD *)(v44 + 16);
  swift_bridgeObjectRetain(v44);
  if (v45)
  {
    v47 = v0[8];
    v46 = v0[9];
    v48 = *(_QWORD *)(v46 + 72);
    v89 = (*(unsigned __int8 *)(v46 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v46 + 80);
    v49 = v44 + v89;
    v50 = _swiftEmptyArrayStorage;
    v51 = type metadata accessor for AccessoryAndSceneEntity;
    v52 = v45;
    do
    {
      v53 = v90[13];
      sub_100026C34(v49, v53, v51);
      v54 = v53 + *(int *)(v47 + 24);
      v55 = v90;
      v56 = type metadata accessor for WidgetTileInfo(0);
      v57 = v90[13];
      if (*(_BYTE *)(v54 + *(int *)(v56 + 56) + 8) == 2)
      {
        v58 = v48;
        v59 = v51;
        v60 = v47;
        v61 = v59;
        sub_100026D98(v57, v90[12], v59);
        if ((swift_isUniquelyReferenced_nonNull_native(v50) & 1) == 0)
        {
          sub_10002D8A0(0, v50[2] + 1, 1);
          v50 = v95;
        }
        v63 = v50[2];
        v62 = v50[3];
        if (v63 >= v62 >> 1)
        {
          sub_10002D8A0(v62 > 1, v63 + 1, 1);
          v50 = v95;
        }
        v64 = v90[12];
        v50[2] = v63 + 1;
        v65 = (uint64_t)v50 + v89 + v63 * v58;
        v66 = v61;
        v48 = v58;
        v55 = v90;
        sub_100026D98(v64, v65, v66);
        v47 = v60;
        v51 = v66;
      }
      else
      {
        sub_100026C78(v57, v51);
      }
      v49 += v48;
      --v52;
    }
    while (v52);
    v55[18] = v50;
    v67 = v55[4];
    swift_bridgeObjectRelease(v67);
    v10 = _swiftEmptyArrayStorage;
    v95 = _swiftEmptyArrayStorage;
    v69 = v55[8];
    v68 = v55[9];
    v70 = *(_QWORD *)(v68 + 72);
    v91 = (*(unsigned __int8 *)(v68 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v68 + 80);
    v71 = v55[4] + v91;
    swift_bridgeObjectRetain(v67);
    do
    {
      v72 = v55[11];
      sub_100026C34(v71, v72, type metadata accessor for AccessoryAndSceneEntity);
      v73 = v55[11];
      if (*(_BYTE *)(v72 + *(int *)(v69 + 24) + *(int *)(v56 + 56) + 8) == 2)
      {
        sub_100026C78(v73, type metadata accessor for AccessoryAndSceneEntity);
      }
      else
      {
        sub_100026D98(v73, v55[10], type metadata accessor for AccessoryAndSceneEntity);
        if ((swift_isUniquelyReferenced_nonNull_native(v10) & 1) == 0)
        {
          sub_10002D8A0(0, v10[2] + 1, 1);
          v10 = v95;
        }
        v75 = v10[2];
        v74 = v10[3];
        v76 = v10;
        if (v75 >= v74 >> 1)
        {
          sub_10002D8A0(v74 > 1, v75 + 1, 1);
          v76 = v95;
        }
        v77 = v55[10];
        v76[2] = v75 + 1;
        sub_100026D98(v77, (uint64_t)v76 + v91 + v75 * v70, type metadata accessor for AccessoryAndSceneEntity);
        v10 = v76;
      }
      v71 += v70;
      --v45;
    }
    while (v45);
  }
  else
  {
    v55 = v0;
    v0[18] = _swiftEmptyArrayStorage;
    swift_bridgeObjectRelease(v44);
    swift_bridgeObjectRetain(v44);
  }
  v55[19] = v10;
  v78 = v55;
  swift_bridgeObjectRelease(v55[4]);
  v79 = sub_10004A184();
  v81 = v80;
  v78[20] = v80;
  v92 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))((char *)&dword_1000A64E0 + dword_1000A64E0);
  v82 = (_QWORD *)swift_task_alloc(unk_1000A64E4);
  v78[21] = v82;
  *v82 = v78;
  v82[1] = sub_10004B114;
  return v92((uint64_t)v10, v79, v81, v78[7]);
}

uint64_t sub_10004B114(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(*(_QWORD *)v1 + 160);
  v2 = *(_QWORD *)(*(_QWORD *)v1 + 168);
  v4 = *(_QWORD *)(*(_QWORD *)v1 + 152);
  *(_QWORD *)(*(_QWORD *)v1 + 176) = a1;
  swift_task_dealloc(v2);
  swift_release(v4);
  swift_bridgeObjectRelease(v3);
  return swift_task_switch(sub_10004B184, 0, 0);
}

uint64_t sub_10004B184()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  char *v6;

  v1 = sub_10004A184();
  v3 = v2;
  v0[23] = v2;
  v6 = (char *)&dword_1000A64E8 + dword_1000A64E8;
  v4 = (_QWORD *)swift_task_alloc(unk_1000A64EC);
  v0[24] = v4;
  *v4 = v0;
  v4[1] = sub_10004B208;
  return ((uint64_t (*)(_QWORD, uint64_t, uint64_t, _QWORD))v6)(v0[18], v1, v3, v0[7]);
}

uint64_t sub_10004B208(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(*(_QWORD *)v1 + 184);
  v2 = *(_QWORD *)(*(_QWORD *)v1 + 192);
  v4 = *(_QWORD *)(*(_QWORD *)v1 + 144);
  *(_QWORD *)(*(_QWORD *)v1 + 200) = a1;
  swift_task_dealloc(v2);
  swift_release(v4);
  swift_bridgeObjectRelease(v3);
  return swift_task_switch(sub_10004B278, 0, 0);
}

uint64_t sub_10004B278()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  v1 = *(_QWORD *)(v0 + 136);
  v3 = *(_QWORD *)(v0 + 104);
  v2 = *(_QWORD *)(v0 + 112);
  v5 = *(_QWORD *)(v0 + 88);
  v4 = *(_QWORD *)(v0 + 96);
  v6 = *(_QWORD *)(v0 + 80);
  v8 = *(_QWORD *)(v0 + 176);
  sub_100057C4C(*(_QWORD *)(v0 + 200));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v8);
}

uint64_t sub_10004B318(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  void (*v18)(char *, uint64_t);
  uint64_t v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  _QWORD *v23;
  BOOL v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  NSObject *v41;
  int v42;
  uint64_t v43;
  int64_t v44;
  _QWORD *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  uint64_t v52;
  unint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v57;
  uint64_t v58;
  NSObject *v59;
  uint64_t v60;
  uint64_t *v61;
  uint64_t v62;
  int v63;
  uint64_t v64;
  uint64_t v65[3];
  _QWORD *v66;
  uint64_t v67;

  v63 = a3;
  v5 = type metadata accessor for AccessoryAndSceneEntity(0);
  v60 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v7 = (char *)&v57 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v64 = type metadata accessor for UUID(0);
  v8 = *(_QWORD *)(v64 - 8);
  __chkstk_darwin(v64);
  v10 = (char *)&v57 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for WidgetFamily(0);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v14 = (char *)&v57 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v67 = a1;
  v61 = *(uint64_t **)(v12 + 104);
  ((void (*)(char *, _QWORD, uint64_t))v61)(v14, enum case for WidgetFamily.systemSmall(_:), v11);
  v15 = sub_100008C7C(&qword_1000A5DC8, (uint64_t (*)(uint64_t))&type metadata accessor for WidgetFamily, (uint64_t)&protocol conformance descriptor for WidgetFamily);
  swift_bridgeObjectRetain(a1);
  v62 = a2;
  dispatch thunk of RawRepresentable.rawValue.getter(v65, v11, v15);
  dispatch thunk of RawRepresentable.rawValue.getter(&v66, v11, v15);
  v16 = v65[0];
  v17 = v66;
  v18 = *(void (**)(char *, uint64_t))(v12 + 8);
  v18(v14, v11);
  if ((_QWORD *)v16 == v17)
  {
    v19 = v64;
    if ((v63 & 1) == 0)
      goto LABEL_17;
    v20 = 4;
LABEL_8:
    v25 = sub_1000376DC(v20, v67);
    v27 = v26;
    v29 = v28;
    v31 = v30;
    if ((v30 & 1) != 0)
    {
      v33 = type metadata accessor for __ContiguousArrayStorageBase(0);
      v34 = swift_unknownObjectRetain_n(v25, 2);
      v35 = (_QWORD *)swift_dynamicCastClass(v34, v33);
      if (!v35)
      {
        swift_unknownObjectRelease(v25);
        v35 = _swiftEmptyArrayStorage;
      }
      v36 = v35[2];
      v37 = swift_release(v35);
      if (__OFSUB__(v31 >> 1, v29))
      {
        __break(1u);
      }
      else
      {
        v37 = v25;
        if (v36 == (v31 >> 1) - v29)
        {
          v32 = (_QWORD *)swift_dynamicCastClass(v25, v33);
          v19 = v64;
          if (!v32)
          {
            swift_unknownObjectRelease(v25);
            v32 = _swiftEmptyArrayStorage;
          }
          goto LABEL_16;
        }
      }
      swift_unknownObjectRelease(v37);
      v19 = v64;
    }
    v32 = sub_100024178(v25, v27, v29, v31);
LABEL_16:
    swift_unknownObjectRelease(v25);
    v65[0] = (uint64_t)v32;
    swift_bridgeObjectRetain_n(v32, 2);
    sub_100043870(v65);
    swift_release_n(v32, 2);
    v67 = v65[0];
    goto LABEL_17;
  }
  v21 = v63;
  ((void (*)(char *, _QWORD, uint64_t))v61)(v14, enum case for WidgetFamily.systemMedium(_:), v11);
  dispatch thunk of RawRepresentable.rawValue.getter(v65, v11, v15);
  dispatch thunk of RawRepresentable.rawValue.getter(&v66, v11, v15);
  v22 = v65[0];
  v23 = v66;
  v18(v14, v11);
  v24 = v22 == (_QWORD)v23;
  v19 = v64;
  if (v24 && (v21 & 1) != 0)
  {
    v20 = 8;
    goto LABEL_8;
  }
LABEL_17:
  if (qword_1000A4F08 != -1)
    swift_once(&qword_1000A4F08, sub_100053184);
  v38 = type metadata accessor for Logger(0);
  sub_100014698(v38, (uint64_t)qword_1000A7A80);
  v39 = v67;
  swift_bridgeObjectRetain_n(v67, 2);
  v41 = Logger.logObject.getter(v40);
  v42 = static os_log_type_t.default.getter(v41);
  if (os_log_type_enabled(v41, (os_log_type_t)v42))
  {
    v63 = v42;
    v43 = swift_slowAlloc(22, -1);
    v62 = swift_slowAlloc(64, -1);
    v65[0] = v62;
    *(_DWORD *)v43 = 136315394;
    v66 = (_QWORD *)sub_100023980(0xD00000000000003CLL, 0x800000010008AF20, v65);
    v61 = &v67;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v66, &v67, v43 + 4, v43 + 12);
    *(_WORD *)(v43 + 12) = 2080;
    v44 = *(_QWORD *)(v39 + 16);
    v45 = _swiftEmptyArrayStorage;
    if (v44)
    {
      v57 = v43;
      v59 = v41;
      v66 = _swiftEmptyArrayStorage;
      swift_bridgeObjectRetain(v39);
      sub_10002D858(0, v44, 0);
      v46 = *(unsigned __int8 *)(v60 + 80);
      v58 = v39;
      v47 = v39 + ((v46 + 32) & ~v46);
      v48 = *(_QWORD *)(v60 + 72);
      do
      {
        sub_100026C34(v47, (uint64_t)v7, type metadata accessor for AccessoryAndSceneEntity);
        (*(void (**)(char *, char *, uint64_t))(v8 + 16))(v10, v7, v19);
        sub_100026C78((uint64_t)v7, type metadata accessor for AccessoryAndSceneEntity);
        v45 = v66;
        if ((swift_isUniquelyReferenced_nonNull_native(v66) & 1) == 0)
        {
          sub_10002D858(0, v45[2] + 1, 1);
          v45 = v66;
        }
        v50 = v45[2];
        v49 = v45[3];
        if (v50 >= v49 >> 1)
        {
          sub_10002D858(v49 > 1, v50 + 1, 1);
          v45 = v66;
        }
        v45[2] = v50 + 1;
        v51 = (unint64_t)v45
            + ((*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80))
            + *(_QWORD *)(v8 + 72) * v50;
        v19 = v64;
        (*(void (**)(unint64_t, char *, uint64_t))(v8 + 32))(v51, v10, v64);
        v66 = v45;
        v47 += v48;
        --v44;
      }
      while (v44);
      v39 = v58;
      swift_bridgeObjectRelease(v58);
      v41 = v59;
      v43 = v57;
    }
    v52 = Array.description.getter(v45, v19);
    v54 = v53;
    swift_bridgeObjectRelease(v45);
    v66 = (_QWORD *)sub_100023980(v52, v54, v65);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v66, v61, v43 + 14, v43 + 22);
    swift_bridgeObjectRelease_n(v39, 2);
    swift_bridgeObjectRelease(v54);
    _os_log_impl((void *)&_mh_execute_header, v41, (os_log_type_t)v63, "%s Sorted entities to %s", (uint8_t *)v43, 0x16u);
    v55 = v62;
    swift_arrayDestroy(v62, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v55, -1, -1);
    swift_slowDealloc(v43, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n(v39, 2);
  }
  swift_beginAccess(&v67, v65, 0, 0);
  return v67;
}

uint64_t sub_10004B954(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;

  v4[41] = a3;
  v4[42] = a4;
  v4[39] = a1;
  v4[40] = a2;
  v5 = type metadata accessor for Logger(0);
  v4[43] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v4[44] = v6;
  v7 = (*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v4[45] = swift_task_alloc(v7);
  v4[46] = swift_task_alloc(v7);
  v8 = sub_10000527C(&qword_1000A54B8);
  v4[47] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v8 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for WidgetFamily(0);
  v4[48] = v9;
  v10 = *(_QWORD *)(v9 - 8);
  v4[49] = v10;
  v4[50] = swift_task_alloc((*(_QWORD *)(v10 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_10000527C(&qword_1000A5060);
  v4[51] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v11 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for UUID(0);
  v4[52] = v12;
  v13 = *(_QWORD *)(v12 - 8);
  v4[53] = v13;
  v14 = (*(_QWORD *)(v13 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v4[54] = swift_task_alloc(v14);
  v4[55] = swift_task_alloc(v14);
  v4[56] = swift_task_alloc(v14);
  v15 = type metadata accessor for AccessoryAndSceneEntity(0);
  v4[57] = v15;
  v16 = *(_QWORD *)(v15 - 8);
  v4[58] = v16;
  v17 = (*(_QWORD *)(v16 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v4[59] = swift_task_alloc(v17);
  v4[60] = swift_task_alloc(v17);
  return swift_task_switch(sub_10004BAB4, 0, 0);
}

uint64_t sub_10004BAB4()
{
  _QWORD *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  v1 = HomeWidget.shared.unsafeMutableAddressor();
  v0[61] = v1;
  v2 = *v1;
  v0[62] = *v1;
  v3 = dword_1000A76AC;
  swift_retain(v2);
  v4 = (_QWORD *)swift_task_alloc(v3);
  v0[63] = v4;
  *v4 = v0;
  v4[1] = sub_10004BB18;
  return HomeWidget.manager.getter();
}

uint64_t sub_10004BB18(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v3 = *(_QWORD *)(*(_QWORD *)v1 + 496);
  v2 = *(_QWORD *)(*(_QWORD *)v1 + 504);
  *(_QWORD *)(*(_QWORD *)v1 + 512) = a1;
  swift_task_dealloc(v2);
  swift_release(v3);
  return swift_task_switch(sub_10004BB7C, 0, 0);
}

uint64_t sub_10004BB7C()
{
  uint64_t v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint8_t *v4;
  uint64_t v5;
  double v6;
  _QWORD *v7;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint8_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  if (*(_QWORD *)(v0 + 512))
  {
    if (qword_1000A4F08 != -1)
      swift_once(&qword_1000A4F08, sub_100053184);
    v1 = sub_100014698(*(_QWORD *)(v0 + 344), (uint64_t)qword_1000A7A80);
    *(_QWORD *)(v0 + 520) = v1;
    v2 = Logger.logObject.getter(v1);
    v3 = static os_log_type_t.default.getter(v2);
    if (os_log_type_enabled(v2, v3))
    {
      v4 = (uint8_t *)swift_slowAlloc(12, -1);
      v5 = swift_slowAlloc(32, -1);
      v23 = v5;
      *(_DWORD *)v4 = 136315138;
      *(_QWORD *)(v0 + 136) = sub_100023980(0xD00000000000002CLL, 0x800000010008AEB0, &v23);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 136, v0 + 144, v4 + 4, v4 + 12);
      _os_log_impl((void *)&_mh_execute_header, v2, v3, "%s HomeKit refresh - started", v4, 0xCu);
      swift_arrayDestroy(v5, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v5, -1, -1);
      swift_slowDealloc(v4, -1, -1);
    }

    *(_QWORD *)(v0 + 528) = objc_msgSend((id)objc_opt_self(HFHomeKitDispatcher), "sharedDispatcher");
    v6 = DISPATCHER_SERVICE_REFRESH_TIMEOUT.getter();
    v7 = (_QWORD *)swift_task_alloc(async function pointer to HFHomeKitDispatcher.refresh(until:)[1]);
    *(_QWORD *)(v0 + 536) = v7;
    *v7 = v0;
    v7[1] = sub_10004BF20;
    return HFHomeKitDispatcher.refresh(until:)(v6);
  }
  else
  {
    if (qword_1000A4F08 != -1)
      swift_once(&qword_1000A4F08, sub_100053184);
    v9 = sub_100014698(*(_QWORD *)(v0 + 344), (uint64_t)qword_1000A7A80);
    v10 = Logger.logObject.getter(v9);
    v11 = static os_log_type_t.error.getter(v10);
    if (os_log_type_enabled(v10, v11))
    {
      v12 = (uint8_t *)swift_slowAlloc(12, -1);
      v13 = swift_slowAlloc(32, -1);
      v23 = v13;
      *(_DWORD *)v12 = 136315138;
      *(_QWORD *)(v0 + 280) = sub_100023980(0xD00000000000002CLL, 0x800000010008AEB0, &v23);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 280, v0 + 288, v12 + 4, v12 + 12);
      _os_log_impl((void *)&_mh_execute_header, v10, v11, "%s unable to get shared HMHomeManager instance", v12, 0xCu);
      swift_arrayDestroy(v13, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v13, -1, -1);
      swift_slowDealloc(v12, -1, -1);
    }

    v14 = *(_QWORD *)(v0 + 472);
    v16 = *(_QWORD *)(v0 + 440);
    v15 = *(_QWORD *)(v0 + 448);
    v17 = *(_QWORD *)(v0 + 432);
    v19 = *(_QWORD *)(v0 + 400);
    v18 = *(_QWORD *)(v0 + 408);
    v21 = *(_QWORD *)(v0 + 368);
    v20 = *(_QWORD *)(v0 + 376);
    v22 = *(_QWORD *)(v0 + 360);
    swift_task_dealloc(*(_QWORD *)(v0 + 480));
    swift_task_dealloc(v14);
    swift_task_dealloc(v15);
    swift_task_dealloc(v16);
    swift_task_dealloc(v17);
    swift_task_dealloc(v18);
    swift_task_dealloc(v19);
    swift_task_dealloc(v20);
    swift_task_dealloc(v21);
    swift_task_dealloc(v22);
    return (*(uint64_t (**)(_QWORD *))(v0 + 8))(_swiftEmptyArrayStorage);
  }
}

uint64_t sub_10004BF20()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 536);
  *(_QWORD *)(*v1 + 544) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = sub_10004FEF8;
  }
  else
  {

    v4 = sub_10004BF8C;
  }
  return swift_task_switch(v4, 0, 0);
}

uint64_t sub_10004BF8C(uint64_t a1)
{
  _QWORD *v1;
  NSObject *v2;
  os_log_type_t v3;
  uint8_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  void (*v20)(char *, char *, uint64_t);
  unint64_t v21;
  unint64_t v22;
  char *v23;
  uint64_t v24;
  void *v25;
  id v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  NSObject *v33;
  os_log_type_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void *v41;
  NSObject *v42;
  os_log_type_t v43;
  _BOOL4 v44;
  void *v45;
  uint64_t v46;
  _QWORD *v47;
  id v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  unint64_t v67;
  uint64_t *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  os_log_type_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t (*v80)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v81[2];

  v2 = Logger.logObject.getter(a1);
  v3 = static os_log_type_t.default.getter(v2);
  if (os_log_type_enabled(v2, v3))
  {
    v4 = (uint8_t *)swift_slowAlloc(12, -1);
    v5 = swift_slowAlloc(32, -1);
    v81[0] = v5;
    *(_DWORD *)v4 = 136315138;
    v1[19] = sub_100023980(0xD00000000000002CLL, 0x800000010008AEB0, v81);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 19, v1 + 20, v4 + 4, v4 + 12);
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "%s HomeKit refresh - ended", v4, 0xCu);
    swift_arrayDestroy(v5, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v5, -1, -1);
    swift_slowDealloc(v4, -1, -1);
  }

  v7 = IntentParameter.wrappedValue.getter(v6);
  v8 = v1[20];
  if (v8)
  {
    v9 = *(_QWORD *)(v8 + 16);
    if (v9)
    {
      v10 = v1[58];
      v11 = v1[53];
      v12 = v8 + ((*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80));
      v76 = v1[20];
      v79 = *(_QWORD *)(v10 + 72);
      swift_bridgeObjectRetain(v8);
      v13 = (char *)_swiftEmptyArrayStorage;
      do
      {
        v14 = v1[60];
        v16 = v1[51];
        v15 = v1[52];
        sub_100026C34(v12, v14, type metadata accessor for AccessoryAndSceneEntity);
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v11 + 16))(v16, v14, v15);
        (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v11 + 56))(v16, 0, 1, v15);
        sub_100026C78(v14, type metadata accessor for AccessoryAndSceneEntity);
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v11 + 48))(v16, 1, v15) == 1)
        {
          sub_100014EFC(v1[51], &qword_1000A5060);
        }
        else
        {
          v18 = (char *)v1[55];
          v17 = (char *)v1[56];
          v19 = v1[52];
          v20 = *(void (**)(char *, char *, uint64_t))(v11 + 32);
          v20(v17, (char *)v1[51], v19);
          v20(v18, v17, v19);
          if ((swift_isUniquelyReferenced_nonNull_native(v13) & 1) == 0)
            v13 = (char *)sub_10005AA24(0, *((_QWORD *)v13 + 2) + 1, 1, (unint64_t)v13);
          v22 = *((_QWORD *)v13 + 2);
          v21 = *((_QWORD *)v13 + 3);
          if (v22 >= v21 >> 1)
            v13 = (char *)sub_10005AA24(v21 > 1, v22 + 1, 1, (unint64_t)v13);
          v23 = (char *)v1[55];
          v24 = v1[52];
          *((_QWORD *)v13 + 2) = v22 + 1;
          v20(&v13[((*(unsigned __int8 *)(v11 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80))+ *(_QWORD *)(v11 + 72) * v22], v23, v24);
        }
        v12 += v79;
        --v9;
      }
      while (v9);
      v8 = v76;
      swift_bridgeObjectRelease(v76);
    }
    else
    {
      v13 = (char *)_swiftEmptyArrayStorage;
    }
    v7 = swift_bridgeObjectRelease(v8);
  }
  else
  {
    v13 = 0;
  }
  v1[69] = v13;
  v25 = (void *)v1[64];
  TimelineProviderContext.family.getter(v7);
  v26 = objc_msgSend(v25, "homes");
  v27 = sub_100008CBC(0, (unint64_t *)&qword_1000A5510, HMHome_ptr);
  v1[70] = v27;
  v28 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v26, v27);

  if ((unint64_t)v28 >> 62)
  {
    if (v28 < 0)
      v74 = v28;
    else
      v74 = v28 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v28);
    v29 = _CocoaArrayWrapper.endIndex.getter(v74);
    swift_bridgeObjectRelease(v28);
  }
  else
  {
    v29 = *(_QWORD *)((v28 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  if (v29)
  {
    v31 = v1[40];
    v30 = v1[41];
    swift_retain_n(v1[39], 2);
    swift_retain_n(v31, 2);
    v32 = swift_retain_n(v30, 2);
    v33 = Logger.logObject.getter(v32);
    v34 = static os_log_type_t.default.getter(v33);
    if (os_log_type_enabled(v33, v34))
    {
      v77 = v34;
      v35 = v1[47];
      v36 = swift_slowAlloc(22, -1);
      v75 = swift_slowAlloc(64, -1);
      v81[0] = v75;
      *(_DWORD *)v36 = 136315394;
      v1[34] = sub_100023980(0xD00000000000002CLL, 0x800000010008AEB0, v81);
      v37 = UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 34, v1 + 35, v36 + 4, v36 + 12);
      *(_WORD *)(v36 + 12) = 2080;
      IntentParameter.wrappedValue.getter(v37);
      v38 = type metadata accessor for HomeEntity(0);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v38 - 8) + 48))(v35, 1, v38))
      {
        sub_100014EFC(v1[47], &qword_1000A54B8);
        v39 = 0;
        v40 = 0;
      }
      else
      {
        v56 = v1[53];
        v55 = v1[54];
        v57 = v1[52];
        v58 = v1[47];
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v56 + 16))(v55, v58, v57);
        v59 = sub_100014EFC(v58, &qword_1000A54B8);
        v39 = UUID.uuidString.getter(v59);
        v40 = v60;
        (*(void (**)(uint64_t, uint64_t))(v56 + 8))(v55, v57);
      }
      v62 = v1[40];
      v61 = v1[41];
      v63 = v1[39];
      v1[5] = v39;
      v1[6] = v40;
      v64 = sub_10000527C(&qword_1000A51C8);
      v65 = String.init<A>(describing:)(v1 + 5, v64);
      v67 = v66;
      v1[36] = sub_100023980(v65, v66, v81);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 36, v1 + 37, v36 + 14, v36 + 22);
      swift_bridgeObjectRelease(v67);
      swift_release_n(v63, 2);
      swift_release_n(v62, 2);
      swift_release_n(v61, 2);
      _os_log_impl((void *)&_mh_execute_header, v33, v77, "%s widget configuration has home %s", (uint8_t *)v36, 0x16u);
      swift_arrayDestroy(v75, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v75, -1, -1);
      swift_slowDealloc(v36, -1, -1);
    }
    else
    {
      v51 = v1[40];
      v50 = v1[41];
      swift_release_n(v1[39], 2);
      swift_release_n(v51, 2);
      swift_release_n(v50, 2);
    }

    v68 = (uint64_t *)v1[61];
    v70 = v1[40];
    v69 = v1[41];
    v71 = v1[39];
    swift_retain(v71);
    swift_retain(v70);
    swift_retain(v69);
    v1[71] = sub_10004634C(v28, v70);
    swift_release(v71);
    swift_release(v70);
    swift_release(v69);
    swift_bridgeObjectRelease(v28);
    v72 = *v68;
    v1[72] = *v68;
    swift_retain(v72);
    v73 = HomeSettingsActor.shared.unsafeMutableAddressor();
    return swift_task_switch(sub_10004C844, *v73, 0);
  }
  else
  {
    v41 = (void *)v1[64];
    swift_bridgeObjectRelease(v28);
    swift_bridgeObjectRelease(v13);
    v42 = Logger.logObject.getter(v41);
    v43 = static os_log_type_t.error.getter(v42);
    v44 = os_log_type_enabled(v42, v43);
    v45 = (void *)v1[64];
    if (v44)
    {
      v46 = swift_slowAlloc(22, -1);
      v47 = (_QWORD *)swift_slowAlloc(8, -1);
      v78 = swift_slowAlloc(32, -1);
      v81[0] = v78;
      *(_DWORD *)v46 = 136315394;
      v1[37] = sub_100023980(0xD00000000000002CLL, 0x800000010008AEB0, v81);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 37, v1 + 38, v46 + 4, v46 + 12);
      *(_WORD *)(v46 + 12) = 2112;
      v1[38] = v45;
      v48 = v45;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 38, v1 + 39, v46 + 14, v46 + 22);
      *v47 = v45;

      _os_log_impl((void *)&_mh_execute_header, v42, v43, "%s (%@) does not have any homes", (uint8_t *)v46, 0x16u);
      v49 = sub_10000527C(&qword_1000A5208);
      swift_arrayDestroy(v47, 1, v49);
      swift_slowDealloc(v47, -1, -1);
      swift_arrayDestroy(v78, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v78, -1, -1);
      swift_slowDealloc(v46, -1, -1);

    }
    else
    {

    }
    v52 = v1[64];
    v80 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))((char *)&dword_1000A64B0 + dword_1000A64B0);
    v53 = (_QWORD *)swift_task_alloc(unk_1000A64B4);
    v1[105] = v53;
    *v53 = v1;
    v53[1] = sub_10004FCB0;
    return v80((uint64_t)_swiftEmptyArrayStorage, v1[39], v1[41], v52);
  }
}

uint64_t sub_10004C844()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  v1 = UserHomeSettings.shared.unsafeMutableAddressor();
  v2 = *v1;
  *(_QWORD *)(v0 + 584) = *v1;
  v3 = dword_1000A76DC;
  swift_retain(v2);
  v4 = (_QWORD *)swift_task_alloc(v3);
  *(_QWORD *)(v0 + 592) = v4;
  *v4 = v0;
  v4[1] = sub_10004C8BC;
  return HomeWidget.recommendedHome(userSettings:)(v2, (uint64_t)&protocol witness table for UserHomeSettings);
}

uint64_t sub_10004C8BC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)();

  v4 = *(_QWORD **)v2;
  v5 = *(_QWORD *)(*(_QWORD *)v2 + 592);
  *(_QWORD *)(*(_QWORD *)v2 + 600) = v1;
  swift_task_dealloc(v5);
  v6 = v4[72];
  swift_release(v4[73]);
  swift_release(v6);
  if (v1)
  {
    swift_errorRelease(v1);
    v7 = sub_10004CCE4;
  }
  else
  {
    v4[76] = a1;
    v7 = sub_10004C94C;
  }
  return swift_task_switch(v7, 0, 0);
}

uint64_t sub_10004C94C()
{
  _QWORD *v0;
  void *v1;
  void *v2;
  id v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  _QWORD *v8;
  void *v10;
  NSObject *v11;
  os_log_type_t v12;
  void *v13;
  uint64_t v14;
  id v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t v26;
  os_log_type_t type;
  uint64_t (*v28)(uint64_t, uint64_t, uint64_t);
  uint64_t v29;
  uint64_t (*v30)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v31;

  v1 = (void *)v0[76];
  v2 = (void *)v0[71];
  if (v2)
  {
    v3 = (id)v0[71];
    v4 = v3;
LABEL_5:
    v5 = v0[75];
    v0[81] = v4;
    v0[80] = v3;
    v0[79] = v1;
    v0[78] = v2;
    v0[77] = v5;
    v6 = unk_1000A64BC;
    v28 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)&dword_1000A64B8 + dword_1000A64B8);
    v7 = v2;
    v8 = (_QWORD *)swift_task_alloc(v6);
    v0[82] = v8;
    *v8 = v0;
    v8[1] = sub_10004D054;
    return v28(v0[39], v0[40], v0[41]);
  }
  if (v1)
  {
    v3 = v1;
    v2 = 0;
    v4 = v1;
    goto LABEL_5;
  }
  v10 = (void *)v0[64];
  swift_bridgeObjectRelease(v0[69]);
  v11 = Logger.logObject.getter(v10);
  v12 = static os_log_type_t.error.getter(v11);
  if (os_log_type_enabled(v11, v12))
  {
    v26 = v0[70];
    v13 = (void *)v0[64];
    type = v12;
    v14 = swift_slowAlloc(32, -1);
    v25 = (_QWORD *)swift_slowAlloc(8, -1);
    v29 = swift_slowAlloc(64, -1);
    v31 = v29;
    *(_DWORD *)v14 = 136315650;
    v0[7] = sub_100023980(0xD00000000000002CLL, 0x800000010008AEB0, &v31);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 7, v0 + 8, v14 + 4, v14 + 12);
    *(_WORD *)(v14 + 12) = 2112;
    v0[8] = v13;
    v15 = v13;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 8, v0 + 9, v14 + 14, v14 + 22);
    *v25 = v13;

    *(_WORD *)(v14 + 22) = 2080;
    v16 = objc_msgSend(v15, "homes");
    v17 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v16, v26);

    v18 = Array.description.getter(v17, v26);
    v20 = v19;
    swift_bridgeObjectRelease(v17);
    v0[9] = sub_100023980(v18, v20, &v31);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 9, v0 + 10, v14 + 24, v14 + 32);
    swift_bridgeObjectRelease(v20);

    _os_log_impl((void *)&_mh_execute_header, v11, type, "%s (%@) does not have either a specified home or \"current\" among (%s", (uint8_t *)v14, 0x20u);
    v21 = sub_10000527C(&qword_1000A5208);
    swift_arrayDestroy(v25, 1, v21);
    swift_slowDealloc(v25, -1, -1);
    swift_arrayDestroy(v29, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v29, -1, -1);
    swift_slowDealloc(v14, -1, -1);

  }
  else
  {
    v22 = (void *)v0[64];

  }
  v23 = v0[64];
  v30 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))((char *)&dword_1000A64B0 + dword_1000A64B0);
  v24 = (_QWORD *)swift_task_alloc(unk_1000A64B4);
  v0[103] = v24;
  *v24 = v0;
  v24[1] = sub_10004FA68;
  return v30((uint64_t)_swiftEmptyArrayStorage, v0[39], v0[41], v23);
}

uint64_t sub_10004CCE4()
{
  _QWORD *v0;
  void *v1;
  uint64_t v2;
  id v3;
  _QWORD *v4;
  void *v6;
  NSObject *v7;
  os_log_type_t v8;
  void *v9;
  uint64_t v10;
  id v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  os_log_type_t type;
  uint64_t (*v24)(uint64_t, uint64_t, uint64_t);
  uint64_t v25;
  uint64_t (*v26)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v27;

  v1 = (void *)v0[71];
  if (v1)
  {
    v0[81] = v1;
    v0[80] = v1;
    v0[79] = 0;
    v0[78] = v1;
    v0[77] = 0;
    v2 = unk_1000A64BC;
    v24 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)&dword_1000A64B8 + dword_1000A64B8);
    v3 = v1;
    v4 = (_QWORD *)swift_task_alloc(v2);
    v0[82] = v4;
    *v4 = v0;
    v4[1] = sub_10004D054;
    return v24(v0[39], v0[40], v0[41]);
  }
  else
  {
    v6 = (void *)v0[64];
    swift_bridgeObjectRelease(v0[69]);
    v7 = Logger.logObject.getter(v6);
    v8 = static os_log_type_t.error.getter(v7);
    if (os_log_type_enabled(v7, v8))
    {
      v22 = v0[70];
      v9 = (void *)v0[64];
      type = v8;
      v10 = swift_slowAlloc(32, -1);
      v21 = (_QWORD *)swift_slowAlloc(8, -1);
      v25 = swift_slowAlloc(64, -1);
      v27 = v25;
      *(_DWORD *)v10 = 136315650;
      v0[7] = sub_100023980(0xD00000000000002CLL, 0x800000010008AEB0, &v27);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 7, v0 + 8, v10 + 4, v10 + 12);
      *(_WORD *)(v10 + 12) = 2112;
      v0[8] = v9;
      v11 = v9;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 8, v0 + 9, v10 + 14, v10 + 22);
      *v21 = v9;

      *(_WORD *)(v10 + 22) = 2080;
      v12 = objc_msgSend(v11, "homes");
      v13 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v12, v22);

      v14 = Array.description.getter(v13, v22);
      v16 = v15;
      swift_bridgeObjectRelease(v13);
      v0[9] = sub_100023980(v14, v16, &v27);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 9, v0 + 10, v10 + 24, v10 + 32);
      swift_bridgeObjectRelease(v16);

      _os_log_impl((void *)&_mh_execute_header, v7, type, "%s (%@) does not have either a specified home or \"current\" among (%s", (uint8_t *)v10, 0x20u);
      v17 = sub_10000527C(&qword_1000A5208);
      swift_arrayDestroy(v21, 1, v17);
      swift_slowDealloc(v21, -1, -1);
      swift_arrayDestroy(v25, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v25, -1, -1);
      swift_slowDealloc(v10, -1, -1);

    }
    else
    {
      v18 = (void *)v0[64];

    }
    v19 = v0[64];
    v26 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))((char *)&dword_1000A64B0 + dword_1000A64B0);
    v20 = (_QWORD *)swift_task_alloc(unk_1000A64B4);
    v0[103] = v20;
    *v20 = v0;
    v20[1] = sub_10004FA68;
    return v26((uint64_t)_swiftEmptyArrayStorage, v0[39], v0[41], v19);
  }
}

uint64_t sub_10004D054(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 656);
  *(_QWORD *)(*(_QWORD *)v1 + 664) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_10004D0B0, 0, 0);
}

void sub_10004D0B0()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  id v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  _QWORD *v20;
  uint64_t v21;
  id v22;
  Swift::Bool v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t **v28;
  id v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  void *v34;
  NSObject *v35;
  os_log_type_t v36;
  _BOOL4 v37;
  void *v38;
  uint64_t *v39;
  _QWORD *v40;
  uint64_t v41;
  _QWORD *v42;
  id v43;
  uint64_t v44;
  uint64_t *v45;
  _QWORD *v46;
  NSObject *v47;
  os_log_type_t v48;
  uint64_t v49;
  _QWORD *v50;
  _QWORD *v51;
  id v52;
  id v53;
  uint64_t v54;
  unint64_t v55;
  unint64_t v56;
  uint64_t v57;
  _QWORD *v58;
  NSObject *v59;
  os_log_type_t v60;
  uint64_t v61;
  _QWORD *v62;
  _QWORD *v63;
  id v64;
  id v65;
  uint64_t v66;
  unint64_t v67;
  unint64_t v68;
  char *v69;
  id v70;
  void *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  unint64_t v76;
  uint64_t v77;
  uint64_t v78;
  _QWORD *v79;
  NSObject *v80;
  os_log_type_t v81;
  uint64_t v82;
  _QWORD *v83;
  _QWORD *v84;
  id v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  unint64_t v89;
  unint64_t v90;
  uint64_t v91;
  _QWORD *v92;
  NSObject *v93;
  os_log_type_t v94;
  uint64_t v95;
  _QWORD *v96;
  _QWORD *v97;
  uint64_t v98;
  NSObject *v99;
  os_log_type_t v100;
  _BOOL4 v101;
  void *v102;
  _QWORD *v103;
  uint64_t v104;
  _QWORD *v105;
  id v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t **v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t **v115;
  uint64_t (*v116)(uint64_t);
  uint64_t **v117;
  uint64_t v118;
  uint64_t v119;
  char *v120;
  uint64_t *v121;
  _QWORD *v122;
  uint64_t *v123;
  _QWORD *v124;
  uint64_t *v125;
  char *v126;
  char *v127;
  char *v128;
  char *v129;
  uint64_t *v130;
  uint64_t v131;
  uint64_t v132;
  os_log_type_t v133;
  os_log_type_t type[8];
  os_log_type_t typeb;
  os_log_type_t typea[8];
  uint64_t *v137;
  void (*v138)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  void (*v145)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t *v146;
  uint64_t *v147;
  uint64_t v148[2];

  v1 = v0;
  v2 = v0[83];
  v3 = v0[70];
  v4 = objc_msgSend((id)v0[64], "homes");
  v5 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v4, v3);

  v0[10] = (uint64_t)_swiftEmptyArrayStorage;
  v6 = v0 + 10;
  v0[11] = (uint64_t)_swiftEmptyArrayStorage;
  if (v2)
  {
    v7 = v0[83];
    v8 = v0[64];
    v9 = (_QWORD *)swift_task_alloc(48);
    v9[2] = v5;
    v9[3] = v8;
    v9[4] = v6;
    v9[5] = v0 + 11;
    swift_bridgeObjectRetain(v7);
    sub_10004586C(v10, (void (*)(char *, uint64_t, __n128))sub_100052E8C);
    swift_bridgeObjectRelease_n(v7, 2);
    swift_bridgeObjectRelease(v5);
    swift_task_dealloc(v9);
  }
  else
  {
    swift_bridgeObjectRelease(v5);
  }
  v11 = v0[10];
  v12 = v0[11];
  v0[84] = v11;
  v132 = v11;
  *(_QWORD *)type = *(_QWORD *)(v11 + 16);
  if (!*(_QWORD *)type)
  {
    v13 = (void *)v0[80];
    swift_bridgeObjectRelease(v12);
    v14 = sub_10000527C(&qword_1000A5200);
    v15 = swift_allocObject(v14, 40, 7);
    *(_OWORD *)(v15 + 16) = xmmword_100086CF0;
    *(_QWORD *)(v15 + 32) = v13;
    v148[0] = v15;
    specialized Array._endMutation()(v15);
    v12 = v148[0];
    v16 = v13;
  }
  v0[85] = v12;
  if ((unint64_t)v12 >> 62)
  {
LABEL_54:
    if (v12 < 0)
      v118 = v12;
    else
      v118 = v12 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v12);
    v17 = _CocoaArrayWrapper.endIndex.getter(v118);
    swift_bridgeObjectRelease(v12);
  }
  else
  {
    v17 = *(_QWORD *)((v12 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  v137 = v6;
  v130 = v6 + 17;
  if (v17)
  {
    v18 = 0;
    v19 = (char *)(v6 + 20);
    v128 = (char *)(v6 + 5);
    v129 = (char *)(v6 + 21);
    v126 = (char *)(v6 + 22);
    v127 = (char *)(v6 + 23);
    v120 = (char *)(v6 + 6);
    v121 = v6 + 2;
    v122 = v6 + 3;
    v123 = v6 + 4;
    v124 = v6 + 18;
    v125 = v6 + 19;
    v146 = v1;
    while (1)
    {
      if ((v12 & 0xC000000000000001) != 0)
        v20 = (_QWORD *)specialized _ArrayBuffer._getElementSlowPath(_:)(v18, v12);
      else
        v20 = *(id *)(v12 + 8 * v18 + 32);
      v6 = v20;
      v1[86] = (uint64_t)v20;
      v21 = v18 + 1;
      if (__OFADD__(v18, 1))
      {
        __break(1u);
        goto LABEL_54;
      }
      v22 = objc_msgSend(v20, "currentUser");
      v23 = HMHome.shouldShowNoAccessOutsideOfSchedule(forRestrictedUser:)((HMUser)v22);

      if (v23)
      {
        v45 = v146;
        v46 = v6;
        v47 = Logger.logObject.getter(v46);
        v48 = static os_log_type_t.error.getter(v47);
        if (os_log_type_enabled(v47, v48))
        {
          v49 = swift_slowAlloc(32, -1);
          typeb = v48;
          v50 = (_QWORD *)swift_slowAlloc(8, -1);
          v140 = swift_slowAlloc(64, -1);
          v148[0] = v140;
          *(_DWORD *)v49 = 136315650;
          v146[31] = sub_100023980(0xD00000000000002CLL, 0x800000010008AEB0, v148);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(v129, v126, v49 + 4, v49 + 12);
          *(_WORD *)(v49 + 12) = 2112;
          v146[32] = (uint64_t)v46;
          v51 = v46;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(v126, v127, v49 + 14, v49 + 22);
          *v50 = v46;

          *(_WORD *)(v49 + 22) = 2080;
          v52 = objc_msgSend(v51, "currentUser");
          v53 = objc_msgSend(v52, "hf_prettyDescription");

          v54 = static String._unconditionallyBridgeFromObjectiveC(_:)(v53);
          v56 = v55;

          v45 = v146;
          v146[33] = sub_100023980(v54, v56, v148);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(v127, v146 + 34, v49 + 24, v49 + 32);
          swift_bridgeObjectRelease(v56);

          _os_log_impl((void *)&_mh_execute_header, v47, typeb, "%s Current time is outside of the allowed time frame to access home %@. currentUser = %s", (uint8_t *)v49, 0x20u);
          v57 = sub_10000527C(&qword_1000A5208);
          swift_arrayDestroy(v50, 1, v57);
          swift_slowDealloc(v50, -1, -1);
          swift_arrayDestroy(v140, 2, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v140, -1, -1);
          swift_slowDealloc(v49, -1, -1);
        }
        else
        {

        }
        v108 = v45[64];
        v145 = (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))((char *)&dword_1000A64B0 + dword_1000A64B0);
        v109 = (uint64_t **)swift_task_alloc(unk_1000A64B4);
        v45[87] = (uint64_t)v109;
        *v109 = v45;
        v109[1] = (uint64_t *)sub_10004E254;
        v110 = v45[41];
        v111 = v45[39];
        goto LABEL_51;
      }
      v1 = v146;
      if (objc_msgSend(v6, "hf_isCurrentRestrictedGuestAwayFromHome"))
        break;
      if ((objc_msgSend(v6, "hf_hasEnabledResident") & 1) == 0)
      {
        v79 = v6;
        v80 = Logger.logObject.getter(v79);
        v81 = static os_log_type_t.error.getter(v80);
        if (os_log_type_enabled(v80, v81))
        {
          v82 = swift_slowAlloc(32, -1);
          v83 = (_QWORD *)swift_slowAlloc(8, -1);
          v142 = swift_slowAlloc(64, -1);
          v148[0] = v142;
          *(_DWORD *)v82 = 136315650;
          *v121 = sub_100023980(0xD00000000000002CLL, 0x800000010008AEB0, v148);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(v121, v122, v82 + 4, v82 + 12);
          *(_WORD *)(v82 + 12) = 2112;
          *v122 = v79;
          v84 = v79;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(v122, v123, v82 + 14, v82 + 22);
          *v83 = v79;

          *(_WORD *)(v82 + 22) = 2080;
          v85 = objc_msgSend(v84, "residentDevices");
          v86 = sub_100008CBC(0, &qword_1000A64C0, HMResidentDevice_ptr);
          v87 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v85, v86);

          v88 = Array.description.getter(v87, v86);
          v90 = v89;
          swift_bridgeObjectRelease(v87);
          *v123 = sub_100023980(v88, v90, v148);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(v123, v128, v82 + 24, v82 + 32);
          swift_bridgeObjectRelease(v90);

          _os_log_impl((void *)&_mh_execute_header, v80, v81, "%s No enabled resident in %@: %s", (uint8_t *)v82, 0x20u);
          v91 = sub_10000527C(&qword_1000A5208);
          swift_arrayDestroy(v83, 1, v91);
          swift_slowDealloc(v83, -1, -1);
          swift_arrayDestroy(v142, 2, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v142, -1, -1);
          swift_slowDealloc(v82, -1, -1);
        }
        else
        {

        }
        v108 = v146[64];
        v145 = (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))((char *)&dword_1000A64B0 + dword_1000A64B0);
        v117 = (uint64_t **)swift_task_alloc(unk_1000A64B4);
        v146[91] = (uint64_t)v117;
        *v117 = v146;
        v117[1] = (uint64_t *)sub_10004E824;
        v110 = v146[41];
        v111 = v146[39];
        goto LABEL_51;
      }
      if ((objc_msgSend((id)v146[64], "hf_canAccessHomeRemotely:", v6) & 1) == 0)
      {
        v92 = v6;
        v93 = Logger.logObject.getter(v92);
        v94 = static os_log_type_t.error.getter(v93);
        if (os_log_type_enabled(v93, v94))
        {
          v95 = swift_slowAlloc(22, -1);
          v96 = (_QWORD *)swift_slowAlloc(8, -1);
          v143 = swift_slowAlloc(32, -1);
          v148[0] = v143;
          *(_DWORD *)v95 = 136315394;
          v146[15] = sub_100023980(0xD00000000000002CLL, 0x800000010008AEB0, v148);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(v128, v120, v95 + 4, v95 + 12);
          *(_WORD *)(v95 + 12) = 2112;
          v146[16] = (uint64_t)v92;
          v97 = v92;
          v1 = v146;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(v120, v146 + 17, v95 + 14, v95 + 22);
          *v96 = v92;

          _os_log_impl((void *)&_mh_execute_header, v93, v94, "%s No remote access to (%@)", (uint8_t *)v95, 0x16u);
          v98 = sub_10000527C(&qword_1000A5208);
          swift_arrayDestroy(v96, 1, v98);
          swift_slowDealloc(v96, -1, -1);
          swift_arrayDestroy(v143, 1, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v143, -1, -1);
          swift_slowDealloc(v95, -1, -1);
        }
        else
        {

        }
        v108 = v1[64];
        v145 = (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))((char *)&dword_1000A64B0 + dword_1000A64B0);
        v115 = (uint64_t **)swift_task_alloc(unk_1000A64B4);
        v1[93] = (uint64_t)v115;
        v116 = sub_10004EB0C;
LABEL_50:
        *v115 = v1;
        v115[1] = (uint64_t *)v116;
        v110 = v1[41];
        v111 = v1[39];
LABEL_51:
        v145((uint64_t)_swiftEmptyArrayStorage, v111, v110, v108);
        return;
      }

      ++v18;
      if (v21 == v17)
        goto LABEL_19;
    }
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v146[44] + 16))(v146[46], v146[65], v146[43]);
    v58 = v6;
    v59 = Logger.logObject.getter(v58);
    v60 = static os_log_type_t.error.getter(v59);
    if (!os_log_type_enabled(v59, v60))
    {
      v112 = v146[46];
      v113 = v146[43];
      v114 = v146[44];

      (*(void (**)(uint64_t, uint64_t))(v114 + 8))(v112, v113);
      goto LABEL_41;
    }
    v133 = v60;
    v61 = swift_slowAlloc(42, -1);
    v62 = (_QWORD *)swift_slowAlloc(8, -1);
    v141 = swift_slowAlloc(96, -1);
    v148[0] = v141;
    *(_DWORD *)v61 = 136315906;
    *v130 = sub_100023980(0xD00000000000002CLL, 0x800000010008AEB0, v148);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v130, v124, v61 + 4, v61 + 12);
    *(_WORD *)(v61 + 12) = 2112;
    *v124 = v58;
    v63 = v58;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v124, v125, v61 + 14, v61 + 22);
    *(_QWORD *)typea = v62;
    *v62 = v58;

    *(_WORD *)(v61 + 22) = 2080;
    v64 = objc_msgSend(v63, "currentUser");
    v65 = objc_msgSend(v64, "hf_prettyDescription");

    v66 = static String._unconditionallyBridgeFromObjectiveC(_:)(v65);
    v68 = v67;

    *v125 = sub_100023980(v66, v68, v148);
    v69 = v19;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v125, v19, v61 + 24, v61 + 32);
    swift_bridgeObjectRelease(v68);

    *(_WORD *)(v61 + 32) = 2080;
    v70 = (id)HMStringFromHomeLocation(objc_msgSend(v63, "homeLocationStatus"));
    if (v70)
    {
      v71 = v70;
      v72 = v146[46];
      v73 = v146[44];
      v131 = v146[43];
      v74 = static String._unconditionallyBridgeFromObjectiveC(_:)(v70);
      v76 = v75;

      v77 = v74;
      v1 = v146;
      v146[30] = sub_100023980(v77, v76, v148);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v69, v129, v61 + 34, v61 + 42);
      swift_bridgeObjectRelease(v76);

      _os_log_impl((void *)&_mh_execute_header, v59, v133, "%s Displaying No Access because current user is an RG and away from home %@. currentUser = %s. device location status %s", (uint8_t *)v61, 0x2Au);
      v78 = sub_10000527C(&qword_1000A5208);
      swift_arrayDestroy(*(_QWORD *)typea, 1, v78);
      swift_slowDealloc(*(_QWORD *)typea, -1, -1);
      swift_arrayDestroy(v141, 3, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v141, -1, -1);
      swift_slowDealloc(v61, -1, -1);

      (*(void (**)(uint64_t, uint64_t))(v73 + 8))(v72, v131);
LABEL_41:
      v108 = v1[64];
      v145 = (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))((char *)&dword_1000A64B0 + dword_1000A64B0);
      v115 = (uint64_t **)swift_task_alloc(unk_1000A64B4);
      v1[89] = (uint64_t)v115;
      v116 = sub_10004E53C;
      goto LABEL_50;
    }

    __break(1u);
  }
  else
  {
LABEL_19:
    v24 = swift_bridgeObjectRelease(v12);
    if (!*(_QWORD *)type)
    {
      v29 = objc_msgSend((id)v1[80], "accessories");
      v30 = sub_100008CBC(0, &qword_1000A5030, HMAccessory_ptr);
      v31 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v29, v30);

      if ((unint64_t)v31 >> 62)
      {
        if (v31 < 0)
          v119 = v31;
        else
          v119 = v31 & 0xFFFFFFFFFFFFFF8;
        swift_bridgeObjectRetain(v31);
        v32 = _CocoaArrayWrapper.endIndex.getter(v119);
        swift_bridgeObjectRelease(v31);
      }
      else
      {
        v32 = *(_QWORD *)((v31 & 0xFFFFFFFFFFFFF8) + 0x10);
      }
      v33 = v137 + 15;
      swift_bridgeObjectRelease(v31);
      v34 = (void *)v1[80];
      if (!v32)
      {
        v99 = Logger.logObject.getter(v34);
        v100 = static os_log_type_t.error.getter(v99);
        v101 = os_log_type_enabled(v99, v100);
        v102 = (void *)v1[80];
        if (v101)
        {
          v103 = v137 + 16;
          v104 = swift_slowAlloc(22, -1);
          v105 = (_QWORD *)swift_slowAlloc(8, -1);
          v144 = swift_slowAlloc(32, -1);
          v148[0] = v144;
          *(_DWORD *)v104 = 136315394;
          *v33 = sub_100023980(0xD00000000000002CLL, 0x800000010008AEB0, v148);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(v33, v103, v104 + 4, v104 + 12);
          *(_WORD *)(v104 + 12) = 2112;
          *v103 = v102;
          v106 = v102;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(v103, v130, v104 + 14, v104 + 22);
          *v105 = v102;

          _os_log_impl((void *)&_mh_execute_header, v99, v100, "%s No accessories in (%@)", (uint8_t *)v104, 0x16u);
          v107 = sub_10000527C(&qword_1000A5208);
          swift_arrayDestroy(v105, 1, v107);
          swift_slowDealloc(v105, -1, -1);
          swift_arrayDestroy(v144, 1, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v144, -1, -1);
          swift_slowDealloc(v104, -1, -1);
        }
        else
        {

        }
        v108 = v1[64];
        v145 = (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))((char *)&dword_1000A64B0 + dword_1000A64B0);
        v115 = (uint64_t **)swift_task_alloc(unk_1000A64B4);
        v1[95] = (uint64_t)v115;
        v116 = sub_10004EDF4;
        goto LABEL_50;
      }
      v24 = sub_10000E48C(v34);
      if ((v24 & 1) == 0)
      {
        v35 = Logger.logObject.getter((id)v1[80]);
        v36 = static os_log_type_t.error.getter(v35);
        v37 = os_log_type_enabled(v35, v36);
        v38 = (void *)v1[80];
        if (v37)
        {
          v147 = v1;
          v39 = v137 + 13;
          v40 = v137 + 14;
          v41 = swift_slowAlloc(22, -1);
          v42 = (_QWORD *)swift_slowAlloc(8, -1);
          v139 = swift_slowAlloc(32, -1);
          v148[0] = v139;
          *(_DWORD *)v41 = 136315394;
          *v39 = sub_100023980(0xD00000000000002CLL, 0x800000010008AEB0, v148);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(v39, v40, v41 + 4, v41 + 12);
          *(_WORD *)(v41 + 12) = 2112;
          *v40 = v38;
          v43 = v38;
          v1 = v147;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(v40, v33, v41 + 14, v41 + 22);
          *v42 = v38;

          _os_log_impl((void *)&_mh_execute_header, v35, v36, "%s No supported accessories in %@", (uint8_t *)v41, 0x16u);
          v44 = sub_10000527C(&qword_1000A5208);
          swift_arrayDestroy(v42, 1, v44);
          swift_slowDealloc(v42, -1, -1);
          swift_arrayDestroy(v139, 1, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v139, -1, -1);
          swift_slowDealloc(v41, -1, -1);
        }
        else
        {

        }
        v108 = v1[64];
        v145 = (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))((char *)&dword_1000A64B0 + dword_1000A64B0);
        v115 = (uint64_t **)swift_task_alloc(unk_1000A64B4);
        v1[97] = (uint64_t)v115;
        v116 = sub_10004F0AC;
        goto LABEL_50;
      }
    }
    v25 = v1[64];
    v26 = v1[50];
    IntentParameter.wrappedValue.getter(v24);
    v27 = sub_10004B318(v132, v26, *((unsigned __int8 *)v1 + 873));
    v1[99] = v27;
    swift_bridgeObjectRelease(v132);
    v138 = (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))((char *)&dword_1000A64B0 + dword_1000A64B0);
    v28 = (uint64_t **)swift_task_alloc(unk_1000A64B4);
    v1[100] = (uint64_t)v28;
    *v28 = v1;
    v28[1] = (uint64_t *)sub_10004F364;
    v138(v27, v1[39], v1[41], v25);
  }
}

uint64_t sub_10004E254(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t (*v5)();

  v4 = *(_QWORD *)(*(_QWORD *)v2 + 696);
  *(_QWORD *)(*(_QWORD *)v2 + 704) = v1;
  swift_task_dealloc(v4);
  if (v1)
  {
    v5 = sub_10004E414;
  }
  else
  {
    swift_bridgeObjectRelease(a1);
    v5 = sub_10004E2C4;
  }
  return swift_task_switch(v5, 0, 0);
}

uint64_t sub_10004E2C4()
{
  uint64_t v0;
  unint64_t v1;
  _BYTE *v2;
  void *v3;
  uint64_t v4;
  void *v5;
  void *v6;
  void *v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;
  void *v23;
  uint64_t v24;

  v1 = sub_100052E48();
  v24 = swift_allocError(&type metadata for AccessoriesAndScenesError, v1, 0, 0);
  *v2 = 7;
  swift_willThrow(v24);
  v3 = *(void **)(v0 + 688);
  v4 = *(_QWORD *)(v0 + 680);
  v5 = *(void **)(v0 + 648);
  v6 = *(void **)(v0 + 640);
  v7 = *(void **)(v0 + 624);
  v8 = *(_QWORD *)(v0 + 552);
  v9 = *(void **)(v0 + 512);
  v10 = *(_QWORD *)(v0 + 392);
  v22 = *(_QWORD *)(v0 + 400);
  v23 = *(void **)(v0 + 632);
  v11 = *(_QWORD *)(v0 + 384);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 672));

  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(v8);

  (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v22, v11);
  v12 = *(_QWORD *)(v0 + 472);
  v14 = *(_QWORD *)(v0 + 440);
  v13 = *(_QWORD *)(v0 + 448);
  v15 = *(_QWORD *)(v0 + 432);
  v17 = *(_QWORD *)(v0 + 400);
  v16 = *(_QWORD *)(v0 + 408);
  v19 = *(_QWORD *)(v0 + 368);
  v18 = *(_QWORD *)(v0 + 376);
  v20 = *(_QWORD *)(v0 + 360);
  swift_task_dealloc(*(_QWORD *)(v0 + 480));
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10004E414()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  void *v3;
  void *v4;
  void *v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  void *v21;

  v1 = *(void **)(v0 + 688);
  v2 = *(_QWORD *)(v0 + 680);
  v3 = *(void **)(v0 + 648);
  v4 = *(void **)(v0 + 640);
  v21 = *(void **)(v0 + 632);
  v5 = *(void **)(v0 + 624);
  v6 = *(_QWORD *)(v0 + 552);
  v7 = *(void **)(v0 + 512);
  v8 = *(_QWORD *)(v0 + 392);
  v20 = *(_QWORD *)(v0 + 400);
  v9 = *(_QWORD *)(v0 + 384);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 672));

  swift_bridgeObjectRelease(v2);
  swift_bridgeObjectRelease(v6);

  (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v20, v9);
  v10 = *(_QWORD *)(v0 + 472);
  v12 = *(_QWORD *)(v0 + 440);
  v11 = *(_QWORD *)(v0 + 448);
  v13 = *(_QWORD *)(v0 + 432);
  v15 = *(_QWORD *)(v0 + 400);
  v14 = *(_QWORD *)(v0 + 408);
  v17 = *(_QWORD *)(v0 + 368);
  v16 = *(_QWORD *)(v0 + 376);
  v18 = *(_QWORD *)(v0 + 360);
  swift_task_dealloc(*(_QWORD *)(v0 + 480));
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10004E53C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t (*v5)();

  v4 = *(_QWORD *)(*(_QWORD *)v2 + 712);
  *(_QWORD *)(*(_QWORD *)v2 + 720) = v1;
  swift_task_dealloc(v4);
  if (v1)
  {
    v5 = sub_10004E6FC;
  }
  else
  {
    swift_bridgeObjectRelease(a1);
    v5 = sub_10004E5AC;
  }
  return swift_task_switch(v5, 0, 0);
}

uint64_t sub_10004E5AC()
{
  uint64_t v0;
  unint64_t v1;
  _BYTE *v2;
  void *v3;
  uint64_t v4;
  void *v5;
  void *v6;
  void *v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;
  void *v23;
  uint64_t v24;

  v1 = sub_100052E48();
  v24 = swift_allocError(&type metadata for AccessoriesAndScenesError, v1, 0, 0);
  *v2 = 8;
  swift_willThrow(v24);
  v3 = *(void **)(v0 + 688);
  v4 = *(_QWORD *)(v0 + 680);
  v5 = *(void **)(v0 + 648);
  v6 = *(void **)(v0 + 640);
  v7 = *(void **)(v0 + 624);
  v8 = *(_QWORD *)(v0 + 552);
  v9 = *(void **)(v0 + 512);
  v10 = *(_QWORD *)(v0 + 392);
  v22 = *(_QWORD *)(v0 + 400);
  v23 = *(void **)(v0 + 632);
  v11 = *(_QWORD *)(v0 + 384);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 672));

  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(v8);

  (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v22, v11);
  v12 = *(_QWORD *)(v0 + 472);
  v14 = *(_QWORD *)(v0 + 440);
  v13 = *(_QWORD *)(v0 + 448);
  v15 = *(_QWORD *)(v0 + 432);
  v17 = *(_QWORD *)(v0 + 400);
  v16 = *(_QWORD *)(v0 + 408);
  v19 = *(_QWORD *)(v0 + 368);
  v18 = *(_QWORD *)(v0 + 376);
  v20 = *(_QWORD *)(v0 + 360);
  swift_task_dealloc(*(_QWORD *)(v0 + 480));
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10004E6FC()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  void *v3;
  void *v4;
  void *v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  void *v21;

  v1 = *(void **)(v0 + 688);
  v2 = *(_QWORD *)(v0 + 680);
  v3 = *(void **)(v0 + 648);
  v4 = *(void **)(v0 + 640);
  v21 = *(void **)(v0 + 632);
  v5 = *(void **)(v0 + 624);
  v6 = *(_QWORD *)(v0 + 552);
  v7 = *(void **)(v0 + 512);
  v8 = *(_QWORD *)(v0 + 392);
  v20 = *(_QWORD *)(v0 + 400);
  v9 = *(_QWORD *)(v0 + 384);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 672));

  swift_bridgeObjectRelease(v2);
  swift_bridgeObjectRelease(v6);

  (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v20, v9);
  v10 = *(_QWORD *)(v0 + 472);
  v12 = *(_QWORD *)(v0 + 440);
  v11 = *(_QWORD *)(v0 + 448);
  v13 = *(_QWORD *)(v0 + 432);
  v15 = *(_QWORD *)(v0 + 400);
  v14 = *(_QWORD *)(v0 + 408);
  v17 = *(_QWORD *)(v0 + 368);
  v16 = *(_QWORD *)(v0 + 376);
  v18 = *(_QWORD *)(v0 + 360);
  swift_task_dealloc(*(_QWORD *)(v0 + 480));
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10004E824(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t (*v5)();

  v4 = *(_QWORD *)(*(_QWORD *)v2 + 728);
  *(_QWORD *)(*(_QWORD *)v2 + 736) = v1;
  swift_task_dealloc(v4);
  if (v1)
  {
    v5 = sub_10004E9E4;
  }
  else
  {
    swift_bridgeObjectRelease(a1);
    v5 = sub_10004E894;
  }
  return swift_task_switch(v5, 0, 0);
}

uint64_t sub_10004E894()
{
  uint64_t v0;
  unint64_t v1;
  _BYTE *v2;
  void *v3;
  uint64_t v4;
  void *v5;
  void *v6;
  void *v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;
  void *v23;
  uint64_t v24;

  v1 = sub_100052E48();
  v24 = swift_allocError(&type metadata for AccessoriesAndScenesError, v1, 0, 0);
  *v2 = 3;
  swift_willThrow(v24);
  v3 = *(void **)(v0 + 688);
  v4 = *(_QWORD *)(v0 + 680);
  v5 = *(void **)(v0 + 648);
  v6 = *(void **)(v0 + 640);
  v7 = *(void **)(v0 + 624);
  v8 = *(_QWORD *)(v0 + 552);
  v9 = *(void **)(v0 + 512);
  v10 = *(_QWORD *)(v0 + 392);
  v22 = *(_QWORD *)(v0 + 400);
  v23 = *(void **)(v0 + 632);
  v11 = *(_QWORD *)(v0 + 384);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 672));

  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(v8);

  (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v22, v11);
  v12 = *(_QWORD *)(v0 + 472);
  v14 = *(_QWORD *)(v0 + 440);
  v13 = *(_QWORD *)(v0 + 448);
  v15 = *(_QWORD *)(v0 + 432);
  v17 = *(_QWORD *)(v0 + 400);
  v16 = *(_QWORD *)(v0 + 408);
  v19 = *(_QWORD *)(v0 + 368);
  v18 = *(_QWORD *)(v0 + 376);
  v20 = *(_QWORD *)(v0 + 360);
  swift_task_dealloc(*(_QWORD *)(v0 + 480));
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10004E9E4()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  void *v3;
  void *v4;
  void *v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  void *v21;

  v1 = *(void **)(v0 + 688);
  v2 = *(_QWORD *)(v0 + 680);
  v3 = *(void **)(v0 + 648);
  v4 = *(void **)(v0 + 640);
  v21 = *(void **)(v0 + 632);
  v5 = *(void **)(v0 + 624);
  v6 = *(_QWORD *)(v0 + 552);
  v7 = *(void **)(v0 + 512);
  v8 = *(_QWORD *)(v0 + 392);
  v20 = *(_QWORD *)(v0 + 400);
  v9 = *(_QWORD *)(v0 + 384);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 672));

  swift_bridgeObjectRelease(v2);
  swift_bridgeObjectRelease(v6);

  (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v20, v9);
  v10 = *(_QWORD *)(v0 + 472);
  v12 = *(_QWORD *)(v0 + 440);
  v11 = *(_QWORD *)(v0 + 448);
  v13 = *(_QWORD *)(v0 + 432);
  v15 = *(_QWORD *)(v0 + 400);
  v14 = *(_QWORD *)(v0 + 408);
  v17 = *(_QWORD *)(v0 + 368);
  v16 = *(_QWORD *)(v0 + 376);
  v18 = *(_QWORD *)(v0 + 360);
  swift_task_dealloc(*(_QWORD *)(v0 + 480));
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10004EB0C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t (*v5)();

  v4 = *(_QWORD *)(*(_QWORD *)v2 + 744);
  *(_QWORD *)(*(_QWORD *)v2 + 752) = v1;
  swift_task_dealloc(v4);
  if (v1)
  {
    v5 = sub_10004ECCC;
  }
  else
  {
    swift_bridgeObjectRelease(a1);
    v5 = sub_10004EB7C;
  }
  return swift_task_switch(v5, 0, 0);
}

uint64_t sub_10004EB7C()
{
  uint64_t v0;
  unint64_t v1;
  _BYTE *v2;
  void *v3;
  uint64_t v4;
  void *v5;
  void *v6;
  void *v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;
  void *v23;
  uint64_t v24;

  v1 = sub_100052E48();
  v24 = swift_allocError(&type metadata for AccessoriesAndScenesError, v1, 0, 0);
  *v2 = 4;
  swift_willThrow(v24);
  v3 = *(void **)(v0 + 688);
  v4 = *(_QWORD *)(v0 + 680);
  v5 = *(void **)(v0 + 648);
  v6 = *(void **)(v0 + 640);
  v7 = *(void **)(v0 + 624);
  v8 = *(_QWORD *)(v0 + 552);
  v9 = *(void **)(v0 + 512);
  v10 = *(_QWORD *)(v0 + 392);
  v22 = *(_QWORD *)(v0 + 400);
  v23 = *(void **)(v0 + 632);
  v11 = *(_QWORD *)(v0 + 384);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 672));

  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(v8);

  (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v22, v11);
  v12 = *(_QWORD *)(v0 + 472);
  v14 = *(_QWORD *)(v0 + 440);
  v13 = *(_QWORD *)(v0 + 448);
  v15 = *(_QWORD *)(v0 + 432);
  v17 = *(_QWORD *)(v0 + 400);
  v16 = *(_QWORD *)(v0 + 408);
  v19 = *(_QWORD *)(v0 + 368);
  v18 = *(_QWORD *)(v0 + 376);
  v20 = *(_QWORD *)(v0 + 360);
  swift_task_dealloc(*(_QWORD *)(v0 + 480));
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10004ECCC()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  void *v3;
  void *v4;
  void *v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  void *v21;

  v1 = *(void **)(v0 + 688);
  v2 = *(_QWORD *)(v0 + 680);
  v3 = *(void **)(v0 + 648);
  v4 = *(void **)(v0 + 640);
  v21 = *(void **)(v0 + 632);
  v5 = *(void **)(v0 + 624);
  v6 = *(_QWORD *)(v0 + 552);
  v7 = *(void **)(v0 + 512);
  v8 = *(_QWORD *)(v0 + 392);
  v20 = *(_QWORD *)(v0 + 400);
  v9 = *(_QWORD *)(v0 + 384);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 672));

  swift_bridgeObjectRelease(v2);
  swift_bridgeObjectRelease(v6);

  (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v20, v9);
  v10 = *(_QWORD *)(v0 + 472);
  v12 = *(_QWORD *)(v0 + 440);
  v11 = *(_QWORD *)(v0 + 448);
  v13 = *(_QWORD *)(v0 + 432);
  v15 = *(_QWORD *)(v0 + 400);
  v14 = *(_QWORD *)(v0 + 408);
  v17 = *(_QWORD *)(v0 + 368);
  v16 = *(_QWORD *)(v0 + 376);
  v18 = *(_QWORD *)(v0 + 360);
  swift_task_dealloc(*(_QWORD *)(v0 + 480));
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10004EDF4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t (*v5)();

  v4 = *(_QWORD *)(*(_QWORD *)v2 + 760);
  *(_QWORD *)(*(_QWORD *)v2 + 768) = v1;
  swift_task_dealloc(v4);
  if (v1)
  {
    v5 = sub_10004EF9C;
  }
  else
  {
    swift_bridgeObjectRelease(a1);
    v5 = sub_10004EE64;
  }
  return swift_task_switch(v5, 0, 0);
}

uint64_t sub_10004EE64()
{
  uint64_t v0;
  unint64_t v1;
  _BYTE *v2;
  uint64_t v3;
  void *v4;
  void *v5;
  void *v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;

  v1 = sub_100052E48();
  v22 = swift_allocError(&type metadata for AccessoriesAndScenesError, v1, 0, 0);
  *v2 = 5;
  swift_willThrow(v22);
  v3 = *(_QWORD *)(v0 + 672);
  v4 = *(void **)(v0 + 648);
  v5 = *(void **)(v0 + 632);
  v6 = *(void **)(v0 + 624);
  v7 = *(_QWORD *)(v0 + 552);
  v8 = *(void **)(v0 + 512);
  v10 = *(_QWORD *)(v0 + 392);
  v9 = *(_QWORD *)(v0 + 400);
  v11 = *(_QWORD *)(v0 + 384);

  swift_bridgeObjectRelease(v3);
  swift_bridgeObjectRelease(v7);

  (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v9, v11);
  v12 = *(_QWORD *)(v0 + 472);
  v14 = *(_QWORD *)(v0 + 440);
  v13 = *(_QWORD *)(v0 + 448);
  v15 = *(_QWORD *)(v0 + 432);
  v17 = *(_QWORD *)(v0 + 400);
  v16 = *(_QWORD *)(v0 + 408);
  v19 = *(_QWORD *)(v0 + 368);
  v18 = *(_QWORD *)(v0 + 376);
  v20 = *(_QWORD *)(v0 + 360);
  swift_task_dealloc(*(_QWORD *)(v0 + 480));
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10004EF9C()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v1 = *(_QWORD *)(v0 + 672);
  v2 = *(void **)(v0 + 648);
  v3 = *(void **)(v0 + 632);
  v4 = *(void **)(v0 + 624);
  v5 = *(_QWORD *)(v0 + 552);
  v6 = *(void **)(v0 + 512);
  v8 = *(_QWORD *)(v0 + 392);
  v7 = *(_QWORD *)(v0 + 400);
  v9 = *(_QWORD *)(v0 + 384);

  swift_bridgeObjectRelease(v1);
  swift_bridgeObjectRelease(v5);

  (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v7, v9);
  v10 = *(_QWORD *)(v0 + 472);
  v12 = *(_QWORD *)(v0 + 440);
  v11 = *(_QWORD *)(v0 + 448);
  v13 = *(_QWORD *)(v0 + 432);
  v15 = *(_QWORD *)(v0 + 400);
  v14 = *(_QWORD *)(v0 + 408);
  v17 = *(_QWORD *)(v0 + 368);
  v16 = *(_QWORD *)(v0 + 376);
  v18 = *(_QWORD *)(v0 + 360);
  swift_task_dealloc(*(_QWORD *)(v0 + 480));
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10004F0AC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t (*v5)();

  v4 = *(_QWORD *)(*(_QWORD *)v2 + 776);
  *(_QWORD *)(*(_QWORD *)v2 + 784) = v1;
  swift_task_dealloc(v4);
  if (v1)
  {
    v5 = sub_10004F254;
  }
  else
  {
    swift_bridgeObjectRelease(a1);
    v5 = sub_10004F11C;
  }
  return swift_task_switch(v5, 0, 0);
}

uint64_t sub_10004F11C()
{
  uint64_t v0;
  unint64_t v1;
  _BYTE *v2;
  uint64_t v3;
  void *v4;
  void *v5;
  void *v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;

  v1 = sub_100052E48();
  v22 = swift_allocError(&type metadata for AccessoriesAndScenesError, v1, 0, 0);
  *v2 = 6;
  swift_willThrow(v22);
  v3 = *(_QWORD *)(v0 + 672);
  v4 = *(void **)(v0 + 648);
  v5 = *(void **)(v0 + 632);
  v6 = *(void **)(v0 + 624);
  v7 = *(_QWORD *)(v0 + 552);
  v8 = *(void **)(v0 + 512);
  v10 = *(_QWORD *)(v0 + 392);
  v9 = *(_QWORD *)(v0 + 400);
  v11 = *(_QWORD *)(v0 + 384);

  swift_bridgeObjectRelease(v3);
  swift_bridgeObjectRelease(v7);

  (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v9, v11);
  v12 = *(_QWORD *)(v0 + 472);
  v14 = *(_QWORD *)(v0 + 440);
  v13 = *(_QWORD *)(v0 + 448);
  v15 = *(_QWORD *)(v0 + 432);
  v17 = *(_QWORD *)(v0 + 400);
  v16 = *(_QWORD *)(v0 + 408);
  v19 = *(_QWORD *)(v0 + 368);
  v18 = *(_QWORD *)(v0 + 376);
  v20 = *(_QWORD *)(v0 + 360);
  swift_task_dealloc(*(_QWORD *)(v0 + 480));
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10004F254()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v1 = *(_QWORD *)(v0 + 672);
  v2 = *(void **)(v0 + 648);
  v3 = *(void **)(v0 + 632);
  v4 = *(void **)(v0 + 624);
  v5 = *(_QWORD *)(v0 + 552);
  v6 = *(void **)(v0 + 512);
  v8 = *(_QWORD *)(v0 + 392);
  v7 = *(_QWORD *)(v0 + 400);
  v9 = *(_QWORD *)(v0 + 384);

  swift_bridgeObjectRelease(v1);
  swift_bridgeObjectRelease(v5);

  (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v7, v9);
  v10 = *(_QWORD *)(v0 + 472);
  v12 = *(_QWORD *)(v0 + 440);
  v11 = *(_QWORD *)(v0 + 448);
  v13 = *(_QWORD *)(v0 + 432);
  v15 = *(_QWORD *)(v0 + 400);
  v14 = *(_QWORD *)(v0 + 408);
  v17 = *(_QWORD *)(v0 + 368);
  v16 = *(_QWORD *)(v0 + 376);
  v18 = *(_QWORD *)(v0 + 360);
  swift_task_dealloc(*(_QWORD *)(v0 + 480));
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10004F364(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)();

  v3 = *(_QWORD **)v2;
  v4 = *(_QWORD *)(*(_QWORD *)v2 + 800);
  v3[101] = a1;
  v3[102] = v1;
  swift_task_dealloc(v4);
  v5 = v3[99];
  if (v1)
  {
    v6 = v3[69];
    swift_bridgeObjectRelease(v5);
    swift_bridgeObjectRelease(v6);
    v7 = sub_10004F970;
  }
  else
  {
    swift_bridgeObjectRelease(v5);
    v7 = sub_10004F3EC;
  }
  return swift_task_switch(v7, 0, 0);
}

uint64_t sub_10004F3EC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint64_t v10;
  int64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  Swift::String v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  void *v24;
  Swift::String v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  _QWORD *v30;
  void *v31;
  NSObject *v32;
  void *v33;
  void *v34;
  void *v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  os_log_t v40;
  uint64_t v41;
  _QWORD *v42;
  void *v43;
  void *v44;
  void *v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  void *v62;
  void *v63;
  uint64_t v64;
  _QWORD *v65;
  NSObject *v66;
  uint64_t v67;
  os_log_type_t v68;
  uint8_t *v69;
  uint64_t v70;
  NSObject *log;
  os_log_t loga;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  _QWORD *v77;
  uint64_t v78;
  uint64_t v79;

  v1 = *(_QWORD *)(v0 + 808);
  *(_QWORD *)(v0 + 144) = v1;
  swift_bridgeObjectRetain(v1);
  IntentParameter.wrappedValue.getter(v2);
  if ((*(_BYTE *)(v0 + 872) & 1) != 0)
  {
    v3 = *(_QWORD *)(v0 + 552);
    swift_bridgeObjectRelease(*(_QWORD *)(v0 + 808));
    swift_bridgeObjectRelease(v3);
    v4 = *(_QWORD **)(v0 + 808);
  }
  else
  {
    v5 = *(_QWORD *)(v0 + 552);
    if (v5)
    {
      v6 = *(_QWORD *)(v0 + 808);
      swift_bridgeObjectRetain(v6);
      v4 = sub_100045AA0(v5, v6);
      swift_bridgeObjectRelease(v6);
      swift_bridgeObjectRelease(v5);
    }
    else
    {
      v4 = _swiftEmptyArrayStorage;
    }
    swift_bridgeObjectRelease_n(*(_QWORD *)(v0 + 808), 2);
    *(_QWORD *)(v0 + 144) = v4;
  }
  (*(void (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v0 + 352) + 16))(*(_QWORD *)(v0 + 360), *(_QWORD *)(v0 + 520), *(_QWORD *)(v0 + 344));
  swift_bridgeObjectRetain_n(v4, 2);
  v8 = Logger.logObject.getter(v7);
  v9 = static os_log_type_t.default.getter(v8);
  if (os_log_type_enabled(v8, v9))
  {
    v68 = v9;
    log = v8;
    v10 = swift_slowAlloc(22, -1);
    v67 = swift_slowAlloc(64, -1);
    v76 = v67;
    *(_DWORD *)v10 = 136315394;
    *(_QWORD *)(v0 + 168) = sub_100023980(0xD00000000000002CLL, 0x800000010008AEB0, &v76);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 168, v0 + 176, v10 + 4, v10 + 12);
    v69 = (uint8_t *)v10;
    *(_WORD *)(v10 + 12) = 2080;
    v11 = v4[2];
    v12 = _swiftEmptyArrayStorage;
    if (v11)
    {
      v13 = *(_QWORD *)(v0 + 464);
      v73 = *(_QWORD *)(v0 + 456);
      v77 = _swiftEmptyArrayStorage;
      swift_bridgeObjectRetain(v4);
      sub_10002D884(0, v11, 0);
      v65 = v4;
      v14 = (uint64_t)v4 + ((*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80));
      v15 = *(_QWORD *)(v13 + 72);
      do
      {
        v16 = *(_QWORD *)(v0 + 472);
        v17 = *(_QWORD *)(v0 + 416);
        sub_100026C34(v14, v16, type metadata accessor for AccessoryAndSceneEntity);
        v18 = sub_100008C7C(&qword_1000A7600, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
        v78 = dispatch thunk of CustomStringConvertible.description.getter(v17, v18);
        v79 = v19;
        v20._countAndFlagsBits = 58;
        v20._object = (void *)0xE100000000000000;
        String.append(_:)(v20);
        v21 = v16 + *(int *)(v73 + 24);
        v22 = (uint64_t *)(v21 + *(int *)(type metadata accessor for WidgetTileInfo(0) + 24));
        v23 = *v22;
        v24 = (void *)v22[1];
        swift_bridgeObjectRetain(v24);
        v25._countAndFlagsBits = v23;
        v25._object = v24;
        String.append(_:)(v25);
        swift_bridgeObjectRelease(v24);
        v26 = v78;
        v27 = v79;
        sub_100026C78(v16, type metadata accessor for AccessoryAndSceneEntity);
        v12 = v77;
        if ((swift_isUniquelyReferenced_nonNull_native(v77) & 1) == 0)
        {
          sub_10002D884(0, v12[2] + 1, 1);
          v12 = v77;
        }
        v29 = v12[2];
        v28 = v12[3];
        if (v29 >= v28 >> 1)
        {
          sub_10002D884(v28 > 1, v29 + 1, 1);
          v12 = v77;
        }
        v12[2] = v29 + 1;
        v30 = &v12[2 * v29];
        v30[4] = v26;
        v30[5] = v27;
        v14 += v15;
        --v11;
      }
      while (v11);
      v42 = v65;
      swift_bridgeObjectRelease(v65);
    }
    else
    {
      v42 = v4;
    }
    v43 = *(void **)(v0 + 640);
    v62 = *(void **)(v0 + 648);
    v63 = *(void **)(v0 + 632);
    v44 = *(void **)(v0 + 624);
    v45 = *(void **)(v0 + 512);
    v74 = *(_QWORD *)(v0 + 400);
    v64 = *(_QWORD *)(v0 + 392);
    v66 = *(NSObject **)(v0 + 384);
    v59 = *(_QWORD *)(v0 + 352);
    v60 = *(_QWORD *)(v0 + 344);
    v61 = *(_QWORD *)(v0 + 360);
    v46 = Array.description.getter(v12, &type metadata for String);
    v48 = v47;
    swift_bridgeObjectRelease(v12);
    *(_QWORD *)(v0 + 176) = sub_100023980(v46, v48, &v76);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 176, v0 + 184, v69 + 14, v69 + 22);
    swift_bridgeObjectRelease(v48);
    swift_bridgeObjectRelease_n(v42, 2);
    _os_log_impl((void *)&_mh_execute_header, log, v68, "%s Finalized entities: %s", v69, 0x16u);
    swift_arrayDestroy(v67, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v67, -1, -1);
    swift_slowDealloc(v69, -1, -1);

    (*(void (**)(uint64_t, uint64_t))(v59 + 8))(v61, v60);
    v41 = v64;
    v40 = v66;
  }
  else
  {
    v31 = *(void **)(v0 + 648);
    v32 = v8;
    v33 = *(void **)(v0 + 640);
    v34 = *(void **)(v0 + 632);
    v35 = *(void **)(v0 + 624);
    v36 = *(void **)(v0 + 512);
    v74 = *(_QWORD *)(v0 + 400);
    v70 = *(_QWORD *)(v0 + 392);
    loga = *(os_log_t *)(v0 + 384);
    v37 = *(_QWORD *)(v0 + 352);
    v38 = *(_QWORD *)(v0 + 360);
    v39 = *(_QWORD *)(v0 + 344);

    swift_bridgeObjectRelease_n(v4, 2);
    (*(void (**)(uint64_t, uint64_t))(v37 + 8))(v38, v39);
    v41 = v70;
    v40 = loga;
  }
  (*(void (**)(uint64_t, os_log_t))(v41 + 8))(v74, v40);
  swift_beginAccess(v0 + 144, v0 + 16, 0, 0);
  v75 = *(_QWORD *)(v0 + 144);
  v49 = *(_QWORD *)(v0 + 472);
  v51 = *(_QWORD *)(v0 + 440);
  v50 = *(_QWORD *)(v0 + 448);
  v52 = *(_QWORD *)(v0 + 432);
  v54 = *(_QWORD *)(v0 + 400);
  v53 = *(_QWORD *)(v0 + 408);
  v56 = *(_QWORD *)(v0 + 368);
  v55 = *(_QWORD *)(v0 + 376);
  v57 = *(_QWORD *)(v0 + 360);
  swift_task_dealloc(*(_QWORD *)(v0 + 480));
  swift_task_dealloc(v49);
  swift_task_dealloc(v50);
  swift_task_dealloc(v51);
  swift_task_dealloc(v52);
  swift_task_dealloc(v53);
  swift_task_dealloc(v54);
  swift_task_dealloc(v55);
  swift_task_dealloc(v56);
  swift_task_dealloc(v57);
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v75);
}

uint64_t sub_10004F970()
{
  uint64_t v0;
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v1 = *(void **)(v0 + 648);
  v2 = *(void **)(v0 + 632);
  v3 = *(void **)(v0 + 624);
  v4 = *(void **)(v0 + 512);
  v6 = *(_QWORD *)(v0 + 392);
  v5 = *(_QWORD *)(v0 + 400);
  v7 = *(_QWORD *)(v0 + 384);

  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v5, v7);
  v8 = *(_QWORD *)(v0 + 472);
  v10 = *(_QWORD *)(v0 + 440);
  v9 = *(_QWORD *)(v0 + 448);
  v11 = *(_QWORD *)(v0 + 432);
  v13 = *(_QWORD *)(v0 + 400);
  v12 = *(_QWORD *)(v0 + 408);
  v15 = *(_QWORD *)(v0 + 368);
  v14 = *(_QWORD *)(v0 + 376);
  v16 = *(_QWORD *)(v0 + 360);
  swift_task_dealloc(*(_QWORD *)(v0 + 480));
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10004FA68(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t (*v5)();

  v4 = *(_QWORD *)(*(_QWORD *)v2 + 824);
  *(_QWORD *)(*(_QWORD *)v2 + 832) = v1;
  swift_task_dealloc(v4);
  if (v1)
  {
    v5 = sub_10004FBD8;
  }
  else
  {
    swift_bridgeObjectRelease(a1);
    v5 = sub_10004FAD8;
  }
  return swift_task_switch(v5, 0, 0);
}

uint64_t sub_10004FAD8()
{
  uint64_t v0;
  unint64_t v1;
  _BYTE *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;

  v1 = sub_100052E48();
  v16 = swift_allocError(&type metadata for AccessoriesAndScenesError, v1, 0, 0);
  *v2 = 2;
  swift_willThrow(v16);
  v4 = *(_QWORD *)(v0 + 392);
  v3 = *(_QWORD *)(v0 + 400);
  v5 = *(_QWORD *)(v0 + 384);

  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v5);
  v6 = *(_QWORD *)(v0 + 472);
  v8 = *(_QWORD *)(v0 + 440);
  v7 = *(_QWORD *)(v0 + 448);
  v9 = *(_QWORD *)(v0 + 432);
  v11 = *(_QWORD *)(v0 + 400);
  v10 = *(_QWORD *)(v0 + 408);
  v13 = *(_QWORD *)(v0 + 368);
  v12 = *(_QWORD *)(v0 + 376);
  v14 = *(_QWORD *)(v0 + 360);
  swift_task_dealloc(*(_QWORD *)(v0 + 480));
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10004FBD8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v2 = *(_QWORD *)(v0 + 392);
  v1 = *(_QWORD *)(v0 + 400);
  v3 = *(_QWORD *)(v0 + 384);

  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  v4 = *(_QWORD *)(v0 + 472);
  v6 = *(_QWORD *)(v0 + 440);
  v5 = *(_QWORD *)(v0 + 448);
  v7 = *(_QWORD *)(v0 + 432);
  v9 = *(_QWORD *)(v0 + 400);
  v8 = *(_QWORD *)(v0 + 408);
  v11 = *(_QWORD *)(v0 + 368);
  v10 = *(_QWORD *)(v0 + 376);
  v12 = *(_QWORD *)(v0 + 360);
  swift_task_dealloc(*(_QWORD *)(v0 + 480));
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10004FCB0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t (*v5)();

  v4 = *(_QWORD *)(*(_QWORD *)v2 + 840);
  *(_QWORD *)(*(_QWORD *)v2 + 848) = v1;
  swift_task_dealloc(v4);
  if (v1)
  {
    v5 = sub_10004FE20;
  }
  else
  {
    swift_bridgeObjectRelease(a1);
    v5 = sub_10004FD20;
  }
  return swift_task_switch(v5, 0, 0);
}

uint64_t sub_10004FD20()
{
  uint64_t v0;
  unint64_t v1;
  _BYTE *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;

  v1 = sub_100052E48();
  v16 = swift_allocError(&type metadata for AccessoriesAndScenesError, v1, 0, 0);
  *v2 = 1;
  swift_willThrow(v16);
  v4 = *(_QWORD *)(v0 + 392);
  v3 = *(_QWORD *)(v0 + 400);
  v5 = *(_QWORD *)(v0 + 384);

  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v5);
  v6 = *(_QWORD *)(v0 + 472);
  v8 = *(_QWORD *)(v0 + 440);
  v7 = *(_QWORD *)(v0 + 448);
  v9 = *(_QWORD *)(v0 + 432);
  v11 = *(_QWORD *)(v0 + 400);
  v10 = *(_QWORD *)(v0 + 408);
  v13 = *(_QWORD *)(v0 + 368);
  v12 = *(_QWORD *)(v0 + 376);
  v14 = *(_QWORD *)(v0 + 360);
  swift_task_dealloc(*(_QWORD *)(v0 + 480));
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10004FE20()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v2 = *(_QWORD *)(v0 + 392);
  v1 = *(_QWORD *)(v0 + 400);
  v3 = *(_QWORD *)(v0 + 384);

  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  v4 = *(_QWORD *)(v0 + 472);
  v6 = *(_QWORD *)(v0 + 440);
  v5 = *(_QWORD *)(v0 + 448);
  v7 = *(_QWORD *)(v0 + 432);
  v9 = *(_QWORD *)(v0 + 400);
  v8 = *(_QWORD *)(v0 + 408);
  v11 = *(_QWORD *)(v0 + 368);
  v10 = *(_QWORD *)(v0 + 376);
  v12 = *(_QWORD *)(v0 + 360);
  swift_task_dealloc(*(_QWORD *)(v0 + 480));
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10004FEF8()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t (*v4)(uint64_t, uint64_t, uint64_t, uint64_t);

  v1 = *(_QWORD *)(v0 + 512);

  v4 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))((char *)&dword_1000A64B0 + dword_1000A64B0);
  v2 = (_QWORD *)swift_task_alloc(unk_1000A64B4);
  *(_QWORD *)(v0 + 856) = v2;
  *v2 = v0;
  v2[1] = sub_10004FF74;
  return v4((uint64_t)_swiftEmptyArrayStorage, *(_QWORD *)(v0 + 312), *(_QWORD *)(v0 + 328), v1);
}

uint64_t sub_10004FF74(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t (*v5)();

  v4 = *(_QWORD *)(*(_QWORD *)v2 + 856);
  *(_QWORD *)(*(_QWORD *)v2 + 864) = v1;
  swift_task_dealloc(v4);
  if (v1)
  {
    v5 = sub_1000500D0;
  }
  else
  {
    swift_bridgeObjectRelease(a1);
    v5 = sub_10004FFE4;
  }
  return swift_task_switch(v5, 0, 0);
}

uint64_t sub_10004FFE4()
{
  uint64_t v0;
  unint64_t v1;
  _BYTE *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;

  v1 = sub_100052E48();
  v14 = swift_allocError(&type metadata for AccessoriesAndScenesError, v1, 0, 0);
  *v2 = 0;
  swift_willThrow(v14);
  v3 = *(void **)(v0 + 512);
  swift_errorRelease(*(_QWORD *)(v0 + 544));

  v4 = *(_QWORD *)(v0 + 472);
  v6 = *(_QWORD *)(v0 + 440);
  v5 = *(_QWORD *)(v0 + 448);
  v7 = *(_QWORD *)(v0 + 432);
  v9 = *(_QWORD *)(v0 + 400);
  v8 = *(_QWORD *)(v0 + 408);
  v11 = *(_QWORD *)(v0 + 368);
  v10 = *(_QWORD *)(v0 + 376);
  v12 = *(_QWORD *)(v0 + 360);
  swift_task_dealloc(*(_QWORD *)(v0 + 480));
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000500D0()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v1 = *(void **)(v0 + 512);
  swift_errorRelease(*(_QWORD *)(v0 + 544));

  v2 = *(_QWORD *)(v0 + 472);
  v4 = *(_QWORD *)(v0 + 440);
  v3 = *(_QWORD *)(v0 + 448);
  v5 = *(_QWORD *)(v0 + 432);
  v7 = *(_QWORD *)(v0 + 400);
  v6 = *(_QWORD *)(v0 + 408);
  v9 = *(_QWORD *)(v0 + 368);
  v8 = *(_QWORD *)(v0 + 376);
  v10 = *(_QWORD *)(v0 + 360);
  swift_task_dealloc(*(_QWORD *)(v0 + 480));
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100050198(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char v16;
  void (*v17)(char *, uint64_t);
  uint64_t v18;
  char v19;
  char v20;
  uint64_t *v21;
  uint64_t v22;
  char v23;
  void (*v24)(char *, uint64_t);
  uint64_t v26;
  uint64_t v27;

  v2 = type metadata accessor for ColorScheme(0);
  v27 = *(_QWORD *)(v2 - 8);
  v3 = __chkstk_darwin(v2);
  v5 = (char *)&v26 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  v7 = (char *)&v26 - v6;
  v8 = type metadata accessor for WidgetRenderingMode(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = __chkstk_darwin(v8);
  v12 = (char *)&v26 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v14 = (char *)&v26 - v13;
  type metadata accessor for WidgetViewForLargeSquareTiles(0);
  v15 = sub_10006215C((uint64_t)v14);
  static WidgetRenderingMode.vibrant.getter(v15);
  v16 = static WidgetRenderingMode.== infix(_:_:)(v14, v12);
  v17 = *(void (**)(char *, uint64_t))(v9 + 8);
  v17(v12, v8);
  v17(v14, v8);
  if ((v16 & 1) != 0)
  {
    v18 = *(_QWORD *)a1;
    v19 = *(_BYTE *)(a1 + 8);
    sub_100035568(*(_QWORD *)a1, v19);
    v20 = sub_100061B38(v18, v19);
    sub_10003561C(v18, v19);
    if ((v20 & 1) != 0)
    {
      if (qword_1000A4F20 != -1)
        swift_once(&qword_1000A4F20, sub_100076B90);
      v21 = &qword_1000A7AC8;
    }
    else
    {
      if (qword_1000A4F28 != -1)
        swift_once(&qword_1000A4F28, sub_100076BA4);
      v21 = &qword_1000A7AD0;
    }
  }
  else
  {
    sub_100061EF4((uint64_t)v7);
    v22 = v27;
    (*(void (**)(char *, _QWORD, uint64_t))(v27 + 104))(v5, enum case for ColorScheme.light(_:), v2);
    v23 = static ColorScheme.== infix(_:_:)(v7, v5);
    v24 = *(void (**)(char *, uint64_t))(v22 + 8);
    v24(v5, v2);
    v24(v7, v2);
    if ((v23 & 1) != 0)
    {
      if (qword_1000A4F30 != -1)
        swift_once(&qword_1000A4F30, sub_100076C48);
      v21 = &qword_1000A7AD8;
    }
    else
    {
      if (qword_1000A4F38 != -1)
        swift_once(&qword_1000A4F38, sub_100076C58);
      v21 = &qword_1000A7AE0;
    }
  }
  return *v21;
}

uint64_t sub_100050440()
{
  uint64_t v0;

  sub_10003561C(*(_QWORD *)(v0 + 16), *(_BYTE *)(v0 + 24));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 72, 7);
}

uint64_t sub_100050470@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_100040C60(a1, v2 + 16, a2);
}

uint64_t sub_100050478(_QWORD *a1)
{
  uint64_t v1;

  return (*(uint64_t (**)(_QWORD, _QWORD))(v1 + 16))(*a1, a1[1]);
}

_QWORD *sub_1000504A0(_QWORD *a1)
{
  swift_bridgeObjectRetain(*a1);
  return a1;
}

uint64_t sub_1000504C8(uint64_t a1)
{
  sub_100035568(*(_QWORD *)a1, *(_BYTE *)(a1 + 8));
  return a1;
}

unint64_t sub_1000504F4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000A61A8;
  if (!qword_1000A61A8)
  {
    v1 = sub_1000052BC(&qword_1000A6198);
    sub_1000229D8(&qword_1000A61B0, &qword_1000A61B8, (uint64_t)&protocol conformance descriptor for HStack<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000A61A8);
  }
  return result;
}

_QWORD *sub_100050578(_QWORD *a1)
{
  swift_bridgeObjectRelease(*a1);
  return a1;
}

uint64_t sub_1000505A0()
{
  uint64_t v0;

  sub_10003561C(*(_QWORD *)(v0 + 32), *(_BYTE *)(v0 + 40));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 48));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 88));
  return swift_deallocObject(v0, 112, 7);
}

uint64_t sub_1000505D8@<X0>(unint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;

  return sub_10004114C(a1, a2, v3 + 32, *(_QWORD *)(v3 + 88), a3, *(double *)(v3 + 16), *(double *)(v3 + 24), *(double *)(v3 + 96), *(double *)(v3 + 104));
}

uint64_t sub_1000505EC(unint64_t *a1, uint64_t *a2, void (*a3)(void))
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    v6 = sub_1000052BC(a2);
    a3();
    result = swift_getWitnessTable(&protocol conformance descriptor for <A> A?, v6);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100050650()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;

  v1 = type metadata accessor for WidgetViewsForMediumSystemFamily(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  v6 = (_QWORD *)(v0 + v4);
  v7 = sub_10000527C(&qword_1000A5C00);
  if (swift_getEnumCaseMultiPayload(v0 + v4, v7) == 1)
  {
    v8 = type metadata accessor for WidgetFamily(0);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v0 + v4, v8);
  }
  else
  {
    swift_release(*v6);
  }
  sub_10003561C(*(_QWORD *)((char *)v6 + *(int *)(v1 + 20)), *((_BYTE *)v6 + *(int *)(v1 + 20) + 8));
  swift_bridgeObjectRelease(*(_QWORD *)((char *)v6 + *(int *)(v1 + 24)));
  return swift_deallocObject(v0, v4 + v5, v3 | 7);
}

uint64_t sub_100050718@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;

  v5 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for WidgetViewsForMediumSystemFamily(0) - 8) + 80);
  return sub_100041DC0(a1, v2 + ((v5 + 16) & ~v5), a2);
}

unint64_t sub_10005076C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000A6238;
  if (!qword_1000A6238)
  {
    v1 = sub_1000052BC(&qword_1000A6230);
    sub_1000229D8(&qword_1000A6240, &qword_1000A6248, (uint64_t)&protocol conformance descriptor for HStack<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000A6238);
  }
  return result;
}

uint64_t sub_1000507F0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;

  v1 = type metadata accessor for WidgetViewsForMediumSystemFamily(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 32) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  v6 = (_QWORD *)(v0 + v4);
  v7 = sub_10000527C(&qword_1000A5C00);
  if (swift_getEnumCaseMultiPayload(v0 + v4, v7) == 1)
  {
    v8 = type metadata accessor for WidgetFamily(0);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v0 + v4, v8);
  }
  else
  {
    swift_release(*v6);
  }
  v9 = (v5 + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  sub_10003561C(*(_QWORD *)((char *)v6 + *(int *)(v1 + 20)), *((_BYTE *)v6 + *(int *)(v1 + 20) + 8));
  swift_bridgeObjectRelease(*(_QWORD *)((char *)v6 + *(int *)(v1 + 24)));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v9));
  return swift_deallocObject(v0, ((((v9 + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 8, v3 | 7);
}

uint64_t sub_1000508DC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;

  v7 = *(_QWORD *)(type metadata accessor for WidgetViewsForMediumSystemFamily(0) - 8);
  v8 = (*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  v9 = (*(_QWORD *)(v7 + 64) + v8 + 7) & 0xFFFFFFFFFFFFFFF8;
  return sub_100042378(a1, a2, v3 + v8, *(_QWORD *)(v3 + v9), a3, *(double *)(v3 + 16), *(double *)(v3 + 24), *(double *)(v3 + ((v9 + 15) & 0xFFFFFFFFFFFFFFF8)), *(double *)(v3 + ((((v9 + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFF8)));
}

uint64_t sub_100050960(char *a1)
{
  uint64_t v1;
  uint64_t (*v3)(uint64_t, char *);
  uint64_t v4;
  uint64_t v5;

  v3 = *(uint64_t (**)(uint64_t, char *))(v1 + 16);
  v4 = *(_QWORD *)a1;
  v5 = sub_10000527C(&qword_1000A6080);
  return v3(v4, &a1[*(int *)(v5 + 48)]);
}

uint64_t sub_1000509B8()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 33, 7);
}

uint64_t sub_1000509DC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_1000432E4(a1, *(_BYTE *)(v2 + 32), a2);
}

unint64_t sub_1000509E8()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[4];

  result = qword_1000A6278;
  if (!qword_1000A6278)
  {
    v1 = sub_1000052BC(&qword_1000A6270);
    v2[0] = type metadata accessor for HomeInteractiveWidgetsEntryView(255);
    v2[1] = sub_1000052BC(&qword_1000A6280);
    v2[2] = sub_100008C7C(&qword_1000A6288, type metadata accessor for HomeInteractiveWidgetsEntryView, (uint64_t)&unk_1000884F8);
    v2[3] = sub_100050AB0();
    swift_getOpaqueTypeConformance2(v2, &opaque type descriptor for <<opaque return type of View.containerBackground<A>(for:alignment:content:)>>, 1);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000A6278);
  }
  return result;
}

unint64_t sub_100050AB0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000A6290;
  if (!qword_1000A6290)
  {
    v1 = sub_1000052BC(&qword_1000A6280);
    result = swift_getWitnessTable(&protocol conformance descriptor for <A> A?, v1);
    atomic_store(result, (unint64_t *)&qword_1000A6290);
  }
  return result;
}

unint64_t sub_100050B0C()
{
  unint64_t result;

  result = qword_1000A6298;
  if (!qword_1000A6298)
  {
    result = swift_getWitnessTable(&unk_100088AB0, &type metadata for AccessoriesAndScenesTimelineProvider);
    atomic_store(result, (unint64_t *)&qword_1000A6298);
  }
  return result;
}

uint64_t type metadata accessor for AccessoriesAndScenesEntry(uint64_t a1)
{
  return sub_100050B64(a1, qword_1000A6310, (uint64_t)&nominal type descriptor for AccessoriesAndScenesEntry);
}

uint64_t sub_100050B64(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t result;

  result = *a2;
  if (!*a2)
    return swift_getSingletonMetadata(a1, a3);
  return result;
}

void sub_100050B98(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  *(double *)a1 = EnvironmentValues.widgetContentMargins.getter();
  *(_QWORD *)(a1 + 8) = v2;
  *(_QWORD *)(a1 + 16) = v3;
  *(_QWORD *)(a1 + 24) = v4;
}

uint64_t sub_100050BC4@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;

  return sub_1000437B4(*(_QWORD *)(v1 + 16), a1);
}

_QWORD *sub_100050BCC(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  _QWORD *v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v4 = a1;
  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v14 = *a2;
    *a1 = *a2;
    v4 = (_QWORD *)(v14 + ((v5 + 16) & ~(unint64_t)v5));
  }
  else
  {
    v7 = type metadata accessor for Date(0);
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(v4, a2, v7);
    v8 = *(int *)(a3 + 20);
    v9 = *(int *)(a3 + 24);
    v10 = (_QWORD *)((char *)v4 + v8);
    v11 = (_QWORD *)((char *)a2 + v8);
    v12 = *v11;
    v13 = v11[1];
    *v10 = *v11;
    v10[1] = v13;
    v14 = v11[2];
    v10[2] = v14;
    *((_BYTE *)v4 + v9) = *((_BYTE *)a2 + v9);
    swift_retain(v12);
    swift_retain(v13);
  }
  swift_retain(v14);
  return v4;
}

uint64_t sub_100050C7C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _QWORD *v5;

  v4 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  v5 = (_QWORD *)(a1 + *(int *)(a2 + 20));
  swift_release(*v5);
  swift_release(v5[1]);
  return swift_release(v5[2]);
}

uint64_t sub_100050CD4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v6 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = *(int *)(a3 + 24);
  v9 = (uint64_t *)(a1 + v7);
  v10 = (uint64_t *)(a2 + v7);
  v11 = *v10;
  v12 = v10[1];
  *v9 = *v10;
  v9[1] = v12;
  v13 = v10[2];
  v9[2] = v13;
  *(_BYTE *)(a1 + v8) = *(_BYTE *)(a2 + v8);
  swift_retain(v11);
  swift_retain(v12);
  swift_retain(v13);
  return a1;
}

uint64_t sub_100050D5C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v6 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = *(_QWORD *)(a2 + v7);
  v11 = *(_QWORD *)(a1 + v7);
  *(_QWORD *)(a1 + v7) = v10;
  swift_retain(v10);
  swift_release(v11);
  v12 = *(_QWORD *)(v9 + 8);
  v13 = *(_QWORD *)(v8 + 8);
  *(_QWORD *)(v8 + 8) = v12;
  swift_retain(v12);
  swift_release(v13);
  v14 = *(_QWORD *)(v9 + 16);
  v15 = *(_QWORD *)(v8 + 16);
  *(_QWORD *)(v8 + 16) = v14;
  swift_retain(v14);
  swift_release(v15);
  *(_BYTE *)(a1 + *(int *)(a3 + 24)) = *(_BYTE *)(a2 + *(int *)(a3 + 24));
  return a1;
}

uint64_t sub_100050E14(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v6 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = *(int *)(a3 + 24);
  v9 = a1 + v7;
  v10 = a2 + v7;
  *(_OWORD *)v9 = *(_OWORD *)v10;
  *(_QWORD *)(v9 + 16) = *(_QWORD *)(v10 + 16);
  *(_BYTE *)(a1 + v8) = *(_BYTE *)(a2 + v8);
  return a1;
}

uint64_t sub_100050E88(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v6 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = *(_QWORD *)(a1 + v7);
  *(_QWORD *)(a1 + v7) = *(_QWORD *)(a2 + v7);
  swift_release(v10);
  v11 = *(_QWORD *)(v8 + 8);
  *(_QWORD *)(v8 + 8) = *(_QWORD *)(v9 + 8);
  swift_release(v11);
  v12 = *(_QWORD *)(v8 + 16);
  *(_QWORD *)(v8 + 16) = *(_QWORD *)(v9 + 16);
  swift_release(v12);
  *(_BYTE *)(a1 + *(int *)(a3 + 24)) = *(_BYTE *)(a2 + *(int *)(a3 + 24));
  return a1;
}

uint64_t sub_100050F28(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100050F34);
}

uint64_t sub_100050F34(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;

  v6 = type metadata accessor for Date(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 20));
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  return (v9 + 1);
}

uint64_t sub_100050FB0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100050FBC);
}

uint64_t sub_100050FBC(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = type metadata accessor for Date(0);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 20)) = (a2 - 1);
  return result;
}

uint64_t sub_100051034(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[3];

  result = type metadata accessor for Date(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(result - 8) + 64;
    v4[1] = &unk_100088A10;
    v4[2] = &unk_1000884E0;
    swift_initStructMetadata(a1, 256, 3, v4, a1 + 16);
    return 0;
  }
  return result;
}

ValueMetadata *type metadata accessor for AccessoriesAndScenesTimelineProvider()
{
  return &type metadata for AccessoriesAndScenesTimelineProvider;
}

_QWORD *sub_1000510C0(_QWORD *a1, _QWORD *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;
  void (*v31)(char *, char *, uint64_t);
  uint64_t v32;
  uint64_t v33;
  char *v34;
  char *v35;
  int *v36;
  uint64_t v37;
  char *v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  void (*v56)(char *, char *, uint64_t, __n128);
  uint64_t v57;
  __n128 v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  char *v63;
  void *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  char *v69;
  uint64_t v70;
  char *v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  id v79;
  char *v81;
  _QWORD *v82;
  int *v83;
  _QWORD *v84;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v12 = *a2;
    *a1 = *a2;
    v13 = (_QWORD *)(v12 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v12);
  }
  else
  {
    v7 = sub_10000527C(&qword_1000A4FC8);
    if (swift_getEnumCaseMultiPayload(a2, v7) == 1)
    {
      v8 = type metadata accessor for ColorScheme(0);
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(a1, a2, v8);
      v9 = a1;
      v10 = v7;
      v11 = 1;
    }
    else
    {
      v14 = *a2;
      *a1 = *a2;
      swift_retain(v14);
      v9 = a1;
      v10 = v7;
      v11 = 0;
    }
    swift_storeEnumTagMultiPayload(v9, v10, v11);
    v15 = a3[5];
    v16 = (char *)a1 + v15;
    v17 = (char *)a2 + v15;
    v18 = *(_QWORD *)v17;
    v19 = v17[8];
    sub_100035568(*(_QWORD *)v17, v19);
    *(_QWORD *)v16 = v18;
    v16[8] = v19;
    v20 = a3[6];
    v21 = (_QWORD *)((char *)a1 + v20);
    v22 = (_QWORD *)((char *)a2 + v20);
    v23 = sub_10000527C(&qword_1000A4FC0);
    if (swift_getEnumCaseMultiPayload(v22, v23) == 1)
    {
      v24 = type metadata accessor for WidgetRenderingMode(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v24 - 8) + 16))(v21, v22, v24);
      v25 = 1;
    }
    else
    {
      v26 = *v22;
      *v21 = *v22;
      swift_retain(v26);
      v25 = 0;
    }
    swift_storeEnumTagMultiPayload(v21, v23, v25);
    v27 = a3[7];
    v28 = (char *)a1 + v27;
    v29 = (char *)a2 + v27;
    v83 = a3;
    v30 = type metadata accessor for UUID(0);
    v31 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v30 - 8) + 16);
    v31(v28, v29, v30);
    v32 = type metadata accessor for AccessoryAndSceneEntity(0);
    v31(&v28[*(int *)(v32 + 20)], &v29[*(int *)(v32 + 20)], v30);
    v33 = *(int *)(v32 + 24);
    v34 = &v28[v33];
    v35 = &v29[v33];
    v31(v34, v35, v30);
    v36 = (int *)type metadata accessor for WidgetTileInfo(0);
    v31(&v34[v36[5]], &v35[v36[5]], v30);
    v37 = v36[6];
    v38 = &v34[v37];
    v39 = &v35[v37];
    v40 = *((_QWORD *)v39 + 1);
    *(_QWORD *)v38 = *(_QWORD *)v39;
    *((_QWORD *)v38 + 1) = v40;
    v41 = v36[7];
    v42 = &v34[v41];
    v43 = &v35[v41];
    v44 = *((_QWORD *)v43 + 1);
    v84 = a1;
    *(_QWORD *)v42 = *(_QWORD *)v43;
    *((_QWORD *)v42 + 1) = v44;
    v45 = v36[8];
    v46 = &v34[v45];
    v47 = &v35[v45];
    v48 = *((_QWORD *)v47 + 1);
    *(_QWORD *)v46 = *(_QWORD *)v47;
    *((_QWORD *)v46 + 1) = v48;
    v49 = v36[9];
    v50 = &v34[v49];
    v51 = &v35[v49];
    v52 = *((_QWORD *)v51 + 1);
    *(_QWORD *)v50 = *(_QWORD *)v51;
    *((_QWORD *)v50 + 1) = v52;
    v53 = v36[10];
    v82 = a2;
    v54 = &v34[v53];
    v81 = &v35[v53];
    v55 = type metadata accessor for StaticRenderingMode(0);
    v56 = *(void (**)(char *, char *, uint64_t, __n128))(*(_QWORD *)(v55 - 8) + 16);
    swift_bridgeObjectRetain(v40);
    v57 = v44;
    v13 = v84;
    swift_bridgeObjectRetain(v57);
    swift_bridgeObjectRetain(v48);
    v58 = swift_bridgeObjectRetain(v52);
    v56(v54, v81, v55, v58);
    ((void (*)(char *, char *, uint64_t))v56)(&v34[v36[11]], &v35[v36[11]], v55);
    v59 = v36[12];
    v60 = *(_QWORD *)&v35[v59];
    *(_QWORD *)&v34[v59] = v60;
    v34[v36[13]] = v35[v36[13]];
    v61 = v36[14];
    v62 = &v34[v61];
    v63 = &v35[v61];
    v64 = *(void **)v63;
    LOBYTE(v63) = v63[8];
    *(_QWORD *)v62 = v64;
    v62[8] = (char)v63;
    v65 = v36[15];
    v66 = *(_QWORD *)&v35[v65];
    *(_QWORD *)&v34[v65] = v66;
    v34[v36[16]] = v35[v36[16]];
    v34[v36[17]] = v35[v36[17]];
    v67 = v36[18];
    v68 = &v34[v67];
    v69 = &v35[v67];
    *(_QWORD *)v68 = *(_QWORD *)v69;
    v68[8] = v69[8];
    v70 = v36[19];
    v71 = &v34[v70];
    v72 = &v35[v70];
    v73 = *((_QWORD *)v72 + 1);
    *(_QWORD *)v71 = *(_QWORD *)v72;
    *((_QWORD *)v71 + 1) = v73;
    v34[v36[20]] = v35[v36[20]];
    v74 = v36[21];
    v75 = *(_QWORD *)&v35[v74];
    *(_QWORD *)&v34[v74] = v75;
    v76 = v36[22];
    v77 = *(_QWORD *)&v35[v76];
    *(_QWORD *)&v34[v76] = v77;
    v78 = v83[9];
    *(_OWORD *)((char *)v84 + v83[8]) = *(_OWORD *)((char *)v82 + v83[8]);
    *(_QWORD *)((char *)v84 + v78) = *(_QWORD *)((char *)v82 + v78);
    swift_retain(v60);
    v79 = v64;
    swift_bridgeObjectRetain(v66);
    swift_bridgeObjectRetain(v73);
    swift_bridgeObjectRetain(v75);
    swift_bridgeObjectRetain(v77);
  }
  return v13;
}

uint64_t sub_100051488(_QWORD *a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  void (*v11)(char *, uint64_t);
  uint64_t v12;
  char *v13;
  int *v14;
  char *v15;
  uint64_t v16;
  void (*v17)(char *, uint64_t);

  v4 = sub_10000527C(&qword_1000A4FC8);
  if (swift_getEnumCaseMultiPayload(a1, v4) == 1)
  {
    v5 = type metadata accessor for ColorScheme(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(a1, v5);
  }
  else
  {
    swift_release(*a1);
  }
  sub_10003561C(*(_QWORD *)((char *)a1 + a2[5]), *((_BYTE *)a1 + a2[5] + 8));
  v6 = (_QWORD *)((char *)a1 + a2[6]);
  v7 = sub_10000527C(&qword_1000A4FC0);
  if (swift_getEnumCaseMultiPayload(v6, v7) == 1)
  {
    v8 = type metadata accessor for WidgetRenderingMode(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v6, v8);
  }
  else
  {
    swift_release(*v6);
  }
  v9 = (char *)a1 + a2[7];
  v10 = type metadata accessor for UUID(0);
  v11 = *(void (**)(char *, uint64_t))(*(_QWORD *)(v10 - 8) + 8);
  v11(v9, v10);
  v12 = type metadata accessor for AccessoryAndSceneEntity(0);
  v11(&v9[*(int *)(v12 + 20)], v10);
  v13 = &v9[*(int *)(v12 + 24)];
  v11(v13, v10);
  v14 = (int *)type metadata accessor for WidgetTileInfo(0);
  v11(&v13[v14[5]], v10);
  swift_bridgeObjectRelease(*(_QWORD *)&v13[v14[6] + 8]);
  swift_bridgeObjectRelease(*(_QWORD *)&v13[v14[7] + 8]);
  swift_bridgeObjectRelease(*(_QWORD *)&v13[v14[8] + 8]);
  swift_bridgeObjectRelease(*(_QWORD *)&v13[v14[9] + 8]);
  v15 = &v13[v14[10]];
  v16 = type metadata accessor for StaticRenderingMode(0);
  v17 = *(void (**)(char *, uint64_t))(*(_QWORD *)(v16 - 8) + 8);
  v17(v15, v16);
  v17(&v13[v14[11]], v16);
  swift_release(*(_QWORD *)&v13[v14[12]]);

  swift_bridgeObjectRelease(*(_QWORD *)&v13[v14[15]]);
  swift_bridgeObjectRelease(*(_QWORD *)&v13[v14[19] + 8]);
  swift_bridgeObjectRelease(*(_QWORD *)&v13[v14[21]]);
  return swift_bridgeObjectRelease(*(_QWORD *)&v13[v14[22]]);
}

_QWORD *sub_100051698(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  void (*v28)(char *, char *, uint64_t);
  uint64_t v29;
  uint64_t v30;
  char *v31;
  char *v32;
  int *v33;
  uint64_t v34;
  char *v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  void (*v53)(char *, char *, uint64_t, __n128);
  __n128 v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  char *v59;
  void *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  char *v65;
  uint64_t v66;
  char *v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  id v75;
  char *v77;
  _QWORD *v78;
  _QWORD *v79;
  int *v80;

  v6 = sub_10000527C(&qword_1000A4FC8);
  if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
  {
    v7 = type metadata accessor for ColorScheme(0);
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = a1;
    v9 = v6;
    v10 = 1;
  }
  else
  {
    v11 = *a2;
    *a1 = *a2;
    swift_retain(v11);
    v8 = a1;
    v9 = v6;
    v10 = 0;
  }
  swift_storeEnumTagMultiPayload(v8, v9, v10);
  v12 = a3[5];
  v13 = (char *)a1 + v12;
  v14 = (char *)a2 + v12;
  v15 = *(_QWORD *)v14;
  v16 = v14[8];
  sub_100035568(*(_QWORD *)v14, v16);
  *(_QWORD *)v13 = v15;
  v13[8] = v16;
  v17 = a3[6];
  v18 = (_QWORD *)((char *)a1 + v17);
  v19 = (_QWORD *)((char *)a2 + v17);
  v20 = sub_10000527C(&qword_1000A4FC0);
  if (swift_getEnumCaseMultiPayload(v19, v20) == 1)
  {
    v21 = type metadata accessor for WidgetRenderingMode(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v21 - 8) + 16))(v18, v19, v21);
    v22 = 1;
  }
  else
  {
    v23 = *v19;
    *v18 = *v19;
    swift_retain(v23);
    v22 = 0;
  }
  swift_storeEnumTagMultiPayload(v18, v20, v22);
  v24 = a3[7];
  v25 = (char *)a1 + v24;
  v26 = (char *)a2 + v24;
  v80 = a3;
  v27 = type metadata accessor for UUID(0);
  v28 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v27 - 8) + 16);
  v28(v25, v26, v27);
  v29 = type metadata accessor for AccessoryAndSceneEntity(0);
  v28(&v25[*(int *)(v29 + 20)], &v26[*(int *)(v29 + 20)], v27);
  v30 = *(int *)(v29 + 24);
  v31 = &v25[v30];
  v32 = &v26[v30];
  v28(v31, v32, v27);
  v33 = (int *)type metadata accessor for WidgetTileInfo(0);
  v28(&v31[v33[5]], &v32[v33[5]], v27);
  v34 = v33[6];
  v35 = &v31[v34];
  v36 = &v32[v34];
  v37 = *((_QWORD *)v36 + 1);
  *(_QWORD *)v35 = *(_QWORD *)v36;
  *((_QWORD *)v35 + 1) = v37;
  v38 = v33[7];
  v39 = &v31[v38];
  v40 = &v32[v38];
  v41 = *((_QWORD *)v40 + 1);
  *(_QWORD *)v39 = *(_QWORD *)v40;
  *((_QWORD *)v39 + 1) = v41;
  v42 = v33[8];
  v43 = &v31[v42];
  v44 = &v32[v42];
  v45 = *((_QWORD *)v44 + 1);
  *(_QWORD *)v43 = *(_QWORD *)v44;
  *((_QWORD *)v43 + 1) = v45;
  v46 = v33[9];
  v47 = &v31[v46];
  v48 = &v32[v46];
  v49 = *((_QWORD *)v48 + 1);
  *(_QWORD *)v47 = *(_QWORD *)v48;
  *((_QWORD *)v47 + 1) = v49;
  v50 = v33[10];
  v79 = a2;
  v51 = &v31[v50];
  v77 = &v32[v50];
  v52 = type metadata accessor for StaticRenderingMode(0);
  v78 = a1;
  v53 = *(void (**)(char *, char *, uint64_t, __n128))(*(_QWORD *)(v52 - 8) + 16);
  swift_bridgeObjectRetain(v37);
  swift_bridgeObjectRetain(v41);
  swift_bridgeObjectRetain(v45);
  v54 = swift_bridgeObjectRetain(v49);
  v53(v51, v77, v52, v54);
  ((void (*)(char *, char *, uint64_t))v53)(&v31[v33[11]], &v32[v33[11]], v52);
  v55 = v33[12];
  v56 = *(_QWORD *)&v32[v55];
  *(_QWORD *)&v31[v55] = v56;
  v31[v33[13]] = v32[v33[13]];
  v57 = v33[14];
  v58 = &v31[v57];
  v59 = &v32[v57];
  v60 = *(void **)v59;
  LOBYTE(v59) = v59[8];
  *(_QWORD *)v58 = v60;
  v58[8] = (char)v59;
  v61 = v33[15];
  v62 = *(_QWORD *)&v32[v61];
  *(_QWORD *)&v31[v61] = v62;
  v31[v33[16]] = v32[v33[16]];
  v31[v33[17]] = v32[v33[17]];
  v63 = v33[18];
  v64 = &v31[v63];
  v65 = &v32[v63];
  *(_QWORD *)v64 = *(_QWORD *)v65;
  v64[8] = v65[8];
  v66 = v33[19];
  v67 = &v31[v66];
  v68 = &v32[v66];
  v69 = *((_QWORD *)v68 + 1);
  *(_QWORD *)v67 = *(_QWORD *)v68;
  *((_QWORD *)v67 + 1) = v69;
  v31[v33[20]] = v32[v33[20]];
  v70 = v33[21];
  v71 = *(_QWORD *)&v32[v70];
  *(_QWORD *)&v31[v70] = v71;
  v72 = v33[22];
  v73 = *(_QWORD *)&v32[v72];
  *(_QWORD *)&v31[v72] = v73;
  v74 = v80[9];
  *(_OWORD *)((char *)v78 + v80[8]) = *(_OWORD *)((char *)v79 + v80[8]);
  *(_QWORD *)((char *)v78 + v74) = *(_QWORD *)((char *)v79 + v74);
  swift_retain(v56);
  v75 = v60;
  swift_bridgeObjectRetain(v62);
  swift_bridgeObjectRetain(v69);
  swift_bridgeObjectRetain(v71);
  swift_bridgeObjectRetain(v73);
  return v78;
}

uint64_t *sub_100051A34(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  void (*v30)(char *, char *, uint64_t);
  uint64_t v31;
  uint64_t v32;
  char *v33;
  char *v34;
  int *v35;
  uint64_t v36;
  char *v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  char *v58;
  uint64_t v59;
  void (*v60)(char *, char *, uint64_t);
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  char *v66;
  void *v67;
  void *v68;
  id v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  char *v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  char *v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  _QWORD *v89;
  _QWORD *v90;

  if (a1 != a2)
  {
    sub_100014EFC((uint64_t)a1, &qword_1000A4FC8);
    v6 = sub_10000527C(&qword_1000A4FC8);
    if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
    {
      v7 = type metadata accessor for ColorScheme(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
      v8 = a1;
      v9 = v6;
      v10 = 1;
    }
    else
    {
      v11 = *a2;
      *a1 = *a2;
      swift_retain(v11);
      v8 = a1;
      v9 = v6;
      v10 = 0;
    }
    swift_storeEnumTagMultiPayload(v8, v9, v10);
  }
  v12 = a3[5];
  v13 = (char *)a1 + v12;
  v14 = (char *)a2 + v12;
  v15 = *(_QWORD *)v14;
  v16 = v14[8];
  sub_100035568(*(_QWORD *)v14, v16);
  v17 = *(_QWORD *)v13;
  v18 = v13[8];
  *(_QWORD *)v13 = v15;
  v13[8] = v16;
  sub_10003561C(v17, v18);
  if (a1 != a2)
  {
    v19 = a3[6];
    v20 = (uint64_t *)((char *)a1 + v19);
    v21 = (uint64_t *)((char *)a2 + v19);
    sub_100014EFC((uint64_t)a1 + v19, &qword_1000A4FC0);
    v22 = sub_10000527C(&qword_1000A4FC0);
    if (swift_getEnumCaseMultiPayload(v21, v22) == 1)
    {
      v23 = type metadata accessor for WidgetRenderingMode(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v23 - 8) + 16))(v20, v21, v23);
      v24 = 1;
    }
    else
    {
      v25 = *v21;
      *v20 = *v21;
      swift_retain(v25);
      v24 = 0;
    }
    swift_storeEnumTagMultiPayload(v20, v22, v24);
  }
  v26 = a3[7];
  v27 = (char *)a1 + v26;
  v28 = (char *)a2 + v26;
  v29 = type metadata accessor for UUID(0);
  v30 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v29 - 8) + 24);
  v30(v27, v28, v29);
  v31 = type metadata accessor for AccessoryAndSceneEntity(0);
  v30(&v27[*(int *)(v31 + 20)], &v28[*(int *)(v31 + 20)], v29);
  v32 = *(int *)(v31 + 24);
  v33 = &v27[v32];
  v34 = &v28[v32];
  v30(v33, v34, v29);
  v35 = (int *)type metadata accessor for WidgetTileInfo(0);
  v30(&v33[v35[5]], &v34[v35[5]], v29);
  v36 = v35[6];
  v37 = &v33[v36];
  v38 = &v34[v36];
  *(_QWORD *)v37 = *(_QWORD *)v38;
  v39 = *((_QWORD *)v38 + 1);
  v40 = *((_QWORD *)v37 + 1);
  *((_QWORD *)v37 + 1) = v39;
  swift_bridgeObjectRetain(v39);
  swift_bridgeObjectRelease(v40);
  v41 = v35[7];
  v42 = &v33[v41];
  v43 = &v34[v41];
  *(_QWORD *)v42 = *(_QWORD *)v43;
  v44 = *((_QWORD *)v43 + 1);
  v45 = *((_QWORD *)v42 + 1);
  *((_QWORD *)v42 + 1) = v44;
  swift_bridgeObjectRetain(v44);
  swift_bridgeObjectRelease(v45);
  v46 = v35[8];
  v47 = &v33[v46];
  v48 = &v34[v46];
  *(_QWORD *)v47 = *(_QWORD *)v48;
  v49 = *((_QWORD *)v48 + 1);
  v50 = *((_QWORD *)v47 + 1);
  *((_QWORD *)v47 + 1) = v49;
  swift_bridgeObjectRetain(v49);
  swift_bridgeObjectRelease(v50);
  v51 = v35[9];
  v52 = &v33[v51];
  v53 = &v34[v51];
  *(_QWORD *)v52 = *(_QWORD *)v53;
  v54 = *((_QWORD *)v53 + 1);
  v55 = *((_QWORD *)v52 + 1);
  *((_QWORD *)v52 + 1) = v54;
  swift_bridgeObjectRetain(v54);
  swift_bridgeObjectRelease(v55);
  v56 = v35[10];
  v57 = &v33[v56];
  v58 = &v34[v56];
  v59 = type metadata accessor for StaticRenderingMode(0);
  v60 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v59 - 8) + 24);
  v60(v57, v58, v59);
  v60(&v33[v35[11]], &v34[v35[11]], v59);
  v61 = v35[12];
  v62 = *(_QWORD *)&v34[v61];
  v63 = *(_QWORD *)&v33[v61];
  *(_QWORD *)&v33[v61] = v62;
  swift_retain(v62);
  swift_release(v63);
  v33[v35[13]] = v34[v35[13]];
  v64 = v35[14];
  v65 = &v33[v64];
  v66 = &v34[v64];
  v67 = *(void **)v66;
  LOBYTE(v66) = v66[8];
  v68 = *(void **)v65;
  *(_QWORD *)v65 = v67;
  v65[8] = (char)v66;
  v69 = v67;

  v70 = v35[15];
  v71 = *(_QWORD *)&v34[v70];
  v72 = *(_QWORD *)&v33[v70];
  *(_QWORD *)&v33[v70] = v71;
  swift_bridgeObjectRetain(v71);
  swift_bridgeObjectRelease(v72);
  v33[v35[16]] = v34[v35[16]];
  v33[v35[17]] = v34[v35[17]];
  v73 = v35[18];
  v74 = &v33[v73];
  v75 = &v34[v73];
  v76 = *(_QWORD *)v75;
  v74[8] = v75[8];
  *(_QWORD *)v74 = v76;
  v77 = v35[19];
  v78 = &v33[v77];
  v79 = &v34[v77];
  *(_QWORD *)v78 = *(_QWORD *)v79;
  v80 = *((_QWORD *)v79 + 1);
  v81 = *((_QWORD *)v78 + 1);
  *((_QWORD *)v78 + 1) = v80;
  swift_bridgeObjectRetain(v80);
  swift_bridgeObjectRelease(v81);
  v33[v35[20]] = v34[v35[20]];
  v82 = v35[21];
  v83 = *(_QWORD *)&v34[v82];
  v84 = *(_QWORD *)&v33[v82];
  *(_QWORD *)&v33[v82] = v83;
  swift_bridgeObjectRetain(v83);
  swift_bridgeObjectRelease(v84);
  v85 = v35[22];
  v86 = *(_QWORD *)&v34[v85];
  v87 = *(_QWORD *)&v33[v85];
  *(_QWORD *)&v33[v85] = v86;
  swift_bridgeObjectRetain(v86);
  swift_bridgeObjectRelease(v87);
  v88 = a3[8];
  v89 = (uint64_t *)((char *)a1 + v88);
  v90 = (uint64_t *)((char *)a2 + v88);
  *v89 = *v90;
  v89[1] = v90[1];
  *(uint64_t *)((char *)a1 + a3[9]) = *(uint64_t *)((char *)a2 + a3[9]);
  return a1;
}

char *sub_100051E7C(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  void (*v20)(char *, char *, uint64_t);
  uint64_t v21;
  uint64_t v22;
  char *v23;
  char *v24;
  int *v25;
  uint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  void (*v30)(char *, char *, uint64_t);
  uint64_t v31;
  char *v32;
  char *v33;
  uint64_t v34;
  char *v35;
  char *v36;
  uint64_t v37;

  v6 = sub_10000527C(&qword_1000A4FC8);
  if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
  {
    v7 = type metadata accessor for ColorScheme(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a1, a2, v7);
    swift_storeEnumTagMultiPayload(a1, v6, 1);
  }
  else
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
  }
  v8 = a3[5];
  v9 = a3[6];
  v10 = &a1[v8];
  v11 = &a2[v8];
  *(_QWORD *)v10 = *(_QWORD *)v11;
  v10[8] = v11[8];
  v12 = &a1[v9];
  v13 = &a2[v9];
  v14 = sub_10000527C(&qword_1000A4FC0);
  if (swift_getEnumCaseMultiPayload(v13, v14) == 1)
  {
    v15 = type metadata accessor for WidgetRenderingMode(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v15 - 8) + 32))(v12, v13, v15);
    swift_storeEnumTagMultiPayload(v12, v14, 1);
  }
  else
  {
    memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
  }
  v16 = a3[7];
  v17 = &a1[v16];
  v18 = &a2[v16];
  v19 = type metadata accessor for UUID(0);
  v20 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v19 - 8) + 32);
  v20(v17, v18, v19);
  v21 = type metadata accessor for AccessoryAndSceneEntity(0);
  v20(&v17[*(int *)(v21 + 20)], &v18[*(int *)(v21 + 20)], v19);
  v22 = *(int *)(v21 + 24);
  v23 = &v17[v22];
  v24 = &v18[v22];
  v20(v23, v24, v19);
  v25 = (int *)type metadata accessor for WidgetTileInfo(0);
  v20(&v23[v25[5]], &v24[v25[5]], v19);
  *(_OWORD *)&v23[v25[6]] = *(_OWORD *)&v24[v25[6]];
  *(_OWORD *)&v23[v25[7]] = *(_OWORD *)&v24[v25[7]];
  *(_OWORD *)&v23[v25[8]] = *(_OWORD *)&v24[v25[8]];
  *(_OWORD *)&v23[v25[9]] = *(_OWORD *)&v24[v25[9]];
  v26 = v25[10];
  v27 = &v23[v26];
  v28 = &v24[v26];
  v29 = type metadata accessor for StaticRenderingMode(0);
  v30 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v29 - 8) + 32);
  v30(v27, v28, v29);
  v30(&v23[v25[11]], &v24[v25[11]], v29);
  *(_QWORD *)&v23[v25[12]] = *(_QWORD *)&v24[v25[12]];
  v23[v25[13]] = v24[v25[13]];
  v31 = v25[14];
  v32 = &v23[v31];
  v33 = &v24[v31];
  *(_QWORD *)v32 = *(_QWORD *)v33;
  v32[8] = v33[8];
  *(_QWORD *)&v23[v25[15]] = *(_QWORD *)&v24[v25[15]];
  v23[v25[16]] = v24[v25[16]];
  v23[v25[17]] = v24[v25[17]];
  v34 = v25[18];
  v35 = &v23[v34];
  v36 = &v24[v34];
  *(_QWORD *)v35 = *(_QWORD *)v36;
  v35[8] = v36[8];
  *(_OWORD *)&v23[v25[19]] = *(_OWORD *)&v24[v25[19]];
  v23[v25[20]] = v24[v25[20]];
  *(_QWORD *)&v23[v25[21]] = *(_QWORD *)&v24[v25[21]];
  *(_QWORD *)&v23[v25[22]] = *(_QWORD *)&v24[v25[22]];
  v37 = a3[9];
  *(_OWORD *)&a1[a3[8]] = *(_OWORD *)&a2[a3[8]];
  *(_QWORD *)&a1[v37] = *(_QWORD *)&a2[v37];
  return a1;
}

char *sub_100052178(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  void (*v23)(char *, char *, uint64_t);
  uint64_t v24;
  uint64_t v25;
  char *v26;
  char *v27;
  int *v28;
  uint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  char *v55;
  uint64_t v56;
  void (*v57)(char *, char *, uint64_t);
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  char *v62;
  uint64_t v63;
  void *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  char *v69;
  uint64_t v70;
  char *v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;

  if (a1 != a2)
  {
    sub_100014EFC((uint64_t)a1, &qword_1000A4FC8);
    v6 = sub_10000527C(&qword_1000A4FC8);
    if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
    {
      v7 = type metadata accessor for ColorScheme(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a1, a2, v7);
      swift_storeEnumTagMultiPayload(a1, v6, 1);
    }
    else
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
    }
  }
  v8 = a3[5];
  v9 = &a1[v8];
  v10 = &a2[v8];
  v11 = *(_QWORD *)v10;
  LOBYTE(v10) = v10[8];
  v12 = *(_QWORD *)v9;
  v13 = v9[8];
  *(_QWORD *)v9 = v11;
  v9[8] = (char)v10;
  sub_10003561C(v12, v13);
  if (a1 != a2)
  {
    v14 = a3[6];
    v15 = &a1[v14];
    v16 = &a2[v14];
    sub_100014EFC((uint64_t)&a1[v14], &qword_1000A4FC0);
    v17 = sub_10000527C(&qword_1000A4FC0);
    if (swift_getEnumCaseMultiPayload(v16, v17) == 1)
    {
      v18 = type metadata accessor for WidgetRenderingMode(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v18 - 8) + 32))(v15, v16, v18);
      swift_storeEnumTagMultiPayload(v15, v17, 1);
    }
    else
    {
      memcpy(v15, v16, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
    }
  }
  v19 = a3[7];
  v20 = &a1[v19];
  v21 = &a2[v19];
  v22 = type metadata accessor for UUID(0);
  v23 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v22 - 8) + 40);
  v23(v20, v21, v22);
  v24 = type metadata accessor for AccessoryAndSceneEntity(0);
  v23(&v20[*(int *)(v24 + 20)], &v21[*(int *)(v24 + 20)], v22);
  v25 = *(int *)(v24 + 24);
  v26 = &v20[v25];
  v27 = &v21[v25];
  v23(v26, v27, v22);
  v28 = (int *)type metadata accessor for WidgetTileInfo(0);
  v23(&v26[v28[5]], &v27[v28[5]], v22);
  v29 = v28[6];
  v30 = &v26[v29];
  v31 = &v27[v29];
  v33 = *(_QWORD *)v31;
  v32 = *((_QWORD *)v31 + 1);
  v34 = *((_QWORD *)v30 + 1);
  *(_QWORD *)v30 = v33;
  *((_QWORD *)v30 + 1) = v32;
  swift_bridgeObjectRelease(v34);
  v35 = v28[7];
  v36 = &v26[v35];
  v37 = &v27[v35];
  v39 = *(_QWORD *)v37;
  v38 = *((_QWORD *)v37 + 1);
  v40 = *((_QWORD *)v36 + 1);
  *(_QWORD *)v36 = v39;
  *((_QWORD *)v36 + 1) = v38;
  swift_bridgeObjectRelease(v40);
  v41 = v28[8];
  v42 = &v26[v41];
  v43 = &v27[v41];
  v45 = *(_QWORD *)v43;
  v44 = *((_QWORD *)v43 + 1);
  v46 = *((_QWORD *)v42 + 1);
  *(_QWORD *)v42 = v45;
  *((_QWORD *)v42 + 1) = v44;
  swift_bridgeObjectRelease(v46);
  v47 = v28[9];
  v48 = &v26[v47];
  v49 = &v27[v47];
  v51 = *(_QWORD *)v49;
  v50 = *((_QWORD *)v49 + 1);
  v52 = *((_QWORD *)v48 + 1);
  *(_QWORD *)v48 = v51;
  *((_QWORD *)v48 + 1) = v50;
  swift_bridgeObjectRelease(v52);
  v53 = v28[10];
  v54 = &v26[v53];
  v55 = &v27[v53];
  v56 = type metadata accessor for StaticRenderingMode(0);
  v57 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v56 - 8) + 40);
  v57(v54, v55, v56);
  v57(&v26[v28[11]], &v27[v28[11]], v56);
  v58 = v28[12];
  v59 = *(_QWORD *)&v26[v58];
  *(_QWORD *)&v26[v58] = *(_QWORD *)&v27[v58];
  swift_release(v59);
  v26[v28[13]] = v27[v28[13]];
  v60 = v28[14];
  v61 = &v26[v60];
  v62 = &v27[v60];
  v63 = *(_QWORD *)v62;
  LOBYTE(v62) = v62[8];
  v64 = *(void **)v61;
  *(_QWORD *)v61 = v63;
  v61[8] = (char)v62;

  v65 = v28[15];
  v66 = *(_QWORD *)&v26[v65];
  *(_QWORD *)&v26[v65] = *(_QWORD *)&v27[v65];
  swift_bridgeObjectRelease(v66);
  v26[v28[16]] = v27[v28[16]];
  v26[v28[17]] = v27[v28[17]];
  v67 = v28[18];
  v68 = &v26[v67];
  v69 = &v27[v67];
  v68[8] = v69[8];
  *(_QWORD *)v68 = *(_QWORD *)v69;
  v70 = v28[19];
  v71 = &v26[v70];
  v72 = &v27[v70];
  v74 = *(_QWORD *)v72;
  v73 = *((_QWORD *)v72 + 1);
  v75 = *((_QWORD *)v71 + 1);
  *(_QWORD *)v71 = v74;
  *((_QWORD *)v71 + 1) = v73;
  swift_bridgeObjectRelease(v75);
  v26[v28[20]] = v27[v28[20]];
  v76 = v28[21];
  v77 = *(_QWORD *)&v26[v76];
  *(_QWORD *)&v26[v76] = *(_QWORD *)&v27[v76];
  swift_bridgeObjectRelease(v77);
  v78 = v28[22];
  v79 = *(_QWORD *)&v26[v78];
  *(_QWORD *)&v26[v78] = *(_QWORD *)&v27[v78];
  swift_bridgeObjectRelease(v79);
  v80 = a3[9];
  *(_OWORD *)&a1[a3[8]] = *(_OWORD *)&a2[a3[8]];
  *(_QWORD *)&a1[v80] = *(_QWORD *)&a2[v80];
  return a1;
}

uint64_t sub_10005252C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100052538);
}

uint64_t sub_100052538(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v6 = sub_10000527C(&qword_1000A5CD8);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  if ((_DWORD)a2 == 254)
  {
    v9 = *(unsigned __int8 *)(a1 + a3[5] + 8);
    if (v9 > 1)
      return (v9 ^ 0xFF) + 1;
    else
      return 0;
  }
  else
  {
    v10 = sub_10000527C(&qword_1000A5E88);
    v11 = *(_QWORD *)(v10 - 8);
    if (*(_DWORD *)(v11 + 84) == (_DWORD)a2)
    {
      v12 = v10;
      v13 = a3[6];
    }
    else
    {
      v12 = type metadata accessor for AccessoryAndSceneEntity(0);
      v11 = *(_QWORD *)(v12 - 8);
      v13 = a3[7];
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v11 + 48))(a1 + v13, a2, v12);
  }
}

uint64_t sub_100052608(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100052614);
}

uint64_t sub_100052614(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  result = sub_10000527C(&qword_1000A5CD8);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = result;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    if (a3 == 254)
    {
      *(_BYTE *)(a1 + a4[5] + 8) = -(char)a2;
      return result;
    }
    v13 = sub_10000527C(&qword_1000A5E88);
    v14 = *(_QWORD *)(v13 - 8);
    if (*(_DWORD *)(v14 + 84) == a3)
    {
      v10 = v13;
      v15 = a4[6];
    }
    else
    {
      v10 = type metadata accessor for AccessoryAndSceneEntity(0);
      v14 = *(_QWORD *)(v10 - 8);
      v15 = a4[7];
    }
    v12 = a1 + v15;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
  }
  return v11(v12, a2, a2, v10);
}

void sub_1000526E4(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  _QWORD v8[6];

  sub_100048D10(319, &qword_1000A5EF8, (uint64_t (*)(uint64_t))&type metadata accessor for ColorScheme);
  if (v3 <= 0x3F)
  {
    v8[0] = *(_QWORD *)(v2 - 8) + 64;
    v8[1] = "\t";
    sub_100048D10(319, (unint64_t *)&qword_1000A5F00, (uint64_t (*)(uint64_t))&type metadata accessor for WidgetRenderingMode);
    if (v5 <= 0x3F)
    {
      v8[2] = *(_QWORD *)(v4 - 8) + 64;
      v6 = type metadata accessor for AccessoryAndSceneEntity(319);
      if (v7 <= 0x3F)
      {
        v8[3] = *(_QWORD *)(v6 - 8) + 64;
        v8[4] = &unk_100088660;
        v8[5] = (char *)&value witness table for Builtin.Int64 + 64;
        swift_initStructMetadata(a1, 256, 6, v8, a1 + 16);
      }
    }
  }
}

uint64_t sub_1000527C4()
{
  return sub_1000229D8(&qword_1000A63F0, &qword_1000A63F8, (uint64_t)&protocol conformance descriptor for HStack<A>);
}

unint64_t sub_1000527F4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000A6400;
  if (!qword_1000A6400)
  {
    v1 = sub_1000052BC(&qword_1000A6078);
    sub_1000229D8(&qword_1000A6408, &qword_1000A6048, (uint64_t)&protocol conformance descriptor for HStack<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000A6400);
  }
  return result;
}

unint64_t sub_10005287C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000A6410;
  if (!qword_1000A6410)
  {
    v1 = sub_1000052BC(&qword_1000A6188);
    sub_1000229D8(&qword_1000A6418, &qword_1000A6178, (uint64_t)&protocol conformance descriptor for VStack<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000A6410);
  }
  return result;
}

unint64_t sub_100052904()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000A6420;
  if (!qword_1000A6420)
  {
    v1 = sub_1000052BC(&qword_1000A6228);
    sub_1000229D8(&qword_1000A6428, &qword_1000A6218, (uint64_t)&protocol conformance descriptor for VStack<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000A6420);
  }
  return result;
}

uint64_t sub_100052988()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t OpaqueTypeConformance2;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  unint64_t v19;

  v0 = sub_1000052BC(&qword_1000A4FB8);
  v1 = sub_1000052BC(&qword_1000A4F78);
  v2 = sub_1000052BC(&qword_1000A4F80);
  v3 = sub_1000052BC(&qword_1000A4F88);
  v4 = sub_1000052BC(&qword_1000A4F90);
  v5 = sub_1000052BC(&qword_1000A4F98);
  v6 = sub_1000052BC(&qword_1000A4FA0);
  v7 = sub_1000229D8(&qword_1000A4FA8, &qword_1000A4FA0, (uint64_t)&protocol conformance descriptor for AppIntentConfiguration<A, B>);
  v8 = sub_100005300();
  v16 = v6;
  v17 = &type metadata for String;
  v18 = v7;
  v19 = v8;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v16, &opaque type descriptor for <<opaque return type of WidgetConfiguration.configurationDisplayName<A>(_:)>>, 1);
  v16 = v5;
  v17 = &type metadata for String;
  v18 = OpaqueTypeConformance2;
  v19 = v8;
  v10 = swift_getOpaqueTypeConformance2(&v16, &opaque type descriptor for <<opaque return type of WidgetConfiguration.description<A>(_:)>>, 1);
  v16 = v4;
  v17 = (void *)v10;
  v11 = swift_getOpaqueTypeConformance2(&v16, &opaque type descriptor for <<opaque return type of WidgetConfiguration.supportedFamilies(_:)>>, 1);
  v16 = v3;
  v17 = (void *)v11;
  v12 = swift_getOpaqueTypeConformance2(&v16, &opaque type descriptor for <<opaque return type of WidgetConfiguration.preferredBackgroundStyle(_:)>>, 1);
  v16 = v2;
  v17 = (void *)v12;
  v13 = swift_getOpaqueTypeConformance2(&v16, &opaque type descriptor for <<opaque return type of WidgetConfiguration.supportsVibrantContent(_:)>>, 1);
  v16 = v1;
  v17 = (void *)v13;
  v14 = swift_getOpaqueTypeConformance2(&v16, &unk_10008C408, 1);
  v16 = v0;
  v17 = (void *)v14;
  return swift_getOpaqueTypeConformance2(&v16, &unk_10008C45C, 1);
}

uint64_t sub_100052B18()
{
  return sub_100008C7C(qword_1000A6430, type metadata accessor for AccessoriesAndScenesEntry, (uint64_t)&unk_100088A80);
}

uint64_t sub_100052B48(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_10008CAD0, 1);
}

uint64_t sub_100052B58()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  void (*v18)(char *, uint64_t);
  uint64_t v19;
  uint64_t v20;
  char v21;
  char v22;
  uint64_t *v23;
  uint64_t v24;
  char v25;
  void (*v26)(char *, uint64_t);
  uint64_t v28;
  uint64_t v29;

  v1 = v0;
  v2 = type metadata accessor for ColorScheme(0);
  v29 = *(_QWORD *)(v2 - 8);
  v3 = __chkstk_darwin(v2);
  v5 = (char *)&v28 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  v7 = (char *)&v28 - v6;
  v8 = type metadata accessor for WidgetRenderingMode(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = __chkstk_darwin(v8);
  v12 = (char *)&v28 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v14 = (char *)&v28 - v13;
  v15 = type metadata accessor for LargeSquareTileViewToggleStyle(0);
  v16 = sub_10006215C((uint64_t)v14);
  static WidgetRenderingMode.vibrant.getter(v16);
  v17 = static WidgetRenderingMode.== infix(_:_:)(v14, v12);
  v18 = *(void (**)(char *, uint64_t))(v9 + 8);
  v18(v12, v8);
  v18(v14, v8);
  if ((v17 & 1) != 0)
  {
    v19 = v1 + *(int *)(v15 + 20);
    v20 = *(_QWORD *)v19;
    v21 = *(_BYTE *)(v19 + 8);
    sub_100035568(*(_QWORD *)v19, v21);
    v22 = sub_100061B38(v20, v21);
    sub_10003561C(v20, v21);
    if ((v22 & 1) != 0)
    {
      if (qword_1000A4F20 != -1)
        swift_once(&qword_1000A4F20, sub_100076B90);
      v23 = &qword_1000A7AC8;
    }
    else
    {
      if (qword_1000A4F28 != -1)
        swift_once(&qword_1000A4F28, sub_100076BA4);
      v23 = &qword_1000A7AD0;
    }
  }
  else
  {
    sub_100061EF4((uint64_t)v7);
    v24 = v29;
    (*(void (**)(char *, _QWORD, uint64_t))(v29 + 104))(v5, enum case for ColorScheme.light(_:), v2);
    v25 = static ColorScheme.== infix(_:_:)(v7, v5);
    v26 = *(void (**)(char *, uint64_t))(v24 + 8);
    v26(v5, v2);
    v26(v7, v2);
    if ((v25 & 1) != 0)
    {
      if (qword_1000A4F30 != -1)
        swift_once(&qword_1000A4F30, sub_100076C48);
      v23 = &qword_1000A7AD8;
    }
    else
    {
      if (qword_1000A4F38 != -1)
        swift_once(&qword_1000A4F38, sub_100076C58);
      v23 = &qword_1000A7AE0;
    }
  }
  return *v23;
}

uint64_t sub_100052E04(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;

  v5 = sub_10000527C(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

unint64_t sub_100052E48()
{
  unint64_t result;

  result = qword_1000A64A8;
  if (!qword_1000A64A8)
  {
    result = swift_getWitnessTable(&unk_1000886EC, &type metadata for AccessoriesAndScenesError);
    atomic_store(result, (unint64_t *)&qword_1000A64A8);
  }
  return result;
}

void sub_100052E8C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  sub_100037284(a1, a2, *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), *(_QWORD *)(v2 + 32), *(_QWORD **)(v2 + 40));
}

uint64_t sub_100052E98(id *a1)
{
  uint64_t v1;

  return sub_10003761C(a1, *(_QWORD *)(v1 + 16)) & 1;
}

uint64_t sub_100052EB4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(v1 + 16);
  v4 = type metadata accessor for AccessoryAndSceneEntity(0);
  return static UUID.== infix(_:_:)(a1 + *(int *)(v4 + 20), v3) & 1;
}

uint64_t sub_100052F00(uint64_t a1)
{
  return sub_100052F40(a1, (uint64_t (*)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_10003970C);
}

uint64_t sub_100052F10(uint64_t a1, uint64_t a2)
{
  return sub_100052FF4(a1, a2, (uint64_t (*)(uint64_t, uint64_t, unint64_t, _QWORD, _QWORD))sub_10003991C);
}

uint64_t sub_100052F1C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100052F2C(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_100052F34(uint64_t a1)
{
  return sub_100052F40(a1, (uint64_t (*)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_100037988);
}

uint64_t sub_100052F40(uint64_t a1, uint64_t (*a2)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))
{
  _QWORD *v2;

  return a2(a1, v2[2], v2[3], v2[4], v2[5], v2[6]);
}

uint64_t sub_100052F58()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;

  v1 = sub_10000527C(&qword_1000A64F8);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = v3 | 7;
  v6 = (*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  v7 = (v6 + 15) & 0xFFFFFFFFFFFFFFF8;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v6));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v7));
  return swift_deallocObject(v0, v7 + 8, v5);
}

uint64_t sub_100052FE8(uint64_t a1, uint64_t a2)
{
  return sub_100052FF4(a1, a2, (uint64_t (*)(uint64_t, uint64_t, unint64_t, _QWORD, _QWORD))sub_100037B98);
}

uint64_t sub_100052FF4(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t, uint64_t, unint64_t, _QWORD, _QWORD))
{
  uint64_t v3;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;

  v6 = *(_QWORD *)(sub_10000527C(&qword_1000A64F8) - 8);
  v7 = (*(unsigned __int8 *)(v6 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  v8 = (*(_QWORD *)(v6 + 64) + v7 + 7) & 0xFFFFFFFFFFFFFFF8;
  return a3(a1, a2, v3 + v7, *(_QWORD *)(v3 + v8), *(_QWORD *)(v3 + ((v8 + 15) & 0xFFFFFFFFFFFFF8)));
}

unint64_t sub_100053074()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000A50D0;
  if (!qword_1000A50D0)
  {
    v1 = sub_100008CBC(255, &qword_1000A5030, HMAccessory_ptr);
    result = swift_getWitnessTable(&protocol conformance descriptor for NSObject, v1);
    atomic_store(result, (unint64_t *)&qword_1000A50D0);
  }
  return result;
}

unint64_t sub_1000530D0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000A6508;
  if (!qword_1000A6508)
  {
    v1 = sub_1000052BC(&qword_1000A6470);
    sub_1000496B4(&qword_1000A6510, &qword_1000A6460, &qword_1000A6518, &qword_1000A6458);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000A6508);
  }
  return result;
}

uint64_t sub_100053184(uint64_t a1)
{
  return sub_1000531EC(a1, qword_1000A7A80, 0xD000000000000011, 0x800000010008B160);
}

uint64_t sub_1000531A8(uint64_t a1)
{
  return sub_1000531EC(a1, qword_1000A7A98, 0xD000000000000019, 0x800000010008B180);
}

uint64_t sub_1000531CC(uint64_t a1)
{
  return sub_1000531EC(a1, qword_1000A7AB0, 0x65646F4D6F6D6564, 0xE800000000000000);
}

uint64_t sub_1000531EC(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;

  v7 = type metadata accessor for Logger(0);
  sub_10001D27C(v7, a2);
  sub_100014698(v7, (uint64_t)a2);
  return Logger.init(subsystem:category:)(0x6C7070612E6D6F63, 0xEE00656D6F482E65, a3, a4);
}

void *sub_100053268@<X0>(unint64_t a1@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v2;
  _QWORD *v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  void *result;
  char v15;
  __int128 v16;

  v5 = (_QWORD *)*v2;
  if ((swift_isUniquelyReferenced_nonNull_native(*v2) & 1) == 0)
    v5 = sub_100053B40(v5);
  v6 = v5[2];
  if (v6 <= a1)
  {
    __break(1u);
  }
  else
  {
    v7 = v6 - 1;
    v8 = v6 - 1 - a1;
    if (v8 >= 0)
    {
      v9 = &v5[6 * a1];
      v10 = v9[4];
      v9 += 4;
      v12 = v9[4];
      v11 = v9[5];
      v16 = *((_OWORD *)v9 + 1);
      v13 = *((_BYTE *)v9 + 8);
      result = memmove(v9, v9 + 6, 48 * v8);
      v5[2] = v7;
      *v2 = v5;
      *(_QWORD *)a2 = v10;
      *(_BYTE *)(a2 + 8) = v13;
      *(_OWORD *)(a2 + 16) = v16;
      *(_QWORD *)(a2 + 32) = v12;
      *(_QWORD *)(a2 + 40) = v11;
      return result;
    }
  }
  v15 = 2;
  result = (void *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, v15, 1046, 0);
  __break(1u);
  return result;
}

Class sub_100053374(uint64_t a1)
{
  uint64_t (*v1)(uint64_t);
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  NSDictionary v5;

  v1 = *(uint64_t (**)(uint64_t))(a1 + 32);
  v2 = *(_QWORD *)(a1 + 40);
  v3 = swift_retain(v2);
  v4 = v1(v3);
  swift_release(v2);
  if (v4)
  {
    sub_10005401C();
    v5.super.isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(v4);
  }
  else
  {
    v5.super.isa = 0;
  }
  return v5.super.isa;
}

void sub_1000533E8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v8;
  int64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  int64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;

  if (a1 == a2 || *(_QWORD *)(a1 + 16) != *(_QWORD *)(a2 + 16))
    return;
  v4 = a1 + 64;
  v5 = -1;
  v6 = -1 << *(_BYTE *)(a1 + 32);
  if (-v6 < 64)
    v5 = ~(-1 << -(char)v6);
  v7 = v5 & *(_QWORD *)(a1 + 64);
  v8 = (unint64_t)(63 - v6) >> 6;
  swift_bridgeObjectRetain(a1);
  v9 = 0;
  while (1)
  {
    v16 = v9;
    if (v7)
    {
      v10 = __clz(__rbit64(v7));
      v7 &= v7 - 1;
      v11 = v10 | (v9 << 6);
      if (!*(_QWORD *)(a2 + 16))
        goto LABEL_30;
      goto LABEL_7;
    }
    v17 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_32;
    }
    if (v17 >= v8)
      goto LABEL_30;
    v18 = *(_QWORD *)(v4 + 8 * v17);
    ++v9;
    if (!v18)
    {
      v9 = v16 + 2;
      if (v16 + 2 >= v8)
        goto LABEL_30;
      v18 = *(_QWORD *)(v4 + 8 * v9);
      if (!v18)
      {
        v9 = v16 + 3;
        if (v16 + 3 >= v8)
          goto LABEL_30;
        v18 = *(_QWORD *)(v4 + 8 * v9);
        if (!v18)
        {
          v9 = v16 + 4;
          if (v16 + 4 >= v8)
            goto LABEL_30;
          v18 = *(_QWORD *)(v4 + 8 * v9);
          if (!v18)
          {
            v9 = v16 + 5;
            if (v16 + 5 >= v8)
              goto LABEL_30;
            v18 = *(_QWORD *)(v4 + 8 * v9);
            if (!v18)
              break;
          }
        }
      }
    }
LABEL_26:
    v7 = (v18 - 1) & v18;
    v11 = __clz(__rbit64(v18)) + (v9 << 6);
    if (!*(_QWORD *)(a2 + 16))
    {
LABEL_30:
      sub_100014DC4(a1);
      return;
    }
LABEL_7:
    v12 = (uint64_t *)(*(_QWORD *)(a1 + 48) + 16 * v11);
    v14 = *v12;
    v13 = v12[1];
    swift_bridgeObjectRetain(v13);
    sub_10001A4C4(v14, v13);
    LOBYTE(v14) = v15;
    swift_bridgeObjectRelease(v13);
    if ((v14 & 1) == 0)
      goto LABEL_30;
  }
  v19 = v16 + 6;
  if (v16 + 6 >= v8)
    goto LABEL_30;
  v18 = *(_QWORD *)(v4 + 8 * v19);
  if (v18)
  {
    v9 = v16 + 6;
    goto LABEL_26;
  }
  while (1)
  {
    v9 = v19 + 1;
    if (__OFADD__(v19, 1))
      break;
    if (v9 >= v8)
      goto LABEL_30;
    v18 = *(_QWORD *)(v4 + 8 * v9);
    ++v19;
    if (v18)
      goto LABEL_26;
  }
LABEL_32:
  __break(1u);
}

uint64_t type metadata accessor for WidgetAnalytics()
{
  return objc_opt_self(_TtC10HomeWidget15WidgetAnalytics);
}

uint64_t sub_100053614(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_100053650 + 4 * byte_100088B70[a1]))(0xD000000000000018, 0x800000010008B2E0);
}

uint64_t sub_100053650()
{
  return 0x7361487865646E69;
}

unint64_t sub_10005366C()
{
  return 0xD000000000000010;
}

uint64_t sub_100053688()
{
  uint64_t v0;

  return v0 + 10;
}

uint64_t sub_1000536A0()
{
  return 0x7470697263736564;
}

uint64_t sub_1000536C0(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  char v21;
  char v22;
  uint64_t v23;
  char v24;
  char v25;
  char v26;

  v3 = v1;
  v5 = sub_10000527C(&qword_1000A65F0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_100032248(a1, v9);
  v11 = sub_100056FA4();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for WidgetMetricsInfo.CodingKeys, &type metadata for WidgetMetricsInfo.CodingKeys, v11, v9, v10);
  v12 = *v3;
  v26 = 0;
  KeyedEncodingContainer.encode(_:forKey:)(v12, &v26, v5);
  if (!v2)
  {
    v13 = *((unsigned __int8 *)v3 + 8);
    v25 = 1;
    KeyedEncodingContainer.encode(_:forKey:)(v13, &v25, v5);
    v14 = v3[2];
    v24 = 2;
    KeyedEncodingContainer.encode(_:forKey:)(v14, &v24, v5);
    v23 = v3[3];
    v22 = 3;
    v15 = sub_10000527C(&qword_1000A6600);
    v16 = sub_100057474(&qword_1000A6608, (uint64_t)&protocol witness table for String, (uint64_t)&protocol witness table for Int, (uint64_t)&protocol conformance descriptor for <> [A : B]);
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v23, &v22, v5, v15, v16);
    v17 = v3[4];
    v18 = v3[5];
    v21 = 4;
    KeyedEncodingContainer.encode(_:forKey:)(v17, v18, &v21, v5);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_100053890()
{
  unsigned __int8 *v0;

  return sub_100053614(*v0);
}

uint64_t sub_100053898@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_100056FE8(a1, a2);
  *a3 = result;
  return result;
}

void sub_1000538BC(_BYTE *a1@<X8>)
{
  *a1 = 5;
}

uint64_t sub_1000538C8(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100056FA4();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000538F0(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100056FA4();
  return CodingKey.debugDescription.getter(a1, v2);
}

double sub_100053918@<D0>(_QWORD *a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v2;
  double result;
  __int128 v5;
  _OWORD v6[2];
  __int128 v7;

  sub_1000571F8(a1, (uint64_t)v6);
  if (!v2)
  {
    v5 = v6[1];
    *a2 = v6[0];
    a2[1] = v5;
    result = *(double *)&v7;
    a2[2] = v7;
  }
  return result;
}

uint64_t sub_100053958(_QWORD *a1)
{
  return sub_1000536C0(a1);
}

uint64_t sub_10005396C()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 32);
  swift_bridgeObjectRetain(*(_QWORD *)(v0 + 40));
  return v1;
}

uint64_t sub_100053998(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  int64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int64_t v9;
  unint64_t v10;
  unint64_t v11;
  int64_t v12;
  unint64_t v13;
  int64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  char v20;
  char v21;

  if (result == a2)
    return 1;
  v3 = result;
  if (*(_QWORD *)(result + 16) != *(_QWORD *)(a2 + 16))
    return 0;
  v4 = 0;
  v5 = result + 64;
  v6 = 1 << *(_BYTE *)(result + 32);
  v7 = -1;
  if (v6 < 64)
    v7 = ~(-1 << v6);
  v8 = v7 & *(_QWORD *)(result + 64);
  v9 = (unint64_t)(v6 + 63) >> 6;
  while (1)
  {
    if (v8)
    {
      v10 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      v11 = v10 | (v4 << 6);
      goto LABEL_24;
    }
    v12 = v4 + 1;
    if (__OFADD__(v4, 1))
    {
      __break(1u);
      goto LABEL_29;
    }
    if (v12 >= v9)
      return 1;
    v13 = *(_QWORD *)(v5 + 8 * v12);
    ++v4;
    if (!v13)
    {
      v4 = v12 + 1;
      if (v12 + 1 >= v9)
        return 1;
      v13 = *(_QWORD *)(v5 + 8 * v4);
      if (!v13)
      {
        v4 = v12 + 2;
        if (v12 + 2 >= v9)
          return 1;
        v13 = *(_QWORD *)(v5 + 8 * v4);
        if (!v13)
        {
          v4 = v12 + 3;
          if (v12 + 3 >= v9)
            return 1;
          v13 = *(_QWORD *)(v5 + 8 * v4);
          if (!v13)
            break;
        }
      }
    }
LABEL_23:
    v8 = (v13 - 1) & v13;
    v11 = __clz(__rbit64(v13)) + (v4 << 6);
LABEL_24:
    v15 = (uint64_t *)(*(_QWORD *)(v3 + 48) + 16 * v11);
    v16 = *v15;
    v17 = v15[1];
    v18 = *(_QWORD *)(*(_QWORD *)(v3 + 56) + 8 * v11);
    swift_bridgeObjectRetain(v17);
    v19 = sub_10001A4C4(v16, v17);
    v21 = v20;
    result = swift_bridgeObjectRelease(v17);
    if ((v21 & 1) == 0 || *(_QWORD *)(*(_QWORD *)(a2 + 56) + 8 * v19) != v18)
      return 0;
  }
  v14 = v12 + 4;
  if (v14 >= v9)
    return 1;
  v13 = *(_QWORD *)(v5 + 8 * v14);
  if (v13)
  {
    v4 = v14;
    goto LABEL_23;
  }
  while (1)
  {
    v4 = v14 + 1;
    if (__OFADD__(v14, 1))
      break;
    if (v4 >= v9)
      return 1;
    v13 = *(_QWORD *)(v5 + 8 * v4);
    ++v14;
    if (v13)
      goto LABEL_23;
  }
LABEL_29:
  __break(1u);
  return result;
}

_QWORD *sub_100053B40(_QWORD *a1)
{
  return sub_10005B080(0, a1[2], 0, a1);
}

void sub_100053B54(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v8;
  int64_t v9;
  unint64_t v10;
  unint64_t v11;
  int64_t v12;
  unint64_t v13;
  int64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  char v18;

  v4 = a1 + 64;
  v5 = 1 << *(_BYTE *)(a1 + 32);
  v6 = -1;
  if (v5 < 64)
    v6 = ~(-1 << v5);
  v7 = v6 & *(_QWORD *)(a1 + 64);
  v8 = (unint64_t)(v5 + 63) >> 6;
  swift_bridgeObjectRetain(a1);
  v9 = 0;
  while (1)
  {
    while (v7)
    {
      v10 = __clz(__rbit64(v7));
      v7 &= v7 - 1;
      v11 = v10 | (v9 << 6);
      if (*(_QWORD *)(a2 + 16))
        goto LABEL_22;
    }
    v12 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_27;
    }
    if (v12 >= v8)
      goto LABEL_24;
    v13 = *(_QWORD *)(v4 + 8 * v12);
    ++v9;
    if (!v13)
    {
      v9 = v12 + 1;
      if (v12 + 1 >= v8)
        goto LABEL_24;
      v13 = *(_QWORD *)(v4 + 8 * v9);
      if (!v13)
      {
        v9 = v12 + 2;
        if (v12 + 2 >= v8)
          goto LABEL_24;
        v13 = *(_QWORD *)(v4 + 8 * v9);
        if (!v13)
        {
          v9 = v12 + 3;
          if (v12 + 3 >= v8)
            goto LABEL_24;
          v13 = *(_QWORD *)(v4 + 8 * v9);
          if (!v13)
          {
            v14 = v12 + 4;
            if (v14 >= v8)
            {
LABEL_24:
              swift_release(a1);
              return;
            }
            v13 = *(_QWORD *)(v4 + 8 * v14);
            v9 = v14;
            if (!v13)
              break;
          }
        }
      }
    }
LABEL_21:
    v7 = (v13 - 1) & v13;
    v11 = __clz(__rbit64(v13)) + (v9 << 6);
    if (*(_QWORD *)(a2 + 16))
    {
LABEL_22:
      v15 = (uint64_t *)(*(_QWORD *)(a1 + 48) + 16 * v11);
      v16 = *v15;
      v17 = v15[1];
      swift_bridgeObjectRetain_n(v17, 2);
      sub_10001A4C4(v16, v17);
      if ((v18 & 1) != 0)
      {
        swift_release(a1);
        swift_bridgeObjectRelease(v17);
        return;
      }
      swift_bridgeObjectRelease_n(v17, 2);
    }
  }
  while (1)
  {
    v9 = v14 + 1;
    if (__OFADD__(v14, 1))
      break;
    if (v9 >= v8)
      goto LABEL_24;
    v13 = *(_QWORD *)(v4 + 8 * v9);
    ++v14;
    if (v13)
      goto LABEL_21;
  }
LABEL_27:
  __break(1u);
}

void sub_100053D0C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  void *v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  NSString v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t aBlock[5];
  uint64_t v23;

  if (qword_1000A4F08 != -1)
    swift_once(&qword_1000A4F08, sub_100053184);
  v2 = type metadata accessor for Logger(0);
  sub_100014698(v2, (uint64_t)qword_1000A7A80);
  v3 = swift_retain_n(a1, 4);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v4, v5))
  {
    v6 = swift_slowAlloc(32, -1);
    v7 = swift_slowAlloc(96, -1);
    aBlock[0] = v7;
    *(_DWORD *)v6 = 136315650;
    v21 = sub_100023980(0xD000000000000011, 0x800000010008B1F0, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v21, aBlock, v6 + 4, v6 + 12);
    *(_WORD *)(v6 + 12) = 2080;
    sub_1000771F8(*(_BYTE *)(a1 + 16));
    v9 = v8;
    v21 = sub_100023980(v10, v8, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v21, aBlock, v6 + 14, v6 + 22);
    swift_release_n(a1, 2);
    swift_bridgeObjectRelease(v9);
    *(_WORD *)(v6 + 22) = 2080;
    v11 = sub_100077428();
    v12 = sub_10005401C();
    v13 = Dictionary.description.getter(v11, &type metadata for String, v12, &protocol witness table for String);
    v15 = v14;
    swift_bridgeObjectRelease(v11);
    v21 = sub_100023980(v13, v15, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v21, aBlock, v6 + 24, v6 + 32);
    swift_release_n(a1, 2);
    swift_bridgeObjectRelease(v15);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "%s Sending analytics event for [%s]: %s", (uint8_t *)v6, 0x20u);
    swift_arrayDestroy(v7, 3, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v7, -1, -1);
    swift_slowDealloc(v6, -1, -1);

  }
  else
  {

    swift_release_n(a1, 4);
  }
  sub_1000771F8(*(_BYTE *)(a1 + 16));
  v17 = v16;
  v18 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v17);
  aBlock[4] = (uint64_t)sub_100054000;
  v23 = a1;
  aBlock[0] = (uint64_t)_NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = (uint64_t)sub_100053374;
  aBlock[3] = (uint64_t)&unk_10009FAC8;
  v19 = _Block_copy(aBlock);
  v20 = v23;
  swift_retain(a1);
  swift_release(v20);
  AnalyticsSendEventLazy(v18, v19);
  _Block_release(v19);

}

uint64_t sub_100054004(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100054014(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

unint64_t sub_10005401C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000A51D0;
  if (!qword_1000A51D0)
  {
    v1 = objc_opt_self(NSObject);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, &qword_1000A51D0);
  }
  return result;
}

_QWORD *sub_100054058()
{
  id v0;
  NSString v1;
  id v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  v0 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "standardUserDefaults");
  v1 = String._bridgeToObjectiveC()();
  v2 = objc_msgSend(v0, "dataForKey:", v1);

  if (!v2)
    return _swiftEmptyArrayStorage;
  v3 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v2);
  v5 = v4;

  v6 = type metadata accessor for JSONDecoder(0);
  swift_allocObject(v6, *(unsigned int *)(v6 + 48), *(unsigned __int16 *)(v6 + 52));
  v7 = JSONDecoder.init()();
  v8 = sub_10000527C(&qword_1000A65C8);
  v9 = sub_100056D10(&qword_1000A65E0, (void (*)(void))sub_100056D78, (uint64_t)&protocol conformance descriptor for <A> [A]);
  dispatch thunk of JSONDecoder.decode<A>(_:from:)(&v11, v8, v3, v5, v8, v9);
  swift_release(v7);
  sub_10002A8EC(v3, v5);
  return (_QWORD *)v11;
}

uint64_t sub_1000541B4@<X0>(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  Swift::String v10;
  Swift::String v11;
  void *object;
  Swift::String v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  Swift::String v17;
  Swift::String v18;
  void *v19;
  Swift::String v20;
  Swift::String v21;
  void *v22;
  uint64_t result;

  _StringGuts.grow(_:)(90);
  v10._countAndFlagsBits = 0x7361487865646E69;
  v10._object = (void *)0xEA00000000003A68;
  String.append(_:)(v10);
  v11._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int64, &protocol witness table for Int64);
  object = v11._object;
  String.append(_:)(v11);
  swift_bridgeObjectRelease(object);
  v13._countAndFlagsBits = 0xD00000000000001ALL;
  v13._object = (void *)0x800000010008B280;
  String.append(_:)(v13);
  if ((a2 & 1) != 0)
    v14 = 1702195828;
  else
    v14 = 0x65736C6166;
  if ((a2 & 1) != 0)
    v15 = 0xE400000000000000;
  else
    v15 = 0xE500000000000000;
  v16 = v15;
  String.append(_:)(*(Swift::String *)&v14);
  swift_bridgeObjectRelease(v15);
  v17._object = (void *)0x800000010008B2A0;
  v17._countAndFlagsBits = 0xD000000000000012;
  String.append(_:)(v17);
  v18._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
  v19 = v18._object;
  String.append(_:)(v18);
  swift_bridgeObjectRelease(v19);
  v20._countAndFlagsBits = 0xD00000000000001CLL;
  v20._object = (void *)0x800000010008B2C0;
  String.append(_:)(v20);
  v21._countAndFlagsBits = Dictionary.description.getter(a4, &type metadata for String, &type metadata for Int, &protocol witness table for String);
  v22 = v21._object;
  String.append(_:)(v21);
  result = swift_bridgeObjectRelease(v22);
  *(_QWORD *)a5 = a1;
  *(_BYTE *)(a5 + 8) = a2;
  *(_QWORD *)(a5 + 16) = a3;
  *(_QWORD *)(a5 + 24) = a4;
  *(_QWORD *)(a5 + 32) = 0;
  *(_QWORD *)(a5 + 40) = 0xE000000000000000;
  return result;
}

void sub_100054388(uint64_t a1)
{
  id v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  NSString v11;
  _QWORD v12[2];

  v2 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "standardUserDefaults");
  v3 = type metadata accessor for JSONEncoder(0);
  swift_allocObject(v3, *(unsigned int *)(v3 + 48), *(unsigned __int16 *)(v3 + 52));
  v4 = JSONEncoder.init()();
  v12[0] = a1;
  v5 = sub_10000527C(&qword_1000A65C8);
  v6 = sub_100056D10(&qword_1000A65D0, (void (*)(void))sub_100056C98, (uint64_t)&protocol conformance descriptor for <A> [A]);
  v7 = dispatch thunk of JSONEncoder.encode<A>(_:)(v12, v5, v6);
  v9 = v8;
  swift_bridgeObjectRelease(a1);
  swift_release(v4);
  v12[0] = v7;
  v12[1] = v9;
  v10 = _bridgeAnythingToObjectiveC<A>(_:)(v12, &type metadata for Data);
  sub_100056CDC((uint64_t)v12);
  v11 = String._bridgeToObjectiveC()();
  objc_msgSend(v2, "setObject:forKey:", v10, v11);

  swift_unknownObjectRelease(v10);
}

uint64_t sub_1000544E8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD v10[6];

  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
    return 0;
  v4 = 0;
  v5 = (uint64_t *)(a1 + 32);
  while (1)
  {
    v7 = *v5;
    v5 += 6;
    v6 = v7;
    sub_100056C50(a2, (uint64_t)v10);
    if (v10[3] && v6 == v10[0])
      break;
    if (v2 == ++v4)
      return 0;
  }
  return v4;
}

uint64_t sub_10005457C(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int64_t v17;
  uint64_t v18;
  NSObject *v19;
  os_log_type_t v20;
  _BOOL4 v21;
  uint8_t *v22;
  uint64_t v23;
  unint64_t v24;
  id v25;
  NSString v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  id v33;
  id v34;
  id v35;
  NSObject *v36;
  os_log_type_t v37;
  _BOOL4 v38;
  uint64_t v39;
  uint64_t v40;
  id v41;
  _QWORD *v42;
  void *v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t isUniquelyReferenced_nonNull_native;
  uint64_t v63;
  uint64_t v64;
  _BOOL8 v65;
  uint64_t v66;
  unint64_t v67;
  char v68;
  _QWORD *v69;
  _QWORD *v70;
  uint64_t v71;
  BOOL v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  char v78;
  char v79;
  uint64_t v80;
  id v81;
  _QWORD *v82;
  uint64_t v83;
  NSObject *v84;
  os_log_type_t v85;
  _BOOL4 v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  unint64_t v91;
  unint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  _QWORD *v98;
  uint64_t v99;
  _OWORD *v100;
  uint64_t v101;
  char v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  void (*v106)(uint64_t, uint64_t);
  uint64_t v107;
  uint64_t v108;
  char v109;
  __int128 v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  _QWORD *v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  char v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  unint64_t v127;
  char v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  char v133;
  char *v134;
  uint64_t v135;
  uint64_t v136;
  unint64_t v137;
  uint64_t v138;
  uint64_t v139;
  unint64_t v140;
  unint64_t v141;
  unint64_t v142;
  uint64_t v143;
  uint64_t *v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  char v148;
  uint64_t v149;
  _QWORD *v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  void (*v159)(uint64_t, uint64_t);
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  void (*v172)(uint64_t, uint64_t);
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  char v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  int64_t v204;
  uint64_t v205;
  int64_t v206;
  int64_t v207;
  unint64_t v208;
  _QWORD *v209;
  uint64_t v210;
  unint64_t v211;
  unint64_t v212;
  uint64_t v213;
  unint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t (*v223)(uint64_t, uint64_t);
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  unint64_t v245;
  char v246;
  char v247;
  char v248;
  unint64_t v249;
  unint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  __int128 *v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t (*v264)(uint64_t, uint64_t);
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  char v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  char v276;
  char *v277;
  uint64_t v278;
  uint64_t v279;
  unint64_t v280;
  unint64_t v281;
  unint64_t v282;
  uint64_t v283;
  uint64_t v284;
  id v285;
  uint64_t v286;
  NSObject *v287;
  os_log_type_t v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  unint64_t v294;
  unint64_t v295;
  uint64_t v296;
  uint64_t result;
  uint64_t v298;
  uint64_t v299;
  uint64_t v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t v304;
  uint64_t v305;
  uint64_t v306;
  uint64_t v307;
  uint64_t v308;
  uint64_t v309;
  uint64_t v310;
  uint64_t v311;
  uint64_t v312;
  _QWORD *v313;
  uint64_t v314;
  unint64_t v315;
  uint64_t v316;
  char v317;
  uint64_t v318;
  uint64_t v319;
  uint64_t v320;
  uint64_t v321;
  void *v322;
  unint64_t v323;
  uint64_t v324;
  uint64_t v325;
  uint64_t v326;
  uint64_t v327;
  uint64_t v328;
  uint64_t v329;
  _QWORD *v330;
  void *v331;
  uint64_t v332;
  uint64_t v333;
  uint64_t v334;
  uint64_t v335;
  uint64_t v336;
  uint64_t v337;
  unint64_t v338;
  void *v339;
  uint64_t v340;
  char *v341;
  char *v342;
  uint64_t v343;
  uint64_t v344;
  uint64_t v345;
  uint64_t v346;
  uint64_t v347;
  uint64_t v348;
  _QWORD *v349;
  id v350;
  uint64_t v351;
  uint64_t v352;
  uint64_t v353;
  void *v354;
  id v355;
  uint64_t v356;
  uint64_t v357;
  unint64_t v358;
  _QWORD *v359;
  __int128 v360;
  id v361;
  uint64_t v362;
  uint64_t v363;
  uint64_t v364;
  uint64_t v365;
  uint64_t v366;
  uint64_t v367;
  uint64_t v368;
  _BYTE v369[24];
  uint64_t v370;
  _QWORD *v371;
  uint64_t v372;
  unsigned __int8 v373;
  int64_t v374;
  uint64_t v375;
  uint64_t v376;
  uint64_t v377;
  uint64_t v378;
  unsigned __int8 v379;
  uint64_t v380;
  uint64_t v381;
  uint64_t v382;
  uint64_t v383;
  uint64_t v384;
  unsigned __int8 v385;
  uint64_t v386;
  uint64_t v387;
  uint64_t v388;
  uint64_t v389;
  uint64_t v390;
  unsigned __int8 v391;
  uint64_t v392;
  uint64_t v393;
  uint64_t v394;
  uint64_t v395;
  uint64_t v396;
  _QWORD v397[2];
  uint64_t v398;
  __int128 v399;
  __int128 v400;
  uint64_t v401;
  __int128 v402;
  __int128 v403;
  __int128 v404;

  v361 = a3;
  v353 = type metadata accessor for WidgetFamily(0);
  v351 = *(_QWORD *)(v353 - 8);
  v7 = __chkstk_darwin(v353);
  v9 = (unint64_t)&v320 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __chkstk_darwin(v7);
  v341 = (char *)&v320 - v11;
  v12 = __chkstk_darwin(v10);
  v342 = (char *)&v320 - v13;
  __chkstk_darwin(v12);
  v15 = (uint64_t)&v320 - v14;
  v362 = type metadata accessor for AccessoryAndSceneEntity(0);
  v349 = *(_QWORD **)(v362 - 8);
  __chkstk_darwin(v362);
  v17 = (int64_t)&v320 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1000A4F08 != -1)
LABEL_202:
    swift_once(&qword_1000A4F08, sub_100053184);
  v18 = type metadata accessor for Logger(0);
  v357 = sub_100014698(v18, (uint64_t)qword_1000A7A80);
  v19 = Logger.logObject.getter(v357);
  v20 = static os_log_type_t.default.getter(v19);
  v21 = os_log_type_enabled(v19, v20);
  v354 = a4;
  v356 = a1;
  v352 = v15;
  v338 = v9;
  if (v21)
  {
    v22 = (uint8_t *)swift_slowAlloc(12, -1);
    v23 = swift_slowAlloc(32, -1);
    *(_QWORD *)&v402 = v23;
    *(_DWORD *)v22 = 136315138;
    v396 = sub_100023980(0xD000000000000030, 0x800000010008B210, (uint64_t *)&v402);
    a1 = v356;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v396, v397, v22 + 4, v22 + 12);
    _os_log_impl((void *)&_mh_execute_header, v19, v20, "%s Loading Timeline for interactive widget...", v22, 0xCu);
    swift_arrayDestroy(v23, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v23, -1, -1);
    swift_slowDealloc(v22, -1, -1);
  }

  v396 = a1;
  v397[0] = a2;
  v397[1] = v361;
  v24 = sub_1000285A0();
  AppIntent.lnAction.getter(&v402, &type metadata for RecommendedItemIntent, v24);
  static AppIntent.lnMetadata.getter(&v396, &type metadata for RecommendedItemIntent, v24);
  v25 = objc_allocWithZone((Class)INAppIntent);
  v26 = String._bridgeToObjectiveC()();
  v27 = *((_QWORD *)&v403 + 1);
  v28 = sub_100032248(&v402, *((uint64_t *)&v403 + 1));
  v29 = _bridgeAnythingToObjectiveC<A>(_:)(v28, v27);
  v30 = v398;
  v31 = sub_100032248(&v396, v398);
  v32 = _bridgeAnythingToObjectiveC<A>(_:)(v31, v30);
  v33 = objc_msgSend(v25, "initWithAppBundleIdentifier:linkAction:linkActionMetadata:", v26, v29, v32);
  swift_unknownObjectRelease(v32);

  swift_unknownObjectRelease(v29);
  sub_100023FC0(&v396);
  sub_100023FC0(&v402);
  v34 = objc_msgSend(v33, "_indexingHash");
  v35 = v33;
  v36 = Logger.logObject.getter(v35);
  v37 = static os_log_type_t.default.getter(v36);
  *(_QWORD *)&v360 = v36;
  v38 = os_log_type_enabled(v36, v37);
  v355 = v34;
  v350 = v35;
  if (v38)
  {
    v39 = swift_slowAlloc(32, -1);
    v359 = (_QWORD *)swift_slowAlloc(8, -1);
    v40 = swift_slowAlloc(32, -1);
    *(_QWORD *)&v402 = v40;
    *(_DWORD *)v39 = 136315650;
    v396 = sub_100023980(0xD000000000000030, 0x800000010008B210, (uint64_t *)&v402);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v396, v397, v39 + 4, v39 + 12);
    *(_WORD *)(v39 + 12) = 2112;
    v396 = (uint64_t)v35;
    v41 = v35;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v396, v397, v39 + 14, v39 + 22);
    v42 = v359;
    *v359 = v35;

    *(_WORD *)(v39 + 22) = 2048;
    v396 = (uint64_t)v355;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v396, v397, v39 + 24, v39 + 32);
    v43 = (void *)v360;
    _os_log_impl((void *)&_mh_execute_header, (os_log_t)v360, v37, "%s App intent: %@ with indexingHash:%lld", (uint8_t *)v39, 0x20u);
    v44 = sub_10000527C(&qword_1000A5208);
    swift_arrayDestroy(v42, 1, v44);
    swift_slowDealloc(v42, -1, -1);
    swift_arrayDestroy(v40, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v40, -1, -1);
    swift_slowDealloc(v39, -1, -1);

  }
  else
  {

  }
  v45 = sub_10002F89C((uint64_t)_swiftEmptyArrayStorage);
  IntentParameter.wrappedValue.getter(v45);
  v46 = v402;
  if (!(_QWORD)v402)
  {
    v362 = v45;
    goto LABEL_40;
  }
  *(_QWORD *)&v360 = *(_QWORD *)(v402 + 16);
  if (!(_QWORD)v360)
    goto LABEL_38;
  v358 = (*((unsigned __int8 *)v349 + 80) + 32) & ~(unint64_t)*((unsigned __int8 *)v349 + 80);
  v359 = (_QWORD *)(v402 + v358);
  v47 = v349[9];
  v348 = v402;
  swift_bridgeObjectRetain(v402);
  v49 = 0;
  do
  {
    v51 = (char *)v359 + v47 * v49;
    v52 = IntentParameter.wrappedValue.getter(v48);
    v53 = v402;
    if ((_QWORD)v402)
    {
      v54 = v45;
      v55 = *(_QWORD *)(v402 + 16);
      if (v55)
      {
        a2 = 0;
        v56 = v402 + v358;
        while (1)
        {
          sub_100056B48(v56, v17);
          if ((static UUID.== infix(_:_:)(v17, v51) & 1) != 0
            && (static UUID.== infix(_:_:)(v17 + *(int *)(v362 + 20), &v51[*(int *)(v362 + 20)]) & 1) != 0
            && (sub_10001AB38(v17 + *(int *)(v362 + 24), (uint64_t)&v51[*(int *)(v362 + 24)]) & 1) != 0)
          {
            break;
          }
          sub_100056B8C(v17);
          ++a2;
          v56 += v47;
          if (v55 == a2)
            goto LABEL_25;
        }
        sub_100056B8C(v17);
        v57 = swift_bridgeObjectRelease(v53);
        v58 = UUID.uuidString.getter(v57);
        v59 = v54;
        v61 = v60;
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v59);
        *(_QWORD *)&v402 = v59;
        v349 = (_QWORD *)v58;
        v9 = sub_10001A4C4(v58, v61);
        v64 = *(_QWORD *)(v59 + 16);
        v65 = (v63 & 1) == 0;
        v66 = v64 + v65;
        if (__OFADD__(v64, v65))
        {
          __break(1u);
LABEL_204:
          sub_100056BC8(v337, v59, v17, v343, v345, v347);
          v304 = sub_100056BC8(v335, v334, v333, v332, (uint64_t)v331, (uint64_t)v330);
          if ((v336 & 1) != 0)
          {
            IntentParameter.wrappedValue.getter(v304);
            if ((_BYTE)v402)
              v305 = 16908802;
            else
              v305 = 131586;
            v306 = type metadata accessor for WidgetAnalyticsEvent();
            v307 = swift_allocObject(v306, 65, 7);
            *(_BYTE *)(v307 + 16) = 2;
            *(_QWORD *)(v307 + 24) = 2;
            *(_QWORD *)(v307 + 32) = 0;
            *(_QWORD *)(v307 + 40) = 0;
            *(_QWORD *)(v307 + 48) = v305;
            *(_QWORD *)(v307 + 56) = 0;
            *(_BYTE *)(v307 + 64) = 1;
            sub_100028588(0, 0, 1);
            sub_100053D0C(v307);
            v304 = swift_release(v307);
          }
          IntentParameter.wrappedValue.getter(v304);
          v308 = v402;
          if ((_QWORD)v402)
          {
            v309 = *(_QWORD *)(v402 + 16);
            if (v309)
            {
              v310 = type metadata accessor for WidgetAnalyticsEvent();
              swift_bridgeObjectRetain(v308);
              do
              {
                v311 = swift_allocObject(v310, 65, 7);
                *(_BYTE *)(v311 + 16) = 5;
                *(_QWORD *)(v311 + 32) = 0;
                *(_QWORD *)(v311 + 40) = 0;
                *(_QWORD *)(v311 + 24) = 2;
                *(_OWORD *)(v311 + 48) = v360;
                *(_BYTE *)(v311 + 64) = 1;
                sub_100028588(0, 0, 1);
                sub_100053D0C(v311);
                swift_release(v311);
                --v309;
              }
              while (v309);
              swift_bridgeObjectRelease(v349);
              swift_bridgeObjectRelease(0);
              v312 = swift_bridgeObjectRelease_n(v308, 2);
              a2 = v362;
LABEL_222:
              a1 = (uint64_t)v359;
              v315 = v338;
              v316 = IntentParameter.wrappedValue.getter(v312);
              v317 = v402;
              v318 = TimelineProviderContext.family.getter(v316);
              v319 = WidgetFamily.rawValue.getter(v318);
              (*(void (**)(unint64_t, uint64_t))(v351 + 8))(v315, v353);
              swift_bridgeObjectRetain(a2);
              sub_1000541B4((uint64_t)v355, v317, v319, a2, (uint64_t)&v390);
              v255 = v390;
              v59 = v391;
              v17 = v392;
              v256 = v393;
              v257 = v394;
              v258 = v395;
              v9 = v336;
LABEL_182:
              v15 = v324;
              if (!v324)
                goto LABEL_196;
              goto LABEL_183;
            }
            swift_bridgeObjectRelease(v349);
            v314 = v308;
          }
          else
          {
            v314 = (uint64_t)v349;
          }
          v312 = swift_bridgeObjectRelease(v314);
          goto LABEL_222;
        }
        v58 = v63;
        if (*(_QWORD *)(v59 + 24) < v66)
        {
          sub_1000789CC(v66, isUniquelyReferenced_nonNull_native);
          v59 = v402;
          v67 = sub_10001A4C4((uint64_t)v349, v61);
          if ((v58 & 1) != (v68 & 1))
            goto LABEL_228;
          v9 = v67;
          v69 = (_QWORD *)v402;
          if ((v58 & 1) == 0)
            goto LABEL_23;
LABEL_33:
          *(_QWORD *)(v69[7] + 8 * v9) = a2;
          v45 = (unint64_t)v69;
LABEL_34:
          v80 = v61;
          goto LABEL_30;
        }
        if ((isUniquelyReferenced_nonNull_native & 1) != 0)
        {
          v69 = (_QWORD *)v402;
          if ((v63 & 1) != 0)
            goto LABEL_33;
        }
        else
        {
          v59 = (uint64_t)&v402;
          sub_1000795B8();
          v69 = (_QWORD *)v402;
          if ((v58 & 1) != 0)
            goto LABEL_33;
        }
LABEL_23:
        v69[(v9 >> 6) + 8] |= 1 << v9;
        v70 = (_QWORD *)(v69[6] + 16 * v9);
        *v70 = v349;
        v70[1] = v61;
        *(_QWORD *)(v69[7] + 8 * v9) = a2;
        v71 = v69[2];
        v72 = __OFADD__(v71, 1);
        v73 = v71 + 1;
        if (v72)
        {
          __break(1u);
          goto LABEL_215;
        }
        v45 = (unint64_t)v69;
        v69[2] = v73;
        swift_bridgeObjectRetain(v61);
        goto LABEL_34;
      }
LABEL_25:
      v52 = swift_bridgeObjectRelease(v53);
      v45 = v54;
    }
    v74 = UUID.uuidString.getter(v52);
    v76 = v75;
    swift_bridgeObjectRetain(v45);
    v77 = sub_10001A4C4(v74, v76);
    LOBYTE(v74) = v78;
    swift_bridgeObjectRelease(v45);
    if ((v74 & 1) == 0)
    {
      v50 = v76;
      goto LABEL_11;
    }
    v79 = swift_isUniquelyReferenced_nonNull_native(v45);
    *(_QWORD *)&v402 = v45;
    if ((v79 & 1) == 0)
    {
      sub_1000795B8();
      v45 = v402;
    }
    swift_bridgeObjectRelease(*(_QWORD *)(*(_QWORD *)(v45 + 48) + 16 * v77 + 8));
    sub_100045208(v77, v45);
    v80 = v76;
LABEL_30:
    swift_bridgeObjectRelease(v80);
    v50 = 0x8000000000000000;
LABEL_11:
    v48 = swift_bridgeObjectRelease(v50);
    ++v49;
  }
  while (v49 != (_QWORD)v360);
  v46 = v348;
  swift_bridgeObjectRelease(v348);
LABEL_38:
  v362 = v45;
  swift_bridgeObjectRelease(v46);
LABEL_40:
  a4 = (void *)objc_opt_self(NSUserDefaults);
  v81 = objc_msgSend(a4, "standardUserDefaults");
  v82 = sub_100054058();

  v371 = v82;
  v84 = Logger.logObject.getter(v83);
  v85 = static os_log_type_t.default.getter(v84);
  v86 = os_log_type_enabled(v84, v85);
  v358 = (unint64_t)a4;
  if (v86)
  {
    v87 = swift_slowAlloc(22, -1);
    v88 = swift_slowAlloc(64, -1);
    *(_QWORD *)&v402 = v88;
    *(_DWORD *)v87 = 136315394;
    v396 = sub_100023980(0xD000000000000030, 0x800000010008B210, (uint64_t *)&v402);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v396, v397, v87 + 4, v87 + 12);
    *(_WORD *)(v87 + 12) = 2080;
    swift_beginAccess(&v371, &v363, 0, 0);
    v82 = v371;
    swift_bridgeObjectRetain(v371);
    v90 = Array.description.getter(v89, &type metadata for WidgetMetricsInfo);
    v92 = v91;
    swift_bridgeObjectRelease(v82);
    v396 = sub_100023980(v90, v92, (uint64_t *)&v402);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v396, v397, v87 + 14, v87 + 22);
    swift_bridgeObjectRelease(v92);
    _os_log_impl((void *)&_mh_execute_header, v84, v85, "%s (Before) Cached widget metrics infos: %s", (uint8_t *)v87, 0x16u);
    swift_arrayDestroy(v88, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v88, -1, -1);
    v93 = v87;
    a4 = (void *)v358;
    swift_slowDealloc(v93, -1, -1);
  }

  v15 = v82[2];
  if (!v15)
  {
    v361 = objc_msgSend(a4, "standardUserDefaults");
    v99 = sub_10000527C(&qword_1000A65B8);
    v100 = (_OWORD *)swift_allocObject(v99, 80, 7);
    v100[1] = xmmword_100086C80;
    v101 = IntentParameter.wrappedValue.getter(v100);
    v102 = v402;
    v103 = v352;
    v104 = TimelineProviderContext.family.getter(v101);
    v105 = WidgetFamily.rawValue.getter(v104);
    v106 = *(void (**)(uint64_t, uint64_t))(v351 + 8);
    v107 = v353;
    v106(v103, v353);
    v108 = v362;
    swift_bridgeObjectRetain(v362);
    v109 = v102;
    a2 = v108;
    sub_1000541B4((uint64_t)v355, v109, v105, v108, (uint64_t)&v402);
    v110 = v403;
    v100[2] = v402;
    v100[3] = v110;
    v100[4] = v404;
    sub_100054388((uint64_t)v100);

    v112 = TimelineProviderContext.family.getter(v111);
    v113 = WidgetFamily.rawValue.getter(v112);
    v106(v103, v107);
    v114 = type metadata accessor for WidgetAnalyticsEvent();
    v115 = swift_allocObject(v114, 65, 7);
    *(_BYTE *)(v115 + 16) = 0;
    *(_QWORD *)(v115 + 24) = 2;
    *(_QWORD *)(v115 + 32) = 0;
    *(_QWORD *)(v115 + 40) = 0;
    *(_QWORD *)(v115 + 48) = 33686018;
    *(_QWORD *)(v115 + 56) = v113;
    *(_BYTE *)(v115 + 64) = 0;
    sub_100028588(0, 0, 1);
    sub_100053D0C(v115);
    v116 = swift_release(v115);
    goto LABEL_190;
  }
  v349 = v82;
  v95 = v82[4];
  a1 = (uint64_t)(v82 + 4);
  v94 = v95;
  v17 = *(unsigned __int8 *)(a1 + 8);
  v96 = *(_QWORD *)(a1 + 16);
  v58 = *(_QWORD *)(a1 + 24);
  v9 = *(_QWORD *)(a1 + 32);
  v359 = *(_QWORD **)(a1 + 40);
  if ((id)v95 == v355)
  {
    v97 = v96;
    v361 = (id)v9;
    v98 = v359;
LABEL_150:
    v359 = v98;
    swift_bridgeObjectRetain(v58);
    swift_bridgeObjectRetain(v98);
    v219 = v352;
    v221 = TimelineProviderContext.family.getter(v220);
    v222 = WidgetFamily.rawValue.getter(v221);
    v223 = *(uint64_t (**)(uint64_t, uint64_t))(v351 + 8);
    v224 = v353;
    v225 = v223(v219, v353);
    if (v97 == v222)
    {
      swift_bridgeObjectRelease(v359);
      swift_bridgeObjectRelease(v58);
      v226 = 0;
      v9 = 0;
      v227 = 0;
      v58 = 0;
      v228 = 0;
      a1 = 0;
      a2 = v362;
      goto LABEL_189;
    }
    *(_QWORD *)&v360 = v97;
    v17 = v17;
    v229 = TimelineProviderContext.family.getter(v225);
    v230 = WidgetFamily.rawValue.getter(v229);
    v223(v219, v224);
    v231 = type metadata accessor for WidgetAnalyticsEvent();
    v232 = swift_allocObject(v231, 65, 7);
    *(_BYTE *)(v232 + 16) = 3;
    *(_QWORD *)(v232 + 24) = 2;
    *(_QWORD *)(v232 + 32) = 0;
    *(_QWORD *)(v232 + 40) = 0;
    *(_QWORD *)(v232 + 48) = 33686018;
    *(_QWORD *)(v232 + 56) = v230;
    *(_BYTE *)(v232 + 64) = 0;
    sub_100028588(0, 0, 1);
    sub_100053D0C(v232);
    v233 = swift_release(v232);
    v234 = IntentParameter.wrappedValue.getter(v233);
    LOBYTE(v232) = v402;
    v235 = TimelineProviderContext.family.getter(v234);
    v236 = WidgetFamily.rawValue.getter(v235);
    v223(v219, v224);
    v237 = v362;
    swift_bridgeObjectRetain(v362);
    v238 = v237;
    v239 = (uint64_t)v355;
    sub_1000541B4((uint64_t)v355, v232, v236, v238, (uint64_t)&v390);
    v339 = 0;
    v340 = 0;
    v336 = 0;
    v337 = v390;
    v344 = v391;
    v343 = v393;
    v240 = v58;
    v241 = (uint64_t)v359;
    v345 = v394;
    v346 = v392;
    v347 = v395;
    v348 = 0;
    v58 = 0;
    v359 = 0;
    goto LABEL_153;
  }
  v340 = v94;
  v348 = v96;
  a2 = v362;
  if (v15 != 1)
  {
    v117 = v349 + 15;
    v118 = 1;
    while (1)
    {
      v119 = v118 + 1;
      if (__OFADD__(v118, 1))
        break;
      if ((id)*(v117 - 5) == v355)
      {
LABEL_149:
        LODWORD(v17) = *((unsigned __int8 *)v117 - 32);
        v97 = *(v117 - 3);
        v58 = *(v117 - 2);
        v98 = (_QWORD *)*v117;
        v361 = (id)*(v117 - 1);
        goto LABEL_150;
      }
      v117 += 6;
      ++v118;
      if (v119 == v15)
        goto LABEL_51;
    }
    __break(1u);
LABEL_201:
    __break(1u);
    goto LABEL_202;
  }
LABEL_51:
  swift_bridgeObjectRetain_n(v58, 2);
  swift_bridgeObjectRetain(v359);
  swift_bridgeObjectRetain(v349);
  swift_bridgeObjectRetain(a2);
  sub_1000533E8(v58, a2);
  v121 = v120;
  swift_bridgeObjectRelease(v58);
  swift_bridgeObjectRelease(a2);
  if ((v121 & 1) != 0)
  {
    v334 = 0;
    v335 = 0;
    v332 = 0;
    v333 = 0;
    v330 = 0;
    v331 = 0;
    v337 = 0;
    v343 = 0;
    v344 = 0;
    v345 = 0;
    v346 = 0;
    v347 = 0;
    v328 = 0;
    v329 = 0;
    v326 = 0;
    v327 = 0;
    v15 = 0;
    v325 = 0;
    a4 = 0;
    goto LABEL_53;
  }
  v321 = v15;
  swift_beginAccess(&v371, &v370, 0, 0);
  v334 = 0;
  v335 = 0;
  v332 = 0;
  v333 = 0;
  v330 = 0;
  v331 = 0;
  v337 = 0;
  v343 = 0;
  v344 = 0;
  v345 = 0;
  v346 = 0;
  v347 = 0;
  v328 = 0;
  v329 = 0;
  v326 = 0;
  v327 = 0;
  v15 = 0;
  v325 = 0;
  a4 = 0;
  v360 = xmmword_100088D50;
  v323 = 1;
  while (2)
  {
    v324 = v15;
    v339 = (void *)v9;
    v336 = v17;
    a2 = v58 + 64;
    v138 = 1 << *(_BYTE *)(v58 + 32);
    if (v138 < 64)
      v139 = ~(-1 << v138);
    else
      v139 = -1;
    v9 = v139 & *(_QWORD *)(v58 + 64);
    v17 = (unint64_t)(v138 + 63) >> 6;
    swift_bridgeObjectRetain_n(v58, 2);
    v15 = 0;
    while (1)
    {
      if (v9)
      {
        v140 = __clz(__rbit64(v9));
        v9 &= v9 - 1;
        v141 = v140 | (v15 << 6);
        goto LABEL_82;
      }
      v72 = __OFADD__(v15++, 1);
      if (v72)
        goto LABEL_201;
      if (v15 >= v17)
        break;
      v142 = *(_QWORD *)(a2 + 8 * v15);
      if (!v142)
      {
        v143 = v15 + 1;
        if (v15 + 1 >= v17)
          break;
        v142 = *(_QWORD *)(a2 + 8 * v143);
        if (!v142)
        {
          v143 = v15 + 2;
          if (v15 + 2 >= v17)
            break;
          v142 = *(_QWORD *)(a2 + 8 * v143);
          if (!v142)
          {
            v143 = v15 + 3;
            if (v15 + 3 >= v17)
              break;
            v142 = *(_QWORD *)(a2 + 8 * v143);
            if (!v142)
            {
              v143 = v15 + 4;
              if (v15 + 4 >= v17)
                break;
              v142 = *(_QWORD *)(a2 + 8 * v143);
              if (!v142)
              {
                while (1)
                {
                  v15 = v143 + 1;
                  if (__OFADD__(v143, 1))
                    break;
                  if (v15 >= v17)
                    goto LABEL_89;
                  v142 = *(_QWORD *)(a2 + 8 * v15);
                  ++v143;
                  if (v142)
                    goto LABEL_81;
                }
LABEL_218:
                __break(1u);
LABEL_219:
                v121 = (uint64_t)sub_10005B080(0, *(_QWORD *)(v121 + 16) + 1, 1, (_QWORD *)v121);
LABEL_184:
                v282 = *(_QWORD *)(v121 + 16);
                v281 = *(_QWORD *)(v121 + 24);
                if (v282 >= v281 >> 1)
                  v121 = (uint64_t)sub_10005B080((_QWORD *)(v281 > 1), v282 + 1, 1, (_QWORD *)v121);
                *(_QWORD *)(v121 + 16) = v282 + 1;
                v283 = v121 + 48 * v282;
                *(_QWORD *)(v283 + 32) = v329;
                *(_BYTE *)(v283 + 40) = v328 & 1;
                *(_QWORD *)(v283 + 48) = v327;
                *(_QWORD *)(v283 + 56) = v15;
                v284 = v325;
                *(_QWORD *)(v283 + 64) = v326;
                *(_QWORD *)(v283 + 72) = v284;
                v371 = (_QWORD *)v121;
                v254 = &v402;
LABEL_187:
                swift_endAccess(v254);
LABEL_188:
                a4 = (void *)v358;
                v228 = (uint64_t)v339;
                v226 = v340;
                v227 = v348;
LABEL_189:
                v285 = objc_msgSend(a4, "standardUserDefaults");
                swift_beginAccess(&v371, v369, 0, 0);
                swift_bridgeObjectRetain(v371);
                sub_100054388(v286);
                sub_100056BC8(v226, v9, v227, v58, v228, a1);

LABEL_190:
                v287 = Logger.logObject.getter(v116);
                v288 = static os_log_type_t.default.getter(v287);
                if (os_log_type_enabled(v287, v288))
                {
                  v289 = swift_slowAlloc(22, -1);
                  v290 = swift_slowAlloc(64, -1);
                  v368 = v290;
                  *(_DWORD *)v289 = 136315394;
                  v366 = sub_100023980(0xD000000000000030, 0x800000010008B210, &v368);
                  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v366, &v367, v289 + 4, v289 + 12);
                  *(_WORD *)(v289 + 12) = 2080;
                  swift_beginAccess(&v371, &v366, 0, 0);
                  v291 = (uint64_t)v371;
                  swift_bridgeObjectRetain(v371);
                  v293 = Array.description.getter(v292, &type metadata for WidgetMetricsInfo);
                  v295 = v294;
                  swift_bridgeObjectRelease(v291);
                  v365 = sub_100023980(v293, v295, &v368);
                  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v365, &v366, v289 + 14, v289 + 22);
                  swift_bridgeObjectRelease(v295);
                  _os_log_impl((void *)&_mh_execute_header, v287, v288, "%s (After) Cached widget metrics infos: %s", (uint8_t *)v289, 0x16u);
                  swift_arrayDestroy(v290, 2, (char *)&type metadata for Any + 8);
                  v296 = v290;
                  a2 = v362;
                  swift_slowDealloc(v296, -1, -1);
                  swift_slowDealloc(v289, -1, -1);
                  swift_bridgeObjectRelease(v291);

                }
                else
                {

                  swift_bridgeObjectRelease(v371);
                }
                return swift_bridgeObjectRelease(a2);
              }
            }
          }
        }
        v15 = v143;
      }
LABEL_81:
      v9 = (v142 - 1) & v142;
      v141 = __clz(__rbit64(v142)) + (v15 << 6);
LABEL_82:
      if (!*(_QWORD *)(v362 + 16))
        continue;
      v144 = (uint64_t *)(*(_QWORD *)(v58 + 48) + 16 * v141);
      v145 = *v144;
      v146 = v144[1];
      swift_bridgeObjectRetain_n(v146, 2);
      v147 = v145;
      v121 = v362;
      sub_10001A4C4(v147, v146);
      if ((v148 & 1) != 0)
      {
        swift_release(v58);
        swift_bridgeObjectRelease(v58);
        swift_bridgeObjectRelease(v146);
        sub_100056BC8(v337, v344, v346, v343, v345, v347);
        sub_100056BC8(v335, v334, v333, v332, (uint64_t)v331, (uint64_t)v330);
        v149 = v352;
        v155 = v353;
        goto LABEL_142;
      }
      swift_bridgeObjectRelease_n(v146, 2);
    }
LABEL_89:
    v149 = v352;
    swift_release(v58);
    swift_bridgeObjectRelease(v58);
    swift_bridgeObjectRetain(v58);
    v150 = v359;
    swift_bridgeObjectRetain(v359);
    v151 = v362;
    swift_bridgeObjectRetain(v362);
    sub_100053B54(v152, v58);
    v146 = v153;
    swift_bridgeObjectRelease(v151);
    swift_bridgeObjectRelease(v150);
    v154 = swift_bridgeObjectRelease(v58);
    v155 = v353;
    if (v146)
    {
      sub_100056BC8(v337, v344, v346, v343, v345, v347);
      sub_100056BC8(v335, v334, v333, v332, (uint64_t)v331, (uint64_t)v330);
LABEL_142:
      swift_bridgeObjectRelease(v349);
      swift_bridgeObjectRelease(v146);
      v211 = *(_QWORD *)(v58 + 16);
      v212 = *(_QWORD *)(v362 + 16);
      v213 = v211 - v212;
      a1 = (uint64_t)v359;
      if (v211 >= v212)
      {
        if (v212 >= v211)
        {
          swift_bridgeObjectRetain(v58);
          swift_bridgeObjectRetain(a1);
          goto LABEL_171;
        }
        if (v213 < 1)
          goto LABEL_226;
        v259 = type metadata accessor for WidgetAnalyticsEvent();
        swift_bridgeObjectRetain(v58);
        swift_bridgeObjectRetain(a1);
        v260 = 1;
        while (1)
        {
          v261 = swift_allocObject(v259, 65, 7);
          *(_BYTE *)(v261 + 16) = 6;
          *(_QWORD *)(v261 + 32) = 0;
          *(_QWORD *)(v261 + 40) = 0;
          *(_QWORD *)(v261 + 24) = 2;
          *(_OWORD *)(v261 + 48) = v360;
          *(_BYTE *)(v261 + 64) = 1;
          sub_100028588(0, 0, 1);
          sub_100053D0C(v261);
          v218 = swift_release(v261);
          if (v213 == v260)
            break;
          v72 = __OFADD__(v260++, 1);
          if (v72)
          {
            __break(1u);
            break;
          }
        }
      }
      else
      {
        v214 = v212 - v211;
        if ((uint64_t)(v212 - v211) < 1)
          goto LABEL_225;
        v215 = type metadata accessor for WidgetAnalyticsEvent();
        swift_bridgeObjectRetain(v58);
        swift_bridgeObjectRetain(a1);
        v216 = 1;
        while (1)
        {
          v217 = swift_allocObject(v215, 65, 7);
          *(_BYTE *)(v217 + 16) = 5;
          *(_QWORD *)(v217 + 32) = 0;
          *(_QWORD *)(v217 + 40) = 0;
          *(_QWORD *)(v217 + 24) = 2;
          *(_OWORD *)(v217 + 48) = v360;
          *(_BYTE *)(v217 + 64) = 1;
          sub_100028588(0, 0, 1);
          sub_100053D0C(v217);
          v218 = swift_release(v217);
          if (v214 == v216)
            break;
          v72 = __OFADD__(v216++, 1);
          if (v72)
          {
            __break(1u);
            goto LABEL_149;
          }
        }
      }
      v155 = v353;
      v149 = v352;
      a1 = (uint64_t)v359;
LABEL_171:
      v262 = TimelineProviderContext.family.getter(v218);
      v263 = WidgetFamily.rawValue.getter(v262);
      v264 = *(uint64_t (**)(uint64_t, uint64_t))(v351 + 8);
      v265 = v264(v149, v155);
      if (v348 != v263)
      {
        v266 = TimelineProviderContext.family.getter(v265);
        v267 = WidgetFamily.rawValue.getter(v266);
        v264(v149, v155);
        v268 = type metadata accessor for WidgetAnalyticsEvent();
        v269 = swift_allocObject(v268, 65, 7);
        *(_BYTE *)(v269 + 16) = 3;
        *(_QWORD *)(v269 + 24) = 2;
        *(_QWORD *)(v269 + 32) = 0;
        *(_QWORD *)(v269 + 40) = 0;
        *(_QWORD *)(v269 + 48) = 33686018;
        *(_QWORD *)(v269 + 56) = v267;
        *(_BYTE *)(v269 + 64) = 0;
        sub_100028588(0, 0, 1);
        sub_100053D0C(v269);
        v265 = swift_release(v269);
      }
      IntentParameter.wrappedValue.getter(v265);
      swift_bridgeObjectRelease(a1);
      v270 = swift_bridgeObjectRelease(v58);
      v271 = v402 ^ 1 | v336;
      if ((v271 & 1) == 0)
      {
        IntentParameter.wrappedValue.getter(v270);
        if ((_BYTE)v402)
          v272 = 16908802;
        else
          v272 = 131586;
        v273 = type metadata accessor for WidgetAnalyticsEvent();
        v274 = swift_allocObject(v273, 65, 7);
        *(_BYTE *)(v274 + 16) = 2;
        *(_QWORD *)(v274 + 24) = 2;
        *(_QWORD *)(v274 + 32) = 0;
        *(_QWORD *)(v274 + 40) = 0;
        *(_QWORD *)(v274 + 48) = v272;
        *(_QWORD *)(v274 + 56) = 0;
        *(_BYTE *)(v274 + 64) = 1;
        sub_100028588(0, 0, 1);
        sub_100053D0C(v274);
        v270 = swift_release(v274);
      }
      v275 = IntentParameter.wrappedValue.getter(v270);
      v276 = v402;
      v277 = v341;
      v278 = TimelineProviderContext.family.getter(v275);
      v279 = WidgetFamily.rawValue.getter(v278);
      v264((uint64_t)v277, v353);
      if ((v271 & 1) != 0)
      {
        a2 = v362;
        swift_bridgeObjectRetain(v362);
        v280 = a2;
      }
      else
      {
        v280 = sub_10002F89C((uint64_t)_swiftEmptyArrayStorage);
        a2 = v362;
      }
      v9 = v336;
      sub_1000541B4((uint64_t)v355, v276, v279, v280, (uint64_t)&v390);
      v255 = v390;
      v59 = v391;
      v17 = v392;
      v256 = v393;
      v257 = v394;
      v258 = v395;
      goto LABEL_182;
    }
    if (v371[2] != 1)
    {
      IntentParameter.wrappedValue.getter(v154);
      if (v402 == 1)
      {
        sub_100056BC8(v329, v328, v327, v324, v326, v325);
        swift_bridgeObjectRelease(v359);
        v169 = swift_bridgeObjectRelease(v58);
        v170 = TimelineProviderContext.family.getter(v169);
        v171 = WidgetFamily.rawValue.getter(v170);
        v172 = *(void (**)(uint64_t, uint64_t))(v351 + 8);
        v172(v149, v155);
        v173 = type metadata accessor for WidgetAnalyticsEvent();
        v174 = v149;
        v175 = v155;
        v176 = swift_allocObject(v173, 65, 7);
        *(_BYTE *)(v176 + 16) = 0;
        *(_QWORD *)(v176 + 24) = 2;
        *(_QWORD *)(v176 + 32) = 0;
        *(_QWORD *)(v176 + 40) = 0;
        *(_QWORD *)(v176 + 48) = 33686018;
        *(_QWORD *)(v176 + 56) = v171;
        *(_BYTE *)(v176 + 64) = 0;
        sub_100028588(0, 0, 1);
        sub_100053D0C(v176);
        v177 = swift_release(v176);
        v178 = IntentParameter.wrappedValue.getter(v177);
        LOBYTE(v176) = v402;
        v179 = TimelineProviderContext.family.getter(v178);
        v180 = WidgetFamily.rawValue.getter(v179);
        v172(v174, v175);
        a2 = v362;
        swift_bridgeObjectRetain(v362);
        sub_1000541B4((uint64_t)v355, v176, v180, a2, (uint64_t)&v384);
        v328 = v385;
        v329 = v384;
        v15 = v387;
        v326 = v388;
        v327 = v386;
        v168 = v389;
LABEL_95:
        v325 = v168;
      }
      else
      {
        if (!*(_QWORD *)(v58 + 16))
        {
          a2 = v362;
          v15 = v324;
          v59 = v344;
          v17 = v346;
          if (*(_QWORD *)(v362 + 16))
            goto LABEL_204;
          swift_bridgeObjectRelease(v359);
          swift_bridgeObjectRelease(v58);
LABEL_136:
          v193 = v343;
          v195 = v347;
          v194 = v345;
          goto LABEL_137;
        }
        swift_bridgeObjectRelease(v359);
        swift_bridgeObjectRelease(v58);
LABEL_134:
        a2 = v362;
        v15 = v324;
      }
      v59 = v344;
      v17 = v346;
      goto LABEL_136;
    }
    IntentParameter.wrappedValue.getter(v154);
    if ((v402 & 1) != 0)
    {
      sub_100056BC8(v329, v328, v327, v324, v326, v325);
      swift_bridgeObjectRelease(v359);
      v156 = swift_bridgeObjectRelease(v58);
      v157 = TimelineProviderContext.family.getter(v156);
      v158 = WidgetFamily.rawValue.getter(v157);
      v159 = *(void (**)(uint64_t, uint64_t))(v351 + 8);
      v159(v149, v155);
      v160 = type metadata accessor for WidgetAnalyticsEvent();
      v161 = v149;
      v162 = v155;
      v163 = swift_allocObject(v160, 65, 7);
      *(_BYTE *)(v163 + 16) = 0;
      *(_QWORD *)(v163 + 24) = 2;
      *(_QWORD *)(v163 + 32) = 0;
      *(_QWORD *)(v163 + 40) = 0;
      *(_QWORD *)(v163 + 48) = 33686018;
      *(_QWORD *)(v163 + 56) = v158;
      *(_BYTE *)(v163 + 64) = 0;
      sub_100028588(0, 0, 1);
      sub_100053D0C(v163);
      v164 = swift_release(v163);
      v165 = IntentParameter.wrappedValue.getter(v164);
      LOBYTE(v163) = v402;
      v166 = TimelineProviderContext.family.getter(v165);
      v167 = WidgetFamily.rawValue.getter(v166);
      v159(v161, v162);
      a2 = v362;
      swift_bridgeObjectRetain(v362);
      sub_1000541B4((uint64_t)v355, v163, v167, a2, (uint64_t)&v378);
      v328 = v379;
      v329 = v378;
      v15 = v381;
      v326 = v382;
      v327 = v380;
      v168 = v383;
      goto LABEL_95;
    }
    sub_100056BC8(v335, v334, v333, v332, (uint64_t)v331, (uint64_t)v330);
    if ((v336 & 1) != 0)
    {
      v181 = sub_100056BC8(v337, v344, v346, v343, v345, v347);
      IntentParameter.wrappedValue.getter(v181);
      if ((_BYTE)v402)
        v182 = 16908802;
      else
        v182 = 131586;
      v183 = type metadata accessor for WidgetAnalyticsEvent();
      v184 = swift_allocObject(v183, 65, 7);
      *(_BYTE *)(v184 + 16) = 2;
      *(_QWORD *)(v184 + 24) = 2;
      *(_QWORD *)(v184 + 32) = 0;
      *(_QWORD *)(v184 + 40) = 0;
      *(_QWORD *)(v184 + 48) = v182;
      *(_QWORD *)(v184 + 56) = 0;
      *(_BYTE *)(v184 + 64) = 1;
      sub_100028588(0, 0, 1);
      sub_100053D0C(v184);
      swift_release(v184);
      v185 = *(_QWORD *)(v362 + 16);
      if (!v185)
        goto LABEL_227;
      do
      {
        v186 = swift_allocObject(v183, 65, 7);
        *(_BYTE *)(v186 + 16) = 5;
        *(_QWORD *)(v186 + 32) = 0;
        *(_QWORD *)(v186 + 40) = 0;
        *(_QWORD *)(v186 + 24) = 2;
        *(_OWORD *)(v186 + 48) = v360;
        *(_BYTE *)(v186 + 64) = 1;
        sub_100028588(0, 0, 1);
        sub_100053D0C(v186);
        v187 = swift_release(v186);
        --v185;
      }
      while (v185);
      v188 = IntentParameter.wrappedValue.getter(v187);
      v189 = v402;
      v190 = v352;
      v191 = TimelineProviderContext.family.getter(v188);
      v192 = WidgetFamily.rawValue.getter(v191);
      (*(void (**)(uint64_t, uint64_t))(v351 + 8))(v190, v353);
      a2 = v362;
      swift_bridgeObjectRetain(v362);
      sub_1000541B4((uint64_t)v355, v189, v192, a2, (uint64_t)&v372);
      v337 = v372;
      v59 = v373;
      v17 = v374;
      v193 = v375;
      v334 = v336;
      v335 = v340;
      v332 = v58;
      v333 = v348;
      v330 = v359;
      v331 = v339;
      v194 = v376;
      v195 = v377;
      v15 = v324;
LABEL_137:
      if (v323 == v321)
      {
        v298 = v193;
        v299 = v195;
        v300 = v194;
        swift_bridgeObjectRelease(v349);
        v257 = v300;
        v258 = v299;
        v256 = v298;
        v9 = v334;
        v58 = v332;
        v348 = v333;
        a1 = (uint64_t)v330;
        v339 = v331;
        v340 = v335;
        v255 = v337;
        if (!v15)
          goto LABEL_196;
        goto LABEL_183;
      }
      v345 = v194;
      v346 = v17;
      v347 = v195;
      v343 = v193;
      v344 = v59;
      if (v323 >= v349[2])
      {
        __break(1u);
        goto LABEL_224;
      }
      v208 = a1 + 48 * v323;
      v340 = *(_QWORD *)v208;
      v17 = *(unsigned __int8 *)(v208 + 8);
      v58 = *(_QWORD *)(v208 + 24);
      v348 = *(_QWORD *)(v208 + 16);
      v9 = *(_QWORD *)(v208 + 32);
      v209 = *(_QWORD **)(v208 + 40);
      ++v323;
      swift_bridgeObjectRetain_n(v58, 2);
      v359 = v209;
      swift_bridgeObjectRetain(v209);
      swift_bridgeObjectRetain(a2);
      sub_1000533E8(v58, a2);
      v121 = v210;
      swift_bridgeObjectRelease(v58);
      swift_bridgeObjectRelease(a2);
      if ((v121 & 1) != 0)
      {
LABEL_53:
        v322 = a4;
        v339 = (void *)v9;
        swift_bridgeObjectRelease(v349);
        sub_100056BC8(v335, v334, v333, v332, (uint64_t)v331, (uint64_t)v330);
        sub_100056BC8(v337, v344, v346, v343, v345, v347);
        swift_bridgeObjectRetain(v58);
        swift_bridgeObjectRetain(a2);
        a1 = (uint64_t)v359;
        swift_bridgeObjectRetain(v359);
        v122 = sub_100053998(v58, a2);
        v123 = swift_bridgeObjectRelease(a2);
        if ((v122 & 1) == 0)
        {
          v124 = type metadata accessor for WidgetAnalyticsEvent();
          v125 = swift_allocObject(v124, 65, 7);
          *(_BYTE *)(v125 + 16) = 4;
          *(_QWORD *)(v125 + 32) = 0;
          *(_QWORD *)(v125 + 40) = 0;
          *(_QWORD *)(v125 + 24) = 2;
          *(_OWORD *)(v125 + 48) = xmmword_100088D50;
          *(_BYTE *)(v125 + 64) = 1;
          sub_100028588(0, 0, 1);
          sub_100053D0C(v125);
          v123 = swift_release(v125);
        }
        IntentParameter.wrappedValue.getter(v123);
        swift_bridgeObjectRelease(a1);
        v126 = swift_bridgeObjectRelease(v58);
        v127 = v17;
        v128 = v17 ^ v402;
        if (((v17 ^ v402) & 1) != 0)
        {
          IntentParameter.wrappedValue.getter(v126);
          if ((_BYTE)v402)
            v129 = 16908802;
          else
            v129 = 131586;
          v130 = type metadata accessor for WidgetAnalyticsEvent();
          v131 = swift_allocObject(v130, 65, 7);
          *(_BYTE *)(v131 + 16) = 2;
          *(_QWORD *)(v131 + 24) = 2;
          *(_QWORD *)(v131 + 32) = 0;
          *(_QWORD *)(v131 + 40) = 0;
          *(_QWORD *)(v131 + 48) = v129;
          *(_QWORD *)(v131 + 56) = 0;
          *(_BYTE *)(v131 + 64) = 1;
          sub_100028588(0, 0, 1);
          sub_100053D0C(v131);
          v126 = swift_release(v131);
        }
        v132 = IntentParameter.wrappedValue.getter(v126);
        v133 = v402;
        v134 = v342;
        v135 = TimelineProviderContext.family.getter(v132);
        v136 = WidgetFamily.rawValue.getter(v135);
        (*(void (**)(char *, uint64_t))(v351 + 8))(v134, v353);
        if ((v128 & 1) != 0)
        {
          v137 = sub_10002F89C((uint64_t)_swiftEmptyArrayStorage);
          a2 = v362;
        }
        else
        {
          a2 = v362;
          swift_bridgeObjectRetain(v362);
          v137 = a2;
        }
        sub_1000541B4((uint64_t)v355, v133, v136, v137, (uint64_t)&v390);
        v255 = v390;
        v59 = v391;
        v17 = v392;
        v256 = v393;
        v257 = v394;
        v258 = v395;
        v9 = v127;
        if (!v15)
        {
LABEL_196:
          if (!v58)
          {
            v226 = v340;
            v227 = v348;
            v346 = v17;
            v347 = v258;
            v228 = (uint64_t)v339;
            v301 = v59;
            v302 = v255;
            v303 = v256;
            v345 = v257;
            sub_100056BF8(v340, v9, v348, 0, (uint64_t)v339, a1);
            sub_100056BC8(v302, v301, v346, v303, v345, v347);
            v58 = 0;
            a4 = (void *)v358;
            goto LABEL_189;
          }
          if (!v256)
            goto LABEL_188;
          v345 = v257;
          v346 = v17;
          v347 = v258;
          v343 = v256;
          v344 = v59;
          v337 = v255;
          swift_bridgeObjectRetain(v58);
          swift_bridgeObjectRetain(a1);
          v336 = v9;
          v17 = v9;
          v240 = v58;
          v359 = (_QWORD *)a1;
          *(_QWORD *)&v360 = v348;
          v239 = v340;
          v361 = v339;
          v241 = a1;
LABEL_153:
          *(_QWORD *)&v402 = v239;
          *((_QWORD *)&v402 + 1) = v17;
          v242 = v360;
          *(_QWORD *)&v403 = v360;
          *((_QWORD *)&v403 + 1) = v240;
          v243 = v17;
          v244 = (uint64_t)v361;
          *(_QWORD *)&v404 = v361;
          *((_QWORD *)&v404 + 1) = v241;
          swift_beginAccess(&v371, &v364, 0, 0);
          v245 = sub_1000544E8((uint64_t)v371, (uint64_t)&v402);
          v247 = v246;
          sub_100056BC8(v239, v243, v242, v240, v244, v241);
          if ((v247 & 1) == 0)
          {
            swift_beginAccess(&v371, v369, 33, 0);
            sub_100053268(v245, (uint64_t)&v396);
            swift_endAccess(v369);
            v401 = v398;
            sub_100050578(&v401);
            v400 = v399;
            sub_100056C28((uint64_t)&v400);
          }
          swift_beginAccess(&v371, v369, 33, 0);
          v59 = (uint64_t)v371;
          v248 = swift_isUniquelyReferenced_nonNull_native(v371);
          a2 = v362;
          v9 = v336;
          v47 = v346;
          if ((v248 & 1) != 0)
          {
LABEL_156:
            a1 = (uint64_t)v359;
            v250 = *(_QWORD *)(v59 + 16);
            v249 = *(_QWORD *)(v59 + 24);
            v251 = v347;
            if (v250 >= v249 >> 1)
            {
              v313 = sub_10005B080((_QWORD *)(v249 > 1), v250 + 1, 1, (_QWORD *)v59);
              v251 = v347;
              v59 = (uint64_t)v313;
            }
            *(_QWORD *)(v59 + 16) = v250 + 1;
            v252 = v59 + 48 * v250;
            *(_QWORD *)(v252 + 32) = v337;
            *(_BYTE *)(v252 + 40) = v344 & 1;
            v253 = v343;
            *(_QWORD *)(v252 + 48) = v47;
            *(_QWORD *)(v252 + 56) = v253;
            *(_QWORD *)(v252 + 64) = v345;
            *(_QWORD *)(v252 + 72) = v251;
            v371 = (_QWORD *)v59;
            v254 = (__int128 *)v369;
            goto LABEL_187;
          }
LABEL_215:
          v59 = (uint64_t)sub_10005B080(0, *(_QWORD *)(v59 + 16) + 1, 1, (_QWORD *)v59);
          goto LABEL_156;
        }
LABEL_183:
        sub_100056BC8(v255, v59, v17, v256, v257, v258);
        swift_beginAccess(&v371, &v402, 33, 0);
        v121 = (uint64_t)v371;
        if ((swift_isUniquelyReferenced_nonNull_native(v371) & 1) == 0)
          goto LABEL_219;
        goto LABEL_184;
      }
      continue;
    }
    break;
  }
  swift_bridgeObjectRetain(v58);
  swift_bridgeObjectRetain(v359);
  IntentParameter.wrappedValue.getter(v196);
  v197 = v402;
  v9 = 1;
  if ((_QWORD)v402)
  {
    v198 = *(_QWORD *)(v402 + 16);
    if (v198)
    {
      v322 = a4;
      v199 = type metadata accessor for WidgetAnalyticsEvent();
      v335 = v197;
      swift_bridgeObjectRetain(v197);
      do
      {
        v200 = swift_allocObject(v199, 65, 7);
        *(_BYTE *)(v200 + 16) = 5;
        *(_QWORD *)(v200 + 32) = 0;
        *(_QWORD *)(v200 + 40) = 0;
        *(_QWORD *)(v200 + 24) = 2;
        *(_OWORD *)(v200 + 48) = v360;
        *(_BYTE *)(v200 + 64) = 1;
        sub_100028588(0, 0, 1);
        sub_100053D0C(v200);
        swift_release(v200);
        --v198;
      }
      while (v198);
      swift_bridgeObjectRelease(0);
      v197 = v335;
      swift_bridgeObjectRelease(v335);
      v9 = 1;
      a4 = v322;
    }
    swift_bridgeObjectRelease(v197);
  }
  v121 = 1 << *(_BYTE *)(v58 + 32);
  v201 = *(_QWORD *)(v58 + 64);
  swift_bridgeObjectRelease(v359);
  v15 = 0;
  if (v121 < 64)
    v202 = ~(-1 << v121);
  else
    v202 = -1;
  v203 = v202 & v201;
  v204 = (unint64_t)(v121 + 63) >> 6;
  while (2)
  {
    if (v203)
      goto LABEL_118;
    v206 = v15 + 1;
    if (__OFADD__(v15, 1))
    {
      __break(1u);
      goto LABEL_218;
    }
    if (v206 >= v204)
      goto LABEL_133;
    v203 = *(_QWORD *)(a2 + 8 * v206);
    ++v15;
    if (v203)
      goto LABEL_118;
    v15 = v206 + 1;
    if (v206 + 1 >= v204)
      goto LABEL_133;
    v203 = *(_QWORD *)(a2 + 8 * v15);
    if (v203)
      goto LABEL_118;
    v15 = v206 + 2;
    if (v206 + 2 >= v204)
      goto LABEL_133;
    v203 = *(_QWORD *)(a2 + 8 * v15);
    if (v203)
    {
LABEL_118:
      v203 &= v203 - 1;
      v205 = type metadata accessor for WidgetAnalyticsEvent();
      v121 = swift_allocObject(v205, 65, 7);
      *(_BYTE *)(v121 + 16) = 6;
      *(_QWORD *)(v121 + 32) = 0;
      *(_QWORD *)(v121 + 40) = 0;
      *(_QWORD *)(v121 + 24) = 2;
      *(_OWORD *)(v121 + 48) = v360;
      *(_BYTE *)(v121 + 64) = 1;
      sub_100028588(0, 0, 1);
      sub_100053D0C(v121);
      swift_release(v121);
      continue;
    }
    break;
  }
  v207 = v206 + 3;
  if (v207 >= v204)
  {
LABEL_133:
    swift_release(v58);
    v334 = v336;
    v335 = v340;
    v332 = v58;
    v333 = v348;
    v330 = v359;
    v331 = v339;
    goto LABEL_134;
  }
  v203 = *(_QWORD *)(a2 + 8 * v207);
  if (v203)
  {
    v15 = v207;
    goto LABEL_118;
  }
  while (1)
  {
    v15 = v207 + 1;
    if (__OFADD__(v207, 1))
      break;
    if (v15 >= v204)
      goto LABEL_133;
    v203 = *(_QWORD *)(a2 + 8 * v15);
    ++v207;
    if (v203)
      goto LABEL_118;
  }
LABEL_224:
  __break(1u);
LABEL_225:
  __break(1u);
LABEL_226:
  __break(1u);
LABEL_227:
  __break(1u);
LABEL_228:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
  return result;
}

uint64_t sub_100056B48(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for AccessoryAndSceneEntity(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_100056B8C(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for AccessoryAndSceneEntity(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_100056BC8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t result;

  if (a4)
  {
    swift_bridgeObjectRelease(a4);
    return swift_bridgeObjectRelease(a6);
  }
  return result;
}

uint64_t sub_100056BF8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t result;

  if (a4)
  {
    swift_bridgeObjectRetain(a4);
    return swift_bridgeObjectRetain(a6);
  }
  return result;
}

uint64_t sub_100056C28(uint64_t a1)
{
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
  return a1;
}

uint64_t sub_100056C50(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10000527C(&qword_1000A65C0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

unint64_t sub_100056C98()
{
  unint64_t result;

  result = qword_1000A65D8;
  if (!qword_1000A65D8)
  {
    result = swift_getWitnessTable(&unk_100088C04, &type metadata for WidgetMetricsInfo);
    atomic_store(result, (unint64_t *)&qword_1000A65D8);
  }
  return result;
}

uint64_t sub_100056CDC(uint64_t a1)
{
  (*(void (**)(void))(*(&type metadata for Data - 1) + 8))();
  return a1;
}

uint64_t sub_100056D10(unint64_t *a1, void (*a2)(void), uint64_t a3)
{
  uint64_t result;
  uint64_t v7;

  result = *a1;
  if (!result)
  {
    v7 = sub_1000052BC(&qword_1000A65C8);
    a2();
    result = swift_getWitnessTable(a3, v7);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_100056D78()
{
  unint64_t result;

  result = qword_1000A65E8;
  if (!qword_1000A65E8)
  {
    result = swift_getWitnessTable(&unk_100088BDC, &type metadata for WidgetMetricsInfo);
    atomic_store(result, (unint64_t *)&qword_1000A65E8);
  }
  return result;
}

uint64_t destroy for WidgetMetricsInfo(uint64_t a1)
{
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 24));
  return swift_bridgeObjectRelease(*(_QWORD *)(a1 + 40));
}

uint64_t initializeWithCopy for WidgetMetricsInfo(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  v3 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v3;
  v4 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v4;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  return a1;
}

uint64_t assignWithCopy for WidgetMetricsInfo(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v4 = *(_QWORD *)(a2 + 24);
  v5 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  v6 = *(_QWORD *)(a2 + 40);
  v7 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  return a1;
}

uint64_t assignWithTake for WidgetMetricsInfo(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  v4 = *(_QWORD *)(a2 + 24);
  v5 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v4;
  swift_bridgeObjectRelease(v5);
  v6 = *(_QWORD *)(a2 + 40);
  v7 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v6;
  swift_bridgeObjectRelease(v7);
  return a1;
}

uint64_t getEnumTagSinglePayload for WidgetMetricsInfo(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 48))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for WidgetMetricsInfo(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 48) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 24) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 48) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for WidgetMetricsInfo()
{
  return &type metadata for WidgetMetricsInfo;
}

unint64_t sub_100056FA4()
{
  unint64_t result;

  result = qword_1000A65F8;
  if (!qword_1000A65F8)
  {
    result = swift_getWitnessTable(&unk_100088CF0, &type metadata for WidgetMetricsInfo.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000A65F8);
  }
  return result;
}

uint64_t sub_100056FE8(uint64_t a1, unint64_t a2)
{
  BOOL v3;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  char v9;

  v3 = a1 == 0x7361487865646E69 && a2 == 0xE900000000000068;
  if (v3
    || (_stringCompareWithSmolCheck(_:_:expecting:)(0x7361487865646E69, 0xE900000000000068, a1, a2, 0) & 1) != 0)
  {
    swift_bridgeObjectRelease(a2);
    return 0;
  }
  if (a1 == 0xD000000000000018)
  {
    v6 = 0x800000010008B2E0;
    if (a2 == 0x800000010008B2E0)
      goto LABEL_11;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000018, 0x800000010008B2E0, a1, a2, 0) & 1) != 0)
  {
    v6 = a2;
LABEL_11:
    swift_bridgeObjectRelease(v6);
    return 1;
  }
  if (a1 == 0xD000000000000010)
  {
    v7 = 0x800000010008B300;
    if (a2 == 0x800000010008B300)
      goto LABEL_16;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000010, 0x800000010008B300, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
LABEL_16:
    swift_bridgeObjectRelease(v7);
    return 2;
  }
  if (a1 == 0xD00000000000001ALL && a2 == 0x800000010008B320)
  {
    v8 = 0x800000010008B320;
LABEL_22:
    swift_bridgeObjectRelease(v8);
    return 3;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD00000000000001ALL, 0x800000010008B320, a1, a2, 0) & 1) != 0)
  {
    v8 = a2;
    goto LABEL_22;
  }
  if (a1 == 0x7470697263736564 && a2 == 0xEB000000006E6F69)
  {
    swift_bridgeObjectRelease(0xEB000000006E6F69);
    return 4;
  }
  else
  {
    v9 = _stringCompareWithSmolCheck(_:_:expecting:)(0x7470697263736564, 0xEB000000006E6F69, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v9 & 1) != 0)
      return 4;
    else
      return 5;
  }
}

uint64_t sub_1000571F8@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  __n128 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(char *, uint64_t);
  uint64_t v21;
  uint64_t v22;
  uint64_t result;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  char v29;
  char v30;
  char v31;
  char v32;

  v5 = sub_10000527C(&qword_1000A6610);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v24 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_100032248(a1, v9);
  v11 = sub_100056FA4();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for WidgetMetricsInfo.CodingKeys, &type metadata for WidgetMetricsInfo.CodingKeys, v11, v9, v10);
  if (v2)
    return sub_100023FC0(a1);
  v32 = 0;
  v12 = KeyedDecodingContainer.decode(_:forKey:)(&v32, v5);
  v31 = 1;
  v13 = KeyedDecodingContainer.decode(_:forKey:)(&v31, v5);
  v30 = 2;
  v26 = KeyedDecodingContainer.decode(_:forKey:)(&v30, v5);
  v14 = sub_10000527C(&qword_1000A6600);
  v29 = 3;
  v15 = sub_100057474(&qword_1000A6618, (uint64_t)&protocol witness table for String, (uint64_t)&protocol witness table for Int, (uint64_t)&protocol conformance descriptor for <> [A : B]);
  KeyedDecodingContainer.decode<A>(_:forKey:)(&v27, v14, &v29, v5, v14, v15);
  v28 = 4;
  v25 = v27;
  v16 = swift_bridgeObjectRetain(v27);
  v17 = KeyedDecodingContainer.decode(_:forKey:)(&v28, v5, v16);
  v19 = v18;
  v20 = *(void (**)(char *, uint64_t))(v6 + 8);
  v21 = v17;
  v20(v8, v5);
  swift_bridgeObjectRetain(v19);
  sub_100023FC0(a1);
  swift_bridgeObjectRelease(v19);
  v22 = v25;
  result = swift_bridgeObjectRelease(v25);
  *(_QWORD *)a2 = v12;
  *(_BYTE *)(a2 + 8) = v13 & 1;
  *(_QWORD *)(a2 + 16) = v26;
  *(_QWORD *)(a2 + 24) = v22;
  *(_QWORD *)(a2 + 32) = v21;
  *(_QWORD *)(a2 + 40) = v19;
  return result;
}

uint64_t sub_100057474(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v7;

  result = *a1;
  if (!result)
  {
    v7 = sub_1000052BC(&qword_1000A6600);
    result = swift_getWitnessTable(a4, v7);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for WidgetMetricsInfo.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFC)
    goto LABEL_17;
  if (a2 + 4 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 4) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 4;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 4;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 4;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 5;
  v8 = v6 - 5;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for WidgetMetricsInfo.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 4 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 4) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFC)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFB)
    return ((uint64_t (*)(void))((char *)&loc_1000575B4 + 4 * byte_100088B7A[v4]))();
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_1000575E8 + 4 * byte_100088B75[v4]))();
}

uint64_t sub_1000575E8(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000575F0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1000575F8);
  return result;
}

uint64_t sub_100057604(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10005760CLL);
  *(_BYTE *)result = a2 + 4;
  return result;
}

uint64_t sub_100057610(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100057618(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for WidgetMetricsInfo.CodingKeys()
{
  return &type metadata for WidgetMetricsInfo.CodingKeys;
}

unint64_t sub_100057638()
{
  unint64_t result;

  result = qword_1000A6620;
  if (!qword_1000A6620)
  {
    result = swift_getWitnessTable(&unk_100088CC8, &type metadata for WidgetMetricsInfo.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000A6620);
  }
  return result;
}

unint64_t sub_100057680()
{
  unint64_t result;

  result = qword_1000A6628;
  if (!qword_1000A6628)
  {
    result = swift_getWitnessTable(&unk_100088C38, &type metadata for WidgetMetricsInfo.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000A6628);
  }
  return result;
}

unint64_t sub_1000576C8()
{
  unint64_t result;

  result = qword_1000A6630;
  if (!qword_1000A6630)
  {
    result = swift_getWitnessTable(&unk_100088C60, &type metadata for WidgetMetricsInfo.CodingKeys);
    atomic_store(result, &qword_1000A6630);
  }
  return result;
}

uint64_t sub_10005770C(uint64_t a1, void *a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  id v7;

  v2 = *(_QWORD *)(a1 + 32);
  if (!a2)
    return swift_continuation_throwingResume(*(_QWORD *)(a1 + 32));
  v4 = sub_10000527C(&qword_1000A64A0);
  v5 = swift_allocError(v4, &protocol self-conformance witness table for Error, 0, 0);
  *v6 = a2;
  v7 = a2;
  return swift_continuation_throwingResumeWithError(v2, v5);
}

void *sub_100057780(void (*a1)(uint64_t *__return_ptr, id *), uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t i;
  uint64_t v8;
  id v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v17;
  uint64_t v19;
  id v20;
  unint64_t v21;

  v4 = v3;
  v21 = (unint64_t)&_swiftEmptyArrayStorage;
  if ((unint64_t)a3 >> 62)
    goto LABEL_17;
  v6 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain(a3);
  for (; v6; v6 = _CocoaArrayWrapper.endIndex.getter(v17))
  {
    for (i = 4; ; ++i)
    {
      v9 = (a3 & 0xC000000000000001) != 0
         ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(i - 4, a3)
         : *(id *)(a3 + 8 * i);
      v10 = v9;
      v11 = i - 3;
      if (__OFADD__(i - 4, 1))
        break;
      v20 = v9;
      a1(&v19, &v20);
      if (v4)
      {
        swift_bridgeObjectRelease(a3);

        return (void *)swift_bridgeObjectRelease(v21);
      }

      v13 = v19;
      if (v19)
      {
        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v12);
        v15 = *(_QWORD *)((v21 & 0xFFFFFFFFFFFFFF8) + 0x10);
        v14 = *(_QWORD *)((v21 & 0xFFFFFFFFFFFFFF8) + 0x18);
        if (v15 >= v14 >> 1)
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v14 > 1, v15 + 1, 1);
        v8 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v15, v13);
        specialized Array._endMutation()(v8);
      }
      if (v11 == v6)
      {
        swift_bridgeObjectRelease(a3);
        return (void *)v21;
      }
    }
    __break(1u);
LABEL_17:
    if (a3 < 0)
      v17 = a3;
    else
      v17 = a3 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a3);
  }
  swift_bridgeObjectRelease(a3);
  return &_swiftEmptyArrayStorage;
}

_QWORD *sub_100057918(void (*a1)(uint64_t *__return_ptr, id *), uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  _QWORD *result;
  uint64_t v9;
  id v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  id v16;
  uint64_t v17;
  _QWORD *v18;

  v4 = v3;
  if ((unint64_t)a3 >> 62)
    goto LABEL_16;
  v7 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    result = &_swiftEmptyArrayStorage;
    if (!v7)
      break;
    v18 = &_swiftEmptyArrayStorage;
    result = (_QWORD *)specialized ContiguousArray.reserveCapacity(_:)(v7);
    if (v7 < 0)
    {
      __break(1u);
      return result;
    }
    v9 = 0;
    while (v7 != v9)
    {
      if ((a3 & 0xC000000000000001) != 0)
        v10 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v9, a3);
      else
        v10 = *(id *)(a3 + 8 * v9 + 32);
      v11 = v10;
      v16 = v10;
      a1(&v17, &v16);

      if (v4)
        return (_QWORD *)swift_release(v18);
      ++v9;
      v12 = v17;
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      v13 = v18[2];
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v13);
      v14 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v13, v12);
      specialized ContiguousArray._endMutation()(v14);
      if (v7 == v9)
        return v18;
    }
    __break(1u);
LABEL_16:
    if (a3 < 0)
      v15 = a3;
    else
      v15 = a3 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a3);
    v7 = _CocoaArrayWrapper.endIndex.getter(v15);
    swift_bridgeObjectRelease(a3);
  }
  return result;
}

uint64_t sub_100057A80(uint64_t a1)
{
  return sub_100057C60(a1, &qword_1000A5798, (uint64_t (*)(_QWORD))&type metadata accessor for UUID);
}

uint64_t sub_100057A94(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int isUniquelyReferenced_nonNull_bridgeObject;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  if ((unint64_t)a1 >> 62)
  {
    if (a1 < 0)
      v16 = a1;
    else
      v16 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v3 = _CocoaArrayWrapper.endIndex.getter(v16);
    swift_bridgeObjectRelease(a1);
  }
  else
  {
    v3 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  v4 = *v1;
  if (!((unint64_t)*v1 >> 62))
  {
    v5 = *(_QWORD *)((v4 & 0xFFFFFFFFFFFFF8) + 0x10);
    v6 = v5 + v3;
    if (!__OFADD__(v5, v3))
      goto LABEL_5;
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  if (v4 < 0)
    v17 = *v1;
  else
    v17 = v4 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(*v1);
  v5 = _CocoaArrayWrapper.endIndex.getter(v17);
  swift_bridgeObjectRelease(v4);
  v6 = v5 + v3;
  if (__OFADD__(v5, v3))
    goto LABEL_29;
LABEL_5:
  v4 = *v1;
  isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject(*v1);
  *v1 = v4;
  v5 = 0;
  if (isUniquelyReferenced_nonNull_bridgeObject && (v4 & 0x8000000000000000) == 0 && (v4 & 0x4000000000000000) == 0)
  {
    v8 = v4 & 0xFFFFFFFFFFFFFF8;
    if (v6 <= *(_QWORD *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
      goto LABEL_15;
    v5 = 1;
  }
  if ((unint64_t)v4 >> 62)
    goto LABEL_31;
  v9 = *(_QWORD *)((v4 & 0xFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    if (v9 <= v6)
      v9 = v6;
    swift_bridgeObjectRetain(v4);
    v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v5, v9, 1, v4);
    swift_bridgeObjectRelease(*v1);
    *v1 = v4;
    v8 = v4 & 0xFFFFFFFFFFFFFF8;
LABEL_15:
    result = sub_10005B2CC(v8 + 8 * *(_QWORD *)(v8 + 16) + 32, (*(_QWORD *)(v8 + 24) >> 1) - *(_QWORD *)(v8 + 16), a1);
    if (v11 >= v3)
      break;
LABEL_30:
    __break(1u);
LABEL_31:
    if (v4 < 0)
      v18 = v4;
    else
      v18 = v4 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v4);
    v9 = _CocoaArrayWrapper.endIndex.getter(v18);
    swift_bridgeObjectRelease(v4);
  }
  if (v11 < 1)
    goto LABEL_19;
  v12 = *(_QWORD *)((*v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  v13 = __OFADD__(v12, v11);
  v14 = v12 + v11;
  if (!v13)
  {
    *(_QWORD *)((*v1 & 0xFFFFFFFFFFFFFF8) + 0x10) = v14;
LABEL_19:
    v15 = swift_bridgeObjectRelease(result);
    return specialized Array._endMutation()(v15);
  }
  __break(1u);
  return result;
}

uint64_t sub_100057C4C(uint64_t a1)
{
  return sub_100057C60(a1, &qword_1000A5538, type metadata accessor for AccessoryAndSceneEntity);
}

uint64_t sub_100057C60(uint64_t a1, uint64_t *a2, uint64_t (*a3)(_QWORD))
{
  unint64_t *v3;
  unint64_t v4;
  unint64_t v5;
  int64_t v6;
  int64_t v7;
  int isUniquelyReferenced_nonNull_native;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v25;
  BOOL v26;
  uint64_t v27;
  int64_t v28;
  uint64_t result;
  char v30;

  v4 = *(_QWORD *)(a1 + 16);
  v5 = *v3;
  v6 = *(_QWORD *)(*v3 + 16);
  v7 = v6 + v4;
  if (__OFADD__(v6, v4))
  {
    __break(1u);
    goto LABEL_21;
  }
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
  if (isUniquelyReferenced_nonNull_native && v7 <= *(_QWORD *)(v5 + 24) >> 1)
  {
    v12 = *(_QWORD *)(a1 + 16);
    if (v12)
      goto LABEL_5;
LABEL_18:
    if (!v4)
      goto LABEL_19;
    goto LABEL_21;
  }
  if (v6 <= v7)
    v28 = v6 + v4;
  else
    v28 = v6;
  v5 = sub_10005AA38(isUniquelyReferenced_nonNull_native, v28, 1, v5, a2, a3);
  v12 = *(_QWORD *)(a1 + 16);
  if (!v12)
    goto LABEL_18;
LABEL_5:
  v13 = *(_QWORD *)(v5 + 16);
  v14 = (*(_QWORD *)(v5 + 24) >> 1) - v13;
  v15 = a3(0);
  if (v14 < (uint64_t)v12)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v16 = *(_QWORD *)(v15 - 8);
  v17 = (*(unsigned __int8 *)(v16 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80);
  v18 = *(_QWORD *)(v16 + 72);
  v19 = v5 + v17 + v18 * v13;
  v20 = a1 + v17;
  v21 = v18 * v12;
  v22 = v19 + v21;
  v23 = v20 + v21;
  if (v20 < v22 && v19 < v23)
    goto LABEL_24;
  swift_arrayInitWithCopy(v19);
  if (v12 < v4)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  v25 = *(_QWORD *)(v5 + 16);
  v26 = __OFADD__(v25, v12);
  v27 = v25 + v12;
  if (!v26)
  {
    *(_QWORD *)(v5 + 16) = v27;
LABEL_19:
    result = swift_bridgeObjectRelease(a1);
    *v3 = v5;
    return result;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  v30 = 2;
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, v30, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_100057DE4(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int isUniquelyReferenced_nonNull_bridgeObject;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  if ((unint64_t)a1 >> 62)
  {
    if (a1 < 0)
      v16 = a1;
    else
      v16 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v3 = _CocoaArrayWrapper.endIndex.getter(v16);
    swift_bridgeObjectRelease(a1);
  }
  else
  {
    v3 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  v4 = *v1;
  if (!((unint64_t)*v1 >> 62))
  {
    v5 = *(_QWORD *)((v4 & 0xFFFFFFFFFFFFF8) + 0x10);
    v6 = v5 + v3;
    if (!__OFADD__(v5, v3))
      goto LABEL_5;
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  if (v4 < 0)
    v17 = *v1;
  else
    v17 = v4 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(*v1);
  v5 = _CocoaArrayWrapper.endIndex.getter(v17);
  swift_bridgeObjectRelease(v4);
  v6 = v5 + v3;
  if (__OFADD__(v5, v3))
    goto LABEL_29;
LABEL_5:
  v4 = *v1;
  isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject(*v1);
  *v1 = v4;
  v5 = 0;
  if (isUniquelyReferenced_nonNull_bridgeObject && (v4 & 0x8000000000000000) == 0 && (v4 & 0x4000000000000000) == 0)
  {
    v8 = v4 & 0xFFFFFFFFFFFFFF8;
    if (v6 <= *(_QWORD *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
      goto LABEL_15;
    v5 = 1;
  }
  if ((unint64_t)v4 >> 62)
    goto LABEL_31;
  v9 = *(_QWORD *)((v4 & 0xFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    if (v9 <= v6)
      v9 = v6;
    swift_bridgeObjectRetain(v4);
    v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v5, v9, 1, v4);
    swift_bridgeObjectRelease(*v1);
    *v1 = v4;
    v8 = v4 & 0xFFFFFFFFFFFFFF8;
LABEL_15:
    result = sub_10005B4E0(v8 + 8 * *(_QWORD *)(v8 + 16) + 32, (*(_QWORD *)(v8 + 24) >> 1) - *(_QWORD *)(v8 + 16), a1);
    if (v11 >= v3)
      break;
LABEL_30:
    __break(1u);
LABEL_31:
    if (v4 < 0)
      v18 = v4;
    else
      v18 = v4 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v4);
    v9 = _CocoaArrayWrapper.endIndex.getter(v18);
    swift_bridgeObjectRelease(v4);
  }
  if (v11 < 1)
    goto LABEL_19;
  v12 = *(_QWORD *)((*v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  v13 = __OFADD__(v12, v11);
  v14 = v12 + v11;
  if (!v13)
  {
    *(_QWORD *)((*v1 & 0xFFFFFFFFFFFFFF8) + 0x10) = v14;
LABEL_19:
    v15 = swift_bridgeObjectRelease(result);
    return specialized Array._endMutation()(v15);
  }
  __break(1u);
  return result;
}

uint64_t sub_100057F9C()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 24) = v0;
  return swift_task_switch(sub_100057FB4, 0, 0);
}

void sub_100057FB4()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;

  v1 = *(_QWORD *)(v0 + 24);
  v2 = (_QWORD *)(v1 + *(int *)(type metadata accessor for WidgetTileInfo(0) + 56));
  *(_QWORD *)(v0 + 32) = *v2;
  __asm { BR              X11 }
}

uint64_t sub_100058004@<X0>(void *a1@<X8>)
{
  uint64_t v1;
  id v2;
  _QWORD *v3;

  v2 = a1;
  *(_QWORD *)(v1 + 56) = v2;
  v3 = (_QWORD *)swift_task_alloc(dword_1000A665C);
  *(_QWORD *)(v1 + 64) = v3;
  *v3 = v1;
  v3[1] = sub_100058318;
  return sub_100058938((uint64_t)v2);
}

uint64_t sub_1000580DC@<X0>(void *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  id v3;
  _QWORD *v4;
  uint64_t v5;

  v2 = dword_1000A6644;
  v3 = a1;
  v4 = (_QWORD *)swift_task_alloc(v2);
  *(_QWORD *)(v1 + 40) = v4;
  *v4 = v1;
  v4[1] = sub_1000581B0;
  v5 = *(_QWORD *)(v1 + 24);
  v4[2] = v3;
  v4[3] = v5;
  return swift_task_switch(sub_1000586E0, 0, 0);
}

uint64_t sub_1000581B0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 40);
  *(_QWORD *)(*(_QWORD *)v1 + 48) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_10005820C, 0, 0);
}

uint64_t sub_10005820C()
{
  _QWORD *v0;
  uint64_t v1;
  void *v2;
  __n128 v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v8;
  uint64_t v9;
  __n128 v10;

  v1 = v0[6];
  v2 = (void *)v0[4];
  if ((unint64_t)v1 >> 62)
  {
    if (v1 < 0)
      v8 = v0[6];
    else
      v8 = v1 & 0xFFFFFFFFFFFFFF8;
    v9 = sub_100008CBC(0, &qword_1000A6648, HMRequestBase_ptr);
    v10 = swift_bridgeObjectRetain(v1);
    v5 = _bridgeCocoaArray<A>(_:)(v8, v9, v10);
    swift_bridgeObjectRelease(v1);

    v4 = v0[6];
  }
  else
  {
    v3 = swift_bridgeObjectRetain(v0[6]);
    dispatch thunk of __ContiguousArrayStorageBase.staticElementType.getter(v3);

    sub_100008CBC(0, &qword_1000A6648, HMRequestBase_ptr);
    v4 = v0[6];
    v5 = v4;
  }
  v0[10] = v5;
  swift_bridgeObjectRelease(v4);
  v6 = (_QWORD *)swift_task_alloc(dword_1000A6654);
  v0[11] = v6;
  *v6 = v0;
  v6[1] = sub_100058480;
  v6[19] = v5;
  return swift_task_switch(sub_100059C20, 0, 0);
}

uint64_t sub_100058318(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 64);
  *(_QWORD *)(*(_QWORD *)v1 + 72) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_100058374, 0, 0);
}

uint64_t sub_100058374()
{
  _QWORD *v0;
  uint64_t v1;
  void *v2;
  __n128 v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v8;
  uint64_t v9;
  __n128 v10;

  v1 = v0[9];
  v2 = (void *)v0[7];
  if ((unint64_t)v1 >> 62)
  {
    if (v1 < 0)
      v8 = v0[9];
    else
      v8 = v1 & 0xFFFFFFFFFFFFFF8;
    v9 = sub_100008CBC(0, &qword_1000A6648, HMRequestBase_ptr);
    v10 = swift_bridgeObjectRetain(v1);
    v5 = _bridgeCocoaArray<A>(_:)(v8, v9, v10);
    swift_bridgeObjectRelease(v1);

    v4 = v0[9];
  }
  else
  {
    v3 = swift_bridgeObjectRetain(v0[9]);
    dispatch thunk of __ContiguousArrayStorageBase.staticElementType.getter(v3);

    sub_100008CBC(0, &qword_1000A6648, HMRequestBase_ptr);
    v4 = v0[9];
    v5 = v4;
  }
  v0[10] = v5;
  swift_bridgeObjectRelease(v4);
  v6 = (_QWORD *)swift_task_alloc(dword_1000A6654);
  v0[11] = v6;
  *v6 = v0;
  v6[1] = sub_100058480;
  v6[19] = v5;
  return swift_task_switch(sub_100059C20, 0, 0);
}

uint64_t sub_100058480()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(*v1 + 88);
  v3 = *v1;
  *(_QWORD *)(v3 + 96) = v0;
  swift_task_dealloc(v2);
  if (v0)
    return swift_task_switch(sub_1000584F4, 0, 0);
  swift_bridgeObjectRelease(*(_QWORD *)(v3 + 80));
  return (*(uint64_t (**)(void))(v3 + 8))();
}

uint64_t sub_1000584F4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  _BOOL4 v6;
  uint64_t v7;
  uint8_t *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 80));
  if (qword_1000A4F08 != -1)
    swift_once(&qword_1000A4F08, sub_100053184);
  v1 = *(_QWORD *)(v0 + 96);
  v2 = type metadata accessor for Logger(0);
  sub_100014698(v2, (uint64_t)qword_1000A7A80);
  swift_errorRetain(v1);
  v3 = swift_errorRetain(v1);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.error.getter(v4);
  v6 = os_log_type_enabled(v4, v5);
  v7 = *(_QWORD *)(v0 + 96);
  if (v6)
  {
    v8 = (uint8_t *)swift_slowAlloc(12, -1);
    v9 = (uint64_t *)swift_slowAlloc(8, -1);
    *(_DWORD *)v8 = 138412290;
    swift_errorRetain(v7);
    v10 = _swift_stdlib_bridgeErrorToNSError(v7);
    *(_QWORD *)(v0 + 16) = v10;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 16, v0 + 24, v8 + 4, v8 + 12);
    *v9 = v10;
    swift_errorRelease(v7);
    swift_errorRelease(v7);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Error %@", v8, 0xCu);
    v11 = sub_10000527C(&qword_1000A5208);
    swift_arrayDestroy(v9, 1, v11);
    swift_slowDealloc(v9, -1, -1);
    swift_slowDealloc(v8, -1, -1);

    swift_errorRelease(v7);
  }
  else
  {
    swift_errorRelease(*(_QWORD *)(v0 + 96));
    swift_errorRelease(v7);
    swift_errorRelease(v7);

  }
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000586C8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 + 16) = a1;
  *(_QWORD *)(v2 + 24) = v1;
  return swift_task_switch(sub_1000586E0, 0, 0);
}

uint64_t sub_1000586E0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  _QWORD *v8;
  id v10;

  v1 = *(_QWORD *)(v0 + 24);
  v2 = *(int *)(type metadata accessor for WidgetTileInfo(0) + 60);
  *(_DWORD *)(v0 + 48) = v2;
  if (*(_QWORD *)(*(_QWORD *)(v1 + v2) + 16))
  {
    v3 = sub_10001709C();
    v4 = sub_10000527C(&qword_1000A5200);
    v5 = swift_allocObject(v4, 40, 7);
    *(_OWORD *)(v5 + 16) = xmmword_100086CF0;
    v6 = *(_QWORD *)(v0 + 16);
    if ((v3 & 1) != 0)
      v7 = objc_msgSend((id)objc_opt_self(HMExecuteTurnOffRequest), "executeRequestWithActionSet:", v6);
    else
      v7 = objc_msgSend((id)objc_opt_self(HMExecuteRequest), "executeRequestWithActionSet:", v6);
    v10 = v7;
    *(_QWORD *)(v5 + 32) = v10;
    specialized Array._endMutation()(v10);
    return (*(uint64_t (**)(uint64_t))(v0 + 8))(v5);
  }
  else
  {
    v8 = (_QWORD *)swift_task_alloc(dword_1000A51DC);
    *(_QWORD *)(v0 + 32) = v8;
    *v8 = v0;
    v8[1] = sub_1000587FC;
    return sub_100017A38();
  }
}

uint64_t sub_1000587FC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 32);
  *(_QWORD *)(*(_QWORD *)v1 + 40) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_100058858, 0, 0);
}

uint64_t sub_100058858()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  id v8;

  v1 = *(_QWORD *)(v0 + 40);
  v2 = *(int *)(v0 + 48);
  v3 = *(_QWORD *)(v0 + 24);
  swift_bridgeObjectRelease(*(_QWORD *)(v3 + v2));
  *(_QWORD *)(v3 + v2) = v1;
  LOBYTE(v3) = sub_10001709C();
  v4 = sub_10000527C(&qword_1000A5200);
  v5 = swift_allocObject(v4, 40, 7);
  *(_OWORD *)(v5 + 16) = xmmword_100086CF0;
  v6 = *(_QWORD *)(v0 + 16);
  if ((v3 & 1) != 0)
    v7 = objc_msgSend((id)objc_opt_self(HMExecuteTurnOffRequest), "executeRequestWithActionSet:", v6);
  else
    v7 = objc_msgSend((id)objc_opt_self(HMExecuteRequest), "executeRequestWithActionSet:", v6);
  v8 = v7;
  *(_QWORD *)(v5 + 32) = v8;
  specialized Array._endMutation()(v8);
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v5);
}

uint64_t sub_100058938(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2[42] = a1;
  v2[43] = v1;
  v3 = type metadata accessor for WidgetTileInfo(0);
  v2[44] = v3;
  v2[45] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v3 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for CharacteristicKind(0);
  v2[46] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v2[47] = v5;
  v2[48] = swift_task_alloc((*(_QWORD *)(v5 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for ServiceKind(0);
  v2[49] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v2[50] = v7;
  v2[51] = swift_task_alloc((*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_1000589E4, 0, 0);
}

uint64_t sub_1000589E4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t, _QWORD, uint64_t);
  uint64_t v13;
  char v14;
  char v15;
  void (*v16)(uint64_t, uint64_t);
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void (*v31)(uint64_t, _QWORD, uint64_t);
  unint64_t v32;
  char v33;
  char v34;
  void (*v35)(uint64_t, uint64_t);
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  void (*v42)(uint64_t, uint64_t, uint64_t);
  _QWORD *v43;
  uint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  void (*v47)(uint64_t, uint64_t, uint64_t);
  void (*v48)(uint64_t, uint64_t);
  uint64_t v49;
  uint64_t v50;
  char v51;
  char v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  _QWORD *v56;
  uint64_t v57;
  _QWORD *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  void (*v62)(uint64_t, _QWORD, uint64_t);
  uint64_t v63;
  char v64;
  char v65;
  void (*v66)(uint64_t, uint64_t);
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  _QWORD *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  _QWORD *v75;
  uint64_t v76;
  _QWORD *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  void (*v83)(uint64_t, _QWORD, uint64_t);
  uint64_t v84;
  char v85;
  char v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  char v93;
  _QWORD *v94;
  uint64_t v95;
  _QWORD *v96;
  void (*v97)(uint64_t, uint64_t);
  char v98;
  _QWORD *v99;
  uint64_t v100;
  _QWORD *v101;
  void (*v102)(uint64_t, _QWORD, uint64_t);
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  _QWORD *v107;

  v2 = *(_QWORD *)(v1 + 344);
  v3 = *(int *)(*(_QWORD *)(v1 + 352) + 60);
  *(_DWORD *)(v1 + 432) = v3;
  v4 = *(_QWORD *)(v2 + v3);
  if (!*(_QWORD *)(v4 + 16))
  {
    v26 = (_QWORD *)swift_task_alloc(dword_1000A51DC);
    *(_QWORD *)(v1 + 416) = v26;
    *v26 = v1;
    v26[1] = sub_1000592E8;
    return sub_100017A38();
  }
  v6 = *(_QWORD *)(v1 + 400);
  v5 = *(_QWORD *)(v1 + 408);
  v7 = *(_QWORD *)(v1 + 392);
  v107 = _swiftEmptyArrayStorage;
  HMService.serviceKind.getter(a1);
  v8 = (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 88))(v5, v7);
  if (v8 == enum case for ServiceKind.door(_:))
    goto LABEL_3;
  if (v8 == enum case for ServiceKind.garageDoorOpener(_:))
  {
    v29 = *(_QWORD *)(v1 + 376);
    v28 = *(_QWORD *)(v1 + 384);
    v30 = *(_QWORD *)(v1 + 368);
    v31 = *(void (**)(uint64_t, _QWORD, uint64_t))(v29 + 104);
    v31(v28, enum case for CharacteristicKind.currentDoorState(_:), v30);
    v32 = sub_100008FE4(v28, v4);
    v34 = v33;
    v35 = *(void (**)(uint64_t, uint64_t))(v29 + 8);
    v35(v28, v30);
    if ((v34 & 1) == 0)
    {
      swift_bridgeObjectRelease(_swiftEmptyArrayStorage);
      if (v32 > 4)
        v36 = 0;
      else
        v36 = qword_100088D70[v32];
      v72 = *(_QWORD *)(v1 + 384);
      v73 = *(_QWORD *)(v1 + 368);
      v74 = *(_QWORD *)(v1 + 344);
      *(_QWORD *)(v1 + 264) = &type metadata for Int;
      *(_QWORD *)(v1 + 240) = v36;
      v31(v72, enum case for CharacteristicKind.targetDoorState(_:), v73);
      v75 = sub_10005A804(v74, v72);
      v76 = swift_task_alloc(32);
      *(_QWORD *)(v76 + 16) = v1 + 240;
      v77 = sub_100057918((void (*)(uint64_t *__return_ptr, id *))sub_10005BD9C, v76, (uint64_t)v75);
      swift_bridgeObjectRelease(v75);
      swift_task_dealloc(v76);
      v35(v72, v73);
      sub_100023FC0((_QWORD *)(v1 + 240));
      v107 = v77;
    }
    goto LABEL_23;
  }
  if (v8 == enum case for ServiceKind.lightbulb(_:))
  {
    v38 = *(_QWORD *)(v1 + 376);
    v37 = *(_QWORD *)(v1 + 384);
    v39 = *(_QWORD *)(v1 + 368);
    v40 = *(_QWORD *)(v1 + 344);
    v105 = *(int *)(v1 + 432);
    v41 = sub_10001709C();
    *(_QWORD *)(v1 + 136) = &type metadata for Bool;
    *(_BYTE *)(v1 + 112) = (v41 & 1) == 0;
    v42 = *(void (**)(uint64_t, uint64_t, uint64_t))(v38 + 104);
    v42(v37, enum case for CharacteristicKind.powerState(_:), v39);
    v43 = sub_10005A804(v40, v37);
    v44 = swift_task_alloc(32);
    *(_QWORD *)(v44 + 16) = v1 + 112;
    v45 = sub_100057918((void (*)(uint64_t *__return_ptr, id *))sub_10005BD9C, v44, (uint64_t)v43);
    swift_bridgeObjectRelease(v43);
    v46 = v44;
    v47 = v42;
    swift_task_dealloc(v46);
    v48 = *(void (**)(uint64_t, uint64_t))(v38 + 8);
    v48(v37, v39);
    sub_100023FC0((_QWORD *)(v1 + 112));
    v107 = v45;
    v49 = enum case for CharacteristicKind.brightness(_:);
    v47(v37, enum case for CharacteristicKind.brightness(_:), v39);
    v50 = sub_100008FE4(v37, *(_QWORD *)(v40 + v105));
    v52 = v51;
    v48(v37, v39);
    if ((v52 & 1) == 0 && !v50 && (sub_10001709C() & 1) == 0)
    {
      v53 = *(_QWORD *)(v1 + 384);
      v54 = *(_QWORD *)(v1 + 368);
      v55 = *(_QWORD *)(v1 + 344);
      *(_QWORD *)(v1 + 72) = &type metadata for Int;
      *(_QWORD *)(v1 + 48) = 100;
      v47(v53, v49, v54);
      v56 = sub_10005A804(v55, v53);
      v57 = swift_task_alloc(32);
      *(_QWORD *)(v57 + 16) = v1 + 48;
      v58 = sub_100057918((void (*)(uint64_t *__return_ptr, id *))sub_10005BD9C, v57, (uint64_t)v56);
      swift_bridgeObjectRelease(v56);
      swift_task_dealloc(v57);
      v48(v53, v54);
      sub_100023FC0((_QWORD *)(v1 + 48));
      sub_100057DE4((uint64_t)v58);
    }
    goto LABEL_23;
  }
  if (v8 == enum case for ServiceKind.lockMechanism(_:))
  {
    v60 = *(_QWORD *)(v1 + 376);
    v59 = *(_QWORD *)(v1 + 384);
    v61 = *(_QWORD *)(v1 + 368);
    v62 = *(void (**)(uint64_t, _QWORD, uint64_t))(v60 + 104);
    v62(v59, enum case for CharacteristicKind.currentLockMechanismState(_:), v61);
    v63 = sub_100008FE4(v59, v4);
    v65 = v64;
    v66 = *(void (**)(uint64_t, uint64_t))(v60 + 8);
    v66(v59, v61);
    if ((v65 & 1) != 0)
      goto LABEL_23;
    v17 = (_QWORD *)(v1 + 208);
    v67 = *(_QWORD *)(v1 + 384);
    v68 = *(_QWORD *)(v1 + 368);
    v69 = *(_QWORD *)(v1 + 344);
    swift_bridgeObjectRelease(_swiftEmptyArrayStorage);
    *(_QWORD *)(v1 + 232) = &type metadata for Int;
    *(_QWORD *)(v1 + 208) = v63 == 0;
    v62(v67, enum case for CharacteristicKind.targetLockMechanismState(_:), v68);
    v70 = sub_10005A804(v69, v67);
    v71 = swift_task_alloc(32);
    *(_QWORD *)(v71 + 16) = v1 + 208;
    goto LABEL_29;
  }
  if (v8 == enum case for ServiceKind.securitySystem(_:))
  {
    v81 = *(_QWORD *)(v1 + 376);
    v80 = *(_QWORD *)(v1 + 384);
    v82 = *(_QWORD *)(v1 + 368);
    v83 = *(void (**)(uint64_t, _QWORD, uint64_t))(v81 + 104);
    v83(v80, enum case for CharacteristicKind.currentSecuritySystemState(_:), v82);
    v84 = sub_100008FE4(v80, v4);
    v86 = v85;
    v66 = *(void (**)(uint64_t, uint64_t))(v81 + 8);
    v66(v80, v82);
    if ((v86 & 1) != 0)
      goto LABEL_23;
    v17 = (_QWORD *)(v1 + 144);
    v67 = *(_QWORD *)(v1 + 384);
    v68 = *(_QWORD *)(v1 + 368);
    v87 = *(_QWORD *)(v1 + 344);
    swift_bridgeObjectRelease(_swiftEmptyArrayStorage);
    v88 = 3;
    if (v84 == 3)
      v88 = 0;
    *(_QWORD *)(v1 + 168) = &type metadata for Int;
    *(_QWORD *)(v1 + 144) = v88;
    v83(v67, enum case for CharacteristicKind.targetSecuritySystemState(_:), v68);
    v70 = sub_10005A804(v87, v67);
    v71 = swift_task_alloc(32);
    *(_QWORD *)(v71 + 16) = v17;
LABEL_29:
    v25 = sub_100057918((void (*)(uint64_t *__return_ptr, id *))sub_10005BD9C, v71, (uint64_t)v70);
    swift_bridgeObjectRelease(v70);
    swift_task_dealloc(v71);
    v66(v67, v68);
LABEL_7:
    sub_100023FC0(v17);
    v107 = v25;
    goto LABEL_23;
  }
  if (v8 != enum case for ServiceKind.window(_:) && v8 != enum case for ServiceKind.windowCovering(_:))
  {
    v103 = *(_QWORD *)(v1 + 400);
    v89 = *(_QWORD *)(v1 + 384);
    v104 = *(_QWORD *)(v1 + 392);
    v106 = *(_QWORD *)(v1 + 408);
    v91 = *(_QWORD *)(v1 + 368);
    v90 = *(_QWORD *)(v1 + 376);
    v92 = *(_QWORD *)(v1 + 344);
    v93 = sub_10001709C();
    *(_QWORD *)(v1 + 40) = &type metadata for Bool;
    *(_BYTE *)(v1 + 16) = (v93 & 1) == 0;
    v102 = *(void (**)(uint64_t, _QWORD, uint64_t))(v90 + 104);
    v102(v89, enum case for CharacteristicKind.powerState(_:), v91);
    v94 = sub_10005A804(v92, v89);
    v95 = swift_task_alloc(32);
    *(_QWORD *)(v95 + 16) = v1 + 16;
    v96 = sub_100057918((void (*)(uint64_t *__return_ptr, id *))sub_10005B2B0, v95, (uint64_t)v94);
    swift_bridgeObjectRelease(v94);
    swift_task_dealloc(v95);
    v97 = *(void (**)(uint64_t, uint64_t))(v90 + 8);
    v97(v89, v91);
    sub_100023FC0((_QWORD *)(v1 + 16));
    sub_100057DE4((uint64_t)v96);
    v98 = sub_10001709C();
    *(_QWORD *)(v1 + 104) = &type metadata for Bool;
    *(_BYTE *)(v1 + 80) = (v98 & 1) == 0;
    v102(v89, enum case for CharacteristicKind.active(_:), v91);
    v99 = sub_10005A804(v92, v89);
    v100 = swift_task_alloc(32);
    *(_QWORD *)(v100 + 16) = v1 + 80;
    v101 = sub_100057918((void (*)(uint64_t *__return_ptr, id *))sub_10005BD9C, v100, (uint64_t)v99);
    swift_bridgeObjectRelease(v99);
    swift_task_dealloc(v100);
    v97(v89, v91);
    sub_100023FC0((_QWORD *)(v1 + 80));
    sub_100057DE4((uint64_t)v101);
    (*(void (**)(uint64_t, uint64_t))(v103 + 8))(v106, v104);
    goto LABEL_23;
  }
LABEL_3:
  v10 = *(_QWORD *)(v1 + 376);
  v9 = *(_QWORD *)(v1 + 384);
  v11 = *(_QWORD *)(v1 + 368);
  v12 = *(void (**)(uint64_t, _QWORD, uint64_t))(v10 + 104);
  v12(v9, enum case for CharacteristicKind.currentPosition(_:), v11);
  v13 = sub_100008FE4(v9, v4);
  v15 = v14;
  v16 = *(void (**)(uint64_t, uint64_t))(v10 + 8);
  v16(v9, v11);
  if ((v15 & 1) == 0)
  {
    v17 = (_QWORD *)(v1 + 176);
    v18 = *(_QWORD *)(v1 + 384);
    v19 = *(_QWORD *)(v1 + 360);
    v20 = *(_QWORD *)(v1 + 368);
    v21 = *(_QWORD *)(v1 + 344);
    swift_bridgeObjectRelease(_swiftEmptyArrayStorage);
    sub_100008BB8(v21, v19);
    v22 = 100;
    if (v13 > 0)
      v22 = 0;
    *(_QWORD *)(v1 + 200) = &type metadata for Int;
    *(_QWORD *)(v1 + 176) = v22;
    v12(v18, enum case for CharacteristicKind.targetPosition(_:), v20);
    v23 = sub_10005A804(v19, v18);
    v24 = swift_task_alloc(32);
    *(_QWORD *)(v24 + 16) = v17;
    v25 = sub_100057918((void (*)(uint64_t *__return_ptr, id *))sub_10005BD9C, v24, (uint64_t)v23);
    swift_bridgeObjectRelease(v23);
    swift_task_dealloc(v24);
    v16(v18, v20);
    sub_100008BFC(v19);
    goto LABEL_7;
  }
LABEL_23:
  v78 = *(_QWORD *)(v1 + 384);
  v79 = *(_QWORD *)(v1 + 360);
  swift_task_dealloc(*(_QWORD *)(v1 + 408));
  swift_task_dealloc(v78);
  swift_task_dealloc(v79);
  return (*(uint64_t (**)(_QWORD *))(v1 + 8))(v107);
}

uint64_t sub_1000592E8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 416);
  *(_QWORD *)(*(_QWORD *)v1 + 424) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_100059344, 0, 0);
}

uint64_t sub_100059344()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(uint64_t, _QWORD, uint64_t);
  uint64_t v14;
  char v15;
  char v16;
  void (*v17)(uint64_t, uint64_t);
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void (*v30)(uint64_t, _QWORD, uint64_t);
  unint64_t v31;
  char v32;
  char v33;
  void (*v34)(uint64_t, uint64_t);
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char v40;
  void (*v41)(uint64_t, uint64_t, uint64_t);
  _QWORD *v42;
  uint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  void (*v46)(uint64_t, uint64_t, uint64_t);
  void (*v47)(uint64_t, uint64_t);
  uint64_t v48;
  uint64_t v49;
  char v50;
  char v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  _QWORD *v55;
  uint64_t v56;
  _QWORD *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  void (*v61)(uint64_t, _QWORD, uint64_t);
  uint64_t v62;
  char v63;
  char v64;
  void (*v65)(uint64_t, uint64_t);
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  _QWORD *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  _QWORD *v74;
  uint64_t v75;
  _QWORD *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  void (*v83)(uint64_t, _QWORD, uint64_t);
  uint64_t v84;
  char v85;
  char v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  char v93;
  _QWORD *v94;
  uint64_t v95;
  _QWORD *v96;
  void (*v97)(uint64_t, uint64_t);
  char v98;
  _QWORD *v99;
  uint64_t v100;
  _QWORD *v101;
  void (*v102)(uint64_t, _QWORD, uint64_t);
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  _QWORD *v107;

  v1 = *(_QWORD *)(v0 + 424);
  v2 = *(int *)(v0 + 432);
  v3 = *(_QWORD *)(v0 + 344);
  v4 = swift_bridgeObjectRelease(*(_QWORD *)(v3 + v2));
  *(_QWORD *)(v3 + v2) = v1;
  v5 = *(_QWORD *)(v0 + 424);
  v7 = *(_QWORD *)(v0 + 400);
  v6 = *(_QWORD *)(v0 + 408);
  v8 = *(_QWORD *)(v0 + 392);
  v107 = _swiftEmptyArrayStorage;
  HMService.serviceKind.getter(v4);
  v9 = (*(uint64_t (**)(uint64_t, uint64_t))(v7 + 88))(v6, v8);
  if (v9 == enum case for ServiceKind.door(_:))
    goto LABEL_2;
  if (v9 == enum case for ServiceKind.garageDoorOpener(_:))
  {
    v28 = *(_QWORD *)(v0 + 376);
    v27 = *(_QWORD *)(v0 + 384);
    v29 = *(_QWORD *)(v0 + 368);
    v30 = *(void (**)(uint64_t, _QWORD, uint64_t))(v28 + 104);
    v30(v27, enum case for CharacteristicKind.currentDoorState(_:), v29);
    v31 = sub_100008FE4(v27, v5);
    v33 = v32;
    v34 = *(void (**)(uint64_t, uint64_t))(v28 + 8);
    v34(v27, v29);
    if ((v33 & 1) == 0)
    {
      swift_bridgeObjectRelease(_swiftEmptyArrayStorage);
      if (v31 > 4)
        v35 = 0;
      else
        v35 = qword_100088D70[v31];
      v71 = *(_QWORD *)(v0 + 384);
      v72 = *(_QWORD *)(v0 + 368);
      v73 = *(_QWORD *)(v0 + 344);
      *(_QWORD *)(v0 + 264) = &type metadata for Int;
      *(_QWORD *)(v0 + 240) = v35;
      v30(v71, enum case for CharacteristicKind.targetDoorState(_:), v72);
      v74 = sub_10005A804(v73, v71);
      v75 = swift_task_alloc(32);
      *(_QWORD *)(v75 + 16) = v0 + 240;
      v76 = sub_100057918((void (*)(uint64_t *__return_ptr, id *))sub_10005BD9C, v75, (uint64_t)v74);
      swift_bridgeObjectRelease(v74);
      swift_task_dealloc(v75);
      v34(v71, v72);
      sub_100023FC0((_QWORD *)(v0 + 240));
      v107 = v76;
    }
    goto LABEL_21;
  }
  if (v9 == enum case for ServiceKind.lightbulb(_:))
  {
    v37 = *(_QWORD *)(v0 + 376);
    v36 = *(_QWORD *)(v0 + 384);
    v38 = *(_QWORD *)(v0 + 368);
    v39 = *(_QWORD *)(v0 + 344);
    v105 = *(int *)(v0 + 432);
    v40 = sub_10001709C();
    *(_QWORD *)(v0 + 136) = &type metadata for Bool;
    *(_BYTE *)(v0 + 112) = (v40 & 1) == 0;
    v41 = *(void (**)(uint64_t, uint64_t, uint64_t))(v37 + 104);
    v41(v36, enum case for CharacteristicKind.powerState(_:), v38);
    v42 = sub_10005A804(v39, v36);
    v43 = swift_task_alloc(32);
    *(_QWORD *)(v43 + 16) = v0 + 112;
    v44 = sub_100057918((void (*)(uint64_t *__return_ptr, id *))sub_10005BD9C, v43, (uint64_t)v42);
    swift_bridgeObjectRelease(v42);
    v45 = v43;
    v46 = v41;
    swift_task_dealloc(v45);
    v47 = *(void (**)(uint64_t, uint64_t))(v37 + 8);
    v47(v36, v38);
    sub_100023FC0((_QWORD *)(v0 + 112));
    v107 = v44;
    v48 = enum case for CharacteristicKind.brightness(_:);
    v46(v36, enum case for CharacteristicKind.brightness(_:), v38);
    v49 = sub_100008FE4(v36, *(_QWORD *)(v39 + v105));
    v51 = v50;
    v47(v36, v38);
    if ((v51 & 1) == 0 && !v49 && (sub_10001709C() & 1) == 0)
    {
      v52 = *(_QWORD *)(v0 + 384);
      v53 = *(_QWORD *)(v0 + 368);
      v54 = *(_QWORD *)(v0 + 344);
      *(_QWORD *)(v0 + 72) = &type metadata for Int;
      *(_QWORD *)(v0 + 48) = 100;
      v46(v52, v48, v53);
      v55 = sub_10005A804(v54, v52);
      v56 = swift_task_alloc(32);
      *(_QWORD *)(v56 + 16) = v0 + 48;
      v57 = sub_100057918((void (*)(uint64_t *__return_ptr, id *))sub_10005BD9C, v56, (uint64_t)v55);
      swift_bridgeObjectRelease(v55);
      swift_task_dealloc(v56);
      v47(v52, v53);
      sub_100023FC0((_QWORD *)(v0 + 48));
      sub_100057DE4((uint64_t)v57);
    }
    goto LABEL_21;
  }
  if (v9 == enum case for ServiceKind.lockMechanism(_:))
  {
    v59 = *(_QWORD *)(v0 + 376);
    v58 = *(_QWORD *)(v0 + 384);
    v60 = *(_QWORD *)(v0 + 368);
    v61 = *(void (**)(uint64_t, _QWORD, uint64_t))(v59 + 104);
    v61(v58, enum case for CharacteristicKind.currentLockMechanismState(_:), v60);
    v62 = sub_100008FE4(v58, v5);
    v64 = v63;
    v65 = *(void (**)(uint64_t, uint64_t))(v59 + 8);
    v65(v58, v60);
    if ((v64 & 1) != 0)
      goto LABEL_21;
    v18 = (_QWORD *)(v0 + 208);
    v66 = *(_QWORD *)(v0 + 384);
    v67 = *(_QWORD *)(v0 + 368);
    v68 = *(_QWORD *)(v0 + 344);
    swift_bridgeObjectRelease(_swiftEmptyArrayStorage);
    *(_QWORD *)(v0 + 232) = &type metadata for Int;
    *(_QWORD *)(v0 + 208) = v62 == 0;
    v61(v66, enum case for CharacteristicKind.targetLockMechanismState(_:), v67);
    v69 = sub_10005A804(v68, v66);
    v70 = swift_task_alloc(32);
    *(_QWORD *)(v70 + 16) = v0 + 208;
    goto LABEL_27;
  }
  if (v9 == enum case for ServiceKind.securitySystem(_:))
  {
    v81 = *(_QWORD *)(v0 + 376);
    v80 = *(_QWORD *)(v0 + 384);
    v82 = *(_QWORD *)(v0 + 368);
    v83 = *(void (**)(uint64_t, _QWORD, uint64_t))(v81 + 104);
    v83(v80, enum case for CharacteristicKind.currentSecuritySystemState(_:), v82);
    v84 = sub_100008FE4(v80, v5);
    v86 = v85;
    v65 = *(void (**)(uint64_t, uint64_t))(v81 + 8);
    v65(v80, v82);
    if ((v86 & 1) != 0)
      goto LABEL_21;
    v18 = (_QWORD *)(v0 + 144);
    v66 = *(_QWORD *)(v0 + 384);
    v67 = *(_QWORD *)(v0 + 368);
    v87 = *(_QWORD *)(v0 + 344);
    swift_bridgeObjectRelease(_swiftEmptyArrayStorage);
    v88 = 3;
    if (v84 == 3)
      v88 = 0;
    *(_QWORD *)(v0 + 168) = &type metadata for Int;
    *(_QWORD *)(v0 + 144) = v88;
    v83(v66, enum case for CharacteristicKind.targetSecuritySystemState(_:), v67);
    v69 = sub_10005A804(v87, v66);
    v70 = swift_task_alloc(32);
    *(_QWORD *)(v70 + 16) = v18;
LABEL_27:
    v26 = sub_100057918((void (*)(uint64_t *__return_ptr, id *))sub_10005BD9C, v70, (uint64_t)v69);
    swift_bridgeObjectRelease(v69);
    swift_task_dealloc(v70);
    v65(v66, v67);
LABEL_6:
    sub_100023FC0(v18);
    v107 = v26;
    goto LABEL_21;
  }
  if (v9 != enum case for ServiceKind.window(_:) && v9 != enum case for ServiceKind.windowCovering(_:))
  {
    v103 = *(_QWORD *)(v0 + 400);
    v89 = *(_QWORD *)(v0 + 384);
    v104 = *(_QWORD *)(v0 + 392);
    v106 = *(_QWORD *)(v0 + 408);
    v91 = *(_QWORD *)(v0 + 368);
    v90 = *(_QWORD *)(v0 + 376);
    v92 = *(_QWORD *)(v0 + 344);
    v93 = sub_10001709C();
    *(_QWORD *)(v0 + 40) = &type metadata for Bool;
    *(_BYTE *)(v0 + 16) = (v93 & 1) == 0;
    v102 = *(void (**)(uint64_t, _QWORD, uint64_t))(v90 + 104);
    v102(v89, enum case for CharacteristicKind.powerState(_:), v91);
    v94 = sub_10005A804(v92, v89);
    v95 = swift_task_alloc(32);
    *(_QWORD *)(v95 + 16) = v0 + 16;
    v96 = sub_100057918((void (*)(uint64_t *__return_ptr, id *))sub_10005B2B0, v95, (uint64_t)v94);
    swift_bridgeObjectRelease(v94);
    swift_task_dealloc(v95);
    v97 = *(void (**)(uint64_t, uint64_t))(v90 + 8);
    v97(v89, v91);
    sub_100023FC0((_QWORD *)(v0 + 16));
    sub_100057DE4((uint64_t)v96);
    v98 = sub_10001709C();
    *(_QWORD *)(v0 + 104) = &type metadata for Bool;
    *(_BYTE *)(v0 + 80) = (v98 & 1) == 0;
    v102(v89, enum case for CharacteristicKind.active(_:), v91);
    v99 = sub_10005A804(v92, v89);
    v100 = swift_task_alloc(32);
    *(_QWORD *)(v100 + 16) = v0 + 80;
    v101 = sub_100057918((void (*)(uint64_t *__return_ptr, id *))sub_10005BD9C, v100, (uint64_t)v99);
    swift_bridgeObjectRelease(v99);
    swift_task_dealloc(v100);
    v97(v89, v91);
    sub_100023FC0((_QWORD *)(v0 + 80));
    sub_100057DE4((uint64_t)v101);
    (*(void (**)(uint64_t, uint64_t))(v103 + 8))(v106, v104);
    goto LABEL_21;
  }
LABEL_2:
  v11 = *(_QWORD *)(v0 + 376);
  v10 = *(_QWORD *)(v0 + 384);
  v12 = *(_QWORD *)(v0 + 368);
  v13 = *(void (**)(uint64_t, _QWORD, uint64_t))(v11 + 104);
  v13(v10, enum case for CharacteristicKind.currentPosition(_:), v12);
  v14 = sub_100008FE4(v10, v5);
  v16 = v15;
  v17 = *(void (**)(uint64_t, uint64_t))(v11 + 8);
  v17(v10, v12);
  if ((v16 & 1) == 0)
  {
    v18 = (_QWORD *)(v0 + 176);
    v19 = *(_QWORD *)(v0 + 384);
    v20 = *(_QWORD *)(v0 + 360);
    v21 = *(_QWORD *)(v0 + 368);
    v22 = *(_QWORD *)(v0 + 344);
    swift_bridgeObjectRelease(_swiftEmptyArrayStorage);
    sub_100008BB8(v22, v20);
    v23 = 100;
    if (v14 > 0)
      v23 = 0;
    *(_QWORD *)(v0 + 200) = &type metadata for Int;
    *(_QWORD *)(v0 + 176) = v23;
    v13(v19, enum case for CharacteristicKind.targetPosition(_:), v21);
    v24 = sub_10005A804(v20, v19);
    v25 = swift_task_alloc(32);
    *(_QWORD *)(v25 + 16) = v18;
    v26 = sub_100057918((void (*)(uint64_t *__return_ptr, id *))sub_10005BD9C, v25, (uint64_t)v24);
    swift_bridgeObjectRelease(v24);
    swift_task_dealloc(v25);
    v17(v19, v21);
    sub_100008BFC(v20);
    goto LABEL_6;
  }
LABEL_21:
  v77 = *(_QWORD *)(v0 + 384);
  v78 = *(_QWORD *)(v0 + 360);
  swift_task_dealloc(*(_QWORD *)(v0 + 408));
  swift_task_dealloc(v77);
  swift_task_dealloc(v78);
  return (*(uint64_t (**)(_QWORD *))(v0 + 8))(v107);
}

uint64_t sub_100059C08(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 152) = a1;
  return swift_task_switch(sub_100059C20, 0, 0);
}

void sub_100059C20()
{
  _QWORD *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  _BOOL4 v8;
  unint64_t v9;
  uint8_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  id v15;
  void *v16;
  uint64_t v17;
  void *v18;
  id v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  NSObject *v32;
  os_log_type_t v33;
  _BOOL4 v34;
  unint64_t v35;
  uint8_t *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  _QWORD *v42;
  id v43;
  void *v44;
  uint64_t v45;
  void *v46;
  id v47;
  id v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  unint64_t v53;
  _QWORD *v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  unint64_t v58;
  uint64_t *v59;
  uint64_t v60;
  uint64_t v61;
  _QWORD *v62;
  uint64_t v63;
  NSObject *v64;
  uint64_t v65;
  os_log_type_t v66;
  uint64_t v67;
  uint8_t *v68;
  os_log_type_t log;
  NSObject *loga;
  uint64_t *v71;
  _QWORD *v72;
  uint8_t *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;

  if (qword_1000A4F08 != -1)
    swift_once(&qword_1000A4F08, sub_100053184);
  v1 = v0 + 18;
  v3 = v0 + 19;
  v2 = v0[19];
  v4 = type metadata accessor for Logger(0);
  v0[20] = sub_100014698(v4, (uint64_t)qword_1000A7A80);
  swift_bridgeObjectRetain_n(v2, 2);
  v6 = Logger.logObject.getter(v5);
  v7 = static os_log_type_t.default.getter(v6);
  v8 = os_log_type_enabled(v6, v7);
  v9 = v0[19];
  v72 = v0;
  if (v8)
  {
    log = v7;
    v10 = (uint8_t *)swift_slowAlloc(12, -1);
    v67 = swift_slowAlloc(32, -1);
    v75 = v67;
    *(_DWORD *)v10 = 136315138;
    v76 = (uint64_t)_swiftEmptyArrayStorage;
    v11 = *v3;
    if (v9 >> 62)
    {
      if (v11 < 0)
        v25 = *v3;
      else
        v25 = v9 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v11);
      v12 = _CocoaArrayWrapper.endIndex.getter(v25);
      v73 = v10;
      if (v12)
        goto LABEL_6;
    }
    else
    {
      v12 = *(_QWORD *)((v9 & 0xFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain(v11);
      v73 = v10;
      if (v12)
      {
LABEL_6:
        if (v12 < 1)
        {
          __break(1u);
          goto LABEL_52;
        }
        v64 = v6;
        v13 = 0;
        v14 = *v3 + 32;
        do
        {
          if ((v9 & 0xC000000000000001) != 0)
            v15 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v13, *v3);
          else
            v15 = *(id *)(v14 + 8 * v13);
          v16 = v15;
          v17 = objc_opt_self(HMCharacteristicWriteRequest);
          v18 = (void *)swift_dynamicCastObjCClass(v16, v17);
          if (v18)
          {
            v19 = objc_msgSend(v18, "characteristic");

            if (v19)
            {
              specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v20);
              v22 = *(_QWORD *)((v76 & 0xFFFFFFFFFFFFFF8) + 0x10);
              v21 = *(_QWORD *)((v76 & 0xFFFFFFFFFFFFFF8) + 0x18);
              if (v22 >= v21 >> 1)
                specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v21 > 1, v22 + 1, 1);
              v23 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v22, v19);
              specialized Array._endMutation()(v23);
            }
          }
          else
          {

          }
          ++v13;
        }
        while (v12 != v13);
        swift_bridgeObjectRelease(*v3);
        v24 = (_QWORD *)v76;
        v6 = v64;
        goto LABEL_25;
      }
    }
    swift_bridgeObjectRelease(*v3);
    v24 = _swiftEmptyArrayStorage;
LABEL_25:
    v26 = *v3;
    v27 = sub_100008CBC(0, &qword_1000A5040, HMCharacteristic_ptr);
    v28 = Array.description.getter(v24, v27);
    v30 = v29;
    swift_bridgeObjectRelease(v24);
    *v1 = sub_100023980(v28, v30, &v75);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1, v3, v73 + 4, v73 + 12);
    swift_bridgeObjectRelease(v30);
    swift_bridgeObjectRelease_n(v26, 2);
    _os_log_impl((void *)&_mh_execute_header, v6, log, "Writing characteristics: %s", v73, 0xCu);
    swift_arrayDestroy(v67, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v67, -1, -1);
    swift_slowDealloc(v73, -1, -1);

    v0 = v72;
    goto LABEL_26;
  }
  swift_bridgeObjectRelease_n(v9, 2);

LABEL_26:
  swift_bridgeObjectRetain_n(*v3, 2);
  v32 = Logger.logObject.getter(v31);
  v33 = static os_log_type_t.default.getter(v32);
  v34 = os_log_type_enabled(v32, v33);
  v35 = *v3;
  if (!v34)
  {
    swift_bridgeObjectRelease_n(*v3, 2);
LABEL_46:

    v59 = HomeWidget.shared.unsafeMutableAddressor();
    v60 = *v59;
    v0[21] = *v59;
    v61 = dword_1000A76AC;
    swift_retain(v60);
    v62 = (_QWORD *)swift_task_alloc(v61);
    v0[22] = v62;
    *v62 = v0;
    v62[1] = sub_10005A290;
    HomeWidget.manager.getter();
    return;
  }
  v36 = (uint8_t *)swift_slowAlloc(12, -1);
  v37 = swift_slowAlloc(32, -1);
  v76 = v37;
  *(_DWORD *)v36 = 136315138;
  v38 = *v3;
  if (v35 >> 62)
  {
    if (v38 < 0)
      v63 = *v3;
    else
      v63 = v35 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v38);
    v39 = _CocoaArrayWrapper.endIndex.getter(v63);
  }
  else
  {
    v39 = *(_QWORD *)((v35 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain(v38);
  }
  loga = v32;
  v71 = v1;
  v68 = v36;
  v66 = v33;
  v65 = v37;
  if (!v39)
  {
    v42 = _swiftEmptyArrayStorage;
LABEL_45:
    v0 = v72;
    v55 = *v3;
    swift_bridgeObjectRelease(*v3);
    v56 = Array.description.getter(v42, &type metadata for String);
    v58 = v57;
    swift_bridgeObjectRelease(v42);
    v72[17] = sub_100023980(v56, v58, &v76);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v72 + 17, v71, v68 + 4, v68 + 12);
    swift_bridgeObjectRelease(v58);
    swift_bridgeObjectRelease_n(v55, 2);
    v32 = loga;
    _os_log_impl((void *)&_mh_execute_header, loga, v66, "Executing actionSets: %s", v68, 0xCu);
    swift_arrayDestroy(v65, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v65, -1, -1);
    swift_slowDealloc(v68, -1, -1);
    goto LABEL_46;
  }
  if (v39 >= 1)
  {
    v40 = 0;
    v41 = v35 & 0xC000000000000001;
    v74 = *v3 + 32;
    v42 = _swiftEmptyArrayStorage;
    do
    {
      if (v41)
        v43 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v40, *v3);
      else
        v43 = *(id *)(v74 + 8 * v40);
      v44 = v43;
      v45 = objc_opt_self(HMExecuteRequest);
      v46 = (void *)swift_dynamicCastObjCClass(v44, v45);
      if (v46)
      {
        v47 = objc_msgSend(v46, "actionSet");
        v48 = objc_msgSend(v47, "name");

        v49 = static String._unconditionallyBridgeFromObjectiveC(_:)(v48);
        v51 = v50;

        if ((swift_isUniquelyReferenced_nonNull_native(v42) & 1) == 0)
          v42 = sub_10005AE68(0, v42[2] + 1, 1, v42);
        v53 = v42[2];
        v52 = v42[3];
        if (v53 >= v52 >> 1)
          v42 = sub_10005AE68((_QWORD *)(v52 > 1), v53 + 1, 1, v42);
        v42[2] = v53 + 1;
        v54 = &v42[2 * v53];
        v54[4] = v49;
        v54[5] = v51;
      }
      else
      {

      }
      ++v40;
    }
    while (v39 != v40);
    goto LABEL_45;
  }
LABEL_52:
  __break(1u);
}

uint64_t sub_10005A290(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v3 = *(_QWORD *)(*(_QWORD *)v1 + 168);
  v2 = *(_QWORD *)(*(_QWORD *)v1 + 176);
  *(_QWORD *)(*(_QWORD *)v1 + 184) = a1;
  swift_task_dealloc(v2);
  swift_release(v3);
  return swift_task_switch(sub_10005A2F4, 0, 0);
}

uint64_t sub_10005A2F4()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  id v3;
  Class isa;
  NSString v5;
  uint64_t v6;
  _QWORD *v7;
  NSObject *v9;
  os_log_type_t v10;
  uint8_t *v11;
  uint64_t v12;
  uint64_t v13;

  v1 = *(void **)(v0 + 184);
  if (v1)
  {
    v2 = v0 + 16;
    v3 = objc_msgSend(v1, "widgetManager");
    *(_QWORD *)(v0 + 192) = v3;
    sub_100008CBC(0, &qword_1000A6648, HMRequestBase_ptr);
    isa = Array._bridgeToObjectiveC()().super.isa;
    *(_QWORD *)(v0 + 200) = isa;
    v5 = String._bridgeToObjectiveC()();
    *(_QWORD *)(v0 + 208) = v5;
    *(_QWORD *)(v0 + 16) = v0;
    *(_QWORD *)(v0 + 24) = sub_10005A534;
    v6 = swift_continuation_init(v0 + 16, 1);
    *(_QWORD *)(v0 + 80) = _NSConcreteStackBlock;
    v7 = (_QWORD *)(v0 + 80);
    v7[1] = 0x40000000;
    v7[2] = sub_10005770C;
    v7[3] = &unk_10009FCC0;
    v7[4] = v6;
    objc_msgSend(v3, "performRequests:forKind:completion:", isa, v5, v7);
    return swift_continuation_await(v2);
  }
  else
  {
    v9 = Logger.logObject.getter(0);
    v10 = static os_log_type_t.error.getter(v9);
    if (os_log_type_enabled(v9, v10))
    {
      v11 = (uint8_t *)swift_slowAlloc(12, -1);
      v12 = swift_slowAlloc(32, -1);
      v13 = v12;
      *(_DWORD *)v11 = 136315138;
      *(_QWORD *)(v0 + 120) = sub_100023980(0x3A5F286574697277, 0xE900000000000029, &v13);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 120, v0 + 128, v11 + 4, v11 + 12);
      _os_log_impl((void *)&_mh_execute_header, v9, v10, "%s unable to get shared HMHomeManager instance", v11, 0xCu);
      swift_arrayDestroy(v12, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v12, -1, -1);
      swift_slowDealloc(v11, -1, -1);
    }

    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_10005A534()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 48);
  *(_QWORD *)(*(_QWORD *)v0 + 216) = v1;
  if (v1)
    v2 = sub_10005A660;
  else
    v2 = sub_10005A594;
  return swift_task_switch(v2, 0, 0);
}

uint64_t sub_10005A594()
{
  uint64_t v0;
  void *v1;
  void *v2;
  NSObject *v3;
  os_log_type_t v4;
  _BOOL4 v5;
  NSObject *v6;
  uint8_t *v7;

  v2 = *(void **)(v0 + 200);
  v1 = *(void **)(v0 + 208);

  v3 = Logger.logObject.getter();
  v4 = static os_log_type_t.default.getter();
  v5 = os_log_type_enabled(v3, v4);
  v6 = *(NSObject **)(v0 + 184);
  if (v5)
  {
    v7 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v7 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Write request complete.", v7, 2u);
    swift_slowDealloc(v7, -1, -1);

  }
  else
  {

    v3 = v6;
  }

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10005A660(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  void *v3;
  void *v4;
  void *v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  uint64_t v9;
  uint8_t *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;

  v3 = *(void **)(v1 + 208);
  v2 = *(_QWORD *)(v1 + 216);
  v5 = *(void **)(v1 + 192);
  v4 = *(void **)(v1 + 200);
  swift_willThrow(a1);

  swift_errorRetain(v2);
  v6 = swift_errorRetain(v2);
  v7 = Logger.logObject.getter(v6);
  v8 = static os_log_type_t.error.getter(v7);
  if (os_log_type_enabled(v7, v8))
  {
    v9 = *(_QWORD *)(v1 + 216);
    v10 = (uint8_t *)swift_slowAlloc(12, -1);
    v11 = (uint64_t *)swift_slowAlloc(8, -1);
    *(_DWORD *)v10 = 138412290;
    swift_errorRetain(v9);
    v12 = _swift_stdlib_bridgeErrorToNSError(v9);
    *(_QWORD *)(v1 + 128) = v12;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 128, v1 + 136, v10 + 4, v10 + 12);
    *v11 = v12;
    swift_errorRelease(v9);
    swift_errorRelease(v9);
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "Error on write: %@", v10, 0xCu);
    v13 = sub_10000527C(&qword_1000A5208);
    swift_arrayDestroy(v11, 1, v13);
    swift_slowDealloc(v11, -1, -1);
    swift_slowDealloc(v10, -1, -1);
  }
  else
  {
    v14 = *(_QWORD *)(v1 + 216);
    swift_errorRelease(v14);
    swift_errorRelease(v14);
  }
  v15 = *(void **)(v1 + 184);

  swift_willThrow(v16);
  return (*(uint64_t (**)(void))(v1 + 8))();
}

_QWORD *sub_10005A804(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  int v4;
  void *v5;
  void *v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD v18[4];
  void *v19;

  v3 = a1 + *(int *)(type metadata accessor for WidgetTileInfo(0) + 56);
  v4 = *(unsigned __int8 *)(v3 + 8);
  if ((v4 - 2) >= 2)
  {
    v6 = *(void **)v3;
    if (v4)
    {
      v12 = v6;
      v13 = objc_msgSend(v12, "services");
      v14 = sub_100008CBC(0, &qword_1000A5078, HMService_ptr);
      v15 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v13, v14);

      __chkstk_darwin(v16);
      v18[2] = a2;
      v5 = sub_100057780((void (*)(uint64_t *__return_ptr, id *))sub_10005B734, (uint64_t)v18, v15);
      swift_bridgeObjectRelease(v15);

      return v5;
    }
    v7 = v6;
    v8 = HMService.characteristic(for:)(a2);
    if (v8)
    {
      v9 = v8;
      v10 = sub_10000527C(&qword_1000A5200);
      v11 = swift_allocObject(v10, 40, 7);
      *(_OWORD *)(v11 + 16) = xmmword_100086CF0;
      *(_QWORD *)(v11 + 32) = v9;
      v19 = (void *)v11;
      specialized Array._endMutation()(v11);
      v5 = v19;

      return v5;
    }

  }
  return _swiftEmptyArrayStorage;
}

void sub_10005A970(void **a1@<X0>, _QWORD *a2@<X1>, _QWORD *a3@<X8>)
{
  void *v4;
  uint64_t v5;
  _QWORD *v6;
  id v7;
  uint64_t v8;
  id v9;

  v4 = *a1;
  v5 = a2[3];
  v6 = sub_100032248(a2, v5);
  v7 = v4;
  v8 = _bridgeAnythingToObjectiveC<A>(_:)(v6, v5);
  v9 = objc_msgSend((id)objc_opt_self(HMCharacteristicWriteRequest), "writeRequestWithCharacteristic:value:", v7, v8);
  swift_unknownObjectRelease(v8);

  *a3 = v9;
}

uint64_t sub_10005AA10(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_10005AA38(a1, a2, a3, a4, &qword_1000A57B0, type metadata accessor for WidgetTileInfo);
}

uint64_t sub_10005AA24(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_10005AA38(a1, a2, a3, a4, &qword_1000A5798, (uint64_t (*)(_QWORD))&type metadata accessor for UUID);
}

uint64_t sub_10005AA38(char a1, int64_t a2, char a3, unint64_t a4, uint64_t *a5, uint64_t (*a6)(_QWORD))
{
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  size_t v19;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v9 = *(_QWORD *)(a4 + 24);
    v10 = v9 >> 1;
    if ((uint64_t)(v9 >> 1) < a2)
    {
      if (v10 + 0x4000000000000000 < 0)
      {
        __break(1u);
LABEL_29:
        result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Division by zero", 16, 2, "Swift/IntegerTypes.swift", 24, 2, 14377, 0);
LABEL_31:
        __break(1u);
        return result;
      }
      v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v10 = a2;
    }
  }
  else
  {
    v10 = a2;
  }
  v11 = *(_QWORD *)(a4 + 16);
  if (v10 <= v11)
    v12 = *(_QWORD *)(a4 + 16);
  else
    v12 = v10;
  if (!v12)
  {
    v18 = _swiftEmptyArrayStorage;
    goto LABEL_19;
  }
  v13 = sub_10000527C(a5);
  v14 = *(_QWORD *)(a6(0) - 8);
  v15 = *(_QWORD *)(v14 + 72);
  v16 = *(unsigned __int8 *)(v14 + 80);
  v17 = (v16 + 32) & ~v16;
  v18 = (_QWORD *)swift_allocObject(v13, v17 + v15 * v12, v16 | 7);
  v19 = j__malloc_size(v18);
  if (!v15)
    goto LABEL_29;
  if (v19 - v17 == 0x8000000000000000 && v15 == -1)
  {
    result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Division results in an overflow", 31, 2, "Swift/IntegerTypes.swift", 24, 2, 14384, 0);
    goto LABEL_31;
  }
  v18[2] = v11;
  v18[3] = 2 * ((uint64_t)(v19 - v17) / v15);
LABEL_19:
  v21 = a6(0);
  v22 = *(_QWORD *)(v21 - 8);
  v23 = (*(unsigned __int8 *)(v22 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v22 + 80);
  v24 = (unint64_t)v18 + v23;
  if ((a1 & 1) != 0)
  {
    v25 = a4 + v23;
    if ((unint64_t)v18 < a4 || v24 >= v25 + *(_QWORD *)(v22 + 72) * v11)
    {
      swift_arrayInitWithTakeFrontToBack((char *)v18 + v23, v25, v11, v21);
    }
    else if (v18 != (_QWORD *)a4)
    {
      swift_arrayInitWithTakeBackToFront((char *)v18 + v23);
    }
    *(_QWORD *)(a4 + 16) = 0;
  }
  else
  {
    sub_10005B774(0, v11, v24, a4, a6);
  }
  swift_bridgeObjectRelease(a4);
  return (uint64_t)v18;
}

uint64_t sub_10005AC44(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_10005AA38(a1, a2, a3, a4, &qword_1000A5538, type metadata accessor for AccessoryAndSceneEntity);
}

uint64_t sub_10005AC58(char a1, int64_t a2, char a3, unint64_t a4)
{
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  size_t v16;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *(_QWORD *)(a4 + 24);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
LABEL_29:
        result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Division by zero", 16, 2, "Swift/IntegerTypes.swift", 24, 2, 14377, 0);
LABEL_31:
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *(_QWORD *)(a4 + 16);
  if (v7 <= v8)
    v9 = *(_QWORD *)(a4 + 16);
  else
    v9 = v7;
  if (!v9)
  {
    v15 = _swiftEmptyArrayStorage;
    goto LABEL_19;
  }
  v10 = sub_10000527C(&qword_1000A6688);
  v11 = *(_QWORD *)(sub_10000527C(&qword_1000A54D0) - 8);
  v12 = *(_QWORD *)(v11 + 72);
  v13 = *(unsigned __int8 *)(v11 + 80);
  v14 = (v13 + 32) & ~v13;
  v15 = (_QWORD *)swift_allocObject(v10, v14 + v12 * v9, v13 | 7);
  v16 = j__malloc_size(v15);
  if (!v12)
    goto LABEL_29;
  if (v16 - v14 == 0x8000000000000000 && v12 == -1)
  {
    result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Division results in an overflow", 31, 2, "Swift/IntegerTypes.swift", 24, 2, 14384, 0);
    goto LABEL_31;
  }
  v15[2] = v8;
  v15[3] = 2 * ((uint64_t)(v16 - v14) / v12);
LABEL_19:
  v18 = sub_10000527C(&qword_1000A54D0);
  v19 = *(_QWORD *)(v18 - 8);
  v20 = (*(unsigned __int8 *)(v19 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v19 + 80);
  v21 = (unint64_t)v15 + v20;
  if ((a1 & 1) != 0)
  {
    v22 = a4 + v20;
    if ((unint64_t)v15 < a4 || v21 >= v22 + *(_QWORD *)(v19 + 72) * v8)
    {
      swift_arrayInitWithTakeFrontToBack((char *)v15 + v20, v22, v8, v18);
    }
    else if (v15 != (_QWORD *)a4)
    {
      swift_arrayInitWithTakeBackToFront((char *)v15 + v20);
    }
    *(_QWORD *)(a4 + 16) = 0;
  }
  else
  {
    sub_10005B88C(0, v8, v21, a4);
  }
  swift_bridgeObjectRelease(a4);
  return (uint64_t)v15;
}

_QWORD *sub_10005AE68(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  int64_t v12;
  uint64_t v13;
  _QWORD *v14;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      v10 = sub_10000527C(&qword_1000A5790);
      v11 = (_QWORD *)swift_allocObject(v10, 16 * v9 + 32, 7);
      v12 = j__malloc_size(v11);
      v13 = v12 - 32;
      if (v12 < 32)
        v13 = v12 - 17;
      v11[2] = v8;
      v11[3] = 2 * (v13 >> 4);
      v14 = v11 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v11 = _swiftEmptyArrayStorage;
      v14 = &_swiftEmptyArrayStorage[4];
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v11 != a4 || v14 >= &a4[2 * v8 + 4])
          memmove(v14, a4 + 4, 16 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_10005B9A8(0, v8, (unint64_t)v14, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease(a4);
    return v11;
  }
  __break(1u);
  return result;
}

_QWORD *sub_10005AF74(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  int64_t v12;
  uint64_t v13;
  _QWORD *v14;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      v10 = sub_10000527C(&qword_1000A6690);
      v11 = (_QWORD *)swift_allocObject(v10, 16 * v9 + 32, 7);
      v12 = j__malloc_size(v11);
      v13 = v12 - 32;
      if (v12 < 32)
        v13 = v12 - 17;
      v11[2] = v8;
      v11[3] = 2 * (v13 >> 4);
      v14 = v11 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v11 = _swiftEmptyArrayStorage;
      v14 = &_swiftEmptyArrayStorage[4];
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v11 != a4 || v14 >= &a4[2 * v8 + 4])
          memmove(v14, a4 + 4, 16 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_10005BB8C(0, v8, (unint64_t)v14, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease(a4);
    return v11;
  }
  __break(1u);
  return result;
}

_QWORD *sub_10005B080(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  size_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      v10 = sub_10000527C(&qword_1000A65B8);
      v11 = (_QWORD *)swift_allocObject(v10, 48 * v9 + 32, 7);
      v12 = j__malloc_size(v11);
      v11[2] = v8;
      v11[3] = 2 * ((uint64_t)(v12 - 32) / 48);
      v13 = v11 + 4;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v11 != a4 || v13 >= &a4[6 * v8 + 4])
          memmove(v13, a4 + 4, 48 * v8);
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v11 = _swiftEmptyArrayStorage;
      v13 = &_swiftEmptyArrayStorage[4];
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    sub_10005BA98(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease(a4);
    return v11;
  }
  __break(1u);
  return result;
}

_QWORD *sub_10005B1A4(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  int64_t v12;
  uint64_t v13;
  _QWORD *v14;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      v10 = sub_10000527C(&qword_1000A66A0);
      v11 = (_QWORD *)swift_allocObject(v10, 8 * v9 + 32, 7);
      v12 = j__malloc_size(v11);
      v13 = v12 - 32;
      if (v12 < 32)
        v13 = v12 - 25;
      v11[2] = v8;
      v11[3] = 2 * (v13 >> 3);
      v14 = v11 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v11 = _swiftEmptyArrayStorage;
      v14 = &_swiftEmptyArrayStorage[4];
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v11 != a4 || v14 >= &a4[v8 + 4])
          memmove(v14, a4 + 4, 8 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_10005BC94(0, v8, (unint64_t)v14, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease(a4);
    return v11;
  }
  __break(1u);
  return result;
}

void sub_10005B2B0(void **a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  sub_10005A970(a1, *(_QWORD **)(v2 + 16), a2);
}

uint64_t sub_10005B2CC(unint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t i;
  void (*v13)(_QWORD *);
  id *v14;
  id v15;
  uint64_t v16;
  uint64_t result;
  void (*v18[4])(id *);

  v6 = (unint64_t)a3 >> 62;
  if ((unint64_t)a3 >> 62)
  {
    if (a3 < 0)
      v16 = a3;
    else
      v16 = a3 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a3);
    v7 = _CocoaArrayWrapper.endIndex.getter(v16);
    swift_bridgeObjectRelease(a3);
    if (!v7)
      return a3;
  }
  else
  {
    v7 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (!v7)
      return a3;
  }
  if (!a1)
    goto LABEL_25;
  v8 = a3 & 0xFFFFFFFFFFFFFF8;
  if (v6)
  {
    if (a3 < 0)
      v10 = a3;
    else
      v10 = a3 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a3);
    v11 = _CocoaArrayWrapper.endIndex.getter(v10);
    swift_bridgeObjectRelease(a3);
    if (v11 <= a2)
    {
      if (v7 >= 1)
      {
        sub_10005B6F4(&qword_1000A6668, &qword_1000A6660);
        swift_bridgeObjectRetain(a3);
        for (i = 0; i != v7; ++i)
        {
          sub_10000527C(&qword_1000A6660);
          v13 = sub_10001A8A8(v18, i, a3);
          v15 = *v14;
          ((void (*)(void (**)(id *), _QWORD))v13)(v18, 0);
          *(_QWORD *)(a1 + 8 * i) = v15;
        }
        swift_bridgeObjectRelease(a3);
        return a3;
      }
      goto LABEL_24;
    }
LABEL_23:
    __break(1u);
LABEL_24:
    __break(1u);
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  v9 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (v9 > a2)
  {
    __break(1u);
    goto LABEL_23;
  }
  if (v8 + 32 >= a1 + 8 * v9 || v8 + 32 + 8 * v9 <= a1)
  {
    sub_100008CBC(0, &qword_1000A5040, HMCharacteristic_ptr);
    swift_arrayInitWithCopy(a1);
    return a3;
  }
LABEL_26:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_10005B4E0(unint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t i;
  void (*v13)(_QWORD *);
  id *v14;
  id v15;
  uint64_t v16;
  uint64_t result;
  void (*v18[4])(id *);

  v6 = (unint64_t)a3 >> 62;
  if ((unint64_t)a3 >> 62)
  {
    if (a3 < 0)
      v16 = a3;
    else
      v16 = a3 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a3);
    v7 = _CocoaArrayWrapper.endIndex.getter(v16);
    swift_bridgeObjectRelease(a3);
    if (!v7)
      return a3;
  }
  else
  {
    v7 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (!v7)
      return a3;
  }
  if (!a1)
    goto LABEL_25;
  v8 = a3 & 0xFFFFFFFFFFFFFF8;
  if (v6)
  {
    if (a3 < 0)
      v10 = a3;
    else
      v10 = a3 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a3);
    v11 = _CocoaArrayWrapper.endIndex.getter(v10);
    swift_bridgeObjectRelease(a3);
    if (v11 <= a2)
    {
      if (v7 >= 1)
      {
        sub_10005B6F4(&qword_1000A6680, &qword_1000A6670);
        swift_bridgeObjectRetain(a3);
        for (i = 0; i != v7; ++i)
        {
          sub_10000527C(&qword_1000A6670);
          v13 = sub_10001A900(v18, i, a3);
          v15 = *v14;
          ((void (*)(void (**)(id *), _QWORD))v13)(v18, 0);
          *(_QWORD *)(a1 + 8 * i) = v15;
        }
        swift_bridgeObjectRelease(a3);
        return a3;
      }
      goto LABEL_24;
    }
LABEL_23:
    __break(1u);
LABEL_24:
    __break(1u);
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  v9 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (v9 > a2)
  {
    __break(1u);
    goto LABEL_23;
  }
  if (v8 + 32 >= a1 + 8 * v9 || v8 + 32 + 8 * v9 <= a1)
  {
    sub_100008CBC(0, &qword_1000A6678, HMCharacteristicWriteRequest_ptr);
    swift_arrayInitWithCopy(a1);
    return a3;
  }
LABEL_26:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_10005B6F4(unint64_t *a1, uint64_t *a2)
{
  uint64_t result;
  uint64_t v4;

  result = *a1;
  if (!result)
  {
    v4 = sub_1000052BC(a2);
    result = swift_getWitnessTable(&protocol conformance descriptor for [A], v4);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10005B734@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t result;

  result = HMService.characteristic(for:)(*(_QWORD *)(v1 + 16));
  *a1 = result;
  return result;
}

uint64_t sub_10005B774(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t (*a5)(_QWORD))
{
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t result;

  v5 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v5 < 0)
  {
LABEL_9:
    result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
    goto LABEL_11;
  }
  v9 = *(_QWORD *)(a5(0) - 8);
  v10 = *(unsigned __int8 *)(v9 + 80);
  v11 = *(_QWORD *)(v9 + 72);
  v12 = a4 + ((v10 + 32) & ~v10) + v11 * a1;
  v13 = v11 * v5;
  v14 = a3 + v13;
  v15 = v12 + v13;
  if (v12 >= v14 || v15 <= a3)
  {
    swift_arrayInitWithCopy(a3);
    return v14;
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_10005B88C(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v4 < 0)
  {
LABEL_9:
    result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
    goto LABEL_11;
  }
  v8 = *(_QWORD *)(sub_10000527C(&qword_1000A54D0) - 8);
  v9 = *(unsigned __int8 *)(v8 + 80);
  v10 = *(_QWORD *)(v8 + 72);
  v11 = a4 + ((v9 + 32) & ~v9) + v10 * a1;
  v12 = v10 * v4;
  v13 = a3 + v12;
  v14 = v11 + v12;
  if (v11 >= v13 || v14 <= a3)
  {
    swift_arrayInitWithCopy(a3);
    return v13;
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_10005B9A8(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else
  {
    if (v4 < 0)
    {
      result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
      goto LABEL_9;
    }
    v5 = a4 + 16 * a1 + 32;
    v6 = a3 + 16 * v4;
    if (v5 >= v6 || v5 + 16 * v4 <= a3)
    {
      swift_arrayInitWithCopy(a3);
      return v6;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_9:
  __break(1u);
  return result;
}

uint64_t sub_10005BA98(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v4 < 0)
  {
LABEL_9:
    result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
    goto LABEL_11;
  }
  v5 = a4 + 48 * a1 + 32;
  v6 = a3 + 48 * v4;
  if (v5 >= v6 || v5 + 48 * v4 <= a3)
  {
    swift_arrayInitWithCopy(a3);
    return v6;
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_10005BB8C(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v6;
  unint64_t v7;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else
  {
    if (v4 < 0)
    {
      result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
      goto LABEL_9;
    }
    v6 = a4 + 16 * a1 + 32;
    v7 = a3 + 16 * v4;
    if (v6 >= v7 || v6 + 16 * v4 <= a3)
    {
      sub_10000527C(&qword_1000A6698);
      swift_arrayInitWithCopy(a3);
      return v7;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_9:
  __break(1u);
  return result;
}

uint64_t sub_10005BC94(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v6;
  unint64_t v7;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else
  {
    if (v4 < 0)
    {
      result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
      goto LABEL_9;
    }
    v6 = a4 + 8 * a1 + 32;
    v7 = a3 + 8 * v4;
    if (v6 >= v7 || v6 + 8 * v4 <= a3)
    {
      sub_10000527C(&qword_1000A64F0);
      swift_arrayInitWithCopy(a3);
      return v7;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_9:
  __break(1u);
  return result;
}

void sub_10005BD9C(void **a1@<X0>, _QWORD *a2@<X8>)
{
  sub_10005B2B0(a1, a2);
}

uint64_t sub_10005BDB0(void *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  id v6;
  Class isa;
  Class v8;
  id v9;
  void *v10;
  uint64_t v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  Swift::String v16;
  _QWORD v18[2];

  v2 = type metadata accessor for Locale(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)v18 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = objc_msgSend(objc_allocWithZone((Class)NSNumberFormatter), "init");
  objc_msgSend(v6, "setNumberStyle:", 3);
  objc_msgSend(v6, "setUsesSignificantDigits:", 0);
  sub_10002A86C();
  isa = NSNumber.init(integerLiteral:)(1).super.super.isa;
  objc_msgSend(v6, "setMultiplier:", isa);

  static Locale.current.getter();
  v8 = Locale._bridgeToObjectiveC()().super.isa;
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  objc_msgSend(v6, "setLocale:", v8);

  v9 = objc_msgSend(v6, "stringFromNumber:", a1);
  if (v9)
  {
    v10 = v9;
    v11 = static String._unconditionallyBridgeFromObjectiveC(_:)(v9);

  }
  else
  {
    v12 = objc_msgSend(a1, "description");
    v13 = static String._unconditionallyBridgeFromObjectiveC(_:)(v12);
    v15 = v14;

    v18[0] = v13;
    v18[1] = v15;
    v16._countAndFlagsBits = 37;
    v16._object = (void *)0xE100000000000000;
    String.append(_:)(v16);

    return v18[0];
  }
  return v11;
}

_QWORD *sub_10005BF54(_QWORD *a1, _QWORD *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  char v27;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v12 = *a2;
    *a1 = *a2;
    a1 = (_QWORD *)(v12 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v12);
  }
  else
  {
    v7 = sub_10000527C(&qword_1000A5C00);
    if (swift_getEnumCaseMultiPayload(a2, v7) == 1)
    {
      v8 = type metadata accessor for WidgetFamily(0);
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(a1, a2, v8);
      v9 = a1;
      v10 = v7;
      v11 = 1;
    }
    else
    {
      v13 = *a2;
      *a1 = *a2;
      swift_retain(v13);
      v9 = a1;
      v10 = v7;
      v11 = 0;
    }
    swift_storeEnumTagMultiPayload(v9, v10, v11);
    v14 = a3[5];
    v15 = (_QWORD *)((char *)a1 + v14);
    v16 = (_QWORD *)((char *)a2 + v14);
    v17 = sub_10000527C(&qword_1000A4FC0);
    if (swift_getEnumCaseMultiPayload(v16, v17) == 1)
    {
      v18 = type metadata accessor for WidgetRenderingMode(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v18 - 8) + 16))(v15, v16, v18);
      v19 = v15;
      v20 = v17;
      v21 = 1;
    }
    else
    {
      v22 = *v16;
      *v15 = *v16;
      swift_retain(v22);
      v19 = v15;
      v20 = v17;
      v21 = 0;
    }
    swift_storeEnumTagMultiPayload(v19, v20, v21);
    v23 = a3[6];
    v24 = (char *)a1 + v23;
    v25 = (char *)a2 + v23;
    v26 = *(_QWORD *)v25;
    v27 = v25[8];
    sub_100035568(*(_QWORD *)v25, v27);
    *(_QWORD *)v24 = v26;
    v24[8] = v27;
    *((_BYTE *)a1 + a3[7]) = *((_BYTE *)a2 + a3[7]);
  }
  return a1;
}

uint64_t sub_10005C0D8(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;

  v4 = sub_10000527C(&qword_1000A5C00);
  if (swift_getEnumCaseMultiPayload(a1, v4) == 1)
  {
    v5 = type metadata accessor for WidgetFamily(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(a1, v5);
  }
  else
  {
    swift_release(*a1);
  }
  v6 = (_QWORD *)((char *)a1 + *(int *)(a2 + 20));
  v7 = sub_10000527C(&qword_1000A4FC0);
  if (swift_getEnumCaseMultiPayload(v6, v7) == 1)
  {
    v8 = type metadata accessor for WidgetRenderingMode(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v6, v8);
  }
  else
  {
    swift_release(*v6);
  }
  return sub_10003561C(*(_QWORD *)((char *)a1 + *(int *)(a2 + 24)), *((_BYTE *)a1 + *(int *)(a2 + 24) + 8));
}

_QWORD *sub_10005C1A8(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  char v25;

  v6 = sub_10000527C(&qword_1000A5C00);
  if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
  {
    v7 = type metadata accessor for WidgetFamily(0);
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = a1;
    v9 = v6;
    v10 = 1;
  }
  else
  {
    v11 = *a2;
    *a1 = *a2;
    swift_retain(v11);
    v8 = a1;
    v9 = v6;
    v10 = 0;
  }
  swift_storeEnumTagMultiPayload(v8, v9, v10);
  v12 = a3[5];
  v13 = (_QWORD *)((char *)a1 + v12);
  v14 = (_QWORD *)((char *)a2 + v12);
  v15 = sub_10000527C(&qword_1000A4FC0);
  if (swift_getEnumCaseMultiPayload(v14, v15) == 1)
  {
    v16 = type metadata accessor for WidgetRenderingMode(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v16 - 8) + 16))(v13, v14, v16);
    v17 = v13;
    v18 = v15;
    v19 = 1;
  }
  else
  {
    v20 = *v14;
    *v13 = *v14;
    swift_retain(v20);
    v17 = v13;
    v18 = v15;
    v19 = 0;
  }
  swift_storeEnumTagMultiPayload(v17, v18, v19);
  v21 = a3[6];
  v22 = (char *)a1 + v21;
  v23 = (char *)a2 + v21;
  v24 = *(_QWORD *)v23;
  v25 = v23[8];
  sub_100035568(*(_QWORD *)v23, v25);
  *(_QWORD *)v22 = v24;
  v22[8] = v25;
  *((_BYTE *)a1 + a3[7]) = *((_BYTE *)a2 + a3[7]);
  return a1;
}

_QWORD *sub_10005C300(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  char v27;

  if (a1 != a2)
  {
    sub_100014EFC((uint64_t)a1, &qword_1000A5C00);
    v6 = sub_10000527C(&qword_1000A5C00);
    if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
    {
      v7 = type metadata accessor for WidgetFamily(0);
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
      v8 = a1;
      v9 = v6;
      v10 = 1;
    }
    else
    {
      v11 = *a2;
      *a1 = *a2;
      swift_retain(v11);
      v8 = a1;
      v9 = v6;
      v10 = 0;
    }
    swift_storeEnumTagMultiPayload(v8, v9, v10);
    v12 = a3[5];
    v13 = (_QWORD *)((char *)a1 + v12);
    v14 = (_QWORD *)((char *)a2 + v12);
    sub_100014EFC((uint64_t)a1 + v12, &qword_1000A4FC0);
    v15 = sub_10000527C(&qword_1000A4FC0);
    if (swift_getEnumCaseMultiPayload(v14, v15) == 1)
    {
      v16 = type metadata accessor for WidgetRenderingMode(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v16 - 8) + 16))(v13, v14, v16);
      v17 = v13;
      v18 = v15;
      v19 = 1;
    }
    else
    {
      v20 = *v14;
      *v13 = *v14;
      swift_retain(v20);
      v17 = v13;
      v18 = v15;
      v19 = 0;
    }
    swift_storeEnumTagMultiPayload(v17, v18, v19);
  }
  v21 = a3[6];
  v22 = (char *)a1 + v21;
  v23 = (char *)a2 + v21;
  v24 = *(_QWORD *)v23;
  v25 = v23[8];
  sub_100035568(*(_QWORD *)v23, v25);
  v26 = *(_QWORD *)v22;
  v27 = v22[8];
  *(_QWORD *)v22 = v24;
  v22[8] = v25;
  sub_10003561C(v26, v27);
  *((_BYTE *)a1 + a3[7]) = *((_BYTE *)a2 + a3[7]);
  return a1;
}

char *sub_10005C48C(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;

  v6 = sub_10000527C(&qword_1000A5C00);
  if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
  {
    v7 = type metadata accessor for WidgetFamily(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a1, a2, v7);
    swift_storeEnumTagMultiPayload(a1, v6, 1);
  }
  else
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
  }
  v8 = a3[5];
  v9 = &a1[v8];
  v10 = &a2[v8];
  v11 = sub_10000527C(&qword_1000A4FC0);
  if (swift_getEnumCaseMultiPayload(v10, v11) == 1)
  {
    v12 = type metadata accessor for WidgetRenderingMode(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 32))(v9, v10, v12);
    swift_storeEnumTagMultiPayload(v9, v11, 1);
  }
  else
  {
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
  }
  v13 = a3[6];
  v14 = a3[7];
  v15 = &a1[v13];
  v16 = &a2[v13];
  *(_QWORD *)v15 = *(_QWORD *)v16;
  v15[8] = v16[8];
  a1[v14] = a2[v14];
  return a1;
}

char *sub_10005C5CC(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char v18;

  if (a1 != a2)
  {
    sub_100014EFC((uint64_t)a1, &qword_1000A5C00);
    v6 = sub_10000527C(&qword_1000A5C00);
    if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
    {
      v7 = type metadata accessor for WidgetFamily(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a1, a2, v7);
      swift_storeEnumTagMultiPayload(a1, v6, 1);
    }
    else
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
    }
    v8 = a3[5];
    v9 = &a1[v8];
    v10 = &a2[v8];
    sub_100014EFC((uint64_t)&a1[v8], &qword_1000A4FC0);
    v11 = sub_10000527C(&qword_1000A4FC0);
    if (swift_getEnumCaseMultiPayload(v10, v11) == 1)
    {
      v12 = type metadata accessor for WidgetRenderingMode(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 32))(v9, v10, v12);
      swift_storeEnumTagMultiPayload(v9, v11, 1);
    }
    else
    {
      memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
    }
  }
  v13 = a3[6];
  v14 = &a1[v13];
  v15 = &a2[v13];
  v16 = *(_QWORD *)v15;
  LOBYTE(v15) = v15[8];
  v17 = *(_QWORD *)v14;
  v18 = v14[8];
  *(_QWORD *)v14 = v16;
  v14[8] = (char)v15;
  sub_10003561C(v17, v18);
  a1[a3[7]] = a2[a3[7]];
  return a1;
}

uint64_t sub_10005C744(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10005C750);
}

uint64_t sub_10005C750(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v14;

  v6 = sub_10000527C(&qword_1000A5C08);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
    return v9(v10, a2, v8);
  }
  v11 = sub_10000527C(&qword_1000A5E88);
  v12 = *(_QWORD *)(v11 - 8);
  if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
  {
    v8 = v11;
    v10 = a1 + *(int *)(a3 + 20);
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
    return v9(v10, a2, v8);
  }
  v14 = *(unsigned __int8 *)(a1 + *(int *)(a3 + 24) + 8);
  if (v14 > 1)
    return (v14 ^ 0xFF) + 1;
  else
    return 0;
}

uint64_t sub_10005C800(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10005C80C);
}

uint64_t sub_10005C80C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t result;
  uint64_t v14;

  v8 = sub_10000527C(&qword_1000A5C08);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
    return v11(v12, a2, a2, v10);
  }
  result = sub_10000527C(&qword_1000A5E88);
  v14 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v14 + 84) == a3)
  {
    v10 = result;
    v12 = a1 + *(int *)(a4 + 20);
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
    return v11(v12, a2, a2, v10);
  }
  *(_BYTE *)(a1 + *(int *)(a4 + 24) + 8) = -(char)a2;
  return result;
}

uint64_t type metadata accessor for InFlightProgressView(uint64_t a1)
{
  uint64_t result;

  result = qword_1000A6700;
  if (!qword_1000A6700)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for InFlightProgressView);
  return result;
}

void sub_10005C8F8(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v6[4];

  sub_100048D10(319, (unint64_t *)&unk_1000A5C78, (uint64_t (*)(uint64_t))&type metadata accessor for WidgetFamily);
  if (v3 <= 0x3F)
  {
    v6[0] = *(_QWORD *)(v2 - 8) + 64;
    sub_100048D10(319, (unint64_t *)&qword_1000A5F00, (uint64_t (*)(uint64_t))&type metadata accessor for WidgetRenderingMode);
    if (v5 <= 0x3F)
    {
      v6[1] = *(_QWORD *)(v4 - 8) + 64;
      v6[2] = "\t";
      v6[3] = &unk_100088DD0;
      swift_initStructMetadata(a1, 256, 4, v6, a1 + 16);
    }
  }
}

uint64_t sub_10005C9B0(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_10008CB9C, 1);
}

void *sub_10005C9C0()
{
  return &protocol witness table for EmptyView;
}

unint64_t sub_10005C9CC(unint64_t a1, uint64_t a2, int *a3)
{
  int v5;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void (*v36)(uint64_t, uint64_t, uint64_t);
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int *v41;
  uint64_t v42;
  _QWORD *v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  _QWORD *v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  _QWORD *v52;
  uint64_t v53;
  uint64_t v54;
  _QWORD *v55;
  _QWORD *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  void (*v61)(uint64_t, uint64_t, uint64_t, __n128);
  uint64_t v62;
  __n128 v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  void *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  _QWORD *v76;
  _QWORD *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  id v84;
  uint64_t v86;
  int *v87;
  uint64_t v88;
  unint64_t v89;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v15 = *(_QWORD *)a2;
    *(_QWORD *)a1 = *(_QWORD *)a2;
    v16 = v15 + ((v5 + 16) & ~(unint64_t)v5);
    swift_retain(v15);
  }
  else
  {
    v7 = *(_QWORD *)a2;
    v8 = *(_BYTE *)(a2 + 8);
    sub_100035568(*(_QWORD *)a2, v8);
    *(_QWORD *)a1 = v7;
    *(_BYTE *)(a1 + 8) = v8;
    v9 = a3[5];
    v10 = (uint64_t *)(a1 + v9);
    v11 = (uint64_t *)(a2 + v9);
    v12 = sub_10000527C(&qword_1000A4FC0);
    if (swift_getEnumCaseMultiPayload(v11, v12) == 1)
    {
      v13 = type metadata accessor for WidgetRenderingMode(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v13 - 8) + 16))(v10, v11, v13);
      v14 = 1;
    }
    else
    {
      v17 = *v11;
      *v10 = *v11;
      swift_retain(v17);
      v14 = 0;
    }
    swift_storeEnumTagMultiPayload(v10, v12, v14);
    v18 = a3[6];
    v19 = (uint64_t *)(a1 + v18);
    v20 = (uint64_t *)(a2 + v18);
    v21 = sub_10000527C(&qword_1000A4FC8);
    if (swift_getEnumCaseMultiPayload(v20, v21) == 1)
    {
      v22 = type metadata accessor for ColorScheme(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v22 - 8) + 16))(v19, v20, v22);
      v23 = 1;
    }
    else
    {
      v24 = *v20;
      *v19 = *v20;
      swift_retain(v24);
      v23 = 0;
    }
    swift_storeEnumTagMultiPayload(v19, v21, v23);
    v25 = a3[7];
    v26 = (uint64_t *)(a1 + v25);
    v27 = (uint64_t *)(a2 + v25);
    v28 = sub_10000527C(&qword_1000A4FD0);
    if (swift_getEnumCaseMultiPayload(v27, v28) == 1)
    {
      v29 = type metadata accessor for ContentSizeCategory(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v29 - 8) + 16))(v26, v27, v29);
      v30 = 1;
    }
    else
    {
      v31 = *v27;
      *v26 = *v27;
      swift_retain(v31);
      v30 = 0;
    }
    swift_storeEnumTagMultiPayload(v26, v28, v30);
    v32 = a3[8];
    v33 = a1 + v32;
    v34 = a2 + v32;
    v35 = type metadata accessor for UUID(0);
    v88 = a2;
    v36 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v35 - 8) + 16);
    v36(v33, v34, v35);
    v37 = type metadata accessor for AccessoryAndSceneEntity(0);
    v36(v33 + *(int *)(v37 + 20), v34 + *(int *)(v37 + 20), v35);
    v38 = *(int *)(v37 + 24);
    v39 = v33 + v38;
    v40 = v34 + v38;
    v36(v39, v40, v35);
    v41 = (int *)type metadata accessor for WidgetTileInfo(0);
    v36(v39 + v41[5], v40 + v41[5], v35);
    v42 = v41[6];
    v43 = (_QWORD *)(v39 + v42);
    v44 = (_QWORD *)(v40 + v42);
    v45 = v44[1];
    *v43 = *v44;
    v43[1] = v45;
    v46 = v41[7];
    v47 = (_QWORD *)(v39 + v46);
    v48 = (_QWORD *)(v40 + v46);
    v49 = v48[1];
    v89 = a1;
    *v47 = *v48;
    v47[1] = v49;
    v50 = v41[8];
    v51 = (_QWORD *)(v39 + v50);
    v52 = (_QWORD *)(v40 + v50);
    v53 = v52[1];
    *v51 = *v52;
    v51[1] = v53;
    v54 = v41[9];
    v55 = (_QWORD *)(v39 + v54);
    v56 = (_QWORD *)(v40 + v54);
    v57 = v56[1];
    *v55 = *v56;
    v55[1] = v57;
    v58 = v41[10];
    v87 = a3;
    v59 = v39 + v58;
    v86 = v40 + v58;
    v60 = type metadata accessor for StaticRenderingMode(0);
    v61 = *(void (**)(uint64_t, uint64_t, uint64_t, __n128))(*(_QWORD *)(v60 - 8) + 16);
    swift_bridgeObjectRetain(v45);
    v62 = v49;
    v16 = v89;
    swift_bridgeObjectRetain(v62);
    swift_bridgeObjectRetain(v53);
    v63 = swift_bridgeObjectRetain(v57);
    v61(v59, v86, v60, v63);
    ((void (*)(uint64_t, uint64_t, uint64_t))v61)(v39 + v41[11], v40 + v41[11], v60);
    v64 = v41[12];
    v65 = *(_QWORD *)(v40 + v64);
    *(_QWORD *)(v39 + v64) = v65;
    *(_BYTE *)(v39 + v41[13]) = *(_BYTE *)(v40 + v41[13]);
    v66 = v41[14];
    v67 = v39 + v66;
    v68 = v40 + v66;
    v69 = *(void **)v68;
    LOBYTE(v68) = *(_BYTE *)(v68 + 8);
    *(_QWORD *)v67 = v69;
    *(_BYTE *)(v67 + 8) = v68;
    v70 = v41[15];
    v71 = *(_QWORD *)(v40 + v70);
    *(_QWORD *)(v39 + v70) = v71;
    *(_BYTE *)(v39 + v41[16]) = *(_BYTE *)(v40 + v41[16]);
    *(_BYTE *)(v39 + v41[17]) = *(_BYTE *)(v40 + v41[17]);
    v72 = v41[18];
    v73 = v39 + v72;
    v74 = v40 + v72;
    *(_QWORD *)v73 = *(_QWORD *)v74;
    *(_BYTE *)(v73 + 8) = *(_BYTE *)(v74 + 8);
    v75 = v41[19];
    v76 = (_QWORD *)(v39 + v75);
    v77 = (_QWORD *)(v40 + v75);
    v78 = v77[1];
    *v76 = *v77;
    v76[1] = v78;
    *(_BYTE *)(v39 + v41[20]) = *(_BYTE *)(v40 + v41[20]);
    v79 = v41[21];
    v80 = *(_QWORD *)(v40 + v79);
    *(_QWORD *)(v39 + v79) = v80;
    v81 = v41[22];
    v82 = *(_QWORD *)(v40 + v81);
    *(_QWORD *)(v39 + v81) = v82;
    v83 = v87[10];
    *(_OWORD *)(v89 + v87[9]) = *(_OWORD *)(v88 + v87[9]);
    *(_BYTE *)(v89 + v83) = *(_BYTE *)(v88 + v83);
    swift_retain(v65);
    v84 = v69;
    swift_bridgeObjectRetain(v71);
    swift_bridgeObjectRetain(v78);
    swift_bridgeObjectRetain(v80);
    swift_bridgeObjectRetain(v82);
  }
  return v16;
}

uint64_t sub_10005CE00(uint64_t a1, int *a2)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(uint64_t, uint64_t);
  uint64_t v16;
  uint64_t v17;
  int *v18;
  uint64_t v19;
  uint64_t v20;
  void (*v21)(uint64_t, uint64_t);

  sub_10003561C(*(_QWORD *)a1, *(_BYTE *)(a1 + 8));
  v4 = (_QWORD *)(a1 + a2[5]);
  v5 = sub_10000527C(&qword_1000A4FC0);
  if (swift_getEnumCaseMultiPayload(v4, v5) == 1)
  {
    v6 = type metadata accessor for WidgetRenderingMode(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v4, v6);
  }
  else
  {
    swift_release(*v4);
  }
  v7 = (_QWORD *)(a1 + a2[6]);
  v8 = sub_10000527C(&qword_1000A4FC8);
  if (swift_getEnumCaseMultiPayload(v7, v8) == 1)
  {
    v9 = type metadata accessor for ColorScheme(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v9 - 8) + 8))(v7, v9);
  }
  else
  {
    swift_release(*v7);
  }
  v10 = (_QWORD *)(a1 + a2[7]);
  v11 = sub_10000527C(&qword_1000A4FD0);
  if (swift_getEnumCaseMultiPayload(v10, v11) == 1)
  {
    v12 = type metadata accessor for ContentSizeCategory(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v12 - 8) + 8))(v10, v12);
  }
  else
  {
    swift_release(*v10);
  }
  v13 = a1 + a2[8];
  v14 = type metadata accessor for UUID(0);
  v15 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 8);
  v15(v13, v14);
  v16 = type metadata accessor for AccessoryAndSceneEntity(0);
  v15(v13 + *(int *)(v16 + 20), v14);
  v17 = v13 + *(int *)(v16 + 24);
  v15(v17, v14);
  v18 = (int *)type metadata accessor for WidgetTileInfo(0);
  v15(v17 + v18[5], v14);
  swift_bridgeObjectRelease(*(_QWORD *)(v17 + v18[6] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v17 + v18[7] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v17 + v18[8] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v17 + v18[9] + 8));
  v19 = v17 + v18[10];
  v20 = type metadata accessor for StaticRenderingMode(0);
  v21 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 8);
  v21(v19, v20);
  v21(v17 + v18[11], v20);
  swift_release(*(_QWORD *)(v17 + v18[12]));

  swift_bridgeObjectRelease(*(_QWORD *)(v17 + v18[15]));
  swift_bridgeObjectRelease(*(_QWORD *)(v17 + v18[19] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v17 + v18[21]));
  return swift_bridgeObjectRelease(*(_QWORD *)(v17 + v18[22]));
}

uint64_t sub_10005D060(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void (*v33)(uint64_t, uint64_t, uint64_t);
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int *v38;
  uint64_t v39;
  _QWORD *v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  _QWORD *v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  _QWORD *v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  _QWORD *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  void (*v58)(uint64_t, uint64_t, uint64_t, __n128);
  __n128 v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  void *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  _QWORD *v72;
  _QWORD *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  id v80;
  uint64_t v82;
  uint64_t v83;
  int *v84;
  uint64_t v85;

  v6 = *(_QWORD *)a2;
  v7 = *(_BYTE *)(a2 + 8);
  sub_100035568(*(_QWORD *)a2, v7);
  *(_QWORD *)a1 = v6;
  *(_BYTE *)(a1 + 8) = v7;
  v8 = a3[5];
  v9 = (uint64_t *)(a1 + v8);
  v10 = (uint64_t *)(a2 + v8);
  v11 = sub_10000527C(&qword_1000A4FC0);
  if (swift_getEnumCaseMultiPayload(v10, v11) == 1)
  {
    v12 = type metadata accessor for WidgetRenderingMode(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v12 - 8) + 16))(v9, v10, v12);
    v13 = 1;
  }
  else
  {
    v14 = *v10;
    *v9 = *v10;
    swift_retain(v14);
    v13 = 0;
  }
  swift_storeEnumTagMultiPayload(v9, v11, v13);
  v15 = a3[6];
  v16 = (uint64_t *)(a1 + v15);
  v17 = (uint64_t *)(a2 + v15);
  v18 = sub_10000527C(&qword_1000A4FC8);
  if (swift_getEnumCaseMultiPayload(v17, v18) == 1)
  {
    v19 = type metadata accessor for ColorScheme(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v19 - 8) + 16))(v16, v17, v19);
    v20 = 1;
  }
  else
  {
    v21 = *v17;
    *v16 = *v17;
    swift_retain(v21);
    v20 = 0;
  }
  swift_storeEnumTagMultiPayload(v16, v18, v20);
  v22 = a3[7];
  v23 = (uint64_t *)(a1 + v22);
  v24 = (uint64_t *)(a2 + v22);
  v25 = sub_10000527C(&qword_1000A4FD0);
  if (swift_getEnumCaseMultiPayload(v24, v25) == 1)
  {
    v26 = type metadata accessor for ContentSizeCategory(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v26 - 8) + 16))(v23, v24, v26);
    v27 = 1;
  }
  else
  {
    v28 = *v24;
    *v23 = *v24;
    swift_retain(v28);
    v27 = 0;
  }
  swift_storeEnumTagMultiPayload(v23, v25, v27);
  v29 = a3[8];
  v30 = a1 + v29;
  v31 = a2 + v29;
  v32 = type metadata accessor for UUID(0);
  v85 = a1;
  v33 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v32 - 8) + 16);
  v33(v30, v31, v32);
  v34 = type metadata accessor for AccessoryAndSceneEntity(0);
  v33(v30 + *(int *)(v34 + 20), v31 + *(int *)(v34 + 20), v32);
  v35 = *(int *)(v34 + 24);
  v36 = v30 + v35;
  v37 = v31 + v35;
  v33(v36, v37, v32);
  v38 = (int *)type metadata accessor for WidgetTileInfo(0);
  v33(v36 + v38[5], v37 + v38[5], v32);
  v39 = v38[6];
  v40 = (_QWORD *)(v36 + v39);
  v41 = (_QWORD *)(v37 + v39);
  v42 = v41[1];
  *v40 = *v41;
  v40[1] = v42;
  v43 = v38[7];
  v44 = (_QWORD *)(v36 + v43);
  v45 = (_QWORD *)(v37 + v43);
  v46 = v45[1];
  *v44 = *v45;
  v44[1] = v46;
  v47 = v38[8];
  v48 = (_QWORD *)(v36 + v47);
  v49 = (_QWORD *)(v37 + v47);
  v50 = v49[1];
  *v48 = *v49;
  v48[1] = v50;
  v51 = v38[9];
  v52 = (_QWORD *)(v36 + v51);
  v53 = (_QWORD *)(v37 + v51);
  v54 = v53[1];
  *v52 = *v53;
  v52[1] = v54;
  v55 = v38[10];
  v84 = a3;
  v56 = v36 + v55;
  v82 = v37 + v55;
  v57 = type metadata accessor for StaticRenderingMode(0);
  v83 = a2;
  v58 = *(void (**)(uint64_t, uint64_t, uint64_t, __n128))(*(_QWORD *)(v57 - 8) + 16);
  swift_bridgeObjectRetain(v42);
  swift_bridgeObjectRetain(v46);
  swift_bridgeObjectRetain(v50);
  v59 = swift_bridgeObjectRetain(v54);
  v58(v56, v82, v57, v59);
  ((void (*)(uint64_t, uint64_t, uint64_t))v58)(v36 + v38[11], v37 + v38[11], v57);
  v60 = v38[12];
  v61 = *(_QWORD *)(v37 + v60);
  *(_QWORD *)(v36 + v60) = v61;
  *(_BYTE *)(v36 + v38[13]) = *(_BYTE *)(v37 + v38[13]);
  v62 = v38[14];
  v63 = v36 + v62;
  v64 = v37 + v62;
  v65 = *(void **)v64;
  LOBYTE(v64) = *(_BYTE *)(v64 + 8);
  *(_QWORD *)v63 = v65;
  *(_BYTE *)(v63 + 8) = v64;
  v66 = v38[15];
  v67 = *(_QWORD *)(v37 + v66);
  *(_QWORD *)(v36 + v66) = v67;
  *(_BYTE *)(v36 + v38[16]) = *(_BYTE *)(v37 + v38[16]);
  *(_BYTE *)(v36 + v38[17]) = *(_BYTE *)(v37 + v38[17]);
  v68 = v38[18];
  v69 = v36 + v68;
  v70 = v37 + v68;
  *(_QWORD *)v69 = *(_QWORD *)v70;
  *(_BYTE *)(v69 + 8) = *(_BYTE *)(v70 + 8);
  v71 = v38[19];
  v72 = (_QWORD *)(v36 + v71);
  v73 = (_QWORD *)(v37 + v71);
  v74 = v73[1];
  *v72 = *v73;
  v72[1] = v74;
  *(_BYTE *)(v36 + v38[20]) = *(_BYTE *)(v37 + v38[20]);
  v75 = v38[21];
  v76 = *(_QWORD *)(v37 + v75);
  *(_QWORD *)(v36 + v75) = v76;
  v77 = v38[22];
  v78 = *(_QWORD *)(v37 + v77);
  *(_QWORD *)(v36 + v77) = v78;
  v79 = v84[10];
  *(_OWORD *)(v85 + v84[9]) = *(_OWORD *)(v83 + v84[9]);
  *(_BYTE *)(v85 + v79) = *(_BYTE *)(v83 + v79);
  swift_retain(v61);
  v80 = v65;
  swift_bridgeObjectRetain(v67);
  swift_bridgeObjectRetain(v74);
  swift_bridgeObjectRetain(v76);
  swift_bridgeObjectRetain(v78);
  return v85;
}

uint64_t sub_10005D468(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  char v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void (*v35)(uint64_t, uint64_t, uint64_t);
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int *v40;
  uint64_t v41;
  _QWORD *v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  _QWORD *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  _QWORD *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  _QWORD *v57;
  _QWORD *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  void (*v65)(uint64_t, uint64_t, uint64_t);
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  void *v72;
  void *v73;
  id v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t *v80;
  uint64_t v81;
  uint64_t v82;
  _QWORD *v83;
  _QWORD *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  _QWORD *v94;
  _QWORD *v95;

  v6 = *(_QWORD *)a2;
  v7 = *(_BYTE *)(a2 + 8);
  sub_100035568(*(_QWORD *)a2, v7);
  v8 = *(_QWORD *)a1;
  v9 = *(_BYTE *)(a1 + 8);
  *(_QWORD *)a1 = v6;
  *(_BYTE *)(a1 + 8) = v7;
  sub_10003561C(v8, v9);
  if (a1 != a2)
  {
    v10 = a3[5];
    v11 = (uint64_t *)(a1 + v10);
    v12 = (uint64_t *)(a2 + v10);
    sub_100014EFC(a1 + v10, &qword_1000A4FC0);
    v13 = sub_10000527C(&qword_1000A4FC0);
    if (swift_getEnumCaseMultiPayload(v12, v13) == 1)
    {
      v14 = type metadata accessor for WidgetRenderingMode(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v14 - 8) + 16))(v11, v12, v14);
      v15 = 1;
    }
    else
    {
      v16 = *v12;
      *v11 = *v12;
      swift_retain(v16);
      v15 = 0;
    }
    swift_storeEnumTagMultiPayload(v11, v13, v15);
    v17 = a3[6];
    v18 = (uint64_t *)(a1 + v17);
    v19 = (uint64_t *)(a2 + v17);
    sub_100014EFC(a1 + v17, &qword_1000A4FC8);
    v20 = sub_10000527C(&qword_1000A4FC8);
    if (swift_getEnumCaseMultiPayload(v19, v20) == 1)
    {
      v21 = type metadata accessor for ColorScheme(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v21 - 8) + 16))(v18, v19, v21);
      v22 = 1;
    }
    else
    {
      v23 = *v19;
      *v18 = *v19;
      swift_retain(v23);
      v22 = 0;
    }
    swift_storeEnumTagMultiPayload(v18, v20, v22);
    v24 = a3[7];
    v25 = (uint64_t *)(a1 + v24);
    v26 = (uint64_t *)(a2 + v24);
    sub_100014EFC(a1 + v24, &qword_1000A4FD0);
    v27 = sub_10000527C(&qword_1000A4FD0);
    if (swift_getEnumCaseMultiPayload(v26, v27) == 1)
    {
      v28 = type metadata accessor for ContentSizeCategory(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v28 - 8) + 16))(v25, v26, v28);
      v29 = 1;
    }
    else
    {
      v30 = *v26;
      *v25 = *v26;
      swift_retain(v30);
      v29 = 0;
    }
    swift_storeEnumTagMultiPayload(v25, v27, v29);
  }
  v31 = a3[8];
  v32 = a1 + v31;
  v33 = a2 + v31;
  v34 = type metadata accessor for UUID(0);
  v35 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v34 - 8) + 24);
  v35(v32, v33, v34);
  v36 = type metadata accessor for AccessoryAndSceneEntity(0);
  v35(v32 + *(int *)(v36 + 20), v33 + *(int *)(v36 + 20), v34);
  v37 = *(int *)(v36 + 24);
  v38 = v32 + v37;
  v39 = v33 + v37;
  v35(v38, v39, v34);
  v40 = (int *)type metadata accessor for WidgetTileInfo(0);
  v35(v38 + v40[5], v39 + v40[5], v34);
  v41 = v40[6];
  v42 = (_QWORD *)(v38 + v41);
  v43 = (_QWORD *)(v39 + v41);
  *v42 = *v43;
  v44 = v43[1];
  v45 = v42[1];
  v42[1] = v44;
  swift_bridgeObjectRetain(v44);
  swift_bridgeObjectRelease(v45);
  v46 = v40[7];
  v47 = (_QWORD *)(v38 + v46);
  v48 = (_QWORD *)(v39 + v46);
  *v47 = *v48;
  v49 = v48[1];
  v50 = v47[1];
  v47[1] = v49;
  swift_bridgeObjectRetain(v49);
  swift_bridgeObjectRelease(v50);
  v51 = v40[8];
  v52 = (_QWORD *)(v38 + v51);
  v53 = (_QWORD *)(v39 + v51);
  *v52 = *v53;
  v54 = v53[1];
  v55 = v52[1];
  v52[1] = v54;
  swift_bridgeObjectRetain(v54);
  swift_bridgeObjectRelease(v55);
  v56 = v40[9];
  v57 = (_QWORD *)(v38 + v56);
  v58 = (_QWORD *)(v39 + v56);
  *v57 = *v58;
  v59 = v58[1];
  v60 = v57[1];
  v57[1] = v59;
  swift_bridgeObjectRetain(v59);
  swift_bridgeObjectRelease(v60);
  v61 = v40[10];
  v62 = v38 + v61;
  v63 = v39 + v61;
  v64 = type metadata accessor for StaticRenderingMode(0);
  v65 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v64 - 8) + 24);
  v65(v62, v63, v64);
  v65(v38 + v40[11], v39 + v40[11], v64);
  v66 = v40[12];
  v67 = *(_QWORD *)(v39 + v66);
  v68 = *(_QWORD *)(v38 + v66);
  *(_QWORD *)(v38 + v66) = v67;
  swift_retain(v67);
  swift_release(v68);
  *(_BYTE *)(v38 + v40[13]) = *(_BYTE *)(v39 + v40[13]);
  v69 = v40[14];
  v70 = v38 + v69;
  v71 = v39 + v69;
  v72 = *(void **)v71;
  LOBYTE(v71) = *(_BYTE *)(v71 + 8);
  v73 = *(void **)v70;
  *(_QWORD *)v70 = v72;
  *(_BYTE *)(v70 + 8) = v71;
  v74 = v72;

  v75 = v40[15];
  v76 = *(_QWORD *)(v39 + v75);
  v77 = *(_QWORD *)(v38 + v75);
  *(_QWORD *)(v38 + v75) = v76;
  swift_bridgeObjectRetain(v76);
  swift_bridgeObjectRelease(v77);
  *(_BYTE *)(v38 + v40[16]) = *(_BYTE *)(v39 + v40[16]);
  *(_BYTE *)(v38 + v40[17]) = *(_BYTE *)(v39 + v40[17]);
  v78 = v40[18];
  v79 = v38 + v78;
  v80 = (uint64_t *)(v39 + v78);
  v81 = *v80;
  *(_BYTE *)(v79 + 8) = *((_BYTE *)v80 + 8);
  *(_QWORD *)v79 = v81;
  v82 = v40[19];
  v83 = (_QWORD *)(v38 + v82);
  v84 = (_QWORD *)(v39 + v82);
  *v83 = *v84;
  v85 = v84[1];
  v86 = v83[1];
  v83[1] = v85;
  swift_bridgeObjectRetain(v85);
  swift_bridgeObjectRelease(v86);
  *(_BYTE *)(v38 + v40[20]) = *(_BYTE *)(v39 + v40[20]);
  v87 = v40[21];
  v88 = *(_QWORD *)(v39 + v87);
  v89 = *(_QWORD *)(v38 + v87);
  *(_QWORD *)(v38 + v87) = v88;
  swift_bridgeObjectRetain(v88);
  swift_bridgeObjectRelease(v89);
  v90 = v40[22];
  v91 = *(_QWORD *)(v39 + v90);
  v92 = *(_QWORD *)(v38 + v90);
  *(_QWORD *)(v38 + v90) = v91;
  swift_bridgeObjectRetain(v91);
  swift_bridgeObjectRelease(v92);
  v93 = a3[9];
  v94 = (_QWORD *)(a1 + v93);
  v95 = (_QWORD *)(a2 + v93);
  *v94 = *v95;
  v94[1] = v95[1];
  *(_BYTE *)(a1 + a3[10]) = *(_BYTE *)(a2 + a3[10]);
  return a1;
}

uint64_t sub_10005D924(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void *v7;
  const void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  const void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  const void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(uint64_t, uint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void (*v35)(uint64_t, uint64_t, uint64_t);
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  v6 = a3[5];
  v7 = (void *)(a1 + v6);
  v8 = (const void *)(a2 + v6);
  v9 = sub_10000527C(&qword_1000A4FC0);
  if (swift_getEnumCaseMultiPayload(v8, v9) == 1)
  {
    v10 = type metadata accessor for WidgetRenderingMode(0);
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v7, v8, v10);
    swift_storeEnumTagMultiPayload(v7, v9, 1);
  }
  else
  {
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
  }
  v11 = a3[6];
  v12 = (void *)(a1 + v11);
  v13 = (const void *)(a2 + v11);
  v14 = sub_10000527C(&qword_1000A4FC8);
  if (swift_getEnumCaseMultiPayload(v13, v14) == 1)
  {
    v15 = type metadata accessor for ColorScheme(0);
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v15 - 8) + 32))(v12, v13, v15);
    swift_storeEnumTagMultiPayload(v12, v14, 1);
  }
  else
  {
    memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
  }
  v16 = a3[7];
  v17 = (void *)(a1 + v16);
  v18 = (const void *)(a2 + v16);
  v19 = sub_10000527C(&qword_1000A4FD0);
  if (swift_getEnumCaseMultiPayload(v18, v19) == 1)
  {
    v20 = type metadata accessor for ContentSizeCategory(0);
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v20 - 8) + 32))(v17, v18, v20);
    swift_storeEnumTagMultiPayload(v17, v19, 1);
  }
  else
  {
    memcpy(v17, v18, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
  }
  v21 = a3[8];
  v22 = a1 + v21;
  v23 = a2 + v21;
  v24 = type metadata accessor for UUID(0);
  v25 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 32);
  v25(v22, v23, v24);
  v26 = type metadata accessor for AccessoryAndSceneEntity(0);
  v25(v22 + *(int *)(v26 + 20), v23 + *(int *)(v26 + 20), v24);
  v27 = *(int *)(v26 + 24);
  v28 = v22 + v27;
  v29 = v23 + v27;
  v25(v28, v29, v24);
  v30 = (int *)type metadata accessor for WidgetTileInfo(0);
  v25(v28 + v30[5], v29 + v30[5], v24);
  *(_OWORD *)(v28 + v30[6]) = *(_OWORD *)(v29 + v30[6]);
  *(_OWORD *)(v28 + v30[7]) = *(_OWORD *)(v29 + v30[7]);
  *(_OWORD *)(v28 + v30[8]) = *(_OWORD *)(v29 + v30[8]);
  *(_OWORD *)(v28 + v30[9]) = *(_OWORD *)(v29 + v30[9]);
  v31 = v30[10];
  v32 = v28 + v31;
  v33 = v29 + v31;
  v34 = type metadata accessor for StaticRenderingMode(0);
  v35 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v34 - 8) + 32);
  v35(v32, v33, v34);
  v35(v28 + v30[11], v29 + v30[11], v34);
  *(_QWORD *)(v28 + v30[12]) = *(_QWORD *)(v29 + v30[12]);
  *(_BYTE *)(v28 + v30[13]) = *(_BYTE *)(v29 + v30[13]);
  v36 = v30[14];
  v37 = v28 + v36;
  v38 = v29 + v36;
  *(_QWORD *)v37 = *(_QWORD *)v38;
  *(_BYTE *)(v37 + 8) = *(_BYTE *)(v38 + 8);
  *(_QWORD *)(v28 + v30[15]) = *(_QWORD *)(v29 + v30[15]);
  *(_BYTE *)(v28 + v30[16]) = *(_BYTE *)(v29 + v30[16]);
  *(_BYTE *)(v28 + v30[17]) = *(_BYTE *)(v29 + v30[17]);
  v39 = v30[18];
  v40 = v28 + v39;
  v41 = v29 + v39;
  *(_QWORD *)v40 = *(_QWORD *)v41;
  *(_BYTE *)(v40 + 8) = *(_BYTE *)(v41 + 8);
  *(_OWORD *)(v28 + v30[19]) = *(_OWORD *)(v29 + v30[19]);
  *(_BYTE *)(v28 + v30[20]) = *(_BYTE *)(v29 + v30[20]);
  *(_QWORD *)(v28 + v30[21]) = *(_QWORD *)(v29 + v30[21]);
  *(_QWORD *)(v28 + v30[22]) = *(_QWORD *)(v29 + v30[22]);
  v42 = a3[10];
  *(_OWORD *)(a1 + a3[9]) = *(_OWORD *)(a2 + a3[9]);
  *(_BYTE *)(a1 + v42) = *(_BYTE *)(a2 + v42);
  return a1;
}

uint64_t sub_10005DC9C(uint64_t a1, uint64_t *a2, int *a3)
{
  uint64_t v6;
  char v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  void *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void (*v29)(uint64_t, uint64_t, uint64_t);
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int *v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  uint64_t *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  _QWORD *v54;
  uint64_t *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  void (*v63)(uint64_t, uint64_t, uint64_t);
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t *v68;
  uint64_t v69;
  void *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  _QWORD *v77;
  uint64_t *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;

  v6 = *a2;
  v7 = *((_BYTE *)a2 + 8);
  v8 = *(_QWORD *)a1;
  v9 = *(_BYTE *)(a1 + 8);
  *(_QWORD *)a1 = v6;
  *(_BYTE *)(a1 + 8) = v7;
  sub_10003561C(v8, v9);
  if ((uint64_t *)a1 != a2)
  {
    v10 = a3[5];
    v11 = (void *)(a1 + v10);
    v12 = (char *)a2 + v10;
    sub_100014EFC(a1 + v10, &qword_1000A4FC0);
    v13 = sub_10000527C(&qword_1000A4FC0);
    if (swift_getEnumCaseMultiPayload(v12, v13) == 1)
    {
      v14 = type metadata accessor for WidgetRenderingMode(0);
      (*(void (**)(void *, char *, uint64_t))(*(_QWORD *)(v14 - 8) + 32))(v11, v12, v14);
      swift_storeEnumTagMultiPayload(v11, v13, 1);
    }
    else
    {
      memcpy(v11, v12, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
    }
    v15 = a3[6];
    v16 = (void *)(a1 + v15);
    v17 = (char *)a2 + v15;
    sub_100014EFC(a1 + v15, &qword_1000A4FC8);
    v18 = sub_10000527C(&qword_1000A4FC8);
    if (swift_getEnumCaseMultiPayload(v17, v18) == 1)
    {
      v19 = type metadata accessor for ColorScheme(0);
      (*(void (**)(void *, char *, uint64_t))(*(_QWORD *)(v19 - 8) + 32))(v16, v17, v19);
      swift_storeEnumTagMultiPayload(v16, v18, 1);
    }
    else
    {
      memcpy(v16, v17, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
    }
    v20 = a3[7];
    v21 = (void *)(a1 + v20);
    v22 = (char *)a2 + v20;
    sub_100014EFC(a1 + v20, &qword_1000A4FD0);
    v23 = sub_10000527C(&qword_1000A4FD0);
    if (swift_getEnumCaseMultiPayload(v22, v23) == 1)
    {
      v24 = type metadata accessor for ContentSizeCategory(0);
      (*(void (**)(void *, char *, uint64_t))(*(_QWORD *)(v24 - 8) + 32))(v21, v22, v24);
      swift_storeEnumTagMultiPayload(v21, v23, 1);
    }
    else
    {
      memcpy(v21, v22, *(_QWORD *)(*(_QWORD *)(v23 - 8) + 64));
    }
  }
  v25 = a3[8];
  v26 = a1 + v25;
  v27 = (uint64_t)a2 + v25;
  v28 = type metadata accessor for UUID(0);
  v29 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v28 - 8) + 40);
  v29(v26, v27, v28);
  v30 = type metadata accessor for AccessoryAndSceneEntity(0);
  v29(v26 + *(int *)(v30 + 20), v27 + *(int *)(v30 + 20), v28);
  v31 = *(int *)(v30 + 24);
  v32 = v26 + v31;
  v33 = v27 + v31;
  v29(v32, v33, v28);
  v34 = (int *)type metadata accessor for WidgetTileInfo(0);
  v29(v32 + v34[5], v33 + v34[5], v28);
  v35 = v34[6];
  v36 = (_QWORD *)(v32 + v35);
  v37 = (uint64_t *)(v33 + v35);
  v39 = *v37;
  v38 = v37[1];
  v40 = v36[1];
  *v36 = v39;
  v36[1] = v38;
  swift_bridgeObjectRelease(v40);
  v41 = v34[7];
  v42 = (_QWORD *)(v32 + v41);
  v43 = (uint64_t *)(v33 + v41);
  v45 = *v43;
  v44 = v43[1];
  v46 = v42[1];
  *v42 = v45;
  v42[1] = v44;
  swift_bridgeObjectRelease(v46);
  v47 = v34[8];
  v48 = (_QWORD *)(v32 + v47);
  v49 = (uint64_t *)(v33 + v47);
  v51 = *v49;
  v50 = v49[1];
  v52 = v48[1];
  *v48 = v51;
  v48[1] = v50;
  swift_bridgeObjectRelease(v52);
  v53 = v34[9];
  v54 = (_QWORD *)(v32 + v53);
  v55 = (uint64_t *)(v33 + v53);
  v57 = *v55;
  v56 = v55[1];
  v58 = v54[1];
  *v54 = v57;
  v54[1] = v56;
  swift_bridgeObjectRelease(v58);
  v59 = v34[10];
  v60 = v32 + v59;
  v61 = v33 + v59;
  v62 = type metadata accessor for StaticRenderingMode(0);
  v63 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v62 - 8) + 40);
  v63(v60, v61, v62);
  v63(v32 + v34[11], v33 + v34[11], v62);
  v64 = v34[12];
  v65 = *(_QWORD *)(v32 + v64);
  *(_QWORD *)(v32 + v64) = *(_QWORD *)(v33 + v64);
  swift_release(v65);
  *(_BYTE *)(v32 + v34[13]) = *(_BYTE *)(v33 + v34[13]);
  v66 = v34[14];
  v67 = v32 + v66;
  v68 = (uint64_t *)(v33 + v66);
  v69 = *v68;
  LOBYTE(v68) = *((_BYTE *)v68 + 8);
  v70 = *(void **)v67;
  *(_QWORD *)v67 = v69;
  *(_BYTE *)(v67 + 8) = (_BYTE)v68;

  v71 = v34[15];
  v72 = *(_QWORD *)(v32 + v71);
  *(_QWORD *)(v32 + v71) = *(_QWORD *)(v33 + v71);
  swift_bridgeObjectRelease(v72);
  *(_BYTE *)(v32 + v34[16]) = *(_BYTE *)(v33 + v34[16]);
  *(_BYTE *)(v32 + v34[17]) = *(_BYTE *)(v33 + v34[17]);
  v73 = v34[18];
  v74 = v32 + v73;
  v75 = v33 + v73;
  *(_BYTE *)(v74 + 8) = *(_BYTE *)(v75 + 8);
  *(_QWORD *)v74 = *(_QWORD *)v75;
  v76 = v34[19];
  v77 = (_QWORD *)(v32 + v76);
  v78 = (uint64_t *)(v33 + v76);
  v80 = *v78;
  v79 = v78[1];
  v81 = v77[1];
  *v77 = v80;
  v77[1] = v79;
  swift_bridgeObjectRelease(v81);
  *(_BYTE *)(v32 + v34[20]) = *(_BYTE *)(v33 + v34[20]);
  v82 = v34[21];
  v83 = *(_QWORD *)(v32 + v82);
  *(_QWORD *)(v32 + v82) = *(_QWORD *)(v33 + v82);
  swift_bridgeObjectRelease(v83);
  v84 = v34[22];
  v85 = *(_QWORD *)(v32 + v84);
  *(_QWORD *)(v32 + v84) = *(_QWORD *)(v33 + v84);
  swift_bridgeObjectRelease(v85);
  v86 = a3[10];
  *(_OWORD *)(a1 + a3[9]) = *(_OWORD *)((char *)a2 + a3[9]);
  *(_BYTE *)(a1 + v86) = *((_BYTE *)a2 + v86);
  return a1;
}

uint64_t sub_10005E0D0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10005E0DC);
}

uint64_t sub_10005E0DC(uint64_t a1, uint64_t a2, int *a3)
{
  unsigned int v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  if ((_DWORD)a2 == 254)
  {
    v4 = *(unsigned __int8 *)(a1 + 8);
    if (v4 > 1)
      return (v4 ^ 0xFF) + 1;
    else
      return 0;
  }
  else
  {
    v8 = sub_10000527C(&qword_1000A5E88);
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
    {
      v10 = v8;
      v11 = a3[5];
    }
    else
    {
      v12 = sub_10000527C(&qword_1000A5CD8);
      v9 = *(_QWORD *)(v12 - 8);
      if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
      {
        v10 = v12;
        v11 = a3[6];
      }
      else
      {
        v13 = sub_10000527C(&qword_1000A6740);
        v9 = *(_QWORD *)(v13 - 8);
        if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
        {
          v10 = v13;
          v11 = a3[7];
        }
        else
        {
          v10 = type metadata accessor for AccessoryAndSceneEntity(0);
          v9 = *(_QWORD *)(v10 - 8);
          v11 = a3[8];
        }
      }
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(a1 + v11, a2, v10);
  }
}

uint64_t sub_10005E1C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10005E1D4);
}

uint64_t sub_10005E1D4(uint64_t result, uint64_t a2, int a3, int *a4)
{
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v5 = result;
  if (a3 == 254)
  {
    *(_BYTE *)(result + 8) = -(char)a2;
  }
  else
  {
    v8 = sub_10000527C(&qword_1000A5E88);
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      v10 = v8;
      v11 = a4[5];
    }
    else
    {
      v12 = sub_10000527C(&qword_1000A5CD8);
      v9 = *(_QWORD *)(v12 - 8);
      if (*(_DWORD *)(v9 + 84) == a3)
      {
        v10 = v12;
        v11 = a4[6];
      }
      else
      {
        v13 = sub_10000527C(&qword_1000A6740);
        v9 = *(_QWORD *)(v13 - 8);
        if (*(_DWORD *)(v9 + 84) == a3)
        {
          v10 = v13;
          v11 = a4[7];
        }
        else
        {
          v10 = type metadata accessor for AccessoryAndSceneEntity(0);
          v9 = *(_QWORD *)(v10 - 8);
          v11 = a4[8];
        }
      }
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(v5 + v11, a2, a2, v10);
  }
  return result;
}

uint64_t type metadata accessor for SmallSquareTileView(uint64_t a1)
{
  uint64_t result;

  result = qword_1000A67A0;
  if (!qword_1000A67A0)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for SmallSquareTileView);
  return result;
}

void sub_10005E2FC(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  _QWORD v10[7];

  v10[0] = "\t";
  sub_100048D10(319, (unint64_t *)&qword_1000A5F00, (uint64_t (*)(uint64_t))&type metadata accessor for WidgetRenderingMode);
  if (v3 <= 0x3F)
  {
    v10[1] = *(_QWORD *)(v2 - 8) + 64;
    sub_100048D10(319, &qword_1000A5EF8, (uint64_t (*)(uint64_t))&type metadata accessor for ColorScheme);
    if (v5 <= 0x3F)
    {
      v10[2] = *(_QWORD *)(v4 - 8) + 64;
      sub_100048D10(319, (unint64_t *)&unk_1000A67B0, (uint64_t (*)(uint64_t))&type metadata accessor for ContentSizeCategory);
      if (v7 <= 0x3F)
      {
        v10[3] = *(_QWORD *)(v6 - 8) + 64;
        v8 = type metadata accessor for AccessoryAndSceneEntity(319);
        if (v9 <= 0x3F)
        {
          v10[4] = *(_QWORD *)(v8 - 8) + 64;
          v10[5] = &unk_100088E70;
          v10[6] = &unk_100088E88;
          swift_initStructMetadata(a1, 256, 7, v10, a1 + 16);
        }
      }
    }
  }
}

uint64_t sub_10005E408(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_10008CBEC, 1);
}

uint64_t sub_10005E418@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  uint64_t v22;
  int v23;
  int v24;
  double v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  unsigned int v34;
  uint64_t v35;
  int v36;
  int v37;
  double v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  unsigned int v47;
  uint64_t v48;
  int v49;
  int v50;
  double v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  unsigned int v60;
  uint64_t v61;
  int v62;
  int v63;
  double v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  char *v76;
  __int128 v77;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t *v83;
  uint64_t v84;
  _OWORD v85[3];

  v2 = v1;
  v84 = a1;
  v3 = sub_10000527C(&qword_1000A67F8);
  __chkstk_darwin(v3);
  v5 = (char *)&v79 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_10000527C(&qword_1000A6800);
  __chkstk_darwin(v6);
  v8 = (char *)&v79 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_10000527C(&qword_1000A6808);
  __chkstk_darwin(v9);
  v11 = (char *)&v79 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v80 = sub_10000527C(&qword_1000A6810);
  __chkstk_darwin(v80);
  v13 = (char *)&v79 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v81 = sub_10000527C(&qword_1000A6818);
  __chkstk_darwin(v81);
  v15 = (char *)&v79 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v82 = sub_10000527C(&qword_1000A6820);
  v16 = __chkstk_darwin(v82);
  v18 = (char *)&v79 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)v5 = static HorizontalAlignment.leading.getter(v16);
  *((_QWORD *)v5 + 1) = 0;
  v5[16] = 1;
  v19 = (uint64_t)&v5[*(int *)(sub_10000527C(&qword_1000A6828) + 44)];
  v83 = v2;
  v20 = sub_10005E8CC(v2, v19);
  v21 = static Edge.Set.top.getter(v20);
  v22 = Edge.Set.init(rawValue:)(0);
  v23 = v22;
  v24 = Edge.Set.init(rawValue:)(v22);
  if (Edge.Set.init(rawValue:)(v24 & v21) != v21)
    LOBYTE(v23) = Edge.Set.init(rawValue:)(v23 | v21);
  v25 = EdgeInsets.init(_all:)(9.0);
  v27 = v26;
  v29 = v28;
  v31 = v30;
  sub_100026CB4((uint64_t)v5, (uint64_t)v8, &qword_1000A67F8);
  v32 = &v8[*(int *)(v6 + 36)];
  *v32 = v23;
  *((double *)v32 + 1) = v25;
  *((_QWORD *)v32 + 2) = v27;
  *((_QWORD *)v32 + 3) = v29;
  *((_QWORD *)v32 + 4) = v31;
  v32[40] = 0;
  v33 = sub_100014EFC((uint64_t)v5, &qword_1000A67F8);
  v34 = static Edge.Set.bottom.getter(v33);
  v35 = Edge.Set.init(rawValue:)(0);
  v36 = v35;
  v37 = Edge.Set.init(rawValue:)(v35);
  if (Edge.Set.init(rawValue:)(v37 & v34) != v34)
    LOBYTE(v36) = Edge.Set.init(rawValue:)(v36 | v34);
  v38 = EdgeInsets.init(_all:)(8.0);
  v40 = v39;
  v42 = v41;
  v44 = v43;
  sub_100026CB4((uint64_t)v8, (uint64_t)v11, &qword_1000A6800);
  v45 = &v11[*(int *)(v9 + 36)];
  *v45 = v36;
  *((double *)v45 + 1) = v38;
  *((_QWORD *)v45 + 2) = v40;
  *((_QWORD *)v45 + 3) = v42;
  *((_QWORD *)v45 + 4) = v44;
  v45[40] = 0;
  v46 = sub_100014EFC((uint64_t)v8, &qword_1000A6800);
  v47 = static Edge.Set.leading.getter(v46);
  v48 = Edge.Set.init(rawValue:)(0);
  v49 = v48;
  v50 = Edge.Set.init(rawValue:)(v48);
  if (Edge.Set.init(rawValue:)(v50 & v47) != v47)
    LOBYTE(v49) = Edge.Set.init(rawValue:)(v49 | v47);
  v51 = EdgeInsets.init(_all:)(10.0);
  v53 = v52;
  v55 = v54;
  v57 = v56;
  sub_100026CB4((uint64_t)v11, (uint64_t)v13, &qword_1000A6808);
  v58 = &v13[*(int *)(v80 + 36)];
  *v58 = v49;
  *((double *)v58 + 1) = v51;
  *((_QWORD *)v58 + 2) = v53;
  *((_QWORD *)v58 + 3) = v55;
  *((_QWORD *)v58 + 4) = v57;
  v58[40] = 0;
  v59 = sub_100014EFC((uint64_t)v11, &qword_1000A6808);
  v60 = static Edge.Set.trailing.getter(v59);
  v61 = Edge.Set.init(rawValue:)(0);
  v62 = v61;
  v63 = Edge.Set.init(rawValue:)(v61);
  if (Edge.Set.init(rawValue:)(v63 & v60) != v60)
    LOBYTE(v62) = Edge.Set.init(rawValue:)(v62 | v60);
  v64 = EdgeInsets.init(_all:)(8.0);
  v66 = v65;
  v68 = v67;
  v70 = v69;
  sub_100026CB4((uint64_t)v13, (uint64_t)v15, &qword_1000A6810);
  v71 = &v15[*(int *)(v81 + 36)];
  *v71 = v62;
  *((double *)v71 + 1) = v64;
  *((_QWORD *)v71 + 2) = v66;
  *((_QWORD *)v71 + 3) = v68;
  *((_QWORD *)v71 + 4) = v70;
  v71[40] = 0;
  sub_100014EFC((uint64_t)v13, &qword_1000A6810);
  v72 = type metadata accessor for SmallSquareTileView(0);
  v73 = *(uint64_t *)((char *)v83 + *(int *)(v72 + 36) + 8);
  v74 = static Alignment.center.getter(v72);
  _FrameLayout.init(width:height:alignment:)(v85, 0, 1, v73, 0, v74, v75);
  sub_100026CB4((uint64_t)v15, (uint64_t)v18, &qword_1000A6818);
  v76 = &v18[*(int *)(v82 + 36)];
  v77 = v85[1];
  *(_OWORD *)v76 = v85[0];
  *((_OWORD *)v76 + 1) = v77;
  *((_OWORD *)v76 + 2) = v85[2];
  sub_100014EFC((uint64_t)v15, &qword_1000A6818);
  return sub_100052E04((uint64_t)v18, v84, &qword_1000A6820);
}

uint64_t sub_10005E8CC@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  int v22;
  uint64_t (*v23)(_QWORD);
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v45;
  uint64_t v46;

  v46 = a2;
  v3 = sub_10000527C(&qword_1000A6830);
  v4 = __chkstk_darwin(v3);
  v6 = (char *)&v45 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v8 = (char *)&v45 - v7;
  v9 = sub_10000527C(&qword_1000A6838);
  v10 = __chkstk_darwin(v9);
  v12 = (char *)&v45 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v14 = (char *)&v45 - v13;
  v15 = type metadata accessor for WidgetTileInfo(0);
  __chkstk_darwin(v15);
  v17 = (char *)&v45 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = type metadata accessor for SmallSquareTileView(0);
  v19 = __chkstk_darwin(v18);
  v21 = (char *)&v45 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = *((unsigned __int8 *)a1 + *(int *)(v19 + 40));
  sub_100026C34((uint64_t)a1, (uint64_t)v21, v23);
  if (v22 == 1)
  {
    v24 = *(int *)(v18 + 32);
    v25 = type metadata accessor for AccessoryAndSceneEntity(0);
    sub_100026C34((uint64_t)&v21[v24 + *(int *)(v25 + 24)], (uint64_t)v17, type metadata accessor for WidgetTileInfo);
    sub_100026C78((uint64_t)v21, type metadata accessor for SmallSquareTileView);
    v26 = v17[*(int *)(v15 + 52)];
    v27 = sub_100026C78((uint64_t)v17, type metadata accessor for WidgetTileInfo);
  }
  else
  {
    v27 = sub_100026C78((uint64_t)v21, type metadata accessor for SmallSquareTileView);
    v26 = 0;
  }
  *(_QWORD *)v14 = static VerticalAlignment.center.getter(v27, v28, v29, v30, v31, v32);
  *((_QWORD *)v14 + 1) = 0;
  v14[16] = 1;
  v33 = sub_10000527C(&qword_1000A6840);
  v34 = sub_10005EBB8(a1, v26, (uint64_t)&v14[*(int *)(v33 + 44)]);
  *(_QWORD *)v8 = static VerticalAlignment.center.getter(v34, v35, v36, v37, v38, v39);
  *((_QWORD *)v8 + 1) = 0;
  v8[16] = 1;
  v40 = sub_10000527C(&qword_1000A6848);
  sub_1000600B0((uint64_t)a1, v26, (uint64_t)&v8[*(int *)(v40 + 44)]);
  sub_100026CB4((uint64_t)v14, (uint64_t)v12, &qword_1000A6838);
  sub_100026CB4((uint64_t)v8, (uint64_t)v6, &qword_1000A6830);
  v41 = v46;
  sub_100026CB4((uint64_t)v12, v46, &qword_1000A6838);
  v42 = sub_10000527C(&qword_1000A6850);
  v43 = v41 + *(int *)(v42 + 48);
  *(_QWORD *)v43 = 0;
  *(_BYTE *)(v43 + 8) = 0;
  sub_100026CB4((uint64_t)v6, v41 + *(int *)(v42 + 64), &qword_1000A6830);
  sub_100014EFC((uint64_t)v8, &qword_1000A6830);
  sub_100014EFC((uint64_t)v14, &qword_1000A6838);
  sub_100014EFC((uint64_t)v6, &qword_1000A6830);
  return sub_100014EFC((uint64_t)v12, &qword_1000A6838);
}

uint64_t sub_10005EBB8@<X0>(uint64_t *a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t *v57;
  char *v58;
  char *v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t *v65;
  uint64_t v66;
  char v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  char v74;
  char v75;
  uint64_t KeyPath;
  uint64_t v77;
  double v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  char *v82;
  uint64_t v83;
  unint64_t v84;
  char *v85;
  char *v86;
  uint64_t v87;
  int *v88;
  uint64_t v89;
  unsigned int *v90;
  char *v91;
  uint64_t v92;
  uint64_t v93;
  char *v94;
  uint64_t *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  unint64_t v102;
  uint64_t v103;
  char *v104;
  char *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t *v108;
  uint64_t v109;
  uint64_t v110;
  __n128 v111;
  char *v112;
  char *v113;
  __n128 v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  unint64_t v125;
  uint64_t v126;
  uint64_t v127;
  char v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  int v135;
  uint64_t v136;
  char v137;
  char v138;
  char v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  _QWORD *v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  double v156;
  int v157;
  uint64_t v158;
  uint64_t v159;
  char *v160;
  char v161;
  void (*v162)(char *, uint64_t);
  uint64_t v163;
  char v164;
  char v165;
  unsigned int *v166;
  uint64_t v167;
  char *v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t *v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  _OWORD *v182;
  __int128 v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v199;
  uint64_t v200;
  uint64_t *v201;
  uint64_t v202;
  _QWORD *v203;
  uint64_t *v204;
  char *v205;
  char *v206;
  uint64_t v207;
  char *v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  char *v213;
  char *v214;
  uint64_t v215;
  uint64_t v216;
  char *v217;
  char *v218;
  char *v219;
  uint64_t v220;
  char *v221;
  uint64_t v222;
  uint64_t v223;
  char *v224;
  uint64_t v225;
  char *v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  _QWORD *v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  int v250;
  char *v251;
  char *v252;
  uint64_t v253;
  uint64_t v254;
  __int128 v255;
  __int128 v256;
  __int128 v257;
  uint64_t v258;
  uint64_t v259;
  char v260;
  uint64_t v261;
  uint64_t v262;
  char *v263;

  v250 = a2;
  v248 = a3;
  v238 = sub_10000527C(&qword_1000A6880);
  __chkstk_darwin(v238);
  v203 = (uint64_t *)((char *)&v200 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  v200 = type metadata accessor for InFlightProgressView(0);
  v5 = __chkstk_darwin(v200);
  v201 = (uint64_t *)((char *)&v200 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v5);
  v202 = (uint64_t)&v200 - v7;
  v235 = sub_10000527C(&qword_1000A6888);
  __chkstk_darwin(v235);
  v237 = (uint64_t)&v200 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v236 = sub_10000527C(&qword_1000A6890);
  __chkstk_darwin(v236);
  v234 = (uint64_t *)((char *)&v200 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  v10 = type metadata accessor for _BlendModeEffect(0);
  __chkstk_darwin(v10);
  v224 = (char *)&v200 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v223 = type metadata accessor for BlendMode(0);
  v222 = *(_QWORD *)(v223 - 8);
  __chkstk_darwin(v223);
  v221 = (char *)&v200 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v220 = sub_10000527C(&qword_1000A6898);
  __chkstk_darwin(v220);
  v226 = (char *)&v200 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v225 = sub_10000527C(&qword_1000A68A0);
  __chkstk_darwin(v225);
  v231 = (uint64_t)&v200 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v228 = sub_10000527C(&qword_1000A68A8);
  __chkstk_darwin(v228);
  v230 = (uint64_t)&v200 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v229 = sub_10000527C(&qword_1000A68B0);
  v16 = __chkstk_darwin(v229);
  v232 = (uint64_t)&v200 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = __chkstk_darwin(v16);
  v227 = (uint64_t)&v200 - v19;
  __chkstk_darwin(v18);
  v233 = (uint64_t)&v200 - v20;
  v243 = type metadata accessor for WidgetTileInfo(0);
  __chkstk_darwin(v243);
  v210 = (uint64_t)&v200 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = type metadata accessor for SmallSquareTileView(0);
  __chkstk_darwin(v22);
  v244 = (uint64_t)&v200 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = sub_10000527C(&qword_1000A68B8);
  v25 = __chkstk_darwin(v24);
  v253 = (uint64_t)&v200 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v25);
  v254 = (uint64_t)&v200 - v27;
  v28 = type metadata accessor for SymbolRenderingMode(0);
  v29 = __chkstk_darwin(v28);
  v206 = (char *)&v200 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v29);
  v205 = (char *)&v200 - v31;
  v241 = sub_10000527C(&qword_1000A68C0);
  __chkstk_darwin(v241);
  v242 = (uint64_t)&v200 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  v246 = type metadata accessor for ColorScheme(0);
  v245 = *(_QWORD *)(v246 - 8);
  v33 = __chkstk_darwin(v246);
  v208 = (char *)&v200 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  v35 = __chkstk_darwin(v33);
  v207 = (uint64_t)&v200 - v36;
  __chkstk_darwin(v35);
  v218 = (char *)&v200 - v37;
  v38 = sub_10000527C(&qword_1000A5FB0);
  __chkstk_darwin(v38);
  v40 = (char *)&v200 - ((v39 + 15) & 0xFFFFFFFFFFFFFFF0);
  v216 = sub_10000527C(&qword_1000A68C8);
  v215 = *(_QWORD *)(v216 - 8);
  __chkstk_darwin(v216);
  v214 = (char *)&v200 - ((v41 + 15) & 0xFFFFFFFFFFFFFFF0);
  v240 = sub_10000527C(&qword_1000A68D0);
  v42 = __chkstk_darwin(v240);
  v213 = (char *)&v200 - ((v43 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v42);
  v217 = (char *)&v200 - v44;
  v212 = type metadata accessor for WidgetRenderingMode(0);
  v211 = *(_QWORD *)(v212 - 8);
  __chkstk_darwin(v212);
  v46 = (char *)&v200 - ((v45 + 15) & 0xFFFFFFFFFFFFFFF0);
  v239 = type metadata accessor for TileIconView(0);
  v47 = __chkstk_darwin(v239);
  v49 = (char *)&v200 - ((v48 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v47);
  v51 = (char *)&v200 - v50;
  v52 = sub_10000527C(&qword_1000A68D8);
  v53 = __chkstk_darwin(v52);
  v249 = (uint64_t)&v200 - ((v54 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v53);
  v252 = (char *)&v200 - v55;
  v56 = v22;
  v57 = a1;
  v58 = (char *)a1 + *(int *)(v22 + 32);
  v209 = type metadata accessor for AccessoryAndSceneEntity(0);
  v59 = &v58[*(int *)(v209 + 24)];
  v60 = v59;
  sub_100079B30();
  v219 = v40;
  v247 = v56;
  v251 = v59;
  if (v62)
  {
    v63 = v61;
    v64 = v62;
    v65 = v57;
    v204 = v57;
    sub_10006215C((uint64_t)v46);
    v66 = *v57;
    v67 = *((_BYTE *)v65 + 8);
    sub_100035568(v66, v67);
    sub_100061B38(v66, v67);
    sub_10003561C(v66, v67);
    v206 = (char *)sub_10001BBEC((uint64_t)v46);
    (*(void (**)(char *, uint64_t))(v211 + 8))(v46, v212);
    *(_QWORD *)&v255 = v63;
    *((_QWORD *)&v255 + 1) = v64;
    v68 = sub_100005300();
    v69 = Text.init<A>(_:)(&v255, &type metadata for String, v68);
    v71 = v70;
    v73 = v72;
    v212 = v72;
    v75 = v74 & 1;
    KeyPath = swift_getKeyPath(&unk_100088FD8);
    v211 = KeyPath;
    v77 = swift_getKeyPath(&unk_100089008);
    v78 = static Font.Weight.bold.getter();
    v79 = type metadata accessor for Font.Design(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v79 - 8) + 56))(v40, 1, 1, v79);
    v80 = static Font.system(size:weight:design:)(*(_QWORD *)&v78, 0, v40, 15.0);
    sub_100014EFC((uint64_t)v40, &qword_1000A5FB0);
    v81 = swift_getKeyPath(&unk_100088F20);
    *(_QWORD *)&v255 = v69;
    *((_QWORD *)&v255 + 1) = v71;
    LOBYTE(v256) = v75;
    *((_QWORD *)&v256 + 1) = v73;
    *(_QWORD *)&v257 = KeyPath;
    BYTE8(v257) = 1;
    v258 = v77;
    v259 = 1;
    v260 = 0;
    v261 = v81;
    v262 = v80;
    v82 = v206;
    v263 = v206;
    swift_retain(v206);
    v83 = sub_10000527C(&qword_1000A68E8);
    v84 = sub_1000608BC();
    v85 = v214;
    View.monospacedDigit()(v83, v84);
    sub_1000493D4(v69, v71, v75);
    v86 = v82;
    swift_release(v82);
    swift_release(v80);
    swift_release(v81);
    swift_release(v77);
    swift_release(v211);
    swift_bridgeObjectRelease(v212);
    v87 = swift_getKeyPath(&unk_100088EF0);
    v88 = (int *)v243;
    v89 = v245;
    if (v251[*(int *)(v243 + 52)])
      v90 = (unsigned int *)&enum case for ColorScheme.light(_:);
    else
      v90 = (unsigned int *)&enum case for ColorScheme.dark(_:);
    v91 = v218;
    v92 = v246;
    (*(void (**)(char *, _QWORD, uint64_t))(v245 + 104))(v218, *v90, v246);
    v93 = v240;
    v94 = v213;
    v95 = (uint64_t *)&v213[*(int *)(v240 + 36)];
    v96 = sub_10000527C(&qword_1000A6870);
    (*(void (**)(char *, char *, uint64_t))(v89 + 16))((char *)v95 + *(int *)(v96 + 28), v91, v92);
    *v95 = v87;
    v97 = v215;
    v98 = v216;
    (*(void (**)(char *, char *, uint64_t))(v215 + 16))(v94, v85, v216);
    (*(void (**)(char *, uint64_t))(v89 + 8))(v91, v92);
    (*(void (**)(char *, uint64_t))(v97 + 8))(v85, v98);
    v99 = (uint64_t)v94;
    v100 = (uint64_t)v217;
    sub_100052E04(v99, (uint64_t)v217, &qword_1000A68D0);
    v101 = v242;
    sub_100026CB4(v100, v242, &qword_1000A68D0);
    swift_storeEnumTagMultiPayload(v101, v241, 0);
    v102 = sub_100060810();
    v103 = sub_100008C7C(&qword_1000A6960, type metadata accessor for TileIconView, (uint64_t)&protocol conformance descriptor for TileIconView);
    v104 = v252;
    _ConditionalContent<>.init(storage:)(v101, v93, v239, v102, v103);
    swift_release(v86);
    sub_100014EFC(v100, &qword_1000A68D0);
    v105 = v104;
    v106 = (uint64_t)v204;
  }
  else
  {
    v217 = v49;
    v218 = v51;
    v105 = v252;
    v106 = (uint64_t)v57;
    v107 = 32;
    if (*((_BYTE *)v57 + *(int *)(v56 + 40)))
      v107 = 36;
    v88 = (int *)v243;
    v108 = (uint64_t *)&v59[*(int *)(v243 + v107)];
    v110 = *v108;
    v109 = v108[1];
    v111 = swift_bridgeObjectRetain(v109);
    v112 = v205;
    StaticRenderingMode.symbolRenderingMode.getter(v111);
    v113 = v206;
    v115 = StaticRenderingMode.symbolRenderingMode.getter(v114);
    if (v59[v88[13]] == 1)
    {
      v116 = *(_QWORD *)&v59[v88[12]];
      v117 = swift_retain(*(_QWORD *)&v60[v88[12]]);
    }
    else
    {
      v117 = static Color.white.getter(v115);
      v116 = v117;
    }
    v118 = (uint64_t)v113;
    v119 = (uint64_t)v112;
    v120 = (uint64_t)v218;
    v121 = (uint64_t)v217;
    v122 = static Alignment.leading.getter(v117);
    TileIconView.init(isActivated:iconSymbol:iconSymbolRenderingMode:iconSymbolActivatedRenderingMode:iconColor:imageContainerDimension:symbolFontSize:iconAlignment:)(v250 & 1, v110, v109, v119, v118, v116, v122, v123, v121, 15.0, 15.0);
    sub_100026D98(v121, v120, type metadata accessor for TileIconView);
    v124 = v242;
    sub_100026C34(v120, v242, type metadata accessor for TileIconView);
    swift_storeEnumTagMultiPayload(v124, v241, 1);
    v125 = sub_100060810();
    v126 = sub_100008C7C(&qword_1000A6960, type metadata accessor for TileIconView, (uint64_t)&protocol conformance descriptor for TileIconView);
    _ConditionalContent<>.init(storage:)(v124, v240, v239, v125, v126);
    sub_100026C78(v120, type metadata accessor for TileIconView);
    v92 = v246;
  }
  v127 = v244;
  v128 = v251[v88[13]];
  sub_100026C34(v106, v244, type metadata accessor for SmallSquareTileView);
  if ((v128 & 1) != 0)
  {
    v129 = v127 + *(int *)(v247 + 32) + (uint64_t)*(int *)(v209 + 24);
    v130 = (uint64_t)v105;
    v131 = v127;
    v132 = v210;
    sub_100026C34(v129, v210, type metadata accessor for WidgetTileInfo);
    v133 = v131;
    v134 = v130;
    sub_100026C78(v133, type metadata accessor for SmallSquareTileView);
    v135 = *(unsigned __int8 *)(v132 + v88[16]);
    sub_100026C78(v132, type metadata accessor for WidgetTileInfo);
    if (v135 != 1)
    {
      sub_100017778();
      v136 = v248;
      if ((v137 & 1) != 0)
      {
        sub_100017778();
        v139 = v138;
        v140 = swift_getKeyPath(&unk_100088F50);
        v141 = (uint64_t)v201;
        *v201 = v140;
        v142 = sub_10000527C(&qword_1000A5C00);
        swift_storeEnumTagMultiPayload(v141, v142, 0);
        v143 = v200;
        v144 = (_QWORD *)(v141 + *(int *)(v200 + 20));
        *v144 = swift_getKeyPath(&unk_100088F80);
        v145 = sub_10000527C(&qword_1000A4FC0);
        swift_storeEnumTagMultiPayload(v144, v145, 0);
        v146 = v141 + *(int *)(v143 + 24);
        *(_QWORD *)v146 = swift_getKeyPath(&unk_100088FB0);
        *(_BYTE *)(v146 + 8) = 0;
        *(_BYTE *)(v141 + *(int *)(v143 + 28)) = v139 & 1;
        v147 = v202;
        sub_100026D98(v141, v202, type metadata accessor for InFlightProgressView);
        sub_100026C34(v147, v141, type metadata accessor for InFlightProgressView);
        v148 = (uint64_t)v203;
        *v203 = 0;
        *(_BYTE *)(v148 + 8) = 1;
        v149 = sub_10000527C(&qword_1000A6990);
        sub_100026C34(v141, v148 + *(int *)(v149 + 48), type metadata accessor for InFlightProgressView);
        sub_100026C78(v141, type metadata accessor for InFlightProgressView);
        v150 = v237;
        sub_100026CB4(v148, v237, &qword_1000A6880);
        swift_storeEnumTagMultiPayload(v150, v235, 1);
        v151 = sub_1000229D8(&qword_1000A6970, &qword_1000A6890, (uint64_t)&protocol conformance descriptor for TupleView<A>);
        v152 = sub_1000229D8(&qword_1000A6978, &qword_1000A6880, (uint64_t)&protocol conformance descriptor for TupleView<A>);
        v153 = v253;
        _ConditionalContent<>.init(storage:)(v150, v236, v238, v151, v152);
        sub_100014EFC(v148, &qword_1000A6880);
        sub_100026C78(v147, type metadata accessor for InFlightProgressView);
        v154 = sub_10000527C(&qword_1000A6980);
        (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v154 - 8) + 56))(v153, 0, 1, v154);
        sub_100052E04(v153, v254, &qword_1000A68B8);
      }
      else
      {
        v199 = sub_10000527C(&qword_1000A6980);
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v199 - 8) + 56))(v254, 1, 1, v199);
      }
      goto LABEL_24;
    }
  }
  else
  {
    sub_100026C78(v127, type metadata accessor for SmallSquareTileView);
  }
  v155 = Image.init(systemName:)(0xD00000000000001BLL, 0x800000010008B3A0);
  v156 = 1.0;
  v157 = static HierarchicalShapeStyle.secondary.getter();
  if ((v250 & 1) == 0)
  {
    v158 = v207;
    sub_100061EF4(v207);
    v159 = v245;
    v160 = v208;
    (*(void (**)(char *, _QWORD, uint64_t))(v245 + 104))(v208, enum case for ColorScheme.light(_:), v92);
    v161 = static ColorScheme.== infix(_:_:)(v158, v160);
    v162 = *(void (**)(char *, uint64_t))(v159 + 8);
    v162(v160, v92);
    v162((char *)v158, v92);
    if ((v161 & 1) != 0)
      v156 = 0.7;
    else
      v156 = 0.5;
  }
  v163 = *(_QWORD *)v106;
  v164 = *(_BYTE *)(v106 + 8);
  sub_100035568(*(_QWORD *)v106, v164);
  v165 = sub_100061B38(v163, v164);
  sub_10003561C(v163, v164);
  v166 = (unsigned int *)&enum case for BlendMode.normal(_:);
  v167 = v222;
  if ((v165 & 1) == 0)
    v166 = (unsigned int *)&enum case for BlendMode.difference(_:);
  v168 = v221;
  v169 = v223;
  (*(void (**)(char *, _QWORD, uint64_t))(v222 + 104))(v221, *v166, v223);
  v170 = (uint64_t)v224;
  (*(void (**)(char *, char *, uint64_t))(v167 + 16))(v224, v168, v169);
  v171 = (uint64_t)v226;
  sub_100026C34(v170, (uint64_t)&v226[*(int *)(v220 + 36)], (uint64_t (*)(_QWORD))&type metadata accessor for _BlendModeEffect);
  *(_QWORD *)v171 = v155;
  *(_DWORD *)(v171 + 8) = v157;
  *(double *)(v171 + 16) = v156;
  swift_retain(v155);
  sub_100026C78(v170, (uint64_t (*)(_QWORD))&type metadata accessor for _BlendModeEffect);
  (*(void (**)(char *, uint64_t))(v167 + 8))(v168, v169);
  swift_release(v155);
  v172 = type metadata accessor for Font.Design(0);
  v173 = (uint64_t)v219;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v172 - 8) + 56))(v219, 1, 1, v172);
  v174 = static Font.system(size:weight:design:)(0, 1, v173, 15.0);
  sub_100014EFC(v173, &qword_1000A5FB0);
  v175 = swift_getKeyPath(&unk_100088F20);
  v176 = v231;
  sub_100026CB4(v171, v231, &qword_1000A6898);
  v177 = (uint64_t *)(v176 + *(int *)(v225 + 36));
  *v177 = v175;
  v177[1] = v174;
  v178 = sub_100014EFC(v171, &qword_1000A6898);
  v179 = static Alignment.center.getter(v178);
  _FrameLayout.init(width:height:alignment:)(&v255, 0x402E000000000000, 0, 0x402E000000000000, 0, v179, v180);
  v181 = v230;
  sub_100026CB4(v176, v230, &qword_1000A68A0);
  v182 = (_OWORD *)(v181 + *(int *)(v228 + 36));
  v183 = v256;
  *v182 = v255;
  v182[1] = v183;
  v182[2] = v257;
  sub_100014EFC(v176, &qword_1000A68A0);
  v184 = v227;
  sub_100026CB4(v181, v227, &qword_1000A68A8);
  *(_WORD *)(v184 + *(int *)(v229 + 36)) = 257;
  sub_100014EFC(v181, &qword_1000A68A8);
  v185 = v233;
  sub_100052E04(v184, v233, &qword_1000A68B0);
  v186 = v232;
  sub_100026CB4(v185, v232, &qword_1000A68B0);
  v187 = (uint64_t)v234;
  *v234 = 0;
  *(_BYTE *)(v187 + 8) = 1;
  v188 = sub_10000527C(&qword_1000A6968);
  sub_100026CB4(v186, v187 + *(int *)(v188 + 48), &qword_1000A68B0);
  sub_100014EFC(v186, &qword_1000A68B0);
  v189 = v237;
  sub_100026CB4(v187, v237, &qword_1000A6890);
  swift_storeEnumTagMultiPayload(v189, v235, 0);
  v190 = sub_1000229D8(&qword_1000A6970, &qword_1000A6890, (uint64_t)&protocol conformance descriptor for TupleView<A>);
  v191 = sub_1000229D8(&qword_1000A6978, &qword_1000A6880, (uint64_t)&protocol conformance descriptor for TupleView<A>);
  v192 = v253;
  _ConditionalContent<>.init(storage:)(v189, v236, v238, v190, v191);
  sub_100014EFC(v187, &qword_1000A6890);
  sub_100014EFC(v185, &qword_1000A68B0);
  v193 = sub_10000527C(&qword_1000A6980);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v193 - 8) + 56))(v192, 0, 1, v193);
  sub_100052E04(v192, v254, &qword_1000A68B8);
  v134 = (uint64_t)v252;
  v136 = v248;
LABEL_24:
  v194 = v249;
  sub_100026CB4(v134, v249, &qword_1000A68D8);
  v196 = v253;
  v195 = v254;
  sub_100026CB4(v254, v253, &qword_1000A68B8);
  sub_100026CB4(v194, v136, &qword_1000A68D8);
  v197 = sub_10000527C(&qword_1000A6988);
  sub_100026CB4(v196, v136 + *(int *)(v197 + 48), &qword_1000A68B8);
  sub_100014EFC(v195, &qword_1000A68B8);
  sub_100014EFC(v134, &qword_1000A68D8);
  sub_100014EFC(v196, &qword_1000A68B8);
  return sub_100014EFC(v194, &qword_1000A68D8);
}

uint64_t sub_1000600B0@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char v46;
  unint64_t v47;
  uint64_t v48;
  char *v49;
  char *v50;
  _QWORD *v51;
  void (*v52)(char *, _QWORD, uint64_t);
  uint64_t v53;
  uint64_t result;
  uint64_t v55;
  char *v56;
  char *v57;
  void (*v58)(char *, char *, uint64_t);
  char *v59;
  char *v60;
  void (*v61)(char *, char *, uint64_t);
  uint64_t v62;
  void (*v63)(char *, uint64_t);
  char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  uint64_t v70;
  _QWORD *v71;
  uint64_t KeyPath;
  unsigned int *v73;
  uint64_t v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  char *v88;
  char *v89;
  char *v90;
  char *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  char *v98;
  uint64_t v99;
  char *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  char *v106;
  char *v107;
  _QWORD *v108;
  _QWORD *v109;
  int v110;

  v110 = a2;
  v103 = a3;
  v4 = type metadata accessor for ColorScheme(0);
  v101 = *(_QWORD *)(v4 - 8);
  v102 = v4;
  __chkstk_darwin(v4);
  v100 = (char *)&v86 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v95 = sub_10000527C(&qword_1000A5F90);
  v6 = __chkstk_darwin(v95);
  v98 = (char *)&v86 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v90 = (char *)&v86 - v8;
  v9 = type metadata accessor for DynamicTypeSize(0);
  v108 = *(_QWORD **)(v9 - 8);
  v10 = __chkstk_darwin(v9);
  v107 = (char *)&v86 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v106 = (char *)&v86 - v12;
  v97 = sub_10000527C(&qword_1000A5F98);
  v13 = __chkstk_darwin(v97);
  v88 = (char *)&v86 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  v94 = (uint64_t)&v86 - v15;
  v16 = type metadata accessor for DeviceDisplayNames(0);
  v104 = *(_QWORD *)(v16 - 8);
  v105 = v16;
  __chkstk_darwin(v16);
  v18 = (char *)&v86 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = type metadata accessor for WidgetTileInfo(0);
  __chkstk_darwin(v19);
  v21 = (char *)&v86 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v86 = type metadata accessor for TileNameAndStatusView(0);
  __chkstk_darwin(v86);
  v109 = (uint64_t *)((char *)&v86 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0));
  v96 = sub_10000527C(&qword_1000A6858);
  v93 = *(_QWORD *)(v96 - 8);
  __chkstk_darwin(v96);
  v91 = (char *)&v86 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v87 = sub_10000527C(&qword_1000A6860);
  v24 = __chkstk_darwin(v87);
  v99 = (uint64_t)&v86 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = __chkstk_darwin(v24);
  v89 = (char *)&v86 - v27;
  __chkstk_darwin(v26);
  v92 = (uint64_t)&v86 - v28;
  v29 = a1 + *(int *)(type metadata accessor for SmallSquareTileView(0) + 32);
  v30 = v29 + *(int *)(type metadata accessor for AccessoryAndSceneEntity(0) + 24);
  v31 = (uint64_t *)(v30 + *(int *)(v19 + 28));
  v32 = *v31;
  v33 = v31[1];
  sub_100026C34(v30, (uint64_t)v21, type metadata accessor for WidgetTileInfo);
  v34 = *(int *)(v19 + 28);
  v35 = &v21[*(int *)(v19 + 24)];
  v37 = *(_QWORD *)v35;
  v36 = *((_QWORD *)v35 + 1);
  v38 = *(_QWORD *)&v21[v34];
  v39 = *(_QWORD *)&v21[v34 + 8];
  swift_bridgeObjectRetain(v39);
  swift_bridgeObjectRetain(v33);
  swift_bridgeObjectRetain(v36);
  v40 = DeviceDisplayNames.init(name:roomName:)(v37, v36, v38, v39);
  v41 = DeviceDisplayNames.displayName.getter(v40);
  v43 = v42;
  (*(void (**)(char *, uint64_t))(v104 + 8))(v18, v105);
  v44 = sub_100026C78((uint64_t)v21, type metadata accessor for WidgetTileInfo);
  v45 = static Font.caption2.getter(v44);
  sub_100017778();
  v47 = v33;
  v48 = v43;
  v50 = v106;
  v49 = v107;
  TileNameAndStatusView.init(roomName:name:statusString:font:tileStyle:isActivated:isInFlight:)(v32, v47, v41, v48, 0, 0, v45, 1, v109, v110, v46 & 1);
  v51 = v108;
  v52 = (void (*)(char *, _QWORD, uint64_t))v108[13];
  v52(v50, enum case for DynamicTypeSize.xSmall(_:), v9);
  v52(v49, enum case for DynamicTypeSize.xxxLarge(_:), v9);
  v53 = sub_100008C7C(&qword_1000A6000, (uint64_t (*)(uint64_t))&type metadata accessor for DynamicTypeSize, (uint64_t)&protocol conformance descriptor for DynamicTypeSize);
  result = dispatch thunk of static Comparable.<= infix(_:_:)(v50, v49, v9, v53);
  if ((result & 1) != 0)
  {
    v55 = v95;
    v56 = v90;
    v57 = &v90[*(int *)(v95 + 48)];
    v58 = (void (*)(char *, char *, uint64_t))v51[4];
    v58(v90, v50, v9);
    v58(v57, v49, v9);
    v59 = v98;
    v60 = &v98[*(int *)(v55 + 48)];
    v61 = (void (*)(char *, char *, uint64_t))v51[2];
    v61(v98, v56, v9);
    v61(v60, v57, v9);
    v62 = (uint64_t)v88;
    v58(v88, v59, v9);
    v63 = (void (*)(char *, uint64_t))v51[1];
    v63(v60, v9);
    v64 = &v59[*(int *)(v55 + 48)];
    v58(v59, v56, v9);
    v58(v64, v57, v9);
    v65 = v97;
    v58((char *)(v62 + *(int *)(v97 + 36)), v64, v9);
    v63(v59, v9);
    v66 = v94;
    sub_100052E04(v62, v94, &qword_1000A5F98);
    v67 = sub_100008C7C(&qword_1000A6868, type metadata accessor for TileNameAndStatusView, (uint64_t)&protocol conformance descriptor for TileNameAndStatusView);
    v68 = sub_1000229D8(&qword_1000A6038, &qword_1000A5F98, (uint64_t)&protocol conformance descriptor for ClosedRange<A>);
    v69 = v91;
    v70 = v67;
    v71 = v109;
    View.dynamicTypeSize<A>(_:)(v66, v86, v65, v70, v68);
    sub_100014EFC(v66, &qword_1000A5F98);
    sub_100026C78((uint64_t)v71, type metadata accessor for TileNameAndStatusView);
    KeyPath = swift_getKeyPath(&unk_100088EF0);
    v73 = (unsigned int *)&enum case for ColorScheme.light(_:);
    v75 = v100;
    v74 = v101;
    if ((v110 & 1) == 0)
      v73 = (unsigned int *)&enum case for ColorScheme.dark(_:);
    v76 = v102;
    (*(void (**)(char *, _QWORD, uint64_t))(v101 + 104))(v100, *v73, v102);
    v77 = (uint64_t)v89;
    v78 = (uint64_t *)&v89[*(int *)(v87 + 36)];
    v79 = sub_10000527C(&qword_1000A6870);
    (*(void (**)(char *, char *, uint64_t))(v74 + 16))((char *)v78 + *(int *)(v79 + 28), v75, v76);
    *v78 = KeyPath;
    v80 = v93;
    v81 = v96;
    (*(void (**)(uint64_t, char *, uint64_t))(v93 + 16))(v77, v69, v96);
    (*(void (**)(char *, uint64_t))(v74 + 8))(v75, v76);
    (*(void (**)(char *, uint64_t))(v80 + 8))(v69, v81);
    v82 = v92;
    sub_100052E04(v77, v92, &qword_1000A6860);
    v83 = v99;
    sub_100026CB4(v82, v99, &qword_1000A6860);
    v84 = v103;
    sub_100026CB4(v83, v103, &qword_1000A6860);
    v85 = v84 + *(int *)(sub_10000527C(&qword_1000A6878) + 48);
    *(_QWORD *)v85 = 0;
    *(_BYTE *)(v85 + 8) = 0;
    sub_100014EFC(v82, &qword_1000A6860);
    return sub_100014EFC(v83, &qword_1000A6860);
  }
  else
  {
    __break(1u);
  }
  return result;
}

unint64_t sub_100060810()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_1000A68E0;
  if (!qword_1000A68E0)
  {
    v1 = sub_1000052BC(&qword_1000A68D0);
    v2[0] = sub_1000052BC(&qword_1000A68E8);
    v2[1] = sub_1000608BC();
    swift_getOpaqueTypeConformance2(v2, &opaque type descriptor for <<opaque return type of View.monospacedDigit()>>, 1);
    sub_1000229D8(&qword_1000A6958, &qword_1000A6870, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000A68E0);
  }
  return result;
}

unint64_t sub_1000608BC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000A68F0;
  if (!qword_1000A68F0)
  {
    v1 = sub_1000052BC(&qword_1000A68E8);
    sub_100060940();
    sub_1000229D8(&qword_1000A6948, &qword_1000A6950, (uint64_t)&protocol conformance descriptor for _ForegroundStyleModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000A68F0);
  }
  return result;
}

unint64_t sub_100060940()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000A68F8;
  if (!qword_1000A68F8)
  {
    v1 = sub_1000052BC(&qword_1000A6900);
    sub_1000609C4();
    sub_1000229D8(&qword_1000A5FF0, &qword_1000A5FF8, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000A68F8);
  }
  return result;
}

unint64_t sub_1000609C4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000A6908;
  if (!qword_1000A6908)
  {
    v1 = sub_1000052BC(&qword_1000A6910);
    sub_100060A48();
    sub_1000229D8(&qword_1000A6938, &qword_1000A6940, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000A6908);
  }
  return result;
}

unint64_t sub_100060A48()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000A6918;
  if (!qword_1000A6918)
  {
    v1 = sub_1000052BC(&qword_1000A6920);
    sub_1000229D8(&qword_1000A6928, &qword_1000A6930, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000A6918);
  }
  return result;
}

uint64_t sub_100060AF4()
{
  return sub_100060B4C(&qword_1000A6998, &qword_1000A6820, (void (*)(void))sub_100060B28);
}

uint64_t sub_100060B28()
{
  return sub_100060B4C(&qword_1000A69A0, &qword_1000A6818, (void (*)(void))sub_100060BB4);
}

uint64_t sub_100060B4C(unint64_t *a1, uint64_t *a2, void (*a3)(void))
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    v6 = sub_1000052BC(a2);
    a3();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v6);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100060BB4()
{
  return sub_100060B4C(&qword_1000A69A8, &qword_1000A6810, (void (*)(void))sub_100060BD8);
}

uint64_t sub_100060BD8()
{
  return sub_100060B4C(&qword_1000A69B0, &qword_1000A6808, (void (*)(void))sub_100060BFC);
}

unint64_t sub_100060BFC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000A69B8;
  if (!qword_1000A69B8)
  {
    v1 = sub_1000052BC(&qword_1000A6800);
    sub_1000229D8(&qword_1000A69C0, &qword_1000A67F8, (uint64_t)&protocol conformance descriptor for VStack<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000A69B8);
  }
  return result;
}

uint64_t sub_100060C80()
{
  return EnvironmentValues.colorScheme.getter();
}

uint64_t sub_100060CA0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100060FBC(a1, a2, a3, a4, (uint64_t (*)(_QWORD))&type metadata accessor for ColorScheme, (uint64_t (*)(char *))&EnvironmentValues.colorScheme.setter);
}

uint64_t TileIconView.init(isActivated:iconSymbol:iconSymbolRenderingMode:iconSymbolActivatedRenderingMode:iconColor:imageContainerDimension:symbolFontSize:iconAlignment:)@<X0>(char a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, double a10@<D0>, double a11@<D1>)
{
  int *v20;
  _QWORD *v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void (*v29)(uint64_t, uint64_t, uint64_t);
  uint64_t v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  void (*v34)(uint64_t, uint64_t);
  uint64_t result;
  _QWORD *v36;

  *(_QWORD *)a9 = swift_getKeyPath(&unk_100089038);
  *(_BYTE *)(a9 + 8) = 0;
  v20 = (int *)type metadata accessor for TileIconView(0);
  v21 = (_QWORD *)(a9 + v20[5]);
  *v21 = swift_getKeyPath(&unk_100089060);
  v22 = sub_10000527C(&qword_1000A4FC0);
  swift_storeEnumTagMultiPayload(v21, v22, 0);
  v23 = (_QWORD *)(a9 + v20[6]);
  *v23 = swift_getKeyPath(&unk_100089090);
  v24 = sub_10000527C(&qword_1000A4FC8);
  swift_storeEnumTagMultiPayload(v23, v24, 0);
  *(_BYTE *)(a9 + v20[7]) = a1;
  v25 = (_QWORD *)(a9 + v20[8]);
  *v25 = a2;
  v25[1] = a3;
  v26 = a9 + v20[9];
  v27 = type metadata accessor for SymbolRenderingMode(0);
  v28 = *(_QWORD *)(v27 - 8);
  v29 = *(void (**)(uint64_t, uint64_t, uint64_t))(v28 + 16);
  v29(v26, a4, v27);
  v30 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v29)(a9 + v20[10], a5, v27);
  v31 = static Color.white.getter(v30);
  if ((a1 & 1) == 0)
    goto LABEL_4;
  v32 = static Color.== infix(_:_:)(a6, v31);
  v33 = swift_release(v31);
  if ((v32 & 1) != 0)
  {
    v31 = static Color.primary.getter(v33);
LABEL_4:
    swift_release(a6);
    a6 = v31;
  }
  v34 = *(void (**)(uint64_t, uint64_t))(v28 + 8);
  v34(a5, v27);
  result = ((uint64_t (*)(uint64_t, uint64_t))v34)(a4, v27);
  *(_QWORD *)(a9 + v20[11]) = a6;
  *(double *)(a9 + v20[12]) = a10;
  *(double *)(a9 + v20[13]) = a11;
  v36 = (_QWORD *)(a9 + v20[14]);
  *v36 = a7;
  v36[1] = a8;
  return result;
}

uint64_t sub_100060E84()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v0 = type metadata accessor for EnvironmentValues.ShowsWidgetBackgroundKey(0);
  v1 = sub_100063260();
  EnvironmentValues.subscript.getter(&v3, v0, v0, v1);
  return v3;
}

_QWORD *sub_100060ECC@<X0>(_BYTE *a1@<X8>)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD *result;
  uint64_t v5;

  v2 = type metadata accessor for EnvironmentValues.ShowsWidgetBackgroundKey(0);
  v3 = sub_100063260();
  result = EnvironmentValues.subscript.getter(&v5, v2, v2, v3);
  *a1 = v5;
  return result;
}

uint64_t type metadata accessor for TileIconView(uint64_t a1)
{
  uint64_t result;

  result = qword_1000A6A48;
  if (!qword_1000A6A48)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for TileIconView);
  return result;
}

uint64_t sub_100060F68()
{
  return EnvironmentValues.widgetRenderingMode.getter();
}

uint64_t sub_100060F88()
{
  return EnvironmentValues.widgetRenderingMode.getter();
}

uint64_t sub_100060FA8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100060FBC(a1, a2, a3, a4, (uint64_t (*)(_QWORD))&type metadata accessor for WidgetRenderingMode, (uint64_t (*)(char *))&EnvironmentValues.widgetRenderingMode.setter);
}

uint64_t sub_100060FBC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(_QWORD), uint64_t (*a6)(char *))
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v13;

  v8 = a5(0);
  __chkstk_darwin(v8);
  v10 = (char *)&v13 - v9;
  (*(void (**)(char *, uint64_t))(v11 + 16))((char *)&v13 - v9, a1);
  return a6(v10);
}

uint64_t sub_100061038(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100060FBC(a1, a2, a3, a4, (uint64_t (*)(_QWORD))&type metadata accessor for WidgetRenderingMode, (uint64_t (*)(char *))&EnvironmentValues.widgetRenderingMode.setter);
}

uint64_t sub_10006105C()
{
  return EnvironmentValues.colorScheme.getter();
}

uint64_t sub_10006107C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100060FBC(a1, a2, a3, a4, (uint64_t (*)(_QWORD))&type metadata accessor for ColorScheme, (uint64_t (*)(char *))&EnvironmentValues.colorScheme.setter);
}

uint64_t TileIconView.isActivated.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for TileIconView(0) + 28));
}

uint64_t TileIconView.iconSymbol.getter()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v1 = (uint64_t *)(v0 + *(int *)(type metadata accessor for TileIconView(0) + 32));
  v2 = *v1;
  swift_bridgeObjectRetain(v1[1]);
  return v2;
}

uint64_t TileIconView.iconSymbolRenderingMode.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for TileIconView(0) + 36);
  v4 = type metadata accessor for SymbolRenderingMode(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t TileIconView.iconSymbolActivatedRenderingMode.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for TileIconView(0) + 40);
  v4 = type metadata accessor for SymbolRenderingMode(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t TileIconView.iconColor.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = type metadata accessor for TileIconView(0);
  return swift_retain(*(_QWORD *)(v0 + *(int *)(v1 + 44)));
}

uint64_t TileIconView.iconColor.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t result;

  v3 = *(int *)(type metadata accessor for TileIconView(0) + 44);
  result = swift_release(*(_QWORD *)(v1 + v3));
  *(_QWORD *)(v1 + v3) = a1;
  return result;
}

double (*TileIconView.iconColor.modify())(_QWORD, double, double)
{
  type metadata accessor for TileIconView(0);
  return nullsub_1;
}

double TileIconView.imageContainerDimension.getter()
{
  uint64_t v0;

  return *(double *)(v0 + *(int *)(type metadata accessor for TileIconView(0) + 48));
}

double TileIconView.symbolFontSize.getter()
{
  uint64_t v0;

  return *(double *)(v0 + *(int *)(type metadata accessor for TileIconView(0) + 52));
}

uint64_t TileIconView.iconAlignment.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + *(int *)(type metadata accessor for TileIconView(0) + 56));
}

uint64_t TileIconView.iconAlignment.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;
  _QWORD *v6;

  result = type metadata accessor for TileIconView(0);
  v6 = (_QWORD *)(v2 + *(int *)(result + 56));
  *v6 = a1;
  v6[1] = a2;
  return result;
}

double (*TileIconView.iconAlignment.modify())(_QWORD, double, double)
{
  type metadata accessor for TileIconView(0);
  return nullsub_1;
}

uint64_t sub_1000612D8@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  char v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  void (*v23)(char *, uint64_t);
  unsigned int *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v3 = type metadata accessor for WidgetRenderingMode(0);
  v4 = *(_QWORD *)(v3 - 8);
  v5 = __chkstk_darwin(v3);
  v7 = (char *)&v27 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v9 = (char *)&v27 - v8;
  v10 = type metadata accessor for TileIconView(0);
  v11 = __chkstk_darwin(v10);
  v13 = (char *)&v27 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((*(_BYTE *)(v1 + *(int *)(v11 + 28)) & 1) == 0)
  {
    v14 = enum case for BlendMode.normal(_:);
    v15 = type metadata accessor for BlendMode(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 104))(a1, v14, v15);
  }
  v28 = a1;
  v17 = *(_QWORD *)v1;
  v18 = *(_BYTE *)(v1 + 8);
  sub_100035568(*(_QWORD *)v1, v18);
  v19 = sub_100061B38(v17, v18);
  sub_10003561C(v17, v18);
  sub_100026C34(v1, (uint64_t)v13, type metadata accessor for TileIconView);
  if ((v19 & 1) != 0)
  {
    sub_100026C78((uint64_t)v13, type metadata accessor for TileIconView);
    v20 = v28;
  }
  else
  {
    v21 = sub_100061F24(&qword_1000A4FC0, (uint64_t (*)(_QWORD))&type metadata accessor for WidgetRenderingMode, 0xD000000000000013, 0x800000010008B3C0, (uint64_t)v9);
    static WidgetRenderingMode.fullColor.getter(v21);
    v22 = static WidgetRenderingMode.== infix(_:_:)(v9, v7);
    v23 = *(void (**)(char *, uint64_t))(v4 + 8);
    v23(v7, v3);
    v23(v9, v3);
    sub_100026C78((uint64_t)v13, type metadata accessor for TileIconView);
    v20 = v28;
    if ((v22 & 1) == 0)
    {
      v24 = (unsigned int *)&enum case for BlendMode.difference(_:);
      goto LABEL_8;
    }
  }
  v24 = (unsigned int *)&enum case for BlendMode.normal(_:);
LABEL_8:
  v25 = *v24;
  v26 = type metadata accessor for BlendMode(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 104))(v20, v25, v26);
}

uint64_t TileIconView.body.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int *v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  __n128 v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  char v37;
  void (*v38)(char *, uint64_t);
  double v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  double v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t KeyPath;
  uint64_t v49;
  uint64_t *v50;
  uint64_t v51;
  _OWORD *v52;
  __int128 v53;
  uint64_t v54;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  uint64_t v70;
  char *v71;
  uint64_t v72;
  _OWORD v73[3];

  v2 = v1;
  v72 = a1;
  v3 = sub_10000527C(&qword_1000A5FB0);
  __chkstk_darwin(v3);
  v71 = (char *)&v56 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for _BlendModeEffect(0);
  __chkstk_darwin(v5);
  v69 = (char *)&v56 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for BlendMode(0);
  v67 = *(_QWORD *)(v7 - 8);
  v68 = v7;
  __chkstk_darwin(v7);
  v60 = (uint64_t)&v56 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v59 = type metadata accessor for ColorScheme(0);
  v58 = *(_QWORD *)(v59 - 8);
  v9 = __chkstk_darwin(v59);
  v57 = (char *)&v56 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v12 = (char *)&v56 - v11;
  v13 = sub_10000527C(&qword_1000A69C8);
  __chkstk_darwin(v13);
  v15 = (char *)&v56 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v61 = sub_10000527C(&qword_1000A69D0);
  __chkstk_darwin(v61);
  v17 = (char *)&v56 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v62 = sub_10000527C(&qword_1000A69D8);
  __chkstk_darwin(v62);
  v70 = (uint64_t)&v56 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v65 = sub_10000527C(&qword_1000A69E0);
  __chkstk_darwin(v65);
  v63 = (uint64_t)&v56 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v66 = sub_10000527C(&qword_1000A69E8);
  __chkstk_darwin(v66);
  v64 = (uint64_t)&v56 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = (int *)type metadata accessor for TileIconView(0);
  v22 = (uint64_t *)(v2 + v21[8]);
  v23 = *v22;
  v24 = v22[1];
  v25 = swift_bridgeObjectRetain(v24);
  v26 = Image.init(_internalSystemName:)(v23, v24, v25);
  v27 = v21[7];
  v28 = *(_BYTE *)(v2 + v27);
  v29 = type metadata accessor for SymbolRenderingMode(0);
  v30 = *(_QWORD *)(v29 - 8);
  v31 = 10;
  if ((v28 & 1) == 0)
    v31 = 9;
  (*(void (**)(char *, uint64_t, uint64_t))(v30 + 16))(v15, v2 + v21[v31], v29);
  type metadata accessor for SymbolRenderingMode(0);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v30 + 56))(v15, 0, 1, v29);
  v32 = Image.symbolRenderingMode(_:)(v15, v26);
  swift_release(v26);
  sub_100014EFC((uint64_t)v15, &qword_1000A69C8);
  v33 = *(_QWORD *)(v2 + v21[11]);
  if ((*(_BYTE *)(v2 + v27) & 1) != 0)
  {
    swift_retain(*(_QWORD *)(v2 + v21[11]));
    v39 = 1.0;
  }
  else
  {
    swift_retain(*(_QWORD *)(v2 + v21[11]));
    sub_100061F24(&qword_1000A4FC8, (uint64_t (*)(_QWORD))&type metadata accessor for ColorScheme, 0x686353726F6C6F43, 0xEB00000000656D65, (uint64_t)v12);
    v34 = v58;
    v35 = v57;
    v36 = v59;
    (*(void (**)(char *, _QWORD, uint64_t))(v58 + 104))(v57, enum case for ColorScheme.light(_:), v59);
    v37 = static ColorScheme.== infix(_:_:)(v12, v35);
    v38 = *(void (**)(char *, uint64_t))(v34 + 8);
    v38(v35, v36);
    v38(v12, v36);
    if ((v37 & 1) != 0)
      v39 = 0.7;
    else
      v39 = 0.5;
  }
  v40 = v60;
  sub_1000612D8(v60);
  v42 = v67;
  v41 = v68;
  v43 = (uint64_t)v69;
  (*(void (**)(char *, uint64_t, uint64_t))(v67 + 16))(v69, v40, v68);
  sub_100026C34(v43, (uint64_t)&v17[*(int *)(v61 + 36)], (uint64_t (*)(_QWORD))&type metadata accessor for _BlendModeEffect);
  *(_QWORD *)v17 = v32;
  *((_QWORD *)v17 + 1) = v33;
  *((double *)v17 + 2) = v39;
  swift_retain(v33);
  swift_retain(v32);
  sub_100026C78(v43, (uint64_t (*)(_QWORD))&type metadata accessor for _BlendModeEffect);
  (*(void (**)(uint64_t, uint64_t))(v42 + 8))(v40, v41);
  swift_release(v33);
  swift_release(v32);
  v44 = *(double *)(v2 + v21[13]);
  v45 = type metadata accessor for Font.Design(0);
  v46 = (uint64_t)v71;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v45 - 8) + 56))(v71, 1, 1, v45);
  v47 = static Font.system(size:weight:design:)(0, 1, v46, v44);
  sub_100014EFC(v46, &qword_1000A5FB0);
  KeyPath = swift_getKeyPath(&unk_1000890C0);
  v49 = v70;
  sub_100026CB4((uint64_t)v17, v70, &qword_1000A69D0);
  v50 = (uint64_t *)(v49 + *(int *)(v62 + 36));
  *v50 = KeyPath;
  v50[1] = v47;
  sub_100014EFC((uint64_t)v17, &qword_1000A69D0);
  _FrameLayout.init(width:height:alignment:)(v73, *(_QWORD *)(v2 + v21[12]), 0, *(_QWORD *)(v2 + v21[12]), 0, *(_QWORD *)(v2 + v21[14]), *(_QWORD *)(v2 + v21[14] + 8));
  v51 = v63;
  sub_100026CB4(v49, v63, &qword_1000A69D8);
  v52 = (_OWORD *)(v51 + *(int *)(v65 + 36));
  v53 = v73[1];
  *v52 = v73[0];
  v52[1] = v53;
  v52[2] = v73[2];
  sub_100014EFC(v49, &qword_1000A69D8);
  v54 = v64;
  sub_100026CB4(v51, v64, &qword_1000A69E0);
  *(_WORD *)(v54 + *(int *)(v66 + 36)) = 257;
  sub_100014EFC(v51, &qword_1000A69E0);
  return sub_100062254(v54, v72);
}

uint64_t sub_100061B38(uint64_t a1, char a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  os_log_type_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint8_t *v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;

  v4 = type metadata accessor for EnvironmentValues(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((a2 & 1) != 0)
    return a1 & 1;
  v8 = swift_retain(a1);
  v9 = static os_log_type_t.fault.getter(v8);
  v10 = static Log.runtimeIssuesLog.getter();
  v11 = v9;
  if (os_log_type_enabled(v10, v9))
  {
    v12 = (uint8_t *)swift_slowAlloc(12, -1);
    v13 = swift_slowAlloc(32, -1);
    v16 = v13;
    *(_DWORD *)v12 = 136315138;
    v15 = sub_100023980(1819242306, 0xE400000000000000, &v16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v15, &v16, v12 + 4, v12 + 12);
    _os_log_impl((void *)&_mh_execute_header, v10, v11, "Accessing Environment<%s>'s value outside of being installed on a View. This will always read the default value and will not update.", v12, 0xCu);
    swift_arrayDestroy(v13, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v13, -1, -1);
    swift_slowDealloc(v12, -1, -1);
  }

  EnvironmentValues.init()();
  swift_getAtKeyPath(v7, a1);
  sub_10003561C(a1, 0);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  return v16;
}

double sub_100061CF0()
{
  _BYTE *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v7;
  os_log_type_t v8;
  NSObject *v9;
  os_log_type_t v10;
  uint8_t *v11;
  uint64_t v12;
  uint8_t *v13;
  uint64_t v14;
  double v15;

  v1 = type metadata accessor for EnvironmentValues(0);
  v2 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  v4 = (char *)&v13 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = *(_QWORD *)v0;
  if (v0[32] == 1)
    return *(double *)v0;
  v7 = swift_retain(*(_QWORD *)v0);
  v8 = static os_log_type_t.fault.getter(v7);
  v9 = static Log.runtimeIssuesLog.getter();
  v10 = v8;
  if (os_log_type_enabled(v9, v8))
  {
    v11 = (uint8_t *)swift_slowAlloc(12, -1);
    v12 = swift_slowAlloc(32, -1);
    v15 = *(double *)&v12;
    *(_DWORD *)v11 = 136315138;
    v13 = v11 + 4;
    v14 = sub_100023980(0x65736E4965676445, 0xEA00000000007374, (uint64_t *)&v15);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v14, &v15, v13, v11 + 12);
    _os_log_impl((void *)&_mh_execute_header, v9, v10, "Accessing Environment<%s>'s value outside of being installed on a View. This will always read the default value and will not update.", v11, 0xCu);
    swift_arrayDestroy(v12, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v12, -1, -1);
    swift_slowDealloc(v11, -1, -1);
  }

  EnvironmentValues.init()();
  swift_getAtKeyPath(v4, v5);
  sub_10006322C((uint64_t)v0);
  (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  return v15;
}

uint64_t sub_100061EC4@<X0>(uint64_t a1@<X8>)
{
  return sub_100061F24(&qword_1000A5C00, (uint64_t (*)(_QWORD))&type metadata accessor for WidgetFamily, 0x6146746567646957, 0xEC000000796C696DLL, a1);
}

uint64_t sub_100061EF4@<X0>(uint64_t a1@<X8>)
{
  return sub_100061F24(&qword_1000A4FC8, (uint64_t (*)(_QWORD))&type metadata accessor for ColorScheme, 0x686353726F6C6F43, 0xEB00000000656D65, a1);
}

uint64_t sub_100061F24@<X0>(uint64_t *a1@<X0>, uint64_t (*a2)(_QWORD)@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v5;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v20;
  os_log_type_t v21;
  NSObject *v22;
  uint64_t v23;
  uint8_t *v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v29 = a3;
  v9 = v5;
  v11 = type metadata accessor for EnvironmentValues(0);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v14 = (char *)&v26 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = sub_10000527C(a1);
  __chkstk_darwin(v15);
  v17 = (uint64_t *)((char *)&v26 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_100026CB4(v9, (uint64_t)v17, a1);
  if (swift_getEnumCaseMultiPayload(v17, v15) == 1)
  {
    v18 = a2(0);
    return (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t))(*(_QWORD *)(v18 - 8) + 32))(a5, v17, v18);
  }
  else
  {
    v20 = *v17;
    v21 = static os_log_type_t.fault.getter();
    v22 = static Log.runtimeIssuesLog.getter();
    if (os_log_type_enabled(v22, v21))
    {
      v27 = a4;
      v23 = swift_slowAlloc(12, -1);
      v28 = a5;
      v24 = (uint8_t *)v23;
      v25 = swift_slowAlloc(32, -1);
      v31 = v25;
      *(_DWORD *)v24 = 136315138;
      v30 = sub_100023980(v29, v27, &v31);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v30, &v31, v24 + 4, v24 + 12);
      _os_log_impl((void *)&_mh_execute_header, v22, v21, "Accessing Environment<%s>'s value outside of being installed on a View. This will always read the default value and will not update.", v24, 0xCu);
      swift_arrayDestroy(v25, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v25, -1, -1);
      swift_slowDealloc(v24, -1, -1);
    }

    EnvironmentValues.init()();
    swift_getAtKeyPath(v14, v20);
    swift_release(v20);
    return (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v14, v11);
  }
}

uint64_t sub_10006215C@<X0>(uint64_t a1@<X8>)
{
  return sub_100061F24(&qword_1000A4FC0, (uint64_t (*)(_QWORD))&type metadata accessor for WidgetRenderingMode, 0xD000000000000013, 0x800000010008B3C0, a1);
}

uint64_t sub_100062188@<X0>(uint64_t a1@<X8>)
{
  return sub_100061F24(&qword_1000A4FD0, (uint64_t (*)(_QWORD))&type metadata accessor for ContentSizeCategory, 0xD000000000000013, 0x800000010008B3E0, a1);
}

uint64_t sub_1000621B4@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = EnvironmentValues.font.getter();
  *a1 = result;
  return result;
}

uint64_t sub_1000621DC@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = EnvironmentValues.font.getter();
  *a1 = result;
  return result;
}

uint64_t sub_100062204(_QWORD *a1)
{
  uint64_t v1;

  v1 = swift_retain(*a1);
  return EnvironmentValues.font.setter(v1);
}

uint64_t sub_10006222C(_QWORD *a1)
{
  uint64_t v1;

  v1 = swift_retain(*a1);
  return EnvironmentValues.font.setter(v1);
}

uint64_t sub_100062254(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10000527C(&qword_1000A69E8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_10006229C(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &opaque type descriptor for <<opaque return type of TileIconView.body>>, 1);
}

unint64_t initializeBufferWithCopyOfBuffer for TileIconView(unint64_t a1, uint64_t a2, int *a3)
{
  int v5;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void (*v32)(uint64_t, uint64_t, uint64_t, __n128);
  __n128 v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v15 = *(_QWORD *)a2;
    *(_QWORD *)a1 = *(_QWORD *)a2;
    a1 = v15 + ((v5 + 16) & ~(unint64_t)v5);
  }
  else
  {
    v7 = *(_QWORD *)a2;
    v8 = *(_BYTE *)(a2 + 8);
    sub_100035568(*(_QWORD *)a2, v8);
    *(_QWORD *)a1 = v7;
    *(_BYTE *)(a1 + 8) = v8;
    v9 = a3[5];
    v10 = (uint64_t *)(a1 + v9);
    v11 = (uint64_t *)(a2 + v9);
    v12 = sub_10000527C(&qword_1000A4FC0);
    if (swift_getEnumCaseMultiPayload(v11, v12) == 1)
    {
      v13 = type metadata accessor for WidgetRenderingMode(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v13 - 8) + 16))(v10, v11, v13);
      v14 = 1;
    }
    else
    {
      v16 = *v11;
      *v10 = *v11;
      swift_retain(v16);
      v14 = 0;
    }
    swift_storeEnumTagMultiPayload(v10, v12, v14);
    v17 = a3[6];
    v18 = (uint64_t *)(a1 + v17);
    v19 = (uint64_t *)(a2 + v17);
    v20 = sub_10000527C(&qword_1000A4FC8);
    if (swift_getEnumCaseMultiPayload(v19, v20) == 1)
    {
      v21 = type metadata accessor for ColorScheme(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v21 - 8) + 16))(v18, v19, v21);
      v22 = 1;
    }
    else
    {
      v23 = *v19;
      *v18 = *v19;
      swift_retain(v23);
      v22 = 0;
    }
    swift_storeEnumTagMultiPayload(v18, v20, v22);
    v24 = a3[8];
    *(_BYTE *)(a1 + a3[7]) = *(_BYTE *)(a2 + a3[7]);
    v25 = (_QWORD *)(a1 + v24);
    v26 = (_QWORD *)(a2 + v24);
    v27 = v26[1];
    *v25 = *v26;
    v25[1] = v27;
    v28 = a3[9];
    v29 = a1 + v28;
    v30 = a2 + v28;
    v31 = type metadata accessor for SymbolRenderingMode(0);
    v32 = *(void (**)(uint64_t, uint64_t, uint64_t, __n128))(*(_QWORD *)(v31 - 8) + 16);
    v33 = swift_bridgeObjectRetain(v27);
    v32(v29, v30, v31, v33);
    ((void (*)(unint64_t, uint64_t, uint64_t))v32)(a1 + a3[10], a2 + a3[10], v31);
    v34 = a3[11];
    v35 = a3[12];
    v15 = *(_QWORD *)(a2 + v34);
    *(_QWORD *)(a1 + v34) = v15;
    *(_QWORD *)(a1 + v35) = *(_QWORD *)(a2 + v35);
    v36 = a3[14];
    *(_QWORD *)(a1 + a3[13]) = *(_QWORD *)(a2 + a3[13]);
    *(_OWORD *)(a1 + v36) = *(_OWORD *)(a2 + v36);
  }
  swift_retain(v15);
  return a1;
}

uint64_t destroy for TileIconView(uint64_t a1, int *a2)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t, uint64_t);

  sub_10003561C(*(_QWORD *)a1, *(_BYTE *)(a1 + 8));
  v4 = (_QWORD *)(a1 + a2[5]);
  v5 = sub_10000527C(&qword_1000A4FC0);
  if (swift_getEnumCaseMultiPayload(v4, v5) == 1)
  {
    v6 = type metadata accessor for WidgetRenderingMode(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v4, v6);
  }
  else
  {
    swift_release(*v4);
  }
  v7 = (_QWORD *)(a1 + a2[6]);
  v8 = sub_10000527C(&qword_1000A4FC8);
  if (swift_getEnumCaseMultiPayload(v7, v8) == 1)
  {
    v9 = type metadata accessor for ColorScheme(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v9 - 8) + 8))(v7, v9);
  }
  else
  {
    swift_release(*v7);
  }
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + a2[8] + 8));
  v10 = a1 + a2[9];
  v11 = type metadata accessor for SymbolRenderingMode(0);
  v12 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 8);
  v12(v10, v11);
  v12(a1 + a2[10], v11);
  return swift_release(*(_QWORD *)(a1 + a2[11]));
}

uint64_t initializeWithCopy for TileIconView(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void (*v30)(uint64_t, uint64_t, uint64_t, __n128);
  __n128 v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  v6 = *(_QWORD *)a2;
  v7 = *(_BYTE *)(a2 + 8);
  sub_100035568(*(_QWORD *)a2, v7);
  *(_QWORD *)a1 = v6;
  *(_BYTE *)(a1 + 8) = v7;
  v8 = a3[5];
  v9 = (uint64_t *)(a1 + v8);
  v10 = (uint64_t *)(a2 + v8);
  v11 = sub_10000527C(&qword_1000A4FC0);
  if (swift_getEnumCaseMultiPayload(v10, v11) == 1)
  {
    v12 = type metadata accessor for WidgetRenderingMode(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v12 - 8) + 16))(v9, v10, v12);
    v13 = 1;
  }
  else
  {
    v14 = *v10;
    *v9 = *v10;
    swift_retain(v14);
    v13 = 0;
  }
  swift_storeEnumTagMultiPayload(v9, v11, v13);
  v15 = a3[6];
  v16 = (uint64_t *)(a1 + v15);
  v17 = (uint64_t *)(a2 + v15);
  v18 = sub_10000527C(&qword_1000A4FC8);
  if (swift_getEnumCaseMultiPayload(v17, v18) == 1)
  {
    v19 = type metadata accessor for ColorScheme(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v19 - 8) + 16))(v16, v17, v19);
    v20 = 1;
  }
  else
  {
    v21 = *v17;
    *v16 = *v17;
    swift_retain(v21);
    v20 = 0;
  }
  swift_storeEnumTagMultiPayload(v16, v18, v20);
  v22 = a3[8];
  *(_BYTE *)(a1 + a3[7]) = *(_BYTE *)(a2 + a3[7]);
  v23 = (_QWORD *)(a1 + v22);
  v24 = (_QWORD *)(a2 + v22);
  v25 = v24[1];
  *v23 = *v24;
  v23[1] = v25;
  v26 = a3[9];
  v27 = a1 + v26;
  v28 = a2 + v26;
  v29 = type metadata accessor for SymbolRenderingMode(0);
  v30 = *(void (**)(uint64_t, uint64_t, uint64_t, __n128))(*(_QWORD *)(v29 - 8) + 16);
  v31 = swift_bridgeObjectRetain(v25);
  v30(v27, v28, v29, v31);
  ((void (*)(uint64_t, uint64_t, uint64_t))v30)(a1 + a3[10], a2 + a3[10], v29);
  v32 = a3[11];
  v33 = a3[12];
  v34 = *(_QWORD *)(a2 + v32);
  *(_QWORD *)(a1 + v32) = v34;
  *(_QWORD *)(a1 + v33) = *(_QWORD *)(a2 + v33);
  v35 = a3[14];
  *(_QWORD *)(a1 + a3[13]) = *(_QWORD *)(a2 + a3[13]);
  *(_OWORD *)(a1 + v35) = *(_OWORD *)(a2 + v35);
  swift_retain(v34);
  return a1;
}

uint64_t assignWithCopy for TileIconView(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  char v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void (*v33)(uint64_t, uint64_t, uint64_t);
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  _QWORD *v39;

  v6 = *(_QWORD *)a2;
  v7 = *(_BYTE *)(a2 + 8);
  sub_100035568(*(_QWORD *)a2, v7);
  v8 = *(_QWORD *)a1;
  v9 = *(_BYTE *)(a1 + 8);
  *(_QWORD *)a1 = v6;
  *(_BYTE *)(a1 + 8) = v7;
  sub_10003561C(v8, v9);
  if (a1 != a2)
  {
    v10 = a3[5];
    v11 = (uint64_t *)(a1 + v10);
    v12 = (uint64_t *)(a2 + v10);
    sub_100014EFC(a1 + v10, &qword_1000A4FC0);
    v13 = sub_10000527C(&qword_1000A4FC0);
    if (swift_getEnumCaseMultiPayload(v12, v13) == 1)
    {
      v14 = type metadata accessor for WidgetRenderingMode(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v14 - 8) + 16))(v11, v12, v14);
      v15 = 1;
    }
    else
    {
      v16 = *v12;
      *v11 = *v12;
      swift_retain(v16);
      v15 = 0;
    }
    swift_storeEnumTagMultiPayload(v11, v13, v15);
    v17 = a3[6];
    v18 = (uint64_t *)(a1 + v17);
    v19 = (uint64_t *)(a2 + v17);
    sub_100014EFC(a1 + v17, &qword_1000A4FC8);
    v20 = sub_10000527C(&qword_1000A4FC8);
    if (swift_getEnumCaseMultiPayload(v19, v20) == 1)
    {
      v21 = type metadata accessor for ColorScheme(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v21 - 8) + 16))(v18, v19, v21);
      v22 = 1;
    }
    else
    {
      v23 = *v19;
      *v18 = *v19;
      swift_retain(v23);
      v22 = 0;
    }
    swift_storeEnumTagMultiPayload(v18, v20, v22);
  }
  *(_BYTE *)(a1 + a3[7]) = *(_BYTE *)(a2 + a3[7]);
  v24 = a3[8];
  v25 = (_QWORD *)(a1 + v24);
  v26 = (_QWORD *)(a2 + v24);
  *v25 = *v26;
  v27 = v26[1];
  v28 = v25[1];
  v25[1] = v27;
  swift_bridgeObjectRetain(v27);
  swift_bridgeObjectRelease(v28);
  v29 = a3[9];
  v30 = a1 + v29;
  v31 = a2 + v29;
  v32 = type metadata accessor for SymbolRenderingMode(0);
  v33 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v32 - 8) + 24);
  v33(v30, v31, v32);
  v33(a1 + a3[10], a2 + a3[10], v32);
  v34 = a3[11];
  v35 = *(_QWORD *)(a2 + v34);
  v36 = *(_QWORD *)(a1 + v34);
  *(_QWORD *)(a1 + v34) = v35;
  swift_retain(v35);
  swift_release(v36);
  *(_QWORD *)(a1 + a3[12]) = *(_QWORD *)(a2 + a3[12]);
  *(_QWORD *)(a1 + a3[13]) = *(_QWORD *)(a2 + a3[13]);
  v37 = a3[14];
  v38 = (_QWORD *)(a1 + v37);
  v39 = (_QWORD *)(a2 + v37);
  *v38 = *v39;
  v38[1] = v39[1];
  return a1;
}

uint64_t initializeWithTake for TileIconView(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void *v7;
  const void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  const void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void (*v21)(uint64_t, uint64_t, uint64_t);
  uint64_t v22;
  uint64_t v23;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  v6 = a3[5];
  v7 = (void *)(a1 + v6);
  v8 = (const void *)(a2 + v6);
  v9 = sub_10000527C(&qword_1000A4FC0);
  if (swift_getEnumCaseMultiPayload(v8, v9) == 1)
  {
    v10 = type metadata accessor for WidgetRenderingMode(0);
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v7, v8, v10);
    swift_storeEnumTagMultiPayload(v7, v9, 1);
  }
  else
  {
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
  }
  v11 = a3[6];
  v12 = (void *)(a1 + v11);
  v13 = (const void *)(a2 + v11);
  v14 = sub_10000527C(&qword_1000A4FC8);
  if (swift_getEnumCaseMultiPayload(v13, v14) == 1)
  {
    v15 = type metadata accessor for ColorScheme(0);
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v15 - 8) + 32))(v12, v13, v15);
    swift_storeEnumTagMultiPayload(v12, v14, 1);
  }
  else
  {
    memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
  }
  v16 = a3[8];
  *(_BYTE *)(a1 + a3[7]) = *(_BYTE *)(a2 + a3[7]);
  *(_OWORD *)(a1 + v16) = *(_OWORD *)(a2 + v16);
  v17 = a3[9];
  v18 = a1 + v17;
  v19 = a2 + v17;
  v20 = type metadata accessor for SymbolRenderingMode(0);
  v21 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 32);
  v21(v18, v19, v20);
  v21(a1 + a3[10], a2 + a3[10], v20);
  v22 = a3[12];
  *(_QWORD *)(a1 + a3[11]) = *(_QWORD *)(a2 + a3[11]);
  *(_QWORD *)(a1 + v22) = *(_QWORD *)(a2 + v22);
  v23 = a3[14];
  *(_QWORD *)(a1 + a3[13]) = *(_QWORD *)(a2 + a3[13]);
  *(_OWORD *)(a1 + v23) = *(_OWORD *)(a2 + v23);
  return a1;
}

uint64_t assignWithTake for TileIconView(uint64_t a1, uint64_t *a2, int *a3)
{
  uint64_t v6;
  char v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  void *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void (*v30)(uint64_t, uint64_t, uint64_t);
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  v6 = *a2;
  v7 = *((_BYTE *)a2 + 8);
  v8 = *(_QWORD *)a1;
  v9 = *(_BYTE *)(a1 + 8);
  *(_QWORD *)a1 = v6;
  *(_BYTE *)(a1 + 8) = v7;
  sub_10003561C(v8, v9);
  if ((uint64_t *)a1 != a2)
  {
    v10 = a3[5];
    v11 = (void *)(a1 + v10);
    v12 = (char *)a2 + v10;
    sub_100014EFC(a1 + v10, &qword_1000A4FC0);
    v13 = sub_10000527C(&qword_1000A4FC0);
    if (swift_getEnumCaseMultiPayload(v12, v13) == 1)
    {
      v14 = type metadata accessor for WidgetRenderingMode(0);
      (*(void (**)(void *, char *, uint64_t))(*(_QWORD *)(v14 - 8) + 32))(v11, v12, v14);
      swift_storeEnumTagMultiPayload(v11, v13, 1);
    }
    else
    {
      memcpy(v11, v12, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
    }
    v15 = a3[6];
    v16 = (void *)(a1 + v15);
    v17 = (char *)a2 + v15;
    sub_100014EFC(a1 + v15, &qword_1000A4FC8);
    v18 = sub_10000527C(&qword_1000A4FC8);
    if (swift_getEnumCaseMultiPayload(v17, v18) == 1)
    {
      v19 = type metadata accessor for ColorScheme(0);
      (*(void (**)(void *, char *, uint64_t))(*(_QWORD *)(v19 - 8) + 32))(v16, v17, v19);
      swift_storeEnumTagMultiPayload(v16, v18, 1);
    }
    else
    {
      memcpy(v16, v17, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
    }
  }
  v20 = a3[8];
  *(_BYTE *)(a1 + a3[7]) = *((_BYTE *)a2 + a3[7]);
  v21 = (_QWORD *)(a1 + v20);
  v22 = (uint64_t *)((char *)a2 + v20);
  v24 = *v22;
  v23 = v22[1];
  v25 = v21[1];
  *v21 = v24;
  v21[1] = v23;
  swift_bridgeObjectRelease(v25);
  v26 = a3[9];
  v27 = a1 + v26;
  v28 = (uint64_t)a2 + v26;
  v29 = type metadata accessor for SymbolRenderingMode(0);
  v30 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v29 - 8) + 40);
  v30(v27, v28, v29);
  v30(a1 + a3[10], (uint64_t)a2 + a3[10], v29);
  v31 = a3[11];
  v32 = *(_QWORD *)(a1 + v31);
  *(_QWORD *)(a1 + v31) = *(uint64_t *)((char *)a2 + v31);
  swift_release(v32);
  v33 = a3[13];
  *(_QWORD *)(a1 + a3[12]) = *(uint64_t *)((char *)a2 + a3[12]);
  *(_QWORD *)(a1 + v33) = *(uint64_t *)((char *)a2 + v33);
  *(_OWORD *)(a1 + a3[14]) = *(_OWORD *)((char *)a2 + a3[14]);
  return a1;
}

uint64_t getEnumTagSinglePayload for TileIconView(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100062DD0);
}

uint64_t sub_100062DD0(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;

  v6 = sub_10000527C(&qword_1000A5E88);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = a3[5];
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1 + v9, a2, v8);
  }
  v10 = sub_10000527C(&qword_1000A5CD8);
  v7 = *(_QWORD *)(v10 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v10;
    v9 = a3[6];
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1 + v9, a2, v8);
  }
  if ((_DWORD)a2 != 0x7FFFFFFF)
  {
    v8 = type metadata accessor for SymbolRenderingMode(0);
    v7 = *(_QWORD *)(v8 - 8);
    v9 = a3[9];
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1 + v9, a2, v8);
  }
  v11 = *(_QWORD *)(a1 + a3[8] + 8);
  if (v11 >= 0xFFFFFFFF)
    LODWORD(v11) = -1;
  return (v11 + 1);
}

uint64_t storeEnumTagSinglePayload for TileIconView(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100062EB0);
}

uint64_t sub_100062EB0(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;

  v8 = sub_10000527C(&qword_1000A5E88);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = a4[5];
  }
  else
  {
    result = sub_10000527C(&qword_1000A5CD8);
    v9 = *(_QWORD *)(result - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      v10 = result;
      v11 = a4[6];
    }
    else
    {
      if (a3 == 0x7FFFFFFF)
      {
        *(_QWORD *)(a1 + a4[8] + 8) = (a2 - 1);
        return result;
      }
      v10 = type metadata accessor for SymbolRenderingMode(0);
      v9 = *(_QWORD *)(v10 - 8);
      v11 = a4[9];
    }
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1 + v11, a2, a2, v10);
}

void sub_100062F80(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  _QWORD v8[5];
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  char *v13;
  void *v14;

  v8[0] = "\t";
  sub_100048D10(319, (unint64_t *)&qword_1000A5F00, (uint64_t (*)(uint64_t))&type metadata accessor for WidgetRenderingMode);
  if (v3 <= 0x3F)
  {
    v8[1] = *(_QWORD *)(v2 - 8) + 64;
    sub_100048D10(319, &qword_1000A5EF8, (uint64_t (*)(uint64_t))&type metadata accessor for ColorScheme);
    if (v5 <= 0x3F)
    {
      v8[2] = *(_QWORD *)(v4 - 8) + 64;
      v8[3] = &unk_100089170;
      v8[4] = &unk_100089188;
      v6 = type metadata accessor for SymbolRenderingMode(319);
      if (v7 <= 0x3F)
      {
        v9 = *(_QWORD *)(v6 - 8) + 64;
        v10 = v9;
        v11 = (char *)&value witness table for Builtin.NativeObject + 64;
        v12 = (char *)&value witness table for Builtin.Int64 + 64;
        v13 = (char *)&value witness table for Builtin.Int64 + 64;
        v14 = &unk_1000891A0;
        swift_initStructMetadata(a1, 256, 11, v8, a1 + 16);
      }
    }
  }
}

uint64_t sub_100063088()
{
  return sub_100060B4C(&qword_1000A6AA8, &qword_1000A69E8, (void (*)(void))sub_1000630BC);
}

uint64_t sub_1000630BC()
{
  return sub_100060B4C(&qword_1000A6AB0, &qword_1000A69E0, (void (*)(void))sub_1000630E0);
}

unint64_t sub_1000630E0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000A6AB8;
  if (!qword_1000A6AB8)
  {
    v1 = sub_1000052BC(&qword_1000A69D8);
    sub_100060B4C(&qword_1000A6AC0, &qword_1000A69D0, (void (*)(void))sub_100063184);
    sub_1000229D8(&qword_1000A5FF0, &qword_1000A5FF8, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000A6AB8);
  }
  return result;
}

uint64_t sub_100063184()
{
  return sub_100060B4C(&qword_1000A6AC8, &qword_1000A6AD0, (void (*)(void))sub_1000631A8);
}

unint64_t sub_1000631A8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000A6AD8;
  if (!qword_1000A6AD8)
  {
    v1 = sub_1000052BC(&qword_1000A6AE0);
    sub_1000229D8(&qword_1000A6948, &qword_1000A6950, (uint64_t)&protocol conformance descriptor for _ForegroundStyleModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000A6AD8);
  }
  return result;
}

uint64_t sub_10006322C(uint64_t a1)
{
  sub_100035628(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_BYTE *)(a1 + 32));
  return a1;
}

unint64_t sub_100063260()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000A6AE8;
  if (!qword_1000A6AE8)
  {
    v1 = type metadata accessor for EnvironmentValues.ShowsWidgetBackgroundKey(255);
    result = swift_getWitnessTable(&protocol conformance descriptor for EnvironmentValues.ShowsWidgetBackgroundKey, v1);
    atomic_store(result, (unint64_t *)&qword_1000A6AE8);
  }
  return result;
}

_QWORD *sub_1000632A8(_QWORD *a1, _QWORD *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  int *v16;
  char *v17;
  char *v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  void (*v25)(char *, char *, uint64_t);
  uint64_t v26;
  uint64_t v27;
  char *v28;
  char *v29;
  int *v30;
  uint64_t v31;
  char *v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  void (*v50)(char *, char *, uint64_t, __n128);
  __n128 v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  char *v56;
  void *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  char *v62;
  uint64_t v63;
  char *v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  char *v73;
  id v74;
  __n128 v75;
  uint64_t v76;
  char *v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  char *v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  char *v86;
  uint64_t v87;
  uint64_t v88;
  char *v89;
  char *v90;
  uint64_t v91;
  uint64_t v92;
  char *v93;
  char *v94;
  __n128 v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  char *v99;
  char *v100;
  void *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  char *v105;
  char *v106;
  uint64_t v107;
  char *v108;
  char *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  _QWORD *v118;
  _QWORD *v119;
  uint64_t v120;
  id v121;
  char *v123;
  uint64_t v124;
  void (*v125)(char *, char *, uint64_t, __n128);
  uint64_t v126;
  void (*v127)(char *, char *, uint64_t, __n128);
  int *v128;
  _QWORD *v129;
  _QWORD *v130;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v12 = *a2;
    *a1 = *a2;
    v13 = (_QWORD *)(v12 + ((v5 + 16) & ~(unint64_t)v5));
  }
  else
  {
    v7 = sub_10000527C(&qword_1000A4FC0);
    if (swift_getEnumCaseMultiPayload(a2, v7) == 1)
    {
      v8 = type metadata accessor for WidgetRenderingMode(0);
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(a1, a2, v8);
      v9 = a1;
      v10 = v7;
      v11 = 1;
    }
    else
    {
      v14 = *a2;
      *a1 = *a2;
      swift_retain(v14);
      v9 = a1;
      v10 = v7;
      v11 = 0;
    }
    swift_storeEnumTagMultiPayload(v9, v10, v11);
    v15 = a3[5];
    v16 = a3;
    v128 = a3;
    v17 = (char *)a1 + v15;
    v18 = (char *)a2 + v15;
    v19 = *(_QWORD *)v18;
    v20 = v18[8];
    sub_100035568(*(_QWORD *)v18, v20);
    *(_QWORD *)v17 = v19;
    v17[8] = v20;
    v21 = v16[6];
    v22 = (char *)a1 + v21;
    v23 = (char *)a2 + v21;
    v24 = type metadata accessor for UUID(0);
    v25 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v24 - 8) + 16);
    v25(v22, v23, v24);
    v130 = a1;
    v26 = type metadata accessor for AccessoryAndSceneEntity(0);
    v25(&v22[*(int *)(v26 + 20)], &v23[*(int *)(v26 + 20)], v24);
    v27 = *(int *)(v26 + 24);
    v28 = &v22[v27];
    v29 = &v23[v27];
    v126 = v24;
    v25(&v22[v27], &v23[v27], v24);
    v127 = (void (*)(char *, char *, uint64_t, __n128))v25;
    v30 = (int *)type metadata accessor for WidgetTileInfo(0);
    v25(&v28[v30[5]], &v29[v30[5]], v24);
    v31 = v30[6];
    v32 = &v28[v31];
    v33 = &v29[v31];
    v34 = *((_QWORD *)v33 + 1);
    *(_QWORD *)v32 = *(_QWORD *)v33;
    *((_QWORD *)v32 + 1) = v34;
    v35 = v30[7];
    v36 = &v28[v35];
    v37 = &v29[v35];
    v38 = *((_QWORD *)v37 + 1);
    *(_QWORD *)v36 = *(_QWORD *)v37;
    *((_QWORD *)v36 + 1) = v38;
    v39 = v30[8];
    v40 = &v28[v39];
    v41 = &v29[v39];
    v42 = *((_QWORD *)v41 + 1);
    *(_QWORD *)v40 = *(_QWORD *)v41;
    *((_QWORD *)v40 + 1) = v42;
    v43 = v30[9];
    v44 = &v28[v43];
    v45 = &v29[v43];
    v129 = a2;
    v46 = *((_QWORD *)v45 + 1);
    *(_QWORD *)v44 = *(_QWORD *)v45;
    *((_QWORD *)v44 + 1) = v46;
    v47 = v30[10];
    v48 = &v28[v47];
    v123 = &v29[v47];
    v49 = type metadata accessor for StaticRenderingMode(0);
    v50 = *(void (**)(char *, char *, uint64_t, __n128))(*(_QWORD *)(v49 - 8) + 16);
    v125 = v50;
    swift_bridgeObjectRetain(v34);
    swift_bridgeObjectRetain(v38);
    swift_bridgeObjectRetain(v42);
    v51 = swift_bridgeObjectRetain(v46);
    v124 = v49;
    v50(v48, v123, v49, v51);
    ((void (*)(char *, char *, uint64_t))v50)(&v28[v30[11]], &v29[v30[11]], v49);
    v52 = v30[12];
    v53 = *(_QWORD *)&v29[v52];
    *(_QWORD *)&v28[v52] = v53;
    v28[v30[13]] = v29[v30[13]];
    v54 = v30[14];
    v55 = &v28[v54];
    v56 = &v29[v54];
    v57 = *(void **)v56;
    LOBYTE(v56) = v56[8];
    *(_QWORD *)v55 = v57;
    v55[8] = (char)v56;
    v58 = v30[15];
    v59 = *(_QWORD *)&v29[v58];
    *(_QWORD *)&v28[v58] = v59;
    v28[v30[16]] = v29[v30[16]];
    v28[v30[17]] = v29[v30[17]];
    v60 = v30[18];
    v61 = &v28[v60];
    v62 = &v29[v60];
    *(_QWORD *)v61 = *(_QWORD *)v62;
    v61[8] = v62[8];
    v63 = v30[19];
    v64 = &v28[v63];
    v65 = &v29[v63];
    v66 = *((_QWORD *)v65 + 1);
    *(_QWORD *)v64 = *(_QWORD *)v65;
    *((_QWORD *)v64 + 1) = v66;
    v28[v30[20]] = v29[v30[20]];
    v67 = v30[21];
    v68 = *(_QWORD *)&v29[v67];
    *(_QWORD *)&v28[v67] = v68;
    v69 = v30[22];
    v70 = *(_QWORD *)&v29[v69];
    *(_QWORD *)&v28[v69] = v70;
    v71 = v128[7];
    v72 = (char *)v130 + v71;
    v73 = (char *)v129 + v71;
    swift_retain(v53);
    v74 = v57;
    swift_bridgeObjectRetain(v59);
    swift_bridgeObjectRetain(v66);
    swift_bridgeObjectRetain(v68);
    v75 = swift_bridgeObjectRetain(v70);
    v127(v72, v73, v126, v75);
    ((void (*)(char *, char *, uint64_t))v127)(&v72[v30[5]], &v73[v30[5]], v126);
    v76 = v30[6];
    v77 = &v72[v76];
    v78 = &v73[v76];
    v79 = *((_QWORD *)v78 + 1);
    *(_QWORD *)v77 = *(_QWORD *)v78;
    *((_QWORD *)v77 + 1) = v79;
    v80 = v30[7];
    v81 = &v72[v80];
    v82 = &v73[v80];
    v83 = *((_QWORD *)v82 + 1);
    *(_QWORD *)v81 = *(_QWORD *)v82;
    *((_QWORD *)v81 + 1) = v83;
    v84 = v30[8];
    v85 = &v72[v84];
    v86 = &v73[v84];
    v87 = *((_QWORD *)v86 + 1);
    *(_QWORD *)v85 = *(_QWORD *)v86;
    *((_QWORD *)v85 + 1) = v87;
    v88 = v30[9];
    v89 = &v72[v88];
    v90 = &v73[v88];
    v91 = *((_QWORD *)v90 + 1);
    *(_QWORD *)v89 = *(_QWORD *)v90;
    *((_QWORD *)v89 + 1) = v91;
    v92 = v30[10];
    v93 = &v72[v92];
    v94 = &v73[v92];
    swift_bridgeObjectRetain(v79);
    swift_bridgeObjectRetain(v83);
    swift_bridgeObjectRetain(v87);
    v95 = swift_bridgeObjectRetain(v91);
    v125(v93, v94, v124, v95);
    ((void (*)(char *, char *, uint64_t))v125)(&v72[v30[11]], &v73[v30[11]], v124);
    v96 = v30[12];
    v97 = *(_QWORD *)&v73[v96];
    *(_QWORD *)&v72[v96] = v97;
    v72[v30[13]] = v73[v30[13]];
    v98 = v30[14];
    v99 = &v72[v98];
    v100 = &v73[v98];
    v101 = *(void **)v100;
    LOBYTE(v100) = v100[8];
    *(_QWORD *)v99 = v101;
    v99[8] = (char)v100;
    v102 = v30[15];
    v103 = *(_QWORD *)&v73[v102];
    *(_QWORD *)&v72[v102] = v103;
    v72[v30[16]] = v73[v30[16]];
    v72[v30[17]] = v73[v30[17]];
    v104 = v30[18];
    v105 = &v72[v104];
    v106 = &v73[v104];
    *(_QWORD *)v105 = *(_QWORD *)v106;
    v105[8] = v106[8];
    v107 = v30[19];
    v108 = &v72[v107];
    v109 = &v73[v107];
    v110 = *((_QWORD *)v109 + 1);
    *(_QWORD *)v108 = *(_QWORD *)v109;
    *((_QWORD *)v108 + 1) = v110;
    v72[v30[20]] = v73[v30[20]];
    v111 = v30[21];
    v112 = *(_QWORD *)&v73[v111];
    *(_QWORD *)&v72[v111] = v112;
    v113 = v30[22];
    v114 = *(_QWORD *)&v73[v113];
    *(_QWORD *)&v72[v113] = v114;
    v13 = v130;
    v115 = v128[9];
    *((_BYTE *)v130 + v128[8]) = *((_BYTE *)v129 + v128[8]);
    *((_BYTE *)v130 + v115) = *((_BYTE *)v129 + v115);
    v116 = v128[10];
    v117 = v128[11];
    v118 = (_QWORD *)((char *)v130 + v116);
    v119 = (_QWORD *)((char *)v129 + v116);
    v120 = v119[1];
    *v118 = *v119;
    v118[1] = v120;
    v12 = *(_QWORD *)((char *)v129 + v117);
    *(_QWORD *)((char *)v130 + v117) = v12;
    swift_retain(v97);
    v121 = v101;
    swift_bridgeObjectRetain(v103);
    swift_bridgeObjectRetain(v110);
    swift_bridgeObjectRetain(v112);
    swift_bridgeObjectRetain(v114);
    swift_bridgeObjectRetain(v120);
  }
  swift_retain(v12);
  return v13;
}

uint64_t sub_1000637E8(_QWORD *a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  void (*v8)(char *, uint64_t);
  uint64_t v9;
  char *v10;
  int *v11;
  char *v12;
  uint64_t v13;
  void (*v14)(char *, uint64_t);
  char *v15;

  v4 = sub_10000527C(&qword_1000A4FC0);
  if (swift_getEnumCaseMultiPayload(a1, v4) == 1)
  {
    v5 = type metadata accessor for WidgetRenderingMode(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(a1, v5);
  }
  else
  {
    swift_release(*a1);
  }
  sub_10003561C(*(_QWORD *)((char *)a1 + a2[5]), *((_BYTE *)a1 + a2[5] + 8));
  v6 = (char *)a1 + a2[6];
  v7 = type metadata accessor for UUID(0);
  v8 = *(void (**)(char *, uint64_t))(*(_QWORD *)(v7 - 8) + 8);
  v8(v6, v7);
  v9 = type metadata accessor for AccessoryAndSceneEntity(0);
  v8(&v6[*(int *)(v9 + 20)], v7);
  v10 = &v6[*(int *)(v9 + 24)];
  v8(v10, v7);
  v11 = (int *)type metadata accessor for WidgetTileInfo(0);
  v8(&v10[v11[5]], v7);
  swift_bridgeObjectRelease(*(_QWORD *)&v10[v11[6] + 8]);
  swift_bridgeObjectRelease(*(_QWORD *)&v10[v11[7] + 8]);
  swift_bridgeObjectRelease(*(_QWORD *)&v10[v11[8] + 8]);
  swift_bridgeObjectRelease(*(_QWORD *)&v10[v11[9] + 8]);
  v12 = &v10[v11[10]];
  v13 = type metadata accessor for StaticRenderingMode(0);
  v14 = *(void (**)(char *, uint64_t))(*(_QWORD *)(v13 - 8) + 8);
  v14(v12, v13);
  v14(&v10[v11[11]], v13);
  swift_release(*(_QWORD *)&v10[v11[12]]);

  swift_bridgeObjectRelease(*(_QWORD *)&v10[v11[15]]);
  swift_bridgeObjectRelease(*(_QWORD *)&v10[v11[19] + 8]);
  swift_bridgeObjectRelease(*(_QWORD *)&v10[v11[21]]);
  swift_bridgeObjectRelease(*(_QWORD *)&v10[v11[22]]);
  v15 = (char *)a1 + a2[7];
  v8(v15, v7);
  v8(&v15[v11[5]], v7);
  swift_bridgeObjectRelease(*(_QWORD *)&v15[v11[6] + 8]);
  swift_bridgeObjectRelease(*(_QWORD *)&v15[v11[7] + 8]);
  swift_bridgeObjectRelease(*(_QWORD *)&v15[v11[8] + 8]);
  swift_bridgeObjectRelease(*(_QWORD *)&v15[v11[9] + 8]);
  v14(&v15[v11[10]], v13);
  v14(&v15[v11[11]], v13);
  swift_release(*(_QWORD *)&v15[v11[12]]);

  swift_bridgeObjectRelease(*(_QWORD *)&v15[v11[15]]);
  swift_bridgeObjectRelease(*(_QWORD *)&v15[v11[19] + 8]);
  swift_bridgeObjectRelease(*(_QWORD *)&v15[v11[21]]);
  swift_bridgeObjectRelease(*(_QWORD *)&v15[v11[22]]);
  swift_bridgeObjectRelease(*(_QWORD *)((char *)a1 + a2[10] + 8));
  return swift_release(*(_QWORD *)((char *)a1 + a2[11]));
}

_QWORD *sub_100063AA4(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  char *v14;
  _QWORD *v15;
  char *v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  void (*v23)(uint64_t, char *, uint64_t);
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  int *v28;
  uint64_t v29;
  _QWORD *v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  void (*v48)(uint64_t, char *, uint64_t, __n128);
  __n128 v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  void *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  _QWORD *v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  id v72;
  __n128 v73;
  uint64_t v74;
  _QWORD *v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  _QWORD *v79;
  char *v80;
  uint64_t v81;
  uint64_t v82;
  _QWORD *v83;
  char *v84;
  uint64_t v85;
  uint64_t v86;
  _QWORD *v87;
  char *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  char *v92;
  __n128 v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  char *v98;
  void *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  char *v104;
  uint64_t v105;
  _QWORD *v106;
  char *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  _QWORD *v116;
  _QWORD *v117;
  uint64_t v118;
  uint64_t v119;
  id v120;
  uint64_t v122;
  uint64_t v123;
  void (*v124)(uint64_t, char *, uint64_t, __n128);
  uint64_t v125;
  void (*v126)(uint64_t, char *, uint64_t, __n128);
  _QWORD *v127;
  _QWORD *v128;
  int *v129;

  v6 = sub_10000527C(&qword_1000A4FC0);
  if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
  {
    v7 = type metadata accessor for WidgetRenderingMode(0);
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = a1;
    v9 = v6;
    v10 = 1;
  }
  else
  {
    v11 = *a2;
    *a1 = *a2;
    swift_retain(v11);
    v8 = a1;
    v9 = v6;
    v10 = 0;
  }
  swift_storeEnumTagMultiPayload(v8, v9, v10);
  v12 = a3[5];
  v13 = a1;
  v14 = (char *)a1 + v12;
  v15 = v13;
  v127 = v13;
  v16 = (char *)a2 + v12;
  v17 = *(_QWORD *)v16;
  v18 = v16[8];
  sub_100035568(*(_QWORD *)v16, v18);
  *(_QWORD *)v14 = v17;
  v14[8] = v18;
  v19 = a3[6];
  v20 = (uint64_t)v15 + v19;
  v21 = (char *)a2 + v19;
  v22 = type metadata accessor for UUID(0);
  v23 = *(void (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(v22 - 8) + 16);
  v23(v20, v21, v22);
  v24 = type metadata accessor for AccessoryAndSceneEntity(0);
  v23(v20 + *(int *)(v24 + 20), &v21[*(int *)(v24 + 20)], v22);
  v25 = *(int *)(v24 + 24);
  v26 = v20 + v25;
  v27 = &v21[v25];
  v125 = v22;
  v23(v20 + v25, &v21[v25], v22);
  v126 = (void (*)(uint64_t, char *, uint64_t, __n128))v23;
  v28 = (int *)type metadata accessor for WidgetTileInfo(0);
  v23(v26 + v28[5], &v27[v28[5]], v22);
  v29 = v28[6];
  v30 = (_QWORD *)(v26 + v29);
  v31 = &v27[v29];
  v32 = *((_QWORD *)v31 + 1);
  *v30 = *(_QWORD *)v31;
  v30[1] = v32;
  v33 = v28[7];
  v34 = (_QWORD *)(v26 + v33);
  v35 = &v27[v33];
  v36 = *((_QWORD *)v35 + 1);
  *v34 = *(_QWORD *)v35;
  v34[1] = v36;
  v37 = v28[8];
  v38 = (_QWORD *)(v26 + v37);
  v39 = &v27[v37];
  v128 = a2;
  v129 = a3;
  v40 = *((_QWORD *)v39 + 1);
  *v38 = *(_QWORD *)v39;
  v38[1] = v40;
  v41 = v28[9];
  v42 = (_QWORD *)(v26 + v41);
  v43 = &v27[v41];
  v44 = *((_QWORD *)v43 + 1);
  *v42 = *(_QWORD *)v43;
  v42[1] = v44;
  v45 = v28[10];
  v122 = v26 + v45;
  v46 = &v27[v45];
  v47 = type metadata accessor for StaticRenderingMode(0);
  v48 = *(void (**)(uint64_t, char *, uint64_t, __n128))(*(_QWORD *)(v47 - 8) + 16);
  v124 = v48;
  swift_bridgeObjectRetain(v32);
  swift_bridgeObjectRetain(v36);
  swift_bridgeObjectRetain(v40);
  v49 = swift_bridgeObjectRetain(v44);
  v123 = v47;
  v48(v122, v46, v47, v49);
  ((void (*)(uint64_t, char *, uint64_t))v48)(v26 + v28[11], &v27[v28[11]], v47);
  v50 = v28[12];
  v51 = *(_QWORD *)&v27[v50];
  *(_QWORD *)(v26 + v50) = v51;
  *(_BYTE *)(v26 + v28[13]) = v27[v28[13]];
  v52 = v28[14];
  v53 = v26 + v52;
  v54 = &v27[v52];
  v55 = *(void **)v54;
  LOBYTE(v54) = v54[8];
  *(_QWORD *)v53 = v55;
  *(_BYTE *)(v53 + 8) = (_BYTE)v54;
  v56 = v28[15];
  v57 = *(_QWORD *)&v27[v56];
  *(_QWORD *)(v26 + v56) = v57;
  *(_BYTE *)(v26 + v28[16]) = v27[v28[16]];
  *(_BYTE *)(v26 + v28[17]) = v27[v28[17]];
  v58 = v28[18];
  v59 = v26 + v58;
  v60 = &v27[v58];
  *(_QWORD *)v59 = *(_QWORD *)v60;
  *(_BYTE *)(v59 + 8) = v60[8];
  v61 = v28[19];
  v62 = (_QWORD *)(v26 + v61);
  v63 = &v27[v61];
  v64 = *((_QWORD *)v63 + 1);
  *v62 = *(_QWORD *)v63;
  v62[1] = v64;
  *(_BYTE *)(v26 + v28[20]) = v27[v28[20]];
  v65 = v28[21];
  v66 = *(_QWORD *)&v27[v65];
  *(_QWORD *)(v26 + v65) = v66;
  v67 = v28[22];
  v68 = *(_QWORD *)&v27[v67];
  *(_QWORD *)(v26 + v67) = v68;
  v69 = v129[7];
  v70 = (uint64_t)v127 + v69;
  v71 = (char *)v128 + v69;
  swift_retain(v51);
  v72 = v55;
  swift_bridgeObjectRetain(v57);
  swift_bridgeObjectRetain(v64);
  swift_bridgeObjectRetain(v66);
  v73 = swift_bridgeObjectRetain(v68);
  v126(v70, v71, v125, v73);
  ((void (*)(uint64_t, char *, uint64_t))v126)(v70 + v28[5], &v71[v28[5]], v125);
  v74 = v28[6];
  v75 = (_QWORD *)(v70 + v74);
  v76 = &v71[v74];
  v77 = *((_QWORD *)v76 + 1);
  *v75 = *(_QWORD *)v76;
  v75[1] = v77;
  v78 = v28[7];
  v79 = (_QWORD *)(v70 + v78);
  v80 = &v71[v78];
  v81 = *((_QWORD *)v80 + 1);
  *v79 = *(_QWORD *)v80;
  v79[1] = v81;
  v82 = v28[8];
  v83 = (_QWORD *)(v70 + v82);
  v84 = &v71[v82];
  v85 = *((_QWORD *)v84 + 1);
  *v83 = *(_QWORD *)v84;
  v83[1] = v85;
  v86 = v28[9];
  v87 = (_QWORD *)(v70 + v86);
  v88 = &v71[v86];
  v89 = *((_QWORD *)v88 + 1);
  *v87 = *(_QWORD *)v88;
  v87[1] = v89;
  v90 = v28[10];
  v91 = v70 + v90;
  v92 = &v71[v90];
  swift_bridgeObjectRetain(v77);
  swift_bridgeObjectRetain(v81);
  swift_bridgeObjectRetain(v85);
  v93 = swift_bridgeObjectRetain(v89);
  v124(v91, v92, v123, v93);
  ((void (*)(uint64_t, char *, uint64_t))v124)(v70 + v28[11], &v71[v28[11]], v123);
  v94 = v28[12];
  v95 = *(_QWORD *)&v71[v94];
  *(_QWORD *)(v70 + v94) = v95;
  *(_BYTE *)(v70 + v28[13]) = v71[v28[13]];
  v96 = v28[14];
  v97 = v70 + v96;
  v98 = &v71[v96];
  v99 = *(void **)v98;
  LOBYTE(v98) = v98[8];
  *(_QWORD *)v97 = v99;
  *(_BYTE *)(v97 + 8) = (_BYTE)v98;
  v100 = v28[15];
  v101 = *(_QWORD *)&v71[v100];
  *(_QWORD *)(v70 + v100) = v101;
  *(_BYTE *)(v70 + v28[16]) = v71[v28[16]];
  *(_BYTE *)(v70 + v28[17]) = v71[v28[17]];
  v102 = v28[18];
  v103 = v70 + v102;
  v104 = &v71[v102];
  *(_QWORD *)v103 = *(_QWORD *)v104;
  *(_BYTE *)(v103 + 8) = v104[8];
  v105 = v28[19];
  v106 = (_QWORD *)(v70 + v105);
  v107 = &v71[v105];
  v108 = *((_QWORD *)v107 + 1);
  *v106 = *(_QWORD *)v107;
  v106[1] = v108;
  *(_BYTE *)(v70 + v28[20]) = v71[v28[20]];
  v109 = v28[21];
  v110 = *(_QWORD *)&v71[v109];
  *(_QWORD *)(v70 + v109) = v110;
  v111 = v28[22];
  v112 = *(_QWORD *)&v71[v111];
  *(_QWORD *)(v70 + v111) = v112;
  v113 = v129[9];
  *((_BYTE *)v127 + v129[8]) = *((_BYTE *)v128 + v129[8]);
  *((_BYTE *)v127 + v113) = *((_BYTE *)v128 + v113);
  v114 = v129[10];
  v115 = v129[11];
  v116 = (_QWORD *)((char *)v127 + v114);
  v117 = (_QWORD *)((char *)v128 + v114);
  v118 = v117[1];
  *v116 = *v117;
  v116[1] = v118;
  v119 = *(_QWORD *)((char *)v128 + v115);
  *(_QWORD *)((char *)v127 + v115) = v119;
  swift_retain(v95);
  v120 = v99;
  swift_bridgeObjectRetain(v101);
  swift_bridgeObjectRetain(v108);
  swift_bridgeObjectRetain(v110);
  swift_bridgeObjectRetain(v112);
  swift_bridgeObjectRetain(v118);
  swift_retain(v119);
  return v127;
}

char *sub_100063FB8(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int *v13;
  char *v14;
  char *v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  void (*v24)(char *, char *, uint64_t);
  uint64_t v25;
  uint64_t v26;
  char *v27;
  char *v28;
  int *v29;
  uint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  char *v52;
  uint64_t v53;
  void (*v54)(char *, char *, uint64_t);
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  char *v60;
  void *v61;
  void *v62;
  id v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  char *v83;
  char *v84;
  uint64_t v85;
  char *v86;
  char *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  char *v91;
  char *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  char *v96;
  char *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  char *v101;
  char *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  char *v109;
  char *v110;
  void *v111;
  void *v112;
  id v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  char *v118;
  char *v119;
  uint64_t v120;
  uint64_t v121;
  char *v122;
  char *v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  char *v133;
  char *v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  char *v141;
  int *v142;

  if (a1 != a2)
  {
    sub_100014EFC((uint64_t)a1, &qword_1000A4FC0);
    v6 = sub_10000527C(&qword_1000A4FC0);
    if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
    {
      v7 = type metadata accessor for WidgetRenderingMode(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
      v8 = a1;
      v9 = v6;
      v10 = 1;
    }
    else
    {
      v11 = *(_QWORD *)a2;
      *(_QWORD *)a1 = *(_QWORD *)a2;
      swift_retain(v11);
      v8 = a1;
      v9 = v6;
      v10 = 0;
    }
    swift_storeEnumTagMultiPayload(v8, v9, v10);
  }
  v12 = a3[5];
  v13 = a3;
  v142 = a3;
  v14 = &a1[v12];
  v15 = &a2[v12];
  v16 = *(_QWORD *)v15;
  v17 = v15[8];
  sub_100035568(*(_QWORD *)v15, v17);
  v18 = *(_QWORD *)v14;
  v19 = v14[8];
  *(_QWORD *)v14 = v16;
  v14[8] = v17;
  sub_10003561C(v18, v19);
  v20 = v13[6];
  v21 = &a1[v20];
  v22 = &a2[v20];
  v23 = type metadata accessor for UUID(0);
  v141 = a2;
  v24 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v23 - 8) + 24);
  v24(v21, v22, v23);
  v25 = type metadata accessor for AccessoryAndSceneEntity(0);
  v24(&v21[*(int *)(v25 + 20)], &v22[*(int *)(v25 + 20)], v23);
  v26 = *(int *)(v25 + 24);
  v27 = &v21[v26];
  v28 = &v22[v26];
  v24(&v21[v26], &v22[v26], v23);
  v29 = (int *)type metadata accessor for WidgetTileInfo(0);
  v24(&v27[v29[5]], &v28[v29[5]], v23);
  v30 = v29[6];
  v31 = &v27[v30];
  v32 = &v28[v30];
  *(_QWORD *)v31 = *(_QWORD *)v32;
  v33 = *((_QWORD *)v32 + 1);
  v34 = *((_QWORD *)v31 + 1);
  *((_QWORD *)v31 + 1) = v33;
  swift_bridgeObjectRetain(v33);
  swift_bridgeObjectRelease(v34);
  v35 = v29[7];
  v36 = &v27[v35];
  v37 = &v28[v35];
  *(_QWORD *)v36 = *(_QWORD *)v37;
  v38 = *((_QWORD *)v37 + 1);
  v39 = *((_QWORD *)v36 + 1);
  *((_QWORD *)v36 + 1) = v38;
  swift_bridgeObjectRetain(v38);
  swift_bridgeObjectRelease(v39);
  v40 = v29[8];
  v41 = &v27[v40];
  v42 = &v28[v40];
  *(_QWORD *)v41 = *(_QWORD *)v42;
  v43 = *((_QWORD *)v42 + 1);
  v44 = *((_QWORD *)v41 + 1);
  *((_QWORD *)v41 + 1) = v43;
  swift_bridgeObjectRetain(v43);
  swift_bridgeObjectRelease(v44);
  v45 = v29[9];
  v46 = &v27[v45];
  v47 = &v28[v45];
  *(_QWORD *)v46 = *(_QWORD *)v47;
  v48 = *((_QWORD *)v47 + 1);
  v49 = *((_QWORD *)v46 + 1);
  *((_QWORD *)v46 + 1) = v48;
  swift_bridgeObjectRetain(v48);
  swift_bridgeObjectRelease(v49);
  v50 = v29[10];
  v51 = &v27[v50];
  v52 = &v28[v50];
  v53 = type metadata accessor for StaticRenderingMode(0);
  v54 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v53 - 8) + 24);
  v54(v51, v52, v53);
  v54(&v27[v29[11]], &v28[v29[11]], v53);
  v55 = v29[12];
  v56 = *(_QWORD *)&v28[v55];
  v57 = *(_QWORD *)&v27[v55];
  *(_QWORD *)&v27[v55] = v56;
  swift_retain(v56);
  swift_release(v57);
  v27[v29[13]] = v28[v29[13]];
  v58 = v29[14];
  v59 = &v27[v58];
  v60 = &v28[v58];
  v61 = *(void **)v60;
  LOBYTE(v60) = v60[8];
  v62 = *(void **)v59;
  *(_QWORD *)v59 = v61;
  v59[8] = (char)v60;
  v63 = v61;

  v64 = v29[15];
  v65 = *(_QWORD *)&v28[v64];
  v66 = *(_QWORD *)&v27[v64];
  *(_QWORD *)&v27[v64] = v65;
  swift_bridgeObjectRetain(v65);
  swift_bridgeObjectRelease(v66);
  v27[v29[16]] = v28[v29[16]];
  v27[v29[17]] = v28[v29[17]];
  v67 = v29[18];
  v68 = &v27[v67];
  v69 = &v28[v67];
  v70 = *(_QWORD *)v69;
  v68[8] = v69[8];
  *(_QWORD *)v68 = v70;
  v71 = v29[19];
  v72 = &v27[v71];
  v73 = &v28[v71];
  *(_QWORD *)v72 = *(_QWORD *)v73;
  v74 = *((_QWORD *)v73 + 1);
  v75 = *((_QWORD *)v72 + 1);
  *((_QWORD *)v72 + 1) = v74;
  swift_bridgeObjectRetain(v74);
  swift_bridgeObjectRelease(v75);
  v27[v29[20]] = v28[v29[20]];
  v76 = v29[21];
  v77 = *(_QWORD *)&v28[v76];
  v78 = *(_QWORD *)&v27[v76];
  *(_QWORD *)&v27[v76] = v77;
  swift_bridgeObjectRetain(v77);
  swift_bridgeObjectRelease(v78);
  v79 = v29[22];
  v80 = *(_QWORD *)&v28[v79];
  v81 = *(_QWORD *)&v27[v79];
  *(_QWORD *)&v27[v79] = v80;
  swift_bridgeObjectRetain(v80);
  swift_bridgeObjectRelease(v81);
  v82 = v142[7];
  v83 = &a1[v82];
  v84 = &v141[v82];
  v24(&a1[v82], &v141[v82], v23);
  v24(&v83[v29[5]], &v84[v29[5]], v23);
  v85 = v29[6];
  v86 = &v83[v85];
  v87 = &v84[v85];
  *(_QWORD *)v86 = *(_QWORD *)v87;
  v88 = *((_QWORD *)v87 + 1);
  v89 = *((_QWORD *)v86 + 1);
  *((_QWORD *)v86 + 1) = v88;
  swift_bridgeObjectRetain(v88);
  swift_bridgeObjectRelease(v89);
  v90 = v29[7];
  v91 = &v83[v90];
  v92 = &v84[v90];
  *(_QWORD *)v91 = *(_QWORD *)v92;
  v93 = *((_QWORD *)v92 + 1);
  v94 = *((_QWORD *)v91 + 1);
  *((_QWORD *)v91 + 1) = v93;
  swift_bridgeObjectRetain(v93);
  swift_bridgeObjectRelease(v94);
  v95 = v29[8];
  v96 = &v83[v95];
  v97 = &v84[v95];
  *(_QWORD *)v96 = *(_QWORD *)v97;
  v98 = *((_QWORD *)v97 + 1);
  v99 = *((_QWORD *)v96 + 1);
  *((_QWORD *)v96 + 1) = v98;
  swift_bridgeObjectRetain(v98);
  swift_bridgeObjectRelease(v99);
  v100 = v29[9];
  v101 = &v83[v100];
  v102 = &v84[v100];
  *(_QWORD *)v101 = *(_QWORD *)v102;
  v103 = *((_QWORD *)v102 + 1);
  v104 = *((_QWORD *)v101 + 1);
  *((_QWORD *)v101 + 1) = v103;
  swift_bridgeObjectRetain(v103);
  swift_bridgeObjectRelease(v104);
  v54(&v83[v29[10]], &v84[v29[10]], v53);
  v54(&v83[v29[11]], &v84[v29[11]], v53);
  v105 = v29[12];
  v106 = *(_QWORD *)&v84[v105];
  v107 = *(_QWORD *)&v83[v105];
  *(_QWORD *)&v83[v105] = v106;
  swift_retain(v106);
  swift_release(v107);
  v83[v29[13]] = v84[v29[13]];
  v108 = v29[14];
  v109 = &v83[v108];
  v110 = &v84[v108];
  v111 = *(void **)v110;
  LOBYTE(v110) = v110[8];
  v112 = *(void **)v109;
  *(_QWORD *)v109 = v111;
  v109[8] = (char)v110;
  v113 = v111;

  v114 = v29[15];
  v115 = *(_QWORD *)&v84[v114];
  v116 = *(_QWORD *)&v83[v114];
  *(_QWORD *)&v83[v114] = v115;
  swift_bridgeObjectRetain(v115);
  swift_bridgeObjectRelease(v116);
  v83[v29[16]] = v84[v29[16]];
  v83[v29[17]] = v84[v29[17]];
  v117 = v29[18];
  v118 = &v83[v117];
  v119 = &v84[v117];
  v120 = *(_QWORD *)v119;
  v118[8] = v119[8];
  *(_QWORD *)v118 = v120;
  v121 = v29[19];
  v122 = &v83[v121];
  v123 = &v84[v121];
  *(_QWORD *)v122 = *(_QWORD *)v123;
  v124 = *((_QWORD *)v123 + 1);
  v125 = *((_QWORD *)v122 + 1);
  *((_QWORD *)v122 + 1) = v124;
  swift_bridgeObjectRetain(v124);
  swift_bridgeObjectRelease(v125);
  v83[v29[20]] = v84[v29[20]];
  v126 = v29[21];
  v127 = *(_QWORD *)&v84[v126];
  v128 = *(_QWORD *)&v83[v126];
  *(_QWORD *)&v83[v126] = v127;
  swift_bridgeObjectRetain(v127);
  swift_bridgeObjectRelease(v128);
  v129 = v29[22];
  v130 = *(_QWORD *)&v84[v129];
  v131 = *(_QWORD *)&v83[v129];
  *(_QWORD *)&v83[v129] = v130;
  swift_bridgeObjectRetain(v130);
  swift_bridgeObjectRelease(v131);
  a1[v142[8]] = v141[v142[8]];
  a1[v142[9]] = v141[v142[9]];
  v132 = v142[10];
  v133 = &a1[v132];
  v134 = &v141[v132];
  *(_QWORD *)v133 = *(_QWORD *)v134;
  v135 = *((_QWORD *)v134 + 1);
  v136 = *((_QWORD *)v133 + 1);
  *((_QWORD *)v133 + 1) = v135;
  swift_bridgeObjectRetain(v135);
  swift_bridgeObjectRelease(v136);
  v137 = v142[11];
  v138 = *(_QWORD *)&v141[v137];
  v139 = *(_QWORD *)&a1[v137];
  *(_QWORD *)&a1[v137] = v138;
  swift_retain(v138);
  swift_release(v139);
  return a1;
}

char *sub_1000645DC(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  char *v13;
  uint64_t v14;
  void (*v15)(char *, char *, uint64_t);
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  int *v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  void (*v25)(char *, char *, uint64_t);
  uint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  char *v36;
  char *v37;
  uint64_t v38;
  char *v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  char *v44;
  int *v45;

  v6 = sub_10000527C(&qword_1000A4FC0);
  if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
  {
    v7 = type metadata accessor for WidgetRenderingMode(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a1, a2, v7);
    swift_storeEnumTagMultiPayload(a1, v6, 1);
  }
  else
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
  }
  v8 = a3[5];
  v9 = a3[6];
  v10 = &a1[v8];
  v11 = &a2[v8];
  *(_QWORD *)v10 = *(_QWORD *)v11;
  v10[8] = v11[8];
  v12 = &a1[v9];
  v13 = &a2[v9];
  v14 = type metadata accessor for UUID(0);
  v45 = a3;
  v15 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v14 - 8) + 32);
  v15(v12, v13, v14);
  v16 = type metadata accessor for AccessoryAndSceneEntity(0);
  v15(&v12[*(int *)(v16 + 20)], &v13[*(int *)(v16 + 20)], v14);
  v17 = *(int *)(v16 + 24);
  v18 = &v12[v17];
  v19 = &v13[v17];
  v15(&v12[v17], &v13[v17], v14);
  v20 = (int *)type metadata accessor for WidgetTileInfo(0);
  v15(&v18[v20[5]], &v19[v20[5]], v14);
  *(_OWORD *)&v18[v20[6]] = *(_OWORD *)&v19[v20[6]];
  *(_OWORD *)&v18[v20[7]] = *(_OWORD *)&v19[v20[7]];
  *(_OWORD *)&v18[v20[8]] = *(_OWORD *)&v19[v20[8]];
  *(_OWORD *)&v18[v20[9]] = *(_OWORD *)&v19[v20[9]];
  v21 = v20[10];
  v22 = &v18[v21];
  v23 = &v19[v21];
  v24 = type metadata accessor for StaticRenderingMode(0);
  v44 = a2;
  v25 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v24 - 8) + 32);
  v25(v22, v23, v24);
  v25(&v18[v20[11]], &v19[v20[11]], v24);
  *(_QWORD *)&v18[v20[12]] = *(_QWORD *)&v19[v20[12]];
  v18[v20[13]] = v19[v20[13]];
  v26 = v20[14];
  v27 = &v18[v26];
  v28 = &v19[v26];
  *(_QWORD *)v27 = *(_QWORD *)v28;
  v27[8] = v28[8];
  *(_QWORD *)&v18[v20[15]] = *(_QWORD *)&v19[v20[15]];
  v18[v20[16]] = v19[v20[16]];
  v18[v20[17]] = v19[v20[17]];
  v29 = v20[18];
  v30 = &v18[v29];
  v31 = &v19[v29];
  *(_QWORD *)v30 = *(_QWORD *)v31;
  v30[8] = v31[8];
  *(_OWORD *)&v18[v20[19]] = *(_OWORD *)&v19[v20[19]];
  v18[v20[20]] = v19[v20[20]];
  *(_QWORD *)&v18[v20[21]] = *(_QWORD *)&v19[v20[21]];
  *(_QWORD *)&v18[v20[22]] = *(_QWORD *)&v19[v20[22]];
  v32 = v45[7];
  v33 = &a1[v32];
  v34 = &v44[v32];
  v15(&a1[v32], &v44[v32], v14);
  v15(&v33[v20[5]], &v34[v20[5]], v14);
  *(_OWORD *)&v33[v20[6]] = *(_OWORD *)&v34[v20[6]];
  *(_OWORD *)&v33[v20[7]] = *(_OWORD *)&v34[v20[7]];
  *(_OWORD *)&v33[v20[8]] = *(_OWORD *)&v34[v20[8]];
  *(_OWORD *)&v33[v20[9]] = *(_OWORD *)&v34[v20[9]];
  v25(&v33[v20[10]], &v34[v20[10]], v24);
  v25(&v33[v20[11]], &v34[v20[11]], v24);
  *(_QWORD *)&v33[v20[12]] = *(_QWORD *)&v34[v20[12]];
  v33[v20[13]] = v34[v20[13]];
  v35 = v20[14];
  v36 = &v33[v35];
  v37 = &v34[v35];
  *(_QWORD *)v36 = *(_QWORD *)v37;
  v36[8] = v37[8];
  *(_QWORD *)&v33[v20[15]] = *(_QWORD *)&v34[v20[15]];
  v33[v20[16]] = v34[v20[16]];
  v33[v20[17]] = v34[v20[17]];
  v38 = v20[18];
  v39 = &v33[v38];
  v40 = &v34[v38];
  *(_QWORD *)v39 = *(_QWORD *)v40;
  v39[8] = v40[8];
  *(_OWORD *)&v33[v20[19]] = *(_OWORD *)&v34[v20[19]];
  v33[v20[20]] = v34[v20[20]];
  *(_QWORD *)&v33[v20[21]] = *(_QWORD *)&v34[v20[21]];
  *(_QWORD *)&v33[v20[22]] = *(_QWORD *)&v34[v20[22]];
  v41 = v45[9];
  a1[v45[8]] = v44[v45[8]];
  a1[v41] = v44[v41];
  v42 = v45[11];
  *(_OWORD *)&a1[v45[10]] = *(_OWORD *)&v44[v45[10]];
  *(_QWORD *)&a1[v42] = *(_QWORD *)&v44[v42];
  return a1;
}

char *sub_1000649B4(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  void (*v18)(char *, char *, uint64_t);
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  int *v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  char *v50;
  uint64_t v51;
  void (*v52)(char *, char *, uint64_t);
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  char *v57;
  uint64_t v58;
  void *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  char *v64;
  uint64_t v65;
  char *v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  char *v76;
  char *v77;
  uint64_t v78;
  char *v79;
  char *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  char *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  char *v91;
  char *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  char *v97;
  char *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  char *v105;
  char *v106;
  uint64_t v107;
  void *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  char *v112;
  char *v113;
  uint64_t v114;
  char *v115;
  char *v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  char *v126;
  char *v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  char *v134;
  int *v135;

  if (a1 != a2)
  {
    sub_100014EFC((uint64_t)a1, &qword_1000A4FC0);
    v6 = sub_10000527C(&qword_1000A4FC0);
    if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
    {
      v7 = type metadata accessor for WidgetRenderingMode(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a1, a2, v7);
      swift_storeEnumTagMultiPayload(a1, v6, 1);
    }
    else
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
    }
  }
  v8 = a3[5];
  v9 = &a1[v8];
  v10 = &a2[v8];
  v11 = *(_QWORD *)v10;
  LOBYTE(v10) = v10[8];
  v12 = *(_QWORD *)v9;
  v13 = v9[8];
  *(_QWORD *)v9 = v11;
  v9[8] = (char)v10;
  sub_10003561C(v12, v13);
  v14 = a3[6];
  v15 = &a1[v14];
  v16 = &a2[v14];
  v17 = type metadata accessor for UUID(0);
  v135 = a3;
  v18 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v17 - 8) + 40);
  v18(v15, v16, v17);
  v19 = type metadata accessor for AccessoryAndSceneEntity(0);
  v18(&v15[*(int *)(v19 + 20)], &v16[*(int *)(v19 + 20)], v17);
  v20 = *(int *)(v19 + 24);
  v21 = &v15[v20];
  v22 = &v16[v20];
  v18(&v15[v20], &v16[v20], v17);
  v23 = (int *)type metadata accessor for WidgetTileInfo(0);
  v18(&v21[v23[5]], &v22[v23[5]], v17);
  v24 = v23[6];
  v25 = &v21[v24];
  v26 = &v22[v24];
  v28 = *(_QWORD *)v26;
  v27 = *((_QWORD *)v26 + 1);
  v29 = *((_QWORD *)v25 + 1);
  *(_QWORD *)v25 = v28;
  *((_QWORD *)v25 + 1) = v27;
  swift_bridgeObjectRelease(v29);
  v30 = v23[7];
  v31 = &v21[v30];
  v32 = &v22[v30];
  v34 = *(_QWORD *)v32;
  v33 = *((_QWORD *)v32 + 1);
  v35 = *((_QWORD *)v31 + 1);
  *(_QWORD *)v31 = v34;
  *((_QWORD *)v31 + 1) = v33;
  swift_bridgeObjectRelease(v35);
  v36 = v23[8];
  v37 = &v21[v36];
  v38 = &v22[v36];
  v40 = *(_QWORD *)v38;
  v39 = *((_QWORD *)v38 + 1);
  v41 = *((_QWORD *)v37 + 1);
  *(_QWORD *)v37 = v40;
  *((_QWORD *)v37 + 1) = v39;
  swift_bridgeObjectRelease(v41);
  v42 = v23[9];
  v43 = &v21[v42];
  v44 = &v22[v42];
  v46 = *(_QWORD *)v44;
  v45 = *((_QWORD *)v44 + 1);
  v47 = *((_QWORD *)v43 + 1);
  *(_QWORD *)v43 = v46;
  *((_QWORD *)v43 + 1) = v45;
  swift_bridgeObjectRelease(v47);
  v48 = v23[10];
  v49 = &v21[v48];
  v50 = &v22[v48];
  v51 = type metadata accessor for StaticRenderingMode(0);
  v134 = a2;
  v52 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v51 - 8) + 40);
  v52(v49, v50, v51);
  v52(&v21[v23[11]], &v22[v23[11]], v51);
  v53 = v23[12];
  v54 = *(_QWORD *)&v21[v53];
  *(_QWORD *)&v21[v53] = *(_QWORD *)&v22[v53];
  swift_release(v54);
  v21[v23[13]] = v22[v23[13]];
  v55 = v23[14];
  v56 = &v21[v55];
  v57 = &v22[v55];
  v58 = *(_QWORD *)v57;
  LOBYTE(v57) = v57[8];
  v59 = *(void **)v56;
  *(_QWORD *)v56 = v58;
  v56[8] = (char)v57;

  v60 = v23[15];
  v61 = *(_QWORD *)&v21[v60];
  *(_QWORD *)&v21[v60] = *(_QWORD *)&v22[v60];
  swift_bridgeObjectRelease(v61);
  v21[v23[16]] = v22[v23[16]];
  v21[v23[17]] = v22[v23[17]];
  v62 = v23[18];
  v63 = &v21[v62];
  v64 = &v22[v62];
  v63[8] = v64[8];
  *(_QWORD *)v63 = *(_QWORD *)v64;
  v65 = v23[19];
  v66 = &v21[v65];
  v67 = &v22[v65];
  v69 = *(_QWORD *)v67;
  v68 = *((_QWORD *)v67 + 1);
  v70 = *((_QWORD *)v66 + 1);
  *(_QWORD *)v66 = v69;
  *((_QWORD *)v66 + 1) = v68;
  swift_bridgeObjectRelease(v70);
  v21[v23[20]] = v22[v23[20]];
  v71 = v23[21];
  v72 = *(_QWORD *)&v21[v71];
  *(_QWORD *)&v21[v71] = *(_QWORD *)&v22[v71];
  swift_bridgeObjectRelease(v72);
  v73 = v23[22];
  v74 = *(_QWORD *)&v21[v73];
  *(_QWORD *)&v21[v73] = *(_QWORD *)&v22[v73];
  swift_bridgeObjectRelease(v74);
  v75 = v135[7];
  v76 = &a1[v75];
  v77 = &v134[v75];
  v18(&a1[v75], &v134[v75], v17);
  v18(&v76[v23[5]], &v77[v23[5]], v17);
  v78 = v23[6];
  v79 = &v76[v78];
  v80 = &v77[v78];
  v82 = *(_QWORD *)v80;
  v81 = *((_QWORD *)v80 + 1);
  v83 = *((_QWORD *)v79 + 1);
  *(_QWORD *)v79 = v82;
  *((_QWORD *)v79 + 1) = v81;
  swift_bridgeObjectRelease(v83);
  v84 = v23[7];
  v85 = &v76[v84];
  v86 = &v77[v84];
  v88 = *(_QWORD *)v86;
  v87 = *((_QWORD *)v86 + 1);
  v89 = *((_QWORD *)v85 + 1);
  *(_QWORD *)v85 = v88;
  *((_QWORD *)v85 + 1) = v87;
  swift_bridgeObjectRelease(v89);
  v90 = v23[8];
  v91 = &v76[v90];
  v92 = &v77[v90];
  v94 = *(_QWORD *)v92;
  v93 = *((_QWORD *)v92 + 1);
  v95 = *((_QWORD *)v91 + 1);
  *(_QWORD *)v91 = v94;
  *((_QWORD *)v91 + 1) = v93;
  swift_bridgeObjectRelease(v95);
  v96 = v23[9];
  v97 = &v76[v96];
  v98 = &v77[v96];
  v100 = *(_QWORD *)v98;
  v99 = *((_QWORD *)v98 + 1);
  v101 = *((_QWORD *)v97 + 1);
  *(_QWORD *)v97 = v100;
  *((_QWORD *)v97 + 1) = v99;
  swift_bridgeObjectRelease(v101);
  v52(&v76[v23[10]], &v77[v23[10]], v51);
  v52(&v76[v23[11]], &v77[v23[11]], v51);
  v102 = v23[12];
  v103 = *(_QWORD *)&v76[v102];
  *(_QWORD *)&v76[v102] = *(_QWORD *)&v77[v102];
  swift_release(v103);
  v76[v23[13]] = v77[v23[13]];
  v104 = v23[14];
  v105 = &v76[v104];
  v106 = &v77[v104];
  v107 = *(_QWORD *)v106;
  LOBYTE(v106) = v106[8];
  v108 = *(void **)v105;
  *(_QWORD *)v105 = v107;
  v105[8] = (char)v106;

  v109 = v23[15];
  v110 = *(_QWORD *)&v76[v109];
  *(_QWORD *)&v76[v109] = *(_QWORD *)&v77[v109];
  swift_bridgeObjectRelease(v110);
  v76[v23[16]] = v77[v23[16]];
  v76[v23[17]] = v77[v23[17]];
  v111 = v23[18];
  v112 = &v76[v111];
  v113 = &v77[v111];
  v112[8] = v113[8];
  *(_QWORD *)v112 = *(_QWORD *)v113;
  v114 = v23[19];
  v115 = &v76[v114];
  v116 = &v77[v114];
  v118 = *(_QWORD *)v116;
  v117 = *((_QWORD *)v116 + 1);
  v119 = *((_QWORD *)v115 + 1);
  *(_QWORD *)v115 = v118;
  *((_QWORD *)v115 + 1) = v117;
  swift_bridgeObjectRelease(v119);
  v76[v23[20]] = v77[v23[20]];
  v120 = v23[21];
  v121 = *(_QWORD *)&v76[v120];
  *(_QWORD *)&v76[v120] = *(_QWORD *)&v77[v120];
  swift_bridgeObjectRelease(v121);
  v122 = v23[22];
  v123 = *(_QWORD *)&v76[v122];
  *(_QWORD *)&v76[v122] = *(_QWORD *)&v77[v122];
  swift_bridgeObjectRelease(v123);
  v124 = v135[9];
  a1[v135[8]] = v134[v135[8]];
  a1[v124] = v134[v124];
  v125 = v135[10];
  v126 = &a1[v125];
  v127 = &v134[v125];
  v129 = *(_QWORD *)v127;
  v128 = *((_QWORD *)v127 + 1);
  v130 = *((_QWORD *)v126 + 1);
  *(_QWORD *)v126 = v129;
  *((_QWORD *)v126 + 1) = v128;
  swift_bridgeObjectRelease(v130);
  v131 = v135[11];
  v132 = *(_QWORD *)&a1[v131];
  *(_QWORD *)&a1[v131] = *(_QWORD *)&v134[v131];
  swift_release(v132);
  return a1;
}

uint64_t sub_100064EC0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100064ECC);
}

uint64_t sub_100064ECC(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v16;

  v6 = sub_10000527C(&qword_1000A5E88);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
    return v9(v10, a2, v8);
  }
  v11 = type metadata accessor for AccessoryAndSceneEntity(0);
  v12 = *(_QWORD *)(v11 - 8);
  if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
  {
    v8 = v11;
    v13 = a3[6];
LABEL_7:
    v10 = a1 + v13;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
    return v9(v10, a2, v8);
  }
  v14 = type metadata accessor for WidgetTileInfo(0);
  v12 = *(_QWORD *)(v14 - 8);
  if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
  {
    v8 = v14;
    v13 = a3[7];
    goto LABEL_7;
  }
  v16 = *(_QWORD *)(a1 + a3[10] + 8);
  if (v16 >= 0xFFFFFFFF)
    LODWORD(v16) = -1;
  return (v16 + 1);
}

uint64_t sub_100064FA0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100064FAC);
}

uint64_t sub_100064FAC(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t result;

  v8 = sub_10000527C(&qword_1000A5E88);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
    return v11(v12, a2, a2, v10);
  }
  v13 = type metadata accessor for AccessoryAndSceneEntity(0);
  v14 = *(_QWORD *)(v13 - 8);
  if (*(_DWORD *)(v14 + 84) == a3)
  {
    v10 = v13;
    v15 = a4[6];
LABEL_7:
    v12 = a1 + v15;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
    return v11(v12, a2, a2, v10);
  }
  result = type metadata accessor for WidgetTileInfo(0);
  v14 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v14 + 84) == a3)
  {
    v10 = result;
    v15 = a4[7];
    goto LABEL_7;
  }
  *(_QWORD *)(a1 + a4[10] + 8) = (a2 - 1);
  return result;
}

uint64_t type metadata accessor for LargeSquareTileView(uint64_t a1)
{
  uint64_t result;

  result = qword_1000A6B48;
  if (!qword_1000A6B48)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for LargeSquareTileView);
  return result;
}

void sub_1000650B8(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  _QWORD v8[8];

  sub_10006518C(319);
  if (v3 <= 0x3F)
  {
    v8[0] = *(_QWORD *)(v2 - 8) + 64;
    v8[1] = "\t";
    v4 = type metadata accessor for AccessoryAndSceneEntity(319);
    if (v5 <= 0x3F)
    {
      v8[2] = *(_QWORD *)(v4 - 8) + 64;
      v6 = type metadata accessor for WidgetTileInfo(319);
      if (v7 <= 0x3F)
      {
        v8[3] = *(_QWORD *)(v6 - 8) + 64;
        v8[4] = &unk_1000891F0;
        v8[5] = &unk_100089208;
        v8[6] = &unk_100089220;
        v8[7] = (char *)&value witness table for Builtin.NativeObject + 64;
        swift_initStructMetadata(a1, 256, 8, v8, a1 + 16);
      }
    }
  }
}

void sub_10006518C(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_1000A5F00)
  {
    v2 = type metadata accessor for WidgetRenderingMode(255);
    v3 = type metadata accessor for Environment.Content(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_1000A5F00);
  }
}

uint64_t sub_1000651E0(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_10008CC8C, 1);
}

uint64_t sub_1000651F0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  unsigned int v23;
  uint64_t v24;
  int v25;
  int v26;
  double v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  char v36;
  double v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  char v46;
  double v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v56;
  uint64_t v57;

  v2 = v1;
  v57 = a1;
  v3 = sub_10000527C(&qword_1000A6B98);
  __chkstk_darwin(v3);
  v5 = (char *)&v56 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_10000527C(&qword_1000A6BA0);
  __chkstk_darwin(v6);
  v8 = (char *)&v56 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_10000527C(&qword_1000A6BA8);
  __chkstk_darwin(v9);
  v11 = (char *)&v56 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_10000527C(&qword_1000A6BB0);
  __chkstk_darwin(v12);
  v14 = (char *)&v56 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((*(_BYTE *)(v1 + *(int *)(type metadata accessor for LargeSquareTileView(0) + 32)) & 1) != 0)
    v15 = sub_100079FF4();
  else
    v15 = sub_10007985C();
  v17 = v15;
  v18 = v16;
  *(_QWORD *)v5 = static HorizontalAlignment.leading.getter(v15);
  *((_QWORD *)v5 + 1) = 0;
  v5[16] = 1;
  v19 = sub_10000527C(&qword_1000A6BB8);
  sub_100065524(v2, v17, v18, (uint64_t)&v5[*(int *)(v19 + 44)]);
  v20 = swift_bridgeObjectRelease(v18);
  v21 = static Edge.Set.leading.getter(v20);
  v22 = v21;
  v23 = static Edge.Set.trailing.getter(v21);
  v24 = Edge.Set.init(rawValue:)(0);
  v25 = Edge.Set.init(rawValue:)(v24);
  if (Edge.Set.init(rawValue:)(v25 & v22) != v22)
    v24 = Edge.Set.init(rawValue:)(v24 | v22);
  v26 = Edge.Set.init(rawValue:)(v24);
  if (Edge.Set.init(rawValue:)(v26 & v23) != v23)
    LOBYTE(v24) = Edge.Set.init(rawValue:)(v24 | v23);
  v27 = EdgeInsets.init(_all:)(12.0);
  v29 = v28;
  v31 = v30;
  v33 = v32;
  sub_100026CB4((uint64_t)v5, (uint64_t)v8, &qword_1000A6B98);
  v34 = &v8[*(int *)(v6 + 36)];
  *v34 = v24;
  *((double *)v34 + 1) = v27;
  *((_QWORD *)v34 + 2) = v29;
  *((_QWORD *)v34 + 3) = v31;
  *((_QWORD *)v34 + 4) = v33;
  v34[40] = 0;
  v35 = sub_100014EFC((uint64_t)v5, &qword_1000A6B98);
  v36 = static Edge.Set.top.getter(v35);
  v37 = EdgeInsets.init(_all:)(14.0);
  v39 = v38;
  v41 = v40;
  v43 = v42;
  sub_100026CB4((uint64_t)v8, (uint64_t)v11, &qword_1000A6BA0);
  v44 = &v11[*(int *)(v9 + 36)];
  *v44 = v36;
  *((double *)v44 + 1) = v37;
  *((_QWORD *)v44 + 2) = v39;
  *((_QWORD *)v44 + 3) = v41;
  *((_QWORD *)v44 + 4) = v43;
  v44[40] = 0;
  v45 = sub_100014EFC((uint64_t)v8, &qword_1000A6BA0);
  v46 = static Edge.Set.bottom.getter(v45);
  v47 = EdgeInsets.init(_all:)(11.0);
  v49 = v48;
  v51 = v50;
  v53 = v52;
  sub_100026CB4((uint64_t)v11, (uint64_t)v14, &qword_1000A6BA8);
  v54 = &v14[*(int *)(v12 + 36)];
  *v54 = v46;
  *((double *)v54 + 1) = v47;
  *((_QWORD *)v54 + 2) = v49;
  *((_QWORD *)v54 + 3) = v51;
  *((_QWORD *)v54 + 4) = v53;
  v54[40] = 0;
  sub_100014EFC((uint64_t)v11, &qword_1000A6BA8);
  return sub_100052E04((uint64_t)v14, v57, &qword_1000A6BB0);
}

uint64_t sub_100065524@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t *v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  char *v64;
  _QWORD *v65;
  void (*v66)(char *, _QWORD, uint64_t);
  uint64_t v67;
  uint64_t result;
  uint64_t v69;
  char *v70;
  char *v71;
  char *v72;
  void (*v73)(char *, char *, uint64_t);
  char *v74;
  void (*v75)(char *, char *, uint64_t);
  uint64_t v76;
  void (*v77)(char *, uint64_t);
  char *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  char *v83;
  uint64_t v84;
  _QWORD *v85;
  uint64_t KeyPath;
  int v87;
  uint64_t v88;
  unsigned int *v89;
  uint64_t v90;
  char *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  char v105;
  int *v106;
  uint64_t v107;
  uint64_t v108;
  char *v109;
  char *v110;
  uint64_t v111;
  char *v112;
  char *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  char *v118;
  char *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  char *v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  char *v131;
  char *v132;
  _QWORD *v133;
  unint64_t v134;
  uint64_t v135;
  _QWORD *v136;

  v134 = a3;
  v135 = a2;
  v129 = a4;
  v5 = type metadata accessor for LargeSquareTileView(0);
  __chkstk_darwin(v5);
  v125 = (uint64_t)&v106 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for ColorScheme(0);
  v127 = *(_QWORD *)(v7 - 8);
  v128 = v7;
  __chkstk_darwin(v7);
  v126 = (char *)&v106 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v115 = sub_10000527C(&qword_1000A5F90);
  v9 = __chkstk_darwin(v115);
  v109 = (char *)&v106 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v113 = (char *)&v106 - v11;
  v12 = type metadata accessor for DynamicTypeSize(0);
  v133 = *(_QWORD **)(v12 - 8);
  v13 = __chkstk_darwin(v12);
  v132 = (char *)&v106 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  v131 = (char *)&v106 - v15;
  v116 = sub_10000527C(&qword_1000A5F98);
  v16 = __chkstk_darwin(v116);
  v112 = (char *)&v106 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  v114 = (uint64_t)&v106 - v18;
  v130 = type metadata accessor for DeviceDisplayNames(0);
  v19 = *(_QWORD *)(v130 - 8);
  __chkstk_darwin(v130);
  v21 = (char *)&v106 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v111 = type metadata accessor for TileNameAndStatusView(0);
  __chkstk_darwin(v111);
  v136 = (int **)((char *)&v106 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0));
  v23 = sub_10000527C(&qword_1000A6858);
  v120 = *(_QWORD *)(v23 - 8);
  v121 = v23;
  __chkstk_darwin(v23);
  v110 = (char *)&v106 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v117 = sub_10000527C(&qword_1000A6860);
  v25 = __chkstk_darwin(v117);
  v124 = (uint64_t)&v106 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = __chkstk_darwin(v25);
  v118 = (char *)&v106 - v28;
  __chkstk_darwin(v27);
  v123 = (uint64_t)&v106 - v29;
  v30 = sub_10000527C(&qword_1000A6BC0);
  v31 = __chkstk_darwin(v30);
  v122 = (uint64_t)&v106 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  v33 = __chkstk_darwin(v31);
  v35 = (char *)&v106 - v34;
  v36 = __chkstk_darwin(v33);
  v38 = (char *)&v106 - v37;
  *(_QWORD *)v35 = static VerticalAlignment.center.getter(v36, v39, v40, v41, v42, v43);
  *((_QWORD *)v35 + 1) = 0;
  v35[16] = 1;
  v44 = sub_10000527C(&qword_1000A6BC8);
  sub_100065DF4(a1, (uint64_t)&v35[*(int *)(v44 + 44)]);
  v119 = v38;
  sub_100052E04((uint64_t)v35, (uint64_t)v38, &qword_1000A6BC0);
  v45 = a1 + *(int *)(v5 + 28);
  v106 = (int *)type metadata accessor for WidgetTileInfo(0);
  v46 = v106[6];
  v47 = (uint64_t *)(v45 + v106[7]);
  v49 = *v47;
  v48 = v47[1];
  v50 = *(_QWORD *)(v45 + v46);
  v51 = *(_QWORD *)(v45 + v46 + 8);
  swift_bridgeObjectRetain_n(v48, 2);
  swift_bridgeObjectRetain(v51);
  v52 = DeviceDisplayNames.init(name:roomName:)(v50, v51, v49, v48);
  v53 = DeviceDisplayNames.displayName.getter(v52);
  v55 = v54;
  v56 = (*(uint64_t (**)(char *, uint64_t))(v19 + 8))(v21, v130);
  v57 = static Font.subheadline.getter(v56);
  v107 = v5;
  v58 = *(int *)(v5 + 32);
  v130 = a1;
  v108 = v58;
  LOBYTE(v5) = *(_BYTE *)(a1 + v58);
  sub_100017778();
  LOBYTE(v21) = v59;
  v60 = v134;
  swift_bridgeObjectRetain(v134);
  v61 = v49;
  v62 = v55;
  v64 = v131;
  v63 = v132;
  TileNameAndStatusView.init(roomName:name:statusString:font:tileStyle:isActivated:isInFlight:)(v61, v48, v53, v62, v135, v60, v57, 2, v136, v5 & 1, v21 & 1);
  v65 = v133;
  v66 = (void (*)(char *, _QWORD, uint64_t))v133[13];
  v66(v64, enum case for DynamicTypeSize.xSmall(_:), v12);
  v66(v63, enum case for DynamicTypeSize.accessibility2(_:), v12);
  v67 = sub_100008C7C(&qword_1000A6000, (uint64_t (*)(uint64_t))&type metadata accessor for DynamicTypeSize, (uint64_t)&protocol conformance descriptor for DynamicTypeSize);
  result = dispatch thunk of static Comparable.<= infix(_:_:)(v64, v63, v12, v67);
  if ((result & 1) != 0)
  {
    v69 = v115;
    v70 = v113;
    v71 = &v113[*(int *)(v115 + 48)];
    v72 = v109;
    v73 = (void (*)(char *, char *, uint64_t))v65[4];
    v73(v113, v64, v12);
    v73(v71, v63, v12);
    v74 = &v72[*(int *)(v69 + 48)];
    v75 = (void (*)(char *, char *, uint64_t))v65[2];
    v75(v72, v70, v12);
    v75(v74, v71, v12);
    v76 = (uint64_t)v112;
    v73(v112, v72, v12);
    v77 = (void (*)(char *, uint64_t))v65[1];
    v77(v74, v12);
    v78 = &v72[*(int *)(v69 + 48)];
    v73(v72, v70, v12);
    v73(v78, v71, v12);
    v79 = v116;
    v73((char *)(v76 + *(int *)(v116 + 36)), v78, v12);
    v77(v72, v12);
    v80 = v114;
    sub_100052E04(v76, v114, &qword_1000A5F98);
    v81 = sub_100008C7C(&qword_1000A6868, type metadata accessor for TileNameAndStatusView, (uint64_t)&protocol conformance descriptor for TileNameAndStatusView);
    v82 = sub_1000229D8(&qword_1000A6038, &qword_1000A5F98, (uint64_t)&protocol conformance descriptor for ClosedRange<A>);
    v83 = v110;
    v84 = v81;
    v85 = v136;
    View.dynamicTypeSize<A>(_:)(v80, v111, v79, v84, v82);
    sub_100014EFC(v80, &qword_1000A5F98);
    sub_100026C78((uint64_t)v85, type metadata accessor for TileNameAndStatusView);
    KeyPath = swift_getKeyPath(&unk_100089288);
    v87 = *(unsigned __int8 *)(v130 + v108);
    if (v87 == 2)
    {
      v88 = v125;
      sub_100026C34(v130, v125, type metadata accessor for LargeSquareTileView);
    }
    else
    {
      v88 = v125;
      sub_100026C34(v130, v125, type metadata accessor for LargeSquareTileView);
      if ((v87 & 1) != 0)
      {
        v105 = *(_BYTE *)(v88 + *(int *)(v107 + 28) + v106[13]);
        sub_100026C78(v88, type metadata accessor for LargeSquareTileView);
        if ((v105 & 1) != 0)
        {
          v89 = (unsigned int *)&enum case for ColorScheme.light(_:);
          goto LABEL_7;
        }
LABEL_6:
        v89 = (unsigned int *)&enum case for ColorScheme.dark(_:);
LABEL_7:
        v91 = v126;
        v90 = v127;
        v92 = v128;
        (*(void (**)(char *, _QWORD, uint64_t))(v127 + 104))(v126, *v89, v128);
        v93 = (uint64_t)v118;
        v94 = (uint64_t *)&v118[*(int *)(v117 + 36)];
        v95 = sub_10000527C(&qword_1000A6870);
        (*(void (**)(char *, char *, uint64_t))(v90 + 16))((char *)v94 + *(int *)(v95 + 28), v91, v92);
        *v94 = KeyPath;
        v97 = v120;
        v96 = v121;
        (*(void (**)(uint64_t, char *, uint64_t))(v120 + 16))(v93, v83, v121);
        (*(void (**)(char *, uint64_t))(v90 + 8))(v91, v92);
        (*(void (**)(char *, uint64_t))(v97 + 8))(v83, v96);
        v98 = v123;
        sub_100052E04(v93, v123, &qword_1000A6860);
        v99 = (uint64_t)v119;
        v100 = v122;
        sub_100026CB4((uint64_t)v119, v122, &qword_1000A6BC0);
        v101 = v124;
        sub_100026CB4(v98, v124, &qword_1000A6860);
        v102 = v129;
        sub_100026CB4(v100, v129, &qword_1000A6BC0);
        v103 = sub_10000527C(&qword_1000A6BD0);
        v104 = v102 + *(int *)(v103 + 48);
        *(_QWORD *)v104 = 0x4000000000000000;
        *(_BYTE *)(v104 + 8) = 0;
        sub_100026CB4(v101, v102 + *(int *)(v103 + 64), &qword_1000A6860);
        sub_100014EFC(v98, &qword_1000A6860);
        sub_100014EFC(v99, &qword_1000A6BC0);
        sub_100014EFC(v101, &qword_1000A6860);
        return sub_100014EFC(v100, &qword_1000A6BC0);
      }
    }
    sub_100026C78(v88, type metadata accessor for LargeSquareTileView);
    goto LABEL_6;
  }
  __break(1u);
  return result;
}

uint64_t sub_100065DF4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char v45;
  char v46;
  uint64_t KeyPath;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unsigned int *v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  int v78;
  int *v79;
  uint64_t v80;
  char v81;
  uint64_t v82;
  uint64_t v83;
  char v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  __n128 v92;
  __n128 v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  char v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  unint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  char *v117;
  char *v118;
  uint64_t v119;
  uint64_t v120;
  char *v121;
  uint64_t v122;
  char *v123;
  char *v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  char *v132;
  char *v133;
  uint64_t v134;
  uint64_t v135;
  char v136;
  uint64_t v137;
  __int16 v138;
  uint64_t v139;
  char v140;
  uint64_t v141;
  uint64_t v142;
  char v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;

  v130 = a2;
  v3 = type metadata accessor for SymbolRenderingMode(0);
  v4 = __chkstk_darwin(v3);
  v126 = (uint64_t)&v112 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v125 = (uint64_t)&v112 - v6;
  v7 = (int *)type metadata accessor for LargeSquareTileView(0);
  v8 = __chkstk_darwin(v7);
  v115 = (uint64_t)&v112 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v114 = (uint64_t)&v112 - v10;
  v128 = sub_10000527C(&qword_1000A6BD8);
  __chkstk_darwin(v128);
  v129 = (uint64_t)&v112 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v123 = (char *)type metadata accessor for ColorScheme(0);
  v122 = *((_QWORD *)v123 - 1);
  __chkstk_darwin(v123);
  v121 = (char *)&v112 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v120 = sub_10000527C(&qword_1000A6BE0);
  v119 = *(_QWORD *)(v120 - 8);
  __chkstk_darwin(v120);
  v118 = (char *)&v112 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v127 = sub_10000527C(&qword_1000A6BE8);
  v14 = __chkstk_darwin(v127);
  v117 = (char *)&v112 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  v124 = (char *)&v112 - v16;
  v116 = type metadata accessor for WidgetRenderingMode(0);
  v17 = *(_QWORD *)(v116 - 8);
  __chkstk_darwin(v116);
  v19 = (char *)&v112 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v131 = type metadata accessor for TileIconView(0);
  v20 = __chkstk_darwin(v131);
  v22 = (char *)&v112 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v20);
  v24 = (char *)&v112 - v23;
  v25 = sub_10000527C(&qword_1000A6BF0);
  v26 = __chkstk_darwin(v25);
  v133 = (char *)&v112 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v26);
  v132 = (char *)&v112 - v28;
  v29 = a1;
  v30 = a1 + v7[7];
  sub_100079B30();
  if (!v32)
  {
    v123 = v22;
    v124 = v24;
    v76 = v30;
    v77 = v7[8];
    v78 = *(unsigned __int8 *)(v29 + v77);
    v79 = v7;
    v80 = v114;
    if (v78 == 2)
    {
      sub_100026C34(v29, v114, type metadata accessor for LargeSquareTileView);
      v81 = 0;
      v82 = v76;
    }
    else
    {
      sub_100026C34(v29, v114, type metadata accessor for LargeSquareTileView);
      v82 = v76;
      if ((v78 & 1) != 0)
      {
        v83 = v80 + v7[7];
        v81 = *(_BYTE *)(v83 + *(int *)(type metadata accessor for WidgetTileInfo(0) + 52));
      }
      else
      {
        v81 = 0;
      }
    }
    sub_100026C78(v80, type metadata accessor for LargeSquareTileView);
    v84 = *(_BYTE *)(v29 + v77);
    v85 = type metadata accessor for WidgetTileInfo(0);
    v86 = v85;
    v87 = 36;
    if ((v84 & 1) == 0)
      v87 = 32;
    v88 = (uint64_t *)(v82 + *(int *)(v85 + v87));
    v89 = v29;
    v90 = *v88;
    v91 = v88[1];
    v92 = swift_bridgeObjectRetain(v91);
    StaticRenderingMode.symbolRenderingMode.getter(v92);
    StaticRenderingMode.symbolRenderingMode.getter(v93);
    v94 = v89;
    v95 = v115;
    sub_100026C34(v94, v115, type metadata accessor for LargeSquareTileView);
    if ((v84 & 1) != 0)
    {
      v100 = *(_BYTE *)(v95 + v79[7] + *(int *)(v86 + 52));
      v96 = sub_100026C78(v95, type metadata accessor for LargeSquareTileView);
      v97 = v129;
      v73 = v130;
      v99 = v127;
      v98 = v128;
      if ((v100 & 1) != 0)
      {
        v101 = *(_QWORD *)(v82 + *(int *)(v86 + 48));
        v102 = swift_retain(v101);
LABEL_18:
        v103 = static Alignment.leading.getter(v102);
        v104 = (uint64_t)v123;
        TileIconView.init(isActivated:iconSymbol:iconSymbolRenderingMode:iconSymbolActivatedRenderingMode:iconColor:imageContainerDimension:symbolFontSize:iconAlignment:)(v81, v90, v91, v125, v126, v101, v103, v105, (uint64_t)v123, 44.0, 34.0);
        v106 = v104;
        v107 = (uint64_t)v124;
        sub_100066728(v106, (uint64_t)v124);
        sub_100026C34(v107, v97, type metadata accessor for TileIconView);
        swift_storeEnumTagMultiPayload(v97, v98, 1);
        v108 = sub_10006676C();
        v109 = sub_100008C7C(&qword_1000A6960, type metadata accessor for TileIconView, (uint64_t)&protocol conformance descriptor for TileIconView);
        v75 = (uint64_t)v132;
        _ConditionalContent<>.init(storage:)(v97, v99, v131, v108, v109);
        sub_100026C78(v107, type metadata accessor for TileIconView);
        v74 = (uint64_t)v133;
        goto LABEL_19;
      }
    }
    else
    {
      v96 = sub_100026C78(v95, type metadata accessor for LargeSquareTileView);
      v97 = v129;
      v73 = v130;
      v99 = v127;
      v98 = v128;
    }
    v102 = static Color.white.getter(v96);
    v101 = v102;
    goto LABEL_18;
  }
  v33 = v31;
  v34 = v32;
  sub_10006215C((uint64_t)v19);
  v35 = a1 + v7[5];
  v36 = *(_QWORD *)v35;
  v37 = *(_BYTE *)(v35 + 8);
  sub_100035568(*(_QWORD *)v35, v37);
  sub_100061B38(v36, v37);
  sub_10003561C(v36, v37);
  v113 = v30;
  v38 = sub_10001BBEC((uint64_t)v19);
  (*(void (**)(char *, uint64_t))(v17 + 8))(v19, v116);
  v134 = v33;
  v135 = v34;
  v39 = sub_100005300();
  v40 = Text.init<A>(_:)(&v134, &type metadata for String, v39);
  v42 = v41;
  v44 = v43;
  v126 = v43;
  v46 = v45 & 1;
  KeyPath = swift_getKeyPath(&unk_1000892B8);
  v125 = KeyPath;
  v48 = swift_getKeyPath(&unk_1000892E8);
  v49 = static Font.largeTitle.getter();
  v50 = Font.bold()();
  swift_release(v49);
  v51 = swift_getKeyPath(&unk_100089318);
  v134 = v40;
  v135 = v42;
  v136 = v46;
  v137 = v44;
  v138 = 256;
  v139 = KeyPath;
  v140 = 1;
  v141 = v48;
  v142 = 1;
  v143 = 0;
  v144 = v51;
  v145 = v50;
  v52 = v38;
  v146 = v38;
  swift_retain(v38);
  v53 = sub_10000527C(&qword_1000A6C00);
  v54 = sub_100066818();
  v55 = v118;
  View.monospacedDigit()(v53, v54);
  sub_1000493D4(v40, v42, v46);
  swift_release(v52);
  swift_release(v50);
  swift_release(v51);
  swift_release(v48);
  swift_release(v125);
  swift_bridgeObjectRelease(v126);
  v56 = swift_getKeyPath(&unk_100089288);
  v57 = type metadata accessor for WidgetTileInfo(0);
  v58 = v122;
  if (*(_BYTE *)(v113 + *(int *)(v57 + 52)))
    v59 = (unsigned int *)&enum case for ColorScheme.light(_:);
  else
    v59 = (unsigned int *)&enum case for ColorScheme.dark(_:);
  v60 = v121;
  v61 = (uint64_t)v123;
  (*(void (**)(char *, _QWORD, char *))(v122 + 104))(v121, *v59, v123);
  v62 = v127;
  v63 = (uint64_t)v117;
  v64 = (uint64_t *)&v117[*(int *)(v127 + 36)];
  v65 = sub_10000527C(&qword_1000A6870);
  (*(void (**)(char *, char *, uint64_t))(v58 + 16))((char *)v64 + *(int *)(v65 + 28), v60, v61);
  *v64 = v56;
  v66 = v119;
  v67 = v120;
  (*(void (**)(uint64_t, char *, uint64_t))(v119 + 16))(v63, v55, v120);
  (*(void (**)(char *, uint64_t))(v58 + 8))(v60, v61);
  (*(void (**)(char *, uint64_t))(v66 + 8))(v55, v67);
  v68 = (uint64_t)v124;
  sub_100052E04(v63, (uint64_t)v124, &qword_1000A6BE8);
  v69 = v129;
  sub_100026CB4(v68, v129, &qword_1000A6BE8);
  swift_storeEnumTagMultiPayload(v69, v128, 0);
  v70 = sub_10006676C();
  v71 = sub_100008C7C(&qword_1000A6960, type metadata accessor for TileIconView, (uint64_t)&protocol conformance descriptor for TileIconView);
  v72 = v132;
  _ConditionalContent<>.init(storage:)(v69, v62, v131, v70, v71);
  swift_release(v52);
  sub_100014EFC(v68, &qword_1000A6BE8);
  v73 = v130;
  v74 = (uint64_t)v133;
  v75 = (uint64_t)v72;
LABEL_19:
  sub_100026CB4(v75, v74, &qword_1000A6BF0);
  sub_100026CB4(v74, v73, &qword_1000A6BF0);
  v110 = v73 + *(int *)(sub_10000527C(&qword_1000A6C50) + 48);
  *(_QWORD *)v110 = 0;
  *(_BYTE *)(v110 + 8) = 1;
  sub_100014EFC(v75, &qword_1000A6BF0);
  return sub_100014EFC(v74, &qword_1000A6BF0);
}

uint64_t sub_100066728(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for TileIconView(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

unint64_t sub_10006676C()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_1000A6BF8;
  if (!qword_1000A6BF8)
  {
    v1 = sub_1000052BC(&qword_1000A6BE8);
    v2[0] = sub_1000052BC(&qword_1000A6C00);
    v2[1] = sub_100066818();
    swift_getOpaqueTypeConformance2(v2, &opaque type descriptor for <<opaque return type of View.monospacedDigit()>>, 1);
    sub_1000229D8(&qword_1000A6958, &qword_1000A6870, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000A6BF8);
  }
  return result;
}

unint64_t sub_100066818()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000A6C08;
  if (!qword_1000A6C08)
  {
    v1 = sub_1000052BC(&qword_1000A6C00);
    sub_10006689C();
    sub_1000229D8(&qword_1000A6948, &qword_1000A6950, (uint64_t)&protocol conformance descriptor for _ForegroundStyleModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000A6C08);
  }
  return result;
}

unint64_t sub_10006689C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000A6C10;
  if (!qword_1000A6C10)
  {
    v1 = sub_1000052BC(&qword_1000A6C18);
    sub_100066920();
    sub_1000229D8(&qword_1000A5FF0, &qword_1000A5FF8, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000A6C10);
  }
  return result;
}

unint64_t sub_100066920()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000A6C20;
  if (!qword_1000A6C20)
  {
    v1 = sub_1000052BC(&qword_1000A6C28);
    sub_1000669A4();
    sub_1000229D8(&qword_1000A6938, &qword_1000A6940, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000A6C20);
  }
  return result;
}

unint64_t sub_1000669A4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000A6C30;
  if (!qword_1000A6C30)
  {
    v1 = sub_1000052BC(&qword_1000A6C38);
    sub_100066A28();
    sub_1000229D8(&qword_1000A6928, &qword_1000A6930, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000A6C30);
  }
  return result;
}

unint64_t sub_100066A28()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000A6C40;
  if (!qword_1000A6C40)
  {
    v1 = sub_1000052BC(&qword_1000A6C48);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000A6C40);
  }
  return result;
}

uint64_t sub_100066AA4()
{
  return sub_100066AEC(&qword_1000A6C58, &qword_1000A6BB0, (void (*)(void))sub_100066AD0);
}

uint64_t sub_100066AD0()
{
  return sub_100066AEC(&qword_1000A6C60, &qword_1000A6BA8, (void (*)(void))sub_100066B58);
}

uint64_t sub_100066AEC(unint64_t *a1, uint64_t *a2, void (*a3)(void))
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    v6 = sub_1000052BC(a2);
    a3();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v6);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_100066B58()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000A6C68;
  if (!qword_1000A6C68)
  {
    v1 = sub_1000052BC(&qword_1000A6BA0);
    sub_1000229D8(&qword_1000A6C70, &qword_1000A6B98, (uint64_t)&protocol conformance descriptor for VStack<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000A6C68);
  }
  return result;
}

uint64_t TileNameAndStatusView.init(roomName:name:statusString:font:tileStyle:isActivated:isInFlight:)@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, unint64_t a6@<X5>, uint64_t a7@<X6>, char a8@<W7>, _QWORD *a9@<X8>, unsigned __int8 a10, unsigned __int8 a11)
{
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  int *v21;
  _QWORD *v22;
  uint64_t v23;
  _QWORD *v24;
  char v25;
  uint64_t v26;
  unint64_t v27;
  _QWORD *v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  unint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t result;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  int v44;
  int v45;

  v42 = a6;
  v43 = a7;
  v39 = a5;
  v40 = a3;
  v41 = a4;
  v44 = a10;
  v45 = a11;
  v15 = 0xEB00000000657261;
  v16 = type metadata accessor for Font.Leading(0);
  v17 = *(_QWORD *)(v16 - 8);
  __chkstk_darwin(v16);
  v19 = (char *)&v39 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  *a9 = swift_getKeyPath(&unk_100089360);
  v20 = sub_10000527C(&qword_1000A4FD0);
  swift_storeEnumTagMultiPayload(a9, v20, 0);
  v21 = (int *)type metadata accessor for TileNameAndStatusView(0);
  v22 = (_QWORD *)((char *)a9 + v21[5]);
  *v22 = swift_getKeyPath(&unk_100089390);
  v23 = sub_10000527C(&qword_1000A4FC0);
  v24 = v22;
  v25 = a8;
  swift_storeEnumTagMultiPayload(v24, v23, 0);
  if (a2)
    v26 = a1;
  else
    v26 = 0;
  v27 = 0xE000000000000000;
  if (a2)
    v27 = a2;
  v28 = (_QWORD *)((char *)a9 + v21[6]);
  *v28 = v26;
  v28[1] = v27;
  v29 = (_QWORD *)((char *)a9 + v21[7]);
  v30 = v41;
  *v29 = v40;
  v29[1] = v30;
  if (!a8)
  {
    v15 = 0xE900000000000065;
    v31 = 0x6C676E6174636572;
LABEL_12:
    v32 = _stringCompareWithSmolCheck(_:_:expecting:)(v31, v15, 0x7571536C6C616D73, 0xEB00000000657261, 0);
    swift_bridgeObjectRelease(v15);
    if (!a2 || (v32 & 1) == 0)
      goto LABEL_15;
LABEL_14:
    swift_bridgeObjectRelease(v42);
    v33 = 0;
    v34 = 0;
    goto LABEL_19;
  }
  if (a8 != 1)
  {
    v31 = 0x757153656772616CLL;
    goto LABEL_12;
  }
  swift_bridgeObjectRelease(0xEB00000000657261);
  if (a2)
    goto LABEL_14;
LABEL_15:
  v33 = v39;
  if (!v42)
    v33 = 0;
  v34 = 0xE000000000000000;
  if (v42)
    v34 = v42;
LABEL_19:
  v35 = (_QWORD *)((char *)a9 + v21[8]);
  *v35 = v33;
  v35[1] = v34;
  (*(void (**)(char *, _QWORD, uint64_t))(v17 + 104))(v19, enum case for Font.Leading.tight(_:), v16);
  v36 = v43;
  v37 = Font.leading(_:)(v19, v43);
  swift_release(v36);
  result = (*(uint64_t (**)(char *, uint64_t))(v17 + 8))(v19, v16);
  *(_QWORD *)((char *)a9 + v21[9]) = v37;
  *((_BYTE *)a9 + v21[10]) = v25;
  *((_BYTE *)a9 + v21[11]) = v44 & 1;
  *((_BYTE *)a9 + v21[12]) = v45 & 1;
  return result;
}

uint64_t sub_100066E68@<X0>(unsigned __int16 a1@<W1>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char v13;
  void (*v14)(char *, uint64_t);
  uint64_t v15;
  uint64_t result;
  char v17;
  unint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v4 = type metadata accessor for WidgetRenderingMode(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = __chkstk_darwin(v4);
  v8 = (char *)&v25 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __chkstk_darwin(v6);
  v11 = (char *)&v25 - v10;
  v12 = EnvironmentValues.widgetRenderingMode.getter(v9);
  static WidgetRenderingMode.vibrant.getter(v12);
  v13 = static WidgetRenderingMode.== infix(_:_:)(v11, v8);
  v14 = *(void (**)(char *, uint64_t))(v5 + 8);
  v14(v8, v4);
  v15 = ((uint64_t (*)(char *, uint64_t))v14)(v11, v4);
  if ((v13 & 1) != 0 && (a1 & 1) == 0)
  {
    result = static Color.white.getter(v15);
LABEL_13:
    v24 = result;
    goto LABEL_14;
  }
  v17 = a1;
  v18 = 0xEB00000000657261;
  v19 = HIBYTE(a1);
  if (v19)
  {
    if (v19 == 1)
    {
      v20 = swift_bridgeObjectRelease(0xEB00000000657261);
LABEL_12:
      result = static Color.primary.getter(v20);
      goto LABEL_13;
    }
    v21 = 0x757153656772616CLL;
  }
  else
  {
    v18 = 0xE900000000000065;
    v21 = 0x6C676E6174636572;
  }
  v22 = _stringCompareWithSmolCheck(_:_:expecting:)(v21, v18, 0x7571536C6C616D73, 0xEB00000000657261, 0);
  v20 = swift_bridgeObjectRelease(v18);
  if ((v22 & 1) != 0 || (v17 & 1) != 0)
    goto LABEL_12;
  v23 = static Color.secondary.getter(v20);
  v24 = Color.opacity(_:)(0.9);
  result = swift_release(v23);
LABEL_14:
  *a2 = v24;
  return result;
}

uint64_t sub_100067014(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return static ShapeStyle._makeView<A>(view:inputs:)(a1, a2, a5, a3, a6, a4);
}

uint64_t sub_100067034@<X0>(uint64_t *a1@<X8>)
{
  unsigned __int8 *v1;

  return sub_100066E68(*v1 | (unsigned __int16)(v1[1] << 8), a1);
}

uint64_t sub_100067044()
{
  return EnvironmentValues.sizeCategory.getter();
}

uint64_t sub_100067064(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v7;

  v2 = type metadata accessor for ContentSizeCategory(0);
  __chkstk_darwin(v2);
  v4 = (char *)&v7 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t))(v5 + 16))(v4, a1);
  return EnvironmentValues.sizeCategory.setter(v4);
}

uint64_t TileNameAndStatusView.roomName.getter()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v1 = (uint64_t *)(v0 + *(int *)(type metadata accessor for TileNameAndStatusView(0) + 24));
  v2 = *v1;
  swift_bridgeObjectRetain(v1[1]);
  return v2;
}

uint64_t TileNameAndStatusView.name.getter()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v1 = (uint64_t *)(v0 + *(int *)(type metadata accessor for TileNameAndStatusView(0) + 28));
  v2 = *v1;
  swift_bridgeObjectRetain(v1[1]);
  return v2;
}

uint64_t TileNameAndStatusView.statusString.getter()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v1 = (uint64_t *)(v0 + *(int *)(type metadata accessor for TileNameAndStatusView(0) + 32));
  v2 = *v1;
  swift_bridgeObjectRetain(v1[1]);
  return v2;
}

uint64_t TileNameAndStatusView.font.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = type metadata accessor for TileNameAndStatusView(0);
  return swift_retain(*(_QWORD *)(v0 + *(int *)(v1 + 36)));
}

uint64_t TileNameAndStatusView.tileStyle.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for TileNameAndStatusView(0) + 40));
}

uint64_t TileNameAndStatusView.isActivated.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for TileNameAndStatusView(0) + 44));
}

BOOL sub_1000671F4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  _QWORD *v9;
  unint64_t v10;
  uint64_t v11;
  BOOL v13;
  unsigned int *v14;
  void (*v15)(char *, uint64_t);
  uint64_t v17;

  v1 = type metadata accessor for ContentSizeCategory(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = __chkstk_darwin(v1);
  v5 = (char *)&v17 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  v7 = (char *)&v17 - v6;
  v8 = type metadata accessor for TileNameAndStatusView(0);
  v9 = (_QWORD *)(v0 + *(int *)(v8 + 32));
  v10 = v9[1];
  if (v10)
  {
    v11 = *v9 & 0xFFFFFFFFFFFFLL;
    if (!((v10 & 0x2000000000000000) != 0 ? HIBYTE(v10) & 0xF : v11))
      return 0;
  }
  if (!*(_BYTE *)(v0 + *(int *)(v8 + 40)))
  {
    v14 = (unsigned int *)&enum case for ContentSizeCategory.extraExtraLarge(_:);
LABEL_11:
    sub_100062188((uint64_t)v7);
    (*(void (**)(char *, _QWORD, uint64_t))(v2 + 104))(v5, *v14, v1);
    v13 = sub_100069E9C((uint64_t)v7, (uint64_t)v5);
    v15 = *(void (**)(char *, uint64_t))(v2 + 8);
    v15(v5, v1);
    v15(v7, v1);
    return v13;
  }
  if (*(_BYTE *)(v0 + *(int *)(v8 + 40)) != 1)
  {
    v14 = (unsigned int *)&enum case for ContentSizeCategory.extraExtraExtraLarge(_:);
    goto LABEL_11;
  }
  return 0;
}

uint64_t sub_100067320()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  char *v7;
  int *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  char v27;
  char *v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  BOOL v34;
  void (*v35)(char *, uint64_t);
  uint64_t v36;
  unint64_t v37;
  char v38;
  BOOL v39;
  uint64_t v40;
  char v41;
  uint64_t v43;
  uint64_t v44;

  v1 = v0;
  v2 = type metadata accessor for ContentSizeCategory(0);
  v43 = *(_QWORD *)(v2 - 8);
  v3 = __chkstk_darwin(v2);
  v5 = (char *)&v43 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  v7 = (char *)&v43 - v6;
  v8 = (int *)type metadata accessor for TileNameAndStatusView(0);
  v9 = __chkstk_darwin(v8);
  v44 = (uint64_t)&v43 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __chkstk_darwin(v9);
  v13 = (char *)&v43 - v12;
  v14 = __chkstk_darwin(v11);
  v16 = (char *)&v43 - v15;
  v17 = __chkstk_darwin(v14);
  v19 = (char *)&v43 - v18;
  v20 = __chkstk_darwin(v17);
  v22 = (char *)&v43 - v21;
  v23 = *(_QWORD *)(v1 + *(int *)(v20 + 32) + 8);
  sub_100069C38(v1, (uint64_t)&v43 - v21);
  if (!v23)
    goto LABEL_9;
  v24 = &v22[v8[8]];
  v25 = *((_QWORD *)v24 + 1);
  if (!v25)
  {
    sub_100069C7C((uint64_t)v22);
    sub_100069C38(v1, (uint64_t)v19);
    goto LABEL_20;
  }
  if (!*(_QWORD *)v24 && v25 == 0xE000000000000000)
  {
LABEL_9:
    sub_100069C7C((uint64_t)v22);
    sub_100069C38(v1, (uint64_t)v19);
    goto LABEL_10;
  }
  v27 = _stringCompareWithSmolCheck(_:_:expecting:)(*(_QWORD *)v24, v25, 0, 0xE000000000000000, 0);
  sub_100069C7C((uint64_t)v22);
  sub_100069C38(v1, (uint64_t)v19);
  if ((v27 & 1) != 0)
  {
LABEL_10:
    sub_100069C7C((uint64_t)v19);
    sub_100069C38(v1, (uint64_t)v16);
    goto LABEL_11;
  }
LABEL_20:
  v39 = sub_1000671F4();
  sub_100069C7C((uint64_t)v19);
  sub_100069C38(v1, (uint64_t)v16);
  if (!v39)
  {
LABEL_11:
    v28 = &v16[v8[6]];
    v30 = *(_QWORD *)v28;
    v29 = *((_QWORD *)v28 + 1);
    v31 = v30 & 0xFFFFFFFFFFFFLL;
    if ((v29 & 0x2000000000000000) != 0)
      v32 = HIBYTE(v29) & 0xF;
    else
      v32 = v31;
    sub_100069C7C((uint64_t)v16);
    sub_100069C38(v1, (uint64_t)v13);
    if (v32)
      goto LABEL_22;
    sub_100062188((uint64_t)v7);
    v33 = v43;
    (*(void (**)(char *, _QWORD, uint64_t))(v43 + 104))(v5, enum case for ContentSizeCategory.extraLarge(_:), v2);
    v34 = sub_10006A224((uint64_t)v7, (uint64_t)v5);
    v35 = *(void (**)(char *, uint64_t))(v33 + 8);
    v35(v5, v2);
    v35(v7, v2);
    v36 = v44;
    sub_100069C38((uint64_t)v13, v44);
    if (v34)
    {
      v37 = 0xEB00000000657261;
      if (*(_BYTE *)(v36 + v8[10]))
      {
        if (*(_BYTE *)(v36 + v8[10]) == 1)
        {
          swift_bridgeObjectRelease(0xEB00000000657261);
          v38 = 0;
LABEL_27:
          sub_100069C7C(v36);
          goto LABEL_28;
        }
        v40 = 0x757153656772616CLL;
      }
      else
      {
        v37 = 0xE900000000000065;
        v40 = 0x6C676E6174636572;
      }
      v41 = _stringCompareWithSmolCheck(_:_:expecting:)(v40, v37, 0x7571536C6C616D73, 0xEB00000000657261, 0);
      swift_bridgeObjectRelease(v37);
      v38 = v41 ^ 1;
      goto LABEL_27;
    }
    v38 = 1;
    goto LABEL_27;
  }
  sub_100069C7C((uint64_t)v16);
  sub_100069C38(v1, (uint64_t)v13);
LABEL_22:
  v38 = 0;
LABEL_28:
  sub_100069C7C((uint64_t)v13);
  return v38 & 1;
}

uint64_t TileNameAndStatusView.body.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;

  v2 = v1;
  v4 = type metadata accessor for Material(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v20 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_10000527C(&qword_1000A6C78);
  __chkstk_darwin(v8);
  v10 = (char *)&v20 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_10000527C(&qword_1000A6C80);
  v12 = __chkstk_darwin(v11);
  v14 = (char *)&v20 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = static HorizontalAlignment.leading.getter(v12);
  v16 = *(unsigned __int8 *)(v2 + *(int *)(type metadata accessor for TileNameAndStatusView(0) + 40)) == 1;
  *(_QWORD *)v10 = v15;
  *((_QWORD *)v10 + 1) = v16 << 62;
  v10[16] = 0;
  v17 = sub_10000527C(&qword_1000A6C88);
  v18 = sub_100067844(v2, (uint64_t)&v10[*(int *)(v17 + 44)]);
  static Material.ultraThick.getter(v18);
  (*(void (**)(char *, char *, uint64_t))(v5 + 16))(&v14[*(int *)(v11 + 36)], v7, v4);
  sub_100026CB4((uint64_t)v10, (uint64_t)v14, &qword_1000A6C78);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  sub_100014EFC((uint64_t)v10, &qword_1000A6C78);
  return sub_100052E04((uint64_t)v14, a1, &qword_1000A6C80);
}

uint64_t sub_100067844@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t *v41;
  uint64_t v42;
  __n128 v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t v47;
  char v48;
  uint64_t v49;
  unint64_t v50;
  char v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  BOOL v57;
  void (*v58)(uint64_t, uint64_t);
  int *v59;
  char *v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char v69;
  char v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t KeyPath;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;
  uint64_t v77;
  int v78;
  uint64_t v79;
  unint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  char v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  char v88;
  char v89;
  char *v90;
  uint64_t v91;
  unint64_t v92;
  char *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  int v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  int v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  int v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  char *v125;
  char v126;
  void (*v127)(char *, uint64_t);
  char *v128;
  uint64_t v129;
  uint64_t v130;
  char *v131;
  uint64_t v132;
  unint64_t v133;
  char *v134;
  uint64_t v135;
  unint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t *v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  char *v154;
  uint64_t v155;
  uint64_t v156;
  void (*v157)(char *, char *, uint64_t);
  char *v158;
  uint64_t v159;
  void (*v160)(char *, uint64_t);
  uint64_t v162;
  char *v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  char *v167;
  char *v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  char *v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  char *v178;
  uint64_t *v179;
  uint64_t v180;
  char *v181;
  char *v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  unint64_t v186;
  char *v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  int *v191;
  char *v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  char v196;
  uint64_t v197;
  uint64_t v198;
  unint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;

  v180 = a2;
  v3 = sub_10000527C(&qword_1000A6D60);
  v4 = __chkstk_darwin(v3);
  v181 = (char *)&v162 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v179 = (uint64_t *)((char *)&v162 - v6);
  v175 = type metadata accessor for WidgetRenderingMode(0);
  v174 = *(_QWORD *)(v175 - 8);
  v7 = __chkstk_darwin(v175);
  v173 = (char *)&v162 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v172 = (uint64_t)&v162 - v9;
  v185 = sub_10000527C(&qword_1000A6D68);
  v184 = *(_QWORD *)(v185 - 8);
  v10 = __chkstk_darwin(v185);
  v178 = (char *)&v162 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __chkstk_darwin(v10);
  v182 = (char *)&v162 - v13;
  __chkstk_darwin(v12);
  v192 = (char *)&v162 - v14;
  v15 = type metadata accessor for Text.Sizing(0);
  v188 = *(_QWORD *)(v15 - 8);
  v189 = v15;
  __chkstk_darwin(v15);
  v187 = (char *)&v162 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v170 = sub_10000527C(&qword_1000A6D70);
  v169 = *(_QWORD *)(v170 - 8);
  __chkstk_darwin(v170);
  v168 = (char *)&v162 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v177 = sub_10000527C(&qword_1000A6D78);
  v176 = *(_QWORD *)(v177 - 8);
  v18 = __chkstk_darwin(v177);
  v167 = (char *)&v162 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18);
  v166 = (uint64_t)&v162 - v20;
  v21 = sub_10000527C(&qword_1000A6D80);
  v22 = __chkstk_darwin(v21);
  v183 = (uint64_t)&v162 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v22);
  v193 = (uint64_t)&v162 - v24;
  v165 = type metadata accessor for ContentSizeCategory(0);
  v164 = *(_QWORD *)(v165 - 8);
  v25 = __chkstk_darwin(v165);
  v163 = (char *)&v162 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v25);
  v162 = (uint64_t)&v162 - v27;
  v28 = type metadata accessor for TileNameAndStatusView(0);
  v29 = __chkstk_darwin(v28);
  v31 = (char *)&v162 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  v32 = __chkstk_darwin(v29);
  v34 = (char *)&v162 - v33;
  __chkstk_darwin(v32);
  v36 = (char *)&v162 - v35;
  v37 = type metadata accessor for CharacterSet(0);
  v38 = *(_QWORD *)(v37 - 8);
  __chkstk_darwin(v37);
  v40 = (char *)&v162 - ((v39 + 15) & 0xFFFFFFFFFFFFFFF0);
  v41 = (uint64_t *)(a1 + *(int *)(v28 + 24));
  v42 = v41[1];
  v194 = *v41;
  v195 = v42;
  v43 = swift_bridgeObjectRetain(v42);
  static CharacterSet.whitespacesAndNewlines.getter(v43);
  v186 = sub_100005300();
  v171 = StringProtocol.trimmingCharacters(in:)(v40, &type metadata for String);
  v45 = v44;
  (*(void (**)(char *, uint64_t))(v38 + 8))(v40, v37);
  swift_bridgeObjectRelease(v195);
  v190 = *(int *)(v28 + 40);
  v191 = (int *)v28;
  v46 = 0x6C676E6174636572;
  v47 = 0xE900000000000065;
  if (*(_BYTE *)(a1 + v190))
  {
    if (*(_BYTE *)(a1 + v190) == 1)
    {
      swift_bridgeObjectRelease(0xEB00000000657261);
      sub_100069C38(a1, (uint64_t)v36);
      goto LABEL_6;
    }
    v46 = 0x757153656772616CLL;
    v47 = 0xEB00000000657261;
  }
  v48 = _stringCompareWithSmolCheck(_:_:expecting:)(v46, v47, 0x7571536C6C616D73, 0xEB00000000657261, 0);
  swift_bridgeObjectRelease(v47);
  sub_100069C38(a1, (uint64_t)v36);
  if ((v48 & 1) == 0)
  {
    sub_100069C7C((uint64_t)v36);
    swift_bridgeObjectRelease(v45);
    sub_100069C38(a1, (uint64_t)v31);
    goto LABEL_17;
  }
LABEL_6:
  v49 = 0x6C676E6174636572;
  v50 = 0xE900000000000065;
  if (v36[v191[10]])
  {
    if (v36[v191[10]] == 1)
    {
      swift_bridgeObjectRelease(0xEB00000000657261);
      goto LABEL_12;
    }
    v49 = 0x757153656772616CLL;
    v50 = 0xEB00000000657261;
  }
  v51 = _stringCompareWithSmolCheck(_:_:expecting:)(v49, v50, 0x7571536C6C616D73, 0xEB00000000657261, 0);
  swift_bridgeObjectRelease(v50);
  if ((v51 & 1) == 0)
  {
    swift_bridgeObjectRelease(v45);
    sub_100069C38((uint64_t)v36, (uint64_t)v34);
LABEL_25:
    sub_100069C7C((uint64_t)v34);
    sub_100069C7C((uint64_t)v36);
    sub_100069C38(a1, (uint64_t)v31);
    goto LABEL_26;
  }
LABEL_12:
  swift_bridgeObjectRelease(v45);
  if ((v45 & 0x2000000000000000) != 0)
    v52 = HIBYTE(v45) & 0xF;
  else
    v52 = v171 & 0xFFFFFFFFFFFFLL;
  sub_100069C38((uint64_t)v36, (uint64_t)v34);
  if (!v52)
    goto LABEL_25;
  v53 = v162;
  sub_100062188(v162);
  v54 = v164;
  v55 = (uint64_t)v163;
  v56 = v165;
  (*(void (**)(char *, _QWORD, uint64_t))(v164 + 104))(v163, enum case for ContentSizeCategory.extraLarge(_:), v165);
  v57 = sub_10006A5AC(v53, v55);
  v58 = *(void (**)(uint64_t, uint64_t))(v54 + 8);
  v58(v55, v56);
  v58(v53, v56);
  sub_100069C7C((uint64_t)v34);
  sub_100069C7C((uint64_t)v36);
  sub_100069C38(a1, (uint64_t)v31);
  if (!v57)
  {
LABEL_26:
    sub_100069C7C((uint64_t)v31);
    v78 = 0;
    v79 = 1;
    v80 = 0xE900000000000065;
    v81 = 0x6C676E6174636572;
    v82 = v177;
    v83 = v176;
    v59 = v191;
    goto LABEL_34;
  }
LABEL_17:
  v59 = v191;
  v60 = &v31[v191[6]];
  v62 = *(_QWORD *)v60;
  v61 = *((_QWORD *)v60 + 1);
  v63 = v62 & 0xFFFFFFFFFFFFLL;
  if ((v61 & 0x2000000000000000) != 0)
    v64 = HIBYTE(v61) & 0xF;
  else
    v64 = v63;
  sub_100069C7C((uint64_t)v31);
  if (v64)
  {
    v65 = v41[1];
    v194 = *v41;
    v195 = v65;
    swift_bridgeObjectRetain(v65);
    v66 = Text.init<A>(_:)(&v194, &type metadata for String, v186);
    v68 = v67;
    v70 = v69;
    v72 = v71;
    KeyPath = swift_getKeyPath(&unk_100089510);
    v74 = swift_getKeyPath(&unk_100089540);
    v75 = 0x6C676E6174636572;
    v76 = 0xE900000000000065;
    if (*(_BYTE *)(a1 + v190))
    {
      if (*(_BYTE *)(a1 + v190) == 1)
      {
        v77 = swift_bridgeObjectRelease(0xEB00000000657261);
        goto LABEL_30;
      }
      v75 = 0x757153656772616CLL;
      v76 = 0xEB00000000657261;
    }
    v84 = _stringCompareWithSmolCheck(_:_:expecting:)(v75, v76, 0x7571536C6C616D73, 0xEB00000000657261, 0);
    v77 = swift_bridgeObjectRelease(v76);
    if ((v84 & 1) == 0)
    {
      v86 = *(_QWORD *)(a1 + v59[9]);
      swift_retain(v86);
      goto LABEL_32;
    }
LABEL_30:
    v85 = *(_QWORD *)(a1 + v59[9]);
    static Font.Weight.semibold.getter(v77);
    v86 = Font.weight(_:)(v85);
LABEL_32:
    v87 = swift_getKeyPath(&unk_100089570);
    v88 = *(_BYTE *)(a1 + v59[11]);
    v89 = *(_BYTE *)(a1 + v190);
    v194 = v66;
    v195 = v68;
    v196 = v70 & 1;
    v197 = v72;
    v198 = KeyPath;
    v78 = 1;
    LOBYTE(v199) = 1;
    v200 = v74;
    v201 = 1;
    LOBYTE(v202) = 0;
    v203 = v87;
    v204 = v86;
    LOBYTE(v205) = v88;
    BYTE1(v205) = v89;
    v90 = v187;
    static Text.Sizing.uniformLineHeight.getter(v87);
    v91 = sub_10000527C(&qword_1000A6DA0);
    v92 = sub_100069E18();
    v93 = v168;
    View.textSizing(_:)(v90, v91, v92);
    (*(void (**)(char *, uint64_t))(v188 + 8))(v90, v189);
    v94 = v197;
    v95 = v198;
    v96 = v200;
    v97 = v203;
    v98 = v204;
    sub_1000493D4(v194, v195, v196);
    swift_release(v97);
    swift_release(v96);
    swift_release(v95);
    swift_bridgeObjectRelease(v94);
    swift_release(v98);
    v99 = v169;
    v100 = (uint64_t)v167;
    v101 = v170;
    (*(void (**)(char *, char *, uint64_t))(v169 + 16))(v167, v93, v170);
    v82 = v177;
    *(_WORD *)(v100 + *(int *)(v177 + 36)) = 256;
    (*(void (**)(char *, uint64_t))(v99 + 8))(v93, v101);
    v102 = v166;
    sub_100052E04(v100, v166, &qword_1000A6D78);
    sub_100052E04(v102, v193, &qword_1000A6D78);
    v79 = 0;
    v80 = 0xE900000000000065;
    v81 = 0x6C676E6174636572;
    goto LABEL_33;
  }
  v78 = 0;
  v79 = 1;
  v80 = 0xE900000000000065;
  v81 = 0x6C676E6174636572;
  v82 = v177;
LABEL_33:
  v83 = v176;
LABEL_34:
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v83 + 56))(v193, v79, 1, v82);
  v103 = (uint64_t *)(a1 + v59[7]);
  v104 = v103[1];
  v194 = *v103;
  v195 = v104;
  swift_bridgeObjectRetain(v104);
  v105 = Text.init<A>(_:)(&v194, &type metadata for String, v186);
  v107 = v106;
  LODWORD(v191) = v108;
  v110 = v109;
  v186 = swift_getKeyPath(&unk_100089510);
  if ((sub_100067320() & 1) != 0)
    v111 = 2;
  else
    v111 = 1;
  v177 = v111;
  v112 = swift_getKeyPath(&unk_100089540);
  v113 = *(unsigned __int8 *)(a1 + v190);
  v176 = v112;
  if (!v113)
  {
LABEL_42:
    v117 = _stringCompareWithSmolCheck(_:_:expecting:)(v81, v80, 0x7571536C6C616D73, 0xEB00000000657261, 0);
    v114 = swift_bridgeObjectRelease(v80);
    if ((v117 & v78) != 1)
      goto LABEL_40;
    goto LABEL_43;
  }
  if (v113 != 1)
  {
    v81 = 0x757153656772616CLL;
    v80 = 0xEB00000000657261;
    goto LABEL_42;
  }
  v114 = swift_bridgeObjectRelease(0xEB00000000657261);
  if ((v78 & 1) == 0)
  {
LABEL_40:
    v115 = *(_QWORD *)(a1 + v59[9]);
    static Font.Weight.semibold.getter(v114);
    v116 = Font.weight(_:)(v115);
    goto LABEL_44;
  }
LABEL_43:
  v116 = *(_QWORD *)(a1 + v59[9]);
  swift_retain(v116);
LABEL_44:
  v118 = swift_getKeyPath(&unk_100089570);
  v119 = v118;
  if (*(_BYTE *)(a1 + v59[11]) == 1)
  {
    v120 = static Color.primary.getter(v118);
  }
  else
  {
    v190 = v107;
    v121 = v105;
    v122 = v110;
    v123 = v172;
    v124 = sub_10006215C(v172);
    v125 = v173;
    static WidgetRenderingMode.vibrant.getter(v124);
    v126 = static WidgetRenderingMode.== infix(_:_:)(v123, v125);
    v127 = *(void (**)(char *, uint64_t))(v174 + 8);
    v128 = v125;
    v129 = v175;
    v127(v128, v175);
    v130 = ((uint64_t (*)(uint64_t, uint64_t))v127)(v123, v129);
    if ((v126 & 1) != 0)
      v120 = static Color.white.getter(v130);
    else
      v120 = static Color.primary.getter(v130);
    v110 = v122;
    v105 = v121;
    v107 = v190;
  }
  v194 = v105;
  v195 = v107;
  v196 = v191 & 1;
  v197 = v110;
  LOWORD(v198) = 256;
  v199 = v186;
  LOBYTE(v200) = 1;
  v201 = v176;
  v202 = v177;
  LOBYTE(v203) = 0;
  v204 = v119;
  v205 = v116;
  v206 = v120;
  v131 = v187;
  static Text.Sizing.uniformLineHeight.getter(v120);
  v132 = sub_10000527C(&qword_1000A6C00);
  v133 = sub_100066818();
  v134 = v182;
  View.textSizing(_:)(v131, v132, v133);
  (*(void (**)(char *, uint64_t))(v188 + 8))(v131, v189);
  v135 = v197;
  v136 = v199;
  v137 = v201;
  v138 = v204;
  v139 = v205;
  v140 = v206;
  sub_1000493D4(v194, v195, v196);
  swift_release(v140);
  swift_release(v138);
  swift_release(v137);
  swift_release(v136);
  swift_bridgeObjectRelease(v135);
  swift_release(v139);
  v141 = v184;
  v142 = v185;
  (*(void (**)(char *, char *, uint64_t))(v184 + 32))(v192, v134, v185);
  v143 = (uint64_t *)(a1 + v59[8]);
  v144 = v143[1];
  if (v144 && (v145 = *v143, sub_1000671F4()))
  {
    v146 = v142;
    v147 = static VerticalAlignment.firstTextBaseline.getter();
    v148 = (uint64_t)v179;
    *v179 = v147;
    *(_QWORD *)(v148 + 8) = 0;
    *(_BYTE *)(v148 + 16) = 1;
    v149 = sub_10000527C(&qword_1000A6D98);
    sub_100068718(v145, v144, a1, (char *)(v148 + *(int *)(v149 + 44)));
    v150 = sub_10000527C(&qword_1000A6D88);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v150 - 8) + 56))(v148, 0, 1, v150);
  }
  else
  {
    v146 = v142;
    v151 = sub_10000527C(&qword_1000A6D88);
    v148 = (uint64_t)v179;
    (*(void (**)(uint64_t *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v151 - 8) + 56))(v179, 1, 1, v151);
  }
  v152 = (uint64_t)v181;
  v153 = v180;
  v154 = v178;
  v155 = v183;
  sub_100026CB4(v193, v183, &qword_1000A6D80);
  v156 = v141;
  v157 = *(void (**)(char *, char *, uint64_t))(v141 + 16);
  v158 = v192;
  v157(v154, v192, v146);
  sub_100026CB4(v148, v152, &qword_1000A6D60);
  sub_100026CB4(v155, v153, &qword_1000A6D80);
  v159 = sub_10000527C(&qword_1000A6D90);
  v157((char *)(v153 + *(int *)(v159 + 48)), v154, v146);
  sub_100026CB4(v152, v153 + *(int *)(v159 + 64), &qword_1000A6D60);
  sub_100014EFC(v148, &qword_1000A6D60);
  v160 = *(void (**)(char *, uint64_t))(v156 + 8);
  v160(v158, v146);
  sub_100014EFC(v193, &qword_1000A6D80);
  sub_100014EFC(v152, &qword_1000A6D60);
  v160(v154, v146);
  return sub_100014EFC(v155, &qword_1000A6D80);
}

uint64_t sub_100068718@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char *a4@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t KeyPath;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char v53;
  char v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  _QWORD *v58;
  uint64_t v59;
  uint64_t v60;
  void (*v61)(char *, char *, uint64_t);
  char *v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  void (*v66)(char *, uint64_t);
  uint64_t v68;
  uint64_t *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  uint64_t v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  char *v86;
  uint64_t v87;
  char *v88;

  v86 = a4;
  v87 = a3;
  v78 = a1;
  v5 = type metadata accessor for InFlightProgressView(0);
  v83 = *(_QWORD *)(v5 - 8);
  v84 = v5;
  __chkstk_darwin(v5);
  v69 = (uint64_t *)((char *)&v68 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  v7 = type metadata accessor for TileNameAndStatusView(0);
  __chkstk_darwin(v7);
  v79 = (char *)&v68 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_10000527C(&qword_1000A6DC0);
  v10 = __chkstk_darwin(v9);
  v85 = (uint64_t)&v68 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v82 = (char *)&v68 - v12;
  v13 = type metadata accessor for Text.Sizing(0);
  v80 = *(_QWORD *)(v13 - 8);
  v81 = v13;
  __chkstk_darwin(v13);
  v77 = (char *)&v68 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v76 = type metadata accessor for TextWithSmallTrailingPercentIfNeeded(0);
  v73 = *(_QWORD *)(v76 - 8);
  __chkstk_darwin(v76);
  v16 = (char *)&v68 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v71 = sub_10000527C(&qword_1000A6DC8);
  __chkstk_darwin(v71);
  v18 = (char *)&v68 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v72 = sub_10000527C(&qword_1000A6DD0);
  __chkstk_darwin(v72);
  v20 = (char *)&v68 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v74 = sub_10000527C(&qword_1000A6DD8);
  __chkstk_darwin(v74);
  v22 = (char *)&v68 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v75 = sub_10000527C(&qword_1000A6DE0);
  v70 = *(_QWORD *)(v75 - 8);
  v23 = __chkstk_darwin(v75);
  v25 = (char *)&v68 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v23);
  v88 = (char *)&v68 - v26;
  v27 = v7;
  v28 = *(_QWORD *)(v87 + *(int *)(v7 + 36));
  swift_bridgeObjectRetain(a2);
  swift_retain(v28);
  TextWithSmallTrailingPercentIfNeeded.init(string:font:)(v78, a2, v28);
  KeyPath = swift_getKeyPath(&unk_100089510);
  v30 = v73;
  v31 = v76;
  (*(void (**)(char *, char *, uint64_t))(v73 + 16))(v18, v16, v76);
  v32 = &v18[*(int *)(v71 + 36)];
  *(_QWORD *)v32 = KeyPath;
  v32[8] = 1;
  (*(void (**)(char *, uint64_t))(v30 + 8))(v16, v31);
  v33 = swift_getKeyPath(&unk_100089540);
  sub_100026CB4((uint64_t)v18, (uint64_t)v20, &qword_1000A6DC8);
  v34 = &v20[*(int *)(v72 + 36)];
  *(_QWORD *)v34 = v33;
  *((_QWORD *)v34 + 1) = 1;
  v35 = (uint64_t)v79;
  v34[16] = 0;
  sub_100014EFC((uint64_t)v18, &qword_1000A6DC8);
  v36 = v87;
  LOBYTE(v18) = *(_BYTE *)(v87 + *(int *)(v27 + 44));
  LOBYTE(v33) = *(_BYTE *)(v87 + *(int *)(v27 + 40));
  sub_100026CB4((uint64_t)v20, (uint64_t)v22, &qword_1000A6DD0);
  v37 = v74;
  v38 = &v22[*(int *)(v74 + 36)];
  *v38 = (char)v18;
  v38[1] = v33;
  v39 = v36;
  v40 = sub_100014EFC((uint64_t)v20, &qword_1000A6DD0);
  v41 = v77;
  static Text.Sizing.uniformLineHeight.getter(v40);
  v42 = sub_10006A934();
  v43 = v75;
  View.textSizing(_:)(v41, v37, v42);
  (*(void (**)(char *, uint64_t))(v80 + 8))(v41, v81);
  v44 = (uint64_t)v22;
  v45 = v27;
  sub_100014EFC(v44, &qword_1000A6DD8);
  v46 = v70;
  (*(void (**)(char *, char *, uint64_t))(v70 + 32))(v88, v25, v43);
  v47 = *(int *)(v45 + 48);
  LODWORD(v41) = *(unsigned __int8 *)(v39 + v47);
  sub_100069C38(v39, v35);
  if ((_DWORD)v41 == 1)
  {
    v48 = 0xEB00000000657261;
    if (*(_BYTE *)(v35 + *(int *)(v45 + 40)))
    {
      v49 = (uint64_t)v82;
      if (*(_BYTE *)(v35 + *(int *)(v45 + 40)) != 1)
      {
        swift_bridgeObjectRelease(0xEB00000000657261);
        sub_100069C7C(v35);
        goto LABEL_10;
      }
      v50 = 0x7571536C6C616D73;
    }
    else
    {
      v48 = 0xE900000000000065;
      v50 = 0x6C676E6174636572;
      v49 = (uint64_t)v82;
    }
    v53 = _stringCompareWithSmolCheck(_:_:expecting:)(v50, v48, 0x757153656772616CLL, 0xEB00000000657261, 0);
    swift_bridgeObjectRelease(v48);
    sub_100069C7C(v35);
    if ((v53 & 1) == 0)
    {
      v51 = 1;
      v52 = v84;
      goto LABEL_11;
    }
LABEL_10:
    v54 = *(_BYTE *)(v39 + v47);
    v55 = swift_getKeyPath(&unk_1000895A0);
    v56 = (uint64_t)v69;
    *v69 = v55;
    v57 = sub_10000527C(&qword_1000A5C00);
    swift_storeEnumTagMultiPayload(v56, v57, 0);
    v52 = v84;
    v58 = (_QWORD *)(v56 + *(int *)(v84 + 20));
    *v58 = swift_getKeyPath(&unk_100089390);
    v59 = sub_10000527C(&qword_1000A4FC0);
    swift_storeEnumTagMultiPayload(v58, v59, 0);
    v60 = v56 + *(int *)(v52 + 24);
    *(_QWORD *)v60 = swift_getKeyPath(&unk_1000895D0);
    *(_BYTE *)(v60 + 8) = 0;
    *(_BYTE *)(v56 + *(int *)(v52 + 28)) = v54;
    sub_10006AB10(v56, v49);
    v51 = 0;
    goto LABEL_11;
  }
  sub_100069C7C(v35);
  v51 = 1;
  v52 = v84;
  v49 = (uint64_t)v82;
LABEL_11:
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v83 + 56))(v49, v51, 1, v52);
  v61 = *(void (**)(char *, char *, uint64_t))(v46 + 16);
  v62 = v88;
  v61(v25, v88, v43);
  v63 = v85;
  sub_100026CB4(v49, v85, &qword_1000A6DC0);
  v64 = v86;
  v61(v86, v25, v43);
  v65 = sub_10000527C(&qword_1000A6E08);
  sub_100026CB4(v63, (uint64_t)&v64[*(int *)(v65 + 48)], &qword_1000A6DC0);
  sub_100014EFC(v49, &qword_1000A6DC0);
  v66 = *(void (**)(char *, uint64_t))(v46 + 8);
  v66(v62, v43);
  sub_100014EFC(v63, &qword_1000A6DC0);
  return ((uint64_t (*)(char *, uint64_t))v66)(v25, v43);
}

uint64_t sub_100068D9C()
{
  return EnvironmentValues.sizeCategory.getter();
}

uint64_t type metadata accessor for TileNameAndStatusView(uint64_t a1)
{
  uint64_t result;

  result = qword_1000A6CE8;
  if (!qword_1000A6CE8)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for TileNameAndStatusView);
  return result;
}

uint64_t sub_100068E04(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &opaque type descriptor for <<opaque return type of TileNameAndStatusView.body>>, 1);
}

_QWORD *initializeBufferWithCopyOfBuffer for TileNameAndStatusView(_QWORD *a1, _QWORD *a2, int *a3)
{
  _QWORD *v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  uint64_t v27;
  _QWORD *v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;

  v4 = a1;
  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v12 = *a2;
    *a1 = *a2;
    v4 = (_QWORD *)(v12 + ((v5 + 16) & ~(unint64_t)v5));
  }
  else
  {
    v7 = sub_10000527C(&qword_1000A4FD0);
    if (swift_getEnumCaseMultiPayload(a2, v7) == 1)
    {
      v8 = type metadata accessor for ContentSizeCategory(0);
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(v4, a2, v8);
      v9 = v4;
      v10 = v7;
      v11 = 1;
    }
    else
    {
      v13 = *a2;
      *v4 = *a2;
      swift_retain(v13);
      v9 = v4;
      v10 = v7;
      v11 = 0;
    }
    swift_storeEnumTagMultiPayload(v9, v10, v11);
    v14 = a3[5];
    v15 = (_QWORD *)((char *)v4 + v14);
    v16 = (_QWORD *)((char *)a2 + v14);
    v17 = sub_10000527C(&qword_1000A4FC0);
    if (swift_getEnumCaseMultiPayload(v16, v17) == 1)
    {
      v18 = type metadata accessor for WidgetRenderingMode(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v18 - 8) + 16))(v15, v16, v18);
      v19 = v15;
      v20 = v17;
      v21 = 1;
    }
    else
    {
      v22 = *v16;
      *v15 = *v16;
      swift_retain(v22);
      v19 = v15;
      v20 = v17;
      v21 = 0;
    }
    swift_storeEnumTagMultiPayload(v19, v20, v21);
    v23 = a3[6];
    v24 = a3[7];
    v25 = (_QWORD *)((char *)v4 + v23);
    v26 = (_QWORD *)((char *)a2 + v23);
    v27 = v26[1];
    *v25 = *v26;
    v25[1] = v27;
    v28 = (_QWORD *)((char *)v4 + v24);
    v29 = (_QWORD *)((char *)a2 + v24);
    v30 = v29[1];
    *v28 = *v29;
    v28[1] = v30;
    v31 = a3[8];
    v32 = a3[9];
    v33 = (_QWORD *)((char *)v4 + v31);
    v34 = (_QWORD *)((char *)a2 + v31);
    v35 = v34[1];
    *v33 = *v34;
    v33[1] = v35;
    v12 = *(_QWORD *)((char *)a2 + v32);
    *(_QWORD *)((char *)v4 + v32) = v12;
    v36 = a3[11];
    *((_BYTE *)v4 + a3[10]) = *((_BYTE *)a2 + a3[10]);
    *((_BYTE *)v4 + v36) = *((_BYTE *)a2 + v36);
    *((_BYTE *)v4 + a3[12]) = *((_BYTE *)a2 + a3[12]);
    swift_bridgeObjectRetain(v27);
    swift_bridgeObjectRetain(v30);
    swift_bridgeObjectRetain(v35);
  }
  swift_retain(v12);
  return v4;
}

uint64_t destroy for TileNameAndStatusView(_QWORD *a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;

  v4 = sub_10000527C(&qword_1000A4FD0);
  if (swift_getEnumCaseMultiPayload(a1, v4) == 1)
  {
    v5 = type metadata accessor for ContentSizeCategory(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(a1, v5);
  }
  else
  {
    swift_release(*a1);
  }
  v6 = (_QWORD *)((char *)a1 + a2[5]);
  v7 = sub_10000527C(&qword_1000A4FC0);
  if (swift_getEnumCaseMultiPayload(v6, v7) == 1)
  {
    v8 = type metadata accessor for WidgetRenderingMode(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v6, v8);
  }
  else
  {
    swift_release(*v6);
  }
  swift_bridgeObjectRelease(*(_QWORD *)((char *)a1 + a2[6] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)((char *)a1 + a2[7] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)((char *)a1 + a2[8] + 8));
  return swift_release(*(_QWORD *)((char *)a1 + a2[9]));
}

_QWORD *initializeWithCopy for TileNameAndStatusView(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  v6 = sub_10000527C(&qword_1000A4FD0);
  if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
  {
    v7 = type metadata accessor for ContentSizeCategory(0);
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = a1;
    v9 = v6;
    v10 = 1;
  }
  else
  {
    v11 = *a2;
    *a1 = *a2;
    swift_retain(v11);
    v8 = a1;
    v9 = v6;
    v10 = 0;
  }
  swift_storeEnumTagMultiPayload(v8, v9, v10);
  v12 = a3[5];
  v13 = (_QWORD *)((char *)a1 + v12);
  v14 = (_QWORD *)((char *)a2 + v12);
  v15 = sub_10000527C(&qword_1000A4FC0);
  if (swift_getEnumCaseMultiPayload(v14, v15) == 1)
  {
    v16 = type metadata accessor for WidgetRenderingMode(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v16 - 8) + 16))(v13, v14, v16);
    v17 = v13;
    v18 = v15;
    v19 = 1;
  }
  else
  {
    v20 = *v14;
    *v13 = *v14;
    swift_retain(v20);
    v17 = v13;
    v18 = v15;
    v19 = 0;
  }
  swift_storeEnumTagMultiPayload(v17, v18, v19);
  v21 = a3[6];
  v22 = a3[7];
  v23 = (_QWORD *)((char *)a1 + v21);
  v24 = (_QWORD *)((char *)a2 + v21);
  v25 = v24[1];
  *v23 = *v24;
  v23[1] = v25;
  v26 = (_QWORD *)((char *)a1 + v22);
  v27 = (_QWORD *)((char *)a2 + v22);
  v28 = v27[1];
  *v26 = *v27;
  v26[1] = v28;
  v29 = a3[8];
  v30 = a3[9];
  v31 = (_QWORD *)((char *)a1 + v29);
  v32 = (_QWORD *)((char *)a2 + v29);
  v33 = v32[1];
  *v31 = *v32;
  v31[1] = v33;
  v34 = *(_QWORD *)((char *)a2 + v30);
  *(_QWORD *)((char *)a1 + v30) = v34;
  v35 = a3[11];
  *((_BYTE *)a1 + a3[10]) = *((_BYTE *)a2 + a3[10]);
  *((_BYTE *)a1 + v35) = *((_BYTE *)a2 + v35);
  *((_BYTE *)a1 + a3[12]) = *((_BYTE *)a2 + a3[12]);
  swift_bridgeObjectRetain(v25);
  swift_bridgeObjectRetain(v28);
  swift_bridgeObjectRetain(v33);
  swift_retain(v34);
  return a1;
}

_QWORD *assignWithCopy for TileNameAndStatusView(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;

  if (a1 != a2)
  {
    sub_100014EFC((uint64_t)a1, &qword_1000A4FD0);
    v6 = sub_10000527C(&qword_1000A4FD0);
    if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
    {
      v7 = type metadata accessor for ContentSizeCategory(0);
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
      v8 = a1;
      v9 = v6;
      v10 = 1;
    }
    else
    {
      v11 = *a2;
      *a1 = *a2;
      swift_retain(v11);
      v8 = a1;
      v9 = v6;
      v10 = 0;
    }
    swift_storeEnumTagMultiPayload(v8, v9, v10);
    v12 = a3[5];
    v13 = (_QWORD *)((char *)a1 + v12);
    v14 = (_QWORD *)((char *)a2 + v12);
    sub_100014EFC((uint64_t)a1 + v12, &qword_1000A4FC0);
    v15 = sub_10000527C(&qword_1000A4FC0);
    if (swift_getEnumCaseMultiPayload(v14, v15) == 1)
    {
      v16 = type metadata accessor for WidgetRenderingMode(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v16 - 8) + 16))(v13, v14, v16);
      v17 = v13;
      v18 = v15;
      v19 = 1;
    }
    else
    {
      v20 = *v14;
      *v13 = *v14;
      swift_retain(v20);
      v17 = v13;
      v18 = v15;
      v19 = 0;
    }
    swift_storeEnumTagMultiPayload(v17, v18, v19);
  }
  v21 = a3[6];
  v22 = (_QWORD *)((char *)a1 + v21);
  v23 = (_QWORD *)((char *)a2 + v21);
  *v22 = *v23;
  v24 = v23[1];
  v25 = v22[1];
  v22[1] = v24;
  swift_bridgeObjectRetain(v24);
  swift_bridgeObjectRelease(v25);
  v26 = a3[7];
  v27 = (_QWORD *)((char *)a1 + v26);
  v28 = (_QWORD *)((char *)a2 + v26);
  *v27 = *v28;
  v29 = v28[1];
  v30 = v27[1];
  v27[1] = v29;
  swift_bridgeObjectRetain(v29);
  swift_bridgeObjectRelease(v30);
  v31 = a3[8];
  v32 = (_QWORD *)((char *)a1 + v31);
  v33 = (_QWORD *)((char *)a2 + v31);
  *v32 = *v33;
  v34 = v33[1];
  v35 = v32[1];
  v32[1] = v34;
  swift_bridgeObjectRetain(v34);
  swift_bridgeObjectRelease(v35);
  v36 = a3[9];
  v37 = *(_QWORD *)((char *)a2 + v36);
  v38 = *(_QWORD *)((char *)a1 + v36);
  *(_QWORD *)((char *)a1 + v36) = v37;
  swift_retain(v37);
  swift_release(v38);
  *((_BYTE *)a1 + a3[10]) = *((_BYTE *)a2 + a3[10]);
  *((_BYTE *)a1 + a3[11]) = *((_BYTE *)a2 + a3[11]);
  *((_BYTE *)a1 + a3[12]) = *((_BYTE *)a2 + a3[12]);
  return a1;
}

char *initializeWithTake for TileNameAndStatusView(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v6 = sub_10000527C(&qword_1000A4FD0);
  if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
  {
    v7 = type metadata accessor for ContentSizeCategory(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a1, a2, v7);
    swift_storeEnumTagMultiPayload(a1, v6, 1);
  }
  else
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
  }
  v8 = a3[5];
  v9 = &a1[v8];
  v10 = &a2[v8];
  v11 = sub_10000527C(&qword_1000A4FC0);
  if (swift_getEnumCaseMultiPayload(v10, v11) == 1)
  {
    v12 = type metadata accessor for WidgetRenderingMode(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 32))(v9, v10, v12);
    swift_storeEnumTagMultiPayload(v9, v11, 1);
  }
  else
  {
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
  }
  v13 = a3[7];
  *(_OWORD *)&a1[a3[6]] = *(_OWORD *)&a2[a3[6]];
  *(_OWORD *)&a1[v13] = *(_OWORD *)&a2[v13];
  v14 = a3[9];
  *(_OWORD *)&a1[a3[8]] = *(_OWORD *)&a2[a3[8]];
  *(_QWORD *)&a1[v14] = *(_QWORD *)&a2[v14];
  v15 = a3[11];
  a1[a3[10]] = a2[a3[10]];
  a1[v15] = a2[v15];
  a1[a3[12]] = a2[a3[12]];
  return a1;
}

char *assignWithTake for TileNameAndStatusView(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  if (a1 != a2)
  {
    sub_100014EFC((uint64_t)a1, &qword_1000A4FD0);
    v6 = sub_10000527C(&qword_1000A4FD0);
    if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
    {
      v7 = type metadata accessor for ContentSizeCategory(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a1, a2, v7);
      swift_storeEnumTagMultiPayload(a1, v6, 1);
    }
    else
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
    }
    v8 = a3[5];
    v9 = &a1[v8];
    v10 = &a2[v8];
    sub_100014EFC((uint64_t)&a1[v8], &qword_1000A4FC0);
    v11 = sub_10000527C(&qword_1000A4FC0);
    if (swift_getEnumCaseMultiPayload(v10, v11) == 1)
    {
      v12 = type metadata accessor for WidgetRenderingMode(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 32))(v9, v10, v12);
      swift_storeEnumTagMultiPayload(v9, v11, 1);
    }
    else
    {
      memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
    }
  }
  v13 = a3[6];
  v14 = &a1[v13];
  v15 = &a2[v13];
  v17 = *(_QWORD *)v15;
  v16 = *((_QWORD *)v15 + 1);
  v18 = *((_QWORD *)v14 + 1);
  *(_QWORD *)v14 = v17;
  *((_QWORD *)v14 + 1) = v16;
  swift_bridgeObjectRelease(v18);
  v19 = a3[7];
  v20 = &a1[v19];
  v21 = &a2[v19];
  v23 = *(_QWORD *)v21;
  v22 = *((_QWORD *)v21 + 1);
  v24 = *((_QWORD *)v20 + 1);
  *(_QWORD *)v20 = v23;
  *((_QWORD *)v20 + 1) = v22;
  swift_bridgeObjectRelease(v24);
  v25 = a3[8];
  v26 = &a1[v25];
  v27 = &a2[v25];
  v29 = *(_QWORD *)v27;
  v28 = *((_QWORD *)v27 + 1);
  v30 = *((_QWORD *)v26 + 1);
  *(_QWORD *)v26 = v29;
  *((_QWORD *)v26 + 1) = v28;
  swift_bridgeObjectRelease(v30);
  v31 = a3[9];
  v32 = *(_QWORD *)&a1[v31];
  *(_QWORD *)&a1[v31] = *(_QWORD *)&a2[v31];
  swift_release(v32);
  v33 = a3[11];
  a1[a3[10]] = a2[a3[10]];
  a1[v33] = a2[v33];
  a1[a3[12]] = a2[a3[12]];
  return a1;
}

uint64_t getEnumTagSinglePayload for TileNameAndStatusView(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000697C0);
}

uint64_t sub_1000697C0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v14;

  v6 = sub_10000527C(&qword_1000A6740);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
    return v9(v10, a2, v8);
  }
  v11 = sub_10000527C(&qword_1000A5E88);
  v12 = *(_QWORD *)(v11 - 8);
  if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
  {
    v8 = v11;
    v10 = a1 + *(int *)(a3 + 20);
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
    return v9(v10, a2, v8);
  }
  v14 = *(_QWORD *)(a1 + *(int *)(a3 + 24) + 8);
  if (v14 >= 0xFFFFFFFF)
    LODWORD(v14) = -1;
  return (v14 + 1);
}

uint64_t storeEnumTagSinglePayload for TileNameAndStatusView(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100069880);
}

uint64_t sub_100069880(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t result;
  uint64_t v14;

  v8 = sub_10000527C(&qword_1000A6740);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
    return v11(v12, a2, a2, v10);
  }
  result = sub_10000527C(&qword_1000A5E88);
  v14 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v14 + 84) == a3)
  {
    v10 = result;
    v12 = a1 + *(int *)(a4 + 20);
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
    return v11(v12, a2, a2, v10);
  }
  *(_QWORD *)(a1 + *(int *)(a4 + 24) + 8) = (a2 - 1);
  return result;
}

void sub_100069930(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v6[9];

  sub_100048D10(319, (unint64_t *)&unk_1000A67B0, (uint64_t (*)(uint64_t))&type metadata accessor for ContentSizeCategory);
  if (v3 <= 0x3F)
  {
    v6[0] = *(_QWORD *)(v2 - 8) + 64;
    sub_100048D10(319, (unint64_t *)&qword_1000A5F00, (uint64_t (*)(uint64_t))&type metadata accessor for WidgetRenderingMode);
    if (v5 <= 0x3F)
    {
      v6[1] = *(_QWORD *)(v4 - 8) + 64;
      v6[2] = &unk_100089438;
      v6[3] = &unk_100089438;
      v6[4] = &unk_100089450;
      v6[5] = (char *)&value witness table for Builtin.NativeObject + 64;
      v6[6] = &unk_100089468;
      v6[7] = &unk_100089480;
      v6[8] = &unk_100089480;
      swift_initStructMetadata(a1, 256, 9, v6, a1 + 16);
    }
  }
}

unint64_t sub_100069A10()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000A6D40;
  if (!qword_1000A6D40)
  {
    v1 = sub_1000052BC(&qword_1000A6C80);
    sub_1000229D8(&qword_1000A6D48, &qword_1000A6C78, (uint64_t)&protocol conformance descriptor for VStack<A>);
    sub_1000229D8(&qword_1000A6D50, &qword_1000A6D58, (uint64_t)&protocol conformance descriptor for _EnvironmentBackgroundStyleModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000A6D40);
  }
  return result;
}

_WORD *initializeBufferWithCopyOfBuffer for SecondaryForegroundStyle(_WORD *result, _WORD *a2)
{
  *result = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for SecondaryForegroundStyle(unsigned __int16 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFF)
    goto LABEL_17;
  if (a2 + 65281 <= 0xFFFEFFFF)
    v2 = 2;
  else
    v2 = 4;
  if (a2 + 65281 < 0xFF0000)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 16)) - 65281;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = a1[1];
      if (!a1[1])
        goto LABEL_17;
      return (*a1 | (v4 << 16)) - 65281;
    }
    v4 = *((unsigned __int8 *)a1 + 2);
    if (*((_BYTE *)a1 + 2))
      return (*a1 | (v4 << 16)) - 65281;
  }
LABEL_17:
  v6 = *(unsigned __int8 *)a1;
  v7 = v6 >= 2;
  v8 = (v6 + 2147483646) & 0x7FFFFFFF;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for SecondaryForegroundStyle(_WORD *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 65281 <= 0xFFFEFFFF)
    v3 = 2;
  else
    v3 = 4;
  if (a3 + 65281 < 0xFF0000)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_100069BA8 + 4 * byte_100089355[v4]))();
  *a1 = a2 - 255;
  return ((uint64_t (*)(void))((char *)sub_100069BDC + 4 * byte_100089350[v4]))();
}

uint64_t sub_100069BDC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 2) = v1;
  return result;
}

uint64_t sub_100069BE4(uint64_t result, int a2)
{
  *(_WORD *)(result + 2) = 0;
  if (a2)
    JUMPOUT(0x100069BECLL);
  return result;
}

uint64_t sub_100069BF8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 2) = 0;
  if (!a2)
    JUMPOUT(0x100069C00);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_100069C04(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 2) = v1;
  return result;
}

uint64_t sub_100069C0C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 2) = v1;
  return result;
}

ValueMetadata *type metadata accessor for SecondaryForegroundStyle()
{
  return &type metadata for SecondaryForegroundStyle;
}

uint64_t sub_100069C28(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_10008CD28, 1);
}

uint64_t sub_100069C38(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for TileNameAndStatusView(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_100069C7C(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for TileNameAndStatusView(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_100069CB8@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = EnvironmentValues.allowsTightening.getter();
  *a1 = result & 1;
  return result;
}

uint64_t sub_100069CE4@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = EnvironmentValues.allowsTightening.getter();
  *a1 = result & 1;
  return result;
}

uint64_t sub_100069D10(unsigned __int8 *a1)
{
  return EnvironmentValues.allowsTightening.setter(*a1);
}

uint64_t sub_100069D34(unsigned __int8 *a1)
{
  return EnvironmentValues.allowsTightening.setter(*a1);
}

uint64_t sub_100069D58@<X0>(uint64_t a1@<X8>)
{
  uint64_t result;
  char v3;

  result = EnvironmentValues.lineLimit.getter();
  *(_QWORD *)a1 = result;
  *(_BYTE *)(a1 + 8) = v3 & 1;
  return result;
}

uint64_t sub_100069D88@<X0>(uint64_t a1@<X8>)
{
  uint64_t result;
  char v3;

  result = EnvironmentValues.lineLimit.getter();
  *(_QWORD *)a1 = result;
  *(_BYTE *)(a1 + 8) = v3 & 1;
  return result;
}

uint64_t sub_100069DB8(uint64_t a1)
{
  return EnvironmentValues.lineLimit.setter(*(_QWORD *)a1, *(unsigned __int8 *)(a1 + 8));
}

uint64_t sub_100069DE4(uint64_t a1)
{
  return EnvironmentValues.lineLimit.setter(*(_QWORD *)a1, *(unsigned __int8 *)(a1 + 8));
}

unint64_t sub_100069E18()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000A6DA8;
  if (!qword_1000A6DA8)
  {
    v1 = sub_1000052BC(&qword_1000A6DA0);
    sub_100060940();
    sub_1000229D8(&qword_1000A6DB0, &qword_1000A6DB8, (uint64_t)&protocol conformance descriptor for _ForegroundStyleModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000A6DA8);
  }
  return result;
}

BOOL sub_100069E9C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  void (*v11)(char *, uint64_t, uint64_t);
  uint64_t (*v12)(char *, uint64_t);
  int v13;
  unint64_t v14;
  int v15;
  int v16;
  unint64_t v17;
  uint64_t v19;

  v4 = type metadata accessor for ContentSizeCategory(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = __chkstk_darwin(v4);
  v8 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v10 = (char *)&v19 - v9;
  v11 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
  v11((char *)&v19 - v9, a1, v4);
  v12 = *(uint64_t (**)(char *, uint64_t))(v5 + 88);
  v13 = v12(v10, v4);
  v14 = 0;
  v15 = enum case for ContentSizeCategory.extraSmall(_:);
  if (v13 != enum case for ContentSizeCategory.extraSmall(_:))
  {
    if (v13 == enum case for ContentSizeCategory.small(_:))
    {
      v14 = 1;
      goto LABEL_24;
    }
    if (v13 == enum case for ContentSizeCategory.medium(_:))
    {
      v14 = 2;
      goto LABEL_24;
    }
    if (v13 == enum case for ContentSizeCategory.large(_:))
      goto LABEL_7;
    if (v13 == enum case for ContentSizeCategory.extraLarge(_:))
    {
      v14 = 4;
    }
    else if (v13 == enum case for ContentSizeCategory.extraExtraLarge(_:))
    {
      v14 = 5;
    }
    else if (v13 == enum case for ContentSizeCategory.extraExtraExtraLarge(_:))
    {
      v14 = 6;
    }
    else if (v13 == enum case for ContentSizeCategory.accessibilityMedium(_:))
    {
      v14 = 7;
    }
    else if (v13 == enum case for ContentSizeCategory.accessibilityLarge(_:))
    {
      v14 = 8;
    }
    else if (v13 == enum case for ContentSizeCategory.accessibilityExtraLarge(_:))
    {
      v14 = 9;
    }
    else if (v13 == enum case for ContentSizeCategory.accessibilityExtraExtraLarge(_:))
    {
      v14 = 10;
    }
    else
    {
      if (v13 != enum case for ContentSizeCategory.accessibilityExtraExtraExtraLarge(_:))
      {
        (*(void (**)(char *, uint64_t))(v5 + 8))(v10, v4);
LABEL_7:
        v14 = 3;
        goto LABEL_24;
      }
      v14 = 11;
    }
  }
LABEL_24:
  v11(v8, a2, v4);
  v16 = v12(v8, v4);
  if (v16 == v15)
  {
    v17 = 0;
  }
  else if (v16 == enum case for ContentSizeCategory.small(_:))
  {
    v17 = 1;
  }
  else if (v16 == enum case for ContentSizeCategory.medium(_:))
  {
    v17 = 2;
  }
  else
  {
    if (v16 != enum case for ContentSizeCategory.large(_:))
    {
      if (v16 == enum case for ContentSizeCategory.extraLarge(_:))
      {
        v17 = 4;
        return v14 < v17;
      }
      if (v16 == enum case for ContentSizeCategory.extraExtraLarge(_:))
      {
        v17 = 5;
        return v14 < v17;
      }
      if (v16 == enum case for ContentSizeCategory.extraExtraExtraLarge(_:))
      {
        v17 = 6;
        return v14 < v17;
      }
      if (v16 == enum case for ContentSizeCategory.accessibilityMedium(_:))
      {
        v17 = 7;
        return v14 < v17;
      }
      if (v16 == enum case for ContentSizeCategory.accessibilityLarge(_:))
      {
        v17 = 8;
        return v14 < v17;
      }
      if (v16 == enum case for ContentSizeCategory.accessibilityExtraLarge(_:))
      {
        v17 = 9;
        return v14 < v17;
      }
      if (v16 == enum case for ContentSizeCategory.accessibilityExtraExtraLarge(_:))
      {
        v17 = 10;
        return v14 < v17;
      }
      if (v16 == enum case for ContentSizeCategory.accessibilityExtraExtraExtraLarge(_:))
      {
        v17 = 11;
        return v14 < v17;
      }
      (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
    }
    v17 = 3;
  }
  return v14 < v17;
}

BOOL sub_10006A224(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  void (*v11)(char *, uint64_t, uint64_t);
  uint64_t (*v12)(char *, uint64_t);
  int v13;
  unint64_t v14;
  int v15;
  int v16;
  unint64_t v17;
  uint64_t v19;

  v4 = type metadata accessor for ContentSizeCategory(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = __chkstk_darwin(v4);
  v8 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v10 = (char *)&v19 - v9;
  v11 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
  v11((char *)&v19 - v9, a2, v4);
  v12 = *(uint64_t (**)(char *, uint64_t))(v5 + 88);
  v13 = v12(v10, v4);
  v14 = 0;
  v15 = enum case for ContentSizeCategory.extraSmall(_:);
  if (v13 != enum case for ContentSizeCategory.extraSmall(_:))
  {
    if (v13 == enum case for ContentSizeCategory.small(_:))
    {
      v14 = 1;
      goto LABEL_24;
    }
    if (v13 == enum case for ContentSizeCategory.medium(_:))
    {
      v14 = 2;
      goto LABEL_24;
    }
    if (v13 == enum case for ContentSizeCategory.large(_:))
      goto LABEL_7;
    if (v13 == enum case for ContentSizeCategory.extraLarge(_:))
    {
      v14 = 4;
    }
    else if (v13 == enum case for ContentSizeCategory.extraExtraLarge(_:))
    {
      v14 = 5;
    }
    else if (v13 == enum case for ContentSizeCategory.extraExtraExtraLarge(_:))
    {
      v14 = 6;
    }
    else if (v13 == enum case for ContentSizeCategory.accessibilityMedium(_:))
    {
      v14 = 7;
    }
    else if (v13 == enum case for ContentSizeCategory.accessibilityLarge(_:))
    {
      v14 = 8;
    }
    else if (v13 == enum case for ContentSizeCategory.accessibilityExtraLarge(_:))
    {
      v14 = 9;
    }
    else if (v13 == enum case for ContentSizeCategory.accessibilityExtraExtraLarge(_:))
    {
      v14 = 10;
    }
    else
    {
      if (v13 != enum case for ContentSizeCategory.accessibilityExtraExtraExtraLarge(_:))
      {
        (*(void (**)(char *, uint64_t))(v5 + 8))(v10, v4);
LABEL_7:
        v14 = 3;
        goto LABEL_24;
      }
      v14 = 11;
    }
  }
LABEL_24:
  v11(v8, a1, v4);
  v16 = v12(v8, v4);
  if (v16 == v15)
  {
    v17 = 0;
  }
  else if (v16 == enum case for ContentSizeCategory.small(_:))
  {
    v17 = 1;
  }
  else if (v16 == enum case for ContentSizeCategory.medium(_:))
  {
    v17 = 2;
  }
  else
  {
    if (v16 != enum case for ContentSizeCategory.large(_:))
    {
      if (v16 == enum case for ContentSizeCategory.extraLarge(_:))
      {
        v17 = 4;
        return v14 < v17;
      }
      if (v16 == enum case for ContentSizeCategory.extraExtraLarge(_:))
      {
        v17 = 5;
        return v14 < v17;
      }
      if (v16 == enum case for ContentSizeCategory.extraExtraExtraLarge(_:))
      {
        v17 = 6;
        return v14 < v17;
      }
      if (v16 == enum case for ContentSizeCategory.accessibilityMedium(_:))
      {
        v17 = 7;
        return v14 < v17;
      }
      if (v16 == enum case for ContentSizeCategory.accessibilityLarge(_:))
      {
        v17 = 8;
        return v14 < v17;
      }
      if (v16 == enum case for ContentSizeCategory.accessibilityExtraLarge(_:))
      {
        v17 = 9;
        return v14 < v17;
      }
      if (v16 == enum case for ContentSizeCategory.accessibilityExtraExtraLarge(_:))
      {
        v17 = 10;
        return v14 < v17;
      }
      if (v16 == enum case for ContentSizeCategory.accessibilityExtraExtraExtraLarge(_:))
      {
        v17 = 11;
        return v14 < v17;
      }
      (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
    }
    v17 = 3;
  }
  return v14 < v17;
}

BOOL sub_10006A5AC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  void (*v11)(char *, uint64_t, uint64_t);
  uint64_t (*v12)(char *, uint64_t);
  int v13;
  unint64_t v14;
  int v15;
  int v16;
  unint64_t v17;
  uint64_t v19;

  v4 = type metadata accessor for ContentSizeCategory(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = __chkstk_darwin(v4);
  v8 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v10 = (char *)&v19 - v9;
  v11 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
  v11((char *)&v19 - v9, a2, v4);
  v12 = *(uint64_t (**)(char *, uint64_t))(v5 + 88);
  v13 = v12(v10, v4);
  v14 = 0;
  v15 = enum case for ContentSizeCategory.extraSmall(_:);
  if (v13 != enum case for ContentSizeCategory.extraSmall(_:))
  {
    if (v13 == enum case for ContentSizeCategory.small(_:))
    {
      v14 = 1;
      goto LABEL_24;
    }
    if (v13 == enum case for ContentSizeCategory.medium(_:))
    {
      v14 = 2;
      goto LABEL_24;
    }
    if (v13 == enum case for ContentSizeCategory.large(_:))
      goto LABEL_7;
    if (v13 == enum case for ContentSizeCategory.extraLarge(_:))
    {
      v14 = 4;
    }
    else if (v13 == enum case for ContentSizeCategory.extraExtraLarge(_:))
    {
      v14 = 5;
    }
    else if (v13 == enum case for ContentSizeCategory.extraExtraExtraLarge(_:))
    {
      v14 = 6;
    }
    else if (v13 == enum case for ContentSizeCategory.accessibilityMedium(_:))
    {
      v14 = 7;
    }
    else if (v13 == enum case for ContentSizeCategory.accessibilityLarge(_:))
    {
      v14 = 8;
    }
    else if (v13 == enum case for ContentSizeCategory.accessibilityExtraLarge(_:))
    {
      v14 = 9;
    }
    else if (v13 == enum case for ContentSizeCategory.accessibilityExtraExtraLarge(_:))
    {
      v14 = 10;
    }
    else
    {
      if (v13 != enum case for ContentSizeCategory.accessibilityExtraExtraExtraLarge(_:))
      {
        (*(void (**)(char *, uint64_t))(v5 + 8))(v10, v4);
LABEL_7:
        v14 = 3;
        goto LABEL_24;
      }
      v14 = 11;
    }
  }
LABEL_24:
  v11(v8, a1, v4);
  v16 = v12(v8, v4);
  if (v16 == v15)
  {
    v17 = 0;
  }
  else if (v16 == enum case for ContentSizeCategory.small(_:))
  {
    v17 = 1;
  }
  else if (v16 == enum case for ContentSizeCategory.medium(_:))
  {
    v17 = 2;
  }
  else
  {
    if (v16 != enum case for ContentSizeCategory.large(_:))
    {
      if (v16 == enum case for ContentSizeCategory.extraLarge(_:))
      {
        v17 = 4;
        return v14 >= v17;
      }
      if (v16 == enum case for ContentSizeCategory.extraExtraLarge(_:))
      {
        v17 = 5;
        return v14 >= v17;
      }
      if (v16 == enum case for ContentSizeCategory.extraExtraExtraLarge(_:))
      {
        v17 = 6;
        return v14 >= v17;
      }
      if (v16 == enum case for ContentSizeCategory.accessibilityMedium(_:))
      {
        v17 = 7;
        return v14 >= v17;
      }
      if (v16 == enum case for ContentSizeCategory.accessibilityLarge(_:))
      {
        v17 = 8;
        return v14 >= v17;
      }
      if (v16 == enum case for ContentSizeCategory.accessibilityExtraLarge(_:))
      {
        v17 = 9;
        return v14 >= v17;
      }
      if (v16 == enum case for ContentSizeCategory.accessibilityExtraExtraLarge(_:))
      {
        v17 = 10;
        return v14 >= v17;
      }
      if (v16 == enum case for ContentSizeCategory.accessibilityExtraExtraExtraLarge(_:))
      {
        v17 = 11;
        return v14 >= v17;
      }
      (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
    }
    v17 = 3;
  }
  return v14 >= v17;
}

unint64_t sub_10006A934()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000A6DE8;
  if (!qword_1000A6DE8)
  {
    v1 = sub_1000052BC(&qword_1000A6DD8);
    sub_10006A9B8();
    sub_1000229D8(&qword_1000A6DB0, &qword_1000A6DB8, (uint64_t)&protocol conformance descriptor for _ForegroundStyleModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000A6DE8);
  }
  return result;
}

unint64_t sub_10006A9B8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000A6DF0;
  if (!qword_1000A6DF0)
  {
    v1 = sub_1000052BC(&qword_1000A6DD0);
    sub_10006AA3C();
    sub_1000229D8(&qword_1000A6938, &qword_1000A6940, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000A6DF0);
  }
  return result;
}

unint64_t sub_10006AA3C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000A6DF8;
  if (!qword_1000A6DF8)
  {
    v1 = sub_1000052BC(&qword_1000A6DC8);
    sub_10006AAC0();
    sub_1000229D8(&qword_1000A6928, &qword_1000A6930, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000A6DF8);
  }
  return result;
}

unint64_t sub_10006AAC0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000A6E00;
  if (!qword_1000A6E00)
  {
    v1 = type metadata accessor for TextWithSmallTrailingPercentIfNeeded(255);
    result = swift_getWitnessTable(&protocol conformance descriptor for TextWithSmallTrailingPercentIfNeeded, v1);
    atomic_store(result, (unint64_t *)&qword_1000A6E00);
  }
  return result;
}

uint64_t sub_10006AB10(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for InFlightProgressView(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void *sub_10006AB54()
{
  return &protocol witness table for Color;
}

Swift::Int sub_10006AB60(char a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD v5[9];

  Hasher.init(_seed:)(v5, 0);
  v2 = 8 * a1;
  v3 = *(_QWORD *)&aRectanglsmalls[v2 + 24];
  String.hash(into:)(v5, *(_QWORD *)&aRectanglsmalls[v2], v3);
  swift_bridgeObjectRelease(v3);
  return Hasher._finalize()();
}

uint64_t sub_10006ABC8@<X0>(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X8>, double a4@<D0>, double a5@<D1>)
{
  uint64_t v10;
  uint64_t v11;
  double *v12;
  int *v13;
  double *v14;
  uint64_t v15;
  double v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;

  v10 = type metadata accessor for RoundedRectangle(0);
  __chkstk_darwin(v10);
  v12 = (double *)((char *)&v21 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_100026C34(a1, a3, type metadata accessor for AccessoryAndSceneEntity);
  v13 = (int *)type metadata accessor for TileView(0);
  v14 = (double *)(a3 + v13[7]);
  *v14 = a4;
  v14[1] = a5;
  v15 = type metadata accessor for AccessoryAndSceneEntity(0);
  sub_100026C34(a1 + *(int *)(v15 + 24), a3 + v13[5], type metadata accessor for WidgetTileInfo);
  *(_BYTE *)(a3 + v13[6]) = a2;
  v16 = a5 * 0.25;
  v17 = (char *)v12 + *(int *)(v10 + 20);
  v18 = enum case for RoundedCornerStyle.continuous(_:);
  v19 = type metadata accessor for RoundedCornerStyle(0);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 104))(v17, v18, v19);
  *v12 = v16;
  v12[1] = v16;
  sub_100026C78(a1, type metadata accessor for AccessoryAndSceneEntity);
  return sub_100026D98((uint64_t)v12, a3 + v13[8], (uint64_t (*)(_QWORD))&type metadata accessor for RoundedRectangle);
}

_UNKNOWN **static TileStyle.allCases.getter()
{
  return &off_10009E0E0;
}

uint64_t TileStyle.rawValue.getter(char a1)
{
  return *(_QWORD *)&aRectanglsmalls[8 * a1];
}

uint64_t sub_10006AD44(char *a1, char *a2)
{
  return sub_100076D4C(*a1, *a2);
}

Swift::Int sub_10006AD50()
{
  char *v0;

  return sub_10006AB60(*v0);
}

uint64_t sub_10006AD58(uint64_t a1)
{
  char *v1;

  return sub_100076F80(a1, *v1);
}

Swift::Int sub_10006AD60(uint64_t a1)
{
  char *v1;

  return sub_100077194(a1, *v1);
}

unint64_t sub_10006AD68@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = _s10HomeWidget9TileStyleO8rawValueACSgSS_tcfC_0(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_10006AD94@<X0>(uint64_t *a1@<X8>)
{
  char *v1;
  uint64_t result;
  uint64_t v4;

  result = TileStyle.rawValue.getter(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

void sub_10006ADBC(_QWORD *a1@<X8>)
{
  *a1 = &off_10009E108;
}

uint64_t TileView.style.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for TileView(0) + 24));
}

uint64_t TileView.body.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  int64x2_t *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int *v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  char *v23;
  _QWORD *v24;
  uint64_t v25;
  _QWORD *v26;
  __int8 *v27;
  uint64_t v28;
  uint64_t v29;
  Swift::String v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  Swift::String v37;
  Swift::String v38;
  Swift::String v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  Swift::String v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char v48;
  char v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v55;
  uint64_t v56;

  v2 = v1;
  v56 = a1;
  v3 = type metadata accessor for LocalizedStringKey.StringInterpolation(0);
  __chkstk_darwin(v3);
  v5 = (char *)&v55 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for RoundedRectangle(0);
  __chkstk_darwin(v6);
  v8 = (int64x2_t *)((char *)&v55 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  v9 = type metadata accessor for AccessoryAndSceneEntity(0);
  __chkstk_darwin(v9);
  v11 = (char *)&v55 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = (int *)type metadata accessor for SingleTapTargetTileView(0);
  __chkstk_darwin(v12);
  v14 = (char **)((char *)&v55 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  v15 = sub_10000527C(&qword_1000A6E10);
  __chkstk_darwin(v15);
  v55 = (char *)&v55 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100026C34(v2, (uint64_t)v11, type metadata accessor for AccessoryAndSceneEntity);
  v17 = type metadata accessor for TileView(0);
  v18 = (uint64_t *)(v2 + *(int *)(v17 + 28));
  v19 = *v18;
  v20 = v18[1];
  v21 = *(_BYTE *)(v2 + *(int *)(v17 + 24));
  *v14 = swift_getKeyPath(&unk_100089610);
  v22 = sub_10000527C(&qword_1000A4FC0);
  swift_storeEnumTagMultiPayload(v14, v22, 0);
  v23 = (char *)v14 + v12[5];
  *(_QWORD *)v23 = swift_getKeyPath(&unk_100089640);
  v23[8] = 0;
  v24 = (_QWORD *)((char *)v14 + v12[6]);
  *v24 = swift_getKeyPath(&unk_100089668);
  v25 = sub_10000527C(&qword_1000A4FC8);
  swift_storeEnumTagMultiPayload(v24, v25, 0);
  sub_100026C34((uint64_t)v11, (uint64_t)v14 + v12[7], type metadata accessor for AccessoryAndSceneEntity);
  v26 = (_QWORD *)((char *)v14 + v12[10]);
  *v26 = v19;
  v26[1] = v20;
  *((_BYTE *)v14 + v12[9]) = v21;
  sub_100026C34((uint64_t)&v11[*(int *)(v9 + 24)], (uint64_t)v14 + v12[8], type metadata accessor for WidgetTileInfo);
  v27 = &v8->i8[*(int *)(v6 + 20)];
  v28 = enum case for RoundedCornerStyle.continuous(_:);
  v29 = type metadata accessor for RoundedCornerStyle(0);
  (*(void (**)(__int8 *, uint64_t, uint64_t))(*(_QWORD *)(v29 - 8) + 104))(v27, v28, v29);
  *v8 = vdupq_n_s64(0x4030C00000000000uLL);
  sub_100026C78((uint64_t)v11, type metadata accessor for AccessoryAndSceneEntity);
  sub_100026D98((uint64_t)v8, (uint64_t)v14 + v12[11], (uint64_t (*)(_QWORD))&type metadata accessor for RoundedRectangle);
  LocalizedStringKey.StringInterpolation.init(literalCapacity:interpolationCount:)(2, 3);
  v30._countAndFlagsBits = 0;
  v30._object = (void *)0xE000000000000000;
  LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v30);
  v31 = v2 + *(int *)(v9 + 24);
  v32 = type metadata accessor for WidgetTileInfo(0);
  v33 = (uint64_t *)(v31 + *(int *)(v32 + 28));
  v34 = v33[1];
  if (v34)
    v35 = *v33;
  else
    v35 = 0;
  if (v34)
    v36 = (void *)v33[1];
  else
    v36 = (void *)0xE000000000000000;
  swift_bridgeObjectRetain(v34);
  v37._countAndFlagsBits = v35;
  v37._object = v36;
  LocalizedStringKey.StringInterpolation.appendInterpolation(_:)(v37);
  swift_bridgeObjectRelease(v36);
  v38._countAndFlagsBits = 44;
  v38._object = (void *)0xE100000000000000;
  LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v38);
  LocalizedStringKey.StringInterpolation.appendInterpolation(_:)(*(Swift::String *)(v31 + *(int *)(v32 + 24)));
  v39._countAndFlagsBits = 44;
  v39._object = (void *)0xE100000000000000;
  LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v39);
  sub_100079B30();
  if (v41)
  {
    v42 = v41;
  }
  else
  {
    v40 = 0;
    v42 = 0xE000000000000000;
  }
  v43 = v42;
  LocalizedStringKey.StringInterpolation.appendInterpolation(_:)(*(Swift::String *)&v40);
  swift_bridgeObjectRelease(v42);
  v44._countAndFlagsBits = 0;
  v44._object = (void *)0xE000000000000000;
  LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v44);
  v45 = LocalizedStringKey.init(stringInterpolation:)(v5);
  v47 = v46;
  v49 = v48;
  v51 = v50;
  v52 = sub_100008C7C(&qword_1000A6E18, type metadata accessor for SingleTapTargetTileView, (uint64_t)&unk_100089850);
  v53 = (uint64_t)v55;
  View.accessibilityLabel(_:)(v45, v47, v49 & 1, v51, v12, v52);
  swift_bridgeObjectRelease(v51);
  swift_bridgeObjectRelease(v47);
  sub_100026C78((uint64_t)v14, type metadata accessor for SingleTapTargetTileView);
  return sub_100052E04(v53, v56, &qword_1000A6E10);
}

uint64_t sub_10006B210@<X0>(uint64_t a1@<X8>)
{
  char *v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  int *v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int *v29;
  uint64_t v30;
  char v31;
  char v32;
  unint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t KeyPath;
  char *v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  char *v47;
  int *v48;
  char *v49;
  char *v50;
  uint64_t OpaqueTypeConformance2;
  uint64_t v52;
  uint64_t result;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  uint64_t (*v57)(char *, uint64_t, uint64_t);
  uint64_t v58;
  int v59;
  uint64_t v60;
  char *v61;
  char *v62;
  char *v63;
  char *v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  char *v78;
  int v79;
  char *v80;
  char *v81;
  uint64_t v82;
  uint64_t v83;
  char *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  char *v89;
  int *v90;
  uint64_t v91;
  char *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  char *v96;
  char *v97;
  uint64_t v98;
  uint64_t v99;
  int *v100;
  uint64_t v101;
  uint64_t v102;

  v2 = v1;
  v95 = a1;
  v98 = sub_10000527C(&qword_1000A6F88);
  v82 = *(_QWORD *)(v98 - 8);
  __chkstk_darwin(v98);
  v81 = (char *)&v76 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_10000527C(&qword_1000A5318);
  v5 = __chkstk_darwin(v4);
  v78 = (char *)&v76 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v8 = (char *)&v76 - v7;
  v91 = type metadata accessor for URL(0);
  v83 = *(_QWORD *)(v91 - 8);
  v9 = __chkstk_darwin(v91);
  v80 = (char *)&v76 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v92 = (char *)&v76 - v11;
  v93 = sub_10000527C(&qword_1000A6F90);
  __chkstk_darwin(v93);
  v97 = (char *)&v76 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_10000527C(&qword_1000A5E88);
  __chkstk_darwin(v13);
  v15 = (uint64_t *)((char *)&v76 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  v16 = type metadata accessor for ColorScheme(0);
  v87 = *(_QWORD *)(v16 - 8);
  v88 = v16;
  __chkstk_darwin(v16);
  v86 = (uint64_t)&v76 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = (int *)type metadata accessor for NormalTileGutsViewToggleStyle(0);
  __chkstk_darwin(v18);
  v20 = (char *)&v76 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = type metadata accessor for AccessoryAndSceneEntity(0);
  __chkstk_darwin(v21);
  v23 = (char *)&v76 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v94 = sub_10000527C(&qword_1000A6098);
  v85 = *(_QWORD *)(v94 - 8);
  __chkstk_darwin(v94);
  v96 = (char *)&v76 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = sub_10000527C(&qword_1000A6F98);
  v90 = *(int **)(v25 - 8);
  v26 = __chkstk_darwin(v25);
  v84 = (char *)&v76 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v26);
  v89 = (char *)&v76 - v28;
  v29 = (int *)type metadata accessor for SingleTapTargetTileView(0);
  v30 = (uint64_t)&v2[v29[7]];
  v79 = sub_10001709C();
  sub_100016974();
  if ((v31 & 1) != 0)
  {
    v32 = sub_10001709C();
    sub_100026C34(v30, (uint64_t)v23, type metadata accessor for AccessoryAndSceneEntity);
    v99 = sub_100027C1C((uint64_t)v23);
    v33 = sub_100026EC4();
    Toggle.init<A>(isOn:intent:label:)(v32 & 1, &v99, nullsub_1, 0, &type metadata for EmptyView, &type metadata for ToggleIntent, &protocol witness table for EmptyView, v33);
    sub_100026C34(v30, (uint64_t)v23, type metadata accessor for AccessoryAndSceneEntity);
    v34 = &v2[v29[10]];
    v35 = *(_QWORD *)v34;
    v36 = *((_QWORD *)v34 + 1);
    v37 = v2[v29[9]];
    v38 = v86;
    sub_100061EF4(v86);
    *v15 = swift_getKeyPath(&unk_100089610);
    v39 = sub_10000527C(&qword_1000A4FC0);
    swift_storeEnumTagMultiPayload(v15, v39, 0);
    KeyPath = swift_getKeyPath(&unk_100089640);
    sub_100052E04((uint64_t)v15, (uint64_t)v20, &qword_1000A5E88);
    v41 = &v20[v18[5]];
    *(_QWORD *)v41 = KeyPath;
    v41[8] = 0;
    sub_100026D98((uint64_t)v23, (uint64_t)&v20[v18[6]], type metadata accessor for AccessoryAndSceneEntity);
    v42 = &v20[v18[7]];
    *(_QWORD *)v42 = v35;
    *((_QWORD *)v42 + 1) = v36;
    v20[v18[8]] = v37;
    (*(void (**)(char *, uint64_t, uint64_t))(v87 + 32))(&v20[v18[9]], v38, v88);
    v43 = sub_1000229D8(&qword_1000A6100, &qword_1000A6098, (uint64_t)&protocol conformance descriptor for Toggle<A>);
    v44 = sub_100008C7C(&qword_1000A6FC0, type metadata accessor for NormalTileGutsViewToggleStyle, (uint64_t)&unk_1000899B0);
    v45 = v84;
    v46 = v94;
    v47 = v96;
    View.toggleStyle<A>(_:)(v20, v94, v18, v43, v44);
    sub_100026C78((uint64_t)v20, type metadata accessor for NormalTileGutsViewToggleStyle);
    (*(void (**)(char *, uint64_t))(v85 + 8))(v47, v46);
    v49 = v89;
    v48 = v90;
    (*((void (**)(char *, char *, uint64_t))v90 + 4))(v89, v45, v25);
    v50 = v97;
    (*((void (**)(char *, char *, uint64_t))v48 + 2))(v97, v49, v25);
    swift_storeEnumTagMultiPayload(v50, v93, 0);
    v99 = v46;
    v100 = v18;
    v101 = v43;
    v102 = v44;
    OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v99, &opaque type descriptor for <<opaque return type of View.toggleStyle<A>(_:)>>, 1);
    v52 = sub_1000229D8(&qword_1000A6FC8, &qword_1000A6F88, (uint64_t)&protocol conformance descriptor for Link<A>);
    _ConditionalContent<>.init(storage:)(v50, v25, v98, OpaqueTypeConformance2, v52);
    return (*((uint64_t (**)(char *, uint64_t))v48 + 1))(v49, v25);
  }
  v96 = v2;
  v90 = v18;
  v55 = v97;
  v54 = v98;
  sub_10001E684();
  v56 = v83;
  v57 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v83 + 48);
  v58 = v91;
  v59 = v57(v8, 1, v91);
  v60 = (uint64_t)v8;
  v77 = v25;
  if (v59 != 1)
  {
    v64 = v92;
    (*(void (**)(char *, char *, uint64_t))(v56 + 32))(v92, v8, v58);
    v62 = v55;
    v65 = v93;
    v63 = v96;
    goto LABEL_7;
  }
  v61 = v78;
  URL.init(string:)(0xD000000000000011, 0x800000010008ACF0);
  result = v57(v61, 1, v58);
  v62 = v55;
  v63 = v96;
  if ((_DWORD)result != 1)
  {
    v64 = v92;
    (*(void (**)(char *, char *, uint64_t))(v56 + 32))(v92, v61, v58);
    sub_100014EFC(v60, &qword_1000A5318);
    v65 = v93;
LABEL_7:
    v66 = v80;
    v67 = (*(uint64_t (**)(char *, char *, uint64_t))(v56 + 16))(v80, v64, v58);
    __chkstk_darwin(v67);
    *(&v76 - 2) = (uint64_t)v63;
    *((_BYTE *)&v76 - 8) = v79 & 1;
    v68 = sub_10000527C(&qword_1000A6FA0);
    v69 = sub_1000723DC();
    v70 = v81;
    Link.init(destination:label:)(v66, sub_1000723D0, &v76 - 4, v68, v69);
    v71 = v82;
    (*(void (**)(char *, char *, uint64_t))(v82 + 16))(v62, v70, v54);
    swift_storeEnumTagMultiPayload(v62, v65, 1);
    v72 = sub_1000229D8(&qword_1000A6100, &qword_1000A6098, (uint64_t)&protocol conformance descriptor for Toggle<A>);
    v73 = sub_100008C7C(&qword_1000A6FC0, type metadata accessor for NormalTileGutsViewToggleStyle, (uint64_t)&unk_1000899B0);
    v99 = v94;
    v100 = v90;
    v101 = v72;
    v102 = v73;
    v74 = swift_getOpaqueTypeConformance2(&v99, &opaque type descriptor for <<opaque return type of View.toggleStyle<A>(_:)>>, 1);
    v75 = sub_1000229D8(&qword_1000A6FC8, &qword_1000A6F88, (uint64_t)&protocol conformance descriptor for Link<A>);
    _ConditionalContent<>.init(storage:)(v62, v77, v54, v74, v75);
    (*(void (**)(char *, uint64_t))(v71 + 8))(v70, v54);
    return (*(uint64_t (**)(char *, uint64_t))(v56 + 8))(v92, v58);
  }
  __break(1u);
  return result;
}

uint64_t sub_10006BA50@<X0>(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  int *v16;
  uint64_t v17;
  double *v18;
  double v19;
  double v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  char *v24;
  int v25;
  double *v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;

  v41 = a3;
  v35 = type metadata accessor for AccessoryAndSceneEntity(0);
  __chkstk_darwin(v35);
  v6 = (char *)&v34 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for WidgetRenderingMode(0);
  v39 = *(_QWORD *)(v7 - 8);
  v40 = v7;
  __chkstk_darwin(v7);
  v9 = (char *)&v34 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for ColorScheme(0);
  v37 = *(_QWORD *)(v10 - 8);
  v38 = v10;
  __chkstk_darwin(v10);
  v12 = (char *)&v34 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_10000527C(&qword_1000A6FA0);
  __chkstk_darwin(v13);
  v15 = (uint64_t *)((char *)&v34 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  v16 = (int *)type metadata accessor for SingleTapTargetTileView(0);
  v17 = a1 + v16[7];
  v18 = (double *)(a1 + v16[10]);
  v20 = *v18;
  v19 = v18[1];
  v36 = *(unsigned __int8 *)(a1 + v16[9]);
  sub_100061EF4((uint64_t)v12);
  sub_10006215C((uint64_t)v9);
  v21 = a1 + v16[5];
  v22 = *(_QWORD *)v21;
  LOBYTE(v16) = *(_BYTE *)(v21 + 8);
  sub_100035568(*(_QWORD *)v21, (char)v16);
  v23 = sub_100061B38(v22, (char)v16);
  sub_10003561C(v22, (char)v16);
  sub_100026C34(v17, (uint64_t)v6, type metadata accessor for AccessoryAndSceneEntity);
  if ((a2 & 1) != 0)
  {
    v24 = &v6[*(int *)(v35 + 24)];
    v25 = v24[*(int *)(type metadata accessor for WidgetTileInfo(0) + 52)];
  }
  else
  {
    v25 = 0;
  }
  sub_100026C78((uint64_t)v6, type metadata accessor for AccessoryAndSceneEntity);
  v26 = (double *)((char *)v15 + *(int *)(v13 + 36));
  v27 = (char *)v26 + *(int *)(type metadata accessor for RoundedRectangle(0) + 20);
  v28 = enum case for RoundedCornerStyle.continuous(_:);
  v29 = type metadata accessor for RoundedCornerStyle(0);
  v30 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v29 - 8) + 104))(v27, v28, v29);
  *v26 = v19 * 0.25;
  v26[1] = v19 * 0.25;
  *v15 = static Alignment.center.getter(v30);
  v15[1] = v31;
  v32 = sub_10000527C(&qword_1000A6FD0);
  sub_10006BEB8(v25, v17, v36, a2 & 1, (uint64_t)v9, v23 & 1, (uint64_t)v12, (uint64_t)v15 + *(int *)(v32 + 44), v20, v19);
  (*(void (**)(char *, uint64_t))(v39 + 8))(v9, v40);
  (*(void (**)(char *, uint64_t))(v37 + 8))(v12, v38);
  return sub_100052E04((uint64_t)v15, v41, &qword_1000A6FA0);
}

uint64_t sub_10006BD20@<X0>(uint64_t a1@<X0>, int a2@<W1>, char a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, char a6@<W5>, _QWORD *a7@<X8>, double a8@<D0>, double a9@<D1>)
{
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t (*v20)(_QWORD);
  char *v21;
  int v22;
  double *v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v31;
  uint64_t v32;

  v32 = a4;
  v17 = type metadata accessor for AccessoryAndSceneEntity(0);
  __chkstk_darwin(v17);
  v19 = (char *)&v31 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100026C34(a1, (uint64_t)v19, v20);
  if ((a3 & 1) != 0)
  {
    v21 = &v19[*(int *)(v17 + 24)];
    v22 = v21[*(int *)(type metadata accessor for WidgetTileInfo(0) + 52)];
  }
  else
  {
    v22 = 0;
  }
  sub_100026C78((uint64_t)v19, type metadata accessor for AccessoryAndSceneEntity);
  v23 = (double *)((char *)a7 + *(int *)(sub_10000527C(&qword_1000A6FA0) + 36));
  v24 = (char *)v23 + *(int *)(type metadata accessor for RoundedRectangle(0) + 20);
  v25 = enum case for RoundedCornerStyle.continuous(_:);
  v26 = type metadata accessor for RoundedCornerStyle(0);
  v27 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 104))(v24, v25, v26);
  *v23 = a9 * 0.25;
  v23[1] = a9 * 0.25;
  *a7 = static Alignment.center.getter(v27);
  a7[1] = v28;
  v29 = sub_10000527C(&qword_1000A6FD0);
  return sub_10006BEB8(v22, a1, a2, a3 & 1, a5, a6 & 1, v32, (uint64_t)a7 + *(int *)(v29 + 44), a8, a9);
}

uint64_t sub_10006BEB8@<X0>(int a1@<W0>, uint64_t a2@<X1>, int a3@<W2>, int a4@<W3>, uint64_t a5@<X4>, int a6@<W5>, uint64_t a7@<X6>, uint64_t a8@<X8>, double a9@<D0>, double a10@<D1>)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _BYTE *v18;
  int *v19;
  uint64_t v20;
  _BYTE *v21;
  uint64_t v22;
  _BYTE *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _BYTE *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  double *v38;
  char v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char v46;
  _BYTE *v47;
  uint64_t v48;
  char v49;
  uint64_t v50;
  _BYTE *v51;
  uint64_t v52;
  uint64_t v53;
  _BYTE *v54;
  _BYTE *v55;
  _BYTE *v56;
  uint64_t v57;
  uint64_t v58;
  _BYTE v60[12];
  int v61;
  uint64_t v62;
  int v63;
  uint64_t v64;
  int v65;
  int v66;
  uint64_t v67;
  uint64_t v68;
  _BYTE *v69;
  uint64_t v70;
  _BYTE *v71;
  _BYTE *v72;
  _BYTE *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;

  v62 = a7;
  v61 = a6;
  v65 = a3;
  v66 = a4;
  v64 = a2;
  v63 = a1;
  v76 = a8;
  v13 = type metadata accessor for Material(0);
  v74 = *(_QWORD *)(v13 - 8);
  v75 = v13;
  __chkstk_darwin(v13);
  v73 = &v60[-((v14 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v15 = type metadata accessor for WidgetRenderingMode(0);
  v16 = *(_QWORD *)(v15 - 8);
  __chkstk_darwin(v15);
  v18 = &v60[-((v17 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v19 = (int *)type metadata accessor for NormalTileGutsView(0);
  __chkstk_darwin(v19);
  v21 = &v60[-((v20 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v67 = sub_10000527C(&qword_1000A6FD8);
  __chkstk_darwin(v67);
  v23 = &v60[-((v22 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v68 = sub_10000527C(&qword_1000A6FE0);
  v24 = __chkstk_darwin(v68);
  v72 = &v60[-((v25 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v26 = __chkstk_darwin(v24);
  v28 = &v60[-v27];
  __chkstk_darwin(v26);
  v71 = &v60[-v29];
  v30 = type metadata accessor for AccentableBackgroundView(0);
  v31 = __chkstk_darwin(v30);
  v69 = &v60[-((v32 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v31);
  v34 = &v60[-v33];
  *v34 = swift_getKeyPath(&unk_100089610);
  v35 = sub_10000527C(&qword_1000A4FC0);
  swift_storeEnumTagMultiPayload(v34, v35, 0);
  v36 = *(int *)(v30 + 20);
  LOBYTE(v30) = v63;
  *((_BYTE *)v34 + v36) = v63;
  v37 = sub_100026C34(v64, (uint64_t)v21, type metadata accessor for AccessoryAndSceneEntity);
  v38 = (double *)&v21[v19[5]];
  *v38 = a9;
  v38[1] = a10;
  v21[v19[6]] = v65;
  v21[v19[7]] = v66;
  v70 = v15;
  if ((v30 & 1) == 0)
  {
    v41 = a5;
    v42 = v16;
    v44 = sub_1000724E8(v41, v61 & 1, v62);
    v43 = swift_retain(v44);
    goto LABEL_5;
  }
  static WidgetRenderingMode.accented.getter(v37);
  v39 = static WidgetRenderingMode.== infix(_:_:)(a5, v18);
  v40 = (*(uint64_t (**)(_BYTE *, uint64_t))(v16 + 8))(v18, v15);
  v41 = a5;
  v42 = v16;
  if ((v39 & 1) != 0)
  {
    v43 = static Color.clear.getter(v40);
    v44 = v43;
LABEL_5:
    v45 = v41;
    goto LABEL_9;
  }
  if (qword_1000A4F40 != -1)
    swift_once(&qword_1000A4F40, sub_100076CC0);
  v44 = qword_1000A7AE8;
  v43 = swift_retain(qword_1000A7AE8);
  v45 = v41;
LABEL_9:
  v46 = static Edge.Set.all.getter(v43);
  sub_100026C34((uint64_t)v21, (uint64_t)v23, type metadata accessor for NormalTileGutsView);
  v47 = &v23[*(int *)(v67 + 36)];
  *(_QWORD *)v47 = v44;
  v47[8] = v46;
  v48 = sub_100026C78((uint64_t)v21, type metadata accessor for NormalTileGutsView);
  static WidgetRenderingMode.vibrant.getter(v48);
  v49 = static WidgetRenderingMode.== infix(_:_:)(v45, v18);
  v50 = (*(uint64_t (**)(_BYTE *, uint64_t))(v42 + 8))(v18, v70);
  v51 = v73;
  if ((v49 & 1) != 0)
    static Material.ultraThick.getter(v50);
  else
    static Material.thin.getter(v50);
  v53 = v74;
  v52 = v75;
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v74 + 16))(&v28[*(int *)(v68 + 36)], v51, v75);
  sub_100026CB4((uint64_t)v23, (uint64_t)v28, &qword_1000A6FD8);
  (*(void (**)(_BYTE *, uint64_t))(v53 + 8))(v51, v52);
  sub_100014EFC((uint64_t)v23, &qword_1000A6FD8);
  v54 = v71;
  sub_100052E04((uint64_t)v28, (uint64_t)v71, &qword_1000A6FE0);
  v55 = v69;
  sub_100026C34((uint64_t)v34, (uint64_t)v69, type metadata accessor for AccentableBackgroundView);
  v56 = v72;
  sub_100026CB4((uint64_t)v54, (uint64_t)v72, &qword_1000A6FE0);
  v57 = v76;
  sub_100026C34((uint64_t)v55, v76, type metadata accessor for AccentableBackgroundView);
  v58 = sub_10000527C(&qword_1000A6FE8);
  sub_100026CB4((uint64_t)v56, v57 + *(int *)(v58 + 48), &qword_1000A6FE0);
  sub_100014EFC((uint64_t)v54, &qword_1000A6FE0);
  sub_100026C78((uint64_t)v34, type metadata accessor for AccentableBackgroundView);
  sub_100014EFC((uint64_t)v56, &qword_1000A6FE0);
  return sub_100026C78((uint64_t)v55, type metadata accessor for AccentableBackgroundView);
}

uint64_t sub_10006C390@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  int *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int v11;
  uint64_t v12;
  char v13;
  int v14;
  double *v15;
  double v16;
  double v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  char v23;
  uint64_t v25;
  _QWORD *v26;

  v2 = v1;
  v26 = a1;
  v3 = type metadata accessor for WidgetRenderingMode(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v25 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = (int *)type metadata accessor for NormalTileGutsViewToggleStyle(0);
  v8 = __chkstk_darwin(v7);
  v10 = (char *)&v25 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = ToggleStyleConfiguration.isOn.getter(v8);
  v12 = v1 + v7[6];
  v13 = sub_10001E78C();
  sub_100026C34(v2, (uint64_t)v10, type metadata accessor for NormalTileGutsViewToggleStyle);
  if ((v13 & 1) != 0)
  {
    type metadata accessor for AccessoryAndSceneEntity(0);
    v14 = sub_10001709C();
    sub_100026C78((uint64_t)v10, type metadata accessor for NormalTileGutsViewToggleStyle);
    if (((v11 ^ v14) & 1) != 0)
      LOBYTE(v11) = sub_10001709C();
  }
  else
  {
    sub_100026C78((uint64_t)v10, type metadata accessor for NormalTileGutsViewToggleStyle);
  }
  v15 = (double *)(v2 + v7[7]);
  v16 = *v15;
  v17 = v15[1];
  v18 = v2 + v7[9];
  v19 = *(unsigned __int8 *)(v2 + v7[8]);
  sub_10006215C((uint64_t)v6);
  v20 = v2 + v7[5];
  v21 = *(_QWORD *)v20;
  v22 = *(_BYTE *)(v20 + 8);
  sub_100035568(*(_QWORD *)v20, v22);
  v23 = sub_100061B38(v21, v22);
  sub_10003561C(v21, v22);
  sub_10006BD20(v12, v19, v11 & 1, v18, (uint64_t)v6, v23 & 1, v26, v16, v17);
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

uint64_t sub_10006C584@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int *v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  int *v16;
  uint64_t v17;
  char *v18;
  int *v19;
  uint64_t v20;
  char v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t (*v38)(uint64_t);
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  char v42;
  uint64_t v43;
  uint64_t KeyPath;
  char *v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v50;
  uint64_t *v51;
  uint64_t v52;
  uint64_t v53;

  v2 = v1;
  v53 = a1;
  v3 = sub_10000527C(&qword_1000A5CD8);
  __chkstk_darwin(v3);
  v51 = (uint64_t *)((char *)&v50 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  v5 = (int *)type metadata accessor for SmallSquareTileView(0);
  __chkstk_darwin(v5);
  v7 = (char *)&v50 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v52 = sub_10000527C(&qword_1000A71C8);
  __chkstk_darwin(v52);
  v9 = (char *)&v50 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_10000527C(&qword_1000A5E88);
  __chkstk_darwin(v10);
  v12 = (uint64_t *)((char *)&v50 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  v13 = type metadata accessor for AccessoryAndSceneEntity(0);
  __chkstk_darwin(v13);
  v15 = (char *)&v50 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = (int *)type metadata accessor for RectangleTileView(0);
  __chkstk_darwin(v16);
  v18 = (char *)&v50 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = (int *)type metadata accessor for NormalTileGutsView(0);
  if (!*(_BYTE *)(v2 + v19[6]))
  {
    swift_bridgeObjectRelease(0xE900000000000065);
LABEL_8:
    sub_100026C34(v2, (uint64_t)v15, type metadata accessor for AccessoryAndSceneEntity);
    v39 = (uint64_t *)(v2 + v19[5]);
    v40 = *v39;
    v41 = v39[1];
    v42 = *(_BYTE *)(v2 + v19[7]);
    *v12 = swift_getKeyPath(&unk_100089610);
    v43 = sub_10000527C(&qword_1000A4FC0);
    swift_storeEnumTagMultiPayload(v12, v43, 0);
    KeyPath = swift_getKeyPath(&unk_100089640);
    sub_100052E04((uint64_t)v12, (uint64_t)v18, &qword_1000A5E88);
    v45 = &v18[v16[5]];
    *(_QWORD *)v45 = KeyPath;
    v45[8] = 0;
    sub_100026D98((uint64_t)v15, (uint64_t)&v18[v16[6]], type metadata accessor for AccessoryAndSceneEntity);
    v46 = &v18[v16[7]];
    *(_QWORD *)v46 = v40;
    *((_QWORD *)v46 + 1) = v41;
    v18[v16[8]] = v42;
    sub_100026C34((uint64_t)v18, (uint64_t)v9, type metadata accessor for RectangleTileView);
    swift_storeEnumTagMultiPayload(v9, v52, 0);
    v47 = sub_100008C7C(&qword_1000A71D0, type metadata accessor for RectangleTileView, (uint64_t)&unk_100089A34);
    v48 = sub_100008C7C(&qword_1000A71D8, type metadata accessor for SmallSquareTileView, (uint64_t)&unk_100088EA0);
    _ConditionalContent<>.init(storage:)(v9, v16, v5, v47, v48);
    v37 = (uint64_t)v18;
    v38 = type metadata accessor for RectangleTileView;
    return sub_100026C78(v37, v38);
  }
  if (*(_BYTE *)(v2 + v19[6]) == 1)
    v20 = 0x7571536C6C616D73;
  else
    v20 = 0x757153656772616CLL;
  v21 = _stringCompareWithSmolCheck(_:_:expecting:)(v20, 0xEB00000000657261, 0x6C676E6174636572, 0xE900000000000065, 0);
  swift_bridgeObjectRelease(0xEB00000000657261);
  if ((v21 & 1) != 0)
    goto LABEL_8;
  sub_100026C34(v2, (uint64_t)v15, type metadata accessor for AccessoryAndSceneEntity);
  v22 = (uint64_t *)(v2 + v19[5]);
  v23 = *v22;
  v24 = v22[1];
  v25 = *(_BYTE *)(v2 + v19[7]);
  v26 = swift_getKeyPath(&unk_100089640);
  *v12 = swift_getKeyPath(&unk_100089610);
  v27 = sub_10000527C(&qword_1000A4FC0);
  swift_storeEnumTagMultiPayload(v12, v27, 0);
  v28 = swift_getKeyPath(&unk_100089668);
  v29 = (uint64_t)v51;
  *v51 = v28;
  v30 = sub_10000527C(&qword_1000A4FC8);
  swift_storeEnumTagMultiPayload(v29, v30, 0);
  v31 = swift_getKeyPath(&unk_1000899E8);
  v32 = (uint64_t *)&v7[v5[7]];
  *v32 = v31;
  v33 = sub_10000527C(&qword_1000A4FD0);
  swift_storeEnumTagMultiPayload(v32, v33, 0);
  *(_QWORD *)v7 = v26;
  v7[8] = 0;
  sub_100052E04((uint64_t)v12, (uint64_t)&v7[v5[5]], &qword_1000A5E88);
  sub_100052E04(v29, (uint64_t)&v7[v5[6]], &qword_1000A5CD8);
  sub_100026D98((uint64_t)v15, (uint64_t)&v7[v5[8]], type metadata accessor for AccessoryAndSceneEntity);
  v34 = &v7[v5[9]];
  *(_QWORD *)v34 = v23;
  *((_QWORD *)v34 + 1) = v24;
  v7[v5[10]] = v25;
  sub_100026C34((uint64_t)v7, (uint64_t)v9, type metadata accessor for SmallSquareTileView);
  swift_storeEnumTagMultiPayload(v9, v52, 1);
  v35 = sub_100008C7C(&qword_1000A71D0, type metadata accessor for RectangleTileView, (uint64_t)&unk_100089A34);
  v36 = sub_100008C7C(&qword_1000A71D8, type metadata accessor for SmallSquareTileView, (uint64_t)&unk_100088EA0);
  _ConditionalContent<>.init(storage:)(v9, v16, v5, v35, v36);
  v37 = (uint64_t)v7;
  v38 = type metadata accessor for SmallSquareTileView;
  return sub_100026C78(v37, v38);
}

uint64_t sub_10006CAAC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  unsigned int v23;
  uint64_t v24;
  int v25;
  int v26;
  uint64_t v27;
  double v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  __int128 v41;
  _OWORD v43[3];

  v2 = v1;
  v4 = sub_10000527C(&qword_1000A72B8);
  __chkstk_darwin(v4);
  v6 = (char *)v43 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_10000527C(&qword_1000A72C0);
  __chkstk_darwin(v7);
  v9 = (char *)v43 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_10000527C(&qword_1000A72C8);
  v11 = __chkstk_darwin(v10);
  v13 = (char *)v43 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)v6 = static VerticalAlignment.center.getter(v11, v14, v15, v16, v17, v18);
  *((_QWORD *)v6 + 1) = 0;
  v6[16] = 1;
  v19 = sub_10000527C(&qword_1000A72D0);
  v20 = sub_10006CD2C(v2, (uint64_t)&v6[*(int *)(v19 + 44)]);
  v21 = static Edge.Set.leading.getter(v20);
  v22 = v21;
  v23 = static Edge.Set.trailing.getter(v21);
  v24 = Edge.Set.init(rawValue:)(0);
  v25 = Edge.Set.init(rawValue:)(v24);
  if (Edge.Set.init(rawValue:)(v25 & v22) != v22)
    v24 = Edge.Set.init(rawValue:)(v24 | v22);
  v26 = Edge.Set.init(rawValue:)(v24);
  if (Edge.Set.init(rawValue:)(v26 & v23) != v23)
    LOBYTE(v24) = Edge.Set.init(rawValue:)(v24 | v23);
  v27 = v2 + *(int *)(type metadata accessor for RectangleTileView(0) + 28);
  v28 = EdgeInsets.init(_all:)(*(double *)(v27 + 8) / 7.0);
  v30 = v29;
  v32 = v31;
  v34 = v33;
  sub_100026CB4((uint64_t)v6, (uint64_t)v9, &qword_1000A72B8);
  v35 = &v9[*(int *)(v7 + 36)];
  *v35 = v24;
  *((double *)v35 + 1) = v28;
  *((_QWORD *)v35 + 2) = v30;
  *((_QWORD *)v35 + 3) = v32;
  *((_QWORD *)v35 + 4) = v34;
  v35[40] = 0;
  v36 = sub_100014EFC((uint64_t)v6, &qword_1000A72B8);
  v37 = *(_QWORD *)(v27 + 8);
  v38 = static Alignment.center.getter(v36);
  _FrameLayout.init(width:height:alignment:)(v43, 0, 1, v37, 0, v38, v39);
  sub_100026CB4((uint64_t)v9, (uint64_t)v13, &qword_1000A72C0);
  v40 = &v13[*(int *)(v10 + 36)];
  v41 = v43[1];
  *(_OWORD *)v40 = v43[0];
  *((_OWORD *)v40 + 1) = v41;
  *((_OWORD *)v40 + 2) = v43[2];
  sub_100014EFC((uint64_t)v9, &qword_1000A72C0);
  return sub_100052E04((uint64_t)v13, a1, &qword_1000A72C8);
}

uint64_t sub_10006CD2C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  char *v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t *v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char v68;
  _QWORD *v69;
  void (*v70)(char *, _QWORD, uint64_t);
  char *v71;
  char *v72;
  uint64_t v73;
  uint64_t result;
  uint64_t v75;
  char *v76;
  char *v77;
  void (*v78)(char *, char *, uint64_t);
  char *v79;
  char *v80;
  void (*v81)(char *, char *, uint64_t);
  uint64_t v82;
  void (*v83)(char *, uint64_t);
  char *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  char *v89;
  uint64_t v90;
  _QWORD *v91;
  uint64_t KeyPath;
  uint64_t v93;
  uint64_t v94;
  char v95;
  unsigned int *v96;
  uint64_t v97;
  uint64_t v98;
  char *v99;
  uint64_t v100;
  uint64_t *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  int *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  int v120;
  uint64_t v121;
  int v122;
  uint64_t v123;
  uint64_t v124;
  char *v125;
  char *v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  char *v131;
  char *v132;
  char *v133;
  char *v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  char *v140;
  char *v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  unint64_t v146;
  uint64_t v147;
  char *v148;
  uint64_t v149;
  uint64_t v150;
  char *v151;
  char *v152;
  _QWORD *v153;
  uint64_t v154;
  uint64_t v155;
  _QWORD *v156;
  uint64_t v157;
  unsigned __int8 v158;
  uint64_t v159;
  unsigned __int8 v160;
  uint64_t v161;
  uint64_t v162;

  v144 = a2;
  v3 = type metadata accessor for RectangleTileView(0);
  __chkstk_darwin(v3);
  v5 = (char *)&v114 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for ColorScheme(0);
  v142 = *(_QWORD *)(v6 - 8);
  v143 = v6;
  __chkstk_darwin(v6);
  v141 = (char *)&v114 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v129 = sub_10000527C(&qword_1000A5F90);
  v8 = __chkstk_darwin(v129);
  v131 = (char *)&v114 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v126 = (char *)&v114 - v10;
  v11 = type metadata accessor for DynamicTypeSize(0);
  v153 = *(_QWORD **)(v11 - 8);
  v12 = __chkstk_darwin(v11);
  v152 = (char *)&v114 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v151 = (char *)&v114 - v14;
  v130 = sub_10000527C(&qword_1000A5F98);
  v15 = __chkstk_darwin(v130);
  v125 = (char *)&v114 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  v128 = (uint64_t)&v114 - v17;
  v18 = type metadata accessor for DeviceDisplayNames(0);
  v149 = *(_QWORD *)(v18 - 8);
  v150 = v18;
  __chkstk_darwin(v18);
  v148 = (char *)&v114 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = type metadata accessor for WidgetTileInfo(0);
  __chkstk_darwin(v20);
  v154 = (uint64_t)&v114 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v124 = type metadata accessor for TileNameAndStatusView(0);
  __chkstk_darwin(v124);
  v156 = (uint64_t *)((char *)&v114 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0));
  v136 = sub_10000527C(&qword_1000A6858);
  v135 = *(_QWORD *)(v136 - 8);
  __chkstk_darwin(v136);
  v133 = (char *)&v114 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v127 = sub_10000527C(&qword_1000A6860);
  v24 = __chkstk_darwin(v127);
  v139 = (uint64_t)&v114 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = __chkstk_darwin(v24);
  v132 = (char *)&v114 - v27;
  __chkstk_darwin(v26);
  v138 = (uint64_t)&v114 - v28;
  v29 = sub_10000527C(&qword_1000A72D8);
  v30 = __chkstk_darwin(v29);
  v137 = (uint64_t)&v114 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  v32 = __chkstk_darwin(v30);
  v34 = (char *)&v114 - v33;
  __chkstk_darwin(v32);
  v36 = (char *)&v114 - v35;
  v155 = *(int *)(v3 + 32);
  v37 = *(unsigned __int8 *)(a1 + v155);
  v38 = type metadata accessor for AccessoryAndSceneEntity(0);
  v140 = v5;
  if (v37 == 1)
    v39 = sub_100079FF4();
  else
    v39 = sub_10007985C();
  v146 = v40;
  v147 = v39;
  *(_QWORD *)v34 = static VerticalAlignment.center.getter(v39, v40, v41, v42, v43, v44);
  *((_QWORD *)v34 + 1) = 0;
  v34[16] = 1;
  v45 = sub_10000527C(&qword_1000A72E0);
  sub_10006D7F4(a1, (uint64_t)&v34[*(int *)(v45 + 44)]);
  v134 = v36;
  v46 = sub_100052E04((uint64_t)v34, (uint64_t)v36, &qword_1000A72D8);
  v47 = static Alignment.center.getter(v46);
  _FrameLayout.init(width:height:alignment:)(&v157, 0x4020000000000000, 0, 0, 1, v47, v48);
  v123 = v157;
  v122 = v158;
  v121 = v159;
  v120 = v160;
  v119 = v161;
  v118 = v162;
  v117 = v3;
  v49 = a1 + *(int *)(v3 + 24);
  type metadata accessor for AccessoryAndSceneEntity(0);
  v115 = v38;
  v50 = v49 + *(int *)(v38 + 24);
  v51 = (uint64_t *)(v50 + *(int *)(v20 + 28));
  v52 = v51[1];
  v145 = *v51;
  v53 = v154;
  sub_100026C34(v50, v154, type metadata accessor for WidgetTileInfo);
  v116 = v20;
  v54 = *(int *)(v20 + 28);
  v55 = (uint64_t *)(v53 + *(int *)(v20 + 24));
  v57 = *v55;
  v56 = v55[1];
  v58 = a1;
  v60 = *(_QWORD *)(v53 + v54);
  v59 = *(_QWORD *)(v53 + v54 + 8);
  swift_bridgeObjectRetain(v59);
  swift_bridgeObjectRetain(v52);
  swift_bridgeObjectRetain(v56);
  v61 = v148;
  v62 = DeviceDisplayNames.init(name:roomName:)(v57, v56, v60, v59);
  v63 = DeviceDisplayNames.displayName.getter(v62);
  v65 = v64;
  (*(void (**)(char *, uint64_t))(v149 + 8))(v61, v150);
  v66 = sub_100026C78(v53, type metadata accessor for WidgetTileInfo);
  v67 = static Font.footnote.getter(v66);
  v150 = v58;
  LOBYTE(v58) = *(_BYTE *)(v58 + v155);
  sub_100017778();
  TileNameAndStatusView.init(roomName:name:statusString:font:tileStyle:isActivated:isInFlight:)(v145, v52, v63, v65, v147, v146, v67, 0, v156, v58, v68 & 1);
  v69 = v153;
  v70 = (void (*)(char *, _QWORD, uint64_t))v153[13];
  v71 = v151;
  v70(v151, enum case for DynamicTypeSize.xSmall(_:), v11);
  v72 = v152;
  v70(v152, enum case for DynamicTypeSize.accessibility1(_:), v11);
  v73 = sub_100008C7C(&qword_1000A6000, (uint64_t (*)(uint64_t))&type metadata accessor for DynamicTypeSize, (uint64_t)&protocol conformance descriptor for DynamicTypeSize);
  result = dispatch thunk of static Comparable.<= infix(_:_:)(v71, v72, v11, v73);
  if ((result & 1) != 0)
  {
    v75 = v129;
    v76 = v126;
    v77 = &v126[*(int *)(v129 + 48)];
    v78 = (void (*)(char *, char *, uint64_t))v69[4];
    v78(v126, v71, v11);
    v78(v77, v72, v11);
    v79 = v131;
    v80 = &v131[*(int *)(v75 + 48)];
    v81 = (void (*)(char *, char *, uint64_t))v69[2];
    v81(v131, v76, v11);
    v81(v80, v77, v11);
    v82 = (uint64_t)v125;
    v78(v125, v79, v11);
    v83 = (void (*)(char *, uint64_t))v69[1];
    v83(v80, v11);
    v84 = &v79[*(int *)(v75 + 48)];
    v78(v79, v76, v11);
    v78(v84, v77, v11);
    v85 = v130;
    v78((char *)(v82 + *(int *)(v130 + 36)), v84, v11);
    v83(v79, v11);
    v86 = v128;
    sub_100052E04(v82, v128, &qword_1000A5F98);
    v87 = sub_100008C7C(&qword_1000A6868, type metadata accessor for TileNameAndStatusView, (uint64_t)&protocol conformance descriptor for TileNameAndStatusView);
    v88 = sub_1000229D8(&qword_1000A6038, &qword_1000A5F98, (uint64_t)&protocol conformance descriptor for ClosedRange<A>);
    v89 = v133;
    v90 = v87;
    v91 = v156;
    View.dynamicTypeSize<A>(_:)(v86, v124, v85, v90, v88);
    sub_100014EFC(v86, &qword_1000A5F98);
    sub_100026C78((uint64_t)v91, type metadata accessor for TileNameAndStatusView);
    KeyPath = swift_getKeyPath(&unk_100089668);
    LODWORD(v91) = *(unsigned __int8 *)(v150 + v155);
    v93 = (uint64_t)v140;
    sub_100026C34(v150, (uint64_t)v140, type metadata accessor for RectangleTileView);
    if ((_DWORD)v91 == 1)
    {
      v94 = v154;
      sub_100026C34(v93 + *(int *)(v117 + 24) + (uint64_t)*(int *)(v115 + 24), v154, type metadata accessor for WidgetTileInfo);
      sub_100026C78(v93, type metadata accessor for RectangleTileView);
      v95 = *(_BYTE *)(v94 + *(int *)(v116 + 52));
      sub_100026C78(v94, type metadata accessor for WidgetTileInfo);
      if ((v95 & 1) != 0)
      {
        v96 = (unsigned int *)&enum case for ColorScheme.light(_:);
LABEL_10:
        v98 = v142;
        v97 = v143;
        v99 = v141;
        (*(void (**)(char *, _QWORD, uint64_t))(v142 + 104))(v141, *v96, v143);
        v100 = (uint64_t)v132;
        v101 = (uint64_t *)&v132[*(int *)(v127 + 36)];
        v102 = sub_10000527C(&qword_1000A6870);
        (*(void (**)(char *, char *, uint64_t))(v98 + 16))((char *)v101 + *(int *)(v102 + 28), v99, v97);
        *v101 = KeyPath;
        v103 = v135;
        v104 = v136;
        (*(void (**)(uint64_t, char *, uint64_t))(v135 + 16))(v100, v89, v136);
        (*(void (**)(char *, uint64_t))(v98 + 8))(v99, v97);
        (*(void (**)(char *, uint64_t))(v103 + 8))(v89, v104);
        v105 = v138;
        sub_100052E04(v100, v138, &qword_1000A6860);
        v106 = (uint64_t)v134;
        v107 = v137;
        sub_100026CB4((uint64_t)v134, v137, &qword_1000A72D8);
        v108 = v139;
        sub_100026CB4(v105, v139, &qword_1000A6860);
        v109 = v144;
        sub_100026CB4(v107, v144, &qword_1000A72D8);
        v110 = (int *)sub_10000527C(&qword_1000A72E8);
        v111 = v109 + v110[12];
        *(_QWORD *)v111 = 0;
        *(_BYTE *)(v111 + 8) = 1;
        *(_QWORD *)(v111 + 16) = v123;
        *(_BYTE *)(v111 + 24) = v122;
        *(_QWORD *)(v111 + 32) = v121;
        *(_BYTE *)(v111 + 40) = v120;
        v112 = v118;
        *(_QWORD *)(v111 + 48) = v119;
        *(_QWORD *)(v111 + 56) = v112;
        sub_100026CB4(v108, v109 + v110[16], &qword_1000A6860);
        v113 = v109 + v110[20];
        *(_QWORD *)v113 = 0;
        *(_BYTE *)(v113 + 8) = 0;
        sub_100014EFC(v105, &qword_1000A6860);
        sub_100014EFC(v106, &qword_1000A72D8);
        sub_100014EFC(v108, &qword_1000A6860);
        return sub_100014EFC(v107, &qword_1000A72D8);
      }
    }
    else
    {
      sub_100026C78(v93, type metadata accessor for RectangleTileView);
    }
    v96 = (unsigned int *)&enum case for ColorScheme.dark(_:);
    goto LABEL_10;
  }
  __break(1u);
  return result;
}

uint64_t sub_10006D7F4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  int *v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char v42;
  char v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t KeyPath;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  unsigned int *v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  int v75;
  uint64_t v76;
  uint64_t v77;
  char v78;
  char v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t *v82;
  uint64_t v83;
  uint64_t v84;
  __n128 v85;
  __n128 v86;
  uint64_t v87;
  uint64_t v88;
  BOOL v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  unint64_t v99;
  uint64_t v100;
  char *v101;
  uint64_t v102;
  uint64_t v103;
  char *v104;
  char *v105;
  uint64_t v106;
  uint64_t v107;
  char *v108;
  uint64_t v109;
  char *v110;
  char *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  __int128 v124;
  __int128 v125;
  __int128 v126;
  __int128 v127;
  __int128 v128;
  uint64_t v129;
  int v130;
  __int16 v131;
  char v132;
  _BYTE v133[7];
  char v134;
  _BYTE v135[11];
  __int16 v136;
  _BYTE v137[7];
  char v138;
  __int128 v139;
  __int128 v140;
  __int128 v141;
  __int128 v142;
  __int128 v143;
  __int128 v144;
  __int128 v145;
  __int128 v146;
  uint64_t v147;

  v119 = a2;
  v3 = type metadata accessor for SymbolRenderingMode(0);
  v4 = __chkstk_darwin(v3);
  v113 = (uint64_t)&v101 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v112 = (uint64_t)&v101 - v6;
  v114 = type metadata accessor for WidgetTileInfo(0);
  __chkstk_darwin(v114);
  v101 = (char *)&v101 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v115 = sub_10000527C(&qword_1000A72F0);
  __chkstk_darwin(v115);
  v116 = (uint64_t)&v101 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for ColorScheme(0);
  v109 = *(_QWORD *)(v9 - 8);
  v110 = (char *)v9;
  __chkstk_darwin(v9);
  v108 = (char *)&v101 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_10000527C(&qword_1000A72F8);
  v106 = *(_QWORD *)(v11 - 8);
  v107 = v11;
  __chkstk_darwin(v11);
  v105 = (char *)&v101 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v117 = sub_10000527C(&qword_1000A7300);
  v13 = __chkstk_darwin(v117);
  v104 = (char *)&v101 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  v111 = (char *)&v101 - v15;
  v16 = type metadata accessor for WidgetRenderingMode(0);
  v102 = *(_QWORD *)(v16 - 8);
  v103 = v16;
  __chkstk_darwin(v16);
  v18 = (char *)&v101 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = (int *)type metadata accessor for RectangleTileView(0);
  __chkstk_darwin(v19);
  v21 = (char *)&v101 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v118 = type metadata accessor for TileIconView(0);
  v22 = __chkstk_darwin(v118);
  v24 = (char *)&v101 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v22);
  v26 = (char *)&v101 - v25;
  v27 = a1;
  v28 = a1 + v19[6];
  v29 = type metadata accessor for AccessoryAndSceneEntity(0);
  v120 = v28 + *(int *)(v29 + 24);
  sub_100079B30();
  if (v31)
  {
    v32 = v31;
    v33 = v27;
    v34 = v30;
    sub_10006215C((uint64_t)v18);
    v35 = v33 + v19[5];
    v36 = *(_QWORD *)v35;
    v37 = *(_BYTE *)(v35 + 8);
    sub_100035568(*(_QWORD *)v35, v37);
    sub_100061B38(v36, v37);
    sub_10003561C(v36, v37);
    v113 = sub_10001BBEC((uint64_t)v18);
    (*(void (**)(char *, uint64_t))(v102 + 8))(v18, v103);
    *(_QWORD *)&v139 = v34;
    *((_QWORD *)&v139 + 1) = v32;
    v38 = sub_100005300();
    v39 = Text.init<A>(_:)(&v139, &type metadata for String, v38);
    v41 = v40;
    v43 = v42;
    v45 = v44;
    KeyPath = swift_getKeyPath(&unk_100089A88);
    v47 = swift_getKeyPath(&unk_100089AB8);
    v48 = static Font.title.getter();
    v49 = Font.bold()();
    swift_release(v48);
    v50 = swift_getKeyPath(&unk_100089AE8);
    v51 = swift_getKeyPath(&unk_100089B18);
    v138 = v43 & 1;
    v134 = 0;
    v132 = 1;
    *(_QWORD *)&v139 = v39;
    *((_QWORD *)&v139 + 1) = v41;
    LOBYTE(v140) = v43 & 1;
    *(_DWORD *)((char *)&v140 + 1) = *(_DWORD *)v137;
    DWORD1(v140) = *(_DWORD *)&v137[3];
    *((_QWORD *)&v140 + 1) = v45;
    LOWORD(v141) = 256;
    *(_DWORD *)((char *)&v141 + 2) = *(_DWORD *)&v135[7];
    WORD3(v141) = v136;
    *((_QWORD *)&v141 + 1) = KeyPath;
    LOBYTE(v142) = 1;
    *(_DWORD *)((char *)&v142 + 1) = *(_DWORD *)v135;
    DWORD1(v142) = *(_DWORD *)&v135[3];
    *((_QWORD *)&v142 + 1) = v47;
    *(_QWORD *)&v143 = 1;
    BYTE8(v143) = 0;
    *(_DWORD *)((char *)&v143 + 9) = *(_DWORD *)v133;
    HIDWORD(v143) = *(_DWORD *)&v133[3];
    *(_QWORD *)&v144 = v50;
    *((_QWORD *)&v144 + 1) = v49;
    *(_QWORD *)&v145 = 0;
    WORD4(v145) = 1;
    HIWORD(v145) = v131;
    *(_DWORD *)((char *)&v145 + 10) = v130;
    *(_QWORD *)&v146 = v51;
    *((_QWORD *)&v146 + 1) = 0x3F847AE147AE147BLL;
    v52 = v113;
    v147 = v113;
    v127 = v145;
    v128 = v146;
    v129 = v113;
    v125 = v143;
    v126 = v144;
    v123 = v141;
    v124 = v142;
    v121 = v139;
    v122 = v140;
    swift_retain(v113);
    v53 = sub_10000527C(&qword_1000A7310);
    v54 = sub_1000768A4();
    v55 = v105;
    View.monospacedDigit()(v53, v54);
    sub_100076A30((uint64_t)&v139);
    v56 = swift_getKeyPath(&unk_100089668);
    v58 = v108;
    v57 = v109;
    if (*(_BYTE *)(v120 + *(int *)(v114 + 52)))
      v59 = (unsigned int *)&enum case for ColorScheme.light(_:);
    else
      v59 = (unsigned int *)&enum case for ColorScheme.dark(_:);
    v60 = v110;
    (*(void (**)(char *, _QWORD, char *))(v109 + 104))(v108, *v59, v110);
    v61 = v117;
    v62 = (uint64_t)v104;
    v63 = (uint64_t *)&v104[*(int *)(v117 + 36)];
    v64 = sub_10000527C(&qword_1000A6870);
    (*(void (**)(char *, char *, char *))(v57 + 16))((char *)v63 + *(int *)(v64 + 28), v58, v60);
    *v63 = v56;
    v66 = v106;
    v65 = v107;
    (*(void (**)(uint64_t, char *, uint64_t))(v106 + 16))(v62, v55, v107);
    (*(void (**)(char *, char *))(v57 + 8))(v58, v60);
    (*(void (**)(char *, uint64_t))(v66 + 8))(v55, v65);
    v67 = (uint64_t)v111;
    sub_100052E04(v62, (uint64_t)v111, &qword_1000A7300);
    v68 = v116;
    sub_100026CB4(v67, v116, &qword_1000A7300);
    swift_storeEnumTagMultiPayload(v68, v115, 0);
    v69 = sub_1000767F8();
    v70 = sub_100008C7C(&qword_1000A6960, type metadata accessor for TileIconView, (uint64_t)&protocol conformance descriptor for TileIconView);
    _ConditionalContent<>.init(storage:)(v68, v61, v118, v69, v70);
    swift_release(v52);
    return sub_100014EFC(v67, &qword_1000A7300);
  }
  else
  {
    v110 = v24;
    v111 = v26;
    v72 = (uint64_t)v101;
    v73 = v114;
    v74 = v19[8];
    v75 = *(unsigned __int8 *)(v27 + v74);
    sub_100026C34(v27, (uint64_t)v21, type metadata accessor for RectangleTileView);
    v76 = v116;
    if (v75 == 1)
    {
      sub_100026C34((uint64_t)&v21[v19[6] + (uint64_t)*(int *)(v29 + 24)], v72, type metadata accessor for WidgetTileInfo);
      sub_100026C78((uint64_t)v21, type metadata accessor for RectangleTileView);
      v77 = v73;
      v78 = *(_BYTE *)(v72 + *(int *)(v73 + 52));
      sub_100026C78(v72, type metadata accessor for WidgetTileInfo);
    }
    else
    {
      sub_100026C78((uint64_t)v21, type metadata accessor for RectangleTileView);
      v78 = 0;
      v77 = v73;
    }
    v79 = v78;
    v80 = 32;
    if (*(_BYTE *)(v27 + v74))
      v80 = 36;
    v81 = v120;
    v82 = (uint64_t *)(v120 + *(int *)(v77 + v80));
    v84 = *v82;
    v83 = v82[1];
    v85 = swift_bridgeObjectRetain(v83);
    StaticRenderingMode.symbolRenderingMode.getter(v85);
    v87 = StaticRenderingMode.symbolRenderingMode.getter(v86);
    v88 = v81;
    v89 = *(_BYTE *)(v81 + *(int *)(v77 + 52)) == 1;
    v90 = v77;
    v91 = v115;
    v92 = v117;
    v93 = (uint64_t)v110;
    v94 = (uint64_t)v111;
    if (v89)
    {
      v96 = *(_QWORD *)(v88 + *(int *)(v90 + 48));
      v95 = swift_retain(v96);
    }
    else
    {
      v95 = static Color.white.getter(v87);
      v96 = v95;
    }
    v97 = static Alignment.center.getter(v95);
    TileIconView.init(isActivated:iconSymbol:iconSymbolRenderingMode:iconSymbolActivatedRenderingMode:iconColor:imageContainerDimension:symbolFontSize:iconAlignment:)(v79, v84, v83, v112, v113, v96, v97, v98, v93, 38.0, 26.0);
    sub_100026D98(v93, v94, type metadata accessor for TileIconView);
    sub_100026C34(v94, v76, type metadata accessor for TileIconView);
    swift_storeEnumTagMultiPayload(v76, v91, 1);
    v99 = sub_1000767F8();
    v100 = sub_100008C7C(&qword_1000A6960, type metadata accessor for TileIconView, (uint64_t)&protocol conformance descriptor for TileIconView);
    _ConditionalContent<>.init(storage:)(v76, v92, v118, v99, v100);
    return sub_100026C78(v94, type metadata accessor for TileIconView);
  }
}

uint64_t sub_10006E030@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  void (*v21)(char *, uint64_t);
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  __int16 v35;

  v31 = a1;
  v28 = type metadata accessor for AccentableBackgroundView(0);
  __chkstk_darwin(v28);
  v2 = (char *)&v28 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = type metadata accessor for WidgetRenderingMode(0);
  v32 = *(_QWORD *)(v3 - 8);
  v4 = __chkstk_darwin(v3);
  v6 = (char *)&v28 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v8 = (char *)&v28 - v7;
  v30 = sub_10000527C(&qword_1000A71E0);
  v9 = *(_QWORD *)(v30 - 8);
  __chkstk_darwin(v30);
  v11 = (char *)&v28 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v29 = sub_10000527C(&qword_1000A71E8);
  v12 = __chkstk_darwin(v29);
  v14 = (char *)&v28 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = static Color.black.getter(v12);
  v34 = v15;
  v35 = 256;
  v16 = sub_10000527C(&qword_1000A71F0);
  v17 = sub_1000229D8(&qword_1000A71F8, &qword_1000A71F0, (uint64_t)&protocol conformance descriptor for _ShapeView<A, B>);
  View.widgetAccentable(_:)(1, v16, v17);
  swift_release(v15);
  v18 = v33;
  v19 = sub_10006215C((uint64_t)v8);
  static WidgetRenderingMode.accented.getter(v19);
  v20 = static WidgetRenderingMode.== infix(_:_:)(v8, v6);
  v21 = *(void (**)(char *, uint64_t))(v32 + 8);
  v21(v6, v3);
  v21(v8, v3);
  sub_100026C34(v18, (uint64_t)v2, type metadata accessor for AccentableBackgroundView);
  if ((v20 & 1) == 0)
  {
    sub_100026C78((uint64_t)v2, type metadata accessor for AccentableBackgroundView);
    v24 = v30;
    v23 = v31;
    v25 = v29;
    goto LABEL_5;
  }
  v22 = v2[*(int *)(v28 + 20)];
  sub_100026C78((uint64_t)v2, type metadata accessor for AccentableBackgroundView);
  v24 = v30;
  v23 = v31;
  v25 = v29;
  if ((v22 & 1) == 0)
  {
LABEL_5:
    v26 = 0;
    goto LABEL_6;
  }
  v26 = 0x3FE3333333333333;
LABEL_6:
  (*(void (**)(char *, char *, uint64_t))(v9 + 16))(v14, v11, v24);
  *(_QWORD *)&v14[*(int *)(v25 + 36)] = v26;
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v24);
  return sub_100052E04((uint64_t)v14, v23, &qword_1000A71E8);
}

unint64_t _s10HomeWidget9TileStyleO8rawValueACSgSS_tcfC_0(Swift::String string)
{
  void *object;
  Swift::String v2;
  unint64_t v3;

  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_10009E028, v2);
  swift_bridgeObjectRelease(object);
  if (v3 >= 3)
    return 3;
  else
    return v3;
}

uint64_t type metadata accessor for TileView(uint64_t a1)
{
  return sub_100050B64(a1, qword_1000A6E90, (uint64_t)&nominal type descriptor for TileView);
}

uint64_t type metadata accessor for SingleTapTargetTileView(uint64_t a1)
{
  return sub_100050B64(a1, qword_1000A6F38, (uint64_t)&nominal type descriptor for SingleTapTargetTileView);
}

unint64_t sub_10006E368()
{
  unint64_t result;

  result = qword_1000A6E20;
  if (!qword_1000A6E20)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for TileStyle, &type metadata for TileStyle);
    atomic_store(result, (unint64_t *)&qword_1000A6E20);
  }
  return result;
}

uint64_t sub_10006E3AC()
{
  return sub_1000229D8(&qword_1000A6E28, &qword_1000A6E30, (uint64_t)&protocol conformance descriptor for [A]);
}

uint64_t sub_10006E3D8(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &opaque type descriptor for <<opaque return type of TileView.body>>, 1);
}

uint64_t storeEnumTagSinglePayload for TileStyle(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_10006E434 + 4 * byte_100089605[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_10006E468 + 4 * byte_100089600[v4]))();
}

uint64_t sub_10006E468(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10006E470(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10006E478);
  return result;
}

uint64_t sub_10006E484(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10006E48CLL);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_10006E490(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10006E498(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for TileStyle()
{
  return &type metadata for TileStyle;
}

_QWORD *initializeBufferWithCopyOfBuffer for TileView(_QWORD *a1, _QWORD *a2, int *a3)
{
  int v5;
  uint64_t v6;
  void (*v7)(char *, char *, uint64_t, __n128);
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  int *v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  void (*v32)(char *, char *, uint64_t, __n128);
  __n128 v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  char *v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  char *v44;
  uint64_t v45;
  char *v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  char *v55;
  id v56;
  __n128 v57;
  uint64_t v58;
  char *v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  char *v76;
  __n128 v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  char *v81;
  char *v82;
  void *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  char *v87;
  char *v88;
  uint64_t v89;
  char *v90;
  char *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  char *v99;
  char *v100;
  uint64_t v101;
  char *v102;
  char *v103;
  uint64_t v104;
  void (*v105)(char *, char *, uint64_t, __n128);
  id v106;
  uint64_t v107;
  _QWORD *v108;
  __n128 v109;
  uint64_t v110;
  char *v112;
  uint64_t v113;
  void (*v114)(char *, char *, uint64_t, __n128);
  uint64_t v115;
  void (*v116)(char *, char *, uint64_t, __n128);
  _QWORD *v118;
  _QWORD *v119;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v110 = *a2;
    *a1 = *a2;
    v108 = (_QWORD *)(v110 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v110);
  }
  else
  {
    v6 = type metadata accessor for UUID(0);
    v7 = *(void (**)(char *, char *, uint64_t, __n128))(*(_QWORD *)(v6 - 8) + 16);
    ((void (*)(_QWORD *, _QWORD *, uint64_t))v7)(a1, a2, v6);
    v8 = type metadata accessor for AccessoryAndSceneEntity(0);
    ((void (*)(char *, char *, uint64_t))v7)((char *)a1 + *(int *)(v8 + 20), (char *)a2 + *(int *)(v8 + 20), v6);
    v9 = *(int *)(v8 + 24);
    v10 = (char *)a1 + v9;
    v11 = (char *)a2 + v9;
    v115 = v6;
    ((void (*)(char *, char *, uint64_t))v7)((char *)a1 + v9, (char *)a2 + v9, v6);
    v116 = v7;
    v12 = (int *)type metadata accessor for WidgetTileInfo(0);
    ((void (*)(char *, char *, uint64_t))v7)(&v10[v12[5]], &v11[v12[5]], v6);
    v13 = v12[6];
    v14 = &v10[v13];
    v15 = &v11[v13];
    v16 = *((_QWORD *)v15 + 1);
    *(_QWORD *)v14 = *(_QWORD *)v15;
    *((_QWORD *)v14 + 1) = v16;
    v17 = v12[7];
    v18 = &v10[v17];
    v19 = &v11[v17];
    v20 = *((_QWORD *)v19 + 1);
    *(_QWORD *)v18 = *(_QWORD *)v19;
    *((_QWORD *)v18 + 1) = v20;
    v21 = v12[8];
    v22 = &v10[v21];
    v23 = &v11[v21];
    v24 = *((_QWORD *)v23 + 1);
    *(_QWORD *)v22 = *(_QWORD *)v23;
    *((_QWORD *)v22 + 1) = v24;
    v25 = v12[9];
    v26 = &v10[v25];
    v27 = &v11[v25];
    v118 = a2;
    v119 = a1;
    v28 = *((_QWORD *)v27 + 1);
    *(_QWORD *)v26 = *(_QWORD *)v27;
    *((_QWORD *)v26 + 1) = v28;
    v29 = v12[10];
    v30 = &v10[v29];
    v112 = &v11[v29];
    v31 = type metadata accessor for StaticRenderingMode(0);
    v32 = *(void (**)(char *, char *, uint64_t, __n128))(*(_QWORD *)(v31 - 8) + 16);
    v114 = v32;
    swift_bridgeObjectRetain(v16);
    swift_bridgeObjectRetain(v20);
    swift_bridgeObjectRetain(v24);
    v33 = swift_bridgeObjectRetain(v28);
    v113 = v31;
    v32(v30, v112, v31, v33);
    ((void (*)(char *, char *, uint64_t))v32)(&v10[v12[11]], &v11[v12[11]], v31);
    v34 = v12[12];
    v35 = *(_QWORD *)&v11[v34];
    *(_QWORD *)&v10[v34] = v35;
    v10[v12[13]] = v11[v12[13]];
    v36 = v12[14];
    v37 = &v10[v36];
    v38 = &v11[v36];
    v39 = *(void **)v38;
    LOBYTE(v38) = v38[8];
    *(_QWORD *)v37 = v39;
    v37[8] = (char)v38;
    v40 = v12[15];
    v41 = *(_QWORD *)&v11[v40];
    *(_QWORD *)&v10[v40] = v41;
    v10[v12[16]] = v11[v12[16]];
    v10[v12[17]] = v11[v12[17]];
    v42 = v12[18];
    v43 = &v10[v42];
    v44 = &v11[v42];
    *(_QWORD *)v43 = *(_QWORD *)v44;
    v43[8] = v44[8];
    v45 = v12[19];
    v46 = &v10[v45];
    v47 = &v11[v45];
    v48 = *((_QWORD *)v47 + 1);
    *(_QWORD *)v46 = *(_QWORD *)v47;
    *((_QWORD *)v46 + 1) = v48;
    v10[v12[20]] = v11[v12[20]];
    v49 = v12[21];
    v50 = *(_QWORD *)&v11[v49];
    *(_QWORD *)&v10[v49] = v50;
    v51 = v12[22];
    v52 = *(_QWORD *)&v11[v51];
    *(_QWORD *)&v10[v51] = v52;
    v53 = a3[5];
    v54 = (char *)v119 + v53;
    v55 = (char *)v118 + v53;
    swift_retain(v35);
    v56 = v39;
    swift_bridgeObjectRetain(v41);
    swift_bridgeObjectRetain(v48);
    swift_bridgeObjectRetain(v50);
    v57 = swift_bridgeObjectRetain(v52);
    v116(v54, v55, v115, v57);
    ((void (*)(char *, char *, uint64_t))v116)(&v54[v12[5]], &v55[v12[5]], v115);
    v58 = v12[6];
    v59 = &v54[v58];
    v60 = &v55[v58];
    v61 = *((_QWORD *)v60 + 1);
    *(_QWORD *)v59 = *(_QWORD *)v60;
    *((_QWORD *)v59 + 1) = v61;
    v62 = v12[7];
    v63 = &v54[v62];
    v64 = &v55[v62];
    v65 = *((_QWORD *)v64 + 1);
    *(_QWORD *)v63 = *(_QWORD *)v64;
    *((_QWORD *)v63 + 1) = v65;
    v66 = v12[8];
    v67 = &v54[v66];
    v68 = &v55[v66];
    v69 = *((_QWORD *)v68 + 1);
    *(_QWORD *)v67 = *(_QWORD *)v68;
    *((_QWORD *)v67 + 1) = v69;
    v70 = v12[9];
    v71 = &v54[v70];
    v72 = &v55[v70];
    v73 = *((_QWORD *)v72 + 1);
    *(_QWORD *)v71 = *(_QWORD *)v72;
    *((_QWORD *)v71 + 1) = v73;
    v74 = v12[10];
    v75 = &v54[v74];
    v76 = &v55[v74];
    swift_bridgeObjectRetain(v61);
    swift_bridgeObjectRetain(v65);
    swift_bridgeObjectRetain(v69);
    v77 = swift_bridgeObjectRetain(v73);
    v114(v75, v76, v113, v77);
    ((void (*)(char *, char *, uint64_t))v114)(&v54[v12[11]], &v55[v12[11]], v113);
    v78 = v12[12];
    v79 = *(_QWORD *)&v55[v78];
    *(_QWORD *)&v54[v78] = v79;
    v54[v12[13]] = v55[v12[13]];
    v80 = v12[14];
    v81 = &v54[v80];
    v82 = &v55[v80];
    v83 = *(void **)v82;
    LOBYTE(v82) = v82[8];
    *(_QWORD *)v81 = v83;
    v81[8] = (char)v82;
    v84 = v12[15];
    v85 = *(_QWORD *)&v55[v84];
    *(_QWORD *)&v54[v84] = v85;
    v54[v12[16]] = v55[v12[16]];
    v54[v12[17]] = v55[v12[17]];
    v86 = v12[18];
    v87 = &v54[v86];
    v88 = &v55[v86];
    *(_QWORD *)v87 = *(_QWORD *)v88;
    v87[8] = v88[8];
    v89 = v12[19];
    v90 = &v54[v89];
    v91 = &v55[v89];
    v92 = *((_QWORD *)v91 + 1);
    *(_QWORD *)v90 = *(_QWORD *)v91;
    *((_QWORD *)v90 + 1) = v92;
    v54[v12[20]] = v55[v12[20]];
    v93 = v12[21];
    v94 = *(_QWORD *)&v55[v93];
    *(_QWORD *)&v54[v93] = v94;
    v95 = v12[22];
    v96 = *(_QWORD *)&v55[v95];
    *(_QWORD *)&v54[v95] = v96;
    v97 = a3[7];
    *((_BYTE *)v119 + a3[6]) = *((_BYTE *)v118 + a3[6]);
    *(_OWORD *)((char *)v119 + v97) = *(_OWORD *)((char *)v118 + v97);
    v98 = a3[8];
    v99 = (char *)v119 + v98;
    v100 = (char *)v118 + v98;
    *(_OWORD *)((char *)v119 + v98) = *(_OWORD *)((char *)v118 + v98);
    v101 = *(int *)(type metadata accessor for RoundedRectangle(0) + 20);
    v102 = &v99[v101];
    v103 = &v100[v101];
    v104 = type metadata accessor for RoundedCornerStyle(0);
    v105 = *(void (**)(char *, char *, uint64_t, __n128))(*(_QWORD *)(v104 - 8) + 16);
    swift_retain(v79);
    v106 = v83;
    swift_bridgeObjectRetain(v85);
    v107 = v92;
    v108 = v119;
    swift_bridgeObjectRetain(v107);
    swift_bridgeObjectRetain(v94);
    v109 = swift_bridgeObjectRetain(v96);
    v105(v102, v103, v104, v109);
  }
  return v108;
}

uint64_t destroy for TileView(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  void (*v5)(uint64_t, uint64_t);
  uint64_t v6;
  uint64_t v7;
  int *v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v4 = type metadata accessor for UUID(0);
  v5 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8);
  v5(a1, v4);
  v6 = type metadata accessor for AccessoryAndSceneEntity(0);
  v5(a1 + *(int *)(v6 + 20), v4);
  v7 = a1 + *(int *)(v6 + 24);
  v5(v7, v4);
  v8 = (int *)type metadata accessor for WidgetTileInfo(0);
  v5(v7 + v8[5], v4);
  swift_bridgeObjectRelease(*(_QWORD *)(v7 + v8[6] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v7 + v8[7] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v7 + v8[8] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v7 + v8[9] + 8));
  v9 = v7 + v8[10];
  v10 = type metadata accessor for StaticRenderingMode(0);
  v11 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 8);
  v11(v9, v10);
  v11(v7 + v8[11], v10);
  swift_release(*(_QWORD *)(v7 + v8[12]));

  swift_bridgeObjectRelease(*(_QWORD *)(v7 + v8[15]));
  swift_bridgeObjectRelease(*(_QWORD *)(v7 + v8[19] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v7 + v8[21]));
  swift_bridgeObjectRelease(*(_QWORD *)(v7 + v8[22]));
  v12 = a1 + *(int *)(a2 + 20);
  v5(v12, v4);
  v5(v12 + v8[5], v4);
  swift_bridgeObjectRelease(*(_QWORD *)(v12 + v8[6] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v12 + v8[7] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v12 + v8[8] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v12 + v8[9] + 8));
  v11(v12 + v8[10], v10);
  v11(v12 + v8[11], v10);
  swift_release(*(_QWORD *)(v12 + v8[12]));

  swift_bridgeObjectRelease(*(_QWORD *)(v12 + v8[15]));
  swift_bridgeObjectRelease(*(_QWORD *)(v12 + v8[19] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v12 + v8[21]));
  swift_bridgeObjectRelease(*(_QWORD *)(v12 + v8[22]));
  v13 = a1 + *(int *)(a2 + 32);
  v14 = v13 + *(int *)(type metadata accessor for RoundedRectangle(0) + 20);
  v15 = type metadata accessor for RoundedCornerStyle(0);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 8))(v14, v15);
}

uint64_t initializeWithCopy for TileView(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t, uint64_t);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int *v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void (*v31)(uint64_t, uint64_t, uint64_t, __n128);
  __n128 v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  _QWORD *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  id v55;
  __n128 v56;
  uint64_t v57;
  _QWORD *v58;
  _QWORD *v59;
  uint64_t v60;
  uint64_t v61;
  _QWORD *v62;
  _QWORD *v63;
  uint64_t v64;
  uint64_t v65;
  _QWORD *v66;
  _QWORD *v67;
  uint64_t v68;
  uint64_t v69;
  _QWORD *v70;
  _QWORD *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  __n128 v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  void *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  _QWORD *v89;
  _QWORD *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  void (*v104)(uint64_t, uint64_t, uint64_t, __n128);
  id v105;
  __n128 v106;
  uint64_t v108;
  uint64_t v109;
  void (*v110)(uint64_t, uint64_t, uint64_t, __n128);
  uint64_t v111;
  void (*v112)(uint64_t, uint64_t, uint64_t, __n128);

  v5 = type metadata accessor for UUID(0);
  v6 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16);
  v6(a1, a2, v5);
  v7 = type metadata accessor for AccessoryAndSceneEntity(0);
  v6(a1 + *(int *)(v7 + 20), a2 + *(int *)(v7 + 20), v5);
  v8 = *(int *)(v7 + 24);
  v9 = a1 + v8;
  v10 = a2 + v8;
  v111 = v5;
  v6(a1 + v8, a2 + v8, v5);
  v112 = (void (*)(uint64_t, uint64_t, uint64_t, __n128))v6;
  v11 = (int *)type metadata accessor for WidgetTileInfo(0);
  v6(v9 + v11[5], v10 + v11[5], v5);
  v12 = v11[6];
  v13 = (_QWORD *)(v9 + v12);
  v14 = (_QWORD *)(v10 + v12);
  v15 = v14[1];
  *v13 = *v14;
  v13[1] = v15;
  v16 = v11[7];
  v17 = (_QWORD *)(v9 + v16);
  v18 = (_QWORD *)(v10 + v16);
  v19 = v18[1];
  *v17 = *v18;
  v17[1] = v19;
  v20 = v11[8];
  v21 = (_QWORD *)(v9 + v20);
  v22 = (_QWORD *)(v10 + v20);
  v23 = v22[1];
  *v21 = *v22;
  v21[1] = v23;
  v24 = v11[9];
  v25 = (_QWORD *)(v9 + v24);
  v26 = (_QWORD *)(v10 + v24);
  v27 = v26[1];
  *v25 = *v26;
  v25[1] = v27;
  v28 = v11[10];
  v108 = v9 + v28;
  v29 = v10 + v28;
  v30 = type metadata accessor for StaticRenderingMode(0);
  v31 = *(void (**)(uint64_t, uint64_t, uint64_t, __n128))(*(_QWORD *)(v30 - 8) + 16);
  v110 = v31;
  swift_bridgeObjectRetain(v15);
  swift_bridgeObjectRetain(v19);
  swift_bridgeObjectRetain(v23);
  v32 = swift_bridgeObjectRetain(v27);
  v109 = v30;
  v31(v108, v29, v30, v32);
  ((void (*)(uint64_t, uint64_t, uint64_t))v31)(v9 + v11[11], v10 + v11[11], v30);
  v33 = v11[12];
  v34 = *(_QWORD *)(v10 + v33);
  *(_QWORD *)(v9 + v33) = v34;
  *(_BYTE *)(v9 + v11[13]) = *(_BYTE *)(v10 + v11[13]);
  v35 = v11[14];
  v36 = v9 + v35;
  v37 = v10 + v35;
  v38 = *(void **)v37;
  LOBYTE(v37) = *(_BYTE *)(v37 + 8);
  *(_QWORD *)v36 = v38;
  *(_BYTE *)(v36 + 8) = v37;
  v39 = v11[15];
  v40 = *(_QWORD *)(v10 + v39);
  *(_QWORD *)(v9 + v39) = v40;
  *(_BYTE *)(v9 + v11[16]) = *(_BYTE *)(v10 + v11[16]);
  *(_BYTE *)(v9 + v11[17]) = *(_BYTE *)(v10 + v11[17]);
  v41 = v11[18];
  v42 = v9 + v41;
  v43 = v10 + v41;
  *(_QWORD *)v42 = *(_QWORD *)v43;
  *(_BYTE *)(v42 + 8) = *(_BYTE *)(v43 + 8);
  v44 = v11[19];
  v45 = (_QWORD *)(v9 + v44);
  v46 = (_QWORD *)(v10 + v44);
  v47 = v46[1];
  *v45 = *v46;
  v45[1] = v47;
  *(_BYTE *)(v9 + v11[20]) = *(_BYTE *)(v10 + v11[20]);
  v48 = v11[21];
  v49 = *(_QWORD *)(v10 + v48);
  *(_QWORD *)(v9 + v48) = v49;
  v50 = v11[22];
  v51 = *(_QWORD *)(v10 + v50);
  *(_QWORD *)(v9 + v50) = v51;
  v52 = a3[5];
  v53 = a1 + v52;
  v54 = a2 + v52;
  swift_retain(v34);
  v55 = v38;
  swift_bridgeObjectRetain(v40);
  swift_bridgeObjectRetain(v47);
  swift_bridgeObjectRetain(v49);
  v56 = swift_bridgeObjectRetain(v51);
  v112(v53, v54, v111, v56);
  ((void (*)(uint64_t, uint64_t, uint64_t))v112)(v53 + v11[5], v54 + v11[5], v111);
  v57 = v11[6];
  v58 = (_QWORD *)(v53 + v57);
  v59 = (_QWORD *)(v54 + v57);
  v60 = v59[1];
  *v58 = *v59;
  v58[1] = v60;
  v61 = v11[7];
  v62 = (_QWORD *)(v53 + v61);
  v63 = (_QWORD *)(v54 + v61);
  v64 = v63[1];
  *v62 = *v63;
  v62[1] = v64;
  v65 = v11[8];
  v66 = (_QWORD *)(v53 + v65);
  v67 = (_QWORD *)(v54 + v65);
  v68 = v67[1];
  *v66 = *v67;
  v66[1] = v68;
  v69 = v11[9];
  v70 = (_QWORD *)(v53 + v69);
  v71 = (_QWORD *)(v54 + v69);
  v72 = v71[1];
  *v70 = *v71;
  v70[1] = v72;
  v73 = v11[10];
  v74 = v53 + v73;
  v75 = v54 + v73;
  swift_bridgeObjectRetain(v60);
  swift_bridgeObjectRetain(v64);
  swift_bridgeObjectRetain(v68);
  v76 = swift_bridgeObjectRetain(v72);
  v110(v74, v75, v109, v76);
  ((void (*)(uint64_t, uint64_t, uint64_t))v110)(v53 + v11[11], v54 + v11[11], v109);
  v77 = v11[12];
  v78 = *(_QWORD *)(v54 + v77);
  *(_QWORD *)(v53 + v77) = v78;
  *(_BYTE *)(v53 + v11[13]) = *(_BYTE *)(v54 + v11[13]);
  v79 = v11[14];
  v80 = v53 + v79;
  v81 = v54 + v79;
  v82 = *(void **)v81;
  LOBYTE(v81) = *(_BYTE *)(v81 + 8);
  *(_QWORD *)v80 = v82;
  *(_BYTE *)(v80 + 8) = v81;
  v83 = v11[15];
  v84 = *(_QWORD *)(v54 + v83);
  *(_QWORD *)(v53 + v83) = v84;
  *(_BYTE *)(v53 + v11[16]) = *(_BYTE *)(v54 + v11[16]);
  *(_BYTE *)(v53 + v11[17]) = *(_BYTE *)(v54 + v11[17]);
  v85 = v11[18];
  v86 = v53 + v85;
  v87 = v54 + v85;
  *(_QWORD *)v86 = *(_QWORD *)v87;
  *(_BYTE *)(v86 + 8) = *(_BYTE *)(v87 + 8);
  v88 = v11[19];
  v89 = (_QWORD *)(v53 + v88);
  v90 = (_QWORD *)(v54 + v88);
  v91 = v90[1];
  *v89 = *v90;
  v89[1] = v91;
  *(_BYTE *)(v53 + v11[20]) = *(_BYTE *)(v54 + v11[20]);
  v92 = v11[21];
  v93 = *(_QWORD *)(v54 + v92);
  *(_QWORD *)(v53 + v92) = v93;
  v94 = v11[22];
  v95 = *(_QWORD *)(v54 + v94);
  *(_QWORD *)(v53 + v94) = v95;
  v96 = a3[7];
  *(_BYTE *)(a1 + a3[6]) = *(_BYTE *)(a2 + a3[6]);
  *(_OWORD *)(a1 + v96) = *(_OWORD *)(a2 + v96);
  v97 = a3[8];
  v98 = a1 + v97;
  v99 = a2 + v97;
  *(_OWORD *)(a1 + v97) = *(_OWORD *)(a2 + v97);
  v100 = *(int *)(type metadata accessor for RoundedRectangle(0) + 20);
  v101 = v98 + v100;
  v102 = v99 + v100;
  v103 = type metadata accessor for RoundedCornerStyle(0);
  v104 = *(void (**)(uint64_t, uint64_t, uint64_t, __n128))(*(_QWORD *)(v103 - 8) + 16);
  swift_retain(v78);
  v105 = v82;
  swift_bridgeObjectRetain(v84);
  swift_bridgeObjectRetain(v91);
  swift_bridgeObjectRetain(v93);
  v106 = swift_bridgeObjectRetain(v95);
  v104(v101, v102, v103, v106);
  return a1;
}

uint64_t assignWithCopy for TileView(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t, uint64_t);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int *v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void (*v36)(uint64_t, uint64_t, uint64_t);
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  void *v43;
  void *v44;
  id v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t *v51;
  uint64_t v52;
  uint64_t v53;
  _QWORD *v54;
  _QWORD *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  _QWORD *v68;
  _QWORD *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  _QWORD *v73;
  _QWORD *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  _QWORD *v78;
  _QWORD *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  _QWORD *v83;
  _QWORD *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  void *v93;
  void *v94;
  id v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t *v101;
  uint64_t v102;
  uint64_t v103;
  _QWORD *v104;
  _QWORD *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  _QWORD *v115;
  _QWORD *v116;
  uint64_t v117;
  _QWORD *v118;
  uint64_t v119;
  uint64_t v120;
  char *v121;
  uint64_t v122;
  uint64_t v123;

  v5 = type metadata accessor for UUID(0);
  v6 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 24);
  v6(a1, a2, v5);
  v7 = type metadata accessor for AccessoryAndSceneEntity(0);
  v6(a1 + *(int *)(v7 + 20), a2 + *(int *)(v7 + 20), v5);
  v8 = *(int *)(v7 + 24);
  v9 = a1 + v8;
  v10 = a2 + v8;
  v6(a1 + v8, a2 + v8, v5);
  v11 = (int *)type metadata accessor for WidgetTileInfo(0);
  v6(v9 + v11[5], v10 + v11[5], v5);
  v12 = v11[6];
  v13 = (_QWORD *)(v9 + v12);
  v14 = (_QWORD *)(v10 + v12);
  *v13 = *v14;
  v15 = v14[1];
  v16 = v13[1];
  v13[1] = v15;
  swift_bridgeObjectRetain(v15);
  swift_bridgeObjectRelease(v16);
  v17 = v11[7];
  v18 = (_QWORD *)(v9 + v17);
  v19 = (_QWORD *)(v10 + v17);
  *v18 = *v19;
  v20 = v19[1];
  v21 = v18[1];
  v18[1] = v20;
  swift_bridgeObjectRetain(v20);
  swift_bridgeObjectRelease(v21);
  v22 = v11[8];
  v23 = (_QWORD *)(v9 + v22);
  v24 = (_QWORD *)(v10 + v22);
  *v23 = *v24;
  v25 = v24[1];
  v26 = v23[1];
  v23[1] = v25;
  swift_bridgeObjectRetain(v25);
  swift_bridgeObjectRelease(v26);
  v27 = v11[9];
  v28 = (_QWORD *)(v9 + v27);
  v29 = (_QWORD *)(v10 + v27);
  *v28 = *v29;
  v30 = v29[1];
  v31 = v28[1];
  v28[1] = v30;
  swift_bridgeObjectRetain(v30);
  swift_bridgeObjectRelease(v31);
  v32 = v11[10];
  v33 = v9 + v32;
  v34 = v10 + v32;
  v35 = type metadata accessor for StaticRenderingMode(0);
  v36 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v35 - 8) + 24);
  v36(v33, v34, v35);
  v36(v9 + v11[11], v10 + v11[11], v35);
  v37 = v11[12];
  v38 = *(_QWORD *)(v10 + v37);
  v39 = *(_QWORD *)(v9 + v37);
  *(_QWORD *)(v9 + v37) = v38;
  swift_retain(v38);
  swift_release(v39);
  *(_BYTE *)(v9 + v11[13]) = *(_BYTE *)(v10 + v11[13]);
  v40 = v11[14];
  v41 = v9 + v40;
  v42 = v10 + v40;
  v43 = *(void **)v42;
  LOBYTE(v42) = *(_BYTE *)(v42 + 8);
  v44 = *(void **)v41;
  *(_QWORD *)v41 = v43;
  *(_BYTE *)(v41 + 8) = v42;
  v45 = v43;

  v46 = v11[15];
  v47 = *(_QWORD *)(v10 + v46);
  v48 = *(_QWORD *)(v9 + v46);
  *(_QWORD *)(v9 + v46) = v47;
  swift_bridgeObjectRetain(v47);
  swift_bridgeObjectRelease(v48);
  *(_BYTE *)(v9 + v11[16]) = *(_BYTE *)(v10 + v11[16]);
  *(_BYTE *)(v9 + v11[17]) = *(_BYTE *)(v10 + v11[17]);
  v49 = v11[18];
  v50 = v9 + v49;
  v51 = (uint64_t *)(v10 + v49);
  v52 = *v51;
  *(_BYTE *)(v50 + 8) = *((_BYTE *)v51 + 8);
  *(_QWORD *)v50 = v52;
  v53 = v11[19];
  v54 = (_QWORD *)(v9 + v53);
  v55 = (_QWORD *)(v10 + v53);
  *v54 = *v55;
  v56 = v55[1];
  v57 = v54[1];
  v54[1] = v56;
  swift_bridgeObjectRetain(v56);
  swift_bridgeObjectRelease(v57);
  *(_BYTE *)(v9 + v11[20]) = *(_BYTE *)(v10 + v11[20]);
  v58 = v11[21];
  v59 = *(_QWORD *)(v10 + v58);
  v60 = *(_QWORD *)(v9 + v58);
  *(_QWORD *)(v9 + v58) = v59;
  swift_bridgeObjectRetain(v59);
  swift_bridgeObjectRelease(v60);
  v61 = v11[22];
  v62 = *(_QWORD *)(v10 + v61);
  v63 = *(_QWORD *)(v9 + v61);
  *(_QWORD *)(v9 + v61) = v62;
  swift_bridgeObjectRetain(v62);
  swift_bridgeObjectRelease(v63);
  v64 = a3[5];
  v65 = a1 + v64;
  v66 = a2 + v64;
  v6(a1 + v64, a2 + v64, v5);
  v6(v65 + v11[5], v66 + v11[5], v5);
  v67 = v11[6];
  v68 = (_QWORD *)(v65 + v67);
  v69 = (_QWORD *)(v66 + v67);
  *v68 = *v69;
  v70 = v69[1];
  v71 = v68[1];
  v68[1] = v70;
  swift_bridgeObjectRetain(v70);
  swift_bridgeObjectRelease(v71);
  v72 = v11[7];
  v73 = (_QWORD *)(v65 + v72);
  v74 = (_QWORD *)(v66 + v72);
  *v73 = *v74;
  v75 = v74[1];
  v76 = v73[1];
  v73[1] = v75;
  swift_bridgeObjectRetain(v75);
  swift_bridgeObjectRelease(v76);
  v77 = v11[8];
  v78 = (_QWORD *)(v65 + v77);
  v79 = (_QWORD *)(v66 + v77);
  *v78 = *v79;
  v80 = v79[1];
  v81 = v78[1];
  v78[1] = v80;
  swift_bridgeObjectRetain(v80);
  swift_bridgeObjectRelease(v81);
  v82 = v11[9];
  v83 = (_QWORD *)(v65 + v82);
  v84 = (_QWORD *)(v66 + v82);
  *v83 = *v84;
  v85 = v84[1];
  v86 = v83[1];
  v83[1] = v85;
  swift_bridgeObjectRetain(v85);
  swift_bridgeObjectRelease(v86);
  v36(v65 + v11[10], v66 + v11[10], v35);
  v36(v65 + v11[11], v66 + v11[11], v35);
  v87 = v11[12];
  v88 = *(_QWORD *)(v66 + v87);
  v89 = *(_QWORD *)(v65 + v87);
  *(_QWORD *)(v65 + v87) = v88;
  swift_retain(v88);
  swift_release(v89);
  *(_BYTE *)(v65 + v11[13]) = *(_BYTE *)(v66 + v11[13]);
  v90 = v11[14];
  v91 = v65 + v90;
  v92 = v66 + v90;
  v93 = *(void **)v92;
  LOBYTE(v92) = *(_BYTE *)(v92 + 8);
  v94 = *(void **)v91;
  *(_QWORD *)v91 = v93;
  *(_BYTE *)(v91 + 8) = v92;
  v95 = v93;

  v96 = v11[15];
  v97 = *(_QWORD *)(v66 + v96);
  v98 = *(_QWORD *)(v65 + v96);
  *(_QWORD *)(v65 + v96) = v97;
  swift_bridgeObjectRetain(v97);
  swift_bridgeObjectRelease(v98);
  *(_BYTE *)(v65 + v11[16]) = *(_BYTE *)(v66 + v11[16]);
  *(_BYTE *)(v65 + v11[17]) = *(_BYTE *)(v66 + v11[17]);
  v99 = v11[18];
  v100 = v65 + v99;
  v101 = (uint64_t *)(v66 + v99);
  v102 = *v101;
  *(_BYTE *)(v100 + 8) = *((_BYTE *)v101 + 8);
  *(_QWORD *)v100 = v102;
  v103 = v11[19];
  v104 = (_QWORD *)(v65 + v103);
  v105 = (_QWORD *)(v66 + v103);
  *v104 = *v105;
  v106 = v105[1];
  v107 = v104[1];
  v104[1] = v106;
  swift_bridgeObjectRetain(v106);
  swift_bridgeObjectRelease(v107);
  *(_BYTE *)(v65 + v11[20]) = *(_BYTE *)(v66 + v11[20]);
  v108 = v11[21];
  v109 = *(_QWORD *)(v66 + v108);
  v110 = *(_QWORD *)(v65 + v108);
  *(_QWORD *)(v65 + v108) = v109;
  swift_bridgeObjectRetain(v109);
  swift_bridgeObjectRelease(v110);
  v111 = v11[22];
  v112 = *(_QWORD *)(v66 + v111);
  v113 = *(_QWORD *)(v65 + v111);
  *(_QWORD *)(v65 + v111) = v112;
  swift_bridgeObjectRetain(v112);
  swift_bridgeObjectRelease(v113);
  *(_BYTE *)(a1 + a3[6]) = *(_BYTE *)(a2 + a3[6]);
  v114 = a3[7];
  v115 = (_QWORD *)(a1 + v114);
  v116 = (_QWORD *)(a2 + v114);
  *v115 = *v116;
  v115[1] = v116[1];
  v117 = a3[8];
  v118 = (_QWORD *)(a1 + v117);
  v119 = a2 + v117;
  *v118 = *(_QWORD *)(a2 + v117);
  v118[1] = *(_QWORD *)(a2 + v117 + 8);
  v120 = *(int *)(type metadata accessor for RoundedRectangle(0) + 20);
  v121 = (char *)v118 + v120;
  v122 = v119 + v120;
  v123 = type metadata accessor for RoundedCornerStyle(0);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v123 - 8) + 24))(v121, v122, v123);
  return a1;
}

uint64_t initializeWithTake for TileView(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t, uint64_t);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(uint64_t, uint64_t, uint64_t);
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;

  v5 = type metadata accessor for UUID(0);
  v6 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 32);
  v6(a1, a2, v5);
  v7 = type metadata accessor for AccessoryAndSceneEntity(0);
  v6(a1 + *(int *)(v7 + 20), a2 + *(int *)(v7 + 20), v5);
  v8 = *(int *)(v7 + 24);
  v9 = a1 + v8;
  v10 = a2 + v8;
  v6(a1 + v8, a2 + v8, v5);
  v11 = (int *)type metadata accessor for WidgetTileInfo(0);
  v6(v9 + v11[5], v10 + v11[5], v5);
  *(_OWORD *)(v9 + v11[6]) = *(_OWORD *)(v10 + v11[6]);
  *(_OWORD *)(v9 + v11[7]) = *(_OWORD *)(v10 + v11[7]);
  *(_OWORD *)(v9 + v11[8]) = *(_OWORD *)(v10 + v11[8]);
  *(_OWORD *)(v9 + v11[9]) = *(_OWORD *)(v10 + v11[9]);
  v12 = v11[10];
  v13 = v9 + v12;
  v14 = v10 + v12;
  v15 = type metadata accessor for StaticRenderingMode(0);
  v16 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 32);
  v16(v13, v14, v15);
  v16(v9 + v11[11], v10 + v11[11], v15);
  *(_QWORD *)(v9 + v11[12]) = *(_QWORD *)(v10 + v11[12]);
  *(_BYTE *)(v9 + v11[13]) = *(_BYTE *)(v10 + v11[13]);
  v17 = v11[14];
  v18 = v9 + v17;
  v19 = v10 + v17;
  *(_QWORD *)v18 = *(_QWORD *)v19;
  *(_BYTE *)(v18 + 8) = *(_BYTE *)(v19 + 8);
  *(_QWORD *)(v9 + v11[15]) = *(_QWORD *)(v10 + v11[15]);
  *(_BYTE *)(v9 + v11[16]) = *(_BYTE *)(v10 + v11[16]);
  *(_BYTE *)(v9 + v11[17]) = *(_BYTE *)(v10 + v11[17]);
  v20 = v11[18];
  v21 = v9 + v20;
  v22 = v10 + v20;
  *(_QWORD *)v21 = *(_QWORD *)v22;
  *(_BYTE *)(v21 + 8) = *(_BYTE *)(v22 + 8);
  *(_OWORD *)(v9 + v11[19]) = *(_OWORD *)(v10 + v11[19]);
  *(_BYTE *)(v9 + v11[20]) = *(_BYTE *)(v10 + v11[20]);
  *(_QWORD *)(v9 + v11[21]) = *(_QWORD *)(v10 + v11[21]);
  *(_QWORD *)(v9 + v11[22]) = *(_QWORD *)(v10 + v11[22]);
  v23 = a3[5];
  v24 = a1 + v23;
  v25 = a2 + v23;
  v6(a1 + v23, a2 + v23, v5);
  v6(v24 + v11[5], v25 + v11[5], v5);
  *(_OWORD *)(v24 + v11[6]) = *(_OWORD *)(v25 + v11[6]);
  *(_OWORD *)(v24 + v11[7]) = *(_OWORD *)(v25 + v11[7]);
  *(_OWORD *)(v24 + v11[8]) = *(_OWORD *)(v25 + v11[8]);
  *(_OWORD *)(v24 + v11[9]) = *(_OWORD *)(v25 + v11[9]);
  v16(v24 + v11[10], v25 + v11[10], v15);
  v16(v24 + v11[11], v25 + v11[11], v15);
  *(_QWORD *)(v24 + v11[12]) = *(_QWORD *)(v25 + v11[12]);
  *(_BYTE *)(v24 + v11[13]) = *(_BYTE *)(v25 + v11[13]);
  v26 = v11[14];
  v27 = v24 + v26;
  v28 = v25 + v26;
  *(_QWORD *)v27 = *(_QWORD *)v28;
  *(_BYTE *)(v27 + 8) = *(_BYTE *)(v28 + 8);
  *(_QWORD *)(v24 + v11[15]) = *(_QWORD *)(v25 + v11[15]);
  *(_BYTE *)(v24 + v11[16]) = *(_BYTE *)(v25 + v11[16]);
  *(_BYTE *)(v24 + v11[17]) = *(_BYTE *)(v25 + v11[17]);
  v29 = v11[18];
  v30 = v24 + v29;
  v31 = v25 + v29;
  *(_QWORD *)v30 = *(_QWORD *)v31;
  *(_BYTE *)(v30 + 8) = *(_BYTE *)(v31 + 8);
  *(_OWORD *)(v24 + v11[19]) = *(_OWORD *)(v25 + v11[19]);
  *(_BYTE *)(v24 + v11[20]) = *(_BYTE *)(v25 + v11[20]);
  *(_QWORD *)(v24 + v11[21]) = *(_QWORD *)(v25 + v11[21]);
  *(_QWORD *)(v24 + v11[22]) = *(_QWORD *)(v25 + v11[22]);
  v32 = a3[7];
  *(_BYTE *)(a1 + a3[6]) = *(_BYTE *)(a2 + a3[6]);
  *(_OWORD *)(a1 + v32) = *(_OWORD *)(a2 + v32);
  v33 = a3[8];
  v34 = a1 + v33;
  v35 = a2 + v33;
  *(_OWORD *)(a1 + v33) = *(_OWORD *)(a2 + v33);
  v36 = *(int *)(type metadata accessor for RoundedRectangle(0) + 20);
  v37 = v34 + v36;
  v38 = v35 + v36;
  v39 = type metadata accessor for RoundedCornerStyle(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v39 - 8) + 32))(v37, v38, v39);
  return a1;
}

uint64_t assignWithTake for TileView(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t, uint64_t);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int *v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  void (*v40)(uint64_t, uint64_t, uint64_t);
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t *v45;
  uint64_t v46;
  void *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  _QWORD *v54;
  uint64_t *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  _QWORD *v67;
  uint64_t *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  _QWORD *v73;
  uint64_t *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  _QWORD *v79;
  uint64_t *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  _QWORD *v85;
  uint64_t *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t *v94;
  uint64_t v95;
  void *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  _QWORD *v103;
  uint64_t *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;

  v5 = type metadata accessor for UUID(0);
  v6 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 40);
  v6(a1, a2, v5);
  v7 = type metadata accessor for AccessoryAndSceneEntity(0);
  v6(a1 + *(int *)(v7 + 20), a2 + *(int *)(v7 + 20), v5);
  v8 = *(int *)(v7 + 24);
  v9 = a1 + v8;
  v10 = a2 + v8;
  v6(a1 + v8, a2 + v8, v5);
  v11 = (int *)type metadata accessor for WidgetTileInfo(0);
  v6(v9 + v11[5], v10 + v11[5], v5);
  v12 = v11[6];
  v13 = (_QWORD *)(v9 + v12);
  v14 = (uint64_t *)(v10 + v12);
  v16 = *v14;
  v15 = v14[1];
  v17 = v13[1];
  *v13 = v16;
  v13[1] = v15;
  swift_bridgeObjectRelease(v17);
  v18 = v11[7];
  v19 = (_QWORD *)(v9 + v18);
  v20 = (uint64_t *)(v10 + v18);
  v22 = *v20;
  v21 = v20[1];
  v23 = v19[1];
  *v19 = v22;
  v19[1] = v21;
  swift_bridgeObjectRelease(v23);
  v24 = v11[8];
  v25 = (_QWORD *)(v9 + v24);
  v26 = (uint64_t *)(v10 + v24);
  v28 = *v26;
  v27 = v26[1];
  v29 = v25[1];
  *v25 = v28;
  v25[1] = v27;
  swift_bridgeObjectRelease(v29);
  v30 = v11[9];
  v31 = (_QWORD *)(v9 + v30);
  v32 = (uint64_t *)(v10 + v30);
  v34 = *v32;
  v33 = v32[1];
  v35 = v31[1];
  *v31 = v34;
  v31[1] = v33;
  swift_bridgeObjectRelease(v35);
  v36 = v11[10];
  v37 = v9 + v36;
  v38 = v10 + v36;
  v39 = type metadata accessor for StaticRenderingMode(0);
  v40 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v39 - 8) + 40);
  v40(v37, v38, v39);
  v40(v9 + v11[11], v10 + v11[11], v39);
  v41 = v11[12];
  v42 = *(_QWORD *)(v9 + v41);
  *(_QWORD *)(v9 + v41) = *(_QWORD *)(v10 + v41);
  swift_release(v42);
  *(_BYTE *)(v9 + v11[13]) = *(_BYTE *)(v10 + v11[13]);
  v43 = v11[14];
  v44 = v9 + v43;
  v45 = (uint64_t *)(v10 + v43);
  v46 = *v45;
  LOBYTE(v45) = *((_BYTE *)v45 + 8);
  v47 = *(void **)v44;
  *(_QWORD *)v44 = v46;
  *(_BYTE *)(v44 + 8) = (_BYTE)v45;

  v48 = v11[15];
  v49 = *(_QWORD *)(v9 + v48);
  *(_QWORD *)(v9 + v48) = *(_QWORD *)(v10 + v48);
  swift_bridgeObjectRelease(v49);
  *(_BYTE *)(v9 + v11[16]) = *(_BYTE *)(v10 + v11[16]);
  *(_BYTE *)(v9 + v11[17]) = *(_BYTE *)(v10 + v11[17]);
  v50 = v11[18];
  v51 = v9 + v50;
  v52 = v10 + v50;
  *(_BYTE *)(v51 + 8) = *(_BYTE *)(v52 + 8);
  *(_QWORD *)v51 = *(_QWORD *)v52;
  v53 = v11[19];
  v54 = (_QWORD *)(v9 + v53);
  v55 = (uint64_t *)(v10 + v53);
  v57 = *v55;
  v56 = v55[1];
  v58 = v54[1];
  *v54 = v57;
  v54[1] = v56;
  swift_bridgeObjectRelease(v58);
  *(_BYTE *)(v9 + v11[20]) = *(_BYTE *)(v10 + v11[20]);
  v59 = v11[21];
  v60 = *(_QWORD *)(v9 + v59);
  *(_QWORD *)(v9 + v59) = *(_QWORD *)(v10 + v59);
  swift_bridgeObjectRelease(v60);
  v61 = v11[22];
  v62 = *(_QWORD *)(v9 + v61);
  *(_QWORD *)(v9 + v61) = *(_QWORD *)(v10 + v61);
  swift_bridgeObjectRelease(v62);
  v63 = a3[5];
  v64 = a1 + v63;
  v65 = a2 + v63;
  v6(a1 + v63, a2 + v63, v5);
  v6(v64 + v11[5], v65 + v11[5], v5);
  v66 = v11[6];
  v67 = (_QWORD *)(v64 + v66);
  v68 = (uint64_t *)(v65 + v66);
  v70 = *v68;
  v69 = v68[1];
  v71 = v67[1];
  *v67 = v70;
  v67[1] = v69;
  swift_bridgeObjectRelease(v71);
  v72 = v11[7];
  v73 = (_QWORD *)(v64 + v72);
  v74 = (uint64_t *)(v65 + v72);
  v76 = *v74;
  v75 = v74[1];
  v77 = v73[1];
  *v73 = v76;
  v73[1] = v75;
  swift_bridgeObjectRelease(v77);
  v78 = v11[8];
  v79 = (_QWORD *)(v64 + v78);
  v80 = (uint64_t *)(v65 + v78);
  v82 = *v80;
  v81 = v80[1];
  v83 = v79[1];
  *v79 = v82;
  v79[1] = v81;
  swift_bridgeObjectRelease(v83);
  v84 = v11[9];
  v85 = (_QWORD *)(v64 + v84);
  v86 = (uint64_t *)(v65 + v84);
  v88 = *v86;
  v87 = v86[1];
  v89 = v85[1];
  *v85 = v88;
  v85[1] = v87;
  swift_bridgeObjectRelease(v89);
  v40(v64 + v11[10], v65 + v11[10], v39);
  v40(v64 + v11[11], v65 + v11[11], v39);
  v90 = v11[12];
  v91 = *(_QWORD *)(v64 + v90);
  *(_QWORD *)(v64 + v90) = *(_QWORD *)(v65 + v90);
  swift_release(v91);
  *(_BYTE *)(v64 + v11[13]) = *(_BYTE *)(v65 + v11[13]);
  v92 = v11[14];
  v93 = v64 + v92;
  v94 = (uint64_t *)(v65 + v92);
  v95 = *v94;
  LOBYTE(v94) = *((_BYTE *)v94 + 8);
  v96 = *(void **)v93;
  *(_QWORD *)v93 = v95;
  *(_BYTE *)(v93 + 8) = (_BYTE)v94;

  v97 = v11[15];
  v98 = *(_QWORD *)(v64 + v97);
  *(_QWORD *)(v64 + v97) = *(_QWORD *)(v65 + v97);
  swift_bridgeObjectRelease(v98);
  *(_BYTE *)(v64 + v11[16]) = *(_BYTE *)(v65 + v11[16]);
  *(_BYTE *)(v64 + v11[17]) = *(_BYTE *)(v65 + v11[17]);
  v99 = v11[18];
  v100 = v64 + v99;
  v101 = v65 + v99;
  *(_BYTE *)(v100 + 8) = *(_BYTE *)(v101 + 8);
  *(_QWORD *)v100 = *(_QWORD *)v101;
  v102 = v11[19];
  v103 = (_QWORD *)(v64 + v102);
  v104 = (uint64_t *)(v65 + v102);
  v106 = *v104;
  v105 = v104[1];
  v107 = v103[1];
  *v103 = v106;
  v103[1] = v105;
  swift_bridgeObjectRelease(v107);
  *(_BYTE *)(v64 + v11[20]) = *(_BYTE *)(v65 + v11[20]);
  v108 = v11[21];
  v109 = *(_QWORD *)(v64 + v108);
  *(_QWORD *)(v64 + v108) = *(_QWORD *)(v65 + v108);
  swift_bridgeObjectRelease(v109);
  v110 = v11[22];
  v111 = *(_QWORD *)(v64 + v110);
  *(_QWORD *)(v64 + v110) = *(_QWORD *)(v65 + v110);
  swift_bridgeObjectRelease(v111);
  v112 = a3[7];
  *(_BYTE *)(a1 + a3[6]) = *(_BYTE *)(a2 + a3[6]);
  *(_OWORD *)(a1 + v112) = *(_OWORD *)(a2 + v112);
  v113 = a3[8];
  v114 = a1 + v113;
  v115 = a2 + v113;
  *(_OWORD *)(a1 + v113) = *(_OWORD *)(a2 + v113);
  v116 = *(int *)(type metadata accessor for RoundedRectangle(0) + 20);
  v117 = v114 + v116;
  v118 = v115 + v116;
  v119 = type metadata accessor for RoundedCornerStyle(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v119 - 8) + 40))(v117, v118, v119);
  return a1;
}

uint64_t getEnumTagSinglePayload for TileView(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10006FDC0);
}

uint64_t sub_10006FDC0(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;

  v6 = type metadata accessor for AccessoryAndSceneEntity(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = type metadata accessor for WidgetTileInfo(0);
  v10 = *(_QWORD *)(v9 - 8);
  if (*(_DWORD *)(v10 + 84) == (_DWORD)a2)
  {
    v11 = v9;
    v12 = a3[5];
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v10 + 48))(a1 + v12, a2, v11);
  }
  if ((_DWORD)a2 != 253)
  {
    v11 = type metadata accessor for RoundedRectangle(0);
    v10 = *(_QWORD *)(v11 - 8);
    v12 = a3[8];
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v10 + 48))(a1 + v12, a2, v11);
  }
  v13 = *(unsigned __int8 *)(a1 + a3[6]);
  if (v13 >= 3)
    return v13 - 2;
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for TileView(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10006FE90);
}

uint64_t sub_10006FE90(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t result;
  uint64_t v14;
  uint64_t v15;

  v8 = type metadata accessor for AccessoryAndSceneEntity(0);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    result = type metadata accessor for WidgetTileInfo(0);
    v14 = *(_QWORD *)(result - 8);
    if (*(_DWORD *)(v14 + 84) == a3)
    {
      v10 = result;
      v15 = a4[5];
    }
    else
    {
      if (a3 == 253)
      {
        *(_BYTE *)(a1 + a4[6]) = a2 + 2;
        return result;
      }
      v10 = type metadata accessor for RoundedRectangle(0);
      v14 = *(_QWORD *)(v10 - 8);
      v15 = a4[8];
    }
    v12 = a1 + v15;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
  }
  return v11(v12, a2, a2, v10);
}

uint64_t sub_10006FF54(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  _QWORD v6[5];

  result = type metadata accessor for AccessoryAndSceneEntity(319);
  if (v3 <= 0x3F)
  {
    v6[0] = *(_QWORD *)(result - 8) + 64;
    result = type metadata accessor for WidgetTileInfo(319);
    if (v4 <= 0x3F)
    {
      v6[1] = *(_QWORD *)(result - 8) + 64;
      v6[2] = &unk_1000897E8;
      v6[3] = &unk_100089800;
      result = type metadata accessor for RoundedRectangle(319);
      if (v5 <= 0x3F)
      {
        v6[4] = *(_QWORD *)(result - 8) + 64;
        swift_initStructMetadata(a1, 256, 5, v6, a1 + 16);
        return 0;
      }
    }
  }
  return result;
}

unint64_t sub_10007000C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000A6ED8;
  if (!qword_1000A6ED8)
  {
    v1 = sub_1000052BC(&qword_1000A6E10);
    sub_100008C7C(&qword_1000A6E18, type metadata accessor for SingleTapTargetTileView, (uint64_t)&unk_100089850);
    sub_100008C7C(&qword_1000A6110, (uint64_t (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier, (uint64_t)&protocol conformance descriptor for AccessibilityAttachmentModifier);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000A6ED8);
  }
  return result;
}

_QWORD *sub_1000700A8(_QWORD *a1, _QWORD *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;
  void (*v31)(char *, char *, uint64_t);
  uint64_t v32;
  uint64_t v33;
  char *v34;
  char *v35;
  int *v36;
  uint64_t v37;
  char *v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  void (*v56)(char *, char *, uint64_t, __n128);
  __n128 v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  char *v62;
  void *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  char *v68;
  uint64_t v69;
  char *v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  char *v78;
  char *v79;
  id v80;
  __n128 v81;
  uint64_t v82;
  char *v83;
  char *v84;
  uint64_t v85;
  uint64_t v86;
  char *v87;
  char *v88;
  uint64_t v89;
  uint64_t v90;
  char *v91;
  char *v92;
  uint64_t v93;
  uint64_t v94;
  char *v95;
  char *v96;
  uint64_t v97;
  uint64_t v98;
  char *v99;
  char *v100;
  __n128 v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  char *v105;
  char *v106;
  void *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  char *v111;
  char *v112;
  uint64_t v113;
  char *v114;
  char *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  char *v123;
  char *v124;
  uint64_t v125;
  char *v126;
  char *v127;
  uint64_t v128;
  void (*v129)(char *, char *, uint64_t, __n128);
  id v130;
  __n128 v131;
  char *v133;
  uint64_t v134;
  void (*v135)(char *, char *, uint64_t, __n128);
  uint64_t v136;
  void (*v137)(char *, char *, uint64_t, __n128);
  int *v138;
  _QWORD *v139;
  _QWORD *v140;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v12 = *a2;
    *a1 = *a2;
    v13 = (_QWORD *)(v12 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v12);
  }
  else
  {
    v7 = sub_10000527C(&qword_1000A4FC0);
    if (swift_getEnumCaseMultiPayload(a2, v7) == 1)
    {
      v8 = type metadata accessor for WidgetRenderingMode(0);
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(a1, a2, v8);
      v9 = a1;
      v10 = v7;
      v11 = 1;
    }
    else
    {
      v14 = *a2;
      *a1 = *a2;
      swift_retain(v14);
      v9 = a1;
      v10 = v7;
      v11 = 0;
    }
    swift_storeEnumTagMultiPayload(v9, v10, v11);
    v15 = a3[5];
    v16 = (char *)a1 + v15;
    v17 = (char *)a2 + v15;
    v18 = *(_QWORD *)v17;
    v19 = v17[8];
    sub_100035568(*(_QWORD *)v17, v19);
    *(_QWORD *)v16 = v18;
    v16[8] = v19;
    v20 = a3[6];
    v21 = (_QWORD *)((char *)a1 + v20);
    v22 = (_QWORD *)((char *)a2 + v20);
    v23 = sub_10000527C(&qword_1000A4FC8);
    if (swift_getEnumCaseMultiPayload(v22, v23) == 1)
    {
      v24 = type metadata accessor for ColorScheme(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v24 - 8) + 16))(v21, v22, v24);
      v25 = 1;
    }
    else
    {
      v26 = *v22;
      *v21 = *v22;
      swift_retain(v26);
      v25 = 0;
    }
    swift_storeEnumTagMultiPayload(v21, v23, v25);
    v27 = a3[7];
    v28 = (char *)a1 + v27;
    v29 = (char *)a2 + v27;
    v30 = type metadata accessor for UUID(0);
    v31 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v30 - 8) + 16);
    v31(v28, v29, v30);
    v138 = a3;
    v32 = type metadata accessor for AccessoryAndSceneEntity(0);
    v31(&v28[*(int *)(v32 + 20)], &v29[*(int *)(v32 + 20)], v30);
    v33 = *(int *)(v32 + 24);
    v34 = &v28[v33];
    v35 = &v29[v33];
    v136 = v30;
    v31(&v28[v33], &v29[v33], v30);
    v137 = (void (*)(char *, char *, uint64_t, __n128))v31;
    v36 = (int *)type metadata accessor for WidgetTileInfo(0);
    v31(&v34[v36[5]], &v35[v36[5]], v30);
    v37 = v36[6];
    v38 = &v34[v37];
    v39 = &v35[v37];
    v40 = *((_QWORD *)v39 + 1);
    *(_QWORD *)v38 = *(_QWORD *)v39;
    *((_QWORD *)v38 + 1) = v40;
    v41 = v36[7];
    v42 = &v34[v41];
    v43 = &v35[v41];
    v44 = *((_QWORD *)v43 + 1);
    *(_QWORD *)v42 = *(_QWORD *)v43;
    *((_QWORD *)v42 + 1) = v44;
    v45 = v36[8];
    v46 = &v34[v45];
    v47 = &v35[v45];
    v139 = a2;
    v140 = a1;
    v48 = *((_QWORD *)v47 + 1);
    *(_QWORD *)v46 = *(_QWORD *)v47;
    *((_QWORD *)v46 + 1) = v48;
    v49 = v36[9];
    v50 = &v34[v49];
    v51 = &v35[v49];
    v52 = *((_QWORD *)v51 + 1);
    *(_QWORD *)v50 = *(_QWORD *)v51;
    *((_QWORD *)v50 + 1) = v52;
    v53 = v36[10];
    v133 = &v34[v53];
    v54 = &v35[v53];
    v55 = type metadata accessor for StaticRenderingMode(0);
    v56 = *(void (**)(char *, char *, uint64_t, __n128))(*(_QWORD *)(v55 - 8) + 16);
    v135 = v56;
    swift_bridgeObjectRetain(v40);
    swift_bridgeObjectRetain(v44);
    swift_bridgeObjectRetain(v48);
    v57 = swift_bridgeObjectRetain(v52);
    v134 = v55;
    v56(v133, v54, v55, v57);
    ((void (*)(char *, char *, uint64_t))v56)(&v34[v36[11]], &v35[v36[11]], v55);
    v58 = v36[12];
    v59 = *(_QWORD *)&v35[v58];
    *(_QWORD *)&v34[v58] = v59;
    v34[v36[13]] = v35[v36[13]];
    v60 = v36[14];
    v61 = &v34[v60];
    v62 = &v35[v60];
    v63 = *(void **)v62;
    LOBYTE(v62) = v62[8];
    *(_QWORD *)v61 = v63;
    v61[8] = (char)v62;
    v64 = v36[15];
    v65 = *(_QWORD *)&v35[v64];
    *(_QWORD *)&v34[v64] = v65;
    v34[v36[16]] = v35[v36[16]];
    v34[v36[17]] = v35[v36[17]];
    v66 = v36[18];
    v67 = &v34[v66];
    v68 = &v35[v66];
    *(_QWORD *)v67 = *(_QWORD *)v68;
    v67[8] = v68[8];
    v69 = v36[19];
    v70 = &v34[v69];
    v71 = &v35[v69];
    v72 = *((_QWORD *)v71 + 1);
    *(_QWORD *)v70 = *(_QWORD *)v71;
    *((_QWORD *)v70 + 1) = v72;
    v34[v36[20]] = v35[v36[20]];
    v73 = v36[21];
    v74 = *(_QWORD *)&v35[v73];
    *(_QWORD *)&v34[v73] = v74;
    v75 = v36[22];
    v76 = *(_QWORD *)&v35[v75];
    *(_QWORD *)&v34[v75] = v76;
    v77 = v138[8];
    v78 = (char *)v140 + v77;
    v79 = (char *)v139 + v77;
    swift_retain(v59);
    v80 = v63;
    swift_bridgeObjectRetain(v65);
    swift_bridgeObjectRetain(v72);
    swift_bridgeObjectRetain(v74);
    v81 = swift_bridgeObjectRetain(v76);
    v137(v78, v79, v136, v81);
    ((void (*)(char *, char *, uint64_t))v137)(&v78[v36[5]], &v79[v36[5]], v136);
    v82 = v36[6];
    v83 = &v78[v82];
    v84 = &v79[v82];
    v85 = *((_QWORD *)v84 + 1);
    *(_QWORD *)v83 = *(_QWORD *)v84;
    *((_QWORD *)v83 + 1) = v85;
    v86 = v36[7];
    v87 = &v78[v86];
    v88 = &v79[v86];
    v89 = *((_QWORD *)v88 + 1);
    *(_QWORD *)v87 = *(_QWORD *)v88;
    *((_QWORD *)v87 + 1) = v89;
    v90 = v36[8];
    v91 = &v78[v90];
    v92 = &v79[v90];
    v93 = *((_QWORD *)v92 + 1);
    *(_QWORD *)v91 = *(_QWORD *)v92;
    *((_QWORD *)v91 + 1) = v93;
    v94 = v36[9];
    v95 = &v78[v94];
    v96 = &v79[v94];
    v97 = *((_QWORD *)v96 + 1);
    *(_QWORD *)v95 = *(_QWORD *)v96;
    *((_QWORD *)v95 + 1) = v97;
    v98 = v36[10];
    v99 = &v78[v98];
    v100 = &v79[v98];
    swift_bridgeObjectRetain(v85);
    swift_bridgeObjectRetain(v89);
    swift_bridgeObjectRetain(v93);
    v101 = swift_bridgeObjectRetain(v97);
    v135(v99, v100, v134, v101);
    ((void (*)(char *, char *, uint64_t))v135)(&v78[v36[11]], &v79[v36[11]], v134);
    v102 = v36[12];
    v103 = *(_QWORD *)&v79[v102];
    *(_QWORD *)&v78[v102] = v103;
    v78[v36[13]] = v79[v36[13]];
    v104 = v36[14];
    v105 = &v78[v104];
    v106 = &v79[v104];
    v107 = *(void **)v106;
    LOBYTE(v106) = v106[8];
    *(_QWORD *)v105 = v107;
    v105[8] = (char)v106;
    v108 = v36[15];
    v109 = *(_QWORD *)&v79[v108];
    *(_QWORD *)&v78[v108] = v109;
    v78[v36[16]] = v79[v36[16]];
    v78[v36[17]] = v79[v36[17]];
    v110 = v36[18];
    v111 = &v78[v110];
    v112 = &v79[v110];
    *(_QWORD *)v111 = *(_QWORD *)v112;
    v111[8] = v112[8];
    v113 = v36[19];
    v114 = &v78[v113];
    v115 = &v79[v113];
    v116 = *((_QWORD *)v115 + 1);
    *(_QWORD *)v114 = *(_QWORD *)v115;
    *((_QWORD *)v114 + 1) = v116;
    v78[v36[20]] = v79[v36[20]];
    v117 = v36[21];
    v118 = *(_QWORD *)&v79[v117];
    *(_QWORD *)&v78[v117] = v118;
    v119 = v36[22];
    v120 = *(_QWORD *)&v79[v119];
    *(_QWORD *)&v78[v119] = v120;
    v121 = v138[10];
    *((_BYTE *)v140 + v138[9]) = *((_BYTE *)v139 + v138[9]);
    *(_OWORD *)((char *)v140 + v121) = *(_OWORD *)((char *)v139 + v121);
    v122 = v138[11];
    v123 = (char *)v140 + v122;
    v124 = (char *)v139 + v122;
    *(_OWORD *)((char *)v140 + v122) = *(_OWORD *)((char *)v139 + v122);
    v125 = *(int *)(type metadata accessor for RoundedRectangle(0) + 20);
    v126 = &v123[v125];
    v127 = &v124[v125];
    v128 = type metadata accessor for RoundedCornerStyle(0);
    v129 = *(void (**)(char *, char *, uint64_t, __n128))(*(_QWORD *)(v128 - 8) + 16);
    swift_retain(v103);
    v130 = v107;
    swift_bridgeObjectRetain(v109);
    swift_bridgeObjectRetain(v116);
    v13 = v140;
    swift_bridgeObjectRetain(v118);
    v131 = swift_bridgeObjectRetain(v120);
    v129(v126, v127, v128, v131);
  }
  return v13;
}

uint64_t sub_100070688(_QWORD *a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  void (*v11)(char *, uint64_t);
  uint64_t v12;
  char *v13;
  int *v14;
  char *v15;
  uint64_t v16;
  void (*v17)(char *, uint64_t);
  char *v18;
  char *v19;
  char *v20;
  uint64_t v21;

  v4 = sub_10000527C(&qword_1000A4FC0);
  if (swift_getEnumCaseMultiPayload(a1, v4) == 1)
  {
    v5 = type metadata accessor for WidgetRenderingMode(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(a1, v5);
  }
  else
  {
    swift_release(*a1);
  }
  sub_10003561C(*(_QWORD *)((char *)a1 + a2[5]), *((_BYTE *)a1 + a2[5] + 8));
  v6 = (_QWORD *)((char *)a1 + a2[6]);
  v7 = sub_10000527C(&qword_1000A4FC8);
  if (swift_getEnumCaseMultiPayload(v6, v7) == 1)
  {
    v8 = type metadata accessor for ColorScheme(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v6, v8);
  }
  else
  {
    swift_release(*v6);
  }
  v9 = (char *)a1 + a2[7];
  v10 = type metadata accessor for UUID(0);
  v11 = *(void (**)(char *, uint64_t))(*(_QWORD *)(v10 - 8) + 8);
  v11(v9, v10);
  v12 = type metadata accessor for AccessoryAndSceneEntity(0);
  v11(&v9[*(int *)(v12 + 20)], v10);
  v13 = &v9[*(int *)(v12 + 24)];
  v11(v13, v10);
  v14 = (int *)type metadata accessor for WidgetTileInfo(0);
  v11(&v13[v14[5]], v10);
  swift_bridgeObjectRelease(*(_QWORD *)&v13[v14[6] + 8]);
  swift_bridgeObjectRelease(*(_QWORD *)&v13[v14[7] + 8]);
  swift_bridgeObjectRelease(*(_QWORD *)&v13[v14[8] + 8]);
  swift_bridgeObjectRelease(*(_QWORD *)&v13[v14[9] + 8]);
  v15 = &v13[v14[10]];
  v16 = type metadata accessor for StaticRenderingMode(0);
  v17 = *(void (**)(char *, uint64_t))(*(_QWORD *)(v16 - 8) + 8);
  v17(v15, v16);
  v17(&v13[v14[11]], v16);
  swift_release(*(_QWORD *)&v13[v14[12]]);

  swift_bridgeObjectRelease(*(_QWORD *)&v13[v14[15]]);
  swift_bridgeObjectRelease(*(_QWORD *)&v13[v14[19] + 8]);
  swift_bridgeObjectRelease(*(_QWORD *)&v13[v14[21]]);
  swift_bridgeObjectRelease(*(_QWORD *)&v13[v14[22]]);
  v18 = (char *)a1 + a2[8];
  v11(v18, v10);
  v11(&v18[v14[5]], v10);
  swift_bridgeObjectRelease(*(_QWORD *)&v18[v14[6] + 8]);
  swift_bridgeObjectRelease(*(_QWORD *)&v18[v14[7] + 8]);
  swift_bridgeObjectRelease(*(_QWORD *)&v18[v14[8] + 8]);
  swift_bridgeObjectRelease(*(_QWORD *)&v18[v14[9] + 8]);
  v17(&v18[v14[10]], v16);
  v17(&v18[v14[11]], v16);
  swift_release(*(_QWORD *)&v18[v14[12]]);

  swift_bridgeObjectRelease(*(_QWORD *)&v18[v14[15]]);
  swift_bridgeObjectRelease(*(_QWORD *)&v18[v14[19] + 8]);
  swift_bridgeObjectRelease(*(_QWORD *)&v18[v14[21]]);
  swift_bridgeObjectRelease(*(_QWORD *)&v18[v14[22]]);
  v19 = (char *)a1 + a2[11];
  v20 = &v19[*(int *)(type metadata accessor for RoundedRectangle(0) + 20)];
  v21 = type metadata accessor for RoundedCornerStyle(0);
  return (*(uint64_t (**)(char *, uint64_t))(*(_QWORD *)(v21 - 8) + 8))(v20, v21);
}

_QWORD *sub_1000709AC(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  void (*v28)(char *, char *, uint64_t);
  uint64_t v29;
  uint64_t v30;
  char *v31;
  char *v32;
  int *v33;
  uint64_t v34;
  char *v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  void (*v53)(char *, char *, uint64_t, __n128);
  __n128 v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  char *v59;
  void *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  char *v65;
  uint64_t v66;
  char *v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  char *v76;
  id v77;
  __n128 v78;
  uint64_t v79;
  char *v80;
  char *v81;
  uint64_t v82;
  uint64_t v83;
  char *v84;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  char *v88;
  char *v89;
  uint64_t v90;
  uint64_t v91;
  char *v92;
  char *v93;
  uint64_t v94;
  uint64_t v95;
  char *v96;
  char *v97;
  __n128 v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  char *v102;
  char *v103;
  void *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  char *v108;
  char *v109;
  uint64_t v110;
  char *v111;
  char *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  char *v120;
  char *v121;
  uint64_t v122;
  char *v123;
  char *v124;
  uint64_t v125;
  void (*v126)(char *, char *, uint64_t, __n128);
  id v127;
  __n128 v128;
  char *v130;
  uint64_t v131;
  void (*v132)(char *, char *, uint64_t, __n128);
  uint64_t v133;
  void (*v134)(char *, char *, uint64_t, __n128);
  int *v135;
  _QWORD *v136;
  _QWORD *v137;

  v6 = sub_10000527C(&qword_1000A4FC0);
  if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
  {
    v7 = type metadata accessor for WidgetRenderingMode(0);
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = a1;
    v9 = v6;
    v10 = 1;
  }
  else
  {
    v11 = *a2;
    *a1 = *a2;
    swift_retain(v11);
    v8 = a1;
    v9 = v6;
    v10 = 0;
  }
  swift_storeEnumTagMultiPayload(v8, v9, v10);
  v12 = a3[5];
  v13 = (char *)a1 + v12;
  v14 = (char *)a2 + v12;
  v15 = *(_QWORD *)v14;
  v16 = v14[8];
  sub_100035568(*(_QWORD *)v14, v16);
  *(_QWORD *)v13 = v15;
  v13[8] = v16;
  v17 = a3[6];
  v18 = (_QWORD *)((char *)a1 + v17);
  v19 = (_QWORD *)((char *)a2 + v17);
  v20 = sub_10000527C(&qword_1000A4FC8);
  if (swift_getEnumCaseMultiPayload(v19, v20) == 1)
  {
    v21 = type metadata accessor for ColorScheme(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v21 - 8) + 16))(v18, v19, v21);
    v22 = 1;
  }
  else
  {
    v23 = *v19;
    *v18 = *v19;
    swift_retain(v23);
    v22 = 0;
  }
  swift_storeEnumTagMultiPayload(v18, v20, v22);
  v24 = a3[7];
  v25 = (char *)a1 + v24;
  v26 = (char *)a2 + v24;
  v27 = type metadata accessor for UUID(0);
  v28 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v27 - 8) + 16);
  v28(v25, v26, v27);
  v135 = a3;
  v29 = type metadata accessor for AccessoryAndSceneEntity(0);
  v28(&v25[*(int *)(v29 + 20)], &v26[*(int *)(v29 + 20)], v27);
  v30 = *(int *)(v29 + 24);
  v31 = &v25[v30];
  v32 = &v26[v30];
  v133 = v27;
  v28(&v25[v30], &v26[v30], v27);
  v134 = (void (*)(char *, char *, uint64_t, __n128))v28;
  v33 = (int *)type metadata accessor for WidgetTileInfo(0);
  v28(&v31[v33[5]], &v32[v33[5]], v27);
  v34 = v33[6];
  v35 = &v31[v34];
  v36 = &v32[v34];
  v37 = *((_QWORD *)v36 + 1);
  *(_QWORD *)v35 = *(_QWORD *)v36;
  *((_QWORD *)v35 + 1) = v37;
  v38 = v33[7];
  v39 = &v31[v38];
  v40 = &v32[v38];
  v41 = *((_QWORD *)v40 + 1);
  *(_QWORD *)v39 = *(_QWORD *)v40;
  *((_QWORD *)v39 + 1) = v41;
  v42 = v33[8];
  v43 = &v31[v42];
  v44 = &v32[v42];
  v136 = a2;
  v137 = a1;
  v45 = *((_QWORD *)v44 + 1);
  *(_QWORD *)v43 = *(_QWORD *)v44;
  *((_QWORD *)v43 + 1) = v45;
  v46 = v33[9];
  v47 = &v31[v46];
  v48 = &v32[v46];
  v49 = *((_QWORD *)v48 + 1);
  *(_QWORD *)v47 = *(_QWORD *)v48;
  *((_QWORD *)v47 + 1) = v49;
  v50 = v33[10];
  v130 = &v31[v50];
  v51 = &v32[v50];
  v52 = type metadata accessor for StaticRenderingMode(0);
  v53 = *(void (**)(char *, char *, uint64_t, __n128))(*(_QWORD *)(v52 - 8) + 16);
  v132 = v53;
  swift_bridgeObjectRetain(v37);
  swift_bridgeObjectRetain(v41);
  swift_bridgeObjectRetain(v45);
  v54 = swift_bridgeObjectRetain(v49);
  v131 = v52;
  v53(v130, v51, v52, v54);
  ((void (*)(char *, char *, uint64_t))v53)(&v31[v33[11]], &v32[v33[11]], v52);
  v55 = v33[12];
  v56 = *(_QWORD *)&v32[v55];
  *(_QWORD *)&v31[v55] = v56;
  v31[v33[13]] = v32[v33[13]];
  v57 = v33[14];
  v58 = &v31[v57];
  v59 = &v32[v57];
  v60 = *(void **)v59;
  LOBYTE(v59) = v59[8];
  *(_QWORD *)v58 = v60;
  v58[8] = (char)v59;
  v61 = v33[15];
  v62 = *(_QWORD *)&v32[v61];
  *(_QWORD *)&v31[v61] = v62;
  v31[v33[16]] = v32[v33[16]];
  v31[v33[17]] = v32[v33[17]];
  v63 = v33[18];
  v64 = &v31[v63];
  v65 = &v32[v63];
  *(_QWORD *)v64 = *(_QWORD *)v65;
  v64[8] = v65[8];
  v66 = v33[19];
  v67 = &v31[v66];
  v68 = &v32[v66];
  v69 = *((_QWORD *)v68 + 1);
  *(_QWORD *)v67 = *(_QWORD *)v68;
  *((_QWORD *)v67 + 1) = v69;
  v31[v33[20]] = v32[v33[20]];
  v70 = v33[21];
  v71 = *(_QWORD *)&v32[v70];
  *(_QWORD *)&v31[v70] = v71;
  v72 = v33[22];
  v73 = *(_QWORD *)&v32[v72];
  *(_QWORD *)&v31[v72] = v73;
  v74 = v135[8];
  v75 = (char *)v137 + v74;
  v76 = (char *)v136 + v74;
  swift_retain(v56);
  v77 = v60;
  swift_bridgeObjectRetain(v62);
  swift_bridgeObjectRetain(v69);
  swift_bridgeObjectRetain(v71);
  v78 = swift_bridgeObjectRetain(v73);
  v134(v75, v76, v133, v78);
  ((void (*)(char *, char *, uint64_t))v134)(&v75[v33[5]], &v76[v33[5]], v133);
  v79 = v33[6];
  v80 = &v75[v79];
  v81 = &v76[v79];
  v82 = *((_QWORD *)v81 + 1);
  *(_QWORD *)v80 = *(_QWORD *)v81;
  *((_QWORD *)v80 + 1) = v82;
  v83 = v33[7];
  v84 = &v75[v83];
  v85 = &v76[v83];
  v86 = *((_QWORD *)v85 + 1);
  *(_QWORD *)v84 = *(_QWORD *)v85;
  *((_QWORD *)v84 + 1) = v86;
  v87 = v33[8];
  v88 = &v75[v87];
  v89 = &v76[v87];
  v90 = *((_QWORD *)v89 + 1);
  *(_QWORD *)v88 = *(_QWORD *)v89;
  *((_QWORD *)v88 + 1) = v90;
  v91 = v33[9];
  v92 = &v75[v91];
  v93 = &v76[v91];
  v94 = *((_QWORD *)v93 + 1);
  *(_QWORD *)v92 = *(_QWORD *)v93;
  *((_QWORD *)v92 + 1) = v94;
  v95 = v33[10];
  v96 = &v75[v95];
  v97 = &v76[v95];
  swift_bridgeObjectRetain(v82);
  swift_bridgeObjectRetain(v86);
  swift_bridgeObjectRetain(v90);
  v98 = swift_bridgeObjectRetain(v94);
  v132(v96, v97, v131, v98);
  ((void (*)(char *, char *, uint64_t))v132)(&v75[v33[11]], &v76[v33[11]], v131);
  v99 = v33[12];
  v100 = *(_QWORD *)&v76[v99];
  *(_QWORD *)&v75[v99] = v100;
  v75[v33[13]] = v76[v33[13]];
  v101 = v33[14];
  v102 = &v75[v101];
  v103 = &v76[v101];
  v104 = *(void **)v103;
  LOBYTE(v103) = v103[8];
  *(_QWORD *)v102 = v104;
  v102[8] = (char)v103;
  v105 = v33[15];
  v106 = *(_QWORD *)&v76[v105];
  *(_QWORD *)&v75[v105] = v106;
  v75[v33[16]] = v76[v33[16]];
  v75[v33[17]] = v76[v33[17]];
  v107 = v33[18];
  v108 = &v75[v107];
  v109 = &v76[v107];
  *(_QWORD *)v108 = *(_QWORD *)v109;
  v108[8] = v109[8];
  v110 = v33[19];
  v111 = &v75[v110];
  v112 = &v76[v110];
  v113 = *((_QWORD *)v112 + 1);
  *(_QWORD *)v111 = *(_QWORD *)v112;
  *((_QWORD *)v111 + 1) = v113;
  v75[v33[20]] = v76[v33[20]];
  v114 = v33[21];
  v115 = *(_QWORD *)&v76[v114];
  *(_QWORD *)&v75[v114] = v115;
  v116 = v33[22];
  v117 = *(_QWORD *)&v76[v116];
  *(_QWORD *)&v75[v116] = v117;
  v118 = v135[10];
  *((_BYTE *)v137 + v135[9]) = *((_BYTE *)v136 + v135[9]);
  *(_OWORD *)((char *)v137 + v118) = *(_OWORD *)((char *)v136 + v118);
  v119 = v135[11];
  v120 = (char *)v137 + v119;
  v121 = (char *)v136 + v119;
  *(_OWORD *)((char *)v137 + v119) = *(_OWORD *)((char *)v136 + v119);
  v122 = *(int *)(type metadata accessor for RoundedRectangle(0) + 20);
  v123 = &v120[v122];
  v124 = &v121[v122];
  v125 = type metadata accessor for RoundedCornerStyle(0);
  v126 = *(void (**)(char *, char *, uint64_t, __n128))(*(_QWORD *)(v125 - 8) + 16);
  swift_retain(v100);
  v127 = v104;
  swift_bridgeObjectRetain(v106);
  swift_bridgeObjectRetain(v113);
  swift_bridgeObjectRetain(v115);
  v128 = swift_bridgeObjectRetain(v117);
  v126(v123, v124, v125, v128);
  return v137;
}

char *sub_100070F54(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  void (*v30)(char *, char *, uint64_t);
  uint64_t v31;
  uint64_t v32;
  char *v33;
  char *v34;
  int *v35;
  uint64_t v36;
  char *v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  char *v58;
  uint64_t v59;
  void (*v60)(char *, char *, uint64_t);
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  char *v66;
  void *v67;
  void *v68;
  id v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  char *v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  char *v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  char *v89;
  char *v90;
  uint64_t v91;
  char *v92;
  char *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  char *v97;
  char *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  char *v102;
  char *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  char *v107;
  char *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  char *v115;
  char *v116;
  void *v117;
  void *v118;
  id v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  char *v124;
  char *v125;
  uint64_t v126;
  uint64_t v127;
  char *v128;
  char *v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  char *v139;
  char *v140;
  uint64_t v141;
  char *v142;
  char *v143;
  uint64_t v144;
  char *v145;
  char *v146;
  uint64_t v147;
  int *v149;
  char *v150;

  if (a1 != a2)
  {
    sub_100014EFC((uint64_t)a1, &qword_1000A4FC0);
    v6 = sub_10000527C(&qword_1000A4FC0);
    if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
    {
      v7 = type metadata accessor for WidgetRenderingMode(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
      v8 = a1;
      v9 = v6;
      v10 = 1;
    }
    else
    {
      v11 = *(_QWORD *)a2;
      *(_QWORD *)a1 = *(_QWORD *)a2;
      swift_retain(v11);
      v8 = a1;
      v9 = v6;
      v10 = 0;
    }
    swift_storeEnumTagMultiPayload((char *)v8, v9, v10);
  }
  v12 = a3[5];
  v13 = &a1[v12];
  v14 = &a2[v12];
  v15 = *(_QWORD *)v14;
  v16 = v14[8];
  sub_100035568(*(_QWORD *)v14, v16);
  v17 = *(_QWORD *)v13;
  v18 = v13[8];
  *(_QWORD *)v13 = v15;
  v13[8] = v16;
  sub_10003561C(v17, v18);
  if (a1 != a2)
  {
    v19 = a3[6];
    v20 = (uint64_t *)&a1[v19];
    v21 = (uint64_t *)&a2[v19];
    sub_100014EFC((uint64_t)&a1[v19], &qword_1000A4FC8);
    v22 = sub_10000527C(&qword_1000A4FC8);
    if (swift_getEnumCaseMultiPayload(v21, v22) == 1)
    {
      v23 = type metadata accessor for ColorScheme(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v23 - 8) + 16))(v20, v21, v23);
      v24 = 1;
    }
    else
    {
      v25 = *v21;
      *v20 = *v21;
      swift_retain(v25);
      v24 = 0;
    }
    swift_storeEnumTagMultiPayload(v20, v22, v24);
  }
  v26 = a3[7];
  v27 = &a1[v26];
  v28 = &a2[v26];
  v29 = type metadata accessor for UUID(0);
  v150 = a2;
  v30 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v29 - 8) + 24);
  v30(v27, v28, v29);
  v149 = a3;
  v31 = type metadata accessor for AccessoryAndSceneEntity(0);
  v30(&v27[*(int *)(v31 + 20)], &v28[*(int *)(v31 + 20)], v29);
  v32 = *(int *)(v31 + 24);
  v33 = &v27[v32];
  v34 = &v28[v32];
  v30(&v27[v32], &v28[v32], v29);
  v35 = (int *)type metadata accessor for WidgetTileInfo(0);
  v30(&v33[v35[5]], &v34[v35[5]], v29);
  v36 = v35[6];
  v37 = &v33[v36];
  v38 = &v34[v36];
  *(_QWORD *)v37 = *(_QWORD *)v38;
  v39 = *((_QWORD *)v38 + 1);
  v40 = *((_QWORD *)v37 + 1);
  *((_QWORD *)v37 + 1) = v39;
  swift_bridgeObjectRetain(v39);
  swift_bridgeObjectRelease(v40);
  v41 = v35[7];
  v42 = &v33[v41];
  v43 = &v34[v41];
  *(_QWORD *)v42 = *(_QWORD *)v43;
  v44 = *((_QWORD *)v43 + 1);
  v45 = *((_QWORD *)v42 + 1);
  *((_QWORD *)v42 + 1) = v44;
  swift_bridgeObjectRetain(v44);
  swift_bridgeObjectRelease(v45);
  v46 = v35[8];
  v47 = &v33[v46];
  v48 = &v34[v46];
  *(_QWORD *)v47 = *(_QWORD *)v48;
  v49 = *((_QWORD *)v48 + 1);
  v50 = *((_QWORD *)v47 + 1);
  *((_QWORD *)v47 + 1) = v49;
  swift_bridgeObjectRetain(v49);
  swift_bridgeObjectRelease(v50);
  v51 = v35[9];
  v52 = &v33[v51];
  v53 = &v34[v51];
  *(_QWORD *)v52 = *(_QWORD *)v53;
  v54 = *((_QWORD *)v53 + 1);
  v55 = *((_QWORD *)v52 + 1);
  *((_QWORD *)v52 + 1) = v54;
  swift_bridgeObjectRetain(v54);
  swift_bridgeObjectRelease(v55);
  v56 = v35[10];
  v57 = &v33[v56];
  v58 = &v34[v56];
  v59 = type metadata accessor for StaticRenderingMode(0);
  v60 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v59 - 8) + 24);
  v60(v57, v58, v59);
  v60(&v33[v35[11]], &v34[v35[11]], v59);
  v61 = v35[12];
  v62 = *(_QWORD *)&v34[v61];
  v63 = *(_QWORD *)&v33[v61];
  *(_QWORD *)&v33[v61] = v62;
  swift_retain(v62);
  swift_release(v63);
  v33[v35[13]] = v34[v35[13]];
  v64 = v35[14];
  v65 = &v33[v64];
  v66 = &v34[v64];
  v67 = *(void **)v66;
  LOBYTE(v66) = v66[8];
  v68 = *(void **)v65;
  *(_QWORD *)v65 = v67;
  v65[8] = (char)v66;
  v69 = v67;

  v70 = v35[15];
  v71 = *(_QWORD *)&v34[v70];
  v72 = *(_QWORD *)&v33[v70];
  *(_QWORD *)&v33[v70] = v71;
  swift_bridgeObjectRetain(v71);
  swift_bridgeObjectRelease(v72);
  v33[v35[16]] = v34[v35[16]];
  v33[v35[17]] = v34[v35[17]];
  v73 = v35[18];
  v74 = &v33[v73];
  v75 = &v34[v73];
  v76 = *(_QWORD *)v75;
  v74[8] = v75[8];
  *(_QWORD *)v74 = v76;
  v77 = v35[19];
  v78 = &v33[v77];
  v79 = &v34[v77];
  *(_QWORD *)v78 = *(_QWORD *)v79;
  v80 = *((_QWORD *)v79 + 1);
  v81 = *((_QWORD *)v78 + 1);
  *((_QWORD *)v78 + 1) = v80;
  swift_bridgeObjectRetain(v80);
  swift_bridgeObjectRelease(v81);
  v33[v35[20]] = v34[v35[20]];
  v82 = v35[21];
  v83 = *(_QWORD *)&v34[v82];
  v84 = *(_QWORD *)&v33[v82];
  *(_QWORD *)&v33[v82] = v83;
  swift_bridgeObjectRetain(v83);
  swift_bridgeObjectRelease(v84);
  v85 = v35[22];
  v86 = *(_QWORD *)&v34[v85];
  v87 = *(_QWORD *)&v33[v85];
  *(_QWORD *)&v33[v85] = v86;
  swift_bridgeObjectRetain(v86);
  swift_bridgeObjectRelease(v87);
  v88 = v149[8];
  v89 = &a1[v88];
  v90 = &v150[v88];
  v30(&a1[v88], &v150[v88], v29);
  v30(&v89[v35[5]], &v90[v35[5]], v29);
  v91 = v35[6];
  v92 = &v89[v91];
  v93 = &v90[v91];
  *(_QWORD *)v92 = *(_QWORD *)v93;
  v94 = *((_QWORD *)v93 + 1);
  v95 = *((_QWORD *)v92 + 1);
  *((_QWORD *)v92 + 1) = v94;
  swift_bridgeObjectRetain(v94);
  swift_bridgeObjectRelease(v95);
  v96 = v35[7];
  v97 = &v89[v96];
  v98 = &v90[v96];
  *(_QWORD *)v97 = *(_QWORD *)v98;
  v99 = *((_QWORD *)v98 + 1);
  v100 = *((_QWORD *)v97 + 1);
  *((_QWORD *)v97 + 1) = v99;
  swift_bridgeObjectRetain(v99);
  swift_bridgeObjectRelease(v100);
  v101 = v35[8];
  v102 = &v89[v101];
  v103 = &v90[v101];
  *(_QWORD *)v102 = *(_QWORD *)v103;
  v104 = *((_QWORD *)v103 + 1);
  v105 = *((_QWORD *)v102 + 1);
  *((_QWORD *)v102 + 1) = v104;
  swift_bridgeObjectRetain(v104);
  swift_bridgeObjectRelease(v105);
  v106 = v35[9];
  v107 = &v89[v106];
  v108 = &v90[v106];
  *(_QWORD *)v107 = *(_QWORD *)v108;
  v109 = *((_QWORD *)v108 + 1);
  v110 = *((_QWORD *)v107 + 1);
  *((_QWORD *)v107 + 1) = v109;
  swift_bridgeObjectRetain(v109);
  swift_bridgeObjectRelease(v110);
  v60(&v89[v35[10]], &v90[v35[10]], v59);
  v60(&v89[v35[11]], &v90[v35[11]], v59);
  v111 = v35[12];
  v112 = *(_QWORD *)&v90[v111];
  v113 = *(_QWORD *)&v89[v111];
  *(_QWORD *)&v89[v111] = v112;
  swift_retain(v112);
  swift_release(v113);
  v89[v35[13]] = v90[v35[13]];
  v114 = v35[14];
  v115 = &v89[v114];
  v116 = &v90[v114];
  v117 = *(void **)v116;
  LOBYTE(v116) = v116[8];
  v118 = *(void **)v115;
  *(_QWORD *)v115 = v117;
  v115[8] = (char)v116;
  v119 = v117;

  v120 = v35[15];
  v121 = *(_QWORD *)&v90[v120];
  v122 = *(_QWORD *)&v89[v120];
  *(_QWORD *)&v89[v120] = v121;
  swift_bridgeObjectRetain(v121);
  swift_bridgeObjectRelease(v122);
  v89[v35[16]] = v90[v35[16]];
  v89[v35[17]] = v90[v35[17]];
  v123 = v35[18];
  v124 = &v89[v123];
  v125 = &v90[v123];
  v126 = *(_QWORD *)v125;
  v124[8] = v125[8];
  *(_QWORD *)v124 = v126;
  v127 = v35[19];
  v128 = &v89[v127];
  v129 = &v90[v127];
  *(_QWORD *)v128 = *(_QWORD *)v129;
  v130 = *((_QWORD *)v129 + 1);
  v131 = *((_QWORD *)v128 + 1);
  *((_QWORD *)v128 + 1) = v130;
  swift_bridgeObjectRetain(v130);
  swift_bridgeObjectRelease(v131);
  v89[v35[20]] = v90[v35[20]];
  v132 = v35[21];
  v133 = *(_QWORD *)&v90[v132];
  v134 = *(_QWORD *)&v89[v132];
  *(_QWORD *)&v89[v132] = v133;
  swift_bridgeObjectRetain(v133);
  swift_bridgeObjectRelease(v134);
  v135 = v35[22];
  v136 = *(_QWORD *)&v90[v135];
  v137 = *(_QWORD *)&v89[v135];
  *(_QWORD *)&v89[v135] = v136;
  swift_bridgeObjectRetain(v136);
  swift_bridgeObjectRelease(v137);
  a1[v149[9]] = v150[v149[9]];
  v138 = v149[10];
  v139 = &a1[v138];
  v140 = &v150[v138];
  *v139 = *(_QWORD *)v140;
  v139[1] = *((_QWORD *)v140 + 1);
  v141 = v149[11];
  v142 = &a1[v141];
  v143 = &v150[v141];
  *v142 = *(_QWORD *)&v150[v141];
  v142[1] = *(_QWORD *)&v150[v141 + 8];
  v144 = *(int *)(type metadata accessor for RoundedRectangle(0) + 20);
  v145 = (char *)v142 + v144;
  v146 = &v143[v144];
  v147 = type metadata accessor for RoundedCornerStyle(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v147 - 8) + 24))(v145, v146, v147);
  return a1;
}

char *sub_100071618(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  void (*v20)(char *, char *, uint64_t);
  uint64_t v21;
  uint64_t v22;
  char *v23;
  char *v24;
  int *v25;
  uint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  void (*v30)(char *, char *, uint64_t);
  uint64_t v31;
  char *v32;
  char *v33;
  uint64_t v34;
  char *v35;
  char *v36;
  uint64_t v37;
  char *v38;
  char *v39;
  uint64_t v40;
  char *v41;
  char *v42;
  uint64_t v43;
  char *v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  char *v49;
  uint64_t v50;
  char *v51;
  char *v52;
  uint64_t v53;
  char *v55;
  int *v56;

  v6 = sub_10000527C(&qword_1000A4FC0);
  if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
  {
    v7 = type metadata accessor for WidgetRenderingMode(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a1, a2, v7);
    swift_storeEnumTagMultiPayload(a1, v6, 1);
  }
  else
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
  }
  v8 = a3[5];
  v9 = a3[6];
  v10 = &a1[v8];
  v11 = &a2[v8];
  *(_QWORD *)v10 = *(_QWORD *)v11;
  v10[8] = v11[8];
  v12 = &a1[v9];
  v13 = &a2[v9];
  v14 = sub_10000527C(&qword_1000A4FC8);
  if (swift_getEnumCaseMultiPayload(v13, v14) == 1)
  {
    v15 = type metadata accessor for ColorScheme(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v15 - 8) + 32))(v12, v13, v15);
    swift_storeEnumTagMultiPayload(v12, v14, 1);
  }
  else
  {
    memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
  }
  v16 = a3[7];
  v17 = &a1[v16];
  v18 = &a2[v16];
  v19 = type metadata accessor for UUID(0);
  v56 = a3;
  v20 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v19 - 8) + 32);
  v20(v17, v18, v19);
  v21 = type metadata accessor for AccessoryAndSceneEntity(0);
  v20(&v17[*(int *)(v21 + 20)], &v18[*(int *)(v21 + 20)], v19);
  v22 = *(int *)(v21 + 24);
  v23 = &v17[v22];
  v24 = &v18[v22];
  v20(&v17[v22], &v18[v22], v19);
  v25 = (int *)type metadata accessor for WidgetTileInfo(0);
  v20(&v23[v25[5]], &v24[v25[5]], v19);
  *(_OWORD *)&v23[v25[6]] = *(_OWORD *)&v24[v25[6]];
  *(_OWORD *)&v23[v25[7]] = *(_OWORD *)&v24[v25[7]];
  *(_OWORD *)&v23[v25[8]] = *(_OWORD *)&v24[v25[8]];
  *(_OWORD *)&v23[v25[9]] = *(_OWORD *)&v24[v25[9]];
  v26 = v25[10];
  v27 = &v23[v26];
  v28 = &v24[v26];
  v29 = type metadata accessor for StaticRenderingMode(0);
  v55 = a1;
  v30 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v29 - 8) + 32);
  v30(v27, v28, v29);
  v30(&v23[v25[11]], &v24[v25[11]], v29);
  *(_QWORD *)&v23[v25[12]] = *(_QWORD *)&v24[v25[12]];
  v23[v25[13]] = v24[v25[13]];
  v31 = v25[14];
  v32 = &v23[v31];
  v33 = &v24[v31];
  *(_QWORD *)v32 = *(_QWORD *)v33;
  v32[8] = v33[8];
  *(_QWORD *)&v23[v25[15]] = *(_QWORD *)&v24[v25[15]];
  v23[v25[16]] = v24[v25[16]];
  v23[v25[17]] = v24[v25[17]];
  v34 = v25[18];
  v35 = &v23[v34];
  v36 = &v24[v34];
  *(_QWORD *)v35 = *(_QWORD *)v36;
  v35[8] = v36[8];
  *(_OWORD *)&v23[v25[19]] = *(_OWORD *)&v24[v25[19]];
  v23[v25[20]] = v24[v25[20]];
  *(_QWORD *)&v23[v25[21]] = *(_QWORD *)&v24[v25[21]];
  *(_QWORD *)&v23[v25[22]] = *(_QWORD *)&v24[v25[22]];
  v37 = v56[8];
  v38 = &v55[v37];
  v39 = &a2[v37];
  v20(&v55[v37], &a2[v37], v19);
  v20(&v38[v25[5]], &v39[v25[5]], v19);
  *(_OWORD *)&v38[v25[6]] = *(_OWORD *)&v39[v25[6]];
  *(_OWORD *)&v38[v25[7]] = *(_OWORD *)&v39[v25[7]];
  *(_OWORD *)&v38[v25[8]] = *(_OWORD *)&v39[v25[8]];
  *(_OWORD *)&v38[v25[9]] = *(_OWORD *)&v39[v25[9]];
  v30(&v38[v25[10]], &v39[v25[10]], v29);
  v30(&v38[v25[11]], &v39[v25[11]], v29);
  *(_QWORD *)&v38[v25[12]] = *(_QWORD *)&v39[v25[12]];
  v38[v25[13]] = v39[v25[13]];
  v40 = v25[14];
  v41 = &v38[v40];
  v42 = &v39[v40];
  *(_QWORD *)v41 = *(_QWORD *)v42;
  v41[8] = v42[8];
  *(_QWORD *)&v38[v25[15]] = *(_QWORD *)&v39[v25[15]];
  v38[v25[16]] = v39[v25[16]];
  v38[v25[17]] = v39[v25[17]];
  v43 = v25[18];
  v44 = &v38[v43];
  v45 = &v39[v43];
  *(_QWORD *)v44 = *(_QWORD *)v45;
  v44[8] = v45[8];
  *(_OWORD *)&v38[v25[19]] = *(_OWORD *)&v39[v25[19]];
  v38[v25[20]] = v39[v25[20]];
  *(_QWORD *)&v38[v25[21]] = *(_QWORD *)&v39[v25[21]];
  *(_QWORD *)&v38[v25[22]] = *(_QWORD *)&v39[v25[22]];
  v46 = v56[10];
  v55[v56[9]] = a2[v56[9]];
  *(_OWORD *)&v55[v46] = *(_OWORD *)&a2[v46];
  v47 = v56[11];
  v48 = &v55[v47];
  v49 = &a2[v47];
  *(_OWORD *)&v55[v47] = *(_OWORD *)&a2[v47];
  v50 = *(int *)(type metadata accessor for RoundedRectangle(0) + 20);
  v51 = &v48[v50];
  v52 = &v49[v50];
  v53 = type metadata accessor for RoundedCornerStyle(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v53 - 8) + 32))(v51, v52, v53);
  return v55;
}

char *sub_100071A9C(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  void (*v23)(char *, char *, uint64_t);
  uint64_t v24;
  uint64_t v25;
  char *v26;
  char *v27;
  int *v28;
  uint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  char *v55;
  uint64_t v56;
  void (*v57)(char *, char *, uint64_t);
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  char *v62;
  uint64_t v63;
  void *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  char *v69;
  uint64_t v70;
  char *v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  char *v81;
  char *v82;
  uint64_t v83;
  char *v84;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  char *v90;
  char *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  char *v96;
  char *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  char *v102;
  char *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  char *v110;
  char *v111;
  uint64_t v112;
  void *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  char *v117;
  char *v118;
  uint64_t v119;
  char *v120;
  char *v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  char *v131;
  char *v132;
  uint64_t v133;
  char *v134;
  char *v135;
  uint64_t v136;
  char *v138;
  int *v139;

  if (a1 != a2)
  {
    sub_100014EFC((uint64_t)a1, &qword_1000A4FC0);
    v6 = sub_10000527C(&qword_1000A4FC0);
    if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
    {
      v7 = type metadata accessor for WidgetRenderingMode(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a1, a2, v7);
      swift_storeEnumTagMultiPayload(a1, v6, 1);
    }
    else
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
    }
  }
  v8 = a3[5];
  v9 = &a1[v8];
  v10 = &a2[v8];
  v11 = *(_QWORD *)v10;
  LOBYTE(v10) = v10[8];
  v12 = *(_QWORD *)v9;
  v13 = v9[8];
  *(_QWORD *)v9 = v11;
  v9[8] = (char)v10;
  sub_10003561C(v12, v13);
  if (a1 != a2)
  {
    v14 = a3[6];
    v15 = &a1[v14];
    v16 = &a2[v14];
    sub_100014EFC((uint64_t)&a1[v14], &qword_1000A4FC8);
    v17 = sub_10000527C(&qword_1000A4FC8);
    if (swift_getEnumCaseMultiPayload(v16, v17) == 1)
    {
      v18 = type metadata accessor for ColorScheme(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v18 - 8) + 32))(v15, v16, v18);
      swift_storeEnumTagMultiPayload(v15, v17, 1);
    }
    else
    {
      memcpy(v15, v16, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
    }
  }
  v19 = a3[7];
  v20 = &a1[v19];
  v21 = &a2[v19];
  v22 = type metadata accessor for UUID(0);
  v139 = a3;
  v23 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v22 - 8) + 40);
  v23(v20, v21, v22);
  v24 = type metadata accessor for AccessoryAndSceneEntity(0);
  v23(&v20[*(int *)(v24 + 20)], &v21[*(int *)(v24 + 20)], v22);
  v25 = *(int *)(v24 + 24);
  v26 = &v20[v25];
  v27 = &v21[v25];
  v23(&v20[v25], &v21[v25], v22);
  v28 = (int *)type metadata accessor for WidgetTileInfo(0);
  v23(&v26[v28[5]], &v27[v28[5]], v22);
  v29 = v28[6];
  v30 = &v26[v29];
  v31 = &v27[v29];
  v33 = *(_QWORD *)v31;
  v32 = *((_QWORD *)v31 + 1);
  v34 = *((_QWORD *)v30 + 1);
  *(_QWORD *)v30 = v33;
  *((_QWORD *)v30 + 1) = v32;
  swift_bridgeObjectRelease(v34);
  v35 = v28[7];
  v36 = &v26[v35];
  v37 = &v27[v35];
  v39 = *(_QWORD *)v37;
  v38 = *((_QWORD *)v37 + 1);
  v40 = *((_QWORD *)v36 + 1);
  *(_QWORD *)v36 = v39;
  *((_QWORD *)v36 + 1) = v38;
  swift_bridgeObjectRelease(v40);
  v41 = v28[8];
  v42 = &v26[v41];
  v43 = &v27[v41];
  v45 = *(_QWORD *)v43;
  v44 = *((_QWORD *)v43 + 1);
  v46 = *((_QWORD *)v42 + 1);
  *(_QWORD *)v42 = v45;
  *((_QWORD *)v42 + 1) = v44;
  swift_bridgeObjectRelease(v46);
  v47 = v28[9];
  v48 = &v26[v47];
  v49 = &v27[v47];
  v51 = *(_QWORD *)v49;
  v50 = *((_QWORD *)v49 + 1);
  v52 = *((_QWORD *)v48 + 1);
  *(_QWORD *)v48 = v51;
  *((_QWORD *)v48 + 1) = v50;
  swift_bridgeObjectRelease(v52);
  v53 = v28[10];
  v54 = &v26[v53];
  v55 = &v27[v53];
  v56 = type metadata accessor for StaticRenderingMode(0);
  v138 = a2;
  v57 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v56 - 8) + 40);
  v57(v54, v55, v56);
  v57(&v26[v28[11]], &v27[v28[11]], v56);
  v58 = v28[12];
  v59 = *(_QWORD *)&v26[v58];
  *(_QWORD *)&v26[v58] = *(_QWORD *)&v27[v58];
  swift_release(v59);
  v26[v28[13]] = v27[v28[13]];
  v60 = v28[14];
  v61 = &v26[v60];
  v62 = &v27[v60];
  v63 = *(_QWORD *)v62;
  LOBYTE(v62) = v62[8];
  v64 = *(void **)v61;
  *(_QWORD *)v61 = v63;
  v61[8] = (char)v62;

  v65 = v28[15];
  v66 = *(_QWORD *)&v26[v65];
  *(_QWORD *)&v26[v65] = *(_QWORD *)&v27[v65];
  swift_bridgeObjectRelease(v66);
  v26[v28[16]] = v27[v28[16]];
  v26[v28[17]] = v27[v28[17]];
  v67 = v28[18];
  v68 = &v26[v67];
  v69 = &v27[v67];
  v68[8] = v69[8];
  *(_QWORD *)v68 = *(_QWORD *)v69;
  v70 = v28[19];
  v71 = &v26[v70];
  v72 = &v27[v70];
  v74 = *(_QWORD *)v72;
  v73 = *((_QWORD *)v72 + 1);
  v75 = *((_QWORD *)v71 + 1);
  *(_QWORD *)v71 = v74;
  *((_QWORD *)v71 + 1) = v73;
  swift_bridgeObjectRelease(v75);
  v26[v28[20]] = v27[v28[20]];
  v76 = v28[21];
  v77 = *(_QWORD *)&v26[v76];
  *(_QWORD *)&v26[v76] = *(_QWORD *)&v27[v76];
  swift_bridgeObjectRelease(v77);
  v78 = v28[22];
  v79 = *(_QWORD *)&v26[v78];
  *(_QWORD *)&v26[v78] = *(_QWORD *)&v27[v78];
  swift_bridgeObjectRelease(v79);
  v80 = v139[8];
  v81 = &a1[v80];
  v82 = &v138[v80];
  v23(&a1[v80], &v138[v80], v22);
  v23(&v81[v28[5]], &v82[v28[5]], v22);
  v83 = v28[6];
  v84 = &v81[v83];
  v85 = &v82[v83];
  v87 = *(_QWORD *)v85;
  v86 = *((_QWORD *)v85 + 1);
  v88 = *((_QWORD *)v84 + 1);
  *(_QWORD *)v84 = v87;
  *((_QWORD *)v84 + 1) = v86;
  swift_bridgeObjectRelease(v88);
  v89 = v28[7];
  v90 = &v81[v89];
  v91 = &v82[v89];
  v93 = *(_QWORD *)v91;
  v92 = *((_QWORD *)v91 + 1);
  v94 = *((_QWORD *)v90 + 1);
  *(_QWORD *)v90 = v93;
  *((_QWORD *)v90 + 1) = v92;
  swift_bridgeObjectRelease(v94);
  v95 = v28[8];
  v96 = &v81[v95];
  v97 = &v82[v95];
  v99 = *(_QWORD *)v97;
  v98 = *((_QWORD *)v97 + 1);
  v100 = *((_QWORD *)v96 + 1);
  *(_QWORD *)v96 = v99;
  *((_QWORD *)v96 + 1) = v98;
  swift_bridgeObjectRelease(v100);
  v101 = v28[9];
  v102 = &v81[v101];
  v103 = &v82[v101];
  v105 = *(_QWORD *)v103;
  v104 = *((_QWORD *)v103 + 1);
  v106 = *((_QWORD *)v102 + 1);
  *(_QWORD *)v102 = v105;
  *((_QWORD *)v102 + 1) = v104;
  swift_bridgeObjectRelease(v106);
  v57(&v81[v28[10]], &v82[v28[10]], v56);
  v57(&v81[v28[11]], &v82[v28[11]], v56);
  v107 = v28[12];
  v108 = *(_QWORD *)&v81[v107];
  *(_QWORD *)&v81[v107] = *(_QWORD *)&v82[v107];
  swift_release(v108);
  v81[v28[13]] = v82[v28[13]];
  v109 = v28[14];
  v110 = &v81[v109];
  v111 = &v82[v109];
  v112 = *(_QWORD *)v111;
  LOBYTE(v111) = v111[8];
  v113 = *(void **)v110;
  *(_QWORD *)v110 = v112;
  v110[8] = (char)v111;

  v114 = v28[15];
  v115 = *(_QWORD *)&v81[v114];
  *(_QWORD *)&v81[v114] = *(_QWORD *)&v82[v114];
  swift_bridgeObjectRelease(v115);
  v81[v28[16]] = v82[v28[16]];
  v81[v28[17]] = v82[v28[17]];
  v116 = v28[18];
  v117 = &v81[v116];
  v118 = &v82[v116];
  v117[8] = v118[8];
  *(_QWORD *)v117 = *(_QWORD *)v118;
  v119 = v28[19];
  v120 = &v81[v119];
  v121 = &v82[v119];
  v123 = *(_QWORD *)v121;
  v122 = *((_QWORD *)v121 + 1);
  v124 = *((_QWORD *)v120 + 1);
  *(_QWORD *)v120 = v123;
  *((_QWORD *)v120 + 1) = v122;
  swift_bridgeObjectRelease(v124);
  v81[v28[20]] = v82[v28[20]];
  v125 = v28[21];
  v126 = *(_QWORD *)&v81[v125];
  *(_QWORD *)&v81[v125] = *(_QWORD *)&v82[v125];
  swift_bridgeObjectRelease(v126);
  v127 = v28[22];
  v128 = *(_QWORD *)&v81[v127];
  *(_QWORD *)&v81[v127] = *(_QWORD *)&v82[v127];
  swift_bridgeObjectRelease(v128);
  v129 = v139[10];
  a1[v139[9]] = v138[v139[9]];
  *(_OWORD *)&a1[v129] = *(_OWORD *)&v138[v129];
  v130 = v139[11];
  v131 = &a1[v130];
  v132 = &v138[v130];
  *(_OWORD *)&a1[v130] = *(_OWORD *)&v138[v130];
  v133 = *(int *)(type metadata accessor for RoundedRectangle(0) + 20);
  v134 = &v131[v133];
  v135 = &v132[v133];
  v136 = type metadata accessor for RoundedCornerStyle(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v136 - 8) + 40))(v134, v135, v136);
  return a1;
}

uint64_t sub_100072050(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10007205C);
}

uint64_t sub_10007205C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v6 = sub_10000527C(&qword_1000A5E88);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  if ((_DWORD)a2 == 254)
  {
    v9 = *(unsigned __int8 *)(a1 + a3[5] + 8);
    if (v9 > 1)
      return (v9 ^ 0xFF) + 1;
    else
      return 0;
  }
  else
  {
    v10 = sub_10000527C(&qword_1000A5CD8);
    v11 = *(_QWORD *)(v10 - 8);
    if (*(_DWORD *)(v11 + 84) == (_DWORD)a2)
    {
      v12 = v10;
      v13 = a3[6];
    }
    else
    {
      v14 = type metadata accessor for AccessoryAndSceneEntity(0);
      v11 = *(_QWORD *)(v14 - 8);
      if (*(_DWORD *)(v11 + 84) == (_DWORD)a2)
      {
        v12 = v14;
        v13 = a3[7];
      }
      else
      {
        v15 = type metadata accessor for WidgetTileInfo(0);
        v11 = *(_QWORD *)(v15 - 8);
        if (*(_DWORD *)(v11 + 84) == (_DWORD)a2)
        {
          v12 = v15;
          v13 = a3[8];
        }
        else
        {
          v12 = type metadata accessor for RoundedRectangle(0);
          v11 = *(_QWORD *)(v12 - 8);
          v13 = a3[11];
        }
      }
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v11 + 48))(a1 + v13, a2, v12);
  }
}

uint64_t sub_100072174(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100072180);
}

uint64_t sub_100072180(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  result = sub_10000527C(&qword_1000A5E88);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = result;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    if (a3 == 254)
    {
      *(_BYTE *)(a1 + a4[5] + 8) = -(char)a2;
      return result;
    }
    v13 = sub_10000527C(&qword_1000A5CD8);
    v14 = *(_QWORD *)(v13 - 8);
    if (*(_DWORD *)(v14 + 84) == a3)
    {
      v10 = v13;
      v15 = a4[6];
    }
    else
    {
      v16 = type metadata accessor for AccessoryAndSceneEntity(0);
      v14 = *(_QWORD *)(v16 - 8);
      if (*(_DWORD *)(v14 + 84) == a3)
      {
        v10 = v16;
        v15 = a4[7];
      }
      else
      {
        v17 = type metadata accessor for WidgetTileInfo(0);
        v14 = *(_QWORD *)(v17 - 8);
        if (*(_DWORD *)(v14 + 84) == a3)
        {
          v10 = v17;
          v15 = a4[8];
        }
        else
        {
          v10 = type metadata accessor for RoundedRectangle(0);
          v14 = *(_QWORD *)(v10 - 8);
          v15 = a4[11];
        }
      }
    }
    v12 = a1 + v15;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
  }
  return v11(v12, a2, a2, v10);
}

void sub_100072298(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  _QWORD v12[8];

  sub_100048D10(319, (unint64_t *)&qword_1000A5F00, (uint64_t (*)(uint64_t))&type metadata accessor for WidgetRenderingMode);
  if (v3 <= 0x3F)
  {
    v12[0] = *(_QWORD *)(v2 - 8) + 64;
    v12[1] = "\t";
    sub_100048D10(319, &qword_1000A5EF8, (uint64_t (*)(uint64_t))&type metadata accessor for ColorScheme);
    if (v5 <= 0x3F)
    {
      v12[2] = *(_QWORD *)(v4 - 8) + 64;
      v6 = type metadata accessor for AccessoryAndSceneEntity(319);
      if (v7 <= 0x3F)
      {
        v12[3] = *(_QWORD *)(v6 - 8) + 64;
        v8 = type metadata accessor for WidgetTileInfo(319);
        if (v9 <= 0x3F)
        {
          v12[4] = *(_QWORD *)(v8 - 8) + 64;
          v12[5] = &unk_1000897E8;
          v12[6] = &unk_100089800;
          v10 = type metadata accessor for RoundedRectangle(319);
          if (v11 <= 0x3F)
          {
            v12[7] = *(_QWORD *)(v10 - 8) + 64;
            swift_initStructMetadata(a1, 256, 8, v12, a1 + 16);
          }
        }
      }
    }
  }
}

uint64_t sub_1000723AC(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_10008CE5C, 1);
}

uint64_t type metadata accessor for NormalTileGutsViewToggleStyle(uint64_t a1)
{
  return sub_100050B64(a1, qword_1000A7170, (uint64_t)&nominal type descriptor for NormalTileGutsViewToggleStyle);
}

uint64_t sub_1000723D0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_10006BA50(*(_QWORD *)(v1 + 16), *(_BYTE *)(v1 + 24), a1);
}

unint64_t sub_1000723DC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000A6FA8;
  if (!qword_1000A6FA8)
  {
    v1 = sub_1000052BC(&qword_1000A6FA0);
    sub_1000229D8(&qword_1000A6FB0, &qword_1000A6FB8, (uint64_t)&protocol conformance descriptor for ZStack<A>);
    sub_1000229D8(&qword_1000A60E8, &qword_1000A60F0, (uint64_t)&protocol conformance descriptor for _ContainerShapeModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000A6FA8);
  }
  return result;
}

Swift::Int sub_100072478()
{
  _QWORD v1[9];

  Hasher.init(_seed:)(v1, 0);
  String.hash(into:)(v1, 1953460082, 0xE400000000000000);
  return Hasher._finalize()();
}

uint64_t type metadata accessor for NormalTileGutsView(uint64_t a1)
{
  return sub_100050B64(a1, qword_1000A7048, (uint64_t)&nominal type descriptor for NormalTileGutsView);
}

uint64_t type metadata accessor for AccentableBackgroundView(uint64_t a1)
{
  return sub_100050B64(a1, qword_1000A70E0, (uint64_t)&nominal type descriptor for AccentableBackgroundView);
}

uint64_t sub_1000724E8(uint64_t a1, char a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t *v15;
  char v16;
  uint64_t v18;

  v6 = type metadata accessor for ColorScheme(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for WidgetRenderingMode(0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = __chkstk_darwin(v10);
  v14 = (char *)&v18 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  static WidgetRenderingMode.vibrant.getter(v12);
  LOBYTE(a1) = static WidgetRenderingMode.== infix(_:_:)(a1, v14);
  (*(void (**)(char *, uint64_t))(v11 + 8))(v14, v10);
  if ((a1 & 1) != 0)
  {
    if ((a2 & 1) != 0)
    {
      if (qword_1000A4F20 != -1)
        swift_once(&qword_1000A4F20, sub_100076B90);
      v15 = &qword_1000A7AC8;
    }
    else
    {
      if (qword_1000A4F28 != -1)
        swift_once(&qword_1000A4F28, sub_100076BA4);
      v15 = &qword_1000A7AD0;
    }
  }
  else
  {
    (*(void (**)(char *, _QWORD, uint64_t))(v7 + 104))(v9, enum case for ColorScheme.light(_:), v6);
    v16 = static ColorScheme.== infix(_:_:)(a3, v9);
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
    if ((v16 & 1) != 0)
    {
      if (qword_1000A4F30 != -1)
        swift_once(&qword_1000A4F30, sub_100076C48);
      v15 = &qword_1000A7AD8;
    }
    else
    {
      if (qword_1000A4F38 != -1)
        swift_once(&qword_1000A4F38, sub_100076C58);
      v15 = &qword_1000A7AE0;
    }
  }
  return *v15;
}

char *sub_1000726E0(char *a1, char *a2, int *a3)
{
  int v5;
  uint64_t v6;
  void (*v7)(char *, char *, uint64_t);
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  int *v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void (*v31)(char *, char *, uint64_t, __n128);
  __n128 v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  char *v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  char *v43;
  uint64_t v44;
  char *v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  id v53;
  uint64_t v54;
  char *v56;
  char *v57;
  _QWORD *v58;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v54 = *(_QWORD *)a2;
    *(_QWORD *)a1 = *(_QWORD *)a2;
    a1 = (char *)(v54 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v54);
  }
  else
  {
    v6 = type metadata accessor for UUID(0);
    v7 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v6 - 8) + 16);
    v7(a1, a2, v6);
    v8 = type metadata accessor for AccessoryAndSceneEntity(0);
    v7(&a1[*(int *)(v8 + 20)], &a2[*(int *)(v8 + 20)], v6);
    v9 = *(int *)(v8 + 24);
    v10 = &a1[v9];
    v11 = &a2[v9];
    v7(&a1[v9], &a2[v9], v6);
    v12 = (int *)type metadata accessor for WidgetTileInfo(0);
    v7(&v10[v12[5]], &v11[v12[5]], v6);
    v13 = v12[6];
    v14 = &v10[v13];
    v15 = &v11[v13];
    v16 = *((_QWORD *)v15 + 1);
    *(_QWORD *)v14 = *(_QWORD *)v15;
    *((_QWORD *)v14 + 1) = v16;
    v17 = v12[7];
    v18 = &v10[v17];
    v19 = &v11[v17];
    v20 = *((_QWORD *)v19 + 1);
    *(_QWORD *)v18 = *(_QWORD *)v19;
    *((_QWORD *)v18 + 1) = v20;
    v21 = v12[8];
    v22 = &v10[v21];
    v23 = &v11[v21];
    v24 = *((_QWORD *)v23 + 1);
    *(_QWORD *)v22 = *(_QWORD *)v23;
    *((_QWORD *)v22 + 1) = v24;
    v25 = v12[9];
    v26 = &v10[v25];
    v27 = &v11[v25];
    v28 = *((_QWORD *)v27 + 1);
    *(_QWORD *)v26 = *(_QWORD *)v27;
    *((_QWORD *)v26 + 1) = v28;
    v29 = v12[10];
    v56 = &v11[v29];
    v57 = &v10[v29];
    v30 = type metadata accessor for StaticRenderingMode(0);
    v58 = a2;
    v31 = *(void (**)(char *, char *, uint64_t, __n128))(*(_QWORD *)(v30 - 8) + 16);
    swift_bridgeObjectRetain(v16);
    swift_bridgeObjectRetain(v20);
    swift_bridgeObjectRetain(v24);
    v32 = swift_bridgeObjectRetain(v28);
    v31(v57, v56, v30, v32);
    ((void (*)(char *, char *, uint64_t))v31)(&v10[v12[11]], &v11[v12[11]], v30);
    v33 = v12[12];
    v34 = *(_QWORD *)&v11[v33];
    *(_QWORD *)&v10[v33] = v34;
    v10[v12[13]] = v11[v12[13]];
    v35 = v12[14];
    v36 = &v10[v35];
    v37 = &v11[v35];
    v38 = *(void **)v37;
    LOBYTE(v37) = v37[8];
    *(_QWORD *)v36 = v38;
    v36[8] = (char)v37;
    v39 = v12[15];
    v40 = *(_QWORD *)&v11[v39];
    *(_QWORD *)&v10[v39] = v40;
    v10[v12[16]] = v11[v12[16]];
    v10[v12[17]] = v11[v12[17]];
    v41 = v12[18];
    v42 = &v10[v41];
    v43 = &v11[v41];
    *(_QWORD *)v42 = *(_QWORD *)v43;
    v42[8] = v43[8];
    v44 = v12[19];
    v45 = &v10[v44];
    v46 = &v11[v44];
    v47 = *((_QWORD *)v46 + 1);
    *(_QWORD *)v45 = *(_QWORD *)v46;
    *((_QWORD *)v45 + 1) = v47;
    v10[v12[20]] = v11[v12[20]];
    v48 = v12[21];
    v49 = *(_QWORD *)&v11[v48];
    *(_QWORD *)&v10[v48] = v49;
    v50 = v12[22];
    v51 = *(_QWORD *)&v11[v50];
    *(_QWORD *)&v10[v50] = v51;
    v52 = a3[6];
    *(_OWORD *)&a1[a3[5]] = *(_OWORD *)((char *)v58 + a3[5]);
    a1[v52] = *((_BYTE *)v58 + v52);
    a1[a3[7]] = *((_BYTE *)v58 + a3[7]);
    swift_retain(v34);
    v53 = v38;
    swift_bridgeObjectRetain(v40);
    swift_bridgeObjectRetain(v47);
    swift_bridgeObjectRetain(v49);
    swift_bridgeObjectRetain(v51);
  }
  return a1;
}

uint64_t sub_10007298C(uint64_t a1)
{
  uint64_t v2;
  void (*v3)(uint64_t, uint64_t);
  uint64_t v4;
  uint64_t v5;
  int *v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t);

  v2 = type metadata accessor for UUID(0);
  v3 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8);
  v3(a1, v2);
  v4 = type metadata accessor for AccessoryAndSceneEntity(0);
  v3(a1 + *(int *)(v4 + 20), v2);
  v5 = a1 + *(int *)(v4 + 24);
  v3(v5, v2);
  v6 = (int *)type metadata accessor for WidgetTileInfo(0);
  v3(v5 + v6[5], v2);
  swift_bridgeObjectRelease(*(_QWORD *)(v5 + v6[6] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v5 + v6[7] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v5 + v6[8] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v5 + v6[9] + 8));
  v7 = v5 + v6[10];
  v8 = type metadata accessor for StaticRenderingMode(0);
  v9 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8);
  v9(v7, v8);
  v9(v5 + v6[11], v8);
  swift_release(*(_QWORD *)(v5 + v6[12]));

  swift_bridgeObjectRelease(*(_QWORD *)(v5 + v6[15]));
  swift_bridgeObjectRelease(*(_QWORD *)(v5 + v6[19] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v5 + v6[21]));
  return swift_bridgeObjectRelease(*(_QWORD *)(v5 + v6[22]));
}

uint64_t sub_100072AE4(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t, uint64_t);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int *v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void (*v31)(uint64_t, uint64_t, uint64_t, __n128);
  __n128 v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  _QWORD *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  id v53;
  uint64_t v55;

  v5 = type metadata accessor for UUID(0);
  v6 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16);
  v6(a1, a2, v5);
  v7 = type metadata accessor for AccessoryAndSceneEntity(0);
  v6(a1 + *(int *)(v7 + 20), a2 + *(int *)(v7 + 20), v5);
  v8 = *(int *)(v7 + 24);
  v9 = a1 + v8;
  v10 = a2 + v8;
  v6(a1 + v8, a2 + v8, v5);
  v11 = (int *)type metadata accessor for WidgetTileInfo(0);
  v6(v9 + v11[5], v10 + v11[5], v5);
  v12 = v11[6];
  v13 = (_QWORD *)(v9 + v12);
  v14 = (_QWORD *)(v10 + v12);
  v15 = v14[1];
  *v13 = *v14;
  v13[1] = v15;
  v16 = v11[7];
  v17 = (_QWORD *)(v9 + v16);
  v18 = (_QWORD *)(v10 + v16);
  v19 = v18[1];
  *v17 = *v18;
  v17[1] = v19;
  v20 = v11[8];
  v21 = (_QWORD *)(v9 + v20);
  v22 = (_QWORD *)(v10 + v20);
  v23 = v22[1];
  *v21 = *v22;
  v21[1] = v23;
  v24 = v11[9];
  v25 = (_QWORD *)(v9 + v24);
  v26 = (_QWORD *)(v10 + v24);
  v27 = v26[1];
  *v25 = *v26;
  v25[1] = v27;
  v28 = v11[10];
  v29 = v9 + v28;
  v55 = v10 + v28;
  v30 = type metadata accessor for StaticRenderingMode(0);
  v31 = *(void (**)(uint64_t, uint64_t, uint64_t, __n128))(*(_QWORD *)(v30 - 8) + 16);
  swift_bridgeObjectRetain(v15);
  swift_bridgeObjectRetain(v19);
  swift_bridgeObjectRetain(v23);
  v32 = swift_bridgeObjectRetain(v27);
  v31(v29, v55, v30, v32);
  ((void (*)(uint64_t, uint64_t, uint64_t))v31)(v9 + v11[11], v10 + v11[11], v30);
  v33 = v11[12];
  v34 = *(_QWORD *)(v10 + v33);
  *(_QWORD *)(v9 + v33) = v34;
  *(_BYTE *)(v9 + v11[13]) = *(_BYTE *)(v10 + v11[13]);
  v35 = v11[14];
  v36 = v9 + v35;
  v37 = v10 + v35;
  v38 = *(void **)v37;
  LOBYTE(v37) = *(_BYTE *)(v37 + 8);
  *(_QWORD *)v36 = v38;
  *(_BYTE *)(v36 + 8) = v37;
  v39 = v11[15];
  v40 = *(_QWORD *)(v10 + v39);
  *(_QWORD *)(v9 + v39) = v40;
  *(_BYTE *)(v9 + v11[16]) = *(_BYTE *)(v10 + v11[16]);
  *(_BYTE *)(v9 + v11[17]) = *(_BYTE *)(v10 + v11[17]);
  v41 = v11[18];
  v42 = v9 + v41;
  v43 = v10 + v41;
  *(_QWORD *)v42 = *(_QWORD *)v43;
  *(_BYTE *)(v42 + 8) = *(_BYTE *)(v43 + 8);
  v44 = v11[19];
  v45 = (_QWORD *)(v9 + v44);
  v46 = (_QWORD *)(v10 + v44);
  v47 = v46[1];
  *v45 = *v46;
  v45[1] = v47;
  *(_BYTE *)(v9 + v11[20]) = *(_BYTE *)(v10 + v11[20]);
  v48 = v11[21];
  v49 = *(_QWORD *)(v10 + v48);
  *(_QWORD *)(v9 + v48) = v49;
  v50 = v11[22];
  v51 = *(_QWORD *)(v10 + v50);
  *(_QWORD *)(v9 + v50) = v51;
  v52 = a3[6];
  *(_OWORD *)(a1 + a3[5]) = *(_OWORD *)(a2 + a3[5]);
  *(_BYTE *)(a1 + v52) = *(_BYTE *)(a2 + v52);
  *(_BYTE *)(a1 + a3[7]) = *(_BYTE *)(a2 + a3[7]);
  swift_retain(v34);
  v53 = v38;
  swift_bridgeObjectRetain(v40);
  swift_bridgeObjectRetain(v47);
  swift_bridgeObjectRetain(v49);
  swift_bridgeObjectRetain(v51);
  return a1;
}

uint64_t sub_100072D70(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int *v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void (*v37)(uint64_t, uint64_t, uint64_t);
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  void *v44;
  void *v45;
  id v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t *v52;
  uint64_t v53;
  uint64_t v54;
  _QWORD *v55;
  _QWORD *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  _QWORD *v66;
  _QWORD *v67;

  v6 = type metadata accessor for UUID(0);
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24);
  v7(a1, a2, v6);
  v8 = type metadata accessor for AccessoryAndSceneEntity(0);
  v7(a1 + *(int *)(v8 + 20), a2 + *(int *)(v8 + 20), v6);
  v9 = *(int *)(v8 + 24);
  v10 = a1 + v9;
  v11 = a2 + v9;
  v7(a1 + v9, a2 + v9, v6);
  v12 = (int *)type metadata accessor for WidgetTileInfo(0);
  v7(v10 + v12[5], v11 + v12[5], v6);
  v13 = v12[6];
  v14 = (_QWORD *)(v10 + v13);
  v15 = (_QWORD *)(v11 + v13);
  *v14 = *v15;
  v16 = v15[1];
  v17 = v14[1];
  v14[1] = v16;
  swift_bridgeObjectRetain(v16);
  swift_bridgeObjectRelease(v17);
  v18 = v12[7];
  v19 = (_QWORD *)(v10 + v18);
  v20 = (_QWORD *)(v11 + v18);
  *v19 = *v20;
  v21 = v20[1];
  v22 = v19[1];
  v19[1] = v21;
  swift_bridgeObjectRetain(v21);
  swift_bridgeObjectRelease(v22);
  v23 = v12[8];
  v24 = (_QWORD *)(v10 + v23);
  v25 = (_QWORD *)(v11 + v23);
  *v24 = *v25;
  v26 = v25[1];
  v27 = v24[1];
  v24[1] = v26;
  swift_bridgeObjectRetain(v26);
  swift_bridgeObjectRelease(v27);
  v28 = v12[9];
  v29 = (_QWORD *)(v10 + v28);
  v30 = (_QWORD *)(v11 + v28);
  *v29 = *v30;
  v31 = v30[1];
  v32 = v29[1];
  v29[1] = v31;
  swift_bridgeObjectRetain(v31);
  swift_bridgeObjectRelease(v32);
  v33 = v12[10];
  v34 = v10 + v33;
  v35 = v11 + v33;
  v36 = type metadata accessor for StaticRenderingMode(0);
  v37 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v36 - 8) + 24);
  v37(v34, v35, v36);
  v37(v10 + v12[11], v11 + v12[11], v36);
  v38 = v12[12];
  v39 = *(_QWORD *)(v11 + v38);
  v40 = *(_QWORD *)(v10 + v38);
  *(_QWORD *)(v10 + v38) = v39;
  swift_retain(v39);
  swift_release(v40);
  *(_BYTE *)(v10 + v12[13]) = *(_BYTE *)(v11 + v12[13]);
  v41 = v12[14];
  v42 = v10 + v41;
  v43 = v11 + v41;
  v44 = *(void **)v43;
  LOBYTE(v43) = *(_BYTE *)(v43 + 8);
  v45 = *(void **)v42;
  *(_QWORD *)v42 = v44;
  *(_BYTE *)(v42 + 8) = v43;
  v46 = v44;

  v47 = v12[15];
  v48 = *(_QWORD *)(v11 + v47);
  v49 = *(_QWORD *)(v10 + v47);
  *(_QWORD *)(v10 + v47) = v48;
  swift_bridgeObjectRetain(v48);
  swift_bridgeObjectRelease(v49);
  *(_BYTE *)(v10 + v12[16]) = *(_BYTE *)(v11 + v12[16]);
  *(_BYTE *)(v10 + v12[17]) = *(_BYTE *)(v11 + v12[17]);
  v50 = v12[18];
  v51 = v10 + v50;
  v52 = (uint64_t *)(v11 + v50);
  v53 = *v52;
  *(_BYTE *)(v51 + 8) = *((_BYTE *)v52 + 8);
  *(_QWORD *)v51 = v53;
  v54 = v12[19];
  v55 = (_QWORD *)(v10 + v54);
  v56 = (_QWORD *)(v11 + v54);
  *v55 = *v56;
  v57 = v56[1];
  v58 = v55[1];
  v55[1] = v57;
  swift_bridgeObjectRetain(v57);
  swift_bridgeObjectRelease(v58);
  *(_BYTE *)(v10 + v12[20]) = *(_BYTE *)(v11 + v12[20]);
  v59 = v12[21];
  v60 = *(_QWORD *)(v11 + v59);
  v61 = *(_QWORD *)(v10 + v59);
  *(_QWORD *)(v10 + v59) = v60;
  swift_bridgeObjectRetain(v60);
  swift_bridgeObjectRelease(v61);
  v62 = v12[22];
  v63 = *(_QWORD *)(v11 + v62);
  v64 = *(_QWORD *)(v10 + v62);
  *(_QWORD *)(v10 + v62) = v63;
  swift_bridgeObjectRetain(v63);
  swift_bridgeObjectRelease(v64);
  v65 = a3[5];
  v66 = (_QWORD *)(a1 + v65);
  v67 = (_QWORD *)(a2 + v65);
  *v66 = *v67;
  v66[1] = v67[1];
  *(_BYTE *)(a1 + a3[6]) = *(_BYTE *)(a2 + a3[6]);
  *(_BYTE *)(a1 + a3[7]) = *(_BYTE *)(a2 + a3[7]);
  return a1;
}

uint64_t sub_100073070(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void (*v17)(uint64_t, uint64_t, uint64_t);
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v6 = type metadata accessor for UUID(0);
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32);
  v7(a1, a2, v6);
  v8 = type metadata accessor for AccessoryAndSceneEntity(0);
  v7(a1 + *(int *)(v8 + 20), a2 + *(int *)(v8 + 20), v6);
  v9 = *(int *)(v8 + 24);
  v10 = a1 + v9;
  v11 = a2 + v9;
  v7(a1 + v9, a2 + v9, v6);
  v12 = (int *)type metadata accessor for WidgetTileInfo(0);
  v7(v10 + v12[5], v11 + v12[5], v6);
  *(_OWORD *)(v10 + v12[6]) = *(_OWORD *)(v11 + v12[6]);
  *(_OWORD *)(v10 + v12[7]) = *(_OWORD *)(v11 + v12[7]);
  *(_OWORD *)(v10 + v12[8]) = *(_OWORD *)(v11 + v12[8]);
  *(_OWORD *)(v10 + v12[9]) = *(_OWORD *)(v11 + v12[9]);
  v13 = v12[10];
  v14 = v10 + v13;
  v15 = v11 + v13;
  v16 = type metadata accessor for StaticRenderingMode(0);
  v17 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 32);
  v17(v14, v15, v16);
  v17(v10 + v12[11], v11 + v12[11], v16);
  *(_QWORD *)(v10 + v12[12]) = *(_QWORD *)(v11 + v12[12]);
  *(_BYTE *)(v10 + v12[13]) = *(_BYTE *)(v11 + v12[13]);
  v18 = v12[14];
  v19 = v10 + v18;
  v20 = v11 + v18;
  *(_QWORD *)v19 = *(_QWORD *)v20;
  *(_BYTE *)(v19 + 8) = *(_BYTE *)(v20 + 8);
  *(_QWORD *)(v10 + v12[15]) = *(_QWORD *)(v11 + v12[15]);
  *(_BYTE *)(v10 + v12[16]) = *(_BYTE *)(v11 + v12[16]);
  *(_BYTE *)(v10 + v12[17]) = *(_BYTE *)(v11 + v12[17]);
  v21 = v12[18];
  v22 = v10 + v21;
  v23 = v11 + v21;
  *(_QWORD *)v22 = *(_QWORD *)v23;
  *(_BYTE *)(v22 + 8) = *(_BYTE *)(v23 + 8);
  *(_OWORD *)(v10 + v12[19]) = *(_OWORD *)(v11 + v12[19]);
  *(_BYTE *)(v10 + v12[20]) = *(_BYTE *)(v11 + v12[20]);
  *(_QWORD *)(v10 + v12[21]) = *(_QWORD *)(v11 + v12[21]);
  *(_QWORD *)(v10 + v12[22]) = *(_QWORD *)(v11 + v12[22]);
  v24 = a3[6];
  *(_OWORD *)(a1 + a3[5]) = *(_OWORD *)(a2 + a3[5]);
  *(_BYTE *)(a1 + v24) = *(_BYTE *)(a2 + v24);
  *(_BYTE *)(a1 + a3[7]) = *(_BYTE *)(a2 + a3[7]);
  return a1;
}

uint64_t sub_100073270(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int *v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void (*v41)(uint64_t, uint64_t, uint64_t);
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t *v46;
  uint64_t v47;
  void *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  _QWORD *v55;
  uint64_t *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;

  v6 = type metadata accessor for UUID(0);
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40);
  v7(a1, a2, v6);
  v8 = type metadata accessor for AccessoryAndSceneEntity(0);
  v7(a1 + *(int *)(v8 + 20), a2 + *(int *)(v8 + 20), v6);
  v9 = *(int *)(v8 + 24);
  v10 = a1 + v9;
  v11 = a2 + v9;
  v7(a1 + v9, a2 + v9, v6);
  v12 = (int *)type metadata accessor for WidgetTileInfo(0);
  v7(v10 + v12[5], v11 + v12[5], v6);
  v13 = v12[6];
  v14 = (_QWORD *)(v10 + v13);
  v15 = (uint64_t *)(v11 + v13);
  v17 = *v15;
  v16 = v15[1];
  v18 = v14[1];
  *v14 = v17;
  v14[1] = v16;
  swift_bridgeObjectRelease(v18);
  v19 = v12[7];
  v20 = (_QWORD *)(v10 + v19);
  v21 = (uint64_t *)(v11 + v19);
  v23 = *v21;
  v22 = v21[1];
  v24 = v20[1];
  *v20 = v23;
  v20[1] = v22;
  swift_bridgeObjectRelease(v24);
  v25 = v12[8];
  v26 = (_QWORD *)(v10 + v25);
  v27 = (uint64_t *)(v11 + v25);
  v29 = *v27;
  v28 = v27[1];
  v30 = v26[1];
  *v26 = v29;
  v26[1] = v28;
  swift_bridgeObjectRelease(v30);
  v31 = v12[9];
  v32 = (_QWORD *)(v10 + v31);
  v33 = (uint64_t *)(v11 + v31);
  v35 = *v33;
  v34 = v33[1];
  v36 = v32[1];
  *v32 = v35;
  v32[1] = v34;
  swift_bridgeObjectRelease(v36);
  v37 = v12[10];
  v38 = v10 + v37;
  v39 = v11 + v37;
  v40 = type metadata accessor for StaticRenderingMode(0);
  v41 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v40 - 8) + 40);
  v41(v38, v39, v40);
  v41(v10 + v12[11], v11 + v12[11], v40);
  v42 = v12[12];
  v43 = *(_QWORD *)(v10 + v42);
  *(_QWORD *)(v10 + v42) = *(_QWORD *)(v11 + v42);
  swift_release(v43);
  *(_BYTE *)(v10 + v12[13]) = *(_BYTE *)(v11 + v12[13]);
  v44 = v12[14];
  v45 = v10 + v44;
  v46 = (uint64_t *)(v11 + v44);
  v47 = *v46;
  LOBYTE(v46) = *((_BYTE *)v46 + 8);
  v48 = *(void **)v45;
  *(_QWORD *)v45 = v47;
  *(_BYTE *)(v45 + 8) = (_BYTE)v46;

  v49 = v12[15];
  v50 = *(_QWORD *)(v10 + v49);
  *(_QWORD *)(v10 + v49) = *(_QWORD *)(v11 + v49);
  swift_bridgeObjectRelease(v50);
  *(_BYTE *)(v10 + v12[16]) = *(_BYTE *)(v11 + v12[16]);
  *(_BYTE *)(v10 + v12[17]) = *(_BYTE *)(v11 + v12[17]);
  v51 = v12[18];
  v52 = v10 + v51;
  v53 = v11 + v51;
  *(_BYTE *)(v52 + 8) = *(_BYTE *)(v53 + 8);
  *(_QWORD *)v52 = *(_QWORD *)v53;
  v54 = v12[19];
  v55 = (_QWORD *)(v10 + v54);
  v56 = (uint64_t *)(v11 + v54);
  v58 = *v56;
  v57 = v56[1];
  v59 = v55[1];
  *v55 = v58;
  v55[1] = v57;
  swift_bridgeObjectRelease(v59);
  *(_BYTE *)(v10 + v12[20]) = *(_BYTE *)(v11 + v12[20]);
  v60 = v12[21];
  v61 = *(_QWORD *)(v10 + v60);
  *(_QWORD *)(v10 + v60) = *(_QWORD *)(v11 + v60);
  swift_bridgeObjectRelease(v61);
  v62 = v12[22];
  v63 = *(_QWORD *)(v10 + v62);
  *(_QWORD *)(v10 + v62) = *(_QWORD *)(v11 + v62);
  swift_bridgeObjectRelease(v63);
  v64 = a3[6];
  *(_OWORD *)(a1 + a3[5]) = *(_OWORD *)(a2 + a3[5]);
  *(_BYTE *)(a1 + v64) = *(_BYTE *)(a2 + v64);
  *(_BYTE *)(a1 + a3[7]) = *(_BYTE *)(a2 + a3[7]);
  return a1;
}

uint64_t sub_1000734E8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000734F4);
}

uint64_t sub_1000734F4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unsigned int v9;

  v6 = type metadata accessor for AccessoryAndSceneEntity(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(unsigned __int8 *)(a1 + *(int *)(a3 + 28));
  if (v9 >= 2)
    return ((v9 + 2147483646) & 0x7FFFFFFF) + 1;
  else
    return 0;
}

uint64_t sub_100073580(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10007358C);
}

uint64_t sub_10007358C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = type metadata accessor for AccessoryAndSceneEntity(0);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_BYTE *)(a1 + *(int *)(a4 + 28)) = a2 + 1;
  return result;
}

uint64_t sub_100073604(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[4];

  result = type metadata accessor for AccessoryAndSceneEntity(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(result - 8) + 64;
    v4[1] = &unk_100089800;
    v4[2] = &unk_1000897E8;
    v4[3] = &unk_1000898B8;
    swift_initStructMetadata(a1, 256, 4, v4, a1 + 16);
    return 0;
  }
  return result;
}

_QWORD *sub_100073688(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v12 = *a2;
    *a1 = *a2;
    a1 = (_QWORD *)(v12 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v12);
  }
  else
  {
    v7 = sub_10000527C(&qword_1000A4FC0);
    if (swift_getEnumCaseMultiPayload(a2, v7) == 1)
    {
      v8 = type metadata accessor for WidgetRenderingMode(0);
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(a1, a2, v8);
      v9 = a1;
      v10 = v7;
      v11 = 1;
    }
    else
    {
      v13 = *a2;
      *a1 = *a2;
      swift_retain(v13);
      v9 = a1;
      v10 = v7;
      v11 = 0;
    }
    swift_storeEnumTagMultiPayload(v9, v10, v11);
    *((_BYTE *)a1 + *(int *)(a3 + 20)) = *((_BYTE *)a2 + *(int *)(a3 + 20));
  }
  return a1;
}

uint64_t sub_100073760(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = sub_10000527C(&qword_1000A4FC0);
  if (swift_getEnumCaseMultiPayload(a1, v2) != 1)
    return swift_release(*a1);
  v3 = type metadata accessor for WidgetRenderingMode(0);
  return (*(uint64_t (**)(_QWORD *, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
}

_QWORD *sub_1000737C4(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v6 = sub_10000527C(&qword_1000A4FC0);
  if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
  {
    v7 = type metadata accessor for WidgetRenderingMode(0);
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = a1;
    v9 = v6;
    v10 = 1;
  }
  else
  {
    v11 = *a2;
    *a1 = *a2;
    swift_retain(v11);
    v8 = a1;
    v9 = v6;
    v10 = 0;
  }
  swift_storeEnumTagMultiPayload(v8, v9, v10);
  *((_BYTE *)a1 + *(int *)(a3 + 20)) = *((_BYTE *)a2 + *(int *)(a3 + 20));
  return a1;
}

_QWORD *sub_100073870(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if (a1 != a2)
  {
    sub_100014EFC((uint64_t)a1, &qword_1000A4FC0);
    v6 = sub_10000527C(&qword_1000A4FC0);
    if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
    {
      v7 = type metadata accessor for WidgetRenderingMode(0);
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
      v8 = a1;
      v9 = v6;
      v10 = 1;
    }
    else
    {
      v11 = *a2;
      *a1 = *a2;
      swift_retain(v11);
      v8 = a1;
      v9 = v6;
      v10 = 0;
    }
    swift_storeEnumTagMultiPayload(v8, v9, v10);
  }
  *((_BYTE *)a1 + *(int *)(a3 + 20)) = *((_BYTE *)a2 + *(int *)(a3 + 20));
  return a1;
}

void *sub_100073934(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;

  v6 = sub_10000527C(&qword_1000A4FC0);
  if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
  {
    v7 = type metadata accessor for WidgetRenderingMode(0);
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a1, a2, v7);
    swift_storeEnumTagMultiPayload(a1, v6, 1);
  }
  else
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
  }
  *((_BYTE *)a1 + *(int *)(a3 + 20)) = *((_BYTE *)a2 + *(int *)(a3 + 20));
  return a1;
}

void *sub_1000739DC(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;

  if (a1 != a2)
  {
    sub_100014EFC((uint64_t)a1, &qword_1000A4FC0);
    v6 = sub_10000527C(&qword_1000A4FC0);
    if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
    {
      v7 = type metadata accessor for WidgetRenderingMode(0);
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a1, a2, v7);
      swift_storeEnumTagMultiPayload(a1, v6, 1);
    }
    else
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
    }
  }
  *((_BYTE *)a1 + *(int *)(a3 + 20)) = *((_BYTE *)a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t sub_100073A9C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100073AA8);
}

uint64_t sub_100073AA8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unsigned int v9;

  v6 = sub_10000527C(&qword_1000A5E88);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(unsigned __int8 *)(a1 + *(int *)(a3 + 20));
  if (v9 >= 2)
    return ((v9 + 2147483646) & 0x7FFFFFFF) + 1;
  else
    return 0;
}

uint64_t sub_100073B38(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100073B44);
}

uint64_t sub_100073B44(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = sub_10000527C(&qword_1000A5E88);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_BYTE *)(a1 + *(int *)(a4 + 20)) = a2 + 1;
  return result;
}

void sub_100073BC0(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[2];

  sub_100048D10(319, (unint64_t *)&qword_1000A5F00, (uint64_t (*)(uint64_t))&type metadata accessor for WidgetRenderingMode);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(v2 - 8) + 64;
    v4[1] = &unk_1000898B8;
    swift_initStructMetadata(a1, 256, 2, v4, a1 + 16);
  }
}

_QWORD *sub_100073C40(_QWORD *a1, _QWORD *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int *v15;
  char *v16;
  char *v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  void (*v24)(char *, char *, uint64_t);
  uint64_t v25;
  uint64_t v26;
  char *v27;
  char *v28;
  int *v29;
  uint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  void (*v48)(char *, char *, uint64_t, __n128);
  __n128 v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  char *v54;
  void *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  char *v60;
  uint64_t v61;
  char *v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  uint64_t v72;
  void (*v73)(char *, char *, uint64_t, __n128);
  id v74;
  __n128 v75;
  char *v77;
  char *v78;
  _QWORD *v79;
  int *v80;
  char *v81;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v12 = *a2;
    *a1 = *a2;
    a1 = (_QWORD *)(v12 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v12);
  }
  else
  {
    v7 = sub_10000527C(&qword_1000A4FC0);
    if (swift_getEnumCaseMultiPayload(a2, v7) == 1)
    {
      v8 = type metadata accessor for WidgetRenderingMode(0);
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(a1, a2, v8);
      v9 = a1;
      v10 = v7;
      v11 = 1;
    }
    else
    {
      v13 = *a2;
      *a1 = *a2;
      swift_retain(v13);
      v9 = a1;
      v10 = v7;
      v11 = 0;
    }
    swift_storeEnumTagMultiPayload(v9, v10, v11);
    v14 = a3[5];
    v15 = a3;
    v80 = a3;
    v16 = (char *)a1 + v14;
    v17 = (char *)a2 + v14;
    v18 = *(_QWORD *)v17;
    v19 = v17[8];
    sub_100035568(*(_QWORD *)v17, v19);
    *(_QWORD *)v16 = v18;
    v16[8] = v19;
    v20 = v15[6];
    v21 = (char *)a1 + v20;
    v22 = (char *)a2 + v20;
    v23 = type metadata accessor for UUID(0);
    v24 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v23 - 8) + 16);
    v24(v21, v22, v23);
    v25 = type metadata accessor for AccessoryAndSceneEntity(0);
    v24(&v21[*(int *)(v25 + 20)], &v22[*(int *)(v25 + 20)], v23);
    v26 = *(int *)(v25 + 24);
    v27 = &v21[v26];
    v28 = &v22[v26];
    v24(v27, v28, v23);
    v29 = (int *)type metadata accessor for WidgetTileInfo(0);
    v24(&v27[v29[5]], &v28[v29[5]], v23);
    v30 = v29[6];
    v31 = &v27[v30];
    v32 = &v28[v30];
    v33 = *((_QWORD *)v32 + 1);
    *(_QWORD *)v31 = *(_QWORD *)v32;
    *((_QWORD *)v31 + 1) = v33;
    v34 = v29[7];
    v35 = &v27[v34];
    v36 = &v28[v34];
    v37 = *((_QWORD *)v36 + 1);
    *(_QWORD *)v35 = *(_QWORD *)v36;
    *((_QWORD *)v35 + 1) = v37;
    v38 = v29[8];
    v39 = &v27[v38];
    v40 = &v28[v38];
    v41 = *((_QWORD *)v40 + 1);
    *(_QWORD *)v39 = *(_QWORD *)v40;
    *((_QWORD *)v39 + 1) = v41;
    v42 = v29[9];
    v43 = &v27[v42];
    v44 = &v28[v42];
    v45 = *((_QWORD *)v44 + 1);
    *(_QWORD *)v43 = *(_QWORD *)v44;
    *((_QWORD *)v43 + 1) = v45;
    v46 = v29[10];
    v77 = &v28[v46];
    v78 = &v27[v46];
    v47 = type metadata accessor for StaticRenderingMode(0);
    v79 = a2;
    v48 = *(void (**)(char *, char *, uint64_t, __n128))(*(_QWORD *)(v47 - 8) + 16);
    swift_bridgeObjectRetain(v33);
    swift_bridgeObjectRetain(v37);
    swift_bridgeObjectRetain(v41);
    v49 = swift_bridgeObjectRetain(v45);
    v48(v78, v77, v47, v49);
    ((void (*)(char *, char *, uint64_t))v48)(&v27[v29[11]], &v28[v29[11]], v47);
    v50 = v29[12];
    v51 = *(_QWORD *)&v28[v50];
    *(_QWORD *)&v27[v50] = v51;
    v27[v29[13]] = v28[v29[13]];
    v52 = v29[14];
    v53 = &v27[v52];
    v54 = &v28[v52];
    v55 = *(void **)v54;
    LOBYTE(v54) = v54[8];
    *(_QWORD *)v53 = v55;
    v53[8] = (char)v54;
    v56 = v29[15];
    v57 = *(_QWORD *)&v28[v56];
    *(_QWORD *)&v27[v56] = v57;
    v27[v29[16]] = v28[v29[16]];
    v27[v29[17]] = v28[v29[17]];
    v58 = v29[18];
    v59 = &v27[v58];
    v60 = &v28[v58];
    *(_QWORD *)v59 = *(_QWORD *)v60;
    v59[8] = v60[8];
    v61 = v29[19];
    v62 = &v27[v61];
    v63 = &v28[v61];
    v64 = *((_QWORD *)v63 + 1);
    *(_QWORD *)v62 = *(_QWORD *)v63;
    *((_QWORD *)v62 + 1) = v64;
    v27[v29[20]] = v28[v29[20]];
    v65 = v29[21];
    v66 = *(_QWORD *)&v28[v65];
    *(_QWORD *)&v27[v65] = v66;
    v67 = v29[22];
    v68 = *(_QWORD *)&v28[v67];
    *(_QWORD *)&v27[v67] = v68;
    v69 = v80[8];
    *(_OWORD *)((char *)a1 + v80[7]) = *(_OWORD *)((char *)v79 + v80[7]);
    *((_BYTE *)a1 + v69) = *((_BYTE *)v79 + v69);
    v70 = v80[9];
    v81 = (char *)a1 + v70;
    v71 = (char *)v79 + v70;
    v72 = type metadata accessor for ColorScheme(0);
    v73 = *(void (**)(char *, char *, uint64_t, __n128))(*(_QWORD *)(v72 - 8) + 16);
    swift_retain(v51);
    v74 = v55;
    swift_bridgeObjectRetain(v57);
    swift_bridgeObjectRetain(v64);
    swift_bridgeObjectRetain(v66);
    v75 = swift_bridgeObjectRetain(v68);
    v73(v81, v71, v72, v75);
  }
  return a1;
}

uint64_t sub_100073FC4(_QWORD *a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  void (*v8)(char *, uint64_t);
  uint64_t v9;
  char *v10;
  int *v11;
  char *v12;
  uint64_t v13;
  void (*v14)(char *, uint64_t);
  char *v15;
  uint64_t v16;

  v4 = sub_10000527C(&qword_1000A4FC0);
  if (swift_getEnumCaseMultiPayload(a1, v4) == 1)
  {
    v5 = type metadata accessor for WidgetRenderingMode(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(a1, v5);
  }
  else
  {
    swift_release(*a1);
  }
  sub_10003561C(*(_QWORD *)((char *)a1 + a2[5]), *((_BYTE *)a1 + a2[5] + 8));
  v6 = (char *)a1 + a2[6];
  v7 = type metadata accessor for UUID(0);
  v8 = *(void (**)(char *, uint64_t))(*(_QWORD *)(v7 - 8) + 8);
  v8(v6, v7);
  v9 = type metadata accessor for AccessoryAndSceneEntity(0);
  v8(&v6[*(int *)(v9 + 20)], v7);
  v10 = &v6[*(int *)(v9 + 24)];
  v8(v10, v7);
  v11 = (int *)type metadata accessor for WidgetTileInfo(0);
  v8(&v10[v11[5]], v7);
  swift_bridgeObjectRelease(*(_QWORD *)&v10[v11[6] + 8]);
  swift_bridgeObjectRelease(*(_QWORD *)&v10[v11[7] + 8]);
  swift_bridgeObjectRelease(*(_QWORD *)&v10[v11[8] + 8]);
  swift_bridgeObjectRelease(*(_QWORD *)&v10[v11[9] + 8]);
  v12 = &v10[v11[10]];
  v13 = type metadata accessor for StaticRenderingMode(0);
  v14 = *(void (**)(char *, uint64_t))(*(_QWORD *)(v13 - 8) + 8);
  v14(v12, v13);
  v14(&v10[v11[11]], v13);
  swift_release(*(_QWORD *)&v10[v11[12]]);

  swift_bridgeObjectRelease(*(_QWORD *)&v10[v11[15]]);
  swift_bridgeObjectRelease(*(_QWORD *)&v10[v11[19] + 8]);
  swift_bridgeObjectRelease(*(_QWORD *)&v10[v11[21]]);
  swift_bridgeObjectRelease(*(_QWORD *)&v10[v11[22]]);
  v15 = (char *)a1 + a2[9];
  v16 = type metadata accessor for ColorScheme(0);
  return (*(uint64_t (**)(char *, uint64_t))(*(_QWORD *)(v16 - 8) + 8))(v15, v16);
}

_QWORD *sub_1000741B0(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  char *v14;
  _QWORD *v15;
  char *v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  void (*v23)(uint64_t, char *, uint64_t);
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  int *v28;
  uint64_t v29;
  _QWORD *v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  void (*v48)(uint64_t, char *, uint64_t, __n128);
  __n128 v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  void *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  _QWORD *v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  uint64_t v73;
  void (*v74)(uint64_t, char *, uint64_t, __n128);
  id v75;
  __n128 v76;
  char *v78;
  _QWORD *v79;
  int *v80;
  _QWORD *v81;

  v6 = sub_10000527C(&qword_1000A4FC0);
  if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
  {
    v7 = type metadata accessor for WidgetRenderingMode(0);
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = a1;
    v9 = v6;
    v10 = 1;
  }
  else
  {
    v11 = *a2;
    *a1 = *a2;
    swift_retain(v11);
    v8 = a1;
    v9 = v6;
    v10 = 0;
  }
  swift_storeEnumTagMultiPayload(v8, v9, v10);
  v12 = a3[5];
  v13 = a1;
  v14 = (char *)a1 + v12;
  v15 = v13;
  v81 = v13;
  v16 = (char *)a2 + v12;
  v17 = *(_QWORD *)v16;
  v18 = v16[8];
  sub_100035568(*(_QWORD *)v16, v18);
  *(_QWORD *)v14 = v17;
  v14[8] = v18;
  v19 = a3[6];
  v20 = (uint64_t)v15 + v19;
  v21 = (char *)a2 + v19;
  v22 = type metadata accessor for UUID(0);
  v23 = *(void (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(v22 - 8) + 16);
  v23(v20, v21, v22);
  v24 = type metadata accessor for AccessoryAndSceneEntity(0);
  v23(v20 + *(int *)(v24 + 20), &v21[*(int *)(v24 + 20)], v22);
  v25 = *(int *)(v24 + 24);
  v26 = v20 + v25;
  v27 = &v21[v25];
  v23(v26, v27, v22);
  v28 = (int *)type metadata accessor for WidgetTileInfo(0);
  v23(v26 + v28[5], &v27[v28[5]], v22);
  v29 = v28[6];
  v30 = (_QWORD *)(v26 + v29);
  v31 = &v27[v29];
  v32 = *((_QWORD *)v31 + 1);
  *v30 = *(_QWORD *)v31;
  v30[1] = v32;
  v33 = v28[7];
  v34 = (_QWORD *)(v26 + v33);
  v35 = &v27[v33];
  v36 = *((_QWORD *)v35 + 1);
  *v34 = *(_QWORD *)v35;
  v34[1] = v36;
  v37 = v28[8];
  v38 = (_QWORD *)(v26 + v37);
  v39 = &v27[v37];
  v40 = *((_QWORD *)v39 + 1);
  *v38 = *(_QWORD *)v39;
  v38[1] = v40;
  v41 = v28[9];
  v42 = (_QWORD *)(v26 + v41);
  v43 = &v27[v41];
  v44 = *((_QWORD *)v43 + 1);
  *v42 = *(_QWORD *)v43;
  v42[1] = v44;
  v45 = v28[10];
  v80 = a3;
  v46 = v26 + v45;
  v78 = &v27[v45];
  v79 = a2;
  v47 = type metadata accessor for StaticRenderingMode(0);
  v48 = *(void (**)(uint64_t, char *, uint64_t, __n128))(*(_QWORD *)(v47 - 8) + 16);
  swift_bridgeObjectRetain(v32);
  swift_bridgeObjectRetain(v36);
  swift_bridgeObjectRetain(v40);
  v49 = swift_bridgeObjectRetain(v44);
  v48(v46, v78, v47, v49);
  ((void (*)(uint64_t, char *, uint64_t))v48)(v26 + v28[11], &v27[v28[11]], v47);
  v50 = v28[12];
  v51 = *(_QWORD *)&v27[v50];
  *(_QWORD *)(v26 + v50) = v51;
  *(_BYTE *)(v26 + v28[13]) = v27[v28[13]];
  v52 = v28[14];
  v53 = v26 + v52;
  v54 = &v27[v52];
  v55 = *(void **)v54;
  LOBYTE(v54) = v54[8];
  *(_QWORD *)v53 = v55;
  *(_BYTE *)(v53 + 8) = (_BYTE)v54;
  v56 = v28[15];
  v57 = *(_QWORD *)&v27[v56];
  *(_QWORD *)(v26 + v56) = v57;
  *(_BYTE *)(v26 + v28[16]) = v27[v28[16]];
  *(_BYTE *)(v26 + v28[17]) = v27[v28[17]];
  v58 = v28[18];
  v59 = v26 + v58;
  v60 = &v27[v58];
  *(_QWORD *)v59 = *(_QWORD *)v60;
  *(_BYTE *)(v59 + 8) = v60[8];
  v61 = v28[19];
  v62 = (_QWORD *)(v26 + v61);
  v63 = &v27[v61];
  v64 = *((_QWORD *)v63 + 1);
  *v62 = *(_QWORD *)v63;
  v62[1] = v64;
  *(_BYTE *)(v26 + v28[20]) = v27[v28[20]];
  v65 = v28[21];
  v66 = *(_QWORD *)&v27[v65];
  *(_QWORD *)(v26 + v65) = v66;
  v67 = v28[22];
  v68 = *(_QWORD *)&v27[v67];
  *(_QWORD *)(v26 + v67) = v68;
  v69 = v80[8];
  *(_OWORD *)((char *)v81 + v80[7]) = *(_OWORD *)((char *)v79 + v80[7]);
  *((_BYTE *)v81 + v69) = *((_BYTE *)v79 + v69);
  v70 = v80[9];
  v71 = (uint64_t)v81 + v70;
  v72 = (char *)v79 + v70;
  v73 = type metadata accessor for ColorScheme(0);
  v74 = *(void (**)(uint64_t, char *, uint64_t, __n128))(*(_QWORD *)(v73 - 8) + 16);
  swift_retain(v51);
  v75 = v55;
  swift_bridgeObjectRetain(v57);
  swift_bridgeObjectRetain(v64);
  swift_bridgeObjectRetain(v66);
  v76 = swift_bridgeObjectRetain(v68);
  v74(v71, v72, v73, v76);
  return v81;
}

_QWORD *sub_100074518(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  void (*v23)(char *, char *, uint64_t);
  uint64_t v24;
  uint64_t v25;
  char *v26;
  char *v27;
  int *v28;
  uint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  char *v51;
  uint64_t v52;
  void (*v53)(char *, char *, uint64_t);
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  char *v59;
  void *v60;
  void *v61;
  id v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  _QWORD *v82;
  _QWORD *v83;
  uint64_t v84;
  char *v85;
  char *v86;
  uint64_t v87;

  if (a1 != a2)
  {
    sub_100014EFC((uint64_t)a1, &qword_1000A4FC0);
    v6 = sub_10000527C(&qword_1000A4FC0);
    if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
    {
      v7 = type metadata accessor for WidgetRenderingMode(0);
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
      v8 = a1;
      v9 = v6;
      v10 = 1;
    }
    else
    {
      v11 = *a2;
      *a1 = *a2;
      swift_retain(v11);
      v8 = a1;
      v9 = v6;
      v10 = 0;
    }
    swift_storeEnumTagMultiPayload(v8, v9, v10);
  }
  v12 = a3[5];
  v13 = (char *)a1 + v12;
  v14 = (char *)a2 + v12;
  v15 = *(_QWORD *)v14;
  v16 = v14[8];
  sub_100035568(*(_QWORD *)v14, v16);
  v17 = *(_QWORD *)v13;
  v18 = v13[8];
  *(_QWORD *)v13 = v15;
  v13[8] = v16;
  sub_10003561C(v17, v18);
  v19 = a3[6];
  v20 = (char *)a1 + v19;
  v21 = (char *)a2 + v19;
  v22 = type metadata accessor for UUID(0);
  v23 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v22 - 8) + 24);
  v23(v20, v21, v22);
  v24 = type metadata accessor for AccessoryAndSceneEntity(0);
  v23(&v20[*(int *)(v24 + 20)], &v21[*(int *)(v24 + 20)], v22);
  v25 = *(int *)(v24 + 24);
  v26 = &v20[v25];
  v27 = &v21[v25];
  v23(v26, v27, v22);
  v28 = (int *)type metadata accessor for WidgetTileInfo(0);
  v23(&v26[v28[5]], &v27[v28[5]], v22);
  v29 = v28[6];
  v30 = &v26[v29];
  v31 = &v27[v29];
  *(_QWORD *)v30 = *(_QWORD *)v31;
  v32 = *((_QWORD *)v31 + 1);
  v33 = *((_QWORD *)v30 + 1);
  *((_QWORD *)v30 + 1) = v32;
  swift_bridgeObjectRetain(v32);
  swift_bridgeObjectRelease(v33);
  v34 = v28[7];
  v35 = &v26[v34];
  v36 = &v27[v34];
  *(_QWORD *)v35 = *(_QWORD *)v36;
  v37 = *((_QWORD *)v36 + 1);
  v38 = *((_QWORD *)v35 + 1);
  *((_QWORD *)v35 + 1) = v37;
  swift_bridgeObjectRetain(v37);
  swift_bridgeObjectRelease(v38);
  v39 = v28[8];
  v40 = &v26[v39];
  v41 = &v27[v39];
  *(_QWORD *)v40 = *(_QWORD *)v41;
  v42 = *((_QWORD *)v41 + 1);
  v43 = *((_QWORD *)v40 + 1);
  *((_QWORD *)v40 + 1) = v42;
  swift_bridgeObjectRetain(v42);
  swift_bridgeObjectRelease(v43);
  v44 = v28[9];
  v45 = &v26[v44];
  v46 = &v27[v44];
  *(_QWORD *)v45 = *(_QWORD *)v46;
  v47 = *((_QWORD *)v46 + 1);
  v48 = *((_QWORD *)v45 + 1);
  *((_QWORD *)v45 + 1) = v47;
  swift_bridgeObjectRetain(v47);
  swift_bridgeObjectRelease(v48);
  v49 = v28[10];
  v50 = &v26[v49];
  v51 = &v27[v49];
  v52 = type metadata accessor for StaticRenderingMode(0);
  v53 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v52 - 8) + 24);
  v53(v50, v51, v52);
  v53(&v26[v28[11]], &v27[v28[11]], v52);
  v54 = v28[12];
  v55 = *(_QWORD *)&v27[v54];
  v56 = *(_QWORD *)&v26[v54];
  *(_QWORD *)&v26[v54] = v55;
  swift_retain(v55);
  swift_release(v56);
  v26[v28[13]] = v27[v28[13]];
  v57 = v28[14];
  v58 = &v26[v57];
  v59 = &v27[v57];
  v60 = *(void **)v59;
  LOBYTE(v59) = v59[8];
  v61 = *(void **)v58;
  *(_QWORD *)v58 = v60;
  v58[8] = (char)v59;
  v62 = v60;

  v63 = v28[15];
  v64 = *(_QWORD *)&v27[v63];
  v65 = *(_QWORD *)&v26[v63];
  *(_QWORD *)&v26[v63] = v64;
  swift_bridgeObjectRetain(v64);
  swift_bridgeObjectRelease(v65);
  v26[v28[16]] = v27[v28[16]];
  v26[v28[17]] = v27[v28[17]];
  v66 = v28[18];
  v67 = &v26[v66];
  v68 = &v27[v66];
  v69 = *(_QWORD *)v68;
  v67[8] = v68[8];
  *(_QWORD *)v67 = v69;
  v70 = v28[19];
  v71 = &v26[v70];
  v72 = &v27[v70];
  *(_QWORD *)v71 = *(_QWORD *)v72;
  v73 = *((_QWORD *)v72 + 1);
  v74 = *((_QWORD *)v71 + 1);
  *((_QWORD *)v71 + 1) = v73;
  swift_bridgeObjectRetain(v73);
  swift_bridgeObjectRelease(v74);
  v26[v28[20]] = v27[v28[20]];
  v75 = v28[21];
  v76 = *(_QWORD *)&v27[v75];
  v77 = *(_QWORD *)&v26[v75];
  *(_QWORD *)&v26[v75] = v76;
  swift_bridgeObjectRetain(v76);
  swift_bridgeObjectRelease(v77);
  v78 = v28[22];
  v79 = *(_QWORD *)&v27[v78];
  v80 = *(_QWORD *)&v26[v78];
  *(_QWORD *)&v26[v78] = v79;
  swift_bridgeObjectRetain(v79);
  swift_bridgeObjectRelease(v80);
  v81 = a3[7];
  v82 = (_QWORD *)((char *)a1 + v81);
  v83 = (_QWORD *)((char *)a2 + v81);
  *v82 = *v83;
  v82[1] = v83[1];
  *((_BYTE *)a1 + a3[8]) = *((_BYTE *)a2 + a3[8]);
  v84 = a3[9];
  v85 = (char *)a1 + v84;
  v86 = (char *)a2 + v84;
  v87 = type metadata accessor for ColorScheme(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v87 - 8) + 24))(v85, v86, v87);
  return a1;
}

char *sub_100074900(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  char *v13;
  uint64_t v14;
  void (*v15)(char *, char *, uint64_t);
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  int *v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  void (*v25)(char *, char *, uint64_t);
  uint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;

  v6 = sub_10000527C(&qword_1000A4FC0);
  if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
  {
    v7 = type metadata accessor for WidgetRenderingMode(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a1, a2, v7);
    swift_storeEnumTagMultiPayload(a1, v6, 1);
  }
  else
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
  }
  v8 = a3[5];
  v9 = a3[6];
  v10 = &a1[v8];
  v11 = &a2[v8];
  *(_QWORD *)v10 = *(_QWORD *)v11;
  v10[8] = v11[8];
  v12 = &a1[v9];
  v13 = &a2[v9];
  v14 = type metadata accessor for UUID(0);
  v15 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v14 - 8) + 32);
  v15(v12, v13, v14);
  v16 = type metadata accessor for AccessoryAndSceneEntity(0);
  v15(&v12[*(int *)(v16 + 20)], &v13[*(int *)(v16 + 20)], v14);
  v17 = *(int *)(v16 + 24);
  v18 = &v12[v17];
  v19 = &v13[v17];
  v15(v18, v19, v14);
  v20 = (int *)type metadata accessor for WidgetTileInfo(0);
  v15(&v18[v20[5]], &v19[v20[5]], v14);
  *(_OWORD *)&v18[v20[6]] = *(_OWORD *)&v19[v20[6]];
  *(_OWORD *)&v18[v20[7]] = *(_OWORD *)&v19[v20[7]];
  *(_OWORD *)&v18[v20[8]] = *(_OWORD *)&v19[v20[8]];
  *(_OWORD *)&v18[v20[9]] = *(_OWORD *)&v19[v20[9]];
  v21 = v20[10];
  v22 = &v18[v21];
  v23 = &v19[v21];
  v24 = type metadata accessor for StaticRenderingMode(0);
  v25 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v24 - 8) + 32);
  v25(v22, v23, v24);
  v25(&v18[v20[11]], &v19[v20[11]], v24);
  *(_QWORD *)&v18[v20[12]] = *(_QWORD *)&v19[v20[12]];
  v18[v20[13]] = v19[v20[13]];
  v26 = v20[14];
  v27 = &v18[v26];
  v28 = &v19[v26];
  *(_QWORD *)v27 = *(_QWORD *)v28;
  v27[8] = v28[8];
  *(_QWORD *)&v18[v20[15]] = *(_QWORD *)&v19[v20[15]];
  v18[v20[16]] = v19[v20[16]];
  v18[v20[17]] = v19[v20[17]];
  v29 = v20[18];
  v30 = &v18[v29];
  v31 = &v19[v29];
  *(_QWORD *)v30 = *(_QWORD *)v31;
  v30[8] = v31[8];
  *(_OWORD *)&v18[v20[19]] = *(_OWORD *)&v19[v20[19]];
  v18[v20[20]] = v19[v20[20]];
  *(_QWORD *)&v18[v20[21]] = *(_QWORD *)&v19[v20[21]];
  *(_QWORD *)&v18[v20[22]] = *(_QWORD *)&v19[v20[22]];
  v32 = a3[8];
  *(_OWORD *)&a1[a3[7]] = *(_OWORD *)&a2[a3[7]];
  a1[v32] = a2[v32];
  v33 = a3[9];
  v34 = &a1[v33];
  v35 = &a2[v33];
  v36 = type metadata accessor for ColorScheme(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v36 - 8) + 32))(v34, v35, v36);
  return a1;
}

char *sub_100074BB0(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  void (*v18)(char *, char *, uint64_t);
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  int *v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  char *v50;
  uint64_t v51;
  void (*v52)(char *, char *, uint64_t);
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  char *v57;
  uint64_t v58;
  void *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  char *v64;
  uint64_t v65;
  char *v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  char *v78;
  uint64_t v79;

  if (a1 != a2)
  {
    sub_100014EFC((uint64_t)a1, &qword_1000A4FC0);
    v6 = sub_10000527C(&qword_1000A4FC0);
    if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
    {
      v7 = type metadata accessor for WidgetRenderingMode(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a1, a2, v7);
      swift_storeEnumTagMultiPayload(a1, v6, 1);
    }
    else
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
    }
  }
  v8 = a3[5];
  v9 = &a1[v8];
  v10 = &a2[v8];
  v11 = *(_QWORD *)v10;
  LOBYTE(v10) = v10[8];
  v12 = *(_QWORD *)v9;
  v13 = v9[8];
  *(_QWORD *)v9 = v11;
  v9[8] = (char)v10;
  sub_10003561C(v12, v13);
  v14 = a3[6];
  v15 = &a1[v14];
  v16 = &a2[v14];
  v17 = type metadata accessor for UUID(0);
  v18 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v17 - 8) + 40);
  v18(v15, v16, v17);
  v19 = type metadata accessor for AccessoryAndSceneEntity(0);
  v18(&v15[*(int *)(v19 + 20)], &v16[*(int *)(v19 + 20)], v17);
  v20 = *(int *)(v19 + 24);
  v21 = &v15[v20];
  v22 = &v16[v20];
  v18(v21, v22, v17);
  v23 = (int *)type metadata accessor for WidgetTileInfo(0);
  v18(&v21[v23[5]], &v22[v23[5]], v17);
  v24 = v23[6];
  v25 = &v21[v24];
  v26 = &v22[v24];
  v28 = *(_QWORD *)v26;
  v27 = *((_QWORD *)v26 + 1);
  v29 = *((_QWORD *)v25 + 1);
  *(_QWORD *)v25 = v28;
  *((_QWORD *)v25 + 1) = v27;
  swift_bridgeObjectRelease(v29);
  v30 = v23[7];
  v31 = &v21[v30];
  v32 = &v22[v30];
  v34 = *(_QWORD *)v32;
  v33 = *((_QWORD *)v32 + 1);
  v35 = *((_QWORD *)v31 + 1);
  *(_QWORD *)v31 = v34;
  *((_QWORD *)v31 + 1) = v33;
  swift_bridgeObjectRelease(v35);
  v36 = v23[8];
  v37 = &v21[v36];
  v38 = &v22[v36];
  v40 = *(_QWORD *)v38;
  v39 = *((_QWORD *)v38 + 1);
  v41 = *((_QWORD *)v37 + 1);
  *(_QWORD *)v37 = v40;
  *((_QWORD *)v37 + 1) = v39;
  swift_bridgeObjectRelease(v41);
  v42 = v23[9];
  v43 = &v21[v42];
  v44 = &v22[v42];
  v46 = *(_QWORD *)v44;
  v45 = *((_QWORD *)v44 + 1);
  v47 = *((_QWORD *)v43 + 1);
  *(_QWORD *)v43 = v46;
  *((_QWORD *)v43 + 1) = v45;
  swift_bridgeObjectRelease(v47);
  v48 = v23[10];
  v49 = &v21[v48];
  v50 = &v22[v48];
  v51 = type metadata accessor for StaticRenderingMode(0);
  v52 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v51 - 8) + 40);
  v52(v49, v50, v51);
  v52(&v21[v23[11]], &v22[v23[11]], v51);
  v53 = v23[12];
  v54 = *(_QWORD *)&v21[v53];
  *(_QWORD *)&v21[v53] = *(_QWORD *)&v22[v53];
  swift_release(v54);
  v21[v23[13]] = v22[v23[13]];
  v55 = v23[14];
  v56 = &v21[v55];
  v57 = &v22[v55];
  v58 = *(_QWORD *)v57;
  LOBYTE(v57) = v57[8];
  v59 = *(void **)v56;
  *(_QWORD *)v56 = v58;
  v56[8] = (char)v57;

  v60 = v23[15];
  v61 = *(_QWORD *)&v21[v60];
  *(_QWORD *)&v21[v60] = *(_QWORD *)&v22[v60];
  swift_bridgeObjectRelease(v61);
  v21[v23[16]] = v22[v23[16]];
  v21[v23[17]] = v22[v23[17]];
  v62 = v23[18];
  v63 = &v21[v62];
  v64 = &v22[v62];
  v63[8] = v64[8];
  *(_QWORD *)v63 = *(_QWORD *)v64;
  v65 = v23[19];
  v66 = &v21[v65];
  v67 = &v22[v65];
  v69 = *(_QWORD *)v67;
  v68 = *((_QWORD *)v67 + 1);
  v70 = *((_QWORD *)v66 + 1);
  *(_QWORD *)v66 = v69;
  *((_QWORD *)v66 + 1) = v68;
  swift_bridgeObjectRelease(v70);
  v21[v23[20]] = v22[v23[20]];
  v71 = v23[21];
  v72 = *(_QWORD *)&v21[v71];
  *(_QWORD *)&v21[v71] = *(_QWORD *)&v22[v71];
  swift_bridgeObjectRelease(v72);
  v73 = v23[22];
  v74 = *(_QWORD *)&v21[v73];
  *(_QWORD *)&v21[v73] = *(_QWORD *)&v22[v73];
  swift_bridgeObjectRelease(v74);
  v75 = a3[8];
  *(_OWORD *)&a1[a3[7]] = *(_OWORD *)&a2[a3[7]];
  a1[v75] = a2[v75];
  v76 = a3[9];
  v77 = &a1[v76];
  v78 = &a2[v76];
  v79 = type metadata accessor for ColorScheme(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v79 - 8) + 40))(v77, v78, v79);
  return a1;
}

uint64_t sub_100074F00(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100074F0C);
}

uint64_t sub_100074F0C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v6 = sub_10000527C(&qword_1000A5E88);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  if ((_DWORD)a2 == 254)
  {
    v9 = *(unsigned __int8 *)(a1 + a3[5] + 8);
    if (v9 > 1)
      return (v9 ^ 0xFF) + 1;
    else
      return 0;
  }
  else
  {
    v10 = type metadata accessor for AccessoryAndSceneEntity(0);
    v11 = *(_QWORD *)(v10 - 8);
    if (*(_DWORD *)(v11 + 84) == (_DWORD)a2)
    {
      v12 = v10;
      v13 = a3[6];
    }
    else
    {
      v12 = type metadata accessor for ColorScheme(0);
      v11 = *(_QWORD *)(v12 - 8);
      v13 = a3[9];
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v11 + 48))(a1 + v13, a2, v12);
  }
}

uint64_t sub_100074FD8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100074FE4);
}

uint64_t sub_100074FE4(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  result = sub_10000527C(&qword_1000A5E88);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = result;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    if (a3 == 254)
    {
      *(_BYTE *)(a1 + a4[5] + 8) = -(char)a2;
      return result;
    }
    v13 = type metadata accessor for AccessoryAndSceneEntity(0);
    v14 = *(_QWORD *)(v13 - 8);
    if (*(_DWORD *)(v14 + 84) == a3)
    {
      v10 = v13;
      v15 = a4[6];
    }
    else
    {
      v10 = type metadata accessor for ColorScheme(0);
      v14 = *(_QWORD *)(v10 - 8);
      v15 = a4[9];
    }
    v12 = a1 + v15;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
  }
  return v11(v12, a2, a2, v10);
}

void sub_1000750B0(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  _QWORD v8[6];

  sub_100048D10(319, (unint64_t *)&qword_1000A5F00, (uint64_t (*)(uint64_t))&type metadata accessor for WidgetRenderingMode);
  if (v3 <= 0x3F)
  {
    v8[0] = *(_QWORD *)(v2 - 8) + 64;
    v8[1] = "\t";
    v4 = type metadata accessor for AccessoryAndSceneEntity(319);
    if (v5 <= 0x3F)
    {
      v8[2] = *(_QWORD *)(v4 - 8) + 64;
      v8[3] = &unk_100089800;
      v8[4] = &unk_1000897E8;
      v6 = type metadata accessor for ColorScheme(319);
      if (v7 <= 0x3F)
      {
        v8[5] = *(_QWORD *)(v6 - 8) + 64;
        swift_initStructMetadata(a1, 256, 6, v8, a1 + 16);
      }
    }
  }
}

unint64_t sub_100075180()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[4];

  result = qword_1000A71B8;
  if (!qword_1000A71B8)
  {
    v1 = sub_1000052BC(&qword_1000A71C0);
    v2[0] = sub_1000052BC(&qword_1000A6098);
    v2[1] = type metadata accessor for NormalTileGutsViewToggleStyle(255);
    v2[2] = sub_1000229D8(&qword_1000A6100, &qword_1000A6098, (uint64_t)&protocol conformance descriptor for Toggle<A>);
    v2[3] = sub_100008C7C(&qword_1000A6FC0, type metadata accessor for NormalTileGutsViewToggleStyle, (uint64_t)&unk_1000899B0);
    swift_getOpaqueTypeConformance2(v2, &opaque type descriptor for <<opaque return type of View.toggleStyle<A>(_:)>>, 1);
    sub_1000229D8(&qword_1000A6FC8, &qword_1000A6F88, (uint64_t)&protocol conformance descriptor for Link<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000A71B8);
  }
  return result;
}

uint64_t sub_100075288(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_10008CEFC, 1);
}

uint64_t sub_100075298(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_10008CED4, 1);
}

uint64_t sub_1000752A8(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_10008CEAC, 1);
}

uint64_t type metadata accessor for RectangleTileView(uint64_t a1)
{
  return sub_100050B64(a1, qword_1000A7258, (uint64_t)&nominal type descriptor for RectangleTileView);
}

_QWORD *sub_1000752D4(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  void (*v24)(char *, char *, uint64_t);
  uint64_t v25;
  uint64_t v26;
  char *v27;
  char *v28;
  int *v29;
  uint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  void (*v48)(char *, char *, uint64_t, __n128);
  __n128 v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  char *v54;
  void *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  char *v60;
  uint64_t v61;
  char *v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  id v70;
  char *v72;
  char *v73;
  _QWORD *v74;
  uint64_t v75;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v12 = *a2;
    *a1 = *a2;
    a1 = (_QWORD *)(v12 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v12);
  }
  else
  {
    v7 = sub_10000527C(&qword_1000A4FC0);
    if (swift_getEnumCaseMultiPayload(a2, v7) == 1)
    {
      v8 = type metadata accessor for WidgetRenderingMode(0);
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(a1, a2, v8);
      v9 = a1;
      v10 = v7;
      v11 = 1;
    }
    else
    {
      v13 = *a2;
      *a1 = *a2;
      swift_retain(v13);
      v9 = a1;
      v10 = v7;
      v11 = 0;
    }
    swift_storeEnumTagMultiPayload(v9, v10, v11);
    v14 = *(int *)(a3 + 20);
    v15 = a3;
    v75 = a3;
    v16 = (char *)a1 + v14;
    v17 = (char *)a2 + v14;
    v18 = *(_QWORD *)v17;
    v19 = v17[8];
    sub_100035568(*(_QWORD *)v17, v19);
    *(_QWORD *)v16 = v18;
    v16[8] = v19;
    v20 = *(int *)(v15 + 24);
    v21 = (char *)a1 + v20;
    v22 = (char *)a2 + v20;
    v23 = type metadata accessor for UUID(0);
    v24 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v23 - 8) + 16);
    v24(v21, v22, v23);
    v25 = type metadata accessor for AccessoryAndSceneEntity(0);
    v24(&v21[*(int *)(v25 + 20)], &v22[*(int *)(v25 + 20)], v23);
    v26 = *(int *)(v25 + 24);
    v27 = &v21[v26];
    v28 = &v22[v26];
    v24(v27, v28, v23);
    v29 = (int *)type metadata accessor for WidgetTileInfo(0);
    v24(&v27[v29[5]], &v28[v29[5]], v23);
    v30 = v29[6];
    v31 = &v27[v30];
    v32 = &v28[v30];
    v33 = *((_QWORD *)v32 + 1);
    *(_QWORD *)v31 = *(_QWORD *)v32;
    *((_QWORD *)v31 + 1) = v33;
    v34 = v29[7];
    v35 = &v27[v34];
    v36 = &v28[v34];
    v37 = *((_QWORD *)v36 + 1);
    *(_QWORD *)v35 = *(_QWORD *)v36;
    *((_QWORD *)v35 + 1) = v37;
    v38 = v29[8];
    v39 = &v27[v38];
    v40 = &v28[v38];
    v41 = *((_QWORD *)v40 + 1);
    *(_QWORD *)v39 = *(_QWORD *)v40;
    *((_QWORD *)v39 + 1) = v41;
    v42 = v29[9];
    v43 = &v27[v42];
    v44 = &v28[v42];
    v45 = *((_QWORD *)v44 + 1);
    *(_QWORD *)v43 = *(_QWORD *)v44;
    *((_QWORD *)v43 + 1) = v45;
    v46 = v29[10];
    v72 = &v28[v46];
    v73 = &v27[v46];
    v47 = type metadata accessor for StaticRenderingMode(0);
    v74 = a2;
    v48 = *(void (**)(char *, char *, uint64_t, __n128))(*(_QWORD *)(v47 - 8) + 16);
    swift_bridgeObjectRetain(v33);
    swift_bridgeObjectRetain(v37);
    swift_bridgeObjectRetain(v41);
    v49 = swift_bridgeObjectRetain(v45);
    v48(v73, v72, v47, v49);
    ((void (*)(char *, char *, uint64_t))v48)(&v27[v29[11]], &v28[v29[11]], v47);
    v50 = v29[12];
    v51 = *(_QWORD *)&v28[v50];
    *(_QWORD *)&v27[v50] = v51;
    v27[v29[13]] = v28[v29[13]];
    v52 = v29[14];
    v53 = &v27[v52];
    v54 = &v28[v52];
    v55 = *(void **)v54;
    LOBYTE(v54) = v54[8];
    *(_QWORD *)v53 = v55;
    v53[8] = (char)v54;
    v56 = v29[15];
    v57 = *(_QWORD *)&v28[v56];
    *(_QWORD *)&v27[v56] = v57;
    v27[v29[16]] = v28[v29[16]];
    v27[v29[17]] = v28[v29[17]];
    v58 = v29[18];
    v59 = &v27[v58];
    v60 = &v28[v58];
    *(_QWORD *)v59 = *(_QWORD *)v60;
    v59[8] = v60[8];
    v61 = v29[19];
    v62 = &v27[v61];
    v63 = &v28[v61];
    v64 = *((_QWORD *)v63 + 1);
    *(_QWORD *)v62 = *(_QWORD *)v63;
    *((_QWORD *)v62 + 1) = v64;
    v27[v29[20]] = v28[v29[20]];
    v65 = v29[21];
    v66 = *(_QWORD *)&v28[v65];
    *(_QWORD *)&v27[v65] = v66;
    v67 = v29[22];
    v68 = *(_QWORD *)&v28[v67];
    *(_QWORD *)&v27[v67] = v68;
    v69 = *(int *)(v75 + 32);
    *(_OWORD *)((char *)a1 + *(int *)(v75 + 28)) = *(_OWORD *)((char *)v74 + *(int *)(v75 + 28));
    *((_BYTE *)a1 + v69) = *((_BYTE *)v74 + v69);
    swift_retain(v51);
    v70 = v55;
    swift_bridgeObjectRetain(v57);
    swift_bridgeObjectRetain(v64);
    swift_bridgeObjectRetain(v66);
    swift_bridgeObjectRetain(v68);
  }
  return a1;
}

uint64_t sub_100075620(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  void (*v8)(char *, uint64_t);
  uint64_t v9;
  char *v10;
  int *v11;
  char *v12;
  uint64_t v13;
  void (*v14)(char *, uint64_t);

  v4 = sub_10000527C(&qword_1000A4FC0);
  if (swift_getEnumCaseMultiPayload(a1, v4) == 1)
  {
    v5 = type metadata accessor for WidgetRenderingMode(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(a1, v5);
  }
  else
  {
    swift_release(*a1);
  }
  sub_10003561C(*(_QWORD *)((char *)a1 + *(int *)(a2 + 20)), *((_BYTE *)a1 + *(int *)(a2 + 20) + 8));
  v6 = (char *)a1 + *(int *)(a2 + 24);
  v7 = type metadata accessor for UUID(0);
  v8 = *(void (**)(char *, uint64_t))(*(_QWORD *)(v7 - 8) + 8);
  v8(v6, v7);
  v9 = type metadata accessor for AccessoryAndSceneEntity(0);
  v8(&v6[*(int *)(v9 + 20)], v7);
  v10 = &v6[*(int *)(v9 + 24)];
  v8(v10, v7);
  v11 = (int *)type metadata accessor for WidgetTileInfo(0);
  v8(&v10[v11[5]], v7);
  swift_bridgeObjectRelease(*(_QWORD *)&v10[v11[6] + 8]);
  swift_bridgeObjectRelease(*(_QWORD *)&v10[v11[7] + 8]);
  swift_bridgeObjectRelease(*(_QWORD *)&v10[v11[8] + 8]);
  swift_bridgeObjectRelease(*(_QWORD *)&v10[v11[9] + 8]);
  v12 = &v10[v11[10]];
  v13 = type metadata accessor for StaticRenderingMode(0);
  v14 = *(void (**)(char *, uint64_t))(*(_QWORD *)(v13 - 8) + 8);
  v14(v12, v13);
  v14(&v10[v11[11]], v13);
  swift_release(*(_QWORD *)&v10[v11[12]]);

  swift_bridgeObjectRelease(*(_QWORD *)&v10[v11[15]]);
  swift_bridgeObjectRelease(*(_QWORD *)&v10[v11[19] + 8]);
  swift_bridgeObjectRelease(*(_QWORD *)&v10[v11[21]]);
  return swift_bridgeObjectRelease(*(_QWORD *)&v10[v11[22]]);
}

_QWORD *sub_1000757E0(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  char *v14;
  _QWORD *v15;
  char *v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  void (*v23)(uint64_t, char *, uint64_t);
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  int *v28;
  uint64_t v29;
  _QWORD *v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  void (*v48)(uint64_t, char *, uint64_t, __n128);
  __n128 v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  void *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  _QWORD *v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  id v70;
  char *v72;
  _QWORD *v73;
  uint64_t v74;
  _QWORD *v75;

  v6 = sub_10000527C(&qword_1000A4FC0);
  if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
  {
    v7 = type metadata accessor for WidgetRenderingMode(0);
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = a1;
    v9 = v6;
    v10 = 1;
  }
  else
  {
    v11 = *a2;
    *a1 = *a2;
    swift_retain(v11);
    v8 = a1;
    v9 = v6;
    v10 = 0;
  }
  swift_storeEnumTagMultiPayload(v8, v9, v10);
  v12 = *(int *)(a3 + 20);
  v13 = a1;
  v14 = (char *)a1 + v12;
  v15 = v13;
  v75 = v13;
  v16 = (char *)a2 + v12;
  v17 = *(_QWORD *)v16;
  v18 = v16[8];
  sub_100035568(*(_QWORD *)v16, v18);
  *(_QWORD *)v14 = v17;
  v14[8] = v18;
  v19 = *(int *)(a3 + 24);
  v20 = (uint64_t)v15 + v19;
  v21 = (char *)a2 + v19;
  v22 = type metadata accessor for UUID(0);
  v23 = *(void (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(v22 - 8) + 16);
  v23(v20, v21, v22);
  v24 = type metadata accessor for AccessoryAndSceneEntity(0);
  v23(v20 + *(int *)(v24 + 20), &v21[*(int *)(v24 + 20)], v22);
  v25 = *(int *)(v24 + 24);
  v26 = v20 + v25;
  v27 = &v21[v25];
  v23(v26, v27, v22);
  v28 = (int *)type metadata accessor for WidgetTileInfo(0);
  v23(v26 + v28[5], &v27[v28[5]], v22);
  v29 = v28[6];
  v30 = (_QWORD *)(v26 + v29);
  v31 = &v27[v29];
  v32 = *((_QWORD *)v31 + 1);
  *v30 = *(_QWORD *)v31;
  v30[1] = v32;
  v33 = v28[7];
  v34 = (_QWORD *)(v26 + v33);
  v35 = &v27[v33];
  v36 = *((_QWORD *)v35 + 1);
  *v34 = *(_QWORD *)v35;
  v34[1] = v36;
  v37 = v28[8];
  v38 = (_QWORD *)(v26 + v37);
  v39 = &v27[v37];
  v40 = *((_QWORD *)v39 + 1);
  *v38 = *(_QWORD *)v39;
  v38[1] = v40;
  v41 = v28[9];
  v42 = (_QWORD *)(v26 + v41);
  v43 = &v27[v41];
  v44 = *((_QWORD *)v43 + 1);
  *v42 = *(_QWORD *)v43;
  v42[1] = v44;
  v45 = v28[10];
  v74 = a3;
  v46 = v26 + v45;
  v72 = &v27[v45];
  v47 = type metadata accessor for StaticRenderingMode(0);
  v73 = a2;
  v48 = *(void (**)(uint64_t, char *, uint64_t, __n128))(*(_QWORD *)(v47 - 8) + 16);
  swift_bridgeObjectRetain(v32);
  swift_bridgeObjectRetain(v36);
  swift_bridgeObjectRetain(v40);
  v49 = swift_bridgeObjectRetain(v44);
  v48(v46, v72, v47, v49);
  ((void (*)(uint64_t, char *, uint64_t))v48)(v26 + v28[11], &v27[v28[11]], v47);
  v50 = v28[12];
  v51 = *(_QWORD *)&v27[v50];
  *(_QWORD *)(v26 + v50) = v51;
  *(_BYTE *)(v26 + v28[13]) = v27[v28[13]];
  v52 = v28[14];
  v53 = v26 + v52;
  v54 = &v27[v52];
  v55 = *(void **)v54;
  LOBYTE(v54) = v54[8];
  *(_QWORD *)v53 = v55;
  *(_BYTE *)(v53 + 8) = (_BYTE)v54;
  v56 = v28[15];
  v57 = *(_QWORD *)&v27[v56];
  *(_QWORD *)(v26 + v56) = v57;
  *(_BYTE *)(v26 + v28[16]) = v27[v28[16]];
  *(_BYTE *)(v26 + v28[17]) = v27[v28[17]];
  v58 = v28[18];
  v59 = v26 + v58;
  v60 = &v27[v58];
  *(_QWORD *)v59 = *(_QWORD *)v60;
  *(_BYTE *)(v59 + 8) = v60[8];
  v61 = v28[19];
  v62 = (_QWORD *)(v26 + v61);
  v63 = &v27[v61];
  v64 = *((_QWORD *)v63 + 1);
  *v62 = *(_QWORD *)v63;
  v62[1] = v64;
  *(_BYTE *)(v26 + v28[20]) = v27[v28[20]];
  v65 = v28[21];
  v66 = *(_QWORD *)&v27[v65];
  *(_QWORD *)(v26 + v65) = v66;
  v67 = v28[22];
  v68 = *(_QWORD *)&v27[v67];
  *(_QWORD *)(v26 + v67) = v68;
  v69 = *(int *)(v74 + 32);
  *(_OWORD *)((char *)v75 + *(int *)(v74 + 28)) = *(_OWORD *)((char *)v73 + *(int *)(v74 + 28));
  *((_BYTE *)v75 + v69) = *((_BYTE *)v73 + v69);
  swift_retain(v51);
  v70 = v55;
  swift_bridgeObjectRetain(v57);
  swift_bridgeObjectRetain(v64);
  swift_bridgeObjectRetain(v66);
  swift_bridgeObjectRetain(v68);
  return v75;
}

_QWORD *sub_100075B10(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  void (*v23)(char *, char *, uint64_t);
  uint64_t v24;
  uint64_t v25;
  char *v26;
  char *v27;
  int *v28;
  uint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  char *v51;
  uint64_t v52;
  void (*v53)(char *, char *, uint64_t);
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  char *v59;
  void *v60;
  void *v61;
  id v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  _QWORD *v82;
  _QWORD *v83;

  if (a1 != a2)
  {
    sub_100014EFC((uint64_t)a1, &qword_1000A4FC0);
    v6 = sub_10000527C(&qword_1000A4FC0);
    if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
    {
      v7 = type metadata accessor for WidgetRenderingMode(0);
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
      v8 = a1;
      v9 = v6;
      v10 = 1;
    }
    else
    {
      v11 = *a2;
      *a1 = *a2;
      swift_retain(v11);
      v8 = a1;
      v9 = v6;
      v10 = 0;
    }
    swift_storeEnumTagMultiPayload(v8, v9, v10);
  }
  v12 = a3[5];
  v13 = (char *)a1 + v12;
  v14 = (char *)a2 + v12;
  v15 = *(_QWORD *)v14;
  v16 = v14[8];
  sub_100035568(*(_QWORD *)v14, v16);
  v17 = *(_QWORD *)v13;
  v18 = v13[8];
  *(_QWORD *)v13 = v15;
  v13[8] = v16;
  sub_10003561C(v17, v18);
  v19 = a3[6];
  v20 = (char *)a1 + v19;
  v21 = (char *)a2 + v19;
  v22 = type metadata accessor for UUID(0);
  v23 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v22 - 8) + 24);
  v23(v20, v21, v22);
  v24 = type metadata accessor for AccessoryAndSceneEntity(0);
  v23(&v20[*(int *)(v24 + 20)], &v21[*(int *)(v24 + 20)], v22);
  v25 = *(int *)(v24 + 24);
  v26 = &v20[v25];
  v27 = &v21[v25];
  v23(v26, v27, v22);
  v28 = (int *)type metadata accessor for WidgetTileInfo(0);
  v23(&v26[v28[5]], &v27[v28[5]], v22);
  v29 = v28[6];
  v30 = &v26[v29];
  v31 = &v27[v29];
  *(_QWORD *)v30 = *(_QWORD *)v31;
  v32 = *((_QWORD *)v31 + 1);
  v33 = *((_QWORD *)v30 + 1);
  *((_QWORD *)v30 + 1) = v32;
  swift_bridgeObjectRetain(v32);
  swift_bridgeObjectRelease(v33);
  v34 = v28[7];
  v35 = &v26[v34];
  v36 = &v27[v34];
  *(_QWORD *)v35 = *(_QWORD *)v36;
  v37 = *((_QWORD *)v36 + 1);
  v38 = *((_QWORD *)v35 + 1);
  *((_QWORD *)v35 + 1) = v37;
  swift_bridgeObjectRetain(v37);
  swift_bridgeObjectRelease(v38);
  v39 = v28[8];
  v40 = &v26[v39];
  v41 = &v27[v39];
  *(_QWORD *)v40 = *(_QWORD *)v41;
  v42 = *((_QWORD *)v41 + 1);
  v43 = *((_QWORD *)v40 + 1);
  *((_QWORD *)v40 + 1) = v42;
  swift_bridgeObjectRetain(v42);
  swift_bridgeObjectRelease(v43);
  v44 = v28[9];
  v45 = &v26[v44];
  v46 = &v27[v44];
  *(_QWORD *)v45 = *(_QWORD *)v46;
  v47 = *((_QWORD *)v46 + 1);
  v48 = *((_QWORD *)v45 + 1);
  *((_QWORD *)v45 + 1) = v47;
  swift_bridgeObjectRetain(v47);
  swift_bridgeObjectRelease(v48);
  v49 = v28[10];
  v50 = &v26[v49];
  v51 = &v27[v49];
  v52 = type metadata accessor for StaticRenderingMode(0);
  v53 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v52 - 8) + 24);
  v53(v50, v51, v52);
  v53(&v26[v28[11]], &v27[v28[11]], v52);
  v54 = v28[12];
  v55 = *(_QWORD *)&v27[v54];
  v56 = *(_QWORD *)&v26[v54];
  *(_QWORD *)&v26[v54] = v55;
  swift_retain(v55);
  swift_release(v56);
  v26[v28[13]] = v27[v28[13]];
  v57 = v28[14];
  v58 = &v26[v57];
  v59 = &v27[v57];
  v60 = *(void **)v59;
  LOBYTE(v59) = v59[8];
  v61 = *(void **)v58;
  *(_QWORD *)v58 = v60;
  v58[8] = (char)v59;
  v62 = v60;

  v63 = v28[15];
  v64 = *(_QWORD *)&v27[v63];
  v65 = *(_QWORD *)&v26[v63];
  *(_QWORD *)&v26[v63] = v64;
  swift_bridgeObjectRetain(v64);
  swift_bridgeObjectRelease(v65);
  v26[v28[16]] = v27[v28[16]];
  v26[v28[17]] = v27[v28[17]];
  v66 = v28[18];
  v67 = &v26[v66];
  v68 = &v27[v66];
  v69 = *(_QWORD *)v68;
  v67[8] = v68[8];
  *(_QWORD *)v67 = v69;
  v70 = v28[19];
  v71 = &v26[v70];
  v72 = &v27[v70];
  *(_QWORD *)v71 = *(_QWORD *)v72;
  v73 = *((_QWORD *)v72 + 1);
  v74 = *((_QWORD *)v71 + 1);
  *((_QWORD *)v71 + 1) = v73;
  swift_bridgeObjectRetain(v73);
  swift_bridgeObjectRelease(v74);
  v26[v28[20]] = v27[v28[20]];
  v75 = v28[21];
  v76 = *(_QWORD *)&v27[v75];
  v77 = *(_QWORD *)&v26[v75];
  *(_QWORD *)&v26[v75] = v76;
  swift_bridgeObjectRetain(v76);
  swift_bridgeObjectRelease(v77);
  v78 = v28[22];
  v79 = *(_QWORD *)&v27[v78];
  v80 = *(_QWORD *)&v26[v78];
  *(_QWORD *)&v26[v78] = v79;
  swift_bridgeObjectRetain(v79);
  swift_bridgeObjectRelease(v80);
  v81 = a3[7];
  v82 = (_QWORD *)((char *)a1 + v81);
  v83 = (_QWORD *)((char *)a2 + v81);
  *v82 = *v83;
  v82[1] = v83[1];
  *((_BYTE *)a1 + a3[8]) = *((_BYTE *)a2 + a3[8]);
  return a1;
}

char *sub_100075ECC(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  char *v13;
  uint64_t v14;
  void (*v15)(char *, char *, uint64_t);
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  int *v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  void (*v25)(char *, char *, uint64_t);
  uint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;

  v6 = sub_10000527C(&qword_1000A4FC0);
  if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
  {
    v7 = type metadata accessor for WidgetRenderingMode(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a1, a2, v7);
    swift_storeEnumTagMultiPayload(a1, v6, 1);
  }
  else
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
  }
  v8 = a3[5];
  v9 = a3[6];
  v10 = &a1[v8];
  v11 = &a2[v8];
  *(_QWORD *)v10 = *(_QWORD *)v11;
  v10[8] = v11[8];
  v12 = &a1[v9];
  v13 = &a2[v9];
  v14 = type metadata accessor for UUID(0);
  v15 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v14 - 8) + 32);
  v15(v12, v13, v14);
  v16 = type metadata accessor for AccessoryAndSceneEntity(0);
  v15(&v12[*(int *)(v16 + 20)], &v13[*(int *)(v16 + 20)], v14);
  v17 = *(int *)(v16 + 24);
  v18 = &v12[v17];
  v19 = &v13[v17];
  v15(v18, v19, v14);
  v20 = (int *)type metadata accessor for WidgetTileInfo(0);
  v15(&v18[v20[5]], &v19[v20[5]], v14);
  *(_OWORD *)&v18[v20[6]] = *(_OWORD *)&v19[v20[6]];
  *(_OWORD *)&v18[v20[7]] = *(_OWORD *)&v19[v20[7]];
  *(_OWORD *)&v18[v20[8]] = *(_OWORD *)&v19[v20[8]];
  *(_OWORD *)&v18[v20[9]] = *(_OWORD *)&v19[v20[9]];
  v21 = v20[10];
  v22 = &v18[v21];
  v23 = &v19[v21];
  v24 = type metadata accessor for StaticRenderingMode(0);
  v25 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v24 - 8) + 32);
  v25(v22, v23, v24);
  v25(&v18[v20[11]], &v19[v20[11]], v24);
  *(_QWORD *)&v18[v20[12]] = *(_QWORD *)&v19[v20[12]];
  v18[v20[13]] = v19[v20[13]];
  v26 = v20[14];
  v27 = &v18[v26];
  v28 = &v19[v26];
  *(_QWORD *)v27 = *(_QWORD *)v28;
  v27[8] = v28[8];
  *(_QWORD *)&v18[v20[15]] = *(_QWORD *)&v19[v20[15]];
  v18[v20[16]] = v19[v20[16]];
  v18[v20[17]] = v19[v20[17]];
  v29 = v20[18];
  v30 = &v18[v29];
  v31 = &v19[v29];
  *(_QWORD *)v30 = *(_QWORD *)v31;
  v30[8] = v31[8];
  *(_OWORD *)&v18[v20[19]] = *(_OWORD *)&v19[v20[19]];
  v18[v20[20]] = v19[v20[20]];
  *(_QWORD *)&v18[v20[21]] = *(_QWORD *)&v19[v20[21]];
  *(_QWORD *)&v18[v20[22]] = *(_QWORD *)&v19[v20[22]];
  v32 = a3[8];
  *(_OWORD *)&a1[a3[7]] = *(_OWORD *)&a2[a3[7]];
  a1[v32] = a2[v32];
  return a1;
}

char *sub_100076150(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  void (*v18)(char *, char *, uint64_t);
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  int *v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  char *v50;
  uint64_t v51;
  void (*v52)(char *, char *, uint64_t);
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  char *v57;
  uint64_t v58;
  void *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  char *v64;
  uint64_t v65;
  char *v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;

  if (a1 != a2)
  {
    sub_100014EFC((uint64_t)a1, &qword_1000A4FC0);
    v6 = sub_10000527C(&qword_1000A4FC0);
    if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
    {
      v7 = type metadata accessor for WidgetRenderingMode(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a1, a2, v7);
      swift_storeEnumTagMultiPayload(a1, v6, 1);
    }
    else
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
    }
  }
  v8 = a3[5];
  v9 = &a1[v8];
  v10 = &a2[v8];
  v11 = *(_QWORD *)v10;
  LOBYTE(v10) = v10[8];
  v12 = *(_QWORD *)v9;
  v13 = v9[8];
  *(_QWORD *)v9 = v11;
  v9[8] = (char)v10;
  sub_10003561C(v12, v13);
  v14 = a3[6];
  v15 = &a1[v14];
  v16 = &a2[v14];
  v17 = type metadata accessor for UUID(0);
  v18 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v17 - 8) + 40);
  v18(v15, v16, v17);
  v19 = type metadata accessor for AccessoryAndSceneEntity(0);
  v18(&v15[*(int *)(v19 + 20)], &v16[*(int *)(v19 + 20)], v17);
  v20 = *(int *)(v19 + 24);
  v21 = &v15[v20];
  v22 = &v16[v20];
  v18(v21, v22, v17);
  v23 = (int *)type metadata accessor for WidgetTileInfo(0);
  v18(&v21[v23[5]], &v22[v23[5]], v17);
  v24 = v23[6];
  v25 = &v21[v24];
  v26 = &v22[v24];
  v28 = *(_QWORD *)v26;
  v27 = *((_QWORD *)v26 + 1);
  v29 = *((_QWORD *)v25 + 1);
  *(_QWORD *)v25 = v28;
  *((_QWORD *)v25 + 1) = v27;
  swift_bridgeObjectRelease(v29);
  v30 = v23[7];
  v31 = &v21[v30];
  v32 = &v22[v30];
  v34 = *(_QWORD *)v32;
  v33 = *((_QWORD *)v32 + 1);
  v35 = *((_QWORD *)v31 + 1);
  *(_QWORD *)v31 = v34;
  *((_QWORD *)v31 + 1) = v33;
  swift_bridgeObjectRelease(v35);
  v36 = v23[8];
  v37 = &v21[v36];
  v38 = &v22[v36];
  v40 = *(_QWORD *)v38;
  v39 = *((_QWORD *)v38 + 1);
  v41 = *((_QWORD *)v37 + 1);
  *(_QWORD *)v37 = v40;
  *((_QWORD *)v37 + 1) = v39;
  swift_bridgeObjectRelease(v41);
  v42 = v23[9];
  v43 = &v21[v42];
  v44 = &v22[v42];
  v46 = *(_QWORD *)v44;
  v45 = *((_QWORD *)v44 + 1);
  v47 = *((_QWORD *)v43 + 1);
  *(_QWORD *)v43 = v46;
  *((_QWORD *)v43 + 1) = v45;
  swift_bridgeObjectRelease(v47);
  v48 = v23[10];
  v49 = &v21[v48];
  v50 = &v22[v48];
  v51 = type metadata accessor for StaticRenderingMode(0);
  v52 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v51 - 8) + 40);
  v52(v49, v50, v51);
  v52(&v21[v23[11]], &v22[v23[11]], v51);
  v53 = v23[12];
  v54 = *(_QWORD *)&v21[v53];
  *(_QWORD *)&v21[v53] = *(_QWORD *)&v22[v53];
  swift_release(v54);
  v21[v23[13]] = v22[v23[13]];
  v55 = v23[14];
  v56 = &v21[v55];
  v57 = &v22[v55];
  v58 = *(_QWORD *)v57;
  LOBYTE(v57) = v57[8];
  v59 = *(void **)v56;
  *(_QWORD *)v56 = v58;
  v56[8] = (char)v57;

  v60 = v23[15];
  v61 = *(_QWORD *)&v21[v60];
  *(_QWORD *)&v21[v60] = *(_QWORD *)&v22[v60];
  swift_bridgeObjectRelease(v61);
  v21[v23[16]] = v22[v23[16]];
  v21[v23[17]] = v22[v23[17]];
  v62 = v23[18];
  v63 = &v21[v62];
  v64 = &v22[v62];
  v63[8] = v64[8];
  *(_QWORD *)v63 = *(_QWORD *)v64;
  v65 = v23[19];
  v66 = &v21[v65];
  v67 = &v22[v65];
  v69 = *(_QWORD *)v67;
  v68 = *((_QWORD *)v67 + 1);
  v70 = *((_QWORD *)v66 + 1);
  *(_QWORD *)v66 = v69;
  *((_QWORD *)v66 + 1) = v68;
  swift_bridgeObjectRelease(v70);
  v21[v23[20]] = v22[v23[20]];
  v71 = v23[21];
  v72 = *(_QWORD *)&v21[v71];
  *(_QWORD *)&v21[v71] = *(_QWORD *)&v22[v71];
  swift_bridgeObjectRelease(v72);
  v73 = v23[22];
  v74 = *(_QWORD *)&v21[v73];
  *(_QWORD *)&v21[v73] = *(_QWORD *)&v22[v73];
  swift_bridgeObjectRelease(v74);
  v75 = a3[8];
  *(_OWORD *)&a1[a3[7]] = *(_OWORD *)&a2[a3[7]];
  a1[v75] = a2[v75];
  return a1;
}

uint64_t sub_100076474(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100076480);
}

uint64_t sub_100076480(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unsigned int v9;
  uint64_t v10;

  v6 = sub_10000527C(&qword_1000A5E88);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  if ((_DWORD)a2 == 254)
  {
    v9 = *(unsigned __int8 *)(a1 + *(int *)(a3 + 20) + 8);
    if (v9 > 1)
      return (v9 ^ 0xFF) + 1;
    else
      return 0;
  }
  else
  {
    v10 = type metadata accessor for AccessoryAndSceneEntity(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 48))(a1 + *(int *)(a3 + 24), a2, v10);
  }
}

uint64_t sub_100076528(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100076534);
}

uint64_t sub_100076534(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;

  result = sub_10000527C(&qword_1000A5E88);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = result;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    if (a3 == 254)
    {
      *(_BYTE *)(a1 + *(int *)(a4 + 20) + 8) = -(char)a2;
      return result;
    }
    v10 = type metadata accessor for AccessoryAndSceneEntity(0);
    v12 = a1 + *(int *)(a4 + 24);
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56);
  }
  return v11(v12, a2, a2, v10);
}

void sub_1000765DC(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v6[5];

  sub_100048D10(319, (unint64_t *)&qword_1000A5F00, (uint64_t (*)(uint64_t))&type metadata accessor for WidgetRenderingMode);
  if (v3 <= 0x3F)
  {
    v6[0] = *(_QWORD *)(v2 - 8) + 64;
    v6[1] = "\t";
    v4 = type metadata accessor for AccessoryAndSceneEntity(319);
    if (v5 <= 0x3F)
    {
      v6[2] = *(_QWORD *)(v4 - 8) + 64;
      v6[3] = &unk_100089800;
      v6[4] = &unk_1000898B8;
      swift_initStructMetadata(a1, 256, 5, v6, a1 + 16);
    }
  }
}

unint64_t sub_100076694()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000A72A0;
  if (!qword_1000A72A0)
  {
    v1 = sub_1000052BC(&qword_1000A72A8);
    sub_100008C7C(&qword_1000A71D0, type metadata accessor for RectangleTileView, (uint64_t)&unk_100089A34);
    sub_100008C7C(&qword_1000A71D8, type metadata accessor for SmallSquareTileView, (uint64_t)&unk_100088EA0);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000A72A0);
  }
  return result;
}

unint64_t sub_100076734()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_1000A72B0;
  if (!qword_1000A72B0)
  {
    v1 = sub_1000052BC(&qword_1000A71E8);
    v2[0] = sub_1000052BC(&qword_1000A71F0);
    v2[1] = sub_1000229D8(&qword_1000A71F8, &qword_1000A71F0, (uint64_t)&protocol conformance descriptor for _ShapeView<A, B>);
    swift_getOpaqueTypeConformance2(v2, &opaque type descriptor for <<opaque return type of View.widgetAccentable(_:)>>, 1);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000A72B0);
  }
  return result;
}

uint64_t sub_1000767E8(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_10008CF24, 1);
}

unint64_t sub_1000767F8()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_1000A7308;
  if (!qword_1000A7308)
  {
    v1 = sub_1000052BC(&qword_1000A7300);
    v2[0] = sub_1000052BC(&qword_1000A7310);
    v2[1] = sub_1000768A4();
    swift_getOpaqueTypeConformance2(v2, &opaque type descriptor for <<opaque return type of View.monospacedDigit()>>, 1);
    sub_1000229D8(&qword_1000A6958, &qword_1000A6870, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000A7308);
  }
  return result;
}

unint64_t sub_1000768A4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000A7318;
  if (!qword_1000A7318)
  {
    v1 = sub_1000052BC(&qword_1000A7310);
    sub_100076928();
    sub_1000229D8(&qword_1000A6948, &qword_1000A6950, (uint64_t)&protocol conformance descriptor for _ForegroundStyleModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000A7318);
  }
  return result;
}

unint64_t sub_100076928()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000A7320;
  if (!qword_1000A7320)
  {
    v1 = sub_1000052BC(&qword_1000A7328);
    sub_100060B4C(&qword_1000A7330, &qword_1000A7338, (void (*)(void))sub_10006689C);
    sub_1000229D8(&qword_1000A7340, &qword_1000A7348, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000A7320);
  }
  return result;
}

void sub_1000769E4(double *a1@<X8>)
{
  *a1 = EnvironmentValues.minimumScaleFactor.getter();
}

uint64_t sub_100076A0C(double *a1)
{
  return EnvironmentValues.minimumScaleFactor.setter(*a1);
}

uint64_t sub_100076A30(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v2 = *(_QWORD *)(a1 + 24);
  v3 = *(_QWORD *)(a1 + 40);
  v4 = *(_QWORD *)(a1 + 56);
  v5 = *(_QWORD *)(a1 + 80);
  v6 = *(_QWORD *)(a1 + 88);
  v7 = *(_QWORD *)(a1 + 112);
  v8 = *(_QWORD *)(a1 + 128);
  sub_1000493D4(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
  swift_release(v8);
  swift_release(v7);
  swift_release(v5);
  swift_release(v4);
  swift_release(v3);
  swift_bridgeObjectRelease(v2);
  swift_release(v6);
  return a1;
}

uint64_t sub_100076AC8()
{
  return sub_100060B4C(&qword_1000A7350, &qword_1000A72C8, (void (*)(void))sub_100076AFC);
}

unint64_t sub_100076AFC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000A7358;
  if (!qword_1000A7358)
  {
    v1 = sub_1000052BC(&qword_1000A72C0);
    sub_1000229D8(&qword_1000A7360, &qword_1000A72B8, (uint64_t)&protocol conformance descriptor for HStack<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000A7358);
  }
  return result;
}

ValueMetadata *type metadata accessor for TileConstants()
{
  return &type metadata for TileConstants;
}

uint64_t sub_100076B90(uint64_t a1)
{
  return sub_100076BB8(0.1, a1, &qword_1000A7AC8);
}

uint64_t sub_100076BA4(uint64_t a1)
{
  return sub_100076BB8(0.2, a1, &qword_1000A7AD0);
}

uint64_t sub_100076BB8(double a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;

  v5 = type metadata accessor for Color.RGBColorSpace(0);
  __chkstk_darwin(v5);
  v7 = (char *)&v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, _QWORD))(v8 + 104))(v7, enum case for Color.RGBColorSpace.sRGB(_:));
  result = Color.init(_:white:opacity:)(v7, a1, 1.0);
  *a3 = result;
  return result;
}

uint64_t sub_100076C48(uint64_t a1)
{
  return sub_100076C70(a1, &qword_1000A7AD8, 0.25);
}

uint64_t sub_100076C58(uint64_t a1)
{
  return sub_100076C70(a1, &qword_1000A7AE0, 0.15);
}

uint64_t sub_100076C70(uint64_t a1, uint64_t *a2, double a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t result;

  v5 = static Color.primary.getter(a1);
  v6 = Color.opacity(_:)(a3);
  result = swift_release(v5);
  *a2 = v6;
  return result;
}

uint64_t sub_100076CC0(uint64_t a1)
{
  unint64_t v1;
  uint64_t result;
  uint64_t v3;

  v3 = static Color.white.getter(a1);
  v1 = sub_100076D08();
  result = Color.init<A>(_:)(&v3, &type metadata for Color, v1, &protocol witness table for Color);
  qword_1000A7AE8 = result;
  return result;
}

unint64_t sub_100076D08()
{
  unint64_t result;

  result = qword_1000A7368;
  if (!qword_1000A7368)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Color, &type metadata for Color);
    atomic_store(result, (unint64_t *)&qword_1000A7368);
  }
  return result;
}

uint64_t sub_100076D4C(char a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v9;

  v2 = 8 * a1;
  v3 = *(_QWORD *)&aRectanglsmalls_0[v2];
  v4 = *(_QWORD *)&aRectanglsmalls_0[v2 + 24];
  v5 = 8 * a2;
  v6 = *(_QWORD *)&aRectanglsmalls_0[v5];
  v7 = *(_QWORD *)&aRectanglsmalls_0[v5 + 24];
  if (v3 == v6 && v4 == v7)
    v9 = 1;
  else
    v9 = _stringCompareWithSmolCheck(_:_:expecting:)(v3, v4, v6, *(_QWORD *)&aRectanglsmalls_0[8 * a2 + 24], 0);
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(v7);
  return v9 & 1;
}

void sub_100076DD0(char a1)
{
  __asm { BR              X11 }
}

uint64_t sub_100076E1C(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_100076EB4 + 4 * byte_100089BA7[a2]))(0x7243746567646977);
}

uint64_t sub_100076EB4(uint64_t a1)
{
  uint64_t v1;
  char v2;

  if (a1 == 0x7243746567646977 && v1 == 0xED00006465746165)
    v2 = 1;
  else
    v2 = _stringCompareWithSmolCheck(_:_:expecting:)(a1, v1, 0x7243746567646977, 0xED00006465746165, 0);
  swift_bridgeObjectRelease(v1);
  swift_bridgeObjectRelease(0xED00006465746165);
  return v2 & 1;
}

uint64_t sub_100076F80(uint64_t a1, char a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = 8 * a2;
  v3 = *(_QWORD *)&aRectanglsmalls_0[v2 + 24];
  String.hash(into:)(a1, *(_QWORD *)&aRectanglsmalls_0[v2], v3);
  return swift_bridgeObjectRelease(v3);
}

void sub_100076FC0(uint64_t a1, char a2)
{
  __asm { BR              X10 }
}

uint64_t sub_100077004(uint64_t a1)
{
  String.hash(into:)(a1, 0x7243746567646977, 0xED00006465746165);
  return swift_bridgeObjectRelease(0xED00006465746165);
}

void sub_100077094(uint64_t a1, char a2)
{
  _QWORD v3[9];

  Hasher.init(_seed:)(v3, a1);
  __asm { BR              X10 }
}

Swift::Int sub_1000770E8()
{
  uint64_t v1;

  String.hash(into:)(&v1, 0x7243746567646977, 0xED00006465746165);
  swift_bridgeObjectRelease(0xED00006465746165);
  return Hasher._finalize()();
}

Swift::Int sub_100077194(uint64_t a1, char a2)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD v6[9];

  Hasher.init(_seed:)(v6, a1);
  v3 = 8 * a2;
  v4 = *(_QWORD *)&aRectanglsmalls_0[v3 + 24];
  String.hash(into:)(v6, *(_QWORD *)&aRectanglsmalls_0[v3], v4);
  swift_bridgeObjectRelease(v4);
  return Hasher._finalize()();
}

void sub_1000771F8(char a1)
{
  __asm { BR              X10 }
}

unint64_t sub_100077228()
{
  _StringGuts.grow(_:)(20);
  if (qword_1000A4F48 != -1)
    swift_once(&qword_1000A4F48, sub_1000773F8);
  swift_bridgeObjectRelease(0xE000000000000000);
  return 0xD000000000000021;
}

void sub_1000773F8()
{
  qword_1000A7AF0 = 0x6C7070612E6D6F63;
  *(_QWORD *)algn_1000A7AF8 = 0xEF2E656D6F482E65;
}

void *sub_100077428()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  Swift::Int v8;
  char v9;
  Swift::Int v10;
  uint64_t v11;
  int v12;
  int v13;
  char v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  Class isa;
  char isUniquelyReferenced_nonNull_native;
  id v20;
  NSString v21;
  id v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  Class v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  Class v30;
  char v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  Class v35;
  char v36;
  Class v37;
  char v38;
  unint64_t v39;
  Class v40;
  char v41;
  uint64_t v42;
  uint64_t v43;
  double v44;
  double v45;
  Class v46;
  char v47;
  void *v48;
  uint64_t v50;
  uint64_t v51;
  int v52;
  uint64_t v53;
  uint64_t v54;
  void *v55;

  v1 = type metadata accessor for Date(0);
  v53 = *(_QWORD *)(v1 - 8);
  v54 = v1;
  __chkstk_darwin(v1);
  v3 = (char *)&v50 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = *(_QWORD *)(v0 + 24);
  v5 = *(_QWORD *)(v0 + 32);
  v7 = *(_QWORD *)(v0 + 40);
  v6 = *(_QWORD *)(v0 + 48);
  v8 = *(_QWORD *)(v0 + 56);
  v9 = *(_BYTE *)(v0 + 64);
  if (v7 == 1)
  {
    v10 = 0;
    v11 = 0;
    v51 = 2;
    v52 = 1;
    HIDWORD(v50) = 2;
    v12 = 2;
    v13 = 2;
LABEL_5:
    sub_100079800(v4, v5, v7);
    v15 = &_swiftEmptyDictionarySingleton;
    v8 = v10;
    v7 = v11;
    goto LABEL_9;
  }
  v14 = *(_QWORD *)(v0 + 24);
  v13 = *(_QWORD *)(v0 + 48);
  v12 = BYTE1(v6);
  HIDWORD(v50) = BYTE2(v6);
  v51 = BYTE3(v6);
  v52 = v9 & 1;
  if (v4 == 2)
  {
    v10 = v8;
    v11 = v7;
    goto LABEL_5;
  }
  sub_100079800(v4, v5, v7);
  if (qword_1000A4F58 != -1)
    swift_once(&qword_1000A4F58, sub_100077F98);
  v16 = qword_1000A7380;
  v17 = *(_QWORD *)algn_1000A7388;
  sub_10002A86C();
  swift_bridgeObjectRetain(v17);
  isa = NSNumber.init(BOOLeanLiteral:)(v14 & 1).super.super.isa;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(&_swiftEmptyDictionarySingleton);
  v55 = &_swiftEmptyDictionarySingleton;
  sub_100078E30((uint64_t)isa, v16, v17, isUniquelyReferenced_nonNull_native);
  v15 = v55;
  swift_bridgeObjectRelease(v17);
  swift_bridgeObjectRelease(0x8000000000000000);
LABEL_9:
  if (v7)
  {
    v20 = objc_allocWithZone((Class)NSString);
    swift_bridgeObjectRetain(v7);
    v21 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v7);
    v22 = objc_msgSend(v20, "initWithString:", v21);

    v23 = swift_isUniquelyReferenced_nonNull_native(v15);
    v55 = v15;
    sub_100078E30((uint64_t)v22, 0xD000000000000015, 0x800000010008B5D0, v23);
    v15 = v55;
    swift_bridgeObjectRelease(0x8000000000000000);
  }
  if (v13 == 2)
    goto LABEL_14;
  if (qword_1000A4F60 != -1)
    goto LABEL_36;
  while (1)
  {
    v24 = qword_1000A7390;
    v25 = *(_QWORD *)algn_1000A7398;
    sub_10002A86C();
    swift_bridgeObjectRetain(v25);
    v26 = NSNumber.init(BOOLeanLiteral:)(v13 & 1).super.super.isa;
    v27 = swift_isUniquelyReferenced_nonNull_native(v15);
    v55 = v15;
    sub_100078E30((uint64_t)v26, v24, v25, v27);
    v15 = v55;
    swift_bridgeObjectRelease(v25);
    swift_bridgeObjectRelease(0x8000000000000000);
LABEL_14:
    v13 = v51;
    if (v12 != 2)
    {
      if (qword_1000A4F68 != -1)
        swift_once(&qword_1000A4F68, sub_100077FE8);
      v28 = qword_1000A73A0;
      v29 = *(_QWORD *)algn_1000A73A8;
      sub_10002A86C();
      swift_bridgeObjectRetain(v29);
      v30 = NSNumber.init(BOOLeanLiteral:)(v12 & 1).super.super.isa;
      v31 = swift_isUniquelyReferenced_nonNull_native(v15);
      v55 = v15;
      sub_100078E30((uint64_t)v30, v28, v29, v31);
      v15 = v55;
      swift_bridgeObjectRelease(v29);
      swift_bridgeObjectRelease(0x8000000000000000);
    }
    v32 = BYTE4(v50);
    if (HIDWORD(v50) != 2)
    {
      if (qword_1000A4F70 != -1)
        swift_once(&qword_1000A4F70, sub_100078014);
      v33 = qword_1000A73B0;
      v34 = *(_QWORD *)algn_1000A73B8;
      sub_10002A86C();
      swift_bridgeObjectRetain(v34);
      v35 = NSNumber.init(BOOLeanLiteral:)(v32 & 1).super.super.isa;
      v36 = swift_isUniquelyReferenced_nonNull_native(v15);
      v55 = v15;
      sub_100078E30((uint64_t)v35, v33, v34, v36);
      v15 = v55;
      swift_bridgeObjectRelease(v34);
      swift_bridgeObjectRelease(0x8000000000000000);
    }
    if (v13 != 2)
    {
      sub_10002A86C();
      v37 = NSNumber.init(BOOLeanLiteral:)(v13 & 1).super.super.isa;
      v38 = swift_isUniquelyReferenced_nonNull_native(v15);
      v55 = v15;
      sub_100078E30((uint64_t)v37, 0xD000000000000019, 0x800000010008B5B0, v38);
      v15 = v55;
      swift_bridgeObjectRelease(0x8000000000000000);
    }
    if ((v52 & 1) != 0)
    {
      v39 = v7;
    }
    else
    {
      sub_10002A86C();
      v40 = NSNumber.init(integerLiteral:)(v8).super.super.isa;
      swift_bridgeObjectRelease(v7);
      v41 = swift_isUniquelyReferenced_nonNull_native(v15);
      v55 = v15;
      sub_100078E30((uint64_t)v40, 0xD000000000000010, 0x800000010008B300, v41);
      v15 = v55;
      v39 = 0x8000000000000000;
    }
    swift_bridgeObjectRelease(v39);
    if (qword_1000A4F50 != -1)
      swift_once(&qword_1000A4F50, sub_100077F70);
    v8 = qword_1000A7370;
    v7 = *(_QWORD *)algn_1000A7378;
    sub_10002A86C();
    v42 = swift_bridgeObjectRetain(v7);
    v43 = Date.init()(v42);
    v44 = Date.timeIntervalSince1970.getter(v43);
    (*(void (**)(char *, uint64_t))(v53 + 8))(v3, v54);
    v45 = v44 * 1000.0;
    if ((~COERCE__INT64(v44 * 1000.0) & 0x7FF0000000000000) == 0)
    {
      __break(1u);
LABEL_34:
      __break(1u);
      goto LABEL_35;
    }
    if (v45 <= -9.22337204e18)
      goto LABEL_34;
    if (v45 < 9.22337204e18)
      break;
LABEL_35:
    __break(1u);
LABEL_36:
    swift_once(&qword_1000A4F60, sub_100077FC4);
  }
  v46 = NSNumber.init(integerLiteral:)((uint64_t)v45).super.super.isa;
  v47 = swift_isUniquelyReferenced_nonNull_native(v15);
  v55 = v15;
  sub_100078E30((uint64_t)v46, v8, v7, v47);
  v48 = v55;
  swift_bridgeObjectRelease(v7);
  swift_bridgeObjectRelease(0x8000000000000000);
  return v48;
}

uint64_t sub_100077A38()
{
  uint64_t *v0;

  sub_100028588(v0[3], v0[4], v0[5]);
  return swift_deallocClassInstance(v0, 65, 7);
}

uint64_t type metadata accessor for WidgetAnalyticsEvent()
{
  return objc_opt_self(_TtC10HomeWidget20WidgetAnalyticsEvent);
}

uint64_t destroy for WidgetAnalyticsEventData(uint64_t a1)
{
  return swift_bridgeObjectRelease(*(_QWORD *)(a1 + 16));
}

uint64_t initializeWithCopy for WidgetAnalyticsEventData(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v3 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v3;
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  swift_bridgeObjectRetain(v3);
  return a1;
}

uint64_t assignWithCopy for WidgetAnalyticsEventData(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  v4 = *(_QWORD *)(a2 + 16);
  v5 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_BYTE *)(a1 + 25) = *(_BYTE *)(a2 + 25);
  *(_BYTE *)(a1 + 26) = *(_BYTE *)(a2 + 26);
  *(_BYTE *)(a1 + 27) = *(_BYTE *)(a2 + 27);
  v6 = *(_QWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = v6;
  return a1;
}

__n128 initializeWithTake for WidgetAnalyticsEventData(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 25) = *(_OWORD *)(a2 + 25);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t assignWithTake for WidgetAnalyticsEventData(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v4 = *(_QWORD *)(a2 + 16);
  v5 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v4;
  swift_bridgeObjectRelease(v5);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  return a1;
}

uint64_t getEnumTagSinglePayload for WidgetAnalyticsEventData(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 41))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *(_QWORD *)(a1 + 16);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for WidgetAnalyticsEventData(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 40) = 0;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 41) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 41) = 0;
    if (a2)
      *(_QWORD *)(result + 16) = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for WidgetAnalyticsEventData()
{
  return &type metadata for WidgetAnalyticsEventData;
}

uint64_t getEnumTagSinglePayload for WidgetAnalyticsEventType(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFA)
    goto LABEL_17;
  if (a2 + 6 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 6) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 6;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 6;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 6;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 7;
  v8 = v6 - 7;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for WidgetAnalyticsEventType(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 6 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 6) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFA)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF9)
    return ((uint64_t (*)(void))((char *)&loc_100077D70 + 4 * byte_100089BC8[v4]))();
  *a1 = a2 + 6;
  return ((uint64_t (*)(void))((char *)sub_100077DA4 + 4 * byte_100089BC3[v4]))();
}

uint64_t sub_100077DA4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100077DAC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100077DB4);
  return result;
}

uint64_t sub_100077DC0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100077DC8);
  *(_BYTE *)result = a2 + 6;
  return result;
}

uint64_t sub_100077DCC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100077DD4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for WidgetAnalyticsEventType()
{
  return &type metadata for WidgetAnalyticsEventType;
}

uint64_t sub_100077DF0(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_100077E28 + 4 * byte_100089BCD[a1]))(0xD000000000000010, 0x8000000100089FA0);
}

uint64_t sub_100077E28()
{
  return 0x7243746567646977;
}

uint64_t sub_100077E4C(uint64_t a1)
{
  return a1 + 8;
}

void sub_100077EA4(char *a1)
{
  sub_100076DD0(*a1);
}

void sub_100077EB0()
{
  char *v0;

  sub_100077094(0, *v0);
}

void sub_100077EBC(uint64_t a1)
{
  char *v1;

  sub_100076FC0(a1, *v1);
}

void sub_100077EC4(uint64_t a1)
{
  char *v1;

  sub_100077094(a1, *v1);
}

unint64_t sub_100077ECC@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = sub_1000797B8(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_100077EF8@<X0>(uint64_t *a1@<X8>)
{
  unsigned __int8 *v1;
  uint64_t result;
  uint64_t v4;

  result = sub_100077DF0(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

void sub_100077F20()
{
  char *v0;

  sub_1000771F8(*v0);
}

unint64_t sub_100077F2C()
{
  unint64_t result;

  result = qword_1000A74A0;
  if (!qword_1000A74A0)
  {
    result = swift_getWitnessTable(&unk_100089CEC, &type metadata for WidgetAnalyticsEventType);
    atomic_store(result, (unint64_t *)&qword_1000A74A0);
  }
  return result;
}

void sub_100077F70()
{
  qword_1000A7370 = 0x6D617473656D6974;
  *(_QWORD *)algn_1000A7378 = 0xE900000000000070;
}

void sub_100077F98()
{
  qword_1000A7380 = 0x7373656363417369;
  *(_QWORD *)algn_1000A7388 = 0xEB0000000079726FLL;
}

void sub_100077FC4()
{
  qword_1000A7390 = 0x656E6563537369;
  *(_QWORD *)algn_1000A7398 = 0xE700000000000000;
}

void sub_100077FE8()
{
  qword_1000A73A0 = 0x6168636165527369;
  *(_QWORD *)algn_1000A73A8 = 0xEB00000000656C62;
}

void sub_100078014()
{
  qword_1000A73B0 = 0x6176697463417369;
  *(_QWORD *)algn_1000A73B8 = 0xEB00000000646574;
}

Swift::Int sub_100078040(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  Swift::Int result;
  int64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  _QWORD *v23;
  unint64_t v24;
  int64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int64_t v35;
  uint64_t v36;
  char v37;
  _QWORD v38[9];

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_10000527C(&qword_1000A74B0);
  v37 = a2;
  v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  v8 = v7;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_43;
  v9 = 1 << *(_BYTE *)(v5 + 32);
  v36 = v5 + 64;
  if (v9 < 64)
    v10 = ~(-1 << v9);
  else
    v10 = -1;
  v11 = v10 & *(_QWORD *)(v5 + 64);
  v35 = (unint64_t)(v9 + 63) >> 6;
  v12 = v7 + 64;
  result = swift_retain(v5);
  v14 = 0;
  while (1)
  {
    if (v11)
    {
      v20 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      v21 = v20 | (v14 << 6);
      goto LABEL_34;
    }
    v22 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return result;
    }
    if (v22 >= v35)
      break;
    v23 = (_QWORD *)(v5 + 64);
    v24 = *(_QWORD *)(v36 + 8 * v22);
    ++v14;
    if (!v24)
    {
      v14 = v22 + 1;
      if (v22 + 1 >= v35)
        goto LABEL_36;
      v24 = *(_QWORD *)(v36 + 8 * v14);
      if (!v24)
      {
        v25 = v22 + 2;
        if (v25 >= v35)
        {
LABEL_36:
          swift_release(v5);
          if ((v37 & 1) == 0)
            goto LABEL_43;
          goto LABEL_39;
        }
        v24 = *(_QWORD *)(v36 + 8 * v25);
        if (!v24)
        {
          while (1)
          {
            v14 = v25 + 1;
            if (__OFADD__(v25, 1))
              goto LABEL_45;
            if (v14 >= v35)
              goto LABEL_36;
            v24 = *(_QWORD *)(v36 + 8 * v14);
            ++v25;
            if (v24)
              goto LABEL_33;
          }
        }
        v14 = v25;
      }
    }
LABEL_33:
    v11 = (v24 - 1) & v24;
    v21 = __clz(__rbit64(v24)) + (v14 << 6);
LABEL_34:
    v30 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 16 * v21);
    v32 = *v30;
    v31 = v30[1];
    v33 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v21);
    if ((v37 & 1) == 0)
    {
      swift_bridgeObjectRetain(v30[1]);
      swift_bridgeObjectRetain(v33);
    }
    Hasher.init(_seed:)(v38, *(_QWORD *)(v8 + 40));
    String.hash(into:)(v38, v32, v31);
    result = Hasher._finalize()();
    v15 = -1 << *(_BYTE *)(v8 + 32);
    v16 = result & ~v15;
    v17 = v16 >> 6;
    if (((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6))) != 0)
    {
      v18 = __clz(__rbit64((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v26 = 0;
      v27 = (unint64_t)(63 - v15) >> 6;
      do
      {
        if (++v17 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }
        v28 = v17 == v27;
        if (v17 == v27)
          v17 = 0;
        v26 |= v28;
        v29 = *(_QWORD *)(v12 + 8 * v17);
      }
      while (v29 == -1);
      v18 = __clz(__rbit64(~v29)) + (v17 << 6);
    }
    *(_QWORD *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    v19 = (_QWORD *)(*(_QWORD *)(v8 + 48) + 16 * v18);
    *v19 = v32;
    v19[1] = v31;
    *(_QWORD *)(*(_QWORD *)(v8 + 56) + 8 * v18) = v33;
    ++*(_QWORD *)(v8 + 16);
  }
  swift_release(v5);
  v23 = (_QWORD *)(v5 + 64);
  if ((v37 & 1) == 0)
    goto LABEL_43;
LABEL_39:
  v34 = 1 << *(_BYTE *)(v5 + 32);
  if (v34 >= 64)
    bzero(v23, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v23 = -1 << v34;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_43:
  result = swift_release(v5);
  *v3 = v8;
  return result;
}

uint64_t sub_100078354(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t result;
  int64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  int64_t v23;
  unint64_t v24;
  int64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  char v34;
  unint64_t v35;
  BOOL v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t *v40;
  int64_t v41;
  _QWORD *v42;
  uint64_t i;
  int v44;

  v3 = v2;
  v6 = type metadata accessor for UUID(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v39 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *v3;
  if (*(_QWORD *)(*v3 + 24) > a1)
    a1 = *(_QWORD *)(*v3 + 24);
  sub_10000527C(&qword_1000A5A10);
  v44 = a2;
  v11 = static _DictionaryStorage.resize(original:capacity:move:)(v10, a1, a2);
  v12 = v11;
  if (!*(_QWORD *)(v10 + 16))
    goto LABEL_41;
  v40 = v3;
  v13 = 1 << *(_BYTE *)(v10 + 32);
  v14 = *(_QWORD *)(v10 + 64);
  v42 = (_QWORD *)(v10 + 64);
  if (v13 < 64)
    v15 = ~(-1 << v13);
  else
    v15 = -1;
  v16 = v15 & v14;
  v41 = (unint64_t)(v13 + 63) >> 6;
  v17 = v11 + 64;
  result = swift_retain(v10);
  v19 = 0;
  for (i = v10; ; v10 = i)
  {
    if (v16)
    {
      v21 = __clz(__rbit64(v16));
      v16 &= v16 - 1;
      v22 = v21 | (v19 << 6);
      goto LABEL_24;
    }
    v23 = v19 + 1;
    if (__OFADD__(v19, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v23 >= v41)
      goto LABEL_36;
    v24 = v42[v23];
    ++v19;
    if (!v24)
    {
      v19 = v23 + 1;
      if (v23 + 1 >= v41)
        goto LABEL_36;
      v24 = v42[v19];
      if (!v24)
        break;
    }
LABEL_23:
    v16 = (v24 - 1) & v24;
    v22 = __clz(__rbit64(v24)) + (v19 << 6);
LABEL_24:
    v26 = *(_QWORD *)(v7 + 72);
    v27 = *(_QWORD *)(v10 + 48) + v26 * v22;
    if ((v44 & 1) != 0)
    {
      (*(void (**)(char *, unint64_t, uint64_t))(v7 + 32))(v9, v27, v6);
      v28 = *(_QWORD *)(*(_QWORD *)(v10 + 56) + 8 * v22);
    }
    else
    {
      (*(void (**)(char *, unint64_t, uint64_t))(v7 + 16))(v9, v27, v6);
      v28 = *(_QWORD *)(*(_QWORD *)(v10 + 56) + 8 * v22);
      swift_bridgeObjectRetain(v28);
    }
    v29 = *(_QWORD *)(v12 + 40);
    v30 = sub_100079814();
    result = dispatch thunk of Hashable._rawHashValue(seed:)(v29, v6, v30);
    v31 = -1 << *(_BYTE *)(v12 + 32);
    v32 = result & ~v31;
    v33 = v32 >> 6;
    if (((-1 << v32) & ~*(_QWORD *)(v17 + 8 * (v32 >> 6))) != 0)
    {
      v20 = __clz(__rbit64((-1 << v32) & ~*(_QWORD *)(v17 + 8 * (v32 >> 6)))) | v32 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v34 = 0;
      v35 = (unint64_t)(63 - v31) >> 6;
      do
      {
        if (++v33 == v35 && (v34 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        v36 = v33 == v35;
        if (v33 == v35)
          v33 = 0;
        v34 |= v36;
        v37 = *(_QWORD *)(v17 + 8 * v33);
      }
      while (v37 == -1);
      v20 = __clz(__rbit64(~v37)) + (v33 << 6);
    }
    *(_QWORD *)(v17 + ((v20 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v20;
    result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(v7 + 32))(*(_QWORD *)(v12 + 48) + v26 * v20, v9, v6);
    *(_QWORD *)(*(_QWORD *)(v12 + 56) + 8 * v20) = v28;
    ++*(_QWORD *)(v12 + 16);
  }
  v25 = v23 + 2;
  if (v25 < v41)
  {
    v24 = v42[v25];
    if (!v24)
    {
      while (1)
      {
        v19 = v25 + 1;
        if (__OFADD__(v25, 1))
          goto LABEL_43;
        if (v19 >= v41)
          goto LABEL_36;
        v24 = v42[v19];
        ++v25;
        if (v24)
          goto LABEL_23;
      }
    }
    v19 = v25;
    goto LABEL_23;
  }
LABEL_36:
  swift_release(v10);
  v3 = v40;
  if ((v44 & 1) != 0)
  {
    v38 = 1 << *(_BYTE *)(v10 + 32);
    if (v38 >= 64)
      bzero(v42, ((unint64_t)(v38 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
    else
      *v42 = -1 << v38;
    *(_QWORD *)(v10 + 16) = 0;
  }
LABEL_41:
  result = swift_release(v10);
  *v3 = v12;
  return result;
}

Swift::Int sub_1000786C0(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  Swift::Int result;
  int64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  _QWORD *v23;
  unint64_t v24;
  int64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  id v34;
  uint64_t v35;
  uint64_t *v36;
  int64_t v37;
  uint64_t v38;
  char v39;
  _QWORD v40[9];

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_10000527C(&qword_1000A74A8);
  v39 = a2;
  v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  v8 = v7;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_43;
  v9 = 1 << *(_BYTE *)(v5 + 32);
  v38 = v5 + 64;
  if (v9 < 64)
    v10 = ~(-1 << v9);
  else
    v10 = -1;
  v11 = v10 & *(_QWORD *)(v5 + 64);
  v36 = v3;
  v37 = (unint64_t)(v9 + 63) >> 6;
  v12 = v7 + 64;
  result = swift_retain(v5);
  v14 = 0;
  while (1)
  {
    if (v11)
    {
      v20 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      v21 = v20 | (v14 << 6);
      goto LABEL_34;
    }
    v22 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return result;
    }
    if (v22 >= v37)
      break;
    v23 = (_QWORD *)(v5 + 64);
    v24 = *(_QWORD *)(v38 + 8 * v22);
    ++v14;
    if (!v24)
    {
      v14 = v22 + 1;
      if (v22 + 1 >= v37)
        goto LABEL_36;
      v24 = *(_QWORD *)(v38 + 8 * v14);
      if (!v24)
      {
        v25 = v22 + 2;
        if (v25 >= v37)
        {
LABEL_36:
          swift_release(v5);
          v3 = v36;
          if ((v39 & 1) == 0)
            goto LABEL_43;
          goto LABEL_39;
        }
        v24 = *(_QWORD *)(v38 + 8 * v25);
        if (!v24)
        {
          while (1)
          {
            v14 = v25 + 1;
            if (__OFADD__(v25, 1))
              goto LABEL_45;
            if (v14 >= v37)
              goto LABEL_36;
            v24 = *(_QWORD *)(v38 + 8 * v14);
            ++v25;
            if (v24)
              goto LABEL_33;
          }
        }
        v14 = v25;
      }
    }
LABEL_33:
    v11 = (v24 - 1) & v24;
    v21 = __clz(__rbit64(v24)) + (v14 << 6);
LABEL_34:
    v30 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 16 * v21);
    v32 = *v30;
    v31 = v30[1];
    v33 = *(void **)(*(_QWORD *)(v5 + 56) + 8 * v21);
    if ((v39 & 1) == 0)
    {
      swift_bridgeObjectRetain(v30[1]);
      v34 = v33;
    }
    Hasher.init(_seed:)(v40, *(_QWORD *)(v8 + 40));
    String.hash(into:)(v40, v32, v31);
    result = Hasher._finalize()();
    v15 = -1 << *(_BYTE *)(v8 + 32);
    v16 = result & ~v15;
    v17 = v16 >> 6;
    if (((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6))) != 0)
    {
      v18 = __clz(__rbit64((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v26 = 0;
      v27 = (unint64_t)(63 - v15) >> 6;
      do
      {
        if (++v17 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }
        v28 = v17 == v27;
        if (v17 == v27)
          v17 = 0;
        v26 |= v28;
        v29 = *(_QWORD *)(v12 + 8 * v17);
      }
      while (v29 == -1);
      v18 = __clz(__rbit64(~v29)) + (v17 << 6);
    }
    *(_QWORD *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    v19 = (_QWORD *)(*(_QWORD *)(v8 + 48) + 16 * v18);
    *v19 = v32;
    v19[1] = v31;
    *(_QWORD *)(*(_QWORD *)(v8 + 56) + 8 * v18) = v33;
    ++*(_QWORD *)(v8 + 16);
  }
  swift_release(v5);
  v3 = v36;
  v23 = (_QWORD *)(v5 + 64);
  if ((v39 & 1) == 0)
    goto LABEL_43;
LABEL_39:
  v35 = 1 << *(_BYTE *)(v5 + 32);
  if (v35 >= 64)
    bzero(v23, ((unint64_t)(v35 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v23 = -1 << v35;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_43:
  result = swift_release(v5);
  *v3 = v8;
  return result;
}

Swift::Int sub_1000789CC(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  Swift::Int result;
  int64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  _QWORD *v23;
  unint64_t v24;
  int64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  int64_t v36;
  uint64_t v37;
  char v38;
  _QWORD v39[9];

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_10000527C(&qword_1000A5A18);
  v38 = a2;
  v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  v8 = v7;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_43;
  v9 = 1 << *(_BYTE *)(v5 + 32);
  v37 = v5 + 64;
  if (v9 < 64)
    v10 = ~(-1 << v9);
  else
    v10 = -1;
  v11 = v10 & *(_QWORD *)(v5 + 64);
  v35 = v3;
  v36 = (unint64_t)(v9 + 63) >> 6;
  v12 = v7 + 64;
  result = swift_retain(v5);
  v14 = 0;
  while (1)
  {
    if (v11)
    {
      v20 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      v21 = v20 | (v14 << 6);
      goto LABEL_34;
    }
    v22 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return result;
    }
    if (v22 >= v36)
      break;
    v23 = (_QWORD *)(v5 + 64);
    v24 = *(_QWORD *)(v37 + 8 * v22);
    ++v14;
    if (!v24)
    {
      v14 = v22 + 1;
      if (v22 + 1 >= v36)
        goto LABEL_36;
      v24 = *(_QWORD *)(v37 + 8 * v14);
      if (!v24)
      {
        v25 = v22 + 2;
        if (v25 >= v36)
        {
LABEL_36:
          swift_release(v5);
          v3 = v35;
          if ((v38 & 1) == 0)
            goto LABEL_43;
          goto LABEL_39;
        }
        v24 = *(_QWORD *)(v37 + 8 * v25);
        if (!v24)
        {
          while (1)
          {
            v14 = v25 + 1;
            if (__OFADD__(v25, 1))
              goto LABEL_45;
            if (v14 >= v36)
              goto LABEL_36;
            v24 = *(_QWORD *)(v37 + 8 * v14);
            ++v25;
            if (v24)
              goto LABEL_33;
          }
        }
        v14 = v25;
      }
    }
LABEL_33:
    v11 = (v24 - 1) & v24;
    v21 = __clz(__rbit64(v24)) + (v14 << 6);
LABEL_34:
    v30 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 16 * v21);
    v32 = *v30;
    v31 = v30[1];
    v33 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v21);
    if ((v38 & 1) == 0)
      swift_bridgeObjectRetain(v30[1]);
    Hasher.init(_seed:)(v39, *(_QWORD *)(v8 + 40));
    String.hash(into:)(v39, v32, v31);
    result = Hasher._finalize()();
    v15 = -1 << *(_BYTE *)(v8 + 32);
    v16 = result & ~v15;
    v17 = v16 >> 6;
    if (((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6))) != 0)
    {
      v18 = __clz(__rbit64((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v26 = 0;
      v27 = (unint64_t)(63 - v15) >> 6;
      do
      {
        if (++v17 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }
        v28 = v17 == v27;
        if (v17 == v27)
          v17 = 0;
        v26 |= v28;
        v29 = *(_QWORD *)(v12 + 8 * v17);
      }
      while (v29 == -1);
      v18 = __clz(__rbit64(~v29)) + (v17 << 6);
    }
    *(_QWORD *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    v19 = (_QWORD *)(*(_QWORD *)(v8 + 48) + 16 * v18);
    *v19 = v32;
    v19[1] = v31;
    *(_QWORD *)(*(_QWORD *)(v8 + 56) + 8 * v18) = v33;
    ++*(_QWORD *)(v8 + 16);
  }
  swift_release(v5);
  v3 = v35;
  v23 = (_QWORD *)(v5 + 64);
  if ((v38 & 1) == 0)
    goto LABEL_43;
LABEL_39:
  v34 = 1 << *(_BYTE *)(v5 + 32);
  if (v34 >= 64)
    bzero(v23, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v23 = -1 << v34;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_43:
  result = swift_release(v5);
  *v3 = v8;
  return result;
}

uint64_t sub_100078CD4(uint64_t a1, uint64_t a2, char a3)
{
  _QWORD *v3;
  _QWORD **v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  _QWORD *v12;
  char v13;
  unint64_t v14;
  uint64_t v15;
  _BOOL8 v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t result;
  unint64_t v23;
  char v24;
  uint64_t v25;

  v4 = (_QWORD **)v3;
  v8 = type metadata accessor for UUID(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v25 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = (_QWORD *)*v3;
  v14 = sub_10001A558(a2);
  v15 = v12[2];
  v16 = (v13 & 1) == 0;
  v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
    goto LABEL_14;
  }
  v18 = v13;
  v19 = v12[3];
  if (v19 >= v17 && (a3 & 1) != 0)
  {
LABEL_7:
    v20 = *v4;
    if ((v18 & 1) != 0)
    {
LABEL_8:
      v21 = v20[7];
      result = swift_bridgeObjectRelease(*(_QWORD *)(v21 + 8 * v14));
      *(_QWORD *)(v21 + 8 * v14) = a1;
      return result;
    }
    goto LABEL_11;
  }
  if (v19 >= v17 && (a3 & 1) == 0)
  {
    sub_1000791D8();
    goto LABEL_7;
  }
  sub_100078354(v17, a3 & 1);
  v23 = sub_10001A558(a2);
  if ((v18 & 1) != (v24 & 1))
  {
LABEL_14:
    result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v8);
    __break(1u);
    return result;
  }
  v14 = v23;
  v20 = *v4;
  if ((v18 & 1) != 0)
    goto LABEL_8;
LABEL_11:
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a2, v8);
  return sub_100078F8C(v14, (uint64_t)v11, a1, v20);
}

void sub_100078E30(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v10;
  char v11;
  unint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  unint64_t v20;
  char v21;
  uint64_t *v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;

  v5 = v4;
  v10 = *v4;
  v12 = sub_10001A4C4(a2, a3);
  v13 = *(_QWORD *)(v10 + 16);
  v14 = (v11 & 1) == 0;
  v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v16 = v11;
  v17 = *(_QWORD *)(v10 + 24);
  if (v17 >= v15 && (a4 & 1) != 0)
    goto LABEL_7;
  if (v17 >= v15 && (a4 & 1) == 0)
  {
    sub_100079408();
LABEL_7:
    v18 = (_QWORD *)*v5;
    if ((v16 & 1) != 0)
    {
LABEL_8:
      v19 = v18[7];

      *(_QWORD *)(v19 + 8 * v12) = a1;
      return;
    }
LABEL_11:
    v18[(v12 >> 6) + 8] |= 1 << v12;
    v22 = (uint64_t *)(v18[6] + 16 * v12);
    *v22 = a2;
    v22[1] = a3;
    *(_QWORD *)(v18[7] + 8 * v12) = a1;
    v23 = v18[2];
    v24 = __OFADD__(v23, 1);
    v25 = v23 + 1;
    if (!v24)
    {
      v18[2] = v25;
      swift_bridgeObjectRetain(a3);
      return;
    }
    goto LABEL_14;
  }
  sub_1000786C0(v15, a4 & 1);
  v20 = sub_10001A4C4(a2, a3);
  if ((v16 & 1) == (v21 & 1))
  {
    v12 = v20;
    v18 = (_QWORD *)*v5;
    if ((v16 & 1) != 0)
      goto LABEL_8;
    goto LABEL_11;
  }
LABEL_15:
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
}

uint64_t sub_100078F8C(unint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;

  a4[(a1 >> 6) + 8] |= 1 << a1;
  v8 = a4[6];
  v9 = type metadata accessor for UUID(0);
  result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v8 + *(_QWORD *)(*(_QWORD *)(v9 - 8) + 72) * a1, a2, v9);
  *(_QWORD *)(a4[7] + 8 * a1) = a3;
  v11 = a4[2];
  v12 = __OFADD__(v11, 1);
  v13 = v11 + 1;
  if (v12)
    __break(1u);
  else
    a4[2] = v13;
  return result;
}

void *sub_100079024()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;

  v1 = v0;
  sub_10000527C(&qword_1000A74B0);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release(v2);
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v22 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v22 >= v13)
      goto LABEL_26;
    v23 = *(_QWORD *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      v9 = v22 + 1;
      if (v22 + 1 >= v13)
        goto LABEL_26;
      v23 = *(_QWORD *)(v6 + 8 * v9);
      if (!v23)
        break;
    }
LABEL_25:
    v12 = (v23 - 1) & v23;
    v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (_QWORD *)(*(_QWORD *)(v2 + 48) + 16 * v15);
    v18 = v17[1];
    v19 = 8 * v15;
    v20 = *(_QWORD *)(*(_QWORD *)(v2 + 56) + v19);
    v21 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    *v21 = *v17;
    v21[1] = v18;
    *(_QWORD *)(*(_QWORD *)(v4 + 56) + v19) = v20;
    swift_bridgeObjectRetain(v18);
    result = (void *)swift_bridgeObjectRetain(v20);
  }
  v24 = v22 + 2;
  if (v24 >= v13)
    goto LABEL_26;
  v23 = *(_QWORD *)(v6 + 8 * v24);
  if (v23)
  {
    v9 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v24 + 1;
    if (__OFADD__(v24, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v23 = *(_QWORD *)(v6 + 8 * v9);
    ++v24;
    if (v23)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

void sub_1000791D8()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  unint64_t v9;
  int64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  int64_t v26;

  v1 = type metadata accessor for UUID(0);
  v2 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  v4 = (char *)&v23 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000527C(&qword_1000A5A10);
  v24 = v0;
  v5 = *v0;
  v6 = static _DictionaryStorage.copy(original:)(*v0);
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
  {
LABEL_26:
    swift_release(v5);
    *v24 = v7;
    return;
  }
  v8 = (void *)(v6 + 64);
  v9 = (unint64_t)((1 << *(_BYTE *)(v7 + 32)) + 63) >> 6;
  if (v7 != v5 || (unint64_t)v8 >= v5 + 64 + 8 * v9)
    memmove(v8, (const void *)(v5 + 64), 8 * v9);
  v25 = v5 + 64;
  v11 = 0;
  *(_QWORD *)(v7 + 16) = *(_QWORD *)(v5 + 16);
  v12 = 1 << *(_BYTE *)(v5 + 32);
  v13 = -1;
  if (v12 < 64)
    v13 = ~(-1 << v12);
  v14 = v13 & *(_QWORD *)(v5 + 64);
  v26 = (unint64_t)(v12 + 63) >> 6;
  while (1)
  {
    if (v14)
    {
      v15 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      v16 = v15 | (v11 << 6);
      goto LABEL_12;
    }
    v20 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v20 >= v26)
      goto LABEL_26;
    v21 = *(_QWORD *)(v25 + 8 * v20);
    ++v11;
    if (!v21)
    {
      v11 = v20 + 1;
      if (v20 + 1 >= v26)
        goto LABEL_26;
      v21 = *(_QWORD *)(v25 + 8 * v11);
      if (!v21)
        break;
    }
LABEL_25:
    v14 = (v21 - 1) & v21;
    v16 = __clz(__rbit64(v21)) + (v11 << 6);
LABEL_12:
    v17 = *(_QWORD *)(v2 + 72) * v16;
    (*(void (**)(char *, unint64_t, uint64_t))(v2 + 16))(v4, *(_QWORD *)(v5 + 48) + v17, v1);
    v18 = 8 * v16;
    v19 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v16);
    (*(void (**)(unint64_t, char *, uint64_t))(v2 + 32))(*(_QWORD *)(v7 + 48) + v17, v4, v1);
    *(_QWORD *)(*(_QWORD *)(v7 + 56) + v18) = v19;
    swift_bridgeObjectRetain(v19);
  }
  v22 = v20 + 2;
  if (v22 >= v26)
    goto LABEL_26;
  v21 = *(_QWORD *)(v25 + 8 * v22);
  if (v21)
  {
    v11 = v22;
    goto LABEL_25;
  }
  while (1)
  {
    v11 = v22 + 1;
    if (__OFADD__(v22, 1))
      break;
    if (v11 >= v26)
      goto LABEL_26;
    v21 = *(_QWORD *)(v25 + 8 * v11);
    ++v22;
    if (v21)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
}

id sub_100079408()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  id result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  _QWORD *v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;

  v1 = v0;
  sub_10000527C(&qword_1000A74A8);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (id)swift_release(v2);
    *v1 = v4;
    return result;
  }
  result = (id)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v22 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v22 >= v13)
      goto LABEL_26;
    v23 = *(_QWORD *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      v9 = v22 + 1;
      if (v22 + 1 >= v13)
        goto LABEL_26;
      v23 = *(_QWORD *)(v6 + 8 * v9);
      if (!v23)
        break;
    }
LABEL_25:
    v12 = (v23 - 1) & v23;
    v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (_QWORD *)(*(_QWORD *)(v2 + 48) + 16 * v15);
    v18 = v17[1];
    v19 = 8 * v15;
    v20 = *(void **)(*(_QWORD *)(v2 + 56) + v19);
    v21 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    *v21 = *v17;
    v21[1] = v18;
    *(_QWORD *)(*(_QWORD *)(v4 + 56) + v19) = v20;
    swift_bridgeObjectRetain(v18);
    result = v20;
  }
  v24 = v22 + 2;
  if (v24 >= v13)
    goto LABEL_26;
  v23 = *(_QWORD *)(v6 + 8 * v24);
  if (v23)
  {
    v9 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v24 + 1;
    if (__OFADD__(v24, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v23 = *(_QWORD *)(v6 + 8 * v9);
    ++v24;
    if (v23)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

void sub_1000795B8()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  int64_t v23;
  unint64_t v24;
  int64_t v25;

  v1 = v0;
  sub_10000527C(&qword_1000A5A18);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    swift_release(v2);
    *v1 = v4;
    return;
  }
  v5 = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)v5 >= v2 + 64 + 8 * v7)
    memmove(v5, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v23 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v23 >= v13)
      goto LABEL_26;
    v24 = *(_QWORD *)(v6 + 8 * v23);
    ++v9;
    if (!v24)
    {
      v9 = v23 + 1;
      if (v23 + 1 >= v13)
        goto LABEL_26;
      v24 = *(_QWORD *)(v6 + 8 * v9);
      if (!v24)
        break;
    }
LABEL_25:
    v12 = (v24 - 1) & v24;
    v15 = __clz(__rbit64(v24)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (uint64_t *)(*(_QWORD *)(v2 + 48) + 16 * v15);
    v19 = *v17;
    v18 = v17[1];
    v20 = 8 * v15;
    v21 = *(_QWORD *)(*(_QWORD *)(v2 + 56) + v20);
    v22 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    *v22 = v19;
    v22[1] = v18;
    *(_QWORD *)(*(_QWORD *)(v4 + 56) + v20) = v21;
    swift_bridgeObjectRetain(v18);
  }
  v25 = v23 + 2;
  if (v25 >= v13)
    goto LABEL_26;
  v24 = *(_QWORD *)(v6 + 8 * v25);
  if (v24)
  {
    v9 = v25;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v25 + 1;
    if (__OFADD__(v25, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v24 = *(_QWORD *)(v6 + 8 * v9);
    ++v25;
    if (v24)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
}

Swift::Int sub_100079764(uint64_t a1)
{
  _QWORD v2[9];

  Hasher.init(_seed:)(v2, a1);
  String.hash(into:)(v2, 1953460082, 0xE400000000000000);
  return Hasher._finalize()();
}

uint64_t sub_1000797A8(uint64_t a1)
{
  return String.hash(into:)(a1, 1953460082, 0xE400000000000000);
}

unint64_t sub_1000797B8(Swift::String string)
{
  void *object;
  Swift::String v2;
  unint64_t v3;

  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_10009DF60, v2);
  swift_bridgeObjectRelease(object);
  if (v3 >= 7)
    return 7;
  else
    return v3;
}

uint64_t sub_100079800(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;

  if (a3 != 1)
    return swift_bridgeObjectRetain(a3);
  return result;
}

unint64_t sub_100079814()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000A5020;
  if (!qword_1000A5020)
  {
    v1 = type metadata accessor for UUID(255);
    result = swift_getWitnessTable(&protocol conformance descriptor for UUID, v1);
    atomic_store(result, (unint64_t *)&qword_1000A5020);
  }
  return result;
}

uint64_t sub_10007985C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  char *v12;
  uint64_t v13;
  int v14;
  uint64_t v17;

  v1 = type metadata accessor for WidgetTileInfo(0);
  v2 = __chkstk_darwin(v1);
  v4 = (char *)&v17 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __chkstk_darwin(v2);
  v7 = (char *)&v17 - v6;
  v8 = (uint64_t *)(v0 + *(int *)(v5 + 76));
  v9 = v8[1];
  if (v9)
  {
    v10 = *v8;
  }
  else
  {
    v11 = *(_BYTE *)(v0 + *(int *)(v1 + 52));
    sub_100008BB8(v0, (uint64_t)&v17 - v6);
    if ((v11 & 1) != 0)
    {
      v12 = &v7[*(int *)(v1 + 56)];
      v13 = *(_QWORD *)v12;
      v14 = v12[8];
      sub_100008BFC((uint64_t)v7);
      if (v14 != 3 || v13 != 0)
      {
        sub_100008BB8(v0, (uint64_t)v4);
        __asm { BR              X11 }
      }
    }
    else
    {
      sub_100008BFC((uint64_t)v7);
    }
    v10 = static String.hfLocalized(_:)(0xD00000000000001ELL, 0x800000010008B5F0);
  }
  swift_bridgeObjectRetain(v9);
  return v10;
}

void sub_1000799CC(void *a1@<X8>)
{
  uint64_t v1;
  id v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  id v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;

  v2 = a1;
  v3 = objc_msgSend(v2, "services");
  v4 = sub_100008CBC(0, &qword_1000A5078, HMService_ptr);
  v5 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v3, v4);

  if ((unint64_t)v5 >> 62)
  {
    if (v5 < 0)
      v8 = v5;
    else
      v8 = v5 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v5);
    v9 = _CocoaArrayWrapper.endIndex.getter(v8);
    swift_bridgeObjectRelease(v5);
    if (v9)
    {
LABEL_3:
      if ((v5 & 0xC000000000000001) != 0)
      {
        v6 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v5);
      }
      else
      {
        if (!*(_QWORD *)((v5 & 0xFFFFFFFFFFFFF8) + 0x10))
        {
          __break(1u);
          JUMPOUT(0x100079B20);
        }
        v6 = *(id *)(v5 + 32);
      }
      v7 = v6;
      swift_bridgeObjectRelease(v5);
      sub_10007AAC0();

      JUMPOUT(0x100079A70);
    }
  }
  else if (*(_QWORD *)((v5 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    goto LABEL_3;
  }

  swift_bridgeObjectRelease(v5);
  sub_100008BFC(v1);
  JUMPOUT(0x1000799A0);
}

void sub_100079A7C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  sub_100008BFC(v2);
  if ((*(_BYTE *)(v0 + *(int *)(v1 + 64)) & 1) != 0)
    JUMPOUT(0x100079994);
  JUMPOUT(0x1000799A0);
}

void sub_100079B30()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  void *v23;
  id v24;
  void *v25;
  id v26;
  id v27;
  uint64_t v28;
  uint64_t v29;
  id v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  void (*v35)(char *, uint64_t);
  uint64_t v36;
  char *v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  id v46;
  uint64_t v47;
  char v48;
  char v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  void (*v54)(char *, _QWORD, uint64_t);
  char *v55;
  uint64_t v56;
  char *v57;
  id v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;

  v1 = v0;
  v2 = type metadata accessor for CharacteristicKind(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v52 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for ServiceKind(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = __chkstk_darwin(v6);
  v59 = (char *)&v52 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __chkstk_darwin(v8);
  v12 = (char *)&v52 - v11;
  v13 = __chkstk_darwin(v10);
  v15 = (char *)&v52 - v14;
  __chkstk_darwin(v13);
  v17 = (char *)&v52 - v16;
  v18 = type metadata accessor for WidgetTileInfo(0);
  v19 = v1 + *(int *)(v18 + 72);
  if ((*(_BYTE *)(v19 + 8) & 1) == 0)
  {
    sub_10007A6BC(*(double *)v19);
    return;
  }
  v20 = v18;
  v21 = v1 + *(int *)(v18 + 56);
  v22 = *(unsigned __int8 *)(v21 + 8);
  if ((v22 - 2) < 2)
    return;
  v23 = *(void **)v21;
  v55 = v5;
  v56 = v3;
  v57 = v12;
  if (v22)
  {
    v26 = v23;
    v27 = objc_msgSend(v26, "services");
    v28 = sub_100008CBC(0, &qword_1000A5078, HMService_ptr);
    v29 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v27, v28);

    if ((unint64_t)v29 >> 62)
    {
      if (v29 < 0)
        v50 = v29;
      else
        v50 = v29 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v29);
      v51 = _CocoaArrayWrapper.endIndex.getter(v50);
      swift_bridgeObjectRelease(v29);
      if (v51)
        goto LABEL_9;
    }
    else if (*(_QWORD *)((v29 & 0xFFFFFFFFFFFFF8) + 0x10))
    {
LABEL_9:
      if ((v29 & 0xC000000000000001) != 0)
      {
        v30 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v29);
      }
      else
      {
        if (!*(_QWORD *)((v29 & 0xFFFFFFFFFFFFF8) + 0x10))
        {
          __break(1u);
          return;
        }
        v30 = *(id *)(v29 + 32);
      }
      v25 = v30;
      swift_bridgeObjectRelease(v29);

      goto LABEL_13;
    }
    swift_bridgeObjectRelease(v29);

    return;
  }
  v24 = v23;
  v25 = v24;
LABEL_13:
  v53 = v2;
  v58 = v25;
  HMService.serviceKind.getter(v24);
  v54 = *(void (**)(char *, _QWORD, uint64_t))(v7 + 104);
  v54(v15, enum case for ServiceKind.thermostat(_:), v6);
  v31 = sub_10007FE94();
  dispatch thunk of RawRepresentable.rawValue.getter(&v62, v6, v31);
  dispatch thunk of RawRepresentable.rawValue.getter(&v60, v6, v31);
  v32 = v63;
  v33 = v61;
  if (v62 == v60 && v63 == v61)
  {
    v34 = 1;
    v33 = v63;
  }
  else
  {
    v34 = _stringCompareWithSmolCheck(_:_:expecting:)(v62, v63, v60, v61, 0);
  }
  swift_bridgeObjectRelease(v32);
  swift_bridgeObjectRelease(v33);
  v35 = *(void (**)(char *, uint64_t))(v7 + 8);
  v35(v15, v6);
  v36 = ((uint64_t (*)(char *, uint64_t))v35)(v17, v6);
  if ((v34 & 1) == 0)
  {
    v37 = v57;
    HMService.serviceKind.getter(v36);
    v38 = v59;
    v54(v59, enum case for ServiceKind.heaterCooler(_:), v6);
    dispatch thunk of RawRepresentable.rawValue.getter(&v62, v6, v31);
    dispatch thunk of RawRepresentable.rawValue.getter(&v60, v6, v31);
    v39 = v63;
    v40 = v61;
    if (v62 == v60 && v63 == v61)
    {
      swift_bridgeObjectRelease_n(v63, 2);
      v35(v38, v6);
      v35(v37, v6);
    }
    else
    {
      v41 = _stringCompareWithSmolCheck(_:_:expecting:)(v62, v63, v60, v61, 0);
      swift_bridgeObjectRelease(v39);
      swift_bridgeObjectRelease(v40);
      v35(v38, v6);
      v35(v37, v6);
      if ((v41 & 1) == 0)
      {

        return;
      }
    }
  }
  if ((*(_BYTE *)(v1 + *(int *)(v20 + 52)) & 1) != 0)
  {
    v43 = (uint64_t)v55;
    v42 = v56;
    v44 = v53;
    (*(void (**)(char *, _QWORD, uint64_t))(v56 + 104))(v55, enum case for CharacteristicKind.currentTemperature(_:), v53);
    v45 = *(_QWORD *)(v1 + *(int *)(v20 + 60));
    v46 = v58;
    v47 = sub_100008FF0(v43, v45);
    v49 = v48;
    (*(void (**)(uint64_t, uint64_t))(v42 + 8))(v43, v44);
    if ((v49 & 1) == 0)
      sub_10007A6BC(*(double *)&v47);

  }
  else
  {
    static String.hfLocalized(_:)(0xD00000000000001FLL, 0x800000010008BF30);

  }
}

uint64_t sub_100079FF4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  int v18;
  _QWORD v21[2];

  v1 = type metadata accessor for ServiceKind(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = __chkstk_darwin(v1);
  __chkstk_darwin(v3);
  v4 = type metadata accessor for WidgetTileInfo(0);
  v5 = __chkstk_darwin(v4);
  v7 = (char *)v21 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __chkstk_darwin(v5);
  v10 = (char *)v21 - v9;
  v11 = (uint64_t *)(v0 + *(int *)(v8 + 76));
  v12 = v11[1];
  if (v12)
  {
    v13 = *v11;
  }
  else
  {
    v14 = *(_BYTE *)(v0 + *(int *)(v4 + 52));
    sub_100008BB8(v0, (uint64_t)v21 - v9);
    if ((v14 & 1) != 0)
    {
      v21[1] = v2;
      v15 = (uint64_t)v7;
      v16 = &v10[*(int *)(v4 + 56)];
      v17 = *(_QWORD *)v16;
      v18 = v16[8];
      sub_100008BFC((uint64_t)v10);
      if (v18 != 3 || v17 != 0)
      {
        sub_100008BB8(v0, v15);
        __asm { BR              X11 }
      }
    }
    else
    {
      sub_100008BFC((uint64_t)v10);
    }
    v13 = static String.hfLocalized(_:)(0xD00000000000001ELL, 0x800000010008B5F0);
  }
  swift_bridgeObjectRetain(v12);
  return v13;
}

void sub_10007A210(void *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  id v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  id v10;
  uint64_t v11;
  int v12;
  unsigned int *v13;
  const char *v14;
  uint64_t v15;
  uint64_t v16;

  v5 = a1;
  v6 = objc_msgSend(v5, "services");
  v7 = sub_100008CBC(0, &qword_1000A5078, HMService_ptr);
  v8 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v6, v7);

  if ((unint64_t)v8 >> 62)
  {
    if (v8 < 0)
      v15 = v8;
    else
      v15 = v8 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v8);
    v16 = _CocoaArrayWrapper.endIndex.getter(v15);
    swift_bridgeObjectRelease(v8);
    if (v16)
      goto LABEL_3;
  }
  else if (*(_QWORD *)((v8 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
LABEL_3:
    if ((v8 & 0xC000000000000001) != 0)
    {
      v10 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v8);
      v9 = *(_QWORD *)(v4 - 88);
    }
    else
    {
      v9 = *(_QWORD *)(v4 - 88);
      if (!*(_QWORD *)((v8 & 0xFFFFFFFFFFFFF8) + 0x10))
      {
        __break(1u);
        JUMPOUT(0x10007A6ACLL);
      }
      v10 = *(id *)(v8 + 32);
    }
    v11 = swift_bridgeObjectRelease(v8);
    HMService.serviceKind.getter(v11);
    v12 = (*(uint64_t (**)(uint64_t, uint64_t))(v9 + 88))(v2, v3);
    if (v12 != enum case for ServiceKind.airPurifier(_:))
    {
      if (v12 == enum case for ServiceKind.door(_:))
      {
LABEL_8:
        sub_10007985C();
LABEL_12:

        JUMPOUT(0x10007A3A0);
      }
      if (v12 != enum case for ServiceKind.fan(_:))
      {
        if (v12 == enum case for ServiceKind.faucet(_:)
          || v12 == enum case for ServiceKind.garageDoorOpener(_:)
          || v12 == enum case for ServiceKind.heaterCooler(_:))
        {
          goto LABEL_8;
        }
        if (v12 == enum case for ServiceKind.humidifierDehumidifier(_:))
        {
          sub_10007E904();
          goto LABEL_12;
        }
        if (v12 == enum case for ServiceKind.irrigationSystem(_:))
          goto LABEL_8;
        if (v12 == enum case for ServiceKind.lightbulb(_:))
        {
          v13 = (unsigned int *)&enum case for CharacteristicKind.brightness(_:);
          v14 = "lightbulb: %s brightnessValue: %ld";
          goto LABEL_11;
        }
        if (v12 == enum case for ServiceKind.lockMechanism(_:)
          || v12 == enum case for ServiceKind.securitySystem(_:)
          || v12 == enum case for ServiceKind.thermostat(_:)
          || v12 == enum case for ServiceKind.valve(_:))
        {
          goto LABEL_8;
        }
        if (v12 != enum case for ServiceKind.ventilationFan(_:))
        {
          if (v12 != enum case for ServiceKind.window(_:) && v12 != enum case for ServiceKind.windowCovering(_:))
          {
            sub_10007F538();
            (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v2, v3);
            goto LABEL_12;
          }
          goto LABEL_8;
        }
      }
    }
    v13 = (unsigned int *)&enum case for CharacteristicKind.rotationSpeed(_:);
    v14 = "fanActivated: %s rotationSpeedValue: %ld";
LABEL_11:
    sub_10007F9C8(v13, v14);
    goto LABEL_12;
  }

  swift_bridgeObjectRelease(v8);
  sub_100008BFC(v1);
  JUMPOUT(0x10007A1E0);
}

void sub_10007A2EC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  sub_100008BFC(v1);
  if ((*(_BYTE *)(v0 + *(int *)(v2 + 64)) & 1) != 0)
    JUMPOUT(0x10007A1D4);
  JUMPOUT(0x10007A684);
}

void sub_10007A320()
{
  JUMPOUT(0x10007A1B8);
}

uint64_t sub_10007A6BC(double a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  void *v23;
  id v24;
  char v25;
  double v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  char *v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  id v40;
  char *v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;

  v2 = type metadata accessor for NumberFormatStyleConfiguration.Precision(0);
  v50 = *(_QWORD *)(v2 - 8);
  v51 = v2;
  __chkstk_darwin(v2);
  v48 = (char *)&v40 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v47 = sub_10000527C(&qword_1000A74C8);
  v49 = *(_QWORD *)(v47 - 8);
  __chkstk_darwin(v47);
  v5 = (char *)&v40 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_10000527C(&qword_1000A74D0);
  __chkstk_darwin(v6);
  v42 = (char *)&v40 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_10000527C(&qword_1000A74D8);
  __chkstk_darwin(v8);
  v41 = (char *)&v40 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v44 = sub_10000527C(&qword_1000A74E0);
  v46 = *(_QWORD *)(v44 - 8);
  __chkstk_darwin(v44);
  v11 = (char *)&v40 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v45 = sub_10000527C(&qword_1000A74E8);
  v43 = *(_QWORD *)(v45 - 8);
  __chkstk_darwin(v45);
  v13 = (char *)&v40 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_10000527C(&qword_1000A74F0);
  __chkstk_darwin(v14);
  v16 = (char *)&v40 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = type metadata accessor for Locale(0);
  __chkstk_darwin(v17);
  v19 = (char *)&v40 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = sub_100008CBC(0, &qword_1000A74F8, NSUnitTemperature_ptr);
  v21 = ((uint64_t (*)(void))static Locale.autoupdatingCurrent.getter)();
  static MeasurementFormatUnitUsage<>.weather.getter(v21);
  v22 = (void *)NSUnitTemperature.init(forLocale:usage:)(v19, v16);
  v40 = v22;
  v23 = (void *)objc_opt_self(NSUnitTemperature);
  v24 = objc_msgSend(v23, "celsius");
  v25 = static NSObject.== infix(_:_:)(v22, v24);

  v26 = round(a1 + a1) * 0.5;
  if ((v25 & 1) != 0)
    a1 = v26;
  v27 = v25 & 1;
  Measurement.init(value:unit:)(objc_msgSend(v23, "celsius"), v20, a1);
  v28 = v41;
  v29 = static Measurement<>.FormatStyle.UnitWidth.narrow.getter(v20);
  v30 = static MeasurementFormatUnitUsage<>.weather.getter(v29);
  static Locale.autoupdatingCurrent.getter(v30);
  v31 = sub_10007FE50();
  FloatingPointFormatStyle.init(locale:)(v19, &type metadata for Double, v31);
  v32 = v48;
  static NumberFormatStyleConfiguration.Precision.fractionLength(_:)(v27);
  v33 = v42;
  v34 = v47;
  FloatingPointFormatStyle.precision(_:)(v32, v47);
  (*(void (**)(char *, uint64_t))(v50 + 8))(v32, v51);
  v35 = v49;
  (*(void (**)(char *, uint64_t))(v49 + 8))(v5, v34);
  v36 = (*(uint64_t (**)(char *, _QWORD, uint64_t, uint64_t))(v35 + 56))(v33, 0, 1, v34);
  static Locale.autoupdatingCurrent.getter(v36);
  Measurement<>.FormatStyle<>.init(width:locale:usage:hidesScaleName:numberFormatStyle:)(v28, v19, v16, 1, v33);
  v37 = v44;
  v38 = Measurement<>.FormatStyle.format(_:)(v13, v44);

  (*(void (**)(char *, uint64_t))(v46 + 8))(v11, v37);
  (*(void (**)(char *, uint64_t))(v43 + 8))(v13, v45);
  return v38;
}

id sub_10007AAC0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;

  v0 = type metadata accessor for ServiceKind(0);
  v1 = *(_QWORD *)(v0 - 8);
  v2 = __chkstk_darwin(v0);
  v4 = (char *)&v9 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  HMService.serviceKind.getter(v2);
  v5 = (*(uint64_t (**)(char *, uint64_t))(v1 + 88))(v4, v0);
  if (v5 == enum case for ServiceKind.airPurifier(_:))
    return (id)static String.hfLocalized(_:)(0xD000000000000022, 0x800000010008B640);
  if (v5 != enum case for ServiceKind.door(_:))
  {
    if (v5 != enum case for ServiceKind.fan(_:))
    {
      if (v5 == enum case for ServiceKind.faucet(_:))
      {
        sub_10007D54C();
        return (id)v6;
      }
      if (v5 == enum case for ServiceKind.garageDoorOpener(_:))
        return sub_10007BC70();
      if (v5 == enum case for ServiceKind.heaterCooler(_:))
        return (id)sub_10007AD50();
      if (v5 != enum case for ServiceKind.humidifierDehumidifier(_:))
      {
        if (v5 == enum case for ServiceKind.irrigationSystem(_:))
        {
          sub_10007CFF4();
          return (id)v6;
        }
        if (v5 != enum case for ServiceKind.lightbulb(_:))
        {
          if (v5 == enum case for ServiceKind.lockMechanism(_:))
            return sub_10007C36C();
          if (v5 == enum case for ServiceKind.securitySystem(_:))
            return (id)sub_10007C8A4();
          if (v5 == enum case for ServiceKind.thermostat(_:))
            return sub_10007B4E0();
          if (v5 == enum case for ServiceKind.valve(_:))
            return sub_10007D9A8();
          if (v5 != enum case for ServiceKind.ventilationFan(_:))
          {
            if (v5 != enum case for ServiceKind.window(_:) && v5 != enum case for ServiceKind.windowCovering(_:))
            {
              v7 = static String.hfLocalized(_:)(0xD000000000000022, 0x800000010008B640);
              (*(void (**)(char *, uint64_t))(v1 + 8))(v4, v0);
              return (id)v7;
            }
            return sub_10007DE8C();
          }
        }
      }
    }
    return (id)static String.hfLocalized(_:)(0xD000000000000022, 0x800000010008B640);
  }
  return sub_10007DE8C();
}

uint64_t sub_10007AD50()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  id v16;
  id v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  id v21;
  void (*v22)(char *, _QWORD, uint64_t);
  uint64_t v23;
  char v24;
  char v25;
  void (*v26)(char *, uint64_t);
  char v27;
  char v28;
  int v29;
  int v30;
  int v31;
  uint64_t v32;
  id v33;
  NSObject *v34;
  os_log_type_t v35;
  uint64_t v36;
  uint64_t v37;
  id v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  double v59;
  const char *v60;
  unint64_t v61;
  unint64_t v62;
  const char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  int v76;
  int v77;
  int v78;
  unint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;

  v1 = type metadata accessor for UUID(0);
  v2 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  v4 = (char *)&v73 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for CharacteristicKind(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v73 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for WidgetTileInfo(0);
  v10 = 0;
  v11 = v0 + *(int *)(v9 + 56);
  v12 = *(unsigned __int8 *)(v11 + 8);
  if ((v12 - 2) < 2)
    return v10;
  v13 = v9;
  v81 = v2;
  v14 = v0;
  v15 = *(void **)v11;
  if (!v12)
  {
    v16 = v15;
LABEL_10:
    v22 = *(void (**)(char *, _QWORD, uint64_t))(v6 + 104);
    v22(v8, enum case for CharacteristicKind.targetHeaterCoolerState(_:), v5);
    v23 = *(int *)(v13 + 60);
    v80 = sub_100008FE4((uint64_t)v8, *(_QWORD *)(v14 + v23));
    v25 = v24;
    v26 = *(void (**)(char *, uint64_t))(v6 + 8);
    v26(v8, v5);
    if ((v25 & 1) != 0)
      goto LABEL_13;
    v22(v8, enum case for CharacteristicKind.currentHeaterCoolerState(_:), v5);
    v79 = sub_100008FE4((uint64_t)v8, *(_QWORD *)(v14 + v23));
    v28 = v27;
    v26(v8, v5);
    if ((v28 & 1) != 0
      || (v22(v8, enum case for CharacteristicKind.active(_:), v5),
          v78 = _sSo9HMServiceC10HomeWidgetE9BOOLValue3for4withSbSg0B9DataModel18CharacteristicKindO_SDy10Foundation4UUIDVypGSgtF_0((uint64_t)v8, *(_QWORD *)(v14 + v23)), v29 = v78, v26(v8, v5), v29 == 2))
    {
LABEL_13:

      return 0;
    }
    v22(v8, enum case for CharacteristicKind.heatingThreshold(_:), v5);
    v13 = sub_100008FF0((uint64_t)v8, *(_QWORD *)(v14 + v23));
    v77 = v30;
    v26(v8, v5);
    v22(v8, enum case for CharacteristicKind.coolingThreshold(_:), v5);
    v20 = sub_100008FF0((uint64_t)v8, *(_QWORD *)(v14 + v23));
    v76 = v31;
    v26(v8, v5);
    v75 = v14;
    if (qword_1000A4F08 == -1)
      goto LABEL_15;
    goto LABEL_52;
  }
  v17 = v15;
  v18 = objc_msgSend(v17, "services");
  v19 = sub_100008CBC(0, &qword_1000A5078, HMService_ptr);
  v20 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v18, v19);

  if (!((unint64_t)v20 >> 62))
  {
    v16 = *(id *)((v20 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v16)
      goto LABEL_6;
LABEL_47:
    swift_bridgeObjectRelease(v20);

    return 0;
  }
  if (v20 < 0)
    v71 = v20;
  else
    v71 = v20 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v20);
  v16 = (id)_CocoaArrayWrapper.endIndex.getter(v71);
  swift_bridgeObjectRelease(v20);
  if (!v16)
    goto LABEL_47;
LABEL_6:
  if ((v20 & 0xC000000000000001) != 0)
  {
    v21 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v20);
    goto LABEL_9;
  }
  if (*(_QWORD *)((v20 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    v21 = *(id *)(v20 + 32);
LABEL_9:
    v16 = v21;
    swift_bridgeObjectRelease(v20);

    goto LABEL_10;
  }
  __break(1u);
LABEL_52:
  swift_once(&qword_1000A4F08, sub_100053184);
LABEL_15:
  v32 = type metadata accessor for Logger(0);
  sub_100014698(v32, (uint64_t)qword_1000A7A80);
  v33 = v16;
  v34 = Logger.logObject.getter(v33);
  v35 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v34, v35))
  {
    v36 = swift_slowAlloc(32, -1);
    v83 = swift_slowAlloc(32, -1);
    v74 = v20;
    v37 = v83;
    *(_DWORD *)v36 = 136315650;
    v73 = v36 + 4;
    v38 = objc_msgSend(v33, "uniqueIdentifier");
    static UUID._unconditionallyBridgeFromObjectiveC(_:)(v38);

    v40 = UUID.uuidString.getter(v39);
    v41 = v13;
    v43 = v42;
    (*(void (**)(char *, uint64_t))(v81 + 8))(v4, v1);
    v82 = sub_100023980(v40, v43, &v83);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v82, &v83, v73, v36 + 12);

    v44 = v43;
    v13 = v41;
    swift_bridgeObjectRelease(v44);
    *(_WORD *)(v36 + 12) = 2048;
    v82 = v79;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v82, &v83, v36 + 14, v36 + 22);
    *(_WORD *)(v36 + 22) = 2048;
    v45 = v80;
    v82 = v80;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v82, &v83, v36 + 24, v36 + 32);
    _os_log_impl((void *)&_mh_execute_header, v34, v35, "heaterCooler: %s currentHeaterCoolerState: %ld targetHeaterCoolerState: %ld", (uint8_t *)v36, 0x20u);
    swift_arrayDestroy(v37, 1, (char *)&type metadata for Any + 8);
    v46 = v37;
    v20 = v74;
    swift_slowDealloc(v46, -1, -1);
    swift_slowDealloc(v36, -1, -1);

    if ((v78 & 1) != 0)
      goto LABEL_17;
  }
  else
  {

    v45 = v80;
    if ((v78 & 1) != 0)
    {
LABEL_17:
      if (v45 == 2)
      {
        if (v79 >= 2)
        {
          if (v79 == 2)
          {
LABEL_32:
            if ((v77 & 1) != 0)
              goto LABEL_42;
            v59 = *(double *)&v13;
            v60 = "HFServiceControlDescriptionHeaterCoolerHeatingToWithTemperature";
            goto LABEL_34;
          }
LABEL_27:
          if (v79 != 3 || (v76 & 1) != 0)
            goto LABEL_42;
          v59 = *(double *)&v20;
          v60 = "HFServiceControlDescriptionHeaterCoolerCoolingToWithTemperature";
LABEL_34:
          v61 = (unint64_t)(v60 - 32) | 0x8000000000000000;
          v62 = 0xD00000000000003FLL;
LABEL_40:
          v64 = static String.hfLocalized(_:)(v62, v61);
          v66 = v65;
          v67 = sub_10000527C(&qword_1000A74B8);
          v51 = swift_allocObject(v67, 72, 7);
          *(_OWORD *)(v51 + 16) = xmmword_100086C80;
          v68 = sub_10007A6BC(v59);
          v70 = v69;
          *(_QWORD *)(v51 + 56) = &type metadata for String;
          *(_QWORD *)(v51 + 64) = sub_10007FE0C();
          *(_QWORD *)(v51 + 32) = v68;
          *(_QWORD *)(v51 + 40) = v70;
          v10 = String.init(format:arguments:)(v64, v66, v51);

          v58 = v66;
          goto LABEL_41;
        }
        if ((v76 & 1) != 0)
          goto LABEL_42;
        v59 = *(double *)&v20;
        v62 = 0xD000000000000043;
        v63 = "HFServiceControlDescriptionHeaterCoolerTargetCoolingWithTemperature";
      }
      else
      {
        if (v45 != 1)
        {
          if (!v45 && (v77 & 1) == 0 && (v76 & 1) == 0)
          {
            v47 = static String.hfLocalized(_:)(0xD00000000000001BLL, 0x800000010008B7C0);
            v49 = v48;
            v50 = sub_10000527C(&qword_1000A74B8);
            v51 = swift_allocObject(v50, 112, 7);
            *(_OWORD *)(v51 + 16) = xmmword_100086CA0;
            v52 = sub_10007A6BC(*(double *)&v13);
            v54 = v53;
            *(_QWORD *)(v51 + 56) = &type metadata for String;
            v55 = sub_10007FE0C();
            *(_QWORD *)(v51 + 64) = v55;
            *(_QWORD *)(v51 + 32) = v52;
            *(_QWORD *)(v51 + 40) = v54;
            v56 = static ClimateSummarizer.temperatureAverageString(_:)(*(double *)&v20);
            *(_QWORD *)(v51 + 96) = &type metadata for String;
            *(_QWORD *)(v51 + 104) = v55;
            *(_QWORD *)(v51 + 72) = v56;
            *(_QWORD *)(v51 + 80) = v57;
            v10 = String.init(format:arguments:)(v47, v49, v51);

            v58 = v49;
LABEL_41:
            swift_bridgeObjectRelease(v58);
            swift_bridgeObjectRelease(v51);
            return v10;
          }
LABEL_42:

          return 0;
        }
        if (v79 >= 2)
        {
          if (v79 == 2)
            goto LABEL_32;
          goto LABEL_27;
        }
        if ((v77 & 1) != 0)
          goto LABEL_42;
        v59 = *(double *)&v13;
        v62 = 0xD000000000000043;
        v63 = "HFServiceControlDescriptionHeaterCoolerTargetHeatingWithTemperature";
      }
      v61 = (unint64_t)(v63 - 32) | 0x8000000000000000;
      goto LABEL_40;
    }
  }
  v10 = static String.hfLocalized(_:)(0xD00000000000002ALL, 0x800000010008B670);

  return v10;
}

id sub_10007B4E0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  id v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  id v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  id v21;
  void (*v22)(char *, _QWORD, uint64_t);
  uint64_t v23;
  char v24;
  char v25;
  void (*v26)(char *, uint64_t);
  uint64_t v27;
  char v28;
  char v29;
  int v30;
  int v31;
  char v32;
  uint64_t v33;
  NSObject *v34;
  os_log_type_t v35;
  int v36;
  _BOOL4 v37;
  uint64_t v38;
  uint64_t v39;
  id v40;
  id v41;
  id v42;
  uint64_t v43;
  uint64_t v44;
  id v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  id v52;
  double v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  double v66;
  const char *v67;
  unint64_t v68;
  unint64_t v69;
  const char *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v80;
  uint64_t v81;
  int v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  int v86;
  int v87;
  uint64_t v88;
  id v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;

  v1 = v0;
  v2 = type metadata accessor for UUID(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v80 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for CharacteristicKind(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v80 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for WidgetTileInfo(0);
  v11 = 0;
  v12 = v1 + *(int *)(v10 + 56);
  v13 = *(unsigned __int8 *)(v12 + 8);
  if ((v13 - 2) >= 2)
  {
    v14 = v10;
    v92 = v3;
    v15 = *(void **)v12;
    if (!v13)
    {
      v11 = v15;
      goto LABEL_10;
    }
    v16 = v1;
    v17 = v15;
    v18 = objc_msgSend(v17, "services");
    v19 = sub_100008CBC(0, &qword_1000A5078, HMService_ptr);
    v20 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v18, v19);

    if ((unint64_t)v20 >> 62)
    {
      if (v20 < 0)
        v78 = v20;
      else
        v78 = v20 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v20);
      v11 = (id)_CocoaArrayWrapper.endIndex.getter(v78);
      swift_bridgeObjectRelease(v20);
      if (v11)
        goto LABEL_6;
    }
    else
    {
      v11 = *(id *)((v20 & 0xFFFFFFFFFFFFF8) + 0x10);
      if (v11)
      {
LABEL_6:
        if ((v20 & 0xC000000000000001) != 0)
        {
          v21 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v20);
        }
        else
        {
          if (!*(_QWORD *)((v20 & 0xFFFFFFFFFFFFF8) + 0x10))
          {
            __break(1u);
            goto LABEL_52;
          }
          v21 = *(id *)(v20 + 32);
        }
        v11 = v21;
        swift_bridgeObjectRelease(v20);

        v1 = v16;
LABEL_10:
        v22 = *(void (**)(char *, _QWORD, uint64_t))(v7 + 104);
        v22(v9, enum case for CharacteristicKind.targetHeatingCoolingMode(_:), v6);
        v23 = *(int *)(v14 + 60);
        v91 = sub_100008FE4((uint64_t)v9, *(_QWORD *)(v1 + v23));
        v25 = v24;
        v26 = *(void (**)(char *, uint64_t))(v7 + 8);
        v26(v9, v6);
        if ((v25 & 1) != 0
          || (v22(v9, enum case for CharacteristicKind.currentHeatingCooling(_:), v6),
              v90 = sub_100008FE4((uint64_t)v9, *(_QWORD *)(v1 + v23)),
              v27 = v1,
              v29 = v28,
              v26(v9, v6),
              (v29 & 1) != 0))
        {

          return 0;
        }
        v22(v9, enum case for CharacteristicKind.targetTemperature(_:), v6);
        v85 = sub_100008FF0((uint64_t)v9, *(_QWORD *)(v27 + v23));
        v86 = v30;
        v26(v9, v6);
        v22(v9, enum case for CharacteristicKind.heatingThreshold(_:), v6);
        v84 = sub_100008FF0((uint64_t)v9, *(_QWORD *)(v27 + v23));
        v87 = v31;
        v26(v9, v6);
        v22(v9, enum case for CharacteristicKind.coolingThreshold(_:), v6);
        v88 = v27;
        v17 = (id)sub_100008FF0((uint64_t)v9, *(_QWORD *)(v27 + v23));
        LOBYTE(v20) = v32;
        v26(v9, v6);
        if (qword_1000A4F08 == -1)
        {
LABEL_13:
          v33 = type metadata accessor for Logger(0);
          sub_100014698(v33, (uint64_t)qword_1000A7A80);
          v89 = v11;
          v34 = Logger.logObject.getter(v89);
          v35 = static os_log_type_t.default.getter();
          v36 = v35;
          v37 = os_log_type_enabled(v34, v35);
          v38 = v92;
          if (v37)
          {
            v39 = swift_slowAlloc(32, -1);
            v83 = swift_slowAlloc(32, -1);
            v94 = v83;
            *(_DWORD *)v39 = 136315650;
            v81 = v39 + 4;
            v40 = v89;
            v41 = objc_msgSend(v89, "uniqueIdentifier");
            v82 = v36;
            v42 = v41;
            static UUID._unconditionallyBridgeFromObjectiveC(_:)(v41);

            v44 = UUID.uuidString.getter(v43);
            v45 = v17;
            v47 = v46;
            (*(void (**)(char *, uint64_t))(v38 + 8))(v5, v2);
            v93 = sub_100023980(v44, v47, &v94);
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v93, &v94, v81, v39 + 12);

            v48 = v47;
            v17 = v45;
            swift_bridgeObjectRelease(v48);
            *(_WORD *)(v39 + 12) = 2048;
            v49 = v91;
            v93 = v91;
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v93, &v94, v39 + 14, v39 + 22);
            *(_WORD *)(v39 + 22) = 2048;
            v50 = v90;
            v93 = v90;
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v93, &v94, v39 + 24, v39 + 32);
            _os_log_impl((void *)&_mh_execute_header, v34, (os_log_type_t)v82, "thermostat: %s targetHeatingCoolingMode: %ld currentHeatingCooling: %ld", (uint8_t *)v39, 0x20u);
            v51 = v83;
            swift_arrayDestroy(v83, 1, (char *)&type metadata for Any + 8);
            swift_slowDealloc(v51, -1, -1);
            swift_slowDealloc(v39, -1, -1);

          }
          else
          {

            v52 = v89;
            v50 = v90;
            v49 = v91;
          }
          if (v49 == 3)
          {
            if ((v87 & 1) == 0 && (v20 & 1) == 0)
            {
              v53 = *(double *)&v84;
              v54 = static String.hfLocalized(_:)(0xD00000000000001BLL, 0x800000010008B7C0);
              v56 = v55;
              v57 = sub_10000527C(&qword_1000A74B8);
              v58 = swift_allocObject(v57, 112, 7);
              *(_OWORD *)(v58 + 16) = xmmword_100086CA0;
              v59 = sub_10007A6BC(v53);
              v61 = v60;
              *(_QWORD *)(v58 + 56) = &type metadata for String;
              v62 = sub_10007FE0C();
              *(_QWORD *)(v58 + 64) = v62;
              *(_QWORD *)(v58 + 32) = v59;
              *(_QWORD *)(v58 + 40) = v61;
              v63 = static ClimateSummarizer.temperatureAverageString(_:)(*(double *)&v17);
              *(_QWORD *)(v58 + 96) = &type metadata for String;
              *(_QWORD *)(v58 + 104) = v62;
              *(_QWORD *)(v58 + 72) = v63;
              *(_QWORD *)(v58 + 80) = v64;
              v11 = (id)String.init(format:arguments:)(v54, v56, v58);

              v65 = v56;
LABEL_39:
              swift_bridgeObjectRelease(v65);
              swift_bridgeObjectRelease(v58);
              return v11;
            }
            goto LABEL_42;
          }
          if (v50 == 2)
          {
            if ((v86 & 1) == 0)
            {
              v66 = *(double *)&v85;
              v67 = "HFServiceDescriptionThermostatCoolingWithTemperature";
              goto LABEL_28;
            }
          }
          else
          {
            if (v50 == 1)
            {
              if ((v86 & 1) == 0)
              {
                v66 = *(double *)&v85;
                v67 = "HFServiceDescriptionThermostatHeatingWithTemperature";
LABEL_28:
                v68 = (unint64_t)(v67 - 32) | 0x8000000000000000;
                v69 = 0xD000000000000034;
LABEL_38:
                v71 = static String.hfLocalized(_:)(v69, v68);
                v73 = v72;
                v74 = sub_10000527C(&qword_1000A74B8);
                v58 = swift_allocObject(v74, 72, 7);
                *(_OWORD *)(v58 + 16) = xmmword_100086C80;
                v75 = sub_10007A6BC(v66);
                v77 = v76;
                *(_QWORD *)(v58 + 56) = &type metadata for String;
                *(_QWORD *)(v58 + 64) = sub_10007FE0C();
                *(_QWORD *)(v58 + 32) = v75;
                *(_QWORD *)(v58 + 40) = v77;
                v11 = (id)String.init(format:arguments:)(v71, v73, v58);

                v65 = v73;
                goto LABEL_39;
              }
              goto LABEL_42;
            }
            if (v49 == 2 && !v50)
            {
              if ((v86 & 1) != 0)
                goto LABEL_42;
              v66 = *(double *)&v85;
              v69 = 0xD00000000000003ALL;
              v70 = "HFServiceDescriptionThermostatTargetCoolingWithTemperature";
LABEL_37:
              v68 = (unint64_t)(v70 - 32) | 0x8000000000000000;
              goto LABEL_38;
            }
            if (v49 != 1 || v50)
            {
              if (!v49 && !v50)
              {
                v11 = (id)static String.hfLocalized(_:)(0xD000000000000021, 0x800000010008B7E0);

                return v11;
              }
              goto LABEL_42;
            }
            if ((v86 & 1) == 0)
            {
              v66 = *(double *)&v85;
              v69 = 0xD00000000000003ALL;
              v70 = "HFServiceDescriptionThermostatTargetHeatingWithTemperature";
              goto LABEL_37;
            }
          }
LABEL_42:

          return 0;
        }
LABEL_52:
        swift_once(&qword_1000A4F08, sub_100053184);
        goto LABEL_13;
      }
    }
    swift_bridgeObjectRelease(v20);

  }
  return v11;
}

id sub_10007BC70()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  id v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  void *v15;
  void (*v16)(char *, _QWORD, uint64_t);
  id v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  char v21;
  char v22;
  char v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  NSObject *v27;
  os_log_type_t v28;
  uint64_t v29;
  uint64_t v30;
  id v31;
  id v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  os_log_t v37;
  uint64_t v38;
  id v39;
  char v40;
  unint64_t v41;
  const char *v42;
  id v43;
  NSObject *v44;
  os_log_type_t v45;
  uint8_t *v46;
  uint64_t v47;
  id v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  const char *v54;
  uint64_t v55;
  uint64_t v57;
  os_log_t v58;
  uint64_t v59;
  uint64_t v60;
  int v61;
  __int128 v62;
  uint64_t v63;
  id v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;

  v1 = v0;
  v2 = type metadata accessor for UUID(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v57 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for CharacteristicKind(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v57 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for WidgetTileInfo(0);
  v11 = 0;
  v12 = v1 + *(int *)(v10 + 56);
  v13 = *(unsigned __int8 *)(v12 + 8);
  if ((v13 - 2) < 2)
    return v11;
  v14 = v10;
  v65 = v3;
  v15 = *(void **)v12;
  if (!v13)
  {
    v63 = v2;
    v11 = v15;
LABEL_10:
    v16 = *(void (**)(char *, _QWORD, uint64_t))(v7 + 104);
    v16(v9, enum case for CharacteristicKind.currentDoorState(_:), v6);
    v2 = *(int *)(v14 + 60);
    v19 = sub_100008FE4((uint64_t)v9, *(_QWORD *)(v1 + v2));
    v22 = v21;
    v7 = *(_QWORD *)(v7 + 8);
    ((void (*)(char *, uint64_t))v7)(v9, v6);
    if ((v22 & 1) != 0
      || (v16(v9, enum case for CharacteristicKind.targetDoorState(_:), v6),
          *((_QWORD *)&v62 + 1) = sub_100008FE4((uint64_t)v9, *(_QWORD *)(v1 + v2)),
          v24 = v23,
          ((void (*)(char *, uint64_t))v7)(v9, v6),
          (v24 & 1) != 0))
    {

      return 0;
    }
    if (qword_1000A4F08 == -1)
      goto LABEL_13;
    goto LABEL_43;
  }
  v16 = v15;
  v17 = objc_msgSend(v16, "services");
  v18 = sub_100008CBC(0, &qword_1000A5078, HMService_ptr);
  v19 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v17, v18);

  if (!((unint64_t)v19 >> 62))
  {
    v11 = *(id *)((v19 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v11)
      goto LABEL_6;
LABEL_39:
    swift_bridgeObjectRelease(v19);

    return v11;
  }
  if (v19 < 0)
    v55 = v19;
  else
    v55 = v19 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v19);
  v11 = (id)_CocoaArrayWrapper.endIndex.getter(v55);
  swift_bridgeObjectRelease(v19);
  if (!v11)
    goto LABEL_39;
LABEL_6:
  v63 = v2;
  if ((v19 & 0xC000000000000001) != 0)
  {
    v20 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v19);
    goto LABEL_9;
  }
  if (*(_QWORD *)((v19 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    v20 = *(id *)(v19 + 32);
LABEL_9:
    v11 = v20;
    swift_bridgeObjectRelease(v19);

    goto LABEL_10;
  }
  __break(1u);
LABEL_43:
  swift_once(&qword_1000A4F08, sub_100053184);
LABEL_13:
  *(_QWORD *)&v62 = v19;
  v25 = type metadata accessor for Logger(0);
  v26 = sub_100014698(v25, (uint64_t)qword_1000A7A80);
  v64 = v11;
  v27 = Logger.logObject.getter(v64);
  v28 = static os_log_type_t.default.getter();
  v61 = v28;
  if (os_log_type_enabled(v27, v28))
  {
    v29 = swift_slowAlloc(32, -1);
    v60 = v26;
    v30 = v29;
    v59 = swift_slowAlloc(32, -1);
    v67 = v59;
    *(_DWORD *)v30 = 136315650;
    v57 = v30 + 4;
    v31 = objc_msgSend(v64, "uniqueIdentifier");
    v58 = v27;
    v32 = v31;
    static UUID._unconditionallyBridgeFromObjectiveC(_:)(v31);

    v34 = UUID.uuidString.getter(v33);
    v36 = v35;
    (*(void (**)(char *, uint64_t))(v65 + 8))(v5, v63);
    v66 = sub_100023980(v34, v36, &v67);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v66, &v67, v57, v30 + 12);

    swift_bridgeObjectRelease(v36);
    *(_WORD *)(v30 + 12) = 2048;
    v66 = v62;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v66, &v67, v30 + 14, v30 + 22);
    *(_WORD *)(v30 + 22) = 2048;
    v66 = *((_QWORD *)&v62 + 1);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v66, &v67, v30 + 24, v30 + 32);
    v37 = v58;
    _os_log_impl((void *)&_mh_execute_header, v58, (os_log_type_t)v61, "garageDoorOpener: %s currentValue: %ld targetValue: %ld", (uint8_t *)v30, 0x20u);
    v38 = v59;
    swift_arrayDestroy(v59, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v38, -1, -1);
    swift_slowDealloc(v30, -1, -1);

  }
  else
  {

    v39 = v64;
  }
  v16(v9, enum case for CharacteristicKind.obstructionDetected(_:), v6);
  v40 = _sSo9HMServiceC10HomeWidgetE9BOOLValue3for4withSbSg0B9DataModel18CharacteristicKindO_SDy10Foundation4UUIDVypGSgtF_0((uint64_t)v9, *(_QWORD *)(v1 + v2));
  ((void (*)(char *, uint64_t))v7)(v9, v6);
  if ((v40 & 1) == 0)
  {
    if (v62 == 0)
    {
      v41 = 0xD000000000000022;
      v42 = "HFCharacteristicValueDoorStateOpen";
LABEL_25:
      v53 = (unint64_t)(v42 - 32) | 0x8000000000000000;
LABEL_26:
      v11 = (id)static String.hfLocalized(_:)(v41, v53);

      return v11;
    }
    if (v62 == __PAIR128__(1, 1))
    {
      v41 = 0xD000000000000024;
      v42 = "HFCharacteristicValueDoorStateClosed";
      goto LABEL_25;
    }
    if (!*((_QWORD *)&v62 + 1))
    {
      v54 = "HFCharacteristicValueDoorStateOpening";
      goto LABEL_33;
    }
    if (*((_QWORD *)&v62 + 1) == 1)
    {
      v54 = "HFCharacteristicValueDoorStateClosing";
LABEL_33:
      v53 = (unint64_t)(v54 - 32) | 0x8000000000000000;
      v41 = 0xD000000000000025;
      goto LABEL_26;
    }

    return 0;
  }
  v43 = v64;
  v44 = Logger.logObject.getter(v43);
  v45 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v44, v45))
  {
    v46 = (uint8_t *)swift_slowAlloc(12, -1);
    v47 = swift_slowAlloc(32, -1);
    v67 = v47;
    *(_DWORD *)v46 = 136315138;
    v48 = objc_msgSend(v43, "uniqueIdentifier");
    static UUID._unconditionallyBridgeFromObjectiveC(_:)(v48);

    v50 = UUID.uuidString.getter(v49);
    v52 = v51;
    (*(void (**)(char *, uint64_t))(v65 + 8))(v5, v63);
    v66 = sub_100023980(v50, v52, &v67);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v66, &v67, v46 + 4, v46 + 12);

    swift_bridgeObjectRelease(v52);
    _os_log_impl((void *)&_mh_execute_header, v44, v45, "garageDoorOpener: %s obstructionDetected", v46, 0xCu);
    swift_arrayDestroy(v47, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v47, -1, -1);
    swift_slowDealloc(v46, -1, -1);

  }
  else
  {

  }
  v11 = (id)static String.hfLocalized(_:)(0xD000000000000031, 0x800000010008BA10);

  return v11;
}

id sub_10007C36C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  id v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  void *v15;
  id v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  void (*v21)(char *, _QWORD, uint64_t);
  uint64_t v22;
  char v23;
  char v24;
  void (*v25)(char *, uint64_t);
  char v26;
  char v27;
  uint64_t v28;
  id v29;
  NSObject *v30;
  os_log_type_t v31;
  uint64_t v32;
  uint64_t v33;
  id v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t v40;
  const char *v41;
  const char *v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;

  v1 = v0;
  v2 = type metadata accessor for UUID(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v46 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for CharacteristicKind(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v46 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for WidgetTileInfo(0);
  v11 = 0;
  v12 = v1 + *(int *)(v10 + 56);
  v13 = *(unsigned __int8 *)(v12 + 8);
  if ((v13 - 2) >= 2)
  {
    v14 = v10;
    v49 = v2;
    v15 = *(void **)v12;
    if (!v13)
    {
      v11 = v15;
      goto LABEL_10;
    }
    v16 = v15;
    v17 = objc_msgSend(v16, "services");
    v18 = sub_100008CBC(0, &qword_1000A5078, HMService_ptr);
    v19 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v17, v18);

    if ((unint64_t)v19 >> 62)
    {
      if (v19 < 0)
        v44 = v19;
      else
        v44 = v19 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v19);
      v11 = (id)_CocoaArrayWrapper.endIndex.getter(v44);
      swift_bridgeObjectRelease(v19);
      if (v11)
        goto LABEL_6;
    }
    else
    {
      v11 = *(id *)((v19 & 0xFFFFFFFFFFFFF8) + 0x10);
      if (v11)
      {
LABEL_6:
        if ((v19 & 0xC000000000000001) != 0)
        {
          v20 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v19);
        }
        else
        {
          if (!*(_QWORD *)((v19 & 0xFFFFFFFFFFFFF8) + 0x10))
          {
            __break(1u);
            goto LABEL_44;
          }
          v20 = *(id *)(v19 + 32);
        }
        v11 = v20;
        swift_bridgeObjectRelease(v19);

LABEL_10:
        v21 = *(void (**)(char *, _QWORD, uint64_t))(v7 + 104);
        v21(v9, enum case for CharacteristicKind.currentLockMechanismState(_:), v6);
        v22 = *(int *)(v14 + 60);
        v48 = sub_100008FE4((uint64_t)v9, *(_QWORD *)(v1 + v22));
        v24 = v23;
        v25 = *(void (**)(char *, uint64_t))(v7 + 8);
        v25(v9, v6);
        if ((v24 & 1) != 0
          || (v21(v9, enum case for CharacteristicKind.targetLockMechanismState(_:), v6),
              v14 = sub_100008FE4((uint64_t)v9, *(_QWORD *)(v1 + v22)),
              v27 = v26,
              v25(v9, v6),
              (v27 & 1) != 0))
        {

          return 0;
        }
        if (qword_1000A4F08 == -1)
        {
LABEL_13:
          v28 = type metadata accessor for Logger(0);
          sub_100014698(v28, (uint64_t)qword_1000A7A80);
          v29 = v11;
          v30 = Logger.logObject.getter(v29);
          v31 = static os_log_type_t.default.getter();
          if (os_log_type_enabled(v30, v31))
          {
            v32 = swift_slowAlloc(32, -1);
            v33 = swift_slowAlloc(32, -1);
            v51 = v33;
            *(_DWORD *)v32 = 136315650;
            v47 = v32 + 4;
            v34 = objc_msgSend(v29, "uniqueIdentifier");
            static UUID._unconditionallyBridgeFromObjectiveC(_:)(v34);

            v36 = UUID.uuidString.getter(v35);
            v38 = v37;
            (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v49);
            v50 = sub_100023980(v36, v38, &v51);
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v50, &v51, v47, v32 + 12);

            swift_bridgeObjectRelease(v38);
            *(_WORD *)(v32 + 12) = 2048;
            v39 = v48;
            v50 = v48;
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v50, &v51, v32 + 14, v32 + 22);
            *(_WORD *)(v32 + 22) = 2048;
            v50 = v14;
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v50, &v51, v32 + 24, v32 + 32);
            _os_log_impl((void *)&_mh_execute_header, v30, v31, "lockMechanism: %s currentValue: %ld targetValue: %ld", (uint8_t *)v32, 0x20u);
            swift_arrayDestroy(v33, 1, (char *)&type metadata for Any + 8);
            swift_slowDealloc(v33, -1, -1);
            swift_slowDealloc(v32, -1, -1);

            if (v39 != 3)
            {
LABEL_15:
              if (v39 == 2)
              {
                v40 = 0xD00000000000002DLL;
                v41 = "HFCharacteristicValueLockMechanismStateJammed";
LABEL_27:
                v43 = (unint64_t)(v41 - 32) | 0x8000000000000000;
                goto LABEL_28;
              }
              if (!(v39 | v14))
              {
                v40 = 0xD000000000000030;
                v41 = "HFCharacteristicValueLockMechanismStateUnsecured";
                goto LABEL_27;
              }
              if (v39 == 1 && !v14)
              {
                v40 = 0xD000000000000030;
                v41 = "HFCharacteristicValueLockMechanismStateUnlocking";
                goto LABEL_27;
              }
              if (!v39 && v14 == 1)
              {
                v42 = "HFCharacteristicValueLockMechanismStateLocking";
                goto LABEL_21;
              }
              if (v39 == 1 && v14 == 1)
              {
                v42 = "HFCharacteristicValueLockMechanismStateSecured";
                goto LABEL_21;
              }

              return 0;
            }
          }
          else
          {

            v39 = v48;
            if (v48 != 3)
              goto LABEL_15;
          }
          v42 = "HFCharacteristicValueLockMechanismStateUnknown";
LABEL_21:
          v43 = (unint64_t)(v42 - 32) | 0x8000000000000000;
          v40 = 0xD00000000000002ELL;
LABEL_28:
          v11 = (id)static String.hfLocalized(_:)(v40, v43);

          return v11;
        }
LABEL_44:
        swift_once(&qword_1000A4F08, sub_100053184);
        goto LABEL_13;
      }
    }
    swift_bridgeObjectRelease(v19);

  }
  return v11;
}

uint64_t sub_10007C8A4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  void *v15;
  id v16;
  id v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  id v21;
  uint64_t v22;
  char v23;
  char v24;
  void (*v25)(char *, uint64_t);
  uint64_t v26;
  uint64_t v27;
  id v28;
  NSObject *v29;
  os_log_type_t v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  id v34;
  id v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  char v44;
  id v45;
  NSObject *v46;
  os_log_type_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  id v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  unint64_t v55;
  uint64_t v56;
  char *v57;
  BOOL v58;
  unint64_t v59;
  unint64_t v60;
  unint64_t v61;
  unint64_t v62;
  char *v63;
  char *v64;
  BOOL v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v69;
  uint64_t v70;
  int v71;
  uint64_t v72;
  uint64_t v73;
  void (*v74)(char *, uint64_t);
  uint64_t v75;
  uint64_t v76;
  void (*v77)(char *, _QWORD, uint64_t);
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;

  v1 = v0;
  v2 = type metadata accessor for UUID(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v69 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for CharacteristicKind(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v69 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for WidgetTileInfo(0);
  v11 = 0;
  v12 = v0 + *(int *)(v10 + 56);
  v13 = *(unsigned __int8 *)(v12 + 8);
  if ((v13 - 2) < 2)
    return v11;
  v14 = v10;
  v15 = *(void **)v12;
  v78 = v3;
  if (!v13)
  {
    v16 = v15;
    goto LABEL_10;
  }
  v17 = v15;
  v18 = objc_msgSend(v17, "services");
  v19 = sub_100008CBC(0, &qword_1000A5078, HMService_ptr);
  v20 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v18, v19);

  if ((unint64_t)v20 >> 62)
  {
    if (v20 < 0)
      v66 = v20;
    else
      v66 = v20 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v20);
    v67 = _CocoaArrayWrapper.endIndex.getter(v66);
    swift_bridgeObjectRelease(v20);
    if (v67)
      goto LABEL_6;
LABEL_47:
    swift_bridgeObjectRelease(v20);

    return 0;
  }
  if (!*(_QWORD *)((v20 & 0xFFFFFFFFFFFFF8) + 0x10))
    goto LABEL_47;
LABEL_6:
  if ((v20 & 0xC000000000000001) != 0)
  {
    v21 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v20);
  }
  else
  {
    if (!*(_QWORD *)((v20 & 0xFFFFFFFFFFFFF8) + 0x10))
    {
      __break(1u);
      JUMPOUT(0x10007CFE4);
    }
    v21 = *(id *)(v20 + 32);
  }
  v16 = v21;
  swift_bridgeObjectRelease(v20);

LABEL_10:
  v77 = *(void (**)(char *, _QWORD, uint64_t))(v7 + 104);
  v77(v9, enum case for CharacteristicKind.currentSecuritySystemState(_:), v6);
  v76 = *(int *)(v14 + 60);
  v22 = sub_100008FE4((uint64_t)v9, *(_QWORD *)(v1 + v76));
  v24 = v23;
  v25 = *(void (**)(char *, uint64_t))(v7 + 8);
  v25(v9, v6);
  if ((v24 & 1) != 0)
  {

    return 0;
  }
  v74 = v25;
  if (qword_1000A4F08 != -1)
    swift_once(&qword_1000A4F08, sub_100053184);
  v26 = type metadata accessor for Logger(0);
  v27 = sub_100014698(v26, (uint64_t)qword_1000A7A80);
  v28 = v16;
  v73 = v27;
  v29 = Logger.logObject.getter(v28);
  v30 = static os_log_type_t.default.getter();
  v31 = v30;
  if (os_log_type_enabled(v29, v30))
  {
    v32 = swift_slowAlloc(22, -1);
    v75 = v22;
    v33 = v32;
    v72 = swift_slowAlloc(32, -1);
    v80 = v72;
    *(_DWORD *)v33 = 136315394;
    v70 = v33 + 4;
    v34 = objc_msgSend(v28, "uniqueIdentifier");
    v71 = v31;
    v35 = v34;
    static UUID._unconditionallyBridgeFromObjectiveC(_:)(v34);

    v37 = UUID.uuidString.getter(v36);
    v39 = v38;
    (*(void (**)(char *, uint64_t))(v78 + 8))(v5, v2);
    v79 = sub_100023980(v37, v39, &v80);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v79, &v80, v70, v33 + 12);

    swift_bridgeObjectRelease(v39);
    *(_WORD *)(v33 + 12) = 2048;
    v79 = v75;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v79, &v80, v33 + 14, v33 + 22);
    _os_log_impl((void *)&_mh_execute_header, v29, (os_log_type_t)v71, "securitySystem: %s currentValue: %ld", (uint8_t *)v33, 0x16u);
    v40 = v72;
    swift_arrayDestroy(v72, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v40, -1, -1);
    v41 = v33;
    v22 = v75;
    swift_slowDealloc(v41, -1, -1);

    if (v22 != 4)
      goto LABEL_15;
LABEL_20:
    v11 = static String.hfLocalized(_:)(0xD000000000000038, 0x800000010008BD10);

    return v11;
  }

  if (v22 == 4)
    goto LABEL_20;
LABEL_15:
  v77(v9, enum case for CharacteristicKind.targetSecuritySystemState(_:), v6);
  v42 = sub_100008FE4((uint64_t)v9, *(_QWORD *)(v1 + v76));
  v44 = v43;
  v74(v9, v6);
  if ((v44 & 1) != 0)
  {

    return 0;
  }
  v45 = v28;
  v46 = Logger.logObject.getter(v45);
  v47 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v46, v47))
  {
    v48 = swift_slowAlloc(22, -1);
    v75 = v22;
    v49 = v48;
    v50 = swift_slowAlloc(32, -1);
    v80 = v50;
    *(_DWORD *)v49 = 136315394;
    v77 = (void (*)(char *, _QWORD, uint64_t))(v49 + 4);
    v51 = objc_msgSend(v45, "uniqueIdentifier");
    static UUID._unconditionallyBridgeFromObjectiveC(_:)(v51);

    v53 = UUID.uuidString.getter(v52);
    v55 = v54;
    (*(void (**)(char *, uint64_t))(v78 + 8))(v5, v2);
    v79 = sub_100023980(v53, v55, &v80);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v79, &v80, v77, v49 + 12);

    swift_bridgeObjectRelease(v55);
    *(_WORD *)(v49 + 12) = 2048;
    v79 = v42;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v79, &v80, v49 + 14, v49 + 22);
    _os_log_impl((void *)&_mh_execute_header, v46, v47, "securitySystem: %s targetValue: %ld", (uint8_t *)v49, 0x16u);
    swift_arrayDestroy(v50, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v50, -1, -1);
    v56 = v49;
    v22 = v75;
    swift_slowDealloc(v56, -1, -1);

  }
  else
  {

  }
  switch(v42)
  {
    case 0:
      v57 = "ritySystemStateAwayArm";
      v58 = v22 == 0;
      goto LABEL_28;
    case 1:
      v57 = "ritySystemStateNightArm";
      v58 = v22 == 1;
LABEL_28:
      if (v58)
        v59 = 0xD000000000000036;
      else
        v59 = 0xD000000000000035;
      v60 = (unint64_t)v57 | 0x8000000000000000;
      if (v58)
        v61 = v60;
      else
        v61 = 0x800000010008BC10;
      goto LABEL_42;
    case 2:
      v62 = 0xD000000000000035;
      v63 = "ritySystemStateArming";
      v64 = "ritySystemStateDisarmed";
      v65 = v22 == 2;
      goto LABEL_36;
    case 3:
      v62 = 0xD000000000000038;
      v63 = "ritySystemStateDisarming";
      v64 = "ValueLockMechanismStateJammed";
      v65 = v22 == 3;
LABEL_36:
      if (v65)
        v59 = 0xD000000000000037;
      else
        v59 = v62;
      if (v65)
        v61 = (unint64_t)v63 | 0x8000000000000000;
      else
        v61 = (unint64_t)v64 | 0x8000000000000000;
LABEL_42:
      v11 = static String.hfLocalized(_:)(v59, v61);

      swift_bridgeObjectRelease(v61);
      break;
    default:

      return 0;
  }
  return v11;
}

void sub_10007CFF4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _BYTE *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  void *v14;
  id v15;
  id v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  void (*v21)(_BYTE *, _QWORD, uint64_t);
  uint64_t v22;
  char v23;
  void (*v24)(_BYTE *, uint64_t);
  int v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  id v30;
  NSObject *v31;
  os_log_type_t v32;
  int v33;
  _BOOL4 v34;
  uint64_t v35;
  uint64_t v36;
  id v37;
  id v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  char v43;
  int v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  const char *v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  _BYTE v53[4];
  int v54;
  uint64_t v55;
  int v56;
  int v57;
  int v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;

  v1 = v0;
  v2 = type metadata accessor for UUID(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = &v53[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v6 = type metadata accessor for CharacteristicKind(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = &v53[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v10 = type metadata accessor for WidgetTileInfo(0);
  v11 = v0 + *(int *)(v10 + 56);
  v12 = *(unsigned __int8 *)(v11 + 8);
  if ((v12 - 2) < 2)
    return;
  v13 = v10;
  v59 = v2;
  v14 = *(void **)v11;
  if (!v12)
  {
    v60 = v3;
    v15 = v14;
    goto LABEL_10;
  }
  v16 = v14;
  v17 = objc_msgSend(v16, "services");
  v18 = sub_100008CBC(0, &qword_1000A5078, HMService_ptr);
  v19 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v17, v18);

  if ((unint64_t)v19 >> 62)
  {
    if (v19 < 0)
      v51 = v19;
    else
      v51 = v19 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v19);
    v52 = _CocoaArrayWrapper.endIndex.getter(v51);
    swift_bridgeObjectRelease(v19);
    if (v52)
      goto LABEL_6;
LABEL_32:
    swift_bridgeObjectRelease(v19);

    return;
  }
  if (!*(_QWORD *)((v19 & 0xFFFFFFFFFFFFF8) + 0x10))
    goto LABEL_32;
LABEL_6:
  v60 = v3;
  if ((v19 & 0xC000000000000001) != 0)
  {
    v20 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v19);
    goto LABEL_9;
  }
  if (*(_QWORD *)((v19 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    v20 = *(id *)(v19 + 32);
LABEL_9:
    v15 = v20;
    swift_bridgeObjectRelease(v19);

LABEL_10:
    v21 = *(void (**)(_BYTE *, _QWORD, uint64_t))(v7 + 104);
    v21(v9, enum case for CharacteristicKind.inUse(_:), v6);
    v22 = *(int *)(v13 + 60);
    v23 = _sSo9HMServiceC10HomeWidgetE9BOOLValue3for4withSbSg0B9DataModel18CharacteristicKindO_SDy10Foundation4UUIDVypGSgtF_0((uint64_t)v9, *(_QWORD *)(v1 + v22));
    v24 = *(void (**)(_BYTE *, uint64_t))(v7 + 8);
    v24(v9, v6);
    if (v23 == 2)
    {

      return;
    }
    v25 = v23 & 1;
    v21(v9, enum case for CharacteristicKind.active(_:), v6);
    v58 = _sSo9HMServiceC10HomeWidgetE9BOOLValue3for4withSbSg0B9DataModel18CharacteristicKindO_SDy10Foundation4UUIDVypGSgtF_0((uint64_t)v9, *(_QWORD *)(v1 + v22));
    v24(v9, v6);
    v21(v9, enum case for CharacteristicKind.programMode(_:), v6);
    v26 = sub_100008FE4((uint64_t)v9, *(_QWORD *)(v1 + v22));
    LODWORD(v28) = v27;
    v24(v9, v6);
    if (qword_1000A4F08 != -1)
      swift_once(&qword_1000A4F08, sub_100053184);
    v29 = type metadata accessor for Logger(0);
    sub_100014698(v29, (uint64_t)qword_1000A7A80);
    v30 = v15;
    v31 = Logger.logObject.getter(v30);
    v32 = static os_log_type_t.default.getter();
    v33 = v32;
    v34 = os_log_type_enabled(v31, v32);
    v35 = v60;
    if (v34)
    {
      v36 = swift_slowAlloc(34, -1);
      v55 = swift_slowAlloc(32, -1);
      v62 = v55;
      *(_DWORD *)v36 = 136315906;
      v57 = v25;
      v37 = objc_msgSend(v30, "uniqueIdentifier");
      v54 = v33;
      v38 = v37;
      static UUID._unconditionallyBridgeFromObjectiveC(_:)(v37);

      v40 = UUID.uuidString.getter(v39);
      v56 = v28;
      v28 = v26;
      v42 = v41;
      (*(void (**)(_BYTE *, uint64_t))(v35 + 8))(v5, v59);
      v61 = sub_100023980(v40, v42, &v62);
      v44 = v57;
      v43 = v58;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v61, &v62, v36 + 4, v36 + 12);

      v45 = v42;
      v26 = v28;
      LOBYTE(v28) = v56;
      swift_bridgeObjectRelease(v45);
      *(_WORD *)(v36 + 12) = 1024;
      LODWORD(v61) = v43 & 1;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v61, (char *)&v61 + 4, v36 + 14, v36 + 18);
      *(_WORD *)(v36 + 18) = 1024;
      LODWORD(v61) = v44;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v61, (char *)&v61 + 4, v36 + 20, v36 + 24);
      *(_WORD *)(v36 + 24) = 2048;
      if ((v28 & 1) != 0)
        v46 = -1;
      else
        v46 = v26;
      v61 = v46;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v61, &v62, v36 + 26, v36 + 34);
      _os_log_impl((void *)&_mh_execute_header, v31, (os_log_type_t)v54, "irrigationSystem: %s active: %{BOOL}d inUse: %{BOOL}d programMode: %ld", (uint8_t *)v36, 0x22u);
      v47 = v55;
      swift_arrayDestroy(v55, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v47, -1, -1);
      swift_slowDealloc(v36, -1, -1);

      if (v44)
        goto LABEL_19;
    }
    else
    {

      if (v25)
      {
LABEL_19:
        v48 = 0xD00000000000003ALL;
        v49 = "HFServiceDescription.IrrigationSystem, State:RunningManual";
        goto LABEL_25;
      }
    }
    if ((v58 & 1) == 0 || (v28 & 1) != 0 || !v26)
    {
      v50 = 0x800000010008BD50;
      v48 = 0xD000000000000030;
      goto LABEL_27;
    }
    v48 = 0xD000000000000036;
    v49 = "HFServiceDescription.IrrigationSystem, State:Scheduled";
LABEL_25:
    v50 = (unint64_t)(v49 - 32) | 0x8000000000000000;
LABEL_27:
    static String.hfLocalized(_:)(v48, v50);

    return;
  }
  __break(1u);
}

void sub_10007D54C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  void *v13;
  id v14;
  id v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  id v19;
  char v20;
  int v21;
  uint64_t v22;
  id v23;
  NSObject *v24;
  os_log_type_t v25;
  uint64_t v26;
  uint64_t v27;
  id v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;

  v1 = type metadata accessor for UUID(0);
  v2 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  v4 = (char *)&v38 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for CharacteristicKind(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v38 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for WidgetTileInfo(0);
  v10 = v0 + *(int *)(v9 + 56);
  v11 = *(unsigned __int8 *)(v10 + 8);
  if ((v11 - 2) < 2)
    return;
  v12 = v9;
  v13 = *(void **)v10;
  if (v11)
  {
    v39 = v1;
    v15 = v13;
    v16 = objc_msgSend(v15, "services");
    v17 = sub_100008CBC(0, &qword_1000A5078, HMService_ptr);
    v18 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v16, v17);

    if ((unint64_t)v18 >> 62)
    {
      if (v18 < 0)
        v36 = v18;
      else
        v36 = v18 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v18);
      v37 = _CocoaArrayWrapper.endIndex.getter(v36);
      swift_bridgeObjectRelease(v18);
      if (v37)
        goto LABEL_6;
    }
    else if (*(_QWORD *)((v18 & 0xFFFFFFFFFFFFF8) + 0x10))
    {
LABEL_6:
      if ((v18 & 0xC000000000000001) != 0)
      {
        v19 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v18);
      }
      else
      {
        if (!*(_QWORD *)((v18 & 0xFFFFFFFFFFFFF8) + 0x10))
        {
          __break(1u);
          return;
        }
        v19 = *(id *)(v18 + 32);
      }
      v14 = v19;
      swift_bridgeObjectRelease(v18);

      v1 = v39;
      goto LABEL_10;
    }
    swift_bridgeObjectRelease(v18);

    return;
  }
  v14 = v13;
LABEL_10:
  (*(void (**)(char *, _QWORD, uint64_t))(v6 + 104))(v8, enum case for CharacteristicKind.active(_:), v5);
  v20 = _sSo9HMServiceC10HomeWidgetE9BOOLValue3for4withSbSg0B9DataModel18CharacteristicKindO_SDy10Foundation4UUIDVypGSgtF_0((uint64_t)v8, *(_QWORD *)(v0 + *(int *)(v12 + 60)));
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  if (v20 == 2)
  {

  }
  else
  {
    if (qword_1000A4F08 != -1)
      swift_once(&qword_1000A4F08, sub_100053184);
    v21 = v20 & 1;
    v22 = type metadata accessor for Logger(0);
    sub_100014698(v22, (uint64_t)qword_1000A7A80);
    v23 = v14;
    v24 = Logger.logObject.getter(v23);
    v25 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v24, v25))
    {
      v26 = swift_slowAlloc(18, -1);
      v27 = swift_slowAlloc(32, -1);
      v41 = v27;
      *(_DWORD *)v26 = 136315394;
      v39 = v26 + 4;
      v28 = objc_msgSend(v23, "uniqueIdentifier");
      static UUID._unconditionallyBridgeFromObjectiveC(_:)(v28);

      v30 = UUID.uuidString.getter(v29);
      v31 = v1;
      v33 = v32;
      (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v31);
      v40 = sub_100023980(v30, v33, &v41);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v40, &v41, v39, v26 + 12);

      swift_bridgeObjectRelease(v33);
      *(_WORD *)(v26 + 12) = 1024;
      LODWORD(v40) = v21;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v40, (char *)&v40 + 4, v26 + 14, v26 + 18);
      _os_log_impl((void *)&_mh_execute_header, v24, v25, "faucet: %s active: %{BOOL}d", (uint8_t *)v26, 0x12u);
      swift_arrayDestroy(v27, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v27, -1, -1);
      swift_slowDealloc(v26, -1, -1);

    }
    else
    {

    }
    if (v21)
      v34 = 0xD000000000000030;
    else
      v34 = 0xD00000000000002BLL;
    if (v21)
      v35 = 0x800000010008BE40;
    else
      v35 = 0x800000010008BE10;
    static String.hfLocalized(_:)(v34, v35);

    swift_bridgeObjectRelease(v35);
  }
}

id sub_10007D9A8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  id v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  void *v15;
  id v16;
  id v17;
  uint64_t v18;
  int64_t v19;
  id v20;
  void (*v21)(char *, _QWORD, uint64_t);
  uint64_t v22;
  char v23;
  void (*v24)(char *, uint64_t);
  char v25;
  uint64_t v26;
  id v27;
  NSObject *v28;
  os_log_type_t v29;
  uint64_t v30;
  id v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  int64_t v35;
  int64_t v36;
  uint64_t v37;
  unint64_t v38;
  const char *v39;
  const char *v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;

  v1 = v0;
  v2 = type metadata accessor for UUID(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v44 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for CharacteristicKind(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v44 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for WidgetTileInfo(0);
  v11 = 0;
  v12 = v1 + *(int *)(v10 + 56);
  v13 = *(unsigned __int8 *)(v12 + 8);
  if ((v13 - 2) >= 2)
  {
    v14 = v10;
    v46 = v2;
    v15 = *(void **)v12;
    if (!v13)
    {
      v47 = v3;
      v11 = v15;
      goto LABEL_10;
    }
    v16 = v15;
    v17 = objc_msgSend(v16, "services");
    v18 = sub_100008CBC(0, &qword_1000A5078, HMService_ptr);
    v19 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v17, v18);

    if ((unint64_t)v19 >> 62)
    {
      if (v19 < 0)
        v42 = v19;
      else
        v42 = v19 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v19);
      v11 = (id)_CocoaArrayWrapper.endIndex.getter(v42);
      swift_bridgeObjectRelease(v19);
      if (v11)
        goto LABEL_6;
    }
    else
    {
      v11 = *(id *)((v19 & 0xFFFFFFFFFFFFF8) + 0x10);
      if (v11)
      {
LABEL_6:
        v47 = v3;
        if ((v19 & 0xC000000000000001) != 0)
        {
          v20 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v19);
        }
        else
        {
          if (!*(_QWORD *)((v19 & 0xFFFFFFFFFFFFF8) + 0x10))
          {
            __break(1u);
            goto LABEL_35;
          }
          v20 = *(id *)(v19 + 32);
        }
        v11 = v20;
        swift_bridgeObjectRelease(v19);

LABEL_10:
        v21 = *(void (**)(char *, _QWORD, uint64_t))(v7 + 104);
        v21(v9, enum case for CharacteristicKind.inUse(_:), v6);
        v22 = *(int *)(v14 + 60);
        v23 = _sSo9HMServiceC10HomeWidgetE9BOOLValue3for4withSbSg0B9DataModel18CharacteristicKindO_SDy10Foundation4UUIDVypGSgtF_0((uint64_t)v9, *(_QWORD *)(v1 + v22));
        v24 = *(void (**)(char *, uint64_t))(v7 + 8);
        v24(v9, v6);
        if (v23 == 2
          || (v21(v9, enum case for CharacteristicKind.active(_:), v6),
              v25 = _sSo9HMServiceC10HomeWidgetE9BOOLValue3for4withSbSg0B9DataModel18CharacteristicKindO_SDy10Foundation4UUIDVypGSgtF_0((uint64_t)v9, *(_QWORD *)(v1 + v22)), v24(v9, v6), v7 = v47, v25 == 2))
        {

          return 0;
        }
        LODWORD(v16) = v23 & 1;
        LODWORD(v19) = v25 & 1;
        if (qword_1000A4F08 == -1)
        {
LABEL_14:
          v26 = type metadata accessor for Logger(0);
          sub_100014698(v26, (uint64_t)qword_1000A7A80);
          v27 = v11;
          v28 = Logger.logObject.getter(v27);
          v29 = static os_log_type_t.default.getter();
          if (os_log_type_enabled(v28, v29))
          {
            v30 = swift_slowAlloc(24, -1);
            v45 = swift_slowAlloc(32, -1);
            v49 = v45;
            *(_DWORD *)v30 = 136315650;
            v44 = v30 + 4;
            v31 = objc_msgSend(v27, "uniqueIdentifier");
            static UUID._unconditionallyBridgeFromObjectiveC(_:)(v31);

            v33 = UUID.uuidString.getter(v32);
            v34 = v19;
            v19 = v35;
            (*(void (**)(char *, uint64_t))(v7 + 8))(v5, v46);
            v48 = sub_100023980(v33, v19, &v49);
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v48, &v49, v44, v30 + 12);

            v36 = v19;
            LODWORD(v19) = v34;
            swift_bridgeObjectRelease(v36);
            *(_WORD *)(v30 + 12) = 1024;
            LODWORD(v48) = v34;
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v48, (char *)&v48 + 4, v30 + 14, v30 + 18);
            *(_WORD *)(v30 + 18) = 1024;
            LODWORD(v48) = (_DWORD)v16;
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v48, (char *)&v48 + 4, v30 + 20, v30 + 24);
            _os_log_impl((void *)&_mh_execute_header, v28, v29, "valve: %s active: %{BOOL}d inUse: %{BOOL}d", (uint8_t *)v30, 0x18u);
            v37 = v45;
            swift_arrayDestroy(v45, 1, (char *)&type metadata for Any + 8);
            swift_slowDealloc(v37, -1, -1);
            swift_slowDealloc(v30, -1, -1);

          }
          else
          {

          }
          if ((_DWORD)v19)
          {
            if ((_DWORD)v16)
            {
              v38 = 0xD000000000000023;
              v39 = "HFStatusDescriptionValve_OneRunning";
              goto LABEL_25;
            }
            v40 = "HFStatusDescriptionValve_OneStarting";
          }
          else
          {
            if (!(_DWORD)v16)
            {
              v38 = 0xD00000000000001FLL;
              v39 = "HFStatusDescriptionValve_OneOff";
LABEL_25:
              v41 = (unint64_t)(v39 - 32) | 0x8000000000000000;
              goto LABEL_26;
            }
            v40 = "HFStatusDescriptionValve_OneStopping";
          }
          v41 = (unint64_t)(v40 - 32) | 0x8000000000000000;
          v38 = 0xD000000000000024;
LABEL_26:
          v11 = (id)static String.hfLocalized(_:)(v38, v41);

          return v11;
        }
LABEL_35:
        swift_once(&qword_1000A4F08, sub_100053184);
        goto LABEL_14;
      }
    }
    swift_bridgeObjectRelease(v19);

  }
  return v11;
}

void *sub_10007DE8C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  id v18;
  uint64_t v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  id v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  char v30;
  void (*v31)(uint64_t, uint64_t);
  char v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  char *v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  void (*v42)(uint64_t, uint64_t);
  void (*v43)(uint64_t, uint64_t);
  Swift::String v44;
  uint64_t v45;
  uint64_t v46;
  id v47;
  uint64_t v48;
  NSObject *v49;
  os_log_type_t v50;
  uint64_t v51;
  uint64_t v52;
  id v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  unint64_t v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  void *v64;
  uint64_t v65;
  Swift::Int v66;
  uint64_t v67;
  unint64_t v68;
  id v69;
  NSObject *v70;
  os_log_type_t v71;
  uint8_t *v72;
  uint64_t v73;
  uint64_t v74;
  id v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  unint64_t v80;
  uint64_t v81;
  Swift::String v82;
  unint64_t v83;
  Class isa;
  Class v85;
  Class v86;
  uint64_t v87;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  void (*v98)(uint64_t, uint64_t);
  char *v99;
  uint64_t v100;
  char *v101;
  uint64_t v102;
  char *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  unint64_t v107;

  v1 = type metadata accessor for UUID(0);
  v100 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  v99 = (char *)&v89 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = type metadata accessor for ServiceKind(0);
  v4 = *(_QWORD *)(v3 - 8);
  v5 = __chkstk_darwin(v3);
  v7 = (char *)&v89 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v101 = (char *)&v89 - v8;
  v102 = type metadata accessor for CharacteristicKind(0);
  v9 = *(_QWORD *)(v102 - 8);
  __chkstk_darwin(v102);
  v103 = (char *)&v89 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for WidgetTileInfo(0);
  v12 = 0;
  v13 = v0 + *(int *)(v11 + 56);
  v14 = *(unsigned __int8 *)(v13 + 8);
  if ((v14 - 2) >= 2)
  {
    v15 = v11;
    v16 = v0;
    v97 = v1;
    v17 = *(void **)v13;
    if (!v14)
    {
      v96 = (uint64_t)v7;
      v98 = (void (*)(uint64_t, uint64_t))v4;
      v18 = v17;
      goto LABEL_10;
    }
    v19 = v17;
    v20 = objc_msgSend((id)v19, "services");
    v21 = sub_100008CBC(0, &qword_1000A5078, HMService_ptr);
    v22 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v20, v21);

    if ((unint64_t)v22 >> 62)
    {
      if (v22 < 0)
        v87 = v22;
      else
        v87 = v22 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v22);
      v12 = (void *)_CocoaArrayWrapper.endIndex.getter(v87);
      swift_bridgeObjectRelease(v22);
      if (v12)
        goto LABEL_6;
    }
    else
    {
      v12 = *(void **)((v22 & 0xFFFFFFFFFFFFF8) + 0x10);
      if (v12)
      {
LABEL_6:
        v98 = (void (*)(uint64_t, uint64_t))v4;
        v96 = (uint64_t)v7;
        if ((v22 & 0xC000000000000001) != 0)
        {
          v23 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v22);
        }
        else
        {
          if (!*(_QWORD *)((v22 & 0xFFFFFFFFFFFFF8) + 0x10))
          {
            __break(1u);
            goto LABEL_53;
          }
          v23 = *(id *)(v22 + 32);
        }
        v18 = v23;
        swift_bridgeObjectRelease(v22);

LABEL_10:
        v24 = *(char **)(v9 + 104);
        v26 = v102;
        v25 = (uint64_t)v103;
        ((void (*)(char *, _QWORD, uint64_t))v24)(v103, enum case for CharacteristicKind.targetPosition(_:), v102);
        v27 = *(int *)(v15 + 60);
        v28 = sub_100008FE4(v25, *(_QWORD *)(v16 + v27));
        v30 = v29;
        v31 = *(void (**)(uint64_t, uint64_t))(v9 + 8);
        v31(v25, v26);
        if ((v30 & 1) != 0
          || (v95 = v28,
              ((void (*)(uint64_t, _QWORD, uint64_t))v24)(v25, enum case for CharacteristicKind.currentPosition(_:), v26), v94 = v27, v15 = sub_100008FE4(v25, *(_QWORD *)(v16 + v27)), v33 = v32, v34 = ((uint64_t (*)(uint64_t, uint64_t))v31)(v25, v26), (v33 & 1) != 0))
        {

          return 0;
        }
        v35 = v16;
        v36 = v24;
        v93 = v35;
        v4 = v26;
        v37 = v101;
        v12 = v18;
        HMService.serviceKind.getter(v34);
        v38 = v96;
        (*((void (**)(uint64_t, _QWORD, uint64_t))v98 + 13))(v96, enum case for ServiceKind.door(_:), v3);
        v39 = sub_10007FE94();
        dispatch thunk of RawRepresentable.rawValue.getter(&v106, v3, v39);
        dispatch thunk of RawRepresentable.rawValue.getter(&v104, v3, v39);
        v40 = v107;
        v41 = v105;
        if (v106 == v104 && v107 == v105)
        {
          swift_bridgeObjectRelease_n(v107, 2);
          v42 = (void (*)(uint64_t, uint64_t))*((_QWORD *)v98 + 1);
          v42(v38, v3);
          v42((uint64_t)v37, v3);
          v19 = 1919905604;
          v7 = (char *)0xE400000000000000;
        }
        else
        {
          LODWORD(v92) = _stringCompareWithSmolCheck(_:_:expecting:)(v106, v107, v104, v105, 0);
          swift_bridgeObjectRelease(v40);
          swift_bridgeObjectRelease(v41);
          v43 = (void (*)(uint64_t, uint64_t))*((_QWORD *)v98 + 1);
          v43(v38, v3);
          v43((uint64_t)v37, v3);
          if ((v92 & 1) != 0)
            v19 = 1919905604;
          else
            v19 = 0x776F646E6957;
          if ((v92 & 1) != 0)
            v7 = (char *)0xE400000000000000;
          else
            v7 = (char *)0xE600000000000000;
        }
        v98 = v31;
        v101 = v36;
        v106 = 0xD000000000000015;
        v107 = 0x800000010008B910;
        v44._countAndFlagsBits = v19;
        v44._object = v7;
        String.append(_:)(v44);
        v3 = v107;
        v96 = v106;
        if (qword_1000A4F08 == -1)
        {
LABEL_24:
          v45 = type metadata accessor for Logger(0);
          v46 = sub_100014698(v45, (uint64_t)qword_1000A7A80);
          v47 = v12;
          v48 = swift_bridgeObjectRetain(v7);
          v92 = v46;
          v49 = Logger.logObject.getter(v48);
          v50 = static os_log_type_t.default.getter();
          if (os_log_type_enabled(v49, v50))
          {
            v51 = swift_slowAlloc(42, -1);
            v91 = v3;
            v52 = v51;
            v90 = swift_slowAlloc(64, -1);
            v106 = v90;
            *(_DWORD *)v52 = 136315906;
            swift_bridgeObjectRetain(v7);
            v104 = sub_100023980(v19, (unint64_t)v7, &v106);
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v104, &v105, v52 + 4, v52 + 12);
            swift_bridgeObjectRelease_n(v7, 3);
            *(_WORD *)(v52 + 12) = 2080;
            v89 = v52 + 14;
            v53 = objc_msgSend(v47, "uniqueIdentifier");
            v54 = v15;
            v55 = v99;
            static UUID._unconditionallyBridgeFromObjectiveC(_:)(v53);

            v57 = UUID.uuidString.getter(v56);
            v59 = v58;
            v60 = v55;
            v15 = v54;
            v4 = v102;
            (*(void (**)(char *, uint64_t))(v100 + 8))(v60, v97);
            v104 = sub_100023980(v57, v59, &v106);
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v104, &v105, v89, v52 + 22);

            swift_bridgeObjectRelease(v59);
            *(_WORD *)(v52 + 22) = 2048;
            v104 = v95;
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v104, &v105, v52 + 24, v52 + 32);
            *(_WORD *)(v52 + 32) = 2048;
            v104 = v54;
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v104, &v105, v52 + 34, v52 + 42);
            _os_log_impl((void *)&_mh_execute_header, v49, v50, "doorWindowAndWindowConvering: serviceKind: %s service UUID: %s targetPosition: %ld currentPosition: %ld", (uint8_t *)v52, 0x2Au);
            v61 = v90;
            swift_arrayDestroy(v90, 2, (char *)&type metadata for Any + 8);
            swift_slowDealloc(v61, -1, -1);
            v62 = v52;
            v3 = v91;
            swift_slowDealloc(v62, -1, -1);

          }
          else
          {

            swift_bridgeObjectRelease_n(v7, 2);
          }
          v63 = v94;
          v64 = v47;
          v65 = (uint64_t)v103;
          ((void (*)(char *, _QWORD, uint64_t))v101)(v103, enum case for CharacteristicKind.obstructionDetected(_:), v4);
          LOBYTE(v63) = _sSo9HMServiceC10HomeWidgetE9BOOLValue3for4withSbSg0B9DataModel18CharacteristicKindO_SDy10Foundation4UUIDVypGSgtF_0(v65, *(_QWORD *)(v93 + v63));
          v98(v65, v4);
          if ((v63 & 1) != 0)
          {
            v69 = v47;
            v70 = Logger.logObject.getter(v69);
            v71 = static os_log_type_t.default.getter();
            if (os_log_type_enabled(v70, v71))
            {
              v72 = (uint8_t *)swift_slowAlloc(12, -1);
              v73 = swift_slowAlloc(32, -1);
              v91 = v3;
              v74 = v73;
              v106 = v73;
              *(_DWORD *)v72 = 136315138;
              v75 = objc_msgSend(v69, "uniqueIdentifier");
              v76 = v99;
              static UUID._unconditionallyBridgeFromObjectiveC(_:)(v75);

              v78 = UUID.uuidString.getter(v77);
              v80 = v79;
              (*(void (**)(char *, uint64_t))(v100 + 8))(v76, v97);
              v104 = sub_100023980(v78, v80, &v106);
              UnsafeMutableRawBufferPointer.copyMemory(from:)(&v104, &v105, v72 + 4, v72 + 12);

              swift_bridgeObjectRelease(v80);
              _os_log_impl((void *)&_mh_execute_header, v70, v71, "doorWindowAndWindowConvering: service UUID: %s  obstructionDetected", v72, 0xCu);
              swift_arrayDestroy(v74, 1, (char *)&type metadata for Any + 8);
              v81 = v74;
              v3 = v91;
              swift_slowDealloc(v81, -1, -1);
              swift_slowDealloc(v72, -1, -1);

            }
            else
            {

            }
            v106 = v96;
            v107 = v3;
            swift_bridgeObjectRetain(v3);
            v82._countAndFlagsBits = 0xD000000000000018;
            v82._object = (void *)0x800000010008B930;
            String.append(_:)(v82);
            swift_bridgeObjectRelease(v3);
            v83 = v107;
            v12 = (void *)static String.hfLocalized(_:)(v106, v107);

            goto LABEL_42;
          }
          v66 = v95;
          if (v15 == v95)
          {
            if (v95 == 100)
            {
              v106 = v96;
              v107 = v3;
              swift_bridgeObjectRetain(v3);
              v67 = 0x65704F6574617453;
              v68 = 0xE90000000000006ELL;
            }
            else
            {
              if (v95)
              {
                swift_bridgeObjectRelease(v3);
                sub_100008CBC(0, (unint64_t *)&qword_1000A5210, NSNumber_ptr);
                isa = NSNumber.init(integerLiteral:)(v66).super.super.isa;
                v85 = NSNumber.init(integerLiteral:)(0).super.super.isa;
                v86 = NSNumber.init(integerLiteral:)(100).super.super.isa;
                v12 = (void *)sub_10005BDB0(isa);

                return v12;
              }
              v106 = v96;
              v107 = v3;
              swift_bridgeObjectRetain(v3);
              v67 = 0x6F6C436574617453;
              v68 = 0xEB00000000646573;
            }
            goto LABEL_41;
          }
          if (v95 < v15)
          {
            v106 = v96;
            v107 = v3;
            swift_bridgeObjectRetain(v3);
            v68 = 0xEC000000676E6973;
            v67 = 0x6F6C436574617453;
LABEL_41:
            String.append(_:)(*(Swift::String *)&v67);
            swift_bridgeObjectRelease(v3);
            v83 = v107;
            v12 = (void *)static String.hfLocalized(_:)(v106, v107);

LABEL_42:
            swift_bridgeObjectRelease(v83);
            return v12;
          }
          if (v15 < v95)
          {
            v106 = v96;
            v107 = v3;
            swift_bridgeObjectRetain(v3);
            v67 = 0x65704F6574617453;
            v68 = 0xEC000000676E696ELL;
            goto LABEL_41;
          }

          swift_bridgeObjectRelease(v3);
          return 0;
        }
LABEL_53:
        swift_once(&qword_1000A4F08, sub_100053184);
        goto LABEL_24;
      }
    }
    swift_bridgeObjectRelease(v22);

  }
  return v12;
}

uint64_t sub_10007E904()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  void *v15;
  id v16;
  id v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  id v21;
  char v22;
  void (*v23)(char *, uint64_t);
  uint64_t v24;
  uint64_t v25;
  NSObject *v26;
  os_log_type_t v27;
  uint64_t v28;
  id v29;
  id v30;
  id v31;
  uint64_t v32;
  uint64_t v33;
  os_log_type_t v34;
  unint64_t v35;
  unint64_t v36;
  os_log_t v37;
  uint64_t v38;
  id v39;
  char v40;
  char v41;
  void (*v42)(char *, uint64_t);
  uint64_t v43;
  char v44;
  char v45;
  id v46;
  char v47;
  char v48;
  uint64_t v49;
  int v50;
  NSObject *v51;
  os_log_type_t v52;
  int v53;
  uint64_t v54;
  id v55;
  id v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  unint64_t v60;
  char v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  unint64_t v66;
  uint64_t v67;
  unint64_t v68;
  unint64_t v69;
  void (*v70)(char *, uint64_t);
  Swift::Int v71;
  char v72;
  id v73;
  uint64_t v74;
  Class v75;
  Class v76;
  Class v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;
  const char *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  Swift::Int v90;
  Class v91;
  Class v92;
  Class v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  unint64_t v97;
  Class v98;
  Class v99;
  Class v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  Class isa;
  Class v105;
  Class v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  Swift::Int v113;
  Class v114;
  Class v115;
  Class v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  Swift::Int v124;
  os_log_t v125;
  uint64_t v126;
  uint64_t v127;
  _QWORD *v128;
  void (*v129)(char *, uint64_t);
  id v130;
  _QWORD *v131;
  uint64_t v132;
  uint64_t v133;
  char v134[8];
  void (*v135)(_QWORD, _QWORD);
  uint64_t v136;

  v1 = v0;
  v2 = (_QWORD *)type metadata accessor for UUID(0);
  v3 = *(v2 - 1);
  __chkstk_darwin(v2);
  v5 = (char *)&v124 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for CharacteristicKind(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v124 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for WidgetTileInfo(0);
  v11 = 0;
  v12 = v1 + *(int *)(v10 + 56);
  v13 = *(unsigned __int8 *)(v12 + 8);
  if ((v13 - 2) >= 2)
  {
    v14 = v10;
    v132 = v3;
    v15 = *(void **)v12;
    if (!v13)
    {
      v131 = v2;
      v16 = v15;
      goto LABEL_10;
    }
    v17 = v15;
    v18 = objc_msgSend(v17, "services");
    v19 = sub_100008CBC(0, &qword_1000A5078, HMService_ptr);
    v20 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v18, v19);

    if ((unint64_t)v20 >> 62)
    {
      if (v20 < 0)
        v122 = v20;
      else
        v122 = v20 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v20);
      v16 = (id)_CocoaArrayWrapper.endIndex.getter(v122);
      swift_bridgeObjectRelease(v20);
      if (v16)
        goto LABEL_6;
    }
    else
    {
      v16 = *(id *)((v20 & 0xFFFFFFFFFFFFF8) + 0x10);
      if (v16)
      {
LABEL_6:
        v131 = v2;
        if ((v20 & 0xC000000000000001) != 0)
        {
          v21 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v20);
        }
        else
        {
          if (!*(_QWORD *)((v20 & 0xFFFFFFFFFFFFF8) + 0x10))
          {
            __break(1u);
            goto LABEL_62;
          }
          v21 = *(id *)(v20 + 32);
        }
        v16 = v21;
        swift_bridgeObjectRelease(v20);

LABEL_10:
        v2 = *(_QWORD **)(v7 + 104);
        ((void (*)(char *, _QWORD, uint64_t))v2)(v9, enum case for CharacteristicKind.active(_:), v6);
        v14 = *(int *)(v14 + 60);
        v22 = _sSo9HMServiceC10HomeWidgetE9BOOLValue3for4withSbSg0B9DataModel18CharacteristicKindO_SDy10Foundation4UUIDVypGSgtF_0((uint64_t)v9, *(_QWORD *)(v1 + v14));
        v23 = *(void (**)(char *, uint64_t))(v7 + 8);
        v23(v9, v6);
        if (v22 == 2)
        {

          return 0;
        }
        if ((v22 & 1) == 0)
        {
          v11 = static String.hfLocalized(_:)(0xD000000000000022, 0x800000010008B640);

          return v11;
        }
        v129 = v23;
        if (qword_1000A4F08 == -1)
        {
LABEL_15:
          v24 = type metadata accessor for Logger(0);
          v25 = sub_100014698(v24, (uint64_t)qword_1000A7A80);
          v130 = v16;
          v127 = v25;
          v26 = Logger.logObject.getter(v130);
          v27 = static os_log_type_t.default.getter(v26);
          if (os_log_type_enabled(v26, v27))
          {
            v28 = swift_slowAlloc(18, -1);
            v126 = swift_slowAlloc(32, -1);
            v133 = v126;
            *(_DWORD *)v28 = 136315394;
            v124 = v28 + 4;
            v29 = v130;
            v30 = objc_msgSend(v130, "uniqueIdentifier");
            v128 = v2;
            v125 = v26;
            v31 = v30;
            static UUID._unconditionallyBridgeFromObjectiveC(_:)(v30);

            v33 = UUID.uuidString.getter(v32);
            v34 = v27;
            v36 = v35;
            (*(void (**)(char *, _QWORD *))(v132 + 8))(v5, v131);
            v135 = (void (*)(_QWORD, _QWORD))sub_100023980(v33, v36, &v133);
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v135, &v136, v124, v28 + 12);

            swift_bridgeObjectRelease(v36);
            *(_WORD *)(v28 + 12) = 1024;
            LODWORD(v135) = 1;
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v135, (char *)&v135 + 4, v28 + 14, v28 + 18);
            v37 = v125;
            _os_log_impl((void *)&_mh_execute_header, v125, v34, "humidifierDehumidifier: %s active: %{BOOL}d", (uint8_t *)v28, 0x12u);
            v38 = v126;
            swift_arrayDestroy(v126, 1, (char *)&type metadata for Any + 8);
            swift_slowDealloc(v38, -1, -1);
            swift_slowDealloc(v28, -1, -1);

            v2 = v128;
            ((void (*)(char *, _QWORD, uint64_t))v128)(v9, enum case for CharacteristicKind.currentHumidifierDehumidifierState(_:), v6);
          }
          else
          {

            v39 = v130;
            ((void (*)(char *, _QWORD, uint64_t))v2)(v9, enum case for CharacteristicKind.currentHumidifierDehumidifierState(_:), v6);
          }
          v128 = (_QWORD *)sub_100008FE4((uint64_t)v9, *(_QWORD *)(v1 + v14));
          v41 = v40;
          v42 = v129;
          v129(v9, v6);
          if ((v41 & 1) != 0)
            goto LABEL_50;
          ((void (*)(char *, _QWORD, uint64_t))v2)(v9, enum case for CharacteristicKind.targetHumidifierDehumidifierState(_:), v6);
          v43 = sub_100008FE4((uint64_t)v9, *(_QWORD *)(v1 + v14));
          v45 = v44;
          v42(v9, v6);
          if ((v45 & 1) != 0)
            goto LABEL_50;
          v126 = v43;
          ((void (*)(char *, _QWORD, uint64_t))v2)(v9, enum case for CharacteristicKind.humidifierThreshold(_:), v6);
          v46 = v130;
          v124 = sub_100008FE4((uint64_t)v9, *(_QWORD *)(v1 + v14));
          v48 = v47;
          v42(v9, v6);
          ((void (*)(char *, _QWORD, uint64_t))v2)(v9, enum case for CharacteristicKind.dehumidifierThreshold(_:), v6);
          v49 = sub_100008FE4((uint64_t)v9, *(_QWORD *)(v1 + v14));
          LODWORD(v125) = v50;
          v42(v9, v6);
          v130 = v46;
          v51 = Logger.logObject.getter(v130);
          v52 = static os_log_type_t.default.getter(v51);
          v53 = v52;
          if (os_log_type_enabled(v51, v52))
          {
            v54 = swift_slowAlloc(32, -1);
            v129 = (void (*)(char *, uint64_t))swift_slowAlloc(96, -1);
            v135 = (void (*)(_QWORD, _QWORD))v129;
            *(_DWORD *)v54 = 136315650;
            LODWORD(v127) = v53;
            v55 = v130;
            v56 = objc_msgSend(v130, "uniqueIdentifier");
            static UUID._unconditionallyBridgeFromObjectiveC(_:)(v56);

            v58 = UUID.uuidString.getter(v57);
            v60 = v59;
            (*(void (**)(char *, _QWORD *))(v132 + 8))(v5, v131);
            v133 = sub_100023980(v58, v60, (uint64_t *)&v135);
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v133, v134, v54 + 4, v54 + 12);

            swift_bridgeObjectRelease(v60);
            *(_WORD *)(v54 + 12) = 2080;
            v133 = v124;
            v61 = v48;
            v134[0] = v48 & 1;
            v62 = sub_10000527C(&qword_1000A7508);
            v63 = String.init<A>(describing:)(&v133, v62);
            v64 = v49;
            v66 = v65;
            v133 = sub_100023980(v63, v65, (uint64_t *)&v135);
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v133, v134, v54 + 14, v54 + 22);
            swift_bridgeObjectRelease(v66);
            *(_WORD *)(v54 + 22) = 2080;
            v133 = v64;
            LOBYTE(v60) = (_BYTE)v125;
            v134[0] = v125 & 1;
            v67 = String.init<A>(describing:)(&v133, v62);
            v69 = v68;
            v133 = sub_100023980(v67, v68, (uint64_t *)&v135);
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v133, v134, v54 + 24, v54 + 32);
            swift_bridgeObjectRelease(v69);
            _os_log_impl((void *)&_mh_execute_header, v51, (os_log_type_t)v127, "humidifierDehumidifier: %s humidifierThreshold: %s dehumidifierThreshold: %s", (uint8_t *)v54, 0x20u);
            v70 = v129;
            swift_arrayDestroy(v129, 3, (char *)&type metadata for Any + 8);
            swift_slowDealloc(v70, -1, -1);
            swift_slowDealloc(v54, -1, -1);

            v71 = v64;
            v72 = v60;
          }
          else
          {
            v61 = v48;

            v73 = v130;
            v71 = v49;
            v72 = (char)v125;
          }
          v74 = v126;
          if (v128 == (_QWORD *)3)
          {
            if (v126 == 2 || v126 == 1)
            {
              if ((v72 & 1) == 0)
              {
                sub_100008CBC(0, (unint64_t *)&qword_1000A5210, NSNumber_ptr);
                isa = NSNumber.init(integerLiteral:)(v71).super.super.isa;
                v105 = NSNumber.init(integerLiteral:)(0).super.super.isa;
                v106 = NSNumber.init(integerLiteral:)(100).super.super.isa;
                v78 = sub_10005BDB0(isa);
                v80 = v107;

                v81 = 0xD000000000000034;
                v82 = "HFServiceDescriptionHumidifierDehumidifyWithHumidity";
                goto LABEL_43;
              }
LABEL_48:

              return 0;
            }
LABEL_31:
            if (!v126)
            {
              if ((v61 & 1) != 0 || (v72 & 1) != 0)
                goto LABEL_48;
LABEL_40:
              v132 = static String.hfLocalized(_:)(0xD000000000000033, 0x800000010008BFB0);
              v87 = v86;
              v88 = sub_10000527C(&qword_1000A74B8);
              v89 = swift_allocObject(v88, 112, 7);
              *(_OWORD *)(v89 + 16) = xmmword_100086CA0;
              sub_100008CBC(0, (unint64_t *)&qword_1000A5210, NSNumber_ptr);
              v90 = v71;
              v91 = NSNumber.init(integerLiteral:)(v124).super.super.isa;
              v92 = NSNumber.init(integerLiteral:)(0).super.super.isa;
              v93 = NSNumber.init(integerLiteral:)(100).super.super.isa;
              v94 = sub_10005BDB0(v91);
              v96 = v95;

              *(_QWORD *)(v89 + 56) = &type metadata for String;
              v97 = sub_10007FE0C();
              *(_QWORD *)(v89 + 64) = v97;
              *(_QWORD *)(v89 + 32) = v94;
              *(_QWORD *)(v89 + 40) = v96;
              v98 = NSNumber.init(integerLiteral:)(v90).super.super.isa;
              v99 = NSNumber.init(integerLiteral:)(0).super.super.isa;
              v100 = NSNumber.init(integerLiteral:)(100).super.super.isa;
              v101 = sub_10005BDB0(v98);
              v103 = v102;

              *(_QWORD *)(v89 + 96) = &type metadata for String;
              *(_QWORD *)(v89 + 104) = v97;
              *(_QWORD *)(v89 + 72) = v101;
              *(_QWORD *)(v89 + 80) = v103;
              v11 = String.init(format:arguments:)(v132, v87, v89);

              swift_bridgeObjectRelease(v87);
              swift_bridgeObjectRelease(v89);
              return v11;
            }
            goto LABEL_50;
          }
          if (v128 == (_QWORD *)2)
          {
            if (v126 == 2 || v126 == 1)
            {
              if ((v61 & 1) == 0)
              {
                sub_100008CBC(0, (unint64_t *)&qword_1000A5210, NSNumber_ptr);
                v75 = NSNumber.init(integerLiteral:)(v124).super.super.isa;
                v76 = NSNumber.init(integerLiteral:)(0).super.super.isa;
                v77 = NSNumber.init(integerLiteral:)(100).super.super.isa;
                v78 = sub_10005BDB0(v75);
                v80 = v79;

                v81 = 0xD000000000000032;
                v82 = "HFServiceDescriptionHumidifierHumidifyWithHumidity";
LABEL_43:
                v108 = static String.hfLocalized(_:)(v81, (unint64_t)(v82 - 32) | 0x8000000000000000);
                v110 = v109;
                v111 = sub_10000527C(&qword_1000A74B8);
                v112 = swift_allocObject(v111, 72, 7);
                *(_OWORD *)(v112 + 16) = xmmword_100086C80;
                *(_QWORD *)(v112 + 56) = &type metadata for String;
                *(_QWORD *)(v112 + 64) = sub_10007FE0C();
                *(_QWORD *)(v112 + 32) = v78;
                *(_QWORD *)(v112 + 40) = v80;
                v11 = String.init(format:arguments:)(v108, v110, v112);

                swift_bridgeObjectRelease(v110);
                swift_bridgeObjectRelease(v112);
                return v11;
              }
              goto LABEL_48;
            }
            goto LABEL_31;
          }
          v84 = static String.hfLocalized(_:)(0xD00000000000002ELL, 0x800000010008BF80);
          v85 = v83;
          switch(v74)
          {
            case 2:
              if ((v72 & 1) != 0)
                goto LABEL_47;
              sub_100008CBC(0, (unint64_t *)&qword_1000A5210, NSNumber_ptr);
              v113 = v71;
              break;
            case 1:
              if ((v61 & 1) != 0)
              {
LABEL_47:
                swift_bridgeObjectRelease(v83);
                goto LABEL_48;
              }
              sub_100008CBC(0, (unint64_t *)&qword_1000A5210, NSNumber_ptr);
              v113 = v124;
              break;
            case 0:
              swift_bridgeObjectRelease(v83);
              if ((v61 & 1) != 0 || (v72 & 1) != 0)
                goto LABEL_48;
              goto LABEL_40;
            default:
              swift_bridgeObjectRelease(v83);
LABEL_50:
              v11 = static String.hfLocalized(_:)(0xD000000000000021, 0x800000010008BF50);

              return v11;
          }
          v114 = NSNumber.init(integerLiteral:)(v113).super.super.isa;
          v115 = NSNumber.init(integerLiteral:)(0).super.super.isa;
          v116 = NSNumber.init(integerLiteral:)(100).super.super.isa;
          v117 = sub_10005BDB0(v114);
          v119 = v118;

          v120 = sub_10000527C(&qword_1000A74B8);
          v121 = swift_allocObject(v120, 72, 7);
          *(_OWORD *)(v121 + 16) = xmmword_100086C80;
          *(_QWORD *)(v121 + 56) = &type metadata for String;
          *(_QWORD *)(v121 + 64) = sub_10007FE0C();
          *(_QWORD *)(v121 + 32) = v117;
          *(_QWORD *)(v121 + 40) = v119;
          v11 = String.init(format:arguments:)(v84, v85, v121);

          swift_bridgeObjectRelease(v85);
          swift_bridgeObjectRelease(v121);
          return v11;
        }
LABEL_62:
        swift_once(&qword_1000A4F08, sub_100053184);
        goto LABEL_15;
      }
    }
    swift_bridgeObjectRelease(v20);

    return 0;
  }
  return v11;
}

void sub_10007F538()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  void *v13;
  id v14;
  id v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  id v19;
  uint64_t v20;
  void (*v21)(_BYTE *, _QWORD, uint64_t);
  char v22;
  void (*v23)(_BYTE *, uint64_t);
  int v24;
  uint64_t v25;
  id v26;
  NSObject *v27;
  os_log_type_t v28;
  uint64_t v29;
  uint64_t v30;
  id v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _BYTE v40[12];
  int v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;

  v1 = type metadata accessor for UUID(0);
  v2 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  v4 = &v40[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v5 = type metadata accessor for CharacteristicKind(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = &v40[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v9 = type metadata accessor for WidgetTileInfo(0);
  v10 = v0 + *(int *)(v9 + 56);
  v11 = *(unsigned __int8 *)(v10 + 8);
  if ((v11 - 2) < 2)
    return;
  v12 = v9;
  v42 = v2;
  v43 = v1;
  v13 = *(void **)v10;
  if (v11)
  {
    v15 = v13;
    v16 = objc_msgSend(v15, "services");
    v17 = sub_100008CBC(0, &qword_1000A5078, HMService_ptr);
    v18 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v16, v17);

    if ((unint64_t)v18 >> 62)
    {
      if (v18 < 0)
        v38 = v18;
      else
        v38 = v18 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v18);
      v39 = _CocoaArrayWrapper.endIndex.getter(v38);
      swift_bridgeObjectRelease(v18);
      if (v39)
        goto LABEL_6;
    }
    else if (*(_QWORD *)((v18 & 0xFFFFFFFFFFFFF8) + 0x10))
    {
LABEL_6:
      if ((v18 & 0xC000000000000001) != 0)
      {
        v19 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v18);
      }
      else
      {
        if (!*(_QWORD *)((v18 & 0xFFFFFFFFFFFFF8) + 0x10))
        {
          __break(1u);
          return;
        }
        v19 = *(id *)(v18 + 32);
      }
      v14 = v19;
      swift_bridgeObjectRelease(v18);

      goto LABEL_10;
    }
    swift_bridgeObjectRelease(v18);

    return;
  }
  v14 = v13;
LABEL_10:
  v20 = *(_QWORD *)(v0 + *(int *)(v12 + 60));
  v21 = *(void (**)(_BYTE *, _QWORD, uint64_t))(v6 + 104);
  v21(v8, enum case for CharacteristicKind.powerState(_:), v5);
  v22 = _sSo9HMServiceC10HomeWidgetE9BOOLValue3for4withSbSg0B9DataModel18CharacteristicKindO_SDy10Foundation4UUIDVypGSgtF_0((uint64_t)v8, v20);
  v23 = *(void (**)(_BYTE *, uint64_t))(v6 + 8);
  v23(v8, v5);
  if (v22 == 2
    && (v21(v8, enum case for CharacteristicKind.active(_:), v5),
        v22 = _sSo9HMServiceC10HomeWidgetE9BOOLValue3for4withSbSg0B9DataModel18CharacteristicKindO_SDy10Foundation4UUIDVypGSgtF_0((uint64_t)v8, v20), v23(v8, v5), v22 == 2))
  {

  }
  else
  {
    if (qword_1000A4F08 != -1)
      swift_once(&qword_1000A4F08, sub_100053184);
    v24 = v22 & 1;
    v25 = type metadata accessor for Logger(0);
    sub_100014698(v25, (uint64_t)qword_1000A7A80);
    v26 = v14;
    v27 = Logger.logObject.getter(v26);
    v28 = static os_log_type_t.default.getter(v27);
    if (os_log_type_enabled(v27, v28))
    {
      v29 = swift_slowAlloc(18, -1);
      v30 = swift_slowAlloc(32, -1);
      v45 = v30;
      *(_DWORD *)v29 = 136315394;
      v41 = v22 & 1;
      v31 = objc_msgSend(v26, "uniqueIdentifier");
      static UUID._unconditionallyBridgeFromObjectiveC(_:)(v31);

      v33 = UUID.uuidString.getter(v32);
      v35 = v34;
      (*(void (**)(_BYTE *, uint64_t))(v42 + 8))(v4, v43);
      v44 = sub_100023980(v33, v35, &v45);
      v24 = v41;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v44, &v45, v29 + 4, v29 + 12);

      swift_bridgeObjectRelease(v35);
      *(_WORD *)(v29 + 12) = 1024;
      LODWORD(v44) = v24;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v44, (char *)&v44 + 4, v29 + 14, v29 + 18);
      _os_log_impl((void *)&_mh_execute_header, v27, v28, "defaultActivePowerState: %s powerState: %{BOOL}d", (uint8_t *)v29, 0x12u);
      swift_arrayDestroy(v30, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v30, -1, -1);
      swift_slowDealloc(v29, -1, -1);

    }
    else
    {

    }
    if (v24)
      v36 = 0xD000000000000021;
    else
      v36 = 0xD000000000000022;
    if (v24)
      v37 = 0x800000010008BF50;
    else
      v37 = 0x800000010008B640;
    static String.hfLocalized(_:)(v36, v37);

    swift_bridgeObjectRelease(v37);
  }
}

void sub_10007F9C8(unsigned int *a1, const char *a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  void *v16;
  id v17;
  id v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  id v22;
  uint64_t v23;
  char v24;
  char v25;
  Swift::Int v26;
  uint64_t v27;
  id v28;
  NSObject *v29;
  os_log_type_t v30;
  uint64_t v31;
  uint64_t v32;
  id v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  Class isa;
  Class v39;
  Class v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  const char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;

  v5 = type metadata accessor for UUID(0);
  v45 = *(_QWORD *)(v5 - 8);
  v46 = v5;
  __chkstk_darwin(v5);
  v7 = (char *)&v43 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for CharacteristicKind(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v43 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for WidgetTileInfo(0);
  v13 = v2 + *(int *)(v12 + 56);
  v14 = *(unsigned __int8 *)(v13 + 8);
  if ((v14 - 2) < 2)
    return;
  v15 = v12;
  v44 = a2;
  v16 = *(void **)v13;
  if (v14)
  {
    v18 = v16;
    v19 = objc_msgSend(v18, "services");
    v20 = sub_100008CBC(0, &qword_1000A5078, HMService_ptr);
    v21 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v19, v20);

    if ((unint64_t)v21 >> 62)
    {
      if (v21 < 0)
        v41 = v21;
      else
        v41 = v21 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v21);
      v42 = _CocoaArrayWrapper.endIndex.getter(v41);
      swift_bridgeObjectRelease(v21);
      if (v42)
        goto LABEL_6;
    }
    else if (*(_QWORD *)((v21 & 0xFFFFFFFFFFFFF8) + 0x10))
    {
LABEL_6:
      if ((v21 & 0xC000000000000001) != 0)
      {
        v22 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v21);
      }
      else
      {
        if (!*(_QWORD *)((v21 & 0xFFFFFFFFFFFFF8) + 0x10))
        {
          __break(1u);
          return;
        }
        v22 = *(id *)(v21 + 32);
      }
      v17 = v22;
      swift_bridgeObjectRelease(v21);

      goto LABEL_10;
    }
    swift_bridgeObjectRelease(v21);

    return;
  }
  v17 = v16;
LABEL_10:
  (*(void (**)(char *, _QWORD, uint64_t))(v9 + 104))(v11, *a1, v8);
  v23 = sub_100008FE4((uint64_t)v11, *(_QWORD *)(v2 + *(int *)(v15 + 60)));
  v25 = v24;
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  if ((v25 & 1) != 0)
    v26 = 0;
  else
    v26 = v23;
  if (qword_1000A4F08 != -1)
    swift_once(&qword_1000A4F08, sub_100053184);
  v27 = type metadata accessor for Logger(0);
  sub_100014698(v27, (uint64_t)qword_1000A7A80);
  v28 = v17;
  v29 = Logger.logObject.getter(v28);
  v30 = static os_log_type_t.default.getter(v29);
  if (os_log_type_enabled(v29, v30))
  {
    v31 = swift_slowAlloc(22, -1);
    v32 = swift_slowAlloc(32, -1);
    v48 = v32;
    *(_DWORD *)v31 = 136315394;
    v33 = objc_msgSend(v28, "uniqueIdentifier");
    static UUID._unconditionallyBridgeFromObjectiveC(_:)(v33);

    v35 = UUID.uuidString.getter(v34);
    v37 = v36;
    (*(void (**)(char *, uint64_t))(v45 + 8))(v7, v46);
    v47 = sub_100023980(v35, v37, &v48);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v47, &v48, v31 + 4, v31 + 12);

    swift_bridgeObjectRelease(v37);
    *(_WORD *)(v31 + 12) = 2048;
    v47 = v26;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v47, &v48, v31 + 14, v31 + 22);
    _os_log_impl((void *)&_mh_execute_header, v29, v30, v44, (uint8_t *)v31, 0x16u);
    swift_arrayDestroy(v32, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v32, -1, -1);
    swift_slowDealloc(v31, -1, -1);

  }
  else
  {

  }
  sub_100008CBC(0, (unint64_t *)&qword_1000A5210, NSNumber_ptr);
  isa = NSNumber.init(integerLiteral:)(v26).super.super.isa;
  v39 = NSNumber.init(integerLiteral:)(0).super.super.isa;
  v40 = NSNumber.init(integerLiteral:)(100).super.super.isa;
  sub_10005BDB0(isa);

}

unint64_t sub_10007FE0C()
{
  unint64_t result;

  result = qword_1000A74C0;
  if (!qword_1000A74C0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for String, &type metadata for String);
    atomic_store(result, (unint64_t *)&qword_1000A74C0);
  }
  return result;
}

unint64_t sub_10007FE50()
{
  unint64_t result;

  result = qword_1000A7500;
  if (!qword_1000A7500)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Double, &type metadata for Double);
    atomic_store(result, (unint64_t *)&qword_1000A7500);
  }
  return result;
}

unint64_t sub_10007FE94()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000A50A8;
  if (!qword_1000A50A8)
  {
    v1 = type metadata accessor for ServiceKind(255);
    result = swift_getWitnessTable(&protocol conformance descriptor for ServiceKind, v1);
    atomic_store(result, (unint64_t *)&qword_1000A50A8);
  }
  return result;
}

uint64_t HMAccessory.specialMediaCategory.getter@<X0>(uint64_t a1@<X8>)
{
  void *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;
  char v24;
  uint64_t v25;
  unsigned int *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;

  v3 = sub_10000527C(&qword_1000A7510);
  v4 = __chkstk_darwin(v3);
  v6 = (char *)&v36 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = HMAccessory.categoryType.getter(v4);
  v9 = v8;
  v10 = static String._unconditionallyBridgeFromObjectiveC(_:)(HMAccessoryCategoryTypeAppleTV);
  if (v10 == v7 && v11 == v9)
  {
    swift_bridgeObjectRelease(v9);
    goto LABEL_18;
  }
  v13 = v11;
  v14 = _stringCompareWithSmolCheck(_:_:expecting:)(v10, v11, v7, v9, 0);
  swift_bridgeObjectRelease(v13);
  if ((v14 & 1) != 0)
  {
LABEL_18:
    swift_bridgeObjectRelease(v9);
    v27 = (unsigned int *)&enum case for StaticAccessory.SpecialMediaCategory.appleTV(_:);
LABEL_19:
    v28 = *v27;
    v29 = type metadata accessor for StaticAccessory.SpecialMediaCategory(0);
    v30 = *(_QWORD *)(v29 - 8);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v30 + 104))(a1, v28, v29);
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v30 + 56))(a1, 0, 1, v29);
  }
  v15 = static String._unconditionallyBridgeFromObjectiveC(_:)(HMAccessoryCategoryTypeHomePod);
  if (v15 == v7 && v16 == v9)
  {
    swift_bridgeObjectRelease(v9);
  }
  else
  {
    v18 = v16;
    v19 = _stringCompareWithSmolCheck(_:_:expecting:)(v15, v16, v7, v9, 0);
    swift_bridgeObjectRelease(v18);
    if ((v19 & 1) == 0)
    {
      v20 = static String._unconditionallyBridgeFromObjectiveC(_:)(HMAccessoryCategoryTypeSpeaker);
      if (v20 == v7 && v21 == v9)
      {
        swift_bridgeObjectRelease_n(v9, 2);
      }
      else
      {
        v23 = v21;
        v24 = _stringCompareWithSmolCheck(_:_:expecting:)(v20, v21, v7, v9, 0);
        swift_bridgeObjectRelease(v9);
        swift_bridgeObjectRelease(v23);
        if ((v24 & 1) == 0)
        {
          v25 = type metadata accessor for StaticAccessory.SpecialMediaCategory(0);
          return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 56))(a1, 1, 1, v25);
        }
      }
      v27 = (unsigned int *)&enum case for StaticAccessory.SpecialMediaCategory.speaker(_:);
      goto LABEL_19;
    }
  }
  swift_bridgeObjectRelease(v9);
  StaticAccessory.HomePodTypes.init(rawValue:)(objc_msgSend(v1, "homePodVariant"));
  v31 = type metadata accessor for StaticAccessory.HomePodTypes(0);
  v32 = *(_QWORD *)(v31 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v32 + 48))(v6, 1, v31) == 1)
  {
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v32 + 104))(a1, enum case for StaticAccessory.HomePodTypes.original(_:), v31);
    sub_1000801A4((uint64_t)v6);
  }
  else
  {
    (*(void (**)(uint64_t, char *, uint64_t))(v32 + 32))(a1, v6, v31);
  }
  v33 = enum case for StaticAccessory.SpecialMediaCategory.homePod(_:);
  v34 = type metadata accessor for StaticAccessory.SpecialMediaCategory(0);
  v35 = *(_QWORD *)(v34 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v35 + 104))(a1, v33, v34);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v35 + 56))(a1, 0, 1, v34);
}

uint64_t sub_1000801A4(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_10000527C(&qword_1000A7510);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t type metadata accessor for ResourceBundleClass()
{
  return objc_opt_self(_TtC10HomeWidgetP33_8FE6D6260472B65BA526CF24C406FBA919ResourceBundleClass);
}

uint64_t sub_100080204()
{
  uint64_t v0;

  v0 = type metadata accessor for Logger(0);
  sub_10001D27C(v0, qword_1000A75B8);
  sub_100014698(v0, (uint64_t)qword_1000A75B8);
  return Logger.init(subsystem:category:)(0x6C7070612E6D6F63, 0xEE00656D6F482E65, 0xD000000000000011, 0x800000010008C120);
}

Swift::Int *maxNumberOfPredictions.unsafeMutableAddressor()
{
  return &maxNumberOfPredictions;
}

uint64_t HMHome.fetchPredictions()()
{
  uint64_t v0;
  _QWORD *v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;

  v1[28] = v0;
  v2 = (*(_QWORD *)(*(_QWORD *)(sub_10000527C(&qword_1000A5060) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v1[29] = swift_task_alloc(v2);
  v1[30] = swift_task_alloc(v2);
  v3 = type metadata accessor for UUID(0);
  v1[31] = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v1[32] = v4;
  v5 = (*(_QWORD *)(v4 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v1[33] = swift_task_alloc(v5);
  v1[34] = swift_task_alloc(v5);
  v1[35] = swift_task_alloc(v5);
  return swift_task_switch(sub_100080340, 0, 0);
}

uint64_t sub_100080340()
{
  uint64_t v0;
  id v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v1 = objc_msgSend(*(id *)(v0 + 224), "userActionPredictionController");
  *(_QWORD *)(v0 + 288) = v1;
  if (v1)
  {
    v2 = v1;
    v3 = v0 + 16;
    *(_QWORD *)(v0 + 56) = v0 + 192;
    *(_QWORD *)(v0 + 16) = v0;
    *(_QWORD *)(v0 + 24) = sub_100080448;
    v4 = swift_continuation_init(v0 + 16, 0);
    *(_QWORD *)(v0 + 80) = _NSConcreteStackBlock;
    v5 = (_QWORD *)(v0 + 80);
    v5[1] = 0x40000000;
    v5[2] = sub_100080D2C;
    v5[3] = &unk_1000A0288;
    v5[4] = v4;
    objc_msgSend(v2, "fetchPredictionsWithCompletion:", v5);
    return swift_continuation_await(v3);
  }
  else
  {
    v7 = *(_QWORD *)(v0 + 272);
    v8 = *(_QWORD *)(v0 + 264);
    v10 = *(_QWORD *)(v0 + 232);
    v9 = *(_QWORD *)(v0 + 240);
    swift_task_dealloc(*(_QWORD *)(v0 + 280));
    swift_task_dealloc(v7);
    swift_task_dealloc(v8);
    swift_task_dealloc(v9);
    swift_task_dealloc(v10);
    return (*(uint64_t (**)(_QWORD))(v0 + 8))(0);
  }
}

uint64_t sub_100080448()
{
  return swift_task_switch(sub_100080494, 0, 0);
}

void sub_100080494()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  id v5;
  void *v6;
  id v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  void (*v12)(char *, uint64_t, uint64_t);
  void (*v13)(char *, uint64_t, uint64_t, uint64_t);
  unsigned int (*v14)(char *, uint64_t, uint64_t);
  void *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  id v21;
  void (*v22)(char *, uint64_t, uint64_t);
  uint64_t v23;
  char *v24;
  char *v25;
  char *v26;
  char *v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  id *v37;
  uint64_t v38;
  NSObject *v39;
  os_log_type_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  id v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  id v56;
  void *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  NSObject *v63;
  os_log_type_t v64;
  _BOOL4 v65;
  void *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  unint64_t v74;
  id v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  unint64_t v79;
  id v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  id v86;
  uint64_t v87;
  uint64_t v88;
  os_log_type_t type[8];
  os_log_type_t typea;
  void *typeb;
  unint64_t v92;
  uint64_t v93;
  os_log_type_t v94[8];
  os_log_type_t v95;
  uint64_t v96;
  uint64_t v97;
  char *v98;
  uint64_t v99;

  v1 = *(_QWORD *)(v0 + 192);
  if ((unint64_t)v1 >> 62)
  {
    if (v1 < 0)
      v33 = *(_QWORD *)(v0 + 192);
    else
      v33 = v1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v1);
    v2 = _CocoaArrayWrapper.endIndex.getter(v33);
    if (v2)
      goto LABEL_3;
LABEL_26:
    v98 = (char *)_swiftEmptyArrayStorage;
LABEL_27:
    v34 = v0 + 144;
    v35 = v0 + 168;
    swift_bridgeObjectRelease_n(v1, 2);
    *(_QWORD *)(v0 + 168) = v98;
    if (qword_1000A75B0 != -1)
      swift_once(&qword_1000A75B0, sub_100080204);
    v37 = (id *)(v0 + 224);
    v36 = *(void **)(v0 + 224);
    v38 = type metadata accessor for Logger(0);
    sub_100014698(v38, (uint64_t)qword_1000A75B8);
    v39 = Logger.logObject.getter(v36);
    v40 = static os_log_type_t.default.getter(v39);
    if (os_log_type_enabled(v39, v40))
    {
      typea = v40;
      v41 = *(_QWORD *)(v0 + 272);
      v87 = *(_QWORD *)(v0 + 256);
      v42 = *(_QWORD *)(v0 + 248);
      v86 = *(id *)(v0 + 224);
      v43 = swift_slowAlloc(32, -1);
      v88 = swift_slowAlloc(64, -1);
      v99 = v88;
      *(_DWORD *)v43 = 134218498;
      swift_beginAccess(v35, v0 + 120, 0, 0);
      v44 = *(_QWORD *)(v0 + 168);
      *(_QWORD *)(v0 + 200) = *(_QWORD *)(v44 + 16);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 200, v0 + 208, v43 + 4, v43 + 12);
      *(_WORD *)(v43 + 12) = 2080;
      swift_bridgeObjectRetain(v44);
      v46 = Array.description.getter(v45, v42);
      v48 = v47;
      swift_bridgeObjectRelease(v44);
      *(_QWORD *)(v0 + 208) = sub_100023980(v46, v48, &v99);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 208, v0 + 216, v43 + 14, v43 + 22);
      swift_bridgeObjectRelease(v48);
      *(_WORD *)(v43 + 22) = 2080;
      v49 = objc_msgSend(v86, "uniqueIdentifier");
      static UUID._unconditionallyBridgeFromObjectiveC(_:)(v49);

      v50 = sub_1000820CC(&qword_1000A7600, (uint64_t)&protocol conformance descriptor for UUID);
      v51 = dispatch thunk of CustomStringConvertible.description.getter(v42, v50);
      v53 = v52;
      v54 = v42;
      v34 = v0 + 144;
      (*(void (**)(uint64_t, uint64_t))(v87 + 8))(v41, v54);
      *(_QWORD *)(v0 + 216) = sub_100023980(v51, v53, &v99);
      v35 = v0 + 168;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 216, v0 + 224, v43 + 24, v43 + 32);
      swift_bridgeObjectRelease(v53);

      _os_log_impl((void *)&_mh_execute_header, v39, typea, "HomeKit predictionUUIDs (%ld) = %s homeID = %s", (uint8_t *)v43, 0x20u);
      swift_arrayDestroy(v88, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v88, -1, -1);
      v55 = v43;
      v37 = (id *)(v0 + 224);
      swift_slowDealloc(v55, -1, -1);
    }
    else
    {
      v56 = *v37;

    }
    v57 = *(void **)(v0 + 224);
    swift_beginAccess(v35, v34, 1, 0);
    v58 = *(_QWORD *)(v0 + 168);
    swift_bridgeObjectRetain(v58);
    HMHome.backfill(predictionUUIDs:)(v59);
    v61 = v60;
    swift_bridgeObjectRelease(v58);
    v62 = *(_QWORD *)(v0 + 168);
    *(_QWORD *)(v0 + 168) = v61;
    swift_bridgeObjectRelease(v62);
    v63 = Logger.logObject.getter(v57);
    v64 = static os_log_type_t.default.getter(v63);
    v65 = os_log_type_enabled(v63, v64);
    v66 = *(void **)(v0 + 288);
    if (v65)
    {
      v95 = v64;
      v67 = *(_QWORD *)(v0 + 272);
      v68 = *(_QWORD *)(v0 + 248);
      typeb = *(void **)(v0 + 224);
      v93 = *(_QWORD *)(v0 + 256);
      v69 = swift_slowAlloc(22, -1);
      v97 = swift_slowAlloc(64, -1);
      *(_DWORD *)v69 = 136315394;
      v99 = v97;
      v70 = *(_QWORD *)(v0 + 168);
      swift_bridgeObjectRetain(v70);
      v72 = Array.description.getter(v71, v68);
      v74 = v73;
      swift_bridgeObjectRelease(v70);
      *(_QWORD *)(v0 + 176) = sub_100023980(v72, v74, &v99);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 176, v0 + 184, v69 + 4, v69 + 12);
      swift_bridgeObjectRelease(v74);
      *(_WORD *)(v69 + 12) = 2080;
      v75 = objc_msgSend(typeb, "uniqueIdentifier");
      static UUID._unconditionallyBridgeFromObjectiveC(_:)(v75);

      v76 = sub_1000820CC(&qword_1000A7600, (uint64_t)&protocol conformance descriptor for UUID);
      v77 = dispatch thunk of CustomStringConvertible.description.getter(v68, v76);
      v79 = v78;
      (*(void (**)(uint64_t, uint64_t))(v93 + 8))(v67, v68);
      *(_QWORD *)(v0 + 184) = sub_100023980(v77, v79, &v99);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 184, v0 + 192, v69 + 14, v69 + 22);
      swift_bridgeObjectRelease(v79);

      _os_log_impl((void *)&_mh_execute_header, v63, v95, "RETURNING predictions = %s homeID = %s", (uint8_t *)v69, 0x16u);
      swift_arrayDestroy(v97, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v97, -1, -1);
      swift_slowDealloc(v69, -1, -1);
    }
    else
    {
      v80 = *v37;

    }
    v81 = *(_QWORD *)(v0 + 168);
    v82 = *(_QWORD *)(v0 + 272);
    v83 = *(_QWORD *)(v0 + 264);
    v85 = *(_QWORD *)(v0 + 232);
    v84 = *(_QWORD *)(v0 + 240);
    swift_task_dealloc(*(_QWORD *)(v0 + 280));
    swift_task_dealloc(v82);
    swift_task_dealloc(v83);
    swift_task_dealloc(v84);
    swift_task_dealloc(v85);
    (*(void (**)(uint64_t))(v0 + 8))(v81);
    return;
  }
  v2 = *(_QWORD *)((v1 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain(v1);
  if (!v2)
    goto LABEL_26;
LABEL_3:
  if (v2 >= 1)
  {
    v3 = 0;
    v4 = *(_QWORD **)(v0 + 256);
    v92 = v1 & 0xC000000000000001;
    v96 = v1;
    v98 = (char *)_swiftEmptyArrayStorage;
    *(_QWORD *)v94 = v2;
    *(_QWORD *)type = v4;
    while (1)
    {
      v5 = v92 ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v3, v1) : *(id *)(v1 + 8 * v3 + 32);
      v6 = v5;
      v7 = objc_msgSend(v5, "targetServiceUUID");
      if (!v7)
        break;
      v8 = v7;
      v9 = *(_QWORD *)(v0 + 272);
      v10 = *(_QWORD *)(v0 + 248);
      v11 = *(char **)(v0 + 232);
      static UUID._unconditionallyBridgeFromObjectiveC(_:)(v7);

      v12 = (void (*)(char *, uint64_t, uint64_t))v4[4];
      v12(v11, v9, v10);
      v13 = (void (*)(char *, uint64_t, uint64_t, uint64_t))v4[7];
      v13(v11, 0, 1, v10);
      v14 = (unsigned int (*)(char *, uint64_t, uint64_t))v4[6];
      if (v14(v11, 1, v10) == 1)
      {
        v15 = v6;
        goto LABEL_14;
      }
      v24 = *(char **)(v0 + 240);
      v23 = *(_QWORD *)(v0 + 248);
      v12(v24, *(_QWORD *)(v0 + 232), v23);
      v13(v24, 0, 1, v23);

      v25 = v24;
      v4 = *(_QWORD **)type;
      if (v14(v25, 1, v23) != 1)
      {
LABEL_17:
        v26 = *(char **)(v0 + 280);
        v27 = *(char **)(v0 + 264);
        v28 = *(_QWORD *)(v0 + 248);
        v12(v26, *(_QWORD *)(v0 + 240), v28);
        v12(v27, (uint64_t)v26, v28);
        if ((swift_isUniquelyReferenced_nonNull_native(v98) & 1) == 0)
          v98 = (char *)sub_10005AA24(0, *((_QWORD *)v98 + 2) + 1, 1, (unint64_t)v98);
        v30 = *((_QWORD *)v98 + 2);
        v29 = *((_QWORD *)v98 + 3);
        v4 = *(_QWORD **)type;
        if (v30 >= v29 >> 1)
          v98 = (char *)sub_10005AA24(v29 > 1, v30 + 1, 1, (unint64_t)v98);
        v31 = *(_QWORD *)(v0 + 264);
        v32 = *(_QWORD *)(v0 + 248);
        *((_QWORD *)v98 + 2) = v30 + 1;
        v12(&v98[((*(unsigned __int8 *)(*(_QWORD *)type + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)type + 80))+ *(_QWORD *)(*(_QWORD *)type + 72) * v30], v31, v32);
        goto LABEL_6;
      }
LABEL_5:
      sub_100009BDC(*(_QWORD *)(v0 + 240));
LABEL_6:
      v1 = v96;
      if (*(_QWORD *)v94 == ++v3)
        goto LABEL_27;
    }
    v15 = v6;
    v13 = (void (*)(char *, uint64_t, uint64_t, uint64_t))v4[7];
    v13(*(char **)(v0 + 232), 1, 1, *(_QWORD *)(v0 + 248));
LABEL_14:
    v16 = v4;
    v17 = *(_QWORD *)(v0 + 272);
    v19 = *(char **)(v0 + 240);
    v18 = *(_QWORD *)(v0 + 248);
    v20 = *(_QWORD *)(v0 + 232);
    v21 = objc_msgSend(v15, "predictionTargetUUID");
    static UUID._unconditionallyBridgeFromObjectiveC(_:)(v21);

    v22 = (void (*)(char *, uint64_t, uint64_t))v16[4];
    v22(v19, v17, v18);
    sub_100009BDC(v20);
    v13(v19, 0, 1, v18);

    v12 = v22;
    v4 = v16;
    if (((unsigned int (*)(char *, uint64_t, uint64_t))v16[6])(v19, 1, v18) != 1)
      goto LABEL_17;
    goto LABEL_5;
  }
  __break(1u);
}

uint64_t sub_100080D2C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;

  v3 = *(_QWORD *)(a1 + 32);
  v4 = sub_10008210C();
  **(_QWORD **)(*(_QWORD *)(v3 + 64) + 40) = static Array._unconditionallyBridgeFromObjectiveC(_:)(a2, v4);
  return swift_continuation_resume(v3);
}

char *sub_100080D70(uint64_t a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  BOOL v21;
  uint64_t v22;
  uint64_t v23;
  double v24;
  id v25;
  uint64_t v26;
  uint64_t v27;
  __n128 v28;
  void (*v29)(char *, uint64_t, uint64_t, __n128);
  void (*v30)(char *, uint64_t, uint64_t, uint64_t);
  unsigned int (*v31)(char *, uint64_t, uint64_t);
  void (*v32)(char *, char *, uint64_t);
  char *v33;
  uint64_t v34;
  char v35;
  void (*v36)(char *, uint64_t);
  uint64_t v37;
  id v38;
  id v39;
  uint64_t v40;
  int v41;
  char *v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  char *v46;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  char *v56;
  _QWORD *v57;
  char *v58;
  uint64_t v59;
  id v60;
  uint64_t v61;
  char *v62;
  char *v63;
  uint64_t (*v64)(char *, uint64_t, uint64_t);
  uint64_t v65;
  void (*v66)(char *, uint64_t, uint64_t, __n128);
  void (*v67)(char *, uint64_t, uint64_t, uint64_t);
  char *v68;

  v57 = a2;
  v3 = sub_10000527C(&qword_1000A5060);
  v4 = __chkstk_darwin(v3);
  v6 = (char *)&v49 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v8 = (char *)&v49 - v7;
  v9 = type metadata accessor for UUID(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = __chkstk_darwin(v9);
  v56 = (char *)&v49 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __chkstk_darwin(v11);
  v63 = (char *)&v49 - v14;
  v15 = __chkstk_darwin(v13);
  v68 = (char *)&v49 - v16;
  __chkstk_darwin(v15);
  v51 = (char *)&v49 - v17;
  if ((unint64_t)a1 >> 62)
    goto LABEL_29;
  v18 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain(a1);
  while (v18)
  {
    v19 = 0;
    v55 = a1 & 0xC000000000000001;
    v58 = (char *)_swiftEmptyArrayStorage;
    v50 = a1 + 32;
    v52 = v8;
    v53 = a1;
    v62 = v6;
    v54 = v18;
    while (v55)
    {
      v20 = (void *)specialized _ArrayBuffer._getElementSlowPath(_:)(v19, a1);
      v21 = __OFADD__(v19, 1);
      v22 = v19 + 1;
      if (v21)
        goto LABEL_28;
LABEL_11:
      v61 = v22;
      v23 = *v57;
      *(_QWORD *)&v24 = swift_bridgeObjectRetain(*v57).n128_u64[0];
      v60 = v20;
      v25 = objc_msgSend(v20, "uniqueIdentifier", v24);
      static UUID._unconditionallyBridgeFromObjectiveC(_:)(v25);

      v26 = *(_QWORD *)(v23 + 16);
      v59 = v23;
      if (v26)
      {
        v27 = v23 + ((*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80));
        v28 = swift_bridgeObjectRetain(v23);
        v29 = *(void (**)(char *, uint64_t, uint64_t, __n128))(v10 + 16);
        v65 = *(_QWORD *)(v10 + 72);
        v66 = v29;
        while (1)
        {
          v66(v6, v27, v9, v28);
          v30 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v10 + 56);
          v30(v6, 0, 1, v9);
          v31 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48);
          if (v31(v6, 1, v9) == 1)
            break;
          v64 = (uint64_t (*)(char *, uint64_t, uint64_t))v31;
          v67 = v30;
          v32 = *(void (**)(char *, char *, uint64_t))(v10 + 32);
          v33 = v63;
          v32(v63, v6, v9);
          v34 = sub_1000820CC((unint64_t *)&unk_1000A7670, (uint64_t)&protocol conformance descriptor for UUID);
          v35 = dispatch thunk of static Equatable.== infix(_:_:)(v33, v68, v9, v34);
          v36 = *(void (**)(char *, uint64_t))(v10 + 8);
          v36(v33, v9);
          if ((v35 & 1) != 0)
          {
            v40 = v59;
            swift_bridgeObjectRelease(v59);
            v36(v68, v9);
            swift_bridgeObjectRelease(v40);
            v8 = v52;
            v67(v52, 1, 1, v9);
            swift_unknownObjectRelease(v60);
            v41 = v64(v8, 1, v9);
            a1 = v53;
            v19 = v61;
            v6 = v62;
            if (v41 == 1)
              goto LABEL_4;
            goto LABEL_22;
          }
          v27 += v65;
          --v26;
          v6 = v62;
          if (!v26)
            goto LABEL_18;
        }
      }
      else
      {
        swift_bridgeObjectRetain(v23);
        v67 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v10 + 56);
LABEL_18:
        v30 = v67;
        v67(v6, 1, 1, v9);
      }
      a1 = v53;
      v19 = v61;
      v37 = v59;
      swift_bridgeObjectRelease(v59);
      (*(void (**)(char *, uint64_t))(v10 + 8))(v68, v9);
      swift_bridgeObjectRelease(v37);
      v38 = v60;
      v39 = objc_msgSend(v60, "uniqueIdentifier");
      v8 = v52;
      static UUID._unconditionallyBridgeFromObjectiveC(_:)(v39);

      v30(v8, 0, 1, v9);
      swift_unknownObjectRelease(v38);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
      {
LABEL_4:
        sub_100009BDC((uint64_t)v8);
      }
      else
      {
        v32 = *(void (**)(char *, char *, uint64_t))(v10 + 32);
LABEL_22:
        v42 = v51;
        v32(v51, v8, v9);
        v32(v56, v42, v9);
        v43 = (unint64_t)v58;
        if ((swift_isUniquelyReferenced_nonNull_native(v58) & 1) == 0)
          v43 = sub_10005AA24(0, *(_QWORD *)(v43 + 16) + 1, 1, v43);
        v45 = *(_QWORD *)(v43 + 16);
        v44 = *(_QWORD *)(v43 + 24);
        v58 = (char *)v43;
        if (v45 >= v44 >> 1)
          v58 = (char *)sub_10005AA24(v44 > 1, v45 + 1, 1, (unint64_t)v58);
        v46 = v58;
        *((_QWORD *)v58 + 2) = v45 + 1;
        v32(&v46[((*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80))+ *(_QWORD *)(v10 + 72) * v45], v56, v9);
        v19 = v61;
      }
      if (v19 == v54)
      {
        swift_bridgeObjectRelease(a1);
        return v58;
      }
    }
    v20 = *(void **)(v50 + 8 * v19);
    swift_unknownObjectRetain(v20);
    v21 = __OFADD__(v19, 1);
    v22 = v19 + 1;
    if (!v21)
      goto LABEL_11;
LABEL_28:
    __break(1u);
LABEL_29:
    if (a1 < 0)
      v48 = a1;
    else
      v48 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v18 = _CocoaArrayWrapper.endIndex.getter(v48);
  }
  swift_bridgeObjectRelease(a1);
  return (char *)_swiftEmptyArrayStorage;
}

void HMHome.backfill(predictionUUIDs:)(uint64_t a1)
{
  void *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  void *v22;
  Class isa;
  id v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  void *v30;
  id v31;
  char *v32;
  void (*v33)(char *, char *, uint64_t);
  char *v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  id v40;
  NSObject *v41;
  os_log_type_t v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  id v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  unint64_t v54;
  char *v55;
  id v56;
  uint64_t v57;
  char *v58;
  id v59;
  char *v60;
  NSObject *v61;
  os_log_type_t v62;
  int v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  unint64_t v68;
  id v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  unint64_t v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  Class v78;
  id v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  char *v83;
  uint64_t v84;
  void *v85;
  id v86;
  char *v87;
  void (*v88)(char *, char *, uint64_t);
  uint64_t v89;
  char *v90;
  unint64_t v91;
  unint64_t v92;
  uint64_t v93;
  char *v94;
  char *v95;
  NSObject *v96;
  os_log_type_t v97;
  int v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  unint64_t v102;
  unint64_t v103;
  id v104;
  char *v105;
  uint64_t v106;
  uint64_t v107;
  unint64_t v108;
  unint64_t v109;
  char *v110;
  uint64_t v111;
  uint64_t v112;
  id v113;
  uint64_t v114;
  id v115;
  char *v116;
  char *v117;
  unint64_t v118;
  char *v119;
  char *v120;
  char *v121;
  char *v122;
  uint64_t v123;
  uint64_t v124[2];
  uint64_t v125;

  v3 = sub_10000527C(&qword_1000A5060);
  v4 = __chkstk_darwin(v3);
  v6 = (char *)&v111 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v8 = (char *)&v111 - v7;
  v9 = type metadata accessor for UUID(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = __chkstk_darwin(v9);
  v120 = (char *)&v111 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __chkstk_darwin(v11);
  v116 = (char *)&v111 - v14;
  v15 = __chkstk_darwin(v13);
  v121 = (char *)&v111 - v16;
  v17 = __chkstk_darwin(v15);
  v122 = (char *)&v111 - v18;
  __chkstk_darwin(v17);
  v117 = (char *)&v111 - v19;
  v125 = a1;
  v20 = *(_QWORD *)(a1 + 16);
  if (v20 >= 0x10)
  {
    swift_bridgeObjectRetain(a1);
    return;
  }
  v21 = 16 - v20;
  v22 = (void *)objc_opt_self(HFItemProviderUtilities);
  swift_bridgeObjectRetain(a1);
  isa = Array._bridgeToObjectiveC()().super.isa;
  v115 = v22;
  v113 = v1;
  v24 = objc_msgSend(v22, "predictionsPaddingFavoriteServicesForHome:withLimit:ignoreUUIDs:", v1, v21, isa);

  v114 = sub_10000527C(&qword_1000A7668);
  v25 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v24, v114);

  if ((unint64_t)v25 >> 62)
  {
    if (v25 < 0)
      v37 = v25;
    else
      v37 = v25 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v25);
    v26 = _CocoaArrayWrapper.endIndex.getter(v37);
    v119 = v6;
    if (v26)
      goto LABEL_4;
LABEL_22:
    v28 = (char *)_swiftEmptyArrayStorage;
    goto LABEL_23;
  }
  v26 = *(_QWORD *)((v25 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain(v25);
  v119 = v6;
  if (!v26)
    goto LABEL_22;
LABEL_4:
  if (v26 < 1)
  {
    __break(1u);
    goto LABEL_56;
  }
  v27 = 0;
  v118 = v25 & 0xC000000000000001;
  v28 = (char *)_swiftEmptyArrayStorage;
  v29 = v25;
  do
  {
    if (v118)
    {
      v30 = (void *)specialized _ArrayBuffer._getElementSlowPath(_:)(v27, v25);
    }
    else
    {
      v30 = *(void **)(v25 + 8 * v27 + 32);
      swift_unknownObjectRetain(v30);
    }
    v31 = objc_msgSend(v30, "uniqueIdentifier");
    v32 = v122;
    static UUID._unconditionallyBridgeFromObjectiveC(_:)(v31);

    v33 = *(void (**)(char *, char *, uint64_t))(v10 + 32);
    v33(v8, v32, v9);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v8, 0, 1, v9);
    swift_unknownObjectRelease(v30);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
    {
      sub_100009BDC((uint64_t)v8);
    }
    else
    {
      v34 = v117;
      v33(v117, v8, v9);
      v33(v121, v34, v9);
      if ((swift_isUniquelyReferenced_nonNull_native(v28) & 1) == 0)
        v28 = (char *)sub_10005AA24(0, *((_QWORD *)v28 + 2) + 1, 1, (unint64_t)v28);
      v36 = *((_QWORD *)v28 + 2);
      v35 = *((_QWORD *)v28 + 3);
      if (v36 >= v35 >> 1)
        v28 = (char *)sub_10005AA24(v35 > 1, v36 + 1, 1, (unint64_t)v28);
      *((_QWORD *)v28 + 2) = v36 + 1;
      v33(&v28[((*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80))+ *(_QWORD *)(v10 + 72) * v36], v121, v9);
    }
    ++v27;
    v25 = v29;
  }
  while (v26 != v27);
LABEL_23:
  swift_bridgeObjectRelease_n(v25, 2);
  if (qword_1000A75B0 != -1)
    swift_once(&qword_1000A75B0, sub_100080204);
  v38 = type metadata accessor for Logger(0);
  v39 = sub_100014698(v38, (uint64_t)qword_1000A75B8);
  swift_bridgeObjectRetain_n(v28, 2);
  v40 = v113;
  v118 = v39;
  v41 = Logger.logObject.getter(v40);
  v42 = static os_log_type_t.default.getter(v41);
  v43 = v42;
  if (os_log_type_enabled(v41, v42))
  {
    v44 = swift_slowAlloc(22, -1);
    v121 = (char *)swift_slowAlloc(64, -1);
    v124[0] = (uint64_t)v121;
    *(_DWORD *)v44 = 136315394;
    LODWORD(v117) = v43;
    swift_bridgeObjectRetain(v28);
    v46 = Array.description.getter(v45, v9);
    v48 = v47;
    swift_bridgeObjectRelease(v28);
    v123 = sub_100023980(v46, v48, v124);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v123, v124, v44 + 4, v44 + 12);
    swift_bridgeObjectRelease_n(v28, 2);
    swift_bridgeObjectRelease(v48);
    *(_WORD *)(v44 + 12) = 2080;
    v113 = (id)(v44 + 14);
    v49 = objc_msgSend(v40, "uniqueIdentifier");
    v50 = v122;
    static UUID._unconditionallyBridgeFromObjectiveC(_:)(v49);

    v51 = sub_1000820CC(&qword_1000A7600, (uint64_t)&protocol conformance descriptor for UUID);
    v52 = dispatch thunk of CustomStringConvertible.description.getter(v9, v51);
    v54 = v53;
    (*(void (**)(char *, uint64_t))(v10 + 8))(v50, v9);
    v123 = sub_100023980(v52, v54, v124);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v123, v124, v113, v44 + 22);

    swift_bridgeObjectRelease(v54);
    _os_log_impl((void *)&_mh_execute_header, v41, (os_log_type_t)v117, "Backfilling with favoriteUUIDs = %s homeID = %s", (uint8_t *)v44, 0x16u);
    v55 = v121;
    swift_arrayDestroy(v121, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v55, -1, -1);
    swift_slowDealloc(v44, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n(v28, 2);
  }
  sub_100057A80((uint64_t)v28);
  v56 = objc_msgSend(v115, "favoriteActionSetsForHome:withLimit:", v40, 16 - *(_QWORD *)(v125 + 16));
  v57 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v56, v114);

  v58 = sub_100080D70(v57, &v125);
  swift_bridgeObjectRelease(v57);
  v59 = v40;
  swift_bridgeObjectRetain_n(v58, 2);
  v60 = (char *)v59;
  v61 = Logger.logObject.getter(v60);
  v62 = static os_log_type_t.default.getter(v61);
  v63 = v62;
  if (os_log_type_enabled(v61, v62))
  {
    v64 = swift_slowAlloc(22, -1);
    v121 = (char *)swift_slowAlloc(64, -1);
    v124[0] = (uint64_t)v121;
    *(_DWORD *)v64 = 136315394;
    LODWORD(v113) = v63;
    swift_bridgeObjectRetain(v58);
    v66 = Array.description.getter(v65, v9);
    v68 = v67;
    swift_bridgeObjectRelease(v58);
    v123 = sub_100023980(v66, v68, v124);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v123, v124, v64 + 4, v64 + 12);
    swift_bridgeObjectRelease_n(v58, 2);
    swift_bridgeObjectRelease(v68);
    *(_WORD *)(v64 + 12) = 2080;
    v112 = v64 + 14;
    v69 = objc_msgSend(v60, "uniqueIdentifier");
    v70 = v122;
    static UUID._unconditionallyBridgeFromObjectiveC(_:)(v69);

    v71 = sub_1000820CC(&qword_1000A7600, (uint64_t)&protocol conformance descriptor for UUID);
    v72 = dispatch thunk of CustomStringConvertible.description.getter(v9, v71);
    v74 = v73;
    (*(void (**)(char *, uint64_t))(v10 + 8))(v70, v9);
    v123 = sub_100023980(v72, v74, v124);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v123, v124, v112, v64 + 22);

    swift_bridgeObjectRelease(v74);
    _os_log_impl((void *)&_mh_execute_header, v61, (os_log_type_t)v113, "Backfilling with sceneUUIDs = %s homeID = %s", (uint8_t *)v64, 0x16u);
    v75 = v121;
    swift_arrayDestroy(v121, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v75, -1, -1);
    swift_slowDealloc(v64, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n(v58, 2);
  }
  sub_100057A80((uint64_t)v58);
  v76 = v125;
  v77 = 16 - *(_QWORD *)(v125 + 16);
  swift_bridgeObjectRetain(v125);
  v78 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v76);
  v79 = objc_msgSend(v115, "predictionsPaddingNonFavoriteServicesForHome:withLimit:ignoreUUIDs:", v60, v77, v78);

  v80 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v79, v114);
  if ((unint64_t)v80 >> 62)
  {
    if (v80 < 0)
      v93 = v80;
    else
      v93 = v80 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v80);
    v81 = _CocoaArrayWrapper.endIndex.getter(v93);
    v117 = v60;
    if (v81)
    {
LABEL_33:
      if (v81 >= 1)
      {
        v82 = 0;
        v121 = (char *)(v80 & 0xC000000000000001);
        v83 = (char *)_swiftEmptyArrayStorage;
        v84 = v80;
        do
        {
          if (v121)
          {
            v85 = (void *)specialized _ArrayBuffer._getElementSlowPath(_:)(v82, v80);
          }
          else
          {
            v85 = *(void **)(v80 + 8 * v82 + 32);
            swift_unknownObjectRetain(v85);
          }
          v86 = objc_msgSend(v85, "uniqueIdentifier");
          v87 = v122;
          static UUID._unconditionallyBridgeFromObjectiveC(_:)(v86);

          v88 = *(void (**)(char *, char *, uint64_t))(v10 + 32);
          v89 = (uint64_t)v119;
          v88(v119, v87, v9);
          (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v10 + 56))(v89, 0, 1, v9);
          swift_unknownObjectRelease(v85);
          if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v10 + 48))(v89, 1, v9) == 1)
          {
            sub_100009BDC(v89);
            v80 = v84;
          }
          else
          {
            v90 = v116;
            v88(v116, (char *)v89, v9);
            v88(v120, v90, v9);
            if ((swift_isUniquelyReferenced_nonNull_native(v83) & 1) == 0)
              v83 = (char *)sub_10005AA24(0, *((_QWORD *)v83 + 2) + 1, 1, (unint64_t)v83);
            v80 = v84;
            v92 = *((_QWORD *)v83 + 2);
            v91 = *((_QWORD *)v83 + 3);
            if (v92 >= v91 >> 1)
              v83 = (char *)sub_10005AA24(v91 > 1, v92 + 1, 1, (unint64_t)v83);
            *((_QWORD *)v83 + 2) = v92 + 1;
            v88(&v83[((*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80))+ *(_QWORD *)(v10 + 72) * v92], v120, v9);
          }
          ++v82;
        }
        while (v81 != v82);
        goto LABEL_51;
      }
LABEL_56:
      __break(1u);
      return;
    }
  }
  else
  {
    v81 = *(_QWORD *)((v80 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain(v80);
    v117 = v60;
    if (v81)
      goto LABEL_33;
  }
  v83 = (char *)_swiftEmptyArrayStorage;
LABEL_51:
  swift_bridgeObjectRelease_n(v80, 2);
  v94 = v117;
  swift_bridgeObjectRetain_n(v83, 2);
  v95 = v94;
  v96 = Logger.logObject.getter(v95);
  v97 = static os_log_type_t.default.getter(v96);
  v98 = v97;
  if (os_log_type_enabled(v96, v97))
  {
    v99 = swift_slowAlloc(22, -1);
    v121 = (char *)swift_slowAlloc(64, -1);
    v124[0] = (uint64_t)v121;
    *(_DWORD *)v99 = 136315394;
    LODWORD(v120) = v98;
    swift_bridgeObjectRetain(v83);
    v101 = Array.description.getter(v100, v9);
    v103 = v102;
    swift_bridgeObjectRelease(v83);
    v123 = sub_100023980(v101, v103, v124);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v123, v124, v99 + 4, v99 + 12);
    swift_bridgeObjectRelease_n(v83, 2);
    swift_bridgeObjectRelease(v103);
    *(_WORD *)(v99 + 12) = 2080;
    v119 = (char *)(v99 + 14);
    v104 = objc_msgSend(v95, "uniqueIdentifier");
    v105 = v122;
    static UUID._unconditionallyBridgeFromObjectiveC(_:)(v104);

    v106 = sub_1000820CC(&qword_1000A7600, (uint64_t)&protocol conformance descriptor for UUID);
    v107 = dispatch thunk of CustomStringConvertible.description.getter(v9, v106);
    v109 = v108;
    (*(void (**)(char *, uint64_t))(v10 + 8))(v105, v9);
    v123 = sub_100023980(v107, v109, v124);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v123, v124, v119, v99 + 22);

    swift_bridgeObjectRelease(v109);
    _os_log_impl((void *)&_mh_execute_header, v96, (os_log_type_t)v120, "Backfilling with nonFavoriteUUIDs = %s homeID = %s", (uint8_t *)v99, 0x16u);
    v110 = v121;
    swift_arrayDestroy(v121, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v110, -1, -1);
    swift_slowDealloc(v99, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n(v83, 2);
  }
  sub_100057A80((uint64_t)v83);
}

uint64_t variable initialization expression of HomeWidget.task()
{
  return 0;
}

id variable initialization expression of UserHomeSettings.homeAppGroup()
{
  return sub_100082038();
}

id variable initialization expression of UserHomeSettings.nanoHomeGroup()
{
  return sub_100082038();
}

id sub_100082038()
{
  id v0;
  NSString v1;
  id v2;

  v0 = objc_allocWithZone((Class)NSUserDefaults);
  v1 = String._bridgeToObjectiveC()();
  v2 = objc_msgSend(v0, "initWithSuiteName:", v1);

  if (v2)
    return v2;
  else
    return objc_msgSend((id)objc_opt_self(NSUserDefaults), "standardUserDefaults");
}

uint64_t sub_1000820CC(unint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    v5 = type metadata accessor for UUID(255);
    result = swift_getWitnessTable(a2, v5);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_10008210C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000A7688;
  if (!qword_1000A7688)
  {
    v1 = objc_opt_self(HMUserActionPrediction);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_1000A7688);
  }
  return result;
}

uint64_t sub_100082148()
{
  uint64_t v0;

  v0 = type metadata accessor for Logger(0);
  sub_10001D27C(v0, qword_1000A7690);
  sub_100014698(v0, (uint64_t)qword_1000A7690);
  return Logger.init(subsystem:category:)(0x6C7070612E6D6F63, 0xEE00656D6F482E65, 0x67646957656D6F48, 0xEA00000000007465);
}

Swift::Int *HOMEKIT_REFRESH_TIMEOUT_SEC.unsafeMutableAddressor()
{
  return &HOMEKIT_REFRESH_TIMEOUT_SEC;
}

BOOL static HomeWidget.HomeWidgetError.__derived_enum_equals(_:_:)(char a1, char a2)
{
  return a1 == a2;
}

void HomeWidget.HomeWidgetError.hash(into:)(uint64_t a1, unsigned __int8 a2)
{
  Hasher._combine(_:)(a2);
}

Swift::Int HomeWidget.HomeWidgetError.hashValue.getter(unsigned __int8 a1)
{
  _QWORD v3[9];

  Hasher.init(_seed:)(v3, 0);
  Hasher._combine(_:)(a1);
  return Hasher._finalize()();
}

uint64_t sub_10008224C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;

  v0 = type metadata accessor for HomeWidget();
  v1 = swift_allocObject(v0, 128, 15);
  result = swift_defaultActor_initialize();
  *(_QWORD *)(v1 + 112) = 0;
  *(_QWORD *)(v1 + 120) = 0;
  static HomeWidget.shared = v1;
  return result;
}

uint64_t *HomeWidget.shared.unsafeMutableAddressor()
{
  if (qword_1000A75D8 != -1)
    swift_once(&qword_1000A75D8, sub_10008224C);
  return &static HomeWidget.shared;
}

uint64_t static HomeWidget.shared.getter()
{
  if (qword_1000A75D8 != -1)
    swift_once(&qword_1000A75D8, sub_10008224C);
  return swift_retain(static HomeWidget.shared);
}

uint64_t HomeWidget.manager.getter()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = v0;
  return swift_task_switch(sub_100082320, v0, 0);
}

uint64_t sub_100082320()
{
  _QWORD *v0;
  void *v1;
  id v2;
  _QWORD *v4;
  uint64_t (*v5)(void *);

  v1 = *(void **)(v0[2] + 120);
  v0[3] = v1;
  if (v1)
  {
    v5 = (uint64_t (*)(void *))v0[1];
    v2 = v1;
    return v5(v1);
  }
  else
  {
    v4 = (_QWORD *)swift_task_alloc(dword_1000A76B4);
    v0[4] = v4;
    *v4 = v0;
    v4[1] = sub_10008239C;
    return sub_1000824B4();
  }
}

uint64_t sub_10008239C(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();

  v3 = *v2;
  v4 = *(_QWORD *)(*v2 + 32);
  *(_QWORD *)(*v2 + 40) = a1;
  swift_task_dealloc(v4);
  v5 = *(_QWORD *)(v3 + 16);
  if (v1)
  {
    swift_errorRelease(v1);
    v6 = sub_100082478;
  }
  else
  {
    v6 = sub_100082414;
  }
  return swift_task_switch(v6, v5, 0);
}

uint64_t sub_100082414()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  void *v3;
  id v4;
  uint64_t v5;
  id v6;
  uint64_t (*v8)(uint64_t);

  v1 = *(void **)(v0 + 40);
  if (v1)
  {
    v2 = *(_QWORD *)(v0 + 16);
    v3 = *(void **)(v2 + 120);
    *(_QWORD *)(v2 + 120) = v1;
    v4 = v1;

    v5 = *(_QWORD *)(v0 + 40);
  }
  else
  {
    v5 = 0;
  }
  v8 = *(uint64_t (**)(uint64_t))(v0 + 8);
  v6 = *(id *)(v0 + 24);
  return v8(v5);
}

uint64_t sub_100082478()
{
  uint64_t v0;
  id v1;
  uint64_t (*v3)(_QWORD);

  v3 = *(uint64_t (**)(_QWORD))(v0 + 8);
  v1 = *(id *)(v0 + 24);
  return v3(0);
}

uint64_t sub_1000824B4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 32) = v0;
  v2 = sub_10000527C(&qword_1000A5AE8);
  *(_QWORD *)(v1 + 40) = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v2 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_100082510, v0, 0);
}

uint64_t sub_100082510()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;

  v1 = v0[4];
  v2 = *(_QWORD *)(v1 + 112);
  v0[6] = v2;
  if (v2)
  {
    v3 = async function pointer to Task.value.getter[1];
    swift_retain(v2);
    v4 = (_QWORD *)swift_task_alloc(v3);
    v0[7] = v4;
    v5 = sub_10000527C(&qword_1000A77A8);
    v6 = sub_10000527C(&qword_1000A64A0);
    *v4 = v0;
    v4[1] = sub_1000826B0;
    v7 = v0 + 3;
    v8 = v2;
  }
  else
  {
    v9 = v0[5];
    v10 = type metadata accessor for TaskPriority(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56))(v9, 1, 1, v10);
    v11 = swift_allocObject(&unk_1000A0450, 24, 7);
    swift_weakInit(v11 + 16, v1);
    v12 = (_QWORD *)swift_allocObject(&unk_1000A0478, 40, 7);
    v12[2] = 0;
    v12[3] = 0;
    v12[4] = v11;
    v13 = sub_100083444(v9, (uint64_t)&unk_1000A77A0, (uint64_t)v12);
    v0[9] = v13;
    v14 = *(_QWORD *)(v1 + 112);
    *(_QWORD *)(v1 + 112) = v13;
    swift_retain(v13);
    swift_release(v14);
    v15 = (_QWORD *)swift_task_alloc(async function pointer to Task.value.getter[1]);
    v0[10] = v15;
    v5 = sub_10000527C(&qword_1000A77A8);
    v6 = sub_10000527C(&qword_1000A64A0);
    *v15 = v0;
    v15[1] = sub_100082758;
    v7 = v0 + 2;
    v8 = v13;
  }
  return Task.value.getter(v7, v8, v5, v6, &protocol self-conformance witness table for Error);
}

uint64_t sub_1000826B0()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 56);
  *(_QWORD *)(*v1 + 64) = v0;
  swift_task_dealloc(v3);
  if (v0)
    v4 = sub_100082814;
  else
    v4 = sub_100082714;
  return swift_task_switch(v4, *(_QWORD *)(v2 + 32), 0);
}

uint64_t sub_100082714()
{
  uint64_t v0;
  uint64_t v1;

  swift_release(*(_QWORD *)(v0 + 48));
  v1 = *(_QWORD *)(v0 + 24);
  swift_task_dealloc(*(_QWORD *)(v0 + 40));
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v1);
}

uint64_t sub_100082758()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 80);
  *(_QWORD *)(*v1 + 88) = v0;
  swift_task_dealloc(v3);
  if (v0)
    v4 = sub_100082850;
  else
    v4 = sub_1000827BC;
  return swift_task_switch(v4, *(_QWORD *)(v2 + 32), 0);
}

uint64_t sub_1000827BC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *(_QWORD *)(v0 + 72);
  v2 = *(_QWORD *)(v0 + 32);
  v3 = *(_QWORD *)(v0 + 16);
  v4 = *(_QWORD *)(v2 + 112);
  *(_QWORD *)(v2 + 112) = 0;
  swift_release(v1);
  swift_release(v4);
  swift_task_dealloc(*(_QWORD *)(v0 + 40));
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v3);
}

uint64_t sub_100082814()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 48));
  swift_task_dealloc(*(_QWORD *)(v0 + 40));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100082850()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(v0 + 72);
  v2 = *(_QWORD *)(v0 + 32);
  v3 = *(_QWORD *)(v2 + 112);
  *(_QWORD *)(v2 + 112) = 0;
  swift_release(v1);
  swift_release(v3);
  swift_task_dealloc(*(_QWORD *)(v0 + 40));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t HomeWidget.refreshLatestHomeKitState(timeout:)(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;

  v2[2] = a1;
  v2[3] = v1;
  v3 = sub_10000527C(&qword_1000A76C0);
  v2[4] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v3 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_10000527C(&qword_1000A76C8);
  v2[5] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for DateComponents(0);
  v2[6] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v2[7] = v6;
  v2[8] = swift_task_alloc((*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for Calendar(0);
  v2[9] = v7;
  v8 = *(_QWORD *)(v7 - 8);
  v2[10] = v8;
  v2[11] = swift_task_alloc((*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_10000527C(&qword_1000A58E8);
  v2[12] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v9 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for Date(0);
  v2[13] = v10;
  v11 = *(_QWORD *)(v10 - 8);
  v2[14] = v11;
  v12 = (*(_QWORD *)(v11 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[15] = swift_task_alloc(v12);
  v2[16] = swift_task_alloc(v12);
  return swift_task_switch(sub_1000829CC, v1, 0);
}

uint64_t sub_1000829CC()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  uint8_t *v18;
  unint64_t v19;
  uint64_t v20;
  _BYTE *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  id v35;

  v1 = *(void **)(*(_QWORD *)(v0 + 24) + 120);
  *(_QWORD *)(v0 + 136) = v1;
  if (v1)
  {
    v2 = *(_QWORD *)(v0 + 120);
    v3 = *(_QWORD *)(v0 + 88);
    v30 = *(_QWORD *)(v0 + 96);
    v31 = *(_QWORD *)(v0 + 112);
    v5 = *(_QWORD *)(v0 + 72);
    v4 = *(_QWORD *)(v0 + 80);
    v6 = *(_QWORD *)(v0 + 64);
    v32 = *(_QWORD *)(v0 + 56);
    v7 = *(_QWORD *)(v0 + 40);
    v33 = *(_QWORD *)(v0 + 48);
    v34 = *(_QWORD *)(v0 + 104);
    v8 = *(_QWORD *)(v0 + 32);
    v9 = *(_QWORD *)(v0 + 16);
    v35 = v1;
    static Calendar.current.getter();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v4 + 56))(v7, 1, 1, v5);
    v10 = type metadata accessor for TimeZone(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56))(v8, 1, 1, v10);
    v11 = DateComponents.init(calendar:timeZone:era:year:month:day:hour:minute:second:nanosecond:weekday:weekdayOrdinal:quarter:weekOfMonth:weekOfYear:yearForWeekOfYear:)(v7, v8, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, v9, 0, 0, 1, 0,
            1,
            0,
            1,
            0,
            1,
            0,
            1,
            0,
            1,
            0,
            1);
    static Date.now.getter(v11);
    Calendar.date(byAdding:to:wrappingComponents:)(v6, v2, 0);
    v12 = *(void (**)(uint64_t, uint64_t))(v31 + 8);
    *(_QWORD *)(v0 + 144) = v12;
    v12(v2, v34);
    (*(void (**)(uint64_t, uint64_t))(v32 + 8))(v6, v33);
    (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v5);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v31 + 48))(v30, 1, v34) != 1)
    {
      (*(void (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v0 + 112) + 32))(*(_QWORD *)(v0 + 128), *(_QWORD *)(v0 + 96), *(_QWORD *)(v0 + 104));
      v29 = (_QWORD *)swift_task_alloc(async function pointer to HMHomeManager.refresh(before:)[1]);
      *(_QWORD *)(v0 + 152) = v29;
      *v29 = v0;
      v29[1] = sub_100082D38;
      return HMHomeManager.refresh(before:)(*(_QWORD *)(v0 + 128));
    }
    v13 = *(_QWORD *)(v0 + 96);

    sub_100014EFC(v13, &qword_1000A58E8);
  }
  if (qword_1000A75D0 != -1)
    swift_once(&qword_1000A75D0, sub_100082148);
  v14 = type metadata accessor for Logger(0);
  v15 = sub_100014698(v14, (uint64_t)qword_1000A7690);
  v16 = Logger.logObject.getter(v15);
  v17 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v16, v17))
  {
    v18 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v18 = 0;
    _os_log_impl((void *)&_mh_execute_header, v16, v17, "Calendar.current failed to build Date and will treat call as timeout", v18, 2u);
    swift_slowDealloc(v18, -1, -1);
  }

  v19 = sub_100082EEC();
  v20 = swift_allocError(&type metadata for HomeWidget.HomeWidgetError, v19, 0, 0);
  *v21 = 2;
  swift_willThrow(v20);
  v22 = *(_QWORD *)(v0 + 120);
  v24 = *(_QWORD *)(v0 + 88);
  v23 = *(_QWORD *)(v0 + 96);
  v25 = *(_QWORD *)(v0 + 64);
  v27 = *(_QWORD *)(v0 + 32);
  v26 = *(_QWORD *)(v0 + 40);
  swift_task_dealloc(*(_QWORD *)(v0 + 128));
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  swift_task_dealloc(v24);
  swift_task_dealloc(v25);
  swift_task_dealloc(v26);
  swift_task_dealloc(v27);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100082D38()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 152);
  *(_QWORD *)(*v1 + 160) = v0;
  swift_task_dealloc(v3);
  if (v0)
    v4 = sub_100082E48;
  else
    v4 = sub_100082D9C;
  return swift_task_switch(v4, *(_QWORD *)(v2 + 24), 0);
}

uint64_t sub_100082D9C()
{
  uint64_t v0;
  void (*v1)(uint64_t, uint64_t);
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v1 = *(void (**)(uint64_t, uint64_t))(v0 + 144);
  v2 = *(_QWORD *)(v0 + 120);
  v3 = *(_QWORD *)(v0 + 128);
  v5 = *(_QWORD *)(v0 + 96);
  v4 = *(_QWORD *)(v0 + 104);
  v6 = *(_QWORD *)(v0 + 88);
  v7 = *(_QWORD *)(v0 + 64);
  v9 = *(_QWORD *)(v0 + 32);
  v8 = *(_QWORD *)(v0 + 40);

  v1(v3, v4);
  swift_task_dealloc(v3);
  swift_task_dealloc(v2);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100082E48()
{
  uint64_t v0;
  void (*v1)(uint64_t, uint64_t);
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v1 = *(void (**)(uint64_t, uint64_t))(v0 + 144);
  v2 = *(_QWORD *)(v0 + 128);
  v3 = *(_QWORD *)(v0 + 104);

  v1(v2, v3);
  v4 = *(_QWORD *)(v0 + 120);
  v6 = *(_QWORD *)(v0 + 88);
  v5 = *(_QWORD *)(v0 + 96);
  v7 = *(_QWORD *)(v0 + 64);
  v9 = *(_QWORD *)(v0 + 32);
  v8 = *(_QWORD *)(v0 + 40);
  swift_task_dealloc(*(_QWORD *)(v0 + 128));
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

unint64_t sub_100082EEC()
{
  unint64_t result;

  result = qword_1000A76D0;
  if (!qword_1000A76D0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for HomeWidget.HomeWidgetError, &type metadata for HomeWidget.HomeWidgetError);
    atomic_store(result, (unint64_t *)&qword_1000A76D0);
  }
  return result;
}

uint64_t sub_100082F30(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  *(_QWORD *)(v4 + 48) = a1;
  *(_QWORD *)(v4 + 56) = a4;
  return swift_task_switch(sub_100082F48, 0, 0);
}

uint64_t sub_100082F48()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t Strong;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v7;
  uint64_t v8;
  _BYTE *v9;

  static Task<>.checkCancellation()();
  v1 = *(_QWORD *)(v0 + 56) + 16;
  swift_beginAccess(v1, v0 + 16, 0, 0);
  Strong = swift_weakLoadStrong(v1);
  *(_QWORD *)(v0 + 64) = Strong;
  if (Strong)
  {
    v3 = type metadata accessor for MainActor(0);
    *(_QWORD *)(v0 + 72) = static MainActor.shared.getter();
    v4 = dispatch thunk of Actor.unownedExecutor.getter(v3, &protocol witness table for MainActor);
    return swift_task_switch(sub_10008303C, v4, v5);
  }
  else
  {
    v7 = sub_100082EEC();
    v8 = swift_allocError(&type metadata for HomeWidget.HomeWidgetError, v7, 0, 0);
    *v9 = 0;
    swift_willThrow(v8);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_10008303C()
{
  _QWORD *v0;
  void *v1;
  void *v2;
  id v3;

  swift_release(v0[9]);
  type metadata accessor for DataModel(0);
  static DataModel.context.setter(3);
  v1 = (void *)objc_opt_self(HFHomeKitDispatcher);
  v0[10] = v1;
  sub_100008CBC(0, &qword_1000A77B0, HMHomeManagerConfiguration_ptr);
  v2 = (void *)static HMHomeManagerConfiguration.widgetConfiguration.getter();
  objc_msgSend(v1, "setConfiguration:", v2);

  v3 = objc_msgSend(v1, "sharedDispatcher");
  v0[11] = objc_msgSend(v3, "homeManager");

  return swift_task_switch(sub_100083114, 0, 0);
}

uint64_t sub_100083114()
{
  uint64_t v0;
  double v1;
  _QWORD *v2;
  unint64_t v4;
  uint64_t v5;
  _BYTE *v6;

  if (*(_QWORD *)(v0 + 88))
  {
    *(_QWORD *)(v0 + 96) = objc_msgSend(*(id *)(v0 + 80), "sharedDispatcher");
    v1 = DISPATCHER_SERVICE_REFRESH_TIMEOUT.getter();
    v2 = (_QWORD *)swift_task_alloc(async function pointer to HFHomeKitDispatcher.waitForAllHomes(timeout:)[1]);
    *(_QWORD *)(v0 + 104) = v2;
    *v2 = v0;
    v2[1] = sub_1000831E4;
    return HFHomeKitDispatcher.waitForAllHomes(timeout:)(v1);
  }
  else
  {
    swift_release(*(_QWORD *)(v0 + 64));
    v4 = sub_100082EEC();
    v5 = swift_allocError(&type metadata for HomeWidget.HomeWidgetError, v4, 0, 0);
    *v6 = 0;
    swift_willThrow(v5);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_1000831E4(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)();

  v3 = *v2;
  v4 = *(_QWORD *)(*v2 + 104);
  *(_QWORD *)(v3 + 112) = a1;
  *(_QWORD *)(v3 + 120) = v1;
  swift_task_dealloc(v4);
  if (v1)
  {
    v5 = sub_100083400;
  }
  else
  {

    v5 = sub_100083258;
  }
  return swift_task_switch(v5, 0, 0);
}

uint64_t sub_100083258()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  _BOOL4 v6;
  unint64_t v7;
  uint8_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;

  if (qword_1000A75D0 != -1)
    swift_once(&qword_1000A75D0, sub_100082148);
  v1 = *(_QWORD *)(v0 + 112);
  v2 = type metadata accessor for Logger(0);
  sub_100014698(v2, (uint64_t)qword_1000A7690);
  swift_bridgeObjectRetain(v1);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.default.getter(v4);
  v6 = os_log_type_enabled(v4, v5);
  v7 = *(_QWORD *)(v0 + 112);
  if (v6)
  {
    v8 = (uint8_t *)swift_slowAlloc(12, -1);
    *(_DWORD *)v8 = 134217984;
    if (v7 >> 62)
    {
      v13 = *(_QWORD *)(v0 + 112);
      if (v13 < 0)
        v14 = *(_QWORD *)(v0 + 112);
      else
        v14 = v7 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(*(_QWORD *)(v0 + 112));
      v9 = _CocoaArrayWrapper.endIndex.getter(v14);
      swift_bridgeObjectRelease(v13);
    }
    else
    {
      v9 = *(_QWORD *)((v7 & 0xFFFFFFFFFFFFF8) + 0x10);
    }
    v10 = *(_QWORD *)(v0 + 112);
    v11 = *(_QWORD *)(v0 + 64);
    swift_bridgeObjectRelease(v10);
    *(_QWORD *)(v0 + 40) = v9;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 40, v0 + 48, v8 + 4, v8 + 12);
    swift_bridgeObjectRelease(v10);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Finished lazy loading of [HMHome]: count=%ld", v8, 0xCu);
    swift_slowDealloc(v8, -1, -1);
  }
  else
  {
    v11 = *(_QWORD *)(v0 + 64);
    swift_bridgeObjectRelease_n(*(_QWORD *)(v0 + 112), 2);
  }
  swift_release(v11);

  **(_QWORD **)(v0 + 48) = *(_QWORD *)(v0 + 88);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100083400()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;

  v1 = *(void **)(v0 + 88);
  v2 = *(_QWORD *)(v0 + 64);

  swift_release(v2);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100083444(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t ObjectType;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned __int8 v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD v19[4];

  v6 = type metadata accessor for TaskPriority(0);
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, 1, v6) == 1)
  {
    sub_100014EFC(a1, &qword_1000A5AE8);
    v8 = 7168;
    v9 = *(_QWORD *)(a3 + 16);
    if (v9)
    {
LABEL_3:
      v10 = *(_QWORD *)(a3 + 24);
      ObjectType = swift_getObjectType(v9);
      swift_unknownObjectRetain(v9);
      v12 = dispatch thunk of Actor.unownedExecutor.getter(ObjectType, v10);
      v14 = v13;
      swift_unknownObjectRelease(v9);
      goto LABEL_6;
    }
  }
  else
  {
    v15 = TaskPriority.rawValue.getter();
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(a1, v6);
    v8 = v15 | 0x1C00;
    v9 = *(_QWORD *)(a3 + 16);
    if (v9)
      goto LABEL_3;
  }
  v12 = 0;
  v14 = 0;
LABEL_6:
  v16 = sub_10000527C(&qword_1000A77A8);
  if (v14 | v12)
  {
    v19[0] = 0;
    v19[1] = 0;
    v17 = v19;
    v19[2] = v12;
    v19[3] = v14;
  }
  else
  {
    v17 = 0;
  }
  return swift_task_create(v8, v17, v16, a2, a3);
}

uint64_t HomeWidget.deinit()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 112));

  swift_defaultActor_destroy(v0);
  return v0;
}

uint64_t HomeWidget.__deallocating_deinit()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 112));

  swift_defaultActor_destroy(v0);
  return swift_defaultActor_deallocate(v0);
}

uint64_t HomeWidget.recommendedHome(userSettings:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3[9] = a2;
  v3[10] = v2;
  v3[8] = a1;
  v4 = type metadata accessor for Logger(0);
  v3[11] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v3[12] = v5;
  v3[13] = swift_task_alloc((*(_QWORD *)(v5 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_10000527C(&qword_1000A5060);
  v3[14] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v6 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1000A75E0 != -1)
    swift_once(&qword_1000A75E0, sub_1000845E8);
  v3[15] = static HomeSettingsActor.shared;
  return swift_task_switch(sub_100083690, v2, 0);
}

uint64_t sub_100083690()
{
  _QWORD *v0;
  void *v1;
  uint64_t v2;
  id v3;
  _QWORD *v4;
  _QWORD *v6;

  v1 = *(void **)(v0[10] + 120);
  if (v1)
  {
    v0[18] = v1;
    v2 = dword_1000A76BC;
    v3 = v1;
    v4 = (_QWORD *)swift_task_alloc(v2);
    v0[19] = v4;
    *v4 = v0;
    v4[1] = sub_100083830;
    return HomeWidget.refreshLatestHomeKitState(timeout:)(20);
  }
  else
  {
    v6 = (_QWORD *)swift_task_alloc(dword_1000A76B4);
    v0[16] = v6;
    *v6 = v0;
    v6[1] = sub_100083728;
    return sub_1000824B4();
  }
}

uint64_t sub_100083728(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();

  v3 = *v2;
  v4 = *(_QWORD *)(*v2 + 128);
  *(_QWORD *)(*v2 + 136) = a1;
  swift_task_dealloc(v4);
  if (v1)
  {
    swift_errorRelease(v1);
    v5 = *(_QWORD *)(v3 + 120);
    v6 = sub_100083FE0;
  }
  else
  {
    v5 = *(_QWORD *)(v3 + 80);
    v6 = sub_1000837A0;
  }
  return swift_task_switch(v6, v5, 0);
}

uint64_t sub_1000837A0()
{
  _QWORD *v0;
  void *v1;
  uint64_t v2;
  void *v3;
  id v4;
  _QWORD *v5;

  v1 = (void *)v0[17];
  if (!v1)
    return swift_task_switch(sub_100083FE0, v0[15], 0);
  v2 = v0[10];
  v3 = *(void **)(v2 + 120);
  *(_QWORD *)(v2 + 120) = v1;
  v4 = v1;

  v0[18] = v4;
  v5 = (_QWORD *)swift_task_alloc(dword_1000A76BC);
  v0[19] = v5;
  *v5 = v0;
  v5[1] = sub_100083830;
  return HomeWidget.refreshLatestHomeKitState(timeout:)(20);
}

uint64_t sub_100083830()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 152);
  *(_QWORD *)(*v1 + 160) = v0;
  swift_task_dealloc(v3);
  if (v0)
    v4 = sub_100084190;
  else
    v4 = sub_100083894;
  return swift_task_switch(v4, *(_QWORD *)(v2 + 120), 0);
}

void sub_100083894()
{
  uint64_t v0;
  id v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  id v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint8_t *v10;
  uint64_t v11;
  void *v12;
  unint64_t v13;
  uint64_t v14;
  _BYTE *v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  id v19;
  void *v20;
  id v21;
  void *v22;
  id v23;
  uint64_t v24;
  id v25;
  id v26;
  uint64_t v27;
  id v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  id v34;
  NSObject *v35;
  os_log_type_t v36;
  _BOOL4 v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  BOOL v44;
  uint64_t v45;
  unint64_t v46;
  id v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  _QWORD *v56;
  uint64_t v57;
  void *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t (*v61)(uint64_t, uint64_t);
  void *v62;
  uint64_t *v63;
  uint64_t ObjectType;
  uint64_t v65[2];

  v1 = objc_msgSend(*(id *)(v0 + 144), "homes");
  v2 = sub_100008CBC(0, (unint64_t *)&qword_1000A5510, HMHome_ptr);
  v3 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v1, v2);

  if ((unint64_t)v3 >> 62)
  {
    if (v3 < 0)
      v51 = v3;
    else
      v51 = v3 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v3);
    v4 = _CocoaArrayWrapper.endIndex.getter(v51);
    swift_bridgeObjectRelease(v3);
  }
  else
  {
    v4 = *(_QWORD *)((v3 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  swift_bridgeObjectRelease(v3);
  if (v4 >= 1)
  {
    v5 = *(_QWORD *)(v0 + 72);
    ObjectType = swift_getObjectType(*(_QWORD *)(v0 + 64));
    v61 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 8);
    if ((v61(ObjectType, v5) & 1) != 0)
      v6 = objc_msgSend(*(id *)(v0 + 144), "currentHome");
    else
      v6 = 0;
    v17 = *(void **)(v0 + 144);
    v18 = *(_QWORD *)(v0 + 112);
    (*(void (**)(uint64_t))(*(_QWORD *)(v0 + 72) + 16))(ObjectType);
    v19 = v17;
    v20 = (void *)sub_1000841D4(v18, v19);

    sub_100014EFC(v18, &qword_1000A5060);
    if ((unint64_t)v20 <= 1)
    {
      v21 = objc_msgSend(*(id *)(v0 + 144), "currentHome");
      sub_100084370(v20);
      v20 = v21;
    }
    if (v6)
    {
      v22 = v6;
LABEL_25:
      v63 = (uint64_t *)(v0 + 64);
      v27 = qword_1000A75D0;
      v28 = v6;
      if (v27 != -1)
        swift_once(&qword_1000A75D0, sub_100082148);
      v30 = *(_QWORD *)(v0 + 96);
      v29 = *(_QWORD *)(v0 + 104);
      v31 = *(_QWORD *)(v0 + 88);
      v32 = *(_QWORD *)(v0 + 64);
      v33 = sub_100014698(v31, (uint64_t)qword_1000A7690);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v30 + 16))(v29, v33, v31);
      swift_unknownObjectRetain_n(v32, 2);
      v34 = v22;
      v35 = Logger.logObject.getter(v34);
      v36 = static os_log_type_t.default.getter();
      v37 = os_log_type_enabled(v35, v36);
      v62 = *(void **)(v0 + 144);
      v39 = *(_QWORD *)(v0 + 96);
      v38 = *(_QWORD *)(v0 + 104);
      v40 = *(_QWORD *)(v0 + 88);
      if (v37)
      {
        v59 = *(_QWORD *)(v0 + 104);
        v60 = *(_QWORD *)(v0 + 88);
        v41 = *(_QWORD *)(v0 + 64);
        v54 = *(_QWORD *)(v0 + 72);
        v55 = v0 + 56;
        v58 = v28;
        v42 = swift_slowAlloc(32, -1);
        v56 = (_QWORD *)swift_slowAlloc(8, -1);
        v57 = swift_slowAlloc(64, -1);
        v65[0] = v57;
        *(_DWORD *)v42 = 136315650;
        *(_QWORD *)(v0 + 40) = sub_100023980(0xD00000000000001ELL, 0x800000010008C140, v65);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 40, v0 + 48, v42 + 4, v42 + 12);
        *(_WORD *)(v42 + 12) = 2080;
        v43 = v61(ObjectType, v54);
        v44 = (v43 & 1) == 0;
        if ((v43 & 1) != 0)
          v45 = 0x64656C62616E65;
        else
          v45 = 0x64656C6261736964;
        if (v44)
          v46 = 0xE800000000000000;
        else
          v46 = 0xE700000000000000;
        *(_QWORD *)(v0 + 48) = sub_100023980(v45, v46, v65);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 48, v55, v42 + 14, v42 + 22);
        swift_bridgeObjectRelease(v46);
        swift_unknownObjectRelease_n(v41, 2);
        *(_WORD *)(v42 + 22) = 2112;
        *(_QWORD *)(v0 + 56) = v34;
        v47 = v34;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v55, v63, v42 + 24, v42 + 32);
        *v56 = v34;

        _os_log_impl((void *)&_mh_execute_header, v35, v36, "%s HomeSensing:%s, Home:%@", (uint8_t *)v42, 0x20u);
        v48 = sub_10000527C(&qword_1000A5208);
        swift_arrayDestroy(v56, 1, v48);
        swift_slowDealloc(v56, -1, -1);
        swift_arrayDestroy(v57, 2, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v57, -1, -1);
        swift_slowDealloc(v42, -1, -1);

        (*(void (**)(uint64_t, uint64_t))(v39 + 8))(v59, v60);
      }
      else
      {
        v49 = *v63;

        swift_unknownObjectRelease_n(v49, 2);
        (*(void (**)(uint64_t, uint64_t))(v39 + 8))(v38, v40);
      }
      v50 = *(_QWORD *)(v0 + 104);
      swift_task_dealloc(*(_QWORD *)(v0 + 112));
      swift_task_dealloc(v50);
      (*(void (**)(id))(v0 + 8))(v34);
      return;
    }
    if (v20)
    {
      v22 = v20;
LABEL_24:
      v26 = v20;
      v6 = 0;
      goto LABEL_25;
    }
    v23 = objc_msgSend(*(id *)(v0 + 144), "homes");
    v24 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v23, v2);

    if ((unint64_t)v24 >> 62)
    {
      if (v24 < 0)
        v52 = v24;
      else
        v52 = v24 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v24);
      v53 = _CocoaArrayWrapper.endIndex.getter(v52);
      swift_bridgeObjectRelease(v24);
      if (v53)
      {
LABEL_20:
        if ((v24 & 0xC000000000000001) == 0)
        {
          if (!*(_QWORD *)((v24 & 0xFFFFFFFFFFFFF8) + 0x10))
          {
            __break(1u);
            return;
          }
          v25 = *(id *)(v24 + 32);
          goto LABEL_23;
        }
LABEL_46:
        v25 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v24);
LABEL_23:
        v22 = v25;
        swift_bridgeObjectRelease(v24);
        goto LABEL_24;
      }
    }
    else if (*(_QWORD *)((v24 & 0xFFFFFFFFFFFFF8) + 0x10))
    {
      goto LABEL_20;
    }
    swift_bridgeObjectRelease(v24);
    __break(1u);
    goto LABEL_46;
  }
  if (qword_1000A75D0 != -1)
    swift_once(&qword_1000A75D0, sub_100082148);
  v7 = sub_100014698(*(_QWORD *)(v0 + 88), (uint64_t)qword_1000A7690);
  v8 = Logger.logObject.getter(v7);
  v9 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v8, v9))
  {
    v10 = (uint8_t *)swift_slowAlloc(12, -1);
    v11 = swift_slowAlloc(32, -1);
    v65[0] = v11;
    *(_DWORD *)v10 = 136315138;
    *(_QWORD *)(v0 + 24) = sub_100023980(0xD00000000000001ELL, 0x800000010008C140, v65);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 24, v0 + 32, v10 + 4, v10 + 12);
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "%s HMHomeManager returned 0 homes", v10, 0xCu);
    swift_arrayDestroy(v11, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v11, -1, -1);
    swift_slowDealloc(v10, -1, -1);
  }

  v12 = *(void **)(v0 + 144);
  v13 = sub_100082EEC();
  v14 = swift_allocError(&type metadata for HomeWidget.HomeWidgetError, v13, 0, 0);
  *v15 = 1;
  swift_willThrow(v14);

  v16 = *(_QWORD *)(v0 + 104);
  swift_task_dealloc(*(_QWORD *)(v0 + 112));
  swift_task_dealloc(v16);
  (*(void (**)(void))(v0 + 8))();
}

uint64_t sub_100083FE0()
{
  uint64_t v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint8_t *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v11;

  if (qword_1000A75D0 != -1)
    swift_once(&qword_1000A75D0, sub_100082148);
  v1 = sub_100014698(*(_QWORD *)(v0 + 88), (uint64_t)qword_1000A7690);
  v2 = Logger.logObject.getter(v1);
  v3 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v2, v3))
  {
    v4 = (uint8_t *)swift_slowAlloc(12, -1);
    v5 = swift_slowAlloc(32, -1);
    v11 = v5;
    *(_DWORD *)v4 = 136315138;
    *(_QWORD *)(v0 + 16) = sub_100023980(0xD00000000000001ELL, 0x800000010008C140, &v11);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 16, v0 + 24, v4 + 4, v4 + 12);
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "%s Unable to build valid HMHomeManager", v4, 0xCu);
    swift_arrayDestroy(v5, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v5, -1, -1);
    swift_slowDealloc(v4, -1, -1);
  }

  v6 = sub_100082EEC();
  v7 = swift_allocError(&type metadata for HomeWidget.HomeWidgetError, v6, 0, 0);
  *v8 = 0;
  swift_willThrow(v7);
  v9 = *(_QWORD *)(v0 + 104);
  swift_task_dealloc(*(_QWORD *)(v0 + 112));
  swift_task_dealloc(v9);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100084190()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 104);
  swift_task_dealloc(*(_QWORD *)(v0 + 112));
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000841D4(uint64_t a1, void *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD v17[2];

  v4 = type metadata accessor for UUID(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_10000527C(&qword_1000A5060);
  __chkstk_darwin(v8);
  v10 = (char *)v17 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100014DE8(a1, (uint64_t)v10);
  v11 = 1;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48))(v10, 1, v4) != 1)
  {
    (*(void (**)(char *, char *, uint64_t))(v5 + 32))(v7, v10, v4);
    v12 = objc_msgSend(a2, "homes");
    v13 = sub_100008CBC(0, (unint64_t *)&qword_1000A5510, HMHome_ptr);
    v14 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v12, v13);

    __chkstk_darwin(v15);
    v17[-2] = v7;
    v11 = (uint64_t)sub_10001D7A8(sub_100052E98, (uint64_t)&v17[-4], v14);
    swift_bridgeObjectRelease(v14);
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  }
  return v11;
}

void sub_100084370(id a1)
{
  if (a1 != (id)1)

}

unint64_t sub_100084384()
{
  unint64_t result;

  result = qword_1000A76E0;
  if (!qword_1000A76E0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for HomeWidget.HomeWidgetError, &type metadata for HomeWidget.HomeWidgetError);
    atomic_store(result, (unint64_t *)&qword_1000A76E0);
  }
  return result;
}

uint64_t type metadata accessor for HomeWidget()
{
  return objc_opt_self(_TtC14HomeWidgetCore10HomeWidget);
}

uint64_t storeEnumTagSinglePayload for HomeWidget.HomeWidgetError(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_100084434 + 4 * byte_100089D7D[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_100084468 + 4 * byte_100089D78[v4]))();
}

uint64_t sub_100084468(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100084470(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100084478);
  return result;
}

uint64_t sub_100084484(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10008448CLL);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_100084490(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100084498(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for HomeWidget.HomeWidgetError()
{
  return &type metadata for HomeWidget.HomeWidgetError;
}

uint64_t sub_1000844B4()
{
  uint64_t v0;

  swift_weakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1000844D8()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 40, 7);
}

uint64_t sub_100084504(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  _QWORD *v5;

  v4 = *(_QWORD *)(v1 + 32);
  v5 = (_QWORD *)swift_task_alloc(dword_1000A779C);
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_10001CEBC;
  v5[6] = a1;
  v5[7] = v4;
  return swift_task_switch(sub_100082F48, 0, 0);
}

uint64_t *UserHomeSettings.shared.unsafeMutableAddressor()
{
  if (qword_1000A75E8 != -1)
    swift_once(&qword_1000A75E8, sub_1000846D8);
  return &static UserHomeSettings.shared;
}

uint64_t *HomeSettingsActor.shared.unsafeMutableAddressor()
{
  if (qword_1000A75E0 != -1)
    swift_once(&qword_1000A75E0, sub_1000845E8);
  return &static HomeSettingsActor.shared;
}

uint64_t sub_1000845E8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;

  v0 = type metadata accessor for HomeSettingsActor();
  v1 = swift_allocObject(v0, 112, 15);
  result = swift_defaultActor_initialize();
  static HomeSettingsActor.shared = v1;
  return result;
}

uint64_t static HomeSettingsActor.shared.getter()
{
  return sub_10008472C(&qword_1000A75E0, &static HomeSettingsActor.shared);
}

uint64_t HomeSettingsActor.deinit()
{
  uint64_t v0;

  swift_defaultActor_destroy(v0);
  return v0;
}

uint64_t HomeSettingsActor.__deallocating_deinit()
{
  uint64_t v0;

  swift_defaultActor_destroy(v0);
  return swift_defaultActor_deallocate(v0);
}

uint64_t sub_100084674()
{
  if (qword_1000A75E0 != -1)
    swift_once(&qword_1000A75E0, sub_1000845E8);
  return swift_retain(static HomeSettingsActor.shared);
}

uint64_t sub_1000846B4(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = type metadata accessor for HomeSettingsActor();
  return static GlobalActor.sharedUnownedExecutor.getter(v3, a2);
}

uint64_t sub_1000846D8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;

  v0 = type metadata accessor for UserHomeSettings();
  v1 = swift_allocObject(v0, 32, 7);
  result = sub_1000849E0();
  static UserHomeSettings.shared = v1;
  return result;
}

uint64_t static UserHomeSettings.shared.getter()
{
  return sub_10008472C(&qword_1000A75E8, &static UserHomeSettings.shared);
}

uint64_t sub_10008472C(_QWORD *a1, _QWORD *a2)
{
  if (*a1 != -1)
    swift_once();
  return swift_retain(*a2);
}

uint64_t UserHomeSettings.isHomeSensingEnabled.getter()
{
  uint64_t v0;
  void *v1;
  NSString v2;
  id v3;
  unint64_t v4;
  id v5;
  id v6;
  id v8;
  _OWORD v9[2];
  _BYTE v10[24];
  uint64_t v11;

  v1 = *(void **)(v0 + 16);
  v2 = String._bridgeToObjectiveC()();
  v3 = objc_msgSend(v1, "objectForKey:", v2);

  if (v3)
  {
    _bridgeAnyObjectToAny(_:)(v9, v3);
    swift_unknownObjectRelease(v3);
  }
  else
  {
    memset(v9, 0, sizeof(v9));
  }
  sub_100009B94((uint64_t)v9, (uint64_t)v10);
  if (!v11)
  {
    sub_100008F68((uint64_t)v10);
    return 1;
  }
  v4 = sub_10002A86C();
  if ((swift_dynamicCast(&v8, v10, (char *)&type metadata for Any + 8, v4, 6) & 1) == 0)
    return 1;
  v5 = v8;
  v6 = objc_msgSend(v8, "BOOLValue");

  return (uint64_t)v6;
}

uint64_t UserHomeSettings.selectedHome.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  void *v3;
  NSString v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;

  v3 = *(void **)(v1 + 24);
  v4 = String._bridgeToObjectiveC()();
  v5 = objc_msgSend(v3, "stringForKey:", v4);

  if (v5)
  {
    v6 = static String._unconditionallyBridgeFromObjectiveC(_:)(v5);
    v8 = v7;

    UUID.init(uuidString:)(v6, v8);
    return swift_bridgeObjectRelease(v8);
  }
  else
  {
    v10 = type metadata accessor for UUID(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56))(a1, 1, 1, v10);
  }
}

uint64_t UserHomeSettings.deinit()
{
  uint64_t v0;

  return v0;
}

uint64_t UserHomeSettings.__deallocating_deinit()
{
  uint64_t v0;

  return swift_deallocClassInstance(v0, 32, 7);
}

unint64_t sub_10008497C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000A77B8;
  if (!qword_1000A77B8)
  {
    v1 = type metadata accessor for HomeSettingsActor();
    result = swift_getWitnessTable(&protocol conformance descriptor for HomeSettingsActor, v1);
    atomic_store(result, (unint64_t *)&qword_1000A77B8);
  }
  return result;
}

uint64_t type metadata accessor for HomeSettingsActor()
{
  return objc_opt_self(_TtC14HomeWidgetCore17HomeSettingsActor);
}

uint64_t sub_1000849E0()
{
  uint64_t v0;
  id v1;
  NSString v2;
  id v3;
  id v4;
  NSString v5;
  id v6;

  v1 = objc_allocWithZone((Class)NSUserDefaults);
  v2 = String._bridgeToObjectiveC()();
  v3 = objc_msgSend(v1, "initWithSuiteName:", v2);

  if (!v3)
    v3 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "standardUserDefaults");
  *(_QWORD *)(v0 + 16) = v3;
  v4 = objc_allocWithZone((Class)NSUserDefaults);
  v5 = String._bridgeToObjectiveC()();
  v6 = objc_msgSend(v4, "initWithSuiteName:", v5);

  if (!v6)
    v6 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "standardUserDefaults");
  *(_QWORD *)(v0 + 24) = v6;
  return v0;
}

uint64_t type metadata accessor for UserHomeSettings()
{
  return objc_opt_self(_TtC14HomeWidgetCore16UserHomeSettings);
}

uint64_t sub_100084B18()
{
  return sub_100084CB0(1);
}

uint64_t sub_100084B20(int a1, int a2, int a3, int a4)
{
  BOOL v9;
  _DWORD v10[2];

  if (qword_1000ABDE8 == -1)
  {
    if (qword_1000ABDF0)
    {
LABEL_3:
      v10[0] = a1;
      v10[1] = (a2 << 16) | (a3 << 8) | a4;
      return _availability_version_check(1, v10);
    }
  }
  else
  {
    dispatch_once_f(&qword_1000ABDE8, 0, (dispatch_function_t)sub_100084CA8);
    if (qword_1000ABDF0)
      goto LABEL_3;
  }
  if (qword_1000ABDE0 == -1)
  {
    v9 = dword_1000ABDD0 < a2;
    if (dword_1000ABDD0 > a2)
      return 1;
  }
  else
  {
    dispatch_once_f(&qword_1000ABDE0, 0, (dispatch_function_t)sub_100084B18);
    v9 = dword_1000ABDD0 < a2;
    if (dword_1000ABDD0 > a2)
      return 1;
  }
  if (v9)
    return 0;
  if (dword_1000ABDD4 > a3)
    return 1;
  return dword_1000ABDD4 >= a3 && dword_1000ABDD8 >= a4;
}

uint64_t sub_100084CA8()
{
  return sub_100084CB0(0);
}

uint64_t sub_100084CB0(uint64_t result)
{
  void *v1;
  BOOL v2;
  unsigned __int8 *v4;
  uint64_t (*v5)(_QWORD);
  unint64_t v6;
  uint64_t (*v7)(_QWORD, uint64_t, _QWORD, _QWORD);
  uint64_t (*v8)(_QWORD, const char *, uint64_t, unsigned __int8 *);
  uint64_t (*v9)(uint64_t, uint64_t);
  uint64_t (*v10)(uint64_t);
  uint64_t (*v11)(void);
  FILE *v12;
  FILE *v13;
  uint64_t v14;
  size_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  FILE *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  FILE *v27;
  unsigned int (*v28)(uint64_t, char *, uint64_t, uint64_t);
  char v29[32];

  v1 = (void *)qword_1000ABDF0;
  if (qword_1000ABDF0)
    v2 = (_DWORD)result == 0;
  else
    v2 = 0;
  if (!v2)
  {
    if (&__availability_version_check)
    {
      qword_1000ABDF0 = (uint64_t)&__availability_version_check;
      v1 = &__availability_version_check;
    }
    if (!v1 || (_DWORD)result != 0)
    {
      result = (uint64_t)dlsym((void *)0xFFFFFFFFFFFFFFFELL, "kCFAllocatorNull");
      if (result)
      {
        v4 = *(unsigned __int8 **)result;
        result = (uint64_t)dlsym((void *)0xFFFFFFFFFFFFFFFELL, "CFDataCreateWithBytesNoCopy");
        if (result)
        {
          v5 = (uint64_t (*)(_QWORD))result;
          v6 = (unint64_t)dlsym((void *)0xFFFFFFFFFFFFFFFELL, "CFPropertyListCreateWithData");
          result = (uint64_t)dlsym((void *)0xFFFFFFFFFFFFFFFELL, "CFPropertyListCreateFromXMLData");
          if (v6 | result)
          {
            v7 = (uint64_t (*)(_QWORD, uint64_t, _QWORD, _QWORD))result;
            result = (uint64_t)dlsym((void *)0xFFFFFFFFFFFFFFFELL, "CFStringCreateWithCStringNoCopy");
            if (result)
            {
              v8 = (uint64_t (*)(_QWORD, const char *, uint64_t, unsigned __int8 *))result;
              result = (uint64_t)dlsym((void *)0xFFFFFFFFFFFFFFFELL, "CFDictionaryGetValue");
              if (result)
              {
                v9 = (uint64_t (*)(uint64_t, uint64_t))result;
                result = (uint64_t)dlsym((void *)0xFFFFFFFFFFFFFFFELL, "CFGetTypeID");
                if (result)
                {
                  v10 = (uint64_t (*)(uint64_t))result;
                  result = (uint64_t)dlsym((void *)0xFFFFFFFFFFFFFFFELL, "CFStringGetTypeID");
                  if (result)
                  {
                    v11 = (uint64_t (*)(void))result;
                    result = (uint64_t)dlsym((void *)0xFFFFFFFFFFFFFFFELL, "CFStringGetCString");
                    v28 = (unsigned int (*)(uint64_t, char *, uint64_t, uint64_t))result;
                    if (result)
                    {
                      result = (uint64_t)dlsym((void *)0xFFFFFFFFFFFFFFFELL, "CFRelease");
                      if (result)
                      {
                        v12 = (FILE *)result;
                        result = (uint64_t)fopen("/System/Library/CoreServices/SystemVersion.plist", "r");
                        if (result)
                        {
                          v13 = (FILE *)result;
                          v27 = v12;
                          fseek((FILE *)result, 0, 2);
                          v14 = ftell(v13);
                          if (v14 < 0)
                          {
                            v16 = 0;
                          }
                          else
                          {
                            v15 = v14;
                            rewind(v13);
                            v16 = malloc(v15);
                            if (v16)
                            {
                              v26 = v16;
                              if (fread(v16, 1uLL, v15, v13) == v15)
                              {
                                v17 = v5(0);
                                if (v17)
                                {
                                  v18 = v17;
                                  v19 = v13;
                                  if (v6)
                                    v20 = ((uint64_t (*)(_QWORD, uint64_t, _QWORD, _QWORD, _QWORD))v6)(0, v17, 0, 0, 0);
                                  else
                                    v20 = v7(0, v17, 0, 0);
                                  v21 = v20;
                                  if (v20)
                                  {
                                    v22 = v8(0, "ProductVersion", 1536, v4);
                                    if (v22)
                                    {
                                      v23 = v22;
                                      v24 = v9(v21, v22);
                                      ((void (*)(uint64_t))v27)(v23);
                                      if (v24)
                                      {
                                        v25 = v10(v24);
                                        if (v25 == v11())
                                        {
                                          if (v28(v24, v29, 32, 134217984))
                                            sscanf(v29, "%d.%d.%d", &dword_1000ABDD0, &dword_1000ABDD4, &dword_1000ABDD8);
                                        }
                                      }
                                    }
                                    ((void (*)(uint64_t))v27)(v21);
                                    v19 = v13;
                                  }
                                  ((void (*)(uint64_t))v27)(v18);
                                }
                                else
                                {
                                  v19 = v13;
                                }
                                v16 = v26;
                              }
                              else
                              {
                                v16 = v26;
                                v19 = v13;
                              }
                              goto LABEL_41;
                            }
                          }
                          v19 = v13;
LABEL_41:
                          free(v16);
                          return fclose(v19);
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  return result;
}
