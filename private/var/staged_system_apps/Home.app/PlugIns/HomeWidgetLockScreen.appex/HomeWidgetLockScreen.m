id variable initialization expression of DataModel.homeManager()
{
  uint64_t v0;
  id v1;
  id v2;

  v0 = sub_1000038AC(0, &qword_100081F20, HMMutableHomeManagerConfiguration_ptr);
  v1 = objc_msgSend((id)swift_getObjCClassFromMetadata(v0), "defaultPrivateConfiguration");
  objc_msgSend(v1, "setDiscretionary:", 0);
  objc_msgSend(v1, "setAdaptive:", 1);
  v2 = objc_msgSend(objc_allocWithZone((Class)HMHomeManager), "initWithConfiguration:", v1);

  return v2;
}

uint64_t variable initialization expression of DataModel.currentHome()
{
  return 0;
}

uint64_t variable initialization expression of DataModel.defaultsHomeSensingChangedNotifyToken()
{
  return 0;
}

uint64_t sub_100002A94(__int128 *a1)
{
  __int128 v2;
  __int128 v3;

  v2 = *a1;
  if (!sub_10005EB08(2, 17, 0, 0))
    return v2;
  v3 = v2;
  return swift_getOpaqueTypeMetadata2(0, &v3, &opaque type descriptor for <<opaque return type of WidgetConfiguration._containerBackgroundRemovable(_:)>>, 0);
}

uint64_t sub_100002AF8(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD v4[2];

  v2 = *a1;
  v1 = a1[1];
  if (sub_10005EB08(2, 17, 0, 0))
  {
    v4[0] = v2;
    v4[1] = v1;
    return swift_getOpaqueTypeConformance2(v4, &opaque type descriptor for <<opaque return type of WidgetConfiguration._containerBackgroundRemovable(_:)>>, 1);
  }
  return v1;
}

void sub_100002B54(_QWORD *a1@<X8>)
{
  _QWORD *v1;

  *a1 = *v1;
}

BOOL sub_100002B60(_QWORD *a1, _QWORD *a2)
{
  return *a1 == *a2;
}

_QWORD *sub_100002B74@<X0>(_QWORD *result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *result;
  *(_BYTE *)(a2 + 8) = 0;
  return result;
}

char *sub_100002B84(char *a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  char *v10;
  uint64_t v11;
  uint64_t i;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v19;
  char *v20;

  v20 = a1;
  v6 = v5;
  v10 = a1;
  if ((unint64_t)a2 >> 62)
    goto LABEL_13;
  v11 = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain(a2);
  for (; v11; v11 = _CocoaArrayWrapper.endIndex.getter(v16))
  {
    for (i = 4; ; ++i)
    {
      v13 = (a2 & 0xC000000000000001) != 0
          ? (char *)specialized _ArrayBuffer._getElementSlowPath(_:)(i - 4, a2)
          : (char *)*(id *)(a2 + 8 * i);
      v10 = v13;
      v14 = i - 3;
      if (__OFADD__(i - 4, 1))
        break;
      v19 = v13;
      sub_100017354(&v20, (void **)&v19, a3, a4, a5);
      if (v6)
      {
        v15 = v20;
        swift_bridgeObjectRelease(a2);

        swift_bridgeObjectRelease(v15);
        return v10;
      }

      if (v14 == v11)
      {
        swift_bridgeObjectRelease(a2);
        return v20;
      }
    }
    __break(1u);
LABEL_13:
    if (a2 < 0)
      v16 = a2;
    else
      v16 = a2 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a2);
  }
  swift_bridgeObjectRelease(a2);
  return v10;
}

uint64_t sub_100002CC8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;

  v4[33] = a3;
  v4[34] = a4;
  v4[31] = a1;
  v4[32] = a2;
  return swift_task_switch(sub_100002CE4, 0, 0);
}

uint64_t sub_100002CE4()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  id v5;
  id v6;
  NSObject *v7;
  os_log_type_t v8;
  _BOOL4 v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t inited;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  uint64_t v23;
  _QWORD *v24;
  os_log_type_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  if (qword_100081680 != -1)
    swift_once(&qword_100081680, sub_100022448);
  v1 = v0 + 2;
  v2 = v0[34];
  v3 = (void *)v0[32];
  v4 = type metadata accessor for Logger(0);
  v0[35] = sub_100003884(v4, (uint64_t)static DataModel.widgetLogger);
  v5 = v3;
  swift_bridgeObjectRetain_n(v2, 2);
  v6 = v5;
  v7 = Logger.logObject.getter(v6);
  v8 = static os_log_type_t.default.getter();
  v9 = os_log_type_enabled(v7, v8);
  v10 = v0[34];
  if (v9)
  {
    v26 = v8;
    v11 = v0[33];
    v27 = v0[32];
    v12 = swift_slowAlloc(32, -1);
    v28 = swift_slowAlloc(96, -1);
    v29 = v28;
    *(_DWORD *)v12 = 136315650;
    swift_bridgeObjectRetain(v10);
    v0[28] = sub_10001DF04(v11, v10, &v29);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 28, v0 + 29, v12 + 4, v12 + 12);
    swift_bridgeObjectRelease_n(v10, 3);
    *(_WORD *)(v12 + 12) = 2080;
    v0[29] = sub_10001DF04(0xD00000000000001DLL, 0x8000000100067B60, &v29);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 29, v0 + 30, v12 + 14, v12 + 22);
    *(_WORD *)(v12 + 22) = 2080;
    if (v27)
    {
      v13 = objc_msgSend(v6, "name");
      v14 = static String._unconditionallyBridgeFromObjectiveC(_:)(v13);
      v16 = v15;

    }
    else
    {
      v16 = 0xE400000000000000;
      v14 = 1819047278;
    }
    v0[30] = sub_10001DF04(v14, v16, &v29);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 30, v0 + 31, v12 + 24, v12 + 32);
    swift_bridgeObjectRelease(v16);

    swift_arrayDestroy(v28, 3, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v28, -1, -1);
    swift_slowDealloc(v12, -1, -1);

    v1 = v0 + 2;
  }
  else
  {
    swift_bridgeObjectRelease_n(v0[34], 2);

  }
  if (qword_100081670 != -1)
    swift_once(&qword_100081670, sub_100021008);
  v17 = sub_100003704(&qword_1000817C0);
  inited = swift_initStackObject(v17, v1);
  v0[36] = inited;
  *(_OWORD *)(inited + 16) = xmmword_1000607D0;
  if (qword_100081660 != -1)
    swift_once(&qword_100081660, sub_100018424);
  v19 = *((_QWORD *)&xmmword_10008A5D0 + 1);
  v20 = qword_10008A5E0;
  v21 = unk_10008A5E8;
  v22 = xmmword_10008A5F0;
  v23 = qword_10008A600;
  *(_QWORD *)(inited + 32) = xmmword_10008A5D0;
  *(_QWORD *)(inited + 40) = v19;
  *(_QWORD *)(inited + 48) = v20;
  *(_QWORD *)(inited + 56) = v21;
  *(_OWORD *)(inited + 64) = v22;
  *(_QWORD *)(inited + 80) = v23;
  swift_bridgeObjectRetain(v19);
  swift_bridgeObjectRetain(v20);
  swift_bridgeObjectRetain(v21);
  swift_bridgeObjectRetain(v22);
  sub_10000389C(*((uint64_t *)&v22 + 1), v23);
  v24 = (_QWORD *)swift_task_alloc(dword_100081E74);
  v0[37] = v24;
  *v24 = v0;
  v24[1] = sub_10000309C;
  return DataModel.reloadCharacteristics(matching:for:fetchId:)(inited, v0[32], v0[33], v0[34]);
}

uint64_t sub_10000309C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v3 = *(_QWORD *)(*(_QWORD *)v1 + 288);
  v2 = *(_QWORD *)(*(_QWORD *)v1 + 296);
  *(_QWORD *)(*(_QWORD *)v1 + 304) = a1;
  swift_task_dealloc(v2);
  swift_setDeallocating(v3);
  swift_arrayDestroy(v3 + 32, *(_QWORD *)(v3 + 16), &type metadata for CharacteristicFetchSpecification);
  return swift_task_switch(sub_100003118, 0, 0);
}

uint64_t sub_100003118()
{
  uint64_t v0;
  void *v1;
  __int128 v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  double *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  char v16;
  int v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  NSObject *v23;
  os_log_type_t v24;
  _BOOL4 v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  NSObject *v31;
  os_log_type_t v32;
  _BOOL4 v33;
  unint64_t v34;
  uint64_t v35;
  uint8_t *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  BOOL v40;
  uint64_t v41;
  double v42;
  double v43;
  uint64_t v44;
  uint64_t v46;
  uint64_t v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51[2];

  v49 = v0 + 216;
  v1 = *(void **)(v0 + 256);
  v2 = *(_OWORD *)&qword_10008A5E0;
  *(_OWORD *)(v0 + 104) = xmmword_10008A5D0;
  *(_OWORD *)(v0 + 120) = v2;
  *(_OWORD *)(v0 + 136) = xmmword_10008A5F0;
  *(_QWORD *)(v0 + 152) = qword_10008A600;
  if (v1)
  {
    v3 = objc_msgSend(v1, "accessories");
    v4 = sub_1000038AC(0, (unint64_t *)&qword_100081F40, HMAccessory_ptr);
    v5 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v3, v4);

    *(_OWORD *)(v0 + 160) = *(_OWORD *)(v0 + 104);
    *(_OWORD *)(v0 + 176) = *(_OWORD *)(v0 + 120);
    v6 = *(_QWORD *)(v0 + 144);
    *(_QWORD *)(v0 + 192) = *(_QWORD *)(v0 + 136);
    v7 = *(_QWORD *)(v0 + 152);
    sub_1000038E4(v0 + 160);
    sub_10000390C((_QWORD *)(v0 + 176));
    sub_10000390C((_QWORD *)(v0 + 184));
    sub_10000390C((_QWORD *)(v0 + 192));
    sub_10000389C(v6, v7);
    v8 = sub_10001FE8C(v5, v0 + 104);
    sub_100003934(v0 + 160);
    sub_10000395C((_QWORD *)(v0 + 176));
    sub_10000395C((_QWORD *)(v0 + 184));
    sub_10000395C((_QWORD *)(v0 + 192));
    sub_100003984(v6, v7);
    swift_bridgeObjectRelease(v5);
  }
  else
  {
    v8 = _swiftEmptyArrayStorage;
  }
  v9 = *(_QWORD *)(v0 + 304);
  v10 = *(_QWORD *)(v0 + 264);
  v11 = *(_QWORD *)(v0 + 272);
  swift_bridgeObjectRetain(v11);
  swift_bridgeObjectRetain(v9);
  v12 = sub_100002B84((char *)_swiftEmptyArrayStorage, (uint64_t)v8, v9, v10, v11);
  swift_bridgeObjectRelease(v11);
  swift_bridgeObjectRelease_n(v9, 2);
  swift_bridgeObjectRelease(v8);
  v13 = *((_QWORD *)v12 + 2);
  if (v13)
  {
    v14 = sub_100018504((uint64_t)v12);
    v16 = v15;
    swift_bridgeObjectRelease(v12);
    v17 = v16 & 1;
    v50 = sub_100018784(v14, v16 & 1);
    v19 = v18;
    if ((v16 & 1) != 0)
    {
LABEL_7:
      v21 = 0x6964656D2E697161;
      v20 = 0xEA00000000006D75;
    }
    else
    {
      v20 = 0xE700000000000000;
      v21 = 0x776F6C2E697161;
      switch(v14)
      {
        case 1:
          break;
        case 5:
          v20 = 0xE800000000000000;
          v21 = 0x686769682E697161;
          break;
        default:
          goto LABEL_7;
      }
    }
    swift_bridgeObjectRetain_n(*(_QWORD *)(v0 + 272), 2);
    v22 = swift_bridgeObjectRetain_n(v19, 2);
    v23 = Logger.logObject.getter(v22);
    v24 = static os_log_type_t.default.getter();
    v25 = os_log_type_enabled(v23, v24);
    v26 = *(_QWORD *)(v0 + 272);
    if (v25)
    {
      v46 = *(_QWORD *)(v0 + 264);
      v48 = v17;
      v27 = swift_slowAlloc(22, -1);
      v47 = swift_slowAlloc(64, -1);
      v51[0] = v47;
      *(_DWORD *)v27 = 136315394;
      swift_bridgeObjectRetain(v26);
      *(_QWORD *)(v0 + 200) = sub_10001DF04(v46, v26, v51);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 200, v0 + 208, v27 + 4, v27 + 12);
      swift_bridgeObjectRelease_n(v26, 3);
      *(_WORD *)(v27 + 12) = 2080;
      swift_bridgeObjectRetain(v19);
      *(_QWORD *)(v0 + 208) = sub_10001DF04(v50, v19, v51);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 208, v49, v27 + 14, v27 + 22);
      swift_bridgeObjectRelease_n(v19, 3);
      _os_log_impl((void *)&_mh_execute_header, v23, v24, "...{%s} airQuality is: %s", (uint8_t *)v27, 0x16u);
      swift_arrayDestroy(v47, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v47, -1, -1);
      v28 = v27;
      v17 = v48;
      swift_slowDealloc(v28, -1, -1);
    }
    else
    {
      swift_bridgeObjectRelease_n(*(_QWORD *)(v0 + 272), 2);
      swift_bridgeObjectRelease_n(v19, 2);
    }

    if (v17)
      v39 = 0;
    else
      v39 = v14;
    v40 = __OFSUB__(6, v39);
    v41 = 6 - v39;
    if (v40)
    {
      __break(1u);
      JUMPOUT(0x1000036F0);
    }
    v42 = (double)v41;
    v43 = 4.0;
  }
  else
  {
    v20 = 0xEA00000000006D75;
    v50 = 0x9380E29380E2;
    v29 = *(_QWORD *)(v0 + 272);
    swift_bridgeObjectRelease(v12);
    v30 = swift_bridgeObjectRetain_n(v29, 2);
    v31 = Logger.logObject.getter(v30);
    v32 = static os_log_type_t.default.getter();
    v33 = os_log_type_enabled(v31, v32);
    v34 = *(_QWORD *)(v0 + 272);
    if (v33)
    {
      v35 = *(_QWORD *)(v0 + 264);
      v36 = (uint8_t *)swift_slowAlloc(12, -1);
      v37 = swift_slowAlloc(32, -1);
      v51[0] = v37;
      *(_DWORD *)v36 = 136315138;
      swift_bridgeObjectRetain(v34);
      *(_QWORD *)(v0 + 216) = sub_10001DF04(v35, v34, v51);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v49, v0 + 224, v36 + 4, v36 + 12);
      swift_bridgeObjectRelease_n(v34, 3);
      _os_log_impl((void *)&_mh_execute_header, v31, v32, "...{%s} has no air qualities, returning placeholder", v36, 0xCu);
      swift_arrayDestroy(v37, 1, (char *)&type metadata for Any + 8);
      v38 = v37;
      v20 = 0xEA00000000006D75;
      swift_slowDealloc(v38, -1, -1);
      swift_slowDealloc(v36, -1, -1);
    }
    else
    {
      swift_bridgeObjectRelease_n(*(_QWORD *)(v0 + 272), 2);
    }

    v21 = 0x6964656D2E697161;
    v19 = 0xA600000000000000;
    v42 = 0.0;
    v43 = 5.0;
  }
  v44 = *(_QWORD *)(v0 + 248);
  *(_QWORD *)v44 = 0;
  *(double *)(v44 + 8) = v43;
  *(double *)(v44 + 16) = v42;
  *(_BYTE *)(v44 + 24) = v13 == 0;
  *(_QWORD *)(v44 + 32) = v50;
  *(_QWORD *)(v44 + 40) = v19;
  *(_QWORD *)(v44 + 48) = v21;
  *(_QWORD *)(v44 + 56) = v20;
  *(_BYTE *)(v44 + 64) = 0;
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100003704(uint64_t *a1)
{
  uint64_t result;

  result = *a1;
  if (result < 0)
  {
    result = swift_getTypeByMangledNameInContext2((char *)a1 + (int)result, -(result >> 32), 0, 0);
    *a1 = result;
  }
  return result;
}

uint64_t sub_100003744(uint64_t *a1)
{
  uint64_t result;

  result = *a1;
  if (result < 0)
  {
    result = swift_getTypeByMangledNameInContextInMetadataState2(255, (char *)a1 + (int)result, -(result >> 32), 0, 0);
    *a1 = result;
  }
  return result;
}

unint64_t sub_100003788()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000817A0;
  if (!qword_1000817A0)
  {
    v1 = sub_100003744(&qword_100081798);
    result = swift_getWitnessTable(&protocol conformance descriptor for IntentConfiguration<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000817A0);
  }
  return result;
}

unint64_t sub_1000037D4()
{
  unint64_t result;

  result = qword_1000817A8;
  if (!qword_1000817A8)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for String, &type metadata for String);
    atomic_store(result, (unint64_t *)&qword_1000817A8);
  }
  return result;
}

__n128 sub_100003818(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  *a1 = *a2;
  return result;
}

uint64_t sub_100003828(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 16))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t sub_100003848(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)result = (a2 - 1);
    *(_QWORD *)(result + 8) = 0;
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 16) = v3;
  return result;
}

void type metadata accessor for CGSize(uint64_t a1)
{
  sub_1000039A8(a1, &qword_1000817B0, (uint64_t)&unk_10007C810);
}

uint64_t sub_100003884(uint64_t a1, uint64_t a2)
{
  if ((*(_BYTE *)(*(_QWORD *)(a1 - 8) + 82) & 2) != 0)
    return *(_QWORD *)a2;
  return a2;
}

uint64_t sub_10000389C(uint64_t result, uint64_t a2)
{
  if (result)
    return swift_retain(a2);
  return result;
}

uint64_t sub_1000038AC(uint64_t a1, unint64_t *a2, _QWORD *a3)
{
  uint64_t result;
  uint64_t v5;

  result = *a2;
  if (!*a2)
  {
    v5 = objc_opt_self(*a3);
    result = swift_getObjCClassMetadata(v5);
    atomic_store(result, a2);
  }
  return result;
}

uint64_t sub_1000038E4(uint64_t a1)
{
  swift_bridgeObjectRetain(*(_QWORD *)(a1 + 8));
  return a1;
}

_QWORD *sub_10000390C(_QWORD *a1)
{
  swift_bridgeObjectRetain(*a1);
  return a1;
}

uint64_t sub_100003934(uint64_t a1)
{
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
  return a1;
}

_QWORD *sub_10000395C(_QWORD *a1)
{
  swift_bridgeObjectRelease(*a1);
  return a1;
}

uint64_t sub_100003984(uint64_t result, uint64_t a2)
{
  if (result)
    return swift_release(a2);
  return result;
}

void type metadata accessor for HMCharacteristicValueCurrentSecuritySystemState(uint64_t a1)
{
  sub_1000039A8(a1, &qword_1000817C8, (uint64_t)&unk_10007C838);
}

void sub_1000039A8(uint64_t a1, unint64_t *a2, uint64_t a3)
{
  unint64_t ForeignTypeMetadata;
  uint64_t v5;

  if (!*a2)
  {
    ForeignTypeMetadata = swift_getForeignTypeMetadata(0, a3);
    if (!v5)
      atomic_store(ForeignTypeMetadata, a2);
  }
}

_UNKNOWN **static CharacteristicKind.allCases.getter()
{
  return &off_10007ACC8;
}

unint64_t CharacteristicKind.rawValue.getter(unsigned __int8 a1)
{
  return ((unint64_t (*)())((char *)sub_100003A30 + 4 * word_1000608B0[a1]))();
}

unint64_t sub_100003A30()
{
  return 0xD000000000000024;
}

uint64_t sub_10000425C@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = _s20HomeWidgetLockScreen18CharacteristicKindO8rawValueACSgSS_tcfC_0(*a1, a1[1]);
  *a2 = result;
  return result;
}

unint64_t sub_100004288@<X0>(_QWORD *a1@<X8>)
{
  unsigned __int8 *v1;
  unint64_t result;
  uint64_t v4;

  result = CharacteristicKind.rawValue.getter(*v1);
  *a1 = 0xD000000000000024;
  a1[1] = v4;
  return result;
}

uint64_t sub_1000042B8(unsigned __int8 *a1, unsigned __int8 *a2)
{
  unsigned __int8 v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;

  v2 = *a2;
  CharacteristicKind.rawValue.getter(*a1);
  v4 = v3;
  CharacteristicKind.rawValue.getter(v2);
  if (v4 == v5)
  {
    v7 = 1;
    v6 = v4;
  }
  else
  {
    v6 = v5;
    v7 = _stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000024, v4, 0xD000000000000024, v5, 0);
  }
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(v6);
  return v7 & 1;
}

void sub_100004340(char a1)
{
  __asm { BR              X10 }
}

uint64_t sub_100004390(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_100004424 + 4 * byte_100060A12[a2]))(0x61746E6563726570);
}

uint64_t sub_100004424(uint64_t a1)
{
  uint64_t v1;
  char v2;

  if (a1 == 0x61746E6563726570 && v1 == 0xEA00000000006567)
    v2 = 1;
  else
    v2 = ((uint64_t (*)(void))_stringCompareWithSmolCheck(_:_:expecting:))();
  swift_bridgeObjectRelease(v1);
  swift_bridgeObjectRelease(0xEA00000000006567);
  return v2 & 1;
}

void sub_100004508(_QWORD *a1@<X8>)
{
  *a1 = &off_10007ACC8;
}

uint64_t sub_100004518(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return _s20HomeWidgetLockScreen18CharacteristicKindO1loiySbAC_ACtFZ_0(*a1, *a2);
}

BOOL sub_100004528(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return (_s20HomeWidgetLockScreen18CharacteristicKindO1loiySbAC_ACtFZ_0(*a2, *a1) & 1) == 0;
}

BOOL sub_100004550(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return (_s20HomeWidgetLockScreen18CharacteristicKindO1loiySbAC_ACtFZ_0(*a1, *a2) & 1) == 0;
}

uint64_t sub_100004574(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return _s20HomeWidgetLockScreen18CharacteristicKindO1loiySbAC_ACtFZ_0(*a2, *a1);
}

Swift::Int sub_100004584()
{
  unsigned __int8 *v0;
  unsigned __int8 v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD v5[9];

  v1 = *v0;
  Hasher.init(_seed:)(v5, 0);
  CharacteristicKind.rawValue.getter(v1);
  v3 = v2;
  String.hash(into:)(v5, 0xD000000000000024, v2);
  swift_bridgeObjectRelease(v3);
  return Hasher._finalize()();
}

void sub_1000045E4(char a1)
{
  _QWORD v2[9];

  Hasher.init(_seed:)(v2, 0);
  __asm { BR              X10 }
}

Swift::Int sub_100004634()
{
  uint64_t v1;

  ((void (*)(uint64_t *, uint64_t, unint64_t))String.hash(into:))(&v1, 0x61746E6563726570, 0xEA00000000006567);
  swift_bridgeObjectRelease(0xEA00000000006567);
  return Hasher._finalize()();
}

uint64_t sub_1000046D4(uint64_t a1)
{
  unsigned __int8 *v1;
  uint64_t v3;
  uint64_t v4;

  CharacteristicKind.rawValue.getter(*v1);
  v4 = v3;
  String.hash(into:)(a1, 0xD000000000000024, v3);
  return swift_bridgeObjectRelease(v4);
}

Swift::Int sub_100004714(uint64_t a1)
{
  unsigned __int8 *v1;
  unsigned __int8 v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD v6[9];

  v2 = *v1;
  Hasher.init(_seed:)(v6, a1);
  CharacteristicKind.rawValue.getter(v2);
  v4 = v3;
  String.hash(into:)(v6, 0xD000000000000024, v3);
  swift_bridgeObjectRelease(v4);
  return Hasher._finalize()();
}

void sub_100004770(uint64_t a1, char a2)
{
  _QWORD v3[9];

  Hasher.init(_seed:)(v3, a1);
  __asm { BR              X10 }
}

Swift::Int sub_1000047BC()
{
  uint64_t v1;

  ((void (*)(uint64_t *, uint64_t, unint64_t))String.hash(into:))(&v1, 0x61746E6563726570, 0xEA00000000006567);
  swift_bridgeObjectRelease(0xEA00000000006567);
  return Hasher._finalize()();
}

uint64_t sub_10000485C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_1000130AC();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_1000048B8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_1000130AC();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

uint64_t CharacteristicKind.description.getter(unsigned __int8 a1)
{
  uint64_t v2;
  _QWORD *v3;
  unint64_t v4;
  char v5;
  unint64_t v6;

  if (qword_100081630 != -1)
    swift_once(&qword_100081630, sub_100004B54);
  v2 = 0x6E776F6E6B6E75;
  v3 = off_1000817D0;
  if (*((_QWORD *)off_1000817D0 + 2))
  {
    v4 = sub_10000A554(a1);
    if ((v5 & 1) != 0)
    {
      v6 = v3[7] + (v4 << 6);
      v2 = *(_QWORD *)(v6 + 8);
      swift_bridgeObjectRetain(*(_QWORD *)(v6 + 16));
    }
  }
  return v2;
}

uint64_t sub_1000049A0()
{
  unsigned __int8 *v0;
  unsigned __int8 v1;
  uint64_t v2;
  _QWORD *v3;
  unint64_t v4;
  char v5;
  unint64_t v6;

  v1 = *v0;
  if (qword_100081630 != -1)
    swift_once(&qword_100081630, sub_100004B54);
  v2 = 0x6E776F6E6B6E75;
  v3 = off_1000817D0;
  if (*((_QWORD *)off_1000817D0 + 2))
  {
    v4 = sub_10000A554(v1);
    if ((v5 & 1) != 0)
    {
      v6 = v3[7] + (v4 << 6);
      v2 = *(_QWORD *)(v6 + 8);
      swift_bridgeObjectRetain(*(_QWORD *)(v6 + 16));
    }
  }
  return v2;
}

uint64_t static CharacteristicKind.info(for:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  unsigned __int8 v2;
  _QWORD *v4;
  __int128 v5;
  char v6;
  unsigned __int8 *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  __int128 v14;

  v2 = result;
  if (qword_100081630 != -1)
    result = swift_once(&qword_100081630, sub_100004B54);
  v4 = off_1000817D0;
  v5 = 0uLL;
  if (*((_QWORD *)off_1000817D0 + 2))
  {
    result = sub_10000A554(v2);
    if ((v6 & 1) != 0)
    {
      v7 = (unsigned __int8 *)(v4[7] + (result << 6));
      v8 = *v7;
      v10 = *((_QWORD *)v7 + 1);
      v9 = *((_QWORD *)v7 + 2);
      v11 = *((_QWORD *)v7 + 4);
      v12 = *((unsigned int *)v7 + 10) | ((unint64_t)v7[44] << 32);
      v14 = *((_OWORD *)v7 + 3);
      v13 = *((unsigned __int16 *)v7 + 12);
      swift_bridgeObjectRetain(v9);
      result = sub_10000E454(v11, v12);
      v5 = v14;
    }
    else
    {
      v8 = 0;
      v10 = 0;
      v9 = 0;
      v13 = 0;
      v11 = 0;
      v12 = 0;
      v5 = 0uLL;
    }
  }
  else
  {
    v8 = 0;
    v10 = 0;
    v9 = 0;
    v13 = 0;
    v11 = 0;
    v12 = 0;
  }
  *(_QWORD *)a2 = v8;
  *(_QWORD *)(a2 + 8) = v10;
  *(_QWORD *)(a2 + 16) = v9;
  *(_QWORD *)(a2 + 24) = v13;
  *(_QWORD *)(a2 + 32) = v11;
  *(_QWORD *)(a2 + 40) = v12;
  *(_OWORD *)(a2 + 48) = v5;
  return result;
}

uint64_t sub_100004B54()
{
  void *v0;
  uint64_t v1;
  id v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  __int16 v15;
  uint64_t v16;
  char *v17;
  unint64_t v18;
  unint64_t v19;
  char *v20;
  uint64_t v21;
  void *v22;
  uint64_t result;
  uint64_t v24;
  uint64_t v25;
  __int128 v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  __int128 v36;
  uint64_t v37;
  uint64_t v38;
  _OWORD v39[2];
  _OWORD v40[2];

  if (qword_100081678 != -1)
    swift_once(&qword_100081678, sub_10002220C);
  v0 = (void *)static DataModel.defaultMetadataPlist;
  v29 = 0x6574636172616843;
  v30 = 0xEF73636974736972;
  v1 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)(&v29, &type metadata for String);
  v2 = objc_msgSend(v0, "__swift_objectForKeyedSubscript:", v1);
  v3 = swift_unknownObjectRelease(v1);
  if (v2)
  {
    v4 = 0;
    _bridgeAnyObjectToAny(_:)(v39, v2);
    swift_unknownObjectRelease(v2);
    sub_10000E574(v39, v40);
    v5 = sub_100003704(&qword_100081C30);
    swift_dynamicCast(&v38, v40, (char *)&type metadata for Any + 8, v5, 7);
    v6 = v38;
    v25 = *(_QWORD *)(v38 + 16);
    if (v25)
    {
      swift_bridgeObjectRetain(v38);
      v7 = 0;
      v28 = (char *)&_swiftEmptyArrayStorage;
      v24 = v6;
      do
      {
        v9 = *(_QWORD *)(v6 + 8 * v7 + 32);
        v37 = v9;
        swift_bridgeObjectRetain(v9);
        sub_100004E3C(&v37, &v29);
        swift_bridgeObjectRelease(v9);
        v10 = v32;
        if (v32)
        {
          v11 = v29;
          v12 = v30;
          v13 = v31;
          v15 = v33;
          v14 = v34;
          v16 = v35;
          v26 = v36;
          v27 = v4;
          if ((swift_isUniquelyReferenced_nonNull_native(v28) & 1) != 0)
            v17 = v28;
          else
            v17 = sub_100009F08(0, *((_QWORD *)v28 + 2) + 1, 1, v28);
          v19 = *((_QWORD *)v17 + 2);
          v18 = *((_QWORD *)v17 + 3);
          if (v19 >= v18 >> 1)
            v17 = sub_100009F08((char *)(v18 > 1), v19 + 1, 1, v17);
          *((_QWORD *)v17 + 2) = v19 + 1;
          v28 = v17;
          v8 = &v17[72 * v19];
          v8[32] = v11;
          v8[40] = v12;
          *((_QWORD *)v8 + 6) = v13;
          *((_QWORD *)v8 + 7) = v10;
          *((_WORD *)v8 + 32) = v15;
          *((_QWORD *)v8 + 9) = v14;
          v8[84] = BYTE4(v16);
          *((_DWORD *)v8 + 20) = v16;
          *(_OWORD *)(v8 + 88) = v26;
          v4 = v27;
          v6 = v24;
        }
        ++v7;
      }
      while (v25 != v7);
      swift_bridgeObjectRelease(v6);
      v20 = v28;
    }
    else
    {
      v20 = (char *)&_swiftEmptyArrayStorage;
    }
    swift_bridgeObjectRelease(v6);
    v21 = *((_QWORD *)v20 + 2);
    if (v21)
    {
      sub_100003704(&qword_100081C38);
      v22 = (void *)static _DictionaryStorage.allocate(capacity:)(v21);
    }
    else
    {
      v22 = &_swiftEmptyDictionarySingleton;
    }
    v29 = (uint64_t)v22;
    sub_10000E0AC((uint64_t)v20, 1, &v29);
    result = swift_bridgeObjectRelease(v20);
    off_1000817D0 = (_UNKNOWN *)v29;
  }
  else
  {
    __break(1u);
    swift_bridgeObjectRelease(v3);
    result = swift_release(v29);
    __break(1u);
  }
  return result;
}

void sub_100004E3C(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  unint64_t v4;
  char v5;
  unsigned __int8 v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  uint8_t *v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unsigned __int8 v20;
  unint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  char v26;
  unsigned __int8 v27;
  unsigned __int8 v28;
  unint64_t v29;
  char v30;
  Swift::String v31;
  unint64_t v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  char v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  void *v43;
  uint64_t v44;
  unint64_t v45;
  char v46;
  uint64_t v47;
  void *v48;
  uint64_t v49;
  unsigned __int8 v50;
  uint64_t v51;
  unint64_t v52;
  unsigned __int8 v53;
  Swift::String v54;
  void *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;

  v3 = *a1;
  if (*(_QWORD *)(*a1 + 16))
  {
    v4 = sub_10000A5C8(1145656661, 0xE400000000000000);
    if ((v5 & 1) != 0)
    {
      v54._countAndFlagsBits = *(_QWORD *)(*(_QWORD *)(v3 + 56) + 8 * v4);
      swift_unknownObjectRetain(v54._countAndFlagsBits);
      if ((swift_dynamicCast(&v56, &v54, (char *)&type metadata for Swift.AnyObject + 8, &type metadata for String, 6) & 1) != 0)
      {
        v6 = _s20HomeWidgetLockScreen18CharacteristicKindO8rawValueACSgSS_tcfC_0(v56, v57);
        if (v6 != 174)
        {
          if (*(_QWORD *)(v3 + 16))
          {
            v20 = v6;
            v21 = sub_10000A5C8(1701667150, 0xE400000000000000);
            if ((v22 & 1) != 0)
            {
              v58 = *(_QWORD *)(*(_QWORD *)(v3 + 56) + 8 * v21);
              swift_unknownObjectRetain(v58);
              swift_dynamicCast(&v56, &v58, (char *)&type metadata for Swift.AnyObject + 8, &type metadata for String, 7);
              if (*(_QWORD *)(v3 + 16))
              {
                v23 = v56;
                v24 = v57;
                v25 = sub_10000A5C8(0x74616D726F46, 0xE600000000000000);
                if ((v26 & 1) != 0)
                {
                  v55 = *(void **)(*(_QWORD *)(v3 + 56) + 8 * v25);
                  swift_unknownObjectRetain(v55);
                  swift_dynamicCast(&v54, &v55, (char *)&type metadata for Swift.AnyObject + 8, &type metadata for String, 7);
                  v27 = _s20HomeWidgetLockScreen18CharacteristicKindO6FormatO8rawValueAESgSS_tcfC_0(v54);
                  if (v27 != 11)
                  {
                    v28 = v27;
                    if (*(_QWORD *)(v3 + 16)
                      && (v29 = sub_10000A5C8(1953066581, 0xE400000000000000), (v30 & 1) != 0)
                      && (v55 = *(void **)(*(_QWORD *)(v3 + 56) + 8 * v29),
                          swift_unknownObjectRetain(v55),
                          swift_dynamicCast(&v54, &v55, (char *)&type metadata for Swift.AnyObject + 8, &type metadata for String, 6)))
                    {
                      v31 = v54;
                    }
                    else
                    {
                      v31._countAndFlagsBits = 0;
                      v31._object = (void *)0xE000000000000000;
                    }
                    v50 = _s20HomeWidgetLockScreen18CharacteristicKindO4UnitO8rawValueAESgSS_tcfC_0(v31);
                    if (*(_QWORD *)(v3 + 16)
                      && (v32 = sub_10000A5C8(0x69617274736E6F43, 0xEB0000000073746ELL), (v33 & 1) != 0))
                    {
                      v54._countAndFlagsBits = *(_QWORD *)(*(_QWORD *)(v3 + 56) + 8 * v32);
                      swift_unknownObjectRetain(v54._countAndFlagsBits);
                      v34 = sub_100003704(&qword_100081C60);
                      if (swift_dynamicCast(&v55, &v54, (char *)&type metadata for Swift.AnyObject + 8, v34, 6))v35 = (uint64_t)v55;
                      else
                        v35 = 0;
                    }
                    else
                    {
                      v35 = 0;
                    }
                    v36 = sub_10000D9B8(v35);
                    v51 = v37;
                    v52 = v36;
                    v53 = v28;
                    if (*(_QWORD *)(v3 + 16)
                      && (v38 = sub_10000A5C8(0x697373696D726550, 0xEB00000000736E6FLL), (v39 & 1) != 0))
                    {
                      v40 = v24;
                      v54._countAndFlagsBits = *(_QWORD *)(*(_QWORD *)(v3 + 56) + 8 * v38);
                      swift_unknownObjectRetain(v54._countAndFlagsBits);
                      v41 = sub_100003704(&qword_100081C58);
                      if (swift_dynamicCast(&v55, &v54, (char *)&type metadata for Swift.AnyObject + 8, v41, 6))
                      {
                        v42 = v23;
                        v43 = v55;
                        goto LABEL_37;
                      }
                    }
                    else
                    {
                      v40 = v24;
                    }
                    v42 = v23;
                    v43 = &_swiftEmptyArrayStorage;
LABEL_37:
                    v44 = sub_10000DCE0((uint64_t)v43);
                    swift_bridgeObjectRelease(v43);
                    if (*(_QWORD *)(v3 + 16)
                      && (v45 = sub_10000A5C8(0x69747265706F7250, 0xEA00000000007365), (v46 & 1) != 0)
                      && (v54._countAndFlagsBits = *(_QWORD *)(*(_QWORD *)(v3 + 56) + 8 * v45),
                          swift_unknownObjectRetain(v54._countAndFlagsBits),
                          v47 = sub_100003704(&qword_100081C58),
                          swift_dynamicCast(&v55, &v54, (char *)&type metadata for Swift.AnyObject + 8, v47, 6)))
                    {
                      v48 = v55;
                    }
                    else
                    {
                      v48 = &_swiftEmptyArrayStorage;
                    }
                    v49 = sub_10000DE04((uint64_t)v48);
                    swift_bridgeObjectRelease(v48);
                    *a2 = v20;
                    a2[1] = v20;
                    a2[2] = v42;
                    a2[3] = v40;
                    a2[4] = v53 | ((unint64_t)v50 << 8);
                    a2[5] = v52;
                    a2[6] = v51 & 0xFFFFFFFFFFLL;
                    a2[7] = v44;
                    a2[8] = v49;
                    return;
                  }
LABEL_47:
                  __break(1u);
                  return;
                }
LABEL_46:
                __break(1u);
                goto LABEL_47;
              }
LABEL_45:
              __break(1u);
              goto LABEL_46;
            }
          }
          else
          {
            __break(1u);
          }
          __break(1u);
          goto LABEL_45;
        }
      }
    }
  }
  if (qword_100081680 != -1)
    swift_once(&qword_100081680, sub_100022448);
  v7 = type metadata accessor for Logger(0);
  sub_100003884(v7, (uint64_t)static DataModel.widgetLogger);
  v8 = swift_bridgeObjectRetain_n(v3, 2);
  v9 = Logger.logObject.getter(v8);
  v10 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v9, v10))
  {
    v11 = (uint8_t *)swift_slowAlloc(12, -1);
    v12 = swift_slowAlloc(32, -1);
    v56 = v12;
    *(_DWORD *)v11 = 136315138;
    if (*(_QWORD *)(v3 + 16) && (v13 = sub_10000A5C8(1145656661, 0xE400000000000000), (v14 & 1) != 0))
      v15 = swift_unknownObjectRetain(*(_QWORD *)(*(_QWORD *)(v3 + 56) + 8 * v13));
    else
      v15 = 0;
    v54._countAndFlagsBits = v15;
    v16 = sub_100003704(&qword_100081C50);
    v17 = String.init<A>(describing:)(&v54, v16);
    v19 = v18;
    v54._countAndFlagsBits = sub_10001DF04(v17, v18, &v56);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v54, &v54._object, v11 + 4, v11 + 12);
    swift_bridgeObjectRelease_n(v3, 2);
    swift_bridgeObjectRelease(v19);
    _os_log_impl((void *)&_mh_execute_header, v9, v10, "missing characteristic %s", v11, 0xCu);
    swift_arrayDestroy(v12, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v12, -1, -1);
    swift_slowDealloc(v11, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n(v3, 2);
  }
  a2[8] = 0;
  *((_OWORD *)a2 + 2) = 0u;
  *((_OWORD *)a2 + 3) = 0u;
  *(_OWORD *)a2 = 0u;
  *((_OWORD *)a2 + 1) = 0u;
}

uint64_t CharacteristicKind.valueFormat.getter(unsigned __int8 a1)
{
  _QWORD *v2;
  unint64_t v3;
  char v4;

  if (qword_100081630 != -1)
    swift_once(&qword_100081630, sub_100004B54);
  v2 = off_1000817D0;
  if (*((_QWORD *)off_1000817D0 + 2) && (v3 = sub_10000A554(a1), (v4 & 1) != 0))
    return *(unsigned __int8 *)(v2[7] + (v3 << 6) + 24);
  else
    return 11;
}

uint64_t CharacteristicKind.Value.id.getter(uint64_t a1, unint64_t a2, char a3)
{
  sub_10000E47C(a1, a2, a3);
  return a1;
}

uint64_t static CharacteristicKind.Value.typedValue(for:valueFormat:)(uint64_t a1, char a2)
{
  int v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  __int16 v9;
  int v10;
  int v11;
  int v12;
  uint64_t v13;
  int v14;
  int v15;
  __int16 v16;
  int v17;
  int v18;
  int v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  char v27;
  uint64_t v29[2];
  _OWORD v30[2];
  uint64_t v31;
  unint64_t v32;
  __int128 v33;
  uint64_t v34;
  _OWORD v35[2];

  sub_10000E4EC(a1, (uint64_t)&v33);
  if (v34)
  {
    sub_10000E574(&v33, v35);
    sub_10000E584((uint64_t)v35, (uint64_t)&v33);
    if (swift_dynamicCast(&v31, &v33, (char *)&type metadata for Any + 8, &type metadata for Int, 0))
    {
      sub_10000E584((uint64_t)v35, (uint64_t)v30);
      v3 = swift_dynamicCast(v29, v30, (char *)&type metadata for Any + 8, &type metadata for Int, 6);
      v4 = v29[0];
      if (!v3)
        v4 = 0;
      v5 = v3 ^ 1;
LABEL_6:
      v6 = sub_100005F9C(v4, v5, a2);
LABEL_54:
      v7 = v6;
      sub_1000130F0(v35);
LABEL_55:
      sub_1000130F0(&v33);
      return v7;
    }
    if (swift_dynamicCast(&v31, &v33, (char *)&type metadata for Any + 8, &type metadata for Int8, 0))
    {
      sub_10000E584((uint64_t)v35, (uint64_t)v30);
      v8 = swift_dynamicCast(v29, v30, (char *)&type metadata for Any + 8, &type metadata for Int8, 6);
      v9 = LOBYTE(v29[0]);
      if (!v8)
        v9 = 0;
      v6 = sub_100005B48(v9 | (unsigned __int16)(((unsigned __int16)v8 ^ 1) << 8), a2);
      goto LABEL_54;
    }
    if (swift_dynamicCast(&v31, &v33, (char *)&type metadata for Any + 8, &type metadata for Int16, 0))
    {
      sub_10000E584((uint64_t)v35, (uint64_t)v30);
      v10 = swift_dynamicCast(v29, v30, (char *)&type metadata for Any + 8, &type metadata for Int16, 6);
      v11 = LOWORD(v29[0]);
      if (!v10)
        v11 = 0;
      v6 = sub_100005CA4(v11 | ((v10 ^ 1u) << 16), a2);
      goto LABEL_54;
    }
    if (swift_dynamicCast(&v31, &v33, (char *)&type metadata for Any + 8, &type metadata for Int32, 0))
    {
      sub_10000E584((uint64_t)v35, (uint64_t)v30);
      v12 = swift_dynamicCast(v29, v30, (char *)&type metadata for Any + 8, &type metadata for Int32, 6);
      v13 = LODWORD(v29[0]);
      LOBYTE(v29[0]) = v12 ^ 1;
      if (!v12)
        v13 = 0;
      v6 = sub_100005E28(v13 | ((unint64_t)(v12 ^ 1u) << 32), a2);
      goto LABEL_54;
    }
    if (swift_dynamicCast(&v31, &v33, (char *)&type metadata for Any + 8, &type metadata for Int64, 0))
    {
      sub_10000E584((uint64_t)v35, (uint64_t)v30);
      v14 = swift_dynamicCast(v29, v30, (char *)&type metadata for Any + 8, &type metadata for Int64, 6);
      v4 = v29[0];
      if (!v14)
        v4 = 0;
      v5 = v14 ^ 1;
      goto LABEL_6;
    }
    if (swift_dynamicCast(&v31, &v33, (char *)&type metadata for Any + 8, &type metadata for UInt8, 0))
    {
      sub_10000E584((uint64_t)v35, (uint64_t)v30);
      v15 = swift_dynamicCast(v29, v30, (char *)&type metadata for Any + 8, &type metadata for UInt8, 6);
      v16 = LOBYTE(v29[0]);
      if (!v15)
        v16 = 0;
      v6 = sub_100006118(v16 | (unsigned __int16)(((unsigned __int16)v15 ^ 1) << 8), a2);
      goto LABEL_54;
    }
    if (swift_dynamicCast(&v31, &v33, (char *)&type metadata for Any + 8, &type metadata for UInt16, 0))
    {
      sub_10000E584((uint64_t)v35, (uint64_t)v30);
      v17 = swift_dynamicCast(v29, v30, (char *)&type metadata for Any + 8, &type metadata for UInt16, 6);
      v18 = LOWORD(v29[0]);
      if (!v17)
        v18 = 0;
      v6 = sub_100006218(v18 | ((v17 ^ 1u) << 16), a2);
      goto LABEL_54;
    }
    if (swift_dynamicCast(&v31, &v33, (char *)&type metadata for Any + 8, &type metadata for UInt32, 0))
    {
      sub_10000E584((uint64_t)v35, (uint64_t)v30);
      v19 = swift_dynamicCast(v29, v30, (char *)&type metadata for Any + 8, &type metadata for UInt32, 6);
      v20 = LODWORD(v29[0]);
      LOBYTE(v29[0]) = v19 ^ 1;
      if (!v19)
        v20 = 0;
      v6 = sub_100006324(v20 | ((unint64_t)(v19 ^ 1u) << 32), a2);
      goto LABEL_54;
    }
    if (swift_dynamicCast(&v31, &v33, (char *)&type metadata for Any + 8, &type metadata for UInt64, 0))
    {
      sub_10000E584((uint64_t)v35, (uint64_t)v30);
      v21 = swift_dynamicCast(v29, v30, (char *)&type metadata for Any + 8, &type metadata for UInt64, 6);
      v22 = v29[0];
      if (!v21)
        v22 = 0;
      v6 = sub_100006444(v22, v21 ^ 1u, a2);
      goto LABEL_54;
    }
    if (swift_dynamicCast(&v31, &v33, (char *)&type metadata for Any + 8, &type metadata for Float, 0))
    {
      sub_10000E584((uint64_t)v35, (uint64_t)v30);
      v23 = swift_dynamicCast(v29, v30, (char *)&type metadata for Any + 8, &type metadata for Float, 6);
      v24 = LODWORD(v29[0]);
      LOBYTE(v29[0]) = v23 ^ 1;
      if (!v23)
        v24 = 0;
      v6 = sub_100006560(v24 | ((unint64_t)(v23 ^ 1u) << 32), a2);
      goto LABEL_54;
    }
    if (swift_dynamicCast(&v31, &v33, (char *)&type metadata for Any + 8, &type metadata for Double, 0))
    {
      sub_10000E584((uint64_t)v35, (uint64_t)v30);
      v25 = swift_dynamicCast(v29, v30, (char *)&type metadata for Any + 8, &type metadata for Double, 6);
      v26 = v29[0];
      if (!v25)
        v26 = 0;
      v6 = sub_1000067D8(v26, v25 ^ 1u, a2);
      goto LABEL_54;
    }
    if (swift_dynamicCast(&v31, &v33, (char *)&type metadata for Any + 8, &type metadata for Bool, 0))
    {
      sub_10000E584((uint64_t)v35, (uint64_t)v30);
      if (swift_dynamicCast(v29, v30, (char *)&type metadata for Any + 8, &type metadata for Bool, 6))
        v27 = v29[0];
      else
        v27 = 2;
      v6 = sub_10000E6F8(v27, a2);
      goto LABEL_54;
    }
    if (swift_dynamicCast(&v31, &v33, (char *)&type metadata for Any + 8, &type metadata for String, 0))
    {
      swift_bridgeObjectRelease(v32);
      sub_10000E574(v35, v30);
      if ((swift_dynamicCast(v29, v30, (char *)&type metadata for Any + 8, &type metadata for String, 6) & 1) != 0)
      {
        v7 = v29[0];
        goto LABEL_55;
      }
LABEL_67:
      v7 = 0;
      goto LABEL_55;
    }
    if (swift_dynamicCast(&v31, &v33, (char *)&type metadata for Any + 8, &type metadata for Data, 0))
    {
      sub_10000E5C0(v31, v32);
      sub_10000E574(v35, v30);
      if ((swift_dynamicCast(v29, v30, (char *)&type metadata for Any + 8, &type metadata for Data, 6) & 1) != 0)
      {
        v7 = v29[0];
        if (a2 == 10 || a2 == 9)
          goto LABEL_55;
        sub_10000E5C0(v29[0], v29[1]);
      }
      goto LABEL_67;
    }
    sub_1000130F0(v35);
    sub_1000130F0(&v33);
  }
  else
  {
    sub_10000E534((uint64_t)&v33);
  }
  return 0;
}

uint64_t sub_100005B48(__int16 a1, char a2)
{
  if ((a1 & 0x100) == 0)
    __asm { BR              X11 }
  return 0;
}

void sub_100005BB8()
{
  JUMPOUT(0x100005BA8);
}

void sub_100005BCC()
{
  JUMPOUT(0x100005BA8);
}

void sub_100005BE4()
{
  JUMPOUT(0x100005BA8);
}

void sub_100005BFC()
{
  JUMPOUT(0x100005BA8);
}

void sub_100005C10()
{
  JUMPOUT(0x100005BA8);
}

void sub_100005C24(char a1@<W8>)
{
  if (a1 < 0)
  {
    _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Negative value is not representable", 35, 2, "Swift/Integers.swift", 20);
    __break(1u);
  }
  JUMPOUT(0x100005BA8);
}

uint64_t sub_100005CA4(int a1, char a2)
{
  if ((a1 & 0x10000) == 0)
    __asm { BR              X11 }
  return 0;
}

void sub_100005D10()
{
  JUMPOUT(0x100005D00);
}

void sub_100005D24()
{
  JUMPOUT(0x100005D00);
}

void sub_100005D3C()
{
  JUMPOUT(0x100005D00);
}

void sub_100005D54()
{
  JUMPOUT(0x100005D00);
}

void sub_100005D90()
{
  JUMPOUT(0x100005D00);
}

void sub_100005DA8(__int16 a1@<W8>)
{
  if (a1 < 0)
  {
    _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Negative value is not representable", 35, 2, "Swift/Integers.swift", 20);
    __break(1u);
  }
  JUMPOUT(0x100005D00);
}

uint64_t sub_100005E28(uint64_t a1, char a2)
{
  if ((a1 & 0x100000000) == 0)
    __asm { BR              X11 }
  return 0;
}

void sub_100005E94()
{
  JUMPOUT(0x100005E84);
}

void sub_100005F0C()
{
  JUMPOUT(0x100005E84);
}

void sub_100005F1C(int a1@<W8>)
{
  if (a1 < 0)
  {
    _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Negative value is not representable", 35, 2, "Swift/Integers.swift", 20);
    __break(1u);
  }
  JUMPOUT(0x100005E84);
}

uint64_t sub_100005F9C(uint64_t a1, char a2, char a3)
{
  if ((a2 & 1) == 0)
    __asm { BR              X11 }
  return 0;
}

void sub_100006024()
{
  JUMPOUT(0x100006014);
}

void sub_100006040()
{
  JUMPOUT(0x100006014);
}

void sub_100006054()
{
  JUMPOUT(0x100006014);
}

void sub_100006068()
{
  JUMPOUT(0x100006014);
}

void sub_100006084()
{
  JUMPOUT(0x100006014);
}

void sub_1000060A0(uint64_t a1@<X8>)
{
  if (a1 < 0)
  {
    _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Negative value is not representable", 35, 2, "Swift/Integers.swift", 20);
    __break(1u);
  }
  JUMPOUT(0x100006014);
}

uint64_t sub_100006118(__int16 a1, unsigned __int8 a2)
{
  if ((a1 & 0x100) != 0)
    return 0;
  else
    return ((uint64_t (*)(_QWORD, _QWORD, uint64_t))((char *)sub_100006148 + 4 * byte_100060A50[a2]))(0, 0, 255);
}

uint64_t sub_100006148@<X0>(unsigned __int8 a1@<W8>)
{
  return a1;
}

BOOL sub_100006168@<W0>(char a1@<W8>)
{
  return a1 == 1;
}

uint64_t sub_100006180@<X0>(unsigned __int8 a1@<W8>)
{
  return a1;
}

uint64_t sub_100006190@<X0>(unsigned __int8 a1@<W8>)
{
  return a1;
}

uint64_t sub_1000061A0@<X0>(unsigned __int8 a1@<W8>)
{
  return a1;
}

uint64_t sub_1000061B0@<X0>(unsigned __int8 a1@<W8>)
{
  return a1;
}

double sub_1000061C0@<D0>(unsigned __int8 a1@<W8>)
{
  return (double)a1;
}

uint64_t sub_1000061D8()
{
  return dispatch thunk of CustomStringConvertible.description.getter(&type metadata for UInt8, &protocol witness table for UInt8);
}

uint64_t sub_100006218(int a1, unsigned __int8 a2)
{
  if ((a1 & 0x10000) != 0)
    return 0;
  else
    return ((uint64_t (*)(_QWORD, _QWORD, uint64_t))((char *)sub_100006248 + 4 * byte_100060A5B[a2]))(0, 0, 255);
}

uint64_t sub_100006248@<X0>(unsigned __int16 a1@<W8>)
{
  return a1;
}

BOOL sub_100006268@<W0>(__int16 a1@<W8>)
{
  return a1 == 1;
}

uint64_t sub_100006280@<X0>(__int16 a1@<W8>)
{
  if ((a1 & 0xFF00) != 0)
    return 255;
  else
    return a1;
}

uint64_t sub_10000629C@<X0>(unsigned __int16 a1@<W8>)
{
  return a1;
}

uint64_t sub_1000062AC@<X0>(unsigned __int16 a1@<W8>)
{
  return a1;
}

uint64_t sub_1000062BC@<X0>(unsigned __int16 a1@<W8>)
{
  return a1;
}

double sub_1000062CC@<D0>(unsigned __int16 a1@<W8>)
{
  return (double)a1;
}

uint64_t sub_1000062E4()
{
  return dispatch thunk of CustomStringConvertible.description.getter(&type metadata for UInt16, &protocol witness table for UInt16);
}

uint64_t sub_100006324(uint64_t a1, unsigned __int8 a2)
{
  if ((a1 & 0x100000000) != 0)
    return 0;
  else
    return ((uint64_t (*)(_QWORD, _QWORD, uint64_t))((char *)&loc_100006354 + 4 * byte_100060A66[a2]))(0, 0, 255);
}

BOOL sub_10000637C@<W0>(int a1@<W8>)
{
  return a1 == 1;
}

uint64_t sub_100006390@<X0>(unsigned int a1@<W8>)
{
  if (a1 <= 0xFF)
    return a1;
  else
    return 255;
}

uint64_t sub_1000063AC@<X0>(unsigned int a1@<W8>)
{
  if (HIWORD(a1))
    return 0xFFFFLL;
  else
    return (unsigned __int16)a1;
}

uint64_t sub_1000063CC@<X0>(unsigned int a1@<W8>)
{
  return a1;
}

uint64_t sub_1000063DC@<X0>(unsigned int a1@<W8>)
{
  return a1;
}

double sub_1000063EC@<D0>(unsigned int a1@<W8>)
{
  return (double)a1;
}

uint64_t sub_100006404()
{
  return dispatch thunk of CustomStringConvertible.description.getter(&type metadata for UInt32, &protocol witness table for UInt32);
}

uint64_t sub_100006444(uint64_t a1, char a2, unsigned __int8 a3)
{
  if ((a2 & 1) != 0)
    return 0;
  else
    return ((uint64_t (*)(_QWORD, _QWORD, uint64_t))((char *)&loc_100006478 + 4 * byte_100060A71[a3]))(0, 0, 255);
}

BOOL sub_1000064A0@<W0>(uint64_t a1@<X8>)
{
  return a1 == 1;
}

uint64_t sub_1000064B4@<X0>(unint64_t a1@<X8>)
{
  if (a1 >= 0xFF)
    return 255;
  else
    return a1;
}

uint64_t sub_1000064CC@<X0>(unint64_t a1@<X8>)
{
  if (a1 >= 0xFFFF)
    return 0xFFFFLL;
  else
    return a1;
}

uint64_t sub_1000064E4@<X0>(unint64_t a1@<X8>)
{
  if (a1 >= 0xFFFFFFFF)
    return 0xFFFFFFFFLL;
  else
    return a1;
}

uint64_t sub_1000064FC@<X0>(uint64_t a1@<X8>)
{
  return a1;
}

double sub_10000650C@<D0>(unint64_t a1@<X8>)
{
  return (double)a1;
}

uint64_t sub_100006520()
{
  return dispatch thunk of CustomStringConvertible.description.getter(&type metadata for UInt64, &protocol witness table for UInt64);
}

uint64_t sub_100006560(uint64_t a1, char a2)
{
  if ((a1 & 0x100000000) == 0)
    __asm { BR              X11 }
  return 0;
}

void sub_1000065FC(__n128 a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  Swift::String v13;
  Swift::String v14;
  Swift::String v15;
  Swift::String v16;

  sub_100009D5C((uint64_t)&a12, a1);
  if ((a13 & 1) != 0)
  {
    _StringGuts.grow(_:)(80);
    v13._countAndFlagsBits = 0x74616F6C46;
    v13._object = (void *)0xE500000000000000;
    String.append(_:)(v13);
    v14._object = (void *)0x8000000100067C20;
    v14._countAndFlagsBits = 0xD00000000000001ELL;
    String.append(_:)(v14);
    v15._countAndFlagsBits = 7630409;
    v15._object = (void *)0xE300000000000000;
    String.append(_:)(v15);
    v16._countAndFlagsBits = 0xD00000000000002ELL;
    v16._object = (void *)0x8000000100067C40;
    String.append(_:)(v16);
    _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0, 0xE000000000000000, "Swift/Integers.swift", 20, 2, 3071, 0);
    __break(1u);
  }
  JUMPOUT(0x1000065ECLL);
}

void sub_10000662C()
{
  JUMPOUT(0x1000065ECLL);
}

void sub_100006640()
{
  JUMPOUT(0x1000065ECLL);
}

void sub_100006654(__n128 a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  Swift::String v13;
  Swift::String v14;
  Swift::String v15;
  Swift::String v16;

  sub_100009D5C((uint64_t)&a12, a1);
  if ((a13 & 1) != 0)
  {
    _StringGuts.grow(_:)(80);
    v13._countAndFlagsBits = 0x74616F6C46;
    v13._object = (void *)0xE500000000000000;
    String.append(_:)(v13);
    v14._object = (void *)0x8000000100067C20;
    v14._countAndFlagsBits = 0xD00000000000001ELL;
    String.append(_:)(v14);
    v15._countAndFlagsBits = 7630409;
    v15._object = (void *)0xE300000000000000;
    String.append(_:)(v15);
    v16._countAndFlagsBits = 0xD00000000000002ELL;
    v16._object = (void *)0x8000000100067C40;
    String.append(_:)(v16);
    _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0, 0xE000000000000000, "Swift/Integers.swift", 20, 2, 3071, 0);
    __break(1u);
  }
  JUMPOUT(0x1000065ECLL);
}

void sub_100006684(__n128 a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  Swift::String v13;
  Swift::String v14;
  Swift::String v15;
  Swift::String v16;

  sub_100009D5C((uint64_t)&a12, a1);
  if ((a13 & 1) != 0)
  {
    _StringGuts.grow(_:)(80);
    v13._countAndFlagsBits = 0x74616F6C46;
    v13._object = (void *)0xE500000000000000;
    String.append(_:)(v13);
    v14._object = (void *)0x8000000100067C20;
    v14._countAndFlagsBits = 0xD00000000000001ELL;
    String.append(_:)(v14);
    v15._countAndFlagsBits = 7630409;
    v15._object = (void *)0xE300000000000000;
    String.append(_:)(v15);
    v16._countAndFlagsBits = 0xD00000000000002ELL;
    v16._object = (void *)0x8000000100067C40;
    String.append(_:)(v16);
    _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0, 0xE000000000000000, "Swift/Integers.swift", 20, 2, 3071, 0);
    __break(1u);
  }
  JUMPOUT(0x1000065ECLL);
}

void sub_1000066B4(__n128 a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  Swift::String v13;
  Swift::String v14;
  Swift::String v15;
  Swift::String v16;

  sub_100009D5C((uint64_t)&a12, a1);
  if ((a13 & 1) != 0)
  {
    _StringGuts.grow(_:)(80);
    v13._countAndFlagsBits = 0x74616F6C46;
    v13._object = (void *)0xE500000000000000;
    String.append(_:)(v13);
    v14._object = (void *)0x8000000100067C20;
    v14._countAndFlagsBits = 0xD00000000000001ELL;
    String.append(_:)(v14);
    v15._countAndFlagsBits = 7630409;
    v15._object = (void *)0xE300000000000000;
    String.append(_:)(v15);
    v16._countAndFlagsBits = 0xD00000000000002ELL;
    v16._object = (void *)0x8000000100067C40;
    String.append(_:)(v16);
    _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0, 0xE000000000000000, "Swift/Integers.swift", 20, 2, 3071, 0);
    __break(1u);
  }
  JUMPOUT(0x1000065ECLL);
}

void sub_1000066D8(int a1@<W8>, uint64_t a2, int a3, int a4, uint64_t a5, unint64_t a6)
{
  a5 = 0;
  a6 = 0xE000000000000000;
  a4 = a1;
  _print_unlocked<A, B>(_:_:)(&a4, &a5, &type metadata for Float, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
  JUMPOUT(0x1000065ECLL);
}

uint64_t sub_1000067D8(uint64_t a1, char a2, char a3)
{
  if ((a2 & 1) == 0)
    __asm { BR              X11 }
  return 0;
}

void sub_100006878(__n128 a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  Swift::String v15;
  Swift::String v16;
  Swift::String v17;
  Swift::String v18;

  sub_100009BD8((uint64_t)&a14, a1);
  if ((a15 & 1) != 0)
  {
    _StringGuts.grow(_:)(80);
    v15._countAndFlagsBits = 0x656C62756F44;
    v15._object = (void *)0xE600000000000000;
    String.append(_:)(v15);
    v16._object = (void *)0x8000000100067C20;
    v16._countAndFlagsBits = 0xD00000000000001ELL;
    String.append(_:)(v16);
    v17._countAndFlagsBits = 7630409;
    v17._object = (void *)0xE300000000000000;
    String.append(_:)(v17);
    v18._countAndFlagsBits = 0xD00000000000002ELL;
    v18._object = (void *)0x8000000100067C40;
    String.append(_:)(v18);
    _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0, 0xE000000000000000, "Swift/Integers.swift", 20, 2, 3071, 0);
    __break(1u);
  }
  JUMPOUT(0x100006868);
}

void sub_1000068A8()
{
  JUMPOUT(0x100006868);
}

void sub_1000068B8()
{
  JUMPOUT(0x100006868);
}

void sub_1000068CC(__n128 a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  Swift::String v15;
  Swift::String v16;
  Swift::String v17;
  Swift::String v18;

  sub_100009BD8((uint64_t)&a14, a1);
  if ((a15 & 1) != 0)
  {
    _StringGuts.grow(_:)(80);
    v15._countAndFlagsBits = 0x656C62756F44;
    v15._object = (void *)0xE600000000000000;
    String.append(_:)(v15);
    v16._object = (void *)0x8000000100067C20;
    v16._countAndFlagsBits = 0xD00000000000001ELL;
    String.append(_:)(v16);
    v17._countAndFlagsBits = 7630409;
    v17._object = (void *)0xE300000000000000;
    String.append(_:)(v17);
    v18._countAndFlagsBits = 0xD00000000000002ELL;
    v18._object = (void *)0x8000000100067C40;
    String.append(_:)(v18);
    _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0, 0xE000000000000000, "Swift/Integers.swift", 20, 2, 3071, 0);
    __break(1u);
  }
  JUMPOUT(0x100006868);
}

void sub_1000068FC(__n128 a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  Swift::String v15;
  Swift::String v16;
  Swift::String v17;
  Swift::String v18;

  sub_100009BD8((uint64_t)&a14, a1);
  if ((a15 & 1) != 0)
  {
    _StringGuts.grow(_:)(80);
    v15._countAndFlagsBits = 0x656C62756F44;
    v15._object = (void *)0xE600000000000000;
    String.append(_:)(v15);
    v16._object = (void *)0x8000000100067C20;
    v16._countAndFlagsBits = 0xD00000000000001ELL;
    String.append(_:)(v16);
    v17._countAndFlagsBits = 7630409;
    v17._object = (void *)0xE300000000000000;
    String.append(_:)(v17);
    v18._countAndFlagsBits = 0xD00000000000002ELL;
    v18._object = (void *)0x8000000100067C40;
    String.append(_:)(v18);
    _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0, 0xE000000000000000, "Swift/Integers.swift", 20, 2, 3071, 0);
    __break(1u);
  }
  JUMPOUT(0x100006868);
}

void sub_10000692C(__n128 a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  Swift::String v15;
  Swift::String v16;
  Swift::String v17;
  Swift::String v18;

  sub_100009BD8((uint64_t)&a14, a1);
  if ((a15 & 1) != 0)
  {
    _StringGuts.grow(_:)(80);
    v15._countAndFlagsBits = 0x656C62756F44;
    v15._object = (void *)0xE600000000000000;
    String.append(_:)(v15);
    v16._object = (void *)0x8000000100067C20;
    v16._countAndFlagsBits = 0xD00000000000001ELL;
    String.append(_:)(v16);
    v17._countAndFlagsBits = 7630409;
    v17._object = (void *)0xE300000000000000;
    String.append(_:)(v17);
    v18._countAndFlagsBits = 0xD00000000000002ELL;
    v18._object = (void *)0x8000000100067C40;
    String.append(_:)(v18);
    _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0, 0xE000000000000000, "Swift/Integers.swift", 20, 2, 3071, 0);
    __break(1u);
  }
  JUMPOUT(0x100006868);
}

void sub_100006950(uint64_t a1@<X8>, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unint64_t a7)
{
  a6 = 0;
  a7 = 0xE000000000000000;
  a5 = a1;
  _print_unlocked<A, B>(_:_:)(&a5, &a6, &type metadata for Double, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
  JUMPOUT(0x100006868);
}

void CharacteristicKind.Value.description.getter(uint64_t a1, uint64_t a2, char a3)
{
  __asm { BR              X10 }
}

uint64_t sub_100006A9C()
{
  char v0;
  uint64_t v1;
  unint64_t v2;
  unint64_t v3;
  Swift::String v4;

  if ((v0 & 1) != 0)
    v1 = 1702195828;
  else
    v1 = 0x65736C6166;
  if ((v0 & 1) != 0)
    v2 = 0xE400000000000000;
  else
    v2 = 0xE500000000000000;
  v3 = v2;
  String.append(_:)(*(Swift::String *)&v1);
  swift_bridgeObjectRelease(v2);
  v4._countAndFlagsBits = 41;
  v4._object = (void *)0xE100000000000000;
  String.append(_:)(v4);
  return 0x286C6F6F622ELL;
}

void sub_100006C2C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, unint64_t a12)
{
  double v12;
  Swift::String v13;

  a11 = 0;
  a12 = 0xE000000000000000;
  v13._countAndFlagsBits = 0x2874616F6C662ELL;
  v13._object = (void *)0xE700000000000000;
  String.append(_:)(v13);
  Double.write<A>(to:)(&a11, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation, v12);
  JUMPOUT(0x100006C00);
}

void sub_100006C74(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v12;
  void *v13;
  Swift::String v14;

  v14._countAndFlagsBits = v12;
  v14._object = v13;
  String.append(_:)(v14);
  JUMPOUT(0x100006C00);
}

void sub_100006CA0()
{
  uint64_t v0;
  unint64_t v1;
  Swift::String v2;
  void *object;
  Swift::String v4;

  sub_10000E47C(v0, v1, 9);
  v2._countAndFlagsBits = Data.description.getter(v0, v1);
  object = v2._object;
  String.append(_:)(v2);
  swift_bridgeObjectRelease(object);
  v4._countAndFlagsBits = 41;
  v4._object = (void *)0xE100000000000000;
  String.append(_:)(v4);
  sub_10000E824(v0, v1, 9);
  JUMPOUT(0x100006C10);
}

void CharacteristicKind.Value.hash(into:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  __asm { BR              X10 }
}

void sub_100006DA8()
{
  char v0;

  Hasher._combine(_:)(1uLL);
  Hasher._combine(_:)(v0 & 1);
}

uint64_t static SecurityIntentAccessory.supportsSecureCoding.getter()
{
  return 1;
}

uint64_t sub_100006EF0()
{
  return 12383;
}

uint64_t sub_100006F00()
{
  return 0;
}

void sub_100006F0C(_BYTE *a1@<X8>)
{
  *a1 = 1;
}

uint64_t sub_100006F18(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10000EBA4();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100006F40(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10000EBA4();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100006F68(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_100006F94 + 4 * byte_100060AAA[a1]))(1819047278, 0xE400000000000000);
}

uint64_t sub_100006F94()
{
  return 1819242338;
}

uint64_t sub_100006FA0()
{
  return 0x38746E6975;
}

uint64_t sub_100006FB4()
{
  return 0x3631746E6975;
}

uint64_t sub_100006FC8()
{
  return 0x3233746E6975;
}

uint64_t sub_100006FDC()
{
  return 0x3436746E6975;
}

uint64_t sub_100006FF0()
{
  return 7630441;
}

uint64_t sub_100007000()
{
  return 0x3233746E69;
}

uint64_t sub_100007014()
{
  return 0x74616F6C66;
}

uint64_t sub_100007028()
{
  return 0x676E69727473;
}

uint64_t sub_10000703C()
{
  return 947285108;
}

uint64_t sub_100007048()
{
  return 1635017060;
}

uint64_t sub_10000705C()
{
  unsigned __int8 *v0;

  return sub_100006F68(*v0);
}

uint64_t sub_100007064@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_10000EC2C(a1, a2);
  *a3 = result;
  return result;
}

void sub_100007088(_BYTE *a1@<X8>)
{
  *a1 = 12;
}

uint64_t sub_100007094(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10000E874();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000070BC(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10000E874();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1000070E4(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10000E8B8();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10000710C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10000E8B8();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100007134(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10000E9C8();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10000715C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10000E9C8();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100007184(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10000EA0C();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000071AC(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10000EA0C();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1000071D4(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10000EA50();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000071FC(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10000EA50();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100007224()
{
  return 0;
}

uint64_t sub_100007230@<X0>(uint64_t a1@<X1>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = swift_bridgeObjectRelease(a1);
  *a2 = 1;
  return result;
}

uint64_t sub_10000725C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10000EBE8();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100007284(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10000EBE8();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1000072AC(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10000E984();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000072D4(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10000E984();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1000072FC(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10000E940();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100007324(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10000E940();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10000734C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10000EB1C();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100007374(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10000EB1C();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10000739C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10000EAD8();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000073C4(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10000EAD8();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1000073EC(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10000EA94();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100007414(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10000EA94();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10000743C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10000EB60();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100007464(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10000EB60();
  return CodingKey.debugDescription.getter(a1, v2);
}

void CharacteristicKind.Value.encode(to:)(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  _QWORD v23[5];
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;

  v56 = a4;
  v51 = a3;
  v52 = a2;
  v5 = sub_100003704(&qword_1000817E0);
  v49 = *(_QWORD *)(v5 - 8);
  v50 = v5;
  __chkstk_darwin();
  v48 = (char *)v23 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_100003704(&qword_1000817E8);
  v46 = *(_QWORD *)(v7 - 8);
  v47 = v7;
  __chkstk_darwin();
  v45 = (char *)v23 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v44 = sub_100003704(&qword_1000817F0);
  v23[1] = *(_QWORD *)(v44 - 8);
  __chkstk_darwin();
  v43 = (char *)v23 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_100003704(&qword_1000817F8);
  v41 = *(_QWORD *)(v10 - 8);
  v42 = v10;
  __chkstk_darwin();
  v40 = (char *)v23 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v39 = sub_100003704(&qword_100081800);
  v38 = *(_QWORD *)(v39 - 8);
  __chkstk_darwin();
  v37 = (char *)v23 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v36 = sub_100003704(&qword_100081808);
  v35 = *(_QWORD *)(v36 - 8);
  __chkstk_darwin();
  v34 = (char *)v23 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v33 = sub_100003704(&qword_100081810);
  v32 = *(_QWORD *)(v33 - 8);
  __chkstk_darwin();
  v31 = (char *)v23 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v30 = sub_100003704(&qword_100081818);
  v29 = *(_QWORD *)(v30 - 8);
  __chkstk_darwin();
  v28 = (char *)v23 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = sub_100003704(&qword_100081820);
  v26 = *(_QWORD *)(v27 - 8);
  __chkstk_darwin();
  v25 = (char *)v23 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = sub_100003704(&qword_100081828);
  v23[4] = *(_QWORD *)(v24 - 8);
  __chkstk_darwin();
  v23[3] = (char *)v23 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23[2] = *(_QWORD *)(sub_100003704(&qword_100081830) - 8);
  __chkstk_darwin();
  sub_100003704(&qword_100081838);
  __chkstk_darwin();
  v55 = sub_100003704(&qword_100081840);
  v53 = *(_QWORD *)(v55 - 8);
  __chkstk_darwin();
  v19 = (char *)v23 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = a1[3];
  v20 = a1[4];
  sub_10000E850(a1, v21);
  v22 = sub_10000E874();
  v54 = v19;
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for CharacteristicKind.Value.CodingKeys, &type metadata for CharacteristicKind.Value.CodingKeys, v22, v21, v20);
  __asm { BR              X10 }
}

uint64_t sub_1000078BC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = *(_QWORD *)(v2 - 152) & 1;
  *(_BYTE *)(v2 - 104) = 1;
  v4 = sub_10000EBA4();
  v6 = *(_QWORD *)(v2 - 136);
  v5 = *(_QWORD *)(v2 - 128);
  KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)(&type metadata for CharacteristicKind.Value.BoolCodingKeys, v2 - 104, v5, &type metadata for CharacteristicKind.Value.BoolCodingKeys, v4);
  ((void (*)(uint64_t))KeyedEncodingContainer.encode(_:forKey:))(v3);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 400) + 8))(v1, v0);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 144) + 8))(v6, v5);
}

void sub_100007CBC()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_BYTE *)(v0 - 104) = 10;
  v2 = *(_QWORD *)(v0 - 160);
  v1 = *(_QWORD *)(v0 - 152);
  sub_10000E4A8(v1, v2);
  v3 = sub_10000E940();
  v4 = *(_QWORD *)(v0 - 208);
  v6 = *(_QWORD *)(v0 - 136);
  v5 = *(_QWORD *)(v0 - 128);
  KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)(&type metadata for CharacteristicKind.Value.Tlv8CodingKeys, v0 - 104, v5, &type metadata for CharacteristicKind.Value.Tlv8CodingKeys, v3);
  *(_QWORD *)(v0 - 104) = v1;
  *(_QWORD *)(v0 - 96) = v2;
  sub_10000E8FC();
  v7 = *(_QWORD *)(v0 - 192);
  KeyedEncodingContainer.encode<A>(_:forKey:)(v0 - 104);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v0 - 200) + 8))(v4, v7);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v0 - 144) + 8))(v6, v5);
  sub_10000E824(v1, v2, 9);
  JUMPOUT(0x100007C94);
}

void sub_100007D70()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_BYTE *)(v0 - 104) = 11;
  v2 = *(_QWORD *)(v0 - 160);
  v1 = *(_QWORD *)(v0 - 152);
  sub_10000E4A8(v1, v2);
  v3 = sub_10000E8B8();
  v4 = *(_QWORD *)(v0 - 184);
  v6 = *(_QWORD *)(v0 - 136);
  v5 = *(_QWORD *)(v0 - 128);
  KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)(&type metadata for CharacteristicKind.Value.DataCodingKeys, v0 - 104, v5, &type metadata for CharacteristicKind.Value.DataCodingKeys, v3);
  *(_QWORD *)(v0 - 104) = v1;
  *(_QWORD *)(v0 - 96) = v2;
  sub_10000E8FC();
  v7 = *(_QWORD *)(v0 - 168);
  KeyedEncodingContainer.encode<A>(_:forKey:)(v0 - 104);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v0 - 176) + 8))(v4, v7);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v0 - 144) + 8))(v6, v5);
  sub_10000E824(v1, v2, 10);
  JUMPOUT(0x100007C94);
}

void sub_100007E24()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_BYTE *)(v3 - 104) = 0;
  v4 = sub_10000EBE8();
  v6 = *(_QWORD *)(v3 - 136);
  v5 = *(_QWORD *)(v3 - 128);
  KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)(&type metadata for CharacteristicKind.Value.NullCodingKeys, v3 - 104, v5, &type metadata for CharacteristicKind.Value.NullCodingKeys, v4);
  (*(void (**)(uint64_t, uint64_t))(v0 + 8))(v1, v2);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 144) + 8))(v6, v5);
  JUMPOUT(0x100007C94);
}

Swift::Int CharacteristicKind.Value.hashValue.getter(uint64_t a1, uint64_t a2, char a3)
{
  _QWORD v7[9];

  Hasher.init(_seed:)(v7, 0);
  CharacteristicKind.Value.hash(into:)((uint64_t)v7, a1, a2, a3);
  return Hasher._finalize()();
}

uint64_t CharacteristicKind.Value.init(from:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t result;
  uint64_t v3;

  result = sub_10000F07C(a1);
  if (v1)
    return v3;
  return result;
}

void sub_100007EF8()
{
  uint64_t v0;

  CharacteristicKind.Value.description.getter(*(_QWORD *)v0, *(_QWORD *)(v0 + 8), *(_BYTE *)(v0 + 16));
}

void sub_100007F04(uint64_t a1)
{
  _s20HomeWidgetLockScreen18CharacteristicKindO5ValueO21__derived_enum_equalsySbAE_AEtFZ_0(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
}

Swift::Int sub_100007F20()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char v3;
  _QWORD v5[9];

  v1 = *(_QWORD *)v0;
  v2 = *(_QWORD *)(v0 + 8);
  v3 = *(_BYTE *)(v0 + 16);
  Hasher.init(_seed:)(v5, 0);
  CharacteristicKind.Value.hash(into:)((uint64_t)v5, v1, v2, v3);
  return Hasher._finalize()();
}

void sub_100007F78(uint64_t a1)
{
  uint64_t v1;

  CharacteristicKind.Value.hash(into:)(a1, *(_QWORD *)v1, *(_QWORD *)(v1 + 8), *(_BYTE *)(v1 + 16));
}

Swift::Int sub_100007F84(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  _QWORD v6[9];

  v2 = *(_QWORD *)v1;
  v3 = *(_QWORD *)(v1 + 8);
  v4 = *(_BYTE *)(v1 + 16);
  Hasher.init(_seed:)(v6, a1);
  CharacteristicKind.Value.hash(into:)((uint64_t)v6, v2, v3, v4);
  return Hasher._finalize()();
}

uint64_t sub_100007FD8@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  char v4;

  v2 = *(_QWORD *)v1;
  v3 = *(_QWORD *)(v1 + 8);
  *(_QWORD *)a1 = *(_QWORD *)v1;
  *(_QWORD *)(a1 + 8) = v3;
  v4 = *(_BYTE *)(v1 + 16);
  *(_BYTE *)(a1 + 16) = v4;
  return sub_10000E47C(v2, v3, v4);
}

uint64_t sub_100007FEC@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v5;
  char v6;

  result = sub_10000F07C(a1);
  if (!v2)
  {
    *(_QWORD *)a2 = result;
    *(_QWORD *)(a2 + 8) = v5;
    *(_BYTE *)(a2 + 16) = v6;
  }
  return result;
}

void sub_100008018(_QWORD *a1)
{
  uint64_t v1;

  CharacteristicKind.Value.encode(to:)(a1, *(_QWORD *)v1, *(_QWORD *)(v1 + 8), *(unsigned __int8 *)(v1 + 16));
}

uint64_t sub_100008034()
{
  _BYTE *v0;
  uint64_t v1;

  v1 = 0x566D756D6978616DLL;
  if (*v0 != 1)
    v1 = 0x756C615670657473;
  if (*v0)
    return v1;
  else
    return 0x566D756D696E696DLL;
}

uint64_t sub_100008098@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_10000FFD8(a1, a2);
  *a3 = result;
  return result;
}

void sub_1000080BC(_BYTE *a1@<X8>)
{
  *a1 = 3;
}

uint64_t sub_1000080C8(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10000FF94();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000080F0(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10000FF94();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t CharacteristicKind.Constraints.MinMaxStepValues.encode(to:)(_QWORD *a1, float a2, float a3, float a4)
{
  uint64_t v4;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v17;
  char v18;
  char v19;
  char v20;

  v9 = sub_100003704(&qword_1000818B8);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin();
  v12 = (char *)&v17 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = a1[3];
  v14 = a1[4];
  sub_10000E850(a1, v13);
  v15 = sub_10000FF94();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for CharacteristicKind.Constraints.MinMaxStepValues.CodingKeys, &type metadata for CharacteristicKind.Constraints.MinMaxStepValues.CodingKeys, v15, v13, v14);
  v20 = 0;
  KeyedEncodingContainer.encode(_:forKey:)(&v20, v9, a2);
  if (!v4)
  {
    v19 = 1;
    KeyedEncodingContainer.encode(_:forKey:)(&v19, v9, a3);
    v18 = 2;
    KeyedEncodingContainer.encode(_:forKey:)(&v18, v9, a4);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v12, v9);
}

float CharacteristicKind.Constraints.MinMaxStepValues.init(from:)(_QWORD *a1)
{
  return sub_100010164(a1);
}

void sub_100008290(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  float v4;
  int v5;
  int v6;

  v4 = sub_100010164(a1);
  if (!v2)
  {
    *(float *)a2 = v4;
    *(_DWORD *)(a2 + 4) = v5;
    *(_DWORD *)(a2 + 8) = v6;
  }
}

uint64_t sub_1000082BC(_QWORD *a1)
{
  float *v1;

  return CharacteristicKind.Constraints.MinMaxStepValues.encode(to:)(a1, *v1, v1[1], v1[2]);
}

unint64_t sub_1000082D8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t *v4;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v9;
  unint64_t result;
  char v11;
  unint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v4 = v3;
  if (a2)
  {
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
    v17 = *v3;
    *v3 = 0x8000000000000000;
    sub_10000C44C(a1, a2, a3, isUniquelyReferenced_nonNull_native);
    v9 = *v3;
    *v3 = v17;
  }
  else
  {
    result = sub_10000A62C(a3);
    if ((v11 & 1) == 0)
      return result;
    v12 = result;
    v13 = swift_isUniquelyReferenced_nonNull_native(*v3);
    v14 = *v3;
    v18 = *v4;
    *v4 = 0x8000000000000000;
    if (!v13)
    {
      sub_10000AE10();
      v14 = v18;
    }
    v15 = *(_QWORD *)(*(_QWORD *)(v14 + 56) + 16 * v12 + 8);
    sub_10000C2B8(v12, v14);
    v16 = *v4;
    *v4 = v14;
    swift_bridgeObjectRelease(v15);
    v9 = v16;
  }
  return swift_bridgeObjectRelease(v9);
}

unsigned __int8 *sub_1000083CC(unsigned __int8 *result, uint64_t *a2, uint64_t a3)
{
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned __int8 *v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  unsigned __int8 *v13;
  unsigned int v14;
  uint64_t v15;
  unint64_t v16;
  char v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned __int8 *v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  unsigned __int8 *v26;
  unsigned int v27;
  uint64_t v28;
  char v29;
  char v30;
  _QWORD v31[2];

  v4 = *a2;
  v3 = a2[1];
  v5 = HIBYTE(v3) & 0xF;
  v6 = *a2 & 0xFFFFFFFFFFFFLL;
  if ((v3 & 0x2000000000000000) != 0)
    v7 = HIBYTE(v3) & 0xF;
  else
    v7 = v6;
  if (!v7)
    return result;
  if ((v3 & 0x1000000000000000) != 0)
  {
    swift_bridgeObjectRetain(v3);
    v11 = (uint64_t)sub_10000C1D4(v4, v3, 10);
    v30 = v29;
    result = (unsigned __int8 *)swift_bridgeObjectRelease(v3);
    if ((v30 & 1) != 0)
      return result;
    goto LABEL_36;
  }
  if ((v3 & 0x2000000000000000) != 0)
  {
    v31[0] = v4;
    v31[1] = v3 & 0xFFFFFFFFFFFFFFLL;
    if (v4 == 43)
    {
      if (!v5)
        goto LABEL_65;
      if (v5 == 1)
        goto LABEL_63;
      if ((BYTE1(v4) - 48) > 9u)
        goto LABEL_32;
      v11 = (BYTE1(v4) - 48);
      if (v5 != 2)
      {
        if ((BYTE2(v4) - 48) > 9u)
          goto LABEL_32;
        v11 = 10 * (BYTE1(v4) - 48) + (BYTE2(v4) - 48);
        v12 = v5 - 3;
        if (v5 != 3)
        {
          v13 = (unsigned __int8 *)v31 + 3;
          while (1)
          {
            v14 = *v13 - 48;
            if (v14 > 9)
              goto LABEL_32;
            v15 = 10 * v11;
            if ((unsigned __int128)(v11 * (__int128)10) >> 64 != (10 * v11) >> 63)
              goto LABEL_32;
            v11 = v15 + v14;
            if (__OFADD__(v15, v14))
              goto LABEL_32;
            LOBYTE(v5) = 0;
            ++v13;
            if (!--v12)
              goto LABEL_35;
          }
        }
      }
    }
    else
    {
      if (v4 == 45)
      {
        if (v5)
        {
          if (v5 != 1)
          {
            if ((BYTE1(v4) - 48) > 9u)
              goto LABEL_32;
            if (v5 == 2)
            {
              LOBYTE(v5) = 0;
              v11 = -(uint64_t)(BYTE1(v4) - 48);
              goto LABEL_35;
            }
            if ((BYTE2(v4) - 48) > 9u)
              goto LABEL_32;
            v11 = -10 * (BYTE1(v4) - 48) - (BYTE2(v4) - 48);
            v25 = v5 - 3;
            if (v5 != 3)
            {
              v26 = (unsigned __int8 *)v31 + 3;
              while (1)
              {
                v27 = *v26 - 48;
                if (v27 > 9)
                  goto LABEL_32;
                v28 = 10 * v11;
                if ((unsigned __int128)(v11 * (__int128)10) >> 64 != (10 * v11) >> 63)
                  goto LABEL_32;
                v11 = v28 - v27;
                if (__OFSUB__(v28, v27))
                  goto LABEL_32;
                LOBYTE(v5) = 0;
                ++v26;
                if (!--v25)
                  goto LABEL_35;
              }
            }
            goto LABEL_34;
          }
LABEL_63:
          v11 = 0;
LABEL_35:
          if ((v5 & 1) != 0)
            return result;
          goto LABEL_36;
        }
        __break(1u);
LABEL_65:
        __break(1u);
        return result;
      }
      if (!v5 || (v4 - 48) > 9u)
      {
LABEL_32:
        v11 = 0;
        LOBYTE(v5) = 1;
        goto LABEL_35;
      }
      v11 = (v4 - 48);
      if (v5 != 1)
      {
        if ((BYTE1(v4) - 48) > 9u)
          goto LABEL_32;
        v11 = 10 * (v4 - 48) + (BYTE1(v4) - 48);
        v21 = v5 - 2;
        if (v5 != 2)
        {
          v22 = (unsigned __int8 *)v31 + 2;
          while (1)
          {
            v23 = *v22 - 48;
            if (v23 > 9)
              goto LABEL_32;
            v24 = 10 * v11;
            if ((unsigned __int128)(v11 * (__int128)10) >> 64 != (10 * v11) >> 63)
              goto LABEL_32;
            v11 = v24 + v23;
            if (__OFADD__(v24, v23))
              goto LABEL_32;
            LOBYTE(v5) = 0;
            ++v22;
            if (!--v21)
              goto LABEL_35;
          }
        }
      }
    }
LABEL_34:
    LOBYTE(v5) = 0;
    goto LABEL_35;
  }
  if ((v4 & 0x1000000000000000) != 0)
    v9 = (unsigned __int8 *)((v3 & 0xFFFFFFFFFFFFFFFLL) + 32);
  else
    v9 = (unsigned __int8 *)_StringObject.sharedUTF8.getter(v4, v3);
  result = sub_10000C5D0(v9, v6, 10);
  if ((v10 & 1) != 0)
    return result;
  v11 = (uint64_t)result;
LABEL_36:
  if (*(_QWORD *)(a3 + 16))
  {
    swift_bridgeObjectRetain(v3);
    v16 = sub_10000A5C8(v4, v3);
    if ((v17 & 1) != 0)
    {
      v18 = (uint64_t *)(*(_QWORD *)(a3 + 56) + 16 * v16);
      v19 = *v18;
      v20 = v18[1];
      swift_bridgeObjectRetain(v20);
    }
    else
    {
      v19 = 0;
      v20 = 0;
    }
    swift_bridgeObjectRelease(v3);
  }
  else
  {
    v19 = 0;
    v20 = 0;
  }
  return (unsigned __int8 *)sub_1000082D8(v19, v20, v11);
}

BOOL sub_100008728(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

Swift::Int sub_10000873C()
{
  unsigned __int8 *v0;
  Swift::UInt v1;
  _QWORD v3[9];

  v1 = *v0;
  Hasher.init(_seed:)(v3, 0);
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void sub_100008780()
{
  unsigned __int8 *v0;

  Hasher._combine(_:)(*v0);
}

Swift::Int sub_1000087A8(uint64_t a1)
{
  unsigned __int8 *v1;
  Swift::UInt v2;
  _QWORD v4[9];

  v2 = *v1;
  Hasher.init(_seed:)(v4, a1);
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

uint64_t sub_1000087E8()
{
  _BYTE *v0;
  unint64_t v1;

  v1 = 0x74694264696C6176;
  if (*v0 != 1)
    v1 = 0xD000000000000010;
  if (*v0)
    return v1;
  else
    return 0x6C615664696C6176;
}

uint64_t sub_100008854@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_10001043C(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_100008878(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000102E8();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000088A0(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000102E8();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1000088C8(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10001032C();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000088F0(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10001032C();
  return CodingKey.debugDescription.getter(a1, v2);
}

void sub_100008918()
{
  Hasher._combine(_:)(0);
}

uint64_t sub_10000893C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000103B4();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100008964(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000103B4();
  return CodingKey.debugDescription.getter(a1, v2);
}

Swift::Int sub_10000898C()
{
  _QWORD v1[9];

  Hasher.init(_seed:)(v1, 0);
  Hasher._combine(_:)(0);
  return Hasher._finalize()();
}

Swift::Int sub_1000089CC(uint64_t a1)
{
  _QWORD v2[9];

  Hasher.init(_seed:)(v2, a1);
  Hasher._combine(_:)(0);
  return Hasher._finalize()();
}

uint64_t sub_100008A08@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  char v6;
  uint64_t result;
  char v8;

  if (a1 == 12383 && a2 == 0xE200000000000000)
  {
    result = swift_bridgeObjectRelease(0xE200000000000000);
    v8 = 0;
  }
  else
  {
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)(12383, 0xE200000000000000, a1, a2, 0);
    result = swift_bridgeObjectRelease(a2);
    v8 = v6 ^ 1;
  }
  *a3 = v8 & 1;
  return result;
}

uint64_t sub_100008A84(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000103F8();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100008AAC(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000103F8();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t CharacteristicKind.Constraints.encode(to:)(_QWORD *a1, unint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  void (*v22)(char *, uint64_t);
  char *v23;
  unint64_t v24;
  uint64_t v25;
  unsigned int v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  int v40;

  v36 = a2;
  v5 = sub_100003704(&qword_1000818C8);
  v34 = *(_QWORD *)(v5 - 8);
  v35 = v5;
  __chkstk_darwin();
  v7 = (char *)&v31 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_100003704(&qword_1000818D0);
  v32 = *(_QWORD *)(v8 - 8);
  v33 = v8;
  __chkstk_darwin();
  v10 = (char *)&v31 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_100003704(&qword_1000818D8);
  v31 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin();
  v13 = (char *)&v31 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_100003704(&qword_1000818E0);
  v37 = *(_QWORD *)(v14 - 8);
  v38 = v14;
  __chkstk_darwin();
  v16 = (char *)&v31 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = a1[3];
  v17 = a1[4];
  sub_10000E850(a1, v18);
  v19 = sub_1000102E8();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for CharacteristicKind.Constraints.CodingKeys, &type metadata for CharacteristicKind.Constraints.CodingKeys, v19, v18, v17);
  if (BYTE4(a3))
  {
    if (BYTE4(a3) != 1)
    {
      v26 = v36;
      v27 = HIDWORD(v36);
      LOBYTE(v39) = 2;
      v28 = sub_10001032C();
      v21 = v38;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)(&type metadata for CharacteristicKind.Constraints.MinMaxStepValuesCodingKeys, &v39, v38, &type metadata for CharacteristicKind.Constraints.MinMaxStepValuesCodingKeys, v28);
      v39 = __PAIR64__(v27, v26);
      v40 = a3;
      sub_100010370();
      v29 = v35;
      KeyedEncodingContainer.encode<A>(_:forKey:)(&v39);
      v22 = *(void (**)(char *, uint64_t))(v34 + 8);
      v23 = v7;
      v25 = v29;
      goto LABEL_7;
    }
    LOBYTE(v39) = 1;
    v20 = sub_1000103B4();
    v21 = v38;
    KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)(&type metadata for CharacteristicKind.Constraints.ValidBitsCodingKeys, &v39, v38, &type metadata for CharacteristicKind.Constraints.ValidBitsCodingKeys, v20);
    v39 = v36;
    sub_100003704(&qword_100081908);
    sub_100013154(&qword_100081910, (uint64_t)&protocol witness table for Int, (uint64_t)&protocol witness table for String, (uint64_t)&protocol conformance descriptor for <> [A : B]);
    v11 = v33;
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v39);
    v22 = *(void (**)(char *, uint64_t))(v32 + 8);
    v23 = v10;
  }
  else
  {
    LOBYTE(v39) = 0;
    v24 = sub_1000103F8();
    v21 = v38;
    KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)(&type metadata for CharacteristicKind.Constraints.ValidValuesCodingKeys, &v39, v38, &type metadata for CharacteristicKind.Constraints.ValidValuesCodingKeys, v24);
    v39 = v36;
    sub_100003704(&qword_100081908);
    sub_100013154(&qword_100081910, (uint64_t)&protocol witness table for Int, (uint64_t)&protocol witness table for String, (uint64_t)&protocol conformance descriptor for <> [A : B]);
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v39);
    v22 = *(void (**)(char *, uint64_t))(v31 + 8);
    v23 = v13;
  }
  v25 = v11;
LABEL_7:
  v22(v23, v25);
  return (*(uint64_t (**)(char *, uint64_t))(v37 + 8))(v16, v21);
}

uint64_t CharacteristicKind.Constraints.init(from:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t result;
  uint64_t v3;

  result = sub_1000105B0(a1);
  if (v1)
    return v3 & 0xFFFFFFFFFFLL;
  return result;
}

uint64_t sub_100008E60@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v5;

  result = sub_1000105B0(a1);
  if (!v2)
  {
    *(_QWORD *)a2 = result;
    *(_DWORD *)(a2 + 8) = v5;
    *(_BYTE *)(a2 + 12) = BYTE4(v5);
  }
  return result;
}

uint64_t sub_100008E94(_QWORD *a1)
{
  uint64_t v1;

  return CharacteristicKind.Constraints.encode(to:)(a1, *(_QWORD *)v1, *(unsigned int *)(v1 + 8) | ((unint64_t)*(unsigned __int8 *)(v1 + 12) << 32));
}

void *CharacteristicKind.Permissions.securedRead.unsafeMutableAddressor()
{
  return &static CharacteristicKind.Permissions.securedRead;
}

void *CharacteristicKind.Permissions.securedWrite.unsafeMutableAddressor()
{
  return &static CharacteristicKind.Permissions.securedWrite;
}

uint64_t static CharacteristicKind.Permissions.securedWrite.getter()
{
  return 2;
}

void sub_100008EDC()
{
  static CharacteristicKind.Permissions.allPermissions = (uint64_t)&off_10007AE60;
}

uint64_t *CharacteristicKind.Permissions.allPermissions.unsafeMutableAddressor()
{
  if (qword_100081638 != -1)
    swift_once(&qword_100081638, sub_100008EDC);
  return &static CharacteristicKind.Permissions.allPermissions;
}

uint64_t static CharacteristicKind.Permissions.allPermissions.getter()
{
  return sub_100009108(&qword_100081638, &static CharacteristicKind.Permissions.allPermissions);
}

uint64_t sub_100008F54(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_100010C58();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_100008FB0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_100010C58();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

void sub_100008FFC(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

uint64_t sub_100009004(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return SetAlgebra.init<A>(_:)(a1, a4, a2, a5, a3);
}

uint64_t sub_10000901C@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t result;

  v4 = sub_10005BFF8();
  result = swift_bridgeObjectRelease(a1);
  *a2 = v4;
  return result;
}

void *CharacteristicKind.Properties.read.unsafeMutableAddressor()
{
  return &static CharacteristicKind.Properties.read;
}

void *CharacteristicKind.Properties.write.unsafeMutableAddressor()
{
  return &static CharacteristicKind.Properties.write;
}

void *CharacteristicKind.Properties.cnotify.unsafeMutableAddressor()
{
  return &static CharacteristicKind.Properties.cnotify;
}

uint64_t static CharacteristicKind.Properties.cnotify.getter()
{
  return 4;
}

void *CharacteristicKind.Properties.uncnotify.unsafeMutableAddressor()
{
  return &static CharacteristicKind.Properties.uncnotify;
}

uint64_t static CharacteristicKind.Properties.uncnotify.getter()
{
  return 8;
}

void sub_100009098()
{
  static CharacteristicKind.Properties.allProperties = (uint64_t)&off_10007AE90;
}

uint64_t *CharacteristicKind.Properties.allProperties.unsafeMutableAddressor()
{
  if (qword_100081640 != -1)
    swift_once(&qword_100081640, sub_100009098);
  return &static CharacteristicKind.Properties.allProperties;
}

uint64_t static CharacteristicKind.Properties.allProperties.getter()
{
  return sub_100009108(&qword_100081640, &static CharacteristicKind.Properties.allProperties);
}

uint64_t sub_100009108(_QWORD *a1, _QWORD *a2)
{
  if (*a1 != -1)
    swift_once();
  return swift_bridgeObjectRetain(*a2);
}

_QWORD *sub_100009140@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  *a2 = *result;
  return result;
}

Swift::Int sub_10000914C()
{
  Swift::UInt *v0;
  Swift::UInt v1;
  _QWORD v3[9];

  v1 = *v0;
  Hasher.init(_seed:)(v3, 0);
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void sub_100009190()
{
  Swift::UInt *v0;

  Hasher._combine(_:)(*v0);
}

Swift::Int sub_1000091B8(uint64_t a1)
{
  Swift::UInt *v1;
  Swift::UInt v2;
  _QWORD v4[9];

  v2 = *v1;
  Hasher.init(_seed:)(v4, a1);
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

uint64_t sub_1000091F8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_100010DC0();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_100009254(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_100010DC0();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

_QWORD *sub_1000092A0@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v2;

  *a2 = *v2 | *result;
  return result;
}

_QWORD *sub_1000092B4@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v2;

  *a2 = *v2 & *result;
  return result;
}

_QWORD *sub_1000092C8@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v2;

  *a2 = *v2 ^ *result;
  return result;
}

BOOL sub_1000092DC(_QWORD *a1, uint64_t *a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;

  v3 = *a2;
  v4 = *v2 & *a2;
  if (v4 != *a2)
    *v2 |= v3;
  *a1 = v3;
  return v4 != v3;
}

_QWORD *sub_10000930C@<X0>(_QWORD *result@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v2;
  uint64_t v3;

  v3 = *v2 & *result;
  if (v3)
    *v2 &= ~*result;
  *(_QWORD *)a2 = v3;
  *(_BYTE *)(a2 + 8) = v3 == 0;
  return result;
}

uint64_t *sub_100009338@<X0>(uint64_t *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *result;
  v4 = *v2;
  *v2 |= *result;
  v5 = v4 & v3;
  *(_QWORD *)a2 = v5;
  *(_BYTE *)(a2 + 8) = v5 == 0;
  return result;
}

_QWORD *sub_10000935C(_QWORD *result)
{
  _QWORD *v1;

  *v1 |= *result;
  return result;
}

_QWORD *sub_100009370(_QWORD *result)
{
  _QWORD *v1;

  *v1 &= *result;
  return result;
}

_QWORD *sub_100009384(_QWORD *result)
{
  _QWORD *v1;

  *v1 ^= *result;
  return result;
}

_QWORD *sub_100009398@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v2;

  *a2 = *v2 & ~*result;
  return result;
}

BOOL sub_1000093AC(_QWORD *a1)
{
  _QWORD *v1;

  return (*v1 & ~*a1) == 0;
}

BOOL sub_1000093C0(_QWORD *a1)
{
  _QWORD *v1;

  return (*v1 & *a1) == 0;
}

BOOL sub_1000093D4(_QWORD *a1)
{
  _QWORD *v1;

  return (*a1 & ~*v1) == 0;
}

BOOL sub_1000093E8()
{
  _QWORD *v0;

  return *v0 == 0;
}

_QWORD *sub_1000093F8(_QWORD *result)
{
  _QWORD *v1;

  *v1 &= ~*result;
  return result;
}

uint64_t CharacteristicKind.Format.rawValue.getter(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_10000943C + 4 * byte_100060ACE[a1]))(1819242338, 0xE400000000000000);
}

uint64_t sub_10000943C()
{
  return 0x38746E6975;
}

uint64_t sub_100009450()
{
  return 0x3631746E6975;
}

uint64_t sub_100009464()
{
  return 0x3233746E6975;
}

uint64_t sub_100009478()
{
  return 0x3436746E6975;
}

uint64_t sub_10000948C()
{
  return 7630441;
}

uint64_t sub_10000949C()
{
  return 0x3233746E69;
}

uint64_t sub_1000094B0()
{
  return 0x74616F6C66;
}

uint64_t sub_1000094C4()
{
  return 947285108;
}

uint64_t sub_1000094D0()
{
  return 1635017060;
}

uint64_t sub_1000094DC()
{
  return 0x676E69727473;
}

uint64_t _s20HomeWidgetLockScreen18CharacteristicKindO6FormatO2idSSvg_0(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_10000951C + 4 * byte_100060AD9[a1]))(1819242338, 0xE400000000000000);
}

uint64_t sub_10000951C()
{
  return 0x38746E6975;
}

uint64_t sub_100009530()
{
  return 0x3631746E6975;
}

uint64_t sub_100009544()
{
  return 0x3233746E6975;
}

uint64_t sub_100009558()
{
  return 0x3436746E6975;
}

uint64_t sub_10000956C()
{
  return 7630441;
}

uint64_t sub_10000957C()
{
  return 0x3233746E69;
}

uint64_t sub_100009590()
{
  return 0x74616F6C66;
}

uint64_t sub_1000095A4()
{
  return 947285108;
}

uint64_t sub_1000095B0()
{
  return 1635017060;
}

uint64_t sub_1000095BC()
{
  return 0x676E69727473;
}

_UNKNOWN **static CharacteristicKind.Format.allCases.getter()
{
  return &off_10007AED0;
}

unint64_t sub_1000095DC@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = _s20HomeWidgetLockScreen18CharacteristicKindO6FormatO8rawValueAESgSS_tcfC_0(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_100009608@<X0>(uint64_t *a1@<X8>)
{
  unsigned __int8 *v1;
  uint64_t result;
  uint64_t v4;

  result = CharacteristicKind.Format.rawValue.getter(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_100009630()
{
  unsigned __int8 *v0;

  return CharacteristicKind.Format.id.getter(*v0);
}

void sub_100009638(_QWORD *a1@<X8>)
{
  *a1 = &off_10007AED0;
}

uint64_t sub_100009648(unsigned __int8 *a1, unsigned __int8 *a2)
{
  unsigned __int8 v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  char v10;

  v2 = *a2;
  v3 = CharacteristicKind.Format.rawValue.getter(*a1);
  v5 = v4;
  v6 = CharacteristicKind.Format.rawValue.getter(v2);
  if (v3 == v6 && v5 == v7)
  {
    v10 = 1;
    v9 = v5;
  }
  else
  {
    v9 = v7;
    v10 = _stringCompareWithSmolCheck(_:_:expecting:)(v3, v5, v6, v7, 0);
  }
  swift_bridgeObjectRelease(v5);
  swift_bridgeObjectRelease(v9);
  return v10 & 1;
}

Swift::Int sub_1000096D0()
{
  unsigned __int8 *v0;
  unsigned __int8 v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD v6[9];

  v1 = *v0;
  Hasher.init(_seed:)(v6, 0);
  v2 = CharacteristicKind.Format.rawValue.getter(v1);
  v4 = v3;
  String.hash(into:)(v6, v2, v3);
  swift_bridgeObjectRelease(v4);
  return Hasher._finalize()();
}

uint64_t sub_100009730(uint64_t a1)
{
  unsigned __int8 *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = CharacteristicKind.Format.rawValue.getter(*v1);
  v5 = v4;
  String.hash(into:)(a1, v3, v4);
  return swift_bridgeObjectRelease(v5);
}

Swift::Int sub_100009770(uint64_t a1)
{
  unsigned __int8 *v1;
  unsigned __int8 v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD v7[9];

  v2 = *v1;
  Hasher.init(_seed:)(v7, a1);
  v3 = CharacteristicKind.Format.rawValue.getter(v2);
  v5 = v4;
  String.hash(into:)(v7, v3, v4);
  swift_bridgeObjectRelease(v5);
  return Hasher._finalize()();
}

uint64_t sub_1000097CC@<X0>(uint64_t *a1@<X8>)
{
  unsigned __int8 *v1;
  uint64_t result;
  uint64_t v4;

  result = CharacteristicKind.Format.id.getter(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_1000097F4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_100013068();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_100009850(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_100013068();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

_UNKNOWN **static CharacteristicKind.Unit.allCases.getter()
{
  return &off_10007AF00;
}

uint64_t CharacteristicKind.Unit.rawValue.getter(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1000098DC + 4 * byte_100060AE4[a1]))(0x737569736C6563, 0xE700000000000000);
}

uint64_t sub_1000098DC()
{
  return 0x61746E6563726570;
}

uint64_t sub_1000098F8()
{
  return 0x6572676564637261;
}

uint64_t sub_100009918()
{
  return 7894380;
}

uint64_t sub_100009928()
{
  return 0x73646E6F636573;
}

uint64_t sub_10000993C()
{
  return 0x7373656C74696E75;
}

void sub_100009954(char *a1)
{
  sub_100004340(*a1);
}

void sub_100009960()
{
  char *v0;

  sub_1000045E4(*v0);
}

void sub_100009968()
{
  __asm { BR              X10 }
}

uint64_t sub_1000099A4(uint64_t a1)
{
  ((void (*)(uint64_t, uint64_t, unint64_t))String.hash(into:))(a1, 0x61746E6563726570, 0xEA00000000006567);
  return swift_bridgeObjectRelease(0xEA00000000006567);
}

void sub_100009A30(uint64_t a1)
{
  char *v1;

  sub_100004770(a1, *v1);
}

unint64_t sub_100009A38@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = _s20HomeWidgetLockScreen18CharacteristicKindO4UnitO8rawValueAESgSS_tcfC_0(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_100009A64()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(void))((char *)sub_100009A94 + 4 * byte_100060AF0[*v0]))();
}

void sub_100009A94(_QWORD *a1@<X8>)
{
  *a1 = 0x61746E6563726570;
  a1[1] = 0xEA00000000006567;
}

void sub_100009AB4(_QWORD *a1@<X8>)
{
  *a1 = 0x6572676564637261;
  a1[1] = 0xEA00000000007365;
}

void sub_100009AD8(_QWORD *a1@<X8>)
{
  *a1 = 7894380;
  a1[1] = 0xE300000000000000;
}

void sub_100009AEC(_QWORD *a1@<X8>)
{
  uint64_t v1;

  *a1 = 0x73646E6F636573;
  a1[1] = v1;
}

void sub_100009B04(_QWORD *a1@<X8>)
{
  *a1 = 0x7373656C74696E75;
  a1[1] = 0xE800000000000000;
}

void sub_100009B20(_QWORD *a1@<X8>)
{
  *a1 = &off_10007AF00;
}

uint64_t sub_100009B30(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_100013024();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_100009B8C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_100013024();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

BOOL sub_100009BD8(uint64_t a1, __n128 a2)
{
  double v2;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BOOL8 result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;

  v2 = a2.n128_f64[0];
  v4 = (a2.n128_u64[0] >> 52) & 0x7FF;
  v5 = a2.n128_u64[0] & 0xFFFFFFFFFFFFFLL;
  v6 = v4 | a2.n128_u64[0] & 0xFFFFFFFFFFFFFLL;
  if (!v6)
  {
    v12 = 0;
    result = 1;
    goto LABEL_25;
  }
  if (v4 == 2047)
    goto LABEL_28;
  v7 = Double.exponent.getter(a2);
  if (v7 > 63)
    goto LABEL_28;
  v8 = v7;
  v9 = Double.significandWidth.getter(v2);
  result = v8 >= v9;
  v11 = v9 + __clz(__rbit64(v5));
  v12 = v8 - v11;
  if (__OFSUB__(v8, v11))
  {
    __break(1u);
LABEL_27:
    if (v2 < 0.0)
    {
LABEL_36:
      LOBYTE(v6) = 0;
      v12 = 0x8000000000000000;
      goto LABEL_25;
    }
LABEL_28:
    v12 = 0;
    result = 0;
    LOBYTE(v6) = 1;
    goto LABEL_25;
  }
  if (v11 > 63)
  {
    if (v12 < -64 || v12 > 64)
      goto LABEL_11;
  }
  else if (v12 < -64 || v12 > 64)
  {
    goto LABEL_11;
  }
  if (v12 < 0)
    goto LABEL_32;
  if ((unint64_t)v12 < 0x40)
  {
    v14 = v5 << v12;
    if (v8 != 63)
      goto LABEL_17;
LABEL_34:
    if (v2 < 0.0 && !v14)
      goto LABEL_36;
    goto LABEL_28;
  }
LABEL_11:
  if (v8 == 63)
    goto LABEL_27;
  v13 = 0;
  v14 = 0;
  if (v8 < 0)
    goto LABEL_20;
LABEL_19:
  v13 = 1 << v8;
LABEL_20:
  while (1)
  {
    v12 = v14 | v13;
    if (v2 >= 0.0)
      break;
    if ((v12 & 0x8000000000000000) == 0)
    {
      LOBYTE(v6) = 0;
      v12 = -v12;
      goto LABEL_25;
    }
    __break(1u);
LABEL_31:
    __break(1u);
LABEL_32:
    if ((unint64_t)v12 <= 0xFFFFFFFFFFFFFFC0)
      goto LABEL_11;
    v14 = v5 >> -(char)v12;
    if (v8 == 63)
      goto LABEL_34;
LABEL_17:
    if ((v8 & 0x8000000000000000) == 0)
      goto LABEL_19;
    v13 = 0;
  }
  if (v12 < 0)
    goto LABEL_31;
  LOBYTE(v6) = 0;
LABEL_25:
  *(_QWORD *)a1 = v12;
  *(_BYTE *)(a1 + 8) = v6;
  return result;
}

BOOL sub_100009D5C(uint64_t a1, __n128 a2)
{
  float v2;
  int v4;
  unint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BOOL8 result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;

  v2 = a2.n128_f32[0];
  v4 = (a2.n128_u32[0] >> 23);
  v5 = a2.n128_u32[0] & 0x7FFFFF;
  v6 = v4 | a2.n128_u8[0];
  if (!(v4 | v5))
  {
    v14 = 0;
    result = 1;
    goto LABEL_26;
  }
  if (v4 == 255 || (v7 = Float.exponent.getter(a2), v7 > 63))
  {
LABEL_38:
    v14 = 0;
    result = 0;
    v6 = 1;
    goto LABEL_26;
  }
  v8 = v7;
  v9 = Float.significandWidth.getter(v2);
  result = v8 >= v9;
  v11 = v9 + __clz(__rbit32(v5));
  v12 = v8 - v11;
  if (__OFSUB__(v8, v11))
  {
    __break(1u);
    goto LABEL_31;
  }
  if (v11 > 63)
  {
    if ((unint64_t)(v12 - 33) < 0xFFFFFFFFFFFFFFBFLL)
      goto LABEL_12;
    if (v12 < 0)
    {
      if ((unint64_t)v12 <= 0xFFFFFFFFFFFFFFE0)
        LODWORD(v12) = 0;
      else
        LODWORD(v12) = v5 >> (v11 - v8);
      goto LABEL_16;
    }
    if ((unint64_t)v12 >= 0x20)
LABEL_12:
      LODWORD(v12) = 0;
    else
      LODWORD(v12) = (_DWORD)v5 << v12;
LABEL_16:
    v12 = v12;
LABEL_17:
    if (v8 != 63)
    {
      if (v8 < 0)
      {
        v13 = 0;
        goto LABEL_21;
      }
      goto LABEL_20;
    }
LABEL_31:
    if (v2 >= 0.0 || v12)
      goto LABEL_38;
    goto LABEL_33;
  }
  if (v12 >= -64 && v12 <= 64)
  {
    if (v12 < 0)
    {
      if ((unint64_t)v12 <= 0xFFFFFFFFFFFFFFC0)
        goto LABEL_8;
      v12 = v5 >> (v11 - v8);
    }
    else
    {
      if ((unint64_t)v12 >= 0x40)
        goto LABEL_8;
      v12 = v5 << v12;
    }
    goto LABEL_17;
  }
LABEL_8:
  if (v8 == 63)
    goto LABEL_37;
  v13 = 0;
  v12 = 0;
  if ((v8 & 0x8000000000000000) == 0)
LABEL_20:
    v13 = 1 << v8;
LABEL_21:
  v14 = v12 | v13;
  if (v2 >= 0.0)
  {
    if ((v14 & 0x8000000000000000) == 0)
    {
      v6 = 0;
      goto LABEL_26;
    }
    goto LABEL_36;
  }
  if ((v14 & 0x8000000000000000) != 0)
  {
    __break(1u);
LABEL_36:
    __break(1u);
LABEL_37:
    if (v2 >= 0.0)
      goto LABEL_38;
LABEL_33:
    v6 = 0;
    v14 = 0x8000000000000000;
    goto LABEL_26;
  }
  v6 = 0;
  v14 = -(uint64_t)v14;
LABEL_26:
  *(_QWORD *)a1 = v14;
  *(_BYTE *)(a1 + 8) = v6;
  return result;
}

char *sub_100009F08(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  size_t v12;
  char *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = *((_QWORD *)a4 + 3);
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = *((_QWORD *)a4 + 2);
    if (v7 <= v8)
      v9 = *((_QWORD *)a4 + 2);
    else
      v9 = v7;
    if (v9)
    {
      v10 = sub_100003704(&qword_100081C40);
      v11 = (char *)swift_allocObject(v10, 72 * v9 + 32, 7);
      v12 = j__malloc_size(v11);
      *((_QWORD *)v11 + 2) = v8;
      *((_QWORD *)v11 + 3) = 2 * ((uint64_t)(v12 - 32) / 72);
      v13 = v11 + 32;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v11 != a4 || v13 >= &a4[72 * v8 + 32])
          memmove(v13, a4 + 32, 72 * v8);
        *((_QWORD *)a4 + 2) = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v11 = (char *)&_swiftEmptyArrayStorage;
      v13 = (char *)&_swiftEmptyArrayStorage + 32;
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    sub_10000DFA0(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease(a4);
    return v11;
  }
  __break(1u);
  return result;
}

char *sub_10000A030(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  size_t v12;
  char *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = *((_QWORD *)a4 + 3);
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = *((_QWORD *)a4 + 2);
    if (v7 <= v8)
      v9 = *((_QWORD *)a4 + 2);
    else
      v9 = v7;
    if (v9)
    {
      v10 = sub_100003704(&qword_100081C88);
      v11 = (char *)swift_allocObject(v10, 56 * v9 + 32, 7);
      v12 = j__malloc_size(v11);
      *((_QWORD *)v11 + 2) = v8;
      *((_QWORD *)v11 + 3) = 2 * ((uint64_t)(v12 - 32) / 56);
      v13 = v11 + 32;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v11 != a4 || v13 >= &a4[56 * v8 + 32])
          memmove(v13, a4 + 32, 56 * v8);
        *((_QWORD *)a4 + 2) = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v11 = (char *)&_swiftEmptyArrayStorage;
      v13 = (char *)&_swiftEmptyArrayStorage + 32;
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    sub_10000E604(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease(a4);
    return v11;
  }
  __break(1u);
  return result;
}

double *sub_10000A154(double *result, int64_t a2, char a3, double *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  double *v11;
  int64_t v12;
  uint64_t v13;
  double *v14;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = *((_QWORD *)a4 + 3);
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = *((_QWORD *)a4 + 2);
    if (v7 <= v8)
      v9 = *((_QWORD *)a4 + 2);
    else
      v9 = v7;
    if (v9)
    {
      v10 = sub_100003704(&qword_100081CA0);
      v11 = (double *)swift_allocObject(v10, 8 * v9 + 32, 7);
      v12 = j__malloc_size(v11);
      v13 = v12 - 32;
      if (v12 < 32)
        v13 = v12 - 25;
      *((_QWORD *)v11 + 2) = v8;
      *((_QWORD *)v11 + 3) = 2 * (v13 >> 3);
      v14 = v11 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v11 = _swiftEmptyArrayStorage;
      v14 = &_swiftEmptyArrayStorage[4];
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v11 != a4 || v14 >= &a4[v8 + 4])
          memmove(v14, a4 + 4, 8 * v8);
        a4[2] = 0.0;
        goto LABEL_24;
      }
    }
    sub_10000D17C(0, v8, (char *)v14, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease(a4);
    return v11;
  }
  __break(1u);
  return result;
}

char *sub_10000A260(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  uint64_t v13;
  char *v14;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = *((_QWORD *)a4 + 3);
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = *((_QWORD *)a4 + 2);
    if (v7 <= v8)
      v9 = *((_QWORD *)a4 + 2);
    else
      v9 = v7;
    if (v9)
    {
      v10 = sub_100003704(&qword_100081CA8);
      v11 = (char *)swift_allocObject(v10, 8 * v9 + 32, 7);
      v12 = j__malloc_size(v11);
      v13 = v12 - 32;
      if (v12 < 32)
        v13 = v12 - 25;
      *((_QWORD *)v11 + 2) = v8;
      *((_QWORD *)v11 + 3) = 2 * (v13 >> 3);
      v14 = v11 + 32;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v11 = (char *)&_swiftEmptyArrayStorage;
      v14 = (char *)&_swiftEmptyArrayStorage + 32;
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v11 != a4 || v14 >= &a4[8 * v8 + 32])
          memmove(v14, a4 + 32, 8 * v8);
        *((_QWORD *)a4 + 2) = 0;
        goto LABEL_24;
      }
    }
    sub_10000D17C(0, v8, v14, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease(a4);
    return v11;
  }
  __break(1u);
  return result;
}

double *sub_10000A36C(double *result, int64_t a2, char a3, double *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  double *v11;
  int64_t v12;
  uint64_t v13;
  double *v14;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = *((_QWORD *)a4 + 3);
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = *((_QWORD *)a4 + 2);
    if (v7 <= v8)
      v9 = *((_QWORD *)a4 + 2);
    else
      v9 = v7;
    if (v9)
    {
      v10 = sub_100003704(&qword_100081C90);
      v11 = (double *)swift_allocObject(v10, 8 * v9 + 32, 7);
      v12 = j__malloc_size(v11);
      v13 = v12 - 32;
      if (v12 < 32)
        v13 = v12 - 25;
      *((_QWORD *)v11 + 2) = v8;
      *((_QWORD *)v11 + 3) = 2 * (v13 >> 3);
      v14 = v11 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v11 = _swiftEmptyArrayStorage;
      v14 = &_swiftEmptyArrayStorage[4];
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v11 != a4 || v14 >= &a4[v8 + 4])
          memmove(v14, a4 + 4, 8 * v8);
        a4[2] = 0.0;
        goto LABEL_24;
      }
    }
    sub_10000D17C(0, v8, (char *)v14, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease(a4);
    return v11;
  }
  __break(1u);
  return result;
}

_QWORD *sub_10000A478(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  _QWORD *v5;
  size_t v6;

  if (a2 <= a1)
    v2 = a1;
  else
    v2 = a2;
  if (!v2)
    return &_swiftEmptyArrayStorage;
  v4 = sub_100003704(&qword_100081C78);
  v5 = (_QWORD *)swift_allocObject(v4, v2 + 32, 7);
  v6 = j__malloc_size(v5);
  v5[2] = a1;
  v5[3] = 2 * v6 - 64;
  return v5;
}

uint64_t sub_10000A4DC(unint64_t a1, uint64_t a2, uint64_t a3)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;

  v5 = a1;
  v6 = a1 >> 16;
  v7 = (unsigned __int16)a1 >> 14;
  if ((a3 & 0x1000000000000000) == 0 || (a2 & 0x800000000000000) != 0)
  {
    v13 = String.UTF16View.index(_:offsetBy:)(15, v6, a2);
    v14 = v13 + (v7 << 16);
    v15 = v13 & 0xFFFFFFFFFFFFFFFCLL | v5 & 3;
    v16 = v14 & 0xFFFFFFFFFFFF0000;
    if (!v7)
      v16 = v15;
    return v16 | 4;
  }
  else
  {
    v8 = String.UTF8View._foreignIndex(_:offsetBy:)(15, v6);
    v9 = v8 + (v7 << 16);
    v10 = v8 & 0xFFFFFFFFFFFFFFFCLL | v5 & 3;
    v11 = v9 & 0xFFFFFFFFFFFF0000;
    if (!v7)
      v11 = v10;
    return v11 | 8;
  }
}

unint64_t sub_10000A554(unsigned __int8 a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  Swift::Int v5;
  _QWORD v7[9];

  Hasher.init(_seed:)(v7, *(_QWORD *)(v1 + 40));
  CharacteristicKind.rawValue.getter(a1);
  v4 = v3;
  String.hash(into:)(v7, 0xD000000000000024, v3);
  swift_bridgeObjectRelease(v4);
  v5 = Hasher._finalize()();
  return sub_10000A728(a1, v5);
}

unint64_t sub_10000A5C8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  Swift::Int v5;
  _QWORD v7[9];

  Hasher.init(_seed:)(v7, *(_QWORD *)(v2 + 40));
  String.hash(into:)(v7, a1, a2);
  v5 = Hasher._finalize()();
  return sub_10000A890(a1, a2, v5);
}

unint64_t sub_10000A62C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = static Hasher._hash(seed:_:)(*(_QWORD *)(v1 + 40), a1);
  return sub_10000A970(a1, v3);
}

unint64_t sub_10000A65C(unsigned __int8 a1)
{
  uint64_t v1;
  Swift::Int v3;
  _QWORD v5[9];

  Hasher.init(_seed:)(v5, *(_QWORD *)(v1 + 40));
  Hasher._combine(_:)(a1);
  v3 = Hasher._finalize()();
  return sub_10000AA0C(a1, v3);
}

unint64_t sub_10000A6B4(unsigned __int8 a1)
{
  uint64_t v1;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  Swift::Int v6;
  _QWORD v8[9];

  Hasher.init(_seed:)(v8, *(_QWORD *)(v1 + 40));
  v3 = ServiceKind.rawValue.getter(a1);
  v5 = v4;
  String.hash(into:)(v8, v3, v4);
  swift_bridgeObjectRelease(v5);
  v6 = Hasher._finalize()();
  return sub_10000AAAC(a1, v6);
}

unint64_t sub_10000A728(unsigned __int8 a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;

  v3 = v2 + 64;
  v4 = -1 << *(_BYTE *)(v2 + 32);
  v5 = a2 & ~v4;
  if (((*(_QWORD *)(v2 + 64 + ((v5 >> 3) & 0xFFFFFFFFFFFFF8)) >> v5) & 1) != 0)
  {
    CharacteristicKind.rawValue.getter(*(_BYTE *)(*(_QWORD *)(v2 + 48) + v5));
    v8 = v7;
    CharacteristicKind.rawValue.getter(a1);
    if (v8 == v9)
    {
LABEL_11:
      swift_bridgeObjectRelease_n(v8, 2);
      return v5;
    }
    v10 = v9;
    v11 = _stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000024, v8, 0xD000000000000024, v9, 0);
    swift_bridgeObjectRelease(v8);
    swift_bridgeObjectRelease(v10);
    if ((v11 & 1) == 0)
    {
      v12 = ~v4;
      v5 = (v5 + 1) & v12;
      if (((*(_QWORD *)(v3 + ((v5 >> 3) & 0xFFFFFFFFFFFFF8)) >> v5) & 1) != 0)
      {
        while (1)
        {
          CharacteristicKind.rawValue.getter(*(_BYTE *)(*(_QWORD *)(v2 + 48) + v5));
          if (v13 == v10)
            break;
          v14 = v13;
          v15 = _stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000024, v13, 0xD000000000000024, v10, 0);
          swift_bridgeObjectRelease(v14);
          swift_bridgeObjectRelease(v10);
          if ((v15 & 1) == 0)
          {
            v5 = (v5 + 1) & v12;
            if (((*(_QWORD *)(v3 + ((v5 >> 3) & 0xFFFFFFFFFFFFF8)) >> v5) & 1) != 0)
              continue;
          }
          return v5;
        }
        v8 = v10;
        goto LABEL_11;
      }
    }
  }
  return v5;
}

unint64_t sub_10000A890(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  BOOL v16;

  v4 = v3 + 64;
  v5 = -1 << *(_BYTE *)(v3 + 32);
  v6 = a3 & ~v5;
  if (((*(_QWORD *)(v3 + 64 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0)
  {
    v9 = *(_QWORD *)(v3 + 48);
    v10 = (_QWORD *)(v9 + 16 * v6);
    v11 = v10[1];
    v12 = *v10 == a1 && v11 == a2;
    if (!v12 && (_stringCompareWithSmolCheck(_:_:expecting:)(*v10, v11, a1, a2, 0) & 1) == 0)
    {
      v13 = ~v5;
      do
      {
        v6 = (v6 + 1) & v13;
        if (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) == 0)
          break;
        v14 = (_QWORD *)(v9 + 16 * v6);
        v15 = v14[1];
        v16 = *v14 == a1 && v15 == a2;
      }
      while (!v16 && (_stringCompareWithSmolCheck(_:_:expecting:)(*v14, v15, a1, a2, 0) & 1) == 0);
    }
  }
  return v6;
}

unint64_t sub_10000A970(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  unint64_t result;
  uint64_t v7;
  uint64_t v8;

  v4 = v2 + 64;
  v5 = -1 << *(_BYTE *)(v2 + 32);
  result = a2 & ~v5;
  if (((*(_QWORD *)(v2 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFF8)) >> result) & 1) != 0)
  {
    v7 = *(_QWORD *)(v2 + 48);
    if (*(_QWORD *)(v7 + 8 * result) != a1)
    {
      v8 = ~v5;
      for (result = (result + 1) & v8;
            ((*(_QWORD *)(v4 + ((result >> 3) & 0xFFFFFFFFFFFFF8)) >> result) & 1) != 0;
            result = (result + 1) & v8)
      {
        if (*(_QWORD *)(v7 + 8 * result) == a1)
          break;
      }
    }
  }
  return result;
}

unint64_t sub_10000AA0C(unsigned __int8 a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  unint64_t result;
  uint64_t v7;
  uint64_t v8;

  v4 = v2 + 64;
  v5 = -1 << *(_BYTE *)(v2 + 32);
  result = a2 & ~v5;
  if (((*(_QWORD *)(v2 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFF8)) >> result) & 1) != 0)
  {
    v7 = *(_QWORD *)(v2 + 48);
    if (*(unsigned __int8 *)(v7 + result) != a1)
    {
      v8 = ~v5;
      for (result = (result + 1) & v8;
            ((*(_QWORD *)(v4 + ((result >> 3) & 0xFFFFFFFFFFFFF8)) >> result) & 1) != 0;
            result = (result + 1) & v8)
      {
        if (*(unsigned __int8 *)(v7 + result) == a1)
          break;
      }
    }
  }
  return result;
}

unint64_t sub_10000AAAC(unsigned __int8 a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v13;
  char v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v21;
  char v22;

  v3 = v2 + 64;
  v4 = -1 << *(_BYTE *)(v2 + 32);
  v5 = a2 & ~v4;
  if (((*(_QWORD *)(v2 + 64 + ((v5 >> 3) & 0xFFFFFFFFFFFFF8)) >> v5) & 1) != 0)
  {
    v7 = ServiceKind.rawValue.getter(*(_BYTE *)(*(_QWORD *)(v2 + 48) + v5));
    v9 = v8;
    v10 = ServiceKind.rawValue.getter(a1);
    if (v7 == v10 && v9 == v11)
    {
LABEL_16:
      swift_bridgeObjectRelease_n(v9, 2);
      return v5;
    }
    v13 = v11;
    v14 = _stringCompareWithSmolCheck(_:_:expecting:)(v7, v9, v10, v11, 0);
    swift_bridgeObjectRelease(v9);
    swift_bridgeObjectRelease(v13);
    if ((v14 & 1) == 0)
    {
      v15 = ~v4;
      v5 = (v5 + 1) & v15;
      if (((*(_QWORD *)(v3 + ((v5 >> 3) & 0xFFFFFFFFFFFFF8)) >> v5) & 1) != 0)
      {
        while (1)
        {
          v16 = ServiceKind.rawValue.getter(*(_BYTE *)(*(_QWORD *)(v2 + 48) + v5));
          v9 = v17;
          v18 = ServiceKind.rawValue.getter(a1);
          if (v16 == v18 && v9 == v19)
            break;
          v21 = v19;
          v22 = _stringCompareWithSmolCheck(_:_:expecting:)(v16, v9, v18, v19, 0);
          swift_bridgeObjectRelease(v9);
          swift_bridgeObjectRelease(v21);
          if ((v22 & 1) == 0)
          {
            v5 = (v5 + 1) & v15;
            if (((*(_QWORD *)(v3 + ((v5 >> 3) & 0xFFFFFFFFFFFFF8)) >> v5) & 1) != 0)
              continue;
          }
          return v5;
        }
        goto LABEL_16;
      }
    }
  }
  return v5;
}

void *sub_10000AC20()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  __int16 v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  __int128 v25;
  unint64_t v26;
  int64_t v27;
  unint64_t v28;
  int64_t v29;

  v1 = v0;
  sub_100003704(&qword_100081C38);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release(v2);
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v27 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v27 >= v13)
      goto LABEL_26;
    v28 = *(_QWORD *)(v6 + 8 * v27);
    ++v9;
    if (!v28)
    {
      v9 = v27 + 1;
      if (v27 + 1 >= v13)
        goto LABEL_26;
      v28 = *(_QWORD *)(v6 + 8 * v9);
      if (!v28)
        break;
    }
LABEL_25:
    v12 = (v28 - 1) & v28;
    v15 = __clz(__rbit64(v28)) + (v9 << 6);
LABEL_12:
    v16 = *(_QWORD *)(v2 + 56) + (v15 << 6);
    v17 = *(_BYTE *)v16;
    v19 = *(_QWORD *)(v16 + 8);
    v18 = *(_QWORD *)(v16 + 16);
    v20 = *(_WORD *)(v16 + 24);
    v21 = *(_QWORD *)(v16 + 32);
    v22 = *(unsigned __int8 *)(v16 + 44);
    v23 = *(unsigned int *)(v16 + 40);
    v24 = v23 | (v22 << 32);
    v25 = *(_OWORD *)(v16 + 48);
    *(_BYTE *)(*(_QWORD *)(v4 + 48) + v15) = *(_BYTE *)(*(_QWORD *)(v2 + 48) + v15);
    v26 = *(_QWORD *)(v4 + 56) + (v15 << 6);
    *(_BYTE *)v26 = v17;
    *(_QWORD *)(v26 + 8) = v19;
    *(_QWORD *)(v26 + 16) = v18;
    *(_WORD *)(v26 + 24) = v20;
    *(_QWORD *)(v26 + 32) = v21;
    *(_BYTE *)(v26 + 44) = v22;
    *(_DWORD *)(v26 + 40) = v23;
    *(_OWORD *)(v26 + 48) = v25;
    swift_bridgeObjectRetain(v18);
    result = (void *)sub_10000E454(v21, v24);
  }
  v29 = v27 + 2;
  if (v29 >= v13)
    goto LABEL_26;
  v28 = *(_QWORD *)(v6 + 8 * v29);
  if (v28)
  {
    v9 = v29;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v29 + 1;
    if (__OFADD__(v29, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v28 = *(_QWORD *)(v6 + 8 * v9);
    ++v29;
    if (v28)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_10000AE10()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  int64_t v23;
  unint64_t v24;
  int64_t v25;

  v1 = v0;
  sub_100003704(&qword_100081C70);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release(v2);
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v23 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v23 >= v13)
      goto LABEL_26;
    v24 = *(_QWORD *)(v6 + 8 * v23);
    ++v9;
    if (!v24)
    {
      v9 = v23 + 1;
      if (v23 + 1 >= v13)
        goto LABEL_26;
      v24 = *(_QWORD *)(v6 + 8 * v9);
      if (!v24)
        break;
    }
LABEL_25:
    v12 = (v24 - 1) & v24;
    v15 = __clz(__rbit64(v24)) + (v9 << 6);
LABEL_12:
    v16 = 8 * v15;
    v17 = *(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * v15);
    v18 = 16 * v15;
    v19 = (uint64_t *)(*(_QWORD *)(v2 + 56) + v18);
    v21 = *v19;
    v20 = v19[1];
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + v16) = v17;
    v22 = (_QWORD *)(*(_QWORD *)(v4 + 56) + v18);
    *v22 = v21;
    v22[1] = v20;
    result = (void *)swift_bridgeObjectRetain(v20);
  }
  v25 = v23 + 2;
  if (v25 >= v13)
    goto LABEL_26;
  v24 = *(_QWORD *)(v6 + 8 * v25);
  if (v24)
  {
    v9 = v25;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v25 + 1;
    if (__OFADD__(v25, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v24 = *(_QWORD *)(v6 + 8 * v9);
    ++v25;
    if (v24)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_10000AFBC()
{
  return sub_10000AFD4(&qword_100081C80);
}

void *sub_10000AFC8()
{
  return sub_10000AFD4(&qword_100081C98);
}

void *sub_10000AFD4(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *result;
  uint64_t v7;
  unint64_t v8;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;
  unint64_t v21;

  v2 = v1;
  sub_100003704(a1);
  v3 = *v1;
  v4 = static _DictionaryStorage.copy(original:)(*v1);
  v5 = v4;
  if (!*(_QWORD *)(v3 + 16))
  {
LABEL_26:
    result = (void *)swift_release(v3);
    *v2 = v5;
    return result;
  }
  result = (void *)(v4 + 64);
  v7 = v3 + 64;
  v8 = (unint64_t)((1 << *(_BYTE *)(v5 + 32)) + 63) >> 6;
  if (v5 != v3 || (unint64_t)result >= v3 + 64 + 8 * v8)
    result = memmove(result, (const void *)(v3 + 64), 8 * v8);
  v10 = 0;
  *(_QWORD *)(v5 + 16) = *(_QWORD *)(v3 + 16);
  v11 = 1 << *(_BYTE *)(v3 + 32);
  v12 = -1;
  if (v11 < 64)
    v12 = ~(-1 << v11);
  v13 = v12 & *(_QWORD *)(v3 + 64);
  v14 = (unint64_t)(v11 + 63) >> 6;
  while (1)
  {
    if (v13)
    {
      v15 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      v16 = v15 | (v10 << 6);
      goto LABEL_12;
    }
    v18 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v18 >= v14)
      goto LABEL_26;
    v19 = *(_QWORD *)(v7 + 8 * v18);
    ++v10;
    if (!v19)
    {
      v10 = v18 + 1;
      if (v18 + 1 >= v14)
        goto LABEL_26;
      v19 = *(_QWORD *)(v7 + 8 * v10);
      if (!v19)
        break;
    }
LABEL_25:
    v21 = __clz(__rbit64(v19));
    v13 = (v19 - 1) & v19;
    v16 = v21 + (v10 << 6);
LABEL_12:
    v17 = *(_QWORD *)(*(_QWORD *)(v3 + 56) + 8 * v16);
    *(_BYTE *)(*(_QWORD *)(v5 + 48) + v16) = *(_BYTE *)(*(_QWORD *)(v3 + 48) + v16);
    *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v16) = v17;
  }
  v20 = v18 + 2;
  if (v20 >= v14)
    goto LABEL_26;
  v19 = *(_QWORD *)(v7 + 8 * v20);
  if (v19)
  {
    v10 = v20;
    goto LABEL_25;
  }
  while (1)
  {
    v10 = v20 + 1;
    if (__OFADD__(v20, 1))
      break;
    if (v10 >= v14)
      goto LABEL_26;
    v19 = *(_QWORD *)(v7 + 8 * v10);
    ++v20;
    if (v19)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

Swift::Int sub_10000B158(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  Swift::Int result;
  int64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  int64_t v24;
  unint64_t v25;
  int64_t v26;
  char v27;
  unint64_t v28;
  BOOL v29;
  uint64_t v30;
  unsigned __int8 v31;
  unint64_t v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  int64_t v39;
  _QWORD *v40;
  uint64_t i;
  char v42;
  __int128 v43;
  char v44;
  char v45;
  uint64_t v46;
  _QWORD v47[10];

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_100003704(&qword_100081C38);
  v42 = a2;
  v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  v8 = v7;
  if (*(_QWORD *)(v5 + 16))
  {
    v38 = v3;
    v9 = 1 << *(_BYTE *)(v5 + 32);
    v40 = (_QWORD *)(v5 + 64);
    if (v9 < 64)
      v10 = ~(-1 << v9);
    else
      v10 = -1;
    v11 = v10 & *(_QWORD *)(v5 + 64);
    v39 = (unint64_t)(v9 + 63) >> 6;
    v12 = v7 + 64;
    result = swift_retain(v5);
    v14 = 0;
    for (i = v5; ; v5 = i)
    {
      if (v11)
      {
        v22 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        v23 = v22 | (v14 << 6);
      }
      else
      {
        v24 = v14 + 1;
        if (__OFADD__(v14, 1))
        {
LABEL_42:
          __break(1u);
LABEL_43:
          __break(1u);
          return result;
        }
        if (v24 >= v39)
          goto LABEL_36;
        v25 = v40[v24];
        ++v14;
        if (!v25)
        {
          v14 = v24 + 1;
          if (v24 + 1 >= v39)
            goto LABEL_36;
          v25 = v40[v14];
          if (!v25)
          {
            v26 = v24 + 2;
            if (v26 >= v39)
            {
LABEL_36:
              swift_release(v5);
              v3 = v38;
              if ((v42 & 1) != 0)
              {
                v37 = 1 << *(_BYTE *)(v5 + 32);
                if (v37 >= 64)
                  bzero(v40, ((unint64_t)(v37 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v40 = -1 << v37;
                *(_QWORD *)(v5 + 16) = 0;
              }
              break;
            }
            v25 = v40[v26];
            if (!v25)
            {
              while (1)
              {
                v14 = v26 + 1;
                if (__OFADD__(v26, 1))
                  goto LABEL_43;
                if (v14 >= v39)
                  goto LABEL_36;
                v25 = v40[v14];
                ++v26;
                if (v25)
                  goto LABEL_33;
              }
            }
            v14 = v26;
          }
        }
LABEL_33:
        v11 = (v25 - 1) & v25;
        v23 = __clz(__rbit64(v25)) + (v14 << 6);
      }
      v31 = *(_BYTE *)(*(_QWORD *)(v5 + 48) + v23);
      v32 = *(_QWORD *)(v5 + 56) + (v23 << 6);
      v33 = *(_BYTE *)v32;
      v34 = *(_QWORD *)(v32 + 16);
      v46 = *(_QWORD *)(v32 + 8);
      v44 = *(_BYTE *)(v32 + 25);
      v45 = *(_BYTE *)(v32 + 24);
      v35 = *(_QWORD *)(v32 + 32);
      v36 = *(unsigned int *)(v32 + 40) | ((unint64_t)*(unsigned __int8 *)(v32 + 44) << 32);
      v43 = *(_OWORD *)(v32 + 48);
      if ((v42 & 1) == 0)
      {
        swift_bridgeObjectRetain(v34);
        sub_10000E454(v35, v36);
      }
      Hasher.init(_seed:)(v47, *(_QWORD *)(v8 + 40));
      CharacteristicKind.rawValue.getter(v31);
      v16 = v15;
      String.hash(into:)(v47, 0xD000000000000024, v15);
      swift_bridgeObjectRelease(v16);
      result = Hasher._finalize()();
      v17 = -1 << *(_BYTE *)(v8 + 32);
      v18 = result & ~v17;
      v19 = v18 >> 6;
      if (((-1 << v18) & ~*(_QWORD *)(v12 + 8 * (v18 >> 6))) != 0)
      {
        v20 = __clz(__rbit64((-1 << v18) & ~*(_QWORD *)(v12 + 8 * (v18 >> 6)))) | v18 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v27 = 0;
        v28 = (unint64_t)(63 - v17) >> 6;
        do
        {
          if (++v19 == v28 && (v27 & 1) != 0)
          {
            __break(1u);
            goto LABEL_42;
          }
          v29 = v19 == v28;
          if (v19 == v28)
            v19 = 0;
          v27 |= v29;
          v30 = *(_QWORD *)(v12 + 8 * v19);
        }
        while (v30 == -1);
        v20 = __clz(__rbit64(~v30)) + (v19 << 6);
      }
      *(_QWORD *)(v12 + ((v20 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v20;
      *(_BYTE *)(*(_QWORD *)(v8 + 48) + v20) = v31;
      v21 = *(_QWORD *)(v8 + 56) + (v20 << 6);
      *(_BYTE *)v21 = v33;
      *(_QWORD *)(v21 + 8) = v46;
      *(_QWORD *)(v21 + 16) = v34;
      *(_BYTE *)(v21 + 24) = v45;
      *(_BYTE *)(v21 + 25) = v44;
      *(_QWORD *)(v21 + 32) = v35;
      *(_BYTE *)(v21 + 44) = BYTE4(v36);
      *(_DWORD *)(v21 + 40) = v36;
      *(_OWORD *)(v21 + 48) = v43;
      ++*(_QWORD *)(v8 + 16);
    }
  }
  result = swift_release(v5);
  *v3 = v8;
  return result;
}

uint64_t sub_10000B4D8(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  unint64_t v22;
  int64_t v23;
  char v24;
  unint64_t v25;
  BOOL v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int64_t v34;
  uint64_t *v35;

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_100003704(&qword_100081C70);
  result = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  v8 = result;
  if (*(_QWORD *)(v5 + 16))
  {
    v9 = 0;
    v35 = (uint64_t *)(v5 + 64);
    v10 = 1 << *(_BYTE *)(v5 + 32);
    v32 = -1 << v10;
    v33 = v10;
    if (v10 < 64)
      v11 = ~(-1 << v10);
    else
      v11 = -1;
    v12 = v11 & *(_QWORD *)(v5 + 64);
    v34 = (unint64_t)(v10 + 63) >> 6;
    v13 = result + 64;
    while (1)
    {
      if (v12)
      {
        v19 = __clz(__rbit64(v12));
        v12 &= v12 - 1;
        v20 = v19 | (v9 << 6);
      }
      else
      {
        v21 = v9 + 1;
        if (__OFADD__(v9, 1))
        {
LABEL_43:
          __break(1u);
LABEL_44:
          __break(1u);
          return result;
        }
        result = v5 + 64;
        if (v21 >= v34)
          goto LABEL_36;
        v22 = v35[v21];
        ++v9;
        if (!v22)
        {
          v9 = v21 + 1;
          if (v21 + 1 >= v34)
            goto LABEL_36;
          v22 = v35[v9];
          if (!v22)
          {
            v23 = v21 + 2;
            if (v23 >= v34)
            {
LABEL_36:
              if ((a2 & 1) != 0)
              {
                if (v33 >= 64)
                  bzero(v35, 8 * v34);
                else
                  *v35 = v32;
                *(_QWORD *)(v5 + 16) = 0;
              }
              break;
            }
            v22 = v35[v23];
            if (!v22)
            {
              while (1)
              {
                v9 = v23 + 1;
                if (__OFADD__(v23, 1))
                  goto LABEL_44;
                if (v9 >= v34)
                  goto LABEL_36;
                v22 = v35[v9];
                ++v23;
                if (v22)
                  goto LABEL_33;
              }
            }
            v9 = v23;
          }
        }
LABEL_33:
        v12 = (v22 - 1) & v22;
        v20 = __clz(__rbit64(v22)) + (v9 << 6);
      }
      v28 = *(_QWORD *)(*(_QWORD *)(v5 + 48) + 8 * v20);
      v29 = (uint64_t *)(*(_QWORD *)(v5 + 56) + 16 * v20);
      v30 = *v29;
      v31 = v29[1];
      if ((a2 & 1) == 0)
        swift_bridgeObjectRetain(v29[1]);
      result = static Hasher._hash(seed:_:)(*(_QWORD *)(v8 + 40), v28);
      v14 = -1 << *(_BYTE *)(v8 + 32);
      v15 = result & ~v14;
      v16 = v15 >> 6;
      if (((-1 << v15) & ~*(_QWORD *)(v13 + 8 * (v15 >> 6))) != 0)
      {
        v17 = __clz(__rbit64((-1 << v15) & ~*(_QWORD *)(v13 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v24 = 0;
        v25 = (unint64_t)(63 - v14) >> 6;
        do
        {
          if (++v16 == v25 && (v24 & 1) != 0)
          {
            __break(1u);
            goto LABEL_43;
          }
          v26 = v16 == v25;
          if (v16 == v25)
            v16 = 0;
          v24 |= v26;
          v27 = *(_QWORD *)(v13 + 8 * v16);
        }
        while (v27 == -1);
        v17 = __clz(__rbit64(~v27)) + (v16 << 6);
      }
      *(_QWORD *)(v13 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
      *(_QWORD *)(*(_QWORD *)(v8 + 48) + 8 * v17) = v28;
      v18 = (_QWORD *)(*(_QWORD *)(v8 + 56) + 16 * v17);
      *v18 = v30;
      v18[1] = v31;
      ++*(_QWORD *)(v8 + 16);
    }
  }
  result = swift_release(v5);
  *v3 = v8;
  return result;
}

Swift::Int sub_10000B78C(uint64_t a1, uint64_t a2)
{
  Swift::Int *v2;
  Swift::Int *v3;
  Swift::Int v5;
  uint64_t v6;
  Swift::Int result;
  Swift::Int v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  Swift::Int v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;
  Swift::UInt v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  Swift::Int *v31;
  char v32;
  _QWORD *v33;
  uint64_t v34[9];

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_100003704(&qword_100081C80);
  result = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  v8 = result;
  if (*(_QWORD *)(v5 + 16))
  {
    v32 = a2;
    v31 = v3;
    v9 = 0;
    v33 = (_QWORD *)(v5 + 64);
    v10 = 1 << *(_BYTE *)(v5 + 32);
    if (v10 < 64)
      v11 = ~(-1 << v10);
    else
      v11 = -1;
    v12 = v11 & *(_QWORD *)(v5 + 64);
    v13 = (unint64_t)(v10 + 63) >> 6;
    v14 = result + 64;
    while (1)
    {
      if (v12)
      {
        v16 = __clz(__rbit64(v12));
        v12 &= v12 - 1;
        v17 = v16 | (v9 << 6);
      }
      else
      {
        v18 = v9 + 1;
        if (__OFADD__(v9, 1))
        {
LABEL_42:
          __break(1u);
LABEL_43:
          __break(1u);
          return result;
        }
        result = v5 + 64;
        if (v18 >= v13)
          goto LABEL_34;
        v19 = v33[v18];
        ++v9;
        if (!v19)
        {
          v9 = v18 + 1;
          if (v18 + 1 >= v13)
            goto LABEL_34;
          v19 = v33[v9];
          if (!v19)
          {
            v20 = v18 + 2;
            if (v20 >= v13)
            {
LABEL_34:
              if ((v32 & 1) == 0)
              {
                result = swift_release(v5);
                v3 = v31;
                goto LABEL_41;
              }
              v30 = 1 << *(_BYTE *)(v5 + 32);
              if (v30 >= 64)
                bzero(v33, ((unint64_t)(v30 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              else
                *v33 = -1 << v30;
              v3 = v31;
              *(_QWORD *)(v5 + 16) = 0;
              break;
            }
            v19 = v33[v20];
            if (!v19)
            {
              while (1)
              {
                v9 = v20 + 1;
                if (__OFADD__(v20, 1))
                  goto LABEL_43;
                if (v9 >= v13)
                  goto LABEL_34;
                v19 = v33[v9];
                ++v20;
                if (v19)
                  goto LABEL_24;
              }
            }
            v9 = v20;
          }
        }
LABEL_24:
        v12 = (v19 - 1) & v19;
        v17 = __clz(__rbit64(v19)) + (v9 << 6);
      }
      v21 = *(unsigned __int8 *)(*(_QWORD *)(v5 + 48) + v17);
      v22 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v17);
      Hasher.init(_seed:)(v34, *(_QWORD *)(v8 + 40));
      Hasher._combine(_:)(v21);
      result = Hasher._finalize()();
      v23 = -1 << *(_BYTE *)(v8 + 32);
      v24 = result & ~v23;
      v25 = v24 >> 6;
      if (((-1 << v24) & ~*(_QWORD *)(v14 + 8 * (v24 >> 6))) != 0)
      {
        v15 = __clz(__rbit64((-1 << v24) & ~*(_QWORD *)(v14 + 8 * (v24 >> 6)))) | v24 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v26 = 0;
        v27 = (unint64_t)(63 - v23) >> 6;
        do
        {
          if (++v25 == v27 && (v26 & 1) != 0)
          {
            __break(1u);
            goto LABEL_42;
          }
          v28 = v25 == v27;
          if (v25 == v27)
            v25 = 0;
          v26 |= v28;
          v29 = *(_QWORD *)(v14 + 8 * v25);
        }
        while (v29 == -1);
        v15 = __clz(__rbit64(~v29)) + (v25 << 6);
      }
      *(_QWORD *)(v14 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
      *(_BYTE *)(*(_QWORD *)(v8 + 48) + v15) = v21;
      *(_QWORD *)(*(_QWORD *)(v8 + 56) + 8 * v15) = v22;
      ++*(_QWORD *)(v8 + 16);
    }
  }
  result = swift_release(v5);
LABEL_41:
  *v3 = v8;
  return result;
}

Swift::Int sub_10000BA50(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int64_t v12;
  uint64_t v13;
  Swift::Int result;
  int64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  int64_t v19;
  _QWORD *v20;
  unint64_t v21;
  int64_t v22;
  unsigned __int8 v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  char v31;
  unint64_t v32;
  BOOL v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  uint64_t *v37;
  uint64_t v38;
  _QWORD v39[9];

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_100003704(&qword_100081C98);
  v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  v8 = v7;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_41;
  v36 = a2;
  v9 = 1 << *(_BYTE *)(v5 + 32);
  v37 = v3;
  v38 = v5 + 64;
  if (v9 < 64)
    v10 = ~(-1 << v9);
  else
    v10 = -1;
  v11 = v10 & *(_QWORD *)(v5 + 64);
  v12 = (unint64_t)(v9 + 63) >> 6;
  v13 = v7 + 64;
  result = swift_retain(v5);
  v15 = 0;
  while (1)
  {
    if (v11)
    {
      v17 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      v18 = v17 | (v15 << 6);
      goto LABEL_25;
    }
    v19 = v15 + 1;
    if (__OFADD__(v15, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v19 >= v12)
      break;
    v20 = (_QWORD *)(v5 + 64);
    v21 = *(_QWORD *)(v38 + 8 * v19);
    ++v15;
    if (!v21)
    {
      v15 = v19 + 1;
      if (v19 + 1 >= v12)
        goto LABEL_34;
      v21 = *(_QWORD *)(v38 + 8 * v15);
      if (!v21)
      {
        v22 = v19 + 2;
        if (v22 >= v12)
        {
LABEL_34:
          swift_release(v5);
          v3 = v37;
          if ((v36 & 1) == 0)
            goto LABEL_41;
          goto LABEL_37;
        }
        v21 = *(_QWORD *)(v38 + 8 * v22);
        if (!v21)
        {
          while (1)
          {
            v15 = v22 + 1;
            if (__OFADD__(v22, 1))
              goto LABEL_43;
            if (v15 >= v12)
              goto LABEL_34;
            v21 = *(_QWORD *)(v38 + 8 * v15);
            ++v22;
            if (v21)
              goto LABEL_24;
          }
        }
        v15 = v22;
      }
    }
LABEL_24:
    v11 = (v21 - 1) & v21;
    v18 = __clz(__rbit64(v21)) + (v15 << 6);
LABEL_25:
    v23 = *(_BYTE *)(*(_QWORD *)(v5 + 48) + v18);
    v24 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v18);
    Hasher.init(_seed:)(v39, *(_QWORD *)(v8 + 40));
    v25 = ServiceKind.rawValue.getter(v23);
    v27 = v26;
    String.hash(into:)(v39, v25, v26);
    swift_bridgeObjectRelease(v27);
    result = Hasher._finalize()();
    v28 = -1 << *(_BYTE *)(v8 + 32);
    v29 = result & ~v28;
    v30 = v29 >> 6;
    if (((-1 << v29) & ~*(_QWORD *)(v13 + 8 * (v29 >> 6))) != 0)
    {
      v16 = __clz(__rbit64((-1 << v29) & ~*(_QWORD *)(v13 + 8 * (v29 >> 6)))) | v29 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v31 = 0;
      v32 = (unint64_t)(63 - v28) >> 6;
      do
      {
        if (++v30 == v32 && (v31 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        v33 = v30 == v32;
        if (v30 == v32)
          v30 = 0;
        v31 |= v33;
        v34 = *(_QWORD *)(v13 + 8 * v30);
      }
      while (v34 == -1);
      v16 = __clz(__rbit64(~v34)) + (v30 << 6);
    }
    *(_QWORD *)(v13 + ((v16 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v16;
    *(_BYTE *)(*(_QWORD *)(v8 + 48) + v16) = v23;
    *(_QWORD *)(*(_QWORD *)(v8 + 56) + 8 * v16) = v24;
    ++*(_QWORD *)(v8 + 16);
  }
  swift_release(v5);
  v3 = v37;
  v20 = (_QWORD *)(v5 + 64);
  if ((v36 & 1) == 0)
    goto LABEL_41;
LABEL_37:
  v35 = 1 << *(_BYTE *)(v5 + 32);
  if (v35 >= 64)
    bzero(v20, ((unint64_t)(v35 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v20 = -1 << v35;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_41:
  result = swift_release(v5);
  *v3 = v8;
  return result;
}

void sub_10000BD48(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __asm { BR              X10 }
}

uint64_t sub_10000BDA8(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, __int16 a10, char __s2, char a12, char a13, char a14, char a15, char a16, char a17, char a18, char a19, char a20,char a21,char a22,char a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37)
{
  BOOL *v37;
  const void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t result;
  uint64_t v42;
  __int16 v43;
  char v44;
  char v45;
  char v46;
  char v47;

  v42 = v39;
  v43 = v40;
  v44 = BYTE2(v40);
  v45 = BYTE3(v40);
  v46 = BYTE4(v40);
  v47 = BYTE5(v40);
  if (!v38)
  {
    __break(1u);
    JUMPOUT(0x10000BF8CLL);
  }
  result = memcmp(v38, &v42, BYTE6(v40));
  *v37 = (_DWORD)result == 0;
  return result;
}

void sub_10000BFB0(uint64_t a1, uint64_t a2)
{
  __asm { BR              X10 }
}

uint64_t sub_10000C00C()
{
  unint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  char v7;
  uint64_t v8;
  __int16 v9;
  char v10;
  char v11;
  char v12;
  char v13;

  v8 = v3;
  v9 = v4;
  v10 = BYTE2(v4);
  v11 = BYTE3(v4);
  v12 = BYTE4(v4);
  v13 = BYTE5(v4);
  sub_10000BD48((uint64_t)&v8, (uint64_t)&v8 + BYTE6(v4), v1, v0);
  sub_10000E5C0(v1, v0);
  if (!v2)
    v5 = v7;
  return v5 & 1;
}

unsigned __int8 *sub_10000C1D4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unsigned __int8 *v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unsigned __int8 *v12;
  uint64_t v14;
  uint64_t v15;

  v14 = a1;
  v15 = a2;
  swift_bridgeObjectRetain(a2);
  v4 = String.init<A>(_:)(&v14, &type metadata for String, &protocol witness table for String, &protocol witness table for String);
  v6 = v4;
  v7 = v5;
  if ((v5 & 0x1000000000000000) == 0)
  {
    if ((v5 & 0x2000000000000000) == 0)
      goto LABEL_3;
LABEL_6:
    v9 = HIBYTE(v7) & 0xF;
    v14 = v6;
    v15 = v7 & 0xFFFFFFFFFFFFFFLL;
    v8 = (unsigned __int8 *)&v14;
    goto LABEL_7;
  }
  v6 = sub_10000C84C(v4, v5);
  v11 = v10;
  swift_bridgeObjectRelease(v7);
  v7 = v11;
  if ((v11 & 0x2000000000000000) != 0)
    goto LABEL_6;
LABEL_3:
  if ((v6 & 0x1000000000000000) != 0)
  {
    v8 = (unsigned __int8 *)((v7 & 0xFFFFFFFFFFFFFFFLL) + 32);
    v9 = v6 & 0xFFFFFFFFFFFFLL;
  }
  else
  {
    v8 = (unsigned __int8 *)_StringObject.sharedUTF8.getter(v6, v7);
  }
LABEL_7:
  v12 = sub_10000C5D0(v8, v9, a3);
  swift_bridgeObjectRelease(v7);
  return v12;
}

unint64_t sub_10000C2B8(unint64_t result, uint64_t a2)
{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  unint64_t v11;
  _QWORD *v14;
  uint64_t v15;
  _OWORD *v16;
  _OWORD *v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;

  v3 = result;
  v4 = a2 + 64;
  v5 = -1 << *(_BYTE *)(a2 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    result = _HashTable.previousHole(before:)(result, a2 + 64, ~v5);
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v8 = (result + 1) & v7;
      do
      {
        v9 = *(_QWORD *)(a2 + 48);
        v10 = (_QWORD *)(v9 + 8 * v6);
        result = static Hasher._hash(seed:_:)(*(_QWORD *)(a2 + 40), *v10);
        v11 = result & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v11 >= v8 && v3 >= (uint64_t)v11)
          {
LABEL_16:
            v14 = (_QWORD *)(v9 + 8 * v3);
            if (v3 != v6 || v14 >= v10 + 1)
              *v14 = *v10;
            v15 = *(_QWORD *)(a2 + 56);
            v16 = (_OWORD *)(v15 + 16 * v3);
            v17 = (_OWORD *)(v15 + 16 * v6);
            if (v3 != v6 || (v3 = v6, v16 >= v17 + 1))
            {
              *v16 = *v17;
              v3 = v6;
            }
          }
        }
        else if (v11 >= v8 || v3 >= (uint64_t)v11)
        {
          goto LABEL_16;
        }
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    v18 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    v19 = *v18;
    v20 = (-1 << v3) - 1;
  }
  else
  {
    v18 = (uint64_t *)(v4 + 8 * (result >> 6));
    v20 = *v18;
    v19 = (-1 << result) - 1;
  }
  *v18 = v20 & v19;
  v21 = *(_QWORD *)(a2 + 16);
  v22 = __OFSUB__(v21, 1);
  v23 = v21 - 1;
  if (v22)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v23;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

uint64_t sub_10000C44C(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v10;
  char v11;
  unint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  uint64_t result;
  char v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  char v20;
  _QWORD *v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;

  v5 = v4;
  v10 = *v4;
  v12 = sub_10000A62C(a3);
  v13 = *(_QWORD *)(v10 + 16);
  v14 = (v11 & 1) == 0;
  result = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v16 = v11;
  v17 = *(_QWORD *)(v10 + 24);
  if (v17 >= result && (a4 & 1) != 0)
    goto LABEL_7;
  if (v17 >= result && (a4 & 1) == 0)
  {
    result = (uint64_t)sub_10000AE10();
LABEL_7:
    v18 = (_QWORD *)*v5;
    if ((v16 & 1) != 0)
    {
LABEL_8:
      v19 = (_QWORD *)(v18[7] + 16 * v12);
      result = swift_bridgeObjectRelease(v19[1]);
      *v19 = a1;
      v19[1] = a2;
      return result;
    }
LABEL_11:
    v18[(v12 >> 6) + 8] |= 1 << v12;
    *(_QWORD *)(v18[6] + 8 * v12) = a3;
    v21 = (_QWORD *)(v18[7] + 16 * v12);
    *v21 = a1;
    v21[1] = a2;
    v22 = v18[2];
    v23 = __OFADD__(v22, 1);
    v24 = v22 + 1;
    if (!v23)
    {
      v18[2] = v24;
      return result;
    }
    goto LABEL_14;
  }
  sub_10000B4D8(result, a4 & 1);
  result = sub_10000A62C(a3);
  if ((v16 & 1) == (v20 & 1))
  {
    v12 = result;
    v18 = (_QWORD *)*v5;
    if ((v16 & 1) != 0)
      goto LABEL_8;
    goto LABEL_11;
  }
LABEL_15:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for Int);
  __break(1u);
  return result;
}

unint64_t sub_10000C58C(unint64_t result, char a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v4;
  BOOL v5;
  uint64_t v6;

  a4[(result >> 6) + 8] |= 1 << result;
  *(_BYTE *)(a4[6] + result) = a2;
  *(_QWORD *)(a4[7] + 8 * result) = a3;
  v4 = a4[2];
  v5 = __OFADD__(v4, 1);
  v6 = v4 + 1;
  if (v5)
    __break(1u);
  else
    a4[2] = v6;
  return result;
}

unsigned __int8 *sub_10000C5D0(unsigned __int8 *result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  int v4;
  uint64_t v5;
  unsigned __int8 v6;
  unsigned __int8 v7;
  unsigned __int8 v8;
  uint64_t v9;
  unsigned __int8 *i;
  unsigned int v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  unsigned __int8 v15;
  unsigned __int8 v16;
  unsigned __int8 v17;
  unsigned __int8 *v18;
  unsigned int v19;
  char v20;
  uint64_t v21;
  unsigned __int8 v22;
  unsigned __int8 v23;
  unsigned __int8 v24;
  uint64_t v25;
  unsigned int v26;
  char v27;
  uint64_t v28;

  v3 = a2;
  v4 = *result;
  if (v4 != 43)
  {
    if (v4 == 45)
    {
      if (a2 >= 1)
      {
        v5 = a2 - 1;
        if (a2 != 1)
        {
          v6 = a3 + 48;
          v7 = a3 + 55;
          v8 = a3 + 87;
          if (a3 > 10)
          {
            v6 = 58;
          }
          else
          {
            v8 = 97;
            v7 = 65;
          }
          if (result)
          {
            v9 = 0;
            for (i = result + 1; ; ++i)
            {
              v11 = *i;
              if (v11 < 0x30 || v11 >= v6)
              {
                if (v11 < 0x41 || v11 >= v7)
                {
                  if (v11 < 0x61 || v11 >= v8)
                    return 0;
                  v12 = -87;
                }
                else
                {
                  v12 = -55;
                }
              }
              else
              {
                v12 = -48;
              }
              v13 = v9 * a3;
              if ((unsigned __int128)(v9 * (__int128)a3) >> 64 != (v9 * a3) >> 63)
                return 0;
              v9 = v13 - (v11 + v12);
              if (__OFSUB__(v13, (v11 + v12)))
                return 0;
              if (!--v5)
                return (unsigned __int8 *)v9;
            }
          }
          return 0;
        }
        return 0;
      }
      __break(1u);
      goto LABEL_65;
    }
    if (a2)
    {
      v22 = a3 + 48;
      v23 = a3 + 55;
      v24 = a3 + 87;
      if (a3 > 10)
      {
        v22 = 58;
      }
      else
      {
        v24 = 97;
        v23 = 65;
      }
      if (result)
      {
        v25 = 0;
        do
        {
          v26 = *result;
          if (v26 < 0x30 || v26 >= v22)
          {
            if (v26 < 0x41 || v26 >= v23)
            {
              if (v26 < 0x61 || v26 >= v24)
                return 0;
              v27 = -87;
            }
            else
            {
              v27 = -55;
            }
          }
          else
          {
            v27 = -48;
          }
          v28 = v25 * a3;
          if ((unsigned __int128)(v25 * (__int128)a3) >> 64 != (v25 * a3) >> 63)
            return 0;
          v25 = v28 + (v26 + v27);
          if (__OFADD__(v28, (v26 + v27)))
            return 0;
          ++result;
          --v3;
        }
        while (v3);
        return (unsigned __int8 *)(v28 + (v26 + v27));
      }
      return 0;
    }
    return 0;
  }
  if (a2 < 1)
  {
LABEL_65:
    __break(1u);
    return result;
  }
  v14 = a2 - 1;
  if (a2 == 1)
    return 0;
  v15 = a3 + 48;
  v16 = a3 + 55;
  v17 = a3 + 87;
  if (a3 > 10)
  {
    v15 = 58;
  }
  else
  {
    v17 = 97;
    v16 = 65;
  }
  if (!result)
    return 0;
  v9 = 0;
  v18 = result + 1;
  do
  {
    v19 = *v18;
    if (v19 < 0x30 || v19 >= v15)
    {
      if (v19 < 0x41 || v19 >= v16)
      {
        if (v19 < 0x61 || v19 >= v17)
          return 0;
        v20 = -87;
      }
      else
      {
        v20 = -55;
      }
    }
    else
    {
      v20 = -48;
    }
    v21 = v9 * a3;
    if ((unsigned __int128)(v9 * (__int128)a3) >> 64 != (v9 * a3) >> 63)
      return 0;
    v9 = v21 + (v19 + v20);
    if (__OFADD__(v21, (v19 + v20)))
      return 0;
    ++v18;
    --v14;
  }
  while (v14);
  return (unsigned __int8 *)v9;
}

uint64_t sub_10000C84C(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;

  v2 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000) == 0)
    v2 = a1;
  v3 = 7;
  if (((a2 >> 60) & ((a1 & 0x800000000000000) == 0)) != 0)
    v3 = 11;
  v4 = String.subscript.getter(15, v3 | (v2 << 16), a1, a2);
  v6 = v5;
  v9 = sub_10000C8C8(v4, v7, v8, v5);
  swift_bridgeObjectRelease(v6);
  return v9;
}

uint64_t sub_10000C8C8(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  unint64_t v5;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD v15[5];

  v5 = a3;
  if ((a4 & 0x1000000000000000) != 0)
  {
    v12 = sub_10000CA0C(a1, a2, a3, a4);
    if (v12)
    {
      v9 = v12;
      v8 = (unint64_t)sub_10000A478(v12, 0);
      v5 = sub_10000CAF8((unint64_t)v15, v8 + 32, v9, a1, a2, v5, a4);
      v13 = v15[3];
      swift_bridgeObjectRetain(a4);
      swift_bridgeObjectRelease(v13);
      if (v5 != v9)
      {
        __break(1u);
        goto LABEL_11;
      }
    }
    else
    {
      v8 = (unint64_t)&_swiftEmptyArrayStorage;
    }
    v14 = static String._uncheckedFromUTF8(_:)(v8 + 32, *(_QWORD *)(v8 + 16));
    swift_release(v8);
    return v14;
  }
  else
  {
    v8 = a1 >> 16;
    v9 = a2 >> 16;
    if ((a4 & 0x2000000000000000) == 0)
    {
      if ((a3 & 0x1000000000000000) != 0)
      {
        v10 = (a4 & 0xFFFFFFFFFFFFFFFLL) + 32;
LABEL_5:
        v10 += v8;
        return static String._uncheckedFromUTF8(_:)(v10, v9 - v8);
      }
LABEL_11:
      v10 = _StringObject.sharedUTF8.getter(v5, a4);
      if (!v10)
        return static String._uncheckedFromUTF8(_:)(v10, v9 - v8);
      goto LABEL_5;
    }
    v15[0] = a3;
    v15[1] = a4 & 0xFFFFFFFFFFFFFFLL;
    return static String._uncheckedFromUTF8(_:)((char *)v15 + v8, v9 - v8);
  }
}

unint64_t sub_10000CA0C(unint64_t result, unint64_t a2, unint64_t a3, unint64_t a4)
{
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;

  v7 = result;
  v8 = (a3 >> 59) & 1;
  if ((a4 & 0x1000000000000000) == 0)
    LOBYTE(v8) = 1;
  v9 = 4 << v8;
  if ((result & 0xC) == 4 << v8)
  {
    result = sub_10000A4DC(result, a3, a4);
    v7 = result;
  }
  if ((a2 & 0xC) == v9)
  {
    result = sub_10000A4DC(a2, a3, a4);
    a2 = result;
    if ((a4 & 0x1000000000000000) == 0)
      return (a2 >> 16) - (v7 >> 16);
  }
  else if ((a4 & 0x1000000000000000) == 0)
  {
    return (a2 >> 16) - (v7 >> 16);
  }
  v10 = HIBYTE(a4) & 0xF;
  if ((a4 & 0x2000000000000000) == 0)
    v10 = a3 & 0xFFFFFFFFFFFFLL;
  if (v10 < v7 >> 16)
  {
    __break(1u);
  }
  else if (v10 >= a2 >> 16)
  {
    return String.UTF8View._foreignDistance(from:to:)(v7, a2, a3, a4);
  }
  __break(1u);
  return result;
}

unint64_t sub_10000CAF8(unint64_t result, uint64_t a2, uint64_t a3, unint64_t a4, unint64_t a5, unint64_t a6, unint64_t a7)
{
  _QWORD *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  char v19;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v26;
  unint64_t v27;
  _QWORD v28[2];

  v9 = (_QWORD *)result;
  if (!a2)
    goto LABEL_5;
  if (!a3)
  {
    v12 = a4;
    v11 = 0;
    goto LABEL_33;
  }
  if (a3 < 0)
    goto LABEL_36;
  v10 = a5 >> 14;
  v27 = a4 >> 14;
  if (a4 >> 14 == a5 >> 14)
  {
LABEL_5:
    v11 = 0;
    v12 = a4;
LABEL_33:
    *v9 = a4;
    v9[1] = a5;
    v9[2] = a6;
    v9[3] = a7;
    v9[4] = v12;
    return v11;
  }
  v11 = 0;
  v14 = (a6 >> 59) & 1;
  if ((a7 & 0x1000000000000000) == 0)
    LOBYTE(v14) = 1;
  v15 = 4 << v14;
  v21 = (a7 & 0xFFFFFFFFFFFFFFFLL) + 32;
  v22 = a7 & 0xFFFFFFFFFFFFFFLL;
  v16 = HIBYTE(a7) & 0xF;
  if ((a7 & 0x2000000000000000) == 0)
    v16 = a6 & 0xFFFFFFFFFFFFLL;
  v23 = v16;
  v26 = a3 - 1;
  v12 = a4;
  while (1)
  {
    v17 = v12 & 0xC;
    result = v12;
    if (v17 == v15)
      result = sub_10000A4DC(v12, a6, a7);
    if (result >> 14 < v27 || result >> 14 >= v10)
      break;
    if ((a7 & 0x1000000000000000) != 0)
    {
      result = String.UTF8View._foreignSubscript(position:)();
      v19 = result;
      if (v17 != v15)
        goto LABEL_23;
    }
    else
    {
      v18 = result >> 16;
      if ((a7 & 0x2000000000000000) != 0)
      {
        v28[0] = a6;
        v28[1] = v22;
        v19 = *((_BYTE *)v28 + v18);
        if (v17 != v15)
          goto LABEL_23;
      }
      else
      {
        result = v21;
        if ((a6 & 0x1000000000000000) == 0)
          result = _StringObject.sharedUTF8.getter(a6, a7);
        v19 = *(_BYTE *)(result + v18);
        if (v17 != v15)
        {
LABEL_23:
          if ((a7 & 0x1000000000000000) == 0)
            goto LABEL_24;
          goto LABEL_27;
        }
      }
    }
    result = sub_10000A4DC(v12, a6, a7);
    v12 = result;
    if ((a7 & 0x1000000000000000) == 0)
    {
LABEL_24:
      v12 = (v12 & 0xFFFFFFFFFFFF0000) + 65540;
      goto LABEL_29;
    }
LABEL_27:
    if (v23 <= v12 >> 16)
      goto LABEL_35;
    v12 = String.UTF8View._foreignIndex(after:)(v12, a6, a7);
LABEL_29:
    *(_BYTE *)(a2 + v11) = v19;
    if (v26 == v11)
    {
      v11 = a3;
      goto LABEL_33;
    }
    ++v11;
    if (v10 == v12 >> 14)
      goto LABEL_33;
  }
  __break(1u);
LABEL_35:
  __break(1u);
LABEL_36:
  __break(1u);
  return result;
}

uint64_t _s20HomeWidgetLockScreen18CharacteristicKindO8rawValueACSgSS_tcfC_0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;

  v3 = _findStringSwitchCaseWithCache(cases:string:cache:)(&off_100079A80, a1, a2, &unk_100081770);
  swift_bridgeObjectRelease(a2);
  v4 = 0;
  result = 66;
  switch(v3)
  {
    case 0:
      goto LABEL_70;
    case 1:
      v4 = 1;
      goto LABEL_70;
    case 2:
      v4 = 2;
      goto LABEL_70;
    case 3:
      v4 = 3;
      goto LABEL_70;
    case 4:
      v4 = 4;
      goto LABEL_70;
    case 5:
      v4 = 5;
      goto LABEL_70;
    case 6:
      v4 = 6;
      goto LABEL_70;
    case 7:
      v4 = 7;
      goto LABEL_70;
    case 8:
      v4 = 8;
      goto LABEL_70;
    case 9:
      v4 = 9;
      goto LABEL_70;
    case 10:
      v4 = 10;
      goto LABEL_70;
    case 11:
      v4 = 11;
      goto LABEL_70;
    case 12:
      v4 = 12;
      goto LABEL_70;
    case 13:
      v4 = 13;
      goto LABEL_70;
    case 14:
      v4 = 14;
      goto LABEL_70;
    case 15:
      v4 = 15;
      goto LABEL_70;
    case 16:
      v4 = 16;
      goto LABEL_70;
    case 17:
      v4 = 17;
      goto LABEL_70;
    case 18:
      v4 = 18;
      goto LABEL_70;
    case 19:
      v4 = 19;
      goto LABEL_70;
    case 20:
      v4 = 20;
      goto LABEL_70;
    case 21:
      v4 = 21;
      goto LABEL_70;
    case 22:
      v4 = 22;
      goto LABEL_70;
    case 23:
      v4 = 23;
      goto LABEL_70;
    case 24:
      v4 = 24;
      goto LABEL_70;
    case 25:
      v4 = 25;
      goto LABEL_70;
    case 26:
      v4 = 26;
      goto LABEL_70;
    case 27:
      v4 = 27;
      goto LABEL_70;
    case 28:
      v4 = 28;
      goto LABEL_70;
    case 29:
      v4 = 29;
      goto LABEL_70;
    case 30:
      v4 = 30;
      goto LABEL_70;
    case 31:
      v4 = 31;
      goto LABEL_70;
    case 32:
      v4 = 32;
      goto LABEL_70;
    case 33:
      v4 = 33;
      goto LABEL_70;
    case 34:
      v4 = 34;
      goto LABEL_70;
    case 35:
      v4 = 35;
      goto LABEL_70;
    case 36:
      v4 = 36;
      goto LABEL_70;
    case 37:
      v4 = 37;
      goto LABEL_70;
    case 38:
      v4 = 38;
      goto LABEL_70;
    case 39:
      v4 = 39;
      goto LABEL_70;
    case 40:
      v4 = 40;
      goto LABEL_70;
    case 41:
      v4 = 41;
      goto LABEL_70;
    case 42:
      v4 = 42;
      goto LABEL_70;
    case 43:
      v4 = 43;
      goto LABEL_70;
    case 44:
      v4 = 44;
      goto LABEL_70;
    case 45:
      v4 = 45;
      goto LABEL_70;
    case 46:
      v4 = 46;
      goto LABEL_70;
    case 47:
      v4 = 47;
      goto LABEL_70;
    case 48:
      v4 = 48;
      goto LABEL_70;
    case 49:
      v4 = 49;
      goto LABEL_70;
    case 50:
      v4 = 50;
      goto LABEL_70;
    case 51:
      v4 = 51;
      goto LABEL_70;
    case 52:
      v4 = 52;
      goto LABEL_70;
    case 53:
      v4 = 53;
      goto LABEL_70;
    case 54:
      v4 = 54;
      goto LABEL_70;
    case 55:
      v4 = 55;
      goto LABEL_70;
    case 56:
      v4 = 56;
      goto LABEL_70;
    case 57:
      v4 = 57;
      goto LABEL_70;
    case 58:
      v4 = 58;
      goto LABEL_70;
    case 59:
      v4 = 59;
      goto LABEL_70;
    case 60:
      v4 = 60;
      goto LABEL_70;
    case 61:
      v4 = 61;
      goto LABEL_70;
    case 62:
      v4 = 62;
      goto LABEL_70;
    case 63:
      v4 = 63;
      goto LABEL_70;
    case 64:
      v4 = 64;
      goto LABEL_70;
    case 65:
      v4 = 65;
LABEL_70:
      result = v4;
      break;
    case 66:
      return result;
    case 67:
      result = 67;
      break;
    case 68:
      result = 68;
      break;
    case 69:
      result = 69;
      break;
    case 70:
      result = 70;
      break;
    case 71:
      result = 71;
      break;
    case 72:
      result = 72;
      break;
    case 73:
      result = 73;
      break;
    case 74:
      result = 74;
      break;
    case 75:
      result = 75;
      break;
    case 76:
      result = 76;
      break;
    case 77:
      result = 77;
      break;
    case 78:
      result = 78;
      break;
    case 79:
      result = 79;
      break;
    case 80:
      result = 80;
      break;
    case 81:
      result = 81;
      break;
    case 82:
      result = 82;
      break;
    case 83:
      result = 83;
      break;
    case 84:
      result = 84;
      break;
    case 85:
      result = 85;
      break;
    case 86:
      result = 86;
      break;
    case 87:
      result = 87;
      break;
    case 88:
      result = 88;
      break;
    case 89:
      result = 89;
      break;
    case 90:
      result = 90;
      break;
    case 91:
      result = 91;
      break;
    case 92:
      result = 92;
      break;
    case 93:
      result = 93;
      break;
    case 94:
      result = 94;
      break;
    case 95:
      result = 95;
      break;
    case 96:
      result = 96;
      break;
    case 97:
      result = 97;
      break;
    case 98:
      result = 98;
      break;
    case 99:
      result = 99;
      break;
    case 100:
      result = 100;
      break;
    case 101:
      result = 101;
      break;
    case 102:
      result = 102;
      break;
    case 103:
      result = 103;
      break;
    case 104:
      result = 104;
      break;
    case 105:
      result = 105;
      break;
    case 106:
      result = 106;
      break;
    case 107:
      result = 107;
      break;
    case 108:
      result = 108;
      break;
    case 109:
      result = 109;
      break;
    case 110:
      result = 110;
      break;
    case 111:
      result = 111;
      break;
    case 112:
      result = 112;
      break;
    case 113:
      result = 113;
      break;
    case 114:
      result = 114;
      break;
    case 115:
      result = 115;
      break;
    case 116:
      result = 116;
      break;
    case 117:
      result = 117;
      break;
    case 118:
      result = 118;
      break;
    case 119:
      result = 119;
      break;
    case 120:
      result = 120;
      break;
    case 121:
      result = 121;
      break;
    case 122:
      result = 122;
      break;
    case 123:
      result = 123;
      break;
    case 124:
      result = 124;
      break;
    case 125:
      result = 125;
      break;
    case 126:
      result = 126;
      break;
    case 127:
      result = 127;
      break;
    default:
      if ((unint64_t)(v3 - 128) >= 0x2E)
        result = 174;
      else
        result = v3 | 0xFFFFFF80;
      break;
  }
  return result;
}

char *sub_10000D17C(uint64_t a1, uint64_t a2, char *__dst, uint64_t a4)
{
  uint64_t v4;
  char *v5;
  size_t v6;
  char *v7;
  char *result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else
  {
    if (v4 < 0)
    {
      result = (char *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
      goto LABEL_9;
    }
    v5 = (char *)(a4 + 8 * a1 + 32);
    v6 = 8 * v4;
    v7 = &__dst[v6];
    if (v5 >= &__dst[v6] || &v5[v6] <= __dst)
    {
      memcpy(__dst, v5, v6);
      return v7;
    }
  }
  result = (char *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_9:
  __break(1u);
  return result;
}

uint64_t sub_10000D264(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t result;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  char v19;

  result = __DataStorage._bytes.getter();
  v11 = result;
  if (result)
  {
    result = __DataStorage._offset.getter();
    if (__OFSUB__(a1, result))
    {
LABEL_15:
      __break(1u);
      return result;
    }
    v11 += a1 - result;
  }
  v12 = __OFSUB__(a2, a1);
  v13 = a2 - a1;
  if (v12)
  {
    __break(1u);
    goto LABEL_15;
  }
  v14 = __DataStorage._length.getter();
  if (v14 >= v13)
    v15 = v13;
  else
    v15 = v14;
  v16 = v11 + v15;
  if (v11)
    v17 = v16;
  else
    v17 = 0;
  sub_10000BD48(v11, v17, a4, a5);
  if (!v5)
    v18 = v19;
  return v18 & 1;
}

void _s20HomeWidgetLockScreen18CharacteristicKindO5ValueO21__derived_enum_equalsySbAE_AEtFZ_0(uint64_t a1, uint64_t a2, char a3)
{
  __asm { BR              X10 }
}

unint64_t _s20HomeWidgetLockScreen18CharacteristicKindO6FormatO8rawValueAESgSS_tcfC_0(Swift::String string)
{
  void *object;
  Swift::String v2;
  unint64_t v3;

  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_10007AAF0, v2);
  swift_bridgeObjectRelease(object);
  if (v3 >= 0xB)
    return 11;
  else
    return v3;
}

unint64_t _s20HomeWidgetLockScreen18CharacteristicKindO4UnitO8rawValueAESgSS_tcfC_0(Swift::String string)
{
  void *object;
  Swift::String v2;
  unint64_t v3;

  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_10007AC18, v2);
  swift_bridgeObjectRelease(object);
  if (v3 >= 6)
    return 6;
  else
    return v3;
}

uint64_t sub_10000D7FC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int64_t v10;
  uint64_t result;
  int64_t v12;
  unint64_t v13;
  unint64_t i;
  unint64_t v16;
  int64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21[2];
  uint64_t v22;

  v22 = a1;
  v6 = a2 + 64;
  v7 = 1 << *(_BYTE *)(a2 + 32);
  v8 = -1;
  if (v7 < 64)
    v8 = ~(-1 << v7);
  v9 = v8 & *(_QWORD *)(a2 + 64);
  v10 = (unint64_t)(v7 + 63) >> 6;
  result = swift_bridgeObjectRetain(a2);
  v12 = 0;
  if (!v9)
    goto LABEL_5;
LABEL_4:
  v13 = __clz(__rbit64(v9));
  v9 &= v9 - 1;
  for (i = v13 | (v12 << 6); ; i = __clz(__rbit64(v16)) + (v12 << 6))
  {
    v18 = (uint64_t *)(*(_QWORD *)(a2 + 48) + 16 * i);
    v19 = v18[1];
    v21[0] = *v18;
    v21[1] = v19;
    swift_bridgeObjectRetain(v19);
    sub_1000083CC((unsigned __int8 *)&v22, v21, a3);
    if (v3)
    {
      v20 = v22;
      swift_release(a2);
      swift_bridgeObjectRelease(v19);
      return swift_bridgeObjectRelease(v20);
    }
    result = swift_bridgeObjectRelease(v19);
    if (v9)
      goto LABEL_4;
LABEL_5:
    if (__OFADD__(v12++, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v12 >= v10)
      goto LABEL_26;
    v16 = *(_QWORD *)(v6 + 8 * v12);
    if (!v16)
      break;
LABEL_17:
    v9 = (v16 - 1) & v16;
  }
  v17 = v12 + 1;
  if (v12 + 1 >= v10)
    goto LABEL_26;
  v16 = *(_QWORD *)(v6 + 8 * v17);
  if (v16)
    goto LABEL_16;
  v17 = v12 + 2;
  if (v12 + 2 >= v10)
    goto LABEL_26;
  v16 = *(_QWORD *)(v6 + 8 * v17);
  if (v16)
    goto LABEL_16;
  v17 = v12 + 3;
  if (v12 + 3 >= v10)
    goto LABEL_26;
  v16 = *(_QWORD *)(v6 + 8 * v17);
  if (v16)
    goto LABEL_16;
  v17 = v12 + 4;
  if (v12 + 4 >= v10)
  {
LABEL_26:
    swift_release(a2);
    return v22;
  }
  v16 = *(_QWORD *)(v6 + 8 * v17);
  if (v16)
  {
LABEL_16:
    v12 = v17;
    goto LABEL_17;
  }
  while (1)
  {
    v12 = v17 + 1;
    if (__OFADD__(v17, 1))
      break;
    if (v12 >= v10)
      goto LABEL_26;
    v16 = *(_QWORD *)(v6 + 8 * v12);
    ++v17;
    if (v16)
      goto LABEL_17;
  }
LABEL_28:
  __break(1u);
  return result;
}

unint64_t sub_10000D9B8(uint64_t a1)
{
  float v2;
  float v3;
  unint64_t v4;
  char v5;
  uint64_t v6;
  unint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  unint64_t v14;
  char v15;
  unint64_t v16;
  char v17;
  uint64_t v18;
  float v19;
  float v20;
  uint64_t v22;
  uint64_t v23;

  if (!a1)
    return 0;
  v2 = 0.0;
  v3 = 1.0;
  if (!*(_QWORD *)(a1 + 16))
    goto LABEL_28;
  v4 = sub_10000A5C8(0x74694264696C6156, 0xE900000000000073);
  if ((v5 & 1) != 0)
  {
    v23 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8 * v4);
    swift_unknownObjectRetain(v23);
    v6 = sub_100003704(&qword_100081C68);
    if ((swift_dynamicCast(&v22, &v23, (char *)&type metadata for Swift.AnyObject + 8, v6, 6) & 1) != 0)
      goto LABEL_8;
  }
  if (!*(_QWORD *)(a1 + 16))
    goto LABEL_28;
  v7 = sub_10000A5C8(0x6C615664696C6156, 0xEB00000000736575);
  if ((v8 & 1) == 0
    || (v23 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8 * v7),
        swift_unknownObjectRetain(v23),
        v9 = sub_100003704(&qword_100081C68),
        (swift_dynamicCast(&v22, &v23, (char *)&type metadata for Swift.AnyObject + 8, v9, 6) & 1) == 0))
  {
    if (*(_QWORD *)(a1 + 16))
    {
      v12 = sub_10000A5C8(0x566D756D696E694DLL, 0xEC00000065756C61);
      if ((v13 & 1) != 0)
      {
        v23 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8 * v12);
        swift_unknownObjectRetain(v23);
        if ((swift_dynamicCast(&v22, &v23, (char *)&type metadata for Swift.AnyObject + 8, &type metadata for Float, 6) & 1) != 0)v2 = *(float *)&v22;
      }
      if (*(_QWORD *)(a1 + 16))
      {
        v14 = sub_10000A5C8(0x566D756D6978614DLL, 0xEC00000065756C61);
        if ((v15 & 1) != 0)
        {
          v23 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8 * v14);
          swift_unknownObjectRetain(v23);
          if (swift_dynamicCast(&v22, &v23, (char *)&type metadata for Swift.AnyObject + 8, &type metadata for Float, 6))v3 = *(float *)&v22;
        }
        if (*(_QWORD *)(a1 + 16))
        {
          v16 = sub_10000A5C8(0x756C615670657473, 0xE900000000000065);
          if ((v17 & 1) != 0)
          {
            v18 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8 * v16);
            swift_unknownObjectRetain(v18);
            swift_bridgeObjectRelease(a1);
            v23 = v18;
            if ((swift_dynamicCast(&v22, &v23, (char *)&type metadata for Swift.AnyObject + 8, &type metadata for Float, 6) & 1) != 0)
            {
              if (v3 >= v2)
                v19 = v2;
              else
                v19 = v3;
              if (v2 > v3)
                v20 = v2;
              else
                v20 = v3;
              return LODWORD(v19) | ((unint64_t)LODWORD(v20) << 32);
            }
LABEL_29:
            if (v2 > v3)
              v20 = v2;
            else
              v20 = v3;
            if (v3 >= v2)
              v19 = v2;
            else
              v19 = v3;
            return LODWORD(v19) | ((unint64_t)LODWORD(v20) << 32);
          }
        }
      }
    }
LABEL_28:
    swift_bridgeObjectRelease(a1);
    goto LABEL_29;
  }
LABEL_8:
  swift_bridgeObjectRelease(a1);
  v10 = v22;
  swift_bridgeObjectRetain(v22);
  v11 = sub_10000D7FC((uint64_t)&_swiftEmptyDictionarySingleton, v10, v10);
  swift_bridgeObjectRelease_n(v10, 2);
  return v11;
}

uint64_t sub_10000DCE0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  BOOL v7;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return 0;
  v2 = 0;
  v3 = (_QWORD *)(a1 + 40);
  do
  {
    v4 = *(v3 - 1);
    v5 = *v3;
    v6 = v4 == 0x5264657275636573 && v5 == 0xEB00000000646165;
    if (v6
      || (_stringCompareWithSmolCheck(_:_:expecting:)(0x5264657275636573, 0xEB00000000646165, *(v3 - 1), *v3, 0) & 1) != 0)
    {
      v2 |= 1uLL;
    }
    else
    {
      v7 = v4 == 0x5764657275636573 && v5 == 0xEC00000065746972;
      if ((v7
         || (_stringCompareWithSmolCheck(_:_:expecting:)(0x5764657275636573, 0xEC00000065746972, v4, v5, 0) & 1) != 0)
        && (v2 & 2) == 0)
      {
        v2 |= 2uLL;
      }
    }
    v3 += 2;
    --v1;
  }
  while (v1);
  return v2;
}

uint64_t sub_10000DE04(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  BOOL v7;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return 0;
  v2 = 0;
  v3 = (_QWORD *)(a1 + 40);
  do
  {
    v4 = *(v3 - 1);
    v5 = *v3;
    v6 = v4 == 1684104562 && v5 == 0xE400000000000000;
    if (v6
      || (_stringCompareWithSmolCheck(_:_:expecting:)(1684104562, 0xE400000000000000, *(v3 - 1), *v3, 0) & 1) != 0)
    {
      v2 |= 1uLL;
    }
    else
    {
      v7 = v4 == 0x6574697277 && v5 == 0xE500000000000000;
      if (v7
        || (_stringCompareWithSmolCheck(_:_:expecting:)(0x6574697277, 0xE500000000000000, v4, v5, 0) & 1) != 0)
      {
        v2 |= 2uLL;
      }
      else if (v4 == 0x796669746F6E63 && v5 == 0xE700000000000000
             || (_stringCompareWithSmolCheck(_:_:expecting:)(0x796669746F6E63, 0xE700000000000000, v4, v5, 0) & 1) != 0)
      {
        v2 |= 4uLL;
      }
      else if ((v4 == 0x6669746F6E636E75 && v5 == 0xE900000000000079
              || (_stringCompareWithSmolCheck(_:_:expecting:)(0x6669746F6E636E75, 0xE900000000000079, v4, v5, 0) & 1) != 0)
             && (v2 & 8) == 0)
      {
        v2 |= 8uLL;
      }
    }
    v3 += 2;
    --v1;
  }
  while (v1);
  return v2;
}

uint64_t sub_10000DFA0(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v6;
  unint64_t v7;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v4 < 0)
  {
LABEL_9:
    result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
    goto LABEL_11;
  }
  v6 = a4 + 72 * a1 + 32;
  v7 = a3 + 72 * v4;
  if (v6 >= v7 || v6 + 72 * v4 <= a3)
  {
    sub_100003704(&qword_100081C48);
    swift_arrayInitWithCopy(a3);
    return v7;
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_10000E0AC(uint64_t a1, char a2, _QWORD *a3)
{
  uint64_t v4;
  uint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unsigned __int8 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  char v16;
  unint64_t v17;
  uint64_t v18;
  _BOOL8 v19;
  uint64_t v20;
  char v21;
  unint64_t v22;
  char v23;
  _QWORD *v24;
  unint64_t v25;
  uint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t result;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  char v36;
  char v37;

  v4 = *(_QWORD *)(a1 + 16);
  swift_bridgeObjectRetain(a1);
  if (v4)
  {
    v5 = (uint64_t *)(a1 + 48);
    do
    {
      v9 = *((unsigned int *)v5 + 8) | ((unint64_t)*((unsigned __int8 *)v5 + 36) << 32);
      v36 = *((_BYTE *)v5 + 16);
      v37 = *((_BYTE *)v5 + 17);
      v35 = *((_BYTE *)v5 - 8);
      v10 = *((_BYTE *)v5 - 16);
      v12 = v5[5];
      v11 = v5[6];
      v13 = v5[3];
      v14 = v5[1];
      v34 = *v5;
      swift_bridgeObjectRetain(v14);
      sub_10000E454(v13, v9);
      if (!v14)
        break;
      v32 = v12;
      v33 = v11;
      v31 = v4;
      v15 = (_QWORD *)*a3;
      v17 = sub_10000A554(v10);
      v18 = v15[2];
      v19 = (v16 & 1) == 0;
      v20 = v18 + v19;
      if (__OFADD__(v18, v19))
      {
        __break(1u);
LABEL_17:
        __break(1u);
LABEL_18:
        result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for CharacteristicKind);
        __break(1u);
        return result;
      }
      v21 = v16;
      if (v15[3] >= v20)
      {
        if ((a2 & 1) == 0)
          sub_10000AC20();
      }
      else
      {
        sub_10000B158(v20, a2 & 1);
        v22 = sub_10000A554(v10);
        if ((v21 & 1) != (v23 & 1))
          goto LABEL_18;
        v17 = v22;
      }
      v24 = (_QWORD *)*a3;
      if ((v21 & 1) != 0)
      {
        v6 = v24[7] + (v17 << 6);
        v7 = *(_QWORD *)(v6 + 32);
        v8 = *(unsigned int *)(v6 + 40) | ((unint64_t)*(unsigned __int8 *)(v6 + 44) << 32);
        swift_bridgeObjectRelease(*(_QWORD *)(v6 + 16));
        sub_100013200(v7, v8);
        *(_BYTE *)v6 = v35;
        *(_QWORD *)(v6 + 8) = v34;
        *(_QWORD *)(v6 + 16) = v14;
        *(_BYTE *)(v6 + 24) = v36;
        *(_BYTE *)(v6 + 25) = v37;
        *(_QWORD *)(v6 + 32) = v13;
        *(_BYTE *)(v6 + 44) = BYTE4(v9);
        *(_DWORD *)(v6 + 40) = v9;
        *(_QWORD *)(v6 + 48) = v32;
        *(_QWORD *)(v6 + 56) = v33;
      }
      else
      {
        v24[(v17 >> 6) + 8] |= 1 << v17;
        *(_BYTE *)(v24[6] + v17) = v10;
        v25 = v24[7] + (v17 << 6);
        *(_BYTE *)v25 = v35;
        *(_QWORD *)(v25 + 8) = v34;
        *(_QWORD *)(v25 + 16) = v14;
        *(_BYTE *)(v25 + 24) = v36;
        *(_BYTE *)(v25 + 25) = v37;
        *(_QWORD *)(v25 + 32) = v13;
        *(_BYTE *)(v25 + 44) = BYTE4(v9);
        *(_DWORD *)(v25 + 40) = v9;
        *(_QWORD *)(v25 + 48) = v32;
        *(_QWORD *)(v25 + 56) = v33;
        v26 = v24[2];
        v27 = __OFADD__(v26, 1);
        v28 = v26 + 1;
        if (v27)
          goto LABEL_17;
        v24[2] = v28;
      }
      v5 += 9;
      a2 = 1;
      v4 = v31 - 1;
    }
    while (v31 != 1);
  }
  return swift_bridgeObjectRelease(a1);
}

uint64_t _s20HomeWidgetLockScreen18CharacteristicKindO1loiySbAC_ACtFZ_0(unsigned __int8 a1, unsigned __int8 a2)
{
  uint64_t v4;
  _QWORD *v5;
  unint64_t v6;
  char v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char v12;
  unint64_t v13;
  unint64_t v14;
  char v15;

  if (qword_100081630 != -1)
    swift_once(&qword_100081630, sub_100004B54);
  v4 = 0x6E776F6E6B6E75;
  v5 = off_1000817D0;
  if (!*((_QWORD *)off_1000817D0 + 2))
  {
    v9 = 0xE700000000000000;
    v10 = 0x6E776F6E6B6E75;
    goto LABEL_12;
  }
  v6 = sub_10000A554(a1);
  if ((v7 & 1) != 0)
  {
    v8 = v5[7] + (v6 << 6);
    v10 = *(_QWORD *)(v8 + 8);
    v9 = *(_QWORD *)(v8 + 16);
    swift_bridgeObjectRetain(v9);
    if (!v5[2])
      goto LABEL_12;
  }
  else
  {
    v9 = 0xE700000000000000;
    v10 = 0x6E776F6E6B6E75;
    if (!v5[2])
      goto LABEL_12;
  }
  v11 = sub_10000A554(a2);
  if ((v12 & 1) != 0)
  {
    v13 = v5[7] + (v11 << 6);
    v4 = *(_QWORD *)(v13 + 8);
    v14 = *(_QWORD *)(v13 + 16);
    swift_bridgeObjectRetain(v14);
    if (v10 != v4)
      goto LABEL_15;
    goto LABEL_13;
  }
LABEL_12:
  v14 = 0xE700000000000000;
  if (v10 != 0x6E776F6E6B6E75)
  {
LABEL_15:
    v15 = _stringCompareWithSmolCheck(_:_:expecting:)(v10, v9, v4, v14, 1);
    goto LABEL_16;
  }
LABEL_13:
  if (v9 != v14)
    goto LABEL_15;
  v15 = 0;
  v14 = v9;
LABEL_16:
  swift_bridgeObjectRelease(v9);
  swift_bridgeObjectRelease(v14);
  return v15 & 1;
}

uint64_t sub_10000E454(uint64_t result, uint64_t a2)
{
  if (BYTE4(a2) != 255)
    return sub_10000E468(result, a2, BYTE4(a2));
  return result;
}

uint64_t sub_10000E468(uint64_t result, uint64_t a2, unsigned __int8 a3)
{
  if (a3 <= 1u)
    return swift_bridgeObjectRetain(result);
  return result;
}

uint64_t sub_10000E47C(uint64_t result, unint64_t a2, char a3)
{
  if (a3 == 10 || a3 == 9)
    return sub_10000E4A8(result, a2);
  if (a3 == 8)
    return swift_bridgeObjectRetain(a2);
  return result;
}

uint64_t sub_10000E4A8(uint64_t result, unint64_t a2)
{
  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2)
      return result;
    swift_retain(result);
  }
  return swift_retain(a2 & 0x3FFFFFFFFFFFFFFFLL);
}

uint64_t sub_10000E4EC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100003704(&qword_1000817D8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10000E534(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100003704(&qword_1000817D8);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

_OWORD *sub_10000E574(_OWORD *a1, _OWORD *a2)
{
  __int128 v2;

  v2 = a1[1];
  *a2 = *a1;
  a2[1] = v2;
  return a2;
}

uint64_t sub_10000E584(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 24) = v3;
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t sub_10000E5C0(uint64_t result, unint64_t a2)
{
  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2)
      return result;
    swift_release(result);
  }
  return swift_release(a2 & 0x3FFFFFFFFFFFFFFFLL);
}

uint64_t sub_10000E604(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v4 < 0)
  {
LABEL_9:
    result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
    goto LABEL_11;
  }
  v5 = a4 + 56 * a1 + 32;
  v6 = a3 + 56 * v4;
  if (v5 >= v6 || v5 + 56 * v4 <= a3)
  {
    swift_arrayInitWithCopy(a3);
    return v6;
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_10000E6F8(char a1, unsigned __int8 a2)
{
  if (a1 == 2)
    return 0;
  else
    return ((uint64_t (*)(_QWORD, _QWORD, uint64_t))((char *)sub_10000E740 + 4 * byte_100060BF6[a2]))(0, 0, 255);
}

uint64_t sub_10000E740@<X0>(uint64_t a1@<X8>)
{
  return a1;
}

uint64_t sub_10000E750@<X0>(uint64_t a1@<X8>)
{
  return a1;
}

uint64_t sub_10000E760@<X0>(uint64_t a1@<X8>)
{
  return a1;
}

uint64_t sub_10000E770@<X0>(uint64_t a1@<X8>)
{
  return a1;
}

uint64_t sub_10000E780@<X0>(uint64_t a1@<X8>)
{
  return a1;
}

uint64_t sub_10000E790@<X0>(uint64_t a1@<X8>)
{
  return a1;
}

uint64_t sub_10000E7A0@<X0>(int a1@<W8>)
{
  if (a1)
    return 0x3FF0000000000000;
  else
    return 0;
}

uint64_t sub_10000E7B8@<X0>(int a1@<W8>)
{
  uint64_t v1;
  unint64_t v2;
  unint64_t v3;

  if (a1)
    v1 = 1702195828;
  else
    v1 = 0x65736C6166;
  if (a1)
    v2 = 0xE400000000000000;
  else
    v2 = 0xE500000000000000;
  v3 = v2;
  String.append(_:)(*(Swift::String *)&v1);
  swift_bridgeObjectRelease(v2);
  return 0;
}

uint64_t sub_10000E824(uint64_t result, unint64_t a2, char a3)
{
  if (a3 == 10 || a3 == 9)
    return sub_10000E5C0(result, a2);
  if (a3 == 8)
    return swift_bridgeObjectRelease(a2);
  return result;
}

_QWORD *sub_10000E850(_QWORD *result, uint64_t a2)
{
  if ((*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80) & 0x20000) != 0)
    return (_QWORD *)(*result
                    + ((*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80) + 16) & ~(unint64_t)*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80)));
  return result;
}

unint64_t sub_10000E874()
{
  unint64_t result;

  result = qword_100081848;
  if (!qword_100081848)
  {
    result = swift_getWitnessTable(&unk_100062AE8, &type metadata for CharacteristicKind.Value.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100081848);
  }
  return result;
}

unint64_t sub_10000E8B8()
{
  unint64_t result;

  result = qword_100081850;
  if (!qword_100081850)
  {
    result = swift_getWitnessTable(&unk_100062A98, &type metadata for CharacteristicKind.Value.DataCodingKeys);
    atomic_store(result, (unint64_t *)&qword_100081850);
  }
  return result;
}

unint64_t sub_10000E8FC()
{
  unint64_t result;

  result = qword_100081858;
  if (!qword_100081858)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Data, &type metadata for Data);
    atomic_store(result, (unint64_t *)&qword_100081858);
  }
  return result;
}

unint64_t sub_10000E940()
{
  unint64_t result;

  result = qword_100081860;
  if (!qword_100081860)
  {
    result = swift_getWitnessTable(&unk_100062A48, &type metadata for CharacteristicKind.Value.Tlv8CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100081860);
  }
  return result;
}

unint64_t sub_10000E984()
{
  unint64_t result;

  result = qword_100081868;
  if (!qword_100081868)
  {
    result = swift_getWitnessTable(&unk_1000629F8, &type metadata for CharacteristicKind.Value.StringCodingKeys);
    atomic_store(result, (unint64_t *)&qword_100081868);
  }
  return result;
}

unint64_t sub_10000E9C8()
{
  unint64_t result;

  result = qword_100081870;
  if (!qword_100081870)
  {
    result = swift_getWitnessTable(&unk_1000629A8, &type metadata for CharacteristicKind.Value.FloatCodingKeys);
    atomic_store(result, (unint64_t *)&qword_100081870);
  }
  return result;
}

unint64_t sub_10000EA0C()
{
  unint64_t result;

  result = qword_100081878;
  if (!qword_100081878)
  {
    result = swift_getWitnessTable(&unk_100062958, &type metadata for CharacteristicKind.Value.Int32CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100081878);
  }
  return result;
}

unint64_t sub_10000EA50()
{
  unint64_t result;

  result = qword_100081880;
  if (!qword_100081880)
  {
    result = swift_getWitnessTable(&unk_100062908, &type metadata for CharacteristicKind.Value.IntCodingKeys);
    atomic_store(result, (unint64_t *)&qword_100081880);
  }
  return result;
}

unint64_t sub_10000EA94()
{
  unint64_t result;

  result = qword_100081888;
  if (!qword_100081888)
  {
    result = swift_getWitnessTable(&unk_1000628B8, &type metadata for CharacteristicKind.Value.Uint64CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100081888);
  }
  return result;
}

unint64_t sub_10000EAD8()
{
  unint64_t result;

  result = qword_100081890;
  if (!qword_100081890)
  {
    result = swift_getWitnessTable(&unk_100062868, &type metadata for CharacteristicKind.Value.Uint32CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100081890);
  }
  return result;
}

unint64_t sub_10000EB1C()
{
  unint64_t result;

  result = qword_100081898;
  if (!qword_100081898)
  {
    result = swift_getWitnessTable(&unk_100062818, &type metadata for CharacteristicKind.Value.Uint16CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100081898);
  }
  return result;
}

unint64_t sub_10000EB60()
{
  unint64_t result;

  result = qword_1000818A0;
  if (!qword_1000818A0)
  {
    result = swift_getWitnessTable(&unk_1000627C8, &type metadata for CharacteristicKind.Value.Uint8CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000818A0);
  }
  return result;
}

unint64_t sub_10000EBA4()
{
  unint64_t result;

  result = qword_1000818A8;
  if (!qword_1000818A8)
  {
    result = swift_getWitnessTable(&unk_100062778, &type metadata for CharacteristicKind.Value.BoolCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000818A8);
  }
  return result;
}

unint64_t sub_10000EBE8()
{
  unint64_t result;

  result = qword_1000818B0;
  if (!qword_1000818B0)
  {
    result = swift_getWitnessTable(&unk_100062728, &type metadata for CharacteristicKind.Value.NullCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000818B0);
  }
  return result;
}

uint64_t sub_10000EC2C(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  char v17;

  if (a1 == 1819047278 && a2 == 0xE400000000000000)
  {
    v5 = 0xE400000000000000;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(1819047278, 0xE400000000000000, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 1819242338 && a2 == 0xE400000000000000)
  {
    v7 = 0xE400000000000000;
LABEL_14:
    swift_bridgeObjectRelease(v7);
    return 1;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(1819242338, 0xE400000000000000, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
    goto LABEL_14;
  }
  if (a1 == 0x38746E6975 && a2 == 0xE500000000000000)
  {
    v8 = 0xE500000000000000;
LABEL_20:
    swift_bridgeObjectRelease(v8);
    return 2;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x38746E6975, 0xE500000000000000, a1, a2, 0) & 1) != 0)
  {
    v8 = a2;
    goto LABEL_20;
  }
  if (a1 == 0x3631746E6975 && a2 == 0xE600000000000000)
  {
    v9 = 0xE600000000000000;
LABEL_26:
    swift_bridgeObjectRelease(v9);
    return 3;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x3631746E6975, 0xE600000000000000, a1, a2, 0) & 1) != 0)
  {
    v9 = a2;
    goto LABEL_26;
  }
  if (a1 == 0x3233746E6975 && a2 == 0xE600000000000000)
  {
    v10 = 0xE600000000000000;
LABEL_32:
    swift_bridgeObjectRelease(v10);
    return 4;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x3233746E6975, 0xE600000000000000, a1, a2, 0) & 1) != 0)
  {
    v10 = a2;
    goto LABEL_32;
  }
  if (a1 == 0x3436746E6975 && a2 == 0xE600000000000000)
  {
    v11 = 0xE600000000000000;
LABEL_38:
    swift_bridgeObjectRelease(v11);
    return 5;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x3436746E6975, 0xE600000000000000, a1, a2, 0) & 1) != 0)
  {
    v11 = a2;
    goto LABEL_38;
  }
  if (a1 == 7630441 && a2 == 0xE300000000000000)
  {
    v12 = 0xE300000000000000;
LABEL_44:
    swift_bridgeObjectRelease(v12);
    return 6;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(7630441, 0xE300000000000000, a1, a2, 0) & 1) != 0)
  {
    v12 = a2;
    goto LABEL_44;
  }
  if (a1 == 0x3233746E69 && a2 == 0xE500000000000000)
  {
    v13 = 0xE500000000000000;
LABEL_50:
    swift_bridgeObjectRelease(v13);
    return 7;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x3233746E69, 0xE500000000000000, a1, a2, 0) & 1) != 0)
  {
    v13 = a2;
    goto LABEL_50;
  }
  if (a1 == 0x74616F6C66 && a2 == 0xE500000000000000)
  {
    v14 = 0xE500000000000000;
LABEL_56:
    swift_bridgeObjectRelease(v14);
    return 8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x74616F6C66, 0xE500000000000000, a1, a2, 0) & 1) != 0)
  {
    v14 = a2;
    goto LABEL_56;
  }
  if (a1 == 0x676E69727473 && a2 == 0xE600000000000000)
  {
    v15 = 0xE600000000000000;
LABEL_62:
    swift_bridgeObjectRelease(v15);
    return 9;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x676E69727473, 0xE600000000000000, a1, a2, 0) & 1) != 0)
  {
    v15 = a2;
    goto LABEL_62;
  }
  if (a1 == 947285108 && a2 == 0xE400000000000000)
  {
    v16 = 0xE400000000000000;
LABEL_68:
    swift_bridgeObjectRelease(v16);
    return 10;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(947285108, 0xE400000000000000, a1, a2, 0) & 1) != 0)
  {
    v16 = a2;
    goto LABEL_68;
  }
  if (a1 == 1635017060 && a2 == 0xE400000000000000)
  {
    swift_bridgeObjectRelease(0xE400000000000000);
    return 11;
  }
  else
  {
    v17 = _stringCompareWithSmolCheck(_:_:expecting:)(1635017060, 0xE400000000000000, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v17 & 1) != 0)
      return 11;
    else
      return 12;
  }
}

uint64_t sub_10000F07C(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD v38[5];
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  char *v61;
  char *v62;
  char *v63;
  char *v64;
  char *v65;
  char *v66;
  char *v67;
  char *v68;
  char *v69;
  char *v70;
  _QWORD *v71;
  uint64_t v72;

  v2 = sub_100003704(&qword_100081BC0);
  v3 = *(_QWORD *)(v2 - 8);
  v58 = v2;
  v59 = v3;
  __chkstk_darwin();
  v65 = (char *)v38 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_100003704(&qword_100081BC8);
  v56 = *(_QWORD *)(v5 - 8);
  v57 = v5;
  __chkstk_darwin();
  v70 = (char *)v38 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_100003704(&qword_100081BD0);
  v54 = *(_QWORD *)(v7 - 8);
  v55 = v7;
  __chkstk_darwin();
  v69 = (char *)v38 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v53 = sub_100003704(&qword_100081BD8);
  v52 = *(_QWORD *)(v53 - 8);
  __chkstk_darwin();
  v64 = (char *)v38 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v51 = sub_100003704(&qword_100081BE0);
  v50 = *(_QWORD *)(v51 - 8);
  __chkstk_darwin();
  v68 = (char *)v38 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v49 = sub_100003704(&qword_100081BE8);
  v46 = *(_QWORD *)(v49 - 8);
  __chkstk_darwin();
  v62 = (char *)v38 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v48 = sub_100003704(&qword_100081BF0);
  v47 = *(_QWORD *)(v48 - 8);
  __chkstk_darwin();
  v67 = (char *)v38 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v45 = sub_100003704(&qword_100081BF8);
  v44 = *(_QWORD *)(v45 - 8);
  __chkstk_darwin();
  v63 = (char *)v38 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v43 = sub_100003704(&qword_100081C00);
  v42 = *(_QWORD *)(v43 - 8);
  __chkstk_darwin();
  v66 = (char *)v38 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v41 = sub_100003704(&qword_100081C08);
  v40 = *(_QWORD *)(v41 - 8);
  __chkstk_darwin();
  v61 = (char *)v38 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v39 = sub_100003704(&qword_100081C10);
  v38[4] = *(_QWORD *)(v39 - 8);
  __chkstk_darwin();
  v60 = (char *)v38 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = sub_100003704(&qword_100081C18);
  v18 = *(_QWORD *)(v17 - 8);
  __chkstk_darwin();
  v20 = (char *)v38 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = sub_100003704(&qword_100081C20);
  v22 = *(_QWORD *)(v21 - 8);
  __chkstk_darwin();
  v24 = (char *)v38 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = a1[3];
  v26 = a1[4];
  v71 = a1;
  sub_10000E850(a1, v25);
  v27 = sub_10000E874();
  v28 = v72;
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for CharacteristicKind.Value.CodingKeys, &type metadata for CharacteristicKind.Value.CodingKeys, v27, v25, v26);
  if (!v28)
  {
    v38[2] = v20;
    v38[0] = v18;
    v38[1] = v17;
    v38[3] = 0;
    v72 = v22;
    v29 = KeyedDecodingContainer.allKeys.getter(v21);
    v30 = v29;
    v31 = v21;
    if (*(_QWORD *)(v29 + 16) == 1)
      __asm { BR              X10 }
    v21 = type metadata accessor for DecodingError(0);
    swift_allocError(v21, &protocol witness table for DecodingError, 0, 0);
    v32 = v30;
    v34 = v33;
    sub_100003704(&qword_100081BA0);
    *v34 = &type metadata for CharacteristicKind.Value;
    v35 = KeyedDecodingContainer.codingPath.getter(v31);
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)(v35, 0xD00000000000002BLL, 0x8000000100067BA0, 0);
    v36 = (*(uint64_t (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v21 - 8) + 104))(v34, enum case for DecodingError.typeMismatch(_:), v21);
    swift_willThrow(v36);
    swift_bridgeObjectRelease(v32);
    (*(void (**)(char *, uint64_t))(v72 + 8))(v24, v31);
  }
  sub_1000130F0(v71);
  return v21;
}

void sub_10000FAB8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  *(_BYTE *)(v4 - 104) = 10;
  v5 = sub_10000E940();
  v6 = v0;
  v7 = *(_QWORD *)(v4 - 392);
  KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)(&type metadata for CharacteristicKind.Value.Tlv8CodingKeys, v4 - 104, v0, &type metadata for CharacteristicKind.Value.Tlv8CodingKeys, v5);
  if (v7)
    JUMPOUT(0x10000FB00);
  sub_1000131B8();
  v8 = *(_QWORD *)(v4 - 232);
  KeyedDecodingContainer.decode<A>(_:forKey:)((_QWORD *)(v4 - 104), &type metadata for Data);
  v9 = *(_QWORD *)(v4 - 112);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 240) + 8))(v3, v8);
  swift_bridgeObjectRelease(v1);
  (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v2, v6);
  sub_1000130F0(*(_QWORD **)(v4 - 120));
  JUMPOUT(0x10000FA84);
}

void sub_10000FB14()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  *(_BYTE *)(v3 - 104) = 11;
  v4 = sub_10000E8B8();
  v5 = *(_QWORD *)(v3 - 168);
  v6 = v0;
  v7 = *(_QWORD *)(v3 - 392);
  KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)(&type metadata for CharacteristicKind.Value.DataCodingKeys, v3 - 104, v0, &type metadata for CharacteristicKind.Value.DataCodingKeys, v4);
  if (v7)
  {
    swift_bridgeObjectRelease(v1);
    JUMPOUT(0x10000FA74);
  }
  sub_1000131B8();
  v8 = *(_QWORD *)(v3 - 224);
  KeyedDecodingContainer.decode<A>(_:forKey:)((_QWORD *)(v3 - 104), &type metadata for Data);
  v9 = *(_QWORD *)(v3 - 112);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 216) + 8))(v5, v8);
  swift_bridgeObjectRelease(v1);
  (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v2, v6);
  JUMPOUT(0x10000FF88);
}

unint64_t sub_10000FF94()
{
  unint64_t result;

  result = qword_1000818C0;
  if (!qword_1000818C0)
  {
    result = swift_getWitnessTable(&unk_1000626D8, &type metadata for CharacteristicKind.Constraints.MinMaxStepValues.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000818C0);
  }
  return result;
}

uint64_t sub_10000FFD8(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v7;
  char v8;

  if (a1 == 0x566D756D696E696DLL && a2 == 0xEC00000065756C61)
  {
    v5 = 0xEC00000065756C61;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x566D756D696E696DLL, 0xEC00000065756C61, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x566D756D6978616DLL && a2 == 0xEC00000065756C61)
  {
    v7 = 0xEC00000065756C61;
LABEL_14:
    swift_bridgeObjectRelease(v7);
    return 1;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x566D756D6978616DLL, 0xEC00000065756C61, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
    goto LABEL_14;
  }
  if (a1 == 0x756C615670657473 && a2 == 0xE900000000000065)
  {
    swift_bridgeObjectRelease(0xE900000000000065);
    return 2;
  }
  else
  {
    v8 = _stringCompareWithSmolCheck(_:_:expecting:)(0x756C615670657473, 0xE900000000000065, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v8 & 1) != 0)
      return 2;
    else
      return 3;
  }
}

float sub_100010164(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  float v9;
  float v10;
  uint64_t v12;
  char v13;
  char v14;
  char v15;

  v2 = sub_100003704(&qword_100081BB8);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin();
  v5 = (char *)&v12 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = a1[3];
  v7 = a1[4];
  sub_10000E850(a1, v6);
  v8 = sub_10000FF94();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for CharacteristicKind.Constraints.MinMaxStepValues.CodingKeys, &type metadata for CharacteristicKind.Constraints.MinMaxStepValues.CodingKeys, v8, v6, v7);
  v15 = 0;
  KeyedDecodingContainer.decode(_:forKey:)(&v15, v2);
  v10 = v9;
  v14 = 1;
  KeyedDecodingContainer.decode(_:forKey:)(&v14, v2);
  v13 = 2;
  KeyedDecodingContainer.decode(_:forKey:)(&v13, v2);
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  sub_1000130F0(a1);
  return v10;
}

unint64_t sub_1000102E8()
{
  unint64_t result;

  result = qword_1000818E8;
  if (!qword_1000818E8)
  {
    result = swift_getWitnessTable(&unk_100062688, &type metadata for CharacteristicKind.Constraints.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000818E8);
  }
  return result;
}

unint64_t sub_10001032C()
{
  unint64_t result;

  result = qword_1000818F0;
  if (!qword_1000818F0)
  {
    result = swift_getWitnessTable(&unk_100062638, &type metadata for CharacteristicKind.Constraints.MinMaxStepValuesCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000818F0);
  }
  return result;
}

unint64_t sub_100010370()
{
  unint64_t result;

  result = qword_1000818F8;
  if (!qword_1000818F8)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for CharacteristicKind.Constraints.MinMaxStepValues, &type metadata for CharacteristicKind.Constraints.MinMaxStepValues);
    atomic_store(result, (unint64_t *)&qword_1000818F8);
  }
  return result;
}

unint64_t sub_1000103B4()
{
  unint64_t result;

  result = qword_100081900;
  if (!qword_100081900)
  {
    result = swift_getWitnessTable(&unk_1000625E8, &type metadata for CharacteristicKind.Constraints.ValidBitsCodingKeys);
    atomic_store(result, (unint64_t *)&qword_100081900);
  }
  return result;
}

unint64_t sub_1000103F8()
{
  unint64_t result;

  result = qword_100081918;
  if (!qword_100081918)
  {
    result = swift_getWitnessTable(&unk_100062598, &type metadata for CharacteristicKind.Constraints.ValidValuesCodingKeys);
    atomic_store(result, (unint64_t *)&qword_100081918);
  }
  return result;
}

uint64_t sub_10001043C(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v7;
  char v8;

  if (a1 == 0x6C615664696C6176 && a2 == 0xEB00000000736575)
  {
    v5 = 0xEB00000000736575;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6C615664696C6176, 0xEB00000000736575, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x74694264696C6176 && a2 == 0xE900000000000073)
  {
    v7 = 0xE900000000000073;
LABEL_14:
    swift_bridgeObjectRelease(v7);
    return 1;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x74694264696C6176, 0xE900000000000073, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
    goto LABEL_14;
  }
  if (a1 == 0xD000000000000010 && a2 == 0x8000000100067B80)
  {
    swift_bridgeObjectRelease(0x8000000100067B80);
    return 2;
  }
  else
  {
    v8 = _stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000010, 0x8000000100067B80, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v8 & 1) != 0)
      return 2;
    else
      return 3;
  }
}

uint64_t sub_1000105B0(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char *v22;
  _QWORD *v23;
  _QWORD *v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  unint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  char *v52;
  _QWORD *v53;
  uint64_t v54;
  char *v55;

  v2 = sub_100003704(&qword_100081B80);
  v48 = *(_QWORD *)(v2 - 8);
  v49 = v2;
  __chkstk_darwin();
  v52 = (char *)&v44 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v50 = sub_100003704(&qword_100081B88);
  v47 = *(_QWORD *)(v50 - 8);
  __chkstk_darwin();
  v51 = (char *)&v44 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_100003704(&qword_100081B90);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin();
  v8 = (char *)&v44 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_100003704(&qword_100081B98);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin();
  v12 = (char *)&v44 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = a1[3];
  v14 = a1[4];
  v53 = a1;
  sub_10000E850(a1, v13);
  v15 = sub_1000102E8();
  v16 = v55;
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for CharacteristicKind.Constraints.CodingKeys, &type metadata for CharacteristicKind.Constraints.CodingKeys, v15, v13, v14);
  if (!v16)
  {
    v44 = v6;
    v45 = v5;
    v18 = v51;
    v17 = v52;
    v46 = v10;
    v55 = v12;
    v19 = KeyedDecodingContainer.allKeys.getter(v9);
    v20 = v19;
    if (*(_QWORD *)(v19 + 16) == 1)
    {
      if (*(_BYTE *)(v19 + 32))
      {
        if (*(_BYTE *)(v19 + 32) != 1)
        {
          v51 = (char *)*(unsigned __int8 *)(v19 + 32);
          LOBYTE(v54) = 2;
          v34 = sub_10001032C();
          v35 = v55;
          KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)(&type metadata for CharacteristicKind.Constraints.MinMaxStepValuesCodingKeys, &v54, v9, &type metadata for CharacteristicKind.Constraints.MinMaxStepValuesCodingKeys, v34);
          sub_100013110();
          v41 = v49;
          KeyedDecodingContainer.decode<A>(_:forKey:)(&v54, &type metadata for CharacteristicKind.Constraints.MinMaxStepValues);
          v42 = v46;
          (*(void (**)(char *, uint64_t))(v48 + 8))(v17, v41);
          swift_bridgeObjectRelease(v20);
          (*(void (**)(char *, uint64_t))(v42 + 8))(v35, v9);
          v43 = v53;
          v6 = v54;
LABEL_12:
          sub_1000130F0(v43);
          return v6;
        }
        LOBYTE(v54) = 1;
        v21 = sub_1000103B4();
        v22 = v55;
        KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)(&type metadata for CharacteristicKind.Constraints.ValidBitsCodingKeys, &v54, v9, &type metadata for CharacteristicKind.Constraints.ValidBitsCodingKeys, v21);
        v36 = sub_100003704(&qword_100081908);
        sub_100013154(&qword_100081BB0, (uint64_t)&protocol witness table for Int, (uint64_t)&protocol witness table for String, (uint64_t)&protocol conformance descriptor for <> [A : B]);
        v37 = v50;
        KeyedDecodingContainer.decode<A>(_:forKey:)(&v54, v36);
        v38 = v46;
        (*(void (**)(char *, uint64_t))(v47 + 8))(v18, v37);
        swift_bridgeObjectRelease(v20);
        (*(void (**)(char *, uint64_t))(v38 + 8))(v22, v9);
      }
      else
      {
        v29 = v19;
        LOBYTE(v54) = 0;
        v30 = sub_1000103F8();
        v31 = v9;
        v32 = v9;
        v33 = v55;
        KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)(&type metadata for CharacteristicKind.Constraints.ValidValuesCodingKeys, &v54, v32, &type metadata for CharacteristicKind.Constraints.ValidValuesCodingKeys, v30);
        v39 = sub_100003704(&qword_100081908);
        sub_100013154(&qword_100081BB0, (uint64_t)&protocol witness table for Int, (uint64_t)&protocol witness table for String, (uint64_t)&protocol conformance descriptor for <> [A : B]);
        v40 = v45;
        KeyedDecodingContainer.decode<A>(_:forKey:)(&v54, v39);
        (*(void (**)(char *, uint64_t))(v44 + 8))(v8, v40);
        swift_bridgeObjectRelease(v29);
        (*(void (**)(char *, uint64_t))(v46 + 8))(v33, v31);
      }
      v43 = v53;
      v6 = v54;
      goto LABEL_12;
    }
    v6 = type metadata accessor for DecodingError(0);
    swift_allocError(v6, &protocol witness table for DecodingError, 0, 0);
    v24 = v23;
    sub_100003704(&qword_100081BA0);
    *v24 = &type metadata for CharacteristicKind.Constraints;
    v25 = v55;
    v26 = KeyedDecodingContainer.codingPath.getter(v9);
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)(v26, 0xD00000000000002BLL, 0x8000000100067BA0, 0);
    v27 = (*(uint64_t (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v6 - 8) + 104))(v24, enum case for DecodingError.typeMismatch(_:), v6);
    swift_willThrow(v27);
    swift_bridgeObjectRelease(v20);
    (*(void (**)(char *, uint64_t))(v46 + 8))(v25, v9);
  }
  sub_1000130F0(v53);
  return v6;
}

uint64_t sub_100010B58()
{
  return sub_100010FCC(&qword_100081920, &qword_100081928);
}

unint64_t sub_100010B80()
{
  unint64_t result;

  result = qword_100081930;
  if (!qword_100081930)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for CharacteristicKind, &type metadata for CharacteristicKind);
    atomic_store(result, (unint64_t *)&qword_100081930);
  }
  return result;
}

unint64_t sub_100010BC8()
{
  unint64_t result;

  result = qword_100081938;
  if (!qword_100081938)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for CharacteristicKind.Value, &type metadata for CharacteristicKind.Value);
    atomic_store(result, (unint64_t *)&qword_100081938);
  }
  return result;
}

unint64_t sub_100010C10()
{
  unint64_t result;

  result = qword_100081940;
  if (!qword_100081940)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for CharacteristicKind.Value, &type metadata for CharacteristicKind.Value);
    atomic_store(result, (unint64_t *)&qword_100081940);
  }
  return result;
}

unint64_t sub_100010C58()
{
  unint64_t result;

  result = qword_100081948;
  if (!qword_100081948)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for CharacteristicKind.Permissions, &type metadata for CharacteristicKind.Permissions);
    atomic_store(result, (unint64_t *)&qword_100081948);
  }
  return result;
}

unint64_t sub_100010CA0()
{
  unint64_t result;

  result = qword_100081950;
  if (!qword_100081950)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for CharacteristicKind.Permissions, &type metadata for CharacteristicKind.Permissions);
    atomic_store(result, (unint64_t *)&qword_100081950);
  }
  return result;
}

unint64_t sub_100010CE8()
{
  unint64_t result;

  result = qword_100081958;
  if (!qword_100081958)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for CharacteristicKind.Permissions, &type metadata for CharacteristicKind.Permissions);
    atomic_store(result, (unint64_t *)&qword_100081958);
  }
  return result;
}

unint64_t sub_100010D30()
{
  unint64_t result;

  result = qword_100081960;
  if (!qword_100081960)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for CharacteristicKind.Permissions, &type metadata for CharacteristicKind.Permissions);
    atomic_store(result, (unint64_t *)&qword_100081960);
  }
  return result;
}

unint64_t sub_100010D78()
{
  unint64_t result;

  result = qword_100081968;
  if (!qword_100081968)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for CharacteristicKind.Permissions, &type metadata for CharacteristicKind.Permissions);
    atomic_store(result, (unint64_t *)&qword_100081968);
  }
  return result;
}

unint64_t sub_100010DC0()
{
  unint64_t result;

  result = qword_100081970;
  if (!qword_100081970)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for CharacteristicKind.Properties, &type metadata for CharacteristicKind.Properties);
    atomic_store(result, (unint64_t *)&qword_100081970);
  }
  return result;
}

unint64_t sub_100010E08()
{
  unint64_t result;

  result = qword_100081978;
  if (!qword_100081978)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for CharacteristicKind.Properties, &type metadata for CharacteristicKind.Properties);
    atomic_store(result, (unint64_t *)&qword_100081978);
  }
  return result;
}

unint64_t sub_100010E50()
{
  unint64_t result;

  result = qword_100081980;
  if (!qword_100081980)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for CharacteristicKind.Properties, &type metadata for CharacteristicKind.Properties);
    atomic_store(result, (unint64_t *)&qword_100081980);
  }
  return result;
}

void *sub_100010E94()
{
  return &protocol witness table for Int;
}

unint64_t sub_100010EA4()
{
  unint64_t result;

  result = qword_100081988;
  if (!qword_100081988)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for CharacteristicKind.Properties, &type metadata for CharacteristicKind.Properties);
    atomic_store(result, (unint64_t *)&qword_100081988);
  }
  return result;
}

uint64_t sub_100010EE8()
{
  return sub_100010FCC(&qword_100081990, &qword_100081998);
}

unint64_t sub_100010F10()
{
  unint64_t result;

  result = qword_1000819A0;
  if (!qword_1000819A0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for CharacteristicKind.Format, &type metadata for CharacteristicKind.Format);
    atomic_store(result, (unint64_t *)&qword_1000819A0);
  }
  return result;
}

void *sub_100010F54()
{
  return &protocol witness table for String;
}

unint64_t sub_100010F64()
{
  unint64_t result;

  result = qword_1000819A8;
  if (!qword_1000819A8)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for CharacteristicKind.Unit, &type metadata for CharacteristicKind.Unit);
    atomic_store(result, (unint64_t *)&qword_1000819A8);
  }
  return result;
}

uint64_t sub_100010FA8()
{
  return sub_100010FCC(&qword_1000819B0, &qword_1000819B8);
}

uint64_t sub_100010FCC(unint64_t *a1, uint64_t *a2)
{
  uint64_t result;
  uint64_t v4;

  result = *a1;
  if (!result)
  {
    v4 = sub_100003744(a2);
    result = swift_getWitnessTable(&protocol conformance descriptor for [A], v4);
    atomic_store(result, a1);
  }
  return result;
}

_BYTE *initializeBufferWithCopyOfBuffer for CharacteristicKind(_BYTE *result, _BYTE *a2)
{
  *result = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for CharacteristicKind(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0x53)
    goto LABEL_17;
  if (a2 + 173 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 173) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 173;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 173;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 173;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 0xAE;
  v8 = v6 - 174;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for CharacteristicKind(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 173 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 173) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0x53)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0x52)
    return ((uint64_t (*)(void))((char *)&loc_1000110F4 + 4 * byte_100060C1F[v4]))();
  *a1 = a2 - 83;
  return ((uint64_t (*)(void))((char *)sub_100011128 + 4 * byte_100060C1A[v4]))();
}

uint64_t sub_100011128(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100011130(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100011138);
  return result;
}

uint64_t sub_100011144(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10001114CLL);
  *(_BYTE *)result = a2 - 83;
  return result;
}

uint64_t sub_100011150(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100011158(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for CharacteristicKind()
{
  return &type metadata for CharacteristicKind;
}

uint64_t initializeBufferWithCopyOfBuffer for CharacteristicKind.Info(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *a2;
  *a1 = *a2;
  v3 = v2 + 16;
  swift_retain(v2);
  return v3;
}

uint64_t destroy for CharacteristicKind.Info(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;

  result = swift_bridgeObjectRelease(*(_QWORD *)(a1 + 16));
  if (*(unsigned __int8 *)(a1 + 44) != 255)
  {
    v3 = *(unsigned int *)(a1 + 40) | ((unint64_t)*(unsigned __int8 *)(a1 + 44) << 32);
    return sub_1000111F4(*(_QWORD *)(a1 + 32), v3, BYTE4(v3));
  }
  return result;
}

uint64_t sub_1000111F4(uint64_t result, uint64_t a2, unsigned __int8 a3)
{
  if (a3 <= 1u)
    return swift_bridgeObjectRelease(result);
  return result;
}

uint64_t initializeWithCopy for CharacteristicKind.Info(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t *v5;
  unsigned __int8 v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v4 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v4;
  *(_WORD *)(a1 + 24) = *(_WORD *)(a2 + 24);
  v5 = (uint64_t *)(a2 + 32);
  v6 = *(_BYTE *)(a2 + 44);
  v7 = *(unsigned int *)(a2 + 40);
  swift_bridgeObjectRetain(v4);
  if (v6 == 255)
  {
    *(_QWORD *)(a1 + 32) = *v5;
    *(_QWORD *)(a1 + 37) = *(uint64_t *)((char *)v5 + 5);
  }
  else
  {
    v8 = v7 & 0xFFFFFF00FFFFFFFFLL | ((unint64_t)v6 << 32);
    v9 = *v5;
    sub_10000E468(v9, v8, BYTE4(v8));
    *(_QWORD *)(a1 + 32) = v9;
    *(_DWORD *)(a1 + 40) = v8;
    *(_BYTE *)(a1 + 44) = BYTE4(v8);
  }
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  return a1;
}

uint64_t assignWithCopy for CharacteristicKind.Info(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t *v7;
  unint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int8 v16;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  v4 = *(_QWORD *)(a2 + 16);
  v5 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_BYTE *)(a1 + 25) = *(_BYTE *)(a2 + 25);
  v6 = (uint64_t *)(a1 + 32);
  v7 = (uint64_t *)(a2 + 32);
  v8 = *(unsigned int *)(a2 + 40) | ((unint64_t)*(unsigned __int8 *)(a2 + 44) << 32);
  v9 = *(_BYTE *)(a2 + 44);
  if (*(unsigned __int8 *)(a1 + 44) == 255)
  {
    if (BYTE4(v8) == 255)
    {
      v10 = *v7;
      *(_QWORD *)(a1 + 37) = *(_QWORD *)(a2 + 37);
      *v6 = v10;
    }
    else
    {
      v12 = *v7;
      sub_10000E468(*v7, *(unsigned int *)(a2 + 40) | ((unint64_t)*(unsigned __int8 *)(a2 + 44) << 32), BYTE4(v8));
      *(_QWORD *)(a1 + 32) = v12;
      *(_DWORD *)(a1 + 40) = v8;
      *(_BYTE *)(a1 + 44) = v9;
    }
  }
  else if (BYTE4(v8) == 255)
  {
    sub_1000113EC(a1 + 32);
    v11 = *(_QWORD *)(a2 + 37);
    *v6 = *v7;
    *(_QWORD *)(a1 + 37) = v11;
  }
  else
  {
    v13 = *v7;
    sub_10000E468(*v7, *(unsigned int *)(a2 + 40) | ((unint64_t)*(unsigned __int8 *)(a2 + 44) << 32), BYTE4(v8));
    v14 = *(_QWORD *)(a1 + 32);
    v15 = *(unsigned int *)(a1 + 40);
    *(_QWORD *)(a1 + 32) = v13;
    *(_DWORD *)(a1 + 40) = v8;
    v16 = *(_BYTE *)(a1 + 44);
    *(_BYTE *)(a1 + 44) = v9;
    sub_1000111F4(v14, v15, v16);
  }
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  return a1;
}

uint64_t sub_1000113EC(uint64_t a1)
{
  sub_1000111F4(*(_QWORD *)a1, *(unsigned int *)(a1 + 8), *(_BYTE *)(a1 + 12));
  return a1;
}

__n128 initializeWithTake for CharacteristicKind.Info(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  v4 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v4;
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t assignWithTake for CharacteristicKind.Info(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unsigned __int8 v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v4 = *(_QWORD *)(a2 + 16);
  v5 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v4;
  swift_bridgeObjectRelease(v5);
  *(_WORD *)(a1 + 24) = *(_WORD *)(a2 + 24);
  v6 = (_QWORD *)(a2 + 32);
  v7 = *(_BYTE *)(a1 + 44);
  if (v7 != 255)
  {
    v8 = *(unsigned int *)(a2 + 40) | ((unint64_t)*(unsigned __int8 *)(a2 + 44) << 32);
    if (HIDWORD(v8) <= 0xFE)
    {
      v9 = *(unsigned int *)(a1 + 40);
      v10 = *(_QWORD *)(a1 + 32);
      *(_QWORD *)(a1 + 32) = *v6;
      *(_DWORD *)(a1 + 40) = v8;
      *(_BYTE *)(a1 + 44) = BYTE4(v8);
      sub_1000111F4(v10, v9, v7);
      goto LABEL_6;
    }
    sub_1000113EC(a1 + 32);
  }
  *(_QWORD *)(a1 + 32) = *v6;
  *(_QWORD *)(a1 + 37) = *(_QWORD *)(a2 + 37);
LABEL_6:
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  return a1;
}

uint64_t getEnumTagSinglePayload for CharacteristicKind.Info(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 64))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 16);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for CharacteristicKind.Info(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 64) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 16) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 64) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for CharacteristicKind.Info()
{
  return &type metadata for CharacteristicKind.Info;
}

uint64_t destroy for CharacteristicKind.Value(uint64_t a1)
{
  return sub_10000E824(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
}

uint64_t _s20HomeWidgetLockScreen18CharacteristicKindO5ValueOwCP_0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  char v5;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_BYTE *)(a2 + 16);
  sub_10000E47C(*(_QWORD *)a2, v4, v5);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = v5;
  return a1;
}

uint64_t assignWithCopy for CharacteristicKind.Value(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  char v5;
  uint64_t v6;
  unint64_t v7;
  char v8;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_BYTE *)(a2 + 16);
  sub_10000E47C(*(_QWORD *)a2, v4, v5);
  v6 = *(_QWORD *)a1;
  v7 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  v8 = *(_BYTE *)(a1 + 16);
  *(_BYTE *)(a1 + 16) = v5;
  sub_10000E824(v6, v7, v8);
  return a1;
}

__n128 initializeWithTake for CharacteristicKind.Value(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  a1[1].n128_u8[0] = a2[1].n128_u8[0];
  *a1 = result;
  return result;
}

uint64_t assignWithTake for CharacteristicKind.Value(uint64_t a1, uint64_t a2)
{
  char v3;
  uint64_t v4;
  unint64_t v5;
  char v6;

  v3 = *(_BYTE *)(a2 + 16);
  v4 = *(_QWORD *)a1;
  v5 = *(_QWORD *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  v6 = *(_BYTE *)(a1 + 16);
  *(_BYTE *)(a1 + 16) = v3;
  sub_10000E824(v4, v5, v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for CharacteristicKind.Value(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xF5 && *(_BYTE *)(a1 + 17))
    return (*(_DWORD *)a1 + 245);
  v3 = *(unsigned __int8 *)(a1 + 16);
  if (v3 <= 0xB)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for CharacteristicKind.Value(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xF4)
  {
    *(_BYTE *)(result + 16) = 0;
    *(_QWORD *)result = a2 - 245;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0xF5)
      *(_BYTE *)(result + 17) = 1;
  }
  else
  {
    if (a3 >= 0xF5)
      *(_BYTE *)(result + 17) = 0;
    if (a2)
      *(_BYTE *)(result + 16) = -(char)a2;
  }
  return result;
}

uint64_t sub_100011728(uint64_t a1)
{
  if (*(unsigned __int8 *)(a1 + 16) <= 0xAu)
    return *(unsigned __int8 *)(a1 + 16);
  else
    return (*(_DWORD *)a1 + 11);
}

uint64_t sub_100011740(uint64_t result, unsigned int a2)
{
  if (a2 >= 0xB)
  {
    *(_QWORD *)result = a2 - 11;
    *(_QWORD *)(result + 8) = 0;
    LOBYTE(a2) = 11;
  }
  *(_BYTE *)(result + 16) = a2;
  return result;
}

ValueMetadata *type metadata accessor for CharacteristicKind.Value()
{
  return &type metadata for CharacteristicKind.Value;
}

uint64_t destroy for CharacteristicKind.Constraints(uint64_t a1)
{
  return sub_1000111F4(*(_QWORD *)a1, *(unsigned int *)(a1 + 8), *(_BYTE *)(a1 + 12));
}

uint64_t _s20HomeWidgetLockScreen18CharacteristicKindO11ConstraintsOwCP_0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unsigned int v4;
  unsigned __int8 v5;

  v3 = *(_QWORD *)a2;
  v4 = *(_DWORD *)(a2 + 8);
  v5 = *(_BYTE *)(a2 + 12);
  sub_10000E468(*(_QWORD *)a2, v4, v5);
  *(_QWORD *)a1 = v3;
  *(_DWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 12) = v5;
  return a1;
}

uint64_t assignWithCopy for CharacteristicKind.Constraints(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unsigned int v4;
  unsigned __int8 v5;
  uint64_t v6;
  uint64_t v7;
  unsigned __int8 v8;

  v3 = *(_QWORD *)a2;
  v4 = *(_DWORD *)(a2 + 8);
  v5 = *(_BYTE *)(a2 + 12);
  sub_10000E468(*(_QWORD *)a2, v4, v5);
  v6 = *(_QWORD *)a1;
  v7 = *(unsigned int *)(a1 + 8);
  *(_QWORD *)a1 = v3;
  *(_DWORD *)(a1 + 8) = v4;
  v8 = *(_BYTE *)(a1 + 12);
  *(_BYTE *)(a1 + 12) = v5;
  sub_1000111F4(v6, v7, v8);
  return a1;
}

_QWORD *initializeWithTake for CharacteristicKind.Constraints(_QWORD *result, uint64_t *a2)
{
  uint64_t v2;

  v2 = *a2;
  *(_QWORD *)((char *)result + 5) = *(uint64_t *)((char *)a2 + 5);
  *result = v2;
  return result;
}

uint64_t assignWithTake for CharacteristicKind.Constraints(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  int v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  unsigned __int8 v8;

  v3 = *a2;
  v4 = *((_DWORD *)a2 + 2);
  v5 = *((_BYTE *)a2 + 12);
  v6 = *(_QWORD *)a1;
  v7 = *(unsigned int *)(a1 + 8);
  *(_QWORD *)a1 = v3;
  *(_DWORD *)(a1 + 8) = v4;
  v8 = *(_BYTE *)(a1 + 12);
  *(_BYTE *)(a1 + 12) = v5;
  sub_1000111F4(v6, v7, v8);
  return a1;
}

uint64_t getEnumTagSinglePayload for CharacteristicKind.Constraints(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFE && *(_BYTE *)(a1 + 13))
    return (*(_DWORD *)a1 + 254);
  v3 = *(unsigned __int8 *)(a1 + 12);
  if (v3 <= 2)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for CharacteristicKind.Constraints(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(_BYTE *)(result + 12) = 0;
    *(_DWORD *)(result + 8) = 0;
    *(_QWORD *)result = a2 - 254;
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 13) = 1;
  }
  else
  {
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 13) = 0;
    if (a2)
      *(_BYTE *)(result + 12) = -(char)a2;
  }
  return result;
}

uint64_t sub_10001191C(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 12);
}

uint64_t sub_100011924(uint64_t result, char a2)
{
  *(_BYTE *)(result + 12) = a2;
  return result;
}

ValueMetadata *type metadata accessor for CharacteristicKind.Constraints()
{
  return &type metadata for CharacteristicKind.Constraints;
}

uint64_t initializeBufferWithCopyOfBuffer for CharacteristicKind.Constraints.MinMaxStepValues(uint64_t result, uint64_t *a2)
{
  uint64_t v2;

  v2 = *a2;
  *(_DWORD *)(result + 8) = *((_DWORD *)a2 + 2);
  *(_QWORD *)result = v2;
  return result;
}

uint64_t getEnumTagSinglePayload for CharacteristicKind.Constraints.MinMaxStepValues(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 12))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for CharacteristicKind.Constraints.MinMaxStepValues(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_DWORD *)(result + 8) = 0;
    *(_QWORD *)result = (a2 - 1);
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 12) = v3;
  return result;
}

ValueMetadata *type metadata accessor for CharacteristicKind.Constraints.MinMaxStepValues()
{
  return &type metadata for CharacteristicKind.Constraints.MinMaxStepValues;
}

ValueMetadata *type metadata accessor for CharacteristicKind.Permissions()
{
  return &type metadata for CharacteristicKind.Permissions;
}

ValueMetadata *type metadata accessor for CharacteristicKind.Properties()
{
  return &type metadata for CharacteristicKind.Properties;
}

uint64_t getEnumTagSinglePayload for CharacteristicKind.Format(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xF6)
    goto LABEL_17;
  if (a2 + 10 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 10) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 10;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 10;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 10;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 0xB;
  v8 = v6 - 11;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for CharacteristicKind.Format(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 10 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 10) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF6)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF5)
    return ((uint64_t (*)(void))((char *)&loc_100011AA8 + 4 * byte_100060C29[v4]))();
  *a1 = a2 + 10;
  return ((uint64_t (*)(void))((char *)sub_100011ADC + 4 * byte_100060C24[v4]))();
}

uint64_t sub_100011ADC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100011AE4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100011AECLL);
  return result;
}

uint64_t sub_100011AF8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100011B00);
  *(_BYTE *)result = a2 + 10;
  return result;
}

uint64_t sub_100011B04(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100011B0C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for CharacteristicKind.Format()
{
  return &type metadata for CharacteristicKind.Format;
}

uint64_t getEnumTagSinglePayload for CharacteristicKind.Unit(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFB)
    goto LABEL_17;
  if (a2 + 5 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 5) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 5;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 5;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 5;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 6;
  v8 = v6 - 6;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for CharacteristicKind.Unit(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 5 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 5) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFB)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFA)
    return ((uint64_t (*)(void))((char *)&loc_100011C04 + 4 * byte_100060C33[v4]))();
  *a1 = a2 + 5;
  return ((uint64_t (*)(void))((char *)sub_100011C38 + 4 * byte_100060C2E[v4]))();
}

uint64_t sub_100011C38(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100011C40(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100011C48);
  return result;
}

uint64_t sub_100011C54(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100011C5CLL);
  *(_BYTE *)result = a2 + 5;
  return result;
}

uint64_t sub_100011C60(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100011C68(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for CharacteristicKind.Unit()
{
  return &type metadata for CharacteristicKind.Unit;
}

uint64_t sub_100011C8C(unsigned __int8 *a1)
{
  return *a1;
}

_BYTE *sub_100011C94(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

ValueMetadata *type metadata accessor for CharacteristicKind.Constraints.CodingKeys()
{
  return &type metadata for CharacteristicKind.Constraints.CodingKeys;
}

ValueMetadata *type metadata accessor for CharacteristicKind.Constraints.ValidValuesCodingKeys()
{
  return &type metadata for CharacteristicKind.Constraints.ValidValuesCodingKeys;
}

ValueMetadata *type metadata accessor for CharacteristicKind.Constraints.ValidBitsCodingKeys()
{
  return &type metadata for CharacteristicKind.Constraints.ValidBitsCodingKeys;
}

ValueMetadata *type metadata accessor for CharacteristicKind.Constraints.MinMaxStepValuesCodingKeys()
{
  return &type metadata for CharacteristicKind.Constraints.MinMaxStepValuesCodingKeys;
}

uint64_t _s20HomeWidgetLockScreen18CharacteristicKindO11ConstraintsO10CodingKeysOwet_0(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFE)
    goto LABEL_17;
  if (a2 + 2 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 2) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 2;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 2;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 2;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 3;
  v8 = v6 - 3;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t _s20HomeWidgetLockScreen18CharacteristicKindO11ConstraintsO10CodingKeysOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_100011DC4 + 4 * byte_100060C3D[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_100011DF8 + 4 * byte_100060C38[v4]))();
}

uint64_t sub_100011DF8(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100011E00(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100011E08);
  return result;
}

uint64_t sub_100011E14(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100011E1CLL);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_100011E20(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100011E28(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for CharacteristicKind.Constraints.MinMaxStepValues.CodingKeys()
{
  return &type metadata for CharacteristicKind.Constraints.MinMaxStepValues.CodingKeys;
}

uint64_t getEnumTagSinglePayload for CharacteristicKind.Value.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xF5)
    goto LABEL_17;
  if (a2 + 11 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 11) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 11;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 11;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 11;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 0xC;
  v8 = v6 - 12;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for CharacteristicKind.Value.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 11 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 11) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF5)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF4)
    return ((uint64_t (*)(void))((char *)&loc_100011F20 + 4 * byte_100060C47[v4]))();
  *a1 = a2 + 11;
  return ((uint64_t (*)(void))((char *)sub_100011F54 + 4 * byte_100060C42[v4]))();
}

uint64_t sub_100011F54(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100011F5C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100011F64);
  return result;
}

uint64_t sub_100011F70(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100011F78);
  *(_BYTE *)result = a2 + 11;
  return result;
}

uint64_t sub_100011F7C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100011F84(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for CharacteristicKind.Value.CodingKeys()
{
  return &type metadata for CharacteristicKind.Value.CodingKeys;
}

ValueMetadata *type metadata accessor for CharacteristicKind.Value.NullCodingKeys()
{
  return &type metadata for CharacteristicKind.Value.NullCodingKeys;
}

ValueMetadata *type metadata accessor for CharacteristicKind.Value.BoolCodingKeys()
{
  return &type metadata for CharacteristicKind.Value.BoolCodingKeys;
}

ValueMetadata *type metadata accessor for CharacteristicKind.Value.Uint8CodingKeys()
{
  return &type metadata for CharacteristicKind.Value.Uint8CodingKeys;
}

ValueMetadata *type metadata accessor for CharacteristicKind.Value.Uint16CodingKeys()
{
  return &type metadata for CharacteristicKind.Value.Uint16CodingKeys;
}

ValueMetadata *type metadata accessor for CharacteristicKind.Value.Uint32CodingKeys()
{
  return &type metadata for CharacteristicKind.Value.Uint32CodingKeys;
}

ValueMetadata *type metadata accessor for CharacteristicKind.Value.Uint64CodingKeys()
{
  return &type metadata for CharacteristicKind.Value.Uint64CodingKeys;
}

ValueMetadata *type metadata accessor for CharacteristicKind.Value.IntCodingKeys()
{
  return &type metadata for CharacteristicKind.Value.IntCodingKeys;
}

ValueMetadata *type metadata accessor for CharacteristicKind.Value.Int32CodingKeys()
{
  return &type metadata for CharacteristicKind.Value.Int32CodingKeys;
}

ValueMetadata *type metadata accessor for CharacteristicKind.Value.FloatCodingKeys()
{
  return &type metadata for CharacteristicKind.Value.FloatCodingKeys;
}

ValueMetadata *type metadata accessor for CharacteristicKind.Value.StringCodingKeys()
{
  return &type metadata for CharacteristicKind.Value.StringCodingKeys;
}

ValueMetadata *type metadata accessor for CharacteristicKind.Value.Tlv8CodingKeys()
{
  return &type metadata for CharacteristicKind.Value.Tlv8CodingKeys;
}

uint64_t _s20HomeWidgetLockScreen18CharacteristicKindO11ConstraintsO21ValidValuesCodingKeysOwet_0(unsigned int *a1, int a2)
{
  int v2;
  int v3;

  if (!a2)
    return 0;
  if ((a2 + 1) >= 0x10000)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 1) < 0x100)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
    return *a1;
  if (v3 == 2)
    return *(unsigned __int16 *)a1;
  return *(unsigned __int8 *)a1;
}

uint64_t _s20HomeWidgetLockScreen18CharacteristicKindO11ConstraintsO21ValidValuesCodingKeysOwst_0(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_1000120E0 + 4 * byte_100060C4C[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_100012100 + 4 * byte_100060C51[v4]))();
}

_BYTE *sub_1000120E0(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_100012100(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_100012108(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_100012110(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_100012118(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_100012120(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for CharacteristicKind.Value.DataCodingKeys()
{
  return &type metadata for CharacteristicKind.Value.DataCodingKeys;
}

unint64_t sub_100012140()
{
  unint64_t result;

  result = qword_1000819C0;
  if (!qword_1000819C0)
  {
    result = swift_getWitnessTable(&unk_1000619A0, &type metadata for CharacteristicKind.Value.DataCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000819C0);
  }
  return result;
}

unint64_t sub_100012188()
{
  unint64_t result;

  result = qword_1000819C8;
  if (!qword_1000819C8)
  {
    result = swift_getWitnessTable(&unk_100061A58, &type metadata for CharacteristicKind.Value.Tlv8CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000819C8);
  }
  return result;
}

unint64_t sub_1000121D0()
{
  unint64_t result;

  result = qword_1000819D0;
  if (!qword_1000819D0)
  {
    result = swift_getWitnessTable(&unk_100061B10, &type metadata for CharacteristicKind.Value.StringCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000819D0);
  }
  return result;
}

unint64_t sub_100012218()
{
  unint64_t result;

  result = qword_1000819D8;
  if (!qword_1000819D8)
  {
    result = swift_getWitnessTable(&unk_100061BC8, &type metadata for CharacteristicKind.Value.FloatCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000819D8);
  }
  return result;
}

unint64_t sub_100012260()
{
  unint64_t result;

  result = qword_1000819E0;
  if (!qword_1000819E0)
  {
    result = swift_getWitnessTable(&unk_100061C80, &type metadata for CharacteristicKind.Value.Int32CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000819E0);
  }
  return result;
}

unint64_t sub_1000122A8()
{
  unint64_t result;

  result = qword_1000819E8;
  if (!qword_1000819E8)
  {
    result = swift_getWitnessTable(&unk_100061D38, &type metadata for CharacteristicKind.Value.IntCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000819E8);
  }
  return result;
}

unint64_t sub_1000122F0()
{
  unint64_t result;

  result = qword_1000819F0;
  if (!qword_1000819F0)
  {
    result = swift_getWitnessTable(&unk_100061DF0, &type metadata for CharacteristicKind.Value.Uint64CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000819F0);
  }
  return result;
}

unint64_t sub_100012338()
{
  unint64_t result;

  result = qword_1000819F8;
  if (!qword_1000819F8)
  {
    result = swift_getWitnessTable(&unk_100061EA8, &type metadata for CharacteristicKind.Value.Uint32CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000819F8);
  }
  return result;
}

unint64_t sub_100012380()
{
  unint64_t result;

  result = qword_100081A00;
  if (!qword_100081A00)
  {
    result = swift_getWitnessTable(&unk_100061F60, &type metadata for CharacteristicKind.Value.Uint16CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100081A00);
  }
  return result;
}

unint64_t sub_1000123C8()
{
  unint64_t result;

  result = qword_100081A08;
  if (!qword_100081A08)
  {
    result = swift_getWitnessTable(&unk_100062018, &type metadata for CharacteristicKind.Value.Uint8CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100081A08);
  }
  return result;
}

unint64_t sub_100012410()
{
  unint64_t result;

  result = qword_100081A10;
  if (!qword_100081A10)
  {
    result = swift_getWitnessTable(&unk_1000620D0, &type metadata for CharacteristicKind.Value.BoolCodingKeys);
    atomic_store(result, (unint64_t *)&qword_100081A10);
  }
  return result;
}

unint64_t sub_100012458()
{
  unint64_t result;

  result = qword_100081A18;
  if (!qword_100081A18)
  {
    result = swift_getWitnessTable(&unk_1000621D8, &type metadata for CharacteristicKind.Value.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100081A18);
  }
  return result;
}

unint64_t sub_1000124A0()
{
  unint64_t result;

  result = qword_100081A20;
  if (!qword_100081A20)
  {
    result = swift_getWitnessTable(&unk_100062290, &type metadata for CharacteristicKind.Constraints.MinMaxStepValues.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100081A20);
  }
  return result;
}

unint64_t sub_1000124E8()
{
  unint64_t result;

  result = qword_100081A28;
  if (!qword_100081A28)
  {
    result = swift_getWitnessTable(&unk_100062348, &type metadata for CharacteristicKind.Constraints.MinMaxStepValuesCodingKeys);
    atomic_store(result, (unint64_t *)&qword_100081A28);
  }
  return result;
}

unint64_t sub_100012530()
{
  unint64_t result;

  result = qword_100081A30;
  if (!qword_100081A30)
  {
    result = swift_getWitnessTable(&unk_100062400, &type metadata for CharacteristicKind.Constraints.ValidBitsCodingKeys);
    atomic_store(result, (unint64_t *)&qword_100081A30);
  }
  return result;
}

unint64_t sub_100012578()
{
  unint64_t result;

  result = qword_100081A38;
  if (!qword_100081A38)
  {
    result = swift_getWitnessTable(&unk_1000624B8, &type metadata for CharacteristicKind.Constraints.ValidValuesCodingKeys);
    atomic_store(result, (unint64_t *)&qword_100081A38);
  }
  return result;
}

unint64_t sub_1000125C0()
{
  unint64_t result;

  result = qword_100081A40;
  if (!qword_100081A40)
  {
    result = swift_getWitnessTable(&unk_100062570, &type metadata for CharacteristicKind.Constraints.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100081A40);
  }
  return result;
}

unint64_t sub_100012608()
{
  unint64_t result;

  result = qword_100081A48;
  if (!qword_100081A48)
  {
    result = swift_getWitnessTable(&unk_100062428, &type metadata for CharacteristicKind.Constraints.ValidValuesCodingKeys);
    atomic_store(result, (unint64_t *)&qword_100081A48);
  }
  return result;
}

unint64_t sub_100012650()
{
  unint64_t result;

  result = qword_100081A50;
  if (!qword_100081A50)
  {
    result = swift_getWitnessTable(&unk_100062450, &type metadata for CharacteristicKind.Constraints.ValidValuesCodingKeys);
    atomic_store(result, (unint64_t *)&qword_100081A50);
  }
  return result;
}

unint64_t sub_100012698()
{
  unint64_t result;

  result = qword_100081A58;
  if (!qword_100081A58)
  {
    result = swift_getWitnessTable(&unk_100062370, &type metadata for CharacteristicKind.Constraints.ValidBitsCodingKeys);
    atomic_store(result, (unint64_t *)&qword_100081A58);
  }
  return result;
}

unint64_t sub_1000126E0()
{
  unint64_t result;

  result = qword_100081A60;
  if (!qword_100081A60)
  {
    result = swift_getWitnessTable(&unk_100062398, &type metadata for CharacteristicKind.Constraints.ValidBitsCodingKeys);
    atomic_store(result, (unint64_t *)&qword_100081A60);
  }
  return result;
}

unint64_t sub_100012728()
{
  unint64_t result;

  result = qword_100081A68;
  if (!qword_100081A68)
  {
    result = swift_getWitnessTable(&unk_1000622B8, &type metadata for CharacteristicKind.Constraints.MinMaxStepValuesCodingKeys);
    atomic_store(result, (unint64_t *)&qword_100081A68);
  }
  return result;
}

unint64_t sub_100012770()
{
  unint64_t result;

  result = qword_100081A70;
  if (!qword_100081A70)
  {
    result = swift_getWitnessTable(&unk_1000622E0, &type metadata for CharacteristicKind.Constraints.MinMaxStepValuesCodingKeys);
    atomic_store(result, (unint64_t *)&qword_100081A70);
  }
  return result;
}

unint64_t sub_1000127B8()
{
  unint64_t result;

  result = qword_100081A78;
  if (!qword_100081A78)
  {
    result = swift_getWitnessTable(&unk_1000624E0, &type metadata for CharacteristicKind.Constraints.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100081A78);
  }
  return result;
}

unint64_t sub_100012800()
{
  unint64_t result;

  result = qword_100081A80;
  if (!qword_100081A80)
  {
    result = swift_getWitnessTable(&unk_100062508, &type metadata for CharacteristicKind.Constraints.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100081A80);
  }
  return result;
}

unint64_t sub_100012848()
{
  unint64_t result;

  result = qword_100081A88;
  if (!qword_100081A88)
  {
    result = swift_getWitnessTable(&unk_100062200, &type metadata for CharacteristicKind.Constraints.MinMaxStepValues.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100081A88);
  }
  return result;
}

unint64_t sub_100012890()
{
  unint64_t result;

  result = qword_100081A90;
  if (!qword_100081A90)
  {
    result = swift_getWitnessTable(&unk_100062228, &type metadata for CharacteristicKind.Constraints.MinMaxStepValues.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100081A90);
  }
  return result;
}

unint64_t sub_1000128D8()
{
  unint64_t result;

  result = qword_100081A98;
  if (!qword_100081A98)
  {
    result = swift_getWitnessTable(&unk_1000620F8, &type metadata for CharacteristicKind.Value.NullCodingKeys);
    atomic_store(result, (unint64_t *)&qword_100081A98);
  }
  return result;
}

unint64_t sub_100012920()
{
  unint64_t result;

  result = qword_100081AA0;
  if (!qword_100081AA0)
  {
    result = swift_getWitnessTable(&unk_100062120, &type metadata for CharacteristicKind.Value.NullCodingKeys);
    atomic_store(result, (unint64_t *)&qword_100081AA0);
  }
  return result;
}

unint64_t sub_100012968()
{
  unint64_t result;

  result = qword_100081AA8;
  if (!qword_100081AA8)
  {
    result = swift_getWitnessTable(&unk_100062040, &type metadata for CharacteristicKind.Value.BoolCodingKeys);
    atomic_store(result, (unint64_t *)&qword_100081AA8);
  }
  return result;
}

unint64_t sub_1000129B0()
{
  unint64_t result;

  result = qword_100081AB0;
  if (!qword_100081AB0)
  {
    result = swift_getWitnessTable(&unk_100062068, &type metadata for CharacteristicKind.Value.BoolCodingKeys);
    atomic_store(result, (unint64_t *)&qword_100081AB0);
  }
  return result;
}

unint64_t sub_1000129F8()
{
  unint64_t result;

  result = qword_100081AB8;
  if (!qword_100081AB8)
  {
    result = swift_getWitnessTable(&unk_100061F88, &type metadata for CharacteristicKind.Value.Uint8CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100081AB8);
  }
  return result;
}

unint64_t sub_100012A40()
{
  unint64_t result;

  result = qword_100081AC0;
  if (!qword_100081AC0)
  {
    result = swift_getWitnessTable(&unk_100061FB0, &type metadata for CharacteristicKind.Value.Uint8CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100081AC0);
  }
  return result;
}

unint64_t sub_100012A88()
{
  unint64_t result;

  result = qword_100081AC8;
  if (!qword_100081AC8)
  {
    result = swift_getWitnessTable(&unk_100061ED0, &type metadata for CharacteristicKind.Value.Uint16CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100081AC8);
  }
  return result;
}

unint64_t sub_100012AD0()
{
  unint64_t result;

  result = qword_100081AD0;
  if (!qword_100081AD0)
  {
    result = swift_getWitnessTable(&unk_100061EF8, &type metadata for CharacteristicKind.Value.Uint16CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100081AD0);
  }
  return result;
}

unint64_t sub_100012B18()
{
  unint64_t result;

  result = qword_100081AD8;
  if (!qword_100081AD8)
  {
    result = swift_getWitnessTable(&unk_100061E18, &type metadata for CharacteristicKind.Value.Uint32CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100081AD8);
  }
  return result;
}

unint64_t sub_100012B60()
{
  unint64_t result;

  result = qword_100081AE0;
  if (!qword_100081AE0)
  {
    result = swift_getWitnessTable(&unk_100061E40, &type metadata for CharacteristicKind.Value.Uint32CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100081AE0);
  }
  return result;
}

unint64_t sub_100012BA8()
{
  unint64_t result;

  result = qword_100081AE8;
  if (!qword_100081AE8)
  {
    result = swift_getWitnessTable(&unk_100061D60, &type metadata for CharacteristicKind.Value.Uint64CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100081AE8);
  }
  return result;
}

unint64_t sub_100012BF0()
{
  unint64_t result;

  result = qword_100081AF0;
  if (!qword_100081AF0)
  {
    result = swift_getWitnessTable(&unk_100061D88, &type metadata for CharacteristicKind.Value.Uint64CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100081AF0);
  }
  return result;
}

unint64_t sub_100012C38()
{
  unint64_t result;

  result = qword_100081AF8;
  if (!qword_100081AF8)
  {
    result = swift_getWitnessTable(&unk_100061CA8, &type metadata for CharacteristicKind.Value.IntCodingKeys);
    atomic_store(result, (unint64_t *)&qword_100081AF8);
  }
  return result;
}

unint64_t sub_100012C80()
{
  unint64_t result;

  result = qword_100081B00;
  if (!qword_100081B00)
  {
    result = swift_getWitnessTable(&unk_100061CD0, &type metadata for CharacteristicKind.Value.IntCodingKeys);
    atomic_store(result, (unint64_t *)&qword_100081B00);
  }
  return result;
}

unint64_t sub_100012CC8()
{
  unint64_t result;

  result = qword_100081B08;
  if (!qword_100081B08)
  {
    result = swift_getWitnessTable(&unk_100061BF0, &type metadata for CharacteristicKind.Value.Int32CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100081B08);
  }
  return result;
}

unint64_t sub_100012D10()
{
  unint64_t result;

  result = qword_100081B10;
  if (!qword_100081B10)
  {
    result = swift_getWitnessTable(&unk_100061C18, &type metadata for CharacteristicKind.Value.Int32CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100081B10);
  }
  return result;
}

unint64_t sub_100012D58()
{
  unint64_t result;

  result = qword_100081B18;
  if (!qword_100081B18)
  {
    result = swift_getWitnessTable(&unk_100061B38, &type metadata for CharacteristicKind.Value.FloatCodingKeys);
    atomic_store(result, (unint64_t *)&qword_100081B18);
  }
  return result;
}

unint64_t sub_100012DA0()
{
  unint64_t result;

  result = qword_100081B20;
  if (!qword_100081B20)
  {
    result = swift_getWitnessTable(&unk_100061B60, &type metadata for CharacteristicKind.Value.FloatCodingKeys);
    atomic_store(result, (unint64_t *)&qword_100081B20);
  }
  return result;
}

unint64_t sub_100012DE8()
{
  unint64_t result;

  result = qword_100081B28;
  if (!qword_100081B28)
  {
    result = swift_getWitnessTable(&unk_100061A80, &type metadata for CharacteristicKind.Value.StringCodingKeys);
    atomic_store(result, (unint64_t *)&qword_100081B28);
  }
  return result;
}

unint64_t sub_100012E30()
{
  unint64_t result;

  result = qword_100081B30;
  if (!qword_100081B30)
  {
    result = swift_getWitnessTable(&unk_100061AA8, &type metadata for CharacteristicKind.Value.StringCodingKeys);
    atomic_store(result, (unint64_t *)&qword_100081B30);
  }
  return result;
}

unint64_t sub_100012E78()
{
  unint64_t result;

  result = qword_100081B38;
  if (!qword_100081B38)
  {
    result = swift_getWitnessTable(&unk_1000619C8, &type metadata for CharacteristicKind.Value.Tlv8CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100081B38);
  }
  return result;
}

unint64_t sub_100012EC0()
{
  unint64_t result;

  result = qword_100081B40;
  if (!qword_100081B40)
  {
    result = swift_getWitnessTable(&unk_1000619F0, &type metadata for CharacteristicKind.Value.Tlv8CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100081B40);
  }
  return result;
}

unint64_t sub_100012F08()
{
  unint64_t result;

  result = qword_100081B48;
  if (!qword_100081B48)
  {
    result = swift_getWitnessTable(&unk_100061910, &type metadata for CharacteristicKind.Value.DataCodingKeys);
    atomic_store(result, (unint64_t *)&qword_100081B48);
  }
  return result;
}

unint64_t sub_100012F50()
{
  unint64_t result;

  result = qword_100081B50;
  if (!qword_100081B50)
  {
    result = swift_getWitnessTable(&unk_100061938, &type metadata for CharacteristicKind.Value.DataCodingKeys);
    atomic_store(result, (unint64_t *)&qword_100081B50);
  }
  return result;
}

unint64_t sub_100012F98()
{
  unint64_t result;

  result = qword_100081B58;
  if (!qword_100081B58)
  {
    result = swift_getWitnessTable(&unk_100062148, &type metadata for CharacteristicKind.Value.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100081B58);
  }
  return result;
}

unint64_t sub_100012FE0()
{
  unint64_t result;

  result = qword_100081B60;
  if (!qword_100081B60)
  {
    result = swift_getWitnessTable(&unk_100062170, &type metadata for CharacteristicKind.Value.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100081B60);
  }
  return result;
}

unint64_t sub_100013024()
{
  unint64_t result;

  result = qword_100081B68;
  if (!qword_100081B68)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for CharacteristicKind.Unit, &type metadata for CharacteristicKind.Unit);
    atomic_store(result, (unint64_t *)&qword_100081B68);
  }
  return result;
}

unint64_t sub_100013068()
{
  unint64_t result;

  result = qword_100081B70;
  if (!qword_100081B70)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for CharacteristicKind.Format, &type metadata for CharacteristicKind.Format);
    atomic_store(result, (unint64_t *)&qword_100081B70);
  }
  return result;
}

unint64_t sub_1000130AC()
{
  unint64_t result;

  result = qword_100081B78;
  if (!qword_100081B78)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for CharacteristicKind, &type metadata for CharacteristicKind);
    atomic_store(result, (unint64_t *)&qword_100081B78);
  }
  return result;
}

uint64_t sub_1000130F0(_QWORD *a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1[3] - 8);
  if ((*(_BYTE *)(v1 + 82) & 2) != 0)
    return swift_release(*a1);
  else
    return (*(uint64_t (**)(void))(v1 + 8))();
}

unint64_t sub_100013110()
{
  unint64_t result;

  result = qword_100081BA8;
  if (!qword_100081BA8)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for CharacteristicKind.Constraints.MinMaxStepValues, &type metadata for CharacteristicKind.Constraints.MinMaxStepValues);
    atomic_store(result, (unint64_t *)&qword_100081BA8);
  }
  return result;
}

uint64_t sub_100013154(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v7;

  result = *a1;
  if (!result)
  {
    v7 = sub_100003744(&qword_100081908);
    result = swift_getWitnessTable(a4, v7);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_1000131B8()
{
  unint64_t result;

  result = qword_100081C28;
  if (!qword_100081C28)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Data, &type metadata for Data);
    atomic_store(result, (unint64_t *)&qword_100081C28);
  }
  return result;
}

uint64_t sub_100013200(uint64_t result, uint64_t a2)
{
  if (BYTE4(a2) != 255)
    return sub_1000111F4(result, a2, BYTE4(a2));
  return result;
}

ValueMetadata *type metadata accessor for ClimateCategoryWidget()
{
  return &type metadata for ClimateCategoryWidget;
}

uint64_t sub_100013284(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_10006BAB0, 1);
}

int *sub_100013294@<X0>(uint64_t a1@<X8>)
{
  unint64_t v1;
  uint64_t v2;
  uint64_t v4;
  Swift::String v5;
  void *object;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  double v19;
  uint64_t v20;
  uint64_t v21;
  int *result;
  uint64_t *v23;
  double *v24;
  uint64_t v25;
  uint64_t v26[2];

  v4 = qword_10008A588 + 1;
  if (__OFADD__(qword_10008A588, 1))
  {
    __break(1u);
  }
  else
  {
    ++qword_10008A588;
    v26[0] = 0x206574616D696C43;
    v26[1] = 0xE800000000000000;
    v25 = v4;
    v5._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
    object = v5._object;
    String.append(_:)(v5);
    swift_bridgeObjectRelease(object);
    v2 = 0x206574616D696C43;
    v1 = 0xE800000000000000;
    if (qword_100081680 == -1)
      goto LABEL_3;
  }
  swift_once(&qword_100081680, sub_100022448);
LABEL_3:
  v7 = type metadata accessor for Logger(0);
  sub_100003884(v7, (uint64_t)static DataModel.widgetLogger);
  v8 = swift_bridgeObjectRetain(v1);
  v9 = Logger.logObject.getter(v8);
  v10 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v9, v10))
  {
    v11 = swift_slowAlloc(22, -1);
    v12 = swift_slowAlloc(64, -1);
    v26[0] = v12;
    *(_DWORD *)v11 = 136315394;
    swift_bridgeObjectRetain(v1);
    v25 = sub_10001DF04(v2, v1, v26);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v25, v26, v11 + 4, v11 + 12);
    swift_bridgeObjectRelease_n(v1, 3);
    *(_WORD *)(v11 + 12) = 2080;
    v25 = sub_10001DF04(0xD000000000000010, 0x8000000100067EA0, v26);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v25, v26, v11 + 14, v11 + 22);
    swift_arrayDestroy(v12, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v12, -1, -1);
    swift_slowDealloc(v11, -1, -1);

  }
  else
  {

    v13 = swift_bridgeObjectRelease_n(v1, 2);
  }
  Date.init()(v13);
  if (qword_100081648 != -1)
    swift_once(&qword_100081648, sub_100014744);
  v15 = qword_10008A578;
  v14 = unk_10008A580;
  v16 = qword_100081740;
  swift_bridgeObjectRetain(unk_10008A580);
  if (v16 != -1)
    swift_once(&qword_100081740, sub_10005AE7C);
  v17 = qword_10008A8B0;
  v18 = swift_bridgeObjectRetain(qword_10008A8B0);
  v19 = TimelineProviderContext.displaySize.getter(v18);
  v21 = v20;
  result = (int *)type metadata accessor for ThreeColumnDataEntry(0);
  v23 = (uint64_t *)(a1 + result[5]);
  *v23 = v15;
  v23[1] = v14;
  *(_QWORD *)(a1 + result[6]) = v17;
  v24 = (double *)(a1 + result[7]);
  *v24 = v19;
  *((_QWORD *)v24 + 1) = v21;
  return result;
}

uint64_t sub_100013594(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v8;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;

  v8[2] = a4;
  v8[3] = a5;
  v12 = type metadata accessor for ThreeColumnDataEntry(0);
  v13 = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v12 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v8[4] = v13;
  v14 = (_QWORD *)swift_task_alloc(dword_100081DDC);
  v8[5] = v14;
  *v14 = v8;
  v14[1] = sub_100013628;
  return sub_1000136CC(v13, a6, a7, a8);
}

uint64_t sub_100013628()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 40));
  return swift_task_switch(sub_10001367C, 0, 0);
}

uint64_t sub_10001367C()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 32);
  (*(void (**)(uint64_t))(v0 + 16))(v1);
  sub_100015784(v1, type metadata accessor for ThreeColumnDataEntry);
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000136CC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;

  v4[14] = a3;
  v4[15] = a4;
  v4[12] = a1;
  v4[13] = a2;
  v5 = type metadata accessor for Locale(0);
  v4[16] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v5 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for String.LocalizationValue(0);
  v4[17] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v6 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for Date(0);
  v4[18] = v7;
  v8 = *(_QWORD *)(v7 - 8);
  v4[19] = v8;
  v4[20] = swift_task_alloc((*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for WidgetFamily(0);
  v4[21] = v9;
  v10 = *(_QWORD *)(v9 - 8);
  v4[22] = v10;
  v11 = (*(_QWORD *)(v10 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v4[23] = swift_task_alloc(v11);
  v4[24] = swift_task_alloc(v11);
  return swift_task_switch(sub_1000137A8, 0, 0);
}

uint64_t sub_1000137A8()
{
  _QWORD *v0;
  void **v1;
  void *v2;
  uint64_t v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  id v8;
  NSObject *v9;
  os_log_type_t v10;
  _BOOL4 v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  id v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void (*v26)(uint64_t, uint64_t);
  uint64_t v27;
  _QWORD *v28;
  os_log_type_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  if (qword_100081670 != -1)
    swift_once(&qword_100081670, sub_100021008);
  v1 = (void **)(qword_10008A648 + OBJC_IVAR____TtC20HomeWidgetLockScreen9DataModel_currentHome);
  swift_beginAccess(qword_10008A648 + OBJC_IVAR____TtC20HomeWidgetLockScreen9DataModel_currentHome, v0 + 2, 0, 0);
  v2 = *v1;
  v0[25] = *v1;
  v3 = qword_100081680;
  v32 = (uint64_t)v2;
  v4 = v2;
  if (v3 != -1)
    swift_once(&qword_100081680, sub_100022448);
  v5 = v0[15];
  v6 = type metadata accessor for Logger(0);
  v0[26] = sub_100003884(v6, (uint64_t)static DataModel.widgetLogger);
  v7 = v4;
  swift_bridgeObjectRetain_n(v5, 2);
  v8 = v7;
  v9 = Logger.logObject.getter(v8);
  v10 = static os_log_type_t.default.getter();
  v11 = os_log_type_enabled(v9, v10);
  v12 = v0[15];
  if (v11)
  {
    v30 = v10;
    v13 = v0[14];
    v14 = swift_slowAlloc(32, -1);
    v31 = swift_slowAlloc(96, -1);
    v33 = v31;
    *(_DWORD *)v14 = 136315650;
    swift_bridgeObjectRetain(v12);
    v0[9] = sub_10001DF04(v13, v12, &v33);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 9, v0 + 10, v14 + 4, v14 + 12);
    swift_bridgeObjectRelease_n(v12, 3);
    *(_WORD *)(v14 + 12) = 2080;
    v0[10] = sub_10001DF04(0xD00000000000001ALL, 0x8000000100067E60, &v33);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 10, v0 + 11, v14 + 14, v14 + 22);
    *(_WORD *)(v14 + 22) = 2080;
    if (v32)
    {
      v15 = objc_msgSend(v8, "name");
      v16 = static String._unconditionallyBridgeFromObjectiveC(_:)(v15);
      v18 = v17;

    }
    else
    {
      v18 = 0xE300000000000000;
      v16 = 7104878;
    }
    v0[11] = sub_10001DF04(v16, v18, &v33);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 11, v0 + 12, v14 + 24, v14 + 32);
    swift_bridgeObjectRelease(v18);

    swift_arrayDestroy(v31, 3, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v31, -1, -1);
    swift_slowDealloc(v14, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease_n(v0[15], 2);

  }
  v20 = v0[23];
  v19 = v0[24];
  v21 = v0[21];
  v22 = v0[22];
  TimelineProviderContext.family.getter();
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v22 + 104))(v20, enum case for WidgetFamily.systemSmall(_:), v21);
  v23 = sub_100015884(&qword_100081DE0, (uint64_t (*)(uint64_t))&type metadata accessor for WidgetFamily, (uint64_t)&protocol conformance descriptor for WidgetFamily);
  dispatch thunk of RawRepresentable.rawValue.getter(v21, v23);
  dispatch thunk of RawRepresentable.rawValue.getter(v21, v23);
  v25 = v0[5];
  v24 = v0[6];
  v26 = *(void (**)(uint64_t, uint64_t))(v22 + 8);
  v26(v20, v21);
  v26(v19, v21);
  if (v25 == v24)
    v27 = 5;
  else
    v27 = 3;
  v28 = (_QWORD *)swift_task_alloc(dword_100081E64);
  v0[27] = v28;
  *v28 = v0;
  v28[1] = sub_100013B94;
  return sub_1000158C8(v32, v0[14], v0[15], v27);
}

uint64_t sub_100013B94(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 216);
  *(_QWORD *)(*(_QWORD *)v1 + 224) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_100013BF0, 0, 0);
}

uint64_t sub_100013BF0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  double v30;
  uint64_t v31;
  uint64_t v32;
  int *v33;
  uint64_t *v34;
  double *v35;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  v1 = *(_QWORD *)(v0 + 224);
  swift_bridgeObjectRetain_n(*(_QWORD *)(v0 + 120), 2);
  v2 = swift_bridgeObjectRetain_n(v1, 2);
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = *(_QWORD *)(v0 + 224);
    v7 = *(_QWORD *)(v0 + 112);
    v6 = *(_QWORD *)(v0 + 120);
    v8 = swift_slowAlloc(22, -1);
    v40 = swift_slowAlloc(64, -1);
    v42 = v40;
    *(_DWORD *)v8 = 136315394;
    swift_bridgeObjectRetain(v6);
    *(_QWORD *)(v0 + 56) = sub_10001DF04(v7, v6, &v42);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 56, v0 + 64, v8 + 4, v8 + 12);
    swift_bridgeObjectRelease_n(v6, 3);
    *(_WORD *)(v8 + 12) = 2080;
    v9 = swift_bridgeObjectRetain(v5);
    v10 = Array.description.getter(v9, &type metadata for ThreeColumnDataRow);
    v12 = v11;
    swift_bridgeObjectRelease(v5);
    *(_QWORD *)(v0 + 64) = sub_10001DF04(v10, v12, &v42);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 64, v0 + 72, v8 + 14, v8 + 22);
    swift_bridgeObjectRelease(v12);
    swift_bridgeObjectRelease_n(v5, 2);
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "...{%s} climateSummaryRows are %s", (uint8_t *)v8, 0x16u);
    swift_arrayDestroy(v40, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v40, -1, -1);
    swift_slowDealloc(v8, -1, -1);
  }
  else
  {
    v13 = *(_QWORD *)(v0 + 224);
    swift_bridgeObjectRelease_n(*(_QWORD *)(v0 + 120), 2);
    swift_bridgeObjectRelease_n(v13, 2);
  }

  Date.init()(v14);
  if (qword_100081648 != -1)
    swift_once(&qword_100081648, sub_100014744);
  v15 = *(_QWORD *)(v0 + 224);
  v39 = qword_10008A578;
  v41 = unk_10008A580;
  v16 = *(_QWORD *)(v15 + 16);
  v17 = swift_bridgeObjectRetain(unk_10008A580);
  if (!v16)
  {
    v19 = *(_QWORD *)(v0 + 128);
    v18 = *(_QWORD *)(v0 + 136);
    swift_bridgeObjectRelease(v15);
    v20 = sub_100003704(&qword_100081C88);
    v15 = swift_allocObject(v20, 88, 7);
    *(_OWORD *)(v15 + 16) = xmmword_1000607D0;
    v21 = String.LocalizationValue.init(stringLiteral:)(0xD00000000000001ELL, 0x8000000100067E40);
    static Locale.current.getter(v21);
    v17 = String.init(localized:table:bundle:locale:comment:)(v18, 0x696C61636F4C4648, 0xED0000656C62617ALL, 0, v19, 0, 0, 256);
    *(_QWORD *)(v15 + 32) = 0xD000000000000018;
    *(_QWORD *)(v15 + 40) = 0x8000000100067E20;
    *(_QWORD *)(v15 + 48) = 0;
    *(_QWORD *)(v15 + 56) = 0xE000000000000000;
    *(_QWORD *)(v15 + 64) = v17;
    *(_QWORD *)(v15 + 72) = v22;
    *(_BYTE *)(v15 + 80) = 0;
  }
  v23 = *(_QWORD *)(v0 + 192);
  v24 = *(void **)(v0 + 200);
  v25 = *(_QWORD *)(v0 + 184);
  v27 = *(_QWORD *)(v0 + 152);
  v26 = *(_QWORD *)(v0 + 160);
  v28 = *(_QWORD *)(v0 + 144);
  v37 = *(_QWORD *)(v0 + 136);
  v38 = *(_QWORD *)(v0 + 128);
  v29 = *(_QWORD *)(v0 + 96);
  v30 = TimelineProviderContext.displaySize.getter(v17);
  v32 = v31;

  (*(void (**)(uint64_t, uint64_t, uint64_t))(v27 + 32))(v29, v26, v28);
  v33 = (int *)type metadata accessor for ThreeColumnDataEntry(0);
  v34 = (uint64_t *)(v29 + v33[5]);
  *v34 = v39;
  v34[1] = v41;
  *(_QWORD *)(v29 + v33[6]) = v15;
  v35 = (double *)(v29 + v33[7]);
  *v35 = v30;
  *((_QWORD *)v35 + 1) = v32;
  swift_task_dealloc(v23);
  swift_task_dealloc(v25);
  swift_task_dealloc(v26);
  swift_task_dealloc(v37);
  swift_task_dealloc(v38);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100013F94(unint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  Swift::String v16;
  void *object;
  uint64_t v18;
  uint64_t v19;
  NSObject *v20;
  os_log_type_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  char *v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;

  v49 = a2;
  v50 = a6;
  v48 = a3;
  v10 = type metadata accessor for TimelineProviderContext(0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(_QWORD *)(v11 + 64);
  __chkstk_darwin();
  sub_100003704(&qword_100081DB0);
  __chkstk_darwin();
  v14 = (char *)&v40 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = qword_10008A588 + 1;
  if (__OFADD__(qword_10008A588, 1))
  {
    __break(1u);
  }
  else
  {
    v44 = a1;
    v45 = v12;
    v46 = v14;
    v47 = (char *)&v40 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
    ++qword_10008A588;
    v52 = 0x206574616D696C43;
    v53 = 0xE800000000000000;
    v51 = v15;
    v16._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
    object = v16._object;
    String.append(_:)(v16);
    swift_bridgeObjectRelease(object);
    v6 = v52;
    a1 = v53;
    if (qword_100081680 == -1)
      goto LABEL_3;
  }
  swift_once(&qword_100081680, sub_100022448);
LABEL_3:
  v18 = type metadata accessor for Logger(0);
  sub_100003884(v18, (uint64_t)static DataModel.widgetLogger);
  v19 = swift_bridgeObjectRetain_n(a1, 2);
  v20 = Logger.logObject.getter(v19);
  v21 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v20, v21))
  {
    v22 = swift_slowAlloc(22, -1);
    v42 = a5;
    v23 = v22;
    v24 = swift_slowAlloc(64, -1);
    v41 = v11;
    v25 = v24;
    v52 = v24;
    *(_DWORD *)v23 = 136315394;
    swift_bridgeObjectRetain(a1);
    v51 = sub_10001DF04(v6, a1, &v52);
    v43 = v10;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v51, &v52, v23 + 4, v23 + 12);
    swift_bridgeObjectRelease_n(a1, 3);
    *(_WORD *)(v23 + 12) = 2080;
    v51 = sub_10001DF04(0xD00000000000001BLL, a4, &v52);
    v10 = v43;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v51, &v52, v23 + 14, v23 + 22);
    swift_arrayDestroy(v25, 2, (char *)&type metadata for Any + 8);
    v26 = v25;
    v11 = v41;
    swift_slowDealloc(v26, -1, -1);
    v27 = v23;
    a5 = v42;
    swift_slowDealloc(v27, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n(a1, 2);
  }
  v28 = type metadata accessor for TaskPriority(0);
  v29 = (uint64_t)v46;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v28 - 8) + 56))(v46, 1, 1, v28);
  v30 = v47;
  (*(void (**)(char *, unint64_t, uint64_t))(v11 + 16))(v47, v44, v10);
  v31 = *(unsigned __int8 *)(v11 + 80);
  v32 = (v31 + 48) & ~v31;
  v33 = v11;
  v34 = (v45 + v32 + 7) & 0xFFFFFFFFFFFFFFF8;
  v35 = (char *)swift_allocObject(a5, v34 + 16, v31 | 7);
  *((_QWORD *)v35 + 2) = 0;
  *((_QWORD *)v35 + 3) = 0;
  v36 = v48;
  *((_QWORD *)v35 + 4) = v49;
  *((_QWORD *)v35 + 5) = v36;
  (*(void (**)(char *, char *, uint64_t))(v33 + 32))(&v35[v32], v30, v10);
  v37 = (uint64_t *)&v35[v34];
  *v37 = v6;
  v37[1] = a1;
  swift_retain(v36);
  v38 = sub_1000341A0(v29, v50, (uint64_t)v35);
  return swift_release(v38);
}

uint64_t sub_100014324(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v8[5] = a7;
  v8[6] = a8;
  v8[3] = a5;
  v8[4] = a6;
  v8[2] = a4;
  v9 = type metadata accessor for Date(0);
  v8[7] = v9;
  v10 = *(_QWORD *)(v9 - 8);
  v8[8] = v10;
  v11 = (*(_QWORD *)(v10 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v8[9] = swift_task_alloc(v11);
  v8[10] = swift_task_alloc(v11);
  v12 = type metadata accessor for TimelineReloadPolicy(0);
  v8[11] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v12 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_100003704(&qword_100081DC8);
  v8[12] = v13;
  v14 = *(_QWORD *)(v13 - 8);
  v8[13] = v14;
  v8[14] = swift_task_alloc((*(_QWORD *)(v14 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_1000143E8, 0, 0);
}

uint64_t sub_1000143E8()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t **v9;

  v1 = sub_100003704(&qword_100081DD0);
  v2 = type metadata accessor for ThreeColumnDataEntry(0);
  v0[15] = v2;
  v3 = *(_QWORD *)(v2 - 8);
  v4 = *(_QWORD *)(v3 + 72);
  v5 = *(unsigned __int8 *)(v3 + 80);
  v6 = (v5 + 32) & ~v5;
  v7 = swift_allocObject(v1, v6 + v4, v5 | 7);
  v0[16] = v7;
  *(_OWORD *)(v7 + 16) = xmmword_1000607D0;
  v8 = v7 + v6;
  v9 = (uint64_t **)swift_task_alloc(dword_100081DDC);
  v0[17] = (uint64_t)v9;
  *v9 = v0;
  v9[1] = (uint64_t *)sub_100014490;
  return sub_1000136CC(v8, v0[4], v0[5], v0[6]);
}

uint64_t sub_100014490()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 136));
  return swift_task_switch(sub_1000144E4, 0, 0);
}

uint64_t sub_1000144E4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t);
  void (*v10)(uint64_t, uint64_t);
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v2 = *(_QWORD *)(v1 + 128);
  v3 = *(_QWORD *)(v1 + 112);
  v13 = *(_QWORD *)(v1 + 120);
  v14 = *(_QWORD *)(v1 + 104);
  v4 = *(_QWORD *)(v1 + 88);
  v15 = *(_QWORD *)(v1 + 96);
  v5 = *(_QWORD *)(v1 + 72);
  v6 = *(_QWORD *)(v1 + 80);
  v8 = *(_QWORD *)(v1 + 56);
  v7 = *(_QWORD *)(v1 + 64);
  v9 = *(void (**)(uint64_t))(v1 + 16);
  Date.init()(a1);
  static Date.+ infix(_:_:)(v5, 1800.0);
  v10 = *(void (**)(uint64_t, uint64_t))(v7 + 8);
  v10(v5, v8);
  static TimelineReloadPolicy.after(_:)(v6);
  v10(v6, v8);
  v11 = sub_100015884(qword_100081D78, type metadata accessor for ThreeColumnDataEntry, (uint64_t)&unk_100064828);
  Timeline.init(entries:policy:)(v2, v4, v13, v11);
  v9(v3);
  (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v3, v15);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v6);
  swift_task_dealloc(v5);
  return (*(uint64_t (**)(void))(v1 + 8))();
}

uint64_t sub_100014604(unint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100013F94(a1, a2, a3, 0x8000000100067E80, (uint64_t)&unk_10007D910, (uint64_t)&unk_100081DF0);
}

uint64_t sub_100014638(unint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100013F94(a1, a2, a3, 0x8000000100067E00, (uint64_t)&unk_10007D8E8, (uint64_t)&unk_100081DC0);
}

uint64_t sub_10001466C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v7;

  v7 = (_QWORD *)swift_task_alloc(async function pointer to TimelineProvider.relevances()[1]);
  *(_QWORD *)(v3 + 16) = v7;
  *v7 = v3;
  v7[1] = sub_1000158C4;
  return TimelineProvider.relevances()(a1, a2, a3);
}

uint64_t sub_1000146D8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v7;

  v7 = (_QWORD *)swift_task_alloc(async function pointer to TimelineProvider.relevance()[1]);
  *(_QWORD *)(v3 + 16) = v7;
  *v7 = v3;
  v7[1] = sub_1000158C4;
  return TimelineProvider.relevance()(a1, a2, a3);
}

uint64_t sub_100014744()
{
  uint64_t v0;
  _BYTE *v1;
  uint64_t v2;
  _BYTE *v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  _BYTE v7[16];

  type metadata accessor for Locale(0);
  __chkstk_darwin();
  v1 = &v7[-((v0 + 15) & 0xFFFFFFFFFFFFFFF0)];
  type metadata accessor for String.LocalizationValue(0);
  __chkstk_darwin();
  v3 = &v7[-((v2 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v4 = String.LocalizationValue.init(stringLiteral:)(0xD00000000000001FLL, 0x8000000100067D70);
  static Locale.current.getter(v4);
  result = String.init(localized:table:bundle:locale:comment:)(v3, 0x696C61636F4C4648, 0xED0000656C62617ALL, 0, v1, 0, 0, 256);
  qword_10008A578 = result;
  unk_10008A580 = v6;
  return result;
}

uint64_t sub_10001483C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t OpaqueTypeConformance2;
  _QWORD v16[2];

  v1 = v0;
  sub_100003704(&qword_100081D90);
  __chkstk_darwin();
  v3 = (char *)v16 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for ThreeColumnCategoryView(0);
  __chkstk_darwin();
  v6 = (char *)v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_100003704(&qword_100081D98);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin();
  v10 = (char *)v16 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100014F18(v1, (uint64_t)v6);
  v11 = &v6[*(int *)(v4 + 20)];
  *(_QWORD *)v11 = swift_getKeyPath(&unk_100062C88);
  v12 = sub_100003704(&qword_100081DA0);
  swift_storeEnumTagMultiPayload(v11, v12, 0);
  URL.init(string:)(0xD00000000000002ELL, 0x8000000100067D90);
  v13 = sub_100015884(&qword_100081DA8, type metadata accessor for ThreeColumnCategoryView, (uint64_t)&unk_1000643A8);
  View.widgetURL(_:)(v3, v4, v13);
  sub_1000154D8((uint64_t)v3);
  sub_100015784((uint64_t)v6, type metadata accessor for ThreeColumnCategoryView);
  v16[0] = v4;
  v16[1] = v13;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(v16, &opaque type descriptor for <<opaque return type of View.widgetURL(_:)>>, 1);
  View.accessibilityIdentifier(_:)(0xD00000000000003BLL, 0x8000000100067DC0, v7, OpaqueTypeConformance2);
  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, v7);
}

uint64_t sub_100014A3C()
{
  return static View._viewListCount(inputs:)();
}

uint64_t sub_100014A58@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t OpaqueTypeConformance2;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  unint64_t v38;
  unint64_t v39;
  _QWORD v40[3];

  v35 = a1;
  type metadata accessor for Locale(0);
  __chkstk_darwin();
  v32 = (char *)&v31 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for String.LocalizationValue(0);
  __chkstk_darwin();
  v3 = (char *)&v31 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_100003704(&qword_100081CB0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin();
  v7 = (char *)&v31 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_100003704(&qword_100081CB8);
  v31 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin();
  v10 = (char *)&v31 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_100003704(&qword_100081CC0);
  v33 = *(_QWORD *)(v11 - 8);
  v34 = v11;
  __chkstk_darwin();
  v13 = (char *)&v31 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for ClimateCategoryWidgetView(0);
  sub_100015884(&qword_100081CC8, type metadata accessor for ClimateCategoryWidgetView, (uint64_t)&unk_100062C34);
  sub_100014E88();
  StaticConfiguration.init<A>(kind:provider:content:)(0xD000000000000026, 0x8000000100067D10);
  if (qword_100081648 != -1)
    swift_once(&qword_100081648, sub_100014744);
  v36 = qword_10008A578;
  v37 = (void *)unk_10008A580;
  v14 = sub_100014ECC();
  v15 = sub_1000037D4();
  WidgetConfiguration.configurationDisplayName<A>(_:)(&v36, v4, &type metadata for String, v14, v15);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  v16 = String.LocalizationValue.init(stringLiteral:)(0xD000000000000021, 0x8000000100067D40);
  v17 = v32;
  static Locale.current.getter(v16);
  v18 = String.init(localized:table:bundle:locale:comment:)(v3, 0x696C61636F4C4648, 0xED0000656C62617ALL, 0, v17, 0, 0, 256);
  v20 = v19;
  v40[0] = v18;
  v40[1] = v19;
  v36 = v4;
  v37 = &type metadata for String;
  v38 = v14;
  v39 = v15;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v36, &opaque type descriptor for <<opaque return type of WidgetConfiguration.configurationDisplayName<A>(_:)>>, 1);
  WidgetConfiguration.description<A>(_:)(v40, v8, &type metadata for String, OpaqueTypeConformance2, v15);
  swift_bridgeObjectRelease(v20);
  (*(void (**)(char *, uint64_t))(v31 + 8))(v10, v8);
  v22 = sub_100003704(&qword_100081CE0);
  v23 = type metadata accessor for WidgetFamily(0);
  v24 = *(_QWORD *)(v23 - 8);
  v25 = *(unsigned __int8 *)(v24 + 80);
  v26 = (v25 + 32) & ~v25;
  v27 = swift_allocObject(v22, v26 + *(_QWORD *)(v24 + 72), v25 | 7);
  *(_OWORD *)(v27 + 16) = xmmword_1000607D0;
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v24 + 104))(v27 + v26, enum case for WidgetFamily.accessoryRectangular(_:), v23);
  v36 = v8;
  v37 = &type metadata for String;
  v38 = OpaqueTypeConformance2;
  v39 = v15;
  v28 = swift_getOpaqueTypeConformance2(&v36, &opaque type descriptor for <<opaque return type of WidgetConfiguration.description<A>(_:)>>, 1);
  v29 = v34;
  WidgetConfiguration.supportedFamilies(_:)(v27, v34, v28);
  swift_bridgeObjectRelease(v27);
  return (*(uint64_t (**)(char *, uint64_t))(v33 + 8))(v13, v29);
}

uint64_t sub_100014E40@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_100014F18(a1, a2);
}

uint64_t type metadata accessor for ClimateCategoryWidgetView(uint64_t a1)
{
  uint64_t result;

  result = qword_100081D40;
  if (!qword_100081D40)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for ClimateCategoryWidgetView);
  return result;
}

unint64_t sub_100014E88()
{
  unint64_t result;

  result = qword_100081CD0;
  if (!qword_100081CD0)
  {
    result = swift_getWitnessTable(&unk_100062BDC, &type metadata for ClimateCategoryTimelineProvider);
    atomic_store(result, (unint64_t *)&qword_100081CD0);
  }
  return result;
}

unint64_t sub_100014ECC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100081CD8;
  if (!qword_100081CD8)
  {
    v1 = sub_100003744(&qword_100081CB0);
    result = swift_getWitnessTable(&protocol conformance descriptor for StaticConfiguration<A>, v1);
    atomic_store(result, (unint64_t *)&qword_100081CD8);
  }
  return result;
}

uint64_t sub_100014F18(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for ThreeColumnDataEntry(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

ValueMetadata *type metadata accessor for ClimateCategoryTimelineProvider()
{
  return &type metadata for ClimateCategoryTimelineProvider;
}

uint64_t *sub_100014F6C(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  int v5;
  int *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v4 = type metadata accessor for ThreeColumnDataEntry(0);
  v5 = *(_DWORD *)(*(_QWORD *)(v4 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v14 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v14 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v14);
  }
  else
  {
    v6 = (int *)v4;
    v7 = type metadata accessor for Date(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = v6[5];
    v9 = (uint64_t *)((char *)a1 + v8);
    v10 = (uint64_t *)((char *)a2 + v8);
    v11 = v10[1];
    *v9 = *v10;
    v9[1] = v11;
    v12 = v6[6];
    v13 = *(uint64_t *)((char *)a2 + v12);
    *(uint64_t *)((char *)a1 + v12) = v13;
    *(_OWORD *)((char *)a1 + v6[7]) = *(_OWORD *)((char *)a2 + v6[7]);
    swift_bridgeObjectRetain(v11);
    swift_bridgeObjectRetain(v13);
  }
  return a1;
}

uint64_t sub_100015028(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  v3 = type metadata accessor for ThreeColumnDataEntry(0);
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + *(int *)(v3 + 20) + 8));
  return swift_bridgeObjectRelease(*(_QWORD *)(a1 + *(int *)(v3 + 24)));
}

uint64_t sub_100015084(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v4 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, a2, v4);
  v5 = (int *)type metadata accessor for ThreeColumnDataEntry(0);
  v6 = v5[5];
  v7 = (_QWORD *)(a1 + v6);
  v8 = (uint64_t *)(a2 + v6);
  v10 = *v8;
  v9 = v8[1];
  *v7 = v10;
  v7[1] = v9;
  v11 = v5[6];
  v12 = *(_QWORD *)(a2 + v11);
  *(_QWORD *)(a1 + v11) = v12;
  *(_OWORD *)(a1 + v5[7]) = *(_OWORD *)(a2 + v5[7]);
  swift_bridgeObjectRetain(v9);
  swift_bridgeObjectRetain(v12);
  return a1;
}

uint64_t sub_100015114(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int *v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;

  v4 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 24))(a1, a2, v4);
  v5 = (int *)type metadata accessor for ThreeColumnDataEntry(0);
  v6 = v5[5];
  v7 = (_QWORD *)(a1 + v6);
  v8 = (_QWORD *)(a2 + v6);
  *v7 = *v8;
  v9 = v8[1];
  v10 = v7[1];
  v7[1] = v9;
  swift_bridgeObjectRetain(v9);
  swift_bridgeObjectRelease(v10);
  v11 = v5[6];
  v12 = *(_QWORD *)(a2 + v11);
  v13 = *(_QWORD *)(a1 + v11);
  *(_QWORD *)(a1 + v11) = v12;
  swift_bridgeObjectRetain(v12);
  swift_bridgeObjectRelease(v13);
  v14 = v5[7];
  v15 = (_QWORD *)(a1 + v14);
  v16 = (_QWORD *)(a2 + v14);
  *v15 = *v16;
  v15[1] = v16[1];
  return a1;
}

uint64_t sub_1000151D0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int *v5;

  v4 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a1, a2, v4);
  v5 = (int *)type metadata accessor for ThreeColumnDataEntry(0);
  *(_OWORD *)(a1 + v5[5]) = *(_OWORD *)(a2 + v5[5]);
  *(_QWORD *)(a1 + v5[6]) = *(_QWORD *)(a2 + v5[6]);
  *(_OWORD *)(a1 + v5[7]) = *(_OWORD *)(a2 + v5[7]);
  return a1;
}

uint64_t sub_100015240(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v4 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a1, a2, v4);
  v5 = (int *)type metadata accessor for ThreeColumnDataEntry(0);
  v6 = v5[5];
  v7 = (_QWORD *)(a1 + v6);
  v8 = (uint64_t *)(a2 + v6);
  v10 = *v8;
  v9 = v8[1];
  v11 = v7[1];
  *v7 = v10;
  v7[1] = v9;
  swift_bridgeObjectRelease(v11);
  v12 = v5[6];
  v13 = *(_QWORD *)(a1 + v12);
  *(_QWORD *)(a1 + v12) = *(_QWORD *)(a2 + v12);
  swift_bridgeObjectRelease(v13);
  *(_OWORD *)(a1 + v5[7]) = *(_OWORD *)(a2 + v5[7]);
  return a1;
}

uint64_t sub_1000152D4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000152E0);
}

uint64_t sub_1000152E0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for ThreeColumnDataEntry(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(a1, a2, v4);
}

uint64_t sub_10001531C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100015328);
}

uint64_t sub_100015328(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for ThreeColumnDataEntry(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(a1, a2, a2, v4);
}

uint64_t sub_100015368(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  uint64_t v4;

  result = type metadata accessor for ThreeColumnDataEntry(319);
  if (v3 <= 0x3F)
  {
    v4 = *(_QWORD *)(result - 8) + 64;
    swift_initStructMetadata(a1, 256, 1, &v4, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t sub_1000153D0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t OpaqueTypeConformance2;
  uint64_t v6;
  uint64_t v8;
  void *v9;
  unint64_t v10;
  unint64_t v11;

  v0 = sub_100003744(&qword_100081CC0);
  v1 = sub_100003744(&qword_100081CB8);
  v2 = sub_100003744(&qword_100081CB0);
  v3 = sub_100014ECC();
  v4 = sub_1000037D4();
  v8 = v2;
  v9 = &type metadata for String;
  v10 = v3;
  v11 = v4;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v8, &opaque type descriptor for <<opaque return type of WidgetConfiguration.configurationDisplayName<A>(_:)>>, 1);
  v8 = v1;
  v9 = &type metadata for String;
  v10 = OpaqueTypeConformance2;
  v11 = v4;
  v6 = swift_getOpaqueTypeConformance2(&v8, &opaque type descriptor for <<opaque return type of WidgetConfiguration.description<A>(_:)>>, 1);
  v8 = v0;
  v9 = (void *)v6;
  return swift_getOpaqueTypeConformance2(&v8, &opaque type descriptor for <<opaque return type of WidgetConfiguration.supportedFamilies(_:)>>, 1);
}

uint64_t sub_100015498()
{
  return sub_100015884(qword_100081D78, type metadata accessor for ThreeColumnDataEntry, (uint64_t)&unk_100064828);
}

uint64_t sub_1000154C4(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_10006BAD8, 1);
}

uint64_t sub_1000154D8(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100003704(&qword_100081D90);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_10001551C(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;

  v4 = *(_QWORD *)(type metadata accessor for TimelineProviderContext(0) - 8);
  v5 = (*(unsigned __int8 *)(v4 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v6 = v1[2];
  v7 = v1[3];
  v8 = v1[4];
  v9 = v1[5];
  v10 = (uint64_t)v1 + v5;
  v11 = (_QWORD *)((char *)v1 + ((*(_QWORD *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFFFF8));
  v12 = *v11;
  v13 = v11[1];
  v14 = (_QWORD *)swift_task_alloc(dword_100081DBC);
  *(_QWORD *)(v2 + 16) = v14;
  *v14 = v2;
  v14[1] = sub_1000155DC;
  return sub_100014324(a1, v6, v7, v8, v9, v10, v12, v13);
}

uint64_t sub_1000155DC()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  v4 = *v0;
  v1 = *(_QWORD *)(v4 + 16);
  v2 = *v0;
  v4 = v2;
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t sub_100015628()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v1 = type metadata accessor for TimelineProviderContext(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 48) & ~v3;
  v5 = v3 | 7;
  v6 = (*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 40));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v6 + 8));
  return swift_deallocObject(v0, v6 + 16, v5);
}

uint64_t sub_1000156C4(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;

  v4 = *(_QWORD *)(type metadata accessor for TimelineProviderContext(0) - 8);
  v5 = (*(unsigned __int8 *)(v4 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v6 = v1[2];
  v7 = v1[3];
  v8 = v1[4];
  v9 = v1[5];
  v10 = (uint64_t)v1 + v5;
  v11 = (_QWORD *)((char *)v1 + ((*(_QWORD *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFFFF8));
  v12 = *v11;
  v13 = v11[1];
  v14 = (_QWORD *)swift_task_alloc(dword_100081DEC);
  *(_QWORD *)(v2 + 16) = v14;
  *v14 = v2;
  v14[1] = sub_1000158C4;
  return sub_100013594(a1, v6, v7, v8, v9, v10, v12, v13);
}

uint64_t sub_100015784(uint64_t a1, uint64_t (*a2)(_QWORD))
{
  uint64_t v3;

  v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

unint64_t sub_1000157C4()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_100081DF8;
  if (!qword_100081DF8)
  {
    v1 = sub_100003744(&qword_100081E00);
    v2[0] = type metadata accessor for ThreeColumnCategoryView(255);
    v2[1] = sub_100015884(&qword_100081DA8, type metadata accessor for ThreeColumnCategoryView, (uint64_t)&unk_1000643A8);
    swift_getOpaqueTypeConformance2(v2, &opaque type descriptor for <<opaque return type of View.widgetURL(_:)>>, 1);
    sub_100015884(&qword_100081E08, (uint64_t (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier, (uint64_t)&protocol conformance descriptor for AccessibilityAttachmentModifier);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100081DF8);
  }
  return result;
}

uint64_t sub_100015884(unint64_t *a1, uint64_t (*a2)(uint64_t), uint64_t a3)
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    v6 = a2(255);
    result = swift_getWitnessTable(a3, v6);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1000158C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;

  v5[44] = a4;
  v5[45] = v4;
  v5[42] = a2;
  v5[43] = a3;
  v5[41] = a1;
  v6 = type metadata accessor for Locale(0);
  v5[46] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v6 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for String.LocalizationValue(0);
  v5[47] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v7 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_100015948, 0, 0);
}

uint64_t sub_100015948()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  void *v3;
  uint64_t v4;
  id v5;
  id v6;
  NSObject *v7;
  os_log_type_t v8;
  _BOOL4 v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  id v21;
  _QWORD *v22;
  uint64_t v24;
  uint64_t v25;
  os_log_type_t v26;
  uint64_t v27;
  uint64_t v28;

  if (qword_100081698 != -1)
    swift_once(&qword_100081698, sub_10002259C);
  v1 = *(_QWORD *)(v0 + 344);
  v2 = (_QWORD *)(v0 + 328);
  v3 = *(void **)(v0 + 328);
  v4 = type metadata accessor for Logger(0);
  sub_100003884(v4, (uint64_t)static DataModel.widgetLoggerClimate);
  v5 = v3;
  swift_bridgeObjectRetain_n(v1, 2);
  v6 = v5;
  v7 = Logger.logObject.getter(v6);
  v8 = static os_log_type_t.default.getter();
  v9 = os_log_type_enabled(v7, v8);
  v10 = *(_QWORD *)(v0 + 344);
  if (v9)
  {
    v26 = v8;
    v11 = *(_QWORD *)(v0 + 336);
    v25 = *(_QWORD *)(v0 + 328);
    v12 = swift_slowAlloc(32, -1);
    v27 = swift_slowAlloc(96, -1);
    v28 = v27;
    *(_DWORD *)v12 = 136315650;
    swift_bridgeObjectRetain(v10);
    *(_QWORD *)(v0 + 304) = sub_10001DF04(v11, v10, &v28);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 304, v0 + 312, v12 + 4, v12 + 12);
    swift_bridgeObjectRelease_n(v10, 3);
    *(_WORD *)(v12 + 12) = 2080;
    *(_QWORD *)(v0 + 312) = sub_10001DF04(0xD000000000000028, 0x80000001000680B0, &v28);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 312, v0 + 320, v12 + 14, v12 + 22);
    *(_WORD *)(v12 + 22) = 2080;
    if (v25)
    {
      v13 = objc_msgSend(v6, "name");
      v14 = static String._unconditionallyBridgeFromObjectiveC(_:)(v13);
      v16 = v15;

    }
    else
    {
      v16 = 0xE300000000000000;
      v14 = 7104878;
    }
    v2 = (_QWORD *)(v0 + 328);
    *(_QWORD *)(v0 + 320) = sub_10001DF04(v14, v16, &v28);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 320, v0 + 328, v12 + 24, v12 + 32);
    swift_bridgeObjectRelease(v16);

    swift_arrayDestroy(v27, 3, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v27, -1, -1);
    swift_slowDealloc(v12, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease_n(*(_QWORD *)(v0 + 344), 2);

  }
  if (*v2)
  {
    v17 = qword_100081650;
    v18 = v6;
    if (v17 != -1)
      swift_once(&qword_100081650, sub_10001821C);
    v19 = qword_10008A590;
    v20 = dword_100081E74;
    v21 = v18;
    v22 = (_QWORD *)swift_task_alloc(v20);
    *(_QWORD *)(v0 + 384) = v22;
    *v22 = v0;
    v22[1] = sub_100015CAC;
    return DataModel.reloadCharacteristics(matching:for:fetchId:)(v19, *(_QWORD *)(v0 + 328), *(_QWORD *)(v0 + 336), *(_QWORD *)(v0 + 344));
  }
  else
  {
    v24 = *(_QWORD *)(v0 + 368);
    swift_task_dealloc(*(_QWORD *)(v0 + 376));
    swift_task_dealloc(v24);
    return (*(uint64_t (**)(double *))(v0 + 8))(_swiftEmptyArrayStorage);
  }
}

uint64_t sub_100015CAC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  void *v3;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 384);
  v3 = *(void **)(*(_QWORD *)v1 + 328);
  *(_QWORD *)(*(_QWORD *)v1 + 392) = a1;
  swift_task_dealloc(v2);

  return swift_task_switch(sub_100015D10, 0, 0);
}

uint64_t sub_100015D10()
{
  uint64_t v0;
  _OWORD *v1;
  uint64_t v2;
  id v3;
  __int128 v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  double *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  unint64_t v24;
  unint64_t v25;
  char *v26;
  _OWORD *v27;
  uint64_t v28;
  id v29;
  __int128 v30;
  id v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  double *v35;
  char *v36;
  uint64_t v37;
  char v38;
  char v39;
  char v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  unint64_t v52;
  unint64_t v53;
  char *v54;
  _OWORD *v55;
  void *v56;
  uint64_t v57;
  id v58;
  void *v59;
  uint64_t v60;
  __int128 v61;
  __int128 v62;
  id v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  double *v67;
  _QWORD *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  char *v78;
  unint64_t v79;
  unint64_t v80;
  char *v81;
  uint64_t v82;
  uint64_t v83;
  int64_t v84;
  int64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  unint64_t v90;
  unint64_t v91;
  void *v92;
  double *v93;
  uint64_t v94;
  uint64_t v95;
  double *v96;
  uint64_t v97;
  void *v98;
  uint64_t v99;
  uint64_t v101;
  unint64_t v102;
  uint64_t v103;
  uint64_t v104;
  unint64_t v105;
  void *v106;
  unint64_t v107;
  _QWORD *v108;
  uint64_t v109;
  _QWORD *v110;
  uint64_t v111;
  _QWORD *v112;
  void *v113;
  uint64_t v114;
  _QWORD *v115;
  uint64_t v116;
  _QWORD *v117;
  uint64_t v118;
  void *v119;
  double *v120;

  v1 = (_OWORD *)(v0 + 128);
  v2 = qword_100081658;
  v3 = *(id *)(v0 + 328);
  if (v2 != -1)
  {
    swift_once(&qword_100081658, sub_1000183D8);
    v3 = *(id *)(v0 + 328);
  }
  v108 = (_QWORD *)(v0 + 232);
  v110 = (_QWORD *)(v0 + 240);
  v112 = (_QWORD *)(v0 + 272);
  v114 = *(_QWORD *)(v0 + 392);
  v105 = *(_QWORD *)(v0 + 344);
  v116 = *(_QWORD *)(v0 + 336);
  v4 = *(_OWORD *)&qword_10008A5A8;
  *v1 = xmmword_10008A598;
  *(_OWORD *)(v0 + 144) = v4;
  *(_OWORD *)(v0 + 160) = xmmword_10008A5B8;
  *(_QWORD *)(v0 + 176) = qword_10008A5C8;
  v119 = v3;
  v5 = objc_msgSend(v3, "accessories");
  v118 = sub_1000038AC(0, (unint64_t *)&qword_100081F40, HMAccessory_ptr);
  v6 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v5, v118);

  *(_OWORD *)(v0 + 200) = *v1;
  *(_QWORD *)(v0 + 264) = *(_QWORD *)(v0 + 144);
  *(int8x16_t *)(v0 + 248) = vextq_s8(*(int8x16_t *)(v0 + 152), *(int8x16_t *)(v0 + 152), 8uLL);
  v7 = *(_QWORD *)(v0 + 168);
  v8 = *(_QWORD *)(v0 + 176);
  sub_1000038E4(v0 + 200);
  sub_10000390C((_QWORD *)(v0 + 264));
  sub_10000390C((_QWORD *)(v0 + 256));
  sub_10000390C((_QWORD *)(v0 + 248));
  sub_10000389C(v7, v8);
  v9 = sub_10001FE8C(v6, v0 + 128);
  sub_100003934(v0 + 200);
  sub_10000395C((_QWORD *)(v0 + 264));
  sub_10000395C((_QWORD *)(v0 + 256));
  sub_10000395C((_QWORD *)(v0 + 248));
  sub_100003984(v7, v8);
  swift_bridgeObjectRelease(v6);
  swift_bridgeObjectRetain(v105);
  swift_bridgeObjectRetain(v114);
  v10 = sub_100055A6C(_swiftEmptyArrayStorage, (uint64_t)v9, v114, v116, v105);
  swift_bridgeObjectRelease(v105);
  swift_bridgeObjectRelease(v114);
  swift_bridgeObjectRelease(v9);

  if (v10[2])
  {
    v12 = *(_QWORD *)(v0 + 368);
    v11 = *(_QWORD *)(v0 + 376);
    type metadata accessor for DataModel();
    v13 = sub_100018920((uint64_t)v10);
    v15 = v14;
    v16 = String.LocalizationValue.init(stringLiteral:)(0xD000000000000018, 0x8000000100068050);
    static Locale.current.getter(v16);
    v17 = String.init(localized:table:bundle:locale:comment:)(v11, 0x696C61636F4C4648, 0xED0000656C62617ALL, 0, v12, 0, 0, 256);
    v19 = v18;
    v20 = sub_100016810((uint64_t)v10);
    v22 = v21;
    swift_bridgeObjectRelease(v10);
    swift_bridgeObjectRetain(v15);
    swift_bridgeObjectRetain(v19);
    swift_bridgeObjectRetain(v22);
    v23 = sub_10000A030(0, 1, 1, (char *)_swiftEmptyArrayStorage);
    v25 = *((_QWORD *)v23 + 2);
    v24 = *((_QWORD *)v23 + 3);
    if (v25 >= v24 >> 1)
      v23 = sub_10000A030((char *)(v24 > 1), v25 + 1, 1, v23);
    *((_QWORD *)v23 + 2) = v25 + 1;
    v120 = (double *)v23;
    v26 = &v23[56 * v25];
    *((_QWORD *)v26 + 4) = v13;
    *((_QWORD *)v26 + 5) = v15;
    *((_QWORD *)v26 + 6) = v17;
    *((_QWORD *)v26 + 7) = v19;
    *((_QWORD *)v26 + 8) = v20;
    *((_QWORD *)v26 + 9) = v22;
    v26[80] = 0;
    swift_bridgeObjectRelease(v15);
    swift_bridgeObjectRelease(v19);
    swift_bridgeObjectRelease(v22);
  }
  else
  {
    swift_bridgeObjectRelease(v10);
    v120 = _swiftEmptyArrayStorage;
  }
  v27 = (_OWORD *)(v0 + 72);
  v28 = qword_100081660;
  v29 = *(id *)(v0 + 328);
  if (v28 != -1)
  {
    swift_once(&qword_100081660, sub_100018424);
    v29 = *(id *)(v0 + 328);
  }
  v115 = (_QWORD *)(v0 + 288);
  v117 = (_QWORD *)(v0 + 296);
  v101 = *(_QWORD *)(v0 + 344);
  v103 = *(_QWORD *)(v0 + 392);
  v104 = *(_QWORD *)(v0 + 336);
  v106 = v29;
  v30 = *(_OWORD *)&qword_10008A5E0;
  *v27 = xmmword_10008A5D0;
  *(_OWORD *)(v0 + 88) = v30;
  *(_OWORD *)(v0 + 104) = xmmword_10008A5F0;
  *(_QWORD *)(v0 + 120) = qword_10008A600;
  v31 = objc_msgSend(v29, "accessories", v101);
  v32 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v31, v118);

  *(_OWORD *)(v0 + 216) = *v27;
  *(_OWORD *)(v0 + 232) = *(_OWORD *)(v0 + 88);
  v33 = *(_QWORD *)(v0 + 112);
  *(_QWORD *)(v0 + 272) = *(_QWORD *)(v0 + 104);
  v34 = *(_QWORD *)(v0 + 120);
  sub_1000038E4(v0 + 216);
  sub_10000390C(v108);
  sub_10000390C(v110);
  sub_10000390C(v112);
  sub_10000389C(v33, v34);
  v35 = sub_10001FE8C(v32, v0 + 72);
  sub_100003934(v0 + 216);
  sub_10000395C(v108);
  sub_10000395C(v110);
  sub_10000395C(v112);
  sub_100003984(v33, v34);
  swift_bridgeObjectRelease(v32);
  swift_bridgeObjectRetain(v102);
  swift_bridgeObjectRetain(v103);
  v36 = sub_100002B84((char *)_swiftEmptyArrayStorage, (uint64_t)v35, v103, v104, v102);
  swift_bridgeObjectRelease(v102);
  swift_bridgeObjectRelease(v103);
  swift_bridgeObjectRelease(v35);

  if (*((_QWORD *)v36 + 2))
  {
    v37 = sub_100018504((uint64_t)v36);
    v39 = v38;
    swift_bridgeObjectRelease(v36);
    v40 = v39 & 1;
    if ((v39 & 1) != 0)
    {
LABEL_14:
      v41 = 0x6964656D2E697161;
      v36 = (char *)0xEA00000000006D75;
    }
    else
    {
      v36 = (char *)0xE700000000000000;
      v41 = 0x776F6C2E697161;
      switch(v37)
      {
        case 1:
          break;
        case 2:
        case 3:
        case 4:
          v41 = 0x6964656D2E697161;
          v36 = (char *)0xEA00000000006D75;
          break;
        case 5:
          v36 = (char *)0xE800000000000000;
          v41 = 0x686769682E697161;
          break;
        default:
          goto LABEL_14;
      }
    }
    v43 = *(_QWORD *)(v0 + 368);
    v42 = *(_QWORD *)(v0 + 376);
    v44 = String.LocalizationValue.init(stringLiteral:)(0xD000000000000017, 0x8000000100068070);
    static Locale.current.getter(v44);
    v45 = String.init(localized:table:bundle:locale:comment:)(v42, 0x696C61636F4C4648, 0xED0000656C62617ALL, 0, v43, 0, 0, 256);
    v47 = v46;
    v48 = sub_100018784(v37, v40);
    v50 = v49;
    swift_bridgeObjectRetain(v36);
    swift_bridgeObjectRetain(v47);
    swift_bridgeObjectRetain(v50);
    if ((swift_isUniquelyReferenced_nonNull_native(v120) & 1) != 0)
      v51 = (char *)v120;
    else
      v51 = sub_10000A030(0, *((_QWORD *)v120 + 2) + 1, 1, (char *)v120);
    v53 = *((_QWORD *)v51 + 2);
    v52 = *((_QWORD *)v51 + 3);
    if (v53 >= v52 >> 1)
      v51 = sub_10000A030((char *)(v52 > 1), v53 + 1, 1, v51);
    *((_QWORD *)v51 + 2) = v53 + 1;
    v120 = (double *)v51;
    v54 = &v51[56 * v53];
    *((_QWORD *)v54 + 4) = v41;
    *((_QWORD *)v54 + 5) = v36;
    *((_QWORD *)v54 + 6) = v45;
    *((_QWORD *)v54 + 7) = v47;
    *((_QWORD *)v54 + 8) = v48;
    *((_QWORD *)v54 + 9) = v50;
    v54[80] = 0;
    swift_bridgeObjectRelease(v47);
    swift_bridgeObjectRelease(v50);
  }
  v55 = (_OWORD *)(v0 + 16);
  v56 = *(void **)(v0 + 328);
  swift_bridgeObjectRelease(v36);
  v57 = qword_100081668;
  v58 = v56;
  if (v57 != -1)
    swift_once(&qword_100081668, sub_100018470);
  v107 = *(_QWORD *)(v0 + 344);
  v109 = *(_QWORD *)(v0 + 392);
  v59 = *(void **)(v0 + 328);
  v111 = *(_QWORD *)(v0 + 336);
  v113 = v59;
  v60 = qword_10008A638;
  v62 = xmmword_10008A618;
  v61 = xmmword_10008A628;
  *v55 = xmmword_10008A608;
  *(_OWORD *)(v0 + 32) = v62;
  *(_OWORD *)(v0 + 48) = v61;
  *(_QWORD *)(v0 + 64) = v60;
  v63 = objc_msgSend(v59, "accessories");
  v64 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v63, v118);

  *(_OWORD *)(v0 + 184) = *v55;
  *(_OWORD *)(v0 + 280) = *(_OWORD *)(v0 + 32);
  v65 = *(_QWORD *)(v0 + 56);
  *(_QWORD *)(v0 + 296) = *(_QWORD *)(v0 + 48);
  v66 = *(_QWORD *)(v0 + 64);
  sub_1000038E4(v0 + 184);
  sub_10000390C((_QWORD *)(v0 + 280));
  sub_10000390C(v115);
  sub_10000390C(v117);
  sub_10000389C(v65, v66);
  v67 = sub_10001FE8C(v64, v0 + 16);
  sub_100003934(v0 + 184);
  sub_10000395C((_QWORD *)(v0 + 280));
  sub_10000395C(v115);
  sub_10000395C(v117);
  sub_100003984(v65, v66);
  swift_bridgeObjectRelease(v64);
  swift_bridgeObjectRetain(v107);
  swift_bridgeObjectRetain(v109);
  v68 = sub_10002EEC0(_swiftEmptyArrayStorage, (uint64_t)v67, v109, v111, v107);
  swift_bridgeObjectRelease(v107);
  swift_bridgeObjectRelease_n(v109, 2);
  swift_bridgeObjectRelease(v67);

  if (v68[2])
  {
    v69 = *(_QWORD *)(v0 + 368);
    v70 = *(_QWORD *)(v0 + 376);
    v71 = String.LocalizationValue.init(stringLiteral:)(0xD000000000000015, 0x8000000100068090);
    static Locale.current.getter(v71);
    v72 = String.init(localized:table:bundle:locale:comment:)(v70, 0x696C61636F4C4648, 0xED0000656C62617ALL, 0, v69, 0, 0, 256);
    v74 = v73;
    v75 = sub_100018A58((uint64_t)v68);
    v77 = v76;
    swift_bridgeObjectRelease(v68);
    swift_bridgeObjectRetain(0xED00006C6C69662ELL);
    swift_bridgeObjectRetain(v74);
    swift_bridgeObjectRetain(v77);
    if ((swift_isUniquelyReferenced_nonNull_native(v120) & 1) != 0)
      v78 = (char *)v120;
    else
      v78 = sub_10000A030(0, *((_QWORD *)v120 + 2) + 1, 1, (char *)v120);
    v80 = *((_QWORD *)v78 + 2);
    v79 = *((_QWORD *)v78 + 3);
    if (v80 >= v79 >> 1)
      v78 = sub_10000A030((char *)(v79 > 1), v80 + 1, 1, v78);
    *((_QWORD *)v78 + 2) = v80 + 1;
    v81 = &v78[56 * v80];
    strcpy(v81 + 32, "humidity.fill");
    *((_WORD *)v81 + 23) = -4864;
    *((_QWORD *)v81 + 6) = v72;
    *((_QWORD *)v81 + 7) = v74;
    *((_QWORD *)v81 + 8) = v75;
    *((_QWORD *)v81 + 9) = v77;
    v81[80] = 1;
    v82 = v74;
    v83 = (uint64_t)v78;
    swift_bridgeObjectRelease(v82);
    swift_bridgeObjectRelease(v77);
    v68 = (_QWORD *)0xED00006C6C69662ELL;
  }
  else
  {
    v83 = (uint64_t)v120;
  }
  v84 = *(_QWORD *)(v0 + 352);
  swift_bridgeObjectRelease(v68);
  v85 = sub_10004C974(v84, v83);
  v87 = v86;
  v89 = v88;
  v91 = v90;
  if ((v90 & 1) == 0)
    goto LABEL_30;
  v94 = type metadata accessor for __ContiguousArrayStorageBase(0);
  v95 = swift_unknownObjectRetain_n(v85, 2);
  v96 = (double *)swift_dynamicCastClass(v95, v94);
  if (!v96)
  {
    swift_unknownObjectRelease(v85);
    v96 = _swiftEmptyArrayStorage;
  }
  v97 = *((_QWORD *)v96 + 2);
  swift_release(v96);
  if (__OFSUB__(v91 >> 1, v89))
  {
    __break(1u);
    goto LABEL_43;
  }
  if (v97 != (v91 >> 1) - v89)
  {
LABEL_43:
    swift_unknownObjectRelease(v85);
LABEL_30:
    v92 = *(void **)(v0 + 328);
    v93 = sub_100022830(v85, v87, v89, v91);

LABEL_37:
    swift_unknownObjectRelease(v85);
    goto LABEL_38;
  }
  v98 = *(void **)(v0 + 328);
  v93 = (double *)swift_dynamicCastClass(v85, v94);
  swift_unknownObjectRelease(v85);

  if (!v93)
  {
    v93 = _swiftEmptyArrayStorage;
    goto LABEL_37;
  }
LABEL_38:
  v99 = *(_QWORD *)(v0 + 368);
  swift_task_dealloc(*(_QWORD *)(v0 + 376));
  swift_task_dealloc(v99);
  return (*(uint64_t (**)(double *))(v0 + 8))(v93);
}

uint64_t sub_100016810(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  char *v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  double v17;
  uint64_t v18;
  uint64_t v19;
  double v20;
  double v21;
  double *v22;
  uint64_t v23;
  double v24;
  double v25;
  double *v26;
  double v27;
  double v28;
  void *v29;
  id v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  void *v36;
  double v37;
  void (*v38)(char *, uint64_t);
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void (*v42)(uint64_t, uint64_t);
  uint64_t v43;
  uint64_t v44;
  char *v45;
  void (*v46)(char *, uint64_t);
  char *v47;
  uint64_t v48;
  uint64_t v49;
  void *v50;
  double v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  void (*v56)(uint64_t, uint64_t);
  uint64_t v57;
  char v58;
  char *v59;
  uint64_t v60;
  char *v61;
  void *v62;
  char *v63;
  double v64;
  unint64_t v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  void *v69;
  char *v70;
  uint64_t v71;
  char *v72;
  void *v73;
  double v74;
  unint64_t v75;
  uint64_t v76;
  uint64_t countAndFlagsBits;
  void *object;
  Swift::String v79;
  uint64_t v80;
  uint64_t v81;
  char *v82;
  void *v83;
  double v84;
  void *v85;
  Swift::String v86;
  uint64_t v88;
  unint64_t v89;
  unint64_t v90;
  uint64_t v91;
  char *v92;
  char *v93;
  uint64_t v94;
  char *v95;
  char *v96;
  double v97;
  Swift::String v98;
  double v99;
  unint64_t v100;

  sub_100003704(&qword_100081E28);
  ((void (*)(void))__chkstk_darwin)();
  v93 = (char *)&v88 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for Locale(0);
  ((void (*)(void))__chkstk_darwin)();
  v4 = (char *)&v88 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v94 = sub_100003704(&qword_100081E50);
  v5 = *(char **)(v94 - 8);
  ((void (*)(void))__chkstk_darwin)();
  v7 = (char *)&v88 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100003704(&qword_100081E40);
  v8 = ((uint64_t (*)(void))__chkstk_darwin)();
  v10 = (char *)&v88 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __chkstk_darwin(v8);
  v12 = __chkstk_darwin(v11);
  v95 = (char *)&v88 - v15;
  v16 = *(_QWORD *)(a1 + 16);
  if (v16)
  {
    v17 = *(double *)(a1 + 32);
    v18 = v16 - 1;
    v96 = v13;
    v91 = v14;
    v92 = v5;
    if (v18)
    {
      v22 = (double *)(a1 + 40);
      v23 = v18;
      v20 = v17;
      do
      {
        v24 = *v22++;
        v25 = v24;
        if (v24 < v20)
          v20 = v25;
        --v23;
      }
      while (v23);
      v19 = v12;
      v26 = (double *)(a1 + 40);
      do
      {
        v27 = *v26++;
        v28 = v27;
        if (v17 < v27)
          v17 = v28;
        --v18;
      }
      while (v18);
    }
    else
    {
      v19 = v12;
      v20 = v17;
    }
    v29 = (void *)objc_opt_self(NSUnitTemperature);
    v30 = objc_msgSend(v29, "celsius");
    v31 = sub_1000038AC(0, &qword_100081E48, NSUnitTemperature_ptr);
    Measurement.init(value:unit:)(v30, v31, v20);
    Measurement.init(value:unit:)(objc_msgSend(v29, "celsius"), v31, v17);
    v32 = sub_100016E8C((uint64_t)v7);
    v33 = static Locale.autoupdatingCurrent.getter(v32);
    v34 = (uint64_t)v7;
    v35 = v93;
    static MeasurementFormatUnitUsage<>.weather.getter(v33);
    v36 = (void *)NSUnitTemperature.init(forLocale:usage:)(v4, v35);
    Measurement<>.converted(to:)(v36, v19);

    v37 = Measurement.value.getter(v19);
    v38 = *(void (**)(char *, uint64_t))(v91 + 8);
    v38(v10, v19);
    v99 = v37;
    v39 = v94;
    v91 = FloatingPointFormatStyle.format(_:)(&v99, v94);
    v41 = v40;
    v42 = (void (*)(uint64_t, uint64_t))*((_QWORD *)v92 + 1);
    v42(v34, v39);
    v43 = sub_100016E8C(v34);
    v44 = static Locale.autoupdatingCurrent.getter(v43);
    static MeasurementFormatUnitUsage<>.weather.getter(v44);
    v92 = v4;
    v45 = v4;
    v46 = v38;
    v47 = v35;
    v48 = v34;
    v49 = v41;
    v50 = (void *)NSUnitTemperature.init(forLocale:usage:)(v45, v47);
    Measurement<>.converted(to:)(v50, v19);

    v51 = Measurement.value.getter(v19);
    v46(v10, v19);
    v99 = v51;
    v52 = FloatingPointFormatStyle.format(_:)(&v99, v39);
    v54 = v53;
    v55 = v39;
    v56 = v42;
    v42(v34, v55);
    if (v91 == v52 && v49 == v54)
    {
      v57 = swift_bridgeObjectRelease_n(v49, 2);
    }
    else
    {
      v58 = _stringCompareWithSmolCheck(_:_:expecting:)(v91, v49, v52, v54, 0);
      swift_bridgeObjectRelease(v54);
      v57 = swift_bridgeObjectRelease(v49);
      if ((v58 & 1) == 0)
      {
        v99 = 0.0;
        v100 = 0xE000000000000000;
        v91 = (uint64_t)v46;
        v70 = v92;
        v71 = static Locale.autoupdatingCurrent.getter(v57);
        v72 = v93;
        static MeasurementFormatUnitUsage<>.weather.getter(v71);
        v73 = (void *)NSUnitTemperature.init(forLocale:usage:)(v70, v72);
        Measurement<>.converted(to:)(v73, v19);

        v74 = Measurement.value.getter(v19);
        ((void (*)(char *, uint64_t))v91)(v10, v19);
        v97 = v74;
        sub_100016E8C(v34);
        v75 = sub_100018A14();
        v90 = v75;
        v89 = sub_100018BF8();
        v76 = v94;
        BinaryFloatingPoint.formatted<A>(_:)(&v98, v34, &type metadata for Double, v94, v75, v89);
        v56(v34, v76);
        countAndFlagsBits = v98._countAndFlagsBits;
        object = v98._object;
        swift_bridgeObjectRelease(v100);
        v99 = *(double *)&countAndFlagsBits;
        v100 = (unint64_t)object;
        v79._countAndFlagsBits = 9666786;
        v79._object = (void *)0xA300000000000000;
        String.append(_:)(v79);
        v81 = static Locale.autoupdatingCurrent.getter(v80);
        static MeasurementFormatUnitUsage<>.weather.getter(v81);
        v82 = v70;
        v46 = (void (*)(char *, uint64_t))v91;
        v83 = (void *)NSUnitTemperature.init(forLocale:usage:)(v82, v72);
        v63 = v96;
        Measurement<>.converted(to:)(v83, v19);

        v84 = Measurement.value.getter(v19);
        v46(v10, v19);
        v97 = v84;
        sub_100016E8C(v34);
        BinaryFloatingPoint.formatted<A>(_:)(&v98, v34, &type metadata for Double, v76, v90, v89);
        v56(v34, v76);
        v85 = v98._object;
        String.append(_:)(v98);
        swift_bridgeObjectRelease(v85);
        goto LABEL_19;
      }
    }
    v99 = 0.0;
    v100 = 0xE000000000000000;
    v59 = v92;
    v60 = static Locale.autoupdatingCurrent.getter(v57);
    v61 = v93;
    static MeasurementFormatUnitUsage<>.weather.getter(v60);
    v62 = (void *)NSUnitTemperature.init(forLocale:usage:)(v59, v61);
    v63 = v96;
    Measurement<>.converted(to:)(v62, v19);

    v64 = Measurement.value.getter(v19);
    v46(v10, v19);
    v97 = v64;
    sub_100016E8C(v34);
    v65 = sub_100018A14();
    v66 = sub_100018BF8();
    v67 = v94;
    BinaryFloatingPoint.formatted<A>(_:)(&v98, v48, &type metadata for Double, v94, v65, v66);
    v56(v48, v67);
    v68 = v98._countAndFlagsBits;
    v69 = v98._object;
    swift_bridgeObjectRelease(v100);
    v99 = *(double *)&v68;
    v100 = (unint64_t)v69;
LABEL_19:
    v86._countAndFlagsBits = 47810;
    v86._object = (void *)0xA200000000000000;
    String.append(_:)(v86);
    v21 = v99;
    v46(v63, v19);
    v46(v95, v19);
    return *(_QWORD *)&v21;
  }
  *(_QWORD *)&v21 = 0x9380E29380E2;
  return *(_QWORD *)&v21;
}

uint64_t sub_100016E8C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  id v18;
  char v19;
  _QWORD v21[2];

  v21[1] = a1;
  sub_100003704(&qword_100081E28);
  __chkstk_darwin();
  v2 = (char *)v21 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = type metadata accessor for NumberFormatStyleConfiguration.Precision(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin();
  v6 = (char *)v21 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for Locale(0);
  __chkstk_darwin();
  v8 = (char *)v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_100003704(&qword_100081E50);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = __chkstk_darwin();
  v13 = (char *)v21 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  static Locale.autoupdatingCurrent.getter(v11);
  v14 = sub_100018A14();
  FloatingPointFormatStyle.init(locale:)(v8, &type metadata for Double, v14);
  v15 = sub_1000038AC(0, &qword_100081E48, NSUnitTemperature_ptr);
  v16 = static Locale.autoupdatingCurrent.getter(v15);
  static MeasurementFormatUnitUsage<>.weather.getter(v16);
  v17 = (void *)NSUnitTemperature.init(forLocale:usage:)(v8, v2);
  v18 = objc_msgSend((id)objc_opt_self(NSUnitTemperature), "celsius");
  v19 = static NSObject.== infix(_:_:)(v17, v18);

  static NumberFormatStyleConfiguration.Precision.fractionLength(_:)(v19 & 1);
  FloatingPointFormatStyle.precision(_:)(v6, v9);
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v13, v9);
}

uint64_t sub_10001708C(double a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v27;
  uint64_t v28;

  v2 = type metadata accessor for Locale(0);
  __chkstk_darwin(v2);
  v4 = (char *)&v27 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_100003704(&qword_100081E20);
  __chkstk_darwin(v5);
  v7 = (char *)&v27 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_100003704(&qword_100081E28);
  __chkstk_darwin(v8);
  v10 = (char *)&v27 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_100003704(&qword_100081E30);
  __chkstk_darwin(v11);
  v13 = (char *)&v27 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_100003704(&qword_100081E38);
  v28 = *(_QWORD *)(v14 - 8);
  __chkstk_darwin(v14);
  v16 = (char *)&v27 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = sub_100003704(&qword_100081E40);
  v17 = *(_QWORD *)(v27 - 8);
  __chkstk_darwin(v27);
  v19 = (char *)&v27 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = objc_msgSend((id)objc_opt_self(NSUnitTemperature), "celsius");
  v21 = sub_1000038AC(0, &qword_100081E48, NSUnitTemperature_ptr);
  Measurement.init(value:unit:)(v20, v21, a1);
  v22 = static Measurement<>.FormatStyle.UnitWidth.narrow.getter(v21);
  static MeasurementFormatUnitUsage<>.weather.getter(v22);
  sub_100016E8C((uint64_t)v7);
  v23 = sub_100003704(&qword_100081E50);
  v24 = (*(uint64_t (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 56))(v7, 0, 1, v23);
  static Locale.autoupdatingCurrent.getter(v24);
  Measurement<>.FormatStyle<>.init(width:locale:usage:hidesScaleName:numberFormatStyle:)(v13, v4, v10, 1, v7);
  v25 = Measurement<>.FormatStyle.format(_:)(v19, v14);
  (*(void (**)(char *, uint64_t))(v28 + 8))(v16, v14);
  (*(void (**)(char *, uint64_t))(v17 + 8))(v19, v27);
  return v25;
}

void sub_100017330(char *a1, void **a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  sub_100017AC4(a1, a2, a3, a4, a5, "{%s} temperature sensor '%s' cached value is: %@", "{%s} temperature sensor '%s' did not respond");
}

void sub_100017354(char **a1, void **a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  void *v8;
  uint64_t v9;
  id v10;
  id v11;
  NSObject *v12;
  os_log_type_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  void *v18;
  id v19;
  id v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  id v24;
  id v25;
  NSObject *v26;
  os_log_type_t v27;
  __objc2_prot_list *v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  id v32;
  void *v33;
  id v34;
  id v35;
  unint64_t v36;
  unint64_t v37;
  id v38;
  id v39;
  uint64_t v40;
  NSString v41;
  uint64_t v42;
  id v43;
  id v44;
  uint64_t v45;
  id v46;
  id v47;
  char *v48;
  unint64_t v49;
  unint64_t v50;
  void *v51;
  char **v52;
  void *v53;
  __int128 v54;
  __int128 v55;
  uint64_t v56;
  _BYTE v57[16];
  uint64_t v58;
  id v59;

  v8 = *a2;
  if ((sub_100036838(*a2, a3) & 1) != 0)
  {
    if (qword_100081698 != -1)
      swift_once(&qword_100081698, sub_10002259C);
    v9 = type metadata accessor for Logger(0);
    sub_100003884(v9, (uint64_t)static DataModel.widgetLoggerClimate);
    v10 = v8;
    swift_bridgeObjectRetain_n(a5, 2);
    v11 = v10;
    v12 = Logger.logObject.getter(v11);
    v13 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v12, v13))
    {
      v14 = 0x6E776F6E6B6E75;
      v15 = swift_slowAlloc(22, -1);
      v16 = swift_slowAlloc(64, -1);
      v56 = v16;
      *(_DWORD *)v15 = 136315394;
      swift_bridgeObjectRetain(a5);
      *(_QWORD *)&v54 = sub_10001DF04(a4, a5, &v56);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v54, (char *)&v54 + 8, v15 + 4, v15 + 12);
      swift_bridgeObjectRelease_n(a5, 3);
      *(_WORD *)(v15 + 12) = 2080;
      v17 = objc_msgSend(v11, "service");
      if (v17
        && (v18 = v17, v19 = objc_msgSend(v17, "accessory"), v18, v19))
      {
        v20 = objc_msgSend(v19, "name");

        v14 = static String._unconditionallyBridgeFromObjectiveC(_:)(v20);
        v22 = v21;

      }
      else
      {
        v22 = 0xE700000000000000;
      }
      *(_QWORD *)&v54 = sub_10001DF04(v14, v22, &v56);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v54, (char *)&v54 + 8, v15 + 14, v15 + 22);

      swift_bridgeObjectRelease(v22);
      _os_log_impl((void *)&_mh_execute_header, v12, v13, "{%s} air quality sensor '%s' did not respond", (uint8_t *)v15, 0x16u);
      swift_arrayDestroy(v16, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v16, -1, -1);
      swift_slowDealloc(v15, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n(a5, 2);
    }
    return;
  }
  if (qword_100081698 != -1)
    swift_once(&qword_100081698, sub_10002259C);
  v23 = type metadata accessor for Logger(0);
  sub_100003884(v23, (uint64_t)static DataModel.widgetLoggerClimate);
  v24 = v8;
  swift_bridgeObjectRetain_n(a5, 2);
  v25 = v24;
  v26 = Logger.logObject.getter(v25);
  v27 = static os_log_type_t.default.getter();
  v28 = &DataModel;
  if (!os_log_type_enabled(v26, v27))
  {

    swift_bridgeObjectRelease_n(a5, 2);
    goto LABEL_28;
  }
  v52 = a1;
  v29 = 0x6E776F6E6B6E75;
  v30 = swift_slowAlloc(32, -1);
  v31 = (_QWORD *)swift_slowAlloc(8, -1);
  v51 = (void *)swift_slowAlloc(64, -1);
  v59 = v51;
  *(_DWORD *)v30 = 136315650;
  swift_bridgeObjectRetain(a5);
  v56 = sub_10001DF04(a4, a5, (uint64_t *)&v59);
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v56, v57, v30 + 4, v30 + 12);
  swift_bridgeObjectRelease_n(a5, 3);
  *(_WORD *)(v30 + 12) = 2080;
  v32 = objc_msgSend(v25, "service");
  if (v32
    && (v33 = v32, v34 = objc_msgSend(v32, "accessory"), v33, v34))
  {
    v35 = objc_msgSend(v34, "name");

    v29 = static String._unconditionallyBridgeFromObjectiveC(_:)(v35);
    v37 = v36;

  }
  else
  {
    v37 = 0xE700000000000000;
  }
  v56 = sub_10001DF04(v29, v37, (uint64_t *)&v59);
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v56, v57, v30 + 14, v30 + 22);

  swift_bridgeObjectRelease(v37);
  *(_WORD *)(v30 + 22) = 2112;
  v38 = objc_msgSend(v25, "value");
  if (v38)
  {
    v39 = v38;
    _bridgeAnyObjectToAny(_:)(&v54, v38);
    swift_unknownObjectRelease(v39);
  }
  else
  {
    v54 = 0u;
    v55 = 0u;
  }
  a1 = v52;
  sub_1000184BC((uint64_t)&v54, (uint64_t)&v56);
  if (!v58)
  {
    sub_10000E534((uint64_t)&v56);
    goto LABEL_26;
  }
  v40 = sub_1000038AC(0, &qword_100081E18, NSObject_ptr);
  if ((swift_dynamicCast(&v53, &v56, (char *)&type metadata for Any + 8, v40, 6) & 1) == 0)
  {
LABEL_26:
    v41 = String._bridgeToObjectiveC()();
    goto LABEL_27;
  }
  v41 = v53;
LABEL_27:
  v56 = (uint64_t)v41;
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v56, v57, v30 + 24, v30 + 32);
  *v31 = v41;

  _os_log_impl((void *)&_mh_execute_header, v26, v27, "{%s} air quality sensor '%s' cached value is: %@", (uint8_t *)v30, 0x20u);
  v42 = sub_100003704((uint64_t *)&unk_100081FD0);
  swift_arrayDestroy(v31, 1, v42);
  swift_slowDealloc(v31, -1, -1);
  swift_arrayDestroy(v51, 2, (char *)&type metadata for Any + 8);
  swift_slowDealloc(v51, -1, -1);
  swift_slowDealloc(v30, -1, -1);

  v28 = &DataModel;
LABEL_28:
  v43 = objc_msgSend(v25, (SEL)v28[363].count, v51);
  if (v43)
  {
    v44 = v43;
    _bridgeAnyObjectToAny(_:)(&v54, v43);
    swift_unknownObjectRelease(v44);
  }
  else
  {
    v54 = 0u;
    v55 = 0u;
  }
  sub_1000184BC((uint64_t)&v54, (uint64_t)&v56);
  if (v58)
  {
    v45 = sub_1000038AC(0, &qword_100081E10, NSNumber_ptr);
    if ((swift_dynamicCast(&v59, &v56, (char *)&type metadata for Any + 8, v45, 6) & 1) != 0)
    {
      v46 = v59;
      v47 = objc_msgSend(v59, "integerValue");

      v48 = *a1;
      if ((swift_isUniquelyReferenced_nonNull_native(*a1) & 1) == 0)
        v48 = sub_10000A260(0, *((_QWORD *)v48 + 2) + 1, 1, v48);
      v50 = *((_QWORD *)v48 + 2);
      v49 = *((_QWORD *)v48 + 3);
      if (v50 >= v49 >> 1)
        v48 = sub_10000A260((char *)(v49 > 1), v50 + 1, 1, v48);
      *((_QWORD *)v48 + 2) = v50 + 1;
      *(_QWORD *)&v48[8 * v50 + 32] = v47;
      *a1 = v48;
    }
  }
  else
  {
    sub_10000E534((uint64_t)&v56);
  }
}

void sub_100017AA0(char *a1, void **a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  sub_100017AC4(a1, a2, a3, a4, a5, "{%s} humidity sensor '%s' cached value is: %@", "{%s} humidity sensor '%s' did not respond");
}

void sub_100017AC4(char *a1, void **a2, uint64_t a3, uint64_t a4, unint64_t a5, const char *a6, char *a7)
{
  void *v12;
  uint64_t v13;
  id v14;
  id v15;
  NSObject *v16;
  os_log_type_t v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  void *v21;
  id v22;
  id v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  id v28;
  id v29;
  NSObject *v30;
  os_log_type_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  id v35;
  void *v36;
  id v37;
  id v38;
  unint64_t v39;
  unint64_t v40;
  __objc2_prot_list *v41;
  id v42;
  id v43;
  uint64_t v44;
  NSString v45;
  uint64_t v46;
  id v47;
  id v48;
  uint64_t v49;
  id v50;
  double v51;
  double v52;
  double *v53;
  unint64_t v54;
  unint64_t v55;
  void *v56;
  const char *v57;
  char *format;
  char *formata;
  void *v60;
  id v61;
  __int128 v62;
  __int128 v63;
  uint64_t v64;
  _BYTE v65[16];
  uint64_t v66;

  v12 = *a2;
  if ((sub_100036838(*a2, a3) & 1) != 0)
  {
    if (qword_100081698 != -1)
      swift_once(&qword_100081698, sub_10002259C);
    v13 = type metadata accessor for Logger(0);
    sub_100003884(v13, (uint64_t)static DataModel.widgetLoggerClimate);
    v14 = v12;
    swift_bridgeObjectRetain_n(a5, 2);
    v15 = v14;
    v16 = Logger.logObject.getter(v15);
    v17 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v16, v17))
    {
      v18 = swift_slowAlloc(22, -1);
      v19 = swift_slowAlloc(64, -1);
      v64 = v19;
      *(_DWORD *)v18 = 136315394;
      swift_bridgeObjectRetain(a5);
      *(_QWORD *)&v62 = sub_10001DF04(a4, a5, &v64);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v62, (char *)&v62 + 8, v18 + 4, v18 + 12);
      swift_bridgeObjectRelease_n(a5, 3);
      *(_WORD *)(v18 + 12) = 2080;
      v20 = objc_msgSend(v15, "service");
      format = a7;
      if (v20
        && (v21 = v20, v22 = objc_msgSend(v20, "accessory"), v21, v22))
      {
        v23 = objc_msgSend(v22, "name");

        v24 = static String._unconditionallyBridgeFromObjectiveC(_:)(v23);
        v26 = v25;

      }
      else
      {
        v26 = 0xE700000000000000;
        v24 = 0x6E776F6E6B6E75;
      }
      *(_QWORD *)&v62 = sub_10001DF04(v24, v26, &v64);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v62, (char *)&v62 + 8, v18 + 14, v18 + 22);

      swift_bridgeObjectRelease(v26);
      _os_log_impl((void *)&_mh_execute_header, v16, v17, format, (uint8_t *)v18, 0x16u);
      swift_arrayDestroy(v19, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v19, -1, -1);
      swift_slowDealloc(v18, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n(a5, 2);
    }
    return;
  }
  if (qword_100081698 != -1)
    swift_once(&qword_100081698, sub_10002259C);
  v27 = type metadata accessor for Logger(0);
  sub_100003884(v27, (uint64_t)static DataModel.widgetLoggerClimate);
  v28 = v12;
  swift_bridgeObjectRetain_n(a5, 2);
  v29 = v28;
  v30 = Logger.logObject.getter(v29);
  v31 = static os_log_type_t.default.getter();
  if (!os_log_type_enabled(v30, v31))
  {

    swift_bridgeObjectRelease_n(a5, 2);
    v41 = &DataModel;
    goto LABEL_28;
  }
  v57 = a6;
  formata = a1;
  v32 = 0x6E776F6E6B6E75;
  v33 = swift_slowAlloc(32, -1);
  v34 = (_QWORD *)swift_slowAlloc(8, -1);
  v56 = (void *)swift_slowAlloc(64, -1);
  v61 = v56;
  *(_DWORD *)v33 = 136315650;
  swift_bridgeObjectRetain(a5);
  v64 = sub_10001DF04(a4, a5, (uint64_t *)&v61);
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v64, v65, v33 + 4, v33 + 12);
  swift_bridgeObjectRelease_n(a5, 3);
  *(_WORD *)(v33 + 12) = 2080;
  v35 = objc_msgSend(v29, "service");
  if (v35
    && (v36 = v35, v37 = objc_msgSend(v35, "accessory"), v36, v37))
  {
    v38 = objc_msgSend(v37, "name");

    v32 = static String._unconditionallyBridgeFromObjectiveC(_:)(v38);
    v40 = v39;

  }
  else
  {
    v40 = 0xE700000000000000;
  }
  v64 = sub_10001DF04(v32, v40, (uint64_t *)&v61);
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v64, v65, v33 + 14, v33 + 22);

  swift_bridgeObjectRelease(v40);
  *(_WORD *)(v33 + 22) = 2112;
  v41 = &DataModel;
  v42 = objc_msgSend(v29, "value");
  if (v42)
  {
    v43 = v42;
    _bridgeAnyObjectToAny(_:)(&v62, v42);
    swift_unknownObjectRelease(v43);
  }
  else
  {
    v62 = 0u;
    v63 = 0u;
  }
  sub_1000184BC((uint64_t)&v62, (uint64_t)&v64);
  if (!v66)
  {
    sub_10000E534((uint64_t)&v64);
    goto LABEL_26;
  }
  v44 = sub_1000038AC(0, &qword_100081E18, NSObject_ptr);
  if ((swift_dynamicCast(&v60, &v64, (char *)&type metadata for Any + 8, v44, 6) & 1) == 0)
  {
LABEL_26:
    v45 = String._bridgeToObjectiveC()();
    goto LABEL_27;
  }
  v45 = v60;
LABEL_27:
  v64 = (uint64_t)v45;
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v64, v65, v33 + 24, v33 + 32);
  *v34 = v45;

  _os_log_impl((void *)&_mh_execute_header, v30, v31, v57, (uint8_t *)v33, 0x20u);
  v46 = sub_100003704((uint64_t *)&unk_100081FD0);
  swift_arrayDestroy(v34, 1, v46);
  swift_slowDealloc(v34, -1, -1);
  swift_arrayDestroy(v56, 2, (char *)&type metadata for Any + 8);
  swift_slowDealloc(v56, -1, -1);
  swift_slowDealloc(v33, -1, -1);

  a1 = formata;
LABEL_28:
  v47 = objc_msgSend(v29, (SEL)v41[363].count, v56);
  if (v47)
  {
    v48 = v47;
    _bridgeAnyObjectToAny(_:)(&v62, v47);
    swift_unknownObjectRelease(v48);
  }
  else
  {
    v62 = 0u;
    v63 = 0u;
  }
  sub_1000184BC((uint64_t)&v62, (uint64_t)&v64);
  if (v66)
  {
    v49 = sub_1000038AC(0, &qword_100081E10, NSNumber_ptr);
    if ((swift_dynamicCast(&v61, &v64, (char *)&type metadata for Any + 8, v49, 6) & 1) != 0)
    {
      v50 = v61;
      objc_msgSend(v61, "doubleValue");
      v52 = v51;

      v53 = *(double **)a1;
      if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)a1) & 1) == 0)
        v53 = sub_10000A154(0, *((_QWORD *)v53 + 2) + 1, 1, v53);
      v55 = *((_QWORD *)v53 + 2);
      v54 = *((_QWORD *)v53 + 3);
      if (v55 >= v54 >> 1)
        v53 = sub_10000A154((double *)(v54 > 1), v55 + 1, 1, v53);
      *((_QWORD *)v53 + 2) = v55 + 1;
      v53[v55 + 4] = v52;
      *(_QWORD *)a1 = v53;
    }
  }
  else
  {
    sub_10000E534((uint64_t)&v64);
  }
}

uint64_t sub_10001821C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;

  v0 = sub_100003704(&qword_1000817C0);
  v1 = swift_allocObject(v0, 200, 7);
  *(_OWORD *)(v1 + 16) = xmmword_100062CC0;
  if (qword_100081658 != -1)
    swift_once(&qword_100081658, sub_1000183D8);
  v2 = *((_QWORD *)&xmmword_10008A598 + 1);
  v3 = qword_10008A5A8;
  v4 = unk_10008A5B0;
  v5 = xmmword_10008A5B8;
  v6 = qword_10008A5C8;
  *(_QWORD *)(v1 + 32) = xmmword_10008A598;
  *(_QWORD *)(v1 + 40) = v2;
  *(_QWORD *)(v1 + 48) = v3;
  *(_QWORD *)(v1 + 56) = v4;
  *(_OWORD *)(v1 + 64) = v5;
  *(_QWORD *)(v1 + 80) = v6;
  swift_bridgeObjectRetain(v2);
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  sub_10000389C(*((uint64_t *)&v5 + 1), v6);
  if (qword_100081660 != -1)
    swift_once(&qword_100081660, sub_100018424);
  v7 = *((_QWORD *)&xmmword_10008A5D0 + 1);
  v8 = qword_10008A5E0;
  v9 = unk_10008A5E8;
  v10 = xmmword_10008A5F0;
  v11 = qword_10008A600;
  *(_QWORD *)(v1 + 88) = xmmword_10008A5D0;
  *(_QWORD *)(v1 + 96) = v7;
  *(_QWORD *)(v1 + 104) = v8;
  *(_QWORD *)(v1 + 112) = v9;
  *(_OWORD *)(v1 + 120) = v10;
  *(_QWORD *)(v1 + 136) = v11;
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRetain(v9);
  swift_bridgeObjectRetain(v10);
  sub_10000389C(*((uint64_t *)&v10 + 1), v11);
  if (qword_100081668 != -1)
    swift_once(&qword_100081668, sub_100018470);
  v12 = *((_QWORD *)&xmmword_10008A608 + 1);
  v13 = xmmword_10008A618;
  v14 = xmmword_10008A628;
  v15 = qword_10008A638;
  *(_QWORD *)(v1 + 144) = xmmword_10008A608;
  *(_QWORD *)(v1 + 152) = v12;
  *(_OWORD *)(v1 + 160) = v13;
  *(_OWORD *)(v1 + 176) = v14;
  *(_QWORD *)(v1 + 192) = v15;
  qword_10008A590 = v1;
  swift_bridgeObjectRetain(v12);
  swift_bridgeObjectRetain(v13);
  swift_bridgeObjectRetain(*((_QWORD *)&v13 + 1));
  swift_bridgeObjectRetain(v14);
  return sub_10000389C(*((uint64_t *)&v14 + 1), v15);
}

void sub_1000183D8()
{
  *(_QWORD *)&xmmword_10008A598 = 0xD000000000000013;
  *((_QWORD *)&xmmword_10008A598 + 1) = 0x8000000100067F20;
  qword_10008A5A8 = (uint64_t)&off_10007AF28;
  unk_10008A5B0 = &_swiftEmptyArrayStorage;
  *((_QWORD *)&xmmword_10008A5B8 + 1) = 0;
  qword_10008A5C8 = 0;
  *(_QWORD *)&xmmword_10008A5B8 = &off_10007AF50;
}

void sub_100018424()
{
  *(_QWORD *)&xmmword_10008A5D0 = 0xD000000000000013;
  *((_QWORD *)&xmmword_10008A5D0 + 1) = 0x8000000100068030;
  qword_10008A5E0 = (uint64_t)&off_100079548;
  unk_10008A5E8 = &_swiftEmptyArrayStorage;
  *((_QWORD *)&xmmword_10008A5F0 + 1) = 0;
  qword_10008A600 = 0;
  *(_QWORD *)&xmmword_10008A5F0 = &off_100079570;
}

void sub_100018470()
{
  *(_QWORD *)&xmmword_10008A608 = 0xD000000000000010;
  *((_QWORD *)&xmmword_10008A608 + 1) = 0x8000000100067EC0;
  *(_QWORD *)&xmmword_10008A618 = &off_10007AF78;
  *((_QWORD *)&xmmword_10008A618 + 1) = &_swiftEmptyArrayStorage;
  *((_QWORD *)&xmmword_10008A628 + 1) = 0;
  qword_10008A638 = 0;
  *(_QWORD *)&xmmword_10008A628 = &off_10007AFA0;
}

uint64_t sub_1000184BC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100003704(&qword_1000817D8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_100018504(uint64_t a1)
{
  uint64_t v1;
  uint64_t i;
  unint64_t v4;
  unint64_t v5;
  double v6;
  int64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  double v16;
  uint64_t result;
  double *v18;
  unint64_t v19;
  double v20;
  double v21;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
  {
    v7 = *(_QWORD *)&_swiftEmptyArrayStorage[2];
    if (v7)
      goto LABEL_11;
LABEL_18:
    swift_release(_swiftEmptyArrayStorage);
    return 0;
  }
  swift_bridgeObjectRetain(a1);
  for (i = 0; i != v1; ++i)
  {
    v6 = *(double *)(a1 + 8 * i + 32);
    if (v6 != 0.0)
    {
      if ((swift_isUniquelyReferenced_nonNull_native(_swiftEmptyArrayStorage) & 1) == 0)
        sub_10001E4FC(0, *(_QWORD *)&_swiftEmptyArrayStorage[2] + 1, 1);
      v5 = *(_QWORD *)&_swiftEmptyArrayStorage[2];
      v4 = *(_QWORD *)&_swiftEmptyArrayStorage[3];
      if (v5 >= v4 >> 1)
        sub_10001E4FC(v4 > 1, v5 + 1, 1);
      *(_QWORD *)&_swiftEmptyArrayStorage[2] = v5 + 1;
      _swiftEmptyArrayStorage[v5 + 4] = v6;
    }
  }
  swift_bridgeObjectRelease(a1);
  v7 = *(_QWORD *)&_swiftEmptyArrayStorage[2];
  if (!v7)
    goto LABEL_18;
LABEL_11:
  sub_10001E4E0(0, v7, 0);
  v8 = 0;
  v9 = *(_QWORD *)&_swiftEmptyArrayStorage[2];
  v10 = v9;
  do
  {
    v11 = *(_QWORD *)&_swiftEmptyArrayStorage[v8 + 4];
    v12 = *(_QWORD *)&_swiftEmptyArrayStorage[3];
    v13 = v10 + 1;
    if (v10 >= v12 >> 1)
      sub_10001E4E0(v12 > 1, v10 + 1, 1);
    ++v8;
    *(_QWORD *)&_swiftEmptyArrayStorage[2] = v13;
    _swiftEmptyArrayStorage[v10++ + 4] = (double)v11;
  }
  while (v7 != v8);
  v14 = v7 + v9;
  if (v7 + v9 < 2)
  {
    v15 = 0;
    v16 = 0.0;
    do
    {
LABEL_22:
      v20 = _swiftEmptyArrayStorage[v15++ + 4];
      v16 = v16 + v20;
    }
    while (v13 != v15);
    goto LABEL_23;
  }
  v15 = v14 & 0xFFFFFFFFFFFFFFFELL;
  v18 = &_swiftEmptyArrayStorage[5];
  v16 = 0.0;
  v19 = v14 & 0xFFFFFFFFFFFFFFFELL;
  do
  {
    v16 = v16 + *(v18 - 1) + *v18;
    v18 += 2;
    v19 -= 2;
  }
  while (v19);
  if (v14 != v15)
    goto LABEL_22;
LABEL_23:
  swift_release(_swiftEmptyArrayStorage);
  result = swift_release(_swiftEmptyArrayStorage);
  v21 = round(fmax(fmin(v16 / (double)v7, 5.0), 1.0));
  if ((~*(_QWORD *)&v21 & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_28;
  }
  if (v21 <= -9.22337204e18)
  {
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }
  if (v21 < 9.22337204e18)
    return (uint64_t)v21;
LABEL_29:
  __break(1u);
  return result;
}

uint64_t sub_100018784(uint64_t a1, char a2)
{
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  _BYTE *v8;
  unint64_t v9;
  const char *v10;
  const char *v11;
  unint64_t v12;
  uint64_t v13;
  _BYTE v15[16];

  v4 = 0x9380E29380E2;
  type metadata accessor for Locale(0);
  __chkstk_darwin();
  v6 = &v15[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  type metadata accessor for String.LocalizationValue(0);
  __chkstk_darwin();
  v8 = &v15[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  if ((a2 & 1) == 0)
  {
    switch(a1)
    {
      case 1:
        v9 = 0xD000000000000028;
        v10 = "HFCharacteristicValueAirQualityExcellent";
        goto LABEL_8;
      case 2:
        v11 = "HFCharacteristicValueAirQualityGood";
        goto LABEL_10;
      case 3:
        v11 = "HFCharacteristicValueAirQualityFair";
        goto LABEL_10;
      case 4:
        v9 = 0xD000000000000027;
        v10 = "HFCharacteristicValueAirQualityInferior";
LABEL_8:
        v12 = (unint64_t)(v10 - 32) | 0x8000000000000000;
        goto LABEL_11;
      case 5:
        v11 = "HFCharacteristicValueAirQualityPoor";
LABEL_10:
        v12 = (unint64_t)(v11 - 32) | 0x8000000000000000;
        v9 = 0xD000000000000023;
LABEL_11:
        v13 = String.LocalizationValue.init(stringLiteral:)(v9, v12);
        static Locale.current.getter(v13);
        v4 = String.init(localized:table:bundle:locale:comment:)(v8, 0x696C61636F4C4648, 0xED0000656C62617ALL, 0, v6, 0, 0, 256);
        break;
      default:
        return v4;
    }
  }
  return v4;
}

uint64_t sub_100018920(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  double v3;
  double *v5;
  uint64_t v6;
  uint64_t v7;
  double *v8;
  double v9;
  double v10;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return 0x9380E29380E2;
  if (v1 == 1)
  {
    v2 = 0;
    v3 = 0.0;
  }
  else
  {
    v2 = v1 & 0x7FFFFFFFFFFFFFFELL;
    v5 = (double *)(a1 + 40);
    v3 = 0.0;
    v6 = v1 & 0x7FFFFFFFFFFFFFFELL;
    do
    {
      v3 = v3 + *(v5 - 1) + *v5;
      v5 += 2;
      v6 -= 2;
    }
    while (v6);
    if (v1 == v2)
      goto LABEL_10;
  }
  v7 = v1 - v2;
  v8 = (double *)(a1 + 8 * v2 + 32);
  do
  {
    v9 = *v8++;
    v3 = v3 + v9;
    --v7;
  }
  while (v7);
LABEL_10:
  v10 = v3 / (double)v1;
  if (v10 < 15.0)
    return 0x656D6F6D72656874;
  if (v10 >= 21.0)
    return 0xD000000000000010;
  return 0xD000000000000012;
}

unint64_t sub_100018A14()
{
  unint64_t result;

  result = qword_100081E58;
  if (!qword_100081E58)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Double, &type metadata for Double);
    atomic_store(result, &qword_100081E58);
  }
  return result;
}

uint64_t sub_100018A58(uint64_t result)
{
  uint64_t v1;
  double v2;
  double v3;
  uint64_t v4;
  double *v5;
  double v6;
  double v7;
  double v8;
  uint64_t v9;
  double *v10;
  double v11;
  double v12;
  double v13;
  Swift::String v14;
  Swift::String v15;
  void *object;
  uint64_t v17;

  v1 = *(_QWORD *)(result + 16);
  if (!v1)
    goto LABEL_27;
  v2 = *(double *)(result + 32);
  v3 = v2;
  v4 = v1 - 1;
  if (v1 != 1)
  {
    v5 = (double *)(result + 40);
    v3 = *(double *)(result + 32);
    do
    {
      v6 = *v5++;
      v7 = v6;
      if (v6 < v3)
        v3 = v7;
      --v4;
    }
    while (v4);
  }
  v8 = round(v3);
  if ((~*(_QWORD *)&v8 & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_22;
  }
  if (v8 <= -9.22337204e18)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  if (v8 >= 9.22337204e18)
  {
LABEL_23:
    __break(1u);
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  v9 = v1 - 1;
  if (v9)
  {
    v10 = (double *)(result + 40);
    do
    {
      v11 = *v10++;
      v12 = v11;
      if (v2 < v11)
        v2 = v12;
      --v9;
    }
    while (v9);
  }
  v13 = round(v2);
  if ((~*(_QWORD *)&v13 & 0x7FF0000000000000) == 0)
    goto LABEL_24;
  if (v13 <= -9.22337204e18)
  {
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  if (v13 >= 9.22337204e18)
  {
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
    return result;
  }
  if (*(uint64_t *)&v8 == *(uint64_t *)&v13)
    return dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
  v17 = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
  v14._countAndFlagsBits = 9666786;
  v14._object = (void *)0xA300000000000000;
  String.append(_:)(v14);
  v15._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
  object = v15._object;
  String.append(_:)(v15);
  swift_bridgeObjectRelease(object);
  return v17;
}

unint64_t sub_100018BF8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100081E68;
  if (!qword_100081E68)
  {
    v1 = sub_100003744(&qword_100081E50);
    result = swift_getWitnessTable(&protocol conformance descriptor for FloatingPointFormatStyle<A>, v1);
    atomic_store(result, (unint64_t *)&qword_100081E68);
  }
  return result;
}

uint64_t DataModel.reloadCharacteristics(matching:for:fetchId:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v5;

  v5[8] = a4;
  v5[9] = v4;
  v5[6] = a2;
  v5[7] = a3;
  v5[5] = a1;
  return swift_task_switch(sub_100018C64, 0, 0);
}

uint64_t sub_100018C64()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  id v4;
  id v5;
  NSObject *v6;
  os_log_type_t v7;
  _BOOL4 v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  id v22;
  _QWORD *v23;
  uint64_t v24;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  if (qword_100081688 != -1)
    swift_once(&qword_100081688, sub_100022488);
  v1 = *(_QWORD *)(v0 + 64);
  v2 = *(void **)(v0 + 48);
  v3 = type metadata accessor for Logger(0);
  sub_100003884(v3, (uint64_t)static DataModel.widgetLoggerFetches);
  v4 = v2;
  swift_bridgeObjectRetain_n(v1, 2);
  v5 = v4;
  v6 = Logger.logObject.getter(v5);
  v7 = static os_log_type_t.info.getter();
  v8 = os_log_type_enabled(v6, v7);
  v9 = *(_QWORD *)(v0 + 64);
  if (v8)
  {
    v10 = *(_QWORD *)(v0 + 56);
    v27 = *(_QWORD *)(v0 + 48);
    v11 = swift_slowAlloc(22, -1);
    v28 = swift_slowAlloc(64, -1);
    v29 = v28;
    *(_DWORD *)v11 = 136315394;
    swift_bridgeObjectRetain(v9);
    *(_QWORD *)(v0 + 24) = sub_10001DF04(v10, v9, &v29);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 24, v0 + 32, v11 + 4, v11 + 12);
    swift_bridgeObjectRelease_n(v9, 3);
    *(_WORD *)(v11 + 12) = 2080;
    if (v27)
    {
      v12 = objc_msgSend(v5, "name");
      v13 = static String._unconditionallyBridgeFromObjectiveC(_:)(v12);
      v15 = v14;

    }
    else
    {
      v15 = 0xE400000000000000;
      v13 = 1819047278;
    }
    *(_QWORD *)(v0 + 32) = sub_10001DF04(v13, v15, &v29);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 32, v0 + 40, v11 + 14, v11 + 22);
    swift_bridgeObjectRelease(v15);

    swift_arrayDestroy(v28, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v28, -1, -1);
    swift_slowDealloc(v11, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease_n(*(_QWORD *)(v0 + 64), 2);

  }
  if (*(_QWORD *)(v0 + 48))
  {
    v17 = *(_QWORD *)(v0 + 64);
    v16 = *(_QWORD *)(v0 + 72);
    v18 = *(_QWORD *)(v0 + 56);
    v19 = *(_QWORD *)(v0 + 40);
    v20 = (_QWORD *)swift_task_alloc(64);
    *(_QWORD *)(v0 + 80) = v20;
    v20[2] = v16;
    v20[3] = v19;
    v20[4] = v5;
    v20[5] = v18;
    v20[6] = v17;
    v21 = async function pointer to withCheckedContinuation<A>(isolation:function:_:)[1];
    v22 = v5;
    v23 = (_QWORD *)swift_task_alloc(v21);
    *(_QWORD *)(v0 + 88) = v23;
    v24 = sub_100003704(&qword_100081E78);
    *v23 = v0;
    v23[1] = sub_100018FB4;
    return withCheckedContinuation<A>(isolation:function:_:)(v0 + 16, 0, 0, 0xD00000000000002CLL, 0x80000001000680E0, sub_10001FE7C, v20, v24);
  }
  else
  {
    if (((unint64_t)_swiftEmptyArrayStorage & 0xC000000000000000) != 0
      && _CocoaArrayWrapper.endIndex.getter(_swiftEmptyArrayStorage))
    {
      sub_10001FB20((uint64_t)_swiftEmptyArrayStorage);
    }
    else
    {
      v26 = &_swiftEmptySetSingleton;
    }
    return (*(uint64_t (**)(void *))(v0 + 8))(v26);
  }
}

uint64_t sub_100018FB4()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 80);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 88));
  swift_task_dealloc(v1);
  return swift_task_switch(sub_100019010, 0, 0);
}

uint64_t sub_100019010()
{
  uint64_t v0;

  return (*(uint64_t (**)(_QWORD))(v0 + 8))(*(_QWORD *)(v0 + 16));
}

double *DataModel.characteristics(matching:for:filterOutHiddenStatusAccessories:)(uint64_t a1, id a2)
{
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  double *v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;

  if (!a2)
    return _swiftEmptyArrayStorage;
  v3 = objc_msgSend(a2, "accessories");
  v4 = sub_1000038AC(0, (unint64_t *)&qword_100081F40, HMAccessory_ptr);
  v5 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v3, v4);

  v14 = *(_OWORD *)a1;
  v6 = *(_QWORD *)(a1 + 16);
  v12 = *(_QWORD *)(a1 + 24);
  v13 = v6;
  v7 = *(_QWORD *)(a1 + 40);
  v11 = *(_QWORD *)(a1 + 32);
  v8 = *(_QWORD *)(a1 + 48);
  sub_1000038E4((uint64_t)&v14);
  sub_10000390C(&v13);
  sub_10000390C(&v12);
  sub_10000390C(&v11);
  sub_10000389C(v7, v8);
  v9 = sub_10001FE8C(v5, a1);
  sub_100003934((uint64_t)&v14);
  sub_10000395C(&v13);
  sub_10000395C(&v12);
  sub_10000395C(&v11);
  sub_100003984(v7, v8);
  swift_bridgeObjectRelease(v5);
  return v9;
}

double CharacteristicFetchSpecification.init(loggingName:serviceKinds:associatedServiceKinds:characteristicKind:processingBlock:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, char a5@<W4>, uint64_t a6@<X5>, uint64_t a7@<X6>, _QWORD *a8@<X8>)
{
  uint64_t v16;
  uint64_t v17;
  double result;

  v16 = sub_100003704(&qword_100081E80);
  v17 = swift_allocObject(v16, 33, 7);
  *(_QWORD *)&result = 1;
  *(_OWORD *)(v17 + 16) = xmmword_1000607D0;
  *(_BYTE *)(v17 + 32) = a5;
  *a8 = a1;
  a8[1] = a2;
  a8[2] = a3;
  a8[3] = a4;
  a8[4] = v17;
  a8[5] = a6;
  a8[6] = a7;
  return result;
}

uint64_t CharacteristicFetchSpecification.init(loggingName:serviceKinds:associatedServiceKinds:characteristicKinds:processingBlock:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, _QWORD *a8@<X8>)
{
  *a8 = result;
  a8[1] = a2;
  a8[2] = a3;
  a8[3] = a4;
  a8[4] = a5;
  a8[5] = a6;
  a8[6] = a7;
  return result;
}

uint64_t sub_100019200(uint64_t a1, uint64_t a2, uint64_t a3, NSObject *a4, uint64_t a5, unint64_t a6)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD v18[2];

  v18[1] = a2;
  v11 = sub_100003704(&qword_100081ED0);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = *(_QWORD *)(v12 + 64);
  __chkstk_darwin(v11);
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))((char *)v18 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v11);
  v14 = *(unsigned __int8 *)(v12 + 80);
  v15 = (v14 + 32) & ~v14;
  v16 = swift_allocObject(&unk_10007DBE0, v15 + v13, v14 | 7);
  *(_QWORD *)(v16 + 16) = a5;
  *(_QWORD *)(v16 + 24) = a6;
  (*(void (**)(uint64_t, char *, uint64_t))(v12 + 32))(v16 + v15, (char *)v18 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0), v11);
  swift_bridgeObjectRetain(a6);
  DataModel.reloadCharacteristics(matching:for:fetchId:completion:)(a3, a4, a5, a6, (void (*)(_QWORD, void *))sub_100020C24, v16);
  return swift_release(v16);
}

uint64_t sub_100019318(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  uint8_t *v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  NSObject *v22;
  os_log_type_t v23;
  uint8_t *v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD v29[3];
  _BYTE v30[8];
  uint64_t v31;
  uint64_t v32;

  if (qword_100081688 != -1)
    swift_once(&qword_100081688, sub_100022488);
  v7 = type metadata accessor for Logger(0);
  sub_100003884(v7, (uint64_t)static DataModel.widgetLoggerFetches);
  v8 = swift_bridgeObjectRetain_n(a4, 2);
  v9 = Logger.logObject.getter(v8);
  v10 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v9, v10))
  {
    v11 = (uint8_t *)swift_slowAlloc(12, -1);
    v12 = swift_slowAlloc(32, -1);
    v32 = v12;
    *(_DWORD *)v11 = 136315138;
    swift_bridgeObjectRetain(a4);
    v31 = sub_10001DF04(a3, a4, &v32);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v31, &v32, v11 + 4, v11 + 12);
    swift_bridgeObjectRelease_n(a4, 3);
    swift_arrayDestroy(v12, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v12, -1, -1);
    swift_slowDealloc(v11, -1, -1);

    if (a1)
      goto LABEL_5;
  }
  else
  {

    swift_bridgeObjectRelease_n(a4, 2);
    if (a1)
    {
LABEL_5:
      swift_errorRetain(a1);
      swift_bridgeObjectRetain(a4);
      swift_errorRetain(a1);
      swift_bridgeObjectRetain(a4);
      v13 = swift_errorRetain(a1);
      v14 = Logger.logObject.getter(v13);
      v15 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v14, v15))
      {
        v16 = swift_slowAlloc(22, -1);
        v17 = swift_slowAlloc(64, -1);
        v32 = v17;
        *(_DWORD *)v16 = 136315394;
        swift_bridgeObjectRetain(a4);
        v31 = sub_10001DF04(a3, a4, &v32);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v31, &v32, v16 + 4, v16 + 12);
        swift_bridgeObjectRelease_n(a4, 3);
        *(_WORD *)(v16 + 12) = 2080;
        swift_getErrorValue(a1, v30, v29);
        v18 = Error.localizedDescription.getter(v29[1], v29[2]);
        v20 = v19;
        v31 = sub_10001DF04(v18, v19, &v32);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v31, &v32, v16 + 14, v16 + 22);
        swift_bridgeObjectRelease(v20);
        swift_errorRelease(a1);
        swift_errorRelease(a1);
        _os_log_impl((void *)&_mh_execute_header, v14, v15, "...{%s} returned error %s", (uint8_t *)v16, 0x16u);
        swift_arrayDestroy(v17, 2, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v17, -1, -1);
        swift_slowDealloc(v16, -1, -1);

        swift_errorRelease(a1);
      }
      else
      {
        swift_errorRelease(a1);
        swift_bridgeObjectRelease_n(a4, 2);
        swift_errorRelease(a1);
        swift_errorRelease(a1);

      }
      goto LABEL_12;
    }
  }
  v21 = swift_bridgeObjectRetain_n(a4, 2);
  v22 = Logger.logObject.getter(v21);
  v23 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v22, v23))
  {
    v24 = (uint8_t *)swift_slowAlloc(12, -1);
    v25 = swift_slowAlloc(32, -1);
    v32 = v25;
    *(_DWORD *)v24 = 136315138;
    swift_bridgeObjectRetain(a4);
    v31 = sub_10001DF04(a3, a4, &v32);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v31, &v32, v24 + 4, v24 + 12);
    swift_bridgeObjectRelease_n(a4, 3);
    _os_log_impl((void *)&_mh_execute_header, v22, v23, "...{%s} returned NO error", v24, 0xCu);
    swift_arrayDestroy(v25, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v25, -1, -1);
    swift_slowDealloc(v24, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n(a4, 2);
  }
LABEL_12:
  v32 = a2;
  swift_bridgeObjectRetain(a2);
  v26 = sub_100003704(&qword_100081ED0);
  return CheckedContinuation.resume(returning:)(&v32, v26);
}

uint64_t DataModel.reloadCharacteristics(matching:for:fetchId:completion:)(uint64_t a1, NSObject *a2, uint64_t a3, unint64_t a4, void (*a5)(_QWORD, void *), uint64_t a6)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  NSObject *v21;
  os_log_type_t v22;
  _BOOL4 v23;
  uint8_t *v24;
  double v25;
  uint64_t v26;
  NSObject *v27;
  int v28;
  _BOOL4 v29;
  uint64_t v30;
  int64_t v31;
  double *v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  double *v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  os_log_t v44;
  double v45;
  NSObject *v46;
  NSObject *v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  double v52;
  double v53;
  void *v54;
  uint64_t i;
  uint64_t v56;
  id v57;
  void *v58;
  id v59;
  uint64_t v60;
  unint64_t v61;
  unint64_t v62;
  double v63;
  Class v64;
  NSObject *v65;
  NSObject *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  NSObject *v70;
  _QWORD *v71;
  uint64_t v72;
  void *v73;
  _QWORD *v74;
  uint64_t v75;
  _BYTE *v76;
  uint64_t v77;
  void *v78;
  _QWORD *v79;
  uint64_t v80;
  NSObject *v81;
  os_log_type_t v82;
  BOOL v83;
  uint8_t *v84;
  double v85;
  void *v86;
  Class v87;
  NSObject *v88;
  id v89;
  char *v90;
  uint64_t v91;
  double v92;
  void (*v93)(char *, os_log_t);
  os_log_t v94;
  id v95;
  char *v96;
  uint64_t v97;
  double v98;
  uint64_t v99;
  char *v100;
  uint64_t v101;
  NSObject *v102;
  uint64_t v103;
  NSObject *v104;
  uint64_t v105;
  uint64_t v106;
  char *v107;
  uint64_t v108;
  double v109;
  double v110;
  uint64_t v111;
  char *v112;
  uint64_t v113;
  NSObject *v114;
  NSObject *v115;
  uint64_t v116;
  NSObject *v117;
  uint64_t v118;
  double v119;
  NSObject *v120;
  uint64_t v121;
  uint8_t *v122;
  uint64_t *v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  char v130;
  uint64_t v131;
  uint8_t *v132;
  uint64_t *v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  char v140;
  double *v141;
  double *v142;
  char v143;
  uint64_t v144;
  int64_t v145;
  uint64_t v146;
  uint64_t v147;
  char v148;
  char v149;
  uint64_t v150;
  int64_t v151;
  char v152;
  void *v153;
  void *v154;
  id v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  double *v159;
  unint64_t v160;
  unint64_t v161;
  double *v162;
  uint64_t v163;
  uint64_t isUniquelyReferenced_nonNull_native;
  uint64_t v165;
  void (*v166)(double *, _QWORD);
  uint64_t v167;
  uint8_t *v168;
  uint64_t v169;
  unint64_t v170;
  unint64_t v171;
  os_log_t v172;
  Class v173;
  uint64_t v174;
  uint64_t v175;
  Class v176;
  NSObject *v177;
  char v178;
  uint64_t v179;
  int64_t v180;
  uint64_t v181;
  uint64_t v182;
  char v183;
  char v184;
  uint64_t v185;
  int64_t v186;
  char v187;
  void *v188;
  void *v189;
  id v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  double *v194;
  unint64_t v195;
  unint64_t v196;
  double *v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  void (*v201)(double *, _QWORD);
  uint64_t v202;
  uint8_t *v203;
  uint64_t v204;
  unint64_t v205;
  unint64_t v206;
  os_log_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  Class v211;
  uint64_t result;
  uint64_t v213;
  void (*v214)(_QWORD, void *);
  uint64_t v215;
  void *v216;
  void *v217;
  uint64_t v218;
  uint64_t v219;
  os_log_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  double v224;
  NSObject *v225;
  os_log_t v226;
  NSObject *v227;
  Class isa;
  os_log_t v229;
  uint64_t v230;
  uint64_t v231;
  uint8_t *v232;
  void (*v233)(_QWORD, void *);
  uint64_t v234;
  NSObject *v235;
  uint8_t *v236;
  char *v237;
  char *v238;
  char *v239;
  double *v240;
  uint64_t v241[3];
  _BYTE v242[24];
  double *v243;
  uint64_t v244;
  uint64_t v245;
  char v246;
  double *v247;
  char v248[8];
  double aBlock;
  uint64_t v250;
  void *v251;
  void *v252;
  void *v253;
  _QWORD *v254;

  v234 = a6;
  v11 = type metadata accessor for Logger(0);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = __chkstk_darwin(v11);
  v15 = (char *)&v218 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  v17 = (char *)&v218 - v16;
  v229 = (os_log_t)type metadata accessor for Date(0);
  isa = v229[-1].isa;
  __chkstk_darwin(v229);
  v239 = (char *)&v218 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_100081688 != -1)
    swift_once(&qword_100081688, sub_100022488);
  v231 = v11;
  v19 = sub_100003884(v11, (uint64_t)static DataModel.widgetLoggerFetches);
  v20 = swift_bridgeObjectRetain_n(a4, 2);
  v236 = (uint8_t *)v19;
  v21 = Logger.logObject.getter(v20);
  v22 = static os_log_type_t.info.getter();
  v23 = os_log_type_enabled(v21, v22);
  v230 = v12;
  v238 = v15;
  v237 = v17;
  v233 = (void (*)(_QWORD, void *))a5;
  if (v23)
  {
    v24 = (uint8_t *)swift_slowAlloc(12, -1);
    v25 = COERCE_DOUBLE(swift_slowAlloc(32, -1));
    aBlock = v25;
    *(_DWORD *)v24 = 136315138;
    swift_bridgeObjectRetain(a4);
    v247 = (double *)sub_10001DF04(a3, a4, (uint64_t *)&aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v247, v248, v24 + 4, v24 + 12);
    swift_bridgeObjectRelease_n(a4, 3);
    swift_arrayDestroy(*(_QWORD *)&v25, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(*(_QWORD *)&v25, -1, -1);
    swift_slowDealloc(v24, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n(a4, 2);
  }
  swift_bridgeObjectRetain_n(a4, 2);
  v26 = swift_bridgeObjectRetain_n(a1, 2);
  v27 = Logger.logObject.getter(v26);
  v28 = static os_log_type_t.info.getter();
  v29 = os_log_type_enabled(v27, (os_log_type_t)v28);
  v232 = (uint8_t *)a3;
  if (v29)
  {
    LODWORD(v225) = v28;
    v226 = v27;
    v227 = a2;
    v30 = swift_slowAlloc(22, -1);
    v224 = COERCE_DOUBLE(swift_slowAlloc(64, -1));
    aBlock = v224;
    *(_DWORD *)v30 = 136315394;
    swift_bridgeObjectRetain(a4);
    v247 = (double *)sub_10001DF04(a3, a4, (uint64_t *)&aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v247, v248, v30 + 4, v30 + 12);
    swift_bridgeObjectRelease_n(a4, 3);
    *(_WORD *)(v30 + 12) = 2080;
    v31 = *(_QWORD *)(a1 + 16);
    v32 = _swiftEmptyArrayStorage;
    if (v31)
    {
      v247 = _swiftEmptyArrayStorage;
      sub_10001E518(0, v31, 0);
      v32 = v247;
      v223 = a1;
      v33 = (uint64_t *)(a1 + 40);
      do
      {
        v35 = *(v33 - 1);
        v34 = *v33;
        v247 = v32;
        v37 = *((_QWORD *)v32 + 2);
        v36 = *((_QWORD *)v32 + 3);
        swift_bridgeObjectRetain(v34);
        if (v37 >= v36 >> 1)
        {
          sub_10001E518(v36 > 1, v37 + 1, 1);
          v32 = v247;
        }
        v33 += 7;
        *((_QWORD *)v32 + 2) = v37 + 1;
        v38 = &v32[2 * v37];
        *((_QWORD *)v38 + 4) = v35;
        *((_QWORD *)v38 + 5) = v34;
        --v31;
      }
      while (v31);
      a3 = (uint64_t)v232;
      a1 = v223;
    }
    v247 = v32;
    v39 = sub_100003704(&qword_100081C58);
    v40 = sub_100020550();
    v41 = BidirectionalCollection<>.joined(separator:)(8236, 0xE200000000000000, v39, v40);
    v43 = v42;
    swift_bridgeObjectRelease(v32);
    v247 = (double *)sub_10001DF04(v41, v43, (uint64_t *)&aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v247, v248, v30 + 14, v30 + 22);
    swift_bridgeObjectRelease_n(a1, 2);
    swift_bridgeObjectRelease(v43);
    v44 = v226;
    _os_log_impl((void *)&_mh_execute_header, v226, (os_log_type_t)v225, "...{%s} will process fetch specifications %s", (uint8_t *)v30, 0x16u);
    v45 = v224;
    swift_arrayDestroy(*(_QWORD *)&v224, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(*(_QWORD *)&v45, -1, -1);
    swift_slowDealloc(v30, -1, -1);

    a2 = v227;
  }
  else
  {

    swift_bridgeObjectRelease_n(a1, 2);
    swift_bridgeObjectRelease_n(a4, 2);
  }
  v46 = v235;
  v47 = a2;
  v48 = sub_10001FFCC(a1, v47);

  if (!((unint64_t)v48 >> 62))
  {
    v49 = *(_QWORD *)((v48 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v49)
      goto LABEL_17;
LABEL_125:
    swift_bridgeObjectRelease(v48);
    if (((unint64_t)_swiftEmptyArrayStorage & 0xC000000000000000) == 0)
    {
      v86 = &_swiftEmptySetSingleton;
      v214 = v233;
LABEL_127:
      v214(0, v86);
      return swift_bridgeObjectRelease(v86);
    }
LABEL_130:
    v215 = _CocoaArrayWrapper.endIndex.getter(_swiftEmptyArrayStorage);
    v214 = v233;
    if (v215)
    {
      sub_10001FB20((uint64_t)_swiftEmptyArrayStorage);
      v86 = v216;
    }
    else
    {
      v86 = &_swiftEmptySetSingleton;
    }
    goto LABEL_127;
  }
  if (v48 < 0)
    v213 = v48;
  else
    v213 = v48 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v48);
  v49 = _CocoaArrayWrapper.endIndex.getter(v213);
  swift_bridgeObjectRelease(v48);
  if (!v49)
    goto LABEL_125;
LABEL_17:
  if (v49 < 1)
  {
    __break(1u);
    goto LABEL_130;
  }
  v235 = v47;
  *(_QWORD *)&v224 = (unint64_t)v48 >> 62;
  v50 = v48 & 0xC000000000000001;
  swift_bridgeObjectRetain(v48);
  v51 = 0;
  do
  {
    if (v50)
      v52 = COERCE_DOUBLE(specialized _ArrayBuffer._getElementSlowPath(_:)(v51, v48));
    else
      *(_QWORD *)&v52 = *(id *)(v48 + 8 * v51 + 32);
    v53 = v52;
    ++v51;
    aBlock = v52;
    sub_10001B170((void **)&aBlock, a3, a4, v48);

  }
  while (v49 != v51);
  swift_bridgeObjectRelease(v48);
  aBlock = COERCE_DOUBLE(_swiftEmptyArrayStorage);
  v54 = (void *)objc_opt_self(HMCharacteristicReadRequest);
  swift_bridgeObjectRetain(v48);
  for (i = 0; i != v49; ++i)
  {
    if (v50)
      v57 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(i, v48);
    else
      v57 = *(id *)(v48 + 8 * i + 32);
    v58 = v57;
    v59 = objc_msgSend(v54, "readRequestWithCharacteristic:", v57);

    if (v59)
    {
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v60);
      v62 = *(_QWORD *)((*(_QWORD *)&aBlock & 0xFFFFFFFFFFFFFF8) + 0x10);
      v61 = *(_QWORD *)((*(_QWORD *)&aBlock & 0xFFFFFFFFFFFFFF8) + 0x18);
      if (v62 >= v61 >> 1)
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v61 > 1, v62 + 1, 1);
      v56 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v62, v59);
      specialized Array._endMutation()(v56);
    }
  }
  swift_bridgeObjectRelease(v48);
  v63 = aBlock;
  sub_1000038AC(0, &qword_100081E88, HMCharacteristicReadRequest_ptr);
  v64 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(*(_QWORD *)&v63);
  v65 = objc_msgSend((id)objc_opt_self(HMCharacteristicBatchRequest), "characteristicBatchRequestWithReadRequests:", v64);

  if (!v65)
  {
    swift_bridgeObjectRelease(v48);
    if (((unint64_t)_swiftEmptyArrayStorage & 0xC000000000000000) != 0
      && _CocoaArrayWrapper.endIndex.getter(_swiftEmptyArrayStorage))
    {
      sub_10001FB20((uint64_t)_swiftEmptyArrayStorage);
      v86 = v217;
    }
    else
    {
      v86 = &_swiftEmptySetSingleton;
    }
    v233(0, v86);
    return swift_bridgeObjectRelease(v86);
  }
  v66 = swift_allocObject(&unk_10007D9E8, 24, 7);
  v67 = swift_bridgeObjectRetain(v48);
  v68 = sub_10002031C(v67);
  swift_bridgeObjectRelease(v48);
  v66[2].isa = (Class)v68;
  v226 = v66 + 2;
  v69 = swift_allocObject(&unk_10007DA10, 24, 7);
  *(_QWORD *)(v69 + 16) = 0;
  v221 = v69 + 16;
  v70 = swift_allocObject(&unk_10007DA38, 24, 7);
  v70[2].isa = 0;
  v220 = v70 + 2;
  v71 = (_QWORD *)swift_allocObject(&unk_10007DA60, 48, 7);
  v72 = (uint64_t)v232;
  v71[2] = v66;
  v71[3] = v72;
  v71[4] = a4;
  v71[5] = v70;
  v253 = sub_1000204DC;
  v254 = v71;
  aBlock = COERCE_DOUBLE(_NSConcreteStackBlock);
  v250 = 1107296256;
  v251 = sub_10001C230;
  v252 = &unk_10007DA78;
  v73 = _Block_copy(&aBlock);
  v74 = v254;
  swift_bridgeObjectRetain(a4);
  v227 = v66;
  swift_retain(v66);
  v225 = v70;
  swift_retain(v70);
  swift_release(v74);
  -[NSObject setProgressHandler:](v65, "setProgressHandler:", v73);
  _Block_release(v73);
  v75 = swift_allocObject(&unk_10007DAB0, 17, 7);
  *(_BYTE *)(v75 + 16) = 0;
  v76 = (_BYTE *)(v75 + 16);
  v77 = swift_allocObject(&unk_10007DAD8, 32, 7);
  *(_QWORD *)(v77 + 16) = v69;
  *(_QWORD *)(v77 + 24) = v75;
  v253 = sub_10002053C;
  v254 = (_QWORD *)v77;
  aBlock = COERCE_DOUBLE(_NSConcreteStackBlock);
  v250 = 1107296256;
  v251 = sub_10001C324;
  v252 = &unk_10007DAF0;
  v78 = _Block_copy(&aBlock);
  v79 = v254;
  v223 = v69;
  swift_retain(v69);
  swift_retain(v75);
  swift_release(v79);
  -[NSObject setCompletionHandler:](v65, "setCompletionHandler:", v78);
  _Block_release(v78);
  v80 = swift_bridgeObjectRetain_n(a4, 2);
  v81 = Logger.logObject.getter(v80);
  v82 = static os_log_type_t.info.getter();
  v83 = os_log_type_enabled(v81, v82);
  v222 = v75;
  if (v83)
  {
    v84 = (uint8_t *)swift_slowAlloc(12, -1);
    v85 = COERCE_DOUBLE(swift_slowAlloc(32, -1));
    aBlock = v85;
    *(_DWORD *)v84 = 136315138;
    v72 = (uint64_t)v232;
    v219 = (uint64_t)(v84 + 4);
    swift_bridgeObjectRetain(a4);
    v247 = (double *)sub_10001DF04(v72, a4, (uint64_t *)&aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v247, v248, v219, v84 + 12);
    swift_bridgeObjectRelease_n(a4, 3);
    swift_arrayDestroy(*(_QWORD *)&v85, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(*(_QWORD *)&v85, -1, -1);
    swift_slowDealloc(v84, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n(a4, 2);
  }
  v87 = isa;
  v88 = v235;
  v235 = v65;
  v89 = -[NSObject performBatchCharacteristicRequest:](v88, "performBatchCharacteristicRequest:", v65);
  v90 = v239;
  v91 = Date.init()(v89);
  v92 = Date.timeIntervalSinceReferenceDate.getter(v91);
  v93 = (void (*)(char *, os_log_t))*((_QWORD *)v87 + 1);
  v94 = v229;
  v93(v90, v229);
  v95 = (id)swift_beginAccess(v76, &v247, 0, 0);
  v96 = v239;
  do
  {
    v97 = Date.init()(v95);
    v98 = Date.timeIntervalSinceReferenceDate.getter(v97);
    v93(v96, v94);
    if (v98 - v92 >= 10.0)
    {
      v111 = v230;
      v112 = v238;
      v113 = v231;
      (*(void (**)(char *, uint8_t *, uint64_t, double))(v230 + 16))(v238, v236, v231, v98 - v92);
      swift_bridgeObjectRetain_n(a4, 2);
      v114 = v227;
      swift_retain_n(v227, 2);
      swift_bridgeObjectRetain(v48);
      v115 = v225;
      v116 = swift_retain(v225);
      v117 = Logger.logObject.getter(v116);
      LODWORD(v236) = static os_log_type_t.info.getter();
      if (!os_log_type_enabled(v117, (os_log_type_t)v236))
      {

        swift_release_n(v114, 2);
        swift_release(v115);
        swift_bridgeObjectRelease_n(a4, 2);
        swift_bridgeObjectRelease_n(v48, 2);
        (*(void (**)(char *, uint64_t))(v111 + 8))(v112, v113);
        v120 = v114;
LABEL_100:
        swift_beginAccess(v221, &aBlock, 0, 0);
        v174 = v223;
        v175 = *(_QWORD *)(v223 + 16);
        swift_beginAccess(v226, &v244, 0, 0);
        v176 = v120[2].isa;
        swift_errorRetain(v175);
        swift_bridgeObjectRetain(v176);
        v233(v175, v176);
        swift_bridgeObjectRelease(v176);
        swift_errorRelease(v175);

        swift_release(v120);
        swift_release(v174);
        v177 = v115;
        goto LABEL_120;
      }
      v229 = v117;
      v118 = swift_slowAlloc(52, -1);
      isa = (Class)swift_slowAlloc(64, -1);
      v243 = (double *)isa;
      *(_DWORD *)v118 = 136316162;
      swift_bridgeObjectRetain(a4);
      aBlock = COERCE_DOUBLE(sub_10001DF04(v72, a4, (uint64_t *)&v243));
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, &v250, v118 + 4, v118 + 12);
      swift_bridgeObjectRelease_n(a4, 3);
      *(_WORD *)(v118 + 12) = 2048;
      aBlock = 10.0;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, &v250, v118 + 14, v118 + 22);
      *(_WORD *)(v118 + 22) = 2048;
      swift_beginAccess(v220, v242, 0, 0);
      aBlock = *(double *)&v115[2].isa;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, &v250, v118 + 24, v118 + 32);
      swift_release(v115);
      v232 = (uint8_t *)v118;
      *(_WORD *)(v118 + 32) = 2048;
      if (v224 == 0.0)
      {
        v119 = *(double *)((v48 & 0xFFFFFFFFFFFFF8) + 0x10);
      }
      else
      {
        if (v48 < 0)
          v121 = v48;
        else
          v121 = v48 & 0xFFFFFFFFFFFFFF8;
        swift_bridgeObjectRetain(v48);
        v119 = COERCE_DOUBLE(_CocoaArrayWrapper.endIndex.getter(v121));
        swift_bridgeObjectRelease(v48);
      }
      swift_bridgeObjectRelease(v48);
      v122 = v232;
      aBlock = v119;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, &v250, v232 + 34, v232 + 42);
      swift_bridgeObjectRelease(v48);
      *((_WORD *)v122 + 21) = 2080;
      v123 = (uint64_t *)v226;
      swift_beginAccess(v226, v241, 0, 0);
      v124 = *v123;
      v239 = (char *)(v124 & 0xC000000000000001);
      if ((v124 & 0xC000000000000001) != 0)
      {
        if (v124 < 0)
          v125 = v124;
        else
          v125 = v124 & 0xFFFFFFFFFFFFFF8;
        swift_bridgeObjectRetain(v124);
        v126 = __CocoaSet.count.getter(v125);
        if (v126)
        {
LABEL_59:
          v240 = _swiftEmptyArrayStorage;
          sub_10001E518(0, v126 & ~(v126 >> 63), 0);
          if (v239)
          {
            if (v124 < 0)
              v127 = v124;
            else
              v127 = v124 & 0xFFFFFFFFFFFFFF8;
            v128 = __CocoaSet.startIndex.getter(v127);
            v130 = 1;
          }
          else
          {
            v128 = sub_10001F9B8(v124);
            v130 = v143 & 1;
          }
          v244 = v128;
          v245 = v129;
          v246 = v130;
          if (v126 < 0)
          {
            __break(1u);
            goto LABEL_136;
          }
          v144 = v124 & 0xFFFFFFFFFFFFFF8;
          if (v124 < 0)
            v144 = v124;
          v237 = (char *)v144;
          do
          {
            while (1)
            {
              v151 = v244;
              v150 = v245;
              v152 = v246;
              sub_10001F750(v244, v245, v246, v124);
              v154 = v153;
              v155 = objc_msgSend(v153, "description");
              v156 = static String._unconditionallyBridgeFromObjectiveC(_:)(v155);
              v158 = v157;

              v159 = v240;
              if ((swift_isUniquelyReferenced_nonNull_native(v240) & 1) == 0)
              {
                sub_10001E518(0, *((_QWORD *)v159 + 2) + 1, 1);
                v159 = v240;
              }
              v161 = *((_QWORD *)v159 + 2);
              v160 = *((_QWORD *)v159 + 3);
              if (v161 >= v160 >> 1)
              {
                sub_10001E518(v160 > 1, v161 + 1, 1);
                v159 = v240;
              }
              *((_QWORD *)v159 + 2) = v161 + 1;
              v162 = &v159[2 * v161];
              *((_QWORD *)v162 + 4) = v156;
              *((_QWORD *)v162 + 5) = v158;
              if (v239)
                break;
              v145 = sub_10001F66C(v151, v150, v152, v124);
              v147 = v146;
              v149 = v148;
              sub_100020544(v151, v150, v152);
              v244 = v145;
              v245 = v147;
              v246 = v149 & 1;
              v112 = v238;
              if (!--v126)
                goto LABEL_98;
            }
            if ((v152 & 1) == 0)
              goto LABEL_137;
            v163 = __CocoaSet.Index.handleBitPattern.getter(v151, v150);
            if (v163)
              isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v163);
            else
              isUniquelyReferenced_nonNull_native = 1;
            v112 = v238;
            v165 = sub_100003704(&qword_100081E90);
            v166 = (void (*)(double *, _QWORD))Set.Index._asCocoa.modify(&aBlock, v165);
            __CocoaSet.formIndex(after:isUnique:)(v167, isUniquelyReferenced_nonNull_native, v237);
            v166(&aBlock, 0);
            --v126;
          }
          while (v126);
LABEL_98:
          sub_100020544(v244, v245, v246);
          swift_bridgeObjectRelease(v124);
          v141 = v240;
          goto LABEL_99;
        }
      }
      else
      {
        v126 = *(_QWORD *)(v124 + 16);
        swift_bridgeObjectRetain(v124);
        if (v126)
          goto LABEL_59;
      }
      swift_bridgeObjectRelease(v124);
      v141 = _swiftEmptyArrayStorage;
LABEL_99:
      v168 = v232;
      v169 = Array.description.getter(v141, &type metadata for String);
      v171 = v170;
      swift_bridgeObjectRelease(v141);
      aBlock = COERCE_DOUBLE(sub_10001DF04(v169, v171, (uint64_t *)&v243));
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, &v250, v168 + 44, v168 + 52);
      v120 = v227;
      swift_release_n(v227, 2);
      swift_bridgeObjectRelease(v171);
      v172 = v229;
      _os_log_impl((void *)&_mh_execute_header, v229, (os_log_type_t)v236, "...{%s} fetch timed out after %fs, got %ld results of %ld requested, nilCharacteristics = %s", v168, 0x34u);
      v173 = isa;
      swift_arrayDestroy(isa, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v173, -1, -1);
      swift_slowDealloc(v168, -1, -1);

      (*(void (**)(char *, uint64_t))(v230 + 8))(v112, v231);
      v115 = v225;
      goto LABEL_100;
    }
    v95 = objc_msgSend((id)objc_opt_self(NSThread), "sleepForTimeInterval:", 0.02);
  }
  while (*v76 != 1);
  v99 = v230;
  v100 = v237;
  v101 = v231;
  (*(void (**)(char *, uint8_t *, uint64_t))(v230 + 16))(v237, v236, v231);
  swift_bridgeObjectRetain_n(a4, 2);
  v102 = v227;
  swift_retain_n(v227, 2);
  v103 = swift_bridgeObjectRetain(v48);
  v104 = Logger.logObject.getter(v103);
  LODWORD(isa) = static os_log_type_t.info.getter();
  if (!os_log_type_enabled(v104, (os_log_type_t)isa))
  {

    swift_release_n(v102, 2);
    swift_bridgeObjectRelease_n(a4, 2);
    swift_bridgeObjectRelease_n(v48, 2);
    (*(void (**)(char *, uint64_t))(v99 + 8))(v100, v101);
    goto LABEL_119;
  }
  v220 = v104;
  v105 = swift_slowAlloc(42, -1);
  v219 = swift_slowAlloc(64, -1);
  v241[0] = v219;
  *(_DWORD *)v105 = 136315906;
  swift_bridgeObjectRetain(a4);
  aBlock = COERCE_DOUBLE(sub_10001DF04(v72, a4, v241));
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, &v250, v105 + 4, v105 + 12);
  v106 = swift_bridgeObjectRelease_n(a4, 3);
  *(_WORD *)(v105 + 12) = 2048;
  v107 = v239;
  v108 = Date.init()(v106);
  v109 = Date.timeIntervalSinceReferenceDate.getter(v108);
  v93(v107, v229);
  aBlock = v109 - v92;
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, &v250, v105 + 14, v105 + 22);
  v236 = (uint8_t *)v105;
  *(_WORD *)(v105 + 22) = 2048;
  if (v224 == 0.0)
  {
    v110 = *(double *)((v48 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  else
  {
    if (v48 < 0)
      v131 = v48;
    else
      v131 = v48 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v48);
    v110 = COERCE_DOUBLE(_CocoaArrayWrapper.endIndex.getter(v131));
    swift_bridgeObjectRelease(v48);
  }
  swift_bridgeObjectRelease(v48);
  v132 = v236;
  aBlock = v110;
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, &v250, v236 + 24, v236 + 32);
  swift_bridgeObjectRelease(v48);
  *((_WORD *)v132 + 16) = 2080;
  v133 = (uint64_t *)v226;
  swift_beginAccess(v226, v242, 0, 0);
  v134 = *v133;
  v239 = (char *)(v134 & 0xC000000000000001);
  if ((v134 & 0xC000000000000001) != 0)
  {
    if (v134 < 0)
      v135 = v134;
    else
      v135 = v134 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v134);
    v136 = __CocoaSet.count.getter(v135);
    if (v136)
      goto LABEL_73;
LABEL_81:
    swift_bridgeObjectRelease(v134);
    v142 = _swiftEmptyArrayStorage;
LABEL_118:
    v203 = v236;
    v204 = Array.description.getter(v142, &type metadata for String);
    v206 = v205;
    swift_bridgeObjectRelease(v142);
    aBlock = COERCE_DOUBLE(sub_10001DF04(v204, v206, v241));
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, &v250, v203 + 34, v203 + 42);
    v102 = v227;
    swift_release_n(v227, 2);
    swift_bridgeObjectRelease(v206);
    v207 = v220;
    _os_log_impl((void *)&_mh_execute_header, v220, (os_log_type_t)isa, "...{%s} fetch completed in %fs, got %ld results, nilCharacteristics = %s", v203, 0x2Au);
    v208 = v219;
    swift_arrayDestroy(v219, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v208, -1, -1);
    swift_slowDealloc(v203, -1, -1);

    (*(void (**)(char *, uint64_t))(v230 + 8))(v100, v231);
LABEL_119:
    swift_beginAccess(v221, &aBlock, 0, 0);
    v209 = v223;
    v210 = *(_QWORD *)(v223 + 16);
    swift_beginAccess(v226, &v244, 0, 0);
    v211 = v102[2].isa;
    swift_errorRetain(v210);
    swift_bridgeObjectRetain(v211);
    v233(v210, v211);
    swift_bridgeObjectRelease(v211);
    swift_errorRelease(v210);

    swift_release(v102);
    swift_release(v209);
    v177 = v225;
LABEL_120:
    swift_release(v177);
    return swift_release(v222);
  }
  v136 = *(_QWORD *)(v134 + 16);
  swift_bridgeObjectRetain(v134);
  if (!v136)
    goto LABEL_81;
LABEL_73:
  v243 = _swiftEmptyArrayStorage;
  sub_10001E518(0, v136 & ~(v136 >> 63), 0);
  if (v239)
  {
    if (v134 < 0)
      v137 = v134;
    else
      v137 = v134 & 0xFFFFFFFFFFFFFF8;
    v138 = __CocoaSet.startIndex.getter(v137);
    v140 = 1;
  }
  else
  {
    v138 = sub_10001F9B8(v134);
    v140 = v178 & 1;
  }
  v244 = v138;
  v245 = v139;
  v246 = v140;
  if ((v136 & 0x8000000000000000) == 0)
  {
    v179 = v134 & 0xFFFFFFFFFFFFFF8;
    if (v134 < 0)
      v179 = v134;
    v238 = (char *)v179;
    do
    {
      while (1)
      {
        v186 = v244;
        v185 = v245;
        v187 = v246;
        sub_10001F750(v244, v245, v246, v134);
        v189 = v188;
        v190 = objc_msgSend(v188, "description");
        v191 = static String._unconditionallyBridgeFromObjectiveC(_:)(v190);
        v193 = v192;

        v194 = v243;
        if ((swift_isUniquelyReferenced_nonNull_native(v243) & 1) == 0)
        {
          sub_10001E518(0, *((_QWORD *)v194 + 2) + 1, 1);
          v194 = v243;
        }
        v196 = *((_QWORD *)v194 + 2);
        v195 = *((_QWORD *)v194 + 3);
        if (v196 >= v195 >> 1)
        {
          sub_10001E518(v195 > 1, v196 + 1, 1);
          v194 = v243;
        }
        *((_QWORD *)v194 + 2) = v196 + 1;
        v197 = &v194[2 * v196];
        *((_QWORD *)v197 + 4) = v191;
        *((_QWORD *)v197 + 5) = v193;
        if (v239)
          break;
        v180 = sub_10001F66C(v186, v185, v187, v134);
        v182 = v181;
        v184 = v183;
        sub_100020544(v186, v185, v187);
        v244 = v180;
        v245 = v182;
        v246 = v184 & 1;
        v100 = v237;
        if (!--v136)
          goto LABEL_117;
      }
      if ((v187 & 1) == 0)
        goto LABEL_138;
      v198 = __CocoaSet.Index.handleBitPattern.getter(v186, v185);
      if (v198)
        v199 = swift_isUniquelyReferenced_nonNull_native(v198);
      else
        v199 = 1;
      v100 = v237;
      v200 = sub_100003704(&qword_100081E90);
      v201 = (void (*)(double *, _QWORD))Set.Index._asCocoa.modify(&aBlock, v200);
      __CocoaSet.formIndex(after:isUnique:)(v202, v199, v238);
      v201(&aBlock, 0);
      --v136;
    }
    while (v136);
LABEL_117:
    sub_100020544(v244, v245, v246);
    swift_bridgeObjectRelease(v134);
    v142 = v243;
    goto LABEL_118;
  }
LABEL_136:
  __break(1u);
LABEL_137:
  swift_release(v227);
  __break(1u);
LABEL_138:
  result = swift_release(v227);
  __break(1u);
  return result;
}

void sub_10001B170(void **a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  void *v7;
  uint64_t v8;
  id v9;
  id v10;
  NSObject *v11;
  os_log_type_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  char v16;
  uint64_t v17;
  id v18;
  void *v19;
  id v20;
  id v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  id v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  v7 = *a1;
  if (qword_100081688 != -1)
    swift_once(&qword_100081688, sub_100022488);
  v8 = type metadata accessor for Logger(0);
  sub_100003884(v8, (uint64_t)static DataModel.widgetLoggerFetches);
  v9 = v7;
  swift_bridgeObjectRetain_n(a3, 2);
  swift_bridgeObjectRetain_n(a4, 2);
  v10 = v9;
  v11 = Logger.logObject.getter(v10);
  v12 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v11, v12))
  {
    v13 = swift_slowAlloc(42, -1);
    v29 = swift_slowAlloc(96, -1);
    v32 = v29;
    *(_DWORD *)v13 = 136315906;
    swift_bridgeObjectRetain(a3);
    v30 = sub_10001DF04(a2, a3, &v32);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v30, &v31, v13 + 4, v13 + 12);
    swift_bridgeObjectRelease_n(a3, 3);
    *(_WORD *)(v13 + 12) = 2048;
    v14 = sub_10001B50C((uint64_t)v10, a4);
    v16 = v15;

    swift_bridgeObjectRelease(a4);
    if ((v16 & 1) != 0)
      v17 = -1;
    else
      v17 = v14;
    v30 = v17;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v30, &v31, v13 + 14, v13 + 22);

    swift_bridgeObjectRelease(a4);
    *(_WORD *)(v13 + 22) = 2080;
    v18 = objc_msgSend(v10, "service");
    if (v18
      && (v19 = v18, v20 = objc_msgSend(v18, "accessory"), v19, v20))
    {
      v21 = objc_msgSend(v20, "name");

      v22 = static String._unconditionallyBridgeFromObjectiveC(_:)(v21);
      v24 = v23;

    }
    else
    {
      v24 = 0xE700000000000000;
      v22 = 0x6E776F6E6B6E75;
    }
    v30 = sub_10001DF04(v22, v24, &v32);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v30, &v31, v13 + 24, v13 + 32);

    swift_bridgeObjectRelease(v24);
    *(_WORD *)(v13 + 32) = 2080;
    v25 = objc_msgSend(v10, "localizedDescription");
    v26 = static String._unconditionallyBridgeFromObjectiveC(_:)(v25);
    v28 = v27;

    v30 = sub_10001DF04(v26, v28, &v32);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v30, &v31, v13 + 34, v13 + 42);

    swift_bridgeObjectRelease(v28);
    _os_log_impl((void *)&_mh_execute_header, v11, v12, "...{%s} [%ld] will fetch accessory '%s' characteristic: '%s'", (uint8_t *)v13, 0x2Au);
    swift_arrayDestroy(v29, 3, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v29, -1, -1);
    swift_slowDealloc(v13, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n(a3, 2);
    swift_bridgeObjectRelease_n(a4, 2);
  }
}

uint64_t sub_10001B50C(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  id v5;
  void *v6;
  char v7;
  unint64_t v8;
  uint64_t i;
  id v10;
  void *v11;
  char v12;
  uint64_t v13;

  v3 = result;
  if ((unint64_t)a2 >> 62)
    goto LABEL_21;
  v4 = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFF8) + 0x10);
  while (v4)
  {
    if ((a2 & 0xC000000000000001) != 0)
    {
      v5 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, a2);
    }
    else
    {
      if (!*(_QWORD *)((a2 & 0xFFFFFFFFFFFFF8) + 0x10))
      {
        __break(1u);
        return result;
      }
      v5 = *(id *)(a2 + 32);
    }
    v6 = v5;
    sub_1000038AC(0, (unint64_t *)&qword_100082010, HMCharacteristic_ptr);
    v7 = static NSObject.== infix(_:_:)(v6, v3);

    if ((v7 & 1) != 0)
      return 0;
    for (i = 0; ; ++i)
    {
      v8 = i + 1;
      if (__OFADD__(i, 1))
        break;
      if (v8 == v4)
        return 0;
      if ((a2 & 0xC000000000000001) != 0)
      {
        v10 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(i + 1, a2);
      }
      else
      {
        if ((v8 & 0x8000000000000000) != 0)
          goto LABEL_19;
        if (v8 >= *(_QWORD *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10))
          goto LABEL_20;
        v10 = *(id *)(a2 + 32 + 8 * v8);
      }
      v11 = v10;
      v12 = static NSObject.== infix(_:_:)(v10, v3);

      if ((v12 & 1) != 0)
        return v8;
    }
    __break(1u);
LABEL_19:
    __break(1u);
LABEL_20:
    __break(1u);
LABEL_21:
    if (a2 < 0)
      v13 = a2;
    else
      v13 = a2 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a2);
    v4 = _CocoaArrayWrapper.endIndex.getter(v13);
    result = swift_bridgeObjectRelease(a2);
  }
  return 0;
}

uint64_t sub_10001B6A4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;

  v2 = type metadata accessor for LayoutSubview(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v11 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for LayoutSubviews(0);
  v7 = sub_100015884(&qword_100081EF8, (uint64_t (*)(uint64_t))&type metadata accessor for LayoutSubviews, (uint64_t)&protocol conformance descriptor for LayoutSubviews);
  dispatch thunk of Collection._customIndexOfEquatableElement(_:)(&v12, a1, v6, v7);
  if ((v13 & 1) == 0)
    return v12;
  dispatch thunk of Collection.startIndex.getter(&v14, v6, v7);
  dispatch thunk of Collection.endIndex.getter(&v12, v6, v7);
  if (v14 == v12)
    return 0;
  while (1)
  {
    v8 = dispatch thunk of Collection.subscript.read(&v12, &v14, v6, v7);
    (*(void (**)(char *))(v3 + 16))(v5);
    ((void (*)(uint64_t *, _QWORD))v8)(&v12, 0);
    v9 = sub_100015884((unint64_t *)&unk_100081F00, (uint64_t (*)(uint64_t))&type metadata accessor for LayoutSubview, (uint64_t)&protocol conformance descriptor for LayoutSubview);
    LOBYTE(v8) = dispatch thunk of static Equatable.== infix(_:_:)(v5, a1, v2, v9);
    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
    if ((v8 & 1) != 0)
      break;
    dispatch thunk of Collection.formIndex(after:)(&v14, v6, v7);
    dispatch thunk of Collection.endIndex.getter(&v12, v6, v7);
    if (v14 == v12)
      return 0;
  }
  return v14;
}

void sub_10001B884(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(id *);
  unint64_t v12;
  uint64_t v13;
  int64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  int64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  id v28[2];
  _QWORD v29[7];

  v6 = sub_1000038AC(0, (unint64_t *)&qword_100082010, HMCharacteristic_ptr);
  v7 = sub_100020B4C();
  v24 = v6;
  v28[1] = (id)Set.init(minimumCapacity:)(0, v6, v7);
  v8 = sub_10001FA40(a1, a2, a3, (uint64_t)v29);
  v9 = v29[0];
  v10 = v29[3];
  v12 = v29[4];
  v11 = (uint64_t (*)(id *))v29[5];
  v13 = v29[6];
  v25 = v29[1];
  v14 = (unint64_t)(v29[2] + 64) >> 6;
  while (v9 < 0)
  {
    v18 = __CocoaSet.Iterator.next()(v8);
    if (!v18)
      goto LABEL_31;
    v19 = v18;
    v26 = v18;
    swift_unknownObjectRetain(v18);
    swift_dynamicCast(&v27, &v26, (char *)&type metadata for Swift.AnyObject + 8, v24, 7);
    v20 = v27;
    swift_unknownObjectRelease(v19);
    v17 = v10;
    v15 = v12;
    if (!v20)
      goto LABEL_31;
LABEL_29:
    v28[0] = v20;
    if ((v11(v28) & 1) != 0)
    {
      sub_10002D634((Swift::Int *)v28, v20);

    }
    else
    {

    }
    v10 = v17;
    v12 = v15;
  }
  if (v12)
  {
    v15 = (v12 - 1) & v12;
    v16 = __clz(__rbit64(v12)) | (v10 << 6);
    v17 = v10;
LABEL_28:
    v20 = *(id *)(*(_QWORD *)(v9 + 48) + 8 * v16);
    if (!v20)
      goto LABEL_31;
    goto LABEL_29;
  }
  v21 = v10 + 1;
  if (!__OFADD__(v10, 1))
  {
    if (v21 >= v14)
      goto LABEL_31;
    v22 = *(_QWORD *)(v25 + 8 * v21);
    v17 = v10 + 1;
    if (!v22)
    {
      v17 = v10 + 2;
      if (v10 + 2 >= v14)
        goto LABEL_31;
      v22 = *(_QWORD *)(v25 + 8 * v17);
      if (!v22)
      {
        v17 = v10 + 3;
        if (v10 + 3 >= v14)
          goto LABEL_31;
        v22 = *(_QWORD *)(v25 + 8 * v17);
        if (!v22)
        {
          v17 = v10 + 4;
          if (v10 + 4 >= v14)
            goto LABEL_31;
          v22 = *(_QWORD *)(v25 + 8 * v17);
          if (!v22)
          {
            v17 = v10 + 5;
            if (v10 + 5 >= v14)
              goto LABEL_31;
            v22 = *(_QWORD *)(v25 + 8 * v17);
            if (!v22)
            {
              v17 = v10 + 6;
              if (v10 + 6 >= v14)
                goto LABEL_31;
              v22 = *(_QWORD *)(v25 + 8 * v17);
              if (!v22)
              {
                v23 = v10 + 7;
                while (v14 != v23)
                {
                  v22 = *(_QWORD *)(v25 + 8 * v23++);
                  if (v22)
                  {
                    v17 = v23 - 1;
                    goto LABEL_27;
                  }
                }
LABEL_31:
                sub_100020BA4(v9);
                swift_release(v13);
                return;
              }
            }
          }
        }
      }
    }
LABEL_27:
    v15 = (v22 - 1) & v22;
    v16 = __clz(__rbit64(v22)) + (v17 << 6);
    goto LABEL_28;
  }
  __break(1u);
}

void sub_10001BB08(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  NSObject *v18;
  os_log_type_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  if ((unint64_t)a1 >> 62)
  {
    if (a1 < 0)
      v15 = a1;
    else
      v15 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v10 = _CocoaArrayWrapper.endIndex.getter(v15);
    if (!v10)
      goto LABEL_13;
  }
  else
  {
    v10 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain(a1);
    if (!v10)
      goto LABEL_13;
  }
  if (v10 < 1)
  {
    __break(1u);
    return;
  }
  v11 = 0;
  v12 = a2 + 16;
  do
  {
    if ((a1 & 0xC000000000000001) != 0)
      v13 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v11, a1);
    else
      v13 = *(id *)(a1 + 8 * v11 + 32);
    v14 = v13;
    ++v11;
    v24 = (uint64_t)v13;
    sub_10001BDD0((id *)&v24, v12, a3, a4, a5);

  }
  while (v10 != v11);
LABEL_13:
  swift_bridgeObjectRelease(a1);
  if (qword_100081688 != -1)
    swift_once(&qword_100081688, sub_100022488);
  v16 = type metadata accessor for Logger(0);
  sub_100003884(v16, (uint64_t)static DataModel.widgetLoggerFetches);
  swift_bridgeObjectRetain_n(a4, 2);
  v17 = swift_retain_n(a5, 2);
  v18 = Logger.logObject.getter(v17);
  v19 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v18, v19))
  {
    v20 = swift_slowAlloc(22, -1);
    v21 = swift_slowAlloc(32, -1);
    v26 = v21;
    *(_DWORD *)v20 = 136315394;
    swift_bridgeObjectRetain(a4);
    v24 = sub_10001DF04(a3, a4, &v26);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v24, &v25, v20 + 4, v20 + 12);
    swift_bridgeObjectRelease_n(a4, 3);
    *(_WORD *)(v20 + 12) = 2048;
    swift_beginAccess(a5 + 16, &v24, 0, 0);
    v22 = *(_QWORD *)(a5 + 16);
    swift_release(a5);
    v23 = v22;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v23, &v24, v20 + 14, v20 + 22);
    swift_release(a5);
    _os_log_impl((void *)&_mh_execute_header, v18, v19, "...{%s} fetch progress - %ld", (uint8_t *)v20, 0x16u);
    swift_arrayDestroy(v21, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v21, -1, -1);
    swift_slowDealloc(v20, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n(a4, 2);
    swift_release_n(a5, 2);
  }
}

uint64_t sub_10001BDD0(id *a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  id v9;
  id v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  id v15;
  void *v16;
  _QWORD *v17;
  uint64_t v18;
  id v19;
  id v20;
  NSObject *v21;
  os_log_type_t v22;
  uint64_t v23;
  void *v24;
  id v25;
  id v26;
  id v27;
  id v28;
  uint64_t v29;
  NSString v30;
  uint64_t v31;
  uint64_t result;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37[3];
  NSString v38;
  uint64_t v39;

  v9 = *a1;
  v10 = objc_msgSend(*a1, "value");
  if (v10)
  {
    v11 = v10;
    v12 = objc_opt_self(NSObject);
    v13 = swift_dynamicCastObjCClass(v11, v12);
    swift_unknownObjectRelease(v11);
    if (v13)
    {
      v14 = objc_msgSend(v9, "request");
      v15 = objc_msgSend(v14, "characteristic");

      swift_beginAccess(a2, v37, 33, 0);
      v16 = (void *)sub_10001EFA8(v15);
      swift_endAccess(v37);

    }
  }
  if (qword_100081688 != -1)
    swift_once(&qword_100081688, sub_100022488);
  v17 = (_QWORD *)(a5 + 16);
  v18 = type metadata accessor for Logger(0);
  sub_100003884(v18, (uint64_t)static DataModel.widgetLoggerFetches);
  v19 = v9;
  swift_bridgeObjectRetain_n(a4, 2);
  swift_retain_n(a5, 2);
  v20 = v19;
  v21 = Logger.logObject.getter(v20);
  v22 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v21, v22))
  {
    v23 = swift_slowAlloc(42, -1);
    v33 = (_QWORD *)swift_slowAlloc(16, -1);
    v34 = swift_slowAlloc(32, -1);
    v37[0] = v34;
    *(_DWORD *)v23 = 136315906;
    swift_bridgeObjectRetain(a4);
    v35 = sub_10001DF04(a3, a4, v37);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v35, &v36, v23 + 4, v23 + 12);
    swift_bridgeObjectRelease_n(a4, 3);
    *(_WORD *)(v23 + 12) = 2048;
    swift_beginAccess(a5 + 16, &v35, 0, 0);
    v24 = *(void **)(a5 + 16);
    swift_release(a5);
    v38 = v24;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v38, &v39, v23 + 14, v23 + 22);
    swift_release(a5);
    *(_WORD *)(v23 + 22) = 2112;
    v25 = objc_msgSend(v20, "request");
    v26 = objc_msgSend(v25, "characteristic");

    v38 = v26;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v38, &v39, v23 + 24, v23 + 32);
    *v33 = v26;

    *(_WORD *)(v23 + 32) = 2112;
    v27 = objc_msgSend(v20, "value");
    if (v27)
    {
      v28 = v27;
      v29 = objc_opt_self(NSObject);
      v30 = (NSString)swift_dynamicCastObjCClass(v28, v29);
      if (v30)
      {
LABEL_11:
        v38 = v30;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v38, &v39, v23 + 34, v23 + 42);
        v33[1] = v30;

        _os_log_impl((void *)&_mh_execute_header, v21, v22, "...{%s} [%ld] fetched characteristic '%@' response %@", (uint8_t *)v23, 0x2Au);
        v31 = sub_100003704((uint64_t *)&unk_100081FD0);
        swift_arrayDestroy(v33, 2, v31);
        swift_slowDealloc(v33, -1, -1);
        swift_arrayDestroy(v34, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v34, -1, -1);
        swift_slowDealloc(v23, -1, -1);

        goto LABEL_13;
      }
      swift_unknownObjectRelease(v28);
    }
    v30 = String._bridgeToObjectiveC()();
    goto LABEL_11;
  }

  swift_bridgeObjectRelease_n(a4, 2);
  swift_release_n(a5, 2);
LABEL_13:
  result = swift_beginAccess(v17, v37, 1, 0);
  if (__OFADD__(*v17, 1))
    __break(1u);
  else
    ++*v17;
  return result;
}

uint64_t sub_10001C230(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  void (*v4)(uint64_t);
  uint64_t v5;
  uint64_t v6;

  v4 = *(void (**)(uint64_t))(a1 + 32);
  v3 = *(_QWORD *)(a1 + 40);
  v5 = sub_1000038AC(0, &qword_100081EB8, HMCharacteristicResponse_ptr);
  v6 = static Array._unconditionallyBridgeFromObjectiveC(_:)(a2, v5);
  swift_retain(v3);
  v4(v6);
  swift_release(v3);
  return swift_bridgeObjectRelease(v6);
}

uint64_t sub_10001C29C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  _BYTE v10[24];

  v6 = a3 + 16;
  swift_beginAccess(a2 + 16, v10, 1, 0);
  v7 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 16) = a1;
  swift_errorRetain(a1);
  swift_errorRelease(v7);
  result = swift_beginAccess(v6, &v9, 1, 0);
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

void sub_10001C324(uint64_t a1, void *a2)
{
  uint64_t v3;
  void (*v4)(void *);
  id v5;

  v4 = *(void (**)(void *))(a1 + 32);
  v3 = *(_QWORD *)(a1 + 40);
  swift_retain(v3);
  v5 = a2;
  v4(a2);
  swift_release(v3);

}

uint64_t sub_10001C378@<X0>(id *a1@<X0>, uint64_t a2@<X1>, double **a3@<X8>)
{
  id v4;
  uint64_t v5;
  int64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int64_t v10;
  uint64_t v11;
  unint64_t v12;
  __objc2_prot_list *v13;
  unint64_t v14;
  id v15;
  void *v16;
  BOOL v17;
  unint64_t v18;
  id v19;
  uint64_t v20;
  int64_t v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  id v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unsigned int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  double *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  id v48;
  void *v49;
  uint64_t v50;
  id v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unsigned __int8 v55;
  unint64_t v56;
  int64_t v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v61;
  char v62;
  uint64_t v63;
  unint64_t v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  id v73;
  void *v74;
  void *v75;
  id v76;
  NSString v77;
  id v78;
  void *v79;
  id v80;
  NSString v81;
  id v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  double *v86;
  uint64_t v87;
  uint64_t result;
  uint64_t v90;
  int64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  unint64_t v96;
  int64_t v97;
  uint64_t v98;
  uint64_t v99;
  unint64_t v100;
  uint64_t v101;
  void *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  unsigned __int8 v108;
  unint64_t v109;
  char v110;
  int64_t v111;
  uint64_t v112;
  double *v113;
  uint64_t v114;
  uint64_t v115;
  _OWORD v116[2];
  uint64_t v117;

  v4 = objc_msgSend(*a1, "services");
  v5 = sub_1000038AC(0, (unint64_t *)&qword_100081EC0, HMService_ptr);
  v6 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v4, v5);

  v116[0] = *(_OWORD *)a2;
  v7 = *(_QWORD *)(a2 + 24);
  v117 = *(_QWORD *)(a2 + 16);
  v8 = *(_QWORD *)(a2 + 40);
  v114 = *(_QWORD *)(a2 + 32);
  v115 = v7;
  v9 = *(_QWORD *)(a2 + 48);
  v113 = _swiftEmptyArrayStorage;
  v90 = v9;
  v97 = v6;
  if ((unint64_t)v6 >> 62)
    goto LABEL_107;
  v6 = *(_QWORD *)((v6 & 0xFFFFFFFFFFFFF8) + 0x10);
  sub_1000038E4((uint64_t)v116);
  sub_10000390C(&v117);
  sub_10000390C(&v115);
  sub_10000390C(&v114);
  sub_10000389C(v8, v9);
  v10 = v97;
  swift_bridgeObjectRetain(v97);
  v11 = v6;
  if (!v6)
  {
LABEL_111:
    swift_bridgeObjectRelease_n(v10, 2);
    v86 = _swiftEmptyArrayStorage;
    goto LABEL_112;
  }
LABEL_3:
  v12 = 0;
  v96 = v10 & 0xC000000000000001;
  v92 = v10 & 0xFFFFFFFFFFFFFF8;
  v91 = v10 + 32;
  v93 = v114;
  v103 = v114 + 32;
  v98 = v115;
  v99 = v117;
  v101 = *(_QWORD *)(v117 + 16);
  v13 = &DataModel;
  v94 = v11;
  v95 = v8;
  do
  {
    while (1)
    {
      if (v96)
      {
        v14 = v12;
        v15 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v12, v10);
      }
      else
      {
        if (v12 >= *(_QWORD *)(v92 + 16))
          goto LABEL_105;
        v14 = v12;
        v15 = *(id *)(v91 + 8 * v12);
      }
      v16 = v15;
      v17 = __OFADD__(v14, 1);
      v18 = v14 + 1;
      if (v17)
        goto LABEL_102;
      v100 = v18;
      swift_bridgeObjectRetain(v99);
      v19 = objc_msgSend(v16, "serviceType");
      v20 = static String._unconditionallyBridgeFromObjectiveC(_:)(v19);
      v6 = v21;

      v22 = _s20HomeWidgetLockScreen11ServiceKindO8rawValueACSgSS_tcfC_0(v20, v6);
      if (v22 == 51)
        v8 = 0;
      else
        v8 = v22;
      if (!v101)
        goto LABEL_22;
      v6 = ServiceKind.rawValue.getter(*(_BYTE *)(v99 + 32));
      v24 = v23;
      v25 = ServiceKind.rawValue.getter(v8);
      v27 = v6 == v25 && v24 == v26;
      v102 = v16;
      if (v27)
      {
        swift_bridgeObjectRetain(v99);
        swift_bridgeObjectRelease_n(v24, 2);
      }
      else
      {
        v28 = v26;
        v6 = _stringCompareWithSmolCheck(_:_:expecting:)(v6, v24, v25, v26, 0);
        swift_bridgeObjectRetain(v99);
        swift_bridgeObjectRelease(v24);
        swift_bridgeObjectRelease(v28);
        if ((v6 & 1) == 0)
        {
          if (v101 != 1)
          {
            v6 = 33;
            if (!__OFADD__(1, 1))
              __asm { BR              X9 }
LABEL_103:
            __break(1u);
LABEL_104:
            __break(1u);
LABEL_105:
            __break(1u);
LABEL_106:
            __break(1u);
LABEL_107:
            if (v6 < 0)
              v87 = v6;
            else
              v87 = v6 & 0xFFFFFFFFFFFFFF8;
            sub_1000038E4((uint64_t)v116);
            sub_10000390C(&v117);
            sub_10000390C(&v115);
            sub_10000390C(&v114);
            sub_10000389C(v8, v90);
            swift_bridgeObjectRetain(v97);
            v11 = _CocoaArrayWrapper.endIndex.getter(v87);
            v10 = v97;
            if (!v11)
              goto LABEL_111;
            goto LABEL_3;
          }
          sub_10000395C(&v117);
LABEL_22:
          sub_10000395C(&v117);

          goto LABEL_99;
        }
      }
      sub_10000395C(&v117);
      sub_10000395C(&v117);
      v29 = *(_QWORD *)(v98 + 16);
      if (!v29)
        break;
      swift_bridgeObjectRetain(v98);
      v30 = objc_msgSend(v16, "associatedServiceType");
      if (v30)
      {
        v31 = v30;
        v32 = static String._unconditionallyBridgeFromObjectiveC(_:)(v30);
        v34 = v33;

        v35 = _s20HomeWidgetLockScreen11ServiceKindO8rawValueACSgSS_tcfC_0(v32, v34);
        if (v35 == 51)
          v8 = 0;
        else
          v8 = v35;
      }
      else
      {
        v8 = 0;
      }
      v6 = ServiceKind.rawValue.getter(*(_BYTE *)(v98 + 32));
      v37 = v36;
      v39 = ServiceKind.rawValue.getter(v8);
      v40 = v38;
      if (v6 == v39 && v37 == v38)
      {
        swift_bridgeObjectRetain(v98);
        swift_bridgeObjectRelease_n(v37, 2);
LABEL_34:
        sub_10000395C(&v115);
        sub_10000395C(&v115);
        break;
      }
      v6 = _stringCompareWithSmolCheck(_:_:expecting:)(v6, v37, v39, v38, 0);
      swift_bridgeObjectRetain(v98);
      swift_bridgeObjectRelease(v37);
      swift_bridgeObjectRelease(v40);
      if ((v6 & 1) != 0)
        goto LABEL_34;
      if (v29 != 1)
      {
        v6 = 33;
        if (!__OFADD__(1, 1))
          __asm { BR              X9 }
        goto LABEL_104;
      }
      sub_10000395C(&v115);
      sub_10000395C(&v115);

      v8 = v95;
      v10 = v97;
      v12 = v100;
      v13 = &DataModel;
      if (v100 == v94)
        goto LABEL_100;
    }
    v41 = _swiftEmptyArrayStorage;
    v112 = (uint64_t)_swiftEmptyArrayStorage;
    v42 = *(_QWORD *)(v93 + 16);
    v43 = swift_bridgeObjectRetain(v93);
    v104 = v42;
    if (v42)
    {
      swift_bridgeObjectRetain(v43);
      v44 = 0;
LABEL_39:
      v108 = *(_BYTE *)(v103 + v44);
      v6 = (int64_t)objc_msgSend(v16, "characteristics");
      v45 = sub_1000038AC(0, (unint64_t *)&qword_100082010, HMCharacteristic_ptr);
      v8 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v6, v45);

      if ((unint64_t)v8 >> 62)
      {
        if (v8 < 0)
          v67 = v8;
        else
          v67 = v8 & 0xFFFFFFFFFFFFFF8;
        swift_bridgeObjectRetain(v8);
        v46 = _CocoaArrayWrapper.endIndex.getter(v67);
        if (!v46)
        {
LABEL_37:
          swift_bridgeObjectRelease_n(v8, 2);
          goto LABEL_38;
        }
      }
      else
      {
        v46 = *(_QWORD *)((v8 & 0xFFFFFFFFFFFFF8) + 0x10);
        swift_bridgeObjectRetain(v8);
        if (!v46)
          goto LABEL_37;
      }
      v106 = v44;
      v47 = 4;
      while (1)
      {
        v6 = v47 - 4;
        v48 = (v8 & 0xC000000000000001) != 0
            ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v47 - 4, v8)
            : *(id *)(v8 + 8 * v47);
        v49 = v48;
        v50 = v47 - 3;
        if (__OFADD__(v6, 1))
          break;
        v51 = objc_msgSend(v48, "characteristicType");
        v52 = static String._unconditionallyBridgeFromObjectiveC(_:)(v51);
        v54 = v53;

        v55 = _s20HomeWidgetLockScreen18CharacteristicKindO8rawValueACSgSS_tcfC_0(v52, v54);
        if (v55 == 174)
          v55 = 0;
        v56 = CharacteristicKind.rawValue.getter(v55);
        v6 = v57;
        v58 = CharacteristicKind.rawValue.getter(v108);
        if (v56 == v58 && v6 == v59)
        {
          swift_bridgeObjectRelease_n(v8, 2);
          goto LABEL_57;
        }
        v61 = v59;
        v62 = _stringCompareWithSmolCheck(_:_:expecting:)(v56, v6, v58, v59, 0);
        swift_bridgeObjectRelease(v6);
        swift_bridgeObjectRelease(v61);
        if ((v62 & 1) != 0)
        {
          v6 = v8;
LABEL_57:
          v63 = swift_bridgeObjectRelease_n(v6, 2);
          v8 = (uint64_t)&v112;
          specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v63);
          v65 = *(_QWORD *)((v112 & 0xFFFFFFFFFFFFFF8) + 0x10);
          v64 = *(_QWORD *)((v112 & 0xFFFFFFFFFFFFFF8) + 0x18);
          v13 = &DataModel;
          v44 = v106;
          if (v65 >= v64 >> 1)
            specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v64 > 1, v65 + 1, 1);
          v66 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v65, v49);
          specialized Array._endMutation()(v66);
          v16 = v102;
LABEL_38:
          if (++v44 == v104)
          {
            sub_10000395C(&v114);
            v68 = v112;
            v41 = _swiftEmptyArrayStorage;
            goto LABEL_67;
          }
          goto LABEL_39;
        }

        ++v47;
        if (v50 == v46)
        {
          swift_bridgeObjectRelease_n(v8, 2);
          v13 = &DataModel;
          v16 = v102;
          v44 = v106;
          goto LABEL_38;
        }
      }
      __break(1u);
LABEL_102:
      __break(1u);
      goto LABEL_103;
    }
    v68 = (uint64_t)_swiftEmptyArrayStorage;
LABEL_67:
    sub_10000395C(&v114);
    v112 = (uint64_t)_swiftEmptyArrayStorage;
    if ((unint64_t)v68 >> 62)
    {
      if (v68 < 0)
        v85 = v68;
      else
        v85 = v68 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v68);
      v69 = _CocoaArrayWrapper.endIndex.getter(v85);
      swift_bridgeObjectRelease(v68);
      if (v69)
      {
LABEL_69:
        if (v69 < 1)
          goto LABEL_106;
        v70 = 0;
        v107 = v68;
        v109 = v68 & 0xC000000000000001;
        v105 = v69;
        while (2)
        {
          if (v109)
            v73 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v70, v68);
          else
            v73 = *(id *)(v68 + 8 * v70 + 32);
          v74 = v73;
          v71 = (uint64_t)objc_msgSend(v73, "service");
          if (v71)
          {
            v75 = (void *)v71;
            v76 = objc_msgSend((id)v71, (SEL)v13[384].count);
            v77 = String._bridgeToObjectiveC()();
            v6 = (int64_t)objc_msgSend(v76, "objectForKeyedSubscript:", v77);

            v78 = objc_msgSend(v75, "accessory");
            if (v78)
            {
              v79 = v78;
              v80 = objc_msgSend(v78, (SEL)v13[384].count);
              v81 = String._bridgeToObjectiveC()();
              v82 = objc_msgSend(v80, "objectForKeyedSubscript:", v81);

              v69 = v105;
              v68 = v107;
              if (v6)
              {
                v111 = v6;
                v83 = sub_100003704(&qword_100081EC8);
                v71 = swift_dynamicCast(&v110, &v111, v83, &type metadata for Bool, 6);
                if ((v71 & 1) != 0 && (v110 & 1) == 0)
                {

                  swift_unknownObjectRelease(v82);
                  v13 = &DataModel;
LABEL_73:
                  if (v69 == ++v70)
                  {
                    swift_bridgeObjectRelease(v68);
                    v41 = (double *)v112;
                    v16 = v102;
                    goto LABEL_98;
                  }
                  continue;
                }
              }
              v13 = &DataModel;
              if (v82)
              {
                v111 = (int64_t)v82;
                v84 = sub_100003704(&qword_100081EC8);
                v71 = swift_dynamicCast(&v110, &v111, v84, &type metadata for Bool, 6);
                if ((v71 & 1) != 0 && (v110 & 1) == 0)
                {

                  goto LABEL_73;
                }
              }
            }
            else
            {

              v71 = swift_unknownObjectRelease(v6);
              v69 = v105;
              v68 = v107;
            }
          }
          break;
        }
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v71);
        v6 = *(_QWORD *)(v112 + 16);
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v6);
        v72 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v6, v74);
        specialized ContiguousArray._endMutation()(v72);
        goto LABEL_73;
      }
    }
    else
    {
      v69 = *(_QWORD *)((v68 & 0xFFFFFFFFFFFFF8) + 0x10);
      if (v69)
        goto LABEL_69;
    }
    swift_bridgeObjectRelease(v68);
LABEL_98:

    sub_1000229C0((uint64_t)v41);
LABEL_99:
    v8 = v95;
    v10 = v97;
    v12 = v100;
  }
  while (v100 != v94);
LABEL_100:
  swift_bridgeObjectRelease_n(v10, 2);
  v86 = v113;
LABEL_112:
  sub_100003934((uint64_t)v116);
  sub_10000395C(&v117);
  sub_10000395C(&v115);
  sub_10000395C(&v114);
  result = sub_100003984(v8, v90);
  *a3 = v86;
  return result;
}

uint64_t sub_10001DB5C(unsigned __int8 a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v11;
  char v12;
  uint64_t result;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v21;
  char v22;

  v2 = *(_QWORD *)(a2 + 16);
  if (!v2)
    return 0;
  v5 = ServiceKind.rawValue.getter(*(_BYTE *)(a2 + 32));
  v7 = v6;
  v8 = ServiceKind.rawValue.getter(a1);
  if (v5 == v8 && v7 == v9)
  {
LABEL_20:
    swift_bridgeObjectRelease_n(v7, 2);
    return 1;
  }
  v11 = v9;
  v12 = _stringCompareWithSmolCheck(_:_:expecting:)(v5, v7, v8, v9, 0);
  swift_bridgeObjectRetain(a2);
  swift_bridgeObjectRelease(v7);
  result = swift_bridgeObjectRelease(v11);
  if ((v12 & 1) != 0)
  {
LABEL_7:
    swift_bridgeObjectRelease(a2);
    return 1;
  }
  if (v2 == 1)
  {
LABEL_17:
    swift_bridgeObjectRelease(a2);
    return 0;
  }
  v14 = 33;
  while (1)
  {
    v15 = v14 - 31;
    if (__OFADD__(v14 - 32, 1))
      break;
    v16 = ServiceKind.rawValue.getter(*(_BYTE *)(a2 + v14));
    v7 = v17;
    v18 = ServiceKind.rawValue.getter(a1);
    if (v16 == v18 && v7 == v19)
    {
      swift_bridgeObjectRelease(a2);
      goto LABEL_20;
    }
    v21 = v19;
    v22 = _stringCompareWithSmolCheck(_:_:expecting:)(v16, v7, v18, v19, 0);
    swift_bridgeObjectRelease(v7);
    result = swift_bridgeObjectRelease(v21);
    if ((v22 & 1) != 0)
      goto LABEL_7;
    ++v14;
    if (v15 == v2)
      goto LABEL_17;
  }
  __break(1u);
  return result;
}

uint64_t sub_10001DCB0(uint64_t a1, char a2, uint64_t a3)
{
  uint64_t v3;
  _BYTE *v4;

  v3 = *(_QWORD *)(a3 + 16);
  if (v3)
  {
    v4 = (_BYTE *)(a3 + 40);
    do
    {
      if ((*v4 & 1) != 0)
      {
        if ((a2 & 1) != 0)
          return 1;
      }
      else if ((a2 & 1) == 0 && *((_QWORD *)v4 - 1) == a1)
      {
        return 1;
      }
      v4 += 16;
      --v3;
    }
    while (v3);
  }
  return 0;
}

void DataModel.characteristics(matching:from:)(__int128 *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;

  v12 = *a1;
  v4 = *((_QWORD *)a1 + 2);
  v10 = *((_QWORD *)a1 + 3);
  v11 = v4;
  v5 = *((_QWORD *)a1 + 5);
  v9 = *((_QWORD *)a1 + 4);
  v6 = *((_QWORD *)a1 + 6);
  v7 = swift_allocObject(&unk_10007DB28, 72, 7);
  v8 = a1[1];
  *(_OWORD *)(v7 + 16) = *a1;
  *(_OWORD *)(v7 + 32) = v8;
  *(_OWORD *)(v7 + 48) = a1[2];
  *(_QWORD *)(v7 + 64) = *((_QWORD *)a1 + 6);
  swift_bridgeObjectRetain(a2);
  sub_1000038E4((uint64_t)&v12);
  sub_10000390C(&v11);
  sub_10000390C(&v10);
  sub_10000390C(&v9);
  sub_10000389C(v5, v6);
  sub_10001B884(a2, (uint64_t)sub_1000205E8, v7);
}

uint64_t sub_10001DDC4(id *a1, uint64_t a2)
{
  id v3;
  void *v4;
  uint64_t v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned __int8 v10;
  char v11;
  char v12;
  uint64_t v13;
  id v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v3 = objc_msgSend(*a1, "service");
  if (v3)
  {
    v4 = v3;
    v5 = *(_QWORD *)(a2 + 16);
    swift_bridgeObjectRetain(v5);
    v6 = objc_msgSend(v4, "serviceType");
    v7 = static String._unconditionallyBridgeFromObjectiveC(_:)(v6);
    v9 = v8;

    v10 = _s20HomeWidgetLockScreen11ServiceKindO8rawValueACSgSS_tcfC_0(v7, v9);
    if (v10 == 51)
      v10 = 0;
    v11 = sub_10001DB5C(v10, v5);
    swift_bridgeObjectRelease(v5);
    v12 = 0;
    if ((v11 & 1) != 0)
    {
      v13 = *(_QWORD *)(a2 + 24);
      if (*(_QWORD *)(v13 + 16))
      {
        swift_bridgeObjectRetain(v13);
        v14 = objc_msgSend(v4, "associatedServiceType");
        if (v14)
        {
          v15 = v14;
          v16 = static String._unconditionallyBridgeFromObjectiveC(_:)(v14);
          v18 = v17;

          LOBYTE(v14) = _s20HomeWidgetLockScreen11ServiceKindO8rawValueACSgSS_tcfC_0(v16, v18);
          if (v14 == 51)
            LOBYTE(v14) = 0;
        }
        v12 = sub_10001DB5C(v14, v13);
        swift_bridgeObjectRelease(v13);
      }
      else
      {
        v12 = 1;
      }
    }

  }
  else
  {
    v12 = 0;
  }
  return v12 & 1;
}

uint64_t sub_10001DF04(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12[3];
  void *ObjectType;

  v6 = sub_10001DFD4(v12, 0, 0, 1, a1, a2);
  v7 = v12[0];
  if (v6)
  {
    v8 = v6;
    ObjectType = (void *)swift_getObjectType();
    v12[0] = v8;
    v9 = *a3;
    if (*a3)
    {
      sub_10000E584((uint64_t)v12, *a3);
      *a3 = v9 + 32;
    }
  }
  else
  {
    ObjectType = &type metadata for _StringGuts;
    v12[0] = a1;
    v12[1] = a2;
    v10 = *a3;
    if (*a3)
    {
      sub_10000E584((uint64_t)v12, *a3);
      *a3 = v10 + 32;
    }
    swift_bridgeObjectRetain(a2);
  }
  sub_1000130F0(v12);
  return v7;
}

uint64_t sub_10001DFD4(uint64_t *a1, char *__dst, uint64_t a3, char a4, uint64_t a5, unint64_t a6)
{
  uint64_t v8;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  _QWORD __src[2];

  if ((a6 & 0x2000000000000000) != 0)
  {
    if ((a4 & 1) == 0)
    {
      if (__dst)
      {
        v12 = HIBYTE(a6) & 0xF;
        if (a3 - (uint64_t)__dst > v12)
        {
          __src[0] = a5;
          __src[1] = a6 & 0xFFFFFFFFFFFFFFLL;
          if (__src >= (_QWORD *)&__dst[v12] || (char *)__src + v12 <= __dst)
          {
            memcpy(__dst, __src, HIBYTE(a6) & 0xF);
            UnsafeMutableRawBufferPointer.subscript.setter(0, HIBYTE(a6) & 0xF, __dst, a3);
            result = 0;
            *a1 = (uint64_t)__dst;
            return result;
          }
          goto LABEL_17;
        }
      }
    }
LABEL_13:
    result = sub_10001E18C(a5, a6);
    *a1 = v13;
    return result;
  }
  if ((a6 & 0x1000000000000000) != 0)
    goto LABEL_13;
  if ((a5 & 0x1000000000000000) != 0)
  {
    v8 = (a6 & 0xFFFFFFFFFFFFFFFLL) + 32;
    goto LABEL_5;
  }
  v8 = _StringObject.sharedUTF8.getter(a5, a6);
  if (!v8)
  {
    _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Unexpectedly found nil while unwrapping an Optional value", 57, 2, "Swift/StringTesting.swift", 25);
    __break(1u);
LABEL_17:
    result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutableRawPointer.initializeMemory overlapping range", 58, 2, "Swift/UnsafeRawPointer.swift", 28, 2, 1173, 0);
    __break(1u);
    return result;
  }
LABEL_5:
  *a1 = v8;
  if ((a6 & 0x8000000000000000) != 0)
    return 0;
  else
    return swift_unknownObjectRetain(a6 & 0xFFFFFFFFFFFFFFFLL);
}

uint64_t sub_10001E18C(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;

  v2 = (uint64_t)sub_10001E220(a1, a2);
  if ((swift_isUniquelyReferenced_nonNull_native(v2) & 1) == 0)
    v2 = sub_10001E394(0, *(_QWORD *)(v2 + 16) + 1, 1, (char *)v2);
  v4 = *(_QWORD *)(v2 + 16);
  v3 = *(_QWORD *)(v2 + 24);
  if (v4 >= v3 >> 1)
    v2 = sub_10001E394(v3 > 1, v4 + 1, 1, (char *)v2);
  *(_QWORD *)(v2 + 16) = v4 + 1;
  *(_BYTE *)(v2 + 32 + v4) = 0;
  return v2;
}

_QWORD *sub_10001E220(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  char v8;
  _QWORD *result;

  if ((a2 & 0x1000000000000000) != 0)
    goto LABEL_10;
  if ((a2 & 0x2000000000000000) != 0)
    v4 = HIBYTE(a2) & 0xF;
  else
    v4 = a1 & 0xFFFFFFFFFFFFLL;
  if (v4)
  {
    while (1)
    {
      v5 = sub_10000A478(v4, 0);
      if (v4 < 0)
        break;
      v6 = v5;
      v7 = _StringGuts.copyUTF8(into:)(v5 + 4, v4, a1, a2);
      if ((v8 & 1) != 0)
        goto LABEL_14;
      if (v7 == v4)
        return v6;
      _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "invalid Collection: less than 'count' elements in collection", 60, 2, "Swift/ContiguousArrayBuffer.swift", 33);
      __break(1u);
LABEL_10:
      v4 = String.UTF8View._foreignCount()();
      if (!v4)
        return &_swiftEmptyArrayStorage;
    }
    _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutableBufferPointer with negative count", 46, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 71, 0);
    __break(1u);
LABEL_14:
    result = (_QWORD *)_assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Insufficient space allocated to copy string contents", 52, 2, "Swift/StringUTF8View.swift", 26);
    __break(1u);
  }
  else
  {
    return &_swiftEmptyArrayStorage;
  }
  return result;
}

uint64_t sub_10001E394(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  int64_t v8;
  int64_t v9;
  uint64_t v10;
  char *v11;
  size_t v12;
  char *v13;
  char *v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_100003704(&qword_100081C78);
    v11 = (char *)swift_allocObject(v10, v9 + 32, 7);
    v12 = j__malloc_size(v11);
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * v12 - 64;
  }
  else
  {
    v11 = (char *)&_swiftEmptyArrayStorage;
  }
  v13 = v11 + 32;
  v14 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v13 >= &v14[v8])
      memmove(v13, v14, v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v14 >= &v13[v8] || v13 >= &v14[v8])
  {
    memcpy(v13, v14, v8);
LABEL_28:
    swift_bridgeObjectRelease(a4);
    return (uint64_t)v11;
  }
LABEL_30:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_10001E4E0(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_10001E5A4(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_10001E4FC(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_10001E700(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_10001E518(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_10001E85C(a1, a2, a3, *v3);
  *v3 = result;
  return result;
}

uint64_t sub_10001E534(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_10001E9C4(a1, a2, a3, *v3);
  *v3 = result;
  return result;
}

uint64_t sub_10001E550(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_10001EB20(a1, a2, a3, *v3);
  *v3 = result;
  return result;
}

uint64_t sub_10001E56C(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_10001EC6C(a1, a2, a3, *v3);
  *v3 = result;
  return result;
}

uint64_t sub_10001E588(char a1, int64_t a2, char a3)
{
  unint64_t *v3;
  uint64_t result;

  result = sub_10001EDC8(a1, a2, a3, *v3);
  *v3 = result;
  return result;
}

uint64_t sub_10001E5A4(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_100003704(&qword_100081CA0);
    v11 = (char *)swift_allocObject(v10, 8 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 25;
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * (v13 >> 3);
  }
  else
  {
    v11 = (char *)&_swiftEmptyArrayStorage;
  }
  v14 = v11 + 32;
  v15 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v14 >= &v15[8 * v8])
      memmove(v14, v15, 8 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v15 >= &v14[8 * v8] || v14 >= &v15[8 * v8])
  {
    memcpy(v14, v15, 8 * v8);
LABEL_30:
    swift_release(a4);
    return (uint64_t)v11;
  }
LABEL_32:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_10001E700(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_100003704(&qword_100081CA8);
    v11 = (char *)swift_allocObject(v10, 8 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 25;
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * (v13 >> 3);
  }
  else
  {
    v11 = (char *)&_swiftEmptyArrayStorage;
  }
  v14 = v11 + 32;
  v15 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v14 >= &v15[8 * v8])
      memmove(v14, v15, 8 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v15 >= &v14[8 * v8] || v14 >= &v15[8 * v8])
  {
    memcpy(v14, v15, 8 * v8);
LABEL_30:
    swift_release(a4);
    return (uint64_t)v11;
  }
LABEL_32:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_10001E85C(char a1, int64_t a2, char a3, uint64_t a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  double *v11;
  int64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *(_QWORD *)(a4 + 24);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *(_QWORD *)(a4 + 16);
  if (v7 <= v8)
    v9 = *(_QWORD *)(a4 + 16);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_100003704(&qword_100081EB0);
    v11 = (double *)swift_allocObject(v10, 16 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 17;
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * (v13 >> 4);
  }
  else
  {
    v11 = _swiftEmptyArrayStorage;
  }
  v14 = (char *)(v11 + 4);
  v15 = (char *)(a4 + 32);
  if ((a1 & 1) != 0)
  {
    if (v11 != (double *)a4 || v14 >= &v15[16 * v8])
      memmove(v14, v15, 16 * v8);
    *(_QWORD *)(a4 + 16) = 0;
    goto LABEL_30;
  }
  if (v15 >= &v14[16 * v8] || v14 >= &v15[16 * v8])
  {
    swift_arrayInitWithCopy(v14);
LABEL_30:
    swift_release(a4);
    return (uint64_t)v11;
  }
LABEL_32:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_10001E9C4(char a1, int64_t a2, char a3, uint64_t a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  double *v11;
  int64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *(_QWORD *)(a4 + 24);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *(_QWORD *)(a4 + 16);
  if (v7 <= v8)
    v9 = *(_QWORD *)(a4 + 16);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_100003704(&qword_100081C90);
    v11 = (double *)swift_allocObject(v10, 8 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 25;
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * (v13 >> 3);
  }
  else
  {
    v11 = _swiftEmptyArrayStorage;
  }
  v14 = (char *)(v11 + 4);
  v15 = (char *)(a4 + 32);
  if ((a1 & 1) != 0)
  {
    if (v11 != (double *)a4 || v14 >= &v15[8 * v8])
      memmove(v14, v15, 8 * v8);
    *(_QWORD *)(a4 + 16) = 0;
    goto LABEL_30;
  }
  if (v15 >= &v14[8 * v8] || v14 >= &v15[8 * v8])
  {
    memcpy(v14, v15, 8 * v8);
LABEL_30:
    swift_release(a4);
    return (uint64_t)v11;
  }
LABEL_32:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_10001EB20(char a1, int64_t a2, char a3, uint64_t a4)
{
  unint64_t v6;
  int64_t v7;
  int64_t v8;
  int64_t v9;
  uint64_t v10;
  double *v11;
  size_t v12;
  char *v13;
  char *v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *(_QWORD *)(a4 + 24);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *(_QWORD *)(a4 + 16);
  if (v7 <= v8)
    v9 = *(_QWORD *)(a4 + 16);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_100003704(&qword_100081EE0);
    v11 = (double *)swift_allocObject(v10, v9 + 32, 7);
    v12 = j__malloc_size(v11);
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * v12 - 64;
  }
  else
  {
    v11 = _swiftEmptyArrayStorage;
  }
  v13 = (char *)(v11 + 4);
  v14 = (char *)(a4 + 32);
  if ((a1 & 1) != 0)
  {
    if (v11 != (double *)a4 || v13 >= &v14[v8])
      memmove(v13, v14, v8);
    *(_QWORD *)(a4 + 16) = 0;
    goto LABEL_28;
  }
  if (v14 >= &v13[v8] || v13 >= &v14[v8])
  {
    memcpy(v13, v14, v8);
LABEL_28:
    swift_release(a4);
    return (uint64_t)v11;
  }
LABEL_30:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_10001EC6C(char a1, int64_t a2, char a3, uint64_t a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  double *v11;
  int64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *(_QWORD *)(a4 + 24);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *(_QWORD *)(a4 + 16);
  if (v7 <= v8)
    v9 = *(_QWORD *)(a4 + 16);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_100003704(&qword_100081EE8);
    v11 = (double *)swift_allocObject(v10, 8 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 25;
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * (v13 >> 3);
  }
  else
  {
    v11 = _swiftEmptyArrayStorage;
  }
  v14 = (char *)(v11 + 4);
  v15 = (char *)(a4 + 32);
  if ((a1 & 1) != 0)
  {
    if (v11 != (double *)a4 || v14 >= &v15[8 * v8])
      memmove(v14, v15, 8 * v8);
    *(_QWORD *)(a4 + 16) = 0;
    goto LABEL_30;
  }
  if (v15 >= &v14[8 * v8] || v14 >= &v15[8 * v8])
  {
    memcpy(v14, v15, 8 * v8);
LABEL_30:
    swift_release(a4);
    return (uint64_t)v11;
  }
LABEL_32:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_10001EDC8(char a1, int64_t a2, char a3, unint64_t a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  double *v15;
  size_t v16;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  unint64_t v22;
  uint64_t v23;
  char *v24;
  unint64_t v25;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *(_QWORD *)(a4 + 24);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
LABEL_35:
        __break(1u);
        goto LABEL_36;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *(_QWORD *)(a4 + 16);
  if (v7 <= v8)
    v9 = *(_QWORD *)(a4 + 16);
  else
    v9 = v7;
  if (!v9)
  {
    v15 = _swiftEmptyArrayStorage;
    goto LABEL_19;
  }
  v10 = sub_100003704(&qword_100081EF0);
  v11 = *(_QWORD *)(type metadata accessor for LayoutSubview(0) - 8);
  v12 = *(_QWORD *)(v11 + 72);
  v13 = *(unsigned __int8 *)(v11 + 80);
  v14 = (v13 + 32) & ~v13;
  v15 = (double *)swift_allocObject(v10, v14 + v12 * v9, v13 | 7);
  v16 = j__malloc_size(v15);
  if (!v12)
  {
    __break(1u);
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  if (v16 - v14 == 0x8000000000000000 && v12 == -1)
    goto LABEL_34;
  *((_QWORD *)v15 + 2) = v8;
  *((_QWORD *)v15 + 3) = 2 * ((uint64_t)(v16 - v14) / v12);
LABEL_19:
  v18 = type metadata accessor for LayoutSubview(0);
  v19 = *(_QWORD *)(v18 - 8);
  v20 = (*(unsigned __int8 *)(v19 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v19 + 80);
  v21 = (char *)v15 + v20;
  v22 = a4 + v20;
  if ((a1 & 1) != 0)
  {
    if ((unint64_t)v15 < a4 || (unint64_t)v21 >= v22 + *(_QWORD *)(v19 + 72) * v8)
    {
      swift_arrayInitWithTakeFrontToBack(v21, v22, v8, v18);
    }
    else if (v15 != (double *)a4)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    *(_QWORD *)(a4 + 16) = 0;
    goto LABEL_32;
  }
  v23 = *(_QWORD *)(v19 + 72) * v8;
  v24 = &v21[v23];
  v25 = v22 + v23;
  if (v22 >= (unint64_t)v24 || (unint64_t)v21 >= v25)
  {
    swift_arrayInitWithCopy(v21);
LABEL_32:
    swift_release(a4);
    return (uint64_t)v15;
  }
LABEL_36:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_10001EFA8(void *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  id v6;
  char v7;
  uint64_t v8;
  Swift::Int v9;
  Swift::Int v10;
  uint64_t v11;
  unint64_t v12;
  id v13;
  char v14;
  uint64_t v15;
  id v16;
  char v17;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;

  v2 = v1;
  v4 = *v1;
  if ((*v1 & 0xC000000000000001) != 0)
  {
    if (v4 < 0)
      v5 = *v1;
    else
      v5 = v4 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v4);
    v6 = a1;
    v7 = __CocoaSet.contains(_:)();

    if ((v7 & 1) != 0)
    {
      v8 = sub_10001F17C(v5, (uint64_t)v6);
      swift_bridgeObjectRelease(v4);
      return v8;
    }
LABEL_15:
    swift_bridgeObjectRelease(v4);
    return 0;
  }
  v9 = *(_QWORD *)(v4 + 40);
  swift_bridgeObjectRetain(v4);
  v10 = NSObject._rawHashValue(seed:)(v9);
  v11 = -1 << *(_BYTE *)(v4 + 32);
  v12 = v10 & ~v11;
  if (((*(_QWORD *)(v4 + 56 + ((v12 >> 3) & 0xFFFFFFFFFFFFF8)) >> v12) & 1) == 0)
    goto LABEL_15;
  sub_1000038AC(0, (unint64_t *)&qword_100082010, HMCharacteristic_ptr);
  v13 = *(id *)(*(_QWORD *)(v4 + 48) + 8 * v12);
  v14 = static NSObject.== infix(_:_:)(v13, a1);

  if ((v14 & 1) == 0)
  {
    v15 = ~v11;
    do
    {
      v12 = (v12 + 1) & v15;
      if (((*(_QWORD *)(v4 + 56 + ((v12 >> 3) & 0xFFFFFFFFFFFFF8)) >> v12) & 1) == 0)
        goto LABEL_15;
      v16 = *(id *)(*(_QWORD *)(v4 + 48) + 8 * v12);
      v17 = static NSObject.== infix(_:_:)(v16, a1);

    }
    while ((v17 & 1) == 0);
  }
  swift_bridgeObjectRelease(v4);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v2);
  v19 = *v2;
  v22 = *v2;
  *v2 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    sub_10002E634();
    v19 = v22;
  }
  v8 = *(_QWORD *)(*(_QWORD *)(v19 + 48) + 8 * v12);
  sub_10001F314(v12);
  v20 = *v2;
  *v2 = v22;
  swift_bridgeObjectRelease(v20);
  return v8;
}

uint64_t sub_10001F17C(uint64_t a1, uint64_t a2)
{
  Swift::Int *v2;
  Swift::Int *v3;
  uint64_t v6;
  uint64_t v7;
  Swift::Int v8;
  Swift::Int v9;
  Swift::Int v10;
  uint64_t v11;
  unint64_t v12;
  id v13;
  char v14;
  uint64_t v15;
  id v16;
  char v17;
  uint64_t result;
  Swift::Int v19;

  v3 = v2;
  swift_bridgeObjectRelease(*v3);
  v6 = __CocoaSet.count.getter(a1);
  v7 = swift_unknownObjectRetain(a1);
  v8 = sub_10002DAC8(v7, v6);
  v19 = v8;
  v9 = *(_QWORD *)(v8 + 40);
  swift_retain(v8);
  v10 = NSObject._rawHashValue(seed:)(v9);
  v11 = -1 << *(_BYTE *)(v8 + 32);
  v12 = v10 & ~v11;
  if (((*(_QWORD *)(v8 + 56 + ((v12 >> 3) & 0xFFFFFFFFFFFFF8)) >> v12) & 1) != 0)
  {
    sub_1000038AC(0, (unint64_t *)&qword_100082010, HMCharacteristic_ptr);
    v13 = *(id *)(*(_QWORD *)(v8 + 48) + 8 * v12);
    v14 = static NSObject.== infix(_:_:)(v13, a2);

    if ((v14 & 1) != 0)
    {
LABEL_6:
      swift_release(v8);
      v8 = *(_QWORD *)(*(_QWORD *)(v8 + 48) + 8 * v12);
      sub_10001F314(v12);
      if ((static NSObject.== infix(_:_:)(a2, v8) & 1) != 0)
      {
        *v3 = v19;
        return v8;
      }
      __break(1u);
    }
    else
    {
      v15 = ~v11;
      while (1)
      {
        v12 = (v12 + 1) & v15;
        if (((*(_QWORD *)(v8 + 56 + ((v12 >> 3) & 0xFFFFFFFFFFFFF8)) >> v12) & 1) == 0)
          break;
        v16 = *(id *)(*(_QWORD *)(v8 + 48) + 8 * v12);
        v17 = static NSObject.== infix(_:_:)(v16, a2);

        if ((v17 & 1) != 0)
          goto LABEL_6;
      }
    }
    swift_release(v8);
    __break(1u);
  }
  result = swift_release(v8);
  __break(1u);
  return result;
}

unint64_t sub_10001F314(unint64_t result)
{
  _QWORD *v1;
  int64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  Swift::Int v10;
  id v11;
  Swift::Int v12;
  Swift::Int v13;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  BOOL v20;
  uint64_t v21;

  v2 = result;
  v3 = *v1;
  v4 = *v1 + 56;
  v5 = -1 << *(_BYTE *)(*v1 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(v4 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    swift_retain(*v1);
    v8 = _HashTable.previousHole(before:)(v2, v4, v7);
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v9 = (v8 + 1) & v7;
      do
      {
        v10 = *(_QWORD *)(v3 + 40);
        v11 = *(id *)(*(_QWORD *)(v3 + 48) + 8 * v6);
        v12 = NSObject._rawHashValue(seed:)(v10);

        v13 = v12 & v7;
        if (v2 >= (uint64_t)v9)
        {
          if (v13 >= v9 && v2 >= v13)
          {
LABEL_16:
            v16 = *(_QWORD *)(v3 + 48);
            v17 = (_QWORD *)(v16 + 8 * v2);
            v18 = (_QWORD *)(v16 + 8 * v6);
            if (v2 != v6 || (v2 = v6, v17 >= v18 + 1))
            {
              *v17 = *v18;
              v2 = v6;
            }
          }
        }
        else if (v13 >= v9 || v2 >= v13)
        {
          goto LABEL_16;
        }
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    *(_QWORD *)(v4 + (((unint64_t)v2 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << v2) - 1;
    result = swift_release(v3);
  }
  else
  {
    *(_QWORD *)(v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << result) - 1;
  }
  v19 = *(_QWORD *)(v3 + 16);
  v20 = __OFSUB__(v19, 1);
  v21 = v19 - 1;
  if (v20)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(v3 + 16) = v21;
    ++*(_DWORD *)(v3 + 36);
  }
  return result;
}

void (*sub_10001F4B4(uint64_t (**a1)(), unint64_t a2, uint64_t a3))(_QWORD *)
{
  uint64_t (*v6)();

  v6 = (uint64_t (*)())malloc(0x28uLL);
  *a1 = v6;
  *((_QWORD *)v6 + 4) = sub_10001F58C(v6, a2, a3);
  return sub_10001F508;
}

void (*sub_10001F50C(void (**a1)(id *a1), unint64_t a2, uint64_t a3))(_QWORD *)
{
  void (*v6)(id *);

  v6 = (void (*)(id *))malloc(0x28uLL);
  *a1 = v6;
  *((_QWORD *)v6 + 4) = sub_10001F5F8(v6, a2, a3);
  return sub_10001F508;
}

void sub_10001F560(_QWORD *a1)
{
  void *v1;

  v1 = (void *)*a1;
  (*(void (**)(_QWORD))(*a1 + 32))(*a1);
  free(v1);
}

uint64_t (*sub_10001F58C(uint64_t (*result)(), unint64_t a2, uint64_t a3))()
{
  uint64_t (*v3)();
  id v4;

  v3 = result;
  if ((a3 & 0xC000000000000001) != 0)
  {
    v4 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(a2, a3);
    goto LABEL_5;
  }
  if ((a2 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (*(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10) > a2)
  {
    v4 = *(id *)(a3 + 8 * a2 + 32);
LABEL_5:
    *(_QWORD *)v3 = v4;
    return sub_100020C80;
  }
  __break(1u);
  return result;
}

void (*sub_10001F5F8(void (*result)(id *a1), unint64_t a2, uint64_t a3))(id *a1)
{
  void (*v3)(id *);
  id v4;

  v3 = result;
  if ((a3 & 0xC000000000000001) != 0)
  {
    v4 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(a2, a3);
    goto LABEL_5;
  }
  if ((a2 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (*(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10) > a2)
  {
    v4 = *(id *)(a3 + 8 * a2 + 32);
LABEL_5:
    *(_QWORD *)v3 = v4;
    return sub_10001F664;
  }
  __break(1u);
  return result;
}

void sub_10001F664(id *a1)
{

}

int64_t sub_10001F66C(int64_t result, int a2, char a3, uint64_t a4)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;

  if ((a3 & 1) != 0)
    goto LABEL_20;
  v4 = result;
  if (result < 0 || (result = 1 << *(_BYTE *)(a4 + 32), result <= (uint64_t)v4))
  {
    __break(1u);
    goto LABEL_18;
  }
  v5 = v4 >> 6;
  v6 = a4 + 56;
  v7 = *(_QWORD *)(a4 + 56 + 8 * (v4 >> 6));
  if (((v7 >> v4) & 1) == 0)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  if (*(_DWORD *)(a4 + 36) != a2)
  {
LABEL_19:
    __break(1u);
LABEL_20:
    __break(1u);
    return result;
  }
  v8 = v7 & (-2 << (v4 & 0x3F));
  if (v8)
    return __clz(__rbit64(v8)) | v4 & 0xFFFFFFFFFFFFFFC0;
  v9 = v5 + 1;
  v10 = (unint64_t)(result + 63) >> 6;
  if (v5 + 1 < v10)
  {
    v11 = *(_QWORD *)(v6 + 8 * v9);
    if (v11)
      return __clz(__rbit64(v11)) + (v9 << 6);
    v9 = v5 + 2;
    if (v5 + 2 < v10)
    {
      v11 = *(_QWORD *)(v6 + 8 * v9);
      if (v11)
        return __clz(__rbit64(v11)) + (v9 << 6);
      while (v10 - 3 != v5)
      {
        v11 = *(_QWORD *)(a4 + 80 + 8 * v5++);
        if (v11)
        {
          v9 = v5 + 2;
          return __clz(__rbit64(v11)) + (v9 << 6);
        }
      }
    }
  }
  return result;
}

void sub_10001F750(uint64_t a1, uint64_t a2, char a3, uint64_t a4)
{
  void *v4;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  Swift::Int v13;
  uint64_t v14;
  id v15;
  char v16;
  uint64_t v17;
  id v18;
  char v19;
  id v20;
  uint64_t v21;
  void *v22;

  v7 = a1;
  if ((a4 & 0xC000000000000001) == 0)
  {
    if ((a3 & 1) != 0)
      goto LABEL_13;
    if (a1 < 0 || 1 << *(_BYTE *)(a4 + 32) <= a1)
    {
      __break(1u);
    }
    else if (((*(_QWORD *)(a4 + (((unint64_t)a1 >> 3) & 0xFFFFFFFFFFFFF8) + 56) >> a1) & 1) != 0)
    {
      if (*(_DWORD *)(a4 + 36) == (_DWORD)a2)
        goto LABEL_20;
      __break(1u);
LABEL_13:
      if (__CocoaSet.Index.age.getter(a1, a2) == *(_DWORD *)(a4 + 36))
      {
        v11 = __CocoaSet.Index.element.getter(v7, a2);
        v21 = v11;
        v12 = sub_1000038AC(0, (unint64_t *)&qword_100082010, HMCharacteristic_ptr);
        swift_unknownObjectRetain(v11);
        swift_dynamicCast(&v22, &v21, (char *)&type metadata for Swift.AnyObject + 8, v12, 7);
        v4 = v22;
        swift_unknownObjectRelease(v11);
        v13 = NSObject._rawHashValue(seed:)(*(_QWORD *)(a4 + 40));
        v14 = -1 << *(_BYTE *)(a4 + 32);
        v7 = v13 & ~v14;
        if (((*(_QWORD *)(a4 + 56 + ((v7 >> 3) & 0xFFFFFFFFFFFFF8)) >> v7) & 1) != 0)
        {
          v15 = *(id *)(*(_QWORD *)(a4 + 48) + 8 * v7);
          v16 = static NSObject.== infix(_:_:)(v15, v4);

          if ((v16 & 1) == 0)
          {
            v17 = ~v14;
            do
            {
              v7 = (v7 + 1) & v17;
              if (((*(_QWORD *)(a4 + 56 + ((v7 >> 3) & 0xFFFFFFFFFFFFF8)) >> v7) & 1) == 0)
                goto LABEL_24;
              v18 = *(id *)(*(_QWORD *)(a4 + 48) + 8 * v7);
              v19 = static NSObject.== infix(_:_:)(v18, v4);

            }
            while ((v19 & 1) == 0);
          }

LABEL_20:
          v20 = *(id *)(*(_QWORD *)(a4 + 48) + 8 * v7);
          return;
        }
LABEL_24:

        __break(1u);
        goto LABEL_25;
      }
LABEL_23:
      __break(1u);
      goto LABEL_24;
    }
    __break(1u);
    goto LABEL_23;
  }
  if ((a3 & 1) == 0)
  {
LABEL_25:
    __break(1u);
    return;
  }
  if (a4 < 0)
    v8 = a4;
  else
    v8 = a4 & 0xFFFFFFFFFFFFFF8;
  v9 = __CocoaSet.element(at:)(a1, a2, v8);
  v21 = v9;
  v10 = sub_1000038AC(0, (unint64_t *)&qword_100082010, HMCharacteristic_ptr);
  swift_unknownObjectRetain(v9);
  swift_dynamicCast(&v22, &v21, (char *)&type metadata for Swift.AnyObject + 8, v10, 7);
  swift_unknownObjectRelease(v9);
}

uint64_t sub_10001F9B8(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;

  v1 = *(_QWORD *)(a1 + 56);
  if (v1)
  {
    v2 = 0;
    return __clz(__rbit64(v1)) + v2;
  }
  v5 = *(_BYTE *)(a1 + 32);
  v6 = v5 & 0x3F;
  v3 = 1 << v5;
  if (v6 < 7)
    return v3;
  v1 = *(_QWORD *)(a1 + 64);
  if (v1)
  {
    v2 = 64;
    return __clz(__rbit64(v1)) + v2;
  }
  v7 = (unint64_t)(v3 + 63) >> 6;
  if (v7 <= 2)
    v7 = 2;
  v8 = v7 - 2;
  v9 = (unint64_t *)(a1 + 72);
  v2 = 64;
  while (v8)
  {
    v10 = *v9++;
    v1 = v10;
    --v8;
    v2 += 64;
    if (v10)
      return __clz(__rbit64(v1)) + v2;
  }
  return v3;
}

uint64_t sub_10001FA40@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD v17[2];
  __int128 v18;
  uint64_t v19;

  if ((result & 0xC000000000000001) != 0)
  {
    if (result >= 0)
      result &= 0xFFFFFFFFFFFFFF8uLL;
    v7 = __CocoaSet.makeIterator()(result);
    v8 = sub_1000038AC(0, (unint64_t *)&qword_100082010, HMCharacteristic_ptr);
    v9 = sub_100020B4C();
    Set.Iterator.init(_cocoa:)(v17, v7, v8, v9);
    result = v17[0];
    v10 = v17[1];
    v11 = v18;
    v12 = v19;
  }
  else
  {
    v13 = -1;
    v14 = -1 << *(_BYTE *)(result + 32);
    v15 = ~v14;
    v10 = result + 56;
    v16 = -v14;
    if (v16 < 64)
      v13 = ~(-1 << v16);
    v12 = v13 & *(_QWORD *)(result + 56);
    v11 = (unint64_t)v15;
  }
  *(_QWORD *)a4 = result;
  *(_QWORD *)(a4 + 8) = v10;
  *(_OWORD *)(a4 + 16) = v11;
  *(_QWORD *)(a4 + 32) = v12;
  *(_QWORD *)(a4 + 40) = a2;
  *(_QWORD *)(a4 + 48) = a3;
  return result;
}

void sub_10001FB20(uint64_t a1)
{
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;
  Swift::Int v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  id v19;
  char v20;
  uint64_t v21;
  id v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  Swift::Int v27;
  id v28;
  Swift::Int v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  id v35;
  char v36;
  uint64_t v37;
  id v38;
  char v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;

  v1 = a1;
  v2 = (unint64_t)a1 >> 62;
  if ((unint64_t)a1 >> 62)
  {
    if (a1 < 0)
      v6 = a1;
    else
      v6 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v3 = _CocoaArrayWrapper.endIndex.getter(v6);
    swift_bridgeObjectRelease(v1);
    if (v3)
    {
LABEL_3:
      sub_100003704(&qword_100081ED8);
      v4 = (_QWORD *)static _SetStorage.allocate(capacity:)(v3);
      if (!v2)
        goto LABEL_4;
LABEL_11:
      if (v1 < 0)
        v7 = v1;
      else
        v7 = v1 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v1);
      v5 = _CocoaArrayWrapper.endIndex.getter(v7);
      swift_bridgeObjectRelease(v1);
      if (!v5)
        return;
      goto LABEL_15;
    }
  }
  else
  {
    v3 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v3)
      goto LABEL_3;
  }
  v4 = &_swiftEmptySetSingleton;
  if (v2)
    goto LABEL_11;
LABEL_4:
  v5 = *(_QWORD *)((v1 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (!v5)
    return;
LABEL_15:
  v8 = (char *)(v4 + 7);
  v45 = v5;
  if ((v1 & 0xC000000000000001) != 0)
  {
    v9 = 0;
    v43 = v1;
    while (1)
    {
      while (1)
      {
        v10 = specialized _ArrayBuffer._getElementSlowPath(_:)(v9, v1);
        v11 = __OFADD__(v9++, 1);
        if (v11)
        {
          __break(1u);
          goto LABEL_42;
        }
        v12 = v10;
        v13 = NSObject._rawHashValue(seed:)(v4[5]);
        v14 = -1 << *((_BYTE *)v4 + 32);
        v15 = v13 & ~v14;
        v16 = v15 >> 6;
        v17 = *(_QWORD *)&v8[8 * (v15 >> 6)];
        v18 = 1 << v15;
        if (((1 << v15) & v17) != 0)
          break;
LABEL_26:
        *(_QWORD *)&v8[8 * v16] = v18 | v17;
        *(_QWORD *)(v4[6] + 8 * v15) = v12;
        v24 = v4[2];
        v11 = __OFADD__(v24, 1);
        v25 = v24 + 1;
        if (v11)
          goto LABEL_43;
        v4[2] = v25;
        if (v9 == v5)
          return;
      }
      sub_1000038AC(0, (unint64_t *)&qword_100082010, HMCharacteristic_ptr);
      v19 = *(id *)(v4[6] + 8 * v15);
      v20 = static NSObject.== infix(_:_:)(v19, v12);

      if ((v20 & 1) == 0)
      {
        v21 = ~v14;
        while (1)
        {
          v15 = (v15 + 1) & v21;
          v16 = v15 >> 6;
          v17 = *(_QWORD *)&v8[8 * (v15 >> 6)];
          v18 = 1 << v15;
          if ((v17 & (1 << v15)) == 0)
            break;
          v22 = *(id *)(v4[6] + 8 * v15);
          v23 = static NSObject.== infix(_:_:)(v22, v12);

          if ((v23 & 1) != 0)
            goto LABEL_17;
        }
        v1 = v43;
        v5 = v45;
        goto LABEL_26;
      }
LABEL_17:
      swift_unknownObjectRelease(v12);
      v1 = v43;
      v5 = v45;
      if (v9 == v45)
        return;
    }
  }
  v26 = 0;
  v42 = v1 + 32;
  v44 = *(_QWORD *)((v1 & 0xFFFFFFFFFFFFF8) + 0x10);
  while (v26 != v44)
  {
    v27 = v4[5];
    v28 = *(id *)(v42 + 8 * v26);
    v29 = NSObject._rawHashValue(seed:)(v27);
    v30 = -1 << *((_BYTE *)v4 + 32);
    v31 = v29 & ~v30;
    v32 = v31 >> 6;
    v33 = *(_QWORD *)&v8[8 * (v31 >> 6)];
    v34 = 1 << v31;
    if (((1 << v31) & v33) != 0)
    {
      sub_1000038AC(0, (unint64_t *)&qword_100082010, HMCharacteristic_ptr);
      v35 = *(id *)(v4[6] + 8 * v31);
      v36 = static NSObject.== infix(_:_:)(v35, v28);

      if ((v36 & 1) != 0)
      {
LABEL_30:

        goto LABEL_31;
      }
      v37 = ~v30;
      while (1)
      {
        v31 = (v31 + 1) & v37;
        v32 = v31 >> 6;
        v33 = *(_QWORD *)&v8[8 * (v31 >> 6)];
        v34 = 1 << v31;
        if ((v33 & (1 << v31)) == 0)
          break;
        v38 = *(id *)(v4[6] + 8 * v31);
        v39 = static NSObject.== infix(_:_:)(v38, v28);

        if ((v39 & 1) != 0)
          goto LABEL_30;
      }
    }
    *(_QWORD *)&v8[8 * v32] = v34 | v33;
    *(_QWORD *)(v4[6] + 8 * v31) = v28;
    v40 = v4[2];
    v11 = __OFADD__(v40, 1);
    v41 = v40 + 1;
    if (v11)
      goto LABEL_44;
    v4[2] = v41;
LABEL_31:
    if (++v26 == v45)
      return;
  }
LABEL_42:
  __break(1u);
LABEL_43:
  __break(1u);
LABEL_44:
  __break(1u);
}

uint64_t sub_10001FE7C(uint64_t a1)
{
  uint64_t v1;

  return sub_100019200(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(NSObject **)(v1 + 32), *(_QWORD *)(v1 + 40), *(_QWORD *)(v1 + 48));
}

double *sub_10001FE8C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t i;
  id v8;
  void *v9;
  uint64_t v10;
  uint64_t v12;
  double *v13;
  id v14;
  double *v15;

  v3 = v2;
  v15 = _swiftEmptyArrayStorage;
  if ((unint64_t)a1 >> 62)
    goto LABEL_13;
  v6 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain(a1);
  for (; v6; v6 = _CocoaArrayWrapper.endIndex.getter(v12))
  {
    for (i = 4; ; ++i)
    {
      v8 = (a1 & 0xC000000000000001) != 0
         ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(i - 4, a1)
         : *(id *)(a1 + 8 * i);
      v9 = v8;
      v10 = i - 3;
      if (__OFADD__(i - 4, 1))
        break;
      v14 = v8;
      sub_10001C378(&v14, a2, &v13);
      if (v3)
      {
        swift_bridgeObjectRelease(a1);

        return (double *)swift_bridgeObjectRelease(v15);
      }

      sub_1000229C0((uint64_t)v13);
      if (v10 == v6)
      {
        swift_bridgeObjectRelease(a1);
        return v15;
      }
    }
    __break(1u);
LABEL_13:
    if (a1 < 0)
      v12 = a1;
    else
      v12 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
  }
  swift_bridgeObjectRelease(a1);
  return _swiftEmptyArrayStorage;
}

uint64_t sub_10001FFCC(uint64_t a1, void *a2)
{
  uint64_t v2;
  uint64_t v3;
  double *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t result;
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  double *v31;
  uint64_t v32;
  uint64_t v33;
  double *v34;
  id v35;
  double *v36;
  _QWORD v37[8];
  double *v38;

  v3 = v2;
  v4 = _swiftEmptyArrayStorage;
  v38 = _swiftEmptyArrayStorage;
  v27 = *(_QWORD *)(a1 + 16);
  if (!v27)
    return (uint64_t)v4;
  v26 = a1 + 32;
  swift_bridgeObjectRetain(a1);
  v5 = 0;
  while (1)
  {
    v33 = v5;
    v7 = (_QWORD *)(v26 + 56 * v5);
    v9 = v7[2];
    v8 = v7[3];
    v11 = v7[4];
    v10 = v7[5];
    v12 = v7[6];
    v13 = v7[1];
    v37[0] = *v7;
    v37[1] = v13;
    v37[2] = v9;
    v37[3] = v8;
    v37[4] = v11;
    v37[5] = v10;
    v37[6] = v12;
    swift_bridgeObjectRetain(v13);
    swift_bridgeObjectRetain(v9);
    swift_bridgeObjectRetain(v8);
    swift_bridgeObjectRetain(v11);
    sub_10000389C(v10, v12);
    v14 = objc_msgSend(a2, "accessories");
    v15 = sub_1000038AC(0, (unint64_t *)&qword_100081F40, HMAccessory_ptr);
    v16 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v14, v15);

    v36 = _swiftEmptyArrayStorage;
    v32 = v11;
    if ((unint64_t)v16 >> 62)
      break;
    v17 = v11;
    v18 = *(_QWORD *)((v16 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain(v13);
    swift_bridgeObjectRetain(v9);
    swift_bridgeObjectRetain(v8);
    swift_bridgeObjectRetain(v17);
    sub_10000389C(v10, v12);
    swift_bridgeObjectRetain(v16);
    if (v18)
      goto LABEL_7;
LABEL_3:
    swift_bridgeObjectRelease(v13);
    swift_bridgeObjectRelease(v16);
    v31 = _swiftEmptyArrayStorage;
LABEL_4:
    swift_bridgeObjectRelease(v32);
    swift_bridgeObjectRelease(v8);
    swift_bridgeObjectRelease(v9);
    sub_100003984(v10, v12);
    swift_bridgeObjectRelease(v32);
    swift_bridgeObjectRelease(v8);
    swift_bridgeObjectRelease(v9);
    swift_bridgeObjectRelease(v13);
    v6 = v16;
    v5 = v33 + 1;
    swift_bridgeObjectRelease(v6);
    sub_100003984(v10, v12);
    sub_1000229C0((uint64_t)v31);
    if (v33 + 1 == v27)
    {
      swift_bridgeObjectRelease(a1);
      return (uint64_t)v38;
    }
  }
  if (v16 < 0)
    v23 = v16;
  else
    v23 = v16 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v13);
  swift_bridgeObjectRetain(v9);
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRetain(v11);
  sub_10000389C(v10, v12);
  swift_bridgeObjectRetain(v16);
  v18 = _CocoaArrayWrapper.endIndex.getter(v23);
  if (!v18)
    goto LABEL_3;
LABEL_7:
  v29 = v12;
  v30 = v10;
  v19 = 4;
  while (1)
  {
    v20 = (v16 & 0xC000000000000001) != 0
        ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v19 - 4, v16)
        : *(id *)(v16 + 8 * v19);
    v21 = v20;
    v22 = v19 - 3;
    if (__OFADD__(v19 - 4, 1))
      break;
    v35 = v20;
    sub_10001C378(&v35, (uint64_t)v37, &v34);
    if (v3)
      goto LABEL_23;
    v3 = 0;

    sub_1000229C0((uint64_t)v34);
    ++v19;
    if (v22 == v18)
    {
      swift_bridgeObjectRelease(v13);
      swift_bridgeObjectRelease(v16);
      v31 = v36;
      v12 = v29;
      v10 = v30;
      goto LABEL_4;
    }
  }
  __break(1u);
LABEL_23:
  swift_bridgeObjectRelease(v16);

  result = swift_bridgeObjectRelease(v36);
  __break(1u);
  return result;
}

uint64_t sub_1000202F8()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10002031C(uint64_t a1)
{
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t i;
  void *v10;
  void **v11;
  void *v12;
  uint64_t v13;
  id v14;
  uint64_t v15;

  v2 = (unint64_t)a1 >> 62;
  if ((unint64_t)a1 >> 62)
  {
    if (a1 < 0)
      v13 = a1;
    else
      v13 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v3 = _CocoaArrayWrapper.endIndex.getter(v13);
    swift_bridgeObjectRelease(a1);
  }
  else
  {
    v3 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  v4 = sub_1000038AC(0, (unint64_t *)&qword_100082010, HMCharacteristic_ptr);
  v5 = sub_100020B4C();
  result = Set.init(minimumCapacity:)(v3, v4, v5);
  v15 = result;
  if (v2)
  {
    if (a1 < 0)
      v8 = a1;
    else
      v8 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v7 = _CocoaArrayWrapper.endIndex.getter(v8);
    result = swift_bridgeObjectRelease(a1);
    if (!v7)
      return v15;
  }
  else
  {
    v7 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (!v7)
      return v15;
  }
  if (v7 >= 1)
  {
    if ((a1 & 0xC000000000000001) != 0)
    {
      for (i = 0; i != v7; ++i)
      {
        v10 = (void *)specialized _ArrayBuffer._getElementSlowPath(_:)(i, a1);
        sub_10002D634((Swift::Int *)&v14, v10);

      }
    }
    else
    {
      v11 = (void **)(a1 + 32);
      do
      {
        v12 = *v11++;
        sub_10002D634((Swift::Int *)&v14, v12);

        --v7;
      }
      while (v7);
    }
    return v15;
  }
  __break(1u);
  return result;
}

uint64_t sub_100020474()
{
  uint64_t v0;

  swift_errorRelease(*(_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100020498()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1000204A8()
{
  _QWORD *v0;

  swift_release(v0[2]);
  swift_bridgeObjectRelease(v0[4]);
  swift_release(v0[5]);
  return swift_deallocObject(v0, 48, 7);
}

void sub_1000204DC(uint64_t a1)
{
  uint64_t v1;

  sub_10001BB08(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 40));
}

uint64_t sub_1000204E8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_1000204F8(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_100020500()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100020510()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10002053C(uint64_t a1)
{
  uint64_t v1;

  return sub_10001C29C(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

uint64_t sub_100020544(uint64_t result, uint64_t a2, char a3)
{
  if ((a3 & 1) != 0)
    return swift_bridgeObjectRelease(result);
  return result;
}

unint64_t sub_100020550()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100081E98;
  if (!qword_100081E98)
  {
    v1 = sub_100003744(&qword_100081C58);
    result = swift_getWitnessTable(&protocol conformance descriptor for [A], v1);
    atomic_store(result, (unint64_t *)&qword_100081E98);
  }
  return result;
}

uint64_t sub_10002059C()
{
  _QWORD *v0;

  swift_bridgeObjectRelease(v0[3]);
  swift_bridgeObjectRelease(v0[4]);
  swift_bridgeObjectRelease(v0[5]);
  swift_bridgeObjectRelease(v0[6]);
  if (v0[7])
    swift_release(v0[8]);
  return swift_deallocObject(v0, 72, 7);
}

uint64_t sub_1000205E8(id *a1)
{
  uint64_t v1;

  return sub_10001DDC4(a1, v1 + 16);
}

uint64_t destroy for CharacteristicFetchSpecification(_QWORD *a1)
{
  uint64_t result;

  swift_bridgeObjectRelease(a1[1]);
  swift_bridgeObjectRelease(a1[2]);
  swift_bridgeObjectRelease(a1[3]);
  result = swift_bridgeObjectRelease(a1[4]);
  if (a1[5])
    return swift_release(a1[6]);
  return result;
}

_QWORD *initializeWithCopy for CharacteristicFetchSpecification(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _OWORD *v9;
  uint64_t v10;

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  v5 = a2[2];
  v6 = a2[3];
  a1[2] = v5;
  a1[3] = v6;
  v7 = a2[4];
  a1[4] = v7;
  v9 = a2 + 5;
  v8 = a2[5];
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v7);
  if (v8)
  {
    v10 = a2[6];
    a1[5] = v8;
    a1[6] = v10;
    swift_retain(v10);
  }
  else
  {
    *(_OWORD *)(a1 + 5) = *v9;
  }
  return a1;
}

_QWORD *assignWithCopy for CharacteristicFetchSpecification(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  *a1 = *a2;
  v4 = a2[1];
  v5 = a1[1];
  a1[1] = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  v6 = a2[2];
  v7 = a1[2];
  a1[2] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  v8 = a2[3];
  v9 = a1[3];
  a1[3] = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  v10 = a2[4];
  v11 = a1[4];
  a1[4] = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease(v11);
  v12 = a2[5];
  if (!a1[5])
  {
    if (v12)
    {
      v15 = a2[6];
      a1[5] = v12;
      a1[6] = v15;
      swift_retain(v15);
      return a1;
    }
LABEL_7:
    *(_OWORD *)(a1 + 5) = *(_OWORD *)(a2 + 5);
    return a1;
  }
  if (!v12)
  {
    swift_release(a1[6]);
    goto LABEL_7;
  }
  v13 = a2[6];
  v14 = a1[6];
  a1[5] = v12;
  a1[6] = v13;
  swift_retain(v13);
  swift_release(v14);
  return a1;
}

__n128 initializeWithTake for CharacteristicFetchSpecification(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  v4 = *(_OWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(__n128 *)a1 = result;
  return result;
}

_QWORD *assignWithTake for CharacteristicFetchSpecification(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  *a1 = *(_QWORD *)a2;
  swift_bridgeObjectRelease(a1[1]);
  v4 = a1[2];
  *(_OWORD *)(a1 + 1) = *(_OWORD *)(a2 + 8);
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(a1[3]);
  v5 = a1[4];
  *(_OWORD *)(a1 + 3) = *(_OWORD *)(a2 + 24);
  swift_bridgeObjectRelease(v5);
  v6 = *(_QWORD *)(a2 + 40);
  if (!a1[5])
  {
    if (v6)
    {
      v9 = *(_QWORD *)(a2 + 48);
      a1[5] = v6;
      a1[6] = v9;
      return a1;
    }
LABEL_7:
    *(_OWORD *)(a1 + 5) = *(_OWORD *)(a2 + 40);
    return a1;
  }
  if (!v6)
  {
    swift_release(a1[6]);
    goto LABEL_7;
  }
  v7 = *(_QWORD *)(a2 + 48);
  v8 = a1[6];
  a1[5] = v6;
  a1[6] = v7;
  swift_release(v8);
  return a1;
}

uint64_t getEnumTagSinglePayload for CharacteristicFetchSpecification(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 56))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for CharacteristicFetchSpecification(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 56) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 56) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for CharacteristicFetchSpecification()
{
  return &type metadata for CharacteristicFetchSpecification;
}

Swift::Int sub_100020938(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned __int8 v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  Swift::Int result;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v22;
  char v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v30;
  char v31;
  uint64_t v32;
  BOOL v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD v37[9];

  v1 = *(_QWORD *)(a1 + 16);
  if (v1)
  {
    sub_100003704(&qword_100081EA0);
    v3 = static _SetStorage.allocate(capacity:)(v1);
    v4 = 0;
    v5 = v3 + 56;
    v35 = v1;
    v36 = a1 + 32;
    while (1)
    {
      v6 = *(_BYTE *)(v36 + v4);
      Hasher.init(_seed:)(v37, *(_QWORD *)(v3 + 40));
      v7 = CharacteristicKind.rawValue.getter(v6);
      v9 = v8;
      String.hash(into:)(v37, v7, v8);
      swift_bridgeObjectRelease(v9);
      result = Hasher._finalize()();
      v11 = -1 << *(_BYTE *)(v3 + 32);
      v12 = result & ~v11;
      v13 = v12 >> 6;
      v14 = *(_QWORD *)(v5 + 8 * (v12 >> 6));
      v15 = 1 << v12;
      if (((1 << v12) & v14) != 0)
      {
        v16 = CharacteristicKind.rawValue.getter(*(_BYTE *)(*(_QWORD *)(v3 + 48) + v12));
        v18 = v17;
        v19 = CharacteristicKind.rawValue.getter(v6);
        if (v16 == v19 && v18 == v20)
        {
LABEL_3:
          swift_bridgeObjectRelease_n(v18, 2);
          goto LABEL_4;
        }
        v22 = v20;
        v23 = _stringCompareWithSmolCheck(_:_:expecting:)(v16, v18, v19, v20, 0);
        swift_bridgeObjectRelease(v18);
        result = swift_bridgeObjectRelease(v22);
        if ((v23 & 1) != 0)
          goto LABEL_4;
        v24 = ~v11;
        while (1)
        {
          v12 = (v12 + 1) & v24;
          v13 = v12 >> 6;
          v14 = *(_QWORD *)(v5 + 8 * (v12 >> 6));
          v15 = 1 << v12;
          if ((v14 & (1 << v12)) == 0)
            break;
          v25 = CharacteristicKind.rawValue.getter(*(_BYTE *)(*(_QWORD *)(v3 + 48) + v12));
          v18 = v26;
          v27 = CharacteristicKind.rawValue.getter(v6);
          if (v25 == v27 && v18 == v28)
            goto LABEL_3;
          v30 = v28;
          v31 = _stringCompareWithSmolCheck(_:_:expecting:)(v25, v18, v27, v28, 0);
          swift_bridgeObjectRelease(v18);
          result = swift_bridgeObjectRelease(v30);
          if ((v31 & 1) != 0)
            goto LABEL_4;
        }
      }
      *(_QWORD *)(v5 + 8 * v13) = v15 | v14;
      *(_BYTE *)(*(_QWORD *)(v3 + 48) + v12) = v6;
      v32 = *(_QWORD *)(v3 + 16);
      v33 = __OFADD__(v32, 1);
      v34 = v32 + 1;
      if (v33)
      {
        __break(1u);
        return result;
      }
      *(_QWORD *)(v3 + 16) = v34;
LABEL_4:
      if (++v4 == v35)
        return v3;
    }
  }
  return (Swift::Int)&_swiftEmptySetSingleton;
}

unint64_t sub_100020B4C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100081EA8;
  if (!qword_100081EA8)
  {
    v1 = sub_1000038AC(255, (unint64_t *)&qword_100082010, HMCharacteristic_ptr);
    result = swift_getWitnessTable(&protocol conformance descriptor for NSObject, v1);
    atomic_store(result, (unint64_t *)&qword_100081EA8);
  }
  return result;
}

uint64_t sub_100020BA4(uint64_t a1)
{
  return swift_release(a1 & 0x7FFFFFFFFFFFFFFFLL);
}

uint64_t sub_100020BAC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = sub_100003704(&qword_100081ED0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 32) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 24));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_100020C24(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  sub_100003704(&qword_100081ED0);
  return sub_100019318(a1, a2, *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24));
}

uint64_t DataModel.widgetLogger.unsafeMutableAddressor()
{
  return sub_100020D08(&qword_100081680, (uint64_t)static DataModel.widgetLogger, (uint64_t)sub_100022448);
}

const char *DataModel.noDataString.unsafeMutableAddressor()
{
  return "––";
}

uint64_t *DataModel.defaultMetadataPlist.unsafeMutableAddressor()
{
  if (qword_100081678 != -1)
    swift_once(&qword_100081678, sub_10002220C);
  return &static DataModel.defaultMetadataPlist;
}

uint64_t DataModel.widgetLoggerClimate.unsafeMutableAddressor()
{
  return sub_100020D08(&qword_100081698, (uint64_t)static DataModel.widgetLoggerClimate, (uint64_t)sub_10002259C);
}

uint64_t sub_100020D08(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;

  if (*a1 != -1)
    swift_once(a1, a3);
  v4 = type metadata accessor for Logger(0);
  return sub_100003884(v4, a2);
}

uint64_t DataModel.widgetLoggerFetches.unsafeMutableAddressor()
{
  return sub_100020D08(&qword_100081688, (uint64_t)static DataModel.widgetLoggerFetches, (uint64_t)sub_100022488);
}

id DataModel.homeManager.getter()
{
  uint64_t v0;

  return *(id *)(v0 + OBJC_IVAR____TtC20HomeWidgetLockScreen9DataModel_homeManager);
}

void *DataModel.currentHome.getter()
{
  uint64_t v0;
  void **v1;
  void *v2;
  id v3;
  _BYTE v5[24];

  v1 = (void **)(v0 + OBJC_IVAR____TtC20HomeWidgetLockScreen9DataModel_currentHome);
  swift_beginAccess(v0 + OBJC_IVAR____TtC20HomeWidgetLockScreen9DataModel_currentHome, v5, 0, 0);
  v2 = *v1;
  v3 = v2;
  return v2;
}

void DataModel.currentHome.setter(void *a1)
{
  uint64_t v1;
  void **v3;
  void *v4;
  _BYTE v5[24];

  v3 = (void **)(v1 + OBJC_IVAR____TtC20HomeWidgetLockScreen9DataModel_currentHome);
  swift_beginAccess(v3, v5, 1, 0);
  v4 = *v3;
  *v3 = a1;

}

void *DataModel.currentHome.modify(uint64_t a1)
{
  uint64_t v1;

  swift_beginAccess(v1 + OBJC_IVAR____TtC20HomeWidgetLockScreen9DataModel_currentHome, a1, 33, 0);
  return &j__swift_endAccess;
}

id DataModel.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), "init");
}

id DataModel.init()()
{
  char *v0;
  uint64_t v1;
  uint64_t v2;
  void *ObjCClassFromMetadata;
  char *v4;
  id v5;
  id v6;
  objc_super v8;

  v1 = OBJC_IVAR____TtC20HomeWidgetLockScreen9DataModel_homeManager;
  v2 = sub_1000038AC(0, &qword_100081F20, HMMutableHomeManagerConfiguration_ptr);
  ObjCClassFromMetadata = (void *)swift_getObjCClassFromMetadata(v2);
  v4 = v0;
  v5 = objc_msgSend(ObjCClassFromMetadata, "defaultPrivateConfiguration");
  objc_msgSend(v5, "setDiscretionary:", 0);
  objc_msgSend(v5, "setAdaptive:", 1);
  v6 = objc_msgSend(objc_allocWithZone((Class)HMHomeManager), "initWithConfiguration:", v5);

  *(_QWORD *)&v0[v1] = v6;
  *(_QWORD *)&v4[OBJC_IVAR____TtC20HomeWidgetLockScreen9DataModel_currentHome] = 0;
  *(_DWORD *)&v4[OBJC_IVAR____TtC20HomeWidgetLockScreen9DataModel_defaultsHomeSensingChangedNotifyToken] = 0;
  *(_DWORD *)&v4[OBJC_IVAR____TtC20HomeWidgetLockScreen9DataModel_defaultsSelectedHomeChangedNotifyToken] = 0;

  v8.receiver = v4;
  v8.super_class = (Class)type metadata accessor for DataModel();
  return objc_msgSendSuper2(&v8, "init");
}

id DataModel.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for DataModel();
  return objc_msgSendSuper2(&v2, "dealloc");
}

char *sub_100021008()
{
  char *result;

  result = sub_100021024();
  qword_10008A648 = (uint64_t)result;
  return result;
}

char *sub_100021024()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  char *v4;
  uint64_t v5;
  double v6;
  void (*v7)(char *, uint64_t);
  __int128 v8;
  _BYTE *v9;
  _QWORD *v10;
  NSObject *v11;
  uint64_t v12;
  char *v13;
  void *v14;
  uint64_t v15;
  char *v16;
  int *v17;
  NSObject *v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  char *v22;
  int *v23;
  id v24;
  uint64_t v25;
  id *v26;
  id v27;
  uint64_t v28;
  char *v29;
  NSObject *v30;
  os_log_type_t v31;
  uint8_t *v32;
  uint64_t v33;
  id v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  _UNKNOWN **v38;
  __objc2_prot_list *v39;
  uint64_t v40;
  uint64_t v41;
  double v42;
  void *v43;
  void *v44;
  uint64_t v45;
  uint64_t v46;
  NSObject *v47;
  os_log_type_t v48;
  uint64_t v49;
  void (*v50)(char *, uint64_t);
  uint64_t v51;
  _QWORD *v52;
  _QWORD *v53;
  id v54;
  id v55;
  uint64_t v56;
  _QWORD *v57;
  uint64_t v58;
  uint64_t v60;
  char *v61;
  __int128 v62;
  uint64_t v63;
  uint64_t v64;
  void **aBlock;
  uint64_t v66;
  uint64_t (*v67)(uint64_t, uint64_t);
  void *v68;
  void (*v69)(uint64_t);
  uint64_t v70;

  v0 = type metadata accessor for Date(0);
  v1 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin(v0);
  v3 = (char *)&v60 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = (char *)objc_msgSend(objc_allocWithZone((Class)type metadata accessor for DataModel()), "init");
  v60 = OBJC_IVAR____TtC20HomeWidgetLockScreen9DataModel_homeManager;
  v61 = v4;
  v5 = Date.init()(objc_msgSend(*(id *)&v4[OBJC_IVAR____TtC20HomeWidgetLockScreen9DataModel_homeManager], "setDelegate:"));
  v6 = Date.timeIntervalSinceReferenceDate.getter(v5);
  v7 = *(void (**)(char *, uint64_t))(v1 + 8);
  v7(v3, v0);
  v9 = &unk_10008A000;
  v10 = &unk_100081000;
  if ((byte_10008A640 & 1) == 0)
  {
    v38 = &_ss6UInt32VMn_ptr;
    v39 = &DataModel;
    *(_QWORD *)&v8 = 138412546;
    v62 = v8;
    do
    {
      v43 = objc_autoreleasePoolPush();
      v44 = (void *)objc_opt_self(v38[38]);
      objc_msgSend(v44, (SEL)v39[375].count, 0.2);
      if ((v9[1600] & 1) == 0)
      {
        if (v10[208] != -1)
          swift_once(&qword_100081680, sub_100022448);
        v45 = type metadata accessor for Logger(0);
        v46 = sub_100003884(v45, (uint64_t)static DataModel.widgetLogger);
        v47 = Logger.logObject.getter(v46);
        v48 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v47, v48))
        {
          v49 = swift_slowAlloc(22, -1);
          v50 = v7;
          v51 = v0;
          v52 = v10;
          v53 = (_QWORD *)swift_slowAlloc(16, -1);
          *(_DWORD *)v49 = v62;
          v54 = objc_msgSend(v44, "mainThread");
          *(_QWORD *)(v49 + 4) = v54;
          *v53 = v54;
          *(_WORD *)(v49 + 12) = 2112;
          v55 = objc_msgSend(v44, "currentThread");
          *(_QWORD *)(v49 + 14) = v55;
          v53[1] = v55;
          _os_log_impl((void *)&_mh_execute_header, v47, v48, "DataModel.shared is STILL spinning waiting for HomeKit — main thread is %@ current thread is %@", (uint8_t *)v49, 0x16u);
          v56 = sub_100003704((uint64_t *)&unk_100081FD0);
          swift_arrayDestroy(v53, 2, v56);
          v57 = v53;
          v10 = v52;
          v0 = v51;
          v7 = v50;
          v9 = (_BYTE *)&unk_10008A000;
          swift_slowDealloc(v57, -1, -1);
          v58 = v49;
          v38 = &_ss6UInt32VMn_ptr;
          swift_slowDealloc(v58, -1, -1);
        }

        v41 = Date.init()(v40);
        v42 = Date.timeIntervalSinceReferenceDate.getter(v41);
        v7(v3, v0);
        v39 = &DataModel;
        if (v42 - v6 > 60.0)
          exit(-1);
      }
      objc_autoreleasePoolPop(v43);
    }
    while ((v9[1600] & 1) == 0);
  }
  sub_1000038AC(0, (unint64_t *)&unk_100082030, OS_dispatch_queue_ptr);
  v11 = static OS_dispatch_queue.main.getter();
  v12 = swift_allocObject(&unk_10007DC08, 24, 7);
  v13 = v61;
  *(_QWORD *)(v12 + 16) = v61;
  v69 = sub_1000255A8;
  v70 = v12;
  aBlock = _NSConcreteStackBlock;
  v66 = 1107296256;
  v67 = sub_100021668;
  v68 = &unk_10007DC20;
  v14 = _Block_copy(&aBlock);
  v15 = v70;
  v16 = v13;
  swift_release(v15);
  v17 = (int *)&v16[OBJC_IVAR____TtC20HomeWidgetLockScreen9DataModel_defaultsHomeSensingChangedNotifyToken];
  swift_beginAccess(&v16[OBJC_IVAR____TtC20HomeWidgetLockScreen9DataModel_defaultsHomeSensingChangedNotifyToken], &aBlock, 33, 0);
  notify_register_dispatch("com.apple.Home.homeSensingChanged", v17, v11, v14);
  swift_endAccess(&aBlock);
  _Block_release(v14);

  v18 = static OS_dispatch_queue.main.getter();
  v19 = swift_allocObject(&unk_10007DC58, 24, 7);
  *(_QWORD *)(v19 + 16) = v16;
  v69 = sub_1000255E0;
  v70 = v19;
  aBlock = _NSConcreteStackBlock;
  v66 = 1107296256;
  v67 = sub_100021668;
  v68 = &unk_10007DC70;
  v20 = _Block_copy(&aBlock);
  v21 = v70;
  v22 = v16;
  swift_release(v21);
  v23 = (int *)&v22[OBJC_IVAR____TtC20HomeWidgetLockScreen9DataModel_defaultsSelectedHomeChangedNotifyToken];
  swift_beginAccess(&v22[OBJC_IVAR____TtC20HomeWidgetLockScreen9DataModel_defaultsSelectedHomeChangedNotifyToken], &aBlock, 33, 0);
  notify_register_dispatch("com.apple.Home.selectedHomeChanged", v23, v18, v20);
  swift_endAccess(&aBlock);
  _Block_release(v20);

  v24 = *(id *)&v13[v60];
  v25 = sub_1000453DC(v24);

  v26 = (id *)&v22[OBJC_IVAR____TtC20HomeWidgetLockScreen9DataModel_currentHome];
  swift_beginAccess(&v22[OBJC_IVAR____TtC20HomeWidgetLockScreen9DataModel_currentHome], &aBlock, 1, 0);
  v27 = *v26;
  *v26 = (id)v25;

  if (v10[208] != -1)
    swift_once(&qword_100081680, sub_100022448);
  v28 = type metadata accessor for Logger(0);
  sub_100003884(v28, (uint64_t)static DataModel.widgetLogger);
  v29 = v22;
  v30 = Logger.logObject.getter(v29);
  v31 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v30, v31))
  {
    v32 = (uint8_t *)swift_slowAlloc(12, -1);
    v33 = swift_slowAlloc(32, -1);
    v64 = v33;
    *(_DWORD *)v32 = 136315138;
    if (*v26)
    {
      v34 = objc_msgSend(*v26, "name");
      v35 = static String._unconditionallyBridgeFromObjectiveC(_:)(v34);
      v37 = v36;

    }
    else
    {
      v37 = 0xE400000000000000;
      v35 = 1701736302;
    }
    v63 = sub_10001DF04(v35, v37, &v64);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v63, &v64, v32 + 4, v32 + 12);

    swift_bridgeObjectRelease(v37);
    _os_log_impl((void *)&_mh_execute_header, v30, v31, "User's home is now %s", v32, 0xCu);
    swift_arrayDestroy(v33, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v33, -1, -1);
    swift_slowDealloc(v32, -1, -1);

  }
  else
  {

  }
  return v29;
}

uint64_t sub_100021668(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  void (*v4)(uint64_t);

  v4 = *(void (**)(uint64_t))(a1 + 32);
  v3 = *(_QWORD *)(a1 + 40);
  swift_retain(v3);
  v4(a2);
  return swift_release(v3);
}

void sub_1000216A4(uint64_t a1, char *a2, const char *a3)
{
  uint64_t v5;
  id *v6;
  id v7;
  uint64_t v8;
  char *v9;
  NSObject *v10;
  os_log_type_t v11;
  uint8_t *v12;
  uint64_t v13;
  id v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20[24];

  v5 = sub_1000453DC(*(void **)&a2[OBJC_IVAR____TtC20HomeWidgetLockScreen9DataModel_homeManager]);
  v6 = (id *)&a2[OBJC_IVAR____TtC20HomeWidgetLockScreen9DataModel_currentHome];
  swift_beginAccess(&a2[OBJC_IVAR____TtC20HomeWidgetLockScreen9DataModel_currentHome], v20, 1, 0);
  v7 = *v6;
  *v6 = (id)v5;

  if (qword_100081680 != -1)
    swift_once(&qword_100081680, sub_100022448);
  v8 = type metadata accessor for Logger(0);
  sub_100003884(v8, (uint64_t)static DataModel.widgetLogger);
  v9 = a2;
  v10 = Logger.logObject.getter(v9);
  v11 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v10, v11))
  {
    v12 = (uint8_t *)swift_slowAlloc(12, -1);
    v13 = swift_slowAlloc(32, -1);
    v19 = v13;
    *(_DWORD *)v12 = 136315138;
    if (*v6)
    {
      v14 = objc_msgSend(*v6, "name");
      v15 = static String._unconditionallyBridgeFromObjectiveC(_:)(v14);
      v17 = v16;

    }
    else
    {
      v17 = 0xE400000000000000;
      v15 = 1701736302;
    }
    v18 = sub_10001DF04(v15, v17, &v19);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v18, &v19, v12 + 4, v12 + 12);

    swift_bridgeObjectRelease(v17);
    _os_log_impl((void *)&_mh_execute_header, v10, v11, a3, v12, 0xCu);
    swift_arrayDestroy(v13, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v13, -1, -1);
    swift_slowDealloc(v12, -1, -1);

  }
  else
  {

  }
}

uint64_t DataModel.sortedHomes.getter()
{
  uint64_t v0;
  id v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v6;
  uint64_t v7;

  v1 = objc_retainAutoreleasedReturnValue(objc_msgSend(*(id *)(v0
                                                             + OBJC_IVAR____TtC20HomeWidgetLockScreen9DataModel_homeManager), "homes"));
  v2 = sub_1000038AC(0, (unint64_t *)&qword_100081F38, HMHome_ptr);
  v3 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v1, v2);

  if (v3 < 0 || (v3 & 0x4000000000000000) != 0)
  {
    v6 = swift_bridgeObjectRetain(v3);
    v4 = (uint64_t)sub_10002273C(v6);
    swift_bridgeObjectRelease(v3);
  }
  else
  {
    v4 = v3 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v3);
  }
  v7 = v4;
  sub_100022EA8(&v7);
  swift_bridgeObjectRelease(v3);
  return v7;
}

HMAccessory_optional __swiftcall DataModel.accessoryFromAnyHome(for:)(Swift::String_optional a1)
{
  uint64_t v1;
  uint64_t object;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  id v7;
  uint64_t v8;
  int64_t v9;
  uint64_t v10;
  id v11;
  id v12;
  void *v13;
  void *v14;
  id v15;
  uint64_t v16;
  void *v17;
  char v18;
  id v19;
  void *v20;
  id v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(char *, uint64_t);
  uint64_t v26;
  Swift::Bool v27;
  objc_class *v28;
  id v29;
  uint64_t v30;
  id v31;
  uint64_t v32;
  uint64_t v33;
  id v34;
  id v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  uint64_t v40;
  id v41;
  uint64_t v42;
  id v43;
  int64_t v44;
  uint64_t v45;
  uint64_t v46;
  int64_t v47;
  unint64_t v48;
  id v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  id v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t countAndFlagsBits;
  HMAccessory_optional result;

  object = (uint64_t)a1.value._object;
  countAndFlagsBits = a1.value._countAndFlagsBits;
  v54 = type metadata accessor for UUID(0);
  v52 = *(_QWORD *)(v54 - 8);
  v3 = __chkstk_darwin(v54);
  v51 = (char *)&v43 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  v6 = (char *)&v43 - v5;
  v7 = objc_retainAutoreleasedReturnValue(objc_msgSend(*(id *)(v1
                                                             + OBJC_IVAR____TtC20HomeWidgetLockScreen9DataModel_homeManager), "homes"));
  v8 = sub_1000038AC(0, (unint64_t *)&qword_100081F38, HMHome_ptr);
  v9 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v7, v8);

  v55 = object;
  if ((unint64_t)v9 >> 62)
    goto LABEL_54;
  v10 = *(_QWORD *)((v9 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain(object);
  v11 = (id)v1;
  if (!v10)
  {
LABEL_58:

    goto LABEL_59;
  }
LABEL_3:
  v43 = (id)v1;
  v1 = 0;
  v47 = v9;
  v48 = v9 & 0xC000000000000001;
  v44 = v9 + 32;
  v46 = v10;
  while (1)
  {
    if (v48)
    {
      swift_bridgeObjectRetain(v9);
      v12 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v1, v9);
    }
    else
    {
      v13 = *(void **)(v44 + 8 * v1);
      swift_bridgeObjectRetain(v9);
      v12 = v13;
    }
    v14 = v12;
    v15 = objc_msgSend(v12, "accessories", v43);
    object = sub_1000038AC(0, (unint64_t *)&qword_100081F40, HMAccessory_ptr);
    v16 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v15, object);

    v49 = v14;
    v50 = v1;
    v45 = object;
    if ((unint64_t)v16 >> 62)
      break;
    v17 = *(void **)((v16 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain(v16);
    if (v17)
      goto LABEL_9;
LABEL_25:
    swift_bridgeObjectRelease_n(v16, 2);
    v9 = v47;
    swift_bridgeObjectRelease(v47);

    v1 = v50 + 1;
    if (__OFADD__(v50, 1))
    {
LABEL_53:
      __break(1u);
LABEL_54:
      if (v9 < 0)
        v40 = v9;
      else
        v40 = v9 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(object);
      swift_bridgeObjectRetain(v9);
      v41 = (id)v1;
      v10 = _CocoaArrayWrapper.endIndex.getter(v40);
      swift_bridgeObjectRelease(v9);
      if (!v10)
        goto LABEL_58;
      goto LABEL_3;
    }
    if (v1 == v46)
    {
LABEL_30:

LABEL_59:
      swift_bridgeObjectRelease(v9);
      v17 = 0;
      goto LABEL_60;
    }
  }
  if (v16 < 0)
    v26 = v16;
  else
    v26 = v16 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain_n(v16, 2);
  v17 = (void *)_CocoaArrayWrapper.endIndex.getter(v26);
  swift_bridgeObjectRelease(v16);
  if (!v17)
    goto LABEL_25;
LABEL_9:
  v53 = (id)(v16 & 0xC000000000000001);
  v9 = 4;
  while (1)
  {
    if (v53)
      v19 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v9 - 4, v16);
    else
      v19 = *(id *)(v16 + 8 * v9);
    v20 = v19;
    object = v9 - 3;
    if (__OFADD__(v9 - 4, 1))
    {
      __break(1u);
LABEL_52:
      __break(1u);
      goto LABEL_53;
    }
    v21 = objc_msgSend(v19, "uniqueIdentifier");
    static UUID._unconditionallyBridgeFromObjectiveC(_:)();

    v1 = (uint64_t)v6;
    v22 = UUID.uuidString.getter();
    v24 = v23;
    v25 = *(void (**)(char *, uint64_t))(v52 + 8);
    v25(v6, v54);
    if (!v55)
    {

      swift_bridgeObjectRelease(v24);
      goto LABEL_11;
    }
    if (v22 == countAndFlagsBits && v24 == v55)
    {

      v9 = v47;
      swift_bridgeObjectRelease(v47);

      swift_bridgeObjectRelease(v16);
      goto LABEL_29;
    }
    v18 = _stringCompareWithSmolCheck(_:_:expecting:)(v22, v24, countAndFlagsBits, v55, 0);
    swift_bridgeObjectRelease(v24);

    if ((v18 & 1) != 0)
      break;
LABEL_11:
    ++v9;
    if ((void *)object == v17)
      goto LABEL_25;
  }
  v9 = v47;
  swift_bridgeObjectRelease(v47);

  v24 = v16;
LABEL_29:
  swift_bridgeObjectRelease(v16);
  swift_bridgeObjectRelease(v24);
  v28 = (objc_class *)v50;
  if (v50 == v46)
    goto LABEL_30;
  if (v48)
  {
    v29 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v50, v9);
    goto LABEL_36;
  }
  if (v50 < 0)
  {
    __break(1u);
    goto LABEL_67;
  }
  if ((unint64_t)v50 >= *(_QWORD *)((v9 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
LABEL_67:
    __break(1u);
    goto LABEL_68;
  }
  v29 = *(id *)(v44 + 8 * v50);
LABEL_36:
  v30 = v45;
  v53 = v29;
  v31 = objc_msgSend(v29, "accessories");
  v32 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v31, v30);

  if ((unint64_t)v32 >> 62)
  {
    if (v32 < 0)
      v42 = v32;
    else
      v42 = v32 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v32);
    v6 = (char *)_CocoaArrayWrapper.endIndex.getter(v42);
    if (v6)
      goto LABEL_38;
  }
  else
  {
    v6 = *(char **)((v32 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain(v32);
    if (v6)
    {
LABEL_38:
      v9 = v32 & 0xC000000000000001;
      v33 = 4;
      do
      {
        v1 = v33 - 4;
        v34 = v9
            ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v33 - 4, v32)
            : *(id *)(v32 + 8 * v33);
        v17 = v34;
        object = v33 - 3;
        if (__OFADD__(v1, 1))
          goto LABEL_52;
        v35 = objc_msgSend(v34, "uniqueIdentifier");
        v36 = v51;
        static UUID._unconditionallyBridgeFromObjectiveC(_:)();

        v37 = UUID.uuidString.getter();
        v24 = v38;
        v25(v36, v54);
        if (v37 == countAndFlagsBits && v24 == v55)
          goto LABEL_48;
        v39 = _stringCompareWithSmolCheck(_:_:expecting:)(v37, v24, countAndFlagsBits, v55, 0);
        swift_bridgeObjectRelease(v24);
        if ((v39 & 1) != 0)
        {

          swift_bridgeObjectRelease(v47);
          v24 = v32;
          goto LABEL_50;
        }

        ++v33;
      }
      while ((char *)object != v6);
    }
  }
  swift_bridgeObjectRelease_n(v32, 2);

  __break(1u);
LABEL_48:

  swift_bridgeObjectRelease(v47);
  swift_bridgeObjectRelease(v32);
LABEL_50:
  swift_bridgeObjectRelease(v32);
  swift_bridgeObjectRelease(v24);
LABEL_60:
  swift_bridgeObjectRelease(v55);
  v28 = (objc_class *)v17;
LABEL_68:
  result.value.super.isa = v28;
  result.is_nil = v27;
  return result;
}

HMAccessory_optional __swiftcall DataModel.accessory(for:in:)(Swift::String_optional a1, HMHome in)
{
  void *object;
  uint64_t countAndFlagsBits;
  id v4;
  uint64_t v5;
  uint64_t v6;
  objc_class *v7;
  Swift::Bool v8;
  objc_class *v9;
  HMAccessory_optional result;

  object = a1.value._object;
  countAndFlagsBits = a1.value._countAndFlagsBits;
  v4 = -[objc_class accessories](in.super.isa, "accessories");
  v5 = sub_1000038AC(0, (unint64_t *)&qword_100081F40, HMAccessory_ptr);
  v6 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v4, v5);

  swift_bridgeObjectRetain(object);
  v7 = (objc_class *)sub_100024E68(v6, countAndFlagsBits, (uint64_t)object);
  swift_bridgeObjectRelease(v6);
  swift_bridgeObjectRelease(object);
  v9 = v7;
  result.value.super.isa = v9;
  result.is_nil = v8;
  return result;
}

double *DataModel.accessoriesFromAnyHome(for:)(unsigned __int8 a1)
{
  void *v1;
  uint64_t v3;
  id v4;
  double *v5;

  v3 = DataModel.sortedHomes.getter();
  v4 = v1;
  v5 = sub_100024BF0(v3, a1);
  swift_bridgeObjectRelease(v3);

  return v5;
}

Swift::Bool __swiftcall DataModel.accessoryExists(for:in:)(HomeWidgetLockScreen::ServiceKind a1, HMHome in)
{
  double *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  id v9;
  void *v10;
  Swift::Bool result;
  unint64_t v12;
  Swift::Bool v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;

  v2 = (double *)a1;
  v3 = -[objc_class accessories](in.super.isa, "accessories");
  v4 = sub_1000038AC(0, (unint64_t *)&qword_100081F40, HMAccessory_ptr);
  v5 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v3, v4);

  if (!((unint64_t)v5 >> 62))
  {
    v6 = *(_QWORD *)((v5 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v6)
      goto LABEL_3;
LABEL_12:
    v13 = 0;
LABEL_13:
    swift_bridgeObjectRelease(v5);
    return v13;
  }
LABEL_21:
  if (v5 < 0)
    v16 = v5;
  else
    v16 = v5 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v5);
  v6 = _CocoaArrayWrapper.endIndex.getter(v16);
  swift_bridgeObjectRelease(v5);
  if (!v6)
    goto LABEL_12;
LABEL_3:
  v7 = 0;
  v8 = v5 & 0xC000000000000001;
  while (1)
  {
    if (v8)
    {
      swift_bridgeObjectRetain(v5);
      v9 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v7, v5);
      swift_bridgeObjectRelease(v5);
    }
    else
    {
      v9 = *(id *)(v5 + 8 * v7 + 32);
    }
    v10 = (void *)HMAccessory.subscript.getter(v2);

    if (v10)
      break;
    v12 = v7 + 1;
    if (__OFADD__(v7, 1))
    {
      __break(1u);
      goto LABEL_21;
    }
    ++v7;
    if (v12 == v6)
      goto LABEL_12;
  }
  if (v6 == v7)
    goto LABEL_12;
  if (v8)
  {
    v14 = specialized _ArrayBuffer._getElementSlowPath(_:)(v7, v5);
    swift_unknownObjectRelease(v14);
    v13 = 1;
    goto LABEL_13;
  }
  if ((v7 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else
  {
    v15 = *(_QWORD *)((v5 & 0xFFFFFFFFFFFFF8) + 0x10);
    result = swift_bridgeObjectRelease(v5);
    if (v7 < v15)
      return 1;
  }
  __break(1u);
  return result;
}

uint64_t sub_10002220C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  char *v5;
  id v6;
  NSString v7;
  NSString v8;
  id v9;
  uint64_t result;
  id v11;
  NSURL *v12;
  void *v13;
  void *v14;
  id v15;
  uint64_t v16;

  v0 = type metadata accessor for URL(0);
  v1 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin();
  v3 = (char *)&v16 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100003704(&qword_100081D90);
  __chkstk_darwin();
  v5 = (char *)&v16 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
  v7 = String._bridgeToObjectiveC()();
  v8 = String._bridgeToObjectiveC()();
  v9 = objc_msgSend(v6, "URLForResource:withExtension:", v7, v8);

  if (!v9)
  {
    result = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v1 + 56))(v5, 1, 1, v0);
    goto LABEL_6;
  }
  static URL._unconditionallyBridgeFromObjectiveC(_:)(v9);

  (*(void (**)(char *, char *, uint64_t))(v1 + 32))(v5, v3, v0);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v1 + 56))(v5, 0, 1, v0);
  result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v1 + 48))(v5, 1, v0);
  if ((_DWORD)result == 1)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  v11 = objc_allocWithZone((Class)NSDictionary);
  URL._bridgeToObjectiveC()(v12);
  v14 = v13;
  v15 = objc_msgSend(v11, "initWithContentsOfURL:", v13);

  result = (*(uint64_t (**)(char *, uint64_t))(v1 + 8))(v5, v0);
  if (v15)
  {
    static DataModel.defaultMetadataPlist = (uint64_t)v15;
    return result;
  }
LABEL_7:
  __break(1u);
  return result;
}

id static DataModel.defaultMetadataPlist.getter()
{
  if (qword_100081678 != -1)
    swift_once(&qword_100081678, sub_10002220C);
  return (id)static DataModel.defaultMetadataPlist;
}

uint64_t sub_100022448(uint64_t a1)
{
  return sub_10002262C(a1, static DataModel.widgetLogger, 0xD000000000000014, 0x8000000100068520);
}

uint64_t static DataModel.widgetLogger.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1000224D0(&qword_100081680, (uint64_t)static DataModel.widgetLogger, (uint64_t)sub_100022448, a1);
}

uint64_t sub_100022488(uint64_t a1)
{
  return sub_10002262C(a1, static DataModel.widgetLoggerFetches, 0x6546746567646957, 0xED00007365686374);
}

uint64_t static DataModel.widgetLoggerFetches.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1000224D0(&qword_100081688, (uint64_t)static DataModel.widgetLoggerFetches, (uint64_t)sub_100022488, a1);
}

uint64_t sub_1000224D0@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v6;
  uint64_t v7;

  if (*a1 != -1)
    swift_once(a1, a3);
  v6 = type metadata accessor for Logger(0);
  v7 = sub_100003884(v6, a2);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a4, v7, v6);
}

uint64_t sub_100022538(uint64_t a1)
{
  return sub_10002262C(a1, static DataModel.widgetLoggerSecurity, 0x6553746567646957, 0xEE00797469727563);
}

uint64_t DataModel.widgetLoggerSecurity.unsafeMutableAddressor()
{
  return sub_100020D08(&qword_100081690, (uint64_t)static DataModel.widgetLoggerSecurity, (uint64_t)sub_100022538);
}

uint64_t static DataModel.widgetLoggerSecurity.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1000224D0(&qword_100081690, (uint64_t)static DataModel.widgetLoggerSecurity, (uint64_t)sub_100022538, a1);
}

uint64_t sub_10002259C(uint64_t a1)
{
  return sub_10002262C(a1, static DataModel.widgetLoggerClimate, 0x6C43746567646957, 0xED00006574616D69);
}

uint64_t type metadata accessor for DataModel()
{
  return objc_opt_self(_TtC20HomeWidgetLockScreen9DataModel);
}

uint64_t static DataModel.widgetLoggerClimate.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1000224D0(&qword_100081698, (uint64_t)static DataModel.widgetLoggerClimate, (uint64_t)sub_10002259C, a1);
}

uint64_t sub_100022604(uint64_t a1)
{
  return sub_10002262C(a1, static DataModel.widgetLoggerLights, 0x694C746567646957, 0xEC00000073746867);
}

uint64_t sub_10002262C(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;

  v7 = type metadata accessor for Logger(0);
  sub_100025544(v7, a2);
  sub_100003884(v7, (uint64_t)a2);
  return Logger.init(subsystem:category:)(0x6C7070612E6D6F63, 0xEE00656D6F482E65, a3, a4);
}

uint64_t DataModel.widgetLoggerLights.unsafeMutableAddressor()
{
  return sub_100020D08(&qword_1000816A0, (uint64_t)static DataModel.widgetLoggerLights, (uint64_t)sub_100022604);
}

uint64_t static DataModel.widgetLoggerLights.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1000224D0(&qword_1000816A0, (uint64_t)static DataModel.widgetLoggerLights, (uint64_t)sub_100022604, a1);
}

uint64_t static DataModel.noDataString.getter()
{
  return 0x9380E29380E2;
}

double *sub_10002273C(unint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  double *v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v1 = a1;
  if (a1 >> 62)
    goto LABEL_10;
  v2 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (!v2)
    return _swiftEmptyArrayStorage;
  while (1)
  {
    if (v2 <= 0)
    {
      v4 = _swiftEmptyArrayStorage;
    }
    else
    {
      v3 = sub_100003704(&qword_100081FF0);
      v4 = (double *)swift_allocObject(v3, 8 * v2 + 32, 7);
      v5 = j__malloc_size(v4);
      v6 = v5 - 32;
      if (v5 < 32)
        v6 = v5 - 25;
      *((_QWORD *)v4 + 2) = v2;
      *((_QWORD *)v4 + 3) = (2 * (v6 >> 3)) | 1;
    }
    swift_bridgeObjectRetain(v1);
    v7 = sub_10002419C((unint64_t)(v4 + 4), v2, v1);
    v1 = v8;
    swift_bridgeObjectRelease(v7);
    if (v1 == v2)
      break;
    __break(1u);
LABEL_10:
    if (v1 < 0)
      v9 = v1;
    else
      v9 = v1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v1);
    v2 = _CocoaArrayWrapper.endIndex.getter(v9);
    swift_bridgeObjectRelease(v1);
    if (!v2)
      return _swiftEmptyArrayStorage;
  }
  return v4;
}

double *sub_100022830(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v8;
  double *v9;
  size_t v10;
  unint64_t v11;
  unint64_t v12;
  double *result;

  v4 = a4 >> 1;
  v5 = (a4 >> 1) - a3;
  if (__OFSUB__(a4 >> 1, a3))
    goto LABEL_16;
  if (!v5)
    return _swiftEmptyArrayStorage;
  if (v5 > 0)
  {
    v8 = sub_100003704(&qword_100081C88);
    v9 = (double *)swift_allocObject(v8, 56 * v5 + 32, 7);
    v10 = j__malloc_size(v9);
    *((_QWORD *)v9 + 2) = v5;
    *((_QWORD *)v9 + 3) = 2 * ((uint64_t)(v10 - 32) / 56);
    if (v4 != a3)
      goto LABEL_5;
    goto LABEL_15;
  }
  v9 = _swiftEmptyArrayStorage;
  if (v4 == a3)
  {
LABEL_15:
    __break(1u);
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
LABEL_5:
  if (v5 < 0)
  {
LABEL_17:
    result = (double *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
    goto LABEL_18;
  }
  v11 = (unint64_t)(v9 + 4);
  v12 = a2 + 56 * a3;
  if (v12 >= (unint64_t)&v9[7 * v5 + 4] || v11 >= v12 + 56 * v5)
  {
    swift_arrayInitWithCopy(v11);
    return v9;
  }
  result = (double *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_18:
  __break(1u);
  return result;
}

uint64_t sub_1000229C0(uint64_t a1)
{
  return sub_100022B28(a1, (uint64_t (*)(uint64_t, _QWORD, uint64_t))sub_1000243B0);
}

uint64_t sub_1000229CC(uint64_t a1)
{
  char **v1;
  unint64_t v2;
  char *v3;
  int64_t v4;
  int64_t v5;
  char *isUniquelyReferenced_nonNull_native;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  int64_t v15;
  uint64_t result;
  char v17;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = *v1;
  v4 = *((_QWORD *)*v1 + 2);
  v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
    goto LABEL_21;
  }
  isUniquelyReferenced_nonNull_native = (char *)swift_isUniquelyReferenced_nonNull_native(*v1);
  if ((_DWORD)isUniquelyReferenced_nonNull_native && v5 <= *((_QWORD *)v3 + 3) >> 1)
  {
    v8 = *(_QWORD *)(a1 + 16);
    if (v8)
      goto LABEL_5;
LABEL_18:
    if (!v2)
      goto LABEL_19;
    goto LABEL_21;
  }
  if (v4 <= v5)
    v15 = v4 + v2;
  else
    v15 = v4;
  v3 = sub_10000A030(isUniquelyReferenced_nonNull_native, v15, 1, v3);
  v8 = *(_QWORD *)(a1 + 16);
  if (!v8)
    goto LABEL_18;
LABEL_5:
  v9 = *((_QWORD *)v3 + 2);
  if ((*((_QWORD *)v3 + 3) >> 1) - v9 < (uint64_t)v8)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v10 = (unint64_t)&v3[56 * v9 + 32];
  if (a1 + 32 < v10 + 56 * v8 && v10 < a1 + 32 + 56 * v8)
    goto LABEL_24;
  swift_arrayInitWithCopy(v10);
  if (v8 < v2)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  v12 = *((_QWORD *)v3 + 2);
  v13 = __OFADD__(v12, v8);
  v14 = v12 + v8;
  if (!v13)
  {
    *((_QWORD *)v3 + 2) = v14;
LABEL_19:
    result = swift_bridgeObjectRelease(a1);
    *v1 = v3;
    return result;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  v17 = 2;
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, v17, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_100022B28(uint64_t a1, uint64_t (*a2)(uint64_t, _QWORD, uint64_t))
{
  uint64_t *v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int isUniquelyReferenced_nonNull_bridgeObject;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  if ((unint64_t)a1 >> 62)
  {
    if (a1 < 0)
      v18 = a1;
    else
      v18 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v5 = _CocoaArrayWrapper.endIndex.getter(v18);
    swift_bridgeObjectRelease(a1);
  }
  else
  {
    v5 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  v6 = *v2;
  if (!((unint64_t)*v2 >> 62))
  {
    v7 = *(_QWORD *)((v6 & 0xFFFFFFFFFFFFF8) + 0x10);
    v8 = v7 + v5;
    if (!__OFADD__(v7, v5))
      goto LABEL_5;
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  if (v6 < 0)
    v19 = *v2;
  else
    v19 = v6 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(*v2);
  v7 = _CocoaArrayWrapper.endIndex.getter(v19);
  swift_bridgeObjectRelease(v6);
  v8 = v7 + v5;
  if (__OFADD__(v7, v5))
    goto LABEL_29;
LABEL_5:
  v6 = *v2;
  isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject(*v2);
  *v2 = v6;
  v7 = 0;
  if (isUniquelyReferenced_nonNull_bridgeObject && (v6 & 0x8000000000000000) == 0 && (v6 & 0x4000000000000000) == 0)
  {
    v10 = v6 & 0xFFFFFFFFFFFFFF8;
    if (v8 <= *(_QWORD *)((v6 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
      goto LABEL_15;
    v7 = 1;
  }
  if ((unint64_t)v6 >> 62)
    goto LABEL_31;
  v11 = *(_QWORD *)((v6 & 0xFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    if (v11 <= v8)
      v11 = v8;
    swift_bridgeObjectRetain(v6);
    v6 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v7, v11, 1, v6);
    swift_bridgeObjectRelease(*v2);
    *v2 = v6;
    v10 = v6 & 0xFFFFFFFFFFFFFF8;
LABEL_15:
    result = a2(v10 + 8 * *(_QWORD *)(v10 + 16) + 32, (*(_QWORD *)(v10 + 24) >> 1) - *(_QWORD *)(v10 + 16), a1);
    if (v13 >= v5)
      break;
LABEL_30:
    __break(1u);
LABEL_31:
    if (v6 < 0)
      v20 = v6;
    else
      v20 = v6 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v6);
    v11 = _CocoaArrayWrapper.endIndex.getter(v20);
    swift_bridgeObjectRelease(v6);
  }
  if (v13 < 1)
    goto LABEL_19;
  v14 = *(_QWORD *)((*v2 & 0xFFFFFFFFFFFFFF8) + 0x10);
  v15 = __OFADD__(v14, v13);
  v16 = v14 + v13;
  if (!v15)
  {
    *(_QWORD *)((*v2 & 0xFFFFFFFFFFFFFF8) + 0x10) = v16;
LABEL_19:
    v17 = swift_bridgeObjectRelease(result);
    return specialized Array._endMutation()(v17);
  }
  __break(1u);
  return result;
}

uint64_t sub_100022CE4(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  char **v4;
  unint64_t v5;
  uint64_t v6;
  char *v7;
  int64_t v8;
  int64_t v9;
  char *isUniquelyReferenced_nonNull_native;
  int64_t v14;
  int64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;
  uint64_t result;

  v5 = a4 >> 1;
  v6 = (a4 >> 1) - a3;
  if (__OFSUB__(a4 >> 1, a3))
  {
    __break(1u);
    goto LABEL_24;
  }
  v7 = *v4;
  v8 = *((_QWORD *)*v4 + 2);
  v9 = v8 + v6;
  if (__OFADD__(v8, v6))
  {
LABEL_24:
    __break(1u);
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }
  isUniquelyReferenced_nonNull_native = (char *)swift_isUniquelyReferenced_nonNull_native(*v4);
  if (!(_DWORD)isUniquelyReferenced_nonNull_native)
    goto LABEL_8;
  v14 = *((_QWORD *)v7 + 3) >> 1;
  if (v14 < v9)
    goto LABEL_8;
  if (v5 == a3)
  {
    while (v6 > 0)
    {
      __break(1u);
LABEL_8:
      if (v8 <= v9)
        v15 = v8 + v6;
      else
        v15 = v8;
      isUniquelyReferenced_nonNull_native = sub_10000A030(isUniquelyReferenced_nonNull_native, v15, 1, v7);
      v7 = isUniquelyReferenced_nonNull_native;
      v14 = *((_QWORD *)isUniquelyReferenced_nonNull_native + 3) >> 1;
      if (v5 != a3)
        goto LABEL_12;
    }
    goto LABEL_22;
  }
LABEL_12:
  v16 = *((_QWORD *)v7 + 2);
  if (v14 - v16 < v6)
    goto LABEL_25;
  if (v6 < 0)
  {
LABEL_27:
    result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
    goto LABEL_28;
  }
  v17 = (unint64_t)&v7[56 * v16 + 32];
  v18 = a2 + 56 * a3;
  if (v18 >= v17 + 56 * v6 || v17 >= v18 + 56 * v6)
  {
    swift_arrayInitWithCopy(v17);
    if (!v6)
    {
LABEL_22:
      result = swift_unknownObjectRelease(a1);
      *v4 = v7;
      return result;
    }
    v20 = *((_QWORD *)v7 + 2);
    v21 = __OFADD__(v20, v6);
    v22 = v20 + v6;
    if (!v21)
    {
      *((_QWORD *)v7 + 2) = v22;
      goto LABEL_22;
    }
    goto LABEL_26;
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_28:
  __break(1u);
  return result;
}

uint64_t sub_100022EA8(uint64_t *a1)
{
  uint64_t v2;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7[2];

  v2 = *a1;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*a1);
  *a1 = v2;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    v2 = sub_1000247D8(v2);
    *a1 = v2;
  }
  v4 = *(_QWORD *)(v2 + 16);
  v7[0] = v2 + 32;
  v7[1] = v4;
  sub_100022F20(v7);
  return specialized ContiguousArray._endMutation()(v5);
}

void sub_100022F20(uint64_t *a1)
{
  uint64_t v1;
  Swift::Int v3;
  Swift::Int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  double *v9;
  Swift::Int v10;
  uint64_t v11;
  __objc2_prot_list *v12;
  Swift::Int v13;
  unint64_t v14;
  Swift::Int v15;
  void *v16;
  id v17;
  id v18;
  unsigned int v19;
  unsigned int v20;
  Swift::Int v21;
  id v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  id v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  Swift::Int v31;
  unsigned int v32;
  void *v33;
  id v34;
  id v35;
  unsigned int v36;
  id v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  id v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char v46;
  char v47;
  uint64_t *v48;
  Swift::Int v49;
  Swift::Int v50;
  uint64_t *v51;
  uint64_t v52;
  Swift::Int v53;
  uint64_t v54;
  void *v55;
  Swift::Int v56;
  uint64_t v57;
  void *v58;
  id v59;
  id v60;
  unsigned __int8 v61;
  id v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  id v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  char v71;
  void *v72;
  unint64_t v73;
  unint64_t v74;
  double *v75;
  double *v76;
  unint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  char v81;
  double *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  BOOL v88;
  unint64_t v89;
  double *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  double *v95;
  uint64_t v96;
  uint64_t v97;
  BOOL v98;
  uint64_t v99;
  char v100;
  double *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  BOOL v105;
  uint64_t v106;
  uint64_t v107;
  double *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  double *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  unint64_t v116;
  double *v117;
  uint64_t v118;
  double *v119;
  uint64_t v120;
  double *v121;
  unint64_t v122;
  double *v123;
  double v124;
  uint64_t v125;
  unint64_t v126;
  uint64_t v127;
  unint64_t v128;
  double *v129;
  double v130;
  double v131;
  double *v132;
  double *v133;
  double *v134;
  unint64_t v135;
  double *v136;
  uint64_t v137;
  uint64_t *v138;
  uint64_t v139;
  Swift::Int v140;
  double *v141;
  double *v142;
  Swift::Int v143;
  Swift::Int v144;
  Swift::Int v145;
  unsigned int v146;
  uint64_t v147;
  void **v148;
  uint64_t v149;
  Swift::Int v150;
  Swift::Int v151;
  Swift::Int v152;
  Swift::Int v153;
  uint64_t v154;

  v3 = a1[1];
  v4 = _minimumMergeRunLength(_:)(v3);
  if (v4 >= v3)
  {
    if (v3 < 0)
      goto LABEL_160;
    if (v3)
      sub_100023938(0, v3, 1, a1);
    return;
  }
  if (v3 >= 0)
    v5 = v3;
  else
    v5 = v3 + 1;
  if (v3 < -1)
    goto LABEL_168;
  v140 = v4;
  v145 = v3;
  v138 = a1;
  if (v3 < 2)
  {
    v9 = _swiftEmptyArrayStorage;
    v154 = (uint64_t)_swiftEmptyArrayStorage;
    v148 = (void **)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 32);
    if (v3 != 1)
    {
      v14 = *(_QWORD *)&_swiftEmptyArrayStorage[2];
LABEL_123:
      if (v14 >= 2)
      {
        v127 = *v138;
        do
        {
          v128 = v14 - 2;
          if (v14 < 2)
            goto LABEL_155;
          if (!v127)
            goto LABEL_167;
          v117 = v9;
          v129 = v9 + 4;
          v130 = v9[2 * v128 + 4];
          v131 = v9[2 * v14 + 3];
          sub_100023B0C((void **)(v127 + 8 * *(_QWORD *)&v130), (id *)(v127 + 8 * *(_QWORD *)&v129[2 * v14 - 2]), v127 + 8 * *(_QWORD *)&v131, v148);
          if (v1)
            goto LABEL_135;
          if (*(uint64_t *)&v131 < *(uint64_t *)&v130)
            goto LABEL_156;
          if ((swift_isUniquelyReferenced_nonNull_native(v117) & 1) == 0)
            v117 = sub_100024188((uint64_t)v117);
          if (v128 >= *((_QWORD *)v117 + 2))
            goto LABEL_157;
          v132 = v117;
          v133 = v117 + 4;
          v134 = &v117[2 * v128 + 4];
          *v134 = v130;
          v134[1] = v131;
          v135 = *((_QWORD *)v117 + 2);
          if (v14 > v135)
            goto LABEL_158;
          v9 = v132;
          memmove(&v133[2 * v14 - 2], &v133[2 * v14], 16 * (v135 - v14));
          *((_QWORD *)v9 + 2) = v135 - 1;
          v14 = v135 - 1;
        }
        while (v135 > 2);
      }
      v136 = v9;
LABEL_137:
      v137 = swift_bridgeObjectRelease(v136);
      *(_QWORD *)((v154 & 0xFFFFFFFFFFFFF8) + 0x10) = 0;
      specialized Array._endMutation()(v137);
      swift_bridgeObjectRelease(v154);
      return;
    }
  }
  else
  {
    v6 = v5 >> 1;
    v7 = sub_1000038AC(0, (unint64_t *)&qword_100081F38, HMHome_ptr);
    v8 = static Array._allocateBufferUninitialized(minimumCapacity:)(v6, v7);
    *(_QWORD *)((v8 & 0xFFFFFFFFFFFFFF8) + 0x10) = v6;
    v148 = (void **)((v8 & 0xFFFFFFFFFFFFFF8) + 32);
    v154 = v8;
  }
  v10 = 0;
  v11 = *a1;
  v139 = *a1 - 8;
  v9 = _swiftEmptyArrayStorage;
  v12 = &DataModel;
  v13 = v145;
  v149 = *a1;
  while (1)
  {
    v15 = v10++;
    if (v10 >= v13)
      goto LABEL_50;
    v141 = v9;
    v16 = *(void **)(v11 + 8 * v15);
    v17 = *(id *)(v11 + 8 * v10);
    v18 = v16;
    v19 = objc_msgSend(v17, (SEL)v12[393].count);
    if (v19 == objc_msgSend(v18, (SEL)v12[393].count))
    {
      v150 = v10;
      v22 = objc_msgSend(v17, "name");
      v23 = static String._unconditionallyBridgeFromObjectiveC(_:)(v22);
      v25 = v24;

      v26 = objc_msgSend(v18, "name");
      v27 = static String._unconditionallyBridgeFromObjectiveC(_:)(v26);
      v29 = v28;

      if (v23 == v27 && v25 == v29)
      {
        v20 = 0;
        v29 = v25;
      }
      else
      {
        v20 = _stringCompareWithSmolCheck(_:_:expecting:)(v23, v25, v27, v29, 1);
      }
      swift_bridgeObjectRelease(v25);
      swift_bridgeObjectRelease(v29);

      v21 = v15 + 2;
      v12 = &DataModel;
      v10 = v150;
      if (v15 + 2 < v145)
      {
LABEL_27:
        v31 = v21;
        v11 = v149;
        v146 = v20;
        do
        {
          v21 = v31;
          v33 = *(void **)(v11 + 8 * v10);
          v34 = *(id *)(v11 + 8 * v31);
          v35 = v33;
          v36 = objc_msgSend(v34, (SEL)v12[393].count);
          if (v36 == objc_msgSend(v35, (SEL)v12[393].count))
          {
            v151 = v21;
            v37 = objc_msgSend(v34, "name");
            v38 = static String._unconditionallyBridgeFromObjectiveC(_:)(v37);
            v40 = v39;

            v41 = objc_msgSend(v35, "name");
            v42 = static String._unconditionallyBridgeFromObjectiveC(_:)(v41);
            v44 = v43;

            if (v38 == v42 && v40 == v44)
            {

              swift_bridgeObjectRelease_n(v40, 2);
              v12 = &DataModel;
              v21 = v151;
              v20 = v146;
              if ((v146 & 1) != 0)
              {
                v9 = v141;
                v11 = v149;
                goto LABEL_41;
              }
            }
            else
            {
              v46 = _stringCompareWithSmolCheck(_:_:expecting:)(v38, v40, v42, v44, 1);

              swift_bridgeObjectRelease(v40);
              swift_bridgeObjectRelease(v44);
              v47 = v146 ^ v46;
              v20 = v146;
              v12 = &DataModel;
              v21 = v151;
              if ((v47 & 1) != 0)
                goto LABEL_19;
            }
          }
          else
          {
            v32 = objc_msgSend(v34, (SEL)v12[393].count);

            if (((v20 ^ v32) & 1) != 0)
              goto LABEL_19;
          }
          v31 = v21 + 1;
          v10 = v21;
          v11 = v149;
        }
        while (v21 + 1 < v145);
        ++v21;
        goto LABEL_40;
      }
    }
    else
    {
      v20 = objc_msgSend(v17, (SEL)v12[393].count);

      v21 = v15 + 2;
      if (v15 + 2 < v145)
        goto LABEL_27;
    }
    LOBYTE(v146) = v20;
LABEL_19:
    v11 = v149;
LABEL_40:
    v10 = v21;
    v9 = v141;
    if ((v146 & 1) != 0)
    {
LABEL_41:
      if (v21 < v15)
        goto LABEL_161;
      if (v15 < v21)
      {
        v48 = (uint64_t *)(v139 + 8 * v21);
        v49 = v21;
        v50 = v15;
        v51 = (uint64_t *)(v11 + 8 * v15);
        do
        {
          if (v50 != --v49)
          {
            if (!v11)
              goto LABEL_166;
            v52 = *v51;
            *v51 = *v48;
            *v48 = v52;
          }
          ++v50;
          --v48;
          ++v51;
        }
        while (v50 < v49);
      }
      v10 = v21;
    }
LABEL_50:
    if (v10 >= v145)
      goto LABEL_74;
    if (__OFSUB__(v10, v15))
      goto LABEL_159;
    if (v10 - v15 >= v140)
      goto LABEL_74;
    if (__OFADD__(v15, v140))
      goto LABEL_162;
    v53 = v145;
    if (v15 + v140 < v145)
      v53 = v15 + v140;
    if (v53 < v15)
      break;
    if (v10 == v53)
      goto LABEL_74;
    v142 = v9;
    v143 = v53;
    v54 = v139 + 8 * v10;
    v144 = v15;
    while (2)
    {
      v55 = *(void **)(v11 + 8 * v10);
      v56 = v15;
      v147 = v54;
      v57 = v54;
      v152 = v10;
      while (1)
      {
        v58 = *(void **)v57;
        v59 = v55;
        v60 = v58;
        LODWORD(v58) = objc_msgSend(v59, (SEL)v12[393].count);
        if ((_DWORD)v58 == objc_msgSend(v60, (SEL)v12[393].count))
          break;
        v61 = objc_msgSend(v59, (SEL)v12[393].count);

        if ((v61 & 1) == 0)
          goto LABEL_60;
LABEL_70:
        if (!v11)
          goto LABEL_164;
        v72 = *(void **)v57;
        v55 = *(void **)(v57 + 8);
        *(_QWORD *)v57 = v55;
        *(_QWORD *)(v57 + 8) = v72;
        v57 -= 8;
        if (v10 == ++v56)
          goto LABEL_60;
      }
      v62 = objc_msgSend(v59, "name");
      v63 = static String._unconditionallyBridgeFromObjectiveC(_:)(v62);
      v65 = v64;

      v66 = objc_msgSend(v60, "name");
      v67 = static String._unconditionallyBridgeFromObjectiveC(_:)(v66);
      v69 = v68;

      if (v63 != v67 || v65 != v69)
      {
        v71 = _stringCompareWithSmolCheck(_:_:expecting:)(v63, v65, v67, v69, 1);

        swift_bridgeObjectRelease(v65);
        swift_bridgeObjectRelease(v69);
        v11 = v149;
        v10 = v152;
        v12 = &DataModel;
        if ((v71 & 1) == 0)
          goto LABEL_60;
        goto LABEL_70;
      }

      swift_bridgeObjectRelease_n(v65, 2);
      v11 = v149;
      v10 = v152;
      v12 = &DataModel;
LABEL_60:
      ++v10;
      v54 = v147 + 8;
      v15 = v144;
      if (v10 != v143)
        continue;
      break;
    }
    v10 = v143;
    v9 = v142;
LABEL_74:
    if (v10 < v15)
      goto LABEL_154;
    if ((swift_isUniquelyReferenced_nonNull_native(v9) & 1) == 0)
      v9 = sub_100023FE8(0, *((_QWORD *)v9 + 2) + 1, 1, (uint64_t)v9);
    v74 = *((_QWORD *)v9 + 2);
    v73 = *((_QWORD *)v9 + 3);
    v14 = v74 + 1;
    if (v74 >= v73 >> 1)
      v9 = sub_100023FE8((double *)(v73 > 1), v74 + 1, 1, (uint64_t)v9);
    *((_QWORD *)v9 + 2) = v14;
    v75 = v9 + 4;
    v76 = &v9[2 * v74 + 4];
    *(_QWORD *)v76 = v15;
    *((_QWORD *)v76 + 1) = v10;
    if (v74)
    {
      v153 = v10;
      while (1)
      {
        v77 = v14 - 1;
        if (v14 >= 4)
        {
          v82 = &v75[2 * v14];
          v83 = *((_QWORD *)v82 - 8);
          v84 = *((_QWORD *)v82 - 7);
          v88 = __OFSUB__(v84, v83);
          v85 = v84 - v83;
          if (v88)
            goto LABEL_143;
          v87 = *((_QWORD *)v82 - 6);
          v86 = *((_QWORD *)v82 - 5);
          v88 = __OFSUB__(v86, v87);
          v80 = v86 - v87;
          v81 = v88;
          if (v88)
            goto LABEL_144;
          v89 = v14 - 2;
          v90 = &v75[2 * v14 - 4];
          v92 = *(_QWORD *)v90;
          v91 = *((_QWORD *)v90 + 1);
          v88 = __OFSUB__(v91, v92);
          v93 = v91 - v92;
          if (v88)
            goto LABEL_146;
          v88 = __OFADD__(v80, v93);
          v94 = v80 + v93;
          if (v88)
            goto LABEL_149;
          if (v94 >= v85)
          {
            v112 = &v75[2 * v77];
            v114 = *(_QWORD *)v112;
            v113 = *((_QWORD *)v112 + 1);
            v88 = __OFSUB__(v113, v114);
            v115 = v113 - v114;
            if (v88)
              goto LABEL_153;
            v105 = v80 < v115;
            goto LABEL_112;
          }
        }
        else
        {
          if (v14 != 3)
          {
            v106 = *((_QWORD *)v9 + 4);
            v107 = *((_QWORD *)v9 + 5);
            v88 = __OFSUB__(v107, v106);
            v99 = v107 - v106;
            v100 = v88;
            goto LABEL_106;
          }
          v79 = *((_QWORD *)v9 + 4);
          v78 = *((_QWORD *)v9 + 5);
          v88 = __OFSUB__(v78, v79);
          v80 = v78 - v79;
          v81 = v88;
        }
        if ((v81 & 1) != 0)
          goto LABEL_145;
        v89 = v14 - 2;
        v95 = &v75[2 * v14 - 4];
        v97 = *(_QWORD *)v95;
        v96 = *((_QWORD *)v95 + 1);
        v98 = __OFSUB__(v96, v97);
        v99 = v96 - v97;
        v100 = v98;
        if (v98)
          goto LABEL_148;
        v101 = &v75[2 * v77];
        v103 = *(_QWORD *)v101;
        v102 = *((_QWORD *)v101 + 1);
        v88 = __OFSUB__(v102, v103);
        v104 = v102 - v103;
        if (v88)
          goto LABEL_151;
        if (__OFADD__(v99, v104))
          goto LABEL_152;
        if (v99 + v104 >= v80)
        {
          v105 = v80 < v104;
LABEL_112:
          if (v105)
            v77 = v89;
          goto LABEL_114;
        }
LABEL_106:
        if ((v100 & 1) != 0)
          goto LABEL_147;
        v108 = &v75[2 * v77];
        v110 = *(_QWORD *)v108;
        v109 = *((_QWORD *)v108 + 1);
        v88 = __OFSUB__(v109, v110);
        v111 = v109 - v110;
        if (v88)
          goto LABEL_150;
        if (v111 < v99)
          goto LABEL_14;
LABEL_114:
        v116 = v77 - 1;
        if (v77 - 1 >= v14)
        {
          __break(1u);
LABEL_140:
          __break(1u);
LABEL_141:
          __break(1u);
LABEL_142:
          __break(1u);
LABEL_143:
          __break(1u);
LABEL_144:
          __break(1u);
LABEL_145:
          __break(1u);
LABEL_146:
          __break(1u);
LABEL_147:
          __break(1u);
LABEL_148:
          __break(1u);
LABEL_149:
          __break(1u);
LABEL_150:
          __break(1u);
LABEL_151:
          __break(1u);
LABEL_152:
          __break(1u);
LABEL_153:
          __break(1u);
LABEL_154:
          __break(1u);
LABEL_155:
          __break(1u);
LABEL_156:
          __break(1u);
LABEL_157:
          __break(1u);
LABEL_158:
          __break(1u);
LABEL_159:
          __break(1u);
LABEL_160:
          __break(1u);
LABEL_161:
          __break(1u);
LABEL_162:
          __break(1u);
          goto LABEL_163;
        }
        if (!v11)
          goto LABEL_165;
        v117 = v9;
        v118 = v11;
        v119 = &v75[2 * v116];
        v120 = *(_QWORD *)v119;
        v121 = v75;
        v122 = v77;
        v123 = &v75[2 * v77];
        v124 = v123[1];
        v125 = v118;
        sub_100023B0C((void **)(v118 + 8 * *(_QWORD *)v119), (id *)(v118 + 8 * *(_QWORD *)v123), v118 + 8 * *(_QWORD *)&v124, v148);
        if (v1)
        {
LABEL_135:
          v136 = v117;
          goto LABEL_137;
        }
        if (*(uint64_t *)&v124 < v120)
          goto LABEL_140;
        if (v122 > *((_QWORD *)v117 + 2))
          goto LABEL_141;
        *(_QWORD *)v119 = v120;
        v121[2 * v116 + 1] = v124;
        v126 = *((_QWORD *)v117 + 2);
        if (v122 >= v126)
          goto LABEL_142;
        v9 = v117;
        v14 = v126 - 1;
        memmove(v123, v123 + 2, 16 * (v126 - 1 - v122));
        v75 = v121;
        *((_QWORD *)v117 + 2) = v126 - 1;
        v12 = &DataModel;
        v10 = v153;
        v11 = v125;
        if (v126 <= 2)
          goto LABEL_14;
      }
    }
    v14 = 1;
LABEL_14:
    v13 = v145;
    if (v10 >= v145)
      goto LABEL_123;
  }
LABEL_163:
  __break(1u);
LABEL_164:
  __break(1u);
LABEL_165:
  __break(1u);
LABEL_166:
  __break(1u);
LABEL_167:
  __break(1u);
LABEL_168:
  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Can't construct Array with count < 0", 36, 2, "Swift/Array.swift", 17);
  __break(1u);
}

void sub_100023938(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __objc2_prot_list *v7;
  void *v8;
  uint64_t v9;
  void *v10;
  id v11;
  id v12;
  unsigned __int8 v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v23;
  void *v24;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  if (a3 != a2)
  {
    v4 = a3;
    v5 = *a4;
    v6 = *a4 + 8 * a3 - 8;
    v7 = &DataModel;
    v28 = *a4;
LABEL_6:
    v8 = *(void **)(v5 + 8 * v4);
    v9 = a1;
    v27 = v6;
    v29 = v4;
    while (1)
    {
      v10 = *(void **)v6;
      v11 = v8;
      v12 = v10;
      LODWORD(v10) = objc_msgSend(v11, (SEL)v7[393].count);
      if ((_DWORD)v10 == objc_msgSend(v12, (SEL)v7[393].count))
      {
        v14 = objc_msgSend(v11, "name");
        v15 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        v17 = v16;

        v18 = objc_msgSend(v12, "name");
        v19 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        v21 = v20;

        if (v15 == v19 && v17 == v21)
        {

          swift_bridgeObjectRelease_n(v17, 2);
          v4 = v29;
          v5 = v28;
          v7 = &DataModel;
LABEL_5:
          ++v4;
          v6 = v27 + 8;
          if (v4 == a2)
            return;
          goto LABEL_6;
        }
        v23 = _stringCompareWithSmolCheck(_:_:expecting:)(v15, v17, v19, v21, 1);

        swift_bridgeObjectRelease(v17);
        swift_bridgeObjectRelease(v21);
        v4 = v29;
        v5 = v28;
        v7 = &DataModel;
        if ((v23 & 1) == 0)
          goto LABEL_5;
      }
      else
      {
        v13 = objc_msgSend(v11, (SEL)v7[393].count);

        if ((v13 & 1) == 0)
          goto LABEL_5;
      }
      if (!v5)
        break;
      v24 = *(void **)v6;
      v8 = *(void **)(v6 + 8);
      *(_QWORD *)v6 = v8;
      *(_QWORD *)(v6 + 8) = v24;
      v6 -= 8;
      if (v4 == ++v9)
        goto LABEL_5;
    }
    __break(1u);
  }
}

uint64_t sub_100023B0C(void **__src, id *a2, unint64_t a3, void **__dst)
{
  void **v4;
  id *v5;
  void **v6;
  int64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void **v13;
  __objc2_prot_list *v14;
  void *v15;
  id v16;
  id v17;
  unsigned __int8 v18;
  id *v19;
  void **v20;
  void **v21;
  id v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  id v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v31;
  void **v32;
  void **v33;
  __objc2_prot_list *v34;
  id *v35;
  void *v36;
  void *v37;
  void *v38;
  id v39;
  id v40;
  unsigned int v41;
  unsigned __int8 v42;
  id v43;
  uint64_t v44;
  uint64_t v45;
  id v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char v51;
  uint64_t result;
  void **v53;
  void **v54;
  uint64_t v55;
  void **v56;
  id *v57;
  void **v59;
  id *v60;
  id *v61;
  void **v62;
  void **v63;
  id *v64;

  v4 = __dst;
  v5 = a2;
  v6 = __src;
  v7 = (char *)a2 - (char *)__src;
  v8 = (char *)a2 - (char *)__src + 7;
  if ((char *)a2 - (char *)__src >= 0)
    v8 = (char *)a2 - (char *)__src;
  v9 = v8 >> 3;
  v10 = a3 - (_QWORD)a2;
  v11 = a3 - (_QWORD)a2 + 7;
  if ((uint64_t)(a3 - (_QWORD)a2) >= 0)
    v11 = a3 - (_QWORD)a2;
  v12 = v11 >> 3;
  v64 = __src;
  v63 = __dst;
  if (v9 >= v11 >> 3)
  {
    if (v10 < -7)
      goto LABEL_61;
    if (__dst != a2 || &a2[v12] <= __dst)
      memmove(__dst, a2, 8 * v12);
    v32 = &v4[v12];
    v62 = v32;
    v64 = v5;
    if (v6 >= v5 || v10 < 8)
    {
LABEL_60:
      sub_1000240E0((void **)&v64, (const void **)&v63, &v62);
      return 1;
    }
    v33 = (void **)(a3 - 8);
    v34 = &DataModel;
    v35 = v5;
    v53 = v6;
    v54 = v4;
    while (1)
    {
      v59 = v32;
      v61 = v5;
      v57 = v33 + 1;
      v37 = *--v32;
      v36 = v37;
      v38 = *--v35;
      v39 = v36;
      v40 = v38;
      v41 = objc_msgSend(v39, (SEL)v34[393].count);
      if (v41 == objc_msgSend(v40, (SEL)v34[393].count))
      {
        v43 = objc_msgSend(v39, "name");
        v44 = static String._unconditionallyBridgeFromObjectiveC(_:)(v43);
        v55 = v45;

        v46 = objc_msgSend(v40, "name");
        v47 = static String._unconditionallyBridgeFromObjectiveC(_:)(v46);
        v49 = v48;

        if (v44 == v47 && v55 == v49)
        {

          swift_bridgeObjectRelease_n(v55, 2);
          v6 = v53;
          v4 = v54;
          v34 = &DataModel;
        }
        else
        {
          v51 = _stringCompareWithSmolCheck(_:_:expecting:)(v44, v55, v47, v49, 1);

          swift_bridgeObjectRelease(v55);
          swift_bridgeObjectRelease(v49);
          v6 = v53;
          v4 = v54;
          v34 = &DataModel;
          if ((v51 & 1) != 0)
          {
LABEL_47:
            v32 = v59;
            if (v57 != v61 || v33 >= v61)
              *v33 = *v35;
            v64 = v35;
            goto LABEL_56;
          }
        }
      }
      else
      {
        v42 = objc_msgSend(v39, (SEL)v34[393].count);

        if ((v42 & 1) != 0)
          goto LABEL_47;
      }
      v62 = v32;
      v35 = v61;
      if (v57 < v59 || v33 >= v59 || v57 != v59)
        *v33 = *v32;
LABEL_56:
      if (v35 > v6)
      {
        --v33;
        v5 = v35;
        if (v32 > v4)
          continue;
      }
      goto LABEL_60;
    }
  }
  if (v7 >= -7)
  {
    if (__dst != __src || &__src[v9] <= __dst)
      memmove(__dst, __src, 8 * v9);
    v13 = &v4[v9];
    v62 = v13;
    if ((unint64_t)v5 < a3 && v7 >= 8)
    {
      v14 = &DataModel;
      v56 = v13;
      while (1)
      {
        v15 = *v4;
        v16 = *v5;
        v17 = v15;
        LODWORD(v15) = objc_msgSend(v16, (SEL)v14[393].count);
        if ((_DWORD)v15 == objc_msgSend(v17, (SEL)v14[393].count))
        {
          v60 = v5;
          v20 = v6;
          v21 = v4;
          v22 = objc_msgSend(v16, "name");
          v23 = static String._unconditionallyBridgeFromObjectiveC(_:)(v22);
          v25 = v24;

          v26 = objc_msgSend(v17, "name");
          v27 = static String._unconditionallyBridgeFromObjectiveC(_:)(v26);
          v29 = v28;

          if (v23 == v27 && v25 == v29)
          {

            swift_bridgeObjectRelease_n(v25, 2);
            v4 = v21;
            v6 = v20;
            v5 = v60;
            v13 = v56;
            v14 = &DataModel;
            if (v6 == v4)
              goto LABEL_17;
LABEL_16:
            *v6 = *v4;
            goto LABEL_17;
          }
          v31 = _stringCompareWithSmolCheck(_:_:expecting:)(v23, v25, v27, v29, 1);

          swift_bridgeObjectRelease(v25);
          swift_bridgeObjectRelease(v29);
          v4 = v21;
          v6 = v20;
          v5 = v60;
          v13 = v56;
          v14 = &DataModel;
          if ((v31 & 1) != 0)
          {
LABEL_23:
            v19 = v5 + 1;
            if (v6 < v5 || v6 >= v19 || v6 != v5)
              *v6 = *v5;
            goto LABEL_27;
          }
        }
        else
        {
          v18 = objc_msgSend(v16, (SEL)v14[393].count);

          if ((v18 & 1) != 0)
            goto LABEL_23;
        }
        if (v6 != v4)
          goto LABEL_16;
LABEL_17:
        v63 = ++v4;
        v19 = v5;
LABEL_27:
        ++v6;
        if (v4 < v13)
        {
          v5 = v19;
          if ((unint64_t)v19 < a3)
            continue;
        }
        v64 = v6;
        goto LABEL_60;
      }
    }
    goto LABEL_60;
  }
LABEL_61:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, 2, 1046, 0);
  __break(1u);
  return result;
}

double *sub_100023FE8(double *result, int64_t a2, char a3, uint64_t a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  double *v11;
  int64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *(_QWORD *)(a4 + 24);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *(_QWORD *)(a4 + 16);
  if (v7 <= v8)
    v9 = *(_QWORD *)(a4 + 16);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_100003704(&qword_100082008);
    v11 = (double *)swift_allocObject(v10, 16 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 17;
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * (v13 >> 4);
  }
  else
  {
    v11 = _swiftEmptyArrayStorage;
  }
  v14 = (char *)(v11 + 4);
  v15 = (char *)(a4 + 32);
  if ((v5 & 1) != 0)
  {
    if (v11 != (double *)a4 || v14 >= &v15[16 * v8])
      memmove(v14, v15, 16 * v8);
    *(_QWORD *)(a4 + 16) = 0;
  }
  else
  {
    memcpy(v14, v15, 16 * v8);
  }
  swift_bridgeObjectRelease(a4);
  return v11;
}

char *sub_1000240E0(void **a1, const void **a2, _QWORD *a3)
{
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *result;
  uint64_t v7;
  char v9;

  v3 = (char *)*a2;
  v4 = *a3 - (_QWORD)v3;
  v5 = v4 + 7;
  if (v4 >= 0)
    v5 = *a3 - (_QWORD)v3;
  if (v4 <= -8)
  {
    v9 = 2;
    result = (char *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, v9, 1046, 0);
    __break(1u);
  }
  else
  {
    result = (char *)*a1;
    v7 = v5 >> 3;
    if (result != v3 || result >= &v3[8 * v7])
      return (char *)memmove(result, v3, 8 * v7);
  }
  return result;
}

double *sub_100024188(uint64_t a1)
{
  return sub_100023FE8(0, *(_QWORD *)(a1 + 16), 0, a1);
}

uint64_t sub_10002419C(unint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t i;
  void (*v13)(_QWORD *);
  id *v14;
  id v15;
  uint64_t v16;
  uint64_t result;
  uint64_t (*v18[4])();

  v6 = (unint64_t)a3 >> 62;
  if ((unint64_t)a3 >> 62)
  {
    if (a3 < 0)
      v16 = a3;
    else
      v16 = a3 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a3);
    v7 = _CocoaArrayWrapper.endIndex.getter(v16);
    swift_bridgeObjectRelease(a3);
    if (!v7)
      return a3;
  }
  else
  {
    v7 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (!v7)
      return a3;
  }
  if (!a1)
    goto LABEL_25;
  v8 = a3 & 0xFFFFFFFFFFFFFF8;
  if (v6)
  {
    if (a3 < 0)
      v10 = a3;
    else
      v10 = a3 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a3);
    v11 = _CocoaArrayWrapper.endIndex.getter(v10);
    swift_bridgeObjectRelease(a3);
    if (v11 <= a2)
    {
      if (v7 >= 1)
      {
        sub_100010FCC(&qword_100082000, &qword_100081FF8);
        swift_bridgeObjectRetain(a3);
        for (i = 0; i != v7; ++i)
        {
          sub_100003704(&qword_100081FF8);
          v13 = sub_10001F4B4(v18, i, a3);
          v15 = *v14;
          ((void (*)(uint64_t (**)(), _QWORD))v13)(v18, 0);
          *(_QWORD *)(a1 + 8 * i) = v15;
        }
        swift_bridgeObjectRelease(a3);
        return a3;
      }
      goto LABEL_24;
    }
LABEL_23:
    __break(1u);
LABEL_24:
    __break(1u);
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  v9 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (v9 > a2)
  {
    __break(1u);
    goto LABEL_23;
  }
  if (v8 + 32 >= a1 + 8 * v9 || v8 + 32 + 8 * v9 <= a1)
  {
    sub_1000038AC(0, (unint64_t *)&qword_100081F38, HMHome_ptr);
    swift_arrayInitWithCopy(a1);
    return a3;
  }
LABEL_26:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_1000243B0(unint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t i;
  void (*v13)(_QWORD *);
  id *v14;
  id v15;
  uint64_t v16;
  uint64_t result;
  uint64_t (*v18[4])();

  v6 = (unint64_t)a3 >> 62;
  if ((unint64_t)a3 >> 62)
  {
    if (a3 < 0)
      v16 = a3;
    else
      v16 = a3 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a3);
    v7 = _CocoaArrayWrapper.endIndex.getter(v16);
    swift_bridgeObjectRelease(a3);
    if (!v7)
      return a3;
  }
  else
  {
    v7 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (!v7)
      return a3;
  }
  if (!a1)
    goto LABEL_25;
  v8 = a3 & 0xFFFFFFFFFFFFFF8;
  if (v6)
  {
    if (a3 < 0)
      v10 = a3;
    else
      v10 = a3 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a3);
    v11 = _CocoaArrayWrapper.endIndex.getter(v10);
    swift_bridgeObjectRelease(a3);
    if (v11 <= a2)
    {
      if (v7 >= 1)
      {
        sub_100010FCC((unint64_t *)&unk_100082020, &qword_100082018);
        swift_bridgeObjectRetain(a3);
        for (i = 0; i != v7; ++i)
        {
          sub_100003704(&qword_100082018);
          v13 = sub_10001F4B4(v18, i, a3);
          v15 = *v14;
          ((void (*)(uint64_t (**)(), _QWORD))v13)(v18, 0);
          *(_QWORD *)(a1 + 8 * i) = v15;
        }
        swift_bridgeObjectRelease(a3);
        return a3;
      }
      goto LABEL_24;
    }
LABEL_23:
    __break(1u);
LABEL_24:
    __break(1u);
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  v9 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (v9 > a2)
  {
    __break(1u);
    goto LABEL_23;
  }
  if (v8 + 32 >= a1 + 8 * v9 || v8 + 32 + 8 * v9 <= a1)
  {
    sub_1000038AC(0, (unint64_t *)&qword_100082010, HMCharacteristic_ptr);
    swift_arrayInitWithCopy(a1);
    return a3;
  }
LABEL_26:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_1000245C4(unint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t i;
  void (*v13)(_QWORD *);
  id *v14;
  id v15;
  uint64_t v16;
  uint64_t result;
  void (*v18[4])(id *);

  v6 = (unint64_t)a3 >> 62;
  if ((unint64_t)a3 >> 62)
  {
    if (a3 < 0)
      v16 = a3;
    else
      v16 = a3 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a3);
    v7 = _CocoaArrayWrapper.endIndex.getter(v16);
    swift_bridgeObjectRelease(a3);
    if (!v7)
      return a3;
  }
  else
  {
    v7 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (!v7)
      return a3;
  }
  if (!a1)
    goto LABEL_25;
  v8 = a3 & 0xFFFFFFFFFFFFFF8;
  if (v6)
  {
    if (a3 < 0)
      v10 = a3;
    else
      v10 = a3 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a3);
    v11 = _CocoaArrayWrapper.endIndex.getter(v10);
    swift_bridgeObjectRelease(a3);
    if (v11 <= a2)
    {
      if (v7 >= 1)
      {
        sub_100010FCC(&qword_100081FE8, &qword_100081FE0);
        swift_bridgeObjectRetain(a3);
        for (i = 0; i != v7; ++i)
        {
          sub_100003704(&qword_100081FE0);
          v13 = sub_10001F50C(v18, i, a3);
          v15 = *v14;
          ((void (*)(void (**)(id *), _QWORD))v13)(v18, 0);
          *(_QWORD *)(a1 + 8 * i) = v15;
        }
        swift_bridgeObjectRelease(a3);
        return a3;
      }
      goto LABEL_24;
    }
LABEL_23:
    __break(1u);
LABEL_24:
    __break(1u);
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  v9 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (v9 > a2)
  {
    __break(1u);
    goto LABEL_23;
  }
  if (v8 + 32 >= a1 + 8 * v9 || v8 + 32 + 8 * v9 <= a1)
  {
    sub_1000038AC(0, (unint64_t *)&qword_100081F40, HMAccessory_ptr);
    swift_arrayInitWithCopy(a1);
    return a3;
  }
LABEL_26:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_1000247D8(uint64_t a1)
{
  return specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(a1 + 16), 0, a1);
}

double *_s20HomeWidgetLockScreen9DataModelC11accessories3for2inSaySo11HMAccessoryCGAA11ServiceKindO_So6HMHomeCtF_0(unsigned __int8 a1, id a2)
{
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  id v8;
  BOOL v9;
  unint64_t v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t i;
  uint64_t v16;
  double v17;
  uint64_t v18;
  id v19;
  void *v20;
  id v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned __int8 v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v32;
  char v33;
  void *v34;
  uint64_t v35;
  double v36;
  uint64_t v37;
  double v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  id v51;

  v3 = objc_msgSend(a2, "accessories");
  v4 = sub_1000038AC(0, (unint64_t *)&qword_100081F40, HMAccessory_ptr);
  v5 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v3, v4);

  if ((unint64_t)v5 >> 62)
    goto LABEL_50;
  v6 = *(_QWORD *)((v5 & 0xFFFFFFFFFFFFF8) + 0x10);
  while (v6)
  {
    v7 = 0;
    v48 = v5;
    v49 = v5 & 0xC000000000000001;
    v45 = v5 + 32;
    v46 = v5 & 0xFFFFFFFFFFFFFF8;
    v47 = v6;
    while (1)
    {
      if (v49)
      {
        v8 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v7, v5);
        v9 = __OFADD__(v7, 1);
        v10 = v7 + 1;
        if (v9)
          goto LABEL_46;
      }
      else
      {
        if (v7 >= *(_QWORD *)(v46 + 16))
          goto LABEL_49;
        v8 = *(id *)(v45 + 8 * v7);
        v9 = __OFADD__(v7, 1);
        v10 = v7 + 1;
        if (v9)
        {
LABEL_46:
          __break(1u);
LABEL_47:
          __break(1u);
          goto LABEL_48;
        }
      }
      v50 = v10;
      v51 = v8;
      v11 = objc_msgSend(v8, "services");
      v12 = sub_1000038AC(0, (unint64_t *)&qword_100081EC0, HMService_ptr);
      v13 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v11, v12);

      if ((unint64_t)v13 >> 62)
      {
        if (v13 < 0)
          v35 = v13;
        else
          v35 = v13 & 0xFFFFFFFFFFFFFF8;
        swift_bridgeObjectRetain(v13);
        v14 = _CocoaArrayWrapper.endIndex.getter(v35);
        swift_bridgeObjectRelease(v13);
        if (!v14)
        {
LABEL_36:
          swift_bridgeObjectRelease(v13);
          v34 = v51;
          if (((unint64_t)_swiftEmptyArrayStorage & 0x8000000000000000) != 0)
            break;
          goto LABEL_37;
        }
      }
      else
      {
        v14 = *(_QWORD *)((v13 & 0xFFFFFFFFFFFFF8) + 0x10);
        if (!v14)
          goto LABEL_36;
      }
      if (v14 < 1)
        goto LABEL_47;
      for (i = 0; i != v14; ++i)
      {
        if ((v13 & 0xC000000000000001) != 0)
          v19 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(i, v13);
        else
          v19 = *(id *)(v13 + 8 * i + 32);
        v20 = v19;
        v21 = objc_msgSend(v19, "serviceType");
        v22 = static String._unconditionallyBridgeFromObjectiveC(_:)(v21);
        v24 = v23;

        v25 = _s20HomeWidgetLockScreen11ServiceKindO8rawValueACSgSS_tcfC_0(v22, v24);
        if (v25 == 51)
          v25 = 0;
        v26 = ServiceKind.rawValue.getter(v25);
        v28 = v27;
        v29 = ServiceKind.rawValue.getter(a1);
        if (v26 == v29 && v28 == v30)
        {
          v16 = swift_bridgeObjectRelease_n(v28, 2);
LABEL_17:
          specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v16);
          v17 = _swiftEmptyArrayStorage[2];
          specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(*(_QWORD *)&v17);
          v18 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(*(_QWORD *)&v17, v20);
          specialized ContiguousArray._endMutation()(v18);
          continue;
        }
        v32 = v30;
        v33 = _stringCompareWithSmolCheck(_:_:expecting:)(v26, v28, v29, v30, 0);
        swift_bridgeObjectRelease(v28);
        v16 = swift_bridgeObjectRelease(v32);
        if ((v33 & 1) != 0)
          goto LABEL_17;

      }
      swift_bridgeObjectRelease(v13);
      v6 = v47;
      v5 = v48;
      v34 = v51;
      if (((unint64_t)_swiftEmptyArrayStorage & 0x8000000000000000) != 0)
        break;
LABEL_37:
      if (((unint64_t)_swiftEmptyArrayStorage & 0x4000000000000000) != 0)
        break;
      if (*(_QWORD *)&_swiftEmptyArrayStorage[2])
        goto LABEL_39;
LABEL_4:

      swift_release(_swiftEmptyArrayStorage);
LABEL_5:
      v7 = v50;
      if (v50 == v6)
        goto LABEL_54;
    }
    v40 = swift_bridgeObjectRetain(_swiftEmptyArrayStorage);
    v41 = _CocoaArrayWrapper.endIndex.getter(v40);
    swift_release(_swiftEmptyArrayStorage);
    if (!v41)
      goto LABEL_4;
LABEL_39:
    if (((unint64_t)_swiftEmptyArrayStorage & 0xC000000000000001) != 0)
    {
      v42 = specialized _ArrayBuffer._getElementSlowPath(_:)(0, _swiftEmptyArrayStorage);
      swift_unknownObjectRelease(v42);
      v37 = swift_release(_swiftEmptyArrayStorage);
LABEL_41:
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v37);
      v38 = _swiftEmptyArrayStorage[2];
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(*(_QWORD *)&v38);
      v39 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(*(_QWORD *)&v38, v34);
      specialized ContiguousArray._endMutation()(v39);
      goto LABEL_5;
    }
    v36 = _swiftEmptyArrayStorage[2];
    v37 = swift_release(_swiftEmptyArrayStorage);
    if (v36 != 0.0)
      goto LABEL_41;
LABEL_48:
    __break(1u);
LABEL_49:
    __break(1u);
LABEL_50:
    if (v5 < 0)
      v43 = v5;
    else
      v43 = v5 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v5);
    v6 = _CocoaArrayWrapper.endIndex.getter(v43);
    swift_bridgeObjectRelease(v5);
  }
LABEL_54:
  swift_bridgeObjectRelease(v5);
  return _swiftEmptyArrayStorage;
}

double *sub_100024BF0(uint64_t a1, unsigned __int8 a2)
{
  uint64_t v4;
  uint64_t v5;
  id v6;
  void *v7;
  uint64_t v8;
  double *v9;
  uint64_t v10;

  if ((unint64_t)a1 >> 62)
    goto LABEL_11;
  v4 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain(a1);
  for (; v4; v4 = _CocoaArrayWrapper.endIndex.getter(v10))
  {
    v5 = 4;
    while (1)
    {
      v6 = (a1 & 0xC000000000000001) != 0
         ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v5 - 4, a1)
         : *(id *)(a1 + 8 * v5);
      v7 = v6;
      v8 = v5 - 3;
      if (__OFADD__(v5 - 4, 1))
        break;
      v9 = _s20HomeWidgetLockScreen9DataModelC11accessories3for2inSaySo11HMAccessoryCGAA11ServiceKindO_So6HMHomeCtF_0(a2, v6);

      sub_100022B28((uint64_t)v9, (uint64_t (*)(uint64_t, _QWORD, uint64_t))sub_1000245C4);
      ++v5;
      if (v8 == v4)
        goto LABEL_15;
    }
    __break(1u);
LABEL_11:
    if (a1 < 0)
      v10 = a1;
    else
      v10 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
  }
LABEL_15:
  swift_bridgeObjectRelease(a1);
  return _swiftEmptyArrayStorage;
}

void sub_100024D20(char a1)
{
  uint64_t v2;
  uint64_t v3;
  os_log_type_t v4;
  uint64_t v5;
  NSObject *oslog;
  int v7;
  int v8;
  uint64_t v9;

  if (qword_100081680 != -1)
    swift_once(&qword_100081680, sub_100022448);
  v2 = type metadata accessor for Logger(0);
  v3 = sub_100003884(v2, (uint64_t)static DataModel.widgetLogger);
  oslog = Logger.logObject.getter(v3);
  v4 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(oslog, v4))
  {
    v5 = swift_slowAlloc(14, -1);
    *(_DWORD *)v5 = 67109376;
    v8 = byte_10008A640;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v8, &v9, v5 + 4, v5 + 8);
    *(_WORD *)(v5 + 8) = 1024;
    v7 = a1 & 1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v7, &v8, v5 + 10, v5 + 14);
    _os_log_impl((void *)&_mh_execute_header, oslog, v4, "homeHasUpdatedOnce was %{BOOL}d is now %{BOOL}d", (uint8_t *)v5, 0xEu);
    swift_slowDealloc(v5, -1, -1);

  }
  else
  {

  }
}

void *sub_100024E68(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  void *v13;
  uint64_t v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v4 = v3;
  v24 = a2;
  v7 = type metadata accessor for UUID(0);
  v22 = *(_QWORD *)(v7 - 8);
  v23 = v7;
  __chkstk_darwin();
  v9 = (char *)&v20 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((unint64_t)a1 >> 62)
    goto LABEL_20;
  v10 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain(a1);
  for (; v10; v10 = _CocoaArrayWrapper.endIndex.getter(v18))
  {
    v20 = v4;
    v21 = a1 & 0xC000000000000001;
    v11 = 4;
    while (1)
    {
      v12 = v21 ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v11 - 4, a1) : *(id *)(a1 + 8 * v11);
      v13 = v12;
      v14 = v11 - 3;
      if (__OFADD__(v11 - 4, 1))
        break;
      v15 = objc_msgSend(v12, "uniqueIdentifier");
      static UUID._unconditionallyBridgeFromObjectiveC(_:)();

      v4 = UUID.uuidString.getter();
      v17 = v16;
      (*(void (**)(char *, uint64_t))(v22 + 8))(v9, v23);
      if (a3)
      {
        if (v4 == v24 && v17 == a3)
        {
          swift_bridgeObjectRelease(a1);
LABEL_18:
          swift_bridgeObjectRelease(v17);
          return v13;
        }
        v4 = _stringCompareWithSmolCheck(_:_:expecting:)(v4, v17, v24, a3, 0);
        swift_bridgeObjectRelease(v17);
        if ((v4 & 1) != 0)
        {
          v17 = a1;
          goto LABEL_18;
        }

      }
      else
      {

        swift_bridgeObjectRelease(v17);
      }
      ++v11;
      if (v14 == v10)
        goto LABEL_24;
    }
    __break(1u);
LABEL_20:
    if (a1 < 0)
      v18 = a1;
    else
      v18 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
  }
LABEL_24:
  swift_bridgeObjectRelease(a1);
  return 0;
}

void _s20HomeWidgetLockScreen9DataModelC25homeManagerDidUpdateHomesyySo06HMHomeH0CF_0(void *a1)
{
  uint64_t v2;
  id v3;
  NSObject *v4;
  os_log_type_t v5;
  uint64_t v6;
  id v7;
  void *v8;
  id v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  double *v18;
  id v19;
  void *v20;
  id v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  double *v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  void *v32;
  double *v33;
  double *v34;
  uint64_t v35;
  uint64_t v36;
  NSObject *v37;
  void *v38;
  double **v39;
  os_log_type_t v40;
  uint64_t v41;
  double *v42;
  uint64_t v43;

  if (qword_100081680 != -1)
    swift_once(&qword_100081680, sub_100022448);
  v2 = type metadata accessor for Logger(0);
  sub_100003884(v2, (uint64_t)static DataModel.widgetLogger);
  v3 = a1;
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.default.getter();
  if (!os_log_type_enabled(v4, v5))
  {

LABEL_25:
    sub_100024D20(1);
    byte_10008A640 = 1;
    return;
  }
  v40 = v5;
  v6 = swift_slowAlloc(42, -1);
  v39 = (double **)swift_slowAlloc(16, -1);
  v41 = swift_slowAlloc(64, -1);
  v43 = v41;
  *(_DWORD *)v6 = 136315906;
  v7 = objc_msgSend(v3, "currentHome");
  if (v7)
  {
    v8 = v7;
    v9 = objc_msgSend(v7, "name");

    v10 = static String._unconditionallyBridgeFromObjectiveC(_:)(v9);
    v12 = v11;

  }
  else
  {
    v12 = 0xE400000000000000;
    v10 = 1701736302;
  }
  v42 = (double *)sub_10001DF04(v10, v12, &v43);
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v42, &v43, v6 + 4, v6 + 12);

  swift_bridgeObjectRelease(v12);
  *(_WORD *)(v6 + 12) = 2080;
  v38 = v3;
  v13 = objc_msgSend(v3, "homes");
  v14 = sub_1000038AC(0, (unint64_t *)&qword_100081F38, HMHome_ptr);
  v15 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v13, v14);

  if (!((unint64_t)v15 >> 62))
  {
    v16 = *(_QWORD *)((v15 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v16)
      goto LABEL_10;
LABEL_23:
    swift_bridgeObjectRelease(v15);
    v18 = _swiftEmptyArrayStorage;
LABEL_24:
    v29 = Array.description.getter(v18, &type metadata for String);
    v31 = v30;
    swift_bridgeObjectRelease(v18);
    v42 = (double *)sub_10001DF04(v29, v31, &v43);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v42, &v43, v6 + 14, v6 + 22);

    swift_bridgeObjectRelease(v31);
    *(_WORD *)(v6 + 22) = 2112;
    v32 = (void *)objc_opt_self(NSThread);
    v33 = (double *)objc_msgSend(v32, "mainThread");
    v42 = v33;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v42, &v43, v6 + 24, v6 + 32);
    *v39 = v33;
    *(_WORD *)(v6 + 32) = 2112;
    v34 = (double *)objc_msgSend(v32, "currentThread");
    v42 = v34;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v42, &v43, v6 + 34, v6 + 42);
    v39[1] = v34;
    v35 = sub_100003704((uint64_t *)&unk_100081FD0);
    swift_arrayDestroy(v39, 2, v35);
    swift_slowDealloc(v39, -1, -1);
    swift_arrayDestroy(v41, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v41, -1, -1);
    swift_slowDealloc(v6, -1, -1);

    goto LABEL_25;
  }
  if (v15 < 0)
    v28 = v15;
  else
    v28 = v15 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v15);
  v16 = _CocoaArrayWrapper.endIndex.getter(v28);
  swift_bridgeObjectRelease(v15);
  if (!v16)
    goto LABEL_23;
LABEL_10:
  v42 = _swiftEmptyArrayStorage;
  sub_10001E518(0, v16 & ~(v16 >> 63), 0);
  if ((v16 & 0x8000000000000000) == 0)
  {
    v36 = v6;
    v37 = v4;
    v17 = 0;
    v18 = v42;
    do
    {
      if ((v15 & 0xC000000000000001) != 0)
        v19 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v17, v15);
      else
        v19 = *(id *)(v15 + 8 * v17 + 32);
      v20 = v19;
      v21 = objc_msgSend(v19, "name", v36, v37);
      v22 = static String._unconditionallyBridgeFromObjectiveC(_:)(v21);
      v24 = v23;

      v42 = v18;
      v26 = *((_QWORD *)v18 + 2);
      v25 = *((_QWORD *)v18 + 3);
      if (v26 >= v25 >> 1)
      {
        sub_10001E518(v25 > 1, v26 + 1, 1);
        v18 = v42;
      }
      ++v17;
      *((_QWORD *)v18 + 2) = v26 + 1;
      v27 = &v18[2 * v26];
      *((_QWORD *)v27 + 4) = v22;
      *((_QWORD *)v27 + 5) = v24;
    }
    while (v16 != v17);
    swift_bridgeObjectRelease(v15);
    v6 = v36;
    v4 = v37;
    goto LABEL_24;
  }
  __break(1u);
}

uint64_t *sub_100025544(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(a1 - 8);
  if ((*(_DWORD *)(v3 + 80) & 0x20000) != 0)
  {
    v4 = swift_slowAlloc(*(_QWORD *)(v3 + 64), *(_DWORD *)(v3 + 80));
    *a2 = v4;
    return (uint64_t *)v4;
  }
  return a2;
}

uint64_t sub_100025584()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

void sub_1000255A8(uint64_t a1)
{
  uint64_t v1;

  sub_1000216A4(a1, *(char **)(v1 + 16), "User Home Sensing preference has been updated, current home is now '%s'");
}

uint64_t sub_1000255C8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_1000255D8(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

void sub_1000255E0(uint64_t a1)
{
  uint64_t v1;

  sub_1000216A4(a1, *(char **)(v1 + 16), "User Selected Home preference has been updated, current home is now '%s'");
}

int *sub_10002560C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  double v13;
  uint64_t v14;
  uint64_t v15;
  int *result;
  uint64_t v17;
  _QWORD *v18;
  double *v19;
  _BYTE v20[16];

  v2 = type metadata accessor for Locale(0);
  __chkstk_darwin(v2);
  v4 = &v20[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v5 = type metadata accessor for String.LocalizationValue(0);
  v6 = __chkstk_darwin(v5);
  v8 = &v20[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  Date.init()(v6);
  v9 = String.LocalizationValue.init(stringLiteral:)(0xD000000000000024, 0x8000000100068650);
  static Locale.current.getter(v9);
  v10 = String.init(localized:table:bundle:locale:comment:)(v8, 0xD00000000000001DLL, 0x8000000100068680, 0, v4, 0, 0, 256);
  v12 = v11;
  v13 = TimelineProviderContext.displaySize.getter(v10);
  v15 = v14;
  result = (int *)type metadata accessor for SecurityAccessoryEntry(0);
  v17 = a1 + result[5];
  *(_QWORD *)v17 = v10;
  *(_QWORD *)(v17 + 8) = v12;
  *(_QWORD *)(v17 + 16) = 0xD000000000000010;
  *(_QWORD *)(v17 + 24) = 0x8000000100067AC0;
  *(_QWORD *)(v17 + 32) = 0x9380E29380E2;
  *(_QWORD *)(v17 + 40) = 0xA600000000000000;
  *(_BYTE *)(v17 + 48) = 0;
  v18 = (_QWORD *)(a1 + result[6]);
  *v18 = 0;
  v18[1] = 0;
  v19 = (double *)(a1 + result[7]);
  *v19 = v13;
  *((_QWORD *)v19 + 1) = v15;
  return result;
}

uint64_t sub_100025788(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;

  v6[17] = a5;
  v6[18] = v5;
  v6[15] = a3;
  v6[16] = a4;
  v6[13] = a1;
  v6[14] = a2;
  v7 = type metadata accessor for Date(0);
  v6[19] = v7;
  v8 = *(_QWORD *)(v7 - 8);
  v6[20] = v8;
  v6[21] = swift_task_alloc((*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_1000257F0, 0, 0);
}

uint64_t sub_1000257F0()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  _BOOL4 v6;
  unint64_t v7;
  __objc2_prot_list *v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  id v12;
  void *v13;
  id v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  void *v21;
  id v22;
  void *v23;
  id v24;
  uint64_t v25;
  void *v26;
  Swift::String_optional v27;
  void *v28;
  uint64_t v29;
  id v30;
  NSObject *v31;
  os_log_type_t v32;
  _BOOL4 v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  id v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  void *v41;
  NSObject *v42;
  os_log_type_t v43;
  _BOOL4 v44;
  unint64_t v45;
  __objc2_prot_list *v46;
  uint64_t v47;
  uint64_t v48;
  id v49;
  void *v50;
  id v51;
  uint64_t v52;
  unint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  id v57;
  _QWORD *v58;
  void *v60;
  void *v61;
  uint64_t v62;
  uint64_t v63;
  id v64;
  id v65;
  uint64_t v66;
  uint64_t (*v67)(uint64_t);
  uint64_t v68;

  v66 = v0 + 80;
  if (qword_100081680 != -1)
    swift_once(&qword_100081680, sub_100022448);
  v1 = *(_QWORD *)(v0 + 136);
  v2 = *(void **)(v0 + 112);
  v3 = type metadata accessor for Logger(0);
  *(_QWORD *)(v0 + 176) = sub_100003884(v3, (uint64_t)static DataModel.widgetLogger);
  swift_bridgeObjectRetain_n(v1, 2);
  v4 = Logger.logObject.getter(v2);
  v5 = static os_log_type_t.default.getter();
  v6 = os_log_type_enabled(v4, v5);
  v7 = *(_QWORD *)(v0 + 136);
  v8 = &DataModel;
  if (v6)
  {
    v9 = *(_QWORD *)(v0 + 128);
    v10 = *(void **)(v0 + 112);
    v11 = swift_slowAlloc(32, -1);
    v62 = swift_slowAlloc(96, -1);
    v68 = v62;
    *(_DWORD *)v11 = 136315650;
    swift_bridgeObjectRetain(v7);
    *(_QWORD *)(v0 + 80) = sub_10001DF04(v9, v7, &v68);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v66, v0 + 88, v11 + 4, v11 + 12);
    swift_bridgeObjectRelease_n(v7, 3);
    *(_WORD *)(v11 + 12) = 2080;
    *(_QWORD *)(v0 + 88) = sub_10001DF04(0xD00000000000001ELL, 0x8000000100068630, &v68);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 88, v0 + 96, v11 + 14, v11 + 22);
    *(_WORD *)(v11 + 22) = 2080;
    v12 = objc_msgSend(v10, "accessory");
    if (v12
      && (v13 = v12, v14 = objc_msgSend(v12, "identifier"), v13, v14))
    {
      v15 = static String._unconditionallyBridgeFromObjectiveC(_:)(v14);
      v17 = v16;

      v18 = v15;
      v8 = &DataModel;
      v19 = v62;
    }
    else
    {
      v17 = 0xE400000000000000;
      v8 = &DataModel;
      v19 = v62;
      v18 = 1819047278;
    }
    v21 = *(void **)(v0 + 112);
    *(_QWORD *)(v0 + 96) = sub_10001DF04(v18, v17, &v68);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 96, v0 + 104, v11 + 24, v11 + 32);
    swift_bridgeObjectRelease(v17);

    swift_arrayDestroy(v19, 3, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v19, -1, -1);
    swift_slowDealloc(v11, -1, -1);

  }
  else
  {
    v20 = *(void **)(v0 + 112);
    swift_bridgeObjectRelease_n(*(_QWORD *)(v0 + 136), 2);

  }
  if (qword_100081670 != -1)
    swift_once(&qword_100081670, sub_100021008);
  v22 = objc_msgSend(*(id *)(v0 + 112), (SEL)v8[366].count, v62);
  v23 = v22;
  if (v22)
  {
    v24 = objc_msgSend(v22, "identifier");

    if (v24)
    {
      v25 = static String._unconditionallyBridgeFromObjectiveC(_:)(v24);
      v23 = v26;

    }
    else
    {
      v25 = 0;
      v23 = 0;
    }
  }
  else
  {
    v25 = 0;
  }
  v27.value._countAndFlagsBits = v25;
  v27.value._object = v23;
  v28 = (void *)DataModel.accessoryFromAnyHome(for:)(v27);
  *(_QWORD *)(v0 + 184) = v28;
  swift_bridgeObjectRelease(v23);
  v29 = *(_QWORD *)(v0 + 136);
  if (v28)
  {
    swift_bridgeObjectRetain_n(v29, 2);
    v30 = v28;
    v31 = Logger.logObject.getter(v30);
    v32 = static os_log_type_t.default.getter();
    v33 = os_log_type_enabled(v31, v32);
    v34 = *(_QWORD *)(v0 + 136);
    if (v33)
    {
      v35 = *(_QWORD *)(v0 + 128);
      v36 = swift_slowAlloc(22, -1);
      v64 = (id)swift_slowAlloc(64, -1);
      v68 = (uint64_t)v64;
      *(_DWORD *)v36 = 136315394;
      swift_bridgeObjectRetain(v34);
      *(_QWORD *)(v0 + 64) = sub_10001DF04(v35, v34, &v68);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 64, v0 + 72, v36 + 4, v36 + 12);
      swift_bridgeObjectRelease_n(v34, 3);
      *(_WORD *)(v36 + 12) = 2080;
      v37 = objc_msgSend(v30, "name");
      v38 = static String._unconditionallyBridgeFromObjectiveC(_:)(v37);
      v40 = v39;

      *(_QWORD *)(v0 + 72) = sub_10001DF04(v38, v40, &v68);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 72, v66, v36 + 14, v36 + 22);
      swift_bridgeObjectRelease(v40);

      swift_arrayDestroy(v64, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v64, -1, -1);
      swift_slowDealloc(v36, -1, -1);
    }
    else
    {
      swift_bridgeObjectRelease_n(*(_QWORD *)(v0 + 136), 2);

    }
    v56 = unk_1000830EC;
    v67 = (uint64_t (*)(uint64_t))((char *)&dword_1000830E8 + dword_1000830E8);
    v57 = v30;
    v58 = (_QWORD *)swift_task_alloc(v56);
    *(_QWORD *)(v0 + 192) = v58;
    *v58 = v0;
    v58[1] = sub_100025FA4;
    return v67((uint64_t)v28);
  }
  else
  {
    v41 = *(void **)(v0 + 112);
    swift_bridgeObjectRetain_n(v29, 2);
    v42 = Logger.logObject.getter(v41);
    v43 = static os_log_type_t.default.getter();
    v44 = os_log_type_enabled(v42, v43);
    v45 = *(_QWORD *)(v0 + 136);
    if (v44)
    {
      v46 = v8;
      v47 = *(_QWORD *)(v0 + 128);
      v65 = *(id *)(v0 + 112);
      v48 = swift_slowAlloc(22, -1);
      v63 = swift_slowAlloc(64, -1);
      v68 = v63;
      *(_DWORD *)v48 = 136315394;
      swift_bridgeObjectRetain(v45);
      *(_QWORD *)(v0 + 16) = sub_10001DF04(v47, v45, &v68);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 16, v0 + 24, v48 + 4, v48 + 12);
      swift_bridgeObjectRelease_n(v45, 3);
      *(_WORD *)(v48 + 12) = 2080;
      v49 = objc_msgSend(v65, (SEL)v46[366].count);
      if (v49
        && (v50 = v49, v51 = objc_msgSend(v49, "identifier"), v50, v51))
      {
        v52 = static String._unconditionallyBridgeFromObjectiveC(_:)(v51);
        v54 = v53;

        v55 = v63;
      }
      else
      {
        v54 = 0xE400000000000000;
        v55 = v63;
        v52 = 1819047278;
      }
      v61 = *(void **)(v0 + 112);
      *(_QWORD *)(v0 + 24) = sub_10001DF04(v52, v54, &v68);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 24, v0 + 32, v48 + 14, v48 + 22);
      swift_bridgeObjectRelease(v54);

      swift_arrayDestroy(v55, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v55, -1, -1);
      swift_slowDealloc(v48, -1, -1);
    }
    else
    {
      v60 = *(void **)(v0 + 112);
      swift_bridgeObjectRelease_n(*(_QWORD *)(v0 + 136), 2);

    }
    sub_10002560C(*(_QWORD *)(v0 + 104));
    swift_task_dealloc(*(_QWORD *)(v0 + 168));
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_100025FA4(uint64_t a1, char a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;

  v3 = *v2;
  v5 = *(void **)(*v2 + 184);
  v4 = *(_QWORD *)(*v2 + 192);
  *(_QWORD *)(v3 + 200) = a1;
  *(_BYTE *)(v3 + 208) = a2;
  swift_task_dealloc(v4);

  return swift_task_switch(sub_100026008, 0, 0);
}

uint64_t sub_100026008()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  char v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  const char *v17;
  char v18;
  void *v19;
  uint64_t v20;
  id v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  const char *v27;
  void *v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  id v32;
  void *v33;
  id v34;
  uint64_t v35;
  uint64_t v36;
  BOOL v37;
  char v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  double v44;
  uint64_t v45;
  uint64_t v46;
  int *v47;
  uint64_t v48;
  _QWORD *v49;
  double *v50;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;

  v1 = 0xD000000000000010;
  v2 = swift_bridgeObjectRetain_n(*(_QWORD *)(v0 + 136), 2);
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v3, v4))
  {
    v58 = v0 + 56;
    v5 = *(_BYTE *)(v0 + 208);
    v6 = *(_QWORD *)(v0 + 200);
    v8 = *(_QWORD *)(v0 + 128);
    v7 = *(_QWORD *)(v0 + 136);
    v9 = swift_slowAlloc(42, -1);
    v56 = swift_slowAlloc(96, -1);
    v60 = v56;
    *(_DWORD *)v9 = 136315906;
    swift_bridgeObjectRetain(v7);
    *(_QWORD *)(v0 + 32) = sub_10001DF04(v8, v7, &v60);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 32, v0 + 40, v9 + 4, v9 + 12);
    swift_bridgeObjectRelease_n(v7, 3);
    *(_WORD *)(v9 + 12) = 2048;
    if ((v5 & 1) != 0)
      v10 = -1;
    else
      v10 = v6;
    *(_QWORD *)(v0 + 40) = v10;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 40, v0 + 48, v9 + 14, v9 + 22);
    *(_WORD *)(v9 + 22) = 2080;
    v11 = sub_100052F94(v6, v5 & 1);
    v13 = v12;
    *(_QWORD *)(v0 + 48) = sub_10001DF04(v11, v12, &v60);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 48, v58, v9 + 24, v9 + 32);
    swift_bridgeObjectRelease(v13);
    *(_WORD *)(v9 + 32) = 2080;
    if ((v5 & 1) != 0)
    {
LABEL_9:
      v1 = 0xD000000000000010;
      v15 = 0xD00000000000002ELL;
      v14 = 0x80000001000685E0;
      v16 = v56;
    }
    else
    {
      v14 = 0x8000000100067AC0;
      v15 = 0xD000000000000010;
      v1 = 0xD000000000000010;
      v16 = v56;
      switch(*(_QWORD *)(v0 + 200))
      {
        case 0:
        case 2:
        case 3:
          break;
        case 1:
          v15 = 0xD000000000000012;
          v17 = "door.garage.closed";
          goto LABEL_11;
        case 4:
          v15 = 0xD00000000000002ELL;
          v17 = "door.garage.open.trianglebadge.exclamationmark";
LABEL_11:
          v14 = (unint64_t)(v17 - 32) | 0x8000000000000000;
          break;
        default:
          goto LABEL_9;
      }
    }
    *(_QWORD *)(v0 + 56) = sub_10001DF04(v15, v14, &v60);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v58, v0 + 64, v9 + 34, v9 + 42);
    swift_bridgeObjectRelease(v14);
    swift_arrayDestroy(v16, 3, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v16, -1, -1);
    swift_slowDealloc(v9, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease_n(*(_QWORD *)(v0 + 136), 2);
  }

  v18 = *(_BYTE *)(v0 + 208);
  v19 = *(void **)(v0 + 184);
  Date.init()(v20);
  v21 = objc_msgSend(v19, "name");
  v22 = static String._unconditionallyBridgeFromObjectiveC(_:)(v21);
  v24 = v23;

  v25 = *(_QWORD *)(v0 + 200);
  v55 = v24;
  v57 = v22;
  if ((v18 & 1) != 0)
  {
LABEL_16:
    v1 = 0xD00000000000002ELL;
    v27 = "door.garage.open.trianglebadge.exclamationmark";
LABEL_17:
    v26 = (unint64_t)(v27 - 32) | 0x8000000000000000;
  }
  else
  {
    v26 = 0x8000000100067AC0;
    switch(v25)
    {
      case 0:
      case 2:
      case 3:
        break;
      case 1:
        v1 = 0xD000000000000012;
        v27 = "door.garage.closed";
        goto LABEL_17;
      default:
        goto LABEL_16;
    }
  }
  v54 = v26;
  v28 = *(void **)(v0 + 112);
  v29 = *(_BYTE *)(v0 + 208) & 1;
  v30 = sub_100052F94(v25, *(_BYTE *)(v0 + 208) & 1);
  v52 = v31;
  v53 = v30;
  v32 = objc_msgSend(v28, "accessory");
  v33 = v32;
  v59 = v1;
  if (v32)
  {
    v34 = objc_msgSend(v32, "identifier");

    if (v34)
    {
      v33 = (void *)static String._unconditionallyBridgeFromObjectiveC(_:)(v34);
      v36 = v35;

      goto LABEL_23;
    }
    v33 = 0;
  }
  v36 = 0;
LABEL_23:
  if (v29)
    v37 = 0;
  else
    v37 = v25 == 1;
  v38 = v37;
  v39 = *(void **)(v0 + 184);
  v40 = *(_QWORD *)(v0 + 160);
  v41 = *(_QWORD *)(v0 + 168);
  v42 = *(_QWORD *)(v0 + 152);
  v43 = *(_QWORD *)(v0 + 104);
  v44 = TimelineProviderContext.displaySize.getter(v32);
  v46 = v45;

  (*(void (**)(uint64_t, uint64_t, uint64_t))(v40 + 32))(v43, v41, v42);
  v47 = (int *)type metadata accessor for SecurityAccessoryEntry(0);
  v48 = v43 + v47[5];
  *(_QWORD *)v48 = v57;
  *(_QWORD *)(v48 + 8) = v55;
  *(_QWORD *)(v48 + 16) = v59;
  *(_QWORD *)(v48 + 24) = v54;
  *(_QWORD *)(v48 + 32) = v53;
  *(_QWORD *)(v48 + 40) = v52;
  *(_BYTE *)(v48 + 48) = v38;
  v49 = (_QWORD *)(v43 + v47[6]);
  *v49 = v33;
  v49[1] = v36;
  v50 = (double *)(v43 + v47[7]);
  *v50 = v44;
  *((_QWORD *)v50 + 1) = v46;
  swift_task_dealloc(*(_QWORD *)(v0 + 168));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000264AC()
{
  uint64_t v0;

  return swift_deallocClassInstance(v0, 16, 7);
}

uint64_t type metadata accessor for GarageDoorSecurityDataFetcher()
{
  return objc_opt_self(_TtC20HomeWidgetLockScreen29GarageDoorSecurityDataFetcher);
}

uint64_t sub_1000264DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;

  v5[16] = a4;
  v5[17] = v4;
  v5[14] = a2;
  v5[15] = a3;
  v5[13] = a1;
  v6 = type metadata accessor for Date(0);
  v5[18] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v5[19] = v7;
  v5[20] = swift_task_alloc((*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_100026544, 0, 0);
}

uint64_t sub_100026544()
{
  uint64_t v0;
  void *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  id v5;
  id v6;
  NSObject *v7;
  os_log_type_t v8;
  _BOOL4 v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  id v17;
  id v18;
  Swift::Bool v19;
  id v20;
  NSObject *v21;
  os_log_type_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  id v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  id v32;
  id v33;
  Swift::Bool v34;
  id v35;
  NSObject *v36;
  os_log_type_t v37;
  uint64_t v38;
  _QWORD *v39;
  id v40;
  uint64_t v41;
  uint64_t *v42;
  _QWORD *v43;
  uint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  os_log_type_t log;
  NSObject *loga;
  uint64_t type;
  os_log_type_t typea;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;

  v56 = v0 + 80;
  if (qword_100081680 != -1)
    swift_once(&qword_100081680, sub_100022448);
  v2 = (uint64_t *)(v0 + 104);
  v1 = *(void **)(v0 + 104);
  v3 = *(_QWORD *)(v0 + 120);
  v4 = type metadata accessor for Logger(0);
  *(_QWORD *)(v0 + 168) = sub_100003884(v4, (uint64_t)static DataModel.widgetLogger);
  v5 = v1;
  swift_bridgeObjectRetain_n(v3, 2);
  v6 = v5;
  v7 = Logger.logObject.getter(v6);
  v8 = static os_log_type_t.default.getter();
  v9 = os_log_type_enabled(v7, v8);
  v10 = *(_QWORD *)(v0 + 120);
  if (v9)
  {
    log = v8;
    v11 = *(_QWORD *)(v0 + 112);
    v48 = *(_QWORD *)(v0 + 104);
    v12 = swift_slowAlloc(32, -1);
    type = swift_slowAlloc(96, -1);
    v58 = type;
    *(_DWORD *)v12 = 136315650;
    swift_bridgeObjectRetain(v10);
    *(_QWORD *)(v0 + 80) = sub_10001DF04(v11, v10, &v58);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v56, v0 + 88, v12 + 4, v12 + 12);
    swift_bridgeObjectRelease_n(v10, 3);
    *(_WORD *)(v12 + 12) = 2080;
    *(_QWORD *)(v0 + 88) = sub_10001DF04(0xD00000000000002DLL, 0x80000001000686A0, &v58);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 88, v0 + 96, v12 + 14, v12 + 22);
    *(_WORD *)(v12 + 22) = 2080;
    if (v48)
    {
      v13 = objc_msgSend(v6, "name");
      v14 = static String._unconditionallyBridgeFromObjectiveC(_:)(v13);
      v16 = v15;

    }
    else
    {
      v16 = 0xE300000000000000;
      v14 = 7104878;
    }
    *(_QWORD *)(v0 + 96) = sub_10001DF04(v14, v16, &v58);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 96, v0 + 104, v12 + 24, v12 + 32);
    swift_bridgeObjectRelease(v16);

    swift_arrayDestroy(type, 3, (char *)&type metadata for Any + 8);
    swift_slowDealloc(type, -1, -1);
    swift_slowDealloc(v12, -1, -1);

    if (!*v2)
      goto LABEL_21;
  }
  else
  {
    swift_bridgeObjectRelease_n(*(_QWORD *)(v0 + 120), 2);

    if (!*v2)
      goto LABEL_21;
  }
  v17 = v6;
  v18 = objc_msgSend(v17, "currentUser");
  v19 = HMHome.shouldShowNoAccessOutsideOfSchedule(forRestrictedUser:)((HMUser)v18);

  if (!v19)
  {

    v32 = v17;
    v33 = objc_msgSend(v32, "currentUser");
    v34 = HMHome.shouldShowNoAccessAwayFromHome(forRestrictedUser:)((HMUser)v33);

    if (v34)
    {
      v35 = v32;
      v36 = Logger.logObject.getter(v35);
      v37 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v36, v37))
      {
        v55 = *v2;
        v38 = swift_slowAlloc(22, -1);
        v39 = (_QWORD *)swift_slowAlloc(8, -1);
        v57 = swift_slowAlloc(32, -1);
        v58 = v57;
        *(_DWORD *)v38 = 136315394;
        *(_QWORD *)(v0 + 40) = sub_10001DF04(0xD00000000000002DLL, 0x80000001000686A0, &v58);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 40, v0 + 48, v38 + 4, v38 + 12);
        *(_WORD *)(v38 + 12) = 2112;
        *(_QWORD *)(v0 + 48) = v35;
        v40 = v35;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 48, v0 + 56, v38 + 14, v38 + 22);
        *v39 = v55;

        _os_log_impl((void *)&_mh_execute_header, v36, v37, "{%s} Displaying No Access Away from Home for RG in home %@.", (uint8_t *)v38, 0x16u);
        v41 = sub_100003704((uint64_t *)&unk_100081FD0);
        swift_arrayDestroy(v39, 1, v41);
        swift_slowDealloc(v39, -1, -1);
        swift_arrayDestroy(v57, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v57, -1, -1);
        swift_slowDealloc(v38, -1, -1);
      }
      else
      {

      }
      if (qword_100081750 != -1)
        swift_once(&qword_100081750, sub_10005AEB4);
      v42 = &qword_10008A8C0;
      goto LABEL_26;
    }

LABEL_21:
    v43 = (_QWORD *)swift_task_alloc(dword_100081E64);
    *(_QWORD *)(v0 + 176) = v43;
    *v43 = v0;
    v43[1] = sub_100026D0C;
    return sub_1000158C8(*(_QWORD *)(v0 + 104), *(_QWORD *)(v0 + 112), *(_QWORD *)(v0 + 120), 3);
  }
  v20 = v17;
  v21 = Logger.logObject.getter(v20);
  v22 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v21, v22))
  {
    typea = v22;
    v23 = *(_QWORD *)(v0 + 160);
    v49 = *(_QWORD *)(v0 + 152);
    loga = v21;
    v24 = *(_QWORD *)(v0 + 144);
    v47 = *(_QWORD *)(v0 + 104);
    v25 = swift_slowAlloc(32, -1);
    v46 = (_QWORD *)swift_slowAlloc(8, -1);
    v54 = swift_slowAlloc(64, -1);
    v58 = v54;
    *(_DWORD *)v25 = 136315650;
    *(_QWORD *)(v0 + 56) = sub_10001DF04(0xD00000000000002DLL, 0x80000001000686A0, &v58);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 56, v0 + 64, v25 + 4, v25 + 12);
    *(_WORD *)(v25 + 12) = 2112;
    *(_QWORD *)(v0 + 64) = v20;
    v26 = v20;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 64, v0 + 72, v25 + 14, v25 + 22);
    *v46 = v47;

    *(_WORD *)(v25 + 22) = 2080;
    static Date.now.getter();
    v27 = sub_100028C9C();
    v28 = dispatch thunk of CustomStringConvertible.description.getter(v24, v27);
    v30 = v29;
    (*(void (**)(uint64_t, uint64_t))(v49 + 8))(v23, v24);
    *(_QWORD *)(v0 + 72) = sub_10001DF04(v28, v30, &v58);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 72, v56, v25 + 24, v25 + 32);
    swift_bridgeObjectRelease(v30);
    _os_log_impl((void *)&_mh_execute_header, loga, typea, "{%s} Displaying No Access for RG in home %@ because %s is outside of allowed schedule.", (uint8_t *)v25, 0x20u);
    v31 = sub_100003704((uint64_t *)&unk_100081FD0);
    swift_arrayDestroy(v46, 1, v31);
    swift_slowDealloc(v46, -1, -1);
    swift_arrayDestroy(v54, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v54, -1, -1);
    swift_slowDealloc(v25, -1, -1);

  }
  else
  {

  }
  if (qword_100081748 != -1)
    swift_once(&qword_100081748, sub_10005AE90);
  v42 = &qword_10008A8B8;
LABEL_26:
  v45 = *v42;
  swift_bridgeObjectRetain(*v42);

  swift_task_dealloc(*(_QWORD *)(v0 + 160));
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v45);
}

uint64_t sub_100026D0C(uint64_t a1)
{
  uint64_t **v1;
  uint64_t v2;
  uint64_t **v3;
  uint64_t *v5;

  v2 = (*v1)[22];
  v5 = *v1;
  v5[23] = a1;
  swift_task_dealloc(v2);
  v3 = (uint64_t **)swift_task_alloc(dword_10008214C);
  v5[24] = (uint64_t)v3;
  *v3 = v5;
  v3[1] = (uint64_t *)sub_100026D88;
  return sub_1000271F0(v5[17], v5[13], v5[14], v5[15]);
}

uint64_t sub_100026D88(uint64_t a1)
{
  uint64_t **v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t **v5;

  v2 = *v1;
  v3 = (*v1)[24];
  v4 = *v1;
  (*v1)[25] = a1;
  swift_task_dealloc(v3);
  v5 = (uint64_t **)swift_task_alloc(dword_1000830F4);
  v2[26] = (uint64_t)v5;
  *v5 = v4;
  v5[1] = (uint64_t *)sub_100026E08;
  return sub_10004C9B8(v2[13], v2[14], v2[15], 3);
}

uint64_t sub_100026E08(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;

  v2 = (_QWORD *)*v1;
  v2[2] = v1;
  v2[3] = a1;
  swift_task_dealloc(v2[26]);
  return swift_task_switch(sub_100026E60, 0, 0);
}

void sub_100026E60()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  int64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  NSObject *v20;
  os_log_type_t v21;
  _BOOL4 v22;
  uint64_t v23;
  uint8_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  BOOL v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  char *v38;
  uint64_t v39;
  os_log_type_t type;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;

  v1 = *(_QWORD *)(v0 + 128);
  v2 = *(_QWORD *)(*(_QWORD *)(v0 + 200) + 16);
  v3 = v1 - v2;
  if (__OFSUB__(v1, v2))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  if (v3 >= 0)
    v4 = v1 - v2;
  else
    v4 = v3 + 1;
  v5 = sub_10004C974(v4 >> 1, *(_QWORD *)(v0 + 24));
  v45 = v8;
  v9 = (v7 >> 1) - v6;
  if (__OFSUB__(v7 >> 1, v6))
    goto LABEL_14;
  v10 = v5;
  if (__OFSUB__(v3, v9))
  {
LABEL_15:
    __break(1u);
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  v11 = v6;
  v12 = v7;
  v13 = *(_QWORD *)(v0 + 200);
  v14 = sub_10004C974(v3 - v9, *(_QWORD *)(v0 + 184));
  v16 = v15;
  v43 = v18;
  v44 = v17;
  swift_unknownObjectRetain_n(v14, 2);
  swift_bridgeObjectRetain_n(v13, 2);
  v19 = swift_unknownObjectRetain_n(v10, 2);
  v20 = Logger.logObject.getter(v19);
  v21 = static os_log_type_t.default.getter();
  v22 = os_log_type_enabled(v20, v21);
  v23 = *(_QWORD *)(v0 + 200);
  v42 = v16;
  if (v22)
  {
    type = v21;
    v24 = (uint8_t *)swift_slowAlloc(12, -1);
    v39 = swift_slowAlloc(32, -1);
    *(_DWORD *)v24 = 136315138;
    v46 = v39;
    v47 = (char *)v14;
    v48 = v16;
    v49 = v44;
    v50 = v43;
    swift_unknownObjectRetain(v14);
    v25 = swift_bridgeObjectRetain(v23);
    sub_100028378(v25);
    swift_bridgeObjectRelease(v23);
    v26 = swift_unknownObjectRetain(v10);
    sub_1000289A4(v26, v45, v11, v12);
    swift_unknownObjectRelease(v10);
    v27 = ArraySlice.description.getter(v14, v16, v44, v43, &type metadata for ThreeColumnDataRow);
    v41 = v2;
    v28 = v12;
    v30 = v29;
    swift_unknownObjectRelease(v14);
    *(_QWORD *)(v0 + 32) = sub_10001DF04(v27, v30, &v46);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 32, v0 + 40, v24 + 4, v24 + 12);
    v31 = v30;
    v12 = v28;
    v2 = v41;
    swift_bridgeObjectRelease(v31);
    swift_unknownObjectRelease_n(v14, 2);
    swift_bridgeObjectRelease_n(v23, 2);
    swift_unknownObjectRelease_n(v10, 2);
    _os_log_impl((void *)&_mh_execute_header, v20, type, "homeOverview got rows: %s", v24, 0xCu);
    swift_arrayDestroy(v39, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v39, -1, -1);
    swift_slowDealloc(v24, -1, -1);
  }
  else
  {
    swift_unknownObjectRelease_n(v14, 2);
    swift_bridgeObjectRelease_n(v23, 2);
    swift_unknownObjectRelease_n(v10, 2);
  }

  v32 = (v43 >> 1) - v44;
  if (__OFSUB__(v43 >> 1, v44))
    goto LABEL_16;
  v33 = __OFADD__(v2, v32);
  v34 = v2 + v32;
  if (!v33)
  {
    v35 = *(_QWORD *)(v0 + 200);
    v47 = sub_10000A030(0, v34 & ~(v34 >> 63), 0, (char *)_swiftEmptyArrayStorage);
    v36 = swift_unknownObjectRetain(v14);
    sub_100022CE4(v36, v42, v44, v43);
    sub_1000229CC(v35);
    v37 = v47;
    swift_unknownObjectRetain(v10);
    swift_bridgeObjectRetain(v37);
    sub_100022CE4(v10, v45, v11, v12);
    swift_unknownObjectRelease(v14);
    swift_bridgeObjectRelease(v37);
    swift_unknownObjectRelease(v10);
    v38 = v47;
    swift_task_dealloc(*(_QWORD *)(v0 + 160));
    (*(void (**)(char *))(v0 + 8))(v38);
    return;
  }
LABEL_17:
  __break(1u);
}

uint64_t sub_1000271F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;

  v8 = type metadata accessor for Locale(0);
  v4[12] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v8 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for String.LocalizationValue(0);
  v4[13] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v9 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = (_QWORD *)swift_task_alloc(dword_1000827A4);
  v4[14] = v10;
  *v10 = v4;
  v10[1] = sub_1000272B0;
  return sub_100036994((uint64_t)(v4 + 7), a2, a3, a4);
}

uint64_t sub_1000272B0()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 112));
  return swift_task_switch(sub_100027304, 0, 0);
}

uint64_t sub_100027304()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  double *v5;
  uint64_t v6;
  uint64_t v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  sub_100028CE4(v0 + 56, v0 + 16);
  v1 = *(_QWORD *)(v0 + 48);
  if (!v1)
    goto LABEL_6;
  if (*(uint64_t *)(v0 + 32) < 1)
  {
    sub_100028D2C(v0 + 56);
LABEL_6:
    v5 = _swiftEmptyArrayStorage;
    goto LABEL_9;
  }
  v2 = *(_QWORD *)(v0 + 40);
  v3 = *(_QWORD *)(v0 + 16);
  v4 = sub_100003704(&qword_100081C88);
  v5 = (double *)swift_allocObject(v4, 88, 7);
  *((_OWORD *)v5 + 1) = xmmword_1000607D0;
  if (v3 == 1)
  {
    v6 = String.LocalizationValue.init(stringLiteral:)(0xD000000000000020, 0x8000000100068700);
    static Locale.current.getter(v6);
    v7 = 2;
    v8 = "Light singular";
    v9 = 14;
  }
  else
  {
    v10 = String.LocalizationValue.init(stringLiteral:)(0xD000000000000026, 0x80000001000686D0);
    static Locale.current.getter(v10);
    v9 = 0;
    v8 = 0;
    v7 = 256;
  }
  v11 = String.init(localized:table:bundle:locale:comment:)(*(_QWORD *)(v0 + 104), 0xD00000000000001DLL, 0x8000000100068680, 0, *(_QWORD *)(v0 + 96), v8, v9, v7);
  strcpy((char *)v5 + 32, "lightbulb.fill");
  *((_BYTE *)v5 + 47) = -18;
  *((_QWORD *)v5 + 6) = v11;
  *((_QWORD *)v5 + 7) = v12;
  *((_QWORD *)v5 + 8) = v2;
  *((_QWORD *)v5 + 9) = v1;
  *((_BYTE *)v5 + 80) = 0;
LABEL_9:
  v13 = *(_QWORD *)(v0 + 96);
  swift_task_dealloc(*(_QWORD *)(v0 + 104));
  swift_task_dealloc(v13);
  return (*(uint64_t (**)(double *))(v0 + 8))(v5);
}

size_t sub_100027488(size_t result)
{
  double **v1;
  int64_t v2;
  double *v3;
  double *v4;
  int64_t v5;
  double *v6;
  int64_t v7;
  double *v8;
  uint64_t v9;
  uint64_t v10;
  double *v11;
  double *v12;
  double *v13;
  int64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  BOOL v23;

  v2 = result;
  v3 = v1[3];
  v4 = *v1;
  v5 = (unint64_t)v3 >> 1;
  if ((v3 & 1) == 0 || (result = swift_isUniquelyReferenced_nonNull(*v1), *v1 = v4, (result & 1) == 0))
  {
    v11 = v4;
    goto LABEL_9;
  }
  v6 = v1[2];
  v7 = v5 - (_QWORD)v6;
  if (__OFSUB__(v5, v6))
    goto LABEL_37;
  v8 = v1[1];
  v9 = type metadata accessor for __ContiguousArrayStorageBase(0);
  v10 = swift_unknownObjectRetain(v4);
  result = swift_dynamicCastClass(v10, v9);
  if (!result)
  {
    swift_unknownObjectRelease(v4);
    result = (size_t)_swiftEmptyArrayStorage;
  }
  v11 = *(double **)(result + 16);
  if (&v8[7 * (_QWORD)v6 + 7 * v7] == (double *)(result + 56 * (_QWORD)v11 + 32))
    goto LABEL_29;
  result = swift_release(result);
  while (1)
  {
    if (v7 >= v2)
      goto LABEL_26;
    v11 = *v1;
LABEL_9:
    v12 = v1[2];
    v7 = v5 - (_QWORD)v12;
    if (__OFSUB__(v5, v12))
    {
      __break(1u);
LABEL_33:
      __break(1u);
      goto LABEL_34;
    }
    v13 = v1[1];
    v14 = v7 <= v2 ? v2 : v5 - (_QWORD)v12;
    if (!v14)
      break;
    v15 = sub_100003704(&qword_100081C88);
    v4 = (double *)swift_allocObject(v15, 56 * v14 + 32, 7);
    result = j__malloc_size(v4);
    *((_QWORD *)v4 + 2) = v7;
    *((_QWORD *)v4 + 3) = 2 * ((uint64_t)(result - 32) / 56);
    if (v5 >= (uint64_t)v12)
      goto LABEL_15;
LABEL_28:
    __break(1u);
LABEL_29:
    v21 = *(_QWORD *)(result + 24);
    result = swift_release(result);
    v22 = (v21 >> 1) - (_QWORD)v11;
    v23 = __OFADD__(v7, v22);
    v7 += v22;
    if (v23)
      goto LABEL_38;
  }
  v4 = _swiftEmptyArrayStorage;
  if (v5 < (uint64_t)v12)
    goto LABEL_28;
LABEL_15:
  if (v7 < 0)
    goto LABEL_39;
  v16 = (unint64_t)(v4 + 4);
  v17 = (unint64_t)&v13[7 * (_QWORD)v12];
  if (v17 < (unint64_t)&v4[7 * v7 + 4] && v16 < v17 + 56 * v7)
  {
    result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
    goto LABEL_40;
  }
  swift_arrayInitWithCopy(v4 + 4);
  if (__OFSUB__(0, v12))
    goto LABEL_33;
  v19 = *((_QWORD *)v4 + 2);
  v20 = (uint64_t)v12 + v19;
  if (__OFADD__(v12, v19))
  {
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  if (v20 < (uint64_t)v12)
  {
LABEL_35:
    __break(1u);
    goto LABEL_36;
  }
  result = swift_unknownObjectRelease(v11);
  if ((v20 & 0x8000000000000000) == 0)
  {
    v1[1] = (double *)(v16 - 56 * (_QWORD)v12);
    v1[2] = v12;
    v1[3] = (double *)((2 * v20) | 1);
LABEL_26:
    *v1 = v4;
    return result;
  }
LABEL_36:
  __break(1u);
LABEL_37:
  __break(1u);
LABEL_38:
  __break(1u);
LABEL_39:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
LABEL_40:
  __break(1u);
  return result;
}

uint64_t sub_100027724(uint64_t *a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t, uint64_t))
{
  uint64_t *v4;
  uint64_t v5;
  unint64_t v6;
  double *v7;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t *v17;
  size_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  uint64_t result;
  uint64_t v33;
  uint64_t v34;
  double *v35;
  uint64_t v36;
  char *v37;
  char *v38;
  char *__dst;

  v5 = v4[2];
  v6 = (unint64_t)v4[3] >> 1;
  v7 = (double *)(v6 - v5);
  if (__OFSUB__(v6, v5))
  {
    __break(1u);
    goto LABEL_32;
  }
  v9 = *a1;
  v10 = *(_QWORD *)(*a1 + 16);
  v11 = __OFSUB__(v10, a2);
  v12 = v10 - a2;
  if (v11)
  {
LABEL_32:
    __break(1u);
    goto LABEL_33;
  }
  v14 = v12 - a3;
  if (__OFSUB__(v12, a3))
  {
LABEL_33:
    __break(1u);
    goto LABEL_34;
  }
  v15 = (char *)v7 - a2;
  if (__OFSUB__(v7, a2))
  {
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  v11 = __OFSUB__(v15, v14);
  v16 = &v15[-v14];
  if (v11)
  {
LABEL_35:
    __break(1u);
    goto LABEL_36;
  }
  v17 = v4;
  v38 = v16;
  v18 = 56 * a2;
  __dst = (char *)(v9 + 32);
  v19 = v9 + 32 + 56 * a2;
  v37 = (char *)(v19 + 56 * a3);
  v20 = sub_100027D34(v7);
  if (v20)
  {
    v21 = v20;
    v35 = v7;
    v36 = v9;
    v22 = v4[2];
    v23 = (char *)(v4[1] + 56 * v22);
    v24 = v20 + 32;
    swift_arrayDestroy(v20 + 32, (uint64_t)&v23[-v20 - 32] / 56, &type metadata for ThreeColumnDataRow);
    if (a2 < 0)
      goto LABEL_46;
    v25 = &v23[v18];
    if (__dst != v23 || __dst >= v25)
      memmove(__dst, v23, v18);
    swift_arrayDestroy(&v23[v18], v38, &type metadata for ThreeColumnDataRow);
    a4(v19, a3);
    if (v14 < 0)
      goto LABEL_46;
    v26 = &v25[56 * (_QWORD)v38];
    if (v37 != v26 || v37 >= &v26[56 * v14])
      memmove(v37, v26, 56 * v14);
    swift_arrayDestroy(&v23[56 * (_QWORD)v35], (v24 + 56 * *(_QWORD *)(v21 + 16) - (uint64_t)&v23[56 * (_QWORD)v35]) / 56, &type metadata for ThreeColumnDataRow);
    *(_QWORD *)(v21 + 16) = 0;
    swift_release(v21);
    v9 = v36;
LABEL_26:
    v31 = *v17;
    swift_retain(v9);
    result = swift_unknownObjectRelease(v31);
    if (!__OFSUB__(0, v22))
    {
      v33 = *(_QWORD *)(v9 + 16);
      v11 = __OFADD__(v22, v33);
      v34 = v22 + v33;
      if (!v11)
      {
        if (v34 >= v22)
        {
          if ((v34 & 0x8000000000000000) == 0)
          {
            *v17 = v9;
            v17[1] = (uint64_t)&__dst[-56 * v22];
            v17[2] = v22;
            v17[3] = (2 * v34) | 1;
            return result;
          }
          goto LABEL_39;
        }
LABEL_38:
        __break(1u);
LABEL_39:
        __break(1u);
        goto LABEL_40;
      }
LABEL_37:
      __break(1u);
      goto LABEL_38;
    }
LABEL_36:
    __break(1u);
    goto LABEL_37;
  }
  v22 = v4[2];
  v28 = v22 + a2;
  if (__OFADD__(v22, a2))
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  if (v28 < v22)
  {
LABEL_41:
    __break(1u);
    goto LABEL_42;
  }
  if (__OFSUB__(v28, v22))
  {
LABEL_42:
    __break(1u);
    goto LABEL_43;
  }
  swift_arrayInitWithCopy(__dst);
  a4((uint64_t)&__dst[56 * a2], a3);
  v29 = &v38[v28];
  if (__OFADD__(v28, v38))
  {
LABEL_43:
    __break(1u);
    goto LABEL_44;
  }
  v30 = (char *)((unint64_t)v4[3] >> 1);
  if ((uint64_t)v30 < (uint64_t)v29)
  {
LABEL_44:
    __break(1u);
    goto LABEL_45;
  }
  if (!__OFSUB__(v30, v29))
  {
    swift_arrayInitWithCopy(v37);
    goto LABEL_26;
  }
LABEL_45:
  __break(1u);
LABEL_46:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, 2, 1046, 0);
  __break(1u);
  return result;
}

_QWORD *sub_100027A50(_QWORD *result)
{
  uint64_t *v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  BOOL v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;

  v2 = v1[2];
  v3 = v1[3];
  v4 = v3 >> 1;
  v5 = __OFSUB__(v3 >> 1, v2);
  v6 = (v3 >> 1) - v2;
  if (v5)
  {
    __break(1u);
    goto LABEL_12;
  }
  v7 = (char *)result - v6;
  if (__OFSUB__(result, v6))
  {
LABEL_12:
    __break(1u);
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  if (!v7)
    return result;
  v8 = *v1;
  v9 = type metadata accessor for __ContiguousArrayStorageBase(0);
  v10 = swift_unknownObjectRetain(v8);
  result = (_QWORD *)swift_dynamicCastClass(v10, v9);
  if (!result)
  {
    swift_unknownObjectRelease(v8);
    result = &_swiftEmptyArrayStorage;
  }
  v11 = result[2];
  v5 = __OFADD__(v11, v7);
  v12 = &v7[v11];
  if (v5)
    goto LABEL_13;
  result[2] = v12;
  result = (_QWORD *)swift_release(result);
  v13 = &v7[v4];
  if (__OFADD__(v4, v7))
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  if (((unint64_t)v13 & 0x8000000000000000) != 0)
  {
LABEL_15:
    __break(1u);
    return result;
  }
  v1[3] = v3 & 1 | (2 * (_QWORD)v13);
  return result;
}

double *sub_100027B04(double *result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6)
{
  double *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v12;
  uint64_t v13;
  double *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  double *v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  BOOL v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  double *v30;
  uint64_t v31;
  _QWORD *v32;
  size_t v33;

  v8 = (a6 >> 1) - a5;
  if (__OFSUB__(a6 >> 1, a5))
  {
    __break(1u);
LABEL_32:
    if (v8 >= v7)
      goto LABEL_21;
LABEL_18:
    if (v8 + 0x4000000000000000 >= 0)
    {
      v8 *= 2;
      goto LABEL_21;
    }
    __break(1u);
    goto LABEL_35;
  }
  v7 = a2;
  v6 = result;
  if ((a6 & 1) == 0)
    goto LABEL_32;
  v12 = type metadata accessor for __ContiguousArrayStorageBase(0);
  v13 = swift_unknownObjectRetain(a3);
  v14 = (double *)swift_dynamicCastClass(v13, v12);
  if (!v14)
  {
    swift_unknownObjectRelease(a3);
    v14 = _swiftEmptyArrayStorage;
  }
  v15 = *((_QWORD *)v14 + 2);
  v16 = a4 + 56 * a5 + 56 * v8;
  if ((double *)v16 == &v14[7 * v15 + 4])
  {
    v18 = *((_QWORD *)v14 + 3);
    result = (double *)swift_release(v14);
    v19 = (v18 >> 1) - v15;
    v17 = v8 + v19;
    if (__OFADD__(v8, v19))
    {
LABEL_35:
      __break(1u);
      goto LABEL_36;
    }
  }
  else
  {
    swift_release(v14);
    v17 = v8;
  }
  v20 = swift_unknownObjectRetain(a3);
  v21 = (double *)swift_dynamicCastClass(v20, v12);
  if (v17 < v7)
  {
    if (!v21)
    {
      swift_unknownObjectRelease(a3);
      v21 = _swiftEmptyArrayStorage;
    }
    v22 = *((_QWORD *)v21 + 2);
    if ((double *)v16 == &v21[7 * v22 + 4])
    {
      v24 = *((_QWORD *)v21 + 3);
      result = (double *)swift_release(v21);
      v25 = (v24 >> 1) - v22;
      v26 = __OFADD__(v8, v25);
      v8 += v25;
      if (v26)
      {
LABEL_36:
        __break(1u);
        goto LABEL_37;
      }
    }
    else
    {
      result = (double *)swift_release(v21);
    }
    goto LABEL_18;
  }
  if (!v21)
  {
    swift_unknownObjectRelease(a3);
    v21 = _swiftEmptyArrayStorage;
  }
  v23 = *((_QWORD *)v21 + 2);
  if ((double *)v16 == &v21[7 * v23 + 4])
  {
    v27 = *((_QWORD *)v21 + 3);
    result = (double *)swift_release(v21);
    v28 = (v27 >> 1) - v23;
    v26 = __OFADD__(v8, v28);
    v8 += v28;
    if (!v26)
      goto LABEL_21;
LABEL_37:
    __break(1u);
    return result;
  }
  swift_release(v21);
LABEL_21:
  if (v8 <= v7)
    v29 = v7;
  else
    v29 = v8;
  if (v29 <= (uint64_t)v6)
    v30 = v6;
  else
    v30 = (double *)v29;
  if (!v30)
    return _swiftEmptyArrayStorage;
  v31 = sub_100003704(&qword_100081C88);
  v32 = (_QWORD *)swift_allocObject(v31, 56 * (_QWORD)v30 + 32, 7);
  v33 = j__malloc_size(v32);
  v32[2] = v6;
  v32[3] = 2 * ((uint64_t)(v33 - 32) / 56);
  return (double *)v32;
}

uint64_t (*sub_100027D24())()
{
  return SecurityAccessoryConfigurationIntentResponseCode.rawValue.getter;
}

uint64_t sub_100027D34(double *a1)
{
  _QWORD *v1;
  uint64_t isUniquelyReferenced_nonNull;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  double *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t result;
  uint64_t v17;
  BOOL v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  isUniquelyReferenced_nonNull = swift_isUniquelyReferenced_nonNull(*v1);
  if (!(_DWORD)isUniquelyReferenced_nonNull)
    return 0;
  v6 = v1[2];
  v5 = v1[3];
  v7 = (v5 >> 1) - v6;
  if (__OFSUB__(v5 >> 1, v6))
  {
    __break(1u);
    goto LABEL_18;
  }
  v8 = v1[1];
  if ((v5 & 1) == 0)
    goto LABEL_8;
  v9 = *v1;
  v10 = type metadata accessor for __ContiguousArrayStorageBase(0);
  v11 = swift_unknownObjectRetain(v9);
  v12 = (double *)swift_dynamicCastClass(v11, v10);
  if (!v12)
  {
    swift_unknownObjectRelease(v9);
    v12 = _swiftEmptyArrayStorage;
  }
  v13 = *((_QWORD *)v12 + 2);
  if ((double *)(v8 + 56 * v6 + 56 * v7) != &v12[7 * v13 + 4])
  {
    swift_release(v12);
LABEL_8:
    v14 = v7;
    goto LABEL_10;
  }
  v15 = *((_QWORD *)v12 + 3);
  result = swift_release(v12);
  v17 = (v15 >> 1) - v13;
  v18 = __OFADD__(v7, v17);
  v14 = v7 + v17;
  if (!v18)
  {
LABEL_10:
    if (v14 < (uint64_t)a1)
      return 0;
    v19 = *v1;
    v20 = type metadata accessor for __ContiguousArrayStorageBase(0);
    v21 = swift_unknownObjectRetain(v19);
    a1 = (double *)swift_dynamicCastClass(v21, v20);
    if (!a1)
    {
      swift_unknownObjectRelease(v19);
      a1 = _swiftEmptyArrayStorage;
    }
    v22 = (v8 + 56 * v6 - (uint64_t)a1 - 32) / 56;
    isUniquelyReferenced_nonNull = v7 + v22;
    if (!__OFADD__(v7, v22))
    {
      v4 = *((_QWORD *)a1 + 2);
      if (isUniquelyReferenced_nonNull >= v4)
        return (uint64_t)a1;
LABEL_19:
      sub_100027EB8(isUniquelyReferenced_nonNull, v4, 0);
      return (uint64_t)a1;
    }
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  __break(1u);
  return result;
}

char *sub_100027EB8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  char *result;
  BOOL v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  size_t v15;
  uint64_t v16;
  uint64_t v17;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_14;
  }
  v7 = *v3;
  v8 = v7 + 32 + 56 * a1;
  result = (char *)swift_arrayDestroy(v8, v4, &type metadata for ThreeColumnDataRow);
  v10 = __OFSUB__(a3, v4);
  v11 = a3 - v4;
  if (v10)
  {
LABEL_14:
    __break(1u);
LABEL_15:
    __break(1u);
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  if (!v11)
    goto LABEL_11;
  v12 = *(_QWORD *)(v7 + 16);
  v10 = __OFSUB__(v12, a2);
  v13 = v12 - a2;
  if (v10)
    goto LABEL_15;
  if (v13 < 0)
  {
LABEL_18:
    result = (char *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, 2, 1046, 0);
    __break(1u);
    return result;
  }
  result = (char *)(v8 + 56 * a3);
  v14 = (char *)(v7 + 32 + 56 * a2);
  v15 = 56 * v13;
  if (result != v14 || result >= &v14[v15])
    result = (char *)memmove(result, v14, v15);
  v16 = *(_QWORD *)(v7 + 16);
  v10 = __OFADD__(v16, v11);
  v17 = v16 + v11;
  if (v10)
    goto LABEL_16;
  *(_QWORD *)(v7 + 16) = v17;
LABEL_11:
  if (a3 > 0)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  return result;
}

double *sub_100027FE0(double *result, unint64_t a2)
{
  uint64_t *v2;
  unint64_t v3;
  uint64_t v4;
  double *v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  unint64_t v13;
  uint64_t (*v14)();
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  double *v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  BOOL v32;
  uint64_t v33;
  unint64_t v34;
  double *v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t *v43;
  double *v44;
  unint64_t v45;
  double *v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  unint64_t v50;
  char v51;
  double *v52;

  v3 = v2[3];
  v41 = v2[2];
  v4 = (v3 >> 1) - v41;
  if (__OFSUB__(v3 >> 1, v41))
  {
LABEL_43:
    __break(1u);
    goto LABEL_44;
  }
  v35 = result;
  v50 = *((_QWORD *)result + 2);
  if (v50 != a2)
  {
    if (v50 <= a2)
    {
LABEL_44:
      __break(1u);
      return result;
    }
    v6 = &result[7 * a2];
    v51 = *((_BYTE *)v6 + 80);
    v7 = v6[8];
    v8 = v6[9];
    v10 = v6[6];
    v9 = v6[7];
    v11 = v6[4];
    v12 = v6[5];
    swift_bridgeObjectRetain(*(_QWORD *)&v12);
    swift_bridgeObjectRetain(*(_QWORD *)&v9);
    result = (double *)swift_bridgeObjectRetain(*(_QWORD *)&v8);
    if (v12 != 0.0)
    {
      v13 = a2 + 1;
      v43 = v2;
      while (!__OFADD__(v4, 1))
      {
        v46 = sub_100027B04((double *)v4, v4 + 1, *v2, v2[1], v41, v3);
        v52 = v46;
        v14 = sub_100027D24();
        v16 = v15;
        sub_100027724((uint64_t *)&v52, v4, 0, (void (*)(uint64_t, uint64_t))v14);
        swift_release(v16);
        result = (double *)swift_release(v46);
        v17 = v43[3];
        v41 = v43[2];
        if (__OFSUB__(v17 >> 1, v41))
          goto LABEL_37;
        v40 = (v17 >> 1) - v41;
        v18 = *v43;
        v38 = v17 >> 1;
        v39 = v43[1];
        v42 = v43[3];
        v37 = *v43;
        if ((v17 & 1) != 0)
        {
          v19 = type metadata accessor for __ContiguousArrayStorageBase(0);
          v20 = swift_unknownObjectRetain(v18);
          v21 = (double *)swift_dynamicCastClass(v20, v19);
          if (!v21)
          {
            swift_unknownObjectRelease(v18);
            v21 = _swiftEmptyArrayStorage;
          }
          v22 = *((_QWORD *)v21 + 2);
          v36 = 56 * v41;
          if ((double *)(v39 + 56 * v41 + 56 * v40) == &v21[7 * v22 + 4])
          {
            v48 = *((_QWORD *)v21 + 3);
            result = (double *)swift_release(v21);
            v23 = (v48 >> 1) - v22;
            v47 = v40 + v23;
            if (__OFADD__(v40, v23))
              goto LABEL_42;
          }
          else
          {
            result = (double *)swift_release(v21);
            v47 = v40;
          }
        }
        else
        {
          v36 = 56 * v41;
          v47 = (v17 >> 1) - v41;
        }
        v24 = v50;
        if (v13 > v50)
          v24 = v13;
        v45 = v24;
        if (v4 < v47)
        {
          v25 = 0;
          v26 = v4 + 1;
          v44 = &v35[7 * v13];
          v27 = v39 + v36 + 56 * v4;
          while (1)
          {
            v4 = v26;
            v28 = v27 + v25 * 8;
            *(double *)v28 = v11;
            *(double *)(v28 + 8) = v12;
            *(double *)(v28 + 16) = v10;
            *(double *)(v28 + 24) = v9;
            *(double *)(v28 + 32) = v7;
            *(double *)(v28 + 40) = v8;
            *(_BYTE *)(v28 + 48) = v51 & 1;
            if (v50 == v13)
            {
              v51 = 0;
              v8 = 0.0;
              v7 = 0.0;
              v9 = 0.0;
              v10 = 0.0;
              v12 = 0.0;
              v11 = 0.0;
              v13 = v50;
              goto LABEL_25;
            }
            if (v45 == v13)
              break;
            ++v13;
            v51 = LOBYTE(v44[v25 + 10]);
            v7 = v44[v25 + 8];
            v8 = v44[v25 + 9];
            v10 = v44[v25 + 6];
            v9 = v44[v25 + 7];
            v11 = v44[v25 + 4];
            v12 = v44[v25 + 5];
            swift_bridgeObjectRetain(*(_QWORD *)&v12);
            swift_bridgeObjectRetain(*(_QWORD *)&v9);
            result = (double *)swift_bridgeObjectRetain(*(_QWORD *)&v8);
            if (v12 != 0.0)
            {
              v26 = v4 + 1;
              v25 += 7;
              if (v4 < v47)
                continue;
            }
            goto LABEL_25;
          }
          __break(1u);
          break;
        }
LABEL_25:
        v29 = v4 - v40;
        if (__OFSUB__(v4, v40))
          goto LABEL_38;
        if (v29)
        {
          v49 = type metadata accessor for __ContiguousArrayStorageBase(0);
          v30 = swift_unknownObjectRetain(v37);
          result = (double *)swift_dynamicCastClass(v30, v49);
          if (!result)
          {
            swift_unknownObjectRelease(v37);
            result = _swiftEmptyArrayStorage;
          }
          v31 = *((_QWORD *)result + 2);
          v32 = __OFADD__(v31, v29);
          v33 = v31 + v29;
          if (v32)
            goto LABEL_39;
          *((_QWORD *)result + 2) = v33;
          result = (double *)swift_release(result);
          v34 = v38 + v29;
          if (__OFADD__(v38, v29))
            goto LABEL_40;
          if ((v34 & 0x8000000000000000) != 0)
            goto LABEL_41;
          v42 = v42 & 1 | (2 * v34);
          v43[3] = v42;
        }
        v3 = v42;
        v2 = v43;
        if (v12 == 0.0)
          return result;
      }
      __break(1u);
LABEL_37:
      __break(1u);
LABEL_38:
      __break(1u);
LABEL_39:
      __break(1u);
LABEL_40:
      __break(1u);
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      goto LABEL_43;
    }
  }
  return result;
}

double *sub_100028378(uint64_t a1)
{
  uint64_t *v1;
  unint64_t v2;
  uint64_t v3;
  int64_t v4;
  int64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  double *v11;
  uint64_t v12;
  int64_t v13;
  unint64_t v14;
  uint64_t v15;
  BOOL v16;
  int64_t v17;
  uint64_t v18;
  double *result;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  double *v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  int64_t v32;

  v3 = v1[2];
  v2 = v1[3];
  v4 = (v2 >> 1) - v3;
  if (__OFSUB__(v2 >> 1, v3))
  {
    __break(1u);
    goto LABEL_37;
  }
  v6 = *(_QWORD *)(a1 + 16);
  if ((v2 & 1) == 0)
    goto LABEL_7;
  v7 = *v1;
  v8 = v1[1];
  v9 = type metadata accessor for __ContiguousArrayStorageBase(0);
  v10 = swift_unknownObjectRetain(v7);
  v11 = (double *)swift_dynamicCastClass(v10, v9);
  if (!v11)
  {
    swift_unknownObjectRelease(v7);
    v11 = _swiftEmptyArrayStorage;
  }
  v12 = *((_QWORD *)v11 + 2);
  if ((double *)(v8 + 56 * v3 + 56 * v4) != &v11[7 * v12 + 4])
  {
    swift_release(v11);
LABEL_7:
    v13 = v4;
    goto LABEL_9;
  }
  v14 = *((_QWORD *)v11 + 3);
  swift_release(v11);
  v15 = (v14 >> 1) - v12;
  v16 = __OFADD__(v4, v15);
  v13 = v4 + v15;
  if (v16)
  {
LABEL_43:
    __break(1u);
    goto LABEL_44;
  }
LABEL_9:
  v17 = v4 + v6;
  if (__OFADD__(v4, v6))
  {
LABEL_37:
    __break(1u);
LABEL_38:
    __break(1u);
    goto LABEL_39;
  }
  if (v13 < v17)
  {
    if (v13 + 0x4000000000000000 < 0)
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      goto LABEL_43;
    }
    v18 = 2 * v13;
    if (v18 > v17)
      v17 = v18;
  }
  result = (double *)sub_100027488(v17);
  v21 = v1[2];
  v20 = v1[3];
  v22 = (v20 >> 1) - v21;
  if (__OFSUB__(v20 >> 1, v21))
    goto LABEL_38;
  v23 = v1[1] + 56 * v21 + 56 * v22;
  if ((v20 & 1) == 0)
  {
LABEL_20:
    v29 = v22;
    goto LABEL_22;
  }
  v24 = *v1;
  v25 = type metadata accessor for __ContiguousArrayStorageBase(0);
  v26 = swift_unknownObjectRetain(v24);
  v27 = (double *)swift_dynamicCastClass(v26, v25);
  if (!v27)
  {
    swift_unknownObjectRelease(v24);
    v27 = _swiftEmptyArrayStorage;
  }
  v28 = *((_QWORD *)v27 + 2);
  if ((double *)v23 != &v27[7 * v28 + 4])
  {
    result = (double *)swift_release(v27);
    goto LABEL_20;
  }
  v30 = *((_QWORD *)v27 + 3);
  result = (double *)swift_release(v27);
  v31 = (v30 >> 1) - v28;
  v16 = __OFADD__(v22, v31);
  v29 = v22 + v31;
  if (v16)
  {
LABEL_44:
    __break(1u);
LABEL_45:
    result = (double *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
    __break(1u);
    return result;
  }
LABEL_22:
  v32 = v29 - v22;
  if (__OFSUB__(v29, v22))
  {
LABEL_39:
    __break(1u);
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  if (!v6)
    goto LABEL_33;
  if (v32 < v6)
    goto LABEL_40;
  if (a1 + 32 < v23 + 56 * v6 && v23 < a1 + 32 + 56 * v6)
    goto LABEL_45;
  result = (double *)swift_arrayInitWithCopy(v23);
  if (v6 > 0)
  {
    if (!__OFADD__(v22, v6))
    {
      result = (double *)sub_100027A50((_QWORD *)(v22 + v6));
      goto LABEL_33;
    }
    goto LABEL_42;
  }
LABEL_33:
  if (v6 == v32)
    return sub_100027FE0((double *)a1, v6);
  return result;
}

double *sub_1000285F8(double *result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t *v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t (*v13)();
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  double *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  BOOL v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  double *v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  double *v51;

  v39 = *(_QWORD *)(v1 + 16);
  v40 = *(_QWORD *)(v1 + 24);
  v2 = (v40 >> 1) - v39;
  if (__OFSUB__(v40 >> 1, v39))
  {
LABEL_47:
    __break(1u);
LABEL_48:
    __break(1u);
    return result;
  }
  v36 = (uint64_t *)v1;
  v3 = *((_QWORD *)result + 4);
  v50 = *((_QWORD *)result + 3) >> 1;
  if (v3 != v50)
  {
    v41 = *((_QWORD *)result + 2);
    if (v3 < v41 || v3 >= v50)
      goto LABEL_48;
    v33 = *((_QWORD *)result + 1);
    v5 = (uint64_t *)(v33 + 56 * v3);
    v6 = *((_BYTE *)v5 + 48);
    v8 = v5[4];
    v7 = v5[5];
    v10 = v5[2];
    v9 = v5[3];
    v11 = *v5;
    v12 = v5[1];
    swift_bridgeObjectRetain(v12);
    swift_bridgeObjectRetain(v9);
    result = (double *)swift_bridgeObjectRetain(v7);
    if (v12)
    {
      v48 = v3 + 1;
      while (!__OFADD__(v2, 1))
      {
        v45 = sub_100027B04((double *)v2, v2 + 1, *v36, v36[1], v39, v40);
        v51 = v45;
        v13 = sub_100027D24();
        v15 = v14;
        sub_100027724((uint64_t *)&v51, v2, 0, (void (*)(uint64_t, uint64_t))v13);
        swift_release(v15);
        result = (double *)swift_release(v45);
        v16 = v36[3];
        v39 = v36[2];
        v35 = v16 >> 1;
        if (__OFSUB__(v16 >> 1, v39))
          goto LABEL_42;
        v38 = (v16 >> 1) - v39;
        v17 = *v36;
        v43 = v36[1];
        v40 = v36[3];
        v37 = *v36;
        if ((v16 & 1) != 0)
        {
          v18 = type metadata accessor for __ContiguousArrayStorageBase(0);
          v19 = swift_unknownObjectRetain(v17);
          v20 = (double *)swift_dynamicCastClass(v19, v18);
          if (!v20)
          {
            swift_unknownObjectRelease(v17);
            v20 = _swiftEmptyArrayStorage;
          }
          v21 = *((_QWORD *)v20 + 2);
          v34 = 56 * v39;
          if ((double *)(v43 + 56 * v39 + 56 * v38) == &v20[7 * v21 + 4])
          {
            v47 = *((_QWORD *)v20 + 3);
            result = (double *)swift_release(v20);
            v22 = (v47 >> 1) - v21;
            v46 = v38 + v22;
            if (__OFADD__(v38, v22))
              goto LABEL_46;
          }
          else
          {
            result = (double *)swift_release(v20);
            v46 = v38;
          }
        }
        else
        {
          v34 = 56 * v39;
          v46 = (v16 >> 1) - v39;
        }
        if (v2 < v46)
        {
          v23 = 0;
          v24 = v2 + 1;
          v25 = v48;
          v42 = v33 + 56 * v48;
          v44 = v43 + v34 + 56 * v2;
          while (1)
          {
            v2 = v24;
            v26 = v44 + v23;
            *(_QWORD *)v26 = v11;
            *(_QWORD *)(v26 + 8) = v12;
            *(_QWORD *)(v26 + 16) = v10;
            *(_QWORD *)(v26 + 24) = v9;
            *(_QWORD *)(v26 + 32) = v8;
            *(_QWORD *)(v26 + 40) = v7;
            *(_BYTE *)(v26 + 48) = v6 & 1;
            if (v50 == v25)
            {
              v6 = 0;
              v7 = 0;
              v8 = 0;
              v9 = 0;
              v10 = 0;
              v12 = 0;
              v11 = 0;
              v25 = v50;
              goto LABEL_31;
            }
            if (v48 < v41 || v25 >= v50)
              break;
            ++v25;
            v6 = *(_BYTE *)(v42 + v23 + 48);
            v8 = *(_QWORD *)(v42 + v23 + 32);
            v7 = *(_QWORD *)(v42 + v23 + 40);
            v10 = *(_QWORD *)(v42 + v23 + 16);
            v9 = *(_QWORD *)(v42 + v23 + 24);
            v11 = *(_QWORD *)(v42 + v23);
            v12 = *(_QWORD *)(v42 + v23 + 8);
            swift_bridgeObjectRetain(v12);
            swift_bridgeObjectRetain(v9);
            result = (double *)swift_bridgeObjectRetain(v7);
            if (v12)
            {
              v24 = v2 + 1;
              v23 += 56;
              if (v2 < v46)
                continue;
            }
            goto LABEL_31;
          }
          __break(1u);
          break;
        }
        v25 = v48;
LABEL_31:
        v27 = v2 - v38;
        if (__OFSUB__(v2, v38))
          goto LABEL_43;
        if (v27)
        {
          v49 = type metadata accessor for __ContiguousArrayStorageBase(0);
          v28 = swift_unknownObjectRetain(v37);
          result = (double *)swift_dynamicCastClass(v28, v49);
          if (!result)
          {
            swift_unknownObjectRelease(v37);
            result = _swiftEmptyArrayStorage;
          }
          v29 = *((_QWORD *)result + 2);
          v30 = __OFADD__(v29, v27);
          v31 = v29 + v27;
          if (v30)
            goto LABEL_44;
          *((_QWORD *)result + 2) = v31;
          result = (double *)swift_release(result);
          v32 = v35 + v27;
          if (__OFADD__(v35, v27))
            goto LABEL_45;
          if ((v32 & 0x8000000000000000) != 0)
          {
            __break(1u);
            return result;
          }
          v40 = v40 & 1 | (2 * v32);
          v36[3] = v40;
        }
        v48 = v25;
        if (!v12)
          return result;
      }
      __break(1u);
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
LABEL_46:
      __break(1u);
      goto LABEL_47;
    }
  }
  return result;
}

double *sub_1000289A4(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t *v4;
  double v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  int64_t v9;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  double *v16;
  uint64_t v17;
  int64_t v18;
  unint64_t v19;
  uint64_t v20;
  BOOL v21;
  int64_t v22;
  uint64_t v23;
  double *result;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  double *v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  double v41[5];

  *(_QWORD *)&v5 = a4 >> 1;
  v6 = (a4 >> 1) - a3;
  if (__OFSUB__(a4 >> 1, a3))
  {
    __break(1u);
    goto LABEL_38;
  }
  v8 = v4[2];
  v7 = v4[3];
  v9 = (v7 >> 1) - v8;
  if (__OFSUB__(v7 >> 1, v8))
  {
LABEL_38:
    __break(1u);
    goto LABEL_39;
  }
  if ((v7 & 1) == 0)
  {
LABEL_8:
    v18 = v9;
    goto LABEL_10;
  }
  v13 = *v4;
  v12 = v4[1];
  v14 = type metadata accessor for __ContiguousArrayStorageBase(0);
  v15 = swift_unknownObjectRetain(v13);
  v16 = (double *)swift_dynamicCastClass(v15, v14);
  if (!v16)
  {
    swift_unknownObjectRelease(v13);
    v16 = _swiftEmptyArrayStorage;
  }
  v17 = *((_QWORD *)v16 + 2);
  if ((double *)(v12 + 56 * v8 + 56 * v9) != &v16[7 * v17 + 4])
  {
    swift_release(v16);
    goto LABEL_8;
  }
  v19 = *((_QWORD *)v16 + 3);
  swift_release(v16);
  v20 = (v19 >> 1) - v17;
  v21 = __OFADD__(v9, v20);
  v18 = v9 + v20;
  if (v21)
  {
LABEL_45:
    __break(1u);
    goto LABEL_46;
  }
LABEL_10:
  v22 = v9 + v6;
  if (__OFADD__(v9, v6))
  {
LABEL_39:
    __break(1u);
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  if (v18 < v22)
  {
    if (v18 + 0x4000000000000000 < 0)
    {
LABEL_43:
      __break(1u);
      goto LABEL_44;
    }
    v23 = 2 * v18;
    if (v23 > v22)
      v22 = v23;
  }
  result = (double *)sub_100027488(v22);
  v26 = v4[2];
  v25 = v4[3];
  v27 = (v25 >> 1) - v26;
  if (__OFSUB__(v25 >> 1, v26))
    goto LABEL_40;
  v28 = v4[1] + 56 * v26 + 56 * v27;
  if ((v25 & 1) == 0)
  {
LABEL_21:
    v34 = v27;
    goto LABEL_23;
  }
  v29 = *v4;
  v30 = type metadata accessor for __ContiguousArrayStorageBase(0);
  v31 = swift_unknownObjectRetain(v29);
  v32 = (double *)swift_dynamicCastClass(v31, v30);
  if (!v32)
  {
    swift_unknownObjectRelease(v29);
    v32 = _swiftEmptyArrayStorage;
  }
  v33 = *((_QWORD *)v32 + 2);
  if ((double *)v28 != &v32[7 * v33 + 4])
  {
    result = (double *)swift_release(v32);
    goto LABEL_21;
  }
  v35 = *((_QWORD *)v32 + 3);
  result = (double *)swift_release(v32);
  v36 = (v35 >> 1) - v33;
  v21 = __OFADD__(v27, v36);
  v34 = v27 + v36;
  if (v21)
  {
LABEL_46:
    __break(1u);
    goto LABEL_47;
  }
LABEL_23:
  v37 = v34 - v27;
  if (__OFSUB__(v34, v27))
  {
LABEL_41:
    __break(1u);
LABEL_42:
    __break(1u);
    goto LABEL_43;
  }
  if (*(_QWORD *)&v5 == a3)
  {
    if (v6 <= 0)
    {
      v6 = 0;
      v5 = *(double *)&a3;
      goto LABEL_34;
    }
    goto LABEL_42;
  }
  if (v37 < v6)
  {
LABEL_44:
    __break(1u);
    goto LABEL_45;
  }
  if (v6 < 0)
  {
LABEL_48:
    result = (double *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
LABEL_50:
    __break(1u);
    return result;
  }
  v38 = a2 + 56 * a3;
  if (v38 < v28 + 56 * v6 && v28 < v38 + 56 * v6)
  {
    result = (double *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
    goto LABEL_50;
  }
  result = (double *)swift_arrayInitWithCopy(v28);
  if (v6)
  {
    if (__OFADD__(v27, v6))
    {
LABEL_47:
      __break(1u);
      goto LABEL_48;
    }
    result = (double *)sub_100027A50((_QWORD *)(v27 + v6));
  }
LABEL_34:
  if (v6 == v37)
  {
    *(_QWORD *)&v41[0] = a1;
    *(_QWORD *)&v41[1] = a2;
    *(_QWORD *)&v41[2] = a3;
    *(_QWORD *)&v41[3] = a4;
    v41[4] = v5;
    return sub_1000285F8(v41);
  }
  return result;
}

unint64_t sub_100028C9C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100082150;
  if (!qword_100082150)
  {
    v1 = type metadata accessor for Date(255);
    result = swift_getWitnessTable(&protocol conformance descriptor for Date, v1);
    atomic_store(result, (unint64_t *)&qword_100082150);
  }
  return result;
}

uint64_t sub_100028CE4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100003704(&qword_100082158);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_100028D2C(uint64_t a1)
{
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 32));
  return a1;
}

ValueMetadata *type metadata accessor for HomeSummaryWidget()
{
  return &type metadata for HomeSummaryWidget;
}

uint64_t sub_100028D64(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_10006BC34, 1);
}

int *sub_100028D74@<X0>(uint64_t a1@<X8>)
{
  unint64_t v1;
  uint64_t v2;
  uint64_t v4;
  Swift::String v5;
  void *object;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  double v19;
  uint64_t v20;
  uint64_t v21;
  int *result;
  uint64_t *v23;
  double *v24;
  uint64_t v25;
  uint64_t v26[2];

  v4 = qword_10008A6E0 + 1;
  if (__OFADD__(qword_10008A6E0, 1))
  {
    __break(1u);
  }
  else
  {
    ++qword_10008A6E0;
    strcpy((char *)v26, "Home Summary ");
    HIWORD(v26[1]) = -4864;
    v25 = v4;
    v5._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
    object = v5._object;
    String.append(_:)(v5);
    swift_bridgeObjectRelease(object);
    v2 = v26[0];
    v1 = v26[1];
    if (qword_100081680 == -1)
      goto LABEL_3;
  }
  swift_once(&qword_100081680, sub_100022448);
LABEL_3:
  v7 = type metadata accessor for Logger(0);
  sub_100003884(v7, (uint64_t)static DataModel.widgetLogger);
  v8 = swift_bridgeObjectRetain(v1);
  v9 = Logger.logObject.getter(v8);
  v10 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v9, v10))
  {
    v11 = swift_slowAlloc(22, -1);
    v12 = swift_slowAlloc(64, -1);
    v26[0] = v12;
    *(_DWORD *)v11 = 136315394;
    swift_bridgeObjectRetain(v1);
    v25 = sub_10001DF04(v2, v1, v26);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v25, v26, v11 + 4, v11 + 12);
    swift_bridgeObjectRelease_n(v1, 3);
    *(_WORD *)(v11 + 12) = 2080;
    v25 = sub_10001DF04(0xD000000000000010, 0x8000000100067EA0, v26);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v25, v26, v11 + 14, v11 + 22);
    swift_arrayDestroy(v12, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v12, -1, -1);
    swift_slowDealloc(v11, -1, -1);

  }
  else
  {

    v13 = swift_bridgeObjectRelease_n(v1, 2);
  }
  Date.init()(v13);
  if (qword_1000816A8 != -1)
    swift_once(&qword_1000816A8, sub_10002A594);
  v15 = qword_10008A6D0;
  v14 = *(_QWORD *)algn_10008A6D8;
  v16 = qword_100081740;
  swift_bridgeObjectRetain(*(_QWORD *)algn_10008A6D8);
  if (v16 != -1)
    swift_once(&qword_100081740, sub_10005AE7C);
  v17 = qword_10008A8B0;
  v18 = swift_bridgeObjectRetain(qword_10008A8B0);
  v19 = TimelineProviderContext.displaySize.getter(v18);
  v21 = v20;
  result = (int *)type metadata accessor for ThreeColumnDataEntry(0);
  v23 = (uint64_t *)(a1 + result[5]);
  *v23 = v15;
  v23[1] = v14;
  *(_QWORD *)(a1 + result[6]) = v17;
  v24 = (double *)(a1 + result[7]);
  *v24 = v19;
  *((_QWORD *)v24 + 1) = v21;
  return result;
}

uint64_t sub_100029080(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  Swift::String v15;
  void *object;
  uint64_t v17;
  uint64_t v18;
  NSObject *v19;
  os_log_type_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  char *v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43[2];

  v41 = a2;
  v7 = type metadata accessor for TimelineProviderContext(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(_QWORD *)(v8 + 64);
  __chkstk_darwin(v7);
  v10 = (char *)&v35 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_100003704(&qword_100081DB0);
  __chkstk_darwin(v11);
  v13 = (char *)&v35 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = qword_10008A6E0 + 1;
  if (__OFADD__(qword_10008A6E0, 1))
  {
    __break(1u);
  }
  else
  {
    v39 = a1;
    v40 = v13;
    ++qword_10008A6E0;
    strcpy((char *)v43, "Home Summary ");
    HIWORD(v43[1]) = -4864;
    v42 = v14;
    v15._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
    object = v15._object;
    String.append(_:)(v15);
    swift_bridgeObjectRelease(object);
    v3 = v43[0];
    v4 = v43[1];
    if (qword_100081680 == -1)
      goto LABEL_3;
  }
  swift_once(&qword_100081680, sub_100022448);
LABEL_3:
  v17 = type metadata accessor for Logger(0);
  sub_100003884(v17, (uint64_t)static DataModel.widgetLogger);
  v18 = swift_bridgeObjectRetain_n(v4, 2);
  v19 = Logger.logObject.getter(v18);
  v20 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v19, v20))
  {
    v21 = swift_slowAlloc(22, -1);
    v36 = v9;
    v22 = v21;
    v23 = swift_slowAlloc(64, -1);
    v43[0] = v23;
    *(_DWORD *)v22 = 136315394;
    v37 = v10;
    swift_bridgeObjectRetain(v4);
    v42 = sub_10001DF04(v3, v4, v43);
    v38 = v8;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v42, v43, v22 + 4, v22 + 12);
    swift_bridgeObjectRelease_n(v4, 3);
    *(_WORD *)(v22 + 12) = 2080;
    v42 = sub_10001DF04(0xD00000000000001BLL, 0x8000000100067E80, v43);
    v10 = v37;
    v8 = v38;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v42, v43, v22 + 14, v22 + 22);
    swift_arrayDestroy(v23, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v23, -1, -1);
    v24 = v22;
    v9 = v36;
    swift_slowDealloc(v24, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n(v4, 2);
  }
  v25 = v39;
  v26 = type metadata accessor for TaskPriority(0);
  v27 = (uint64_t)v40;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 56))(v40, 1, 1, v26);
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v10, v25, v7);
  v28 = *(unsigned __int8 *)(v8 + 80);
  v29 = (v28 + 48) & ~v28;
  v30 = (v9 + v29 + 7) & 0xFFFFFFFFFFFFFFF8;
  v31 = (char *)swift_allocObject(&unk_10007DD38, v30 + 16, v28 | 7);
  *((_QWORD *)v31 + 2) = 0;
  *((_QWORD *)v31 + 3) = 0;
  *((_QWORD *)v31 + 4) = v41;
  *((_QWORD *)v31 + 5) = a3;
  (*(void (**)(char *, char *, uint64_t))(v8 + 32))(&v31[v29], v10, v7);
  v32 = (uint64_t *)&v31[v30];
  *v32 = v3;
  v32[1] = v4;
  swift_retain(a3);
  v33 = sub_1000341A0(v27, (uint64_t)&unk_100082250, (uint64_t)v31);
  return swift_release(v33);
}

uint64_t sub_100029428(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v8;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;

  v8[2] = a4;
  v8[3] = a5;
  v12 = type metadata accessor for ThreeColumnDataEntry(0);
  v13 = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v12 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v8[4] = v13;
  v14 = (_QWORD *)swift_task_alloc(dword_100082244);
  v8[5] = v14;
  *v14 = v8;
  v14[1] = sub_100013628;
  return sub_1000294BC(v13, a6, a7, a8);
}

uint64_t sub_1000294BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;

  v4[13] = a3;
  v4[14] = a4;
  v4[11] = a1;
  v4[12] = a2;
  v5 = type metadata accessor for Date(0);
  v4[15] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v4[16] = v6;
  v4[17] = swift_task_alloc((*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for Locale(0);
  v4[18] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v7 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for String.LocalizationValue(0);
  v4[19] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v8 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for WidgetFamily(0);
  v4[20] = v9;
  v10 = *(_QWORD *)(v9 - 8);
  v4[21] = v10;
  v11 = (*(_QWORD *)(v10 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v4[22] = swift_task_alloc(v11);
  v4[23] = swift_task_alloc(v11);
  return swift_task_switch(sub_100029598, 0, 0);
}

uint64_t sub_100029598()
{
  _QWORD *v0;
  void **v1;
  void *v2;
  uint64_t v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  id v8;
  NSObject *v9;
  os_log_type_t v10;
  _BOOL4 v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  id v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void (*v26)(uint64_t, uint64_t);
  uint64_t v27;
  _QWORD *v28;
  uint64_t v30;
  void *v31;
  uint64_t v32;

  if (qword_100081670 != -1)
    swift_once(&qword_100081670, sub_100021008);
  v1 = (void **)(qword_10008A648 + OBJC_IVAR____TtC20HomeWidgetLockScreen9DataModel_currentHome);
  swift_beginAccess(qword_10008A648 + OBJC_IVAR____TtC20HomeWidgetLockScreen9DataModel_currentHome, v0 + 2, 0, 0);
  v2 = *v1;
  v0[24] = *v1;
  v3 = qword_100081680;
  v4 = v2;
  if (v3 != -1)
    swift_once(&qword_100081680, sub_100022448);
  v5 = v0[14];
  v6 = type metadata accessor for Logger(0);
  v0[25] = sub_100003884(v6, (uint64_t)static DataModel.widgetLogger);
  v7 = v4;
  swift_bridgeObjectRetain_n(v5, 2);
  v8 = v7;
  v9 = Logger.logObject.getter(v8);
  v10 = static os_log_type_t.default.getter();
  v11 = os_log_type_enabled(v9, v10);
  v12 = v0[14];
  if (v11)
  {
    v13 = v0[13];
    v14 = swift_slowAlloc(22, -1);
    v30 = swift_slowAlloc(64, -1);
    v32 = v30;
    *(_DWORD *)v14 = 136315394;
    swift_bridgeObjectRetain(v12);
    v0[9] = sub_10001DF04(v13, v12, &v32);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 9, v0 + 10, v14 + 4, v14 + 12);
    swift_bridgeObjectRelease_n(v12, 3);
    *(_WORD *)(v14 + 12) = 2080;
    v31 = v2;
    if (v2)
    {
      v15 = objc_msgSend(v8, "name");
      v16 = static String._unconditionallyBridgeFromObjectiveC(_:)(v15);
      v18 = v17;

    }
    else
    {
      v18 = 0xE300000000000000;
      v16 = 7104878;
    }
    v0[10] = sub_10001DF04(v16, v18, &v32);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 10, v0 + 11, v14 + 14, v14 + 22);
    swift_bridgeObjectRelease(v18);

    swift_arrayDestroy(v30, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v30, -1, -1);
    swift_slowDealloc(v14, -1, -1);

    v2 = v31;
  }
  else
  {
    swift_bridgeObjectRelease_n(v0[14], 2);

  }
  v20 = v0[22];
  v19 = v0[23];
  v21 = v0[20];
  v22 = v0[21];
  TimelineProviderContext.family.getter();
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v22 + 104))(v20, enum case for WidgetFamily.systemSmall(_:), v21);
  v23 = sub_100015884(&qword_100081DE0, (uint64_t (*)(uint64_t))&type metadata accessor for WidgetFamily, (uint64_t)&protocol conformance descriptor for WidgetFamily);
  dispatch thunk of RawRepresentable.rawValue.getter(v21, v23);
  dispatch thunk of RawRepresentable.rawValue.getter(v21, v23);
  v25 = v0[5];
  v24 = v0[6];
  v26 = *(void (**)(uint64_t, uint64_t))(v22 + 8);
  v26(v20, v21);
  v26(v19, v21);
  if (v25 == v24)
    v27 = 5;
  else
    v27 = 3;
  v28 = (_QWORD *)swift_task_alloc(dword_100082144);
  v0[26] = v28;
  *v28 = v0;
  v28[1] = sub_100029948;
  return sub_1000264DC((uint64_t)v2, v0[13], v0[14], v27);
}

uint64_t sub_100029948(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 208);
  *(_QWORD *)(*(_QWORD *)v1 + 216) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_1000299A4, 0, 0);
}

uint64_t sub_1000299A4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  id v18;
  id v19;
  Swift::Bool v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  double v42;
  uint64_t v43;
  uint64_t v44;
  int *v45;
  uint64_t *v46;
  double *v47;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;

  v1 = *(_QWORD *)(v0 + 216);
  swift_bridgeObjectRetain_n(*(_QWORD *)(v0 + 112), 2);
  v2 = swift_bridgeObjectRetain_n(v1, 2);
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = *(_QWORD *)(v0 + 216);
    v7 = *(_QWORD *)(v0 + 104);
    v6 = *(_QWORD *)(v0 + 112);
    v8 = swift_slowAlloc(22, -1);
    v52 = swift_slowAlloc(64, -1);
    v54 = v52;
    *(_DWORD *)v8 = 136315394;
    swift_bridgeObjectRetain(v6);
    *(_QWORD *)(v0 + 56) = sub_10001DF04(v7, v6, &v54);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 56, v0 + 64, v8 + 4, v8 + 12);
    swift_bridgeObjectRelease_n(v6, 3);
    *(_WORD *)(v8 + 12) = 2080;
    v9 = swift_bridgeObjectRetain(v5);
    v10 = Array.description.getter(v9, &type metadata for ThreeColumnDataRow);
    v12 = v11;
    swift_bridgeObjectRelease(v5);
    *(_QWORD *)(v0 + 64) = sub_10001DF04(v10, v12, &v54);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 64, v0 + 72, v8 + 14, v8 + 22);
    swift_bridgeObjectRelease(v12);
    swift_bridgeObjectRelease_n(v5, 2);
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "...{%s} homeOverviewSummaryRows are %s", (uint8_t *)v8, 0x16u);
    swift_arrayDestroy(v52, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v52, -1, -1);
    swift_slowDealloc(v8, -1, -1);
  }
  else
  {
    v13 = *(_QWORD *)(v0 + 216);
    swift_bridgeObjectRelease_n(*(_QWORD *)(v0 + 112), 2);
    swift_bridgeObjectRelease_n(v13, 2);
  }

  if (qword_1000816A8 != -1)
    swift_once(&qword_1000816A8, sub_10002A594);
  v14 = *(void **)(v0 + 192);
  v15 = qword_10008A6D0;
  v16 = *(_QWORD *)algn_10008A6D8;
  if (v14)
  {
    v17 = v14;
    swift_bridgeObjectRetain(v16);
    v18 = objc_msgSend(v17, "currentUser");
    LOBYTE(v17) = HMHome.shouldShowNoAccessOutsideOfSchedule(forRestrictedUser:)((HMUser)v18);

    if ((v17 & 1) != 0
      || (v19 = objc_msgSend(*(id *)(v0 + 192), "currentUser"),
          v20 = HMHome.shouldShowNoAccessAwayFromHome(forRestrictedUser:)((HMUser)v19),
          v19,
          v20))
    {
      v21 = *(void **)(v0 + 192);
      v23 = *(_QWORD *)(v0 + 144);
      v22 = *(_QWORD *)(v0 + 152);
      swift_bridgeObjectRelease(v16);
      v24 = String.LocalizationValue.init(stringLiteral:)(0xD000000000000028, 0x8000000100068800);
      static Locale.current.getter(v24);
      v15 = String.init(localized:table:bundle:locale:comment:)(v22, 0xD000000000000022, 0x8000000100068830, 0, v23, 0, 0, 256);
      v16 = v25;

    }
    else
    {

    }
  }
  else
  {
    v26 = swift_bridgeObjectRetain(*(_QWORD *)algn_10008A6D8);
  }
  v53 = v16;
  v27 = *(_QWORD *)(v0 + 216);
  v28 = Date.init()(v26);
  v29 = *(_QWORD *)(v0 + 216);
  v51 = v15;
  if (!*(_QWORD *)(v27 + 16))
  {
    v31 = *(_QWORD *)(v0 + 144);
    v30 = *(_QWORD *)(v0 + 152);
    swift_bridgeObjectRelease(v29);
    v32 = sub_100003704(&qword_100081C88);
    v29 = swift_allocObject(v32, 88, 7);
    *(_OWORD *)(v29 + 16) = xmmword_1000607D0;
    v33 = String.LocalizationValue.init(stringLiteral:)(0xD00000000000001ELL, 0x8000000100067E40);
    static Locale.current.getter(v33);
    v28 = String.init(localized:table:bundle:locale:comment:)(v30, 0x696C61636F4C4648, 0xED0000656C62617ALL, 0, v31, 0, 0, 256);
    *(_QWORD *)(v29 + 32) = 0xD000000000000018;
    *(_QWORD *)(v29 + 40) = 0x8000000100067E20;
    *(_QWORD *)(v29 + 48) = 0;
    *(_QWORD *)(v29 + 56) = 0xE000000000000000;
    *(_QWORD *)(v29 + 64) = v28;
    *(_QWORD *)(v29 + 72) = v34;
    *(_BYTE *)(v29 + 80) = 0;
  }
  v35 = *(_QWORD *)(v0 + 184);
  v36 = *(void **)(v0 + 192);
  v37 = *(_QWORD *)(v0 + 176);
  v38 = *(_QWORD *)(v0 + 136);
  v49 = *(_QWORD *)(v0 + 152);
  v50 = *(_QWORD *)(v0 + 144);
  v39 = *(_QWORD *)(v0 + 120);
  v40 = *(_QWORD *)(v0 + 128);
  v41 = *(_QWORD *)(v0 + 88);
  v42 = TimelineProviderContext.displaySize.getter(v28);
  v44 = v43;

  (*(void (**)(uint64_t, uint64_t, uint64_t))(v40 + 32))(v41, v38, v39);
  v45 = (int *)type metadata accessor for ThreeColumnDataEntry(0);
  v46 = (uint64_t *)(v41 + v45[5]);
  *v46 = v51;
  v46[1] = v53;
  *(_QWORD *)(v41 + v45[6]) = v29;
  v47 = (double *)(v41 + v45[7]);
  *v47 = v42;
  *((_QWORD *)v47 + 1) = v44;
  swift_task_dealloc(v35);
  swift_task_dealloc(v37);
  swift_task_dealloc(v49);
  swift_task_dealloc(v50);
  swift_task_dealloc(v38);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100029E4C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  Swift::String v15;
  void *object;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  NSObject *v20;
  os_log_type_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  NSObject *v29;
  os_log_type_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  id v35;
  NSString v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  char *v42;
  char *v43;
  uint64_t v44;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54[2];

  v7 = type metadata accessor for TimelineProviderContext(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(_QWORD *)(v8 + 64);
  __chkstk_darwin(v7);
  v10 = (char *)&v46 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_100003704(&qword_100081DB0);
  __chkstk_darwin(v11);
  v13 = (char *)&v46 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = qword_10008A6E0 + 1;
  if (__OFADD__(qword_10008A6E0, 1))
  {
    __break(1u);
  }
  else
  {
    v50 = v9;
    v51 = v13;
    ++qword_10008A6E0;
    strcpy((char *)v54, "Home Summary ");
    HIWORD(v54[1]) = -4864;
    v53 = v14;
    v15._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
    object = v15._object;
    String.append(_:)(v15);
    swift_bridgeObjectRelease(object);
    v3 = v54[1];
    v52 = v54[0];
    if (qword_100081680 == -1)
      goto LABEL_3;
  }
  swift_once(&qword_100081680, sub_100022448);
LABEL_3:
  v17 = type metadata accessor for Logger(0);
  v18 = sub_100003884(v17, (uint64_t)static DataModel.widgetLogger);
  v19 = swift_bridgeObjectRetain_n(v3, 2);
  v20 = Logger.logObject.getter(v19);
  v21 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v20, v21))
  {
    v22 = swift_slowAlloc(22, -1);
    v46 = v18;
    v23 = v22;
    v24 = swift_slowAlloc(64, -1);
    v48 = v10;
    v25 = v24;
    v54[0] = v24;
    *(_DWORD *)v23 = 136315394;
    v49 = v8;
    v47 = a3;
    swift_bridgeObjectRetain(v3);
    v53 = sub_10001DF04(v52, v3, v54);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v53, v54, v23 + 4, v23 + 12);
    swift_bridgeObjectRelease_n(v3, 3);
    *(_WORD *)(v23 + 12) = 2080;
    v53 = sub_10001DF04(0xD00000000000001BLL, 0x8000000100067E00, v54);
    a3 = v47;
    v8 = v49;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v53, v54, v23 + 14, v23 + 22);
    swift_arrayDestroy(v25, 2, (char *)&type metadata for Any + 8);
    v26 = v25;
    v10 = v48;
    swift_slowDealloc(v26, -1, -1);
    swift_slowDealloc(v23, -1, -1);

  }
  else
  {

    v27 = swift_bridgeObjectRelease_n(v3, 2);
  }
  if ((TimelineProviderContext.isPreview.getter(v27) & 1) == 0)
  {
    v47 = a1;
    v28 = swift_bridgeObjectRetain_n(v3, 2);
    v29 = Logger.logObject.getter(v28);
    v30 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v29, v30))
    {
      v31 = swift_slowAlloc(22, -1);
      v32 = swift_slowAlloc(64, -1);
      v48 = v10;
      v33 = v32;
      v54[0] = v32;
      *(_DWORD *)v31 = 136315394;
      v49 = v8;
      swift_bridgeObjectRetain(v3);
      v53 = sub_10001DF04(v52, v3, v54);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v53, v54, v31 + 4, v31 + 12);
      swift_bridgeObjectRelease_n(v3, 3);
      *(_WORD *)(v31 + 12) = 2080;
      v53 = sub_10001DF04(0xD000000000000026, 0x8000000100068730, v54);
      v8 = v49;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v53, v54, v31 + 14, v31 + 22);
      _os_log_impl((void *)&_mh_execute_header, v29, v30, "...{%s} is preview, notifying homed that '%s' is active", (uint8_t *)v31, 0x16u);
      swift_arrayDestroy(v33, 2, (char *)&type metadata for Any + 8);
      v34 = v33;
      v10 = v48;
      swift_slowDealloc(v34, -1, -1);
      swift_slowDealloc(v31, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n(v3, 2);
    }
    v35 = objc_msgSend((id)objc_opt_self(NSDistributedNotificationCenter), "defaultCenter");
    v36 = String._bridgeToObjectiveC()();
    objc_msgSend(v35, "postNotificationName:object:", v36, 0);

    a1 = v47;
  }
  v37 = type metadata accessor for TaskPriority(0);
  v38 = (uint64_t)v51;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v37 - 8) + 56))(v51, 1, 1, v37);
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v10, a1, v7);
  v39 = *(unsigned __int8 *)(v8 + 80);
  v40 = (v39 + 48) & ~v39;
  v41 = (v50 + v40 + 7) & 0xFFFFFFFFFFFFFFF8;
  v42 = (char *)swift_allocObject(&unk_10007DD10, v41 + 16, v39 | 7);
  *((_QWORD *)v42 + 2) = 0;
  *((_QWORD *)v42 + 3) = 0;
  *((_QWORD *)v42 + 4) = a2;
  *((_QWORD *)v42 + 5) = a3;
  (*(void (**)(char *, char *, uint64_t))(v8 + 32))(&v42[v40], v10, v7);
  v43 = &v42[v41];
  *(_QWORD *)v43 = v52;
  *((_QWORD *)v43 + 1) = v3;
  swift_retain(a3);
  v44 = sub_1000341A0(v38, (uint64_t)&unk_100082238, (uint64_t)v42);
  return swift_release(v44);
}

uint64_t sub_10002A41C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v8[5] = a7;
  v8[6] = a8;
  v8[3] = a5;
  v8[4] = a6;
  v8[2] = a4;
  v9 = type metadata accessor for Date(0);
  v8[7] = v9;
  v10 = *(_QWORD *)(v9 - 8);
  v8[8] = v10;
  v11 = (*(_QWORD *)(v10 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v8[9] = swift_task_alloc(v11);
  v8[10] = swift_task_alloc(v11);
  v12 = type metadata accessor for TimelineReloadPolicy(0);
  v8[11] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v12 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_100003704(&qword_100081DC8);
  v8[12] = v13;
  v14 = *(_QWORD *)(v13 - 8);
  v8[13] = v14;
  v8[14] = swift_task_alloc((*(_QWORD *)(v14 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_10002A4E0, 0, 0);
}

uint64_t sub_10002A4E0()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t **v9;

  v1 = sub_100003704(&qword_100081DD0);
  v2 = type metadata accessor for ThreeColumnDataEntry(0);
  v0[15] = v2;
  v3 = *(_QWORD *)(v2 - 8);
  v4 = *(_QWORD *)(v3 + 72);
  v5 = *(unsigned __int8 *)(v3 + 80);
  v6 = (v5 + 32) & ~v5;
  v7 = swift_allocObject(v1, v6 + v4, v5 | 7);
  v0[16] = v7;
  *(_OWORD *)(v7 + 16) = xmmword_1000607D0;
  v8 = v7 + v6;
  v9 = (uint64_t **)swift_task_alloc(dword_100082244);
  v0[17] = (uint64_t)v9;
  *v9 = v0;
  v9[1] = (uint64_t *)sub_100014490;
  return sub_1000294BC(v8, v0[4], v0[5], v0[6]);
}

uint64_t sub_10002A594()
{
  uint64_t v0;
  _BYTE *v1;
  uint64_t v2;
  _BYTE *v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  _BYTE v7[16];

  type metadata accessor for Locale(0);
  __chkstk_darwin();
  v1 = &v7[-((v0 + 15) & 0xFFFFFFFFFFFFFFF0)];
  type metadata accessor for String.LocalizationValue(0);
  __chkstk_darwin();
  v3 = &v7[-((v2 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v4 = String.LocalizationValue.init(stringLiteral:)(0xD000000000000018, 0x8000000100068780);
  static Locale.current.getter(v4);
  result = String.init(localized:table:bundle:locale:comment:)(v3, 0x696C61636F4C4648, 0xED0000656C62617ALL, 0, v1, 0, 0, 256);
  qword_10008A6D0 = result;
  *(_QWORD *)algn_10008A6D8 = v6;
  return result;
}

uint64_t sub_10002A68C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t OpaqueTypeConformance2;
  _QWORD v17[2];

  v1 = v0;
  v2 = sub_100003704(&qword_100081D90);
  __chkstk_darwin(v2);
  v4 = (char *)v17 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for ThreeColumnCategoryView(0);
  __chkstk_darwin(v5);
  v7 = (char *)v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_100003704(&qword_100081D98);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)v17 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100014F18(v1, (uint64_t)v7);
  v12 = &v7[*(int *)(v5 + 20)];
  *(_QWORD *)v12 = swift_getKeyPath(&unk_100062F00);
  v13 = sub_100003704(&qword_100081DA0);
  swift_storeEnumTagMultiPayload(v12, v13, 0);
  URL.init(string:)(0xD000000000000011, 0x80000001000687A0);
  v14 = sub_100015884(&qword_100081DA8, type metadata accessor for ThreeColumnCategoryView, (uint64_t)&unk_1000643A8);
  View.widgetURL(_:)(v4, v5, v14);
  sub_1000154D8((uint64_t)v4);
  sub_100015784((uint64_t)v7, type metadata accessor for ThreeColumnCategoryView);
  v17[0] = v5;
  v17[1] = v14;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(v17, &opaque type descriptor for <<opaque return type of View.widgetURL(_:)>>, 1);
  View.accessibilityIdentifier(_:)(0xD000000000000037, 0x80000001000687C0, v8, OpaqueTypeConformance2);
  return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, v8);
}

uint64_t sub_10002A88C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t OpaqueTypeConformance2;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void *v39;
  unint64_t v40;
  unint64_t v41;
  _QWORD v42[3];

  v37 = a1;
  v1 = type metadata accessor for Locale(0);
  __chkstk_darwin(v1);
  v34 = (char *)&v33 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = type metadata accessor for String.LocalizationValue(0);
  __chkstk_darwin(v3);
  v5 = (char *)&v33 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_100003704(&qword_100082160);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v33 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_100003704(&qword_100082168);
  v33 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v12 = (char *)&v33 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_100003704(&qword_100082170);
  v35 = *(_QWORD *)(v13 - 8);
  v36 = v13;
  __chkstk_darwin(v13);
  v15 = (char *)&v33 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for HomeSummaryWidgetView(0);
  sub_100015884(&qword_100082178, type metadata accessor for HomeSummaryWidgetView, (uint64_t)&unk_100062EB0);
  sub_10002ACB4();
  StaticConfiguration.init<A>(kind:provider:content:)(0xD000000000000026, 0x8000000100068730);
  if (qword_1000816A8 != -1)
    swift_once(&qword_1000816A8, sub_10002A594);
  v38 = qword_10008A6D0;
  v39 = *(void **)algn_10008A6D8;
  v16 = sub_10002ACF8();
  v17 = sub_1000037D4();
  WidgetConfiguration.configurationDisplayName<A>(_:)(&v38, v6, &type metadata for String, v16, v17);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  v18 = String.LocalizationValue.init(stringLiteral:)(0xD00000000000001ELL, 0x8000000100068760);
  v19 = v34;
  static Locale.current.getter(v18);
  v20 = String.init(localized:table:bundle:locale:comment:)(v5, 0x696C61636F4C4648, 0xED0000656C62617ALL, 0, v19, 0, 0, 256);
  v22 = v21;
  v42[0] = v20;
  v42[1] = v21;
  v38 = v6;
  v39 = &type metadata for String;
  v40 = v16;
  v41 = v17;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v38, &opaque type descriptor for <<opaque return type of WidgetConfiguration.configurationDisplayName<A>(_:)>>, 1);
  WidgetConfiguration.description<A>(_:)(v42, v10, &type metadata for String, OpaqueTypeConformance2, v17);
  swift_bridgeObjectRelease(v22);
  (*(void (**)(char *, uint64_t))(v33 + 8))(v12, v10);
  v24 = sub_100003704(&qword_100081CE0);
  v25 = type metadata accessor for WidgetFamily(0);
  v26 = *(_QWORD *)(v25 - 8);
  v27 = *(unsigned __int8 *)(v26 + 80);
  v28 = (v27 + 32) & ~v27;
  v29 = swift_allocObject(v24, v28 + *(_QWORD *)(v26 + 72), v27 | 7);
  *(_OWORD *)(v29 + 16) = xmmword_1000607D0;
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v26 + 104))(v29 + v28, enum case for WidgetFamily.accessoryRectangular(_:), v25);
  v38 = v10;
  v39 = &type metadata for String;
  v40 = OpaqueTypeConformance2;
  v41 = v17;
  v30 = swift_getOpaqueTypeConformance2(&v38, &opaque type descriptor for <<opaque return type of WidgetConfiguration.description<A>(_:)>>, 1);
  v31 = v36;
  WidgetConfiguration.supportedFamilies(_:)(v29, v36, v30);
  swift_bridgeObjectRelease(v29);
  return (*(uint64_t (**)(char *, uint64_t))(v35 + 8))(v15, v31);
}

uint64_t type metadata accessor for HomeSummaryWidgetView(uint64_t a1)
{
  uint64_t result;

  result = qword_1000821E8;
  if (!qword_1000821E8)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for HomeSummaryWidgetView);
  return result;
}

unint64_t sub_10002ACB4()
{
  unint64_t result;

  result = qword_100082180;
  if (!qword_100082180)
  {
    result = swift_getWitnessTable(&unk_100062E58, &type metadata for HomeSummaryTimelineProvider);
    atomic_store(result, (unint64_t *)&qword_100082180);
  }
  return result;
}

unint64_t sub_10002ACF8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100082188;
  if (!qword_100082188)
  {
    v1 = sub_100003744(&qword_100082160);
    result = swift_getWitnessTable(&protocol conformance descriptor for StaticConfiguration<A>, v1);
    atomic_store(result, (unint64_t *)&qword_100082188);
  }
  return result;
}

ValueMetadata *type metadata accessor for HomeSummaryTimelineProvider()
{
  return &type metadata for HomeSummaryTimelineProvider;
}

uint64_t sub_10002AD54(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10002AD60);
}

uint64_t sub_10002AD60(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for ThreeColumnDataEntry(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(a1, a2, v4);
}

uint64_t sub_10002AD9C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10002ADA8);
}

uint64_t sub_10002ADA8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for ThreeColumnDataEntry(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(a1, a2, a2, v4);
}

uint64_t sub_10002ADE8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t OpaqueTypeConformance2;
  uint64_t v6;
  uint64_t v8;
  void *v9;
  unint64_t v10;
  unint64_t v11;

  v0 = sub_100003744(&qword_100082170);
  v1 = sub_100003744(&qword_100082168);
  v2 = sub_100003744(&qword_100082160);
  v3 = sub_10002ACF8();
  v4 = sub_1000037D4();
  v8 = v2;
  v9 = &type metadata for String;
  v10 = v3;
  v11 = v4;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v8, &opaque type descriptor for <<opaque return type of WidgetConfiguration.configurationDisplayName<A>(_:)>>, 1);
  v8 = v1;
  v9 = &type metadata for String;
  v10 = OpaqueTypeConformance2;
  v11 = v4;
  v6 = swift_getOpaqueTypeConformance2(&v8, &opaque type descriptor for <<opaque return type of WidgetConfiguration.description<A>(_:)>>, 1);
  v8 = v0;
  v9 = (void *)v6;
  return swift_getOpaqueTypeConformance2(&v8, &opaque type descriptor for <<opaque return type of WidgetConfiguration.supportedFamilies(_:)>>, 1);
}

uint64_t sub_10002AEB0(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_10006BC5C, 1);
}

uint64_t sub_10002AEC8(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;

  v4 = *(_QWORD *)(type metadata accessor for TimelineProviderContext(0) - 8);
  v5 = (*(unsigned __int8 *)(v4 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v6 = v1[2];
  v7 = v1[3];
  v8 = v1[4];
  v9 = v1[5];
  v10 = (uint64_t)v1 + v5;
  v11 = (_QWORD *)((char *)v1 + ((*(_QWORD *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFFFF8));
  v12 = *v11;
  v13 = v11[1];
  v14 = (_QWORD *)swift_task_alloc(dword_100082234);
  *(_QWORD *)(v2 + 16) = v14;
  *v14 = v2;
  v14[1] = sub_1000155DC;
  return sub_10002A41C(a1, v6, v7, v8, v9, v10, v12, v13);
}

uint64_t sub_10002AF8C(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;

  v4 = *(_QWORD *)(type metadata accessor for TimelineProviderContext(0) - 8);
  v5 = (*(unsigned __int8 *)(v4 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v6 = v1[2];
  v7 = v1[3];
  v8 = v1[4];
  v9 = v1[5];
  v10 = (uint64_t)v1 + v5;
  v11 = (_QWORD *)((char *)v1 + ((*(_QWORD *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFFFF8));
  v12 = *v11;
  v13 = v11[1];
  v14 = (_QWORD *)swift_task_alloc(dword_10008224C);
  *(_QWORD *)(v2 + 16) = v14;
  *v14 = v2;
  v14[1] = sub_1000158C4;
  return sub_100029428(a1, v6, v7, v8, v9, v10, v12, v13);
}

uint64_t HMAccessory.subscript.getter(double *a1)
{
  void *v1;
  id v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t i;
  uint64_t v8;
  double v9;
  uint64_t v10;
  id v11;
  void *v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned __int8 v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v24;
  char v25;
  uint64_t result;
  uint64_t v27;
  id v28;
  id v29;
  uint64_t v30;
  uint64_t v31;

  v3 = objc_msgSend(v1, "services");
  v4 = sub_10002B5B4();
  v5 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v3, v4);

  if ((unint64_t)v5 >> 62)
  {
    if (v5 < 0)
      v27 = v5;
    else
      v27 = v5 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v5);
    v6 = _CocoaArrayWrapper.endIndex.getter(v27);
    swift_bridgeObjectRelease(v5);
    if (v6)
      goto LABEL_3;
LABEL_25:
    result = swift_bridgeObjectRelease(v5);
    a1 = _swiftEmptyArrayStorage;
    if (((unint64_t)_swiftEmptyArrayStorage & 0x8000000000000000) != 0)
      goto LABEL_32;
    goto LABEL_26;
  }
  v6 = *(_QWORD *)((v5 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (!v6)
    goto LABEL_25;
LABEL_3:
  if (v6 < 1)
  {
    __break(1u);
    goto LABEL_36;
  }
  for (i = 0; i != v6; ++i)
  {
    if ((v5 & 0xC000000000000001) != 0)
      v11 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(i, v5);
    else
      v11 = *(id *)(v5 + 8 * i + 32);
    v12 = v11;
    v13 = objc_msgSend(v11, "serviceType");
    v14 = static String._unconditionallyBridgeFromObjectiveC(_:)(v13);
    v16 = v15;

    v17 = _s20HomeWidgetLockScreen11ServiceKindO8rawValueACSgSS_tcfC_0(v14, v16);
    if (v17 == 51)
      v17 = 0;
    v18 = ServiceKind.rawValue.getter(v17);
    v20 = v19;
    v21 = ServiceKind.rawValue.getter(a1);
    if (v18 == v21 && v20 == v22)
    {
      v8 = swift_bridgeObjectRelease_n(v20, 2);
LABEL_6:
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v8);
      v9 = _swiftEmptyArrayStorage[2];
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(*(_QWORD *)&v9);
      v10 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(*(_QWORD *)&v9, v12);
      specialized ContiguousArray._endMutation()(v10);
      continue;
    }
    v24 = v22;
    v25 = _stringCompareWithSmolCheck(_:_:expecting:)(v18, v20, v21, v22, 0);
    swift_bridgeObjectRelease(v20);
    v8 = swift_bridgeObjectRelease(v24);
    if ((v25 & 1) != 0)
      goto LABEL_6;

  }
  result = swift_bridgeObjectRelease(v5);
  a1 = _swiftEmptyArrayStorage;
  if (((unint64_t)_swiftEmptyArrayStorage & 0x8000000000000000) == 0)
  {
LABEL_26:
    if (((unint64_t)_swiftEmptyArrayStorage & 0x4000000000000000) != 0)
      goto LABEL_32;
    if (*(_QWORD *)&_swiftEmptyArrayStorage[2])
      goto LABEL_28;
LABEL_33:
    swift_release(_swiftEmptyArrayStorage);
    return 0;
  }
LABEL_32:
  v30 = swift_bridgeObjectRetain(_swiftEmptyArrayStorage);
  v31 = _CocoaArrayWrapper.endIndex.getter(v30);
  result = swift_release(_swiftEmptyArrayStorage);
  if (!v31)
    goto LABEL_33;
LABEL_28:
  if (((unint64_t)_swiftEmptyArrayStorage & 0xC000000000000001) != 0)
  {
LABEL_36:
    v28 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, a1);
LABEL_31:
    v29 = v28;
    swift_release(a1);
    return (uint64_t)v29;
  }
  if (*(_QWORD *)&_swiftEmptyArrayStorage[2])
  {
    v28 = *(id *)&_swiftEmptyArrayStorage[4];
    goto LABEL_31;
  }
  __break(1u);
  return result;
}

uint64_t HMAccessory.categoryType.getter()
{
  void *v0;
  id v1;
  id v2;
  uint64_t v3;

  v1 = objc_msgSend(v0, "category");
  v2 = objc_msgSend(v1, "categoryType");

  v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(v2);
  return v3;
}

uint64_t HMAccessory.primaryServiceKind.getter()
{
  void *v0;
  void *v1;
  id v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;

  v0 = (void *)HMAccessory.primaryHomeService.getter();
  v1 = v0;
  if (v0)
  {
    v2 = objc_msgSend(v0, "serviceType");

    v1 = (void *)static String._unconditionallyBridgeFromObjectiveC(_:)(v2);
    v4 = v3;

  }
  else
  {
    v4 = 0xE000000000000000;
  }
  LODWORD(result) = _s20HomeWidgetLockScreen11ServiceKindO8rawValueACSgSS_tcfC_0((uint64_t)v1, v4);
  if (result == 51)
    return 0;
  else
    return result;
}

uint64_t HMAccessory.primaryHomeService.getter()
{
  void *v0;
  id v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t i;
  double v6;
  uint64_t v7;
  id v8;
  void *v9;
  id v10;
  uint64_t result;
  uint64_t v12;
  id v13;
  id v14;
  uint64_t v15;
  uint64_t v16;

  v1 = objc_msgSend(v0, "services");
  v2 = sub_10002B5B4();
  v3 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v1, v2);

  if ((unint64_t)v3 >> 62)
  {
    if (v3 < 0)
      v12 = v3;
    else
      v12 = v3 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v3);
    v4 = _CocoaArrayWrapper.endIndex.getter(v12);
    swift_bridgeObjectRelease(v3);
    if (v4)
    {
LABEL_3:
      if (v4 < 1)
      {
        __break(1u);
        goto LABEL_29;
      }
      for (i = 0; i != v4; ++i)
      {
        if ((v3 & 0xC000000000000001) != 0)
          v8 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(i, v3);
        else
          v8 = *(id *)(v3 + 8 * i + 32);
        v9 = v8;
        v10 = objc_msgSend(v8, "isPrimaryService");
        if ((_DWORD)v10)
        {
          specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v10);
          v6 = _swiftEmptyArrayStorage[2];
          specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(*(_QWORD *)&v6);
          v7 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(*(_QWORD *)&v6, v9);
          specialized ContiguousArray._endMutation()(v7);
        }
        else
        {

        }
      }
      result = swift_bridgeObjectRelease(v3);
      v3 = (uint64_t)_swiftEmptyArrayStorage;
      if (((unint64_t)_swiftEmptyArrayStorage & 0x8000000000000000) != 0)
        goto LABEL_25;
      goto LABEL_19;
    }
  }
  else
  {
    v4 = *(_QWORD *)((v3 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v4)
      goto LABEL_3;
  }
  result = swift_bridgeObjectRelease(v3);
  v3 = (uint64_t)_swiftEmptyArrayStorage;
  if (((unint64_t)_swiftEmptyArrayStorage & 0x8000000000000000) != 0)
    goto LABEL_25;
LABEL_19:
  if (((unint64_t)_swiftEmptyArrayStorage & 0x4000000000000000) != 0)
  {
LABEL_25:
    v15 = swift_bridgeObjectRetain(_swiftEmptyArrayStorage);
    v16 = _CocoaArrayWrapper.endIndex.getter(v15);
    result = swift_release(_swiftEmptyArrayStorage);
    if (!v16)
      goto LABEL_26;
    goto LABEL_21;
  }
  if (!*(_QWORD *)&_swiftEmptyArrayStorage[2])
  {
LABEL_26:
    swift_release(_swiftEmptyArrayStorage);
    return 0;
  }
LABEL_21:
  if (((unint64_t)_swiftEmptyArrayStorage & 0xC000000000000001) != 0)
  {
LABEL_29:
    v13 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v3);
    goto LABEL_24;
  }
  if (*(_QWORD *)&_swiftEmptyArrayStorage[2])
  {
    v13 = *(id *)&_swiftEmptyArrayStorage[4];
LABEL_24:
    v14 = v13;
    swift_release(v3);
    return (uint64_t)v14;
  }
  __break(1u);
  return result;
}

unint64_t sub_10002B5B4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100081EC0;
  if (!qword_100081EC0)
  {
    v1 = objc_opt_self(HMService);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_100081EC0);
  }
  return result;
}

uint64_t HMCharacteristic.characteristicKind.getter()
{
  void *v0;
  id v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;

  v1 = objc_msgSend(v0, "characteristicType");
  v2 = static String._unconditionallyBridgeFromObjectiveC(_:)(v1);
  v4 = v3;

  LODWORD(result) = _s20HomeWidgetLockScreen18CharacteristicKindO8rawValueACSgSS_tcfC_0(v2, v4);
  if (result == 174)
    return 0;
  else
    return result;
}

uint64_t HMCharacteristic.description.getter()
{
  void *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  void *v6;
  id v7;
  void *v8;
  id v9;
  id v10;
  id v11;
  void *v12;
  Swift::String v13;
  Swift::String v14;
  id v15;
  void *v16;
  id v17;
  id v18;
  uint64_t v19;
  void *v20;
  void *v21;
  Swift::String v22;
  Swift::String v23;
  id v24;
  void *v25;
  id v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  char v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  Swift::String v35;
  id v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unsigned __int8 v40;
  unsigned __int8 v41;
  uint64_t v42;
  _QWORD *v43;
  unint64_t v44;
  char v45;
  unint64_t v46;
  void *v47;
  Swift::String v48;
  Swift::String v49;
  id v50;
  id v51;
  uint64_t v52;
  Swift::String v53;
  void *object;
  Swift::String v55;
  id v56;
  unint64_t v57;
  Swift::String v58;
  void *v59;
  _OWORD v61[2];
  __int128 v62;

  v1 = v0;
  v2 = type metadata accessor for UUID(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)v61 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = (void *)0xE000000000000000;
  *(_QWORD *)&v61[0] = 0;
  *((_QWORD *)&v61[0] + 1) = 0xE000000000000000;
  _StringGuts.grow(_:)(17);
  v62 = v61[0];
  v7 = objc_msgSend(v0, "service");
  v8 = v7;
  if (v7)
  {
    v9 = objc_msgSend(v7, "accessory");

    if (v9)
    {
      v10 = objc_msgSend(v9, "home");

      if (v10)
      {
        v11 = objc_msgSend(v10, "name");

        v8 = (void *)static String._unconditionallyBridgeFromObjectiveC(_:)(v11);
        v6 = v12;

      }
      else
      {
        v8 = 0;
        v6 = (void *)0xE000000000000000;
      }
    }
    else
    {
      v8 = 0;
    }
  }
  v13._countAndFlagsBits = (uint64_t)v8;
  v13._object = v6;
  String.append(_:)(v13);
  swift_bridgeObjectRelease(v6);
  v14._countAndFlagsBits = 58;
  v14._object = (void *)0xE100000000000000;
  String.append(_:)(v14);
  v15 = objc_msgSend(v1, "service");
  if (v15
    && (v16 = v15, v17 = objc_msgSend(v15, "accessory"), v16, v17))
  {
    v18 = objc_msgSend(v17, "name");

    v19 = static String._unconditionallyBridgeFromObjectiveC(_:)(v18);
    v21 = v20;

  }
  else
  {
    v19 = 0;
    v21 = (void *)0xE000000000000000;
  }
  v22._countAndFlagsBits = v19;
  v22._object = v21;
  String.append(_:)(v22);
  swift_bridgeObjectRelease(v21);
  v23._countAndFlagsBits = 58;
  v23._object = (void *)0xE100000000000000;
  String.append(_:)(v23);
  v24 = objc_msgSend(v1, "service");
  if (v24)
  {
    v25 = v24;
    v26 = objc_msgSend(v24, "serviceType");
    v27 = static String._unconditionallyBridgeFromObjectiveC(_:)(v26);
    v29 = v28;

    v30 = _s20HomeWidgetLockScreen11ServiceKindO8rawValueACSgSS_tcfC_0(v27, v29);
    if (v30 == 51)
      v31 = 0;
    else
      v31 = v30;
    ServiceKind.localizedDescription.getter(v31);
    v33 = v32;
  }
  else
  {
    v33 = 0xE000000000000000;
  }
  v34 = v33;
  String.append(_:)(*(Swift::String *)&v24);
  swift_bridgeObjectRelease(v33);
  v35._countAndFlagsBits = 58;
  v35._object = (void *)0xE100000000000000;
  String.append(_:)(v35);
  v36 = objc_msgSend(v1, "characteristicType");
  v37 = static String._unconditionallyBridgeFromObjectiveC(_:)(v36);
  v39 = v38;

  v40 = _s20HomeWidgetLockScreen18CharacteristicKindO8rawValueACSgSS_tcfC_0(v37, v39);
  if (v40 == 174)
    v41 = 0;
  else
    v41 = v40;
  if (qword_100081630 != -1)
    swift_once(&qword_100081630, sub_100004B54);
  v42 = 0x6E776F6E6B6E75;
  v43 = off_1000817D0;
  if (*((_QWORD *)off_1000817D0 + 2) && (v44 = sub_10000A554(v41), (v45 & 1) != 0))
  {
    v46 = v43[7] + (v44 << 6);
    v42 = *(_QWORD *)(v46 + 8);
    v47 = *(void **)(v46 + 16);
    swift_bridgeObjectRetain(v47);
  }
  else
  {
    v47 = (void *)0xE700000000000000;
  }
  v48._countAndFlagsBits = v42;
  v48._object = v47;
  String.append(_:)(v48);
  swift_bridgeObjectRelease(v47);
  v49._countAndFlagsBits = 58;
  v49._object = (void *)0xE100000000000000;
  String.append(_:)(v49);
  v50 = objc_msgSend(v1, "value");
  if (v50)
  {
    v51 = v50;
    _bridgeAnyObjectToAny(_:)(v61, v50);
    swift_unknownObjectRelease(v51);
  }
  else
  {
    memset(v61, 0, sizeof(v61));
  }
  v52 = sub_100003704(&qword_1000817D8);
  v53._countAndFlagsBits = String.init<A>(describing:)(v61, v52);
  object = v53._object;
  String.append(_:)(v53);
  swift_bridgeObjectRelease(object);
  v55._countAndFlagsBits = 58;
  v55._object = (void *)0xE100000000000000;
  String.append(_:)(v55);
  v56 = objc_msgSend(v1, "uniqueIdentifier");
  static UUID._unconditionallyBridgeFromObjectiveC(_:)();

  v57 = sub_10002C604();
  v58._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v2, v57);
  v59 = v58._object;
  String.append(_:)(v58);
  swift_bridgeObjectRelease(v59);
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  return v62;
}

uint64_t HMCharacteristic.fetchedValue()(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 + 120) = a1;
  *(_QWORD *)(v2 + 128) = v1;
  return swift_task_switch(sub_10002BB0C, 0, 0);
}

uint64_t sub_10002BB0C()
{
  _QWORD *v0;
  _QWORD *v1;
  void *v2;
  uint64_t v3;
  _QWORD *v4;

  v1 = v0 + 2;
  v2 = (void *)v0[16];
  v0[2] = v0;
  v0[3] = sub_10002BB98;
  v3 = swift_continuation_init(v0 + 2, 1);
  v0[10] = _NSConcreteStackBlock;
  v4 = v0 + 10;
  v4[1] = 0x40000000;
  v4[2] = sub_10002BCDC;
  v4[3] = &unk_10007DE00;
  v4[4] = v3;
  objc_msgSend(v2, "readValueWithCompletionHandler:", v4);
  return swift_continuation_await(v1);
}

uint64_t sub_10002BB98()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 48);
  *(_QWORD *)(*(_QWORD *)v0 + 136) = v1;
  if (v1)
    v2 = sub_10002BC5C;
  else
    v2 = sub_10002BBF8;
  return swift_task_switch(v2, 0, 0);
}

uint64_t sub_10002BBF8()
{
  uint64_t v0;
  id v1;
  _OWORD *v2;
  id v3;

  v1 = objc_msgSend(*(id *)(v0 + 128), "value");
  v2 = *(_OWORD **)(v0 + 120);
  if (v1)
  {
    v3 = v1;
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease(v3);
  }
  else
  {
    *v2 = 0u;
    v2[1] = 0u;
  }
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10002BC5C()
{
  uint64_t v0;
  uint64_t v1;
  id v2;
  _OWORD *v3;
  id v4;

  v1 = *(_QWORD *)(v0 + 136);
  swift_willThrow();
  swift_errorRelease(v1);
  v2 = objc_msgSend(*(id *)(v0 + 128), "value");
  v3 = *(_OWORD **)(v0 + 120);
  if (v2)
  {
    v4 = v2;
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease(v4);
  }
  else
  {
    *v3 = 0u;
    v3[1] = 0u;
  }
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10002BCDC(uint64_t a1, void *a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  id v7;

  v2 = *(_QWORD *)(a1 + 32);
  if (!a2)
    return swift_continuation_throwingResume(*(_QWORD *)(a1 + 32));
  v4 = sub_100003704(&qword_100082290);
  v5 = swift_allocError(v4, &protocol self-conformance witness table for Error, 0, 0);
  *v6 = a2;
  v7 = a2;
  return swift_continuation_throwingResumeWithError(v2, v5);
}

double HMCharacteristic.cachedValue.getter@<D0>(_OWORD *a1@<X8>)
{
  void *v1;
  id v3;
  id v4;
  double result;

  v3 = objc_msgSend(v1, "value");
  if (v3)
  {
    v4 = v3;
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease(v4);
  }
  else
  {
    result = 0.0;
    *a1 = 0u;
    a1[1] = 0u;
  }
  return result;
}

uint64_t HMCharacteristic.BOOL.getter()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;

  v2 = (_QWORD *)swift_task_alloc(dword_100082264);
  *(_QWORD *)(v1 + 48) = v2;
  *v2 = v1;
  v2[1] = sub_10002BE0C;
  v2[15] = v1 + 16;
  v2[16] = v0;
  return swift_task_switch(sub_10002BB0C, 0, 0);
}

uint64_t sub_10002BE0C()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 48));
  return swift_task_switch(sub_10002BE60, 0, 0);
}

uint64_t sub_10002BE60()
{
  uint64_t v0;

  if (*(_QWORD *)(v0 + 40))
  {
    if (swift_dynamicCast(v0 + 56, v0 + 16, (char *)&type metadata for Any + 8, &type metadata for Bool, 6))return (*(uint64_t (**)(_QWORD))(v0 + 8))(*(unsigned __int8 *)(v0 + 56));
  }
  else
  {
    sub_10000E534(v0 + 16);
  }
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(2);
}

uint64_t HMCharacteristic.cachedBool.getter()
{
  void *v0;
  id v1;
  id v2;
  _OWORD v4[2];
  _BYTE v5[24];
  uint64_t v6;

  v1 = objc_msgSend(v0, "value");
  if (v1)
  {
    v2 = v1;
    _bridgeAnyObjectToAny(_:)(v4, v1);
    swift_unknownObjectRelease(v2);
  }
  else
  {
    memset(v4, 0, sizeof(v4));
  }
  sub_1000184BC((uint64_t)v4, (uint64_t)v5);
  if (v6)
  {
    if (swift_dynamicCast(v4, v5, (char *)&type metadata for Any + 8, &type metadata for Bool, 6))
      return LOBYTE(v4[0]);
    else
      return 2;
  }
  else
  {
    sub_10000E534((uint64_t)v5);
    return 2;
  }
}

uint64_t HMCharacteristic.int.getter()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;

  v2 = (_QWORD *)swift_task_alloc(dword_100082264);
  *(_QWORD *)(v1 + 56) = v2;
  *v2 = v1;
  v2[1] = sub_10002BFE8;
  v2[15] = v1 + 16;
  v2[16] = v0;
  return swift_task_switch(sub_10002BB0C, 0, 0);
}

uint64_t sub_10002BFE8()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 56));
  return swift_task_switch(sub_10002C03C, 0, 0);
}

uint64_t sub_10002C03C()
{
  uint64_t v0;
  int v1;
  uint64_t v2;
  uint64_t v3;

  if (*(_QWORD *)(v0 + 40))
  {
    v1 = swift_dynamicCast(v0 + 48, v0 + 16, (char *)&type metadata for Any + 8, &type metadata for Int, 6);
    if (v1)
      v2 = *(_QWORD *)(v0 + 48);
    else
      v2 = 0;
    v3 = v1 ^ 1u;
  }
  else
  {
    sub_10000E534(v0 + 16);
    v2 = 0;
    v3 = 1;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v2, v3);
}

uint64_t HMCharacteristic.cachedInt.getter()
{
  void *v0;
  id v1;
  id v2;
  _OWORD v4[2];
  _BYTE v5[24];
  uint64_t v6;

  v1 = objc_msgSend(v0, "value");
  if (v1)
  {
    v2 = v1;
    _bridgeAnyObjectToAny(_:)(v4, v1);
    swift_unknownObjectRelease(v2);
  }
  else
  {
    memset(v4, 0, sizeof(v4));
  }
  sub_1000184BC((uint64_t)v4, (uint64_t)v5);
  if (v6)
  {
    if (swift_dynamicCast(v4, v5, (char *)&type metadata for Any + 8, &type metadata for Int, 6))
      return *(_QWORD *)&v4[0];
    else
      return 0;
  }
  else
  {
    sub_10000E534((uint64_t)v5);
    return 0;
  }
}

uint64_t HMCharacteristic.float.getter()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;

  v2 = (_QWORD *)swift_task_alloc(dword_100082264);
  *(_QWORD *)(v1 + 56) = v2;
  *v2 = v1;
  v2[1] = sub_10002C1D4;
  v2[15] = v1 + 16;
  v2[16] = v0;
  return swift_task_switch(sub_10002BB0C, 0, 0);
}

uint64_t sub_10002C1D4()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 56));
  return swift_task_switch(sub_10002C228, 0, 0);
}

uint64_t sub_10002C228()
{
  uint64_t v0;
  int v1;
  uint64_t v2;
  uint64_t v3;

  if (*(_QWORD *)(v0 + 40))
  {
    v1 = swift_dynamicCast(v0 + 48, v0 + 16, (char *)&type metadata for Any + 8, &type metadata for Double, 6);
    if (v1)
      v2 = *(_QWORD *)(v0 + 48);
    else
      v2 = 0;
    v3 = v1 ^ 1u;
  }
  else
  {
    sub_10000E534(v0 + 16);
    v2 = 0;
    v3 = 1;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v2, v3);
}

uint64_t HMCharacteristic.cachedFloat.getter()
{
  void *v0;
  id v1;
  id v2;
  _OWORD v4[2];
  _BYTE v5[24];
  uint64_t v6;

  v1 = objc_msgSend(v0, "value");
  if (v1)
  {
    v2 = v1;
    _bridgeAnyObjectToAny(_:)(v4, v1);
    swift_unknownObjectRelease(v2);
  }
  else
  {
    memset(v4, 0, sizeof(v4));
  }
  sub_1000184BC((uint64_t)v4, (uint64_t)v5);
  if (v6)
  {
    if (swift_dynamicCast(v4, v5, (char *)&type metadata for Any + 8, &type metadata for Double, 6))
      return *(_QWORD *)&v4[0];
    else
      return 0;
  }
  else
  {
    sub_10000E534((uint64_t)v5);
    return 0;
  }
}

uint64_t HMCharacteristic.data.getter()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;

  v2 = (_QWORD *)swift_task_alloc(dword_100082264);
  *(_QWORD *)(v1 + 64) = v2;
  *v2 = v1;
  v2[1] = sub_10002C3C0;
  v2[15] = v1 + 16;
  v2[16] = v0;
  return swift_task_switch(sub_10002BB0C, 0, 0);
}

uint64_t sub_10002C3C0()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 64));
  return swift_task_switch(sub_10002C414, 0, 0);
}

uint64_t sub_10002C414()
{
  uint64_t v0;
  int v1;
  BOOL v2;
  uint64_t v3;
  unint64_t v4;

  if (*(_QWORD *)(v0 + 40))
  {
    v1 = swift_dynamicCast(v0 + 48, v0 + 16, (char *)&type metadata for Any + 8, &type metadata for Data, 6);
    v2 = v1 == 0;
    if (v1)
      v3 = *(_QWORD *)(v0 + 48);
    else
      v3 = 0;
    if (v2)
      v4 = 0xF000000000000000;
    else
      v4 = *(_QWORD *)(v0 + 56);
  }
  else
  {
    sub_10000E534(v0 + 16);
    v3 = 0;
    v4 = 0xF000000000000000;
  }
  return (*(uint64_t (**)(uint64_t, unint64_t))(v0 + 8))(v3, v4);
}

uint64_t HMCharacteristic.tlv8.getter()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;

  v2 = (_QWORD *)swift_task_alloc(dword_100082264);
  *(_QWORD *)(v1 + 64) = v2;
  *v2 = v1;
  v2[1] = sub_10002C4F4;
  v2[15] = v1 + 16;
  v2[16] = v0;
  return swift_task_switch(sub_10002BB0C, 0, 0);
}

uint64_t sub_10002C4F4()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 64));
  return swift_task_switch(sub_10002C64C, 0, 0);
}

uint64_t _sSo16HMCharacteristicC20HomeWidgetLockScreenE10cachedTLV810Foundation4DataVSgvg_0()
{
  void *v0;
  id v1;
  id v2;
  _OWORD v4[2];
  _BYTE v5[24];
  uint64_t v6;

  v1 = objc_msgSend(v0, "value");
  if (v1)
  {
    v2 = v1;
    _bridgeAnyObjectToAny(_:)(v4, v1);
    swift_unknownObjectRelease(v2);
  }
  else
  {
    memset(v4, 0, sizeof(v4));
  }
  sub_1000184BC((uint64_t)v4, (uint64_t)v5);
  if (v6)
  {
    if (swift_dynamicCast(v4, v5, (char *)&type metadata for Any + 8, &type metadata for Data, 6))
      return *(_QWORD *)&v4[0];
    else
      return 0;
  }
  else
  {
    sub_10000E534((uint64_t)v5);
    return 0;
  }
}

unint64_t sub_10002C604()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100082258;
  if (!qword_100082258)
  {
    v1 = type metadata accessor for UUID(255);
    result = swift_getWitnessTable(&protocol conformance descriptor for UUID, v1);
    atomic_store(result, (unint64_t *)&qword_100082258);
  }
  return result;
}

uint64_t HMCharacteristic.bestNameForAccessory.getter()
{
  void *v0;
  uint64_t v1;
  id v2;
  void *v3;
  id v4;
  id v5;

  v1 = 0x6E776F6E6B6E75;
  v2 = objc_msgSend(v0, "service");
  if (v2)
  {
    v3 = v2;
    v4 = objc_msgSend(v2, "accessory");

    if (v4)
    {
      v5 = objc_msgSend(v4, "name");

      v1 = static String._unconditionallyBridgeFromObjectiveC(_:)(v5);
    }
  }
  return v1;
}

uint64_t HMService.serviceKind.getter()
{
  void *v0;
  id v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;

  v1 = objc_msgSend(v0, "serviceType");
  v2 = static String._unconditionallyBridgeFromObjectiveC(_:)(v1);
  v4 = v3;

  LODWORD(result) = _s20HomeWidgetLockScreen11ServiceKindO8rawValueACSgSS_tcfC_0(v2, v4);
  if (result == 51)
    return 0;
  else
    return result;
}

uint64_t HMService.associatedServiceKind.getter()
{
  void *v0;
  id v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;

  v1 = objc_msgSend(v0, "associatedServiceType");
  if (!v1)
    return 51;
  v2 = v1;
  v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(v1);
  v5 = v4;

  LODWORD(result) = _s20HomeWidgetLockScreen11ServiceKindO8rawValueACSgSS_tcfC_0(v3, v5);
  if (result == 51)
    return 0;
  else
    return result;
}

void *HMService.subscript.getter(unsigned __int8 a1)
{
  void *v1;
  id v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  void *v9;
  uint64_t v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned __int8 v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v22;
  char v23;
  uint64_t v25;

  v3 = objc_msgSend(v1, "characteristics");
  v4 = sub_10002EE84();
  v5 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v3, v4);

  if ((unint64_t)v5 >> 62)
    goto LABEL_22;
  v6 = *(_QWORD *)((v5 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain(v5);
  for (; v6; v6 = _CocoaArrayWrapper.endIndex.getter(v25))
  {
    v7 = 4;
    while (1)
    {
      v8 = (v5 & 0xC000000000000001) != 0
         ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v7 - 4, v5)
         : *(id *)(v5 + 8 * v7);
      v9 = v8;
      v10 = v7 - 3;
      if (__OFADD__(v7 - 4, 1))
        break;
      v11 = objc_msgSend(v8, "characteristicType");
      v12 = static String._unconditionallyBridgeFromObjectiveC(_:)(v11);
      v14 = v13;

      v15 = _s20HomeWidgetLockScreen18CharacteristicKindO8rawValueACSgSS_tcfC_0(v12, v14);
      if (v15 == 174)
        v15 = 0;
      v16 = CharacteristicKind.rawValue.getter(v15);
      v18 = v17;
      v19 = CharacteristicKind.rawValue.getter(a1);
      if (v16 == v19 && v18 == v20)
      {
        swift_bridgeObjectRelease_n(v5, 2);
LABEL_19:
        swift_bridgeObjectRelease_n(v18, 2);
        return v9;
      }
      v22 = v20;
      v23 = _stringCompareWithSmolCheck(_:_:expecting:)(v16, v18, v19, v20, 0);
      swift_bridgeObjectRelease(v18);
      swift_bridgeObjectRelease(v22);
      if ((v23 & 1) != 0)
      {
        v18 = v5;
        goto LABEL_19;
      }

      ++v7;
      if (v10 == v6)
        goto LABEL_16;
    }
    __break(1u);
LABEL_22:
    if (v5 < 0)
      v25 = v5;
    else
      v25 = v5 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v5);
  }
LABEL_16:
  swift_bridgeObjectRelease_n(v5, 2);
  return 0;
}

uint64_t HMService.allRelevantCharacteristicKinds.getter()
{
  void *v0;
  id v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unsigned __int8 v5;
  uint64_t v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  void *v12;

  v1 = objc_msgSend(v0, "serviceType");
  v2 = static String._unconditionallyBridgeFromObjectiveC(_:)(v1);
  v4 = v3;

  v5 = _s20HomeWidgetLockScreen11ServiceKindO8rawValueACSgSS_tcfC_0(v2, v4);
  if (v5 == 51)
    v5 = 0;
  v6 = ServiceKind.requiredCharacteristicKinds.getter(v5);
  v7 = objc_msgSend(v0, "serviceType");
  v8 = static String._unconditionallyBridgeFromObjectiveC(_:)(v7);
  v10 = v9;

  v11 = _s20HomeWidgetLockScreen11ServiceKindO8rawValueACSgSS_tcfC_0(v8, v10);
  if (v11 == 51)
    v11 = 0;
  v12 = ServiceKind.optionalCharacteristicKinds.getter(v11);
  return sub_10002CA64((uint64_t)v12, v6);
}

uint64_t sub_10002CA64(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v8;
  unint64_t v9;
  unint64_t v10;
  int64_t v11;
  unint64_t v12;
  int64_t v13;
  char v14;
  uint64_t v15;

  v2 = result;
  v3 = 0;
  v15 = a2;
  v4 = result + 56;
  v5 = 1 << *(_BYTE *)(result + 32);
  v6 = -1;
  if (v5 < 64)
    v6 = ~(-1 << v5);
  v7 = v6 & *(_QWORD *)(result + 56);
  v8 = (unint64_t)(v5 + 63) >> 6;
  while (1)
  {
    if (v7)
    {
      v9 = __clz(__rbit64(v7));
      v7 &= v7 - 1;
      v10 = v9 | (v3 << 6);
      goto LABEL_5;
    }
    v11 = v3 + 1;
    if (__OFADD__(v3, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v11 >= v8)
      goto LABEL_23;
    v12 = *(_QWORD *)(v4 + 8 * v11);
    ++v3;
    if (!v12)
    {
      v3 = v11 + 1;
      if (v11 + 1 >= v8)
        goto LABEL_23;
      v12 = *(_QWORD *)(v4 + 8 * v3);
      if (!v12)
      {
        v3 = v11 + 2;
        if (v11 + 2 >= v8)
          goto LABEL_23;
        v12 = *(_QWORD *)(v4 + 8 * v3);
        if (!v12)
        {
          v3 = v11 + 3;
          if (v11 + 3 >= v8)
            goto LABEL_23;
          v12 = *(_QWORD *)(v4 + 8 * v3);
          if (!v12)
            break;
        }
      }
    }
LABEL_22:
    v7 = (v12 - 1) & v12;
    v10 = __clz(__rbit64(v12)) + (v3 << 6);
LABEL_5:
    result = sub_10002D8B0(&v14, *(unsigned __int8 *)(*(_QWORD *)(v2 + 48) + v10));
  }
  v13 = v11 + 4;
  if (v13 >= v8)
  {
LABEL_23:
    swift_release(v2);
    return v15;
  }
  v12 = *(_QWORD *)(v4 + 8 * v13);
  if (v12)
  {
    v3 = v13;
    goto LABEL_22;
  }
  while (1)
  {
    v3 = v13 + 1;
    if (__OFADD__(v13, 1))
      break;
    if (v3 >= v8)
      goto LABEL_23;
    v12 = *(_QWORD *)(v4 + 8 * v3);
    ++v13;
    if (v12)
      goto LABEL_22;
  }
LABEL_25:
  __break(1u);
  return result;
}

uint64_t HMService.fetchedValue(for:)(uint64_t a1, char a2)
{
  uint64_t v2;
  uint64_t v3;

  *(_BYTE *)(v3 + 48) = a2;
  *(_QWORD *)(v3 + 16) = a1;
  *(_QWORD *)(v3 + 24) = v2;
  return swift_task_switch(sub_10002CBDC, 0, 0);
}

uint64_t sub_10002CBDC()
{
  uint64_t v0;
  void *v1;
  _QWORD *v2;
  _OWORD *v4;

  v1 = HMService.subscript.getter(*(_BYTE *)(v0 + 48));
  *(_QWORD *)(v0 + 32) = v1;
  if (v1)
  {
    v2 = (_QWORD *)swift_task_alloc(dword_100082264);
    *(_QWORD *)(v0 + 40) = v2;
    *v2 = v0;
    v2[1] = sub_10002CC64;
    return HMCharacteristic.fetchedValue()(*(_QWORD *)(v0 + 16));
  }
  else
  {
    v4 = *(_OWORD **)(v0 + 16);
    *v4 = 0u;
    v4[1] = 0u;
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_10002CC64()
{
  uint64_t *v0;
  void *v1;
  uint64_t v3;

  v1 = *(void **)(*v0 + 32);
  v3 = *v0;
  swift_task_dealloc(*(_QWORD *)(*v0 + 40));

  return (*(uint64_t (**)(void))(v3 + 8))();
}

void HMService.cachedValue(for:)(unsigned __int8 a1@<W0>, _OWORD *a2@<X8>)
{
  void *v3;
  void *v4;
  id v5;
  id v6;
  _OWORD v7[2];

  v3 = HMService.subscript.getter(a1);
  if (v3)
  {
    v4 = v3;
    v5 = objc_msgSend(v3, "value");
    if (v5)
    {
      v6 = v5;
      _bridgeAnyObjectToAny(_:)(v7, v5);
      swift_unknownObjectRelease(v6);
    }
    else
    {
      memset(v7, 0, sizeof(v7));
    }
    sub_1000184BC((uint64_t)v7, (uint64_t)a2);

  }
  else
  {
    *a2 = 0u;
    a2[1] = 0u;
  }
}

uint64_t HMService.BOOL(for:)(char a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 + 48) = v1;
  *(_BYTE *)(v2 + 73) = a1;
  return swift_task_switch(sub_10002CD58, 0, 0);
}

uint64_t sub_10002CD58()
{
  uint64_t v0;
  void *v1;
  _QWORD *v2;

  v1 = HMService.subscript.getter(*(_BYTE *)(v0 + 73));
  *(_QWORD *)(v0 + 56) = v1;
  if (v1)
  {
    v2 = (_QWORD *)swift_task_alloc(dword_100082264);
    *(_QWORD *)(v0 + 64) = v2;
    *v2 = v0;
    v2[1] = sub_10002CDEC;
    return HMCharacteristic.fetchedValue()(v0 + 16);
  }
  else
  {
    *(_OWORD *)(v0 + 16) = 0u;
    *(_OWORD *)(v0 + 32) = 0u;
    sub_10000E534(v0 + 16);
    return (*(uint64_t (**)(uint64_t))(v0 + 8))(2);
  }
}

uint64_t sub_10002CDEC()
{
  uint64_t v0;
  void *v1;

  v1 = *(void **)(*(_QWORD *)v0 + 56);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 64));

  return swift_task_switch(sub_10002CE44, 0, 0);
}

uint64_t sub_10002CE44()
{
  uint64_t v0;

  if (*(_QWORD *)(v0 + 40))
  {
    if (swift_dynamicCast(v0 + 72, v0 + 16, (char *)&type metadata for Any + 8, &type metadata for Bool, 6))return (*(uint64_t (**)(_QWORD))(v0 + 8))(*(unsigned __int8 *)(v0 + 72));
  }
  else
  {
    sub_10000E534(v0 + 16);
  }
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(2);
}

Swift::Bool_optional __swiftcall HMService.cachedBool(for:)(HomeWidgetLockScreen::CharacteristicKind a1)
{
  void *v1;
  void *v2;
  id v3;
  id v4;
  _OWORD v6[2];
  __int128 v7;
  __int128 v8;

  v1 = HMService.subscript.getter(a1);
  if (!v1)
  {
    v7 = 0u;
    v8 = 0u;
LABEL_10:
    sub_10000E534((uint64_t)&v7);
    return (Swift::Bool_optional)2;
  }
  v2 = v1;
  v3 = objc_msgSend(v1, "value");
  if (v3)
  {
    v4 = v3;
    _bridgeAnyObjectToAny(_:)(v6, v3);
    swift_unknownObjectRelease(v4);
  }
  else
  {
    memset(v6, 0, sizeof(v6));
  }
  sub_1000184BC((uint64_t)v6, (uint64_t)&v7);

  if (!*((_QWORD *)&v8 + 1))
    goto LABEL_10;
  if (swift_dynamicCast(v6, &v7, (char *)&type metadata for Any + 8, &type metadata for Bool, 6))
    return (Swift::Bool_optional)v6[0];
  else
    return (Swift::Bool_optional)2;
}

uint64_t HMService.int(for:)(char a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 + 56) = v1;
  *(_BYTE *)(v2 + 80) = a1;
  return swift_task_switch(sub_10002CFA0, 0, 0);
}

uint64_t sub_10002CFA0()
{
  uint64_t v0;
  void *v1;
  _QWORD *v2;

  v1 = HMService.subscript.getter(*(_BYTE *)(v0 + 80));
  *(_QWORD *)(v0 + 64) = v1;
  if (v1)
  {
    v2 = (_QWORD *)swift_task_alloc(dword_100082264);
    *(_QWORD *)(v0 + 72) = v2;
    *v2 = v0;
    v2[1] = sub_10002D038;
    return HMCharacteristic.fetchedValue()(v0 + 16);
  }
  else
  {
    *(_OWORD *)(v0 + 16) = 0u;
    *(_OWORD *)(v0 + 32) = 0u;
    sub_10000E534(v0 + 16);
    return (*(uint64_t (**)(_QWORD, uint64_t))(v0 + 8))(0, 1);
  }
}

uint64_t sub_10002D038()
{
  uint64_t v0;
  void *v1;

  v1 = *(void **)(*(_QWORD *)v0 + 64);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 72));

  return swift_task_switch(sub_10002C03C, 0, 0);
}

Swift::Int_optional __swiftcall HMService.cachedInt(for:)(HomeWidgetLockScreen::CharacteristicKind a1)
{
  void *v1;
  void *v2;
  id v3;
  id v4;
  int v5;
  Swift::Int v6;
  char v7;
  _OWORD v8[2];
  __int128 v9;
  __int128 v10;
  Swift::Int_optional result;

  v1 = HMService.subscript.getter(a1);
  if (!v1)
  {
    v9 = 0u;
    v10 = 0u;
LABEL_11:
    sub_10000E534((uint64_t)&v9);
    v6 = 0;
    v7 = 1;
    goto LABEL_12;
  }
  v2 = v1;
  v3 = objc_msgSend(v1, "value");
  if (v3)
  {
    v4 = v3;
    _bridgeAnyObjectToAny(_:)(v8, v3);
    swift_unknownObjectRelease(v4);
  }
  else
  {
    memset(v8, 0, sizeof(v8));
  }
  sub_1000184BC((uint64_t)v8, (uint64_t)&v9);

  if (!*((_QWORD *)&v10 + 1))
    goto LABEL_11;
  v5 = swift_dynamicCast(v8, &v9, (char *)&type metadata for Any + 8, &type metadata for Int, 6);
  if (v5)
    v6 = *(_QWORD *)&v8[0];
  else
    v6 = 0;
  v7 = v5 ^ 1;
LABEL_12:
  result.value = v6;
  result.is_nil = v7;
  return result;
}

uint64_t HMService.float(for:)(char a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 + 56) = v1;
  *(_BYTE *)(v2 + 80) = a1;
  return swift_task_switch(sub_10002D180, 0, 0);
}

uint64_t sub_10002D180()
{
  uint64_t v0;
  void *v1;
  _QWORD *v2;

  v1 = HMService.subscript.getter(*(_BYTE *)(v0 + 80));
  *(_QWORD *)(v0 + 64) = v1;
  if (v1)
  {
    v2 = (_QWORD *)swift_task_alloc(dword_100082264);
    *(_QWORD *)(v0 + 72) = v2;
    *v2 = v0;
    v2[1] = sub_10002D218;
    return HMCharacteristic.fetchedValue()(v0 + 16);
  }
  else
  {
    *(_OWORD *)(v0 + 16) = 0u;
    *(_OWORD *)(v0 + 32) = 0u;
    sub_10000E534(v0 + 16);
    return (*(uint64_t (**)(_QWORD, uint64_t))(v0 + 8))(0, 1);
  }
}

uint64_t sub_10002D218()
{
  uint64_t v0;
  void *v1;

  v1 = *(void **)(*(_QWORD *)v0 + 64);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 72));

  return swift_task_switch(sub_10002C228, 0, 0);
}

Swift::Double_optional __swiftcall HMService.cachedFloat(for:)(HomeWidgetLockScreen::CharacteristicKind a1)
{
  void *v1;
  void *v2;
  id v3;
  id v4;
  double v5;
  char v6;
  _OWORD v7[2];
  __int128 v8;
  __int128 v9;
  Swift::Double_optional result;

  v1 = HMService.subscript.getter(a1);
  if (!v1)
  {
    v8 = 0u;
    v9 = 0u;
LABEL_11:
    sub_10000E534((uint64_t)&v8);
    v6 = 0;
    goto LABEL_12;
  }
  v2 = v1;
  v3 = objc_msgSend(v1, "value");
  if (v3)
  {
    v4 = v3;
    _bridgeAnyObjectToAny(_:)(v7, v3);
    swift_unknownObjectRelease(v4);
  }
  else
  {
    memset(v7, 0, sizeof(v7));
  }
  sub_1000184BC((uint64_t)v7, (uint64_t)&v8);

  if (!*((_QWORD *)&v9 + 1))
    goto LABEL_11;
  if (swift_dynamicCast(v7, &v8, (char *)&type metadata for Any + 8, &type metadata for Double, 6))
    v6 = v7[0];
  else
    v6 = 0;
LABEL_12:
  result.value = v5;
  result.is_nil = v6;
  return result;
}

uint64_t HMService.data(for:)(char a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 + 64) = v1;
  *(_BYTE *)(v2 + 88) = a1;
  return swift_task_switch(sub_10002D360, 0, 0);
}

uint64_t sub_10002D360()
{
  uint64_t v0;
  void *v1;
  _QWORD *v2;

  v1 = HMService.subscript.getter(*(_BYTE *)(v0 + 88));
  *(_QWORD *)(v0 + 72) = v1;
  if (v1)
  {
    v2 = (_QWORD *)swift_task_alloc(dword_100082264);
    *(_QWORD *)(v0 + 80) = v2;
    *v2 = v0;
    v2[1] = sub_10002D3F8;
    return HMCharacteristic.fetchedValue()(v0 + 16);
  }
  else
  {
    *(_OWORD *)(v0 + 16) = 0u;
    *(_OWORD *)(v0 + 32) = 0u;
    sub_10000E534(v0 + 16);
    return (*(uint64_t (**)(_QWORD, unint64_t))(v0 + 8))(0, 0xF000000000000000);
  }
}

uint64_t sub_10002D3F8()
{
  uint64_t v0;
  void *v1;

  v1 = *(void **)(*(_QWORD *)v0 + 72);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 80));

  return swift_task_switch(sub_10002C414, 0, 0);
}

uint64_t HMService.tlv8(for:)(char a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 + 64) = v1;
  *(_BYTE *)(v2 + 88) = a1;
  return swift_task_switch(sub_10002D470, 0, 0);
}

uint64_t sub_10002D470()
{
  uint64_t v0;
  void *v1;
  _QWORD *v2;

  v1 = HMService.subscript.getter(*(_BYTE *)(v0 + 88));
  *(_QWORD *)(v0 + 72) = v1;
  if (v1)
  {
    v2 = (_QWORD *)swift_task_alloc(dword_100082264);
    *(_QWORD *)(v0 + 80) = v2;
    *v2 = v0;
    v2[1] = sub_10002D508;
    return HMCharacteristic.fetchedValue()(v0 + 16);
  }
  else
  {
    *(_OWORD *)(v0 + 16) = 0u;
    *(_OWORD *)(v0 + 32) = 0u;
    sub_10000E534(v0 + 16);
    return (*(uint64_t (**)(_QWORD, unint64_t))(v0 + 8))(0, 0xF000000000000000);
  }
}

uint64_t sub_10002D508()
{
  uint64_t v0;
  void *v1;

  v1 = *(void **)(*(_QWORD *)v0 + 72);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 80));

  return swift_task_switch(sub_10002C64C, 0, 0);
}

uint64_t _sSo9HMServiceC20HomeWidgetLockScreenE10cachedTLV83for10Foundation4DataVSgAC18CharacteristicKindO_tF_0(unsigned __int8 a1)
{
  void *v1;
  void *v2;
  id v3;
  id v4;
  _OWORD v6[2];
  __int128 v7;
  __int128 v8;

  v1 = HMService.subscript.getter(a1);
  if (!v1)
  {
    v7 = 0u;
    v8 = 0u;
LABEL_11:
    sub_10000E534((uint64_t)&v7);
    return 0;
  }
  v2 = v1;
  v3 = objc_msgSend(v1, "value");
  if (v3)
  {
    v4 = v3;
    _bridgeAnyObjectToAny(_:)(v6, v3);
    swift_unknownObjectRelease(v4);
  }
  else
  {
    memset(v6, 0, sizeof(v6));
  }
  sub_1000184BC((uint64_t)v6, (uint64_t)&v7);

  if (!*((_QWORD *)&v8 + 1))
    goto LABEL_11;
  if (swift_dynamicCast(v6, &v7, (char *)&type metadata for Any + 8, &type metadata for Data, 6))
    return *(_QWORD *)&v6[0];
  else
    return 0;
}

uint64_t sub_10002D634(Swift::Int *a1, void *a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  id v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t result;
  Swift::Int v12;
  Swift::Int v13;
  uint64_t v14;
  unint64_t v15;
  id v16;
  char v17;
  uint64_t v18;
  id v19;
  char v20;
  void *v21;
  id v22;
  Swift::Int v23;
  unint64_t v24;
  uint64_t v25;
  id v26;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v28;
  uint64_t v29;
  id v30;
  uint64_t v31;
  Swift::Int v32;

  v3 = v2;
  v6 = *v2;
  if ((*v2 & 0xC000000000000001) != 0)
  {
    if (v6 < 0)
      v7 = *v2;
    else
      v7 = v6 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(*v2);
    v8 = a2;
    v9 = __CocoaSet.member(for:)();

    if (v9)
    {
      swift_bridgeObjectRelease(v6);

      v31 = v9;
      v10 = sub_10002EE84();
      swift_unknownObjectRetain(v9);
      swift_dynamicCast(&v32, &v31, (char *)&type metadata for Swift.AnyObject + 8, v10, 7);
      *a1 = v32;
      swift_unknownObjectRelease(v9);
      return 0;
    }
    result = __CocoaSet.count.getter(v7);
    if (__OFADD__(result, 1))
    {
      __break(1u);
      return result;
    }
    v23 = sub_10002DAC8(v7, result + 1);
    v32 = v23;
    v24 = *(_QWORD *)(v23 + 16);
    if (*(_QWORD *)(v23 + 24) <= v24)
    {
      v29 = v24 + 1;
      v30 = v8;
      sub_10002DCAC(v29);
      v25 = v32;
    }
    else
    {
      v25 = v23;
      v26 = v8;
    }
    sub_10002E21C((uint64_t)v8, v25);
    v28 = *v3;
    *v3 = v25;
  }
  else
  {
    v12 = *(_QWORD *)(v6 + 40);
    swift_bridgeObjectRetain(v6);
    v13 = NSObject._rawHashValue(seed:)(v12);
    v14 = -1 << *(_BYTE *)(v6 + 32);
    v15 = v13 & ~v14;
    if (((*(_QWORD *)(v6 + 56 + ((v15 >> 3) & 0xFFFFFFFFFFFFF8)) >> v15) & 1) != 0)
    {
      sub_10002EE84();
      v16 = *(id *)(*(_QWORD *)(v6 + 48) + 8 * v15);
      v17 = static NSObject.== infix(_:_:)(v16, a2);

      if ((v17 & 1) != 0)
      {
LABEL_12:

        swift_bridgeObjectRelease(v6);
        v21 = *(void **)(*(_QWORD *)(*v3 + 48) + 8 * v15);
        *a1 = (Swift::Int)v21;
        v22 = v21;
        return 0;
      }
      v18 = ~v14;
      while (1)
      {
        v15 = (v15 + 1) & v18;
        if (((*(_QWORD *)(v6 + 56 + ((v15 >> 3) & 0xFFFFFFFFFFFFF8)) >> v15) & 1) == 0)
          break;
        v19 = *(id *)(*(_QWORD *)(v6 + 48) + 8 * v15);
        v20 = static NSObject.== infix(_:_:)(v19, a2);

        if ((v20 & 1) != 0)
          goto LABEL_12;
      }
    }
    swift_bridgeObjectRelease(v6);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
    v32 = *v3;
    *v3 = 0x8000000000000000;
    v8 = a2;
    sub_10002E29C((uint64_t)v8, v15, isUniquelyReferenced_nonNull_native);
    v28 = *v3;
    *v3 = v32;
  }
  swift_bridgeObjectRelease(v28);
  *a1 = (Swift::Int)v8;
  return 1;
}

uint64_t sub_10002D8B0(_BYTE *a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  Swift::Int v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v19;
  char v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v27;
  char v28;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v30;
  uint64_t result;
  _QWORD v32[9];

  v3 = v2;
  v6 = *v2;
  Hasher.init(_seed:)(v32, *(_QWORD *)(*v2 + 40));
  v7 = CharacteristicKind.rawValue.getter(a2);
  v9 = v8;
  swift_bridgeObjectRetain(v6);
  String.hash(into:)(v32, v7, v9);
  swift_bridgeObjectRelease(v9);
  v10 = Hasher._finalize()();
  v11 = -1 << *(_BYTE *)(v6 + 32);
  v12 = v10 & ~v11;
  if (((*(_QWORD *)(v6 + 56 + ((v12 >> 3) & 0xFFFFFFFFFFFFF8)) >> v12) & 1) != 0)
  {
    v13 = CharacteristicKind.rawValue.getter(*(_BYTE *)(*(_QWORD *)(v6 + 48) + v12));
    v15 = v14;
    v16 = CharacteristicKind.rawValue.getter(a2);
    if (v13 == v16 && v15 == v17)
    {
LABEL_17:
      swift_bridgeObjectRelease(v6);
      swift_bridgeObjectRelease_n(v15, 2);
      goto LABEL_18;
    }
    v19 = v17;
    v20 = _stringCompareWithSmolCheck(_:_:expecting:)(v13, v15, v16, v17, 0);
    swift_bridgeObjectRelease(v15);
    swift_bridgeObjectRelease(v19);
    if ((v20 & 1) != 0)
    {
LABEL_7:
      swift_bridgeObjectRelease(v6);
LABEL_18:
      result = 0;
      LOBYTE(a2) = *(_BYTE *)(*(_QWORD *)(*v3 + 48) + v12);
      goto LABEL_19;
    }
    v21 = ~v11;
    while (1)
    {
      v12 = (v12 + 1) & v21;
      if (((*(_QWORD *)(v6 + 56 + ((v12 >> 3) & 0xFFFFFFFFFFFFF8)) >> v12) & 1) == 0)
        break;
      v22 = CharacteristicKind.rawValue.getter(*(_BYTE *)(*(_QWORD *)(v6 + 48) + v12));
      v15 = v23;
      v24 = CharacteristicKind.rawValue.getter(a2);
      if (v22 == v24 && v15 == v25)
        goto LABEL_17;
      v27 = v25;
      v28 = _stringCompareWithSmolCheck(_:_:expecting:)(v22, v15, v24, v25, 0);
      swift_bridgeObjectRelease(v15);
      swift_bridgeObjectRelease(v27);
      if ((v28 & 1) != 0)
        goto LABEL_7;
    }
  }
  swift_bridgeObjectRelease(v6);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
  v32[0] = *v3;
  *v3 = 0x8000000000000000;
  sub_10002E410(a2, v12, isUniquelyReferenced_nonNull_native);
  v30 = *v3;
  *v3 = v32[0];
  swift_bridgeObjectRelease(v30);
  result = 1;
LABEL_19:
  *a1 = a2;
  return result;
}

Swift::Int sub_10002DAC8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  Swift::Int result;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  char v17;
  unint64_t v18;
  BOOL v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  if (a2)
  {
    sub_100003704(&qword_100081ED8);
    v4 = static _SetStorage.convert(_:capacity:)(a1, a2);
    v23 = v4;
    v5 = __CocoaSet.makeIterator()(a1);
    v6 = __CocoaSet.Iterator.next()();
    if (v6)
    {
      v7 = v6;
      v8 = sub_10002EE84();
      do
      {
        v21 = v7;
        swift_dynamicCast(&v22, &v21, (char *)&type metadata for Swift.AnyObject + 8, v8, 7);
        v4 = v23;
        v16 = *(_QWORD *)(v23 + 16);
        if (*(_QWORD *)(v23 + 24) <= v16)
        {
          sub_10002DCAC(v16 + 1);
          v4 = v23;
        }
        v9 = v22;
        result = NSObject._rawHashValue(seed:)(*(_QWORD *)(v4 + 40));
        v11 = v4 + 56;
        v12 = -1 << *(_BYTE *)(v4 + 32);
        v13 = result & ~v12;
        v14 = v13 >> 6;
        if (((-1 << v13) & ~*(_QWORD *)(v4 + 56 + 8 * (v13 >> 6))) != 0)
        {
          v15 = __clz(__rbit64((-1 << v13) & ~*(_QWORD *)(v4 + 56 + 8 * (v13 >> 6)))) | v13 & 0x7FFFFFFFFFFFFFC0;
        }
        else
        {
          v17 = 0;
          v18 = (unint64_t)(63 - v12) >> 6;
          do
          {
            if (++v14 == v18 && (v17 & 1) != 0)
            {
              __break(1u);
              return result;
            }
            v19 = v14 == v18;
            if (v14 == v18)
              v14 = 0;
            v17 |= v19;
            v20 = *(_QWORD *)(v11 + 8 * v14);
          }
          while (v20 == -1);
          v15 = __clz(__rbit64(~v20)) + (v14 << 6);
        }
        *(_QWORD *)(v11 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
        *(_QWORD *)(*(_QWORD *)(v4 + 48) + 8 * v15) = v9;
        ++*(_QWORD *)(v4 + 16);
        v7 = __CocoaSet.Iterator.next()();
      }
      while (v7);
    }
    swift_release(v5);
  }
  else
  {
    swift_unknownObjectRelease(a1);
    return (Swift::Int)&_swiftEmptySetSingleton;
  }
  return v4;
}

Swift::Int sub_10002DCAC(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t v10;
  int64_t v11;
  uint64_t v12;
  Swift::Int result;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;

  v2 = v1;
  v3 = *v1;
  if (*(_QWORD *)(*v1 + 24) <= a1)
    v4 = a1;
  else
    v4 = *(_QWORD *)(*v1 + 24);
  sub_100003704(&qword_100081ED8);
  v5 = static _SetStorage.resize(original:capacity:move:)(v3, v4, 1);
  v6 = v5;
  if (*(_QWORD *)(v3 + 16))
  {
    v30 = v2;
    v7 = 1 << *(_BYTE *)(v3 + 32);
    v8 = (_QWORD *)(v3 + 56);
    if (v7 < 64)
      v9 = ~(-1 << v7);
    else
      v9 = -1;
    v10 = v9 & *(_QWORD *)(v3 + 56);
    v11 = (unint64_t)(v7 + 63) >> 6;
    v12 = v5 + 56;
    result = swift_retain(v3);
    v14 = 0;
    while (1)
    {
      if (v10)
      {
        v16 = __clz(__rbit64(v10));
        v10 &= v10 - 1;
        v17 = v16 | (v14 << 6);
      }
      else
      {
        v18 = v14 + 1;
        if (__OFADD__(v14, 1))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return result;
        }
        if (v18 >= v11)
          goto LABEL_36;
        v19 = v8[v18];
        ++v14;
        if (!v19)
        {
          v14 = v18 + 1;
          if (v18 + 1 >= v11)
            goto LABEL_36;
          v19 = v8[v14];
          if (!v19)
          {
            v14 = v18 + 2;
            if (v18 + 2 >= v11)
              goto LABEL_36;
            v19 = v8[v14];
            if (!v19)
            {
              v20 = v18 + 3;
              if (v20 >= v11)
              {
LABEL_36:
                swift_release(v3);
                v2 = v30;
                v29 = 1 << *(_BYTE *)(v3 + 32);
                if (v29 > 63)
                  bzero((void *)(v3 + 56), ((unint64_t)(v29 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v8 = -1 << v29;
                *(_QWORD *)(v3 + 16) = 0;
                break;
              }
              v19 = v8[v20];
              if (!v19)
              {
                while (1)
                {
                  v14 = v20 + 1;
                  if (__OFADD__(v20, 1))
                    goto LABEL_42;
                  if (v14 >= v11)
                    goto LABEL_36;
                  v19 = v8[v14];
                  ++v20;
                  if (v19)
                    goto LABEL_26;
                }
              }
              v14 = v20;
            }
          }
        }
LABEL_26:
        v10 = (v19 - 1) & v19;
        v17 = __clz(__rbit64(v19)) + (v14 << 6);
      }
      v21 = *(_QWORD *)(*(_QWORD *)(v3 + 48) + 8 * v17);
      result = NSObject._rawHashValue(seed:)(*(_QWORD *)(v6 + 40));
      v22 = -1 << *(_BYTE *)(v6 + 32);
      v23 = result & ~v22;
      v24 = v23 >> 6;
      if (((-1 << v23) & ~*(_QWORD *)(v12 + 8 * (v23 >> 6))) != 0)
      {
        v15 = __clz(__rbit64((-1 << v23) & ~*(_QWORD *)(v12 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v25 = 0;
        v26 = (unint64_t)(63 - v22) >> 6;
        do
        {
          if (++v24 == v26 && (v25 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }
          v27 = v24 == v26;
          if (v24 == v26)
            v24 = 0;
          v25 |= v27;
          v28 = *(_QWORD *)(v12 + 8 * v24);
        }
        while (v28 == -1);
        v15 = __clz(__rbit64(~v28)) + (v24 << 6);
      }
      *(_QWORD *)(v12 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
      *(_QWORD *)(*(_QWORD *)(v6 + 48) + 8 * v15) = v21;
      ++*(_QWORD *)(v6 + 16);
    }
  }
  result = swift_release(v3);
  *v2 = v6;
  return result;
}

Swift::Int sub_10002DF48(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t v10;
  int64_t v11;
  uint64_t v12;
  Swift::Int result;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;
  unsigned __int8 v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  char v28;
  unint64_t v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  _QWORD v34[9];

  v2 = v1;
  v3 = *v1;
  if (*(_QWORD *)(*v1 + 24) <= a1)
    v4 = a1;
  else
    v4 = *(_QWORD *)(*v1 + 24);
  sub_100003704(&qword_100081EA0);
  v5 = static _SetStorage.resize(original:capacity:move:)(v3, v4, 1);
  v6 = v5;
  if (*(_QWORD *)(v3 + 16))
  {
    v33 = v2;
    v7 = 1 << *(_BYTE *)(v3 + 32);
    v8 = (_QWORD *)(v3 + 56);
    if (v7 < 64)
      v9 = ~(-1 << v7);
    else
      v9 = -1;
    v10 = v9 & *(_QWORD *)(v3 + 56);
    v11 = (unint64_t)(v7 + 63) >> 6;
    v12 = v5 + 56;
    result = swift_retain(v3);
    v14 = 0;
    while (1)
    {
      if (v10)
      {
        v16 = __clz(__rbit64(v10));
        v10 &= v10 - 1;
        v17 = v16 | (v14 << 6);
      }
      else
      {
        v18 = v14 + 1;
        if (__OFADD__(v14, 1))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return result;
        }
        if (v18 >= v11)
          goto LABEL_36;
        v19 = v8[v18];
        ++v14;
        if (!v19)
        {
          v14 = v18 + 1;
          if (v18 + 1 >= v11)
            goto LABEL_36;
          v19 = v8[v14];
          if (!v19)
          {
            v14 = v18 + 2;
            if (v18 + 2 >= v11)
              goto LABEL_36;
            v19 = v8[v14];
            if (!v19)
            {
              v20 = v18 + 3;
              if (v20 >= v11)
              {
LABEL_36:
                swift_release(v3);
                v2 = v33;
                v32 = 1 << *(_BYTE *)(v3 + 32);
                if (v32 > 63)
                  bzero((void *)(v3 + 56), ((unint64_t)(v32 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v8 = -1 << v32;
                *(_QWORD *)(v3 + 16) = 0;
                break;
              }
              v19 = v8[v20];
              if (!v19)
              {
                while (1)
                {
                  v14 = v20 + 1;
                  if (__OFADD__(v20, 1))
                    goto LABEL_42;
                  if (v14 >= v11)
                    goto LABEL_36;
                  v19 = v8[v14];
                  ++v20;
                  if (v19)
                    goto LABEL_26;
                }
              }
              v14 = v20;
            }
          }
        }
LABEL_26:
        v10 = (v19 - 1) & v19;
        v17 = __clz(__rbit64(v19)) + (v14 << 6);
      }
      v21 = *(_BYTE *)(*(_QWORD *)(v3 + 48) + v17);
      Hasher.init(_seed:)(v34, *(_QWORD *)(v6 + 40));
      v22 = CharacteristicKind.rawValue.getter(v21);
      v24 = v23;
      String.hash(into:)(v34, v22, v23);
      swift_bridgeObjectRelease(v24);
      result = Hasher._finalize()();
      v25 = -1 << *(_BYTE *)(v6 + 32);
      v26 = result & ~v25;
      v27 = v26 >> 6;
      if (((-1 << v26) & ~*(_QWORD *)(v12 + 8 * (v26 >> 6))) != 0)
      {
        v15 = __clz(__rbit64((-1 << v26) & ~*(_QWORD *)(v12 + 8 * (v26 >> 6)))) | v26 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v28 = 0;
        v29 = (unint64_t)(63 - v25) >> 6;
        do
        {
          if (++v27 == v29 && (v28 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }
          v30 = v27 == v29;
          if (v27 == v29)
            v27 = 0;
          v28 |= v30;
          v31 = *(_QWORD *)(v12 + 8 * v27);
        }
        while (v31 == -1);
        v15 = __clz(__rbit64(~v31)) + (v27 << 6);
      }
      *(_QWORD *)(v12 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
      *(_BYTE *)(*(_QWORD *)(v6 + 48) + v15) = v21;
      ++*(_QWORD *)(v6 + 16);
    }
  }
  result = swift_release(v3);
  *v2 = v6;
  return result;
}

unint64_t sub_10002E21C(uint64_t a1, uint64_t a2)
{
  Swift::Int v4;
  unint64_t result;

  v4 = NSObject._rawHashValue(seed:)(*(_QWORD *)(a2 + 40));
  result = _HashTable.nextHole(atOrAfter:)(v4 & ~(-1 << *(_BYTE *)(a2 + 32)), a2 + 56, ~(-1 << *(_BYTE *)(a2 + 32)));
  *(_QWORD *)(a2 + 56 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
  *(_QWORD *)(*(_QWORD *)(a2 + 48) + 8 * result) = a1;
  ++*(_QWORD *)(a2 + 16);
  return result;
}

void sub_10002E29C(uint64_t a1, unint64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t *v4;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  Swift::Int v11;
  uint64_t v12;
  unint64_t v13;
  id v14;
  char v15;
  uint64_t v16;
  id v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;

  v4 = v3;
  v7 = *(_QWORD *)(*v3 + 16);
  v8 = *(_QWORD *)(*v3 + 24);
  if (v8 > v7 && (a3 & 1) != 0)
    goto LABEL_14;
  v9 = v7 + 1;
  if ((a3 & 1) != 0)
  {
    sub_10002DCAC(v9);
  }
  else
  {
    if (v8 > v7)
    {
      sub_10002E634();
      goto LABEL_14;
    }
    sub_10002E96C(v9);
  }
  v10 = *v3;
  v11 = NSObject._rawHashValue(seed:)(*(_QWORD *)(*v3 + 40));
  v12 = -1 << *(_BYTE *)(v10 + 32);
  a2 = v11 & ~v12;
  if (((*(_QWORD *)(v10 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0)
  {
    v13 = sub_10002EE84();
    v14 = *(id *)(*(_QWORD *)(v10 + 48) + 8 * a2);
    v15 = static NSObject.== infix(_:_:)(v14, a1);

    if ((v15 & 1) != 0)
    {
LABEL_13:
      ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v13);
      __break(1u);
    }
    else
    {
      v16 = ~v12;
      while (1)
      {
        a2 = (a2 + 1) & v16;
        if (((*(_QWORD *)(v10 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) == 0)
          break;
        v17 = *(id *)(*(_QWORD *)(v10 + 48) + 8 * a2);
        v18 = static NSObject.== infix(_:_:)(v17, a1);

        if ((v18 & 1) != 0)
          goto LABEL_13;
      }
    }
  }
LABEL_14:
  v19 = *v4;
  *(_QWORD *)(*v4 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  *(_QWORD *)(*(_QWORD *)(v19 + 48) + 8 * a2) = a1;
  v20 = *(_QWORD *)(v19 + 16);
  v21 = __OFADD__(v20, 1);
  v22 = v20 + 1;
  if (v21)
    __break(1u);
  else
    *(_QWORD *)(v19 + 16) = v22;
}

uint64_t sub_10002E410(uint64_t result, unint64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t *v4;
  unsigned __int8 v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t *v16;
  unint64_t v17;
  uint64_t *v18;
  uint64_t *v20;
  char v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t *v24;
  unint64_t v25;
  uint64_t *v26;
  uint64_t *v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  BOOL v32;
  uint64_t v33;
  _QWORD v34[9];

  v4 = v3;
  v6 = result;
  v7 = *(_QWORD *)(*v3 + 16);
  v8 = *(_QWORD *)(*v3 + 24);
  if (v8 > v7 && (a3 & 1) != 0)
    goto LABEL_22;
  v9 = v7 + 1;
  if ((a3 & 1) != 0)
  {
    sub_10002DF48(v9);
  }
  else
  {
    if (v8 > v7)
    {
      result = (uint64_t)sub_10002E7DC();
LABEL_22:
      v30 = *v4;
      *(_QWORD *)(*v4 + 8 * (a2 >> 6) + 56) |= 1 << a2;
      *(_BYTE *)(*(_QWORD *)(v30 + 48) + a2) = v6;
      v31 = *(_QWORD *)(v30 + 16);
      v32 = __OFADD__(v31, 1);
      v33 = v31 + 1;
      if (!v32)
      {
        *(_QWORD *)(v30 + 16) = v33;
        return result;
      }
      __break(1u);
      goto LABEL_25;
    }
    sub_10002EBE4(v9);
  }
  v10 = *v3;
  Hasher.init(_seed:)(v34, *(_QWORD *)(*v3 + 40));
  v11 = CharacteristicKind.rawValue.getter(v6);
  v13 = v12;
  String.hash(into:)(v34, v11, v12);
  swift_bridgeObjectRelease(v13);
  v3 = v34;
  result = Hasher._finalize()();
  v14 = -1 << *(_BYTE *)(v10 + 32);
  a2 = result & ~v14;
  if (((*(_QWORD *)(v10 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) == 0)
    goto LABEL_22;
  v15 = CharacteristicKind.rawValue.getter(*(_BYTE *)(*(_QWORD *)(v10 + 48) + a2));
  v3 = v16;
  v17 = CharacteristicKind.rawValue.getter(v6);
  if (v15 == v17 && v3 == v18)
  {
LABEL_25:
    swift_bridgeObjectRelease_n(v3, 2);
    goto LABEL_26;
  }
  v20 = v18;
  v21 = _stringCompareWithSmolCheck(_:_:expecting:)(v15, v3, v17, v18, 0);
  swift_bridgeObjectRelease(v3);
  result = swift_bridgeObjectRelease(v20);
  if ((v21 & 1) == 0)
  {
    v22 = ~v14;
    do
    {
      a2 = (a2 + 1) & v22;
      if (((*(_QWORD *)(v10 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) == 0)
        goto LABEL_22;
      v23 = CharacteristicKind.rawValue.getter(*(_BYTE *)(*(_QWORD *)(v10 + 48) + a2));
      v3 = v24;
      v25 = CharacteristicKind.rawValue.getter(v6);
      if (v23 == v25 && v3 == v26)
        goto LABEL_25;
      v28 = v26;
      v29 = _stringCompareWithSmolCheck(_:_:expecting:)(v23, v3, v25, v26, 0);
      swift_bridgeObjectRelease(v3);
      result = swift_bridgeObjectRelease(v28);
    }
    while ((v29 & 1) == 0);
  }
LABEL_26:
  result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for CharacteristicKind);
  __break(1u);
  return result;
}

id sub_10002E634()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  id result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  void *v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;

  v1 = v0;
  sub_100003704(&qword_100081ED8);
  v2 = *v0;
  v3 = static _SetStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_28:
    result = (id)swift_release(v2);
    *v1 = v4;
    return result;
  }
  result = (id)(v3 + 56);
  v6 = v2 + 56;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 56);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v18 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v18 >= v13)
      goto LABEL_28;
    v19 = *(_QWORD *)(v6 + 8 * v18);
    ++v9;
    if (!v19)
    {
      v9 = v18 + 1;
      if (v18 + 1 >= v13)
        goto LABEL_28;
      v19 = *(_QWORD *)(v6 + 8 * v9);
      if (!v19)
      {
        v9 = v18 + 2;
        if (v18 + 2 >= v13)
          goto LABEL_28;
        v19 = *(_QWORD *)(v6 + 8 * v9);
        if (!v19)
          break;
      }
    }
LABEL_27:
    v12 = (v19 - 1) & v19;
    v15 = __clz(__rbit64(v19)) + (v9 << 6);
LABEL_12:
    v16 = 8 * v15;
    v17 = *(void **)(*(_QWORD *)(v2 + 48) + v16);
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + v16) = v17;
    result = v17;
  }
  v20 = v18 + 3;
  if (v20 >= v13)
    goto LABEL_28;
  v19 = *(_QWORD *)(v6 + 8 * v20);
  if (v19)
  {
    v9 = v20;
    goto LABEL_27;
  }
  while (1)
  {
    v9 = v20 + 1;
    if (__OFADD__(v20, 1))
      break;
    if (v9 >= v13)
      goto LABEL_28;
    v19 = *(_QWORD *)(v6 + 8 * v9);
    ++v20;
    if (v19)
      goto LABEL_27;
  }
LABEL_30:
  __break(1u);
  return result;
}

void *sub_10002E7DC()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;

  v1 = v0;
  sub_100003704(&qword_100081EA0);
  v2 = *v0;
  v3 = static _SetStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_28:
    result = (void *)swift_release(v2);
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 56);
  v6 = v2 + 56;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 56);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v16 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v16 >= v13)
      goto LABEL_28;
    v17 = *(_QWORD *)(v6 + 8 * v16);
    ++v9;
    if (!v17)
    {
      v9 = v16 + 1;
      if (v16 + 1 >= v13)
        goto LABEL_28;
      v17 = *(_QWORD *)(v6 + 8 * v9);
      if (!v17)
      {
        v9 = v16 + 2;
        if (v16 + 2 >= v13)
          goto LABEL_28;
        v17 = *(_QWORD *)(v6 + 8 * v9);
        if (!v17)
          break;
      }
    }
LABEL_27:
    v12 = (v17 - 1) & v17;
    v15 = __clz(__rbit64(v17)) + (v9 << 6);
LABEL_12:
    *(_BYTE *)(*(_QWORD *)(v4 + 48) + v15) = *(_BYTE *)(*(_QWORD *)(v2 + 48) + v15);
  }
  v18 = v16 + 3;
  if (v18 >= v13)
    goto LABEL_28;
  v17 = *(_QWORD *)(v6 + 8 * v18);
  if (v17)
  {
    v9 = v18;
    goto LABEL_27;
  }
  while (1)
  {
    v9 = v18 + 1;
    if (__OFADD__(v18, 1))
      break;
    if (v9 >= v13)
      goto LABEL_28;
    v17 = *(_QWORD *)(v6 + 8 * v9);
    ++v18;
    if (v17)
      goto LABEL_27;
  }
LABEL_30:
  __break(1u);
  return result;
}

Swift::Int sub_10002E96C(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  int64_t v11;
  uint64_t v12;
  Swift::Int result;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;
  Swift::Int v21;
  id v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t *v30;

  v2 = v1;
  v3 = *v1;
  if (*(_QWORD *)(*v1 + 24) <= a1)
    v4 = a1;
  else
    v4 = *(_QWORD *)(*v1 + 24);
  sub_100003704(&qword_100081ED8);
  v5 = static _SetStorage.resize(original:capacity:move:)(v3, v4, 0);
  v6 = v5;
  if (!*(_QWORD *)(v3 + 16))
  {
    result = swift_release(v3);
LABEL_38:
    *v2 = v6;
    return result;
  }
  v30 = v2;
  v7 = 1 << *(_BYTE *)(v3 + 32);
  v8 = v3 + 56;
  if (v7 < 64)
    v9 = ~(-1 << v7);
  else
    v9 = -1;
  v10 = v9 & *(_QWORD *)(v3 + 56);
  v11 = (unint64_t)(v7 + 63) >> 6;
  v12 = v5 + 56;
  result = swift_retain(v3);
  v14 = 0;
  while (1)
  {
    if (v10)
    {
      v16 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v17 = v16 | (v14 << 6);
      goto LABEL_27;
    }
    v18 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }
    if (v18 >= v11)
      goto LABEL_36;
    v19 = *(_QWORD *)(v8 + 8 * v18);
    ++v14;
    if (!v19)
    {
      v14 = v18 + 1;
      if (v18 + 1 >= v11)
        goto LABEL_36;
      v19 = *(_QWORD *)(v8 + 8 * v14);
      if (!v19)
      {
        v14 = v18 + 2;
        if (v18 + 2 >= v11)
          goto LABEL_36;
        v19 = *(_QWORD *)(v8 + 8 * v14);
        if (!v19)
          break;
      }
    }
LABEL_26:
    v10 = (v19 - 1) & v19;
    v17 = __clz(__rbit64(v19)) + (v14 << 6);
LABEL_27:
    v21 = *(_QWORD *)(v6 + 40);
    v22 = *(id *)(*(_QWORD *)(v3 + 48) + 8 * v17);
    result = NSObject._rawHashValue(seed:)(v21);
    v23 = -1 << *(_BYTE *)(v6 + 32);
    v24 = result & ~v23;
    v25 = v24 >> 6;
    if (((-1 << v24) & ~*(_QWORD *)(v12 + 8 * (v24 >> 6))) != 0)
    {
      v15 = __clz(__rbit64((-1 << v24) & ~*(_QWORD *)(v12 + 8 * (v24 >> 6)))) | v24 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v26 = 0;
      v27 = (unint64_t)(63 - v23) >> 6;
      do
      {
        if (++v25 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }
        v28 = v25 == v27;
        if (v25 == v27)
          v25 = 0;
        v26 |= v28;
        v29 = *(_QWORD *)(v12 + 8 * v25);
      }
      while (v29 == -1);
      v15 = __clz(__rbit64(~v29)) + (v25 << 6);
    }
    *(_QWORD *)(v12 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
    *(_QWORD *)(*(_QWORD *)(v6 + 48) + 8 * v15) = v22;
    ++*(_QWORD *)(v6 + 16);
  }
  v20 = v18 + 3;
  if (v20 >= v11)
  {
LABEL_36:
    result = swift_release_n(v3, 2);
    v2 = v30;
    goto LABEL_38;
  }
  v19 = *(_QWORD *)(v8 + 8 * v20);
  if (v19)
  {
    v14 = v20;
    goto LABEL_26;
  }
  while (1)
  {
    v14 = v20 + 1;
    if (__OFADD__(v20, 1))
      break;
    if (v14 >= v11)
      goto LABEL_36;
    v19 = *(_QWORD *)(v8 + 8 * v14);
    ++v20;
    if (v19)
      goto LABEL_26;
  }
LABEL_40:
  __break(1u);
  return result;
}

Swift::Int sub_10002EBE4(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  int64_t v11;
  uint64_t v12;
  Swift::Int result;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;
  unsigned __int8 v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  char v28;
  unint64_t v29;
  BOOL v30;
  uint64_t v31;
  uint64_t *v32;
  _QWORD v33[9];

  v2 = v1;
  v3 = *v1;
  if (*(_QWORD *)(*v1 + 24) <= a1)
    v4 = a1;
  else
    v4 = *(_QWORD *)(*v1 + 24);
  sub_100003704(&qword_100081EA0);
  v5 = static _SetStorage.resize(original:capacity:move:)(v3, v4, 0);
  v6 = v5;
  if (!*(_QWORD *)(v3 + 16))
  {
    result = swift_release(v3);
LABEL_38:
    *v2 = v6;
    return result;
  }
  v32 = v2;
  v7 = 1 << *(_BYTE *)(v3 + 32);
  v8 = v3 + 56;
  if (v7 < 64)
    v9 = ~(-1 << v7);
  else
    v9 = -1;
  v10 = v9 & *(_QWORD *)(v3 + 56);
  v11 = (unint64_t)(v7 + 63) >> 6;
  v12 = v5 + 56;
  result = swift_retain(v3);
  v14 = 0;
  while (1)
  {
    if (v10)
    {
      v16 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v17 = v16 | (v14 << 6);
      goto LABEL_27;
    }
    v18 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }
    if (v18 >= v11)
      goto LABEL_36;
    v19 = *(_QWORD *)(v8 + 8 * v18);
    ++v14;
    if (!v19)
    {
      v14 = v18 + 1;
      if (v18 + 1 >= v11)
        goto LABEL_36;
      v19 = *(_QWORD *)(v8 + 8 * v14);
      if (!v19)
      {
        v14 = v18 + 2;
        if (v18 + 2 >= v11)
          goto LABEL_36;
        v19 = *(_QWORD *)(v8 + 8 * v14);
        if (!v19)
          break;
      }
    }
LABEL_26:
    v10 = (v19 - 1) & v19;
    v17 = __clz(__rbit64(v19)) + (v14 << 6);
LABEL_27:
    v21 = *(_BYTE *)(*(_QWORD *)(v3 + 48) + v17);
    Hasher.init(_seed:)(v33, *(_QWORD *)(v6 + 40));
    v22 = CharacteristicKind.rawValue.getter(v21);
    v24 = v23;
    String.hash(into:)(v33, v22, v23);
    swift_bridgeObjectRelease(v24);
    result = Hasher._finalize()();
    v25 = -1 << *(_BYTE *)(v6 + 32);
    v26 = result & ~v25;
    v27 = v26 >> 6;
    if (((-1 << v26) & ~*(_QWORD *)(v12 + 8 * (v26 >> 6))) != 0)
    {
      v15 = __clz(__rbit64((-1 << v26) & ~*(_QWORD *)(v12 + 8 * (v26 >> 6)))) | v26 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v28 = 0;
      v29 = (unint64_t)(63 - v25) >> 6;
      do
      {
        if (++v27 == v29 && (v28 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }
        v30 = v27 == v29;
        if (v27 == v29)
          v27 = 0;
        v28 |= v30;
        v31 = *(_QWORD *)(v12 + 8 * v27);
      }
      while (v31 == -1);
      v15 = __clz(__rbit64(~v31)) + (v27 << 6);
    }
    *(_QWORD *)(v12 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
    *(_BYTE *)(*(_QWORD *)(v6 + 48) + v15) = v21;
    ++*(_QWORD *)(v6 + 16);
  }
  v20 = v18 + 3;
  if (v20 >= v11)
  {
LABEL_36:
    result = swift_release_n(v3, 2);
    v2 = v32;
    goto LABEL_38;
  }
  v19 = *(_QWORD *)(v8 + 8 * v20);
  if (v19)
  {
    v14 = v20;
    goto LABEL_26;
  }
  while (1)
  {
    v14 = v20 + 1;
    if (__OFADD__(v20, 1))
      break;
    if (v14 >= v11)
      goto LABEL_36;
    v19 = *(_QWORD *)(v8 + 8 * v14);
    ++v20;
    if (v19)
      goto LABEL_26;
  }
LABEL_40:
  __break(1u);
  return result;
}

unint64_t sub_10002EE84()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100082010;
  if (!qword_100082010)
  {
    v1 = objc_opt_self(HMCharacteristic);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_100082010);
  }
  return result;
}

void *sub_10002EEC0(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  void *v10;
  uint64_t v11;
  uint64_t i;
  id v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  void *v19;
  void *v20;

  v20 = a1;
  v6 = v5;
  v10 = a1;
  if ((unint64_t)a2 >> 62)
    goto LABEL_13;
  v11 = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain(a2);
  for (; v11; v11 = _CocoaArrayWrapper.endIndex.getter(v16))
  {
    for (i = 4; ; ++i)
    {
      v13 = (a2 & 0xC000000000000001) != 0
          ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(i - 4, a2)
          : *(id *)(a2 + 8 * i);
      v10 = v13;
      v14 = i - 3;
      if (__OFADD__(i - 4, 1))
        break;
      v19 = v13;
      sub_100017AA0((char *)&v20, &v19, a3, a4, a5);
      if (v6)
      {
        v15 = v20;
        swift_bridgeObjectRelease(a2);

        swift_bridgeObjectRelease(v15);
        return v10;
      }

      if (v14 == v11)
      {
        swift_bridgeObjectRelease(a2);
        return v20;
      }
    }
    __break(1u);
LABEL_13:
    if (a2 < 0)
      v16 = a2;
    else
      v16 = a2 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a2);
  }
  swift_bridgeObjectRelease(a2);
  return v10;
}

uint64_t sub_10002F004(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;

  v4[34] = a3;
  v4[35] = a4;
  v4[32] = a1;
  v4[33] = a2;
  return swift_task_switch(sub_10002F020, 0, 0);
}

uint64_t sub_10002F020()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  id v5;
  id v6;
  NSObject *v7;
  os_log_type_t v8;
  _BOOL4 v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t inited;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  _QWORD *v23;
  os_log_type_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  if (qword_100081680 != -1)
    swift_once(&qword_100081680, sub_100022448);
  v1 = v0 + 2;
  v2 = v0[35];
  v3 = (void *)v0[33];
  v4 = type metadata accessor for Logger(0);
  v0[36] = sub_100003884(v4, (uint64_t)static DataModel.widgetLogger);
  v5 = v3;
  swift_bridgeObjectRetain_n(v2, 2);
  v6 = v5;
  v7 = Logger.logObject.getter(v6);
  v8 = static os_log_type_t.default.getter();
  v9 = os_log_type_enabled(v7, v8);
  v10 = v0[35];
  if (v9)
  {
    v25 = v8;
    v11 = v0[34];
    v26 = v0[33];
    v12 = swift_slowAlloc(32, -1);
    v27 = swift_slowAlloc(96, -1);
    v28 = v27;
    *(_DWORD *)v12 = 136315650;
    swift_bridgeObjectRetain(v10);
    v0[29] = sub_10001DF04(v11, v10, &v28);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 29, v0 + 30, v12 + 4, v12 + 12);
    swift_bridgeObjectRelease_n(v10, 3);
    *(_WORD *)(v12 + 12) = 2080;
    v0[30] = sub_10001DF04(0xD00000000000001DLL, 0x8000000100067B60, &v28);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 30, v0 + 31, v12 + 14, v12 + 22);
    *(_WORD *)(v12 + 22) = 2080;
    if (v26)
    {
      v13 = objc_msgSend(v6, "name");
      v14 = static String._unconditionallyBridgeFromObjectiveC(_:)(v13);
      v16 = v15;

    }
    else
    {
      v16 = 0xE400000000000000;
      v14 = 1819047278;
    }
    v0[31] = sub_10001DF04(v14, v16, &v28);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 31, v0 + 32, v12 + 24, v12 + 32);
    swift_bridgeObjectRelease(v16);

    swift_arrayDestroy(v27, 3, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v27, -1, -1);
    swift_slowDealloc(v12, -1, -1);

    v1 = v0 + 2;
  }
  else
  {
    swift_bridgeObjectRelease_n(v0[35], 2);

  }
  if (qword_100081670 != -1)
    swift_once(&qword_100081670, sub_100021008);
  v17 = sub_100003704(&qword_1000817C0);
  inited = swift_initStackObject(v17, v1);
  v0[37] = inited;
  *(_OWORD *)(inited + 16) = xmmword_1000607D0;
  if (qword_100081668 != -1)
    swift_once(&qword_100081668, sub_100018470);
  v19 = *((_QWORD *)&xmmword_10008A608 + 1);
  v20 = xmmword_10008A618;
  v21 = xmmword_10008A628;
  v22 = qword_10008A638;
  *(_QWORD *)(inited + 32) = xmmword_10008A608;
  *(_QWORD *)(inited + 40) = v19;
  *(_OWORD *)(inited + 48) = v20;
  *(_OWORD *)(inited + 64) = v21;
  *(_QWORD *)(inited + 80) = v22;
  swift_bridgeObjectRetain(v19);
  swift_bridgeObjectRetain(v20);
  swift_bridgeObjectRetain(*((_QWORD *)&v20 + 1));
  swift_bridgeObjectRetain(v21);
  sub_10000389C(*((uint64_t *)&v21 + 1), v22);
  v23 = (_QWORD *)swift_task_alloc(dword_100081E74);
  v0[38] = v23;
  *v23 = v0;
  v23[1] = sub_10002F3D8;
  return DataModel.reloadCharacteristics(matching:for:fetchId:)(inited, v0[33], v0[34], v0[35]);
}

uint64_t sub_10002F3D8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v3 = *(_QWORD *)(*(_QWORD *)v1 + 296);
  v2 = *(_QWORD *)(*(_QWORD *)v1 + 304);
  *(_QWORD *)(*(_QWORD *)v1 + 312) = a1;
  swift_task_dealloc(v2);
  swift_setDeallocating(v3);
  swift_arrayDestroy(v3 + 32, *(_QWORD *)(v3 + 16), &type metadata for CharacteristicFetchSpecification);
  return swift_task_switch(sub_10002F454, 0, 0);
}

void sub_10002F454()
{
  uint64_t v0;
  void *v1;
  __int128 v2;
  id v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  double *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  double v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  NSObject *v19;
  os_log_type_t v20;
  _BOOL4 v21;
  unint64_t v22;
  uint64_t v23;
  uint8_t *v24;
  uint64_t v25;
  uint8_t *v26;
  double *v27;
  uint64_t v28;
  uint64_t v29;
  double *v30;
  double v31;
  uint64_t v32;
  double v33;
  uint64_t v34;
  NSObject *v35;
  os_log_type_t v36;
  _BOOL4 v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  double v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48[2];

  v47 = v0 + 224;
  v1 = *(void **)(v0 + 264);
  v2 = xmmword_10008A618;
  *(_OWORD *)(v0 + 104) = xmmword_10008A608;
  *(_OWORD *)(v0 + 120) = v2;
  *(_OWORD *)(v0 + 136) = xmmword_10008A628;
  *(_QWORD *)(v0 + 152) = qword_10008A638;
  if (v1)
  {
    v3 = objc_msgSend(v1, "accessories");
    v4 = sub_10002F9D4();
    v5 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v3, v4);

    *(_OWORD *)(v0 + 160) = *(_OWORD *)(v0 + 104);
    *(_OWORD *)(v0 + 176) = *(_OWORD *)(v0 + 120);
    v6 = *(_QWORD *)(v0 + 144);
    *(_QWORD *)(v0 + 192) = *(_QWORD *)(v0 + 136);
    v7 = *(_QWORD *)(v0 + 152);
    sub_1000038E4(v0 + 160);
    sub_10000390C((_QWORD *)(v0 + 176));
    sub_10000390C((_QWORD *)(v0 + 184));
    sub_10000390C((_QWORD *)(v0 + 192));
    sub_10000389C(v6, v7);
    v8 = sub_10001FE8C(v5, v0 + 104);
    sub_100003934(v0 + 160);
    sub_10000395C((_QWORD *)(v0 + 176));
    sub_10000395C((_QWORD *)(v0 + 184));
    sub_10000395C((_QWORD *)(v0 + 192));
    sub_100003984(v6, v7);
    swift_bridgeObjectRelease(v5);
  }
  else
  {
    v8 = _swiftEmptyArrayStorage;
  }
  v9 = *(_QWORD *)(v0 + 312);
  v10 = *(_QWORD *)(v0 + 272);
  v11 = *(_QWORD *)(v0 + 280);
  swift_bridgeObjectRetain(v11);
  swift_bridgeObjectRetain(v9);
  v12 = (char *)sub_10002EEC0(_swiftEmptyArrayStorage, (uint64_t)v8, v9, v10, v11);
  swift_bridgeObjectRelease(v11);
  swift_bridgeObjectRelease_n(v9, 2);
  swift_bridgeObjectRelease(v8);
  v13 = *((_QWORD *)v12 + 2);
  if (!v13)
  {
    v16 = 0x9380E29380E2;
    v17 = *(_QWORD *)(v0 + 280);
    swift_bridgeObjectRelease(v12);
    v18 = swift_bridgeObjectRetain_n(v17, 2);
    v19 = Logger.logObject.getter(v18);
    v20 = static os_log_type_t.default.getter();
    v21 = os_log_type_enabled(v19, v20);
    v22 = *(_QWORD *)(v0 + 280);
    if (v21)
    {
      v23 = *(_QWORD *)(v0 + 272);
      v24 = (uint8_t *)swift_slowAlloc(12, -1);
      v25 = swift_slowAlloc(32, -1);
      v48[0] = v25;
      *(_DWORD *)v24 = 136315138;
      swift_bridgeObjectRetain(v22);
      *(_QWORD *)(v0 + 224) = sub_10001DF04(v23, v22, v48);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v47, v0 + 232, v24 + 4, v24 + 12);
      swift_bridgeObjectRelease_n(v22, 3);
      _os_log_impl((void *)&_mh_execute_header, v19, v20, "...{%s} has no humidities, returning placeholder", v24, 0xCu);
      swift_arrayDestroy(v25, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v25, -1, -1);
      v26 = v24;
      v13 = 0;
      swift_slowDealloc(v26, -1, -1);
    }
    else
    {
      swift_bridgeObjectRelease_n(*(_QWORD *)(v0 + 280), 2);
    }

    v44 = 0xA600000000000000;
    v33 = 0.0;
    goto LABEL_23;
  }
  if (v13 == 1)
  {
    v14 = 0;
    v15 = 0.0;
  }
  else
  {
    v14 = v13 & 0x7FFFFFFFFFFFFFFELL;
    v27 = (double *)(v12 + 40);
    v15 = 0.0;
    v28 = v13 & 0x7FFFFFFFFFFFFFFELL;
    do
    {
      v15 = v15 + *(v27 - 1) + *v27;
      v27 += 2;
      v28 -= 2;
    }
    while (v28);
    if (v13 == v14)
      goto LABEL_14;
  }
  v29 = v13 - v14;
  v30 = (double *)&v12[8 * v14 + 32];
  do
  {
    v31 = *v30++;
    v15 = v15 + v31;
    --v29;
  }
  while (v29);
LABEL_14:
  v32 = *(_QWORD *)(v0 + 280);
  swift_bridgeObjectRelease(v12);
  v33 = v15 / (double)v13;
  v34 = swift_bridgeObjectRetain_n(v32, 2);
  v35 = Logger.logObject.getter(v34);
  v36 = static os_log_type_t.default.getter();
  v37 = os_log_type_enabled(v35, v36);
  v38 = *(_QWORD *)(v0 + 280);
  if (v37)
  {
    v39 = *(_QWORD *)(v0 + 272);
    v46 = v13;
    v40 = swift_slowAlloc(22, -1);
    v41 = swift_slowAlloc(32, -1);
    v48[0] = v41;
    *(_DWORD *)v40 = 136315394;
    swift_bridgeObjectRetain(v38);
    *(_QWORD *)(v0 + 208) = sub_10001DF04(v39, v38, v48);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 208, v0 + 216, v40 + 4, v40 + 12);
    swift_bridgeObjectRelease_n(v38, 3);
    *(_WORD *)(v40 + 12) = 2048;
    *(double *)(v0 + 216) = v33;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 216, v47, v40 + 14, v40 + 22);
    _os_log_impl((void *)&_mh_execute_header, v35, v36, "...{%s} humidity is: %f%%", (uint8_t *)v40, 0x16u);
    swift_arrayDestroy(v41, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v41, -1, -1);
    v42 = v40;
    v13 = v46;
    swift_slowDealloc(v42, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease_n(*(_QWORD *)(v0 + 280), 2);
  }

  v43 = round(v33);
  if ((~*(_QWORD *)&v43 & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_25;
  }
  if (v43 <= -9.22337204e18)
  {
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  if (v43 < 9.22337204e18)
  {
    *(_QWORD *)(v0 + 200) = (uint64_t)v43;
    v16 = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
LABEL_23:
    v45 = *(_QWORD *)(v0 + 256);
    *(_OWORD *)v45 = xmmword_100062F50;
    *(double *)(v45 + 16) = v33;
    *(_BYTE *)(v45 + 24) = v13 == 0;
    *(_QWORD *)(v45 + 32) = v16;
    *(_QWORD *)(v45 + 40) = v44;
    strcpy((char *)(v45 + 48), "humidity.fill");
    *(_WORD *)(v45 + 62) = -4864;
    *(_BYTE *)(v45 + 64) = 1;
    (*(void (**)(void))(v0 + 8))();
    return;
  }
LABEL_26:
  __break(1u);
}

unint64_t sub_10002F9D4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100081F40;
  if (!qword_100081F40)
  {
    v1 = objc_opt_self(HMAccessory);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_100081F40);
  }
  return result;
}

uint64_t *sub_10002FA10(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  int *v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v31 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v31 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v31);
  }
  else
  {
    v7 = type metadata accessor for Date(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = (int *)type metadata accessor for LightsCategoryEntry(0);
    v9 = v8[5];
    v10 = (char *)a1 + v9;
    v11 = (char *)a2 + v9;
    *(_QWORD *)v10 = *(_QWORD *)v11;
    v10[8] = v11[8];
    v12 = v8[6];
    v13 = (char *)a1 + v12;
    v14 = (char *)a2 + v12;
    *(_QWORD *)v13 = *(_QWORD *)v14;
    v13[8] = v14[8];
    v15 = v8[7];
    v16 = (char *)a1 + v15;
    v17 = (char *)a2 + v15;
    v16[8] = v17[8];
    *(_QWORD *)v16 = *(_QWORD *)v17;
    v18 = v8[8];
    v19 = (uint64_t *)((char *)a1 + v18);
    v20 = (uint64_t *)((char *)a2 + v18);
    v22 = *v20;
    v21 = v20[1];
    *v19 = v22;
    v19[1] = v21;
    *(_OWORD *)((char *)a1 + v8[9]) = *(_OWORD *)((char *)a2 + v8[9]);
    v23 = *(int *)(a3 + 20);
    v24 = (uint64_t *)((char *)a1 + v23);
    v25 = (uint64_t *)((char *)a2 + v23);
    swift_bridgeObjectRetain(v21);
    v26 = sub_100003704(&qword_100081DA0);
    if (swift_getEnumCaseMultiPayload(v25, v26) == 1)
    {
      v27 = type metadata accessor for WidgetFamily(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v27 - 8) + 16))(v24, v25, v27);
      v28 = v24;
      v29 = v26;
      v30 = 1;
    }
    else
    {
      v32 = *v25;
      *v24 = *v25;
      swift_retain(v32);
      v28 = v24;
      v29 = v26;
      v30 = 0;
    }
    swift_storeEnumTagMultiPayload(v28, v29, v30);
  }
  return a1;
}

uint64_t sub_10002FB8C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;

  v4 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  v5 = type metadata accessor for LightsCategoryEntry(0);
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + *(int *)(v5 + 32) + 8));
  v6 = (_QWORD *)(a1 + *(int *)(a2 + 20));
  v7 = sub_100003704(&qword_100081DA0);
  if (swift_getEnumCaseMultiPayload(v6, v7) != 1)
    return swift_release(*v6);
  v8 = type metadata accessor for WidgetFamily(0);
  return (*(uint64_t (**)(_QWORD *, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v6, v8);
}

uint64_t sub_10002FC30(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  int *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v6 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = (int *)type metadata accessor for LightsCategoryEntry(0);
  v8 = v7[5];
  v9 = a1 + v8;
  v10 = a2 + v8;
  *(_QWORD *)v9 = *(_QWORD *)v10;
  *(_BYTE *)(v9 + 8) = *(_BYTE *)(v10 + 8);
  v11 = v7[6];
  v12 = a1 + v11;
  v13 = a2 + v11;
  *(_QWORD *)v12 = *(_QWORD *)v13;
  *(_BYTE *)(v12 + 8) = *(_BYTE *)(v13 + 8);
  v14 = v7[7];
  v15 = a1 + v14;
  v16 = a2 + v14;
  *(_BYTE *)(v15 + 8) = *(_BYTE *)(v16 + 8);
  *(_QWORD *)v15 = *(_QWORD *)v16;
  v17 = v7[8];
  v18 = (_QWORD *)(a1 + v17);
  v19 = (uint64_t *)(a2 + v17);
  v21 = *v19;
  v20 = v19[1];
  *v18 = v21;
  v18[1] = v20;
  *(_OWORD *)(a1 + v7[9]) = *(_OWORD *)(a2 + v7[9]);
  v22 = *(int *)(a3 + 20);
  v23 = (uint64_t *)(a1 + v22);
  v24 = (uint64_t *)(a2 + v22);
  swift_bridgeObjectRetain(v20);
  v25 = sub_100003704(&qword_100081DA0);
  if (swift_getEnumCaseMultiPayload(v24, v25) == 1)
  {
    v26 = type metadata accessor for WidgetFamily(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v26 - 8) + 16))(v23, v24, v26);
    v27 = 1;
  }
  else
  {
    v28 = *v24;
    *v23 = *v24;
    swift_retain(v28);
    v27 = 0;
  }
  swift_storeEnumTagMultiPayload(v23, v25, v27);
  return a1;
}

uint64_t sub_10002FD78(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  int *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  v6 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = (int *)type metadata accessor for LightsCategoryEntry(0);
  v8 = v7[5];
  v9 = a1 + v8;
  v10 = a2 + v8;
  v11 = *(_BYTE *)(v10 + 8);
  *(_QWORD *)v9 = *(_QWORD *)v10;
  *(_BYTE *)(v9 + 8) = v11;
  v12 = v7[6];
  v13 = a1 + v12;
  v14 = a2 + v12;
  v15 = *(_BYTE *)(v14 + 8);
  *(_QWORD *)v13 = *(_QWORD *)v14;
  *(_BYTE *)(v13 + 8) = v15;
  v16 = v7[7];
  v17 = a1 + v16;
  v18 = a2 + v16;
  v19 = *(_BYTE *)(v18 + 8);
  *(_QWORD *)v17 = *(_QWORD *)v18;
  *(_BYTE *)(v17 + 8) = v19;
  v20 = v7[8];
  v21 = (_QWORD *)(a1 + v20);
  v22 = (_QWORD *)(a2 + v20);
  *v21 = *v22;
  v23 = v22[1];
  v24 = v21[1];
  v21[1] = v23;
  swift_bridgeObjectRetain(v23);
  swift_bridgeObjectRelease(v24);
  v25 = v7[9];
  v26 = (_QWORD *)(a1 + v25);
  v27 = (_QWORD *)(a2 + v25);
  *v26 = *v27;
  v26[1] = v27[1];
  if (a1 != a2)
  {
    v28 = *(int *)(a3 + 20);
    v29 = (uint64_t *)(a1 + v28);
    v30 = (uint64_t *)(a2 + v28);
    sub_100033268(a1 + v28, &qword_100081DA0);
    v31 = sub_100003704(&qword_100081DA0);
    if (swift_getEnumCaseMultiPayload(v30, v31) == 1)
    {
      v32 = type metadata accessor for WidgetFamily(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v32 - 8) + 16))(v29, v30, v32);
      v33 = 1;
    }
    else
    {
      v34 = *v30;
      *v29 = *v30;
      swift_retain(v34);
      v33 = 0;
    }
    swift_storeEnumTagMultiPayload(v29, v31, v33);
  }
  return a1;
}

uint64_t sub_10002FF04(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  int *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  const void *v19;
  uint64_t v20;
  uint64_t v21;

  v6 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = (int *)type metadata accessor for LightsCategoryEntry(0);
  v8 = v7[5];
  v9 = a1 + v8;
  v10 = a2 + v8;
  *(_QWORD *)v9 = *(_QWORD *)v10;
  *(_BYTE *)(v9 + 8) = *(_BYTE *)(v10 + 8);
  v11 = v7[6];
  v12 = a1 + v11;
  v13 = a2 + v11;
  *(_QWORD *)v12 = *(_QWORD *)v13;
  *(_BYTE *)(v12 + 8) = *(_BYTE *)(v13 + 8);
  v14 = v7[7];
  v15 = a1 + v14;
  v16 = a2 + v14;
  *(_BYTE *)(v15 + 8) = *(_BYTE *)(v16 + 8);
  *(_QWORD *)v15 = *(_QWORD *)v16;
  *(_OWORD *)(a1 + v7[8]) = *(_OWORD *)(a2 + v7[8]);
  *(_OWORD *)(a1 + v7[9]) = *(_OWORD *)(a2 + v7[9]);
  v17 = *(int *)(a3 + 20);
  v18 = (void *)(a1 + v17);
  v19 = (const void *)(a2 + v17);
  v20 = sub_100003704(&qword_100081DA0);
  if (swift_getEnumCaseMultiPayload(v19, v20) == 1)
  {
    v21 = type metadata accessor for WidgetFamily(0);
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v21 - 8) + 32))(v18, v19, v21);
    swift_storeEnumTagMultiPayload(v18, v20, 1);
  }
  else
  {
    memcpy(v18, v19, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
  }
  return a1;
}

uint64_t sub_100030040(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  int *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  const void *v25;
  uint64_t v26;
  uint64_t v27;

  v6 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = (int *)type metadata accessor for LightsCategoryEntry(0);
  v8 = v7[5];
  v9 = a1 + v8;
  v10 = a2 + v8;
  *(_QWORD *)v9 = *(_QWORD *)v10;
  *(_BYTE *)(v9 + 8) = *(_BYTE *)(v10 + 8);
  v11 = v7[6];
  v12 = a1 + v11;
  v13 = a2 + v11;
  *(_QWORD *)v12 = *(_QWORD *)v13;
  *(_BYTE *)(v12 + 8) = *(_BYTE *)(v13 + 8);
  v14 = v7[7];
  v15 = a1 + v14;
  v16 = a2 + v14;
  *(_BYTE *)(v15 + 8) = *(_BYTE *)(v16 + 8);
  *(_QWORD *)v15 = *(_QWORD *)v16;
  v17 = v7[8];
  v18 = (_QWORD *)(a1 + v17);
  v19 = (uint64_t *)(a2 + v17);
  v21 = *v19;
  v20 = v19[1];
  v22 = v18[1];
  *v18 = v21;
  v18[1] = v20;
  swift_bridgeObjectRelease(v22);
  *(_OWORD *)(a1 + v7[9]) = *(_OWORD *)(a2 + v7[9]);
  if (a1 != a2)
  {
    v23 = *(int *)(a3 + 20);
    v24 = (void *)(a1 + v23);
    v25 = (const void *)(a2 + v23);
    sub_100033268(a1 + v23, &qword_100081DA0);
    v26 = sub_100003704(&qword_100081DA0);
    if (swift_getEnumCaseMultiPayload(v25, v26) == 1)
    {
      v27 = type metadata accessor for WidgetFamily(0);
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v27 - 8) + 32))(v24, v25, v27);
      swift_storeEnumTagMultiPayload(v24, v26, 1);
    }
    else
    {
      memcpy(v24, v25, *(_QWORD *)(*(_QWORD *)(v26 - 8) + 64));
    }
  }
  return a1;
}

uint64_t sub_1000301A8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000301B4);
}

uint64_t sub_1000301B4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;

  v6 = type metadata accessor for LightsCategoryEntry(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
  }
  else
  {
    v8 = sub_100003704(&qword_1000822D0);
    v10 = a1 + *(int *)(a3 + 20);
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48);
  }
  return v9(v10, a2, v8);
}

uint64_t sub_10003022C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100030238);
}

uint64_t sub_100030238(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;

  v8 = type metadata accessor for LightsCategoryEntry(0);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    v10 = sub_100003704(&qword_1000822D0);
    v12 = a1 + *(int *)(a4 + 20);
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56);
  }
  return v11(v12, a2, a2, v10);
}

uint64_t type metadata accessor for LightsCategoryView(uint64_t a1)
{
  return sub_100030820(a1, (uint64_t *)&unk_100082330, (uint64_t)&nominal type descriptor for LightsCategoryView);
}

void sub_1000302CC(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v6[2];

  v2 = type metadata accessor for LightsCategoryEntry(319);
  if (v3 <= 0x3F)
  {
    v6[0] = *(_QWORD *)(v2 - 8) + 64;
    sub_100030350(319);
    if (v5 <= 0x3F)
    {
      v6[1] = *(_QWORD *)(v4 - 8) + 64;
      swift_initStructMetadata(a1, 256, 2, v6, a1 + 16);
    }
  }
}

void sub_100030350(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_100082340)
  {
    v2 = type metadata accessor for WidgetFamily(255);
    v3 = type metadata accessor for Environment.Content(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_100082340);
  }
}

uint64_t sub_1000303A4(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_10006BCFC, 1);
}

uint64_t sub_1000303B4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  int v16;
  uint64_t (*v17)(uint64_t);
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;

  v35 = a1;
  v32 = type metadata accessor for LightsCategoryViewAccessoryRectangular(0);
  __chkstk_darwin(v32);
  v31 = (uint64_t)&v31 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v34 = sub_100003704(&qword_100082370);
  __chkstk_darwin(v34);
  v33 = (uint64_t)&v31 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_100003704(&qword_100082378);
  __chkstk_darwin(v4);
  v6 = (char *)&v31 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v36 = sub_100003704(&qword_100082380);
  __chkstk_darwin(v36);
  v8 = (char *)&v31 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for LightsCategoryViewSystemSmall(0);
  __chkstk_darwin(v9);
  v11 = (char *)&v31 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for WidgetFamily(0);
  v13 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v15 = (char *)&v31 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for LightsCategoryView(0);
  sub_100047888((uint64_t)v15);
  v16 = (*(uint64_t (**)(char *, uint64_t))(v13 + 88))(v15, v12);
  if (v16 == enum case for WidgetFamily.systemSmall(_:))
  {
    sub_1000308F0(v1, (uint64_t)v11, type metadata accessor for LightsCategoryEntry);
    v17 = type metadata accessor for LightsCategoryViewSystemSmall;
    sub_1000308F0((uint64_t)v11, (uint64_t)v6, type metadata accessor for LightsCategoryViewSystemSmall);
    swift_storeEnumTagMultiPayload(v6, v4, 0);
    v18 = sub_100015884(&qword_100082390, type metadata accessor for LightsCategoryViewSystemSmall, (uint64_t)&unk_100063080);
    v19 = sub_100015884(&qword_100082398, type metadata accessor for LightsCategoryViewAccessoryRectangular, (uint64_t)&unk_100063030);
    _ConditionalContent<>.init(storage:)(v6, v9, v32, v18, v19);
    v20 = v33;
    sub_100030934((uint64_t)v8, v33);
    swift_storeEnumTagMultiPayload(v20, v34, 0);
    v21 = sub_100030854();
    _ConditionalContent<>.init(storage:)(v20, v36, &type metadata for EmptyView, v21, &protocol witness table for EmptyView);
    sub_100033268((uint64_t)v8, &qword_100082380);
    v22 = (uint64_t)v11;
    return sub_100015784(v22, v17);
  }
  v24 = v33;
  v23 = v34;
  if (v16 == enum case for WidgetFamily.accessoryRectangular(_:))
  {
    v25 = v31;
    sub_1000308F0(v1, v31, type metadata accessor for LightsCategoryEntry);
    v17 = type metadata accessor for LightsCategoryViewAccessoryRectangular;
    sub_1000308F0(v25, (uint64_t)v6, type metadata accessor for LightsCategoryViewAccessoryRectangular);
    swift_storeEnumTagMultiPayload(v6, v4, 1);
    v26 = sub_100015884(&qword_100082390, type metadata accessor for LightsCategoryViewSystemSmall, (uint64_t)&unk_100063080);
    v27 = sub_100015884(&qword_100082398, type metadata accessor for LightsCategoryViewAccessoryRectangular, (uint64_t)&unk_100063030);
    _ConditionalContent<>.init(storage:)(v6, v9, v32, v26, v27);
    sub_100030934((uint64_t)v8, v24);
    swift_storeEnumTagMultiPayload(v24, v23, 0);
    v28 = sub_100030854();
    _ConditionalContent<>.init(storage:)(v24, v36, &type metadata for EmptyView, v28, &protocol witness table for EmptyView);
    sub_100033268((uint64_t)v8, &qword_100082380);
    v22 = v25;
    return sub_100015784(v22, v17);
  }
  swift_storeEnumTagMultiPayload(v33, v34, 1);
  v30 = sub_100030854();
  _ConditionalContent<>.init(storage:)(v24, v36, &type metadata for EmptyView, v30, &protocol witness table for EmptyView);
  return (*(uint64_t (**)(char *, uint64_t))(v13 + 8))(v15, v12);
}

uint64_t type metadata accessor for LightsCategoryViewAccessoryRectangular(uint64_t a1)
{
  return sub_100030820(a1, qword_1000823F8, (uint64_t)&nominal type descriptor for LightsCategoryViewAccessoryRectangular);
}

uint64_t type metadata accessor for LightsCategoryViewSystemSmall(uint64_t a1)
{
  return sub_100030820(a1, qword_100082488, (uint64_t)&nominal type descriptor for LightsCategoryViewSystemSmall);
}

uint64_t sub_100030820(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t result;

  result = *a2;
  if (!*a2)
    return swift_getSingletonMetadata(a1, a3);
  return result;
}

unint64_t sub_100030854()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100082388;
  if (!qword_100082388)
  {
    v1 = sub_100003744(&qword_100082380);
    sub_100015884(&qword_100082390, type metadata accessor for LightsCategoryViewSystemSmall, (uint64_t)&unk_100063080);
    sub_100015884(&qword_100082398, type metadata accessor for LightsCategoryViewAccessoryRectangular, (uint64_t)&unk_100063030);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100082388);
  }
  return result;
}

uint64_t sub_1000308F0(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v5;

  v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_100030934(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100003704(&qword_100082380);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_100030994(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000309A0);
}

uint64_t sub_1000309A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000309B0);
}

uint64_t *sub_1000309B8(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  int v5;
  int *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;

  v4 = type metadata accessor for LightsCategoryEntry(0);
  v5 = *(_DWORD *)(*(_QWORD *)(v4 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v21 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v21 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v21);
  }
  else
  {
    v6 = (int *)v4;
    v7 = type metadata accessor for Date(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = v6[5];
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    *(_QWORD *)v9 = *(_QWORD *)v10;
    v9[8] = v10[8];
    v11 = v6[6];
    v12 = (char *)a1 + v11;
    v13 = (char *)a2 + v11;
    *(_QWORD *)v12 = *(_QWORD *)v13;
    v12[8] = v13[8];
    v14 = v6[7];
    v15 = (char *)a1 + v14;
    v16 = (char *)a2 + v14;
    *(_QWORD *)v15 = *(_QWORD *)v16;
    v15[8] = v16[8];
    v17 = v6[8];
    v18 = (uint64_t *)((char *)a1 + v17);
    v19 = (uint64_t *)((char *)a2 + v17);
    v20 = v19[1];
    *v18 = *v19;
    v18[1] = v20;
    *(_OWORD *)((char *)a1 + v6[9]) = *(_OWORD *)((char *)a2 + v6[9]);
    swift_bridgeObjectRetain(v20);
  }
  return a1;
}

uint64_t sub_100030AB4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  v3 = *(_QWORD *)(a1 + *(int *)(type metadata accessor for LightsCategoryEntry(0) + 32) + 8);
  return swift_bridgeObjectRelease(v3);
}

uint64_t sub_100030B00(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;

  v4 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, a2, v4);
  v5 = (int *)type metadata accessor for LightsCategoryEntry(0);
  v6 = v5[5];
  v7 = a1 + v6;
  v8 = a2 + v6;
  *(_QWORD *)v7 = *(_QWORD *)v8;
  *(_BYTE *)(v7 + 8) = *(_BYTE *)(v8 + 8);
  v9 = v5[6];
  v10 = a1 + v9;
  v11 = a2 + v9;
  *(_QWORD *)v10 = *(_QWORD *)v11;
  *(_BYTE *)(v10 + 8) = *(_BYTE *)(v11 + 8);
  v12 = v5[7];
  v13 = a1 + v12;
  v14 = a2 + v12;
  *(_BYTE *)(v13 + 8) = *(_BYTE *)(v14 + 8);
  *(_QWORD *)v13 = *(_QWORD *)v14;
  v15 = v5[8];
  v16 = (_QWORD *)(a1 + v15);
  v17 = (uint64_t *)(a2 + v15);
  v19 = *v17;
  v18 = v17[1];
  *v16 = v19;
  v16[1] = v18;
  *(_OWORD *)(a1 + v5[9]) = *(_OWORD *)(a2 + v5[9]);
  swift_bridgeObjectRetain(v18);
  return a1;
}

uint64_t sub_100030BC8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD *v25;

  v4 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 24))(a1, a2, v4);
  v5 = (int *)type metadata accessor for LightsCategoryEntry(0);
  v6 = v5[5];
  v7 = a1 + v6;
  v8 = a2 + v6;
  v9 = *(_BYTE *)(v8 + 8);
  *(_QWORD *)v7 = *(_QWORD *)v8;
  *(_BYTE *)(v7 + 8) = v9;
  v10 = v5[6];
  v11 = a1 + v10;
  v12 = a2 + v10;
  v13 = *(_BYTE *)(v12 + 8);
  *(_QWORD *)v11 = *(_QWORD *)v12;
  *(_BYTE *)(v11 + 8) = v13;
  v14 = v5[7];
  v15 = a1 + v14;
  v16 = a2 + v14;
  v17 = *(_BYTE *)(v16 + 8);
  *(_QWORD *)v15 = *(_QWORD *)v16;
  *(_BYTE *)(v15 + 8) = v17;
  v18 = v5[8];
  v19 = (_QWORD *)(a1 + v18);
  v20 = (_QWORD *)(a2 + v18);
  *v19 = *v20;
  v21 = v20[1];
  v22 = v19[1];
  v19[1] = v21;
  swift_bridgeObjectRetain(v21);
  swift_bridgeObjectRelease(v22);
  v23 = v5[9];
  v24 = (_QWORD *)(a1 + v23);
  v25 = (_QWORD *)(a2 + v23);
  *v24 = *v25;
  v24[1] = v25[1];
  return a1;
}

uint64_t sub_100030CBC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v4 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a1, a2, v4);
  v5 = (int *)type metadata accessor for LightsCategoryEntry(0);
  v6 = v5[5];
  v7 = a1 + v6;
  v8 = a2 + v6;
  *(_QWORD *)v7 = *(_QWORD *)v8;
  *(_BYTE *)(v7 + 8) = *(_BYTE *)(v8 + 8);
  v9 = v5[6];
  v10 = a1 + v9;
  v11 = a2 + v9;
  *(_QWORD *)v10 = *(_QWORD *)v11;
  *(_BYTE *)(v10 + 8) = *(_BYTE *)(v11 + 8);
  v12 = v5[7];
  v13 = a1 + v12;
  v14 = a2 + v12;
  *(_BYTE *)(v13 + 8) = *(_BYTE *)(v14 + 8);
  *(_QWORD *)v13 = *(_QWORD *)v14;
  *(_OWORD *)(a1 + v5[8]) = *(_OWORD *)(a2 + v5[8]);
  *(_OWORD *)(a1 + v5[9]) = *(_OWORD *)(a2 + v5[9]);
  return a1;
}

uint64_t sub_100030D74(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v4 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a1, a2, v4);
  v5 = (int *)type metadata accessor for LightsCategoryEntry(0);
  v6 = v5[5];
  v7 = a1 + v6;
  v8 = a2 + v6;
  *(_QWORD *)v7 = *(_QWORD *)v8;
  *(_BYTE *)(v7 + 8) = *(_BYTE *)(v8 + 8);
  v9 = v5[6];
  v10 = a1 + v9;
  v11 = a2 + v9;
  *(_QWORD *)v10 = *(_QWORD *)v11;
  *(_BYTE *)(v10 + 8) = *(_BYTE *)(v11 + 8);
  v12 = v5[7];
  v13 = a1 + v12;
  v14 = a2 + v12;
  *(_BYTE *)(v13 + 8) = *(_BYTE *)(v14 + 8);
  *(_QWORD *)v13 = *(_QWORD *)v14;
  v15 = v5[8];
  v16 = (_QWORD *)(a1 + v15);
  v17 = (uint64_t *)(a2 + v15);
  v19 = *v17;
  v18 = v17[1];
  v20 = v16[1];
  *v16 = v19;
  v16[1] = v18;
  swift_bridgeObjectRelease(v20);
  *(_OWORD *)(a1 + v5[9]) = *(_OWORD *)(a2 + v5[9]);
  return a1;
}

uint64_t sub_100030E48(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100030E54);
}

uint64_t sub_100030E58(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for LightsCategoryEntry(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(a1, a2, v4);
}

uint64_t sub_100030E94(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100030EA0);
}

uint64_t sub_100030EA4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for LightsCategoryEntry(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(a1, a2, a2, v4);
}

uint64_t sub_100030EE4(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  uint64_t v4;

  result = type metadata accessor for LightsCategoryEntry(319);
  if (v3 <= 0x3F)
  {
    v4 = *(_QWORD *)(result - 8) + 64;
    swift_initStructMetadata(a1, 256, 1, &v4, a1 + 16);
    return 0;
  }
  return result;
}

unint64_t sub_100030F50()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000824C0;
  if (!qword_1000824C0)
  {
    v1 = sub_100003744(&qword_1000824C8);
    sub_100030854();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000824C0);
  }
  return result;
}

uint64_t sub_100030FBC(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_10006BD4C, 1);
}

uint64_t sub_100030FCC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  int *v10;
  double v11;
  double v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  _BOOL4 v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  uint64_t KeyPath;
  void *v28;
  uint64_t v29;
  unint64_t v30;
  char *v31;
  uint64_t OpaqueTypeConformance2;
  uint64_t v33;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD v41[58];
  _BYTE v42[384];
  _BYTE v43[392];
  _QWORD v44[51];
  char v45;
  _BYTE v46[408];
  _QWORD v47[2];
  char v48;
  _BYTE v49[384];
  _BYTE v50[423];
  _BYTE v51[472];

  v40 = a1;
  v2 = type metadata accessor for AccessibilityChildBehavior(0);
  v35 = *(_QWORD *)(v2 - 8);
  v36 = v2;
  __chkstk_darwin(v2);
  v4 = (char *)&v35 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_100003704(&qword_100082500);
  v38 = *(_QWORD *)(v5 - 8);
  v39 = v5;
  __chkstk_darwin(v5);
  v37 = (char *)&v35 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_100003704(&qword_1000824F8);
  __chkstk_darwin(v7);
  v9 = (char *)&v35 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = (int *)type metadata accessor for LightsCategoryEntry(0);
  v11 = *(double *)(v1 + v10[9] + 8);
  v12 = static Font.Weight.bold.getter();
  v13 = enum case for Font.Design.default(_:);
  v14 = type metadata accessor for Font.Design(0);
  v15 = *(_QWORD *)(v14 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v15 + 104))(v9, v13, v14);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v9, 0, 1, v14);
  v16 = static Font.system(size:weight:design:)(*(_QWORD *)&v12, 0, v9, v11 / 5.0);
  v17 = sub_100033268((uint64_t)v9, &qword_1000824F8);
  v18 = v1 + v10[6];
  v19 = v1 + v10[7];
  v20 = *(_BYTE *)(v19 + 8);
  if ((*(_BYTE *)(v18 + 8) & 1) != 0)
  {
    v21 = 0;
  }
  else
  {
    v22 = *(_QWORD *)v18;
    v20 = (v22 == *(_QWORD *)v19) & ~v20;
    v21 = v22 > 0;
  }
  v23 = static VerticalAlignment.center.getter(v17);
  v24 = static HorizontalAlignment.leading.getter();
  sub_100031370(v16, v20, v1, v21, (uint64_t)v42, v11);
  v43[384] = 0;
  memcpy(&v43[7], v42, 0x179uLL);
  v44[0] = v24;
  v44[1] = 0;
  LOBYTE(v44[2]) = 0;
  memcpy((char *)&v44[2] + 1, v43, 0x180uLL);
  memcpy(v46, v44, 0x191uLL);
  v45 = 0;
  v47[0] = v24;
  v47[1] = 0;
  v48 = 0;
  memcpy(v49, v43, sizeof(v49));
  sub_1000333E4((uint64_t)v44);
  sub_1000336C8((uint64_t)v47);
  v50[415] = 1;
  v25 = memcpy(&v50[7], v46, 0x198uLL);
  v26 = static Color.primary.getter(v25);
  KeyPath = swift_getKeyPath(&unk_1000630D0);
  v41[0] = v23;
  v41[1] = 0;
  LOBYTE(v41[2]) = 1;
  v28 = memcpy((char *)&v41[2] + 1, v50, 0x19FuLL);
  v41[54] = 0;
  LOBYTE(v41[55]) = 0;
  v41[56] = KeyPath;
  v41[57] = v26;
  static AccessibilityChildBehavior.combine.getter(v28);
  v29 = sub_100003704(&qword_100082508);
  v30 = sub_1000339A8();
  v31 = v37;
  View.accessibilityElement(children:)(v4, v29, v30);
  (*(void (**)(char *, uint64_t))(v35 + 8))(v4, v36);
  memcpy(v51, v41, 0x1D0uLL);
  sub_100033A44((uint64_t)v51);
  v41[0] = v29;
  v41[1] = v30;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(v41, &opaque type descriptor for <<opaque return type of View.accessibilityElement(children:)>>, 1);
  v33 = v39;
  View.accessibilityIdentifier(_:)(0xD000000000000032, 0x80000001000688F0, v39, OpaqueTypeConformance2);
  swift_release(v16);
  return (*(uint64_t (**)(char *, uint64_t))(v38 + 8))(v31, v33);
}

uint64_t sub_100031370@<X0>(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X2>, int a4@<W3>, uint64_t a5@<X8>, double a6@<D0>)
{
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t KeyPath;
  double v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  int v44;
  uint64_t v45;
  char v46;
  double v47;
  double v48;
  double v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  void (*v53)(char *, _QWORD, uint64_t);
  void (*v54)(char *, _QWORD, uint64_t, uint64_t);
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  void (*v65)(char *, _QWORD, uint64_t);
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  char v84;
  unint64_t v85;
  uint64_t v86;
  double v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  void (*v97)(_QWORD, _QWORD, _QWORD);
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  void (*v101)(_QWORD, _QWORD, _QWORD);
  uint64_t v102;
  char v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  unint64_t v115;
  uint64_t v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  __int128 v124;
  __int128 v125;
  __int128 v126;
  uint64_t v127;
  char v128;
  __int128 v129;
  uint64_t v130;
  __int128 v131;
  __int128 v132;
  __int128 v133;
  __int128 v134;
  __int128 v135;
  __int128 v136;
  __int128 v137;
  __int128 v138;
  __int128 v139;
  __int128 v140;
  __int128 v141;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146[2];
  int v147;
  uint64_t v148;
  void (*v149)(char *, _QWORD, uint64_t);
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  unint64_t v154;
  uint64_t v155;
  char *v156;
  int v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  int v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  __int128 v167;
  _BYTE v168[145];
  __int128 v169;
  __int128 v170;
  __int128 v171;
  __int128 v172;
  __int128 v173;
  __int128 v174;
  __int128 v175;
  __int128 v176;
  __int128 v177;
  __int128 v178;
  __int128 v179;
  char v180;
  char v181;
  _BYTE v182[184];
  char v183;
  __int128 v184;
  __int128 v185;
  __int128 v186;
  __int128 v187;
  __int128 v188;
  __int128 v189;
  __int128 v190;
  __int128 v191;
  __int128 v192;
  __int128 v193;
  __int128 v194;
  char v195;
  __int128 v196;
  _OWORD v197[10];
  __int128 v198;
  __int128 v199;
  __int128 v200;
  __int128 v201;
  __int128 v202;
  __int128 v203;
  __int128 v204;
  __int128 v205;
  __int128 v206;
  __int128 v207;
  __int128 v208;
  char v209;
  _OWORD v210[7];
  _OWORD v211[2];
  _OWORD v212[9];
  char v213;
  __int128 v214;
  __int128 v215;
  __int128 v216;
  __int128 v217;
  __int128 v218;
  __int128 v219;
  __int128 v220;
  __int128 v221;
  __int128 v222;

  v157 = a4;
  v163 = a5;
  v164 = a3;
  v9 = sub_100003704(&qword_1000824F8);
  __chkstk_darwin(v9);
  v11 = (char *)v146 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for Locale(0);
  __chkstk_darwin(v12);
  v14 = (char *)v146 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for String.LocalizationValue(0);
  v16 = __chkstk_darwin(v15);
  v18 = (char *)v146 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v162 = static VerticalAlignment.center.getter(v16);
  sub_100032058(a1, (uint64_t)v210);
  *(_OWORD *)((char *)&v212[6] + 7) = v210[6];
  *(_OWORD *)((char *)&v212[5] + 7) = v210[5];
  *(_OWORD *)((char *)&v212[2] + 7) = v210[2];
  *(_OWORD *)((char *)&v212[1] + 7) = v210[1];
  *(_OWORD *)((char *)&v212[7] + 7) = v211[0];
  v212[8] = *(_OWORD *)((char *)v211 + 9);
  v213 = 1;
  *(_OWORD *)((char *)&v212[3] + 7) = v210[3];
  *(_OWORD *)((char *)&v212[4] + 7) = v210[4];
  *(_OWORD *)((char *)v212 + 7) = v210[0];
  v161 = 1;
  v219 = v212[5];
  v220 = v212[6];
  v221 = v212[7];
  v222 = *(_OWORD *)((char *)v211 + 9);
  v216 = v212[2];
  v217 = v212[3];
  v218 = v212[4];
  v214 = v212[0];
  v215 = v212[1];
  if ((a2 & 1) != 0)
  {
    v19 = String.LocalizationValue.init(stringLiteral:)(0xD000000000000022, 0x8000000100068970);
    static Locale.current.getter(v19);
    *(_QWORD *)v182 = String.init(localized:table:bundle:locale:comment:)(v18, 0x696C61636F4C4648, 0xED0000656C62617ALL, 0, v14, 0, 0, 256);
    *(_QWORD *)&v182[8] = v20;
    v21 = sub_1000037D4();
    v165 = Text.init<A>(_:)(v182, &type metadata for String, v21);
    v166 = v22;
    v24 = v23;
    LODWORD(v164) = v25;
    KeyPath = swift_getKeyPath(&unk_100063100);
    v27 = static Font.Weight.medium.getter();
    v28 = enum case for Font.Design.default(_:);
    v29 = type metadata accessor for Font.Design(0);
    v30 = *(_QWORD *)(v29 - 8);
    (*(void (**)(char *, uint64_t, uint64_t))(v30 + 104))(v11, v28, v29);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v30 + 56))(v11, 0, 1, v29);
    v31 = static Font.system(size:weight:design:)(*(_QWORD *)&v27, 0, v11, a6 * 0.6);
    sub_100033268((uint64_t)v11, &qword_1000824F8);
    v32 = swift_getKeyPath(&unk_100063130);
    v33 = swift_getKeyPath(&unk_100063160);
    *(_QWORD *)v182 = v165;
    *(_QWORD *)&v182[8] = v24;
    v182[16] = v164 & 1;
    *(_QWORD *)&v182[24] = v166;
    *(_QWORD *)&v182[32] = KeyPath;
    *(_QWORD *)&v182[40] = 1;
    v182[48] = 0;
    *(_QWORD *)&v182[56] = v32;
    *(_QWORD *)&v182[64] = v31;
    *(_QWORD *)&v182[72] = v33;
    *(_QWORD *)&v182[80] = 0x3FC999999999999ALL;
    sub_100034060((uint64_t)v182);
    sub_100033C18((uint64_t)v182, (uint64_t)&v184);
    v34 = sub_100003704(&qword_100082540);
    v35 = sub_100003704(&qword_100082548);
    v36 = sub_100033D44();
    v37 = sub_100033ED0(&qword_1000825A8, &qword_100082548, (uint64_t)&protocol conformance descriptor for TupleView<A>);
    _ConditionalContent<>.init(storage:)(&v184, v34, v35, v36, v37);
  }
  else
  {
    v156 = v14;
    v155 = type metadata accessor for LightsCategoryEntry(0);
    v38 = (uint64_t *)(v164 + *(int *)(v155 + 32));
    v39 = v38[1];
    if (v39)
    {
      v40 = *v38;
      v41 = v39;
    }
    else
    {
      v41 = 0xA600000000000000;
      v40 = 0x9380E29380E2;
    }
    *(_QWORD *)v182 = v40;
    *(_QWORD *)&v182[8] = v41;
    v42 = sub_1000037D4();
    swift_bridgeObjectRetain(v39);
    v154 = v42;
    v158 = Text.init<A>(_:)(v182, &type metadata for String, v42);
    v166 = v43;
    v147 = v44;
    v160 = v45;
    v159 = swift_getKeyPath(&unk_100063100);
    v46 = v157;
    v47 = 0.6;
    if ((v157 & 1) != 0)
      v47 = 0.4;
    v48 = v47 * a6;
    v49 = static Font.Weight.medium.getter();
    v50 = enum case for Font.Design.default(_:);
    v51 = type metadata accessor for Font.Design(0);
    v52 = *(_QWORD *)(v51 - 8);
    v53 = *(void (**)(char *, _QWORD, uint64_t))(v52 + 104);
    LODWORD(v150) = v50;
    v149 = v53;
    v53(v11, v50, v51);
    v54 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v52 + 56);
    v54(v11, 0, 1, v51);
    v165 = static Font.system(size:weight:design:)(*(_QWORD *)&v49, 0, v11, v48);
    sub_100033268((uint64_t)v11, &qword_1000824F8);
    v55 = swift_getKeyPath(&unk_100063130);
    v56 = swift_getKeyPath(&unk_100063160);
    v57 = 0;
    v58 = 0;
    v59 = 0;
    v60 = 0;
    v61 = 0;
    v62 = 0;
    v63 = 0;
    v64 = 0;
    v65 = 0;
    v66 = 0;
    v152 = v56;
    if ((v46 & 1) != 0)
    {
      v67 = String.LocalizationValue.init(stringLiteral:)(0xD000000000000030, 0x8000000100068930);
      v68 = (uint64_t)v156;
      static Locale.current.getter(v67);
      v69 = String.init(localized:table:bundle:locale:comment:)(v18, 0x696C61636F4C4648, 0xED0000656C62617ALL, 0, v68, 0, 0, 256);
      v70 = v55;
      v72 = v71;
      v73 = sub_100003704(&qword_1000825B0);
      v74 = swift_allocObject(v73, 72, 7);
      *(_OWORD *)(v74 + 16) = xmmword_1000607D0;
      v75 = (uint64_t *)(v164 + *(int *)(v155 + 24));
      v76 = *v75;
      LODWORD(v75) = *((unsigned __int8 *)v75 + 8);
      *(_QWORD *)(v74 + 56) = &type metadata for Int;
      *(_QWORD *)(v74 + 64) = &protocol witness table for Int;
      if ((_DWORD)v75)
        v77 = 0;
      else
        v77 = v76;
      *(_QWORD *)(v74 + 32) = v77;
      v78 = String.init(format:_:)(v69, v72, v74);
      v80 = v79;
      v81 = v72;
      v55 = v70;
      swift_bridgeObjectRelease(v81);
      *(_QWORD *)v182 = v78;
      *(_QWORD *)&v182[8] = v80;
      v148 = Text.init<A>(_:)(v182, &type metadata for String, v154);
      v164 = v82;
      v153 = v83;
      v85 = v84 & 1;
      v86 = swift_getKeyPath(&unk_100063100);
      v87 = static Font.Weight.medium.getter();
      v149(v11, v150, v51);
      v54(v11, 0, 1, v51);
      v88 = static Font.system(size:weight:design:)(*(_QWORD *)&v87, 0, v11, a6 * 0.2);
      sub_100033268((uint64_t)v11, &qword_1000824F8);
      v89 = swift_getKeyPath(&unk_100063130);
      v90 = swift_getKeyPath(&unk_100063160);
      v63 = v89;
      v64 = v88;
      v62 = 1;
      v61 = v86;
      v59 = v85;
      v58 = v164;
      v57 = v148;
      v65 = (void (*)(char *, _QWORD, uint64_t))v90;
      v56 = v152;
      v60 = v153;
      v66 = 0x3FC999999999999ALL;
    }
    v153 = v60;
    v154 = v59;
    v155 = v62;
    v156 = (char *)v63;
    v164 = v58;
    *(_QWORD *)&v196 = v158;
    *((_QWORD *)&v196 + 1) = v166;
    LOBYTE(v197[0]) = v147 & 1;
    v157 = v147 & 1;
    v91 = v160;
    *((_QWORD *)&v197[0] + 1) = v160;
    *(_QWORD *)&v197[1] = v159;
    v92 = v159;
    *((_QWORD *)&v197[1] + 1) = 1;
    LOBYTE(v197[2]) = 0;
    v93 = v55;
    *((_QWORD *)&v197[2] + 1) = v55;
    *(_QWORD *)&v197[3] = v165;
    *((_QWORD *)&v197[3] + 1) = v56;
    *(_QWORD *)&v197[4] = 0x3FC999999999999ALL;
    *((_QWORD *)&v197[4] + 1) = v57;
    *(_QWORD *)&v197[5] = v58;
    *((_QWORD *)&v197[5] + 1) = v59;
    *(_QWORD *)&v197[6] = v60;
    *((_QWORD *)&v197[6] + 1) = v61;
    v197[7] = (unint64_t)v62;
    *(_QWORD *)&v197[8] = v63;
    *((_QWORD *)&v197[8] + 1) = v64;
    *(_QWORD *)&v197[9] = v65;
    *((_QWORD *)&v197[9] + 1) = v66;
    v170 = v197[0];
    v171 = v197[1];
    v176 = v197[6];
    v177 = (unint64_t)v62;
    v169 = v196;
    v174 = v197[4];
    v175 = v197[5];
    v172 = v197[2];
    v173 = v197[3];
    v178 = v197[8];
    v179 = v197[9];
    v94 = v56;
    v95 = v57;
    v149 = v65;
    v150 = v61;
    v96 = v64;
    v97 = (void (*)(_QWORD, _QWORD, _QWORD))v65;
    v98 = v66;
    sub_100032F84(v158, v166, v147 & 1);
    swift_bridgeObjectRetain(v91);
    swift_retain(v92);
    v151 = v93;
    swift_retain(v93);
    v99 = v165;
    swift_retain(v165);
    swift_retain(v94);
    v144 = (uint64_t)v97;
    v146[0] = v96;
    v148 = v95;
    v100 = v153;
    sub_10003365C(v95, v164, v154, v153, v61, v155, 0, (uint64_t)v156, v96, v144);
    sub_100032F84(v158, v166, v157);
    swift_bridgeObjectRetain(v160);
    swift_retain(v92);
    swift_retain(v93);
    swift_retain(v99);
    swift_retain(v94);
    v146[1] = v98;
    v101 = (void (*)(_QWORD, _QWORD, _QWORD))v149;
    v143 = v96;
    v102 = v164;
    v103 = v154;
    v104 = v100;
    v105 = v100;
    v106 = v150;
    v108 = v155;
    v107 = (uint64_t)v156;
    sub_10003365C(v95, v164, v154, v105, v150, v155, 0, (uint64_t)v156, v143, (uint64_t)v149);
    v145 = (uint64_t)v101;
    v109 = v146[0];
    v110 = v148;
    sub_10003393C(v148, v102, v103, v104, v106, v108, 0, v107, v146[0], v145);
    v111 = v158;
    sub_1000330B0(v158, v166, v157);
    swift_release(v152);
    swift_release(v165);
    swift_release(v151);
    swift_release(v159);
    v112 = v160;
    swift_bridgeObjectRelease(v160);
    *(_OWORD *)&v182[128] = v177;
    *(_OWORD *)&v182[144] = v178;
    *(_OWORD *)&v182[160] = v179;
    *(_OWORD *)&v182[64] = v173;
    *(_OWORD *)&v182[80] = v174;
    *(_OWORD *)&v182[96] = v175;
    *(_OWORD *)&v182[112] = v176;
    *(_OWORD *)v182 = v169;
    *(_OWORD *)&v182[16] = v170;
    *(_OWORD *)&v182[32] = v171;
    *(_OWORD *)&v182[48] = v172;
    sub_100033C0C((uint64_t)v182);
    sub_100033C18((uint64_t)v182, (uint64_t)&v198);
    sub_100033C60((uint64_t)&v169);
    v113 = sub_100003704(&qword_100082540);
    v114 = sub_100003704(&qword_100082548);
    v115 = sub_100033D44();
    v116 = sub_100033ED0(&qword_1000825A8, &qword_100082548, (uint64_t)&protocol conformance descriptor for TupleView<A>);
    _ConditionalContent<>.init(storage:)(&v198, v113, v114, v115, v116);
    sub_10003393C(v110, v164, v154, v153, v150, v155, 0, (uint64_t)v156, v109, (uint64_t)v149);
    sub_100033F10((uint64_t)&v196);
    sub_1000330B0(v111, v166, v157);
    swift_release(v152);
    swift_release(v165);
    swift_release(v151);
    swift_release(v159);
    swift_bridgeObjectRelease(v112);
    v206 = v192;
    v207 = v193;
    v208 = v194;
    v209 = v195;
    v202 = v188;
    v203 = v189;
    v204 = v190;
    v205 = v191;
    v198 = v184;
    v199 = v185;
    v200 = v186;
    v201 = v187;
  }
  v117 = v206;
  v118 = v205;
  v192 = v206;
  v193 = v207;
  v119 = v207;
  v194 = v208;
  v120 = v202;
  v121 = v201;
  v188 = v202;
  v189 = v203;
  v122 = v203;
  v123 = v204;
  v190 = v204;
  v191 = v205;
  v184 = v198;
  v185 = v199;
  v125 = v198;
  v124 = v199;
  v126 = v200;
  v186 = v200;
  v187 = v201;
  *(_OWORD *)&v168[81] = v219;
  *(_OWORD *)&v168[97] = v220;
  *(_OWORD *)&v168[113] = v221;
  *(_OWORD *)&v168[129] = v222;
  *(_OWORD *)&v168[17] = v215;
  *(_OWORD *)&v168[33] = v216;
  *(_OWORD *)&v168[49] = v217;
  v127 = v162;
  v167 = (unint64_t)v162;
  v128 = v161;
  v168[0] = v161;
  *(_OWORD *)&v168[65] = v218;
  *(_OWORD *)&v168[1] = v214;
  v177 = v206;
  v178 = v207;
  v179 = v208;
  v173 = v202;
  v174 = v203;
  v175 = v204;
  v176 = v205;
  v169 = v198;
  v170 = v199;
  v171 = v200;
  v172 = v201;
  v129 = *(_OWORD *)&v168[128];
  v130 = v163;
  *(_OWORD *)(v163 + 128) = *(_OWORD *)&v168[112];
  *(_OWORD *)(v130 + 144) = v129;
  v131 = *(_OWORD *)&v168[64];
  *(_OWORD *)(v130 + 64) = *(_OWORD *)&v168[48];
  *(_OWORD *)(v130 + 80) = v131;
  v132 = *(_OWORD *)&v168[96];
  *(_OWORD *)(v130 + 96) = *(_OWORD *)&v168[80];
  *(_OWORD *)(v130 + 112) = v132;
  v133 = *(_OWORD *)v168;
  *(_OWORD *)v130 = v167;
  *(_OWORD *)(v130 + 16) = v133;
  v134 = *(_OWORD *)&v168[32];
  *(_OWORD *)(v130 + 32) = *(_OWORD *)&v168[16];
  *(_OWORD *)(v130 + 48) = v134;
  *(_OWORD *)&v182[135] = v117;
  *(_OWORD *)&v182[151] = v119;
  *(_OWORD *)&v182[167] = v208;
  *(_OWORD *)&v182[71] = v120;
  *(_OWORD *)&v182[87] = v122;
  *(_OWORD *)&v182[103] = v123;
  *(_OWORD *)&v182[119] = v118;
  v182[183] = v209;
  *(_OWORD *)&v182[7] = v125;
  *(_OWORD *)&v182[23] = v124;
  *(_OWORD *)&v182[39] = v126;
  *(_OWORD *)&v182[55] = v121;
  v135 = *(_OWORD *)&v182[128];
  v136 = *(_OWORD *)&v182[160];
  *(_OWORD *)(v130 + 321) = *(_OWORD *)&v182[144];
  *(_OWORD *)(v130 + 337) = v136;
  v137 = *(_OWORD *)&v182[80];
  *(_OWORD *)(v130 + 241) = *(_OWORD *)&v182[64];
  v138 = *(_OWORD *)&v182[96];
  v139 = *(_OWORD *)&v182[112];
  *(_OWORD *)(v130 + 257) = v137;
  *(_OWORD *)(v130 + 273) = v138;
  *(_OWORD *)(v130 + 289) = v139;
  *(_OWORD *)(v130 + 305) = v135;
  v140 = *(_OWORD *)&v182[16];
  *(_OWORD *)(v130 + 177) = *(_OWORD *)v182;
  *(_OWORD *)(v130 + 193) = v140;
  v141 = *(_OWORD *)&v182[48];
  *(_OWORD *)(v130 + 209) = *(_OWORD *)&v182[32];
  v195 = v209;
  v180 = v209;
  *(_BYTE *)(v130 + 160) = v168[144];
  v183 = 0;
  v181 = 0;
  *(_QWORD *)(v130 + 168) = 0;
  *(_BYTE *)(v130 + 176) = 0;
  *(_QWORD *)(v130 + 353) = *(_QWORD *)&v182[176];
  *(_OWORD *)(v130 + 225) = v141;
  *(_QWORD *)(v130 + 368) = 0;
  *(_BYTE *)(v130 + 376) = 0;
  sub_1000332AC((uint64_t)&v167);
  sub_100033FF4((uint64_t)&v169, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))sub_100033544);
  sub_100033FF4((uint64_t)&v184, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))sub_100033824);
  *(_OWORD *)((char *)&v197[5] + 1) = v219;
  *(_OWORD *)((char *)&v197[6] + 1) = v220;
  *(_OWORD *)((char *)&v197[7] + 1) = v221;
  *(_OWORD *)((char *)&v197[8] + 1) = v222;
  *(_OWORD *)((char *)&v197[1] + 1) = v215;
  *(_OWORD *)((char *)&v197[2] + 1) = v216;
  *(_OWORD *)((char *)&v197[3] + 1) = v217;
  *(_OWORD *)((char *)&v197[4] + 1) = v218;
  v196 = (unint64_t)v127;
  LOBYTE(v197[0]) = v128;
  *(_OWORD *)((char *)v197 + 1) = v214;
  return sub_100033348((uint64_t)&v196);
}

uint64_t sub_100032058@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  double v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t KeyPath;
  uint64_t v40;
  _QWORD v41[3];
  char v42;
  char v43;

  v38 = a1;
  v4 = type metadata accessor for Locale(0);
  __chkstk_darwin(v4);
  v6 = (char *)&v34 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for String.LocalizationValue(0);
  __chkstk_darwin(v7);
  v9 = (char *)&v34 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v40 = Image.init(systemName:)(0x6C7562746867696CLL, 0xEE006C6C69662E62);
  KeyPath = swift_getKeyPath(&unk_100063130);
  swift_retain(a1);
  v10 = String.LocalizationValue.init(stringLiteral:)(0xD000000000000023, 0x80000001000689A0);
  static Locale.current.getter(v10);
  v41[0] = String.init(localized:table:bundle:locale:comment:)(v9, 0xD00000000000001DLL, 0x8000000100068680, 0, v6, 0, 0, 256);
  v41[1] = v11;
  v12 = sub_1000037D4();
  v13 = Text.init<A>(_:)(v41, &type metadata for String, v12);
  v15 = v14;
  v35 = v14;
  v37 = v16;
  LOBYTE(v6) = v17 & 1;
  v36 = swift_getKeyPath(&unk_100063100);
  v18 = static Font.headline.getter();
  v19 = swift_getKeyPath(&unk_100063130);
  v20 = static Edge.Set.leading.getter();
  v21 = EdgeInsets.init(_all:)(-4.0);
  LOBYTE(v41[0]) = (_BYTE)v6;
  v43 = 0;
  v42 = 0;
  v23 = KeyPath;
  v22 = v40;
  *(_QWORD *)a2 = v40;
  *(_QWORD *)(a2 + 8) = v23;
  v25 = v37;
  v24 = v38;
  *(_QWORD *)(a2 + 16) = v38;
  *(_QWORD *)(a2 + 24) = v13;
  *(_QWORD *)(a2 + 32) = v15;
  *(_BYTE *)(a2 + 40) = (_BYTE)v6;
  v26 = v36;
  *(_QWORD *)(a2 + 48) = v25;
  *(_QWORD *)(a2 + 56) = v26;
  *(_QWORD *)(a2 + 64) = 1;
  *(_BYTE *)(a2 + 72) = 0;
  *(_QWORD *)(a2 + 80) = v19;
  *(_QWORD *)(a2 + 88) = v18;
  *(_BYTE *)(a2 + 96) = v20;
  *(double *)(a2 + 104) = v21;
  *(_QWORD *)(a2 + 112) = v27;
  *(_QWORD *)(a2 + 120) = v28;
  *(_QWORD *)(a2 + 128) = v29;
  *(_BYTE *)(a2 + 136) = 0;
  swift_retain(v22);
  swift_retain(v23);
  swift_retain(v24);
  v30 = v13;
  v31 = v13;
  v32 = v35;
  sub_100032F84(v31, v35, (char)v6);
  swift_bridgeObjectRetain(v25);
  swift_retain(v26);
  swift_retain(v19);
  swift_retain(v18);
  sub_1000330B0(v30, v32, (char)v6);
  swift_release(v24);
  swift_release(KeyPath);
  swift_release(v40);
  swift_release(v18);
  swift_release(v19);
  swift_release(v26);
  return swift_bridgeObjectRelease(v25);
}

uint64_t sub_1000322F8(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_10006BD24, 1);
}

uint64_t sub_100032308@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  double *v10;
  double v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t KeyPath;
  void *v17;
  double v18;
  double v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t OpaqueTypeConformance2;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD v36[48];
  _OWORD v37[16];
  _BYTE v38[272];
  _QWORD v39[37];
  char v40;
  _BYTE v41[296];
  _QWORD v42[2];
  char v43;
  _BYTE v44[263];
  uint64_t v45;
  uint64_t v46;
  _BYTE v47[319];
  _BYTE v48[392];

  v2 = v1;
  v35 = a1;
  v3 = type metadata accessor for AccessibilityChildBehavior(0);
  v32 = *(_QWORD *)(v3 - 8);
  v33 = v3;
  __chkstk_darwin(v3);
  v5 = (char *)&v31 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_100003704(&qword_1000824D0);
  v34 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v8 = (char *)&v31 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for LightsCategoryEntry(0);
  v10 = (double *)(v1 + *(int *)(v9 + 36));
  v11 = v10[1];
  v12 = static VerticalAlignment.center.getter(v9);
  v13 = static HorizontalAlignment.leading.getter();
  v14 = sub_1000326A8(v2, (uint64_t)v37, v11);
  *(_OWORD *)&v38[199] = v37[12];
  *(_OWORD *)&v38[215] = v37[13];
  *(_OWORD *)&v38[231] = v37[14];
  *(_OWORD *)&v38[247] = v37[15];
  *(_OWORD *)&v38[135] = v37[8];
  *(_OWORD *)&v38[151] = v37[9];
  *(_OWORD *)&v38[167] = v37[10];
  *(_OWORD *)&v38[183] = v37[11];
  *(_OWORD *)&v38[71] = v37[4];
  *(_OWORD *)&v38[87] = v37[5];
  *(_OWORD *)&v38[103] = v37[6];
  *(_OWORD *)&v38[119] = v37[7];
  *(_OWORD *)&v38[7] = v37[0];
  *(_OWORD *)&v38[23] = v37[1];
  *(_OWORD *)&v38[39] = v37[2];
  v38[264] = 0;
  *(_OWORD *)&v38[55] = v37[3];
  v15 = static Color.primary.getter(v14);
  KeyPath = swift_getKeyPath(&unk_1000630D0);
  v39[0] = v13;
  v39[1] = 0;
  LOBYTE(v39[2]) = 0;
  memcpy((char *)&v39[2] + 1, v38, 0x107uLL);
  v39[35] = KeyPath;
  v39[36] = v15;
  memcpy(v41, v39, sizeof(v41));
  v40 = 0;
  v42[0] = v13;
  v42[1] = 0;
  v43 = 0;
  memcpy(v44, v38, sizeof(v44));
  v45 = KeyPath;
  v46 = v15;
  sub_100032E68((uint64_t)v39);
  sub_100032F94((uint64_t)v42);
  v47[303] = 1;
  v17 = memcpy(&v47[7], v41, 0x128uLL);
  v18 = *v10 / 12.0;
  LOBYTE(v13) = static Edge.Set.all.getter(v17);
  v19 = EdgeInsets.init(_all:)(v18);
  v21 = v20;
  v23 = v22;
  v25 = v24;
  v47[311] = 0;
  v36[0] = v12;
  v36[1] = 0;
  LOBYTE(v36[2]) = 1;
  v26 = memcpy((char *)&v36[2] + 1, v47, 0x12FuLL);
  v36[40] = 0;
  LOBYTE(v36[41]) = 0;
  LOBYTE(v36[42]) = v13;
  *(double *)&v36[43] = v19;
  v36[44] = v21;
  v36[45] = v23;
  v36[46] = v25;
  LOBYTE(v36[47]) = 0;
  static AccessibilityChildBehavior.combine.getter(v26);
  v27 = sub_100003704(&qword_1000824D8);
  v28 = sub_1000330C0();
  View.accessibilityElement(children:)(v5, v27, v28);
  (*(void (**)(char *, uint64_t))(v32 + 8))(v5, v33);
  memcpy(v48, v36, 0x179uLL);
  sub_100033144((uint64_t)v48);
  v36[0] = v27;
  v36[1] = v28;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(v36, &opaque type descriptor for <<opaque return type of View.accessibilityElement(children:)>>, 1);
  View.accessibilityIdentifier(_:)(0xD000000000000033, 0x80000001000688B0, v6, OpaqueTypeConformance2);
  return (*(uint64_t (**)(char *, uint64_t))(v34 + 8))(v8, v6);
}

uint64_t sub_1000326A8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>, double a3@<D0>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  char v19;
  double v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v35;
  uint64_t KeyPath;
  uint64_t v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  _BYTE v51[145];
  _BYTE v52[7];
  char v53;
  _BYTE v54[7];
  char v55;
  _BYTE v56[7];
  char v57;
  uint64_t v58;
  unint64_t v59;
  char v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  _OWORD v70[7];
  _OWORD v71[2];
  _OWORD v72[9];
  char v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;

  v6 = sub_100003704(&qword_1000824F8);
  v7 = __chkstk_darwin(v6);
  v9 = (char *)&v35 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v40 = static VerticalAlignment.center.getter(v7);
  sub_100032A94((uint64_t)v70, a3);
  *(_OWORD *)((char *)&v72[6] + 7) = v70[6];
  *(_OWORD *)((char *)&v72[5] + 7) = v70[5];
  *(_OWORD *)((char *)&v72[2] + 7) = v70[2];
  *(_OWORD *)((char *)&v72[1] + 7) = v70[1];
  *(_OWORD *)((char *)&v72[7] + 7) = v71[0];
  v72[8] = *(_OWORD *)((char *)v71 + 9);
  *(_OWORD *)((char *)&v72[3] + 7) = v70[3];
  v73 = 1;
  *(_OWORD *)((char *)&v72[4] + 7) = v70[4];
  *(_OWORD *)((char *)v72 + 7) = v70[0];
  v39 = 1;
  v80 = v72[6];
  v81 = v72[7];
  v82 = *(_OWORD *)((char *)v71 + 9);
  v76 = v72[2];
  v77 = v72[3];
  v78 = v72[4];
  v79 = v72[5];
  v74 = v72[0];
  v75 = v72[1];
  v10 = (uint64_t *)(a1 + *(int *)(type metadata accessor for LightsCategoryEntry(0) + 32));
  v11 = v10[1];
  if (v11)
  {
    v12 = *v10;
    v13 = v11;
  }
  else
  {
    v13 = 0xA600000000000000;
    v12 = 0x9380E29380E2;
  }
  v58 = v12;
  v59 = v13;
  v14 = sub_1000037D4();
  swift_bridgeObjectRetain(v11);
  v15 = Text.init<A>(_:)(&v58, &type metadata for String, v14);
  v37 = v16;
  v38 = v17;
  v19 = v18 & 1;
  KeyPath = swift_getKeyPath(&unk_100063100);
  v20 = static Font.Weight.medium.getter();
  v21 = enum case for Font.Design.default(_:);
  v22 = type metadata accessor for Font.Design(0);
  v23 = *(_QWORD *)(v22 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v23 + 104))(v9, v21, v22);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v23 + 56))(v9, 0, 1, v22);
  v24 = static Font.system(size:weight:design:)(*(_QWORD *)&v20, 0, v9, a3 * 0.2);
  sub_100033268((uint64_t)v9, &qword_1000824F8);
  v25 = swift_getKeyPath(&unk_100063130);
  v47 = v80;
  v48 = v81;
  v49 = v82;
  v43 = v76;
  v44 = v77;
  v45 = v78;
  v46 = v79;
  v41 = v74;
  v42 = v75;
  *(_OWORD *)&v51[97] = v80;
  *(_OWORD *)&v51[81] = v79;
  *(_OWORD *)&v51[33] = v76;
  *(_OWORD *)&v51[17] = v75;
  *(_OWORD *)&v51[113] = v81;
  *(_OWORD *)&v51[129] = v82;
  *(_OWORD *)&v51[49] = v77;
  v50 = (unint64_t)v40;
  LOBYTE(v23) = v39;
  v51[0] = v39;
  *(_OWORD *)&v51[65] = v78;
  *(_OWORD *)&v51[1] = v74;
  v26 = *(_OWORD *)&v51[128];
  *(_OWORD *)(a2 + 128) = *(_OWORD *)&v51[112];
  *(_OWORD *)(a2 + 144) = v26;
  *(_BYTE *)(a2 + 160) = v51[144];
  v27 = *(_OWORD *)&v51[64];
  *(_OWORD *)(a2 + 64) = *(_OWORD *)&v51[48];
  *(_OWORD *)(a2 + 80) = v27;
  v28 = *(_OWORD *)&v51[96];
  *(_OWORD *)(a2 + 96) = *(_OWORD *)&v51[80];
  *(_OWORD *)(a2 + 112) = v28;
  v29 = *(_OWORD *)v51;
  *(_OWORD *)a2 = v50;
  *(_OWORD *)(a2 + 16) = v29;
  v30 = *(_OWORD *)&v51[32];
  *(_OWORD *)(a2 + 32) = *(_OWORD *)&v51[16];
  *(_OWORD *)(a2 + 48) = v30;
  v57 = 0;
  v55 = v19;
  v53 = 0;
  *(_DWORD *)(a2 + 177) = *(_DWORD *)v56;
  *(_DWORD *)(a2 + 180) = *(_DWORD *)&v56[3];
  *(_DWORD *)(a2 + 201) = *(_DWORD *)v54;
  *(_DWORD *)(a2 + 204) = *(_DWORD *)&v54[3];
  *(_DWORD *)(a2 + 233) = *(_DWORD *)v52;
  *(_DWORD *)(a2 + 236) = *(_DWORD *)&v52[3];
  *(_QWORD *)(a2 + 168) = 0;
  *(_BYTE *)(a2 + 176) = 0;
  v31 = v37;
  v32 = v38;
  *(_QWORD *)(a2 + 184) = v15;
  *(_QWORD *)(a2 + 192) = v31;
  *(_BYTE *)(a2 + 200) = v19;
  v33 = KeyPath;
  *(_QWORD *)(a2 + 208) = v32;
  *(_QWORD *)(a2 + 216) = v33;
  *(_QWORD *)(a2 + 224) = 1;
  *(_BYTE *)(a2 + 232) = 0;
  *(_QWORD *)(a2 + 240) = v25;
  *(_QWORD *)(a2 + 248) = v24;
  sub_1000332AC((uint64_t)&v50);
  sub_100032F84(v15, v31, v19);
  swift_bridgeObjectRetain(v32);
  swift_retain(v33);
  swift_retain(v25);
  swift_retain(v24);
  sub_1000330B0(v15, v31, v19);
  swift_release(v24);
  swift_release(v25);
  swift_release(v33);
  swift_bridgeObjectRelease(v32);
  v66 = v46;
  v67 = v47;
  v68 = v48;
  v69 = v49;
  v62 = v42;
  v63 = v43;
  v64 = v44;
  v65 = v45;
  v58 = v40;
  v59 = 0;
  v60 = v23;
  v61 = v41;
  return sub_100033348((uint64_t)&v58);
}

uint64_t sub_100032A94@<X0>(uint64_t a1@<X8>, double a2@<D0>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  double v7;
  double v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(char *, uint64_t, uint64_t);
  void (*v13)(char *, _QWORD, uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  int v19;
  double v20;
  uint64_t v21;
  double v22;
  char v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t KeyPath;
  uint64_t v43;
  uint64_t v44;
  char v45;
  _BYTE v46[7];
  _BYTE v47[7];
  char v48;
  _BYTE v49[7];
  char v50;

  v4 = sub_100003704(&qword_1000824F8);
  __chkstk_darwin(v4);
  v6 = (char *)&v36 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v44 = Image.init(systemName:)(0x6C7562746867696CLL, 0xEE006C6C69662E62);
  v7 = a2 * 0.1;
  v8 = static Font.Weight.bold.getter();
  v9 = enum case for Font.Design.default(_:);
  v10 = type metadata accessor for Font.Design(0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(void (**)(char *, uint64_t, uint64_t))(v11 + 104);
  v12(v6, v9, v10);
  v13 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56);
  v13(v6, 0, 1, v10);
  v43 = static Font.system(size:weight:design:)(*(_QWORD *)&v8, 0, v6, v7);
  sub_100033268((uint64_t)v6, &qword_1000824F8);
  KeyPath = swift_getKeyPath(&unk_100063130);
  v14 = LocalizedStringKey.init(stringLiteral:)(0x73746867694CLL, 0xE600000000000000);
  v40 = Text.init(_:tableName:bundle:comment:)(v14);
  v41 = v15;
  v17 = v16;
  v19 = v18 & 1;
  v39 = swift_getKeyPath(&unk_100063100);
  v20 = static Font.Weight.bold.getter();
  v12(v6, v9, v10);
  v13(v6, 0, 1, v10);
  v38 = static Font.system(size:weight:design:)(*(_QWORD *)&v20, 0, v6, v7);
  sub_100033268((uint64_t)v6, &qword_1000824F8);
  v21 = swift_getKeyPath(&unk_100063130);
  LOBYTE(v9) = static Edge.Set.leading.getter();
  v22 = EdgeInsets.init(_all:)(-4.0);
  v23 = v19;
  v37 = v19;
  v50 = v19;
  v48 = 0;
  v45 = 0;
  *(_DWORD *)(a1 + 41) = *(_DWORD *)v49;
  *(_DWORD *)(a1 + 44) = *(_DWORD *)&v49[3];
  *(_DWORD *)(a1 + 73) = *(_DWORD *)v47;
  *(_DWORD *)(a1 + 76) = *(_DWORD *)&v47[3];
  v24 = *(_DWORD *)v46;
  *(_DWORD *)(a1 + 100) = *(_DWORD *)&v46[3];
  *(_DWORD *)(a1 + 97) = v24;
  v26 = v43;
  v25 = v44;
  v28 = v41;
  v27 = KeyPath;
  *(_QWORD *)a1 = v44;
  *(_QWORD *)(a1 + 8) = v27;
  v29 = v39;
  v30 = v40;
  *(_QWORD *)(a1 + 16) = v26;
  *(_QWORD *)(a1 + 24) = v30;
  *(_QWORD *)(a1 + 32) = v17;
  *(_BYTE *)(a1 + 40) = v23;
  *(_QWORD *)(a1 + 48) = v28;
  *(_QWORD *)(a1 + 56) = v29;
  *(_QWORD *)(a1 + 64) = 1;
  *(_BYTE *)(a1 + 72) = 0;
  v31 = v38;
  *(_QWORD *)(a1 + 80) = v21;
  *(_QWORD *)(a1 + 88) = v31;
  *(_BYTE *)(a1 + 96) = v9;
  *(double *)(a1 + 104) = v22;
  *(_QWORD *)(a1 + 112) = v32;
  *(_QWORD *)(a1 + 120) = v33;
  *(_QWORD *)(a1 + 128) = v34;
  *(_BYTE *)(a1 + 136) = 0;
  swift_retain(v25);
  swift_retain(v27);
  swift_retain(v26);
  LOBYTE(a1) = v37;
  sub_100032F84(v30, v17, v37);
  swift_bridgeObjectRetain(v28);
  swift_retain(v29);
  swift_retain(v21);
  swift_retain(v31);
  sub_1000330B0(v30, v17, a1);
  swift_release(v26);
  swift_release(v27);
  swift_release(v44);
  swift_release(v31);
  swift_release(v21);
  swift_release(v29);
  return swift_bridgeObjectRelease(v28);
}

uint64_t sub_100032DC8@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = EnvironmentValues.foregroundColor.getter();
  *a1 = result;
  return result;
}

uint64_t sub_100032DF0@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = EnvironmentValues.foregroundColor.getter();
  *a1 = result;
  return result;
}

uint64_t sub_100032E18(_QWORD *a1)
{
  uint64_t v1;

  v1 = swift_retain(*a1);
  return EnvironmentValues.foregroundColor.setter(v1);
}

uint64_t sub_100032E40(_QWORD *a1)
{
  uint64_t v1;

  v1 = swift_retain(*a1);
  return EnvironmentValues.foregroundColor.setter(v1);
}

uint64_t sub_100032E68(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v2 = *(_QWORD *)(a1 + 48);
  v3 = *(_QWORD *)(a1 + 56);
  v4 = *(_QWORD *)(a1 + 72);
  v5 = *(_QWORD *)(a1 + 80);
  v6 = *(_BYTE *)(a1 + 88);
  v7 = *(_QWORD *)(a1 + 96);
  v8 = *(_QWORD *)(a1 + 104);
  v9 = *(_QWORD *)(a1 + 128);
  v10 = *(_QWORD *)(a1 + 136);
  v14 = *(_QWORD *)(a1 + 216);
  v15 = *(_QWORD *)(a1 + 208);
  v13 = *(_BYTE *)(a1 + 224);
  v16 = *(_QWORD *)(a1 + 232);
  v17 = *(_QWORD *)(a1 + 240);
  v18 = *(_QWORD *)(a1 + 264);
  v19 = *(_QWORD *)(a1 + 272);
  v20 = *(_QWORD *)(a1 + 280);
  v12 = *(_QWORD *)(a1 + 288);
  swift_retain(*(_QWORD *)(a1 + 64));
  swift_retain(v2);
  swift_retain(v3);
  sub_100032F84(v4, v5, v6);
  swift_retain(v10);
  swift_bridgeObjectRetain(v7);
  swift_retain(v8);
  swift_retain(v9);
  sub_100032F84(v15, v14, v13);
  swift_retain(v12);
  swift_bridgeObjectRetain(v16);
  swift_retain(v17);
  swift_retain(v18);
  swift_retain(v19);
  swift_retain(v20);
  return a1;
}

uint64_t sub_100032F84(uint64_t a1, uint64_t a2, char a3)
{
  if ((a3 & 1) != 0)
    return swift_retain(a1);
  else
    return swift_bridgeObjectRetain(a2);
}

uint64_t sub_100032F94(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v2 = *(_QWORD *)(a1 + 48);
  v3 = *(_QWORD *)(a1 + 64);
  v4 = *(_QWORD *)(a1 + 72);
  v5 = *(_QWORD *)(a1 + 80);
  v6 = *(_BYTE *)(a1 + 88);
  v8 = *(_QWORD *)(a1 + 96);
  v7 = *(_QWORD *)(a1 + 104);
  v9 = *(_QWORD *)(a1 + 128);
  v10 = *(_QWORD *)(a1 + 136);
  v14 = *(_QWORD *)(a1 + 216);
  v15 = *(_QWORD *)(a1 + 208);
  v13 = *(_BYTE *)(a1 + 224);
  v17 = *(_QWORD *)(a1 + 240);
  v18 = *(_QWORD *)(a1 + 232);
  v16 = *(_QWORD *)(a1 + 264);
  v12 = *(_QWORD *)(a1 + 280);
  v19 = *(_QWORD *)(a1 + 272);
  v20 = *(_QWORD *)(a1 + 288);
  swift_release(*(_QWORD *)(a1 + 56));
  swift_release(v2);
  swift_release(v3);
  sub_1000330B0(v4, v5, v6);
  swift_release(v9);
  swift_release(v7);
  swift_bridgeObjectRelease(v8);
  swift_release(v10);
  sub_1000330B0(v15, v14, v13);
  swift_release(v12);
  swift_release(v16);
  swift_release(v17);
  swift_bridgeObjectRelease(v18);
  swift_release(v19);
  swift_release(v20);
  return a1;
}

uint64_t sub_1000330B0(uint64_t a1, uint64_t a2, char a3)
{
  if ((a3 & 1) != 0)
    return swift_release(a1);
  else
    return swift_bridgeObjectRelease(a2);
}

unint64_t sub_1000330C0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000824E0;
  if (!qword_1000824E0)
  {
    v1 = sub_100003744(&qword_1000824D8);
    sub_100033ED0(&qword_1000824E8, &qword_1000824F0, (uint64_t)&protocol conformance descriptor for HStack<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000824E0);
  }
  return result;
}

uint64_t sub_100033144(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v2 = *(_QWORD *)(a1 + 72);
  v3 = *(_QWORD *)(a1 + 88);
  v4 = *(_QWORD *)(a1 + 96);
  v5 = *(_QWORD *)(a1 + 104);
  v6 = *(_BYTE *)(a1 + 112);
  v8 = *(_QWORD *)(a1 + 120);
  v7 = *(_QWORD *)(a1 + 128);
  v9 = *(_QWORD *)(a1 + 152);
  v10 = *(_QWORD *)(a1 + 160);
  v14 = *(_QWORD *)(a1 + 240);
  v15 = *(_QWORD *)(a1 + 232);
  v13 = *(_BYTE *)(a1 + 248);
  v17 = *(_QWORD *)(a1 + 264);
  v18 = *(_QWORD *)(a1 + 256);
  v16 = *(_QWORD *)(a1 + 288);
  v12 = *(_QWORD *)(a1 + 304);
  v19 = *(_QWORD *)(a1 + 296);
  v20 = *(_QWORD *)(a1 + 312);
  swift_release(*(_QWORD *)(a1 + 80));
  swift_release(v2);
  swift_release(v3);
  sub_1000330B0(v4, v5, v6);
  swift_release(v9);
  swift_release(v7);
  swift_bridgeObjectRelease(v8);
  swift_release(v10);
  sub_1000330B0(v15, v14, v13);
  swift_release(v12);
  swift_release(v16);
  swift_release(v17);
  swift_bridgeObjectRelease(v18);
  swift_release(v19);
  swift_release(v20);
  return a1;
}

uint64_t sub_100033268(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;

  v3 = sub_100003704(a2);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_1000332AC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v2 = *(_QWORD *)(a1 + 24);
  v3 = *(_QWORD *)(a1 + 32);
  v4 = *(_QWORD *)(a1 + 48);
  v5 = *(_QWORD *)(a1 + 56);
  v6 = *(_BYTE *)(a1 + 64);
  v7 = *(_QWORD *)(a1 + 72);
  v8 = *(_QWORD *)(a1 + 80);
  v9 = *(_QWORD *)(a1 + 104);
  v10 = *(_QWORD *)(a1 + 112);
  swift_retain(*(_QWORD *)(a1 + 40));
  swift_retain(v2);
  swift_retain(v3);
  sub_100032F84(v4, v5, v6);
  swift_retain(v10);
  swift_bridgeObjectRetain(v7);
  swift_retain(v8);
  swift_retain(v9);
  return a1;
}

uint64_t sub_100033348(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v2 = *(_QWORD *)(a1 + 24);
  v3 = *(_QWORD *)(a1 + 40);
  v4 = *(_QWORD *)(a1 + 48);
  v5 = *(_QWORD *)(a1 + 56);
  v6 = *(_BYTE *)(a1 + 64);
  v7 = *(_QWORD *)(a1 + 72);
  v8 = *(_QWORD *)(a1 + 80);
  v9 = *(_QWORD *)(a1 + 104);
  v10 = *(_QWORD *)(a1 + 112);
  swift_release(*(_QWORD *)(a1 + 32));
  swift_release(v2);
  swift_release(v3);
  sub_1000330B0(v4, v5, v6);
  swift_release(v9);
  swift_release(v8);
  swift_bridgeObjectRelease(v7);
  swift_release(v10);
  return a1;
}

uint64_t sub_1000333E4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v3 = *(_QWORD *)(a1 + 48);
  v2 = *(_QWORD *)(a1 + 56);
  v4 = *(_QWORD *)(a1 + 72);
  v5 = *(_QWORD *)(a1 + 80);
  v6 = *(_BYTE *)(a1 + 88);
  v14 = *(_QWORD *)(a1 + 96);
  v16 = *(_QWORD *)(a1 + 104);
  v7 = *(_QWORD *)(a1 + 136);
  v19 = *(_QWORD *)(a1 + 128);
  v27 = *(_QWORD *)(a1 + 216);
  v28 = *(_QWORD *)(a1 + 208);
  v25 = *(_QWORD *)(a1 + 232);
  v26 = *(_QWORD *)(a1 + 224);
  v23 = *(_QWORD *)(a1 + 248);
  v24 = *(_QWORD *)(a1 + 240);
  v21 = *(_QWORD *)(a1 + 264);
  v22 = *(_QWORD *)(a1 + 256);
  v20 = *(_OWORD *)(a1 + 272);
  v18 = *(_OWORD *)(a1 + 288);
  v17 = *(_OWORD *)(a1 + 304);
  v15 = *(_OWORD *)(a1 + 320);
  v12 = *(_OWORD *)(a1 + 352);
  v13 = *(_OWORD *)(a1 + 336);
  v9 = *(_QWORD *)(a1 + 368);
  v8 = *(_QWORD *)(a1 + 376);
  v10 = *(_BYTE *)(a1 + 384);
  swift_retain(*(_QWORD *)(a1 + 64));
  swift_retain(v3);
  swift_retain(v2);
  sub_100032F84(v4, v5, v6);
  swift_retain(v7);
  swift_bridgeObjectRetain(v14);
  swift_retain(v16);
  swift_retain(v19);
  sub_100033544(v28, v27, v26, v25, v24, v23, v22, v21, v20, *((uint64_t *)&v20 + 1), v18, *((uint64_t *)&v18 + 1), v17, SBYTE8(v17), v15, *((uint64_t *)&v15 + 1), v13, *((uint64_t *)&v13 + 1), v12,
    *((uint64_t *)&v12 + 1),
    v9,
    v8,
    v10);
  return a1;
}

uint64_t sub_100033544(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23)
{
  uint64_t result;

  sub_100032F84(a1, a2, a3 & 1);
  swift_retain(a9);
  swift_retain(a10);
  swift_bridgeObjectRetain(a4);
  swift_retain(a5);
  result = swift_retain(a8);
  if ((a23 & 1) != 0)
    return sub_10003365C(a12, a13, a14, a15, a16, a17, a18, a19, a20, a21);
  return result;
}

uint64_t sub_10003365C(uint64_t result, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  if (a4)
  {
    sub_100032F84(result, a2, a3 & 1);
    swift_retain(a9);
    swift_retain(a10);
    swift_bridgeObjectRetain(a4);
    swift_retain(a5);
    return swift_retain(a8);
  }
  return result;
}

uint64_t sub_1000336C8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  __int128 v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v2 = *(_QWORD *)(a1 + 48);
  v3 = *(_QWORD *)(a1 + 64);
  v4 = *(_QWORD *)(a1 + 72);
  v5 = *(_QWORD *)(a1 + 80);
  v6 = *(_BYTE *)(a1 + 88);
  v17 = *(_QWORD *)(a1 + 96);
  v13 = *(_QWORD *)(a1 + 104);
  v7 = *(_QWORD *)(a1 + 128);
  v18 = *(_QWORD *)(a1 + 136);
  v27 = *(_QWORD *)(a1 + 216);
  v28 = *(_QWORD *)(a1 + 208);
  v25 = *(_QWORD *)(a1 + 232);
  v26 = *(_QWORD *)(a1 + 224);
  v23 = *(_QWORD *)(a1 + 248);
  v24 = *(_QWORD *)(a1 + 240);
  v21 = *(_QWORD *)(a1 + 264);
  v22 = *(_QWORD *)(a1 + 256);
  v19 = *(_OWORD *)(a1 + 288);
  v20 = *(_OWORD *)(a1 + 272);
  v15 = *(_OWORD *)(a1 + 320);
  v16 = *(_OWORD *)(a1 + 304);
  v14 = *(_OWORD *)(a1 + 336);
  v12 = *(_OWORD *)(a1 + 352);
  v9 = *(_QWORD *)(a1 + 368);
  v8 = *(_QWORD *)(a1 + 376);
  v10 = *(_BYTE *)(a1 + 384);
  swift_release(*(_QWORD *)(a1 + 56));
  swift_release(v2);
  swift_release(v3);
  sub_1000330B0(v4, v5, v6);
  swift_release(v7);
  swift_release(v13);
  swift_bridgeObjectRelease(v17);
  swift_release(v18);
  sub_100033824(v28, v27, v26, v25, v24, v23, v22, v21, v20, *((uint64_t *)&v20 + 1), v19, *((uint64_t *)&v19 + 1), v16, SBYTE8(v16), v15, *((uint64_t *)&v15 + 1), v14, *((uint64_t *)&v14 + 1), v12,
    *((uint64_t *)&v12 + 1),
    v9,
    v8,
    v10);
  return a1;
}

uint64_t sub_100033824(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23)
{
  uint64_t result;

  sub_1000330B0(a1, a2, a3 & 1);
  swift_release(a10);
  swift_release(a8);
  swift_release(a5);
  swift_bridgeObjectRelease(a4);
  result = swift_release(a9);
  if ((a23 & 1) != 0)
    return sub_10003393C(a12, a13, a14, a15, a16, a17, a18, a19, a20, a21);
  return result;
}

uint64_t sub_10003393C(uint64_t result, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  if (a4)
  {
    sub_1000330B0(result, a2, a3 & 1);
    swift_release(a10);
    swift_release(a8);
    swift_release(a5);
    swift_bridgeObjectRelease(a4);
    return swift_release(a9);
  }
  return result;
}

unint64_t sub_1000339A8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100082510;
  if (!qword_100082510)
  {
    v1 = sub_100003744(&qword_100082508);
    sub_100033ED0(&qword_100082518, &qword_100082520, (uint64_t)&protocol conformance descriptor for HStack<A>);
    sub_100033ED0(&qword_100082528, &qword_100082530, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100082510);
  }
  return result;
}

uint64_t sub_100033A44(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  v2 = *(_QWORD *)(a1 + 72);
  v3 = *(_QWORD *)(a1 + 88);
  v4 = *(_QWORD *)(a1 + 96);
  v5 = *(_QWORD *)(a1 + 104);
  v6 = *(_BYTE *)(a1 + 112);
  v17 = *(_QWORD *)(a1 + 120);
  v14 = *(_QWORD *)(a1 + 128);
  v7 = *(_QWORD *)(a1 + 152);
  v19 = *(_QWORD *)(a1 + 160);
  v29 = *(_QWORD *)(a1 + 240);
  v30 = *(_QWORD *)(a1 + 232);
  v27 = *(_QWORD *)(a1 + 256);
  v28 = *(_QWORD *)(a1 + 248);
  v25 = *(_QWORD *)(a1 + 272);
  v26 = *(_QWORD *)(a1 + 264);
  v23 = *(_QWORD *)(a1 + 288);
  v24 = *(_QWORD *)(a1 + 280);
  v20 = *(_OWORD *)(a1 + 296);
  v18 = *(_OWORD *)(a1 + 312);
  v15 = *(_OWORD *)(a1 + 344);
  v16 = *(_OWORD *)(a1 + 328);
  v12 = *(_OWORD *)(a1 + 376);
  v13 = *(_OWORD *)(a1 + 360);
  v9 = *(_QWORD *)(a1 + 392);
  v8 = *(_QWORD *)(a1 + 400);
  v10 = *(_BYTE *)(a1 + 408);
  v21 = *(_QWORD *)(a1 + 448);
  v22 = *(_QWORD *)(a1 + 456);
  swift_release(*(_QWORD *)(a1 + 80));
  swift_release(v2);
  swift_release(v3);
  sub_1000330B0(v4, v5, v6);
  swift_release(v7);
  swift_release(v14);
  swift_bridgeObjectRelease(v17);
  swift_release(v19);
  sub_100033824(v30, v29, v28, v27, v26, v25, v24, v23, v20, *((uint64_t *)&v20 + 1), v18, *((uint64_t *)&v18 + 1), v16, SBYTE8(v16), v15, *((uint64_t *)&v15 + 1), v13, *((uint64_t *)&v13 + 1), v12,
    *((uint64_t *)&v12 + 1),
    v9,
    v8,
    v10);
  swift_release(v21);
  swift_release(v22);
  return a1;
}

void sub_100033BC0(double *a1@<X8>)
{
  *a1 = EnvironmentValues.minimumScaleFactor.getter();
}

uint64_t sub_100033BE8(double *a1)
{
  return EnvironmentValues.minimumScaleFactor.setter(*a1);
}

uint64_t sub_100033C0C(uint64_t result)
{
  *(_BYTE *)(result + 176) = 1;
  return result;
}

uint64_t sub_100033C18(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100003704(&qword_100082538);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_100033C60(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v2 = *(_QWORD *)(a1 + 24);
  v3 = *(_QWORD *)(a1 + 32);
  v4 = *(_QWORD *)(a1 + 56);
  v5 = *(_QWORD *)(a1 + 64);
  v6 = *(_QWORD *)(a1 + 72);
  v7 = *(_QWORD *)(a1 + 96);
  v8 = *(_QWORD *)(a1 + 104);
  v9 = *(_QWORD *)(a1 + 112);
  v15 = *(_QWORD *)(a1 + 120);
  v16 = *(_QWORD *)(a1 + 88);
  v13 = *(_QWORD *)(a1 + 136);
  v14 = *(_QWORD *)(a1 + 128);
  v12 = *(_QWORD *)(a1 + 144);
  v11 = *(_OWORD *)(a1 + 152);
  sub_100032F84(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
  swift_retain(v5);
  swift_retain(v6);
  swift_bridgeObjectRetain(v2);
  swift_retain(v3);
  swift_retain(v4);
  sub_10003365C(v16, v7, v8, v9, v15, v14, v13, v12, v11, *((uint64_t *)&v11 + 1));
  return a1;
}

unint64_t sub_100033D44()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100082550;
  if (!qword_100082550)
  {
    v1 = sub_100003744(&qword_100082540);
    sub_100033DC8();
    sub_100033ED0(&qword_100082598, &qword_1000825A0, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100082550);
  }
  return result;
}

unint64_t sub_100033DC8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100082558;
  if (!qword_100082558)
  {
    v1 = sub_100003744(&qword_100082560);
    sub_100033E4C();
    sub_100033ED0(&qword_100082588, &qword_100082590, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100082558);
  }
  return result;
}

unint64_t sub_100033E4C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100082568;
  if (!qword_100082568)
  {
    v1 = sub_100003744(&qword_100082570);
    sub_100033ED0(&qword_100082578, &qword_100082580, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100082568);
  }
  return result;
}

uint64_t sub_100033ED0(unint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    v6 = sub_100003744(a2);
    result = swift_getWitnessTable(a3, v6);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100033F10(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v2 = *(_QWORD *)(a1 + 24);
  v3 = *(_QWORD *)(a1 + 32);
  v4 = *(_QWORD *)(a1 + 56);
  v5 = *(_QWORD *)(a1 + 64);
  v6 = *(_QWORD *)(a1 + 72);
  v7 = *(_QWORD *)(a1 + 96);
  v8 = *(_QWORD *)(a1 + 104);
  v9 = *(_QWORD *)(a1 + 112);
  v15 = *(_QWORD *)(a1 + 120);
  v16 = *(_QWORD *)(a1 + 88);
  v13 = *(_QWORD *)(a1 + 136);
  v14 = *(_QWORD *)(a1 + 128);
  v12 = *(_QWORD *)(a1 + 144);
  v11 = *(_OWORD *)(a1 + 152);
  sub_1000330B0(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
  swift_release(v6);
  swift_release(v4);
  swift_release(v3);
  swift_bridgeObjectRelease(v2);
  swift_release(v5);
  sub_10003393C(v16, v7, v8, v9, v15, v14, v13, v12, v11, *((uint64_t *)&v11 + 1));
  return a1;
}

uint64_t sub_100033FF4(uint64_t a1, void (*a2)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))
{
  char v4;

  v4 = *(_BYTE *)(a1 + 176);
  a2(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 96), *(_QWORD *)(a1 + 104), *(_QWORD *)(a1 + 112), *(_QWORD *)(a1 + 120), *(_QWORD *)(a1 + 128), *(_QWORD *)(a1 + 136), *(_QWORD *)(a1 + 144),
    *(_QWORD *)(a1 + 152),
    *(_QWORD *)(a1 + 160),
    *(_QWORD *)(a1 + 168),
    v4);
  return a1;
}

uint64_t sub_100034060(uint64_t result)
{
  *(_BYTE *)(result + 176) = 0;
  return result;
}

uint64_t sub_100034068()
{
  return sub_1000340D0(&qword_1000825B8, &qword_1000825C0, &qword_1000824D8, (uint64_t (*)(void))sub_1000330C0);
}

uint64_t sub_10003409C()
{
  return sub_1000340D0(&qword_1000825C8, &qword_1000825D0, &qword_100082508, (uint64_t (*)(void))sub_1000339A8);
}

uint64_t sub_1000340D0(unint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t (*a4)(void))
{
  uint64_t result;
  uint64_t v8;
  _QWORD v9[2];

  result = *a1;
  if (!result)
  {
    v8 = sub_100003744(a2);
    v9[0] = sub_100003744(a3);
    v9[1] = a4();
    swift_getOpaqueTypeConformance2(v9, &opaque type descriptor for <<opaque return type of View.accessibilityElement(children:)>>, 1);
    sub_100015884(&qword_100081E08, (uint64_t (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier, (uint64_t)&protocol conformance descriptor for AccessibilityAttachmentModifier);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v8);
    atomic_store(result, a1);
  }
  return result;
}

ValueMetadata *type metadata accessor for LightsCategoryWidget()
{
  return &type metadata for LightsCategoryWidget;
}

uint64_t sub_100034190(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_10006BDFC, 1);
}

uint64_t sub_1000341A0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t ObjectType;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned __int8 v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD v19[4];

  v6 = type metadata accessor for TaskPriority(0);
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, 1, v6) == 1)
  {
    sub_100033268(a1, &qword_100081DB0);
    v8 = 7168;
    v9 = *(_QWORD *)(a3 + 16);
    if (v9)
    {
LABEL_3:
      v10 = *(_QWORD *)(a3 + 24);
      ObjectType = swift_getObjectType(v9);
      swift_unknownObjectRetain(v9);
      v12 = dispatch thunk of Actor.unownedExecutor.getter(ObjectType, v10);
      v14 = v13;
      swift_unknownObjectRelease(v9);
      goto LABEL_6;
    }
  }
  else
  {
    v15 = TaskPriority.rawValue.getter();
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(a1, v6);
    v8 = v15 | 0x1C00;
    v9 = *(_QWORD *)(a3 + 16);
    if (v9)
      goto LABEL_3;
  }
  v12 = 0;
  v14 = 0;
LABEL_6:
  v16 = swift_allocObject(&unk_10007DEE8, 32, 7);
  *(_QWORD *)(v16 + 16) = a2;
  *(_QWORD *)(v16 + 24) = a3;
  if (v14 | v12)
  {
    v19[0] = 0;
    v19[1] = 0;
    v17 = v19;
    v19[2] = v12;
    v19[3] = v14;
  }
  else
  {
    v17 = 0;
  }
  return swift_task_create(v8, v17, (char *)&type metadata for () + 8, &unk_100082770, v16);
}

int *sub_1000342EC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  Swift::String v13;
  void *object;
  uint64_t v15;
  uint64_t v16;
  NSObject *v17;
  os_log_type_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  double v27;
  uint64_t v28;
  uint64_t v29;
  int *result;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  double *v35;
  _QWORD v36[3];
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;

  v6 = type metadata accessor for Locale(0);
  __chkstk_darwin(v6);
  v8 = (char *)v36 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for String.LocalizationValue(0);
  __chkstk_darwin(v9);
  v11 = (char *)v36 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = qword_10008A6F8 + 1;
  if (__OFADD__(qword_10008A6F8, 1))
  {
    __break(1u);
  }
  else
  {
    ++qword_10008A6F8;
    v38 = 0x2073746867694CLL;
    v39 = 0xE700000000000000;
    v37 = v12;
    v13._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
    object = v13._object;
    String.append(_:)(v13);
    swift_bridgeObjectRelease(object);
    v3 = v38;
    v2 = v39;
    if (qword_100081680 == -1)
      goto LABEL_3;
  }
  swift_once(&qword_100081680, sub_100022448);
LABEL_3:
  v15 = type metadata accessor for Logger(0);
  sub_100003884(v15, (uint64_t)static DataModel.widgetLogger);
  v16 = swift_bridgeObjectRetain(v2);
  v17 = Logger.logObject.getter(v16);
  v18 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v17, v18))
  {
    v19 = swift_slowAlloc(22, -1);
    v36[1] = a1;
    v20 = v19;
    v21 = swift_slowAlloc(64, -1);
    v38 = v21;
    *(_DWORD *)v20 = 136315394;
    swift_bridgeObjectRetain(v2);
    v37 = sub_10001DF04(v3, v2, &v38);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v37, &v38, v20 + 4, v20 + 12);
    swift_bridgeObjectRelease_n(v2, 3);
    *(_WORD *)(v20 + 12) = 2080;
    v37 = sub_10001DF04(0xD000000000000010, 0x8000000100067EA0, &v38);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v37, &v38, v20 + 14, v20 + 22);
    swift_arrayDestroy(v21, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v21, -1, -1);
    swift_slowDealloc(v20, -1, -1);

  }
  else
  {

    v22 = swift_bridgeObjectRelease_n(v2, 2);
  }
  Date.init()(v22);
  v23 = String.LocalizationValue.init(stringLiteral:)(0xD00000000000001ALL, 0x8000000100068A60);
  static Locale.current.getter(v23);
  v24 = String.init(localized:table:bundle:locale:comment:)(v11, 0x696C61636F4C4648, 0xED0000656C62617ALL, 0, v8, 0, 0, 256);
  v26 = v25;
  v27 = TimelineProviderContext.displaySize.getter(v24);
  v29 = v28;
  result = (int *)type metadata accessor for LightsCategoryEntry(0);
  v31 = a2 + result[5];
  *(_QWORD *)v31 = 1;
  *(_BYTE *)(v31 + 8) = 0;
  v32 = a2 + result[6];
  *(_QWORD *)v32 = 0;
  *(_BYTE *)(v32 + 8) = 0;
  v33 = a2 + result[7];
  *(_QWORD *)v33 = 1;
  *(_BYTE *)(v33 + 8) = 0;
  v34 = (uint64_t *)(a2 + result[8]);
  *v34 = v24;
  v34[1] = v26;
  v35 = (double *)(a2 + result[9]);
  *v35 = v27;
  *((_QWORD *)v35 + 1) = v29;
  return result;
}

uint64_t sub_10003468C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  Swift::String v15;
  void *object;
  uint64_t v17;
  uint64_t v18;
  NSObject *v19;
  os_log_type_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  char *v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;

  v41 = a2;
  v7 = type metadata accessor for TimelineProviderContext(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(_QWORD *)(v8 + 64);
  __chkstk_darwin(v7);
  v10 = (char *)&v35 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_100003704(&qword_100081DB0);
  __chkstk_darwin(v11);
  v13 = (char *)&v35 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = qword_10008A6F8 + 1;
  if (__OFADD__(qword_10008A6F8, 1))
  {
    __break(1u);
  }
  else
  {
    v39 = a1;
    v40 = v13;
    ++qword_10008A6F8;
    v43 = 0x2073746867694CLL;
    v44 = 0xE700000000000000;
    v42 = v14;
    v15._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
    object = v15._object;
    String.append(_:)(v15);
    swift_bridgeObjectRelease(object);
    v3 = v43;
    v4 = v44;
    if (qword_100081680 == -1)
      goto LABEL_3;
  }
  swift_once(&qword_100081680, sub_100022448);
LABEL_3:
  v17 = type metadata accessor for Logger(0);
  sub_100003884(v17, (uint64_t)static DataModel.widgetLogger);
  v18 = swift_bridgeObjectRetain_n(v4, 2);
  v19 = Logger.logObject.getter(v18);
  v20 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v19, v20))
  {
    v21 = swift_slowAlloc(22, -1);
    v36 = v9;
    v22 = v21;
    v23 = swift_slowAlloc(64, -1);
    v43 = v23;
    *(_DWORD *)v22 = 136315394;
    v37 = v10;
    swift_bridgeObjectRetain(v4);
    v42 = sub_10001DF04(v3, v4, &v43);
    v38 = v8;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v42, &v43, v22 + 4, v22 + 12);
    swift_bridgeObjectRelease_n(v4, 3);
    *(_WORD *)(v22 + 12) = 2080;
    v42 = sub_10001DF04(0xD00000000000001BLL, 0x8000000100067E80, &v43);
    v10 = v37;
    v8 = v38;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v42, &v43, v22 + 14, v22 + 22);
    swift_arrayDestroy(v23, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v23, -1, -1);
    v24 = v22;
    v9 = v36;
    swift_slowDealloc(v24, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n(v4, 2);
  }
  v25 = v39;
  v26 = type metadata accessor for TaskPriority(0);
  v27 = (uint64_t)v40;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 56))(v40, 1, 1, v26);
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v10, v25, v7);
  v28 = *(unsigned __int8 *)(v8 + 80);
  v29 = (v28 + 48) & ~v28;
  v30 = (v9 + v29 + 7) & 0xFFFFFFFFFFFFFFF8;
  v31 = (char *)swift_allocObject(&unk_10007DF10, v30 + 16, v28 | 7);
  *((_QWORD *)v31 + 2) = 0;
  *((_QWORD *)v31 + 3) = 0;
  *((_QWORD *)v31 + 4) = v41;
  *((_QWORD *)v31 + 5) = a3;
  (*(void (**)(char *, char *, uint64_t))(v8 + 32))(&v31[v29], v10, v7);
  v32 = (uint64_t *)&v31[v30];
  *v32 = v3;
  v32[1] = v4;
  swift_retain(a3);
  v33 = sub_1000341A0(v27, (uint64_t)&unk_100082798, (uint64_t)v31);
  return swift_release(v33);
}

uint64_t sub_100034A28(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v8;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;

  v8[2] = a4;
  v8[3] = a5;
  v12 = type metadata accessor for LightsCategoryEntry(0);
  v13 = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v12 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v8[4] = v13;
  v14 = (_QWORD *)swift_task_alloc(dword_10008278C);
  v8[5] = v14;
  *v14 = v8;
  v14[1] = sub_100034AC4;
  v14[17] = a7;
  v14[18] = a8;
  v14[15] = v13;
  v14[16] = a6;
  return swift_task_switch(sub_100034B84, 0, 0);
}

uint64_t sub_100034AC4()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 40));
  return swift_task_switch(sub_100034B18, 0, 0);
}

uint64_t sub_100034B18()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 32);
  (*(void (**)(uint64_t))(v0 + 16))(v1);
  sub_100015784(v1, type metadata accessor for LightsCategoryEntry);
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100034B68(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;

  v4[17] = a3;
  v4[18] = a4;
  v4[15] = a1;
  v4[16] = a2;
  return swift_task_switch(sub_100034B84, 0, 0);
}

uint64_t sub_100034B84()
{
  uint64_t *v0;
  void **v1;
  void *v2;
  uint64_t v3;
  id v4;
  uint64_t **v5;

  if (qword_100081670 != -1)
    swift_once(&qword_100081670, sub_100021008);
  v1 = (void **)(qword_10008A648 + OBJC_IVAR____TtC20HomeWidgetLockScreen9DataModel_currentHome);
  swift_beginAccess(qword_10008A648 + OBJC_IVAR____TtC20HomeWidgetLockScreen9DataModel_currentHome, v0 + 12, 0, 0);
  v2 = *v1;
  v0[19] = (uint64_t)v2;
  v3 = dword_1000827A4;
  v4 = v2;
  v5 = (uint64_t **)swift_task_alloc(v3);
  v0[20] = (uint64_t)v5;
  *v5 = v0;
  v5[1] = (uint64_t *)sub_100034C48;
  return sub_100036994((uint64_t)(v0 + 7), (uint64_t)v2, v0[17], v0[18]);
}

uint64_t sub_100034C48()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 160));
  return swift_task_switch(sub_100034C9C, 0, 0);
}

uint64_t sub_100034C9C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  BOOL v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  double v12;
  uint64_t v13;
  uint64_t v14;
  int *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  double *v20;

  v1 = sub_100028CE4(v0 + 56, v0 + 16);
  v2 = *(_QWORD *)(v0 + 48);
  if (v2)
    v3 = v2 == 1;
  else
    v3 = 1;
  v4 = v3;
  if (v3)
  {
    v5 = 0;
    v2 = 0;
    v6 = 0;
    v7 = 0;
    v8 = 0;
  }
  else
  {
    v6 = *(_QWORD *)(v0 + 32);
    v5 = *(_QWORD *)(v0 + 40);
    v8 = *(_QWORD *)(v0 + 16);
    v7 = *(_QWORD *)(v0 + 24);
  }
  v9 = *(void **)(v0 + 152);
  v10 = *(_QWORD *)(v0 + 120);
  v11 = Date.init()(v1);
  v12 = TimelineProviderContext.displaySize.getter(v11);
  v14 = v13;

  v15 = (int *)type metadata accessor for LightsCategoryEntry(0);
  v16 = v10 + v15[5];
  *(_QWORD *)v16 = v8;
  *(_BYTE *)(v16 + 8) = v4;
  v17 = v10 + v15[6];
  *(_QWORD *)v17 = v7;
  *(_BYTE *)(v17 + 8) = v4;
  v18 = v10 + v15[7];
  *(_QWORD *)v18 = v6;
  *(_BYTE *)(v18 + 8) = v4;
  v19 = (_QWORD *)(v10 + v15[8]);
  *v19 = v5;
  v19[1] = v2;
  v20 = (double *)(v10 + v15[9]);
  *v20 = v12;
  *((_QWORD *)v20 + 1) = v14;
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100034D9C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  Swift::String v14;
  void *object;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  NSObject *v19;
  os_log_type_t v20;
  _BOOL4 v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  NSObject *v30;
  os_log_type_t v31;
  uint8_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  id v36;
  NSString v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  char *v43;
  uint64_t *v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;

  v56 = a2;
  v55 = type metadata accessor for TimelineProviderContext(0);
  v7 = *(_QWORD *)(v55 - 8);
  v8 = *(_QWORD *)(v7 + 64);
  __chkstk_darwin(v55);
  v9 = (char *)&v48 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_100003704(&qword_100081DB0);
  __chkstk_darwin(v10);
  v12 = (char *)&v48 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = qword_10008A6F8 + 1;
  if (__OFADD__(qword_10008A6F8, 1))
  {
    __break(1u);
  }
  else
  {
    ++qword_10008A6F8;
    v58 = 0x2073746867694CLL;
    v59 = 0xE700000000000000;
    v57 = v13;
    v14._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
    object = v14._object;
    String.append(_:)(v14);
    swift_bridgeObjectRelease(object);
    v3 = v58;
    v4 = v59;
    if (qword_100081680 == -1)
      goto LABEL_3;
  }
  swift_once(&qword_100081680, sub_100022448);
LABEL_3:
  v16 = type metadata accessor for Logger(0);
  v17 = sub_100003884(v16, (uint64_t)static DataModel.widgetLogger);
  v18 = swift_bridgeObjectRetain_n(v4, 2);
  v51 = v17;
  v19 = Logger.logObject.getter(v18);
  v20 = static os_log_type_t.default.getter();
  v21 = os_log_type_enabled(v19, v20);
  v53 = v4;
  v54 = v3;
  if (v21)
  {
    v22 = swift_slowAlloc(22, -1);
    v52 = a1;
    v23 = v22;
    v24 = swift_slowAlloc(64, -1);
    v49 = v12;
    v25 = v24;
    v58 = v24;
    *(_DWORD *)v23 = 136315394;
    v50 = v7;
    swift_bridgeObjectRetain(v4);
    v57 = sub_10001DF04(v3, v4, &v58);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v57, &v58, v23 + 4, v23 + 12);
    swift_bridgeObjectRelease_n(v4, 3);
    *(_WORD *)(v23 + 12) = 2080;
    v57 = sub_10001DF04(0xD00000000000001BLL, 0x8000000100067E00, &v58);
    v7 = v50;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v57, &v58, v23 + 14, v23 + 22);
    swift_arrayDestroy(v25, 2, (char *)&type metadata for Any + 8);
    v26 = v25;
    v12 = v49;
    swift_slowDealloc(v26, -1, -1);
    v27 = v23;
    a1 = v52;
    swift_slowDealloc(v27, -1, -1);

  }
  else
  {

    v28 = swift_bridgeObjectRelease_n(v4, 2);
  }
  v29 = TimelineProviderContext.isPreview.getter(v28);
  if ((v29 & 1) == 0)
  {
    v30 = Logger.logObject.getter(v29);
    v31 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v30, v31))
    {
      v50 = v8;
      v32 = (uint8_t *)swift_slowAlloc(12, -1);
      v33 = swift_slowAlloc(32, -1);
      v51 = a3;
      v34 = v33;
      v58 = v33;
      v52 = a1;
      *(_DWORD *)v32 = 136315138;
      v57 = sub_10001DF04(0xD000000000000025, 0x80000001000689D0, &v58);
      v8 = v50;
      a1 = v52;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v57, &v58, v32 + 4, v32 + 12);
      _os_log_impl((void *)&_mh_execute_header, v30, v31, "Notifying homed that '%s' is active", v32, 0xCu);
      swift_arrayDestroy(v34, 1, (char *)&type metadata for Any + 8);
      v35 = v34;
      a3 = v51;
      swift_slowDealloc(v35, -1, -1);
      swift_slowDealloc(v32, -1, -1);
    }

    v36 = objc_msgSend((id)objc_opt_self(NSDistributedNotificationCenter), "defaultCenter");
    v37 = String._bridgeToObjectiveC()();
    objc_msgSend(v36, "postNotificationName:object:", v37, 0);

  }
  v38 = type metadata accessor for TaskPriority(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v38 - 8) + 56))(v12, 1, 1, v38);
  v39 = v55;
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, a1, v55);
  v40 = *(unsigned __int8 *)(v7 + 80);
  v41 = (v40 + 48) & ~v40;
  v42 = (v8 + v41 + 7) & 0xFFFFFFFFFFFFFFF8;
  v43 = (char *)swift_allocObject(&unk_10007DEC0, v42 + 16, v40 | 7);
  *((_QWORD *)v43 + 2) = 0;
  *((_QWORD *)v43 + 3) = 0;
  *((_QWORD *)v43 + 4) = v56;
  *((_QWORD *)v43 + 5) = a3;
  (*(void (**)(char *, char *, uint64_t))(v7 + 32))(&v43[v41], v9, v39);
  v44 = (uint64_t *)&v43[v42];
  v45 = v53;
  *v44 = v54;
  v44[1] = v45;
  swift_retain(a3);
  v46 = sub_1000341A0((uint64_t)v12, (uint64_t)&unk_100082760, (uint64_t)v43);
  return swift_release(v46);
}

uint64_t sub_1000352DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v8[5] = a7;
  v8[6] = a8;
  v8[3] = a5;
  v8[4] = a6;
  v8[2] = a4;
  v9 = type metadata accessor for Date(0);
  v8[7] = v9;
  v10 = *(_QWORD *)(v9 - 8);
  v8[8] = v10;
  v11 = (*(_QWORD *)(v10 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v8[9] = swift_task_alloc(v11);
  v8[10] = swift_task_alloc(v11);
  v12 = type metadata accessor for TimelineReloadPolicy(0);
  v8[11] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v12 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_100003704(&qword_100082778);
  v8[12] = v13;
  v14 = *(_QWORD *)(v13 - 8);
  v8[13] = v14;
  v8[14] = swift_task_alloc((*(_QWORD *)(v14 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_1000353A0, 0, 0);
}

uint64_t sub_1000353A0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;

  v1 = sub_100003704(&qword_100082780);
  v2 = type metadata accessor for LightsCategoryEntry(0);
  *(_QWORD *)(v0 + 120) = v2;
  v3 = *(_QWORD *)(v2 - 8);
  v4 = *(_QWORD *)(v3 + 72);
  v5 = *(unsigned __int8 *)(v3 + 80);
  v6 = (v5 + 32) & ~v5;
  v7 = swift_allocObject(v1, v6 + v4, v5 | 7);
  *(_QWORD *)(v0 + 128) = v7;
  *(_OWORD *)(v7 + 16) = xmmword_1000607D0;
  v8 = v7 + v6;
  v9 = swift_task_alloc(dword_10008278C);
  *(_QWORD *)(v0 + 136) = v9;
  *(_QWORD *)v9 = v0;
  *(_QWORD *)(v9 + 8) = sub_100035460;
  v10 = *(_OWORD *)(v0 + 32);
  *(_QWORD *)(v9 + 144) = *(_QWORD *)(v0 + 48);
  *(_OWORD *)(v9 + 128) = v10;
  *(_QWORD *)(v9 + 120) = v8;
  return swift_task_switch(sub_100034B84, 0, 0);
}

uint64_t sub_100035460()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 136));
  return swift_task_switch(sub_1000354B4, 0, 0);
}

uint64_t sub_1000354B4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t);
  void (*v9)(uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v1 = *(_QWORD *)(v0 + 128);
  v2 = *(_QWORD *)(v0 + 112);
  v12 = *(_QWORD *)(v0 + 120);
  v13 = *(_QWORD *)(v0 + 104);
  v3 = *(_QWORD *)(v0 + 88);
  v14 = *(_QWORD *)(v0 + 96);
  v4 = *(_QWORD *)(v0 + 72);
  v5 = *(_QWORD *)(v0 + 80);
  v7 = *(_QWORD *)(v0 + 56);
  v6 = *(_QWORD *)(v0 + 64);
  v8 = *(void (**)(uint64_t))(v0 + 16);
  static Date.now.getter();
  static Date.+ infix(_:_:)(v4, 1800.0);
  v9 = *(void (**)(uint64_t, uint64_t))(v6 + 8);
  v9(v4, v7);
  static TimelineReloadPolicy.after(_:)(v5);
  v9(v5, v7);
  v10 = sub_100015884(qword_100082738, type metadata accessor for LightsCategoryEntry, (uint64_t)&unk_10006328C);
  Timeline.init(entries:policy:)(v1, v3, v12, v10);
  v8(v2);
  (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v2, v14);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v5);
  swift_task_dealloc(v4);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000355DC()
{
  uint64_t v0;
  _BYTE *v1;
  uint64_t v2;
  _BYTE *v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  _BYTE v7[16];

  type metadata accessor for Locale(0);
  __chkstk_darwin();
  v1 = &v7[-((v0 + 15) & 0xFFFFFFFFFFFFFFF0)];
  type metadata accessor for String.LocalizationValue(0);
  __chkstk_darwin();
  v3 = &v7[-((v2 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v4 = String.LocalizationValue.init(stringLiteral:)(0xD000000000000023, 0x80000001000689A0);
  static Locale.current.getter(v4);
  result = String.init(localized:table:bundle:locale:comment:)(v3, 0xD00000000000001DLL, 0x8000000100068680, 0, v1, 0, 0, 256);
  qword_10008A6E8 = result;
  unk_10008A6F0 = v6;
  return result;
}

uint64_t sub_1000356D0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for Date(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 16))(a1, v1, v3);
}

uint64_t sub_10003570C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  v1 = sub_100003704(&qword_100081D90);
  __chkstk_darwin(v1);
  v3 = (char *)&v11 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for LightsCategoryView(0);
  __chkstk_darwin(v4);
  v6 = (char *)&v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100035D08(v0, (uint64_t)v6);
  v7 = &v6[*(int *)(v4 + 20)];
  *(_QWORD *)v7 = swift_getKeyPath(&unk_100063368);
  v8 = sub_100003704(&qword_100081DA0);
  swift_storeEnumTagMultiPayload(v7, v8, 0);
  URL.init(string:)(0xD00000000000002DLL, 0x8000000100068A30);
  v9 = sub_100015884(&qword_100082750, type metadata accessor for LightsCategoryView, (uint64_t)&unk_100062F84);
  View.widgetURL(_:)(v3, v4, v9);
  sub_100033268((uint64_t)v3, &qword_100081D90);
  return sub_100015784((uint64_t)v6, type metadata accessor for LightsCategoryView);
}

uint64_t sub_10003586C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t OpaqueTypeConformance2;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void *v39;
  unint64_t v40;
  unint64_t v41;
  _QWORD v42[3];

  v37 = a1;
  v1 = type metadata accessor for Locale(0);
  __chkstk_darwin(v1);
  v34 = (char *)&v33 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = type metadata accessor for String.LocalizationValue(0);
  __chkstk_darwin(v3);
  v5 = (char *)&v33 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_100003704(&qword_1000825D8);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v33 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_100003704(&qword_1000825E0);
  v33 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v12 = (char *)&v33 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_100003704(&qword_1000825E8);
  v35 = *(_QWORD *)(v13 - 8);
  v36 = v13;
  __chkstk_darwin(v13);
  v15 = (char *)&v33 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for LightsCategoryWidgetView(0);
  sub_100015884(&qword_1000825F0, type metadata accessor for LightsCategoryWidgetView, (uint64_t)&unk_100063314);
  sub_100035C78();
  StaticConfiguration.init<A>(kind:provider:content:)(0xD000000000000025, 0x80000001000689D0);
  if (qword_1000816B0 != -1)
    swift_once(&qword_1000816B0, sub_1000355DC);
  v38 = qword_10008A6E8;
  v39 = (void *)unk_10008A6F0;
  v16 = sub_100035CBC();
  v17 = sub_1000037D4();
  WidgetConfiguration.configurationDisplayName<A>(_:)(&v38, v6, &type metadata for String, v16, v17);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  v18 = String.LocalizationValue.init(stringLiteral:)(0xD000000000000020, 0x8000000100068A00);
  v19 = v34;
  static Locale.current.getter(v18);
  v20 = String.init(localized:table:bundle:locale:comment:)(v5, 0x696C61636F4C4648, 0xED0000656C62617ALL, 0, v19, 0, 0, 256);
  v22 = v21;
  v42[0] = v20;
  v42[1] = v21;
  v38 = v6;
  v39 = &type metadata for String;
  v40 = v16;
  v41 = v17;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v38, &opaque type descriptor for <<opaque return type of WidgetConfiguration.configurationDisplayName<A>(_:)>>, 1);
  WidgetConfiguration.description<A>(_:)(v42, v10, &type metadata for String, OpaqueTypeConformance2, v17);
  swift_bridgeObjectRelease(v22);
  (*(void (**)(char *, uint64_t))(v33 + 8))(v12, v10);
  v24 = sub_100003704(&qword_100081CE0);
  v25 = type metadata accessor for WidgetFamily(0);
  v26 = *(_QWORD *)(v25 - 8);
  v27 = *(unsigned __int8 *)(v26 + 80);
  v28 = (v27 + 32) & ~v27;
  v29 = swift_allocObject(v24, v28 + *(_QWORD *)(v26 + 72), v27 | 7);
  *(_OWORD *)(v29 + 16) = xmmword_1000607D0;
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v26 + 104))(v29 + v28, enum case for WidgetFamily.accessoryRectangular(_:), v25);
  v38 = v10;
  v39 = &type metadata for String;
  v40 = OpaqueTypeConformance2;
  v41 = v17;
  v30 = swift_getOpaqueTypeConformance2(&v38, &opaque type descriptor for <<opaque return type of WidgetConfiguration.description<A>(_:)>>, 1);
  v31 = v36;
  WidgetConfiguration.supportedFamilies(_:)(v29, v36, v30);
  swift_bridgeObjectRelease(v29);
  return (*(uint64_t (**)(char *, uint64_t))(v35 + 8))(v15, v31);
}

uint64_t sub_100035C58@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_100035D08(a1, a2);
}

uint64_t type metadata accessor for LightsCategoryWidgetView(uint64_t a1)
{
  return sub_100030820(a1, qword_100082700, (uint64_t)&nominal type descriptor for LightsCategoryWidgetView);
}

unint64_t sub_100035C78()
{
  unint64_t result;

  result = qword_1000825F8;
  if (!qword_1000825F8)
  {
    result = swift_getWitnessTable(&unk_1000632BC, &type metadata for LightsCategoryTimelineProvider);
    atomic_store(result, (unint64_t *)&qword_1000825F8);
  }
  return result;
}

unint64_t sub_100035CBC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100082600;
  if (!qword_100082600)
  {
    v1 = sub_100003744(&qword_1000825D8);
    result = swift_getWitnessTable(&protocol conformance descriptor for StaticConfiguration<A>, v1);
    atomic_store(result, (unint64_t *)&qword_100082600);
  }
  return result;
}

uint64_t sub_100035D08(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for LightsCategoryEntry(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t type metadata accessor for LightsCategoryEntry(uint64_t a1)
{
  return sub_100030820(a1, qword_100082660, (uint64_t)&nominal type descriptor for LightsCategoryEntry);
}

uint64_t *sub_100035D60(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v21 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v21 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v21);
  }
  else
  {
    v7 = type metadata accessor for Date(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = a3[5];
    v9 = a3[6];
    v10 = (char *)a1 + v8;
    v11 = (char *)a2 + v8;
    *(_QWORD *)v10 = *(_QWORD *)v11;
    v10[8] = v11[8];
    v12 = (char *)a1 + v9;
    v13 = (char *)a2 + v9;
    *(_QWORD *)v12 = *(_QWORD *)v13;
    v12[8] = v13[8];
    v14 = a3[7];
    v15 = a3[8];
    v16 = (char *)a1 + v14;
    v17 = (char *)a2 + v14;
    *(_QWORD *)v16 = *(_QWORD *)v17;
    v16[8] = v17[8];
    v18 = (uint64_t *)((char *)a1 + v15);
    v19 = (uint64_t *)((char *)a2 + v15);
    v20 = v19[1];
    *v18 = *v19;
    v18[1] = v20;
    *(_OWORD *)((char *)a1 + a3[9]) = *(_OWORD *)((char *)a2 + a3[9]);
    swift_bridgeObjectRetain(v20);
  }
  return a1;
}

uint64_t sub_100035E4C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  return swift_bridgeObjectRelease(*(_QWORD *)(a1 + *(int *)(a2 + 32) + 8));
}

uint64_t sub_100035E94(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;

  v6 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = a3[5];
  v8 = a3[6];
  v9 = a1 + v7;
  v10 = a2 + v7;
  *(_QWORD *)v9 = *(_QWORD *)v10;
  *(_BYTE *)(v9 + 8) = *(_BYTE *)(v10 + 8);
  v11 = a1 + v8;
  v12 = a2 + v8;
  *(_QWORD *)v11 = *(_QWORD *)v12;
  *(_BYTE *)(v11 + 8) = *(_BYTE *)(v12 + 8);
  v13 = a3[7];
  v14 = a3[8];
  v15 = a1 + v13;
  v16 = a2 + v13;
  *(_QWORD *)v15 = *(_QWORD *)v16;
  *(_BYTE *)(v15 + 8) = *(_BYTE *)(v16 + 8);
  v17 = (_QWORD *)(a1 + v14);
  v18 = (_QWORD *)(a2 + v14);
  v19 = v18[1];
  *v17 = *v18;
  v17[1] = v19;
  *(_OWORD *)(a1 + a3[9]) = *(_OWORD *)(a2 + a3[9]);
  swift_bridgeObjectRetain(v19);
  return a1;
}

uint64_t sub_100035F54(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  _QWORD *v26;

  v6 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = *(_BYTE *)(v9 + 8);
  *(_QWORD *)v8 = *(_QWORD *)v9;
  *(_BYTE *)(v8 + 8) = v10;
  v11 = a3[6];
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = *(_BYTE *)(v13 + 8);
  *(_QWORD *)v12 = *(_QWORD *)v13;
  *(_BYTE *)(v12 + 8) = v14;
  v15 = a3[7];
  v16 = a1 + v15;
  v17 = a2 + v15;
  v18 = *(_BYTE *)(v17 + 8);
  *(_QWORD *)v16 = *(_QWORD *)v17;
  *(_BYTE *)(v16 + 8) = v18;
  v19 = a3[8];
  v20 = (_QWORD *)(a1 + v19);
  v21 = (_QWORD *)(a2 + v19);
  *v20 = *v21;
  v22 = v21[1];
  v23 = v20[1];
  v20[1] = v22;
  swift_bridgeObjectRetain(v22);
  swift_bridgeObjectRelease(v23);
  v24 = a3[9];
  v25 = (_QWORD *)(a1 + v24);
  v26 = (_QWORD *)(a2 + v24);
  *v25 = *v26;
  v25[1] = v26[1];
  return a1;
}

uint64_t sub_100036040(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v6 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = a3[5];
  v8 = a3[6];
  v9 = a1 + v7;
  v10 = a2 + v7;
  *(_QWORD *)v9 = *(_QWORD *)v10;
  *(_BYTE *)(v9 + 8) = *(_BYTE *)(v10 + 8);
  v11 = a1 + v8;
  v12 = a2 + v8;
  *(_QWORD *)v11 = *(_QWORD *)v12;
  *(_BYTE *)(v11 + 8) = *(_BYTE *)(v12 + 8);
  v13 = a3[7];
  v14 = a3[8];
  v15 = a1 + v13;
  v16 = a2 + v13;
  *(_QWORD *)v15 = *(_QWORD *)v16;
  *(_BYTE *)(v15 + 8) = *(_BYTE *)(v16 + 8);
  *(_OWORD *)(a1 + v14) = *(_OWORD *)(a2 + v14);
  *(_OWORD *)(a1 + a3[9]) = *(_OWORD *)(a2 + a3[9]);
  return a1;
}

uint64_t sub_1000360F4(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v6 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = a3[5];
  v8 = a3[6];
  v9 = a1 + v7;
  v10 = a2 + v7;
  *(_QWORD *)v9 = *(_QWORD *)v10;
  *(_BYTE *)(v9 + 8) = *(_BYTE *)(v10 + 8);
  v11 = a1 + v8;
  v12 = a2 + v8;
  *(_QWORD *)v11 = *(_QWORD *)v12;
  *(_BYTE *)(v11 + 8) = *(_BYTE *)(v12 + 8);
  v13 = a3[7];
  v14 = a3[8];
  v15 = a1 + v13;
  v16 = a2 + v13;
  *(_QWORD *)v15 = *(_QWORD *)v16;
  *(_BYTE *)(v15 + 8) = *(_BYTE *)(v16 + 8);
  v17 = (_QWORD *)(a1 + v14);
  v18 = (uint64_t *)(a2 + v14);
  v20 = *v18;
  v19 = v18[1];
  v21 = v17[1];
  *v17 = v20;
  v17[1] = v19;
  swift_bridgeObjectRelease(v21);
  *(_OWORD *)(a1 + a3[9]) = *(_OWORD *)(a2 + a3[9]);
  return a1;
}

uint64_t sub_1000361B8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000361C4);
}

uint64_t sub_1000361C4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;
  int v10;

  v6 = type metadata accessor for Date(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 32) + 8);
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  v10 = v9 - 1;
  if (v10 < 0)
    v10 = -1;
  return (v10 + 1);
}

uint64_t sub_100036250(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10003625C);
}

uint64_t sub_10003625C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = type metadata accessor for Date(0);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 32) + 8) = a2;
  return result;
}

uint64_t sub_1000362D8(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[6];

  result = type metadata accessor for Date(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(result - 8) + 64;
    v4[1] = "\t";
    v4[2] = "\t";
    v4[3] = "\t";
    v4[4] = &unk_100063220;
    v4[5] = &unk_100063238;
    swift_initStructMetadata(a1, 256, 6, v4, a1 + 16);
    return 0;
  }
  return result;
}

ValueMetadata *type metadata accessor for LightsCategoryTimelineProvider()
{
  return &type metadata for LightsCategoryTimelineProvider;
}

uint64_t sub_100036370(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10003637C);
}

uint64_t sub_10003637C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for LightsCategoryEntry(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(a1, a2, v4);
}

uint64_t sub_1000363B8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000363C4);
}

uint64_t sub_1000363C4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for LightsCategoryEntry(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(a1, a2, a2, v4);
}

uint64_t sub_100036404()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t OpaqueTypeConformance2;
  uint64_t v6;
  uint64_t v8;
  void *v9;
  unint64_t v10;
  unint64_t v11;

  v0 = sub_100003744(&qword_1000825E8);
  v1 = sub_100003744(&qword_1000825E0);
  v2 = sub_100003744(&qword_1000825D8);
  v3 = sub_100035CBC();
  v4 = sub_1000037D4();
  v8 = v2;
  v9 = &type metadata for String;
  v10 = v3;
  v11 = v4;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v8, &opaque type descriptor for <<opaque return type of WidgetConfiguration.configurationDisplayName<A>(_:)>>, 1);
  v8 = v1;
  v9 = &type metadata for String;
  v10 = OpaqueTypeConformance2;
  v11 = v4;
  v6 = swift_getOpaqueTypeConformance2(&v8, &opaque type descriptor for <<opaque return type of WidgetConfiguration.description<A>(_:)>>, 1);
  v8 = v0;
  v9 = (void *)v6;
  return swift_getOpaqueTypeConformance2(&v8, &opaque type descriptor for <<opaque return type of WidgetConfiguration.supportedFamilies(_:)>>, 1);
}

uint64_t sub_1000364CC()
{
  return sub_100015884(qword_100082738, type metadata accessor for LightsCategoryEntry, (uint64_t)&unk_10006328C);
}

uint64_t sub_1000364F8(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_10006BE24, 1);
}

uint64_t sub_100036510(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;

  v4 = *(_QWORD *)(type metadata accessor for TimelineProviderContext(0) - 8);
  v5 = (*(unsigned __int8 *)(v4 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v6 = v1[2];
  v7 = v1[3];
  v8 = v1[4];
  v9 = v1[5];
  v10 = (uint64_t)v1 + v5;
  v11 = (_QWORD *)((char *)v1 + ((*(_QWORD *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFFFF8));
  v12 = *v11;
  v13 = v11[1];
  v14 = (_QWORD *)swift_task_alloc(dword_10008275C);
  *(_QWORD *)(v2 + 16) = v14;
  *v14 = v2;
  v14[1] = sub_1000155DC;
  return sub_1000352DC(a1, v6, v7, v8, v9, v10, v12, v13);
}

uint64_t sub_1000365D0(uint64_t a1, int *a2)
{
  uint64_t v2;
  _QWORD *v4;
  uint64_t (*v6)(uint64_t);

  v6 = (uint64_t (*)(uint64_t))((char *)a2 + *a2);
  v4 = (_QWORD *)swift_task_alloc(a2[1]);
  *(_QWORD *)(v2 + 16) = v4;
  *v4 = v2;
  v4[1] = sub_100036634;
  return v6(a1);
}

uint64_t sub_100036634()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  swift_task_dealloc(*(_QWORD *)(*v0 + 16));
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t sub_100036680()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1000366A4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int *v4;
  _QWORD *v5;

  v4 = *(int **)(v1 + 16);
  v5 = (_QWORD *)swift_task_alloc(dword_10008276C);
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_1000155DC;
  return ((uint64_t (*)(uint64_t, int *))((char *)&dword_100082768 + dword_100082768))(a1, v4);
}

uint64_t sub_100036718(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;

  v4 = *(_QWORD *)(type metadata accessor for TimelineProviderContext(0) - 8);
  v5 = (*(unsigned __int8 *)(v4 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v6 = v1[2];
  v7 = v1[3];
  v8 = v1[4];
  v9 = v1[5];
  v10 = (uint64_t)v1 + v5;
  v11 = (_QWORD *)((char *)v1 + ((*(_QWORD *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFFFF8));
  v12 = *v11;
  v13 = v11[1];
  v14 = (_QWORD *)swift_task_alloc(dword_100082794);
  *(_QWORD *)(v2 + 16) = v14;
  *v14 = v2;
  v14[1] = sub_1000158C4;
  return sub_100034A28(a1, v6, v7, v8, v9, v10, v12, v13);
}

uint64_t sub_1000367D8()
{
  _QWORD v1[2];

  v1[0] = type metadata accessor for LightsCategoryView(255);
  v1[1] = sub_100015884(&qword_100082750, type metadata accessor for LightsCategoryView, (uint64_t)&unk_100062F84);
  return swift_getOpaqueTypeConformance2(v1, &opaque type descriptor for <<opaque return type of View.widgetURL(_:)>>, 1);
}

uint64_t sub_100036838(void *a1, uint64_t a2)
{
  id v3;
  char v4;
  Swift::Int v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  id v10;
  char v11;
  char v12;
  uint64_t v13;
  unint64_t v14;
  id v15;

  if ((a2 & 0xC000000000000001) != 0)
  {
    v3 = a1;
    v4 = __CocoaSet.contains(_:)();

    return v4 & 1;
  }
  if (!*(_QWORD *)(a2 + 16)
    || (v6 = NSObject._rawHashValue(seed:)(*(_QWORD *)(a2 + 40)),
        v7 = -1 << *(_BYTE *)(a2 + 32),
        v8 = v6 & ~v7,
        v9 = a2 + 56,
        ((*(_QWORD *)(a2 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFF8)) >> v8) & 1) == 0))
  {
LABEL_11:
    v12 = 0;
    return v12 & 1;
  }
  sub_1000038AC(0, (unint64_t *)&qword_100082010, HMCharacteristic_ptr);
  v10 = *(id *)(*(_QWORD *)(a2 + 48) + 8 * v8);
  v11 = static NSObject.== infix(_:_:)();

  if ((v11 & 1) == 0)
  {
    v13 = ~v7;
    v14 = (v8 + 1) & v13;
    if (((*(_QWORD *)(v9 + ((v14 >> 3) & 0xFFFFFFFFFFFFF8)) >> v14) & 1) != 0)
    {
      do
      {
        v15 = *(id *)(*(_QWORD *)(a2 + 48) + 8 * v14);
        v12 = static NSObject.== infix(_:_:)();

        if ((v12 & 1) != 0)
          break;
        v14 = (v14 + 1) & v13;
      }
      while (((*(_QWORD *)(v9 + ((v14 >> 3) & 0xFFFFFFFFFFFFF8)) >> v14) & 1) != 0);
      return v12 & 1;
    }
    goto LABEL_11;
  }
  v12 = 1;
  return v12 & 1;
}

uint64_t sub_100036994(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v5;

  v5[43] = a4;
  v5[44] = v4;
  v5[41] = a2;
  v5[42] = a3;
  v5[40] = a1;
  return swift_task_switch(sub_1000369B4, 0, 0);
}

uint64_t sub_1000369B4()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  id v4;
  id v5;
  NSObject *v6;
  os_log_type_t v7;
  _BOOL4 v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  _QWORD *v21;
  uint64_t v23;
  uint64_t v24;
  os_log_type_t v25;
  uint64_t v26;
  uint64_t v27;

  if (qword_1000816A0 != -1)
    swift_once(&qword_1000816A0, sub_100022604);
  v1 = *(_QWORD *)(v0 + 344);
  v2 = *(void **)(v0 + 328);
  v3 = type metadata accessor for Logger(0);
  *(_QWORD *)(v0 + 360) = sub_100003884(v3, (uint64_t)static DataModel.widgetLoggerLights);
  v4 = v2;
  swift_bridgeObjectRetain_n(v1, 2);
  v5 = v4;
  v6 = Logger.logObject.getter(v5);
  v7 = static os_log_type_t.default.getter();
  v8 = os_log_type_enabled(v6, v7);
  v9 = *(_QWORD *)(v0 + 344);
  if (v8)
  {
    v25 = v7;
    v10 = *(_QWORD *)(v0 + 336);
    v24 = *(_QWORD *)(v0 + 328);
    v11 = swift_slowAlloc(32, -1);
    v26 = swift_slowAlloc(96, -1);
    v27 = v26;
    *(_DWORD *)v11 = 136315650;
    swift_bridgeObjectRetain(v9);
    *(_QWORD *)(v0 + 296) = sub_10001DF04(v10, v9, &v27);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 296, v0 + 304, v11 + 4, v11 + 12);
    swift_bridgeObjectRelease_n(v9, 3);
    *(_WORD *)(v11 + 12) = 2080;
    *(_QWORD *)(v0 + 304) = sub_10001DF04(0xD00000000000001BLL, 0x8000000100068A80, &v27);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 304, v0 + 312, v11 + 14, v11 + 22);
    *(_WORD *)(v11 + 22) = 2080;
    if (v24)
    {
      v12 = objc_msgSend(v5, "name");
      v13 = static String._unconditionallyBridgeFromObjectiveC(_:)(v12);
      v15 = v14;

    }
    else
    {
      v15 = 0xE800000000000000;
      v13 = 0x656D6F68206C696ELL;
    }
    *(_QWORD *)(v0 + 312) = sub_10001DF04(v13, v15, &v27);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 312, v0 + 320, v11 + 24, v11 + 32);
    swift_bridgeObjectRelease(v15);

    swift_arrayDestroy(v26, 3, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v26, -1, -1);
    swift_slowDealloc(v11, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease_n(*(_QWORD *)(v0 + 344), 2);

  }
  if (*(_QWORD *)(v0 + 328))
  {
    v16 = qword_1000816B8;
    v17 = v5;
    if (v16 != -1)
      swift_once(&qword_1000816B8, sub_100037D28);
    v18 = qword_10008A700;
    v19 = dword_100081E74;
    v20 = v17;
    v21 = (_QWORD *)swift_task_alloc(v19);
    *(_QWORD *)(v0 + 368) = v21;
    *v21 = v0;
    v21[1] = sub_100036D08;
    return DataModel.reloadCharacteristics(matching:for:fetchId:)(v18, *(_QWORD *)(v0 + 328), *(_QWORD *)(v0 + 336), *(_QWORD *)(v0 + 344));
  }
  else
  {
    v23 = *(_QWORD *)(v0 + 320);
    *(_QWORD *)(v23 + 32) = 0;
    *(_OWORD *)v23 = 0u;
    *(_OWORD *)(v23 + 16) = 0u;
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_100036D08(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  void *v3;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 368);
  v3 = *(void **)(*(_QWORD *)v1 + 328);
  *(_QWORD *)(*(_QWORD *)v1 + 376) = a1;
  swift_task_dealloc(v2);

  return swift_task_switch(sub_100036D6C, 0, 0);
}

uint64_t sub_100036D6C()
{
  uint64_t v0;
  _OWORD *v1;
  void *v2;
  __int128 v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  double *v9;
  void *v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t result;
  uint64_t v25;
  uint64_t v26;
  NSObject *v27;
  os_log_type_t v28;
  _BOOL4 v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  id v43;
  id v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  _OWORD *v51;
  _OWORD *type;
  os_log_type_t typea;
  _QWORD *v54;
  uint64_t v55;
  uint64_t v56;
  void *v57;
  _QWORD *v58;
  _QWORD *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;

  v1 = (_OWORD *)(v0 + 72);
  v54 = (_QWORD *)(v0 + 232);
  v58 = (_QWORD *)(v0 + 272);
  v59 = (_QWORD *)(v0 + 240);
  v61 = swift_allocObject(&unk_10007E000, 24, 7);
  *(_QWORD *)(v61 + 16) = 0;
  if (qword_1000816C0 != -1)
    swift_once(&qword_1000816C0, sub_100037E6C);
  v51 = (_OWORD *)(v0 + 16);
  type = (_OWORD *)(v0 + 176);
  v46 = *(_QWORD *)(v0 + 344);
  v48 = *(_QWORD *)(v0 + 376);
  v56 = *(_QWORD *)(v0 + 336);
  v2 = *(void **)(v0 + 328);
  v3 = *(_OWORD *)&qword_10008A718;
  *v1 = xmmword_10008A708;
  *(_OWORD *)(v0 + 88) = v3;
  *(_OWORD *)(v0 + 104) = xmmword_10008A728;
  *(_QWORD *)(v0 + 120) = qword_10008A738;
  v44 = v2;
  v4 = objc_msgSend(v44, "accessories");
  v50 = sub_1000038AC(0, (unint64_t *)&qword_100081F40, HMAccessory_ptr);
  v5 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v4, v50);

  *(_OWORD *)(v0 + 192) = *v1;
  *(_OWORD *)(v0 + 208) = *(_OWORD *)(v0 + 88);
  v6 = *(_QWORD *)(v0 + 112);
  *(_QWORD *)(v0 + 224) = *(_QWORD *)(v0 + 104);
  v7 = *(_QWORD *)(v0 + 120);
  sub_1000038E4(v0 + 192);
  sub_10000390C((_QWORD *)(v0 + 208));
  sub_10000390C((_QWORD *)(v0 + 216));
  sub_10000390C((_QWORD *)(v0 + 224));
  sub_10000389C(v6, v7);
  v8 = 0;
  v9 = sub_10001FE8C(v5, v0 + 72);
  sub_100003934(v0 + 192);
  sub_10000395C((_QWORD *)(v0 + 208));
  sub_10000395C((_QWORD *)(v0 + 216));
  sub_10000395C((_QWORD *)(v0 + 224));
  sub_100003984(v6, v7);
  swift_bridgeObjectRelease(v5);

  swift_bridgeObjectRetain(v46);
  swift_bridgeObjectRetain(v48);
  v42 = (unint64_t)v9;
  v57 = sub_100037F14(0, (uint64_t)v9, v56, v46, v48, v61, "{%s} lightbulb '%s' cached value is: %@");
  swift_bridgeObjectRelease(v48);
  swift_bridgeObjectRelease(v46);
  if (qword_1000816C8 != -1)
    swift_once(&qword_1000816C8, sub_100037EB8);
  v45 = *(_QWORD *)(v0 + 344);
  v47 = *(_QWORD *)(v0 + 376);
  v49 = *(_QWORD *)(v0 + 336);
  v10 = *(void **)(v0 + 328);
  v11 = qword_10008A770;
  v13 = xmmword_10008A750;
  v12 = *(_OWORD *)&qword_10008A760;
  *v51 = xmmword_10008A740;
  *(_OWORD *)(v0 + 32) = v13;
  *(_OWORD *)(v0 + 48) = v12;
  *(_QWORD *)(v0 + 64) = v11;
  v43 = v10;
  v14 = objc_msgSend(v43, "accessories");
  v15 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v14, v50);

  *type = *v51;
  v16 = *(_QWORD *)(v0 + 32);
  *(_QWORD *)(v0 + 272) = *(_QWORD *)(v0 + 40);
  v17 = *(_QWORD *)(v0 + 48);
  v18 = *(_QWORD *)(v0 + 56);
  *(_QWORD *)(v0 + 232) = v16;
  *(_QWORD *)(v0 + 240) = v17;
  v19 = *(_QWORD *)(v0 + 64);
  sub_1000038E4((uint64_t)type);
  sub_10000390C(v54);
  sub_10000390C(v58);
  sub_10000390C(v59);
  sub_10000389C(v18, v19);
  v20 = (uint64_t)sub_10001FE8C(v15, (uint64_t)v51);
  sub_100003934((uint64_t)type);
  sub_10000395C(v54);
  sub_10000395C(v58);
  sub_10000395C(v59);
  sub_100003984(v18, v19);
  swift_bridgeObjectRelease(v15);

  swift_bridgeObjectRetain(v45);
  swift_bridgeObjectRetain(v47);
  v21 = sub_100037F14(0, v20, v49, v45, v47, v61, "{%s} outlet or switch light '%s' cached value is: %@");
  swift_bridgeObjectRelease_n(v47, 2);
  swift_bridgeObjectRelease(v45);
  v60 = (uint64_t)v21 + (_QWORD)v57;
  if (__OFADD__(v57, v21))
  {
    __break(1u);
    goto LABEL_19;
  }
  v8 = v42;
  if (v42 >> 62)
  {
LABEL_19:
    if (v8 < 0)
      v40 = v8;
    else
      v40 = v8 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v8);
    v22 = _CocoaArrayWrapper.endIndex.getter(v40);
    swift_bridgeObjectRelease(v8);
    goto LABEL_8;
  }
  v22 = *(_QWORD *)((v42 & 0xFFFFFFFFFFFFF8) + 0x10);
LABEL_8:
  swift_bridgeObjectRelease(v8);
  if ((unint64_t)v20 >> 62)
  {
    if (v20 < 0)
      v41 = v20;
    else
      v41 = v20 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v20);
    v23 = _CocoaArrayWrapper.endIndex.getter(v41);
    swift_bridgeObjectRelease(v20);
  }
  else
  {
    v23 = *(_QWORD *)((v20 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  result = swift_bridgeObjectRelease(v20);
  v25 = v22 + v23;
  if (__OFADD__(v22, v23))
  {
    __break(1u);
  }
  else
  {
    v26 = swift_bridgeObjectRetain_n(*(_QWORD *)(v0 + 344), 2);
    v27 = Logger.logObject.getter(v26);
    v28 = static os_log_type_t.default.getter();
    v29 = os_log_type_enabled(v27, v28);
    v30 = *(_QWORD *)(v0 + 344);
    if (v29)
    {
      v31 = *(_QWORD *)(v0 + 336);
      typea = v28;
      v32 = swift_slowAlloc(52, -1);
      v55 = swift_slowAlloc(32, -1);
      v62 = v55;
      *(_DWORD *)v32 = 136316162;
      swift_bridgeObjectRetain(v30);
      *(_QWORD *)(v0 + 248) = sub_10001DF04(v31, v30, &v62);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 248, v0 + 256, v32 + 4, v32 + 12);
      swift_retain(v61);
      swift_bridgeObjectRelease_n(v30, 3);
      *(_WORD *)(v32 + 12) = 2048;
      *(_QWORD *)(v0 + 256) = v57;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 256, v0 + 264, v32 + 14, v32 + 22);
      *(_WORD *)(v32 + 22) = 2048;
      *(_QWORD *)(v0 + 264) = v21;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 264, v58, v32 + 24, v32 + 32);
      *(_WORD *)(v32 + 32) = 2048;
      v33 = v61 + 16;
      swift_beginAccess(v61 + 16, v0 + 152, 0, 0);
      *(_QWORD *)(v0 + 280) = *(_QWORD *)(v61 + 16);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 280, v0 + 288, v32 + 34, v32 + 42);
      swift_release(v61);
      *(_WORD *)(v32 + 42) = 2048;
      *(_QWORD *)(v0 + 288) = v25;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 288, v0 + 296, v32 + 44, v32 + 52);
      _os_log_impl((void *)&_mh_execute_header, v27, typea, "{%s} lightbulbs on: %ld switches for lightbulbs on: %ld nonresponsive lights: %ld totalLightsInHome: %ld", (uint8_t *)v32, 0x34u);
      swift_arrayDestroy(v55, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v55, -1, -1);
      swift_slowDealloc(v32, -1, -1);

    }
    else
    {
      swift_bridgeObjectRelease_n(*(_QWORD *)(v0 + 344), 2);

      v33 = v61 + 16;
    }
    v34 = *(void **)(v0 + 328);
    if (v25 < 1)
    {
      swift_release(v61);

      v60 = 0;
      v38 = 0;
      v25 = 0;
      v35 = 0;
      v37 = 0;
    }
    else
    {
      v35 = sub_100037B1C(v60, v25);
      v37 = v36;

      swift_beginAccess(v33, v0 + 128, 0, 0);
      v38 = *(_QWORD *)(v61 + 16);
      swift_release(v61);
    }
    v39 = *(uint64_t **)(v0 + 320);
    *v39 = v60;
    v39[1] = v38;
    v39[2] = v25;
    v39[3] = v35;
    v39[4] = v37;
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  return result;
}

void sub_10003746C(_QWORD *a1, void **a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, const char *a7)
{
  void *v10;
  uint64_t v11;
  id v12;
  id v13;
  NSObject *v14;
  os_log_type_t v15;
  uint64_t v16;
  uint64_t v17;
  id v18;
  void *v19;
  id v20;
  id v21;
  unint64_t v22;
  unint64_t v23;
  id v24;
  id v25;
  uint64_t v26;
  NSString v27;
  uint64_t v28;
  id v29;
  id v30;
  uint64_t v31;
  id v32;
  unsigned int v33;
  uint64_t v34;
  NSObject *v35;
  os_log_type_t v36;
  uint64_t v37;
  void *v38;
  void *v39;
  _QWORD *v40;
  void *v41;
  uint64_t v42;
  uint64_t v43;
  void *v47;
  __int128 v48;
  __int128 v49;
  uint64_t v50;
  _BYTE v51[16];
  uint64_t v52;
  id v53;

  v10 = *a2;
  if (qword_1000816A0 != -1)
    swift_once(&qword_1000816A0, sub_100022604);
  v11 = type metadata accessor for Logger(0);
  sub_100003884(v11, (uint64_t)static DataModel.widgetLoggerLights);
  v12 = v10;
  swift_bridgeObjectRetain_n(a4, 2);
  v13 = v12;
  v14 = Logger.logObject.getter(v13);
  v15 = static os_log_type_t.default.getter();
  if (!os_log_type_enabled(v14, v15))
  {

    swift_bridgeObjectRelease_n(a4, 2);
    goto LABEL_18;
  }
  v42 = v11;
  v43 = a6;
  v16 = 0x6E776F6E6B6E75;
  v17 = swift_slowAlloc(32, -1);
  v40 = (_QWORD *)swift_slowAlloc(8, -1);
  v41 = (void *)swift_slowAlloc(64, -1);
  v53 = v41;
  *(_DWORD *)v17 = 136315650;
  swift_bridgeObjectRetain(a4);
  v50 = sub_10001DF04(a3, a4, (uint64_t *)&v53);
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v50, v51, v17 + 4, v17 + 12);
  swift_bridgeObjectRelease_n(a4, 3);
  *(_WORD *)(v17 + 12) = 2080;
  v18 = objc_msgSend(v13, "service");
  if (v18
    && (v19 = v18, v20 = objc_msgSend(v18, "accessory"), v19, v20))
  {
    v21 = objc_msgSend(v20, "name");

    v16 = static String._unconditionallyBridgeFromObjectiveC(_:)(v21);
    v23 = v22;

  }
  else
  {
    v23 = 0xE700000000000000;
  }
  v50 = sub_10001DF04(v16, v23, (uint64_t *)&v53);
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v50, v51, v17 + 14, v17 + 22);

  swift_bridgeObjectRelease(v23);
  *(_WORD *)(v17 + 22) = 2112;
  v24 = objc_msgSend(v13, "value");
  if (v24)
  {
    v25 = v24;
    _bridgeAnyObjectToAny(_:)(&v48, v24);
    swift_unknownObjectRelease(v25);
  }
  else
  {
    v48 = 0u;
    v49 = 0u;
  }
  v11 = v42;
  sub_1000184BC((uint64_t)&v48, (uint64_t)&v50);
  if (!v52)
  {
    sub_10000E534((uint64_t)&v50);
    goto LABEL_16;
  }
  v26 = sub_1000038AC(0, &qword_100081E18, NSObject_ptr);
  if ((swift_dynamicCast(&v47, &v50, (char *)&type metadata for Any + 8, v26, 6) & 1) == 0)
  {
LABEL_16:
    v27 = String._bridgeToObjectiveC()();
    goto LABEL_17;
  }
  v27 = v47;
LABEL_17:
  v50 = (uint64_t)v27;
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v50, v51, v17 + 24, v17 + 32);
  *v40 = v27;

  _os_log_impl((void *)&_mh_execute_header, v14, v15, a7, (uint8_t *)v17, 0x20u);
  v28 = sub_100003704((uint64_t *)&unk_100081FD0);
  swift_arrayDestroy(v40, 1, v28);
  swift_slowDealloc(v40, -1, -1);
  swift_arrayDestroy(v41, 2, (char *)&type metadata for Any + 8);
  swift_slowDealloc(v41, -1, -1);
  swift_slowDealloc(v17, -1, -1);

  a6 = v43;
LABEL_18:
  if ((sub_100036838(v13, a5) & 1) == 0)
  {
    v29 = objc_msgSend(v13, "value");
    if (v29)
    {
      v30 = v29;
      _bridgeAnyObjectToAny(_:)(&v48, v29);
      swift_unknownObjectRelease(v30);
    }
    else
    {
      v48 = 0u;
      v49 = 0u;
    }
    sub_1000184BC((uint64_t)&v48, (uint64_t)&v50);
    if (v52)
    {
      v31 = sub_1000038AC(0, &qword_100081E10, NSNumber_ptr);
      if ((swift_dynamicCast(&v53, &v50, (char *)&type metadata for Any + 8, v31, 6) & 1) != 0)
      {
        v32 = v53;
        v33 = objc_msgSend(v53, "BOOLValue");

        if (__OFADD__(*a1, v33))
          __break(1u);
        else
          *a1 += v33;
        return;
      }
    }
    else
    {
      sub_10000E534((uint64_t)&v50);
    }
  }
  swift_beginAccess(a6 + 16, &v50, 1, 0);
  if (__OFADD__(*(_QWORD *)(a6 + 16), 1))
  {
    __break(1u);
  }
  else
  {
    ++*(_QWORD *)(a6 + 16);
    if (qword_100081690 == -1)
      goto LABEL_29;
  }
  swift_once(&qword_100081690, sub_100022538);
LABEL_29:
  sub_100003884(v11, (uint64_t)static DataModel.widgetLoggerSecurity);
  swift_bridgeObjectRetain_n(a4, 2);
  v34 = swift_retain_n(a6, 2);
  v35 = Logger.logObject.getter(v34);
  v36 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v35, v36))
  {
    v37 = swift_slowAlloc(22, -1);
    v38 = (void *)swift_slowAlloc(32, -1);
    v53 = v38;
    *(_DWORD *)v37 = 136315394;
    swift_bridgeObjectRetain(a4);
    *(_QWORD *)&v48 = sub_10001DF04(a3, a4, (uint64_t *)&v53);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v48, (char *)&v48 + 8, v37 + 4, v37 + 12);
    swift_bridgeObjectRelease_n(a4, 3);
    *(_WORD *)(v37 + 12) = 2048;
    swift_beginAccess(a6 + 16, &v48, 0, 0);
    v39 = *(void **)(a6 + 16);
    swift_release(a6);
    v47 = v39;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v47, &v48, v37 + 14, v37 + 22);
    swift_release(a6);
    _os_log_impl((void *)&_mh_execute_header, v35, v36, "{%s} non-responsive light bulb count: %ld", (uint8_t *)v37, 0x16u);
    swift_arrayDestroy(v38, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v38, -1, -1);
    swift_slowDealloc(v37, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n(a4, 2);
    swift_release_n(a6, 2);
  }
}

uint64_t sub_100037B1C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _BYTE v21[16];

  v4 = type metadata accessor for Locale(0);
  __chkstk_darwin(v4);
  v6 = &v21[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v7 = type metadata accessor for String.LocalizationValue(0);
  __chkstk_darwin(v7);
  v9 = &v21[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  if (a1)
  {
    if (a2 != a1)
    {
      v14 = String.LocalizationValue.init(stringLiteral:)(0xD000000000000027, 0x8000000100068AA0);
      static Locale.current.getter(v14);
      v15 = String.init(localized:table:bundle:locale:comment:)(v9, 0x696C61636F4C4648, 0xED0000656C62617ALL, 0, v6, 0, 0, 256);
      v17 = v16;
      v18 = sub_100003704(&qword_1000825B0);
      v19 = swift_allocObject(v18, 72, 7);
      *(_OWORD *)(v19 + 16) = xmmword_1000607D0;
      *(_QWORD *)(v19 + 56) = &type metadata for Int;
      *(_QWORD *)(v19 + 64) = &protocol witness table for Int;
      *(_QWORD *)(v19 + 32) = a1;
      v13 = String.init(format:_:)(v15, v17, v19);
      swift_bridgeObjectRelease(v17);
      return v13;
    }
    v10 = 0x8000000100068A60;
    v11 = 0xD00000000000001ALL;
  }
  else
  {
    v11 = 0xD00000000000001BLL;
    v10 = 0x8000000100068AD0;
  }
  v12 = String.LocalizationValue.init(stringLiteral:)(v11, v10);
  static Locale.current.getter(v12);
  return String.init(localized:table:bundle:locale:comment:)(v9, 0x696C61636F4C4648, 0xED0000656C62617ALL, 0, v6, 0, 0, 256);
}

uint64_t sub_100037D28()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v0 = sub_100003704(&qword_1000817C0);
  v1 = swift_allocObject(v0, 144, 7);
  *(_OWORD *)(v1 + 16) = xmmword_1000633A0;
  if (qword_1000816C0 != -1)
    swift_once(&qword_1000816C0, sub_100037E6C);
  v2 = *((_QWORD *)&xmmword_10008A708 + 1);
  v3 = qword_10008A718;
  v4 = unk_10008A720;
  v5 = xmmword_10008A728;
  v6 = qword_10008A738;
  *(_QWORD *)(v1 + 32) = xmmword_10008A708;
  *(_QWORD *)(v1 + 40) = v2;
  *(_QWORD *)(v1 + 48) = v3;
  *(_QWORD *)(v1 + 56) = v4;
  *(_OWORD *)(v1 + 64) = v5;
  *(_QWORD *)(v1 + 80) = v6;
  swift_bridgeObjectRetain(v2);
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  sub_10000389C(*((uint64_t *)&v5 + 1), v6);
  if (qword_1000816C8 != -1)
    swift_once(&qword_1000816C8, sub_100037EB8);
  v7 = *((_QWORD *)&xmmword_10008A740 + 1);
  v8 = xmmword_10008A750;
  v9 = qword_10008A760;
  v10 = qword_10008A768;
  v11 = qword_10008A770;
  *(_QWORD *)(v1 + 88) = xmmword_10008A740;
  *(_QWORD *)(v1 + 96) = v7;
  *(_OWORD *)(v1 + 104) = v8;
  *(_QWORD *)(v1 + 120) = v9;
  *(_QWORD *)(v1 + 128) = v10;
  *(_QWORD *)(v1 + 136) = v11;
  qword_10008A700 = v1;
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRetain(*((_QWORD *)&v8 + 1));
  swift_bridgeObjectRetain(v9);
  return sub_10000389C(v10, v11);
}

void sub_100037E6C()
{
  *(_QWORD *)&xmmword_10008A708 = 0x6C7562746867694CLL;
  *((_QWORD *)&xmmword_10008A708 + 1) = 0xEA00000000007362;
  qword_10008A718 = (uint64_t)&off_10007AFC8;
  unk_10008A720 = &_swiftEmptyArrayStorage;
  *((_QWORD *)&xmmword_10008A728 + 1) = 0;
  qword_10008A738 = 0;
  *(_QWORD *)&xmmword_10008A728 = &off_10007AFF0;
}

void sub_100037EB8()
{
  *(_QWORD *)&xmmword_10008A740 = 0xD00000000000001CLL;
  *((_QWORD *)&xmmword_10008A740 + 1) = 0x8000000100068AF0;
  *(_QWORD *)&xmmword_10008A750 = &off_10007B018;
  *((_QWORD *)&xmmword_10008A750 + 1) = &off_10007B040;
  qword_10008A768 = 0;
  qword_10008A770 = 0;
  qword_10008A760 = (uint64_t)&off_10007B068;
}

uint64_t sub_100037F04()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

void *sub_100037F14(void *a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, const char *a7)
{
  uint64_t v7;
  uint64_t v8;
  void *v12;
  uint64_t v13;
  uint64_t i;
  id v15;
  uint64_t v16;
  uint64_t v17;
  void *v22;
  void *v23;

  v23 = a1;
  v8 = v7;
  v12 = a1;
  if ((unint64_t)a2 >> 62)
    goto LABEL_13;
  v13 = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain(a2);
  for (; v13; v13 = _CocoaArrayWrapper.endIndex.getter(v17))
  {
    for (i = 4; ; ++i)
    {
      v15 = (a2 & 0xC000000000000001) != 0
          ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(i - 4, a2)
          : *(id *)(a2 + 8 * i);
      v12 = v15;
      v16 = i - 3;
      if (__OFADD__(i - 4, 1))
        break;
      v22 = v15;
      sub_10003746C(&v23, &v22, a3, a4, a5, a6, a7);
      if (v8)
      {
        swift_bridgeObjectRelease(a2);

        return v12;
      }

      if (v16 == v13)
      {
        swift_bridgeObjectRelease(a2);
        return v23;
      }
    }
    __break(1u);
LABEL_13:
    if (a2 < 0)
      v17 = a2;
    else
      v17 = a2 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a2);
  }
  swift_bridgeObjectRelease(a2);
  return v12;
}

int *sub_100038054@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  double v13;
  uint64_t v14;
  uint64_t v15;
  int *result;
  uint64_t v17;
  _QWORD *v18;
  double *v19;
  _BYTE v20[16];

  v2 = type metadata accessor for Locale(0);
  __chkstk_darwin(v2);
  v4 = &v20[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v5 = type metadata accessor for String.LocalizationValue(0);
  v6 = __chkstk_darwin(v5);
  v8 = &v20[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  Date.init()(v6);
  v9 = String.LocalizationValue.init(stringLiteral:)(0xD00000000000001CLL, 0x8000000100068B70);
  static Locale.current.getter(v9);
  v10 = String.init(localized:table:bundle:locale:comment:)(v8, 0xD00000000000001DLL, 0x8000000100068680, 0, v4, 0, 0, 256);
  v12 = v11;
  v13 = TimelineProviderContext.displaySize.getter(v10);
  v15 = v14;
  result = (int *)type metadata accessor for SecurityAccessoryEntry(0);
  v17 = a1 + result[5];
  *(_QWORD *)v17 = v10;
  *(_QWORD *)(v17 + 8) = v12;
  strcpy((char *)(v17 + 16), "lock.open.fill");
  *(_BYTE *)(v17 + 31) = -18;
  *(_QWORD *)(v17 + 32) = 0x9380E29380E2;
  *(_QWORD *)(v17 + 40) = 0xA600000000000000;
  *(_BYTE *)(v17 + 48) = 0;
  v18 = (_QWORD *)(a1 + result[6]);
  *v18 = 0;
  v18[1] = 0;
  v19 = (double *)(a1 + result[7]);
  *v19 = v13;
  *((_QWORD *)v19 + 1) = v15;
  return result;
}

uint64_t sub_1000381E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;

  v5[16] = a4;
  v5[17] = a5;
  v5[14] = a2;
  v5[15] = a3;
  v5[13] = a1;
  v6 = type metadata accessor for Date(0);
  v5[18] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v5[19] = v7;
  v5[20] = swift_task_alloc((*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_100038248, 0, 0);
}

uint64_t sub_100038248()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  _BOOL4 v6;
  unint64_t v7;
  __objc2_prot_list *v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  id v12;
  void *v13;
  id v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  void *v21;
  id v22;
  void *v23;
  id v24;
  uint64_t v25;
  void *v26;
  Swift::String_optional v27;
  void *v28;
  uint64_t v29;
  id v30;
  NSObject *v31;
  os_log_type_t v32;
  _BOOL4 v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  id v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  void *v41;
  NSObject *v42;
  os_log_type_t v43;
  _BOOL4 v44;
  unint64_t v45;
  __objc2_prot_list *v46;
  uint64_t v47;
  uint64_t v48;
  id v49;
  void *v50;
  id v51;
  uint64_t v52;
  unint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  id v57;
  _QWORD *v58;
  void *v60;
  void *v61;
  uint64_t v62;
  uint64_t v63;
  id v64;
  id v65;
  uint64_t v66;
  uint64_t (*v67)(uint64_t);
  uint64_t v68;

  v66 = v0 + 80;
  if (qword_100081680 != -1)
    swift_once(&qword_100081680, sub_100022448);
  v1 = *(_QWORD *)(v0 + 136);
  v2 = *(void **)(v0 + 112);
  v3 = type metadata accessor for Logger(0);
  *(_QWORD *)(v0 + 168) = sub_100003884(v3, (uint64_t)static DataModel.widgetLogger);
  swift_bridgeObjectRetain_n(v1, 2);
  v4 = Logger.logObject.getter(v2);
  v5 = static os_log_type_t.default.getter();
  v6 = os_log_type_enabled(v4, v5);
  v7 = *(_QWORD *)(v0 + 136);
  v8 = &DataModel;
  if (v6)
  {
    v9 = *(_QWORD *)(v0 + 128);
    v10 = *(void **)(v0 + 112);
    v11 = swift_slowAlloc(32, -1);
    v62 = swift_slowAlloc(96, -1);
    v68 = v62;
    *(_DWORD *)v11 = 136315650;
    swift_bridgeObjectRetain(v7);
    *(_QWORD *)(v0 + 80) = sub_10001DF04(v9, v7, &v68);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v66, v0 + 88, v11 + 4, v11 + 12);
    swift_bridgeObjectRelease_n(v7, 3);
    *(_WORD *)(v11 + 12) = 2080;
    *(_QWORD *)(v0 + 88) = sub_10001DF04(0xD00000000000001ELL, 0x8000000100068630, &v68);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 88, v0 + 96, v11 + 14, v11 + 22);
    *(_WORD *)(v11 + 22) = 2080;
    v12 = objc_msgSend(v10, "accessory");
    if (v12
      && (v13 = v12, v14 = objc_msgSend(v12, "identifier"), v13, v14))
    {
      v15 = static String._unconditionallyBridgeFromObjectiveC(_:)(v14);
      v17 = v16;

      v18 = v15;
      v8 = &DataModel;
      v19 = v62;
    }
    else
    {
      v17 = 0xE400000000000000;
      v8 = &DataModel;
      v19 = v62;
      v18 = 1819047278;
    }
    v21 = *(void **)(v0 + 112);
    *(_QWORD *)(v0 + 96) = sub_10001DF04(v18, v17, &v68);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 96, v0 + 104, v11 + 24, v11 + 32);
    swift_bridgeObjectRelease(v17);

    swift_arrayDestroy(v19, 3, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v19, -1, -1);
    swift_slowDealloc(v11, -1, -1);

  }
  else
  {
    v20 = *(void **)(v0 + 112);
    swift_bridgeObjectRelease_n(*(_QWORD *)(v0 + 136), 2);

  }
  if (qword_100081670 != -1)
    swift_once(&qword_100081670, sub_100021008);
  v22 = objc_msgSend(*(id *)(v0 + 112), (SEL)v8[366].count, v62);
  v23 = v22;
  if (v22)
  {
    v24 = objc_msgSend(v22, "identifier");

    if (v24)
    {
      v25 = static String._unconditionallyBridgeFromObjectiveC(_:)(v24);
      v23 = v26;

    }
    else
    {
      v25 = 0;
      v23 = 0;
    }
  }
  else
  {
    v25 = 0;
  }
  v27.value._countAndFlagsBits = v25;
  v27.value._object = v23;
  v28 = (void *)DataModel.accessoryFromAnyHome(for:)(v27);
  *(_QWORD *)(v0 + 176) = v28;
  swift_bridgeObjectRelease(v23);
  v29 = *(_QWORD *)(v0 + 136);
  if (v28)
  {
    swift_bridgeObjectRetain_n(v29, 2);
    v30 = v28;
    v31 = Logger.logObject.getter(v30);
    v32 = static os_log_type_t.default.getter();
    v33 = os_log_type_enabled(v31, v32);
    v34 = *(_QWORD *)(v0 + 136);
    if (v33)
    {
      v35 = *(_QWORD *)(v0 + 128);
      v36 = swift_slowAlloc(22, -1);
      v64 = (id)swift_slowAlloc(64, -1);
      v68 = (uint64_t)v64;
      *(_DWORD *)v36 = 136315394;
      swift_bridgeObjectRetain(v34);
      *(_QWORD *)(v0 + 64) = sub_10001DF04(v35, v34, &v68);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 64, v0 + 72, v36 + 4, v36 + 12);
      swift_bridgeObjectRelease_n(v34, 3);
      *(_WORD *)(v36 + 12) = 2080;
      v37 = objc_msgSend(v30, "name");
      v38 = static String._unconditionallyBridgeFromObjectiveC(_:)(v37);
      v40 = v39;

      *(_QWORD *)(v0 + 72) = sub_10001DF04(v38, v40, &v68);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 72, v66, v36 + 14, v36 + 22);
      swift_bridgeObjectRelease(v40);

      _os_log_impl((void *)&_mh_execute_header, v31, v32, "...{%s} found homeAccessory: %s", (uint8_t *)v36, 0x16u);
      swift_arrayDestroy(v64, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v64, -1, -1);
      swift_slowDealloc(v36, -1, -1);
    }
    else
    {
      swift_bridgeObjectRelease_n(*(_QWORD *)(v0 + 136), 2);

    }
    v56 = unk_1000830DC;
    v67 = (uint64_t (*)(uint64_t))((char *)&dword_1000830D8 + dword_1000830D8);
    v57 = v30;
    v58 = (_QWORD *)swift_task_alloc(v56);
    *(_QWORD *)(v0 + 184) = v58;
    *v58 = v0;
    v58[1] = sub_1000389FC;
    return v67((uint64_t)v28);
  }
  else
  {
    v41 = *(void **)(v0 + 112);
    swift_bridgeObjectRetain_n(v29, 2);
    v42 = Logger.logObject.getter(v41);
    v43 = static os_log_type_t.default.getter();
    v44 = os_log_type_enabled(v42, v43);
    v45 = *(_QWORD *)(v0 + 136);
    if (v44)
    {
      v46 = v8;
      v47 = *(_QWORD *)(v0 + 128);
      v65 = *(id *)(v0 + 112);
      v48 = swift_slowAlloc(22, -1);
      v63 = swift_slowAlloc(64, -1);
      v68 = v63;
      *(_DWORD *)v48 = 136315394;
      swift_bridgeObjectRetain(v45);
      *(_QWORD *)(v0 + 16) = sub_10001DF04(v47, v45, &v68);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 16, v0 + 24, v48 + 4, v48 + 12);
      swift_bridgeObjectRelease_n(v45, 3);
      *(_WORD *)(v48 + 12) = 2080;
      v49 = objc_msgSend(v65, (SEL)v46[366].count);
      if (v49
        && (v50 = v49, v51 = objc_msgSend(v49, "identifier"), v50, v51))
      {
        v52 = static String._unconditionallyBridgeFromObjectiveC(_:)(v51);
        v54 = v53;

        v55 = v63;
      }
      else
      {
        v54 = 0xE400000000000000;
        v55 = v63;
        v52 = 1819047278;
      }
      v61 = *(void **)(v0 + 112);
      *(_QWORD *)(v0 + 24) = sub_10001DF04(v52, v54, &v68);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 24, v0 + 32, v48 + 14, v48 + 22);
      swift_bridgeObjectRelease(v54);

      _os_log_impl((void *)&_mh_execute_header, v42, v43, "...{%s} did NOT find HMAccessory for %s", (uint8_t *)v48, 0x16u);
      swift_arrayDestroy(v55, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v55, -1, -1);
      swift_slowDealloc(v48, -1, -1);
    }
    else
    {
      v60 = *(void **)(v0 + 112);
      swift_bridgeObjectRelease_n(*(_QWORD *)(v0 + 136), 2);

    }
    sub_100038054(*(_QWORD *)(v0 + 104));
    swift_task_dealloc(*(_QWORD *)(v0 + 160));
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_1000389FC(uint64_t a1, char a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;

  v3 = *v2;
  v5 = *(void **)(*v2 + 176);
  v4 = *(_QWORD *)(*v2 + 184);
  *(_QWORD *)(v3 + 192) = a1;
  *(_BYTE *)(v3 + 200) = a2;
  swift_task_dealloc(v4);

  return swift_task_switch(sub_100038A60, 0, 0);
}

uint64_t sub_100038A60()
{
  uint64_t v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  char v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char v15;
  void *v16;
  uint64_t v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  void *v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  id v30;
  void *v31;
  id v32;
  uint64_t v33;
  uint64_t v34;
  BOOL v35;
  char v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  double v42;
  uint64_t v43;
  uint64_t v44;
  int *v45;
  uint64_t v46;
  _QWORD *v47;
  double *v48;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;

  v1 = swift_bridgeObjectRetain_n(*(_QWORD *)(v0 + 136), 2);
  v2 = Logger.logObject.getter(v1);
  v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    v54 = v0 + 56;
    v4 = *(_BYTE *)(v0 + 200);
    v5 = *(_QWORD *)(v0 + 192);
    v7 = *(_QWORD *)(v0 + 128);
    v6 = *(_QWORD *)(v0 + 136);
    v8 = swift_slowAlloc(42, -1);
    v56 = swift_slowAlloc(96, -1);
    v58 = v56;
    *(_DWORD *)v8 = 136315906;
    swift_bridgeObjectRetain(v6);
    *(_QWORD *)(v0 + 32) = sub_10001DF04(v7, v6, &v58);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 32, v0 + 40, v8 + 4, v8 + 12);
    swift_bridgeObjectRelease_n(v6, 3);
    *(_WORD *)(v8 + 12) = 2048;
    if ((v4 & 1) != 0)
      v9 = -1;
    else
      v9 = v5;
    *(_QWORD *)(v0 + 40) = v9;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 40, v0 + 48, v8 + 14, v8 + 22);
    *(_WORD *)(v8 + 22) = 2080;
    v10 = sub_100053454(v5, v4 & 1);
    v12 = v11;
    *(_QWORD *)(v0 + 48) = sub_10001DF04(v10, v11, &v58);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 48, v54, v8 + 24, v8 + 32);
    swift_bridgeObjectRelease(v12);
    *(_WORD *)(v8 + 32) = 2080;
    if ((v4 & 1) != 0)
    {
LABEL_9:
      v14 = 0x8000000100068B10;
      v13 = 0xD000000000000022;
    }
    else
    {
      v13 = 0x65706F2E6B636F6CLL;
      v14 = 0xEE006C6C69662E6ELL;
      switch(*(_QWORD *)(v0 + 192))
      {
        case 0:
          break;
        case 1:
          v13 = 0x6C69662E6B636F6CLL;
          v14 = 0xE90000000000006CLL;
          break;
        case 2:
          v13 = 0xD000000000000027;
          v14 = 0x8000000100068B40;
          break;
        case 3:
          v14 = 0x8000000100068B10;
          v13 = 0xD000000000000022;
          break;
        default:
          goto LABEL_9;
      }
    }
    *(_QWORD *)(v0 + 56) = sub_10001DF04(v13, v14, &v58);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v54, v0 + 64, v8 + 34, v8 + 42);
    swift_bridgeObjectRelease(v14);
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "...{%s} got value: %ld, statusString: %s, iconName %s)", (uint8_t *)v8, 0x2Au);
    swift_arrayDestroy(v56, 3, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v56, -1, -1);
    swift_slowDealloc(v8, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease_n(*(_QWORD *)(v0 + 136), 2);
  }

  v15 = *(_BYTE *)(v0 + 200);
  v16 = *(void **)(v0 + 176);
  Date.init()(v17);
  v18 = objc_msgSend(v16, "name");
  v19 = static String._unconditionallyBridgeFromObjectiveC(_:)(v18);
  v21 = v20;

  v22 = *(_QWORD *)(v0 + 192);
  if ((v15 & 1) != 0)
  {
LABEL_14:
    v24 = 0x8000000100068B10;
    v23 = 0xD000000000000022;
  }
  else
  {
    v23 = 0x65706F2E6B636F6CLL;
    v24 = 0xEE006C6C69662E6ELL;
    switch(v22)
    {
      case 0:
        break;
      case 1:
        v23 = 0x6C69662E6B636F6CLL;
        v24 = 0xE90000000000006CLL;
        break;
      case 2:
        v23 = 0xD000000000000027;
        v24 = 0x8000000100068B40;
        break;
      default:
        goto LABEL_14;
    }
  }
  v25 = *(void **)(v0 + 112);
  v26 = *(_BYTE *)(v0 + 200) & 1;
  v27 = sub_100053454(*(_QWORD *)(v0 + 192), *(_BYTE *)(v0 + 200) & 1);
  v29 = v28;
  v30 = objc_msgSend(v25, "accessory");
  v31 = v30;
  v55 = v21;
  v57 = v19;
  v52 = v24;
  v53 = v23;
  v50 = v29;
  v51 = v27;
  if (v30)
  {
    v32 = objc_msgSend(v30, "identifier");

    if (v32)
    {
      v31 = (void *)static String._unconditionallyBridgeFromObjectiveC(_:)(v32);
      v34 = v33;

      goto LABEL_20;
    }
    v31 = 0;
  }
  v34 = 0;
LABEL_20:
  if (v26)
    v35 = 0;
  else
    v35 = v22 == 1;
  v36 = v35;
  v37 = *(void **)(v0 + 176);
  v38 = *(_QWORD *)(v0 + 152);
  v39 = *(_QWORD *)(v0 + 160);
  v40 = *(_QWORD *)(v0 + 144);
  v41 = *(_QWORD *)(v0 + 104);
  v42 = TimelineProviderContext.displaySize.getter(v30);
  v44 = v43;

  (*(void (**)(uint64_t, uint64_t, uint64_t))(v38 + 32))(v41, v39, v40);
  v45 = (int *)type metadata accessor for SecurityAccessoryEntry(0);
  v46 = v41 + v45[5];
  *(_QWORD *)v46 = v57;
  *(_QWORD *)(v46 + 8) = v55;
  *(_QWORD *)(v46 + 16) = v53;
  *(_QWORD *)(v46 + 24) = v52;
  *(_QWORD *)(v46 + 32) = v51;
  *(_QWORD *)(v46 + 40) = v50;
  *(_BYTE *)(v46 + 48) = v36;
  v47 = (_QWORD *)(v41 + v45[6]);
  *v47 = v31;
  v47[1] = v34;
  v48 = (double *)(v41 + v45[7]);
  *v48 = v42;
  *((_QWORD *)v48 + 1) = v44;
  swift_task_dealloc(*(_QWORD *)(v0 + 160));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

Swift::Bool __swiftcall HMHome.shouldShowNoAccessOutsideOfSchedule(forRestrictedUser:)(HMUser forRestrictedUser)
{
  void *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  id v11;
  id v12;
  void *v13;
  id v14;
  void *v15;
  void *v16;
  char *v17;
  id v18;
  Class v19;
  void (*v20)(char *, uint64_t);
  Class v21;
  uint64_t v22;
  objc_class *v23;
  id v24;
  id v25;
  void *v26;
  id v27;
  objc_class *v28;
  id v29;
  id v30;
  id v31;
  NSObject *v32;
  os_log_type_t v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  id v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  id v42;
  Class v43;
  id v44;
  id v45;
  id v46;
  char *v47;
  unint64_t v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  Class v52;
  os_log_t v53;
  uint64_t v54;
  Class v55;
  _QWORD *v56;
  uint64_t v57;
  objc_class *v58;
  id v59;
  objc_class *v60;
  id v61;
  NSObject *v62;
  os_log_type_t v63;
  uint64_t v64;
  id v65;
  uint64_t v66;
  unint64_t v67;
  unint64_t v68;
  id v69;
  _QWORD *v70;
  uint64_t v71;
  Class v72;
  uint64_t v73;
  objc_class *v74;
  id v75;
  id v76;
  objc_class *v77;
  id v78;
  id v79;
  NSObject *v80;
  os_log_type_t v81;
  int v82;
  uint64_t v83;
  id v84;
  id v85;
  uint64_t v86;
  unint64_t v87;
  unint64_t v88;
  id v89;
  _QWORD *v90;
  id v91;
  uint64_t v92;
  Class v93;
  void *v95;
  id v96;
  id v97;
  id v98;
  void (*v99)(char *, Class);
  os_log_t v100;
  int v101;
  char *v102;
  objc_class *v103;
  _QWORD *v104;
  _QWORD *v105;
  Class isa;
  uint64_t v107;
  Class v108;

  v3 = type metadata accessor for TimeZone(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v95 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for Date(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)&v95 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = objc_msgSend(v1, "homeAccessControlForUser:", forRestrictedUser.super.isa);
  v12 = objc_msgSend(v11, "restrictedGuestAccessSettings");
  if (!v12)
  {
    if (qword_100081680 != -1)
      swift_once(&qword_100081680, sub_100022448);
    v57 = type metadata accessor for Logger(0);
    sub_100003884(v57, (uint64_t)static DataModel.widgetLogger);
    v58 = forRestrictedUser.super.isa;
    v59 = v11;
    v60 = v58;
    v61 = v59;
    v62 = Logger.logObject.getter(v61);
    v63 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v62, v63))
    {
      v64 = swift_slowAlloc(32, -1);
      v105 = (_QWORD *)swift_slowAlloc(8, -1);
      isa = (Class)swift_slowAlloc(64, -1);
      v108 = isa;
      *(_DWORD *)v64 = 136315650;
      v107 = sub_10001DF04(0xD000000000000037, 0x8000000100068B90, (uint64_t *)&v108);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v107, &v108, v64 + 4, v64 + 12);
      *(_WORD *)(v64 + 12) = 2080;
      v65 = -[objc_class debugDescription](v60, "debugDescription");
      v66 = static String._unconditionallyBridgeFromObjectiveC(_:)(v65);
      v68 = v67;

      v107 = sub_10001DF04(v66, v68, (uint64_t *)&v108);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v107, &v108, v64 + 14, v64 + 22);

      swift_bridgeObjectRelease(v68);
      *(_WORD *)(v64 + 22) = 2112;
      v107 = (uint64_t)v61;
      v69 = v61;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v107, &v108, v64 + 24, v64 + 32);
      v70 = v105;
      *v105 = v61;

      _os_log_impl((void *)&_mh_execute_header, v62, v63, "%s: user = %s. Returning false because restrictedGuestAccessSettings is nil. accessControl = %@", (uint8_t *)v64, 0x20u);
      v71 = sub_100003704((uint64_t *)&unk_100081FD0);
      swift_arrayDestroy(v70, 1, v71);
      swift_slowDealloc(v70, -1, -1);
      v72 = isa;
      swift_arrayDestroy(isa, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v72, -1, -1);
      swift_slowDealloc(v64, -1, -1);

    }
    else
    {

    }
    goto LABEL_18;
  }
  v13 = v12;
  isa = forRestrictedUser.super.isa;
  v14 = objc_msgSend(v12, "guestAccessSchedule");
  if (!v14)
  {
    if (qword_100081680 != -1)
      swift_once(&qword_100081680, sub_100022448);
    v73 = type metadata accessor for Logger(0);
    sub_100003884(v73, (uint64_t)static DataModel.widgetLogger);
    v74 = isa;
    v75 = v11;
    v76 = v13;
    v77 = v74;
    v78 = v75;
    v79 = v76;
    v80 = Logger.logObject.getter(v79);
    v81 = static os_log_type_t.default.getter();
    v82 = v81;
    if (os_log_type_enabled(v80, v81))
    {
      v83 = swift_slowAlloc(42, -1);
      v104 = (_QWORD *)swift_slowAlloc(16, -1);
      isa = (Class)swift_slowAlloc(64, -1);
      v108 = isa;
      *(_DWORD *)v83 = 136315906;
      v105 = v13;
      v107 = sub_10001DF04(0xD000000000000037, 0x8000000100068B90, (uint64_t *)&v108);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v107, &v108, v83 + 4, v83 + 12);
      *(_WORD *)(v83 + 12) = 2080;
      v84 = -[objc_class debugDescription](v77, "debugDescription");
      LODWORD(v103) = v82;
      v85 = v84;
      v86 = static String._unconditionallyBridgeFromObjectiveC(_:)(v84);
      v88 = v87;

      v107 = sub_10001DF04(v86, v88, (uint64_t *)&v108);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v107, &v108, v83 + 14, v83 + 22);

      swift_bridgeObjectRelease(v88);
      *(_WORD *)(v83 + 22) = 2112;
      v107 = (uint64_t)v78;
      v89 = v78;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v107, &v108, v83 + 24, v83 + 32);
      v90 = v104;
      *v104 = v78;

      *(_WORD *)(v83 + 32) = 2112;
      v107 = (uint64_t)v79;
      v91 = v79;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v107, &v108, v83 + 34, v83 + 42);
      v90[1] = v105;

      _os_log_impl((void *)&_mh_execute_header, v80, (os_log_type_t)v103, "%s: user = %s. Returning false because rgAccessSchedule is nil. accessControl = %@. rgAccessSettings = %@.", (uint8_t *)v83, 0x2Au);
      v92 = sub_100003704((uint64_t *)&unk_100081FD0);
      swift_arrayDestroy(v90, 2, v92);
      swift_slowDealloc(v90, -1, -1);
      v93 = isa;
      swift_arrayDestroy(isa, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v93, -1, -1);
      swift_slowDealloc(v83, -1, -1);

    }
    else
    {

    }
LABEL_18:
    LOBYTE(v21) = 0;
    return (char)v21;
  }
  v15 = v14;
  v105 = v13;
  v104 = (_QWORD *)objc_opt_self(HMRestrictedGuestHomeAccessSchedule);
  static Date.now.getter();
  v16 = v1;
  v17 = v6;
  v21 = Date._bridgeToObjectiveC()().super.isa;
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  v18 = objc_msgSend(v16, "timeZone");
  static TimeZone._unconditionallyBridgeFromObjectiveC(_:)();

  v19 = TimeZone._bridgeToObjectiveC()().super.isa;
  v20 = *(void (**)(char *, uint64_t))(v4 + 8);
  v102 = v17;
  v103 = (objc_class *)v3;
  v20(v17, v3);
  LODWORD(v17) = objc_msgSend(v104, "isDate:withinAllowedTimeForSchedule:forHomeInTimeZone:", v21, v15, v19);

  LODWORD(v21) = v17 ^ 1;
  if (qword_100081680 != -1)
    swift_once(&qword_100081680, sub_100022448);
  v22 = type metadata accessor for Logger(0);
  sub_100003884(v22, (uint64_t)static DataModel.widgetLogger);
  v23 = isa;
  v24 = v11;
  v25 = v15;
  v26 = v15;
  v27 = v16;
  v28 = v23;
  v29 = v24;
  v30 = v25;
  v31 = v27;
  v32 = Logger.logObject.getter(v31);
  v33 = static os_log_type_t.default.getter();
  v34 = v33;
  if (os_log_type_enabled(v32, v33))
  {
    v35 = swift_slowAlloc(58, -1);
    v97 = v30;
    v36 = v35;
    isa = (Class)swift_slowAlloc(16, -1);
    v104 = (_QWORD *)swift_slowAlloc(96, -1);
    v108 = (Class)v104;
    *(_DWORD *)v36 = 136316418;
    v101 = v34;
    v107 = sub_10001DF04(0xD000000000000037, 0x8000000100068B90, (uint64_t *)&v108);
    v99 = (void (*)(char *, Class))v20;
    v100 = v32;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v107, &v108, v36 + 4, v36 + 12);
    *(_WORD *)(v36 + 12) = 2080;
    v37 = -[objc_class debugDescription](v28, "debugDescription");
    v38 = static String._unconditionallyBridgeFromObjectiveC(_:)(v37);
    v95 = v26;
    v96 = v31;
    v39 = v38;
    v41 = v40;

    v107 = sub_10001DF04(v39, v41, (uint64_t *)&v108);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v107, &v108, v36 + 14, v36 + 22);

    swift_bridgeObjectRelease(v41);
    *(_WORD *)(v36 + 22) = 1024;
    LODWORD(v107) = (_DWORD)v21;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v107, (char *)&v107 + 4, v36 + 24, v36 + 28);
    *(_WORD *)(v36 + 28) = 2112;
    v107 = (uint64_t)v29;
    v42 = v29;
    v98 = v42;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v107, &v108, v36 + 30, v36 + 38);
    v43 = isa;
    *(_QWORD *)isa = v29;

    *(_WORD *)(v36 + 38) = 2112;
    v107 = (uint64_t)v97;
    v44 = v97;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v107, &v108, v36 + 40, v36 + 48);
    *((_QWORD *)v43 + 1) = v95;

    *(_WORD *)(v36 + 48) = 2080;
    v45 = v96;
    v46 = objc_msgSend(v96, "timeZone");
    v47 = v102;
    static TimeZone._unconditionallyBridgeFromObjectiveC(_:)();

    v48 = sub_10003A004();
    LOBYTE(v37) = (_BYTE)v21;
    v21 = v103;
    v49 = dispatch thunk of CustomStringConvertible.description.getter(v103, v48);
    v51 = v50;
    v52 = v21;
    LOBYTE(v21) = (_BYTE)v37;
    v99(v47, v52);
    v107 = sub_10001DF04(v49, v51, (uint64_t *)&v108);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v107, &v108, v36 + 50, v36 + 58);

    swift_bridgeObjectRelease(v51);
    v53 = v100;
    _os_log_impl((void *)&_mh_execute_header, v100, (os_log_type_t)v101, "%s: user = %s. Returning %{BOOL}d. accessControl = %@. guestAccessSchedule = %@. timeZone = %s", (uint8_t *)v36, 0x3Au);
    v54 = sub_100003704((uint64_t *)&unk_100081FD0);
    v55 = isa;
    swift_arrayDestroy(isa, 2, v54);
    swift_slowDealloc(v55, -1, -1);
    v56 = v104;
    swift_arrayDestroy(v104, 3, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v56, -1, -1);
    swift_slowDealloc(v36, -1, -1);

  }
  else
  {

  }
  return (char)v21;
}

Swift::Bool __swiftcall HMHome.shouldShowNoAccessAwayFromHome(forRestrictedUser:)(HMUser forRestrictedUser)
{
  void *v1;
  void *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  id v8;
  uint64_t v9;
  objc_class *v10;
  id v11;
  objc_class *v12;
  id v13;
  NSObject *v14;
  int v15;
  __objc2_prot_list *v16;
  uint64_t v17;
  objc_class **v18;
  objc_class *v19;
  id v20;
  void *v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  os_log_t v25;
  uint64_t v26;
  objc_class **v27;
  uint64_t v28;
  objc_class *v29;
  id v30;
  objc_class *v31;
  id v32;
  NSObject *v33;
  os_log_type_t v34;
  uint64_t v35;
  objc_class **v36;
  objc_class *v37;
  id v38;
  uint64_t v39;
  uint64_t v40;
  id v41;
  Swift::Bool result;
  uint64_t v43;
  objc_class **v44;
  uint64_t v45;
  os_log_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;

  v2 = v1;
  v4 = type metadata accessor for Logger(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v43 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = objc_msgSend(v2, "homeAccessControlForUser:", forRestrictedUser.super.isa);
  if ((objc_msgSend(v8, "isRestrictedGuest") & 1) != 0)
  {
    if (qword_100081680 != -1)
      swift_once(&qword_100081680, sub_100022448);
    v9 = sub_100003884(v4, (uint64_t)static DataModel.widgetLogger);
    (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, v9, v4);
    v10 = forRestrictedUser.super.isa;
    v11 = v2;
    v12 = v10;
    v13 = v11;
    v14 = Logger.logObject.getter(v13);
    v15 = static os_log_type_t.default.getter();
    v16 = &DataModel;
    if (!os_log_type_enabled(v14, (os_log_type_t)v15))
    {

      (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
      goto LABEL_12;
    }
    HIDWORD(v43) = v15;
    v46 = v14;
    v47 = v5;
    v48 = (uint64_t)v8;
    v17 = swift_slowAlloc(32, -1);
    v18 = (objc_class **)swift_slowAlloc(8, -1);
    v45 = swift_slowAlloc(64, -1);
    v50 = v45;
    *(_DWORD *)v17 = 136315650;
    v49 = sub_10001DF04(0xD000000000000032, 0x8000000100068BD0, &v50);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v49, &v50, v17 + 4, v17 + 12);
    *(_WORD *)(v17 + 12) = 2112;
    v49 = (uint64_t)v12;
    v19 = v12;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v49, &v50, v17 + 14, v17 + 22);
    v44 = v18;
    *v18 = v12;

    *(_WORD *)(v17 + 22) = 2080;
    v20 = (id)HMStringFromHomeLocation(objc_msgSend(v13, "homeLocationStatus"));
    if (v20)
    {
      v21 = v20;
      v22 = static String._unconditionallyBridgeFromObjectiveC(_:)(v20);
      v24 = v23;

      v49 = sub_10001DF04(v22, v24, &v50);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v49, &v50, v17 + 24, v17 + 32);

      swift_bridgeObjectRelease(v24);
      v25 = v46;
      _os_log_impl((void *)&_mh_execute_header, v46, BYTE4(v43), "%s: user = %@. homeLocationStatus = %s", (uint8_t *)v17, 0x20u);
      v26 = sub_100003704((uint64_t *)&unk_100081FD0);
      v27 = v44;
      swift_arrayDestroy(v44, 1, v26);
      swift_slowDealloc(v27, -1, -1);
      v28 = v45;
      swift_arrayDestroy(v45, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v28, -1, -1);
      swift_slowDealloc(v17, -1, -1);

      (*(void (**)(char *, uint64_t))(v47 + 8))(v7, v4);
      v8 = (id)v48;
      v16 = &DataModel;
LABEL_12:
      v41 = objc_msgSend(v13, (SEL)v16[415].count);

      return v41 == (id)2;
    }

    __break(1u);
  }
  else
  {
    if (qword_100081680 != -1)
      swift_once(&qword_100081680, sub_100022448);
    sub_100003884(v4, (uint64_t)static DataModel.widgetLogger);
    v29 = forRestrictedUser.super.isa;
    v30 = v8;
    v31 = v29;
    v32 = v30;
    v33 = Logger.logObject.getter(v32);
    v34 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v33, v34))
    {
      v35 = swift_slowAlloc(32, -1);
      v36 = (objc_class **)swift_slowAlloc(16, -1);
      v48 = swift_slowAlloc(32, -1);
      v50 = v48;
      *(_DWORD *)v35 = 136315650;
      v49 = sub_10001DF04(0xD000000000000032, 0x8000000100068BD0, &v50);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v49, &v50, v35 + 4, v35 + 12);
      *(_WORD *)(v35 + 12) = 2112;
      v49 = (uint64_t)v31;
      v37 = v31;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v49, &v50, v35 + 14, v35 + 22);
      *v36 = v31;

      *(_WORD *)(v35 + 22) = 2112;
      v49 = (uint64_t)v32;
      v38 = v32;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v49, &v50, v35 + 24, v35 + 32);
      v36[1] = (objc_class *)v32;

      _os_log_impl((void *)&_mh_execute_header, v33, v34, "%s: user = %@. Returning false because isRestrictedGuest is NO. accessControl = %@", (uint8_t *)v35, 0x20u);
      v39 = sub_100003704((uint64_t *)&unk_100081FD0);
      swift_arrayDestroy(v36, 2, v39);
      swift_slowDealloc(v36, -1, -1);
      v40 = v48;
      swift_arrayDestroy(v48, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v40, -1, -1);
      swift_slowDealloc(v35, -1, -1);

    }
    else
    {

    }
    return 0;
  }
  return result;
}

unint64_t sub_10003A004()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000827B0;
  if (!qword_1000827B0)
  {
    v1 = type metadata accessor for TimeZone(255);
    result = swift_getWitnessTable(&protocol conformance descriptor for TimeZone, v1);
    atomic_store(result, (unint64_t *)&qword_1000827B0);
  }
  return result;
}

ValueMetadata *type metadata accessor for SecurityAccessoryWidget()
{
  return &type metadata for SecurityAccessoryWidget;
}

uint64_t sub_10003A05C(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_10006BED4, 1);
}

int *sub_10003A06C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  unint64_t *v3;
  Swift::String v4;
  void *object;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14[2];

  v3 = &qword_100082000;
  if (__OFADD__(qword_1000827C8, 1))
  {
    __break(1u);
  }
  else
  {
    ++qword_1000827C8;
    _StringGuts.grow(_:)(21);
    swift_bridgeObjectRelease(0xE000000000000000);
    v14[0] = 0xD000000000000013;
    v14[1] = 0x8000000100068C90;
    v13 = qword_1000827C8;
    v4._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
    object = v4._object;
    String.append(_:)(v4);
    swift_bridgeObjectRelease(object);
    v1 = 0xD000000000000013;
    v3 = (unint64_t *)0x8000000100068C90;
    if (qword_100081680 == -1)
      goto LABEL_3;
  }
  swift_once(&qword_100081680, sub_100022448);
LABEL_3:
  v6 = type metadata accessor for Logger(0);
  sub_100003884(v6, (uint64_t)static DataModel.widgetLogger);
  v7 = swift_bridgeObjectRetain(v3);
  v8 = Logger.logObject.getter(v7);
  v9 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v8, v9))
  {
    v10 = swift_slowAlloc(22, -1);
    v11 = swift_slowAlloc(64, -1);
    v14[0] = v11;
    *(_DWORD *)v10 = 136315394;
    swift_bridgeObjectRetain(v3);
    v13 = sub_10001DF04(v1, (unint64_t)v3, v14);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v13, v14, v10 + 4, v10 + 12);
    swift_bridgeObjectRelease_n(v3, 3);
    *(_WORD *)(v10 + 12) = 2080;
    v13 = sub_10001DF04(0xD000000000000010, 0x8000000100067EA0, v14);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v13, v14, v10 + 14, v10 + 22);
    swift_arrayDestroy(v11, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v11, -1, -1);
    swift_slowDealloc(v10, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n(v3, 2);
  }
  type metadata accessor for GarageDoorSecurityDataFetcher();
  return sub_10002560C(a1);
}

uint64_t sub_10003A2F0(void *a1, char *a2, void (*a3)(_QWORD), uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  Swift::String v21;
  void *object;
  uint64_t v23;
  uint64_t v24;
  NSObject *v25;
  os_log_type_t v26;
  _BOOL4 v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  uint64_t v34;
  NSObject *v35;
  os_log_type_t v36;
  uint8_t *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  NSObject *v41;
  os_log_type_t v42;
  uint8_t *v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  double v52;
  uint64_t v53;
  uint64_t v54;
  _QWORD *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  char *v67;
  uint64_t v68;
  void *v69;
  char *v70;
  id v71;
  uint64_t v72;
  uint64_t v73;
  void (*v74)(_QWORD);
  char *v75;
  uint64_t v76;
  char *v77;
  uint64_t v78;
  char *v79;
  char *v80;
  uint64_t v81;
  uint64_t v82;
  void *v83;
  char *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  unint64_t v89;

  v86 = a4;
  v7 = type metadata accessor for TimelineProviderContext(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(_QWORD *)(v8 + 64);
  __chkstk_darwin(v7);
  v10 = sub_100003704(&qword_100081DB0);
  __chkstk_darwin(v10);
  v12 = (char *)&v73 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for Locale(0);
  __chkstk_darwin(v13);
  v15 = (char *)&v73 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for String.LocalizationValue(0);
  __chkstk_darwin(v16);
  v84 = (char *)&v73 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = type metadata accessor for SecurityAccessoryEntry(0);
  v19 = __chkstk_darwin(v18);
  if (__OFADD__(qword_1000827C8, 1))
  {
    __break(1u);
  }
  else
  {
    v75 = v15;
    v76 = v19;
    v77 = (char *)&v73 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
    v79 = v12;
    v80 = (char *)&v73 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
    v81 = v8;
    v82 = v7;
    v83 = a1;
    ++qword_1000827C8;
    v88 = 0;
    v89 = 0xE000000000000000;
    _StringGuts.grow(_:)(21);
    swift_bridgeObjectRelease(v89);
    v88 = 0xD000000000000013;
    v89 = 0x8000000100068C90;
    v87 = qword_1000827C8;
    v21._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
    object = v21._object;
    String.append(_:)(v21);
    swift_bridgeObjectRelease(object);
    v7 = v88;
    v15 = (char *)v89;
    if (qword_100081680 == -1)
      goto LABEL_3;
  }
  swift_once(&qword_100081680, sub_100022448);
LABEL_3:
  v23 = type metadata accessor for Logger(0);
  sub_100003884(v23, (uint64_t)static DataModel.widgetLogger);
  v24 = swift_bridgeObjectRetain_n(v15, 2);
  v25 = Logger.logObject.getter(v24);
  v26 = static os_log_type_t.default.getter();
  v27 = os_log_type_enabled(v25, v26);
  v78 = v9;
  v85 = v7;
  if (v27)
  {
    v28 = swift_slowAlloc(22, -1);
    v74 = a3;
    v29 = v28;
    v30 = swift_slowAlloc(64, -1);
    v88 = v30;
    *(_DWORD *)v29 = 136315394;
    swift_bridgeObjectRetain(v15);
    v87 = sub_10001DF04(v7, (unint64_t)v15, &v88);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v87, &v88, v29 + 4, v29 + 12);
    swift_bridgeObjectRelease_n(v15, 3);
    *(_WORD *)(v29 + 12) = 2080;
    v87 = sub_10001DF04(0xD00000000000001FLL, 0x8000000100068DA0, &v88);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v87, &v88, v29 + 14, v29 + 22);
    swift_arrayDestroy(v30, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v30, -1, -1);
    v31 = v29;
    a3 = v74;
    swift_slowDealloc(v31, -1, -1);

  }
  else
  {

    v32 = swift_bridgeObjectRelease_n(v15, 2);
  }
  v33 = TimelineProviderContext.isPreview.getter(v32);
  v34 = swift_bridgeObjectRetain(v15);
  if ((v33 & 1) != 0)
  {
    v35 = Logger.logObject.getter(v34);
    v36 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v35, v36))
    {
      v37 = (uint8_t *)swift_slowAlloc(12, -1);
      v38 = swift_slowAlloc(32, -1);
      v88 = v38;
      *(_DWORD *)v37 = 136315138;
      swift_bridgeObjectRetain(v15);
      v87 = sub_10001DF04(v85, (unint64_t)v15, &v88);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v87, &v88, v37 + 4, v37 + 12);
      swift_bridgeObjectRelease_n(v15, 3);
      _os_log_impl((void *)&_mh_execute_header, v35, v36, "...{%s} context is PREVIEW", v37, 0xCu);
      swift_arrayDestroy(v38, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v38, -1, -1);
      swift_slowDealloc(v37, -1, -1);

    }
    else
    {

      v39 = swift_bridgeObjectRelease_n(v15, 2);
    }
    v45 = (uint64_t)v77;
    Date.init()(v39);
    v46 = v84;
    v47 = String.LocalizationValue.init(stringLiteral:)(0xD00000000000001FLL, 0x8000000100068C70);
    v48 = v75;
    static Locale.current.getter(v47);
    v49 = String.init(localized:table:bundle:locale:comment:)(v46, 0x696C61636F4C4648, 0xED0000656C62617ALL, 0, v48, 0, 0, 256);
    v51 = v50;
    v52 = TimelineProviderContext.displaySize.getter(v49);
    v53 = v76;
    v54 = v45 + *(int *)(v76 + 20);
    *(_QWORD *)v54 = v49;
    *(_QWORD *)(v54 + 8) = v51;
    strcpy((char *)(v54 + 16), "lock.open.fill");
    *(_BYTE *)(v54 + 31) = -18;
    *(_QWORD *)(v54 + 32) = 0x9380E29380E2;
    *(_QWORD *)(v54 + 40) = 0xA600000000000000;
    *(_BYTE *)(v54 + 48) = 0;
    v55 = (_QWORD *)(v45 + *(int *)(v53 + 24));
    *v55 = 0;
    v55[1] = 0;
    v56 = v45 + *(int *)(v53 + 28);
    *(double *)v56 = v52;
    *(_QWORD *)(v56 + 8) = v57;
    a3(v45);
    return sub_10003D78C(v45);
  }
  else
  {
    v84 = a2;
    v40 = swift_bridgeObjectRetain(v15);
    v41 = Logger.logObject.getter(v40);
    v42 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v41, v42))
    {
      v43 = (uint8_t *)swift_slowAlloc(12, -1);
      v44 = swift_slowAlloc(32, -1);
      v88 = v44;
      *(_DWORD *)v43 = 136315138;
      swift_bridgeObjectRetain(v15);
      v87 = sub_10001DF04(v85, (unint64_t)v15, &v88);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v87, &v88, v43 + 4, v43 + 12);
      swift_bridgeObjectRelease_n(v15, 3);
      _os_log_impl((void *)&_mh_execute_header, v41, v42, "...{%s} context is SNAPSHOT", v43, 0xCu);
      swift_arrayDestroy(v44, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v44, -1, -1);
      swift_slowDealloc(v43, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n(v15, 2);
    }
    v59 = v82;
    v60 = type metadata accessor for TaskPriority(0);
    v61 = (uint64_t)v79;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v60 - 8) + 56))(v79, 1, 1, v60);
    v63 = v80;
    v62 = v81;
    (*(void (**)(char *, char *, uint64_t))(v81 + 16))(v80, v84, v59);
    v64 = *(unsigned __int8 *)(v62 + 80);
    v65 = (v64 + 56) & ~v64;
    v66 = (v78 + v65 + 7) & 0xFFFFFFFFFFFFFFF8;
    v67 = (char *)swift_allocObject(&unk_10007E090, v66 + 16, v64 | 7);
    *((_QWORD *)v67 + 2) = 0;
    *((_QWORD *)v67 + 3) = 0;
    *((_QWORD *)v67 + 4) = a3;
    v68 = v86;
    v69 = v83;
    *((_QWORD *)v67 + 5) = v86;
    *((_QWORD *)v67 + 6) = v69;
    (*(void (**)(char *, char *, uint64_t))(v62 + 32))(&v67[v65], v63, v59);
    v70 = &v67[v66];
    *(_QWORD *)v70 = v85;
    *((_QWORD *)v70 + 1) = v15;
    swift_retain(v68);
    v71 = v69;
    v72 = sub_1000341A0(v61, (uint64_t)&unk_1000828E8, (uint64_t)v67);
    return swift_release(v72);
  }
}

uint64_t sub_10003AAD0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v8;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v16;

  v8[2] = a4;
  v8[3] = a5;
  v12 = type metadata accessor for SecurityAccessoryEntry(0);
  v13 = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v12 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v8[4] = v13;
  v14 = (_QWORD *)swift_task_alloc(dword_1000828D4);
  v8[5] = v14;
  *v14 = v8;
  v14[1] = sub_10003AB74;
  return sub_10003AC10(v13, a6, a7, a8, v16);
}

uint64_t sub_10003AB74()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 40));
  return swift_task_switch(sub_10003ABC8, 0, 0);
}

uint64_t sub_10003ABC8()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 32);
  (*(void (**)(uint64_t))(v0 + 16))(v1);
  sub_10003D78C(v1);
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10003AC10(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v5[13] = a1;
  v11 = type metadata accessor for Date(0);
  v5[14] = v11;
  v12 = *(_QWORD *)(v11 - 8);
  v5[15] = v12;
  v5[16] = swift_task_alloc((*(_QWORD *)(v12 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = (_QWORD *)swift_task_alloc(dword_1000828DC);
  v5[17] = v13;
  *v13 = v5;
  v13[1] = sub_10003ACC4;
  v13[5] = a4;
  v13[6] = a5;
  v13[3] = a2;
  v13[4] = a3;
  v13[2] = a1;
  return swift_task_switch(sub_10003BFD4, 0, 0);
}

uint64_t sub_10003ACC4()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 136));
  return swift_task_switch(sub_10003AD18, 0, 0);
}

uint64_t sub_10003AD18()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  void **v4;
  void *v5;
  __objc2_prot_list *v6;
  id v7;
  id v8;
  Swift::Bool v9;
  uint64_t v10;
  id v11;
  NSObject *v12;
  os_log_type_t v13;
  uint64_t v14;
  uint64_t v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void **v30;
  void *v31;
  id v32;
  id v33;
  Swift::Bool v34;
  uint64_t v35;
  id v36;
  NSObject *v37;
  os_log_type_t v38;
  uint64_t v39;
  id v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  uint64_t type;
  uint64_t v53;

  v1 = v0 + 40;
  v2 = v0 + 80;
  if (qword_100081670 != -1)
    swift_once(&qword_100081670, sub_100021008);
  v3 = &unk_10008A000;
  v4 = (void **)(qword_10008A648 + OBJC_IVAR____TtC20HomeWidgetLockScreen9DataModel_currentHome);
  swift_beginAccess(qword_10008A648 + OBJC_IVAR____TtC20HomeWidgetLockScreen9DataModel_currentHome, v0 + 16, 0, 0);
  v5 = *v4;
  v6 = &DataModel;
  if (*v4)
  {
    v7 = v5;
    v8 = objc_msgSend(v7, "currentUser");
    v9 = HMHome.shouldShowNoAccessOutsideOfSchedule(forRestrictedUser:)((HMUser)v8);

    if (v9)
    {
      if (qword_100081680 != -1)
        swift_once(&qword_100081680, sub_100022448);
      v10 = type metadata accessor for Logger(0);
      sub_100003884(v10, (uint64_t)static DataModel.widgetLogger);
      v11 = v7;
      v12 = Logger.logObject.getter(v11);
      v13 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v12, v13))
      {
        v14 = *(_QWORD *)(v0 + 112);
        v48 = *(_QWORD *)(v0 + 128);
        v49 = *(_QWORD *)(v0 + 120);
        v15 = swift_slowAlloc(32, -1);
        v47 = (_QWORD *)swift_slowAlloc(8, -1);
        v50 = swift_slowAlloc(64, -1);
        v53 = v50;
        *(_DWORD *)v15 = 136315650;
        *(_QWORD *)(v0 + 80) = sub_10001DF04(0xD000000000000027, 0x8000000100068D40, &v53);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 80, v0 + 88, v15 + 4, v15 + 12);
        *(_WORD *)(v15 + 12) = 2112;
        *(_QWORD *)(v0 + 88) = v11;
        v16 = v11;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 88, v0 + 96, v15 + 14, v15 + 22);
        *v47 = v5;

        *(_WORD *)(v15 + 22) = 2080;
        static Date.now.getter();
        v17 = sub_100015884((unint64_t *)&qword_100082150, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
        v18 = dispatch thunk of CustomStringConvertible.description.getter(v14, v17);
        v20 = v19;
        v21 = v14;
        v1 = v0 + 40;
        (*(void (**)(uint64_t, uint64_t))(v49 + 8))(v48, v21);
        v22 = v18;
        v2 = v0 + 80;
        *(_QWORD *)(v0 + 96) = sub_10001DF04(v22, v20, &v53);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 96, v0 + 104, v15 + 24, v15 + 32);
        v23 = v20;
        v6 = &DataModel;
        swift_bridgeObjectRelease(v23);
        _os_log_impl((void *)&_mh_execute_header, v12, v13, "{%s} Displaying No Access for RG in home %@ because %s is outside of allowed schedule.", (uint8_t *)v15, 0x20u);
        v24 = sub_100003704((uint64_t *)&unk_100081FD0);
        swift_arrayDestroy(v47, 1, v24);
        swift_slowDealloc(v47, -1, -1);
        swift_arrayDestroy(v50, 2, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v50, -1, -1);
        v25 = v15;
        v3 = (_QWORD *)&unk_10008A000;
        swift_slowDealloc(v25, -1, -1);
      }
      else
      {

      }
      v26 = *(_QWORD *)(v0 + 104);

      v27 = v26 + *(int *)(type metadata accessor for SecurityAccessoryEntry(0) + 20);
      v28 = *(_QWORD *)(v27 + 24);
      v29 = *(_QWORD *)(v27 + 40);
      swift_bridgeObjectRelease(*(_QWORD *)(v27 + 8));
      swift_bridgeObjectRelease(v28);
      swift_bridgeObjectRelease(v29);
      *(_QWORD *)v27 = 0xD000000000000027;
      *(_QWORD *)(v27 + 8) = 0x8000000100068D70;
      *(_QWORD *)(v27 + 16) = 0x69662E6B636F6C63;
      *(_QWORD *)(v27 + 24) = 0xEA00000000006C6CLL;
      *(_QWORD *)(v27 + 32) = 0;
      *(_QWORD *)(v27 + 40) = 0xE000000000000000;
      *(_BYTE *)(v27 + 48) = 1;
    }
    else
    {

    }
  }
  v30 = (void **)(v3[201] + OBJC_IVAR____TtC20HomeWidgetLockScreen9DataModel_currentHome);
  swift_beginAccess(v30, v1, 0, 0);
  v31 = *v30;
  if (*v30)
  {
    v32 = v31;
    v33 = objc_msgSend(v32, (SEL)v6[399].count);
    v34 = HMHome.shouldShowNoAccessAwayFromHome(forRestrictedUser:)((HMUser)v33);

    if (v34)
    {
      if (qword_100081680 != -1)
        swift_once(&qword_100081680, sub_100022448);
      v35 = type metadata accessor for Logger(0);
      sub_100003884(v35, (uint64_t)static DataModel.widgetLogger);
      v36 = v32;
      v37 = Logger.logObject.getter(v36);
      v38 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v37, v38))
      {
        v39 = swift_slowAlloc(22, -1);
        v51 = (_QWORD *)swift_slowAlloc(8, -1);
        type = swift_slowAlloc(32, -1);
        v53 = type;
        *(_DWORD *)v39 = 136315394;
        *(_QWORD *)(v0 + 64) = sub_10001DF04(0xD000000000000027, 0x8000000100068D40, &v53);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 64, v0 + 72, v39 + 4, v39 + 12);
        *(_WORD *)(v39 + 12) = 2112;
        *(_QWORD *)(v0 + 72) = v36;
        v40 = v36;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 72, v2, v39 + 14, v39 + 22);
        *v51 = v31;

        _os_log_impl((void *)&_mh_execute_header, v37, v38, "{%s} Displaying No Access for RG in home %@ because away from home.", (uint8_t *)v39, 0x16u);
        v41 = sub_100003704((uint64_t *)&unk_100081FD0);
        swift_arrayDestroy(v51, 1, v41);
        swift_slowDealloc(v51, -1, -1);
        swift_arrayDestroy(type, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(type, -1, -1);
        swift_slowDealloc(v39, -1, -1);
      }
      else
      {

      }
      v42 = *(_QWORD *)(v0 + 104);

      v43 = v42 + *(int *)(type metadata accessor for SecurityAccessoryEntry(0) + 20);
      v44 = *(_QWORD *)(v43 + 24);
      v45 = *(_QWORD *)(v43 + 40);
      swift_bridgeObjectRelease(*(_QWORD *)(v43 + 8));
      swift_bridgeObjectRelease(v44);
      swift_bridgeObjectRelease(v45);
      *(_QWORD *)v43 = 0xD00000000000002DLL;
      *(_QWORD *)(v43 + 8) = 0x8000000100068CF0;
      *(_QWORD *)(v43 + 16) = 0xD000000000000012;
      *(_QWORD *)(v43 + 24) = 0x8000000100068D20;
      *(_QWORD *)(v43 + 32) = 0;
      *(_QWORD *)(v43 + 40) = 0xE000000000000000;
      *(_BYTE *)(v43 + 48) = 1;
    }
    else
    {

    }
  }
  swift_task_dealloc(*(_QWORD *)(v0 + 128));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_10003B3E8(void *a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  void *v14;
  id v15;
  void *v16;
  void *v17;
  Swift::String_optional v18;
  unint64_t v19;
  void *v20;
  Swift::String v21;
  void *object;
  unint64_t v23;
  Swift::String v24;
  unint64_t v25;
  uint64_t v26;
  id v27;
  uint64_t v28;
  void *v29;
  void *v30;
  Swift::String v31;
  uint64_t v32;
  uint64_t v33;
  NSObject *v34;
  os_log_type_t v35;
  _BOOL4 v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  NSObject *v43;
  os_log_type_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  unint64_t v51;
  id v52;
  NSString v53;
  NSString v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  char *v63;
  char *v64;
  char *v65;
  id v66;
  uint64_t v67;
  uint64_t v68;
  void *v69;
  uint64_t v70;
  uint64_t v71;
  id v72;
  uint64_t v73;
  char *v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  char *v78;
  uint64_t v79;
  unint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;

  v8 = type metadata accessor for TimelineProviderContext(0);
  v76 = *(_QWORD *)(v8 - 8);
  v77 = v8;
  v9 = *(_QWORD *)(v76 + 64);
  __chkstk_darwin(v8);
  v10 = (char *)&v68 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_100003704(&qword_100081DB0);
  __chkstk_darwin(v11);
  v75 = (char *)&v68 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = objc_msgSend(a1, "accessory");
  v14 = v13;
  if (v13)
  {
    v15 = objc_msgSend(v13, "identifier");

    if (v15)
    {
      v14 = (void *)static String._unconditionallyBridgeFromObjectiveC(_:)(v15);
      v17 = v16;

      goto LABEL_6;
    }
    v14 = 0;
  }
  v17 = 0;
LABEL_6:
  if (qword_100081670 != -1)
    swift_once(&qword_100081670, sub_100021008);
  v71 = (uint64_t)v14;
  v18.value._countAndFlagsBits = (uint64_t)v14;
  v18.value._object = v17;
  v19 = (unint64_t)DataModel.accessoryFromAnyHome(for:)(v18);
  if (__OFADD__(qword_1000827C8, 1))
  {
    __break(1u);
LABEL_33:
    swift_once(&qword_100081680, sub_100022448);
    goto LABEL_13;
  }
  v20 = (void *)v19;
  v80 = (unint64_t)v17;
  v73 = v9;
  v74 = (char *)&v68 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  ++qword_1000827C8;
  v82 = 0;
  v83 = 0xE000000000000000;
  _StringGuts.grow(_:)(21);
  swift_bridgeObjectRelease(v83);
  v82 = 0xD000000000000013;
  v83 = 0x8000000100068C90;
  v81 = qword_1000827C8;
  v21._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
  object = v21._object;
  String.append(_:)(v21);
  swift_bridgeObjectRelease(object);
  v23 = v83;
  swift_bridgeObjectRetain(v83);
  v24._countAndFlagsBits = 32;
  v24._object = (void *)0xE100000000000000;
  String.append(_:)(v24);
  swift_bridgeObjectRelease(v23);
  v26 = v82;
  v25 = v83;
  if (v20)
  {
    v27 = objc_msgSend(v20, "name");
    v28 = static String._unconditionallyBridgeFromObjectiveC(_:)(v27);
    v30 = v29;

  }
  else
  {
    v28 = 0xD000000000000011;
    v30 = (void *)0x8000000100068CB0;
  }
  v72 = v20;
  v82 = v26;
  v83 = v25;
  swift_bridgeObjectRetain(v25);
  v31._countAndFlagsBits = v28;
  v31._object = v30;
  String.append(_:)(v31);
  swift_bridgeObjectRelease(v30);
  swift_bridgeObjectRelease(v25);
  v10 = (char *)v83;
  v79 = v82;
  if (qword_100081680 != -1)
    goto LABEL_33;
LABEL_13:
  v32 = type metadata accessor for Logger(0);
  sub_100003884(v32, (uint64_t)static DataModel.widgetLogger);
  v33 = swift_bridgeObjectRetain_n(v10, 2);
  v34 = Logger.logObject.getter(v33);
  v35 = static os_log_type_t.default.getter();
  v36 = os_log_type_enabled(v34, v35);
  v78 = v10;
  if (v36)
  {
    v37 = swift_slowAlloc(22, -1);
    v38 = swift_slowAlloc(64, -1);
    v82 = v38;
    *(_DWORD *)v37 = 136315394;
    v69 = a4;
    v70 = a2;
    swift_bridgeObjectRetain(v10);
    v81 = sub_10001DF04(v79, (unint64_t)v10, &v82);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v81, &v82, v37 + 4, v37 + 12);
    swift_bridgeObjectRelease_n(v10, 3);
    *(_WORD *)(v37 + 12) = 2080;
    v81 = sub_10001DF04(0xD00000000000001FLL, 0x8000000100068CD0, &v82);
    a4 = v69;
    a2 = v70;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v81, &v82, v37 + 14, v37 + 22);
    swift_arrayDestroy(v38, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v38, -1, -1);
    swift_slowDealloc(v37, -1, -1);

  }
  else
  {

    v39 = swift_bridgeObjectRelease_n(v10, 2);
  }
  v40 = v80;
  if ((TimelineProviderContext.isPreview.getter(v39) & 1) != 0)
  {
    swift_bridgeObjectRelease(v40);
  }
  else
  {
    swift_bridgeObjectRetain_n(v40, 2);
    v41 = (unint64_t)v78;
    v42 = swift_bridgeObjectRetain_n(v78, 2);
    v43 = Logger.logObject.getter(v42);
    v44 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v43, v44))
    {
      v45 = swift_slowAlloc(32, -1);
      v46 = swift_slowAlloc(96, -1);
      v82 = v46;
      *(_DWORD *)v45 = 136315650;
      swift_bridgeObjectRetain(v41);
      v81 = sub_10001DF04(v79, v41, &v82);
      v69 = a1;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v81, &v82, v45 + 4, v45 + 12);
      swift_bridgeObjectRelease_n(v41, 3);
      v70 = a2;
      *(_WORD *)(v45 + 12) = 2080;
      v81 = sub_10001DF04(0xD00000000000002ELL, 0x8000000100068C10, &v82);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v81, &v82, v45 + 14, v45 + 22);
      *(_WORD *)(v45 + 22) = 2080;
      if (v80)
        v47 = v71;
      else
        v47 = 7104878;
      v48 = a3;
      if (v80)
        v49 = v80;
      else
        v49 = 0xE300000000000000;
      swift_bridgeObjectRetain(v80);
      v50 = v47;
      v40 = v80;
      v81 = sub_10001DF04(v50, v49, &v82);
      a1 = v69;
      a2 = v70;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v81, &v82, v45 + 24, v45 + 32);
      swift_bridgeObjectRelease_n(v40, 2);
      v51 = v49;
      a3 = v48;
      swift_bridgeObjectRelease(v51);
      _os_log_impl((void *)&_mh_execute_header, v43, v44, "...{%s} notifying homed that '%s:%s' is active", (uint8_t *)v45, 0x20u);
      swift_arrayDestroy(v46, 3, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v46, -1, -1);
      swift_slowDealloc(v45, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n(v40, 2);
      swift_bridgeObjectRelease_n(v41, 2);
    }
    v52 = objc_msgSend((id)objc_opt_self(NSDistributedNotificationCenter), "defaultCenter");
    v53 = String._bridgeToObjectiveC()();
    if (v40)
    {
      v54 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(v40);
    }
    else
    {
      v54 = 0;
    }
    objc_msgSend(v52, "postNotificationName:object:", v53, v54);

  }
  v55 = type metadata accessor for TaskPriority(0);
  v56 = (uint64_t)v75;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v55 - 8) + 56))(v75, 1, 1, v55);
  v58 = v76;
  v57 = v77;
  v59 = v74;
  (*(void (**)(char *, uint64_t, uint64_t))(v76 + 16))(v74, a2, v77);
  v60 = *(unsigned __int8 *)(v58 + 80);
  v61 = (v60 + 56) & ~v60;
  v62 = (v73 + v61 + 7) & 0xFFFFFFFFFFFFFFF8;
  v63 = (char *)swift_allocObject(&unk_10007E068, v62 + 16, v60 | 7);
  *((_QWORD *)v63 + 2) = 0;
  *((_QWORD *)v63 + 3) = 0;
  *((_QWORD *)v63 + 4) = a3;
  *((_QWORD *)v63 + 5) = a4;
  *((_QWORD *)v63 + 6) = a1;
  (*(void (**)(char *, char *, uint64_t))(v58 + 32))(&v63[v61], v59, v57);
  v64 = &v63[v62];
  v65 = v78;
  *(_QWORD *)v64 = v79;
  *((_QWORD *)v64 + 1) = v65;
  swift_retain(a4);
  v66 = a1;
  v67 = sub_1000341A0(v56, (uint64_t)&unk_1000828B8, (uint64_t)v63);
  swift_release(v67);

}

uint64_t sub_10003BBEC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;

  v8[6] = a8;
  v8[7] = v16;
  v8[4] = a6;
  v8[5] = a7;
  v8[2] = a4;
  v8[3] = a5;
  v9 = type metadata accessor for Date(0);
  v8[8] = v9;
  v10 = *(_QWORD *)(v9 - 8);
  v8[9] = v10;
  v11 = (*(_QWORD *)(v10 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v8[10] = swift_task_alloc(v11);
  v8[11] = swift_task_alloc(v11);
  v12 = type metadata accessor for TimelineReloadPolicy(0);
  v8[12] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v12 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_100003704(&qword_1000828C0);
  v8[13] = v13;
  v14 = *(_QWORD *)(v13 - 8);
  v8[14] = v14;
  v8[15] = swift_task_alloc((*(_QWORD *)(v14 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_10003BCB4, 0, 0);
}

uint64_t sub_10003BCB4()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t **v9;

  v1 = sub_100003704(&qword_1000828C8);
  v2 = type metadata accessor for SecurityAccessoryEntry(0);
  v0[16] = v2;
  v3 = *(_QWORD *)(v2 - 8);
  v4 = *(_QWORD *)(v3 + 72);
  v5 = *(unsigned __int8 *)(v3 + 80);
  v6 = (v5 + 32) & ~v5;
  v7 = swift_allocObject(v1, v6 + v4, v5 | 7);
  v0[17] = v7;
  *(_OWORD *)(v7 + 16) = xmmword_1000607D0;
  v8 = v7 + v6;
  v9 = (uint64_t **)swift_task_alloc(dword_1000828D4);
  v0[18] = (uint64_t)v9;
  *v9 = v0;
  v9[1] = (uint64_t *)sub_10003BD5C;
  return sub_10003AC10(v8, v0[4], v0[5], v0[6], v0[7]);
}

uint64_t sub_10003BD5C()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 144));
  return swift_task_switch(sub_10003BDB0, 0, 0);
}

uint64_t sub_10003BDB0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t);
  void (*v10)(uint64_t, uint64_t);
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v2 = *(_QWORD *)(v1 + 136);
  v3 = *(_QWORD *)(v1 + 120);
  v13 = *(_QWORD *)(v1 + 128);
  v14 = *(_QWORD *)(v1 + 112);
  v4 = *(_QWORD *)(v1 + 96);
  v15 = *(_QWORD *)(v1 + 104);
  v5 = *(_QWORD *)(v1 + 80);
  v6 = *(_QWORD *)(v1 + 88);
  v8 = *(_QWORD *)(v1 + 64);
  v7 = *(_QWORD *)(v1 + 72);
  v9 = *(void (**)(uint64_t))(v1 + 16);
  Date.init()(a1);
  static Date.+ infix(_:_:)(v5, 1800.0);
  v10 = *(void (**)(uint64_t, uint64_t))(v7 + 8);
  v10(v5, v8);
  static TimelineReloadPolicy.after(_:)(v6);
  v10(v6, v8);
  v11 = sub_100015884(qword_100082898, type metadata accessor for SecurityAccessoryEntry, (uint64_t)&unk_1000634FC);
  Timeline.init(entries:policy:)(v2, v4, v13, v11);
  v9(v3);
  (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v3, v15);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v6);
  swift_task_dealloc(v5);
  return (*(uint64_t (**)(void))(v1 + 8))();
}

uint64_t sub_10003BEDC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v7;

  v7 = (_QWORD *)swift_task_alloc(async function pointer to IntentTimelineProvider.relevances()[1]);
  *(_QWORD *)(v3 + 16) = v7;
  *v7 = v3;
  v7[1] = sub_1000155DC;
  return IntentTimelineProvider.relevances()(a1, a2, a3);
}

uint64_t sub_10003BF48(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v7;

  v7 = (_QWORD *)swift_task_alloc(async function pointer to IntentTimelineProvider.relevance()[1]);
  *(_QWORD *)(v3 + 16) = v7;
  *v7 = v3;
  v7[1] = sub_1000158C4;
  return IntentTimelineProvider.relevance()(a1, a2, a3);
}

uint64_t sub_10003BFB4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;

  v5[5] = a4;
  v5[6] = a5;
  v5[3] = a2;
  v5[4] = a3;
  v5[2] = a1;
  return swift_task_switch(sub_10003BFD4, 0, 0);
}

uint64_t sub_10003BFD4()
{
  uint64_t v0;
  id v1;
  void *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  _QWORD *v7;
  _QWORD *v9;
  _QWORD *v10;

  v1 = objc_msgSend(*(id *)(v0 + 24), "accessory");
  v2 = v1;
  if (v1)
  {
    v3 = objc_msgSend(v1, "serviceType");

    if (v3)
    {
      v2 = (void *)static String._unconditionallyBridgeFromObjectiveC(_:)(v3);
      v5 = v4;

      goto LABEL_6;
    }
    v2 = 0;
  }
  v5 = 0xE000000000000000;
LABEL_6:
  v6 = _s20HomeWidgetLockScreen11ServiceKindO8rawValueACSgSS_tcfC_0((uint64_t)v2, v5);
  if (v6 == 35)
  {
    v9 = (_QWORD *)swift_task_alloc(dword_100082A1C);
    *(_QWORD *)(v0 + 64) = v9;
    *v9 = v0;
    v9[1] = sub_10003C190;
    return sub_100040D94(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40), *(_QWORD *)(v0 + 48));
  }
  else if (v6 == 30)
  {
    v7 = (_QWORD *)swift_task_alloc(dword_1000827AC);
    *(_QWORD *)(v0 + 56) = v7;
    *v7 = v0;
    v7[1] = sub_10003C148;
    return sub_1000381E0(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40), *(_QWORD *)(v0 + 48));
  }
  else
  {
    type metadata accessor for GarageDoorSecurityDataFetcher();
    v10 = (_QWORD *)swift_task_alloc(dword_10008213C);
    *(_QWORD *)(v0 + 72) = v10;
    *v10 = v0;
    v10[1] = sub_10003C1D8;
    return sub_100025788(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40), *(_QWORD *)(v0 + 48));
  }
}

uint64_t sub_10003C148()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  swift_task_dealloc(*(_QWORD *)(*v0 + 56));
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t sub_10003C190()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  swift_task_dealloc(*(_QWORD *)(*v0 + 64));
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t sub_10003C1D8()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  swift_task_dealloc(*(_QWORD *)(*v0 + 72));
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t sub_10003C220()
{
  uint64_t v0;
  _BYTE *v1;
  uint64_t v2;
  _BYTE *v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  _BYTE v7[16];

  type metadata accessor for Locale(0);
  __chkstk_darwin();
  v1 = &v7[-((v0 + 15) & 0xFFFFFFFFFFFFFFF0)];
  type metadata accessor for String.LocalizationValue(0);
  __chkstk_darwin();
  v3 = &v7[-((v2 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v4 = String.LocalizationValue.init(stringLiteral:)(0xD00000000000001FLL, 0x8000000100068C70);
  static Locale.current.getter(v4);
  result = String.init(localized:table:bundle:locale:comment:)(v3, 0x696C61636F4C4648, 0xED0000656C62617ALL, 0, v1, 0, 0, 256);
  qword_1000827B8 = result;
  unk_1000827C0 = v6;
  return result;
}

uint64_t sub_10003C318(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  char v21;
  char v22;
  char v23;
  char v24;

  v3 = v1;
  v5 = sub_100003704(&qword_1000828F8);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_10000E850(a1, v9);
  v11 = sub_10003DAFC();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for SecurityAccessoryData.CodingKeys, &type metadata for SecurityAccessoryData.CodingKeys, v11, v9, v10);
  v12 = *v3;
  v13 = v3[1];
  v24 = 0;
  KeyedEncodingContainer.encode(_:forKey:)(v12, v13, &v24, v5);
  if (!v2)
  {
    v14 = v3[2];
    v15 = v3[3];
    v23 = 1;
    KeyedEncodingContainer.encode(_:forKey:)(v14, v15, &v23, v5);
    v16 = v3[4];
    v17 = v3[5];
    v22 = 2;
    KeyedEncodingContainer.encode(_:forKey:)(v16, v17, &v22, v5);
    v18 = *((unsigned __int8 *)v3 + 48);
    v21 = 3;
    KeyedEncodingContainer.encode(_:forKey:)(v18, &v21, v5);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_10003C47C()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_10003C4A4 + 4 * byte_1000633C0[*v0]))(1701667182, 0xE400000000000000);
}

uint64_t sub_10003C4A4()
{
  return 0x656D614E6E6F6369;
}

uint64_t sub_10003C4BC()
{
  return 0x7453737574617473;
}

uint64_t sub_10003C4DC()
{
  return 0x6572756365537369;
}

uint64_t sub_10003C4F4@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_10003DD74(a1, a2);
  *a3 = result;
  return result;
}

void sub_10003C518(_BYTE *a1@<X8>)
{
  *a1 = 4;
}

uint64_t sub_10003C524(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10003DAFC();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10003C54C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10003DAFC();
  return CodingKey.debugDescription.getter(a1, v2);
}

Swift::Int sub_10003C574()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  Swift::UInt8 v7;
  _QWORD v9[9];

  v1 = *v0;
  v2 = v0[1];
  v3 = v0[2];
  v4 = v0[3];
  v5 = v0[4];
  v6 = v0[5];
  v7 = *((_BYTE *)v0 + 48);
  Hasher.init(_seed:)(v9, 0);
  swift_bridgeObjectRetain(v2);
  String.hash(into:)(v9, v1, v2);
  swift_bridgeObjectRelease(v2);
  swift_bridgeObjectRetain(v4);
  String.hash(into:)(v9, v3, v4);
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRetain(v6);
  String.hash(into:)(v9, v5, v6);
  swift_bridgeObjectRelease(v6);
  Hasher._combine(_:)(v7);
  return Hasher._finalize()();
}

void sub_10003C63C(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  Swift::UInt8 v9;

  v3 = *v1;
  v4 = v1[1];
  v5 = v1[2];
  v6 = v1[3];
  v7 = v1[4];
  v8 = v1[5];
  v9 = *((_BYTE *)v1 + 48);
  swift_bridgeObjectRetain(v4);
  String.hash(into:)(a1, v3, v4);
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRetain(v6);
  String.hash(into:)(a1, v5, v6);
  swift_bridgeObjectRelease(v6);
  swift_bridgeObjectRetain(v8);
  String.hash(into:)(a1, v7, v8);
  swift_bridgeObjectRelease(v8);
  Hasher._combine(_:)(v9);
}

Swift::Int sub_10003C6EC(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  Swift::UInt8 v8;
  _QWORD v10[9];

  v2 = *v1;
  v3 = v1[1];
  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = v1[5];
  v8 = *((_BYTE *)v1 + 48);
  Hasher.init(_seed:)(v10, a1);
  swift_bridgeObjectRetain(v3);
  String.hash(into:)(v10, v2, v3);
  swift_bridgeObjectRelease(v3);
  swift_bridgeObjectRetain(v5);
  String.hash(into:)(v10, v4, v5);
  swift_bridgeObjectRelease(v5);
  swift_bridgeObjectRetain(v7);
  String.hash(into:)(v10, v6, v7);
  swift_bridgeObjectRelease(v7);
  Hasher._combine(_:)(v8);
  return Hasher._finalize()();
}

uint64_t sub_10003C7B0(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  _OWORD v5[3];
  char v6;
  _OWORD v7[3];
  char v8;

  v2 = *(_OWORD *)(a1 + 16);
  v5[0] = *(_OWORD *)a1;
  v5[1] = v2;
  v5[2] = *(_OWORD *)(a1 + 32);
  v6 = *(_BYTE *)(a1 + 48);
  v3 = *(_OWORD *)(a2 + 16);
  v7[0] = *(_OWORD *)a2;
  v7[1] = v3;
  v7[2] = *(_OWORD *)(a2 + 32);
  v8 = *(_BYTE *)(a2 + 48);
  return sub_10003DA50((uint64_t *)v5, (uint64_t)v7) & 1;
}

uint64_t sub_10003C808(_QWORD *a1)
{
  return sub_10003C318(a1);
}

uint64_t sub_10003C81C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t OpaqueTypeConformance2;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void *v39;
  unint64_t v40;
  unint64_t v41;
  _QWORD v42[3];

  v37 = a1;
  v1 = type metadata accessor for Locale(0);
  __chkstk_darwin(v1);
  v3 = (char *)&v33 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for String.LocalizationValue(0);
  __chkstk_darwin(v4);
  v6 = (char *)&v33 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_100003704(&qword_1000827D0);
  v33 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v9 = (char *)&v33 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_100003704(&qword_1000827D8);
  v34 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v12 = (char *)&v33 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_100003704(&qword_1000827E0);
  v35 = *(_QWORD *)(v13 - 8);
  v36 = v13;
  __chkstk_darwin(v13);
  v15 = (char *)&v33 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for SecurityAccessoryConfigurationIntent();
  type metadata accessor for SecurityAccessoryView(0);
  sub_100015884(&qword_1000827E8, type metadata accessor for SecurityAccessoryView, (uint64_t)&unk_100063D18);
  sub_10003CCD8();
  IntentConfiguration.init<A>(kind:intent:provider:content:)(0xD00000000000002ELL, 0x8000000100068C10, v16);
  if (qword_1000816D0 != -1)
    swift_once(&qword_1000816D0, sub_10003C220);
  v38 = qword_1000827B8;
  v39 = (void *)unk_1000827C0;
  v17 = sub_10003CD1C();
  v18 = sub_1000037D4();
  WidgetConfiguration.configurationDisplayName<A>(_:)(&v38, v7, &type metadata for String, v17, v18);
  (*(void (**)(char *, uint64_t))(v33 + 8))(v9, v7);
  v19 = String.LocalizationValue.init(stringLiteral:)(0xD00000000000002ALL, 0x8000000100068C40);
  static Locale.current.getter(v19);
  v20 = String.init(localized:table:bundle:locale:comment:)(v6, 0x696C61636F4C4648, 0xED0000656C62617ALL, 0, v3, 0, 0, 256);
  v22 = v21;
  v42[0] = v20;
  v42[1] = v21;
  v38 = v7;
  v39 = &type metadata for String;
  v40 = v17;
  v41 = v18;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v38, &opaque type descriptor for <<opaque return type of WidgetConfiguration.configurationDisplayName<A>(_:)>>, 1);
  WidgetConfiguration.description<A>(_:)(v42, v10, &type metadata for String, OpaqueTypeConformance2, v18);
  swift_bridgeObjectRelease(v22);
  (*(void (**)(char *, uint64_t))(v34 + 8))(v12, v10);
  v24 = sub_100003704(&qword_100081CE0);
  v25 = type metadata accessor for WidgetFamily(0);
  v26 = *(_QWORD *)(v25 - 8);
  v27 = *(unsigned __int8 *)(v26 + 80);
  v28 = (v27 + 32) & ~v27;
  v29 = swift_allocObject(v24, v28 + *(_QWORD *)(v26 + 72), v27 | 7);
  *(_OWORD *)(v29 + 16) = xmmword_1000607D0;
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v26 + 104))(v29 + v28, enum case for WidgetFamily.accessoryCircular(_:), v25);
  v38 = v10;
  v39 = &type metadata for String;
  v40 = OpaqueTypeConformance2;
  v41 = v18;
  v30 = swift_getOpaqueTypeConformance2(&v38, &opaque type descriptor for <<opaque return type of WidgetConfiguration.description<A>(_:)>>, 1);
  v31 = v36;
  WidgetConfiguration.supportedFamilies(_:)(v29, v36, v30);
  swift_bridgeObjectRelease(v29);
  return (*(uint64_t (**)(char *, uint64_t))(v35 + 8))(v15, v31);
}

uint64_t sub_10003CC1C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t KeyPath;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v11;

  v4 = type metadata accessor for SecurityAccessoryEntry(0);
  __chkstk_darwin(v4);
  v6 = (char *)&v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10003CDA4(a1, (uint64_t)v6);
  KeyPath = swift_getKeyPath(&unk_100063448);
  v8 = (uint64_t *)(a2 + *(int *)(type metadata accessor for SecurityAccessoryView(0) + 20));
  *v8 = KeyPath;
  v9 = sub_100003704(&qword_100081DA0);
  swift_storeEnumTagMultiPayload(v8, v9, 0);
  return sub_10003CDEC((uint64_t)v6, a2);
}

unint64_t sub_10003CCD8()
{
  unint64_t result;

  result = qword_1000827F0;
  if (!qword_1000827F0)
  {
    result = swift_getWitnessTable(&unk_10006352C, &type metadata for SecurityAccessoryProvider);
    atomic_store(result, (unint64_t *)&qword_1000827F0);
  }
  return result;
}

unint64_t sub_10003CD1C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000827F8;
  if (!qword_1000827F8)
  {
    v1 = sub_100003744(&qword_1000827D0);
    result = swift_getWitnessTable(&protocol conformance descriptor for IntentConfiguration<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000827F8);
  }
  return result;
}

uint64_t type metadata accessor for SecurityAccessoryEntry(uint64_t a1)
{
  uint64_t result;

  result = qword_100082858;
  if (!qword_100082858)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for SecurityAccessoryEntry);
  return result;
}

uint64_t sub_10003CDA4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for SecurityAccessoryEntry(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10003CDEC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for SecurityAccessoryEntry(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t *sub_10003CE30(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v18 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v18 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v18);
  }
  else
  {
    v7 = type metadata accessor for Date(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = a3[5];
    v9 = a3[6];
    v10 = (char *)a1 + v8;
    v11 = (char *)a2 + v8;
    v12 = *((_QWORD *)v11 + 1);
    *(_QWORD *)v10 = *(_QWORD *)v11;
    *((_QWORD *)v10 + 1) = v12;
    v13 = *((_QWORD *)v11 + 3);
    *((_QWORD *)v10 + 2) = *((_QWORD *)v11 + 2);
    *((_QWORD *)v10 + 3) = v13;
    v14 = *((_QWORD *)v11 + 5);
    *((_QWORD *)v10 + 4) = *((_QWORD *)v11 + 4);
    *((_QWORD *)v10 + 5) = v14;
    v10[48] = v11[48];
    v15 = (uint64_t *)((char *)a1 + v9);
    v16 = (uint64_t *)((char *)a2 + v9);
    v17 = v16[1];
    *v15 = *v16;
    v15[1] = v17;
    *(_OWORD *)((char *)a1 + a3[7]) = *(_OWORD *)((char *)a2 + a3[7]);
    swift_bridgeObjectRetain(v12);
    swift_bridgeObjectRetain(v13);
    swift_bridgeObjectRetain(v14);
    swift_bridgeObjectRetain(v17);
  }
  return a1;
}

uint64_t sub_10003CF18(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _QWORD *v5;

  v4 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  v5 = (_QWORD *)(a1 + *(int *)(a2 + 20));
  swift_bridgeObjectRelease(v5[1]);
  swift_bridgeObjectRelease(v5[3]);
  swift_bridgeObjectRelease(v5[5]);
  return swift_bridgeObjectRelease(*(_QWORD *)(a1 + *(int *)(a2 + 24) + 8));
}

uint64_t sub_10003CF88(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;

  v6 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = a3[5];
  v8 = a3[6];
  v9 = a1 + v7;
  v10 = a2 + v7;
  v11 = *(_QWORD *)(v10 + 8);
  *(_QWORD *)v9 = *(_QWORD *)v10;
  *(_QWORD *)(v9 + 8) = v11;
  v12 = *(_QWORD *)(v10 + 24);
  *(_QWORD *)(v9 + 16) = *(_QWORD *)(v10 + 16);
  *(_QWORD *)(v9 + 24) = v12;
  v13 = *(_QWORD *)(v10 + 40);
  *(_QWORD *)(v9 + 32) = *(_QWORD *)(v10 + 32);
  *(_QWORD *)(v9 + 40) = v13;
  *(_BYTE *)(v9 + 48) = *(_BYTE *)(v10 + 48);
  v14 = (_QWORD *)(a1 + v8);
  v15 = (_QWORD *)(a2 + v8);
  v16 = v15[1];
  *v14 = *v15;
  v14[1] = v16;
  *(_OWORD *)(a1 + a3[7]) = *(_OWORD *)(a2 + a3[7]);
  swift_bridgeObjectRetain(v11);
  swift_bridgeObjectRetain(v12);
  swift_bridgeObjectRetain(v13);
  swift_bridgeObjectRetain(v16);
  return a1;
}

uint64_t sub_10003D044(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;

  v6 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = a2 + v7;
  *(_QWORD *)v8 = *(_QWORD *)(a2 + v7);
  v10 = *(_QWORD *)(a2 + v7 + 8);
  v11 = *(_QWORD *)(a1 + v7 + 8);
  *(_QWORD *)(v8 + 8) = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease(v11);
  *(_QWORD *)(v8 + 16) = *(_QWORD *)(v9 + 16);
  v12 = *(_QWORD *)(v9 + 24);
  v13 = *(_QWORD *)(v8 + 24);
  *(_QWORD *)(v8 + 24) = v12;
  swift_bridgeObjectRetain(v12);
  swift_bridgeObjectRelease(v13);
  *(_QWORD *)(v8 + 32) = *(_QWORD *)(v9 + 32);
  v14 = *(_QWORD *)(v9 + 40);
  v15 = *(_QWORD *)(v8 + 40);
  *(_QWORD *)(v8 + 40) = v14;
  swift_bridgeObjectRetain(v14);
  swift_bridgeObjectRelease(v15);
  *(_BYTE *)(v8 + 48) = *(_BYTE *)(v9 + 48);
  v16 = a3[6];
  v17 = (_QWORD *)(a1 + v16);
  v18 = (_QWORD *)(a2 + v16);
  *v17 = *v18;
  v19 = v18[1];
  v20 = v17[1];
  v17[1] = v19;
  swift_bridgeObjectRetain(v19);
  swift_bridgeObjectRelease(v20);
  v21 = a3[7];
  v22 = (_QWORD *)(a1 + v21);
  v23 = (_QWORD *)(a2 + v21);
  *v22 = *v23;
  v22[1] = v23[1];
  return a1;
}

uint64_t sub_10003D158(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;

  v6 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = a3[5];
  v8 = a3[6];
  v9 = a1 + v7;
  v10 = a2 + v7;
  v11 = *(_OWORD *)(v10 + 16);
  *(_OWORD *)v9 = *(_OWORD *)v10;
  *(_OWORD *)(v9 + 16) = v11;
  v12 = *(_OWORD *)(v10 + 32);
  *(_BYTE *)(v9 + 48) = *(_BYTE *)(v10 + 48);
  *(_OWORD *)(v9 + 32) = v12;
  *(_OWORD *)(a1 + v8) = *(_OWORD *)(a2 + v8);
  *(_OWORD *)(a1 + a3[7]) = *(_OWORD *)(a2 + a3[7]);
  return a1;
}

uint64_t sub_10003D1E0(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v6 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = *(_QWORD *)(a2 + v7 + 8);
  v11 = *(_QWORD *)(a1 + v7 + 8);
  *(_QWORD *)v8 = *(_QWORD *)(a2 + v7);
  *(_QWORD *)(v8 + 8) = v10;
  swift_bridgeObjectRelease(v11);
  v12 = *(_QWORD *)(v9 + 24);
  v13 = *(_QWORD *)(v8 + 24);
  *(_QWORD *)(v8 + 16) = *(_QWORD *)(v9 + 16);
  *(_QWORD *)(v8 + 24) = v12;
  swift_bridgeObjectRelease(v13);
  v14 = *(_QWORD *)(v9 + 40);
  v15 = *(_QWORD *)(v8 + 40);
  *(_QWORD *)(v8 + 32) = *(_QWORD *)(v9 + 32);
  *(_QWORD *)(v8 + 40) = v14;
  swift_bridgeObjectRelease(v15);
  *(_BYTE *)(v8 + 48) = *(_BYTE *)(v9 + 48);
  v16 = a3[6];
  v17 = (_QWORD *)(a1 + v16);
  v18 = (uint64_t *)(a2 + v16);
  v20 = *v18;
  v19 = v18[1];
  v21 = v17[1];
  *v17 = v20;
  v17[1] = v19;
  swift_bridgeObjectRelease(v21);
  *(_OWORD *)(a1 + a3[7]) = *(_OWORD *)(a2 + a3[7]);
  return a1;
}

uint64_t sub_10003D2A4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10003D2B0);
}

uint64_t sub_10003D2B0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;

  v6 = type metadata accessor for Date(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 20) + 8);
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  return (v9 + 1);
}

uint64_t sub_10003D330(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10003D33C);
}

uint64_t sub_10003D33C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = type metadata accessor for Date(0);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 20) + 8) = (a2 - 1);
  return result;
}

uint64_t sub_10003D3B8(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[4];

  result = type metadata accessor for Date(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(result - 8) + 64;
    v4[1] = "1";
    v4[2] = &unk_1000634B0;
    v4[3] = &unk_1000634C8;
    swift_initStructMetadata(a1, 256, 4, v4, a1 + 16);
    return 0;
  }
  return result;
}

ValueMetadata *type metadata accessor for SecurityAccessoryProvider()
{
  return &type metadata for SecurityAccessoryProvider;
}

uint64_t sub_10003D44C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t OpaqueTypeConformance2;
  uint64_t v6;
  uint64_t v8;
  void *v9;
  unint64_t v10;
  unint64_t v11;

  v0 = sub_100003744(&qword_1000827E0);
  v1 = sub_100003744(&qword_1000827D8);
  v2 = sub_100003744(&qword_1000827D0);
  v3 = sub_10003CD1C();
  v4 = sub_1000037D4();
  v8 = v2;
  v9 = &type metadata for String;
  v10 = v3;
  v11 = v4;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v8, &opaque type descriptor for <<opaque return type of WidgetConfiguration.configurationDisplayName<A>(_:)>>, 1);
  v8 = v1;
  v9 = &type metadata for String;
  v10 = OpaqueTypeConformance2;
  v11 = v4;
  v6 = swift_getOpaqueTypeConformance2(&v8, &opaque type descriptor for <<opaque return type of WidgetConfiguration.description<A>(_:)>>, 1);
  v8 = v0;
  v9 = (void *)v6;
  return swift_getOpaqueTypeConformance2(&v8, &opaque type descriptor for <<opaque return type of WidgetConfiguration.supportedFamilies(_:)>>, 1);
}

uint64_t sub_10003D514()
{
  return sub_100015884(qword_100082898, type metadata accessor for SecurityAccessoryEntry, (uint64_t)&unk_1000634FC);
}

uint64_t sub_10003D544(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v4 = *(_QWORD *)(type metadata accessor for TimelineProviderContext(0) - 8);
  v5 = (*(unsigned __int8 *)(v4 + 80) + 56) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v6 = v1[2];
  v7 = v1[3];
  v8 = v1[4];
  v9 = v1[5];
  v10 = v1[6];
  v11 = (uint64_t)v1 + v5;
  v12 = *(_QWORD *)((char *)v1 + ((*(_QWORD *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFFFF8));
  v13 = (_QWORD *)swift_task_alloc(dword_1000828B4);
  *(_QWORD *)(v2 + 16) = v13;
  *v13 = v2;
  v13[1] = sub_1000158C4;
  return sub_10003BBEC(a1, v6, v7, v8, v9, v10, v11, v12);
}

uint64_t sub_10003D618()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v1 = type metadata accessor for TimelineProviderContext(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 56) & ~v3;
  v5 = v3 | 7;
  v6 = (*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 40));

  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v6 + 8));
  return swift_deallocObject(v0, v6 + 16, v5);
}

uint64_t sub_10003D6BC(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v4 = *(_QWORD *)(type metadata accessor for TimelineProviderContext(0) - 8);
  v5 = (*(unsigned __int8 *)(v4 + 80) + 56) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v6 = v1[2];
  v7 = v1[3];
  v8 = v1[4];
  v9 = v1[5];
  v10 = v1[6];
  v11 = (uint64_t)v1 + v5;
  v12 = *(_QWORD *)((char *)v1 + ((*(_QWORD *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFFFF8));
  v13 = (_QWORD *)swift_task_alloc(dword_1000828E4);
  *(_QWORD *)(v2 + 16) = v13;
  *v13 = v2;
  v13[1] = sub_1000158C4;
  return sub_10003AAD0(a1, v6, v7, v8, v9, v10, v11, v12);
}

uint64_t sub_10003D78C(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for SecurityAccessoryEntry(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t destroy for ThreeColumnDataRow(_QWORD *a1)
{
  swift_bridgeObjectRelease(a1[1]);
  swift_bridgeObjectRelease(a1[3]);
  return swift_bridgeObjectRelease(a1[5]);
}

uint64_t initializeWithCopy for ThreeColumnDataRow(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  v4 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v4;
  v5 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v5;
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  return a1;
}

uint64_t assignWithCopy for ThreeColumnDataRow(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  v8 = *(_QWORD *)(a2 + 40);
  v9 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  return a1;
}

__n128 initializeWithTake for ThreeColumnDataRow(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  v4 = *(_OWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for ThreeColumnDataRow(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease(v5);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v6;
  swift_bridgeObjectRelease(v7);
  v8 = *(_QWORD *)(a2 + 40);
  v9 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v8;
  swift_bridgeObjectRelease(v9);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  return a1;
}

uint64_t getEnumTagSinglePayload for ThreeColumnDataRow(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 49))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ThreeColumnDataRow(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 48) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 49) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 49) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for SecurityAccessoryData()
{
  return &type metadata for SecurityAccessoryData;
}

unint64_t sub_10003DA0C()
{
  unint64_t result;

  result = qword_1000828F0;
  if (!qword_1000828F0)
  {
    result = swift_getWitnessTable(&unk_1000635E0, &type metadata for SecurityAccessoryData);
    atomic_store(result, (unint64_t *)&qword_1000828F0);
  }
  return result;
}

uint64_t sub_10003DA50(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  char v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;

  v4 = *a1;
  v5 = a1[1];
  v6 = *(_QWORD *)(a2 + 8);
  v7 = v4 == *(_QWORD *)a2 && v5 == v6;
  if (v7 || (v8 = _stringCompareWithSmolCheck(_:_:expecting:)(v4, v5, *(_QWORD *)a2, v6, 0), v9 = 0, (v8 & 1) != 0))
  {
    v10 = a1[2];
    v11 = a1[3];
    v12 = *(_QWORD *)(a2 + 16);
    v13 = *(_QWORD *)(a2 + 24);
    v14 = v10 == v12 && v11 == v13;
    if (v14 || (v15 = _stringCompareWithSmolCheck(_:_:expecting:)(v10, v11, v12, v13, 0), v9 = 0, (v15 & 1) != 0))
    {
      if ((v16 = a1[4], v17 = a1[5], v18 = *(_QWORD *)(a2 + 32), v19 = *(_QWORD *)(a2 + 40), v16 == v18) && v17 == v19
        || (v20 = _stringCompareWithSmolCheck(_:_:expecting:)(v16, v17, v18, v19, 0), v9 = 0, (v20 & 1) != 0))
      {
        v9 = ((a1[6] & 1) == 0) ^ *(_BYTE *)(a2 + 48);
      }
    }
  }
  return v9 & 1;
}

unint64_t sub_10003DAFC()
{
  unint64_t result;

  result = qword_100082900;
  if (!qword_100082900)
  {
    result = swift_getWitnessTable(&unk_10006370C, &type metadata for SecurityAccessoryData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100082900);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for SecurityAccessoryData.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFD)
    goto LABEL_17;
  if (a2 + 3 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 3) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 3;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 3;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 3;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 4;
  v8 = v6 - 4;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for SecurityAccessoryData.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_10003DC1C + 4 * byte_1000633C9[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_10003DC50 + 4 * byte_1000633C4[v4]))();
}

uint64_t sub_10003DC50(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10003DC58(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10003DC60);
  return result;
}

uint64_t sub_10003DC6C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10003DC74);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_10003DC78(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10003DC80(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for SecurityAccessoryData.CodingKeys()
{
  return &type metadata for SecurityAccessoryData.CodingKeys;
}

unint64_t sub_10003DCA0()
{
  unint64_t result;

  result = qword_100082908;
  if (!qword_100082908)
  {
    result = swift_getWitnessTable(&unk_1000636E4, &type metadata for SecurityAccessoryData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100082908);
  }
  return result;
}

unint64_t sub_10003DCE8()
{
  unint64_t result;

  result = qword_100082910;
  if (!qword_100082910)
  {
    result = swift_getWitnessTable(&unk_100063654, &type metadata for SecurityAccessoryData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100082910);
  }
  return result;
}

unint64_t sub_10003DD30()
{
  unint64_t result;

  result = qword_100082918;
  if (!qword_100082918)
  {
    result = swift_getWitnessTable(&unk_10006367C, &type metadata for SecurityAccessoryData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100082918);
  }
  return result;
}

uint64_t sub_10003DD74(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v7;
  unint64_t v8;
  char v9;

  if (a1 == 1701667182 && a2 == 0xE400000000000000)
  {
    v5 = 0xE400000000000000;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(1701667182, 0xE400000000000000, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x656D614E6E6F6369 && a2 == 0xE800000000000000)
  {
    v7 = 0xE800000000000000;
LABEL_14:
    swift_bridgeObjectRelease(v7);
    return 1;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x656D614E6E6F6369, 0xE800000000000000, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
    goto LABEL_14;
  }
  if (a1 == 0x7453737574617473 && a2 == 0xEC000000676E6972)
  {
    v8 = 0xEC000000676E6972;
LABEL_20:
    swift_bridgeObjectRelease(v8);
    return 2;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x7453737574617473, 0xEC000000676E6972, a1, a2, 0) & 1) != 0)
  {
    v8 = a2;
    goto LABEL_20;
  }
  if (a1 == 0x6572756365537369 && a2 == 0xE800000000000000)
  {
    swift_bridgeObjectRelease(0xE800000000000000);
    return 3;
  }
  else
  {
    v9 = _stringCompareWithSmolCheck(_:_:expecting:)(0x6572756365537369, 0xE800000000000000, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v9 & 1) != 0)
      return 3;
    else
      return 4;
  }
}

ValueMetadata *type metadata accessor for SecurityCategoryWidget()
{
  return &type metadata for SecurityCategoryWidget;
}

uint64_t sub_10003DF44(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_10006BF9C, 1);
}

int *sub_10003DF54@<X0>(uint64_t a1@<X8>)
{
  unint64_t v1;
  uint64_t v2;
  uint64_t v4;
  Swift::String v5;
  void *object;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  double v19;
  uint64_t v20;
  uint64_t v21;
  int *result;
  uint64_t *v23;
  double *v24;
  uint64_t v25;
  uint64_t v26[2];

  v4 = qword_10008A788 + 1;
  if (__OFADD__(qword_10008A788, 1))
  {
    __break(1u);
  }
  else
  {
    ++qword_10008A788;
    v26[0] = 0x7974697275636553;
    v26[1] = 0xE900000000000020;
    v25 = v4;
    v5._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
    object = v5._object;
    String.append(_:)(v5);
    swift_bridgeObjectRelease(object);
    v2 = 0x7974697275636553;
    v1 = 0xE900000000000020;
    if (qword_100081680 == -1)
      goto LABEL_3;
  }
  swift_once(&qword_100081680, sub_100022448);
LABEL_3:
  v7 = type metadata accessor for Logger(0);
  sub_100003884(v7, (uint64_t)static DataModel.widgetLogger);
  v8 = swift_bridgeObjectRetain(v1);
  v9 = Logger.logObject.getter(v8);
  v10 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v9, v10))
  {
    v11 = swift_slowAlloc(22, -1);
    v12 = swift_slowAlloc(64, -1);
    v26[0] = v12;
    *(_DWORD *)v11 = 136315394;
    swift_bridgeObjectRetain(v1);
    v25 = sub_10001DF04(v2, v1, v26);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v25, v26, v11 + 4, v11 + 12);
    swift_bridgeObjectRelease_n(v1, 3);
    *(_WORD *)(v11 + 12) = 2080;
    v25 = sub_10001DF04(0xD000000000000010, 0x8000000100067EA0, v26);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v25, v26, v11 + 14, v11 + 22);
    swift_arrayDestroy(v12, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v12, -1, -1);
    swift_slowDealloc(v11, -1, -1);

  }
  else
  {

    v13 = swift_bridgeObjectRelease_n(v1, 2);
  }
  Date.init()(v13);
  if (qword_1000816D8 != -1)
    swift_once(&qword_1000816D8, sub_10003FF64);
  v15 = qword_10008A778;
  v14 = unk_10008A780;
  v16 = qword_100081740;
  swift_bridgeObjectRetain(unk_10008A780);
  if (v16 != -1)
    swift_once(&qword_100081740, sub_10005AE7C);
  v17 = qword_10008A8B0;
  v18 = swift_bridgeObjectRetain(qword_10008A8B0);
  v19 = TimelineProviderContext.displaySize.getter(v18);
  v21 = v20;
  result = (int *)type metadata accessor for ThreeColumnDataEntry(0);
  v23 = (uint64_t *)(a1 + result[5]);
  *v23 = v15;
  v23[1] = v14;
  *(_QWORD *)(a1 + result[6]) = v17;
  v24 = (double *)(a1 + result[7]);
  *v24 = v19;
  *((_QWORD *)v24 + 1) = v21;
  return result;
}

uint64_t sub_10003E258(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  Swift::String v15;
  void *object;
  uint64_t v17;
  uint64_t v18;
  NSObject *v19;
  os_log_type_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  char *v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;

  v41 = a2;
  v7 = type metadata accessor for TimelineProviderContext(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(_QWORD *)(v8 + 64);
  __chkstk_darwin(v7);
  v10 = (char *)&v35 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_100003704(&qword_100081DB0);
  __chkstk_darwin(v11);
  v13 = (char *)&v35 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = qword_10008A788 + 1;
  if (__OFADD__(qword_10008A788, 1))
  {
    __break(1u);
  }
  else
  {
    v39 = a1;
    v40 = v13;
    ++qword_10008A788;
    v43 = 0x7974697275636553;
    v44 = 0xE900000000000020;
    v42 = v14;
    v15._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
    object = v15._object;
    String.append(_:)(v15);
    swift_bridgeObjectRelease(object);
    v3 = v43;
    v4 = v44;
    if (qword_100081680 == -1)
      goto LABEL_3;
  }
  swift_once(&qword_100081680, sub_100022448);
LABEL_3:
  v17 = type metadata accessor for Logger(0);
  sub_100003884(v17, (uint64_t)static DataModel.widgetLogger);
  v18 = swift_bridgeObjectRetain_n(v4, 2);
  v19 = Logger.logObject.getter(v18);
  v20 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v19, v20))
  {
    v21 = swift_slowAlloc(22, -1);
    v36 = v9;
    v22 = v21;
    v23 = swift_slowAlloc(64, -1);
    v43 = v23;
    *(_DWORD *)v22 = 136315394;
    v37 = v10;
    swift_bridgeObjectRetain(v4);
    v42 = sub_10001DF04(v3, v4, &v43);
    v38 = v8;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v42, &v43, v22 + 4, v22 + 12);
    swift_bridgeObjectRelease_n(v4, 3);
    *(_WORD *)(v22 + 12) = 2080;
    v42 = sub_10001DF04(0xD00000000000001BLL, 0x8000000100067E80, &v43);
    v10 = v37;
    v8 = v38;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v42, &v43, v22 + 14, v22 + 22);
    swift_arrayDestroy(v23, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v23, -1, -1);
    v24 = v22;
    v9 = v36;
    swift_slowDealloc(v24, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n(v4, 2);
  }
  v25 = v39;
  v26 = type metadata accessor for TaskPriority(0);
  v27 = (uint64_t)v40;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 56))(v40, 1, 1, v26);
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v10, v25, v7);
  v28 = *(unsigned __int8 *)(v8 + 80);
  v29 = (v28 + 48) & ~v28;
  v30 = (v9 + v29 + 7) & 0xFFFFFFFFFFFFFFF8;
  v31 = (char *)swift_allocObject(&unk_10007E378, v30 + 16, v28 | 7);
  *((_QWORD *)v31 + 2) = 0;
  *((_QWORD *)v31 + 3) = 0;
  *((_QWORD *)v31 + 4) = v41;
  *((_QWORD *)v31 + 5) = a3;
  (*(void (**)(char *, char *, uint64_t))(v8 + 32))(&v31[v29], v10, v7);
  v32 = (uint64_t *)&v31[v30];
  *v32 = v3;
  v32[1] = v4;
  swift_retain(a3);
  v33 = sub_1000341A0(v27, (uint64_t)&unk_100082A10, (uint64_t)v31);
  return swift_release(v33);
}

uint64_t sub_10003E5F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v8;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;

  v8[2] = a4;
  v8[3] = a5;
  v12 = type metadata accessor for ThreeColumnDataEntry(0);
  v13 = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v12 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v8[4] = v13;
  v14 = (_QWORD *)swift_task_alloc(dword_100082A04);
  v8[5] = v14;
  *v14 = v8;
  v14[1] = sub_100013628;
  return sub_10003E68C(v13, a6, a7, a8);
}

uint64_t sub_10003E68C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;

  v4[19] = a3;
  v4[20] = a4;
  v4[17] = a1;
  v4[18] = a2;
  v5 = type metadata accessor for WidgetFamily(0);
  v4[21] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v4[22] = v6;
  v7 = (*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v4[23] = swift_task_alloc(v7);
  v4[24] = swift_task_alloc(v7);
  v8 = type metadata accessor for Locale(0);
  v4[25] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v8 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for String.LocalizationValue(0);
  v4[26] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v9 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for Date(0);
  v4[27] = v10;
  v11 = *(_QWORD *)(v10 - 8);
  v4[28] = v11;
  v12 = (*(_QWORD *)(v11 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v4[29] = swift_task_alloc(v12);
  v4[30] = swift_task_alloc(v12);
  return swift_task_switch(sub_10003E778, 0, 0);
}

uint64_t sub_10003E778()
{
  uint64_t v0;
  void **v1;
  void *v2;
  uint64_t v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  id v8;
  NSObject *v9;
  os_log_type_t v10;
  _BOOL4 v11;
  unint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  void *v16;
  id v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  id v21;
  id v22;
  Swift::Bool v23;
  id v24;
  NSObject *v25;
  os_log_type_t v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  id v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  id v36;
  id v37;
  Swift::Bool v38;
  id v39;
  NSObject *v40;
  os_log_type_t v41;
  uint64_t v42;
  id v43;
  id v44;
  void *v45;
  id v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  double v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  int *v61;
  uint64_t *v62;
  double *v63;
  uint64_t v64;
  id v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  void (*v78)(uint64_t, uint64_t);
  uint64_t v79;
  _QWORD *v80;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  double v92;
  uint64_t v93;
  uint64_t v94;
  int *v95;
  uint64_t *v96;
  double *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  double v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  int *v111;
  uint64_t *v112;
  double *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  _QWORD *v120;
  uint64_t v121;
  uint64_t v122;
  id v123;
  os_log_type_t v124;
  uint64_t v125;
  uint64_t v126;
  _QWORD *v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130[2];

  if (qword_100081670 != -1)
    swift_once(&qword_100081670, sub_100021008);
  v128 = v0 + 112;
  v1 = (void **)(qword_10008A648 + OBJC_IVAR____TtC20HomeWidgetLockScreen9DataModel_currentHome);
  swift_beginAccess(qword_10008A648 + OBJC_IVAR____TtC20HomeWidgetLockScreen9DataModel_currentHome, v0 + 16, 0, 0);
  v2 = *v1;
  *(_QWORD *)(v0 + 248) = *v1;
  v3 = qword_100081680;
  v4 = v2;
  if (v3 != -1)
    swift_once(&qword_100081680, sub_100022448);
  v5 = *(_QWORD *)(v0 + 160);
  v6 = type metadata accessor for Logger(0);
  *(_QWORD *)(v0 + 256) = sub_100003884(v6, (uint64_t)static DataModel.widgetLogger);
  v7 = v4;
  swift_bridgeObjectRetain_n(v5, 2);
  v8 = v7;
  v9 = Logger.logObject.getter(v8);
  v10 = static os_log_type_t.default.getter();
  v11 = os_log_type_enabled(v9, v10);
  v12 = *(_QWORD *)(v0 + 160);
  if (v11)
  {
    v123 = v8;
    v13 = *(_QWORD *)(v0 + 152);
    v14 = v2;
    v15 = swift_slowAlloc(32, -1);
    v125 = swift_slowAlloc(96, -1);
    v130[0] = v125;
    *(_DWORD *)v15 = 136315650;
    swift_bridgeObjectRetain(v12);
    *(_QWORD *)(v0 + 112) = sub_10001DF04(v13, v12, v130);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v128, v0 + 120, v15 + 4, v15 + 12);
    swift_bridgeObjectRelease_n(v12, 3);
    *(_WORD *)(v15 + 12) = 2080;
    *(_QWORD *)(v0 + 120) = sub_10001DF04(0xD00000000000001ALL, 0x8000000100067E60, v130);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 120, v0 + 128, v15 + 14, v15 + 22);
    *(_WORD *)(v15 + 22) = 2080;
    v16 = v14;
    if (v14)
    {
      v8 = v123;
      v17 = objc_msgSend(v123, "name");
      v18 = static String._unconditionallyBridgeFromObjectiveC(_:)(v17);
      v20 = v19;

    }
    else
    {
      v20 = 0xE300000000000000;
      v18 = 7104878;
      v8 = v123;
    }
    *(_QWORD *)(v0 + 128) = sub_10001DF04(v18, v20, v130);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 128, v0 + 136, v15 + 24, v15 + 32);
    swift_bridgeObjectRelease(v20);

    swift_arrayDestroy(v125, 3, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v125, -1, -1);
    swift_slowDealloc(v15, -1, -1);

    v2 = v16;
    if (!v16)
      goto LABEL_23;
  }
  else
  {
    swift_bridgeObjectRelease_n(*(_QWORD *)(v0 + 160), 2);

    if (!v2)
      goto LABEL_23;
  }
  v21 = v8;
  v22 = objc_msgSend(v21, "currentUser");
  v23 = HMHome.shouldShowNoAccessOutsideOfSchedule(forRestrictedUser:)((HMUser)v22);

  if (v23)
  {
    v24 = v21;
    v25 = Logger.logObject.getter(v24);
    v26 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v25, v26))
    {
      v124 = v26;
      v27 = *(_QWORD *)(v0 + 240);
      v122 = *(_QWORD *)(v0 + 224);
      v121 = *(_QWORD *)(v0 + 216);
      v28 = swift_slowAlloc(32, -1);
      v120 = (_QWORD *)swift_slowAlloc(8, -1);
      v126 = swift_slowAlloc(64, -1);
      v130[0] = v126;
      *(_DWORD *)v28 = 136315650;
      *(_QWORD *)(v0 + 88) = sub_10001DF04(0xD00000000000001ALL, 0x8000000100067E60, v130);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 88, v0 + 96, v28 + 4, v28 + 12);
      *(_WORD *)(v28 + 12) = 2112;
      *(_QWORD *)(v0 + 96) = v24;
      v29 = v2;
      v30 = v24;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 96, v0 + 104, v28 + 14, v28 + 22);
      *v120 = v29;

      *(_WORD *)(v28 + 22) = 2080;
      static Date.now.getter();
      v31 = sub_100015884((unint64_t *)&qword_100082150, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
      v32 = dispatch thunk of CustomStringConvertible.description.getter(v121, v31);
      v34 = v33;
      (*(void (**)(uint64_t, uint64_t))(v122 + 8))(v27, v121);
      *(_QWORD *)(v0 + 104) = sub_10001DF04(v32, v34, v130);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 104, v128, v28 + 24, v28 + 32);
      swift_bridgeObjectRelease(v34);
      _os_log_impl((void *)&_mh_execute_header, v25, v124, "{%s} Displaying No Access for RG in home %@ because now %s is outside of allowed schedule.", (uint8_t *)v28, 0x20u);
      v35 = sub_100003704((uint64_t *)&unk_100081FD0);
      swift_arrayDestroy(v120, 1, v35);
      swift_slowDealloc(v120, -1, -1);
      swift_arrayDestroy(v126, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v126, -1, -1);
      swift_slowDealloc(v28, -1, -1);
    }
    else
    {

    }
    v49 = *(_QWORD *)(v0 + 200);
    v48 = *(_QWORD *)(v0 + 208);
    v51 = TimelineProviderContext.displaySize.getter(v50);
    v53 = v52;
    Date.init()(v54);
    v55 = String.LocalizationValue.init(stringLiteral:)(0xD000000000000028, 0x8000000100068800);
    static Locale.current.getter(v55);
    v56 = String.init(localized:table:bundle:locale:comment:)(v48, 0xD000000000000022, 0x8000000100068830, 0, v49, 0, 0, 256);
    v58 = v57;
    if (qword_100081748 != -1)
      swift_once(&qword_100081748, sub_10005AE90);
    v59 = *(_QWORD *)(v0 + 136);
    v60 = qword_10008A8B8;
    v61 = (int *)type metadata accessor for ThreeColumnDataEntry(0);
    v62 = (uint64_t *)(v59 + v61[5]);
    *v62 = v56;
    v62[1] = v58;
    *(_QWORD *)(v59 + v61[6]) = v60;
    v63 = (double *)(v59 + v61[7]);
    *v63 = v51;
    *((_QWORD *)v63 + 1) = v53;
    swift_bridgeObjectRetain(v60);

LABEL_39:
    v114 = *(_QWORD *)(v0 + 232);
    v116 = *(_QWORD *)(v0 + 200);
    v115 = *(_QWORD *)(v0 + 208);
    v118 = *(_QWORD *)(v0 + 184);
    v117 = *(_QWORD *)(v0 + 192);
    swift_task_dealloc(*(_QWORD *)(v0 + 240));
    swift_task_dealloc(v114);
    swift_task_dealloc(v115);
    swift_task_dealloc(v116);
    swift_task_dealloc(v117);
    swift_task_dealloc(v118);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }

  v36 = v21;
  v37 = objc_msgSend(v36, "currentUser");
  v38 = HMHome.shouldShowNoAccessAwayFromHome(forRestrictedUser:)((HMUser)v37);

  if (v38)
  {
    v39 = v36;
    v40 = Logger.logObject.getter(v39);
    v41 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v40, v41))
    {
      v42 = swift_slowAlloc(22, -1);
      v127 = (_QWORD *)swift_slowAlloc(8, -1);
      v129 = swift_slowAlloc(32, -1);
      v130[0] = v129;
      *(_DWORD *)v42 = 136315394;
      *(_QWORD *)(v0 + 72) = sub_10001DF04(0xD00000000000001ALL, 0x8000000100067E60, v130);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 72, v0 + 80, v42 + 4, v42 + 12);
      *(_WORD *)(v42 + 12) = 2112;
      *(_QWORD *)(v0 + 80) = v39;
      v43 = v39;
      v44 = v39;
      v45 = v2;
      v46 = v43;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 80, v0 + 88, v42 + 14, v42 + 22);
      *v127 = v45;
      v39 = v44;

      _os_log_impl((void *)&_mh_execute_header, v40, v41, "{%s} Displaying No Access for RG in home %@ because current RG user is away from home.", (uint8_t *)v42, 0x16u);
      v47 = sub_100003704((uint64_t *)&unk_100081FD0);
      swift_arrayDestroy(v127, 1, v47);
      swift_slowDealloc(v127, -1, -1);
      swift_arrayDestroy(v129, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v129, -1, -1);
      swift_slowDealloc(v42, -1, -1);
    }
    else
    {

    }
    v99 = *(_QWORD *)(v0 + 200);
    v98 = *(_QWORD *)(v0 + 208);
    v101 = TimelineProviderContext.displaySize.getter(v100);
    v103 = v102;
    Date.init()(v104);
    v105 = String.LocalizationValue.init(stringLiteral:)(0xD000000000000028, 0x8000000100068800);
    static Locale.current.getter(v105);
    v106 = String.init(localized:table:bundle:locale:comment:)(v98, 0xD000000000000022, 0x8000000100068830, 0, v99, 0, 0, 256);
    v108 = v107;
    if (qword_100081750 != -1)
      swift_once(&qword_100081750, sub_10005AEB4);
    v109 = *(_QWORD *)(v0 + 136);
    v110 = qword_10008A8C0;
    v111 = (int *)type metadata accessor for ThreeColumnDataEntry(0);
    v112 = (uint64_t *)(v109 + v111[5]);
    *v112 = v106;
    v112[1] = v108;
    *(_QWORD *)(v109 + v111[6]) = v110;
    v113 = (double *)(v109 + v111[7]);
    *v113 = v101;
    *((_QWORD *)v113 + 1) = v103;
    swift_bridgeObjectRetain(v110);

    goto LABEL_39;
  }

LABEL_23:
  if (qword_100081710 != -1)
    swift_once(&qword_100081710, sub_100052388);
  v64 = qword_10008A790;
  v65 = v8;
  v66 = swift_bridgeObjectRetain(v64);
  v67 = sub_100040958(v66, v2);

  swift_bridgeObjectRelease(v64);
  if ((unint64_t)v67 >> 62)
  {
    if (v67 < 0)
      v119 = v67;
    else
      v119 = v67 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v67);
    v68 = _CocoaArrayWrapper.endIndex.getter(v119);
    swift_bridgeObjectRelease(v67);
  }
  else
  {
    v68 = *(_QWORD *)((v67 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  v69 = swift_bridgeObjectRelease(v67);
  if (!v68)
  {
    Date.init()(v69);
    if (qword_1000816D8 != -1)
      swift_once(&qword_1000816D8, sub_10003FF64);
    v83 = *(_QWORD *)(v0 + 200);
    v82 = *(_QWORD *)(v0 + 208);
    v84 = *(_QWORD *)(v0 + 136);
    v86 = qword_10008A778;
    v85 = unk_10008A780;
    v87 = sub_100003704(&qword_100081C88);
    v88 = swift_allocObject(v87, 88, 7);
    *(_OWORD *)(v88 + 16) = xmmword_1000607D0;
    swift_bridgeObjectRetain(v85);
    v89 = String.LocalizationValue.init(stringLiteral:)(0xD00000000000001BLL, 0x8000000100068EF0);
    static Locale.current.getter(v89);
    v90 = String.init(localized:table:bundle:locale:comment:)(v82, 0x696C61636F4C4648, 0xED0000656C62617ALL, 0, v83, 0, 0, 256);
    *(_QWORD *)(v88 + 32) = 0xD000000000000018;
    *(_QWORD *)(v88 + 40) = 0x8000000100067E20;
    *(_QWORD *)(v88 + 48) = 0;
    *(_QWORD *)(v88 + 56) = 0xE000000000000000;
    *(_QWORD *)(v88 + 64) = v90;
    *(_QWORD *)(v88 + 72) = v91;
    *(_BYTE *)(v88 + 80) = 0;
    v92 = TimelineProviderContext.displaySize.getter(v90);
    v94 = v93;

    v95 = (int *)type metadata accessor for ThreeColumnDataEntry(0);
    v96 = (uint64_t *)(v84 + v95[5]);
    *v96 = v86;
    v96[1] = v85;
    *(_QWORD *)(v84 + v95[6]) = v88;
    v97 = (double *)(v84 + v95[7]);
    *v97 = v92;
    *((_QWORD *)v97 + 1) = v94;
    goto LABEL_39;
  }
  v71 = *(_QWORD *)(v0 + 184);
  v70 = *(_QWORD *)(v0 + 192);
  v72 = (uint64_t)v2;
  v73 = *(_QWORD *)(v0 + 168);
  v74 = *(_QWORD *)(v0 + 176);
  TimelineProviderContext.family.getter(v69);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v74 + 104))(v71, enum case for WidgetFamily.systemSmall(_:), v73);
  v75 = sub_100015884(&qword_100081DE0, (uint64_t (*)(uint64_t))&type metadata accessor for WidgetFamily, (uint64_t)&protocol conformance descriptor for WidgetFamily);
  dispatch thunk of RawRepresentable.rawValue.getter(v73, v75);
  dispatch thunk of RawRepresentable.rawValue.getter(v73, v75);
  v77 = *(_QWORD *)(v0 + 40);
  v76 = *(_QWORD *)(v0 + 48);
  v78 = *(void (**)(uint64_t, uint64_t))(v74 + 8);
  v78(v71, v73);
  v78(v70, v73);
  if (v77 == v76)
    v79 = 5;
  else
    v79 = 3;
  v80 = (_QWORD *)swift_task_alloc(dword_1000830F4);
  *(_QWORD *)(v0 + 264) = v80;
  *v80 = v0;
  v80[1] = sub_10003F424;
  return sub_10004C9B8(v72, *(_QWORD *)(v0 + 152), *(_QWORD *)(v0 + 160), v79);
}

uint64_t sub_10003F424(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 264);
  *(_QWORD *)(*(_QWORD *)v1 + 272) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_10003F480, 0, 0);
}

uint64_t sub_10003F480()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  double v30;
  uint64_t v31;
  uint64_t v32;
  int *v33;
  uint64_t *v34;
  double *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v42;
  uint64_t v43;

  v1 = *(_QWORD *)(v0 + 272);
  swift_bridgeObjectRetain_n(*(_QWORD *)(v0 + 160), 2);
  v2 = swift_bridgeObjectRetain_n(v1, 2);
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = *(_QWORD *)(v0 + 272);
    v7 = *(_QWORD *)(v0 + 152);
    v6 = *(_QWORD *)(v0 + 160);
    v8 = swift_slowAlloc(22, -1);
    v42 = swift_slowAlloc(64, -1);
    v43 = v42;
    *(_DWORD *)v8 = 136315394;
    swift_bridgeObjectRetain(v6);
    *(_QWORD *)(v0 + 56) = sub_10001DF04(v7, v6, &v43);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 56, v0 + 64, v8 + 4, v8 + 12);
    swift_bridgeObjectRelease_n(v6, 3);
    *(_WORD *)(v8 + 12) = 2080;
    v9 = swift_bridgeObjectRetain(v5);
    v10 = Array.description.getter(v9, &type metadata for ThreeColumnDataRow);
    v12 = v11;
    swift_bridgeObjectRelease(v5);
    *(_QWORD *)(v0 + 64) = sub_10001DF04(v10, v12, &v43);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 64, v0 + 72, v8 + 14, v8 + 22);
    swift_bridgeObjectRelease(v12);
    swift_bridgeObjectRelease_n(v5, 2);
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "...{%s} securitySummaryRows are %s", (uint8_t *)v8, 0x16u);
    swift_arrayDestroy(v42, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v42, -1, -1);
    swift_slowDealloc(v8, -1, -1);
  }
  else
  {
    v13 = *(_QWORD *)(v0 + 272);
    swift_bridgeObjectRelease_n(*(_QWORD *)(v0 + 160), 2);
    swift_bridgeObjectRelease_n(v13, 2);
  }

  Date.init()(v14);
  if (qword_1000816D8 != -1)
    swift_once(&qword_1000816D8, sub_10003FF64);
  v15 = *(_QWORD *)(v0 + 272);
  v17 = qword_10008A778;
  v16 = unk_10008A780;
  v18 = *(_QWORD *)(v15 + 16);
  v19 = swift_bridgeObjectRetain(unk_10008A780);
  if (!v18)
  {
    v21 = *(_QWORD *)(v0 + 200);
    v20 = *(_QWORD *)(v0 + 208);
    swift_bridgeObjectRelease(v15);
    v22 = sub_100003704(&qword_100081C88);
    v15 = swift_allocObject(v22, 88, 7);
    *(_OWORD *)(v15 + 16) = xmmword_1000607D0;
    v23 = String.LocalizationValue.init(stringLiteral:)(0xD00000000000002CLL, 0x8000000100068EC0);
    static Locale.current.getter(v23);
    v19 = String.init(localized:table:bundle:locale:comment:)(v20, 0x696C61636F4C4648, 0xED0000656C62617ALL, 0, v21, 0, 0, 256);
    *(_QWORD *)(v15 + 32) = 0x6C69662E6B636F6CLL;
    *(_QWORD *)(v15 + 40) = 0xE90000000000006CLL;
    *(_QWORD *)(v15 + 48) = 0;
    *(_QWORD *)(v15 + 56) = 0xE000000000000000;
    *(_QWORD *)(v15 + 64) = v19;
    *(_QWORD *)(v15 + 72) = v24;
    *(_BYTE *)(v15 + 80) = 0;
  }
  v25 = *(void **)(v0 + 248);
  v27 = *(_QWORD *)(v0 + 224);
  v26 = *(_QWORD *)(v0 + 232);
  v28 = *(_QWORD *)(v0 + 216);
  v29 = *(_QWORD *)(v0 + 136);
  v30 = TimelineProviderContext.displaySize.getter(v19);
  v32 = v31;

  (*(void (**)(uint64_t, uint64_t, uint64_t))(v27 + 32))(v29, v26, v28);
  v33 = (int *)type metadata accessor for ThreeColumnDataEntry(0);
  v34 = (uint64_t *)(v29 + v33[5]);
  *v34 = v17;
  v34[1] = v16;
  *(_QWORD *)(v29 + v33[6]) = v15;
  v35 = (double *)(v29 + v33[7]);
  *v35 = v30;
  *((_QWORD *)v35 + 1) = v32;
  v36 = *(_QWORD *)(v0 + 232);
  v38 = *(_QWORD *)(v0 + 200);
  v37 = *(_QWORD *)(v0 + 208);
  v40 = *(_QWORD *)(v0 + 184);
  v39 = *(_QWORD *)(v0 + 192);
  swift_task_dealloc(*(_QWORD *)(v0 + 240));
  swift_task_dealloc(v36);
  swift_task_dealloc(v37);
  swift_task_dealloc(v38);
  swift_task_dealloc(v39);
  swift_task_dealloc(v40);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10003F824(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  Swift::String v15;
  void *object;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  NSObject *v20;
  os_log_type_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  NSObject *v29;
  os_log_type_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  id v35;
  NSString v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  char *v42;
  char *v43;
  uint64_t v44;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;

  v7 = type metadata accessor for TimelineProviderContext(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(_QWORD *)(v8 + 64);
  __chkstk_darwin(v7);
  v10 = (char *)&v46 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_100003704(&qword_100081DB0);
  __chkstk_darwin(v11);
  v13 = (char *)&v46 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = qword_10008A788 + 1;
  if (__OFADD__(qword_10008A788, 1))
  {
    __break(1u);
  }
  else
  {
    v50 = v9;
    v51 = v13;
    ++qword_10008A788;
    v54 = 0x7974697275636553;
    v55 = 0xE900000000000020;
    v53 = v14;
    v15._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
    object = v15._object;
    String.append(_:)(v15);
    swift_bridgeObjectRelease(object);
    v3 = v55;
    v52 = v54;
    if (qword_100081680 == -1)
      goto LABEL_3;
  }
  swift_once(&qword_100081680, sub_100022448);
LABEL_3:
  v17 = type metadata accessor for Logger(0);
  v18 = sub_100003884(v17, (uint64_t)static DataModel.widgetLogger);
  v19 = swift_bridgeObjectRetain_n(v3, 2);
  v20 = Logger.logObject.getter(v19);
  v21 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v20, v21))
  {
    v22 = swift_slowAlloc(22, -1);
    v46 = v18;
    v23 = v22;
    v24 = swift_slowAlloc(64, -1);
    v48 = v10;
    v25 = v24;
    v54 = v24;
    *(_DWORD *)v23 = 136315394;
    v49 = v8;
    v47 = a3;
    swift_bridgeObjectRetain(v3);
    v53 = sub_10001DF04(v52, v3, &v54);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v53, &v54, v23 + 4, v23 + 12);
    swift_bridgeObjectRelease_n(v3, 3);
    *(_WORD *)(v23 + 12) = 2080;
    v53 = sub_10001DF04(0xD00000000000001BLL, 0x8000000100067E00, &v54);
    a3 = v47;
    v8 = v49;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v53, &v54, v23 + 14, v23 + 22);
    swift_arrayDestroy(v25, 2, (char *)&type metadata for Any + 8);
    v26 = v25;
    v10 = v48;
    swift_slowDealloc(v26, -1, -1);
    swift_slowDealloc(v23, -1, -1);

  }
  else
  {

    v27 = swift_bridgeObjectRelease_n(v3, 2);
  }
  if ((TimelineProviderContext.isPreview.getter(v27) & 1) == 0)
  {
    v47 = a1;
    v28 = swift_bridgeObjectRetain_n(v3, 2);
    v29 = Logger.logObject.getter(v28);
    v30 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v29, v30))
    {
      v31 = swift_slowAlloc(22, -1);
      v32 = swift_slowAlloc(64, -1);
      v48 = v10;
      v33 = v32;
      v54 = v32;
      *(_DWORD *)v31 = 136315394;
      v49 = v8;
      swift_bridgeObjectRetain(v3);
      v53 = sub_10001DF04(v52, v3, &v54);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v53, &v54, v31 + 4, v31 + 12);
      swift_bridgeObjectRelease_n(v3, 3);
      *(_WORD *)(v31 + 12) = 2080;
      v53 = sub_10001DF04(0xD000000000000027, 0x8000000100068DC0, &v54);
      v8 = v49;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v53, &v54, v31 + 14, v31 + 22);
      _os_log_impl((void *)&_mh_execute_header, v29, v30, "{%s} notifying homed that '%s' is active", (uint8_t *)v31, 0x16u);
      swift_arrayDestroy(v33, 2, (char *)&type metadata for Any + 8);
      v34 = v33;
      v10 = v48;
      swift_slowDealloc(v34, -1, -1);
      swift_slowDealloc(v31, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n(v3, 2);
    }
    v35 = objc_msgSend((id)objc_opt_self(NSDistributedNotificationCenter), "defaultCenter");
    v36 = String._bridgeToObjectiveC()();
    objc_msgSend(v35, "postNotificationName:object:", v36, 0);

    a1 = v47;
  }
  v37 = type metadata accessor for TaskPriority(0);
  v38 = (uint64_t)v51;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v37 - 8) + 56))(v51, 1, 1, v37);
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v10, a1, v7);
  v39 = *(unsigned __int8 *)(v8 + 80);
  v40 = (v39 + 48) & ~v39;
  v41 = (v50 + v40 + 7) & 0xFFFFFFFFFFFFFFF8;
  v42 = (char *)swift_allocObject(&unk_10007E350, v41 + 16, v39 | 7);
  *((_QWORD *)v42 + 2) = 0;
  *((_QWORD *)v42 + 3) = 0;
  *((_QWORD *)v42 + 4) = a2;
  *((_QWORD *)v42 + 5) = a3;
  (*(void (**)(char *, char *, uint64_t))(v8 + 32))(&v42[v40], v10, v7);
  v43 = &v42[v41];
  *(_QWORD *)v43 = v52;
  *((_QWORD *)v43 + 1) = v3;
  swift_retain(a3);
  v44 = sub_1000341A0(v38, (uint64_t)&unk_1000829F8, (uint64_t)v42);
  return swift_release(v44);
}

uint64_t sub_10003FDEC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v8[5] = a7;
  v8[6] = a8;
  v8[3] = a5;
  v8[4] = a6;
  v8[2] = a4;
  v9 = type metadata accessor for Date(0);
  v8[7] = v9;
  v10 = *(_QWORD *)(v9 - 8);
  v8[8] = v10;
  v11 = (*(_QWORD *)(v10 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v8[9] = swift_task_alloc(v11);
  v8[10] = swift_task_alloc(v11);
  v12 = type metadata accessor for TimelineReloadPolicy(0);
  v8[11] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v12 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_100003704(&qword_100081DC8);
  v8[12] = v13;
  v14 = *(_QWORD *)(v13 - 8);
  v8[13] = v14;
  v8[14] = swift_task_alloc((*(_QWORD *)(v14 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_10003FEB0, 0, 0);
}

uint64_t sub_10003FEB0()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t **v9;

  v1 = sub_100003704(&qword_100081DD0);
  v2 = type metadata accessor for ThreeColumnDataEntry(0);
  v0[15] = v2;
  v3 = *(_QWORD *)(v2 - 8);
  v4 = *(_QWORD *)(v3 + 72);
  v5 = *(unsigned __int8 *)(v3 + 80);
  v6 = (v5 + 32) & ~v5;
  v7 = swift_allocObject(v1, v6 + v4, v5 | 7);
  v0[16] = v7;
  *(_OWORD *)(v7 + 16) = xmmword_1000607D0;
  v8 = v7 + v6;
  v9 = (uint64_t **)swift_task_alloc(dword_100082A04);
  v0[17] = (uint64_t)v9;
  *v9 = v0;
  v9[1] = (uint64_t *)sub_100014490;
  return sub_10003E68C(v8, v0[4], v0[5], v0[6]);
}

uint64_t sub_10003FF64()
{
  uint64_t v0;
  _BYTE *v1;
  uint64_t v2;
  _BYTE *v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  _BYTE v7[16];

  type metadata accessor for Locale(0);
  __chkstk_darwin();
  v1 = &v7[-((v0 + 15) & 0xFFFFFFFFFFFFFFF0)];
  type metadata accessor for String.LocalizationValue(0);
  __chkstk_darwin();
  v3 = &v7[-((v2 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v4 = String.LocalizationValue.init(stringLiteral:)(0xD000000000000020, 0x8000000100068E20);
  static Locale.current.getter(v4);
  result = String.init(localized:table:bundle:locale:comment:)(v3, 0x696C61636F4C4648, 0xED0000656C62617ALL, 0, v1, 0, 0, 256);
  qword_10008A778 = result;
  unk_10008A780 = v6;
  return result;
}

uint64_t sub_10004005C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t OpaqueTypeConformance2;
  _QWORD v17[2];

  v1 = v0;
  v2 = sub_100003704(&qword_100081D90);
  __chkstk_darwin(v2);
  v4 = (char *)v17 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for ThreeColumnCategoryView(0);
  __chkstk_darwin(v5);
  v7 = (char *)v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_100003704(&qword_100081D98);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)v17 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100014F18(v1, (uint64_t)v7);
  v12 = &v7[*(int *)(v5 + 20)];
  *(_QWORD *)v12 = swift_getKeyPath(&unk_1000638B8);
  v13 = sub_100003704(&qword_100081DA0);
  swift_storeEnumTagMultiPayload(v12, v13, 0);
  URL.init(string:)(0xD00000000000002FLL, 0x8000000100068E50);
  v14 = sub_100015884(&qword_100081DA8, type metadata accessor for ThreeColumnCategoryView, (uint64_t)&unk_1000643A8);
  View.widgetURL(_:)(v4, v5, v14);
  sub_1000154D8((uint64_t)v4);
  sub_100015784((uint64_t)v7, type metadata accessor for ThreeColumnCategoryView);
  v17[0] = v5;
  v17[1] = v14;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(v17, &opaque type descriptor for <<opaque return type of View.widgetURL(_:)>>, 1);
  View.accessibilityIdentifier(_:)(0xD00000000000003CLL, 0x8000000100068E80, v8, OpaqueTypeConformance2);
  return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, v8);
}

uint64_t sub_100040258@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t OpaqueTypeConformance2;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void *v39;
  unint64_t v40;
  unint64_t v41;
  _QWORD v42[3];

  v37 = a1;
  v1 = type metadata accessor for Locale(0);
  __chkstk_darwin(v1);
  v34 = (char *)&v33 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = type metadata accessor for String.LocalizationValue(0);
  __chkstk_darwin(v3);
  v5 = (char *)&v33 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_100003704(&qword_100082920);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v33 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_100003704(&qword_100082928);
  v33 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v12 = (char *)&v33 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_100003704(&qword_100082930);
  v35 = *(_QWORD *)(v13 - 8);
  v36 = v13;
  __chkstk_darwin(v13);
  v15 = (char *)&v33 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for SecurityCategoryWidgetView(0);
  sub_100015884(&qword_100082938, type metadata accessor for SecurityCategoryWidgetView, (uint64_t)&unk_100063864);
  sub_100040684();
  StaticConfiguration.init<A>(kind:provider:content:)(0xD000000000000027, 0x8000000100068DC0);
  if (qword_1000816D8 != -1)
    swift_once(&qword_1000816D8, sub_10003FF64);
  v38 = qword_10008A778;
  v39 = (void *)unk_10008A780;
  v16 = sub_1000406C8();
  v17 = sub_1000037D4();
  WidgetConfiguration.configurationDisplayName<A>(_:)(&v38, v6, &type metadata for String, v16, v17);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  v18 = String.LocalizationValue.init(stringLiteral:)(0xD000000000000022, 0x8000000100068DF0);
  v19 = v34;
  static Locale.current.getter(v18);
  v20 = String.init(localized:table:bundle:locale:comment:)(v5, 0x696C61636F4C4648, 0xED0000656C62617ALL, 0, v19, 0, 0, 256);
  v22 = v21;
  v42[0] = v20;
  v42[1] = v21;
  v38 = v6;
  v39 = &type metadata for String;
  v40 = v16;
  v41 = v17;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v38, &opaque type descriptor for <<opaque return type of WidgetConfiguration.configurationDisplayName<A>(_:)>>, 1);
  WidgetConfiguration.description<A>(_:)(v42, v10, &type metadata for String, OpaqueTypeConformance2, v17);
  swift_bridgeObjectRelease(v22);
  (*(void (**)(char *, uint64_t))(v33 + 8))(v12, v10);
  v24 = sub_100003704(&qword_100081CE0);
  v25 = type metadata accessor for WidgetFamily(0);
  v26 = *(_QWORD *)(v25 - 8);
  v27 = *(unsigned __int8 *)(v26 + 80);
  v28 = (v27 + 32) & ~v27;
  v29 = swift_allocObject(v24, v28 + *(_QWORD *)(v26 + 72), v27 | 7);
  *(_OWORD *)(v29 + 16) = xmmword_1000607D0;
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v26 + 104))(v29 + v28, enum case for WidgetFamily.accessoryRectangular(_:), v25);
  v38 = v10;
  v39 = &type metadata for String;
  v40 = OpaqueTypeConformance2;
  v41 = v17;
  v30 = swift_getOpaqueTypeConformance2(&v38, &opaque type descriptor for <<opaque return type of WidgetConfiguration.description<A>(_:)>>, 1);
  v31 = v36;
  WidgetConfiguration.supportedFamilies(_:)(v29, v36, v30);
  swift_bridgeObjectRelease(v29);
  return (*(uint64_t (**)(char *, uint64_t))(v35 + 8))(v15, v31);
}

uint64_t type metadata accessor for SecurityCategoryWidgetView(uint64_t a1)
{
  uint64_t result;

  result = qword_1000829A8;
  if (!qword_1000829A8)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for SecurityCategoryWidgetView);
  return result;
}

unint64_t sub_100040684()
{
  unint64_t result;

  result = qword_100082940;
  if (!qword_100082940)
  {
    result = swift_getWitnessTable(&unk_10006380C, &type metadata for SecurityCategoryTimelineProvider);
    atomic_store(result, (unint64_t *)&qword_100082940);
  }
  return result;
}

unint64_t sub_1000406C8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100082948;
  if (!qword_100082948)
  {
    v1 = sub_100003744(&qword_100082920);
    result = swift_getWitnessTable(&protocol conformance descriptor for StaticConfiguration<A>, v1);
    atomic_store(result, (unint64_t *)&qword_100082948);
  }
  return result;
}

ValueMetadata *type metadata accessor for SecurityCategoryTimelineProvider()
{
  return &type metadata for SecurityCategoryTimelineProvider;
}

uint64_t sub_100040724(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100040730);
}

uint64_t sub_100040730(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for ThreeColumnDataEntry(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(a1, a2, v4);
}

uint64_t sub_10004076C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100040778);
}

uint64_t sub_100040778(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for ThreeColumnDataEntry(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(a1, a2, a2, v4);
}

uint64_t sub_1000407B8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t OpaqueTypeConformance2;
  uint64_t v6;
  uint64_t v8;
  void *v9;
  unint64_t v10;
  unint64_t v11;

  v0 = sub_100003744(&qword_100082930);
  v1 = sub_100003744(&qword_100082928);
  v2 = sub_100003744(&qword_100082920);
  v3 = sub_1000406C8();
  v4 = sub_1000037D4();
  v8 = v2;
  v9 = &type metadata for String;
  v10 = v3;
  v11 = v4;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v8, &opaque type descriptor for <<opaque return type of WidgetConfiguration.configurationDisplayName<A>(_:)>>, 1);
  v8 = v1;
  v9 = &type metadata for String;
  v10 = OpaqueTypeConformance2;
  v11 = v4;
  v6 = swift_getOpaqueTypeConformance2(&v8, &opaque type descriptor for <<opaque return type of WidgetConfiguration.description<A>(_:)>>, 1);
  v8 = v0;
  v9 = (void *)v6;
  return swift_getOpaqueTypeConformance2(&v8, &opaque type descriptor for <<opaque return type of WidgetConfiguration.supportedFamilies(_:)>>, 1);
}

uint64_t sub_100040880(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_10006BFC4, 1);
}

uint64_t sub_100040898(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;

  v4 = *(_QWORD *)(type metadata accessor for TimelineProviderContext(0) - 8);
  v5 = (*(unsigned __int8 *)(v4 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v6 = v1[2];
  v7 = v1[3];
  v8 = v1[4];
  v9 = v1[5];
  v10 = (uint64_t)v1 + v5;
  v11 = (_QWORD *)((char *)v1 + ((*(_QWORD *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFFFF8));
  v12 = *v11;
  v13 = v11[1];
  v14 = (_QWORD *)swift_task_alloc(dword_1000829F4);
  *(_QWORD *)(v2 + 16) = v14;
  *v14 = v2;
  v14[1] = sub_1000155DC;
  return sub_10003FDEC(a1, v6, v7, v8, v9, v10, v12, v13);
}

uint64_t sub_100040958(uint64_t a1, void *a2)
{
  uint64_t v2;
  uint64_t v3;
  double *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  id v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  double *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t result;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  double *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  double *v41;
  id v42;
  double *v43;
  _QWORD v44[8];
  double *v45;

  v3 = v2;
  v4 = _swiftEmptyArrayStorage;
  v45 = _swiftEmptyArrayStorage;
  v34 = *(_QWORD *)(a1 + 16);
  if (!v34)
    return (uint64_t)v4;
  v33 = a1 + 32;
  v31 = a1;
  swift_bridgeObjectRetain(a1);
  v6 = 0;
  v32 = a2;
  while (1)
  {
    v10 = (_QWORD *)(v33 + 56 * v6);
    v11 = v10[2];
    v12 = v10[3];
    v14 = v10[4];
    v13 = v10[5];
    v15 = v10[6];
    v16 = v10[1];
    v44[0] = *v10;
    v44[1] = v16;
    v44[2] = v11;
    v44[3] = v12;
    v44[4] = v14;
    v44[5] = v13;
    v44[6] = v15;
    v40 = v16;
    swift_bridgeObjectRetain(v16);
    swift_bridgeObjectRetain(v11);
    swift_bridgeObjectRetain(v12);
    swift_bridgeObjectRetain(v14);
    sub_10000389C(v13, v15);
    if (qword_100081670 != -1)
      break;
    if (a2)
      goto LABEL_7;
LABEL_3:
    v7 = v40;
    v8 = v11;
    v9 = (uint64_t)v4;
LABEL_4:
    ++v6;
    swift_bridgeObjectRelease(v8);
    swift_bridgeObjectRelease(v7);
    swift_bridgeObjectRelease(v14);
    swift_bridgeObjectRelease(v12);
    sub_100003984(v13, v15);
    sub_1000229C0(v9);
    a2 = v32;
    if (v6 == v34)
    {
      swift_bridgeObjectRelease(v31);
      return (uint64_t)v45;
    }
  }
  swift_once(&qword_100081670, sub_100021008);
  if (!a2)
    goto LABEL_3;
LABEL_7:
  v38 = v13;
  v39 = v15;
  v17 = objc_msgSend(a2, "accessories", v31);
  v18 = sub_10002F9D4();
  v7 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v17, v18);

  v43 = v4;
  if ((unint64_t)v7 >> 62)
  {
    if (v7 < 0)
      v28 = v7;
    else
      v28 = v7 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v40);
    swift_bridgeObjectRetain(v11);
    swift_bridgeObjectRetain(v12);
    swift_bridgeObjectRetain(v14);
    sub_10000389C(v38, v15);
    swift_bridgeObjectRetain(v7);
    v29 = v28;
    v13 = v38;
    v19 = _CocoaArrayWrapper.endIndex.getter(v29);
  }
  else
  {
    v19 = *(_QWORD *)((v7 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain(v40);
    swift_bridgeObjectRetain(v11);
    swift_bridgeObjectRetain(v12);
    swift_bridgeObjectRetain(v14);
    v13 = v38;
    sub_10000389C(v38, v39);
    swift_bridgeObjectRetain(v7);
  }
  v37 = v12;
  v36 = v6;
  if (!v19)
  {
    v24 = v11;
    v25 = v40;
    swift_bridgeObjectRelease(v40);
    swift_bridgeObjectRelease(v7);
    v26 = v4;
    v35 = v4;
LABEL_19:
    swift_bridgeObjectRelease(v14);
    v12 = v37;
    swift_bridgeObjectRelease(v37);
    v27 = v24;
    swift_bridgeObjectRelease(v24);
    v15 = v39;
    sub_100003984(v13, v39);
    swift_bridgeObjectRelease(v27);
    v8 = v25;
    v4 = v26;
    v9 = (uint64_t)v35;
    v6 = v36;
    goto LABEL_4;
  }
  v20 = 4;
  while (1)
  {
    v21 = (v7 & 0xC000000000000001) != 0
        ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v20 - 4, v7)
        : *(id *)(v7 + 8 * v20);
    v22 = v21;
    v23 = v20 - 3;
    if (__OFADD__(v20 - 4, 1))
      break;
    v42 = v21;
    sub_10001C378(&v42, (uint64_t)v44, &v41);
    if (v3)
      goto LABEL_29;
    v3 = 0;

    sub_1000229C0((uint64_t)v41);
    ++v20;
    if (v23 == v19)
    {
      v24 = v11;
      v25 = v40;
      swift_bridgeObjectRelease(v40);
      swift_bridgeObjectRelease(v7);
      v35 = v43;
      v26 = _swiftEmptyArrayStorage;
      v13 = v38;
      goto LABEL_19;
    }
  }
  __break(1u);
LABEL_29:
  swift_bridgeObjectRelease(v7);

  result = swift_bridgeObjectRelease(v43);
  __break(1u);
  return result;
}

uint64_t sub_100040CD4(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;

  v4 = *(_QWORD *)(type metadata accessor for TimelineProviderContext(0) - 8);
  v5 = (*(unsigned __int8 *)(v4 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v6 = v1[2];
  v7 = v1[3];
  v8 = v1[4];
  v9 = v1[5];
  v10 = (uint64_t)v1 + v5;
  v11 = (_QWORD *)((char *)v1 + ((*(_QWORD *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFFFF8));
  v12 = *v11;
  v13 = v11[1];
  v14 = (_QWORD *)swift_task_alloc(dword_100082A0C);
  *(_QWORD *)(v2 + 16) = v14;
  *v14 = v2;
  v14[1] = sub_1000158C4;
  return sub_10003E5F8(a1, v6, v7, v8, v9, v10, v12, v13);
}

uint64_t sub_100040D94(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;

  v5[16] = a4;
  v5[17] = a5;
  v5[14] = a2;
  v5[15] = a3;
  v5[13] = a1;
  v6 = type metadata accessor for Date(0);
  v5[18] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v5[19] = v7;
  v5[20] = swift_task_alloc((*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_100040DFC, 0, 0);
}

uint64_t sub_100040DFC()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  _BOOL4 v6;
  unint64_t v7;
  __objc2_prot_list *v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  id v12;
  void *v13;
  id v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  void *v21;
  id v22;
  void *v23;
  id v24;
  uint64_t v25;
  void *v26;
  Swift::String_optional v27;
  void *v28;
  uint64_t v29;
  id v30;
  NSObject *v31;
  os_log_type_t v32;
  _BOOL4 v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  id v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  void *v41;
  NSObject *v42;
  os_log_type_t v43;
  _BOOL4 v44;
  unint64_t v45;
  __objc2_prot_list *v46;
  uint64_t v47;
  uint64_t v48;
  id v49;
  void *v50;
  id v51;
  uint64_t v52;
  unint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  id v57;
  _QWORD *v58;
  void *v60;
  void *v61;
  uint64_t v62;
  uint64_t v63;
  id v64;
  id v65;
  uint64_t v66;
  uint64_t (*v67)(uint64_t);
  uint64_t v68;

  v66 = v0 + 80;
  if (qword_100081680 != -1)
    swift_once(&qword_100081680, sub_100022448);
  v1 = *(_QWORD *)(v0 + 136);
  v2 = *(void **)(v0 + 112);
  v3 = type metadata accessor for Logger(0);
  *(_QWORD *)(v0 + 168) = sub_100003884(v3, (uint64_t)static DataModel.widgetLogger);
  swift_bridgeObjectRetain_n(v1, 2);
  v4 = Logger.logObject.getter(v2);
  v5 = static os_log_type_t.default.getter();
  v6 = os_log_type_enabled(v4, v5);
  v7 = *(_QWORD *)(v0 + 136);
  v8 = &DataModel;
  if (v6)
  {
    v9 = *(_QWORD *)(v0 + 128);
    v10 = *(void **)(v0 + 112);
    v11 = swift_slowAlloc(32, -1);
    v62 = swift_slowAlloc(96, -1);
    v68 = v62;
    *(_DWORD *)v11 = 136315650;
    swift_bridgeObjectRetain(v7);
    *(_QWORD *)(v0 + 80) = sub_10001DF04(v9, v7, &v68);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v66, v0 + 88, v11 + 4, v11 + 12);
    swift_bridgeObjectRelease_n(v7, 3);
    *(_WORD *)(v11 + 12) = 2080;
    *(_QWORD *)(v0 + 88) = sub_10001DF04(0xD00000000000001ELL, 0x8000000100068630, &v68);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 88, v0 + 96, v11 + 14, v11 + 22);
    *(_WORD *)(v11 + 22) = 2080;
    v12 = objc_msgSend(v10, "accessory");
    if (v12
      && (v13 = v12, v14 = objc_msgSend(v12, "identifier"), v13, v14))
    {
      v15 = static String._unconditionallyBridgeFromObjectiveC(_:)(v14);
      v17 = v16;

      v18 = v15;
      v8 = &DataModel;
      v19 = v62;
    }
    else
    {
      v17 = 0xE400000000000000;
      v8 = &DataModel;
      v19 = v62;
      v18 = 1819047278;
    }
    v21 = *(void **)(v0 + 112);
    *(_QWORD *)(v0 + 96) = sub_10001DF04(v18, v17, &v68);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 96, v0 + 104, v11 + 24, v11 + 32);
    swift_bridgeObjectRelease(v17);

    swift_arrayDestroy(v19, 3, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v19, -1, -1);
    swift_slowDealloc(v11, -1, -1);

  }
  else
  {
    v20 = *(void **)(v0 + 112);
    swift_bridgeObjectRelease_n(*(_QWORD *)(v0 + 136), 2);

  }
  if (qword_100081670 != -1)
    swift_once(&qword_100081670, sub_100021008);
  v22 = objc_msgSend(*(id *)(v0 + 112), (SEL)v8[366].count, v62);
  v23 = v22;
  if (v22)
  {
    v24 = objc_msgSend(v22, "identifier");

    if (v24)
    {
      v25 = static String._unconditionallyBridgeFromObjectiveC(_:)(v24);
      v23 = v26;

    }
    else
    {
      v25 = 0;
      v23 = 0;
    }
  }
  else
  {
    v25 = 0;
  }
  v27.value._countAndFlagsBits = v25;
  v27.value._object = v23;
  v28 = (void *)DataModel.accessoryFromAnyHome(for:)(v27);
  *(_QWORD *)(v0 + 176) = v28;
  swift_bridgeObjectRelease(v23);
  v29 = *(_QWORD *)(v0 + 136);
  if (v28)
  {
    swift_bridgeObjectRetain_n(v29, 2);
    v30 = v28;
    v31 = Logger.logObject.getter(v30);
    v32 = static os_log_type_t.default.getter();
    v33 = os_log_type_enabled(v31, v32);
    v34 = *(_QWORD *)(v0 + 136);
    if (v33)
    {
      v35 = *(_QWORD *)(v0 + 128);
      v36 = swift_slowAlloc(22, -1);
      v64 = (id)swift_slowAlloc(64, -1);
      v68 = (uint64_t)v64;
      *(_DWORD *)v36 = 136315394;
      swift_bridgeObjectRetain(v34);
      *(_QWORD *)(v0 + 64) = sub_10001DF04(v35, v34, &v68);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 64, v0 + 72, v36 + 4, v36 + 12);
      swift_bridgeObjectRelease_n(v34, 3);
      *(_WORD *)(v36 + 12) = 2080;
      v37 = objc_msgSend(v30, "name");
      v38 = static String._unconditionallyBridgeFromObjectiveC(_:)(v37);
      v40 = v39;

      *(_QWORD *)(v0 + 72) = sub_10001DF04(v38, v40, &v68);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 72, v66, v36 + 14, v36 + 22);
      swift_bridgeObjectRelease(v40);

      _os_log_impl((void *)&_mh_execute_header, v31, v32, "...{%s} found homeAccessory: %s", (uint8_t *)v36, 0x16u);
      swift_arrayDestroy(v64, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v64, -1, -1);
      swift_slowDealloc(v36, -1, -1);
    }
    else
    {
      swift_bridgeObjectRelease_n(*(_QWORD *)(v0 + 136), 2);

    }
    v56 = unk_1000830E4;
    v67 = (uint64_t (*)(uint64_t))((char *)&dword_1000830E0 + dword_1000830E0);
    v57 = v30;
    v58 = (_QWORD *)swift_task_alloc(v56);
    *(_QWORD *)(v0 + 184) = v58;
    *v58 = v0;
    v58[1] = sub_1000415B0;
    return v67((uint64_t)v28);
  }
  else
  {
    v41 = *(void **)(v0 + 112);
    swift_bridgeObjectRetain_n(v29, 2);
    v42 = Logger.logObject.getter(v41);
    v43 = static os_log_type_t.default.getter();
    v44 = os_log_type_enabled(v42, v43);
    v45 = *(_QWORD *)(v0 + 136);
    if (v44)
    {
      v46 = v8;
      v47 = *(_QWORD *)(v0 + 128);
      v65 = *(id *)(v0 + 112);
      v48 = swift_slowAlloc(22, -1);
      v63 = swift_slowAlloc(64, -1);
      v68 = v63;
      *(_DWORD *)v48 = 136315394;
      swift_bridgeObjectRetain(v45);
      *(_QWORD *)(v0 + 16) = sub_10001DF04(v47, v45, &v68);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 16, v0 + 24, v48 + 4, v48 + 12);
      swift_bridgeObjectRelease_n(v45, 3);
      *(_WORD *)(v48 + 12) = 2080;
      v49 = objc_msgSend(v65, (SEL)v46[366].count);
      if (v49
        && (v50 = v49, v51 = objc_msgSend(v49, "identifier"), v50, v51))
      {
        v52 = static String._unconditionallyBridgeFromObjectiveC(_:)(v51);
        v54 = v53;

        v55 = v63;
      }
      else
      {
        v54 = 0xE400000000000000;
        v55 = v63;
        v52 = 1819047278;
      }
      v61 = *(void **)(v0 + 112);
      *(_QWORD *)(v0 + 24) = sub_10001DF04(v52, v54, &v68);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 24, v0 + 32, v48 + 14, v48 + 22);
      swift_bridgeObjectRelease(v54);

      _os_log_impl((void *)&_mh_execute_header, v42, v43, "...{%s} did NOT find HMAccessory for %s", (uint8_t *)v48, 0x16u);
      swift_arrayDestroy(v55, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v55, -1, -1);
      swift_slowDealloc(v48, -1, -1);
    }
    else
    {
      v60 = *(void **)(v0 + 112);
      swift_bridgeObjectRelease_n(*(_QWORD *)(v0 + 136), 2);

    }
    sub_100041A08(*(_QWORD *)(v0 + 104));
    swift_task_dealloc(*(_QWORD *)(v0 + 160));
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_1000415B0(uint64_t a1, char a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;

  v3 = *v2;
  v5 = *(void **)(*v2 + 176);
  v4 = *(_QWORD *)(*v2 + 184);
  *(_QWORD *)(v3 + 192) = a1;
  *(_BYTE *)(v3 + 200) = a2;
  swift_task_dealloc(v4);

  return swift_task_switch(sub_100041614, 0, 0);
}

uint64_t sub_100041614()
{
  uint64_t v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  BOOL v14;
  const char *v15;
  unint64_t v16;
  uint64_t v17;
  void *v18;
  void *v19;
  int v20;
  uint64_t v21;
  id v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  id v29;
  void *v30;
  id v31;
  uint64_t v32;
  uint64_t v33;
  const char *v35;
  unint64_t v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  double v42;
  uint64_t v43;
  uint64_t v44;
  int *v45;
  uint64_t v46;
  _QWORD *v47;
  double *v48;
  char v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;

  v1 = swift_bridgeObjectRetain_n(*(_QWORD *)(v0 + 136), 2);
  v2 = Logger.logObject.getter(v1);
  v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    v4 = *(_BYTE *)(v0 + 200);
    v5 = *(_QWORD *)(v0 + 192);
    v6 = *(_QWORD *)(v0 + 128);
    v7 = *(_QWORD *)(v0 + 136);
    v8 = swift_slowAlloc(42, -1);
    v55 = swift_slowAlloc(96, -1);
    v57 = v55;
    *(_DWORD *)v8 = 136315906;
    swift_bridgeObjectRetain(v7);
    *(_QWORD *)(v0 + 32) = sub_10001DF04(v6, v7, &v57);
    v53 = v0 + 56;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 32, v0 + 40, v8 + 4, v8 + 12);
    swift_bridgeObjectRelease_n(v7, 3);
    *(_WORD *)(v8 + 12) = 2048;
    v9 = v4 & 1;
    if ((v4 & 1) != 0)
      v10 = -1;
    else
      v10 = v5;
    *(_QWORD *)(v0 + 40) = v10;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 40, v0 + 48, v8 + 14, v8 + 22);
    *(_WORD *)(v8 + 22) = 2080;
    v11 = sub_1000536BC(v5, v4 & 1);
    v13 = v12;
    *(_QWORD *)(v0 + 48) = sub_10001DF04(v11, v12, &v57);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 48, v53, v8 + 24, v8 + 32);
    swift_bridgeObjectRelease(v13);
    v14 = v5 == 4 && v9 == 0;
    *(_WORD *)(v8 + 32) = 2080;
    v15 = "light.beacon.max.fill";
    if (!v14)
      v15 = "light.beacon.min.fill";
    v16 = (unint64_t)(v15 - 32) | 0x8000000000000000;
    *(_QWORD *)(v0 + 56) = sub_10001DF04(0xD000000000000015, v16, &v57);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v53, v0 + 64, v8 + 34, v8 + 42);
    swift_bridgeObjectRelease(v16);
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "...{%s} got value: %ld, statusString: %s, iconName %s", (uint8_t *)v8, 0x2Au);
    swift_arrayDestroy(v55, 3, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v55, -1, -1);
    swift_slowDealloc(v8, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease_n(*(_QWORD *)(v0 + 136), 2);
  }

  v17 = *(_QWORD *)(v0 + 192);
  v18 = *(void **)(v0 + 176);
  v19 = *(void **)(v0 + 112);
  v20 = *(_BYTE *)(v0 + 200) & 1;
  Date.init()(v21);
  v22 = objc_msgSend(v18, "name");
  v23 = static String._unconditionallyBridgeFromObjectiveC(_:)(v22);
  v25 = v24;

  v26 = sub_1000536BC(v17, v20);
  v28 = v27;
  v50 = sub_10001DCB0(v17, v20, (uint64_t)&off_10007BEF8);
  v29 = objc_msgSend(v19, "accessory");
  v30 = v29;
  v54 = v25;
  v56 = v23;
  v51 = v28;
  v52 = v26;
  if (v29)
  {
    v31 = objc_msgSend(v29, "identifier");

    if (v31)
    {
      v30 = (void *)static String._unconditionallyBridgeFromObjectiveC(_:)(v31);
      v33 = v32;

      goto LABEL_17;
    }
    v30 = 0;
  }
  v33 = 0;
LABEL_17:
  if (v17 == 4 && v20 == 0)
    v35 = "light.beacon.max.fill";
  else
    v35 = "light.beacon.min.fill";
  v36 = (unint64_t)(v35 - 32) | 0x8000000000000000;
  v37 = *(void **)(v0 + 176);
  v39 = *(_QWORD *)(v0 + 152);
  v38 = *(_QWORD *)(v0 + 160);
  v40 = *(_QWORD *)(v0 + 144);
  v41 = *(_QWORD *)(v0 + 104);
  v42 = TimelineProviderContext.displaySize.getter(v29);
  v44 = v43;

  (*(void (**)(uint64_t, uint64_t, uint64_t))(v39 + 32))(v41, v38, v40);
  v45 = (int *)type metadata accessor for SecurityAccessoryEntry(0);
  v46 = v41 + v45[5];
  *(_QWORD *)v46 = v56;
  *(_QWORD *)(v46 + 8) = v54;
  *(_QWORD *)(v46 + 16) = 0xD000000000000015;
  *(_QWORD *)(v46 + 24) = v36;
  *(_QWORD *)(v46 + 32) = v52;
  *(_QWORD *)(v46 + 40) = v51;
  *(_BYTE *)(v46 + 48) = v50 & 1;
  v47 = (_QWORD *)(v41 + v45[6]);
  *v47 = v30;
  v47[1] = v33;
  v48 = (double *)(v41 + v45[7]);
  *v48 = v42;
  *((_QWORD *)v48 + 1) = v44;
  swift_task_dealloc(*(_QWORD *)(v0 + 160));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

int *sub_100041A08@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  double v17;
  uint64_t v18;
  uint64_t v19;
  int *result;
  uint64_t v21;
  _QWORD *v22;
  double *v23;
  _BYTE v24[16];

  v2 = type metadata accessor for Locale(0);
  __chkstk_darwin(v2);
  v4 = &v24[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v5 = type metadata accessor for String.LocalizationValue(0);
  __chkstk_darwin(v5);
  v7 = &v24[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v8 = type metadata accessor for Date(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = __chkstk_darwin(v8);
  v12 = &v24[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  Date.init()(v10);
  v13 = String.LocalizationValue.init(stringLiteral:)(0xD000000000000022, 0x8000000100068F10);
  static Locale.current.getter(v13);
  v14 = String.init(localized:table:bundle:locale:comment:)(v7, 0xD00000000000001DLL, 0x8000000100068680, 0, v4, 0, 0, 256);
  v16 = v15;
  v17 = TimelineProviderContext.displaySize.getter(v14);
  v19 = v18;
  (*(void (**)(uint64_t, _BYTE *, uint64_t))(v9 + 32))(a1, v12, v8);
  result = (int *)type metadata accessor for SecurityAccessoryEntry(0);
  v21 = a1 + result[5];
  *(_QWORD *)v21 = v14;
  *(_QWORD *)(v21 + 8) = v16;
  *(_QWORD *)(v21 + 16) = 0xD000000000000015;
  *(_QWORD *)(v21 + 24) = 0x8000000100067B20;
  *(_QWORD *)(v21 + 32) = 0x9380E29380E2;
  *(_QWORD *)(v21 + 40) = 0xA600000000000000;
  *(_BYTE *)(v21 + 48) = 0;
  v22 = (_QWORD *)(a1 + result[6]);
  *v22 = 0;
  v22[1] = 0;
  v23 = (double *)(a1 + result[7]);
  *v23 = v17;
  *((_QWORD *)v23 + 1) = v19;
  return result;
}

uint64_t *sub_100041BD4(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  int v5;
  int *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;

  v4 = type metadata accessor for SingleGaugeEntry(0);
  v5 = *(_DWORD *)(*(_QWORD *)(v4 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v17 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v17 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v17);
  }
  else
  {
    v6 = (int *)v4;
    v7 = type metadata accessor for Date(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = v6[5];
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    *(_OWORD *)v9 = *(_OWORD *)v10;
    v9[24] = v10[24];
    *((_QWORD *)v9 + 2) = *((_QWORD *)v10 + 2);
    v11 = *((_QWORD *)v10 + 5);
    *((_QWORD *)v9 + 4) = *((_QWORD *)v10 + 4);
    *((_QWORD *)v9 + 5) = v11;
    v12 = *((_QWORD *)v10 + 7);
    *((_QWORD *)v9 + 6) = *((_QWORD *)v10 + 6);
    *((_QWORD *)v9 + 7) = v12;
    v9[64] = v10[64];
    v13 = v6[6];
    v14 = (uint64_t *)((char *)a1 + v13);
    v15 = (uint64_t *)((char *)a2 + v13);
    v16 = v15[1];
    *v14 = *v15;
    v14[1] = v16;
    *(_OWORD *)((char *)a1 + v6[7]) = *(_OWORD *)((char *)a2 + v6[7]);
    swift_bridgeObjectRetain(v11);
    swift_bridgeObjectRetain(v12);
    swift_bridgeObjectRetain(v16);
  }
  return a1;
}

uint64_t type metadata accessor for SingleGaugeEntry(uint64_t a1)
{
  return sub_100030820(a1, qword_100082B20, (uint64_t)&nominal type descriptor for SingleGaugeEntry);
}

uint64_t sub_100041CE4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  v3 = type metadata accessor for SingleGaugeEntry(0);
  v4 = a1 + *(int *)(v3 + 20);
  swift_bridgeObjectRelease(*(_QWORD *)(v4 + 40));
  swift_bridgeObjectRelease(*(_QWORD *)(v4 + 56));
  return swift_bridgeObjectRelease(*(_QWORD *)(a1 + *(int *)(v3 + 24) + 8));
}

uint64_t sub_100041D54(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;

  v4 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, a2, v4);
  v5 = (int *)type metadata accessor for SingleGaugeEntry(0);
  v6 = v5[5];
  v7 = a1 + v6;
  v8 = a2 + v6;
  *(_OWORD *)v7 = *(_OWORD *)(a2 + v6);
  *(_QWORD *)(v7 + 16) = *(_QWORD *)(a2 + v6 + 16);
  *(_BYTE *)(v7 + 24) = *(_BYTE *)(a2 + v6 + 24);
  v10 = *(_QWORD *)(a2 + v6 + 32);
  v9 = *(_QWORD *)(a2 + v6 + 40);
  *(_QWORD *)(v7 + 32) = v10;
  *(_QWORD *)(v7 + 40) = v9;
  v11 = *(_QWORD *)(v8 + 56);
  *(_QWORD *)(v7 + 48) = *(_QWORD *)(v8 + 48);
  *(_QWORD *)(v7 + 56) = v11;
  *(_BYTE *)(v7 + 64) = *(_BYTE *)(v8 + 64);
  v12 = v5[6];
  v13 = (_QWORD *)(a1 + v12);
  v14 = (_QWORD *)(a2 + v12);
  v15 = v14[1];
  *v13 = *v14;
  v13[1] = v15;
  *(_OWORD *)(a1 + v5[7]) = *(_OWORD *)(a2 + v5[7]);
  swift_bridgeObjectRetain(v9);
  swift_bridgeObjectRetain(v11);
  swift_bridgeObjectRetain(v15);
  return a1;
}

uint64_t sub_100041E1C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;

  v4 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 24))(a1, a2, v4);
  v5 = (int *)type metadata accessor for SingleGaugeEntry(0);
  v6 = v5[5];
  v7 = a1 + v6;
  v8 = a2 + v6;
  *(_QWORD *)v7 = *(_QWORD *)(a2 + v6);
  *(_QWORD *)(v7 + 8) = *(_QWORD *)(a2 + v6 + 8);
  v9 = *(_QWORD *)(a2 + v6 + 16);
  *(_BYTE *)(v7 + 24) = *(_BYTE *)(v8 + 24);
  *(_QWORD *)(v7 + 16) = v9;
  *(_QWORD *)(v7 + 32) = *(_QWORD *)(v8 + 32);
  v10 = *(_QWORD *)(v8 + 40);
  v11 = *(_QWORD *)(v7 + 40);
  *(_QWORD *)(v7 + 40) = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease(v11);
  *(_QWORD *)(v7 + 48) = *(_QWORD *)(v8 + 48);
  v12 = *(_QWORD *)(v8 + 56);
  v13 = *(_QWORD *)(v7 + 56);
  *(_QWORD *)(v7 + 56) = v12;
  swift_bridgeObjectRetain(v12);
  swift_bridgeObjectRelease(v13);
  *(_BYTE *)(v7 + 64) = *(_BYTE *)(v8 + 64);
  v14 = v5[6];
  v15 = (_QWORD *)(a1 + v14);
  v16 = (_QWORD *)(a2 + v14);
  *v15 = *v16;
  v17 = v16[1];
  v18 = v15[1];
  v15[1] = v17;
  swift_bridgeObjectRetain(v17);
  swift_bridgeObjectRelease(v18);
  v19 = v5[7];
  v20 = (_QWORD *)(a1 + v19);
  v21 = (_QWORD *)(a2 + v19);
  *v20 = *v21;
  v20[1] = v21[1];
  return a1;
}

uint64_t sub_100041F38(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  __int128 v10;

  v4 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a1, a2, v4);
  v5 = (int *)type metadata accessor for SingleGaugeEntry(0);
  v6 = v5[5];
  v7 = a1 + v6;
  v8 = a2 + v6;
  v9 = *(_OWORD *)(v8 + 48);
  *(_OWORD *)(v7 + 32) = *(_OWORD *)(v8 + 32);
  *(_OWORD *)(v7 + 48) = v9;
  *(_BYTE *)(v7 + 64) = *(_BYTE *)(v8 + 64);
  v10 = *(_OWORD *)(v8 + 16);
  *(_OWORD *)v7 = *(_OWORD *)v8;
  *(_OWORD *)(v7 + 16) = v10;
  *(_OWORD *)(a1 + v5[6]) = *(_OWORD *)(a2 + v5[6]);
  *(_OWORD *)(a1 + v5[7]) = *(_OWORD *)(a2 + v5[7]);
  return a1;
}

uint64_t sub_100041FC0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v4 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a1, a2, v4);
  v5 = (int *)type metadata accessor for SingleGaugeEntry(0);
  v6 = v5[5];
  v7 = a1 + v6;
  v8 = a2 + v6;
  *(_OWORD *)v7 = *(_OWORD *)(a2 + v6);
  *(_BYTE *)(v7 + 24) = *(_BYTE *)(a2 + v6 + 24);
  *(_QWORD *)(v7 + 16) = *(_QWORD *)(a2 + v6 + 16);
  v9 = *(_QWORD *)(a2 + v6 + 40);
  v10 = *(_QWORD *)(a1 + v6 + 40);
  *(_QWORD *)(v7 + 32) = *(_QWORD *)(a2 + v6 + 32);
  *(_QWORD *)(v7 + 40) = v9;
  swift_bridgeObjectRelease(v10);
  v11 = *(_QWORD *)(v8 + 56);
  v12 = *(_QWORD *)(v7 + 56);
  *(_QWORD *)(v7 + 48) = *(_QWORD *)(v8 + 48);
  *(_QWORD *)(v7 + 56) = v11;
  swift_bridgeObjectRelease(v12);
  *(_BYTE *)(v7 + 64) = *(_BYTE *)(v8 + 64);
  v13 = v5[6];
  v14 = (_QWORD *)(a1 + v13);
  v15 = (uint64_t *)(a2 + v13);
  v17 = *v15;
  v16 = v15[1];
  v18 = v14[1];
  *v14 = v17;
  v14[1] = v16;
  swift_bridgeObjectRelease(v18);
  *(_OWORD *)(a1 + v5[7]) = *(_OWORD *)(a2 + v5[7]);
  return a1;
}

uint64_t sub_100042094(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000420A0);
}

uint64_t sub_1000420A0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for SingleGaugeEntry(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(a1, a2, v4);
}

uint64_t sub_1000420DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000420E8);
}

uint64_t sub_1000420E8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for SingleGaugeEntry(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(a1, a2, a2, v4);
}

uint64_t type metadata accessor for SingleClimateGaugeWidgetView(uint64_t a1)
{
  return sub_100030820(a1, qword_100082A90, (uint64_t)&nominal type descriptor for SingleClimateGaugeWidgetView);
}

uint64_t sub_10004213C(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  uint64_t v4;

  result = type metadata accessor for SingleGaugeEntry(319);
  if (v3 <= 0x3F)
  {
    v4 = *(_QWORD *)(result - 8) + 64;
    swift_initStructMetadata(a1, 256, 1, &v4, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t *sub_1000421A4(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v17 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v17 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v17);
  }
  else
  {
    v7 = type metadata accessor for Date(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = a3[5];
    v9 = a3[6];
    v10 = (char *)a1 + v8;
    v11 = (char *)a2 + v8;
    *(_OWORD *)v10 = *(_OWORD *)v11;
    *((_QWORD *)v10 + 2) = *((_QWORD *)v11 + 2);
    v10[24] = v11[24];
    v12 = *((_QWORD *)v11 + 5);
    *((_QWORD *)v10 + 4) = *((_QWORD *)v11 + 4);
    *((_QWORD *)v10 + 5) = v12;
    v13 = *((_QWORD *)v11 + 7);
    *((_QWORD *)v10 + 6) = *((_QWORD *)v11 + 6);
    *((_QWORD *)v10 + 7) = v13;
    v10[64] = v11[64];
    v14 = (uint64_t *)((char *)a1 + v9);
    v15 = (uint64_t *)((char *)a2 + v9);
    v16 = v15[1];
    *v14 = *v15;
    v14[1] = v16;
    *(_OWORD *)((char *)a1 + a3[7]) = *(_OWORD *)((char *)a2 + a3[7]);
    swift_bridgeObjectRetain(v12);
    swift_bridgeObjectRetain(v13);
    swift_bridgeObjectRetain(v16);
  }
  return a1;
}

uint64_t sub_100042294(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  v5 = a1 + *(int *)(a2 + 20);
  swift_bridgeObjectRelease(*(_QWORD *)(v5 + 40));
  swift_bridgeObjectRelease(*(_QWORD *)(v5 + 56));
  return swift_bridgeObjectRelease(*(_QWORD *)(a1 + *(int *)(a2 + 24) + 8));
}

uint64_t sub_1000422FC(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;

  v6 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = a3[5];
  v8 = a3[6];
  v9 = a1 + v7;
  v10 = a2 + v7;
  *(_OWORD *)v9 = *(_OWORD *)v10;
  *(_QWORD *)(v9 + 16) = *(_QWORD *)(v10 + 16);
  *(_BYTE *)(v9 + 24) = *(_BYTE *)(v10 + 24);
  v11 = *(_QWORD *)(v10 + 40);
  *(_QWORD *)(v9 + 32) = *(_QWORD *)(v10 + 32);
  *(_QWORD *)(v9 + 40) = v11;
  v12 = *(_QWORD *)(v10 + 56);
  *(_QWORD *)(v9 + 48) = *(_QWORD *)(v10 + 48);
  *(_QWORD *)(v9 + 56) = v12;
  *(_BYTE *)(v9 + 64) = *(_BYTE *)(v10 + 64);
  v13 = (_QWORD *)(a1 + v8);
  v14 = (_QWORD *)(a2 + v8);
  v15 = v14[1];
  *v13 = *v14;
  v13[1] = v15;
  *(_OWORD *)(a1 + a3[7]) = *(_OWORD *)(a2 + a3[7]);
  swift_bridgeObjectRetain(v11);
  swift_bridgeObjectRetain(v12);
  swift_bridgeObjectRetain(v15);
  return a1;
}

uint64_t sub_1000423C0(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;

  v6 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = a2 + v7;
  *(_QWORD *)v8 = *(_QWORD *)(a2 + v7);
  *(_QWORD *)(v8 + 8) = *(_QWORD *)(a2 + v7 + 8);
  v10 = *(_QWORD *)(a2 + v7 + 16);
  *(_BYTE *)(v8 + 24) = *(_BYTE *)(v9 + 24);
  *(_QWORD *)(v8 + 16) = v10;
  *(_QWORD *)(v8 + 32) = *(_QWORD *)(v9 + 32);
  v11 = *(_QWORD *)(v9 + 40);
  v12 = *(_QWORD *)(v8 + 40);
  *(_QWORD *)(v8 + 40) = v11;
  swift_bridgeObjectRetain(v11);
  swift_bridgeObjectRelease(v12);
  *(_QWORD *)(v8 + 48) = *(_QWORD *)(v9 + 48);
  v13 = *(_QWORD *)(v9 + 56);
  v14 = *(_QWORD *)(v8 + 56);
  *(_QWORD *)(v8 + 56) = v13;
  swift_bridgeObjectRetain(v13);
  swift_bridgeObjectRelease(v14);
  *(_BYTE *)(v8 + 64) = *(_BYTE *)(v9 + 64);
  v15 = a3[6];
  v16 = (_QWORD *)(a1 + v15);
  v17 = (_QWORD *)(a2 + v15);
  *v16 = *v17;
  v18 = v17[1];
  v19 = v16[1];
  v16[1] = v18;
  swift_bridgeObjectRetain(v18);
  swift_bridgeObjectRelease(v19);
  v20 = a3[7];
  v21 = (_QWORD *)(a1 + v20);
  v22 = (_QWORD *)(a2 + v20);
  *v21 = *v22;
  v21[1] = v22[1];
  return a1;
}

uint64_t sub_1000424D4(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;

  v6 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = a3[5];
  v8 = a3[6];
  v9 = a1 + v7;
  v10 = a2 + v7;
  *(_BYTE *)(v9 + 64) = *(_BYTE *)(v10 + 64);
  v11 = *(_OWORD *)(v10 + 48);
  *(_OWORD *)(v9 + 32) = *(_OWORD *)(v10 + 32);
  *(_OWORD *)(v9 + 48) = v11;
  v12 = *(_OWORD *)(v10 + 16);
  *(_OWORD *)v9 = *(_OWORD *)v10;
  *(_OWORD *)(v9 + 16) = v12;
  *(_OWORD *)(a1 + v8) = *(_OWORD *)(a2 + v8);
  *(_OWORD *)(a1 + a3[7]) = *(_OWORD *)(a2 + a3[7]);
  return a1;
}

uint64_t sub_10004255C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v6 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = a2 + v7;
  *(_OWORD *)v8 = *(_OWORD *)(a2 + v7);
  *(_QWORD *)(v8 + 16) = *(_QWORD *)(a2 + v7 + 16);
  *(_BYTE *)(v8 + 24) = *(_BYTE *)(a2 + v7 + 24);
  v10 = *(_QWORD *)(a2 + v7 + 40);
  v11 = *(_QWORD *)(a1 + v7 + 40);
  *(_QWORD *)(v8 + 32) = *(_QWORD *)(a2 + v7 + 32);
  *(_QWORD *)(v8 + 40) = v10;
  swift_bridgeObjectRelease(v11);
  v12 = *(_QWORD *)(v9 + 56);
  v13 = *(_QWORD *)(v8 + 56);
  *(_QWORD *)(v8 + 48) = *(_QWORD *)(v9 + 48);
  *(_QWORD *)(v8 + 56) = v12;
  swift_bridgeObjectRelease(v13);
  *(_BYTE *)(v8 + 64) = *(_BYTE *)(v9 + 64);
  v14 = a3[6];
  v15 = (_QWORD *)(a1 + v14);
  v16 = (uint64_t *)(a2 + v14);
  v18 = *v16;
  v17 = v16[1];
  v19 = v15[1];
  *v15 = v18;
  v15[1] = v17;
  swift_bridgeObjectRelease(v19);
  *(_OWORD *)(a1 + a3[7]) = *(_OWORD *)(a2 + a3[7]);
  return a1;
}

uint64_t sub_100042628(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100042634);
}

uint64_t sub_100042634(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;

  v6 = type metadata accessor for Date(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 20) + 40);
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  return (v9 + 1);
}

uint64_t sub_1000426B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000426C0);
}

uint64_t sub_1000426C0(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = type metadata accessor for Date(0);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 20) + 40) = (a2 - 1);
  return result;
}

uint64_t sub_10004273C(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[4];

  result = type metadata accessor for Date(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(result - 8) + 64;
    v4[1] = "A";
    v4[2] = &unk_100063960;
    v4[3] = &unk_100063978;
    swift_initStructMetadata(a1, 256, 4, v4, a1 + 16);
    return 0;
  }
  return result;
}

int *sub_1000427C0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  unint64_t v2;
  unint64_t *v4;
  Swift::String v5;
  void *object;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  double v15;
  uint64_t v16;
  uint64_t v17;
  int *result;
  uint64_t v19;
  _QWORD *v20;
  double *v21;
  uint64_t v22;
  uint64_t v23[2];

  v4 = &qword_100082000;
  if (__OFADD__(qword_100082A30, 1))
  {
    __break(1u);
  }
  else
  {
    v2 = 0xD000000000000010;
    ++qword_100082A30;
    _StringGuts.grow(_:)(23);
    swift_bridgeObjectRelease(0xE000000000000000);
    v23[0] = 0xD000000000000015;
    v23[1] = 0x80000001000690B0;
    v22 = qword_100082A30;
    v5._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
    object = v5._object;
    String.append(_:)(v5);
    swift_bridgeObjectRelease(object);
    v1 = 0xD000000000000015;
    v4 = (unint64_t *)0x80000001000690B0;
    if (qword_100081680 == -1)
      goto LABEL_3;
  }
  swift_once(&qword_100081680, sub_100022448);
LABEL_3:
  v7 = type metadata accessor for Logger(0);
  sub_100003884(v7, (uint64_t)static DataModel.widgetLogger);
  v8 = swift_bridgeObjectRetain(v4);
  v9 = Logger.logObject.getter(v8);
  v10 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v9, v10))
  {
    v11 = swift_slowAlloc(22, -1);
    v12 = swift_slowAlloc(64, -1);
    v23[0] = v12;
    *(_DWORD *)v11 = 136315394;
    swift_bridgeObjectRetain(v4);
    v22 = sub_10001DF04(v1, (unint64_t)v4, v23);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v22, v23, v11 + 4, v11 + 12);
    swift_bridgeObjectRelease_n(v4, 3);
    *(_WORD *)(v11 + 12) = 2080;
    v22 = sub_10001DF04(0xD000000000000010, 0x8000000100067EA0, v23);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v22, v23, v11 + 14, v11 + 22);
    swift_arrayDestroy(v12, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v12, -1, -1);
    swift_slowDealloc(v11, -1, -1);

  }
  else
  {

    v13 = swift_bridgeObjectRelease_n(v4, 2);
  }
  v14 = Date.init()(v13);
  v15 = TimelineProviderContext.displaySize.getter(v14);
  v17 = v16;
  result = (int *)type metadata accessor for SingleGaugeEntry(0);
  v19 = a1 + result[5];
  *(_OWORD *)v19 = xmmword_100062F50;
  *(_QWORD *)(v19 + 16) = 0x404E000000000000;
  *(_BYTE *)(v19 + 24) = 0;
  *(_QWORD *)(v19 + 32) = 12342;
  *(_QWORD *)(v19 + 40) = 0xE200000000000000;
  strcpy((char *)(v19 + 48), "humidity.fill");
  *(_WORD *)(v19 + 62) = -4864;
  *(_BYTE *)(v19 + 64) = 1;
  v20 = (_QWORD *)(a1 + result[6]);
  *v20 = v2 + 20;
  v20[1] = 0x80000001000650F0;
  v21 = (double *)(a1 + result[7]);
  *v21 = v15;
  *((_QWORD *)v21 + 1) = v17;
  return result;
}

uint64_t sub_100042ADC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v8;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v16;

  v8[2] = a4;
  v8[3] = a5;
  v12 = type metadata accessor for SingleGaugeEntry(0);
  v13 = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v12 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v8[4] = v13;
  v14 = (_QWORD *)swift_task_alloc(dword_100082BDC);
  v8[5] = v14;
  *v14 = v8;
  v14[1] = sub_100042B80;
  return sub_100042C24(v13, a6, a7, a8, v16);
}

uint64_t sub_100042B80()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 40));
  return swift_task_switch(sub_100042BD4, 0, 0);
}

uint64_t sub_100042BD4()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 32);
  (*(void (**)(uint64_t))(v0 + 16))(v1);
  sub_100015784(v1, type metadata accessor for SingleGaugeEntry);
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100042C24(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;

  v5[22] = a4;
  v5[23] = a5;
  v5[20] = a2;
  v5[21] = a3;
  v5[19] = a1;
  v6 = type metadata accessor for Date(0);
  v5[24] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v5[25] = v7;
  v5[26] = swift_task_alloc((*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_100042C8C, 0, 0);
}

uint64_t sub_100042C8C()
{
  _QWORD *v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  _BOOL4 v6;
  unint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  id v11;
  uint64_t v12;
  void *v13;
  void **v14;
  void *v15;
  uint64_t v16;
  id v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;

  if (qword_100081680 != -1)
    swift_once(&qword_100081680, sub_100022448);
  v1 = v0[23];
  v2 = (void *)v0[20];
  v3 = type metadata accessor for Logger(0);
  v0[27] = sub_100003884(v3, (uint64_t)static DataModel.widgetLogger);
  swift_bridgeObjectRetain_n(v1, 2);
  v4 = Logger.logObject.getter(v2);
  v5 = static os_log_type_t.default.getter();
  v6 = os_log_type_enabled(v4, v5);
  v7 = v0[23];
  if (v6)
  {
    v8 = v0[22];
    v9 = (void *)v0[20];
    v10 = swift_slowAlloc(32, -1);
    v22 = (_QWORD *)swift_slowAlloc(8, -1);
    v23 = swift_slowAlloc(64, -1);
    v24 = v23;
    *(_DWORD *)v10 = 136315650;
    swift_bridgeObjectRetain(v7);
    v0[16] = sub_10001DF04(v8, v7, &v24);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 16, v0 + 17, v10 + 4, v10 + 12);
    swift_bridgeObjectRelease_n(v7, 3);
    *(_WORD *)(v10 + 12) = 2080;
    v0[17] = sub_10001DF04(0xD00000000000001ELL, 0x8000000100068630, &v24);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 17, v0 + 18, v10 + 14, v10 + 22);
    *(_WORD *)(v10 + 22) = 2112;
    v0[18] = v9;
    v11 = v9;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 18, v0 + 19, v10 + 24, v10 + 32);
    *v22 = v9;

    v12 = sub_100003704((uint64_t *)&unk_100081FD0);
    swift_arrayDestroy(v22, 1, v12);
    swift_slowDealloc(v22, -1, -1);
    swift_arrayDestroy(v23, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v23, -1, -1);
    swift_slowDealloc(v10, -1, -1);
  }
  else
  {
    v13 = (void *)v0[20];
    swift_bridgeObjectRelease_n(v0[23], 2);

  }
  if (qword_100081670 != -1)
    swift_once(&qword_100081670, sub_100021008);
  v14 = (void **)(qword_10008A648 + OBJC_IVAR____TtC20HomeWidgetLockScreen9DataModel_currentHome);
  swift_beginAccess(qword_10008A648 + OBJC_IVAR____TtC20HomeWidgetLockScreen9DataModel_currentHome, v0 + 11, 0, 0);
  v15 = *v14;
  v0[28] = *v14;
  v16 = dword_100082BE4;
  v17 = v15;
  v18 = (_QWORD *)swift_task_alloc(v16);
  v0[29] = v18;
  *v18 = v0;
  v18[1] = sub_100042FD4;
  v19 = v0[23];
  v20 = v0[20];
  v18[33] = v0[22];
  v18[34] = v19;
  v18[31] = v20;
  v18[32] = v15;
  v18[30] = v0 + 2;
  return swift_task_switch(sub_100043A38, 0, 0);
}

uint64_t sub_100042FD4()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 232));
  return swift_task_switch(sub_100043028, 0, 0);
}

uint64_t sub_100043028()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  double v9;
  void *v10;
  uint64_t v11;
  id v12;
  void *v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  double v23;
  uint64_t v24;
  uint64_t v25;
  int *v26;
  uint64_t v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  uint64_t *v31;
  double *v32;
  uint64_t v34;

  v1 = *(_QWORD *)(v0 + 184);
  swift_bridgeObjectRetain(v1);
  sub_100045294(v0 + 16);
  swift_bridgeObjectRetain(v1);
  v2 = sub_100045294(v0 + 16);
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v3, v4))
  {
    v6 = *(_QWORD *)(v0 + 176);
    v5 = *(_QWORD *)(v0 + 184);
    v7 = swift_slowAlloc(22, -1);
    v8 = swift_slowAlloc(32, -1);
    v34 = v8;
    *(_DWORD *)v7 = 136315394;
    swift_bridgeObjectRetain(v5);
    *(_QWORD *)(v0 + 112) = sub_10001DF04(v6, v5, &v34);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 112, v0 + 120, v7 + 4, v7 + 12);
    swift_bridgeObjectRelease_n(v5, 3);
    *(_WORD *)(v7 + 12) = 2048;
    v9 = *(double *)(v0 + 32);
    if (*(_BYTE *)(v0 + 40))
      v9 = -1.0;
    *(double *)(v0 + 120) = v9;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 120, v0 + 128, v7 + 14, v7 + 22);
    sub_1000452C8(v0 + 16);
    sub_1000452C8(v0 + 16);
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "...{%s} has currentValue: '%f'", (uint8_t *)v7, 0x16u);
    swift_arrayDestroy(v8, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v8, -1, -1);
    swift_slowDealloc(v7, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease_n(*(_QWORD *)(v0 + 184), 2);
    sub_1000452C8(v0 + 16);
    sub_1000452C8(v0 + 16);
  }

  v10 = *(void **)(v0 + 160);
  Date.init()(v11);
  v12 = objc_msgSend(v10, "climateType");
  if (v12
    && (v13 = v12, v14 = objc_msgSend(v12, "identifier"), v13, v14))
  {
    v15 = static String._unconditionallyBridgeFromObjectiveC(_:)(v14);
    v17 = v16;

  }
  else
  {
    v15 = 0;
    v17 = 0;
  }
  v18 = *(void **)(v0 + 224);
  v20 = *(_QWORD *)(v0 + 200);
  v19 = *(_QWORD *)(v0 + 208);
  v21 = *(_QWORD *)(v0 + 192);
  v22 = *(_QWORD *)(v0 + 152);
  v23 = TimelineProviderContext.displaySize.getter(v12);
  v25 = v24;

  (*(void (**)(uint64_t, uint64_t, uint64_t))(v20 + 32))(v22, v19, v21);
  v26 = (int *)type metadata accessor for SingleGaugeEntry(0);
  v27 = v22 + v26[5];
  *(_OWORD *)v27 = *(_OWORD *)(v0 + 16);
  v28 = *(_OWORD *)(v0 + 32);
  v29 = *(_OWORD *)(v0 + 48);
  v30 = *(_OWORD *)(v0 + 64);
  *(_BYTE *)(v27 + 64) = *(_BYTE *)(v0 + 80);
  *(_OWORD *)(v27 + 32) = v29;
  *(_OWORD *)(v27 + 48) = v30;
  *(_OWORD *)(v27 + 16) = v28;
  v31 = (uint64_t *)(v22 + v26[6]);
  *v31 = v15;
  v31[1] = v17;
  v32 = (double *)(v22 + v26[7]);
  *v32 = v23;
  *((_QWORD *)v32 + 1) = v25;
  swift_task_dealloc(v19);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000432F4(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  Swift::String v17;
  void *object;
  uint64_t v19;
  uint64_t v20;
  NSObject *v21;
  os_log_type_t v22;
  _BOOL4 v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  char *v34;
  uint64_t *v35;
  id v36;
  uint64_t v37;
  uint64_t v39;
  void *v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  char *v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;

  v48 = a3;
  v49 = a7;
  v12 = type metadata accessor for TimelineProviderContext(0);
  v13 = *(_QWORD *)(v12 - 8);
  v14 = *(_QWORD *)(v13 + 64);
  __chkstk_darwin(v12);
  v15 = sub_100003704(&qword_100081DB0);
  __chkstk_darwin(v15);
  if (__OFADD__(qword_100082A30, 1))
  {
    __break(1u);
  }
  else
  {
    v42 = a5;
    v44 = v14;
    v46 = (char *)&v39 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
    v47 = (char *)&v39 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
    ++qword_100082A30;
    v51 = 0;
    v52 = 0xE000000000000000;
    _StringGuts.grow(_:)(23);
    swift_bridgeObjectRelease(v52);
    v51 = 0xD000000000000015;
    v52 = 0x80000001000690B0;
    v50 = qword_100082A30;
    v17._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
    object = v17._object;
    String.append(_:)(v17);
    swift_bridgeObjectRelease(object);
    a5 = v51;
    v14 = v52;
    if (qword_100081680 == -1)
      goto LABEL_3;
  }
  swift_once(&qword_100081680, sub_100022448);
LABEL_3:
  v45 = a2;
  v19 = type metadata accessor for Logger(0);
  sub_100003884(v19, (uint64_t)static DataModel.widgetLogger);
  v20 = swift_bridgeObjectRetain_n(v14, 2);
  v21 = Logger.logObject.getter(v20);
  v22 = static os_log_type_t.default.getter();
  v23 = os_log_type_enabled(v21, v22);
  v43 = a5;
  if (v23)
  {
    v24 = swift_slowAlloc(22, -1);
    v41 = v12;
    v25 = v24;
    v26 = swift_slowAlloc(64, -1);
    v51 = v26;
    *(_DWORD *)v25 = 136315394;
    v40 = a1;
    swift_bridgeObjectRetain(v14);
    v50 = sub_10001DF04(a5, v14, &v51);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v50, &v51, v25 + 4, v25 + 12);
    swift_bridgeObjectRelease_n(v14, 3);
    *(_WORD *)(v25 + 12) = 2080;
    v50 = sub_10001DF04(0xD00000000000001FLL, v42, &v51);
    a1 = v40;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v50, &v51, v25 + 14, v25 + 22);
    swift_arrayDestroy(v26, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v26, -1, -1);
    v27 = v25;
    v12 = v41;
    swift_slowDealloc(v27, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n(v14, 2);
  }
  v28 = type metadata accessor for TaskPriority(0);
  v29 = (uint64_t)v46;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v28 - 8) + 56))(v46, 1, 1, v28);
  v30 = v47;
  (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v47, v45, v12);
  v31 = *(unsigned __int8 *)(v13 + 80);
  v32 = (v31 + 56) & ~v31;
  v33 = (v44 + v32 + 7) & 0xFFFFFFFFFFFFFFF8;
  v34 = (char *)swift_allocObject(a6, v33 + 16, v31 | 7);
  *((_QWORD *)v34 + 2) = 0;
  *((_QWORD *)v34 + 3) = 0;
  *((_QWORD *)v34 + 4) = v48;
  *((_QWORD *)v34 + 5) = a4;
  *((_QWORD *)v34 + 6) = a1;
  (*(void (**)(char *, char *, uint64_t))(v13 + 32))(&v34[v32], v30, v12);
  v35 = (uint64_t *)&v34[v33];
  *v35 = v43;
  v35[1] = v14;
  swift_retain(a4);
  v36 = a1;
  v37 = sub_1000341A0(v29, v49, (uint64_t)v34);
  return swift_release(v37);
}

uint64_t sub_1000436CC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;

  v8[6] = a8;
  v8[7] = v16;
  v8[4] = a6;
  v8[5] = a7;
  v8[2] = a4;
  v8[3] = a5;
  v9 = type metadata accessor for Date(0);
  v8[8] = v9;
  v10 = *(_QWORD *)(v9 - 8);
  v8[9] = v10;
  v11 = (*(_QWORD *)(v10 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v8[10] = swift_task_alloc(v11);
  v8[11] = swift_task_alloc(v11);
  v12 = type metadata accessor for TimelineReloadPolicy(0);
  v8[12] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v12 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_100003704(&qword_100082BC8);
  v8[13] = v13;
  v14 = *(_QWORD *)(v13 - 8);
  v8[14] = v14;
  v8[15] = swift_task_alloc((*(_QWORD *)(v14 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_100043794, 0, 0);
}

uint64_t sub_100043794()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t **v9;

  v1 = sub_100003704(&qword_100082BD0);
  v2 = type metadata accessor for SingleGaugeEntry(0);
  v0[16] = v2;
  v3 = *(_QWORD *)(v2 - 8);
  v4 = *(_QWORD *)(v3 + 72);
  v5 = *(unsigned __int8 *)(v3 + 80);
  v6 = (v5 + 32) & ~v5;
  v7 = swift_allocObject(v1, v6 + v4, v5 | 7);
  v0[17] = v7;
  *(_OWORD *)(v7 + 16) = xmmword_1000607D0;
  v8 = v7 + v6;
  v9 = (uint64_t **)swift_task_alloc(dword_100082BDC);
  v0[18] = (uint64_t)v9;
  *v9 = v0;
  v9[1] = (uint64_t *)sub_10004383C;
  return sub_100042C24(v8, v0[4], v0[5], v0[6], v0[7]);
}

uint64_t sub_10004383C()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 144));
  return swift_task_switch(sub_100043890, 0, 0);
}

uint64_t sub_100043890()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t);
  void (*v9)(uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v1 = *(_QWORD *)(v0 + 136);
  v2 = *(_QWORD *)(v0 + 120);
  v12 = *(_QWORD *)(v0 + 128);
  v13 = *(_QWORD *)(v0 + 112);
  v3 = *(_QWORD *)(v0 + 96);
  v14 = *(_QWORD *)(v0 + 104);
  v4 = *(_QWORD *)(v0 + 80);
  v5 = *(_QWORD *)(v0 + 88);
  v7 = *(_QWORD *)(v0 + 64);
  v6 = *(_QWORD *)(v0 + 72);
  v8 = *(void (**)(uint64_t))(v0 + 16);
  static Date.now.getter();
  static Date.+ infix(_:_:)(v4, 1800.0);
  v9 = *(void (**)(uint64_t, uint64_t))(v6 + 8);
  v9(v4, v7);
  static TimelineReloadPolicy.after(_:)(v5);
  v9(v5, v7);
  v10 = sub_100015884(qword_100082BA0, type metadata accessor for SingleGaugeEntry, (uint64_t)&unk_100063990);
  Timeline.init(entries:policy:)(v1, v3, v12, v10);
  v8(v2);
  (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v2, v14);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v5);
  swift_task_dealloc(v4);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000439B0(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1000432F4(a1, a2, a3, a4, 0x8000000100068DA0, (uint64_t)&unk_10007E548, (uint64_t)&unk_100082BF0);
}

uint64_t sub_1000439E4(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1000432F4(a1, a2, a3, a4, 0x8000000100068CD0, (uint64_t)&unk_10007E520, (uint64_t)&unk_100082BC0);
}

uint64_t sub_100043A18(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;

  v5[33] = a4;
  v5[34] = a5;
  v5[31] = a2;
  v5[32] = a3;
  v5[30] = a1;
  return swift_task_switch(sub_100043A38, 0, 0);
}

uint64_t sub_100043A38()
{
  uint64_t v0;
  id v1;
  void *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t (*v9)();
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  _BOOL4 v16;
  unint64_t v17;
  uint64_t v18;
  uint8_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t (*v22)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v23;

  v1 = objc_msgSend(*(id *)(v0 + 248), "climateType");
  v2 = v1;
  if (v1)
  {
    v3 = objc_msgSend(v1, "identifier");

    if (v3)
    {
      v2 = (void *)static String._unconditionallyBridgeFromObjectiveC(_:)(v3);
      v5 = v4;

      goto LABEL_6;
    }
    v2 = 0;
  }
  v5 = 0xE000000000000000;
LABEL_6:
  v6 = _s20HomeWidgetLockScreen11ServiceKindO8rawValueACSgSS_tcfC_0((uint64_t)v2, v5);
  switch(v6)
  {
    case 4:
      v7 = v0 + 16;
      v22 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))((char *)&dword_1000817B8 + dword_1000817B8);
      v8 = (_QWORD *)swift_task_alloc(unk_1000817BC);
      v9 = sub_100043E84;
      *(_QWORD *)(v0 + 296) = v8;
      goto LABEL_12;
    case 45:
      v7 = v0 + 88;
      v22 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))((char *)&dword_100083150 + dword_100083150);
      v8 = (_QWORD *)swift_task_alloc(unk_100083154);
      v9 = sub_100043E0C;
      *(_QWORD *)(v0 + 288) = v8;
      goto LABEL_12;
    case 22:
      v7 = v0 + 160;
      v22 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))((char *)&dword_1000822C8 + dword_1000822C8);
      v8 = (_QWORD *)swift_task_alloc(unk_1000822CC);
      v9 = sub_100043D94;
      *(_QWORD *)(v0 + 280) = v8;
LABEL_12:
      *v8 = v0;
      v8[1] = v9;
      return v22(v7, *(_QWORD *)(v0 + 256), *(_QWORD *)(v0 + 264), *(_QWORD *)(v0 + 272));
  }
  if (qword_100081680 != -1)
    swift_once(&qword_100081680, sub_100022448);
  v11 = *(_QWORD *)(v0 + 272);
  v12 = type metadata accessor for Logger(0);
  sub_100003884(v12, (uint64_t)static DataModel.widgetLogger);
  v13 = swift_bridgeObjectRetain_n(v11, 2);
  v14 = Logger.logObject.getter(v13);
  v15 = static os_log_type_t.default.getter();
  v16 = os_log_type_enabled(v14, v15);
  v17 = *(_QWORD *)(v0 + 272);
  if (v16)
  {
    v18 = *(_QWORD *)(v0 + 264);
    v19 = (uint8_t *)swift_slowAlloc(12, -1);
    v20 = swift_slowAlloc(32, -1);
    v23 = v20;
    *(_DWORD *)v19 = 136315138;
    swift_bridgeObjectRetain(v17);
    *(_QWORD *)(v0 + 232) = sub_10001DF04(v18, v17, &v23);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 232, v0 + 240, v19 + 4, v19 + 12);
    swift_bridgeObjectRelease_n(v17, 3);
    _os_log_impl((void *)&_mh_execute_header, v14, v15, "...{%s} ERROR: didn't recognize sensor accessory type", v19, 0xCu);
    swift_arrayDestroy(v20, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v20, -1, -1);
    swift_slowDealloc(v19, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease_n(*(_QWORD *)(v0 + 272), 2);
  }

  v21 = *(_QWORD *)(v0 + 240);
  *(_OWORD *)v21 = xmmword_100062F50;
  *(_QWORD *)(v21 + 16) = 0x4049000000000000;
  *(_BYTE *)(v21 + 24) = 0;
  *(_QWORD *)(v21 + 32) = 0x9380E29380E2;
  *(_QWORD *)(v21 + 40) = 0xA600000000000000;
  *(_QWORD *)(v21 + 48) = 0xD00000000000001DLL;
  *(_QWORD *)(v21 + 56) = 0x80000001000690D0;
  *(_BYTE *)(v21 + 64) = 0;
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100043D94()
{
  uint64_t *v0;
  uint64_t v1;
  char v2;
  uint64_t v3;
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v10;

  v1 = *v0;
  v10 = *v0;
  swift_task_dealloc(*(_QWORD *)(*v0 + 280));
  v2 = *(_BYTE *)(v1 + 224);
  v3 = *(_QWORD *)(v1 + 208);
  v4 = *(_QWORD *)(v1 + 216);
  v5 = *(_OWORD *)(v1 + 192);
  v6 = *(_QWORD *)(v1 + 176);
  v7 = *(_BYTE *)(v1 + 184);
  v8 = *(_QWORD *)(v1 + 240);
  *(_OWORD *)v8 = *(_OWORD *)(v1 + 160);
  *(_QWORD *)(v8 + 16) = v6;
  *(_BYTE *)(v8 + 24) = v7;
  *(_OWORD *)(v8 + 32) = v5;
  *(_QWORD *)(v8 + 48) = v3;
  *(_QWORD *)(v8 + 56) = v4;
  *(_BYTE *)(v8 + 64) = v2;
  return (*(uint64_t (**)(void))(v10 + 8))();
}

uint64_t sub_100043E0C()
{
  uint64_t *v0;
  uint64_t v1;
  char v2;
  uint64_t v3;
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v10;

  v1 = *v0;
  v10 = *v0;
  swift_task_dealloc(*(_QWORD *)(*v0 + 288));
  v2 = *(_BYTE *)(v1 + 152);
  v3 = *(_QWORD *)(v1 + 136);
  v4 = *(_QWORD *)(v1 + 144);
  v5 = *(_OWORD *)(v1 + 120);
  v6 = *(_QWORD *)(v1 + 104);
  v7 = *(_BYTE *)(v1 + 112);
  v8 = *(_QWORD *)(v1 + 240);
  *(_OWORD *)v8 = *(_OWORD *)(v1 + 88);
  *(_QWORD *)(v8 + 16) = v6;
  *(_BYTE *)(v8 + 24) = v7;
  *(_OWORD *)(v8 + 32) = v5;
  *(_QWORD *)(v8 + 48) = v3;
  *(_QWORD *)(v8 + 56) = v4;
  *(_BYTE *)(v8 + 64) = v2;
  return (*(uint64_t (**)(void))(v10 + 8))();
}

uint64_t sub_100043E84()
{
  uint64_t *v0;
  uint64_t v1;
  char v2;
  uint64_t v3;
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v10;

  v1 = *v0;
  v10 = *v0;
  swift_task_dealloc(*(_QWORD *)(*v0 + 296));
  v2 = *(_BYTE *)(v1 + 80);
  v3 = *(_QWORD *)(v1 + 64);
  v4 = *(_QWORD *)(v1 + 72);
  v5 = *(_OWORD *)(v1 + 48);
  v6 = *(_QWORD *)(v1 + 32);
  v7 = *(_BYTE *)(v1 + 40);
  v8 = *(_QWORD *)(v1 + 240);
  *(_OWORD *)v8 = *(_OWORD *)(v1 + 16);
  *(_QWORD *)(v8 + 16) = v6;
  *(_BYTE *)(v8 + 24) = v7;
  *(_OWORD *)(v8 + 32) = v5;
  *(_QWORD *)(v8 + 48) = v3;
  *(_QWORD *)(v8 + 56) = v4;
  *(_BYTE *)(v8 + 64) = v2;
  return (*(uint64_t (**)(void))(v10 + 8))();
}

uint64_t sub_100043EFC()
{
  uint64_t v0;
  _BYTE *v1;
  uint64_t v2;
  _BYTE *v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  _BYTE v7[16];

  type metadata accessor for Locale(0);
  __chkstk_darwin();
  v1 = &v7[-((v0 + 15) & 0xFFFFFFFFFFFFFFF0)];
  type metadata accessor for String.LocalizationValue(0);
  __chkstk_darwin();
  v3 = &v7[-((v2 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v4 = String.LocalizationValue.init(stringLiteral:)(0xD00000000000001ELL, 0x8000000100069090);
  static Locale.current.getter(v4);
  result = String.init(localized:table:bundle:locale:comment:)(v3, 0x696C61636F4C4648, 0xED0000656C62617ALL, 0, v1, 0, 0, 256);
  qword_100082A20 = result;
  *(_QWORD *)algn_100082A28 = v6;
  return result;
}

uint64_t sub_100043FF4(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_10006C094, 1);
}

uint64_t sub_100044004()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  const char *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v26;
  uint64_t v27;
  _BYTE v28[16];
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;

  v1 = 0xD000000000000022;
  v2 = type metadata accessor for Locale(0);
  __chkstk_darwin(v2);
  v4 = &v28[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v5 = type metadata accessor for String.LocalizationValue(0);
  __chkstk_darwin(v5);
  v7 = &v28[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v8 = (_QWORD *)(v0 + *(int *)(type metadata accessor for SingleGaugeEntry(0) + 20));
  v9 = v8[6];
  v10 = v8[7];
  v31 = v9;
  v32 = v10;
  v29 = 0x79746964696D7568;
  v30 = 0xE800000000000000;
  v11 = sub_1000037D4();
  if ((StringProtocol.contains<A>(_:)(&v29, &type metadata for String, &type metadata for String, v11, v11) & 1) != 0)
  {
    v12 = "HFHumidityWidgetAccessibilityLabel";
LABEL_7:
    v13 = (unint64_t)(v12 - 32) | 0x8000000000000000;
    goto LABEL_8;
  }
  v31 = v9;
  v32 = v10;
  v29 = 0x656D6F6D72656874;
  v30 = 0xEB00000000726574;
  if ((StringProtocol.contains<A>(_:)(&v29, &type metadata for String, &type metadata for String, v11, v11) & 1) != 0)
  {
    v1 = 0xD000000000000025;
    v12 = "HFTemperatureWidgetAccessibilityLabel";
    goto LABEL_7;
  }
  v31 = v9;
  v32 = v10;
  v29 = 6910305;
  v30 = 0xE300000000000000;
  if ((StringProtocol.contains<A>(_:)(&v29, &type metadata for String, &type metadata for String, v11, v11) & 1) != 0)
  {
    v1 = 0xD000000000000024;
    v12 = "HFAirQualityWidgetAccessibilityLabel";
    goto LABEL_7;
  }
  v31 = v9;
  v32 = v10;
  v29 = 0x74616D616C637865;
  v30 = 0xEF6B72616D6E6F69;
  if ((StringProtocol.contains<A>(_:)(&v29, &type metadata for String, &type metadata for String, v11, v11) & 1) != 0)
  {
    v26 = String.LocalizationValue.init(stringLiteral:)(0xD000000000000022, 0x8000000100068F70);
    static Locale.current.getter(v26);
    v31 = String.init(localized:table:bundle:locale:comment:)(v7, 0x696C61636F4C4648, 0xED0000656C62617ALL, 0, v4, 0, 0, 256);
    v32 = v27;
    return Text.init<A>(_:)(&v31, &type metadata for String, v11);
  }
  v1 = 0;
  v13 = 0xE000000000000000;
LABEL_8:
  v14 = String.LocalizationValue.init(_:)(v1, v13);
  static Locale.current.getter(v14);
  v15 = String.init(localized:table:bundle:locale:comment:)(v7, 0x696C61636F4C4648, 0xED0000656C62617ALL, 0, v4, 0, 0, 256);
  v17 = v16;
  v18 = sub_100003704(&qword_1000825B0);
  v19 = swift_allocObject(v18, 72, 7);
  *(_OWORD *)(v19 + 16) = xmmword_1000607D0;
  v21 = v8[4];
  v20 = v8[5];
  *(_QWORD *)(v19 + 56) = &type metadata for String;
  *(_QWORD *)(v19 + 64) = sub_100044CA4();
  *(_QWORD *)(v19 + 32) = v21;
  *(_QWORD *)(v19 + 40) = v20;
  swift_bridgeObjectRetain(v20);
  v22 = static String.localizedStringWithFormat(_:_:)(v15, v17, v19);
  v24 = v23;
  swift_bridgeObjectRelease(v17);
  swift_bridgeObjectRelease(v19);
  v31 = v22;
  v32 = v24;
  return Text.init<A>(_:)(&v31, &type metadata for String, v11);
}

uint64_t sub_100044364@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  uint64_t KeyPath;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t OpaqueTypeConformance2;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;

  v2 = v1;
  v45 = a1;
  v3 = type metadata accessor for AccessibilityChildBehavior(0);
  v43 = *(_QWORD *)(v3 - 8);
  v44 = v3;
  __chkstk_darwin(v3);
  v5 = (char *)&v38 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_100003704(&qword_100081D90);
  __chkstk_darwin(v6);
  v8 = (char *)&v38 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for SingleGaugeEntry(0);
  __chkstk_darwin(v9);
  v11 = (char *)&v38 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for SingleClimateGaugeView(0);
  __chkstk_darwin(v12);
  v14 = (char *)&v38 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = sub_100003704(&qword_100082B60);
  v39 = *(_QWORD *)(v15 - 8);
  __chkstk_darwin(v15);
  v17 = (char *)&v38 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v40 = sub_100003704(&qword_100082B68);
  v42 = *(_QWORD *)(v40 - 8);
  __chkstk_darwin(v40);
  v19 = (char *)&v38 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v41 = sub_100003704(&qword_100082B70);
  __chkstk_darwin(v41);
  v21 = (char *)&v38 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10004472C(v2, (uint64_t)v11);
  KeyPath = swift_getKeyPath(&unk_100063A10);
  v23 = (uint64_t *)&v14[*(int *)(v12 + 20)];
  *v23 = KeyPath;
  v24 = sub_100003704(&qword_100081DA0);
  swift_storeEnumTagMultiPayload(v23, v24, 0);
  sub_100044C60((uint64_t)v11, (uint64_t)v14);
  URL.init(string:)(0xD00000000000002ELL, 0x8000000100067D90);
  v25 = sub_100015884(&qword_100082B78, type metadata accessor for SingleClimateGaugeView, (uint64_t)&unk_100063B78);
  View.widgetURL(_:)(v8, v12, v25);
  sub_100033268((uint64_t)v8, &qword_100081D90);
  v26 = sub_100015784((uint64_t)v14, type metadata accessor for SingleClimateGaugeView);
  static AccessibilityChildBehavior.ignore.getter(v26);
  v46 = v12;
  v47 = v25;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v46, &opaque type descriptor for <<opaque return type of View.widgetURL(_:)>>, 1);
  View.accessibilityElement(children:)(v5, v15, OpaqueTypeConformance2);
  (*(void (**)(char *, uint64_t))(v43 + 8))(v5, v44);
  (*(void (**)(char *, uint64_t))(v39 + 8))(v17, v15);
  v28 = sub_100044004();
  v30 = v29;
  v32 = v31;
  v34 = v33 & 1;
  v46 = v15;
  v47 = OpaqueTypeConformance2;
  v35 = swift_getOpaqueTypeConformance2(&v46, &opaque type descriptor for <<opaque return type of View.accessibilityElement(children:)>>, 1);
  v36 = v40;
  View.accessibilityLabel(_:)(v28, v30, v34, v32, v40, v35);
  sub_1000330B0(v28, v30, v34);
  swift_bridgeObjectRelease(v32);
  (*(void (**)(char *, uint64_t))(v42 + 8))(v19, v36);
  ModifiedContent<>.accessibilityIdentifier(_:)(0xD000000000000027, 0x8000000100068F40, v41);
  return sub_100033268((uint64_t)v21, &qword_100082B70);
}

uint64_t sub_10004472C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for SingleGaugeEntry(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_100044770@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t OpaqueTypeConformance2;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  void *v46;
  unint64_t v47;
  unint64_t v48;
  _QWORD v49[3];

  v44 = a1;
  v1 = type metadata accessor for Locale(0);
  __chkstk_darwin(v1);
  v39 = (char *)&v36 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = type metadata accessor for String.LocalizationValue(0);
  __chkstk_darwin(v3);
  v5 = (char *)&v36 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_100003704(&qword_100081798);
  v37 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v8 = (char *)&v36 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_100003704(&qword_100081790);
  v38 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v11 = (char *)&v36 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v42 = sub_100003704(&qword_100081788);
  v40 = *(_QWORD *)(v42 - 8);
  __chkstk_darwin(v42);
  v13 = (char *)&v36 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v43 = sub_100003704(&qword_100081780);
  v41 = *(_QWORD *)(v43 - 8);
  __chkstk_darwin(v43);
  v15 = (char *)&v36 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for ClimateSensorTypeConfigurationIntent();
  type metadata accessor for SingleClimateGaugeWidgetView(0);
  sub_100015884(&qword_100082B90, type metadata accessor for SingleClimateGaugeWidgetView, (uint64_t)&unk_1000639C0);
  sub_100045048();
  IntentConfiguration.init<A>(kind:intent:provider:content:)(0xD00000000000002ALL, 0x8000000100069030, v16);
  if (qword_1000816E0 != -1)
    swift_once(&qword_1000816E0, sub_100043EFC);
  v45 = qword_100082A20;
  v46 = *(void **)algn_100082A28;
  v17 = sub_100003788();
  v18 = sub_1000037D4();
  WidgetConfiguration.configurationDisplayName<A>(_:)(&v45, v6, &type metadata for String, v17, v18);
  (*(void (**)(char *, uint64_t))(v37 + 8))(v8, v6);
  v19 = String.LocalizationValue.init(stringLiteral:)(0xD00000000000002ALL, 0x8000000100069060);
  v20 = v39;
  static Locale.current.getter(v19);
  v21 = String.init(localized:table:bundle:locale:comment:)(v5, 0x696C61636F4C4648, 0xED0000656C62617ALL, 0, v20, 0, 0, 256);
  v23 = v22;
  v49[0] = v21;
  v49[1] = v22;
  v45 = v6;
  v46 = &type metadata for String;
  v47 = v17;
  v48 = v18;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v45, &opaque type descriptor for <<opaque return type of WidgetConfiguration.configurationDisplayName<A>(_:)>>, 1);
  WidgetConfiguration.description<A>(_:)(v49, v9, &type metadata for String, OpaqueTypeConformance2, v18);
  swift_bridgeObjectRelease(v23);
  (*(void (**)(char *, uint64_t))(v38 + 8))(v11, v9);
  v25 = sub_100003704(&qword_100081CE0);
  v26 = type metadata accessor for WidgetFamily(0);
  v27 = *(_QWORD *)(v26 - 8);
  v28 = *(unsigned __int8 *)(v27 + 80);
  v29 = (v28 + 32) & ~v28;
  v30 = swift_allocObject(v25, v29 + *(_QWORD *)(v27 + 72), v28 | 7);
  *(_OWORD *)(v30 + 16) = xmmword_1000607D0;
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v27 + 104))(v30 + v29, enum case for WidgetFamily.accessoryCircular(_:), v26);
  v45 = v9;
  v46 = &type metadata for String;
  v47 = OpaqueTypeConformance2;
  v48 = v18;
  v31 = swift_getOpaqueTypeConformance2(&v45, &opaque type descriptor for <<opaque return type of WidgetConfiguration.description<A>(_:)>>, 1);
  v32 = v42;
  WidgetConfiguration.supportedFamilies(_:)(v30, v42, v31);
  swift_bridgeObjectRelease(v30);
  (*(void (**)(char *, uint64_t))(v40 + 8))(v13, v32);
  v45 = v32;
  v46 = (void *)v31;
  v33 = swift_getOpaqueTypeConformance2(&v45, &opaque type descriptor for <<opaque return type of WidgetConfiguration.supportedFamilies(_:)>>, 1);
  v34 = v43;
  WidgetConfiguration._containerBackgroundRemovable(_:)(1, v43, v33);
  return (*(uint64_t (**)(char *, uint64_t))(v41 + 8))(v15, v34);
}

uint64_t sub_100044C14@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_10004472C(a1, a2);
}

uint64_t sub_100044C20()
{
  return EnvironmentValues.widgetFamily.getter();
}

uint64_t sub_100044C40()
{
  return EnvironmentValues.widgetFamily.getter();
}

uint64_t sub_100044C60(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for SingleGaugeEntry(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

unint64_t sub_100044CA4()
{
  unint64_t result;

  result = qword_100082B80;
  if (!qword_100082B80)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for String, &type metadata for String);
    atomic_store(result, (unint64_t *)&qword_100082B80);
  }
  return result;
}

ValueMetadata *type metadata accessor for ClimateGaugeWidget()
{
  return &type metadata for ClimateGaugeWidget;
}

uint64_t destroy for SingleGaugeData(uint64_t a1)
{
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 40));
  return swift_bridgeObjectRelease(*(_QWORD *)(a1 + 56));
}

uint64_t initializeWithCopy for SingleGaugeData(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  v3 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v3;
  v4 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = v4;
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  return a1;
}

uint64_t assignWithCopy for SingleGaugeData(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  v4 = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  v5 = *(_QWORD *)(a2 + 40);
  v6 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = v5;
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRelease(v6);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  v7 = *(_QWORD *)(a2 + 56);
  v8 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 56) = v7;
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRelease(v8);
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  return a1;
}

__n128 initializeWithTake for SingleGaugeData(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  result = *(__n128 *)(a2 + 16);
  v3 = *(_OWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 48);
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = v4;
  *(__n128 *)(a1 + 16) = result;
  return result;
}

uint64_t assignWithTake for SingleGaugeData(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  v4 = *(_QWORD *)(a2 + 40);
  v5 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v4;
  swift_bridgeObjectRelease(v5);
  v6 = *(_QWORD *)(a2 + 56);
  v7 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = v6;
  swift_bridgeObjectRelease(v7);
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  return a1;
}

uint64_t getEnumTagSinglePayload for SingleGaugeData(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 65))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 40);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for SingleGaugeData(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 64) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 65) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 40) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 65) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for SingleGaugeData()
{
  return &type metadata for SingleGaugeData;
}

unint64_t sub_100044F48()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  uint64_t OpaqueTypeConformance2;
  uint64_t v4;
  uint64_t v5;

  result = qword_100082B88;
  if (!qword_100082B88)
  {
    v1 = sub_100003744(&qword_100082B70);
    v2 = sub_100003744(&qword_100082B60);
    v4 = type metadata accessor for SingleClimateGaugeView(255);
    v5 = sub_100015884(&qword_100082B78, type metadata accessor for SingleClimateGaugeView, (uint64_t)&unk_100063B78);
    OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v4, &opaque type descriptor for <<opaque return type of View.widgetURL(_:)>>, 1);
    v4 = v2;
    v5 = OpaqueTypeConformance2;
    swift_getOpaqueTypeConformance2(&v4, &opaque type descriptor for <<opaque return type of View.accessibilityElement(children:)>>, 1);
    sub_100015884(&qword_100081E08, (uint64_t (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier, (uint64_t)&protocol conformance descriptor for AccessibilityAttachmentModifier);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100082B88);
  }
  return result;
}

uint64_t sub_100045038(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_10006C0D8, 1);
}

unint64_t sub_100045048()
{
  unint64_t result;

  result = qword_100082B98;
  if (!qword_100082B98)
  {
    result = swift_getWitnessTable(&unk_100063ACC, &type metadata for SingleClimateGaugeProvider);
    atomic_store(result, (unint64_t *)&qword_100082B98);
  }
  return result;
}

ValueMetadata *type metadata accessor for SingleClimateGaugeProvider()
{
  return &type metadata for SingleClimateGaugeProvider;
}

uint64_t sub_10004509C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t OpaqueTypeConformance2;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  void *v11;
  unint64_t v12;
  unint64_t v13;

  v0 = sub_100003744(&qword_100081780);
  v1 = sub_100003744(&qword_100081788);
  v2 = sub_100003744(&qword_100081790);
  v3 = sub_100003744(&qword_100081798);
  v4 = sub_100003788();
  v5 = sub_1000037D4();
  v10 = v3;
  v11 = &type metadata for String;
  v12 = v4;
  v13 = v5;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v10, &opaque type descriptor for <<opaque return type of WidgetConfiguration.configurationDisplayName<A>(_:)>>, 1);
  v10 = v2;
  v11 = &type metadata for String;
  v12 = OpaqueTypeConformance2;
  v13 = v5;
  v7 = swift_getOpaqueTypeConformance2(&v10, &opaque type descriptor for <<opaque return type of WidgetConfiguration.description<A>(_:)>>, 1);
  v10 = v1;
  v11 = (void *)v7;
  v8 = swift_getOpaqueTypeConformance2(&v10, &opaque type descriptor for <<opaque return type of WidgetConfiguration.supportedFamilies(_:)>>, 1);
  v10 = v0;
  v11 = (void *)v8;
  return swift_getOpaqueTypeConformance2(&v10, &unk_10006B634, 1);
}

uint64_t sub_100045194()
{
  return sub_100015884(qword_100082BA0, type metadata accessor for SingleGaugeEntry, (uint64_t)&unk_100063990);
}

uint64_t sub_1000451C4(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v4 = *(_QWORD *)(type metadata accessor for TimelineProviderContext(0) - 8);
  v5 = (*(unsigned __int8 *)(v4 + 80) + 56) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v6 = v1[2];
  v7 = v1[3];
  v8 = v1[4];
  v9 = v1[5];
  v10 = v1[6];
  v11 = (uint64_t)v1 + v5;
  v12 = *(_QWORD *)((char *)v1 + ((*(_QWORD *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFFFF8));
  v13 = (_QWORD *)swift_task_alloc(dword_100082BBC);
  *(_QWORD *)(v2 + 16) = v13;
  *v13 = v2;
  v13[1] = sub_1000158C4;
  return sub_1000436CC(a1, v6, v7, v8, v9, v10, v11, v12);
}

uint64_t sub_100045294(uint64_t a1)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 56);
  swift_bridgeObjectRetain(*(_QWORD *)(a1 + 40));
  swift_bridgeObjectRetain(v2);
  return a1;
}

uint64_t sub_1000452C8(uint64_t a1)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 40);
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 56));
  swift_bridgeObjectRelease(v2);
  return a1;
}

uint64_t sub_100045300(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v4 = *(_QWORD *)(type metadata accessor for TimelineProviderContext(0) - 8);
  v5 = (*(unsigned __int8 *)(v4 + 80) + 56) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v6 = v1[2];
  v7 = v1[3];
  v8 = v1[4];
  v9 = v1[5];
  v10 = v1[6];
  v11 = (uint64_t)v1 + v5;
  v12 = *(_QWORD *)((char *)v1 + ((*(_QWORD *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFFFF8));
  v13 = (_QWORD *)swift_task_alloc(dword_100082BEC);
  *(_QWORD *)(v2 + 16) = v13;
  *v13 = v2;
  v13[1] = sub_1000158C4;
  return sub_100042ADC(a1, v6, v7, v8, v9, v10, v11, v12);
}

void *AppPreferences.homeSensingDefaultsChangedNotification.unsafeMutableAddressor()
{
  return &static AppPreferences.homeSensingDefaultsChangedNotification;
}

uint64_t sub_1000453DC(void *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  __objc2_prot_list *v14;
  id v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _DWORD *v19;
  unint64_t v20;
  uint64_t (*v21)(char *, uint64_t, uint64_t);
  int v22;
  int v23;
  BOOL v24;
  _DWORD *v25;
  uint64_t v26;
  os_log_type_t v27;
  uint8_t *v28;
  _QWORD *v29;
  __objc2_prot_list *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  NSObject *v34;
  uint64_t v35;
  uint64_t v36;
  Class v37;
  objc_class *v38;
  objc_class *v39;
  id v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  id v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _DWORD *v48;
  NSObject *v49;
  os_log_type_t v50;
  uint8_t *v51;
  id v52;
  uint64_t v53;
  unint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  NSObject *v59;
  os_log_type_t v60;
  uint64_t v61;
  unint64_t v62;
  unint64_t v63;
  void (*v64)(char *, uint64_t);
  uint64_t v65;
  Class v66;
  objc_class *i;
  objc_class *v68;
  id v69;
  uint64_t v70;
  unint64_t v71;
  unint64_t v72;
  unint64_t v73;
  uint64_t v74;
  objc_class *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  objc_class *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t result;
  uint8_t *v85;
  uint64_t v86;
  uint64_t v87;
  char *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  NSObject *v92;
  uint64_t v93;

  v2 = type metadata accessor for UUID(0);
  v89 = *(_QWORD *)(v2 - 8);
  v3 = __chkstk_darwin(v2);
  v5 = (char *)&v85 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  v7 = (char *)&v85 - v6;
  v8 = sub_100003704(&qword_100082BF8);
  v9 = __chkstk_darwin(v8);
  v11 = (char *)&v85 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v13 = (char *)&v85 - v12;
  v14 = &DataModel;
  v15 = objc_msgSend(a1, "homes");
  v16 = sub_100046DC4();
  v17 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v15, v16);

  if (v17 < 0 || (v17 & 0x4000000000000000) != 0)
  {
    v73 = swift_bridgeObjectRetain(v17);
    v18 = (uint64_t)sub_10002273C(v73);
    swift_bridgeObjectRelease(v17);
  }
  else
  {
    v18 = v17 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v17);
  }
  v88 = v7;
  v92 = v18;
  v19 = 0;
  sub_100046344((uint64_t *)&v92);
  swift_bridgeObjectRelease(v17);
  v20 = (unint64_t)v92;
  if ((sub_100046E00() & 1) != 0)
    goto LABEL_7;
  sub_100046098((uint64_t)v13);
  v21 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v89 + 48);
  v22 = v21(v13, 1, v2);
  v87 = v2;
  v23 = v22;
  sub_100046EBC((uint64_t)v13);
  v24 = v23 == 1;
  v2 = v87;
  if (v24)
  {
LABEL_7:
    v25 = objc_msgSend(a1, "currentHome");
    if (v25)
    {
      v19 = v25;
      swift_release(v20);
      if (qword_100081680 != -1)
        swift_once(&qword_100081680, sub_100022448);
      v26 = type metadata accessor for Logger(0);
      sub_100003884(v26, (uint64_t)static DataModel.widgetLogger);
      v14 = v19;
      v20 = Logger.logObject.getter(v14);
      v27 = static os_log_type_t.default.getter();
      if (os_log_type_enabled((os_log_t)v20, v27))
      {
        v28 = (uint8_t *)swift_slowAlloc(12, -1);
        v29 = (_QWORD *)swift_slowAlloc(8, -1);
        *(_DWORD *)v28 = 138412290;
        v92 = v14;
        v30 = v14;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v92, &v93, v28 + 4, v28 + 12);
        *v29 = v19;

        _os_log_impl((void *)&_mh_execute_header, (os_log_t)v20, v27, "Using Home Sensing, home is %@", v28, 0xCu);
        v31 = sub_100003704((uint64_t *)&unk_100081FD0);
        swift_arrayDestroy(v29, 1, v31);
        swift_slowDealloc(v29, -1, -1);
        swift_slowDealloc(v28, -1, -1);

        return (uint64_t)v19;
      }
      goto LABEL_29;
    }
    if (qword_100081680 != -1)
      swift_once(&qword_100081680, sub_100022448);
    v32 = type metadata accessor for Logger(0);
    sub_100003884(v32, (uint64_t)static DataModel.widgetLogger);
    v33 = swift_retain_n(v20, 2);
    v34 = Logger.logObject.getter(v33);
    v14 = (__objc2_prot_list *)static os_log_type_t.default.getter();
    if (!os_log_type_enabled(v34, (os_log_type_t)v14))
    {

      swift_release_n(v20, 2);
      v36 = v20 & 0x4000000000000000;
      goto LABEL_52;
    }
    v19 = (_DWORD *)swift_slowAlloc(12, -1);
    v35 = swift_slowAlloc(32, -1);
    v92 = v35;
    *v19 = 136315138;
    v36 = v20 & 0x4000000000000000;
    if ((v20 & 0x8000000000000000) != 0 || v36)
    {
      v74 = swift_retain(v20);
      if (_CocoaArrayWrapper.endIndex.getter(v74))
        goto LABEL_18;
    }
    else
    {
      v37 = *(Class *)(v20 + 16);
      swift_retain(v20);
      if (v37)
      {
LABEL_18:
        if ((v20 & 0xC000000000000001) != 0)
        {
          v38 = (objc_class *)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v20);
        }
        else
        {
          if (!*(_QWORD *)(v20 + 16))
          {
            __break(1u);
            goto LABEL_67;
          }
          v38 = (objc_class *)*(id *)(v20 + 32);
        }
        v39 = v38;
        swift_release(v20);
        v40 = -[objc_class name](v39, "name");

        v41 = static String._unconditionallyBridgeFromObjectiveC(_:)(v40);
        v43 = v42;

        goto LABEL_51;
      }
    }
    v41 = 1701736302;
    swift_release(v20);
    v43 = 0xE400000000000000;
LABEL_51:
    v90 = sub_10001DF04(v41, v43, (uint64_t *)&v92);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v90, &v91, v19 + 1, v19 + 3);
    swift_release_n(v20, 2);
    swift_bridgeObjectRelease(v43);
    _os_log_impl((void *)&_mh_execute_header, v34, (os_log_type_t)v14, "Using Home Sensing, no 'currentHome' was found from HomeKit, falling back to %s)", (uint8_t *)v19, 0xCu);
    swift_arrayDestroy(v35, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v35, -1, -1);
    swift_slowDealloc(v19, -1, -1);

LABEL_52:
    if ((v20 & 0x8000000000000000) != 0 || v36)
    {
      v76 = swift_bridgeObjectRetain(v20);
      v77 = _CocoaArrayWrapper.endIndex.getter(v76);
      swift_release(v20);
      if (!v77)
        goto LABEL_64;
    }
    else if (!*(_QWORD *)(v20 + 16))
    {
      goto LABEL_64;
    }
    if ((v20 & 0xC000000000000001) != 0)
      goto LABEL_61;
    if (*(_QWORD *)(v20 + 16))
    {
LABEL_57:
      v75 = (objc_class *)*(id *)(v20 + 32);
LABEL_58:
      v19 = v75;
      swift_release(v20);
      return (uint64_t)v19;
    }
    __break(1u);
    goto LABEL_63;
  }
  sub_100046098((uint64_t)v11);
  if (v21(v11, 1, v2) == 1)
  {
    sub_100046EBC((uint64_t)v11);
    if ((v20 & 0x8000000000000000) == 0 && (v20 & 0x4000000000000000) == 0)
    {
      if (*(_QWORD *)(v20 + 16))
        goto LABEL_26;
      goto LABEL_64;
    }
LABEL_63:
    v78 = swift_bridgeObjectRetain(v20);
    v79 = _CocoaArrayWrapper.endIndex.getter(v78);
    swift_release(v20);
    if (v79)
    {
LABEL_26:
      if ((v20 & 0xC000000000000001) == 0)
      {
        if (!*(_QWORD *)(v20 + 16))
        {
          __break(1u);
LABEL_29:

          return (uint64_t)v19;
        }
        goto LABEL_57;
      }
LABEL_61:
      v75 = (objc_class *)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v20);
      goto LABEL_58;
    }
LABEL_64:
    swift_release(v20);
    return 0;
  }
  v35 = (uint64_t)v88;
  v36 = v89;
  (*(void (**)(char *, char *, uint64_t))(v89 + 32))(v88, v11, v2);
  v44 = objc_msgSend(a1, "homes");
  v45 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v44, v16);

  __chkstk_darwin(v46);
  *(&v85 - 2) = (uint8_t *)v35;
  v19 = sub_100045F60(sub_100046EFC, (uint64_t)(&v85 - 4), v45);
  swift_bridgeObjectRelease(v45);
  if (v19)
  {
    swift_release(v20);
    if (qword_100081680 == -1)
    {
LABEL_33:
      v47 = type metadata accessor for Logger(0);
      sub_100003884(v47, (uint64_t)static DataModel.widgetLogger);
      v48 = v19;
      v49 = Logger.logObject.getter(v48);
      v50 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v49, v50))
      {
        v51 = (uint8_t *)swift_slowAlloc(12, -1);
        v86 = swift_slowAlloc(32, -1);
        v92 = v86;
        *(_DWORD *)v51 = 136315138;
        v85 = v51 + 4;
        v52 = objc_msgSend(v48, "name");
        v53 = static String._unconditionallyBridgeFromObjectiveC(_:)(v52);
        v55 = v54;

        v2 = v87;
        v90 = sub_10001DF04(v53, v55, (uint64_t *)&v92);
        v36 = v89;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v90, &v91, v85, v51 + 12);

        swift_bridgeObjectRelease(v55);
        _os_log_impl((void *)&_mh_execute_header, v49, v50, "Home.app has locked home to '%s', using that one.", v51, 0xCu);
        v56 = v86;
        swift_arrayDestroy(v86, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v56, -1, -1);
        swift_slowDealloc(v51, -1, -1);

      }
      else
      {

      }
      (*(void (**)(uint64_t, uint64_t))(v36 + 8))(v35, v2);
      return (uint64_t)v19;
    }
LABEL_67:
    swift_once(&qword_100081680, sub_100022448);
    goto LABEL_33;
  }
  if (qword_100081680 != -1)
    swift_once(&qword_100081680, sub_100022448);
  v57 = type metadata accessor for Logger(0);
  sub_100003884(v57, (uint64_t)static DataModel.widgetLogger);
  (*(void (**)(char *, uint64_t, uint64_t))(v36 + 16))(v5, v35, v2);
  v58 = swift_retain_n(v20, 2);
  v59 = Logger.logObject.getter(v58);
  v60 = static os_log_type_t.default.getter();
  if (!os_log_type_enabled(v59, v60))
  {
    v64 = *(void (**)(char *, uint64_t))(v36 + 8);
    v64(v5, v2);

    swift_release_n(v20, 2);
    v65 = v20 & 0x4000000000000000;
    goto LABEL_71;
  }
  v45 = swift_slowAlloc(22, -1);
  v14 = (__objc2_prot_list *)swift_slowAlloc(64, -1);
  v92 = v14;
  *(_DWORD *)v45 = 136315394;
  v61 = UUID.uuidString.getter();
  v63 = v62;
  v90 = sub_10001DF04(v61, v62, (uint64_t *)&v92);
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v90, &v91, v45 + 4, v45 + 12);
  swift_bridgeObjectRelease(v63);
  v64 = *(void (**)(char *, uint64_t))(v36 + 8);
  v64(v5, v87);
  *(_WORD *)(v45 + 12) = 2080;
  v65 = v20 & 0x4000000000000000;
  if ((v20 & 0x8000000000000000) != 0 || v65)
  {
    v80 = swift_retain(v20);
    if (_CocoaArrayWrapper.endIndex.getter(v80))
      goto LABEL_41;
LABEL_69:
    v70 = 1701736302;
    swift_release(v20);
    v72 = 0xE400000000000000;
    goto LABEL_70;
  }
  v66 = *(Class *)(v20 + 16);
  swift_retain(v20);
  if (!v66)
    goto LABEL_69;
LABEL_41:
  if ((v20 & 0xC000000000000001) != 0)
    goto LABEL_84;
  if (!*(_QWORD *)(v20 + 16))
  {
    __break(1u);
    result = swift_release(v92);
    __break(1u);
    return result;
  }
  for (i = (objc_class *)*(id *)(v20 + 32);
        ;
        i = (objc_class *)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v20))
  {
    v68 = i;
    swift_release(v20);
    v69 = -[objc_class name](v68, "name");

    v70 = static String._unconditionallyBridgeFromObjectiveC(_:)(v69);
    v72 = v71;

LABEL_70:
    v90 = sub_10001DF04(v70, v72, (uint64_t *)&v92);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v90, &v91, v45 + 14, v45 + 22);
    swift_release_n(v20, 2);
    swift_bridgeObjectRelease(v72);
    _os_log_impl((void *)&_mh_execute_header, v59, v60, "Home.app has locked home to uuid '%s' but it wasn't found, falling back to %s)", (uint8_t *)v45, 0x16u);
    swift_arrayDestroy(v14, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v14, -1, -1);
    swift_slowDealloc(v45, -1, -1);

    v2 = v87;
LABEL_71:
    if ((v20 & 0x8000000000000000) != 0 || v65)
      break;
    if (!*(_QWORD *)(v20 + 16))
      goto LABEL_79;
LABEL_74:
    if ((v20 & 0xC000000000000001) != 0)
    {
      v81 = (objc_class *)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v20);
      goto LABEL_77;
    }
    if (*(_QWORD *)(v20 + 16))
    {
      v81 = (objc_class *)*(id *)(v20 + 32);
LABEL_77:
      v19 = v81;
      swift_release(v20);
      goto LABEL_80;
    }
    __break(1u);
LABEL_84:
    ;
  }
  v82 = swift_bridgeObjectRetain(v20);
  v83 = _CocoaArrayWrapper.endIndex.getter(v82);
  swift_release(v20);
  if (v83)
    goto LABEL_74;
LABEL_79:
  swift_release(v20);
  v19 = 0;
LABEL_80:
  v64(v88, v2);
  return (uint64_t)v19;
}

void *AppPreferences.selectedHomeChangedNotification.unsafeMutableAddressor()
{
  return &static AppPreferences.selectedHomeChangedNotification;
}

void *sub_100045F60(uint64_t (*a1)(id *), uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  id v9;
  void *v10;
  uint64_t v11;
  char v12;
  uint64_t v14;
  id v15;

  v4 = v3;
  if ((unint64_t)a3 >> 62)
    goto LABEL_16;
  v7 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain(a3);
  for (; v7; v7 = _CocoaArrayWrapper.endIndex.getter(v14))
  {
    v8 = 4;
    while (1)
    {
      v9 = (a3 & 0xC000000000000001) != 0
         ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v8 - 4, a3)
         : *(id *)(a3 + 8 * v8);
      v10 = v9;
      v11 = v8 - 3;
      if (__OFADD__(v8 - 4, 1))
        break;
      v15 = v9;
      v12 = a1(&v15);
      if (v4)
      {
        swift_bridgeObjectRelease(a3);

        return v10;
      }
      if ((v12 & 1) != 0)
      {
        swift_bridgeObjectRelease(a3);
        return v10;
      }

      ++v8;
      if (v11 == v7)
        goto LABEL_11;
    }
    __break(1u);
LABEL_16:
    if (a3 < 0)
      v14 = a3;
    else
      v14 = a3 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a3);
  }
LABEL_11:
  swift_bridgeObjectRelease(a3);
  return 0;
}

void *AppPreferences.homeSharedDefaultsSuite.unsafeMutableAddressor()
{
  return &static AppPreferences.homeSharedDefaultsSuite;
}

void *AppPreferences.isHomeSensingEnabledKey.unsafeMutableAddressor()
{
  return &static AppPreferences.isHomeSensingEnabledKey;
}

uint64_t sub_100046098@<X0>(uint64_t a1@<X8>)
{
  id v2;
  NSString v3;
  id v4;
  NSString v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  v2 = objc_allocWithZone((Class)NSUserDefaults);
  v3 = String._bridgeToObjectiveC()();
  v4 = objc_msgSend(v2, "initWithSuiteName:", v3);

  if (v4
    && (v5 = String._bridgeToObjectiveC()(),
        v6 = objc_msgSend(v4, "stringForKey:", v5),
        v4,
        v5,
        v6))
  {
    v7 = static String._unconditionallyBridgeFromObjectiveC(_:)(v6);
    v9 = v8;

    UUID.init(uuidString:)(v7, v9);
    return swift_bridgeObjectRelease(v9);
  }
  else
  {
    v11 = type metadata accessor for UUID(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 56))(a1, 1, 1, v11);
  }
}

void *AppPreferences.nanoHomeSyncDomain.unsafeMutableAddressor()
{
  return &static AppPreferences.nanoHomeSyncDomain;
}

void *AppPreferences.selectedHomeKey.unsafeMutableAddressor()
{
  return &static AppPreferences.selectedHomeKey;
}

uint64_t sub_1000461CC(id *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  id v8;
  uint64_t v10;

  v4 = type metadata accessor for UUID(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin();
  v7 = (char *)&v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = objc_msgSend(*a1, "uniqueIdentifier");
  static UUID._unconditionallyBridgeFromObjectiveC(_:)();

  LOBYTE(a2) = static UUID.== infix(_:_:)(v7, a2);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  return a2 & 1;
}

unint64_t static AppPreferences.homeSharedDefaultsSuite.getter()
{
  return 0xD000000000000014;
}

unint64_t static AppPreferences.isHomeSensingEnabledKey.getter()
{
  return 0xD000000000000014;
}

unint64_t static AppPreferences.homeSensingDefaultsChangedNotification.getter()
{
  return 0xD000000000000021;
}

unint64_t static AppPreferences.selectedHomeChangedNotification.getter()
{
  return 0xD000000000000022;
}

unint64_t static AppPreferences.nanoHomeSyncDomain.getter()
{
  return 0xD000000000000017;
}

unint64_t static AppPreferences.selectedHomeKey.getter()
{
  return 0xD000000000000011;
}

ValueMetadata *type metadata accessor for AppPreferences()
{
  return &type metadata for AppPreferences;
}

uint64_t sub_100046344(uint64_t *a1)
{
  uint64_t v2;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7[2];

  v2 = *a1;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*a1);
  *a1 = v2;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    v2 = sub_1000247D8(v2);
    *a1 = v2;
  }
  v4 = *(_QWORD *)(v2 + 16);
  v7[0] = v2 + 32;
  v7[1] = v4;
  sub_1000463BC(v7);
  return specialized ContiguousArray._endMutation()(v5);
}

void sub_1000463BC(uint64_t *a1)
{
  uint64_t v1;
  Swift::Int v3;
  Swift::Int v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  double *v9;
  Swift::Int v10;
  uint64_t v11;
  __objc2_prot_list *v12;
  Swift::Int v13;
  unint64_t v14;
  Swift::Int v15;
  void *v16;
  id v17;
  id v18;
  unsigned int v19;
  unsigned int v20;
  Swift::Int v21;
  id v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  id v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  Swift::Int v31;
  unsigned int v32;
  void *v33;
  id v34;
  id v35;
  unsigned int v36;
  id v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  id v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char v46;
  char v47;
  uint64_t *v48;
  Swift::Int v49;
  Swift::Int v50;
  uint64_t *v51;
  uint64_t v52;
  Swift::Int v53;
  uint64_t v54;
  void *v55;
  Swift::Int v56;
  uint64_t v57;
  void *v58;
  id v59;
  id v60;
  unsigned __int8 v61;
  id v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  id v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  char v71;
  void *v72;
  unint64_t v73;
  unint64_t v74;
  double *v75;
  double *v76;
  unint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  char v81;
  double *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  BOOL v88;
  unint64_t v89;
  double *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  double *v95;
  uint64_t v96;
  uint64_t v97;
  BOOL v98;
  uint64_t v99;
  char v100;
  double *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  BOOL v105;
  uint64_t v106;
  uint64_t v107;
  double *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  double *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  unint64_t v116;
  double *v117;
  uint64_t v118;
  double *v119;
  uint64_t v120;
  double *v121;
  unint64_t v122;
  double *v123;
  double v124;
  uint64_t v125;
  unint64_t v126;
  uint64_t v127;
  unint64_t v128;
  double *v129;
  double v130;
  double v131;
  double *v132;
  double *v133;
  double *v134;
  unint64_t v135;
  double *v136;
  uint64_t v137;
  uint64_t *v138;
  uint64_t v139;
  Swift::Int v140;
  double *v141;
  double *v142;
  Swift::Int v143;
  Swift::Int v144;
  Swift::Int v145;
  unsigned int v146;
  uint64_t v147;
  void **v148;
  uint64_t v149;
  Swift::Int v150;
  Swift::Int v151;
  Swift::Int v152;
  Swift::Int v153;
  uint64_t v154;

  v3 = a1[1];
  v4 = _minimumMergeRunLength(_:)(v3);
  if (v4 >= v3)
  {
    if (v3 < 0)
      goto LABEL_160;
    if (v3)
      sub_100023938(0, v3, 1, a1);
    return;
  }
  if (v3 >= 0)
    v5 = v3;
  else
    v5 = v3 + 1;
  if (v3 < -1)
    goto LABEL_168;
  v140 = v4;
  v145 = v3;
  v138 = a1;
  if (v3 < 2)
  {
    v9 = _swiftEmptyArrayStorage;
    v154 = (uint64_t)_swiftEmptyArrayStorage;
    v148 = (void **)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 32);
    if (v3 != 1)
    {
      v14 = *(_QWORD *)&_swiftEmptyArrayStorage[2];
LABEL_123:
      if (v14 >= 2)
      {
        v127 = *v138;
        do
        {
          v128 = v14 - 2;
          if (v14 < 2)
            goto LABEL_155;
          if (!v127)
            goto LABEL_167;
          v117 = v9;
          v129 = v9 + 4;
          v130 = v9[2 * v128 + 4];
          v131 = v9[2 * v14 + 3];
          sub_100023B0C((void **)(v127 + 8 * *(_QWORD *)&v130), (id *)(v127 + 8 * *(_QWORD *)&v129[2 * v14 - 2]), v127 + 8 * *(_QWORD *)&v131, v148);
          if (v1)
            goto LABEL_135;
          if (*(uint64_t *)&v131 < *(uint64_t *)&v130)
            goto LABEL_156;
          if ((swift_isUniquelyReferenced_nonNull_native(v117) & 1) == 0)
            v117 = sub_100024188((uint64_t)v117);
          if (v128 >= *((_QWORD *)v117 + 2))
            goto LABEL_157;
          v132 = v117;
          v133 = v117 + 4;
          v134 = &v117[2 * v128 + 4];
          *v134 = v130;
          v134[1] = v131;
          v135 = *((_QWORD *)v117 + 2);
          if (v14 > v135)
            goto LABEL_158;
          v9 = v132;
          memmove(&v133[2 * v14 - 2], &v133[2 * v14], 16 * (v135 - v14));
          *((_QWORD *)v9 + 2) = v135 - 1;
          v14 = v135 - 1;
        }
        while (v135 > 2);
      }
      v136 = v9;
LABEL_137:
      v137 = swift_bridgeObjectRelease(v136);
      *(_QWORD *)((v154 & 0xFFFFFFFFFFFFF8) + 0x10) = 0;
      specialized Array._endMutation()(v137);
      swift_bridgeObjectRelease(v154);
      return;
    }
  }
  else
  {
    v6 = v5 >> 1;
    v7 = sub_100046DC4();
    v8 = static Array._allocateBufferUninitialized(minimumCapacity:)(v6, v7);
    *(_QWORD *)((v8 & 0xFFFFFFFFFFFFFF8) + 0x10) = v6;
    v148 = (void **)((v8 & 0xFFFFFFFFFFFFFF8) + 32);
    v154 = v8;
  }
  v10 = 0;
  v11 = *a1;
  v139 = *a1 - 8;
  v9 = _swiftEmptyArrayStorage;
  v12 = &DataModel;
  v13 = v145;
  v149 = *a1;
  while (1)
  {
    v15 = v10++;
    if (v10 >= v13)
      goto LABEL_50;
    v141 = v9;
    v16 = *(void **)(v11 + 8 * v15);
    v17 = *(id *)(v11 + 8 * v10);
    v18 = v16;
    v19 = objc_msgSend(v17, (SEL)v12[393].count);
    if (v19 == objc_msgSend(v18, (SEL)v12[393].count))
    {
      v150 = v10;
      v22 = objc_msgSend(v17, "name");
      v23 = static String._unconditionallyBridgeFromObjectiveC(_:)(v22);
      v25 = v24;

      v26 = objc_msgSend(v18, "name");
      v27 = static String._unconditionallyBridgeFromObjectiveC(_:)(v26);
      v29 = v28;

      if (v23 == v27 && v25 == v29)
      {
        v20 = 0;
        v29 = v25;
      }
      else
      {
        v20 = _stringCompareWithSmolCheck(_:_:expecting:)(v23, v25, v27, v29, 1);
      }
      swift_bridgeObjectRelease(v25);
      swift_bridgeObjectRelease(v29);

      v21 = v15 + 2;
      v12 = &DataModel;
      v10 = v150;
      if (v15 + 2 < v145)
      {
LABEL_27:
        v31 = v21;
        v11 = v149;
        v146 = v20;
        do
        {
          v21 = v31;
          v33 = *(void **)(v11 + 8 * v10);
          v34 = *(id *)(v11 + 8 * v31);
          v35 = v33;
          v36 = objc_msgSend(v34, (SEL)v12[393].count);
          if (v36 == objc_msgSend(v35, (SEL)v12[393].count))
          {
            v151 = v21;
            v37 = objc_msgSend(v34, "name");
            v38 = static String._unconditionallyBridgeFromObjectiveC(_:)(v37);
            v40 = v39;

            v41 = objc_msgSend(v35, "name");
            v42 = static String._unconditionallyBridgeFromObjectiveC(_:)(v41);
            v44 = v43;

            if (v38 == v42 && v40 == v44)
            {

              swift_bridgeObjectRelease_n(v40, 2);
              v12 = &DataModel;
              v21 = v151;
              v20 = v146;
              if ((v146 & 1) != 0)
              {
                v9 = v141;
                v11 = v149;
                goto LABEL_41;
              }
            }
            else
            {
              v46 = _stringCompareWithSmolCheck(_:_:expecting:)(v38, v40, v42, v44, 1);

              swift_bridgeObjectRelease(v40);
              swift_bridgeObjectRelease(v44);
              v47 = v146 ^ v46;
              v20 = v146;
              v12 = &DataModel;
              v21 = v151;
              if ((v47 & 1) != 0)
                goto LABEL_19;
            }
          }
          else
          {
            v32 = objc_msgSend(v34, (SEL)v12[393].count);

            if (((v20 ^ v32) & 1) != 0)
              goto LABEL_19;
          }
          v31 = v21 + 1;
          v10 = v21;
          v11 = v149;
        }
        while (v21 + 1 < v145);
        ++v21;
        goto LABEL_40;
      }
    }
    else
    {
      v20 = objc_msgSend(v17, (SEL)v12[393].count);

      v21 = v15 + 2;
      if (v15 + 2 < v145)
        goto LABEL_27;
    }
    LOBYTE(v146) = v20;
LABEL_19:
    v11 = v149;
LABEL_40:
    v10 = v21;
    v9 = v141;
    if ((v146 & 1) != 0)
    {
LABEL_41:
      if (v21 < v15)
        goto LABEL_161;
      if (v15 < v21)
      {
        v48 = (uint64_t *)(v139 + 8 * v21);
        v49 = v21;
        v50 = v15;
        v51 = (uint64_t *)(v11 + 8 * v15);
        do
        {
          if (v50 != --v49)
          {
            if (!v11)
              goto LABEL_166;
            v52 = *v51;
            *v51 = *v48;
            *v48 = v52;
          }
          ++v50;
          --v48;
          ++v51;
        }
        while (v50 < v49);
      }
      v10 = v21;
    }
LABEL_50:
    if (v10 >= v145)
      goto LABEL_74;
    if (__OFSUB__(v10, v15))
      goto LABEL_159;
    if (v10 - v15 >= v140)
      goto LABEL_74;
    if (__OFADD__(v15, v140))
      goto LABEL_162;
    v53 = v145;
    if (v15 + v140 < v145)
      v53 = v15 + v140;
    if (v53 < v15)
      break;
    if (v10 == v53)
      goto LABEL_74;
    v142 = v9;
    v143 = v53;
    v54 = v139 + 8 * v10;
    v144 = v15;
    while (2)
    {
      v55 = *(void **)(v11 + 8 * v10);
      v56 = v15;
      v147 = v54;
      v57 = v54;
      v152 = v10;
      while (1)
      {
        v58 = *(void **)v57;
        v59 = v55;
        v60 = v58;
        LODWORD(v58) = objc_msgSend(v59, (SEL)v12[393].count);
        if ((_DWORD)v58 == objc_msgSend(v60, (SEL)v12[393].count))
          break;
        v61 = objc_msgSend(v59, (SEL)v12[393].count);

        if ((v61 & 1) == 0)
          goto LABEL_60;
LABEL_70:
        if (!v11)
          goto LABEL_164;
        v72 = *(void **)v57;
        v55 = *(void **)(v57 + 8);
        *(_QWORD *)v57 = v55;
        *(_QWORD *)(v57 + 8) = v72;
        v57 -= 8;
        if (v10 == ++v56)
          goto LABEL_60;
      }
      v62 = objc_msgSend(v59, "name");
      v63 = static String._unconditionallyBridgeFromObjectiveC(_:)(v62);
      v65 = v64;

      v66 = objc_msgSend(v60, "name");
      v67 = static String._unconditionallyBridgeFromObjectiveC(_:)(v66);
      v69 = v68;

      if (v63 != v67 || v65 != v69)
      {
        v71 = _stringCompareWithSmolCheck(_:_:expecting:)(v63, v65, v67, v69, 1);

        swift_bridgeObjectRelease(v65);
        swift_bridgeObjectRelease(v69);
        v11 = v149;
        v10 = v152;
        v12 = &DataModel;
        if ((v71 & 1) == 0)
          goto LABEL_60;
        goto LABEL_70;
      }

      swift_bridgeObjectRelease_n(v65, 2);
      v11 = v149;
      v10 = v152;
      v12 = &DataModel;
LABEL_60:
      ++v10;
      v54 = v147 + 8;
      v15 = v144;
      if (v10 != v143)
        continue;
      break;
    }
    v10 = v143;
    v9 = v142;
LABEL_74:
    if (v10 < v15)
      goto LABEL_154;
    if ((swift_isUniquelyReferenced_nonNull_native(v9) & 1) == 0)
      v9 = sub_100023FE8(0, *((_QWORD *)v9 + 2) + 1, 1, (uint64_t)v9);
    v74 = *((_QWORD *)v9 + 2);
    v73 = *((_QWORD *)v9 + 3);
    v14 = v74 + 1;
    if (v74 >= v73 >> 1)
      v9 = sub_100023FE8((double *)(v73 > 1), v74 + 1, 1, (uint64_t)v9);
    *((_QWORD *)v9 + 2) = v14;
    v75 = v9 + 4;
    v76 = &v9[2 * v74 + 4];
    *(_QWORD *)v76 = v15;
    *((_QWORD *)v76 + 1) = v10;
    if (v74)
    {
      v153 = v10;
      while (1)
      {
        v77 = v14 - 1;
        if (v14 >= 4)
        {
          v82 = &v75[2 * v14];
          v83 = *((_QWORD *)v82 - 8);
          v84 = *((_QWORD *)v82 - 7);
          v88 = __OFSUB__(v84, v83);
          v85 = v84 - v83;
          if (v88)
            goto LABEL_143;
          v87 = *((_QWORD *)v82 - 6);
          v86 = *((_QWORD *)v82 - 5);
          v88 = __OFSUB__(v86, v87);
          v80 = v86 - v87;
          v81 = v88;
          if (v88)
            goto LABEL_144;
          v89 = v14 - 2;
          v90 = &v75[2 * v14 - 4];
          v92 = *(_QWORD *)v90;
          v91 = *((_QWORD *)v90 + 1);
          v88 = __OFSUB__(v91, v92);
          v93 = v91 - v92;
          if (v88)
            goto LABEL_146;
          v88 = __OFADD__(v80, v93);
          v94 = v80 + v93;
          if (v88)
            goto LABEL_149;
          if (v94 >= v85)
          {
            v112 = &v75[2 * v77];
            v114 = *(_QWORD *)v112;
            v113 = *((_QWORD *)v112 + 1);
            v88 = __OFSUB__(v113, v114);
            v115 = v113 - v114;
            if (v88)
              goto LABEL_153;
            v105 = v80 < v115;
            goto LABEL_112;
          }
        }
        else
        {
          if (v14 != 3)
          {
            v106 = *((_QWORD *)v9 + 4);
            v107 = *((_QWORD *)v9 + 5);
            v88 = __OFSUB__(v107, v106);
            v99 = v107 - v106;
            v100 = v88;
            goto LABEL_106;
          }
          v79 = *((_QWORD *)v9 + 4);
          v78 = *((_QWORD *)v9 + 5);
          v88 = __OFSUB__(v78, v79);
          v80 = v78 - v79;
          v81 = v88;
        }
        if ((v81 & 1) != 0)
          goto LABEL_145;
        v89 = v14 - 2;
        v95 = &v75[2 * v14 - 4];
        v97 = *(_QWORD *)v95;
        v96 = *((_QWORD *)v95 + 1);
        v98 = __OFSUB__(v96, v97);
        v99 = v96 - v97;
        v100 = v98;
        if (v98)
          goto LABEL_148;
        v101 = &v75[2 * v77];
        v103 = *(_QWORD *)v101;
        v102 = *((_QWORD *)v101 + 1);
        v88 = __OFSUB__(v102, v103);
        v104 = v102 - v103;
        if (v88)
          goto LABEL_151;
        if (__OFADD__(v99, v104))
          goto LABEL_152;
        if (v99 + v104 >= v80)
        {
          v105 = v80 < v104;
LABEL_112:
          if (v105)
            v77 = v89;
          goto LABEL_114;
        }
LABEL_106:
        if ((v100 & 1) != 0)
          goto LABEL_147;
        v108 = &v75[2 * v77];
        v110 = *(_QWORD *)v108;
        v109 = *((_QWORD *)v108 + 1);
        v88 = __OFSUB__(v109, v110);
        v111 = v109 - v110;
        if (v88)
          goto LABEL_150;
        if (v111 < v99)
          goto LABEL_14;
LABEL_114:
        v116 = v77 - 1;
        if (v77 - 1 >= v14)
        {
          __break(1u);
LABEL_140:
          __break(1u);
LABEL_141:
          __break(1u);
LABEL_142:
          __break(1u);
LABEL_143:
          __break(1u);
LABEL_144:
          __break(1u);
LABEL_145:
          __break(1u);
LABEL_146:
          __break(1u);
LABEL_147:
          __break(1u);
LABEL_148:
          __break(1u);
LABEL_149:
          __break(1u);
LABEL_150:
          __break(1u);
LABEL_151:
          __break(1u);
LABEL_152:
          __break(1u);
LABEL_153:
          __break(1u);
LABEL_154:
          __break(1u);
LABEL_155:
          __break(1u);
LABEL_156:
          __break(1u);
LABEL_157:
          __break(1u);
LABEL_158:
          __break(1u);
LABEL_159:
          __break(1u);
LABEL_160:
          __break(1u);
LABEL_161:
          __break(1u);
LABEL_162:
          __break(1u);
          goto LABEL_163;
        }
        if (!v11)
          goto LABEL_165;
        v117 = v9;
        v118 = v11;
        v119 = &v75[2 * v116];
        v120 = *(_QWORD *)v119;
        v121 = v75;
        v122 = v77;
        v123 = &v75[2 * v77];
        v124 = v123[1];
        v125 = v118;
        sub_100023B0C((void **)(v118 + 8 * *(_QWORD *)v119), (id *)(v118 + 8 * *(_QWORD *)v123), v118 + 8 * *(_QWORD *)&v124, v148);
        if (v1)
        {
LABEL_135:
          v136 = v117;
          goto LABEL_137;
        }
        if (*(uint64_t *)&v124 < v120)
          goto LABEL_140;
        if (v122 > *((_QWORD *)v117 + 2))
          goto LABEL_141;
        *(_QWORD *)v119 = v120;
        v121[2 * v116 + 1] = v124;
        v126 = *((_QWORD *)v117 + 2);
        if (v122 >= v126)
          goto LABEL_142;
        v9 = v117;
        v14 = v126 - 1;
        memmove(v123, v123 + 2, 16 * (v126 - 1 - v122));
        v75 = v121;
        *((_QWORD *)v117 + 2) = v126 - 1;
        v12 = &DataModel;
        v10 = v153;
        v11 = v125;
        if (v126 <= 2)
          goto LABEL_14;
      }
    }
    v14 = 1;
LABEL_14:
    v13 = v145;
    if (v10 >= v145)
      goto LABEL_123;
  }
LABEL_163:
  __break(1u);
LABEL_164:
  __break(1u);
LABEL_165:
  __break(1u);
LABEL_166:
  __break(1u);
LABEL_167:
  __break(1u);
LABEL_168:
  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Can't construct Array with count < 0", 36, 2, "Swift/Array.swift", 17);
  __break(1u);
}

unint64_t sub_100046DC4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100081F38;
  if (!qword_100081F38)
  {
    v1 = objc_opt_self(HMHome);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_100081F38);
  }
  return result;
}

uint64_t sub_100046E00()
{
  id v0;
  NSString v1;
  id v2;
  NSString v3;
  id v4;

  v0 = objc_allocWithZone((Class)NSUserDefaults);
  v1 = String._bridgeToObjectiveC()();
  v2 = objc_msgSend(v0, "initWithSuiteName:", v1);

  if (!v2)
    return 1;
  v3 = String._bridgeToObjectiveC()();
  v4 = objc_msgSend(v2, "BOOLForKey:", v3);

  return (uint64_t)v4;
}

uint64_t sub_100046EBC(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100003704(&qword_100082BF8);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_100046EFC(id *a1)
{
  uint64_t v1;

  return sub_1000461CC(a1, *(_QWORD *)(v1 + 16)) & 1;
}

_QWORD *sub_100046F18(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  int *v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v27 = *a2;
    *a1 = *a2;
    a1 = (_QWORD *)(v27 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v27);
  }
  else
  {
    v7 = type metadata accessor for Date(0);
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = (int *)type metadata accessor for SingleGaugeEntry(0);
    v9 = v8[5];
    v10 = (char *)a1 + v9;
    v11 = (char *)a2 + v9;
    *(_OWORD *)v10 = *(_OWORD *)((char *)a2 + v9);
    *((_QWORD *)v10 + 2) = *(_QWORD *)((char *)a2 + v9 + 16);
    v10[24] = *((_BYTE *)a2 + v9 + 24);
    v13 = *(_QWORD *)((char *)a2 + v9 + 32);
    v12 = *(_QWORD *)((char *)a2 + v9 + 40);
    *((_QWORD *)v10 + 4) = v13;
    *((_QWORD *)v10 + 5) = v12;
    v14 = *((_QWORD *)v11 + 7);
    *((_QWORD *)v10 + 6) = *((_QWORD *)v11 + 6);
    *((_QWORD *)v10 + 7) = v14;
    v10[64] = v11[64];
    v15 = v8[6];
    v16 = (_QWORD *)((char *)a1 + v15);
    v17 = (_QWORD *)((char *)a2 + v15);
    v18 = v17[1];
    *v16 = *v17;
    v16[1] = v18;
    *(_OWORD *)((char *)a1 + v8[7]) = *(_OWORD *)((char *)a2 + v8[7]);
    v19 = *(int *)(a3 + 20);
    v20 = (_QWORD *)((char *)a1 + v19);
    v21 = (_QWORD *)((char *)a2 + v19);
    swift_bridgeObjectRetain(v12);
    swift_bridgeObjectRetain(v14);
    swift_bridgeObjectRetain(v18);
    v22 = sub_100003704(&qword_100081DA0);
    if (swift_getEnumCaseMultiPayload(v21, v22) == 1)
    {
      v23 = type metadata accessor for WidgetFamily(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v23 - 8) + 16))(v20, v21, v23);
      v24 = v20;
      v25 = v22;
      v26 = 1;
    }
    else
    {
      v28 = *v21;
      *v20 = *v21;
      swift_retain(v28);
      v24 = v20;
      v25 = v22;
      v26 = 0;
    }
    swift_storeEnumTagMultiPayload(v24, v25, v26);
  }
  return a1;
}

uint64_t sub_100047094(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;

  v4 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  v5 = type metadata accessor for SingleGaugeEntry(0);
  v6 = a1 + *(int *)(v5 + 20);
  swift_bridgeObjectRelease(*(_QWORD *)(v6 + 40));
  swift_bridgeObjectRelease(*(_QWORD *)(v6 + 56));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + *(int *)(v5 + 24) + 8));
  v7 = (_QWORD *)(a1 + *(int *)(a2 + 20));
  v8 = sub_100003704(&qword_100081DA0);
  if (swift_getEnumCaseMultiPayload(v7, v8) != 1)
    return swift_release(*v7);
  v9 = type metadata accessor for WidgetFamily(0);
  return (*(uint64_t (**)(_QWORD *, uint64_t))(*(_QWORD *)(v9 - 8) + 8))(v7, v9);
}

uint64_t sub_100047160(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  int *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v6 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = (int *)type metadata accessor for SingleGaugeEntry(0);
  v8 = v7[5];
  v9 = a1 + v8;
  v10 = a2 + v8;
  *(_OWORD *)v9 = *(_OWORD *)(a2 + v8);
  *(_QWORD *)(v9 + 16) = *(_QWORD *)(a2 + v8 + 16);
  *(_BYTE *)(v9 + 24) = *(_BYTE *)(a2 + v8 + 24);
  v12 = *(_QWORD *)(a2 + v8 + 32);
  v11 = *(_QWORD *)(a2 + v8 + 40);
  *(_QWORD *)(v9 + 32) = v12;
  *(_QWORD *)(v9 + 40) = v11;
  v13 = *(_QWORD *)(v10 + 56);
  *(_QWORD *)(v9 + 48) = *(_QWORD *)(v10 + 48);
  *(_QWORD *)(v9 + 56) = v13;
  *(_BYTE *)(v9 + 64) = *(_BYTE *)(v10 + 64);
  v14 = v7[6];
  v15 = (_QWORD *)(a1 + v14);
  v16 = (_QWORD *)(a2 + v14);
  v17 = v16[1];
  *v15 = *v16;
  v15[1] = v17;
  *(_OWORD *)(a1 + v7[7]) = *(_OWORD *)(a2 + v7[7]);
  v18 = *(int *)(a3 + 20);
  v19 = (uint64_t *)(a1 + v18);
  v20 = (uint64_t *)(a2 + v18);
  swift_bridgeObjectRetain(v11);
  swift_bridgeObjectRetain(v13);
  swift_bridgeObjectRetain(v17);
  v21 = sub_100003704(&qword_100081DA0);
  if (swift_getEnumCaseMultiPayload(v20, v21) == 1)
  {
    v22 = type metadata accessor for WidgetFamily(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v22 - 8) + 16))(v19, v20, v22);
    v23 = 1;
  }
  else
  {
    v24 = *v20;
    *v19 = *v20;
    swift_retain(v24);
    v23 = 0;
  }
  swift_storeEnumTagMultiPayload(v19, v21, v23);
  return a1;
}

uint64_t sub_1000472A8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  int *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  v6 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = (int *)type metadata accessor for SingleGaugeEntry(0);
  v8 = v7[5];
  v9 = a1 + v8;
  v10 = a2 + v8;
  *(_QWORD *)v9 = *(_QWORD *)(a2 + v8);
  *(_QWORD *)(v9 + 8) = *(_QWORD *)(a2 + v8 + 8);
  v11 = *(_QWORD *)(a2 + v8 + 16);
  *(_BYTE *)(v9 + 24) = *(_BYTE *)(v10 + 24);
  *(_QWORD *)(v9 + 16) = v11;
  *(_QWORD *)(v9 + 32) = *(_QWORD *)(v10 + 32);
  v12 = *(_QWORD *)(v10 + 40);
  v13 = *(_QWORD *)(v9 + 40);
  *(_QWORD *)(v9 + 40) = v12;
  swift_bridgeObjectRetain(v12);
  swift_bridgeObjectRelease(v13);
  *(_QWORD *)(v9 + 48) = *(_QWORD *)(v10 + 48);
  v14 = *(_QWORD *)(v10 + 56);
  v15 = *(_QWORD *)(v9 + 56);
  *(_QWORD *)(v9 + 56) = v14;
  swift_bridgeObjectRetain(v14);
  swift_bridgeObjectRelease(v15);
  *(_BYTE *)(v9 + 64) = *(_BYTE *)(v10 + 64);
  v16 = v7[6];
  v17 = (_QWORD *)(a1 + v16);
  v18 = (_QWORD *)(a2 + v16);
  *v17 = *v18;
  v19 = v18[1];
  v20 = v17[1];
  v17[1] = v19;
  swift_bridgeObjectRetain(v19);
  swift_bridgeObjectRelease(v20);
  v21 = v7[7];
  v22 = (_QWORD *)(a1 + v21);
  v23 = (_QWORD *)(a2 + v21);
  *v22 = *v23;
  v22[1] = v23[1];
  if (a1 != a2)
  {
    v24 = *(int *)(a3 + 20);
    v25 = (uint64_t *)(a1 + v24);
    v26 = (uint64_t *)(a2 + v24);
    sub_100033268(a1 + v24, &qword_100081DA0);
    v27 = sub_100003704(&qword_100081DA0);
    if (swift_getEnumCaseMultiPayload(v26, v27) == 1)
    {
      v28 = type metadata accessor for WidgetFamily(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v28 - 8) + 16))(v25, v26, v28);
      v29 = 1;
    }
    else
    {
      v30 = *v26;
      *v25 = *v26;
      swift_retain(v30);
      v29 = 0;
    }
    swift_storeEnumTagMultiPayload(v25, v27, v29);
  }
  return a1;
}

uint64_t sub_10004745C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  int *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  void *v14;
  const void *v15;
  uint64_t v16;
  uint64_t v17;

  v6 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = (int *)type metadata accessor for SingleGaugeEntry(0);
  v8 = v7[5];
  v9 = a1 + v8;
  v10 = a2 + v8;
  v11 = *(_OWORD *)(v10 + 48);
  *(_OWORD *)(v9 + 32) = *(_OWORD *)(v10 + 32);
  *(_OWORD *)(v9 + 48) = v11;
  *(_BYTE *)(v9 + 64) = *(_BYTE *)(v10 + 64);
  v12 = *(_OWORD *)(v10 + 16);
  *(_OWORD *)v9 = *(_OWORD *)v10;
  *(_OWORD *)(v9 + 16) = v12;
  *(_OWORD *)(a1 + v7[6]) = *(_OWORD *)(a2 + v7[6]);
  *(_OWORD *)(a1 + v7[7]) = *(_OWORD *)(a2 + v7[7]);
  v13 = *(int *)(a3 + 20);
  v14 = (void *)(a1 + v13);
  v15 = (const void *)(a2 + v13);
  v16 = sub_100003704(&qword_100081DA0);
  if (swift_getEnumCaseMultiPayload(v15, v16) == 1)
  {
    v17 = type metadata accessor for WidgetFamily(0);
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v17 - 8) + 32))(v14, v15, v17);
    swift_storeEnumTagMultiPayload(v14, v16, 1);
  }
  else
  {
    memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
  }
  return a1;
}

uint64_t sub_100047568(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  int *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  const void *v23;
  uint64_t v24;
  uint64_t v25;

  v6 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = (int *)type metadata accessor for SingleGaugeEntry(0);
  v8 = v7[5];
  v9 = a1 + v8;
  v10 = a2 + v8;
  *(_OWORD *)v9 = *(_OWORD *)(a2 + v8);
  *(_BYTE *)(v9 + 24) = *(_BYTE *)(a2 + v8 + 24);
  *(_QWORD *)(v9 + 16) = *(_QWORD *)(a2 + v8 + 16);
  v11 = *(_QWORD *)(a2 + v8 + 40);
  v12 = *(_QWORD *)(a1 + v8 + 40);
  *(_QWORD *)(v9 + 32) = *(_QWORD *)(a2 + v8 + 32);
  *(_QWORD *)(v9 + 40) = v11;
  swift_bridgeObjectRelease(v12);
  v13 = *(_QWORD *)(v10 + 56);
  v14 = *(_QWORD *)(v9 + 56);
  *(_QWORD *)(v9 + 48) = *(_QWORD *)(v10 + 48);
  *(_QWORD *)(v9 + 56) = v13;
  swift_bridgeObjectRelease(v14);
  *(_BYTE *)(v9 + 64) = *(_BYTE *)(v10 + 64);
  v15 = v7[6];
  v16 = (_QWORD *)(a1 + v15);
  v17 = (uint64_t *)(a2 + v15);
  v19 = *v17;
  v18 = v17[1];
  v20 = v16[1];
  *v16 = v19;
  v16[1] = v18;
  swift_bridgeObjectRelease(v20);
  *(_OWORD *)(a1 + v7[7]) = *(_OWORD *)(a2 + v7[7]);
  if (a1 != a2)
  {
    v21 = *(int *)(a3 + 20);
    v22 = (void *)(a1 + v21);
    v23 = (const void *)(a2 + v21);
    sub_100033268(a1 + v21, &qword_100081DA0);
    v24 = sub_100003704(&qword_100081DA0);
    if (swift_getEnumCaseMultiPayload(v23, v24) == 1)
    {
      v25 = type metadata accessor for WidgetFamily(0);
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v25 - 8) + 32))(v22, v23, v25);
      swift_storeEnumTagMultiPayload(v22, v24, 1);
    }
    else
    {
      memcpy(v22, v23, *(_QWORD *)(*(_QWORD *)(v24 - 8) + 64));
    }
  }
  return a1;
}

uint64_t sub_1000476D0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000476DC);
}

uint64_t sub_1000476DC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;

  v6 = type metadata accessor for SingleGaugeEntry(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
  }
  else
  {
    v8 = sub_100003704(&qword_1000822D0);
    v10 = a1 + *(int *)(a3 + 20);
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48);
  }
  return v9(v10, a2, v8);
}

uint64_t sub_100047754(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100047760);
}

uint64_t sub_100047760(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;

  v8 = type metadata accessor for SingleGaugeEntry(0);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    v10 = sub_100003704(&qword_1000822D0);
    v12 = a1 + *(int *)(a4 + 20);
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56);
  }
  return v11(v12, a2, a2, v10);
}

uint64_t type metadata accessor for SingleClimateGaugeView(uint64_t a1)
{
  return sub_100030820(a1, qword_100082C58, (uint64_t)&nominal type descriptor for SingleClimateGaugeView);
}

void sub_1000477F4(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v6[2];

  v2 = type metadata accessor for SingleGaugeEntry(319);
  if (v3 <= 0x3F)
  {
    v6[0] = *(_QWORD *)(v2 - 8) + 64;
    sub_100030350(319);
    if (v5 <= 0x3F)
    {
      v6[1] = *(_QWORD *)(v4 - 8) + 64;
      swift_initStructMetadata(a1, 256, 2, v6, a1 + 16);
    }
  }
}

uint64_t sub_100047878(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_10006C194, 1);
}

uint64_t sub_100047888@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v13;
  os_log_type_t v14;
  NSObject *v15;
  os_log_type_t v16;
  uint8_t *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD v20[2];
  uint64_t v21;
  uint64_t v22;

  v2 = v1;
  v4 = type metadata accessor for EnvironmentValues(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)v20 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_100003704(&qword_100081DA0);
  __chkstk_darwin(v8);
  v10 = (_QWORD *)((char *)v20 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_100047FE0(v2, (uint64_t)v10, &qword_100081DA0);
  if (swift_getEnumCaseMultiPayload(v10, v8) == 1)
  {
    v11 = type metadata accessor for WidgetFamily(0);
    return (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t))(*(_QWORD *)(v11 - 8) + 32))(a1, v10, v11);
  }
  else
  {
    v13 = *v10;
    v14 = static os_log_type_t.fault.getter();
    v15 = static Log.runtimeIssuesLog.getter();
    v16 = v14;
    if (os_log_type_enabled(v15, v14))
    {
      v17 = (uint8_t *)swift_slowAlloc(12, -1);
      v18 = swift_slowAlloc(32, -1);
      v20[1] = a1;
      v19 = v18;
      v22 = v18;
      *(_DWORD *)v17 = 136315138;
      v21 = sub_10001DF04(0x6146746567646957, 0xEC000000796C696DLL, &v22);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v21, &v22, v17 + 4, v17 + 12);
      _os_log_impl((void *)&_mh_execute_header, v15, v16, "Accessing Environment<%s>'s value outside of being installed on a View. This will always read the default value and will not update.", v17, 0xCu);
      swift_arrayDestroy(v19, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v19, -1, -1);
      swift_slowDealloc(v17, -1, -1);
    }

    EnvironmentValues.init()();
    swift_getAtKeyPath(v7, v13);
    swift_release(v13);
    return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  }
}

uint64_t sub_100047AC8@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  int v16;
  uint64_t (*v17)(uint64_t);
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;

  v35 = a1;
  v32 = type metadata accessor for SingleClimateGaugeViewAccessoryCircular(0);
  __chkstk_darwin(v32);
  v31 = (uint64_t)&v31 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v34 = sub_100003704(&qword_100082C90);
  __chkstk_darwin(v34);
  v33 = (uint64_t)&v31 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_100003704(&qword_100082C98);
  __chkstk_darwin(v4);
  v6 = (char *)&v31 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v36 = sub_100003704(&qword_100082CA0);
  __chkstk_darwin(v36);
  v8 = (char *)&v31 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for SingleClimateGaugeViewSystemSmall(0);
  __chkstk_darwin(v9);
  v11 = (char *)&v31 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for WidgetFamily(0);
  v13 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v15 = (char *)&v31 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for SingleClimateGaugeView(0);
  sub_100047888((uint64_t)v15);
  v16 = (*(uint64_t (**)(char *, uint64_t))(v13 + 88))(v15, v12);
  if (v16 == enum case for WidgetFamily.systemSmall(_:))
  {
    sub_1000308F0(v1, (uint64_t)v11, type metadata accessor for SingleGaugeEntry);
    v17 = type metadata accessor for SingleClimateGaugeViewSystemSmall;
    sub_1000308F0((uint64_t)v11, (uint64_t)v6, type metadata accessor for SingleClimateGaugeViewSystemSmall);
    swift_storeEnumTagMultiPayload(v6, v4, 0);
    v18 = sub_100015884(&qword_100082CB0, type metadata accessor for SingleClimateGaugeViewSystemSmall, (uint64_t)&unk_100063C74);
    v19 = sub_100015884(&qword_100082CB8, type metadata accessor for SingleClimateGaugeViewAccessoryCircular, (uint64_t)&unk_100063C24);
    _ConditionalContent<>.init(storage:)(v6, v9, v32, v18, v19);
    v20 = v33;
    sub_100047FE0((uint64_t)v8, v33, &qword_100082CA0);
    swift_storeEnumTagMultiPayload(v20, v34, 0);
    v21 = sub_100047F44();
    _ConditionalContent<>.init(storage:)(v20, v36, &type metadata for EmptyView, v21, &protocol witness table for EmptyView);
    sub_100033268((uint64_t)v8, &qword_100082CA0);
    v22 = (uint64_t)v11;
    return sub_100015784(v22, v17);
  }
  v24 = v33;
  v23 = v34;
  if (v16 == enum case for WidgetFamily.accessoryCircular(_:))
  {
    v25 = v31;
    sub_1000308F0(v1, v31, type metadata accessor for SingleGaugeEntry);
    v17 = type metadata accessor for SingleClimateGaugeViewAccessoryCircular;
    sub_1000308F0(v25, (uint64_t)v6, type metadata accessor for SingleClimateGaugeViewAccessoryCircular);
    swift_storeEnumTagMultiPayload(v6, v4, 1);
    v26 = sub_100015884(&qword_100082CB0, type metadata accessor for SingleClimateGaugeViewSystemSmall, (uint64_t)&unk_100063C74);
    v27 = sub_100015884(&qword_100082CB8, type metadata accessor for SingleClimateGaugeViewAccessoryCircular, (uint64_t)&unk_100063C24);
    _ConditionalContent<>.init(storage:)(v6, v9, v32, v26, v27);
    sub_100047FE0((uint64_t)v8, v24, &qword_100082CA0);
    swift_storeEnumTagMultiPayload(v24, v23, 0);
    v28 = sub_100047F44();
    _ConditionalContent<>.init(storage:)(v24, v36, &type metadata for EmptyView, v28, &protocol witness table for EmptyView);
    sub_100033268((uint64_t)v8, &qword_100082CA0);
    v22 = v25;
    return sub_100015784(v22, v17);
  }
  swift_storeEnumTagMultiPayload(v33, v34, 1);
  v30 = sub_100047F44();
  _ConditionalContent<>.init(storage:)(v24, v36, &type metadata for EmptyView, v30, &protocol witness table for EmptyView);
  return (*(uint64_t (**)(char *, uint64_t))(v13 + 8))(v15, v12);
}

uint64_t type metadata accessor for SingleClimateGaugeViewAccessoryCircular(uint64_t a1)
{
  return sub_100030820(a1, qword_100082D18, (uint64_t)&nominal type descriptor for SingleClimateGaugeViewAccessoryCircular);
}

uint64_t type metadata accessor for SingleClimateGaugeViewSystemSmall(uint64_t a1)
{
  return sub_100030820(a1, qword_100082DA8, (uint64_t)&nominal type descriptor for SingleClimateGaugeViewSystemSmall);
}

unint64_t sub_100047F44()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100082CA8;
  if (!qword_100082CA8)
  {
    v1 = sub_100003744(&qword_100082CA0);
    sub_100015884(&qword_100082CB0, type metadata accessor for SingleClimateGaugeViewSystemSmall, (uint64_t)&unk_100063C74);
    sub_100015884(&qword_100082CB8, type metadata accessor for SingleClimateGaugeViewAccessoryCircular, (uint64_t)&unk_100063C24);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100082CA8);
  }
  return result;
}

uint64_t sub_100047FE0(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;

  v5 = sub_100003704(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_100048024@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  __int128 *v15;
  __int128 v16;
  __int128 v17;
  double v18;
  double v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t result;
  double v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t OpaqueTypeConformance2;
  uint64_t v40;
  uint64_t v41;
  double v42;
  double v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _OWORD *v48;
  __int128 v49;
  _QWORD v50[4];
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  double *v55;
  uint64_t v56;
  char *v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  double v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  char v74;

  v54 = a1;
  v64 = type metadata accessor for AccessoryCircularGaugeStyle(0);
  v60 = *(_QWORD *)(v64 - 8);
  __chkstk_darwin(v64);
  v57 = (char *)&v51 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v59 = sub_100003704(&qword_100082DF0);
  v56 = *(_QWORD *)(v59 - 8);
  __chkstk_darwin(v59);
  v4 = (char *)&v51 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v62 = sub_100003704(&qword_100082DF8);
  v61 = *(_QWORD *)(v62 - 8);
  __chkstk_darwin(v62);
  v58 = (char *)&v51 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_100003704(&qword_100082E00);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v51 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v63 = sub_100003704(&qword_100082E08);
  __chkstk_darwin(v63);
  v65 = (char *)&v51 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_100003704(&qword_1000824F8);
  __chkstk_darwin(v11);
  v13 = (char *)&v51 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for SingleGaugeEntry(0);
  v15 = (__int128 *)(v1 + *(int *)(v14 + 20));
  v16 = v15[3];
  v72 = v15[2];
  v73 = v16;
  v74 = *((_BYTE *)v15 + 64);
  v17 = v15[1];
  v70 = *v15;
  v71 = v17;
  v55 = (double *)(v1 + *(int *)(v14 + 28));
  v18 = v55[1] * 0.2;
  v19 = static Font.Weight.medium.getter();
  v20 = enum case for Font.Design.default(_:);
  v21 = type metadata accessor for Font.Design(0);
  v22 = *(_QWORD *)(v21 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v22 + 104))(v13, v20, v21);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v22 + 56))(v13, 0, 1, v21);
  v23 = static Font.system(size:weight:design:)(*(_QWORD *)&v19, 0, v13, v18);
  result = sub_100033268((uint64_t)v13, &qword_1000824F8);
  v25 = *(double *)&v71;
  if (BYTE8(v71))
    v25 = -1.0;
  v66 = v25;
  if (*(double *)&v70 > *((double *)&v70 + 1))
  {
    __break(1u);
  }
  else
  {
    v26 = v9;
    v67 = v70;
    v27 = __chkstk_darwin(result);
    __chkstk_darwin(v27);
    v28 = sub_100003704(&qword_100082E10);
    v53 = v23;
    v29 = sub_100003704(&qword_100082E18);
    v30 = sub_10004908C();
    v52 = v6;
    v31 = v30;
    v50[2] = sub_100049110(&qword_100082E28, &qword_100082E18, (void (*)(void))sub_100049178);
    v50[3] = sub_100018A14();
    v50[0] = &type metadata for Double;
    v50[1] = v31;
    v32 = ((uint64_t (*)(double *, __int128 *, uint64_t (*)@<X0>(uint64_t *@<X8>), _QWORD *, double (*)@<D0>(uint64_t@<X8>), _QWORD *, uint64_t, uint64_t))Gauge.init<A>(value:in:label:currentValueLabel:))(&v66, &v67, sub_10004905C, v50, sub_100049074, v50, v28, v29);
    v33 = v57;
    AccessoryCircularGaugeStyle.init()(v32);
    v34 = sub_100033ED0(&qword_100082E40, &qword_100082DF0, (uint64_t)&protocol conformance descriptor for Gauge<A, B, C, D>);
    v35 = sub_100015884(&qword_100082E48, (uint64_t (*)(uint64_t))&type metadata accessor for AccessoryCircularGaugeStyle, (uint64_t)&protocol conformance descriptor for AccessoryCircularGaugeStyle);
    v36 = v58;
    v37 = v59;
    v38 = v64;
    View.gaugeStyle<A>(_:)(v33, v59, v64, v34, v35);
    (*(void (**)(char *, uint64_t))(v60 + 8))(v33, v38);
    (*(void (**)(char *, uint64_t))(v56 + 8))(v4, v37);
    *(_QWORD *)&v67 = v37;
    *((_QWORD *)&v67 + 1) = v38;
    *(_QWORD *)&v68 = v34;
    *((_QWORD *)&v68 + 1) = v35;
    OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v67, &opaque type descriptor for <<opaque return type of View.gaugeStyle<A>(_:)>>, 1);
    v40 = v62;
    View.allowsGaugeResizing(_:)(1, v62, OpaqueTypeConformance2);
    v41 = (*(uint64_t (**)(char *, uint64_t))(v61 + 8))(v36, v40);
    v42 = *v55 * 0.75;
    v43 = v55[1] * 0.75;
    v44 = static Alignment.center.getter(v41);
    _FrameLayout.init(width:height:alignment:)(&v67, *(_QWORD *)&v42, 0, *(_QWORD *)&v43, 0, v44, v45);
    v46 = (uint64_t)v65;
    v47 = v52;
    (*(void (**)(char *, char *, uint64_t))(v7 + 16))(v65, v26, v52);
    swift_release(v53);
    v48 = (_OWORD *)(v46 + *(int *)(v63 + 36));
    v49 = v68;
    *v48 = v67;
    v48[1] = v49;
    v48[2] = v69;
    (*(void (**)(char *, uint64_t))(v7 + 8))(v26, v47);
    return sub_1000491D4(v46, v54, &qword_100082E08);
  }
  return result;
}

uint64_t sub_1000485B0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  __int128 *v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  double v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t result;
  double v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  char *v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t OpaqueTypeConformance2;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _OWORD *v49;
  __int128 v50;
  _QWORD v51[4];
  uint64_t v52;
  uint64_t v53;
  uint64_t *v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  char *v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  double v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  char v75;

  v3 = type metadata accessor for AccessoryCircularGaugeStyle(0);
  v62 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v59 = (char *)&v52 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v61 = sub_100003704(&qword_100082DF0);
  v58 = *(_QWORD *)(v61 - 8);
  __chkstk_darwin(v61);
  v57 = (char *)&v52 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v65 = sub_100003704(&qword_100082DF8);
  v63 = *(_QWORD *)(v65 - 8);
  __chkstk_darwin(v65);
  v60 = (char *)&v52 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_100003704(&qword_100082E00);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)&v52 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v64 = sub_100003704(&qword_100082E08);
  __chkstk_darwin(v64);
  v66 = (char *)&v52 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_100003704(&qword_1000824F8);
  __chkstk_darwin(v12);
  v14 = (char *)&v52 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for SingleGaugeEntry(0);
  v16 = (__int128 *)(v1 + *(int *)(v15 + 20));
  v17 = v16[3];
  v73 = v16[2];
  v74 = v17;
  v75 = *((_BYTE *)v16 + 64);
  v18 = v16[1];
  v71 = *v16;
  v72 = v18;
  v19 = v1 + *(int *)(v15 + 28);
  v20 = *(double *)(v19 + 8) * 0.27;
  v21 = type metadata accessor for Font.Design(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 56))(v14, 1, 1, v21);
  v22 = static Font.system(size:weight:design:)(0, 1, v14, v20);
  result = sub_100033268((uint64_t)v14, &qword_1000824F8);
  v24 = *(double *)&v72;
  if (BYTE8(v72))
    v24 = -1.0;
  v67 = v24;
  if (*(double *)&v71 > *((double *)&v71 + 1))
  {
    __break(1u);
  }
  else
  {
    v56 = a1;
    v52 = (uint64_t)&v52;
    v68 = v71;
    v25 = __chkstk_darwin(result);
    v54 = (uint64_t *)v19;
    v26 = v22;
    __chkstk_darwin(v25);
    v27 = sub_100003704(&qword_100082E10);
    v55 = v7;
    v28 = sub_100003704(&qword_100082E18);
    v53 = v8;
    v29 = v28;
    v30 = v3;
    v31 = sub_10004908C();
    v51[2] = sub_100049110(&qword_100082E28, &qword_100082E18, (void (*)(void))sub_100049178);
    v51[3] = sub_100018A14();
    v51[0] = &type metadata for Double;
    v51[1] = v31;
    v32 = v57;
    v33 = ((uint64_t (*)(double *, __int128 *, uint64_t (*)@<X0>(uint64_t *@<X8>), _QWORD *, double (*)@<D0>(uint64_t@<X8>), _QWORD *, uint64_t, uint64_t))Gauge.init<A>(value:in:label:currentValueLabel:))(&v67, &v68, sub_1000493D4, v51, sub_1000493D8, v51, v27, v29);
    v34 = v59;
    AccessoryCircularGaugeStyle.init()(v33);
    v35 = sub_100033ED0(&qword_100082E40, &qword_100082DF0, (uint64_t)&protocol conformance descriptor for Gauge<A, B, C, D>);
    v36 = sub_100015884(&qword_100082E48, (uint64_t (*)(uint64_t))&type metadata accessor for AccessoryCircularGaugeStyle, (uint64_t)&protocol conformance descriptor for AccessoryCircularGaugeStyle);
    v37 = v60;
    v38 = v61;
    View.gaugeStyle<A>(_:)(v34, v61, v30, v35, v36);
    (*(void (**)(char *, uint64_t))(v62 + 8))(v34, v30);
    (*(void (**)(char *, uint64_t))(v58 + 8))(v32, v38);
    *(_QWORD *)&v68 = v38;
    *((_QWORD *)&v68 + 1) = v30;
    *(_QWORD *)&v69 = v35;
    *((_QWORD *)&v69 + 1) = v36;
    OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v68, &opaque type descriptor for <<opaque return type of View.gaugeStyle<A>(_:)>>, 1);
    v40 = v65;
    View.allowsGaugeResizing(_:)(1, v65, OpaqueTypeConformance2);
    v41 = (*(uint64_t (**)(char *, uint64_t))(v63 + 8))(v37, v40);
    v42 = *v54;
    v43 = v54[1];
    v44 = static Alignment.center.getter(v41);
    _FrameLayout.init(width:height:alignment:)(&v68, v42, 0, v43, 0, v44, v45);
    v46 = v53;
    v47 = (uint64_t)v66;
    v48 = v55;
    (*(void (**)(char *, char *, uint64_t))(v53 + 16))(v66, v10, v55);
    swift_release(v26);
    v49 = (_OWORD *)(v47 + *(int *)(v64 + 36));
    v50 = v69;
    *v49 = v68;
    v49[1] = v50;
    v49[2] = v70;
    (*(void (**)(char *, uint64_t))(v46 + 8))(v10, v48);
    return sub_1000491D4(v47, v56, &qword_100082E08);
  }
  return result;
}

uint64_t sub_100048B14@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t KeyPath;

  v5 = *(_QWORD *)(a1 + 48);
  v6 = *(_QWORD *)(a1 + 56);
  swift_bridgeObjectRetain(v6);
  v7 = Image.init(systemName:)(v5, v6);
  KeyPath = swift_getKeyPath(&unk_100063CC8);
  *a3 = v7;
  a3[1] = KeyPath;
  a3[2] = a2;
  return swift_retain(a2);
}

double sub_100048B70@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char v63;
  char v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  char v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  double result;
  __int128 v75;
  unsigned __int8 v76;
  char v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  unsigned int v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  __int128 v85;
  __int128 v86;
  __int16 v87;
  __int128 v88;
  __int128 v89;
  unsigned __int8 v90;
  char v91;
  _BYTE v92[16];
  _BYTE v93[24];

  sub_1000491D4(a1 + 16, (uint64_t)v92, &qword_100082E50);
  sub_1000491D4((uint64_t)v92, (uint64_t)v93, &qword_100082E50);
  if ((v93[8] & 1) != 0)
  {
    *(_QWORD *)&v88 = 0x9380E29380E2;
    *((_QWORD *)&v88 + 1) = 0xA600000000000000;
    v6 = sub_1000037D4();
    v7 = Text.init<A>(_:)(&v88, &type metadata for String, v6);
    v9 = v8;
    v11 = v10;
    v13 = v12 & 1;
    v14 = Text.font(_:)(a2, v7, v8, v13, v10);
    v16 = v15;
    v18 = v17;
    v20 = v19 & 1;
    sub_1000330B0(v7, v9, v13);
    swift_bridgeObjectRelease(v11);
    *(_QWORD *)&v85 = v14;
    *((_QWORD *)&v85 + 1) = v16;
    *(_QWORD *)&v86 = v20;
    *((_QWORD *)&v86 + 1) = v18;
    v87 = 256;
  }
  else
  {
    v21 = *(_BYTE *)(a1 + 64);
    v22 = *(_QWORD *)(a1 + 32);
    v23 = *(_QWORD *)(a1 + 40);
    *(_QWORD *)&v88 = v22;
    *((_QWORD *)&v88 + 1) = v23;
    if ((v21 & 1) != 0)
    {
      v39 = sub_1000037D4();
      swift_bridgeObjectRetain(v23);
      v40 = Text.init<A>(_:)(&v88, &type metadata for String, v39);
      v42 = v41;
      v44 = v43;
      v46 = v45 & 1;
      v47 = Text.font(_:)(a2, v40, v41, v46, v43);
      v82 = v48;
      v83 = v47;
      v84 = v49;
      v81 = v50 & 1;
      sub_1000330B0(v40, v42, v46);
      swift_bridgeObjectRelease(v44);
      v51 = LocalizedStringKey.init(stringLiteral:)(37, 0xE100000000000000);
      v52 = Text.init(_:tableName:bundle:comment:)(v51);
      v54 = v53;
      v56 = v55;
      v58 = v57 & 1;
      v59 = Font.smallCaps()(a2);
      v60 = Text.font(_:)(v59, v52, v54, v58, v56);
      v62 = v61;
      v64 = v63;
      v66 = v65;
      swift_release(v59);
      sub_1000330B0(v52, v54, v58);
      swift_bridgeObjectRelease(v56);
      v67 = static Text.+ infix(_:_:)(v83, v82, v81, v84, v60, v62, v64 & 1, v66, 0, 256);
      v79 = v68;
      v80 = v67;
      v78 = v69;
      v71 = v70 & 1;
      sub_1000330B0(v60, v62, v64 & 1);
      swift_bridgeObjectRelease(v66);
      sub_1000330B0(v83, v82, v81);
      swift_bridgeObjectRelease(v84);
      *(_QWORD *)&v85 = v80;
      *((_QWORD *)&v85 + 1) = v79;
      *(_QWORD *)&v86 = v71;
      *((_QWORD *)&v86 + 1) = v78;
      LOBYTE(v87) = 0;
    }
    else
    {
      v24 = sub_1000037D4();
      swift_bridgeObjectRetain(v23);
      v25 = Text.init<A>(_:)(&v88, &type metadata for String, v24);
      v27 = v26;
      v29 = v28;
      v31 = v30 & 1;
      v32 = Text.font(_:)(a2, v25, v26, v31, v28);
      v34 = v33;
      v36 = v35;
      v38 = v37 & 1;
      sub_1000330B0(v25, v27, v31);
      swift_bridgeObjectRelease(v29);
      *(_QWORD *)&v85 = v32;
      *((_QWORD *)&v85 + 1) = v34;
      *(_QWORD *)&v86 = v38;
      *((_QWORD *)&v86 + 1) = v36;
      LOBYTE(v87) = 1;
    }
    _ConditionalContent<>.init(storage:)(&v85, &type metadata for Text, &type metadata for Text, &protocol witness table for Text, &protocol witness table for Text);
    v85 = v88;
    v86 = v89;
    v87 = v90;
  }
  v72 = sub_100003704(&qword_100082E38);
  v73 = sub_100049178();
  _ConditionalContent<>.init(storage:)(&v85, v72, &type metadata for Text, v73, &protocol witness table for Text);
  result = *(double *)&v88;
  v75 = v89;
  v76 = v90;
  v77 = v91;
  *(_OWORD *)a3 = v88;
  *(_OWORD *)(a3 + 16) = v75;
  *(_BYTE *)(a3 + 32) = v76;
  *(_BYTE *)(a3 + 33) = v77;
  return result;
}

uint64_t sub_100048F48(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100048F54);
}

uint64_t sub_100048F58(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100048F64);
}

uint64_t sub_100048F6C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100048F78);
}

uint64_t sub_100048F7C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for SingleGaugeEntry(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(a1, a2, v4);
}

uint64_t sub_100048FB8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100048FC4);
}

uint64_t sub_100048FC8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for SingleGaugeEntry(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(a1, a2, a2, v4);
}

uint64_t sub_100049008()
{
  return sub_100049110(&qword_100082DE0, &qword_100082DE8, (void (*)(void))sub_100047F44);
}

uint64_t sub_10004903C(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_10006C1E4, 1);
}

uint64_t sub_10004904C(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_10006C1BC, 1);
}

uint64_t sub_10004905C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;

  return sub_100048B14(*(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), a1);
}

double sub_100049074@<D0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_100048B70(*(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), a1);
}

unint64_t sub_10004908C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100082E20;
  if (!qword_100082E20)
  {
    v1 = sub_100003744(&qword_100082E10);
    sub_100033ED0(&qword_100082588, &qword_100082590, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100082E20);
  }
  return result;
}

uint64_t sub_100049110(unint64_t *a1, uint64_t *a2, void (*a3)(void))
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    v6 = sub_100003744(a2);
    a3();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v6);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_100049178()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100082E30;
  if (!qword_100082E30)
  {
    v1 = sub_100003744(&qword_100082E38);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100082E30);
  }
  return result;
}

uint64_t sub_1000491D4(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;

  v5 = sub_100003704(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_100049218@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = EnvironmentValues.font.getter();
  *a1 = result;
  return result;
}

uint64_t sub_100049240@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = EnvironmentValues.font.getter();
  *a1 = result;
  return result;
}

uint64_t sub_100049268(_QWORD *a1)
{
  uint64_t v1;

  v1 = swift_retain(*a1);
  return EnvironmentValues.font.setter(v1);
}

uint64_t sub_100049290(_QWORD *a1)
{
  uint64_t v1;

  v1 = swift_retain(*a1);
  return EnvironmentValues.font.setter(v1);
}

unint64_t sub_1000492BC()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  uint64_t OpaqueTypeConformance2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  result = qword_100082E58;
  if (!qword_100082E58)
  {
    v1 = sub_100003744(&qword_100082E08);
    v2 = sub_100003744(&qword_100082DF8);
    v4 = sub_100003744(&qword_100082DF0);
    v5 = type metadata accessor for AccessoryCircularGaugeStyle(255);
    v6 = sub_100033ED0(&qword_100082E40, &qword_100082DF0, (uint64_t)&protocol conformance descriptor for Gauge<A, B, C, D>);
    v7 = sub_100015884(&qword_100082E48, (uint64_t (*)(uint64_t))&type metadata accessor for AccessoryCircularGaugeStyle, (uint64_t)&protocol conformance descriptor for AccessoryCircularGaugeStyle);
    OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v4, &opaque type descriptor for <<opaque return type of View.gaugeStyle<A>(_:)>>, 1);
    v4 = v2;
    v5 = OpaqueTypeConformance2;
    swift_getOpaqueTypeConformance2(&v4, &opaque type descriptor for <<opaque return type of View.allowsGaugeResizing(_:)>>, 1);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100082E58);
  }
  return result;
}

uint64_t *sub_1000493DC(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  int *v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v28 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v28 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v28);
  }
  else
  {
    v7 = type metadata accessor for Date(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = (int *)type metadata accessor for SecurityAccessoryEntry(0);
    v9 = v8[5];
    v10 = (char *)a1 + v9;
    v11 = (char *)a2 + v9;
    v13 = *(uint64_t *)((char *)a2 + v9);
    v12 = *(uint64_t *)((char *)a2 + v9 + 8);
    *(_QWORD *)v10 = v13;
    *((_QWORD *)v10 + 1) = v12;
    v14 = *((_QWORD *)v11 + 3);
    *((_QWORD *)v10 + 2) = *((_QWORD *)v11 + 2);
    *((_QWORD *)v10 + 3) = v14;
    v15 = *((_QWORD *)v11 + 5);
    *((_QWORD *)v10 + 4) = *((_QWORD *)v11 + 4);
    *((_QWORD *)v10 + 5) = v15;
    v10[48] = v11[48];
    v16 = v8[6];
    v17 = (uint64_t *)((char *)a1 + v16);
    v18 = (uint64_t *)((char *)a2 + v16);
    v19 = v18[1];
    *v17 = *v18;
    v17[1] = v19;
    *(_OWORD *)((char *)a1 + v8[7]) = *(_OWORD *)((char *)a2 + v8[7]);
    v20 = *(int *)(a3 + 20);
    v21 = (uint64_t *)((char *)a1 + v20);
    v22 = (uint64_t *)((char *)a2 + v20);
    swift_bridgeObjectRetain(v12);
    swift_bridgeObjectRetain(v14);
    swift_bridgeObjectRetain(v15);
    swift_bridgeObjectRetain(v19);
    v23 = sub_100003704(&qword_100081DA0);
    if (swift_getEnumCaseMultiPayload(v22, v23) == 1)
    {
      v24 = type metadata accessor for WidgetFamily(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v24 - 8) + 16))(v21, v22, v24);
      v25 = v21;
      v26 = v23;
      v27 = 1;
    }
    else
    {
      v29 = *v22;
      *v21 = *v22;
      swift_retain(v29);
      v25 = v21;
      v26 = v23;
      v27 = 0;
    }
    swift_storeEnumTagMultiPayload(v25, v26, v27);
  }
  return a1;
}

uint64_t sub_100049550(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;

  v4 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  v5 = type metadata accessor for SecurityAccessoryEntry(0);
  v6 = (_QWORD *)(a1 + *(int *)(v5 + 20));
  swift_bridgeObjectRelease(v6[1]);
  swift_bridgeObjectRelease(v6[3]);
  swift_bridgeObjectRelease(v6[5]);
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + *(int *)(v5 + 24) + 8));
  v7 = (_QWORD *)(a1 + *(int *)(a2 + 20));
  v8 = sub_100003704(&qword_100081DA0);
  if (swift_getEnumCaseMultiPayload(v7, v8) != 1)
    return swift_release(*v7);
  v9 = type metadata accessor for WidgetFamily(0);
  return (*(uint64_t (**)(_QWORD *, uint64_t))(*(_QWORD *)(v9 - 8) + 8))(v7, v9);
}

uint64_t sub_100049624(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  int *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v6 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = (int *)type metadata accessor for SecurityAccessoryEntry(0);
  v8 = v7[5];
  v9 = a1 + v8;
  v10 = a2 + v8;
  v12 = *(_QWORD *)(a2 + v8);
  v11 = *(_QWORD *)(a2 + v8 + 8);
  *(_QWORD *)v9 = v12;
  *(_QWORD *)(v9 + 8) = v11;
  v13 = *(_QWORD *)(v10 + 24);
  *(_QWORD *)(v9 + 16) = *(_QWORD *)(v10 + 16);
  *(_QWORD *)(v9 + 24) = v13;
  v14 = *(_QWORD *)(v10 + 40);
  *(_QWORD *)(v9 + 32) = *(_QWORD *)(v10 + 32);
  *(_QWORD *)(v9 + 40) = v14;
  *(_BYTE *)(v9 + 48) = *(_BYTE *)(v10 + 48);
  v15 = v7[6];
  v16 = (_QWORD *)(a1 + v15);
  v17 = (_QWORD *)(a2 + v15);
  v18 = v17[1];
  *v16 = *v17;
  v16[1] = v18;
  *(_OWORD *)(a1 + v7[7]) = *(_OWORD *)(a2 + v7[7]);
  v19 = *(int *)(a3 + 20);
  v20 = (uint64_t *)(a1 + v19);
  v21 = (uint64_t *)(a2 + v19);
  swift_bridgeObjectRetain(v11);
  swift_bridgeObjectRetain(v13);
  swift_bridgeObjectRetain(v14);
  swift_bridgeObjectRetain(v18);
  v22 = sub_100003704(&qword_100081DA0);
  if (swift_getEnumCaseMultiPayload(v21, v22) == 1)
  {
    v23 = type metadata accessor for WidgetFamily(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v23 - 8) + 16))(v20, v21, v23);
    v24 = 1;
  }
  else
  {
    v25 = *v21;
    *v20 = *v21;
    swift_retain(v25);
    v24 = 0;
  }
  swift_storeEnumTagMultiPayload(v20, v22, v24);
  return a1;
}

uint64_t sub_100049764(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  int *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v6 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = (int *)type metadata accessor for SecurityAccessoryEntry(0);
  v8 = v7[5];
  v9 = a1 + v8;
  v10 = a2 + v8;
  *(_QWORD *)v9 = *(_QWORD *)(a2 + v8);
  v11 = *(_QWORD *)(a2 + v8 + 8);
  v12 = *(_QWORD *)(a1 + v8 + 8);
  *(_QWORD *)(v9 + 8) = v11;
  swift_bridgeObjectRetain(v11);
  swift_bridgeObjectRelease(v12);
  *(_QWORD *)(v9 + 16) = *(_QWORD *)(v10 + 16);
  v13 = *(_QWORD *)(v10 + 24);
  v14 = *(_QWORD *)(v9 + 24);
  *(_QWORD *)(v9 + 24) = v13;
  swift_bridgeObjectRetain(v13);
  swift_bridgeObjectRelease(v14);
  *(_QWORD *)(v9 + 32) = *(_QWORD *)(v10 + 32);
  v15 = *(_QWORD *)(v10 + 40);
  v16 = *(_QWORD *)(v9 + 40);
  *(_QWORD *)(v9 + 40) = v15;
  swift_bridgeObjectRetain(v15);
  swift_bridgeObjectRelease(v16);
  *(_BYTE *)(v9 + 48) = *(_BYTE *)(v10 + 48);
  v17 = v7[6];
  v18 = (_QWORD *)(a1 + v17);
  v19 = (_QWORD *)(a2 + v17);
  *v18 = *v19;
  v20 = v19[1];
  v21 = v18[1];
  v18[1] = v20;
  swift_bridgeObjectRetain(v20);
  swift_bridgeObjectRelease(v21);
  v22 = v7[7];
  v23 = (_QWORD *)(a1 + v22);
  v24 = (_QWORD *)(a2 + v22);
  *v23 = *v24;
  v23[1] = v24[1];
  if (a1 != a2)
  {
    v25 = *(int *)(a3 + 20);
    v26 = (uint64_t *)(a1 + v25);
    v27 = (uint64_t *)(a2 + v25);
    sub_100033268(a1 + v25, &qword_100081DA0);
    v28 = sub_100003704(&qword_100081DA0);
    if (swift_getEnumCaseMultiPayload(v27, v28) == 1)
    {
      v29 = type metadata accessor for WidgetFamily(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v29 - 8) + 16))(v26, v27, v29);
      v30 = 1;
    }
    else
    {
      v31 = *v27;
      *v26 = *v27;
      swift_retain(v31);
      v30 = 0;
    }
    swift_storeEnumTagMultiPayload(v26, v28, v30);
  }
  return a1;
}

uint64_t sub_100049918(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  int *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  void *v13;
  const void *v14;
  uint64_t v15;
  uint64_t v16;

  v6 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = (int *)type metadata accessor for SecurityAccessoryEntry(0);
  v8 = v7[5];
  v9 = a1 + v8;
  v10 = a2 + v8;
  v11 = *(_OWORD *)(v10 + 16);
  *(_OWORD *)v9 = *(_OWORD *)v10;
  *(_OWORD *)(v9 + 16) = v11;
  *(_OWORD *)(v9 + 32) = *(_OWORD *)(v10 + 32);
  *(_BYTE *)(v9 + 48) = *(_BYTE *)(v10 + 48);
  *(_OWORD *)(a1 + v7[6]) = *(_OWORD *)(a2 + v7[6]);
  *(_OWORD *)(a1 + v7[7]) = *(_OWORD *)(a2 + v7[7]);
  v12 = *(int *)(a3 + 20);
  v13 = (void *)(a1 + v12);
  v14 = (const void *)(a2 + v12);
  v15 = sub_100003704(&qword_100081DA0);
  if (swift_getEnumCaseMultiPayload(v14, v15) == 1)
  {
    v16 = type metadata accessor for WidgetFamily(0);
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v16 - 8) + 32))(v13, v14, v16);
    swift_storeEnumTagMultiPayload(v13, v15, 1);
  }
  else
  {
    memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
  }
  return a1;
}

uint64_t sub_100049A24(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  int *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  const void *v25;
  uint64_t v26;
  uint64_t v27;

  v6 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = (int *)type metadata accessor for SecurityAccessoryEntry(0);
  v8 = v7[5];
  v9 = a1 + v8;
  v10 = a2 + v8;
  v11 = *(_QWORD *)(a2 + v8 + 8);
  v12 = *(_QWORD *)(a1 + v8 + 8);
  *(_QWORD *)v9 = *(_QWORD *)(a2 + v8);
  *(_QWORD *)(v9 + 8) = v11;
  swift_bridgeObjectRelease(v12);
  v13 = *(_QWORD *)(v10 + 24);
  v14 = *(_QWORD *)(v9 + 24);
  *(_QWORD *)(v9 + 16) = *(_QWORD *)(v10 + 16);
  *(_QWORD *)(v9 + 24) = v13;
  swift_bridgeObjectRelease(v14);
  v15 = *(_QWORD *)(v10 + 40);
  v16 = *(_QWORD *)(v9 + 40);
  *(_QWORD *)(v9 + 32) = *(_QWORD *)(v10 + 32);
  *(_QWORD *)(v9 + 40) = v15;
  swift_bridgeObjectRelease(v16);
  *(_BYTE *)(v9 + 48) = *(_BYTE *)(v10 + 48);
  v17 = v7[6];
  v18 = (_QWORD *)(a1 + v17);
  v19 = (uint64_t *)(a2 + v17);
  v21 = *v19;
  v20 = v19[1];
  v22 = v18[1];
  *v18 = v21;
  v18[1] = v20;
  swift_bridgeObjectRelease(v22);
  *(_OWORD *)(a1 + v7[7]) = *(_OWORD *)(a2 + v7[7]);
  if (a1 != a2)
  {
    v23 = *(int *)(a3 + 20);
    v24 = (void *)(a1 + v23);
    v25 = (const void *)(a2 + v23);
    sub_100033268(a1 + v23, &qword_100081DA0);
    v26 = sub_100003704(&qword_100081DA0);
    if (swift_getEnumCaseMultiPayload(v25, v26) == 1)
    {
      v27 = type metadata accessor for WidgetFamily(0);
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v27 - 8) + 32))(v24, v25, v27);
      swift_storeEnumTagMultiPayload(v24, v26, 1);
    }
    else
    {
      memcpy(v24, v25, *(_QWORD *)(*(_QWORD *)(v26 - 8) + 64));
    }
  }
  return a1;
}

uint64_t sub_100049B84(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100049B90);
}

uint64_t sub_100049B90(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;

  v6 = type metadata accessor for SecurityAccessoryEntry(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
  }
  else
  {
    v8 = sub_100003704(&qword_1000822D0);
    v10 = a1 + *(int *)(a3 + 20);
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48);
  }
  return v9(v10, a2, v8);
}

uint64_t sub_100049C08(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100049C14);
}

uint64_t sub_100049C14(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;

  v8 = type metadata accessor for SecurityAccessoryEntry(0);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    v10 = sub_100003704(&qword_1000822D0);
    v12 = a1 + *(int *)(a4 + 20);
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56);
  }
  return v11(v12, a2, a2, v10);
}

uint64_t type metadata accessor for SecurityAccessoryView(uint64_t a1)
{
  return sub_100030820(a1, qword_100082EB8, (uint64_t)&nominal type descriptor for SecurityAccessoryView);
}

void sub_100049CA8(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v6[2];

  v2 = type metadata accessor for SecurityAccessoryEntry(319);
  if (v3 <= 0x3F)
  {
    v6[0] = *(_QWORD *)(v2 - 8) + 64;
    sub_100030350(319);
    if (v5 <= 0x3F)
    {
      v6[1] = *(_QWORD *)(v4 - 8) + 64;
      swift_initStructMetadata(a1, 256, 2, v6, a1 + 16);
    }
  }
}

uint64_t sub_100049D2C(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_10006C284, 1);
}

uint64_t sub_100049D3C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  int v16;
  uint64_t (*v17)(uint64_t);
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;

  v35 = a1;
  v32 = type metadata accessor for SecurityAccessoryViewAccessoryCircular(0);
  __chkstk_darwin(v32);
  v31 = (uint64_t)&v31 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v34 = sub_100003704(&qword_100082EF0);
  __chkstk_darwin(v34);
  v33 = (uint64_t)&v31 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_100003704(&qword_100082EF8);
  __chkstk_darwin(v4);
  v6 = (char *)&v31 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v36 = sub_100003704(&qword_100082F00);
  __chkstk_darwin(v36);
  v8 = (char *)&v31 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for SecurityAccessoryViewSystemSmall(0);
  __chkstk_darwin(v9);
  v11 = (char *)&v31 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for WidgetFamily(0);
  v13 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v15 = (char *)&v31 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for SecurityAccessoryView(0);
  sub_100047888((uint64_t)v15);
  v16 = (*(uint64_t (**)(char *, uint64_t))(v13 + 88))(v15, v12);
  if (v16 == enum case for WidgetFamily.systemSmall(_:))
  {
    sub_1000308F0(v1, (uint64_t)v11, type metadata accessor for SecurityAccessoryEntry);
    v17 = type metadata accessor for SecurityAccessoryViewSystemSmall;
    sub_1000308F0((uint64_t)v11, (uint64_t)v6, type metadata accessor for SecurityAccessoryViewSystemSmall);
    swift_storeEnumTagMultiPayload(v6, v4, 0);
    v18 = sub_100015884(&qword_100082F10, type metadata accessor for SecurityAccessoryViewSystemSmall, (uint64_t)&unk_100063E14);
    v19 = sub_100015884(&qword_100082F18, type metadata accessor for SecurityAccessoryViewAccessoryCircular, (uint64_t)&unk_100063DC4);
    _ConditionalContent<>.init(storage:)(v6, v9, v32, v18, v19);
    v20 = v33;
    sub_10004A244((uint64_t)v8, v33);
    swift_storeEnumTagMultiPayload(v20, v34, 0);
    v21 = sub_10004A1A8();
    _ConditionalContent<>.init(storage:)(v20, v36, &type metadata for EmptyView, v21, &protocol witness table for EmptyView);
    sub_100033268((uint64_t)v8, &qword_100082F00);
    v22 = (uint64_t)v11;
    return sub_100015784(v22, v17);
  }
  v24 = v33;
  v23 = v34;
  if (v16 == enum case for WidgetFamily.accessoryCircular(_:))
  {
    v25 = v31;
    sub_1000308F0(v1, v31, type metadata accessor for SecurityAccessoryEntry);
    v17 = type metadata accessor for SecurityAccessoryViewAccessoryCircular;
    sub_1000308F0(v25, (uint64_t)v6, type metadata accessor for SecurityAccessoryViewAccessoryCircular);
    swift_storeEnumTagMultiPayload(v6, v4, 1);
    v26 = sub_100015884(&qword_100082F10, type metadata accessor for SecurityAccessoryViewSystemSmall, (uint64_t)&unk_100063E14);
    v27 = sub_100015884(&qword_100082F18, type metadata accessor for SecurityAccessoryViewAccessoryCircular, (uint64_t)&unk_100063DC4);
    _ConditionalContent<>.init(storage:)(v6, v9, v32, v26, v27);
    sub_10004A244((uint64_t)v8, v24);
    swift_storeEnumTagMultiPayload(v24, v23, 0);
    v28 = sub_10004A1A8();
    _ConditionalContent<>.init(storage:)(v24, v36, &type metadata for EmptyView, v28, &protocol witness table for EmptyView);
    sub_100033268((uint64_t)v8, &qword_100082F00);
    v22 = v25;
    return sub_100015784(v22, v17);
  }
  swift_storeEnumTagMultiPayload(v33, v34, 1);
  v30 = sub_10004A1A8();
  _ConditionalContent<>.init(storage:)(v24, v36, &type metadata for EmptyView, v30, &protocol witness table for EmptyView);
  return (*(uint64_t (**)(char *, uint64_t))(v13 + 8))(v15, v12);
}

uint64_t type metadata accessor for SecurityAccessoryViewAccessoryCircular(uint64_t a1)
{
  return sub_100030820(a1, qword_100082F78, (uint64_t)&nominal type descriptor for SecurityAccessoryViewAccessoryCircular);
}

uint64_t type metadata accessor for SecurityAccessoryViewSystemSmall(uint64_t a1)
{
  return sub_100030820(a1, qword_100083008, (uint64_t)&nominal type descriptor for SecurityAccessoryViewSystemSmall);
}

unint64_t sub_10004A1A8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100082F08;
  if (!qword_100082F08)
  {
    v1 = sub_100003744(&qword_100082F00);
    sub_100015884(&qword_100082F10, type metadata accessor for SecurityAccessoryViewSystemSmall, (uint64_t)&unk_100063E14);
    sub_100015884(&qword_100082F18, type metadata accessor for SecurityAccessoryViewAccessoryCircular, (uint64_t)&unk_100063DC4);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100082F08);
  }
  return result;
}

uint64_t sub_10004A244(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100003704(&qword_100082F00);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10004A2A4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10004A2B0);
}

uint64_t sub_10004A2B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10004A2C0);
}

uint64_t *sub_10004A2C8(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  int v5;
  int *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;

  v4 = type metadata accessor for SecurityAccessoryEntry(0);
  v5 = *(_DWORD *)(*(_QWORD *)(v4 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v18 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v18 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v18);
  }
  else
  {
    v6 = (int *)v4;
    v7 = type metadata accessor for Date(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = v6[5];
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = *((_QWORD *)v10 + 1);
    *(_QWORD *)v9 = *(_QWORD *)v10;
    *((_QWORD *)v9 + 1) = v11;
    v12 = *((_QWORD *)v10 + 3);
    *((_QWORD *)v9 + 2) = *((_QWORD *)v10 + 2);
    *((_QWORD *)v9 + 3) = v12;
    v13 = *((_QWORD *)v10 + 5);
    *((_QWORD *)v9 + 4) = *((_QWORD *)v10 + 4);
    *((_QWORD *)v9 + 5) = v13;
    v9[48] = v10[48];
    v14 = v6[6];
    v15 = (uint64_t *)((char *)a1 + v14);
    v16 = (uint64_t *)((char *)a2 + v14);
    v17 = v16[1];
    *v15 = *v16;
    v15[1] = v17;
    *(_OWORD *)((char *)a1 + v6[7]) = *(_OWORD *)((char *)a2 + v6[7]);
    swift_bridgeObjectRetain(v11);
    swift_bridgeObjectRetain(v12);
    swift_bridgeObjectRetain(v13);
    swift_bridgeObjectRetain(v17);
  }
  return a1;
}

uint64_t sub_10004A3BC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  v2 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  v3 = type metadata accessor for SecurityAccessoryEntry(0);
  v4 = (_QWORD *)(a1 + *(int *)(v3 + 20));
  swift_bridgeObjectRelease(v4[1]);
  swift_bridgeObjectRelease(v4[3]);
  swift_bridgeObjectRelease(v4[5]);
  return swift_bridgeObjectRelease(*(_QWORD *)(a1 + *(int *)(v3 + 24) + 8));
}

uint64_t sub_10004A434(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;

  v4 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, a2, v4);
  v5 = (int *)type metadata accessor for SecurityAccessoryEntry(0);
  v6 = v5[5];
  v7 = a1 + v6;
  v8 = a2 + v6;
  v10 = *(_QWORD *)(a2 + v6);
  v9 = *(_QWORD *)(a2 + v6 + 8);
  *(_QWORD *)v7 = v10;
  *(_QWORD *)(v7 + 8) = v9;
  v11 = *(_QWORD *)(v8 + 24);
  *(_QWORD *)(v7 + 16) = *(_QWORD *)(v8 + 16);
  *(_QWORD *)(v7 + 24) = v11;
  v12 = *(_QWORD *)(v8 + 40);
  *(_QWORD *)(v7 + 32) = *(_QWORD *)(v8 + 32);
  *(_QWORD *)(v7 + 40) = v12;
  *(_BYTE *)(v7 + 48) = *(_BYTE *)(v8 + 48);
  v13 = v5[6];
  v14 = (_QWORD *)(a1 + v13);
  v15 = (_QWORD *)(a2 + v13);
  v16 = v15[1];
  *v14 = *v15;
  v14[1] = v16;
  *(_OWORD *)(a1 + v5[7]) = *(_OWORD *)(a2 + v5[7]);
  swift_bridgeObjectRetain(v9);
  swift_bridgeObjectRetain(v11);
  swift_bridgeObjectRetain(v12);
  swift_bridgeObjectRetain(v16);
  return a1;
}

uint64_t sub_10004A4FC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;

  v4 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 24))(a1, a2, v4);
  v5 = (int *)type metadata accessor for SecurityAccessoryEntry(0);
  v6 = v5[5];
  v7 = a1 + v6;
  v8 = a2 + v6;
  *(_QWORD *)v7 = *(_QWORD *)(a2 + v6);
  v9 = *(_QWORD *)(a2 + v6 + 8);
  v10 = *(_QWORD *)(a1 + v6 + 8);
  *(_QWORD *)(v7 + 8) = v9;
  swift_bridgeObjectRetain(v9);
  swift_bridgeObjectRelease(v10);
  *(_QWORD *)(v7 + 16) = *(_QWORD *)(v8 + 16);
  v11 = *(_QWORD *)(v8 + 24);
  v12 = *(_QWORD *)(v7 + 24);
  *(_QWORD *)(v7 + 24) = v11;
  swift_bridgeObjectRetain(v11);
  swift_bridgeObjectRelease(v12);
  *(_QWORD *)(v7 + 32) = *(_QWORD *)(v8 + 32);
  v13 = *(_QWORD *)(v8 + 40);
  v14 = *(_QWORD *)(v7 + 40);
  *(_QWORD *)(v7 + 40) = v13;
  swift_bridgeObjectRetain(v13);
  swift_bridgeObjectRelease(v14);
  *(_BYTE *)(v7 + 48) = *(_BYTE *)(v8 + 48);
  v15 = v5[6];
  v16 = (_QWORD *)(a1 + v15);
  v17 = (_QWORD *)(a2 + v15);
  *v16 = *v17;
  v18 = v17[1];
  v19 = v16[1];
  v16[1] = v18;
  swift_bridgeObjectRetain(v18);
  swift_bridgeObjectRelease(v19);
  v20 = v5[7];
  v21 = (_QWORD *)(a1 + v20);
  v22 = (_QWORD *)(a2 + v20);
  *v21 = *v22;
  v21[1] = v22[1];
  return a1;
}

uint64_t sub_10004A618(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;

  v4 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a1, a2, v4);
  v5 = (int *)type metadata accessor for SecurityAccessoryEntry(0);
  v6 = v5[5];
  v7 = a1 + v6;
  v8 = a2 + v6;
  v9 = *(_OWORD *)(v8 + 16);
  *(_OWORD *)v7 = *(_OWORD *)v8;
  *(_OWORD *)(v7 + 16) = v9;
  *(_OWORD *)(v7 + 32) = *(_OWORD *)(v8 + 32);
  *(_BYTE *)(v7 + 48) = *(_BYTE *)(v8 + 48);
  *(_OWORD *)(a1 + v5[6]) = *(_OWORD *)(a2 + v5[6]);
  *(_OWORD *)(a1 + v5[7]) = *(_OWORD *)(a2 + v5[7]);
  return a1;
}

uint64_t sub_10004A6A0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v4 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a1, a2, v4);
  v5 = (int *)type metadata accessor for SecurityAccessoryEntry(0);
  v6 = v5[5];
  v7 = a1 + v6;
  v8 = a2 + v6;
  v9 = *(_QWORD *)(a2 + v6 + 8);
  v10 = *(_QWORD *)(a1 + v6 + 8);
  *(_QWORD *)v7 = *(_QWORD *)(a2 + v6);
  *(_QWORD *)(v7 + 8) = v9;
  swift_bridgeObjectRelease(v10);
  v11 = *(_QWORD *)(v8 + 24);
  v12 = *(_QWORD *)(v7 + 24);
  *(_QWORD *)(v7 + 16) = *(_QWORD *)(v8 + 16);
  *(_QWORD *)(v7 + 24) = v11;
  swift_bridgeObjectRelease(v12);
  v13 = *(_QWORD *)(v8 + 40);
  v14 = *(_QWORD *)(v7 + 40);
  *(_QWORD *)(v7 + 32) = *(_QWORD *)(v8 + 32);
  *(_QWORD *)(v7 + 40) = v13;
  swift_bridgeObjectRelease(v14);
  *(_BYTE *)(v7 + 48) = *(_BYTE *)(v8 + 48);
  v15 = v5[6];
  v16 = (_QWORD *)(a1 + v15);
  v17 = (uint64_t *)(a2 + v15);
  v19 = *v17;
  v18 = v17[1];
  v20 = v16[1];
  *v16 = v19;
  v16[1] = v18;
  swift_bridgeObjectRelease(v20);
  *(_OWORD *)(a1 + v5[7]) = *(_OWORD *)(a2 + v5[7]);
  return a1;
}

uint64_t sub_10004A76C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10004A778);
}

uint64_t sub_10004A77C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for SecurityAccessoryEntry(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(a1, a2, v4);
}

uint64_t sub_10004A7B8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10004A7C4);
}

uint64_t sub_10004A7C8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for SecurityAccessoryEntry(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(a1, a2, a2, v4);
}

uint64_t sub_10004A808(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  uint64_t v4;

  result = type metadata accessor for SecurityAccessoryEntry(319);
  if (v3 <= 0x3F)
  {
    v4 = *(_QWORD *)(result - 8) + 64;
    swift_initStructMetadata(a1, 256, 1, &v4, a1 + 16);
    return 0;
  }
  return result;
}

unint64_t sub_10004A874()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100083040;
  if (!qword_100083040)
  {
    v1 = sub_100003744(&qword_100083048);
    sub_10004A1A8();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100083040);
  }
  return result;
}

uint64_t sub_10004A8E0(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_10006C2D4, 1);
}

uint64_t sub_10004A8F0()
{
  uint64_t v0;
  uint64_t v1;
  __int128 *v2;
  __int128 v3;
  __int128 v4;
  double *v5;
  double v6;
  void *v7;
  double v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  _BYTE v14[328];
  uint64_t v15;
  char v16;
  uint64_t v17;
  char v18;
  __int128 v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  char v23;
  __int128 v24;
  _OWORD v25[3];
  char v26;
  _BYTE __src[328];
  _BYTE v28[352];

  v1 = type metadata accessor for SecurityAccessoryEntry(0);
  v2 = (__int128 *)(v0 + *(int *)(v1 + 20));
  v3 = v2[2];
  v26 = *((_BYTE *)v2 + 48);
  v4 = *v2;
  v25[1] = v2[1];
  v25[2] = v3;
  v25[0] = v4;
  v5 = (double *)(v0 + *(int *)(v1 + 28));
  v6 = v5[1];
  static VerticalAlignment.center.getter(v1);
  sub_10004AA6C(v25, (uint64_t)__src, v6 / 2.5, v6);
  v28[328] = 1;
  v7 = memcpy(&v28[7], __src, 0x141uLL);
  v8 = *v5;
  v9 = static Alignment.center.getter(v7);
  _FrameLayout.init(width:height:alignment:)(&v20, *(_QWORD *)&v8, 0, *(_QWORD *)&v6, 0, v9, v10);
  v28[344] = v21;
  v28[336] = v23;
  memcpy(v14, v28, sizeof(v14));
  v15 = v20;
  v16 = v21;
  v17 = v22;
  v18 = v23;
  v19 = v24;
  v11 = sub_100003704(&qword_100083050);
  v12 = sub_10004C278();
  View.accessibility(identifier:)(0xD000000000000023, 0x8000000100069170, v11, v12);
  return sub_10004C3E0((uint64_t)__src);
}

uint64_t sub_10004AA6C@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>, double a3@<D0>, double a4@<D1>)
{
  uint64_t v8;
  uint64_t v9;
  double v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  _OWORD v19[13];
  _OWORD v20[2];
  _OWORD v21[15];
  char v22;
  char v23;
  _QWORD __src[39];
  char v25;
  _QWORD v26[2];
  char v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  char v43;
  double v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char v48;

  v8 = static HorizontalAlignment.leading.getter();
  v9 = sub_10004AD6C(a1, (uint64_t)v19, a3, a4);
  *(_OWORD *)((char *)&v21[11] + 7) = v19[11];
  *(_OWORD *)((char *)&v21[12] + 7) = v19[12];
  *(_OWORD *)((char *)&v21[13] + 7) = v20[0];
  v21[14] = *(_OWORD *)((char *)v20 + 9);
  *(_OWORD *)((char *)&v21[7] + 7) = v19[7];
  *(_OWORD *)((char *)&v21[8] + 7) = v19[8];
  *(_OWORD *)((char *)&v21[9] + 7) = v19[9];
  *(_OWORD *)((char *)&v21[10] + 7) = v19[10];
  *(_OWORD *)((char *)&v21[3] + 7) = v19[3];
  *(_OWORD *)((char *)&v21[4] + 7) = v19[4];
  *(_OWORD *)((char *)&v21[5] + 7) = v19[5];
  *(_OWORD *)((char *)&v21[6] + 7) = v19[6];
  *(_OWORD *)((char *)v21 + 7) = v19[0];
  *(_OWORD *)((char *)&v21[1] + 7) = v19[1];
  v22 = 1;
  *(_OWORD *)((char *)&v21[2] + 7) = v19[2];
  LOBYTE(a1) = static Edge.Set.all.getter(v9);
  v10 = EdgeInsets.init(_all:)(a4 / 12.0);
  v12 = v11;
  v14 = v13;
  v16 = v15;
  *(_OWORD *)((char *)&__src[24] + 1) = v21[11];
  *(_OWORD *)((char *)&__src[26] + 1) = v21[12];
  *(_OWORD *)((char *)&__src[28] + 1) = v21[13];
  *(_OWORD *)((char *)&__src[30] + 1) = v21[14];
  *(_OWORD *)((char *)&__src[16] + 1) = v21[7];
  *(_OWORD *)((char *)&__src[18] + 1) = v21[8];
  *(_OWORD *)((char *)&__src[20] + 1) = v21[9];
  *(_OWORD *)((char *)&__src[22] + 1) = v21[10];
  *(_OWORD *)((char *)&__src[8] + 1) = v21[3];
  *(_OWORD *)((char *)&__src[10] + 1) = v21[4];
  *(_OWORD *)((char *)&__src[12] + 1) = v21[5];
  *(_OWORD *)((char *)&__src[14] + 1) = v21[6];
  *(_OWORD *)((char *)&__src[2] + 1) = v21[0];
  *(_OWORD *)((char *)&__src[4] + 1) = v21[1];
  v23 = 0;
  __src[0] = v8;
  __src[1] = 0;
  LOBYTE(__src[2]) = 1;
  *(_OWORD *)((char *)&__src[6] + 1) = v21[2];
  LOBYTE(__src[33]) = (_BYTE)a1;
  *(double *)&__src[34] = v10;
  __src[35] = v11;
  __src[36] = v13;
  __src[37] = v15;
  LOBYTE(__src[38]) = 0;
  memcpy((void *)a2, __src, 0x131uLL);
  v39 = v21[11];
  v40 = v21[12];
  v41 = v21[13];
  v42 = v21[14];
  v35 = v21[7];
  v36 = v21[8];
  v37 = v21[9];
  v38 = v21[10];
  v17 = v21[2];
  v31 = v21[3];
  v32 = v21[4];
  v33 = v21[5];
  v34 = v21[6];
  v28 = v21[0];
  v29 = v21[1];
  v25 = 0;
  *(_QWORD *)(a2 + 312) = 0;
  *(_BYTE *)(a2 + 320) = 0;
  v26[0] = v8;
  v26[1] = 0;
  v27 = 1;
  v30 = v17;
  v43 = (char)a1;
  v44 = v10;
  v45 = v12;
  v46 = v14;
  v47 = v16;
  v48 = 0;
  sub_10004C2FC((uint64_t)__src);
  return sub_10004C3E0((uint64_t)v26);
}

uint64_t sub_10004AD6C@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>, double a3@<D0>, double a4@<D1>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  double v22;
  double v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char v48;
  uint64_t v49;
  double v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char v64;
  _QWORD *v65;
  uint64_t v66;
  char v67;
  char v68;
  char v69;
  char v70;
  char v71;
  char v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  _QWORD *v87;
  void (*v88)(_QWORD, _QWORD, _QWORD, _QWORD);
  char *v90;
  uint64_t v91;
  void (*v92)(char *, _QWORD, uint64_t, uint64_t);
  void (*v93)(char *, uint64_t);
  unsigned int v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  int v99;
  int v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  int v105;
  uint64_t v106;
  _QWORD *v107;
  uint64_t KeyPath;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  char v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  unsigned __int8 v119;
  char v120;
  _BYTE v121[7];
  char v122;
  int v123;
  char v124;
  char v125;
  _BYTE v126[7];
  _BYTE v127[7];
  _BYTE v128[7];
  char v129;
  _BYTE v130[7];
  char v131;
  _BYTE v132[7];
  char v133;
  _BYTE v134[7];
  char v135;
  char v136;

  v8 = sub_100003704(&qword_1000824F8);
  v9 = __chkstk_darwin(v8);
  v11 = (char *)&v90 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v104 = static VerticalAlignment.center.getter(v9);
  sub_10004B4A4((uint64_t)a1, (uint64_t)&v113, a3);
  v103 = v113;
  v100 = v114;
  v111 = v115;
  v101 = v116;
  v110 = v117;
  v102 = v118;
  v99 = v119;
  v107 = a1;
  v12 = *a1;
  v13 = a1[1];
  v113 = v12;
  v114 = v13;
  v14 = sub_1000037D4();
  v106 = v14;
  swift_bridgeObjectRetain(v13);
  v15 = Text.init<A>(_:)(&v113, &type metadata for String, v14);
  v17 = v16;
  v19 = v18;
  v21 = v20 & 1;
  v22 = a4 / 9.0;
  v23 = static Font.Weight.bold.getter();
  v24 = enum case for Font.Design.default(_:);
  v94 = enum case for Font.Design.default(_:);
  v25 = type metadata accessor for Font.Design(0);
  v26 = *(_QWORD *)(v25 - 8);
  v93 = *(void (**)(char *, uint64_t))(v26 + 104);
  v90 = v11;
  v27 = v24;
  v28 = v25;
  v91 = v25;
  v93(v11, v27);
  v92 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v26 + 56);
  v92(v11, 0, 1, v28);
  v29 = static Font.system(size:weight:design:)(*(_QWORD *)&v23, 0, v11, v22);
  sub_100033268((uint64_t)v11, &qword_1000824F8);
  v30 = Text.font(_:)(v29, v15, v17, v21, v19);
  v32 = v31;
  LOBYTE(v26) = v33;
  v35 = v34;
  swift_release(v29);
  v36 = v26 & 1;
  sub_1000330B0(v15, v17, v21);
  v37 = swift_bridgeObjectRelease(v19);
  v38 = static Color.primary.getter(v37);
  v98 = Text.foregroundColor(_:)(v38, v30, v32, v36, v35);
  v97 = v39;
  LOBYTE(v21) = v40;
  v109 = v41;
  swift_release(v38);
  v105 = v21 & 1;
  sub_1000330B0(v30, v32, v36);
  swift_bridgeObjectRelease(v35);
  KeyPath = swift_getKeyPath(&unk_100063E68);
  v96 = swift_getKeyPath(&unk_100063E98);
  v95 = swift_getKeyPath(&unk_100063EC8);
  v42 = v107[5];
  v113 = v107[4];
  v114 = v42;
  swift_bridgeObjectRetain(v42);
  v43 = Text.init<A>(_:)(&v113, &type metadata for String, v106);
  v45 = v44;
  v47 = v46;
  v49 = v48 & 1;
  v50 = static Font.Weight.medium.getter();
  v51 = (uint64_t)v90;
  v52 = v91;
  ((void (*)(char *, _QWORD, uint64_t))v93)(v90, v94, v91);
  v92((char *)v51, 0, 1, v52);
  v53 = static Font.system(size:weight:design:)(*(_QWORD *)&v50, 0, v51, v22);
  sub_100033268(v51, &qword_1000824F8);
  v54 = Text.font(_:)(v53, v43, v45, v49, v47);
  v56 = v55;
  LOBYTE(v51) = v57;
  v59 = v58;
  swift_release(v53);
  v60 = v51 & 1;
  sub_1000330B0(v43, v45, v49);
  v61 = swift_bridgeObjectRelease(v47);
  v62 = static Color.primary.getter(v61);
  v93 = (void (*)(char *, uint64_t))Text.foregroundColor(_:)(v62, v54, v56, v60, v59);
  v106 = v63;
  LOBYTE(v47) = v64;
  v107 = v65;
  swift_release(v62);
  v94 = v47 & 1;
  sub_1000330B0(v54, v56, v60);
  swift_bridgeObjectRelease(v59);
  v66 = swift_getKeyPath(&unk_100063EC8);
  v92 = (void (*)(char *, _QWORD, uint64_t, uint64_t))v66;
  v112 = v105;
  v136 = 1;
  v67 = v100;
  v135 = v100;
  v68 = v99;
  v133 = v99;
  v131 = 0;
  v129 = v105;
  v125 = 0;
  v122 = v47 & 1;
  v120 = 0;
  *(_DWORD *)(a2 + 17) = v113;
  *(_DWORD *)(a2 + 20) = *(_DWORD *)((char *)&v113 + 3);
  *(_DWORD *)(a2 + 33) = *(_DWORD *)v134;
  *(_DWORD *)(a2 + 36) = *(_DWORD *)&v134[3];
  *(_DWORD *)(a2 + 73) = *(_DWORD *)v132;
  *(_DWORD *)(a2 + 76) = *(_DWORD *)&v132[3];
  *(_DWORD *)(a2 + 89) = *(_DWORD *)v130;
  *(_DWORD *)(a2 + 92) = *(_DWORD *)&v130[3];
  v69 = v129;
  *(_DWORD *)(a2 + 113) = *(_DWORD *)v128;
  *(_DWORD *)(a2 + 116) = *(_DWORD *)&v128[3];
  *(_DWORD *)(a2 + 140) = *(_DWORD *)&v127[3];
  *(_DWORD *)(a2 + 137) = *(_DWORD *)v127;
  *(_DWORD *)(a2 + 156) = *(_DWORD *)&v126[3];
  *(_DWORD *)(a2 + 153) = *(_DWORD *)v126;
  v70 = v125;
  *(_BYTE *)(a2 + 183) = v124;
  *(_DWORD *)(a2 + 179) = v123;
  v71 = v122;
  *(_DWORD *)(a2 + 204) = *(_DWORD *)&v121[3];
  *(_DWORD *)(a2 + 201) = *(_DWORD *)v121;
  v72 = v120;
  *(_QWORD *)a2 = v104;
  *(_QWORD *)(a2 + 8) = 0;
  *(_BYTE *)(a2 + 16) = 1;
  *(_QWORD *)(a2 + 24) = v103;
  *(_BYTE *)(a2 + 32) = v67;
  v73 = v111;
  v74 = v101;
  *(_QWORD *)(a2 + 40) = v111;
  *(_QWORD *)(a2 + 48) = v74;
  v75 = v110;
  v76 = v102;
  *(_QWORD *)(a2 + 56) = v110;
  *(_QWORD *)(a2 + 64) = v76;
  *(_BYTE *)(a2 + 72) = v68;
  *(_QWORD *)(a2 + 80) = 0;
  *(_BYTE *)(a2 + 88) = 0;
  v77 = v98;
  v78 = v97;
  *(_QWORD *)(a2 + 96) = v98;
  *(_QWORD *)(a2 + 104) = v78;
  *(_BYTE *)(a2 + 112) = v69;
  v79 = v109;
  v80 = KeyPath;
  *(_QWORD *)(a2 + 120) = v109;
  *(_QWORD *)(a2 + 128) = v80;
  *(_BYTE *)(a2 + 136) = 1;
  v81 = v96;
  *(_QWORD *)(a2 + 144) = v96;
  *(_BYTE *)(a2 + 152) = 0;
  v82 = v95;
  *(_QWORD *)(a2 + 160) = v95;
  *(_QWORD *)(a2 + 168) = 2;
  *(_BYTE *)(a2 + 176) = v70;
  *(_WORD *)(a2 + 177) = 256;
  v83 = (uint64_t)v93;
  v84 = v106;
  *(_QWORD *)(a2 + 184) = v93;
  *(_QWORD *)(a2 + 192) = v84;
  *(_BYTE *)(a2 + 200) = v71;
  *(_QWORD *)(a2 + 208) = v107;
  *(_QWORD *)(a2 + 216) = v66;
  *(_QWORD *)(a2 + 224) = 1;
  *(_BYTE *)(a2 + 232) = v72;
  swift_retain(v75);
  swift_retain(v73);
  swift_retain(v74);
  sub_100032F84(v77, v78, v105);
  swift_bridgeObjectRetain(v79);
  swift_retain(v80);
  swift_retain(v81);
  swift_retain(v82);
  v85 = v83;
  v86 = v106;
  LOBYTE(v80) = v94;
  sub_100032F84(v83, v106, v94);
  v87 = v107;
  swift_bridgeObjectRetain(v107);
  v88 = (void (*)(_QWORD, _QWORD, _QWORD, _QWORD))v92;
  swift_retain(v92);
  sub_1000330B0(v85, v86, v80);
  swift_release(v88);
  swift_bridgeObjectRelease(v87);
  sub_1000330B0(v77, v78, v112);
  swift_release(v110);
  swift_release(v74);
  swift_release(v111);
  swift_release(v82);
  swift_release(v81);
  swift_release(KeyPath);
  return swift_bridgeObjectRelease(v109);
}

uint64_t sub_10004B4A4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>, double a3@<D0>)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t result;
  uint64_t v20;

  v6 = sub_100003704(&qword_1000824F8);
  __chkstk_darwin(v6);
  v8 = (char *)&v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_100003704(&qword_100083070);
  __chkstk_darwin(v9);
  v11 = (char *)&v20 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = *(_QWORD *)(a1 + 16);
  v12 = *(_QWORD *)(a1 + 24);
  swift_bridgeObjectRetain(v12);
  v14 = Image.init(_internalSystemName:)(v13, v12);
  static SymbolRenderingMode.hierarchical.getter();
  v15 = type metadata accessor for SymbolRenderingMode(0);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 56))(v11, 0, 1, v15);
  v16 = Image.symbolRenderingMode(_:)(v11, v14);
  swift_release(v14);
  sub_100033268((uint64_t)v11, &qword_100083070);
  v17 = type metadata accessor for Font.Design(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 56))(v8, 1, 1, v17);
  v18 = static Font.system(size:weight:design:)(0, 1, v8, a3);
  sub_100033268((uint64_t)v8, &qword_1000824F8);
  result = swift_getKeyPath(&unk_100063EF8);
  *(_QWORD *)a2 = 0;
  *(_BYTE *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = v16;
  *(_QWORD *)(a2 + 24) = result;
  *(_QWORD *)(a2 + 32) = v18;
  *(_QWORD *)(a2 + 40) = 0;
  *(_BYTE *)(a2 + 48) = 0;
  return result;
}

uint64_t sub_10004B63C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _BYTE *v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  const char *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v40;
  uint64_t v41;
  _BYTE v42[16];
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;

  v1 = type metadata accessor for Locale(0);
  __chkstk_darwin(v1);
  v3 = &v42[-((v2 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v4 = type metadata accessor for String.LocalizationValue(0);
  __chkstk_darwin(v4);
  v6 = &v42[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v7 = (_QWORD *)(v0 + *(int *)(type metadata accessor for SecurityAccessoryEntry(0) + 20));
  v8 = v7[2];
  v9 = v7[3];
  v45 = v8;
  v46 = v9;
  v43 = 0x6E6F63616562;
  v44 = 0xE600000000000000;
  v10 = sub_1000037D4();
  if ((StringProtocol.contains<A>(_:)(&v43, &type metadata for String, &type metadata for String, v10, v10) & 1) != 0)
  {
    v11 = 0xD000000000000022;
    v12 = "HFSecuritySystemAccessibilityLabel";
LABEL_7:
    v13 = (unint64_t)(v12 - 32) | 0x8000000000000000;
    goto LABEL_8;
  }
  v45 = v8;
  v46 = v9;
  v43 = 0x656761726167;
  v44 = 0xE600000000000000;
  v11 = 0xD000000000000020;
  if ((StringProtocol.contains<A>(_:)(&v43, &type metadata for String, &type metadata for String, v10, v10) & 1) != 0)
  {
    v12 = "HFGarageWidgetAccessibilityLabel";
    goto LABEL_7;
  }
  v45 = v8;
  v46 = v9;
  v43 = 0x776F646E6977;
  v44 = 0xE600000000000000;
  if ((StringProtocol.contains<A>(_:)(&v43, &type metadata for String, &type metadata for String, v10, v10) & 1) != 0)
  {
    v12 = "HFWindowWidgetAccessibilityLabel";
    goto LABEL_7;
  }
  v45 = v8;
  v46 = v9;
  v43 = 1919905636;
  v44 = 0xE400000000000000;
  v13 = 0x8000000100069200;
  if ((StringProtocol.contains<A>(_:)(&v43, &type metadata for String, &type metadata for String, v10, v10) & 1) != 0)
  {
    v11 = 0xD00000000000001ELL;
  }
  else
  {
    v45 = v8;
    v46 = v9;
    v43 = 1801678700;
    v44 = 0xE400000000000000;
    v11 = 0xD00000000000001ELL;
    if ((StringProtocol.contains<A>(_:)(&v43, &type metadata for String, &type metadata for String, v10, v10) & 1) == 0)
    {
      v45 = v8;
      v46 = v9;
      v43 = 0x74616D616C637865;
      v44 = 0xEF6B72616D6E6F69;
      if ((StringProtocol.contains<A>(_:)(&v43, &type metadata for String, &type metadata for String, v10, v10) & 1) != 0)
      {
        v40 = String.LocalizationValue.init(stringLiteral:)(0xD000000000000022, 0x8000000100068F70);
        static Locale.current.getter(v40);
        v45 = String.init(localized:table:bundle:locale:comment:)(v6, 0x696C61636F4C4648, 0xED0000656C62617ALL, 0, v3, 0, 0, 256);
        v46 = v41;
        return Text.init<A>(_:)(&v45, &type metadata for String, v10);
      }
      v11 = 0;
      v13 = 0xE000000000000000;
    }
  }
LABEL_8:
  v15 = v7[4];
  v14 = v7[5];
  v16 = v15 == 0x9380E29380E2 && v14 == 0xA600000000000000;
  if (v16
    || (_stringCompareWithSmolCheck(_:_:expecting:)(v7[4], v7[5], 0x9380E29380E2, 0xA600000000000000, 0) & 1) != 0)
  {
    v17 = String.LocalizationValue.init(_:)(v11, v13);
    static Locale.current.getter(v17);
    v18 = String.init(localized:table:bundle:locale:comment:)(v6, 0x696C61636F4C4648, 0xED0000656C62617ALL, 0, v3, 0, 0, 256);
    v20 = v19;
    v21 = sub_100003704(&qword_1000825B0);
    v22 = swift_allocObject(v21, 72, 7);
    *(_OWORD *)(v22 + 16) = xmmword_1000607D0;
    v23 = String.LocalizationValue.init(stringLiteral:)(0xD000000000000024, 0x80000001000691D0);
    static Locale.current.getter(v23);
    v24 = String.init(localized:table:bundle:locale:comment:)(v6, 0x696C61636F4C4648, 0xED0000656C62617ALL, 0, v3, 0, 0, 256);
    v26 = v25;
    *(_QWORD *)(v22 + 56) = &type metadata for String;
    *(_QWORD *)(v22 + 64) = sub_100044CA4();
    *(_QWORD *)(v22 + 32) = v24;
    *(_QWORD *)(v22 + 40) = v26;
    v27 = static String.localizedStringWithFormat(_:_:)(v18, v20, v22);
    v29 = v28;
    swift_bridgeObjectRelease(v20);
    swift_bridgeObjectRelease(v22);
    v45 = v27;
    v46 = v29;
  }
  else
  {
    v30 = String.LocalizationValue.init(_:)(v11, v13);
    static Locale.current.getter(v30);
    v31 = String.init(localized:table:bundle:locale:comment:)(v6, 0x696C61636F4C4648, 0xED0000656C62617ALL, 0, v3, 0, 0, 256);
    v33 = v32;
    v34 = sub_100003704(&qword_1000825B0);
    v35 = swift_allocObject(v34, 72, 7);
    *(_OWORD *)(v35 + 16) = xmmword_1000607D0;
    *(_QWORD *)(v35 + 56) = &type metadata for String;
    *(_QWORD *)(v35 + 64) = sub_100044CA4();
    *(_QWORD *)(v35 + 32) = v15;
    *(_QWORD *)(v35 + 40) = v14;
    swift_bridgeObjectRetain(v14);
    v36 = static String.localizedStringWithFormat(_:_:)(v31, v33, v35);
    v38 = v37;
    swift_bridgeObjectRelease(v33);
    swift_bridgeObjectRelease(v35);
    v45 = v36;
    v46 = v38;
  }
  return Text.init<A>(_:)(&v45, &type metadata for String, v10);
}

uint64_t sub_10004BB9C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  double v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  uint64_t OpaqueTypeConformance2;
  uint64_t v30;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  __int128 v36;
  _OWORD v37[9];
  uint64_t v38;
  _OWORD v39[3];
  char v40;
  _OWORD v41[10];
  uint64_t v42;

  v2 = v1;
  v35 = a1;
  v3 = type metadata accessor for AccessibilityChildBehavior(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v32 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v32 = sub_100003704(&qword_100083078);
  v34 = *(_QWORD *)(v32 - 8);
  __chkstk_darwin(v32);
  v8 = (char *)&v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v33 = sub_100003704(&qword_100083080);
  __chkstk_darwin(v33);
  v10 = (char *)&v32 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for SecurityAccessoryEntry(0);
  v12 = v1 + *(int *)(v11 + 20);
  v13 = *(_OWORD *)(v12 + 32);
  v40 = *(_BYTE *)(v12 + 48);
  v14 = *(_OWORD *)v12;
  v39[1] = *(_OWORD *)(v12 + 16);
  v39[2] = v13;
  v39[0] = v14;
  v15 = *(double *)(v1 + *(int *)(v11 + 28) + 8);
  v16 = static Alignment.center.getter(v11);
  v18 = v17;
  v19 = sub_10004BE78((uint64_t)v39, v2, (uint64_t)v37, v15, v15 * 0.4);
  *(_QWORD *)&v36 = v16;
  *((_QWORD *)&v36 + 1) = v18;
  static AccessibilityChildBehavior.ignore.getter(v19);
  v20 = sub_100003704(&qword_100083088);
  v21 = sub_100033ED0(&qword_100083090, &qword_100083088, (uint64_t)&protocol conformance descriptor for ZStack<A>);
  View.accessibilityElement(children:)(v6, v20, v21);
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  v41[8] = v37[7];
  v41[9] = v37[8];
  v42 = v38;
  v41[4] = v37[3];
  v41[5] = v37[4];
  v41[6] = v37[5];
  v41[7] = v37[6];
  v41[0] = v36;
  v41[1] = v37[0];
  v41[2] = v37[1];
  v41[3] = v37[2];
  sub_10004C620(v41);
  v22 = sub_10004B63C();
  v24 = v23;
  v26 = v25;
  v28 = v27 & 1;
  *(_QWORD *)&v36 = v20;
  *((_QWORD *)&v36 + 1) = v21;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v36, &opaque type descriptor for <<opaque return type of View.accessibilityElement(children:)>>, 1);
  v30 = v32;
  View.accessibilityLabel(_:)(v22, v24, v28, v26, v32, OpaqueTypeConformance2);
  sub_1000330B0(v22, v24, v28);
  swift_bridgeObjectRelease(v26);
  (*(void (**)(char *, uint64_t))(v34 + 8))(v8, v30);
  ModifiedContent<>.accessibilityIdentifier(_:)(0xD00000000000002DLL, 0x80000001000691A0, v33);
  return sub_100033268((uint64_t)v10, &qword_100083080);
}

uint64_t sub_10004BE78@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>, double a4@<D0>, double a5@<D1>)
{
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  float v17;
  _QWORD *v18;
  double v19;
  unsigned int v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  double v37;
  uint64_t v38;
  uint64_t KeyPath;
  uint64_t v40;
  uint64_t v41;
  unsigned int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  uint64_t v54;
  int v55;
  int v56;
  unsigned int v57;
  unsigned int v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unsigned int v67;
  uint64_t v68;
  _BYTE v69[7];
  unsigned __int8 v70;
  _BYTE v71[7];
  unsigned __int8 v72;
  int v73;
  __int16 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  double v83[2];
  unsigned int v84;
  unsigned int v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  unsigned int v89;
  float v90;
  __int16 v91;
  int v92;
  __int16 v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  char v97;
  _BYTE v98[7];
  uint64_t v99;
  char v100;
  _BYTE v101[7];
  uint64_t v102;
  uint64_t v103;
  double v104;
  unsigned int v105;
  unsigned int v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  unsigned __int8 v111;
  uint64_t v112;
  unsigned __int8 v113;
  uint64_t v114;
  uint64_t v115;

  v10 = sub_100003704(&qword_1000824F8);
  __chkstk_darwin(v10);
  v12 = (char *)&v54 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_100003704(&qword_100083070);
  v14 = __chkstk_darwin(v13);
  v16 = (char *)&v54 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v67 = static HierarchicalShapeStyle.primary.getter(v14);
  if ((*(_BYTE *)(a1 + 48) & 1) != 0)
    v17 = 0.2;
  else
    v17 = 1.0;
  v18 = StrokeStyle.init(lineWidth:lineCap:lineJoin:miterLimit:dash:dashPhase:)(&v104, 0, 0, _swiftEmptyArrayStorage, a4 * 0.1, 10.0, 0.0);
  v19 = v104;
  v20 = v105;
  v21 = v106;
  v57 = v106;
  v58 = v105;
  v22 = v107;
  v64 = v108;
  v23 = v109;
  v24 = static Alignment.center.getter(v18);
  v65 = v25;
  v66 = v24;
  v26 = type metadata accessor for SecurityAccessoryEntry(0);
  v27 = (uint64_t *)(a2 + *(int *)(v26 + 28));
  v28 = *v27;
  v29 = v27[1];
  v30 = static Alignment.center.getter(v26);
  _FrameLayout.init(width:height:alignment:)(&v110, v28, 0, v29, 0, v30, v31);
  v68 = v110;
  v63 = v114;
  v61 = v112;
  v62 = v115;
  v72 = v111;
  v70 = v113;
  v32 = *(_QWORD *)(a1 + 16);
  v33 = *(_QWORD *)(a1 + 24);
  swift_bridgeObjectRetain(v33);
  v34 = Image.init(_internalSystemName:)(v32, v33);
  static SymbolRenderingMode.hierarchical.getter();
  v35 = type metadata accessor for SymbolRenderingMode(0);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v35 - 8) + 56))(v16, 0, 1, v35);
  v60 = Image.symbolRenderingMode(_:)(v16, v34);
  swift_release(v34);
  v36 = sub_100033268((uint64_t)v16, &qword_100083070);
  v37 = static Font.Weight.medium.getter(v36);
  v38 = type metadata accessor for Font.Design(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v38 - 8) + 56))(v12, 1, 1, v38);
  v59 = static Font.system(size:weight:design:)(*(_QWORD *)&v37, 0, v12, a5);
  sub_100033268((uint64_t)v12, &qword_1000824F8);
  KeyPath = swift_getKeyPath(&unk_100063EF8);
  v55 = v72;
  v56 = v70;
  *(double *)&v75 = v19 * 0.5;
  *((double *)&v75 + 1) = v19;
  *(_QWORD *)&v76 = __PAIR64__(v21, v20);
  *((_QWORD *)&v76 + 1) = v22;
  v40 = v64;
  v41 = v65;
  *(_QWORD *)&v77 = v64;
  *((_QWORD *)&v77 + 1) = v23;
  v42 = v67;
  *(_QWORD *)&v78 = __PAIR64__(LODWORD(v17), v67);
  WORD4(v78) = 256;
  *(_DWORD *)((char *)&v78 + 10) = v73;
  HIWORD(v78) = v74;
  v43 = v66;
  *(_QWORD *)&v79 = v66;
  *((_QWORD *)&v79 + 1) = v65;
  *(_QWORD *)&v80 = v68;
  BYTE8(v80) = v72;
  *(_DWORD *)((char *)&v80 + 9) = *(_DWORD *)v71;
  HIDWORD(v80) = *(_DWORD *)&v71[3];
  v45 = v61;
  v44 = v62;
  *(_QWORD *)&v81 = v61;
  BYTE8(v81) = v70;
  *(_DWORD *)((char *)&v81 + 9) = *(_DWORD *)v69;
  HIDWORD(v81) = *(_DWORD *)&v69[3];
  v46 = v63;
  *(_QWORD *)&v82 = v63;
  *((_QWORD *)&v82 + 1) = v62;
  v47 = v75;
  v48 = v76;
  v49 = v78;
  *(_OWORD *)(a3 + 32) = v77;
  *(_OWORD *)(a3 + 48) = v49;
  *(_OWORD *)a3 = v47;
  *(_OWORD *)(a3 + 16) = v48;
  v50 = v79;
  v51 = v80;
  v52 = v82;
  *(_OWORD *)(a3 + 96) = v81;
  *(_OWORD *)(a3 + 112) = v52;
  *(_OWORD *)(a3 + 64) = v50;
  *(_OWORD *)(a3 + 80) = v51;
  *(_QWORD *)(a3 + 128) = v60;
  *(_QWORD *)(a3 + 136) = KeyPath;
  *(_QWORD *)(a3 + 144) = v59;
  sub_10004C670((uint64_t)&v75);
  v83[0] = v19 * 0.5;
  v83[1] = v19;
  v84 = v58;
  v85 = v57;
  v86 = v22;
  v87 = v40;
  v88 = v23;
  v89 = v42;
  v90 = v17;
  v91 = 256;
  v92 = v73;
  v93 = v74;
  v94 = v43;
  v95 = v41;
  v96 = v68;
  v97 = v55;
  *(_DWORD *)&v98[3] = *(_DWORD *)&v71[3];
  *(_DWORD *)v98 = *(_DWORD *)v71;
  v99 = v45;
  v100 = v56;
  *(_DWORD *)v101 = *(_DWORD *)v69;
  *(_DWORD *)&v101[3] = *(_DWORD *)&v69[3];
  v102 = v46;
  v103 = v44;
  return sub_100028D2C((uint64_t)v83);
}

uint64_t sub_10004C268(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_10006C2AC, 1);
}

unint64_t sub_10004C278()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100083058;
  if (!qword_100083058)
  {
    v1 = sub_100003744(&qword_100083050);
    sub_100033ED0(&qword_100083060, &qword_100083068, (uint64_t)&protocol conformance descriptor for HStack<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100083058);
  }
  return result;
}

uint64_t sub_10004C2FC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v2 = *(_QWORD *)(a1 + 64);
  v3 = *(_QWORD *)(a1 + 72);
  v4 = *(_QWORD *)(a1 + 120);
  v5 = *(_QWORD *)(a1 + 128);
  v6 = *(_BYTE *)(a1 + 136);
  v7 = *(_QWORD *)(a1 + 144);
  v8 = *(_QWORD *)(a1 + 152);
  v9 = *(_QWORD *)(a1 + 168);
  v10 = *(_QWORD *)(a1 + 184);
  v13 = *(_QWORD *)(a1 + 216);
  v14 = *(_QWORD *)(a1 + 208);
  v12 = *(_BYTE *)(a1 + 224);
  v15 = *(_QWORD *)(a1 + 232);
  v16 = *(_QWORD *)(a1 + 240);
  swift_retain(*(_QWORD *)(a1 + 80));
  swift_retain(v2);
  swift_retain(v3);
  sub_100032F84(v4, v5, v6);
  swift_bridgeObjectRetain(v7);
  swift_retain(v8);
  swift_retain(v9);
  swift_retain(v10);
  sub_100032F84(v14, v13, v12);
  swift_bridgeObjectRetain(v15);
  swift_retain(v16);
  return a1;
}

uint64_t sub_10004C3E0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v2 = *(_QWORD *)(a1 + 64);
  v3 = *(_QWORD *)(a1 + 80);
  v4 = *(_QWORD *)(a1 + 120);
  v5 = *(_QWORD *)(a1 + 128);
  v6 = *(_BYTE *)(a1 + 136);
  v7 = *(_QWORD *)(a1 + 144);
  v8 = *(_QWORD *)(a1 + 152);
  v9 = *(_QWORD *)(a1 + 168);
  v10 = *(_QWORD *)(a1 + 184);
  v13 = *(_QWORD *)(a1 + 216);
  v14 = *(_QWORD *)(a1 + 208);
  v12 = *(_BYTE *)(a1 + 224);
  v15 = *(_QWORD *)(a1 + 240);
  v16 = *(_QWORD *)(a1 + 232);
  swift_release(*(_QWORD *)(a1 + 72));
  swift_release(v2);
  swift_release(v3);
  sub_1000330B0(v4, v5, v6);
  swift_release(v10);
  swift_release(v9);
  swift_release(v8);
  swift_bridgeObjectRelease(v7);
  sub_1000330B0(v14, v13, v12);
  swift_release(v15);
  swift_bridgeObjectRelease(v16);
  return a1;
}

uint64_t sub_10004C4C4@<X0>(uint64_t a1@<X8>)
{
  uint64_t result;
  char v3;

  result = EnvironmentValues.lineLimit.getter();
  *(_QWORD *)a1 = result;
  *(_BYTE *)(a1 + 8) = v3 & 1;
  return result;
}

uint64_t sub_10004C4F4(uint64_t a1)
{
  return EnvironmentValues.lineLimit.setter(*(_QWORD *)a1, *(unsigned __int8 *)(a1 + 8));
}

uint64_t sub_10004C520@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = EnvironmentValues.allowsTightening.getter();
  *a1 = result & 1;
  return result;
}

uint64_t sub_10004C54C(unsigned __int8 *a1)
{
  return EnvironmentValues.allowsTightening.setter(*a1);
}

uint64_t sub_10004C570@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = EnvironmentValues.multilineTextAlignment.getter();
  *a1 = result;
  return result;
}

uint64_t sub_10004C598(unsigned __int8 *a1)
{
  return EnvironmentValues.multilineTextAlignment.setter(*a1);
}

uint64_t sub_10004C5BC@<X0>(uint64_t a1@<X8>)
{
  uint64_t result;
  char v3;

  result = EnvironmentValues.lineLimit.getter();
  *(_QWORD *)a1 = result;
  *(_BYTE *)(a1 + 8) = v3 & 1;
  return result;
}

uint64_t sub_10004C5EC(uint64_t a1)
{
  return EnvironmentValues.lineLimit.setter(*(_QWORD *)a1, *(unsigned __int8 *)(a1 + 8));
}

_QWORD *sub_10004C620(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = a1[6];
  v3 = a1[18];
  v4 = a1[20];
  swift_release(a1[19]);
  swift_release(v3);
  swift_bridgeObjectRelease(v2);
  swift_release(v4);
  return a1;
}

uint64_t sub_10004C670(uint64_t a1)
{
  swift_bridgeObjectRetain(*(_QWORD *)(a1 + 32));
  return a1;
}

unint64_t sub_10004C69C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100083098;
  if (!qword_100083098)
  {
    v1 = sub_100003744(&qword_1000830A0);
    sub_10004C278();
    sub_100015884(&qword_100081E08, (uint64_t (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier, (uint64_t)&protocol conformance descriptor for AccessibilityAttachmentModifier);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100083098);
  }
  return result;
}

unint64_t sub_10004C724()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_1000830A8;
  if (!qword_1000830A8)
  {
    v1 = sub_100003744(&qword_100083080);
    v2[0] = sub_100003744(&qword_100083088);
    v2[1] = sub_100033ED0(&qword_100083090, &qword_100083088, (uint64_t)&protocol conformance descriptor for ZStack<A>);
    swift_getOpaqueTypeConformance2(v2, &opaque type descriptor for <<opaque return type of View.accessibilityElement(children:)>>, 1);
    sub_100015884(&qword_100081E08, (uint64_t (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier, (uint64_t)&protocol conformance descriptor for AccessibilityAttachmentModifier);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000830A8);
  }
  return result;
}

double *sub_10004C7F0(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  unsigned __int8 v27;

  v15 = *(_QWORD *)(a1 + 16);
  if (!v15)
    return _swiftEmptyArrayStorage;
  v3 = a1;
  v4 = 0;
  v5 = (char *)_swiftEmptyArrayStorage;
  v14 = swift_bridgeObjectRetain(a1);
  do
  {
    v27 = *(_BYTE *)(v3 + v4 + 32);
    sub_100050FFC(&v27, a2, (uint64_t)&v20);
    if (v2)
    {
      swift_bridgeObjectRelease(v5);
      swift_bridgeObjectRelease(v3);
      return (double *)v5;
    }
    v7 = v21;
    if (v21)
    {
      v8 = v20;
      v9 = v22;
      v18 = v24;
      v19 = v23;
      v17 = v25;
      v10 = v26;
      if ((swift_isUniquelyReferenced_nonNull_native(v5) & 1) == 0)
        v5 = sub_10000A030(0, *((_QWORD *)v5 + 2) + 1, 1, v5);
      v12 = *((_QWORD *)v5 + 2);
      v11 = *((_QWORD *)v5 + 3);
      if (v12 >= v11 >> 1)
        v5 = sub_10000A030((char *)(v11 > 1), v12 + 1, 1, v5);
      *((_QWORD *)v5 + 2) = v12 + 1;
      v6 = &v5[56 * v12];
      *((_QWORD *)v6 + 4) = v8;
      *((_QWORD *)v6 + 5) = v7;
      *((_QWORD *)v6 + 6) = v9;
      *((_QWORD *)v6 + 7) = v19;
      *((_QWORD *)v6 + 8) = v18;
      *((_QWORD *)v6 + 9) = v17;
      v6[80] = v10 & 1;
      v3 = v14;
    }
    ++v4;
  }
  while (v15 != v4);
  swift_bridgeObjectRelease(v3);
  return (double *)v5;
}

int64_t sub_10004C974(int64_t result, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;

  if (result < 0)
  {
    __break(1u);
  }
  else
  {
    v2 = *(_QWORD *)(a2 + 16);
    if ((uint64_t)v2 >= result)
      v3 = result;
    else
      v3 = *(_QWORD *)(a2 + 16);
    if (!result)
      v3 = 0;
    if (v2 >= v3)
      return a2;
  }
  __break(1u);
  return result;
}

uint64_t sub_10004C9B8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v5;

  v5[107] = v4;
  v5[106] = a4;
  v5[105] = a3;
  v5[104] = a2;
  v5[103] = a1;
  return swift_task_switch(sub_10004C9E0, 0, 0);
}

uint64_t sub_10004C9E0()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  void *v3;
  uint64_t v4;
  id v5;
  id v6;
  NSObject *v7;
  os_log_type_t v8;
  _BOOL4 v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  id v21;
  _QWORD *v22;
  uint64_t v24;
  os_log_type_t v25;
  uint64_t v26;
  uint64_t v27;

  if (qword_100081690 != -1)
    swift_once(&qword_100081690, sub_100022538);
  v1 = *(_QWORD *)(v0 + 840);
  v2 = (_QWORD *)(v0 + 824);
  v3 = *(void **)(v0 + 824);
  v4 = type metadata accessor for Logger(0);
  sub_100003884(v4, (uint64_t)static DataModel.widgetLoggerSecurity);
  v5 = v3;
  swift_bridgeObjectRetain_n(v1, 2);
  v6 = v5;
  v7 = Logger.logObject.getter(v6);
  v8 = static os_log_type_t.default.getter();
  v9 = os_log_type_enabled(v7, v8);
  v10 = *(_QWORD *)(v0 + 840);
  if (v9)
  {
    v25 = v8;
    v11 = *(_QWORD *)(v0 + 832);
    v24 = *(_QWORD *)(v0 + 824);
    v12 = swift_slowAlloc(32, -1);
    v26 = swift_slowAlloc(96, -1);
    v27 = v26;
    *(_DWORD *)v12 = 136315650;
    swift_bridgeObjectRetain(v10);
    *(_QWORD *)(v0 + 800) = sub_10001DF04(v11, v10, &v27);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 800, v0 + 808, v12 + 4, v12 + 12);
    swift_bridgeObjectRelease_n(v10, 3);
    *(_WORD *)(v12 + 12) = 2080;
    *(_QWORD *)(v0 + 808) = sub_10001DF04(0xD000000000000029, 0x80000001000695B0, &v27);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 808, v0 + 816, v12 + 14, v12 + 22);
    *(_WORD *)(v12 + 22) = 2080;
    if (v24)
    {
      v13 = objc_msgSend(v6, "name");
      v14 = static String._unconditionallyBridgeFromObjectiveC(_:)(v13);
      v16 = v15;

    }
    else
    {
      v16 = 0xE900000000000065;
      v14 = 0x6D6F68206C6C756ELL;
    }
    v2 = (_QWORD *)(v0 + 824);
    *(_QWORD *)(v0 + 816) = sub_10001DF04(v14, v16, &v27);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 816, v0 + 824, v12 + 24, v12 + 32);
    swift_bridgeObjectRelease(v16);

    swift_arrayDestroy(v26, 3, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v26, -1, -1);
    swift_slowDealloc(v12, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease_n(*(_QWORD *)(v0 + 840), 2);

  }
  if (!*v2)
    return (*(uint64_t (**)(double *))(v0 + 8))(_swiftEmptyArrayStorage);
  v17 = qword_100081710;
  v18 = v6;
  if (v17 != -1)
    swift_once(&qword_100081710, sub_100052388);
  v19 = qword_10008A790;
  v20 = dword_100081E74;
  v21 = v18;
  v22 = (_QWORD *)swift_task_alloc(v20);
  *(_QWORD *)(v0 + 864) = v22;
  *v22 = v0;
  v22[1] = sub_10004CD48;
  return DataModel.reloadCharacteristics(matching:for:fetchId:)(v19, *(_QWORD *)(v0 + 824), *(_QWORD *)(v0 + 832), *(_QWORD *)(v0 + 840));
}

uint64_t sub_10004CD48(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  void *v3;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 864);
  v3 = *(void **)(*(_QWORD *)v1 + 824);
  *(_QWORD *)(*(_QWORD *)v1 + 872) = a1;
  swift_task_dealloc(v2);

  return swift_task_switch(sub_10004CDAC, 0, 0);
}

uint64_t sub_10004CDAC()
{
  uint64_t v0;
  int8x16_t *v1;
  _OWORD *v2;
  uint64_t v3;
  void *v4;
  __int128 v5;
  id v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int64_t v12;
  unint64_t v13;
  uint64_t v14;
  id v15;
  void *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  _OWORD *v20;
  _OWORD *v21;
  void *v22;
  __int128 v23;
  id v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  id v30;
  void *v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _OWORD *v37;
  _OWORD *v38;
  _QWORD *v39;
  void *v40;
  __int128 v41;
  id v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  id v47;
  void *v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  _OWORD *v55;
  _OWORD *v56;
  void *v57;
  __int128 v58;
  id v59;
  id v60;
  _QWORD *v61;
  uint64_t v62;
  uint64_t v63;
  double *v64;
  _QWORD *v65;
  uint64_t isUniquelyReferenced_nonNull_native;
  char v67;
  uint64_t v68;
  _BOOL8 v69;
  uint64_t v70;
  unint64_t v71;
  char v72;
  uint64_t v73;
  void *v74;
  uint64_t v75;
  __int128 v76;
  __int128 v77;
  id v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  double *v82;
  double *v83;
  uint64_t v84;
  uint64_t i;
  unint64_t v86;
  unint64_t v87;
  char v88;
  uint64_t v89;
  char v90;
  uint64_t v91;
  _BOOL8 v92;
  uint64_t v93;
  unint64_t v94;
  unint64_t v95;
  char v96;
  uint64_t v97;
  uint64_t v98;
  BOOL v99;
  uint64_t v100;
  uint64_t *v101;
  double *v102;
  unint64_t v103;
  unint64_t v104;
  uint64_t v105;
  char v106;
  double *v107;
  uint64_t v108;
  _BOOL8 v109;
  uint64_t v110;
  unint64_t v111;
  char v112;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  char *v117;
  char *v118;
  char *v119;
  unint64_t v120;
  unint64_t v121;
  unint64_t v122;
  char v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  char v128;
  unint64_t v129;
  unint64_t v130;
  int64_t v131;
  int64_t v132;
  uint64_t v133;
  uint64_t v134;
  unint64_t v135;
  uint64_t v136;
  double *v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  unint64_t v144;
  unint64_t v145;
  char v146;
  uint64_t v147;
  uint64_t v148;
  void *v149;
  double *v150;
  uint64_t v151;
  unint64_t v152;
  char v153;
  uint64_t v154;
  unint64_t v155;
  char v156;
  uint64_t v157;
  unint64_t v158;
  char v159;
  uint64_t v160;
  unint64_t v161;
  char v162;
  __int128 v163;
  char *v164;
  unint64_t v165;
  unint64_t v166;
  void *v167;
  char *v168;
  __int128 v169;
  __int128 v170;
  __int128 v171;
  void *v172;
  uint64_t *v173;
  _QWORD *v174;
  id v175;
  unint64_t v176;
  unint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  _QWORD *v182;
  id v183;
  id v184;
  uint64_t v185;
  uint64_t v186;
  _QWORD *v187;
  _QWORD *v188;
  _QWORD *v189;
  _QWORD *v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  unint64_t v194;
  void *v195[2];

  v1 = (int8x16_t *)(v0 + 680);
  v2 = (_OWORD *)(v0 + 184);
  v3 = v0 + 648;
  v182 = (_QWORD *)(v0 + 696);
  v187 = (_QWORD *)(v0 + 688);
  v194 = sub_10005312C((uint64_t)_swiftEmptyArrayStorage);
  v178 = swift_allocObject(&unk_10007E760, 24, 7);
  *(_QWORD *)(v178 + 16) = sub_10004E06C((uint64_t)_swiftEmptyArrayStorage);
  v173 = (uint64_t *)(v178 + 16);
  if (qword_100081718 != -1)
    swift_once(&qword_100081718, sub_100052634);
  v4 = *(void **)(v0 + 824);
  v5 = *(_OWORD *)&qword_10008A7A8;
  *v2 = xmmword_10008A798;
  *(_OWORD *)(v0 + 200) = v5;
  *(_OWORD *)(v0 + 216) = xmmword_10008A7B8;
  *(_QWORD *)(v0 + 232) = qword_10008A7C8;
  v6 = v4;
  v7 = objc_msgSend(v6, "accessories");
  v193 = sub_1000038AC(0, (unint64_t *)&qword_100081F40, HMAccessory_ptr);
  v8 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v7, v193);

  *(_OWORD *)v3 = *v2;
  *(_QWORD *)(v0 + 696) = *(_QWORD *)(v0 + 200);
  *v1 = vextq_s8(*(int8x16_t *)(v0 + 208), *(int8x16_t *)(v0 + 208), 8uLL);
  v9 = *(_QWORD *)(v0 + 224);
  v10 = *(_QWORD *)(v0 + 232);
  v192 = v0;
  sub_1000038E4(v0 + 648);
  sub_10000390C(v182);
  sub_10000390C(v187);
  sub_10000390C(v1);
  sub_10000389C(v9, v10);
  v11 = (uint64_t)sub_10001FE8C(v8, (uint64_t)v2);
  sub_100003934(v3);
  sub_10000395C(v182);
  sub_10000395C(v187);
  sub_10000395C(v1);
  sub_100003984(v9, v10);
  swift_bridgeObjectRelease(v8);

  if ((unint64_t)v11 >> 62)
  {
    if (v11 < 0)
      v35 = v11;
    else
      v35 = v11 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v11);
    v12 = _CocoaArrayWrapper.endIndex.getter(v35);
  }
  else
  {
    v12 = *(_QWORD *)((v11 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain(v11);
  }
  v13 = v178;
  if (v12)
  {
    if (v12 < 1)
      goto LABEL_149;
    v14 = 0;
    do
    {
      if ((v11 & 0xC000000000000001) != 0)
        v15 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v14, v11);
      else
        v15 = *(id *)(v11 + 8 * v14 + 32);
      v16 = v15;
      v17 = *(_QWORD *)(v0 + 872);
      v18 = *(_QWORD *)(v0 + 840);
      v19 = *(_QWORD *)(v0 + 832);
      ++v14;
      v195[0] = v15;
      sub_10004E164(v195, v19, v18, v17, v178, (uint64_t *)&v194);

    }
    while (v12 != v14);
  }
  v3 = v0 + 704;
  v188 = (_QWORD *)(v0 + 720);
  v20 = (_OWORD *)(v0 + 128);
  v21 = (_OWORD *)(v0 + 664);
  swift_bridgeObjectRelease_n(v11, 2);
  if (qword_100081720 != -1)
    swift_once(&qword_100081720, sub_100052680);
  v22 = *(void **)(v0 + 824);
  v23 = *(_OWORD *)&qword_10008A7E0;
  *v20 = xmmword_10008A7D0;
  *(_OWORD *)(v0 + 144) = v23;
  *(_OWORD *)(v0 + 160) = xmmword_10008A7F0;
  *(_QWORD *)(v0 + 176) = qword_10008A800;
  v183 = v22;
  v24 = objc_msgSend(v183, "accessories");
  v25 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v24, v193);

  *v21 = *v20;
  *(_OWORD *)(v0 + 704) = *(_OWORD *)(v0 + 144);
  v26 = *(_QWORD *)(v0 + 168);
  *(_QWORD *)(v0 + 720) = *(_QWORD *)(v0 + 160);
  v27 = *(_QWORD *)(v0 + 176);
  sub_1000038E4(v0 + 664);
  sub_10000390C((_QWORD *)(v0 + 704));
  sub_10000390C((_QWORD *)(v0 + 712));
  sub_10000390C(v188);
  sub_10000389C(v26, v27);
  v28 = (uint64_t)sub_10001FE8C(v25, (uint64_t)v20);
  sub_100003934((uint64_t)v21);
  sub_10000395C((_QWORD *)v3);
  sub_10000395C((_QWORD *)(v0 + 712));
  sub_10000395C(v188);
  sub_100003984(v26, v27);
  swift_bridgeObjectRelease(v25);

  if ((unint64_t)v28 >> 62)
  {
    if (v28 < 0)
      v36 = v28;
    else
      v36 = v28 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v28);
    v12 = _CocoaArrayWrapper.endIndex.getter(v36);
    v13 = v178;
    if (!v12)
      goto LABEL_30;
  }
  else
  {
    v12 = *(_QWORD *)((v28 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain(v28);
    v13 = v178;
    if (!v12)
      goto LABEL_30;
  }
  if (v12 < 1)
    goto LABEL_150;
  v29 = 0;
  do
  {
    if ((v28 & 0xC000000000000001) != 0)
      v30 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v29, v28);
    else
      v30 = *(id *)(v28 + 8 * v29 + 32);
    v31 = v30;
    v32 = *(_QWORD *)(v0 + 872);
    v33 = *(_QWORD *)(v0 + 840);
    v34 = *(_QWORD *)(v0 + 832);
    ++v29;
    v195[0] = v30;
    sub_10004EA44(v195, v34, v33, v32, v13, (uint64_t *)&v194);

  }
  while (v12 != v29);
LABEL_30:
  v189 = (_QWORD *)(v0 + 744);
  v37 = (_OWORD *)(v0 + 72);
  v38 = (_OWORD *)(v0 + 600);
  v39 = (_QWORD *)(v0 + 728);
  swift_bridgeObjectRelease_n(v28, 2);
  if (qword_100081728 != -1)
    swift_once(&qword_100081728, sub_1000526CC);
  v40 = *(void **)(v0 + 824);
  v41 = *(_OWORD *)&qword_10008A818;
  *v37 = xmmword_10008A808;
  *(_OWORD *)(v0 + 88) = v41;
  *(_OWORD *)(v0 + 104) = xmmword_10008A828;
  *(_QWORD *)(v0 + 120) = qword_10008A838;
  v184 = v40;
  v42 = objc_msgSend(v184, "accessories");
  v43 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v42, v193);

  *v38 = *v37;
  *(_OWORD *)v39 = *(_OWORD *)(v0 + 88);
  v44 = *(_QWORD *)(v0 + 112);
  *(_QWORD *)(v0 + 744) = *(_QWORD *)(v0 + 104);
  v3 = *(_QWORD *)(v0 + 120);
  sub_1000038E4(v0 + 600);
  sub_10000390C((_QWORD *)(v0 + 728));
  sub_10000390C((_QWORD *)(v0 + 736));
  sub_10000390C(v189);
  sub_10000389C(v44, v3);
  v45 = (uint64_t)sub_10001FE8C(v43, (uint64_t)v37);
  sub_100003934((uint64_t)v38);
  sub_10000395C(v39);
  sub_10000395C((_QWORD *)(v0 + 736));
  sub_10000395C(v189);
  sub_100003984(v44, v3);
  swift_bridgeObjectRelease(v43);

  if ((unint64_t)v45 >> 62)
  {
    if (v45 < 0)
      v52 = v45;
    else
      v52 = v45 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v45);
    v12 = _CocoaArrayWrapper.endIndex.getter(v52);
    v13 = v178;
    if (v12)
      goto LABEL_34;
  }
  else
  {
    v12 = *(_QWORD *)((v45 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain(v45);
    v13 = v178;
    if (v12)
    {
LABEL_34:
      if (v12 < 1)
        goto LABEL_151;
      v46 = 0;
      do
      {
        if ((v45 & 0xC000000000000001) != 0)
          v47 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v46, v45);
        else
          v47 = *(id *)(v45 + 8 * v46 + 32);
        v48 = v47;
        v49 = *(_QWORD *)(v0 + 872);
        v50 = *(_QWORD *)(v0 + 840);
        v51 = *(_QWORD *)(v0 + 832);
        ++v46;
        v195[0] = v47;
        sub_10004F518(v195, v51, v50, v49, v13, (uint64_t *)&v194);

      }
      while (v12 != v46);
    }
  }
  v53 = v0 + 752;
  v54 = v0 + 760;
  v190 = (_QWORD *)(v0 + 768);
  v55 = (_OWORD *)(v0 + 240);
  v56 = (_OWORD *)(v0 + 616);
  swift_bridgeObjectRelease_n(v45, 2);
  if (qword_100081730 != -1)
    swift_once(&qword_100081730, sub_100052718);
  v176 = *(_QWORD *)(v0 + 840);
  v179 = *(_QWORD *)(v0 + 872);
  v185 = *(_QWORD *)(v0 + 832);
  v57 = *(void **)(v0 + 824);
  v58 = *(_OWORD *)&qword_10008A850;
  *v55 = xmmword_10008A840;
  *(_OWORD *)(v0 + 256) = v58;
  *(_OWORD *)(v0 + 272) = xmmword_10008A860;
  *(_QWORD *)(v0 + 288) = qword_10008A870;
  v59 = v57;
  v60 = objc_msgSend(v59, "accessories");
  v61 = (_QWORD *)static Array._unconditionallyBridgeFromObjectiveC(_:)(v60, v193);

  *v56 = *v55;
  *(_OWORD *)(v0 + 752) = *(_OWORD *)(v0 + 256);
  v62 = *(_QWORD *)(v0 + 280);
  *(_QWORD *)(v0 + 768) = *(_QWORD *)(v0 + 272);
  v63 = *(_QWORD *)(v0 + 288);
  sub_1000038E4(v0 + 616);
  sub_10000390C((_QWORD *)(v0 + 752));
  sub_10000390C((_QWORD *)(v0 + 760));
  sub_10000390C(v190);
  sub_10000389C(v62, v63);
  v64 = sub_10001FE8C((uint64_t)v61, (uint64_t)v55);
  sub_100003934((uint64_t)v56);
  sub_10000395C((_QWORD *)v53);
  sub_10000395C((_QWORD *)v54);
  sub_10000395C(v190);
  sub_100003984(v62, v63);
  swift_bridgeObjectRelease(v61);

  swift_bridgeObjectRetain(v176);
  swift_bridgeObjectRetain(v179);
  v3 = (uint64_t)sub_100052BE8(0, (uint64_t)v64, v185, v176, v179, v178);
  swift_bridgeObjectRelease(v179);
  swift_bridgeObjectRelease(v176);
  swift_bridgeObjectRelease(v64);
  v65 = (_QWORD *)v194;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v194);
  v195[0] = v65;
  v13 = sub_10000A65C(3u);
  v68 = v65[2];
  v69 = (v67 & 1) == 0;
  v70 = v68 + v69;
  if (!__OFADD__(v68, v69))
  {
    LOBYTE(v12) = v67;
    if (v65[3] >= v70)
    {
      if ((_DWORD)isUniquelyReferenced_nonNull_native)
        goto LABEL_51;
      goto LABEL_154;
    }
    sub_10000B78C(v70, isUniquelyReferenced_nonNull_native);
    v65 = v195[0];
    v71 = sub_10000A65C(3u);
    if ((v12 & 1) == (v72 & 1))
    {
      v13 = v71;
      goto LABEL_51;
    }
    return KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for SecurityIssue);
  }
  __break(1u);
LABEL_147:
  swift_once(&qword_100081738, sub_10005275C);
  while (1)
  {
    v177 = *(_QWORD *)(v54 + 840);
    v180 = *(_QWORD *)(v54 + 872);
    v186 = *(_QWORD *)(v54 + 832);
    v74 = *(void **)(v54 + 824);
    v75 = qword_10008A8A8;
    v77 = xmmword_10008A888;
    v76 = *(_OWORD *)&qword_10008A898;
    *(_OWORD *)v53 = xmmword_10008A878;
    *(_OWORD *)(v53 + 16) = v77;
    *(_OWORD *)(v53 + 32) = v76;
    *(_QWORD *)(v53 + 48) = v75;
    v175 = v74;
    v78 = objc_msgSend(v175, "accessories");
    v79 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v78, v193);

    *(_OWORD *)v64 = *(_OWORD *)v53;
    *(_OWORD *)v61 = *(_OWORD *)(v54 + 32);
    v80 = *(_QWORD *)(v54 + 56);
    *(_QWORD *)(v54 + 792) = *(_QWORD *)(v54 + 48);
    v81 = *(_QWORD *)(v54 + 64);
    sub_1000038E4((uint64_t)v64);
    sub_10000390C(v61);
    sub_10000390C(v174);
    sub_10000390C(v190);
    sub_10000389C(v80, v81);
    v3 = v79;
    v193 = (uint64_t)sub_10001FE8C(v79, v53);
    sub_100003934((uint64_t)v64);
    sub_10000395C(v61);
    sub_10000395C(v174);
    sub_10000395C(v190);
    sub_100003984(v80, v81);
    swift_bridgeObjectRelease(v79);

    swift_bridgeObjectRetain(v177);
    swift_bridgeObjectRetain(v180);
    v82 = _swiftEmptyArrayStorage;
    v83 = sub_100052D20(_swiftEmptyArrayStorage, v193, v186, v177, v180, v178);
    swift_bridgeObjectRelease_n(v180, 2);
    swift_bridgeObjectRelease(v177);
    swift_bridgeObjectRelease(v193);
    v84 = *((_QWORD *)v83 + 2);
    if (v84)
    {
      swift_bridgeObjectRetain(v83);
      for (i = 0; i != v84; ++i)
      {
        if (*(_QWORD *)&v83[i + 4] == 4)
        {
          v88 = swift_isUniquelyReferenced_nonNull_native(v82);
          v195[0] = v82;
          if ((v88 & 1) == 0)
          {
            sub_10001E534(0, *((_QWORD *)v82 + 2) + 1, 1);
            v82 = (double *)v195[0];
          }
          v87 = *((_QWORD *)v82 + 2);
          v86 = *((_QWORD *)v82 + 3);
          if (v87 >= v86 >> 1)
          {
            sub_10001E534(v86 > 1, v87 + 1, 1);
            v82 = (double *)v195[0];
          }
          *((_QWORD *)v82 + 2) = v87 + 1;
          *(_QWORD *)&v82[v87 + 4] = 4;
        }
      }
      swift_bridgeObjectRelease(v83);
      v65 = (_QWORD *)v194;
    }
    v89 = *((_QWORD *)v82 + 2);
    swift_release(v82);
    v13 = swift_isUniquelyReferenced_nonNull_native(v65);
    v195[0] = v65;
    v12 = sub_10000A65C(0);
    v91 = v65[2];
    v92 = (v90 & 1) == 0;
    v93 = v91 + v92;
    if (__OFADD__(v91, v92))
    {
      __break(1u);
LABEL_149:
      __break(1u);
LABEL_150:
      __break(1u);
LABEL_151:
      __break(1u);
LABEL_152:
      __break(1u);
      goto LABEL_153;
    }
    LOBYTE(v94) = v90;
    if (v65[3] < v93)
    {
      sub_10000B78C(v93, v13);
      v65 = v195[0];
      v95 = sub_10000A65C(0);
      if ((v94 & 1) == (v96 & 1))
      {
        v12 = v95;
        goto LABEL_69;
      }
      return KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for SecurityIssue);
    }
    if (!(_DWORD)v13)
    {
LABEL_157:
      sub_10000AFBC();
      v65 = v195[0];
    }
LABEL_69:
    v194 = (unint64_t)v65;
    swift_bridgeObjectRelease(0x8000000000000000);
    swift_bridgeObjectRetain(v65);
    if ((v94 & 1) == 0)
      sub_10000C588(v12, 0, 0, v65);
    v97 = v65[7];
    swift_bridgeObjectRelease(v65);
    v98 = *(_QWORD *)(v97 + 8 * v12);
    v99 = __OFADD__(v98, v89);
    v100 = v98 + v89;
    if (v99)
      goto LABEL_152;
    *(_QWORD *)(v97 + 8 * v12) = v100;
    if (v84)
    {
      v101 = (uint64_t *)(v83 + 4);
      v102 = _swiftEmptyArrayStorage;
      v13 = 3;
      do
      {
        v105 = *v101++;
        if (v105 == 3)
        {
          v106 = swift_isUniquelyReferenced_nonNull_native(v102);
          v195[0] = v102;
          if ((v106 & 1) == 0)
          {
            sub_10001E534(0, *((_QWORD *)v102 + 2) + 1, 1);
            v102 = (double *)v195[0];
          }
          v104 = *((_QWORD *)v102 + 2);
          v103 = *((_QWORD *)v102 + 3);
          if (v104 >= v103 >> 1)
          {
            sub_10001E534(v103 > 1, v104 + 1, 1);
            v102 = (double *)v195[0];
          }
          *((_QWORD *)v102 + 2) = v104 + 1;
          *(_QWORD *)&v102[v104 + 4] = 3;
        }
        --v84;
      }
      while (v84);
      v65 = (_QWORD *)v194;
    }
    else
    {
      v102 = _swiftEmptyArrayStorage;
    }
    swift_bridgeObjectRelease(v83);
    v89 = *((_QWORD *)v102 + 2);
    swift_release(v102);
    v94 = swift_isUniquelyReferenced_nonNull_native(v65);
    v195[0] = v65;
    v12 = sub_10000A65C(5u);
    v108 = v65[2];
    v109 = (v107 & 1) == 0;
    v110 = v108 + v109;
    if (!__OFADD__(v108, v109))
      break;
LABEL_153:
    __break(1u);
LABEL_154:
    sub_10000AFBC();
    v65 = v195[0];
LABEL_51:
    v174 = (_QWORD *)(v192 + 784);
    v190 = (_QWORD *)(v192 + 792);
    v194 = (unint64_t)v65;
    swift_bridgeObjectRelease(0x8000000000000000);
    swift_bridgeObjectRetain(v65);
    if ((v12 & 1) == 0)
      sub_10000C588(v13, 3, 0, v65);
    v54 = v192;
    v53 = v192 + 16;
    v64 = (double *)(v192 + 632);
    v61 = (_QWORD *)(v192 + 776);
    v73 = v65[7];
    swift_bridgeObjectRelease(v65);
    *(_QWORD *)(v73 + 8 * v13) = v3;
    if (qword_100081738 != -1)
      goto LABEL_147;
  }
  v83 = v107;
  if (v65[3] >= v110)
  {
    if ((v94 & 1) == 0)
    {
      sub_10000AFBC();
      v65 = v195[0];
    }
  }
  else
  {
    sub_10000B78C(v110, v94);
    v65 = v195[0];
    v111 = sub_10000A65C(5u);
    if ((v83 & 1) != (v112 & 1))
      return KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for SecurityIssue);
    v12 = v111;
  }
  v194 = (unint64_t)v65;
  swift_bridgeObjectRelease(0x8000000000000000);
  swift_bridgeObjectRetain(v65);
  if ((v83 & 1) == 0)
    sub_10000C588(v12, 5, 0, v65);
  v114 = v65[7];
  swift_bridgeObjectRelease(v65);
  v115 = *(_QWORD *)(v114 + 8 * v12);
  v99 = __OFADD__(v115, v89);
  v116 = v115 + v89;
  if (v99)
  {
    __break(1u);
    goto LABEL_156;
  }
  *(_QWORD *)(v114 + 8 * v12) = v116;
  v3 = 7;
  v117 = (char *)_swiftEmptyArrayStorage;
  v181 = v192 + 464;
  v118 = &byte_10007B268;
  do
  {
    v120 = *v118;
    v193 = (uint64_t)(v118 + 1);
    v121 = v194;
    if (*(_QWORD *)(v194 + 16) && (v122 = sub_10000A65C(v120), (v123 & 1) != 0))
      v124 = *(_QWORD *)(*(_QWORD *)(v121 + 56) + 8 * v122);
    else
      v124 = 0;
    sub_1000528B4(v120, v124, v181);
    v125 = *(_QWORD *)(v192 + 464);
    v89 = *(_QWORD *)(v192 + 472);
    v126 = *(_QWORD *)(v192 + 488);
    v191 = *(_QWORD *)(v192 + 480);
    v127 = *(_QWORD *)(v192 + 496);
    v13 = *(_QWORD *)(v192 + 504);
    v128 = *(_BYTE *)(v192 + 512);
    sub_1000491D4(v181, v192 + 352, &qword_1000830F8);
    if (*(_QWORD *)(v192 + 360))
    {
      if ((swift_isUniquelyReferenced_nonNull_native(v117) & 1) == 0)
        v117 = sub_10000A030(0, *((_QWORD *)v117 + 2) + 1, 1, v117);
      v130 = *((_QWORD *)v117 + 2);
      v129 = *((_QWORD *)v117 + 3);
      if (v130 >= v129 >> 1)
        v117 = sub_10000A030((char *)(v129 > 1), v130 + 1, 1, v117);
      *((_QWORD *)v117 + 2) = v130 + 1;
      v119 = &v117[56 * v130];
      *((_QWORD *)v119 + 4) = v125;
      *((_QWORD *)v119 + 5) = v89;
      *((_QWORD *)v119 + 6) = v191;
      *((_QWORD *)v119 + 7) = v126;
      *((_QWORD *)v119 + 8) = v127;
      *((_QWORD *)v119 + 9) = v13;
      v119[80] = v128 & 1;
    }
    --v3;
    v118 = (char *)v193;
  }
  while (v3);
  v131 = sub_10004C974(*(_QWORD *)(v192 + 848), (uint64_t)v117);
  v12 = v132;
  v134 = v133;
  v94 = v135;
  v84 = v178;
  if ((v135 & 1) == 0)
  {
LABEL_106:
    v83 = sub_100022830(v131, v12, v134, v94);
    goto LABEL_113;
  }
  v13 = type metadata accessor for __ContiguousArrayStorageBase(0);
  v136 = swift_unknownObjectRetain_n(v131, 2);
  v137 = (double *)swift_dynamicCastClass(v136, v13);
  if (!v137)
  {
    swift_unknownObjectRelease(v131);
    v137 = _swiftEmptyArrayStorage;
  }
  v138 = *((_QWORD *)v137 + 2);
  v139 = swift_release(v137);
  if (__OFSUB__(v94 >> 1, v134))
  {
    __break(1u);
    goto LABEL_159;
  }
  v139 = v131;
  if (v138 != (v94 >> 1) - v134)
  {
LABEL_159:
    swift_unknownObjectRelease(v139);
    goto LABEL_106;
  }
  v83 = (double *)swift_dynamicCastClass(v131, v13);
  if (!v83)
  {
    swift_unknownObjectRelease(v131);
    v83 = _swiftEmptyArrayStorage;
  }
LABEL_113:
  v140 = *(_QWORD *)(v192 + 848);
  swift_unknownObjectRelease(v131);
  v141 = *((_QWORD *)v83 + 2);
  v99 = __OFSUB__(v140, v141);
  v142 = v140 - v141;
  if (v99)
  {
LABEL_156:
    __break(1u);
    goto LABEL_157;
  }
  if (v142 <= 0 || (swift_beginAccess(v173, v192 + 576, 0, 0), v143 = *v173, (v144 = *(_QWORD *)(*v173 + 16)) == 0))
  {
    swift_release(v178);

    goto LABEL_145;
  }
  if (v142 >= v144)
  {
    v149 = *(void **)(v192 + 824);
    v150 = sub_10004C7F0((uint64_t)&off_10007B270, v173);
    v195[0] = v83;
    swift_retain(v83);
    v151 = swift_bridgeObjectRetain(v150);
    sub_1000229CC(v151);

    swift_bridgeObjectRelease(v150);
    swift_release(v83);
    swift_release(v178);
    v83 = (double *)v195[0];
    goto LABEL_145;
  }
  v145 = sub_10000A6B4(0x23u);
  if ((v146 & 1) == 0)
  {
    v147 = 0;
    v148 = *(_QWORD *)(v143 + 16);
    if (!v148)
      goto LABEL_125;
LABEL_123:
    v152 = sub_10000A6B4(0x13u);
    if ((v153 & 1) != 0)
    {
      v148 = *(_QWORD *)(*(_QWORD *)(v143 + 56) + 8 * v152);
      goto LABEL_125;
    }
LABEL_126:
    v154 = *(_QWORD *)(v143 + 16);
    if (v154)
    {
      v155 = sub_10000A6B4(0xEu);
      if ((v156 & 1) == 0)
        goto LABEL_130;
      v154 = *(_QWORD *)(*(_QWORD *)(v143 + 56) + 8 * v155);
    }
    v99 = __OFADD__(v147, v154);
    v147 += v154;
    if (v99)
      goto LABEL_162;
LABEL_130:
    v157 = *(_QWORD *)(v143 + 16);
    if (v157)
    {
      v158 = sub_10000A6B4(0x1Eu);
      if ((v159 & 1) == 0)
      {
LABEL_134:
        v160 = *(_QWORD *)(v143 + 16);
        if (v160)
        {
          v161 = sub_10000A6B4(0x31u);
          if ((v162 & 1) != 0)
            v160 = *(_QWORD *)(*(_QWORD *)(v143 + 56) + 8 * v161);
          else
            v160 = 0;
        }
        if (__OFADD__(v147, v160))
        {
          __break(1u);
          goto LABEL_161;
        }
        v143 = v192 + 408;
        sub_1000528B4(6uLL, v147 + v160, v192 + 408);
        sub_1000491D4(v192 + 408, v192 + 296, &qword_1000830F8);
        if (*(_QWORD *)(v192 + 304))
        {
          v94 = v192 + 520;
          v163 = *(_OWORD *)(v192 + 312);
          *(_OWORD *)(v192 + 520) = *(_OWORD *)(v192 + 296);
          *(_OWORD *)(v192 + 536) = v163;
          *(_OWORD *)(v192 + 552) = *(_OWORD *)(v192 + 328);
          *(_BYTE *)(v192 + 568) = *(_BYTE *)(v192 + 344);
          swift_retain(v83);
          sub_1000538C0(v192 + 408, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_100053884);
          v164 = (char *)v83;
          if ((swift_isUniquelyReferenced_nonNull_native(v83) & 1) == 0)
            goto LABEL_164;
          goto LABEL_141;
        }
        v172 = *(void **)(v192 + 824);
        swift_release(v178);

LABEL_145:
        swift_bridgeObjectRelease(v194);
        return (*(uint64_t (**)(double *))(v192 + 8))(v83);
      }
      v157 = *(_QWORD *)(*(_QWORD *)(v143 + 56) + 8 * v158);
    }
    v99 = __OFADD__(v147, v157);
    v147 += v157;
    if (v99)
      goto LABEL_163;
    goto LABEL_134;
  }
  v147 = *(_QWORD *)(*(_QWORD *)(v143 + 56) + 8 * v145);
  v148 = *(_QWORD *)(v143 + 16);
  if (v148)
    goto LABEL_123;
LABEL_125:
  v99 = __OFADD__(v147, v148);
  v147 += v148;
  if (!v99)
    goto LABEL_126;
LABEL_161:
  __break(1u);
LABEL_162:
  __break(1u);
LABEL_163:
  __break(1u);
LABEL_164:
  v164 = sub_10000A030(0, *((_QWORD *)v83 + 2) + 1, 1, (char *)v83);
LABEL_141:
  v166 = *((_QWORD *)v164 + 2);
  v165 = *((_QWORD *)v164 + 3);
  if (v166 >= v165 >> 1)
    v164 = sub_10000A030((char *)(v165 > 1), v166 + 1, 1, v164);
  v167 = *(void **)(v192 + 824);
  *((_QWORD *)v164 + 2) = v166 + 1;
  v168 = &v164[56 * v166];
  v169 = *(_OWORD *)v94;
  v170 = *(_OWORD *)(v94 + 16);
  v171 = *(_OWORD *)(v94 + 32);
  v168[80] = *(_BYTE *)(v94 + 48);
  *((_OWORD *)v168 + 3) = v170;
  *((_OWORD *)v168 + 4) = v171;
  *((_OWORD *)v168 + 2) = v169;

  sub_1000538C0(v143, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1000538FC);
  swift_release(v83);
  swift_release(v178);
  swift_bridgeObjectRelease(v194);
  return (*(uint64_t (**)(char *))(v192 + 8))(v164);
}

unint64_t sub_10004E06C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  unsigned __int8 v7;
  uint64_t v8;
  unint64_t result;
  char v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;

  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
  {
    v4 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_100003704(&qword_100081C98);
  v3 = static _DictionaryStorage.allocate(capacity:)(v2);
  v4 = (_QWORD *)v3;
  v5 = *(_QWORD *)(a1 + 16);
  if (!v5)
  {
LABEL_9:
    swift_bridgeObjectRelease(a1);
    return (unint64_t)v4;
  }
  swift_retain(v3);
  v6 = (_QWORD *)(a1 + 40);
  while (1)
  {
    v7 = *((_BYTE *)v6 - 8);
    v8 = *v6;
    result = sub_10000A6B4(v7);
    if ((v10 & 1) != 0)
      break;
    *(_QWORD *)((char *)v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    *(_BYTE *)(v4[6] + result) = v7;
    *(_QWORD *)(v4[7] + 8 * result) = v8;
    v11 = v4[2];
    v12 = __OFADD__(v11, 1);
    v13 = v11 + 1;
    if (v12)
      goto LABEL_11;
    v6 += 2;
    v4[2] = v13;
    if (!--v5)
    {
      swift_release(v4);
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

void sub_10004E164(void **a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6)
{
  char v6;
  void *v10;
  uint64_t v11;
  id v12;
  id v13;
  NSObject *v14;
  os_log_type_t v15;
  uint64_t v16;
  uint64_t v17;
  id v18;
  void *v19;
  id v20;
  id v21;
  unint64_t v22;
  unint64_t v23;
  id v24;
  id v25;
  id v26;
  uint64_t v27;
  NSString v28;
  uint64_t v29;
  id v30;
  id v31;
  uint64_t v32;
  id v33;
  id v34;
  uint64_t isUniquelyReferenced_nonNull_native;
  uint64_t v36;
  char v37;
  unint64_t v38;
  uint64_t v39;
  _BOOL8 v40;
  uint64_t v41;
  unint64_t v42;
  char v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t v46;
  char v47;
  unint64_t v48;
  uint64_t v49;
  _BOOL8 v50;
  uint64_t v51;
  unint64_t v52;
  char v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  BOOL v58;
  uint64_t v59;
  uint64_t v60;
  NSObject *v61;
  os_log_type_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  char v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  os_log_type_t v73;
  void *v74;
  uint64_t v75;
  _QWORD *v76;
  void *v79;
  __int128 v80;
  __int128 v81;
  uint64_t v82;
  _BYTE v83[16];
  uint64_t v84;
  id v85;

  v10 = *a1;
  if (qword_100081690 != -1)
    swift_once(&qword_100081690, sub_100022538);
  v11 = type metadata accessor for Logger(0);
  sub_100003884(v11, (uint64_t)static DataModel.widgetLoggerSecurity);
  v12 = v10;
  swift_bridgeObjectRetain_n(a3, 2);
  v13 = v12;
  v14 = Logger.logObject.getter(v13);
  v15 = static os_log_type_t.default.getter();
  if (!os_log_type_enabled(v14, v15))
  {

    swift_bridgeObjectRelease_n(a3, 2);
    goto LABEL_18;
  }
  v73 = v15;
  v75 = a4;
  v16 = 0x6E776F6E6B6E75;
  v17 = swift_slowAlloc(42, -1);
  v76 = (_QWORD *)swift_slowAlloc(16, -1);
  v74 = (void *)swift_slowAlloc(64, -1);
  v85 = v74;
  *(_DWORD *)v17 = 136315906;
  swift_bridgeObjectRetain(a3);
  v82 = sub_10001DF04(a2, a3, (uint64_t *)&v85);
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v82, v83, v17 + 4, v17 + 12);
  swift_bridgeObjectRelease_n(a3, 3);
  *(_WORD *)(v17 + 12) = 2080;
  v18 = objc_msgSend(v13, "service");
  if (v18
    && (v19 = v18, v20 = objc_msgSend(v18, "accessory"), v19, v20))
  {
    v21 = objc_msgSend(v20, "name");

    v16 = static String._unconditionallyBridgeFromObjectiveC(_:)(v21);
    v23 = v22;

  }
  else
  {
    v23 = 0xE700000000000000;
  }
  v82 = sub_10001DF04(v16, v23, (uint64_t *)&v85);
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v82, v83, v17 + 14, v17 + 22);

  swift_bridgeObjectRelease(v23);
  *(_WORD *)(v17 + 22) = 2112;
  v82 = (uint64_t)v13;
  v24 = v13;
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v82, v83, v17 + 24, v17 + 32);
  *v76 = v13;

  *(_WORD *)(v17 + 32) = 2112;
  v25 = objc_msgSend(v24, "value");
  if (v25)
  {
    v26 = v25;
    _bridgeAnyObjectToAny(_:)(&v80, v25);
    swift_unknownObjectRelease(v26);
  }
  else
  {
    v80 = 0u;
    v81 = 0u;
  }
  sub_1000491D4((uint64_t)&v80, (uint64_t)&v82, &qword_1000817D8);
  if (!v84)
  {
    sub_10000E534((uint64_t)&v82);
    goto LABEL_16;
  }
  v27 = sub_1000038AC(0, &qword_100081E18, NSObject_ptr);
  if ((swift_dynamicCast(&v79, &v82, (char *)&type metadata for Any + 8, v27, 6) & 1) == 0)
  {
LABEL_16:
    v28 = String._bridgeToObjectiveC()();
    goto LABEL_17;
  }
  v28 = v79;
LABEL_17:
  v82 = (uint64_t)v28;
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v82, v83, v17 + 34, v17 + 42);
  v6 = (char)v76;
  v76[1] = v28;

  _os_log_impl((void *)&_mh_execute_header, v14, v73, "{%s} garage door opener '%s' %@ cached value is %@", (uint8_t *)v17, 0x2Au);
  v29 = sub_100003704((uint64_t *)&unk_100081FD0);
  swift_arrayDestroy(v76, 2, v29);
  swift_slowDealloc(v76, -1, -1);
  swift_arrayDestroy(v74, 2, (char *)&type metadata for Any + 8);
  swift_slowDealloc(v74, -1, -1);
  swift_slowDealloc(v17, -1, -1);

  a4 = v75;
LABEL_18:
  if ((sub_100036838(v13, a4) & 1) == 0)
  {
    v30 = objc_msgSend(v13, "value");
    if (v30)
    {
      v31 = v30;
      _bridgeAnyObjectToAny(_:)(&v80, v30);
      swift_unknownObjectRelease(v31);
    }
    else
    {
      v80 = 0u;
      v81 = 0u;
    }
    sub_1000491D4((uint64_t)&v80, (uint64_t)&v82, &qword_1000817D8);
    if (v84)
    {
      v32 = sub_1000038AC(0, &qword_100081E10, NSNumber_ptr);
      if ((swift_dynamicCast(&v85, &v82, (char *)&type metadata for Any + 8, v32, 6) & 1) != 0)
      {
        v33 = v85;
        v34 = objc_msgSend(v85, "integerValue");

        if (v34 == (id)1)
          return;
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*a6);
        v82 = *a6;
        v36 = v82;
        *a6 = 0x8000000000000000;
        v38 = sub_10000A65C(1u);
        v39 = *(_QWORD *)(v36 + 16);
        v40 = (v37 & 1) == 0;
        v41 = v39 + v40;
        if (__OFADD__(v39, v40))
        {
          __break(1u);
          goto LABEL_55;
        }
        LOBYTE(a4) = v37;
        if (*(_QWORD *)(v36 + 24) >= v41)
        {
          if ((isUniquelyReferenced_nonNull_native & 1) == 0)
            goto LABEL_56;
          goto LABEL_47;
        }
        sub_10000B78C(v41, isUniquelyReferenced_nonNull_native);
        v36 = v82;
        v42 = sub_10000A65C(1u);
        if ((a4 & 1) == (v43 & 1))
        {
          v38 = v42;
          while (1)
          {
LABEL_47:
            v69 = *a6;
            *a6 = v36;
            swift_bridgeObjectRelease(v69);
            v70 = *a6;
            swift_bridgeObjectRetain(*a6);
            if ((a4 & 1) == 0)
              sub_10000C588(v38, 1, 0, v70);
            a4 = *(_QWORD *)(v70 + 56);
            swift_bridgeObjectRelease(v70);
            v71 = *(_QWORD *)(a4 + 8 * v38);
            v58 = __OFADD__(v71, 1);
            v72 = v71 + 1;
            if (!v58)
              break;
LABEL_55:
            __break(1u);
LABEL_56:
            sub_10000AFBC();
            v36 = v82;
          }
          *(_QWORD *)(a4 + 8 * v38) = v72;
          return;
        }
LABEL_58:
        KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for SecurityIssue);
        __break(1u);
        return;
      }
    }
    else
    {
      sub_10000E534((uint64_t)&v82);
    }
  }
  v44 = (_QWORD *)(a5 + 16);
  swift_beginAccess(a5 + 16, &v82, 33, 0);
  v45 = swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(a5 + 16));
  *(_QWORD *)&v80 = *(_QWORD *)(a5 + 16);
  v46 = v80;
  *(_QWORD *)(a5 + 16) = 0x8000000000000000;
  v48 = sub_10000A6B4(0x13u);
  v49 = *(_QWORD *)(v46 + 16);
  v50 = (v47 & 1) == 0;
  v51 = v49 + v50;
  if (__OFADD__(v49, v50))
  {
    __break(1u);
    goto LABEL_52;
  }
  v6 = v47;
  if (*(_QWORD *)(v46 + 24) >= v51)
  {
    if ((v45 & 1) == 0)
      goto LABEL_53;
  }
  else
  {
    sub_10000BA50(v51, v45);
    v46 = v80;
    v52 = sub_10000A6B4(0x13u);
    if ((v6 & 1) != (v53 & 1))
    {
      KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for ServiceKind);
      __break(1u);
      goto LABEL_58;
    }
    v48 = v52;
  }
  while (1)
  {
    v54 = *v44;
    *v44 = v46;
    swift_bridgeObjectRelease(v54);
    v55 = *v44;
    swift_bridgeObjectRetain(*v44);
    if ((v6 & 1) == 0)
      sub_10000C588(v48, 19, 0, v55);
    v56 = *(_QWORD *)(v55 + 56);
    v57 = *(_QWORD *)(v56 + 8 * v48);
    v58 = __OFADD__(v57, 1);
    v59 = v57 + 1;
    if (!v58)
      break;
LABEL_52:
    __break(1u);
LABEL_53:
    sub_10000AFC8();
    v46 = v80;
  }
  *(_QWORD *)(v56 + 8 * v48) = v59;
  swift_endAccess(&v82);
  swift_bridgeObjectRelease(v55);
  swift_bridgeObjectRetain_n(a3, 2);
  v60 = swift_retain_n(a5, 2);
  v61 = Logger.logObject.getter(v60);
  v62 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v61, v62))
  {
    v63 = swift_slowAlloc(22, -1);
    v64 = swift_slowAlloc(32, -1);
    *(_QWORD *)&v80 = v64;
    *(_DWORD *)v63 = 136315394;
    swift_bridgeObjectRetain(a3);
    v82 = sub_10001DF04(a2, a3, (uint64_t *)&v80);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v82, v83, v63 + 4, v63 + 12);
    swift_bridgeObjectRelease_n(a3, 3);
    *(_WORD *)(v63 + 12) = 2048;
    swift_beginAccess(v44, &v82, 32, 0);
    v65 = *v44;
    if (*(_QWORD *)(*v44 + 16) && (v66 = sub_10000A6B4(0x13u), (v67 & 1) != 0))
      v68 = *(_QWORD *)(*(_QWORD *)(v65 + 56) + 8 * v66);
    else
      v68 = 0;
    swift_endAccess(&v82);
    swift_release(a5);
    v82 = v68;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v82, v83, v63 + 14, v63 + 22);
    swift_release(a5);
    _os_log_impl((void *)&_mh_execute_header, v61, v62, "{%s} non-responsive garage door opener count: %ld", (uint8_t *)v63, 0x16u);
    swift_arrayDestroy(v64, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v64, -1, -1);
    swift_slowDealloc(v63, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n(a3, 2);
    swift_release_n(a5, 2);
  }
}

void sub_10004EA44(void **a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6)
{
  void *v9;
  uint64_t v10;
  id v11;
  id v12;
  NSObject *v13;
  os_log_type_t v14;
  __objc2_prot_list *v15;
  uint64_t v16;
  id v17;
  void *v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  char v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  id v29;
  void *v30;
  id v31;
  id v32;
  unint64_t v33;
  unint64_t v34;
  id v35;
  id v36;
  uint64_t v37;
  NSString v38;
  uint64_t v39;
  id v40;
  void *v41;
  id v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unsigned int v46;
  uint64_t v47;
  id v48;
  id v49;
  uint64_t v50;
  id v51;
  uint64_t v52;
  uint64_t isUniquelyReferenced_nonNull_native;
  uint64_t v54;
  char v55;
  unint64_t v56;
  uint64_t v57;
  _BOOL8 v58;
  uint64_t v59;
  unint64_t v60;
  char v61;
  unint64_t v62;
  _QWORD *v63;
  uint64_t v64;
  uint64_t v65;
  char v66;
  unint64_t v67;
  uint64_t v68;
  _BOOL8 v69;
  uint64_t v70;
  unint64_t v71;
  char v72;
  unint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  BOOL v78;
  uint64_t v79;
  uint64_t v80;
  NSObject *v81;
  os_log_type_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t v86;
  char v87;
  uint64_t v88;
  _QWORD *v89;
  char v90;
  uint64_t v91;
  _BOOL8 v92;
  uint64_t v93;
  unint64_t v94;
  char v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  _QWORD *v102;
  os_log_type_t v103;
  void *v104;
  uint64_t *v105;
  NSObject *v106;
  unint64_t v107;
  uint64_t v108;
  void *v111;
  __int128 v112;
  __int128 v113;
  uint64_t v114;
  _BYTE v115[16];
  uint64_t v116;
  id v117;

  v9 = *a1;
  if (qword_100081690 != -1)
    swift_once(&qword_100081690, sub_100022538);
  v10 = type metadata accessor for Logger(0);
  sub_100003884(v10, (uint64_t)static DataModel.widgetLoggerSecurity);
  v11 = v9;
  swift_bridgeObjectRetain_n(a3, 2);
  v12 = v11;
  v13 = Logger.logObject.getter(v12);
  v14 = static os_log_type_t.default.getter();
  v15 = &DataModel;
  if (!os_log_type_enabled(v13, v14))
  {

    swift_bridgeObjectRelease_n(a3, 2);
    goto LABEL_24;
  }
  v103 = v14;
  v105 = a6;
  v106 = v13;
  v16 = swift_slowAlloc(42, -1);
  v102 = (_QWORD *)swift_slowAlloc(8, -1);
  v104 = (void *)swift_slowAlloc(96, -1);
  v117 = v104;
  *(_DWORD *)v16 = 136315906;
  swift_bridgeObjectRetain(a3);
  v114 = sub_10001DF04(a2, a3, (uint64_t *)&v117);
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v114, v115, v16 + 4, v16 + 12);
  v107 = a3;
  swift_bridgeObjectRelease_n(a3, 3);
  *(_WORD *)(v16 + 12) = 2080;
  v17 = objc_msgSend(v12, "service");
  if (v17)
  {
    v18 = v17;
    v19 = objc_msgSend(v17, "serviceType");
    v20 = static String._unconditionallyBridgeFromObjectiveC(_:)(v19);
    v22 = v21;

    v15 = &DataModel;
    v23 = _s20HomeWidgetLockScreen11ServiceKindO8rawValueACSgSS_tcfC_0(v20, v22);

    if (v23 == 51)
      v24 = 0;
    else
      v24 = v23;
    ServiceKind.localizedDescription.getter(v24);
    v27 = v26;
  }
  else
  {
    v27 = 0xE300000000000000;
    v25 = 7104878;
  }
  v28 = 0x6E776F6E6B6E75;
  v114 = sub_10001DF04(v25, v27, (uint64_t *)&v117);
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v114, v115, v16 + 14, v16 + 22);

  swift_bridgeObjectRelease(v27);
  *(_WORD *)(v16 + 22) = 2080;
  v29 = objc_msgSend(v12, (SEL)v15[365].count);
  if (v29
    && (v30 = v29, v31 = objc_msgSend(v29, "accessory"), v30, v31))
  {
    v32 = objc_msgSend(v31, "name");

    v28 = static String._unconditionallyBridgeFromObjectiveC(_:)(v32);
    v34 = v33;

  }
  else
  {
    v34 = 0xE700000000000000;
  }
  v114 = sub_10001DF04(v28, v34, (uint64_t *)&v117);
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v114, v115, v16 + 24, v16 + 32);

  swift_bridgeObjectRelease(v34);
  *(_WORD *)(v16 + 32) = 2112;
  v35 = objc_msgSend(v12, "value");
  if (v35)
  {
    v36 = v35;
    _bridgeAnyObjectToAny(_:)(&v112, v35);
    swift_unknownObjectRelease(v36);
  }
  else
  {
    v112 = 0u;
    v113 = 0u;
  }
  a3 = v107;
  sub_1000491D4((uint64_t)&v112, (uint64_t)&v114, &qword_1000817D8);
  if (!v116)
  {
    sub_10000E534((uint64_t)&v114);
    goto LABEL_22;
  }
  v37 = sub_1000038AC(0, &qword_100081E18, NSObject_ptr);
  if ((swift_dynamicCast(&v111, &v114, (char *)&type metadata for Any + 8, v37, 6) & 1) == 0)
  {
LABEL_22:
    v38 = String._bridgeToObjectiveC()();
    goto LABEL_23;
  }
  v38 = v111;
LABEL_23:
  v114 = (uint64_t)v38;
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v114, v115, v16 + 34, v16 + 42);
  *v102 = v38;

  _os_log_impl((void *)&_mh_execute_header, v106, v103, "{%s} %s '%s' cached value is %@", (uint8_t *)v16, 0x2Au);
  v39 = sub_100003704((uint64_t *)&unk_100081FD0);
  swift_arrayDestroy(v102, 1, v39);
  swift_slowDealloc(v102, -1, -1);
  swift_arrayDestroy(v104, 3, (char *)&type metadata for Any + 8);
  swift_slowDealloc(v104, -1, -1);
  swift_slowDealloc(v16, -1, -1);

  a6 = v105;
LABEL_24:
  v40 = objc_msgSend(v12, (SEL)v15[365].count, v102);
  if (!v40)
    return;
  v41 = v40;
  v42 = objc_msgSend(v40, "serviceType");
  v43 = static String._unconditionallyBridgeFromObjectiveC(_:)(v42);
  v45 = v44;

  v46 = _s20HomeWidgetLockScreen11ServiceKindO8rawValueACSgSS_tcfC_0(v43, v45);
  if (v46 == 51)
    v47 = 0;
  else
    v47 = v46;
  if ((sub_100036838(v12, a4) & 1) == 0)
  {
    v48 = objc_msgSend(v12, "value");
    if (v48)
    {
      v49 = v48;
      _bridgeAnyObjectToAny(_:)(&v112, v48);
      swift_unknownObjectRelease(v49);
    }
    else
    {
      v112 = 0u;
      v113 = 0u;
    }
    sub_1000491D4((uint64_t)&v112, (uint64_t)&v114, &qword_1000817D8);
    if (v116)
    {
      v50 = sub_1000038AC(0, &qword_100081E10, NSNumber_ptr);
      if ((swift_dynamicCast(&v117, &v114, (char *)&type metadata for Any + 8, v50, 6) & 1) != 0)
      {
        v51 = v117;
        v52 = (uint64_t)objc_msgSend(v117, "integerValue");

        if (v52 < 1)
          return;
        if (v47 == 49)
        {
          isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*a6);
          v114 = *a6;
          v89 = (_QWORD *)v114;
          *a6 = 0x8000000000000000;
          v56 = sub_10000A65C(4u);
          v91 = v89[2];
          v92 = (v90 & 1) == 0;
          v93 = v91 + v92;
          if (!__OFADD__(v91, v92))
          {
            LOBYTE(v52) = v90;
            if (v89[3] >= v93)
              goto LABEL_68;
            sub_10000B78C(v93, isUniquelyReferenced_nonNull_native);
            v89 = (_QWORD *)v114;
            v94 = sub_10000A65C(4u);
            if ((v52 & 1) == (v95 & 1))
            {
              v56 = v94;
              goto LABEL_70;
            }
            goto LABEL_82;
          }
        }
        else
        {
          if (v47 != 14)
            return;
          isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*a6);
          v114 = *a6;
          v54 = v114;
          *a6 = 0x8000000000000000;
          v56 = sub_10000A65C(2u);
          v57 = *(_QWORD *)(v54 + 16);
          v58 = (v55 & 1) == 0;
          v59 = v57 + v58;
          if (!__OFADD__(v57, v58))
          {
            LOBYTE(v52) = v55;
            if (*(_QWORD *)(v54 + 24) >= v59)
            {
              if ((isUniquelyReferenced_nonNull_native & 1) == 0)
                goto LABEL_80;
              goto LABEL_63;
            }
            sub_10000B78C(v59, isUniquelyReferenced_nonNull_native);
            v54 = v114;
            v60 = sub_10000A65C(2u);
            if ((v52 & 1) == (v61 & 1))
            {
              v56 = v60;
              while (1)
              {
LABEL_63:
                v96 = *a6;
                *a6 = v54;
                swift_bridgeObjectRelease(v96);
                v89 = (_QWORD *)*a6;
                swift_bridgeObjectRetain(*a6);
                if ((v52 & 1) == 0)
                  sub_10000C588(v56, 2, 0, v89);
                v52 = v89[7];
                swift_bridgeObjectRelease(v89);
                v97 = *(_QWORD *)(v52 + 8 * v56);
                v78 = __OFADD__(v97, 1);
                v98 = v97 + 1;
                if (!v78)
                  break;
                __break(1u);
LABEL_68:
                if ((isUniquelyReferenced_nonNull_native & 1) == 0)
                {
                  sub_10000AFBC();
                  v89 = (_QWORD *)v114;
                }
LABEL_70:
                v99 = *a6;
                *a6 = (uint64_t)v89;
                swift_bridgeObjectRelease(v99);
                v100 = *a6;
                swift_bridgeObjectRetain(*a6);
                if ((v52 & 1) == 0)
                  sub_10000C588(v56, 4, 0, v100);
                v52 = *(_QWORD *)(v100 + 56);
                swift_bridgeObjectRelease(v100);
                v101 = *(_QWORD *)(v52 + 8 * v56);
                v78 = __OFADD__(v101, 1);
                v98 = v101 + 1;
                if (!v78)
                  break;
LABEL_79:
                __break(1u);
LABEL_80:
                sub_10000AFBC();
                v54 = v114;
              }
              *(_QWORD *)(v52 + 8 * v56) = v98;
              return;
            }
LABEL_82:
            KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for SecurityIssue);
            __break(1u);
            return;
          }
          __break(1u);
        }
        __break(1u);
        goto LABEL_79;
      }
    }
    else
    {
      sub_10000E534((uint64_t)&v114);
    }
  }
  v108 = a2;
  v62 = a3;
  v63 = (_QWORD *)(a5 + 16);
  swift_beginAccess(a5 + 16, &v114, 33, 0);
  v64 = swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(a5 + 16));
  *(_QWORD *)&v112 = *(_QWORD *)(a5 + 16);
  v65 = v112;
  *(_QWORD *)(a5 + 16) = 0x8000000000000000;
  v67 = sub_10000A6B4(v47);
  v68 = *(_QWORD *)(v65 + 16);
  v69 = (v66 & 1) == 0;
  v70 = v68 + v69;
  if (__OFADD__(v68, v69))
  {
    __break(1u);
    goto LABEL_75;
  }
  LOBYTE(a6) = v66;
  if (*(_QWORD *)(v65 + 24) >= v70)
  {
    if ((v64 & 1) == 0)
      goto LABEL_76;
  }
  else
  {
    sub_10000BA50(v70, v64);
    v65 = v112;
    v71 = sub_10000A6B4(v47);
    if ((a6 & 1) != (v72 & 1))
    {
      KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for ServiceKind);
      __break(1u);
      goto LABEL_82;
    }
    v67 = v71;
  }
  while (1)
  {
    v73 = v62;
    v74 = *v63;
    *v63 = v65;
    swift_bridgeObjectRelease(v74);
    v75 = *v63;
    swift_bridgeObjectRetain(*v63);
    if ((a6 & 1) == 0)
      sub_10000C588(v67, v47, 0, v75);
    v76 = *(_QWORD *)(v75 + 56);
    v77 = *(_QWORD *)(v76 + 8 * v67);
    v78 = __OFADD__(v77, 1);
    v79 = v77 + 1;
    if (!v78)
      break;
LABEL_75:
    __break(1u);
LABEL_76:
    sub_10000AFC8();
    v65 = v112;
  }
  *(_QWORD *)(v76 + 8 * v67) = v79;
  swift_endAccess(&v114);
  swift_bridgeObjectRelease(v75);
  swift_bridgeObjectRetain_n(v62, 2);
  v80 = swift_retain_n(a5, 2);
  v81 = Logger.logObject.getter(v80);
  v82 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v81, v82))
  {
    v83 = swift_slowAlloc(22, -1);
    v84 = swift_slowAlloc(32, -1);
    *(_QWORD *)&v112 = v84;
    *(_DWORD *)v83 = 136315394;
    swift_bridgeObjectRetain(v73);
    v114 = sub_10001DF04(v108, v73, (uint64_t *)&v112);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v114, v115, v83 + 4, v83 + 12);
    swift_bridgeObjectRelease_n(v73, 3);
    *(_WORD *)(v83 + 12) = 2048;
    swift_beginAccess(v63, &v114, 32, 0);
    v85 = *v63;
    if (*(_QWORD *)(*v63 + 16) && (v86 = sub_10000A6B4(v47), (v87 & 1) != 0))
      v88 = *(_QWORD *)(*(_QWORD *)(v85 + 56) + 8 * v86);
    else
      v88 = 0;
    swift_endAccess(&v114);
    swift_release(a5);
    v114 = v88;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v114, v115, v83 + 14, v83 + 22);
    swift_release(a5);
    _os_log_impl((void *)&_mh_execute_header, v81, v82, "{%s} non-responsive motorized doors & windows count: %ld", (uint8_t *)v83, 0x16u);
    swift_arrayDestroy(v84, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v84, -1, -1);
    swift_slowDealloc(v83, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n(v62, 2);
    swift_release_n(a5, 2);
  }
}

void sub_10004F518(void **a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6)
{
  char v6;
  char v7;
  void *v11;
  uint64_t v12;
  id v13;
  id v14;
  NSObject *v15;
  os_log_type_t v16;
  uint64_t v17;
  uint64_t v18;
  id v19;
  void *v20;
  id v21;
  id v22;
  unint64_t v23;
  unint64_t v24;
  id v25;
  id v26;
  uint64_t v27;
  NSString v28;
  uint64_t v29;
  id v30;
  void *v31;
  id v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unsigned int v37;
  uint64_t v38;
  id v39;
  id v40;
  uint64_t v41;
  uint64_t v42;
  id v43;
  unsigned int v44;
  uint64_t isUniquelyReferenced_nonNull_native;
  _QWORD *v46;
  char v47;
  unint64_t v48;
  uint64_t v49;
  _BOOL8 v50;
  uint64_t v51;
  unint64_t v52;
  char v53;
  _QWORD *v54;
  uint64_t v55;
  uint64_t v56;
  os_log_type_t v57;
  unint64_t v58;
  uint64_t v59;
  _BOOL8 v60;
  uint64_t v61;
  unint64_t v62;
  char v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  BOOL v68;
  uint64_t v69;
  uint64_t v70;
  NSObject *v71;
  uint64_t v72;
  os_log_type_t v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;
  unint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  char v81;
  uint64_t v82;
  uint64_t v83;
  char v84;
  uint64_t v85;
  _BOOL8 v86;
  uint64_t v87;
  unint64_t v88;
  char v89;
  _QWORD *v90;
  char v91;
  uint64_t v92;
  _BOOL8 v93;
  uint64_t v94;
  unint64_t v95;
  char v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  _QWORD *v105;
  void *v106;
  uint64_t *v107;
  uint64_t v108;
  void *v109;
  char v112;
  void *v113;
  __int128 v114;
  __int128 v115;
  uint64_t v116;
  _BYTE v117[16];
  uint64_t v118;
  id v119;

  v7 = v6;
  v11 = *a1;
  if (qword_100081690 != -1)
    swift_once(&qword_100081690, sub_100022538);
  v12 = type metadata accessor for Logger(0);
  sub_100003884(v12, (uint64_t)static DataModel.widgetLoggerSecurity);
  v13 = v11;
  swift_bridgeObjectRetain_n(a3, 2);
  v14 = v13;
  v15 = Logger.logObject.getter(v14);
  v16 = static os_log_type_t.default.getter();
  v109 = (void *)a3;
  if (!os_log_type_enabled(v15, v16))
  {

    swift_bridgeObjectRelease_n(a3, 2);
    goto LABEL_18;
  }
  v107 = a6;
  v17 = 0x6E776F6E6B6E75;
  v18 = swift_slowAlloc(32, -1);
  v105 = (_QWORD *)swift_slowAlloc(8, -1);
  v106 = (void *)swift_slowAlloc(64, -1);
  v119 = v106;
  *(_DWORD *)v18 = 136315650;
  swift_bridgeObjectRetain(a3);
  v116 = sub_10001DF04(a2, a3, (uint64_t *)&v119);
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v116, v117, v18 + 4, v18 + 12);
  swift_bridgeObjectRelease_n(a3, 3);
  *(_WORD *)(v18 + 12) = 2080;
  v19 = objc_msgSend(v14, "service");
  if (v19
    && (v20 = v19, v21 = objc_msgSend(v19, "accessory"), v20, v21))
  {
    v22 = objc_msgSend(v21, "name");

    v17 = static String._unconditionallyBridgeFromObjectiveC(_:)(v22);
    v24 = v23;

  }
  else
  {
    v24 = 0xE700000000000000;
  }
  v116 = sub_10001DF04(v17, v24, (uint64_t *)&v119);
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v116, v117, v18 + 14, v18 + 22);

  swift_bridgeObjectRelease(v24);
  *(_WORD *)(v18 + 22) = 2112;
  v25 = objc_msgSend(v14, "value");
  if (v25)
  {
    v26 = v25;
    _bridgeAnyObjectToAny(_:)(&v114, v25);
    swift_unknownObjectRelease(v26);
  }
  else
  {
    v114 = 0u;
    v115 = 0u;
  }
  sub_1000491D4((uint64_t)&v114, (uint64_t)&v116, &qword_1000817D8);
  if (!v118)
  {
    sub_10000E534((uint64_t)&v116);
    goto LABEL_16;
  }
  v27 = sub_1000038AC(0, &qword_100081E18, NSObject_ptr);
  if ((swift_dynamicCast(&v113, &v116, (char *)&type metadata for Any + 8, v27, 6) & 1) == 0)
  {
LABEL_16:
    v28 = String._bridgeToObjectiveC()();
    goto LABEL_17;
  }
  v28 = v113;
LABEL_17:
  v116 = (uint64_t)v28;
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v116, v117, v18 + 24, v18 + 32);
  *v105 = v28;

  _os_log_impl((void *)&_mh_execute_header, v15, v16, "{%s} contact sensor '%s' cached value is: %@", (uint8_t *)v18, 0x20u);
  v29 = sub_100003704((uint64_t *)&unk_100081FD0);
  swift_arrayDestroy(v105, 1, v29);
  swift_slowDealloc(v105, -1, -1);
  swift_arrayDestroy(v106, 2, (char *)&type metadata for Any + 8);
  swift_slowDealloc(v106, -1, -1);
  swift_slowDealloc(v18, -1, -1);

  a6 = v107;
  v7 = v6;
LABEL_18:
  v30 = objc_msgSend(v14, "service", v105);
  if (!v30)
    return;
  v31 = v30;
  v32 = objc_msgSend(v30, "associatedServiceType");
  if (!v32)
  {

    return;
  }
  v33 = v32;
  v112 = v7;
  v34 = static String._unconditionallyBridgeFromObjectiveC(_:)(v32);
  v36 = v35;

  v37 = _s20HomeWidgetLockScreen11ServiceKindO8rawValueACSgSS_tcfC_0(v34, v36);
  if (v37 == 51)
    v38 = 0;
  else
    v38 = v37;
  if ((sub_100036838(v14, a4) & 1) == 0)
  {
    v39 = objc_msgSend(v14, "value");
    if (v39)
    {
      v40 = v39;
      _bridgeAnyObjectToAny(_:)(&v114, v39);
      swift_unknownObjectRelease(v40);
    }
    else
    {
      v114 = 0u;
      v115 = 0u;
    }
    LOBYTE(v41) = v112;
    sub_1000491D4((uint64_t)&v114, (uint64_t)&v116, &qword_1000817D8);
    if (v118)
    {
      v42 = sub_1000038AC(0, &qword_100081E10, NSNumber_ptr);
      if ((swift_dynamicCast(&v119, &v116, (char *)&type metadata for Any + 8, v42, 6) & 1) != 0)
      {
        v43 = v119;
        v44 = objc_msgSend(v119, "BOOLValue");

        if (!v44)
          return;
        if (v38 == 14)
        {
          isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*a6);
          v116 = *a6;
          v90 = (_QWORD *)v116;
          *a6 = 0x8000000000000000;
          v48 = sub_10000A65C(2u);
          v92 = v90[2];
          v93 = (v91 & 1) == 0;
          v94 = v92 + v93;
          if (!__OFADD__(v92, v93))
          {
            LOBYTE(v41) = v91;
            if (v90[3] >= v94)
              goto LABEL_69;
            sub_10000B78C(v94, isUniquelyReferenced_nonNull_native);
            v90 = (_QWORD *)v116;
            v95 = sub_10000A65C(2u);
            if ((v41 & 1) == (v96 & 1))
            {
              v48 = v95;
              goto LABEL_71;
            }
            goto LABEL_91;
          }
        }
        else
        {
          if (v38 == 49)
          {
            isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*a6);
            v116 = *a6;
            v83 = v116;
            *a6 = 0x8000000000000000;
            v48 = sub_10000A65C(4u);
            v85 = *(_QWORD *)(v83 + 16);
            v86 = (v84 & 1) == 0;
            v87 = v85 + v86;
            if (!__OFADD__(v85, v86))
            {
              LOBYTE(v41) = v84;
              if (*(_QWORD *)(v83 + 24) >= v87)
              {
                if ((isUniquelyReferenced_nonNull_native & 1) != 0)
                  goto LABEL_64;
                goto LABEL_89;
              }
              sub_10000B78C(v87, isUniquelyReferenced_nonNull_native);
              v83 = v116;
              v88 = sub_10000A65C(4u);
              if ((v41 & 1) == (v89 & 1))
              {
                v48 = v88;
                goto LABEL_64;
              }
              goto LABEL_91;
            }
          }
          else
          {
            if (v38 != 19)
              return;
            isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*a6);
            v116 = *a6;
            v46 = (_QWORD *)v116;
            *a6 = 0x8000000000000000;
            v48 = sub_10000A65C(1u);
            v49 = v46[2];
            v50 = (v47 & 1) == 0;
            v51 = v49 + v50;
            if (!__OFADD__(v49, v50))
            {
              LOBYTE(v41) = v47;
              if (v46[3] >= v51)
                goto LABEL_76;
              sub_10000B78C(v51, isUniquelyReferenced_nonNull_native);
              v46 = (_QWORD *)v116;
              v52 = sub_10000A65C(1u);
              if ((v41 & 1) == (v53 & 1))
              {
                v48 = v52;
                while (1)
                {
                  v102 = *a6;
                  *a6 = (uint64_t)v46;
                  swift_bridgeObjectRelease(v102);
                  v103 = *a6;
                  swift_bridgeObjectRetain(*a6);
                  if ((v41 & 1) == 0)
                    sub_10000C588(v48, 1, 0, v103);
                  v41 = *(_QWORD *)(v103 + 56);
                  swift_bridgeObjectRelease(v103);
                  v104 = *(_QWORD *)(v41 + 8 * v48);
                  v68 = __OFADD__(v104, 1);
                  v99 = v104 + 1;
                  if (!v68)
                    break;
LABEL_88:
                  __break(1u);
LABEL_89:
                  sub_10000AFBC();
                  v83 = v116;
LABEL_64:
                  v97 = *a6;
                  *a6 = v83;
                  swift_bridgeObjectRelease(v97);
                  v90 = (_QWORD *)*a6;
                  swift_bridgeObjectRetain(*a6);
                  if ((v41 & 1) == 0)
                    sub_10000C588(v48, 4, 0, v90);
                  v41 = v90[7];
                  swift_bridgeObjectRelease(v90);
                  v98 = *(_QWORD *)(v41 + 8 * v48);
                  v68 = __OFADD__(v98, 1);
                  v99 = v98 + 1;
                  if (!v68)
                    break;
                  __break(1u);
LABEL_69:
                  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
                  {
                    sub_10000AFBC();
                    v90 = (_QWORD *)v116;
                  }
LABEL_71:
                  v100 = *a6;
                  *a6 = (uint64_t)v90;
                  swift_bridgeObjectRelease(v100);
                  v46 = (_QWORD *)*a6;
                  swift_bridgeObjectRetain(*a6);
                  if ((v41 & 1) == 0)
                    sub_10000C588(v48, 2, 0, v46);
                  v41 = v46[7];
                  swift_bridgeObjectRelease(v46);
                  v101 = *(_QWORD *)(v41 + 8 * v48);
                  v68 = __OFADD__(v101, 1);
                  v99 = v101 + 1;
                  if (!v68)
                    break;
                  __break(1u);
LABEL_76:
                  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
                  {
                    sub_10000AFBC();
                    v46 = (_QWORD *)v116;
                  }
                }
                *(_QWORD *)(v41 + 8 * v48) = v99;
                return;
              }
LABEL_91:
              KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for SecurityIssue);
              __break(1u);
              return;
            }
            __break(1u);
          }
          __break(1u);
        }
        __break(1u);
        goto LABEL_88;
      }
    }
    else
    {
      sub_10000E534((uint64_t)&v116);
    }
  }
  v54 = (_QWORD *)(a5 + 16);
  swift_beginAccess(a5 + 16, &v116, 33, 0);
  v55 = swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(a5 + 16));
  *(_QWORD *)&v114 = *(_QWORD *)(a5 + 16);
  v56 = v114;
  *(_QWORD *)(a5 + 16) = 0x8000000000000000;
  v58 = sub_10000A6B4(v38);
  v59 = *(_QWORD *)(v56 + 16);
  v60 = (v57 & 1) == 0;
  v61 = v59 + v60;
  if (__OFADD__(v59, v60))
  {
    __break(1u);
    goto LABEL_83;
  }
  v16 = v57;
  if (*(_QWORD *)(v56 + 24) >= v61)
  {
    v14 = v109;
    if ((v55 & 1) == 0)
      goto LABEL_84;
  }
  else
  {
    sub_10000BA50(v61, v55);
    v56 = v114;
    v62 = sub_10000A6B4(v38);
    v14 = v109;
    if ((v16 & 1) != (v63 & 1))
    {
      KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for ServiceKind);
      __break(1u);
      goto LABEL_91;
    }
    v58 = v62;
  }
  while (1)
  {
    v64 = *v54;
    *v54 = v56;
    swift_bridgeObjectRelease(v64);
    v65 = *v54;
    swift_bridgeObjectRetain(*v54);
    if ((v16 & 1) == 0)
      sub_10000C588(v58, v38, 0, v65);
    v66 = *(_QWORD *)(v65 + 56);
    v67 = *(_QWORD *)(v66 + 8 * v58);
    v68 = __OFADD__(v67, 1);
    v69 = v67 + 1;
    if (!v68)
      break;
LABEL_83:
    __break(1u);
LABEL_84:
    sub_10000AFC8();
    v56 = v114;
  }
  *(_QWORD *)(v66 + 8 * v58) = v69;
  swift_endAccess(&v116);
  swift_bridgeObjectRelease(v65);
  swift_bridgeObjectRetain_n(v14, 2);
  v70 = swift_retain_n(a5, 2);
  v71 = Logger.logObject.getter(v70);
  v72 = a5;
  v73 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v71, v73))
  {
    v108 = v72;
    v74 = swift_slowAlloc(32, -1);
    v75 = swift_slowAlloc(64, -1);
    *(_QWORD *)&v114 = v75;
    *(_DWORD *)v74 = 136315650;
    swift_bridgeObjectRetain(v14);
    v116 = sub_10001DF04(a2, (unint64_t)v14, (uint64_t *)&v114);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v116, v117, v74 + 4, v74 + 12);
    swift_bridgeObjectRelease_n(v14, 3);
    *(_WORD *)(v74 + 12) = 2080;
    ServiceKind.localizedDescription.getter(v38);
    v77 = v76;
    v116 = sub_10001DF04(v78, v76, (uint64_t *)&v114);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v116, v117, v74 + 14, v74 + 22);
    swift_bridgeObjectRelease(v77);
    *(_WORD *)(v74 + 22) = 2048;
    swift_beginAccess(v54, &v116, 32, 0);
    v79 = *v54;
    if (*(_QWORD *)(*v54 + 16) && (v80 = sub_10000A6B4(v38), (v81 & 1) != 0))
      v82 = *(_QWORD *)(*(_QWORD *)(v79 + 56) + 8 * v80);
    else
      v82 = 0;
    swift_endAccess(&v116);
    swift_release(v108);
    v116 = v82;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v116, v117, v74 + 24, v74 + 32);
    swift_release(v108);
    _os_log_impl((void *)&_mh_execute_header, v71, v73, "{%s} non-responsive doors & windows & garage doors contact sensors (associatedService '%s') count: %ld", (uint8_t *)v74, 0x20u);
    swift_arrayDestroy(v75, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v75, -1, -1);
    swift_slowDealloc(v74, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n(v14, 2);
    swift_release_n(v72, 2);
  }
}

void sub_100050050(_QWORD *a1, void **a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6)
{
  void *v10;
  uint64_t v11;
  id v12;
  id v13;
  NSObject *v14;
  os_log_type_t v15;
  uint64_t v16;
  uint64_t v17;
  id v18;
  void *v19;
  id v20;
  id v21;
  unint64_t v22;
  unint64_t v23;
  id v24;
  id v25;
  uint64_t v26;
  NSString v27;
  uint64_t v28;
  id v29;
  id v30;
  uint64_t v31;
  id v32;
  id v33;
  _QWORD *v34;
  uint64_t isUniquelyReferenced_nonNull_native;
  uint64_t v36;
  os_log_type_t v37;
  unint64_t v38;
  uint64_t v39;
  _BOOL8 v40;
  uint64_t v41;
  unint64_t v42;
  char v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  BOOL v48;
  uint64_t v49;
  uint64_t v50;
  NSObject *v51;
  uint64_t v52;
  os_log_type_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  char v58;
  uint64_t v59;
  _QWORD *v60;
  void *v61;
  uint64_t v62;
  uint64_t v63;
  void *v65;
  __int128 v66;
  __int128 v67;
  uint64_t v68;
  _BYTE v69[16];
  uint64_t v70;
  id v71;

  v10 = *a2;
  if (qword_100081690 != -1)
    swift_once(&qword_100081690, sub_100022538);
  v11 = type metadata accessor for Logger(0);
  sub_100003884(v11, (uint64_t)static DataModel.widgetLoggerSecurity);
  v12 = v10;
  swift_bridgeObjectRetain_n(a4, 2);
  v13 = v12;
  v14 = Logger.logObject.getter(v13);
  v15 = static os_log_type_t.default.getter();
  if (!os_log_type_enabled(v14, v15))
  {

    swift_bridgeObjectRelease_n(a4, 2);
    goto LABEL_18;
  }
  v62 = a5;
  v63 = a6;
  v16 = 0x6E776F6E6B6E75;
  v17 = swift_slowAlloc(32, -1);
  v60 = (_QWORD *)swift_slowAlloc(8, -1);
  v61 = (void *)swift_slowAlloc(64, -1);
  v71 = v61;
  *(_DWORD *)v17 = 136315650;
  swift_bridgeObjectRetain(a4);
  v68 = sub_10001DF04(a3, a4, (uint64_t *)&v71);
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v68, v69, v17 + 4, v17 + 12);
  swift_bridgeObjectRelease_n(a4, 3);
  *(_WORD *)(v17 + 12) = 2080;
  v18 = objc_msgSend(v13, "service");
  if (v18
    && (v19 = v18, v20 = objc_msgSend(v18, "accessory"), v19, v20))
  {
    v21 = objc_msgSend(v20, "name");

    v16 = static String._unconditionallyBridgeFromObjectiveC(_:)(v21);
    v23 = v22;

  }
  else
  {
    v23 = 0xE700000000000000;
  }
  v68 = sub_10001DF04(v16, v23, (uint64_t *)&v71);
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v68, v69, v17 + 14, v17 + 22);

  swift_bridgeObjectRelease(v23);
  *(_WORD *)(v17 + 22) = 2112;
  v24 = objc_msgSend(v13, "value");
  if (v24)
  {
    v25 = v24;
    _bridgeAnyObjectToAny(_:)(&v66, v24);
    swift_unknownObjectRelease(v25);
  }
  else
  {
    v66 = 0u;
    v67 = 0u;
  }
  a5 = v62;
  sub_1000491D4((uint64_t)&v66, (uint64_t)&v68, &qword_1000817D8);
  if (!v70)
  {
    sub_10000E534((uint64_t)&v68);
    goto LABEL_16;
  }
  v26 = sub_1000038AC(0, &qword_100081E18, NSObject_ptr);
  if ((swift_dynamicCast(&v65, &v68, (char *)&type metadata for Any + 8, v26, 6) & 1) == 0)
  {
LABEL_16:
    v27 = String._bridgeToObjectiveC()();
    goto LABEL_17;
  }
  v27 = v65;
LABEL_17:
  v68 = (uint64_t)v27;
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v68, v69, v17 + 24, v17 + 32);
  *v60 = v27;

  _os_log_impl((void *)&_mh_execute_header, v14, v15, "{%s} locks '%s' cached value is: %@", (uint8_t *)v17, 0x20u);
  v28 = sub_100003704((uint64_t *)&unk_100081FD0);
  swift_arrayDestroy(v60, 1, v28);
  swift_slowDealloc(v60, -1, -1);
  swift_arrayDestroy(v61, 2, (char *)&type metadata for Any + 8);
  swift_slowDealloc(v61, -1, -1);
  swift_slowDealloc(v17, -1, -1);

  a6 = v63;
LABEL_18:
  if ((sub_100036838(v13, a5) & 1) == 0)
  {
    v29 = objc_msgSend(v13, "value");
    if (v29)
    {
      v30 = v29;
      _bridgeAnyObjectToAny(_:)(&v66, v29);
      swift_unknownObjectRelease(v30);
    }
    else
    {
      v66 = 0u;
      v67 = 0u;
    }
    sub_1000491D4((uint64_t)&v66, (uint64_t)&v68, &qword_1000817D8);
    if (v70)
    {
      v31 = sub_1000038AC(0, &qword_100081E10, NSNumber_ptr);
      if ((swift_dynamicCast(&v71, &v68, (char *)&type metadata for Any + 8, v31, 6) & 1) != 0)
      {
        v32 = v71;
        v33 = objc_msgSend(v71, "integerValue");

        if (v33 != (id)1)
        {
          if (!__OFADD__(*a1, 1))
          {
            ++*a1;
            return;
          }
          __break(1u);
          goto LABEL_48;
        }
        return;
      }
    }
    else
    {
      sub_10000E534((uint64_t)&v68);
    }
  }
  v34 = (_QWORD *)(a6 + 16);
  swift_beginAccess(a6 + 16, &v68, 33, 0);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(a6 + 16));
  *(_QWORD *)&v66 = *(_QWORD *)(a6 + 16);
  v36 = v66;
  *(_QWORD *)(a6 + 16) = 0x8000000000000000;
  v38 = sub_10000A6B4(0x1Eu);
  v39 = *(_QWORD *)(v36 + 16);
  v40 = (v37 & 1) == 0;
  v41 = v39 + v40;
  if (__OFADD__(v39, v40))
  {
    __break(1u);
    goto LABEL_45;
  }
  v15 = v37;
  if (*(_QWORD *)(v36 + 24) >= v41)
  {
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      goto LABEL_46;
  }
  else
  {
    sub_10000BA50(v41, isUniquelyReferenced_nonNull_native);
    v36 = v66;
    v42 = sub_10000A6B4(0x1Eu);
    if ((v15 & 1) != (v43 & 1))
    {
LABEL_48:
      KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for ServiceKind);
      __break(1u);
      return;
    }
    v38 = v42;
  }
  while (1)
  {
    v44 = *v34;
    *v34 = v36;
    swift_bridgeObjectRelease(v44);
    v45 = *v34;
    swift_bridgeObjectRetain(*v34);
    if ((v15 & 1) == 0)
      sub_10000C588(v38, 30, 0, v45);
    v46 = *(_QWORD *)(v45 + 56);
    v47 = *(_QWORD *)(v46 + 8 * v38);
    v48 = __OFADD__(v47, 1);
    v49 = v47 + 1;
    if (!v48)
      break;
LABEL_45:
    __break(1u);
LABEL_46:
    sub_10000AFC8();
    v36 = v66;
  }
  *(_QWORD *)(v46 + 8 * v38) = v49;
  swift_endAccess(&v68);
  swift_bridgeObjectRelease(v45);
  swift_bridgeObjectRetain_n(a4, 2);
  v50 = swift_retain_n(a6, 2);
  v51 = Logger.logObject.getter(v50);
  v52 = a6;
  v53 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v51, v53))
  {
    v54 = swift_slowAlloc(22, -1);
    v55 = swift_slowAlloc(32, -1);
    *(_QWORD *)&v66 = v55;
    *(_DWORD *)v54 = 136315394;
    swift_bridgeObjectRetain(a4);
    v68 = sub_10001DF04(a3, a4, (uint64_t *)&v66);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v68, v69, v54 + 4, v54 + 12);
    swift_bridgeObjectRelease_n(a4, 3);
    *(_WORD *)(v54 + 12) = 2048;
    swift_beginAccess(v34, &v68, 32, 0);
    v56 = *v34;
    if (*(_QWORD *)(*v34 + 16) && (v57 = sub_10000A6B4(0x1Eu), (v58 & 1) != 0))
      v59 = *(_QWORD *)(*(_QWORD *)(v56 + 56) + 8 * v57);
    else
      v59 = 0;
    swift_endAccess(&v68);
    swift_release(v52);
    v68 = v59;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v68, v69, v54 + 14, v54 + 22);
    swift_release(v52);
    _os_log_impl((void *)&_mh_execute_header, v51, v53, "{%s} non-responsive locks count: %ld", (uint8_t *)v54, 0x16u);
    swift_arrayDestroy(v55, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v55, -1, -1);
    swift_slowDealloc(v54, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n(a4, 2);
    swift_release_n(v52, 2);
  }
}

void sub_1000507FC(double **a1, void **a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6)
{
  void *v10;
  uint64_t v11;
  id v12;
  id v13;
  NSObject *v14;
  os_log_type_t v15;
  uint64_t v16;
  uint64_t v17;
  id v18;
  void *v19;
  id v20;
  id v21;
  unint64_t v22;
  unint64_t v23;
  id v24;
  id v25;
  uint64_t v26;
  NSString v27;
  uint64_t v28;
  id v29;
  id v30;
  uint64_t v31;
  id v32;
  id v33;
  double *v34;
  unint64_t v35;
  unint64_t v36;
  _QWORD *v37;
  uint64_t isUniquelyReferenced_nonNull_native;
  uint64_t v39;
  os_log_type_t v40;
  unint64_t v41;
  uint64_t v42;
  _BOOL8 v43;
  uint64_t v44;
  unint64_t v45;
  char v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  BOOL v51;
  uint64_t v52;
  uint64_t v53;
  NSObject *v54;
  uint64_t v55;
  os_log_type_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  char v61;
  uint64_t v62;
  _QWORD *v63;
  void *v64;
  uint64_t v65;
  double **v66;
  uint64_t v67;
  void *v69;
  __int128 v70;
  __int128 v71;
  uint64_t v72;
  _BYTE v73[16];
  uint64_t v74;
  id v75;

  v10 = *a2;
  if (qword_100081690 != -1)
    swift_once(&qword_100081690, sub_100022538);
  v11 = type metadata accessor for Logger(0);
  sub_100003884(v11, (uint64_t)static DataModel.widgetLoggerSecurity);
  v12 = v10;
  swift_bridgeObjectRetain_n(a4, 2);
  v13 = v12;
  v14 = Logger.logObject.getter(v13);
  v15 = static os_log_type_t.default.getter();
  if (!os_log_type_enabled(v14, v15))
  {

    swift_bridgeObjectRelease_n(a4, 2);
    goto LABEL_18;
  }
  v65 = a5;
  v66 = a1;
  v67 = a6;
  v16 = 0x6E776F6E6B6E75;
  v17 = swift_slowAlloc(32, -1);
  v63 = (_QWORD *)swift_slowAlloc(8, -1);
  v64 = (void *)swift_slowAlloc(64, -1);
  v75 = v64;
  *(_DWORD *)v17 = 136315650;
  swift_bridgeObjectRetain(a4);
  v72 = sub_10001DF04(a3, a4, (uint64_t *)&v75);
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v72, v73, v17 + 4, v17 + 12);
  swift_bridgeObjectRelease_n(a4, 3);
  *(_WORD *)(v17 + 12) = 2080;
  v18 = objc_msgSend(v13, "service");
  if (v18
    && (v19 = v18, v20 = objc_msgSend(v18, "accessory"), v19, v20))
  {
    v21 = objc_msgSend(v20, "name");

    v16 = static String._unconditionallyBridgeFromObjectiveC(_:)(v21);
    v23 = v22;

  }
  else
  {
    v23 = 0xE700000000000000;
  }
  v72 = sub_10001DF04(v16, v23, (uint64_t *)&v75);
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v72, v73, v17 + 14, v17 + 22);

  swift_bridgeObjectRelease(v23);
  *(_WORD *)(v17 + 22) = 2112;
  v24 = objc_msgSend(v13, "value");
  if (v24)
  {
    v25 = v24;
    _bridgeAnyObjectToAny(_:)(&v70, v24);
    swift_unknownObjectRelease(v25);
  }
  else
  {
    v70 = 0u;
    v71 = 0u;
  }
  a6 = v67;
  sub_1000491D4((uint64_t)&v70, (uint64_t)&v72, &qword_1000817D8);
  if (!v74)
  {
    sub_10000E534((uint64_t)&v72);
    goto LABEL_16;
  }
  v26 = sub_1000038AC(0, &qword_100081E18, NSObject_ptr);
  if ((swift_dynamicCast(&v69, &v72, (char *)&type metadata for Any + 8, v26, 6) & 1) == 0)
  {
LABEL_16:
    v27 = String._bridgeToObjectiveC()();
    goto LABEL_17;
  }
  v27 = v69;
LABEL_17:
  v72 = (uint64_t)v27;
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v72, v73, v17 + 24, v17 + 32);
  *v63 = v27;

  _os_log_impl((void *)&_mh_execute_header, v14, v15, "{%s} security system '%s' cached value is: %@", (uint8_t *)v17, 0x20u);
  v28 = sub_100003704((uint64_t *)&unk_100081FD0);
  swift_arrayDestroy(v63, 1, v28);
  swift_slowDealloc(v63, -1, -1);
  swift_arrayDestroy(v64, 2, (char *)&type metadata for Any + 8);
  swift_slowDealloc(v64, -1, -1);
  swift_slowDealloc(v17, -1, -1);

  a5 = v65;
  a1 = v66;
LABEL_18:
  if ((sub_100036838(v13, a5) & 1) == 0)
  {
    v29 = objc_msgSend(v13, "value");
    if (v29)
    {
      v30 = v29;
      _bridgeAnyObjectToAny(_:)(&v70, v29);
      swift_unknownObjectRelease(v30);
    }
    else
    {
      v70 = 0u;
      v71 = 0u;
    }
    sub_1000491D4((uint64_t)&v70, (uint64_t)&v72, &qword_1000817D8);
    if (v74)
    {
      v31 = sub_1000038AC(0, &qword_100081E10, NSNumber_ptr);
      if ((swift_dynamicCast(&v75, &v72, (char *)&type metadata for Any + 8, v31, 6) & 1) != 0)
      {
        v32 = v75;
        v33 = objc_msgSend(v75, "integerValue");

        v34 = *a1;
        if ((swift_isUniquelyReferenced_nonNull_native(*a1) & 1) == 0)
          v34 = sub_10000A36C(0, *((_QWORD *)v34 + 2) + 1, 1, v34);
        v36 = *((_QWORD *)v34 + 2);
        v35 = *((_QWORD *)v34 + 3);
        if (v36 >= v35 >> 1)
          v34 = sub_10000A36C((double *)(v35 > 1), v36 + 1, 1, v34);
        *((_QWORD *)v34 + 2) = v36 + 1;
        *(_QWORD *)&v34[v36 + 4] = v33;
        *a1 = v34;
        return;
      }
    }
    else
    {
      sub_10000E534((uint64_t)&v72);
    }
  }
  v37 = (_QWORD *)(a6 + 16);
  swift_beginAccess(a6 + 16, &v72, 33, 0);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(a6 + 16));
  *(_QWORD *)&v70 = *(_QWORD *)(a6 + 16);
  v39 = v70;
  *(_QWORD *)(a6 + 16) = 0x8000000000000000;
  v41 = sub_10000A6B4(0x23u);
  v42 = *(_QWORD *)(v39 + 16);
  v43 = (v40 & 1) == 0;
  v44 = v42 + v43;
  if (__OFADD__(v42, v43))
  {
    __break(1u);
    goto LABEL_46;
  }
  v15 = v40;
  if (*(_QWORD *)(v39 + 24) >= v44)
  {
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      goto LABEL_47;
  }
  else
  {
    sub_10000BA50(v44, isUniquelyReferenced_nonNull_native);
    v39 = v70;
    v45 = sub_10000A6B4(0x23u);
    if ((v15 & 1) != (v46 & 1))
    {
      KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for ServiceKind);
      __break(1u);
      return;
    }
    v41 = v45;
  }
  while (1)
  {
    v47 = *v37;
    *v37 = v39;
    swift_bridgeObjectRelease(v47);
    v48 = *v37;
    swift_bridgeObjectRetain(*v37);
    if ((v15 & 1) == 0)
      sub_10000C588(v41, 35, 0, v48);
    v49 = *(_QWORD *)(v48 + 56);
    v50 = *(_QWORD *)(v49 + 8 * v41);
    v51 = __OFADD__(v50, 1);
    v52 = v50 + 1;
    if (!v51)
      break;
LABEL_46:
    __break(1u);
LABEL_47:
    sub_10000AFC8();
    v39 = v70;
  }
  *(_QWORD *)(v49 + 8 * v41) = v52;
  swift_endAccess(&v72);
  swift_bridgeObjectRelease(v48);
  swift_bridgeObjectRetain_n(a4, 2);
  v53 = swift_retain_n(a6, 2);
  v54 = Logger.logObject.getter(v53);
  v55 = a6;
  v56 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v54, v56))
  {
    v57 = swift_slowAlloc(22, -1);
    v58 = swift_slowAlloc(32, -1);
    *(_QWORD *)&v70 = v58;
    *(_DWORD *)v57 = 136315394;
    swift_bridgeObjectRetain(a4);
    v72 = sub_10001DF04(a3, a4, (uint64_t *)&v70);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v72, v73, v57 + 4, v57 + 12);
    swift_bridgeObjectRelease_n(a4, 3);
    *(_WORD *)(v57 + 12) = 2048;
    swift_beginAccess(v37, &v72, 32, 0);
    v59 = *v37;
    if (*(_QWORD *)(*v37 + 16) && (v60 = sub_10000A6B4(0x23u), (v61 & 1) != 0))
      v62 = *(_QWORD *)(*(_QWORD *)(v59 + 56) + 8 * v60);
    else
      v62 = 0;
    swift_endAccess(&v72);
    swift_release(v55);
    v72 = v62;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v72, v73, v57 + 14, v57 + 22);
    swift_release(v55);
    _os_log_impl((void *)&_mh_execute_header, v54, v56, "{%s} non-responsive securiy systems count: %ld", (uint8_t *)v57, 0x16u);
    swift_arrayDestroy(v58, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v58, -1, -1);
    swift_slowDealloc(v57, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n(a4, 2);
    swift_release_n(v55, 2);
  }
}

uint64_t sub_100050FFC@<X0>(unsigned __int8 *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  int v5;
  uint64_t v6;
  unint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t result;
  int v11;
  unsigned __int8 v12;
  _QWORD *v13;
  unint64_t v14;
  char v15;
  uint64_t *v16;
  unint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  unint64_t v20;
  char v21;
  uint64_t *v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  unint64_t v27;
  char v28;
  uint64_t *v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  unint64_t v37;
  char v38;
  uint64_t *v39;
  unint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  unint64_t v43;
  char v44;
  uint64_t *v45;
  unint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  unint64_t v49;
  char v50;
  uint64_t *v51;
  uint64_t v52;
  _BYTE v53[24];

  v5 = *a1;
  swift_beginAccess(a2, v53, 32, 0);
  v6 = *a2;
  if (*(_QWORD *)(v6 + 16) && (v7 = sub_10000A6B4(v5), (v8 & 1) != 0))
    v9 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v7);
  else
    v9 = 0;
  result = swift_endAccess(v53);
  v11 = v5 - 14;
  v12 = 5;
  switch(v11)
  {
    case 0:
      v12 = 2;
      if (v9 != 1)
        goto LABEL_14;
      goto LABEL_36;
    case 5:
      v12 = 1;
      if (v9 == 1)
        goto LABEL_36;
      goto LABEL_14;
    case 16:
      v12 = 3;
      goto LABEL_13;
    case 21:
LABEL_13:
      if (v9 != 1)
        goto LABEL_14;
      goto LABEL_36;
    case 35:
      v12 = 4;
      if (v9 == 1)
        goto LABEL_36;
      goto LABEL_14;
    default:
      v12 = 6;
      if (v9 == 1)
      {
LABEL_36:
        if (qword_1000816E8 != -1)
          swift_once(&qword_1000816E8, sub_100051450);
        v36 = off_1000830B0;
        if (*((_QWORD *)off_1000830B0 + 2) && (v37 = sub_10000A65C(v12), (v38 & 1) != 0))
        {
          v39 = (uint64_t *)(v36[7] + 16 * v37);
          v41 = *v39;
          v40 = v39[1];
          swift_bridgeObjectRetain(v40);
        }
        else
        {
          v41 = 0;
          v40 = 0xE000000000000000;
        }
        if (qword_1000816F0 != -1)
          swift_once(&qword_1000816F0, sub_1000514A0);
        v42 = off_1000830B8;
        if (*((_QWORD *)off_1000830B8 + 2) && (v43 = sub_10000A65C(v12), (v44 & 1) != 0))
        {
          v45 = (uint64_t *)(v42[7] + 16 * v43);
          v47 = *v45;
          v46 = v45[1];
          swift_bridgeObjectRetain(v46);
        }
        else
        {
          v47 = 0;
          v46 = 0xE000000000000000;
        }
        if (qword_100081700 != -1)
          swift_once(&qword_100081700, sub_100051B9C);
        v48 = off_1000830C8;
        if (*((_QWORD *)off_1000830C8 + 2) && (v49 = sub_10000A65C(6u), (v50 & 1) != 0))
        {
          v51 = (uint64_t *)(v48[7] + 16 * v49);
          v52 = *v51;
          result = swift_bridgeObjectRetain(v51[1]);
        }
        else
        {
          v52 = 0;
          result = 0xE000000000000000;
        }
        *(_QWORD *)a3 = v41;
        *(_QWORD *)(a3 + 8) = v40;
        *(_QWORD *)(a3 + 16) = v47;
        *(_QWORD *)(a3 + 24) = v46;
        *(_QWORD *)(a3 + 32) = v52;
        *(_QWORD *)(a3 + 40) = result;
      }
      else
      {
LABEL_14:
        if (!v9)
        {
          *(_BYTE *)(a3 + 48) = 0;
          *(_OWORD *)(a3 + 16) = 0u;
          *(_OWORD *)(a3 + 32) = 0u;
          *(_OWORD *)a3 = 0u;
          return result;
        }
        if (qword_1000816E8 != -1)
          swift_once(&qword_1000816E8, sub_100051450);
        v13 = off_1000830B0;
        if (*((_QWORD *)off_1000830B0 + 2) && (v14 = sub_10000A65C(v12), (v15 & 1) != 0))
        {
          v16 = (uint64_t *)(v13[7] + 16 * v14);
          v18 = *v16;
          v17 = v16[1];
          swift_bridgeObjectRetain(v17);
        }
        else
        {
          v18 = 0;
          v17 = 0xE000000000000000;
        }
        if (qword_1000816F8 != -1)
          swift_once(&qword_1000816F8, sub_100051820);
        v19 = off_1000830C0;
        if (*((_QWORD *)off_1000830C0 + 2) && (v20 = sub_10000A65C(v12), (v21 & 1) != 0))
        {
          v22 = (uint64_t *)(v19[7] + 16 * v20);
          v24 = *v22;
          v23 = v22[1];
          swift_bridgeObjectRetain(v23);
        }
        else
        {
          v24 = 0;
          v23 = 0xE000000000000000;
        }
        if (qword_100081708 != -1)
          swift_once(&qword_100081708, sub_100051F90);
        v25 = 7695397;
        v26 = off_1000830D0;
        if (*((_QWORD *)off_1000830D0 + 2) && (v27 = sub_10000A65C(6u), (v28 & 1) != 0))
        {
          v29 = (uint64_t *)(v26[7] + 16 * v27);
          v25 = *v29;
          v30 = v29[1];
          swift_bridgeObjectRetain(v30);
        }
        else
        {
          v30 = 0xE300000000000000;
        }
        v31 = sub_100003704(&qword_1000825B0);
        v32 = swift_allocObject(v31, 72, 7);
        *(_OWORD *)(v32 + 16) = xmmword_1000607D0;
        *(_QWORD *)(v32 + 56) = &type metadata for Int;
        *(_QWORD *)(v32 + 64) = &protocol witness table for Int;
        *(_QWORD *)(v32 + 32) = v9;
        v33 = String.init(format:_:)(v25, v30, v32);
        v35 = v34;
        result = swift_bridgeObjectRelease(v30);
        *(_QWORD *)a3 = v18;
        *(_QWORD *)(a3 + 8) = v17;
        *(_QWORD *)(a3 + 16) = v24;
        *(_QWORD *)(a3 + 24) = v23;
        *(_QWORD *)(a3 + 32) = v33;
        *(_QWORD *)(a3 + 40) = v35;
      }
      *(_BYTE *)(a3 + 48) = 0;
      return result;
  }
}

void sub_1000513F0(_QWORD *a1@<X8>)
{
  *a1 = &off_10007B248;
}

BOOL sub_100051400(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 < *a2;
}

BOOL sub_100051414(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a2 >= *a1;
}

BOOL sub_100051428(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 >= *a2;
}

BOOL sub_10005143C(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a2 < *a1;
}

uint64_t sub_100051450()
{
  void *v0;
  uint64_t v1;
  uint64_t result;

  v0 = (void *)sub_1000527A8((uint64_t)&off_10007AD98);
  v1 = sub_100003704(&qword_100083108);
  result = swift_arrayDestroy(&unk_10007ADB8, 7, v1);
  off_1000830B0 = v0;
  return result;
}

uint64_t sub_1000514A0()
{
  uint64_t v0;
  uint64_t v1;
  _BYTE *v2;
  uint64_t v3;
  uint64_t v4;
  _BYTE *v5;
  uint64_t v6;
  uint64_t inited;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  uint64_t result;
  _BYTE v25[16];
  _BYTE v26[208];

  v0 = type metadata accessor for Locale(0);
  __chkstk_darwin(v0);
  v2 = &v25[-((v1 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v3 = type metadata accessor for String.LocalizationValue(0);
  __chkstk_darwin(v3);
  v5 = &v25[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v6 = sub_100003704(&qword_100083100);
  inited = swift_initStackObject(v6, v26);
  *(_OWORD *)(inited + 16) = xmmword_100063F30;
  *(_BYTE *)(inited + 32) = 0;
  v8 = String.LocalizationValue.init(stringLiteral:)(0xD000000000000025, 0x80000001000696F0);
  static Locale.current.getter(v8);
  *(_QWORD *)(inited + 40) = String.init(localized:table:bundle:locale:comment:)(v5, 0xD00000000000001DLL, 0x8000000100068680, 0, v2, 0, 0, 256);
  *(_QWORD *)(inited + 48) = v9;
  *(_BYTE *)(inited + 56) = 1;
  v10 = String.LocalizationValue.init(stringLiteral:)(0xD00000000000002CLL, 0x8000000100069720);
  static Locale.current.getter(v10);
  *(_QWORD *)(inited + 64) = String.init(localized:table:bundle:locale:comment:)(v5, 0xD00000000000001DLL, 0x8000000100068680, 0, v2, 0, 0, 256);
  *(_QWORD *)(inited + 72) = v11;
  *(_BYTE *)(inited + 80) = 2;
  v12 = String.LocalizationValue.init(stringLiteral:)(0xD00000000000001BLL, 0x8000000100069750);
  static Locale.current.getter(v12);
  *(_QWORD *)(inited + 88) = String.init(localized:table:bundle:locale:comment:)(v5, 0xD00000000000001DLL, 0x8000000100068680, 0, v2, 0, 0, 256);
  *(_QWORD *)(inited + 96) = v13;
  *(_BYTE *)(inited + 104) = 3;
  v14 = String.LocalizationValue.init(stringLiteral:)(0xD00000000000001BLL, 0x8000000100069750);
  static Locale.current.getter(v14);
  *(_QWORD *)(inited + 112) = String.init(localized:table:bundle:locale:comment:)(v5, 0xD00000000000001DLL, 0x8000000100068680, 0, v2, 0, 0, 256);
  *(_QWORD *)(inited + 120) = v15;
  *(_BYTE *)(inited + 128) = 4;
  v16 = String.LocalizationValue.init(stringLiteral:)(0xD00000000000001DLL, 0x8000000100069770);
  static Locale.current.getter(v16);
  *(_QWORD *)(inited + 136) = String.init(localized:table:bundle:locale:comment:)(v5, 0xD00000000000001DLL, 0x8000000100068680, 0, v2, 0, 0, 256);
  *(_QWORD *)(inited + 144) = v17;
  *(_BYTE *)(inited + 152) = 5;
  v18 = String.LocalizationValue.init(stringLiteral:)(0xD000000000000025, 0x80000001000696F0);
  static Locale.current.getter(v18);
  *(_QWORD *)(inited + 160) = String.init(localized:table:bundle:locale:comment:)(v5, 0xD00000000000001DLL, 0x8000000100068680, 0, v2, 0, 0, 256);
  *(_QWORD *)(inited + 168) = v19;
  *(_BYTE *)(inited + 176) = 6;
  v20 = String.LocalizationValue.init(stringLiteral:)(0xD000000000000019, 0x8000000100069790);
  static Locale.current.getter(v20);
  *(_QWORD *)(inited + 184) = String.init(localized:table:bundle:locale:comment:)(v5, 0xD00000000000001DLL, 0x8000000100068680, 0, v2, 0, 0, 256);
  *(_QWORD *)(inited + 192) = v21;
  v22 = (void *)sub_1000527A8(inited);
  swift_setDeallocating(inited);
  v23 = sub_100003704(&qword_100083108);
  result = swift_arrayDestroy(inited + 32, 7, v23);
  off_1000830B8 = v22;
  return result;
}

uint64_t sub_100051820()
{
  uint64_t v0;
  uint64_t v1;
  _BYTE *v2;
  uint64_t v3;
  uint64_t v4;
  _BYTE *v5;
  uint64_t v6;
  uint64_t inited;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  uint64_t result;
  _BYTE v25[16];
  _BYTE v26[208];

  v0 = type metadata accessor for Locale(0);
  __chkstk_darwin(v0);
  v2 = &v25[-((v1 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v3 = type metadata accessor for String.LocalizationValue(0);
  __chkstk_darwin(v3);
  v5 = &v25[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v6 = sub_100003704(&qword_100083100);
  inited = swift_initStackObject(v6, v26);
  *(_OWORD *)(inited + 16) = xmmword_100063F30;
  *(_BYTE *)(inited + 32) = 0;
  v8 = String.LocalizationValue.init(stringLiteral:)(0xD00000000000002BLL, 0x8000000100069930);
  static Locale.current.getter(v8);
  *(_QWORD *)(inited + 40) = String.init(localized:table:bundle:locale:comment:)(v5, 0xD00000000000001DLL, 0x8000000100068680, 0, v2, 0, 0, 256);
  *(_QWORD *)(inited + 48) = v9;
  *(_BYTE *)(inited + 56) = 1;
  v10 = String.LocalizationValue.init(stringLiteral:)(0xD000000000000032, 0x8000000100069960);
  static Locale.current.getter(v10);
  *(_QWORD *)(inited + 64) = String.init(localized:table:bundle:locale:comment:)(v5, 0xD00000000000001DLL, 0x8000000100068680, 0, v2, 0, 0, 256);
  *(_QWORD *)(inited + 72) = v11;
  *(_BYTE *)(inited + 80) = 2;
  v12 = String.LocalizationValue.init(stringLiteral:)(0xD000000000000021, 0x80000001000699A0);
  static Locale.current.getter(v12);
  *(_QWORD *)(inited + 88) = String.init(localized:table:bundle:locale:comment:)(v5, 0xD00000000000001DLL, 0x8000000100068680, 0, v2, 0, 0, 256);
  *(_QWORD *)(inited + 96) = v13;
  *(_BYTE *)(inited + 104) = 3;
  v14 = String.LocalizationValue.init(stringLiteral:)(0xD000000000000021, 0x80000001000699A0);
  static Locale.current.getter(v14);
  *(_QWORD *)(inited + 112) = String.init(localized:table:bundle:locale:comment:)(v5, 0xD00000000000001DLL, 0x8000000100068680, 0, v2, 0, 0, 256);
  *(_QWORD *)(inited + 120) = v15;
  *(_BYTE *)(inited + 128) = 4;
  v16 = String.LocalizationValue.init(stringLiteral:)(0xD000000000000023, 0x80000001000699D0);
  static Locale.current.getter(v16);
  *(_QWORD *)(inited + 136) = String.init(localized:table:bundle:locale:comment:)(v5, 0xD00000000000001DLL, 0x8000000100068680, 0, v2, 0, 0, 256);
  *(_QWORD *)(inited + 144) = v17;
  *(_BYTE *)(inited + 152) = 5;
  v18 = String.LocalizationValue.init(stringLiteral:)(0xD00000000000002BLL, 0x8000000100069930);
  static Locale.current.getter(v18);
  *(_QWORD *)(inited + 160) = String.init(localized:table:bundle:locale:comment:)(v5, 0xD00000000000001DLL, 0x8000000100068680, 0, v2, 0, 0, 256);
  *(_QWORD *)(inited + 168) = v19;
  *(_BYTE *)(inited + 176) = 6;
  v20 = String.LocalizationValue.init(stringLiteral:)(0xD00000000000001FLL, 0x8000000100069A00);
  static Locale.current.getter(v20);
  *(_QWORD *)(inited + 184) = String.init(localized:table:bundle:locale:comment:)(v5, 0xD00000000000001DLL, 0x8000000100068680, 0, v2, 0, 0, 256);
  *(_QWORD *)(inited + 192) = v21;
  v22 = (void *)sub_1000527A8(inited);
  swift_setDeallocating(inited);
  v23 = sub_100003704(&qword_100083108);
  result = swift_arrayDestroy(inited + 32, 7, v23);
  off_1000830C0 = v22;
  return result;
}

uint64_t sub_100051B9C()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t inited;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  uint64_t result;
  _BYTE v26[200];

  v0 = type metadata accessor for Locale(0);
  __chkstk_darwin(v0);
  v2 = &v26[-((v1 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v3 = type metadata accessor for String.LocalizationValue(0);
  __chkstk_darwin(v3);
  v5 = &v26[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v6 = sub_100003704(&qword_100083100);
  inited = swift_initStackObject(v6, v26);
  *(_OWORD *)(inited + 16) = xmmword_100063F30;
  *(_BYTE *)(inited + 32) = 0;
  v8 = String.LocalizationValue.init(stringLiteral:)(0xD00000000000002BLL, 0x80000001000695E0);
  static Locale.current.getter(v8);
  *(_QWORD *)(inited + 40) = String.init(localized:table:bundle:locale:comment:)(v5, 0x696C61636F4C4648, 0xED0000656C62617ALL, 0, v2, 0, 0, 256);
  *(_QWORD *)(inited + 48) = v9;
  *(_BYTE *)(inited + 56) = 1;
  v10 = String.LocalizationValue.init(stringLiteral:)(0xD000000000000025, 0x8000000100069610);
  static Locale.current.getter(v10);
  *(_QWORD *)(inited + 64) = String.init(localized:table:bundle:locale:comment:)(v5, 0x696C61636F4C4648, 0xED0000656C62617ALL, 0, v2, 0, 0, 256);
  *(_QWORD *)(inited + 72) = v11;
  *(_BYTE *)(inited + 80) = 2;
  v12 = String.LocalizationValue.init(stringLiteral:)(0xD000000000000022, 0x8000000100069580);
  static Locale.current.getter(v12);
  *(_QWORD *)(inited + 88) = String.init(localized:table:bundle:locale:comment:)(v5, 0x696C61636F4C4648, 0xED0000656C62617ALL, 0, v2, 0, 0, 256);
  *(_QWORD *)(inited + 96) = v13;
  *(_BYTE *)(inited + 104) = 3;
  v14 = String.LocalizationValue.init(stringLiteral:)(0xD000000000000023, 0x8000000100069640);
  static Locale.current.getter(v14);
  *(_QWORD *)(inited + 112) = String.init(localized:table:bundle:locale:comment:)(v5, 0x696C61636F4C4648, 0xED0000656C62617ALL, 0, v2, 0, 0, 256);
  *(_QWORD *)(inited + 120) = v15;
  *(_BYTE *)(inited + 128) = 4;
  v16 = String.LocalizationValue.init(stringLiteral:)(0xD000000000000021, 0x8000000100069670);
  static Locale.current.getter(v16);
  *(_QWORD *)(inited + 136) = String.init(localized:table:bundle:locale:comment:)(v5, 0x696C61636F4C4648, 0xED0000656C62617ALL, 0, v2, 0, 0, 256);
  *(_QWORD *)(inited + 144) = v17;
  *(_BYTE *)(inited + 152) = 5;
  v18 = String.LocalizationValue.init(stringLiteral:)(0xD00000000000002ALL, 0x80000001000696A0);
  static Locale.current.getter(v18);
  *(_QWORD *)(inited + 160) = String.init(localized:table:bundle:locale:comment:)(v5, 0x696C61636F4C4648, 0xED0000656C62617ALL, 0, v2, 0, 0, 256);
  *(_QWORD *)(inited + 168) = v19;
  *(_BYTE *)(inited + 176) = 6;
  v20 = String.LocalizationValue.init(stringLiteral:)(0xD00000000000001ELL, 0x80000001000696D0);
  static Locale.current.getter(v20);
  *(_QWORD *)(inited + 184) = String.init(localized:table:bundle:locale:comment:)(v5, 0x696C61636F4C4648, 0xED0000656C62617ALL, 0, v2, 0, 0, 256);
  *(_QWORD *)(inited + 192) = v21;
  v22 = (void *)sub_1000527A8(inited);
  swift_setDeallocating(inited);
  v23 = sub_100003704(&qword_100083108);
  result = swift_arrayDestroy(inited + 32, 7, v23);
  off_1000830C8 = v22;
  return result;
}

uint64_t sub_100051F90()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t inited;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  uint64_t result;
  _BYTE v26[200];

  v0 = type metadata accessor for Locale(0);
  __chkstk_darwin(v0);
  v2 = &v26[-((v1 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v3 = type metadata accessor for String.LocalizationValue(0);
  __chkstk_darwin(v3);
  v5 = &v26[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v6 = sub_100003704(&qword_100083100);
  inited = swift_initStackObject(v6, v26);
  *(_OWORD *)(inited + 16) = xmmword_100063F30;
  *(_BYTE *)(inited + 32) = 0;
  v8 = String.LocalizationValue.init(stringLiteral:)(0xD000000000000033, 0x80000001000697B0);
  static Locale.current.getter(v8);
  *(_QWORD *)(inited + 40) = String.init(localized:table:bundle:locale:comment:)(v5, 0x696C61636F4C4648, 0xED0000656C62617ALL, 0, v2, 0, 0, 256);
  *(_QWORD *)(inited + 48) = v9;
  *(_BYTE *)(inited + 56) = 1;
  v10 = String.LocalizationValue.init(stringLiteral:)(0xD00000000000002ALL, 0x80000001000697F0);
  static Locale.current.getter(v10);
  *(_QWORD *)(inited + 64) = String.init(localized:table:bundle:locale:comment:)(v5, 0x696C61636F4C4648, 0xED0000656C62617ALL, 0, v2, 0, 0, 256);
  *(_QWORD *)(inited + 72) = v11;
  *(_BYTE *)(inited + 80) = 2;
  v12 = String.LocalizationValue.init(stringLiteral:)(0xD000000000000024, 0x8000000100069820);
  static Locale.current.getter(v12);
  *(_QWORD *)(inited + 88) = String.init(localized:table:bundle:locale:comment:)(v5, 0x696C61636F4C4648, 0xED0000656C62617ALL, 0, v2, 0, 0, 256);
  *(_QWORD *)(inited + 96) = v13;
  *(_BYTE *)(inited + 104) = 3;
  v14 = String.LocalizationValue.init(stringLiteral:)(0xD000000000000028, 0x8000000100069850);
  static Locale.current.getter(v14);
  *(_QWORD *)(inited + 112) = String.init(localized:table:bundle:locale:comment:)(v5, 0x696C61636F4C4648, 0xED0000656C62617ALL, 0, v2, 0, 0, 256);
  *(_QWORD *)(inited + 120) = v15;
  *(_BYTE *)(inited + 128) = 4;
  v16 = String.LocalizationValue.init(stringLiteral:)(0xD000000000000026, 0x8000000100069880);
  static Locale.current.getter(v16);
  *(_QWORD *)(inited + 136) = String.init(localized:table:bundle:locale:comment:)(v5, 0x696C61636F4C4648, 0xED0000656C62617ALL, 0, v2, 0, 0, 256);
  *(_QWORD *)(inited + 144) = v17;
  *(_BYTE *)(inited + 152) = 5;
  v18 = String.LocalizationValue.init(stringLiteral:)(0xD000000000000032, 0x80000001000698B0);
  static Locale.current.getter(v18);
  *(_QWORD *)(inited + 160) = String.init(localized:table:bundle:locale:comment:)(v5, 0x696C61636F4C4648, 0xED0000656C62617ALL, 0, v2, 0, 0, 256);
  *(_QWORD *)(inited + 168) = v19;
  *(_BYTE *)(inited + 176) = 6;
  v20 = String.LocalizationValue.init(stringLiteral:)(0xD00000000000003ELL, 0x80000001000698F0);
  static Locale.current.getter(v20);
  *(_QWORD *)(inited + 184) = String.init(localized:table:bundle:locale:comment:)(v5, 0x696C61636F4C4648, 0xED0000656C62617ALL, 0, v2, 0, 0, 256);
  *(_QWORD *)(inited + 192) = v21;
  v22 = (void *)sub_1000527A8(inited);
  swift_setDeallocating(inited);
  v23 = sub_100003704(&qword_100083108);
  result = swift_arrayDestroy(inited + 32, 7, v23);
  off_1000830D0 = v22;
  return result;
}

uint64_t sub_100052388()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v0 = sub_100003704(&qword_1000817C0);
  v1 = swift_allocObject(v0, 312, 7);
  *(_OWORD *)(v1 + 16) = xmmword_100063F40;
  if (qword_100081718 != -1)
    swift_once(&qword_100081718, sub_100052634);
  v2 = *((_QWORD *)&xmmword_10008A798 + 1);
  v3 = qword_10008A7A8;
  v4 = unk_10008A7B0;
  v5 = xmmword_10008A7B8;
  v6 = qword_10008A7C8;
  *(_QWORD *)(v1 + 32) = xmmword_10008A798;
  *(_QWORD *)(v1 + 40) = v2;
  *(_QWORD *)(v1 + 48) = v3;
  *(_QWORD *)(v1 + 56) = v4;
  *(_OWORD *)(v1 + 64) = v5;
  *(_QWORD *)(v1 + 80) = v6;
  swift_bridgeObjectRetain(v2);
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  sub_10000389C(*((uint64_t *)&v5 + 1), v6);
  if (qword_100081720 != -1)
    swift_once(&qword_100081720, sub_100052680);
  v7 = *((_QWORD *)&xmmword_10008A7D0 + 1);
  v8 = qword_10008A7E0;
  v9 = unk_10008A7E8;
  v10 = xmmword_10008A7F0;
  v11 = qword_10008A800;
  *(_QWORD *)(v1 + 88) = xmmword_10008A7D0;
  *(_QWORD *)(v1 + 96) = v7;
  *(_QWORD *)(v1 + 104) = v8;
  *(_QWORD *)(v1 + 112) = v9;
  *(_OWORD *)(v1 + 120) = v10;
  *(_QWORD *)(v1 + 136) = v11;
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRetain(v9);
  swift_bridgeObjectRetain(v10);
  sub_10000389C(*((uint64_t *)&v10 + 1), v11);
  if (qword_100081728 != -1)
    swift_once(&qword_100081728, sub_1000526CC);
  v12 = *((_QWORD *)&xmmword_10008A808 + 1);
  v13 = qword_10008A818;
  v14 = unk_10008A820;
  v15 = xmmword_10008A828;
  v16 = qword_10008A838;
  *(_QWORD *)(v1 + 144) = xmmword_10008A808;
  *(_QWORD *)(v1 + 152) = v12;
  *(_QWORD *)(v1 + 160) = v13;
  *(_QWORD *)(v1 + 168) = v14;
  *(_OWORD *)(v1 + 176) = v15;
  *(_QWORD *)(v1 + 192) = v16;
  swift_bridgeObjectRetain(v12);
  swift_bridgeObjectRetain(v13);
  swift_bridgeObjectRetain(v14);
  swift_bridgeObjectRetain(v15);
  sub_10000389C(*((uint64_t *)&v15 + 1), v16);
  if (qword_100081730 != -1)
    swift_once(&qword_100081730, sub_100052718);
  v17 = *((_QWORD *)&xmmword_10008A840 + 1);
  v18 = qword_10008A850;
  v19 = unk_10008A858;
  v20 = xmmword_10008A860;
  v21 = qword_10008A870;
  *(_QWORD *)(v1 + 200) = xmmword_10008A840;
  *(_QWORD *)(v1 + 208) = v17;
  *(_QWORD *)(v1 + 216) = v18;
  *(_QWORD *)(v1 + 224) = v19;
  *(_OWORD *)(v1 + 232) = v20;
  *(_QWORD *)(v1 + 248) = v21;
  swift_bridgeObjectRetain(v17);
  swift_bridgeObjectRetain(v18);
  swift_bridgeObjectRetain(v19);
  swift_bridgeObjectRetain(v20);
  sub_10000389C(*((uint64_t *)&v20 + 1), v21);
  if (qword_100081738 != -1)
    swift_once(&qword_100081738, sub_10005275C);
  v22 = *((_QWORD *)&xmmword_10008A878 + 1);
  v23 = xmmword_10008A888;
  v24 = qword_10008A898;
  v25 = qword_10008A8A0;
  v26 = qword_10008A8A8;
  *(_QWORD *)(v1 + 256) = xmmword_10008A878;
  *(_QWORD *)(v1 + 264) = v22;
  *(_OWORD *)(v1 + 272) = v23;
  *(_QWORD *)(v1 + 288) = v24;
  *(_QWORD *)(v1 + 296) = v25;
  *(_QWORD *)(v1 + 304) = v26;
  qword_10008A790 = v1;
  swift_bridgeObjectRetain(v22);
  swift_bridgeObjectRetain(v23);
  swift_bridgeObjectRetain(*((_QWORD *)&v23 + 1));
  swift_bridgeObjectRetain(v24);
  return sub_10000389C(v25, v26);
}

void sub_100052634()
{
  *(_QWORD *)&xmmword_10008A798 = 0xD000000000000013;
  *((_QWORD *)&xmmword_10008A798 + 1) = 0x8000000100069AA0;
  qword_10008A7A8 = (uint64_t)&off_10007B090;
  unk_10008A7B0 = &_swiftEmptyArrayStorage;
  *((_QWORD *)&xmmword_10008A7B8 + 1) = 0;
  qword_10008A7C8 = 0;
  *(_QWORD *)&xmmword_10008A7B8 = &off_10007B0B8;
}

void sub_100052680()
{
  *(_QWORD *)&xmmword_10008A7D0 = 0xD000000000000019;
  *((_QWORD *)&xmmword_10008A7D0 + 1) = 0x8000000100069A80;
  qword_10008A7E0 = (uint64_t)&off_10007B0E0;
  unk_10008A7E8 = &_swiftEmptyArrayStorage;
  *((_QWORD *)&xmmword_10008A7F0 + 1) = 0;
  qword_10008A800 = 0;
  *(_QWORD *)&xmmword_10008A7F0 = &off_10007B108;
}

void sub_1000526CC()
{
  *(_QWORD *)&xmmword_10008A808 = 0x1000000000000032;
  *((_QWORD *)&xmmword_10008A808 + 1) = 0x8000000100069A40;
  qword_10008A818 = (uint64_t)&off_10007B130;
  unk_10008A820 = &off_10007B158;
  *((_QWORD *)&xmmword_10008A828 + 1) = 0;
  qword_10008A838 = 0;
  *(_QWORD *)&xmmword_10008A828 = &off_10007B180;
}

void sub_100052718()
{
  *(_QWORD *)&xmmword_10008A840 = 0x736B636F4CLL;
  *((_QWORD *)&xmmword_10008A840 + 1) = 0xE500000000000000;
  qword_10008A850 = (uint64_t)&off_10007B1A8;
  unk_10008A858 = &_swiftEmptyArrayStorage;
  *((_QWORD *)&xmmword_10008A860 + 1) = 0;
  qword_10008A870 = 0;
  *(_QWORD *)&xmmword_10008A860 = &off_10007B1D0;
}

void sub_10005275C()
{
  *(_QWORD *)&xmmword_10008A878 = 0xD000000000000010;
  *((_QWORD *)&xmmword_10008A878 + 1) = 0x8000000100069A20;
  *(_QWORD *)&xmmword_10008A888 = &off_10007B1F8;
  *((_QWORD *)&xmmword_10008A888 + 1) = &_swiftEmptyArrayStorage;
  qword_10008A8A0 = 0;
  qword_10008A8A8 = 0;
  qword_10008A898 = (uint64_t)&off_10007B220;
}

unint64_t sub_1000527A8(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;
  unsigned __int8 v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t result;
  char v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  char v16;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return (unint64_t)&_swiftEmptyDictionarySingleton;
  sub_100003704(&qword_100083110);
  v3 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)(v1);
  v4 = *(_BYTE *)(a1 + 32);
  v6 = *(_QWORD *)(a1 + 40);
  v5 = *(_QWORD *)(a1 + 48);
  result = sub_10000A65C(v4);
  if ((v8 & 1) != 0)
  {
LABEL_7:
    __break(1u);
LABEL_8:
    swift_bridgeObjectRetain(v5);
    return (unint64_t)v3;
  }
  v9 = (_QWORD *)(a1 + 72);
  while (1)
  {
    *(_QWORD *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    *(_BYTE *)(v3[6] + result) = v4;
    v10 = (_QWORD *)(v3[7] + 16 * result);
    *v10 = v6;
    v10[1] = v5;
    v11 = v3[2];
    v12 = __OFADD__(v11, 1);
    v13 = v11 + 1;
    if (v12)
      break;
    v3[2] = v13;
    if (!--v1)
      goto LABEL_8;
    v14 = v9 + 3;
    v4 = *((_BYTE *)v9 - 16);
    v6 = *(v9 - 1);
    v15 = *v9;
    swift_bridgeObjectRetain(v5);
    result = sub_10000A65C(v4);
    v9 = v14;
    v5 = v15;
    if ((v16 & 1) != 0)
      goto LABEL_7;
  }
  __break(1u);
  return result;
}

unint64_t sub_1000528B4@<X0>(unint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  unsigned __int8 v5;
  _QWORD *v6;
  char v7;
  uint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  unint64_t v16;
  char v17;
  uint64_t *v18;
  _QWORD *v19;
  char v20;
  uint64_t *v21;
  _QWORD *v22;
  unint64_t v23;
  char v24;
  uint64_t *v25;
  _QWORD *v26;
  char v27;
  uint64_t *v28;
  uint64_t v29;
  _QWORD *v30;
  unint64_t v31;
  char v32;
  uint64_t *v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;

  v3 = a2;
  if (a2)
  {
    v5 = result;
    if (a2 == 1)
    {
      if (qword_1000816E8 != -1)
        result = swift_once(&qword_1000816E8, sub_100051450);
      v6 = off_1000830B0;
      if (*((_QWORD *)off_1000830B0 + 2) && (result = sub_10000A65C(v5), (v7 & 1) != 0))
      {
        v8 = (uint64_t *)(v6[7] + 16 * result);
        v10 = *v8;
        v9 = v8[1];
        result = swift_bridgeObjectRetain(v9);
      }
      else
      {
        v10 = 0;
        v9 = 0xE000000000000000;
      }
      if (qword_1000816F0 != -1)
        result = swift_once(&qword_1000816F0, sub_1000514A0);
      v19 = off_1000830B8;
      if (*((_QWORD *)off_1000830B8 + 2) && (result = sub_10000A65C(v5), (v20 & 1) != 0))
      {
        v21 = (uint64_t *)(v19[7] + 16 * result);
        v11 = *v21;
        v12 = v21[1];
        result = swift_bridgeObjectRetain(v12);
      }
      else
      {
        v11 = 0;
        v12 = 0xE000000000000000;
      }
      if (qword_100081700 != -1)
        result = swift_once(&qword_100081700, sub_100051B9C);
      v26 = off_1000830C8;
      if (*((_QWORD *)off_1000830C8 + 2) && (result = sub_10000A65C(v5), (v27 & 1) != 0))
      {
        v28 = (uint64_t *)(v26[7] + 16 * result);
        v13 = *v28;
        v14 = v28[1];
        result = swift_bridgeObjectRetain(v14);
      }
      else
      {
        v13 = 0;
        v14 = 0xE000000000000000;
      }
    }
    else
    {
      if (qword_1000816E8 != -1)
        swift_once(&qword_1000816E8, sub_100051450);
      v15 = off_1000830B0;
      if (*((_QWORD *)off_1000830B0 + 2) && (v16 = sub_10000A65C(v5), (v17 & 1) != 0))
      {
        v18 = (uint64_t *)(v15[7] + 16 * v16);
        v10 = *v18;
        v9 = v18[1];
        swift_bridgeObjectRetain(v9);
      }
      else
      {
        v10 = 0;
        v9 = 0xE000000000000000;
      }
      if (qword_1000816F8 != -1)
        swift_once(&qword_1000816F8, sub_100051820);
      v22 = off_1000830C0;
      if (*((_QWORD *)off_1000830C0 + 2) && (v23 = sub_10000A65C(v5), (v24 & 1) != 0))
      {
        v25 = (uint64_t *)(v22[7] + 16 * v23);
        v11 = *v25;
        v12 = v25[1];
        swift_bridgeObjectRetain(v12);
      }
      else
      {
        v11 = 0;
        v12 = 0xE000000000000000;
      }
      if (qword_100081708 != -1)
        swift_once(&qword_100081708, sub_100051F90);
      v29 = 7695397;
      v30 = off_1000830D0;
      if (*((_QWORD *)off_1000830D0 + 2) && (v31 = sub_10000A65C(v5), (v32 & 1) != 0))
      {
        v33 = (uint64_t *)(v30[7] + 16 * v31);
        v29 = *v33;
        v34 = v33[1];
        swift_bridgeObjectRetain(v34);
      }
      else
      {
        v34 = 0xE300000000000000;
      }
      v35 = sub_100003704(&qword_1000825B0);
      v36 = swift_allocObject(v35, 72, 7);
      *(_OWORD *)(v36 + 16) = xmmword_1000607D0;
      *(_QWORD *)(v36 + 56) = &type metadata for Int;
      *(_QWORD *)(v36 + 64) = &protocol witness table for Int;
      *(_QWORD *)(v36 + 32) = v3;
      v13 = String.init(format:_:)(v29, v34, v36);
      v14 = v37;
      result = swift_bridgeObjectRelease(v34);
    }
    v3 = v10;
  }
  else
  {
    v9 = 0;
    v11 = 0;
    v12 = 0;
    v13 = 0;
    v14 = 0;
  }
  *(_QWORD *)a3 = v3;
  *(_QWORD *)(a3 + 8) = v9;
  *(_QWORD *)(a3 + 16) = v11;
  *(_QWORD *)(a3 + 24) = v12;
  *(_QWORD *)(a3 + 32) = v13;
  *(_QWORD *)(a3 + 40) = v14;
  *(_BYTE *)(a3 + 48) = 0;
  return result;
}

void *sub_100052BE8(void *a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v7;
  void *v11;
  uint64_t v12;
  uint64_t i;
  id v14;
  uint64_t v15;
  uint64_t v16;
  void *v20;
  void *v21;

  v21 = a1;
  v7 = v6;
  v11 = a1;
  if ((unint64_t)a2 >> 62)
    goto LABEL_13;
  v12 = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain(a2);
  for (; v12; v12 = _CocoaArrayWrapper.endIndex.getter(v16))
  {
    for (i = 4; ; ++i)
    {
      v14 = (a2 & 0xC000000000000001) != 0
          ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(i - 4, a2)
          : *(id *)(a2 + 8 * i);
      v11 = v14;
      v15 = i - 3;
      if (__OFADD__(i - 4, 1))
        break;
      v20 = v14;
      sub_100050050(&v21, &v20, a3, a4, a5, a6);
      if (v7)
      {
        swift_bridgeObjectRelease(a2);

        return v11;
      }

      if (v15 == v12)
      {
        swift_bridgeObjectRelease(a2);
        return v21;
      }
    }
    __break(1u);
LABEL_13:
    if (a2 < 0)
      v16 = a2;
    else
      v16 = a2 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a2);
  }
  swift_bridgeObjectRelease(a2);
  return v11;
}

double *sub_100052D20(double *a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v7;
  double *v11;
  uint64_t v12;
  uint64_t i;
  double *v14;
  uint64_t v15;
  double *v16;
  uint64_t v17;
  double *v21;
  double *v22;

  v22 = a1;
  v7 = v6;
  v11 = a1;
  if ((unint64_t)a2 >> 62)
    goto LABEL_13;
  v12 = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain(a2);
  for (; v12; v12 = _CocoaArrayWrapper.endIndex.getter(v17))
  {
    for (i = 4; ; ++i)
    {
      v14 = (a2 & 0xC000000000000001) != 0
          ? (double *)specialized _ArrayBuffer._getElementSlowPath(_:)(i - 4, a2)
          : (double *)*(id *)(a2 + 8 * i);
      v11 = v14;
      v15 = i - 3;
      if (__OFADD__(i - 4, 1))
        break;
      v21 = v14;
      sub_1000507FC(&v22, (void **)&v21, a3, a4, a5, a6);
      if (v7)
      {
        v16 = v22;
        swift_bridgeObjectRelease(a2);

        swift_bridgeObjectRelease(v16);
        return v11;
      }

      if (v15 == v12)
      {
        swift_bridgeObjectRelease(a2);
        return v22;
      }
    }
    __break(1u);
LABEL_13:
    if (a2 < 0)
      v17 = a2;
    else
      v17 = a2 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a2);
  }
  swift_bridgeObjectRelease(a2);
  return v11;
}

uint64_t sub_100052E64(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 120) = a1;
  return swift_task_switch(sub_100052E7C, 0, 0);
}

uint64_t sub_100052E7C()
{
  uint64_t v0;
  void *v1;
  id v2;
  uint64_t v3;
  void *v4;
  void *v5;
  _QWORD *v6;

  v1 = *(void **)(v0 + 120);
  if (v1)
  {
    v2 = v1;
    v3 = HMAccessory.subscript.getter((double *)0x13);
    *(_QWORD *)(v0 + 128) = v3;
    if (v3)
    {
      v4 = (void *)v3;
      v5 = HMService.subscript.getter(0x1Fu);
      *(_QWORD *)(v0 + 136) = v5;
      if (v5)
      {
        v6 = (_QWORD *)swift_task_alloc(dword_100082264);
        *(_QWORD *)(v0 + 144) = v6;
        *v6 = v0;
        v6[1] = sub_100052F40;
        return HMCharacteristic.fetchedValue()(v0 + 48);
      }

    }
  }
  return (*(uint64_t (**)(_QWORD, uint64_t))(v0 + 8))(0, 1);
}

uint64_t sub_100052F40()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 144));
  return swift_task_switch(sub_100053B2C, 0, 0);
}

uint64_t sub_100052F94(uint64_t a1, char a2)
{
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  _BYTE *v8;
  unint64_t v9;
  const char *v10;
  unint64_t v11;
  const char *v12;
  uint64_t v13;
  _BYTE v15[16];

  v4 = 0x9380E29380E2;
  type metadata accessor for Locale(0);
  __chkstk_darwin();
  v6 = &v15[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  type metadata accessor for String.LocalizationValue(0);
  __chkstk_darwin();
  v8 = &v15[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  if ((a2 & 1) == 0)
  {
    switch(a1)
    {
      case 0:
        v9 = 0xD000000000000022;
        v10 = "HFCharacteristicValueDoorStateOpen";
        goto LABEL_6;
      case 1:
        v9 = 0xD000000000000024;
        v10 = "HFCharacteristicValueDoorStateClosed";
LABEL_6:
        v11 = (unint64_t)(v10 - 32) | 0x8000000000000000;
        goto LABEL_11;
      case 2:
        v12 = "HFCharacteristicValueDoorStateOpening";
        goto LABEL_10;
      case 3:
        v12 = "HFCharacteristicValueDoorStateClosing";
        goto LABEL_10;
      case 4:
        v12 = "HFCharacteristicValueDoorStateStopped";
LABEL_10:
        v11 = (unint64_t)(v12 - 32) | 0x8000000000000000;
        v9 = 0xD000000000000025;
LABEL_11:
        v13 = String.LocalizationValue.init(stringLiteral:)(v9, v11);
        static Locale.current.getter(v13);
        v4 = String.init(localized:table:bundle:locale:comment:)(v8, 0x696C61636F4C4648, 0xED0000656C62617ALL, 0, v6, 0, 0, 256);
        break;
      default:
        return v4;
    }
  }
  return v4;
}

unint64_t sub_10005312C(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;
  _QWORD *i;
  unsigned __int8 v5;
  uint64_t v6;
  unint64_t result;
  char v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;

  v1 = *(_QWORD *)(a1 + 16);
  if (v1)
  {
    sub_100003704(&qword_100081C80);
    v3 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)(v1);
    for (i = (_QWORD *)(a1 + 40); ; i += 2)
    {
      v5 = *((_BYTE *)i - 8);
      v6 = *i;
      result = sub_10000A65C(v5);
      if ((v8 & 1) != 0)
        break;
      *(_QWORD *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
      *(_BYTE *)(v3[6] + result) = v5;
      *(_QWORD *)(v3[7] + 8 * result) = v6;
      v9 = v3[2];
      v10 = __OFADD__(v9, 1);
      v11 = v9 + 1;
      if (v10)
        goto LABEL_10;
      v3[2] = v11;
      if (!--v1)
        return (unint64_t)v3;
    }
    __break(1u);
LABEL_10:
    __break(1u);
  }
  else
  {
    return (unint64_t)&_swiftEmptyDictionarySingleton;
  }
  return result;
}

uint64_t sub_100053200(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 120) = a1;
  return swift_task_switch(sub_100053218, 0, 0);
}

uint64_t sub_100053218()
{
  uint64_t v0;
  void *v1;
  id v2;
  uint64_t v3;
  void *v4;
  void *v5;
  _QWORD *v6;

  v1 = *(void **)(v0 + 120);
  if (v1)
  {
    v2 = v1;
    v3 = HMAccessory.subscript.getter((double *)0x1E);
    *(_QWORD *)(v0 + 128) = v3;
    if (v3)
    {
      v4 = (void *)v3;
      v5 = HMService.subscript.getter(0x26u);
      *(_QWORD *)(v0 + 136) = v5;
      if (v5)
      {
        v6 = (_QWORD *)swift_task_alloc(dword_100082264);
        *(_QWORD *)(v0 + 144) = v6;
        *v6 = v0;
        v6[1] = sub_1000532DC;
        return HMCharacteristic.fetchedValue()(v0 + 48);
      }

    }
  }
  return (*(uint64_t (**)(_QWORD, uint64_t))(v0 + 8))(0, 1);
}

uint64_t sub_1000532DC()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 144));
  return swift_task_switch(sub_100053330, 0, 0);
}

uint64_t sub_100053330()
{
  uint64_t v0;
  id *v1;
  uint64_t v2;
  int v3;
  void *v4;
  void *v5;
  void *v6;
  id v7;
  id v8;
  uint64_t v9;
  void *v10;
  void *v11;

  if (!*(_QWORD *)(v0 + 72))
  {
    v10 = *(void **)(v0 + 128);
    v11 = *(void **)(v0 + 120);

    sub_10000E534(v0 + 48);
LABEL_6:
    v8 = 0;
    v9 = 1;
    return (*(uint64_t (**)(id, uint64_t))(v0 + 8))(v8, v9);
  }
  v1 = (id *)(v0 + 112);
  sub_10000E574((_OWORD *)(v0 + 48), (_OWORD *)(v0 + 16));
  sub_10000E584(v0 + 16, v0 + 80);
  v2 = sub_1000038AC(0, &qword_100081E10, NSNumber_ptr);
  v3 = swift_dynamicCast(v0 + 112, v0 + 80, (char *)&type metadata for Any + 8, v2, 6);
  v5 = *(void **)(v0 + 128);
  v4 = *(void **)(v0 + 136);
  v6 = *(void **)(v0 + 120);
  if (!v3)
  {

    sub_1000130F0((_QWORD *)(v0 + 16));
    goto LABEL_6;
  }
  v7 = *v1;
  v8 = objc_msgSend(*v1, "integerValue");

  sub_1000130F0((_QWORD *)(v0 + 16));
  v9 = 0;
  return (*(uint64_t (**)(id, uint64_t))(v0 + 8))(v8, v9);
}

uint64_t sub_100053454(uint64_t a1, char a2)
{
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  _BYTE *v8;
  unint64_t v9;
  const char *v10;
  const char *v11;
  unint64_t v12;
  uint64_t v13;
  _BYTE v15[16];

  v4 = 0x9380E29380E2;
  type metadata accessor for Locale(0);
  __chkstk_darwin();
  v6 = &v15[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  type metadata accessor for String.LocalizationValue(0);
  __chkstk_darwin();
  v8 = &v15[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  if ((a2 & 1) == 0)
  {
    switch(a1)
    {
      case 0:
        v9 = 0xD000000000000030;
        v10 = "HFCharacteristicValueLockMechanismStateUnsecured";
        goto LABEL_7;
      case 1:
        v11 = "HFCharacteristicValueLockMechanismStateSecured";
        goto LABEL_9;
      case 2:
        v9 = 0xD00000000000002DLL;
        v10 = "HFCharacteristicValueLockMechanismStateJammed";
LABEL_7:
        v12 = (unint64_t)(v10 - 32) | 0x8000000000000000;
        goto LABEL_10;
      case 3:
        v11 = "HFCharacteristicValueLockMechanismStateUnknown";
LABEL_9:
        v12 = (unint64_t)(v11 - 32) | 0x8000000000000000;
        v9 = 0xD00000000000002ELL;
LABEL_10:
        v13 = String.LocalizationValue.init(stringLiteral:)(v9, v12);
        static Locale.current.getter(v13);
        v4 = String.init(localized:table:bundle:locale:comment:)(v8, 0x696C61636F4C4648, 0xED0000656C62617ALL, 0, v6, 0, 0, 256);
        break;
      default:
        return v4;
    }
  }
  return v4;
}

uint64_t sub_1000535E0(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 120) = a1;
  return swift_task_switch(sub_1000535F8, 0, 0);
}

uint64_t sub_1000535F8()
{
  uint64_t v0;
  void *v1;
  id v2;
  uint64_t v3;
  void *v4;
  void *v5;
  _QWORD *v6;

  v1 = *(void **)(v0 + 120);
  if (v1)
  {
    v2 = v1;
    v3 = HMAccessory.subscript.getter((double *)0x23);
    *(_QWORD *)(v0 + 128) = v3;
    if (v3)
    {
      v4 = (void *)v3;
      v5 = HMService.subscript.getter(0x2Au);
      *(_QWORD *)(v0 + 136) = v5;
      if (v5)
      {
        v6 = (_QWORD *)swift_task_alloc(dword_100082264);
        *(_QWORD *)(v0 + 144) = v6;
        *v6 = v0;
        v6[1] = sub_100052F40;
        return HMCharacteristic.fetchedValue()(v0 + 48);
      }

    }
  }
  return (*(uint64_t (**)(_QWORD, uint64_t))(v0 + 8))(0, 1);
}

uint64_t sub_1000536BC(uint64_t a1, char a2)
{
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  _BYTE *v8;
  const char *v9;
  unint64_t v10;
  unint64_t v11;
  const char *v12;
  uint64_t v13;
  _BYTE v15[16];

  v4 = 0x9380E29380E2;
  type metadata accessor for Locale(0);
  __chkstk_darwin();
  v6 = &v15[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  type metadata accessor for String.LocalizationValue(0);
  __chkstk_darwin();
  v8 = &v15[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  if ((a2 & 1) == 0)
  {
    switch(a1)
    {
      case 0:
        v9 = "HFCharacteristicValueCurrentSecuritySystemStateStayArm";
        goto LABEL_6;
      case 1:
        v9 = "HFCharacteristicValueCurrentSecuritySystemStateAwayArm";
LABEL_6:
        v10 = (unint64_t)(v9 - 32) | 0x8000000000000000;
        v11 = 0xD000000000000036;
        goto LABEL_11;
      case 2:
        v11 = 0xD000000000000037;
        v12 = "HFCharacteristicValueCurrentSecuritySystemStateNightArm";
        goto LABEL_10;
      case 3:
        v11 = 0xD000000000000037;
        v12 = "HFCharacteristicValueCurrentSecuritySystemStateDisarmed";
        goto LABEL_10;
      case 4:
        v11 = 0xD000000000000038;
        v12 = "HFCharacteristicValueCurrentSecuritySystemStateTriggered";
LABEL_10:
        v10 = (unint64_t)(v12 - 32) | 0x8000000000000000;
LABEL_11:
        v13 = String.LocalizationValue.init(stringLiteral:)(v11, v10);
        static Locale.current.getter(v13);
        v4 = String.init(localized:table:bundle:locale:comment:)(v8, 0x696C61636F4C4648, 0xED0000656C62617ALL, 0, v6, 0, 0, 256);
        break;
      default:
        return v4;
    }
  }
  return v4;
}

uint64_t sub_100053860()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100053884(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t result;

  if (a2)
  {
    swift_bridgeObjectRetain(a2);
    swift_bridgeObjectRetain(a4);
    return swift_bridgeObjectRetain(a6);
  }
  return result;
}

uint64_t sub_1000538C0(uint64_t a1, void (*a2)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))
{
  a2(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(unsigned __int8 *)(a1 + 48));
  return a1;
}

uint64_t sub_1000538FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t result;

  if (a2)
  {
    swift_bridgeObjectRelease(a2);
    swift_bridgeObjectRelease(a4);
    return swift_bridgeObjectRelease(a6);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for SecurityIssue(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFA)
    goto LABEL_17;
  if (a2 + 6 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 6) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 6;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 6;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 6;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 7;
  v8 = v6 - 7;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for SecurityIssue(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 6 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 6) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFA)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF9)
    return ((uint64_t (*)(void))((char *)&loc_100053A14 + 4 * byte_100063F87[v4]))();
  *a1 = a2 + 6;
  return ((uint64_t (*)(void))((char *)sub_100053A48 + 4 * byte_100063F82[v4]))();
}

uint64_t sub_100053A48(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100053A50(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100053A58);
  return result;
}

uint64_t sub_100053A64(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100053A6CLL);
  *(_BYTE *)result = a2 + 6;
  return result;
}

uint64_t sub_100053A70(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100053A78(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for SecurityIssue()
{
  return &type metadata for SecurityIssue;
}

unint64_t sub_100053A98()
{
  unint64_t result;

  result = qword_100083118;
  if (!qword_100083118)
  {
    result = swift_getWitnessTable(&unk_100064064, &type metadata for SecurityIssue);
    atomic_store(result, (unint64_t *)&qword_100083118);
  }
  return result;
}

unint64_t sub_100053AE0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100083120;
  if (!qword_100083120)
  {
    v1 = sub_100003744(&qword_100083128);
    result = swift_getWitnessTable(&protocol conformance descriptor for [A], v1);
    atomic_store(result, (unint64_t *)&qword_100083120);
  }
  return result;
}

uint64_t String.serviceKind.getter(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  swift_bridgeObjectRetain(a2);
  LODWORD(result) = _s20HomeWidgetLockScreen11ServiceKindO8rawValueACSgSS_tcfC_0(a1, a2);
  if (result == 51)
    return 0;
  else
    return result;
}

uint64_t ServiceKind.requiredCharacteristicKinds.getter(unsigned __int8 a1)
{
  return ((uint64_t (*)(_UNKNOWN **))((char *)sub_100053BA0 + 4 * byte_100064090[a1]))(&off_10007B298);
}

void *sub_100053BA0()
{
  return &_swiftEmptySetSingleton;
}

Swift::Int sub_100053BAC()
{
  return sub_100020938((uint64_t)&off_10007B2C0);
}

Swift::Int sub_100053BB8()
{
  return sub_100020938((uint64_t)&off_10007B2E8);
}

Swift::Int sub_100053BC4()
{
  return sub_100020938((uint64_t)&off_10007B310);
}

Swift::Int sub_100053BD0()
{
  return sub_100020938((uint64_t)&off_10007B338);
}

Swift::Int sub_100053BDC()
{
  return sub_100020938((uint64_t)&off_10007B360);
}

Swift::Int sub_100053BE8()
{
  return sub_100020938((uint64_t)&off_10007B388);
}

Swift::Int sub_100053BF4()
{
  return sub_100020938((uint64_t)&off_10007B3B0);
}

Swift::Int sub_100053C00()
{
  return sub_100020938((uint64_t)&off_10007B3D8);
}

Swift::Int sub_100053C0C()
{
  return sub_100020938((uint64_t)&off_10007B400);
}

Swift::Int sub_100053C18()
{
  return sub_100020938((uint64_t)&off_10007B428);
}

Swift::Int sub_100053C24()
{
  return sub_100020938((uint64_t)&off_10007B450);
}

Swift::Int sub_100053C30()
{
  return sub_100020938((uint64_t)&off_10007B478);
}

Swift::Int sub_100053C3C()
{
  return sub_100020938((uint64_t)&off_10007B4A0);
}

Swift::Int sub_100053C48()
{
  return sub_100020938((uint64_t)&off_10007B4C8);
}

Swift::Int sub_100053C54()
{
  return sub_100020938((uint64_t)&off_10007B4F0);
}

Swift::Int sub_100053C60()
{
  return sub_100020938((uint64_t)&off_10007B518);
}

Swift::Int sub_100053C6C()
{
  return sub_100020938((uint64_t)&off_10007B540);
}

Swift::Int sub_100053C78()
{
  return sub_100020938((uint64_t)&off_10007B568);
}

Swift::Int sub_100053C84()
{
  return sub_100020938((uint64_t)&off_10007B590);
}

Swift::Int sub_100053C90()
{
  return sub_100020938((uint64_t)&off_10007B5B8);
}

Swift::Int sub_100053C9C()
{
  return sub_100020938((uint64_t)&off_10007B5E0);
}

Swift::Int sub_100053CA8()
{
  return sub_100020938((uint64_t)&off_10007B608);
}

Swift::Int sub_100053CB4()
{
  return sub_100020938((uint64_t)&off_10007B630);
}

Swift::Int sub_100053CC0()
{
  return sub_100020938((uint64_t)&off_10007B658);
}

Swift::Int sub_100053CCC()
{
  return sub_100020938((uint64_t)&off_10007B680);
}

Swift::Int sub_100053CD8()
{
  return sub_100020938((uint64_t)&off_10007B6A8);
}

Swift::Int sub_100053CE4()
{
  return sub_100020938((uint64_t)&off_10007B6D0);
}

Swift::Int sub_100053CF0()
{
  return sub_100020938((uint64_t)&off_10007B6F8);
}

Swift::Int sub_100053CFC()
{
  return sub_100020938((uint64_t)&off_10007B748);
}

Swift::Int sub_100053D08()
{
  return sub_100020938((uint64_t)&off_10007B770);
}

Swift::Int sub_100053D14()
{
  return sub_100020938((uint64_t)&off_10007B798);
}

Swift::Int sub_100053D20()
{
  return sub_100020938((uint64_t)&off_10007B7C0);
}

Swift::Int sub_100053D2C()
{
  return sub_100020938((uint64_t)&off_10007B7E8);
}

Swift::Int sub_100053D38()
{
  return sub_100020938((uint64_t)&off_10007B810);
}

Swift::Int sub_100053D44()
{
  return sub_100020938((uint64_t)&off_10007B838);
}

Swift::Int sub_100053D50()
{
  return sub_100020938((uint64_t)&off_10007B860);
}

Swift::Int sub_100053D5C()
{
  return sub_100020938((uint64_t)&off_10007B888);
}

Swift::Int sub_100053D68()
{
  return sub_100020938((uint64_t)&off_10007B8B0);
}

Swift::Int sub_100053D74()
{
  return sub_100020938((uint64_t)&off_10007B8D8);
}

Swift::Int sub_100053D80()
{
  return sub_100020938((uint64_t)&off_10007B900);
}

Swift::Int sub_100053D8C()
{
  return sub_100020938((uint64_t)&off_10007B720);
}

void *ServiceKind.optionalCharacteristicKinds.getter(char a1)
{
  char v1;

  v1 = a1 - 1;
  if ((a1 - 1) <= 0x31u && ((0x373BFFEBFE719uLL >> v1) & 1) != 0)
    return (void *)sub_100020938((uint64_t)off_10007E920[v1]);
  else
    return &_swiftEmptySetSingleton;
}

unint64_t ServiceKind.rawValue.getter(unsigned __int8 a1)
{
  return ((unint64_t (*)())((char *)sub_100053E0C + 4 * byte_1000640C3[a1]))();
}

unint64_t sub_100053E0C()
{
  return 0xD000000000000024;
}

void ServiceKind.localizedDescription.getter(char a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t ObjCClassFromMetadata;
  void *v6;
  id v7;
  NSString v8;
  id v9;

  v2 = type metadata accessor for Locale(0);
  __chkstk_darwin(v2);
  v3 = type metadata accessor for String.LocalizationValue(0);
  __chkstk_darwin(v3);
  v4 = sub_10002B5B4();
  ObjCClassFromMetadata = swift_getObjCClassFromMetadata(v4);
  v6 = (void *)objc_opt_self(NSBundle);
  v7 = objc_msgSend(v6, "bundleForClass:", ObjCClassFromMetadata);
  v8 = String._bridgeToObjectiveC()();
  v9 = objc_msgSend(v6, "bundleWithIdentifier:", v8);

  __asm { BR              X10 }
}

uint64_t sub_1000541A0()
{
  void *v0;
  void *v1;

  return 0;
}

_UNKNOWN **static ServiceKind.allCases.getter()
{
  return &off_10007BF48;
}

uint64_t sub_100054898(unsigned __int8 *a1, unsigned __int8 *a2)
{
  unsigned __int8 v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;

  v2 = *a2;
  ServiceKind.rawValue.getter(*a1);
  v4 = v3;
  ServiceKind.rawValue.getter(v2);
  if (v4 == v5)
  {
    v7 = 1;
    v6 = v4;
  }
  else
  {
    v6 = v5;
    v7 = _stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000024, v4, 0xD000000000000024, v5, 0);
  }
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(v6);
  return v7 & 1;
}

Swift::Int sub_100054920()
{
  unsigned __int8 *v0;
  unsigned __int8 v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD v5[9];

  v1 = *v0;
  Hasher.init(_seed:)(v5, 0);
  ServiceKind.rawValue.getter(v1);
  v3 = v2;
  String.hash(into:)(v5, 0xD000000000000024, v2);
  swift_bridgeObjectRelease(v3);
  return Hasher._finalize()();
}

uint64_t sub_100054980(uint64_t a1)
{
  unsigned __int8 *v1;
  uint64_t v3;
  uint64_t v4;

  ServiceKind.rawValue.getter(*v1);
  v4 = v3;
  String.hash(into:)(a1, 0xD000000000000024, v3);
  return swift_bridgeObjectRelease(v4);
}

Swift::Int sub_1000549C0(uint64_t a1)
{
  unsigned __int8 *v1;
  unsigned __int8 v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD v6[9];

  v2 = *v1;
  Hasher.init(_seed:)(v6, a1);
  ServiceKind.rawValue.getter(v2);
  v4 = v3;
  String.hash(into:)(v6, 0xD000000000000024, v3);
  swift_bridgeObjectRelease(v4);
  return Hasher._finalize()();
}

uint64_t sub_100054A1C@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = _s20HomeWidgetLockScreen11ServiceKindO8rawValueACSgSS_tcfC_0(*a1, a1[1]);
  *a2 = result;
  return result;
}

unint64_t sub_100054A48@<X0>(_QWORD *a1@<X8>)
{
  unsigned __int8 *v1;
  unint64_t result;
  uint64_t v4;

  result = ServiceKind.rawValue.getter(*v1);
  *a1 = 0xD000000000000024;
  a1[1] = v4;
  return result;
}

void sub_100054A78(_QWORD *a1@<X8>)
{
  *a1 = &off_10007BF48;
}

uint64_t sub_100054A88(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_100055A28();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_100054AE4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_100055A28();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

uint64_t ServiceKind.allRelevantCharacteristicKinds.getter(char a1)
{
  uint64_t v2;
  void *v3;

  v2 = ServiceKind.requiredCharacteristicKinds.getter(a1);
  v3 = ServiceKind.optionalCharacteristicKinds.getter(a1);
  return sub_10002CA64((uint64_t)v3, v2);
}

void sub_100054B60()
{
  char *v0;

  ServiceKind.localizedDescription.getter(*v0);
}

void ServiceKind.pluralLocalizedDescription.getter(char a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = type metadata accessor for Locale(0);
  __chkstk_darwin(v2);
  v3 = type metadata accessor for String.LocalizationValue(0);
  __chkstk_darwin(v3);
  __asm { BR              X10 }
}

uint64_t sub_100054C18()
{
  return 0;
}

uint64_t ServiceKind.iconSymbol.getter(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)nullsub_1 + 4 * byte_10006415C[a1]))(0xD000000000000019, 0x8000000100069FF0);
}

uint64_t sub_1000551CC()
{
  return 0x69662E6F65646976;
}

uint64_t sub_1000551E8()
{
  return 0x6C69662E706F7264;
}

uint64_t sub_100055204()
{
  return 0x656D6F6D72656874;
}

uint64_t sub_100055224()
{
  return 0x656C6B6E69727073;
}

uint64_t sub_100055248(uint64_t a1)
{
  return a1 + 9;
}

uint64_t ServiceKind.iconSymbolActivated.getter(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)nullsub_2 + 4 * byte_10006418F[a1]))(0xD000000000000019, 0x8000000100069FF0);
}

uint64_t sub_1000554D0()
{
  return 0x69662E6F65646976;
}

uint64_t sub_1000554EC()
{
  return 0x6564616C626E6166;
}

uint64_t sub_10005550C()
{
  return 0x6C69662E706F7264;
}

uint64_t sub_100055528()
{
  return 0x656D6F6D72656874;
}

uint64_t sub_100055548(uint64_t a1)
{
  return a1 + 2;
}

_UNKNOWN **ServiceKind.umbrellaCategories.getter(char a1)
{
  if ((a1 - 3) > 0x2Fu)
    return (_UNKNOWN **)&_swiftEmptyArrayStorage;
  else
    return off_10007EAB0[(char)(a1 - 3)];
}

uint64_t ServiceKind.togglingCharacteristicKind.getter(unsigned __int8 a1)
{
  int v1;
  uint64_t result;

  v1 = a1 - 3;
  result = 3;
  switch(v1)
  {
    case 0:
    case 13:
    case 14:
    case 17:
    case 18:
    case 21:
    case 39:
    case 41:
    case 44:
    case 45:
      return result;
    case 25:
    case 31:
    case 38:
      result = 105;
      break;
    case 28:
    case 35:
      result = 84;
      break;
    default:
      result = 174;
      break;
  }
  return result;
}

uint64_t _s20HomeWidgetLockScreen11ServiceKindO8rawValueACSgSS_tcfC_0(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = _findStringSwitchCaseWithCache(cases:string:cache:)(&off_100079598, a1, a2, &unk_100081760);
  swift_bridgeObjectRelease(a2);
  if (v3 >= 0x33)
    return 51;
  else
    return v3;
}

unint64_t sub_100055838()
{
  unint64_t result;

  result = qword_100083130;
  if (!qword_100083130)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for ServiceKind, &type metadata for ServiceKind);
    atomic_store(result, (unint64_t *)&qword_100083130);
  }
  return result;
}

unint64_t sub_100055880()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100083138;
  if (!qword_100083138)
  {
    v1 = sub_100003744(&qword_100083140);
    result = swift_getWitnessTable(&protocol conformance descriptor for [A], v1);
    atomic_store(result, (unint64_t *)&qword_100083138);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for ServiceKind(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xCE)
    goto LABEL_17;
  if (a2 + 50 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 50) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 50;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 50;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 50;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 0x33;
  v8 = v6 - 51;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for ServiceKind(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 50 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 50) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xCE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xCD)
    return ((uint64_t (*)(void))((char *)&loc_1000559A8 + 4 * byte_1000641F5[v4]))();
  *a1 = a2 + 50;
  return ((uint64_t (*)(void))((char *)sub_1000559DC + 4 * byte_1000641F0[v4]))();
}

uint64_t sub_1000559DC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000559E4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1000559ECLL);
  return result;
}

uint64_t sub_1000559F8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100055A00);
  *(_BYTE *)result = a2 + 50;
  return result;
}

uint64_t sub_100055A04(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100055A0C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ServiceKind()
{
  return &type metadata for ServiceKind;
}

unint64_t sub_100055A28()
{
  unint64_t result;

  result = qword_100083148;
  if (!qword_100083148)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for ServiceKind, &type metadata for ServiceKind);
    atomic_store(result, (unint64_t *)&qword_100083148);
  }
  return result;
}

void *sub_100055A6C(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  void *v10;
  uint64_t v11;
  uint64_t i;
  id v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  void *v19;
  void *v20;

  v20 = a1;
  v6 = v5;
  v10 = a1;
  if ((unint64_t)a2 >> 62)
    goto LABEL_13;
  v11 = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain(a2);
  for (; v11; v11 = _CocoaArrayWrapper.endIndex.getter(v16))
  {
    for (i = 4; ; ++i)
    {
      v13 = (a2 & 0xC000000000000001) != 0
          ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(i - 4, a2)
          : *(id *)(a2 + 8 * i);
      v10 = v13;
      v14 = i - 3;
      if (__OFADD__(i - 4, 1))
        break;
      v19 = v13;
      sub_100017330((char *)&v20, &v19, a3, a4, a5);
      if (v6)
      {
        v15 = v20;
        swift_bridgeObjectRelease(a2);

        swift_bridgeObjectRelease(v15);
        return v10;
      }

      if (v14 == v11)
      {
        swift_bridgeObjectRelease(a2);
        return v20;
      }
    }
    __break(1u);
LABEL_13:
    if (a2 < 0)
      v16 = a2;
    else
      v16 = a2 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a2);
  }
  swift_bridgeObjectRelease(a2);
  return v10;
}

uint64_t sub_100055BB0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;

  v4[33] = a3;
  v4[34] = a4;
  v4[31] = a1;
  v4[32] = a2;
  return swift_task_switch(sub_100055BCC, 0, 0);
}

uint64_t sub_100055BCC()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  id v5;
  id v6;
  NSObject *v7;
  os_log_type_t v8;
  _BOOL4 v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t inited;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  uint64_t v23;
  _QWORD *v24;
  os_log_type_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  if (qword_100081680 != -1)
    swift_once(&qword_100081680, sub_100022448);
  v1 = v0 + 2;
  v2 = v0[34];
  v3 = (void *)v0[32];
  v4 = type metadata accessor for Logger(0);
  v0[35] = sub_100003884(v4, (uint64_t)static DataModel.widgetLogger);
  v5 = v3;
  swift_bridgeObjectRetain_n(v2, 2);
  v6 = v5;
  v7 = Logger.logObject.getter(v6);
  v8 = static os_log_type_t.default.getter();
  v9 = os_log_type_enabled(v7, v8);
  v10 = v0[34];
  if (v9)
  {
    v26 = v8;
    v11 = v0[33];
    v27 = v0[32];
    v12 = swift_slowAlloc(32, -1);
    v28 = swift_slowAlloc(96, -1);
    v29 = v28;
    *(_DWORD *)v12 = 136315650;
    swift_bridgeObjectRetain(v10);
    v0[28] = sub_10001DF04(v11, v10, &v29);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 28, v0 + 29, v12 + 4, v12 + 12);
    swift_bridgeObjectRelease_n(v10, 3);
    *(_WORD *)(v12 + 12) = 2080;
    v0[29] = sub_10001DF04(0xD00000000000001DLL, 0x8000000100067B60, &v29);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 29, v0 + 30, v12 + 14, v12 + 22);
    *(_WORD *)(v12 + 22) = 2080;
    if (v27)
    {
      v13 = objc_msgSend(v6, "name");
      v14 = static String._unconditionallyBridgeFromObjectiveC(_:)(v13);
      v16 = v15;

    }
    else
    {
      v16 = 0xE400000000000000;
      v14 = 1819047278;
    }
    v0[30] = sub_10001DF04(v14, v16, &v29);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 30, v0 + 31, v12 + 24, v12 + 32);
    swift_bridgeObjectRelease(v16);

    swift_arrayDestroy(v28, 3, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v28, -1, -1);
    swift_slowDealloc(v12, -1, -1);

    v1 = v0 + 2;
  }
  else
  {
    swift_bridgeObjectRelease_n(v0[34], 2);

  }
  if (qword_100081670 != -1)
    swift_once(&qword_100081670, sub_100021008);
  v17 = sub_100003704(&qword_1000817C0);
  inited = swift_initStackObject(v17, v1);
  v0[36] = inited;
  *(_OWORD *)(inited + 16) = xmmword_1000607D0;
  if (qword_100081658 != -1)
    swift_once(&qword_100081658, sub_1000183D8);
  v19 = *((_QWORD *)&xmmword_10008A598 + 1);
  v20 = qword_10008A5A8;
  v21 = unk_10008A5B0;
  v22 = xmmword_10008A5B8;
  v23 = qword_10008A5C8;
  *(_QWORD *)(inited + 32) = xmmword_10008A598;
  *(_QWORD *)(inited + 40) = v19;
  *(_QWORD *)(inited + 48) = v20;
  *(_QWORD *)(inited + 56) = v21;
  *(_OWORD *)(inited + 64) = v22;
  *(_QWORD *)(inited + 80) = v23;
  swift_bridgeObjectRetain(v19);
  swift_bridgeObjectRetain(v20);
  swift_bridgeObjectRetain(v21);
  swift_bridgeObjectRetain(v22);
  sub_10000389C(*((uint64_t *)&v22 + 1), v23);
  v24 = (_QWORD *)swift_task_alloc(dword_100081E74);
  v0[37] = v24;
  *v24 = v0;
  v24[1] = sub_100055F84;
  return DataModel.reloadCharacteristics(matching:for:fetchId:)(inited, v0[32], v0[33], v0[34]);
}

uint64_t sub_100055F84(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v3 = *(_QWORD *)(*(_QWORD *)v1 + 288);
  v2 = *(_QWORD *)(*(_QWORD *)v1 + 296);
  *(_QWORD *)(*(_QWORD *)v1 + 304) = a1;
  swift_task_dealloc(v2);
  swift_setDeallocating(v3);
  swift_arrayDestroy(v3 + 32, *(_QWORD *)(v3 + 16), &type metadata for CharacteristicFetchSpecification);
  return swift_task_switch(sub_100056000, 0, 0);
}

uint64_t sub_100056000()
{
  uint64_t v0;
  void *v1;
  __int128 v2;
  id v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  double *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  double v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  NSObject *v20;
  os_log_type_t v21;
  _BOOL4 v22;
  unint64_t v23;
  uint64_t v24;
  uint8_t *v25;
  uint64_t v26;
  uint64_t v27;
  double *v28;
  uint64_t v29;
  uint64_t v30;
  double *v31;
  double v32;
  uint64_t v33;
  double v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  NSObject *v40;
  os_log_type_t v41;
  _BOOL4 v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54[2];

  v1 = *(void **)(v0 + 256);
  v2 = *(_OWORD *)&qword_10008A5A8;
  *(_OWORD *)(v0 + 104) = xmmword_10008A598;
  *(_OWORD *)(v0 + 120) = v2;
  *(_OWORD *)(v0 + 136) = xmmword_10008A5B8;
  *(_QWORD *)(v0 + 152) = qword_10008A5C8;
  v53 = v0 + 216;
  if (v1)
  {
    v3 = objc_msgSend(v1, "accessories");
    v4 = sub_10002F9D4();
    v5 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v3, v4);

    *(_OWORD *)(v0 + 160) = *(_OWORD *)(v0 + 104);
    *(_OWORD *)(v0 + 176) = *(_OWORD *)(v0 + 120);
    v6 = *(_QWORD *)(v0 + 144);
    *(_QWORD *)(v0 + 192) = *(_QWORD *)(v0 + 136);
    v7 = *(_QWORD *)(v0 + 152);
    sub_1000038E4(v0 + 160);
    sub_10000390C((_QWORD *)(v0 + 176));
    sub_10000390C((_QWORD *)(v0 + 184));
    sub_10000390C((_QWORD *)(v0 + 192));
    sub_10000389C(v6, v7);
    v8 = sub_10001FE8C(v5, v0 + 104);
    sub_100003934(v0 + 160);
    sub_10000395C((_QWORD *)(v0 + 176));
    sub_10000395C((_QWORD *)(v0 + 184));
    sub_10000395C((_QWORD *)(v0 + 192));
    sub_100003984(v6, v7);
    swift_bridgeObjectRelease(v5);
  }
  else
  {
    v8 = _swiftEmptyArrayStorage;
  }
  v9 = *(_QWORD *)(v0 + 304);
  v11 = *(_QWORD *)(v0 + 264);
  v10 = *(_QWORD *)(v0 + 272);
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRetain(v9);
  v12 = (char *)sub_100055A6C(_swiftEmptyArrayStorage, (uint64_t)v8, v9, v11, v10);
  swift_bridgeObjectRelease(v10);
  swift_bridgeObjectRelease_n(v9, 2);
  swift_bridgeObjectRelease(v8);
  v13 = *((_QWORD *)v12 + 2);
  if (v13)
  {
    if (v13 == 1)
    {
      v14 = 0;
      v15 = 0.0;
    }
    else
    {
      v14 = v13 & 0x7FFFFFFFFFFFFFFELL;
      v28 = (double *)(v12 + 40);
      v15 = 0.0;
      v29 = v13 & 0x7FFFFFFFFFFFFFFELL;
      do
      {
        v15 = v15 + *(v28 - 1) + *v28;
        v28 += 2;
        v29 -= 2;
      }
      while (v29);
      if (v13 == v14)
        goto LABEL_14;
    }
    v30 = v13 - v14;
    v31 = (double *)&v12[8 * v14 + 32];
    do
    {
      v32 = *v31++;
      v15 = v15 + v32;
      --v30;
    }
    while (v30);
LABEL_14:
    v33 = *(_QWORD *)(v0 + 272);
    v34 = v15 / (double)v13;
    type metadata accessor for DataModel();
    v17 = sub_10001708C(v34);
    v36 = v35;
    v16 = sub_100018920((uint64_t)v12);
    v38 = v37;
    swift_bridgeObjectRelease(v12);
    swift_bridgeObjectRetain_n(v33, 2);
    v39 = swift_bridgeObjectRetain_n(v36, 2);
    v40 = Logger.logObject.getter(v39);
    v41 = static os_log_type_t.default.getter();
    v42 = os_log_type_enabled(v40, v41);
    v43 = *(_QWORD *)(v0 + 272);
    if (v42)
    {
      v50 = *(_QWORD *)(v0 + 264);
      v52 = v16;
      v44 = swift_slowAlloc(22, -1);
      v51 = v38;
      v45 = swift_slowAlloc(64, -1);
      v54[0] = v45;
      *(_DWORD *)v44 = 136315394;
      swift_bridgeObjectRetain(v43);
      *(_QWORD *)(v0 + 200) = sub_10001DF04(v50, v43, v54);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 200, v0 + 208, v44 + 4, v44 + 12);
      swift_bridgeObjectRelease_n(v43, 3);
      *(_WORD *)(v44 + 12) = 2080;
      swift_bridgeObjectRetain(v36);
      *(_QWORD *)(v0 + 208) = sub_10001DF04(v17, v36, v54);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 208, v53, v44 + 14, v44 + 22);
      swift_bridgeObjectRelease_n(v36, 3);
      _os_log_impl((void *)&_mh_execute_header, v40, v41, "...{%s} temperature is: %s", (uint8_t *)v44, 0x16u);
      swift_arrayDestroy(v45, 2, (char *)&type metadata for Any + 8);
      v46 = v45;
      v38 = v51;
      swift_slowDealloc(v46, -1, -1);
      v47 = v44;
      v16 = v52;
      swift_slowDealloc(v47, -1, -1);

    }
    else
    {
      swift_bridgeObjectRelease_n(*(_QWORD *)(v0 + 272), 2);
      swift_bridgeObjectRelease_n(v36, 2);

    }
    goto LABEL_19;
  }
  v16 = 0xD000000000000012;
  v17 = 0x9380E29380E2;
  v18 = *(_QWORD *)(v0 + 272);
  swift_bridgeObjectRelease(v12);
  v19 = swift_bridgeObjectRetain_n(v18, 2);
  v20 = Logger.logObject.getter(v19);
  v21 = static os_log_type_t.error.getter();
  v22 = os_log_type_enabled(v20, v21);
  v23 = *(_QWORD *)(v0 + 272);
  if (v22)
  {
    v24 = *(_QWORD *)(v0 + 264);
    v25 = (uint8_t *)swift_slowAlloc(12, -1);
    v26 = swift_slowAlloc(32, -1);
    v54[0] = v26;
    *(_DWORD *)v25 = 136315138;
    swift_bridgeObjectRetain(v23);
    v27 = v24;
    v17 = 0x9380E29380E2;
    *(_QWORD *)(v0 + 216) = sub_10001DF04(v27, v23, v54);
    v16 = 0xD000000000000012;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v53, v0 + 224, v25 + 4, v25 + 12);
    swift_bridgeObjectRelease_n(v23, 3);
    _os_log_impl((void *)&_mh_execute_header, v20, v21, "...{%s} has no temperatures, returning placeholder", v25, 0xCu);
    swift_arrayDestroy(v26, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v26, -1, -1);
    swift_slowDealloc(v25, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease_n(*(_QWORD *)(v0 + 272), 2);
  }

  v38 = 0x8000000100067F00;
  v36 = 0xA600000000000000;
  v34 = 0.0;
LABEL_19:
  v48 = *(_QWORD *)(v0 + 248);
  *(_OWORD *)v48 = xmmword_100064370;
  *(double *)(v48 + 16) = v34;
  *(_BYTE *)(v48 + 24) = v13 == 0;
  *(_QWORD *)(v48 + 32) = v17;
  *(_QWORD *)(v48 + 40) = v36;
  *(_QWORD *)(v48 + 48) = v16;
  *(_QWORD *)(v48 + 56) = v38;
  *(_BYTE *)(v48 + 64) = 0;
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t *sub_1000565B4(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  int *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v24 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v24 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v24);
  }
  else
  {
    v7 = type metadata accessor for Date(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = (int *)type metadata accessor for ThreeColumnDataEntry(0);
    v9 = v8[5];
    v10 = (uint64_t *)((char *)a1 + v9);
    v11 = (uint64_t *)((char *)a2 + v9);
    v13 = *v11;
    v12 = v11[1];
    *v10 = v13;
    v10[1] = v12;
    v14 = v8[6];
    v15 = *(uint64_t *)((char *)a2 + v14);
    *(uint64_t *)((char *)a1 + v14) = v15;
    *(_OWORD *)((char *)a1 + v8[7]) = *(_OWORD *)((char *)a2 + v8[7]);
    v16 = *(int *)(a3 + 20);
    v17 = (uint64_t *)((char *)a1 + v16);
    v18 = (uint64_t *)((char *)a2 + v16);
    swift_bridgeObjectRetain(v12);
    swift_bridgeObjectRetain(v15);
    v19 = sub_100003704(&qword_100081DA0);
    if (swift_getEnumCaseMultiPayload(v18, v19) == 1)
    {
      v20 = type metadata accessor for WidgetFamily(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v20 - 8) + 16))(v17, v18, v20);
      v21 = v17;
      v22 = v19;
      v23 = 1;
    }
    else
    {
      v25 = *v18;
      *v17 = *v18;
      swift_retain(v25);
      v21 = v17;
      v22 = v19;
      v23 = 0;
    }
    swift_storeEnumTagMultiPayload(v21, v22, v23);
  }
  return a1;
}

uint64_t sub_1000566F8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;

  v4 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  v5 = type metadata accessor for ThreeColumnDataEntry(0);
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + *(int *)(v5 + 20) + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + *(int *)(v5 + 24)));
  v6 = (_QWORD *)(a1 + *(int *)(a2 + 20));
  v7 = sub_100003704(&qword_100081DA0);
  if (swift_getEnumCaseMultiPayload(v6, v7) != 1)
    return swift_release(*v6);
  v8 = type metadata accessor for WidgetFamily(0);
  return (*(uint64_t (**)(_QWORD *, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v6, v8);
}

uint64_t sub_1000567B8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  int *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v6 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = (int *)type metadata accessor for ThreeColumnDataEntry(0);
  v8 = v7[5];
  v9 = (_QWORD *)(a1 + v8);
  v10 = (uint64_t *)(a2 + v8);
  v12 = *v10;
  v11 = v10[1];
  *v9 = v12;
  v9[1] = v11;
  v13 = v7[6];
  v14 = *(_QWORD *)(a2 + v13);
  *(_QWORD *)(a1 + v13) = v14;
  *(_OWORD *)(a1 + v7[7]) = *(_OWORD *)(a2 + v7[7]);
  v15 = *(int *)(a3 + 20);
  v16 = (uint64_t *)(a1 + v15);
  v17 = (uint64_t *)(a2 + v15);
  swift_bridgeObjectRetain(v11);
  swift_bridgeObjectRetain(v14);
  v18 = sub_100003704(&qword_100081DA0);
  if (swift_getEnumCaseMultiPayload(v17, v18) == 1)
  {
    v19 = type metadata accessor for WidgetFamily(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v19 - 8) + 16))(v16, v17, v19);
    v20 = 1;
  }
  else
  {
    v21 = *v17;
    *v16 = *v17;
    swift_retain(v21);
    v20 = 0;
  }
  swift_storeEnumTagMultiPayload(v16, v18, v20);
  return a1;
}

uint64_t sub_1000568C8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  int *v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v6 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = (int *)type metadata accessor for ThreeColumnDataEntry(0);
  v8 = v7[5];
  v9 = (_QWORD *)(a1 + v8);
  v10 = (_QWORD *)(a2 + v8);
  *v9 = *v10;
  v11 = v10[1];
  v12 = v9[1];
  v9[1] = v11;
  swift_bridgeObjectRetain(v11);
  swift_bridgeObjectRelease(v12);
  v13 = v7[6];
  v14 = *(_QWORD *)(a2 + v13);
  v15 = *(_QWORD *)(a1 + v13);
  *(_QWORD *)(a1 + v13) = v14;
  swift_bridgeObjectRetain(v14);
  swift_bridgeObjectRelease(v15);
  v16 = v7[7];
  v17 = (_QWORD *)(a1 + v16);
  v18 = (_QWORD *)(a2 + v16);
  *v17 = *v18;
  v17[1] = v18[1];
  if (a1 != a2)
  {
    v19 = *(int *)(a3 + 20);
    v20 = (uint64_t *)(a1 + v19);
    v21 = (uint64_t *)(a2 + v19);
    sub_100033268(a1 + v19, &qword_100081DA0);
    v22 = sub_100003704(&qword_100081DA0);
    if (swift_getEnumCaseMultiPayload(v21, v22) == 1)
    {
      v23 = type metadata accessor for WidgetFamily(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v23 - 8) + 16))(v20, v21, v23);
      v24 = 1;
    }
    else
    {
      v25 = *v21;
      *v20 = *v21;
      swift_retain(v25);
      v24 = 0;
    }
    swift_storeEnumTagMultiPayload(v20, v22, v24);
  }
  return a1;
}

uint64_t sub_100056A1C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  int *v7;
  uint64_t v8;
  void *v9;
  const void *v10;
  uint64_t v11;
  uint64_t v12;

  v6 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = (int *)type metadata accessor for ThreeColumnDataEntry(0);
  *(_OWORD *)(a1 + v7[5]) = *(_OWORD *)(a2 + v7[5]);
  *(_QWORD *)(a1 + v7[6]) = *(_QWORD *)(a2 + v7[6]);
  *(_OWORD *)(a1 + v7[7]) = *(_OWORD *)(a2 + v7[7]);
  v8 = *(int *)(a3 + 20);
  v9 = (void *)(a1 + v8);
  v10 = (const void *)(a2 + v8);
  v11 = sub_100003704(&qword_100081DA0);
  if (swift_getEnumCaseMultiPayload(v10, v11) == 1)
  {
    v12 = type metadata accessor for WidgetFamily(0);
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v12 - 8) + 32))(v9, v10, v12);
    swift_storeEnumTagMultiPayload(v9, v11, 1);
  }
  else
  {
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
  }
  return a1;
}

uint64_t sub_100056B10(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  int *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  const void *v18;
  uint64_t v19;
  uint64_t v20;

  v6 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = (int *)type metadata accessor for ThreeColumnDataEntry(0);
  v8 = v7[5];
  v9 = (_QWORD *)(a1 + v8);
  v10 = (uint64_t *)(a2 + v8);
  v12 = *v10;
  v11 = v10[1];
  v13 = v9[1];
  *v9 = v12;
  v9[1] = v11;
  swift_bridgeObjectRelease(v13);
  v14 = v7[6];
  v15 = *(_QWORD *)(a1 + v14);
  *(_QWORD *)(a1 + v14) = *(_QWORD *)(a2 + v14);
  swift_bridgeObjectRelease(v15);
  *(_OWORD *)(a1 + v7[7]) = *(_OWORD *)(a2 + v7[7]);
  if (a1 != a2)
  {
    v16 = *(int *)(a3 + 20);
    v17 = (void *)(a1 + v16);
    v18 = (const void *)(a2 + v16);
    sub_100033268(a1 + v16, &qword_100081DA0);
    v19 = sub_100003704(&qword_100081DA0);
    if (swift_getEnumCaseMultiPayload(v18, v19) == 1)
    {
      v20 = type metadata accessor for WidgetFamily(0);
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v20 - 8) + 32))(v17, v18, v20);
      swift_storeEnumTagMultiPayload(v17, v19, 1);
    }
    else
    {
      memcpy(v17, v18, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
    }
  }
  return a1;
}

uint64_t sub_100056C38(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100056C44);
}

uint64_t sub_100056C44(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;

  v6 = type metadata accessor for ThreeColumnDataEntry(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
  }
  else
  {
    v8 = sub_100003704(&qword_1000822D0);
    v10 = a1 + *(int *)(a3 + 20);
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48);
  }
  return v9(v10, a2, v8);
}

uint64_t sub_100056CBC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100056CC8);
}

uint64_t sub_100056CC8(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;

  v8 = type metadata accessor for ThreeColumnDataEntry(0);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    v10 = sub_100003704(&qword_1000822D0);
    v12 = a1 + *(int *)(a4 + 20);
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56);
  }
  return v11(v12, a2, a2, v10);
}

uint64_t type metadata accessor for ThreeColumnCategoryView(uint64_t a1)
{
  return sub_100030820(a1, qword_1000831B0, (uint64_t)&nominal type descriptor for ThreeColumnCategoryView);
}

void sub_100056D5C(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v6[2];

  v2 = type metadata accessor for ThreeColumnDataEntry(319);
  if (v3 <= 0x3F)
  {
    v6[0] = *(_QWORD *)(v2 - 8) + 64;
    sub_100030350(319);
    if (v5 <= 0x3F)
    {
      v6[1] = *(_QWORD *)(v4 - 8) + 64;
      swift_initStructMetadata(a1, 256, 2, v6, a1 + 16);
    }
  }
}

uint64_t sub_100056DE0(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_10006C3B4, 1);
}

double *sub_100056DF0(double *result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  double *v7;
  uint64_t v10;
  uint64_t v11;
  double v12;
  unint64_t v13;
  unint64_t v14;
  double *v15;
  uint64_t v16;
  double v17;
  double *v18;

  v15 = result;
  v5 = a4 - a3;
  if (__OFSUB__(a4, a3))
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  v6 = v4;
  v7 = _swiftEmptyArrayStorage;
  if (!v5)
    return v7;
  v18 = _swiftEmptyArrayStorage;
  result = (double *)sub_10001E4E0(0, v5 & ~(v5 >> 63), 0);
  if ((v5 & 0x8000000000000000) == 0)
  {
    v7 = v18;
    if (a4 <= a3)
      v10 = a3;
    else
      v10 = a4;
    v11 = a3;
    while (a4 != v11)
    {
      v16 = v11;
      result = (double *)((double *(*)(double *__return_ptr, uint64_t *))v15)(&v17, &v16);
      if (v6)
      {
        swift_release(v7);
        return v7;
      }
      v6 = 0;
      v12 = v17;
      v18 = v7;
      v14 = *((_QWORD *)v7 + 2);
      v13 = *((_QWORD *)v7 + 3);
      if (v14 >= v13 >> 1)
      {
        result = (double *)sub_10001E4E0(v13 > 1, v14 + 1, 1);
        v7 = v18;
      }
      *((_QWORD *)v7 + 2) = v14 + 1;
      v7[v14 + 4] = v12;
      if (a4 < a3)
        goto LABEL_19;
      if (v10 == v11)
        goto LABEL_20;
      if (a4 == ++v11)
        return v7;
    }
    __break(1u);
LABEL_19:
    __break(1u);
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
LABEL_22:
  __break(1u);
  return result;
}

double *sub_100056F3C(double *result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  double *v7;
  uint64_t v10;
  uint64_t v11;
  char v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  double *v16;
  uint64_t v17;
  uint64_t v18;
  double *v19;

  v16 = result;
  v5 = a4 - a3;
  if (__OFSUB__(a4, a3))
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  v6 = v4;
  v7 = _swiftEmptyArrayStorage;
  if (!v5)
    return v7;
  v19 = _swiftEmptyArrayStorage;
  result = (double *)sub_10001E550(0, v5 & ~(v5 >> 63), 0);
  if ((v5 & 0x8000000000000000) == 0)
  {
    v7 = v19;
    if (a4 <= a3)
      v10 = a3;
    else
      v10 = a4;
    v15 = v10;
    v11 = a3;
    while (a4 != v11)
    {
      v17 = v11;
      result = (double *)((double *(*)(uint64_t *__return_ptr, uint64_t *))v16)(&v18, &v17);
      if (v6)
      {
        swift_release(v7);
        return v7;
      }
      v6 = 0;
      v12 = v18;
      v19 = v7;
      v14 = *((_QWORD *)v7 + 2);
      v13 = *((_QWORD *)v7 + 3);
      if (v14 >= v13 >> 1)
      {
        result = (double *)sub_10001E550(v13 > 1, v14 + 1, 1);
        v7 = v19;
      }
      *((_QWORD *)v7 + 2) = v14 + 1;
      *((_BYTE *)v7 + v14 + 32) = v12;
      if (a4 < a3)
        goto LABEL_19;
      if (v15 == v11)
        goto LABEL_20;
      if (a4 == ++v11)
        return v7;
    }
    __break(1u);
LABEL_19:
    __break(1u);
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
LABEL_22:
  __break(1u);
  return result;
}

uint64_t sub_100057088@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  int v16;
  uint64_t (*v17)(uint64_t);
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;

  v35 = a1;
  v32 = type metadata accessor for ThreeColumnCategoryViewAccessoryRectangular(0);
  __chkstk_darwin(v32);
  v31 = (uint64_t)&v31 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v34 = sub_100003704(&qword_1000831E8);
  __chkstk_darwin(v34);
  v33 = (uint64_t)&v31 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_100003704(&qword_1000831F0);
  __chkstk_darwin(v4);
  v6 = (char *)&v31 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v36 = sub_100003704(&qword_1000831F8);
  __chkstk_darwin(v36);
  v8 = (char *)&v31 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for ThreeColumnCategoryViewSystemSmall(0);
  __chkstk_darwin(v9);
  v11 = (char *)&v31 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for WidgetFamily(0);
  v13 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v15 = (char *)&v31 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for ThreeColumnCategoryView(0);
  sub_100047888((uint64_t)v15);
  v16 = (*(uint64_t (**)(char *, uint64_t))(v13 + 88))(v15, v12);
  if (v16 == enum case for WidgetFamily.systemSmall(_:))
  {
    sub_1000308F0(v1, (uint64_t)v11, type metadata accessor for ThreeColumnDataEntry);
    v17 = type metadata accessor for ThreeColumnCategoryViewSystemSmall;
    sub_1000308F0((uint64_t)v11, (uint64_t)v6, type metadata accessor for ThreeColumnCategoryViewSystemSmall);
    swift_storeEnumTagMultiPayload(v6, v4, 0);
    v18 = sub_100015884(&qword_100083208, type metadata accessor for ThreeColumnCategoryViewSystemSmall, (uint64_t)&unk_1000644A4);
    v19 = sub_100015884(&qword_100083210, type metadata accessor for ThreeColumnCategoryViewAccessoryRectangular, (uint64_t)&unk_100064454);
    _ConditionalContent<>.init(storage:)(v6, v9, v32, v18, v19);
    v20 = v33;
    sub_100047FE0((uint64_t)v8, v33, &qword_1000831F8);
    swift_storeEnumTagMultiPayload(v20, v34, 0);
    v21 = sub_100057504();
    _ConditionalContent<>.init(storage:)(v20, v36, &type metadata for EmptyView, v21, &protocol witness table for EmptyView);
    sub_100033268((uint64_t)v8, &qword_1000831F8);
    v22 = (uint64_t)v11;
    return sub_100015784(v22, v17);
  }
  v24 = v33;
  v23 = v34;
  if (v16 == enum case for WidgetFamily.accessoryRectangular(_:))
  {
    v25 = v31;
    sub_1000308F0(v1, v31, type metadata accessor for ThreeColumnDataEntry);
    v17 = type metadata accessor for ThreeColumnCategoryViewAccessoryRectangular;
    sub_1000308F0(v25, (uint64_t)v6, type metadata accessor for ThreeColumnCategoryViewAccessoryRectangular);
    swift_storeEnumTagMultiPayload(v6, v4, 1);
    v26 = sub_100015884(&qword_100083208, type metadata accessor for ThreeColumnCategoryViewSystemSmall, (uint64_t)&unk_1000644A4);
    v27 = sub_100015884(&qword_100083210, type metadata accessor for ThreeColumnCategoryViewAccessoryRectangular, (uint64_t)&unk_100064454);
    _ConditionalContent<>.init(storage:)(v6, v9, v32, v26, v27);
    sub_100047FE0((uint64_t)v8, v24, &qword_1000831F8);
    swift_storeEnumTagMultiPayload(v24, v23, 0);
    v28 = sub_100057504();
    _ConditionalContent<>.init(storage:)(v24, v36, &type metadata for EmptyView, v28, &protocol witness table for EmptyView);
    sub_100033268((uint64_t)v8, &qword_1000831F8);
    v22 = v25;
    return sub_100015784(v22, v17);
  }
  swift_storeEnumTagMultiPayload(v33, v34, 1);
  v30 = sub_100057504();
  _ConditionalContent<>.init(storage:)(v24, v36, &type metadata for EmptyView, v30, &protocol witness table for EmptyView);
  return (*(uint64_t (**)(char *, uint64_t))(v13 + 8))(v15, v12);
}

uint64_t type metadata accessor for ThreeColumnCategoryViewAccessoryRectangular(uint64_t a1)
{
  return sub_100030820(a1, qword_100083270, (uint64_t)&nominal type descriptor for ThreeColumnCategoryViewAccessoryRectangular);
}

uint64_t type metadata accessor for ThreeColumnCategoryViewSystemSmall(uint64_t a1)
{
  return sub_100030820(a1, qword_100083300, (uint64_t)&nominal type descriptor for ThreeColumnCategoryViewSystemSmall);
}

unint64_t sub_100057504()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100083200;
  if (!qword_100083200)
  {
    v1 = sub_100003744(&qword_1000831F8);
    sub_100015884(&qword_100083208, type metadata accessor for ThreeColumnCategoryViewSystemSmall, (uint64_t)&unk_1000644A4);
    sub_100015884(&qword_100083210, type metadata accessor for ThreeColumnCategoryViewAccessoryRectangular, (uint64_t)&unk_100064454);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100083200);
  }
  return result;
}

uint64_t sub_1000575B8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000575C4);
}

uint64_t sub_1000575C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000575D4);
}

uint64_t sub_1000575DC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000575E8);
}

uint64_t sub_1000575EC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for ThreeColumnDataEntry(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(a1, a2, v4);
}

uint64_t sub_100057628(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100057634);
}

uint64_t sub_100057638(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for ThreeColumnDataEntry(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(a1, a2, a2, v4);
}

unint64_t sub_10005767C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100083338;
  if (!qword_100083338)
  {
    v1 = sub_100003744(&qword_100083340);
    sub_100057504();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100083338);
  }
  return result;
}

uint64_t sub_1000576E8(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_10006C420, 1);
}

uint64_t sub_1000576F8@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  double v17;
  double v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t KeyPath;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  char *v34;
  unint64_t v35;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  v2 = v1;
  v40 = a1;
  v3 = type metadata accessor for AccessibilityChildBehavior(0);
  v41 = *(_QWORD *)(v3 - 8);
  v42 = v3;
  __chkstk_darwin(v3);
  v39 = (char *)&v37 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_100003704(&qword_1000833E8);
  __chkstk_darwin(v5);
  v7 = (char *)&v37 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v37 = sub_100003704(&qword_1000833F0);
  __chkstk_darwin(v37);
  v9 = (char *)&v37 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v38 = sub_100003704(&qword_1000833F8);
  __chkstk_darwin(v38);
  v11 = (char *)&v37 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_100003704(&qword_1000824F8);
  __chkstk_darwin(v12);
  v14 = (char *)&v37 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for ThreeColumnDataEntry(0);
  v16 = *(_QWORD *)(v1 + *(int *)(v15 + 24));
  v17 = *(double *)(v1 + *(int *)(v15 + 28) + 8) / 5.0;
  v18 = static Font.Weight.bold.getter();
  v19 = enum case for Font.Design.default(_:);
  v20 = type metadata accessor for Font.Design(0);
  v21 = *(_QWORD *)(v20 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v21 + 104))(v14, v19, v20);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v21 + 56))(v14, 0, 1, v20);
  v22 = static Font.system(size:weight:design:)(*(_QWORD *)&v18, 0, v14, v17);
  v23 = sub_100033268((uint64_t)v14, &qword_1000824F8);
  *(_QWORD *)v7 = static HorizontalAlignment.leading.getter(v23);
  *((_QWORD *)v7 + 1) = 0;
  v7[16] = 0;
  v24 = sub_100003704(&qword_100083400);
  sub_100057A24(v16, v2, v22, (uint64_t *)&v7[*(int *)(v24 + 44)]);
  v25 = 3 - *(_QWORD *)(v16 + 16);
  KeyPath = swift_getKeyPath(&unk_1000644F8);
  sub_100047FE0((uint64_t)v7, (uint64_t)v9, &qword_1000833E8);
  v27 = &v9[*(int *)(v37 + 36)];
  *(_QWORD *)v27 = KeyPath;
  *((_QWORD *)v27 + 1) = v25;
  v27[16] = 0;
  v28 = sub_100033268((uint64_t)v7, &qword_1000833E8);
  v29 = static Color.primary.getter(v28);
  v30 = swift_getKeyPath(&unk_100064528);
  sub_100047FE0((uint64_t)v9, (uint64_t)v11, &qword_1000833F0);
  v31 = v38;
  v32 = (uint64_t *)&v11[*(int *)(v38 + 36)];
  *v32 = v30;
  v32[1] = v29;
  v33 = sub_100033268((uint64_t)v9, &qword_1000833F0);
  v34 = v39;
  static AccessibilityChildBehavior.combine.getter(v33);
  v35 = sub_100059BB0();
  View.accessibilityElement(children:)(v34, v31, v35);
  swift_release(v22);
  (*(void (**)(char *, uint64_t))(v41 + 8))(v34, v42);
  return sub_100033268((uint64_t)v11, &qword_1000833F8);
}

uint64_t sub_100057A24@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  _QWORD *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  uint64_t KeyPath;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  uint64_t v39;
  char *v40;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD v49[2];

  v43 = a3;
  v7 = sub_100003704(&qword_100083420);
  v8 = __chkstk_darwin(v7);
  v48 = (uint64_t)&v42 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v11 = (char *)&v42 - v10;
  if (*(_QWORD *)(a1 + 16) > 2uLL)
  {
    v46 = 0;
    v47 = 0;
    v44 = 0;
    v45 = 0;
  }
  else
  {
    v12 = (_QWORD *)(a2 + *(int *)(type metadata accessor for ThreeColumnDataEntry(0) + 20));
    v13 = v12[1];
    v49[0] = *v12;
    v49[1] = v13;
    v14 = sub_1000037D4();
    swift_bridgeObjectRetain(v13);
    v15 = Text.init<A>(_:)(v49, &type metadata for String, v14);
    v17 = v16;
    v42 = v7;
    v19 = v18;
    v21 = v20 & 1;
    v22 = static Font.headline.getter();
    v23 = Text.font(_:)(v22, v15, v17, v21, v19);
    v46 = v24;
    v47 = v23;
    LOBYTE(v14) = v25;
    v45 = v26;
    swift_release(v22);
    v44 = v14 & 1;
    sub_1000330B0(v15, v17, v21);
    swift_bridgeObjectRelease(v19);
  }
  *(_OWORD *)v11 = *(_OWORD *)(a2 + *(int *)(type metadata accessor for ThreeColumnDataEntry(0) + 28));
  *((_QWORD *)v11 + 2) = 3;
  v49[0] = a1;
  KeyPath = swift_getKeyPath(&unk_100064590);
  swift_bridgeObjectRetain(a1);
  v28 = v43;
  swift_retain(v43);
  v29 = sub_100003704(&qword_1000833D0);
  v30 = sub_100003704(&qword_100083428);
  v31 = sub_100033ED0(&qword_1000833D8, &qword_1000833D0, (uint64_t)&protocol conformance descriptor for [A]);
  v32 = sub_100059B6C();
  v33 = sub_100033ED0(&qword_100083430, &qword_100083428, (uint64_t)&protocol conformance descriptor for TupleView<A>);
  ForEach<>.init(_:id:content:)(v49, KeyPath, sub_100059C54, v28, v29, v30, v31, v32, v33);
  v34 = v48;
  sub_100047FE0((uint64_t)v11, v48, &qword_100083420);
  v36 = v46;
  v35 = v47;
  *a4 = v47;
  a4[1] = v36;
  v38 = v44;
  v37 = v45;
  a4[2] = v44;
  a4[3] = v37;
  v39 = sub_100003704(&qword_100083438);
  sub_100047FE0(v34, (uint64_t)a4 + *(int *)(v39 + 48), &qword_100083420);
  v40 = (char *)a4 + *(int *)(v39 + 64);
  *(_QWORD *)v40 = 0;
  v40[8] = 0;
  sub_100059C5C(v35, v36, v38, v37);
  sub_100033268((uint64_t)v11, &qword_100083420);
  sub_100033268(v34, &qword_100083420);
  return sub_100059C8C(v35, v36, v38, v37);
}

uint64_t sub_100057D10@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  Swift::String v41;
  uint64_t v42;
  unint64_t v43;
  Swift::String v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char v58;
  char v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  char v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  char v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  int v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t *v99;
  uint64_t v100;
  uint64_t KeyPath;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;

  v99 = a3;
  v100 = a2;
  v5 = type metadata accessor for LocalizedStringKey.StringInterpolation(0);
  __chkstk_darwin(v5);
  v7 = (char *)&v90 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *a1;
  v9 = a1[1];
  v10 = a1[2];
  v11 = a1[3];
  v13 = a1[4];
  v12 = a1[5];
  LODWORD(v94) = *((unsigned __int8 *)a1 + 48);
  swift_bridgeObjectRetain(v9);
  v102 = Image.init(_internalSystemName:)(v8, v9);
  KeyPath = swift_getKeyPath(&unk_100064558);
  v103 = v10;
  v104 = v11;
  v14 = sub_1000037D4();
  swift_retain(a2);
  swift_bridgeObjectRetain(v11);
  v15 = Text.init<A>(_:)(&v103, &type metadata for String, v14);
  v17 = v16;
  v19 = v18;
  v21 = v20 & 1;
  v22 = static Font.headline.getter();
  v23 = Text.font(_:)(v22, v15, v17, v21, v19);
  v96 = v24;
  v97 = v23;
  LOBYTE(v8) = v25;
  v98 = v26;
  swift_release(v22);
  v95 = v8 & 1;
  sub_1000330B0(v15, v17, v21);
  swift_bridgeObjectRelease(v19);
  v103 = v13;
  v104 = v12;
  swift_bridgeObjectRetain(v12);
  v27 = Text.init<A>(_:)(&v103, &type metadata for String, v14);
  v29 = v28;
  v31 = v30;
  v33 = v32 & 1;
  v34 = ((uint64_t (*)(void))static Font.body.getter)();
  v35 = Text.font(_:)(v34, v27, v29, v33, v31);
  v91 = v36;
  v92 = v35;
  LOBYTE(v15) = v37;
  v93 = v38;
  swift_release(v34);
  v39 = v15 & 1;
  sub_1000330B0(v27, v29, v33);
  swift_bridgeObjectRelease(v31);
  LocalizedStringKey.StringInterpolation.init(literalCapacity:interpolationCount:)(0, 1);
  v40 = 0xE000000000000000;
  v41._countAndFlagsBits = 0;
  v41._object = (void *)0xE000000000000000;
  LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v41);
  if ((_DWORD)v94)
    v42 = 37;
  else
    v42 = 0;
  if ((_DWORD)v94)
    v40 = 0xE100000000000000;
  v43 = v40;
  LocalizedStringKey.StringInterpolation.appendInterpolation(_:)(*(Swift::String *)&v42);
  swift_bridgeObjectRelease(v40);
  v44._countAndFlagsBits = 0;
  v44._object = (void *)0xE000000000000000;
  LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v44);
  v45 = LocalizedStringKey.init(stringInterpolation:)(v7);
  v46 = Text.init(_:tableName:bundle:comment:)(v45);
  v48 = v47;
  v50 = v49;
  v52 = v51 & 1;
  v53 = ((uint64_t (*)(void))static Font.body.getter)();
  v54 = Font.smallCaps()(v53);
  swift_release(v53);
  v55 = Text.font(_:)(v54, v46, v48, v52, v50);
  v57 = v56;
  v59 = v58;
  v61 = v60;
  swift_release(v54);
  v62 = v59 & 1;
  sub_1000330B0(v46, v48, v52);
  swift_bridgeObjectRelease(v50);
  v64 = v91;
  v63 = v92;
  LOBYTE(v46) = v39;
  v65 = v39;
  v66 = v93;
  v90 = static Text.+ infix(_:_:)(v92, v91, v65, v93, v55, v57, v62, v61, v90, v91);
  v68 = v67;
  v94 = v69;
  v71 = v70 & 1;
  sub_1000330B0(v55, v57, v62);
  swift_bridgeObjectRelease(v61);
  sub_1000330B0(v63, v64, v46);
  v72 = swift_bridgeObjectRelease(v66);
  v73 = static Font.body.getter(v72);
  v74 = v90;
  v75 = v94;
  v76 = Text.font(_:)(v73, v90, v68, v71, v94);
  v78 = v77;
  LOBYTE(v55) = v79;
  v81 = v80;
  swift_release(v73);
  LOBYTE(v73) = v55 & 1;
  sub_1000330B0(v74, v68, v71);
  swift_bridgeObjectRelease(v75);
  LOBYTE(v74) = v95;
  LOBYTE(v103) = v95;
  v83 = KeyPath;
  v82 = v102;
  v84 = v99;
  v85 = v100;
  *v99 = v102;
  v84[1] = v83;
  v87 = v96;
  v86 = v97;
  v84[2] = v85;
  v84[3] = v86;
  v84[4] = v87;
  *((_BYTE *)v84 + 40) = v74;
  v88 = v98;
  v84[6] = v98;
  v84[7] = v76;
  v84[8] = v78;
  *((_BYTE *)v84 + 72) = v73;
  v84[10] = v81;
  *((_WORD *)v84 + 44) = 256;
  v84[12] = 0x4008000000000000;
  swift_retain(v82);
  swift_retain(v83);
  swift_retain(v85);
  sub_100032F84(v86, v87, v74);
  swift_bridgeObjectRetain(v88);
  sub_100032F84(v76, v78, v73);
  swift_bridgeObjectRetain(v81);
  sub_1000330B0(v76, v78, v73);
  swift_bridgeObjectRelease(v81);
  sub_1000330B0(v86, v87, v103);
  swift_release(v85);
  swift_release(v83);
  swift_release(v102);
  return swift_bridgeObjectRelease(v88);
}

uint64_t sub_100058178(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_10006C3F8, 1);
}

uint64_t sub_100058188@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, BOOL *a5@<X8>, CGFloat a6@<D2>, CGFloat a7@<D3>, CGFloat a8@<D4>, CGFloat a9@<D5>)
{
  uint64_t v18;
  uint64_t v19;
  uint64_t result;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  double v26;
  double v27;
  uint64_t v28;
  char v29;
  char v30;
  double v31;
  double v32;
  double Width;
  uint64_t v34;
  char v35;
  char v36;
  CGRect v37;

  v18 = type metadata accessor for LayoutSubview(0);
  v19 = *(_QWORD *)(v18 - 8);
  result = __chkstk_darwin();
  v22 = (char *)&v34 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = *a1 * a2;
  if ((unsigned __int128)(*a1 * (__int128)a2) >> 64 != v23 >> 63)
  {
    __break(1u);
    goto LABEL_10;
  }
  result = v23 + 1;
  if (__OFADD__(v23, 1))
  {
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  result = LayoutSubviews.subscript.getter(result);
  v24 = *(_QWORD *)(a3 + 16);
  if (!v24)
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  v25 = *(_QWORD *)(a4 + 16);
  if (!v25)
  {
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  v26 = *(double *)(a3 + 32);
  v27 = *(double *)(a4 + 32);
  v28 = static ProposedViewSize.unspecified.getter(result);
  v36 = v29 & 1;
  v35 = v30 & 1;
  result = LayoutSubview.sizeThatFits(_:)(v28);
  if (v25 == 1)
  {
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  if (v24 < 3)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  if (v25 >= 3)
  {
    v32 = v26 + v27 + v31 + *(double *)(a4 + 40) + *(double *)(a3 + 48) + *(double *)(a4 + 48);
    v37.origin.x = a6;
    v37.origin.y = a7;
    v37.size.width = a8;
    v37.size.height = a9;
    Width = CGRectGetWidth(v37);
    result = (*(uint64_t (**)(char *, uint64_t))(v19 + 8))(v22, v18);
    *a5 = v32 < Width;
    return result;
  }
LABEL_15:
  __break(1u);
  return result;
}

uint64_t sub_100058328@<X0>(double *a1@<X0>, unint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X4>, double *a5@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  char *v14;
  unint64_t v15;
  double v16;
  double v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  char v22;
  double v23;
  uint64_t v24;
  char v25;
  char v26;

  v10 = type metadata accessor for LayoutSubview(0);
  v11 = *(_QWORD *)(v10 - 8);
  result = __chkstk_darwin();
  v14 = (char *)&v24 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = *a2;
  if ((*a2 & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_12;
  }
  if (v15 >= *(_QWORD *)(a3 + 16))
  {
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  v16 = *a1;
  v17 = 0.0;
  if (*(_BYTE *)(a3 + v15 + 32) == 1)
  {
    v18 = v15 * a4;
    if ((unsigned __int128)((uint64_t)v15 * (__int128)a4) >> 64 == (uint64_t)(v15 * a4) >> 63)
    {
      result = v18 + 1;
      if (!__OFADD__(v18, 1))
      {
        v19 = LayoutSubviews.subscript.getter(result);
        v20 = static ProposedViewSize.unspecified.getter(v19);
        v26 = v21 & 1;
        v25 = v22 & 1;
        v17 = LayoutSubview.sizeThatFits(_:)(v20);
        result = (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v14, v10);
        goto LABEL_7;
      }
LABEL_14:
      __break(1u);
      return result;
    }
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
LABEL_7:
  if (v16 > v17)
    v23 = v16;
  else
    v23 = v17;
  *a5 = v23;
  return result;
}

uint64_t sub_100058464(uint64_t (*a1)(char *), uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void (*v24)(_QWORD *, _QWORD);
  uint64_t v25;
  char *v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  void (*v36)(char *, char *, uint64_t);
  char *v37;
  uint64_t v38;
  char v39;
  double *v40;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v42;
  unint64_t v43;
  char *v45;
  char *v46;
  char *v47;
  uint64_t (*v48)(char *);
  uint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  _QWORD v57[4];
  double *v58;

  v3 = v2;
  v48 = a1;
  v49 = a2;
  v4 = type metadata accessor for LayoutSubviews(0);
  v51 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v50 = (char *)&v45 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_100003704(&qword_100083450);
  __chkstk_darwin(v6);
  v53 = (char *)&v45 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v52 = type metadata accessor for LayoutSubview(0);
  v8 = *(_QWORD *)(v52 - 8);
  v9 = __chkstk_darwin(v52);
  v46 = (char *)&v45 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v47 = (char *)&v45 - v11;
  v12 = sub_100003704(&qword_100083458);
  __chkstk_darwin(v12);
  v14 = (char *)&v45 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v58 = _swiftEmptyArrayStorage;
  v15 = sub_100015884(&qword_100083460, (uint64_t (*)(uint64_t))&type metadata accessor for LayoutSubviews, (uint64_t)&protocol conformance descriptor for LayoutSubviews);
  dispatch thunk of Sequence.makeIterator()(v4, v15);
  v16 = &v14[*(int *)(v12 + 36)];
  v17 = sub_100015884(&qword_100081EF8, (uint64_t (*)(uint64_t))&type metadata accessor for LayoutSubviews, (uint64_t)&protocol conformance descriptor for LayoutSubviews);
  v18 = *(_QWORD *)v16;
  v54 = v14;
  dispatch thunk of Collection.endIndex.getter(v57, v4, v17);
  if (v18 == v57[0])
  {
    v19 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v8 + 56);
LABEL_3:
    v20 = (uint64_t)v53;
    v19(v53, 1, 1, v52);
    v21 = (uint64_t)v54;
LABEL_16:
    sub_100033268(v21, &qword_100083458);
    sub_100033268(v20, &qword_100083450);
    return (uint64_t)v58;
  }
  else
  {
    v55 = v8;
    v22 = (uint64_t)v54;
    v45 = v16;
    while (1)
    {
      v56 = v3;
      v24 = (void (*)(_QWORD *, _QWORD))dispatch thunk of Collection.subscript.read(v57, v16, v4, v17);
      v25 = v55;
      v27 = v52;
      v26 = v53;
      (*(void (**)(char *))(v55 + 16))(v53);
      v24(v57, 0);
      v28 = v50;
      v29 = v51;
      (*(void (**)(char *, uint64_t, uint64_t))(v51 + 16))(v50, v22, v4);
      v30 = v16;
      v31 = v27;
      v32 = v17;
      v33 = v17;
      v20 = (uint64_t)v26;
      dispatch thunk of Collection.formIndex(after:)(v30, v4, v33);
      v34 = v28;
      v35 = v25;
      (*(void (**)(char *, uint64_t))(v29 + 8))(v34, v4);
      v19 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v25 + 56);
      v19(v26, 0, 1, v31);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v35 + 48))(v26, 1, v31) == 1)
      {
        v21 = (uint64_t)v54;
        goto LABEL_16;
      }
      v36 = *(void (**)(char *, char *, uint64_t))(v35 + 32);
      v37 = v47;
      v36(v47, v26, v31);
      v38 = v56;
      v39 = v48(v37);
      v3 = v38;
      if (v38)
        break;
      if ((v39 & 1) != 0)
      {
        v36(v46, v37, v31);
        v40 = v58;
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v58);
        v56 = 0;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          sub_10001E588(0, *((_QWORD *)v40 + 2) + 1, 1);
          v40 = v58;
        }
        v43 = *((_QWORD *)v40 + 2);
        v42 = *((_QWORD *)v40 + 3);
        if (v43 >= v42 >> 1)
        {
          sub_10001E588(v42 > 1, v43 + 1, 1);
          v40 = v58;
        }
        *((_QWORD *)v40 + 2) = v43 + 1;
        v36((char *)v40+ ((*(unsigned __int8 *)(v55 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v55 + 80))+ *(_QWORD *)(v55 + 72) * v43, v46, v31);
        v58 = v40;
        v3 = v56;
      }
      else
      {
        (*(void (**)(char *, uint64_t))(v55 + 8))(v37, v31);
      }
      v16 = v45;
      v23 = *(_QWORD *)v45;
      v22 = (uint64_t)v54;
      v17 = v32;
      dispatch thunk of Collection.endIndex.getter(v57, v4, v32);
      if (v23 == v57[0])
        goto LABEL_3;
    }
    (*(void (**)(char *, uint64_t))(v55 + 8))(v37, v31);
    sub_100033268((uint64_t)v54, &qword_100083458);
    return swift_release(v58);
  }
}

uint64_t sub_1000588C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;

  return sub_100059E30(a5, a6, *(_QWORD *)(v6 + 16));
}

void sub_1000588DC(CGFloat a1, CGFloat a2, CGFloat a3, CGFloat a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v10;

  sub_100059F0C(a9, a1, a2, a3, a4, *(double *)v10, *(double *)(v10 + 8), a10, *(_QWORD *)(v10 + 16));
}

uint64_t sub_1000588F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  return sub_100058948(a1, a2, a3, a4, a5, a6, a7, a8, a9, (uint64_t (*)(uint64_t))&Layout.explicitAlignment(of:in:proposal:subviews:cache:));
}

uint64_t sub_10005891C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  return sub_100058948(a1, a2, a3, a4, a5, a6, a7, a8, a9, (uint64_t (*)(uint64_t))&Layout.explicitAlignment(of:in:proposal:subviews:cache:));
}

uint64_t sub_100058948(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t (*a10)(uint64_t))
{
  return a10(a1);
}

void (*sub_100058984(_QWORD *a1))(_QWORD *a1)
{
  _QWORD *v2;

  v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = Animatable<>.animatableData.modify();
  return sub_10001F560;
}

uint64_t sub_1000589E4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  double v19;
  double v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t KeyPath;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  double v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  char *v44;
  unint64_t v45;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;

  v2 = v1;
  v52 = a1;
  v3 = type metadata accessor for AccessibilityChildBehavior(0);
  v53 = *(_QWORD *)(v3 - 8);
  v54 = v3;
  __chkstk_darwin(v3);
  v51 = (char *)&v47 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_100003704(&qword_100083348);
  __chkstk_darwin(v5);
  v7 = (char *)&v47 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v48 = sub_100003704(&qword_100083350);
  __chkstk_darwin(v48);
  v9 = (char *)&v47 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v49 = sub_100003704(&qword_100083358);
  __chkstk_darwin(v49);
  v11 = (char *)&v47 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v50 = sub_100003704(&qword_100083360);
  __chkstk_darwin(v50);
  v13 = (char *)&v47 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_100003704(&qword_1000824F8);
  __chkstk_darwin(v14);
  v16 = (char *)&v47 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = type metadata accessor for ThreeColumnDataEntry(0);
  v18 = *(int *)(v17 + 28);
  v47 = *(_QWORD *)(v1 + *(int *)(v17 + 24));
  v19 = *(double *)(v1 + v18 + 8);
  v20 = static Font.Weight.bold.getter();
  v21 = enum case for Font.Design.default(_:);
  v22 = type metadata accessor for Font.Design(0);
  v23 = *(_QWORD *)(v22 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v23 + 104))(v16, v21, v22);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v23 + 56))(v16, 0, 1, v22);
  v24 = static Font.system(size:weight:design:)(*(_QWORD *)&v20, 0, v16, v19 / 7.0);
  v25 = sub_100033268((uint64_t)v16, &qword_1000824F8);
  *(_QWORD *)v7 = static HorizontalAlignment.leading.getter(v25);
  *((_QWORD *)v7 + 1) = 0;
  v7[16] = 0;
  v26 = sub_100003704(&qword_100083368);
  sub_100058DBC(v2, v47, v24, (uint64_t *)&v7[*(int *)(v26 + 44)], v19);
  KeyPath = swift_getKeyPath(&unk_1000644F8);
  sub_100047FE0((uint64_t)v7, (uint64_t)v9, &qword_100083348);
  v28 = &v9[*(int *)(v48 + 36)];
  *(_QWORD *)v28 = KeyPath;
  *((_QWORD *)v28 + 1) = 1;
  v28[16] = 0;
  v29 = sub_100033268((uint64_t)v7, &qword_100083348);
  v30 = static Color.primary.getter(v29);
  v31 = swift_getKeyPath(&unk_100064528);
  sub_100047FE0((uint64_t)v9, (uint64_t)v11, &qword_100083350);
  v32 = (uint64_t *)&v11[*(int *)(v49 + 36)];
  *v32 = v31;
  v32[1] = v30;
  v33 = sub_100033268((uint64_t)v9, &qword_100083350);
  LOBYTE(v30) = static Edge.Set.all.getter(v33);
  v34 = EdgeInsets.init(_all:)(v19 / 12.0);
  v36 = v35;
  v38 = v37;
  v40 = v39;
  sub_100047FE0((uint64_t)v11, (uint64_t)v13, &qword_100083358);
  v41 = v50;
  v42 = &v13[*(int *)(v50 + 36)];
  *v42 = v30;
  *((double *)v42 + 1) = v34;
  *((_QWORD *)v42 + 2) = v36;
  *((_QWORD *)v42 + 3) = v38;
  *((_QWORD *)v42 + 4) = v40;
  v42[40] = 0;
  v43 = sub_100033268((uint64_t)v11, &qword_100083358);
  v44 = v51;
  static AccessibilityChildBehavior.combine.getter(v43);
  v45 = sub_100059930();
  View.accessibilityElement(children:)(v44, v41, v45);
  swift_release(v24);
  (*(void (**)(char *, uint64_t))(v53 + 8))(v44, v54);
  return sub_100033268((uint64_t)v13, &qword_100083360);
}

uint64_t sub_100058DBC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>, double a5@<D0>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  _QWORD *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  char v25;
  double v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t (*v33)(_QWORD *, _QWORD, uint64_t);
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  unint64_t v44;
  char *v45;
  void (*v46)(char *, char *, uint64_t);
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  void (*v57)(char *, uint64_t);
  uint64_t v58;
  uint64_t v59;
  uint64_t v61;
  uint64_t v62;
  uint64_t *v63;
  uint64_t KeyPath;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  uint64_t v76;
  char v77[16];
  uint64_t v78;
  uint64_t v79;
  _QWORD v80[3];

  v69 = a2;
  v70 = a3;
  v63 = a4;
  v71 = type metadata accessor for PinnedScrollableViews(0);
  __chkstk_darwin(v71);
  v67 = (char *)&v61 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for GridItem.Size(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (uint64_t *)((char *)&v61 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  v72 = sub_100003704(&qword_100083390);
  v76 = *(_QWORD *)(v72 - 8);
  v12 = __chkstk_darwin(v72);
  v68 = (char *)&v61 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v75 = (char *)&v61 - v14;
  v15 = sub_100003704(&qword_1000824F8);
  __chkstk_darwin(v15);
  v17 = (char *)&v61 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = (_QWORD *)(a1 + *(int *)(type metadata accessor for ThreeColumnDataEntry(0) + 20));
  v19 = v18[1];
  v80[0] = *v18;
  v80[1] = v19;
  v20 = sub_1000037D4();
  swift_bridgeObjectRetain(v19);
  v21 = Text.init<A>(_:)(v80, &type metadata for String, v20);
  v65 = v22;
  v66 = v21;
  v74 = v23;
  v25 = v24 & 1;
  KeyPath = swift_getKeyPath(&unk_1000644F8);
  v26 = static Font.Weight.bold.getter();
  v27 = enum case for Font.Design.default(_:);
  v28 = type metadata accessor for Font.Design(0);
  v29 = *(_QWORD *)(v28 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v29 + 104))(v17, v27, v28);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v29 + 56))(v17, 0, 1, v28);
  v73 = static Font.system(size:weight:design:)(*(_QWORD *)&v26, 0, v17, a5 * 0.1);
  sub_100033268((uint64_t)v17, &qword_1000824F8);
  v62 = swift_getKeyPath(&unk_100064558);
  v30 = sub_100003704(&qword_100083398);
  v31 = *(_QWORD *)(type metadata accessor for GridItem(0) - 8);
  v32 = swift_allocObject(v30, ((*(unsigned __int8 *)(v31 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v31 + 80))+ 2 * *(_QWORD *)(v31 + 72), *(unsigned __int8 *)(v31 + 80) | 7);
  *(_OWORD *)(v32 + 16) = xmmword_1000633A0;
  *v11 = 0x4030000000000000;
  v33 = *(uint64_t (**)(_QWORD *, _QWORD, uint64_t))(v9 + 104);
  v34 = v33(v11, enum case for GridItem.Size.fixed(_:), v8);
  v35 = static Alignment.center.getter(v34);
  GridItem.init(_:spacing:alignment:)(v11, 0x4000000000000000, 0, v35, v36, 0);
  *(_OWORD *)v11 = xmmword_100064380;
  v37 = v33(v11, enum case for GridItem.Size.flexible(_:), v8);
  v38 = static Alignment.leading.getter(v37);
  v40 = GridItem.init(_:spacing:alignment:)(v11, 0, 0, v38, v39, 0);
  v78 = v69;
  v79 = v70;
  v41 = static HorizontalAlignment.center.getter(v40);
  LODWORD(v80[0]) = 0;
  sub_100015884(&qword_1000833A0, (uint64_t (*)(uint64_t))&type metadata accessor for PinnedScrollableViews, (uint64_t)&protocol conformance descriptor for PinnedScrollableViews);
  v42 = v67;
  dispatch thunk of OptionSet.init(rawValue:)(v80);
  v43 = sub_100003704(&qword_1000833A8);
  v44 = sub_100059AE8();
  v45 = v75;
  LazyVGrid.init(columns:alignment:spacing:pinnedViews:content:)(v32, v41, 0, 0, v42, sub_100059AE0, v77, v43, v44);
  v46 = *(void (**)(char *, char *, uint64_t))(v76 + 16);
  v47 = v68;
  v48 = v72;
  v46(v68, v45, v72);
  v50 = v65;
  v49 = v66;
  v51 = v63;
  *v63 = v66;
  v51[1] = v50;
  *((_BYTE *)v51 + 16) = v25;
  v52 = v74;
  v53 = KeyPath;
  v51[3] = v74;
  v51[4] = v53;
  v51[5] = 1;
  *((_BYTE *)v51 + 48) = 0;
  v54 = v62;
  v55 = v73;
  v51[7] = v62;
  v51[8] = v55;
  v51[9] = 0;
  *((_BYTE *)v51 + 80) = 0;
  v56 = sub_100003704(&qword_1000833C8);
  v46((char *)v51 + *(int *)(v56 + 64), v47, v48);
  sub_100032F84(v49, v50, v25);
  v57 = *(void (**)(char *, uint64_t))(v76 + 8);
  swift_bridgeObjectRetain(v52);
  swift_retain(v53);
  v58 = v54;
  swift_retain(v54);
  v59 = v73;
  swift_retain(v73);
  v57(v75, v48);
  v57(v47, v48);
  sub_1000330B0(v49, v50, v25);
  swift_release(v59);
  swift_release(v58);
  swift_release(v53);
  return swift_bridgeObjectRelease(v74);
}

uint64_t sub_1000592AC(uint64_t a1, uint64_t a2)
{
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v11;

  v11 = a1;
  KeyPath = swift_getKeyPath(&unk_100064590);
  swift_bridgeObjectRetain(a1);
  swift_retain(a2);
  v5 = sub_100003704(&qword_1000833D0);
  v6 = sub_100003704(&qword_1000833C0);
  v7 = sub_100033ED0(&qword_1000833D8, &qword_1000833D0, (uint64_t)&protocol conformance descriptor for [A]);
  v8 = sub_100059B6C();
  v9 = sub_100033ED0(&qword_1000833B8, &qword_1000833C0, (uint64_t)&protocol conformance descriptor for TupleView<A>);
  return ForEach<>.init(_:id:content:)(&v11, KeyPath, sub_100059B64, a2, v5, v6, v7, v8, v9);
}

uint64_t sub_1000593A8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  __int128 v5;
  uint64_t KeyPath;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23[2];
  char v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  _OWORD v33[3];
  char v34;
  char v35;
  char v36;
  char v37;

  v5 = *(_OWORD *)(a1 + 16);
  v33[0] = *(_OWORD *)a1;
  v33[1] = v5;
  v33[2] = *(_OWORD *)(a1 + 32);
  v34 = *(_BYTE *)(a1 + 48);
  swift_bridgeObjectRetain(*((_QWORD *)&v33[0] + 1));
  v22 = Image.init(_internalSystemName:)(*(_QWORD *)&v33[0], *((_QWORD *)&v33[0] + 1));
  KeyPath = swift_getKeyPath(&unk_100064558);
  v7 = swift_retain(a2);
  v20 = static VerticalAlignment.firstTextBaseline.getter(v7);
  sub_10005954C((uint64_t)v33, v23);
  v9 = v23[0];
  v8 = v23[1];
  v10 = v24;
  v12 = v25;
  v11 = v26;
  v13 = v27;
  v14 = v28;
  v15 = v29;
  v16 = v30;
  v17 = v31;
  v21 = v31;
  v18 = v32;
  LOBYTE(v23[0]) = 0;
  v37 = v24;
  v36 = v27;
  v35 = v30;
  *(_QWORD *)a3 = v22;
  *(_QWORD *)(a3 + 8) = KeyPath;
  *(_QWORD *)(a3 + 16) = a2;
  *(_QWORD *)(a3 + 24) = v20;
  *(_QWORD *)(a3 + 32) = 0;
  *(_BYTE *)(a3 + 40) = 0;
  *(_QWORD *)(a3 + 48) = v9;
  *(_QWORD *)(a3 + 56) = v8;
  *(_BYTE *)(a3 + 64) = v10;
  *(_QWORD *)(a3 + 72) = v12;
  *(_QWORD *)(a3 + 80) = v11;
  *(_BYTE *)(a3 + 88) = v13;
  *(_QWORD *)(a3 + 96) = v14;
  *(_QWORD *)(a3 + 104) = v15;
  *(_BYTE *)(a3 + 112) = v16;
  *(_QWORD *)(a3 + 120) = v17;
  *(_QWORD *)(a3 + 128) = v18;
  swift_retain(v22);
  swift_retain(KeyPath);
  swift_retain(a2);
  sub_100032F84(v9, v8, v10);
  swift_bridgeObjectRetain(v12);
  sub_100032F84(v14, v15, v16);
  swift_bridgeObjectRetain(v21);
  sub_1000330B0(v9, v8, v10);
  swift_bridgeObjectRelease(v12);
  sub_1000330B0(v14, v15, v16);
  swift_release(a2);
  swift_release(KeyPath);
  swift_release(v22);
  return swift_bridgeObjectRelease(v21);
}

uint64_t sub_10005954C@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  char v34;
  Swift::String v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  Swift::String v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char v53;
  char v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char v72;
  uint64_t v73;
  uint64_t v74;
  char v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t *v78;
  uint64_t v79;
  uint64_t v81;
  uint64_t v82;
  unsigned int v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t *v86;
  int v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;

  v86 = a2;
  v3 = type metadata accessor for LocalizedStringKey.StringInterpolation(0);
  __chkstk_darwin(v3);
  v5 = (char *)&v81 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = *(_QWORD *)(a1 + 24);
  v91 = *(_QWORD *)(a1 + 16);
  v92 = v6;
  v7 = sub_1000037D4();
  swift_bridgeObjectRetain(v6);
  v8 = Text.init<A>(_:)(&v91, &type metadata for String, v7);
  v10 = v9;
  v12 = v11;
  v14 = v13 & 1;
  v15 = static Font.headline.getter();
  v16 = Text.font(_:)(v15, v8, v10, v14, v12);
  v88 = v17;
  v89 = v16;
  v19 = v18;
  v90 = v20;
  swift_release(v15);
  v87 = v19 & 1;
  sub_1000330B0(v8, v10, v14);
  swift_bridgeObjectRelease(v12);
  v21 = *(_QWORD *)(a1 + 40);
  v91 = *(_QWORD *)(a1 + 32);
  v92 = v21;
  swift_bridgeObjectRetain(v21);
  v22 = Text.init<A>(_:)(&v91, &type metadata for String, v7);
  v24 = v23;
  v26 = v25;
  v28 = v27 & 1;
  v29 = static Font.body.getter(v22);
  v30 = Text.font(_:)(v29, v22, v24, v28, v26);
  v84 = v31;
  v85 = v32;
  v34 = v33;
  swift_release(v29);
  v83 = v34 & 1;
  sub_1000330B0(v22, v24, v28);
  swift_bridgeObjectRelease(v26);
  LocalizedStringKey.StringInterpolation.init(literalCapacity:interpolationCount:)(0, 1);
  v35._countAndFlagsBits = 0;
  v35._object = (void *)0xE000000000000000;
  LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v35);
  if ((*(_BYTE *)(a1 + 48) & 1) != 0)
    v36 = 37;
  else
    v36 = 0;
  if ((*(_BYTE *)(a1 + 48) & 1) != 0)
    v37 = 0xE100000000000000;
  else
    v37 = 0xE000000000000000;
  v38 = v37;
  LocalizedStringKey.StringInterpolation.appendInterpolation(_:)(*(Swift::String *)&v36);
  swift_bridgeObjectRelease(v37);
  v39._countAndFlagsBits = 0;
  v39._object = (void *)0xE000000000000000;
  LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v39);
  v40 = LocalizedStringKey.init(stringInterpolation:)(v5);
  v41 = Text.init(_:tableName:bundle:comment:)(v40);
  v43 = v42;
  v45 = v44;
  v47 = v46 & 1;
  v48 = static Font.body.getter(v41);
  v49 = Font.smallCaps()(v48);
  swift_release(v48);
  v50 = Text.font(_:)(v49, v41, v43, v47, v45);
  v52 = v51;
  v54 = v53;
  v56 = v55;
  swift_release(v49);
  v57 = v54 & 1;
  sub_1000330B0(v41, v43, v47);
  swift_bridgeObjectRelease(v45);
  v58 = v84;
  v59 = v85;
  LOBYTE(v41) = v83;
  v81 = static Text.+ infix(_:_:)(v30, v84, v83, v85, v50, v52, v57, v56, v81, v82);
  v82 = v60;
  v62 = v61;
  v64 = v63 & 1;
  sub_1000330B0(v50, v52, v57);
  swift_bridgeObjectRelease(v56);
  sub_1000330B0(v30, v58, v41);
  v65 = swift_bridgeObjectRelease(v59);
  v66 = static Font.body.getter(v65);
  v68 = v81;
  v67 = v82;
  v69 = Text.font(_:)(v66, v81, v62, v64, v82);
  v71 = v70;
  LOBYTE(v59) = v72;
  v74 = v73;
  swift_release(v66);
  sub_1000330B0(v68, v62, v64);
  swift_bridgeObjectRelease(v67);
  v75 = v87;
  LOBYTE(v91) = v87;
  v77 = v88;
  v76 = v89;
  v78 = v86;
  *v86 = v89;
  v78[1] = v77;
  *((_BYTE *)v78 + 16) = v75;
  v79 = v90;
  v78[3] = v90;
  v78[4] = 0;
  *((_BYTE *)v78 + 40) = 0;
  v78[6] = v69;
  v78[7] = v71;
  *((_BYTE *)v78 + 64) = v59 & 1;
  v78[9] = v74;
  v78[10] = 0x4000000000000000;
  sub_100032F84(v76, v77, v75);
  swift_bridgeObjectRetain(v79);
  sub_100032F84(v69, v71, v59 & 1);
  swift_bridgeObjectRetain(v74);
  sub_1000330B0(v69, v71, v59 & 1);
  swift_bridgeObjectRelease(v74);
  sub_1000330B0(v76, v77, v91);
  return swift_bridgeObjectRelease(v79);
}

unint64_t sub_100059930()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100083370;
  if (!qword_100083370)
  {
    v1 = sub_100003744(&qword_100083360);
    sub_10005999C();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100083370);
  }
  return result;
}

unint64_t sub_10005999C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100083378;
  if (!qword_100083378)
  {
    v1 = sub_100003744(&qword_100083358);
    sub_100059A40(&qword_100083380, &qword_100083350, &qword_100083388, &qword_100083348);
    sub_100033ED0(&qword_100082528, &qword_100082530, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100083378);
  }
  return result;
}

uint64_t sub_100059A40(unint64_t *a1, uint64_t *a2, unint64_t *a3, uint64_t *a4)
{
  uint64_t result;
  uint64_t v8;

  result = *a1;
  if (!result)
  {
    v8 = sub_100003744(a2);
    sub_100033ED0(a3, a4, (uint64_t)&protocol conformance descriptor for VStack<A>);
    sub_100033ED0(&qword_100082578, &qword_100082580, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v8);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100059AE0()
{
  uint64_t v0;

  return sub_1000592AC(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

unint64_t sub_100059AE8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000833B0;
  if (!qword_1000833B0)
  {
    v1 = sub_100003744(&qword_1000833A8);
    sub_100033ED0(&qword_1000833B8, &qword_1000833C0, (uint64_t)&protocol conformance descriptor for TupleView<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ForEach<A, B, C>, v1);
    atomic_store(result, (unint64_t *)&qword_1000833B0);
  }
  return result;
}

uint64_t sub_100059B64@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_1000593A8(a1, v2, a2);
}

unint64_t sub_100059B6C()
{
  unint64_t result;

  result = qword_1000833E0;
  if (!qword_1000833E0)
  {
    result = swift_getWitnessTable(&unk_10006478C, &type metadata for ThreeColumnDataRow);
    atomic_store(result, (unint64_t *)&qword_1000833E0);
  }
  return result;
}

unint64_t sub_100059BB0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100083408;
  if (!qword_100083408)
  {
    v1 = sub_100003744(&qword_1000833F8);
    sub_100059A40(&qword_100083410, &qword_1000833F0, &qword_100083418, &qword_1000833E8);
    sub_100033ED0(&qword_100082528, &qword_100082530, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100083408);
  }
  return result;
}

uint64_t sub_100059C54@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;

  return sub_100057D10(a1, v2, a2);
}

uint64_t sub_100059C5C(uint64_t result, uint64_t a2, char a3, uint64_t a4)
{
  if (a4)
  {
    sub_100032F84(result, a2, a3 & 1);
    return swift_bridgeObjectRetain(a4);
  }
  return result;
}

uint64_t sub_100059C8C(uint64_t result, uint64_t a2, char a3, uint64_t a4)
{
  if (a4)
  {
    sub_1000330B0(result, a2, a3 & 1);
    return swift_bridgeObjectRelease(a4);
  }
  return result;
}

__n128 initializeBufferWithCopyOfBuffer for ThreeByThreeGridWithOptionalMiddleColumn(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  a1[1].n128_u64[0] = a2[1].n128_u64[0];
  *a1 = result;
  return result;
}

uint64_t getEnumTagSinglePayload for ThreeByThreeGridWithOptionalMiddleColumn(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 24))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for ThreeByThreeGridWithOptionalMiddleColumn(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)result = (a2 - 1);
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 24) = v3;
  return result;
}

ValueMetadata *type metadata accessor for ThreeByThreeGridWithOptionalMiddleColumn()
{
  return &type metadata for ThreeByThreeGridWithOptionalMiddleColumn;
}

uint64_t sub_100059D2C(uint64_t a1)
{
  return sub_100059D54(a1, &qword_100083360, (uint64_t (*)(void))sub_100059930);
}

uint64_t sub_100059D40(uint64_t a1)
{
  return sub_100059D54(a1, &qword_1000833F8, (uint64_t (*)(void))sub_100059BB0);
}

uint64_t sub_100059D54(uint64_t a1, uint64_t *a2, uint64_t (*a3)(void))
{
  _QWORD v5[2];

  v5[0] = sub_100003744(a2);
  v5[1] = a3();
  return swift_getOpaqueTypeConformance2(v5, &opaque type descriptor for <<opaque return type of View.accessibilityElement(children:)>>, 1);
}

unint64_t sub_100059DA4()
{
  unint64_t result;

  result = qword_100083440;
  if (!qword_100083440)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for EmptyAnimatableData, &type metadata for EmptyAnimatableData);
    atomic_store(result, (unint64_t *)&qword_100083440);
  }
  return result;
}

unint64_t sub_100059DEC()
{
  unint64_t result;

  result = qword_100083448;
  if (!qword_100083448)
  {
    result = swift_getWitnessTable(&unk_1000645DC, &type metadata for ThreeByThreeGridWithOptionalMiddleColumn);
    atomic_store(result, (unint64_t *)&qword_100083448);
  }
  return result;
}

uint64_t sub_100059E30(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;

  v4 = type metadata accessor for LayoutSubviews(0);
  v5 = sub_100015884(&qword_100081EF8, (uint64_t (*)(uint64_t))&type metadata accessor for LayoutSubviews, (uint64_t)&protocol conformance descriptor for LayoutSubviews);
  dispatch thunk of Collection.startIndex.getter(&v9, v4, v5);
  dispatch thunk of Collection.endIndex.getter(&v8, v4, v5);
  result = dispatch thunk of Collection.distance(from:to:)(&v9, &v8, v4, v5);
  if (!a3)
  {
    __break(1u);
LABEL_8:
    __break(1u);
    return result;
  }
  if (result == 0x8000000000000000 && a3 == -1)
    goto LABEL_8;
  return result;
}

void sub_100059F0C(uint64_t a1, CGFloat a2, CGFloat a3, CGFloat a4, CGFloat a5, double a6, double a7, uint64_t a8, uint64_t a9)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  CGFloat y;
  CGFloat x;
  CGFloat height;
  CGFloat width;
  CGFloat v34;
  uint64_t v35;
  double v36;
  double v37;
  double *v38;
  uint64_t v39;
  CGFloat v40;
  CGFloat v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  double v46;
  double v47;
  uint64_t v48;
  char *v49;
  void (*v50)(char *);
  char v51;
  CGFloat v52;
  CGFloat v53;
  CGFloat v54;
  CGFloat v55;
  double MinX;
  double v57;
  double v58;
  void (*v59)(char *, uint64_t, uint64_t);
  char *v60;
  char v61;
  uint64_t (*v62)(char *, uint64_t);
  double v63;
  char v64;
  uint64_t v65;
  double v66;
  double v67;
  double v68;
  double v69;
  uint64_t v70;
  uint64_t v71;
  CGFloat v72;
  double v73;
  double *v74;
  uint64_t v75;
  double v76;
  double *v77;
  double v78;
  double v79;
  CGFloat v80;
  char *v81;
  void (*v82)(char *, uint64_t);
  char *v83;
  uint64_t v84;
  uint64_t v85;
  double v86;
  CGFloat MinY;
  double v88;
  double v89;
  double v90;
  double v91;
  double v92;
  double v93;
  double v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  void (*v98)(char *, uint64_t);
  char *v99;
  uint64_t v100;
  CGFloat v101;
  double v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  char *v107;
  CGRect v108;
  double v109;
  unint64_t v110;
  double v111[2];
  CGRect v112;
  CGRect v113;

  v108.size.width = a4;
  v108.size.height = a5;
  v108.origin.x = a2;
  v108.origin.y = a3;
  v105 = type metadata accessor for LayoutSubview(0);
  v104 = *(_QWORD *)(v105 - 8);
  v13 = __chkstk_darwin(v105);
  v107 = (char *)&v95 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = __chkstk_darwin(v13);
  v17 = (char *)&v95 - v16;
  __chkstk_darwin(v15);
  v19 = (char *)&v95 - v18;
  v20 = type metadata accessor for LayoutDirection(0);
  v102 = *(double *)(v20 - 8);
  v21 = __chkstk_darwin(v20);
  v23 = (char *)&v95 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v21);
  v25 = (char *)&v95 - v24;
  v26 = type metadata accessor for LayoutSubviews(0);
  v27 = sub_100015884(&qword_100081EF8, (uint64_t (*)(uint64_t))&type metadata accessor for LayoutSubviews, (uint64_t)&protocol conformance descriptor for LayoutSubviews);
  dispatch thunk of Collection.startIndex.getter(v111, v26, v27);
  dispatch thunk of Collection.endIndex.getter(&v110, v26, v27);
  if (*(_QWORD *)&v111[0] != v110)
  {
    dispatch thunk of Collection.startIndex.getter(v111, v26, v27);
    dispatch thunk of Collection.endIndex.getter(&v110, v26, v27);
    v28 = dispatch thunk of Collection.distance(from:to:)(v111, &v110, v26, v27);
    if (!a9)
    {
LABEL_45:
      __break(1u);
LABEL_46:
      __break(1u);
      goto LABEL_47;
    }
    v29 = v28;
    if (v28 == 0x8000000000000000 && a9 == -1)
      goto LABEL_50;
    x = v108.origin.x;
    y = v108.origin.y;
    width = v108.size.width;
    height = v108.size.height;
    v34 = CGRectGetHeight(v108);
    v112.origin.x = x;
    v112.origin.y = y;
    v112.size.width = width;
    v112.size.height = height;
    v101 = CGRectGetWidth(v112);
    v113.origin.x = x;
    v113.origin.y = y;
    v113.size.width = width;
    v113.size.height = height;
    v36 = CGRectGetHeight(v113);
    if (a9 < 0)
      goto LABEL_46;
    v37 = v36;
    __chkstk_darwin(v35);
    *((double *)&v95 - 4) = a6;
    *((double *)&v95 - 3) = a7;
    *(&v95 - 2) = a9;
    *(&v95 - 1) = a1;
    v38 = sub_100056DF0((double *)sub_10005A700, (uint64_t)(&v95 - 6), 0, a9);
    if (v29 / a9 < 0)
    {
LABEL_47:
      __break(1u);
      goto LABEL_48;
    }
    v39 = __chkstk_darwin(v38);
    *(&v95 - 10) = a1;
    *((double *)&v95 - 9) = a6;
    *((double *)&v95 - 8) = a7;
    *(&v95 - 7) = a9;
    *(&v95 - 6) = v39;
    v97 = v39;
    *(&v95 - 5) = (uint64_t)&off_10007C630;
    v40 = v108.origin.y;
    *(&v95 - 4) = *(_QWORD *)&v108.origin.x;
    *((CGFloat *)&v95 - 3) = v40;
    v41 = v108.size.height;
    *(&v95 - 2) = *(_QWORD *)&v108.size.width;
    *((CGFloat *)&v95 - 1) = v41;
    v106 = v42;
    v43 = (uint64_t)sub_100056F3C((double *)sub_10005A738, (uint64_t)(&v95 - 12), 0, v42);
    v44 = v106;
    v100 = v43;
    v111[0] = 0.0;
    v103 = a9;
    if (v106)
    {
      v45 = 0;
      while (v44 != v45)
      {
        v110 = v45;
        v43 = sub_100058328(v111, &v110, v100, a9, &v109);
        ++v45;
        v46 = v109;
        v111[0] = v109;
        v44 = v106;
        if (v106 == v45)
          goto LABEL_13;
      }
LABEL_44:
      __break(1u);
      __break(1u);
      __break(1u);
      __break(1u);
      __break(1u);
      goto LABEL_45;
    }
    v46 = 0.0;
LABEL_13:
    LayoutSubviews.layoutDirection.getter(v43);
    v47 = v102;
    v48 = enum case for LayoutDirection.leftToRight(_:);
    v49 = v25;
    v50 = *(void (**)(char *))(*(_QWORD *)&v102 + 104);
    v50(v23);
    v99 = v49;
    v51 = static LayoutDirection.== infix(_:_:)(v49, v23);
    v98 = *(void (**)(char *, uint64_t))(*(_QWORD *)&v47 + 8);
    v98(v23, v20);
    v52 = v108.origin.x;
    v53 = v108.origin.y;
    v54 = v108.size.width;
    v55 = v108.size.height;
    if ((v51 & 1) != 0)
      MinX = CGRectGetMinX(*(CGRect *)&v52);
    else
      MinX = CGRectGetMaxX(*(CGRect *)&v52);
    v57 = MinX;
    v58 = v34;
    v59 = (void (*)(char *, uint64_t, uint64_t))v50;
    ((void (*)(char *, uint64_t, uint64_t))v50)(v23, v48, v20);
    v60 = v99;
    v61 = static LayoutDirection.== infix(_:_:)(v99, v23);
    v62 = (uint64_t (*)(char *, uint64_t))v98;
    v98(v23, v20);
    if ((v61 & 1) != 0)
      v63 = 1.0;
    else
      v63 = -1.0;
    v59(v23, v48, v20);
    v64 = static LayoutDirection.== infix(_:_:)(v60, v23);
    v65 = v62(v23, v20);
    v96 = v20;
    if ((v64 & 1) != 0)
      static UnitPoint.topLeading.getter(v65);
    else
      v66 = static UnitPoint.topTrailing.getter(v65);
    v68 = v66;
    v69 = v67;
    if (v106)
    {
      if (!*(_QWORD *)(v97 + 16))
      {
LABEL_48:
        __break(1u);
LABEL_49:
        __break(1u);
LABEL_50:
        __break(1u);
        return;
      }
      v70 = *(_QWORD *)(v100 + 16);
      if (!v70 || v106 > v70)
        goto LABEL_49;
      v71 = 0;
      v72 = v101;
      v73 = v37;
      v74 = (double *)(v97 + 32);
      v75 = v100 + 32;
      v76 = 4.0;
      if (v106 > 1)
        v76 = 2.0;
      v102 = v58 / (double)v106;
      v101 = v102 / v76;
      while (1)
      {
        v85 = v71 * v103;
        if ((unsigned __int128)(v71 * (__int128)v103) >> 64 != (v71 * v103) >> 63)
          break;
        LayoutSubviews.subscript.getter(v85);
        v86 = *v74;
        MinY = CGRectGetMinY(v108);
        v88 = v57 + v63 * v86 * 0.5;
        v89 = v102 * (double)v71;
        v90 = v101 + v89 + MinY + -1.0;
        v91 = static UnitPoint.center.getter();
        LOBYTE(v111[0]) = 0;
        LOBYTE(v110) = 0;
        LayoutSubview.place(at:anchor:proposal:)(*(_QWORD *)&v72, 0, *(_QWORD *)&v73, 0, v88, v90, v91, v92);
        if (__OFADD__(v85, 1))
          goto LABEL_42;
        LayoutSubviews.subscript.getter(v85 + 1);
        if (*(_BYTE *)(v75 + v71) == 1)
        {
          v93 = v57 + v63 * (*v74 + 2.0);
          v94 = v89 + CGRectGetMinY(v108);
        }
        else
        {
          v94 = -10000.0;
          v93 = -10000.0;
        }
        LOBYTE(v111[0]) = 0;
        LOBYTE(v110) = 0;
        LayoutSubview.place(at:anchor:proposal:)(*(_QWORD *)&v72, 0, *(_QWORD *)&v73, 0, v93, v94, v68, v69);
        if (__OFADD__(v85, 2))
          goto LABEL_43;
        LayoutSubviews.subscript.getter(v85 + 2);
        if ((*(_BYTE *)(v75 + v71) & 1) != 0)
        {
          v77 = (double *)&qword_10007C658;
          v78 = v46 + *v74 + 2.0;
        }
        else
        {
          v78 = 2.0;
          v77 = v74;
        }
        ++v71;
        v79 = *v77 + v78;
        v80 = CGRectGetMinY(v108);
        LOBYTE(v111[0]) = 0;
        LOBYTE(v110) = 0;
        v81 = v107;
        LayoutSubview.place(at:anchor:proposal:)(*(_QWORD *)&v72, 0, *(_QWORD *)&v73, 0, v57 + v63 * v79, v89 + v80, v68, v69);
        v82 = *(void (**)(char *, uint64_t))(v104 + 8);
        v83 = v81;
        v84 = v105;
        v82(v83, v105);
        v82(v17, v84);
        v82(v19, v84);
        if (v106 == v71)
          goto LABEL_39;
      }
      __break(1u);
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      goto LABEL_44;
    }
LABEL_39:
    v98(v99, v96);
    swift_bridgeObjectRelease(v100);
    swift_bridgeObjectRelease(v97);
  }
}

void sub_10005A700(uint64_t *a1@<X0>, double *a2@<X8>)
{
  uint64_t v2;

  *a2 = sub_10005A768(*(_QWORD *)(v2 + 40), *a1);
}

uint64_t sub_10005A738@<X0>(uint64_t *a1@<X0>, BOOL *a2@<X8>)
{
  uint64_t v2;

  return sub_100058188(a1, *(_QWORD *)(v2 + 40), *(_QWORD *)(v2 + 48), *(_QWORD *)(v2 + 56), a2, *(CGFloat *)(v2 + 64), *(CGFloat *)(v2 + 72), *(CGFloat *)(v2 + 80), *(CGFloat *)(v2 + 88));
}

double sub_10005A768(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t (*v17)(char *, unint64_t, uint64_t);
  uint64_t v18;
  uint64_t v19;
  char v20;
  char v21;
  double v22;
  double *v23;
  unint64_t v24;
  unint64_t v25;
  double v26;
  double *v27;
  double v28;
  double v29;
  double v30;
  uint64_t v32;
  uint64_t v33;
  char v34[16];
  uint64_t v35;
  uint64_t v36;
  char v37;
  char v38;
  double *v39;

  v4 = type metadata accessor for LayoutSubview(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v32 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for LayoutSubviews(0);
  __chkstk_darwin(v8);
  (*(void (**)(char *, uint64_t))(v10 + 16))((char *)&v32 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0), a1);
  v35 = a1;
  v36 = a2;
  v11 = sub_100058464((uint64_t (*)(char *))sub_10005A9B0, (uint64_t)v34);
  v12 = v11;
  v13 = *(_QWORD *)(v11 + 16);
  if (v13)
  {
    v39 = _swiftEmptyArrayStorage;
    sub_10001E56C(0, v13, 0);
    v14 = (*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
    v33 = v12;
    v15 = v12 + v14;
    v16 = *(_QWORD *)(v5 + 72);
    v17 = *(uint64_t (**)(char *, unint64_t, uint64_t))(v5 + 16);
    do
    {
      v18 = v17(v7, v15, v4);
      v19 = static ProposedViewSize.unspecified.getter(v18);
      v38 = v20 & 1;
      v37 = v21 & 1;
      v22 = LayoutSubview.sizeThatFits(_:)(v19);
      (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
      v23 = v39;
      if ((swift_isUniquelyReferenced_nonNull_native(v39) & 1) == 0)
      {
        sub_10001E56C(0, *((_QWORD *)v23 + 2) + 1, 1);
        v23 = v39;
      }
      v25 = *((_QWORD *)v23 + 2);
      v24 = *((_QWORD *)v23 + 3);
      if (v25 >= v24 >> 1)
      {
        sub_10001E56C(v24 > 1, v25 + 1, 1);
        v23 = v39;
      }
      *((_QWORD *)v23 + 2) = v25 + 1;
      v23[v25 + 4] = v22;
      v15 += v16;
      --v13;
    }
    while (v13);
    swift_bridgeObjectRelease(v33);
    v26 = v23[2];
    if (v26 != 0.0)
      goto LABEL_9;
LABEL_15:
    v28 = 0.0;
    goto LABEL_16;
  }
  swift_bridgeObjectRelease(v11);
  v23 = _swiftEmptyArrayStorage;
  v26 = _swiftEmptyArrayStorage[2];
  if (v26 == 0.0)
    goto LABEL_15;
LABEL_9:
  v27 = v23 + 4;
  v28 = 0.0;
  do
  {
    v29 = *v27++;
    v30 = v29;
    if (v28 <= v29)
      v28 = v30;
    --*(_QWORD *)&v26;
  }
  while (v26 != 0.0);
LABEL_16:
  swift_bridgeObjectRelease(v23);
  return v28;
}

uint64_t sub_10005A9B0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t result;
  char v4;

  v2 = *(_QWORD *)(v1 + 24);
  result = sub_10001B6A4(a1);
  if ((v4 & 1) == 0)
    return result % 3 == v2;
  __break(1u);
  return result;
}

uint64_t sub_10005AA0C(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  char v21;
  char v22;
  char v23;
  char v24;

  v3 = v1;
  v5 = sub_100003704(&qword_100083470);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_10000E850(a1, v9);
  v11 = sub_10005B008();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for ThreeColumnDataRow.CodingKeys, &type metadata for ThreeColumnDataRow.CodingKeys, v11, v9, v10);
  v12 = *v3;
  v13 = v3[1];
  v24 = 0;
  KeyedEncodingContainer.encode(_:forKey:)(v12, v13, &v24, v5);
  if (!v2)
  {
    v14 = v3[2];
    v15 = v3[3];
    v23 = 1;
    KeyedEncodingContainer.encode(_:forKey:)(v14, v15, &v23, v5);
    v16 = v3[4];
    v17 = v3[5];
    v22 = 2;
    KeyedEncodingContainer.encode(_:forKey:)(v16, v17, &v22, v5);
    v18 = *((unsigned __int8 *)v3 + 48);
    v21 = 3;
    KeyedEncodingContainer.encode(_:forKey:)(v18, &v21, v5);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_10005AB70()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_10005ABA0 + 4 * byte_1000646B0[*v0]))(0x656D614E6E6F6369, 0xE800000000000000);
}

uint64_t sub_10005ABA0()
{
  return 0x6C6562616CLL;
}

uint64_t sub_10005ABB4()
{
  return 0x7972616D6D7573;
}

unint64_t sub_10005ABCC()
{
  return 0xD00000000000002ALL;
}

uint64_t sub_10005ABE8@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_10005B700(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_10005AC0C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10005B008();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10005AC34(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10005B008();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10005AC5C@<X0>(_QWORD *a1@<X8>)
{
  uint64_t *v1;
  uint64_t v3;
  void *v4;
  Swift::String v5;
  Swift::String v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;

  v3 = v1[2];
  v4 = (void *)v1[3];
  v8 = *v1;
  v9 = v1[1];
  swift_bridgeObjectRetain(v9);
  v5._countAndFlagsBits = 47;
  v5._object = (void *)0xE100000000000000;
  String.append(_:)(v5);
  swift_bridgeObjectRetain(v9);
  v6._countAndFlagsBits = v3;
  v6._object = v4;
  String.append(_:)(v6);
  result = swift_bridgeObjectRelease(v9);
  *a1 = v8;
  a1[1] = v9;
  return result;
}

uint64_t sub_10005ACE0(_QWORD *a1)
{
  return sub_10005AA0C(a1);
}

uint64_t sub_10005ACF4()
{
  uint64_t *v0;
  uint64_t v1;
  void *v2;
  Swift::String v3;
  Swift::String v4;
  uint64_t v5;
  void *v6;
  Swift::String v7;
  Swift::String v8;
  void *v9;
  uint64_t v10;
  Swift::String v11;
  Swift::String v12;
  _QWORD v14[2];

  BYTE5(v14[1]) = 0;
  _StringGuts.grow(_:)(40);
  swift_bridgeObjectRelease(0xE000000000000000);
  strcpy((char *)v14, "{ iconName: ");
  HIWORD(v14[1]) = -5120;
  v1 = *v0;
  v2 = (void *)v0[1];
  swift_bridgeObjectRetain(v2);
  v3._countAndFlagsBits = v1;
  v3._object = v2;
  String.append(_:)(v3);
  swift_bridgeObjectRelease(v2);
  v4._countAndFlagsBits = 0x3A6C6562616C202CLL;
  v4._object = (void *)0xE900000000000020;
  String.append(_:)(v4);
  v5 = v0[2];
  v6 = (void *)v0[3];
  swift_bridgeObjectRetain(v6);
  v7._countAndFlagsBits = v5;
  v7._object = v6;
  String.append(_:)(v7);
  swift_bridgeObjectRelease(v6);
  v8._countAndFlagsBits = 0x72616D6D7573202CLL;
  v8._object = (void *)0xEB00000000203A79;
  String.append(_:)(v8);
  v10 = v0[4];
  v9 = (void *)v0[5];
  swift_bridgeObjectRetain(v9);
  v11._countAndFlagsBits = v10;
  v11._object = v9;
  String.append(_:)(v11);
  swift_bridgeObjectRelease(v9);
  v12._countAndFlagsBits = 32032;
  v12._object = (void *)0xE200000000000000;
  String.append(_:)(v12);
  return v14[0];
}

ValueMetadata *type metadata accessor for ThreeColumnDataRow()
{
  return &type metadata for ThreeColumnDataRow;
}

unint64_t sub_10005AE38()
{
  unint64_t result;

  result = qword_100083468;
  if (!qword_100083468)
  {
    result = swift_getWitnessTable(&unk_10006472C, &type metadata for ThreeColumnDataRow);
    atomic_store(result, (unint64_t *)&qword_100083468);
  }
  return result;
}

void sub_10005AE7C()
{
  qword_10008A8B0 = (uint64_t)&_swiftEmptyArrayStorage;
}

uint64_t sub_10005AE90(uint64_t a1)
{
  return sub_10005AED8(a1, 0xD000000000000038, 0x800000010006A220, &qword_10008A8B8);
}

uint64_t sub_10005AEB4(uint64_t a1)
{
  return sub_10005AED8(a1, 0xD000000000000035, 0x800000010006A260, &qword_10008A8C0);
}

uint64_t sub_10005AED8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t result;
  uint64_t v17;
  _BYTE v18[16];

  v7 = type metadata accessor for Locale(0);
  __chkstk_darwin(v7);
  v9 = &v18[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v10 = type metadata accessor for String.LocalizationValue(0);
  __chkstk_darwin(v10);
  v12 = &v18[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v13 = sub_100003704(&qword_100081C88);
  v14 = swift_allocObject(v13, 88, 7);
  *(_OWORD *)(v14 + 16) = xmmword_1000607D0;
  v15 = String.LocalizationValue.init(stringLiteral:)(a2, a3);
  static Locale.current.getter(v15);
  result = String.init(localized:table:bundle:locale:comment:)(v12, 0xD000000000000022, 0x8000000100068830, 0, v9, 0, 0, 256);
  *(_QWORD *)(v14 + 32) = 0;
  *(_QWORD *)(v14 + 40) = 0xE000000000000000;
  *(_QWORD *)(v14 + 48) = 0;
  *(_QWORD *)(v14 + 56) = 0xE000000000000000;
  *(_QWORD *)(v14 + 64) = result;
  *(_QWORD *)(v14 + 72) = v17;
  *(_BYTE *)(v14 + 80) = 0;
  *a4 = v14;
  return result;
}

unint64_t sub_10005B008()
{
  unint64_t result;

  result = qword_100083478;
  if (!qword_100083478)
  {
    result = swift_getWitnessTable(&unk_100064910, &type metadata for ThreeColumnDataRow.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100083478);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for ThreeColumnDataRow.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_10005B098 + 4 * byte_1000646B9[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_10005B0CC + 4 * byte_1000646B4[v4]))();
}

uint64_t sub_10005B0CC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10005B0D4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10005B0DCLL);
  return result;
}

uint64_t sub_10005B0E8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10005B0F0);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_10005B0F4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10005B0FC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ThreeColumnDataRow.CodingKeys()
{
  return &type metadata for ThreeColumnDataRow.CodingKeys;
}

uint64_t *sub_10005B118(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v14 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v14 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v14);
  }
  else
  {
    v7 = type metadata accessor for Date(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = a3[5];
    v9 = a3[6];
    v10 = (uint64_t *)((char *)a1 + v8);
    v11 = (uint64_t *)((char *)a2 + v8);
    v12 = v11[1];
    *v10 = *v11;
    v10[1] = v12;
    v13 = *(uint64_t *)((char *)a2 + v9);
    *(uint64_t *)((char *)a1 + v9) = v13;
    *(_OWORD *)((char *)a1 + a3[7]) = *(_OWORD *)((char *)a2 + a3[7]);
    swift_bridgeObjectRetain(v12);
    swift_bridgeObjectRetain(v13);
  }
  return a1;
}

uint64_t sub_10005B1C8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + *(int *)(a2 + 20) + 8));
  return swift_bridgeObjectRelease(*(_QWORD *)(a1 + *(int *)(a2 + 24)));
}

uint64_t sub_10005B21C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;

  v6 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = a3[5];
  v8 = a3[6];
  v9 = (_QWORD *)(a1 + v7);
  v10 = (_QWORD *)(a2 + v7);
  v11 = v10[1];
  *v9 = *v10;
  v9[1] = v11;
  v12 = *(_QWORD *)(a2 + v8);
  *(_QWORD *)(a1 + v8) = v12;
  *(_OWORD *)(a1 + a3[7]) = *(_OWORD *)(a2 + a3[7]);
  swift_bridgeObjectRetain(v11);
  swift_bridgeObjectRetain(v12);
  return a1;
}

uint64_t sub_10005B2A0(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;

  v6 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = a3[5];
  v8 = (_QWORD *)(a1 + v7);
  v9 = (_QWORD *)(a2 + v7);
  *v8 = *v9;
  v10 = v9[1];
  v11 = v8[1];
  v8[1] = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease(v11);
  v12 = a3[6];
  v13 = *(_QWORD *)(a2 + v12);
  v14 = *(_QWORD *)(a1 + v12);
  *(_QWORD *)(a1 + v12) = v13;
  swift_bridgeObjectRetain(v13);
  swift_bridgeObjectRelease(v14);
  v15 = a3[7];
  v16 = (_QWORD *)(a1 + v15);
  v17 = (_QWORD *)(a2 + v15);
  *v16 = *v17;
  v16[1] = v17[1];
  return a1;
}

uint64_t sub_10005B354(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;

  v6 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = a3[6];
  *(_OWORD *)(a1 + a3[5]) = *(_OWORD *)(a2 + a3[5]);
  *(_QWORD *)(a1 + v7) = *(_QWORD *)(a2 + v7);
  *(_OWORD *)(a1 + a3[7]) = *(_OWORD *)(a2 + a3[7]);
  return a1;
}

uint64_t sub_10005B3C4(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v6 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = a3[5];
  v8 = (_QWORD *)(a1 + v7);
  v9 = (uint64_t *)(a2 + v7);
  v11 = *v9;
  v10 = v9[1];
  v12 = v8[1];
  *v8 = v11;
  v8[1] = v10;
  swift_bridgeObjectRelease(v12);
  v13 = a3[6];
  v14 = *(_QWORD *)(a1 + v13);
  *(_QWORD *)(a1 + v13) = *(_QWORD *)(a2 + v13);
  swift_bridgeObjectRelease(v14);
  *(_OWORD *)(a1 + a3[7]) = *(_OWORD *)(a2 + a3[7]);
  return a1;
}

uint64_t sub_10005B450(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10005B45C);
}

uint64_t sub_10005B45C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;

  v6 = type metadata accessor for Date(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 20) + 8);
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  return (v9 + 1);
}

uint64_t sub_10005B4DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10005B4E8);
}

uint64_t sub_10005B4E8(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = type metadata accessor for Date(0);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 20) + 8) = (a2 - 1);
  return result;
}

uint64_t type metadata accessor for ThreeColumnDataEntry(uint64_t a1)
{
  uint64_t result;

  result = qword_1000834D8;
  if (!qword_1000834D8)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for ThreeColumnDataEntry);
  return result;
}

uint64_t sub_10005B5A0(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[4];

  result = type metadata accessor for Date(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(result - 8) + 64;
    v4[1] = &unk_1000647F8;
    v4[2] = (char *)&value witness table for Builtin.BridgeObject + 64;
    v4[3] = &unk_100064810;
    swift_initStructMetadata(a1, 256, 4, v4, a1 + 16);
    return 0;
  }
  return result;
}

unint64_t sub_10005B62C()
{
  unint64_t result;

  result = qword_100083518;
  if (!qword_100083518)
  {
    result = swift_getWitnessTable(&unk_1000648E8, &type metadata for ThreeColumnDataRow.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100083518);
  }
  return result;
}

unint64_t sub_10005B674()
{
  unint64_t result;

  result = qword_100083520;
  if (!qword_100083520)
  {
    result = swift_getWitnessTable(&unk_100064858, &type metadata for ThreeColumnDataRow.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100083520);
  }
  return result;
}

unint64_t sub_10005B6BC()
{
  unint64_t result;

  result = qword_100083528;
  if (!qword_100083528)
  {
    result = swift_getWitnessTable(&unk_100064880, &type metadata for ThreeColumnDataRow.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100083528);
  }
  return result;
}

uint64_t sub_10005B700(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v7;
  unint64_t v8;
  char v9;

  if (a1 == 0x656D614E6E6F6369 && a2 == 0xE800000000000000)
  {
    v5 = 0xE800000000000000;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x656D614E6E6F6369, 0xE800000000000000, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x6C6562616CLL && a2 == 0xE500000000000000)
  {
    v7 = 0xE500000000000000;
LABEL_14:
    swift_bridgeObjectRelease(v7);
    return 1;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6C6562616CLL, 0xE500000000000000, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
    goto LABEL_14;
  }
  if (a1 == 0x7972616D6D7573 && a2 == 0xE700000000000000)
  {
    v8 = 0xE700000000000000;
LABEL_20:
    swift_bridgeObjectRelease(v8);
    return 2;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x7972616D6D7573, 0xE700000000000000, a1, a2, 0) & 1) != 0)
  {
    v8 = a2;
    goto LABEL_20;
  }
  if (a1 == 0xD00000000000002ALL && a2 == 0x800000010006A2A0)
  {
    swift_bridgeObjectRelease(0x800000010006A2A0);
    return 3;
  }
  else
  {
    v9 = _stringCompareWithSmolCheck(_:_:expecting:)(0xD00000000000002ALL, 0x800000010006A2A0, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v9 & 1) != 0)
      return 3;
    else
      return 4;
  }
}

void *UmbrellaCategory.climate.unsafeMutableAddressor()
{
  return &static UmbrellaCategory.climate;
}

void *UmbrellaCategory.securityAndAccess.unsafeMutableAddressor()
{
  return &static UmbrellaCategory.securityAndAccess;
}

void *UmbrellaCategory.water.unsafeMutableAddressor()
{
  return &static UmbrellaCategory.water;
}

void *UmbrellaCategory.lightsAndSwitches.unsafeMutableAddressor()
{
  return &static UmbrellaCategory.lightsAndSwitches;
}

void *UmbrellaCategory.blinds.unsafeMutableAddressor()
{
  return &static UmbrellaCategory.blinds;
}

void *UmbrellaCategory.speakersAndTelevisions.unsafeMutableAddressor()
{
  return &static UmbrellaCategory.speakersAndTelevisions;
}

uint64_t static UmbrellaCategory.speakersAndTelevisions.getter()
{
  return 16;
}

uint64_t static UmbrellaCategory.water.getter()
{
  return 32;
}

void sub_10005B904()
{
  static UmbrellaCategory.allCategories = (uint64_t)&off_10007C668;
}

uint64_t *UmbrellaCategory.allCategories.unsafeMutableAddressor()
{
  if (qword_100081758 != -1)
    swift_once(&qword_100081758, sub_10005B904);
  return &static UmbrellaCategory.allCategories;
}

uint64_t static UmbrellaCategory.allCategories.getter()
{
  if (qword_100081758 != -1)
    swift_once(&qword_100081758, sub_10005B904);
  return swift_bridgeObjectRetain(static UmbrellaCategory.allCategories);
}

uint64_t sub_10005B998@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t result;

  v4 = sub_10005BFFC(a1);
  result = swift_bridgeObjectRelease(a1);
  *a2 = v4;
  return result;
}

uint64_t UmbrellaCategory.iconColorBase.getter(uint64_t a1)
{
  uint64_t result;

  switch(a1)
  {
    case 1:
      result = static Color.gray.getter();
      break;
    case 2:
      result = static Color.purple.getter();
      break;
    case 4:
      result = static Color.yellow.getter();
      break;
    case 8:
      result = static Color.teal.getter();
      break;
    case 16:
      result = static Color.green.getter();
      break;
    case 32:
      result = static Color.cyan.getter();
      break;
    default:
      result = static Color.black.getter();
      break;
  }
  return result;
}

uint64_t UmbrellaCategory.localizedDescription.getter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  v1 = a1 - 1;
  result = 0x73646E696C42;
  switch(v1)
  {
    case 0:
      return result;
    case 1:
      result = 0x6574616D696C43;
      break;
    case 3:
      result = 0x746867694CLL;
      break;
    case 7:
      result = 0x7974697275636553;
      break;
    case 15:
      result = 0x7372656B61657053;
      break;
    case 31:
      result = 0x7265746157;
      break;
    default:
      result = 0;
      break;
  }
  return result;
}

uint64_t UmbrellaCategory.pluralLocalizedDescription.getter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  v1 = a1 - 1;
  result = 0x73646E696C42;
  switch(v1)
  {
    case 0:
      return result;
    case 1:
      result = 0x6574616D696C43;
      break;
    case 3:
      result = 0x73746867694CLL;
      break;
    case 7:
      result = 0x7974697275636553;
      break;
    case 15:
      result = 0x7372656B61657053;
      break;
    case 31:
      result = 0x7265746157;
      break;
    default:
      result = 0;
      break;
  }
  return result;
}

uint64_t UmbrellaCategory.accessoryLocalizedDescription.getter(uint64_t a1)
{
  uint64_t v2;
  _BYTE *v3;
  uint64_t v4;
  _BYTE *v5;
  uint64_t result;
  uint64_t v7;
  _BYTE v8[16];

  type metadata accessor for Locale(0);
  __chkstk_darwin();
  v3 = &v8[-((v2 + 15) & 0xFFFFFFFFFFFFFFF0)];
  type metadata accessor for String.LocalizationValue(0);
  __chkstk_darwin();
  v5 = &v8[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  result = 0x73646E696C42;
  switch(a1)
  {
    case 1:
      return result;
    case 2:
      result = 0xD000000000000011;
      break;
    case 4:
      v7 = String.LocalizationValue.init(stringLiteral:)(0xD00000000000001DLL, 0x800000010006A2F0);
      static Locale.current.getter(v7);
      result = String.init(localized:table:bundle:locale:comment:)(v5, 0xD00000000000001DLL, 0x8000000100068680, 0, v3, 0, 0, 256);
      break;
    case 8:
      result = 0xD000000000000012;
      break;
    case 16:
      result = 0x2072656B61657053;
      break;
    case 32:
      result = 0x65766C6156;
      break;
    default:
      result = 0;
      break;
  }
  return result;
}

uint64_t UmbrellaCategory.accessoryPluralLocalizedDescription.getter(uint64_t a1)
{
  uint64_t v2;
  _BYTE *v3;
  uint64_t v4;
  _BYTE *v5;
  uint64_t result;
  uint64_t v7;
  _BYTE v8[16];

  type metadata accessor for Locale(0);
  __chkstk_darwin();
  v3 = &v8[-((v2 + 15) & 0xFFFFFFFFFFFFFFF0)];
  type metadata accessor for String.LocalizationValue(0);
  __chkstk_darwin();
  v5 = &v8[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  result = 0x73646E696C42;
  switch(a1)
  {
    case 1:
      return result;
    case 2:
      result = 0xD000000000000013;
      break;
    case 4:
      v7 = String.LocalizationValue.init(stringLiteral:)(0xD000000000000023, 0x80000001000689A0);
      static Locale.current.getter(v7);
      result = String.init(localized:table:bundle:locale:comment:)(v5, 0xD00000000000001DLL, 0x8000000100068680, 0, v3, 0, 0, 256);
      break;
    case 8:
      result = 0xD000000000000014;
      break;
    case 16:
      result = 0x7372656B61657053;
      break;
    case 32:
      result = 0x7365766C6156;
      break;
    default:
      result = 0;
      break;
  }
  return result;
}

unint64_t sub_10005BECC()
{
  unint64_t result;

  result = qword_100083530;
  if (!qword_100083530)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for UmbrellaCategory, &type metadata for UmbrellaCategory);
    atomic_store(result, (unint64_t *)&qword_100083530);
  }
  return result;
}

unint64_t sub_10005BF14()
{
  unint64_t result;

  result = qword_100083538;
  if (!qword_100083538)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for UmbrellaCategory, &type metadata for UmbrellaCategory);
    atomic_store(result, (unint64_t *)&qword_100083538);
  }
  return result;
}

unint64_t sub_10005BF5C()
{
  unint64_t result;

  result = qword_100083540;
  if (!qword_100083540)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for UmbrellaCategory, &type metadata for UmbrellaCategory);
    atomic_store(result, (unint64_t *)&qword_100083540);
  }
  return result;
}

unint64_t sub_10005BFA4()
{
  unint64_t result;

  result = qword_100083548;
  if (!qword_100083548)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for UmbrellaCategory, &type metadata for UmbrellaCategory);
    atomic_store(result, (unint64_t *)&qword_100083548);
  }
  return result;
}

ValueMetadata *type metadata accessor for UmbrellaCategory()
{
  return &type metadata for UmbrellaCategory;
}

uint64_t sub_10005BFFC(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return 0;
  result = 0;
  v4 = (uint64_t *)(a1 + 32);
  do
  {
    v6 = *v4++;
    v5 = v6;
    if ((v6 & ~result) == 0)
      v5 = 0;
    result |= v5;
    --v1;
  }
  while (v1);
  return result;
}

Swift::String *homeDeepLinkURLPrefix.unsafeMutableAddressor()
{
  return &homeDeepLinkURLPrefix;
}

Swift::String *homeAccessoryTypePseudoHost.unsafeMutableAddressor()
{
  return &homeAccessoryTypePseudoHost;
}

Swift::String *homeDeepLinkURLMainScreen.unsafeMutableAddressor()
{
  return &homeDeepLinkURLMainScreen;
}

uint64_t sub_10005C058()
{
  uint64_t v0;

  v0 = sub_100003704(&qword_100083558);
  return TupleWidget.init(_:)(v0, v0);
}

int main(int argc, const char **argv, const char **envp)
{
  sub_10005C0C0();
  static WidgetBundle.main()();
  return 0;
}

unint64_t sub_10005C0C0()
{
  unint64_t result;

  result = qword_100083550;
  if (!qword_100083550)
  {
    result = swift_getWitnessTable(&unk_100064C84, &type metadata for HomeWidgetBundle);
    atomic_store(result, (unint64_t *)&qword_100083550);
  }
  return result;
}

ValueMetadata *type metadata accessor for HomeWidgetBundle()
{
  return &type metadata for HomeWidgetBundle;
}

uint64_t sub_10005C114(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_10006C4E8, 1);
}

unint64_t sub_10005C128()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100083560;
  if (!qword_100083560)
  {
    v1 = sub_100003744(&qword_100083568);
    result = swift_getWitnessTable(&protocol conformance descriptor for TupleWidget<A>, v1);
    atomic_store(result, (unint64_t *)&qword_100083560);
  }
  return result;
}

id SecurityAccessoryConfigurationIntent.init()()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for SecurityAccessoryConfigurationIntent();
  return objc_msgSendSuper2(&v2, "init");
}

uint64_t type metadata accessor for SecurityAccessoryConfigurationIntent()
{
  return objc_opt_self(SecurityAccessoryConfigurationIntent);
}

id SecurityAccessoryConfigurationIntent.__allocating_init(coder:)(void *a1)
{
  objc_class *v1;
  id v3;

  v3 = objc_msgSend(objc_allocWithZone(v1), "initWithCoder:", a1);

  return v3;
}

id SecurityAccessoryConfigurationIntent.init(coder:)(void *a1)
{
  void *v1;
  id v3;
  objc_super v5;

  v5.receiver = v1;
  v5.super_class = (Class)type metadata accessor for SecurityAccessoryConfigurationIntent();
  v3 = objc_msgSendSuper2(&v5, "initWithCoder:", a1);

  return v3;
}

id SecurityAccessoryConfigurationIntent.__allocating_init(identifier:backingStore:)(uint64_t a1, uint64_t a2, void *a3)
{
  objc_class *v3;
  objc_class *v4;
  NSString v7;
  id v8;

  v4 = v3;
  if (a2)
  {
    v7 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(a2);
  }
  else
  {
    v7 = 0;
  }
  v8 = objc_msgSend(objc_allocWithZone(v4), "initWithIdentifier:backingStore:", v7, a3);

  return v8;
}

id SecurityAccessoryConfigurationIntent.init(identifier:backingStore:)(uint64_t a1, uint64_t a2, void *a3)
{
  void *v3;
  NSString v6;
  id v7;
  objc_super v9;

  if (a2)
  {
    v6 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(a2);
  }
  else
  {
    v6 = 0;
  }
  v9.receiver = v3;
  v9.super_class = (Class)type metadata accessor for SecurityAccessoryConfigurationIntent();
  v7 = objc_msgSendSuper2(&v9, "initWithIdentifier:backingStore:", v6, a3);

  return v7;
}

id SecurityAccessoryConfigurationIntent.__allocating_init(domain:verb:parametersByName:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  objc_class *v5;
  NSString v9;
  NSString v10;
  NSDictionary v11;
  id v12;

  v9 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a2);
  v10 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a4);
  if (a5)
  {
    v11.super.isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(a5);
  }
  else
  {
    v11.super.isa = 0;
  }
  v12 = objc_msgSend(objc_allocWithZone(v5), "initWithDomain:verb:parametersByName:", v9, v10, v11.super.isa);

  return v12;
}

id SecurityAccessoryConfigurationIntent.init(domain:verb:parametersByName:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  void *v5;
  NSString v9;
  NSString v10;
  NSDictionary v11;
  id v12;
  objc_super v14;

  v9 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a2);
  v10 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a4);
  if (a5)
  {
    v11.super.isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(a5);
  }
  else
  {
    v11.super.isa = 0;
  }
  v14.receiver = v5;
  v14.super_class = (Class)type metadata accessor for SecurityAccessoryConfigurationIntent();
  v12 = objc_msgSendSuper2(&v14, "initWithDomain:verb:parametersByName:", v9, v10, v11.super.isa);

  return v12;
}

id SecurityAccessoryConfigurationIntent.__deallocating_deinit()
{
  return sub_10005CD78(type metadata accessor for SecurityAccessoryConfigurationIntent);
}

unint64_t SecurityAccessoryConfigurationIntentResponseCode.init(rawValue:)(unint64_t a1)
{
  return sub_10005CDA8(a1);
}

unint64_t sub_10005C758@<X0>(unint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t result;
  char v4;

  result = sub_10005CDA8(*a1);
  *(_QWORD *)a2 = result;
  *(_BYTE *)(a2 + 8) = v4 & 1;
  return result;
}

uint64_t SecurityAccessoryConfigurationIntentResponse.code.getter()
{
  uint64_t v0;
  uint64_t v1;
  _BYTE v3[24];

  v1 = v0 + OBJC_IVAR___SecurityAccessoryConfigurationIntentResponse_code;
  swift_beginAccess(v0 + OBJC_IVAR___SecurityAccessoryConfigurationIntentResponse_code, v3, 0, 0);
  return *(_QWORD *)v1;
}

char *SecurityAccessoryConfigurationIntentResponse.__allocating_init(code:userActivity:)(uint64_t a1, void *a2)
{
  objc_class *v2;
  char *v5;
  char *v6;
  char *v7;
  char v9[24];

  v5 = (char *)objc_msgSend(objc_allocWithZone(v2), "init");
  v6 = &v5[OBJC_IVAR___SecurityAccessoryConfigurationIntentResponse_code];
  swift_beginAccess(&v5[OBJC_IVAR___SecurityAccessoryConfigurationIntentResponse_code], v9, 1, 0);
  *(_QWORD *)v6 = a1;
  v7 = v5;
  objc_msgSend(v7, "setUserActivity:", a2);

  return v7;
}

char *SecurityAccessoryConfigurationIntentResponse.init(code:userActivity:)(uint64_t a1, void *a2)
{
  void *v2;
  char *v5;
  char *v6;
  char *v7;
  char v9[24];

  v5 = (char *)objc_msgSend(v2, "init");
  v6 = &v5[OBJC_IVAR___SecurityAccessoryConfigurationIntentResponse_code];
  swift_beginAccess(&v5[OBJC_IVAR___SecurityAccessoryConfigurationIntentResponse_code], v9, 1, 0);
  *(_QWORD *)v6 = a1;
  v7 = v5;
  objc_msgSend(v7, "setUserActivity:", a2);

  return v7;
}

id SecurityAccessoryConfigurationIntentResponse.init()()
{
  char *v0;
  objc_super v2;

  *(_QWORD *)&v0[OBJC_IVAR___SecurityAccessoryConfigurationIntentResponse_code] = 0;
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for SecurityAccessoryConfigurationIntentResponse();
  return objc_msgSendSuper2(&v2, "init");
}

id SecurityAccessoryConfigurationIntentResponse.init(coder:)(void *a1)
{
  char *v1;
  id v3;
  objc_super v5;

  *(_QWORD *)&v1[OBJC_IVAR___SecurityAccessoryConfigurationIntentResponse_code] = 0;
  v5.receiver = v1;
  v5.super_class = (Class)type metadata accessor for SecurityAccessoryConfigurationIntentResponse();
  v3 = objc_msgSendSuper2(&v5, "initWithCoder:", a1);

  return v3;
}

id SecurityAccessoryConfigurationIntentResponse.__allocating_init(backingStore:)(void *a1)
{
  objc_class *v1;
  id v3;

  v3 = objc_msgSend(objc_allocWithZone(v1), "initWithBackingStore:", a1);

  return v3;
}

id SecurityAccessoryConfigurationIntentResponse.init(backingStore:)(void *a1)
{
  char *v1;
  id v3;
  objc_super v5;

  *(_QWORD *)&v1[OBJC_IVAR___SecurityAccessoryConfigurationIntentResponse_code] = 0;
  v5.receiver = v1;
  v5.super_class = (Class)type metadata accessor for SecurityAccessoryConfigurationIntentResponse();
  v3 = objc_msgSendSuper2(&v5, "initWithBackingStore:", a1);

  return v3;
}

id sub_10005CB9C(char *a1, uint64_t a2, uint64_t a3, SEL *a4)
{
  objc_super v7;

  *(_QWORD *)&a1[OBJC_IVAR___SecurityAccessoryConfigurationIntentResponse_code] = 0;
  v7.receiver = a1;
  v7.super_class = (Class)type metadata accessor for SecurityAccessoryConfigurationIntentResponse();
  return objc_msgSendSuper2(&v7, *a4, a3);
}

id SecurityAccessoryConfigurationIntentResponse.__allocating_init(propertiesByName:)(uint64_t a1)
{
  objc_class *v1;
  NSDictionary v3;
  id v4;

  if (a1)
  {
    v3.super.isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(a1);
  }
  else
  {
    v3.super.isa = 0;
  }
  v4 = objc_msgSend(objc_allocWithZone(v1), "initWithPropertiesByName:", v3.super.isa);

  return v4;
}

id SecurityAccessoryConfigurationIntentResponse.init(propertiesByName:)(uint64_t a1)
{
  char *v1;
  NSDictionary v3;
  id v4;
  objc_super v6;

  *(_QWORD *)&v1[OBJC_IVAR___SecurityAccessoryConfigurationIntentResponse_code] = 0;
  if (a1)
  {
    v3.super.isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(a1);
  }
  else
  {
    v3.super.isa = 0;
  }
  v6.receiver = v1;
  v6.super_class = (Class)type metadata accessor for SecurityAccessoryConfigurationIntentResponse();
  v4 = objc_msgSendSuper2(&v6, "initWithPropertiesByName:", v3.super.isa);

  if (v4)
  return v4;
}

id SecurityAccessoryConfigurationIntentResponse.__deallocating_deinit()
{
  return sub_10005CD78(type metadata accessor for SecurityAccessoryConfigurationIntentResponse);
}

id sub_10005CD78(uint64_t (*a1)(void))
{
  void *v1;
  objc_super v3;

  v3.receiver = v1;
  v3.super_class = (Class)a1();
  return objc_msgSendSuper2(&v3, "dealloc");
}

unint64_t sub_10005CDA8(unint64_t result)
{
  if (result > 6)
    return 0;
  return result;
}

uint64_t type metadata accessor for SecurityAccessoryConfigurationIntentResponse()
{
  return objc_opt_self(SecurityAccessoryConfigurationIntentResponse);
}

unint64_t sub_10005CDDC()
{
  unint64_t result;

  result = qword_100083578;
  if (!qword_100083578)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for SecurityAccessoryConfigurationIntentResponseCode, &type metadata for SecurityAccessoryConfigurationIntentResponseCode);
    atomic_store(result, (unint64_t *)&qword_100083578);
  }
  return result;
}

uint64_t sub_10005CE20@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v3;
  uint64_t result;
  _BYTE v5[24];

  v3 = (_QWORD *)(*a1 + OBJC_IVAR___SecurityAccessoryConfigurationIntentResponse_code);
  result = swift_beginAccess(v3, v5, 0, 0);
  *a2 = *v3;
  return result;
}

uint64_t sub_10005CE70(uint64_t *a1, _QWORD *a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t result;
  _BYTE v5[24];

  v2 = *a1;
  v3 = (_QWORD *)(*a2 + OBJC_IVAR___SecurityAccessoryConfigurationIntentResponse_code);
  result = swift_beginAccess(v3, v5, 1, 0);
  *v3 = v2;
  return result;
}

ValueMetadata *type metadata accessor for SecurityAccessoryConfigurationIntentResponseCode()
{
  return &type metadata for SecurityAccessoryConfigurationIntentResponseCode;
}

id ClimateSensorTypeConfigurationIntent.init()()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for ClimateSensorTypeConfigurationIntent();
  return objc_msgSendSuper2(&v2, "init");
}

uint64_t type metadata accessor for ClimateSensorTypeConfigurationIntent()
{
  return objc_opt_self(ClimateSensorTypeConfigurationIntent);
}

id ClimateSensorTypeConfigurationIntent.init(coder:)(void *a1)
{
  void *v1;
  id v3;
  objc_super v5;

  v5.receiver = v1;
  v5.super_class = (Class)type metadata accessor for ClimateSensorTypeConfigurationIntent();
  v3 = objc_msgSendSuper2(&v5, "initWithCoder:", a1);

  return v3;
}

id ClimateSensorTypeConfigurationIntent.init(identifier:backingStore:)(uint64_t a1, uint64_t a2, void *a3)
{
  void *v3;
  NSString v6;
  id v7;
  objc_super v9;

  if (a2)
  {
    v6 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(a2);
  }
  else
  {
    v6 = 0;
  }
  v9.receiver = v3;
  v9.super_class = (Class)type metadata accessor for ClimateSensorTypeConfigurationIntent();
  v7 = objc_msgSendSuper2(&v9, "initWithIdentifier:backingStore:", v6, a3);

  return v7;
}

id ClimateSensorTypeConfigurationIntent.init(domain:verb:parametersByName:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  void *v5;
  NSString v9;
  NSString v10;
  NSDictionary v11;
  id v12;
  objc_super v14;

  v9 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a2);
  v10 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a4);
  if (a5)
  {
    v11.super.isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(a5);
  }
  else
  {
    v11.super.isa = 0;
  }
  v14.receiver = v5;
  v14.super_class = (Class)type metadata accessor for ClimateSensorTypeConfigurationIntent();
  v12 = objc_msgSendSuper2(&v14, "initWithDomain:verb:parametersByName:", v9, v10, v11.super.isa);

  return v12;
}

id ClimateSensorTypeConfigurationIntent.__deallocating_deinit()
{
  return sub_10005CD78(type metadata accessor for ClimateSensorTypeConfigurationIntent);
}

uint64_t ClimateSensorTypeConfigurationIntentResponse.code.getter()
{
  uint64_t v0;
  uint64_t v1;
  _BYTE v3[24];

  v1 = v0 + OBJC_IVAR___ClimateSensorTypeConfigurationIntentResponse_code;
  swift_beginAccess(v0 + OBJC_IVAR___ClimateSensorTypeConfigurationIntentResponse_code, v3, 0, 0);
  return *(_QWORD *)v1;
}

char *ClimateSensorTypeConfigurationIntentResponse.__allocating_init(code:userActivity:)(uint64_t a1, void *a2)
{
  objc_class *v2;
  char *v5;
  char *v6;
  char *v7;
  char v9[24];

  v5 = (char *)objc_msgSend(objc_allocWithZone(v2), "init");
  v6 = &v5[OBJC_IVAR___ClimateSensorTypeConfigurationIntentResponse_code];
  swift_beginAccess(&v5[OBJC_IVAR___ClimateSensorTypeConfigurationIntentResponse_code], v9, 1, 0);
  *(_QWORD *)v6 = a1;
  v7 = v5;
  objc_msgSend(v7, "setUserActivity:", a2);

  return v7;
}

char *ClimateSensorTypeConfigurationIntentResponse.init(code:userActivity:)(uint64_t a1, void *a2)
{
  void *v2;
  char *v5;
  char *v6;
  char *v7;
  char v9[24];

  v5 = (char *)objc_msgSend(v2, "init");
  v6 = &v5[OBJC_IVAR___ClimateSensorTypeConfigurationIntentResponse_code];
  swift_beginAccess(&v5[OBJC_IVAR___ClimateSensorTypeConfigurationIntentResponse_code], v9, 1, 0);
  *(_QWORD *)v6 = a1;
  v7 = v5;
  objc_msgSend(v7, "setUserActivity:", a2);

  return v7;
}

id ClimateSensorTypeConfigurationIntentResponse.init()()
{
  char *v0;
  objc_super v2;

  *(_QWORD *)&v0[OBJC_IVAR___ClimateSensorTypeConfigurationIntentResponse_code] = 0;
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for ClimateSensorTypeConfigurationIntentResponse();
  return objc_msgSendSuper2(&v2, "init");
}

id ClimateSensorTypeConfigurationIntentResponse.init(coder:)(void *a1)
{
  char *v1;
  id v3;
  objc_super v5;

  *(_QWORD *)&v1[OBJC_IVAR___ClimateSensorTypeConfigurationIntentResponse_code] = 0;
  v5.receiver = v1;
  v5.super_class = (Class)type metadata accessor for ClimateSensorTypeConfigurationIntentResponse();
  v3 = objc_msgSendSuper2(&v5, "initWithCoder:", a1);

  return v3;
}

id ClimateSensorTypeConfigurationIntentResponse.init(backingStore:)(void *a1)
{
  char *v1;
  id v3;
  objc_super v5;

  *(_QWORD *)&v1[OBJC_IVAR___ClimateSensorTypeConfigurationIntentResponse_code] = 0;
  v5.receiver = v1;
  v5.super_class = (Class)type metadata accessor for ClimateSensorTypeConfigurationIntentResponse();
  v3 = objc_msgSendSuper2(&v5, "initWithBackingStore:", a1);

  return v3;
}

id sub_10005D6F0(char *a1, uint64_t a2, uint64_t a3, SEL *a4)
{
  objc_super v7;

  *(_QWORD *)&a1[OBJC_IVAR___ClimateSensorTypeConfigurationIntentResponse_code] = 0;
  v7.receiver = a1;
  v7.super_class = (Class)type metadata accessor for ClimateSensorTypeConfigurationIntentResponse();
  return objc_msgSendSuper2(&v7, *a4, a3);
}

id ClimateSensorTypeConfigurationIntentResponse.init(propertiesByName:)(uint64_t a1)
{
  char *v1;
  NSDictionary v3;
  id v4;
  objc_super v6;

  *(_QWORD *)&v1[OBJC_IVAR___ClimateSensorTypeConfigurationIntentResponse_code] = 0;
  if (a1)
  {
    v3.super.isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(a1);
  }
  else
  {
    v3.super.isa = 0;
  }
  v6.receiver = v1;
  v6.super_class = (Class)type metadata accessor for ClimateSensorTypeConfigurationIntentResponse();
  v4 = objc_msgSendSuper2(&v6, "initWithPropertiesByName:", v3.super.isa);

  if (v4)
  return v4;
}

id ClimateSensorTypeConfigurationIntentResponse.__deallocating_deinit()
{
  return sub_10005CD78(type metadata accessor for ClimateSensorTypeConfigurationIntentResponse);
}

uint64_t type metadata accessor for ClimateSensorTypeConfigurationIntentResponse()
{
  return objc_opt_self(ClimateSensorTypeConfigurationIntentResponse);
}

unint64_t sub_10005D870()
{
  unint64_t result;

  result = qword_1000835D8;
  if (!qword_1000835D8)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for ClimateSensorTypeConfigurationIntentResponseCode, &type metadata for ClimateSensorTypeConfigurationIntentResponseCode);
    atomic_store(result, (unint64_t *)&qword_1000835D8);
  }
  return result;
}

uint64_t sub_10005D8B4@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v3;
  uint64_t result;
  _BYTE v5[24];

  v3 = (_QWORD *)(*a1 + OBJC_IVAR___ClimateSensorTypeConfigurationIntentResponse_code);
  result = swift_beginAccess(v3, v5, 0, 0);
  *a2 = *v3;
  return result;
}

uint64_t sub_10005D904(uint64_t *a1, _QWORD *a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t result;
  _BYTE v5[24];

  v2 = *a1;
  v3 = (_QWORD *)(*a2 + OBJC_IVAR___ClimateSensorTypeConfigurationIntentResponse_code);
  result = swift_beginAccess(v3, v5, 1, 0);
  *v3 = v2;
  return result;
}

ValueMetadata *type metadata accessor for ClimateSensorTypeConfigurationIntentResponseCode()
{
  return &type metadata for ClimateSensorTypeConfigurationIntentResponseCode;
}

id SecurityIntentAccessory.__allocating_init(identifier:display:pronunciationHint:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  objc_class *v6;
  NSString v10;
  NSString v11;
  NSString v12;
  id v13;

  if (a2)
  {
    v10 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(a2);
  }
  else
  {
    v10 = 0;
  }
  v11 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a4);
  if (a6)
  {
    v12 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(a6);
  }
  else
  {
    v12 = 0;
  }
  v13 = objc_msgSend(objc_allocWithZone(v6), "initWithIdentifier:displayString:pronunciationHint:", v10, v11, v12);

  return v13;
}

id SecurityIntentAccessory.init(identifier:display:pronunciationHint:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  void *v6;
  NSString v10;
  NSString v11;
  NSString v12;
  id v13;
  objc_super v15;

  if (a2)
  {
    v10 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(a2);
  }
  else
  {
    v10 = 0;
  }
  v11 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a4);
  if (a6)
  {
    v12 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(a6);
  }
  else
  {
    v12 = 0;
  }
  v15.receiver = v6;
  v15.super_class = (Class)type metadata accessor for SecurityIntentAccessory();
  v13 = objc_msgSendSuper2(&v15, "initWithIdentifier:displayString:pronunciationHint:", v10, v11, v12);

  return v13;
}

uint64_t type metadata accessor for SecurityIntentAccessory()
{
  return objc_opt_self(SecurityIntentAccessory);
}

id SecurityIntentAccessory.init(coder:)(void *a1)
{
  void *v1;
  id v3;
  objc_super v5;

  v5.receiver = v1;
  v5.super_class = (Class)type metadata accessor for SecurityIntentAccessory();
  v3 = objc_msgSendSuper2(&v5, "initWithCoder:", a1);

  return v3;
}

id SecurityIntentAccessory.__deallocating_deinit()
{
  return sub_10005CD78(type metadata accessor for SecurityIntentAccessory);
}

id static SecurityIntentAccessoryResolutionResult.success(with:)(uint64_t a1)
{
  uint64_t v1;
  objc_super v4;

  v4.receiver = (id)swift_getObjCClassFromMetadata(v1);
  v4.super_class = (Class)&OBJC_METACLASS___SecurityIntentAccessoryResolutionResult;
  return objc_msgSendSuper2(&v4, "successWithResolvedObject:", a1);
}

id static SecurityIntentAccessoryResolutionResult.disambiguation(with:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *ObjCClassFromMetadata;
  Class isa;
  id v7;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  objc_super v12;

  v2 = v1;
  v3 = a1;
  if ((unint64_t)a1 >> 62)
  {
    if (a1 < 0)
      v9 = a1;
    else
      v9 = a1 & 0xFFFFFFFFFFFFFF8;
    v10 = sub_10005DDE8();
    swift_bridgeObjectRetain(v3);
    v11 = _bridgeCocoaArray<A>(_:)(v9, v10);
    swift_bridgeObjectRelease(v3);
    v3 = v11;
  }
  else
  {
    v4 = swift_bridgeObjectRetain(a1);
    dispatch thunk of __ContiguousArrayStorageBase.staticElementType.getter(v4);
    sub_10005DDE8();
  }
  ObjCClassFromMetadata = (void *)swift_getObjCClassFromMetadata(v2);
  sub_10005DDE8();
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v3);
  v12.receiver = ObjCClassFromMetadata;
  v12.super_class = (Class)&OBJC_METACLASS___SecurityIntentAccessoryResolutionResult;
  v7 = objc_msgSendSuper2(&v12, "disambiguationWithObjectsToDisambiguate:", isa);

  return v7;
}

unint64_t sub_10005DDE8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100083658;
  if (!qword_100083658)
  {
    v1 = objc_opt_self(INObject);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_100083658);
  }
  return result;
}

id static SecurityIntentAccessoryResolutionResult.confirmationRequired(with:)(uint64_t a1)
{
  uint64_t v1;
  objc_super v4;

  v4.receiver = (id)swift_getObjCClassFromMetadata(v1);
  v4.super_class = (Class)&OBJC_METACLASS___SecurityIntentAccessoryResolutionResult;
  return objc_msgSendSuper2(&v4, "confirmationRequiredWithObjectToConfirm:", a1);
}

void static SecurityIntentAccessoryResolutionResult.success(with:)()
{
  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0, 0xE000000000000000, "HomeWidgetLockScreen/SecurityIntentAccessory.swift", 50, 2, 47, 0);
  __break(1u);
}

void static SecurityIntentAccessoryResolutionResult.disambiguation(with:)()
{
  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0, 0xE000000000000000, "HomeWidgetLockScreen/SecurityIntentAccessory.swift", 50, 2, 52, 0);
  __break(1u);
}

void static SecurityIntentAccessoryResolutionResult.confirmationRequired(with:)()
{
  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0, 0xE000000000000000, "HomeWidgetLockScreen/SecurityIntentAccessory.swift", 50, 2, 57, 0);
  __break(1u);
}

id SecurityIntentAccessoryResolutionResult.__allocating_init(JSONDictionary:intent:)(uint64_t a1, void *a2)
{
  objc_class *v2;
  id v5;
  Class isa;
  id v7;

  v5 = objc_allocWithZone(v2);
  isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(a1);
  v7 = objc_msgSend(v5, "initWithJSONDictionary:forIntent:", isa, a2);

  return v7;
}

id SecurityIntentAccessoryResolutionResult.init(JSONDictionary:intent:)(uint64_t a1, void *a2)
{
  void *v2;
  Class isa;
  id v6;
  id v7;
  objc_super v9;

  isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(a1);
  v9.receiver = v2;
  v9.super_class = (Class)type metadata accessor for SecurityIntentAccessoryResolutionResult();
  v6 = objc_msgSendSuper2(&v9, "initWithJSONDictionary:forIntent:", isa, a2);

  v7 = v6;
  if (v7)

  return v7;
}

uint64_t type metadata accessor for SecurityIntentAccessoryResolutionResult()
{
  return objc_opt_self(SecurityIntentAccessoryResolutionResult);
}

id SecurityIntentAccessoryResolutionResult.__deallocating_deinit()
{
  return sub_10005CD78(type metadata accessor for SecurityIntentAccessoryResolutionResult);
}

id ClimateSensorIntentType.init(identifier:display:pronunciationHint:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  void *v6;
  NSString v10;
  NSString v11;
  NSString v12;
  id v13;
  objc_super v15;

  if (a2)
  {
    v10 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(a2);
  }
  else
  {
    v10 = 0;
  }
  v11 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a4);
  if (a6)
  {
    v12 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(a6);
  }
  else
  {
    v12 = 0;
  }
  v15.receiver = v6;
  v15.super_class = (Class)type metadata accessor for ClimateSensorIntentType();
  v13 = objc_msgSendSuper2(&v15, "initWithIdentifier:displayString:pronunciationHint:", v10, v11, v12);

  return v13;
}

uint64_t type metadata accessor for ClimateSensorIntentType()
{
  return objc_opt_self(ClimateSensorIntentType);
}

id ClimateSensorIntentType.init(coder:)(void *a1)
{
  void *v1;
  id v3;
  objc_super v5;

  v5.receiver = v1;
  v5.super_class = (Class)type metadata accessor for ClimateSensorIntentType();
  v3 = objc_msgSendSuper2(&v5, "initWithCoder:", a1);

  return v3;
}

id ClimateSensorIntentType.__deallocating_deinit()
{
  return sub_10005CD78(type metadata accessor for ClimateSensorIntentType);
}

id static ClimateSensorIntentTypeResolutionResult.success(with:)(uint64_t a1)
{
  uint64_t v1;
  objc_super v4;

  v4.receiver = (id)swift_getObjCClassFromMetadata(v1);
  v4.super_class = (Class)&OBJC_METACLASS___ClimateSensorIntentTypeResolutionResult;
  return objc_msgSendSuper2(&v4, "successWithResolvedObject:", a1);
}

id static ClimateSensorIntentTypeResolutionResult.disambiguation(with:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *ObjCClassFromMetadata;
  Class isa;
  id v7;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  objc_super v12;

  v2 = v1;
  v3 = a1;
  if ((unint64_t)a1 >> 62)
  {
    if (a1 < 0)
      v9 = a1;
    else
      v9 = a1 & 0xFFFFFFFFFFFFFF8;
    v10 = sub_10005DDE8();
    swift_bridgeObjectRetain(v3);
    v11 = _bridgeCocoaArray<A>(_:)(v9, v10);
    swift_bridgeObjectRelease(v3);
    v3 = v11;
  }
  else
  {
    v4 = swift_bridgeObjectRetain(a1);
    dispatch thunk of __ContiguousArrayStorageBase.staticElementType.getter(v4);
    sub_10005DDE8();
  }
  ObjCClassFromMetadata = (void *)swift_getObjCClassFromMetadata(v2);
  sub_10005DDE8();
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v3);
  v12.receiver = ObjCClassFromMetadata;
  v12.super_class = (Class)&OBJC_METACLASS___ClimateSensorIntentTypeResolutionResult;
  v7 = objc_msgSendSuper2(&v12, "disambiguationWithObjectsToDisambiguate:", isa);

  return v7;
}

id static ClimateSensorIntentTypeResolutionResult.confirmationRequired(with:)(uint64_t a1)
{
  uint64_t v1;
  objc_super v4;

  v4.receiver = (id)swift_getObjCClassFromMetadata(v1);
  v4.super_class = (Class)&OBJC_METACLASS___ClimateSensorIntentTypeResolutionResult;
  return objc_msgSendSuper2(&v4, "confirmationRequiredWithObjectToConfirm:", a1);
}

void static ClimateSensorIntentTypeResolutionResult.success(with:)()
{
  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0, 0xE000000000000000, "HomeWidgetLockScreen/ClimateSensorIntentType.swift", 50, 2, 47, 0);
  __break(1u);
}

void static ClimateSensorIntentTypeResolutionResult.disambiguation(with:)()
{
  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0, 0xE000000000000000, "HomeWidgetLockScreen/ClimateSensorIntentType.swift", 50, 2, 52, 0);
  __break(1u);
}

void static ClimateSensorIntentTypeResolutionResult.confirmationRequired(with:)()
{
  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0, 0xE000000000000000, "HomeWidgetLockScreen/ClimateSensorIntentType.swift", 50, 2, 57, 0);
  __break(1u);
}

id ClimateSensorIntentTypeResolutionResult.init(JSONDictionary:intent:)(uint64_t a1, void *a2)
{
  void *v2;
  Class isa;
  id v6;
  id v7;
  objc_super v9;

  isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(a1);
  v9.receiver = v2;
  v9.super_class = (Class)type metadata accessor for ClimateSensorIntentTypeResolutionResult();
  v6 = objc_msgSendSuper2(&v9, "initWithJSONDictionary:forIntent:", isa, a2);

  v7 = v6;
  if (v7)

  return v7;
}

uint64_t type metadata accessor for ClimateSensorIntentTypeResolutionResult()
{
  return objc_opt_self(ClimateSensorIntentTypeResolutionResult);
}

id ClimateSensorIntentTypeResolutionResult.__deallocating_deinit()
{
  return sub_10005CD78(type metadata accessor for ClimateSensorIntentTypeResolutionResult);
}

uint64_t type metadata accessor for ResourceBundleClass()
{
  return objc_opt_self(_TtC20HomeWidgetLockScreenP33_31FFD1D478FDA27ED8DECD155C9E3E4E19ResourceBundleClass);
}

uint64_t sub_10005EB00()
{
  return sub_10005EC98(1);
}

uint64_t sub_10005EB08(int a1, int a2, int a3, int a4)
{
  BOOL v9;
  _DWORD v10[2];

  if (qword_10008A558 == -1)
  {
    if (qword_10008A560)
    {
LABEL_3:
      v10[0] = a1;
      v10[1] = (a2 << 16) | (a3 << 8) | a4;
      return _availability_version_check(1, v10);
    }
  }
  else
  {
    dispatch_once_f(&qword_10008A558, 0, (dispatch_function_t)sub_10005EC90);
    if (qword_10008A560)
      goto LABEL_3;
  }
  if (qword_10008A550 == -1)
  {
    v9 = dword_10008A540 < a2;
    if (dword_10008A540 > a2)
      return 1;
  }
  else
  {
    dispatch_once_f(&qword_10008A550, 0, (dispatch_function_t)sub_10005EB00);
    v9 = dword_10008A540 < a2;
    if (dword_10008A540 > a2)
      return 1;
  }
  if (v9)
    return 0;
  if (dword_10008A544 > a3)
    return 1;
  return dword_10008A544 >= a3 && dword_10008A548 >= a4;
}

uint64_t sub_10005EC90()
{
  return sub_10005EC98(0);
}

uint64_t sub_10005EC98(uint64_t result)
{
  void *v1;
  BOOL v2;
  unsigned __int8 *v4;
  uint64_t (*v5)(_QWORD);
  unint64_t v6;
  uint64_t (*v7)(_QWORD, uint64_t, _QWORD, _QWORD);
  uint64_t (*v8)(_QWORD, const char *, uint64_t, unsigned __int8 *);
  uint64_t (*v9)(uint64_t, uint64_t);
  uint64_t (*v10)(uint64_t);
  uint64_t (*v11)(void);
  FILE *v12;
  FILE *v13;
  uint64_t v14;
  size_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  FILE *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  FILE *v27;
  unsigned int (*v28)(uint64_t, char *, uint64_t, uint64_t);
  char v29[32];

  v1 = (void *)qword_10008A560;
  if (qword_10008A560)
    v2 = (_DWORD)result == 0;
  else
    v2 = 0;
  if (!v2)
  {
    if (&__availability_version_check)
    {
      qword_10008A560 = (uint64_t)&__availability_version_check;
      v1 = &__availability_version_check;
    }
    if (!v1 || (_DWORD)result != 0)
    {
      result = (uint64_t)dlsym((void *)0xFFFFFFFFFFFFFFFELL, "kCFAllocatorNull");
      if (result)
      {
        v4 = *(unsigned __int8 **)result;
        result = (uint64_t)dlsym((void *)0xFFFFFFFFFFFFFFFELL, "CFDataCreateWithBytesNoCopy");
        if (result)
        {
          v5 = (uint64_t (*)(_QWORD))result;
          v6 = (unint64_t)dlsym((void *)0xFFFFFFFFFFFFFFFELL, "CFPropertyListCreateWithData");
          result = (uint64_t)dlsym((void *)0xFFFFFFFFFFFFFFFELL, "CFPropertyListCreateFromXMLData");
          if (v6 | result)
          {
            v7 = (uint64_t (*)(_QWORD, uint64_t, _QWORD, _QWORD))result;
            result = (uint64_t)dlsym((void *)0xFFFFFFFFFFFFFFFELL, "CFStringCreateWithCStringNoCopy");
            if (result)
            {
              v8 = (uint64_t (*)(_QWORD, const char *, uint64_t, unsigned __int8 *))result;
              result = (uint64_t)dlsym((void *)0xFFFFFFFFFFFFFFFELL, "CFDictionaryGetValue");
              if (result)
              {
                v9 = (uint64_t (*)(uint64_t, uint64_t))result;
                result = (uint64_t)dlsym((void *)0xFFFFFFFFFFFFFFFELL, "CFGetTypeID");
                if (result)
                {
                  v10 = (uint64_t (*)(uint64_t))result;
                  result = (uint64_t)dlsym((void *)0xFFFFFFFFFFFFFFFELL, "CFStringGetTypeID");
                  if (result)
                  {
                    v11 = (uint64_t (*)(void))result;
                    result = (uint64_t)dlsym((void *)0xFFFFFFFFFFFFFFFELL, "CFStringGetCString");
                    v28 = (unsigned int (*)(uint64_t, char *, uint64_t, uint64_t))result;
                    if (result)
                    {
                      result = (uint64_t)dlsym((void *)0xFFFFFFFFFFFFFFFELL, "CFRelease");
                      if (result)
                      {
                        v12 = (FILE *)result;
                        result = (uint64_t)fopen("/System/Library/CoreServices/SystemVersion.plist", "r");
                        if (result)
                        {
                          v13 = (FILE *)result;
                          v27 = v12;
                          fseek((FILE *)result, 0, 2);
                          v14 = ftell(v13);
                          if (v14 < 0)
                          {
                            v16 = 0;
                          }
                          else
                          {
                            v15 = v14;
                            rewind(v13);
                            v16 = malloc(v15);
                            if (v16)
                            {
                              v26 = v16;
                              if (fread(v16, 1uLL, v15, v13) == v15)
                              {
                                v17 = v5(0);
                                if (v17)
                                {
                                  v18 = v17;
                                  v19 = v13;
                                  if (v6)
                                    v20 = ((uint64_t (*)(_QWORD, uint64_t, _QWORD, _QWORD, _QWORD))v6)(0, v17, 0, 0, 0);
                                  else
                                    v20 = v7(0, v17, 0, 0);
                                  v21 = v20;
                                  if (v20)
                                  {
                                    v22 = v8(0, "ProductVersion", 1536, v4);
                                    if (v22)
                                    {
                                      v23 = v22;
                                      v24 = v9(v21, v22);
                                      ((void (*)(uint64_t))v27)(v23);
                                      if (v24)
                                      {
                                        v25 = v10(v24);
                                        if (v25 == v11())
                                        {
                                          if (v28(v24, v29, 32, 134217984))
                                            sscanf(v29, "%d.%d.%d", &dword_10008A540, &dword_10008A544, &dword_10008A548);
                                        }
                                      }
                                    }
                                    ((void (*)(uint64_t))v27)(v21);
                                    v19 = v13;
                                  }
                                  ((void (*)(uint64_t))v27)(v18);
                                }
                                else
                                {
                                  v19 = v13;
                                }
                                v16 = v26;
                              }
                              else
                              {
                                v16 = v26;
                                v19 = v13;
                              }
                              goto LABEL_41;
                            }
                          }
                          v19 = v13;
LABEL_41:
                          free(v16);
                          return fclose(v19);
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  return result;
}
