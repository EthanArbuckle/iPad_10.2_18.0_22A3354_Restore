void sub_10000666C(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v5;
  void (*v6)(uint64_t, void *);
  id v7;

  v6 = *(void (**)(uint64_t, void *))(a1 + 32);
  v5 = *(_QWORD *)(a1 + 40);
  swift_retain(v5);
  v7 = a3;
  v6(a2, a3);
  swift_release(v5);

}

int main(int argc, const char **argv, const char **envp)
{
  objc_class *v5;
  NSString *v6;

  v5 = (objc_class *)type metadata accessor for AppDelegate();
  v6 = NSStringFromClass(v5);
  UIApplicationMain(argc, (char **)argv, 0, v6);

  return 0;
}

uint64_t sub_100006770()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t result;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  uint8_t *v14;
  uint64_t v15;

  sub_100026E84(0, &qword_1000EFBC0, (uint64_t (*)(uint64_t))&type metadata accessor for SummaryFeedTrendsSectionDataSource, sub_100086BCC, (uint64_t (*)(uint64_t, uint64_t, uint64_t))&type metadata accessor for HideableDataSource.Visibility);
  v1 = v0;
  v2 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin(v0);
  v4 = (char *)&v15 - v3;
  v5 = type metadata accessor for Logger(0);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = __chkstk_darwin(v5);
  v9 = (char *)&v15 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = HAFeatureFlagShowTrendsInSummary(v7);
  if ((result & 1) == 0)
  {
    v11 = static Logger.dataSource.getter();
    v12 = Logger.logObject.getter(v11);
    v13 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v12, v13))
    {
      v14 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v14 = 0;
      _os_log_impl((void *)&_mh_execute_header, v12, v13, "Show Trends in Summary feature flag is disabled. Hiding Trends.", v14, 2u);
      swift_slowDealloc(v14, -1, -1);
    }

    (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v5);
    (*(void (**)(char *, _QWORD, uint64_t))(v2 + 104))(v4, enum case for HideableDataSource.Visibility.hidden<A>(_:), v1);
    return dispatch thunk of HideableDataSource.visibility.setter(v4);
  }
  return result;
}

uint64_t sub_1000068F8(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _BYTE v4[32];
  _QWORD v5[3];

  v5[0] = (char *)&value witness table for Builtin.UnknownObject + 64;
  result = type metadata accessor for URL(319);
  if (v3 <= 0x3F)
  {
    swift_getTupleTypeLayout2(v4, *(_QWORD *)(result - 8) + 64, "\b");
    v5[1] = v4;
    v5[2] = &unk_1000B1900;
    swift_initEnumMetadataMultiPayload(a1, 256, 3, v5);
    return 0;
  }
  return result;
}

uint64_t sub_100006988(uint64_t a1)
{
  void (*v1)(uint64_t);
  uint64_t v2;
  uint64_t v3;

  v1 = *(void (**)(uint64_t))(a1 + 32);
  v2 = *(_QWORD *)(a1 + 40);
  v3 = swift_retain(v2);
  v1(v3);
  return swift_release(v2);
}

uint64_t sub_1000069B4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  _BYTE v5[24];

  v2 = a2 + 16;
  swift_beginAccess(a2 + 16, v5, 0, 0);
  result = swift_weakLoadStrong(v2);
  if (result)
  {
    v4 = result;
    sub_10000C9B8();
    return swift_release(v4);
  }
  return result;
}

uint64_t sub_100006A08(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t result;

  result = *a2;
  if (!*a2)
    return swift_getSingletonMetadata(a1, a3);
  return result;
}

void sub_100006A3C(void *a1, void (*a2)(void), uint64_t a3)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  os_log_type_t v16;
  uint8_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  id v24;
  id v25;
  void *v26;
  void *v27;
  void *v28;
  uint64_t v29;
  id v30;
  uint64_t v31;
  uint8_t *v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t aBlock[5];
  uint64_t v38;

  v4 = v3;
  v8 = *v3;
  v9 = type metadata accessor for Logger(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v31 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1000EC038 != -1)
    swift_once(&qword_1000EC038, sub_10000A4B4);
  v13 = sub_10000C3FC();
  if ((v13 & 1) != 0)
  {
    v35 = (uint64_t)a2;
    v14 = static Logger.general.getter(v13);
    v15 = Logger.logObject.getter(v14);
    v16 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v15, v16))
    {
      v17 = (uint8_t *)swift_slowAlloc(12, -1);
      v18 = swift_slowAlloc(32, -1);
      v33 = a1;
      v19 = v18;
      aBlock[0] = v18;
      v34 = a3;
      *(_DWORD *)v17 = 136446210;
      v32 = v17 + 4;
      v20 = _typeName(_:qualified:)(v8, 0);
      v22 = v21;
      v36 = sub_100012B20(v20, v21, aBlock);
      a3 = v34;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v36, aBlock, v32, v17 + 12);
      swift_bridgeObjectRelease(v22);
      _os_log_impl((void *)&_mh_execute_header, v15, v16, "[%{public}s]: Should check SOS Contacts intro flow step", v17, 0xCu);
      swift_arrayDestroy(v19, 1, (char *)&type metadata for Any + 8);
      v23 = v19;
      a1 = v33;
      swift_slowDealloc(v23, -1, -1);
      swift_slowDealloc(v17, -1, -1);
    }

    (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
    sub_10004ADB8();
    v24 = objc_msgSend(a1, "resolvedHealthToolbox");
    v25 = objc_msgSend(v24, "createContactConsolidationControllerInViewController:", a1);

    v26 = (void *)v4[2];
    v4[2] = v25;

    v27 = (void *)v4[2];
    if (v27)
    {
      aBlock[4] = v35;
      v38 = a3;
      aBlock[0] = (uint64_t)_NSConcreteStackBlock;
      aBlock[1] = 1107296256;
      aBlock[2] = (uint64_t)sub_100006988;
      aBlock[3] = (uint64_t)&unk_1000DEAE8;
      v28 = _Block_copy(aBlock);
      v29 = v38;
      v30 = v27;
      swift_retain(a3);
      swift_release(v29);
      objc_msgSend(v30, "presentContactConsolidationAlertWithCompletionHandler:", v28);
      _Block_release(v28);

    }
  }
  else
  {
    a2();
  }
}

uint64_t sub_100006D10(uint64_t a1, unint64_t *a2, _QWORD *a3)
{
  uint64_t result;
  uint64_t v5;

  result = *a2;
  if (!*a2)
  {
    v5 = objc_opt_self(*a3);
    result = swift_getObjCClassMetadata(v5);
    atomic_store(result, a2);
  }
  return result;
}

uint64_t type metadata accessor for SummaryFeedDataSourceProvider()
{
  return objc_opt_self(_TtC6HealthP33_6B02C3522AE0BB9375BE5831B99EF03A29SummaryFeedDataSourceProvider);
}

uint64_t type metadata accessor for AppDelegate()
{
  return objc_opt_self(_TtC6Health11AppDelegate);
}

uint64_t type metadata accessor for SummaryPinnedContentGradientColorProvider()
{
  return objc_opt_self(_TtC6Health41SummaryPinnedContentGradientColorProvider);
}

void sub_100006DA8(void *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint64_t v16;
  uint8_t *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint8_t *v22;
  void (*v23)(char *, uint64_t);
  void *v24;
  id v25;
  uint64_t v26;
  NSObject *v27;
  os_log_type_t v28;
  uint64_t v29;
  uint8_t *v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  void *v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  char *v38;
  uint64_t v39;
  id v40;
  uint64_t KeyPath;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  void *v45;
  uint64_t v46;
  id v47;
  uint64_t v48;
  _QWORD *v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t aBlock[5];
  uint64_t v55;

  v2 = v1;
  v4 = *v1;
  v5 = type metadata accessor for Logger(0);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = __chkstk_darwin(v5);
  v9 = (char *)&v48 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v11 = (char *)&v48 - v10;
  if (qword_1000EC030 != -1)
    swift_once(&qword_1000EC030, sub_10000A300);
  v12 = sub_10000C3FC();
  if ((v12 & 1) != 0)
  {
    v52 = v4;
    v13 = static Logger.general.getter(v12);
    v14 = Logger.logObject.getter(v13);
    v15 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v14, v15))
    {
      v16 = swift_slowAlloc(12, -1);
      v51 = v5;
      v17 = (uint8_t *)v16;
      v18 = swift_slowAlloc(32, -1);
      aBlock[0] = v18;
      v49 = v2;
      v50 = v9;
      *(_DWORD *)v17 = 136446210;
      v19 = _typeName(_:qualified:)(v52, 0);
      v21 = v20;
      v53 = sub_100012B20(v19, v20, aBlock);
      v2 = v49;
      v9 = v50;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v53, aBlock, v17 + 4, v17 + 12);
      swift_bridgeObjectRelease(v21);
      _os_log_impl((void *)&_mh_execute_header, v14, v15, "[%{public}s]: Should check IH&A intro flow step", v17, 0xCu);
      swift_arrayDestroy(v18, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v18, -1, -1);
      v22 = v17;
      v5 = v51;
      swift_slowDealloc(v22, -1, -1);
    }

    v23 = *(void (**)(char *, uint64_t))(v6 + 8);
    v23(v11, v5);
    sub_10004ADB8();
    v24 = (void *)objc_opt_self(HKFitnessDiagnosticsRequestViewController);
    v25 = objc_msgSend(v24, "needsRequestedPermission");
    if ((_DWORD)v25)
    {
      v26 = static Logger.general.getter(v25);
      v27 = Logger.logObject.getter(v26);
      v28 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v27, v28))
      {
        v49 = v24;
        v29 = swift_slowAlloc(12, -1);
        v50 = v9;
        v30 = (uint8_t *)v29;
        v31 = swift_slowAlloc(32, -1);
        aBlock[0] = v31;
        v51 = v5;
        *(_DWORD *)v30 = 136446210;
        v32 = _typeName(_:qualified:)(v52, 0);
        v33 = v2;
        v34 = a1;
        v36 = v35;
        v53 = sub_100012B20(v32, v35, aBlock);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v53, aBlock, v30 + 4, v30 + 12);
        v37 = v36;
        a1 = v34;
        v2 = v33;
        v24 = v49;
        swift_bridgeObjectRelease(v37);
        _os_log_impl((void *)&_mh_execute_header, v27, v28, "[%{public}s]: IH&A needs requested permission, presenting flow", v30, 0xCu);
        swift_arrayDestroy(v31, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v31, -1, -1);
        swift_slowDealloc(v30, -1, -1);

        v38 = v50;
        v39 = v51;
      }
      else
      {

        v38 = v9;
        v39 = v5;
      }
      v23(v38, v39);
      KeyPath = swift_getKeyPath(&unk_1000B2A68);
      v42 = swift_getKeyPath(&unk_1000B2A90);
      LOBYTE(aBlock[0]) = 1;
      swift_retain(v2);
      static Published.subscript.setter(aBlock, v2, KeyPath, v42);
      v43 = swift_allocObject(&unk_1000DE8C8, 24, 7);
      swift_weakInit(v43 + 16, v2);
      v44 = swift_allocObject(&unk_1000DEAA8, 32, 7);
      *(_QWORD *)(v44 + 16) = v43;
      *(_QWORD *)(v44 + 24) = a1;
      aBlock[4] = (uint64_t)sub_1000469CC;
      v55 = v44;
      aBlock[0] = (uint64_t)_NSConcreteStackBlock;
      aBlock[1] = 1107296256;
      aBlock[2] = (uint64_t)sub_100045254;
      aBlock[3] = (uint64_t)&unk_1000DEAC0;
      v45 = _Block_copy(aBlock);
      v46 = v55;
      v47 = a1;
      swift_release(v46);
      objc_msgSend(v24, "presentInViewController:completion:", v47, v45);
      _Block_release(v45);
    }
    else
    {
      v40 = objc_msgSend(objc_allocWithZone((Class)HKHealthStore), "init");
      sub_100045290(a1, v40);

    }
  }
  else
  {
    sub_10000877C();
  }
}

uint64_t sub_1000072C8(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v3;
  uint64_t v4;
  _BYTE v6[24];

  v3 = (uint64_t *)(v1 + qword_1000EEB30);
  swift_beginAccess(v3, v6, 1, 0);
  v4 = *v3;
  *v3 = a1;
  return swift_release(v4);
}

uint64_t sub_100007318(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[5];

  v4[0] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v4[1] = "(";
  v4[2] = &unk_1000B2430;
  result = type metadata accessor for Presentation(319);
  if (v3 <= 0x3F)
  {
    v4[3] = *(_QWORD *)(result - 8) + 64;
    v4[4] = "(";
    result = swift_updateClassMetadata2(a1, 256, 5, v4, a1 + 80);
    if (!result)
      return 0;
  }
  return result;
}

void sub_1000073A8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  _QWORD v5[3];

  v2 = qword_1000F0E30;
  v5[0] = &unk_1000B1AD8;
  v5[1] = &unk_1000B1AF0;
  sub_1000076D8(319, (unint64_t *)&qword_1000ECF98, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
  if (v4 <= 0x3F)
  {
    v5[2] = *(_QWORD *)(v3 - 8) + 64;
    swift_initClassMetadata2(a1, 0, 3, v5, a1 + v2);
  }
}

uint64_t sub_100007448(uint64_t a1)
{
  uint64_t v2;
  uint64_t result;
  unint64_t v4;
  uint64_t v5;

  v2 = class metadata base offset for DownloadingDataDataSource;
  result = type metadata accessor for EmptyStateCollectionViewCellItem(319);
  if (v4 <= 0x3F)
  {
    v5 = *(_QWORD *)(result - 8) + 64;
    result = swift_initClassMetadata2(a1, 0, 1, &v5, a1 + v2);
    if (!result)
      return 0;
  }
  return result;
}

void sub_1000074BC(uint64_t a1)
{
  id v1;
  id v2;

  v1 = objc_msgSend((id)objc_opt_self(HBXViewControllerFactory), "sharedInstanceForHealthStore:", a1);
  v2 = objc_msgSend((id)objc_opt_self(UIApplication), "sharedApplication");
  objc_msgSend(v1, "setApplicationProvider:", v2);

}

uint64_t sub_100007548(uint64_t a1)
{
  _QWORD *v1;
  unint64_t v2;
  _QWORD *v3;
  int64_t v4;
  int64_t v5;
  _QWORD *isUniquelyReferenced_nonNull_native;
  unint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  int64_t v15;
  uint64_t result;
  char v17;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = (_QWORD *)*v1;
  v4 = *(_QWORD *)(*v1 + 16);
  v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
    goto LABEL_21;
  }
  isUniquelyReferenced_nonNull_native = (_QWORD *)swift_isUniquelyReferenced_nonNull_native(*v1);
  if ((_DWORD)isUniquelyReferenced_nonNull_native && v5 <= v3[3] >> 1)
  {
    v8 = *(_QWORD *)(a1 + 16);
    if (v8)
      goto LABEL_5;
LABEL_18:
    if (!v2)
      goto LABEL_19;
    goto LABEL_21;
  }
  if (v4 <= v5)
    v15 = v4 + v2;
  else
    v15 = v4;
  v3 = sub_100008278(isUniquelyReferenced_nonNull_native, v15, 1, v3);
  v8 = *(_QWORD *)(a1 + 16);
  if (!v8)
    goto LABEL_18;
LABEL_5:
  v9 = v3[2];
  if ((v3[3] >> 1) - v9 < (uint64_t)v8)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v10 = &v3[2 * v9 + 4];
  if (a1 + 32 < (unint64_t)&v10[2 * v8] && (unint64_t)v10 < a1 + 32 + 16 * v8)
    goto LABEL_24;
  memcpy(v10, (const void *)(a1 + 32), 16 * v8);
  if (v8 < v2)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  v12 = v3[2];
  v13 = __OFADD__(v12, v8);
  v14 = v12 + v8;
  if (!v13)
  {
    v3[2] = v14;
LABEL_19:
    result = swift_bridgeObjectRelease(a1);
    *v1 = v3;
    return result;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  v17 = 2;
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, v17, 1092, 0);
  __break(1u);
  return result;
}

unint64_t sub_100007690()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000EC710;
  if (!qword_1000EC710)
  {
    v1 = type metadata accessor for CloudSyncRestoreState(255);
    result = swift_getWitnessTable(&protocol conformance descriptor for CloudSyncRestoreState, v1);
    atomic_store(result, (unint64_t *)&qword_1000EC710);
  }
  return result;
}

void sub_1000076D8(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;

  if (!*a2)
  {
    v7 = a3(255);
    v8 = a4(a1, v7);
    if (!v9)
      atomic_store(v8, a2);
  }
}

void sub_100007730(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t))
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;

  if (!*a2)
  {
    v6 = sub_10001314C(255, (unint64_t *)&qword_1000EEC70, (uint64_t)&protocol descriptor for SectionedDataSourceItem, 1);
    v7 = a3(a1, v6);
    if (!v8)
      atomic_store(v7, a2);
  }
}

uint64_t SummaryPinnedContentGradientColorProvider.relevantTraits.getter()
{
  uint64_t v0;
  uint64_t v1;

  sub_1000076D8(0, &qword_1000ED408, (uint64_t (*)(uint64_t))sub_1000149A0, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for _ContiguousArrayStorage);
  v1 = swift_allocObject(v0, 48, 7);
  *(_OWORD *)(v1 + 16) = xmmword_1000B11F0;
  *(_QWORD *)(v1 + 32) = type metadata accessor for UITraitUserInterfaceStyle(0);
  *(_QWORD *)(v1 + 40) = &protocol witness table for UITraitUserInterfaceStyle;
  return v1;
}

_QWORD *sub_100007808(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *result;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  id v22;
  uint64_t v23;
  id v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  id v32;
  int64_t v33;
  unint64_t v34;
  uint64_t v35;
  id v36;
  NSObject *v37;
  char *v38;
  os_log_type_t v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t MetatypeMetadata;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD v52[2];
  char *v53;
  uint64_t v54;
  int64_t v55;
  uint64_t v56;
  char *v57;
  char *v58;
  __int128 v59;
  uint64_t v60;
  uint64_t ObjectType;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  _QWORD v69[5];
  _QWORD v70[2];

  ObjectType = swift_getObjectType(v1);
  v3 = type metadata accessor for URL(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v65 = (char *)v52 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for Logger(0);
  v63 = *(_QWORD *)(v6 - 8);
  v64 = v6;
  __chkstk_darwin(v6);
  v8 = (char *)v52 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((a1 & 0xC000000000000001) != 0)
  {
    if (a1 < 0)
      v9 = a1;
    else
      v9 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v10 = __CocoaSet.makeIterator()(v9);
    v11 = sub_100006D10(0, &qword_1000EF0F0, UIOpenURLContext_ptr);
    v12 = sub_1000127B0(&qword_1000EF0F8, &qword_1000EF0F0, UIOpenURLContext_ptr);
    result = Set.Iterator.init(_cocoa:)(v69, v10, v11, v12);
    a1 = v69[0];
    v56 = v69[1];
    v15 = v69[2];
    v16 = v69[3];
    v17 = v69[4];
  }
  else
  {
    v18 = -1 << *(_BYTE *)(a1 + 32);
    v19 = *(_QWORD *)(a1 + 56);
    v56 = a1 + 56;
    v15 = ~v18;
    v20 = -v18;
    if (v20 < 64)
      v21 = ~(-1 << v20);
    else
      v21 = -1;
    v17 = v21 & v19;
    result = (_QWORD *)swift_bridgeObjectRetain(a1);
    v16 = 0;
  }
  v52[1] = v15;
  v54 = a1 & 0x7FFFFFFFFFFFFFFFLL;
  v55 = (unint64_t)(v15 + 64) >> 6;
  *(_QWORD *)&v14 = 136446466;
  v59 = v14;
  v58 = (char *)&type metadata for Any + 8;
  v53 = (char *)&type metadata for Swift.AnyObject + 8;
  v60 = v1;
  v57 = v8;
  while (a1 < 0)
  {
    v28 = __CocoaSet.Iterator.next()(result);
    if (!v28)
      return (_QWORD *)sub_10005E5A4(a1);
    v29 = v28;
    v68 = v28;
    v30 = sub_100006D10(0, &qword_1000EF0F0, UIOpenURLContext_ptr);
    swift_unknownObjectRetain(v29);
    swift_dynamicCast(v70, &v68, v53, v30, 7);
    v31 = (void *)v70[0];
    v32 = (id)swift_unknownObjectRelease(v29);
    v27 = v16;
    v25 = v17;
    if (!v31)
      return (_QWORD *)sub_10005E5A4(a1);
LABEL_34:
    v66 = v25;
    v67 = v27;
    static Logger.general.getter(v32);
    v36 = v31;
    v37 = Logger.logObject.getter(v36);
    v38 = v8;
    v39 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v37, v39))
    {
      v40 = swift_slowAlloc(22, -1);
      v41 = (_QWORD *)swift_slowAlloc(8, -1);
      v62 = swift_slowAlloc(32, -1);
      v68 = v62;
      *(_DWORD *)v40 = v59;
      v70[0] = ObjectType;
      MetatypeMetadata = swift_getMetatypeMetadata(ObjectType);
      v43 = String.init<A>(describing:)(v70, MetatypeMetadata);
      v44 = v4;
      v45 = v3;
      v46 = a1;
      v48 = v47;
      *(_QWORD *)(v40 + 4) = sub_100012B20(v43, v47, &v68);
      v49 = v48;
      a1 = v46;
      v3 = v45;
      v4 = v44;
      swift_bridgeObjectRelease(v49);
      *(_WORD *)(v40 + 12) = 2112;
      *(_QWORD *)(v40 + 14) = v36;
      *v41 = v31;

      _os_log_impl((void *)&_mh_execute_header, v37, v39, "[%{public}s]: Opening URL: %@", (uint8_t *)v40, 0x16u);
      sub_10006B44C(0, (unint64_t *)&qword_1000EF100, &qword_1000ECAA0, NSObject_ptr);
      swift_arrayDestroy(v41, 1, v50);
      swift_slowDealloc(v41, -1, -1);
      v51 = v62;
      swift_arrayDestroy(v62, 1, v58);
      swift_slowDealloc(v51, -1, -1);
      swift_slowDealloc(v40, -1, -1);

      v8 = v57;
      (*(void (**)(char *, uint64_t))(v63 + 8))(v57, v64);
    }
    else
    {

      (*(void (**)(char *, uint64_t))(v63 + 8))(v38, v64);
      v8 = v38;
    }
    v22 = objc_msgSend(v36, "URL");
    v23 = (uint64_t)v65;
    static URL._unconditionallyBridgeFromObjectiveC(_:)();

    v24 = objc_msgSend(v36, "options");
    sub_10006AF00(v23, v24);

    result = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t))(v4 + 8))(v23, v3);
    v17 = v66;
    v16 = v67;
  }
  if (v17)
  {
    v25 = (v17 - 1) & v17;
    v26 = __clz(__rbit64(v17)) | (v16 << 6);
    v27 = v16;
LABEL_33:
    v32 = *(id *)(*(_QWORD *)(a1 + 48) + 8 * v26);
    v31 = v32;
    if (!v32)
      return (_QWORD *)sub_10005E5A4(a1);
    goto LABEL_34;
  }
  v33 = v16 + 1;
  if (!__OFADD__(v16, 1))
  {
    if (v33 >= v55)
      return (_QWORD *)sub_10005E5A4(a1);
    v34 = *(_QWORD *)(v56 + 8 * v33);
    v27 = v16 + 1;
    if (!v34)
    {
      v27 = v16 + 2;
      if (v16 + 2 >= v55)
        return (_QWORD *)sub_10005E5A4(a1);
      v34 = *(_QWORD *)(v56 + 8 * v27);
      if (!v34)
      {
        v27 = v16 + 3;
        if (v16 + 3 >= v55)
          return (_QWORD *)sub_10005E5A4(a1);
        v34 = *(_QWORD *)(v56 + 8 * v27);
        if (!v34)
        {
          v27 = v16 + 4;
          if (v16 + 4 >= v55)
            return (_QWORD *)sub_10005E5A4(a1);
          v34 = *(_QWORD *)(v56 + 8 * v27);
          if (!v34)
          {
            v35 = v16 + 5;
            while (v55 != v35)
            {
              v34 = *(_QWORD *)(v56 + 8 * v35++);
              if (v34)
              {
                v27 = v35 - 1;
                goto LABEL_32;
              }
            }
            return (_QWORD *)sub_10005E5A4(a1);
          }
        }
      }
    }
LABEL_32:
    v25 = (v34 - 1) & v34;
    v26 = __clz(__rbit64(v34)) + (v27 << 6);
    goto LABEL_33;
  }
  __break(1u);
  return result;
}

id sub_100007D94()
{
  void *v0;
  id result;
  id v2;
  uint64_t v3;

  result = objc_msgSend(v0, "collectionView");
  if (result)
  {
    v2 = result;
    type metadata accessor for DiffableCollectionViewAdaptor(0);
    v3 = dispatch thunk of CompoundDataSourceCollectionViewController.dataSource.getter();
    return (id)DiffableCollectionViewAdaptor.__allocating_init(collectionView:backingDataSource:prefetchCellsWhenPerformingReloadData:)(v2, v3, &protocol witness table for CompoundSectionedDataSource, &protocol witness table for CompoundSectionedDataSource, 0);
  }
  else
  {
    __break(1u);
  }
  return result;
}

_QWORD *sub_100007E0C(_QWORD *a1)
{
  _QWORD *v1;
  uint64_t v2;

  v1 = a1;
  if ((*(_BYTE *)(*(_QWORD *)(a1[3] - 8) + 82) & 2) != 0)
  {
    *a1 = swift_allocBox();
    return (_QWORD *)v2;
  }
  return v1;
}

uint64_t sub_100007E48()
{
  uint64_t *v0;
  uint64_t v1;
  _BYTE v3[24];

  v1 = *v0;
  swift_beginAccess(*v0 + 16, v3, 0, 0);
  return swift_retain(*(_QWORD *)(v1 + 16));
}

id sub_100007E88()
{
  char *v0;
  uint64_t v1;
  void *v2;
  id v3;
  char *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  void *v9;
  id v10;

  v1 = OBJC_IVAR____TtC6Health11AppDelegate____lazy_storage___pluginNotificationRouter;
  v2 = *(void **)&v0[OBJC_IVAR____TtC6Health11AppDelegate____lazy_storage___pluginNotificationRouter];
  if (v2)
  {
    v3 = *(id *)&v0[OBJC_IVAR____TtC6Health11AppDelegate____lazy_storage___pluginNotificationRouter];
  }
  else
  {
    v4 = v0;
    type metadata accessor for PluginNotificationRouter(0);
    v5 = (void *)PluginNotificationRouter.__allocating_init()();
    v7 = sub_10000F6E4((unint64_t *)&unk_1000EE810, v6, (uint64_t (*)(uint64_t))type metadata accessor for AppDelegate, (uint64_t)&unk_1000B4030);
    v8 = v4;
    dispatch thunk of PluginNotificationRouter.sceneProvider.setter(v4, v7);
    v9 = *(void **)&v4[v1];
    *(_QWORD *)&v4[v1] = v5;
    v3 = v5;

    v2 = 0;
  }
  v10 = v2;
  return v3;
}

uint64_t sub_100007F28(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  void (*v9)(char *);
  uint64_t v11;

  v4 = type metadata accessor for Notification(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin();
  v7 = (char *)&v11 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *(void (**)(char *))(a1 + 32);
  v8 = *(_QWORD *)(a1 + 40);
  static Notification._unconditionallyBridgeFromObjectiveC(_:)(a2);
  swift_retain(v8);
  v9(v7);
  swift_release(v8);
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

uint64_t sub_100007FCC(uint64_t a1, unint64_t *a2, _QWORD *a3)
{
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t result;
  uint64_t v16;
  char v17;
  uint64_t v18;

  v6 = a1 & 0xC000000000000001;
  if ((a1 & 0xC000000000000001) != 0)
  {
    if (a1 < 0)
      v7 = a1;
    else
      v7 = a1 & 0xFFFFFFFFFFFFFF8;
    v8 = __CocoaSet.startIndex.getter(v7);
    v10 = v9;
    v11 = __CocoaSet.endIndex.getter(v7);
    v13 = static __CocoaSet.Index.== infix(_:_:)(v8, v10, v11, v12);
    swift_bridgeObjectRelease(v11);
    if ((v13 & 1) != 0)
      goto LABEL_6;
    goto LABEL_10;
  }
  result = sub_10005DC4C(a1);
  if ((v17 & 1) == 0)
  {
    v10 = v16;
    if (*(_DWORD *)(a1 + 36) == (_DWORD)v16)
    {
      v8 = result;
      if (result == 1 << *(_BYTE *)(a1 + 32))
      {
LABEL_6:
        sub_100044190(v8, v10, v6 != 0);
        return 0;
      }
LABEL_10:
      sub_10005D9E8(v8, v10, v6 != 0, a1, a2, a3);
      v14 = v18;
      sub_100044190(v8, v10, v6 != 0);
      return v14;
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_100008198(uint64_t a1, void *a2)
{
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  void *v6;
  _BYTE v7[24];

  v3 = a1 + 16;
  swift_beginAccess(a1 + 16, v7, 0, 0);
  result = swift_weakLoadStrong(v3);
  if (result)
  {
    v5 = result;
    v6 = *(void **)(result + 16);
    *(_QWORD *)(result + 16) = 0;

    sub_100006DA8(a2);
    return swift_release(v5);
  }
  return result;
}

uint64_t sub_100008200()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;

  v1 = *(_QWORD *)(v0 + 40);
  if (v1)
  {
    v2 = *(_QWORD *)(v0 + 40);
  }
  else
  {
    v3 = v0;
    v4 = *(void **)(v0 + 16);
    v5 = type metadata accessor for CloudSyncStartupManager(0);
    swift_allocObject(v5, *(unsigned int *)(v5 + 48), *(unsigned __int16 *)(v5 + 52));
    v2 = sub_10000C690(v4);
    v6 = *(_QWORD *)(v3 + 40);
    *(_QWORD *)(v3 + 40) = v2;
    swift_retain(v2);
    swift_release(v6);
    v1 = 0;
  }
  swift_retain(v1);
  return v2;
}

_QWORD *sub_100008278(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  int64_t v12;
  uint64_t v13;
  _QWORD *v14;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      sub_1000076D8(0, &qword_1000ED408, (uint64_t (*)(uint64_t))sub_1000149A0, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for _ContiguousArrayStorage);
      v11 = (_QWORD *)swift_allocObject(v10, 16 * v9 + 32, 7);
      v12 = j__malloc_size(v11);
      v13 = v12 - 32;
      if (v12 < 32)
        v13 = v12 - 17;
      v11[2] = v8;
      v11[3] = 2 * (v13 >> 4);
      v14 = v11 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v11 = _swiftEmptyArrayStorage;
      v14 = &_swiftEmptyArrayStorage[4];
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v11 != a4 || v14 >= &a4[2 * v8 + 4])
          memmove(v14, a4 + 4, 16 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_10002A5CC(0, v8, (char *)v14, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease(a4);
    return v11;
  }
  __break(1u);
  return result;
}

uint64_t sub_100008398()
{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v2;
  uint64_t v3;

  v0 = type metadata accessor for CompoundDataSourceCollectionViewController(0);
  v1 = (uint64_t (*)(void))method lookup function for CompoundDataSourceCollectionViewController(v0, &method descriptor for CompoundDataSourceCollectionViewController.observedTraits.getter);
  v2 = v1();
  sub_100006D10(0, &qword_1000EECD8, UITraitCollection_ptr);
  v3 = static UITraitCollection.systemTraitsAffectingColorAppearance.getter();
  sub_100007548(v3);
  return v2;
}

id sub_100008404()
{
  return sub_100008424();
}

id sub_100008424()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  id v3;
  uint64_t v4;
  void *v5;
  void *v6;
  id v7;

  v1 = qword_1000EEB10;
  v2 = *(void **)(v0 + qword_1000EEB10);
  if (v2)
  {
    v3 = *(id *)(v0 + qword_1000EEB10);
  }
  else
  {
    v4 = v0;
    type metadata accessor for ProfileBarButton(0);
    v5 = (void *)ProfileBarButton.__allocating_init()();
    v6 = *(void **)(v0 + v1);
    *(_QWORD *)(v4 + v1) = v5;
    v3 = v5;

    v2 = 0;
  }
  v7 = v2;
  return v3;
}

id sub_100008514()
{
  uint64_t v0;
  void *v1;
  id v2;
  uint64_t v3;
  id v4;
  id v5;
  unint64_t v6;
  void *v7;
  id v8;

  v1 = *(void **)(v0 + 24);
  if (v1)
  {
    v2 = *(id *)(v0 + 24);
  }
  else
  {
    v3 = v0;
    v4 = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for InteractiveGenerationListener(0)), "init");
    v5 = objc_msgSend((id)objc_opt_self(UIApplication), "sharedApplication");
    v6 = sub_10008A458();
    dispatch thunk of InteractiveGenerationListener.applicationStateProvider.setter(v5, v6);
    v7 = *(void **)(v3 + 24);
    *(_QWORD *)(v3 + 24) = v4;
    v2 = v4;

    v1 = 0;
  }
  v8 = v1;
  return v2;
}

id sub_1000085B8()
{
  id *v0;
  id v1;
  void *v2;
  uint64_t v3;
  unint64_t v4;
  id v6;

  v6 = *v0;
  v1 = objc_msgSend(*v0, "selectedViewController");
  if (v1)
  {
    v2 = v1;
    v3 = objc_opt_self(UINavigationController);
    if (swift_dynamicCastObjCClass(v2, v3))
    {
      v4 = (unint64_t)UINavigationController.rootViewController()();

      if (v4)
        return (id)v4;
    }
    else
    {

    }
  }
  return v6;
}

id sub_100008648()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  id v3;
  id v4;
  void *v5;
  id v6;

  v1 = OBJC_IVAR____TtC6Health20MainTabBarController____lazy_storage___providedHealthToolbox;
  v2 = *(void **)(v0 + OBJC_IVAR____TtC6Health20MainTabBarController____lazy_storage___providedHealthToolbox);
  if (v2)
  {
    v3 = *(id *)(v0 + OBJC_IVAR____TtC6Health20MainTabBarController____lazy_storage___providedHealthToolbox);
  }
  else
  {
    v4 = objc_msgSend((id)objc_opt_self(HBXViewControllerFactory), "sharedInstanceForHealthStore:", *(_QWORD *)(v0 + OBJC_IVAR____TtC6Health20MainTabBarController_providedHealthStore));
    v5 = *(void **)(v0 + v1);
    *(_QWORD *)(v0 + v1) = v4;
    v3 = v4;

    v2 = 0;
  }
  v6 = v2;
  return v3;
}

uint64_t sub_1000086CC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD v9[5];

  v1 = *(_QWORD *)(v0 + 64);
  if (v1)
  {
    v2 = *(_QWORD *)(v0 + 64);
  }
  else
  {
    v3 = v0;
    v4 = *(id *)(v0 + 16);
    v5 = sub_10008A0E4();
    v9[3] = type metadata accessor for PinnedContentManager(0);
    v9[4] = &protocol witness table for PinnedContentManager;
    v9[0] = v5;
    v6 = type metadata accessor for HealthAppAnalyticsManager(0);
    swift_allocObject(v6, *(unsigned int *)(v6 + 48), *(unsigned __int16 *)(v6 + 52));
    v2 = HealthAppAnalyticsManager.init(healthStore:pinnedContentManager:)(v4, v9);
    v7 = *(_QWORD *)(v3 + 64);
    *(_QWORD *)(v3 + 64) = v2;
    swift_retain(v2);
    swift_release(v7);
    v1 = 0;
  }
  swift_retain(v1);
  return v2;
}

uint64_t sub_10000877C()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  void *v9;
  id v10;
  uint64_t KeyPath;
  uint64_t v12;
  uint8_t *v14;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint8_t *v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint8_t *v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  uint64_t v32;

  v1 = v0;
  v2 = *v0;
  v3 = type metadata accessor for Logger(0);
  v4 = *(_QWORD *)(v3 - 8);
  v5 = __chkstk_darwin(v3);
  v7 = (char *)&v27 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *(_QWORD *)((char *)v0 + OBJC_IVAR____TtC6Health16IntroFlowManager_healthAppNotificationManager);
  v9 = (void *)dispatch thunk of HealthAppNotificationManager.getNotificationSettings()(v5);
  v10 = objc_msgSend(v9, "authorizationStatus");

  if (v10)
  {
    KeyPath = swift_getKeyPath(&unk_1000B2A68);
    v12 = swift_getKeyPath(&unk_1000B2A90);
    LOBYTE(v32) = 0;
    swift_retain(v1);
    return static Published.subscript.setter(&v32, v1, KeyPath, v12);
  }
  else
  {
    LODWORD(v14) = sub_100043A6C();
    v15 = static Logger.notifications.getter();
    v16 = Logger.logObject.getter(v15);
    v17 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v16, v17))
    {
      v18 = swift_slowAlloc(12, -1);
      v30 = (int)v14;
      v14 = (uint8_t *)v18;
      v28 = swift_slowAlloc(32, -1);
      v32 = v28;
      *(_DWORD *)v14 = 136315138;
      v27 = v14 + 4;
      v29 = v2;
      v19 = _typeName(_:qualified:)(v2, 0);
      v21 = v20;
      v31 = sub_100012B20(v19, v20, &v32);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v31, &v32, v27, v14 + 12);
      swift_bridgeObjectRelease(v21);
      _os_log_impl((void *)&_mh_execute_header, v16, v17, "%s Requesting notification authorization because not already determined", v14, 0xCu);
      v22 = v28;
      swift_arrayDestroy(v28, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v22, -1, -1);
      v23 = v14;
      LOBYTE(v14) = v30;
      swift_slowDealloc(v23, -1, -1);

      v24 = v29;
      (*(void (**)(char *, uint64_t))(v4 + 8))(v7, v3);
    }
    else
    {

      (*(void (**)(char *, uint64_t))(v4 + 8))(v7, v3);
      v24 = v2;
    }
    v25 = swift_allocObject(&unk_1000DE8C8, 24, 7);
    swift_weakInit(v25 + 16, v1);
    v26 = (_QWORD *)swift_allocObject(&unk_1000DEB20, 40, 7);
    v26[2] = v8;
    v26[3] = v25;
    v26[4] = v24;
    swift_retain(v8);
    swift_retain(v25);
    dispatch thunk of HealthAppNotificationManager.requestAuthorization(addCriticalAlerts:completionHandler:)(v14 & 1, sub_100046A00, v26);
    swift_release(v25);
    return swift_release(v26);
  }
}

void sub_100008A3C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  void (*v31)(char *, uint64_t, uint64_t);
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void (*v35)(char *, uint64_t);
  char v36;
  __n128 v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char v45;
  __n128 v46;
  uint64_t v47;
  NSObject *v48;
  os_log_type_t v49;
  uint8_t *v50;
  char *v51;
  char *v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char v62[24];

  v57 = a1;
  v55 = type metadata accessor for Logger(0);
  v2 = *(_QWORD *)(v55 - 8);
  __chkstk_darwin(v55);
  v4 = (char *)&v51 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000137DC(0);
  __chkstk_darwin(v5);
  v7 = (char *)&v51 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for CloudSyncRestoreState(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = __chkstk_darwin(v8);
  v12 = (char *)&v51 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __chkstk_darwin(v10);
  v15 = (char *)&v51 - v14;
  __chkstk_darwin(v13);
  v17 = (char *)&v51 - v16;
  v56 = v1;
  v18 = v1 + qword_1000EFAA0;
  swift_beginAccess(v1 + qword_1000EFAA0, v62, 0, 0);
  sub_10001375C(v18, (uint64_t)v7, (uint64_t (*)(_QWORD))sub_1000137DC);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1)
  {
    v19 = sub_1000137A0((uint64_t)v7, (uint64_t (*)(_QWORD))sub_1000137DC);
LABEL_3:
    v20 = v56;
    goto LABEL_4;
  }
  v52 = v12;
  v53 = v4;
  v54 = v2;
  (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v17, v7, v8);
  v30 = enum case for CloudSyncRestoreState.activelyRestoring(_:);
  v31 = *(void (**)(char *, uint64_t, uint64_t))(v9 + 104);
  v31(v15, enum case for CloudSyncRestoreState.activelyRestoring(_:), v8);
  v32 = sub_100013198(&qword_1000EFBB8, (uint64_t (*)(uint64_t))&type metadata accessor for CloudSyncRestoreState, (uint64_t)&protocol conformance descriptor for CloudSyncRestoreState);
  dispatch thunk of RawRepresentable.rawValue.getter(&v60, v8, v32);
  dispatch thunk of RawRepresentable.rawValue.getter(&v58, v8, v32);
  v33 = v61;
  v34 = v59;
  if (v60 == v58 && v61 == v59)
  {
    v51 = v17;
    swift_bridgeObjectRelease_n(v61, 2);
    v35 = *(void (**)(char *, uint64_t))(v9 + 8);
    v35(v15, v8);
  }
  else
  {
    v36 = _stringCompareWithSmolCheck(_:_:expecting:)(v60, v61, v58, v59, 0);
    swift_bridgeObjectRelease(v33);
    v37 = swift_bridgeObjectRelease(v34);
    v35 = *(void (**)(char *, uint64_t))(v9 + 8);
    ((void (*)(char *, uint64_t, __n128))v35)(v15, v8, v37);
    if ((v36 & 1) == 0)
    {
      v19 = ((uint64_t (*)(char *, uint64_t))v35)(v17, v8);
      goto LABEL_3;
    }
    v51 = v17;
  }
  v38 = v52;
  v31(v52, v30, v8);
  dispatch thunk of RawRepresentable.rawValue.getter(&v60, v8, v32);
  dispatch thunk of RawRepresentable.rawValue.getter(&v58, v8, v32);
  v39 = v61;
  v40 = v59;
  v41 = v53;
  if (v60 == v58 && v61 == v59)
  {
    swift_bridgeObjectRelease_n(v61, 2);
    v42 = ((uint64_t (*)(char *, uint64_t))v35)(v38, v8);
    v44 = v54;
    v43 = v55;
  }
  else
  {
    v45 = _stringCompareWithSmolCheck(_:_:expecting:)(v60, v61, v58, v59, 0);
    swift_bridgeObjectRelease(v39);
    v46 = swift_bridgeObjectRelease(v40);
    v42 = ((uint64_t (*)(char *, uint64_t, __n128))v35)(v38, v8, v46);
    v44 = v54;
    v43 = v55;
    if ((v45 & 1) == 0)
    {
      v19 = ((uint64_t (*)(char *, uint64_t))v35)(v51, v8);
      v20 = v56;
LABEL_4:
      v21 = CloudSyncRestoreState.isOngoing.getter(v19);
      v22 = *(_QWORD *)(*(_QWORD *)(v20 + qword_1000F1178)
                      + direct field offset for SummaryPinnedContentDataSource.pinnedContentWithCloudStateDataSource);
      v23 = swift_retain(v22);
      v24 = dispatch thunk of PrimarySecondaryDataSource.primaryDataSource.getter(v23);
      swift_release(v22);
      if ((v21 & 1) != 0)
      {
        sub_100007730(0, (unint64_t *)&qword_1000ECA70, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for _ContiguousArrayStorage);
        v26 = swift_allocObject(v25, 72, 7);
        *(_OWORD *)(v26 + 16) = xmmword_1000B11F0;
        v27 = v24 + qword_1000EDA60;
        v28 = type metadata accessor for EmptyStateCollectionViewCellItem(0);
        *(_QWORD *)(v26 + 56) = v28;
        *(_QWORD *)(v26 + 64) = sub_100013198(&qword_1000ED438, (uint64_t (*)(uint64_t))&type metadata accessor for EmptyStateCollectionViewCellItem, (uint64_t)&protocol conformance descriptor for EmptyStateCollectionViewCellItem);
        v29 = sub_100007E0C((_QWORD *)(v26 + 32));
        (*(void (**)(_QWORD *, uint64_t, uint64_t))(*(_QWORD *)(v28 - 8) + 16))(v29, v27, v28);
        dispatch thunk of MutableArrayDataSource.replaceItemsForSection(at:newItems:reconfigureAndReloadItems:)(0, v26, 1);
        swift_release(v24);
        swift_bridgeObjectRelease(v26);
      }
      else
      {
        dispatch thunk of MutableArrayDataSource.replaceItemsForSection(at:newItems:reconfigureAndReloadItems:)(0, _swiftEmptyArrayStorage, 1);
        swift_release(v24);
      }
      return;
    }
  }
  v47 = static Logger.view.getter(v42);
  v48 = Logger.logObject.getter(v47);
  v49 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v48, v49))
  {
    v50 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v50 = 0;
    _os_log_impl((void *)&_mh_execute_header, v48, v49, "Our previous cloud sync state is inProgress. Skipping notifying delegate.", v50, 2u);
    swift_slowDealloc(v50, -1, -1);
  }

  (*(void (**)(char *, uint64_t))(v44 + 8))(v41, v43);
  v35(v51, v8);
}

void sub_100008F48(void *a1, uint64_t a2, void *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  id v9;
  id v10;
  uint64_t v11;
  uint64_t v12;

  v5 = type metadata accessor for Date(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v12 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a3;
  v10 = a1;
  v11 = sub_1000094FC();
  Date.init()(v11);
  dispatch thunk of PersonalizedFeedTrainer.visibleFeedItemsDidChange(at:)(v8);
  swift_release(v11);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);

}

uint64_t sub_100009000@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _BYTE v19[24];
  _BYTE v20[24];

  sub_100014B40(0);
  v4 = __chkstk_darwin(v3);
  v6 = &v19[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v4);
  v8 = &v19[-v7];
  v9 = v1 + qword_1000EFA98;
  swift_beginAccess(v1 + qword_1000EFA98, v20, 0, 0);
  sub_10001375C(v9, (uint64_t)v8, (uint64_t (*)(_QWORD))sub_100014B40);
  sub_100014B5C(0);
  v11 = v10;
  v12 = *(_QWORD *)(v10 - 8);
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v12 + 48))(v8, 1, v10) != 1)
    return (*(uint64_t (**)(uint64_t, _BYTE *, uint64_t))(v12 + 32))(a1, v8, v11);
  sub_1000137A0((uint64_t)v8, (uint64_t (*)(_QWORD))sub_100014B40);
  v13 = type metadata accessor for CloudSyncRestoreState(0);
  v14 = static LegacyObservable.create()(a1, v13);
  v16 = v15;
  swift_retain(v15);
  v17 = dispatch thunk of CloudSyncStateObserver.firstRestoreStateChangeHandler.setter(v14, v16);
  dispatch thunk of CloudSyncStateObserver.startFirstRestoreIfNeeded()(v17);
  swift_release(v16);
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v12 + 16))(v6, a1, v11);
  (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v6, 0, 1, v11);
  swift_beginAccess(v9, v19, 33, 0);
  sub_100014AFC((uint64_t)v6, v9, (uint64_t (*)(_QWORD))sub_100014B40);
  return swift_endAccess(v19);
}

void sub_1000091C4(char a1, void (*a2)(void), uint64_t a3)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  id v20;
  void *v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  void *v25;
  _QWORD *v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  id v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD aBlock[5];
  _QWORD *v35;

  v4 = v3;
  v33 = *v3;
  sub_100026E84(0, &qword_1000EFBC0, (uint64_t (*)(uint64_t))&type metadata accessor for SummaryFeedTrendsSectionDataSource, sub_100086BCC, (uint64_t (*)(uint64_t, uint64_t, uint64_t))&type metadata accessor for HideableDataSource.Visibility);
  v9 = v8;
  v10 = *(_QWORD *)(v8 - 8);
  v11 = __chkstk_darwin(v8);
  v13 = (char *)&v32 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v15 = (char *)&v32 - v14;
  sub_100026E84(0, &qword_1000EFBD0, (uint64_t (*)(uint64_t))sub_100086BE8, sub_100086D2C, (uint64_t (*)(uint64_t, uint64_t, uint64_t))&type metadata accessor for HideableDataSource.Visibility);
  __chkstk_darwin(v16);
  v19 = (char *)&v32 - v18;
  if ((a1 & 1) != 0)
  {
    v20 = objc_allocWithZone((Class)type metadata accessor for DeleteFeedOperation(0));
    v21 = (void *)DeleteFeedOperation.init(feedKinds:)(&off_1000DC5D8);
    v22 = swift_allocObject(&unk_1000E1650, 24, 7);
    swift_weakInit(v22 + 16, v4);
    v23 = (_QWORD *)swift_allocObject(&unk_1000E1678, 48, 7);
    v23[2] = v22;
    v23[3] = a2;
    v24 = v33;
    v23[4] = a3;
    v23[5] = v24;
    aBlock[4] = sub_100087B58;
    v35 = v23;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_100006988;
    aBlock[3] = &unk_1000E1690;
    v25 = _Block_copy(aBlock);
    v26 = v35;
    swift_retain(v22);
    sub_10003FBE0((uint64_t)a2, a3);
    sub_10003FBE0((uint64_t)sub_100087B58, (uint64_t)v23);
    swift_release(v26);
    objc_msgSend(v21, "setCompletionBlock:", v25);
    _Block_release(v25);
    swift_release(v22);
    swift_release(v23);
    sub_100006D10(0, (unint64_t *)&qword_1000EDA38, NSOperationQueue_ptr);
    v27 = (void *)static NSOperationQueue.userInitiated.getter();
    objc_msgSend(v27, "addOperation:", v21);

  }
  else
  {
    v28 = enum case for HideableDataSource.Visibility.visible<A>(_:);
    (*(void (**)(char *, _QWORD))(v17 + 104))((char *)&v32 - v18, enum case for HideableDataSource.Visibility.visible<A>(_:));
    dispatch thunk of HideableDataSource.visibility.setter(v19);
    v29 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v10 + 104))(v15, v28, v9);
    if (HAFeatureFlagShowTrendsInSummary(v29))
    {
      (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v13, v15, v9);
      dispatch thunk of HideableDataSource.visibility.setter(v13);
    }
    (*(void (**)(char *, uint64_t))(v10 + 8))(v15, v9);
    v30 = (_QWORD *)((char *)v3 + qword_1000EFAE0);
    v31 = objc_msgSend(*(id *)((char *)v4 + qword_1000EFAE8), "profileIdentifier");
    sub_1000877E0(v30, v31);

    if (a2)
      a2();
  }
}

uint64_t sub_1000094FC()
{
  char *v0;
  char *v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  v1 = v0;
  v2 = type metadata accessor for PersonalizedFeedTrainer.DwellPolicy(0);
  __chkstk_darwin(v2);
  v4 = (char *)&v12 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = qword_1000EEB18;
  v6 = *(_QWORD *)&v1[qword_1000EEB18];
  if (v6)
  {
    v7 = *(_QWORD *)&v1[qword_1000EEB18];
  }
  else
  {
    v8 = sub_100013198(&qword_1000EECE8, type metadata accessor for SummaryFeedViewController, (uint64_t)&unk_1000B4428);
    static PersonalizedFeedTrainer.DwellPolicy.summary.getter();
    v9 = type metadata accessor for PersonalizedFeedTrainer(0);
    swift_allocObject(v9, *(unsigned int *)(v9 + 48), *(unsigned __int16 *)(v9 + 52));
    v7 = PersonalizedFeedTrainer.init(delegate:dwellPolicy:)(v1, v8, v4);
    v10 = *(_QWORD *)&v1[v5];
    *(_QWORD *)&v1[v5] = v7;
    swift_retain(v7);
    swift_release(v10);
    v6 = 0;
  }
  swift_retain(v6);
  return v7;
}

uint64_t sub_1000095F0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD v18[3];

  v1 = v0;
  sub_100026E84(0, &qword_1000EE198, (uint64_t (*)(uint64_t))sub_100013E60, sub_100013EC4, (uint64_t (*)(uint64_t, uint64_t, uint64_t))&type metadata accessor for Publishers.Drop);
  v3 = v2;
  v4 = *(_QWORD *)(v2 - 8);
  v5 = __chkstk_darwin(v2);
  v7 = (char *)&v18[-1] - v6;
  v8 = static FeatureStatusSupport.isHealthChecklistAvailablePublisher()(v5);
  v18[0] = v8;
  sub_100013E60();
  v10 = v9;
  v11 = sub_100013EC4();
  Publisher.dropFirst(_:)(1, v10, v11);
  v12 = swift_allocObject(&unk_1000DEF50, 24, 7);
  swift_weakInit(v12 + 16, v0);
  v13 = sub_100013EE0();
  v14 = Publisher<>.sink(receiveValue:)(sub_10004A250, v12, v3, v13);
  swift_release(v12);
  (*(void (**)(char *, uint64_t))(v4 + 8))(v7, v3);
  v15 = v1 + qword_1000EE0E8;
  swift_beginAccess(v15, v18, 33, 0);
  AnyCancellable.store(in:)(v15);
  swift_endAccess(v18);
  swift_release(v8);
  return swift_release(v14);
}

uint64_t sub_100009754()
{
  uint64_t v0;
  id v1;
  id v2;
  char v4;

  *(_QWORD *)(v0 + 16) = objc_msgSend(objc_allocWithZone((Class)HKHealthStore), "init");
  *(_OWORD *)(v0 + 24) = 0u;
  *(_OWORD *)(v0 + 40) = 0u;
  *(_OWORD *)(v0 + 56) = 0u;
  *(_BYTE *)(v0 + 72) = 0;
  v1 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "standardUserDefaults");
  v4 = 1;
  UserDefault.init(key:userDefaults:fallbackValue:isAppleInternalOnly:)(0xD000000000000019, 0x80000001000BE660, v1, &v4, 0, &type metadata for Bool);
  v2 = objc_msgSend((id)objc_opt_self(NSNotificationCenter), "defaultCenter");
  objc_msgSend(v2, "addObserver:selector:name:object:", v0, "applicationDidEnterBackgroundWithNotification:", UIApplicationDidEnterBackgroundNotification, 0);

  return v0;
}

uint64_t sub_100009860()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE v15[24];

  v1 = v0;
  sub_10004A258(0);
  v3 = v2;
  v4 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v6 = &v15[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v7 = *(_QWORD *)(v0 + qword_1000EE0D8);
  v8 = swift_retain(v7);
  DelayedDataSource.$dataSourceState.getter(v8);
  swift_release(v7);
  v9 = swift_allocObject(&unk_1000DEF50, 24, 7);
  swift_weakInit(v9 + 16, v1);
  v10 = sub_100013198(&qword_1000EE1C0, (uint64_t (*)(uint64_t))sub_10004A258, (uint64_t)&protocol conformance descriptor for Published<A>.Publisher);
  v11 = Publisher<>.sink(receiveValue:)(sub_1000138A0, v9, v3, v10);
  swift_release(v9);
  (*(void (**)(_BYTE *, uint64_t))(v4 + 8))(v6, v3);
  v12 = v1 + qword_1000EE0E8;
  swift_beginAccess(v12, v15, 33, 0);
  AnyCancellable.store(in:)(v12);
  swift_endAccess(v15);
  return swift_release(v11);
}

void sub_1000099AC(char a1)
{
  void *v1;
  void *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  objc_class *v8;
  uint64_t v9;
  id v10;
  void *v11;
  objc_super v12;

  v2 = v1;
  v4 = type metadata accessor for Date(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v12 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = (objc_class *)type metadata accessor for SummaryFeedViewController(0);
  v12.receiver = v2;
  v12.super_class = v8;
  objc_msgSendSuper2(&v12, "viewDidAppear:", a1 & 1);
  v9 = sub_1000094FC();
  Date.init()(v9);
  dispatch thunk of PersonalizedFeedTrainer.feedDidBeginDisplay(at:)(v7);
  swift_release(v9);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  v10 = objc_msgSend(v2, "userActivity");
  if (v10)
  {
    v11 = v10;
    objc_msgSend(v2, "submitUserActivityForRestoration:", v10);

  }
  if (qword_1000EC140 != -1)
    swift_once(&qword_1000EC140, sub_100014684);
  sub_10000EE2C();
  sub_10000E13C();
}

uint64_t sub_100009AE4(void *a1, uint64_t a2, void *a3, void *a4)
{
  uint64_t v7;
  void (*v8)(void *, id);
  id v9;
  id v10;
  id v11;
  id v12;

  v7 = type metadata accessor for CompoundDataSourceCollectionViewController(0);
  v8 = (void (*)(void *, id))method lookup function for CompoundDataSourceCollectionViewController(v7, &method descriptor for CompoundDataSourceCollectionViewController.observedTraitsDidChange(traitEnvironment:previousTraitCollection:));
  swift_unknownObjectRetain(a3);
  v9 = a4;
  v10 = a1;
  v8(a3, v9);
  v11 = objc_msgSend(a3, "traitCollection");
  v12 = objc_msgSend(v11, "horizontalSizeClass");

  if (v12 != objc_msgSend(v9, "horizontalSizeClass"))
    sub_10000E13C();

  return swift_unknownObjectRelease(a3);
}

uint64_t sub_100009BA8(uint64_t a1, void (*a2)(void), uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  void (*v34)(char *, _QWORD, uint64_t, uint64_t);
  void (*v35)(char *, _QWORD, uint64_t);
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void (*v39)(char *, uint64_t);
  char v40;
  __n128 v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unsigned int (*v45)(uint64_t, uint64_t, uint64_t);
  uint64_t v46;
  char *v47;
  uint64_t v48;
  char v49;
  char v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  uint64_t v61;
  char *v62;
  char *v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  void (*v76)(void);
  char *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  char v82[32];

  v74 = a3;
  v76 = a2;
  sub_100026E84(0, &qword_1000EFBC0, (uint64_t (*)(uint64_t))&type metadata accessor for SummaryFeedTrendsSectionDataSource, sub_100086BCC, (uint64_t (*)(uint64_t, uint64_t, uint64_t))&type metadata accessor for HideableDataSource.Visibility);
  v68 = *(_QWORD *)(v5 - 8);
  v69 = v5;
  v6 = __chkstk_darwin(v5);
  v63 = (char *)&v61 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v67 = (char *)&v61 - v8;
  sub_100026E84(0, &qword_1000EFBD0, (uint64_t (*)(uint64_t))sub_100086BE8, sub_100086D2C, (uint64_t (*)(uint64_t, uint64_t, uint64_t))&type metadata accessor for HideableDataSource.Visibility);
  v65 = *(_QWORD *)(v9 - 8);
  v66 = v9;
  __chkstk_darwin(v9);
  v64 = (char *)&v61 - v10;
  sub_100014A84(0);
  v73 = v11;
  __chkstk_darwin(v11);
  v72 = (uint64_t)&v61 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for CloudSyncRestoreState(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = __chkstk_darwin(v13);
  v62 = (char *)&v61 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  v18 = (char *)&v61 - v17;
  sub_1000137DC(0);
  v20 = __chkstk_darwin(v19);
  v70 = (uint64_t)&v61 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = __chkstk_darwin(v20);
  v24 = (char *)&v61 - v23;
  v25 = __chkstk_darwin(v22);
  v27 = (char *)&v61 - v26;
  v28 = __chkstk_darwin(v25);
  v30 = (char *)&v61 - v29;
  __chkstk_darwin(v28);
  v32 = (char *)&v61 - v31;
  sub_100008A3C(a1);
  v75 = v3;
  v33 = v3 + qword_1000EFAA0;
  swift_beginAccess(v33, v82, 0, 0);
  v77 = v32;
  sub_10001375C(v33, (uint64_t)v32, (uint64_t (*)(_QWORD))sub_1000137DC);
  (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))(v30, a1, v13);
  v34 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v14 + 56);
  v34(v30, 0, 1, v13);
  sub_10000D118((uint64_t)v30, (uint64_t)v27);
  swift_beginAccess(v33, &v80, 33, 0);
  sub_100014AFC((uint64_t)v27, v33, (uint64_t (*)(_QWORD))sub_1000137DC);
  swift_endAccess(&v80);
  v35 = *(void (**)(char *, _QWORD, uint64_t))(v14 + 104);
  v35(v18, enum case for CloudSyncRestoreState.completed(_:), v13);
  v36 = sub_100013198(&qword_1000EFBB8, (uint64_t (*)(uint64_t))&type metadata accessor for CloudSyncRestoreState, (uint64_t)&protocol conformance descriptor for CloudSyncRestoreState);
  v71 = a1;
  dispatch thunk of RawRepresentable.rawValue.getter(&v80, v13, v36);
  dispatch thunk of RawRepresentable.rawValue.getter(&v78, v13, v36);
  v37 = v81;
  v38 = v79;
  if (v80 == v78 && v81 == v79)
  {
    swift_bridgeObjectRelease_n(v81, 2);
    v39 = *(void (**)(char *, uint64_t))(v14 + 8);
    v39(v18, v13);
  }
  else
  {
    v40 = _stringCompareWithSmolCheck(_:_:expecting:)(v80, v81, v78, v79, 0);
    swift_bridgeObjectRelease(v37);
    v41 = swift_bridgeObjectRelease(v38);
    v39 = *(void (**)(char *, uint64_t))(v14 + 8);
    v42 = ((uint64_t (*)(char *, uint64_t, __n128))v39)(v18, v13, v41);
    if ((v40 & 1) == 0)
      goto LABEL_13;
  }
  v35(v24, enum case for CloudSyncRestoreState.activelyRestoring(_:), v13);
  v34(v24, 0, 1, v13);
  v43 = v72;
  v44 = v72 + *(int *)(v73 + 48);
  sub_10001375C((uint64_t)v77, v72, (uint64_t (*)(_QWORD))sub_1000137DC);
  sub_10001375C((uint64_t)v24, v44, (uint64_t (*)(_QWORD))sub_1000137DC);
  v45 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v14 + 48);
  if (v45(v43, 1, v13) == 1)
  {
    sub_1000137A0((uint64_t)v24, (uint64_t (*)(_QWORD))sub_1000137DC);
    if (v45(v44, 1, v13) == 1)
    {
      sub_1000137A0(v43, (uint64_t (*)(_QWORD))sub_1000137DC);
LABEL_12:
      v50 = 1;
LABEL_19:
      sub_1000091C4(v50, v76, v74);
      return sub_1000137A0((uint64_t)v77, (uint64_t (*)(_QWORD))sub_1000137DC);
    }
    goto LABEL_10;
  }
  v46 = v70;
  sub_10001375C(v43, v70, (uint64_t (*)(_QWORD))sub_1000137DC);
  if (v45(v44, 1, v13) == 1)
  {
    sub_1000137A0((uint64_t)v24, (uint64_t (*)(_QWORD))sub_1000137DC);
    v39((char *)v46, v13);
LABEL_10:
    v42 = sub_1000137A0(v43, (uint64_t (*)(_QWORD))sub_100014A84);
    goto LABEL_13;
  }
  v47 = v62;
  (*(void (**)(char *, uint64_t, uint64_t))(v14 + 32))(v62, v44, v13);
  v48 = sub_100013198((unint64_t *)&qword_1000EC710, (uint64_t (*)(uint64_t))&type metadata accessor for CloudSyncRestoreState, (uint64_t)&protocol conformance descriptor for CloudSyncRestoreState);
  v49 = dispatch thunk of static Equatable.== infix(_:_:)(v46, v47, v13, v48);
  v39(v47, v13);
  sub_1000137A0((uint64_t)v24, (uint64_t (*)(_QWORD))sub_1000137DC);
  v39((char *)v46, v13);
  v42 = sub_1000137A0(v43, (uint64_t (*)(_QWORD))sub_1000137DC);
  if ((v49 & 1) != 0)
    goto LABEL_12;
LABEL_13:
  if ((CloudSyncRestoreState.isOngoing.getter(v42) & 1) == 0)
  {
    v50 = 0;
    goto LABEL_19;
  }
  v51 = enum case for HideableDataSource.Visibility.hidden<A>(_:);
  v52 = v64;
  (*(void (**)(char *, _QWORD, uint64_t))(v65 + 104))(v64, enum case for HideableDataSource.Visibility.hidden<A>(_:), v66);
  dispatch thunk of HideableDataSource.visibility.setter(v52);
  v54 = v67;
  v53 = v68;
  v55 = v51;
  v56 = v69;
  v57 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v68 + 104))(v67, v55, v69);
  if (HAFeatureFlagShowTrendsInSummary(v57))
  {
    v58 = v63;
    (*(void (**)(char *, char *, uint64_t))(v53 + 16))(v63, v54, v56);
    dispatch thunk of HideableDataSource.visibility.setter(v58);
  }
  v59 = (*(uint64_t (**)(char *, uint64_t))(v53 + 8))(v54, v56);
  if (v76)
    ((void (*)(uint64_t))v76)(v59);
  return sub_1000137A0((uint64_t)v77, (uint64_t (*)(_QWORD))sub_1000137DC);
}

id sub_10000A300()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  id result;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  uint64_t v12;
  _QWORD v13[2];

  v0 = type metadata accessor for Date(0);
  __chkstk_darwin(v0);
  v2 = (char *)v13 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = objc_msgSend((id)objc_opt_self(_HKBehavior), "currentOSBuild");
  if (result)
  {
    v4 = result;
    v5 = static String._unconditionallyBridgeFromObjectiveC(_:)(result);
    v7 = v6;

    v8 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "standardUserDefaults");
    v9 = type metadata accessor for IntroFlowThrottledCheck(0);
    v10 = swift_allocObject(v9, *(unsigned int *)(v9 + 48), *(unsigned __int16 *)(v9 + 52));
    *(_QWORD *)(v10 + 16) = v5;
    *(_QWORD *)(v10 + 24) = v7;
    v13[0] = 0;
    v13[1] = 0xE000000000000000;
    v11 = v8;
    v12 = UserDefault.init(key:userDefaults:fallbackValue:isAppleInternalOnly:)(0xD000000000000027, 0x80000001000BA900, v11, v13, 0, &type metadata for String);
    static Date.distantPast.getter(v12);
    result = (id)UserDefault.init(key:userDefaults:fallbackValue:isAppleInternalOnly:)(0xD000000000000024, 0x80000001000BA930, v11, v2, 0, v0);
    qword_1000F0F30 = v10;
  }
  else
  {
    __break(1u);
  }
  return result;
}

void *sub_10000A480()
{
  uint64_t v0;
  void *v1;
  id v2;

  v1 = *(void **)(v0 + qword_1000EEB28);
  v2 = v1;
  return v1;
}

id sub_10000A4B4()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  id result;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  uint64_t v12;
  _QWORD v13[2];

  v0 = type metadata accessor for Date(0);
  __chkstk_darwin(v0);
  v2 = (char *)v13 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = objc_msgSend((id)objc_opt_self(_HKBehavior), "currentOSBuild");
  if (result)
  {
    v4 = result;
    v5 = static String._unconditionallyBridgeFromObjectiveC(_:)(result);
    v7 = v6;

    v8 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "standardUserDefaults");
    v9 = type metadata accessor for IntroFlowThrottledCheck(0);
    v10 = swift_allocObject(v9, *(unsigned int *)(v9 + 48), *(unsigned __int16 *)(v9 + 52));
    *(_QWORD *)(v10 + 16) = v5;
    *(_QWORD *)(v10 + 24) = v7;
    v13[0] = 0;
    v13[1] = 0xE000000000000000;
    v11 = v8;
    v12 = UserDefault.init(key:userDefaults:fallbackValue:isAppleInternalOnly:)(0xD000000000000024, 0x80000001000BA960, v11, v13, 0, &type metadata for String);
    static Date.distantPast.getter(v12);
    result = (id)UserDefault.init(key:userDefaults:fallbackValue:isAppleInternalOnly:)(0xD000000000000021, 0x80000001000BA990, v11, v2, 0, v0);
    qword_1000F0F38 = v10;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_10000A634()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  void *v12;
  id v13;
  uint64_t v14;
  NSObject *v15;
  os_log_type_t v16;
  uint8_t *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  id v23;
  uint64_t v24;
  NSObject *v25;
  os_log_type_t v26;
  uint8_t *v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t ObjectType;
  uint64_t v36;
  uint64_t v37;
  NSObject *v38;
  os_log_type_t v39;
  uint8_t *v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v46;
  uint64_t v47;

  v1 = *v0;
  v2 = type metadata accessor for Logger(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = __chkstk_darwin(v2);
  v6 = (char *)&v46 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __chkstk_darwin(v4);
  v9 = (char *)&v46 - v8;
  __chkstk_darwin(v7);
  v11 = (char *)&v46 - v10;
  v12 = (void *)objc_opt_self(_HKBehavior);
  v13 = objc_msgSend(v12, "isBuddyDisabled");
  if (!(_DWORD)v13)
  {
    v23 = objc_msgSend(v12, "shouldShowBuddy");
    if ((_DWORD)v23)
    {
      v24 = static Logger.advertisableFeatures.getter(v23);
      v25 = Logger.logObject.getter(v24);
      v26 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v25, v26))
      {
        v27 = (uint8_t *)swift_slowAlloc(12, -1);
        v28 = swift_slowAlloc(32, -1);
        v47 = v28;
        *(_DWORD *)v27 = 136315138;
        v29 = _typeName(_:qualified:)(v1, 0);
        v31 = v30;
        v46 = sub_100012B20(v29, v30, &v47);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v46, &v47, v27 + 4, v27 + 12);
        swift_bridgeObjectRelease(v31);
        _os_log_impl((void *)&_mh_execute_header, v25, v26, "[%s] Should show due to version check or force state", v27, 0xCu);
        v22 = 1;
        swift_arrayDestroy(v28, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v28, -1, -1);
        swift_slowDealloc(v27, -1, -1);

        (*(void (**)(char *, uint64_t))(v3 + 8))(v9, v2);
        return v22;
      }

      (*(void (**)(char *, uint64_t))(v3 + 8))(v9, v2);
    }
    else
    {
      v32 = (char *)v0 + OBJC_IVAR____TtC6Health16IntroFlowManager_healthWelcomeFlowSignalProvider;
      v33 = *(uint64_t *)((char *)v0 + OBJC_IVAR____TtC6Health16IntroFlowManager_healthWelcomeFlowSignalProvider);
      v34 = *((_QWORD *)v32 + 1);
      ObjectType = swift_getObjectType(v33);
      swift_unknownObjectRetain(v33);
      LOBYTE(v34) = dispatch thunk of HealthWelcomeFlowSignalProviding.shouldShowHealthWelcomeFlowOnNextLaunch.getter(ObjectType, v34);
      v36 = swift_unknownObjectRelease(v33);
      if ((v34 & 1) == 0)
        return 0;
      v37 = static Logger.advertisableFeatures.getter(v36);
      v38 = Logger.logObject.getter(v37);
      v39 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v38, v39))
      {
        v40 = (uint8_t *)swift_slowAlloc(12, -1);
        v41 = swift_slowAlloc(32, -1);
        v47 = v41;
        *(_DWORD *)v40 = 136315138;
        v42 = _typeName(_:qualified:)(v1, 0);
        v44 = v43;
        v46 = sub_100012B20(v42, v43, &v47);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v46, &v47, v40 + 4, v40 + 12);
        swift_bridgeObjectRelease(v44);
        _os_log_impl((void *)&_mh_execute_header, v38, v39, "[%s] Should show due to advertisable feature signal check", v40, 0xCu);
        swift_arrayDestroy(v41, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v41, -1, -1);
        swift_slowDealloc(v40, -1, -1);

        (*(void (**)(char *, uint64_t))(v3 + 8))(v6, v2);
        return 1;
      }

      (*(void (**)(char *, uint64_t))(v3 + 8))(v6, v2);
    }
    return 1;
  }
  v14 = static Logger.advertisableFeatures.getter(v13);
  v15 = Logger.logObject.getter(v14);
  v16 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v15, v16))
  {
    v17 = (uint8_t *)swift_slowAlloc(12, -1);
    v18 = swift_slowAlloc(32, -1);
    v47 = v18;
    *(_DWORD *)v17 = 136315138;
    v19 = _typeName(_:qualified:)(v1, 0);
    v21 = v20;
    v46 = sub_100012B20(v19, v20, &v47);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v46, &v47, v17 + 4, v17 + 12);
    swift_bridgeObjectRelease(v21);
    _os_log_impl((void *)&_mh_execute_header, v15, v16, "[%s] Buddy explicitly disabled or in store demo mode.", v17, 0xCu);
    swift_arrayDestroy(v18, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v18, -1, -1);
    swift_slowDealloc(v17, -1, -1);
  }

  (*(void (**)(char *, uint64_t))(v3 + 8))(v11, v2);
  return 0;
}

void sub_10000AAE8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint64_t v12;
  uint8_t *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  id v18;
  _QWORD v19[2];
  uint64_t v20;
  uint64_t v21;

  v4 = type metadata accessor for Logger(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = __chkstk_darwin(v4);
  v8 = (char *)v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = static Logger.general.getter(v6);
  v10 = Logger.logObject.getter(v9);
  v11 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v10, v11))
  {
    v12 = swift_slowAlloc(12, -1);
    v19[1] = a1;
    v13 = (uint8_t *)v12;
    v14 = swift_slowAlloc(32, -1);
    v21 = v14;
    *(_DWORD *)v13 = 136446210;
    v15 = _typeName(_:qualified:)(a2, 0);
    v17 = v16;
    v20 = sub_100012B20(v15, v16, &v21);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v20, &v21, v13 + 4, v13 + 12);
    swift_bridgeObjectRelease(v17);
    _os_log_impl((void *)&_mh_execute_header, v10, v11, "[%{public}s] starting interactive generation listener", v13, 0xCu);
    swift_arrayDestroy(v14, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v14, -1, -1);
    swift_slowDealloc(v13, -1, -1);
  }

  (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
  v18 = sub_100008514();
  dispatch thunk of InteractiveGenerationListener.start()();

}

void sub_10000AC94()
{
  void *v0;
  void *v1;
  id v2;
  void *v3;
  NSString v4;
  id v5;
  Swift::String v6;
  Swift::String v7;
  Swift::String v8;
  void *v9;
  objc_super v10[2];
  objc_super v11;
  Swift::String v12;

  v1 = v0;

  v11.receiver = v0;
  v11.super_class = (Class)type metadata accessor for MainTabBarController(0);
  objc_msgSendSuper2(&v11, "viewDidLoad");
  v2 = objc_msgSend(v0, "view");
  if (v2)
  {
    v3 = v2;
    v4 = String._bridgeToObjectiveC()();
    objc_msgSend(v3, "setAccessibilityIdentifier:", v4);

    v5 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
    v12._countAndFlagsBits = 0xD00000000000001ELL;
    v12._object = (void *)0x80000001000B94E0;
    v6._countAndFlagsBits = 0x686372616553;
    v6._object = (void *)0xE600000000000000;
    v7._countAndFlagsBits = 0;
    v7._object = (void *)0xE000000000000000;
    v8 = NSLocalizedString(_:tableName:bundle:value:comment:)(v6, (Swift::String_optional)0, (NSBundle)v5, v7, v12);

    sub_100006D10(0, &qword_1000EDA28, UIKeyCommand_ptr);
    memset(v10, 0, sizeof(v10));
    v9 = (void *)UIKeyCommand.init(title:image:action:input:modifierFlags:propertyList:alternates:discoverabilityTitle:attributes:state:)(v8._countAndFlagsBits, v8._object, 0, "showAndActivateSearchBar", 102, 0xE100000000000000, 0x100000, v10, _swiftEmptyArrayStorage, 0, 0, 0, 0);
    objc_msgSend(v1, "addKeyCommand:", v9);

  }
  else
  {
    __break(1u);
  }
}

uint64_t sub_10000AE3C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  v2 = enum case for Presentation.summaryFeed(_:);
  v3 = type metadata accessor for Presentation(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 104))(a1, v2, v3);
}

id sub_10000AE80()
{
  char *v0;
  char *v1;
  uint64_t v2;
  uint64_t v3;
  id v4;
  char *v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  id v13;
  uint64_t v14;
  id v15;
  Class isa;
  objc_super v18;

  *(_QWORD *)&v0[OBJC_IVAR____TtC6Health20MainTabBarController____lazy_storage___providedHealthToolbox] = 0;
  v1 = &v0[OBJC_IVAR____TtC6Health20MainTabBarController_providedPresentation];
  v2 = enum case for Presentation.summaryFeed(_:);
  v3 = type metadata accessor for Presentation(0);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 104))(v1, v2, v3);
  v4 = objc_allocWithZone((Class)HKHealthStore);
  v5 = v0;
  v6 = objc_msgSend(v4, "init");
  v7 = OBJC_IVAR____TtC6Health20MainTabBarController_providedHealthStore;
  *(_QWORD *)&v5[OBJC_IVAR____TtC6Health20MainTabBarController_providedHealthStore] = v6;
  if (qword_1000EC140 != -1)
    swift_once(&qword_1000EC140, sub_100014684);
  v8 = sub_10008A080();
  v9 = (uint64_t *)&v5[OBJC_IVAR____TtC6Health20MainTabBarController_providedHealthExperienceStore];
  v9[3] = type metadata accessor for DiskHealthExperienceStore(0);
  v9[4] = (uint64_t)&protocol witness table for DiskHealthExperienceStore;
  *v9 = v8;
  v10 = type metadata accessor for PinnedContentManager(0);
  v11 = PinnedContentManager.__allocating_init(healthStore:domain:)(*(id *)&v5[v7]);
  v12 = (uint64_t *)&v5[OBJC_IVAR____TtC6Health20MainTabBarController_pinnedContentManager];
  v12[3] = v10;
  v12[4] = (uint64_t)&protocol witness table for PinnedContentManager;
  *v12 = v11;

  v18.receiver = v5;
  v18.super_class = (Class)type metadata accessor for MainTabBarController(0);
  v13 = objc_msgSendSuper2(&v18, "initWithNibName:bundle:", 0, 0);
  v14 = sub_10000EAAC();
  sub_100006D10(0, (unint64_t *)&qword_1000F0B50, UIViewController_ptr);
  v15 = v13;
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v14);
  objc_msgSend(v15, "setViewControllers:", isa);

  return v15;
}

void sub_10000B048(void *a1)
{
  id v1;

  v1 = a1;
  sub_1000131D8();

}

uint64_t sub_10000B07C()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint8_t *v19;
  NSObject *v20;
  os_signpost_id_t v21;
  void *v22;
  os_signpost_id_t v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v0 = type metadata accessor for OSSignpostID(0);
  v27 = *(_QWORD *)(v0 - 8);
  v28 = v0;
  __chkstk_darwin();
  v2 = (char *)&v25 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = type metadata accessor for LogCategory(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin();
  v6 = (char *)&v25 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = type metadata accessor for OSSignposter(0);
  v7 = *(_QWORD *)(v26 - 8);
  v8 = __chkstk_darwin();
  v10 = (char *)&v25 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = static Logger.healthSubsystem.getter(v8);
  v13 = v12;
  v14 = (*(uint64_t (**)(char *, _QWORD, uint64_t))(v4 + 104))(v6, enum case for LogCategory.general(_:), v3);
  v15 = LogCategory.rawValue.getter(v14);
  v17 = v16;
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  v18 = OSSignposter.init(subsystem:category:)(v11, v13, v15, v17);
  static OSSignpostID.exclusive.getter(v18);
  v19 = (uint8_t *)swift_slowAlloc(2, -1);
  *(_WORD *)v19 = 0;
  v20 = OSSignposter.logHandle.getter();
  LOBYTE(v17) = static os_signpost_type_t.begin.getter();
  v21 = OSSignpostID.rawValue.getter();
  _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v20, (os_signpost_type_t)v17, v21, "sceneWillEnterForeground_HKCountryMonitorControl", "", v19, 2u);
  v22 = (void *)objc_opt_self(HKCountryMonitorControl);
  LOBYTE(v4) = static os_signpost_type_t.end.getter(objc_msgSend(v22, "checkCurrentCountryWithHealthStore:", *(_QWORD *)(v25 + 16)));
  v23 = OSSignpostID.rawValue.getter();
  _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v20, (os_signpost_type_t)v4, v23, "sceneWillEnterForeground_HKCountryMonitorControl", "", v19, 2u);

  swift_slowDealloc(v19, -1, -1);
  (*(void (**)(char *, uint64_t))(v27 + 8))(v2, v28);
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v10, v26);
}

uint64_t sub_10000B2BC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  NSObject *v21;
  os_log_type_t v22;
  uint8_t *v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  void (*v28)(char *, uint64_t);
  uint64_t v29;
  NSObject *v30;
  os_log_type_t v31;
  uint8_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  NSObject *v42;
  os_log_type_t v43;
  uint8_t *v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;

  v4 = type metadata accessor for Logger(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = __chkstk_darwin(v4);
  v8 = (char *)&v49 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __chkstk_darwin(v6);
  v11 = (char *)&v49 - v10;
  __chkstk_darwin(v9);
  v13 = (char *)&v49 - v12;
  sub_10008A3A0();
  v15 = v14;
  v16 = *(_QWORD *)(v14 - 8);
  __chkstk_darwin(v14);
  v18 = (char *)&v49 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v16 + 16))(v18, a1 + OBJC_IVAR____TtC6Health16LifecycleManager__preloadPluginsAfterLaunch, v15);
  UserDefault.wrappedValue.getter(v15);
  v19 = (*(uint64_t (**)(char *, uint64_t))(v16 + 8))(v18, v15);
  if (v52 == 1)
  {
    v50 = a2;
    v20 = static Logger.general.getter(v19);
    v21 = Logger.logObject.getter(v20);
    v22 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v21, v22))
    {
      v23 = (uint8_t *)swift_slowAlloc(12, -1);
      v24 = swift_slowAlloc(32, -1);
      v52 = v24;
      v49 = v5;
      *(_DWORD *)v23 = 136446210;
      v25 = _typeName(_:qualified:)(v50, 0);
      v27 = v26;
      v51 = sub_100012B20(v25, v26, &v52);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v51, &v52, v23 + 4, v23 + 12);
      swift_bridgeObjectRelease(v27);
      _os_log_impl((void *)&_mh_execute_header, v21, v22, "[%{public}s] Preloading plugins in a background thread asynchronously", v23, 0xCu);
      swift_arrayDestroy(v24, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v24, -1, -1);
      swift_slowDealloc(v23, -1, -1);

      v28 = *(void (**)(char *, uint64_t))(v49 + 8);
    }
    else
    {

      v28 = *(void (**)(char *, uint64_t))(v5 + 8);
    }
    v28(v13, v4);
    type metadata accessor for FoundationPluginBundleProvider(0);
    v39 = static FoundationPluginBundleProvider.sharedInstance.getter();
    dispatch thunk of PluginBundleProvider.loadAllPlugins()();
    v40 = swift_release(v39);
    v41 = static Logger.general.getter(v40);
    v42 = Logger.logObject.getter(v41);
    v43 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v42, v43))
    {
      v44 = (uint8_t *)swift_slowAlloc(12, -1);
      v45 = swift_slowAlloc(32, -1);
      v52 = v45;
      *(_DWORD *)v44 = 136446210;
      v46 = _typeName(_:qualified:)(v50, 0);
      v48 = v47;
      v51 = sub_100012B20(v46, v47, &v52);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v51, &v52, v44 + 4, v44 + 12);
      swift_bridgeObjectRelease(v48);
      _os_log_impl((void *)&_mh_execute_header, v42, v43, "[%{public}s] Finished preloading plugins", v44, 0xCu);
      swift_arrayDestroy(v45, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v45, -1, -1);
      swift_slowDealloc(v44, -1, -1);
    }

    return ((uint64_t (*)(char *, uint64_t))v28)(v11, v4);
  }
  else
  {
    v29 = static Logger.general.getter(v19);
    v30 = Logger.logObject.getter(v29);
    v31 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v30, v31))
    {
      v32 = (uint8_t *)swift_slowAlloc(12, -1);
      v33 = swift_slowAlloc(32, -1);
      v52 = v33;
      *(_DWORD *)v32 = 136446210;
      v34 = _typeName(_:qualified:)(a2, 0);
      v35 = v5;
      v37 = v36;
      v51 = sub_100012B20(v34, v36, &v52);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v51, &v52, v32 + 4, v32 + 12);
      swift_bridgeObjectRelease(v37);
      _os_log_impl((void *)&_mh_execute_header, v30, v31, "[%{public}s] Skipping preload plugins after app launch", v32, 0xCu);
      swift_arrayDestroy(v33, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v33, -1, -1);
      swift_slowDealloc(v32, -1, -1);

      return (*(uint64_t (**)(char *, uint64_t))(v35 + 8))(v8, v4);
    }
    else
    {

      return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v8, v4);
    }
  }
}

void sub_10000B81C()
{
  void *v0;
  void *v1;
  uint64_t v2;
  void (*v3)(void);
  id v4;
  void *v5;
  uint64_t v6;
  id v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  id v11;

  v1 = v0;
  v2 = type metadata accessor for CompoundDataSourceCollectionViewController(0);
  v3 = (void (*)(void))method lookup function for CompoundDataSourceCollectionViewController(v2, &method descriptor for CompoundDataSourceCollectionViewController.registerReusableCollectionViewTypes());
  v3();
  v4 = objc_msgSend(v0, "collectionView");
  if (!v4)
  {
    __break(1u);
    goto LABEL_6;
  }
  v5 = v4;
  v6 = type metadata accessor for HostViewCell(0);
  UICollectionView.registerCell<A>(_:)(v6, v6, &protocol witness table for HostViewCell);

  v7 = objc_msgSend(v1, "collectionView");
  if (!v7)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  v8 = v7;
  v9 = type metadata accessor for EmptyStateCollectionViewCell(0);
  UICollectionView.registerCell<A>(_:)(v9, v9, &protocol witness table for EmptyStateCollectionViewCell);

  v11 = objc_msgSend(v1, "collectionView");
  if (v11)
  {
    v10 = type metadata accessor for TitleEmptyStateCollectionViewCell(0);
    UICollectionView.registerCell<A>(_:)(v10, v10, &protocol witness table for ContentConfigurationCollectionViewListCell);

    return;
  }
LABEL_7:
  __break(1u);
}

void PersonalizedFeedDataSource.supplementaryItem(ofKind:at:)(uint64_t a1@<X2>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  id v18;
  id v19;
  id v20;
  id v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *v25;
  os_log_type_t v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  id v30;
  id v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  double v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  Swift::String v47;
  uint64_t v48;
  Swift::String v49;
  void *object;
  _BYTE v51[4];
  int v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  id v56;
  uint64_t v57;
  unint64_t v58;

  v4 = type metadata accessor for IndexPath(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = &v51[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v8 = type metadata accessor for Logger(0);
  v55 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v10 = &v51[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v11 = type metadata accessor for UIListContentConfiguration(0);
  __chkstk_darwin(v11);
  v13 = &v51[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v14 = type metadata accessor for PersonalizedFeedDataSource(0);
  v15 = sub_100013198(&qword_1000EE158, type metadata accessor for PersonalizedFeedDataSource, (uint64_t)&protocol conformance descriptor for FetchedResultsControllerDataSource<A>);
  SnapshotDataSource.item(at:)(&v57, a1, v14, v15);
  v16 = sub_100013434();
  v17 = type metadata accessor for FeedItem(0);
  if (swift_dynamicCast(&v56, &v57, v16, v17, 6))
  {
    v18 = v56;
    v19 = objc_msgSend(v56, "feedSection");
    if (v19)
    {
      v20 = v19;
      v21 = objc_msgSend(v19, "identifier");
      v22 = static String._unconditionallyBridgeFromObjectiveC(_:)(v21);
      v24 = v23;

      if (ForYouSectionKind.init(rawValue:)(v22, v24) != 4)
      {
        v43 = ForYouSectionKind.localizedTitle.getter();
        v45 = v44;
        static UIListContentConfiguration.extraProminentInsetGroupedHeader()(v43);
        v46 = type metadata accessor for HeaderItem(0);
        swift_allocObject(v46, *(unsigned int *)(v46 + 48), *(unsigned __int16 *)(v46 + 52));
        v42 = HeaderItem.init(title:buttonText:buttonWasTapped:configuration:automationIdentifier:)(v43, v45, 0, 0, 0, 0, v13, 0, 0);
        a2[3] = v46;
        a2[4] = sub_100013198((unint64_t *)&unk_1000ED940, (uint64_t (*)(uint64_t))&type metadata accessor for HeaderItem, (uint64_t)&protocol conformance descriptor for HeaderItem);

LABEL_10:
        *a2 = v42;
        return;
      }

    }
    static Logger.view.getter(v19);
    v20 = v18;
    v25 = Logger.logObject.getter(v20);
    v26 = static os_log_type_t.error.getter();
    v27 = v26;
    if (os_log_type_enabled(v25, v26))
    {
      v28 = swift_slowAlloc(22, -1);
      v52 = v27;
      v29 = v28;
      v53 = swift_slowAlloc(64, -1);
      v57 = v53;
      *(_DWORD *)v29 = 136315394;
      v30 = objc_msgSend(v20, "uniqueIdentifier");
      v54 = v8;
      v31 = v30;
      v32 = static String._unconditionallyBridgeFromObjectiveC(_:)(v30);
      v34 = v33;

      v56 = (id)sub_100012B20(v32, v34, &v57);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v56, &v57, v29 + 4, v29 + 12);

      *(_QWORD *)&v35 = swift_bridgeObjectRelease(v34).n128_u64[0];
      *(_WORD *)(v29 + 12) = 2080;
      v56 = objc_msgSend(v20, "feedSection", v35);
      sub_10000E944(0, &qword_1000EE748, (uint64_t (*)(uint64_t))&type metadata accessor for FeedSection);
      v37 = String.init<A>(describing:)(&v56, v36);
      v39 = v38;
      v56 = (id)sub_100012B20(v37, v38, &v57);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v56, &v57, v29 + 14, v29 + 22);

      swift_bridgeObjectRelease(v39);
      _os_log_impl((void *)&_mh_execute_header, v25, (os_log_type_t)v52, "Could not resolve feedSection from feedItem %s: %s. It should be deleted during the next picking operation", (uint8_t *)v29, 0x16u);
      v40 = v53;
      swift_arrayDestroy(v53, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v40, -1, -1);
      swift_slowDealloc(v29, -1, -1);

      (*(void (**)(_BYTE *, uint64_t))(v55 + 8))(v10, v54);
    }
    else
    {

      (*(void (**)(_BYTE *, uint64_t))(v55 + 8))(v10, v8);
    }
    v41 = type metadata accessor for HeaderItem(0);
    static UIListContentConfiguration.extraProminentInsetGroupedHeader()(v41);
    v42 = HeaderItem.__allocating_init(hkType:title:showShowAll:configuration:automationIdentifier:)(0, 0x6E776F6E6B6E55, 0xE700000000000000, 0, v13, 0, 0);
    a2[3] = v41;
    a2[4] = sub_100013198((unint64_t *)&unk_1000ED940, (uint64_t (*)(uint64_t))&type metadata accessor for HeaderItem, (uint64_t)&protocol conformance descriptor for HeaderItem);
    goto LABEL_10;
  }
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v5 + 16))(v7, a1, v4);
  v57 = 0;
  v58 = 0xE000000000000000;
  _StringGuts.grow(_:)(59);
  v47._object = (void *)0x80000001000BB460;
  v47._countAndFlagsBits = 0xD000000000000039;
  String.append(_:)(v47);
  v48 = sub_100013198(&qword_1000EE740, (uint64_t (*)(uint64_t))&type metadata accessor for IndexPath, (uint64_t)&protocol conformance descriptor for IndexPath);
  v49._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v4, v48);
  object = v49._object;
  String.append(_:)(v49);
  swift_bridgeObjectRelease(object);
  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, v57, v58, "Health/PersonalizedFeedDataSource.swift", 39, 2, 69, 0);
  __break(1u);
}

uint64_t sub_10000BECC()
{
  uint64_t v0;
  uint64_t ObjectType;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t MetatypeMetadata;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  ObjectType = swift_getObjectType(v0);
  v2 = type metadata accessor for Logger(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = __chkstk_darwin(v2);
  v6 = (char *)&v17 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = static Logger.general.getter(v4);
  v8 = Logger.logObject.getter(v7);
  v9 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v8, v9))
  {
    v10 = swift_slowAlloc(22, -1);
    v11 = swift_slowAlloc(64, -1);
    v17 = v11;
    v18 = ObjectType;
    *(_DWORD *)v10 = 136446466;
    MetatypeMetadata = swift_getMetatypeMetadata(ObjectType);
    v13 = String.init<A>(describing:)(&v18, MetatypeMetadata);
    v15 = v14;
    v18 = sub_100012B20(v13, v14, &v17);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v18, &v19, v10 + 4, v10 + 12);
    swift_bridgeObjectRelease(v15);
    *(_WORD *)(v10 + 12) = 2082;
    v18 = sub_100012B20(0xD00000000000001CLL, 0x80000001000BC4F0, &v17);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v18, &v19, v10 + 14, v10 + 22);
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "[%{public}s]: Lifecycle: %{public}s", (uint8_t *)v10, 0x16u);
    swift_arrayDestroy(v11, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v11, -1, -1);
    swift_slowDealloc(v10, -1, -1);
  }

  (*(void (**)(char *, uint64_t))(v3 + 8))(v6, v2);
  if (qword_1000EC140 != -1)
    swift_once(&qword_1000EC140, sub_100014684);
  return sub_10000B07C();
}

uint64_t sub_10000C0DC()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  id v9;
  NSString v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint8_t *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v22;
  NSObject *v23;
  os_log_type_t v24;
  uint8_t *v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v1 = *v0;
  v2 = type metadata accessor for Logger(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = __chkstk_darwin(v2);
  v6 = (char *)&v30 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v8 = (char *)&v30 - v7;
  v9 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "standardUserDefaults");
  v10 = String._bridgeToObjectiveC()();
  v11 = objc_msgSend(v9, "BOOLForKey:", v10);

  if (v11)
  {
    v13 = static Logger.general.getter(v12);
    v14 = Logger.logObject.getter(v13);
    v15 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v14, v15))
    {
      v16 = (uint8_t *)swift_slowAlloc(12, -1);
      v17 = swift_slowAlloc(32, -1);
      v31 = v17;
      *(_DWORD *)v16 = 136446210;
      v18 = _typeName(_:qualified:)(v1, 0);
      v20 = v19;
      v30 = sub_100012B20(v18, v19, &v31);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v30, &v31, v16 + 4, v16 + 12);
      swift_bridgeObjectRelease(v20);
      _os_log_impl((void *)&_mh_execute_header, v14, v15, "[%{public}s] FeedItemFetchRequestNoFaults ENABLED", v16, 0xCu);
      swift_arrayDestroy(v17, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v17, -1, -1);
      swift_slowDealloc(v16, -1, -1);
    }

    return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v8, v2);
  }
  else
  {
    v22 = static Logger.general.getter(v12);
    v23 = Logger.logObject.getter(v22);
    v24 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v23, v24))
    {
      v25 = (uint8_t *)swift_slowAlloc(12, -1);
      v26 = swift_slowAlloc(32, -1);
      v31 = v26;
      *(_DWORD *)v25 = 136446210;
      v27 = _typeName(_:qualified:)(v1, 0);
      v29 = v28;
      v30 = sub_100012B20(v27, v28, &v31);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v30, &v31, v25 + 4, v25 + 12);
      swift_bridgeObjectRelease(v29);
      _os_log_impl((void *)&_mh_execute_header, v23, v24, "[%{public}s] FeedItemFetchRequestNoFaults DISABLED", v25, 0xCu);
      swift_arrayDestroy(v26, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v26, -1, -1);
      swift_slowDealloc(v25, -1, -1);
    }

    return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v6, v2);
  }
}

uint64_t sub_10000C3FC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  id v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  double v21;
  void (*v22)(char *, uint64_t);
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  char v38[24];
  char v39[24];

  sub_10004AF8C();
  v2 = v1;
  v3 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  v35 = (char *)&v32 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10004AFE0(0);
  v6 = v5;
  v7 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v9 = (char *)&v32 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for Date(0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = __chkstk_darwin(v10);
  v14 = (char *)&v32 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v16 = (char *)&v32 - v15;
  v17 = objc_msgSend((id)objc_opt_self(_HKBehavior), "isRunningStoreDemoMode");
  if ((v17 & 1) != 0)
    goto LABEL_2;
  Date.init()(v17);
  v33 = v3;
  v34 = v2;
  v19 = v0;
  v20 = v0 + OBJC_IVAR____TtC6Health23IntroFlowThrottledCheck__lastCheckDate;
  swift_beginAccess(v0 + OBJC_IVAR____TtC6Health23IntroFlowThrottledCheck__lastCheckDate, v39, 0, 0);
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, v20, v6);
  UserDefault.wrappedValue.getter(v6);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  v21 = Date.timeIntervalSince(_:)(v14);
  v22 = *(void (**)(char *, uint64_t))(v11 + 8);
  v22(v14, v10);
  v22(v16, v10);
  v23 = v0 + OBJC_IVAR____TtC6Health23IntroFlowThrottledCheck__lastCheckVersion;
  swift_beginAccess(v23, v38, 0, 0);
  v25 = v33;
  v24 = v34;
  v26 = v35;
  (*(void (**)(char *, uint64_t, uint64_t))(v33 + 16))(v35, v23, v34);
  UserDefault.wrappedValue.getter(v24);
  (*(void (**)(char *, uint64_t))(v25 + 8))(v26, v24);
  v27 = v37;
  v28 = *(_QWORD *)(v19 + 16);
  v29 = *(_QWORD *)(v19 + 24);
  if (v36 != v28 || v37 != v29)
  {
    v30 = _stringCompareWithSmolCheck(_:_:expecting:)(v36, v37, v28, v29, 0);
    swift_bridgeObjectRelease(v27);
    if (v21 <= 86400.0)
    {
      v18 = v30 ^ 1;
      return v18 & 1;
    }
    goto LABEL_8;
  }
  swift_bridgeObjectRelease(v37);
  if (v21 > 86400.0)
  {
LABEL_8:
    v18 = 1;
    return v18 & 1;
  }
LABEL_2:
  v18 = 0;
  return v18 & 1;
}

uint64_t sub_10000C690(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  objc_class *v14;
  id v15;
  id v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  id v21;
  id v22;
  uint64_t v23;
  unint64_t v24;
  void (*v25)(char *, uint64_t);
  _OWORD v27[2];
  uint64_t v28;

  v2 = v1;
  sub_1000076D8(0, &qword_1000EC198, (uint64_t (*)(uint64_t))&type metadata accessor for CloudSyncRestoreState, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for LegacyObservable);
  v5 = v4;
  v6 = *(_QWORD *)(v4 - 8);
  v7 = __chkstk_darwin(v4);
  v9 = (char *)v27 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v11 = (char *)v27 - v10;
  v12 = v2 + OBJC_IVAR____TtC6Health23CloudSyncStartupManager_lastKnownFirstRestoreState;
  v13 = type metadata accessor for CloudSyncRestoreState(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 56))(v12, 1, 1, v13);
  *(_QWORD *)(v2 + OBJC_IVAR____TtC6Health23CloudSyncStartupManager_notificationCenterObserver) = 0;
  v14 = (objc_class *)type metadata accessor for CloudSyncStateObserver(0);
  memset(v27, 0, sizeof(v27));
  v28 = 0;
  v15 = objc_allocWithZone(v14);
  v16 = a1;
  *(_QWORD *)(v2 + 16) = CloudSyncStateObserver.init(healthStore:store:)();
  v17 = objc_msgSend(objc_allocWithZone((Class)HKCloudSyncControl), "initWithHealthStore:", v16);
  *(_QWORD *)(v2 + OBJC_IVAR____TtC6Health23CloudSyncStartupManager_cloudSyncControl) = v17;
  v18 = static LegacyObservable.create()(v11, v13);
  v20 = v19;
  (*(void (**)(uint64_t, char *, uint64_t))(v6 + 16))(v2 + OBJC_IVAR____TtC6Health23CloudSyncStartupManager_observable, v11, v5);
  v21 = *(id *)(v2 + 16);
  swift_retain(v20);
  dispatch thunk of CloudSyncStateObserver.firstRestoreStateChangeHandler.setter(v18, v20);

  v22 = objc_msgSend((id)objc_opt_self(NSOperationQueue), "mainQueue");
  v23 = swift_allocObject(&unk_1000DCCD0, 24, 7);
  swift_weakInit(v23 + 16, v2);
  v24 = sub_100014B78();
  ObservableConvertible.afterChange(on:_:)(v22, sub_100013830, v23, v5, v24);
  swift_release(v20);

  swift_release(v23);
  v25 = *(void (**)(char *, uint64_t))(v6 + 8);
  v25(v9, v5);
  v25(v11, v5);
  return v2;
}

void sub_10000C8E4(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v6[5];

  v6[0] = (char *)&value witness table for Builtin.UnknownObject + 64;
  sub_1000076D8(319, &qword_1000EC198, (uint64_t (*)(uint64_t))&type metadata accessor for CloudSyncRestoreState, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for LegacyObservable);
  if (v3 <= 0x3F)
  {
    v6[1] = *(_QWORD *)(v2 - 8) + 64;
    sub_1000076D8(319, (unint64_t *)&qword_1000EF4B0, (uint64_t (*)(uint64_t))&type metadata accessor for CloudSyncRestoreState, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
    if (v5 <= 0x3F)
    {
      v6[2] = *(_QWORD *)(v4 - 8) + 64;
      v6[3] = (char *)&value witness table for Builtin.UnknownObject + 64;
      v6[4] = "\b";
      swift_updateClassMetadata2(a1, 256, 5, v6, a1 + 80);
    }
  }
}

uint64_t sub_10000C9B8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int (*v23)(uint64_t, uint64_t, uint64_t);
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  NSObject *v28;
  os_log_type_t v29;
  uint8_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v37;
  char v38;
  void (*v39)(char *, uint64_t);
  char *v40;
  uint64_t v41;
  NSObject *v42;
  os_log_type_t v43;
  uint8_t *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char v55[24];

  v1 = type metadata accessor for Logger(0);
  v51 = *(_QWORD *)(v1 - 8);
  v52 = v1;
  v2 = __chkstk_darwin(v1);
  v49 = (char *)&v46 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v2);
  v48 = (char *)&v46 - v4;
  v5 = type metadata accessor for CloudSyncRestoreState(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v46 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100014A84(0);
  v10 = v9;
  __chkstk_darwin(v9);
  v12 = (char *)&v46 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000076D8(0, (unint64_t *)&qword_1000EF4B0, (uint64_t (*)(uint64_t))&type metadata accessor for CloudSyncRestoreState, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
  v47 = v13;
  v14 = __chkstk_darwin(v13);
  v46 = (uint64_t)&v46 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = __chkstk_darwin(v14);
  v18 = (char *)&v46 - v17;
  __chkstk_darwin(v16);
  v20 = (char *)&v46 - v19;
  v50 = v0;
  v21 = v0 + OBJC_IVAR____TtC6Health23CloudSyncStartupManager_lastKnownFirstRestoreState;
  swift_beginAccess(v0 + OBJC_IVAR____TtC6Health23CloudSyncStartupManager_lastKnownFirstRestoreState, v55, 0, 0);
  (*(void (**)(char *, _QWORD, uint64_t))(v6 + 104))(v20, enum case for CloudSyncRestoreState.failed(_:), v5);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v6 + 56))(v20, 0, 1, v5);
  v22 = (uint64_t)&v12[*(int *)(v10 + 48)];
  sub_10000CF14(v21, (uint64_t)v12);
  sub_10000CF14((uint64_t)v20, v22);
  v23 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48);
  if (v23((uint64_t)v12, 1, v5) != 1)
  {
    sub_10000CF14((uint64_t)v12, (uint64_t)v18);
    if (v23(v22, 1, v5) != 1)
    {
      (*(void (**)(char *, uint64_t, uint64_t))(v6 + 32))(v8, v22, v5);
      v37 = sub_100007690();
      v38 = dispatch thunk of static Equatable.== infix(_:_:)(v18, v8, v5, v37);
      v39 = *(void (**)(char *, uint64_t))(v6 + 8);
      v39(v8, v5);
      sub_10000CEC0((uint64_t)v20);
      v39(v18, v5);
      v24 = sub_10000CEC0((uint64_t)v12);
      v25 = v50;
      if ((v38 & 1) != 0)
        goto LABEL_12;
LABEL_7:
      v26 = v49;
      static Logger.cloudSync.getter(v24);
      v27 = swift_retain_n(v25, 2);
      v28 = Logger.logObject.getter(v27);
      v29 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v28, v29))
      {
        v30 = (uint8_t *)swift_slowAlloc(12, -1);
        v31 = swift_slowAlloc(32, -1);
        v54 = v31;
        *(_DWORD *)v30 = 136446210;
        v32 = v46;
        sub_10000CF14(v21, v46);
        v33 = String.init<A>(describing:)(v32, v47);
        v35 = v34;
        v53 = sub_100012B20(v33, v34, &v54);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v53, &v54, v30 + 4, v30 + 12);
        swift_release_n(v25, 2);
        swift_bridgeObjectRelease(v35);
        _os_log_impl((void *)&_mh_execute_header, v28, v29, "Skipping start first restore since last known first restore state did not fail: %{public}s", v30, 0xCu);
        swift_arrayDestroy(v31, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v31, -1, -1);
        swift_slowDealloc(v30, -1, -1);

        return (*(uint64_t (**)(char *, uint64_t))(v51 + 8))(v49, v52);
      }
      else
      {

        swift_release_n(v25, 2);
        return (*(uint64_t (**)(char *, uint64_t))(v51 + 8))(v26, v52);
      }
    }
    sub_10000CEC0((uint64_t)v20);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v18, v5);
LABEL_6:
    v24 = sub_1000168A0((uint64_t)v12);
    v25 = v50;
    goto LABEL_7;
  }
  sub_10000CEC0((uint64_t)v20);
  if (v23(v22, 1, v5) != 1)
    goto LABEL_6;
  v24 = sub_10000CEC0((uint64_t)v12);
LABEL_12:
  v40 = v48;
  v41 = static Logger.cloudSync.getter(v24);
  v42 = Logger.logObject.getter(v41);
  v43 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v42, v43))
  {
    v44 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v44 = 0;
    _os_log_impl((void *)&_mh_execute_header, v42, v43, "Starting first restore since last first restore has failed", v44, 2u);
    swift_slowDealloc(v44, -1, -1);
  }

  v45 = (*(uint64_t (**)(char *, uint64_t))(v51 + 8))(v40, v52);
  return dispatch thunk of CloudSyncStateObserver.startFirstRestoreIfNeeded()(v45);
}

uint64_t sub_10000CEC0(uint64_t a1)
{
  uint64_t v2;

  sub_1000076D8(0, (unint64_t *)&qword_1000EF4B0, (uint64_t (*)(uint64_t))&type metadata accessor for CloudSyncRestoreState, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_10000CF14(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_1000076D8(0, (unint64_t *)&qword_1000EF4B0, (uint64_t (*)(uint64_t))&type metadata accessor for CloudSyncRestoreState, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10000CF70(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_1000076D8(0, (unint64_t *)&qword_1000EF4B0, (uint64_t (*)(uint64_t))&type metadata accessor for CloudSyncRestoreState, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t sub_10000CFCC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE v15[24];
  _BYTE v16[24];

  sub_1000076D8(0, (unint64_t *)&qword_1000EF4B0, (uint64_t (*)(uint64_t))&type metadata accessor for CloudSyncRestoreState, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
  v5 = __chkstk_darwin(v4);
  v7 = &v15[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v5);
  v9 = &v15[-v8];
  a2 += 16;
  swift_beginAccess(a2, v16, 0, 0);
  result = swift_weakLoadStrong(a2);
  if (result)
  {
    v11 = result;
    v12 = type metadata accessor for CloudSyncRestoreState(0);
    v13 = *(_QWORD *)(v12 - 8);
    (*(void (**)(_BYTE *, uint64_t, uint64_t))(v13 + 16))(v9, a1, v12);
    (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v9, 0, 1, v12);
    sub_10000D118((uint64_t)v9, (uint64_t)v7);
    v14 = v11 + OBJC_IVAR____TtC6Health23CloudSyncStartupManager_lastKnownFirstRestoreState;
    swift_beginAccess(v11 + OBJC_IVAR____TtC6Health23CloudSyncStartupManager_lastKnownFirstRestoreState, v15, 33, 0);
    sub_10000CF70((uint64_t)v7, v14);
    swift_endAccess(v15);
    return swift_release(v11);
  }
  return result;
}

uint64_t sub_10000D118(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_1000076D8(0, (unint64_t *)&qword_1000EF4B0, (uint64_t (*)(uint64_t))&type metadata accessor for CloudSyncRestoreState, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_10000D174()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint64_t v16;
  uint8_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t aBlock[5];
  uint64_t v50;

  v1 = v0;
  v2 = *v0;
  v3 = type metadata accessor for DispatchWorkItemFlags(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v47 = (char *)&v39 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for DispatchQoS(0);
  v45 = *(_QWORD *)(v6 - 8);
  v46 = v6;
  __chkstk_darwin(v6);
  v44 = (char *)&v39 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for Logger(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = __chkstk_darwin(v8);
  v12 = (char *)&v39 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = static Logger.general.getter(v10);
  v14 = Logger.logObject.getter(v13);
  v15 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v14, v15))
  {
    v41 = v8;
    v16 = swift_slowAlloc(12, -1);
    v40 = v9;
    v17 = (uint8_t *)v16;
    v18 = swift_slowAlloc(32, -1);
    v43 = v3;
    v19 = v18;
    aBlock[0] = v18;
    v42 = v4;
    *(_DWORD *)v17 = 136446210;
    v20 = _typeName(_:qualified:)(v2, 0);
    v21 = v2;
    v22 = v1;
    v24 = v23;
    v48 = sub_100012B20(v20, v23, aBlock);
    v4 = v42;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v48, aBlock, v17 + 4, v17 + 12);
    v25 = v24;
    v1 = v22;
    v2 = v21;
    swift_bridgeObjectRelease(v25);
    _os_log_impl((void *)&_mh_execute_header, v14, v15, "[%{public}s] enqueuing interactive generation", v17, 0xCu);
    swift_arrayDestroy(v19, 1, (char *)&type metadata for Any + 8);
    v26 = v19;
    v3 = v43;
    swift_slowDealloc(v26, -1, -1);
    swift_slowDealloc(v17, -1, -1);

    (*(void (**)(char *, uint64_t))(v40 + 8))(v12, v41);
  }
  else
  {

    (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v8);
  }
  sub_100006D10(0, (unint64_t *)&qword_1000ED910, OS_dispatch_queue_ptr);
  v27 = (void *)static OS_dispatch_queue.main.getter();
  v28 = swift_allocObject(&unk_1000E1BA8, 32, 7);
  *(_QWORD *)(v28 + 16) = v1;
  *(_QWORD *)(v28 + 24) = v2;
  aBlock[4] = (uint64_t)sub_1000146C8;
  v50 = v28;
  aBlock[0] = (uint64_t)_NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = (uint64_t)sub_100006988;
  aBlock[3] = (uint64_t)&unk_1000E1BC0;
  v29 = _Block_copy(aBlock);
  v30 = v50;
  swift_retain(v1);
  v31 = swift_release(v30);
  v32 = v44;
  static DispatchQoS.unspecified.getter(v31);
  aBlock[0] = (uint64_t)_swiftEmptyArrayStorage;
  v33 = sub_100013198((unint64_t *)&qword_1000EDBE0, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  sub_10000F2DC(0, (unint64_t *)&qword_1000ED920, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  v35 = v34;
  v36 = sub_10008A418((unint64_t *)&qword_1000EDBF0, (unint64_t *)&qword_1000ED920, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  v37 = v47;
  dispatch thunk of SetAlgebra.init<A>(_:)(aBlock, v35, v36, v3, v33);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v32, v37, v29);
  _Block_release(v29);

  (*(void (**)(char *, uint64_t))(v4 + 8))(v37, v3);
  return (*(uint64_t (**)(char *, uint64_t))(v45 + 8))(v32, v46);
}

uint64_t sub_10000D520(char a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  NSObject *v15;
  os_log_type_t v16;
  uint8_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v24;
  NSObject *v25;
  os_log_type_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t (*v38)(char *, uint64_t);
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;

  v6 = type metadata accessor for Logger(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = __chkstk_darwin(v6);
  v10 = (char *)&v40 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __chkstk_darwin(v8);
  v13 = (char *)&v40 - v12;
  if ((a1 & 1) != 0)
  {
    static Logger.cloudSync.getter(v11);
    v14 = swift_retain_n(a3, 2);
    v15 = Logger.logObject.getter(v14);
    v16 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v15, v16))
    {
      v17 = (uint8_t *)swift_slowAlloc(12, -1);
      v18 = swift_slowAlloc(32, -1);
      v42 = a3;
      v43 = v18;
      v41 = v6;
      *(_DWORD *)v17 = 136315138;
      v19 = type metadata accessor for CloudSyncStartupManager(0);
      swift_retain(a3);
      v20 = String.init<A>(describing:)(&v42, v19);
      v22 = v21;
      v42 = sub_100012B20(v20, v21, &v43);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v42, &v43, v17 + 4, v17 + 12);
      swift_release_n(a3, 2);
      swift_bridgeObjectRelease(v22);
      _os_log_impl((void *)&_mh_execute_header, v15, v16, "%s: Successfully requested lite sync pull, context sync and state sync.", v17, 0xCu);
      swift_arrayDestroy(v18, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v18, -1, -1);
      swift_slowDealloc(v17, -1, -1);

      return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v13, v41);
    }

    swift_release_n(a3, 2);
    v38 = *(uint64_t (**)(char *, uint64_t))(v7 + 8);
    v39 = v13;
  }
  else
  {
    static Logger.cloudSync.getter(v11);
    swift_retain(a3);
    swift_errorRetain(a2);
    swift_retain(a3);
    v24 = swift_errorRetain(a2);
    v25 = Logger.logObject.getter(v24);
    v26 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v25, v26))
    {
      v27 = swift_slowAlloc(22, -1);
      v28 = swift_slowAlloc(64, -1);
      v41 = v6;
      v42 = a3;
      v29 = v28;
      v43 = v28;
      *(_DWORD *)v27 = 136315394;
      v30 = type metadata accessor for CloudSyncStartupManager(0);
      swift_retain(a3);
      v31 = String.init<A>(describing:)(&v42, v30);
      v33 = v32;
      v42 = sub_100012B20(v31, v32, &v43);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v42, &v43, v27 + 4, v27 + 12);
      swift_release_n(a3, 2);
      swift_bridgeObjectRelease(v33);
      *(_WORD *)(v27 + 12) = 2080;
      v42 = a2;
      swift_errorRetain(a2);
      sub_1000076D8(0, (unint64_t *)&qword_1000EC718, (uint64_t (*)(uint64_t))sub_100013960, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
      v35 = String.init<A>(describing:)(&v42, v34);
      v37 = v36;
      v42 = sub_100012B20(v35, v36, &v43);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v42, &v43, v27 + 14, v27 + 22);
      swift_bridgeObjectRelease(v37);
      swift_errorRelease(a2);
      swift_errorRelease(a2);
      _os_log_impl((void *)&_mh_execute_header, v25, v26, "%s: Failed to request lite sync pull, context sync and state sync with error: %s.", (uint8_t *)v27, 0x16u);
      swift_arrayDestroy(v29, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v29, -1, -1);
      swift_slowDealloc(v27, -1, -1);

      return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v10, v41);
    }
    swift_release_n(a3, 2);
    swift_errorRelease(a2);
    swift_errorRelease(a2);

    v38 = *(uint64_t (**)(char *, uint64_t))(v7 + 8);
    v39 = v10;
  }
  return v38(v39, v6);
}

uint64_t sub_10000D924()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  void *v6;
  uint64_t v7;
  id v8;
  void *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint8_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26[5];

  v1 = *v0;
  v2 = type metadata accessor for Logger(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v23 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100006D10(0, (unint64_t *)&qword_1000EDA38, NSOperationQueue_ptr);
  v6 = (void *)static NSOperationQueue.utility.getter();
  v7 = sub_10008A080();
  v26[3] = type metadata accessor for DiskHealthExperienceStore(0);
  v26[4] = (uint64_t)&protocol witness table for DiskHealthExperienceStore;
  v26[0] = v7;
  v8 = objc_allocWithZone((Class)type metadata accessor for HealthExperienceStoreIncrementalCoreSpotlightOperation(0));
  v9 = (void *)HealthExperienceStoreIncrementalCoreSpotlightOperation.init(store:)(v26);
  objc_msgSend(v6, "addOperation:", v9);

  type metadata accessor for MedicalIDCache(0);
  v10 = (void *)static MedicalIDCache.primary.getter();
  dispatch thunk of MedicalIDCache.enqueueMedicalIDFetch()();

  v11 = sub_100008200();
  sub_10000E324();
  v12 = swift_release(v11);
  v13 = static Logger.general.getter(v12);
  v14 = Logger.logObject.getter(v13);
  v15 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v14, v15))
  {
    v16 = (uint8_t *)swift_slowAlloc(12, -1);
    v17 = swift_slowAlloc(32, -1);
    v24 = v2;
    v18 = v17;
    v26[0] = v17;
    *(_DWORD *)v16 = 136446210;
    v19 = _typeName(_:qualified:)(v1, 0);
    v21 = v20;
    v25 = sub_100012B20(v19, v20, v26);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v25, v26, v16 + 4, v16 + 12);
    swift_bridgeObjectRelease(v21);
    _os_log_impl((void *)&_mh_execute_header, v14, v15, "[[%{public}s]] enqueueStartupOperations finished", v16, 0xCu);
    swift_arrayDestroy(v18, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v18, -1, -1);
    swift_slowDealloc(v16, -1, -1);

    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v24);
  }
  else
  {

    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  }
  return sub_10000C0DC();
}

uint64_t sub_10000DB8C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t ObjCClassFromMetadata;
  void *v21;
  id v22;
  NSString v23;
  void *v24;
  id v25;
  uint64_t MoreFromHealthDataSource;
  Swift::String v27;
  Swift::String v28;
  Swift::String v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  Swift::String v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void (*v42)(char *, _QWORD, uint64_t);
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  char *v47;
  char *v48;
  char *v49;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  NSBundle v54;
  id v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  void *v72;
  Swift::String v73;

  v68 = a1;
  v1 = type metadata accessor for SectionedDataSourceContainerViewType(0);
  v66 = *(_QWORD *)(v1 - 8);
  v67 = v1;
  __chkstk_darwin(v1);
  v65 = (char *)&v51 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = type metadata accessor for CellDeselectionBehavior(0);
  v63 = *(_QWORD *)(v3 - 8);
  v64 = v3;
  __chkstk_darwin(v3);
  v62 = (char *)&v51 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000076D8(0, &qword_1000ECA60, (uint64_t (*)(uint64_t))&type metadata accessor for UIBackgroundConfiguration, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
  __chkstk_darwin(v5);
  v61 = (char *)&v51 - v6;
  sub_1000076D8(0, &qword_1000ECCD8, (uint64_t (*)(uint64_t))&type metadata accessor for UICellAccessory.LayoutDimension, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
  __chkstk_darwin(v7);
  v58 = (char *)&v51 - v8;
  v9 = type metadata accessor for UICellAccessory.DisclosureIndicatorOptions(0);
  v59 = *(_QWORD *)(v9 - 8);
  v60 = v9;
  __chkstk_darwin(v9);
  v11 = (char *)&v51 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v56 = type metadata accessor for UICellAccessory.DisplayedState(0);
  v12 = *(_QWORD *)(v56 - 8);
  __chkstk_darwin(v56);
  v14 = (char *)&v51 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for UIListContentConfiguration(0);
  v53 = *(_QWORD *)(v15 - 8);
  v16 = __chkstk_darwin(v15);
  v18 = (char *)&v51 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  static UIListContentConfiguration.cell()(v16);
  v19 = type metadata accessor for DiffableCollectionViewAdaptor(0);
  ObjCClassFromMetadata = swift_getObjCClassFromMetadata(v19);
  v21 = (void *)objc_opt_self(NSBundle);
  v22 = objc_msgSend(v21, "bundleForClass:", ObjCClassFromMetadata);
  v23 = String._bridgeToObjectiveC()();
  v24 = (void *)objc_opt_self(UIImage);
  v55 = v22;
  v25 = objc_msgSend(v24, "imageNamed:inBundle:", v23, v22);

  UIListContentConfiguration.image.setter(v25);
  MoreFromHealthDataSource = type metadata accessor for GetMoreFromHealthDataSource(0);
  v54.super.isa = (Class)objc_msgSend(v21, "bundleForClass:", swift_getObjCClassFromMetadata(MoreFromHealthDataSource));
  v27._countAndFlagsBits = 0xD000000000000010;
  v73._countAndFlagsBits = 0xD000000000000033;
  v73._object = (void *)0x80000001000BA720;
  v28._object = (void *)0x80000001000BA6E0;
  v27._object = (void *)0x80000001000BA700;
  v28._countAndFlagsBits = 0xD000000000000015;
  v29 = NSLocalizedString(_:tableName:bundle:value:comment:)(v28, (Swift::String_optional)0, v54, v27, v73);
  UIListContentConfiguration.text.setter(v29._countAndFlagsBits, v29._object);
  v69 = 0;
  v70 = 0xE000000000000000;
  _StringGuts.grow(_:)(22);
  v30 = v70;
  v31 = _typeName(_:qualified:)(v57, 0);
  v33 = v32;
  swift_bridgeObjectRelease(v30);
  v69 = v31;
  v70 = v33;
  v34._countAndFlagsBits = 0xD000000000000014;
  v34._object = (void *)0x80000001000BA760;
  String.append(_:)(v34);
  v57 = v69;
  v52 = v70;
  v71 = v15;
  v72 = &protocol witness table for UIListContentConfiguration;
  v35 = sub_100007E0C(&v69);
  v36 = v53;
  (*(void (**)(_QWORD *, char *, uint64_t))(v53 + 16))(v35, v18, v15);
  sub_1000076D8(0, &qword_1000ECCE0, (uint64_t (*)(uint64_t))&type metadata accessor for UICellAccessory, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for _ContiguousArrayStorage);
  v38 = v37;
  v39 = type metadata accessor for UICellAccessory(0);
  v40 = swift_allocObject(v38, ((*(unsigned __int8 *)(*(_QWORD *)(v39 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v39 - 8) + 80))+ *(_QWORD *)(*(_QWORD *)(v39 - 8) + 72), *(unsigned __int8 *)(*(_QWORD *)(v39 - 8) + 80) | 7);
  *(_OWORD *)(v40 + 16) = xmmword_1000B11F0;
  v41 = v12;
  v42 = *(void (**)(char *, _QWORD, uint64_t))(v12 + 104);
  v43 = v56;
  v42(v14, enum case for UICellAccessory.DisplayedState.always(_:), v56);
  v44 = type metadata accessor for UICellAccessory.LayoutDimension(0);
  v45 = v58;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v44 - 8) + 56))(v58, 1, 1, v44);
  UICellAccessory.DisclosureIndicatorOptions.init(isHidden:reservedLayoutWidth:tintColor:)(2, v45, 0);
  static UICellAccessory.disclosureIndicator(displayed:options:)(v14, v11);
  (*(void (**)(char *, uint64_t))(v59 + 8))(v11, v60);
  (*(void (**)(char *, uint64_t))(v41 + 8))(v14, v43);
  v46 = type metadata accessor for UIBackgroundConfiguration(0);
  v47 = v61;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v46 - 8) + 56))(v61, 1, 1, v46);
  v48 = v62;
  (*(void (**)(char *, _QWORD, uint64_t))(v63 + 104))(v62, enum case for CellDeselectionBehavior.default(_:), v64);
  v49 = v65;
  (*(void (**)(char *, _QWORD, uint64_t))(v66 + 104))(v65, enum case for SectionedDataSourceContainerViewType.collectionView(_:), v67);
  ContentConfigurationItem.init(uniqueIdentifier:contentConfiguration:cellAccessories:cellSelectionHandler:deselectionBehavior:backgroundConfiguration:updateContentConfigurationHandler:container:automationIdentifier:)(v57, v52, &v69, v40, sub_100049EB4, 0, v48, v47, 0, 0, v49, 0xD000000000000013, 0x80000001000BA780);

  return (*(uint64_t (**)(char *, uint64_t))(v36 + 8))(v18, v15);
}

void sub_10000E13C()
{
  void *v0;
  id v1;
  id v2;
  id v3;
  Swift::String v4;
  Swift::String v5;
  void *object;
  id v7;
  NSString v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  Swift::String v14;

  v1 = objc_msgSend(v0, "traitCollection");
  v2 = objc_msgSend(v1, "horizontalSizeClass");

  if ((unint64_t)v2 >= 2)
  {
    if (v2 == (id)2)
    {
      v11 = type metadata accessor for SummaryFeedViewController(0);
      v12 = sub_100013198(&qword_1000EECE0, type metadata accessor for SummaryFeedViewController, (uint64_t)&unk_1000B4300);
      ProfileButtonDisplaying<>.updateProfileButtonForRegularSizeClass()(v11, v12);
      v13 = objc_msgSend(v0, "navigationItem");
      objc_msgSend(v13, "setTitle:", 0);

    }
  }
  else
  {
    v3 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
    v14._object = (void *)0x80000001000BBFF0;
    v4._countAndFlagsBits = 0x7972616D6D7553;
    v4._object = (void *)0xE700000000000000;
    v5._countAndFlagsBits = 0;
    v5._object = (void *)0xE000000000000000;
    v14._countAndFlagsBits = 0xD000000000000011;
    object = NSLocalizedString(_:tableName:bundle:value:comment:)(v4, (Swift::String_optional)0, (NSBundle)v3, v5, v14)._object;

    v7 = objc_msgSend(v0, "navigationItem");
    v8 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(object);
    objc_msgSend(v7, "setTitle:", v8);

    v9 = type metadata accessor for SummaryFeedViewController(0);
    v10 = sub_100013198(&qword_1000EECE0, type metadata accessor for SummaryFeedViewController, (uint64_t)&unk_1000B4300);
    ProfileButtonDisplaying<>.updateProfileButtonForCompactSizeClass()(v9, v10);
  }
}

uint64_t sub_10000E324()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  id v3;
  NSString v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  id v9;
  uint64_t v10;
  void *v11;
  id v12;
  uint64_t v13;
  void **v15;
  uint64_t v16;
  void *v17;
  void *v18;
  void *v19;
  uint64_t v20;

  v1 = v0;
  if (qword_1000EBFE0 != -1)
    swift_once(&qword_1000EBFE0, sub_100016740);
  v2 = *(void **)(v0 + OBJC_IVAR____TtC6Health23CloudSyncStartupManager_cloudSyncControl);
  v3 = (id)qword_1000F0D78;
  v4 = String._bridgeToObjectiveC()();
  v19 = sub_10001429C;
  v20 = v1;
  v15 = _NSConcreteStackBlock;
  v16 = 1107296256;
  v17 = sub_10000666C;
  v18 = &unk_1000DCCE8;
  v5 = _Block_copy(&v15);
  v6 = v20;
  swift_retain(v1);
  swift_release(v6);
  objc_msgSend(v2, "syncWithRequest:reason:completion:", v3, v4, v5);
  _Block_release(v5);

  dispatch thunk of CloudSyncStateObserver.startFirstRestoreIfNeeded()(v7);
  v8 = objc_msgSend((id)objc_opt_self(NSNotificationCenter), "defaultCenter");
  v9 = objc_msgSend((id)objc_opt_self(NSOperationQueue), "mainQueue");
  v10 = swift_allocObject(&unk_1000DCCD0, 24, 7);
  swift_weakInit(v10 + 16, v1);
  v19 = sub_1000142A4;
  v20 = v10;
  v15 = _NSConcreteStackBlock;
  v16 = 1107296256;
  v17 = sub_100007F28;
  v18 = &unk_1000DCD10;
  v11 = _Block_copy(&v15);
  swift_release(v20);
  v12 = objc_msgSend(v8, "addObserverForName:object:queue:usingBlock:", UIApplicationDidBecomeActiveNotification, 0, v9, v11);

  _Block_release(v11);
  v13 = *(_QWORD *)(v1 + OBJC_IVAR____TtC6Health23CloudSyncStartupManager_notificationCenterObserver);
  *(_QWORD *)(v1 + OBJC_IVAR____TtC6Health23CloudSyncStartupManager_notificationCenterObserver) = v12;
  return swift_unknownObjectRelease(v13);
}

uint64_t sub_10000E55C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t ObjectType;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t MetatypeMetadata;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t result;
  id v19;
  void *v20;
  id v21;
  id v22;
  Class isa;
  id v24;
  id v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  __int128 aBlock;
  __int128 v31;
  uint64_t (*v32)();
  uint64_t v33;

  v1 = v0;
  ObjectType = swift_getObjectType(v0);
  v3 = type metadata accessor for Logger(0);
  v4 = *(_QWORD *)(v3 - 8);
  v5 = __chkstk_darwin(v3);
  v7 = (char *)&v28 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = static Logger.general.getter(v5);
  v9 = Logger.logObject.getter(v8);
  v10 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v9, v10))
  {
    v11 = swift_slowAlloc(22, -1);
    v28 = v1;
    v12 = v11;
    v13 = swift_slowAlloc(64, -1);
    v29 = v13;
    *(_QWORD *)&aBlock = ObjectType;
    *(_DWORD *)v12 = 136446466;
    MetatypeMetadata = swift_getMetatypeMetadata(ObjectType);
    v15 = String.init<A>(describing:)(&aBlock, MetatypeMetadata);
    v17 = v16;
    *(_QWORD *)&aBlock = sub_100012B20(v15, v16, &v29);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, (char *)&aBlock + 8, v12 + 4, v12 + 12);
    swift_bridgeObjectRelease(v17);
    *(_WORD *)(v12 + 12) = 2082;
    *(_QWORD *)&aBlock = sub_100012B20(0xD00000000000002ELL, 0x80000001000BB630, &v29);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, (char *)&aBlock + 8, v12 + 14, v12 + 22);
    _os_log_impl((void *)&_mh_execute_header, v9, v10, "[%{public}s]: Lifecycle: %{public}s", (uint8_t *)v12, 0x16u);
    swift_arrayDestroy(v13, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v13, -1, -1);
    swift_slowDealloc(v12, -1, -1);
  }

  result = (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v7, v3);
  if (kTCCServiceMotion)
  {
    v19 = kTCCServiceMotion;
    v32 = ConfigurationIntentResponseCode.rawValue.getter;
    v33 = 0;
    *(_QWORD *)&aBlock = _NSConcreteStackBlock;
    *((_QWORD *)&aBlock + 1) = 1107296256;
    *(_QWORD *)&v31 = sub_100013B98;
    *((_QWORD *)&v31 + 1) = &unk_1000DFE08;
    v20 = _Block_copy(&aBlock);
    TCCAccessRequest(v19, 0, v20);
    _Block_release(v20);

    v21 = objc_msgSend((id)objc_opt_self(UIApplication), "sharedApplication");
    v22 = sub_10000FC58();
    sub_100006D10(0, &qword_1000EE828, UIApplicationShortcutItem_ptr);
    isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(v22);
    objc_msgSend(v21, "setShortcutItems:", isa);

    v24 = objc_msgSend((id)objc_opt_self(UNUserNotificationCenter), "currentNotificationCenter");
    v25 = sub_100007E88();
    objc_msgSend(v24, "setDelegate:", v25);

    type metadata accessor for AppDependencyManager(0);
    v26 = static AppDependencyManager.shared.getter();
    v27 = sub_100006D10(0, &qword_1000EE830, HKHealthStore_ptr);
    aBlock = 0u;
    v31 = 0u;
    v32 = 0;
    AppDependencyManager.add<A>(key:dependency:)(&aBlock, sub_10005C9F4, 0, v27);

    swift_release(v26);
    sub_10005E608((uint64_t)&aBlock);
    return 1;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_10000E8E8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_1000076D8(0, (unint64_t *)&qword_1000ECF98, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

void sub_10000E944(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t))
{
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!*a2)
  {
    v5 = a3(255);
    v6 = type metadata accessor for Optional(a1, v5);
    if (!v7)
      atomic_store(v6, a2);
  }
}

uint64_t sub_10000E990(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  _BYTE v13[24];

  sub_100026E84(0, &qword_1000EE1B8, type metadata accessor for PersonalizedFeedDataSource, sub_10004A030, (uint64_t (*)(uint64_t, uint64_t, uint64_t))&type metadata accessor for DelayedDataSource.DataSourceState);
  v5 = v4;
  v6 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v8 = &v13[-v7 - 8];
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v6 + 16))(&v13[-v7 - 8], a1, v5);
  if ((*(unsigned int (**)(char *, uint64_t))(v6 + 88))(v8, v5) != enum case for DelayedDataSource.DataSourceState.initialized<A>(_:))
    return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  v9 = a2 + 16;
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  swift_beginAccess(v9, v13, 0, 0);
  result = swift_weakLoadStrong(v9);
  if (result)
  {
    v11 = result;
    sub_1000095F0();
    return swift_release(v11);
  }
  return result;
}

uint64_t sub_10000EAAC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  id v6;
  id v7;
  id v8;
  id v9;
  id v10;
  void *v11;
  id v12;
  id v13;
  id v14;
  void *v15;
  id v16;
  void *v17;
  id v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  id v23;
  id v24;
  id v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  id v31;
  id v32;
  id v33;
  void *v34;
  _QWORD v35[5];
  _QWORD v36[5];

  v1 = v0;
  v2 = v0 + OBJC_IVAR____TtC6Health20MainTabBarController_providedHealthExperienceStore;
  sub_100028F08(v0 + OBJC_IVAR____TtC6Health20MainTabBarController_providedHealthExperienceStore, (uint64_t)v36);
  v3 = OBJC_IVAR____TtC6Health20MainTabBarController_providedHealthStore;
  v4 = *(void **)(v0 + OBJC_IVAR____TtC6Health20MainTabBarController_providedHealthStore);
  v5 = v0 + OBJC_IVAR____TtC6Health20MainTabBarController_pinnedContentManager;
  sub_100028F08(v0 + OBJC_IVAR____TtC6Health20MainTabBarController_pinnedContentManager, (uint64_t)v35);
  v6 = objc_allocWithZone((Class)type metadata accessor for SummaryFeedViewController(0));
  v7 = v4;
  v8 = sub_100065050(v36, v7, v35);

  v9 = objc_msgSend(objc_allocWithZone((Class)HKNavigationController), "initWithRootViewController:", v8);
  v10 = objc_msgSend(v9, "navigationBar");
  objc_msgSend(v10, "setPrefersLargeTitles:", 1);

  sub_100028F08(v2, (uint64_t)v36);
  v11 = *(void **)(v1 + v3);
  sub_100028F08(v5, (uint64_t)v35);
  v12 = objc_allocWithZone((Class)type metadata accessor for BrowseViewController(0));
  v34 = (void *)BrowseViewController.init(healthExperienceStore:healthStore:pinnedContentManager:)(v36, v11, v35);
  v13 = objc_msgSend(objc_allocWithZone((Class)HKNavigationController), "initWithRootViewController:", v34);
  v14 = objc_msgSend(v13, "navigationBar");
  objc_msgSend(v14, "setPrefersLargeTitles:", 1);

  sub_100028F08(v2, (uint64_t)v36);
  v15 = *(void **)(v1 + v3);
  sub_100028F08(v5, (uint64_t)v35);
  v16 = objc_allocWithZone((Class)type metadata accessor for SharingOverviewViewController(0));
  v17 = (void *)SharingOverviewViewController.init(healthExperienceStore:healthStore:pinnedContentManager:)(v36, v15, v35);
  v18 = objc_msgSend(objc_allocWithZone((Class)HKNavigationController), "initWithRootViewController:", v17);
  v19 = objc_msgSend(v18, "navigationBar");
  objc_msgSend(v19, "setPrefersLargeTitles:", 1);

  sub_1000139B4();
  v21 = swift_allocObject(v20, 56, 7);
  *(_OWORD *)(v21 + 16) = xmmword_1000B19C0;
  *(_QWORD *)(v21 + 32) = v9;
  *(_QWORD *)(v21 + 40) = v18;
  *(_QWORD *)(v21 + 48) = v13;
  v36[0] = v21;
  specialized Array._endMutation()(v21);
  v22 = v36[0];
  if (v36[0] >> 62)
  {
    if (v36[0] < 0)
      v29 = v36[0];
    else
      v29 = v36[0] & 0xFFFFFFFFFFFFFF8;
    v30 = sub_100006D10(0, (unint64_t *)&qword_1000F0B50, UIViewController_ptr);
    v31 = v9;
    v32 = v18;
    v33 = v13;
    swift_bridgeObjectRetain(v22);
    v27 = _bridgeCocoaArray<A>(_:)(v29, v30);

    swift_bridgeObjectRelease(v22);
  }
  else
  {
    v23 = v9;
    v24 = v18;
    v25 = v13;
    v26 = swift_bridgeObjectRetain(v22);
    dispatch thunk of __ContiguousArrayStorageBase.staticElementType.getter(v26);
    sub_100006D10(0, (unint64_t *)&qword_1000F0B50, UIViewController_ptr);

    v27 = v22;
  }
  swift_bridgeObjectRelease(v22);

  return v27;
}

uint64_t sub_10000EDDC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  _BYTE v5[24];

  v3 = v1 + qword_1000EEB38;
  swift_beginAccess(v3, v5, 0, 0);
  return sub_100028F08(v3, a1);
}

uint64_t sub_10000EE2C()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t result;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  void (*v33)(char *, uint64_t);
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t *v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  _QWORD *v63;
  _QWORD aBlock[5];
  uint64_t v65;

  v61 = *v0;
  v1 = type metadata accessor for DispatchWorkItemFlags(0);
  v2 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  v4 = (char *)&v47 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for DispatchTimeInterval(0);
  v59 = *(_QWORD *)(v5 - 8);
  v60 = v5;
  __chkstk_darwin(v5);
  v7 = (uint64_t *)((char *)&v47 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  v8 = type metadata accessor for DispatchTime(0);
  v58 = *(_QWORD *)(v8 - 8);
  v9 = __chkstk_darwin(v8);
  v57 = (char *)&v47 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v62 = (char *)&v47 - v11;
  v12 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0);
  v55 = *(_QWORD *)(v12 - 8);
  v56 = v12;
  __chkstk_darwin(v12);
  v14 = (char *)&v47 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for OS_dispatch_queue.Attributes(0);
  __chkstk_darwin(v15);
  v17 = (char *)&v47 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = type metadata accessor for DispatchQoS(0);
  result = __chkstk_darwin(v18);
  v22 = (char *)&v47 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((v0[9] & 1) == 0)
  {
    v49 = v0;
    *((_BYTE *)v0 + 72) = 1;
    v53 = v20;
    v54 = result;
    v47 = sub_100006D10(0, (unint64_t *)&qword_1000ED910, OS_dispatch_queue_ptr);
    static DispatchQoS.background.getter(v47);
    aBlock[0] = _swiftEmptyArrayStorage;
    v52 = v2;
    v23 = sub_100013198(&qword_1000EE928, (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes, (uint64_t)&protocol conformance descriptor for OS_dispatch_queue.Attributes);
    v48 = v8;
    v24 = v23;
    v51 = v4;
    sub_10000F2DC(0, (unint64_t *)&unk_1000EF150, (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes);
    v50 = v1;
    v26 = v25;
    v27 = sub_10008A418(&qword_1000EE930, (unint64_t *)&unk_1000EF150, (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes);
    dispatch thunk of SetAlgebra.init<A>(_:)(aBlock, v26, v27, v15, v24);
    (*(void (**)(char *, _QWORD, uint64_t))(v55 + 104))(v14, enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:), v56);
    v28 = (void *)OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)(0xD00000000000001FLL, 0x80000001000BE640, v22, v17, v14, 0);
    v29 = v57;
    static DispatchTime.now()();
    *v7 = 100;
    v31 = v59;
    v30 = v60;
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(v59 + 104))(v7, enum case for DispatchTimeInterval.milliseconds(_:), v60);
    v32 = v62;
    + infix(_:_:)(v29, v7);
    (*(void (**)(_QWORD *, uint64_t))(v31 + 8))(v7, v30);
    v33 = *(void (**)(char *, uint64_t))(v58 + 8);
    v34 = v48;
    v33(v29, v48);
    v35 = swift_allocObject(&unk_1000E1BF8, 32, 7);
    v36 = v49;
    v37 = v61;
    *(_QWORD *)(v35 + 16) = v49;
    *(_QWORD *)(v35 + 24) = v37;
    aBlock[4] = sub_1000146C0;
    v65 = v35;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_100006988;
    aBlock[3] = &unk_1000E1C10;
    v38 = _Block_copy(aBlock);
    v39 = swift_retain(v36);
    static DispatchQoS.unspecified.getter(v39);
    v63 = _swiftEmptyArrayStorage;
    v40 = sub_100013198((unint64_t *)&qword_1000EDBE0, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    sub_10000F2DC(0, (unint64_t *)&qword_1000ED920, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
    v42 = v41;
    v43 = sub_10008A418((unint64_t *)&qword_1000EDBF0, (unint64_t *)&qword_1000ED920, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
    v44 = v51;
    v45 = v42;
    v46 = v50;
    dispatch thunk of SetAlgebra.init<A>(_:)(&v63, v45, v43, v50, v40);
    OS_dispatch_queue.asyncAfter(deadline:qos:flags:execute:)(v32, v22, v44, v38);
    _Block_release(v38);

    (*(void (**)(char *, uint64_t))(v52 + 8))(v44, v46);
    (*(void (**)(char *, uint64_t))(v53 + 8))(v22, v54);
    v33(v32, v34);
    return swift_release(v65);
  }
  return result;
}

void sub_10000F2DC(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t))
{
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!*a2)
  {
    v5 = a3(255);
    v6 = type metadata accessor for Array(a1, v5);
    if (!v7)
      atomic_store(v6, a2);
  }
}

uint64_t sub_10000F328()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  void *v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  void *v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  _QWORD aBlock[5];
  uint64_t v37;

  v0 = type metadata accessor for DispatchWorkItemFlags(0);
  v33 = *(_QWORD *)(v0 - 8);
  v34 = v0;
  __chkstk_darwin(v0);
  v32 = (char *)&v28 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v2 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0);
  v28 = *(_QWORD *)(v2 - 8);
  v29 = v2;
  __chkstk_darwin(v2);
  v4 = (char *)&v28 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for OS_dispatch_queue.Attributes(0);
  __chkstk_darwin(v5);
  v7 = (char *)&v28 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for DispatchQoS(0);
  v30 = *(_QWORD *)(v8 - 8);
  v31 = v8;
  __chkstk_darwin(v8);
  v10 = (char *)&v28 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for ProfileGradientView(0);
  static ProfileGradientView.preloadRenderPipelineStateIfNeeded()();
  if (qword_1000EC140 != -1)
    swift_once(&qword_1000EC140, sub_100014684);
  v11 = *(void **)(qword_1000F1208 + 16);
  sub_100006D10(0, (unint64_t *)&qword_1000ED910, OS_dispatch_queue_ptr);
  v12 = v11;
  static DispatchQoS.userInteractive.getter();
  aBlock[0] = _swiftEmptyArrayStorage;
  v13 = sub_100013198(&qword_1000EE928, (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes, (uint64_t)&protocol conformance descriptor for OS_dispatch_queue.Attributes);
  sub_1000076D8(0, (unint64_t *)&unk_1000EF150, (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Array);
  v15 = v14;
  v16 = sub_10000F724(&qword_1000EE930, (unint64_t *)&unk_1000EF150, (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes);
  dispatch thunk of SetAlgebra.init<A>(_:)(aBlock, v15, v16, v5, v13);
  (*(void (**)(char *, _QWORD, uint64_t))(v28 + 104))(v4, enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:), v29);
  v17 = (void *)OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)(0xD00000000000002DLL, 0x80000001000BC4A0, v10, v7, v4, 0);
  v18 = swift_allocObject(&unk_1000E06F0, 24, 7);
  *(_QWORD *)(v18 + 16) = v12;
  aBlock[4] = sub_10001481C;
  v37 = v18;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100006988;
  aBlock[3] = &unk_1000E0708;
  v19 = _Block_copy(aBlock);
  v20 = v12;
  static DispatchQoS.unspecified.getter(v20);
  v35 = _swiftEmptyArrayStorage;
  v21 = sub_100013198((unint64_t *)&qword_1000EDBE0, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  sub_1000076D8(0, (unint64_t *)&qword_1000ED920, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Array);
  v23 = v22;
  v24 = sub_10000F724((unint64_t *)&qword_1000EDBF0, (unint64_t *)&qword_1000ED920, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  v25 = v32;
  v26 = v34;
  dispatch thunk of SetAlgebra.init<A>(_:)(&v35, v23, v24, v34, v21);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v10, v25, v19);
  _Block_release(v19);

  (*(void (**)(char *, uint64_t))(v33 + 8))(v25, v26);
  (*(void (**)(char *, uint64_t))(v30 + 8))(v10, v31);
  return swift_release(v37);
}

uint64_t sub_10000F6E4(unint64_t *a1, uint64_t a2, uint64_t (*a3)(uint64_t), uint64_t a4)
{
  uint64_t result;
  uint64_t v7;

  result = *a1;
  if (!result)
  {
    v7 = a3(a2);
    result = swift_getWitnessTable(a4, v7);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10000F724(unint64_t *a1, unint64_t *a2, uint64_t (*a3)(uint64_t))
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    sub_1000076D8(255, a2, a3, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Array);
    result = swift_getWitnessTable(&protocol conformance descriptor for [A], v5);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t type metadata accessor for MainTabBarController(uint64_t a1)
{
  uint64_t result;

  result = qword_1000ED990;
  if (!qword_1000ED990)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for MainTabBarController);
  return result;
}

void sub_10000F7A8()
{
  char *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _BYTE *v4;
  objc_class *v5;
  id v6;
  Swift::String v7;
  Swift::String v8;
  Swift::String v9;
  void *v10;
  void *v11;
  unint64_t v12;
  void *v13;
  id v14;
  id v15;
  void *v16;
  id v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t *v24;
  char *v25;
  id v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  Class isa;
  id v31;
  id v32;
  void *v33;
  id v34;
  _BYTE v35[24];
  __int128 v36;
  uint64_t v37;
  uint64_t v38;
  objc_super v39;
  Swift::String v40;

  v1 = type metadata accessor for DeepLinkActivityType(0);
  v2 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  v4 = &v35[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v5 = (objc_class *)type metadata accessor for SummaryFeedViewController(0);
  v39.receiver = v0;
  v39.super_class = v5;
  objc_msgSendSuper2(&v39, "viewDidLoad");
  sub_10000E13C();
  v6 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
  v40._object = (void *)0x80000001000BBFF0;
  v7._countAndFlagsBits = 0x7972616D6D7553;
  v7._object = (void *)0xE700000000000000;
  v8._countAndFlagsBits = 0;
  v8._object = (void *)0xE000000000000000;
  v40._countAndFlagsBits = 0xD000000000000011;
  v9 = NSLocalizedString(_:tableName:bundle:value:comment:)(v7, (Swift::String_optional)0, (NSBundle)v6, v8, v40);

  (*(void (**)(_BYTE *, _QWORD, uint64_t))(v2 + 104))(v4, enum case for DeepLinkActivityType.summary(_:), v1);
  v10 = (void *)static HAUserActivity.createActivity(title:restorationType:profileIdentifier:eligibleForSearch:eligibleForHandoff:eligibleForPrediction:)(v9._countAndFlagsBits, v9._object, v4, 0, 1, 2, 0);
  swift_bridgeObjectRelease(v9._object);
  (*(void (**)(_BYTE *, uint64_t))(v2 + 8))(v4, v1);
  objc_msgSend(v0, "setUserActivity:", v10);

  v11 = (void *)objc_opt_self(_HKBehavior);
  if (objc_msgSend(v11, "isAppleInternalInstall"))
  {
    v12 = (unint64_t)TapToRadarButtonDisplaying.makeTapToRadarButtonIfNeeded()();
    if (v12)
    {
      v13 = (void *)v12;
      v14 = objc_msgSend(v0, "navigationItem");
      objc_msgSend(v14, "setRightBarButtonItem:", v13);

    }
  }
  v15 = objc_msgSend(v11, "sharedBehavior");
  if (!v15)
  {
    __break(1u);
    goto LABEL_12;
  }
  v16 = v15;
  v17 = objc_msgSend(v15, "features");

  if (!v17)
  {
LABEL_12:
    __break(1u);
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  v18 = objc_msgSend(v17, "summaryGradient");

  if (v18)
  {
    v19 = dispatch thunk of CompoundDataSourceCollectionViewController.dataSource.getter();
    v20 = type metadata accessor for SummaryFeedDataSource(0);
    v21 = *(_QWORD *)(swift_dynamicCastClassUnconditional(v19, v20, 0, 0, 0) + qword_1000F1178);
    swift_retain(v21);
    swift_release(v19);
    v22 = type metadata accessor for SummaryPinnedContentGradientColorProvider();
    v23 = (uint64_t *)swift_allocObject(v22, 72, 7);
    v24 = sub_100064E60(v21, v23);
    v37 = v22;
    v38 = sub_100013198((unint64_t *)&unk_1000EECA0, (uint64_t (*)(uint64_t))type metadata accessor for SummaryPinnedContentGradientColorProvider, (uint64_t)&protocol conformance descriptor for SummaryPinnedContentGradientColorProvider);
    *(_QWORD *)&v36 = v24;
    v25 = &v0[qword_1000EEB38];
    swift_beginAccess(&v0[qword_1000EEB38], v35, 33, 0);
    swift_retain(v24);
    _s6Health23OpenSleepScheduleIntentVwxx_0(v25);
    sub_10001AF7C(&v36, (uint64_t)v25);
    swift_endAccess(v35);
    swift_release(v24);
    sub_100013198(&qword_1000EEC88, type metadata accessor for SummaryFeedViewController, (uint64_t)&unk_1000B4338);
    GradientBackgroundPresenting.configureGradientBackground()();
  }
  v26 = objc_msgSend(v0, "collectionView");
  if (!v26)
    goto LABEL_13;
  v27 = v26;
  sub_1000138C8(0, (unint64_t *)&qword_1000EF4C0, (uint64_t)&type metadata for String, (uint64_t (*)(_QWORD, uint64_t))&type metadata accessor for _ContiguousArrayStorage);
  v29 = swift_allocObject(v28, 64, 7);
  *(_OWORD *)(v29 + 16) = xmmword_1000B1580;
  *(_QWORD *)(v29 + 32) = 0xD000000000000019;
  *(_QWORD *)(v29 + 40) = 0x80000001000B41E0;
  strcpy((char *)(v29 + 48), "CollectionView");
  *(_BYTE *)(v29 + 63) = -18;
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v29);
  v31 = (id)HKUIJoinStringsForAutomationIdentifier(isa);

  objc_msgSend(v27, "setAccessibilityIdentifier:", v31);
  v32 = objc_msgSend(v0, "collectionView");
  if (v32)
  {
    v33 = v32;
    v34 = objc_msgSend((id)objc_opt_self(UIColor), "clearColor");
    objc_msgSend(v33, "setBackgroundColor:", v34);

    return;
  }
LABEL_14:
  __break(1u);
}

id sub_10000FC58()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  id result;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t (*v15)(char *, _QWORD, uint64_t);
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(char *, uint64_t);
  NSString v20;
  void *v21;
  id v22;
  id v23;
  NSString v24;
  NSString v25;
  id v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  NSString v31;
  id v32;
  id v33;
  NSString v34;
  NSString v35;
  id v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  NSString v43;
  id v44;
  id v45;
  NSString v46;
  NSString v47;
  id v48;
  id v49;
  unint64_t v50;
  unint64_t v51;
  uint64_t v52;
  id v53;
  unsigned __int8 v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  NSString v60;
  id v61;
  id v62;
  NSString v63;
  NSString v64;
  id v65;
  id v66;
  unint64_t v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  char *v72;
  unsigned int v73;
  uint64_t v74;
  void (*v75)(char *, uint64_t);
  uint64_t (*v76)(char *, _QWORD, uint64_t);
  uint64_t v77;

  v0 = type metadata accessor for DeepLinkActivityType(0);
  v1 = *(_QWORD *)(v0 - 8);
  v2 = __chkstk_darwin(v0);
  v72 = (char *)&v70 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = __chkstk_darwin(v2);
  v71 = (char *)&v70 - v5;
  v6 = __chkstk_darwin(v4);
  v8 = (char *)&v70 - v7;
  __chkstk_darwin(v6);
  v10 = (char *)&v70 - v9;
  result = objc_msgSend((id)objc_opt_self(_HKBehavior), "sharedBehavior");
  if (result)
  {
    v12 = result;
    v73 = objc_msgSend(result, "isiPad");

    sub_1000138C8(0, (unint64_t *)&qword_1000ED9C0, (uint64_t)&type metadata for Swift.AnyObject + 8, (uint64_t (*)(_QWORD, uint64_t))&type metadata accessor for _ContiguousArrayStorage);
    v14 = swift_allocObject(v13, 48, 7);
    *(_OWORD *)(v14 + 16) = xmmword_1000B2850;
    v15 = *(uint64_t (**)(char *, _QWORD, uint64_t))(v1 + 104);
    v16 = v15(v10, enum case for DeepLinkActivityType.summary(_:), v0);
    DeepLinkActivityType.userActivityType.getter(v16);
    v18 = v17;
    v19 = *(void (**)(char *, uint64_t))(v1 + 8);
    v19(v10, v0);
    v20 = String._bridgeToObjectiveC()();
    v21 = (void *)objc_opt_self(UIApplicationShortcutIcon);
    v22 = objc_msgSend(v21, "iconWithSystemImageName:", v20);

    v23 = objc_allocWithZone((Class)UIApplicationShortcutItem);
    v24 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v18);
    v25 = String._bridgeToObjectiveC()();
    v26 = objc_msgSend(v23, "initWithType:localizedTitle:localizedSubtitle:icon:userInfo:", v24, v25, 0, v22, 0);

    *(_QWORD *)(v14 + 32) = v26;
    v76 = v15;
    v27 = v15(v8, enum case for DeepLinkActivityType.sharingOverview(_:), v0);
    DeepLinkActivityType.userActivityType.getter(v27);
    v29 = v28;
    v74 = v0;
    v75 = v19;
    v19(v8, v0);
    v30 = v21;
    v31 = String._bridgeToObjectiveC()();
    v32 = objc_msgSend(v21, "iconWithSystemImageName:", v31);

    v33 = objc_allocWithZone((Class)UIApplicationShortcutItem);
    v34 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v29);
    v35 = String._bridgeToObjectiveC()();
    v36 = objc_msgSend(v33, "initWithType:localizedTitle:localizedSubtitle:icon:userInfo:", v34, v35, 0, v32, 0);

    *(_QWORD *)(v14 + 40) = v36;
    v77 = v14;
    specialized Array._endMutation()(v37);
    if ((v73 & 1) == 0)
    {
      v38 = v71;
      v39 = v74;
      v40 = v76(v71, enum case for DeepLinkActivityType.browse(_:), v74);
      DeepLinkActivityType.userActivityType.getter(v40);
      v42 = v41;
      v75(v38, v39);
      v43 = String._bridgeToObjectiveC()();
      v44 = objc_msgSend(v30, "iconWithSystemImageName:", v43);

      v45 = objc_allocWithZone((Class)UIApplicationShortcutItem);
      v46 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(v42);
      v47 = String._bridgeToObjectiveC()();
      v48 = objc_msgSend(v45, "initWithType:localizedTitle:localizedSubtitle:icon:userInfo:", v46, v47, 0, v44, 0);

      v49 = v48;
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v49);
      v51 = *(_QWORD *)((v77 & 0xFFFFFFFFFFFFFF8) + 0x10);
      v50 = *(_QWORD *)((v77 & 0xFFFFFFFFFFFFFF8) + 0x18);
      if (v51 >= v50 >> 1)
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v50 > 1, v51 + 1, 1);
      v52 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v51, v49);
      specialized Array._endMutation()(v52);

    }
    v53 = objc_msgSend((id)objc_opt_self(HKHealthChecklistUtilities), "shared");
    v54 = objc_msgSend(v53, "isMedicalIDAvailable");

    if ((v54 & 1) != 0)
    {
      v55 = v72;
      v56 = v74;
      v57 = v76(v72, enum case for DeepLinkActivityType.medicalID(_:), v74);
      DeepLinkActivityType.userActivityType.getter(v57);
      v59 = v58;
      v75(v55, v56);
      v60 = String._bridgeToObjectiveC()();
      v61 = objc_msgSend(v30, "iconWithSystemImageName:", v60);

      v62 = objc_allocWithZone((Class)UIApplicationShortcutItem);
      v63 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(v59);
      v64 = String._bridgeToObjectiveC()();
      v65 = objc_msgSend(v62, "initWithType:localizedTitle:localizedSubtitle:icon:userInfo:", v63, v64, 0, v61, 0);

      v66 = v65;
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v66);
      v68 = *(_QWORD *)((v77 & 0xFFFFFFFFFFFFFF8) + 0x10);
      v67 = *(_QWORD *)((v77 & 0xFFFFFFFFFFFFFF8) + 0x18);
      if (v68 >= v67 >> 1)
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v67 > 1, v68 + 1, 1);
      v69 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v68, v66);
      specialized Array._endMutation()(v69);

    }
    return (id)v77;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1000102B0()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t ObjCClassFromMetadata;
  id v9;
  Swift::String v10;
  Swift::String v11;
  Swift::String v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  void *v24;
  Swift::String v25;
  Swift::String v26;
  uint64_t v27;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  Swift::String v33;

  v30 = type metadata accessor for UUID(0);
  v0 = *(_QWORD *)(v30 - 8);
  __chkstk_darwin(v30);
  v2 = (char *)&v29 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = type metadata accessor for EmptyStateCollectionViewCellItem(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v29 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for LoadingPersonalizedHighlightsDataSource(0);
  ObjCClassFromMetadata = swift_getObjCClassFromMetadata(v7);
  v9 = objc_msgSend((id)objc_opt_self(NSBundle), "bundleForClass:", ObjCClassFromMetadata);
  v33._countAndFlagsBits = 0xD00000000000001DLL;
  v33._object = (void *)0x80000001000BD3C0;
  v10._object = (void *)0x80000001000BD380;
  v11._object = (void *)0x80000001000BD3A0;
  v10._countAndFlagsBits = 0xD000000000000012;
  v11._countAndFlagsBits = 0x1000000000000015;
  v12 = NSLocalizedString(_:tableName:bundle:value:comment:)(v10, (Swift::String_optional)0, (NSBundle)v9, v11, v33);

  EmptyStateCollectionViewCellItem.init(title:showSpinner:)(v12._countAndFlagsBits, v12._object, 1);
  sub_100080D18(0, &qword_1000ECA68, (uint64_t (*)(uint64_t))&type metadata accessor for ArrayDataSourceSection);
  v14 = v13;
  v15 = *(_QWORD *)(type metadata accessor for ArrayDataSourceSection(0) - 8);
  v16 = swift_allocObject(v14, ((*(unsigned __int8 *)(v15 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80))+ *(_QWORD *)(v15 + 72), *(unsigned __int8 *)(v15 + 80) | 7);
  v29 = xmmword_1000B11F0;
  *(_OWORD *)(v16 + 16) = xmmword_1000B11F0;
  sub_100080D18(0, (unint64_t *)&qword_1000ECA70, (uint64_t (*)(uint64_t))sub_100013434);
  v18 = swift_allocObject(v17, 72, 7);
  *(_OWORD *)(v18 + 16) = v29;
  *(_QWORD *)(v18 + 56) = v3;
  *(_QWORD *)(v18 + 64) = sub_100013198(&qword_1000ED438, (uint64_t (*)(uint64_t))&type metadata accessor for EmptyStateCollectionViewCellItem, (uint64_t)&protocol conformance descriptor for EmptyStateCollectionViewCellItem);
  v19 = sub_100007E0C((_QWORD *)(v18 + 32));
  (*(void (**)(_QWORD *, char *, uint64_t))(v4 + 16))(v19, v6, v3);
  v20 = ArrayDataSourceSection.init(arrayLiteral:)(v18);
  v31 = 0x3C53447961727241;
  v32 = 0xE800000000000000;
  v21 = UUID.init()(v20);
  v22 = UUID.uuidString.getter(v21);
  v24 = v23;
  (*(void (**)(char *, uint64_t))(v0 + 8))(v2, v30);
  v25._countAndFlagsBits = v22;
  v25._object = v24;
  String.append(_:)(v25);
  swift_bridgeObjectRelease(v24);
  v26._countAndFlagsBits = 62;
  v26._object = (void *)0xE100000000000000;
  String.append(_:)(v26);
  v27 = ArrayDataSource.init(arrangedSections:identifier:)(v16, v31, v32);
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  return v27;
}

unint64_t sub_100010588(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  Swift::Int v4;

  v2 = v1;
  v4 = NSObject._rawHashValue(seed:)(*(_QWORD *)(v2 + 40));
  return sub_1000105B8(a1, v4);
}

unint64_t sub_1000105B8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t i;
  id v6;
  char v7;
  uint64_t v8;
  id v9;
  char v10;

  v3 = v2 + 64;
  v4 = -1 << *(_BYTE *)(v2 + 32);
  i = a2 & ~v4;
  if (((*(_QWORD *)(v2 + 64 + ((i >> 3) & 0xFFFFFFFFFFFFF8)) >> i) & 1) != 0)
  {
    sub_100006D10(0, &qword_1000ED538, HKDisplayCategory_ptr);
    v6 = *(id *)(*(_QWORD *)(v2 + 48) + 8 * i);
    v7 = static NSObject.== infix(_:_:)(v6);

    if ((v7 & 1) == 0)
    {
      v8 = ~v4;
      for (i = (i + 1) & v8; ((*(_QWORD *)(v3 + ((i >> 3) & 0xFFFFFFFFFFFFF8)) >> i) & 1) != 0; i = (i + 1) & v8)
      {
        v9 = *(id *)(*(_QWORD *)(v2 + 48) + 8 * i);
        v10 = static NSObject.== infix(_:_:)(v9);

        if ((v10 & 1) != 0)
          break;
      }
    }
  }
  return i;
}

_QWORD *sub_1000106D0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  _QWORD *v4;
  int64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v10;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return _swiftEmptyArrayStorage;
  sub_1000076D8(0, &qword_1000EF660, (uint64_t (*)(uint64_t))sub_100013B20, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for _ContiguousArrayStorage);
  v4 = (_QWORD *)swift_allocObject(v3, 16 * v1 + 32, 7);
  v5 = j__malloc_size(v4);
  v6 = v5 - 32;
  if (v5 < 32)
    v6 = v5 - 17;
  v4[2] = v1;
  v4[3] = 2 * (v6 >> 4);
  v7 = sub_100010B08(&v10, v4 + 4, v1, a1);
  v8 = v10;
  swift_bridgeObjectRetain(a1);
  sub_10005E5A4(v8);
  if (v7 != (_QWORD *)v1)
  {
    __break(1u);
    return _swiftEmptyArrayStorage;
  }
  return v4;
}

Swift::Int sub_1000107C8(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int64_t v12;
  uint64_t v13;
  Swift::Int result;
  int64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  int64_t v23;
  _QWORD *v24;
  unint64_t v25;
  int64_t v26;
  char v27;
  unint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  id v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_100010A90(0);
  v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  v8 = v7;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_43;
  v9 = 1 << *(_BYTE *)(v5 + 32);
  v36 = v3;
  v37 = v5 + 64;
  if (v9 < 64)
    v10 = ~(-1 << v9);
  else
    v10 = -1;
  v11 = v10 & *(_QWORD *)(v5 + 64);
  v12 = (unint64_t)(v9 + 63) >> 6;
  v13 = v7 + 64;
  result = swift_retain(v5);
  v15 = 0;
  while (1)
  {
    if (v11)
    {
      v21 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      v22 = v21 | (v15 << 6);
      goto LABEL_34;
    }
    v23 = v15 + 1;
    if (__OFADD__(v15, 1))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return result;
    }
    if (v23 >= v12)
      break;
    v24 = (_QWORD *)(v5 + 64);
    v25 = *(_QWORD *)(v37 + 8 * v23);
    ++v15;
    if (!v25)
    {
      v15 = v23 + 1;
      if (v23 + 1 >= v12)
        goto LABEL_36;
      v25 = *(_QWORD *)(v37 + 8 * v15);
      if (!v25)
      {
        v26 = v23 + 2;
        if (v26 >= v12)
        {
LABEL_36:
          swift_release(v5);
          v3 = v36;
          if ((a2 & 1) == 0)
            goto LABEL_43;
          goto LABEL_39;
        }
        v25 = *(_QWORD *)(v37 + 8 * v26);
        if (!v25)
        {
          while (1)
          {
            v15 = v26 + 1;
            if (__OFADD__(v26, 1))
              goto LABEL_45;
            if (v15 >= v12)
              goto LABEL_36;
            v25 = *(_QWORD *)(v37 + 8 * v15);
            ++v26;
            if (v25)
              goto LABEL_33;
          }
        }
        v15 = v26;
      }
    }
LABEL_33:
    v11 = (v25 - 1) & v25;
    v22 = __clz(__rbit64(v25)) + (v15 << 6);
LABEL_34:
    v31 = 8 * v22;
    v32 = *(void **)(*(_QWORD *)(v5 + 48) + v31);
    v33 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + v31);
    if ((a2 & 1) == 0)
      v34 = v32;
    result = NSObject._rawHashValue(seed:)(*(_QWORD *)(v8 + 40));
    v16 = -1 << *(_BYTE *)(v8 + 32);
    v17 = result & ~v16;
    v18 = v17 >> 6;
    if (((-1 << v17) & ~*(_QWORD *)(v13 + 8 * (v17 >> 6))) != 0)
    {
      v19 = __clz(__rbit64((-1 << v17) & ~*(_QWORD *)(v13 + 8 * (v17 >> 6)))) | v17 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v27 = 0;
      v28 = (unint64_t)(63 - v16) >> 6;
      do
      {
        if (++v18 == v28 && (v27 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }
        v29 = v18 == v28;
        if (v18 == v28)
          v18 = 0;
        v27 |= v29;
        v30 = *(_QWORD *)(v13 + 8 * v18);
      }
      while (v30 == -1);
      v19 = __clz(__rbit64(~v30)) + (v18 << 6);
    }
    *(_QWORD *)(v13 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v19;
    v20 = 8 * v19;
    *(_QWORD *)(*(_QWORD *)(v8 + 48) + v20) = v32;
    *(_QWORD *)(*(_QWORD *)(v8 + 56) + v20) = v33;
    ++*(_QWORD *)(v8 + 16);
  }
  swift_release(v5);
  v3 = v36;
  v24 = (_QWORD *)(v5 + 64);
  if ((a2 & 1) == 0)
    goto LABEL_43;
LABEL_39:
  v35 = 1 << *(_BYTE *)(v5 + 32);
  if (v35 >= 64)
    bzero(v24, ((unint64_t)(v35 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v24 = -1 << v35;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_43:
  result = swift_release(v5);
  *v3 = v8;
  return result;
}

void sub_100010A90(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_1000ED540)
  {
    v2 = sub_100006D10(255, &qword_1000ED538, HKDisplayCategory_ptr);
    sub_100013AC8();
    v3 = type metadata accessor for _DictionaryStorage(a1, v2, &type metadata for Int);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_1000ED540);
  }
}

_QWORD *sub_100010B08(_QWORD *result, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  int64_t v12;
  uint64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  id v23;

  v5 = result;
  v6 = a4 + 64;
  v7 = -1 << *(_BYTE *)(a4 + 32);
  if (-v7 < 64)
    v8 = ~(-1 << -(char)v7);
  else
    v8 = -1;
  v9 = v8 & *(_QWORD *)(a4 + 64);
  if (!a2)
  {
    v12 = 0;
    v10 = 0;
LABEL_38:
    *v5 = a4;
    v5[1] = v6;
    v5[2] = ~v7;
    v5[3] = v12;
    v5[4] = v9;
    return (_QWORD *)v10;
  }
  v10 = a3;
  if (!a3)
  {
    v12 = 0;
    goto LABEL_38;
  }
  if (a3 < 0)
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  v11 = a2;
  v12 = 0;
  v13 = 0;
  v14 = (unint64_t)(63 - v7) >> 6;
  if (!v9)
    goto LABEL_9;
LABEL_8:
  v15 = __clz(__rbit64(v9));
  v9 &= v9 - 1;
  v16 = v15 | (v12 << 6);
  while (1)
  {
    v20 = 8 * v16;
    v21 = *(void **)(*(_QWORD *)(a4 + 48) + v20);
    ++v13;
    v22 = *(_QWORD *)(*(_QWORD *)(a4 + 56) + v20);
    *v11 = v21;
    v11[1] = v22;
    if (v13 == v10)
    {
      v23 = v21;
      goto LABEL_38;
    }
    v11 += 2;
    result = v21;
    if (v9)
      goto LABEL_8;
LABEL_9:
    v17 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
      __break(1u);
      goto LABEL_40;
    }
    if (v17 >= v14)
      goto LABEL_33;
    v18 = *(_QWORD *)(v6 + 8 * v17);
    if (!v18)
      break;
LABEL_18:
    v9 = (v18 - 1) & v18;
    v16 = __clz(__rbit64(v18)) + (v17 << 6);
    v12 = v17;
  }
  v12 += 2;
  if (v17 + 1 >= v14)
  {
    v9 = 0;
    v12 = v17;
    goto LABEL_37;
  }
  v18 = *(_QWORD *)(v6 + 8 * v12);
  if (v18)
    goto LABEL_14;
  v19 = v17 + 2;
  if (v17 + 2 >= v14)
    goto LABEL_33;
  v18 = *(_QWORD *)(v6 + 8 * v19);
  if (v18)
    goto LABEL_17;
  v12 = v17 + 3;
  if (v17 + 3 >= v14)
  {
    v9 = 0;
    v12 = v17 + 2;
    goto LABEL_37;
  }
  v18 = *(_QWORD *)(v6 + 8 * v12);
  if (v18)
  {
LABEL_14:
    v17 = v12;
    goto LABEL_18;
  }
  v19 = v17 + 4;
  if (v17 + 4 >= v14)
  {
LABEL_33:
    v9 = 0;
LABEL_37:
    v10 = v13;
    goto LABEL_38;
  }
  v18 = *(_QWORD *)(v6 + 8 * v19);
  if (v18)
  {
LABEL_17:
    v17 = v19;
    goto LABEL_18;
  }
  while (1)
  {
    v17 = v19 + 1;
    if (__OFADD__(v19, 1))
      break;
    if (v17 >= v14)
    {
      v9 = 0;
      v12 = v14 - 1;
      goto LABEL_37;
    }
    v18 = *(_QWORD *)(v6 + 8 * v17);
    ++v19;
    if (v18)
      goto LABEL_18;
  }
LABEL_41:
  __break(1u);
  return result;
}

uint64_t sub_100010D08(char *a1, uint64_t a2)
{
  char v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  _BYTE v6[24];

  v2 = *a1;
  v3 = a2 + 16;
  swift_beginAccess(a2 + 16, v6, 0, 0);
  result = swift_weakLoadStrong(v3);
  if (result)
  {
    v5 = result;
    *(_BYTE *)(result + OBJC_IVAR____TtC6Health18AppDeepLinkHandler_canPresentDeepLinks) = v2;
    sub_100010D74();
    return swift_release(v5);
  }
  return result;
}

uint64_t sub_100010D74()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _BYTE *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _BYTE *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _BYTE *v24;
  uint64_t v25;
  _BYTE *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  NSObject *v30;
  os_log_type_t v31;
  uint8_t *v32;
  uint64_t v33;
  uint64_t MetatypeMetadata;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  NSObject *v41;
  os_log_type_t v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  _BYTE *v50;
  uint64_t v51;
  unint64_t v52;
  unint64_t v53;
  os_log_t v54;
  _BYTE *v55;
  _BYTE *v56;
  uint64_t v57;
  NSObject *v58;
  os_log_type_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  unint64_t v65;
  _BYTE *v66;
  uint64_t v67;
  unint64_t v68;
  unint64_t v69;
  uint64_t v70;
  void (*v71)(_BYTE *, uint64_t, uint64_t, uint64_t);
  uint64_t v72;
  char v73;
  _BYTE v75[12];
  int v76;
  os_log_t v77;
  _BYTE *v78;
  _BYTE *v79;
  _BYTE *v80;
  _BYTE *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  _BYTE v85[16];
  _BYTE *v86;
  _BYTE v87[24];

  v1 = v0;
  v81 = (_BYTE *)*v0;
  v2 = type metadata accessor for Logger(0);
  v82 = *(_QWORD *)(v2 - 8);
  v83 = v2;
  v3 = __chkstk_darwin(v2);
  v5 = &v75[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v6 = __chkstk_darwin(v3);
  v80 = &v75[-v7];
  __chkstk_darwin(v6);
  v9 = &v75[-v8];
  sub_1000076D8(0, &qword_1000ECE58, type metadata accessor for DeepLinkContentKind, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
  v11 = __chkstk_darwin(v10);
  v79 = &v75[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v11);
  v14 = &v75[-v13];
  v15 = type metadata accessor for DeepLinkContentKind(0);
  v16 = *(_QWORD *)(v15 - 8);
  v17 = __chkstk_darwin(v15);
  v19 = &v75[-((v18 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v20 = __chkstk_darwin(v17);
  v78 = &v75[-v21];
  v22 = __chkstk_darwin(v20);
  v24 = &v75[-v23];
  __chkstk_darwin(v22);
  v26 = &v75[-v25];
  v27 = (uint64_t)v1 + OBJC_IVAR____TtC6Health18AppDeepLinkHandler_pendingDeepLink;
  swift_beginAccess((char *)v1 + OBJC_IVAR____TtC6Health18AppDeepLinkHandler_pendingDeepLink, v87, 0, 0);
  sub_100011544(v27, (uint64_t)v14);
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v16 + 48))(v14, 1, v15) == 1)
  {
    v28 = sub_1000114C0((uint64_t)v14, (uint64_t)&qword_1000ECE58, (uint64_t)type metadata accessor for DeepLinkContentKind, (uint64_t (*)(_QWORD, uint64_t, uint64_t, void *))sub_1000076D8);
    v29 = static Logger.view.getter(v28);
    v30 = Logger.logObject.getter(v29);
    v31 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v30, v31))
    {
      v32 = (uint8_t *)swift_slowAlloc(12, -1);
      v33 = swift_slowAlloc(32, -1);
      v86 = (_BYTE *)v33;
      *(_DWORD *)v32 = 136446210;
      v84 = (uint64_t)v81;
      MetatypeMetadata = swift_getMetatypeMetadata(v81);
      v35 = String.init<A>(describing:)(&v84, MetatypeMetadata);
      v37 = v36;
      v84 = sub_100012B20(v35, v36, (uint64_t *)&v86);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v84, v85, v32 + 4, v32 + 12);
      swift_bridgeObjectRelease(v37);
      _os_log_impl((void *)&_mh_execute_header, v30, v31, "[%{public}s]: No pending deep link to execute", v32, 0xCu);
      swift_arrayDestroy(v33, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v33, -1, -1);
      swift_slowDealloc(v32, -1, -1);
    }

    (*(void (**)(_BYTE *, uint64_t))(v82 + 8))(v5, v83);
    goto LABEL_14;
  }
  v38 = sub_100025BFC((uint64_t)v14, (uint64_t)v26);
  v39 = (uint64_t)v26;
  if (*((_BYTE *)v1 + OBJC_IVAR____TtC6Health18AppDeepLinkHandler_canPresentDeepLinks) != 1)
  {
    v56 = v80;
    static Logger.view.getter(v38);
    v57 = sub_100025C40((uint64_t)v26, (uint64_t)v19);
    v58 = Logger.logObject.getter(v57);
    v59 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v58, v59))
    {
      v60 = swift_slowAlloc(22, -1);
      v61 = swift_slowAlloc(64, -1);
      v86 = (_BYTE *)v61;
      *(_DWORD *)v60 = 136446466;
      v79 = v26;
      v84 = (uint64_t)v81;
      v62 = swift_getMetatypeMetadata(v81);
      v63 = String.init<A>(describing:)(&v84, v62);
      v65 = v64;
      v84 = sub_100012B20(v63, v64, (uint64_t *)&v86);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v84, v85, v60 + 4, v60 + 12);
      swift_bridgeObjectRelease(v65);
      *(_WORD *)(v60 + 12) = 2082;
      v66 = v78;
      sub_100025C40((uint64_t)v19, (uint64_t)v78);
      v67 = String.init<A>(describingSensitive:)(v66, v15);
      v69 = v68;
      v84 = sub_100012B20(v67, v68, (uint64_t *)&v86);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v84, v85, v60 + 14, v60 + 22);
      swift_bridgeObjectRelease(v69);
      sub_100024498((uint64_t)v19);
      _os_log_impl((void *)&_mh_execute_header, v58, v59, "[%{public}s]: deep link is not eligible for presentation %{public}s", (uint8_t *)v60, 0x16u);
      swift_arrayDestroy(v61, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v61, -1, -1);
      swift_slowDealloc(v60, -1, -1);

      (*(void (**)(_BYTE *, uint64_t))(v82 + 8))(v80, v83);
      v70 = (uint64_t)v79;
    }
    else
    {

      sub_100024498((uint64_t)v19);
      (*(void (**)(_BYTE *, uint64_t))(v82 + 8))(v56, v83);
      v70 = (uint64_t)v26;
    }
    sub_100024498(v70);
LABEL_14:
    v73 = 0;
    return v73 & 1;
  }
  static Logger.view.getter(v38);
  v40 = sub_100025C40((uint64_t)v26, (uint64_t)v24);
  v41 = Logger.logObject.getter(v40);
  v42 = static os_log_type_t.default.getter();
  v43 = v42;
  if (os_log_type_enabled(v41, v42))
  {
    v44 = swift_slowAlloc(22, -1);
    v77 = v41;
    v45 = v44;
    v80 = (_BYTE *)swift_slowAlloc(64, -1);
    v86 = v80;
    *(_DWORD *)v45 = 136446466;
    v84 = (uint64_t)v81;
    v46 = swift_getMetatypeMetadata(v81);
    v76 = v43;
    v47 = String.init<A>(describing:)(&v84, v46);
    v81 = v9;
    v49 = v48;
    v84 = sub_100012B20(v47, v48, (uint64_t *)&v86);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v84, v85, v45 + 4, v45 + 12);
    swift_bridgeObjectRelease(v49);
    *(_WORD *)(v45 + 12) = 2082;
    v50 = v78;
    sub_100025C40((uint64_t)v24, (uint64_t)v78);
    v51 = String.init<A>(describingSensitive:)(v50, v15);
    v53 = v52;
    v84 = sub_100012B20(v51, v52, (uint64_t *)&v86);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v84, v85, v45 + 14, v45 + 22);
    swift_bridgeObjectRelease(v53);
    sub_100024498((uint64_t)v24);
    v54 = v77;
    _os_log_impl((void *)&_mh_execute_header, v77, (os_log_type_t)v76, "[%{public}s]: executing pending deep link: %{public}s", (uint8_t *)v45, 0x16u);
    v55 = v80;
    swift_arrayDestroy(v80, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v55, -1, -1);
    swift_slowDealloc(v45, -1, -1);

    (*(void (**)(_BYTE *, uint64_t))(v82 + 8))(v81, v83);
  }
  else
  {
    sub_100024498((uint64_t)v24);

    (*(void (**)(_BYTE *, uint64_t))(v82 + 8))(v9, v83);
  }
  v71 = *(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(v16 + 56);
  v72 = (uint64_t)v79;
  v71(v79, 1, 1, v15);
  swift_beginAccess(v27, &v84, 33, 0);
  sub_100025C84(v72, v27);
  swift_endAccess(&v84);
  v73 = sub_100024650(v39);
  sub_100024498(v39);
  return v73 & 1;
}

uint64_t sub_1000114C0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(_QWORD, uint64_t, uint64_t, void *))
{
  uint64_t v5;

  v5 = a4(0, a2, a3, &type metadata accessor for Optional);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(a1, v5);
  return a1;
}

uint64_t sub_100011508(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(_QWORD))
{
  uint64_t v6;

  v6 = a5(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(a1, v6);
  return a1;
}

uint64_t sub_100011544(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_1000076D8(0, &qword_1000ECE58, type metadata accessor for DeepLinkContentKind, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t type metadata accessor for DeepLinkContentKind(uint64_t a1)
{
  return sub_100006A08(a1, qword_1000ECDD8, (uint64_t)&nominal type descriptor for DeepLinkContentKind);
}

void sub_1000115B4(void **a1, void *a2, void *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t ObjectType;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  NSObject *v25;
  os_log_type_t v26;
  _BOOL4 v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t MetatypeMetadata;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  void (*v36)(char *, uint64_t);
  uint64_t v37;
  void **v38;
  uint64_t v39;
  uint64_t v40;
  void *v41;
  void **v42;
  id v43;
  unsigned int v44;
  uint64_t v45;
  uint64_t v46;
  id v47;
  id v48;
  id v49;
  uint64_t v50;
  void *v51;
  _UNKNOWN **v52;
  __int128 v53;
  uint64_t v54;
  void *v55;
  void *v56;
  void *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  void (*v62)(uint64_t, uint64_t, uint64_t, uint64_t);
  id v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  unint64_t v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  void **v87;
  void *v88;
  uint64_t v89;
  void *v90;
  char *v91;
  id v92;
  uint64_t KeyPath;
  uint64_t v94;
  uint64_t v95;
  id v96;
  uint64_t v97;
  void **v98;
  uint64_t v99;
  NSObject *v100;
  int v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  unint64_t v106;
  unint64_t v107;
  uint64_t v108;
  uint64_t v109;
  id v110;
  void *v111;
  id v112;
  NSObject *v113;
  os_log_type_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  unint64_t v118;
  unint64_t v119;
  id v120;
  id v121;
  uint64_t v122;
  id v123;
  unint64_t v124;
  unint64_t v125;
  unint64_t v126;
  uint64_t v127;
  char *v128;
  id v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  void *v133;
  uint64_t v134;
  char *v135;
  NSObject *v136;
  os_log_type_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  void *v142;
  unint64_t v143;
  unint64_t v144;
  id v145;
  uint64_t v146;
  unint64_t v147;
  unint64_t v148;
  uint64_t v149;
  id v150;
  void *v151;
  char *v152;
  NSObject *v153;
  os_log_type_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  void *v158;
  unint64_t v159;
  unint64_t v160;
  id v161;
  uint64_t v162;
  unint64_t v163;
  unint64_t v164;
  uint64_t v165;
  void *v166;
  char v167;
  id v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  void *v173;
  uint64_t v174;
  __int128 v175;
  id v176;
  uint64_t v177;
  void (*v178)(char *, uint64_t);
  __int128 v179;
  __int128 v180;
  char *v181;
  id v182;
  char *v183;
  char *v184;
  uint64_t v185;
  char *v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  void **v190;
  char *v191;
  void *v192;
  uint64_t v193;
  uint64_t v194;
  void **v195;
  uint64_t v196;
  void *v197;
  __int128 v198;
  __int128 v199;
  __int128 v200;
  __int128 v201;
  _UNKNOWN **v202;
  uint64_t v203;
  uint64_t v204;

  v4 = v3;
  v195 = a1;
  ObjectType = swift_getObjectType(v3);
  sub_1000127F0(0, &qword_1000EF090, (uint64_t (*)(_QWORD, void *))&type metadata accessor for Published.Publisher);
  v187 = v8;
  v185 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v184 = (char *)&v177 - v9;
  sub_100013F48(0);
  v188 = *(_QWORD *)(v10 - 8);
  v189 = v10;
  __chkstk_darwin(v10);
  v186 = (char *)&v177 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v196 = type metadata accessor for Logger(0);
  v12 = *(_QWORD *)(v196 - 8);
  v13 = __chkstk_darwin(v196);
  v190 = (void **)((char *)&v177 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  v15 = __chkstk_darwin(v13);
  v181 = (char *)&v177 - v16;
  v17 = __chkstk_darwin(v15);
  v183 = (char *)&v177 - v18;
  v19 = __chkstk_darwin(v17);
  v191 = (char *)&v177 - v20;
  v21 = __chkstk_darwin(v19);
  v23 = (char *)&v177 - v22;
  v24 = static Logger.general.getter(v21);
  v25 = Logger.logObject.getter(v24);
  v26 = static os_log_type_t.default.getter();
  v27 = os_log_type_enabled(v25, v26);
  v192 = a3;
  v182 = a2;
  if (v27)
  {
    v28 = swift_slowAlloc(22, -1);
    v194 = v4;
    v29 = v28;
    v30 = swift_slowAlloc(64, -1);
    v203 = v30;
    *(_DWORD *)v29 = 136446466;
    *(_QWORD *)&v200 = ObjectType;
    MetatypeMetadata = swift_getMetatypeMetadata(ObjectType);
    v193 = ObjectType;
    v32 = String.init<A>(describing:)(&v200, MetatypeMetadata);
    v34 = v33;
    *(_QWORD *)&v200 = sub_100012B20(v32, v33, &v203);
    v35 = v196;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v200, (char *)&v200 + 8, v29 + 4, v29 + 12);
    swift_bridgeObjectRelease(v34);
    *(_WORD *)(v29 + 12) = 2082;
    *(_QWORD *)&v200 = sub_100012B20(0xD00000000000001FLL, 0x80000001000BC460, &v203);
    ObjectType = v193;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v200, (char *)&v200 + 8, v29 + 14, v29 + 22);
    _os_log_impl((void *)&_mh_execute_header, v25, v26, "[%{public}s]: Lifecycle: %{public}s", (uint8_t *)v29, 0x16u);
    swift_arrayDestroy(v30, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v30, -1, -1);
    v4 = v194;
    swift_slowDealloc(v29, -1, -1);

    v36 = *(void (**)(char *, uint64_t))(v12 + 8);
    v36(v23, v35);
  }
  else
  {

    v36 = *(void (**)(char *, uint64_t))(v12 + 8);
    v36(v23, v196);
  }
  v37 = objc_opt_self(UIWindowScene);
  v38 = v195;
  v39 = swift_dynamicCastObjCClass(v195, v37);
  if (v39)
  {
    v40 = v39;
    v41 = (void *)objc_opt_self(UIApplication);
    v42 = v38;
    v43 = objc_msgSend(v41, "sharedApplication");
    v44 = objc_msgSend(v43, "isProtectedDataAvailable");

    if (v44)
    {
      sub_10000F328();
      if (qword_1000EC140 != -1)
        swift_once(&qword_1000EC140, sub_100014684);
      sub_10000D924();
      sub_10000D174();
      v46 = sub_100006D10(0, &qword_1000EF0A8, UICollectionView_ptr);
      v47 = objc_msgSend((id)swift_getObjCClassFromMetadata(v46), "appearance");
      v48 = objc_msgSend((id)objc_opt_self(UIColor), "systemGroupedBackgroundColor");
      objc_msgSend(v47, "setBackgroundColor:", v48);

      v49 = objc_msgSend(objc_allocWithZone((Class)UIWindow), "initWithWindowScene:", v40);
      v50 = OBJC_IVAR____TtC6Health13SceneDelegate_window;
      v51 = *(void **)(v4 + OBJC_IVAR____TtC6Health13SceneDelegate_window);
      *(_QWORD *)(v4 + OBJC_IVAR____TtC6Health13SceneDelegate_window) = v49;

      sub_10006B4FC(&v200);
      v52 = v202;
      v53 = v201;
      v54 = v4 + OBJC_IVAR____TtC6Health13SceneDelegate_rootViewController;
      v55 = *(void **)(v4 + OBJC_IVAR____TtC6Health13SceneDelegate_rootViewController);
      *(_OWORD *)v54 = v200;
      *(_OWORD *)(v54 + 16) = v53;
      *(_QWORD *)(v54 + 32) = v52;

      v56 = *(void **)(v4 + v50);
      if (v56)
        objc_msgSend(v56, "setRootViewController:", *(_QWORD *)v54);
      v193 = ObjectType;
      v178 = v36;
      v190 = v42;
      v194 = v4;
      v57 = *(void **)v54;
      if (!*(_QWORD *)v54)
      {
        __break(1u);
        goto LABEL_48;
      }
      v58 = type metadata accessor for AppDeepLinkHandler(0);
      v59 = swift_allocObject(v58, *(unsigned int *)(v58 + 48), *(unsigned __int16 *)(v58 + 52));
      v60 = v59 + OBJC_IVAR____TtC6Health18AppDeepLinkHandler_pendingDeepLink;
      v61 = type metadata accessor for DeepLinkContentKind(0);
      v62 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v61 - 8) + 56);
      v180 = *(_OWORD *)(v54 + 8);
      v195 = (void **)v54;
      v179 = *(_OWORD *)(v54 + 24);
      v62(v60, 1, 1, v61);
      *(_QWORD *)(v59 + OBJC_IVAR____TtC6Health18AppDeepLinkHandler_canPresentDeepLinksCancellable) = 0;
      sub_100006D10(0, (unint64_t *)&unk_1000EF0B0, NSUserDefaults_ptr);
      v63 = v57;
      v64 = static NSUserDefaults.healthAppShared.getter();
      LOBYTE(v200) = 0;
      UserDefault.init(key:userDefaults:fallbackValue:isAppleInternalOnly:)(0xD000000000000014, 0x80000001000BC480, v64, &v200, 1, &type metadata for Bool);
      v65 = v59 + OBJC_IVAR____TtC6Health18AppDeepLinkHandler_rootViewController;
      *(_QWORD *)v65 = v63;
      *(_OWORD *)(v65 + 8) = v180;
      *(_OWORD *)(v65 + 24) = v179;
      *(_BYTE *)(v59 + OBJC_IVAR____TtC6Health18AppDeepLinkHandler_canPresentDeepLinks) = 1;
      v66 = OBJC_IVAR____TtC6Health13SceneDelegate_deepLinkHandler;
      v67 = v194;
      v68 = *(_QWORD *)(v194 + OBJC_IVAR____TtC6Health13SceneDelegate_deepLinkHandler);
      *(_QWORD *)(v194 + OBJC_IVAR____TtC6Health13SceneDelegate_deepLinkHandler) = v59;
      swift_release(v68);
      v69 = *(_QWORD *)(v67 + v66);
      if (v69)
      {
        swift_retain(*(_QWORD *)(v67 + v66));
        v70 = sub_100012838();
        swift_beginAccess(v70 + OBJC_IVAR____TtC6Health16IntroFlowManager__isPresentingContent, &v200, 33, 0);
        sub_1000127F0(0, (unint64_t *)&qword_1000EDEE8, (uint64_t (*)(_QWORD, void *))&type metadata accessor for Published);
        v71 = v184;
        Published.projectedValue.getter();
        swift_endAccess(&v200);
        v72 = sub_100013D84();
        v73 = v186;
        v74 = v187;
        Publisher.map<A>(_:)(sub_10001387C, 0, v187, &type metadata for Bool, v72);
        (*(void (**)(char *, uint64_t))(v185 + 8))(v71, v74);
        v75 = sub_100013198((unint64_t *)&unk_1000EF0C0, (uint64_t (*)(uint64_t))sub_100013F48, (uint64_t)&protocol conformance descriptor for Publishers.Map<A, B>);
        v76 = v189;
        v77 = Publisher.eraseToAnyPublisher()(v189, v75);
        (*(void (**)(char *, uint64_t))(v188 + 8))(v73, v76);
        swift_release(v70);
        v78 = OBJC_IVAR____TtC6Health18AppDeepLinkHandler_canPresentDeepLinksCancellable;
        v79 = *(_QWORD *)(v69 + OBJC_IVAR____TtC6Health18AppDeepLinkHandler_canPresentDeepLinksCancellable);
        if (v79)
        {
          swift_retain(*(_QWORD *)(v69 + OBJC_IVAR____TtC6Health18AppDeepLinkHandler_canPresentDeepLinksCancellable));
          AnyCancellable.cancel()();
          swift_release(v79);
        }
        *(_QWORD *)&v200 = v77;
        v80 = swift_allocObject(&unk_1000E0650, 24, 7);
        swift_weakInit(v80 + 16, v69);
        sub_100013E60();
        v82 = v81;
        v83 = sub_100013198(&qword_1000EF0D0, (uint64_t (*)(uint64_t))sub_100013E60, (uint64_t)&protocol conformance descriptor for AnyPublisher<A, B>);
        v84 = Publisher<>.sink(receiveValue:)(sub_100013838, v80, v82, v83);
        swift_release(v80);
        v85 = *(_QWORD *)(v69 + v78);
        *(_QWORD *)(v69 + v78) = v84;
        swift_release(v69);
        swift_release(v77);
        swift_release(v85);
        v67 = v194;
      }
      objc_msgSend(*(id *)(v67 + v50), "makeKeyAndVisible");
      v86 = sub_100012838();
      v87 = v195;
      v88 = *v195;
      v89 = *(_QWORD *)(v67 + v66);
      if (v89)
      {
        *((_QWORD *)&v201 + 1) = v58;
        v202 = &off_1000DD398;
        *(_QWORD *)&v200 = v89;
        v91 = v191;
        v90 = v192;
        if (v88)
        {
LABEL_17:
          swift_retain(v89);
          v92 = v88;
          if ((sub_10000A634() & 1) != 0)
          {
            KeyPath = swift_getKeyPath(&unk_1000B46F8);
            v94 = swift_getKeyPath(&unk_1000B4720);
            LOBYTE(v203) = 1;
            swift_retain(v86);
            static Published.subscript.setter(&v203, v86, KeyPath, v94);
            v95 = swift_allocObject(&unk_1000E06C8, 32, 7);
            *(_QWORD *)(v95 + 16) = v86;
            *(_QWORD *)(v95 + 24) = v92;
            v96 = v92;
            swift_retain(v86);
            sub_100075D70(v96, (uint64_t)&v200, (uint64_t)sub_10006B758, v95);
            swift_release(v86);
            v97 = v95;
          }
          else
          {
            v108 = swift_allocObject(&unk_1000E0678, 24, 7);
            swift_weakInit(v108 + 16, v86);
            v109 = swift_allocObject(&unk_1000E06A0, 32, 7);
            *(_QWORD *)(v109 + 16) = v108;
            *(_QWORD *)(v109 + 24) = v92;
            v96 = v92;
            swift_retain(v108);
            sub_100006A3C(v96, (void (*)(void))sub_10001476C, v109);
            swift_release(v86);
            swift_release(v108);
            v97 = v109;
          }
          swift_release(v97);

LABEL_27:
          sub_100014424((uint64_t)&v200);
          v110 = objc_msgSend(v90, "shortcutItem");
          if (v110)
          {
            v111 = v110;
            static Logger.general.getter(v110);
            v112 = v111;
            v113 = Logger.logObject.getter(v112);
            v114 = static os_log_type_t.default.getter();
            if (os_log_type_enabled(v113, v114))
            {
              v115 = swift_slowAlloc(22, -1);
              v189 = swift_slowAlloc(64, -1);
              v203 = v189;
              *(_DWORD *)v115 = 136446466;
              *(_QWORD *)&v200 = v193;
              v116 = swift_getMetatypeMetadata(v193);
              v117 = String.init<A>(describing:)(&v200, v116);
              v119 = v118;
              *(_QWORD *)&v200 = sub_100012B20(v117, v118, &v203);
              UnsafeMutableRawBufferPointer.copyMemory(from:)(&v200, (char *)&v200 + 8, v115 + 4, v115 + 12);
              swift_bridgeObjectRelease(v119);
              *(_WORD *)(v115 + 12) = 2082;
              v120 = v112;
              v121 = objc_msgSend(v120, "description");
              v122 = static String._unconditionallyBridgeFromObjectiveC(_:)(v121);
              v123 = v112;
              v125 = v124;

              *(_QWORD *)&v200 = sub_100012B20(v122, v125, &v203);
              v90 = v192;
              UnsafeMutableRawBufferPointer.copyMemory(from:)(&v200, (char *)&v200 + 8, v115 + 14, v115 + 22);

              v126 = v125;
              v112 = v123;
              swift_bridgeObjectRelease(v126);
              _os_log_impl((void *)&_mh_execute_header, v113, v114, "[%{public}s]: performing shortcut item from connectionOptions: %{public}s", (uint8_t *)v115, 0x16u);
              v127 = v189;
              swift_arrayDestroy(v189, 2, (char *)&type metadata for Any + 8);
              v87 = v195;
              swift_slowDealloc(v127, -1, -1);
              swift_slowDealloc(v115, -1, -1);

              v128 = v191;
            }
            else
            {

              v128 = v91;
            }
            v178(v128, v196);
            sub_10006A5B8(v112);
          }
          else
          {
            v129 = objc_msgSend(v90, "userActivities");
            v130 = sub_100006D10(0, &qword_1000EE800, NSUserActivity_ptr);
            v131 = sub_1000127B0(&qword_1000EF0E8, &qword_1000EE800, NSUserActivity_ptr);
            v132 = static Set._unconditionallyBridgeFromObjectiveC(_:)(v129, v130, v131);

            v133 = (void *)sub_10005C694(v132);
            v134 = swift_bridgeObjectRelease(v132);
            if (v133)
            {
              v135 = v183;
              static Logger.general.getter(v134);
              v112 = v133;
              v136 = Logger.logObject.getter(v112);
              v137 = static os_log_type_t.default.getter();
              if (os_log_type_enabled(v136, v137))
              {
                v138 = swift_slowAlloc(22, -1);
                v139 = swift_slowAlloc(64, -1);
                v203 = v139;
                *(_DWORD *)v138 = 136446466;
                *(_QWORD *)&v200 = v193;
                v140 = swift_getMetatypeMetadata(v193);
                v141 = String.init<A>(describing:)(&v200, v140);
                v142 = v112;
                v144 = v143;
                *(_QWORD *)&v200 = sub_100012B20(v141, v143, &v203);
                UnsafeMutableRawBufferPointer.copyMemory(from:)(&v200, (char *)&v200 + 8, v138 + 4, v138 + 12);
                swift_bridgeObjectRelease(v144);
                *(_WORD *)(v138 + 12) = 2080;
                *(_QWORD *)&v200 = v142;
                v145 = v142;
                v146 = String.init<A>(reflecting:)(&v200, v130);
                v148 = v147;
                *(_QWORD *)&v200 = sub_100012B20(v146, v147, &v203);
                UnsafeMutableRawBufferPointer.copyMemory(from:)(&v200, (char *)&v200 + 8, v138 + 14, v138 + 22);

                v112 = v142;
                swift_bridgeObjectRelease(v148);
                _os_log_impl((void *)&_mh_execute_header, v136, v137, "[%{public}s]: continuing userActivity from connectionOptions: %s", (uint8_t *)v138, 0x16u);
                swift_arrayDestroy(v139, 2, (char *)&type metadata for Any + 8);
                v149 = v139;
                v90 = v192;
                swift_slowDealloc(v149, -1, -1);
                swift_slowDealloc(v138, -1, -1);

              }
              else
              {

              }
              v178(v135, v196);
              v166 = v112;
              v167 = 2;
            }
            else
            {
              v150 = objc_msgSend(v182, "stateRestorationActivity");
              if (!v150)
                goto LABEL_44;
              v151 = v150;
              v152 = v181;
              static Logger.general.getter(v150);
              v112 = v151;
              v153 = Logger.logObject.getter(v112);
              v154 = static os_log_type_t.default.getter();
              if (os_log_type_enabled(v153, v154))
              {
                v155 = swift_slowAlloc(22, -1);
                v156 = swift_slowAlloc(64, -1);
                *(_QWORD *)&v200 = v156;
                *(_DWORD *)v155 = 136446466;
                v157 = sub_10006A1B0(v193);
                v158 = v112;
                v160 = v159;
                v203 = sub_100012B20(v157, v159, (uint64_t *)&v200);
                UnsafeMutableRawBufferPointer.copyMemory(from:)(&v203, &v204, v155 + 4, v155 + 12);
                swift_bridgeObjectRelease(v160);
                *(_WORD *)(v155 + 12) = 2080;
                v203 = (uint64_t)v158;
                v161 = v158;
                v162 = String.init<A>(reflecting:)(&v203, v130);
                v164 = v163;
                v203 = sub_100012B20(v162, v163, (uint64_t *)&v200);
                UnsafeMutableRawBufferPointer.copyMemory(from:)(&v203, &v204, v155 + 14, v155 + 22);

                v112 = v158;
                swift_bridgeObjectRelease(v164);
                _os_log_impl((void *)&_mh_execute_header, v153, v154, "[%{public}s]: restoring app from state restoration activity: %s", (uint8_t *)v155, 0x16u);
                swift_arrayDestroy(v156, 2, (char *)&type metadata for Any + 8);
                v165 = v156;
                v90 = v192;
                swift_slowDealloc(v165, -1, -1);
                swift_slowDealloc(v155, -1, -1);

              }
              else
              {

              }
              v178(v152, v196);
              v166 = v112;
              v167 = 0;
            }
            sub_10006A2A4(v166, v167);
            v87 = v195;
          }

LABEL_44:
          v168 = objc_msgSend(v90, "URLContexts");
          v169 = sub_100006D10(0, &qword_1000EF0F0, UIOpenURLContext_ptr);
          v170 = sub_1000127B0(&qword_1000EF0F8, &qword_1000EF0F0, UIOpenURLContext_ptr);
          v171 = static Set._unconditionallyBridgeFromObjectiveC(_:)(v168, v169, v170);

          sub_100007808(v171);
          swift_bridgeObjectRelease(v171);
          v172 = sub_1000086CC();
          v173 = *v87;
          if (*v87)
          {
            v174 = v172;
            v197 = *v87;
            v175 = *(_OWORD *)(v87 + 3);
            v198 = *(_OWORD *)(v87 + 1);
            v199 = v175;
            v176 = v173;
            dispatch thunk of HealthAppAnalyticsManager.submitLaunchInteraction(using:)(&v197);

            swift_release(v174);
            return;
          }
LABEL_48:
          __break(1u);
          return;
        }
      }
      else
      {
        v202 = 0;
        v200 = 0u;
        v201 = 0u;
        v91 = v191;
        v90 = v192;
        if (v88)
          goto LABEL_17;
      }
      swift_retain(v89);
      swift_release(v86);
      goto LABEL_27;
    }
    v98 = v190;
    v99 = static Logger.general.getter(v45);
    v100 = Logger.logObject.getter(v99);
    v101 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v100, (os_log_type_t)v101))
    {
      v102 = swift_slowAlloc(22, -1);
      v103 = swift_slowAlloc(64, -1);
      v203 = v103;
      *(_DWORD *)v102 = 136446466;
      *(_QWORD *)&v200 = ObjectType;
      v104 = swift_getMetatypeMetadata(ObjectType);
      v105 = String.init<A>(describing:)(&v200, v104);
      v107 = v106;
      *(_QWORD *)&v200 = sub_100012B20(v105, v106, &v203);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v200, (char *)&v200 + 8, v102 + 4, v102 + 12);
      swift_bridgeObjectRelease(v107);
      *(_WORD *)(v102 + 12) = 2082;
      *(_QWORD *)&v200 = sub_100012B20(0xD00000000000001FLL, 0x80000001000BC460, &v203);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v200, (char *)&v200 + 8, v102 + 14, v102 + 22);
      _os_log_impl((void *)&_mh_execute_header, v100, (os_log_type_t)v101, "[%{public}s]: %{public}s isProtectedDataAvailable is false. Ending early!", (uint8_t *)v102, 0x16u);
      swift_arrayDestroy(v103, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v103, -1, -1);
      swift_slowDealloc(v102, -1, -1);

    }
    else
    {

    }
    v36((char *)v98, v196);
  }
}

uint64_t sub_1000127B0(unint64_t *a1, unint64_t *a2, _QWORD *a3)
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    v5 = sub_100006D10(255, a2, a3);
    result = swift_getWitnessTable(&protocol conformance descriptor for NSObject, v5);
    atomic_store(result, a1);
  }
  return result;
}

void sub_1000127F0(uint64_t a1, unint64_t *a2, uint64_t (*a3)(_QWORD, void *))
{
  unint64_t v4;
  uint64_t v5;

  if (!*a2)
  {
    v4 = a3(0, &type metadata for Bool);
    if (!v5)
      atomic_store(v4, a2);
  }
}

uint64_t sub_100012838()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  char v11;

  v1 = OBJC_IVAR____TtC6Health13SceneDelegate____lazy_storage___introFlowManager;
  v2 = *(_QWORD *)(v0 + OBJC_IVAR____TtC6Health13SceneDelegate____lazy_storage___introFlowManager);
  if (v2)
  {
    v3 = *(_QWORD *)(v0 + OBJC_IVAR____TtC6Health13SceneDelegate____lazy_storage___introFlowManager);
  }
  else
  {
    v4 = v0;
    v5 = type metadata accessor for HealthWelcomeFlowSignalProvider();
    swift_allocObject(v5, *(unsigned int *)(v5 + 48), *(unsigned __int16 *)(v5 + 52));
    v6 = HealthWelcomeFlowSignalProvider.init()();
    v7 = type metadata accessor for IntroFlowManager(0);
    v3 = swift_allocObject(v7, *(unsigned int *)(v7 + 48), *(unsigned __int16 *)(v7 + 52));
    *(_QWORD *)(v3 + 16) = 0;
    v11 = 0;
    Published.init(initialValue:)(&v11, &type metadata for Bool);
    v8 = (uint64_t *)(v3 + OBJC_IVAR____TtC6Health16IntroFlowManager_healthWelcomeFlowSignalProvider);
    *v8 = v6;
    v8[1] = (uint64_t)&protocol witness table for HealthWelcomeFlowSignalProvider;
    type metadata accessor for HealthAppNotificationManager(0);
    *(_QWORD *)(v3 + OBJC_IVAR____TtC6Health16IntroFlowManager_healthAppNotificationManager) = HealthAppNotificationManager.__allocating_init()();
    v9 = *(_QWORD *)(v4 + v1);
    *(_QWORD *)(v4 + v1) = v3;
    swift_retain(v3);
    swift_release(v9);
    v2 = 0;
  }
  swift_retain(v2);
  return v3;
}

uint64_t sub_10001292C(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t ObjectType;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t MetatypeMetadata;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  ObjectType = swift_getObjectType(v2);
  v6 = type metadata accessor for Logger(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = __chkstk_darwin(v6);
  v10 = (char *)&v22 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = static Logger.general.getter(v8);
  v12 = Logger.logObject.getter(v11);
  v13 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v12, v13))
  {
    v14 = swift_slowAlloc(22, -1);
    v22 = a1;
    v15 = v14;
    v16 = swift_slowAlloc(64, -1);
    v24 = v16;
    v25 = ObjectType;
    *(_DWORD *)v15 = 136446466;
    MetatypeMetadata = swift_getMetatypeMetadata(ObjectType);
    v23 = v6;
    v18 = String.init<A>(describing:)(&v25, MetatypeMetadata);
    v20 = v19;
    v25 = sub_100012B20(v18, v19, &v24);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v25, &v26, v15 + 4, v15 + 12);
    swift_bridgeObjectRelease(v20);
    *(_WORD *)(v15 + 12) = 2082;
    v25 = sub_100012B20(v22, a2, &v24);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v25, &v26, v15 + 14, v15 + 22);
    _os_log_impl((void *)&_mh_execute_header, v12, v13, "[%{public}s]: Lifecycle: %{public}s", (uint8_t *)v15, 0x16u);
    swift_arrayDestroy(v16, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v16, -1, -1);
    swift_slowDealloc(v15, -1, -1);

    return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v10, v23);
  }
  else
  {

    return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v10, v6);
  }
}

uint64_t sub_100012B20(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12[3];
  void *ObjectType;

  v6 = sub_100012C4C(v12, 0, 0, 1, a1, a2);
  v7 = v12[0];
  if (v6)
  {
    v8 = v6;
    ObjectType = (void *)swift_getObjectType(v6);
    v12[0] = v8;
    v9 = *a3;
    if (*a3)
    {
      sub_100012C10((uint64_t)v12, *a3);
      *a3 = v9 + 32;
    }
  }
  else
  {
    ObjectType = &type metadata for _StringGuts;
    v12[0] = a1;
    v12[1] = a2;
    v10 = *a3;
    if (*a3)
    {
      sub_100012C10((uint64_t)v12, *a3);
      *a3 = v10 + 32;
    }
    swift_bridgeObjectRetain(a2);
  }
  _s6Health23OpenSleepScheduleIntentVwxx_0(v12);
  return v7;
}

uint64_t _s6Health23OpenSleepScheduleIntentVwxx_0(_QWORD *a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1[3] - 8);
  if ((*(_BYTE *)(v1 + 82) & 2) != 0)
    return swift_release(*a1);
  else
    return (*(uint64_t (**)(void))(v1 + 8))();
}

uint64_t sub_100012C10(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 24) = v3;
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t sub_100012C4C(uint64_t *a1, char *__dst, uint64_t a3, char a4, uint64_t a5, unint64_t a6)
{
  uint64_t v8;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  int v14;
  _QWORD __src[2];

  if ((a6 & 0x2000000000000000) != 0)
  {
    if ((a4 & 1) == 0)
    {
      if (__dst)
      {
        v12 = HIBYTE(a6) & 0xF;
        if (a3 - (uint64_t)__dst > v12)
        {
          __src[0] = a5;
          __src[1] = a6 & 0xFFFFFFFFFFFFFFLL;
          if (__src >= (_QWORD *)&__dst[v12] || (char *)__src + v12 <= __dst)
          {
            memcpy(__dst, __src, HIBYTE(a6) & 0xF);
            UnsafeMutableRawBufferPointer.subscript.setter(0, HIBYTE(a6) & 0xF, __dst, a3);
            result = 0;
            *a1 = (uint64_t)__dst;
            return result;
          }
          goto LABEL_17;
        }
      }
    }
LABEL_13:
    result = sub_100012E28(a5, a6);
    *a1 = v13;
    return result;
  }
  if ((a6 & 0x1000000000000000) != 0)
    goto LABEL_13;
  if ((a5 & 0x1000000000000000) != 0)
  {
    v8 = (a6 & 0xFFFFFFFFFFFFFFFLL) + 32;
    goto LABEL_5;
  }
  v8 = _StringObject.sharedUTF8.getter(a5, a6);
  if (!v8)
  {
    _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Unexpectedly found nil while unwrapping an Optional value", 57, 2, "Swift/StringTesting.swift", 25, 2, 151, 0);
    __break(1u);
LABEL_17:
    LOBYTE(v14) = 2;
    result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutableRawPointer.initializeMemory overlapping range", 58, 2, "Swift/UnsafeRawPointer.swift", 28, v14, 1173, 0);
    __break(1u);
    return result;
  }
LABEL_5:
  *a1 = v8;
  if ((a6 & 0x8000000000000000) != 0)
    return 0;
  else
    return swift_unknownObjectRetain(a6 & 0xFFFFFFFFFFFFFFFLL);
}

_QWORD *sub_100012E04(_QWORD *result, uint64_t a2)
{
  if ((*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80) & 0x20000) != 0)
    return (_QWORD *)(*result
                    + ((*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80) + 16) & ~(unint64_t)*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80)));
  return result;
}

uint64_t sub_100012E28(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;

  v2 = (uint64_t)sub_100012EBC(a1, a2);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v2 = sub_100038410(0, *(_QWORD *)(v2 + 16) + 1, 1, (char *)v2);
  v4 = *(_QWORD *)(v2 + 16);
  v3 = *(_QWORD *)(v2 + 24);
  if (v4 >= v3 >> 1)
    v2 = sub_100038410(v3 > 1, v4 + 1, 1, (char *)v2);
  *(_QWORD *)(v2 + 16) = v4 + 1;
  *(_BYTE *)(v2 + 32 + v4) = 0;
  return v2;
}

_QWORD *sub_100012EBC(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  char v8;
  _QWORD *result;
  int v10;

  if ((a2 & 0x1000000000000000) != 0)
    goto LABEL_10;
  if ((a2 & 0x2000000000000000) != 0)
    v4 = HIBYTE(a2) & 0xF;
  else
    v4 = a1 & 0xFFFFFFFFFFFFLL;
  if (v4)
  {
    while (1)
    {
      v5 = sub_100013030(v4, 0);
      if (v4 < 0)
        break;
      v6 = v5;
      v7 = _StringGuts.copyUTF8(into:)(v5 + 4, v4, a1, a2);
      if ((v8 & 1) != 0)
        goto LABEL_14;
      if (v7 == v4)
        return v6;
      LOBYTE(v10) = 2;
      _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "invalid Collection: less than 'count' elements in collection", 60, 2, "Swift/ContiguousArrayBuffer.swift", 33, v10, 1122, 0);
      __break(1u);
LABEL_10:
      v4 = String.UTF8View._foreignCount()();
      if (!v4)
        return _swiftEmptyArrayStorage;
    }
    LOBYTE(v10) = 2;
    _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutableBufferPointer with negative count", 46, 2, "Swift/UnsafeBufferPointer.swift", 31, v10, 71, 0);
    __break(1u);
LABEL_14:
    LOBYTE(v10) = 2;
    result = (_QWORD *)_assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Insufficient space allocated to copy string contents", 52, 2, "Swift/StringUTF8View.swift", 26, v10, 430, 0);
    __break(1u);
  }
  else
  {
    return _swiftEmptyArrayStorage;
  }
  return result;
}

_QWORD *sub_100013030(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  _QWORD *v5;
  size_t v6;

  if (a2 <= a1)
    v2 = a1;
  else
    v2 = a2;
  if (!v2)
    return _swiftEmptyArrayStorage;
  sub_1000275F4(0, &qword_1000EDB70, (uint64_t)&type metadata for UInt8);
  v5 = (_QWORD *)swift_allocObject(v4, v2 + 32, 7);
  v6 = j__malloc_size(v5);
  v5[2] = a1;
  v5[3] = 2 * v6 - 64;
  return v5;
}

void sub_1000130A0(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t, void *))
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;

  if (!*a2)
  {
    v6 = type metadata accessor for MutableArrayDataSourceWithLayout(255);
    v7 = a3(a1, v6, &protocol witness table for MutableArrayDataSource);
    if (!v8)
      atomic_store(v7, a2);
  }
}

uint64_t sub_100013100(uint64_t a1, unint64_t *a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v5;

  result = *a2;
  if (!*a2)
  {
    v5 = a3;
    result = swift_getExistentialTypeMetadata(1, 0, 1, &v5);
    atomic_store(result, a2);
  }
  return result;
}

uint64_t sub_10001314C(uint64_t a1, unint64_t *a2, uint64_t a3, char a4)
{
  uint64_t result;
  uint64_t v6;

  result = *a2;
  if (!*a2)
  {
    v6 = a3;
    result = swift_getExistentialTypeMetadata(a4 & 1, 0, 1, &v6);
    atomic_store(result, a2);
  }
  return result;
}

uint64_t sub_100013198(unint64_t *a1, uint64_t (*a2)(uint64_t), uint64_t a3)
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    v6 = a2(255);
    result = swift_getWitnessTable(a3, v6);
    atomic_store(result, a1);
  }
  return result;
}

id sub_1000131D8()
{
  void *v0;
  void *v1;
  id result;
  void *v3;
  id v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  NSString *v9;
  Class isa;
  objc_class *v11;
  void *v12;
  double v13;
  double v14;
  uint64_t v15;
  objc_super v16;

  v1 = v0;
  result = objc_msgSend(v0, "view");
  if (!result)
  {
    __break(1u);
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  v3 = result;
  v4 = objc_msgSend(result, "window");

  if (!v4)
  {
LABEL_7:
    v11 = (objc_class *)type metadata accessor for SummaryFeedViewController(0);
    v16.receiver = v1;
    v16.super_class = v11;
    objc_msgSendSuper2(&v16, "viewWillLayoutSubviews");
    result = objc_msgSend(v1, "collectionView");
    if (result)
    {
      v12 = result;
      objc_msgSend(result, "contentOffset");
      v14 = v13;

      v15 = sub_100013198(&qword_1000EEC88, type metadata accessor for SummaryFeedViewController, (uint64_t)&unk_1000B4338);
      return (id)GradientBackgroundPresenting.layoutGradient(yOffset:)(v11, v15, v14);
    }
    goto LABEL_10;
  }
  result = (id)dispatch thunk of CompoundDataSourceCollectionViewController.dataSourceAdaptor.getter();
  if (result)
  {
    v5 = result;
    dispatch thunk of DiffableCollectionViewAdaptor.loadIfNeeded()();
    v6 = swift_release(v5);
    if ((*((_BYTE *)v1 + qword_1000EEAE8) & 1) == 0)
    {
      if (HAFeatureFlagPreloadSummaryCells(v6))
      {
        sub_1000076D8(0, (unint64_t *)&unk_1000EEC90, (uint64_t (*)(uint64_t))type metadata accessor for Mode, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for _ContiguousArrayStorage);
        v8 = swift_allocObject(v7, 40, 7);
        *(_OWORD *)(v8 + 16) = xmmword_1000B11F0;
        *(_QWORD *)(v8 + 32) = NSRunLoopCommonModes;
        type metadata accessor for Mode(0);
        v9 = NSRunLoopCommonModes;
        isa = Array._bridgeToObjectiveC()().super.isa;
        swift_bridgeObjectRelease(v8);
        objc_msgSend(v1, "performSelector:withObject:afterDelay:inModes:", "setVisibleRectEdgeInsetsIfNeeded", 0, isa, 0.0);

      }
    }
    goto LABEL_7;
  }
LABEL_11:
  __break(1u);
  return result;
}

uint64_t type metadata accessor for SummaryFeedViewController(uint64_t a1)
{
  uint64_t result;

  result = qword_1000EEB48;
  if (!qword_1000EEB48)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for SummaryFeedViewController);
  return result;
}

uint64_t type metadata accessor for PersonalizedFeedDataSource(uint64_t a1)
{
  uint64_t result;

  result = qword_1000EE760;
  if (!qword_1000EE760)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for PersonalizedFeedDataSource);
  return result;
}

unint64_t sub_100013434()
{
  unint64_t result;
  void *v1;

  result = qword_1000EEC70;
  if (!qword_1000EEC70)
  {
    v1 = &protocol descriptor for SectionedDataSourceItem;
    result = swift_getExistentialTypeMetadata(1, 0, 1, &v1);
    atomic_store(result, (unint64_t *)&qword_1000EEC70);
  }
  return result;
}

void sub_100013488(uint64_t a1, unint64_t *a2, unint64_t *a3, uint64_t a4)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;

  if (!*a2)
  {
    v6 = sub_100013100(255, a3, a4);
    v7 = type metadata accessor for Optional(a1, v6);
    if (!v8)
      atomic_store(v7, a2);
  }
}

void sub_1000134E0(uint64_t a1)
{
  sub_100026E84(a1, &qword_1000EE150, type metadata accessor for PersonalizedFeedDataSource, sub_10004A030, (uint64_t (*)(uint64_t, uint64_t, uint64_t))&type metadata accessor for DelayedDataSource);
}

id sub_100013504()
{
  _QWORD *v0;

  return *(id *)(*v0 + qword_1000EEAF8);
}

uint64_t sub_10001351C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10001352C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10001353C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10001354C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10001355C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10001356C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10001357C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10001358C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10001359C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_1000135AC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_1000135BC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_1000135CC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_1000135DC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_1000135EC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_1000135FC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10001360C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10001361C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10001362C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10001363C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10001364C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10001365C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10001366C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10001367C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10001368C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10001369C(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_1000136A4(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_1000136AC(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_1000136B4(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_1000136BC(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_1000136C4(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_1000136CC(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_1000136D4(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_1000136DC(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_1000136E4(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_1000136EC(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_1000136F4(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_1000136FC(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_100013704(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10001370C(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_100013714(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10001371C(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_100013724(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10001372C(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_100013734(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10001373C(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_100013744(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10001374C(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_100013754(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10001375C(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v5;

  v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_1000137A0(uint64_t a1, uint64_t (*a2)(_QWORD))
{
  uint64_t v3;

  v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

void sub_1000137DC(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_1000EF4B0)
  {
    v2 = type metadata accessor for CloudSyncRestoreState(255);
    v3 = type metadata accessor for Optional(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_1000EF4B0);
  }
}

uint64_t sub_100013830(uint64_t a1)
{
  uint64_t v1;

  return sub_10000CFCC(a1, v1);
}

uint64_t sub_100013838(char *a1)
{
  uint64_t v1;

  return sub_100010D08(a1, v1);
}

uint64_t type metadata accessor for IntroFlowManager(uint64_t a1)
{
  uint64_t result;

  result = qword_1000EDED8;
  if (!qword_1000EDED8)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for IntroFlowManager);
  return result;
}

_BYTE *sub_10001387C@<X0>(_BYTE *result@<X0>, BOOL *a2@<X8>)
{
  *a2 = (*result & 1) == 0;
  return result;
}

uint64_t sub_1000138A0(uint64_t a1)
{
  uint64_t v1;

  return sub_10000E990(a1, v1);
}

const char *sub_1000138A8()
{
  return "dateUpdated";
}

void sub_1000138C8(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(_QWORD, uint64_t))
{
  unint64_t v5;
  uint64_t v6;

  if (!*a2)
  {
    v5 = a4(0, a3);
    if (!v6)
      atomic_store(v5, a2);
  }
}

unint64_t sub_10001390C()
{
  unint64_t result;
  void *v1;

  result = qword_1000ED278;
  if (!qword_1000ED278)
  {
    v1 = &protocol descriptor for CVarArg;
    result = swift_getExistentialTypeMetadata(1, 0, 1, &v1);
    atomic_store(result, (unint64_t *)&qword_1000ED278);
  }
  return result;
}

unint64_t sub_100013960()
{
  unint64_t result;
  void *v1;

  result = qword_1000EC230;
  if (!qword_1000EC230)
  {
    v1 = &protocol descriptor for Error;
    result = swift_getExistentialTypeMetadata(1, 0, 1, &v1);
    atomic_store(result, (unint64_t *)&qword_1000EC230);
  }
  return result;
}

void sub_1000139B4()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1000ED9C0)
  {
    v0 = type metadata accessor for _ContiguousArrayStorage(0, (char *)&type metadata for Swift.AnyObject + 8);
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1000ED9C0);
  }
}

void sub_100013A0C(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_1000ED1E0)
  {
    sub_100007730(255, &qword_1000ED1E8, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Array);
    v3 = type metadata accessor for _ContiguousArrayStorage(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_1000ED1E0);
  }
}

unint64_t sub_100013A70()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000ED290;
  if (!qword_1000ED290)
  {
    v1 = sub_100006D10(255, &qword_1000ED288, NSDate_ptr);
    result = swift_getWitnessTable(&protocol conformance descriptor for NSObject, v1);
    atomic_store(result, (unint64_t *)&qword_1000ED290);
  }
  return result;
}

unint64_t sub_100013AC8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000ED548;
  if (!qword_1000ED548)
  {
    v1 = sub_100006D10(255, &qword_1000ED538, HKDisplayCategory_ptr);
    result = swift_getWitnessTable(&protocol conformance descriptor for NSObject, v1);
    atomic_store(result, (unint64_t *)&qword_1000ED548);
  }
  return result;
}

void sub_100013B20(uint64_t a1)
{
  uint64_t v2;
  unint64_t TupleTypeMetadata2;
  uint64_t v4;

  if (!qword_1000ED550)
  {
    v2 = sub_100006D10(255, &qword_1000ED538, HKDisplayCategory_ptr);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2(a1, v2, &type metadata for Int, "key value ", 0);
    if (!v4)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_1000ED550);
  }
}

uint64_t sub_100013B98(uint64_t a1, int a2)
{
  uint64_t v2;
  void (*v3)(_BOOL8);
  _BOOL8 v4;

  v3 = *(void (**)(_BOOL8))(a1 + 32);
  v2 = *(_QWORD *)(a1 + 40);
  v4 = a2 != 0;
  swift_retain(v2);
  v3(v4);
  return swift_release(v2);
}

void sub_100013BD8(uint64_t a1, unint64_t *a2, unint64_t *a3, _QWORD *a4, uint64_t (*a5)(uint64_t, uint64_t))
{
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;

  if (!*a2)
  {
    v8 = sub_100006D10(255, a3, a4);
    v9 = a5(a1, v8);
    if (!v10)
      atomic_store(v9, a2);
  }
}

void sub_100013C38(uint64_t a1, unint64_t *a2, unint64_t *a3, _QWORD *a4)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;

  if (!*a2)
  {
    v6 = sub_100006D10(255, a3, a4);
    v7 = type metadata accessor for Array(a1, v6);
    if (!v8)
      atomic_store(v7, a2);
  }
}

unint64_t sub_100013C8C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000EDBF0;
  if (!qword_1000EDBF0)
  {
    sub_1000076D8(255, (unint64_t *)&qword_1000ED920, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Array);
    result = swift_getWitnessTable(&protocol conformance descriptor for [A], v1);
    atomic_store(result, (unint64_t *)&qword_1000EDBF0);
  }
  return result;
}

unint64_t sub_100013CEC()
{
  unint64_t result;

  result = qword_1000ED280;
  if (!qword_1000ED280)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for String, &type metadata for String);
    atomic_store(result, (unint64_t *)&qword_1000ED280);
  }
  return result;
}

void sub_100013D30()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1000EDEE8)
  {
    v0 = type metadata accessor for Published(0, &type metadata for Bool);
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1000EDEE8);
  }
}

unint64_t sub_100013D84()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000EF0A0;
  if (!qword_1000EF0A0)
  {
    sub_1000127F0(255, &qword_1000EF090, (uint64_t (*)(_QWORD, void *))&type metadata accessor for Published.Publisher);
    result = swift_getWitnessTable(&protocol conformance descriptor for Published<A>.Publisher, v1);
    atomic_store(result, (unint64_t *)&qword_1000EF0A0);
  }
  return result;
}

void sub_100013DDC(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_1000EC1A0)
  {
    sub_100013BD8(255, (unint64_t *)&unk_1000EECB0, &qword_1000EC1A8, UIColor_ptr, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Array);
    v3 = type metadata accessor for CurrentValueSubject(a1, v2, &type metadata for Never, &protocol witness table for Never);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_1000EC1A0);
  }
}

void sub_100013E60()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1000EE1A0)
  {
    v0 = type metadata accessor for AnyPublisher(0, &type metadata for Bool, &type metadata for Never, &protocol witness table for Never);
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1000EE1A0);
  }
}

uint64_t sub_100013EC4()
{
  return sub_100013198(&qword_1000EF0D0, (uint64_t (*)(uint64_t))sub_100013E60, (uint64_t)&protocol conformance descriptor for AnyPublisher<A, B>);
}

unint64_t sub_100013EE0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000EE1A8;
  if (!qword_1000EE1A8)
  {
    sub_100026E84(255, &qword_1000EE198, (uint64_t (*)(uint64_t))sub_100013E60, sub_100013EC4, (uint64_t (*)(uint64_t, uint64_t, uint64_t))&type metadata accessor for Publishers.Drop);
    result = swift_getWitnessTable(&protocol conformance descriptor for Publishers.Drop<A>, v1);
    atomic_store(result, (unint64_t *)&qword_1000EE1A8);
  }
  return result;
}

void sub_100013F48(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;

  if (!qword_1000EF098)
  {
    sub_1000127F0(255, &qword_1000EF090, (uint64_t (*)(_QWORD, void *))&type metadata accessor for Published.Publisher);
    v3 = v2;
    v4 = sub_100013D84();
    v5 = type metadata accessor for Publishers.Map(a1, v3, &type metadata for Bool, v4);
    if (!v6)
      atomic_store(v5, (unint64_t *)&qword_1000EF098);
  }
}

uint64_t sub_100013FC0(uint64_t a1)
{
  _BYTE v2[8];

  return swift_initClassMetadata2(a1, 0, 0, v2, a1 + qword_1000F1158);
}

uint64_t type metadata accessor for LoadingPersonalizedHighlightsDataSource(uint64_t a1)
{
  uint64_t result;

  result = qword_1000EF9D8;
  if (!qword_1000EF9D8)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for LoadingPersonalizedHighlightsDataSource);
  return result;
}

uint64_t sub_100014038(uint64_t a1)
{
  _QWORD v2[2];

  v2[0] = "\b";
  v2[1] = &unk_1000B4008;
  return swift_initClassMetadata2(a1, 0, 2, v2, a1 + class metadata base offset for PersonalizedFeedDataSource);
}

uint64_t sub_100014088(uint64_t a1)
{
  _QWORD v2[13];

  v2[0] = " ";
  v2[1] = &unk_1000B4238;
  v2[2] = &unk_1000B4250;
  v2[3] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v2[4] = &unk_1000B4268;
  v2[5] = &unk_1000B4268;
  v2[6] = &unk_1000B4280;
  v2[7] = &unk_1000B4280;
  v2[8] = &unk_1000B4280;
  v2[9] = &unk_1000B4298;
  v2[10] = &unk_1000B4280;
  v2[11] = &unk_1000B4268;
  v2[12] = &unk_1000B4238;
  return swift_initClassMetadata2(a1, 0, 13, v2, a1 + qword_1000F1080);
}

void sub_10001411C(void *a1, uint64_t a2, char a3)
{
  id v4;

  v4 = a1;
  sub_1000099AC(a3);

}

void sub_10001415C(void *a1)
{
  id v1;

  v1 = a1;
  sub_10000F7A8();

}

void sub_100014190(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v6[3];

  v6[0] = &unk_1000B2D88;
  sub_10004AF8C();
  if (v3 <= 0x3F)
  {
    v6[1] = *(_QWORD *)(v2 - 8) + 64;
    sub_10004AFE0(319);
    if (v5 <= 0x3F)
    {
      v6[2] = *(_QWORD *)(v4 - 8) + 64;
      swift_updateClassMetadata2(a1, 256, 3, v6, a1 + 80);
    }
  }
}

uint64_t type metadata accessor for IntroFlowThrottledCheck(uint64_t a1)
{
  uint64_t result;

  result = qword_1000EE260;
  if (!qword_1000EE260)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for IntroFlowThrottledCheck);
  return result;
}

uint64_t type metadata accessor for CloudSyncStartupManager(uint64_t a1)
{
  uint64_t result;

  result = qword_1000EC618;
  if (!qword_1000EC618)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for CloudSyncStartupManager);
  return result;
}

uint64_t sub_10001429C(char a1, uint64_t a2)
{
  uint64_t v2;

  return sub_10000D520(a1, a2, v2);
}

uint64_t sub_1000142A4(uint64_t a1)
{
  uint64_t v1;

  return sub_1000069B4(a1, v1);
}

void sub_1000142AC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  _QWORD v7[14];

  v2 = qword_1000F1188;
  sub_100014B40(319);
  if (v4 <= 0x3F)
  {
    v7[0] = *(_QWORD *)(v3 - 8) + 64;
    sub_1000137DC(319);
    if (v6 <= 0x3F)
    {
      v7[1] = *(_QWORD *)(v5 - 8) + 64;
      v7[2] = (char *)&value witness table for Builtin.UnknownObject + 64;
      v7[3] = &unk_1000B5618;
      v7[4] = (char *)&value witness table for Builtin.NativeObject + 64;
      v7[5] = (char *)&value witness table for Builtin.NativeObject + 64;
      v7[6] = (char *)&value witness table for Builtin.NativeObject + 64;
      v7[7] = (char *)&value witness table for Builtin.NativeObject + 64;
      v7[8] = (char *)&value witness table for Builtin.NativeObject + 64;
      v7[9] = (char *)&value witness table for Builtin.NativeObject + 64;
      v7[10] = &unk_1000B5630;
      v7[11] = &unk_1000B5648;
      v7[12] = (char *)&value witness table for Builtin.UnknownObject + 64;
      v7[13] = &unk_1000B5648;
      swift_initClassMetadata2(a1, 0, 14, v7, a1 + v2);
    }
  }
}

uint64_t type metadata accessor for SummaryFeedDataSource(uint64_t a1)
{
  return sub_100006A08(a1, (uint64_t *)&unk_1000EFAF8, (uint64_t)&nominal type descriptor for SummaryFeedDataSource);
}

uint64_t type metadata accessor for FeedObjectDataSource(uint64_t a1)
{
  uint64_t result;

  result = qword_1000ED208;
  if (!qword_1000ED208)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for FeedObjectDataSource);
  return result;
}

uint64_t sub_100014424(uint64_t a1)
{
  uint64_t v2;

  sub_1000076D8(0, (unint64_t *)&qword_1000EF0D8, (uint64_t (*)(uint64_t))sub_100014478, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t sub_100014478()
{
  unint64_t result;
  ProtocolDescriptor *v1;

  result = qword_1000EF0E0;
  if (!qword_1000EF0E0)
  {
    v1 = &protocol descriptor for AppDeepLinkCanceling;
    result = swift_getExistentialTypeMetadata(1, 0, 1, &v1);
    atomic_store(result, (unint64_t *)&qword_1000EF0E0);
  }
  return result;
}

void sub_1000144CC(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v6[5];

  sub_1000076D8(319, &qword_1000ECE58, type metadata accessor for DeepLinkContentKind, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
  if (v3 <= 0x3F)
  {
    v6[0] = *(_QWORD *)(v2 - 8) + 64;
    v6[1] = "\b";
    v6[2] = &unk_1000B1978;
    sub_1000138C8(319, (unint64_t *)&qword_1000ECE60, (uint64_t)&type metadata for Bool, (uint64_t (*)(_QWORD, uint64_t))&type metadata accessor for UserDefault);
    if (v5 <= 0x3F)
    {
      v6[3] = *(_QWORD *)(v4 - 8) + 64;
      v6[4] = &unk_1000B1990;
      swift_updateClassMetadata2(a1, 256, 5, v6, a1 + 80);
    }
  }
}

uint64_t type metadata accessor for AppDeepLinkHandler(uint64_t a1)
{
  return sub_100006A08(a1, (uint64_t *)&unk_1000ECE48, (uint64_t)&nominal type descriptor for AppDeepLinkHandler);
}

void sub_1000145B0(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[9];

  v4[0] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v4[1] = "\b";
  v4[2] = "\b";
  v4[3] = "\b";
  v4[4] = "\b";
  v4[5] = "\b";
  v4[6] = "\b";
  v4[7] = &unk_1000B5C80;
  sub_10008A3A0();
  if (v3 <= 0x3F)
  {
    v4[8] = *(_QWORD *)(v2 - 8) + 64;
    swift_updateClassMetadata2(a1, 256, 9, v4, a1 + 80);
  }
}

uint64_t type metadata accessor for LifecycleManager(uint64_t a1)
{
  uint64_t result;

  result = qword_1000EFD68;
  if (!qword_1000EFD68)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for LifecycleManager);
  return result;
}

uint64_t sub_100014684()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;

  v0 = type metadata accessor for LifecycleManager(0);
  v1 = swift_allocObject(v0, *(unsigned int *)(v0 + 48), *(unsigned __int16 *)(v0 + 52));
  result = sub_100009754();
  qword_1000F1208 = v1;
  return result;
}

uint64_t sub_1000146C0()
{
  uint64_t v0;

  return sub_10000B2BC(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

void sub_1000146C8()
{
  uint64_t v0;

  sub_10000AAE8(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

void sub_1000146D0(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[5];

  v4[0] = "\b";
  sub_100013D30();
  if (v3 <= 0x3F)
  {
    v4[1] = *(_QWORD *)(v2 - 8) + 64;
    v4[2] = (char *)&value witness table for Builtin.NativeObject + 64;
    v4[3] = (char *)&value witness table for () + 64;
    v4[4] = &unk_1000B2A40;
    swift_updateClassMetadata2(a1, 256, 5, v4, a1 + 80);
  }
}

uint64_t sub_10001476C()
{
  uint64_t v0;

  return sub_100008198(*(_QWORD *)(v0 + 16), *(void **)(v0 + 24));
}

uint64_t type metadata accessor for SceneDelegate()
{
  return objc_opt_self(_TtC6Health13SceneDelegate);
}

void sub_10001481C()
{
  uint64_t v0;

  sub_1000074BC(*(_QWORD *)(v0 + 16));
}

uint64_t sub_10001487C(uint64_t a1)
{
  _QWORD v2[4];

  v2[0] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v2[1] = (char *)&value witness table for Builtin.NativeObject + 64;
  v2[2] = &unk_1000B5648;
  v2[3] = (char *)&value witness table for Builtin.UnknownObject + 64;
  return swift_initClassMetadata2(a1, 0, 4, v2, a1 + qword_1000F1198);
}

uint64_t type metadata accessor for HighlightsFeedWithShowAllHighlightsDataSource(uint64_t a1)
{
  return sub_100006A08(a1, (uint64_t *)&unk_1000EFB68, (uint64_t)&nominal type descriptor for HighlightsFeedWithShowAllHighlightsDataSource);
}

uint64_t type metadata accessor for DownloadingDataDataSource(uint64_t a1)
{
  return sub_100006A08(a1, (uint64_t *)&unk_1000EDAD0, (uint64_t)&nominal type descriptor for DownloadingDataDataSource);
}

uint64_t sub_100014908(uint64_t a1)
{
  _QWORD v2[3];

  v2[0] = (char *)&value witness table for Builtin.NativeObject + 64;
  v2[1] = (char *)&value witness table for Builtin.NativeObject + 64;
  v2[2] = (char *)&value witness table for Builtin.BridgeObject + 64;
  return swift_initClassMetadata2(a1, 0, 3, v2, a1 + qword_1000F0F10);
}

uint64_t type metadata accessor for GetMoreFromHealthDataSource(uint64_t a1)
{
  uint64_t result;

  result = qword_1000EE0F0;
  if (!qword_1000EE0F0)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for GetMoreFromHealthDataSource);
  return result;
}

unint64_t sub_1000149A0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000ED410;
  if (!qword_1000ED410)
  {
    v1 = sub_10001314C(255, (unint64_t *)&qword_1000ED418, (uint64_t)&protocol descriptor for UITraitDefinition, 1);
    result = swift_getExistentialMetatypeMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_1000ED410);
  }
  return result;
}

unint64_t sub_1000149EC()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;

  result = qword_1000EE168;
  if (!qword_1000EE168)
  {
    sub_100026E84(255, &qword_1000EE150, type metadata accessor for PersonalizedFeedDataSource, sub_10004A030, (uint64_t (*)(uint64_t, uint64_t, uint64_t))&type metadata accessor for DelayedDataSource);
    v2 = v1;
    sub_100013198(&qword_1000EE170, type metadata accessor for PersonalizedFeedDataSource, (uint64_t)&protocol conformance descriptor for PersonalizedFeedDataSource);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> DelayedDataSource<A>, v2);
    atomic_store(result, (unint64_t *)&qword_1000EE168);
  }
  return result;
}

void sub_100014A84(uint64_t a1)
{
  uint64_t v2;
  unint64_t TupleTypeMetadata2;
  uint64_t v4;

  if (!qword_1000EC708)
  {
    sub_1000076D8(255, (unint64_t *)&qword_1000EF4B0, (uint64_t (*)(uint64_t))&type metadata accessor for CloudSyncRestoreState, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2(a1, v2, v2, 0, 0);
    if (!v4)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_1000EC708);
  }
}

uint64_t sub_100014AFC(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v5;

  v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 40))(a2, a1, v5);
  return a2;
}

void sub_100014B40(uint64_t a1)
{
  sub_1000076D8(a1, &qword_1000ED358, (uint64_t (*)(uint64_t))sub_100014B5C, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
}

void sub_100014B5C(uint64_t a1)
{
  sub_1000076D8(a1, &qword_1000EC198, (uint64_t (*)(uint64_t))&type metadata accessor for CloudSyncRestoreState, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for LegacyObservable);
}

unint64_t sub_100014B78()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000EC700;
  if (!qword_1000EC700)
  {
    sub_1000076D8(255, &qword_1000EC198, (uint64_t (*)(uint64_t))&type metadata accessor for CloudSyncRestoreState, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for LegacyObservable);
    result = swift_getWitnessTable(&protocol conformance descriptor for LegacyObservable<A>, v1);
    atomic_store(result, (unint64_t *)&qword_1000EC700);
  }
  return result;
}

uint64_t sub_100014BD8(uint64_t a1)
{
  uint64_t v2;

  sub_1000076D8(0, (unint64_t *)&qword_1000ECF98, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void sub_100014C2C(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_1000ECF98)
  {
    v2 = type metadata accessor for Date(255);
    v3 = type metadata accessor for Optional(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_1000ECF98);
  }
}

uint64_t sub_100014C80()
{
  return sub_100014CA8((uint64_t)&unk_1000B06A0, (uint64_t)&unk_1000B06C8);
}

uint64_t sub_100014C94()
{
  return sub_100014CA8((uint64_t)&unk_1000B06E8, (uint64_t)&unk_1000B0710);
}

uint64_t sub_100014CA8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t KeyPath;
  uint64_t v7;

  v4 = ((uint64_t (*)(void))swift_getKeyPath)();
  KeyPath = swift_getKeyPath(a2);
  static Published.subscript.getter(&v7, v2, v4, KeyPath);
  swift_release(v4);
  swift_release(KeyPath);
  return v7;
}

uint64_t sub_100014D14(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  id v21;
  NSString v22;
  id v23;
  _QWORD v25[2];
  _QWORD *v26;
  char v27;

  v25[1] = a1;
  sub_1000076D8(0, &qword_1000EC238, (uint64_t (*)(uint64_t))sub_100015718, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Published);
  v7 = v6;
  v8 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v10 = (char *)v25 - v9;
  sub_1000076D8(0, &qword_1000EC210, (uint64_t (*)(uint64_t))sub_10001568C, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Published);
  v12 = v11;
  v13 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v15 = (char *)v25 - v14;
  v16 = v3 + OBJC_IVAR____TtC6Health26NotificationSyncStoreModel__mostRecentSentInstruction;
  v26 = 0;
  v27 = 0;
  sub_10001568C(0);
  Published.init(initialValue:)(&v26, v17);
  (*(void (**)(uint64_t, char *, uint64_t))(v13 + 32))(v16, v15, v12);
  v18 = v3 + OBJC_IVAR____TtC6Health26NotificationSyncStoreModel__instructionsQueryResult;
  v26 = _swiftEmptyArrayStorage;
  v27 = 0;
  sub_100015718(0);
  Published.init(initialValue:)(&v26, v19);
  (*(void (**)(uint64_t, char *, uint64_t))(v8 + 32))(v18, v10, v7);
  *(_QWORD *)(v3 + OBJC_IVAR____TtC6Health26NotificationSyncStoreModel_notificationInstructionQuery) = 0;
  *(_QWORD *)(v3 + OBJC_IVAR____TtC6Health26NotificationSyncStoreModel_healthStore) = a3;
  v20 = objc_allocWithZone((Class)HKNotificationSyncStore);
  v21 = a3;
  v22 = String._bridgeToObjectiveC()();
  v23 = objc_msgSend(v20, "initWithClientIdentifier:healthStore:", v22, v21, swift_bridgeObjectRelease(a2).n128_f64[0]);

  *(_QWORD *)(v3 + OBJC_IVAR____TtC6Health26NotificationSyncStoreModel_notificationSyncStore) = v23;
  return v3;
}

uint64_t sub_100014EFC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;

  v4[17] = a3;
  v4[18] = v3;
  v4[15] = a1;
  v4[16] = a2;
  return swift_task_switch(sub_100014F18, 0, 0);
}

uint64_t sub_100014F18()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  id v3;
  void *v4;
  uint64_t v5;
  _QWORD *v6;

  v1 = v0 + 2;
  v2 = v0[18];
  v3 = sub_100016084(v0[15], v0[16], v0[17]);
  v0[19] = v3;
  v4 = *(void **)(v2 + OBJC_IVAR____TtC6Health26NotificationSyncStoreModel_notificationSyncStore);
  v0[2] = v0;
  v0[3] = sub_100014FCC;
  v5 = swift_continuation_init(v0 + 2, 1);
  v0[10] = _NSConcreteStackBlock;
  v6 = v0 + 10;
  v6[1] = 0x40000000;
  v6[2] = sub_10001CB98;
  v6[3] = &unk_1000DCA50;
  v6[4] = v5;
  objc_msgSend(v4, "sendNotificationInstruction:completion:", v3, v6);
  return swift_continuation_await(v1);
}

uint64_t sub_100014FCC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 48);
  *(_QWORD *)(*(_QWORD *)v0 + 160) = v1;
  if (v1)
    v2 = sub_1000150B0;
  else
    v2 = sub_10001502C;
  return swift_task_switch(v2, 0, 0);
}

uint64_t sub_10001502C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t KeyPath;
  uint64_t v4;

  v1 = *(_QWORD *)(v0 + 144);
  v2 = *(_QWORD *)(v0 + 152);
  KeyPath = swift_getKeyPath(&unk_1000B06A0);
  v4 = swift_getKeyPath(&unk_1000B06C8);
  *(_QWORD *)(v0 + 80) = v2;
  *(_BYTE *)(v0 + 88) = 0;
  swift_retain(v1);
  static Published.subscript.setter(v0 + 80, v1, KeyPath, v4);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000150B0()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;

  v2 = *(void **)(v0 + 152);
  v1 = *(_QWORD *)(v0 + 160);
  v3 = *(_QWORD *)(v0 + 144);
  swift_willThrow();

  KeyPath = swift_getKeyPath(&unk_1000B06A0);
  v5 = swift_getKeyPath(&unk_1000B06C8);
  *(_QWORD *)(v0 + 80) = v1;
  *(_BYTE *)(v0 + 88) = 1;
  swift_retain(v3);
  static Published.subscript.setter(v0 + 80, v3, KeyPath, v5);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100015148(uint64_t a1, void *a2, void *a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v7;
  uint64_t KeyPath;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  void *v13;
  void *v14;
  char v15;
  _BYTE v16[24];

  v4 = a4 + 16;
  if (a3)
  {
    swift_beginAccess(a4 + 16, v16, 0, 0);
    result = swift_weakLoadStrong(v4);
    if (!result)
      return result;
    v7 = result;
    KeyPath = swift_getKeyPath(&unk_1000B06E8);
    v9 = swift_getKeyPath(&unk_1000B0710);
    v14 = a3;
    v15 = 1;
    swift_errorRetain(a3);
    v10 = v7;
  }
  else
  {
    swift_beginAccess(a4 + 16, v16, 0, 0);
    result = swift_weakLoadStrong(v4);
    if (!result)
      return result;
    v12 = result;
    if (a2)
      v13 = a2;
    else
      v13 = &_swiftEmptyArrayStorage;
    KeyPath = swift_getKeyPath(&unk_1000B06E8);
    v9 = swift_getKeyPath(&unk_1000B0710);
    v14 = v13;
    v15 = 0;
    swift_bridgeObjectRetain(a2);
    v10 = v12;
  }
  return static Published.subscript.setter(&v14, v10, KeyPath, v9);
}

uint64_t sub_100015260()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = v0 + OBJC_IVAR____TtC6Health26NotificationSyncStoreModel__mostRecentSentInstruction;
  sub_1000076D8(0, &qword_1000EC210, (uint64_t (*)(uint64_t))sub_10001568C, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Published);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  v3 = v0 + OBJC_IVAR____TtC6Health26NotificationSyncStoreModel__instructionsQueryResult;
  sub_1000076D8(0, &qword_1000EC238, (uint64_t (*)(uint64_t))sub_100015718, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Published);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(v3, v4);

  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t sub_100015340@<X0>(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t result;

  v4 = type metadata accessor for NotificationSyncStoreModel(0);
  result = ObservableObject<>.objectWillChange.getter(v4, a1);
  *a2 = result;
  return result;
}

uint64_t variable initialization expression of AllHealthDataDataSource.$__lazy_storage_$_firstRestoreState@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;

  sub_1000076D8(0, &qword_1000EC198, (uint64_t (*)(uint64_t))&type metadata accessor for CloudSyncRestoreState, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for LegacyObservable);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 56))(a1, 1, 1, v2);
}

uint64_t variable initialization expression of SummaryPinnedContentGradientColorProvider.colors()
{
  return sub_100015464((uint64_t (*)(_QWORD))sub_100013DDC);
}

void *variable initialization expression of SummaryPinnedContentGradientColorProvider.cancellables()
{
  return &_swiftEmptySetSingleton;
}

uint64_t variable initialization expression of DownloadingDataDataSource.downloadingDataItem()
{
  __int128 v0;

  if (qword_1000EC020 != -1)
    swift_once(&qword_1000EC020, sub_1000382C0);
  v0 = xmmword_1000EDA50;
  swift_bridgeObjectRetain(*((_QWORD *)&xmmword_1000EDA50 + 1));
  return EmptyStateCollectionViewCellItem.init(title:showSpinner:)(v0, *((_QWORD *)&v0 + 1), 1);
}

uint64_t variable initialization expression of SummaryPinnedContentDataSource.pinnedFeedItemsPublisher()
{
  return sub_100015464((uint64_t (*)(_QWORD))sub_1000154BC);
}

uint64_t sub_100015464(uint64_t (*a1)(_QWORD))
{
  uint64_t v1;
  void *v3;

  v3 = &_swiftEmptyArrayStorage;
  v1 = a1(0);
  swift_allocObject(v1, *(unsigned int *)(v1 + 48), *(unsigned __int16 *)(v1 + 52));
  return CurrentValueSubject.init(_:)(&v3);
}

uint64_t variable initialization expression of SummaryPinnedContentDataSource.pinnedContentChangesCancellable()
{
  return 0;
}

void sub_1000154BC(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_1000EECC0)
  {
    sub_1000076D8(255, &qword_1000EC1B0, (uint64_t (*)(uint64_t))&type metadata accessor for FeedItem, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Array);
    v3 = type metadata accessor for CurrentValueSubject(a1, v2, &type metadata for Never, &protocol witness table for Never);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_1000EECC0);
  }
}

uint64_t variable initialization expression of AllHealthDataViewController.providedPresentation@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  v2 = enum case for Presentation.showAllData(_:);
  v3 = type metadata accessor for Presentation(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 104))(a1, v2, v3);
}

uint64_t sub_10001557C()
{
  return type metadata accessor for NotificationSyncStoreModel(0);
}

uint64_t type metadata accessor for NotificationSyncStoreModel(uint64_t a1)
{
  uint64_t result;

  result = qword_1000EC1F8;
  if (!qword_1000EC1F8)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for NotificationSyncStoreModel);
  return result;
}

void sub_1000155C0(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v6[5];

  sub_1000076D8(319, &qword_1000EC210, (uint64_t (*)(uint64_t))sub_10001568C, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Published);
  if (v3 <= 0x3F)
  {
    v6[0] = *(_QWORD *)(v2 - 8) + 64;
    sub_1000076D8(319, &qword_1000EC238, (uint64_t (*)(uint64_t))sub_100015718, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Published);
    if (v5 <= 0x3F)
    {
      v6[1] = *(_QWORD *)(v4 - 8) + 64;
      v6[2] = (char *)&value witness table for Builtin.UnknownObject + 64;
      v6[3] = (char *)&value witness table for Builtin.UnknownObject + 64;
      v6[4] = "\b";
      swift_updateClassMetadata2(a1, 256, 5, v6, a1 + 80);
    }
  }
}

void sub_10001568C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;

  if (!qword_1000EC218)
  {
    sub_100013BD8(255, &qword_1000EC220, &qword_1000EC228, HKNotificationInstruction_ptr, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
    v3 = v2;
    v4 = sub_100013960();
    v5 = type metadata accessor for Result(a1, v3, v4, &protocol self-conformance witness table for Error);
    if (!v6)
      atomic_store(v5, (unint64_t *)&qword_1000EC218);
  }
}

void sub_100015718(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;

  if (!qword_1000EC240)
  {
    sub_100013BD8(255, &qword_1000EC248, (unint64_t *)&qword_1000EC250, HKNotificationInstructionDiagnosticDescription_ptr, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Array);
    v3 = v2;
    v4 = sub_100013960();
    v5 = type metadata accessor for Result(a1, v3, v4, &protocol self-conformance witness table for Error);
    if (!v6)
      atomic_store(v5, (unint64_t *)&qword_1000EC240);
  }
}

uint64_t initializeBufferWithCopyOfBuffer for OpenSleepScheduleIntent(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *a2;
  *a1 = *a2;
  v3 = v2 + 16;
  swift_retain(v2);
  return v3;
}

__n128 initializeWithTake for PluginPPT(_OWORD *a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *a1 = *(_OWORD *)a2;
  a1[1] = v3;
  return result;
}

uint64_t sub_1000157E4(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 32))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t sub_100015804(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)result = (a2 - 1);
    *(_QWORD *)(result + 8) = 0;
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 32) = v3;
  return result;
}

void type metadata accessor for UIEdgeInsets(uint64_t a1)
{
  sub_1000164B4(a1, &qword_1000EC3E0, (uint64_t)&unk_1000DCA10);
}

void type metadata accessor for HKDisplayCategoryIdentifier(uint64_t a1)
{
  sub_1000164B4(a1, &qword_1000EC3E8, (uint64_t)&unk_1000DCA40);
}

uint64_t sub_100015858@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_10001589C(a1, (uint64_t)&unk_1000B06A0, (uint64_t)&unk_1000B06C8, a2);
}

uint64_t sub_10001586C(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  return sub_100015938(a1, a2, a3, a4, (uint64_t)&unk_1000B06A0, (uint64_t)&unk_1000B06C8, (void (*)(uint64_t, uint64_t))sub_100016208);
}

uint64_t sub_100015888@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_10001589C(a1, (uint64_t)&unk_1000B06E8, (uint64_t)&unk_1000B0710, a2);
}

uint64_t sub_10001589C@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X4>, uint64_t a4@<X8>)
{
  uint64_t v6;
  uint64_t KeyPath;
  uint64_t v8;
  uint64_t result;
  char v10;
  uint64_t v11;
  char v12;

  v6 = *a1;
  KeyPath = swift_getKeyPath(a2);
  v8 = swift_getKeyPath(a3);
  static Published.subscript.getter(&v11, v6, KeyPath, v8);
  swift_release(KeyPath);
  result = swift_release(v8);
  v10 = v12;
  *(_QWORD *)a4 = v11;
  *(_BYTE *)(a4 + 8) = v10;
  return result;
}

uint64_t sub_10001591C(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  return sub_100015938(a1, a2, a3, a4, (uint64_t)&unk_1000B06E8, (uint64_t)&unk_1000B0710, (void (*)(uint64_t, uint64_t))sub_100016214);
}

uint64_t sub_100015938(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void (*a7)(uint64_t, uint64_t))
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t KeyPath;
  uint64_t v13;
  uint64_t v15;
  char v16;

  v9 = *a1;
  v10 = *((unsigned __int8 *)a1 + 8);
  v11 = *a2;
  KeyPath = swift_getKeyPath(a5);
  v13 = swift_getKeyPath(a6);
  v15 = v9;
  v16 = v10;
  a7(v9, v10);
  swift_retain(v11);
  return static Published.subscript.setter(&v15, v11, KeyPath, v13);
}

BOOL sub_1000159C4(_QWORD *a1, _QWORD *a2)
{
  return *a1 == *a2;
}

void *sub_1000159D8()
{
  return &protocol witness table for ObservableObjectPublisher;
}

uint64_t sub_1000159E4(uint64_t a1, uint64_t a2)
{
  return sub_100015F10(a1, a2, (uint64_t (*)(uint64_t))&String.hashValue.getter);
}

uint64_t sub_100015A04(uint64_t a1, uint64_t a2)
{
  return sub_100015F10(a1, a2, (uint64_t (*)(uint64_t))&String._bridgeToObjectiveC());
}

Swift::Int sub_100015A10()
{
  Swift::UInt *v0;
  Swift::UInt v1;
  _QWORD v3[9];

  v1 = *v0;
  Hasher.init(_seed:)(v3, 0);
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void sub_100015A54()
{
  Swift::UInt *v0;

  Hasher._combine(_:)(*v0);
}

Swift::Int sub_100015A7C(uint64_t a1)
{
  Swift::UInt *v1;
  Swift::UInt v2;
  _QWORD v4[9];

  v2 = *v1;
  Hasher.init(_seed:)(v4, a1);
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

uint64_t sub_100015ABC(uint64_t a1, id *a2)
{
  uint64_t result;
  uint64_t v5;
  NSString v6;
  uint64_t v7;
  uint64_t v8;

  v7 = 0;
  v8 = 0;
  result = static String._forceBridgeFromObjectiveC(_:result:)(a1, &v7);
  v5 = v8;
  if (v8)
  {
    v6 = String._bridgeToObjectiveC()();
    result = swift_bridgeObjectRelease(v5);
  }
  else
  {
    v6 = 0;
  }
  *a2 = v6;
  return result;
}

uint64_t sub_100015B30(uint64_t a1, id *a2)
{
  char v4;
  uint64_t v5;
  NSString v6;
  uint64_t v8;
  uint64_t v9;

  v8 = 0;
  v9 = 0;
  v4 = static String._conditionallyBridgeFromObjectiveC(_:result:)(a1, &v8);
  v5 = v9;
  if (v9)
  {
    v6 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v5);
  }
  else
  {
    v6 = 0;
  }
  *a2 = v6;
  return v4 & 1;
}

uint64_t sub_100015BAC@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  NSString v4;
  uint64_t result;

  static String._unconditionallyBridgeFromObjectiveC(_:)();
  v3 = v2;
  v4 = String._bridgeToObjectiveC()();
  result = swift_bridgeObjectRelease(v3);
  *a1 = v4;
  return result;
}

_QWORD *sub_100015BF0@<X0>(_QWORD *result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *result;
  *(_BYTE *)(a2 + 8) = 0;
  return result;
}

void sub_100015C00(_QWORD *a1@<X8>)
{
  _QWORD *v1;

  *a1 = *v1;
}

uint64_t sub_100015C10(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = sub_100013198(&qword_1000EE820, (uint64_t (*)(uint64_t))type metadata accessor for LaunchOptionsKey, (uint64_t)&unk_1000B0CF8);
  v3 = sub_100013198(&qword_1000EC538, (uint64_t (*)(uint64_t))type metadata accessor for LaunchOptionsKey, (uint64_t)&unk_1000B0BB0);
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()(a1, v2, v3, &protocol witness table for String);
}

uint64_t sub_100015C94(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = sub_100013198(&qword_1000EC540, (uint64_t (*)(uint64_t))type metadata accessor for OpenURLOptionsKey, (uint64_t)&unk_1000B0D3C);
  v3 = sub_100013198(&qword_1000EC548, (uint64_t (*)(uint64_t))type metadata accessor for OpenURLOptionsKey, (uint64_t)&unk_1000B0A9C);
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()(a1, v2, v3, &protocol witness table for String);
}

uint64_t sub_100015D18@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  NSString v4;
  uint64_t result;

  v3 = *(_QWORD *)(a1 + 8);
  v4 = String._bridgeToObjectiveC()();
  result = swift_bridgeObjectRelease(v3);
  *a2 = v4;
  return result;
}

uint64_t sub_100015D5C@<X0>(uint64_t *a1@<X8>)
{
  _QWORD *v1;
  uint64_t result;
  uint64_t v4;

  result = static String._unconditionallyBridgeFromObjectiveC(_:)(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_100015D84(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = sub_100013198(&qword_1000EC550, (uint64_t (*)(uint64_t))type metadata accessor for Mode, (uint64_t)&unk_1000B0930);
  v3 = sub_100013198(&qword_1000EC558, (uint64_t (*)(uint64_t))type metadata accessor for Mode, (uint64_t)&unk_1000B08D0);
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()(a1, v2, v3, &protocol witness table for String);
}

uint64_t sub_100015E08(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = sub_100013198(&qword_1000EC5C0, (uint64_t (*)(uint64_t))type metadata accessor for HKCategoryTypeIdentifier, (uint64_t)&unk_1000B0EF0);
  v3 = sub_100013198(&qword_1000EC5C8, (uint64_t (*)(uint64_t))type metadata accessor for HKCategoryTypeIdentifier, (uint64_t)&unk_1000B0E90);
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()(a1, v2, v3, &protocol witness table for String);
}

uint64_t sub_100015E8C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = sub_100013198(&qword_1000EC5B0, (uint64_t (*)(uint64_t))type metadata accessor for HKQuantityTypeIdentifier, (uint64_t)&unk_1000B1048);
  v3 = sub_100013198(&qword_1000EC5B8, (uint64_t (*)(uint64_t))type metadata accessor for HKQuantityTypeIdentifier, (uint64_t)&unk_1000B0FE8);
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()(a1, v2, v3, &protocol witness table for String);
}

uint64_t sub_100015F10(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t))
{
  _QWORD *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v5 = static String._unconditionallyBridgeFromObjectiveC(_:)(*v3);
  v7 = v6;
  v8 = a3(v5);
  swift_bridgeObjectRelease(v7);
  return v8;
}

uint64_t sub_100015F4C(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(*v1);
  v5 = v4;
  String.hash(into:)(a1, v3, v4);
  return swift_bridgeObjectRelease(v5);
}

Swift::Int sub_100015F8C(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  Swift::Int v6;
  _QWORD v8[9];

  v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(*v1);
  v5 = v4;
  Hasher.init(_seed:)(v8, a1);
  String.hash(into:)(v8, v3, v5);
  v6 = Hasher._finalize()();
  swift_bridgeObjectRelease(v5);
  return v6;
}

uint64_t sub_100015FFC(_QWORD *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  char v10;

  v2 = *a2;
  v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(*a1);
  v5 = v4;
  v6 = static String._unconditionallyBridgeFromObjectiveC(_:)(v2);
  if (v3 == v6 && v5 == v7)
  {
    v10 = 1;
    v9 = v5;
  }
  else
  {
    v9 = v7;
    v10 = _stringCompareWithSmolCheck(_:_:expecting:)(v3, v5, v6, v7, 0);
  }
  swift_bridgeObjectRelease(v5);
  swift_bridgeObjectRelease(v9);
  return v10 & 1;
}

id sub_100016084(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  id v16;
  NSString v17;
  Class isa;
  id v19;
  void (*v20)(char *, uint64_t);
  uint64_t v22;

  v6 = type metadata accessor for Date(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = ((uint64_t (*)(void))__chkstk_darwin)();
  v10 = (char *)&v22 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __chkstk_darwin(v8);
  v13 = (char *)&v22 - v12;
  if (!a3)
    goto LABEL_6;
  v14 = HIBYTE(a3) & 0xF;
  if ((a3 & 0x2000000000000000) == 0)
    v14 = a2 & 0xFFFFFFFFFFFFLL;
  if (v14)
  {
    v11 = swift_bridgeObjectRetain(a3);
  }
  else
  {
LABEL_6:
    if (a1 == 1)
      a3 = 0xE000000000000000;
    else
      a3 = 0x80000001000B8070;
  }
  v15 = Date.init()(v11);
  Date.addingTimeInterval(_:)(v15, 604800.0);
  v16 = objc_allocWithZone((Class)HKNotificationInstruction);
  v17 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a3);
  isa = Date._bridgeToObjectiveC()().super.isa;
  v19 = objc_msgSend(v16, "initWithAction:categoryIdentifier:expirationDate:", a1, v17, isa);

  v20 = *(void (**)(char *, uint64_t))(v7 + 8);
  v20(v10, v6);
  v20(v13, v6);
  return v19;
}

id sub_100016208(void *a1, char a2)
{
  if ((a2 & 1) != 0)
    return (id)swift_errorRetain(a1);
  else
    return a1;
}

uint64_t sub_100016214(uint64_t a1, char a2)
{
  if ((a2 & 1) != 0)
    return swift_errorRetain(a1);
  else
    return swift_bridgeObjectRetain(a1);
}

void type metadata accessor for UNAuthorizationStatus(uint64_t a1)
{
  sub_1000164B4(a1, &qword_1000EC450, (uint64_t)&unk_1000DCA78);
}

void type metadata accessor for Column(uint64_t a1)
{
  sub_1000164B4(a1, &qword_1000EC458, (uint64_t)&unk_1000DCA98);
}

void type metadata accessor for LaunchOptionsKey(uint64_t a1)
{
  sub_1000164B4(a1, &qword_1000EC460, (uint64_t)&unk_1000DCAB8);
}

void type metadata accessor for OpenURLOptionsKey(uint64_t a1)
{
  sub_1000164B4(a1, &qword_1000EC468, (uint64_t)&unk_1000DCAE0);
}

void type metadata accessor for UIUserInterfaceSizeClass(uint64_t a1)
{
  sub_1000164B4(a1, &qword_1000EC470, (uint64_t)&unk_1000DCB08);
}

void type metadata accessor for Mode(uint64_t a1)
{
  sub_1000164B4(a1, &qword_1000EC478, (uint64_t)&unk_1000DCB28);
}

void type metadata accessor for HKEmergencyOnboardingStatus(uint64_t a1)
{
  sub_1000164B4(a1, &qword_1000EC480, (uint64_t)&unk_1000DCB50);
}

uint64_t sub_1000162AC()
{
  return sub_100013198(&qword_1000EC488, (uint64_t (*)(uint64_t))type metadata accessor for Mode, (uint64_t)&unk_1000B0894);
}

uint64_t sub_1000162D8()
{
  return sub_100013198(&qword_1000EC490, (uint64_t (*)(uint64_t))type metadata accessor for Mode, (uint64_t)&unk_1000B0868);
}

uint64_t sub_100016304()
{
  return sub_100013198(&qword_1000EC498, (uint64_t (*)(uint64_t))type metadata accessor for Mode, (uint64_t)&unk_1000B0904);
}

uint64_t sub_100016330()
{
  return sub_100013198(&qword_1000EC4A0, (uint64_t (*)(uint64_t))type metadata accessor for OpenURLOptionsKey, (uint64_t)&unk_1000B0A60);
}

uint64_t sub_10001635C()
{
  return sub_100013198(&qword_1000EC4A8, (uint64_t (*)(uint64_t))type metadata accessor for OpenURLOptionsKey, (uint64_t)&unk_1000B0A34);
}

uint64_t sub_100016388()
{
  return sub_100013198(&qword_1000EC4B0, (uint64_t (*)(uint64_t))type metadata accessor for LaunchOptionsKey, (uint64_t)&unk_1000B0B74);
}

uint64_t sub_1000163B4()
{
  return sub_100013198(&qword_1000EC4B8, (uint64_t (*)(uint64_t))type metadata accessor for LaunchOptionsKey, (uint64_t)&unk_1000B0B48);
}

uint64_t sub_1000163E0()
{
  return sub_100013198(&qword_1000EC4C0, (uint64_t (*)(uint64_t))type metadata accessor for LaunchOptionsKey, (uint64_t)&unk_1000B0BE4);
}

uint64_t sub_10001640C()
{
  return sub_100013198(&qword_1000EC4C8, (uint64_t (*)(uint64_t))type metadata accessor for OpenURLOptionsKey, (uint64_t)&unk_1000B0AD0);
}

uint64_t sub_100016438()
{
  return sub_100013198(&qword_1000EC4D0, (uint64_t (*)(uint64_t))type metadata accessor for UIUserInterfaceSizeClass, (uint64_t)&unk_1000B09CC);
}

void type metadata accessor for HKTimeScope(uint64_t a1)
{
  sub_1000164B4(a1, &qword_1000EC560, (uint64_t)&unk_1000DCB70);
}

void type metadata accessor for _HKDataTypeCode(uint64_t a1)
{
  sub_1000164B4(a1, &qword_1000EC568, (uint64_t)&unk_1000DCB90);
}

void type metadata accessor for HKQuantityTypeIdentifier(uint64_t a1)
{
  sub_1000164B4(a1, &qword_1000EC570, (uint64_t)&unk_1000DCBB0);
}

void type metadata accessor for HKCategoryTypeIdentifier(uint64_t a1)
{
  sub_1000164B4(a1, &qword_1000EC578, (uint64_t)&unk_1000DCBD8);
}

void sub_1000164B4(uint64_t a1, unint64_t *a2, uint64_t a3)
{
  unint64_t ForeignTypeMetadata;
  uint64_t v5;

  if (!*a2)
  {
    ForeignTypeMetadata = swift_getForeignTypeMetadata(0, a3);
    if (!v5)
      atomic_store(ForeignTypeMetadata, a2);
  }
}

uint64_t sub_1000164F8()
{
  return sub_100013198(&qword_1000EC580, (uint64_t (*)(uint64_t))type metadata accessor for HKCategoryTypeIdentifier, (uint64_t)&unk_1000B0E54);
}

uint64_t sub_100016524()
{
  return sub_100013198(&qword_1000EC588, (uint64_t (*)(uint64_t))type metadata accessor for HKCategoryTypeIdentifier, (uint64_t)&unk_1000B0E28);
}

uint64_t sub_100016550()
{
  return sub_100013198(&qword_1000EC590, (uint64_t (*)(uint64_t))type metadata accessor for HKCategoryTypeIdentifier, (uint64_t)&unk_1000B0EC4);
}

uint64_t sub_10001657C()
{
  return sub_100013198(&qword_1000EC598, (uint64_t (*)(uint64_t))type metadata accessor for HKQuantityTypeIdentifier, (uint64_t)&unk_1000B0FAC);
}

uint64_t sub_1000165A8()
{
  return sub_100013198(&qword_1000EC5A0, (uint64_t (*)(uint64_t))type metadata accessor for HKQuantityTypeIdentifier, (uint64_t)&unk_1000B0F80);
}

uint64_t sub_1000165D4()
{
  return sub_100013198(&qword_1000EC5A8, (uint64_t (*)(uint64_t))type metadata accessor for HKQuantityTypeIdentifier, (uint64_t)&unk_1000B101C);
}

uint64_t sub_100016614()
{
  id *v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  id v4;
  char *v5;
  uint64_t v6;

  v1 = OBJC_IVAR____TtC6Health23CloudSyncStartupManager_notificationCenterObserver;
  v2 = *(uint64_t *)((char *)v0 + OBJC_IVAR____TtC6Health23CloudSyncStartupManager_notificationCenterObserver);
  if (v2)
  {
    v3 = (void *)objc_opt_self(NSNotificationCenter);
    swift_unknownObjectRetain(v2);
    v4 = objc_msgSend(v3, "defaultCenter");
    objc_msgSend(v4, "removeObserver:", v2);
    swift_unknownObjectRelease(v2);

  }
  v5 = (char *)v0 + OBJC_IVAR____TtC6Health23CloudSyncStartupManager_observable;
  sub_1000076D8(0, &qword_1000EC198, (uint64_t (*)(uint64_t))&type metadata accessor for CloudSyncRestoreState, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for LegacyObservable);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v5, v6);
  sub_10000CEC0((uint64_t)v0 + OBJC_IVAR____TtC6Health23CloudSyncStartupManager_lastKnownFirstRestoreState);

  swift_unknownObjectRelease(*(id *)((char *)v0 + v1));
  return swift_deallocClassInstance(v0, *((unsigned int *)*v0 + 12), *((unsigned __int16 *)*v0 + 26));
}

uint64_t sub_100016714()
{
  return type metadata accessor for CloudSyncStartupManager(0);
}

uint64_t sub_10001671C()
{
  uint64_t v0;

  swift_weakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

id sub_100016740()
{
  id result;

  result = sub_10001675C();
  qword_1000F0D78 = (uint64_t)result;
  return result;
}

id sub_10001675C()
{
  id v0;
  id v1;
  id v2;
  id v3;
  id v4;
  id v5;
  id v6;
  id v7;
  id v8;
  id v9;

  v0 = objc_msgSend(objc_allocWithZone((Class)HKChangesSyncRequest), "initWithPush:pull:lite:", 0, 1, 1);
  v1 = objc_msgSend(objc_allocWithZone((Class)HKContextSyncRequest), "initWithPush:pull:", 1, 1);
  v2 = objc_msgSend(objc_allocWithZone((Class)HKStateSyncRequest), "init");
  v3 = objc_allocWithZone((Class)HKMedicalIDSyncRequest);
  v4 = v0;
  v5 = v1;
  v6 = v2;
  v7 = objc_msgSend(v3, "init");
  v8 = objc_msgSend(objc_allocWithZone((Class)HKSummarySharingSyncRequest), "initWithPush:pull:", 0, 1);
  v9 = objc_msgSend(objc_allocWithZone((Class)HKCloudSyncRequest), "initWithChangesSyncRequest:contextSyncRequest:stateSyncRequest:medicalIDSyncRequest:summarySharingSyncRequest:", v4, v5, v6, v7, v8);

  return v9;
}

uint64_t sub_1000168A0(uint64_t a1)
{
  uint64_t v2;

  sub_100014A84(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1000168E4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;
  unint64_t v23;
  Swift::String v24;
  uint64_t KeyPath;
  uint64_t v26;
  Swift::String v27;
  uint64_t v28;
  char *v29;
  Swift::String v30;
  uint64_t v31;
  Swift::String v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  Swift::String v36;
  uint64_t v37;
  char *v38;
  Swift::String v39;
  uint64_t v40;
  uint64_t v41;
  Swift::String v42;
  void (*v43)(char *, uint64_t);
  char *v44;
  Swift::String v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  Swift::String v49;
  char *v50;
  Swift::String v51;
  uint64_t v52;
  uint64_t v53;
  Swift::String v54;
  uint64_t v55;
  void (*v56)(char *, uint64_t);
  char *v57;
  Swift::String v58;
  uint64_t v59;
  uint64_t v60;
  Swift::String v61;
  uint64_t v62;
  char *v63;
  Swift::String v64;
  void (*v65)(char *, uint64_t);
  char *v66;
  Swift::String v67;
  uint64_t v68;
  uint64_t v69;
  Swift::String v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  char *v79;
  char *v80;
  char *v81;
  void (*v82)(char *, uint64_t);
  void (*v83)(char *);
  unsigned int v84;
  uint64_t v85;
  char *v86;
  uint64_t v87;
  char *v88;
  char *v89;
  uint64_t v90;
  unint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;

  v93 = a1;
  sub_10001B790(0, &qword_1000EC8C8, (uint64_t (*)(void))sub_10001ADA0, (uint64_t)&type metadata for CategoryIntent, (uint64_t (*)(uint64_t, uint64_t, uint64_t))&type metadata accessor for _AssistantIntent.Phrase);
  v94 = v1;
  v92 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  v3 = (char *)&v79 - v2;
  v90 = type metadata accessor for _AssistantIntent.PhraseToken(0);
  v4 = *(_QWORD *)(v90 - 8);
  __chkstk_darwin(v90);
  v89 = (char *)&v79 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001B790(0, &qword_1000EC8D0, (uint64_t (*)(void))sub_10001ADA0, (uint64_t)&type metadata for CategoryIntent, (uint64_t (*)(uint64_t, uint64_t, uint64_t))&type metadata accessor for _AssistantIntent.Phrase.StringInterpolation);
  v7 = v6;
  v8 = __chkstk_darwin(v6);
  v88 = (char *)&v79 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __chkstk_darwin(v8);
  v86 = (char *)&v79 - v11;
  v12 = __chkstk_darwin(v10);
  v81 = (char *)&v79 - v13;
  v14 = __chkstk_darwin(v12);
  v79 = (char *)&v79 - v15;
  v16 = __chkstk_darwin(v14);
  v80 = (char *)&v79 - v17;
  v18 = __chkstk_darwin(v16);
  v20 = (char *)&v79 - v19;
  __chkstk_darwin(v18);
  v22 = (char *)&v79 - v21;
  v23 = sub_10001ADA0();
  _AssistantIntent.Phrase.StringInterpolation.init(literalCapacity:interpolationCount:)(22, 2, &type metadata for CategoryIntent, v23);
  v24._countAndFlagsBits = 0x656874206E65704FLL;
  v24._object = (void *)0xE900000000000020;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v24);
  KeyPath = swift_getKeyPath(&unk_1000B1378);
  v91 = sub_10001B824();
  v26 = _AssistantIntent.IntentProjection.subscript.getter(KeyPath, v91);
  swift_release(KeyPath);
  _AssistantIntent.Phrase.StringInterpolation.appendInterpolation(_:)(v26, v7);
  swift_release(v26);
  v27._countAndFlagsBits = 0x726F676574616320;
  v27._object = (void *)0xED0000206E692079;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v27);
  v84 = enum case for _AssistantIntent.PhraseToken.applicationName(_:);
  v83 = *(void (**)(char *))(v4 + 104);
  v29 = v89;
  v28 = v90;
  v83(v89);
  _AssistantIntent.Phrase.StringInterpolation.appendInterpolation(_:)(v29, v7);
  v82 = *(void (**)(char *, uint64_t))(v4 + 8);
  v82(v29, v28);
  v30._countAndFlagsBits = 0;
  v30._object = (void *)0xE000000000000000;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v30);
  _AssistantIntent.Phrase.init(stringInterpolation:)(v22, &type metadata for CategoryIntent, v23);
  v87 = static _AssistantIntent.PhraseBuilder.buildExpression(_:)(v3, &type metadata for CategoryIntent, v23);
  v92 = *(_QWORD *)(v92 + 8);
  v31 = v94;
  ((void (*)(char *, uint64_t))v92)(v3, v94);
  _AssistantIntent.Phrase.StringInterpolation.init(literalCapacity:interpolationCount:)(34, 1, &type metadata for CategoryIntent, v23);
  v32._countAndFlagsBits = 0xD000000000000022;
  v32._object = (void *)0x80000001000B81B0;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v32);
  v33 = swift_getKeyPath(&unk_1000B1378);
  v34 = v91;
  v35 = _AssistantIntent.IntentProjection.subscript.getter(v33, v91);
  swift_release(v33);
  _AssistantIntent.Phrase.StringInterpolation.appendInterpolation(_:)(v35, v7);
  swift_release(v35);
  v36._countAndFlagsBits = 0;
  v36._object = (void *)0xE000000000000000;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v36);
  _AssistantIntent.Phrase.init(stringInterpolation:)(v20, &type metadata for CategoryIntent, v23);
  v85 = static _AssistantIntent.PhraseBuilder.buildExpression(_:)(v3, &type metadata for CategoryIntent, v23);
  v37 = v31;
  ((void (*)(char *, uint64_t))v92)(v3, v31);
  v38 = v80;
  _AssistantIntent.Phrase.StringInterpolation.init(literalCapacity:interpolationCount:)(35, 1, &type metadata for CategoryIntent, v23);
  v39._countAndFlagsBits = 0x20656D20656B6154;
  v39._object = (void *)0xEE0020796D206F74;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v39);
  v40 = swift_getKeyPath(&unk_1000B1378);
  v41 = _AssistantIntent.IntentProjection.subscript.getter(v40, v34);
  swift_release(v40);
  _AssistantIntent.Phrase.StringInterpolation.appendInterpolation(_:)(v41, v7);
  swift_release(v41);
  v42._countAndFlagsBits = 0xD000000000000015;
  v42._object = (void *)0x80000001000B8370;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v42);
  _AssistantIntent.Phrase.init(stringInterpolation:)(v38, &type metadata for CategoryIntent, v23);
  v80 = (char *)static _AssistantIntent.PhraseBuilder.buildExpression(_:)(v3, &type metadata for CategoryIntent, v23);
  v43 = (void (*)(char *, uint64_t))v92;
  ((void (*)(char *, uint64_t))v92)(v3, v37);
  v44 = v79;
  _AssistantIntent.Phrase.StringInterpolation.init(literalCapacity:interpolationCount:)(22, 1, &type metadata for CategoryIntent, v23);
  v45._object = (void *)0x80000001000B81E0;
  v45._countAndFlagsBits = 0xD000000000000011;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v45);
  v46 = swift_getKeyPath(&unk_1000B1378);
  v47 = v91;
  v48 = _AssistantIntent.IntentProjection.subscript.getter(v46, v91);
  swift_release(v46);
  _AssistantIntent.Phrase.StringInterpolation.appendInterpolation(_:)(v48, v7);
  swift_release(v48);
  v49._countAndFlagsBits = 0x6174616420;
  v49._object = (void *)0xE500000000000000;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v49);
  _AssistantIntent.Phrase.init(stringInterpolation:)(v44, &type metadata for CategoryIntent, v23);
  v79 = (char *)static _AssistantIntent.PhraseBuilder.buildExpression(_:)(v3, &type metadata for CategoryIntent, v23);
  v43(v3, v94);
  v50 = v81;
  _AssistantIntent.Phrase.StringInterpolation.init(literalCapacity:interpolationCount:)(13, 1, &type metadata for CategoryIntent, v23);
  v51._countAndFlagsBits = 0x20796D20646E6946;
  v51._object = (void *)0xE800000000000000;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v51);
  v52 = swift_getKeyPath(&unk_1000B1378);
  v53 = _AssistantIntent.IntentProjection.subscript.getter(v52, v47);
  swift_release(v52);
  _AssistantIntent.Phrase.StringInterpolation.appendInterpolation(_:)(v53, v7);
  swift_release(v53);
  v54._countAndFlagsBits = 0x6174616420;
  v54._object = (void *)0xE500000000000000;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v54);
  _AssistantIntent.Phrase.init(stringInterpolation:)(v50, &type metadata for CategoryIntent, v23);
  v81 = (char *)static _AssistantIntent.PhraseBuilder.buildExpression(_:)(v3, &type metadata for CategoryIntent, v23);
  v55 = v94;
  v56 = (void (*)(char *, uint64_t))v92;
  ((void (*)(char *, uint64_t))v92)(v3, v94);
  v57 = v86;
  _AssistantIntent.Phrase.StringInterpolation.init(literalCapacity:interpolationCount:)(9, 2, &type metadata for CategoryIntent, v23);
  v58._countAndFlagsBits = 0x206E65704FLL;
  v58._object = (void *)0xE500000000000000;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v58);
  v59 = swift_getKeyPath(&unk_1000B1378);
  v60 = _AssistantIntent.IntentProjection.subscript.getter(v59, v47);
  swift_release(v59);
  _AssistantIntent.Phrase.StringInterpolation.appendInterpolation(_:)(v60, v7);
  swift_release(v60);
  v61._countAndFlagsBits = 544106784;
  v61._object = (void *)0xE400000000000000;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v61);
  v63 = v89;
  v62 = v90;
  ((void (*)(char *, _QWORD, uint64_t))v83)(v89, v84, v90);
  _AssistantIntent.Phrase.StringInterpolation.appendInterpolation(_:)(v63, v7);
  v82(v63, v62);
  v64._countAndFlagsBits = 0;
  v64._object = (void *)0xE000000000000000;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v64);
  _AssistantIntent.Phrase.init(stringInterpolation:)(v57, &type metadata for CategoryIntent, v23);
  v90 = static _AssistantIntent.PhraseBuilder.buildExpression(_:)(v3, &type metadata for CategoryIntent, v23);
  v56(v3, v55);
  v65 = v56;
  v66 = v88;
  _AssistantIntent.Phrase.StringInterpolation.init(literalCapacity:interpolationCount:)(26, 1, &type metadata for CategoryIntent, v23);
  v67._object = (void *)0x80000001000B83B0;
  v67._countAndFlagsBits = 0x1000000000000014;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v67);
  v68 = swift_getKeyPath(&unk_1000B1378);
  v69 = _AssistantIntent.IntentProjection.subscript.getter(v68, v91);
  swift_release(v68);
  _AssistantIntent.Phrase.StringInterpolation.appendInterpolation(_:)(v69, v7);
  swift_release(v69);
  v70._countAndFlagsBits = 0x3F6174616420;
  v70._object = (void *)0xE600000000000000;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v70);
  _AssistantIntent.Phrase.init(stringInterpolation:)(v66, &type metadata for CategoryIntent, v23);
  v71 = static _AssistantIntent.PhraseBuilder.buildExpression(_:)(v3, &type metadata for CategoryIntent, v23);
  v65(v3, v55);
  sub_10001B868(0);
  v73 = swift_allocObject(v72, 88, 7);
  *(_OWORD *)(v73 + 16) = xmmword_1000B11C0;
  v74 = v85;
  *(_QWORD *)(v73 + 32) = v87;
  *(_QWORD *)(v73 + 40) = v74;
  v75 = v79;
  *(_QWORD *)(v73 + 48) = v80;
  *(_QWORD *)(v73 + 56) = v75;
  v76 = v90;
  *(_QWORD *)(v73 + 64) = v81;
  *(_QWORD *)(v73 + 72) = v76;
  *(_QWORD *)(v73 + 80) = v71;
  v77 = static _AssistantIntent.PhraseBuilder.buildBlock(_:)();
  swift_bridgeObjectRelease(v73);
  return v77;
}

uint64_t sub_1000171F0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  unint64_t v19;
  Swift::String v20;
  uint64_t KeyPath;
  uint64_t v22;
  Swift::String v23;
  uint64_t v24;
  uint64_t v25;
  Swift::String v26;
  uint64_t v27;
  Swift::String v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  Swift::String v32;
  char *v33;
  Swift::String v34;
  uint64_t v35;
  uint64_t v36;
  Swift::String v37;
  void (*v38)(char *, uint64_t);
  char *v39;
  Swift::String v40;
  uint64_t v41;
  uint64_t v42;
  Swift::String v43;
  uint64_t v44;
  char *v45;
  Swift::String v46;
  uint64_t v47;
  uint64_t v48;
  Swift::String v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  _QWORD v57[2];
  char *v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;

  v57[1] = a1;
  sub_10001B790(0, &qword_1000EC8A8, (uint64_t (*)(void))sub_10001ADE4, (uint64_t)&type metadata for OpenCategoryIntent, (uint64_t (*)(uint64_t, uint64_t, uint64_t))&type metadata accessor for _AssistantIntent.Phrase);
  v63 = *(_QWORD *)(v1 - 8);
  v64 = v1;
  __chkstk_darwin(v1);
  v3 = (char *)v57 - v2;
  v61 = type metadata accessor for _AssistantIntent.PhraseToken(0);
  v59 = *(_QWORD *)(v61 - 8);
  __chkstk_darwin(v61);
  v5 = (char *)v57 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001B790(0, &qword_1000EC8B0, (uint64_t (*)(void))sub_10001ADE4, (uint64_t)&type metadata for OpenCategoryIntent, (uint64_t (*)(uint64_t, uint64_t, uint64_t))&type metadata accessor for _AssistantIntent.Phrase.StringInterpolation);
  v7 = v6;
  v8 = __chkstk_darwin(v6);
  v62 = (char *)v57 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __chkstk_darwin(v8);
  v60 = (char *)v57 - v11;
  v12 = __chkstk_darwin(v10);
  v58 = (char *)v57 - v13;
  v14 = __chkstk_darwin(v12);
  v16 = (char *)v57 - v15;
  __chkstk_darwin(v14);
  v18 = (char *)v57 - v17;
  v19 = sub_10001ADE4();
  _AssistantIntent.Phrase.StringInterpolation.init(literalCapacity:interpolationCount:)(22, 2, &type metadata for OpenCategoryIntent, v19);
  v20._countAndFlagsBits = 0x656874206E65704FLL;
  v20._object = (void *)0xE900000000000020;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v20);
  KeyPath = swift_getKeyPath(&unk_1000B1350);
  v65 = sub_10001B6D8();
  v22 = _AssistantIntent.IntentProjection.subscript.getter(KeyPath, v65);
  swift_release(KeyPath);
  _AssistantIntent.Phrase.StringInterpolation.appendInterpolation(_:)(v22, v7);
  swift_release(v22);
  v23._countAndFlagsBits = 0x726F676574616320;
  v23._object = (void *)0xED0000206E692079;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v23);
  v24 = v59;
  v25 = v61;
  (*(void (**)(char *, _QWORD, uint64_t))(v59 + 104))(v5, enum case for _AssistantIntent.PhraseToken.applicationName(_:), v61);
  _AssistantIntent.Phrase.StringInterpolation.appendInterpolation(_:)(v5, v7);
  (*(void (**)(char *, uint64_t))(v24 + 8))(v5, v25);
  v26._countAndFlagsBits = 0;
  v26._object = (void *)0xE000000000000000;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v26);
  _AssistantIntent.Phrase.init(stringInterpolation:)(v18, &type metadata for OpenCategoryIntent, v19);
  v61 = static _AssistantIntent.PhraseBuilder.buildExpression(_:)(v3, &type metadata for OpenCategoryIntent, v19);
  v27 = v64;
  v63 = *(_QWORD *)(v63 + 8);
  ((void (*)(char *, uint64_t))v63)(v3, v64);
  _AssistantIntent.Phrase.StringInterpolation.init(literalCapacity:interpolationCount:)(18, 1, &type metadata for OpenCategoryIntent, v19);
  v28._countAndFlagsBits = 0x656874206E65704FLL;
  v28._object = (void *)0xE900000000000020;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v28);
  v29 = swift_getKeyPath(&unk_1000B1350);
  v30 = v65;
  v31 = _AssistantIntent.IntentProjection.subscript.getter(v29, v65);
  swift_release(v29);
  _AssistantIntent.Phrase.StringInterpolation.appendInterpolation(_:)(v31, v7);
  swift_release(v31);
  v32._object = (void *)0xE900000000000079;
  v32._countAndFlagsBits = 0x726F676574616320;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v32);
  _AssistantIntent.Phrase.init(stringInterpolation:)(v16, &type metadata for OpenCategoryIntent, v19);
  v59 = static _AssistantIntent.PhraseBuilder.buildExpression(_:)(v3, &type metadata for OpenCategoryIntent, v19);
  ((void (*)(char *, uint64_t))v63)(v3, v27);
  v33 = v58;
  _AssistantIntent.Phrase.StringInterpolation.init(literalCapacity:interpolationCount:)(38, 1, &type metadata for OpenCategoryIntent, v19);
  v34._countAndFlagsBits = 0xD000000000000026;
  v34._object = (void *)0x80000001000B8340;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v34);
  v35 = swift_getKeyPath(&unk_1000B1350);
  v36 = _AssistantIntent.IntentProjection.subscript.getter(v35, v30);
  swift_release(v35);
  _AssistantIntent.Phrase.StringInterpolation.appendInterpolation(_:)(v36, v7);
  swift_release(v36);
  v37._countAndFlagsBits = 0;
  v37._object = (void *)0xE000000000000000;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v37);
  _AssistantIntent.Phrase.init(stringInterpolation:)(v33, &type metadata for OpenCategoryIntent, v19);
  v58 = (char *)static _AssistantIntent.PhraseBuilder.buildExpression(_:)(v3, &type metadata for OpenCategoryIntent, v19);
  v38 = (void (*)(char *, uint64_t))v63;
  ((void (*)(char *, uint64_t))v63)(v3, v27);
  v39 = v60;
  _AssistantIntent.Phrase.StringInterpolation.init(literalCapacity:interpolationCount:)(35, 1, &type metadata for OpenCategoryIntent, v19);
  v40._countAndFlagsBits = 0x20656D20656B6154;
  v40._object = (void *)0xEE0020796D206F74;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v40);
  v41 = swift_getKeyPath(&unk_1000B1350);
  v42 = _AssistantIntent.IntentProjection.subscript.getter(v41, v65);
  swift_release(v41);
  _AssistantIntent.Phrase.StringInterpolation.appendInterpolation(_:)(v42, v7);
  swift_release(v42);
  v43._object = (void *)0x80000001000B8370;
  v43._countAndFlagsBits = 0xD000000000000015;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v43);
  _AssistantIntent.Phrase.init(stringInterpolation:)(v39, &type metadata for OpenCategoryIntent, v19);
  v60 = (char *)static _AssistantIntent.PhraseBuilder.buildExpression(_:)(v3, &type metadata for OpenCategoryIntent, v19);
  v44 = v64;
  v38(v3, v64);
  v45 = v62;
  _AssistantIntent.Phrase.StringInterpolation.init(literalCapacity:interpolationCount:)(33, 1, &type metadata for OpenCategoryIntent, v19);
  v46._countAndFlagsBits = 0xD00000000000001BLL;
  v46._object = (void *)0x80000001000B8390;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v46);
  v47 = swift_getKeyPath(&unk_1000B1350);
  v48 = _AssistantIntent.IntentProjection.subscript.getter(v47, v65);
  swift_release(v47);
  _AssistantIntent.Phrase.StringInterpolation.appendInterpolation(_:)(v48, v7);
  swift_release(v48);
  v49._countAndFlagsBits = 0x3F6174616420;
  v49._object = (void *)0xE600000000000000;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v49);
  _AssistantIntent.Phrase.init(stringInterpolation:)(v45, &type metadata for OpenCategoryIntent, v19);
  v50 = static _AssistantIntent.PhraseBuilder.buildExpression(_:)(v3, &type metadata for OpenCategoryIntent, v19);
  v38(v3, v44);
  sub_10001B71C(0);
  v52 = swift_allocObject(v51, 72, 7);
  *(_OWORD *)(v52 + 16) = xmmword_1000B11D0;
  v53 = v59;
  *(_QWORD *)(v52 + 32) = v61;
  *(_QWORD *)(v52 + 40) = v53;
  v54 = v60;
  *(_QWORD *)(v52 + 48) = v58;
  *(_QWORD *)(v52 + 56) = v54;
  *(_QWORD *)(v52 + 64) = v50;
  v55 = static _AssistantIntent.PhraseBuilder.buildBlock(_:)();
  swift_bridgeObjectRelease(v52);
  return v55;
}

uint64_t sub_1000178CC(uint64_t a1)
{
  return sub_100018208(a1, (uint64_t)&unk_1000B1350, (uint64_t (*)(void))sub_10001B6D8, (uint64_t (*)(uint64_t))sub_10001ADE4, (uint64_t)sub_1000178F0);
}

uint64_t sub_1000178F0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v0 = static _AssistantIntent.StringValueBuilder.buildExpression(_:)(0x725420656C637943, 0xEE00676E696B6361);
  v1 = static _AssistantIntent.StringValueBuilder.buildExpression(_:)(0x7974696C69626F4DLL, 0xE800000000000000);
  v2 = static _AssistantIntent.StringValueBuilder.buildExpression(_:)(0x6F6974697274754ELL, 0xE90000000000006ELL);
  v3 = static _AssistantIntent.StringValueBuilder.buildExpression(_:)(0x7472616548, 0xE500000000000000);
  v4 = static _AssistantIntent.StringValueBuilder.buildExpression(_:)(0x7065656C53, 0xE500000000000000);
  v5 = static _AssistantIntent.StringValueBuilder.buildExpression(_:)(0x697461636964654DLL, 0xEB00000000736E6FLL);
  sub_1000076D8(0, &qword_1000EC7A0, (uint64_t (*)(uint64_t))sub_10001B104, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for _ContiguousArrayStorage);
  v7 = swift_allocObject(v6, 80, 7);
  *(_OWORD *)(v7 + 16) = xmmword_1000B11E0;
  *(_QWORD *)(v7 + 32) = v0;
  *(_QWORD *)(v7 + 40) = v1;
  *(_QWORD *)(v7 + 48) = v2;
  *(_QWORD *)(v7 + 56) = v3;
  *(_QWORD *)(v7 + 64) = v4;
  *(_QWORD *)(v7 + 72) = v5;
  v8 = static _AssistantIntent.StringValueBuilder.buildBlock(_:)();
  swift_bridgeObjectRelease(v7);
  return v8;
}

uint64_t sub_100017A34(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  unint64_t v22;
  Swift::String v23;
  uint64_t KeyPath;
  unint64_t v25;
  uint64_t v26;
  Swift::String v27;
  uint64_t v28;
  Swift::String v29;
  uint64_t v30;
  uint64_t v31;
  Swift::String v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  Swift::String v36;
  uint64_t v37;
  char *v38;
  Swift::String v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  Swift::String v43;
  uint64_t v44;
  void (*v45)(char *, uint64_t);
  char *v46;
  Swift::String v47;
  uint64_t v48;
  uint64_t v49;
  Swift::String v50;
  uint64_t v51;
  char *v52;
  Swift::String v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  Swift::String v57;
  void (*v58)(char *, uint64_t);
  char *v59;
  Swift::String v60;
  uint64_t v61;
  uint64_t v62;
  Swift::String v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;
  char *v71;
  char *v72;
  uint64_t v73;
  char *v74;
  uint64_t v75;
  char *v76;
  uint64_t v77;
  char *v78;
  unint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;

  v75 = type metadata accessor for _AssistantIntent.PhraseToken(0);
  v73 = *(_QWORD *)(v75 - 8);
  __chkstk_darwin(v75);
  v72 = (char *)&v71 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001B790(0, &qword_1000EC880, (uint64_t (*)(void))sub_10001AE28, (uint64_t)&type metadata for OpenDataTypeIntent, (uint64_t (*)(uint64_t, uint64_t, uint64_t))&type metadata accessor for _AssistantIntent.Phrase);
  v4 = *(_QWORD *)(v3 - 8);
  v81 = v3;
  v82 = v4;
  __chkstk_darwin(v3);
  v6 = (char *)&v71 - v5;
  sub_10001B790(0, &qword_1000EC888, (uint64_t (*)(void))sub_10001AE28, (uint64_t)&type metadata for OpenDataTypeIntent, (uint64_t (*)(uint64_t, uint64_t, uint64_t))&type metadata accessor for _AssistantIntent.Phrase.StringInterpolation);
  v8 = v7;
  v9 = __chkstk_darwin(v7);
  v78 = (char *)&v71 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __chkstk_darwin(v9);
  v76 = (char *)&v71 - v12;
  v13 = __chkstk_darwin(v11);
  v74 = (char *)&v71 - v14;
  v15 = __chkstk_darwin(v13);
  v71 = (char *)&v71 - v16;
  v17 = __chkstk_darwin(v15);
  v19 = (char *)&v71 - v18;
  __chkstk_darwin(v17);
  v21 = (char *)&v71 - v20;
  v22 = sub_10001AE28();
  _AssistantIntent.Phrase.StringInterpolation.init(literalCapacity:interpolationCount:)(10, 1, &type metadata for OpenDataTypeIntent, v22);
  v23._countAndFlagsBits = 0x206E65704FLL;
  v23._object = (void *)0xE500000000000000;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v23);
  KeyPath = swift_getKeyPath(&unk_1000B1328);
  v25 = sub_10001B5E4();
  v79 = v25;
  v80 = a1;
  v26 = _AssistantIntent.IntentProjection.subscript.getter(KeyPath, v25);
  swift_release(KeyPath);
  _AssistantIntent.Phrase.StringInterpolation.appendInterpolation(_:)(v26, v8);
  swift_release(v26);
  v27._countAndFlagsBits = 0x6174616420;
  v27._object = (void *)0xE500000000000000;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v27);
  _AssistantIntent.Phrase.init(stringInterpolation:)(v21, &type metadata for OpenDataTypeIntent, v22);
  v77 = static _AssistantIntent.PhraseBuilder.buildExpression(_:)(v6, &type metadata for OpenDataTypeIntent, v22);
  v28 = v81;
  v82 = *(_QWORD *)(v82 + 8);
  ((void (*)(char *, uint64_t))v82)(v6, v81);
  _AssistantIntent.Phrase.StringInterpolation.init(literalCapacity:interpolationCount:)(14, 2, &type metadata for OpenDataTypeIntent, v22);
  v29._countAndFlagsBits = 0x206E65704FLL;
  v29._object = (void *)0xE500000000000000;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v29);
  v30 = swift_getKeyPath(&unk_1000B1328);
  v31 = _AssistantIntent.IntentProjection.subscript.getter(v30, v25);
  swift_release(v30);
  _AssistantIntent.Phrase.StringInterpolation.appendInterpolation(_:)(v31, v8);
  swift_release(v31);
  v32._countAndFlagsBits = 0x6E69206174616420;
  v32._object = (void *)0xE900000000000020;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v32);
  v34 = v72;
  v33 = v73;
  v35 = v75;
  (*(void (**)(char *, _QWORD, uint64_t))(v73 + 104))(v72, enum case for _AssistantIntent.PhraseToken.applicationName(_:), v75);
  _AssistantIntent.Phrase.StringInterpolation.appendInterpolation(_:)(v34, v8);
  (*(void (**)(char *, uint64_t))(v33 + 8))(v34, v35);
  v36._countAndFlagsBits = 0;
  v36._object = (void *)0xE000000000000000;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v36);
  _AssistantIntent.Phrase.init(stringInterpolation:)(v19, &type metadata for OpenDataTypeIntent, v22);
  v75 = static _AssistantIntent.PhraseBuilder.buildExpression(_:)(v6, &type metadata for OpenDataTypeIntent, v22);
  v37 = v28;
  ((void (*)(char *, uint64_t))v82)(v6, v28);
  v38 = v71;
  _AssistantIntent.Phrase.StringInterpolation.init(literalCapacity:interpolationCount:)(16, 1, &type metadata for OpenDataTypeIntent, v22);
  v39._countAndFlagsBits = 0x20656D20776F6853;
  v39._object = (void *)0xEB0000000020796DLL;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v39);
  v40 = swift_getKeyPath(&unk_1000B1328);
  v41 = v79;
  v42 = _AssistantIntent.IntentProjection.subscript.getter(v40, v79);
  swift_release(v40);
  _AssistantIntent.Phrase.StringInterpolation.appendInterpolation(_:)(v42, v8);
  swift_release(v42);
  v43._countAndFlagsBits = 0x6174616420;
  v43._object = (void *)0xE500000000000000;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v43);
  _AssistantIntent.Phrase.init(stringInterpolation:)(v38, &type metadata for OpenDataTypeIntent, v22);
  v73 = static _AssistantIntent.PhraseBuilder.buildExpression(_:)(v6, &type metadata for OpenDataTypeIntent, v22);
  v44 = v37;
  v45 = (void (*)(char *, uint64_t))v82;
  ((void (*)(char *, uint64_t))v82)(v6, v44);
  v46 = v74;
  _AssistantIntent.Phrase.StringInterpolation.init(literalCapacity:interpolationCount:)(19, 1, &type metadata for OpenDataTypeIntent, v22);
  v47._countAndFlagsBits = 0x20656D20656B6154;
  v47._object = (void *)0xEE0020796D206F74;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v47);
  v48 = swift_getKeyPath(&unk_1000B1328);
  v49 = _AssistantIntent.IntentProjection.subscript.getter(v48, v41);
  swift_release(v48);
  _AssistantIntent.Phrase.StringInterpolation.appendInterpolation(_:)(v49, v8);
  swift_release(v49);
  v50._countAndFlagsBits = 0x6174616420;
  v50._object = (void *)0xE500000000000000;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v50);
  _AssistantIntent.Phrase.init(stringInterpolation:)(v46, &type metadata for OpenDataTypeIntent, v22);
  v74 = (char *)static _AssistantIntent.PhraseBuilder.buildExpression(_:)(v6, &type metadata for OpenDataTypeIntent, v22);
  v51 = v81;
  v45(v6, v81);
  v52 = v76;
  _AssistantIntent.Phrase.StringInterpolation.init(literalCapacity:interpolationCount:)(22, 1, &type metadata for OpenDataTypeIntent, v22);
  v53._object = (void *)0x80000001000B81E0;
  v53._countAndFlagsBits = 0xD000000000000011;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v53);
  v54 = swift_getKeyPath(&unk_1000B1328);
  v55 = v79;
  v56 = _AssistantIntent.IntentProjection.subscript.getter(v54, v79);
  swift_release(v54);
  _AssistantIntent.Phrase.StringInterpolation.appendInterpolation(_:)(v56, v8);
  swift_release(v56);
  v57._countAndFlagsBits = 0x6174616420;
  v57._object = (void *)0xE500000000000000;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v57);
  _AssistantIntent.Phrase.init(stringInterpolation:)(v52, &type metadata for OpenDataTypeIntent, v22);
  v76 = (char *)static _AssistantIntent.PhraseBuilder.buildExpression(_:)(v6, &type metadata for OpenDataTypeIntent, v22);
  v58 = (void (*)(char *, uint64_t))v82;
  ((void (*)(char *, uint64_t))v82)(v6, v51);
  v59 = v78;
  _AssistantIntent.Phrase.StringInterpolation.init(literalCapacity:interpolationCount:)(25, 1, &type metadata for OpenDataTypeIntent, v22);
  v60._countAndFlagsBits = 0xD000000000000013;
  v60._object = (void *)0x80000001000B8320;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v60);
  v61 = swift_getKeyPath(&unk_1000B1328);
  v62 = _AssistantIntent.IntentProjection.subscript.getter(v61, v55);
  swift_release(v61);
  _AssistantIntent.Phrase.StringInterpolation.appendInterpolation(_:)(v62, v8);
  swift_release(v62);
  v63._countAndFlagsBits = 0x3F6174616420;
  v63._object = (void *)0xE600000000000000;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v63);
  _AssistantIntent.Phrase.init(stringInterpolation:)(v59, &type metadata for OpenDataTypeIntent, v22);
  v64 = static _AssistantIntent.PhraseBuilder.buildExpression(_:)(v6, &type metadata for OpenDataTypeIntent, v22);
  v58(v6, v81);
  sub_10001B628(0);
  v66 = swift_allocObject(v65, 80, 7);
  *(_OWORD *)(v66 + 16) = xmmword_1000B11E0;
  v67 = v75;
  *(_QWORD *)(v66 + 32) = v77;
  *(_QWORD *)(v66 + 40) = v67;
  v68 = v74;
  *(_QWORD *)(v66 + 48) = v73;
  *(_QWORD *)(v66 + 56) = v68;
  *(_QWORD *)(v66 + 64) = v76;
  *(_QWORD *)(v66 + 72) = v64;
  v69 = static _AssistantIntent.PhraseBuilder.buildBlock(_:)();
  swift_bridgeObjectRelease(v66);
  return v69;
}

uint64_t sub_1000181E4(uint64_t a1)
{
  return sub_100018208(a1, (uint64_t)&unk_1000B1328, (uint64_t (*)(void))sub_10001B5E4, (uint64_t (*)(uint64_t))sub_10001AE28, (uint64_t)sub_100018340);
}

uint64_t sub_100018208(uint64_t a1, uint64_t a2, uint64_t (*a3)(void), uint64_t (*a4)(uint64_t), uint64_t a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t KeyPath;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;

  v9 = type metadata accessor for _AssistantIntent.Value(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v23 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  KeyPath = swift_getKeyPath(a2);
  v14 = a3();
  v15 = _AssistantIntent.IntentProjection.subscript.getter(KeyPath, v14);
  v16 = swift_release(KeyPath);
  v17 = a4(v16);
  _AssistantIntent.Value.init<A>(for:builder:)(v15, a5, 0, v17);
  v18 = static _AssistantIntent.ParameterValueBuilder.buildExpression(_:)(v12);
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  sub_1000076D8(0, &qword_1000EC790, (uint64_t (*)(uint64_t))sub_10001B0E8, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for _ContiguousArrayStorage);
  v20 = swift_allocObject(v19, 40, 7);
  *(_OWORD *)(v20 + 16) = xmmword_1000B11F0;
  *(_QWORD *)(v20 + 32) = v18;
  v21 = static _AssistantIntent.ParameterValueBuilder.buildBlock(_:)();
  swift_bridgeObjectRelease(v20);
  return v21;
}

uint64_t sub_100018340()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v0 = static _AssistantIntent.StringValueBuilder.buildExpression(_:)(0x7370657453, 0xE500000000000000);
  v1 = static _AssistantIntent.StringValueBuilder.buildExpression(_:)(0x61657375614ELL, 0xE600000000000000);
  v2 = static _AssistantIntent.StringValueBuilder.buildExpression(_:)(0x46206F6964726143, 0xEE007373656E7469);
  v3 = static _AssistantIntent.StringValueBuilder.buildExpression(_:)(0x6152207472616548, 0xEA00000000006574);
  v4 = static _AssistantIntent.StringValueBuilder.buildExpression(_:)(0x6E69746F6942, 0xE600000000000000);
  v5 = static _AssistantIntent.StringValueBuilder.buildExpression(_:)(0x784F20646F6F6C42, 0xEC0000006E656779);
  sub_1000076D8(0, &qword_1000EC7A0, (uint64_t (*)(uint64_t))sub_10001B104, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for _ContiguousArrayStorage);
  v7 = swift_allocObject(v6, 80, 7);
  *(_OWORD *)(v7 + 16) = xmmword_1000B11E0;
  *(_QWORD *)(v7 + 32) = v0;
  *(_QWORD *)(v7 + 40) = v1;
  *(_QWORD *)(v7 + 48) = v2;
  *(_QWORD *)(v7 + 56) = v3;
  *(_QWORD *)(v7 + 64) = v4;
  *(_QWORD *)(v7 + 72) = v5;
  v8 = static _AssistantIntent.StringValueBuilder.buildBlock(_:)();
  swift_bridgeObjectRelease(v7);
  return v8;
}

uint64_t sub_100018480(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  unint64_t v20;
  Swift::String v21;
  uint64_t KeyPath;
  uint64_t v23;
  Swift::String v24;
  uint64_t v25;
  Swift::String v26;
  Swift::String v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  Swift::String v31;
  uint64_t v32;
  Swift::String v33;
  unint64_t v34;
  char *v35;
  uint64_t v36;
  void (*v37)(char *, uint64_t);
  char *v38;
  Swift::String v39;
  uint64_t v40;
  uint64_t v41;
  Swift::String v42;
  char *v43;
  Swift::String v44;
  uint64_t v45;
  uint64_t v46;
  Swift::String v47;
  char *v48;
  uint64_t v49;
  void (*v50)(char *);
  Swift::String v51;
  unint64_t v52;
  char *v53;
  Swift::String v54;
  uint64_t v55;
  uint64_t v56;
  Swift::String v57;
  Swift::String v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  uint64_t v64;
  char *v66;
  char *v67;
  uint64_t v68;
  char *v69;
  uint64_t v70;
  char *v71;
  void (*v72)(char *);
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  void (*v77)(char *, uint64_t);
  unsigned int v78;
  uint64_t v79;

  v73 = a1;
  sub_10001B790(0, &qword_1000EC850, (uint64_t (*)(void))sub_10001AE6C, (uint64_t)&type metadata for OpenTabIntent, (uint64_t (*)(uint64_t, uint64_t, uint64_t))&type metadata accessor for _AssistantIntent.Phrase);
  v79 = v1;
  v76 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  v3 = (char *)&v66 - v2;
  v74 = type metadata accessor for _AssistantIntent.PhraseToken(0);
  v4 = *(_QWORD *)(v74 - 8);
  __chkstk_darwin(v74);
  v6 = (char *)&v66 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001B790(0, &qword_1000EC858, (uint64_t (*)(void))sub_10001AE6C, (uint64_t)&type metadata for OpenTabIntent, (uint64_t (*)(uint64_t, uint64_t, uint64_t))&type metadata accessor for _AssistantIntent.Phrase.StringInterpolation);
  v8 = v7;
  v9 = __chkstk_darwin(v7);
  v71 = (char *)&v66 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __chkstk_darwin(v9);
  v69 = (char *)&v66 - v12;
  v13 = __chkstk_darwin(v11);
  v67 = (char *)&v66 - v14;
  v15 = __chkstk_darwin(v13);
  v17 = (char *)&v66 - v16;
  __chkstk_darwin(v15);
  v19 = (char *)&v66 - v18;
  v20 = sub_10001AE6C();
  _AssistantIntent.Phrase.StringInterpolation.init(literalCapacity:interpolationCount:)(17, 2, &type metadata for OpenTabIntent, v20);
  v21._countAndFlagsBits = 0x656874206E65704FLL;
  v21._object = (void *)0xE900000000000020;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v21);
  KeyPath = swift_getKeyPath(&unk_1000B1300);
  v75 = sub_10001B4F0();
  v23 = _AssistantIntent.IntentProjection.subscript.getter(KeyPath, v75);
  swift_release(KeyPath);
  _AssistantIntent.Phrase.StringInterpolation.appendInterpolation(_:)(v23, v8);
  swift_release(v23);
  v24._countAndFlagsBits = 0x206E692062617420;
  v24._object = (void *)0xE800000000000000;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v24);
  v78 = enum case for _AssistantIntent.PhraseToken.applicationName(_:);
  v72 = *(void (**)(char *))(v4 + 104);
  v25 = v74;
  v72(v6);
  _AssistantIntent.Phrase.StringInterpolation.appendInterpolation(_:)(v6, v8);
  v77 = *(void (**)(char *, uint64_t))(v4 + 8);
  v77(v6, v25);
  v26._countAndFlagsBits = 0;
  v26._object = (void *)0xE000000000000000;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v26);
  _AssistantIntent.Phrase.init(stringInterpolation:)(v19, &type metadata for OpenTabIntent, v20);
  v70 = static _AssistantIntent.PhraseBuilder.buildExpression(_:)(v3, &type metadata for OpenTabIntent, v20);
  v76 = *(_QWORD *)(v76 + 8);
  ((void (*)(char *, uint64_t))v76)(v3, v79);
  _AssistantIntent.Phrase.StringInterpolation.init(literalCapacity:interpolationCount:)(9, 2, &type metadata for OpenTabIntent, v20);
  v27._countAndFlagsBits = 0x206E65704FLL;
  v27._object = (void *)0xE500000000000000;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v27);
  v28 = swift_getKeyPath(&unk_1000B1300);
  v29 = v75;
  v30 = _AssistantIntent.IntentProjection.subscript.getter(v28, v75);
  swift_release(v28);
  _AssistantIntent.Phrase.StringInterpolation.appendInterpolation(_:)(v30, v8);
  swift_release(v30);
  v31._countAndFlagsBits = 544106784;
  v31._object = (void *)0xE400000000000000;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v31);
  v66 = v6;
  v32 = v74;
  ((void (*)(char *, _QWORD, uint64_t))v72)(v6, v78, v74);
  _AssistantIntent.Phrase.StringInterpolation.appendInterpolation(_:)(v6, v8);
  v77(v6, v32);
  v33._countAndFlagsBits = 0;
  v33._object = (void *)0xE000000000000000;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v33);
  v34 = v20;
  _AssistantIntent.Phrase.init(stringInterpolation:)(v17, &type metadata for OpenTabIntent, v20);
  v68 = static _AssistantIntent.PhraseBuilder.buildExpression(_:)(v3, &type metadata for OpenTabIntent, v20);
  v35 = v3;
  v36 = v79;
  v37 = (void (*)(char *, uint64_t))v76;
  ((void (*)(char *, uint64_t))v76)(v3, v79);
  v38 = v67;
  _AssistantIntent.Phrase.StringInterpolation.init(literalCapacity:interpolationCount:)(11, 1, &type metadata for OpenTabIntent, v34);
  v39._countAndFlagsBits = 0x20656D20656B6154;
  v39._object = (void *)0xEB00000000206F74;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v39);
  v40 = swift_getKeyPath(&unk_1000B1300);
  v41 = _AssistantIntent.IntentProjection.subscript.getter(v40, v29);
  swift_release(v40);
  _AssistantIntent.Phrase.StringInterpolation.appendInterpolation(_:)(v41, v8);
  swift_release(v41);
  v42._countAndFlagsBits = 0;
  v42._object = (void *)0xE000000000000000;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v42);
  _AssistantIntent.Phrase.init(stringInterpolation:)(v38, &type metadata for OpenTabIntent, v34);
  v67 = (char *)static _AssistantIntent.PhraseBuilder.buildExpression(_:)(v35, &type metadata for OpenTabIntent, v34);
  v37(v35, v36);
  v43 = v69;
  _AssistantIntent.Phrase.StringInterpolation.init(literalCapacity:interpolationCount:)(21, 2, &type metadata for OpenTabIntent, v34);
  v44._countAndFlagsBits = 0x20656D20776F6853;
  v44._object = (void *)0xEC00000020656874;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v44);
  v45 = swift_getKeyPath(&unk_1000B1300);
  v46 = _AssistantIntent.IntentProjection.subscript.getter(v45, v75);
  swift_release(v45);
  _AssistantIntent.Phrase.StringInterpolation.appendInterpolation(_:)(v46, v8);
  swift_release(v46);
  v47._countAndFlagsBits = 0x6E69206567617020;
  v47._object = (void *)0xE900000000000020;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v47);
  v48 = v66;
  v49 = v74;
  v50 = v72;
  ((void (*)(char *, _QWORD, uint64_t))v72)(v66, v78, v74);
  _AssistantIntent.Phrase.StringInterpolation.appendInterpolation(_:)(v48, v8);
  v77(v48, v49);
  v51._countAndFlagsBits = 0;
  v51._object = (void *)0xE000000000000000;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v51);
  _AssistantIntent.Phrase.init(stringInterpolation:)(v43, &type metadata for OpenTabIntent, v34);
  v52 = v34;
  v69 = (char *)static _AssistantIntent.PhraseBuilder.buildExpression(_:)(v35, &type metadata for OpenTabIntent, v34);
  ((void (*)(char *, uint64_t))v76)(v35, v79);
  v53 = v71;
  _AssistantIntent.Phrase.StringInterpolation.init(literalCapacity:interpolationCount:)(18, 2, &type metadata for OpenTabIntent, v52);
  v54._countAndFlagsBits = 0x6568742077656956;
  v54._object = (void *)0xE900000000000020;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v54);
  v55 = swift_getKeyPath(&unk_1000B1300);
  v56 = _AssistantIntent.IntentProjection.subscript.getter(v55, v75);
  swift_release(v55);
  _AssistantIntent.Phrase.StringInterpolation.appendInterpolation(_:)(v56, v8);
  swift_release(v56);
  v57._countAndFlagsBits = 0x6E69206567617020;
  v57._object = (void *)0xE900000000000020;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v57);
  ((void (*)(char *, _QWORD, uint64_t))v50)(v48, v78, v49);
  _AssistantIntent.Phrase.StringInterpolation.appendInterpolation(_:)(v48, v8);
  v77(v48, v49);
  v58._countAndFlagsBits = 0;
  v58._object = (void *)0xE000000000000000;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v58);
  _AssistantIntent.Phrase.init(stringInterpolation:)(v53, &type metadata for OpenTabIntent, v52);
  v59 = static _AssistantIntent.PhraseBuilder.buildExpression(_:)(v35, &type metadata for OpenTabIntent, v52);
  ((void (*)(char *, uint64_t))v76)(v35, v79);
  sub_10001B534(0);
  v61 = swift_allocObject(v60, 72, 7);
  *(_OWORD *)(v61 + 16) = xmmword_1000B11D0;
  v62 = v68;
  *(_QWORD *)(v61 + 32) = v70;
  *(_QWORD *)(v61 + 40) = v62;
  v63 = v69;
  *(_QWORD *)(v61 + 48) = v67;
  *(_QWORD *)(v61 + 56) = v63;
  *(_QWORD *)(v61 + 64) = v59;
  v64 = static _AssistantIntent.PhraseBuilder.buildBlock(_:)();
  swift_bridgeObjectRelease(v61);
  return v64;
}

uint64_t sub_100018C18(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  char *v20;
  unint64_t v21;
  Swift::String v22;
  uint64_t KeyPath;
  unint64_t v24;
  uint64_t v25;
  Swift::String v26;
  Swift::String v27;
  uint64_t v28;
  uint64_t v29;
  Swift::String v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  Swift::String v34;
  uint64_t v35;
  Swift::String v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  Swift::String v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  Swift::String v44;
  char *v45;
  void (*v46)(char *, uint64_t);
  char *v47;
  Swift::String v48;
  uint64_t v49;
  uint64_t v50;
  Swift::String v51;
  uint64_t v52;
  char *v53;
  Swift::String v54;
  char *v55;
  uint64_t v56;
  char *v57;
  Swift::String v58;
  uint64_t v59;
  uint64_t v60;
  Swift::String v61;
  Swift::String v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  uint64_t v68;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  uint64_t v73;
  char *v74;
  uint64_t v75;
  char *v76;
  uint64_t v77;
  unsigned int v78;
  unint64_t v79;
  void (*v80)(char *);
  uint64_t v81;
  uint64_t v82;
  char *v83;
  uint64_t v84;
  uint64_t v85;

  v77 = a1;
  v1 = type metadata accessor for _AssistantIntent.PhraseToken(0);
  v2 = *(_QWORD *)(v1 - 8);
  v84 = v1;
  v85 = v2;
  __chkstk_darwin(v1);
  v83 = (char *)&v70 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001B790(0, &qword_1000EC828, (uint64_t (*)(void))sub_10001AEB0, (uint64_t)&type metadata for OpenViewIntent, (uint64_t (*)(uint64_t, uint64_t, uint64_t))&type metadata accessor for _AssistantIntent.Phrase);
  v81 = *(_QWORD *)(v4 - 8);
  v82 = v4;
  __chkstk_darwin(v4);
  v6 = (char *)&v70 - v5;
  sub_10001B790(0, &qword_1000EC830, (uint64_t (*)(void))sub_10001AEB0, (uint64_t)&type metadata for OpenViewIntent, (uint64_t (*)(uint64_t, uint64_t, uint64_t))&type metadata accessor for _AssistantIntent.Phrase.StringInterpolation);
  v8 = v7;
  v9 = __chkstk_darwin(v7);
  v74 = (char *)&v70 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __chkstk_darwin(v9);
  v72 = (char *)&v70 - v12;
  v13 = __chkstk_darwin(v11);
  v15 = (char *)&v70 - v14;
  v16 = __chkstk_darwin(v13);
  v18 = (char *)&v70 - v17;
  __chkstk_darwin(v16);
  v20 = (char *)&v70 - v19;
  v21 = sub_10001AEB0();
  _AssistantIntent.Phrase.StringInterpolation.init(literalCapacity:interpolationCount:)(5, 1, &type metadata for OpenViewIntent, v21);
  v22._countAndFlagsBits = 0x206E65704FLL;
  v22._object = (void *)0xE500000000000000;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v22);
  KeyPath = swift_getKeyPath(&unk_1000B12D8);
  v24 = sub_10001B3FC();
  v79 = v24;
  v25 = _AssistantIntent.IntentProjection.subscript.getter(KeyPath, v24);
  swift_release(KeyPath);
  _AssistantIntent.Phrase.StringInterpolation.appendInterpolation(_:)(v25, v8);
  swift_release(v25);
  v26._countAndFlagsBits = 0;
  v26._object = (void *)0xE000000000000000;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v26);
  _AssistantIntent.Phrase.init(stringInterpolation:)(v20, &type metadata for OpenViewIntent, v21);
  v75 = static _AssistantIntent.PhraseBuilder.buildExpression(_:)(v6, &type metadata for OpenViewIntent, v21);
  v81 = *(_QWORD *)(v81 + 8);
  ((void (*)(char *, uint64_t))v81)(v6, v82);
  _AssistantIntent.Phrase.StringInterpolation.init(literalCapacity:interpolationCount:)(9, 2, &type metadata for OpenViewIntent, v21);
  v27._countAndFlagsBits = 0x206E65704FLL;
  v27._object = (void *)0xE500000000000000;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v27);
  v28 = swift_getKeyPath(&unk_1000B12D8);
  v29 = _AssistantIntent.IntentProjection.subscript.getter(v28, v24);
  swift_release(v28);
  _AssistantIntent.Phrase.StringInterpolation.appendInterpolation(_:)(v29, v8);
  swift_release(v29);
  v30._countAndFlagsBits = 544106784;
  v30._object = (void *)0xE400000000000000;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v30);
  v78 = enum case for _AssistantIntent.PhraseToken.applicationName(_:);
  v31 = v84;
  v32 = v85;
  v80 = *(void (**)(char *))(v85 + 104);
  v33 = v83;
  v80(v83);
  _AssistantIntent.Phrase.StringInterpolation.appendInterpolation(_:)(v33, v8);
  v85 = *(_QWORD *)(v32 + 8);
  ((void (*)(char *, uint64_t))v85)(v33, v31);
  v34._countAndFlagsBits = 0;
  v34._object = (void *)0xE000000000000000;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v34);
  v76 = v6;
  _AssistantIntent.Phrase.init(stringInterpolation:)(v18, &type metadata for OpenViewIntent, v21);
  v73 = static _AssistantIntent.PhraseBuilder.buildExpression(_:)(v6, &type metadata for OpenViewIntent, v21);
  v35 = v82;
  ((void (*)(char *, uint64_t))v81)(v6, v82);
  _AssistantIntent.Phrase.StringInterpolation.init(literalCapacity:interpolationCount:)(15, 2, &type metadata for OpenViewIntent, v21);
  v36._countAndFlagsBits = 0x20656D20656B6154;
  v36._object = (void *)0xEB00000000206F74;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v36);
  v37 = swift_getKeyPath(&unk_1000B12D8);
  v38 = v79;
  v39 = _AssistantIntent.IntentProjection.subscript.getter(v37, v79);
  swift_release(v37);
  _AssistantIntent.Phrase.StringInterpolation.appendInterpolation(_:)(v39, v8);
  swift_release(v39);
  v40._countAndFlagsBits = 544106784;
  v40._object = (void *)0xE400000000000000;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v40);
  v41 = v83;
  v42 = v84;
  v43 = v78;
  ((void (*)(char *, _QWORD, uint64_t))v80)(v83, v78, v84);
  _AssistantIntent.Phrase.StringInterpolation.appendInterpolation(_:)(v41, v8);
  ((void (*)(char *, uint64_t))v85)(v41, v42);
  v44._countAndFlagsBits = 0;
  v44._object = (void *)0xE000000000000000;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v44);
  v45 = v76;
  _AssistantIntent.Phrase.init(stringInterpolation:)(v15, &type metadata for OpenViewIntent, v21);
  v71 = static _AssistantIntent.PhraseBuilder.buildExpression(_:)(v45, &type metadata for OpenViewIntent, v21);
  v46 = (void (*)(char *, uint64_t))v81;
  ((void (*)(char *, uint64_t))v81)(v45, v35);
  v47 = v72;
  _AssistantIntent.Phrase.StringInterpolation.init(literalCapacity:interpolationCount:)(21, 2, &type metadata for OpenViewIntent, v21);
  v48._countAndFlagsBits = 0x20656D20776F6853;
  v48._object = (void *)0xEC00000020656874;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v48);
  v49 = swift_getKeyPath(&unk_1000B12D8);
  v50 = _AssistantIntent.IntentProjection.subscript.getter(v49, v38);
  swift_release(v49);
  _AssistantIntent.Phrase.StringInterpolation.appendInterpolation(_:)(v50, v8);
  swift_release(v50);
  v51._countAndFlagsBits = 0x6E69206567617020;
  v51._object = (void *)0xE900000000000020;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v51);
  v53 = v83;
  v52 = v84;
  ((void (*)(char *, uint64_t, uint64_t))v80)(v83, v43, v84);
  _AssistantIntent.Phrase.StringInterpolation.appendInterpolation(_:)(v53, v8);
  ((void (*)(char *, uint64_t))v85)(v53, v52);
  v54._countAndFlagsBits = 0;
  v54._object = (void *)0xE000000000000000;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v54);
  v55 = v76;
  _AssistantIntent.Phrase.init(stringInterpolation:)(v47, &type metadata for OpenViewIntent, v21);
  v72 = (char *)static _AssistantIntent.PhraseBuilder.buildExpression(_:)(v55, &type metadata for OpenViewIntent, v21);
  v56 = v82;
  v46(v55, v82);
  v57 = v74;
  _AssistantIntent.Phrase.StringInterpolation.init(literalCapacity:interpolationCount:)(18, 2, &type metadata for OpenViewIntent, v21);
  v58._countAndFlagsBits = 0x6568742077656956;
  v58._object = (void *)0xE900000000000020;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v58);
  v59 = swift_getKeyPath(&unk_1000B12D8);
  v60 = _AssistantIntent.IntentProjection.subscript.getter(v59, v79);
  swift_release(v59);
  _AssistantIntent.Phrase.StringInterpolation.appendInterpolation(_:)(v60, v8);
  swift_release(v60);
  v61._countAndFlagsBits = 0x6E69206567617020;
  v61._object = (void *)0xE900000000000020;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v61);
  ((void (*)(char *, _QWORD, uint64_t))v80)(v53, v78, v52);
  _AssistantIntent.Phrase.StringInterpolation.appendInterpolation(_:)(v53, v8);
  ((void (*)(char *, uint64_t))v85)(v53, v52);
  v62._countAndFlagsBits = 0;
  v62._object = (void *)0xE000000000000000;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v62);
  _AssistantIntent.Phrase.init(stringInterpolation:)(v57, &type metadata for OpenViewIntent, v21);
  v63 = static _AssistantIntent.PhraseBuilder.buildExpression(_:)(v55, &type metadata for OpenViewIntent, v21);
  ((void (*)(char *, uint64_t))v81)(v55, v56);
  sub_10001B440(0);
  v65 = swift_allocObject(v64, 72, 7);
  *(_OWORD *)(v65 + 16) = xmmword_1000B11D0;
  v66 = v73;
  *(_QWORD *)(v65 + 32) = v75;
  *(_QWORD *)(v65 + 40) = v66;
  v67 = v72;
  *(_QWORD *)(v65 + 48) = v71;
  *(_QWORD *)(v65 + 56) = v67;
  *(_QWORD *)(v65 + 64) = v63;
  v68 = static _AssistantIntent.PhraseBuilder.buildBlock(_:)();
  swift_bridgeObjectRelease(v65);
  return v68;
}

uint64_t sub_10001939C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  unint64_t v17;
  Swift::String v18;
  uint64_t KeyPath;
  uint64_t v20;
  Swift::String v21;
  uint64_t v22;
  void (*v23)(char *, uint64_t, uint64_t);
  uint64_t v24;
  void (*v25)(char *, uint64_t, uint64_t);
  void (*v26)(char *, uint64_t);
  char *v27;
  void (*v28)(char *, uint64_t);
  Swift::String v29;
  char *v30;
  Swift::String v31;
  uint64_t v32;
  Swift::String v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  Swift::String v37;
  char *v38;
  unint64_t v39;
  char *v40;
  char *v41;
  uint64_t v42;
  void (*v43)(char *, uint64_t);
  char *v44;
  Swift::String v45;
  uint64_t v46;
  uint64_t v47;
  Swift::String v48;
  char *v49;
  char *v50;
  uint64_t v51;
  Swift::String v52;
  unint64_t v53;
  char *v54;
  Swift::String v55;
  uint64_t v56;
  uint64_t v57;
  Swift::String v58;
  Swift::String v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v66;
  unint64_t v67;
  void (*v68)(char *, uint64_t);
  char *v69;
  uint64_t v70;
  char *v71;
  uint64_t v72;
  char *v73;
  uint64_t v74;
  unint64_t v75;
  void (*v76)(char *, uint64_t);
  char *v77;
  void (*v78)(char *, uint64_t, uint64_t);
  unsigned int v79;
  uint64_t v80;
  uint64_t v81;

  v74 = a1;
  sub_10001B790(0, &qword_1000EC808, (uint64_t (*)(void))sub_10001AEF4, (uint64_t)&type metadata for OpenSearchIntent, (uint64_t (*)(uint64_t, uint64_t, uint64_t))&type metadata accessor for _AssistantIntent.Phrase);
  v81 = v1;
  v70 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  v77 = (char *)&v66 - v2;
  v80 = type metadata accessor for _AssistantIntent.PhraseToken(0);
  v3 = *(_QWORD *)(v80 - 8);
  __chkstk_darwin(v80);
  v5 = (char *)&v66 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001B790(0, &qword_1000EC810, (uint64_t (*)(void))sub_10001AEF4, (uint64_t)&type metadata for OpenSearchIntent, (uint64_t (*)(uint64_t, uint64_t, uint64_t))&type metadata accessor for _AssistantIntent.Phrase.StringInterpolation);
  v7 = v6;
  v8 = __chkstk_darwin(v6);
  v73 = (char *)&v66 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __chkstk_darwin(v8);
  v71 = (char *)&v66 - v11;
  v12 = __chkstk_darwin(v10);
  v14 = (char *)&v66 - v13;
  __chkstk_darwin(v12);
  v16 = (char *)&v66 - v15;
  v17 = sub_10001AEF4();
  _AssistantIntent.Phrase.StringInterpolation.init(literalCapacity:interpolationCount:)(11, 2, &type metadata for OpenSearchIntent, v17);
  v18._countAndFlagsBits = 0x20686372616553;
  v18._object = (void *)0xE700000000000000;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v18);
  KeyPath = swift_getKeyPath(&unk_1000B12B0);
  v75 = sub_10001B33C();
  v20 = _AssistantIntent.IntentProjection.subscript.getter(KeyPath, v75);
  swift_release(KeyPath);
  _AssistantIntent.Phrase.StringInterpolation.appendInterpolation(_:)(v20, v7);
  swift_release(v20);
  v21._countAndFlagsBits = 544106784;
  v21._object = (void *)0xE400000000000000;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v21);
  v22 = enum case for _AssistantIntent.PhraseToken.applicationName(_:);
  v23 = *(void (**)(char *, uint64_t, uint64_t))(v3 + 104);
  v79 = enum case for _AssistantIntent.PhraseToken.applicationName(_:);
  v24 = v80;
  v23(v5, enum case for _AssistantIntent.PhraseToken.applicationName(_:), v80);
  v25 = v23;
  v78 = v23;
  _AssistantIntent.Phrase.StringInterpolation.appendInterpolation(_:)(v5, v7);
  v26 = *(void (**)(char *, uint64_t))(v3 + 8);
  v27 = v5;
  v26(v5, v24);
  v28 = v26;
  v76 = v26;
  v29._countAndFlagsBits = 0;
  v29._object = (void *)0xE000000000000000;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v29);
  v30 = v77;
  _AssistantIntent.Phrase.init(stringInterpolation:)(v16, &type metadata for OpenSearchIntent, v17);
  v72 = static _AssistantIntent.PhraseBuilder.buildExpression(_:)(v30, &type metadata for OpenSearchIntent, v17);
  v68 = *(void (**)(char *, uint64_t))(v70 + 8);
  v68(v30, v81);
  _AssistantIntent.Phrase.StringInterpolation.init(literalCapacity:interpolationCount:)(12, 2, &type metadata for OpenSearchIntent, v17);
  v31._countAndFlagsBits = 0x20686372616553;
  v31._object = (void *)0xE700000000000000;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v31);
  v69 = v27;
  v32 = v80;
  v25(v27, v22, v80);
  _AssistantIntent.Phrase.StringInterpolation.appendInterpolation(_:)(v27, v7);
  v28(v27, v32);
  v33._countAndFlagsBits = 0x20726F6620;
  v33._object = (void *)0xE500000000000000;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v33);
  v34 = swift_getKeyPath(&unk_1000B12B0);
  v35 = v75;
  v36 = _AssistantIntent.IntentProjection.subscript.getter(v34, v75);
  swift_release(v34);
  _AssistantIntent.Phrase.StringInterpolation.appendInterpolation(_:)(v36, v7);
  swift_release(v36);
  v37._countAndFlagsBits = 0;
  v37._object = (void *)0xE000000000000000;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v37);
  v38 = v77;
  _AssistantIntent.Phrase.init(stringInterpolation:)(v14, &type metadata for OpenSearchIntent, v17);
  v39 = v17;
  v67 = v17;
  v70 = static _AssistantIntent.PhraseBuilder.buildExpression(_:)(v38, &type metadata for OpenSearchIntent, v17);
  v40 = v38;
  v41 = v38;
  v42 = v81;
  v43 = v68;
  v68(v40, v81);
  v44 = v71;
  _AssistantIntent.Phrase.StringInterpolation.init(literalCapacity:interpolationCount:)(9, 2, &type metadata for OpenSearchIntent, v39);
  v45._countAndFlagsBits = 0x20646E6946;
  v45._object = (void *)0xE500000000000000;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v45);
  v46 = swift_getKeyPath(&unk_1000B12B0);
  v47 = _AssistantIntent.IntentProjection.subscript.getter(v46, v35);
  swift_release(v46);
  _AssistantIntent.Phrase.StringInterpolation.appendInterpolation(_:)(v47, v7);
  swift_release(v47);
  v48._countAndFlagsBits = 544106784;
  v48._object = (void *)0xE400000000000000;
  v49 = v44;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v48);
  v50 = v69;
  v51 = v80;
  v78(v69, v79, v80);
  _AssistantIntent.Phrase.StringInterpolation.appendInterpolation(_:)(v50, v7);
  v76(v50, v51);
  v52._countAndFlagsBits = 0;
  v52._object = (void *)0xE000000000000000;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v52);
  v53 = v67;
  _AssistantIntent.Phrase.init(stringInterpolation:)(v49, &type metadata for OpenSearchIntent, v67);
  v71 = (char *)static _AssistantIntent.PhraseBuilder.buildExpression(_:)(v41, &type metadata for OpenSearchIntent, v53);
  v43(v41, v42);
  v54 = v73;
  _AssistantIntent.Phrase.StringInterpolation.init(literalCapacity:interpolationCount:)(13, 2, &type metadata for OpenSearchIntent, v53);
  v55._countAndFlagsBits = 0x726F66206B6F6F4CLL;
  v55._object = (void *)0xE900000000000020;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v55);
  v56 = swift_getKeyPath(&unk_1000B12B0);
  v57 = _AssistantIntent.IntentProjection.subscript.getter(v56, v75);
  swift_release(v56);
  _AssistantIntent.Phrase.StringInterpolation.appendInterpolation(_:)(v57, v7);
  swift_release(v57);
  v58._countAndFlagsBits = 544106784;
  v58._object = (void *)0xE400000000000000;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v58);
  v78(v50, v79, v51);
  _AssistantIntent.Phrase.StringInterpolation.appendInterpolation(_:)(v50, v7);
  v76(v50, v51);
  v59._countAndFlagsBits = 0;
  v59._object = (void *)0xE000000000000000;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v59);
  _AssistantIntent.Phrase.init(stringInterpolation:)(v54, &type metadata for OpenSearchIntent, v53);
  v60 = static _AssistantIntent.PhraseBuilder.buildExpression(_:)(v41, &type metadata for OpenSearchIntent, v53);
  v43(v41, v81);
  sub_10001B384(0);
  v62 = swift_allocObject(v61, 64, 7);
  *(_OWORD *)(v62 + 16) = xmmword_1000B1200;
  v63 = v70;
  *(_QWORD *)(v62 + 32) = v72;
  *(_QWORD *)(v62 + 40) = v63;
  *(_QWORD *)(v62 + 48) = v71;
  *(_QWORD *)(v62 + 56) = v60;
  v64 = static _AssistantIntent.PhraseBuilder.buildBlock(_:)();
  swift_bridgeObjectRelease(v62);
  return v64;
}

uint64_t sub_100019A30(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  void (*v9)(char *, uint64_t, uint64_t);
  uint64_t v11;

  v2 = type metadata accessor for StringSearchCriteria(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = __chkstk_darwin(v2);
  v6 = (char *)&v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v8 = (char *)&v11 - v7;
  v9 = *(void (**)(char *, uint64_t, uint64_t))(v3 + 16);
  v9((char *)&v11 - v7, a1, v2);
  v9(v6, (uint64_t)v8, v2);
  IntentParameter.wrappedValue.setter(v6);
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v8, v2);
}

uint64_t sub_100019B00(uint64_t a1)
{
  return sub_100018208(a1, (uint64_t)&unk_1000B12B0, (uint64_t (*)(void))sub_10001B33C, (uint64_t (*)(uint64_t))sub_10001AEF4, (uint64_t)sub_100019B24);
}

uint64_t sub_100019B24()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v0 = static _AssistantIntent.StringValueBuilder.buildExpression(_:)(0xD000000000000011, 0x80000001000B8300);
  v1 = static _AssistantIntent.StringValueBuilder.buildExpression(_:)(0x6C61746970736F48, 0xE800000000000000);
  v2 = static _AssistantIntent.StringValueBuilder.buildExpression(_:)(0x3931206469766F43, 0xE800000000000000);
  v3 = static _AssistantIntent.StringValueBuilder.buildExpression(_:)(0x7370657453, 0xE500000000000000);
  v4 = static _AssistantIntent.StringValueBuilder.buildExpression(_:)(0x656E6963636156, 0xE700000000000000);
  v5 = static _AssistantIntent.StringValueBuilder.buildExpression(_:)(0x7564616275726373, 0xEC00000062756462);
  sub_1000076D8(0, &qword_1000EC7A0, (uint64_t (*)(uint64_t))sub_10001B104, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for _ContiguousArrayStorage);
  v7 = swift_allocObject(v6, 80, 7);
  *(_OWORD *)(v7 + 16) = xmmword_1000B11E0;
  *(_QWORD *)(v7 + 32) = v0;
  *(_QWORD *)(v7 + 40) = v1;
  *(_QWORD *)(v7 + 48) = v2;
  *(_QWORD *)(v7 + 56) = v3;
  *(_QWORD *)(v7 + 64) = v4;
  *(_QWORD *)(v7 + 72) = v5;
  v8 = static _AssistantIntent.StringValueBuilder.buildBlock(_:)();
  swift_bridgeObjectRelease(v7);
  return v8;
}

uint64_t sub_100019C60(uint64_t a1)
{
  return sub_100019CAC(a1, &qword_1000EC7E8, (uint64_t (*)(void))sub_10001AF38, (uint64_t)&type metadata for OpenSleepScheduleIntent, (uint64_t (*)(_QWORD))sub_10001B2A4);
}

uint64_t sub_100019C88(uint64_t a1)
{
  return sub_100019CAC(a1, &qword_1000EC7D0, (uint64_t (*)(void))sub_10001AF94, (uint64_t)&type metadata for OpenSleepScheduleIntentV2, (uint64_t (*)(_QWORD))sub_10001B230);
}

uint64_t sub_100019CAC(uint64_t a1, unint64_t *a2, uint64_t (*a3)(void), uint64_t a4, uint64_t (*a5)(_QWORD))
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  void (*v14)(char *, uint64_t);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t (*v28)(_QWORD);

  v28 = a5;
  sub_10001B790(0, a2, a3, a4, (uint64_t (*)(uint64_t, uint64_t, uint64_t))&type metadata accessor for _AssistantIntent.Phrase);
  v8 = v7;
  v9 = *(_QWORD *)(v7 - 8);
  v10 = __chkstk_darwin(v7);
  v12 = (char *)&v25 - v11;
  v13 = ((uint64_t (*)(uint64_t))a3)(v10);
  _AssistantIntent.Phrase.init(stringLiteral:)(0xD000000000000017, 0x80000001000B8200, a4, v13);
  v27 = static _AssistantIntent.PhraseBuilder.buildExpression(_:)(v12, a4, v13);
  v14 = *(void (**)(char *, uint64_t))(v9 + 8);
  v14(v12, v8);
  _AssistantIntent.Phrase.init(stringLiteral:)(0xD00000000000001ALL, 0x80000001000B8220, a4, v13);
  v26 = static _AssistantIntent.PhraseBuilder.buildExpression(_:)(v12, a4, v13);
  v14(v12, v8);
  _AssistantIntent.Phrase.init(stringLiteral:)(0xD00000000000001ELL, 0x80000001000B8240, a4, v13);
  v15 = static _AssistantIntent.PhraseBuilder.buildExpression(_:)(v12, a4, v13);
  v14(v12, v8);
  _AssistantIntent.Phrase.init(stringLiteral:)(0xD00000000000001BLL, 0x80000001000B8260, a4, v13);
  v16 = static _AssistantIntent.PhraseBuilder.buildExpression(_:)(v12, a4, v13);
  v14(v12, v8);
  _AssistantIntent.Phrase.init(stringLiteral:)(0xD000000000000013, 0x80000001000B8280, a4, v13);
  v17 = static _AssistantIntent.PhraseBuilder.buildExpression(_:)(v12, a4, v13);
  v14(v12, v8);
  _AssistantIntent.Phrase.init(stringLiteral:)(0xD000000000000023, 0x80000001000B82A0, a4, v13);
  v18 = static _AssistantIntent.PhraseBuilder.buildExpression(_:)(v12, a4, v13);
  v14(v12, v8);
  _AssistantIntent.Phrase.init(stringLiteral:)(0xD000000000000020, 0x80000001000B82D0, a4, v13);
  v19 = static _AssistantIntent.PhraseBuilder.buildExpression(_:)(v12, a4, v13);
  v14(v12, v8);
  v20 = v28(0);
  v21 = swift_allocObject(v20, 88, 7);
  *(_OWORD *)(v21 + 16) = xmmword_1000B11C0;
  v22 = v26;
  *(_QWORD *)(v21 + 32) = v27;
  *(_QWORD *)(v21 + 40) = v22;
  *(_QWORD *)(v21 + 48) = v15;
  *(_QWORD *)(v21 + 56) = v16;
  *(_QWORD *)(v21 + 64) = v17;
  *(_QWORD *)(v21 + 72) = v18;
  *(_QWORD *)(v21 + 80) = v19;
  v23 = static _AssistantIntent.PhraseBuilder.buildBlock(_:)();
  swift_bridgeObjectRelease(v21);
  return v23;
}

uint64_t sub_100019F84(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  unint64_t v19;
  Swift::String v20;
  uint64_t KeyPath;
  uint64_t v22;
  Swift::String v23;
  uint64_t v24;
  uint64_t v25;
  Swift::String v26;
  uint64_t v27;
  Swift::String v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  Swift::String v32;
  char *v33;
  Swift::String v34;
  uint64_t v35;
  uint64_t v36;
  Swift::String v37;
  void (*v38)(char *, uint64_t);
  char *v39;
  Swift::String v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  Swift::String v44;
  uint64_t v45;
  char *v46;
  Swift::String v47;
  uint64_t v48;
  uint64_t v49;
  Swift::String v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  char *v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;

  v64 = a1;
  sub_10001B790(0, &qword_1000EC7B0, (uint64_t (*)(void))sub_10001AFD8, (uint64_t)&type metadata for OpenRecordsIntent, (uint64_t (*)(uint64_t, uint64_t, uint64_t))&type metadata accessor for _AssistantIntent.Phrase);
  v66 = *(_QWORD *)(v1 - 8);
  v67 = v1;
  __chkstk_darwin(v1);
  v3 = (char *)&v58 - v2;
  v62 = type metadata accessor for _AssistantIntent.PhraseToken(0);
  v60 = *(_QWORD *)(v62 - 8);
  __chkstk_darwin(v62);
  v5 = (char *)&v58 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001B790(0, &qword_1000EC7B8, (uint64_t (*)(void))sub_10001AFD8, (uint64_t)&type metadata for OpenRecordsIntent, (uint64_t (*)(uint64_t, uint64_t, uint64_t))&type metadata accessor for _AssistantIntent.Phrase.StringInterpolation);
  v7 = v6;
  v8 = __chkstk_darwin(v6);
  v63 = (char *)&v58 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __chkstk_darwin(v8);
  v61 = (char *)&v58 - v11;
  v12 = __chkstk_darwin(v10);
  v59 = (char *)&v58 - v13;
  v14 = __chkstk_darwin(v12);
  v16 = (char *)&v58 - v15;
  __chkstk_darwin(v14);
  v18 = (char *)&v58 - v17;
  v19 = sub_10001AFD8();
  _AssistantIntent.Phrase.StringInterpolation.init(literalCapacity:interpolationCount:)(21, 2, &type metadata for OpenRecordsIntent, v19);
  v20._countAndFlagsBits = 0x656874206E65704FLL;
  v20._object = (void *)0xE900000000000020;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v20);
  KeyPath = swift_getKeyPath(&unk_1000B1288);
  v65 = sub_10001B0A4();
  v22 = _AssistantIntent.IntentProjection.subscript.getter(KeyPath, v65);
  swift_release(KeyPath);
  _AssistantIntent.Phrase.StringInterpolation.appendInterpolation(_:)(v22, v7);
  swift_release(v22);
  v23._countAndFlagsBits = 0x7364726F63657220;
  v23._object = (void *)0xEC000000206E6920;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v23);
  v24 = v60;
  v25 = v62;
  (*(void (**)(char *, _QWORD, uint64_t))(v60 + 104))(v5, enum case for _AssistantIntent.PhraseToken.applicationName(_:), v62);
  _AssistantIntent.Phrase.StringInterpolation.appendInterpolation(_:)(v5, v7);
  (*(void (**)(char *, uint64_t))(v24 + 8))(v5, v25);
  v26._countAndFlagsBits = 0;
  v26._object = (void *)0xE000000000000000;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v26);
  _AssistantIntent.Phrase.init(stringInterpolation:)(v18, &type metadata for OpenRecordsIntent, v19);
  v62 = static _AssistantIntent.PhraseBuilder.buildExpression(_:)(v3, &type metadata for OpenRecordsIntent, v19);
  v27 = v67;
  v66 = *(_QWORD *)(v66 + 8);
  ((void (*)(char *, uint64_t))v66)(v3, v67);
  _AssistantIntent.Phrase.StringInterpolation.init(literalCapacity:interpolationCount:)(42, 1, &type metadata for OpenRecordsIntent, v19);
  v28._countAndFlagsBits = 0xD000000000000022;
  v28._object = (void *)0x80000001000B81B0;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v28);
  v29 = swift_getKeyPath(&unk_1000B1288);
  v30 = v65;
  v31 = _AssistantIntent.IntentProjection.subscript.getter(v29, v65);
  swift_release(v29);
  _AssistantIntent.Phrase.StringInterpolation.appendInterpolation(_:)(v31, v7);
  swift_release(v31);
  v32._countAndFlagsBits = 0x7364726F63657220;
  v32._object = (void *)0xE800000000000000;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v32);
  _AssistantIntent.Phrase.init(stringInterpolation:)(v16, &type metadata for OpenRecordsIntent, v19);
  v60 = static _AssistantIntent.PhraseBuilder.buildExpression(_:)(v3, &type metadata for OpenRecordsIntent, v19);
  ((void (*)(char *, uint64_t))v66)(v3, v27);
  v33 = v59;
  _AssistantIntent.Phrase.StringInterpolation.init(literalCapacity:interpolationCount:)(22, 1, &type metadata for OpenRecordsIntent, v19);
  v34._countAndFlagsBits = 0x20656D20656B6154;
  v34._object = (void *)0xEE0020796D206F74;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v34);
  v35 = swift_getKeyPath(&unk_1000B1288);
  v36 = _AssistantIntent.IntentProjection.subscript.getter(v35, v30);
  swift_release(v35);
  _AssistantIntent.Phrase.StringInterpolation.appendInterpolation(_:)(v36, v7);
  swift_release(v36);
  v37._countAndFlagsBits = 0x7364726F63657220;
  v37._object = (void *)0xE800000000000000;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v37);
  _AssistantIntent.Phrase.init(stringInterpolation:)(v33, &type metadata for OpenRecordsIntent, v19);
  v59 = (char *)static _AssistantIntent.PhraseBuilder.buildExpression(_:)(v3, &type metadata for OpenRecordsIntent, v19);
  v38 = (void (*)(char *, uint64_t))v66;
  ((void (*)(char *, uint64_t))v66)(v3, v27);
  v39 = v61;
  _AssistantIntent.Phrase.StringInterpolation.init(literalCapacity:interpolationCount:)(25, 1, &type metadata for OpenRecordsIntent, v19);
  v40._object = (void *)0x80000001000B81E0;
  v40._countAndFlagsBits = 0xD000000000000011;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v40);
  v41 = swift_getKeyPath(&unk_1000B1288);
  v42 = v65;
  v43 = _AssistantIntent.IntentProjection.subscript.getter(v41, v65);
  swift_release(v41);
  _AssistantIntent.Phrase.StringInterpolation.appendInterpolation(_:)(v43, v7);
  swift_release(v43);
  v44._countAndFlagsBits = 0x7364726F63657220;
  v44._object = (void *)0xE800000000000000;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v44);
  _AssistantIntent.Phrase.init(stringInterpolation:)(v39, &type metadata for OpenRecordsIntent, v19);
  v61 = (char *)static _AssistantIntent.PhraseBuilder.buildExpression(_:)(v3, &type metadata for OpenRecordsIntent, v19);
  v45 = v67;
  v38(v3, v67);
  v46 = v63;
  _AssistantIntent.Phrase.StringInterpolation.init(literalCapacity:interpolationCount:)(21, 1, &type metadata for OpenRecordsIntent, v19);
  v47._countAndFlagsBits = 0x7261206572656857;
  v47._object = (void *)0xED000020796D2065;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v47);
  v48 = swift_getKeyPath(&unk_1000B1288);
  v49 = _AssistantIntent.IntentProjection.subscript.getter(v48, v42);
  swift_release(v48);
  _AssistantIntent.Phrase.StringInterpolation.appendInterpolation(_:)(v49, v7);
  swift_release(v49);
  v50._countAndFlagsBits = 0x7364726F63657220;
  v50._object = (void *)0xE800000000000000;
  _AssistantIntent.Phrase.StringInterpolation.appendLiteral(_:)(v50);
  _AssistantIntent.Phrase.init(stringInterpolation:)(v46, &type metadata for OpenRecordsIntent, v19);
  v51 = static _AssistantIntent.PhraseBuilder.buildExpression(_:)(v3, &type metadata for OpenRecordsIntent, v19);
  v38(v3, v45);
  sub_10001B158(0);
  v53 = swift_allocObject(v52, 72, 7);
  *(_OWORD *)(v53 + 16) = xmmword_1000B11D0;
  v54 = v60;
  *(_QWORD *)(v53 + 32) = v62;
  *(_QWORD *)(v53 + 40) = v54;
  v55 = v61;
  *(_QWORD *)(v53 + 48) = v59;
  *(_QWORD *)(v53 + 56) = v55;
  *(_QWORD *)(v53 + 64) = v51;
  v56 = static _AssistantIntent.PhraseBuilder.buildBlock(_:)();
  swift_bridgeObjectRelease(v53);
  return v56;
}

uint64_t sub_10001A664(uint64_t a1)
{
  return sub_100018208(a1, (uint64_t)&unk_1000B1288, (uint64_t (*)(void))sub_10001B0A4, (uint64_t (*)(uint64_t))sub_10001AFD8, (uint64_t)sub_10001A688);
}

uint64_t sub_10001A688()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;

  v13 = static _AssistantIntent.StringValueBuilder.buildExpression(_:)(0xD000000000000012, 0x80000001000B8190);
  v0 = static _AssistantIntent.StringValueBuilder.buildExpression(_:)(0x757365522062614CLL, 0xEB0000000073746CLL);
  v1 = static _AssistantIntent.StringValueBuilder.buildExpression(_:)(0x6C6163696E696C43, 0xEF736C6174695620);
  v2 = static _AssistantIntent.StringValueBuilder.buildExpression(_:)(0x72756465636F7250, 0xEA00000000007365);
  v3 = static _AssistantIntent.StringValueBuilder.buildExpression(_:)(0x6F697469646E6F43, 0xEA0000000000736ELL);
  v4 = static _AssistantIntent.StringValueBuilder.buildExpression(_:)(0x65696772656C6C41, 0xE900000000000073);
  v5 = static _AssistantIntent.StringValueBuilder.buildExpression(_:)(0x617A696E756D6D49, 0xED0000736E6F6974);
  v6 = static _AssistantIntent.StringValueBuilder.buildExpression(_:)(0x6261646165726E55, 0xEF6174614420656CLL);
  v7 = static _AssistantIntent.StringValueBuilder.buildExpression(_:)(0x6C6163696E696C43, 0xEE007365746F4E20);
  v8 = static _AssistantIntent.StringValueBuilder.buildExpression(_:)(0x6F636552206C6C41, 0xEB00000000736472);
  sub_1000076D8(0, &qword_1000EC7A0, (uint64_t (*)(uint64_t))sub_10001B104, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for _ContiguousArrayStorage);
  v10 = swift_allocObject(v9, 112, 7);
  *(_OWORD *)(v10 + 16) = xmmword_1000B1210;
  *(_QWORD *)(v10 + 32) = v13;
  *(_QWORD *)(v10 + 40) = v0;
  *(_QWORD *)(v10 + 48) = v1;
  *(_QWORD *)(v10 + 56) = v2;
  *(_QWORD *)(v10 + 64) = v3;
  *(_QWORD *)(v10 + 72) = v4;
  *(_QWORD *)(v10 + 80) = v5;
  *(_QWORD *)(v10 + 88) = v6;
  *(_QWORD *)(v10 + 96) = v7;
  *(_QWORD *)(v10 + 104) = v8;
  v11 = static _AssistantIntent.StringValueBuilder.buildBlock(_:)();
  swift_bridgeObjectRelease(v10);
  return v11;
}

void sub_10001A8A0()
{
  qword_1000F0D80 = (uint64_t)&_swiftEmptyArrayStorage;
}

uint64_t sub_10001A8BC()
{
  if (qword_1000EBFE8 != -1)
    swift_once(&qword_1000EBFE8, sub_10001A8A0);
  return swift_bridgeObjectRetain(qword_1000F0D80);
}

ValueMetadata *type metadata accessor for HealthIntentPhrases()
{
  return &type metadata for HealthIntentPhrases;
}

id sub_10001A90C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  char *v6;
  unint64_t v7;
  void (*v8)(char *, uint64_t);
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  id v18;
  unint64_t v19;
  uint64_t v20;
  id result;
  id v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  __int128 v33;
  uint64_t v34;
  _UNKNOWN **v35;
  _QWORD v36[5];

  v0 = type metadata accessor for _AssistantIntent(0);
  v1 = *(_QWORD *)(v0 - 8);
  v2 = __chkstk_darwin(v0);
  v4 = (char *)&v31 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v2);
  v6 = (char *)&v31 - v5;
  v36[0] = sub_10005B0E0();
  v7 = sub_10001ADA0();
  _AssistantIntent.init<A>(_:phrases:parameterValues:)(v36, sub_1000168E4, 0, &j_j___s10AppIntents16_AssistantIntentV21ParameterValueBuilderO10buildBlockSayAC0F0VGyFZ, 0, &type metadata for CategoryIntent, v7);
  v32 = static _AssistantIntent.Builder.buildExpression(_:)(v6);
  v8 = *(void (**)(char *, uint64_t))(v1 + 8);
  v8(v6, v0);
  v36[0] = sub_100058240();
  v9 = sub_10001ADE4();
  _AssistantIntent.init<A>(_:phrases:parameterValues:)(v36, sub_1000171F0, 0, sub_1000178CC, 0, &type metadata for OpenCategoryIntent, v9);
  v31 = static _AssistantIntent.Builder.buildExpression(_:)(v6);
  v8(v6, v0);
  v36[0] = sub_1000535FC();
  v10 = sub_10001AE28();
  _AssistantIntent.init<A>(_:phrases:parameterValues:)(v36, sub_100017A34, 0, sub_1000181E4, 0, &type metadata for OpenDataTypeIntent, v10);
  v11 = static _AssistantIntent.Builder.buildExpression(_:)(v6);
  v8(v6, v0);
  v36[0] = sub_100089054();
  v12 = sub_10001AE6C();
  _AssistantIntent.init<A>(_:phrases:parameterValues:)(v36, sub_100018480, 0, &j_j___s10AppIntents16_AssistantIntentV21ParameterValueBuilderO10buildBlockSayAC0F0VGyFZ, 0, &type metadata for OpenTabIntent, v12);
  v13 = static _AssistantIntent.Builder.buildExpression(_:)(v6);
  v8(v6, v0);
  v36[0] = sub_10008C2A0();
  v14 = sub_10001AEB0();
  _AssistantIntent.init<A>(_:phrases:parameterValues:)(v36, sub_100018C18, 0, &j_j___s10AppIntents16_AssistantIntentV21ParameterValueBuilderO10buildBlockSayAC0F0VGyFZ, 0, &type metadata for OpenViewIntent, v14);
  v15 = static _AssistantIntent.Builder.buildExpression(_:)(v6);
  v8(v6, v0);
  v36[0] = sub_10006E15C();
  v16 = sub_10001AEF4();
  _AssistantIntent.init<A>(_:phrases:parameterValues:)(v36, sub_10001939C, 0, sub_100019B00, 0, &type metadata for OpenSearchIntent, v16);
  v17 = static _AssistantIntent.Builder.buildExpression(_:)(v6);
  v8(v6, v0);
  v18 = objc_msgSend((id)objc_opt_self(UIApplication), "sharedApplication");
  v36[3] = sub_100006D10(0, (unint64_t *)&qword_1000EC750, UIApplication_ptr);
  v36[4] = &off_1000DCD78;
  v36[0] = v18;
  v19 = sub_10001AF38();
  _AssistantIntent.init<A>(_:phrases:parameterValues:)(v36, sub_100019C60, 0, &j___s10AppIntents16_AssistantIntentV21ParameterValueBuilderO10buildBlockSayAC0F0VGyFZ, 0, &type metadata for OpenSleepScheduleIntent, v19);
  v20 = static _AssistantIntent.Builder.buildExpression(_:)(v6);
  v8(v6, v0);
  result = objc_msgSend((id)objc_opt_self(LSApplicationWorkspace), "defaultWorkspace");
  if (result)
  {
    v22 = result;
    v34 = sub_100006D10(0, (unint64_t *)&qword_1000EC760, LSApplicationWorkspace_ptr);
    v35 = &off_1000DD858;
    *(_QWORD *)&v33 = v22;
    sub_10001AF7C(&v33, (uint64_t)v36);
    v23 = sub_10001AF94();
    _AssistantIntent.init<A>(_:phrases:parameterValues:)(v36, sub_100019C88, 0, &j_j___s10AppIntents16_AssistantIntentV21ParameterValueBuilderO10buildBlockSayAC0F0VGyFZ, 0, &type metadata for OpenSleepScheduleIntentV2, v23);
    v24 = static _AssistantIntent.Builder.buildExpression(_:)(v4);
    v8(v4, v0);
    v36[0] = sub_1000A38EC();
    v25 = sub_10001AFD8();
    _AssistantIntent.init<A>(_:phrases:parameterValues:)(v36, sub_100019F84, 0, sub_10001A664, 0, &type metadata for OpenRecordsIntent, v25);
    v26 = static _AssistantIntent.Builder.buildExpression(_:)(v6);
    v8(v6, v0);
    sub_1000076D8(0, &qword_1000EC778, (uint64_t (*)(uint64_t))sub_10001B01C, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for _ContiguousArrayStorage);
    v28 = swift_allocObject(v27, 104, 7);
    *(_OWORD *)(v28 + 16) = xmmword_1000B1220;
    v29 = v31;
    *(_QWORD *)(v28 + 32) = v32;
    *(_QWORD *)(v28 + 40) = v29;
    *(_QWORD *)(v28 + 48) = v11;
    *(_QWORD *)(v28 + 56) = v13;
    *(_QWORD *)(v28 + 64) = v15;
    *(_QWORD *)(v28 + 72) = v17;
    *(_QWORD *)(v28 + 80) = v20;
    *(_QWORD *)(v28 + 88) = v24;
    *(_QWORD *)(v28 + 96) = v26;
    v30 = static _AssistantIntent.Builder.buildBlock(_:)();
    swift_bridgeObjectRelease(v28);
    return (id)v30;
  }
  else
  {
    __break(1u);
  }
  return result;
}

unint64_t sub_10001ADA0()
{
  unint64_t result;

  result = qword_1000EC720;
  if (!qword_1000EC720)
  {
    result = swift_getWitnessTable(&unk_1000B3E70, &type metadata for CategoryIntent);
    atomic_store(result, (unint64_t *)&qword_1000EC720);
  }
  return result;
}

unint64_t sub_10001ADE4()
{
  unint64_t result;

  result = qword_1000EC728;
  if (!qword_1000EC728)
  {
    result = swift_getWitnessTable(&unk_1000B3584, &type metadata for OpenCategoryIntent);
    atomic_store(result, (unint64_t *)&qword_1000EC728);
  }
  return result;
}

unint64_t sub_10001AE28()
{
  unint64_t result;

  result = qword_1000EC730;
  if (!qword_1000EC730)
  {
    result = swift_getWitnessTable(&unk_1000B2FE4, &type metadata for OpenDataTypeIntent);
    atomic_store(result, (unint64_t *)&qword_1000EC730);
  }
  return result;
}

unint64_t sub_10001AE6C()
{
  unint64_t result;

  result = qword_1000EC738;
  if (!qword_1000EC738)
  {
    result = swift_getWitnessTable(&unk_1000B5A6C, &type metadata for OpenTabIntent);
    atomic_store(result, (unint64_t *)&qword_1000EC738);
  }
  return result;
}

unint64_t sub_10001AEB0()
{
  unint64_t result;

  result = qword_1000EC740;
  if (!qword_1000EC740)
  {
    result = swift_getWitnessTable(&unk_1000B60AC, &type metadata for OpenViewIntent);
    atomic_store(result, (unint64_t *)&qword_1000EC740);
  }
  return result;
}

unint64_t sub_10001AEF4()
{
  unint64_t result;

  result = qword_1000EC748;
  if (!qword_1000EC748)
  {
    result = swift_getWitnessTable(&unk_1000B48EC, &type metadata for OpenSearchIntent);
    atomic_store(result, (unint64_t *)&qword_1000EC748);
  }
  return result;
}

unint64_t sub_10001AF38()
{
  unint64_t result;

  result = qword_1000EC758;
  if (!qword_1000EC758)
  {
    result = swift_getWitnessTable(&unk_1000B13CC, &type metadata for OpenSleepScheduleIntent);
    atomic_store(result, (unint64_t *)&qword_1000EC758);
  }
  return result;
}

uint64_t sub_10001AF7C(__int128 *a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;

  v2 = *a1;
  v3 = a1[1];
  *(_QWORD *)(a2 + 32) = *((_QWORD *)a1 + 4);
  *(_OWORD *)a2 = v2;
  *(_OWORD *)(a2 + 16) = v3;
  return a2;
}

unint64_t sub_10001AF94()
{
  unint64_t result;

  result = qword_1000EC768;
  if (!qword_1000EC768)
  {
    result = swift_getWitnessTable(&unk_1000B20B8, &type metadata for OpenSleepScheduleIntentV2);
    atomic_store(result, (unint64_t *)&qword_1000EC768);
  }
  return result;
}

unint64_t sub_10001AFD8()
{
  unint64_t result;

  result = qword_1000EC770;
  if (!qword_1000EC770)
  {
    result = swift_getWitnessTable(&unk_1000B6740, &type metadata for OpenRecordsIntent);
    atomic_store(result, (unint64_t *)&qword_1000EC770);
  }
  return result;
}

void sub_10001B01C(uint64_t a1)
{
  sub_1000076D8(a1, &qword_1000EC780, (uint64_t (*)(uint64_t))&type metadata accessor for _AssistantIntent, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Array);
}

_QWORD *sub_10001B038@<X0>(_BYTE *a1@<X8>)
{
  _QWORD *result;
  uint64_t v3;

  result = IntentParameter.wrappedValue.getter(&v3);
  *a1 = v3;
  return result;
}

uint64_t sub_10001B070(char *a1)
{
  char v2;

  v2 = *a1;
  return IntentParameter.wrappedValue.setter(&v2);
}

unint64_t sub_10001B0A4()
{
  unint64_t result;

  result = qword_1000EC788;
  if (!qword_1000EC788)
  {
    result = swift_getWitnessTable(&unk_1000B6AE8, &type metadata for RecordTypeEntity);
    atomic_store(result, (unint64_t *)&qword_1000EC788);
  }
  return result;
}

void sub_10001B0E8(uint64_t a1)
{
  sub_1000076D8(a1, &qword_1000EC798, (uint64_t (*)(uint64_t))&type metadata accessor for _AssistantIntent.Value, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Array);
}

void sub_10001B104()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1000EC7A8)
  {
    v0 = type metadata accessor for Array(0, &type metadata for String);
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1000EC7A8);
  }
}

void sub_10001B158(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_1000EC7C0)
  {
    sub_10001B1CC(255, &qword_1000EC7C8, &qword_1000EC7B0, (uint64_t (*)(void))sub_10001AFD8, (uint64_t)&type metadata for OpenRecordsIntent);
    v3 = type metadata accessor for _ContiguousArrayStorage(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_1000EC7C0);
  }
}

void sub_10001B1CC(uint64_t a1, unint64_t *a2, unint64_t *a3, uint64_t (*a4)(void), uint64_t a5)
{
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;

  if (!*a2)
  {
    sub_10001B790(255, a3, a4, a5, (uint64_t (*)(uint64_t, uint64_t, uint64_t))&type metadata accessor for _AssistantIntent.Phrase);
    v8 = type metadata accessor for Array(a1, v7);
    if (!v9)
      atomic_store(v8, a2);
  }
}

void sub_10001B230(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_1000EC7D8)
  {
    sub_10001B1CC(255, &qword_1000EC7E0, &qword_1000EC7D0, (uint64_t (*)(void))sub_10001AF94, (uint64_t)&type metadata for OpenSleepScheduleIntentV2);
    v3 = type metadata accessor for _ContiguousArrayStorage(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_1000EC7D8);
  }
}

void sub_10001B2A4(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_1000EC7F0)
  {
    sub_10001B1CC(255, &qword_1000EC7F8, &qword_1000EC7E8, (uint64_t (*)(void))sub_10001AF38, (uint64_t)&type metadata for OpenSleepScheduleIntent);
    v3 = type metadata accessor for _ContiguousArrayStorage(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_1000EC7F0);
  }
}

_QWORD *sub_10001B318@<X0>(_QWORD *a1@<X8>)
{
  return IntentParameter.wrappedValue.getter(a1);
}

unint64_t sub_10001B33C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000EC800;
  if (!qword_1000EC800)
  {
    v1 = type metadata accessor for StringSearchCriteria(255);
    result = swift_getWitnessTable(&protocol conformance descriptor for StringSearchCriteria, v1);
    atomic_store(result, (unint64_t *)&qword_1000EC800);
  }
  return result;
}

void sub_10001B384(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_1000EC818)
  {
    sub_10001B1CC(255, &qword_1000EC820, &qword_1000EC808, (uint64_t (*)(void))sub_10001AEF4, (uint64_t)&type metadata for OpenSearchIntent);
    v3 = type metadata accessor for _ContiguousArrayStorage(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_1000EC818);
  }
}

unint64_t sub_10001B3FC()
{
  unint64_t result;

  result = qword_1000EC838;
  if (!qword_1000EC838)
  {
    result = swift_getWitnessTable(&unk_1000B5F0C, &type metadata for OpenViewIntent.Screen);
    atomic_store(result, (unint64_t *)&qword_1000EC838);
  }
  return result;
}

void sub_10001B440(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_1000EC840)
  {
    sub_10001B1CC(255, &qword_1000EC848, &qword_1000EC828, (uint64_t (*)(void))sub_10001AEB0, (uint64_t)&type metadata for OpenViewIntent);
    v3 = type metadata accessor for _ContiguousArrayStorage(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_1000EC840);
  }
}

_QWORD *sub_10001B4B4@<X0>(_BYTE *a1@<X8>)
{
  _QWORD *result;
  uint64_t v3;

  result = IntentParameter.wrappedValue.getter(&v3);
  *a1 = v3;
  return result;
}

unint64_t sub_10001B4F0()
{
  unint64_t result;

  result = qword_1000EC860;
  if (!qword_1000EC860)
  {
    result = swift_getWitnessTable(&unk_1000B58CC, &type metadata for OpenTabIntent.Tab);
    atomic_store(result, (unint64_t *)&qword_1000EC860);
  }
  return result;
}

void sub_10001B534(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_1000EC868)
  {
    sub_10001B1CC(255, &qword_1000EC870, &qword_1000EC850, (uint64_t (*)(void))sub_10001AE6C, (uint64_t)&type metadata for OpenTabIntent);
    v3 = type metadata accessor for _ContiguousArrayStorage(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_1000EC868);
  }
}

_QWORD *sub_10001B5A8@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *result;
  uint64_t v3;

  result = IntentParameter.wrappedValue.getter(&v3);
  *a1 = v3;
  return result;
}

unint64_t sub_10001B5E4()
{
  unint64_t result;

  result = qword_1000EC878;
  if (!qword_1000EC878)
  {
    result = swift_getWitnessTable(&unk_1000B332C, &type metadata for HealthDataTypeEntity);
    atomic_store(result, (unint64_t *)&qword_1000EC878);
  }
  return result;
}

void sub_10001B628(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_1000EC890)
  {
    sub_10001B1CC(255, &qword_1000EC898, &qword_1000EC880, (uint64_t (*)(void))sub_10001AE28, (uint64_t)&type metadata for OpenDataTypeIntent);
    v3 = type metadata accessor for _ContiguousArrayStorage(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_1000EC890);
  }
}

uint64_t sub_10001B6A0(id *a1)
{
  id v1;
  id v3;

  v3 = *a1;
  v1 = v3;
  return IntentParameter.wrappedValue.setter(&v3);
}

unint64_t sub_10001B6D8()
{
  unint64_t result;

  result = qword_1000EC8A0;
  if (!qword_1000EC8A0)
  {
    result = swift_getWitnessTable(&unk_1000B38CC, &type metadata for HealthCategoryEntity);
    atomic_store(result, (unint64_t *)&qword_1000EC8A0);
  }
  return result;
}

void sub_10001B71C(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_1000EC8B8)
  {
    sub_10001B1CC(255, &qword_1000EC8C0, &qword_1000EC8A8, (uint64_t (*)(void))sub_10001ADE4, (uint64_t)&type metadata for OpenCategoryIntent);
    v3 = type metadata accessor for _ContiguousArrayStorage(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_1000EC8B8);
  }
}

void sub_10001B790(uint64_t a1, unint64_t *a2, uint64_t (*a3)(void), uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;

  if (!*a2)
  {
    v9 = a3();
    v10 = a5(a1, a4, v9);
    if (!v11)
      atomic_store(v10, a2);
  }
}

uint64_t sub_10001B7F0(char *a1)
{
  char v2;

  v2 = *a1;
  return IntentParameter.wrappedValue.setter(&v2);
}

unint64_t sub_10001B824()
{
  unint64_t result;

  result = qword_1000EC8D8;
  if (!qword_1000EC8D8)
  {
    result = swift_getWitnessTable(&unk_1000B3CC0, &type metadata for CategoryIntent.Category);
    atomic_store(result, (unint64_t *)&qword_1000EC8D8);
  }
  return result;
}

void sub_10001B868(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_1000EC8E0)
  {
    sub_10001B1CC(255, &qword_1000EC8E8, &qword_1000EC8C8, (uint64_t (*)(void))sub_10001ADA0, (uint64_t)&type metadata for CategoryIntent);
    v3 = type metadata accessor for _ContiguousArrayStorage(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_1000EC8E0);
  }
}

uint64_t sub_10001B8EC(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t (*v5)(uint64_t);

  v5 = (uint64_t (*)(uint64_t))((char *)&dword_1000EC950 + dword_1000EC950);
  v3 = (_QWORD *)swift_task_alloc(unk_1000EC954);
  *(_QWORD *)(v1 + 16) = v3;
  *v3 = v1;
  v3[1] = sub_10001B954;
  return v5(a1);
}

uint64_t sub_10001B954(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;

  v6 = *v1;
  v3 = *(_QWORD *)(v6 + 16);
  v4 = *v1;
  v6 = v4;
  swift_task_dealloc(v3);
  return (*(uint64_t (**)(uint64_t))(v4 + 8))(a1);
}

unint64_t sub_10001B9A8()
{
  unint64_t result;

  result = qword_1000EC8F8;
  if (!qword_1000EC8F8)
  {
    result = swift_getWitnessTable(&unk_1000B145C, &type metadata for OpenSleepScheduleIntent);
    atomic_store(result, (unint64_t *)&qword_1000EC8F8);
  }
  return result;
}

unint64_t sub_10001B9F0()
{
  unint64_t result;

  result = qword_1000EC900;
  if (!qword_1000EC900)
  {
    result = swift_getWitnessTable(&unk_1000B1484, &type metadata for OpenSleepScheduleIntent);
    atomic_store(result, (unint64_t *)&qword_1000EC900);
  }
  return result;
}

uint64_t sub_10001BA34(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_1000BFD68, 1);
}

uint64_t sub_10001BA44(uint64_t a1, uint64_t a2)
{
  _QWORD v3[2];

  v3[0] = a2;
  v3[1] = sub_10001AF38();
  return swift_getOpaqueTypeConformance2(v3, &opaque type descriptor for <<opaque return type of static AppIntent.parameterSummary>>, 1);
}

uint64_t sub_10001BA84(uint64_t a1)
{
  void *v1;
  _QWORD *v2;
  void *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  NSURL *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;

  v3 = v1;
  sub_10000E944(0, (unint64_t *)&unk_1000ECA90, (uint64_t (*)(uint64_t))&type metadata accessor for URL);
  v6 = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v5 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v2[15] = v6;
  sub_10001C8C4(a1, v6, (unint64_t *)&unk_1000ECA90, (uint64_t (*)(uint64_t))&type metadata accessor for URL);
  v7 = type metadata accessor for URL(0);
  v8 = *(_QWORD *)(v7 - 8);
  v10 = 0;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7) != 1)
  {
    URL._bridgeToObjectiveC()(v9);
    v10 = v11;
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v6, v7);
  }
  v12 = v2 + 2;
  v2[16] = v10;
  v2[7] = v2 + 17;
  v2[2] = v2;
  v2[3] = sub_10001BBD0;
  v13 = swift_continuation_init(v2 + 2, 0);
  v2[10] = _NSConcreteStackBlock;
  v14 = v2 + 10;
  v14[1] = 0x40000000;
  v14[2] = sub_10001BC28;
  v14[3] = &unk_1000DCE08;
  v14[4] = v13;
  objc_msgSend(v3, "openURL:withCompletionHandler:", v10, v14);
  return swift_continuation_await(v12);
}

uint64_t sub_10001BBD0()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  v1 = *(_QWORD *)(*v0 + 120);
  v4 = *v0;
  v2 = *(unsigned __int8 *)(*v0 + 136);

  swift_task_dealloc(v1);
  return (*(uint64_t (**)(uint64_t))(v4 + 8))(v2);
}

uint64_t sub_10001BC28(uint64_t a1, char a2)
{
  **(_BYTE **)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 64) + 40) = a2;
  return swift_continuation_resume();
}

uint64_t sub_10001BC3C()
{
  uint64_t v0;

  v0 = type metadata accessor for LocalizedStringResource(0);
  sub_10001C884(v0, qword_1000F0D88);
  sub_10001C86C(v0, (uint64_t)qword_1000F0D88);
  return LocalizedStringResource.init(stringLiteral:)(0xD000000000000021, 0x80000001000B8420);
}

uint64_t sub_10001BC9C()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  sub_10000E944(0, &qword_1000EC948, (uint64_t (*)(uint64_t))&type metadata accessor for LocalizedStringResource);
  __chkstk_darwin(v0);
  v2 = (char *)&v12 - v1;
  v3 = type metadata accessor for LocalizedStringResource(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v12 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000E944(0, &qword_1000EC940, (uint64_t (*)(uint64_t))&type metadata accessor for IntentDescription);
  v8 = v7;
  sub_10001C884(v7, qword_1000F0DA0);
  v9 = sub_10001C86C(v8, (uint64_t)qword_1000F0DA0);
  LocalizedStringResource.init(stringLiteral:)(0xD000000000000046, 0x80000001000B83D0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v4 + 56))(v2, 1, 1, v3);
  IntentDescription.init(_:categoryName:searchKeywords:)(v6, v2, _swiftEmptyArrayStorage);
  v10 = type metadata accessor for IntentDescription(0);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56))(v9, 0, 1, v10);
}

uint64_t sub_10001BDF0(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;

  v2[2] = a1;
  v2[3] = v1;
  sub_10000E944(0, (unint64_t *)&unk_1000ECA90, (uint64_t (*)(uint64_t))&type metadata accessor for URL);
  v4 = (*(_QWORD *)(*(_QWORD *)(v3 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[4] = swift_task_alloc(v4);
  v2[5] = swift_task_alloc(v4);
  v5 = type metadata accessor for URL(0);
  v2[6] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v2[7] = v6;
  v7 = (*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[8] = swift_task_alloc(v7);
  v2[9] = swift_task_alloc(v7);
  return swift_task_switch(sub_10001BEA0, 0, 0);
}

uint64_t sub_10001BEA0()
{
  uint64_t v0;
  id v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  void (*v8)(uint64_t, _QWORD, uint64_t, uint64_t);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  int *v16;
  _QWORD *v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  int *v24;

  v1 = (id)HKSPSleepURLWithOptions(HKSPSleepLaunchURLRouteManageSchedule, 2, HKSPProvenanceSourceShortcuts);
  if (v1)
  {
    v2 = v1;
    v4 = *(_QWORD *)(v0 + 56);
    v3 = *(_QWORD *)(v0 + 64);
    v6 = *(_QWORD *)(v0 + 40);
    v5 = *(_QWORD *)(v0 + 48);
    static URL._unconditionallyBridgeFromObjectiveC(_:)();

    v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 32);
    v7(v6, v3, v5);
    v8 = *(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v4 + 56);
    v8(v6, 0, 1, v5);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v4 + 48))(v6, 1, v5) != 1)
    {
      v9 = *(_QWORD *)(v0 + 72);
      v10 = *(_QWORD *)(v0 + 48);
      v11 = *(_QWORD *)(v0 + 56);
      v12 = *(_QWORD *)(v0 + 32);
      v13 = *(_QWORD **)(v0 + 24);
      v7(v9, *(_QWORD *)(v0 + 40), v10);
      v14 = v13[3];
      v15 = v13[4];
      sub_100012E04(v13, v14);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v11 + 16))(v12, v9, v10);
      v8(v12, 0, 1, v10);
      v16 = *(int **)(v15 + 8);
      v24 = (int *)((char *)v16 + *v16);
      v17 = (_QWORD *)swift_task_alloc(v16[1]);
      *(_QWORD *)(v0 + 80) = v17;
      *v17 = v0;
      v17[1] = sub_10001C0A4;
      return ((uint64_t (*)(_QWORD, uint64_t, uint64_t))v24)(*(_QWORD *)(v0 + 32), v14, v15);
    }
  }
  else
  {
    (*(void (**)(_QWORD, uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v0 + 56) + 56))(*(_QWORD *)(v0 + 40), 1, 1, *(_QWORD *)(v0 + 48));
  }
  v19 = *(_QWORD *)(v0 + 64);
  v20 = *(_QWORD *)(v0 + 72);
  v22 = *(_QWORD *)(v0 + 32);
  v21 = *(_QWORD *)(v0 + 40);
  sub_10001C7DC(v21);
  v23 = sub_10001C828();
  swift_allocError(&type metadata for OpenSleepError, v23, 0, 0);
  swift_willThrow();
  swift_task_dealloc(v20);
  swift_task_dealloc(v19);
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10001C0A4()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 32);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 80));
  sub_10001C7DC(v1);
  return swift_task_switch(sub_10001C104, 0, 0);
}

uint64_t sub_10001C104()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = *(_QWORD *)(v0 + 64);
  v2 = *(_QWORD *)(v0 + 72);
  v3 = *(_QWORD *)(v0 + 48);
  v4 = *(_QWORD *)(v0 + 56);
  v6 = *(_QWORD *)(v0 + 32);
  v5 = *(_QWORD *)(v0 + 40);
  static IntentResult.result<>()();
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v2, v3);
  swift_task_dealloc(v2);
  swift_task_dealloc(v1);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10001C184@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  if (qword_1000EBFF0 != -1)
    swift_once(&qword_1000EBFF0, sub_10001BC3C);
  v2 = type metadata accessor for LocalizedStringResource(0);
  v3 = sub_10001C86C(v2, (uint64_t)qword_1000F0D88);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 16))(a1, v3, v2);
}

uint64_t sub_10001C204@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  if (qword_1000EBFF8 != -1)
    swift_once(&qword_1000EBFF8, sub_10001BC9C);
  sub_10000E944(0, &qword_1000EC940, (uint64_t (*)(uint64_t))&type metadata accessor for IntentDescription);
  v3 = sub_10001C86C(v2, (uint64_t)qword_1000F0DA0);
  return sub_10001C8C4(v3, a1, &qword_1000EC940, (uint64_t (*)(uint64_t))&type metadata accessor for IntentDescription);
}

uint64_t sub_10001C28C(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;

  v3 = (_QWORD *)swift_task_alloc(dword_1000EC934);
  *(_QWORD *)(v1 + 16) = v3;
  *v3 = v1;
  v3[1] = sub_10001C2DC;
  return sub_10001BDF0(a1);
}

uint64_t sub_10001C2DC()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  swift_task_dealloc(*(_QWORD *)(*v0 + 16));
  return (*(uint64_t (**)(void))(v2 + 8))();
}

unint64_t sub_10001C324@<X0>(_QWORD *a1@<X8>)
{
  id v2;
  unint64_t result;

  v2 = objc_msgSend((id)objc_opt_self(UIApplication), "sharedApplication");
  result = sub_10001C7A0();
  a1[3] = result;
  a1[4] = &off_1000DCD78;
  *a1 = v2;
  return result;
}

uint64_t sub_10001C37C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10001AF38();
  return static AppIntent.persistentIdentifier.getter(a1, v2);
}

uint64_t initializeWithCopy for OpenSleepScheduleIntent(uint64_t a1, uint64_t a2)
{
  __int128 v3;

  v3 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 24) = v3;
  (**(void (***)(void))(v3 - 8))();
  return a1;
}

_QWORD *assignWithCopy for OpenSleepScheduleIntent(_QWORD *a1, _QWORD *a2)
{
  sub_10001C404(a1, a2);
  return a1;
}

_QWORD *sub_10001C404(_QWORD *result, _QWORD *a2)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE v15[24];

  if (result != a2)
  {
    v3 = result;
    v4 = result[3];
    v5 = a2[3];
    if (v4 == v5)
    {
      v9 = *(_QWORD *)(v4 - 8);
      if ((*(_BYTE *)(v9 + 82) & 2) != 0)
      {
        v11 = *result;
        v12 = *a2;
        swift_retain(*a2);
        result = (_QWORD *)swift_release(v11);
        *v3 = v12;
      }
      else
      {
        return (_QWORD *)(*(uint64_t (**)(_QWORD *, _QWORD *, _QWORD))(v9 + 24))(result, a2, result[3]);
      }
    }
    else
    {
      result[3] = v5;
      result[4] = a2[4];
      v6 = *(_QWORD *)(v4 - 8);
      v7 = *(_QWORD *)(v5 - 8);
      v8 = *(_DWORD *)(v7 + 80);
      if ((*(_BYTE *)(v6 + 82) & 2) != 0)
      {
        v10 = *result;
        if ((v8 & 0x20000) != 0)
        {
          v14 = *a2;
          *v3 = *a2;
          swift_retain(v14);
        }
        else
        {
          (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v7 + 16))(result, a2, v5);
        }
        return (_QWORD *)swift_release(v10);
      }
      else
      {
        (*(void (**)(_BYTE *, _QWORD *, uint64_t))(v6 + 32))(v15, result, v4);
        if ((v8 & 0x20000) != 0)
        {
          v13 = *a2;
          *v3 = *a2;
          swift_retain(v13);
        }
        else
        {
          (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v7 + 16))(v3, a2, v5);
        }
        return (_QWORD *)(*(uint64_t (**)(_BYTE *, uint64_t))(v6 + 8))(v15, v4);
      }
    }
  }
  return result;
}

__n128 initializeWithTake for OpenSleepScheduleIntent(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t assignWithTake for OpenSleepScheduleIntent(uint64_t a1, uint64_t a2)
{
  __int128 v4;

  _s6Health23OpenSleepScheduleIntentVwxx_0((_QWORD *)a1);
  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  return a1;
}

uint64_t getEnumTagSinglePayload for OpenSleepScheduleIntent(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 40))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for OpenSleepScheduleIntent(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 40) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 24) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 40) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for OpenSleepScheduleIntent()
{
  return &type metadata for OpenSleepScheduleIntent;
}

unint64_t sub_10001C65C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000EC910;
  if (!qword_1000EC910)
  {
    sub_10001C6A4(255);
    result = swift_getWitnessTable(&protocol conformance descriptor for IntentResultContainer<A, B, C, D>, v1);
    atomic_store(result, (unint64_t *)&qword_1000EC910);
  }
  return result;
}

void sub_10001C6A4(uint64_t a1)
{
  unint64_t v2;
  uint64_t v3;
  _QWORD v4[6];

  if (!qword_1000EC918)
  {
    v4[0] = &type metadata for Never;
    v4[1] = &type metadata for Never;
    v4[2] = &type metadata for Never;
    v4[3] = &type metadata for Never;
    v4[4] = sub_10001C718();
    v4[5] = sub_10001C75C();
    v2 = type metadata accessor for IntentResultContainer(a1, v4);
    if (!v3)
      atomic_store(v2, (unint64_t *)&qword_1000EC918);
  }
}

unint64_t sub_10001C718()
{
  unint64_t result;

  result = qword_1000EC920;
  if (!qword_1000EC920)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Never, &type metadata for Never);
    atomic_store(result, (unint64_t *)&qword_1000EC920);
  }
  return result;
}

unint64_t sub_10001C75C()
{
  unint64_t result;

  result = qword_1000EC928;
  if (!qword_1000EC928)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Never, &type metadata for Never);
    atomic_store(result, &qword_1000EC928);
  }
  return result;
}

unint64_t sub_10001C7A0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000EC750;
  if (!qword_1000EC750)
  {
    v1 = objc_opt_self(UIApplication);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_1000EC750);
  }
  return result;
}

uint64_t sub_10001C7DC(uint64_t a1)
{
  uint64_t v2;

  sub_10000E944(0, (unint64_t *)&unk_1000ECA90, (uint64_t (*)(uint64_t))&type metadata accessor for URL);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t sub_10001C828()
{
  unint64_t result;

  result = qword_1000EC938;
  if (!qword_1000EC938)
  {
    result = swift_getWitnessTable(&unk_1000B1540, &type metadata for OpenSleepError);
    atomic_store(result, (unint64_t *)&qword_1000EC938);
  }
  return result;
}

uint64_t sub_10001C86C(uint64_t a1, uint64_t a2)
{
  if ((*(_BYTE *)(*(_QWORD *)(a1 - 8) + 82) & 2) != 0)
    return *(_QWORD *)a2;
  return a2;
}

uint64_t *sub_10001C884(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(a1 - 8);
  if ((*(_DWORD *)(v3 + 80) & 0x20000) != 0)
  {
    v4 = swift_slowAlloc(*(_QWORD *)(v3 + 64), *(_DWORD *)(v3 + 80));
    *a2 = v4;
    return (uint64_t *)v4;
  }
  return a2;
}

uint64_t sub_10001C8C4(uint64_t a1, uint64_t a2, unint64_t *a3, uint64_t (*a4)(uint64_t))
{
  uint64_t v6;

  sub_10000E944(0, a3, a4);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a2, a1, v6);
  return a2;
}

uint64_t getEnumTagSinglePayload for OpenSleepError(unsigned int *a1, int a2)
{
  int v2;
  int v3;

  if (!a2)
    return 0;
  if ((a2 + 1) >= 0x10000)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 1) < 0x100)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
    return *a1;
  if (v3 == 2)
    return *(unsigned __int16 *)a1;
  return *(unsigned __int8 *)a1;
}

uint64_t storeEnumTagSinglePayload for OpenSleepError(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_10001C9A4 + 4 * byte_1000B13A0[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_10001C9C4 + 4 * byte_1000B13A5[v4]))();
}

_BYTE *sub_10001C9A4(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_10001C9C4(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_10001C9CC(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_10001C9D4(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_10001C9DC(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_10001C9E4(_DWORD *result)
{
  *result = 0;
  return result;
}

uint64_t sub_10001C9F0()
{
  return 0;
}

ValueMetadata *type metadata accessor for OpenSleepError()
{
  return &type metadata for OpenSleepError;
}

unint64_t sub_10001CA0C()
{
  unint64_t result;

  result = qword_1000EC958;
  if (!qword_1000EC958)
  {
    result = swift_getWitnessTable(&unk_1000B1518, &type metadata for OpenSleepError);
    atomic_store(result, (unint64_t *)&qword_1000EC958);
  }
  return result;
}

uint64_t static HealthDataType.supportsSecureCoding.getter()
{
  return 1;
}

Swift::Int sub_10001CA58()
{
  _QWORD v1[9];

  Hasher.init(_seed:)(v1, 0);
  Hasher._combine(_:)(0);
  return Hasher._finalize()();
}

void sub_10001CA98()
{
  Hasher._combine(_:)(0);
}

Swift::Int sub_10001CABC(uint64_t a1)
{
  _QWORD v2[9];

  Hasher.init(_seed:)(v2, a1);
  Hasher._combine(_:)(0);
  return Hasher._finalize()();
}

uint64_t type metadata accessor for ImportExportDataSource(uint64_t a1)
{
  uint64_t result;

  result = qword_1000EC970;
  if (!qword_1000EC970)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for ImportExportDataSource);
  return result;
}

uint64_t sub_10001CB44(uint64_t a1)
{
  _QWORD v2[2];

  v2[0] = "\b";
  v2[1] = (char *)&value witness table for Builtin.UnknownObject + 64;
  return swift_initClassMetadata2(a1, 0, 2, v2, a1 + qword_1000F0DB8);
}

uint64_t sub_10001CB98(uint64_t result, int a2, void *a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  id v8;

  v3 = *(_QWORD *)(result + 32);
  if (a2)
    return swift_continuation_throwingResume(*(_QWORD *)(result + 32));
  if (a3)
  {
    v5 = sub_100013100(0, (unint64_t *)&qword_1000EC230, (uint64_t)&protocol descriptor for Error);
    v6 = swift_allocError(v5, &protocol self-conformance witness table for Error, 0, 0);
    *v7 = a3;
    v8 = a3;
    return swift_continuation_throwingResumeWithError(v3, v6);
  }
  else
  {
    __break(1u);
  }
  return result;
}

void sub_10001CC20(void *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  Class isa;
  id v9;
  void *v10;
  objc_class *v11;
  char *v12;
  id v13;
  id v14;
  uint64_t v15;
  void *v16;
  id v17;
  void *v18;
  objc_super v19;

  sub_1000076D8(0, (unint64_t *)&unk_1000ECAF0, (uint64_t (*)(uint64_t))&type metadata accessor for UTType, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for _ContiguousArrayStorage);
  v4 = v3;
  v5 = type metadata accessor for UTType(0);
  v6 = swift_allocObject(v4, ((*(unsigned __int8 *)(*(_QWORD *)(v5 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v5 - 8) + 80))+ *(_QWORD *)(*(_QWORD *)(v5 - 8) + 72), *(unsigned __int8 *)(*(_QWORD *)(v5 - 8) + 80) | 7);
  *(_OWORD *)(v6 + 16) = xmmword_1000B11F0;
  static UTType.commaSeparatedText.getter();
  v7 = objc_allocWithZone((Class)UIDocumentPickerViewController);
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v6);
  v9 = objc_msgSend(v7, "initForOpeningContentTypes:asCopy:", isa, 1);

  v10 = *(void **)(v1 + qword_1000EC968);
  v11 = (objc_class *)type metadata accessor for ImportExportDataSourceDocumentPickerDelegate();
  v12 = (char *)objc_allocWithZone(v11);
  *(_QWORD *)&v12[OBJC_IVAR____TtC6HealthP33_9FDE690F091037398242CA42A360B38544ImportExportDataSourceDocumentPickerDelegate_healthStore] = v10;
  v19.receiver = v12;
  v19.super_class = v11;
  v13 = v10;
  v14 = objc_msgSendSuper2(&v19, "init");
  v15 = qword_1000EC960;
  v16 = *(void **)(v1 + qword_1000EC960);
  *(_QWORD *)(v1 + qword_1000EC960) = v14;

  objc_msgSend(v9, "setDelegate:", *(_QWORD *)(v1 + v15), v19.receiver, v19.super_class);
  v17 = objc_msgSend(a1, "navigationController");
  if (v17)
  {
    v18 = v17;
    objc_msgSend(v17, "presentViewController:animated:completion:", v9, 1, 0);

  }
}

uint64_t sub_10001CDB4(void *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  Class v13;
  id v14;
  void *v15;
  id v16;
  void *v17;
  uint64_t v19;

  v3 = type metadata accessor for ExportDatasetView(0);
  v4 = __chkstk_darwin(v3);
  v6 = (char *)&v19 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v8 = (char *)&v19 - v7;
  sub_100092428((uint64_t)*(id *)(v1 + qword_1000EC968), (uint64_t *)((char *)&v19 - v7));
  v9 = swift_allocObject(&unk_1000DD040, 24, 7);
  *(_QWORD *)(v9 + 16) = a1;
  v10 = *((_QWORD *)v8 + 1);
  v11 = *((_QWORD *)v8 + 2);
  v12 = a1;
  sub_10001EEB0(v10, v11);
  *((_QWORD *)v8 + 1) = sub_10001EEA8;
  *((_QWORD *)v8 + 2) = v9;
  sub_10001EEC0((uint64_t)v8, (uint64_t)v6);
  sub_10001EF04(0);
  v14 = objc_allocWithZone(v13);
  v15 = (void *)UIHostingController.init(rootView:)(v6);
  v16 = objc_msgSend(v12, "navigationController");
  if (v16)
  {
    v17 = v16;
    objc_msgSend(v16, "presentViewController:animated:completion:", v15, 1, 0);

  }
  return sub_10001EF7C((uint64_t)v8);
}

void sub_10001CEFC(void *a1)
{
  id v1;
  void *v2;
  id v3;

  v1 = objc_msgSend(a1, "navigationController");
  if (v1)
  {
    v2 = v1;
    v3 = objc_msgSend(v1, "presentedViewController");

    if (v3)
    {
      objc_msgSend(v3, "dismissViewControllerAnimated:completion:", 1, 0);

    }
  }
}

void sub_10001CF88()
{
  _swift_stdlib_reportUnimplementedInitializer("Health.ImportExportDataSource", 29, "init(arrangedSections:identifier:)", 34, 0);
  __break(1u);
}

void sub_10001CFB4()
{
  uint64_t v0;

}

uint64_t sub_10001CFE0()
{
  uint64_t v0;

  v0 = MutableArrayDataSource.deinit();

  return swift_deallocClassInstance(v0, 32, 7);
}

uint64_t sub_10001D02C()
{
  return type metadata accessor for ImportExportDataSource(0);
}

unint64_t sub_10001D034@<X0>(uint64_t a1@<X3>, uint64_t *a2@<X8>)
{
  swift_getWitnessTable(&unk_1000B1678, a1);
  return sub_100020F30(a2);
}

uint64_t sub_10001D0A0(uint64_t a1, uint64_t a2)
{
  uint64_t WitnessTable;

  WitnessTable = swift_getWitnessTable(&unk_1000B1678, a2);
  return sub_100020F3C(a1, a2, WitnessTable);
}

uint64_t sub_10001D0F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v7[20] = a6;
  v7[21] = a7;
  v7[18] = a4;
  v7[19] = a5;
  v8 = type metadata accessor for Calendar.Identifier(0);
  v7[22] = v8;
  v9 = *(_QWORD *)(v8 - 8);
  v7[23] = v9;
  v7[24] = swift_task_alloc((*(_QWORD *)(v9 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for Calendar(0);
  v7[25] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v10 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000076D8(0, &qword_1000ECAC8, (uint64_t (*)(uint64_t))&type metadata accessor for DateComponents, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
  v7[26] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v11 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for Logger(0);
  v7[27] = v12;
  v13 = *(_QWORD *)(v12 - 8);
  v7[28] = v13;
  v14 = (*(_QWORD *)(v13 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v7[29] = swift_task_alloc(v14);
  v7[30] = swift_task_alloc(v14);
  v15 = type metadata accessor for SampleDataDecoder(0);
  v7[31] = v15;
  v16 = *(_QWORD *)(v15 - 8);
  v7[32] = v16;
  v7[33] = swift_task_alloc((*(_QWORD *)(v16 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = type metadata accessor for MainActor(0);
  v7[34] = static MainActor.shared.getter();
  v18 = dispatch thunk of Actor.unownedExecutor.getter(v17, &protocol witness table for MainActor);
  v7[35] = v18;
  v7[36] = v19;
  return swift_task_switch(sub_10001D244, v18, v19);
}

uint64_t sub_10001D244()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  Class isa;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v22;
  uint64_t v23;

  v1 = v0[18];
  v2 = v0[30];
  v4 = v0[25];
  v3 = v0[26];
  v5 = v0[23];
  v6 = v0[24];
  v7 = v0[22];
  v8 = v0[19];
  v9 = sub_10001EC64(v1, v8);
  static Logger.general.getter(v9);
  v10 = type metadata accessor for DateComponents(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56))(v3, 1, 1, v10);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v5 + 104))(v6, enum case for Calendar.Identifier.gregorian(_:), v7);
  Calendar.init(identifier:)(v6);
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v6, v7);
  v11 = SampleDataDecoder.init(fileData:logger:calendar:dateShift:)(v1, v8, v2, v4, v3);
  v12 = SampleDataDecoder.decodeSamples()(v11);
  v13 = v12;
  v14 = *(void **)(v0[20]
                 + OBJC_IVAR____TtC6HealthP33_9FDE690F091037398242CA42A360B38544ImportExportDataSourceDocumentPickerDelegate_healthStore);
  if ((unint64_t)v12 >> 62)
  {
    if (v12 < 0)
      v22 = v12;
    else
      v22 = v12 & 0xFFFFFFFFFFFFFF8;
    v23 = sub_100006D10(0, (unint64_t *)&unk_1000ECAD0, HKObject_ptr);
    swift_bridgeObjectRetain(v13);
    v16 = _bridgeCocoaArray<A>(_:)(v22, v23);
    swift_bridgeObjectRelease(v13);
  }
  else
  {
    v15 = swift_bridgeObjectRetain(v12);
    dispatch thunk of __ContiguousArrayStorageBase.staticElementType.getter(v15);
    sub_100006D10(0, (unint64_t *)&unk_1000ECAD0, HKObject_ptr);
    v16 = v13;
  }
  swift_bridgeObjectRelease(v13);
  v17 = v0 + 2;
  sub_100006D10(0, (unint64_t *)&unk_1000ECAD0, HKObject_ptr);
  isa = Array._bridgeToObjectiveC()().super.isa;
  v0[37] = isa;
  swift_bridgeObjectRelease(v16);
  v0[2] = v0;
  v0[3] = sub_10001D704;
  v19 = swift_continuation_init(v0 + 2, 1);
  v0[10] = _NSConcreteStackBlock;
  v20 = v0 + 10;
  v20[1] = 0x40000000;
  v20[2] = sub_10001CB98;
  v20[3] = &unk_1000DD018;
  v20[4] = v19;
  objc_msgSend(v14, "saveObjects:withCompletion:", isa, v20);
  return swift_continuation_await(v17);
}

uint64_t sub_10001D704()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  v1 = *v0;
  v2 = *(_QWORD *)(*v0 + 48);
  *(_QWORD *)(*v0 + 304) = v2;
  if (v2)
    v3 = sub_10001D7F8;
  else
    v3 = sub_10001D760;
  return swift_task_switch(v3, *(_QWORD *)(v1 + 280), *(_QWORD *)(v1 + 288));
}

uint64_t sub_10001D760()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v1 = *(void **)(v0 + 296);
  v2 = *(_QWORD *)(v0 + 264);
  v3 = *(_QWORD *)(v0 + 248);
  v4 = *(_QWORD *)(v0 + 256);
  swift_release(*(_QWORD *)(v0 + 272));
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v2, v3);

  v5 = *(_QWORD *)(v0 + 232);
  v6 = *(_QWORD *)(v0 + 240);
  v8 = *(_QWORD *)(v0 + 200);
  v7 = *(_QWORD *)(v0 + 208);
  v9 = *(_QWORD *)(v0 + 192);
  swift_task_dealloc(*(_QWORD *)(v0 + 264));
  swift_task_dealloc(v6);
  swift_task_dealloc(v5);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10001D7F8()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t MetatypeMetadata;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  v1 = *(void **)(v0 + 296);
  v2 = *(_QWORD *)(v0 + 264);
  v3 = *(_QWORD *)(v0 + 248);
  v4 = *(_QWORD *)(v0 + 256);
  v5 = swift_release(*(_QWORD *)(v0 + 272));
  swift_willThrow(v5);
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v2, v3);

  v6 = *(_QWORD *)(v0 + 304);
  static Logger.general.getter(v7);
  swift_errorRetain(v6);
  v8 = swift_errorRetain(v6);
  v9 = Logger.logObject.getter(v8);
  v10 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v9, v10))
  {
    v30 = *(_QWORD *)(v0 + 224);
    v31 = *(_QWORD *)(v0 + 216);
    v32 = *(_QWORD *)(v0 + 232);
    v11 = *(_QWORD *)(v0 + 168);
    v12 = swift_slowAlloc(22, -1);
    v13 = (uint64_t *)swift_slowAlloc(8, -1);
    v29 = swift_slowAlloc(32, -1);
    v33 = v29;
    *(_DWORD *)v12 = 136446466;
    *(_QWORD *)(v0 + 120) = v11;
    MetatypeMetadata = swift_getMetatypeMetadata(v11);
    v15 = String.init<A>(describing:)(v0 + 120, MetatypeMetadata);
    v17 = v16;
    *(_QWORD *)(v0 + 128) = sub_100012B20(v15, v16, &v33);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 128, v0 + 136, v12 + 4, v12 + 12);
    swift_bridgeObjectRelease(v17);
    *(_WORD *)(v12 + 12) = 2112;
    swift_errorRetain(v6);
    v18 = _swift_stdlib_bridgeErrorToNSError(v6);
    *(_QWORD *)(v0 + 136) = v18;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 136, v0 + 144, v12 + 14, v12 + 22);
    *v13 = v18;
    swift_errorRelease(v6);
    swift_errorRelease(v6);
    _os_log_impl((void *)&_mh_execute_header, v9, v10, "[%{public}s]: Failed at some point trying to open CSV or write. Error: %@", (uint8_t *)v12, 0x16u);
    sub_10001EC00(0);
    swift_arrayDestroy(v13, 1, v19);
    swift_slowDealloc(v13, -1, -1);
    swift_arrayDestroy(v29, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v29, -1, -1);
    swift_slowDealloc(v12, -1, -1);

    swift_errorRelease(v6);
    (*(void (**)(uint64_t, uint64_t))(v30 + 8))(v32, v31);
  }
  else
  {
    v21 = *(_QWORD *)(v0 + 224);
    v20 = *(_QWORD *)(v0 + 232);
    v22 = *(_QWORD *)(v0 + 216);
    swift_errorRelease(v6);
    swift_errorRelease(v6);
    swift_errorRelease(v6);

    (*(void (**)(uint64_t, uint64_t))(v21 + 8))(v20, v22);
  }
  v23 = *(_QWORD *)(v0 + 232);
  v24 = *(_QWORD *)(v0 + 240);
  v26 = *(_QWORD *)(v0 + 200);
  v25 = *(_QWORD *)(v0 + 208);
  v27 = *(_QWORD *)(v0 + 192);
  swift_task_dealloc(*(_QWORD *)(v0 + 264));
  swift_task_dealloc(v24);
  swift_task_dealloc(v23);
  swift_task_dealloc(v25);
  swift_task_dealloc(v26);
  swift_task_dealloc(v27);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10001DAB0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t ObjectType;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned __int8 v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD v19[4];

  v6 = type metadata accessor for TaskPriority(0);
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, 1, v6) == 1)
  {
    sub_10001EDAC(a1, &qword_1000ECA88, (uint64_t (*)(uint64_t))&type metadata accessor for TaskPriority);
    v8 = 7168;
    v9 = *(_QWORD *)(a3 + 16);
    if (v9)
    {
LABEL_3:
      v10 = *(_QWORD *)(a3 + 24);
      ObjectType = swift_getObjectType(v9);
      swift_unknownObjectRetain(v9);
      v12 = dispatch thunk of Actor.unownedExecutor.getter(ObjectType, v10);
      v14 = v13;
      swift_unknownObjectRelease(v9);
      goto LABEL_6;
    }
  }
  else
  {
    v15 = TaskPriority.rawValue.getter();
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(a1, v6);
    v8 = v15 | 0x1C00;
    v9 = *(_QWORD *)(a3 + 16);
    if (v9)
      goto LABEL_3;
  }
  v12 = 0;
  v14 = 0;
LABEL_6:
  v16 = swift_allocObject(&unk_1000DD000, 32, 7);
  *(_QWORD *)(v16 + 16) = a2;
  *(_QWORD *)(v16 + 24) = a3;
  if (v14 | v12)
  {
    v19[0] = 0;
    v19[1] = 0;
    v17 = v19;
    v19[2] = v12;
    v19[3] = v14;
  }
  else
  {
    v17 = 0;
  }
  return swift_task_create(v8, v17, (char *)&type metadata for () + 8, &unk_1000ECAC0, v16);
}

id sub_10001DCB0()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for ImportExportDataSourceDocumentPickerDelegate();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for ImportExportDataSourceDocumentPickerDelegate()
{
  return objc_opt_self(_TtC6HealthP33_9FDE690F091037398242CA42A360B38544ImportExportDataSourceDocumentPickerDelegate);
}

uint64_t sub_10001DD14(uint64_t a1)
{
  uint64_t result;

  *(_QWORD *)(a1 + 8) = sub_100013198(&qword_1000ECA50, type metadata accessor for ImportExportDataSource, (uint64_t)&unk_1000B1620);
  result = sub_100013198(&qword_1000ECA58, type metadata accessor for ImportExportDataSource, (uint64_t)&unk_1000B1650);
  *(_QWORD *)(a1 + 24) = result;
  return result;
}

uint64_t sub_10001DD70(uint64_t a1, int *a2)
{
  uint64_t v2;
  _QWORD *v4;
  uint64_t (*v6)(uint64_t);

  v6 = (uint64_t (*)(uint64_t))((char *)a2 + *a2);
  v4 = (_QWORD *)swift_task_alloc(a2[1]);
  *(_QWORD *)(v2 + 16) = v4;
  *v4 = v2;
  v4[1] = sub_10001DDD4;
  return v6(a1);
}

uint64_t sub_10001DDD4()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  swift_task_dealloc(*(_QWORD *)(*v0 + 16));
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t sub_10001DE20(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  id v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  void *v27;
  void (*v28)(char *, uint64_t);
  Swift::String v29;
  Swift::String v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  id v36;
  void (*v37)(_BYTE *, _QWORD);
  _BYTE *v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  id v48;
  void (*v49)(_BYTE *, _QWORD);
  _BYTE *v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  _QWORD *v63;
  uint64_t v64;
  void (*v65)(_QWORD *, char *, uint64_t);
  char *v66;
  _QWORD *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  void (*v75)(char *, uint64_t);
  _BYTE *v77;
  void (*v78)(char *, uint64_t, uint64_t, uint64_t);
  unsigned int v79;
  void (*v80)(_BYTE *);
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  char *v84;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  char *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  void (*v92)(char *, uint64_t);
  uint64_t v93;
  char *v94;
  _BYTE v95[32];
  _QWORD v96[3];
  uint64_t v97;
  void *v98;

  v2 = v1;
  v4 = type metadata accessor for SectionedDataSourceContainerViewType(0);
  v86 = *(_QWORD *)(v4 - 8);
  v87 = v4;
  __chkstk_darwin(v4);
  v85 = (char *)&v77 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000076D8(0, &qword_1000ECA60, (uint64_t (*)(uint64_t))&type metadata accessor for UIBackgroundConfiguration, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
  __chkstk_darwin(v6);
  v84 = (char *)&v77 - v7;
  v8 = type metadata accessor for CellDeselectionBehavior(0);
  v9 = *(_QWORD *)(v8 - 8);
  v81 = v8;
  __chkstk_darwin(v8);
  v11 = (char *)&v77 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for ContentConfigurationItem(0);
  v13 = *(_QWORD *)(v12 - 8);
  v89 = v12;
  v90 = v13;
  v14 = __chkstk_darwin(v12);
  v88 = (char *)&v77 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  v94 = (char *)&v77 - v16;
  v17 = type metadata accessor for UUID(0);
  v18 = *(_QWORD *)(v17 - 8);
  v19 = v17;
  __chkstk_darwin(v17);
  v21 = (char *)&v77 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)(v2 + qword_1000EC960) = 0;
  *(_QWORD *)(v2 + qword_1000EC968) = a1;
  v96[0] = 0;
  v96[1] = 0xE000000000000000;
  v22 = a1;
  _StringGuts.grow(_:)(16);
  swift_bridgeObjectRelease(v96[1]);
  strcpy((char *)v96, "MutableArray<");
  HIWORD(v96[1]) = -4864;
  v24 = UUID.init()(v23);
  v25 = UUID.uuidString.getter(v24);
  v27 = v26;
  v28 = *(void (**)(char *, uint64_t))(v18 + 8);
  v93 = v19;
  v28(v21, v19);
  v92 = v28;
  v29._countAndFlagsBits = v25;
  v29._object = v27;
  String.append(_:)(v29);
  swift_bridgeObjectRelease(v27);
  v30._countAndFlagsBits = 62;
  v30._object = (void *)0xE100000000000000;
  String.append(_:)(v30);
  v91 = MutableArrayDataSource.init(arrangedSections:identifier:)(_swiftEmptyArrayStorage, v96[0], v96[1]);
  v31 = swift_retain_n(v91, 2);
  v32 = UUID.init()(v31);
  v83 = UUID.uuidString.getter(v32);
  v82 = v33;
  v28(v21, v19);
  v34 = type metadata accessor for UIListContentConfiguration(0);
  v97 = v34;
  v98 = &protocol witness table for UIListContentConfiguration;
  sub_100007E0C(v96);
  static UIListContentConfiguration.cell()();
  UIListContentConfiguration.text.setter(0x74726F706D49, 0xE600000000000000);
  v35 = (void *)objc_opt_self(UIColor);
  v36 = objc_msgSend(v35, "tintColor");
  v37 = (void (*)(_BYTE *, _QWORD))UIListContentConfiguration.textProperties.modify(v95);
  UIListContentConfiguration.TextProperties.color.setter(v36);
  v37(v95, 0);
  v38 = v11;
  *v11 = 1;
  v79 = enum case for CellDeselectionBehavior.deselectOnDidSelect(_:);
  v80 = *(void (**)(_BYTE *))(v9 + 104);
  v77 = v11;
  v80(v11);
  v39 = type metadata accessor for UIBackgroundConfiguration(0);
  v78 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v39 - 8) + 56);
  v40 = v84;
  v78(v84, 1, 1, v39);
  v41 = enum case for SectionedDataSourceContainerViewType.collectionView(_:);
  v42 = v85;
  v86 = *(_QWORD *)(v86 + 104);
  v43 = v87;
  ((void (*)(char *, _QWORD, uint64_t))v86)(v85, enum case for SectionedDataSourceContainerViewType.collectionView(_:), v87);
  v44 = v91;
  ContentConfigurationItem.init(uniqueIdentifier:contentConfiguration:cellAccessories:cellSelectionHandler:deselectionBehavior:backgroundConfiguration:updateContentConfigurationHandler:container:automationIdentifier:)(v83, v82, v96, _swiftEmptyArrayStorage, sub_10001E528, v91, v38, v40, 0, 0, v42, 0, 0);
  v45 = swift_retain(v44);
  v46 = UUID.init()(v45);
  v83 = UUID.uuidString.getter(v46);
  v82 = v47;
  v92(v21, v93);
  v97 = v34;
  v98 = &protocol witness table for UIListContentConfiguration;
  sub_100007E0C(v96);
  static UIListContentConfiguration.cell()();
  UIListContentConfiguration.text.setter(0x74726F707845, 0xE600000000000000);
  v48 = objc_msgSend(v35, "tintColor");
  v49 = (void (*)(_BYTE *, _QWORD))UIListContentConfiguration.textProperties.modify(v95);
  UIListContentConfiguration.TextProperties.color.setter(v48);
  v49(v95, 0);
  v50 = v77;
  *v77 = 1;
  ((void (*)(_BYTE *, _QWORD, uint64_t))v80)(v50, v79, v81);
  v78(v40, 1, 1, v39);
  ((void (*)(char *, uint64_t, uint64_t))v86)(v42, v41, v43);
  v51 = v88;
  ContentConfigurationItem.init(uniqueIdentifier:contentConfiguration:cellAccessories:cellSelectionHandler:deselectionBehavior:backgroundConfiguration:updateContentConfigurationHandler:container:automationIdentifier:)(v83, v82, v96, _swiftEmptyArrayStorage, sub_10001E52C, v44, v50, v40, 0, 0, v42, 0, 0);
  sub_1000076D8(0, &qword_1000ECA68, (uint64_t (*)(uint64_t))&type metadata accessor for ArrayDataSourceSection, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for _ContiguousArrayStorage);
  v53 = v52;
  v54 = *(_QWORD *)(type metadata accessor for ArrayDataSourceSection(0) - 8);
  v55 = *(_QWORD *)(v54 + 72);
  v56 = *(unsigned __int8 *)(v54 + 80);
  v57 = (v56 + 32) & ~v56;
  v58 = swift_allocObject(v53, v57 + v55, v56 | 7);
  *(_OWORD *)(v58 + 16) = xmmword_1000B11F0;
  v87 = v58 + v57;
  sub_10001E530(0);
  v60 = swift_allocObject(v59, 112, 7);
  *(_OWORD *)(v60 + 16) = xmmword_1000B1580;
  v61 = v89;
  *(_QWORD *)(v60 + 56) = v89;
  v62 = sub_100013198(&qword_1000ECA80, (uint64_t (*)(uint64_t))&type metadata accessor for ContentConfigurationItem, (uint64_t)&protocol conformance descriptor for ContentConfigurationItem);
  *(_QWORD *)(v60 + 64) = v62;
  v63 = sub_100007E0C((_QWORD *)(v60 + 32));
  v64 = v90;
  v65 = *(void (**)(_QWORD *, char *, uint64_t))(v90 + 16);
  v66 = v94;
  v65(v63, v94, v61);
  *(_QWORD *)(v60 + 96) = v61;
  *(_QWORD *)(v60 + 104) = v62;
  v67 = sub_100007E0C((_QWORD *)(v60 + 72));
  v65(v67, v51, v61);
  v68 = v91;
  v69 = swift_retain(v91);
  v70 = UUID.init()(v69);
  v71 = UUID.uuidString.getter(v70);
  v73 = v72;
  v92(v21, v93);
  ArrayDataSourceSection.init(title:arrangedItems:identifier:)(0x7374657361746144, 0xE800000000000000, v60, v71, v73);
  v74 = v68;
  dispatch thunk of MutableArrayDataSource.replaceAllSections(with:reconfigureOrReloadItemsIfNeeded:)(v58, 1);
  swift_bridgeObjectRelease(v58);
  swift_release_n(v68, 2);
  v75 = *(void (**)(char *, uint64_t))(v64 + 8);
  v75(v51, v61);
  v75(v66, v61);
  return v74;
}

void sub_10001E530(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_1000ECA70)
  {
    v2 = sub_100013100(255, (unint64_t *)&qword_1000EEC70, (uint64_t)&protocol descriptor for SectionedDataSourceItem);
    v3 = type metadata accessor for _ContiguousArrayStorage(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_1000ECA70);
  }
}

uint64_t sub_10001E594(uint64_t a1)
{
  void *v1;
  void *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  id v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  NSObject *v36;
  os_log_type_t v37;
  uint8_t *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t MetatypeMetadata;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t ObjectType;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;

  v2 = v1;
  ObjectType = swift_getObjectType(v2);
  v4 = type metadata accessor for Logger(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = __chkstk_darwin(v4);
  v48 = (char *)&v46 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v9 = (char *)&v46 - v8;
  sub_1000076D8(0, &qword_1000ECA88, (uint64_t (*)(uint64_t))&type metadata accessor for TaskPriority, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
  __chkstk_darwin(v10);
  v12 = (char *)&v46 - v11;
  sub_1000076D8(0, (unint64_t *)&unk_1000ECA90, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
  __chkstk_darwin(v13);
  v15 = (char *)&v46 - v14;
  v16 = type metadata accessor for URL(0);
  v17 = *(_QWORD *)(v16 - 8);
  v18 = __chkstk_darwin(v16);
  v20 = (char *)&v46 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!*(_QWORD *)(a1 + 16))
    goto LABEL_10;
  (*(void (**)(char *, unint64_t, uint64_t))(v17 + 16))(v15, a1 + ((*(unsigned __int8 *)(v17 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v17 + 80)), v16);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v17 + 56))(v15, 0, 1, v16);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48))(v15, 1, v16) == 1)
  {
    v18 = sub_10001EDAC((uint64_t)v15, (unint64_t *)&unk_1000ECA90, (uint64_t (*)(uint64_t))&type metadata accessor for URL);
    goto LABEL_10;
  }
  v21 = (*(uint64_t (**)(char *, char *, uint64_t))(v17 + 32))(v20, v15, v16);
  v22 = URL.pathExtension.getter(v21);
  v24 = v23;
  if (v22 == 7762787 && v23 == 0xE300000000000000)
  {
    swift_bridgeObjectRelease(0xE300000000000000);
LABEL_8:
    v26 = Data.init(contentsOf:options:)(v20, 0);
    v28 = v27;
    v29 = type metadata accessor for TaskPriority(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v29 - 8) + 56))(v12, 1, 1, v29);
    type metadata accessor for MainActor(0);
    sub_10001EC64(v26, v28);
    v30 = v2;
    v31 = static MainActor.shared.getter();
    v32 = (_QWORD *)swift_allocObject(&unk_1000DCFD8, 64, 7);
    v32[2] = v31;
    v32[3] = &protocol witness table for MainActor;
    v32[4] = v26;
    v32[5] = v28;
    v33 = ObjectType;
    v32[6] = v30;
    v32[7] = v33;
    v34 = sub_10001DAB0((uint64_t)v12, (uint64_t)&unk_1000ECAB0, (uint64_t)v32);
    swift_release(v34);
    sub_10001ECDC(v26, v28);
    return (*(uint64_t (**)(char *, uint64_t))(v17 + 8))(v20, v16);
  }
  v25 = _stringCompareWithSmolCheck(_:_:expecting:)(v22, v23, 7762787, 0xE300000000000000, 0);
  swift_bridgeObjectRelease(v24);
  if ((v25 & 1) != 0)
    goto LABEL_8;
  v18 = (*(uint64_t (**)(char *, uint64_t))(v17 + 8))(v20, v16);
LABEL_10:
  v35 = static Logger.general.getter(v18);
  v36 = Logger.logObject.getter(v35);
  v37 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v36, v37))
  {
    v47 = v4;
    v38 = (uint8_t *)swift_slowAlloc(12, -1);
    v39 = v5;
    v40 = swift_slowAlloc(32, -1);
    v50 = v40;
    *(_DWORD *)v38 = 136446210;
    v51 = ObjectType;
    MetatypeMetadata = swift_getMetatypeMetadata(ObjectType);
    v42 = String.init<A>(describing:)(&v51, MetatypeMetadata);
    v44 = v43;
    v51 = sub_100012B20(v42, v43, &v50);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v51, &v52, v38 + 4, v38 + 12);
    swift_bridgeObjectRelease(v44);
    _os_log_impl((void *)&_mh_execute_header, v36, v37, "[%{public}s]: No URLs found, or file selected does not have csv file extension.", v38, 0xCu);
    swift_arrayDestroy(v40, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v40, -1, -1);
    swift_slowDealloc(v38, -1, -1);

    return (*(uint64_t (**)(char *, uint64_t))(v39 + 8))(v9, v47);
  }
  else
  {

    return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v9, v4);
  }
}

void sub_10001EC00(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_1000EF100)
  {
    v2 = sub_100006D10(255, &qword_1000ECAA0, NSObject_ptr);
    v3 = type metadata accessor for Optional(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_1000EF100);
  }
}

uint64_t sub_10001EC64(uint64_t result, unint64_t a2)
{
  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2)
      return result;
    swift_retain(result);
  }
  return swift_retain(a2 & 0x3FFFFFFFFFFFFFFFLL);
}

uint64_t sub_10001ECA8()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  sub_10001ECDC(*(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40));

  return swift_deallocObject(v0, 64, 7);
}

uint64_t sub_10001ECDC(uint64_t result, unint64_t a2)
{
  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2)
      return result;
    swift_release(result);
  }
  return swift_release(a2 & 0x3FFFFFFFFFFFFFFFLL);
}

uint64_t sub_10001ED20(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;

  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = v1[5];
  v9 = v1[6];
  v8 = v1[7];
  v10 = (_QWORD *)swift_task_alloc(dword_1000ECAAC);
  *(_QWORD *)(v2 + 16) = v10;
  *v10 = v2;
  v10[1] = sub_10001C2DC;
  return sub_10001D0F4(a1, v4, v5, v6, v7, v9, v8);
}

uint64_t sub_10001EDAC(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t))
{
  uint64_t v4;

  sub_1000076D8(0, a2, a3, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  return a1;
}

uint64_t sub_10001EDF0()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10001EE14(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int *v4;
  _QWORD *v5;

  v4 = *(int **)(v1 + 16);
  v5 = (_QWORD *)swift_task_alloc(dword_1000ECABC);
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_10001C2DC;
  return ((uint64_t (*)(uint64_t, int *))((char *)&dword_1000ECAB8 + dword_1000ECAB8))(a1, v4);
}

uint64_t sub_10001EE84()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

void sub_10001EEA8()
{
  uint64_t v0;

  sub_10001CEFC(*(void **)(v0 + 16));
}

uint64_t sub_10001EEB0(uint64_t result, uint64_t a2)
{
  if (result)
    return swift_release(a2);
  return result;
}

uint64_t sub_10001EEC0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for ExportDatasetView(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

void sub_10001EF04(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;

  if (!qword_1000ECAE0)
  {
    v2 = type metadata accessor for ExportDatasetView(255);
    v3 = sub_100013198(&qword_1000ECAE8, type metadata accessor for ExportDatasetView, (uint64_t)&unk_1000B64C0);
    v4 = type metadata accessor for UIHostingController(a1, v2, v3);
    if (!v5)
      atomic_store(v4, (unint64_t *)&qword_1000ECAE0);
  }
}

uint64_t sub_10001EF7C(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for ExportDatasetView(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t type metadata accessor for ManualTriggerDataSource(uint64_t a1)
{
  return sub_100006A08(a1, (uint64_t *)&unk_1000ECB68, (uint64_t)&nominal type descriptor for ManualTriggerDataSource);
}

uint64_t sub_10001EFCC(uint64_t a1)
{
  char *v2;

  v2 = (char *)&value witness table for Builtin.UnknownObject + 64;
  return swift_initClassMetadata2(a1, 0, 1, &v2, a1 + qword_1000F0DD0);
}

uint64_t sub_10001F018(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return *(unsigned __int8 *)(v3 + *(int *)(a3 + 24));
}

uint64_t sub_10001F024(uint64_t a1, uint64_t a2)
{
  uint64_t (**v2)(uint64_t);

  return (*v2)(a2);
}

uint64_t sub_10001F048@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = v2 + *(int *)(a1 + 20);
  v5 = type metadata accessor for CellDeselectionBehavior(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, v4, v5);
}

id sub_10001F090()
{
  id result;

  result = objc_msgSend(objc_allocWithZone((Class)NSOperationQueue), "init");
  qword_1000F0DC8 = (uint64_t)result;
  return result;
}

char *sub_10001F0C0(int a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  char *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  void (*v13)(char *, char *, uint64_t);
  int v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v20;
  unsigned __int8 v21;
  char *v22;

  v2 = v1;
  v4 = type metadata accessor for ContentConfigurationItem(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v20 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = (char *)_swiftEmptyArrayStorage;
  sub_10007FE98(0, 3, 0);
  v8 = v22;
  v21 = 0;
  v20 = v2;
  sub_10001F2C8(&v21, a1, v2, (uint64_t)v7);
  v10 = *((_QWORD *)v8 + 2);
  v9 = *((_QWORD *)v8 + 3);
  if (v10 >= v9 >> 1)
  {
    sub_10007FE98(v9 > 1, v10 + 1, 1);
    v8 = v22;
  }
  *((_QWORD *)v8 + 2) = v10 + 1;
  v11 = (*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  v12 = *(_QWORD *)(v5 + 72);
  v13 = *(void (**)(char *, char *, uint64_t))(v5 + 32);
  v13(&v8[v11 + v12 * v10], v7, v4);
  v21 = 1;
  v14 = a1 & 1;
  sub_10001F2C8(&v21, v14, v20, (uint64_t)v7);
  v22 = v8;
  v16 = *((_QWORD *)v8 + 2);
  v15 = *((_QWORD *)v8 + 3);
  if (v16 >= v15 >> 1)
  {
    sub_10007FE98(v15 > 1, v16 + 1, 1);
    v8 = v22;
  }
  *((_QWORD *)v8 + 2) = v16 + 1;
  v13(&v8[v11 + v12 * v16], v7, v4);
  v21 = 2;
  sub_10001F2C8(&v21, v14, v20, (uint64_t)v7);
  v22 = v8;
  v18 = *((_QWORD *)v8 + 2);
  v17 = *((_QWORD *)v8 + 3);
  if (v18 >= v17 >> 1)
  {
    sub_10007FE98(v17 > 1, v18 + 1, 1);
    v8 = v22;
  }
  *((_QWORD *)v8 + 2) = v18 + 1;
  v13(&v8[v11 + v12 * v18], v7, v4);
  return v8;
}

uint64_t sub_10001F2C8@<X0>(unsigned __int8 *a1@<X0>, int a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  int v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  void *v20;
  char **v21;
  id v22;
  void (*v23)(_QWORD *, _QWORD);
  const char *v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  _BYTE *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  char *v36;
  unint64_t v38;
  unint64_t v39;
  char *v40;
  int v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD v46[5];
  _QWORD v47[5];

  v45 = a4;
  v44 = type metadata accessor for SectionedDataSourceContainerViewType(0);
  v42 = *(_QWORD *)(v44 - 8);
  __chkstk_darwin(v44);
  v43 = (char *)&v38 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000076D8(0, &qword_1000ECA60, (uint64_t (*)(uint64_t))&type metadata accessor for UIBackgroundConfiguration, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
  __chkstk_darwin(v8);
  v40 = (char *)&v38 - v9;
  v10 = type metadata accessor for UIListContentConfiguration(0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = __chkstk_darwin(v10);
  v14 = (char *)&v38 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = *a1;
  static UIListContentConfiguration.cell()(v12);
  v16 = 0x80000001000B86B0;
  v17 = 0xD000000000000012;
  if (v15 == 1)
    v17 = 0xD000000000000018;
  else
    v16 = 0x80000001000B8630;
  if (v15)
    v18 = v17;
  else
    v18 = 0xD00000000000001BLL;
  if (v15)
    v19 = v16;
  else
    v19 = 0x80000001000B86D0;
  UIListContentConfiguration.text.setter(v18, v19);
  v20 = (void *)objc_opt_self(UIColor);
  v21 = &selRef_lightGrayColor;
  v41 = a2;
  if ((a2 & 1) == 0)
    v21 = &selRef_tintColor;
  v22 = objc_msgSend(v20, *v21);
  v23 = (void (*)(_QWORD *, _QWORD))UIListContentConfiguration.textProperties.modify(v47);
  UIListContentConfiguration.TextProperties.color.setter(v22);
  v23(v47, 0);
  if (v15)
  {
    if (v15 == 1)
    {
      v38 = 0xD000000000000015;
      v24 = "RelevanceEngineButton";
    }
    else
    {
      v38 = 0xD000000000000011;
      v24 = "TriggerSyncButton";
    }
    v39 = (unint64_t)(v24 - 32) | 0x8000000000000000;
  }
  else
  {
    v38 = 0xD000000000000018;
    v39 = 0x80000001000B8690;
  }
  v47[3] = v10;
  v47[4] = &protocol witness table for UIListContentConfiguration;
  v25 = sub_100007E0C(v47);
  (*(void (**)(_QWORD *, char *, uint64_t))(v11 + 16))(v25, v14, v10);
  v26 = swift_allocObject(&unk_1000DD118, 24, 7);
  swift_weakInit(v26 + 16, a3);
  v27 = swift_allocObject(&unk_1000DD140, 25, 7);
  *(_QWORD *)(v27 + 16) = v26;
  *(_BYTE *)(v27 + 24) = v15;
  v28 = type metadata accessor for ManualTriggerSelectionHandling(0);
  v46[3] = v28;
  v46[4] = sub_100013198(&qword_1000ECBC8, type metadata accessor for ManualTriggerSelectionHandling, (uint64_t)&unk_1000B1790);
  v29 = v11;
  v30 = sub_100007E0C(v46);
  v31 = (char *)v30 + *(int *)(v28 + 20);
  *v31 = 1;
  v32 = enum case for CellDeselectionBehavior.deselectOnDidSelect(_:);
  v33 = type metadata accessor for CellDeselectionBehavior(0);
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(*(_QWORD *)(v33 - 8) + 104))(v31, v32, v33);
  *v30 = sub_100020388;
  v30[1] = v27;
  *((_BYTE *)v30 + *(int *)(v28 + 24)) = (v41 & 1) == 0;
  v34 = type metadata accessor for UIBackgroundConfiguration(0);
  v35 = v40;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v34 - 8) + 56))(v40, 1, 1, v34);
  v36 = v43;
  (*(void (**)(char *, _QWORD, uint64_t))(v42 + 104))(v43, enum case for SectionedDataSourceContainerViewType.collectionView(_:), v44);
  ContentConfigurationItem.init(uniqueIdentifier:contentConfiguration:cellAccessories:cellSelectionHandler:backgroundConfiguration:updateContentConfigurationHandler:container:automationIdentifier:)(v38, v39, v47, _swiftEmptyArrayStorage, v46, v35, 0, 0, v36, 0, 0);
  return (*(uint64_t (**)(char *, uint64_t))(v29 + 8))(v14, v10);
}

uint64_t sub_10001F6A0(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  _BYTE v7[24];

  v4 = a2 + 16;
  swift_beginAccess(a2 + 16, v7, 0, 0);
  result = swift_weakLoadStrong(v4);
  if (result)
  {
    v6 = result;
    if (a3)
    {
      if (a3 == 1)
        sub_1000205B4();
      else
        sub_10001F994();
    }
    else
    {
      sub_1000203A8();
    }
    return swift_release(v6);
  }
  return result;
}

uint64_t sub_10001F718(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  _QWORD aBlock[5];
  uint64_t v23;
  char v24[24];

  v2 = type metadata accessor for DispatchWorkItemFlags(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&aBlock[-1] - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for DispatchQoS(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&aBlock[-1] - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  a1 += 16;
  swift_beginAccess(a1, v24, 0, 0);
  result = swift_weakLoadStrong(a1);
  if (result)
  {
    v11 = result;
    sub_100006D10(0, (unint64_t *)&qword_1000ED910, OS_dispatch_queue_ptr);
    v12 = static OS_dispatch_queue.main.getter();
    v21 = v3;
    v13 = (void *)v12;
    aBlock[4] = sub_100020798;
    v23 = v11;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_100006988;
    aBlock[3] = &unk_1000DD180;
    v14 = _Block_copy(aBlock);
    v15 = v23;
    swift_retain(v11);
    v16 = swift_release(v15);
    static DispatchQoS.unspecified.getter(v16);
    aBlock[0] = _swiftEmptyArrayStorage;
    v17 = sub_100013198((unint64_t *)&qword_1000EDBE0, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    sub_1000076D8(0, (unint64_t *)&qword_1000ED920, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Array);
    v19 = v18;
    v20 = sub_100013C8C();
    dispatch thunk of SetAlgebra.init<A>(_:)(aBlock, v19, v20, v2, v17);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0, v9, v5, v14);
    _Block_release(v14);
    swift_release(v11);

    (*(void (**)(char *, uint64_t))(v21 + 8))(v5, v2);
    return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  }
  return result;
}

double sub_10001F940()
{
  uint64_t v0;
  _QWORD *v1;
  double result;

  v0 = sub_10001F0C0(0);
  v1 = sub_1000A6048(v0);
  swift_bridgeObjectRelease(v0);
  dispatch thunk of MutableArrayDataSource.replaceItemsForSection(at:newItems:reconfigureAndReloadItems:)(0, v1, 1);
  *(_QWORD *)&result = swift_bridgeObjectRelease(v1).n128_u64[0];
  return result;
}

void sub_10001F994()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  _BOOL4 v11;
  uint64_t v12;
  uint8_t *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint8_t *v18;
  void *v19;
  uint64_t v20;
  id v21;
  id v22;
  id v23;
  NSString v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  id v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t aBlock[5];
  uint64_t v35;

  v1 = v0;
  v2 = *v0;
  v3 = type metadata accessor for Logger(0);
  v4 = *(_QWORD *)(v3 - 8);
  v5 = __chkstk_darwin(v3);
  v7 = (char *)&v30 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = static Logger.general.getter(v5);
  v9 = Logger.logObject.getter(v8);
  v10 = static os_log_type_t.debug.getter();
  v11 = os_log_type_enabled(v9, v10);
  v32 = v2;
  if (v11)
  {
    v12 = swift_slowAlloc(12, -1);
    v31 = v1;
    v13 = (uint8_t *)v12;
    v14 = swift_slowAlloc(32, -1);
    aBlock[0] = v14;
    *(_DWORD *)v13 = 136315138;
    v15 = _typeName(_:qualified:)(v2, 0);
    v17 = v16;
    v33 = sub_100012B20(v15, v16, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v33, aBlock, v13 + 4, v13 + 12);
    swift_bridgeObjectRelease(v17);
    _os_log_impl((void *)&_mh_execute_header, v9, v10, "[%s] Triggering cloud sync", v13, 0xCu);
    swift_arrayDestroy(v14, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v14, -1, -1);
    v18 = v13;
    v1 = v31;
    swift_slowDealloc(v18, -1, -1);
  }

  (*(void (**)(char *, uint64_t))(v4 + 8))(v7, v3);
  if (qword_1000EBFE0 != -1)
    swift_once(&qword_1000EBFE0, sub_100016740);
  v19 = (void *)qword_1000F0D78;
  v20 = *(_QWORD *)((char *)v1 + qword_1000ECB60);
  v21 = objc_allocWithZone((Class)HKCloudSyncControl);
  v22 = v19;
  v23 = objc_msgSend(v21, "initWithHealthStore:", v20);
  v24 = String._bridgeToObjectiveC()();
  v25 = swift_allocObject(&unk_1000DD0C8, 32, 7);
  v26 = v32;
  *(_QWORD *)(v25 + 16) = v23;
  *(_QWORD *)(v25 + 24) = v26;
  aBlock[4] = (uint64_t)sub_100020338;
  v35 = v25;
  aBlock[0] = (uint64_t)_NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = (uint64_t)sub_10000666C;
  aBlock[3] = (uint64_t)&unk_1000DD0E0;
  v27 = _Block_copy(aBlock);
  v28 = v35;
  v29 = v23;
  swift_release(v28);
  objc_msgSend(v29, "syncWithRequest:reason:completion:", v22, v24, v27);
  _Block_release(v27);

}

uint64_t sub_10001FC60(char a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  NSObject *v13;
  os_log_type_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v7 = type metadata accessor for Logger(0);
  v8 = *(_QWORD *)(v7 - 8);
  result = __chkstk_darwin(v7);
  v11 = (char *)&v23 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((a1 & 1) == 0)
  {
    static Logger.general.getter(result);
    swift_errorRetain(a2);
    v12 = swift_errorRetain(a2);
    v13 = Logger.logObject.getter(v12);
    v14 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v13, v14))
    {
      v15 = swift_slowAlloc(22, -1);
      v24 = (uint64_t *)swift_slowAlloc(8, -1);
      v25 = swift_slowAlloc(32, -1);
      v27 = v25;
      *(_DWORD *)v15 = 136315394;
      v16 = _typeName(_:qualified:)(a4, 0);
      v18 = v17;
      v26 = sub_100012B20(v16, v17, &v27);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v26, &v27, v15 + 4, v15 + 12);
      swift_bridgeObjectRelease(v18);
      *(_WORD *)(v15 + 12) = 2112;
      if (a2)
      {
        swift_errorRetain(a2);
        v19 = _swift_stdlib_bridgeErrorToNSError(a2);
        v26 = v19;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v26, &v27, v15 + 14, v15 + 22);
      }
      else
      {
        v26 = 0;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v26, &v27, v15 + 14, v15 + 22);
        v19 = 0;
      }
      v20 = v24;
      *v24 = v19;
      swift_errorRelease(a2);
      swift_errorRelease(a2);
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "[%s] Failed to request cloud sync: %@", (uint8_t *)v15, 0x16u);
      sub_10001EC00(0);
      swift_arrayDestroy(v20, 1, v21);
      swift_slowDealloc(v20, -1, -1);
      v22 = v25;
      swift_arrayDestroy(v25, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v22, -1, -1);
      swift_slowDealloc(v15, -1, -1);
    }
    else
    {
      swift_errorRelease(a2);
      swift_errorRelease(a2);
    }

    return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v11, v7);
  }
  return result;
}

void sub_10001FEF4()
{
  _swift_stdlib_reportUnimplementedInitializer("Health.ManualTriggerDataSource", 30, "init(arrangedSections:identifier:)", 34, 0);
  __break(1u);
}

void sub_10001FF20()
{
  uint64_t v0;

}

uint64_t sub_10001FF30()
{
  uint64_t v0;

  v0 = MutableArrayDataSource.deinit();

  return swift_deallocClassInstance(v0, 24, 7);
}

uint64_t sub_10001FF6C()
{
  return type metadata accessor for ManualTriggerDataSource(0);
}

unint64_t sub_10001FF74@<X0>(uint64_t a1@<X3>, uint64_t *a2@<X8>)
{
  swift_getWitnessTable(&unk_1000B1728, a1);
  return sub_100020F30(a2);
}

uint64_t sub_10001FFE0(uint64_t a1, uint64_t a2)
{
  uint64_t WitnessTable;

  WitnessTable = swift_getWitnessTable(&unk_1000B1728, a2);
  return sub_100020F3C(a1, a2, WitnessTable);
}

uint64_t sub_100020030(uint64_t a1)
{
  uint64_t result;

  *(_QWORD *)(a1 + 8) = sub_100013198(&qword_1000ECBB8, type metadata accessor for ManualTriggerDataSource, (uint64_t)&unk_1000B16D0);
  result = sub_100013198(&qword_1000ECBC0, type metadata accessor for ManualTriggerDataSource, (uint64_t)&unk_1000B1700);
  *(_QWORD *)(a1 + 24) = result;
  return result;
}

uint64_t sub_10002008C(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  void *v17;
  void (*v18)(char *, uint64_t);
  Swift::String v19;
  Swift::String v20;
  uint64_t v21;
  char *v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD v34[2];

  v2 = v1;
  v4 = type metadata accessor for ArrayDataSourceSection(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)v34 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for UUID(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)v34 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)(v2 + qword_1000ECB60) = a1;
  v34[0] = 0;
  v34[1] = 0xE000000000000000;
  v12 = a1;
  _StringGuts.grow(_:)(16);
  swift_bridgeObjectRelease(v34[1]);
  strcpy((char *)v34, "MutableArray<");
  HIWORD(v34[1]) = -4864;
  v14 = UUID.init()(v13);
  v15 = UUID.uuidString.getter(v14);
  v17 = v16;
  v18 = *(void (**)(char *, uint64_t))(v9 + 8);
  v18(v11, v8);
  v19._countAndFlagsBits = v15;
  v19._object = v17;
  String.append(_:)(v19);
  swift_bridgeObjectRelease(v17);
  v20._countAndFlagsBits = 62;
  v20._object = (void *)0xE100000000000000;
  String.append(_:)(v20);
  v21 = MutableArrayDataSource.init(arrangedSections:identifier:)(_swiftEmptyArrayStorage, v34[0], v34[1]);
  swift_retain(v21);
  v22 = sub_10001F0C0(0);
  v23 = sub_1000A6048((uint64_t)v22);
  swift_bridgeObjectRelease(v22);
  v25 = UUID.init()(v24);
  v26 = UUID.uuidString.getter(v25);
  v28 = v27;
  v18(v11, v8);
  ArrayDataSourceSection.init(title:arrangedItems:identifier:)(0x54206C61756E614DLL, 0xEF73726567676972, v23, v26, v28);
  sub_1000076D8(0, &qword_1000ECA68, (uint64_t (*)(uint64_t))&type metadata accessor for ArrayDataSourceSection, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for _ContiguousArrayStorage);
  v29 = *(unsigned __int8 *)(v5 + 80);
  v30 = (v29 + 32) & ~v29;
  v32 = swift_allocObject(v31, v30 + *(_QWORD *)(v5 + 72), v29 | 7);
  *(_OWORD *)(v32 + 16) = xmmword_1000B11F0;
  (*(void (**)(uint64_t, char *, uint64_t))(v5 + 16))(v32 + v30, v7, v4);
  swift_retain(v21);
  dispatch thunk of MutableArrayDataSource.replaceAllSections(with:reconfigureOrReloadItemsIfNeeded:)(v32, 1);
  swift_bridgeObjectRelease(v32);
  swift_release_n(v21, 2);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  return v21;
}

uint64_t sub_100020314()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100020338(char a1, uint64_t a2)
{
  uint64_t v2;

  return sub_10001FC60(a1, a2, *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24));
}

uint64_t sub_100020340()
{
  uint64_t v0;

  swift_weakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100020364()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 25, 7);
}

uint64_t sub_100020388(uint64_t a1)
{
  uint64_t v1;

  return sub_10001F6A0(a1, *(_QWORD *)(v1 + 16), *(_BYTE *)(v1 + 24));
}

uint64_t type metadata accessor for ManualTriggerSelectionHandling(uint64_t a1)
{
  return sub_100006A08(a1, qword_1000ECC28, (uint64_t)&nominal type descriptor for ManualTriggerSelectionHandling);
}

void sub_1000203A8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  void *v7;
  void *v8;
  id v9;
  uint64_t v10;
  void *v11;
  id v12;
  void *v13;
  _QWORD aBlock[5];
  uint64_t v15;

  v1 = type metadata accessor for DateInterval(0);
  __chkstk_darwin(v1);
  v3 = (char *)aBlock - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_10001F0C0(1);
  v5 = sub_1000A6048(v4);
  swift_bridgeObjectRelease(v4);
  dispatch thunk of MutableArrayDataSource.replaceItemsForSection(at:newItems:reconfigureAndReloadItems:)(0, v5, 1);
  swift_bridgeObjectRelease(v5);
  if (qword_1000EC000 != -1)
    swift_once(&qword_1000EC000, sub_10001F090);
  objc_msgSend((id)qword_1000F0DC8, "setSuspended:", 1);
  v6 = swift_allocObject(&unk_1000DD118, 24, 7);
  swift_weakInit(v6 + 16, v0);
  aBlock[4] = sub_100020790;
  v15 = v6;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100006988;
  aBlock[3] = &unk_1000DD158;
  v7 = _Block_copy(aBlock);
  v8 = (void *)objc_opt_self(NSBlockOperation);
  swift_retain(v6);
  v9 = objc_msgSend(v8, "blockOperationWithBlock:", v7);
  _Block_release(v7);
  v10 = v15;
  swift_release(v6);
  swift_release(v10);
  v11 = (void *)qword_1000F0DC8;
  static DateInterval.allTimeInterval.getter(objc_msgSend((id)qword_1000F0DC8, "addOperation:", v9));
  v12 = objc_allocWithZone((Class)type metadata accessor for FeedItemGenerationOperation(0));
  v13 = (void *)FeedItemGenerationOperation.init(dateRange:)(v3);
  objc_msgSend(v11, "addOperation:", v13);
  objc_msgSend(v9, "addDependency:", v13);
  objc_msgSend(v11, "setSuspended:", 0);

}

void sub_1000205B4()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  void *v4;
  void *v5;
  id v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  id v10;
  void *v11;
  _QWORD v12[5];
  uint64_t v13;

  v1 = sub_10001F0C0(1);
  v2 = sub_1000A6048(v1);
  swift_bridgeObjectRelease(v1);
  dispatch thunk of MutableArrayDataSource.replaceItemsForSection(at:newItems:reconfigureAndReloadItems:)(0, v2, 1);
  swift_bridgeObjectRelease(v2);
  if (qword_1000EC000 != -1)
    swift_once(&qword_1000EC000, sub_10001F090);
  objc_msgSend((id)qword_1000F0DC8, "setSuspended:", 1);
  v3 = swift_allocObject(&unk_1000DD118, 24, 7);
  swift_weakInit(v3 + 16, v0);
  v12[4] = sub_100020790;
  v13 = v3;
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 1107296256;
  v12[2] = sub_100006988;
  v12[3] = &unk_1000DD1A8;
  v4 = _Block_copy(v12);
  v5 = (void *)objc_opt_self(NSBlockOperation);
  swift_retain(v3);
  v6 = objc_msgSend(v5, "blockOperationWithBlock:", v4);
  _Block_release(v4);
  v7 = v13;
  swift_release(v3);
  swift_release(v7);
  v8 = (void *)qword_1000F0DC8;
  v9 = static Feed.Kind.relevanceRankedFeeds.getter(objc_msgSend((id)qword_1000F0DC8, "addOperation:", v6));
  v10 = objc_allocWithZone((Class)type metadata accessor for PopulateDiscoverFeedOperation(0));
  v11 = (void *)PopulateDiscoverFeedOperation.init(feedKinds:)(v9);
  objc_msgSend(v6, "addDependency:", v11);
  objc_msgSend(v8, "addOperation:", v11);
  objc_msgSend(v8, "setSuspended:", 0);

}

uint64_t sub_100020790()
{
  uint64_t v0;

  return sub_10001F718(v0);
}

double sub_100020798()
{
  return sub_10001F940();
}

_QWORD *sub_1000207A0(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  int v4;
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  void (*v13)(char *, char *, uint64_t);

  v4 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  v5 = *a2;
  if ((v4 & 0x20000) != 0)
  {
    *a1 = v5;
    a1 = (_QWORD *)(v5 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain(v5);
  }
  else
  {
    v8 = a2[1];
    *a1 = v5;
    a1[1] = v8;
    v9 = *(int *)(a3 + 20);
    v10 = (char *)a1 + v9;
    v11 = (char *)a2 + v9;
    v12 = type metadata accessor for CellDeselectionBehavior(0);
    v13 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 16);
    swift_retain(v8);
    v13(v10, v11, v12);
    *((_BYTE *)a1 + *(int *)(a3 + 24)) = *((_BYTE *)a2 + *(int *)(a3 + 24));
  }
  return a1;
}

uint64_t sub_100020858(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  swift_release(*(_QWORD *)(a1 + 8));
  v4 = a1 + *(int *)(a2 + 20);
  v5 = type metadata accessor for CellDeselectionBehavior(0);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
}

_QWORD *sub_1000208A0(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  void (*v11)(char *, char *, uint64_t);

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  v7 = *(int *)(a3 + 20);
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = type metadata accessor for CellDeselectionBehavior(0);
  v11 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 16);
  swift_retain(v6);
  v11(v8, v9, v10);
  *((_BYTE *)a1 + *(int *)(a3 + 24)) = *((_BYTE *)a2 + *(int *)(a3 + 24));
  return a1;
}

_QWORD *sub_10002092C(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;

  v6 = a2[1];
  v7 = a1[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_retain(v6);
  swift_release(v7);
  v8 = *(int *)(a3 + 20);
  v9 = (char *)a1 + v8;
  v10 = (char *)a2 + v8;
  v11 = type metadata accessor for CellDeselectionBehavior(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 24))(v9, v10, v11);
  *((_BYTE *)a1 + *(int *)(a3 + 24)) = *((_BYTE *)a2 + *(int *)(a3 + 24));
  return a1;
}

_OWORD *sub_1000209B4(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;

  *a1 = *a2;
  v6 = *(int *)(a3 + 20);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for CellDeselectionBehavior(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v7, v8, v9);
  *((_BYTE *)a1 + *(int *)(a3 + 24)) = *((_BYTE *)a2 + *(int *)(a3 + 24));
  return a1;
}

uint64_t sub_100020A2C(uint64_t a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;

  v6 = *(_QWORD *)(a1 + 8);
  *(_OWORD *)a1 = *a2;
  swift_release(v6);
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = type metadata accessor for CellDeselectionBehavior(0);
  (*(void (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 40))(v8, v9, v10);
  *(_BYTE *)(a1 + *(int *)(a3 + 24)) = *((_BYTE *)a2 + *(int *)(a3 + 24));
  return a1;
}

uint64_t sub_100020AAC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100020AB8);
}

uint64_t sub_100020AB8(char *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)a1;
    if (*(_QWORD *)a1 >= 0xFFFFFFFFuLL)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for CellDeselectionBehavior(0);
    return (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(&a1[*(int *)(a3 + 20)], a2, v8);
  }
}

uint64_t sub_100020B34(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100020B40);
}

char *sub_100020B40(char *result, uint64_t a2, int a3, uint64_t a4)
{
  char *v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)result = (a2 - 1);
  }
  else
  {
    v7 = type metadata accessor for CellDeselectionBehavior(0);
    return (char *)(*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(&v5[*(int *)(a4 + 20)], a2, a2, v7);
  }
  return result;
}

uint64_t sub_100020BB4(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[3];

  v4[0] = (char *)&value witness table for () + 64;
  result = type metadata accessor for CellDeselectionBehavior(319);
  if (v3 <= 0x3F)
  {
    v4[1] = *(_QWORD *)(result - 8) + 64;
    v4[2] = &unk_1000B1770;
    swift_initStructMetadata(a1, 256, 3, v4, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t type metadata accessor for InternalSettingsViewController(uint64_t a1)
{
  uint64_t result;

  result = qword_1000ECC68;
  if (!qword_1000ECC68)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for InternalSettingsViewController);
  return result;
}

uint64_t sub_100020C88(uint64_t a1)
{
  _BYTE v2[8];

  return swift_initClassMetadata2(a1, 0, 0, v2, a1 + qword_1000F0DE0);
}

uint64_t sub_100020CC4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  unsigned int *v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v34;
  uint64_t v35;
  int v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD v43[5];

  v41 = a4;
  v42 = a5;
  v36 = a3;
  v40 = a6;
  v8 = a3 & 1;
  v9 = type metadata accessor for SectionedDataSourceContainerViewType(0);
  v38 = *(_QWORD *)(v9 - 8);
  v39 = v9;
  __chkstk_darwin(v9);
  v37 = (char *)&v34 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000076D8(0, &qword_1000ECA60, (uint64_t (*)(uint64_t))&type metadata accessor for UIBackgroundConfiguration, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
  __chkstk_darwin(v11);
  v13 = (char *)&v34 - v12;
  v14 = type metadata accessor for CellDeselectionBehavior(0);
  v15 = *(_QWORD *)(v14 - 8);
  __chkstk_darwin(v14);
  v17 = (char *)&v34 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = type metadata accessor for UUID(0);
  v19 = *(_QWORD *)(v18 - 8);
  v20 = __chkstk_darwin(v18);
  v22 = (char *)&v34 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = UUID.init()(v20);
  v24 = UUID.uuidString.getter(v23);
  v34 = v25;
  v35 = v24;
  (*(void (**)(char *, uint64_t))(v19 + 8))(v22, v18);
  v26 = sub_1000210CC(a1, a2, v8, v43);
  v28 = sub_1000211FC(v26, v27, v8);
  if ((v36 & 1) != 0)
  {
    *v17 = 1;
    v29 = (unsigned int *)&enum case for CellDeselectionBehavior.deselectOnDidSelect(_:);
  }
  else
  {
    v29 = (unsigned int *)&enum case for CellDeselectionBehavior.default(_:);
  }
  (*(void (**)(_BYTE *, _QWORD, uint64_t))(v15 + 104))(v17, *v29, v14);
  v30 = v42;
  swift_retain(v42);
  sub_100023A04(a1, a2);
  v31 = type metadata accessor for UIBackgroundConfiguration(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v31 - 8) + 56))(v13, 1, 1, v31);
  v32 = v37;
  (*(void (**)(char *, _QWORD, uint64_t))(v38 + 104))(v37, enum case for SectionedDataSourceContainerViewType.collectionView(_:), v39);
  ContentConfigurationItem.init(uniqueIdentifier:contentConfiguration:cellAccessories:cellSelectionHandler:deselectionBehavior:backgroundConfiguration:updateContentConfigurationHandler:container:automationIdentifier:)(v35, v34, v43, v28, v41, v30, v17, v13, 0, 0, v32, 0, 0);
  return swift_release(v30);
}

unint64_t sub_100020F30@<X0>(uint64_t *a1@<X8>)
{
  return sub_1000213FC((uint64_t (*)(uint64_t))&dispatch thunk of MutableArrayDataSource.arrangedSections.getter, a1);
}

uint64_t sub_100020F3C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v26 = a2;
  v23 = a1;
  v4 = type metadata accessor for ListLayoutConfiguration(0);
  v24 = *(_QWORD *)(v4 - 8);
  v25 = v4;
  __chkstk_darwin(v4);
  v6 = (char *)&v23 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for LayoutConfiguration(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)&v23 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000227D0();
  v12 = v11;
  v13 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v15 = (char *)&v23 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  dispatch thunk of SnapshotDataSource.snapshot.getter(v26, *(_QWORD *)(a3 + 16));
  v16 = NSDiffableDataSourceSnapshot.numberOfItems.getter(v12);
  v17 = (*(uint64_t (**)(char *, uint64_t))(v13 + 8))(v15, v12);
  if (v16)
  {
    v18 = static ListLayoutConfiguration.withHeader.getter(v17);
    v19 = CollectionViewLayoutContext.environment.getter(v18);
    v20 = ListLayoutConfiguration.layout(for:)(v19);
    swift_unknownObjectRelease(v19);
    (*(void (**)(char *, uint64_t))(v24 + 8))(v6, v25);
  }
  else
  {
    v21 = static LayoutConfiguration.empty.getter(v17);
    v20 = LayoutConfiguration.layoutSection.getter(v21);
    (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  }
  return v20;
}

uint64_t sub_1000210CC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, _QWORD *a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  void *v13;
  id v14;
  id v15;
  void (*v16)(_BYTE *, _QWORD);
  _QWORD *v17;
  _BYTE v19[32];

  v8 = type metadata accessor for UIListContentConfiguration(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = __chkstk_darwin(v8);
  v12 = &v19[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  static UIListContentConfiguration.cell()(v10);
  sub_1000239FC(a1, a2);
  UIListContentConfiguration.text.setter(a1, a2);
  v13 = (void *)objc_opt_self(UIColor);
  if ((a3 & 1) != 0)
    v14 = objc_msgSend(v13, "tintColor");
  else
    v14 = objc_msgSend(v13, "blackColor");
  v15 = v14;
  v16 = (void (*)(_BYTE *, _QWORD))UIListContentConfiguration.textProperties.modify(v19);
  UIListContentConfiguration.TextProperties.color.setter(v15);
  v16(v19, 0);
  a4[3] = v8;
  a4[4] = &protocol witness table for UIListContentConfiguration;
  v17 = sub_100007E0C(a4);
  return (*(uint64_t (**)(_QWORD *, _BYTE *, uint64_t))(v9 + 32))(v17, v12, v8);
}

_QWORD *sub_1000211FC(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;

  sub_1000076D8(0, &qword_1000ECCD8, (uint64_t (*)(uint64_t))&type metadata accessor for UICellAccessory.LayoutDimension, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
  __chkstk_darwin(v4);
  v6 = (char *)&v21 - v5;
  v7 = type metadata accessor for UICellAccessory.DisclosureIndicatorOptions(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)&v21 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for UICellAccessory.DisplayedState(0);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v14 = (char *)&v21 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((a3 & 1) != 0)
    return _swiftEmptyArrayStorage;
  sub_1000076D8(0, &qword_1000ECCE0, (uint64_t (*)(uint64_t))&type metadata accessor for UICellAccessory, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for _ContiguousArrayStorage);
  v16 = v15;
  v17 = type metadata accessor for UICellAccessory(0);
  v18 = swift_allocObject(v16, ((*(unsigned __int8 *)(*(_QWORD *)(v17 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v17 - 8) + 80))+ *(_QWORD *)(*(_QWORD *)(v17 - 8) + 72), *(unsigned __int8 *)(*(_QWORD *)(v17 - 8) + 80) | 7);
  *(_OWORD *)(v18 + 16) = xmmword_1000B11F0;
  (*(void (**)(char *, _QWORD, uint64_t))(v12 + 104))(v14, enum case for UICellAccessory.DisplayedState.always(_:), v11);
  v19 = type metadata accessor for UICellAccessory.LayoutDimension(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 56))(v6, 1, 1, v19);
  UICellAccessory.DisclosureIndicatorOptions.init(isHidden:reservedLayoutWidth:tintColor:)(2, v6, 0);
  static UICellAccessory.disclosureIndicator(displayed:options:)(v14, v10);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
  return (_QWORD *)v18;
}

unint64_t sub_1000213F0@<X0>(uint64_t *a1@<X8>)
{
  return sub_1000213FC((uint64_t (*)(uint64_t))&ArrayDataSource.arrangedSections.getter, a1);
}

unint64_t sub_1000213FC@<X0>(uint64_t (*a1)(uint64_t)@<X5>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  unint64_t result;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  Swift::String v17;
  uint64_t v18;
  id v19;
  void (*v20)(_BYTE *, _QWORD);
  uint64_t v21;
  uint64_t v22;
  _BYTE v23[32];

  v4 = type metadata accessor for UIListContentConfiguration(0);
  __chkstk_darwin(v4);
  v6 = &v23[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v7 = type metadata accessor for ArrayDataSourceSection(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = __chkstk_darwin(v7);
  v11 = &v23[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v12 = a1(v9);
  result = IndexPath.section.getter();
  if ((result & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_8;
  }
  if (result >= *(_QWORD *)(v12 + 16))
  {
LABEL_8:
    __break(1u);
    return result;
  }
  (*(void (**)(_BYTE *, unint64_t, uint64_t))(v8 + 16))(v11, v12+ ((*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80))+ *(_QWORD *)(v8 + 72) * result, v7);
  v14 = swift_bridgeObjectRelease(v12);
  ArrayDataSourceSection.title.getter(v14);
  v16 = v15;
  (*(void (**)(_BYTE *, uint64_t))(v8 + 8))(v11, v7);
  if (v16)
  {
    v17 = String.uppercased()();
    v18 = swift_bridgeObjectRelease(v16);
    static UIListContentConfiguration.groupedHeader()(v18);
    v19 = objc_msgSend((id)objc_opt_self(UIColor), "grayColor");
    v20 = (void (*)(_BYTE *, _QWORD))UIListContentConfiguration.textProperties.modify(v23);
    UIListContentConfiguration.TextProperties.color.setter(v19);
    v20(v23, 0);
    v21 = type metadata accessor for HeaderItem(0);
    swift_allocObject(v21, *(unsigned int *)(v21 + 48), *(unsigned __int16 *)(v21 + 52));
    v22 = HeaderItem.init(title:buttonText:buttonWasTapped:configuration:automationIdentifier:)(v17._countAndFlagsBits, v17._object, 0, 0, 0, 0, v6, 0, 0);
    a2[3] = v21;
    result = sub_100013198((unint64_t *)&unk_1000ED940, (uint64_t (*)(uint64_t))&type metadata accessor for HeaderItem, (uint64_t)&protocol conformance descriptor for HeaderItem);
    a2[4] = result;
    *a2 = v22;
  }
  else
  {
    a2[3] = type metadata accessor for FallbackHeaderItem(0);
    a2[4] = sub_100013198(&qword_1000ECCB8, (uint64_t (*)(uint64_t))&type metadata accessor for FallbackHeaderItem, (uint64_t)&protocol conformance descriptor for FallbackHeaderItem);
    sub_100007E0C(a2);
    return FallbackHeaderItem.init()();
  }
  return result;
}

void sub_100021650()
{
  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000025, 0x80000001000B8850, "Health/InternalSettingsViewController.swift", 43, 2, 116, 0);
  __break(1u);
}

void sub_1000216A8(void *a1)
{
  id v1;
  id v2;
  void *v3;
  id v4;
  objc_super v5;

  v5.receiver = a1;
  v5.super_class = (Class)type metadata accessor for InternalSettingsViewController(0);
  v1 = v5.receiver;
  objc_msgSendSuper2(&v5, "viewDidLoad");
  v2 = objc_msgSend(v1, "view", v5.receiver, v5.super_class);
  if (v2)
  {
    v3 = v2;
    v4 = objc_msgSend((id)objc_opt_self(UIColor), "systemGroupedBackgroundColor");
    objc_msgSend(v3, "setBackgroundColor:", v4);

    sub_100021768();
  }
  else
  {
    __break(1u);
  }
}

void sub_100021768()
{
  void *v0;
  id v1;
  NSString v2;
  id v3;
  id v4;
  id v5;

  v1 = objc_msgSend(v0, "navigationItem");
  v2 = String._bridgeToObjectiveC()();
  objc_msgSend(v1, "setTitle:", v2);

  v3 = objc_msgSend(v0, "navigationItem");
  objc_msgSend(v3, "setLargeTitleDisplayMode:", 2);

  v4 = objc_msgSend(v0, "navigationItem");
  v5 = objc_msgSend(objc_allocWithZone((Class)UIBarButtonItem), "initWithBarButtonSystemItem:target:action:", 0, v0, "doneButtonTapped");
  objc_msgSend(v4, "setRightBarButtonItem:", v5);

}

id sub_100021878(void *a1)
{
  return objc_msgSend(a1, "dismissViewControllerAnimated:completion:", 1, 0);
}

uint64_t sub_10002188C(void *a1, uint64_t a2, void *a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  id v11;
  id v12;
  Class isa;
  objc_class *v14;
  Class v15;
  objc_super v17;

  v7 = type metadata accessor for IndexPath(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)&v17 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  static IndexPath._unconditionallyBridgeFromObjectiveC(_:)(a4);
  v11 = a3;
  v12 = a1;
  isa = IndexPath._bridgeToObjectiveC()().super.isa;
  v14 = (objc_class *)type metadata accessor for InternalSettingsViewController(0);
  v17.receiver = v12;
  v17.super_class = v14;
  objc_msgSendSuper2(&v17, "collectionView:didSelectItemAtIndexPath:", v11, isa);

  v15 = IndexPath._bridgeToObjectiveC()().super.isa;
  objc_msgSend(v11, "deselectItemAtIndexPath:animated:", v15, 1);

  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, v7);
}

uint64_t sub_100021988@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;

  sub_100023A84(0);
  swift_allocObject(v2, *(unsigned int *)(v2 + 48), *(unsigned __int16 *)(v2 + 52));
  result = Future.init(_:)(sub_1000219D0, 0);
  *a1 = result;
  return result;
}

uint64_t sub_1000219D0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  _QWORD aBlock[5];
  uint64_t v28;

  v4 = type metadata accessor for DispatchWorkItemFlags(0);
  v25 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v6 = (char *)&v23 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = type metadata accessor for DispatchQoS(0);
  v7 = *(_QWORD *)(v24 - 8);
  __chkstk_darwin(v24);
  v9 = (char *)&v23 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for DispatchQoS.QoSClass(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = (char *)&v23 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = swift_allocObject(&unk_1000DD250, 32, 7);
  *(_QWORD *)(v14 + 16) = a1;
  *(_QWORD *)(v14 + 24) = a2;
  sub_100023BC8();
  (*(void (**)(char *, _QWORD, uint64_t))(v11 + 104))(v13, enum case for DispatchQoS.QoSClass.userInteractive(_:), v10);
  swift_retain(a2);
  v15 = (void *)static OS_dispatch_queue.global(qos:)(v13);
  (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  v16 = swift_allocObject(&unk_1000DD278, 32, 7);
  *(_QWORD *)(v16 + 16) = sub_100023CFC;
  *(_QWORD *)(v16 + 24) = v14;
  aBlock[4] = sub_100023D34;
  v28 = v16;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100006988;
  aBlock[3] = &unk_1000DD290;
  v17 = _Block_copy(aBlock);
  static DispatchQoS.unspecified.getter(v17);
  v26 = _swiftEmptyArrayStorage;
  v18 = sub_100013198((unint64_t *)&qword_1000EDBE0, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  sub_1000076D8(0, (unint64_t *)&qword_1000ED920, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Array);
  v20 = v19;
  v21 = sub_100013C8C();
  dispatch thunk of SetAlgebra.init<A>(_:)(&v26, v20, v21, v4, v18);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v9, v6, v17);
  _Block_release(v17);

  (*(void (**)(char *, uint64_t))(v25 + 8))(v6, v4);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v24);
  return swift_release(v28);
}

double sub_100021C60(void (*a1)(uint64_t, _QWORD), uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  NSString v35;
  id v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  id v47;
  void (*v48)(_BYTE *, _QWORD);
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  char *v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  char *v65;
  uint64_t v66;
  char *v67;
  __n128 v68;
  void (*v69)(char *, char *, uint64_t);
  char *v70;
  unint64_t v71;
  unint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  _QWORD *v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  double result;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  void (*v88)(uint64_t, _QWORD);
  __int128 v89;
  unsigned int v90;
  unsigned int v91;
  unsigned int v92;
  uint64_t v93;
  char *v94;
  char *v95;
  uint64_t v96;
  uint64_t v97;
  char *v98;
  uint64_t v99;
  uint64_t v100;
  char *v101;
  char *v102;
  uint64_t v103;
  uint64_t v104;
  char *v105;
  char *v106;
  uint64_t v107;
  uint64_t v108;
  char *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  id v117;
  uint64_t v118;
  char *v119;
  uint64_t v120;
  char *v121;
  _QWORD *v122;
  _BYTE v123[4];
  uint64_t v124[5];

  v87 = a2;
  v108 = type metadata accessor for SectionedDataSourceContainerViewType(0);
  v107 = *(_QWORD *)(v108 - 8);
  __chkstk_darwin(v108);
  v106 = (char *)&v85 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000076D8(0, &qword_1000ECA60, (uint64_t (*)(uint64_t))&type metadata accessor for UIBackgroundConfiguration, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
  __chkstk_darwin(v4);
  v105 = (char *)&v85 - v5;
  v104 = type metadata accessor for CellDeselectionBehavior(0);
  v103 = *(_QWORD *)(v104 - 8);
  __chkstk_darwin(v104);
  v102 = (char *)&v85 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000076D8(0, &qword_1000ECCD8, (uint64_t (*)(uint64_t))&type metadata accessor for UICellAccessory.LayoutDimension, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
  __chkstk_darwin(v7);
  v101 = (char *)&v85 - v8;
  v100 = type metadata accessor for UICellAccessory.DisclosureIndicatorOptions(0);
  v99 = *(_QWORD *)(v100 - 8);
  __chkstk_darwin(v100);
  v98 = (char *)&v85 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v97 = type metadata accessor for UICellAccessory.DisplayedState(0);
  v96 = *(_QWORD *)(v97 - 8);
  __chkstk_darwin(v97);
  v95 = (char *)&v85 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v111 = type metadata accessor for UUID(0);
  v110 = *(_QWORD *)(v111 - 8);
  __chkstk_darwin(v111);
  v109 = (char *)&v85 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000076D8(0, &qword_1000ECD48, (uint64_t (*)(uint64_t))&type metadata accessor for ContentConfigurationItem, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
  __chkstk_darwin(v12);
  v14 = (char *)&v85 - v13;
  v15 = type metadata accessor for ContentConfigurationItem(0);
  v16 = *(_QWORD *)(v15 - 8);
  v17 = __chkstk_darwin(v15);
  v121 = (char *)&v85 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  v119 = (char *)&v85 - v19;
  v120 = type metadata accessor for FoundationPluginBundleProvider(0);
  v20 = ((uint64_t (*)(void))static FoundationPluginBundleProvider.sharedInstance.getter)();
  v21 = 0;
  v22 = dispatch thunk of PluginBundleProvider.allPluginBundleNames()();
  swift_release(v20);
  v124[0] = v22;
  swift_bridgeObjectRetain(v22);
  sub_100022834(v124);
  v88 = a1;
  swift_bridgeObjectRelease(v22);
  v23 = *(_QWORD *)(v124[0] + 16);
  if (!v23)
  {
    swift_release(v124[0]);
    v24 = _swiftEmptyArrayStorage;
    goto LABEL_19;
  }
  v92 = enum case for UICellAccessory.DisplayedState.always(_:);
  v91 = enum case for CellDeselectionBehavior.default(_:);
  v90 = enum case for SectionedDataSourceContainerViewType.collectionView(_:);
  v24 = _swiftEmptyArrayStorage;
  v86 = swift_retain(v124[0]);
  v25 = (_QWORD *)(v86 + 40);
  v89 = xmmword_1000B11F0;
  v94 = v14;
  v93 = v15;
  v112 = v16;
  do
  {
    v122 = v24;
    v26 = *(v25 - 1);
    v27 = *v25;
    v28 = swift_bridgeObjectRetain_n(*v25, 2);
    v29 = static FoundationPluginBundleProvider.sharedInstance.getter(v28);
    v30 = dispatch thunk of PluginBundleProvider.loadPluginBundle(named:)(v26, v27);
    if (v21)
    {
      swift_release(v29);
      swift_bridgeObjectRelease(v27);
      swift_errorRelease(v21);
      v21 = 0;
LABEL_7:
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v16 + 56))(v14, 1, 1, v15);
      goto LABEL_10;
    }
    v31 = (void *)v30;
    swift_release(v29);
    v32 = sub_100023D3C(0, &qword_1000ECD50, (uint64_t)&protocol descriptor for PluginInternalSettingsProviding);
    NSBundle.getPluginAppDelegateObject<A>(as:)(v124, v32, v32);
    v33 = v124[0];
    if (!v124[0])
    {
      swift_bridgeObjectRelease(v27);

      v16 = v112;
      goto LABEL_7;
    }
    v34 = v124[1];
    v35 = String._bridgeToObjectiveC()();
    v36 = objc_msgSend(v35, "stringByDeletingPathExtension", swift_bridgeObjectRelease(v27).n128_f64[0]);

    v37 = static String._unconditionallyBridgeFromObjectiveC(_:)(v36);
    v117 = v31;
    v38 = v37;
    v40 = v39;

    v41 = swift_allocObject(&unk_1000DD2C8, 32, 7);
    v114 = v41;
    *(_QWORD *)(v41 + 16) = v33;
    *(_QWORD *)(v41 + 24) = v34;
    v42 = v109;
    v43 = UUID.init()(v41);
    v44 = UUID.uuidString.getter(v43);
    v115 = v45;
    v116 = v44;
    (*(void (**)(char *, uint64_t))(v110 + 8))(v42, v111);
    v124[3] = type metadata accessor for UIListContentConfiguration(0);
    v124[4] = (uint64_t)&protocol witness table for UIListContentConfiguration;
    v46 = sub_100007E0C(v124);
    static UIListContentConfiguration.cell()(v46);
    v113 = v40;
    swift_bridgeObjectRetain(v40);
    UIListContentConfiguration.text.setter(v38, v40);
    v47 = objc_msgSend((id)objc_opt_self(UIColor), "blackColor");
    v48 = (void (*)(_BYTE *, _QWORD))UIListContentConfiguration.textProperties.modify(v123);
    UIListContentConfiguration.TextProperties.color.setter(v47);
    v48(v123, 0);
    sub_1000076D8(0, &qword_1000ECCE0, (uint64_t (*)(uint64_t))&type metadata accessor for UICellAccessory, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for _ContiguousArrayStorage);
    v50 = v49;
    v51 = type metadata accessor for UICellAccessory(0);
    v52 = swift_allocObject(v50, ((*(unsigned __int8 *)(*(_QWORD *)(v51 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v51 - 8) + 80))+ *(_QWORD *)(*(_QWORD *)(v51 - 8) + 72), *(unsigned __int8 *)(*(_QWORD *)(v51 - 8) + 80) | 7);
    v118 = 0;
    v53 = v52;
    *(_OWORD *)(v52 + 16) = v89;
    v54 = v96;
    v55 = v95;
    v56 = v97;
    (*(void (**)(char *, _QWORD, uint64_t))(v96 + 104))(v95, v92, v97);
    v57 = type metadata accessor for UICellAccessory.LayoutDimension(0);
    v58 = v101;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v57 - 8) + 56))(v101, 1, 1, v57);
    v59 = v98;
    UICellAccessory.DisclosureIndicatorOptions.init(isHidden:reservedLayoutWidth:tintColor:)(2, v58, 0);
    static UICellAccessory.disclosureIndicator(displayed:options:)(v55, v59);
    (*(void (**)(char *, uint64_t))(v99 + 8))(v59, v100);
    v60 = v56;
    v14 = v94;
    (*(void (**)(char *, uint64_t))(v54 + 8))(v55, v60);
    v61 = v102;
    (*(void (**)(char *, _QWORD, uint64_t))(v103 + 104))(v102, v91, v104);
    v62 = v114;
    swift_retain(v114);
    swift_bridgeObjectRelease(v113);
    v63 = type metadata accessor for UIBackgroundConfiguration(0);
    v64 = v105;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v63 - 8) + 56))(v105, 1, 1, v63);
    v65 = v106;
    (*(void (**)(char *, _QWORD, uint64_t))(v107 + 104))(v106, v90, v108);
    v66 = v53;
    v21 = v118;
    v67 = v64;
    v15 = v93;
    ContentConfigurationItem.init(uniqueIdentifier:contentConfiguration:cellAccessories:cellSelectionHandler:deselectionBehavior:backgroundConfiguration:updateContentConfigurationHandler:container:automationIdentifier:)(v116, v115, v124, v66, sub_100023DA8, v62, v61, v67, 0, 0, v65, 0, 0);

    swift_release(v62);
    v16 = v112;
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v112 + 56))(v14, 0, 1, v15);
LABEL_10:
    v68 = swift_bridgeObjectRelease(v27);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t, __n128))(v16 + 48))(v14, 1, v15, v68) == 1)
    {
      sub_10001EDAC((uint64_t)v14, &qword_1000ECD48, (uint64_t (*)(uint64_t))&type metadata accessor for ContentConfigurationItem);
      v24 = v122;
    }
    else
    {
      v69 = *(void (**)(char *, char *, uint64_t))(v16 + 32);
      v70 = v119;
      v69(v119, v14, v15);
      v69(v121, v70, v15);
      v24 = v122;
      if ((swift_isUniquelyReferenced_nonNull_native(v122) & 1) == 0)
        v24 = (_QWORD *)sub_1000298A4(0, v24[2] + 1, 1, (unint64_t)v24);
      v72 = v24[2];
      v71 = v24[3];
      if (v72 >= v71 >> 1)
        v24 = (_QWORD *)sub_1000298A4(v71 > 1, v72 + 1, 1, (unint64_t)v24);
      v24[2] = v72 + 1;
      v69((char *)v24+ ((*(unsigned __int8 *)(v16 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80))+ *(_QWORD *)(v16 + 72) * v72, v121, v15);
    }
    v25 += 2;
    --v23;
  }
  while (v23);
  swift_release_n(v86, 2);
LABEL_19:
  sub_1000076D8(0, &qword_1000ECA68, (uint64_t (*)(uint64_t))&type metadata accessor for ArrayDataSourceSection, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for _ContiguousArrayStorage);
  v74 = v73;
  v75 = type metadata accessor for ArrayDataSourceSection(0);
  v76 = swift_allocObject(v74, ((*(unsigned __int8 *)(*(_QWORD *)(v75 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v75 - 8) + 80))+ *(_QWORD *)(*(_QWORD *)(v75 - 8) + 72), *(unsigned __int8 *)(*(_QWORD *)(v75 - 8) + 80) | 7);
  *(_OWORD *)(v76 + 16) = xmmword_1000B11F0;
  v77 = sub_1000A6048((uint64_t)v24);
  swift_bridgeObjectRelease(v24);
  v78 = v109;
  v80 = UUID.init()(v79);
  v81 = UUID.uuidString.getter(v80);
  v83 = v82;
  (*(void (**)(char *, uint64_t))(v110 + 8))(v78, v111);
  ArrayDataSourceSection.init(title:arrangedItems:identifier:)(0, 0, v77, v81, v83);
  v88(v76, 0);
  *(_QWORD *)&result = swift_bridgeObjectRelease(v76).n128_u64[0];
  return result;
}

uint64_t sub_100022690()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;

  v0 = type metadata accessor for ListLayoutConfiguration(0);
  v1 = *(_QWORD *)(v0 - 8);
  v2 = __chkstk_darwin(v0);
  v4 = (char *)&v9 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = static ListLayoutConfiguration.withHeader.getter(v2);
  v6 = CollectionViewLayoutContext.environment.getter(v5);
  v7 = ListLayoutConfiguration.layout(for:)();
  swift_unknownObjectRelease(v6);
  (*(void (**)(char *, uint64_t))(v1 + 8))(v4, v0);
  return v7;
}

void sub_100022738()
{
  _swift_stdlib_reportUnimplementedInitializer("Health.InternalSettingsViewController", 37, "init(dataSource:)", 17, 0);
  __break(1u);
}

void sub_100022764(uint64_t a1, uint64_t a2, void *a3)
{
  id v3;

  v3 = a3;
  _swift_stdlib_reportUnimplementedInitializer("Health.InternalSettingsViewController", 37, "init(collectionViewLayout:)", 27, 0);
  __break(1u);
}

id sub_100022794()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for InternalSettingsViewController(0);
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t sub_1000227C8()
{
  return type metadata accessor for InternalSettingsViewController(0);
}

void sub_1000227D0()
{
  unint64_t v0;
  uint64_t v1;
  _QWORD v2[4];

  if (!qword_1000ECCC0)
  {
    v2[0] = &type metadata for String;
    v2[1] = &type metadata for String;
    v2[2] = &protocol witness table for String;
    v2[3] = &protocol witness table for String;
    v0 = type metadata accessor for NSDiffableDataSourceSnapshot(0, v2);
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1000ECCC0);
  }
}

void sub_100022834(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4[2];

  v2 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native(*a1) & 1) == 0)
    v2 = sub_100079ED4(v2);
  v3 = *(_QWORD *)(v2 + 16);
  v4[0] = v2 + 32;
  v4[1] = v3;
  sub_10002289C(v4);
  *a1 = v2;
}

void sub_10002289C(uint64_t *a1)
{
  uint64_t v1;
  Swift::Int v3;
  Swift::Int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  Swift::Int v9;
  uint64_t v10;
  char *v11;
  unint64_t v12;
  Swift::Int v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  int v20;
  Swift::Int v21;
  uint64_t *v22;
  Swift::Int v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  Swift::Int v31;
  Swift::Int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  Swift::Int v36;
  _QWORD *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  Swift::Int v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;
  BOOL v45;
  unint64_t v46;
  unint64_t v47;
  char *v48;
  char *v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  BOOL v61;
  unint64_t v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  BOOL v71;
  uint64_t v72;
  char v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  BOOL v78;
  uint64_t v79;
  uint64_t v80;
  char *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  unint64_t v89;
  uint64_t v90;
  char *v91;
  char *v92;
  uint64_t v93;
  char *v94;
  unint64_t v95;
  char *v96;
  uint64_t v97;
  uint64_t v98;
  unint64_t v99;
  char *v100;
  char *v101;
  uint64_t v102;
  unint64_t v103;
  uint64_t v104;
  uint64_t v105;
  char *v106;
  unint64_t v107;
  uint64_t *v108;
  uint64_t v109;
  _QWORD *v110;
  Swift::Int v111;
  Swift::Int v112;
  Swift::Int v113;
  char *__dst;

  v3 = a1[1];
  v4 = _minimumMergeRunLength(_:)(v3);
  if (v4 >= v3)
  {
    if ((v3 & 0x8000000000000000) == 0)
    {
      if (v3)
        sub_100022F84(0, v3, 1, a1);
      return;
    }
    goto LABEL_154;
  }
  if (v3 >= 0)
    v5 = v3;
  else
    v5 = v3 + 1;
  if (v3 < -1)
  {
LABEL_162:
    _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Can't construct Array with count < 0", 36, 2, "Swift/Array.swift", 17, 2, 936, 0);
    __break(1u);
    return;
  }
  v111 = v4;
  v108 = a1;
  if (v3 < 2)
  {
    v8 = _swiftEmptyArrayStorage;
    __dst = (char *)&_swiftEmptyArrayStorage[4];
    if (v3 != 1)
    {
      v12 = _swiftEmptyArrayStorage[2];
      v11 = (char *)_swiftEmptyArrayStorage;
LABEL_120:
      v101 = v11;
      v110 = v8;
      if (v12 < 2)
        goto LABEL_117;
      v102 = *v108;
      while (1)
      {
        v103 = v12 - 2;
        if (v12 < 2)
          goto LABEL_149;
        if (!v102)
          goto LABEL_161;
        v100 = v101;
        v104 = *(_QWORD *)&v101[16 * v103 + 32];
        v105 = *(_QWORD *)&v101[16 * v12 + 24];
        sub_100023050((char *)(v102 + 16 * v104), (char *)(v102 + 16 * *(_QWORD *)&v101[16 * v12 + 16]), v102 + 16 * v105, __dst);
        if (v1)
          goto LABEL_116;
        if (v105 < v104)
          goto LABEL_150;
        if ((swift_isUniquelyReferenced_nonNull_native(v100) & 1) == 0)
          v100 = sub_100079EC0((uint64_t)v100);
        if (v103 >= *((_QWORD *)v100 + 2))
          goto LABEL_151;
        v106 = &v100[16 * v103 + 32];
        *(_QWORD *)v106 = v104;
        *((_QWORD *)v106 + 1) = v105;
        v107 = *((_QWORD *)v100 + 2);
        if (v12 > v107)
          goto LABEL_152;
        memmove(&v100[16 * v12 + 16], &v100[16 * v12 + 32], 16 * (v107 - v12));
        v101 = v100;
        *((_QWORD *)v100 + 2) = v107 - 1;
        v12 = v107 - 1;
        if (v107 <= 2)
          goto LABEL_117;
      }
    }
    v110 = _swiftEmptyArrayStorage;
  }
  else
  {
    v6 = v5 >> 1;
    v7 = static Array._allocateBufferUninitialized(minimumCapacity:)(v5 >> 1, &type metadata for String);
    *(_QWORD *)(v7 + 16) = v6;
    v110 = (_QWORD *)v7;
    __dst = (char *)(v7 + 32);
  }
  v9 = 0;
  v10 = *a1;
  v109 = v10 + 8;
  v11 = (char *)_swiftEmptyArrayStorage;
  v112 = v3;
  while (1)
  {
    v13 = v9++;
    if (v9 >= v3)
      goto LABEL_46;
    v14 = (uint64_t *)(v10 + 16 * v9);
    v15 = *v14;
    v16 = v14[1];
    v17 = (_QWORD *)(v10 + 16 * v13);
    v18 = v17[1];
    if (v15 == *v17 && v16 == v18)
    {
      v21 = v13 + 2;
      if (v13 + 2 >= v3)
        goto LABEL_45;
      v20 = 0;
    }
    else
    {
      v20 = _stringCompareWithSmolCheck(_:_:expecting:)(v15, v16, *v17, v18, 1);
      v21 = v13 + 2;
      if (v13 + 2 >= v3)
        goto LABEL_36;
    }
    v22 = (uint64_t *)(v109 + 16 * v21);
    do
    {
      v24 = *(v22 - 1);
      v25 = *v22;
      v26 = (_QWORD *)(v10 + 16 * v9);
      v27 = v26[1];
      if (v24 == *v26 && v25 == v27)
      {
        if ((v20 & 1) != 0)
          goto LABEL_37;
      }
      else if (((v20 ^ _stringCompareWithSmolCheck(_:_:expecting:)(v24, v25, *v26, v27, 1)) & 1) != 0)
      {
        goto LABEL_36;
      }
      v22 += 2;
      v23 = v21 + 1;
      v9 = v21;
      v21 = v23;
    }
    while (v23 < v3);
    v21 = v23;
LABEL_36:
    v9 = v21;
    if ((v20 & 1) != 0)
    {
LABEL_37:
      if (v21 < v13)
        goto LABEL_157;
      if (v13 < v21)
      {
        v29 = 16 * v21;
        v30 = 16 * v13;
        v31 = v21;
        v32 = v13;
        do
        {
          if (v32 != --v31)
          {
            if (!v10)
              goto LABEL_160;
            v33 = v10 + v29;
            v34 = *(_QWORD *)(v10 + v30);
            v35 = *(_QWORD *)(v10 + v30 + 8);
            *(_OWORD *)(v10 + v30) = *(_OWORD *)(v10 + v29 - 16);
            *(_QWORD *)(v33 - 16) = v34;
            *(_QWORD *)(v33 - 8) = v35;
          }
          ++v32;
          v29 -= 16;
          v30 += 16;
        }
        while (v32 < v31);
      }
LABEL_45:
      v9 = v21;
    }
LABEL_46:
    if (v9 < v3)
    {
      if (__OFSUB__(v9, v13))
        goto LABEL_153;
      if (v9 - v13 < v111)
      {
        if (__OFADD__(v13, v111))
          goto LABEL_155;
        if (v13 + v111 >= v3)
          v36 = v3;
        else
          v36 = v13 + v111;
        if (v36 < v13)
          goto LABEL_156;
        if (v9 != v36)
        {
          v37 = (_QWORD *)(v10 + 16 * v9);
          do
          {
            v38 = (uint64_t *)(v10 + 16 * v9);
            v39 = *v38;
            v40 = v38[1];
            v41 = v13;
            v42 = v37;
            do
            {
              v43 = *(v42 - 2);
              v44 = *(v42 - 1);
              v45 = v39 == v43 && v40 == v44;
              if (v45 || (_stringCompareWithSmolCheck(_:_:expecting:)(v39, v40, v43, v44, 1) & 1) == 0)
                break;
              if (!v10)
                goto LABEL_158;
              v39 = *v42;
              v40 = v42[1];
              *(_OWORD *)v42 = *((_OWORD *)v42 - 1);
              *(v42 - 1) = v40;
              *(v42 - 2) = v39;
              v42 -= 2;
              ++v41;
            }
            while (v9 != v41);
            ++v9;
            v37 += 2;
          }
          while (v9 != v36);
          v9 = v36;
        }
      }
    }
    if (v9 < v13)
    {
LABEL_148:
      __break(1u);
LABEL_149:
      __break(1u);
LABEL_150:
      __break(1u);
LABEL_151:
      __break(1u);
LABEL_152:
      __break(1u);
LABEL_153:
      __break(1u);
LABEL_154:
      __break(1u);
LABEL_155:
      __break(1u);
LABEL_156:
      __break(1u);
LABEL_157:
      __break(1u);
LABEL_158:
      __break(1u);
LABEL_159:
      __break(1u);
LABEL_160:
      __break(1u);
LABEL_161:
      __break(1u);
      goto LABEL_162;
    }
    if ((swift_isUniquelyReferenced_nonNull_native(v11) & 1) == 0)
      v11 = sub_100079C78(0, *((_QWORD *)v11 + 2) + 1, 1, v11);
    v47 = *((_QWORD *)v11 + 2);
    v46 = *((_QWORD *)v11 + 3);
    v12 = v47 + 1;
    if (v47 >= v46 >> 1)
      v11 = sub_100079C78((char *)(v46 > 1), v47 + 1, 1, v11);
    *((_QWORD *)v11 + 2) = v12;
    v48 = v11 + 32;
    v49 = &v11[16 * v47 + 32];
    *(_QWORD *)v49 = v13;
    *((_QWORD *)v49 + 1) = v9;
    if (v47)
      break;
    v12 = 1;
LABEL_15:
    v3 = v112;
    if (v9 >= v112)
    {
      v8 = v110;
      goto LABEL_120;
    }
  }
  v113 = v9;
  while (1)
  {
    v50 = v12 - 1;
    if (v12 >= 4)
    {
      v55 = &v48[16 * v12];
      v56 = *((_QWORD *)v55 - 8);
      v57 = *((_QWORD *)v55 - 7);
      v61 = __OFSUB__(v57, v56);
      v58 = v57 - v56;
      if (v61)
        goto LABEL_137;
      v60 = *((_QWORD *)v55 - 6);
      v59 = *((_QWORD *)v55 - 5);
      v61 = __OFSUB__(v59, v60);
      v53 = v59 - v60;
      v54 = v61;
      if (v61)
        goto LABEL_138;
      v62 = v12 - 2;
      v63 = &v48[16 * v12 - 32];
      v65 = *(_QWORD *)v63;
      v64 = *((_QWORD *)v63 + 1);
      v61 = __OFSUB__(v64, v65);
      v66 = v64 - v65;
      if (v61)
        goto LABEL_140;
      v61 = __OFADD__(v53, v66);
      v67 = v53 + v66;
      if (v61)
        goto LABEL_143;
      if (v67 >= v58)
      {
        v85 = &v48[16 * v50];
        v87 = *(_QWORD *)v85;
        v86 = *((_QWORD *)v85 + 1);
        v61 = __OFSUB__(v86, v87);
        v88 = v86 - v87;
        if (v61)
          goto LABEL_147;
        v78 = v53 < v88;
        goto LABEL_105;
      }
    }
    else
    {
      if (v12 != 3)
      {
        v79 = *((_QWORD *)v11 + 4);
        v80 = *((_QWORD *)v11 + 5);
        v61 = __OFSUB__(v80, v79);
        v72 = v80 - v79;
        v73 = v61;
        goto LABEL_99;
      }
      v52 = *((_QWORD *)v11 + 4);
      v51 = *((_QWORD *)v11 + 5);
      v61 = __OFSUB__(v51, v52);
      v53 = v51 - v52;
      v54 = v61;
    }
    if ((v54 & 1) != 0)
      goto LABEL_139;
    v62 = v12 - 2;
    v68 = &v48[16 * v12 - 32];
    v70 = *(_QWORD *)v68;
    v69 = *((_QWORD *)v68 + 1);
    v71 = __OFSUB__(v69, v70);
    v72 = v69 - v70;
    v73 = v71;
    if (v71)
      goto LABEL_142;
    v74 = &v48[16 * v50];
    v76 = *(_QWORD *)v74;
    v75 = *((_QWORD *)v74 + 1);
    v61 = __OFSUB__(v75, v76);
    v77 = v75 - v76;
    if (v61)
      goto LABEL_145;
    if (__OFADD__(v72, v77))
      goto LABEL_146;
    if (v72 + v77 >= v53)
    {
      v78 = v53 < v77;
LABEL_105:
      if (v78)
        v50 = v62;
      goto LABEL_107;
    }
LABEL_99:
    if ((v73 & 1) != 0)
      goto LABEL_141;
    v81 = &v48[16 * v50];
    v83 = *(_QWORD *)v81;
    v82 = *((_QWORD *)v81 + 1);
    v61 = __OFSUB__(v82, v83);
    v84 = v82 - v83;
    if (v61)
      goto LABEL_144;
    if (v84 < v72)
      goto LABEL_15;
LABEL_107:
    v89 = v50 - 1;
    if (v50 - 1 >= v12)
    {
      __break(1u);
LABEL_134:
      __break(1u);
LABEL_135:
      __break(1u);
LABEL_136:
      __break(1u);
LABEL_137:
      __break(1u);
LABEL_138:
      __break(1u);
LABEL_139:
      __break(1u);
LABEL_140:
      __break(1u);
LABEL_141:
      __break(1u);
LABEL_142:
      __break(1u);
LABEL_143:
      __break(1u);
LABEL_144:
      __break(1u);
LABEL_145:
      __break(1u);
LABEL_146:
      __break(1u);
LABEL_147:
      __break(1u);
      goto LABEL_148;
    }
    v90 = v10;
    if (!v10)
      goto LABEL_159;
    v91 = v11;
    v92 = &v48[16 * v89];
    v93 = *(_QWORD *)v92;
    v94 = v48;
    v95 = v50;
    v96 = &v48[16 * v50];
    v97 = *((_QWORD *)v96 + 1);
    v98 = v90;
    sub_100023050((char *)(v90 + 16 * *(_QWORD *)v92), (char *)(v90 + 16 * *(_QWORD *)v96), v90 + 16 * v97, __dst);
    if (v1)
      break;
    if (v97 < v93)
      goto LABEL_134;
    if (v95 > *((_QWORD *)v91 + 2))
      goto LABEL_135;
    *(_QWORD *)v92 = v93;
    *(_QWORD *)&v94[16 * v89 + 8] = v97;
    v99 = *((_QWORD *)v91 + 2);
    if (v95 >= v99)
      goto LABEL_136;
    v11 = v91;
    v12 = v99 - 1;
    memmove(v96, v96 + 16, 16 * (v99 - 1 - v95));
    v48 = v94;
    *((_QWORD *)v91 + 2) = v99 - 1;
    v10 = v98;
    v9 = v113;
    if (v99 <= 2)
      goto LABEL_15;
  }
  v100 = v91;
LABEL_116:
  v101 = v100;
LABEL_117:
  swift_bridgeObjectRelease(v101);
  v110[2] = 0;
  swift_bridgeObjectRelease(v110);
}

uint64_t sub_100022F84(uint64_t result, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;

  if (a3 != a2)
  {
    v4 = a3;
    v6 = result;
    v7 = *a4;
    v8 = *a4 + 16 * a3;
LABEL_5:
    v9 = (uint64_t *)(v7 + 16 * v4);
    result = *v9;
    v10 = v9[1];
    v11 = v6;
    v12 = (uint64_t *)v8;
    while (1)
    {
      v13 = *(v12 - 2);
      v14 = *(v12 - 1);
      v15 = result == v13 && v10 == v14;
      if (v15 || (result = _stringCompareWithSmolCheck(_:_:expecting:)(result, v10, v13, v14, 1), (result & 1) == 0))
      {
LABEL_4:
        ++v4;
        v8 += 16;
        if (v4 == a2)
          return result;
        goto LABEL_5;
      }
      if (!v7)
        break;
      result = *v12;
      v10 = v12[1];
      *(_OWORD *)v12 = *((_OWORD *)v12 - 1);
      *(v12 - 1) = v10;
      *(v12 - 2) = result;
      v12 -= 2;
      if (v4 == ++v11)
        goto LABEL_4;
    }
    __break(1u);
  }
  return result;
}

uint64_t sub_100023050(char *__src, char *a2, unint64_t a3, char *__dst)
{
  char *v4;
  char *v6;
  char *v7;
  int64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  BOOL v17;
  char *v18;
  char *v19;
  char *v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  BOOL v27;
  uint64_t result;
  char *v29;
  char *v30;
  char *v31;

  v4 = __dst;
  v6 = a2;
  v7 = __src;
  v8 = a2 - __src;
  v9 = a2 - __src + 15;
  if (a2 - __src >= 0)
    v9 = a2 - __src;
  v10 = v9 >> 4;
  v11 = a3 - (_QWORD)a2;
  v12 = a3 - (_QWORD)a2 + 15;
  if ((uint64_t)(a3 - (_QWORD)a2) >= 0)
    v12 = a3 - (_QWORD)a2;
  v13 = v12 >> 4;
  v31 = __src;
  v30 = __dst;
  if (v10 >= v12 >> 4)
  {
    if (v11 >= -15)
    {
      if (__dst != a2 || &a2[16 * v13] <= __dst)
        memmove(__dst, a2, 16 * v13);
      v19 = &v4[16 * v13];
      v29 = v19;
      v31 = v6;
      if (v7 < v6 && v11 >= 16)
      {
        v20 = (char *)(a3 - 16);
        v21 = v6;
        while (1)
        {
          v22 = v20 + 16;
          v23 = *((_QWORD *)v19 - 2);
          v24 = *((_QWORD *)v19 - 1);
          v25 = *((_QWORD *)v21 - 2);
          v26 = *((_QWORD *)v21 - 1);
          v21 -= 16;
          v27 = v23 == v25 && v24 == v26;
          if (v27 || (_stringCompareWithSmolCheck(_:_:expecting:)(v23, v24, v25, v26, 1) & 1) == 0)
          {
            v29 = v19 - 16;
            if (v22 < v19 || v20 >= v19 || v22 != v19)
              *(_OWORD *)v20 = *((_OWORD *)v19 - 1);
            v21 = v6;
            v19 -= 16;
            if (v6 <= v7)
              goto LABEL_50;
          }
          else
          {
            if (v22 != v6 || v20 >= v6)
              *(_OWORD *)v20 = *(_OWORD *)v21;
            v31 = v21;
            if (v21 <= v7)
              goto LABEL_50;
          }
          v20 -= 16;
          v6 = v21;
          if (v19 <= v4)
            goto LABEL_50;
        }
      }
      goto LABEL_50;
    }
  }
  else if (v8 >= -15)
  {
    if (__dst != __src || &__src[16 * v10] <= __dst)
      memmove(__dst, __src, 16 * v10);
    v14 = &v4[16 * v10];
    v29 = v14;
    if ((unint64_t)v6 < a3 && v8 >= 16)
    {
      do
      {
        v15 = *((_QWORD *)v6 + 1);
        v16 = *((_QWORD *)v4 + 1);
        v17 = *(_QWORD *)v6 == *(_QWORD *)v4 && v15 == v16;
        if (v17 || (_stringCompareWithSmolCheck(_:_:expecting:)(*(_QWORD *)v6, v15, *(_QWORD *)v4, v16, 1) & 1) == 0)
        {
          if (v7 != v4)
            *(_OWORD *)v7 = *(_OWORD *)v4;
          v4 += 16;
          v30 = v4;
          v18 = v6;
        }
        else
        {
          v18 = v6 + 16;
          if (v7 < v6 || v7 >= v18 || v7 != v6)
            *(_OWORD *)v7 = *(_OWORD *)v6;
        }
        v7 += 16;
        if (v4 >= v14)
          break;
        v6 = v18;
      }
      while ((unint64_t)v18 < a3);
      v31 = v7;
    }
LABEL_50:
    sub_100079D70((void **)&v31, (const void **)&v30, &v29);
    return 1;
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, 2, 1046, 0);
  __break(1u);
  return result;
}

uint64_t sub_1000232E8()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  id v26;
  void (*v27)(id *, _QWORD);
  uint64_t v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  id v38[5];

  v0 = type metadata accessor for UIListContentConfiguration(0);
  __chkstk_darwin(v0);
  v2 = (char *)&v38[-1] - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000076D8(0, &qword_1000EF4E0, (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.SchedulerOptions, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
  __chkstk_darwin(v3);
  v5 = (char *)&v38[-1] - v4;
  sub_100023A0C(0);
  v7 = v6;
  v8 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v10 = (char *)&v38[-1] - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100023B00(0);
  v12 = v11;
  v13 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v15 = (char *)&v38[-1] - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100023A84(0);
  v17 = v16;
  v18 = sub_100013198(&qword_1000ECD00, (uint64_t (*)(uint64_t))sub_100023A84, (uint64_t)&protocol conformance descriptor for Future<A, B>);
  Deferred.init(createPublisher:)(sub_100021988, 0, v17, v18);
  v19 = sub_100023BC8();
  v38[0] = (id)static OS_dispatch_queue.main.getter();
  v20 = type metadata accessor for OS_dispatch_queue.SchedulerOptions(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 56))(v5, 1, 1, v20);
  v21 = sub_100013198(&qword_1000ECD10, (uint64_t (*)(uint64_t))sub_100023A0C, (uint64_t)&protocol conformance descriptor for Deferred<A>);
  v22 = sub_100013198((unint64_t *)&qword_1000ECD18, (uint64_t (*)(uint64_t))sub_100023BC8, (uint64_t)&protocol conformance descriptor for OS_dispatch_queue);
  Publisher.receive<A>(on:options:)(v38, v5, v7, v19, v21, v22);
  sub_10001EDAC((uint64_t)v5, &qword_1000EF4E0, (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.SchedulerOptions);

  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  v23 = sub_100013198(&qword_1000ECD20, (uint64_t (*)(uint64_t))sub_100023B00, (uint64_t)&protocol conformance descriptor for Publishers.ReceiveOn<A, B>);
  v24 = Publisher<>.asDataSource()(v12, v23);
  v25 = (*(uint64_t (**)(char *, uint64_t))(v13 + 8))(v15, v12);
  static UIListContentConfiguration.groupedHeader()(v25);
  v26 = objc_msgSend((id)objc_opt_self(UIColor), "grayColor");
  v27 = (void (*)(id *, _QWORD))UIListContentConfiguration.textProperties.modify(v38);
  UIListContentConfiguration.TextProperties.color.setter(v26);
  v27(v38, 0);
  v28 = type metadata accessor for HeaderItem(0);
  swift_allocObject(v28, *(unsigned int *)(v28 + 48), *(unsigned __int16 *)(v28 + 52));
  v29 = (void *)HeaderItem.init(title:buttonText:buttonWasTapped:configuration:automationIdentifier:)(0x534E4947554C50, 0xE700000000000000, 0, 0, 0, 0, v2, 0, 0);
  v38[3] = (id)v28;
  v38[4] = (id)sub_100013198((unint64_t *)&unk_1000ED940, (uint64_t (*)(uint64_t))&type metadata accessor for HeaderItem, (uint64_t)&protocol conformance descriptor for HeaderItem);
  v38[0] = v29;
  v30 = type metadata accessor for SectionsPublisherDataSource(0);
  v31 = SnapshotDataSource.withSupplementaryItem(_:)(v38, v30, &protocol witness table for SectionsPublisherDataSource);
  swift_release(v24);
  _s6Health23OpenSleepScheduleIntentVwxx_0(v38);
  sub_100023C04(0);
  v33 = v32;
  v34 = sub_100013198(&qword_1000ECD30, (uint64_t (*)(uint64_t))sub_100023C04, (uint64_t)&protocol conformance descriptor for Supplementary<A>);
  v35 = SnapshotDataSource.withLayoutSectionProvider(collapseEmptySections:_:)(0, sub_100022690, 0, v33, v34);
  swift_release(v31);
  sub_100013198(&qword_1000ECD38, (uint64_t (*)(uint64_t))sub_100023C60, (uint64_t)&protocol conformance descriptor for DataSourceWithLayout<A>);
  return v35;
}

uint64_t sub_1000236E4(void *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  sub_100023998(0);
  v3 = swift_allocObject(v2, 304, 7);
  *(_OWORD *)(v3 + 16) = xmmword_1000B17E0;
  v4 = type metadata accessor for ManualTriggerDataSource(0);
  swift_allocObject(v4, *(unsigned int *)(v4 + 48), *(unsigned __int16 *)(v4 + 52));
  v5 = a1;
  v6 = sub_10002008C(v5);

  *(_QWORD *)(v3 + 32) = v6;
  *(_QWORD *)(v3 + 40) = &protocol witness table for MutableArrayDataSource;
  *(_QWORD *)(v3 + 48) = sub_1000232E8();
  *(_QWORD *)(v3 + 56) = v7;
  v8 = type metadata accessor for ImportExportDataSource(0);
  swift_allocObject(v8, *(unsigned int *)(v8 + 48), *(unsigned __int16 *)(v8 + 52));
  v9 = v5;
  v10 = sub_10001DE20(v9);

  *(_QWORD *)(v3 + 64) = v10;
  *(_QWORD *)(v3 + 72) = &protocol witness table for MutableArrayDataSource;
  v11 = type metadata accessor for AllFeedItemsDataSource(0);
  swift_allocObject(v11, *(unsigned int *)(v11 + 48), *(unsigned __int16 *)(v11 + 52));
  *(_QWORD *)(v3 + 80) = sub_1000A723C();
  *(_QWORD *)(v3 + 88) = &protocol witness table for ArrayDataSource;
  v12 = type metadata accessor for ProfileDataSource(0);
  swift_allocObject(v12, *(unsigned int *)(v12 + 48), *(unsigned __int16 *)(v12 + 52));
  *(_QWORD *)(v3 + 96) = sub_10007662C();
  *(_QWORD *)(v3 + 104) = &protocol witness table for ArrayDataSource;
  v13 = type metadata accessor for FeatureAvailabilityDataSource(0);
  swift_allocObject(v13, *(unsigned int *)(v13 + 48), *(unsigned __int16 *)(v13 + 52));
  *(_QWORD *)(v3 + 112) = sub_10006C8EC();
  *(_QWORD *)(v3 + 120) = &protocol witness table for ArrayDataSource;
  v14 = type metadata accessor for BuddyDataSource(0);
  swift_allocObject(v14, *(unsigned int *)(v14 + 48), *(unsigned __int16 *)(v14 + 52));
  *(_QWORD *)(v3 + 128) = sub_1000821BC();
  *(_QWORD *)(v3 + 136) = &protocol witness table for MutableArrayDataSource;
  v15 = type metadata accessor for InternalNotificationsDataSource(0);
  swift_allocObject(v15, *(unsigned int *)(v15 + 48), *(unsigned __int16 *)(v15 + 52));
  *(_QWORD *)(v3 + 144) = sub_100083DC8();
  *(_QWORD *)(v3 + 152) = &protocol witness table for ArrayDataSource;
  v16 = type metadata accessor for PersistenceDataSource(0);
  swift_allocObject(v16, *(unsigned int *)(v16 + 48), *(unsigned __int16 *)(v16 + 52));
  *(_QWORD *)(v3 + 160) = sub_100027DFC();
  *(_QWORD *)(v3 + 168) = &protocol witness table for ArrayDataSource;
  v17 = type metadata accessor for MiscellaneousItemsDataSource(0);
  swift_allocObject(v17, *(unsigned int *)(v17 + 48), *(unsigned __int16 *)(v17 + 52));
  *(_QWORD *)(v3 + 176) = sub_10004A944();
  *(_QWORD *)(v3 + 184) = &protocol witness table for ArrayDataSource;
  v18 = type metadata accessor for UserDefaultsDataSource(0);
  swift_allocObject(v18, *(unsigned int *)(v18 + 48), *(unsigned __int16 *)(v18 + 52));
  *(_QWORD *)(v3 + 192) = sub_1000A7B58();
  *(_QWORD *)(v3 + 200) = &protocol witness table for ArrayDataSource;
  v19 = type metadata accessor for HKKeyValueDataSource(0);
  swift_allocObject(v19, *(unsigned int *)(v19 + 48), *(unsigned __int16 *)(v19 + 52));
  sub_100048464();
  *(_QWORD *)(v3 + 208) = v20;
  *(_QWORD *)(v3 + 216) = &protocol witness table for ArrayDataSource;
  v21 = type metadata accessor for MedicalIDEmergencyBuddyDataSource(0);
  swift_allocObject(v21, *(unsigned int *)(v21 + 48), *(unsigned __int16 *)(v21 + 52));
  *(_QWORD *)(v3 + 224) = sub_100065668();
  *(_QWORD *)(v3 + 232) = &protocol witness table for ArrayDataSource;
  v22 = type metadata accessor for AuxiliaryProfilesDataSource(0);
  swift_allocObject(v22, *(unsigned int *)(v22 + 48), *(unsigned __int16 *)(v22 + 52));
  *(_QWORD *)(v3 + 240) = sub_100032ECC(v9);
  *(_QWORD *)(v3 + 248) = &protocol witness table for MutableArrayDataSource;
  v23 = type metadata accessor for InternalSettingsAllDataTypeDetailViewsDataSource(0);
  swift_allocObject(v23, *(unsigned int *)(v23 + 48), *(unsigned __int16 *)(v23 + 52));
  *(_QWORD *)(v3 + 256) = sub_100077044();
  *(_QWORD *)(v3 + 264) = &protocol witness table for ArrayDataSource;
  v24 = type metadata accessor for CategoryDataSource(0);
  swift_allocObject(v24, *(unsigned int *)(v24 + 48), *(unsigned __int16 *)(v24 + 52));
  *(_QWORD *)(v3 + 272) = sub_1000A4F9C();
  *(_QWORD *)(v3 + 280) = &protocol witness table for ArrayDataSource;
  v25 = type metadata accessor for ContentKindDataSource(0);
  swift_allocObject(v25, *(unsigned int *)(v25 + 48), *(unsigned __int16 *)(v25 + 52));
  *(_QWORD *)(v3 + 288) = sub_1000A6524();
  *(_QWORD *)(v3 + 296) = &protocol witness table for ArrayDataSource;
  v26 = type metadata accessor for CompoundSectionedDataSource(0);
  swift_allocObject(v26, *(unsigned int *)(v26 + 48), *(unsigned __int16 *)(v26 + 52));
  v27 = CompoundSectionedDataSource.init(_:)(v3);
  return CompoundDataSourceCollectionViewController.init(dataSource:)(v27);
}

void sub_100023998(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_1000ECCC8)
  {
    v2 = sub_100023D3C(255, &qword_1000ECCD0, (uint64_t)&protocol descriptor for SnapshotDataSource);
    v3 = type metadata accessor for _ContiguousArrayStorage(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_1000ECCC8);
  }
}

uint64_t sub_1000239FC(uint64_t a1, uint64_t a2)
{
  return swift_bridgeObjectRetain(a2);
}

uint64_t sub_100023A04(uint64_t a1, uint64_t a2)
{
  return swift_bridgeObjectRelease(a2);
}

void sub_100023A0C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;

  if (!qword_1000ECCE8)
  {
    sub_100023A84(255);
    v3 = v2;
    v4 = sub_100013198(&qword_1000ECD00, (uint64_t (*)(uint64_t))sub_100023A84, (uint64_t)&protocol conformance descriptor for Future<A, B>);
    v5 = type metadata accessor for Deferred(a1, v3, v4);
    if (!v6)
      atomic_store(v5, (unint64_t *)&qword_1000ECCE8);
  }
}

void sub_100023A84(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_1000ECCF0)
  {
    sub_1000076D8(255, &qword_1000ECCF8, (uint64_t (*)(uint64_t))&type metadata accessor for ArrayDataSourceSection, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Array);
    v3 = type metadata accessor for Future(a1, v2, &type metadata for Never, &protocol witness table for Never);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_1000ECCF0);
  }
}

void sub_100023B00(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  _QWORD v5[4];

  if (!qword_1000ECD08)
  {
    sub_100023A0C(255);
    v5[0] = v2;
    v5[1] = sub_100023BC8();
    v5[2] = sub_100013198(&qword_1000ECD10, (uint64_t (*)(uint64_t))sub_100023A0C, (uint64_t)&protocol conformance descriptor for Deferred<A>);
    v5[3] = sub_100013198((unint64_t *)&qword_1000ECD18, (uint64_t (*)(uint64_t))sub_100023BC8, (uint64_t)&protocol conformance descriptor for OS_dispatch_queue);
    v3 = type metadata accessor for Publishers.ReceiveOn(a1, v5);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_1000ECD08);
  }
}

unint64_t sub_100023BC8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000ED910;
  if (!qword_1000ED910)
  {
    v1 = objc_opt_self(OS_dispatch_queue);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_1000ED910);
  }
  return result;
}

void sub_100023C04(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_1000ECD28)
  {
    v2 = type metadata accessor for SectionsPublisherDataSource(255);
    v3 = type metadata accessor for Supplementary(a1, v2, &protocol witness table for SectionsPublisherDataSource);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_1000ECD28);
  }
}

void sub_100023C60(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;

  if (!qword_1000ECD40)
  {
    sub_100023C04(255);
    v3 = v2;
    v4 = sub_100013198(&qword_1000ECD30, (uint64_t (*)(uint64_t))sub_100023C04, (uint64_t)&protocol conformance descriptor for Supplementary<A>);
    v5 = type metadata accessor for DataSourceWithLayout(a1, v3, v4);
    if (!v6)
      atomic_store(v5, (unint64_t *)&qword_1000ECD40);
  }
}

uint64_t sub_100023CD8()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100023CFC(uint64_t a1, char a2)
{
  uint64_t v2;
  uint64_t (*v3)(uint64_t *);
  uint64_t v5;
  char v6;

  v3 = *(uint64_t (**)(uint64_t *))(v2 + 16);
  v5 = a1;
  v6 = a2 & 1;
  return v3(&v5);
}

double sub_100023D34()
{
  uint64_t v0;

  return sub_100021C60(*(void (**)(uint64_t, _QWORD))(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t sub_100023D3C(uint64_t a1, unint64_t *a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v5;

  result = *a2;
  if (!*a2)
  {
    v5 = a3;
    result = swift_getExistentialTypeMetadata(0, 0, 1, &v5);
    atomic_store(result, a2);
  }
  return result;
}

uint64_t sub_100023D84()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 32, 7);
}

void sub_100023DA8(void *a1)
{
  uint64_t v1;

  sub_1000A5F4C(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

BOOL static SceneUserActivityType.__derived_enum_equals(_:_:)(char a1, char a2)
{
  return a1 == a2;
}

void SceneUserActivityType.hash(into:)(uint64_t a1, unsigned __int8 a2)
{
  Hasher._combine(_:)(a2);
}

Swift::Int SceneUserActivityType.hashValue.getter(unsigned __int8 a1)
{
  _QWORD v3[9];

  Hasher.init(_seed:)(v3, 0);
  Hasher._combine(_:)(a1);
  return Hasher._finalize()();
}

BOOL sub_100023E2C(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

Swift::Int sub_100023E40()
{
  unsigned __int8 *v0;
  Swift::UInt v1;
  _QWORD v3[9];

  v1 = *v0;
  Hasher.init(_seed:)(v3, 0);
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void sub_100023E84()
{
  unsigned __int8 *v0;

  Hasher._combine(_:)(*v0);
}

Swift::Int sub_100023EAC(uint64_t a1)
{
  unsigned __int8 *v1;
  Swift::UInt v2;
  _QWORD v4[9];

  v2 = *v1;
  Hasher.init(_seed:)(v4, a1);
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

unint64_t sub_100023EF0()
{
  unint64_t result;

  result = qword_1000ECD58;
  if (!qword_1000ECD58)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for SceneUserActivityType, &type metadata for SceneUserActivityType);
    atomic_store(result, (unint64_t *)&qword_1000ECD58);
  }
  return result;
}

_BYTE *initializeBufferWithCopyOfBuffer for SceneUserActivityType(_BYTE *result, _BYTE *a2)
{
  *result = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for SceneUserActivityType(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFE)
    goto LABEL_17;
  if (a2 + 2 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 2) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 2;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 2;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 2;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 3;
  v8 = v6 - 3;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for SceneUserActivityType(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_10002401C + 4 * byte_1000B1835[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_100024050 + 4 * asc_1000B1830[v4]))();
}

uint64_t sub_100024050(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100024058(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100024060);
  return result;
}

uint64_t sub_10002406C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100024074);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_100024078(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100024080(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10002408C(unsigned __int8 *a1)
{
  return *a1;
}

_BYTE *sub_100024094(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

ValueMetadata *type metadata accessor for SceneUserActivityType()
{
  return &type metadata for SceneUserActivityType;
}

char *initializeBufferWithCopyOfBuffer for DeepLinkContentKind(char *a1, char **a2, uint64_t a3)
{
  int v5;
  int EnumCaseMultiPayload;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  id v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  char *v18;
  char *v19;
  char *v20;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v16 = *a2;
    *(_QWORD *)a1 = *a2;
    a1 = &v16[(v5 + 16) & ~(unint64_t)v5];
    swift_retain(v16);
  }
  else
  {
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, a3);
    if (EnumCaseMultiPayload == 2)
    {
      v17 = *a2;
      *(_QWORD *)a1 = *a2;
      a1[8] = *((_BYTE *)a2 + 8);
      v18 = v17;
      v13 = a1;
      v14 = a3;
      v15 = 2;
    }
    else if (EnumCaseMultiPayload == 1)
    {
      v8 = type metadata accessor for URL(0);
      (*(void (**)(char *, char **, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(a1, a2, v8);
      sub_1000241AC(0);
      v10 = *(int *)(v9 + 48);
      v11 = *(char **)((char *)a2 + v10);
      *(_QWORD *)&a1[v10] = v11;
      v12 = v11;
      v13 = a1;
      v14 = a3;
      v15 = 1;
    }
    else
    {
      v19 = *a2;
      *(_QWORD *)a1 = *a2;
      v20 = v19;
      v13 = a1;
      v14 = a3;
      v15 = 0;
    }
    swift_storeEnumTagMultiPayload(v13, v14, v15);
  }
  return a1;
}

void sub_1000241AC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t TupleTypeMetadata2;
  uint64_t v5;

  if (!qword_1000EF070)
  {
    v2 = type metadata accessor for URL(255);
    sub_1000076D8(255, &qword_1000ECD60, (uint64_t (*)(uint64_t))sub_100024234, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2(a1, v2, v3, " options ", 0);
    if (!v5)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_1000EF070);
  }
}

unint64_t sub_100024234()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000EF080;
  if (!qword_1000EF080)
  {
    v1 = objc_opt_self(UISceneOpenURLOptions);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_1000EF080);
  }
  return result;
}

void destroy for DeepLinkContentKind(id *a1, uint64_t a2)
{
  id *v2;
  int EnumCaseMultiPayload;
  uint64_t v4;
  uint64_t v5;

  v2 = a1;
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a1, a2);
  if (EnumCaseMultiPayload && EnumCaseMultiPayload != 2)
  {
    if (EnumCaseMultiPayload != 1)
      return;
    v4 = type metadata accessor for URL(0);
    (*(void (**)(id *, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(v2, v4);
    sub_1000241AC(0);
    v2 = (id *)((char *)v2 + *(int *)(v5 + 48));
  }

}

uint64_t initializeWithCopy for DeepLinkContentKind(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int EnumCaseMultiPayload;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  id v16;
  void *v17;
  id v18;

  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, a3);
  if (EnumCaseMultiPayload == 2)
  {
    v15 = *(void **)a2;
    *(_QWORD *)a1 = *(_QWORD *)a2;
    *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
    v16 = v15;
    v12 = a1;
    v13 = a3;
    v14 = 2;
  }
  else if (EnumCaseMultiPayload == 1)
  {
    v7 = type metadata accessor for URL(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    sub_1000241AC(0);
    v9 = *(int *)(v8 + 48);
    v10 = *(void **)(a2 + v9);
    *(_QWORD *)(a1 + v9) = v10;
    v11 = v10;
    v12 = a1;
    v13 = a3;
    v14 = 1;
  }
  else
  {
    v17 = *(void **)a2;
    *(_QWORD *)a1 = *(_QWORD *)a2;
    v18 = v17;
    v12 = a1;
    v13 = a3;
    v14 = 0;
  }
  swift_storeEnumTagMultiPayload(v12, v13, v14);
  return a1;
}

uint64_t assignWithCopy for DeepLinkContentKind(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int EnumCaseMultiPayload;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  id v16;
  void *v17;
  id v18;

  if (a1 != a2)
  {
    sub_100024498(a1);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, a3);
    if (EnumCaseMultiPayload == 2)
    {
      v15 = *(void **)a2;
      *(_QWORD *)a1 = *(_QWORD *)a2;
      *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
      v16 = v15;
      v12 = a1;
      v13 = a3;
      v14 = 2;
    }
    else if (EnumCaseMultiPayload == 1)
    {
      v7 = type metadata accessor for URL(0);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
      sub_1000241AC(0);
      v9 = *(int *)(v8 + 48);
      v10 = *(void **)(a2 + v9);
      *(_QWORD *)(a1 + v9) = v10;
      v11 = v10;
      v12 = a1;
      v13 = a3;
      v14 = 1;
    }
    else
    {
      v17 = *(void **)a2;
      *(_QWORD *)a1 = *(_QWORD *)a2;
      v18 = v17;
      v12 = a1;
      v13 = a3;
      v14 = 0;
    }
    swift_storeEnumTagMultiPayload(v12, v13, v14);
  }
  return a1;
}

uint64_t sub_100024498(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for DeepLinkContentKind(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

char *initializeWithTake for DeepLinkContentKind(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;

  if (swift_getEnumCaseMultiPayload(a2, a3) == 1)
  {
    v6 = type metadata accessor for URL(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
    sub_1000241AC(0);
    *(_QWORD *)&a1[*(int *)(v7 + 48)] = *(_QWORD *)&a2[*(int *)(v7 + 48)];
    swift_storeEnumTagMultiPayload(a1, a3, 1);
  }
  else
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  }
  return a1;
}

char *assignWithTake for DeepLinkContentKind(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;

  if (a1 != a2)
  {
    sub_100024498((uint64_t)a1);
    if (swift_getEnumCaseMultiPayload(a2, a3) == 1)
    {
      v6 = type metadata accessor for URL(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
      sub_1000241AC(0);
      *(_QWORD *)&a1[*(int *)(v7 + 48)] = *(_QWORD *)&a2[*(int *)(v7 + 48)];
      swift_storeEnumTagMultiPayload(a1, a3, 1);
    }
    else
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
    }
  }
  return a1;
}

uint64_t getEnumTagSinglePayload for DeepLinkContentKind(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a3 - 8) + 48))();
}

uint64_t storeEnumTagSinglePayload for DeepLinkContentKind(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a4 - 8) + 56))();
}

uint64_t sub_100024640(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_storeEnumTagMultiPayload(a1, a3, a2);
}

uint64_t sub_100024650(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  int EnumCaseMultiPayload;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  __int128 v14;
  char v15;
  void *v16;
  char v17;
  _OWORD v19[2];
  uint64_t v20;

  v3 = type metadata accessor for URL(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)v19 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for DeepLinkContentKind(0);
  __chkstk_darwin(v7);
  v9 = (char *)v19 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100025C40(a1, (uint64_t)v9);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v9, v7);
  if (!EnumCaseMultiPayload)
  {
    v16 = *(void **)v9;
    v17 = sub_1000247B8(*(void **)v9);
LABEL_6:
    v15 = v17;

    return v15 & 1;
  }
  if (EnumCaseMultiPayload != 1)
  {
    v16 = *(void **)v9;
    v17 = sub_100024B78(*(void **)v9, v9[8]);
    goto LABEL_6;
  }
  sub_1000241AC(0);
  v12 = *(void **)&v9[*(int *)(v11 + 48)];
  (*(void (**)(char *, char *, uint64_t))(v4 + 32))(v6, v9, v3);
  v13 = *(_QWORD *)(v1 + OBJC_IVAR____TtC6Health18AppDeepLinkHandler_rootViewController + 32);
  v14 = *(_OWORD *)(v1 + OBJC_IVAR____TtC6Health18AppDeepLinkHandler_rootViewController + 16);
  v19[0] = *(_OWORD *)(v1 + OBJC_IVAR____TtC6Health18AppDeepLinkHandler_rootViewController);
  v19[1] = v14;
  v20 = v13;
  v15 = static URLRouter.handleURL(_:options:rootViewController:)(v6, v12, v19);

  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  return v15 & 1;
}

BOOL sub_1000247B8(void *a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  void *v18;
  uint64_t v19;
  __int128 v20;
  uint64_t v21;
  id v22;
  NSObject *v23;
  os_log_type_t v24;
  uint64_t v25;
  uint64_t MetatypeMetadata;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  id v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _OWORD v40[2];
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;

  v37 = *v1;
  v3 = type metadata accessor for Logger(0);
  v38 = *(_QWORD *)(v3 - 8);
  v39 = v3;
  __chkstk_darwin(v3);
  v5 = (char *)&v36 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000076D8(0, (unint64_t *)&qword_1000ECF88, (uint64_t (*)(uint64_t))&type metadata accessor for DeepLinkActivityType, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
  __chkstk_darwin(v6);
  v8 = (char *)&v36 - v7;
  v9 = type metadata accessor for DeepLinkActivityType(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v36 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = objc_msgSend(a1, "type");
  v14 = static String._unconditionallyBridgeFromObjectiveC(_:)(v13);
  v16 = v15;

  DeepLinkActivityType.init(_:)(v14, v16);
  v17 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9);
  if (v17 == 1)
  {
    v21 = sub_1000114C0((uint64_t)v8, (uint64_t)&qword_1000ECF88, (uint64_t)&type metadata accessor for DeepLinkActivityType, (uint64_t (*)(_QWORD, uint64_t, uint64_t, void *))sub_1000076D8);
    static Logger.general.getter(v21);
    v22 = a1;
    v23 = Logger.logObject.getter(v22);
    v24 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v23, v24))
    {
      v25 = swift_slowAlloc(22, -1);
      v36 = swift_slowAlloc(64, -1);
      v42 = v36;
      *(_DWORD *)v25 = 136446466;
      v43 = v37;
      MetatypeMetadata = swift_getMetatypeMetadata(v37);
      v27 = String.init<A>(describing:)(&v43, MetatypeMetadata);
      v29 = v28;
      v43 = sub_100012B20(v27, v28, &v42);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v43, &v44, v25 + 4, v25 + 12);
      swift_bridgeObjectRelease(v29);
      *(_WORD *)(v25 + 12) = 2082;
      v37 = v25 + 14;
      v30 = objc_msgSend(v22, "type");
      v31 = static String._unconditionallyBridgeFromObjectiveC(_:)(v30);
      v33 = v32;

      v43 = sub_100012B20(v31, v33, &v42);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v43, &v44, v37, v25 + 22);

      swift_bridgeObjectRelease(v33);
      _os_log_impl((void *)&_mh_execute_header, v23, v24, "[%{public}s]: bad shortcut item type passed to application %{public}s", (uint8_t *)v25, 0x16u);
      v34 = v36;
      swift_arrayDestroy(v36, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v34, -1, -1);
      swift_slowDealloc(v25, -1, -1);

    }
    else
    {

    }
    (*(void (**)(char *, uint64_t))(v38 + 8))(v5, v39);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v12, v8, v9);
    v18 = (void *)static HAUserActivity.createActivity(title:restorationType:profileIdentifier:eligibleForSearch:eligibleForHandoff:eligibleForPrediction:)(0x74756374726F6853, 0xEC0000006D657469, v12, 0, 0, 2, 0);
    v19 = *(uint64_t *)((char *)v1 + OBJC_IVAR____TtC6Health18AppDeepLinkHandler_rootViewController + 32);
    v20 = *(_OWORD *)((char *)v1 + OBJC_IVAR____TtC6Health18AppDeepLinkHandler_rootViewController + 16);
    v40[0] = *(_OWORD *)((char *)v1 + OBJC_IVAR____TtC6Health18AppDeepLinkHandler_rootViewController);
    v40[1] = v20;
    v41 = v19;
    static UserActivityRouter.handleUserActivity(rootViewController:userActivity:)(v40, v18);

    (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  }
  return v17 != 1;
}

uint64_t sub_100024B78(void *a1, int a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  id v12;
  NSObject *v13;
  os_log_type_t v14;
  uint64_t v15;
  uint64_t MetatypeMetadata;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  id v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  id v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  __int128 v35;
  char v36;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _OWORD v46[2];
  uint64_t v47;

  v3 = v2;
  v6 = *v2;
  v7 = type metadata accessor for Logger(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = __chkstk_darwin(v7);
  v11 = (char *)&v38 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  static Logger.view.getter(v9);
  v12 = a1;
  v13 = Logger.logObject.getter(v12);
  v14 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v13, v14))
  {
    v40 = v7;
    v41 = a2;
    v42 = v3;
    v15 = swift_slowAlloc(32, -1);
    v38 = swift_slowAlloc(96, -1);
    v45 = v38;
    *(_DWORD *)v15 = 136446722;
    v43 = v6;
    MetatypeMetadata = swift_getMetatypeMetadata(v6);
    v17 = String.init<A>(describing:)(&v43, MetatypeMetadata);
    v19 = v18;
    v43 = sub_100012B20(v17, v18, &v45);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v43, &v44, v15 + 4, v15 + 12);
    swift_bridgeObjectRelease(v19);
    *(_WORD *)(v15 + 12) = 2082;
    v20 = objc_msgSend(v12, "title");
    v39 = v8;
    if (v20)
    {
      v21 = v20;
      v22 = static String._unconditionallyBridgeFromObjectiveC(_:)(v20);
      v24 = v23;

    }
    else
    {
      v22 = 0;
      v24 = 0;
    }
    v43 = v22;
    v44 = v24;
    sub_1000138C8(0, &qword_1000ECF90, (uint64_t)&type metadata for String, (uint64_t (*)(_QWORD, uint64_t))&type metadata accessor for Optional);
    v26 = String.init<A>(describing:)(&v43, v25);
    v28 = v27;
    v43 = sub_100012B20(v26, v27, &v45);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v43, &v44, v15 + 14, v15 + 22);

    swift_bridgeObjectRelease(v28);
    *(_WORD *)(v15 + 22) = 2082;
    v29 = objc_msgSend(v12, "activityType");
    v30 = static String._unconditionallyBridgeFromObjectiveC(_:)(v29);
    v32 = v31;

    v43 = sub_100012B20(v30, v32, &v45);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v43, &v44, v15 + 24, v15 + 32);

    swift_bridgeObjectRelease(v32);
    _os_log_impl((void *)&_mh_execute_header, v13, v14, "[%{public}s]: handling user activity “%{public}s” of type %{public}s", (uint8_t *)v15, 0x20u);
    v33 = v38;
    swift_arrayDestroy(v38, 3, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v33, -1, -1);
    swift_slowDealloc(v15, -1, -1);

    (*(void (**)(char *, uint64_t))(v39 + 8))(v11, v40);
    v3 = v42;
    if ((_BYTE)v41)
      goto LABEL_9;
  }
  else
  {

    (*(void (**)(char *, uint64_t))(v8 + 8))(v11, v7);
    if ((_BYTE)a2)
      goto LABEL_9;
  }
  if (!sub_100024F98(v12))
  {
    v36 = 0;
    return v36 & 1;
  }
LABEL_9:
  v34 = *(uint64_t *)((char *)v3 + OBJC_IVAR____TtC6Health18AppDeepLinkHandler_rootViewController + 32);
  v35 = *(_OWORD *)((char *)v3 + OBJC_IVAR____TtC6Health18AppDeepLinkHandler_rootViewController + 16);
  v46[0] = *(_OWORD *)((char *)v3 + OBJC_IVAR____TtC6Health18AppDeepLinkHandler_rootViewController);
  v46[1] = v35;
  v47 = v34;
  v36 = static UserActivityRouter.handleUserActivity(rootViewController:userActivity:)(v46, v12);
  return v36 & 1;
}

uint64_t sub_100024EE0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  sub_1000114C0(v0 + OBJC_IVAR____TtC6Health18AppDeepLinkHandler_pendingDeepLink, (uint64_t)&qword_1000ECE58, (uint64_t)type metadata accessor for DeepLinkContentKind, (uint64_t (*)(_QWORD, uint64_t, uint64_t, void *))sub_1000076D8);
  swift_release(*(_QWORD *)(v0 + OBJC_IVAR____TtC6Health18AppDeepLinkHandler_canPresentDeepLinksCancellable));
  v1 = v0 + OBJC_IVAR____TtC6Health18AppDeepLinkHandler__skipStateRestoration;
  sub_1000138C8(0, (unint64_t *)&qword_1000ECE60, (uint64_t)&type metadata for Bool, (uint64_t (*)(_QWORD, uint64_t))&type metadata accessor for UserDefault);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);

  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t sub_100024F90()
{
  return type metadata accessor for AppDeepLinkHandler(0);
}

BOOL sub_100024F98(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  id v18;
  unsigned __int8 v19;
  void *v20;
  uint64_t v21;
  char *v22;
  id v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  void *v44;
  uint64_t v45;
  char *v46;
  char *v47;
  void (*v48)(char *, uint64_t);
  uint64_t v49;
  uint64_t v50;
  char v51;
  char *v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  char *v61;
  uint64_t v62;
  void *v63;
  uint64_t v64;
  _QWORD v65[2];
  _QWORD v66[5];
  __int128 v67;
  __int128 v68;

  v63 = a1;
  v58 = type metadata accessor for Calendar(0);
  v62 = *(_QWORD *)(v58 - 8);
  __chkstk_darwin(v58);
  v61 = (char *)&v54 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v57 = type metadata accessor for DateComponents(0);
  v59 = *(_QWORD *)(v57 - 8);
  __chkstk_darwin(v57);
  v60 = (char *)&v54 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000076D8(0, (unint64_t *)&qword_1000ECF98, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
  __chkstk_darwin(v3);
  v5 = (char *)&v54 - v4;
  v6 = type metadata accessor for Date(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = __chkstk_darwin(v6);
  v10 = (char *)&v54 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v12 = (char *)&v54 - v11;
  sub_1000138C8(0, (unint64_t *)&qword_1000ECE60, (uint64_t)&type metadata for Bool, (uint64_t (*)(_QWORD, uint64_t))&type metadata accessor for UserDefault);
  v14 = v13;
  v15 = *(_QWORD *)(v13 - 8);
  __chkstk_darwin(v13);
  v17 = (char *)&v54 - v16;
  v18 = objc_msgSend((id)objc_opt_self(UIApplication), "sharedApplication");
  v19 = objc_msgSend(v18, "launchedToTest");

  if ((v19 & 1) != 0)
    return 0;
  v20 = v63;
  v55 = v5;
  v54 = v10;
  v56 = v7;
  v22 = v61;
  v21 = v62;
  (*(void (**)(char *, uint64_t, uint64_t))(v15 + 16))(v17, v64 + OBJC_IVAR____TtC6Health18AppDeepLinkHandler__skipStateRestoration, v14);
  UserDefault.wrappedValue.getter(v14);
  (*(void (**)(char *, uint64_t))(v15 + 8))(v17, v14);
  if ((v66[0] & 1) != 0)
    return 0;
  v23 = objc_msgSend(v20, "userInfo");
  if (!v23)
  {
    v67 = 0u;
    v68 = 0u;
    v30 = v6;
LABEL_17:
    sub_1000114C0((uint64_t)&v67, (uint64_t)&qword_1000EDBD0, (uint64_t)&type metadata for Any + 8, (uint64_t (*)(_QWORD, uint64_t, uint64_t, void *))sub_1000138C8);
    v31 = (uint64_t)v55;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v56 + 56))(v55, 1, 1, v30);
    goto LABEL_18;
  }
  v24 = v23;
  v25 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v23, &type metadata for AnyHashable, (char *)&type metadata for Any + 8, &protocol witness table for AnyHashable);

  v65[0] = static HAUserActivity.dateSavedRestorationKey.getter();
  v65[1] = v26;
  AnyHashable.init<A>(_:)(v66, v65, &type metadata for String, &protocol witness table for String);
  if (*(_QWORD *)(v25 + 16) && (v27 = sub_10007DF14((uint64_t)v66), (v28 & 1) != 0))
  {
    sub_100012C10(*(_QWORD *)(v25 + 56) + 32 * v27, (uint64_t)&v67);
  }
  else
  {
    v67 = 0u;
    v68 = 0u;
  }
  v29 = v21;
  v30 = v6;
  sub_100025CE0((uint64_t)v66);
  swift_bridgeObjectRelease(v25);
  if (!*((_QWORD *)&v68 + 1))
    goto LABEL_17;
  v31 = (uint64_t)v55;
  v32 = swift_dynamicCast(v55, &v67, (char *)&type metadata for Any + 8, v6, 6);
  v33 = v56;
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v56 + 56))(v31, v32 ^ 1u, 1, v6);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v33 + 48))(v31, 1, v6) == 1)
  {
LABEL_18:
    sub_1000114C0(v31, (uint64_t)&qword_1000ECF98, (uint64_t)&type metadata accessor for Date, (uint64_t (*)(_QWORD, uint64_t, uint64_t, void *))sub_1000076D8);
    return 0;
  }
  v34 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v33 + 32))(v12, v31, v6);
  static Calendar.current.getter(v34);
  sub_1000076D8(0, &qword_1000ECFA0, (uint64_t (*)(uint64_t))&type metadata accessor for Calendar.Component, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for _ContiguousArrayStorage);
  v35 = v12;
  v37 = v36;
  v38 = type metadata accessor for Calendar.Component(0);
  v39 = *(_QWORD *)(v38 - 8);
  v40 = *(unsigned __int8 *)(v39 + 80);
  v41 = (v40 + 32) & ~v40;
  v42 = swift_allocObject(v37, v41 + *(_QWORD *)(v39 + 72), v40 | 7);
  *(_OWORD *)(v42 + 16) = xmmword_1000B11F0;
  v43 = v42 + v41;
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v39 + 104))(v43, enum case for Calendar.Component.minute(_:), v38);
  v44 = sub_100025D14(v42);
  swift_setDeallocating(v42);
  swift_arrayDestroy(v43, 1, v38);
  v45 = swift_deallocClassInstance(v42, 32, 7);
  v46 = v54;
  Date.init()(v45);
  v47 = v60;
  Calendar.dateComponents(_:from:to:)(v44, v35, v46);
  swift_bridgeObjectRelease(v44);
  v48 = *(void (**)(char *, uint64_t))(v33 + 8);
  v48(v46, v30);
  v49 = (*(uint64_t (**)(char *, uint64_t))(v29 + 8))(v22, v58);
  v50 = DateComponents.minute.getter(v49);
  LOBYTE(v38) = v51;
  (*(void (**)(char *, uint64_t))(v59 + 8))(v47, v57);
  v48(v35, v30);
  return (v38 & 1) == 0 && v50 < 10;
}

uint64_t sub_1000254D0(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t (*v32)(char *, uint64_t, uint64_t);
  uint64_t v33;
  uint64_t v34;
  NSObject *v35;
  os_log_type_t v36;
  uint64_t v37;
  uint64_t MetatypeMetadata;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  char *v42;
  char *v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  char v56;
  uint64_t v57;
  void (*v58)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v59;
  uint64_t v60;
  uint64_t (*v61)(char *, uint64_t, uint64_t);
  char *v62;
  uint64_t v63;
  NSObject *v64;
  os_log_type_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  unint64_t v70;
  char *v71;
  uint64_t v72;
  unint64_t v73;
  unint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v78;
  char *v79;
  uint64_t v80;
  char *v81;
  char *v82;
  char *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  char *v87;
  uint64_t v88;
  uint64_t v89;
  _BYTE v90[16];
  uint64_t v91;
  char v92[24];

  v86 = a1;
  v80 = *v1;
  v2 = type metadata accessor for Logger(0);
  v84 = *(_QWORD *)(v2 - 8);
  v85 = v2;
  v3 = __chkstk_darwin(v2);
  v82 = (char *)&v78 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  v83 = (char *)&v78 - v5;
  v88 = type metadata accessor for URL(0);
  v6 = *(char **)(v88 - 8);
  v7 = __chkstk_darwin(v88);
  v87 = (char *)&v78 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __chkstk_darwin(v7);
  v81 = (char *)&v78 - v10;
  v11 = __chkstk_darwin(v9);
  v13 = (char *)&v78 - v12;
  __chkstk_darwin(v11);
  v15 = (char *)&v78 - v14;
  sub_1000076D8(0, &qword_1000ECE58, type metadata accessor for DeepLinkContentKind, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
  v17 = __chkstk_darwin(v16);
  v19 = (char *)&v78 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  v21 = (char *)&v78 - v20;
  v22 = type metadata accessor for DeepLinkContentKind(0);
  v23 = *(_QWORD *)(v22 - 8);
  v24 = __chkstk_darwin(v22);
  v26 = (char *)&v78 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v24);
  v28 = (char *)&v78 - v27;
  v29 = (uint64_t)v1 + OBJC_IVAR____TtC6Health18AppDeepLinkHandler_pendingDeepLink;
  swift_beginAccess(v29, v92, 0, 0);
  sub_100011544(v29, (uint64_t)v21);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v23 + 48))(v21, 1, v22) == 1)
  {
    v30 = sub_1000114C0((uint64_t)v21, (uint64_t)&qword_1000ECE58, (uint64_t)type metadata accessor for DeepLinkContentKind, (uint64_t (*)(_QWORD, uint64_t, uint64_t, void *))sub_1000076D8);
    v31 = v82;
    static Logger.view.getter(v30);
    v32 = (uint64_t (*)(char *, uint64_t, uint64_t))*((_QWORD *)v6 + 2);
    v33 = v88;
    v34 = v32(v87, v86, v88);
    v35 = Logger.logObject.getter(v34);
    v36 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v35, v36))
    {
      v37 = swift_slowAlloc(22, -1);
      v86 = swift_slowAlloc(64, -1);
      v91 = v86;
      *(_DWORD *)v37 = 136446466;
      v89 = v80;
      MetatypeMetadata = swift_getMetatypeMetadata(v80);
      v39 = String.init<A>(describing:)(&v89, MetatypeMetadata);
      v83 = v6;
      v41 = v40;
      v89 = sub_100012B20(v39, v40, &v91);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v89, v90, v37 + 4, v37 + 12);
      swift_bridgeObjectRelease(v41);
      *(_WORD *)(v37 + 12) = 2082;
      v42 = v81;
      v43 = v87;
      v32(v81, (uint64_t)v87, v33);
      v44 = String.init<A>(describingSensitive:)(v42, v33);
      v46 = v45;
      v89 = sub_100012B20(v44, v45, &v91);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v89, v90, v37 + 14, v37 + 22);
      swift_bridgeObjectRelease(v46);
      (*((void (**)(char *, uint64_t))v83 + 1))(v43, v33);
      _os_log_impl((void *)&_mh_execute_header, v35, v36, "[%{public}s] Tried to cancel pending deep link of %{public}s but no pending deep link present", (uint8_t *)v37, 0x16u);
      v47 = v86;
      swift_arrayDestroy(v86, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v47, -1, -1);
      swift_slowDealloc(v37, -1, -1);
    }
    else
    {
      (*((void (**)(char *, uint64_t))v6 + 1))(v87, v33);
    }

    (*(void (**)(char *, uint64_t))(v84 + 8))(v31, v85);
    return 0;
  }
  v82 = v15;
  v79 = v19;
  v87 = v13;
  v48 = v83;
  v49 = v88;
  sub_100025BFC((uint64_t)v21, (uint64_t)v28);
  sub_100025C40((uint64_t)v28, (uint64_t)v26);
  v50 = (uint64_t)v28;
  if (swift_getEnumCaseMultiPayload(v26, v22) != 1)
  {
    v57 = sub_100024498((uint64_t)v26);
    v54 = v49;
    v55 = v86;
    goto LABEL_10;
  }
  sub_1000241AC(0);

  v52 = v82;
  v53 = v26;
  v54 = v49;
  (*((void (**)(char *, char *, uint64_t))v6 + 4))(v82, v53, v49);
  v55 = v86;
  v56 = static URL.== infix(_:_:)(v52, v86);
  v57 = (*((uint64_t (**)(char *, uint64_t))v6 + 1))(v52, v54);
  if ((v56 & 1) == 0)
  {
LABEL_10:
    static Logger.view.getter(v57);
    v61 = (uint64_t (*)(char *, uint64_t, uint64_t))*((_QWORD *)v6 + 2);
    v62 = v87;
    v63 = v61(v87, v55, v54);
    v64 = Logger.logObject.getter(v63);
    v65 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v64, v65))
    {
      v66 = swift_slowAlloc(22, -1);
      v86 = swift_slowAlloc(64, -1);
      v91 = v86;
      *(_DWORD *)v66 = 136446466;
      v89 = v80;
      v67 = swift_getMetatypeMetadata(v80);
      v88 = v50;
      v68 = String.init<A>(describing:)(&v89, v67);
      v70 = v69;
      v89 = sub_100012B20(v68, v69, &v91);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v89, v90, v66 + 4, v66 + 12);
      swift_bridgeObjectRelease(v70);
      *(_WORD *)(v66 + 12) = 2082;
      v71 = v81;
      v61(v81, (uint64_t)v62, v54);
      v72 = String.init<A>(describingSensitive:)(v71, v54);
      v74 = v73;
      v89 = sub_100012B20(v72, v73, &v91);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v89, v90, v66 + 14, v66 + 22);
      swift_bridgeObjectRelease(v74);
      (*((void (**)(char *, uint64_t))v6 + 1))(v62, v54);
      _os_log_impl((void *)&_mh_execute_header, v64, v65, "[%{public}s] Tried to cancel pending deep link of %{public}s but different deep link present", (uint8_t *)v66, 0x16u);
      v75 = v86;
      swift_arrayDestroy(v86, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v75, -1, -1);
      swift_slowDealloc(v66, -1, -1);

      (*(void (**)(char *, uint64_t))(v84 + 8))(v83, v85);
      v76 = v88;
    }
    else
    {

      (*((void (**)(char *, uint64_t))v6 + 1))(v62, v54);
      (*(void (**)(char *, uint64_t))(v84 + 8))(v48, v85);
      v76 = v50;
    }
    sub_100024498(v76);
    return 0;
  }
  sub_100024498(v50);
  v58 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v23 + 56);
  v59 = 1;
  v60 = (uint64_t)v79;
  v58(v79, 1, 1, v22);
  swift_beginAccess(v29, &v89, 33, 0);
  sub_100025C84(v60, v29);
  swift_endAccess(&v89);
  return v59;
}

uint64_t sub_100025BD8(uint64_t a1)
{
  return sub_1000254D0(a1) & 1;
}

uint64_t sub_100025BFC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for DeepLinkContentKind(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_100025C40(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for DeepLinkContentKind(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_100025C84(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_1000076D8(0, &qword_1000ECE58, type metadata accessor for DeepLinkContentKind, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t sub_100025CE0(uint64_t a1)
{
  (*(void (**)(void))(*(&type metadata for AnyHashable - 1) + 8))();
  return a1;
}

void *sub_100025D14(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  void (*v25)(char *, uint64_t);
  void *result;
  uint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void (*v34)(char *, uint64_t, uint64_t);
  uint64_t v35;

  v2 = type metadata accessor for Calendar.Component(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = __chkstk_darwin(v2);
  v6 = (char *)&v30 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v8 = (char *)&v30 - v7;
  v9 = *(_QWORD *)(a1 + 16);
  if (v9)
  {
    sub_100025F68(0);
    v10 = static _SetStorage.allocate(capacity:)(v9);
    v11 = 0;
    v12 = *(unsigned __int8 *)(v3 + 80);
    v31 = v9;
    v32 = a1 + ((v12 + 32) & ~v12);
    v13 = *(_QWORD *)(v3 + 72);
    v34 = *(void (**)(char *, uint64_t, uint64_t))(v3 + 16);
    v35 = v10 + 56;
    while (1)
    {
      v33 = v11;
      v34(v8, v32 + v13 * v11, v2);
      v14 = *(_QWORD *)(v10 + 40);
      v15 = sub_100025FD8(&qword_1000ECFB0, (uint64_t)&protocol conformance descriptor for Calendar.Component);
      v16 = dispatch thunk of Hashable._rawHashValue(seed:)(v14, v2, v15);
      v17 = ~(-1 << *(_BYTE *)(v10 + 32));
      v18 = v16 & v17;
      v19 = (v16 & (unint64_t)v17) >> 6;
      v20 = *(_QWORD *)(v35 + 8 * v19);
      v21 = 1 << (v16 & v17);
      if ((v21 & v20) != 0)
      {
        do
        {
          v34(v6, *(_QWORD *)(v10 + 48) + v18 * v13, v2);
          v22 = sub_100025FD8(&qword_1000ECFB8, (uint64_t)&protocol conformance descriptor for Calendar.Component);
          v23 = dispatch thunk of static Equatable.== infix(_:_:)(v6, v8, v2, v22);
          v24 = v3;
          v25 = *(void (**)(char *, uint64_t))(v3 + 8);
          v25(v6, v2);
          if ((v23 & 1) != 0)
          {
            v25(v8, v2);
            v3 = v24;
            v9 = v31;
            goto LABEL_4;
          }
          v18 = (v18 + 1) & v17;
          v19 = v18 >> 6;
          v20 = *(_QWORD *)(v35 + 8 * (v18 >> 6));
          v21 = 1 << v18;
          v3 = v24;
        }
        while ((v20 & (1 << v18)) != 0);
        v9 = v31;
      }
      *(_QWORD *)(v35 + 8 * v19) = v21 | v20;
      result = (void *)(*(uint64_t (**)(unint64_t, char *, uint64_t))(v3 + 32))(*(_QWORD *)(v10 + 48) + v18 * v13, v8, v2);
      v27 = *(_QWORD *)(v10 + 16);
      v28 = __OFADD__(v27, 1);
      v29 = v27 + 1;
      if (v28)
        break;
      *(_QWORD *)(v10 + 16) = v29;
LABEL_4:
      v11 = v33 + 1;
      if (v33 + 1 == v9)
        return (void *)v10;
    }
    __break(1u);
  }
  else
  {
    return &_swiftEmptySetSingleton;
  }
  return result;
}

void sub_100025F68(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;

  if (!qword_1000ECFA8)
  {
    v2 = type metadata accessor for Calendar.Component(255);
    v3 = sub_100025FD8(&qword_1000ECFB0, (uint64_t)&protocol conformance descriptor for Calendar.Component);
    v4 = type metadata accessor for _SetStorage(a1, v2, v3);
    if (!v5)
      atomic_store(v4, (unint64_t *)&qword_1000ECFA8);
  }
}

uint64_t sub_100025FD8(unint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    v5 = type metadata accessor for Calendar.Component(255);
    result = swift_getWitnessTable(a2, v5);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t type metadata accessor for MainSidebarDataSource(uint64_t a1)
{
  return sub_100006A08(a1, (uint64_t *)&unk_1000ECFC0, (uint64_t)&nominal type descriptor for MainSidebarDataSource);
}

uint64_t sub_10002602C(uint64_t a1)
{
  _BYTE v2[8];

  return swift_initClassMetadata2(a1, 0, 0, v2, a1 + qword_1000F0E08);
}

uint64_t sub_100026068()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;

  v17 = type metadata accessor for UICollectionLayoutListConfiguration.HeaderMode(0);
  v0 = *(_QWORD *)(v17 - 8);
  __chkstk_darwin(v17);
  v2 = (char *)&v16 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = type metadata accessor for UICollectionLayoutListConfiguration.Appearance(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for UICollectionLayoutListConfiguration(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)&v16 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, _QWORD, uint64_t))(v4 + 104))(v6, enum case for UICollectionLayoutListConfiguration.Appearance.sidebar(_:), v3);
  UICollectionLayoutListConfiguration.init(appearance:)(v6);
  v11 = UICollectionLayoutListConfiguration.showsSeparators.setter(0);
  if (CollectionViewLayoutContext.section.getter(v11))
  {
    (*(void (**)(char *, _QWORD, uint64_t))(v0 + 104))(v2, enum case for UICollectionLayoutListConfiguration.HeaderMode.firstItemInSection(_:), v17);
    UICollectionLayoutListConfiguration.headerMode.setter(v2);
  }
  v12 = sub_100006D10(0, &qword_1000ED1F0, NSCollectionLayoutSection_ptr);
  v13 = CollectionViewLayoutContext.environment.getter(v12);
  v14 = static NSCollectionLayoutSection.list(using:layoutEnvironment:)(v10, v13);
  swift_unknownObjectRelease(v13);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  return v14;
}

void sub_100026220()
{
  _swift_stdlib_reportUnimplementedInitializer("Health.MainSidebarDataSource", 28, "init(_:)", 8, 0);
  __break(1u);
}

uint64_t sub_10002624C()
{
  uint64_t v0;

  v0 = CompoundSectionedDataSource.deinit();
  return swift_deallocClassInstance(v0, 16, 7);
}

uint64_t sub_100026268()
{
  return type metadata accessor for MainSidebarDataSource(0);
}

uint64_t sub_100026270()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  void *v14;
  Swift::String v15;
  Swift::String v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v21;
  unint64_t v22;

  v1 = type metadata accessor for UUID(0);
  v2 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  v4 = (char *)&v21 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000076D8(0, (unint64_t *)&qword_1000ED1E0, (uint64_t (*)(uint64_t))sub_10002768C, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for _ContiguousArrayStorage);
  v6 = swift_allocObject(v5, 40, 7);
  *(_OWORD *)(v6 + 16) = xmmword_1000B11F0;
  v7 = *(_QWORD *)(v0 + 64);
  v8 = swift_bridgeObjectRetain(v7);
  v9 = sub_1000A61C4(v8);
  swift_bridgeObjectRelease(v7);
  *(_QWORD *)(v6 + 32) = v9;
  v21 = 0x3C53447961727241;
  v22 = 0xE800000000000000;
  v11 = UUID.init()(v10);
  v12 = UUID.uuidString.getter(v11);
  v14 = v13;
  (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  v15._countAndFlagsBits = v12;
  v15._object = v14;
  String.append(_:)(v15);
  swift_bridgeObjectRelease(v14);
  v16._countAndFlagsBits = 62;
  v16._object = (void *)0xE100000000000000;
  String.append(_:)(v16);
  v17 = v21;
  v18 = v22;
  v19 = type metadata accessor for ArrayDataSource(0);
  swift_allocObject(v19, *(unsigned int *)(v19 + 48), *(unsigned __int16 *)(v19 + 52));
  return ArrayDataSource.init(_:identifier:)(v6, v17, v18);
}

uint64_t sub_1000263D8()
{
  uint64_t v0;

  _s6Health23OpenSleepScheduleIntentVwxx_0((_QWORD *)(v0 + 24));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 64));
  return swift_deallocClassInstance(v0, 72, 7);
}

uint64_t type metadata accessor for SidebarDataSourceProvider()
{
  return objc_opt_self(_TtC6Health25SidebarDataSourceProvider);
}

uint64_t type metadata accessor for SidebarFeedItemDataSource(uint64_t a1)
{
  return sub_100006A08(a1, (uint64_t *)&unk_1000ED128, (uint64_t)&nominal type descriptor for SidebarFeedItemDataSource);
}

uint64_t sub_100026440(uint64_t a1)
{
  uint64_t v2;
  uint64_t result;
  unint64_t v4;
  uint64_t v5;

  v2 = qword_1000F0E18;
  result = type metadata accessor for SidebarSection(319);
  if (v4 <= 0x3F)
  {
    v5 = *(_QWORD *)(result - 8) + 64;
    result = swift_initClassMetadata2(a1, 0, 1, &v5, a1 + v2);
    if (!result)
      return 0;
  }
  return result;
}

uint64_t sub_1000264B4(_QWORD *a1, void *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t (**v24)@<X0>(uint64_t@<X0>, uint64_t@<X8>);
  uint64_t v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void (*v34)(uint64_t, uint64_t, uint64_t);
  Class v35;
  id v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  char *v53;
  char *v54;
  uint64_t v55;
  Swift::String v56;
  void *object;
  __n128 v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  uint64_t v68;
  char *v69;
  id v70;
  id v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  id v78;
  uint64_t v79;
  uint64_t v80;
  char *v81;
  _QWORD *v82;
  char *v83;
  uint64_t v84;
  uint64_t v85;
  __int128 v86;
  _QWORD v87[2];

  v4 = v3;
  v78 = a2;
  sub_100026DE4(0);
  v84 = *(_QWORD *)(v7 - 8);
  v85 = v7;
  __chkstk_darwin(v7);
  v83 = (char *)&v64 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000076D8(0, &qword_1000ECCD8, (uint64_t (*)(uint64_t))&type metadata accessor for UICellAccessory.LayoutDimension, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
  __chkstk_darwin(v9);
  v81 = (char *)&v64 - v10;
  sub_1000076D8(0, &qword_1000ED1A0, (uint64_t (*)(uint64_t))&type metadata accessor for UICellAccessory.OutlineDisclosureOptions.Style, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
  __chkstk_darwin(v11);
  v77 = (char *)&v64 - v12;
  v13 = type metadata accessor for UICellAccessory.OutlineDisclosureOptions(0);
  v79 = *(_QWORD *)(v13 - 8);
  v80 = v13;
  __chkstk_darwin(v13);
  v69 = (char *)&v64 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for UICellAccessory.DisplayedState(0);
  v72 = *(_QWORD *)(v15 - 8);
  v73 = v15;
  __chkstk_darwin(v15);
  v17 = (char *)&v64 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000076D8(0, &qword_1000ED1A8, (uint64_t (*)(uint64_t))&type metadata accessor for CollectionViewHeaderItem.IconConfiguration, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
  __chkstk_darwin(v18);
  v67 = (char *)&v64 - v19;
  sub_100026F2C(0);
  v21 = v20;
  v22 = *(_QWORD *)(v20 - 8);
  __chkstk_darwin(v20);
  v24 = (uint64_t (**)@<X0>(uint64_t@<X0>, uint64_t@<X8>))((char *)&v64 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0));
  v82 = a1;
  v25 = a1[3];
  v26 = a1[4];
  sub_100012E04(a1, v25);
  swift_retain(v4);
  v27 = (void *)dispatch thunk of HealthExperienceStore.viewContext.getter(v25, v26);
  sub_1000275F4(0, &qword_1000ED1B8, (uint64_t)&type metadata for SourceProfile);
  v29 = swift_allocObject(v28, 40, 7);
  v86 = xmmword_1000B11F0;
  *(_OWORD *)(v29 + 16) = xmmword_1000B11F0;
  *(_QWORD *)(v29 + 32) = HKHealthStore.sourceProfile.getter();
  v30 = (void *)sub_1000272F4((uint64_t)v27, v29);

  swift_bridgeObjectRelease(v29);
  v74 = v4;
  v31 = v4 + qword_1000ED120;
  v32 = type metadata accessor for SidebarSection(0);
  v33 = *(_QWORD *)(v32 - 8);
  v75 = v32;
  v76 = v33;
  v34 = *(void (**)(uint64_t, uint64_t, uint64_t))(v33 + 16);
  v64 = a3;
  v34(v31, a3, v32);
  swift_release(v4);
  sub_100026E60(0);
  v36 = objc_allocWithZone(v35);
  v71 = v30;
  v37 = (void *)FetchedResultsControllerDataSource.init(_:)();
  *v24 = sub_100026B24;
  v24[1] = 0;
  (*(void (**)(uint64_t (**)@<X0>(uint64_t@<X0>, uint64_t@<X8>), _QWORD, uint64_t))(v22 + 104))(v24, enum case for MappedDataSourceWithContext.Transformation.perSection<A, B>(_:), v21);
  sub_100026E84(0, &qword_1000ED180, (uint64_t (*)(uint64_t))sub_100026E60, sub_100026F10, (uint64_t (*)(uint64_t, uint64_t, uint64_t))&type metadata accessor for MappedDataSource);
  swift_allocObject(v38, *(unsigned int *)(v38 + 48), *(unsigned __int16 *)(v38 + 52));
  v70 = v37;
  v68 = MappedDataSource.init(dataSource:transformation:)();
  sub_1000076D8(0, (unint64_t *)&qword_1000ECA70, (uint64_t (*)(uint64_t))sub_100013434, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for _ContiguousArrayStorage);
  v40 = swift_allocObject(v39, 72, 7);
  *(_OWORD *)(v40 + 16) = v86;
  v66 = sub_100026B60();
  v65 = v41;
  v42 = type metadata accessor for CollectionViewHeaderItem.IconConfiguration(0);
  v43 = v67;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v42 - 8) + 56))(v67, 1, 1, v42);
  sub_1000076D8(0, &qword_1000ECCE0, (uint64_t (*)(uint64_t))&type metadata accessor for UICellAccessory, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for _ContiguousArrayStorage);
  v45 = v44;
  v46 = *(_QWORD *)(type metadata accessor for UICellAccessory(0) - 8);
  v47 = swift_allocObject(v45, ((*(unsigned __int8 *)(v46 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v46 + 80))+ *(_QWORD *)(v46 + 72), *(unsigned __int8 *)(v46 + 80) | 7);
  *(_OWORD *)(v47 + 16) = v86;
  v48 = v72;
  v49 = v73;
  (*(void (**)(char *, _QWORD, uint64_t))(v72 + 104))(v17, enum case for UICellAccessory.DisplayedState.always(_:), v73);
  v50 = type metadata accessor for UICellAccessory.OutlineDisclosureOptions.Style(0);
  v51 = v77;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v50 - 8) + 56))(v77, 1, 1, v50);
  v52 = type metadata accessor for UICellAccessory.LayoutDimension(0);
  v53 = v81;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v52 - 8) + 56))(v81, 1, 1, v52);
  v54 = v69;
  UICellAccessory.OutlineDisclosureOptions.init(style:isHidden:reservedLayoutWidth:tintColor:)(v51, 2, v53, 0);
  static UICellAccessory.outlineDisclosure(displayed:options:actionHandler:)(v17, v54, 0, 0);
  (*(void (**)(char *, uint64_t))(v79 + 8))(v54, v80);
  (*(void (**)(char *, uint64_t))(v48 + 8))(v17, v49);
  v55 = v64;
  v56._countAndFlagsBits = sub_100026B60();
  object = v56._object;
  strcpy((char *)v87, "SidebarHeader.");
  HIBYTE(v87[1]) = -18;
  String.append(_:)(v56);
  v58 = swift_bridgeObjectRelease(object);
  v59 = v87[0];
  v60 = v87[1];
  *(_QWORD *)(v40 + 56) = type metadata accessor for CollectionViewHeaderItem(0, v58);
  *(_QWORD *)(v40 + 64) = sub_100013198(&qword_1000ED1C0, (uint64_t (*)(uint64_t))&type metadata accessor for CollectionViewHeaderItem, (uint64_t)&protocol conformance descriptor for CollectionViewHeaderItem);
  sub_100007E0C((_QWORD *)(v40 + 32));
  CollectionViewHeaderItem.init(text:makeConfiguration:respectsSuperviewXLayoutMargins:iconConfig:accessories:automationIdentifier:)(v66, v65, &j___s5UIKit26UIListContentConfigurationV6headerACyFZ, 0, 1, v43, v47, v59, v60);
  v61 = v83;
  (*(void (**)(char *, _QWORD, uint64_t))(v84 + 104))(v83, enum case for AdditionalItemsDataSource.Mode.prepend<A>(_:), v85);
  v62 = AdditionalItemsDataSource.init(_:additionalItems:mode:)(v68, v40, v61);

  (*(void (**)(uint64_t, uint64_t))(v76 + 8))(v55, v75);
  _s6Health23OpenSleepScheduleIntentVwxx_0(v82);
  return v62;
}

uint64_t sub_100026B24@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;

  v4 = type metadata accessor for ArrayDataSourceSection(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
}

uint64_t sub_100026B60()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  int v6;
  objc_class *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  NSBundle v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t countAndFlagsBits;
  unint64_t v16;
  uint64_t v17;

  v1 = v0;
  v2 = type metadata accessor for SidebarSection(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v17 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v5, v1, v2);
  v6 = (*(uint64_t (**)(char *, uint64_t))(v3 + 88))(v5, v2);
  if (v6 == enum case for SidebarSection.healthCategory(_:))
  {
    v7 = (objc_class *)objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
    v8 = 0xD00000000000001FLL;
    v9 = 0xD000000000000023;
    v16 = 0x80000001000B8AA0;
    v10 = 0x80000001000B8A80;
    v11.super.isa = v7;
    v12 = 0;
    v13 = 0xE000000000000000;
  }
  else
  {
    if (v6 != enum case for SidebarSection.healthRecords(_:))
    {
      (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
      return 0;
    }
    v7 = (objc_class *)objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
    v16 = 0xE600000000000000;
    v10 = 0x80000001000B8A60;
    v8 = 0xD00000000000001CLL;
    v11.super.isa = v7;
    v12 = 0;
    v13 = 0xE000000000000000;
    v9 = 0x6573776F7262;
  }
  countAndFlagsBits = NSLocalizedString(_:tableName:bundle:value:comment:)(*(Swift::String *)&v8, (Swift::String_optional)0, v11, *(Swift::String *)&v12, *(Swift::String *)&v9)._countAndFlagsBits;

  return countAndFlagsBits;
}

void sub_100026D1C()
{
  _swift_stdlib_reportUnimplementedInitializer("Health.SidebarFeedItemDataSource", 32, "init(_:additionalItems:mode:)", 29, 0);
  __break(1u);
}

uint64_t sub_100026D48()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0 + qword_1000ED120;
  v2 = type metadata accessor for SidebarSection(0);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
}

uint64_t sub_100026D84()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = AdditionalItemsDataSource.deinit();
  v1 = v0 + qword_1000ED120;
  v2 = type metadata accessor for SidebarSection(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t sub_100026DDC()
{
  return type metadata accessor for SidebarFeedItemDataSource(0);
}

void sub_100026DE4(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_1000ED178)
  {
    sub_100026E84(255, &qword_1000ED180, (uint64_t (*)(uint64_t))sub_100026E60, sub_100026F10, (uint64_t (*)(uint64_t, uint64_t, uint64_t))&type metadata accessor for MappedDataSource);
    v3 = type metadata accessor for AdditionalItemsDataSource.Mode(a1, v2, &protocol witness table for MutableArrayDataSource);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_1000ED178);
  }
}

void sub_100026E60(uint64_t a1)
{
  sub_100026E84(a1, &qword_1000ED188, (uint64_t (*)(uint64_t))&type metadata accessor for FeedItem, sub_100026EF4, (uint64_t (*)(uint64_t, uint64_t, uint64_t))&type metadata accessor for FetchedResultsControllerDataSource);
}

void sub_100026E84(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(void), uint64_t (*a5)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;

  if (!*a2)
  {
    v9 = a3(255);
    v10 = a4();
    v11 = a5(a1, v9, v10);
    if (!v12)
      atomic_store(v11, a2);
  }
}

uint64_t sub_100026EF4()
{
  return sub_100013198(&qword_1000ED190, (uint64_t (*)(uint64_t))&type metadata accessor for FeedItem, (uint64_t)&protocol conformance descriptor for FeedItem);
}

uint64_t sub_100026F10()
{
  return sub_100013198(&qword_1000ED198, (uint64_t (*)(uint64_t))sub_100026E60, (uint64_t)&protocol conformance descriptor for FetchedResultsControllerDataSource<A>);
}

void sub_100026F2C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;

  if (!qword_1000ED1B0)
  {
    sub_100026E60(255);
    v3 = v2;
    v4 = sub_100026F10();
    v5 = type metadata accessor for MappedDataSourceWithContext.Transformation(a1, v3, (char *)&type metadata for () + 8, v4);
    if (!v6)
      atomic_store(v5, (unint64_t *)&qword_1000ED1B0);
  }
}

uint64_t sub_100026F98(void *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  id v6;
  Swift::String v7;
  Swift::String v8;
  Swift::String v9;
  NSString v10;
  id v11;
  void *v12;
  id v13;
  Swift::String v15;

  v2 = type metadata accessor for SidebarDataSourceItem(0);
  v3 = static SidebarDataSourceItem.summarySidebarItemIdentifier.getter();
  v5 = v4;
  v6 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
  v15._object = (void *)0x80000001000B8B10;
  v7._countAndFlagsBits = 0x7972616D6D7553;
  v7._object = (void *)0xE700000000000000;
  v8._countAndFlagsBits = 0;
  v8._object = (void *)0xE000000000000000;
  v15._countAndFlagsBits = 0xD000000000000015;
  v9 = NSLocalizedString(_:tableName:bundle:value:comment:)(v7, (Swift::String_optional)0, (NSBundle)v6, v8, v15);

  v10 = String._bridgeToObjectiveC()();
  v11 = objc_msgSend((id)objc_opt_self(UIImage), "systemImageNamed:", v10);

  if (v11)
  {
    sub_100006D10(0, &qword_1000ED1D8, UIImageSymbolConfiguration_ptr);
    v12 = (void *)static UIImageSymbolConfiguration.sidebarSymbolConfig.getter();
    v13 = objc_msgSend(v11, "imageByApplyingSymbolConfiguration:", v12);

  }
  else
  {
    v13 = 0;
  }
  swift_allocObject(v2, *(unsigned int *)(v2 + 48), *(unsigned __int16 *)(v2 + 52));
  return SidebarDataSourceItem.init(uniqueIdentifier:detailViewController:text:image:)(v3, v5, a1, v9._countAndFlagsBits, v9._object, v13);
}

uint64_t sub_100027144(void *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  id v6;
  Swift::String v7;
  Swift::String v8;
  Swift::String v9;
  NSString v10;
  id v11;
  void *v12;
  id v13;
  Swift::String v15;

  v2 = type metadata accessor for SidebarDataSourceItem(0);
  v3 = static SidebarDataSourceItem.sharingSidebarItemIdentifier.getter();
  v5 = v4;
  v6 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
  v15._object = (void *)0x80000001000B8AF0;
  v7._countAndFlagsBits = 0x676E6972616853;
  v7._object = (void *)0xE700000000000000;
  v8._countAndFlagsBits = 0;
  v8._object = (void *)0xE000000000000000;
  v15._countAndFlagsBits = 0xD000000000000015;
  v9 = NSLocalizedString(_:tableName:bundle:value:comment:)(v7, (Swift::String_optional)0, (NSBundle)v6, v8, v15);

  v10 = String._bridgeToObjectiveC()();
  v11 = objc_msgSend((id)objc_opt_self(UIImage), "systemImageNamed:", v10);

  if (v11)
  {
    sub_100006D10(0, &qword_1000ED1D8, UIImageSymbolConfiguration_ptr);
    v12 = (void *)static UIImageSymbolConfiguration.sidebarSymbolConfig.getter();
    v13 = objc_msgSend(v11, "imageByApplyingSymbolConfiguration:", v12);

  }
  else
  {
    v13 = 0;
  }
  swift_allocObject(v2, *(unsigned int *)(v2 + 48), *(unsigned __int16 *)(v2 + 52));
  return SidebarDataSourceItem.init(uniqueIdentifier:detailViewController:text:image:)(v3, v5, a1, v9._countAndFlagsBits, v9._object, v13);
}

uint64_t sub_1000272F4(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  NSString v9;
  id v10;
  id v11;
  NSString v12;
  id v13;
  id v14;
  NSString v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  uint64_t v34;
  uint64_t v35;

  v34 = a1;
  sub_1000076D8(0, &qword_1000ED1C8, (uint64_t (*)(uint64_t))&type metadata accessor for DateInterval, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
  __chkstk_darwin(v3);
  v5 = (char *)&v34 - v4;
  sub_1000275F4(0, (unint64_t *)&qword_1000ED9C0, (uint64_t)&type metadata for Swift.AnyObject + 8);
  v7 = swift_allocObject(v6, 56, 7);
  *(_OWORD *)(v7 + 16) = xmmword_1000B19C0;
  v8 = objc_allocWithZone((Class)NSSortDescriptor);
  v9 = String._bridgeToObjectiveC()();
  v10 = objc_msgSend(v8, "initWithKey:ascending:", v9, 1, v34);

  *(_QWORD *)(v7 + 32) = v10;
  v11 = objc_allocWithZone((Class)NSSortDescriptor);
  v12 = String._bridgeToObjectiveC()();
  v13 = objc_msgSend(v11, "initWithKey:ascending:", v12, 0);

  *(_QWORD *)(v7 + 40) = v13;
  v14 = objc_allocWithZone((Class)NSSortDescriptor);
  v15 = String._bridgeToObjectiveC()();
  v16 = objc_msgSend(v14, "initWithKey:ascending:selector:", v15, 1, "localizedStandardCompare:");

  *(_QWORD *)(v7 + 48) = v16;
  v35 = v7;
  specialized Array._endMutation()(v17);
  v18 = v35;
  type metadata accessor for FeedItem(0);
  sub_1000076D8(0, &qword_1000ED1D0, (uint64_t (*)(uint64_t))&type metadata accessor for ContentKind, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for _ContiguousArrayStorage);
  v20 = v19;
  v21 = type metadata accessor for ContentKind(0);
  v22 = *(_QWORD *)(v21 - 8);
  v23 = *(unsigned __int8 *)(v22 + 80);
  v24 = (v23 + 32) & ~v23;
  v25 = swift_allocObject(v20, v24 + *(_QWORD *)(v22 + 72), v23 | 7);
  *(_OWORD *)(v25 + 16) = xmmword_1000B11F0;
  v26 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(v22 + 104))(v25 + v24, enum case for ContentKind.sidebar(_:), v21);
  v27 = SidebarSection.keyword.getter(v26);
  v29 = v28;
  v30 = type metadata accessor for DateInterval(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v30 - 8) + 56))(v5, 1, 1, v30);
  v31 = (void *)static FeedItem.predicateFor(contentKinds:keyword:relevantDateRange:sourceProfiles:)(v25, v27, v29, v5, a2);
  swift_bridgeObjectRelease(v25);
  swift_bridgeObjectRelease(v29);
  sub_100027638((uint64_t)v5);
  v32 = NSManagedObjectContext.feedItemsController(sortDescriptors:predicate:sectionNameKeyPath:)(v18, v31, 0, 0);
  swift_bridgeObjectRelease(v18);

  return v32;
}

void sub_1000275F4(uint64_t a1, unint64_t *a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v5;

  if (!*a2)
  {
    v4 = type metadata accessor for _ContiguousArrayStorage(0, a3);
    if (!v5)
      atomic_store(v4, a2);
  }
}

uint64_t sub_100027638(uint64_t a1)
{
  uint64_t v2;

  sub_1000076D8(0, &qword_1000ED1C8, (uint64_t (*)(uint64_t))&type metadata accessor for DateInterval, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void sub_10002768C(uint64_t a1)
{
  sub_1000076D8(a1, &qword_1000ED1E8, (uint64_t (*)(uint64_t))sub_100013434, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Array);
}

uint64_t sub_1000276A8(uint64_t a1, void *a2, uint64_t a3, void *a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  Class isa;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  Class v29;
  id v30;
  uint64_t v31;
  uint64_t KeyPath;
  uint64_t v33;
  uint64_t v34;
  Class v35;
  id v36;
  void *v37;
  uint64_t v38;
  __int128 v40;
  uint64_t v41;
  id v42;
  void *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;

  v5 = v4;
  v43 = a4;
  sub_1000076D8(0, (unint64_t *)&qword_1000ECF98, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
  __chkstk_darwin(v9);
  v11 = (char *)&v40 - v10;
  v12 = type metadata accessor for Date(0);
  v13 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v15 = (char *)&v40 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_BYTE *)(v5 + qword_1000ED1F8) = a1;
  *(_QWORD *)(v5 + qword_1000ED200) = a2;
  sub_10000E8E8(a3, v5 + qword_1000F0E28);
  sub_1000139B4();
  v41 = v16;
  v17 = swift_allocObject(v16, 40, 7);
  v40 = xmmword_1000B1AB0;
  *(_OWORD *)(v17 + 16) = xmmword_1000B1AB0;
  type metadata accessor for Feed(0);
  v42 = a2;
  v18 = static Feed.predicate(kind:associatedProfileIdentifier:feedPrefixKeyPath:)(a1, a2, 0, 0);
  *(_QWORD *)(v17 + 32) = v18;
  v46 = v17;
  specialized Array._endMutation()(v18);
  v44 = a3;
  sub_10000E8E8(a3, (uint64_t)v11);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12) == 1)
  {
    v19 = sub_100014BD8((uint64_t)v11);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v13 + 32))(v15, v11, v12);
    sub_1000076D8(0, &qword_1000ED270, (uint64_t (*)(uint64_t))sub_10001390C, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for _ContiguousArrayStorage);
    v21 = swift_allocObject(v20, 112, 7);
    *(_OWORD *)(v21 + 16) = xmmword_1000B1580;
    sub_100006D10(0, &qword_1000ED260, NSPredicate_ptr);
    *(_QWORD *)(v21 + 56) = &type metadata for String;
    *(_QWORD *)(v21 + 64) = sub_100013CEC();
    *(_QWORD *)(v21 + 32) = 0x6164705565746164;
    *(_QWORD *)(v21 + 40) = 0xEB00000000646574;
    isa = Date._bridgeToObjectiveC()().super.isa;
    *(_QWORD *)(v21 + 96) = sub_100006D10(0, &qword_1000ED288, NSDate_ptr);
    *(_QWORD *)(v21 + 104) = sub_100013A70();
    *(_QWORD *)(v21 + 72) = isa;
    v23 = NSPredicate.init(format:_:)(0x4025203E204B25, 0xE700000000000000, v21);
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v23);
    v25 = *(_QWORD *)((v46 & 0xFFFFFFFFFFFFFF8) + 0x10);
    v24 = *(_QWORD *)((v46 & 0xFFFFFFFFFFFFFF8) + 0x18);
    if (v25 >= v24 >> 1)
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v24 > 1, v25 + 1, 1);
    v26 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v25, v23);
    specialized Array._endMutation()(v26);
    v19 = (*(uint64_t (**)(char *, uint64_t))(v13 + 8))(v15, v12);
  }
  v27 = (void *)static Feed.fetchRequest()(v19);
  v28 = v46;
  sub_100006D10(0, &qword_1000ED260, NSPredicate_ptr);
  v29 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v28);
  v30 = objc_msgSend((id)objc_opt_self(NSCompoundPredicate), "andPredicateWithSubpredicates:", v29);

  objc_msgSend(v27, "setPredicate:", v30);
  v31 = swift_allocObject(v41, 40, 7);
  *(_OWORD *)(v31 + 16) = v40;
  sub_100006D10(0, &qword_1000ED268, NSSortDescriptor_ptr);
  KeyPath = swift_getKeyPath(&unk_1000B1B88);
  v33 = NSSortDescriptor.init<A, B>(keyPath:ascending:)(KeyPath, 0);
  *(_QWORD *)(v31 + 32) = v33;
  v45 = v31;
  specialized Array._endMutation()(v33);
  v34 = v45;
  v35 = Array._bridgeToObjectiveC()().super.isa;
  objc_msgSend(v27, "setSortDescriptors:", v35, swift_bridgeObjectRelease(v34).n128_f64[0]);

  v36 = objc_allocWithZone((Class)NSFetchedResultsController);
  v37 = v43;
  v38 = JustObservingFetchedResultsControllerDataSource.init(frc:)(objc_msgSend(v36, "initWithFetchRequest:managedObjectContext:sectionNameKeyPath:cacheName:", v27, v43, 0, 0));

  sub_100014BD8(v44);
  return v38;
}

void sub_100027B08(id *a1)
{
  id v1;

  v1 = objc_msgSend(*a1, "dateUpdated");
  static Date._unconditionallyBridgeFromObjectiveC(_:)();

}

void sub_100027B54()
{
  _swift_stdlib_reportUnimplementedInitializer("Health.FeedObjectDataSource", 27, "init(frc:)", 10, 0);
  __break(1u);
}

uint64_t sub_100027B80()
{
  uint64_t v0;

  return sub_100014BD8(v0 + qword_1000F0E28);
}

id sub_100027BAC()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for FeedObjectDataSource(0);
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t sub_100027BE0(uint64_t a1)
{

  return sub_100014BD8(a1 + qword_1000F0E28);
}

uint64_t sub_100027C18()
{
  return type metadata accessor for FeedObjectDataSource(0);
}

uint64_t sub_100027C20()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  v0 = type metadata accessor for LayoutConfiguration(0);
  v1 = *(_QWORD *)(v0 - 8);
  v2 = __chkstk_darwin(v0);
  v4 = (char *)&v8 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = static LayoutConfiguration.empty.getter(v2);
  v6 = LayoutConfiguration.layoutSection.getter(v5);
  (*(void (**)(char *, uint64_t))(v1 + 8))(v4, v0);
  return v6;
}

uint64_t sub_100027CB0@<X0>(_QWORD *a1@<X8>)
{
  a1[3] = type metadata accessor for EmptyHeaderItem(0);
  a1[4] = sub_100027CF0();
  sub_100007E0C(a1);
  return EmptyHeaderItem.init()();
}

unint64_t sub_100027CF0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000ED258;
  if (!qword_1000ED258)
  {
    v1 = type metadata accessor for EmptyHeaderItem(255);
    result = swift_getWitnessTable(&protocol conformance descriptor for EmptyHeaderItem, v1);
    atomic_store(result, (unint64_t *)&qword_1000ED258);
  }
  return result;
}

void sub_100027D3C(uint64_t a1, void **a2)
{
  void *v2;
  Class isa;

  v2 = *a2;
  isa = Date._bridgeToObjectiveC()().super.isa;
  objc_msgSend(v2, "setDateUpdated:", isa);

}

uint64_t type metadata accessor for PersistenceDataSource(uint64_t a1)
{
  uint64_t result;

  result = qword_1000ED298;
  if (!qword_1000ED298)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for PersistenceDataSource);
  return result;
}

uint64_t sub_100027DC0(uint64_t a1)
{
  _BYTE v2[8];

  return swift_initClassMetadata2(a1, 0, 0, v2, a1 + qword_1000F0E40);
}

uint64_t sub_100027DFC()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  id v20;
  void (*v21)(_BYTE *, _QWORD);
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void (*v41)(char *, uint64_t);
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  void *v45;
  void *v46;
  Swift::String v47;
  Swift::String v48;
  uint64_t v49;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  __int128 v55;
  void (*v56)(char *, uint64_t);
  uint64_t v57;
  uint64_t v58;
  _BYTE v59[32];
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  void *v63;

  v0 = type metadata accessor for SectionedDataSourceContainerViewType(0);
  v54 = *(_QWORD *)(v0 - 8);
  *(_QWORD *)&v55 = v0;
  __chkstk_darwin(v0);
  v2 = (char *)&v51 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000076D8(0, &qword_1000ECA60, (uint64_t (*)(uint64_t))&type metadata accessor for UIBackgroundConfiguration, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
  __chkstk_darwin(v3);
  v5 = (char *)&v51 - v4;
  v6 = type metadata accessor for CellDeselectionBehavior(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v51 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for UUID(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = (char *)&v51 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v58 = type metadata accessor for ContentConfigurationItem(0);
  v57 = *(_QWORD *)(v58 - 8);
  v14 = __chkstk_darwin(v58);
  v53 = (char *)&v51 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = UUID.init()(v14);
  v17 = UUID.uuidString.getter(v16);
  v51 = v18;
  v52 = v17;
  v56 = *(void (**)(char *, uint64_t))(v11 + 8);
  v56(v13, v10);
  v62 = type metadata accessor for UIListContentConfiguration(0);
  v63 = &protocol witness table for UIListContentConfiguration;
  v19 = sub_100007E0C(&v60);
  static UIListContentConfiguration.cell()(v19);
  UIListContentConfiguration.text.setter(0xD00000000000001ELL, 0x80000001000B8C70);
  v20 = objc_msgSend((id)objc_opt_self(UIColor), "tintColor");
  v21 = (void (*)(_BYTE *, _QWORD))UIListContentConfiguration.textProperties.modify(v59);
  UIListContentConfiguration.TextProperties.color.setter(v20);
  v21(v59, 0);
  *v9 = 1;
  (*(void (**)(_BYTE *, _QWORD, uint64_t))(v7 + 104))(v9, enum case for CellDeselectionBehavior.deselectOnDidSelect(_:), v6);
  v22 = type metadata accessor for UIBackgroundConfiguration(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 56))(v5, 1, 1, v22);
  (*(void (**)(char *, _QWORD, _QWORD))(v54 + 104))(v2, enum case for SectionedDataSourceContainerViewType.collectionView(_:), v55);
  v23 = v53;
  ContentConfigurationItem.init(uniqueIdentifier:contentConfiguration:cellAccessories:cellSelectionHandler:deselectionBehavior:backgroundConfiguration:updateContentConfigurationHandler:container:automationIdentifier:)(v52, v51, &v60, _swiftEmptyArrayStorage, sub_100028288, 0, v9, v5, 0, 0, v2, 0, 0);
  sub_1000076D8(0, &qword_1000ECA68, (uint64_t (*)(uint64_t))&type metadata accessor for ArrayDataSourceSection, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for _ContiguousArrayStorage);
  v25 = v24;
  v26 = type metadata accessor for ArrayDataSourceSection(0);
  v27 = swift_allocObject(v25, ((*(unsigned __int8 *)(*(_QWORD *)(v26 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v26 - 8) + 80))+ *(_QWORD *)(*(_QWORD *)(v26 - 8) + 72), *(unsigned __int8 *)(*(_QWORD *)(v26 - 8) + 80) | 7);
  v55 = xmmword_1000B11F0;
  *(_OWORD *)(v27 + 16) = xmmword_1000B11F0;
  sub_10001E530(0);
  v29 = swift_allocObject(v28, 72, 7);
  *(_OWORD *)(v29 + 16) = v55;
  v30 = v58;
  *(_QWORD *)(v29 + 56) = v58;
  *(_QWORD *)(v29 + 64) = sub_100013198(&qword_1000ECA80, (uint64_t (*)(uint64_t))&type metadata accessor for ContentConfigurationItem, (uint64_t)&protocol conformance descriptor for ContentConfigurationItem);
  v31 = sub_100007E0C((_QWORD *)(v29 + 32));
  v32 = v57;
  v33 = v23;
  v34 = (*(uint64_t (**)(_QWORD *, char *, uint64_t))(v57 + 16))(v31, v23, v30);
  v35 = UUID.init()(v34);
  v36 = UUID.uuidString.getter(v35);
  v38 = v37;
  v39 = v10;
  v40 = v10;
  v41 = v56;
  v56(v13, v40);
  v42 = ArrayDataSourceSection.init(title:arrangedItems:identifier:)(0x6574736973726550, 0xEB0000000065636ELL, v29, v36, v38);
  v60 = 0x3C53447961727241;
  v61 = 0xE800000000000000;
  v43 = UUID.init()(v42);
  v44 = UUID.uuidString.getter(v43);
  v46 = v45;
  v41(v13, v39);
  v47._countAndFlagsBits = v44;
  v47._object = v46;
  String.append(_:)(v47);
  swift_bridgeObjectRelease(v46);
  v48._countAndFlagsBits = 62;
  v48._object = (void *)0xE100000000000000;
  String.append(_:)(v48);
  v49 = ArrayDataSource.init(arrangedSections:identifier:)(v27, v60, v61);
  (*(void (**)(char *, uint64_t))(v32 + 8))(v33, v58);
  return v49;
}

uint64_t sub_100028288()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint8_t *v12;
  uint64_t v14;
  _QWORD v15[5];

  v0 = type metadata accessor for Logger(0);
  v1 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin(v0);
  v3 = (char *)&v15[-1] - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  UIViewController.resolvedHealthExperienceStore.getter(v15);
  v4 = sub_100013100(0, &qword_1000ED2F8, (uint64_t)&protocol descriptor for HealthExperienceStore);
  v5 = type metadata accessor for DiskHealthExperienceStore(0);
  v6 = swift_dynamicCast(&v14, v15, v4, v5, 6);
  if ((v6 & 1) != 0)
  {
    v7 = v14;
    v8 = swift_retain(v14);
    dispatch thunk of DiskHealthExperienceStore.deleteAllObjects()(v8);
    v6 = swift_release(v7);
  }
  else
  {
    v7 = 0;
  }
  v9 = static Logger.general.getter(v6);
  v10 = Logger.logObject.getter(v9);
  v11 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v10, v11))
  {
    v12 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v12 = 0;
    _os_log_impl((void *)&_mh_execute_header, v10, v11, "All Objects deleted!", v12, 2u);
    swift_slowDealloc(v12, -1, -1);
    swift_release(v7);

  }
  else
  {

    swift_release(v7);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v1 + 8))(v3, v0);
}

void sub_100028408(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_100028438(a1, a2, a3, (uint64_t)"init(_:identifier:)", 19);
}

void sub_100028420(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_100028438(a1, a2, a3, (uint64_t)"init(arrangedSections:identifier:)", 34);
}

void sub_100028438(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _swift_stdlib_reportUnimplementedInitializer("Health.PersistenceDataSource", 28, a4, a5, 0);
  __break(1u);
}

uint64_t sub_100028460()
{
  uint64_t v0;

  v0 = ArrayDataSource.deinit();
  return swift_deallocClassInstance(v0, 16, 7);
}

uint64_t sub_10002847C()
{
  return type metadata accessor for PersistenceDataSource(0);
}

unint64_t sub_100028484@<X0>(uint64_t a1@<X3>, uint64_t *a2@<X8>)
{
  swift_getWitnessTable(&unk_1000B1CE8, a1);
  return sub_1000213F0(a2);
}

uint64_t sub_1000284F0(uint64_t a1, uint64_t a2)
{
  uint64_t WitnessTable;

  WitnessTable = swift_getWitnessTable(&unk_1000B1CE8, a2);
  return sub_100020F3C(a1, a2, WitnessTable);
}

uint64_t sub_100028540(uint64_t a1)
{
  uint64_t result;

  *(_QWORD *)(a1 + 8) = sub_100013198(&qword_1000ED2E8, type metadata accessor for PersistenceDataSource, (uint64_t)&unk_1000B1C90);
  result = sub_100013198(&qword_1000ED2F0, type metadata accessor for PersistenceDataSource, (uint64_t)&unk_1000B1CC0);
  *(_QWORD *)(a1 + 24) = result;
  return result;
}

uint64_t sub_10002859C(void *a1)
{
  void *v2;
  id v3;
  id v4;
  id v5;
  _QWORD v7[5];

  v2 = (void *)objc_opt_self(NSUserDefaults);
  v3 = a1;
  v4 = objc_msgSend(v2, "standardUserDefaults");
  v7[3] = type metadata accessor for DefaultCloudSyncStateStore(0);
  v7[4] = &protocol witness table for DefaultCloudSyncStateStore;
  sub_100007E0C(v7);
  DefaultCloudSyncStateStore.init(userDefaults:)(v4);
  v5 = objc_allocWithZone((Class)type metadata accessor for CloudSyncStateObserver(0));
  return CloudSyncStateObserver.init(healthStore:store:)(v3, v7);
}

uint64_t (**AllHealthDataDataSource.cloudSyncStateObserverFactory.unsafeMutableAddressor())()
{
  return &static AllHealthDataDataSource.cloudSyncStateObserverFactory;
}

uint64_t (*static AllHealthDataDataSource.cloudSyncStateObserverFactory.getter())()
{
  uint64_t (*v0)();
  _BYTE v2[24];

  swift_beginAccess(&static AllHealthDataDataSource.cloudSyncStateObserverFactory, v2, 0, 0);
  v0 = static AllHealthDataDataSource.cloudSyncStateObserverFactory;
  swift_retain(qword_1000ED308);
  return v0;
}

uint64_t static AllHealthDataDataSource.cloudSyncStateObserverFactory.setter(uint64_t (*a1)(), uint64_t a2)
{
  uint64_t v4;
  _BYTE v6[24];

  swift_beginAccess(&static AllHealthDataDataSource.cloudSyncStateObserverFactory, v6, 1, 0);
  v4 = qword_1000ED308;
  static AllHealthDataDataSource.cloudSyncStateObserverFactory = a1;
  qword_1000ED308 = a2;
  return swift_release(v4);
}

void *static AllHealthDataDataSource.cloudSyncStateObserverFactory.modify(uint64_t a1)
{
  swift_beginAccess(&static AllHealthDataDataSource.cloudSyncStateObserverFactory, a1, 33, 0);
  return &j__swift_endAccess;
}

uint64_t sub_100028730@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _BYTE v19[24];
  _BYTE v20[24];

  sub_1000076D8(0, &qword_1000ED358, (uint64_t (*)(uint64_t))sub_100014B5C, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
  v4 = __chkstk_darwin(v3);
  v6 = &v19[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v4);
  v8 = &v19[-v7];
  v9 = v1 + qword_1000ED330;
  swift_beginAccess(v1 + qword_1000ED330, v20, 0, 0);
  sub_10002A8E0(v9, (uint64_t)v8);
  sub_100014B5C(0);
  v11 = v10;
  v12 = *(_QWORD *)(v10 - 8);
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v12 + 48))(v8, 1, v10) != 1)
    return (*(uint64_t (**)(uint64_t, _BYTE *, uint64_t))(v12 + 32))(a1, v8, v11);
  sub_100029BC0((uint64_t)v8);
  v13 = type metadata accessor for CloudSyncRestoreState(0);
  v14 = static LegacyObservable.create()(a1, v13);
  v16 = v15;
  swift_retain(v15);
  v17 = dispatch thunk of CloudSyncStateObserver.firstRestoreStateChangeHandler.setter(v14, v16);
  dispatch thunk of CloudSyncStateObserver.startFirstRestoreIfNeeded()(v17);
  swift_release(v16);
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v12 + 16))(v6, a1, v11);
  (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v6, 0, 1, v11);
  swift_beginAccess(v9, v19, 33, 0);
  sub_10002A93C((uint64_t)v6, v9);
  return swift_endAccess(v19);
}

id AllHealthDataDataSource.cloudSyncStateObserver.getter()
{
  uint64_t v0;

  return *(id *)(v0 + direct field offset for AllHealthDataDataSource.cloudSyncStateObserver);
}

uint64_t AllHealthDataDataSource.__allocating_init(healthStore:healthExperienceStore:)(void *a1, _QWORD *a2)
{
  uint64_t v2;

  swift_allocObject(v2, *(unsigned int *)(v2 + 48), *(unsigned __int16 *)(v2 + 52));
  return AllHealthDataDataSource.init(healthStore:healthExperienceStore:)(a1, a2);
}

uint64_t AllHealthDataDataSource.init(healthStore:healthExperienceStore:)(void *a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t (*v21)();
  uint64_t v22;
  id v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  uint64_t v48;
  id v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  void (*v53)(uint64_t, uint64_t);
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  id v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  _QWORD *v62;
  _BYTE v63[40];
  _BYTE v64[24];

  v3 = v2;
  sub_100014B5C(0);
  v7 = v6;
  v8 = *(_QWORD *)(v6 - 8);
  v9 = __chkstk_darwin(v6);
  v60 = (uint64_t)&v55 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v59 = (char *)&v55 - v11;
  sub_100029ADC(0, &qword_1000ED310, (uint64_t (*)(uint64_t, uint64_t, void *))&type metadata accessor for HideableDataSource.Visibility);
  v56 = *(_QWORD *)(v12 - 8);
  v57 = v12;
  __chkstk_darwin(v12);
  v14 = (char *)&v55 - v13;
  sub_100028F60(0, &qword_1000ED318, (uint64_t (*)(uint64_t, uint64_t, uint64_t))&type metadata accessor for HideableDataSource.Visibility);
  v16 = v15;
  v17 = *(_QWORD *)(v15 - 8);
  __chkstk_darwin(v15);
  v19 = (char *)&v55 - v18;
  v61 = v8;
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v8 + 56))(v2 + qword_1000ED330, 1, 1, v7);
  swift_beginAccess(&static AllHealthDataDataSource.cloudSyncStateObserverFactory, v64, 0, 0);
  v21 = static AllHealthDataDataSource.cloudSyncStateObserverFactory;
  v20 = qword_1000ED308;
  swift_retain(v3);
  swift_retain(v20);
  v22 = ((uint64_t (*)(void *))v21)(a1);
  swift_release(v20);
  *(_QWORD *)(v3 + direct field offset for AllHealthDataDataSource.cloudSyncStateObserver) = v22;
  v62 = a2;
  sub_100028F08((uint64_t)a2, (uint64_t)v63);
  v23 = a1;
  v24 = static AllDataSummarySection.Identifier.defaultAllDataSummarySections.getter();
  v25 = type metadata accessor for SnippetAllDataDataSource(0);
  swift_allocObject(v25, *(unsigned int *)(v25 + 48), *(unsigned __int16 *)(v25 + 52));
  v58 = v23;
  v26 = SnippetAllDataDataSource.init(healthStore:healthExperienceStore:allDataSummarySections:additionalPredicates:)(v23, v63, v24, _swiftEmptyArrayStorage);
  type metadata accessor for NoDataDataSource(0);
  v27 = swift_retain(v26);
  v28 = static NoDataDataSource.makeNoDataDataSource()(v27);
  sub_100028E88(0);
  swift_allocObject(v29, *(unsigned int *)(v29 + 48), *(unsigned __int16 *)(v29 + 52));
  v30 = PrimarySecondaryDataSource.init(primaryDataSource:secondaryDataSource:)(v26, v28);
  (*(void (**)(char *, _QWORD, uint64_t))(v17 + 104))(v19, enum case for HideableDataSource.Visibility.visible<A>(_:), v16);
  sub_100028F4C(0);
  swift_allocObject(v31, *(unsigned int *)(v31 + 48), *(unsigned __int16 *)(v31 + 52));
  v32 = swift_retain(v30);
  v33 = HideableDataSource.init(source:visibility:)(v32, v19);
  *(_QWORD *)(v3 + qword_1000F0E58) = v33;
  swift_retain(v33);
  v34 = sub_100029D38(0, 1, 1, _swiftEmptyArrayStorage, (unint64_t *)&qword_1000ECCC8, &qword_1000ECCD0, (uint64_t)&protocol descriptor for SnapshotDataSource);
  v36 = v34[2];
  v35 = v34[3];
  if (v36 >= v35 >> 1)
    v34 = sub_100029D38((_QWORD *)(v35 > 1), v36 + 1, 1, v34, (unint64_t *)&qword_1000ECCC8, &qword_1000ECCD0, (uint64_t)&protocol descriptor for SnapshotDataSource);
  v37 = sub_100013198(&qword_1000ED340, (uint64_t (*)(uint64_t))sub_100028F4C, (uint64_t)&protocol conformance descriptor for HideableDataSource<A>);
  v34[2] = v36 + 1;
  v38 = &v34[2 * v36];
  v38[4] = v33;
  v38[5] = v37;
  v39 = type metadata accessor for CloudSyncAllHealthDataDataSource(0);
  swift_allocObject(v39, *(unsigned int *)(v39 + 48), *(unsigned __int16 *)(v39 + 52));
  v40 = sub_100029390();
  (*(void (**)(char *, _QWORD, uint64_t))(v56 + 104))(v14, enum case for HideableDataSource.Visibility.hidden<A>(_:), v57);
  sub_100029ADC(0, &qword_1000ED348, (uint64_t (*)(uint64_t, uint64_t, void *))&type metadata accessor for HideableDataSource);
  swift_allocObject(v41, *(unsigned int *)(v41 + 48), *(unsigned __int16 *)(v41 + 52));
  v42 = HideableDataSource.init(source:visibility:)(v40, v14);
  *(_QWORD *)(v3 + qword_1000F0E60) = v42;
  v43 = v34[2];
  v44 = v34[3];
  swift_retain(v42);
  if (v43 >= v44 >> 1)
    v34 = sub_100029D38((_QWORD *)(v44 > 1), v43 + 1, 1, v34, (unint64_t *)&qword_1000ECCC8, &qword_1000ECCD0, (uint64_t)&protocol descriptor for SnapshotDataSource);
  v45 = sub_100029B3C();
  v34[2] = v43 + 1;
  v46 = &v34[2 * v43];
  v46[4] = v42;
  v46[5] = v45;
  swift_release(v3);
  v47 = CompoundSectionedDataSource.init(_:)(v34);
  swift_retain(v47);
  v48 = v60;
  sub_100028730(v60);
  v49 = objc_msgSend((id)objc_opt_self(NSOperationQueue), "mainQueue");
  v50 = swift_allocObject(&unk_1000DD4F0, 24, 7);
  swift_weakInit(v50 + 16, v47);
  v51 = sub_100013198((unint64_t *)&qword_1000EC700, (uint64_t (*)(uint64_t))sub_100014B5C, (uint64_t)&protocol conformance descriptor for LegacyObservable<A>);
  v52 = v59;
  ObservableConvertible.afterChange(on:_:)(v49, sub_100029BB8, v50, v7, v51);
  swift_release(v26);
  swift_release(v30);

  swift_release(v50);
  swift_release(v47);
  _s6Health23OpenSleepScheduleIntentVwxx_0(v62);
  v53 = *(void (**)(uint64_t, uint64_t))(v61 + 8);
  v53(v48, v7);
  v53((uint64_t)v52, v7);
  return v47;
}

uint64_t type metadata accessor for CloudSyncAllHealthDataDataSource(uint64_t a1)
{
  return sub_100006A08(a1, (uint64_t *)&unk_1000ED3B0, (uint64_t)&nominal type descriptor for CloudSyncAllHealthDataDataSource);
}

void sub_100028E88(uint64_t a1)
{
  unint64_t v2;
  uint64_t v3;
  _QWORD v4[4];

  if (!qword_1000ED320)
  {
    v4[0] = type metadata accessor for SnippetAllDataDataSource(255);
    v4[1] = type metadata accessor for MutableArrayDataSourceWithLayout(255);
    v4[2] = &protocol witness table for CompoundSectionedDataSource;
    v4[3] = &protocol witness table for MutableArrayDataSource;
    v2 = type metadata accessor for PrimarySecondaryDataSource(a1, v4);
    if (!v3)
      atomic_store(v2, (unint64_t *)&qword_1000ED320);
  }
}

uint64_t sub_100028F08(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 24) = v3;
  *(_QWORD *)(a2 + 32) = *(_QWORD *)(a1 + 32);
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

void sub_100028F4C(uint64_t a1)
{
  sub_100028F60(a1, &qword_1000ED338, (uint64_t (*)(uint64_t, uint64_t, uint64_t))&type metadata accessor for HideableDataSource);
}

void sub_100028F60(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;

  if (!*a2)
  {
    sub_100028E88(255);
    v7 = v6;
    v8 = sub_100013198(&qword_1000ED328, (uint64_t (*)(uint64_t))sub_100028E88, (uint64_t)&protocol conformance descriptor for PrimarySecondaryDataSource<A, B>);
    v9 = a3(a1, v7, v8);
    if (!v10)
      atomic_store(v9, a2);
  }
}

uint64_t sub_100028FDC(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  _BYTE v6[24];

  v3 = a2 + 16;
  swift_beginAccess(a2 + 16, v6, 0, 0);
  result = swift_weakLoadStrong(v3);
  if (result)
  {
    v5 = result;
    sub_100029038(a1);
    return swift_release(v5);
  }
  return result;
}

uint64_t sub_100029038(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;

  sub_100028F60(0, &qword_1000ED318, (uint64_t (*)(uint64_t, uint64_t, uint64_t))&type metadata accessor for HideableDataSource.Visibility);
  v18 = v2;
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v17 - v4;
  sub_100029ADC(0, &qword_1000ED310, (uint64_t (*)(uint64_t, uint64_t, void *))&type metadata accessor for HideableDataSource.Visibility);
  v7 = v6;
  v8 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v10 = (char *)&v17 - v9;
  v11 = type metadata accessor for CloudSyncRestoreState(0);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v14 = (char *)&v17 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v12 + 16))(v14, a1, v11);
  if ((CloudSyncRestoreState.isOngoing.getter(v15) & 1) != 0)
  {
    (*(void (**)(char *, _QWORD, uint64_t))(v8 + 104))(v10, enum case for HideableDataSource.Visibility.visible<A>(_:), v7);
    dispatch thunk of HideableDataSource.visibility.setter(v10);
    (*(void (**)(char *, _QWORD, uint64_t))(v3 + 104))(v5, enum case for HideableDataSource.Visibility.hidden<A>(_:), v18);
    dispatch thunk of HideableDataSource.visibility.setter(v5);
    return (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v14, v11);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
    (*(void (**)(char *, _QWORD, uint64_t))(v8 + 104))(v10, enum case for HideableDataSource.Visibility.hidden<A>(_:), v7);
    dispatch thunk of HideableDataSource.visibility.setter(v10);
    (*(void (**)(char *, _QWORD, uint64_t))(v3 + 104))(v5, enum case for HideableDataSource.Visibility.visible<A>(_:), v18);
    return dispatch thunk of HideableDataSource.visibility.setter(v5);
  }
}

void AllHealthDataDataSource.init(_:)()
{
  _swift_stdlib_reportUnimplementedInitializer("Health.AllHealthDataDataSource", 30, "init(_:)", 8, 0);
  __break(1u);
}

uint64_t sub_100029270()
{
  uint64_t v0;

  sub_100029BC0(v0 + qword_1000ED330);

  swift_release(*(_QWORD *)(v0 + qword_1000F0E58));
  return swift_release(*(_QWORD *)(v0 + qword_1000F0E60));
}

uint64_t AllHealthDataDataSource.deinit()
{
  uint64_t v0;

  v0 = CompoundSectionedDataSource.deinit();
  sub_100029BC0(v0 + qword_1000ED330);

  swift_release(*(_QWORD *)(v0 + qword_1000F0E58));
  swift_release(*(_QWORD *)(v0 + qword_1000F0E60));
  return v0;
}

uint64_t AllHealthDataDataSource.__deallocating_deinit()
{
  uint64_t v0;

  v0 = CompoundSectionedDataSource.deinit();
  sub_100029BC0(v0 + qword_1000ED330);

  swift_release(*(_QWORD *)(v0 + qword_1000F0E58));
  swift_release(*(_QWORD *)(v0 + qword_1000F0E60));
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t sub_100029390()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  id v8;
  Swift::String v9;
  Swift::String v10;
  Swift::String v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  void *v21;
  Swift::String v22;
  Swift::String v23;
  uint64_t v24;
  __int128 v26;
  uint64_t v27;
  unint64_t v28;
  Swift::String v29;

  v0 = type metadata accessor for UUID(0);
  v1 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin(v0);
  v3 = (char *)&v26 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for EmptyStateCollectionViewCellItem(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v26 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
  v9._countAndFlagsBits = 0xD00000000000002ALL;
  v29._countAndFlagsBits = 0xD000000000000052;
  v29._object = (void *)0x80000001000B8F30;
  v9._object = (void *)0x80000001000B8ED0;
  v10._object = (void *)0x80000001000B8F00;
  v10._countAndFlagsBits = 0xD000000000000028;
  v11 = NSLocalizedString(_:tableName:bundle:value:comment:)(v9, (Swift::String_optional)0, (NSBundle)v8, v10, v29);

  EmptyStateCollectionViewCellItem.init(title:showSpinner:)(v11._countAndFlagsBits, v11._object, 1);
  sub_100013A0C(0);
  v13 = swift_allocObject(v12, 40, 7);
  v26 = xmmword_1000B11F0;
  *(_OWORD *)(v13 + 16) = xmmword_1000B11F0;
  sub_100007730(0, (unint64_t *)&qword_1000ECA70, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for _ContiguousArrayStorage);
  v15 = swift_allocObject(v14, 72, 7);
  *(_OWORD *)(v15 + 16) = v26;
  *(_QWORD *)(v15 + 56) = v4;
  *(_QWORD *)(v15 + 64) = sub_100013198(&qword_1000ED438, (uint64_t (*)(uint64_t))&type metadata accessor for EmptyStateCollectionViewCellItem, (uint64_t)&protocol conformance descriptor for EmptyStateCollectionViewCellItem);
  v16 = sub_100007E0C((_QWORD *)(v15 + 32));
  v17 = (*(uint64_t (**)(_QWORD *, char *, uint64_t))(v5 + 16))(v16, v7, v4);
  *(_QWORD *)(v13 + 32) = v15;
  v27 = 0x3C53447961727241;
  v28 = 0xE800000000000000;
  v18 = UUID.init()(v17);
  v19 = UUID.uuidString.getter(v18);
  v21 = v20;
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  v22._countAndFlagsBits = v19;
  v22._object = v21;
  String.append(_:)(v22);
  swift_bridgeObjectRelease(v21);
  v23._countAndFlagsBits = 62;
  v23._object = (void *)0xE100000000000000;
  String.append(_:)(v23);
  v24 = ArrayDataSource.init(_:identifier:)(v13, v27, v28);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  return v24;
}

void sub_100029610(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_100029640(a1, a2, a3, (uint64_t)"init(_:identifier:)", 19);
}

void sub_100029628(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_100029640(a1, a2, a3, (uint64_t)"init(arrangedSections:identifier:)", 34);
}

void sub_100029640(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _swift_stdlib_reportUnimplementedInitializer("Health.CloudSyncAllHealthDataDataSource", 39, a4, a5, 0);
  __break(1u);
}

uint64_t sub_100029668()
{
  uint64_t v0;

  v0 = type metadata accessor for EmptyStateCollectionViewCell(0);
  return UICollectionView.registerCell<A>(_:)(v0, v0, &protocol witness table for EmptyStateCollectionViewCell);
}

uint64_t sub_10002969C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t (*v10)(char *, uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;

  v0 = type metadata accessor for LayoutConfiguration(0);
  v1 = *(_QWORD *)(v0 - 8);
  v2 = __chkstk_darwin(v0);
  v4 = (char *)&v14 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __chkstk_darwin(v2);
  v7 = (char *)&v14 - v6;
  v8 = CollectionViewLayoutContext.environment.getter(v5);
  static LayoutConfiguration.pill(environment:)();
  v9 = swift_unknownObjectRelease(v8);
  LayoutConfiguration.withoutHeader.getter(v9);
  v10 = *(uint64_t (**)(char *, uint64_t))(v1 + 8);
  v11 = v10(v7, v0);
  v12 = LayoutConfiguration.layoutSection.getter(v11);
  v10(v4, v0);
  return v12;
}

_QWORD *sub_100029778(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  size_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      sub_100007730(0, (unint64_t *)&qword_1000ECA70, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for _ContiguousArrayStorage);
      v11 = (_QWORD *)swift_allocObject(v10, 40 * v9 + 32, 7);
      v12 = j__malloc_size(v11);
      v11[2] = v8;
      v11[3] = 2 * ((uint64_t)(v12 - 32) / 40);
      v13 = v11 + 4;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v11 != a4 || v13 >= &a4[5 * v8 + 4])
          memmove(v13, a4 + 4, 40 * v8);
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v11 = _swiftEmptyArrayStorage;
      v13 = &_swiftEmptyArrayStorage[4];
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    sub_10002A198(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease(a4);
    return v11;
  }
  __break(1u);
  return result;
}

uint64_t sub_1000298A4(char a1, int64_t a2, char a3, unint64_t a4)
{
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  size_t v17;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *(_QWORD *)(a4 + 24);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
LABEL_29:
        result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Division by zero", 16, 2, "Swift/IntegerTypes.swift", 24, 2, 14377, 0);
LABEL_31:
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *(_QWORD *)(a4 + 16);
  if (v7 <= v8)
    v9 = *(_QWORD *)(a4 + 16);
  else
    v9 = v7;
  if (!v9)
  {
    v16 = _swiftEmptyArrayStorage;
    goto LABEL_19;
  }
  sub_1000076D8(0, &qword_1000ED400, (uint64_t (*)(uint64_t))&type metadata accessor for ContentConfigurationItem, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for _ContiguousArrayStorage);
  v11 = v10;
  v12 = *(_QWORD *)(type metadata accessor for ContentConfigurationItem(0) - 8);
  v13 = *(_QWORD *)(v12 + 72);
  v14 = *(unsigned __int8 *)(v12 + 80);
  v15 = (v14 + 32) & ~v14;
  v16 = (_QWORD *)swift_allocObject(v11, v15 + v13 * v9, v14 | 7);
  v17 = j__malloc_size(v16);
  if (!v13)
    goto LABEL_29;
  if (v17 - v15 == 0x8000000000000000 && v13 == -1)
  {
    result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Division results in an overflow", 31, 2, "Swift/IntegerTypes.swift", 24, 2, 14384, 0);
    goto LABEL_31;
  }
  v16[2] = v8;
  v16[3] = 2 * ((uint64_t)(v17 - v15) / v13);
LABEL_19:
  v19 = type metadata accessor for ContentConfigurationItem(0);
  v20 = *(_QWORD *)(v19 - 8);
  v21 = (*(unsigned __int8 *)(v20 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v20 + 80);
  v22 = (unint64_t)v16 + v21;
  if ((a1 & 1) != 0)
  {
    v23 = a4 + v21;
    if ((unint64_t)v16 < a4 || v22 >= v23 + *(_QWORD *)(v20 + 72) * v8)
    {
      swift_arrayInitWithTakeFrontToBack((char *)v16 + v21, v23, v8, v19);
    }
    else if (v16 != (_QWORD *)a4)
    {
      swift_arrayInitWithTakeBackToFront((char *)v16 + v21);
    }
    *(_QWORD *)(a4 + 16) = 0;
  }
  else
  {
    sub_10002A2B4(0, v8, v22, a4);
  }
  swift_bridgeObjectRelease(a4);
  return (uint64_t)v16;
}

_QWORD *sub_100029AC0(_QWORD *a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_100029D38(a1, a2, a3, a4, (unint64_t *)&qword_1000ECCC8, &qword_1000ECCD0, (uint64_t)&protocol descriptor for SnapshotDataSource);
}

void sub_100029ADC(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t, void *))
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;

  if (!*a2)
  {
    v6 = type metadata accessor for CloudSyncAllHealthDataDataSource(255);
    v7 = a3(a1, v6, &protocol witness table for ArrayDataSource);
    if (!v8)
      atomic_store(v7, a2);
  }
}

unint64_t sub_100029B3C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000ED350;
  if (!qword_1000ED350)
  {
    sub_100029ADC(255, &qword_1000ED348, (uint64_t (*)(uint64_t, uint64_t, void *))&type metadata accessor for HideableDataSource);
    result = swift_getWitnessTable(&protocol conformance descriptor for HideableDataSource<A>, v1);
    atomic_store(result, (unint64_t *)&qword_1000ED350);
  }
  return result;
}

uint64_t sub_100029B94()
{
  uint64_t v0;

  swift_weakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100029BB8(uint64_t a1)
{
  uint64_t v1;

  return sub_100028FDC(a1, v1);
}

uint64_t sub_100029BC0(uint64_t a1)
{
  uint64_t v2;

  sub_1000076D8(0, &qword_1000ED358, (uint64_t (*)(uint64_t))sub_100014B5C, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t type metadata accessor for AllHealthDataDataSource(uint64_t a1)
{
  return sub_100006A08(a1, (uint64_t *)&unk_1000ED360, (uint64_t)&nominal type descriptor for AllHealthDataDataSource);
}

void sub_100029C28(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  _QWORD v5[4];

  v2 = class metadata base offset for AllHealthDataDataSource;
  sub_1000076D8(319, &qword_1000ED358, (uint64_t (*)(uint64_t))sub_100014B5C, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
  if (v4 <= 0x3F)
  {
    v5[0] = *(_QWORD *)(v3 - 8) + 64;
    v5[1] = (char *)&value witness table for Builtin.UnknownObject + 64;
    v5[2] = (char *)&value witness table for Builtin.NativeObject + 64;
    v5[3] = (char *)&value witness table for Builtin.NativeObject + 64;
    swift_initClassMetadata2(a1, 0, 4, v5, a1 + v2);
  }
}

uint64_t sub_100029CD0()
{
  return type metadata accessor for AllHealthDataDataSource(0);
}

uint64_t sub_100029CD8(uint64_t a1)
{
  _BYTE v2[8];

  return swift_initClassMetadata2(a1, 0, 0, v2, a1 + qword_1000F0E78);
}

uint64_t sub_100029D14()
{
  return type metadata accessor for CloudSyncAllHealthDataDataSource(0);
}

_QWORD *sub_100029D1C(_QWORD *a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_100029D38(a1, a2, a3, a4, &qword_1000ED420, (unint64_t *)&qword_1000ED428, (uint64_t)&protocol descriptor for PluginNotificationCenterDelegateProviding);
}

_QWORD *sub_100029D38(_QWORD *result, int64_t a2, char a3, _QWORD *a4, unint64_t *a5, unint64_t *a6, uint64_t a7)
{
  char v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  int64_t v17;
  uint64_t v18;
  _QWORD *v19;

  v10 = (char)result;
  if ((a3 & 1) == 0)
  {
    v12 = a2;
    goto LABEL_8;
  }
  v11 = a4[3];
  v12 = v11 >> 1;
  if ((uint64_t)(v11 >> 1) >= a2)
    goto LABEL_8;
  if (v12 + 0x4000000000000000 >= 0)
  {
    v12 = v11 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v11 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v12 = a2;
LABEL_8:
    v13 = a4[2];
    if (v12 <= v13)
      v14 = a4[2];
    else
      v14 = v12;
    if (v14)
    {
      sub_10002A6B4(0, a5, a6, a7);
      v16 = (_QWORD *)swift_allocObject(v15, 16 * v14 + 32, 7);
      v17 = j__malloc_size(v16);
      v18 = v17 - 32;
      if (v17 < 32)
        v18 = v17 - 17;
      v16[2] = v13;
      v16[3] = 2 * (v18 >> 4);
      v19 = v16 + 4;
      if ((v10 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v16 = _swiftEmptyArrayStorage;
      v19 = &_swiftEmptyArrayStorage[4];
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v16 != a4 || v19 >= &a4[2 * v13 + 4])
          memmove(v19, a4 + 4, 16 * v13);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_10002A3CC(0, v13, (unint64_t)v19, (uint64_t)a4, a6, a7);
LABEL_24:
    swift_bridgeObjectRelease(a4);
    return v16;
  }
  __break(1u);
  return result;
}

_QWORD *sub_100029E64(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  int64_t v12;
  uint64_t v13;
  _QWORD *v14;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      sub_1000275F4(0, (unint64_t *)&qword_1000EF4C0, (uint64_t)&type metadata for String);
      v11 = (_QWORD *)swift_allocObject(v10, 16 * v9 + 32, 7);
      v12 = j__malloc_size(v11);
      v13 = v12 - 32;
      if (v12 < 32)
        v13 = v12 - 17;
      v11[2] = v8;
      v11[3] = 2 * (v13 >> 4);
      v14 = v11 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v11 = _swiftEmptyArrayStorage;
      v14 = &_swiftEmptyArrayStorage[4];
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v11 != a4 || v14 >= &a4[2 * v8 + 4])
          memmove(v14, a4 + 4, 16 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_10002A4DC(0, v8, (unint64_t)v14, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease(a4);
    return v11;
  }
  __break(1u);
  return result;
}

_QWORD *sub_100029F7C(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  int64_t v12;
  uint64_t v13;
  _QWORD *v14;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      sub_1000275F4(0, &qword_1000ED440, (uint64_t)&type metadata for HKDataType);
      v11 = (_QWORD *)swift_allocObject(v10, 16 * v9 + 32, 7);
      v12 = j__malloc_size(v11);
      v13 = v12 - 32;
      if (v12 < 32)
        v13 = v12 - 17;
      v11[2] = v8;
      v11[3] = 2 * (v13 >> 4);
      v14 = v11 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v11 = _swiftEmptyArrayStorage;
      v14 = &_swiftEmptyArrayStorage[4];
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v11 != a4 || v14 >= &a4[2 * v8 + 4])
          memmove(v14, a4 + 4, 16 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_10002A70C(0, v8, (unint64_t)v14, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease(a4);
    return v11;
  }
  __break(1u);
  return result;
}

_QWORD *sub_10002A094(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  int64_t v8;
  int64_t v9;
  uint64_t v10;
  _QWORD *v11;
  size_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      sub_1000275F4(0, &qword_1000ED430, (uint64_t)&type metadata for RecordTypeEntity);
      v11 = (_QWORD *)swift_allocObject(v10, v9 + 32, 7);
      v12 = j__malloc_size(v11);
      v11[2] = v8;
      v11[3] = 2 * v12 - 64;
      v13 = v11 + 4;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v11 != a4 || v13 >= (_QWORD *)((char *)a4 + v8 + 32))
          memmove(v13, a4 + 4, v8);
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v11 = _swiftEmptyArrayStorage;
      v13 = &_swiftEmptyArrayStorage[4];
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    sub_10002A7FC(0, v8, (char *)v13, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease(a4);
    return v11;
  }
  __break(1u);
  return result;
}

uint64_t sub_10002A198(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v6;
  unint64_t v7;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v4 < 0)
  {
LABEL_9:
    result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
    goto LABEL_11;
  }
  v6 = a4 + 40 * a1 + 32;
  v7 = a3 + 40 * v4;
  if (v6 >= v7 || v6 + 40 * v4 <= a3)
  {
    sub_10001314C(0, (unint64_t *)&qword_1000EEC70, (uint64_t)&protocol descriptor for SectionedDataSourceItem, 1);
    swift_arrayInitWithCopy(a3);
    return v7;
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_10002A2B4(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v4 < 0)
  {
LABEL_9:
    result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
    goto LABEL_11;
  }
  v8 = *(_QWORD *)(type metadata accessor for ContentConfigurationItem(0) - 8);
  v9 = *(unsigned __int8 *)(v8 + 80);
  v10 = *(_QWORD *)(v8 + 72);
  v11 = a4 + ((v9 + 32) & ~v9) + v10 * a1;
  v12 = v10 * v4;
  v13 = a3 + v12;
  v14 = v11 + v12;
  if (v11 >= v13 || v14 <= a3)
  {
    swift_arrayInitWithCopy(a3);
    return v13;
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_10002A3CC(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, unint64_t *a5, uint64_t a6)
{
  uint64_t v6;
  unint64_t v8;
  unint64_t v9;
  uint64_t result;

  v6 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else
  {
    if (v6 < 0)
    {
      result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
      goto LABEL_9;
    }
    v8 = a4 + 16 * a1 + 32;
    v9 = a3 + 16 * v6;
    if (v8 >= v9 || v8 + 16 * v6 <= a3)
    {
      sub_10001314C(0, a5, a6, 0);
      swift_arrayInitWithCopy(a3);
      return v9;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_9:
  __break(1u);
  return result;
}

uint64_t sub_10002A4DC(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else
  {
    if (v4 < 0)
    {
      result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
      goto LABEL_9;
    }
    v5 = a4 + 16 * a1 + 32;
    v6 = a3 + 16 * v4;
    if (v5 >= v6 || v5 + 16 * v4 <= a3)
    {
      swift_arrayInitWithCopy(a3);
      return v6;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_9:
  __break(1u);
  return result;
}

char *sub_10002A5CC(uint64_t a1, uint64_t a2, char *__dst, uint64_t a4)
{
  uint64_t v4;
  char *v5;
  size_t v6;
  char *v7;
  char *result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else
  {
    if (v4 < 0)
    {
      result = (char *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
      goto LABEL_9;
    }
    v5 = (char *)(a4 + 16 * a1 + 32);
    v6 = 16 * v4;
    v7 = &__dst[v6];
    if (v5 >= &__dst[v6] || &v5[v6] <= __dst)
    {
      memcpy(__dst, v5, v6);
      return v7;
    }
  }
  result = (char *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_9:
  __break(1u);
  return result;
}

void sub_10002A6B4(uint64_t a1, unint64_t *a2, unint64_t *a3, uint64_t a4)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;

  if (!*a2)
  {
    v6 = sub_10001314C(255, a3, a4, 0);
    v7 = type metadata accessor for _ContiguousArrayStorage(a1, v6);
    if (!v8)
      atomic_store(v7, a2);
  }
}

uint64_t sub_10002A70C(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else
  {
    if (v4 < 0)
    {
      result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
      goto LABEL_9;
    }
    v5 = a4 + 16 * a1 + 32;
    v6 = a3 + 16 * v4;
    if (v5 >= v6 || v5 + 16 * v4 <= a3)
    {
      swift_arrayInitWithCopy(a3);
      return v6;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_9:
  __break(1u);
  return result;
}

char *sub_10002A7FC(uint64_t a1, uint64_t a2, char *__dst, uint64_t a4)
{
  size_t v4;
  char *v5;
  char *v6;
  char *result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else
  {
    if ((v4 & 0x8000000000000000) != 0)
    {
      result = (char *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
      goto LABEL_9;
    }
    v5 = (char *)(a4 + a1 + 32);
    v6 = &__dst[v4];
    if (v5 >= &__dst[v4] || &v5[v4] <= __dst)
    {
      memcpy(__dst, v5, v4);
      return v6;
    }
  }
  result = (char *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_9:
  __break(1u);
  return result;
}

uint64_t sub_10002A8E0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_1000076D8(0, &qword_1000ED358, (uint64_t (*)(uint64_t))sub_100014B5C, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10002A93C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_1000076D8(0, &qword_1000ED358, (uint64_t (*)(uint64_t))sub_100014B5C, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t SummaryPinnedContentGradientColorProvider.colors.getter()
{
  uint64_t v0;
  _BYTE v2[24];

  swift_beginAccess(v0 + 16, v2, 0, 0);
  return swift_retain(*(_QWORD *)(v0 + 16));
}

uint64_t SummaryPinnedContentGradientColorProvider.colors.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  _BYTE v5[24];

  swift_beginAccess(v1 + 16, v5, 1, 0);
  v3 = *(_QWORD *)(v1 + 16);
  *(_QWORD *)(v1 + 16) = a1;
  return swift_release(v3);
}

void *SummaryPinnedContentGradientColorProvider.colors.modify(uint64_t a1)
{
  uint64_t v1;

  swift_beginAccess(v1 + 16, a1, 33, 0);
  return &j__swift_endAccess;
}

unint64_t sub_10002AA4C()
{
  unint64_t result;
  void *v1;

  result = qword_1000ED418;
  if (!qword_1000ED418)
  {
    v1 = &protocol descriptor for UITraitDefinition;
    result = swift_getExistentialTypeMetadata(1, 0, 1, &v1);
    atomic_store(result, (unint64_t *)&qword_1000ED418);
  }
  return result;
}

uint64_t *SummaryPinnedContentGradientColorProvider.__allocating_init(contentProvider:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;

  v3 = a1[3];
  v4 = a1[4];
  v5 = sub_10002AAF0((uint64_t)a1, v3);
  v6 = sub_10002C4CC(v5, v1, v3, v4);
  _s6Health23OpenSleepScheduleIntentVwxx_0(a1);
  return v6;
}

uint64_t sub_10002AAF0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  if ((*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80) & 0x20000) != 0)
  {
    swift_makeBoxUnique();
    return v2;
  }
  return result;
}

uint64_t *SummaryPinnedContentGradientColorProvider.init(contentProvider:)(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v11;

  v3 = a1[3];
  v4 = a1[4];
  v5 = sub_10002AAF0((uint64_t)a1, v3);
  __chkstk_darwin(v5);
  v7 = (char *)&v11 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v8 + 16))(v7);
  v9 = sub_10002C340((uint64_t)v7, v1, v3, v4);
  _s6Health23OpenSleepScheduleIntentVwxx_0(a1);
  return v9;
}

uint64_t sub_10002ABB8(unint64_t *a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  _BYTE v9[24];
  _BYTE v10[24];

  v2 = *a1;
  v3 = a2 + 16;
  swift_beginAccess(a2 + 16, v10, 0, 0);
  result = swift_weakLoadStrong(v3);
  if (result)
  {
    v5 = result;
    swift_beginAccess(result + 16, v9, 0, 0);
    v6 = *(_QWORD *)(v5 + 16);
    swift_retain(v6);
    swift_release(v5);
    v7 = _s6Health41SummaryPinnedContentGradientColorProviderC6colors4fromSaySo7UIColorCGSay0A8Platform8FeedItemCG_tFZ_0(v2);
    v8 = v7;
    CurrentValueSubject.send(_:)(&v8);
    swift_bridgeObjectRelease(v7);
    return swift_release(v6);
  }
  return result;
}

void sub_10002AC68(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

_QWORD *SummaryPinnedContentGradientColorProvider.deinit()
{
  _QWORD *v0;

  swift_release(v0[2]);
  _s6Health23OpenSleepScheduleIntentVwxx_0(v0 + 3);
  swift_bridgeObjectRelease(v0[8]);
  return v0;
}

uint64_t SummaryPinnedContentGradientColorProvider.__deallocating_deinit()
{
  _QWORD *v0;

  swift_release(v0[2]);
  _s6Health23OpenSleepScheduleIntentVwxx_0(v0 + 3);
  swift_bridgeObjectRelease(v0[8]);
  return swift_deallocClassInstance(v0, 72, 7);
}

uint64_t sub_10002ACD0()
{
  return _s6Health41SummaryPinnedContentGradientColorProviderC27configureForTraitCollectionyySo07UITraitK0CF_0();
}

Swift::Int sub_10002ACF0(_QWORD *a1)
{
  _QWORD *v2;
  uint64_t v3;
  Swift::Int result;
  uint64_t v5[2];

  v2 = (_QWORD *)*a1;
  if ((swift_isUniquelyReferenced_nonNull_native(*a1) & 1) == 0)
    v2 = (_QWORD *)sub_100079EE8(v2);
  v3 = v2[2];
  v5[0] = (uint64_t)(v2 + 4);
  v5[1] = v3;
  result = sub_10002AD58(v5);
  *a1 = v2;
  return result;
}

Swift::Int sub_10002AD58(uint64_t *a1)
{
  uint64_t v1;
  Swift::Int v2;
  Swift::Int result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  Swift::Int v8;
  char *v9;
  unint64_t v10;
  Swift::Int v11;
  Swift::Int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  id v18;
  id v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  id v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  id v33;
  id v34;
  id v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  id v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  int v44;
  uint64_t v45;
  uint64_t v46;
  Swift::Int v47;
  Swift::Int v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  Swift::Int v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  void *v56;
  uint64_t v57;
  Swift::Int v58;
  uint64_t v59;
  uint64_t v60;
  void *v61;
  id v62;
  id v63;
  id v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  void *v68;
  id v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  char v74;
  unint64_t v75;
  unint64_t v76;
  char *v77;
  char *v78;
  char *v79;
  unint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  char v84;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  BOOL v91;
  unint64_t v92;
  char *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  char *v99;
  uint64_t v100;
  uint64_t v101;
  BOOL v102;
  uint64_t v103;
  char v104;
  char *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  BOOL v109;
  uint64_t v110;
  uint64_t v111;
  char *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  char *v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  unint64_t v120;
  char *v121;
  uint64_t v122;
  char *v123;
  uint64_t v124;
  unint64_t v125;
  char *v126;
  uint64_t v127;
  unint64_t v128;
  char *v129;
  uint64_t v130;
  uint64_t v131;
  char *v132;
  unint64_t v133;
  uint64_t v134;
  Swift::Int v135;
  _QWORD *v137;
  Swift::Int v138;
  Swift::Int v139;
  char *v140;
  Swift::Int v141;
  uint64_t v142;
  id *v143;
  uint64_t v144;
  uint64_t v145;
  Swift::Int v146;
  Swift::Int v147;
  Swift::Int v148;
  void *v149;
  int v150;
  void *v151;

  v2 = a1[1];
  result = _minimumMergeRunLength(_:)(v2);
  if (result >= v2)
  {
    if ((v2 & 0x8000000000000000) == 0)
    {
      if (v2)
        return sub_10002B6C0(0, v2, 1, a1);
      return result;
    }
    goto LABEL_162;
  }
  if (v2 >= 0)
    v4 = v2;
  else
    v4 = v2 + 1;
  if (v2 < -1)
    goto LABEL_170;
  v135 = result;
  v144 = v1;
  if (v2 < 2)
  {
    v7 = _swiftEmptyArrayStorage;
    v143 = (id *)&_swiftEmptyArrayStorage[4];
    if (v2 != 1)
    {
      v10 = _swiftEmptyArrayStorage[2];
      v9 = (char *)_swiftEmptyArrayStorage;
LABEL_128:
      v137 = v7;
      if (v10 < 2)
      {
LABEL_139:
        swift_bridgeObjectRelease(v9);
        v137[2] = 0;
        return swift_bridgeObjectRelease(v137);
      }
      v127 = *a1;
      while (1)
      {
        v128 = v10 - 2;
        if (v10 < 2)
          break;
        if (!v127)
          goto LABEL_169;
        v129 = v9;
        v130 = *(_QWORD *)&v9[16 * v128 + 32];
        v131 = *(_QWORD *)&v9[16 * v10 + 24];
        sub_10002B86C((id *)(v127 + 16 * v130), (id *)(v127 + 16 * *(_QWORD *)&v9[16 * v10 + 16]), (id *)(v127 + 16 * v131), v143);
        if (v144)
        {
          v126 = v129;
          goto LABEL_125;
        }
        if (v131 < v130)
          goto LABEL_158;
        if ((swift_isUniquelyReferenced_nonNull_native(v129) & 1) == 0)
          v129 = sub_100079EC0((uint64_t)v129);
        if (v128 >= *((_QWORD *)v129 + 2))
          goto LABEL_159;
        v132 = &v129[16 * v128 + 32];
        *(_QWORD *)v132 = v130;
        *((_QWORD *)v132 + 1) = v131;
        v133 = *((_QWORD *)v129 + 2);
        if (v10 > v133)
          goto LABEL_160;
        memmove(&v129[16 * v10 + 16], &v129[16 * v10 + 32], 16 * (v133 - v10));
        v9 = v129;
        *((_QWORD *)v129 + 2) = v133 - 1;
        v10 = v133 - 1;
        if (v133 <= 2)
          goto LABEL_139;
      }
LABEL_157:
      __break(1u);
LABEL_158:
      __break(1u);
LABEL_159:
      __break(1u);
LABEL_160:
      __break(1u);
LABEL_161:
      __break(1u);
LABEL_162:
      __break(1u);
LABEL_163:
      __break(1u);
LABEL_164:
      __break(1u);
LABEL_165:
      __break(1u);
LABEL_166:
      __break(1u);
LABEL_167:
      __break(1u);
LABEL_168:
      __break(1u);
LABEL_169:
      __break(1u);
LABEL_170:
      result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Can't construct Array with count < 0", 36, 2, "Swift/Array.swift", 17, 2, 936, 0);
      __break(1u);
      return result;
    }
  }
  else
  {
    v5 = v4 >> 1;
    sub_100013B20(0);
    v7 = (_QWORD *)static Array._allocateBufferUninitialized(minimumCapacity:)(v5, v6);
    v7[2] = v5;
    v143 = (id *)(v7 + 4);
  }
  v137 = v7;
  v8 = 0;
  v145 = *a1;
  v134 = *a1 + 24;
  v9 = (char *)_swiftEmptyArrayStorage;
  v139 = v2;
  while (2)
  {
    v11 = v8;
    v12 = v8 + 1;
    v140 = v9;
    v141 = v8;
    if (v8 + 1 < v2)
    {
      v13 = v145 + 16 * v12;
      v14 = *(_QWORD *)(v13 + 8);
      v15 = v145 + 16 * v8;
      v16 = *(_QWORD *)(v15 + 8);
      if (v14 == v16)
      {
        v17 = *(void **)v15;
        v18 = *(id *)v13;
        v19 = v17;
        v149 = v18;
        v20 = objc_msgSend(v18, "categoryName");
        v21 = static String._unconditionallyBridgeFromObjectiveC(_:)(v20);
        v23 = v22;

        v24 = objc_msgSend(v19, "categoryName");
        v25 = static String._unconditionallyBridgeFromObjectiveC(_:)(v24);
        v27 = v26;

        if (v21 == v25 && v23 == v27)
        {
          v29 = 0;
          v27 = v23;
        }
        else
        {
          v29 = _stringCompareWithSmolCheck(_:_:expecting:)(v21, v23, v25, v27, 1);
        }
        v2 = v139;
        swift_bridgeObjectRelease(v23);
        swift_bridgeObjectRelease(v27);

      }
      else
      {
        v29 = v16 < v14;
      }
      v12 = v11 + 2;
      v9 = v140;
      if (v11 + 2 >= v2)
      {
LABEL_39:
        if ((v29 & 1) != 0)
        {
LABEL_42:
          if (v12 < v11)
            goto LABEL_163;
          if (v11 < v12)
          {
            v45 = 16 * v12;
            v46 = 16 * v11;
            v47 = v12;
            v48 = v11;
            do
            {
              if (v48 != --v47)
              {
                if (!v145)
                  goto LABEL_168;
                v49 = v145 + v45;
                v50 = *(_QWORD *)(v145 + v46);
                v51 = *(_QWORD *)(v145 + v46 + 8);
                *(_OWORD *)(v145 + v46) = *(_OWORD *)(v145 + v45 - 16);
                *(_QWORD *)(v49 - 16) = v50;
                *(_QWORD *)(v49 - 8) = v51;
              }
              ++v48;
              v45 -= 16;
              v46 += 16;
            }
            while (v48 < v47);
            v9 = v140;
          }
        }
      }
      else
      {
        v30 = v134 + 16 * v11;
        v150 = v29;
        while (1)
        {
          v31 = *(_QWORD *)(v30 + 16);
          if (v31 == *(_QWORD *)v30)
          {
            v146 = v12;
            v32 = *(void **)(v30 - 8);
            v33 = *(id *)(v30 + 8);
            v34 = v32;
            v35 = objc_msgSend(v33, "categoryName");
            v36 = static String._unconditionallyBridgeFromObjectiveC(_:)(v35);
            v38 = v37;

            v39 = objc_msgSend(v34, "categoryName");
            v40 = static String._unconditionallyBridgeFromObjectiveC(_:)(v39);
            v42 = v41;

            if (v36 == v40 && v38 == v42)
            {
              v44 = 0;
              v42 = v38;
            }
            else
            {
              v44 = _stringCompareWithSmolCheck(_:_:expecting:)(v36, v38, v40, v42, 1);
            }
            v29 = v150;
            swift_bridgeObjectRelease(v38);
            swift_bridgeObjectRelease(v42);

            v12 = v146;
            v11 = v141;
          }
          else
          {
            v44 = *(_QWORD *)v30 < v31;
          }
          v9 = v140;
          if (((v29 ^ v44) & 1) != 0)
            break;
          ++v12;
          v30 += 16;
          if (v139 == v12)
          {
            v2 = v139;
            v12 = v139;
            goto LABEL_39;
          }
        }
        v2 = v139;
        if ((v29 & 1) != 0)
          goto LABEL_42;
      }
    }
    if (v12 >= v2)
      goto LABEL_74;
    if (__OFSUB__(v12, v11))
      goto LABEL_161;
    if (v12 - v11 >= v135)
      goto LABEL_74;
    v52 = v11 + v135;
    if (__OFADD__(v11, v135))
      goto LABEL_164;
    if (v52 >= v2)
      v52 = v2;
    if (v52 < v11)
      goto LABEL_165;
    if (v12 == v52)
      goto LABEL_74;
    v53 = v145;
    v54 = v145 + 16 * v12;
    v138 = v52;
    while (2)
    {
      v55 = v53 + 16 * v12;
      v56 = *(void **)v55;
      v57 = *(_QWORD *)(v55 + 8);
      v58 = v11;
      v142 = v54;
      v59 = v54;
      v147 = v12;
      while (1)
      {
        v61 = *(void **)(v59 - 16);
        v60 = *(_QWORD *)(v59 - 8);
        if (v57 != v60)
        {
          if (v60 >= v57)
            goto LABEL_60;
          goto LABEL_70;
        }
        v62 = v56;
        v63 = v61;
        v151 = v62;
        v64 = objc_msgSend(v62, "categoryName");
        v65 = static String._unconditionallyBridgeFromObjectiveC(_:)(v64);
        v67 = v66;

        v68 = v63;
        v69 = objc_msgSend(v63, "categoryName");
        v70 = static String._unconditionallyBridgeFromObjectiveC(_:)(v69);
        v72 = v71;

        if (v65 == v70 && v67 == v72)
          break;
        v74 = _stringCompareWithSmolCheck(_:_:expecting:)(v65, v67, v70, v72, 1);

        swift_bridgeObjectRelease(v67);
        swift_bridgeObjectRelease(v72);
        v53 = v145;
        v12 = v147;
        if ((v74 & 1) == 0)
          goto LABEL_60;
LABEL_70:
        if (!v53)
          goto LABEL_166;
        v56 = *(void **)v59;
        v57 = *(_QWORD *)(v59 + 8);
        *(_OWORD *)v59 = *(_OWORD *)(v59 - 16);
        *(_QWORD *)(v59 - 8) = v57;
        *(_QWORD *)(v59 - 16) = v56;
        v59 -= 16;
        if (v12 == ++v58)
          goto LABEL_60;
      }

      swift_bridgeObjectRelease_n(v67, 2);
      v53 = v145;
      v12 = v147;
LABEL_60:
      ++v12;
      v11 = v141;
      v54 = v142 + 16;
      if (v12 != v138)
        continue;
      break;
    }
    v12 = v138;
    v9 = v140;
LABEL_74:
    if (v12 < v11)
    {
LABEL_156:
      __break(1u);
      goto LABEL_157;
    }
    if ((swift_isUniquelyReferenced_nonNull_native(v9) & 1) != 0)
      v9 = v140;
    else
      v9 = sub_100079C78(0, *((_QWORD *)v140 + 2) + 1, 1, v140);
    v76 = *((_QWORD *)v9 + 2);
    v75 = *((_QWORD *)v9 + 3);
    v10 = v76 + 1;
    if (v76 >= v75 >> 1)
      v9 = sub_100079C78((char *)(v75 > 1), v76 + 1, 1, v9);
    *((_QWORD *)v9 + 2) = v10;
    v77 = v9 + 32;
    v78 = &v9[16 * v76 + 32];
    *(_QWORD *)v78 = v11;
    *((_QWORD *)v78 + 1) = v12;
    v148 = v12;
    if (!v76)
    {
      v10 = 1;
LABEL_14:
      v2 = v139;
      v8 = v148;
      v7 = v137;
      if (v148 >= v139)
        goto LABEL_128;
      continue;
    }
    break;
  }
  v79 = v9;
  while (2)
  {
    v80 = v10 - 1;
    if (v10 >= 4)
    {
      v85 = &v77[16 * v10];
      v86 = *((_QWORD *)v85 - 8);
      v87 = *((_QWORD *)v85 - 7);
      v91 = __OFSUB__(v87, v86);
      v88 = v87 - v86;
      if (v91)
        goto LABEL_145;
      v90 = *((_QWORD *)v85 - 6);
      v89 = *((_QWORD *)v85 - 5);
      v91 = __OFSUB__(v89, v90);
      v83 = v89 - v90;
      v84 = v91;
      if (v91)
        goto LABEL_146;
      v92 = v10 - 2;
      v93 = &v77[16 * v10 - 32];
      v95 = *(_QWORD *)v93;
      v94 = *((_QWORD *)v93 + 1);
      v91 = __OFSUB__(v94, v95);
      v96 = v94 - v95;
      if (v91)
        goto LABEL_148;
      v91 = __OFADD__(v83, v96);
      v97 = v83 + v96;
      if (v91)
        goto LABEL_151;
      if (v97 >= v88)
      {
        v116 = &v77[16 * v80];
        v118 = *(_QWORD *)v116;
        v117 = *((_QWORD *)v116 + 1);
        v91 = __OFSUB__(v117, v118);
        v119 = v117 - v118;
        v98 = v145;
        if (v91)
          goto LABEL_155;
        v109 = v83 < v119;
      }
      else
      {
LABEL_94:
        v98 = v145;
        if ((v84 & 1) != 0)
          goto LABEL_147;
        v92 = v10 - 2;
        v99 = &v77[16 * v10 - 32];
        v101 = *(_QWORD *)v99;
        v100 = *((_QWORD *)v99 + 1);
        v102 = __OFSUB__(v100, v101);
        v103 = v100 - v101;
        v104 = v102;
        if (v102)
          goto LABEL_150;
        v105 = &v77[16 * v80];
        v107 = *(_QWORD *)v105;
        v106 = *((_QWORD *)v105 + 1);
        v91 = __OFSUB__(v106, v107);
        v108 = v106 - v107;
        if (v91)
          goto LABEL_153;
        if (__OFADD__(v103, v108))
          goto LABEL_154;
        if (v103 + v108 < v83)
          goto LABEL_107;
        v109 = v83 < v108;
      }
      if (v109)
        v80 = v92;
    }
    else
    {
      if (v10 == 3)
      {
        v82 = *((_QWORD *)v9 + 4);
        v81 = *((_QWORD *)v9 + 5);
        v91 = __OFSUB__(v81, v82);
        v83 = v81 - v82;
        v84 = v91;
        goto LABEL_94;
      }
      v110 = *((_QWORD *)v9 + 4);
      v111 = *((_QWORD *)v9 + 5);
      v91 = __OFSUB__(v111, v110);
      v103 = v111 - v110;
      v104 = v91;
      v98 = v145;
LABEL_107:
      if ((v104 & 1) != 0)
        goto LABEL_149;
      v112 = &v77[16 * v80];
      v114 = *(_QWORD *)v112;
      v113 = *((_QWORD *)v112 + 1);
      v91 = __OFSUB__(v113, v114);
      v115 = v113 - v114;
      if (v91)
        goto LABEL_152;
      if (v115 < v103)
      {
        v9 = v79;
        goto LABEL_14;
      }
    }
    v120 = v80 - 1;
    if (v80 - 1 >= v10)
    {
      __break(1u);
LABEL_142:
      __break(1u);
LABEL_143:
      __break(1u);
LABEL_144:
      __break(1u);
LABEL_145:
      __break(1u);
LABEL_146:
      __break(1u);
LABEL_147:
      __break(1u);
LABEL_148:
      __break(1u);
LABEL_149:
      __break(1u);
LABEL_150:
      __break(1u);
LABEL_151:
      __break(1u);
LABEL_152:
      __break(1u);
LABEL_153:
      __break(1u);
LABEL_154:
      __break(1u);
LABEL_155:
      __break(1u);
      goto LABEL_156;
    }
    if (!v98)
      goto LABEL_167;
    v121 = &v77[16 * v120];
    v122 = *(_QWORD *)v121;
    v123 = &v77[16 * v80];
    v124 = *((_QWORD *)v123 + 1);
    sub_10002B86C((id *)(v98 + 16 * *(_QWORD *)v121), (id *)(v98 + 16 * *(_QWORD *)v123), (id *)(v98 + 16 * v124), v143);
    if (!v144)
    {
      if (v124 < v122)
        goto LABEL_142;
      if (v80 > *((_QWORD *)v79 + 2))
        goto LABEL_143;
      *(_QWORD *)v121 = v122;
      *(_QWORD *)&v77[16 * v120 + 8] = v124;
      v125 = *((_QWORD *)v79 + 2);
      if (v80 >= v125)
        goto LABEL_144;
      v144 = 0;
      v10 = v125 - 1;
      memmove(&v77[16 * v80], v123 + 16, 16 * (v125 - 1 - v80));
      v9 = v79;
      *((_QWORD *)v79 + 2) = v125 - 1;
      if (v125 <= 2)
        goto LABEL_14;
      continue;
    }
    break;
  }
  v126 = v79;
LABEL_125:
  swift_bridgeObjectRelease(v126);
  v137[2] = 0;
  return swift_bridgeObjectRelease(v137);
}

uint64_t sub_10002B6C0(uint64_t result, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  id v12;
  id v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v24;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;

  v26 = result;
  if (a3 != a2)
  {
    v4 = *a4;
    v5 = *a4 + 16 * a3;
    v28 = *a4;
LABEL_6:
    v6 = v4 + 16 * a3;
    v7 = *(void **)v6;
    v8 = *(_QWORD *)(v6 + 8);
    v9 = v26;
    v27 = v5;
    v29 = a3;
    while (1)
    {
      v11 = *(void **)(v5 - 16);
      v10 = *(_QWORD *)(v5 - 8);
      if (v8 == v10)
      {
        v12 = v7;
        v13 = v11;
        v30 = v12;
        v14 = objc_msgSend(v12, "categoryName");
        v15 = static String._unconditionallyBridgeFromObjectiveC(_:)(v14);
        v17 = v16;

        v18 = v13;
        v19 = objc_msgSend(v13, "categoryName");
        v20 = static String._unconditionallyBridgeFromObjectiveC(_:)(v19);
        v22 = v21;

        if (v15 == v20 && v17 == v22)
        {

          result = swift_bridgeObjectRelease_n(v17, 2);
          v4 = v28;
          a3 = v29;
LABEL_5:
          ++a3;
          v5 = v27 + 16;
          if (a3 == a2)
            return result;
          goto LABEL_6;
        }
        v24 = _stringCompareWithSmolCheck(_:_:expecting:)(v15, v17, v20, v22, 1);

        swift_bridgeObjectRelease(v17);
        result = swift_bridgeObjectRelease(v22);
        v4 = v28;
        a3 = v29;
        if ((v24 & 1) == 0)
          goto LABEL_5;
      }
      else if (v10 >= v8)
      {
        goto LABEL_5;
      }
      if (!v4)
        break;
      v7 = *(void **)v5;
      v8 = *(_QWORD *)(v5 + 8);
      *(_OWORD *)v5 = *(_OWORD *)(v5 - 16);
      *(_QWORD *)(v5 - 8) = v8;
      *(_QWORD *)(v5 - 16) = v7;
      v5 -= 16;
      if (a3 == ++v9)
        goto LABEL_5;
    }
    __break(1u);
  }
  return result;
}

uint64_t sub_10002B86C(id *__src, id *a2, id *a3, id *__dst)
{
  id *v4;
  id *v5;
  id *v6;
  int64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  id *v13;
  id v14;
  id v15;
  id *v16;
  id v17;
  id v18;
  id v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  id v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v30;
  id *v31;
  id *v32;
  id *v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  id v37;
  id v38;
  id v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  id v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char v48;
  id *v49;
  uint64_t result;
  id *v51;
  void *v52;
  id *v53;
  void *v54;
  id *v55;
  id *v56;
  id *v57;
  id *v58;
  char *v59;
  id *v60;
  id *v61;

  v4 = __dst;
  v5 = a2;
  v6 = __src;
  v7 = (char *)a2 - (char *)__src;
  v8 = (char *)a2 - (char *)__src + 15;
  if ((char *)a2 - (char *)__src >= 0)
    v8 = (char *)a2 - (char *)__src;
  v9 = v8 >> 4;
  v10 = (char *)a3 - (char *)a2;
  v11 = (char *)a3 - (char *)a2 + 15;
  if ((char *)a3 - (char *)a2 >= 0)
    v11 = (char *)a3 - (char *)a2;
  v12 = v11 >> 4;
  v61 = __src;
  v60 = __dst;
  v57 = a3;
  if (v9 >= v11 >> 4)
  {
    if (v10 < -15)
      goto LABEL_60;
    if (__dst != a2 || &a2[2 * v12] <= __dst)
    {
      memmove(__dst, a2, 16 * v12);
      a3 = v57;
    }
    v32 = &v4[2 * v12];
    v59 = (char *)v32;
    v61 = v5;
    if (v6 >= v5 || v10 < 16)
    {
LABEL_59:
      sub_100079D70((void **)&v61, (const void **)&v60, &v59);
      return 1;
    }
    v33 = v5;
    v51 = v4;
    v56 = v6;
    while (1)
    {
      v34 = (uint64_t)*(v32 - 1);
      v36 = *(v33 - 2);
      v35 = (uint64_t)*(v33 - 1);
      v33 -= 2;
      if (v34 == v35)
      {
        v58 = a3;
        v37 = *(v32 - 2);
        v38 = v36;
        v52 = v37;
        v39 = objc_msgSend(v37, "categoryName");
        v40 = static String._unconditionallyBridgeFromObjectiveC(_:)(v39);
        v42 = v41;

        v54 = v38;
        v43 = objc_msgSend(v38, "categoryName");
        v44 = static String._unconditionallyBridgeFromObjectiveC(_:)(v43);
        v46 = v45;

        if (v40 == v44 && v42 == v46)
        {

          swift_bridgeObjectRelease_n(v42, 2);
          v6 = v56;
          a3 = v58;
          v49 = v58 - 2;
          v4 = v51;
LABEL_53:
          v59 = (char *)(v32 - 2);
          if (a3 < v32 || v49 >= v32 || a3 != v32)
            *(_OWORD *)v49 = *((_OWORD *)v32 - 1);
          v33 = v5;
          v32 -= 2;
          if (v5 <= v6)
            goto LABEL_59;
          goto LABEL_58;
        }
        v48 = _stringCompareWithSmolCheck(_:_:expecting:)(v40, v42, v44, v46, 1);

        swift_bridgeObjectRelease(v42);
        swift_bridgeObjectRelease(v46);
        v6 = v56;
        a3 = v58;
        v49 = v58 - 2;
        v4 = v51;
        if ((v48 & 1) == 0)
          goto LABEL_53;
      }
      else
      {
        v49 = a3 - 2;
        if (v35 >= v34)
          goto LABEL_53;
      }
      if (a3 != v5 || v49 >= v5)
        *(_OWORD *)v49 = *(_OWORD *)v33;
      v61 = v33;
      if (v33 <= v6)
        goto LABEL_59;
LABEL_58:
      v5 = v33;
      a3 = v49;
      if (v32 <= v4)
        goto LABEL_59;
    }
  }
  if (v7 >= -15)
  {
    if (__dst != __src || &__src[2 * v9] <= __dst)
    {
      memmove(__dst, __src, 16 * v9);
      a3 = v57;
    }
    v13 = &v4[2 * v9];
    v59 = (char *)v13;
    if (v5 < a3 && v7 >= 16)
    {
      v53 = &v4[2 * v9];
      while (1)
      {
        v14 = v5[1];
        v15 = v4[1];
        if (v14 == v15)
        {
          v55 = v6;
          v16 = v4;
          v17 = *v4;
          v18 = *v5;
          v19 = v17;
          v20 = objc_msgSend(v18, "categoryName");
          v21 = static String._unconditionallyBridgeFromObjectiveC(_:)(v20);
          v23 = v22;

          v24 = v19;
          v25 = objc_msgSend(v19, "categoryName");
          v26 = static String._unconditionallyBridgeFromObjectiveC(_:)(v25);
          v28 = v27;

          if (v21 == v26 && v23 == v28)
          {

            swift_bridgeObjectRelease_n(v23, 2);
            v4 = v16;
            v6 = v55;
            a3 = v57;
            v13 = v53;
          }
          else
          {
            v30 = _stringCompareWithSmolCheck(_:_:expecting:)(v21, v23, v26, v28, 1);

            swift_bridgeObjectRelease(v23);
            swift_bridgeObjectRelease(v28);
            v4 = v16;
            v6 = v55;
            a3 = v57;
            v13 = v53;
            if ((v30 & 1) != 0)
              goto LABEL_21;
          }
        }
        else if ((uint64_t)v15 < (uint64_t)v14)
        {
LABEL_21:
          v31 = v5 + 2;
          if (v6 < v5 || v6 >= v31 || v6 != v5)
            *(_OWORD *)v6 = *(_OWORD *)v5;
          goto LABEL_29;
        }
        if (v6 != v4)
          *(_OWORD *)v6 = *(_OWORD *)v4;
        v4 += 2;
        v60 = v4;
        v31 = v5;
LABEL_29:
        v6 += 2;
        if (v4 < v13)
        {
          v5 = v31;
          if (v31 < a3)
            continue;
        }
        v61 = v6;
        goto LABEL_59;
      }
    }
    goto LABEL_59;
  }
LABEL_60:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, 2, 1046, 0);
  __break(1u);
  return result;
}

Swift::Int sub_10002BCE4(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  Swift::Int result;
  int64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  _QWORD *v23;
  unint64_t v24;
  int64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int64_t v35;
  uint64_t v36;
  char v37;
  _QWORD v38[9];

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_10002CC5C(0);
  v37 = a2;
  v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  v8 = v7;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_43;
  v9 = 1 << *(_BYTE *)(v5 + 32);
  v36 = v5 + 64;
  if (v9 < 64)
    v10 = ~(-1 << v9);
  else
    v10 = -1;
  v11 = v10 & *(_QWORD *)(v5 + 64);
  v35 = (unint64_t)(v9 + 63) >> 6;
  v12 = v7 + 64;
  result = swift_retain(v5);
  v14 = 0;
  while (1)
  {
    if (v11)
    {
      v20 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      v21 = v20 | (v14 << 6);
      goto LABEL_34;
    }
    v22 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return result;
    }
    if (v22 >= v35)
      break;
    v23 = (_QWORD *)(v5 + 64);
    v24 = *(_QWORD *)(v36 + 8 * v22);
    ++v14;
    if (!v24)
    {
      v14 = v22 + 1;
      if (v22 + 1 >= v35)
        goto LABEL_36;
      v24 = *(_QWORD *)(v36 + 8 * v14);
      if (!v24)
      {
        v25 = v22 + 2;
        if (v25 >= v35)
        {
LABEL_36:
          swift_release(v5);
          if ((v37 & 1) == 0)
            goto LABEL_43;
          goto LABEL_39;
        }
        v24 = *(_QWORD *)(v36 + 8 * v25);
        if (!v24)
        {
          while (1)
          {
            v14 = v25 + 1;
            if (__OFADD__(v25, 1))
              goto LABEL_45;
            if (v14 >= v35)
              goto LABEL_36;
            v24 = *(_QWORD *)(v36 + 8 * v14);
            ++v25;
            if (v24)
              goto LABEL_33;
          }
        }
        v14 = v25;
      }
    }
LABEL_33:
    v11 = (v24 - 1) & v24;
    v21 = __clz(__rbit64(v24)) + (v14 << 6);
LABEL_34:
    v30 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 16 * v21);
    v32 = *v30;
    v31 = v30[1];
    v33 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v21);
    if ((v37 & 1) == 0)
    {
      swift_bridgeObjectRetain(v30[1]);
      swift_bridgeObjectRetain(v33);
    }
    Hasher.init(_seed:)(v38, *(_QWORD *)(v8 + 40));
    String.hash(into:)(v38, v32, v31);
    result = Hasher._finalize()();
    v15 = -1 << *(_BYTE *)(v8 + 32);
    v16 = result & ~v15;
    v17 = v16 >> 6;
    if (((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6))) != 0)
    {
      v18 = __clz(__rbit64((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v26 = 0;
      v27 = (unint64_t)(63 - v15) >> 6;
      do
      {
        if (++v17 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }
        v28 = v17 == v27;
        if (v17 == v27)
          v17 = 0;
        v26 |= v28;
        v29 = *(_QWORD *)(v12 + 8 * v17);
      }
      while (v29 == -1);
      v18 = __clz(__rbit64(~v29)) + (v17 << 6);
    }
    *(_QWORD *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    v19 = (_QWORD *)(*(_QWORD *)(v8 + 48) + 16 * v18);
    *v19 = v32;
    v19[1] = v31;
    *(_QWORD *)(*(_QWORD *)(v8 + 56) + 8 * v18) = v33;
    ++*(_QWORD *)(v8 + 16);
  }
  swift_release(v5);
  v23 = (_QWORD *)(v5 + 64);
  if ((v37 & 1) == 0)
    goto LABEL_43;
LABEL_39:
  v34 = 1 << *(_BYTE *)(v5 + 32);
  if (v34 >= 64)
    bzero(v23, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v23 = -1 << v34;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_43:
  result = swift_release(v5);
  *v3 = v8;
  return result;
}

id sub_10002BFF4()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  id result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  int64_t v19;
  unint64_t v20;
  int64_t v21;

  v1 = v0;
  sub_100010A90(0);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (id)swift_release(v2);
    *v1 = v4;
    return result;
  }
  result = (id)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v19 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v19 >= v13)
      goto LABEL_26;
    v20 = *(_QWORD *)(v6 + 8 * v19);
    ++v9;
    if (!v20)
    {
      v9 = v19 + 1;
      if (v19 + 1 >= v13)
        goto LABEL_26;
      v20 = *(_QWORD *)(v6 + 8 * v9);
      if (!v20)
        break;
    }
LABEL_25:
    v12 = (v20 - 1) & v20;
    v15 = __clz(__rbit64(v20)) + (v9 << 6);
LABEL_12:
    v16 = 8 * v15;
    v17 = *(void **)(*(_QWORD *)(v2 + 48) + v16);
    v18 = *(_QWORD *)(*(_QWORD *)(v2 + 56) + v16);
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + v16) = v17;
    *(_QWORD *)(*(_QWORD *)(v4 + 56) + v16) = v18;
    result = v17;
  }
  v21 = v19 + 2;
  if (v21 >= v13)
    goto LABEL_26;
  v20 = *(_QWORD *)(v6 + 8 * v21);
  if (v20)
  {
    v9 = v21;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v21 + 1;
    if (__OFADD__(v21, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v20 = *(_QWORD *)(v6 + 8 * v9);
    ++v21;
    if (v20)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_10002C190()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;

  v1 = v0;
  sub_10002CC5C(0);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release(v2);
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v22 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v22 >= v13)
      goto LABEL_26;
    v23 = *(_QWORD *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      v9 = v22 + 1;
      if (v22 + 1 >= v13)
        goto LABEL_26;
      v23 = *(_QWORD *)(v6 + 8 * v9);
      if (!v23)
        break;
    }
LABEL_25:
    v12 = (v23 - 1) & v23;
    v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (_QWORD *)(*(_QWORD *)(v2 + 48) + 16 * v15);
    v18 = v17[1];
    v19 = 8 * v15;
    v20 = *(_QWORD *)(*(_QWORD *)(v2 + 56) + v19);
    v21 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    *v21 = *v17;
    v21[1] = v18;
    *(_QWORD *)(*(_QWORD *)(v4 + 56) + v19) = v20;
    swift_bridgeObjectRetain(v18);
    result = (void *)swift_bridgeObjectRetain(v20);
  }
  v24 = v22 + 2;
  if (v24 >= v13)
    goto LABEL_26;
  v23 = *(_QWORD *)(v6 + 8 * v24);
  if (v23)
  {
    v9 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v24 + 1;
    if (__OFADD__(v24, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v23 = *(_QWORD *)(v6 + 8 * v9);
    ++v24;
    if (v23)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

uint64_t *sub_10002C340(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD v18[3];
  _QWORD v19[5];

  v8 = *a2;
  v19[3] = a3;
  v19[4] = a4;
  v9 = sub_100007E0C(v19);
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(*(_QWORD *)(a3 - 8) + 32))(v9, a1, a3);
  v18[0] = _swiftEmptyArrayStorage;
  sub_100013DDC(0);
  swift_allocObject(v10, *(unsigned int *)(v10 + 48), *(unsigned __int16 *)(v10 + 52));
  a2[2] = CurrentValueSubject.init(_:)(v18);
  a2[8] = (uint64_t)&_swiftEmptySetSingleton;
  sub_100028F08((uint64_t)v19, (uint64_t)(a2 + 3));
  v18[0] = (*(uint64_t (**)(uint64_t, uint64_t))(a4 + 8))(a3, a4);
  v11 = swift_allocObject(&unk_1000DD580, 24, 7);
  swift_weakInit(v11 + 16, a2);
  v12 = swift_allocObject(&unk_1000DD5A8, 32, 7);
  *(_QWORD *)(v12 + 16) = v11;
  *(_QWORD *)(v12 + 24) = v8;
  sub_1000154BC(0);
  v14 = v13;
  v15 = sub_10002CC14();
  v16 = Publisher<>.sink(receiveValue:)(sub_10002CC0C, v12, v14, v15);
  swift_release(v12);
  swift_release(v18[0]);
  swift_beginAccess(a2 + 8, v18, 33, 0);
  AnyCancellable.store(in:)(a2 + 8);
  swift_endAccess(v18);
  swift_release(v16);
  _s6Health23OpenSleepScheduleIntentVwxx_0(v19);
  return a2;
}

uint64_t *sub_10002C4CC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v13;

  v7 = *(_QWORD *)(a3 - 8);
  __chkstk_darwin(a1);
  v9 = (char *)&v13 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for SummaryPinnedContentGradientColorProvider();
  v11 = (uint64_t *)swift_allocObject(v10, 72, 7);
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, a1, a3);
  return sub_10002C340((uint64_t)v9, v11, a3, a4);
}

_QWORD *_s6Health41SummaryPinnedContentGradientColorProviderC6colors4fromSaySo7UIColorCGSay0A8Platform8FeedItemCG_tFZ_0(unint64_t a1)
{
  unint64_t isUniquelyReferenced_nonNull_native;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  id v6;
  void *v7;
  uint64_t v8;
  void *v9;
  id v10;
  char v11;
  uint64_t v12;
  _BOOL8 v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  unint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  id v22;
  uint64_t v23;
  uint64_t v24;
  BOOL v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  id v33;
  id v34;
  unint64_t v35;
  uint64_t v36;
  Swift::Int v37;
  Swift::Int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;

  v2 = a1;
  if (a1 >> 62)
  {
LABEL_29:
    if (v2 < 0)
      v27 = v2;
    else
      v27 = v2 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v2);
    v3 = _CocoaArrayWrapper.endIndex.getter(v27);
    v54 = v3;
    if (v3)
      goto LABEL_3;
  }
  else
  {
    v3 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain(a1);
    v54 = v3;
    if (v3)
    {
LABEL_3:
      v3 = 0;
      v53 = v2 & 0xC000000000000001;
      v4 = (uint64_t)&_swiftEmptyDictionarySingleton;
      v5 = 4;
      while (1)
      {
        if (v53)
          v6 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v5 - 4, v2);
        else
          v6 = *(id *)(v2 + 8 * v5);
        v7 = v6;
        v8 = v5 - 3;
        if (__OFADD__(v5 - 4, 1))
        {
          __break(1u);
LABEL_26:
          __break(1u);
LABEL_27:
          __break(1u);
LABEL_28:
          __break(1u);
          goto LABEL_29;
        }
        v9 = (void *)FeedItem.associatedDisplayCategory.getter();
        if (v9)
        {
          v10 = v9;
          sub_10001EEB0(v3, 0);
          isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v4);
          v55 = v4;
          v3 = sub_100010588((uint64_t)v10);
          v12 = *(_QWORD *)(v4 + 16);
          v13 = (v11 & 1) == 0;
          v14 = v12 + v13;
          if (__OFADD__(v12, v13))
            goto LABEL_26;
          v15 = v11;
          if (*(_QWORD *)(v4 + 24) >= v14)
          {
            if ((isUniquelyReferenced_nonNull_native & 1) == 0)
            {
              sub_10002BFF4();
              v4 = v55;
            }
          }
          else
          {
            sub_1000107C8(v14, isUniquelyReferenced_nonNull_native);
            isUniquelyReferenced_nonNull_native = sub_100006D10(0, &qword_1000ED538, HKDisplayCategory_ptr);
            v4 = v55;
            v16 = v55;
            v17 = sub_100010588((uint64_t)v10);
            if ((v15 & 1) != (v18 & 1))
            {
              KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(isUniquelyReferenced_nonNull_native);
              __break(1u);
              swift_release(v55);
              __break(1u);
              goto LABEL_73;
            }
            v3 = v17;
          }
          swift_bridgeObjectRelease(0x8000000000000000);
          if ((v15 & 1) != 0)
          {
            swift_bridgeObjectRetain(v4);
          }
          else
          {
            *(_QWORD *)(v4 + 8 * (v3 >> 6) + 64) |= 1 << v3;
            v19 = 8 * v3;
            *(_QWORD *)(*(_QWORD *)(v4 + 48) + v19) = v10;
            *(_QWORD *)(*(_QWORD *)(v4 + 56) + v19) = 0;
            v20 = *(_QWORD *)(v4 + 16);
            v21 = v20 + 1;
            isUniquelyReferenced_nonNull_native = __OFADD__(v20, 1);
            swift_bridgeObjectRetain(v4);
            if ((isUniquelyReferenced_nonNull_native & 1) != 0)
              goto LABEL_28;
            *(_QWORD *)(v4 + 16) = v21;
            v22 = v10;
          }
          v23 = *(_QWORD *)(v4 + 56);
          swift_bridgeObjectRelease(v4);
          v24 = *(_QWORD *)(v23 + 8 * v3);
          v25 = __OFADD__(v24, 1);
          v26 = v24 + 1;
          if (v25)
            goto LABEL_27;
          *(_QWORD *)(v23 + 8 * v3) = v26;

          v3 = (unint64_t)sub_10002AC68;
        }

        ++v5;
        if (v8 == v54)
          goto LABEL_34;
      }
    }
  }
  v4 = (uint64_t)&_swiftEmptyDictionarySingleton;
LABEL_34:
  swift_bridgeObjectRelease(v2);
  swift_bridgeObjectRetain_n(v4, 2);
  v28 = sub_1000106D0(v4);
  swift_bridgeObjectRelease(v4);
  v55 = (unint64_t)v28;
  sub_10002ACF0(&v55);
  swift_bridgeObjectRelease(v4);
  v29 = v55;
  v16 = (uint64_t)_swiftEmptyArrayStorage;
  v55 = (unint64_t)_swiftEmptyArrayStorage;
  v30 = *(_QWORD *)(v29 + 16);
  if (v30)
  {
    swift_retain(v29);
    v31 = 32;
    do
    {
      v33 = objc_msgSend(*(id *)(v29 + v31), "color", v53);
      if (v33)
      {
        v34 = v33;
        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v33);
        isUniquelyReferenced_nonNull_native = *(_QWORD *)((v55 & 0xFFFFFFFFFFFFFF8) + 0x10);
        v35 = *(_QWORD *)((v55 & 0xFFFFFFFFFFFFFF8) + 0x18);
        if (isUniquelyReferenced_nonNull_native >= v35 >> 1)
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v35 > 1, isUniquelyReferenced_nonNull_native + 1, 1);
        v32 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(isUniquelyReferenced_nonNull_native, v34);
        specialized Array._endMutation()(v32);
      }
      v31 += 16;
      --v30;
    }
    while (v30);
    swift_release(v29);
    v16 = v55;
  }
  swift_release(v29);
  swift_bridgeObjectRelease(v4);
  v5 = (unint64_t)v16 >> 62;
  if (!((unint64_t)v16 >> 62))
  {
    if (*(uint64_t *)((v16 & 0xFFFFFFFFFFFFF8) + 0x10) >= 4)
      v36 = 4;
    else
      v36 = *(_QWORD *)((v16 & 0xFFFFFFFFFFFFF8) + 0x10);
    if ((v16 & 0xC000000000000001) == 0)
      goto LABEL_50;
    goto LABEL_47;
  }
  if (v16 < 0)
    v2 = v16;
  else
    v2 = v16 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v16);
  v4 = _CocoaArrayWrapper.endIndex.getter(v2);
  swift_bridgeObjectRelease(v16);
  swift_bridgeObjectRetain(v16);
  v39 = _CocoaArrayWrapper.endIndex.getter(v2);
  v49 = swift_bridgeObjectRelease(v16);
  if (v39 < 0)
  {
    __break(1u);
LABEL_70:
    __break(1u);
    goto LABEL_71;
  }
LABEL_73:
  if (v4 >= 4)
    v51 = 4;
  else
    v51 = v4;
  if (v4 >= 0)
    v36 = v51;
  else
    v36 = 4;
  swift_bridgeObjectRetain(v16);
  v52 = _CocoaArrayWrapper.endIndex.getter(v2);
  swift_bridgeObjectRelease(v16);
  if (v52 < v36)
    __break(1u);
  if ((v16 & 0xC000000000000001) != 0)
  {
LABEL_47:
    if (v36)
    {
      sub_100006D10(0, &qword_1000EC1A8, UIColor_ptr);
      v37 = 0;
      do
      {
        v38 = v37 + 1;
        _ArrayBuffer._typeCheckSlowPath(_:)(v37);
        v37 = v38;
      }
      while (v36 != v38);
    }
  }
LABEL_50:
  if (v5)
  {
    if (v16 < 0)
      v40 = v16;
    else
      v40 = v16 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v16);
    v2 = _CocoaArrayWrapper.subscript.getter(0, v36, v40);
    v39 = v41;
    v4 = v42;
    isUniquelyReferenced_nonNull_native = v43;
    swift_bridgeObjectRelease_n(v16, 2);
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      goto LABEL_57;
  }
  else
  {
    v4 = 0;
    v2 = v16 & 0xFFFFFFFFFFFFFF8;
    v39 = (v16 & 0xFFFFFFFFFFFFFF8) + 32;
    isUniquelyReferenced_nonNull_native = (2 * v36) | 1;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
LABEL_57:
      v44 = sub_100078754(v2, v39, v4, isUniquelyReferenced_nonNull_native);
      goto LABEL_64;
    }
  }
  v45 = type metadata accessor for __ContiguousArrayStorageBase(0);
  v46 = swift_unknownObjectRetain_n(v2, 2);
  v47 = (_QWORD *)swift_dynamicCastClass(v46, v45);
  if (!v47)
  {
    swift_unknownObjectRelease(v2);
    v47 = _swiftEmptyArrayStorage;
  }
  v48 = v47[2];
  v49 = swift_release(v47);
  if (__OFSUB__(isUniquelyReferenced_nonNull_native >> 1, v4))
    goto LABEL_70;
  v49 = v2;
  if (v48 != (isUniquelyReferenced_nonNull_native >> 1) - v4)
  {
LABEL_71:
    swift_unknownObjectRelease(v49);
    goto LABEL_57;
  }
  v44 = (_QWORD *)swift_dynamicCastClass(v2, v45);
  if (!v44)
  {
    swift_unknownObjectRelease(v2);
    v44 = _swiftEmptyArrayStorage;
  }
LABEL_64:
  swift_unknownObjectRelease(v2);
  sub_10001EEB0(v3, 0);
  return v44;
}

uint64_t _s6Health41SummaryPinnedContentGradientColorProviderC27configureForTraitCollectionyySo07UITraitK0CF_0()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(uint64_t, uint64_t);
  uint64_t v5;
  unint64_t v6;
  _QWORD *v7;
  _QWORD *v9;
  _BYTE v10[24];

  swift_beginAccess(v0 + 2, v10, 0, 0);
  v1 = v0[2];
  v2 = v0[6];
  v3 = v0[7];
  sub_100012E04(v0 + 3, v2);
  v4 = *(uint64_t (**)(uint64_t, uint64_t))(v3 + 8);
  swift_retain(v1);
  v5 = v4(v2, v3);
  CurrentValueSubject.value.getter(&v9);
  swift_release(v5);
  v6 = (unint64_t)v9;
  v7 = _s6Health41SummaryPinnedContentGradientColorProviderC6colors4fromSaySo7UIColorCGSay0A8Platform8FeedItemCG_tFZ_0((unint64_t)v9);
  swift_bridgeObjectRelease(v6);
  v9 = v7;
  CurrentValueSubject.send(_:)(&v9);
  swift_bridgeObjectRelease(v7);
  return swift_release(v1);
}

uint64_t sub_10002CBC4()
{
  uint64_t v0;

  swift_weakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10002CBE8()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10002CC0C(unint64_t *a1)
{
  uint64_t v1;

  return sub_10002ABB8(a1, *(_QWORD *)(v1 + 16));
}

unint64_t sub_10002CC14()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000EECD0;
  if (!qword_1000EECD0)
  {
    sub_1000154BC(255);
    result = swift_getWitnessTable(&protocol conformance descriptor for CurrentValueSubject<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1000EECD0);
  }
  return result;
}

void sub_10002CC5C(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_1000ED558)
  {
    sub_100013C38(255, &qword_1000EC248, (unint64_t *)&qword_1000EC250, HKNotificationInstructionDiagnosticDescription_ptr);
    v3 = type metadata accessor for _DictionaryStorage(a1, &type metadata for String, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_1000ED558);
  }
}

id sub_10002CCD8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v4;

  return sub_10002D2C0(a1, a4, *v4, v4[1], v4[2], v4[3]);
}

void sub_10002CCE8(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  __n128 v23;

  v3 = type metadata accessor for Logger(0);
  __chkstk_darwin(v3);
  v4 = sub_10002D0D0();
  v5 = (_QWORD *)StringProtocol<>.split(separator:maxSplits:omittingEmptySubsequences:)(46, 0xE100000000000000, 1, 1, &type metadata for String, v4);
  v6 = v5;
  if (v5[2] == 2)
  {
    v7 = v5[4];
    v8 = v5[5];
    v9 = v5[6];
    v10 = v5[7];
    swift_bridgeObjectRetain(v10);
    v11 = static String._fromSubstring(_:)(v7, v8, v9, v10);
    v13 = v12;
    swift_bridgeObjectRelease(v10);
    if (v6[2] < 2uLL)
    {
      __break(1u);
    }
    else
    {
      v14 = v6[8];
      v15 = v6[9];
      v17 = v6[10];
      v16 = v6[11];
      swift_bridgeObjectRetain(v16);
      swift_bridgeObjectRelease(v6);
      static String._fromSubstring(_:)(v14, v15, v17, v16);
      v19 = v18;
      swift_bridgeObjectRelease(v16);
      type metadata accessor for FoundationPluginBundleProvider(0);
      v20 = swift_bridgeObjectRetain(v19);
      v21 = static FoundationPluginBundleProvider.sharedInstance.getter(v20);
      v22 = (void *)dispatch thunk of PluginBundleProvider.loadAndValidatePluginBundle(named:)(v11, v13);
      swift_release(v21);
      v23 = swift_bridgeObjectRelease(v13);
      NSBundle.getPluginAppDelegateClass()(v23);
      swift_bridgeObjectRelease(v19);
      swift_bridgeObjectRelease(a2);

    }
  }
  else
  {
    swift_bridgeObjectRelease(v5);
    swift_bridgeObjectRelease(a2);
  }
}

unint64_t sub_10002D0D0()
{
  unint64_t result;

  result = qword_1000ED560;
  if (!qword_1000ED560)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for String, &type metadata for String);
    atomic_store(result, (unint64_t *)&qword_1000ED560);
  }
  return result;
}

uint64_t destroy for PluginPPT(_QWORD *a1)
{
  swift_unknownObjectRelease(*a1);
  return swift_bridgeObjectRelease(a1[3]);
}

uint64_t initializeWithCopy for PluginPPT(uint64_t a1, __int128 *a2)
{
  __int128 v3;
  uint64_t v4;

  v3 = *a2;
  *(_OWORD *)a1 = *a2;
  v4 = *((_QWORD *)a2 + 3);
  *(_QWORD *)(a1 + 16) = *((_QWORD *)a2 + 2);
  *(_QWORD *)(a1 + 24) = v4;
  swift_unknownObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  return a1;
}

uint64_t *assignWithCopy for PluginPPT(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v4 = *a2;
  v5 = a2[1];
  v6 = *a1;
  *a1 = *a2;
  swift_unknownObjectRetain(v4);
  swift_unknownObjectRelease(v6);
  a1[1] = v5;
  a1[2] = a2[2];
  v7 = a2[3];
  v8 = a1[3];
  a1[3] = v7;
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRelease(v8);
  return a1;
}

_QWORD *assignWithTake for PluginPPT(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  swift_unknownObjectRelease(*a1);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  v4 = *(_QWORD *)(a2 + 24);
  v5 = a1[3];
  a1[2] = *(_QWORD *)(a2 + 16);
  a1[3] = v4;
  swift_bridgeObjectRelease(v5);
  return a1;
}

uint64_t getEnumTagSinglePayload for PluginPPT(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 32))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for PluginPPT(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 32) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 32) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for PluginPPT()
{
  return &type metadata for PluginPPT;
}

id sub_10002D2C0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  void *v14;
  void *v15;
  NSString v16;
  Class isa;
  id v18;
  uint64_t v19;
  NSObject *v20;
  os_log_type_t v21;
  uint8_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint8_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  __objc2_prot *v34;

  v10 = type metadata accessor for Logger(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = (char *)&v29 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v34 = &OBJC_PROTOCOL___UIApplicationTestingDelegate;
  v14 = (void *)swift_dynamicCastObjCProtocolConditional(a3, 1, &v34);
  if (!v14)
  {
    static Logger.general.getter(0);
    swift_unknownObjectRetain_n(a3, 2);
    v19 = swift_bridgeObjectRetain_n(a6, 2);
    v20 = Logger.logObject.getter(v19);
    v21 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v20, v21))
    {
      v22 = (uint8_t *)swift_slowAlloc(12, -1);
      v23 = swift_slowAlloc(32, -1);
      v32 = a4;
      v33 = v23;
      v30 = a6;
      v31 = a3;
      *(_DWORD *)v22 = 136446210;
      v29 = v22 + 4;
      v24 = sub_10001314C(0, (unint64_t *)&unk_1000ED5D0, (uint64_t)&protocol descriptor for PluginAppDelegate, 0);
      swift_unknownObjectRetain(a3);
      v25 = String.init<A>(describing:)(&v31, v24);
      v27 = v26;
      v31 = sub_100012B20(v25, v26, &v33);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v31, &v32, v29, v22 + 12);
      swift_bridgeObjectRelease_n(v30, 2);
      swift_unknownObjectRelease_n(a3, 2);
      swift_bridgeObjectRelease(v27);
      _os_log_impl((void *)&_mh_execute_header, v20, v21, "PluginAppDelegate does not conform to UIApplicationTestingDelegate: %{public}s", v22, 0xCu);
      swift_arrayDestroy(v23, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v23, -1, -1);
      swift_slowDealloc(v22, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n(a6, 2);
      swift_unknownObjectRelease_n(a3, 2);
    }
    (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
    return 0;
  }
  v15 = v14;
  if ((objc_msgSend(v14, "respondsToSelector:", "application:runTest:options:") & 1) == 0)
    return 0;
  swift_unknownObjectRetain_n(a3, 2);
  v16 = String._bridgeToObjectiveC()();
  isa = Dictionary._bridgeToObjectiveC()().super.isa;
  v18 = objc_msgSend(v15, "application:runTest:options:", a1, v16, isa);
  swift_unknownObjectRelease_n(a3, 2);

  return v18;
}

_QWORD *initializeBufferWithCopyOfBuffer for NotificationInstructionListView(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_retain(v3);
  return a1;
}

uint64_t destroy for NotificationInstructionListView(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 8));
}

_QWORD *assignWithCopy for NotificationInstructionListView(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;

  *a1 = *a2;
  v3 = a2[1];
  v4 = a1[1];
  a1[1] = v3;
  swift_retain(v3);
  swift_release(v4);
  return a1;
}

__n128 initializeWithTake for NotificationInstructionListView(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  *a1 = *a2;
  return result;
}

_QWORD *assignWithTake for NotificationInstructionListView(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = a2[1];
  v4 = a1[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_release(v4);
  return a1;
}

uint64_t getEnumTagSinglePayload for NotificationInstructionListView(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 16))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for NotificationInstructionListView(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 16) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for NotificationInstructionListView()
{
  return &type metadata for NotificationInstructionListView;
}

uint64_t sub_10002D6E0(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_1000C05F4, 1);
}

uint64_t sub_10002D6F0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t OpaqueTypeConformance2;
  char *v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  void (**v52)();
  uint64_t v53;
  void (*v54)(char *, uint64_t);
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v59;
  char *v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char v75[16];
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  void *v81;

  v63 = a2;
  v62 = a1;
  v74 = a3;
  v5 = type metadata accessor for NavigationBarItem.TitleDisplayMode(0);
  v72 = *(_QWORD *)(v5 - 8);
  v73 = v5;
  __chkstk_darwin(v5);
  v71 = (char *)&v59 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for InsetGroupedListStyle(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)&v59 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10002ED04(0);
  v12 = v11;
  v13 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v15 = (char *)&v59 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10002F448(0);
  v17 = v16;
  v64 = *(_QWORD *)(v16 - 8);
  __chkstk_darwin(v16);
  v19 = (char *)&v59 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10002F4F8(0);
  v66 = v20;
  v68 = *(_QWORD *)(v20 - 8);
  __chkstk_darwin(v20);
  v60 = (char *)&v59 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10002F5D4(0);
  v69 = *(_QWORD *)(v22 - 8);
  v70 = v22;
  __chkstk_darwin(v22);
  v61 = (char *)&v59 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10002F6D4(0);
  v67 = v24;
  __chkstk_darwin(v24);
  v65 = (char *)&v59 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v76 = a1;
  v77 = a2;
  sub_100030808(0, &qword_1000ED648, (uint64_t (*)(uint64_t, uint64_t, void *))&type metadata accessor for _ConditionalContent);
  v27 = v26;
  v28 = sub_10002F1FC();
  v29 = List<>.init(content:)(sub_10002F730, v75, v27, v28);
  InsetGroupedListStyle.init()(v29);
  v30 = sub_100013198(&qword_1000ED6F0, (uint64_t (*)(uint64_t))sub_10002ED04, (uint64_t)&protocol conformance descriptor for List<A, B>);
  View.listStyle<A>(_:)(v10, v12, v7, v30, &protocol witness table for InsetGroupedListStyle);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v12);
  v31 = LocalizedStringKey.init(stringLiteral:)(0xD000000000000019, 0x80000001000B9000);
  v33 = v32;
  LOBYTE(v15) = v34;
  v36 = v35;
  v78 = v12;
  v79 = v7;
  v80 = v30;
  v81 = &protocol witness table for InsetGroupedListStyle;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v78, &opaque type descriptor for <<opaque return type of View.listStyle<A>(_:)>>, 1);
  v38 = v60;
  View.navigationTitle(_:)(v31, v33, v15 & 1, v36, v17, OpaqueTypeConformance2);
  swift_bridgeObjectRelease(v36);
  swift_bridgeObjectRelease(v33);
  (*(void (**)(char *, uint64_t))(v64 + 8))(v19, v17);
  v39 = v71;
  v40 = v72;
  v41 = v73;
  (*(void (**)(char *, _QWORD, uint64_t))(v72 + 104))(v71, enum case for NavigationBarItem.TitleDisplayMode.inline(_:), v73);
  v78 = v17;
  v79 = OpaqueTypeConformance2;
  v42 = swift_getOpaqueTypeConformance2(&v78, &opaque type descriptor for <<opaque return type of View.navigationTitle(_:)>>, 1);
  v43 = v61;
  v44 = v66;
  View.navigationBarTitleDisplayMode(_:)(v39, v66, v42);
  (*(void (**)(char *, uint64_t))(v40 + 8))(v39, v41);
  (*(void (**)(char *, uint64_t))(v68 + 8))(v38, v44);
  v45 = swift_allocObject(&unk_1000DD710, 32, 7);
  v46 = v62;
  v47 = v63;
  *(_QWORD *)(v45 + 16) = v62;
  *(_QWORD *)(v45 + 24) = v47;
  v49 = v69;
  v48 = v70;
  v50 = v65;
  (*(void (**)(char *, char *, uint64_t))(v69 + 16))(v65, v43, v70);
  v51 = v67;
  v52 = (void (**)())&v50[*(int *)(v67 + 36)];
  v53 = (uint64_t)v50;
  *v52 = sub_10002F75C;
  v52[1] = (void (*)())v45;
  v52[2] = 0;
  v52[3] = 0;
  v54 = *(void (**)(char *, uint64_t))(v49 + 8);
  v55 = v47;
  swift_retain(v47);
  v54(v43, v48);
  v56 = swift_allocObject(&unk_1000DD738, 32, 7);
  *(_QWORD *)(v56 + 16) = v46;
  *(_QWORD *)(v56 + 24) = v47;
  v57 = sub_10002F7B4();
  swift_retain(v55);
  View.refreshable(action:)(&unk_1000ED718, v56, v51, v57);
  swift_release(v56);
  return sub_10002F8CC(v53);
}

uint64_t sub_10002DB9C@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t KeyPath;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  Swift::String v24;
  unint64_t v25;
  Swift::String v26;
  void *object;
  Swift::String v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  char v36;
  unint64_t v37;
  uint64_t v39;
  void *v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char v58;
  uint64_t v59;
  unint64_t v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char v68;

  v66 = a2;
  v3 = type metadata accessor for LocalizedStringKey.StringInterpolation(0);
  __chkstk_darwin(v3);
  v5 = (char *)&v62 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100030808(0, &qword_1000ED728, (uint64_t (*)(uint64_t, uint64_t, void *))&type metadata accessor for _ConditionalContent.Storage);
  v7 = v6;
  __chkstk_darwin(v6);
  v9 = (char *)&v62 - v8;
  sub_10002ED90(0);
  v65 = v10;
  v63 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v12 = (char *)&v62 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100030878(0, &qword_1000ED730, (uint64_t (*)(uint64_t, void *, uint64_t))&type metadata accessor for _ConditionalContent.Storage);
  v64 = v13;
  __chkstk_darwin(v13);
  v15 = (char *)&v62 - v14;
  sub_100030878(0, &qword_1000ED650, (uint64_t (*)(uint64_t, void *, uint64_t))&type metadata accessor for _ConditionalContent);
  v17 = v16;
  __chkstk_darwin(v16);
  v19 = (char *)&v62 - v18;
  KeyPath = swift_getKeyPath(&unk_1000B1F60);
  v21 = swift_getKeyPath(&unk_1000B1F88);
  v22 = swift_retain(a1);
  static Published.subscript.getter(&v67, v22, KeyPath, v21);
  swift_release(a1);
  swift_release(KeyPath);
  swift_release(v21);
  v23 = v67;
  if ((v68 & 1) != 0)
  {
    LocalizedStringKey.StringInterpolation.init(literalCapacity:interpolationCount:)(7, 1);
    v24._countAndFlagsBits = 0x203A726F727245;
    v24._object = (void *)0xE700000000000000;
    LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v24);
    v67 = v23;
    sub_100016214(v23, 1);
    v25 = sub_100013960();
    v26._countAndFlagsBits = String.init<A>(reflecting:)(&v67, v25);
    object = v26._object;
    LocalizedStringKey.StringInterpolation.appendInterpolation(_:)(v26);
    swift_bridgeObjectRelease(object);
    v28._countAndFlagsBits = 0;
    v28._object = (void *)0xE000000000000000;
    LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v28);
    v29 = LocalizedStringKey.init(stringInterpolation:)(v5);
    v30 = Text.init(_:tableName:bundle:comment:)(v29);
    v32 = v31;
    v34 = v33;
    *(_QWORD *)v9 = v30;
    *((_QWORD *)v9 + 1) = v31;
    v36 = v35 & 1;
    v9[16] = v35 & 1;
    *((_QWORD *)v9 + 3) = v33;
    swift_storeEnumTagMultiPayload(v9, v7, 1);
    sub_1000308E0(v30, v32, v36);
    v37 = sub_10002F274();
    swift_bridgeObjectRetain(v34);
    _ConditionalContent<>.init(storage:)(v9, v17, &type metadata for Text, v37, &protocol witness table for Text);
    sub_1000308F0(v23, 1);
    sub_1000308FC(v30, v32, v36);
    return swift_bridgeObjectRelease(v34);
  }
  v62 = v7;
  if ((unint64_t)v67 >> 62)
  {
    if (v67 >= 0)
      v54 = v67 & 0xFFFFFFFFFFFFFF8;
    else
      v54 = v67;
    swift_bridgeObjectRetain(v67);
    v55 = _CocoaArrayWrapper.endIndex.getter(v54);
    sub_1000308F0(v23, 0);
    v39 = v17;
    if (v55)
      goto LABEL_5;
LABEL_10:
    sub_1000308F0(v23, 0);
    v56 = LocalizedStringKey.init(stringLiteral:)(0xD000000000000010, 0x80000001000B9070);
    *(_QWORD *)v15 = Text.init(_:tableName:bundle:comment:)(v56);
    *((_QWORD *)v15 + 1) = v57;
    v15[16] = v58 & 1;
    *((_QWORD *)v15 + 3) = v59;
    swift_storeEnumTagMultiPayload(v15, v64, 0);
    v60 = sub_10002F2EC();
    _ConditionalContent<>.init(storage:)(v15, &type metadata for Text, v65, &protocol witness table for Text, v60);
    goto LABEL_11;
  }
  v39 = v17;
  if (!*(_QWORD *)((v67 & 0xFFFFFFFFFFFFFF8) + 0x10))
    goto LABEL_10;
LABEL_5:
  v40 = sub_10003192C(v23);
  sub_1000308F0(v23, 0);
  v41 = swift_bridgeObjectRetain(v40);
  v42 = sub_1000788F4(v41);
  swift_bridgeObjectRelease(v40);
  v67 = (uint64_t)v42;
  v43 = swift_getKeyPath(&unk_1000B1FB0);
  v44 = swift_allocObject(&unk_1000DD7D8, 24, 7);
  *(_QWORD *)(v44 + 16) = v40;
  sub_1000138C8(0, (unint64_t *)&qword_1000EC7A8, (uint64_t)&type metadata for String, (uint64_t (*)(_QWORD, uint64_t))&type metadata accessor for Array);
  v46 = v45;
  sub_100031E7C(0, &qword_1000ED660, (uint64_t (*)(uint64_t))sub_10002EE48);
  v48 = v47;
  v49 = sub_10002F19C();
  v50 = sub_10002F34C();
  ForEach<>.init(_:id:content:)(&v67, v43, sub_100031A74, v44, v46, v48, v49, &protocol witness table for String, v50);
  v51 = v63;
  v52 = v65;
  (*(void (**)(char *, char *, uint64_t))(v63 + 16))(v15, v12, v65);
  swift_storeEnumTagMultiPayload(v15, v64, 1);
  v53 = sub_10002F2EC();
  _ConditionalContent<>.init(storage:)(v15, &type metadata for Text, v52, &protocol witness table for Text, v53);
  (*(void (**)(char *, uint64_t))(v51 + 8))(v12, v52);
LABEL_11:
  sub_100031A7C((uint64_t)v19, (uint64_t)v9);
  swift_storeEnumTagMultiPayload(v9, v62, 0);
  v61 = sub_10002F274();
  _ConditionalContent<>.init(storage:)(v9, v39, &type metadata for Text, v61, &protocol witness table for Text);
  return sub_100031AD0((uint64_t)v19);
}

uint64_t sub_10002E130(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  _QWORD v12[6];
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;

  v2 = *a1;
  v3 = a1[1];
  v12[2] = a2;
  v12[3] = v2;
  v12[4] = v3;
  v13 = v2;
  v14 = v3;
  v4 = sub_10002D0D0();
  swift_bridgeObjectRetain(v3);
  v13 = Text.init<A>(_:)(&v13, &type metadata for String, v4);
  v14 = v5;
  v15 = v6 & 1;
  v16 = v7;
  sub_10002EE48(0);
  v9 = v8;
  v10 = sub_10002F3D0();
  return Section<>.init(header:content:)(&v13, sub_100031B1C, v12, &type metadata for Text, v9, &protocol witness table for Text, v10);
}

uint64_t sub_10002E1E0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;
  char v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t KeyPath;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;

  if (*(_QWORD *)(a1 + 16))
  {
    swift_bridgeObjectRetain(a3);
    v6 = sub_10007DF44(a2, a3);
    if ((v7 & 1) != 0)
    {
      v8 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8 * v6);
      swift_bridgeObjectRetain(v8);
    }
    else
    {
      v8 = (unint64_t)_swiftEmptyArrayStorage;
    }
    swift_bridgeObjectRelease(a3);
  }
  else
  {
    v8 = (unint64_t)_swiftEmptyArrayStorage;
  }
  if ((v8 & 0x8000000000000000) != 0 || (v8 & 0x4000000000000000) != 0)
  {
    v18 = swift_bridgeObjectRetain(v8);
    v9 = (uint64_t)sub_1000789E4(v18);
    swift_bridgeObjectRelease(v8);
  }
  else
  {
    v9 = v8 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v8);
  }
  v19 = v9;
  sub_10003090C(&v19);
  swift_bridgeObjectRelease(v8);
  KeyPath = swift_getKeyPath(&unk_1000B1FE8);
  sub_1000076D8(0, &qword_1000EC248, (uint64_t (*)(uint64_t))sub_10002EEF4, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Array);
  v12 = v11;
  sub_10002EF30(0);
  v14 = v13;
  v15 = sub_10002F13C();
  v16 = sub_100013198(&qword_1000ED6E0, (uint64_t (*)(uint64_t))sub_10002EF30, (uint64_t)&protocol conformance descriptor for NavigationLink<A, B>);
  return ForEach<>.init(_:id:content:)(&v19, KeyPath, sub_10002E3C0, 0, v12, v14, v15, &protocol witness table for String, v16);
}

void sub_10002E36C(id *a1@<X0>, uint64_t *a2@<X8>)
{
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = objc_msgSend(*a1, "messageIdentifier");
  v4 = static String._unconditionallyBridgeFromObjectiveC(_:)(v3);
  v6 = v5;

  *a2 = v4;
  a2[1] = v6;
}

uint64_t sub_10002E3C0(id *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  id v5;
  uint64_t v7;
  id v8;
  id v9;

  v8 = *a1;
  v9 = v8;
  sub_10002EFCC(0);
  v2 = v1;
  v3 = sub_100013198(&qword_1000ED698, (uint64_t (*)(uint64_t))sub_10002EFCC, (uint64_t)&protocol conformance descriptor for VStack<A>);
  v4 = sub_10002F0F8();
  v5 = v8;
  return NavigationLink.init(destination:label:)(&v9, sub_100031B38, &v7, v2, &type metadata for NotificationInstructionView, v3, v4);
}

__n128 sub_10002E460@<Q0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  char v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  __n128 result;
  __int128 v10;
  __n128 v11;
  char v12;
  uint64_t v13;
  __int128 v14;
  char v15;
  uint64_t v16;

  v4 = static HorizontalAlignment.leading.getter();
  sub_10002E4E0(a1, (uint64_t)&v11);
  v5 = v12;
  v6 = v13;
  v7 = v15;
  v8 = v16;
  result = v11;
  v10 = v14;
  *(_QWORD *)a2 = v4;
  *(_QWORD *)(a2 + 8) = 0x4010000000000000;
  *(_BYTE *)(a2 + 16) = 0;
  *(__n128 *)(a2 + 24) = result;
  *(_BYTE *)(a2 + 40) = v5;
  *(_QWORD *)(a2 + 48) = v6;
  *(_OWORD *)(a2 + 56) = v10;
  *(_BYTE *)(a2 + 72) = v7;
  *(_QWORD *)(a2 + 80) = v8;
  return result;
}

uint64_t sub_10002E4E0@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  id v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  id v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  uint64_t v34;
  id v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char v62;
  uint64_t v63;
  uint64_t v64;
  id v66;
  unint64_t v67;
  char v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;

  v4 = objc_msgSend(a1, "categoryIdentifier");
  v5 = static String._unconditionallyBridgeFromObjectiveC(_:)(v4);
  v7 = v6;

  swift_bridgeObjectRelease(v7);
  v8 = HIBYTE(v7) & 0xF;
  if ((v7 & 0x2000000000000000) == 0)
    v8 = v5 & 0xFFFFFFFFFFFFLL;
  v66 = a1;
  if (v8)
  {
    v9 = objc_msgSend(a1, "categoryIdentifier");
    v10 = static String._unconditionallyBridgeFromObjectiveC(_:)(v9);
    v12 = v11;

  }
  else
  {
    v12 = 0x80000001000B9090;
    v10 = 0xD000000000000014;
  }
  v72 = v10;
  v73 = v12;
  v67 = sub_10002D0D0();
  v13 = Text.init<A>(_:)(&v72, &type metadata for String, v67);
  v15 = v14;
  v17 = v16;
  v19 = v18 & 1;
  v20 = static Font.body.getter();
  v21 = Text.font(_:)(v20, v13, v15, v19, v17);
  v23 = v22;
  v25 = v24;
  v27 = v26;
  swift_release(v20);
  v28 = v25 & 1;
  sub_1000308FC(v13, v15, v19);
  v29 = swift_bridgeObjectRelease(v17);
  v30 = static Color.primary.getter(v29);
  v31 = Text.foregroundColor(_:)(v30, v21, v23, v28, v27);
  v69 = v32;
  v70 = v31;
  LOBYTE(v20) = v33;
  v71 = v34;
  swift_release(v30);
  v68 = v20 & 1;
  sub_1000308FC(v21, v23, v28);
  swift_bridgeObjectRelease(v27);
  v35 = objc_msgSend(v66, "creationDate");
  v36 = static String._unconditionallyBridgeFromObjectiveC(_:)(v35);
  v38 = v37;

  v39 = sub_1000A4D40(v36, v38);
  v41 = v40;
  swift_bridgeObjectRelease(v38);
  v72 = v39;
  v73 = v41;
  v42 = Text.init<A>(_:)(&v72, &type metadata for String, v67);
  v44 = v43;
  v46 = v45;
  v48 = v47 & 1;
  v49 = static Font.caption.getter();
  v50 = Text.font(_:)(v49, v42, v44, v48, v46);
  v52 = v51;
  LOBYTE(v17) = v53;
  v55 = v54;
  swift_release(v49);
  v56 = v17 & 1;
  sub_1000308FC(v42, v44, v48);
  v57 = swift_bridgeObjectRelease(v46);
  v58 = static Color.secondary.getter(v57);
  v59 = Text.foregroundColor(_:)(v58, v50, v52, v56, v55);
  v61 = v60;
  LOBYTE(v48) = v62;
  v64 = v63;
  swift_release(v58);
  sub_1000308FC(v50, v52, v56);
  swift_bridgeObjectRelease(v55);
  LOBYTE(v72) = v68;
  *(_QWORD *)a2 = v70;
  *(_QWORD *)(a2 + 8) = v69;
  *(_BYTE *)(a2 + 16) = v68;
  *(_QWORD *)(a2 + 24) = v71;
  *(_QWORD *)(a2 + 32) = v59;
  *(_QWORD *)(a2 + 40) = v61;
  *(_BYTE *)(a2 + 48) = v48 & 1;
  *(_QWORD *)(a2 + 56) = v64;
  sub_1000308E0(v70, v69, v68);
  swift_bridgeObjectRetain(v71);
  sub_1000308E0(v59, v61, v48 & 1);
  swift_bridgeObjectRetain(v64);
  sub_1000308FC(v59, v61, v48 & 1);
  swift_bridgeObjectRelease(v64);
  sub_1000308FC(v70, v69, v72);
  return swift_bridgeObjectRelease(v71);
}

void sub_10002E818(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  id v4;
  void *v5;
  id v6;
  uint64_t v7;
  void *v8;
  _QWORD v9[5];
  uint64_t v10;

  v3 = swift_allocObject(&unk_1000DD760, 24, 7);
  swift_weakInit(v3 + 16, a2);
  v4 = objc_allocWithZone((Class)HKNotificationInstructionDiagnosticQuery);
  v9[4] = sub_10002F92C;
  v10 = v3;
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 1107296256;
  v9[2] = sub_100030778;
  v9[3] = &unk_1000DD7A0;
  v5 = _Block_copy(v9);
  swift_retain(a2);
  swift_retain(v3);
  v6 = objc_msgSend(v4, "initWithResultsHandler:", v5);
  _Block_release(v5);
  v7 = v10;
  swift_release(v3);
  swift_release(v7);
  objc_msgSend(*(id *)(a2 + OBJC_IVAR____TtC6Health26NotificationSyncStoreModel_healthStore), "executeQuery:", v6);
  v8 = *(void **)(a2 + OBJC_IVAR____TtC6Health26NotificationSyncStoreModel_notificationInstructionQuery);
  *(_QWORD *)(a2 + OBJC_IVAR____TtC6Health26NotificationSyncStoreModel_notificationInstructionQuery) = v6;
  swift_release(a2);

}

uint64_t sub_10002E93C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)(v2 + 64) = a2;
  v3 = type metadata accessor for MainActor(0);
  *(_QWORD *)(v2 + 72) = static MainActor.shared.getter();
  v4 = dispatch thunk of Actor.unownedExecutor.getter(v3, &protocol witness table for MainActor);
  return swift_task_switch(sub_10002E9A8, v4, v5);
}

uint64_t sub_10002E9A8()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  id v3;
  void *v4;
  id v5;
  void *v6;

  v1 = v0[8];
  swift_release(v0[9]);
  v2 = swift_allocObject(&unk_1000DD760, 24, 7);
  swift_weakInit(v2 + 16, v1);
  v3 = objc_allocWithZone((Class)HKNotificationInstructionDiagnosticQuery);
  v0[6] = sub_10002F92C;
  v0[7] = v2;
  v0[2] = _NSConcreteStackBlock;
  v0[3] = 1107296256;
  v0[4] = sub_100030778;
  v0[5] = &unk_1000DD778;
  v4 = _Block_copy(v0 + 2);
  swift_retain(v1);
  swift_retain(v2);
  v5 = objc_msgSend(v3, "initWithResultsHandler:", v4);
  _Block_release(v4);
  swift_release(v0[7]);
  swift_release(v2);
  objc_msgSend(*(id *)(v1 + OBJC_IVAR____TtC6Health26NotificationSyncStoreModel_healthStore), "executeQuery:", v5);
  v6 = *(void **)(v1 + OBJC_IVAR____TtC6Health26NotificationSyncStoreModel_notificationInstructionQuery);
  *(_QWORD *)(v1 + OBJC_IVAR____TtC6Health26NotificationSyncStoreModel_notificationInstructionQuery) = v5;
  swift_release(v1);

  return ((uint64_t (*)(void))v0[1])();
}

uint64_t sub_10002EAD4(_QWORD *a1, id *a2)
{
  id v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char v10;
  uint64_t v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  id v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v21;
  id v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  id v27;
  uint64_t v28;
  uint64_t v30;
  uint64_t v31;

  v3 = *a2;
  v4 = objc_msgSend(*a2, "clientIdentifier");
  v5 = static String._unconditionallyBridgeFromObjectiveC(_:)(v4);
  v7 = v6;

  v8 = *a1;
  if (*(_QWORD *)(*a1 + 16) && (v9 = sub_10007DF44(v5, v7), (v10 & 1) != 0))
  {
    v11 = *(_QWORD *)(*(_QWORD *)(v8 + 56) + 8 * v9);
    swift_bridgeObjectRetain(v11);
    swift_bridgeObjectRelease(v7);
    v12 = objc_msgSend(v3, "clientIdentifier");
    v13 = static String._unconditionallyBridgeFromObjectiveC(_:)(v12);
    v15 = v14;

    v16 = v3;
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v16);
    v18 = *(_QWORD *)((v11 & 0xFFFFFFFFFFFFFF8) + 0x10);
    v17 = *(_QWORD *)((v11 & 0xFFFFFFFFFFFFFF8) + 0x18);
    if (v18 >= v17 >> 1)
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v17 > 1, v18 + 1, 1);
    v19 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v18, v16);
    specialized Array._endMutation()(v19);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*a1);
    v30 = *a1;
    *a1 = 0x8000000000000000;
    v21 = v11;
  }
  else
  {
    swift_bridgeObjectRelease(v7);
    v22 = objc_msgSend(v3, "clientIdentifier");
    v13 = static String._unconditionallyBridgeFromObjectiveC(_:)(v22);
    v15 = v23;

    sub_1000138C8(0, (unint64_t *)&qword_1000ED9C0, (uint64_t)&type metadata for Swift.AnyObject + 8, (uint64_t (*)(_QWORD, uint64_t))&type metadata accessor for _ContiguousArrayStorage);
    v25 = swift_allocObject(v24, 40, 7);
    *(_OWORD *)(v25 + 16) = xmmword_1000B1AB0;
    *(_QWORD *)(v25 + 32) = v3;
    v31 = v25;
    specialized Array._endMutation()(v25);
    v26 = v31;
    v27 = v3;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*a1);
    v30 = *a1;
    *a1 = 0x8000000000000000;
    v21 = v26;
  }
  sub_1000317D0(v21, v13, v15, isUniquelyReferenced_nonNull_native);
  v28 = *a1;
  *a1 = v30;
  swift_bridgeObjectRelease(v15);
  return swift_bridgeObjectRelease(v28);
}

uint64_t sub_10002ECFC@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;

  return sub_10002D6F0(*v1, v1[1], a1);
}

void sub_10002ED04(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  _QWORD v5[4];

  if (!qword_1000ED640)
  {
    sub_100030808(255, &qword_1000ED648, (uint64_t (*)(uint64_t, uint64_t, void *))&type metadata accessor for _ConditionalContent);
    v5[0] = &type metadata for Never;
    v5[1] = v2;
    v5[2] = &protocol witness table for Never;
    v5[3] = sub_10002F1FC();
    v3 = type metadata accessor for List(a1, v5);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_1000ED640);
  }
}

void sub_10002ED90(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  _QWORD v7[5];

  if (!qword_1000ED658)
  {
    sub_1000138C8(255, (unint64_t *)&qword_1000EC7A8, (uint64_t)&type metadata for String, (uint64_t (*)(_QWORD, uint64_t))&type metadata accessor for Array);
    v3 = v2;
    sub_100031E7C(255, &qword_1000ED660, (uint64_t (*)(uint64_t))sub_10002EE48);
    v7[0] = v3;
    v7[1] = &type metadata for String;
    v7[2] = v4;
    v7[3] = sub_10002F19C();
    v7[4] = &protocol witness table for String;
    v5 = type metadata accessor for ForEach(a1, v7);
    if (!v6)
      atomic_store(v5, (unint64_t *)&qword_1000ED658);
  }
}

void sub_10002EE48(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  _QWORD v7[5];

  if (!qword_1000ED668)
  {
    sub_1000076D8(255, &qword_1000EC248, (uint64_t (*)(uint64_t))sub_10002EEF4, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Array);
    v3 = v2;
    sub_10002EF30(255);
    v7[0] = v3;
    v7[1] = &type metadata for String;
    v7[2] = v4;
    v7[3] = sub_10002F13C();
    v7[4] = &protocol witness table for String;
    v5 = type metadata accessor for ForEach(a1, v7);
    if (!v6)
      atomic_store(v5, (unint64_t *)&qword_1000ED668);
  }
}

unint64_t sub_10002EEF4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000EC250;
  if (!qword_1000EC250)
  {
    v1 = objc_opt_self(HKNotificationInstructionDiagnosticDescription);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_1000EC250);
  }
  return result;
}

void sub_10002EF30(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  _QWORD v5[4];

  if (!qword_1000ED670)
  {
    sub_10002EFCC(255);
    v5[0] = v2;
    v5[1] = &type metadata for NotificationInstructionView;
    v5[2] = sub_100013198(&qword_1000ED698, (uint64_t (*)(uint64_t))sub_10002EFCC, (uint64_t)&protocol conformance descriptor for VStack<A>);
    v5[3] = sub_10002F0F8();
    v3 = type metadata accessor for NavigationLink(a1, v5);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_1000ED670);
  }
}

void sub_10002EFCC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;

  if (!qword_1000ED678)
  {
    sub_10002F044(255, &qword_1000ED680, &qword_1000ED688, (uint64_t)&type metadata for Text);
    v3 = v2;
    v4 = sub_10002F098();
    v5 = type metadata accessor for VStack(a1, v3, v4);
    if (!v6)
      atomic_store(v5, (unint64_t *)&qword_1000ED678);
  }
}

void sub_10002F044(uint64_t a1, unint64_t *a2, unint64_t *a3, uint64_t a4)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;

  if (!*a2)
  {
    sub_100031D50(255, a3, a4);
    v7 = type metadata accessor for TupleView(a1, v6);
    if (!v8)
      atomic_store(v7, a2);
  }
}

unint64_t sub_10002F098()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000ED690;
  if (!qword_1000ED690)
  {
    sub_10002F044(255, &qword_1000ED680, &qword_1000ED688, (uint64_t)&type metadata for Text);
    result = swift_getWitnessTable(&protocol conformance descriptor for TupleView<A>, v1);
    atomic_store(result, (unint64_t *)&qword_1000ED690);
  }
  return result;
}

unint64_t sub_10002F0F8()
{
  unint64_t result;

  result = qword_1000ED6A0;
  if (!qword_1000ED6A0)
  {
    result = swift_getWitnessTable(&unk_1000B202C, &type metadata for NotificationInstructionView);
    atomic_store(result, (unint64_t *)&qword_1000ED6A0);
  }
  return result;
}

unint64_t sub_10002F13C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000ED6A8;
  if (!qword_1000ED6A8)
  {
    sub_1000076D8(255, &qword_1000EC248, (uint64_t (*)(uint64_t))sub_10002EEF4, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Array);
    result = swift_getWitnessTable(&protocol conformance descriptor for [A], v1);
    atomic_store(result, (unint64_t *)&qword_1000ED6A8);
  }
  return result;
}

unint64_t sub_10002F19C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000ED6B0;
  if (!qword_1000ED6B0)
  {
    sub_1000138C8(255, (unint64_t *)&qword_1000EC7A8, (uint64_t)&type metadata for String, (uint64_t (*)(_QWORD, uint64_t))&type metadata accessor for Array);
    result = swift_getWitnessTable(&protocol conformance descriptor for [A], v1);
    atomic_store(result, (unint64_t *)&qword_1000ED6B0);
  }
  return result;
}

unint64_t sub_10002F1FC()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;

  result = qword_1000ED6B8;
  if (!qword_1000ED6B8)
  {
    sub_100030808(255, &qword_1000ED648, (uint64_t (*)(uint64_t, uint64_t, void *))&type metadata accessor for _ConditionalContent);
    v2 = v1;
    sub_10002F274();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v2);
    atomic_store(result, (unint64_t *)&qword_1000ED6B8);
  }
  return result;
}

unint64_t sub_10002F274()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;

  result = qword_1000ED6C0;
  if (!qword_1000ED6C0)
  {
    sub_100030878(255, &qword_1000ED650, (uint64_t (*)(uint64_t, void *, uint64_t))&type metadata accessor for _ConditionalContent);
    v2 = v1;
    sub_10002F2EC();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v2);
    atomic_store(result, (unint64_t *)&qword_1000ED6C0);
  }
  return result;
}

unint64_t sub_10002F2EC()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;

  result = qword_1000ED6C8;
  if (!qword_1000ED6C8)
  {
    sub_10002ED90(255);
    v2 = v1;
    sub_10002F34C();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ForEach<A, B, C>, v2);
    atomic_store(result, (unint64_t *)&qword_1000ED6C8);
  }
  return result;
}

unint64_t sub_10002F34C()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;

  result = qword_1000ED6D0;
  if (!qword_1000ED6D0)
  {
    sub_100031E7C(255, &qword_1000ED660, (uint64_t (*)(uint64_t))sub_10002EE48);
    v2 = v1;
    sub_10002F3D0();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> Section<A, B, C>, v2);
    atomic_store(result, (unint64_t *)&qword_1000ED6D0);
  }
  return result;
}

unint64_t sub_10002F3D0()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;

  result = qword_1000ED6D8;
  if (!qword_1000ED6D8)
  {
    sub_10002EE48(255);
    v2 = v1;
    sub_100013198(&qword_1000ED6E0, (uint64_t (*)(uint64_t))sub_10002EF30, (uint64_t)&protocol conformance descriptor for NavigationLink<A, B>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ForEach<A, B, C>, v2);
    atomic_store(result, (unint64_t *)&qword_1000ED6D8);
  }
  return result;
}

void sub_10002F448(uint64_t a1)
{
  uint64_t v2;
  unint64_t OpaqueTypeMetadata2;
  uint64_t v4;
  _QWORD v5[4];

  if (!qword_1000ED6E8)
  {
    sub_10002ED04(255);
    v5[0] = v2;
    v5[1] = type metadata accessor for InsetGroupedListStyle(255);
    v5[2] = sub_100013198(&qword_1000ED6F0, (uint64_t (*)(uint64_t))sub_10002ED04, (uint64_t)&protocol conformance descriptor for List<A, B>);
    v5[3] = &protocol witness table for InsetGroupedListStyle;
    OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2(a1, v5, &opaque type descriptor for <<opaque return type of View.listStyle<A>(_:)>>, 0);
    if (!v4)
      atomic_store(OpaqueTypeMetadata2, (unint64_t *)&qword_1000ED6E8);
  }
}

void sub_10002F4F8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t OpaqueTypeConformance2;
  unint64_t OpaqueTypeMetadata2;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;

  if (!qword_1000ED6F8)
  {
    sub_10002F448(255);
    v3 = v2;
    sub_10002ED04(255);
    v8 = v4;
    v9 = type metadata accessor for InsetGroupedListStyle(255);
    v10 = sub_100013198(&qword_1000ED6F0, (uint64_t (*)(uint64_t))sub_10002ED04, (uint64_t)&protocol conformance descriptor for List<A, B>);
    v11 = &protocol witness table for InsetGroupedListStyle;
    OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v8, &opaque type descriptor for <<opaque return type of View.listStyle<A>(_:)>>, 1);
    v8 = v3;
    v9 = OpaqueTypeConformance2;
    OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2(a1, &v8, &opaque type descriptor for <<opaque return type of View.navigationTitle(_:)>>, 0);
    if (!v7)
      atomic_store(OpaqueTypeMetadata2, (unint64_t *)&qword_1000ED6F8);
  }
}

void sub_10002F5D4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t OpaqueTypeConformance2;
  uint64_t v8;
  unint64_t OpaqueTypeMetadata2;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;

  if (!qword_1000ED700)
  {
    sub_10002F4F8(255);
    v3 = v2;
    sub_10002F448(255);
    v5 = v4;
    sub_10002ED04(255);
    v11 = v6;
    v12 = type metadata accessor for InsetGroupedListStyle(255);
    v13 = sub_100013198(&qword_1000ED6F0, (uint64_t (*)(uint64_t))sub_10002ED04, (uint64_t)&protocol conformance descriptor for List<A, B>);
    v14 = &protocol witness table for InsetGroupedListStyle;
    OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v11, &opaque type descriptor for <<opaque return type of View.listStyle<A>(_:)>>, 1);
    v11 = v5;
    v12 = OpaqueTypeConformance2;
    v8 = swift_getOpaqueTypeConformance2(&v11, &opaque type descriptor for <<opaque return type of View.navigationTitle(_:)>>, 1);
    v11 = v3;
    v12 = v8;
    OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2(a1, &v11, &opaque type descriptor for <<opaque return type of View.navigationBarTitleDisplayMode(_:)>>, 0);
    if (!v10)
      atomic_store(OpaqueTypeMetadata2, (unint64_t *)&qword_1000ED700);
  }
}

void sub_10002F6D4(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_1000ED708)
  {
    sub_10002F5D4(255);
    v3 = type metadata accessor for ModifiedContent(a1, v2);
    if (!v4)
      atomic_store(v3, &qword_1000ED708);
  }
}

uint64_t sub_10002F730@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_10002DB9C(*(_QWORD *)(v1 + 24), a1);
}

uint64_t sub_10002F738()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

void sub_10002F75C()
{
  uint64_t v0;

  sub_10002E818(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t sub_10002F764()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  v2 = *(_QWORD *)(v0 + 16);
  v3 = *(_QWORD *)(v0 + 24);
  v4 = (_QWORD *)swift_task_alloc(dword_1000ED714);
  *(_QWORD *)(v1 + 16) = v4;
  *v4 = v1;
  v4[1] = sub_10001C2DC;
  return sub_10002E93C(v2, v3);
}

unint64_t sub_10002F7B4()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t OpaqueTypeConformance2;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;

  result = qword_1000ED720;
  if (!qword_1000ED720)
  {
    sub_10002F6D4(255);
    v2 = v1;
    sub_10002F4F8(255);
    v4 = v3;
    sub_10002F448(255);
    v6 = v5;
    sub_10002ED04(255);
    v10 = v7;
    v11 = type metadata accessor for InsetGroupedListStyle(255);
    v12 = sub_100013198(&qword_1000ED6F0, (uint64_t (*)(uint64_t))sub_10002ED04, (uint64_t)&protocol conformance descriptor for List<A, B>);
    v13 = &protocol witness table for InsetGroupedListStyle;
    OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v10, &opaque type descriptor for <<opaque return type of View.listStyle<A>(_:)>>, 1);
    v10 = v6;
    v11 = OpaqueTypeConformance2;
    v9 = swift_getOpaqueTypeConformance2(&v10, &opaque type descriptor for <<opaque return type of View.navigationTitle(_:)>>, 1);
    v10 = v4;
    v11 = v9;
    swift_getOpaqueTypeConformance2(&v10, &opaque type descriptor for <<opaque return type of View.navigationBarTitleDisplayMode(_:)>>, 1);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v2);
    atomic_store(result, (unint64_t *)&qword_1000ED720);
  }
  return result;
}

uint64_t sub_10002F8CC(uint64_t a1)
{
  uint64_t v2;

  sub_10002F6D4(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_10002F908()
{
  uint64_t v0;

  swift_weakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10002F92C(uint64_t a1, void *a2, void *a3)
{
  uint64_t v3;

  return sub_100015148(a1, a2, a3, v3);
}

uint64_t sub_10002F934@<X0>(uint64_t a1@<X0>, char *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  char v45;
  uint64_t v46;
  char *v47;
  void (*v48)(char *, char *, uint64_t);
  char *v49;
  char *v50;
  uint64_t v51;
  void (*v52)(char *, char *, uint64_t);
  char *v53;
  char *v54;
  uint64_t v55;
  char *v56;
  char *v57;
  uint64_t v58;
  char *v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  char *v64;
  uint64_t v65;
  void (*v66)(char *, uint64_t);
  void (*v67)(char *, uint64_t);
  void (*v68)(char *, uint64_t);
  void (*v70)(char *, char *, uint64_t);
  char *v71;
  char *v72;
  char *v73;
  char *v74;
  uint64_t v75;
  char *v76;
  uint64_t v77;
  char *v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  char *v82;
  char *v83;
  uint64_t v84;
  uint64_t v85;
  char v86[16];
  uint64_t v87;
  char v88[16];
  uint64_t v89;
  char v90[16];
  uint64_t v91;
  char v92[16];
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  char v96;
  uint64_t v97;

  v78 = a2;
  sub_100031E7C(0, &qword_1000ED780, (uint64_t (*)(uint64_t))sub_100031ED8);
  v77 = v3;
  v85 = *(_QWORD *)(v3 - 8);
  v4 = __chkstk_darwin(v3);
  v76 = (char *)&v70 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v79 = (char *)&v70 - v6;
  sub_100031D9C(0);
  v75 = v7;
  v81 = *(_QWORD *)(v7 - 8);
  v8 = __chkstk_darwin(v7);
  v74 = (char *)&v70 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v11 = (char *)&v70 - v10;
  sub_100031CD4(0);
  v84 = v12;
  v80 = *(_QWORD *)(v12 - 8);
  v13 = __chkstk_darwin(v12);
  v73 = (char *)&v70 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = __chkstk_darwin(v13);
  v83 = (char *)&v70 - v16;
  v17 = __chkstk_darwin(v15);
  v82 = (char *)&v70 - v18;
  __chkstk_darwin(v17);
  v20 = (char *)&v70 - v19;
  v93 = a1;
  v21 = LocalizedStringKey.init(stringLiteral:)(0x1000000000000010, 0x80000001000B90B0);
  v94 = Text.init(_:tableName:bundle:comment:)(v21);
  v95 = v22;
  v96 = v23 & 1;
  v97 = v24;
  sub_10002F044(0, &qword_1000ED758, &qword_1000ED760, (uint64_t)&type metadata for TitleSpacerDetailCell);
  v26 = v25;
  v27 = sub_100031FBC();
  v72 = v20;
  Section<>.init(header:content:)(&v94, sub_100031FB4, v92, &type metadata for Text, v26, &protocol witness table for Text, v27);
  v91 = a1;
  v28 = LocalizedStringKey.init(stringLiteral:)(0x74614420BE929FF0, 0xA900000000000061);
  v94 = Text.init(_:tableName:bundle:comment:)(v28);
  v95 = v29;
  v96 = v30 & 1;
  v97 = v31;
  sub_1000076D8(0, &qword_1000ED770, (uint64_t (*)(uint64_t))sub_100031E18, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for TupleView);
  v33 = v32;
  v34 = sub_100032024();
  v71 = v11;
  Section<>.init(header:content:)(&v94, sub_10003201C, v90, &type metadata for Text, v33, &protocol witness table for Text, v34);
  v89 = a1;
  v35 = LocalizedStringKey.init(stringLiteral:)(0x6E655320B2939FF0, 0xAB00000000726564);
  v94 = Text.init(_:tableName:bundle:comment:)(v35);
  v95 = v36;
  v96 = v37 & 1;
  v97 = v38;
  sub_100031ED8(0);
  v40 = v39;
  v41 = sub_10003208C();
  v42 = v79;
  Section<>.init(header:content:)(&v94, sub_100032084, v88, &type metadata for Text, v40, &protocol witness table for Text, v41);
  v87 = a1;
  v43 = LocalizedStringKey.init(stringLiteral:)(0x1000000000000011, 0x80000001000B90D0);
  v94 = Text.init(_:tableName:bundle:comment:)(v43);
  v95 = v44;
  v96 = v45 & 1;
  v97 = v46;
  v47 = v82;
  Section<>.init(header:content:)(&v94, sub_100032138, v86, &type metadata for Text, v26, &protocol witness table for Text, v27);
  v48 = *(void (**)(char *, char *, uint64_t))(v80 + 16);
  v49 = v83;
  v50 = v20;
  v51 = v84;
  v48(v83, v50, v84);
  v52 = *(void (**)(char *, char *, uint64_t))(v81 + 16);
  v53 = v74;
  v54 = v11;
  v55 = v75;
  v52(v74, v54, v75);
  v70 = *(void (**)(char *, char *, uint64_t))(v85 + 16);
  v56 = v76;
  v57 = v42;
  v58 = v77;
  v70(v76, v57, v77);
  v59 = v73;
  v48(v73, v47, v51);
  v60 = v78;
  v48(v78, v49, v51);
  sub_100031C3C(0);
  v62 = v61;
  v52(&v60[*(int *)(v61 + 48)], v53, v55);
  v70(&v60[*(int *)(v62 + 64)], v56, v58);
  v63 = v59;
  v64 = v59;
  v65 = v84;
  v48(&v60[*(int *)(v62 + 80)], v64, v84);
  v66 = *(void (**)(char *, uint64_t))(v80 + 8);
  v66(v82, v65);
  v67 = *(void (**)(char *, uint64_t))(v85 + 8);
  v67(v79, v58);
  v68 = *(void (**)(char *, uint64_t))(v81 + 8);
  v68(v71, v55);
  v66(v72, v65);
  v66(v63, v65);
  v67(v56, v58);
  v68(v53, v55);
  return ((uint64_t (*)(char *, uint64_t))v66)(v83, v65);
}

uint64_t sub_10002FF90@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v4 = objc_msgSend(a1, "messageIdentifier");
  v5 = static String._unconditionallyBridgeFromObjectiveC(_:)(v4);
  v7 = v6;

  v8 = objc_msgSend(a1, "clientIdentifier");
  v9 = static String._unconditionallyBridgeFromObjectiveC(_:)(v8);
  v11 = v10;

  *(_QWORD *)a2 = 0xD000000000000012;
  *(_QWORD *)(a2 + 8) = 0x80000001000B9130;
  *(_QWORD *)(a2 + 16) = v5;
  *(_QWORD *)(a2 + 24) = v7;
  *(_BYTE *)(a2 + 32) = 1;
  *(_QWORD *)(a2 + 40) = 0xD000000000000011;
  *(_QWORD *)(a2 + 48) = 0x80000001000B9150;
  *(_QWORD *)(a2 + 56) = v9;
  *(_QWORD *)(a2 + 64) = v11;
  *(_BYTE *)(a2 + 72) = 0;
  v12 = swift_bridgeObjectRetain(0x80000001000B9130);
  return swift_bridgeObjectRelease(v12);
}

uint64_t sub_100030060@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v4 = objc_msgSend(a1, "action");
  v5 = static String._unconditionallyBridgeFromObjectiveC(_:)(v4);
  v7 = v6;

  v8 = objc_msgSend(a1, "categoryIdentifier");
  v9 = static String._unconditionallyBridgeFromObjectiveC(_:)(v8);
  v11 = v10;

  v12 = objc_msgSend(a1, "criteria");
  v13 = static String._unconditionallyBridgeFromObjectiveC(_:)(v12);
  v15 = v14;

  *(_QWORD *)a2 = 0xD000000000000013;
  *(_QWORD *)(a2 + 8) = 0x80000001000B90F0;
  *(_QWORD *)(a2 + 16) = v5;
  *(_QWORD *)(a2 + 24) = v7;
  *(_BYTE *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 40) = 0xD000000000000013;
  *(_QWORD *)(a2 + 48) = 0x80000001000B9110;
  *(_QWORD *)(a2 + 56) = v9;
  *(_QWORD *)(a2 + 64) = v11;
  *(_BYTE *)(a2 + 72) = 0;
  *(_QWORD *)(a2 + 80) = 0x6169726574697243;
  *(_QWORD *)(a2 + 88) = 0xE800000000000000;
  *(_QWORD *)(a2 + 96) = v13;
  *(_QWORD *)(a2 + 104) = v15;
  *(_BYTE *)(a2 + 112) = 0;
  swift_bridgeObjectRetain(0x80000001000B90F0);
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRetain(0x80000001000B9110);
  swift_bridgeObjectRelease(v7);
  swift_bridgeObjectRelease(0x80000001000B90F0);
  return swift_bridgeObjectRelease(0x80000001000B9110);
}

uint64_t sub_1000301A4@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  _QWORD *v22;
  uint64_t result;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  char v41;
  char v42;
  uint64_t v43;
  __int128 v44;
  uint64_t v45;
  uint64_t v46;
  __int128 v47;
  __int128 v48;
  _OWORD v49[2];
  __int128 v50;
  __int16 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  char v59;
  char v60;

  v3 = objc_msgSend(a1, "sendingDeviceInfo");
  v4 = static String._unconditionallyBridgeFromObjectiveC(_:)(v3);
  v6 = v5;

  *(_QWORD *)&v52 = v4;
  *((_QWORD *)&v52 + 1) = v6;
  v7 = sub_10002D0D0();
  v8 = StringProtocol<>.split(separator:maxSplits:omittingEmptySubsequences:)(59, 0xE100000000000000, 0x7FFFFFFFFFFFFFFFLL, 1, &type metadata for String, v7);
  v9 = v8;
  v10 = *(_QWORD *)(v8 + 16);
  if (v10)
  {
    v43 = v4;
    *(_QWORD *)&v52 = _swiftEmptyArrayStorage;
    sub_10007FEE0(0, v10, 0);
    v11 = _swiftEmptyArrayStorage;
    v12 = (_QWORD *)(v9 + 56);
    do
    {
      v13 = *(v12 - 3);
      v14 = *(v12 - 2);
      v15 = *(v12 - 1);
      v16 = *v12;
      swift_bridgeObjectRetain(*v12);
      v17 = static String._fromSubstring(_:)(v13, v14, v15, v16);
      v19 = v18;
      swift_bridgeObjectRelease(v16);
      *(_QWORD *)&v52 = v11;
      v21 = v11[2];
      v20 = v11[3];
      if (v21 >= v20 >> 1)
      {
        sub_10007FEE0(v20 > 1, v21 + 1, 1);
        v11 = (_QWORD *)v52;
      }
      v11[2] = v21 + 1;
      v22 = &v11[2 * v21];
      v22[4] = v17;
      v22[5] = v19;
      v12 += 4;
      --v10;
    }
    while (v10);
    swift_bridgeObjectRelease(v9);
    v4 = v43;
  }
  else
  {
    swift_bridgeObjectRelease(v8);
    v11 = _swiftEmptyArrayStorage;
  }
  if (v11[2] != 3)
  {
    swift_bridgeObjectRelease(v11);
    v44 = xmmword_1000B1EB0;
    v45 = v4;
    v46 = v6;
    v47 = 0u;
    v48 = 0u;
    memset(v49, 0, sizeof(v49));
    v50 = 0u;
    v51 = 256;
    goto LABEL_14;
  }
  result = swift_bridgeObjectRelease(v6);
  v24 = v11[2];
  if (!v24)
  {
    __break(1u);
    goto LABEL_16;
  }
  if (v24 == 1)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  if (v24 >= 3)
  {
    v26 = v11[4];
    v25 = v11[5];
    v28 = v11[6];
    v27 = v11[7];
    v30 = v11[8];
    v29 = v11[9];
    swift_bridgeObjectRetain(v25);
    swift_bridgeObjectRetain(v27);
    swift_bridgeObjectRetain(v29);
    swift_bridgeObjectRelease(v11);
    swift_bridgeObjectRetain(0xEB00000000656D61);
    swift_bridgeObjectRetain(v25);
    swift_bridgeObjectRetain(0xEC00000065707954);
    swift_bridgeObjectRelease(v25);
    swift_bridgeObjectRelease(0xEB00000000656D61);
    swift_bridgeObjectRelease(0xEC00000065707954);
    v44 = xmmword_1000B1EC0;
    v45 = v26;
    v46 = v25;
    v47 = xmmword_1000B1ED0;
    *(_QWORD *)&v48 = 0xEC00000065707954;
    *((_QWORD *)&v48 + 1) = v28;
    *(_QWORD *)&v49[0] = v27;
    *(_OWORD *)((char *)v49 + 8) = xmmword_1000B1EE0;
    *((_QWORD *)&v49[1] + 1) = 0xE500000000000000;
    *(_QWORD *)&v50 = v30;
    *((_QWORD *)&v50 + 1) = v29;
    v51 = 0;
LABEL_14:
    sub_1000076D8(0, &qword_1000ED770, (uint64_t (*)(uint64_t))sub_100031E18, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for TupleView);
    v32 = v31;
    v33 = sub_100032024();
    v34 = sub_1000320F4();
    result = _ConditionalContent<>.init(storage:)(&v44, v32, &type metadata for TitleSpacerDetailCell, v33, v34);
    v35 = v53;
    v36 = v54;
    v37 = v55;
    v38 = v56;
    v39 = v57;
    v40 = v58;
    v41 = v59;
    v42 = v60;
    *(_OWORD *)a2 = v52;
    *(_OWORD *)(a2 + 16) = v35;
    *(_OWORD *)(a2 + 32) = v36;
    *(_OWORD *)(a2 + 48) = v37;
    *(_OWORD *)(a2 + 64) = v38;
    *(_OWORD *)(a2 + 80) = v39;
    *(_OWORD *)(a2 + 96) = v40;
    *(_BYTE *)(a2 + 112) = v41;
    *(_BYTE *)(a2 + 113) = v42;
    return result;
  }
LABEL_17:
  __break(1u);
  return result;
}

uint64_t sub_1000304CC@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v4 = objc_msgSend(a1, "creationDate");
  v5 = static String._unconditionallyBridgeFromObjectiveC(_:)(v4);
  v7 = v6;

  v8 = sub_1000A4D40(v5, v7);
  v10 = v9;
  swift_bridgeObjectRelease(v7);
  v11 = objc_msgSend(a1, "expirationDate");
  v12 = static String._unconditionallyBridgeFromObjectiveC(_:)(v11);
  v14 = v13;

  v15 = sub_1000A4D40(v12, v14);
  v17 = v16;
  swift_bridgeObjectRelease(v14);
  strcpy((char *)a2, "Creation Date");
  *(_WORD *)(a2 + 14) = -4864;
  *(_QWORD *)(a2 + 16) = v8;
  *(_QWORD *)(a2 + 24) = v10;
  *(_BYTE *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 40) = 0x6974617269707845;
  *(_QWORD *)(a2 + 48) = 0xEF65746144206E6FLL;
  *(_QWORD *)(a2 + 56) = v15;
  *(_QWORD *)(a2 + 64) = v17;
  *(_BYTE *)(a2 + 72) = 0;
  v18 = swift_bridgeObjectRetain(0xED00006574614420);
  return swift_bridgeObjectRelease(v18);
}

uint64_t sub_1000305F4()
{
  return static View._viewListCount(inputs:)();
}

uint64_t sub_10003060C()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE v16[16];
  uint64_t v17;

  v1 = type metadata accessor for InsetGroupedListStyle(0);
  v2 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  v4 = &v16[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_100031BA8(0);
  v6 = v5;
  v7 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v9 = &v16[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v17 = *v0;
  sub_1000076D8(0, &qword_1000ED740, (uint64_t (*)(uint64_t))sub_100031C3C, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for TupleView);
  v11 = v10;
  v12 = sub_100031F4C();
  v13 = List<>.init(content:)(sub_100031FAC, v16, v11, v12);
  InsetGroupedListStyle.init()(v13);
  v14 = sub_100013198(&qword_1000ED798, (uint64_t (*)(uint64_t))sub_100031BA8, (uint64_t)&protocol conformance descriptor for List<A, B>);
  View.listStyle<A>(_:)(v4, v6, v1, v14, &protocol witness table for InsetGroupedListStyle);
  (*(void (**)(_BYTE *, uint64_t))(v2 + 8))(v4, v1);
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v7 + 8))(v9, v6);
}

uint64_t sub_100030778(uint64_t a1, void *a2, uint64_t a3, void *a4)
{
  uint64_t v5;
  uint64_t v7;
  void (*v8)(id, uint64_t, void *);
  unint64_t v9;
  id v10;
  id v11;

  v5 = a3;
  v8 = *(void (**)(id, uint64_t, void *))(a1 + 32);
  v7 = *(_QWORD *)(a1 + 40);
  if (a3)
  {
    v9 = sub_10002EEF4();
    v5 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v5, v9);
  }
  swift_retain(v7);
  v10 = a2;
  v11 = a4;
  v8(v10, v5, a4);
  swift_release(v7);

  return swift_bridgeObjectRelease(v5);
}

void sub_100030808(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t, void *))
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;

  if (!*a2)
  {
    sub_100030878(255, &qword_1000ED650, (uint64_t (*)(uint64_t, void *, uint64_t))&type metadata accessor for _ConditionalContent);
    v7 = a3(a1, v6, &type metadata for Text);
    if (!v8)
      atomic_store(v7, a2);
  }
}

void sub_100030878(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, void *, uint64_t))
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;

  if (!*a2)
  {
    sub_10002ED90(255);
    v7 = a3(a1, &type metadata for Text, v6);
    if (!v8)
      atomic_store(v7, a2);
  }
}

uint64_t sub_1000308E0(uint64_t a1, uint64_t a2, char a3)
{
  if ((a3 & 1) != 0)
    return swift_retain(a1);
  else
    return swift_bridgeObjectRetain(a2);
}

uint64_t sub_1000308F0(uint64_t a1, char a2)
{
  if ((a2 & 1) != 0)
    return swift_errorRelease();
  else
    return swift_bridgeObjectRelease(a1);
}

uint64_t sub_1000308FC(uint64_t a1, uint64_t a2, char a3)
{
  if ((a3 & 1) != 0)
    return swift_release(a1);
  else
    return swift_bridgeObjectRelease(a2);
}

uint64_t sub_10003090C(uint64_t *a1)
{
  uint64_t v2;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v4;
  Swift::Int v5;
  uint64_t v7[2];

  v2 = *a1;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*a1);
  *a1 = v2;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    v2 = sub_10007C094(v2);
    *a1 = v2;
  }
  v4 = *(_QWORD *)(v2 + 16);
  v7[0] = v2 + 32;
  v7[1] = v4;
  v5 = sub_100030984(v7);
  return specialized ContiguousArray._endMutation()(v5);
}

Swift::Int sub_100030984(uint64_t *a1)
{
  uint64_t v1;
  Swift::Int v3;
  Swift::Int result;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  char *v9;
  Swift::Int v10;
  uint64_t v11;
  unint64_t v12;
  Swift::Int v13;
  void *v14;
  id v15;
  id v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  id v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  id *v26;
  int v27;
  void *v28;
  id v29;
  id v30;
  id v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  id v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v40;
  Swift::Int v41;
  Swift::Int v42;
  uint64_t *v43;
  uint64_t v44;
  Swift::Int v45;
  uint64_t v46;
  Swift::Int v47;
  void *v48;
  void *v49;
  id v50;
  id v51;
  id v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  id v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char v61;
  void *v62;
  unint64_t v63;
  unint64_t v64;
  char *v65;
  char *v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  BOOL v78;
  unint64_t v79;
  char *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  BOOL v88;
  uint64_t v89;
  char v90;
  char *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  BOOL v95;
  uint64_t v96;
  uint64_t v97;
  char *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  char *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  unint64_t v106;
  char *v107;
  uint64_t v108;
  char *v109;
  uint64_t v110;
  unint64_t v111;
  uint64_t v112;
  unint64_t v113;
  uint64_t v114;
  uint64_t v115;
  char *v116;
  unint64_t v117;
  uint64_t v118;
  uint64_t *v119;
  uint64_t v120;
  uint64_t v121;
  Swift::Int v122;
  char *v123;
  char *v124;
  Swift::Int v125;
  Swift::Int v126;
  Swift::Int v127;
  int v128;
  uint64_t v129;
  void **v130;
  uint64_t v131;
  Swift::Int v132;
  Swift::Int v133;
  Swift::Int v134;
  uint64_t v135;

  v3 = a1[1];
  result = _minimumMergeRunLength(_:)(v3);
  if (result >= v3)
  {
    if (v3 < 0)
      goto LABEL_150;
    if (v3)
      return sub_10003123C(0, v3, 1, a1);
    return result;
  }
  if (v3 >= 0)
    v5 = v3;
  else
    v5 = v3 + 1;
  if (v3 < -1)
    goto LABEL_158;
  v122 = result;
  v119 = a1;
  if (v3 < 2)
  {
    v9 = (char *)_swiftEmptyArrayStorage;
    v135 = (uint64_t)_swiftEmptyArrayStorage;
    v130 = (void **)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 32);
    if (v3 != 1)
    {
      v12 = _swiftEmptyArrayStorage[2];
LABEL_116:
      if (v12 >= 2)
      {
        v112 = *v119;
        do
        {
          v113 = v12 - 2;
          if (v12 < 2)
            goto LABEL_145;
          if (!v112)
            goto LABEL_157;
          v114 = *(_QWORD *)&v9[16 * v113 + 32];
          v115 = *(_QWORD *)&v9[16 * v12 + 24];
          sub_1000313BC((void **)(v112 + 8 * v114), (id *)(v112 + 8 * *(_QWORD *)&v9[16 * v12 + 16]), (id *)(v112 + 8 * v115), v130);
          if (v1)
            break;
          if (v115 < v114)
            goto LABEL_146;
          if ((swift_isUniquelyReferenced_nonNull_native(v9) & 1) == 0)
            v9 = sub_100079EC0((uint64_t)v9);
          if (v113 >= *((_QWORD *)v9 + 2))
            goto LABEL_147;
          v116 = &v9[16 * v113 + 32];
          *(_QWORD *)v116 = v114;
          *((_QWORD *)v116 + 1) = v115;
          v117 = *((_QWORD *)v9 + 2);
          if (v12 > v117)
            goto LABEL_148;
          memmove(&v9[16 * v12 + 16], &v9[16 * v12 + 32], 16 * (v117 - v12));
          *((_QWORD *)v9 + 2) = v117 - 1;
          v12 = v117 - 1;
        }
        while (v117 > 2);
      }
LABEL_127:
      v118 = swift_bridgeObjectRelease(v9);
      *(_QWORD *)((v135 & 0xFFFFFFFFFFFFF8) + 0x10) = 0;
      specialized Array._endMutation()(v118);
      return swift_bridgeObjectRelease(v135);
    }
  }
  else
  {
    v6 = v5 >> 1;
    v7 = sub_10002EEF4();
    v8 = static Array._allocateBufferUninitialized(minimumCapacity:)(v6, v7);
    *(_QWORD *)((v8 & 0xFFFFFFFFFFFFFF8) + 0x10) = v6;
    v130 = (void **)((v8 & 0xFFFFFFFFFFFFFF8) + 32);
    v135 = v8;
  }
  v10 = 0;
  v11 = *a1;
  v120 = *a1 + 16;
  v121 = *a1 - 8;
  v9 = (char *)_swiftEmptyArrayStorage;
  v127 = v3;
  v131 = *a1;
  while (2)
  {
    v13 = v10 + 1;
    v126 = v10;
    if (v10 + 1 >= v3)
      goto LABEL_45;
    v123 = v9;
    v14 = *(void **)(v11 + 8 * v10);
    v15 = *(id *)(v11 + 8 * v13);
    v16 = v14;
    v17 = objc_msgSend(v15, "creationDate");
    v18 = static String._unconditionallyBridgeFromObjectiveC(_:)(v17);
    v20 = v19;

    v21 = objc_msgSend(v16, "creationDate");
    v22 = static String._unconditionallyBridgeFromObjectiveC(_:)(v21);
    v24 = v23;

    if (v22 == v18 && v24 == v20)
    {
      v128 = 0;
      v24 = v20;
    }
    else
    {
      v128 = _stringCompareWithSmolCheck(_:_:expecting:)(v22, v24, v18, v20, 1);
    }
    swift_bridgeObjectRelease(v20);
    swift_bridgeObjectRelease(v24);

    v13 = v10 + 2;
    v3 = v127;
    if (v10 + 2 >= v127)
      goto LABEL_36;
    v26 = (id *)(v120 + 8 * v10);
    while (1)
    {
      v132 = v13;
      v28 = *(v26 - 1);
      v29 = *v26;
      v30 = v28;
      v31 = objc_msgSend(v29, "creationDate");
      v32 = static String._unconditionallyBridgeFromObjectiveC(_:)(v31);
      v34 = v33;

      v35 = objc_msgSend(v30, "creationDate");
      v36 = static String._unconditionallyBridgeFromObjectiveC(_:)(v35);
      v38 = v37;

      if (v36 == v32 && v38 == v34)
      {

        swift_bridgeObjectRelease_n(v34, 2);
        if ((v128 & 1) != 0)
        {
          v9 = v123;
          v10 = v126;
          v3 = v127;
          v11 = v131;
          v13 = v132;
          goto LABEL_37;
        }
        goto LABEL_25;
      }
      v27 = _stringCompareWithSmolCheck(_:_:expecting:)(v36, v38, v32, v34, 1);

      swift_bridgeObjectRelease(v34);
      swift_bridgeObjectRelease(v38);
      if (((v128 ^ v27) & 1) != 0)
        break;
LABEL_25:
      v13 = v132 + 1;
      ++v26;
      v3 = v127;
      if (v127 == v132 + 1)
      {
        v13 = v127;
        goto LABEL_35;
      }
    }
    v3 = v127;
    v13 = v132;
LABEL_35:
    v10 = v126;
LABEL_36:
    v9 = v123;
    v11 = v131;
    if ((v128 & 1) != 0)
    {
LABEL_37:
      if (v13 < v10)
        goto LABEL_151;
      if (v10 < v13)
      {
        v40 = (uint64_t *)(v121 + 8 * v13);
        v41 = v13;
        v42 = v10;
        v43 = (uint64_t *)(v11 + 8 * v10);
        do
        {
          if (v42 != --v41)
          {
            if (!v11)
              goto LABEL_156;
            v44 = *v43;
            *v43 = *v40;
            *v40 = v44;
          }
          ++v42;
          --v40;
          ++v43;
        }
        while (v42 < v41);
      }
    }
LABEL_45:
    if (v13 >= v3)
      goto LABEL_68;
    if (__OFSUB__(v13, v10))
      goto LABEL_149;
    if (v13 - v10 >= v122)
    {
LABEL_68:
      if (v13 < v10)
        goto LABEL_144;
      if ((swift_isUniquelyReferenced_nonNull_native(v9) & 1) == 0)
        v9 = sub_100079C78(0, *((_QWORD *)v9 + 2) + 1, 1, v9);
      v64 = *((_QWORD *)v9 + 2);
      v63 = *((_QWORD *)v9 + 3);
      v12 = v64 + 1;
      if (v64 >= v63 >> 1)
        v9 = sub_100079C78((char *)(v63 > 1), v64 + 1, 1, v9);
      *((_QWORD *)v9 + 2) = v12;
      v65 = v9 + 32;
      v66 = &v9[16 * v64 + 32];
      *(_QWORD *)v66 = v10;
      *((_QWORD *)v66 + 1) = v13;
      v134 = v13;
      if (!v64)
      {
        v12 = 1;
LABEL_14:
        v3 = v127;
        v10 = v134;
        if (v134 >= v127)
          goto LABEL_116;
        continue;
      }
      while (1)
      {
        v67 = v12 - 1;
        if (v12 >= 4)
        {
          v72 = &v65[16 * v12];
          v73 = *((_QWORD *)v72 - 8);
          v74 = *((_QWORD *)v72 - 7);
          v78 = __OFSUB__(v74, v73);
          v75 = v74 - v73;
          if (v78)
            goto LABEL_133;
          v77 = *((_QWORD *)v72 - 6);
          v76 = *((_QWORD *)v72 - 5);
          v78 = __OFSUB__(v76, v77);
          v70 = v76 - v77;
          v71 = v78;
          if (v78)
            goto LABEL_134;
          v79 = v12 - 2;
          v80 = &v65[16 * v12 - 32];
          v82 = *(_QWORD *)v80;
          v81 = *((_QWORD *)v80 + 1);
          v78 = __OFSUB__(v81, v82);
          v83 = v81 - v82;
          if (v78)
            goto LABEL_136;
          v78 = __OFADD__(v70, v83);
          v84 = v70 + v83;
          if (v78)
            goto LABEL_139;
          if (v84 >= v75)
          {
            v102 = &v65[16 * v67];
            v104 = *(_QWORD *)v102;
            v103 = *((_QWORD *)v102 + 1);
            v78 = __OFSUB__(v103, v104);
            v105 = v103 - v104;
            if (v78)
              goto LABEL_143;
            v95 = v70 < v105;
            goto LABEL_105;
          }
        }
        else
        {
          if (v12 != 3)
          {
            v96 = *((_QWORD *)v9 + 4);
            v97 = *((_QWORD *)v9 + 5);
            v78 = __OFSUB__(v97, v96);
            v89 = v97 - v96;
            v90 = v78;
            goto LABEL_99;
          }
          v69 = *((_QWORD *)v9 + 4);
          v68 = *((_QWORD *)v9 + 5);
          v78 = __OFSUB__(v68, v69);
          v70 = v68 - v69;
          v71 = v78;
        }
        if ((v71 & 1) != 0)
          goto LABEL_135;
        v79 = v12 - 2;
        v85 = &v65[16 * v12 - 32];
        v87 = *(_QWORD *)v85;
        v86 = *((_QWORD *)v85 + 1);
        v88 = __OFSUB__(v86, v87);
        v89 = v86 - v87;
        v90 = v88;
        if (v88)
          goto LABEL_138;
        v91 = &v65[16 * v67];
        v93 = *(_QWORD *)v91;
        v92 = *((_QWORD *)v91 + 1);
        v78 = __OFSUB__(v92, v93);
        v94 = v92 - v93;
        if (v78)
          goto LABEL_141;
        if (__OFADD__(v89, v94))
          goto LABEL_142;
        if (v89 + v94 >= v70)
        {
          v95 = v70 < v94;
LABEL_105:
          if (v95)
            v67 = v79;
          goto LABEL_107;
        }
LABEL_99:
        if ((v90 & 1) != 0)
          goto LABEL_137;
        v98 = &v65[16 * v67];
        v100 = *(_QWORD *)v98;
        v99 = *((_QWORD *)v98 + 1);
        v78 = __OFSUB__(v99, v100);
        v101 = v99 - v100;
        if (v78)
          goto LABEL_140;
        if (v101 < v89)
          goto LABEL_14;
LABEL_107:
        v106 = v67 - 1;
        if (v67 - 1 >= v12)
        {
          __break(1u);
LABEL_130:
          __break(1u);
LABEL_131:
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
LABEL_139:
          __break(1u);
LABEL_140:
          __break(1u);
LABEL_141:
          __break(1u);
LABEL_142:
          __break(1u);
LABEL_143:
          __break(1u);
LABEL_144:
          __break(1u);
LABEL_145:
          __break(1u);
LABEL_146:
          __break(1u);
LABEL_147:
          __break(1u);
LABEL_148:
          __break(1u);
LABEL_149:
          __break(1u);
LABEL_150:
          __break(1u);
LABEL_151:
          __break(1u);
LABEL_152:
          __break(1u);
          goto LABEL_153;
        }
        if (!v11)
          goto LABEL_155;
        v107 = &v65[16 * v106];
        v108 = *(_QWORD *)v107;
        v109 = &v65[16 * v67];
        v110 = *((_QWORD *)v109 + 1);
        sub_1000313BC((void **)(v11 + 8 * *(_QWORD *)v107), (id *)(v11 + 8 * *(_QWORD *)v109), (id *)(v11 + 8 * v110), v130);
        if (v1)
          goto LABEL_127;
        if (v110 < v108)
          goto LABEL_130;
        if (v67 > *((_QWORD *)v9 + 2))
          goto LABEL_131;
        *(_QWORD *)v107 = v108;
        *(_QWORD *)&v65[16 * v106 + 8] = v110;
        v111 = *((_QWORD *)v9 + 2);
        if (v67 >= v111)
          goto LABEL_132;
        v12 = v111 - 1;
        memmove(&v65[16 * v67], v109 + 16, 16 * (v111 - 1 - v67));
        *((_QWORD *)v9 + 2) = v111 - 1;
        if (v111 <= 2)
          goto LABEL_14;
      }
    }
    break;
  }
  if (__OFADD__(v10, v122))
    goto LABEL_152;
  if (v10 + v122 >= v3)
    v45 = v3;
  else
    v45 = v10 + v122;
  if (v45 >= v10)
  {
    if (v13 != v45)
    {
      v124 = v9;
      v125 = v45;
      v46 = v121 + 8 * v13;
      do
      {
        v48 = *(void **)(v11 + 8 * v13);
        v129 = v46;
        v133 = v13;
        while (1)
        {
          v49 = *(void **)v46;
          v50 = v48;
          v51 = v49;
          v52 = objc_msgSend(v50, "creationDate");
          v53 = static String._unconditionallyBridgeFromObjectiveC(_:)(v52);
          v55 = v54;

          v56 = objc_msgSend(v51, "creationDate");
          v57 = static String._unconditionallyBridgeFromObjectiveC(_:)(v56);
          v59 = v58;

          if (v57 == v53 && v59 == v55)
          {

            swift_bridgeObjectRelease_n(v55, 2);
            v11 = v131;
            v47 = v133;
            goto LABEL_56;
          }
          v61 = _stringCompareWithSmolCheck(_:_:expecting:)(v57, v59, v53, v55, 1);

          swift_bridgeObjectRelease(v55);
          swift_bridgeObjectRelease(v59);
          v11 = v131;
          if ((v61 & 1) == 0)
            break;
          if (!v131)
            goto LABEL_154;
          v62 = *(void **)v46;
          v48 = *(void **)(v46 + 8);
          *(_QWORD *)v46 = v48;
          *(_QWORD *)(v46 + 8) = v62;
          v46 -= 8;
          ++v10;
          v47 = v133;
          if (v133 == v10)
            goto LABEL_56;
        }
        v47 = v133;
LABEL_56:
        v13 = v47 + 1;
        v46 = v129 + 8;
        v10 = v126;
      }
      while (v13 != v125);
      v13 = v125;
      v9 = v124;
    }
    goto LABEL_68;
  }
LABEL_153:
  __break(1u);
LABEL_154:
  __break(1u);
LABEL_155:
  __break(1u);
LABEL_156:
  __break(1u);
LABEL_157:
  __break(1u);
LABEL_158:
  result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Can't construct Array with count < 0", 36, 2, "Swift/Array.swift", 17, 2, 936, 0);
  __break(1u);
  return result;
}

uint64_t sub_10003123C(uint64_t result, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  void *v8;
  id v9;
  id v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v20;
  void *v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v23 = result;
  if (a3 != a2)
  {
    v25 = *a4;
    v4 = *a4 + 8 * a3 - 8;
LABEL_6:
    v6 = *(void **)(v25 + 8 * a3);
    v7 = v23;
    v24 = v4;
    v26 = a3;
    while (1)
    {
      v8 = *(void **)v4;
      v9 = v6;
      v10 = v8;
      v11 = objc_msgSend(v9, "creationDate");
      v12 = static String._unconditionallyBridgeFromObjectiveC(_:)(v11);
      v14 = v13;

      v15 = objc_msgSend(v10, "creationDate");
      v16 = static String._unconditionallyBridgeFromObjectiveC(_:)(v15);
      v18 = v17;

      if (v16 == v12 && v18 == v14)
      {

        result = swift_bridgeObjectRelease_n(v14, 2);
        v5 = v26;
LABEL_5:
        a3 = v5 + 1;
        v4 = v24 + 8;
        if (a3 == a2)
          return result;
        goto LABEL_6;
      }
      v20 = _stringCompareWithSmolCheck(_:_:expecting:)(v16, v18, v12, v14, 1);

      swift_bridgeObjectRelease(v14);
      result = swift_bridgeObjectRelease(v18);
      v5 = v26;
      if ((v20 & 1) == 0)
        goto LABEL_5;
      if (!v25)
        break;
      v21 = *(void **)v4;
      v6 = *(void **)(v4 + 8);
      *(_QWORD *)v4 = v6;
      *(_QWORD *)(v4 + 8) = v21;
      v4 -= 8;
      if (v26 == ++v7)
        goto LABEL_5;
    }
    __break(1u);
  }
  return result;
}

uint64_t sub_1000313BC(void **__src, id *a2, id *a3, void **__dst)
{
  void **v4;
  id *v5;
  id *v6;
  id *v7;
  int64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  id *v14;
  void *v15;
  id v16;
  id v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  id v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v27;
  id *v28;
  void **v29;
  id *v30;
  void **v31;
  id *v32;
  void *v33;
  void *v34;
  void *v35;
  id v36;
  id v37;
  id v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  id v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char v47;
  id *v48;
  unint64_t v49;
  uint64_t result;
  void **v51;
  id *v52;
  void **v53;
  id *v54;
  void **v55;
  id *v56;
  id *v57;
  id *v58;
  void **v59;
  void **v60;
  id *v61;

  v4 = __dst;
  v5 = a3;
  v6 = a2;
  v7 = __src;
  v8 = (char *)a2 - (char *)__src;
  v9 = (char *)a2 - (char *)__src + 7;
  if ((char *)a2 - (char *)__src >= 0)
    v9 = (char *)a2 - (char *)__src;
  v10 = v9 >> 3;
  v11 = (char *)a3 - (char *)a2;
  v12 = (char *)a3 - (char *)a2 + 7;
  if ((char *)a3 - (char *)a2 >= 0)
    v12 = (char *)a3 - (char *)a2;
  v13 = v12 >> 3;
  v61 = __src;
  v60 = __dst;
  if (v10 >= v12 >> 3)
  {
    if (v11 < -7)
      goto LABEL_53;
    if (__dst != a2 || &a2[v13] <= __dst)
      memmove(__dst, a2, 8 * v13);
    v51 = v4;
    v31 = &v4[v13];
    v59 = v31;
    v61 = v6;
    if (v7 >= v6 || v11 < 8)
    {
LABEL_52:
      sub_100079D6C(&v61, &v60, &v59);
      return 1;
    }
    v32 = v6;
    v56 = v7;
    while (1)
    {
      v52 = v31;
      v54 = v6;
      v58 = v5;
      v34 = *--v31;
      v33 = v34;
      v35 = *--v32;
      v36 = v33;
      v37 = v35;
      v38 = objc_msgSend(v36, "creationDate");
      v39 = static String._unconditionallyBridgeFromObjectiveC(_:)(v38);
      v41 = v40;

      v42 = objc_msgSend(v37, "creationDate");
      v43 = static String._unconditionallyBridgeFromObjectiveC(_:)(v42);
      v45 = v44;

      if (v43 == v39 && v45 == v41)
        break;
      v47 = _stringCompareWithSmolCheck(_:_:expecting:)(v43, v45, v39, v41, 1);

      swift_bridgeObjectRelease(v41);
      swift_bridgeObjectRelease(v45);
      v48 = v58;
      v5 = v58 - 1;
      if ((v47 & 1) == 0)
        goto LABEL_46;
      v49 = (unint64_t)v56;
      v31 = v52;
      if (v58 != v54 || v5 >= v54)
        *v5 = *v32;
      v61 = v32;
LABEL_50:
      if ((unint64_t)v32 > v49)
      {
        v6 = v32;
        if (v31 > v51)
          continue;
      }
      goto LABEL_52;
    }

    swift_bridgeObjectRelease_n(v41, 2);
    v48 = v58;
    v5 = v58 - 1;
LABEL_46:
    v32 = v54;
    v49 = (unint64_t)v56;
    v59 = v31;
    if (v48 < v52 || v5 >= v52 || v48 != v52)
      *v5 = *v31;
    goto LABEL_50;
  }
  if (v8 >= -7)
  {
    if (__dst != __src || &__src[v10] <= __dst)
      memmove(__dst, __src, 8 * v10);
    v53 = &v4[v10];
    v59 = v53;
    if (v6 < v5 && v8 >= 8)
    {
      v57 = v5;
      while (1)
      {
        v55 = v7;
        v14 = v6;
        v15 = *v4;
        v16 = *v6;
        v17 = v15;
        v18 = objc_msgSend(v16, "creationDate");
        v19 = static String._unconditionallyBridgeFromObjectiveC(_:)(v18);
        v21 = v20;

        v22 = objc_msgSend(v17, "creationDate");
        v23 = static String._unconditionallyBridgeFromObjectiveC(_:)(v22);
        v25 = v24;

        if (v23 == v19 && v25 == v21)
          break;
        v27 = _stringCompareWithSmolCheck(_:_:expecting:)(v23, v25, v19, v21, 1);

        swift_bridgeObjectRelease(v21);
        swift_bridgeObjectRelease(v25);
        if ((v27 & 1) == 0)
          goto LABEL_23;
        v28 = v14 + 1;
        v29 = v55;
        v30 = v57;
        if (v55 < v14 || v55 >= v28 || v55 != v14)
          *v55 = *v14;
LABEL_26:
        v7 = v29 + 1;
        if (v4 < v53)
        {
          v6 = v28;
          if (v28 < v30)
            continue;
        }
        v61 = v7;
        goto LABEL_52;
      }

      swift_bridgeObjectRelease_n(v21, 2);
LABEL_23:
      v29 = v55;
      v30 = v57;
      if (v55 != v4)
        *v55 = *v4;
      v60 = ++v4;
      v28 = v14;
      goto LABEL_26;
    }
    goto LABEL_52;
  }
LABEL_53:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, 2, 1046, 0);
  __break(1u);
  return result;
}

uint64_t sub_1000317D0(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v10;
  char v11;
  unint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t result;
  unint64_t v21;
  char v22;
  uint64_t *v23;
  uint64_t v24;
  BOOL v25;
  uint64_t v26;

  v5 = v4;
  v10 = *v4;
  v12 = sub_10007DF44(a2, a3);
  v13 = *(_QWORD *)(v10 + 16);
  v14 = (v11 & 1) == 0;
  v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v16 = v11;
  v17 = *(_QWORD *)(v10 + 24);
  if (v17 >= v15 && (a4 & 1) != 0)
    goto LABEL_7;
  if (v17 >= v15 && (a4 & 1) == 0)
  {
    sub_10002C190();
LABEL_7:
    v18 = (_QWORD *)*v5;
    if ((v16 & 1) != 0)
    {
LABEL_8:
      v19 = v18[7];
      result = swift_bridgeObjectRelease(*(_QWORD *)(v19 + 8 * v12));
      *(_QWORD *)(v19 + 8 * v12) = a1;
      return result;
    }
LABEL_11:
    v18[(v12 >> 6) + 8] |= 1 << v12;
    v23 = (uint64_t *)(v18[6] + 16 * v12);
    *v23 = a2;
    v23[1] = a3;
    *(_QWORD *)(v18[7] + 8 * v12) = a1;
    v24 = v18[2];
    v25 = __OFADD__(v24, 1);
    v26 = v24 + 1;
    if (!v25)
    {
      v18[2] = v26;
      return swift_bridgeObjectRetain(a3);
    }
    goto LABEL_14;
  }
  sub_10002BCE4(v15, a4 & 1);
  v21 = sub_10007DF44(a2, a3);
  if ((v16 & 1) == (v22 & 1))
  {
    v12 = v21;
    v18 = (_QWORD *)*v5;
    if ((v16 & 1) != 0)
      goto LABEL_8;
    goto LABEL_11;
  }
LABEL_15:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
  return result;
}

void *sub_10003192C(uint64_t a1)
{
  uint64_t v2;
  uint64_t i;
  id v4;
  void *v5;
  uint64_t v6;
  uint64_t v8;
  id v9;
  void *v10;

  v10 = &_swiftEmptyDictionarySingleton;
  if ((unint64_t)a1 >> 62)
    goto LABEL_11;
  v2 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain(a1);
  for (; v2; v2 = _CocoaArrayWrapper.endIndex.getter(v8))
  {
    for (i = 4; ; ++i)
    {
      v4 = (a1 & 0xC000000000000001) != 0
         ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(i - 4, a1)
         : *(id *)(a1 + 8 * i);
      v5 = v4;
      v6 = i - 3;
      if (__OFADD__(i - 4, 1))
        break;
      v9 = v4;
      sub_10002EAD4(&v10, &v9);

      if (v6 == v2)
      {
        swift_bridgeObjectRelease(a1);
        return v10;
      }
    }
    __break(1u);
LABEL_11:
    if (a1 < 0)
      v8 = a1;
    else
      v8 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
  }
  swift_bridgeObjectRelease(a1);
  return &_swiftEmptyDictionarySingleton;
}

uint64_t sub_100031A50()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100031A74(uint64_t *a1)
{
  uint64_t v1;

  return sub_10002E130(a1, *(_QWORD *)(v1 + 16));
}

uint64_t sub_100031A7C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_100030878(0, &qword_1000ED650, (uint64_t (*)(uint64_t, void *, uint64_t))&type metadata accessor for _ConditionalContent);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_100031AD0(uint64_t a1)
{
  uint64_t v2;

  sub_100030878(0, &qword_1000ED650, (uint64_t (*)(uint64_t, void *, uint64_t))&type metadata accessor for _ConditionalContent);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_100031B1C()
{
  uint64_t *v0;

  return sub_10002E1E0(v0[2], v0[3], v0[4]);
}

const char *sub_100031B28()
{
  return "messageIdentifier";
}

double sub_100031B38@<D0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  double result;

  *(_QWORD *)&result = sub_10002E460((void *)*(_QWORD *)(v1 + 16), a1).n128_u64[0];
  return result;
}

ValueMetadata *type metadata accessor for NotificationInstructionView()
{
  return &type metadata for NotificationInstructionView;
}

uint64_t sub_100031B50()
{
  uint64_t v0;
  _QWORD v2[2];

  sub_10002F6D4(255);
  v2[0] = v0;
  v2[1] = sub_10002F7B4();
  return swift_getOpaqueTypeConformance2(v2, &opaque type descriptor for <<opaque return type of View.refreshable(action:)>>, 1);
}

uint64_t sub_100031B98(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_1000C061C, 1);
}

void sub_100031BA8(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  _QWORD v5[4];

  if (!qword_1000ED738)
  {
    sub_1000076D8(255, &qword_1000ED740, (uint64_t (*)(uint64_t))sub_100031C3C, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for TupleView);
    v5[0] = &type metadata for Never;
    v5[1] = v2;
    v5[2] = &protocol witness table for Never;
    v5[3] = sub_100031F4C();
    v3 = type metadata accessor for List(a1, v5);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_1000ED738);
  }
}

void sub_100031C3C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t TupleTypeMetadata;
  uint64_t v7;
  _QWORD v8[4];

  if (!qword_1000ED748)
  {
    sub_100031CD4(255);
    v3 = v2;
    v8[0] = v2;
    sub_100031D9C(255);
    v8[1] = v4;
    sub_100031E7C(255, &qword_1000ED780, (uint64_t (*)(uint64_t))sub_100031ED8);
    v8[2] = v5;
    v8[3] = v3;
    TupleTypeMetadata = swift_getTupleTypeMetadata(a1, 4, v8, 0, 0);
    if (!v7)
      atomic_store(TupleTypeMetadata, (unint64_t *)&qword_1000ED748);
  }
}

void sub_100031CD4(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_1000ED750)
  {
    sub_10002F044(255, &qword_1000ED758, &qword_1000ED760, (uint64_t)&type metadata for TitleSpacerDetailCell);
    v3 = type metadata accessor for Section(a1, &type metadata for Text, v2, &type metadata for EmptyView);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_1000ED750);
  }
}

void sub_100031D50(uint64_t a1, unint64_t *a2, uint64_t a3)
{
  unint64_t TupleTypeMetadata2;
  uint64_t v5;

  if (!*a2)
  {
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2(0, a3, a3, 0, 0);
    if (!v5)
      atomic_store(TupleTypeMetadata2, a2);
  }
}

void sub_100031D9C(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_1000ED768)
  {
    sub_1000076D8(255, &qword_1000ED770, (uint64_t (*)(uint64_t))sub_100031E18, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for TupleView);
    v3 = type metadata accessor for Section(a1, &type metadata for Text, v2, &type metadata for EmptyView);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_1000ED768);
  }
}

void sub_100031E18()
{
  unint64_t TupleTypeMetadata3;
  uint64_t v1;

  if (!qword_1000ED778)
  {
    TupleTypeMetadata3 = swift_getTupleTypeMetadata3(0, &type metadata for TitleSpacerDetailCell, &type metadata for TitleSpacerDetailCell, &type metadata for TitleSpacerDetailCell, 0, 0);
    if (!v1)
      atomic_store(TupleTypeMetadata3, (unint64_t *)&qword_1000ED778);
  }
}

void sub_100031E7C(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t))
{
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!*a2)
  {
    v5 = a3(255);
    v6 = type metadata accessor for Section(a1, &type metadata for Text, v5, &type metadata for EmptyView);
    if (!v7)
      atomic_store(v6, a2);
  }
}

void sub_100031ED8(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_1000ED788)
  {
    sub_1000076D8(255, &qword_1000ED770, (uint64_t (*)(uint64_t))sub_100031E18, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for TupleView);
    v3 = type metadata accessor for _ConditionalContent(a1, v2, &type metadata for TitleSpacerDetailCell);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_1000ED788);
  }
}

unint64_t sub_100031F4C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000ED790;
  if (!qword_1000ED790)
  {
    sub_1000076D8(255, &qword_1000ED740, (uint64_t (*)(uint64_t))sub_100031C3C, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for TupleView);
    result = swift_getWitnessTable(&protocol conformance descriptor for TupleView<A>, v1);
    atomic_store(result, (unint64_t *)&qword_1000ED790);
  }
  return result;
}

uint64_t sub_100031FAC@<X0>(char *a1@<X8>)
{
  uint64_t v1;

  return sub_10002F934(*(_QWORD *)(v1 + 16), a1);
}

uint64_t sub_100031FB4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_10002FF90(*(void **)(v1 + 16), a1);
}

unint64_t sub_100031FBC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000ED7A0;
  if (!qword_1000ED7A0)
  {
    sub_10002F044(255, &qword_1000ED758, &qword_1000ED760, (uint64_t)&type metadata for TitleSpacerDetailCell);
    result = swift_getWitnessTable(&protocol conformance descriptor for TupleView<A>, v1);
    atomic_store(result, (unint64_t *)&qword_1000ED7A0);
  }
  return result;
}

uint64_t sub_10003201C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_100030060(*(void **)(v1 + 16), a1);
}

unint64_t sub_100032024()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000ED7A8;
  if (!qword_1000ED7A8)
  {
    sub_1000076D8(255, &qword_1000ED770, (uint64_t (*)(uint64_t))sub_100031E18, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for TupleView);
    result = swift_getWitnessTable(&protocol conformance descriptor for TupleView<A>, v1);
    atomic_store(result, (unint64_t *)&qword_1000ED7A8);
  }
  return result;
}

uint64_t sub_100032084@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_1000301A4(*(void **)(v1 + 16), a1);
}

unint64_t sub_10003208C()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;

  result = qword_1000ED7B0;
  if (!qword_1000ED7B0)
  {
    sub_100031ED8(255);
    v2 = v1;
    sub_100032024();
    sub_1000320F4();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v2);
    atomic_store(result, (unint64_t *)&qword_1000ED7B0);
  }
  return result;
}

unint64_t sub_1000320F4()
{
  unint64_t result;

  result = qword_1000ED7B8;
  if (!qword_1000ED7B8)
  {
    result = swift_getWitnessTable(&unk_1000B29A8, &type metadata for TitleSpacerDetailCell);
    atomic_store(result, (unint64_t *)&qword_1000ED7B8);
  }
  return result;
}

uint64_t sub_100032138@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_1000304CC(*(void **)(v1 + 16), a1);
}

uint64_t sub_100032140()
{
  uint64_t v0;
  _QWORD v2[4];

  sub_100031BA8(255);
  v2[0] = v0;
  v2[1] = type metadata accessor for InsetGroupedListStyle(255);
  v2[2] = sub_100013198(&qword_1000ED798, (uint64_t (*)(uint64_t))sub_100031BA8, (uint64_t)&protocol conformance descriptor for List<A, B>);
  v2[3] = &protocol witness table for InsetGroupedListStyle;
  return swift_getOpaqueTypeConformance2(v2, &opaque type descriptor for <<opaque return type of View.listStyle<A>(_:)>>, 1);
}

void sub_1000321D4(uint64_t a1)
{
  void *v1;
  void *v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  NSURL *v9;
  void *v10;
  void *v11;
  unint64_t v12;
  Class isa;
  uint64_t v14;

  v2 = v1;
  sub_10000E944(0, (unint64_t *)&unk_1000ECA90, (uint64_t (*)(uint64_t))&type metadata accessor for URL);
  __chkstk_darwin(v4);
  v6 = (char *)&v14 - v5;
  sub_10001C8C4(a1, (uint64_t)&v14 - v5, (unint64_t *)&unk_1000ECA90, (uint64_t (*)(uint64_t))&type metadata accessor for URL);
  v7 = type metadata accessor for URL(0);
  v8 = *(_QWORD *)(v7 - 8);
  v10 = 0;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7) != 1)
  {
    URL._bridgeToObjectiveC()(v9);
    v10 = v11;
    (*(void (**)(char *, uint64_t))(v8 + 8))(v6, v7);
  }
  v12 = sub_10007C1F8((uint64_t)_swiftEmptyArrayStorage);
  isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v12);
  objc_msgSend(v2, "openSensitiveURL:withOptions:", v10, isa);

}

void sub_10003230C(uint64_t a1)
{
  sub_1000321D4(a1);
}

unint64_t sub_100032330()
{
  unint64_t result;

  result = qword_1000ED7C0;
  if (!qword_1000ED7C0)
  {
    result = swift_getWitnessTable(&unk_1000B2148, &type metadata for OpenSleepScheduleIntentV2);
    atomic_store(result, (unint64_t *)&qword_1000ED7C0);
  }
  return result;
}

unint64_t sub_100032378()
{
  unint64_t result;

  result = qword_1000ED7C8;
  if (!qword_1000ED7C8)
  {
    result = swift_getWitnessTable(&unk_1000B2170, &type metadata for OpenSleepScheduleIntentV2);
    atomic_store(result, (unint64_t *)&qword_1000ED7C8);
  }
  return result;
}

uint64_t sub_1000323BC(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_1000C0680, 1);
}

uint64_t sub_1000323CC(uint64_t a1, uint64_t a2)
{
  _QWORD v3[2];

  v3[0] = a2;
  v3[1] = sub_10001AF94();
  return swift_getOpaqueTypeConformance2(v3, &opaque type descriptor for <<opaque return type of static AppIntent.parameterSummary>>, 1);
}

uint64_t sub_10003240C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _BYTE *v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE v13[16];

  v0 = type metadata accessor for LocalizedStringResource.BundleDescription(0);
  v1 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin(v0);
  v3 = &v13[-((v2 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v4 = type metadata accessor for Locale(0);
  __chkstk_darwin(v4);
  v6 = &v13[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v7 = type metadata accessor for String.LocalizationValue(0);
  __chkstk_darwin(v7);
  v9 = &v13[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v10 = type metadata accessor for LocalizedStringResource(0);
  sub_10001C884(v10, qword_1000F0E88);
  sub_10001C86C(v10, (uint64_t)qword_1000F0E88);
  v11 = String.LocalizationValue.init(stringLiteral:)(0xD000000000000013, 0x80000001000B91B0);
  static Locale.current.getter(v11);
  (*(void (**)(_BYTE *, _QWORD, uint64_t))(v1 + 104))(v3, enum case for LocalizedStringResource.BundleDescription.main(_:), v0);
  return LocalizedStringResource.init(_:table:locale:bundle:comment:)(v9, 0x6E65746E49707041, 0xEA00000000007374, v6, v3, 0, 0, 256);
}

uint64_t sub_10003258C()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD v22[2];

  sub_10000E944(0, &qword_1000EC948, (uint64_t (*)(uint64_t))&type metadata accessor for LocalizedStringResource);
  __chkstk_darwin(v0);
  v2 = (char *)v22 - v1;
  v22[0] = type metadata accessor for LocalizedStringResource.BundleDescription(0);
  v3 = *(_QWORD *)(v22[0] - 8);
  __chkstk_darwin(v22[0]);
  v5 = (char *)v22 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for Locale(0);
  __chkstk_darwin(v6);
  v8 = (char *)v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for String.LocalizationValue(0);
  __chkstk_darwin(v9);
  v11 = (char *)v22 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for LocalizedStringResource(0);
  v13 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v15 = (char *)v22 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000E944(0, &qword_1000EC940, (uint64_t (*)(uint64_t))&type metadata accessor for IntentDescription);
  v17 = v16;
  sub_10001C884(v16, qword_1000F0EA0);
  v18 = sub_10001C86C(v17, (uint64_t)qword_1000F0EA0);
  v19 = String.LocalizationValue.init(stringLiteral:)(0xD00000000000003FLL, 0x80000001000B9170);
  static Locale.current.getter(v19);
  (*(void (**)(char *, _QWORD, _QWORD))(v3 + 104))(v5, enum case for LocalizedStringResource.BundleDescription.main(_:), v22[0]);
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v11, 0x6E65746E49707041, 0xEA00000000007374, v8, v5, 0, 0, 256);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v13 + 56))(v2, 1, 1, v12);
  IntentDescription.init(_:categoryName:searchKeywords:)(v15, v2, _swiftEmptyArrayStorage);
  v20 = type metadata accessor for IntentDescription(0);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 56))(v18, 0, 1, v20);
}

uint64_t sub_1000327F0(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;

  v2[2] = a1;
  v2[3] = v1;
  sub_10000E944(0, (unint64_t *)&unk_1000ECA90, (uint64_t (*)(uint64_t))&type metadata accessor for URL);
  v4 = (*(_QWORD *)(*(_QWORD *)(v3 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[4] = swift_task_alloc(v4);
  v2[5] = swift_task_alloc(v4);
  v5 = type metadata accessor for URL(0);
  v2[6] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v2[7] = v6;
  v7 = (*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[8] = swift_task_alloc(v7);
  v2[9] = swift_task_alloc(v7);
  return swift_task_switch(sub_1000328A0, 0, 0);
}

uint64_t sub_1000328A0()
{
  _QWORD *v0;
  id v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  void (*v8)(uint64_t, _QWORD, uint64_t, uint64_t);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t (*v18)(void);
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v26;

  v1 = (id)HKSPSleepURLWithOptions(HKSPSleepLaunchURLRouteManageSchedule, 0, HKSPProvenanceSourceShortcuts);
  if (!v1)
  {
    (*(void (**)(_QWORD, uint64_t, uint64_t, _QWORD))(v0[7] + 56))(v0[5], 1, 1, v0[6]);
    goto LABEL_5;
  }
  v2 = v1;
  v4 = v0[7];
  v3 = v0[8];
  v6 = v0[5];
  v5 = v0[6];
  static URL._unconditionallyBridgeFromObjectiveC(_:)();

  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 32);
  v7(v6, v3, v5);
  v8 = *(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v4 + 56);
  v8(v6, 0, 1, v5);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v4 + 48))(v6, 1, v5) == 1)
  {
LABEL_5:
    v19 = v0[8];
    v20 = v0[9];
    v22 = v0[4];
    v21 = v0[5];
    sub_10001C7DC(v21);
    v23 = sub_100032D1C();
    v24 = swift_allocError(&type metadata for OpenSleepIntentError, v23, 0, 0);
    swift_willThrow(v24);
    swift_task_dealloc(v20);
    swift_task_dealloc(v19);
    swift_task_dealloc(v21);
    swift_task_dealloc(v22);
    v18 = (uint64_t (*)(void))v0[1];
    return v18();
  }
  v9 = v0[9];
  v11 = v0[6];
  v10 = v0[7];
  v12 = v0[4];
  v13 = v0[5];
  v14 = (_QWORD *)v0[3];
  v26 = v0[8];
  v7(v9, v13, v11);
  v15 = v14[3];
  v16 = v14[4];
  sub_100012E04(v14, v15);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 16))(v12, v9, v11);
  v8(v12, 0, 1, v11);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v16 + 8))(v12, v15, v16);
  v17 = sub_10001C7DC(v12);
  static IntentResult.result<>()(v17);
  (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v9, v11);
  swift_task_dealloc(v9);
  swift_task_dealloc(v26);
  swift_task_dealloc(v13);
  swift_task_dealloc(v12);
  v18 = (uint64_t (*)(void))v0[1];
  return v18();
}

uint64_t sub_100032AA8@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  if (qword_1000EC008 != -1)
    swift_once(&qword_1000EC008, sub_10003240C);
  v2 = type metadata accessor for LocalizedStringResource(0);
  v3 = sub_10001C86C(v2, (uint64_t)qword_1000F0E88);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 16))(a1, v3, v2);
}

uint64_t sub_100032B18@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  v2 = enum case for IntentAuthenticationPolicy.requiresAuthentication(_:);
  v3 = type metadata accessor for IntentAuthenticationPolicy(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 104))(a1, v2, v3);
}

uint64_t sub_100032B5C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  if (qword_1000EC010 != -1)
    swift_once(&qword_1000EC010, sub_10003258C);
  sub_10000E944(0, &qword_1000EC940, (uint64_t (*)(uint64_t))&type metadata accessor for IntentDescription);
  v3 = sub_10001C86C(v2, (uint64_t)qword_1000F0EA0);
  return sub_10001C8C4(v3, a1, &qword_1000EC940, (uint64_t (*)(uint64_t))&type metadata accessor for IntentDescription);
}

uint64_t sub_100032BE4(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;

  v3 = (_QWORD *)swift_task_alloc(dword_1000ED7DC);
  *(_QWORD *)(v1 + 16) = v3;
  *v3 = v1;
  v3[1] = sub_10001C2DC;
  return sub_1000327F0(a1);
}

id sub_100032C34@<X0>(uint64_t a1@<X8>)
{
  id result;
  id v3;
  __int128 v4;
  unint64_t v5;
  _UNKNOWN **v6;

  result = objc_msgSend((id)objc_opt_self(LSApplicationWorkspace), "defaultWorkspace");
  if (result)
  {
    v3 = result;
    v5 = sub_100032CE0();
    v6 = &off_1000DD858;
    *(_QWORD *)&v4 = v3;
    return (id)sub_10001AF7C(&v4, a1);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_100032CA8(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10001AF94();
  return static AppIntent.persistentIdentifier.getter(a1, v2);
}

ValueMetadata *type metadata accessor for OpenSleepScheduleIntentV2()
{
  return &type metadata for OpenSleepScheduleIntentV2;
}

unint64_t sub_100032CE0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000EC760;
  if (!qword_1000EC760)
  {
    v1 = objc_opt_self(LSApplicationWorkspace);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_1000EC760);
  }
  return result;
}

unint64_t sub_100032D1C()
{
  unint64_t result;

  result = qword_1000ED7E0;
  if (!qword_1000ED7E0)
  {
    result = swift_getWitnessTable(&unk_1000B2240, &type metadata for OpenSleepIntentError);
    atomic_store(result, (unint64_t *)&qword_1000ED7E0);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for OpenSleepIntentError(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_100032DA0 + 4 * byte_1000B2080[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_100032DC0 + 4 * byte_1000B2085[v4]))();
}

_BYTE *sub_100032DA0(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_100032DC0(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_100032DC8(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_100032DD0(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_100032DD8(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_100032DE0(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for OpenSleepIntentError()
{
  return &type metadata for OpenSleepIntentError;
}

unint64_t sub_100032E00()
{
  unint64_t result;

  result = qword_1000ED7E8;
  if (!qword_1000ED7E8)
  {
    result = swift_getWitnessTable(&unk_1000B2218, &type metadata for OpenSleepIntentError);
    atomic_store(result, (unint64_t *)&qword_1000ED7E8);
  }
  return result;
}

uint64_t type metadata accessor for AuxiliaryProfilesDataSource(uint64_t a1)
{
  uint64_t result;

  result = qword_1000ED7F8;
  if (!qword_1000ED7F8)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for AuxiliaryProfilesDataSource);
  return result;
}

uint64_t sub_100032E80(uint64_t a1)
{
  char *v2;

  v2 = (char *)&value witness table for Builtin.UnknownObject + 64;
  return swift_initClassMetadata2(a1, 0, 1, &v2, a1 + qword_1000F0EB8);
}

uint64_t sub_100032ECC(void *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  void *v20;
  Swift::String v21;
  Swift::String v22;
  uint64_t v23;
  _QWORD v25[2];

  v2 = v1;
  v4 = *v1;
  v5 = type metadata accessor for UUID(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)v25 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)((char *)v2 + qword_1000ED7F0) = a1;
  sub_1000076D8(0, &qword_1000ECA68, (uint64_t (*)(uint64_t))&type metadata accessor for ArrayDataSourceSection, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for _ContiguousArrayStorage);
  v10 = v9;
  v11 = type metadata accessor for ArrayDataSourceSection(0);
  v12 = swift_allocObject(v10, ((*(unsigned __int8 *)(*(_QWORD *)(v11 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v11 - 8) + 80))+ *(_QWORD *)(*(_QWORD *)(v11 - 8) + 72), *(unsigned __int8 *)(*(_QWORD *)(v11 - 8) + 80) | 7);
  *(_OWORD *)(v12 + 16) = xmmword_1000B11F0;
  v13 = a1;
  v14 = _typeName(_:qualified:)(v4, 0);
  ArrayDataSourceSection.init(title:arrangedItems:identifier:)(0x72656B6E6954, 0xE600000000000000, _swiftEmptyArrayStorage, v14, v15);
  v25[0] = 0;
  v25[1] = 0xE000000000000000;
  _StringGuts.grow(_:)(16);
  swift_bridgeObjectRelease(v25[1]);
  strcpy((char *)v25, "MutableArray<");
  HIWORD(v25[1]) = -4864;
  v17 = UUID.init()(v16);
  v18 = UUID.uuidString.getter(v17);
  v20 = v19;
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  v21._countAndFlagsBits = v18;
  v21._object = v20;
  String.append(_:)(v21);
  swift_bridgeObjectRelease(v20);
  v22._countAndFlagsBits = 62;
  v22._object = (void *)0xE100000000000000;
  String.append(_:)(v22);
  v23 = MutableArrayDataSource.init(arrangedSections:identifier:)(v12, v25[0], v25[1]);
  swift_retain(v23);
  sub_100090A24();
  swift_release(v23);

  return v23;
}

void sub_1000330B4(uint64_t a1, void *a2)
{
  id v3;

  v3 = objc_msgSend(objc_allocWithZone((Class)HKNavigationController), "initWithRootViewController:", a1);
  objc_msgSend(a2, "presentViewController:animated:completion:", v3, 1, 0);

}

void sub_10003311C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  void *Strong;
  void *v4;
  _BYTE v5[24];

  v2 = a2 + 16;
  swift_beginAccess(a2 + 16, v5, 0, 0);
  Strong = (void *)swift_unknownObjectWeakLoadStrong(v2);
  if (Strong)
  {
    v4 = Strong;
    objc_msgSend(Strong, "dismissViewControllerAnimated:completion:", 1, 0);

  }
}

uint64_t sub_10003317C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;

  v2 = type metadata accessor for UIListContentConfiguration(0);
  v3 = __chkstk_darwin(v2);
  v5 = (char *)&v9 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  static UIListContentConfiguration.groupedHeader()(v3);
  v6 = type metadata accessor for HeaderItem(0);
  swift_allocObject(v6, *(unsigned int *)(v6 + 48), *(unsigned __int16 *)(v6 + 52));
  v7 = HeaderItem.init(title:buttonText:buttonWasTapped:configuration:automationIdentifier:)(0x72656B6E6954, 0xE600000000000000, 0, 0, 0, 0, v5, 0, 0);
  a1[3] = v6;
  result = sub_100013198((unint64_t *)&unk_1000ED940, (uint64_t (*)(uint64_t))&type metadata accessor for HeaderItem, (uint64_t)&protocol conformance descriptor for HeaderItem);
  a1[4] = result;
  *a1 = v7;
  return result;
}

void sub_100033264()
{
  _swift_stdlib_reportUnimplementedInitializer("Health.AuxiliaryProfilesDataSource", 34, "init(arrangedSections:identifier:)", 34, 0);
  __break(1u);
}

void sub_100033290()
{
  uint64_t v0;

}

uint64_t sub_1000332A0()
{
  uint64_t v0;

  v0 = MutableArrayDataSource.deinit();

  return swift_deallocClassInstance(v0, 24, 7);
}

uint64_t sub_1000332DC()
{
  return type metadata accessor for AuxiliaryProfilesDataSource(0);
}

uint64_t sub_1000332E4@<X0>(uint64_t *a1@<X8>)
{
  return sub_10003317C(a1);
}

uint64_t sub_1000332F8(uint64_t a1, uint64_t a2)
{
  uint64_t WitnessTable;

  WitnessTable = swift_getWitnessTable(&unk_1000B2368, a2);
  return sub_100020F3C(a1, a2, WitnessTable);
}

id sub_100033444()
{
  return sub_1000336F0((uint64_t (*)(_QWORD))type metadata accessor for InternalProfileCharacteristicsViewController);
}

uint64_t type metadata accessor for InternalProfileCharacteristicsViewController()
{
  return objc_opt_self(_TtC6HealthP33_20B3255B537141CA25842A215889B6DB44InternalProfileCharacteristicsViewController);
}

void sub_100033470(void *a1)
{
  void *v1;
  id v3;
  void *v4;
  id v5;
  id v6;
  id v7;

  v3 = objc_msgSend(v1, "healthStore");
  if (!v3)
  {
    __break(1u);
    goto LABEL_7;
  }
  v4 = v3;
  v5 = objc_msgSend(objc_allocWithZone((Class)HKMedicalIDStore), "initWithHealthStore:", v3);

  objc_msgSend(v5, "deleteMedicalIDDataWithCompletion:", 0);
  if (!a1)
  {
LABEL_7:
    __break(1u);
    return;
  }
  v6 = objc_msgSend(a1, "navigationController");
  if (v6)
  {
    v7 = v6;
    objc_msgSend(v6, "dismissViewControllerAnimated:completion:", 1, 0);

  }
}

id sub_10003369C(void *a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(_QWORD))
{
  objc_super v6;

  v6.receiver = a1;
  v6.super_class = (Class)a4(0);
  return objc_msgSendSuper2(&v6, "initWithCoder:", a3);
}

id sub_1000336E4()
{
  return sub_1000336F0((uint64_t (*)(_QWORD))type metadata accessor for InternalMedicalIDViewController);
}

id sub_1000336F0(uint64_t (*a1)(_QWORD))
{
  void *v1;
  objc_super v3;

  v3.receiver = v1;
  v3.super_class = (Class)a1(0);
  return objc_msgSendSuper2(&v3, "dealloc");
}

uint64_t type metadata accessor for InternalMedicalIDViewController()
{
  return objc_opt_self(_TtC6HealthP33_20B3255B537141CA25842A215889B6DB31InternalMedicalIDViewController);
}

uint64_t sub_100033748(uint64_t a1)
{
  uint64_t result;

  *(_QWORD *)(a1 + 8) = sub_100013198(&qword_1000ED8F8, type metadata accessor for AuxiliaryProfilesDataSource, (uint64_t)&unk_1000B2310);
  result = sub_100013198((unint64_t *)&unk_1000ED900, type metadata accessor for AuxiliaryProfilesDataSource, (uint64_t)&unk_1000B2340);
  *(_QWORD *)(a1 + 24) = result;
  return result;
}

uint64_t sub_1000337A4(uint64_t a1, void *a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  id v11;
  id v12;
  Class isa;
  void *v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  id v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v26;
  uint64_t v27;
  _QWORD aBlock[5];
  uint64_t v29;

  v4 = type metadata accessor for DispatchWorkItemFlags(0);
  v27 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v6 = (char *)&v26 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = type metadata accessor for DispatchQoS(0);
  v7 = *(_QWORD *)(v26 - 8);
  __chkstk_darwin(v26);
  v9 = (char *)&v26 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for InternalProfileCharacteristicsViewController();
  v11 = objc_msgSend(objc_allocWithZone((Class)swift_getObjCClassFromMetadata(v10)), "initWithHealthStore:inEditMode:", a1, 1);
  objc_msgSend(v11, "setAccessType:", 2);
  v12 = objc_msgSend(v11, "navigationItem");
  sub_100006D10(0, &qword_1000ED938, UIBarButtonItem_ptr);
  isa = Array._bridgeToObjectiveC()().super.isa;
  objc_msgSend(v12, "setLeftBarButtonItems:", isa);

  sub_100006D10(0, (unint64_t *)&qword_1000ED910, OS_dispatch_queue_ptr);
  v14 = (void *)static OS_dispatch_queue.main.getter();
  v15 = swift_allocObject(&unk_1000DDB18, 32, 7);
  *(_QWORD *)(v15 + 16) = v11;
  *(_QWORD *)(v15 + 24) = a2;
  aBlock[4] = sub_1000341E8;
  v29 = v15;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100006988;
  aBlock[3] = &unk_1000DDB30;
  v16 = _Block_copy(aBlock);
  v17 = v29;
  v18 = v11;
  v19 = a2;
  v20 = swift_release(v17);
  static DispatchQoS.unspecified.getter(v20);
  aBlock[0] = _swiftEmptyArrayStorage;
  v21 = sub_100013198((unint64_t *)&qword_1000EDBE0, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  sub_1000076D8(0, (unint64_t *)&qword_1000ED920, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Array);
  v23 = v22;
  v24 = sub_100013C8C();
  dispatch thunk of SetAlgebra.init<A>(_:)(aBlock, v23, v24, v4, v21);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v9, v6, v16);
  _Block_release(v16);

  (*(void (**)(char *, uint64_t))(v27 + 8))(v6, v4);
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v26);
}

void sub_100033A58(uint64_t a1, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  NSObject *v18;
  NSObject *v19;
  uint64_t v20;
  uint64_t v21;
  NSObject *v22;
  os_log_type_t v23;
  uint8_t *v24;
  void (*v25)(char *, uint64_t);
  uint64_t v26;
  NSObject *v27;
  os_log_type_t v28;
  uint8_t *v29;
  id v30;
  void *v31;
  id v32;
  unsigned __int8 v33;
  id v34;
  id v35;
  uint64_t v36;
  void *v37;
  id v38;
  Class isa;
  id v40;
  objc_class *v41;
  void *v42;
  id v43;
  void *v44;
  void *v45;
  void *v46;
  uint64_t v47;
  void *v48;
  void *v49;
  uint64_t v50;
  id v51;
  id v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  NSObject *v62;
  os_log_type_t v63;
  uint8_t *v64;
  NSObject *v65;
  uint64_t v66;
  void *v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  _QWORD aBlock[5];
  uint64_t v75;
  UIAction_optional v76;
  UIMenu_optional v77;

  v67 = a2;
  v3 = type metadata accessor for DispatchWorkItemFlags(0);
  v71 = *(_QWORD *)(v3 - 8);
  v72 = v3;
  __chkstk_darwin(v3);
  v70 = (char *)&v66 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for DispatchQoS(0);
  v68 = *(_QWORD *)(v5 - 8);
  v69 = v5;
  __chkstk_darwin(v5);
  v7 = (char *)&v66 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for Logger(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = __chkstk_darwin(v8);
  v12 = (char *)&v66 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __chkstk_darwin(v10);
  v15 = (char *)&v66 - v14;
  __chkstk_darwin(v13);
  v17 = (char *)&v66 - v16;
  type metadata accessor for MedicalIDCache(0);
  v73 = static MedicalIDCache.globalCache(for:)(a1);
  v18 = dispatch thunk of MedicalIDCache.medicalIDDataResult.getter();
  v19 = v18;
  if ((unint64_t)v18 >= 3)
  {
    v26 = static Logger.view.getter(v18);
    v27 = Logger.logObject.getter(v26);
    v28 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v27, v28))
    {
      v29 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v29 = 0;
      _os_log_impl((void *)&_mh_execute_header, v27, v28, "Found cached Medical ID for MedicalIDViewController", v29, 2u);
      swift_slowDealloc(v29, -1, -1);
    }

    v25 = *(void (**)(char *, uint64_t))(v9 + 8);
    v25(v17, v8);
  }
  else
  {
    sub_1000341AC(v18);
    v21 = static Logger.view.getter(v20);
    v22 = Logger.logObject.getter(v21);
    v23 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v22, v23))
    {
      v24 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v24 = 0;
      _os_log_impl((void *)&_mh_execute_header, v22, v23, "No Medical ID found for MedicalIDViewController", v24, 2u);
      swift_slowDealloc(v24, -1, -1);
    }

    v25 = *(void (**)(char *, uint64_t))(v9 + 8);
    v25(v15, v8);
    v19 = 0;
  }
  v30 = objc_msgSend((id)objc_opt_self(_HKBehavior), "sharedBehavior");
  if (!v30)
  {

    __break(1u);
    goto LABEL_21;
  }
  v31 = v30;
  v32 = objc_msgSend(v30, "features");

  if (!v32)
  {
LABEL_21:

    __break(1u);
    return;
  }
  v33 = objc_msgSend(v32, "medicalIDV2");

  if ((v33 & 1) != 0)
  {
    v34 = objc_msgSend((id)objc_opt_self(MIUIDisplayConfiguration), "standardConfiguration");
    objc_msgSend(v34, "setIsDeletionAvailable:", 1);
    objc_msgSend(v34, "setSuggestHealthData:", 1);
    v35 = objc_msgSend(objc_allocWithZone((Class)MIUIMedicalIDViewController), "initWithHealthStore:medicalIDData:displayConfiguration:", a1, v19, v34);
    sub_100006D10(0, &qword_1000ED930, UIAction_ptr);
    v36 = swift_allocObject(&unk_1000DDAF0, 24, 7);
    swift_unknownObjectWeakInit(v36 + 16, v35);
    v37 = (void *)UIAction.init(title:subtitle:image:selectedImage:identifier:discoverabilityTitle:attributes:state:handler:)(0, 0xE000000000000000, 0, 0, 0, 0, 0, 0, 0, 0, 0, sub_100034214, v36);
    sub_100006D10(0, &qword_1000ED938, UIBarButtonItem_ptr);
    v38 = v37;
    v76.value.super.super.isa = (Class)v37;
    v76.is_nil = 0;
    isa = UIBarButtonItem.init(systemItem:primaryAction:menu:)(UIBarButtonSystemItemDone, v76, v77).super.super.isa;
    v40 = objc_msgSend(v35, "navigationItem");
    v41 = isa;
    objc_msgSend(v40, "setRightBarButtonItem:", v41);

    v42 = (void *)v73;
LABEL_14:
    sub_100006D10(0, (unint64_t *)&qword_1000ED910, OS_dispatch_queue_ptr);
    v46 = (void *)static OS_dispatch_queue.main.getter();
    v47 = swift_allocObject(&unk_1000DDAA0, 32, 7);
    v48 = v67;
    *(_QWORD *)(v47 + 16) = v35;
    *(_QWORD *)(v47 + 24) = v48;
    aBlock[4] = sub_1000341E8;
    v75 = v47;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_100006988;
    aBlock[3] = &unk_1000DDAB8;
    v49 = _Block_copy(aBlock);
    v50 = v75;
    v51 = v35;
    v52 = v48;
    v53 = swift_release(v50);
    static DispatchQoS.unspecified.getter(v53);
    aBlock[0] = _swiftEmptyArrayStorage;
    v54 = sub_100013198((unint64_t *)&qword_1000EDBE0, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    sub_1000076D8(0, (unint64_t *)&qword_1000ED920, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Array);
    v56 = v55;
    v57 = sub_100013C8C();
    v58 = v70;
    v59 = v56;
    v60 = v72;
    dispatch thunk of SetAlgebra.init<A>(_:)(aBlock, v59, v57, v72, v54);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0, v7, v58, v49);

    _Block_release(v49);
    (*(void (**)(char *, uint64_t))(v71 + 8))(v58, v60);
    (*(void (**)(char *, uint64_t))(v68 + 8))(v7, v69);
    return;
  }
  v43 = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for InternalMedicalIDViewController()), "initInEditMode:inBuddy:organDonationSignupAvailable:", 1, 0, 1);
  if (v43)
  {
    v44 = v43;
    objc_msgSend(v43, "setHealthStore:", a1);
    objc_msgSend(v44, "setMedicalID:", v19);
    v35 = v44;
    v42 = (void *)v73;
    v45 = (void *)MedicalIDCache.medicalIDStore.getter();
    objc_msgSend(v35, "setMedicalIDStore:", v45);

    objc_msgSend(v35, "setModalInPresentation:", 1);
    objc_msgSend(v35, "setDelegate:", v35);
    objc_msgSend(v35, "setIsSecondaryProfileMedicalID:", 1);
    objc_msgSend(v35, "setShowsDeleteButton:", 1);
    goto LABEL_14;
  }
  v61 = static Logger.view.getter(0);
  v62 = Logger.logObject.getter(v61);
  v63 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v62, v63))
  {
    v64 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v64 = 0;
    _os_log_impl((void *)&_mh_execute_header, v62, v63, "Could not create InternalMedicalIDViewController", v64, 2u);
    swift_slowDealloc(v64, -1, -1);
    v65 = v19;
    v19 = v73;
  }
  else
  {
    v65 = v62;
    v62 = v73;
  }

  v25(v12, v8);
}

void sub_1000341AC(id a1)
{
  if ((unint64_t)a1 >= 3)

}

uint64_t sub_1000341BC()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

void sub_1000341E8()
{
  uint64_t v0;

  sub_1000330B4(*(_QWORD *)(v0 + 16), *(void **)(v0 + 24));
}

uint64_t sub_1000341F0()
{
  uint64_t v0;

  swift_unknownObjectWeakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

void sub_100034214(uint64_t a1)
{
  uint64_t v1;

  sub_10003311C(a1, v1);
}

void sub_1000342DC(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  id v4;
  void *v5;
  char v6;
  uint64_t i;
  id v8;
  void *v9;
  char v10;
  unint64_t v11;
  uint64_t v12;

  if ((unint64_t)a2 >> 62)
    goto LABEL_20;
  v3 = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (v3)
  {
    while (1)
    {
      if ((a2 & 0xC000000000000001) != 0)
      {
        v4 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, a2);
      }
      else
      {
        if (!*(_QWORD *)((a2 & 0xFFFFFFFFFFFFF8) + 0x10))
        {
          __break(1u);
          return;
        }
        v4 = *(id *)(a2 + 32);
      }
      v5 = v4;
      sub_100006D10(0, &qword_1000EDA30, UITabBarItem_ptr);
      v6 = static NSObject.== infix(_:_:)(v5);

      if ((v6 & 1) == 0)
      {
        for (i = 0; ; ++i)
        {
          v11 = i + 1;
          if (__OFADD__(i, 1))
            break;
          if (v11 == v3)
            return;
          if ((a2 & 0xC000000000000001) != 0)
          {
            v8 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(i + 1, a2);
          }
          else
          {
            if ((v11 & 0x8000000000000000) != 0)
              goto LABEL_18;
            if (v11 >= *(_QWORD *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10))
              goto LABEL_19;
            v8 = *(id *)(a2 + 32 + 8 * v11);
          }
          v9 = v8;
          v10 = static NSObject.== infix(_:_:)(v8);

          if ((v10 & 1) != 0)
            return;
        }
        __break(1u);
LABEL_18:
        __break(1u);
LABEL_19:
        __break(1u);
LABEL_20:
        v12 = a2 < 0 ? a2 : a2 & 0xFFFFFFFFFFFFFF8;
        swift_bridgeObjectRetain(a2);
        v3 = _CocoaArrayWrapper.endIndex.getter(v12);
        swift_bridgeObjectRelease(a2);
        if (v3)
          continue;
      }
      return;
    }
  }
}

id sub_1000344D8(void *a1)
{
  uint64_t v2;
  void *v3;
  id v4;
  id v5;
  id v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  uint64_t ObjectType;
  uint64_t v13;
  uint64_t v14;
  id v15;
  uint64_t v16;
  uint64_t (*v17)(uint64_t, uint64_t);
  uint64_t v19;

  if (a1)
  {
    v2 = objc_opt_self(UINavigationController);
    v3 = (void *)swift_dynamicCastObjCClass(a1, v2);
    v4 = a1;
    v5 = v4;
    if (v3)
    {
      v6 = v4;
      v7 = objc_msgSend(v3, "viewControllers");
      v8 = sub_100006D10(0, (unint64_t *)&qword_1000F0B50, UIViewController_ptr);
      v9 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v7, v8);

      if ((unint64_t)v9 >> 62)
      {
        if (v9 < 0)
          v19 = v9;
        else
          v19 = v9 & 0xFFFFFFFFFFFFFF8;
        swift_bridgeObjectRetain(v9);
        v10 = _CocoaArrayWrapper.endIndex.getter(v19);
        swift_bridgeObjectRelease(v9);
      }
      else
      {
        v10 = *(_QWORD *)((v9 & 0xFFFFFFFFFFFFF8) + 0x10);
      }
      swift_bridgeObjectRelease(v9);
      if (v10 == 1)
      {
        v5 = (id)UINavigationController.rootViewController()();
        v11 = (id)sub_1000344D8();

LABEL_18:
        return v11;
      }

    }
    ObjectType = swift_getObjectType(v5);
    v13 = swift_conformsToProtocol2(ObjectType, &protocol descriptor for ScrollableViewController);
    if (v13)
      v14 = v13;
    else
      v14 = 0;
    if (v13)
      v15 = v5;
    else
      v15 = 0;
    if (v15)
    {
      v16 = swift_getObjectType(v15);
      v17 = *(uint64_t (**)(uint64_t, uint64_t))(v14 + 8);
      v5 = v5;
      v11 = (id)v17(v16, v14);

    }
    else
    {
      v11 = objc_msgSend(v5, "view");
    }
    goto LABEL_18;
  }
  return 0;
}

void sub_100034674()
{
  void *v0;
  uint64_t v1;
  id v2;
  uint64_t v3;
  void *v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  id v10;
  void *v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  void *v15;
  void *v16;
  id v17;
  uint64_t v18;
  id v19;

  v1 = type metadata accessor for BrowseViewController(0);
  sub_10003487C(v1, 1);
  v2 = objc_msgSend(v0, "selectedViewController");
  if (v2)
  {
    v19 = v2;
    v3 = objc_opt_self(UINavigationController);
    v4 = (void *)swift_dynamicCastObjCClass(v19, v3);
    if (v4)
    {
      v5 = objc_msgSend(v4, "viewControllers");
      v6 = sub_100006D10(0, (unint64_t *)&qword_1000F0B50, UIViewController_ptr);
      v7 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v5, v6);

      if ((unint64_t)v7 >> 62)
        goto LABEL_18;
      v8 = *(_QWORD *)((v7 & 0xFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain(v7);
      for (; v8; v8 = _CocoaArrayWrapper.endIndex.getter(v18))
      {
        v9 = 4;
        while (1)
        {
          v10 = (v7 & 0xC000000000000001) != 0
              ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v9 - 4, v7)
              : *(id *)(v7 + 8 * v9);
          v11 = v10;
          v12 = v9 - 3;
          if (__OFADD__(v9 - 4, 1))
            break;
          if (swift_dynamicCastClass(v10, v1))
          {
            v14 = swift_bridgeObjectRelease_n(v7, 2);
            v15 = (void *)dispatch thunk of BrowseViewController.browseSearchViewController.getter(v14);
            v16 = (void *)dispatch thunk of BrowseSearchViewController.searchController.getter();

            v17 = objc_msgSend(v16, "searchBar");
            objc_msgSend(v17, "becomeFirstResponder");

            v13 = v17;
            goto LABEL_16;
          }

          ++v9;
          if (v12 == v8)
            goto LABEL_12;
        }
        __break(1u);
LABEL_18:
        if (v7 < 0)
          v18 = v7;
        else
          v18 = v7 & 0xFFFFFFFFFFFFFF8;
        swift_bridgeObjectRetain(v7);
      }
LABEL_12:
      swift_bridgeObjectRelease_n(v7, 2);
      v13 = v19;
    }
    else
    {
      v13 = v19;
    }
LABEL_16:

  }
}

void sub_10003487C(uint64_t a1, int a2)
{
  void *v2;
  void *v3;
  uint64_t ObjectType;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  _BYTE *v13;
  id v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  id v26;
  void *v27;
  uint64_t v28;
  NSObject *v29;
  os_log_type_t v30;
  uint8_t *v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _BYTE *v38;
  uint64_t v39;
  NSObject *v40;
  os_log_type_t v41;
  uint8_t *v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  _BYTE v47[12];
  int v48;
  id v49;
  uint64_t v50;
  _BYTE *v51;
  uint64_t v52;
  uint64_t v53;
  id v54;
  uint64_t v55;
  uint64_t v56;

  v3 = v2;
  ObjectType = swift_getObjectType(v2);
  v7 = type metadata accessor for Logger(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = __chkstk_darwin(v7);
  v11 = &v47[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v9);
  v13 = &v47[-v12];
  v14 = objc_msgSend(v3, "viewControllers");
  if (v14)
  {
    v15 = v14;
    v50 = ObjectType;
    v52 = v8;
    v16 = sub_100006D10(0, (unint64_t *)&qword_1000F0B50, UIViewController_ptr);
    v17 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v15, v16);

    v53 = v7;
    v51 = v13;
    v49 = v3;
    v48 = a2;
    if ((unint64_t)v17 >> 62)
    {
LABEL_22:
      if (v17 < 0)
        v36 = v17;
      else
        v36 = v17 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v17);
      v18 = _CocoaArrayWrapper.endIndex.getter(v36);
      swift_bridgeObjectRelease(v17);
      if (v18)
        goto LABEL_4;
    }
    else
    {
      v18 = *(_QWORD *)((v17 & 0xFFFFFFFFFFFFF8) + 0x10);
      if (v18)
      {
LABEL_4:
        v19 = 4;
        do
        {
          if ((v17 & 0xC000000000000001) != 0)
            v20 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v19 - 4, v17);
          else
            v20 = *(id *)(v17 + 8 * v19);
          v21 = v20;
          v22 = v19 - 3;
          if (__OFADD__(v19 - 4, 1))
          {
            __break(1u);
            goto LABEL_22;
          }
          v23 = objc_opt_self(UINavigationController);
          v24 = swift_dynamicCastObjCClass(v21, v23);
          if (v24)
          {
            v25 = (void *)v24;
            v26 = v21;
            v27 = (void *)UINavigationController.rootViewController()();
            if (v27)
            {
              v54 = v27;
              if (swift_getObjectType(v27) == a1)
              {
                swift_bridgeObjectRelease(v17);
                if ((v48 & 1) != 0)

                objc_msgSend(v49, "setSelectedViewController:", v25);
                return;
              }

            }
          }

          ++v19;
        }
        while (v22 != v18);
      }
    }
    v37 = swift_bridgeObjectRelease(v17);
    v38 = v51;
    v39 = static Logger.view.getter(v37);
    v40 = Logger.logObject.getter(v39);
    v41 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v40, v41))
    {
      v42 = (uint8_t *)swift_slowAlloc(12, -1);
      v43 = swift_slowAlloc(32, -1);
      v56 = v43;
      *(_DWORD *)v42 = 136446210;
      v44 = _typeName(_:qualified:)(v50, 0);
      v46 = v45;
      v55 = sub_100012B20(v44, v45, &v56);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v55, &v56, v42 + 4, v42 + 12);
      swift_bridgeObjectRelease(v46);
      _os_log_impl((void *)&_mh_execute_header, v40, v41, "%{public}s Could't select view controller", v42, 0xCu);
      swift_arrayDestroy(v43, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v43, -1, -1);
      swift_slowDealloc(v42, -1, -1);
    }

    (*(void (**)(_BYTE *, uint64_t))(v52 + 8))(v38, v53);
  }
  else
  {
    v28 = static Logger.view.getter(0);
    v29 = Logger.logObject.getter(v28);
    v30 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v29, v30))
    {
      v31 = (uint8_t *)swift_slowAlloc(12, -1);
      v32 = swift_slowAlloc(32, -1);
      v56 = v32;
      *(_DWORD *)v31 = 136446210;
      v33 = _typeName(_:qualified:)(ObjectType, 0);
      v35 = v34;
      v55 = sub_100012B20(v33, v34, &v56);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v55, &v56, v31 + 4, v31 + 12);
      swift_bridgeObjectRelease(v35);
      _os_log_impl((void *)&_mh_execute_header, v29, v30, "%{public}s Could't get tab view controller", v31, 0xCu);
      swift_arrayDestroy(v32, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v32, -1, -1);
      swift_slowDealloc(v31, -1, -1);
    }

    (*(void (**)(_BYTE *, uint64_t))(v8 + 8))(v11, v7);
  }
}

id sub_100034E74()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for MainTabBarController(0);
  return objc_msgSendSuper2(&v2, "dealloc");
}

id sub_100034F28()
{
  _QWORD *v0;

  return *(id *)(*v0 + OBJC_IVAR____TtC6Health20MainTabBarController_providedHealthStore);
}

uint64_t sub_100034F3C@<X0>(uint64_t a1@<X8>)
{
  _QWORD *v1;

  return sub_100028F08(*v1 + OBJC_IVAR____TtC6Health20MainTabBarController_providedHealthExperienceStore, a1);
}

id sub_100034F64()
{
  return sub_100008648();
}

uint64_t sub_100034F84@<X0>(uint64_t a1@<X8>)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;

  v3 = *v1 + OBJC_IVAR____TtC6Health20MainTabBarController_providedPresentation;
  v4 = type metadata accessor for Presentation(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

id sub_100034FCC()
{
  id *v0;

  return objc_msgSend(*v0, "selectedViewController");
}

id sub_100034FF0()
{
  id *v0;

  return objc_msgSend(*v0, "resolvedHealthStore");
}

uint64_t sub_100035014()
{
  return UIViewController.resolvedHealthExperienceStore.getter();
}

uint64_t sub_100035034@<X0>(uint64_t a1@<X8>)
{
  _QWORD *v1;

  return sub_100028F08(*v1 + OBJC_IVAR____TtC6Health20MainTabBarController_pinnedContentManager, a1);
}

void sub_10003505C(uint64_t a1)
{
  void *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  unint64_t v7;
  int v8;
  BOOL v9;
  BOOL v10;
  BOOL v11;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v3 = type metadata accessor for DeepLinkActivityType(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_100035D84();
  if ((UIViewController.containsViewController<A>(ofType:)(v7, v7) & 1) == 0)
    objc_msgSend(v1, "dismissViewControllerAnimated:completion:", 0, 0);
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v6, a1, v3);
  v8 = (*(uint64_t (**)(char *, uint64_t))(v4 + 88))(v6, v3);
  if (v8 == enum case for DeepLinkActivityType.allHealthData(_:)
    || v8 == enum case for DeepLinkActivityType.allTrends(_:)
    || (v8 != enum case for DeepLinkActivityType.healthProfile(_:)
      ? (v9 = v8 == enum case for DeepLinkActivityType.medicalID(_:))
      : (v9 = 1),
        !v9 ? (v10 = v8 == enum case for DeepLinkActivityType.notificationSettings(_:)) : (v10 = 1),
        !v10 ? (v11 = v8 == enum case for DeepLinkActivityType.profileAppSources(_:)) : (v11 = 1),
        v11))
  {
LABEL_25:
    v14 = type metadata accessor for SummaryFeedViewController(0);
    goto LABEL_26;
  }
  if (v8 != enum case for DeepLinkActivityType.sharingInviteFlow(_:)
    && v8 != enum case for DeepLinkActivityType.sharingOverview(_:)
    && v8 != enum case for DeepLinkActivityType.sharingProfile(_:))
  {
    if (v8 != enum case for DeepLinkActivityType.summary(_:))
    {
      v15 = type metadata accessor for BrowseViewController(0);
      sub_10003487C(v15, 1);
      (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
      return;
    }
    goto LABEL_25;
  }
  v14 = type metadata accessor for SharingOverviewViewController(0);
LABEL_26:
  sub_10003487C(v14, 1);
}

void sub_100035208(uint64_t a1, uint64_t a2)
{
  void *v2;
  uint64_t v5;
  id v6;
  uint64_t v7;
  void *v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  void *v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  id v19;

  v5 = type metadata accessor for BrowseViewController(0);
  sub_10003487C(v5, 1);
  v6 = objc_msgSend(v2, "selectedViewController");
  if (v6)
  {
    v19 = v6;
    v7 = objc_opt_self(UINavigationController);
    v8 = (void *)swift_dynamicCastObjCClass(v19, v7);
    if (v8)
    {
      v9 = objc_msgSend(v8, "viewControllers");
      v10 = sub_100006D10(0, (unint64_t *)&qword_1000F0B50, UIViewController_ptr);
      v11 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v9, v10);

      if ((unint64_t)v11 >> 62)
        goto LABEL_18;
      v12 = *(_QWORD *)((v11 & 0xFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain(v11);
      for (; v12; v12 = _CocoaArrayWrapper.endIndex.getter(v18))
      {
        v13 = 4;
        while (1)
        {
          v14 = (v11 & 0xC000000000000001) != 0
              ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v13 - 4, v11)
              : *(id *)(v11 + 8 * v13);
          v15 = v14;
          v16 = v13 - 3;
          if (__OFADD__(v13 - 4, 1))
            break;
          if (swift_dynamicCastClass(v14, v5))
          {
            swift_bridgeObjectRelease_n(v11, 2);
            dispatch thunk of BrowseViewController.loadSearchingState(query:)(a1, a2);

            v17 = v15;
            goto LABEL_16;
          }

          ++v13;
          if (v16 == v12)
            goto LABEL_12;
        }
        __break(1u);
LABEL_18:
        if (v11 < 0)
          v18 = v11;
        else
          v18 = v11 & 0xFFFFFFFFFFFFFF8;
        swift_bridgeObjectRetain(v11);
      }
LABEL_12:
      swift_bridgeObjectRelease_n(v11, 2);
      v17 = v19;
    }
    else
    {
      v17 = v19;
    }
LABEL_16:

  }
}

id sub_1000353E8(void *a1)
{
  void *v1;
  void *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  void *v20;
  void *v21;
  id v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  objc_super *v27;
  __objc2_ivar *v28;
  uint64_t v29;
  char *v30;
  id v31;
  NSObject *v32;
  os_log_type_t v33;
  uint8_t *v34;
  id v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  uint8_t *v40;
  id v41;
  os_log_t v42;
  uint8_t *v43;
  uint64_t v44;
  id v45;
  void *v46;
  id v47;
  void *v48;
  uint64_t v50;
  void (*v51)(char *, uint64_t);
  id v52;
  uint8_t *v53;
  uint8_t *v54;
  uint64_t v55;
  os_log_t v56;
  int v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  void *v61;
  void *v62;
  uint64_t v63;
  uint64_t v64;
  void *v65;
  objc_super v66;

  v2 = v1;
  v4 = type metadata accessor for Logger(0);
  v58 = *(_QWORD *)(v4 - 8);
  v59 = v4;
  __chkstk_darwin(v4);
  v60 = (char *)&v52 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100035F38(0);
  __chkstk_darwin(v6);
  v8 = (char *)&v52 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for DeepLinkActivityType(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = __chkstk_darwin(v9);
  v13 = (char *)&v52 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __chkstk_darwin(v11);
  v16 = (char *)&v52 - v15;
  v17 = __chkstk_darwin(v14);
  v19 = (char *)&v52 - v18;
  v20 = (void *)NSUserActivity.fetchProfileIdentifier()(v17);
  if (!v20)
  {
LABEL_4:
    v22 = objc_msgSend(a1, "activityType");
    v23 = static String._unconditionallyBridgeFromObjectiveC(_:)(v22);
    v25 = v24;

    DeepLinkActivityType.init(_:)(v23, v25);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
    {
      sub_100035F8C((uint64_t)v8);
      v26 = type metadata accessor for MainTabBarController(0);
      v66.receiver = v2;
      v27 = &v66;
      v28 = &stru_1000E8000;
      goto LABEL_27;
    }
    (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v16, v8, v9);
    (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v13, v16, v9);
    v29 = (*(uint64_t (**)(char *, uint64_t))(v10 + 88))(v13, v9);
    v28 = &stru_1000E8000;
    if ((_DWORD)v29 != enum case for DeepLinkActivityType.allHealthData(_:)
      && (_DWORD)v29 != enum case for DeepLinkActivityType.allTrends(_:)
      && (_DWORD)v29 != enum case for DeepLinkActivityType.browse(_:)
      && (_DWORD)v29 != enum case for DeepLinkActivityType.category(_:)
      && (_DWORD)v29 != enum case for DeepLinkActivityType.dataTypeAddData(_:)
      && (_DWORD)v29 != enum case for DeepLinkActivityType.dataTypeDetail(_:)
      && (_DWORD)v29 != enum case for DeepLinkActivityType.dataTypeHighlights(_:)
      && (_DWORD)v29 != enum case for DeepLinkActivityType.notificationSettings(_:))
    {
      if ((_DWORD)v29 == enum case for DeepLinkActivityType.plugin(_:))
      {
LABEL_26:
        (*(void (**)(char *, uint64_t))(v10 + 8))(v16, v9);
        v26 = type metadata accessor for MainTabBarController(0);
        v62 = v2;
        v27 = (objc_super *)&v62;
        goto LABEL_27;
      }
      if ((_DWORD)v29 != enum case for DeepLinkActivityType.sharingInviteFlow(_:)
        && (_DWORD)v29 != enum case for DeepLinkActivityType.sharingOverview(_:)
        && (_DWORD)v29 != enum case for DeepLinkActivityType.sharingProfile(_:)
        && (_DWORD)v29 != enum case for DeepLinkActivityType.summary(_:))
      {
        v30 = v60;
        static Logger.general.getter(v29);
        v31 = a1;
        v32 = Logger.logObject.getter(v31);
        v33 = static os_log_type_t.fault.getter();
        v57 = v33;
        if (os_log_type_enabled(v32, v33))
        {
          v56 = v32;
          v34 = (uint8_t *)swift_slowAlloc(12, -1);
          v55 = swift_slowAlloc(32, -1);
          v64 = v55;
          v54 = v34;
          *(_DWORD *)v34 = 136315138;
          v53 = v34 + 4;
          v35 = objc_msgSend(v31, "activityType");
          v36 = static String._unconditionallyBridgeFromObjectiveC(_:)(v35);
          v52 = v31;
          v37 = v36;
          v39 = v38;

          v63 = sub_100012B20(v37, v39, &v64);
          v40 = v34 + 12;
          v28 = &stru_1000E8000;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v63, &v64, v53, v40);
          v41 = v52;

          swift_bridgeObjectRelease(v39);
          v42 = v56;
          v43 = v54;
          _os_log_impl((void *)&_mh_execute_header, v56, (os_log_type_t)v57, "Unsupported activity type falling back to For You feed %s", v54, 0xCu);
          v44 = v55;
          swift_arrayDestroy(v55, 1, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v44, -1, -1);
          swift_slowDealloc(v43, -1, -1);

          (*(void (**)(char *, uint64_t))(v58 + 8))(v60, v59);
        }
        else
        {

          (*(void (**)(char *, uint64_t))(v58 + 8))(v30, v59);
        }
        v50 = type metadata accessor for SummaryFeedViewController(0);
        sub_10003487C(v50, 1);
        v51 = *(void (**)(char *, uint64_t))(v10 + 8);
        v51(v16, v9);
        v51(v13, v9);
        v26 = type metadata accessor for MainTabBarController(0);
        v65 = v2;
        v27 = (objc_super *)&v65;
        goto LABEL_27;
      }
    }
    sub_10003505C((uint64_t)v16);
    v47 = objc_msgSend(v2, "selectedViewController");
    if (v47)
    {
      v48 = v47;
      objc_msgSend(v47, "restoreUserActivityState:", a1);

    }
    goto LABEL_26;
  }
  v21 = v20;
  if (objc_msgSend(v20, "type") == (id)1)
  {

    goto LABEL_4;
  }
  (*(void (**)(char *, _QWORD, uint64_t))(v10 + 104))(v19, enum case for DeepLinkActivityType.sharingOverview(_:), v9);
  sub_10003505C((uint64_t)v19);
  (*(void (**)(char *, uint64_t))(v10 + 8))(v19, v9);
  v45 = objc_msgSend(v1, "selectedViewController");
  v28 = &stru_1000E8000;
  if (v45)
  {
    v46 = v45;
    objc_msgSend(v45, "restoreUserActivityState:", a1);

  }
  v26 = type metadata accessor for MainTabBarController(0);
  v61 = v2;
  v27 = (objc_super *)&v61;
LABEL_27:
  v27->super_class = (Class)v26;
  return objc_msgSendSuper2(v27, (SEL)v28[112].offs, a1);
}

void sub_100035A10(uint64_t a1, uint64_t a2)
{
  void *v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned __int8 *v8;
  int v9;
  int v10;
  uint64_t v11;
  id v12;
  int v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  void *v17;
  int v18;
  uint64_t v19;
  uint64_t v20;

  v5 = type metadata accessor for DeepLinkViewControllerPlacement(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (unsigned __int8 *)&v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(unsigned __int8 *, uint64_t, uint64_t))(v6 + 16))(v8, a2, v5);
  v9 = (*(uint64_t (**)(unsigned __int8 *, uint64_t))(v6 + 88))(v8, v5);
  if (v9 == enum case for DeepLinkViewControllerPlacement.regularSecondaryCompactBrowse(_:))
    goto LABEL_6;
  if (v9 == enum case for DeepLinkViewControllerPlacement.onSummary(_:))
  {
    (*(void (**)(unsigned __int8 *, uint64_t))(v6 + 96))(v8, v5);
    v10 = *v8;
    v11 = type metadata accessor for SummaryFeedViewController(0);
    sub_10003487C(v11, v10);
    v12 = objc_msgSend(v2, "selectedViewController");
    if (!v12)
      return;
    goto LABEL_7;
  }
  if (v9 == enum case for DeepLinkViewControllerPlacement.onBrowse(_:))
  {
LABEL_6:
    (*(void (**)(unsigned __int8 *, uint64_t))(v6 + 96))(v8, v5);
    v13 = *v8;
    v14 = type metadata accessor for BrowseViewController(0);
    sub_10003487C(v14, v13);
    v12 = objc_msgSend(v2, "selectedViewController");
    if (!v12)
      return;
    goto LABEL_7;
  }
  if (v9 != enum case for DeepLinkViewControllerPlacement.onSharing(_:))
  {
    (*(void (**)(unsigned __int8 *, uint64_t))(v6 + 8))(v8, v5);
    return;
  }
  (*(void (**)(unsigned __int8 *, uint64_t))(v6 + 96))(v8, v5);
  v18 = *v8;
  v19 = type metadata accessor for SharingOverviewViewController(0);
  sub_10003487C(v19, v18);
  v12 = objc_msgSend(v2, "selectedViewController");
  if (v12)
  {
LABEL_7:
    v15 = v12;
    v16 = objc_opt_self(UINavigationController);
    v17 = (void *)swift_dynamicCastObjCClass(v15, v16);
    if (v17)
      objc_msgSend(v17, "pushViewController:animated:", a1, 0);

  }
}

void sub_100035C04(uint64_t a1)
{
  sub_10003505C(a1);
}

void sub_100035C24(uint64_t a1, uint64_t a2)
{
  sub_100035208(a1, a2);
}

uint64_t sub_100035C44()
{
  return ViewControllerRouterProtocol<>.dismissPresentedViewController()();
}

void sub_100035C64(uint64_t a1, uint64_t a2)
{
  sub_100035A10(a1, a2);
}

id sub_100035C84(uint64_t a1, uint64_t a2)
{
  return sub_100035C9C(a1, a2, (SEL *)&selRef_collectionView);
}

id sub_100035C90(uint64_t a1, uint64_t a2)
{
  return sub_100035C9C(a1, a2, (SEL *)&selRef_tableView);
}

id sub_100035C9C(uint64_t a1, uint64_t a2, SEL *a3)
{
  void *v3;
  id result;

  result = objc_msgSend(v3, *a3);
  if (!result)
    __break(1u);
  return result;
}

void sub_100035CC8()
{
  void *v0;
  id v1;

  v0 = (void *)dispatch thunk of BrowseViewController.activeViewController.getter();
  v1 = objc_msgSend(v0, "collectionView");

  if (!v1)
    __break(1u);
}

uint64_t sub_100035D10()
{
  return type metadata accessor for MainTabBarController(0);
}

unint64_t sub_100035D18(uint64_t a1)
{
  unint64_t result;

  result = sub_100035D3C();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t sub_100035D3C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000ED9A0;
  if (!qword_1000ED9A0)
  {
    v1 = type metadata accessor for MainTabBarController(255);
    result = swift_getWitnessTable(&unk_1000B2494, v1);
    atomic_store(result, (unint64_t *)&qword_1000ED9A0);
  }
  return result;
}

unint64_t sub_100035D84()
{
  unint64_t result;
  ProtocolDescriptor *v1;

  result = qword_1000ED9B0;
  if (!qword_1000ED9B0)
  {
    v1 = &protocol descriptor for StartupNotDismissible;
    result = swift_getExistentialTypeMetadata(1, 0, 1, &v1);
    atomic_store(result, (unint64_t *)&qword_1000ED9B0);
  }
  return result;
}

id sub_100035DD8(void *a1, _QWORD *a2, _QWORD *a3)
{
  char *v3;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  id v10;
  id v11;
  uint64_t v12;
  id v13;
  Class isa;
  double v15;
  objc_super v17;

  *(_QWORD *)&v3[OBJC_IVAR____TtC6Health20MainTabBarController____lazy_storage___providedHealthToolbox] = 0;
  v7 = &v3[OBJC_IVAR____TtC6Health20MainTabBarController_providedPresentation];
  v8 = enum case for Presentation.summaryFeed(_:);
  v9 = type metadata accessor for Presentation(0);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 104))(v7, v8, v9);
  *(_QWORD *)&v3[OBJC_IVAR____TtC6Health20MainTabBarController_providedHealthStore] = a1;
  sub_100028F08((uint64_t)a2, (uint64_t)&v3[OBJC_IVAR____TtC6Health20MainTabBarController_providedHealthExperienceStore]);
  sub_100028F08((uint64_t)a3, (uint64_t)&v3[OBJC_IVAR____TtC6Health20MainTabBarController_pinnedContentManager]);
  v17.receiver = v3;
  v17.super_class = (Class)type metadata accessor for MainTabBarController(0);
  v10 = a1;
  v11 = objc_msgSendSuper2(&v17, "initWithNibName:bundle:", 0, 0);
  v12 = sub_10000EAAC();
  sub_100006D10(0, (unint64_t *)&qword_1000F0B50, UIViewController_ptr);
  v13 = v11;
  isa = Array._bridgeToObjectiveC()().super.isa;
  *(_QWORD *)&v15 = swift_bridgeObjectRelease(v12).n128_u64[0];
  objc_msgSend(v13, "setViewControllers:", isa, v15, v17.receiver, v17.super_class);

  _s6Health23OpenSleepScheduleIntentVwxx_0(a3);
  _s6Health23OpenSleepScheduleIntentVwxx_0(a2);
  return v13;
}

void sub_100035F38(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_1000ECF88)
  {
    v2 = type metadata accessor for DeepLinkActivityType(255);
    v3 = type metadata accessor for Optional(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_1000ECF88);
  }
}

uint64_t sub_100035F8C(uint64_t a1)
{
  uint64_t v2;

  sub_100035F38(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void sub_100035FC8(uint64_t a1)
{
  void *v1;
  void *v2;
  id v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  id v9;
  char v10;
  char v11;
  NSString v12;
  id v13;
  void *v14;
  void *v15;
  id v16;
  id v17;
  uint64_t v18;
  void *v19;
  id v20;

  v2 = v1;
  v4 = objc_msgSend(v2, "tabBar");
  v5 = objc_msgSend(v4, "items");

  if (v5)
  {
    v6 = sub_100006D10(0, &qword_1000EDA30, UITabBarItem_ptr);
    v7 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v5, v6);

    sub_1000342DC(a1, v7);
    v9 = v8;
    v11 = v10;
    swift_bridgeObjectRelease(v7);
    if ((v11 & 1) == 0 && !v9)
    {
      v12 = String._bridgeToObjectiveC()();
      v13 = objc_allocWithZone((Class)type metadata accessor for PostNotificationOperation(0));
      v14 = (void *)PostNotificationOperation.init(name:userInfo:)(v12, 0);
      sub_100006D10(0, (unint64_t *)&qword_1000EDA38, NSOperationQueue_ptr);
      v15 = (void *)static NSOperationQueue.userInitiated.getter();
      objc_msgSend(v15, "addOperation:", v14);

    }
    v16 = objc_msgSend(v2, "selectedIndex");
    if ((v11 & 1) == 0 && v16 == v9)
    {
      v17 = objc_msgSend(v2, "selectedViewController");
      v20 = sub_1000344D8(v17);

      if (v20)
      {
        v18 = objc_opt_self(UIScrollView);
        v19 = (void *)swift_dynamicCastObjCClass(v20, v18);
        if (v19)
          objc_msgSend(v19, "_scrollToTopIfPossible:", 1);

      }
    }
  }
}

uint64_t DownloadingDataDataSource.__allocating_init(showDownloadingDataItem:)(char a1)
{
  uint64_t v1;

  swift_allocObject(v1, *(unsigned int *)(v1 + 48), *(unsigned __int16 *)(v1 + 52));
  return DownloadingDataDataSource.init(showDownloadingDataItem:)(a1);
}

uint64_t DownloadingDataDataSource.init(showDownloadingDataItem:)(char a1)
{
  uint64_t v1;
  uint64_t v3;
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;

  v3 = qword_1000EC020;
  swift_retain(v1);
  if (v3 != -1)
    swift_once(&qword_1000EC020, sub_1000382C0);
  v4 = xmmword_1000EDA50;
  swift_bridgeObjectRetain(*((_QWORD *)&xmmword_1000EDA50 + 1));
  EmptyStateCollectionViewCellItem.init(title:showSpinner:)(v4, *((_QWORD *)&v4 + 1), 1);
  swift_release(v1);
  v5 = MutableArrayDataSourceWithLayout.init(arrangedSections:collapseEmptySections:layoutSectionProvider:)(_swiftEmptyArrayStorage, 1, sub_10003635C, 0);
  if ((a1 & 1) != 0)
  {
    sub_100007730(0, (unint64_t *)&qword_1000ECA70, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for _ContiguousArrayStorage);
    v7 = swift_allocObject(v6, 72, 7);
    *(_OWORD *)(v7 + 16) = xmmword_1000B11F0;
    v8 = v5 + qword_1000EDA60;
    v9 = type metadata accessor for EmptyStateCollectionViewCellItem(0);
    *(_QWORD *)(v7 + 56) = v9;
    *(_QWORD *)(v7 + 64) = sub_100013198(&qword_1000ED438, (uint64_t (*)(uint64_t))&type metadata accessor for EmptyStateCollectionViewCellItem, (uint64_t)&protocol conformance descriptor for EmptyStateCollectionViewCellItem);
    v10 = sub_100007E0C((_QWORD *)(v7 + 32));
    (*(void (**)(_QWORD *, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 16))(v10, v8, v9);
    swift_retain(v5);
    dispatch thunk of MutableArrayDataSource.replaceItemsForSection(at:newItems:reconfigureAndReloadItems:)(0, v7, 1);
    swift_release(v5);
    swift_bridgeObjectRelease(v7);
  }
  return v5;
}

uint64_t sub_10003635C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;

  v0 = type metadata accessor for ListLayoutConfiguration(0);
  v1 = *(_QWORD *)(v0 - 8);
  v2 = __chkstk_darwin(v0);
  v4 = (char *)&v9 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = static ListLayoutConfiguration.withoutHeader.getter(v2);
  v6 = CollectionViewLayoutContext.environment.getter(v5);
  v7 = ListLayoutConfiguration.layout(for:)();
  swift_unknownObjectRelease(v6);
  (*(void (**)(char *, uint64_t))(v1 + 8))(v4, v0);
  return v7;
}

Swift::Void __swiftcall DownloadingDataDataSource.showDownloadingItem()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;

  sub_100007730(0, (unint64_t *)&qword_1000ECA70, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for _ContiguousArrayStorage);
  v2 = swift_allocObject(v1, 72, 7);
  *(_OWORD *)(v2 + 16) = xmmword_1000B11F0;
  v3 = v0 + qword_1000EDA60;
  v4 = type metadata accessor for EmptyStateCollectionViewCellItem(0);
  *(_QWORD *)(v2 + 56) = v4;
  *(_QWORD *)(v2 + 64) = sub_100013198(&qword_1000ED438, (uint64_t (*)(uint64_t))&type metadata accessor for EmptyStateCollectionViewCellItem, (uint64_t)&protocol conformance descriptor for EmptyStateCollectionViewCellItem);
  v5 = sub_100007E0C((_QWORD *)(v2 + 32));
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(v5, v3, v4);
  dispatch thunk of MutableArrayDataSource.replaceItemsForSection(at:newItems:reconfigureAndReloadItems:)(0, v2, 1);
  swift_bridgeObjectRelease(v2);
}

Swift::Void __swiftcall DownloadingDataDataSource.hideDownloadingItem()()
{
  dispatch thunk of MutableArrayDataSource.replaceItemsForSection(at:newItems:reconfigureAndReloadItems:)(0, &_swiftEmptyArrayStorage, 1);
}

void DownloadingDataDataSource.init(arrangedSections:collapseEmptySections:layoutConstructor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_100036514(a1, a2, a3, a4, (uint64_t)"init(arrangedSections:collapseEmptySections:layoutConstructor:)", 63);
}

void DownloadingDataDataSource.init(arrangedSections:collapseEmptySections:layoutSectionProvider:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_100036514(a1, a2, a3, a4, (uint64_t)"init(arrangedSections:collapseEmptySections:layoutSectionProvider:)", 67);
}

void sub_100036514(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _swift_stdlib_reportUnimplementedInitializer("Health.DownloadingDataDataSource", 32, a5, a6, 0);
  __break(1u);
}

uint64_t sub_10003653C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0 + qword_1000EDA60;
  v2 = type metadata accessor for EmptyStateCollectionViewCellItem(0);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
}

uint64_t DownloadingDataDataSource.deinit()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = MutableArrayDataSourceWithLayout.deinit();
  v1 = v0 + qword_1000EDA60;
  v2 = type metadata accessor for EmptyStateCollectionViewCellItem(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  return v0;
}

uint64_t DownloadingDataDataSource.__deallocating_deinit()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = MutableArrayDataSourceWithLayout.deinit();
  v1 = v0 + qword_1000EDA60;
  v2 = type metadata accessor for EmptyStateCollectionViewCellItem(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t SummaryPinnedContentDataSource.pinnedContentWithCloudStateDataSource.getter()
{
  uint64_t v0;

  return swift_retain(*(_QWORD *)(v0
                                + direct field offset for SummaryPinnedContentDataSource.pinnedContentWithCloudStateDataSource));
}

uint64_t SummaryPinnedContentDataSource.cloudStateOrPinnedContentOrEmptyStateDataSource.getter()
{
  uint64_t v0;

  return swift_retain(*(_QWORD *)(v0
                                + direct field offset for SummaryPinnedContentDataSource.cloudStateOrPinnedContentOrEmptyStateDataSource));
}

uint64_t SummaryPinnedContentDataSource.pinnedFeedItemsPublisher.getter()
{
  uint64_t v0;
  _QWORD *v1;
  _BYTE v3[24];

  v1 = (_QWORD *)(v0 + direct field offset for SummaryPinnedContentDataSource.pinnedFeedItemsPublisher);
  swift_beginAccess(v0 + direct field offset for SummaryPinnedContentDataSource.pinnedFeedItemsPublisher, v3, 0, 0);
  return swift_retain(*v1);
}

uint64_t SummaryPinnedContentDataSource.pinnedFeedItemsPublisher.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v3;
  uint64_t v4;
  _BYTE v6[24];

  v3 = (uint64_t *)(v1 + direct field offset for SummaryPinnedContentDataSource.pinnedFeedItemsPublisher);
  swift_beginAccess(v3, v6, 1, 0);
  v4 = *v3;
  *v3 = a1;
  return swift_release(v4);
}

void *SummaryPinnedContentDataSource.pinnedFeedItemsPublisher.modify(uint64_t a1)
{
  uint64_t v1;

  swift_beginAccess(v1 + direct field offset for SummaryPinnedContentDataSource.pinnedFeedItemsPublisher, a1, 33, 0);
  return &j__swift_endAccess;
}

uint64_t SummaryPinnedContentDataSource.__allocating_init(healthExperienceStore:healthStore:pinnedContentManager:)(_QWORD *a1, void *a2, uint64_t a3)
{
  uint64_t v3;

  swift_allocObject(v3, *(unsigned int *)(v3 + 48), *(unsigned __int16 *)(v3 + 52));
  return SummaryPinnedContentDataSource.init(healthExperienceStore:healthStore:pinnedContentManager:)(a1, a2, a3);
}

uint64_t SummaryPinnedContentDataSource.init(healthExperienceStore:healthStore:pinnedContentManager:)(_QWORD *a1, void *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(_QWORD *, _QWORD);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  id v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t *v49;
  uint64_t v50;
  _QWORD *v51;
  id v53;
  _QWORD *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  _QWORD *v59;
  _QWORD v60[5];

  v4 = v3;
  v7 = direct field offset for SummaryPinnedContentDataSource.pinnedFeedItemsPublisher;
  v60[0] = _swiftEmptyArrayStorage;
  sub_1000154BC(0);
  swift_allocObject(v8, *(unsigned int *)(v8 + 48), *(unsigned __int16 *)(v8 + 52));
  swift_retain(v3);
  *(_QWORD *)(v3 + v7) = CurrentValueSubject.init(_:)(v60);
  *(_QWORD *)(v3 + qword_1000EDA80) = 0;
  v9 = sub_100038568((uint64_t)a1, a3);
  v10 = type metadata accessor for ListLayoutConfiguration(0);
  v11 = swift_allocBox(v10);
  v12 = static ListLayoutConfiguration.withHeader.getter(v11);
  ListLayoutConfiguration.interGroupSpacing.setter(v12, 0.0);
  v13 = (void (*)(_QWORD *, _QWORD))ListLayoutConfiguration.additionalContentInsets.modify(v60);
  *(_QWORD *)(v14 + 16) = 0;
  v13(v60, 0);
  v15 = type metadata accessor for MutableArrayDataSourceWithLayout(0);
  sub_100013A0C(0);
  v17 = v16;
  v18 = swift_allocObject(v16, 40, 7);
  *(_OWORD *)(v18 + 16) = xmmword_1000B11F0;
  *(_QWORD *)(v18 + 32) = _swiftEmptyArrayStorage;
  swift_retain(v11);
  v57 = v11;
  v19 = MutableArrayDataSourceWithLayout.__allocating_init(_:collapseEmptySections:layoutConstructor:)(v18, 0, sub_100038790, v11);
  v60[3] = type metadata accessor for HeaderItem(0);
  v60[4] = sub_100013198((unint64_t *)&unk_1000ED940, (uint64_t (*)(uint64_t))&type metadata accessor for HeaderItem, (uint64_t)&protocol conformance descriptor for HeaderItem);
  v60[0] = v9;
  v56 = v9;
  swift_retain(v9);
  v55 = SnapshotDataSource.withSupplementaryItem(_:)(v60, v15, &protocol witness table for MutableArrayDataSource);
  swift_release(v19);
  _s6Health23OpenSleepScheduleIntentVwxx_0(v60);
  v20 = type metadata accessor for DownloadingDataDataSource(0);
  v21 = swift_allocObject(v20, *(unsigned int *)(v20 + 48), *(unsigned __int16 *)(v20 + 52));
  v22 = qword_1000EC020;
  swift_retain(v21);
  if (v22 != -1)
    swift_once(&qword_1000EC020, sub_1000382C0);
  v23 = xmmword_1000EDA50;
  swift_bridgeObjectRetain(*((_QWORD *)&xmmword_1000EDA50 + 1));
  EmptyStateCollectionViewCellItem.init(title:showSpinner:)(v23, *((_QWORD *)&v23 + 1), 1);
  swift_release(v21);
  v24 = MutableArrayDataSourceWithLayout.init(arrangedSections:collapseEmptySections:layoutSectionProvider:)(_swiftEmptyArrayStorage, 1, sub_10003635C, 0);
  sub_100028F08(a3, (uint64_t)v60);
  v25 = a1[3];
  v26 = a1[4];
  sub_100012E04(a1, v25);
  v27 = dispatch thunk of HealthExperienceStore.viewContext.getter(v25, v26);
  v28 = objc_allocWithZone((Class)type metadata accessor for PinnedContentDataSource(0));
  v29 = (void *)PinnedContentDataSource.init(pinnedContentManager:context:)(v60, v27);
  sub_1000387A8(0);
  swift_allocObject(v30, *(unsigned int *)(v30 + 48), *(unsigned __int16 *)(v30 + 52));
  swift_retain(v24);
  v53 = v29;
  v31 = PrimarySecondaryDataSource.init(primaryDataSource:secondaryDataSource:)(v24, v53);
  *(_QWORD *)(v4 + direct field offset for SummaryPinnedContentDataSource.pinnedContentWithCloudStateDataSource) = v31;
  v32 = sub_100038848();
  sub_100038A24(0);
  swift_allocObject(v33, *(unsigned int *)(v33 + 48), *(unsigned __int16 *)(v33 + 52));
  v54 = (_QWORD *)a3;
  swift_retain(v31);
  swift_retain(v32);
  v34 = PrimarySecondaryDataSource.init(primaryDataSource:secondaryDataSource:)(v31, v32);
  v35 = direct field offset for SummaryPinnedContentDataSource.cloudStateOrPinnedContentOrEmptyStateDataSource;
  *(_QWORD *)(v4 + direct field offset for SummaryPinnedContentDataSource.cloudStateOrPinnedContentOrEmptyStateDataSource) = v34;
  v36 = swift_allocObject(v17, 40, 7);
  *(_OWORD *)(v36 + 16) = xmmword_1000B11F0;
  sub_100007730(0, (unint64_t *)&qword_1000ECA70, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for _ContiguousArrayStorage);
  v38 = swift_allocObject(v37, 72, 7);
  *(_OWORD *)(v38 + 16) = xmmword_1000B11F0;
  *(_QWORD *)(v38 + 56) = type metadata accessor for ContentConfigurationItem(0);
  *(_QWORD *)(v38 + 64) = sub_100013198(&qword_1000ECA80, (uint64_t (*)(uint64_t))&type metadata accessor for ContentConfigurationItem, (uint64_t)&protocol conformance descriptor for ContentConfigurationItem);
  v39 = sub_100007E0C((_QWORD *)(v38 + 32));
  sub_100037374((uint64_t)a1, a2, (uint64_t)v39);
  *(_QWORD *)(v36 + 32) = v38;
  v40 = MutableArrayDataSourceWithLayout.__allocating_init(_:collapseEmptySections:layoutConstructor:)(v36, 1, sub_1000379B0, 0);
  v41 = SnapshotDataSource.withCellRegistration(_:)(sub_100037A38, 0, v15, &protocol witness table for MutableArrayDataSource);
  swift_release(v40);
  sub_100023998(0);
  v43 = swift_allocObject(v42, 80, 7);
  *(_OWORD *)(v43 + 16) = xmmword_1000B25C0;
  v44 = sub_100038AC8(&qword_1000EDAA8, &qword_1000EDAB0, (uint64_t (*)(uint64_t, uint64_t, void *))&type metadata accessor for Supplementary, (uint64_t)&protocol conformance descriptor for Supplementary<A>);
  *(_QWORD *)(v43 + 32) = v55;
  *(_QWORD *)(v43 + 40) = v44;
  v45 = *(_QWORD *)(v4 + v35);
  v46 = sub_100013198(&qword_1000EDAB8, (uint64_t (*)(uint64_t))sub_100038A24, (uint64_t)&protocol conformance descriptor for PrimarySecondaryDataSource<A, B>);
  *(_QWORD *)(v43 + 48) = v45;
  *(_QWORD *)(v43 + 56) = v46;
  v47 = sub_100038AC8(&qword_1000EDAC0, (unint64_t *)&qword_1000EDAC8, (uint64_t (*)(uint64_t, uint64_t, void *))&type metadata accessor for CellRegistering, (uint64_t)&protocol conformance descriptor for CellRegistering<A>);
  *(_QWORD *)(v43 + 64) = v41;
  *(_QWORD *)(v43 + 72) = v47;
  swift_retain(v55);
  swift_retain(v45);
  swift_retain(v41);
  swift_release(v4);
  v48 = CompoundSectionedDataSource.init(_:)(v43);
  v49 = (uint64_t *)(v48 + direct field offset for SummaryPinnedContentDataSource.pinnedFeedItemsPublisher);
  swift_beginAccess(v48 + direct field offset for SummaryPinnedContentDataSource.pinnedFeedItemsPublisher, v60, 0, 0);
  v50 = *v49;
  swift_retain(v48);
  swift_retain(v50);
  v59 = sub_100037B8C();
  CurrentValueSubject.send(_:)(&v59);
  swift_release(v56);
  swift_release(v24);

  swift_release(v32);
  swift_release(v55);
  swift_release(v41);

  swift_release(v50);
  swift_release(v48);
  _s6Health23OpenSleepScheduleIntentVwxx_0(v54);
  v51 = v59;
  swift_release(v57);
  swift_bridgeObjectRelease(v51);
  _s6Health23OpenSleepScheduleIntentVwxx_0(a1);
  return v48;
}

uint64_t SummaryPinnedContentDataSource.snapshotDidChange(dataSourceID:snapshot:animated:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t (*v16)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  char v22;
  uint64_t result;
  uint64_t v24;
  uint64_t v25;
  NSObject *v26;
  os_log_type_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47[3];

  v5 = v4;
  v10 = *v5;
  v11 = type metadata accessor for Logger(0);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v14 = (char *)&v42 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for CompoundSectionedDataSource(0);
  v16 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))method lookup function for CompoundSectionedDataSource(v15, &method descriptor for CompoundSectionedDataSource.snapshotDidChange(dataSourceID:snapshot:animated:));
  v17 = v16(a1, a2, a3, a4);
  v18 = PrimarySecondaryDataSource.identifier.getter(v17);
  if (v18 == a1 && v19 == a2)
  {
    swift_bridgeObjectRelease(a2);
  }
  else
  {
    v21 = v19;
    v22 = _stringCompareWithSmolCheck(_:_:expecting:)(a1, a2, v18, v19, 0);
    result = swift_bridgeObjectRelease(v21);
    if ((v22 & 1) == 0)
      return result;
  }
  v24 = (uint64_t)sub_100037B8C();
  static Logger.pinnedContent.getter(v24);
  v25 = swift_bridgeObjectRetain_n(v24, 4);
  v26 = Logger.logObject.getter(v25);
  v27 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v26, v27))
  {
    v28 = swift_slowAlloc(32, -1);
    v43 = swift_slowAlloc(64, -1);
    v47[0] = v43;
    *(_DWORD *)v28 = 136315650;
    v29 = _typeName(_:qualified:)(v10, 0);
    v31 = v30;
    v46 = sub_100012B20(v29, v30, v47);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v46, v47, v28 + 4, v28 + 12);
    swift_bridgeObjectRelease(v31);
    *(_WORD *)(v28 + 12) = 2048;
    v44 = v12;
    v45 = v11;
    if ((unint64_t)v24 >> 62)
    {
      if (v24 < 0)
        v41 = v24;
      else
        v41 = v24 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v24);
      v32 = _CocoaArrayWrapper.endIndex.getter(v41);
      swift_bridgeObjectRelease(v24);
    }
    else
    {
      v32 = *(_QWORD *)((v24 & 0xFFFFFFFFFFFFF8) + 0x10);
    }
    swift_bridgeObjectRelease(v24);
    v46 = v32;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v46, v47, v28 + 14, v28 + 22);
    swift_bridgeObjectRelease(v24);
    *(_WORD *)(v28 + 22) = 2080;
    v33 = type metadata accessor for FeedItem(0);
    v34 = swift_bridgeObjectRetain(v24);
    v35 = Array.description.getter(v34, v33);
    v37 = v36;
    swift_bridgeObjectRelease(v24);
    v46 = sub_100012B20(v35, v37, v47);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v46, v47, v28 + 24, v28 + 32);
    swift_bridgeObjectRelease_n(v24, 2);
    swift_bridgeObjectRelease(v37);
    _os_log_impl((void *)&_mh_execute_header, v26, v27, "[%s]: Received updates to pinned content, sending update with %ld items: %s", (uint8_t *)v28, 0x20u);
    v38 = v43;
    swift_arrayDestroy(v43, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v38, -1, -1);
    swift_slowDealloc(v28, -1, -1);

    (*(void (**)(char *, uint64_t))(v44 + 8))(v14, v45);
  }
  else
  {

    swift_bridgeObjectRelease_n(v24, 4);
    (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
  }
  v39 = (uint64_t *)((char *)v5 + direct field offset for SummaryPinnedContentDataSource.pinnedFeedItemsPublisher);
  swift_beginAccess(v39, v47, 0, 0);
  v40 = *v39;
  v46 = v24;
  swift_retain(v40);
  CurrentValueSubject.send(_:)(&v46);
  swift_bridgeObjectRelease(v24);
  return swift_release(v40);
}

uint64_t sub_1000370B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;

  sub_1000227D0();
  v10 = v9;
  v11 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v13 = (char *)&v18 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = static String._unconditionallyBridgeFromObjectiveC(_:)(a3);
  v16 = v15;
  static NSDiffableDataSourceSnapshot._unconditionallyBridgeFromObjectiveC(_:)(a4, &type metadata for String, &type metadata for String, &protocol witness table for String, &protocol witness table for String);
  swift_retain(a1);
  SummaryPinnedContentDataSource.snapshotDidChange(dataSourceID:snapshot:animated:)(v14, v16, (uint64_t)v13, a5);
  swift_release(a1);
  swift_bridgeObjectRelease(v16);
  return (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v13, v10);
}

void sub_1000371A0(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  id v7;
  void *v8;
  id v9;
  id v10;
  void *v11;
  _BYTE v12[40];
  _BYTE v13[40];

  sub_100028F08(a2, (uint64_t)v13);
  sub_1000275F4(0, &qword_1000ED1B8, (uint64_t)&type metadata for SourceProfile);
  v6 = swift_allocObject(v5, 40, 7);
  *(_OWORD *)(v6 + 16) = xmmword_1000B11F0;
  *(_QWORD *)(v6 + 32) = static SourceProfile.primary.getter();
  sub_100028F08(a3, (uint64_t)v12);
  v7 = objc_allocWithZone((Class)type metadata accessor for EditFavoritesCollectionViewController(0));
  v8 = (void *)EditFavoritesCollectionViewController.init(pinnedContentManager:sourceProfiles:healthExperienceStore:)(v13, v6, v12);
  v9 = objc_msgSend(objc_allocWithZone((Class)HKNavigationController), "initWithRootViewController:", v8);
  v10 = objc_msgSend(a1, "viewController");
  if (v10)
  {
    v11 = v10;
    objc_msgSend(v10, "presentViewController:animated:completion:", v9, 1, 0);

  }
}

uint64_t sub_1000372B0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE v13[24];

  v5 = type metadata accessor for ListLayoutConfiguration(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = &v13[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v9 = swift_projectBox(a3);
  swift_beginAccess(v9, v13, 0, 0);
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v8, v9, v5);
  v10 = ListLayoutConfiguration.layout(for:)(a2);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  return v10;
}

uint64_t sub_100037374@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t ObjCClassFromMetadata;
  id v24;
  id v25;
  NSString v26;
  id v27;
  Swift::String v28;
  Swift::String v29;
  Swift::String v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  Swift::String v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  void *v45;
  uint64_t v46;
  char *v47;
  id v48;
  unint64_t v49;
  uint64_t v50;
  unint64_t v51;
  unint64_t v52;
  Swift::String v53;
  uint64_t v54;
  unint64_t v55;
  char *v56;
  char *v57;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  uint64_t v66;
  void *v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  __int128 v78[2];
  uint64_t v79;
  unint64_t v80;
  uint64_t v81;
  void *v82;
  Swift::String v83;

  v4 = v3;
  v67 = a2;
  v66 = a1;
  v74 = a3;
  v5 = type metadata accessor for SectionedDataSourceContainerViewType(0);
  v72 = *(_QWORD *)(v5 - 8);
  v73 = v5;
  __chkstk_darwin(v5);
  v71 = (char *)&v59 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for CellDeselectionBehavior(0);
  v69 = *(_QWORD *)(v7 - 8);
  v70 = v7;
  __chkstk_darwin(v7);
  v68 = (char *)&v59 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000076D8(0, &qword_1000ECA60, (uint64_t (*)(uint64_t))&type metadata accessor for UIBackgroundConfiguration, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
  __chkstk_darwin(v9);
  v65 = (char *)&v59 - v10;
  sub_1000076D8(0, &qword_1000ECCD8, (uint64_t (*)(uint64_t))&type metadata accessor for UICellAccessory.LayoutDimension, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
  __chkstk_darwin(v11);
  v62 = (char *)&v59 - v12;
  v64 = type metadata accessor for UICellAccessory.DisclosureIndicatorOptions(0);
  v63 = *(_QWORD *)(v64 - 8);
  __chkstk_darwin(v64);
  v14 = (char *)&v59 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for UICellAccessory.DisplayedState(0);
  v16 = *(_QWORD *)(v15 - 8);
  __chkstk_darwin(v15);
  v18 = (char *)&v59 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v75 = type metadata accessor for UIListContentConfiguration(0);
  v59 = *(_QWORD *)(v75 - 8);
  v19 = v59;
  __chkstk_darwin(v75);
  v21 = (char *)&v59 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = type metadata accessor for ContentConfigurationCollectionViewListCell(0);
  ObjCClassFromMetadata = swift_getObjCClassFromMetadata(v22);
  v24 = objc_msgSend((id)objc_opt_self(NSBundle), "bundleForClass:", ObjCClassFromMetadata);
  static UIListContentConfiguration.cell()();
  v25 = v24;
  v26 = String._bridgeToObjectiveC()();
  v27 = objc_msgSend((id)objc_opt_self(UIImage), "imageNamed:inBundle:", v26, v25);

  UIListContentConfiguration.image.setter(v27);
  v28._countAndFlagsBits = 0xD000000000000014;
  v83._countAndFlagsBits = 0xD00000000000001FLL;
  v83._object = (void *)0x80000001000B99A0;
  v28._object = (void *)0x80000001000B9960;
  v29._object = (void *)0x80000001000B9980;
  v29._countAndFlagsBits = 0xD000000000000014;
  v30 = NSLocalizedString(_:tableName:bundle:value:comment:)(v28, (Swift::String_optional)0, (NSBundle)v25, v29, v83);
  UIListContentConfiguration.text.setter(v30._countAndFlagsBits, v30._object);
  v79 = 0;
  v80 = 0xE000000000000000;
  _StringGuts.grow(_:)(20);
  v31 = v80;
  v32 = _typeName(_:qualified:)(v4, 0);
  v34 = v33;
  swift_bridgeObjectRelease(v31);
  v79 = v32;
  v80 = v34;
  v35._object = (void *)0x80000001000B99C0;
  v35._countAndFlagsBits = 0xD000000000000012;
  String.append(_:)(v35);
  v61 = v79;
  v60 = v80;
  v36 = v75;
  v81 = v75;
  v82 = &protocol witness table for UIListContentConfiguration;
  v37 = sub_100007E0C(&v79);
  (*(void (**)(_QWORD *, char *, uint64_t))(v19 + 16))(v37, v21, v36);
  sub_1000076D8(0, &qword_1000ECCE0, (uint64_t (*)(uint64_t))&type metadata accessor for UICellAccessory, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for _ContiguousArrayStorage);
  v39 = v38;
  v40 = *(_QWORD *)(type metadata accessor for UICellAccessory(0) - 8);
  v41 = swift_allocObject(v39, ((*(unsigned __int8 *)(v40 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v40 + 80))+ *(_QWORD *)(v40 + 72), *(unsigned __int8 *)(v40 + 80) | 7);
  *(_OWORD *)(v41 + 16) = xmmword_1000B11F0;
  (*(void (**)(char *, _QWORD, uint64_t))(v16 + 104))(v18, enum case for UICellAccessory.DisplayedState.always(_:), v15);
  v42 = type metadata accessor for UICellAccessory.LayoutDimension(0);
  v43 = v62;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v42 - 8) + 56))(v62, 1, 1, v42);
  UICellAccessory.DisclosureIndicatorOptions.init(isHidden:reservedLayoutWidth:tintColor:)(2, v43, 0);
  static UICellAccessory.disclosureIndicator(displayed:options:)(v18, v14);
  (*(void (**)(char *, uint64_t))(v63 + 8))(v14, v64);
  (*(void (**)(char *, uint64_t))(v16 + 8))(v18, v15);
  sub_100028F08(v66, (uint64_t)v78);
  v44 = swift_allocObject(&unk_1000DDCE8, 64, 7);
  v45 = v67;
  *(_QWORD *)(v44 + 16) = v67;
  sub_10001AF7C(v78, v44 + 24);
  v46 = type metadata accessor for UIBackgroundConfiguration(0);
  v47 = v65;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v46 - 8) + 56))(v65, 1, 1, v46);
  v76 = 0;
  v77 = 0xE000000000000000;
  v48 = v45;
  _StringGuts.grow(_:)(20);
  v49 = v77;
  v50 = static String._unconditionallyBridgeFromObjectiveC(_:)(HKUIAutomationIdentifierPrefix);
  v52 = v51;
  swift_bridgeObjectRelease(v49);
  v76 = v50;
  v77 = v52;
  v53._object = (void *)0x80000001000B99E0;
  v53._countAndFlagsBits = 0xD000000000000012;
  String.append(_:)(v53);
  v54 = v76;
  v55 = v77;
  v56 = v68;
  (*(void (**)(char *, _QWORD, uint64_t))(v69 + 104))(v68, enum case for CellDeselectionBehavior.default(_:), v70);
  v57 = v71;
  (*(void (**)(char *, _QWORD, uint64_t))(v72 + 104))(v71, enum case for SectionedDataSourceContainerViewType.collectionView(_:), v73);
  ContentConfigurationItem.init(uniqueIdentifier:contentConfiguration:cellAccessories:cellSelectionHandler:deselectionBehavior:backgroundConfiguration:updateContentConfigurationHandler:container:automationIdentifier:)(v61, v60, &v79, v41, sub_100038C04, v44, v56, v47, 0, 0, v57, v54, v55);

  return (*(uint64_t (**)(char *, uint64_t))(v59 + 8))(v21, v75);
}

uint64_t sub_1000379B0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v10;

  v3 = type metadata accessor for ListLayoutConfiguration(0);
  v4 = *(_QWORD *)(v3 - 8);
  v5 = __chkstk_darwin(v3);
  v7 = (char *)&v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  static ListLayoutConfiguration.withoutHeader.getter(v5);
  v8 = ListLayoutConfiguration.layout(for:)(a2);
  (*(void (**)(char *, uint64_t))(v4 + 8))(v7, v3);
  return v8;
}

uint64_t sub_100037A38()
{
  uint64_t v0;

  v0 = type metadata accessor for ContentConfigurationCollectionViewListCell(0);
  return UICollectionView.registerCell<A>(_:)(v0, v0, &protocol witness table for ContentConfigurationCollectionViewListCell);
}

void sub_100037A6C(void *a1, void *a2, uint64_t a3)
{
  char *v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  _QWORD v12[5];
  _QWORD v13[5];

  sub_100028F08(a3, (uint64_t)v13);
  v5 = (char *)objc_allocWithZone((Class)type metadata accessor for AllHealthDataViewController(0));
  v6 = &v5[direct field offset for AllHealthDataViewController.providedPresentation];
  v7 = enum case for Presentation.showAllData(_:);
  v8 = type metadata accessor for Presentation(0);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 104))(v6, v7, v8);
  *(_QWORD *)&v5[qword_1000EFF38] = a2;
  sub_100028F08((uint64_t)v13, (uint64_t)&v5[qword_1000EFF40]);
  sub_100028F08((uint64_t)v13, (uint64_t)v12);
  v9 = type metadata accessor for AllHealthDataDataSource(0);
  swift_allocObject(v9, *(unsigned int *)(v9 + 48), *(unsigned __int16 *)(v9 + 52));
  v10 = AllHealthDataDataSource.init(healthStore:healthExperienceStore:)(a2, v12);
  v11 = (void *)CompoundDataSourceCollectionViewController.init(dataSource:)(v10);
  _s6Health23OpenSleepScheduleIntentVwxx_0(v13);
  objc_msgSend(a1, "showViewController:sender:", v11, a1);

}

_QWORD *sub_100037B8C()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t ObjectType;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  NSObject *v27;
  os_log_type_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  unint64_t v54;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  _BYTE v59[32];
  uint64_t v60;
  uint64_t v61[5];
  unint64_t v62;

  v1 = v0;
  v2 = *v0;
  v3 = type metadata accessor for Logger(0);
  v56 = *(_QWORD *)(v3 - 8);
  v57 = v3;
  __chkstk_darwin(v3);
  v5 = (char *)&v56 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000076D8(0, &qword_1000EDB78, (uint64_t (*)(uint64_t))&type metadata accessor for ArrayDataSourceSection, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
  __chkstk_darwin(v6);
  v8 = (char *)&v56 - v7;
  v9 = type metadata accessor for ArrayDataSourceSection(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = __chkstk_darwin(v9);
  v13 = (char *)&v56 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = dispatch thunk of PrimarySecondaryDataSource.currentDataSource.getter(v11);
  v16 = v15;
  ObjectType = swift_getObjectType(v14);
  v18 = SnapshotDataSource.numberOfSections.getter(ObjectType, v16);
  v19 = swift_unknownObjectRelease(v14);
  if (v18 != 1)
  {
LABEL_7:
    static Logger.pinnedContent.getter(v19);
    v26 = swift_retain_n(v1, 2);
    v27 = Logger.logObject.getter(v26);
    v28 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v27, v28))
    {
      v29 = swift_slowAlloc(22, -1);
      v30 = swift_slowAlloc(64, -1);
      v61[0] = v30;
      *(_DWORD *)v29 = 136315394;
      v31 = _typeName(_:qualified:)(v2, 0);
      v33 = v32;
      v58 = sub_100012B20(v31, v32, v61);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v58, v59, v29 + 4, v29 + 12);
      v34 = swift_bridgeObjectRelease(v33);
      *(_WORD *)(v29 + 12) = 2080;
      v35 = dispatch thunk of PrimarySecondaryDataSource.currentDataSource.getter(v34);
      v37 = v36;
      v38 = swift_getObjectType(v35);
      v39 = SnapshotDataSource.numberOfSections.getter(v38, v37);
      swift_unknownObjectRelease(v35);
      v58 = v39;
      v40 = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
      v42 = v41;
      v58 = sub_100012B20(v40, v41, v61);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v58, v59, v29 + 14, v29 + 22);
      swift_release_n(v1, 2);
      swift_bridgeObjectRelease(v42);
      _os_log_impl((void *)&_mh_execute_header, v27, v28, "[%s]: Unexpected number of sections when resolving gradient content: %s", (uint8_t *)v29, 0x16u);
      swift_arrayDestroy(v30, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v30, -1, -1);
      swift_slowDealloc(v29, -1, -1);

    }
    else
    {

      swift_release_n(v1, 2);
    }
    (*(void (**)(char *, uint64_t))(v56 + 8))(v5, v57);
    return _swiftEmptyArrayStorage;
  }
  v20 = dispatch thunk of PrimarySecondaryDataSource.currentDataSource.getter(v19);
  v22 = v21;
  v23 = swift_getObjectType(v20);
  v24 = SnapshotDataSource.contentsAsArray()(v23, v22);
  swift_unknownObjectRelease(v20);
  if (*(_QWORD *)(v24 + 16))
  {
    (*(void (**)(char *, unint64_t, uint64_t))(v10 + 16))(v8, v24 + ((*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80)), v9);
    v25 = 0;
  }
  else
  {
    v25 = 1;
  }
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v10 + 56))(v8, v25, 1, v9);
  swift_bridgeObjectRelease(v24);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
  {
    v19 = sub_100038B84((uint64_t)v8);
    goto LABEL_7;
  }
  v44 = (*(uint64_t (**)(char *, char *, uint64_t))(v10 + 32))(v13, v8, v9);
  v45 = ArrayDataSourceSection.arrangedItems.getter(v44);
  v43 = _swiftEmptyArrayStorage;
  v62 = (unint64_t)_swiftEmptyArrayStorage;
  v46 = *(_QWORD *)(v45 + 16);
  if (v46)
  {
    v57 = v45;
    v47 = v45 + 32;
    do
    {
      sub_100028F08(v47, (uint64_t)v61);
      sub_100028F08((uint64_t)v61, (uint64_t)&v58);
      v49 = sub_10001314C(0, (unint64_t *)&qword_1000EEC70, (uint64_t)&protocol descriptor for SectionedDataSourceItem, 1);
      v50 = type metadata accessor for FeedItem(0);
      if ((swift_dynamicCast(&v60, &v58, v49, v50, 6) & 1) == 0)
        v60 = 0;
      v51 = _s6Health23OpenSleepScheduleIntentVwxx_0(v61);
      v52 = v60;
      if (v60)
      {
        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v51);
        v54 = *(_QWORD *)((v62 & 0xFFFFFFFFFFFFFF8) + 0x10);
        v53 = *(_QWORD *)((v62 & 0xFFFFFFFFFFFFFF8) + 0x18);
        if (v54 >= v53 >> 1)
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v53 > 1, v54 + 1, 1);
        v48 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v54, v52);
        specialized Array._endMutation()(v48);
      }
      v47 += 40;
      --v46;
    }
    while (v46);
    v43 = (_QWORD *)v62;
    v45 = v57;
  }
  swift_bridgeObjectRelease(v45);
  (*(void (**)(char *, uint64_t))(v10 + 8))(v13, v9);
  return v43;
}

void SummaryPinnedContentDataSource.init(_:)()
{
  _swift_stdlib_reportUnimplementedInitializer("Health.SummaryPinnedContentDataSource", 37, "init(_:)", 8, 0);
  __break(1u);
}

uint64_t sub_100038080()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0
                          + direct field offset for SummaryPinnedContentDataSource.pinnedContentWithCloudStateDataSource));
  swift_release(*(_QWORD *)(v0
                          + direct field offset for SummaryPinnedContentDataSource.cloudStateOrPinnedContentOrEmptyStateDataSource));
  swift_release(*(_QWORD *)(v0 + direct field offset for SummaryPinnedContentDataSource.pinnedFeedItemsPublisher));
  return swift_release(*(_QWORD *)(v0 + qword_1000EDA80));
}

uint64_t SummaryPinnedContentDataSource.deinit()
{
  uint64_t v0;

  v0 = CompoundSectionedDataSource.deinit();
  swift_release(*(_QWORD *)(v0
                          + direct field offset for SummaryPinnedContentDataSource.pinnedContentWithCloudStateDataSource));
  swift_release(*(_QWORD *)(v0
                          + direct field offset for SummaryPinnedContentDataSource.cloudStateOrPinnedContentOrEmptyStateDataSource));
  swift_release(*(_QWORD *)(v0 + direct field offset for SummaryPinnedContentDataSource.pinnedFeedItemsPublisher));
  swift_release(*(_QWORD *)(v0 + qword_1000EDA80));
  return v0;
}

uint64_t SummaryPinnedContentDataSource.__deallocating_deinit()
{
  uint64_t v0;

  v0 = CompoundSectionedDataSource.deinit();
  swift_release(*(_QWORD *)(v0
                          + direct field offset for SummaryPinnedContentDataSource.pinnedContentWithCloudStateDataSource));
  swift_release(*(_QWORD *)(v0
                          + direct field offset for SummaryPinnedContentDataSource.cloudStateOrPinnedContentOrEmptyStateDataSource));
  swift_release(*(_QWORD *)(v0 + direct field offset for SummaryPinnedContentDataSource.pinnedFeedItemsPublisher));
  swift_release(*(_QWORD *)(v0 + qword_1000EDA80));
  return swift_deallocClassInstance(v0, 48, 7);
}

uint64_t sub_10003819C()
{
  _QWORD *v0;
  _QWORD *v1;
  _BYTE v3[24];

  v1 = (_QWORD *)(*v0 + direct field offset for SummaryPinnedContentDataSource.pinnedFeedItemsPublisher);
  swift_beginAccess(v1, v3, 0, 0);
  return swift_retain(*v1);
}

void sub_1000381E8()
{
  uint64_t v0;
  uint64_t ObjCClassFromMetadata;
  id v2;
  Swift::String v3;
  Swift::String v4;
  Swift::String v5;
  Swift::String v6;

  v0 = type metadata accessor for SummaryPinnedContentDataSource(0);
  ObjCClassFromMetadata = swift_getObjCClassFromMetadata(v0);
  v2 = objc_msgSend((id)objc_opt_self(NSBundle), "bundleForClass:", ObjCClassFromMetadata);
  v3._countAndFlagsBits = 0xD000000000000017;
  v6._countAndFlagsBits = 0xD000000000000035;
  v6._object = (void *)0x80000001000B9A40;
  v3._object = (void *)0x80000001000B9A00;
  v4._object = (void *)0x80000001000B9A20;
  v4._countAndFlagsBits = 0xD000000000000010;
  v5 = NSLocalizedString(_:tableName:bundle:value:comment:)(v3, (Swift::String_optional)0, (NSBundle)v2, v4, v6);

  xmmword_1000EDA40 = (__int128)v5;
}

void sub_1000382C0()
{
  uint64_t v0;
  uint64_t ObjCClassFromMetadata;
  id v2;
  Swift::String v3;
  Swift::String v4;
  Swift::String v5;
  Swift::String v6;

  v0 = type metadata accessor for SummaryPinnedContentDataSource(0);
  ObjCClassFromMetadata = swift_getObjCClassFromMetadata(v0);
  v2 = objc_msgSend((id)objc_opt_self(NSBundle), "bundleForClass:", ObjCClassFromMetadata);
  v6._countAndFlagsBits = 0xD00000000000003DLL;
  v6._object = (void *)0x80000001000B9B00;
  v3._object = (void *)0x80000001000B9AC0;
  v4._object = (void *)0x80000001000B9AE0;
  v3._countAndFlagsBits = 0xD000000000000017;
  v4._countAndFlagsBits = 0x100000000000001ALL;
  v5 = NSLocalizedString(_:tableName:bundle:value:comment:)(v3, (Swift::String_optional)0, (NSBundle)v2, v4, v6);

  xmmword_1000EDA50 = (__int128)v5;
}

uint64_t sub_100038398(unint64_t a1, uint64_t a2, uint64_t a3)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;

  v5 = a1;
  v6 = a1 >> 16;
  v7 = (unsigned __int16)a1 >> 14;
  if ((a3 & 0x1000000000000000) == 0 || (a2 & 0x800000000000000) != 0)
  {
    v13 = String.UTF16View.index(_:offsetBy:)(15, v6, a2);
    v14 = v13 + (v7 << 16);
    v15 = v13 & 0xFFFFFFFFFFFFFFFCLL | v5 & 3;
    v16 = v14 & 0xFFFFFFFFFFFF0000;
    if (!v7)
      v16 = v15;
    return v16 | 4;
  }
  else
  {
    v8 = String.UTF8View._foreignIndex(_:offsetBy:)(15, v6);
    v9 = v8 + (v7 << 16);
    v10 = v8 & 0xFFFFFFFFFFFFFFFCLL | v5 & 3;
    v11 = v9 & 0xFFFFFFFFFFFF0000;
    if (!v7)
      v11 = v10;
    return v11 | 8;
  }
}

uint64_t sub_100038410(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  int64_t v8;
  int64_t v9;
  uint64_t v10;
  char *v11;
  size_t v12;
  char *v13;
  char *v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    sub_1000275F4(0, &qword_1000EDB70, (uint64_t)&type metadata for UInt8);
    v11 = (char *)swift_allocObject(v10, v9 + 32, 7);
    v12 = j__malloc_size(v11);
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * v12 - 64;
  }
  else
  {
    v11 = (char *)_swiftEmptyArrayStorage;
  }
  v13 = v11 + 32;
  v14 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v13 >= &v14[v8])
      memmove(v13, v14, v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v14 >= &v13[v8] || v13 >= &v14[v8])
  {
    memcpy(v13, v14, v8);
LABEL_28:
    swift_bridgeObjectRelease(a4);
    return (uint64_t)v11;
  }
LABEL_30:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_100038568(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t ObjCClassFromMetadata;
  void *v9;
  id v10;
  Swift::String v11;
  Swift::String v12;
  Swift::String v13;
  id v14;
  Swift::String v15;
  Swift::String v16;
  Swift::String v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v22[2];
  __int128 v23[2];
  Swift::String v24;
  Swift::String v25;

  v4 = type metadata accessor for UIListContentConfiguration(0);
  __chkstk_darwin(v4);
  v6 = (char *)v22 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for EditFavoritesCollectionViewController(0);
  ObjCClassFromMetadata = swift_getObjCClassFromMetadata(v7);
  v9 = (void *)objc_opt_self(NSBundle);
  v10 = objc_msgSend(v9, "bundleForClass:", ObjCClassFromMetadata);
  v24._countAndFlagsBits = 0xD000000000000019;
  v24._object = (void *)0x80000001000B9A80;
  v11._countAndFlagsBits = 0x44454E4E4950;
  v11._object = (void *)0xE600000000000000;
  v12._countAndFlagsBits = 0x64656E6E6950;
  v12._object = (void *)0xE600000000000000;
  v13 = NSLocalizedString(_:tableName:bundle:value:comment:)(v11, (Swift::String_optional)0, (NSBundle)v10, v12, v24);

  v14 = objc_msgSend(v9, "bundleForClass:", ObjCClassFromMetadata);
  v25._object = (void *)0x80000001000B9AA0;
  v15._countAndFlagsBits = 1414087749;
  v15._object = (void *)0xE400000000000000;
  v16._countAndFlagsBits = 1953064005;
  v16._object = (void *)0xE400000000000000;
  v25._countAndFlagsBits = 0xD000000000000010;
  v17 = NSLocalizedString(_:tableName:bundle:value:comment:)(v15, (Swift::String_optional)0, (NSBundle)v14, v16, v25);

  sub_100028F08(a2, (uint64_t)v23);
  sub_100028F08(a1, (uint64_t)v22);
  v18 = swift_allocObject(&unk_1000DDD10, 96, 7);
  sub_10001AF7C(v23, v18 + 16);
  v19 = sub_10001AF7C(v22, v18 + 56);
  static UIListContentConfiguration.extraProminentInsetGroupedHeader()(v19);
  v20 = type metadata accessor for HeaderItem(0);
  swift_allocObject(v20, *(unsigned int *)(v20 + 48), *(unsigned __int16 *)(v20 + 52));
  return HeaderItem.init(title:buttonText:buttonWasTapped:configuration:automationIdentifier:)(v13._countAndFlagsBits, v13._object, v17._countAndFlagsBits, v17._object, sub_100038C3C, v18, v6, 0, 0);
}

uint64_t sub_100038790(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return sub_1000372B0(a1, a2, v2);
}

void sub_1000387A8(uint64_t a1)
{
  unint64_t v2;
  uint64_t v3;
  _QWORD v4[4];

  if (!qword_1000EDA88)
  {
    v4[0] = type metadata accessor for DownloadingDataDataSource(255);
    v4[1] = type metadata accessor for PinnedContentDataSource(255);
    v4[2] = &protocol witness table for MutableArrayDataSource;
    v4[3] = sub_100013198(&qword_1000EDA90, (uint64_t (*)(uint64_t))&type metadata accessor for PinnedContentDataSource, (uint64_t)&protocol conformance descriptor for FetchedResultsControllerDataSource<A>);
    v2 = type metadata accessor for PrimarySecondaryDataSource(a1, v4);
    if (!v3)
      atomic_store(v2, (unint64_t *)&qword_1000EDA88);
  }
}

uint64_t sub_100038848()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _BYTE *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  double v8;
  void (*v9)(_BYTE *, _QWORD);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  __int128 v17;
  _BYTE v18[32];

  v0 = type metadata accessor for LayoutConfiguration(0);
  v1 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin(v0);
  v3 = &v18[-((v2 + 15) & 0xFFFFFFFFFFFFFFF0) - 16];
  v4 = type metadata accessor for ListLayoutConfiguration(0);
  v5 = swift_allocBox(v4);
  v6 = static ListLayoutConfiguration.withoutHeader.getter(v5);
  v7 = static LayoutConfiguration.shared.getter(v6);
  v8 = LayoutConfiguration.interItemInset.getter(v7);
  (*(void (**)(_BYTE *, uint64_t))(v1 + 8))(v3, v0);
  v9 = (void (*)(_BYTE *, _QWORD))ListLayoutConfiguration.additionalContentInsets.modify(v18);
  *(double *)(v10 + 16) = v8;
  v9(v18, 0);
  type metadata accessor for MutableArrayDataSourceWithLayout(0);
  sub_100013A0C(0);
  v12 = swift_allocObject(v11, 40, 7);
  v17 = xmmword_1000B11F0;
  *(_OWORD *)(v12 + 16) = xmmword_1000B11F0;
  sub_100007730(0, (unint64_t *)&qword_1000ECA70, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for _ContiguousArrayStorage);
  v14 = swift_allocObject(v13, 72, 7);
  *(_OWORD *)(v14 + 16) = v17;
  if (qword_1000EC018 != -1)
    swift_once(&qword_1000EC018, sub_1000381E8);
  v15 = xmmword_1000EDA40;
  *(_QWORD *)(v14 + 56) = type metadata accessor for TitleEmptyStateCollectionViewCellItem(0);
  *(_QWORD *)(v14 + 64) = sub_100013198((unint64_t *)&unk_1000EDB80, (uint64_t (*)(uint64_t))&type metadata accessor for TitleEmptyStateCollectionViewCellItem, (uint64_t)&protocol conformance descriptor for TitleEmptyStateCollectionViewCellItem);
  sub_100007E0C((_QWORD *)(v14 + 32));
  swift_bridgeObjectRetain(*((_QWORD *)&v15 + 1));
  TitleEmptyStateCollectionViewCellItem.init(title:)(v15, *((_QWORD *)&v15 + 1));
  *(_QWORD *)(v12 + 32) = v14;
  return MutableArrayDataSourceWithLayout.__allocating_init(_:collapseEmptySections:layoutConstructor:)(v12, 1, sub_100038790, v5);
}

void sub_100038A24(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  _QWORD v5[4];

  if (!qword_1000EDA98)
  {
    sub_1000387A8(255);
    v5[0] = v2;
    v5[1] = type metadata accessor for MutableArrayDataSourceWithLayout(255);
    v5[2] = sub_100013198(&qword_1000EDAA0, (uint64_t (*)(uint64_t))sub_1000387A8, (uint64_t)&protocol conformance descriptor for PrimarySecondaryDataSource<A, B>);
    v5[3] = &protocol witness table for MutableArrayDataSource;
    v3 = type metadata accessor for PrimarySecondaryDataSource(a1, v5);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_1000EDA98);
  }
}

uint64_t sub_100038AC8(unint64_t *a1, unint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t, void *), uint64_t a4)
{
  uint64_t result;
  uint64_t v7;

  result = *a1;
  if (!result)
  {
    sub_1000130A0(255, a2, a3);
    result = swift_getWitnessTable(a4, v7);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100038B08()
{
  return type metadata accessor for DownloadingDataDataSource(0);
}

uint64_t type metadata accessor for SummaryPinnedContentDataSource(uint64_t a1)
{
  return sub_100006A08(a1, (uint64_t *)&unk_1000EDB20, (uint64_t)&nominal type descriptor for SummaryPinnedContentDataSource);
}

uint64_t sub_100038B24(uint64_t a1)
{
  _QWORD v2[4];

  v2[0] = (char *)&value witness table for Builtin.NativeObject + 64;
  v2[1] = (char *)&value witness table for Builtin.NativeObject + 64;
  v2[2] = (char *)&value witness table for Builtin.NativeObject + 64;
  v2[3] = "\b";
  return swift_initClassMetadata2(a1, 0, 4, v2, a1 + class metadata base offset for SummaryPinnedContentDataSource);
}

uint64_t sub_100038B7C()
{
  return type metadata accessor for SummaryPinnedContentDataSource(0);
}

uint64_t sub_100038B84(uint64_t a1)
{
  uint64_t v2;

  sub_1000076D8(0, &qword_1000EDB78, (uint64_t (*)(uint64_t))&type metadata accessor for ArrayDataSourceSection, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_100038BD8()
{
  uint64_t v0;

  _s6Health23OpenSleepScheduleIntentVwxx_0((_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 64, 7);
}

void sub_100038C04(void *a1)
{
  uint64_t v1;

  sub_100037A6C(a1, *(void **)(v1 + 16), v1 + 24);
}

uint64_t sub_100038C10()
{
  uint64_t v0;

  _s6Health23OpenSleepScheduleIntentVwxx_0((_QWORD *)(v0 + 16));
  _s6Health23OpenSleepScheduleIntentVwxx_0((_QWORD *)(v0 + 56));
  return swift_deallocObject(v0, 96, 7);
}

void sub_100038C3C(void *a1)
{
  uint64_t v1;

  sub_1000371A0(a1, v1 + 16, v1 + 56);
}

uint64_t sub_100038C48(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_100038C84 + 4 * byte_1000B2658[a1]))(0xD000000000000016, 0x80000001000B7310);
}

unint64_t sub_100038C84()
{
  return 0xD00000000000001FLL;
}

uint64_t sub_100038E50()
{
  uint64_t v0;

  return v0 - 2;
}

uint64_t sub_100038E60()
{
  uint64_t v0;

  return v0 + 4;
}

uint64_t sub_100038E70()
{
  uint64_t v0;

  return v0 - 1;
}

uint64_t sub_100038E80()
{
  uint64_t v0;

  return v0 - 3;
}

uint64_t sub_100038E90()
{
  uint64_t v0;

  return v0 + 3;
}

uint64_t sub_100038EAC()
{
  uint64_t v0;

  return v0 - 8;
}

uint64_t sub_100038EBC()
{
  uint64_t v0;

  return v0 - 3;
}

uint64_t sub_100038ECC()
{
  uint64_t v0;

  return v0 - 11;
}

uint64_t sub_100038EDC()
{
  uint64_t v0;

  return v0 - 10;
}

uint64_t sub_100038EEC()
{
  uint64_t v0;

  return v0 - 12;
}

void sub_100038EFC()
{
  JUMPOUT(0x100038F08);
}

void sub_100038F14(void *a1, uint64_t a2, uint64_t a3, int a4, int a5)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t (*v17)(uint64_t);
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  id v23;
  uint64_t v24;
  id v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  void *v30;
  uint64_t v31;
  void *v32;
  id v33;
  void *v34;
  id v35;
  id v36;
  uint64_t v37;
  char *v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  NSString v42;
  NSString v43;
  Class isa;
  char *v45;
  id v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t ObjCClassFromMetadata;
  id v51;
  NSString v52;
  id v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  id v62;
  uint64_t v63;
  uint64_t v64;
  _QWORD *v65;
  void *v66;
  char *v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  void *v72;
  uint64_t v73;
  id v74;
  id v75;
  uint64_t v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  char *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  char *v90;
  int v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  int v96;
  uint64_t v97;
  id v98;
  uint64_t v99;
  char *v100;
  uint64_t v101;
  _QWORD *v102;
  char *v103;
  uint64_t v104;
  char *v105;
  uint64_t v106;
  char *v107;
  uint64_t v108;
  uint64_t v109;
  char *v110;
  _QWORD v111[5];
  __int128 aBlock;
  uint64_t (*v113)(uint64_t);
  void *v114;
  void (*v115)();
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;

  v96 = a4;
  v89 = a3;
  v104 = a2;
  v7 = type metadata accessor for DispatchWorkItemFlags(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v110 = (char *)&v84 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v109 = type metadata accessor for DispatchQoS(0);
  v108 = *(_QWORD *)(v109 - 8);
  __chkstk_darwin(v109);
  v107 = (char *)&v84 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v106 = type metadata accessor for DispatchTime(0);
  v99 = *(_QWORD *)(v106 - 8);
  v11 = __chkstk_darwin(v106);
  v103 = (char *)&v84 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v105 = (char *)&v84 - v13;
  v102 = (_QWORD *)type metadata accessor for DeepLinkActivityType(0);
  v101 = *(v102 - 1);
  __chkstk_darwin(v102);
  v100 = (char *)&v84 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v95 = type metadata accessor for Presentation(0);
  v94 = *(_QWORD *)(v95 - 8);
  __chkstk_darwin(v95);
  v16 = (char *)&v84 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000076D8(0, &qword_1000EDC18, v17, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
  __chkstk_darwin(v18);
  v20 = (char *)&v84 - v19;
  v88 = type metadata accessor for DataTypeDetailConfiguration.Context(0);
  v87 = *(_QWORD *)(v88 - 8);
  __chkstk_darwin(v88);
  v86 = (char *)&v84 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v85 = type metadata accessor for HKTDataTypeDetailFactory(0);
  v84 = *(_QWORD *)(v85 - 8);
  __chkstk_darwin(v85);
  v90 = (char *)&v84 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = objc_msgSend(objc_allocWithZone((Class)HKHealthStore), "init");
  v24 = type metadata accessor for PinnedContentManager(0);
  v25 = v23;
  v26 = PinnedContentManager.__allocating_init(healthStore:domain:)(v25);
  sub_10006BC9C((uint64_t)&aBlock);
  if (v114)
  {
    v97 = v26;
    v98 = v25;
    v92 = v8;
    v93 = v7;
    sub_10001AF7C(&aBlock, (uint64_t)&v118);
    v28 = v119;
    v27 = v120;
    sub_100012E04(&v118, v119);
    (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v27 + 32))(&v117, v28, v27);
    v29 = 0;
    v91 = a5;
    v30 = a1;
    v31 = v99;
    switch((char)a5)
    {
      case 7:
        sub_100028F08((uint64_t)&v117, (uint64_t)&aBlock);
        v45 = (char *)objc_allocWithZone((Class)type metadata accessor for AllHealthDataViewController(0));
        (*(void (**)(char *, _QWORD, uint64_t))(v94 + 104))(&v45[direct field offset for AllHealthDataViewController.providedPresentation], enum case for Presentation.showAllData(_:), v95);
        v46 = v98;
        *(_QWORD *)&v45[qword_1000EFF38] = v98;
        sub_100028F08((uint64_t)&aBlock, (uint64_t)&v45[qword_1000EFF40]);
        sub_100028F08((uint64_t)&aBlock, (uint64_t)v111);
        v47 = type metadata accessor for AllHealthDataDataSource(0);
        swift_allocObject(v47, *(unsigned int *)(v47 + 48), *(unsigned __int16 *)(v47 + 52));
        v48 = AllHealthDataDataSource.init(healthStore:healthExperienceStore:)(v46, v111);
        v29 = (void *)CompoundDataSourceCollectionViewController.init(dataSource:)(v48);
        _s6Health23OpenSleepScheduleIntentVwxx_0(&aBlock);
        break;
      case 8:
      case 9:
      case 10:
      case 11:
      case 12:
      case 13:
      case 14:
      case 15:
      case 16:
      case 17:
      case 19:
      case 23:
      case 24:
      case 25:
      case 26:
      case 27:
      case 28:
      case 29:
      case 30:
      case 31:
      case 32:
      case 33:
      case 34:
      case 35:
      case 36:
      case 37:
      case 38:
      case 39:
      case 40:
        break;
      case 18:
        v49 = type metadata accessor for InternalFeedItemListViewController(0);
        ObjCClassFromMetadata = swift_getObjCClassFromMetadata(v49);
        v51 = objc_msgSend((id)objc_opt_self(NSBundle), "bundleForClass:", ObjCClassFromMetadata);
        v52 = String._bridgeToObjectiveC()();
        v53 = objc_msgSend((id)objc_opt_self(UIStoryboard), "storyboardWithName:bundle:", v52, v51);

        v29 = (void *)UIStoryboard.instantiateViewController<A>(identifier:creator:)(0xD000000000000022, 0x80000001000B9DD0, sub_10003B7B0, 0, v49);
        sub_1000076D8(0, &qword_1000ED1D0, (uint64_t (*)(uint64_t))&type metadata accessor for ContentKind, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for _ContiguousArrayStorage);
        v55 = v54;
        v56 = type metadata accessor for ContentKind(0);
        v57 = *(_QWORD *)(v56 - 8);
        v58 = *(unsigned __int8 *)(v57 + 80);
        v59 = (v58 + 32) & ~v58;
        v60 = swift_allocObject(v55, v59 + *(_QWORD *)(v57 + 72), v58 | 7);
        *(_OWORD *)(v60 + 16) = xmmword_1000B11F0;
        v61 = v60 + v59;
        v30 = a1;
        (*(void (**)(uint64_t, _QWORD, uint64_t))(v57 + 104))(v61, enum case for ContentKind.highlight(_:), v56);
        dispatch thunk of InternalFeedItemListViewController.contentKinds.setter(v60);

        break;
      case 20:
      case 21:
      case 22:
        if ((v96 & 1) != 0
          || (v32 = (void *)objc_opt_self(HKObjectType),
              (v33 = objc_msgSend(v32, "dataTypeWithCode:", v89)) == 0))
        {
          v29 = 0;
        }
        else
        {
          v34 = v33;
          HKTDataTypeDetailFactory.init()();
          sub_100028F08((uint64_t)&v117, (uint64_t)&aBlock);
          v35 = v98;
          v36 = objc_msgSend(v35, "profileIdentifier");
          (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v94 + 56))(v20, 1, 1, v95);
          v37 = static DataTypeDetailMode.defaultMode(for:presentation:)(v36, v20);

          sub_1000114C0((uint64_t)v20, (uint64_t)&qword_1000EDC18, (uint64_t)&type metadata accessor for Presentation, (uint64_t (*)(_QWORD, uint64_t, uint64_t, void *))sub_1000076D8);
          v111[3] = v24;
          v111[4] = &protocol witness table for PinnedContentManager;
          v111[0] = v97;
          swift_retain(v97);
          v38 = v86;
          DataTypeDetailConfiguration.Context.init(healthExperienceStore:healthStore:mode:pinnedContentManager:chartContext:restorationUserActivity:)(&aBlock, v35, v37, v111, 0, 0);
          v29 = (void *)HKTDataTypeDetailFactory.makeViewController(hkType:context:)(v34, v38);

          v30 = a1;
          (*(void (**)(char *, uint64_t))(v87 + 8))(v38, v88);
          (*(void (**)(char *, uint64_t))(v84 + 8))(v90, v85);
        }
        break;
      case 41:
        sub_100028F08((uint64_t)&v117, (uint64_t)&aBlock);
        (*(void (**)(char *, _QWORD, uint64_t))(v94 + 104))(v16, enum case for Presentation.summaryFeed(_:), v95);
        v62 = objc_allocWithZone((Class)type metadata accessor for AllTrendsViewController(0));
        v29 = (void *)AllTrendsViewController.init(healthStore:healthExperienceStore:additionalPredicates:presentation:customProvenance:)(v98, &aBlock, _swiftEmptyArrayStorage, v16, 0, 0);
        break;
      default:
        v30 = a1;
        v31 = v99;
        break;
    }
    v63 = v101;
    v64 = (uint64_t)v100;
    v65 = v102;
    (*(void (**)(char *, _QWORD, _QWORD *))(v101 + 104))(v100, enum case for DeepLinkActivityType.summary(_:), v102);
    sub_1000705F8(v29, &v118, v64, 0, 0, 0);
    (*(void (**)(uint64_t, _QWORD *))(v63 + 8))(v64, v65);
    sub_100006D10(0, (unint64_t *)&qword_1000ED910, OS_dispatch_queue_ptr);
    v66 = (void *)static OS_dispatch_queue.main.getter();
    v67 = v103;
    static DispatchTime.now()();
    v68 = v105;
    + infix(_:_:)(v67, 4.0);
    v102 = *(_QWORD **)(v31 + 8);
    v69 = v106;
    ((void (*)(char *, uint64_t))v102)(v67, v106);
    v70 = swift_allocObject(&unk_1000DE2C8, 48, 7);
    *(_BYTE *)(v70 + 16) = v91;
    v71 = v104;
    *(_QWORD *)(v70 + 24) = v104;
    *(_QWORD *)(v70 + 32) = v29;
    *(_QWORD *)(v70 + 40) = v30;
    v115 = sub_10003EFC8;
    v116 = v70;
    *(_QWORD *)&aBlock = _NSConcreteStackBlock;
    *((_QWORD *)&aBlock + 1) = 1107296256;
    v113 = sub_100006988;
    v114 = &unk_1000DE2E0;
    v72 = _Block_copy(&aBlock);
    v73 = v116;
    v74 = v29;
    v75 = v30;
    swift_bridgeObjectRetain(v71);
    v76 = swift_release(v73);
    v77 = v107;
    static DispatchQoS.unspecified.getter(v76);
    *(_QWORD *)&aBlock = _swiftEmptyArrayStorage;
    v78 = sub_100013198((unint64_t *)&qword_1000EDBE0, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    sub_1000076D8(0, (unint64_t *)&qword_1000ED920, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Array);
    v80 = v79;
    v81 = sub_100013C8C();
    v82 = v110;
    v83 = v93;
    dispatch thunk of SetAlgebra.init<A>(_:)(&aBlock, v80, v81, v93, v78);
    OS_dispatch_queue.asyncAfter(deadline:qos:flags:execute:)(v68, v77, v82, v72);
    _Block_release(v72);

    swift_release(v97);
    (*(void (**)(char *, uint64_t))(v92 + 8))(v82, v83);
    (*(void (**)(char *, uint64_t))(v108 + 8))(v77, v109);
    ((void (*)(char *, uint64_t))v102)(v68, v69);
    _s6Health23OpenSleepScheduleIntentVwxx_0(&v117);
    _s6Health23OpenSleepScheduleIntentVwxx_0(&v118);
  }
  else
  {
    sub_10003E714((uint64_t)&aBlock, (unint64_t *)&qword_1000EDBA0, (uint64_t)&unk_1000EDBA8, (uint64_t)&protocol descriptor for RootViewControllerProviding);
    v39 = sub_10007C098((uint64_t)_swiftEmptyArrayStorage);
    sub_100038C48(a5);
    v41 = v40;
    v42 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v41);
    v43 = String._bridgeToObjectiveC()();
    isa = Dictionary._bridgeToObjectiveC()().super.isa;
    objc_msgSend(a1, "failedTest:withFailure:withResults:", v42, v43, isa);

    swift_release(v26);
    swift_bridgeObjectRelease(v39);

  }
}

uint64_t sub_100039B00(void *a1, unsigned __int8 a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint8_t *v16;
  uint64_t v17;
  void *v18;
  unsigned __int8 v19;
  uint8_t *v20;
  uint8_t *v21;
  uint64_t v22;
  uint64_t v23;
  NSString v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  id v29;
  uint64_t v30;
  uint64_t v32;
  uint64_t v33;

  v4 = type metadata accessor for DarwinNotificationPublisher.DarwinNotificationName(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v32 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for Logger(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = __chkstk_darwin(v8);
  v12 = (char *)&v32 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = static Logger.general.getter(v10);
  v14 = Logger.logObject.getter(v13);
  v15 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v14, v15))
  {
    v16 = (uint8_t *)swift_slowAlloc(2, -1);
    v32 = v5;
    v17 = v4;
    v18 = a1;
    v19 = a2;
    v20 = v16;
    *(_WORD *)v16 = 0;
    _os_log_impl((void *)&_mh_execute_header, v14, v15, "Starting foreground generation test", v16, 2u);
    v21 = v20;
    a2 = v19;
    a1 = v18;
    v4 = v17;
    v5 = v32;
    swift_slowDealloc(v21, -1, -1);
  }

  (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v8);
  sub_100038C48(a2);
  v23 = v22;
  v24 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v23);
  objc_msgSend(a1, "startedTest:", v24);

  v25 = type metadata accessor for DarwinNotificationPublisher(0);
  (*(void (**)(char *, _QWORD, uint64_t))(v5 + 104))(v7, enum case for DarwinNotificationPublisher.DarwinNotificationName.userInteractiveFeedItemGenerationIdleOrComplete(_:), v4);
  v33 = DarwinNotificationPublisher.__allocating_init(name:queue:)(v7, 0);
  v26 = swift_allocObject(&unk_1000DE318, 25, 7);
  *(_QWORD *)(v26 + 16) = a1;
  *(_BYTE *)(v26 + 24) = a2;
  v27 = swift_allocObject(&unk_1000DE340, 32, 7);
  *(_QWORD *)(v27 + 16) = sub_10003EFD8;
  *(_QWORD *)(v27 + 24) = v26;
  v28 = sub_100013198((unint64_t *)&unk_1000EDC20, (uint64_t (*)(uint64_t))&type metadata accessor for DarwinNotificationPublisher, (uint64_t)&protocol conformance descriptor for DarwinNotificationPublisher);
  v29 = a1;
  v30 = Publisher.retainingSink(receiveValue:)(sub_10003EF0C, v27, v25, v28);
  swift_release(v30);
  swift_release(v27);
  return swift_release(v33);
}

void sub_100039D68(void *a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  uint64_t v35;
  unint64_t v36;
  char v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  NSString v41;
  NSString v42;
  Class isa;
  uint64_t v44;
  Swift::String v45;
  void *v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  NSString v51;
  NSString v52;
  NSDictionary v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  Swift::String v57;
  void *object;
  uint64_t v59;
  uint64_t v60;
  char v61;
  _QWORD *v62;
  uint64_t v63;
  id v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  NSString v68;
  NSString v69;
  Class v70;
  void *v71;
  uint64_t v72;
  void *v73;
  uint64_t v74;
  id v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  char *v81;
  uint64_t v82;
  void (*v83)(char *, uint64_t);
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  char *v88;
  uint64_t v89;
  uint64_t v90;
  __int128 aBlock;
  __int128 v92;
  void (*v93)();
  uint64_t v94;
  Swift::String v95;
  __int128 v96;
  __int128 v97;
  _QWORD v98[3];
  uint64_t v99;
  uint64_t v100;
  _QWORD v101[3];
  uint64_t v102;
  uint64_t v103;

  v89 = a2;
  v7 = type metadata accessor for DispatchWorkItemFlags(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v88 = (char *)&v83 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v87 = type metadata accessor for DispatchQoS(0);
  v86 = *(_QWORD *)(v87 - 8);
  __chkstk_darwin(v87);
  v11 = (char *)&v83 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v90 = type metadata accessor for DispatchTime(0);
  v12 = *(_QWORD *)(v90 - 8);
  v13 = __chkstk_darwin(v90);
  v15 = (char *)&v83 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  v17 = (char *)&v83 - v16;
  sub_10006BC9C((uint64_t)&aBlock);
  if (!*((_QWORD *)&v92 + 1))
  {
    sub_10003E714((uint64_t)&aBlock, (unint64_t *)&qword_1000EDBA0, (uint64_t)&unk_1000EDBA8, (uint64_t)&protocol descriptor for RootViewControllerProviding);
    v38 = sub_10007C098((uint64_t)_swiftEmptyArrayStorage);
    sub_100038C48(a4);
    v40 = v39;
    v41 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v40);
    v42 = String._bridgeToObjectiveC()();
    isa = Dictionary._bridgeToObjectiveC()().super.isa;
    objc_msgSend(a1, "failedTest:withFailure:withResults:", v41, v42, isa);
    swift_bridgeObjectRelease(v38);

    return;
  }
  v84 = v8;
  v85 = v7;
  sub_10001AF7C(&aBlock, (uint64_t)v101);
  v18 = a4;
  v20 = v102;
  v19 = v103;
  sub_100012E04(v101, v102);
  v21 = *(_QWORD *)(v19 + 8);
  v22 = v18;
  dispatch thunk of ViewControllerRouterProtocol.prepareForAppActivity(_:)(a3, v20, v21);
  v23 = v102;
  v24 = v103;
  sub_100012E04(v101, v102);
  v25 = (*(uint64_t (**)(uint64_t, uint64_t))(v24 + 16))(v23, v24);
  if (!v25)
    goto LABEL_15;
  v26 = (void *)v25;
  v27 = objc_opt_self(UINavigationController);
  if (!swift_dynamicCastObjCClass(v26, v27))
  {

LABEL_15:
    *(_QWORD *)&aBlock = 0;
    *((_QWORD *)&aBlock + 1) = 0xE000000000000000;
    _StringGuts.grow(_:)(43);
    swift_bridgeObjectRelease(*((_QWORD *)&aBlock + 1));
    *(_QWORD *)&aBlock = 0xD000000000000029;
    *((_QWORD *)&aBlock + 1) = 0x80000001000B9B70;
    v54 = v102;
    v55 = v103;
    sub_100012E04(v101, v102);
    v98[0] = (*(uint64_t (**)(uint64_t, uint64_t))(v55 + 16))(v54, v55);
    sub_10003E6C0(0, (unint64_t *)&unk_1000EDBB0, (uint64_t)&qword_1000F0B50, (uint64_t)UIViewController_ptr, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_100006D10);
    v57._countAndFlagsBits = String.init<A>(describing:)(v98, v56);
    object = v57._object;
    String.append(_:)(v57);
    swift_bridgeObjectRelease(object);
    v47 = *((_QWORD *)&aBlock + 1);
    v48 = sub_10007C098((uint64_t)_swiftEmptyArrayStorage);
    sub_100038C48(v22);
    v60 = v59;
    v51 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v60);
    v52 = String._bridgeToObjectiveC()();
    v53.super.isa = Dictionary._bridgeToObjectiveC()().super.isa;
    objc_msgSend(a1, "failedTest:withFailure:withResults:", v51, v52, v53.super.isa);
    goto LABEL_16;
  }
  v28 = (unint64_t)UINavigationController.rootViewController()();
  if (v28
    && (*(_QWORD *)&v96 = v28,
        v29 = sub_100006D10(0, (unint64_t *)&qword_1000F0B50, UIViewController_ptr),
        v30 = sub_100013100(0, &qword_1000EDBC8, (uint64_t)&protocol descriptor for PPTScrollViewProviding),
        (swift_dynamicCast(&aBlock, &v96, v29, v30, 6) & 1) != 0))
  {
    if (*((_QWORD *)&v92 + 1))
    {
      sub_10001AF7C(&aBlock, (uint64_t)v98);
      v31 = v99;
      v32 = v100;
      sub_100012E04(v98, v99);
      v33 = dispatch thunk of PPTScrollViewProviding.scrollViewToTest()(v31, v32);
      if (v33)
      {
        v34 = (void *)v33;
        strcpy((char *)&v95, "feedVariation");
        HIWORD(v95._object) = -4864;
        AnyHashable.init<A>(_:)(&aBlock, &v95, &type metadata for String, &protocol witness table for String);
        v35 = v89;
        if (*(_QWORD *)(v89 + 16) && (v36 = sub_10007DF14((uint64_t)&aBlock), (v37 & 1) != 0))
        {
          sub_100012C10(*(_QWORD *)(v35 + 56) + 32 * v36, (uint64_t)&v96);
        }
        else
        {
          v96 = 0u;
          v97 = 0u;
        }
        sub_100025CE0((uint64_t)&aBlock);
        if (*((_QWORD *)&v97 + 1))
        {
          if ((swift_dynamicCast(&v95, &v96, (char *)&type metadata for Any + 8, &type metadata for String, 6) & 1) != 0)
          {
            v61 = sub_10008A038(v95);
            if (v61 != 6)
            {
              v62 = sub_100089CC8(v61);
              v63 = swift_allocObject(&unk_1000DE020, 40, 7);
              *(_BYTE *)(v63 + 16) = v22;
              *(_QWORD *)(v63 + 24) = v34;
              *(_QWORD *)(v63 + 32) = v35;
              v64 = v34;
              swift_bridgeObjectRetain(v35);
              sub_10006F9B0((uint64_t)v62, (uint64_t)sub_10003E7AC, v63, v22);
              swift_bridgeObjectRelease(v62);
              swift_release(v63);

LABEL_27:
              _s6Health23OpenSleepScheduleIntentVwxx_0(v98);
              goto LABEL_17;
            }
          }
        }
        else
        {
          sub_1000114C0((uint64_t)&v96, (uint64_t)&qword_1000EDBD0, (uint64_t)&type metadata for Any + 8, (uint64_t (*)(_QWORD, uint64_t, uint64_t, void *))sub_1000138C8);
        }
        sub_100006D10(0, (unint64_t *)&qword_1000ED910, OS_dispatch_queue_ptr);
        v71 = (void *)static OS_dispatch_queue.main.getter();
        static DispatchTime.now()();
        + infix(_:_:)(v15, 4.0);
        v83 = *(void (**)(char *, uint64_t))(v12 + 8);
        v83(v15, v90);
        v72 = swift_allocObject(&unk_1000DDFD0, 40, 7);
        *(_BYTE *)(v72 + 16) = v22;
        *(_QWORD *)(v72 + 24) = v34;
        *(_QWORD *)(v72 + 32) = v35;
        v93 = sub_10003E760;
        v94 = v72;
        *(_QWORD *)&aBlock = _NSConcreteStackBlock;
        *((_QWORD *)&aBlock + 1) = 1107296256;
        *(_QWORD *)&v92 = sub_100006988;
        *((_QWORD *)&v92 + 1) = &unk_1000DDFE8;
        v73 = _Block_copy(&aBlock);
        v74 = v94;
        v75 = v34;
        swift_bridgeObjectRetain(v35);
        v76 = swift_release(v74);
        static DispatchQoS.unspecified.getter(v76);
        *(_QWORD *)&aBlock = _swiftEmptyArrayStorage;
        v77 = sub_100013198((unint64_t *)&qword_1000EDBE0, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
        sub_1000076D8(0, (unint64_t *)&qword_1000ED920, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Array);
        v79 = v78;
        v80 = sub_100013C8C();
        v81 = v88;
        v82 = v85;
        dispatch thunk of SetAlgebra.init<A>(_:)(&aBlock, v79, v80, v85, v77);
        OS_dispatch_queue.asyncAfter(deadline:qos:flags:execute:)(v17, v11, v81, v73);

        _Block_release(v73);
        (*(void (**)(char *, uint64_t))(v84 + 8))(v81, v82);
        (*(void (**)(char *, uint64_t))(v86 + 8))(v11, v87);
        v83(v17, v90);
        goto LABEL_27;
      }
      v65 = sub_10007C098((uint64_t)_swiftEmptyArrayStorage);
      sub_100038C48(v22);
      v67 = v66;
      v68 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(v67);
      v69 = String._bridgeToObjectiveC()();
      v70 = Dictionary._bridgeToObjectiveC()().super.isa;
      objc_msgSend(a1, "failedTest:withFailure:withResults:", v68, v69, v70);
      swift_bridgeObjectRelease(v65);

      goto LABEL_27;
    }
  }
  else
  {
    v93 = 0;
    v92 = 0u;
    aBlock = 0u;
  }
  sub_10003E714((uint64_t)&aBlock, &qword_1000EDBC0, (uint64_t)&qword_1000EDBC8, (uint64_t)&protocol descriptor for PPTScrollViewProviding);
  *(_QWORD *)&aBlock = 0;
  *((_QWORD *)&aBlock + 1) = 0xE000000000000000;
  _StringGuts.grow(_:)(34);
  swift_bridgeObjectRelease(*((_QWORD *)&aBlock + 1));
  *(_QWORD *)&aBlock = 0xD000000000000020;
  *((_QWORD *)&aBlock + 1) = 0x80000001000B9BA0;
  v98[0] = (unint64_t)UINavigationController.rootViewController()();
  sub_10003E6C0(0, (unint64_t *)&unk_1000EDBB0, (uint64_t)&qword_1000F0B50, (uint64_t)UIViewController_ptr, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_100006D10);
  v45._countAndFlagsBits = String.init<A>(describing:)(v98, v44);
  v46 = v45._object;
  String.append(_:)(v45);
  swift_bridgeObjectRelease(v46);
  v47 = *((_QWORD *)&aBlock + 1);
  v48 = sub_10007C098((uint64_t)_swiftEmptyArrayStorage);
  sub_100038C48(v22);
  v50 = v49;
  v51 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v50);
  v52 = String._bridgeToObjectiveC()();
  v53.super.isa = Dictionary._bridgeToObjectiveC()().super.isa;
  objc_msgSend(a1, "failedTest:withFailure:withResults:", v51, v52, v53.super.isa);

LABEL_16:
  swift_bridgeObjectRelease(v47);
  swift_bridgeObjectRelease(v48);

LABEL_17:
  _s6Health23OpenSleepScheduleIntentVwxx_0(v101);
}

uint64_t sub_10003A794(void *a1, uint64_t a2, char a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v6 = (int)sub_10003DB54(3u, a2);
  v7 = (int)sub_10003DB54(4u, a2);
  v8 = (int)sub_10003DB54(5u, a2);
  setenv("MEASURE_CHART_STARTUP_TIME", "true", 1);
  v9 = swift_allocObject(&unk_1000DE1D8, 88, 7);
  *(_BYTE *)(v9 + 16) = a3;
  *(_QWORD *)(v9 + 24) = v7;
  *(_BYTE *)(v9 + 32) = 0;
  *(_QWORD *)(v9 + 40) = v8;
  *(_BYTE *)(v9 + 48) = 0;
  *(_QWORD *)(v9 + 56) = a1;
  *(_QWORD *)(v9 + 64) = 0xD00000000000001ALL;
  *(_QWORD *)(v9 + 72) = 0x80000001000B9CF0;
  *(_QWORD *)(v9 + 80) = v6;
  sub_10007087C((uint64_t)a1, v6, 0, (void (*)(_QWORD))sub_10003EE0C, v9);
  return swift_release(v9);
}

uint64_t sub_10003A87C(unsigned __int8 *a1, unsigned __int8 *a2)
{
  unsigned __int8 v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  char v10;

  v2 = *a2;
  v3 = sub_100038C48(*a1);
  v5 = v4;
  v6 = sub_100038C48(v2);
  if (v3 == v6 && v5 == v7)
  {
    v10 = 1;
    v9 = v5;
  }
  else
  {
    v9 = v7;
    v10 = _stringCompareWithSmolCheck(_:_:expecting:)(v3, v5, v6, v7, 0);
  }
  swift_bridgeObjectRelease(v5);
  swift_bridgeObjectRelease(v9);
  return v10 & 1;
}

Swift::Int sub_10003A904()
{
  unsigned __int8 *v0;
  unsigned __int8 v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD v6[9];

  v1 = *v0;
  Hasher.init(_seed:)(v6, 0);
  v2 = sub_100038C48(v1);
  v4 = v3;
  String.hash(into:)(v6, v2, v3);
  swift_bridgeObjectRelease(v4);
  return Hasher._finalize()();
}

uint64_t sub_10003A964(uint64_t a1)
{
  unsigned __int8 *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = sub_100038C48(*v1);
  v5 = v4;
  String.hash(into:)(a1, v3, v4);
  return swift_bridgeObjectRelease(v5);
}

Swift::Int sub_10003A9A4(uint64_t a1)
{
  unsigned __int8 *v1;
  unsigned __int8 v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD v7[9];

  v2 = *v1;
  Hasher.init(_seed:)(v7, a1);
  v3 = sub_100038C48(v2);
  v5 = v4;
  String.hash(into:)(v7, v3, v4);
  swift_bridgeObjectRelease(v5);
  return Hasher._finalize()();
}

uint64_t sub_10003AA00@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = sub_10003D308(*a1, a1[1]);
  *a2 = result;
  return result;
}

uint64_t sub_10003AA2C@<X0>(uint64_t *a1@<X8>)
{
  unsigned __int8 *v1;
  uint64_t result;
  uint64_t v4;

  result = sub_100038C48(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

void sub_10003AA54(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  char *v4;

  sub_10003DEF0(a1, a4, *v4);
}

uint64_t sub_10003AA60(uint64_t a1, uint64_t a2, int a3, void *a4, uint64_t a5)
{
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  id v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  void *v30;
  uint64_t v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  void (*v36)(char *, uint64_t);
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD aBlock[5];
  uint64_t v41;

  v34 = a5;
  v33 = a3;
  v32 = a1;
  v7 = type metadata accessor for DispatchWorkItemFlags(0);
  v39 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v9 = (char *)&v32 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for DispatchQoS(0);
  v37 = *(_QWORD *)(v10 - 8);
  v38 = v10;
  __chkstk_darwin(v10);
  v12 = (char *)&v32 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for DispatchTime(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = __chkstk_darwin(v13);
  v17 = (char *)&v32 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  v19 = (char *)&v32 - v18;
  sub_100006D10(0, (unint64_t *)&qword_1000ED910, OS_dispatch_queue_ptr);
  v35 = static OS_dispatch_queue.main.getter();
  static DispatchTime.now()();
  + infix(_:_:)(v17, 3.0);
  v36 = *(void (**)(char *, uint64_t))(v14 + 8);
  v36(v17, v13);
  v20 = swift_allocObject(&unk_1000DE048, 56, 7);
  *(_QWORD *)(v20 + 16) = v32;
  *(_QWORD *)(v20 + 24) = a2;
  *(_BYTE *)(v20 + 32) = v33;
  v21 = v34;
  *(_QWORD *)(v20 + 40) = a4;
  *(_QWORD *)(v20 + 48) = v21;
  aBlock[4] = sub_10003E7EC;
  v41 = v20;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100006988;
  aBlock[3] = &unk_1000DE060;
  v22 = _Block_copy(aBlock);
  v23 = v41;
  swift_retain(a2);
  v24 = a4;
  swift_bridgeObjectRetain(v21);
  v25 = swift_release(v23);
  static DispatchQoS.unspecified.getter(v25);
  aBlock[0] = _swiftEmptyArrayStorage;
  v26 = sub_100013198((unint64_t *)&qword_1000EDBE0, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  sub_1000076D8(0, (unint64_t *)&qword_1000ED920, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Array);
  v28 = v27;
  v29 = sub_100013C8C();
  dispatch thunk of SetAlgebra.init<A>(_:)(aBlock, v28, v29, v7, v26);
  v30 = (void *)v35;
  OS_dispatch_queue.asyncAfter(deadline:qos:flags:execute:)(v19, v12, v9, v22);
  _Block_release(v22);

  (*(void (**)(char *, uint64_t))(v39 + 8))(v9, v7);
  (*(void (**)(char *, uint64_t))(v37 + 8))(v12, v38);
  return ((uint64_t (*)(char *, uint64_t))v36)(v19, v13);
}

void sub_10003AD30(void (*a1)(void), uint64_t a2, unsigned __int8 a3, void *a4, uint64_t a5)
{
  char v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  id v12;
  NSString v13;
  uint64_t v14;
  NSString v15;

  a1();
  v8 = sub_10003E7FC(6, a5);
  sub_100038C48(a3);
  v10 = v9;
  if ((v8 & 1) != 0)
  {
    v11 = objc_allocWithZone((Class)RPTScrollViewTestParameters);
    v12 = a4;
    v13 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v10);
    v15 = objc_msgSend(v11, "initWithTestName:scrollView:completionHandler:", v13, v12, 0);

    objc_msgSend((id)objc_opt_self(RPTTestRunner), "runTestWithParameters:", v15);
  }
  else
  {
    v15 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v10);
    v14 = sub_10003DB54(0, a5);
    objc_msgSend(a4, "_performScrollTest:iterations:delta:", v15, v14, sub_10003DB54(1u, a5));
  }

}

void sub_10003AE64(unsigned __int8 a1, void *a2, uint64_t a3)
{
  char v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  id v10;
  NSString v11;
  uint64_t v12;
  NSString v13;

  v6 = sub_10003E7FC(6, a3);
  sub_100038C48(a1);
  v8 = v7;
  if ((v6 & 1) != 0)
  {
    v9 = objc_allocWithZone((Class)RPTScrollViewTestParameters);
    v10 = a2;
    v11 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v8);
    v13 = objc_msgSend(v9, "initWithTestName:scrollView:completionHandler:", v11, v10, 0);

    objc_msgSend((id)objc_opt_self(RPTTestRunner), "runTestWithParameters:", v13);
  }
  else
  {
    v13 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v8);
    v12 = sub_10003DB54(0, a3);
    objc_msgSend(a2, "_performScrollTest:iterations:delta:", v13, v12, sub_10003DB54(1u, a3));
  }

}

void sub_10003AF90(unsigned __int8 a1, void *a2, void *a3, uint64_t a4, uint64_t a5)
{
  id v8;
  void *v9;
  id v10;
  void *v11;
  id v12;
  Swift::String v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  NSString v19;
  NSString v20;
  Class isa;
  id v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;

  v8 = sub_100071904(a2);
  if (v8)
  {
    v9 = v8;
    v10 = objc_msgSend(v8, "chartController");
    if (v10)
    {
      v11 = v10;
      objc_msgSend(v9, "_showAllFilters");
      v12 = objc_msgSend(v11, "primaryGraphViewController");
      v22 = objc_msgSend(v12, "graphView");

      sub_10003E958(a3, v22, a1);
      return;
    }

  }
  v24 = 0;
  v25 = 0xE000000000000000;
  _StringGuts.grow(_:)(47);
  v13._object = (void *)0x80000001000B9BF0;
  v13._countAndFlagsBits = 0xD00000000000002DLL;
  String.append(_:)(v13);
  v23 = a5;
  type metadata accessor for _HKDataTypeCode(0);
  _print_unlocked<A, B>(_:_:)(&v23, &v24, v14, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
  v15 = v25;
  v16 = sub_10007C098((uint64_t)_swiftEmptyArrayStorage);
  sub_100038C48(a1);
  v18 = v17;
  v19 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v18);
  v20 = String._bridgeToObjectiveC()();
  isa = Dictionary._bridgeToObjectiveC()().super.isa;
  objc_msgSend(a3, "failedTest:withFailure:withResults:", v19, v20, isa);
  swift_bridgeObjectRelease(v15);
  swift_bridgeObjectRelease(v16);

}

uint64_t sub_10003B180(void *a1, int a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  id v28;
  id v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  void *v35;
  uint64_t v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  void (*v45)(char *, uint64_t);
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD aBlock[5];
  uint64_t v50;

  v44 = a8;
  v41 = a5;
  v42 = a7;
  v38 = a6;
  v40 = a4;
  v39 = a2;
  v10 = type metadata accessor for DispatchWorkItemFlags(0);
  v48 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v12 = (char *)&v37 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for DispatchQoS(0);
  v46 = *(_QWORD *)(v13 - 8);
  v47 = v13;
  __chkstk_darwin(v13);
  v15 = (char *)&v37 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for DispatchTime(0);
  v17 = *(_QWORD *)(v16 - 8);
  v18 = __chkstk_darwin(v16);
  v20 = (char *)&v37 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18);
  v22 = (char *)&v37 - v21;
  sub_100006D10(0, (unint64_t *)&qword_1000ED910, OS_dispatch_queue_ptr);
  v43 = static OS_dispatch_queue.main.getter();
  static DispatchTime.now()();
  + infix(_:_:)(v20, 4.0);
  v45 = *(void (**)(char *, uint64_t))(v17 + 8);
  v45(v20, v16);
  v23 = swift_allocObject(v38, 56, 7);
  *(_BYTE *)(v23 + 16) = v39;
  *(_QWORD *)(v23 + 24) = a1;
  *(_QWORD *)(v23 + 32) = a3;
  v25 = v40;
  v24 = v41;
  *(_QWORD *)(v23 + 40) = v40;
  *(_QWORD *)(v23 + 48) = v24;
  aBlock[4] = v42;
  v50 = v23;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100006988;
  aBlock[3] = v44;
  v26 = _Block_copy(aBlock);
  v27 = v50;
  v28 = a1;
  v29 = a3;
  swift_bridgeObjectRetain(v25);
  v30 = swift_release(v27);
  static DispatchQoS.unspecified.getter(v30);
  aBlock[0] = _swiftEmptyArrayStorage;
  v31 = sub_100013198((unint64_t *)&qword_1000EDBE0, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  sub_1000076D8(0, (unint64_t *)&qword_1000ED920, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Array);
  v33 = v32;
  v34 = sub_100013C8C();
  dispatch thunk of SetAlgebra.init<A>(_:)(aBlock, v33, v34, v10, v31);
  v35 = (void *)v43;
  OS_dispatch_queue.asyncAfter(deadline:qos:flags:execute:)(v22, v15, v12, v26);
  _Block_release(v26);

  (*(void (**)(char *, uint64_t))(v48 + 8))(v12, v10);
  (*(void (**)(char *, uint64_t))(v46 + 8))(v15, v47);
  return ((uint64_t (*)(char *, uint64_t))v45)(v22, v16);
}

void sub_10003B444(unsigned __int8 a1, void *a2, void *a3, uint64_t a4, uint64_t a5)
{
  id v9;
  void *v10;
  id v11;
  Swift::String v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  NSString v18;
  NSString v19;
  Class isa;
  id v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;

  v9 = sub_100071B44(a2);
  if (v9)
  {
    v10 = v9;
    v11 = objc_msgSend(v9, "primaryGraphViewController");
    v21 = objc_msgSend(v11, "graphView");

    sub_10003B604(a3, v21, a4, a1);
  }
  else
  {
    v23 = 0;
    v24 = 0xE000000000000000;
    _StringGuts.grow(_:)(47);
    v12._object = (void *)0x80000001000B9BF0;
    v12._countAndFlagsBits = 0xD00000000000002DLL;
    String.append(_:)(v12);
    v22 = a5;
    type metadata accessor for _HKDataTypeCode(0);
    _print_unlocked<A, B>(_:_:)(&v22, &v23, v13, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
    v14 = v24;
    v15 = sub_10007C098((uint64_t)_swiftEmptyArrayStorage);
    sub_100038C48(a1);
    v17 = v16;
    v18 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v17);
    v19 = String._bridgeToObjectiveC()();
    isa = Dictionary._bridgeToObjectiveC()().super.isa;
    objc_msgSend(a3, "failedTest:withFailure:withResults:", v18, v19, isa);
    swift_bridgeObjectRelease(v14);
    swift_bridgeObjectRelease(v15);

  }
}

void sub_10003B604(void *a1, void *a2, uint64_t a3, unsigned __int8 a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  NSString v13;

  if ((sub_10003E7FC(6, a3) & 1) != 0
    && objc_msgSend((id)objc_opt_self(RPTTestRunner), "isRecapAvailable"))
  {
    sub_10003E958(a1, a2, a4);
  }
  else
  {
    v8 = sub_10003DB54(0, a3);
    v9 = sub_10003DB54(1u, a3);
    v10 = sub_10003DB54(2u, a3);
    sub_100038C48(a4);
    v12 = v11;
    v13 = String._bridgeToObjectiveC()();
    objc_msgSend(a2, "testScrollPerformanceWithTestName:iterations:delta:length:", v13, v8, v9, v10, swift_bridgeObjectRelease(v12).n128_f64[0]);

  }
}

void sub_10003B704(uint64_t a1, void *a2, unsigned __int8 a3)
{
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  NSString v8;
  Class isa;

  v5 = sub_10007C098((uint64_t)_swiftEmptyArrayStorage);
  sub_100038C48(a3);
  v7 = v6;
  v8 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v7);
  isa = Dictionary._bridgeToObjectiveC()().super.isa;
  objc_msgSend(a2, "finishedTest:extraResults:", v8, isa);
  swift_bridgeObjectRelease(v5);

}

id sub_10003B7B0(uint64_t a1)
{
  return objc_msgSend(objc_allocWithZone((Class)type metadata accessor for InternalFeedItemListViewController(0)), "initWithCoder:", a1);
}

void sub_10003B7E4(unsigned __int8 a1, uint64_t a2, void *a3, void *a4)
{
  uint64_t v8;
  uint64_t v9;
  char v10;
  char v11;
  objc_class *v12;
  uint64_t v13;
  uint64_t v14;
  id v15;
  NSString v16;
  NSString v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  NSString v21;
  Class isa;

  v8 = sub_10003DB54(0, a2);
  v9 = sub_10003DB54(1u, a2);
  v10 = sub_10003E7FC(6, a2);
  if (a3
    && (v11 = v10,
        (v12 = (objc_class *)objc_msgSend(a3, "contentScrollViewForEdge:", 15)) != 0))
  {
    isa = v12;
    sub_100038C48(a1);
    v14 = v13;
    if ((v11 & 1) != 0)
    {
      v15 = objc_allocWithZone((Class)RPTScrollViewTestParameters);
      isa = isa;
      v16 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(v14);
      v17 = objc_msgSend(v15, "initWithTestName:scrollView:completionHandler:", v16, isa, 0);

      objc_msgSend((id)objc_opt_self(RPTTestRunner), "runTestWithParameters:", v17);
    }
    else
    {
      v17 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(v14);
      -[objc_class _performScrollTest:iterations:delta:](isa, "_performScrollTest:iterations:delta:", v17, v8, v9);
    }
  }
  else
  {
    v18 = sub_10007C098((uint64_t)_swiftEmptyArrayStorage);
    sub_100038C48(a1);
    v20 = v19;
    v21 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v20);
    v17 = String._bridgeToObjectiveC()();
    isa = Dictionary._bridgeToObjectiveC()().super.isa;
    objc_msgSend(a4, "failedTest:withFailure:withResults:", v21, v17);
    swift_bridgeObjectRelease(v18);

  }
}

uint64_t sub_10003B9E8(void *a1, void *a2, unsigned __int8 a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  id v14;
  NSString v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  _QWORD v20[5];
  uint64_t v21;

  v10 = swift_allocObject(&unk_1000DE250, 56, 7);
  *(_QWORD *)(v10 + 16) = a2;
  *(_BYTE *)(v10 + 24) = a3;
  *(_QWORD *)(v10 + 32) = a1;
  *(_QWORD *)(v10 + 40) = a4;
  *(_QWORD *)(v10 + 48) = a5;
  sub_100038C48(a3);
  v12 = v11;
  v13 = a2;
  v14 = a1;
  swift_bridgeObjectRetain(a5);
  v15 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v12);
  objc_msgSend(v13, "startedTest:", v15);

  v16 = swift_allocObject(&unk_1000DE278, 32, 7);
  *(_QWORD *)(v16 + 16) = sub_10003EEF8;
  *(_QWORD *)(v16 + 24) = v10;
  v20[4] = sub_10003EF0C;
  v21 = v16;
  v20[0] = _NSConcreteStackBlock;
  v20[1] = 1107296256;
  v20[2] = sub_10003BD40;
  v20[3] = &unk_1000DE290;
  v17 = _Block_copy(v20);
  v18 = v21;
  swift_retain(v10);
  swift_release(v18);
  objc_msgSend(v14, "reportStartupTime:", v17);
  _Block_release(v17);
  return swift_release(v10);
}

uint64_t sub_10003BB50(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, unsigned __int8 a5, void *a6, uint64_t a7, uint64_t a8)
{
  uint64_t inited;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  NSString v18;
  Class isa;
  uint64_t v20;
  unint64_t v22;
  unint64_t v23;

  sub_1000076D8(0, &qword_1000EDC08, (uint64_t (*)(uint64_t))sub_10003EF2C, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for _ContiguousArrayStorage);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1000B1580;
  v22 = 0x6E65527472616863;
  v23 = 0xEB00000000726564;
  AnyHashable.init<A>(_:)((_QWORD *)(inited + 32), &v22, &type metadata for String, &protocol witness table for String);
  *(_QWORD *)(inited + 96) = &type metadata for Double;
  *(double *)(inited + 72) = (double)a3 * 0.001;
  v22 = 0xD000000000000010;
  v23 = 0x80000001000B9D60;
  AnyHashable.init<A>(_:)((_QWORD *)(inited + 104), &v22, &type metadata for String, &protocol witness table for String);
  *(_QWORD *)(inited + 168) = &type metadata for String;
  *(_QWORD *)(inited + 144) = 29549;
  *(_QWORD *)(inited + 152) = 0xE200000000000000;
  v15 = sub_10007C098(inited);
  sub_100038C48(a5);
  v17 = v16;
  v18 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v17);
  isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v15);
  objc_msgSend(a4, "finishedTest:waitForCommit:extraResults:", v18, 0, isa);

  objc_msgSend(a6, "reportStartupTime:", 0);
  v20 = String.utf8CString.getter(a7, a8);
  setenv((const char *)(v20 + 32), "", 1);
  return swift_release(v20);
}

uint64_t sub_10003BD40(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  void (*v5)(uint64_t, uint64_t, uint64_t);
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v5 = *(void (**)(uint64_t, uint64_t, uint64_t))(a1 + 32);
  v4 = *(_QWORD *)(a1 + 40);
  v6 = static String._unconditionallyBridgeFromObjectiveC(_:)(a2);
  v8 = v7;
  swift_retain(v4);
  v5(v6, v8, a3);
  swift_release(v4);
  return swift_bridgeObjectRelease(v8);
}

void sub_10003BDA4(void *a1, int a2, uint64_t a3, char a4, uint64_t a5, char a6, void *a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  char *v25;
  id v26;
  char v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  id v32;
  uint64_t v33;
  void *v34;
  uint64_t v35;
  id v36;
  id v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  char *v44;
  uint64_t v45;
  void *v46;
  uint64_t v47;
  Swift::String v48;
  uint64_t v49;
  Swift::String v50;
  unint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  NSString v55;
  NSString v56;
  Class isa;
  uint64_t v58;
  void (*v59)(char *, uint64_t);
  uint64_t v60;
  char *v61;
  uint64_t v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  id v69;
  int v70;
  void *v71;
  void **aBlock;
  unint64_t v73;
  uint64_t (*v74)(uint64_t);
  void *v75;
  id (*v76)();
  uint64_t v77;
  uint64_t v78;

  v71 = a7;
  v70 = a2;
  v68 = a10;
  v16 = type metadata accessor for DispatchWorkItemFlags(0);
  v66 = *(_QWORD *)(v16 - 8);
  v67 = v16;
  __chkstk_darwin(v16);
  v63 = (char *)&v58 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = type metadata accessor for DispatchQoS(0);
  v64 = *(_QWORD *)(v18 - 8);
  v65 = v18;
  __chkstk_darwin(v18);
  v61 = (char *)&v58 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v62 = type metadata accessor for DispatchTime(0);
  v20 = *(_QWORD *)(v62 - 8);
  v21 = __chkstk_darwin(v62);
  v23 = (char *)&v58 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v21);
  v25 = (char *)&v58 - v24;
  v26 = sub_100071B44(a1);
  if (v26)
  {
    v60 = a8;
    v68 = a9;
    v69 = v26;
    v27 = v70;
    v28 = v71;
    if ((a4 & 1) != 0 || (a6 & 1) != 0 || a3 == a5)
    {
      sub_10003B9E8(v26, v71, v70, v60, v68);

    }
    else
    {
      objc_msgSend(v26, "selectTimeScope:", a3);
      sub_100006D10(0, (unint64_t *)&qword_1000ED910, OS_dispatch_queue_ptr);
      v58 = static OS_dispatch_queue.main.getter();
      static DispatchTime.now()();
      + infix(_:_:)(v23, 4.0);
      v59 = *(void (**)(char *, uint64_t))(v20 + 8);
      v29 = v62;
      v59(v23, v62);
      v30 = swift_allocObject(&unk_1000DE200, 64, 7);
      v31 = v28;
      *(_QWORD *)(v30 + 16) = v28;
      *(_BYTE *)(v30 + 24) = v27;
      v33 = v68;
      v32 = v69;
      *(_QWORD *)(v30 + 32) = v60;
      *(_QWORD *)(v30 + 40) = v33;
      *(_QWORD *)(v30 + 48) = v32;
      *(_QWORD *)(v30 + 56) = a5;
      v76 = sub_10003EE7C;
      v77 = v30;
      aBlock = _NSConcreteStackBlock;
      v73 = 1107296256;
      v74 = sub_100006988;
      v75 = &unk_1000DE218;
      v34 = _Block_copy(&aBlock);
      v35 = v77;
      v36 = v31;
      swift_bridgeObjectRetain(v33);
      v37 = v69;
      v38 = swift_release(v35);
      v39 = v61;
      static DispatchQoS.unspecified.getter(v38);
      aBlock = (void **)_swiftEmptyArrayStorage;
      v40 = sub_100013198((unint64_t *)&qword_1000EDBE0, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
      sub_1000076D8(0, (unint64_t *)&qword_1000ED920, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Array);
      v42 = v41;
      v43 = sub_100013C8C();
      v44 = v63;
      v45 = v67;
      dispatch thunk of SetAlgebra.init<A>(_:)(&aBlock, v42, v43, v67, v40);
      v46 = (void *)v58;
      OS_dispatch_queue.asyncAfter(deadline:qos:flags:execute:)(v25, v39, v44, v34);
      _Block_release(v34);

      (*(void (**)(char *, uint64_t))(v66 + 8))(v44, v45);
      (*(void (**)(char *, uint64_t))(v64 + 8))(v39, v65);
      v59(v25, v29);
    }
  }
  else
  {
    v47 = String.utf8CString.getter(a8, a9);
    setenv((const char *)(v47 + 32), "", 1);
    swift_release(v47);
    aBlock = 0;
    v73 = 0xE000000000000000;
    _StringGuts.grow(_:)(48);
    v48._object = (void *)0x80000001000B9D10;
    v48._countAndFlagsBits = 0xD00000000000002DLL;
    String.append(_:)(v48);
    v78 = v68;
    type metadata accessor for _HKDataTypeCode(0);
    _print_unlocked<A, B>(_:_:)(&v78, &aBlock, v49, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
    v50._countAndFlagsBits = 46;
    v50._object = (void *)0xE100000000000000;
    String.append(_:)(v50);
    v51 = v73;
    v52 = sub_10007C098((uint64_t)_swiftEmptyArrayStorage);
    sub_100038C48(v70);
    v54 = v53;
    v55 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v54);
    v56 = String._bridgeToObjectiveC()();
    isa = Dictionary._bridgeToObjectiveC()().super.isa;
    objc_msgSend(v71, "failedTest:withFailure:withResults:", v55, v56, isa);
    swift_bridgeObjectRelease(v51);
    swift_bridgeObjectRelease(v52);

  }
}

void sub_10003C260(void *a1, unsigned __int8 a2, uint64_t a3, void *a4)
{
  id v7;
  NSString v8;
  uint64_t v9;
  uint64_t v10;
  NSString v11;
  uint64_t v12;
  uint64_t v13;
  double v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  Class v21;
  Class isa;

  if (!a1)
  {
    v15 = sub_10007C098((uint64_t)_swiftEmptyArrayStorage);
    sub_100038C48(a2);
    v17 = v16;
    v8 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v17);
    v11 = String._bridgeToObjectiveC()();
    isa = Dictionary._bridgeToObjectiveC()().super.isa;
    objc_msgSend(a4, "failedTest:withFailure:withResults:", v8, v11);
    swift_bridgeObjectRelease(v15);
    goto LABEL_9;
  }
  isa = a1;
  v7 = -[objc_class tableView](isa, "tableView");
  if (!v7)
  {
    v18 = sub_10007C098((uint64_t)_swiftEmptyArrayStorage);
    sub_100038C48(a2);
    v20 = v19;
    v8 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v20);
    v11 = String._bridgeToObjectiveC()();
    v21 = Dictionary._bridgeToObjectiveC()().super.isa;
    objc_msgSend(a4, "failedTest:withFailure:withResults:", v8, v11, v21);
    swift_bridgeObjectRelease(v18);

    isa = v21;
    goto LABEL_9;
  }
  v8 = v7;
  sub_100038C48(a2);
  v10 = v9;
  v11 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v10);
  v12 = sub_10003DB54(0, a3);
  v13 = sub_10003DB54(1u, a3);
  objc_msgSend(v8, "contentSize");
  if ((~*(_QWORD *)&v14 & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_11;
  }
  if (v14 <= -2147483650.0)
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  if (v14 < 2147483650.0)
  {
    objc_msgSend(v8, "_performScrollTest:iterations:delta:length:", v11, v12, v13, (int)v14);
LABEL_9:

    return;
  }
LABEL_12:
  __break(1u);
}

void sub_10003C4C4(void *a1, unsigned __int8 a2)
{
  uint64_t v3;
  uint64_t v4;
  NSString v5;

  sub_100038C48(a2);
  v4 = v3;
  v5 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v4);
  objc_msgSend(a1, "finishedTest:waitForCommit:extraResults:", v5, 1, 0);

}

void sub_10003C524(void *a1, void *a2, unsigned __int8 a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  void *v10;
  NSString v11;
  id v12;
  NSString v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  NSString v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  id isa;

  if (!a1
    || (v8 = type metadata accessor for InternalFeedItemListViewController(0),
        (v9 = swift_dynamicCastClass(a1, v8)) == 0))
  {
    v19 = sub_10007C098((uint64_t)_swiftEmptyArrayStorage);
    sub_100038C48(a3);
    v21 = v20;
    v11 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v21);
    v13 = String._bridgeToObjectiveC()();
    isa = Dictionary._bridgeToObjectiveC()().super.isa;
    objc_msgSend(a2, "failedTest:withFailure:withResults:", v11, v13);
    swift_bridgeObjectRelease(v19);
LABEL_8:

    return;
  }
  v10 = (void *)v9;
  v11 = a1;
  v12 = objc_msgSend(v10, "collectionView");
  if (v12)
  {
    v13 = v12;
    v14 = sub_10003E7FC(6, a4);
    sub_100038C48(a3);
    v16 = v15;
    if ((v14 & 1) != 0)
    {
      v17 = objc_allocWithZone((Class)RPTScrollViewTestParameters);
      v13 = v13;
      v18 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(v16);
      isa = objc_msgSend(v17, "initWithTestName:scrollView:completionHandler:", v18, v13, 0);

      objc_msgSend((id)objc_opt_self(RPTTestRunner), "runTestWithParameters:", isa);
    }
    else
    {
      isa = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(v16);
      v22 = sub_10003DB54(0, a4);
      objc_msgSend(v13, "_performScrollTest:iterations:delta:", isa, v22, sub_10003DB54(1u, a4));
    }
    goto LABEL_8;
  }
  __break(1u);
}

uint64_t sub_10003C744(void *a1, char a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  uint8_t *v18;
  char *v19;
  uint64_t v20;
  void *v21;
  char v22;
  uint8_t *v23;
  uint8_t *v24;
  void *v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  id v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD aBlock[5];
  uint64_t v41;

  v4 = type metadata accessor for DispatchWorkItemFlags(0);
  v39 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v6 = (char *)&v36 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for DispatchQoS(0);
  v37 = *(_QWORD *)(v7 - 8);
  v38 = v7;
  __chkstk_darwin(v7);
  v9 = (char *)&v36 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for Logger(0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = __chkstk_darwin(v10);
  v14 = (char *)&v36 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = static Logger.general.getter(v12);
  v16 = Logger.logObject.getter(v15);
  v17 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v16, v17))
  {
    v18 = (uint8_t *)swift_slowAlloc(2, -1);
    v36 = v9;
    v19 = v6;
    v20 = v4;
    v21 = a1;
    v22 = a2;
    v23 = v18;
    *(_WORD *)v18 = 0;
    _os_log_impl((void *)&_mh_execute_header, v16, v17, "Foreground generation idle notification received", v18, 2u);
    v24 = v23;
    a2 = v22;
    a1 = v21;
    v4 = v20;
    v6 = v19;
    v9 = v36;
    swift_slowDealloc(v24, -1, -1);
  }

  (*(void (**)(char *, uint64_t))(v11 + 8))(v14, v10);
  sub_100006D10(0, (unint64_t *)&qword_1000ED910, OS_dispatch_queue_ptr);
  v25 = (void *)static OS_dispatch_queue.main.getter();
  v26 = swift_allocObject(&unk_1000DE368, 25, 7);
  *(_QWORD *)(v26 + 16) = a1;
  *(_BYTE *)(v26 + 24) = a2;
  aBlock[4] = sub_10003F02C;
  v41 = v26;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100006988;
  aBlock[3] = &unk_1000DE380;
  v27 = _Block_copy(aBlock);
  v28 = v41;
  v29 = a1;
  v30 = swift_release(v28);
  static DispatchQoS.unspecified.getter(v30);
  aBlock[0] = _swiftEmptyArrayStorage;
  v31 = sub_100013198((unint64_t *)&qword_1000EDBE0, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  sub_1000076D8(0, (unint64_t *)&qword_1000ED920, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Array);
  v33 = v32;
  v34 = sub_100013C8C();
  dispatch thunk of SetAlgebra.init<A>(_:)(aBlock, v33, v34, v4, v31);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v9, v6, v27);
  _Block_release(v27);

  (*(void (**)(char *, uint64_t))(v39 + 8))(v6, v4);
  return (*(uint64_t (**)(char *, uint64_t))(v37 + 8))(v9, v38);
}

void sub_10003CA3C(void *a1, unsigned __int8 a2)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  NSString v7;
  Class isa;

  v4 = sub_10007C098((uint64_t)_swiftEmptyArrayStorage);
  sub_100038C48(a2);
  v6 = v5;
  v7 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v6);
  isa = Dictionary._bridgeToObjectiveC()().super.isa;
  objc_msgSend(a1, "finishedTest:extraResults:", v7, isa);
  swift_bridgeObjectRelease(v4);

}

uint64_t sub_10003CAE8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unsigned __int8 *v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unsigned __int8 *v12;
  uint64_t v14;
  uint64_t v15;

  v14 = a1;
  v15 = a2;
  swift_bridgeObjectRetain(a2);
  v4 = String.init<A>(_:)(&v14, &type metadata for String, &protocol witness table for String, &protocol witness table for String);
  v6 = v4;
  v7 = v5;
  if ((v5 & 0x1000000000000000) == 0)
  {
    if ((v5 & 0x2000000000000000) == 0)
      goto LABEL_3;
LABEL_6:
    v9 = HIBYTE(v7) & 0xF;
    v14 = v6;
    v15 = v7 & 0xFFFFFFFFFFFFFFLL;
    v8 = (unsigned __int8 *)&v14;
    goto LABEL_7;
  }
  v6 = sub_10003CE4C(v4, v5);
  v11 = v10;
  swift_bridgeObjectRelease(v7);
  v7 = v11;
  if ((v11 & 0x2000000000000000) != 0)
    goto LABEL_6;
LABEL_3:
  if ((v6 & 0x1000000000000000) != 0)
  {
    v8 = (unsigned __int8 *)((v7 & 0xFFFFFFFFFFFFFFFLL) + 32);
    v9 = v6 & 0xFFFFFFFFFFFFLL;
  }
  else
  {
    v8 = (unsigned __int8 *)_StringObject.sharedUTF8.getter(v6, v7);
  }
LABEL_7:
  v12 = sub_10003CBCC(v8, v9, a3);
  swift_bridgeObjectRelease(v7);
  return v12 | ((((unint64_t)v12 >> 32) & 1) << 32);
}

unsigned __int8 *sub_10003CBCC(unsigned __int8 *result, uint64_t a2, uint64_t a3)
{
  int v3;
  uint64_t v4;
  unsigned __int8 v5;
  unsigned __int8 v6;
  unsigned __int8 v7;
  unsigned int v8;
  unsigned __int8 *v9;
  unsigned int v10;
  char v11;
  unsigned int v12;
  unsigned __int8 v13;
  uint64_t v14;
  unsigned __int8 v15;
  uint64_t v16;
  unsigned __int8 v17;
  unsigned __int8 v18;
  unsigned __int8 v19;
  unsigned __int8 *v20;
  unsigned int v21;
  char v22;
  uint64_t v23;
  unsigned __int8 v24;
  unsigned __int8 v25;
  unsigned __int8 v26;
  unsigned __int8 v27;
  unsigned int v28;
  unsigned int v29;
  char v30;
  uint64_t v31;
  unsigned __int8 v32;

  v3 = *result;
  if (v3 == 43)
  {
    if (a2 >= 1)
    {
      v16 = a2 - 1;
      if (a2 != 1)
      {
        v17 = a3 + 87;
        if (a3 > 10)
        {
          v18 = a3 + 55;
        }
        else
        {
          v17 = 97;
          v18 = 65;
        }
        if (a3 <= 10)
          v19 = a3 + 48;
        else
          v19 = 58;
        if (result)
        {
          v8 = 0;
          v20 = result + 1;
          do
          {
            v21 = *v20;
            if (v21 < 0x30 || v21 >= v19)
            {
              if (v21 < 0x41 || v21 >= v18)
              {
                v12 = 0;
                v13 = 1;
                if (v21 < 0x61 || v21 >= v17)
                  return (unsigned __int8 *)(v12 | ((unint64_t)v13 << 32));
                v22 = -87;
              }
              else
              {
                v22 = -55;
              }
            }
            else
            {
              v22 = -48;
            }
            v23 = (int)v8 * (uint64_t)(int)a3;
            if (v23 != (int)v23)
              goto LABEL_72;
            v24 = v21 + v22;
            v8 = v23 + v24;
            if (__OFADD__((_DWORD)v23, v24))
              goto LABEL_72;
            ++v20;
            --v16;
          }
          while (v16);
LABEL_48:
          v13 = 0;
          v12 = v8;
          return (unsigned __int8 *)(v12 | ((unint64_t)v13 << 32));
        }
        goto LABEL_71;
      }
LABEL_72:
      v12 = 0;
      v13 = 1;
      return (unsigned __int8 *)(v12 | ((unint64_t)v13 << 32));
    }
  }
  else
  {
    if (v3 != 45)
    {
      if (a2)
      {
        v25 = a3 + 87;
        if (a3 > 10)
        {
          v26 = a3 + 55;
        }
        else
        {
          v25 = 97;
          v26 = 65;
        }
        if (a3 <= 10)
          v27 = a3 + 48;
        else
          v27 = 58;
        if (result)
        {
          v28 = 0;
          do
          {
            v29 = *result;
            if (v29 < 0x30 || v29 >= v27)
            {
              if (v29 < 0x41 || v29 >= v26)
              {
                v12 = 0;
                v13 = 1;
                if (v29 < 0x61 || v29 >= v25)
                  return (unsigned __int8 *)(v12 | ((unint64_t)v13 << 32));
                v30 = -87;
              }
              else
              {
                v30 = -55;
              }
            }
            else
            {
              v30 = -48;
            }
            v31 = (int)v28 * (uint64_t)(int)a3;
            if (v31 != (int)v31)
              goto LABEL_72;
            v32 = v29 + v30;
            v28 = v31 + v32;
            if (__OFADD__((_DWORD)v31, v32))
              goto LABEL_72;
            ++result;
            --a2;
          }
          while (a2);
          v13 = 0;
          v12 = v28;
          return (unsigned __int8 *)(v12 | ((unint64_t)v13 << 32));
        }
        goto LABEL_71;
      }
      goto LABEL_72;
    }
    if (a2 >= 1)
    {
      v4 = a2 - 1;
      if (a2 != 1)
      {
        v5 = a3 + 87;
        if (a3 > 10)
        {
          v6 = a3 + 55;
        }
        else
        {
          v5 = 97;
          v6 = 65;
        }
        if (a3 <= 10)
          v7 = a3 + 48;
        else
          v7 = 58;
        if (result)
        {
          v8 = 0;
          v9 = result + 1;
          while (1)
          {
            v10 = *v9;
            if (v10 < 0x30 || v10 >= v7)
            {
              if (v10 < 0x41 || v10 >= v6)
              {
                v12 = 0;
                v13 = 1;
                if (v10 < 0x61 || v10 >= v5)
                  return (unsigned __int8 *)(v12 | ((unint64_t)v13 << 32));
                v11 = -87;
              }
              else
              {
                v11 = -55;
              }
            }
            else
            {
              v11 = -48;
            }
            v14 = (int)v8 * (uint64_t)(int)a3;
            if (v14 != (int)v14)
              goto LABEL_72;
            v15 = v10 + v11;
            v8 = v14 - v15;
            if (__OFSUB__((_DWORD)v14, v15))
              goto LABEL_72;
            ++v9;
            if (!--v4)
              goto LABEL_48;
          }
        }
LABEL_71:
        v12 = 0;
        v13 = 0;
        return (unsigned __int8 *)(v12 | ((unint64_t)v13 << 32));
      }
      goto LABEL_72;
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_10003CE4C(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;

  v2 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000) == 0)
    v2 = a1;
  v3 = 7;
  if (((a2 >> 60) & ((a1 & 0x800000000000000) == 0)) != 0)
    v3 = 11;
  v4 = String.subscript.getter(15, v3 | (v2 << 16), a1, a2);
  v6 = v5;
  v9 = sub_10003CEC8(v4, v7, v8, v5);
  swift_bridgeObjectRelease(v6);
  return v9;
}

uint64_t sub_10003CEC8(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  unint64_t v5;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD v15[5];

  v5 = a3;
  if ((a4 & 0x1000000000000000) != 0)
  {
    v12 = sub_10003D00C(a1, a2, a3, a4);
    if (v12)
    {
      v9 = v12;
      v8 = (unint64_t)sub_100013030(v12, 0);
      v5 = sub_10003D0F8((unint64_t)v15, v8 + 32, v9, a1, a2, v5, a4);
      v13 = v15[3];
      swift_bridgeObjectRetain(a4);
      swift_bridgeObjectRelease(v13);
      if (v5 != v9)
      {
        __break(1u);
        goto LABEL_11;
      }
    }
    else
    {
      v8 = (unint64_t)_swiftEmptyArrayStorage;
    }
    v14 = static String._uncheckedFromUTF8(_:)(v8 + 32, *(_QWORD *)(v8 + 16));
    swift_release(v8);
    return v14;
  }
  else
  {
    v8 = a1 >> 16;
    v9 = a2 >> 16;
    if ((a4 & 0x2000000000000000) == 0)
    {
      if ((a3 & 0x1000000000000000) != 0)
      {
        v10 = (a4 & 0xFFFFFFFFFFFFFFFLL) + 32;
LABEL_5:
        v10 += v8;
        return static String._uncheckedFromUTF8(_:)(v10, v9 - v8);
      }
LABEL_11:
      v10 = _StringObject.sharedUTF8.getter(v5, a4);
      if (!v10)
        return static String._uncheckedFromUTF8(_:)(v10, v9 - v8);
      goto LABEL_5;
    }
    v15[0] = a3;
    v15[1] = a4 & 0xFFFFFFFFFFFFFFLL;
    return static String._uncheckedFromUTF8(_:)((char *)v15 + v8, v9 - v8);
  }
}

unint64_t sub_10003D00C(unint64_t result, unint64_t a2, unint64_t a3, unint64_t a4)
{
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;

  v7 = result;
  v8 = (a3 >> 59) & 1;
  if ((a4 & 0x1000000000000000) == 0)
    LOBYTE(v8) = 1;
  v9 = 4 << v8;
  if ((result & 0xC) == 4 << v8)
  {
    result = sub_100038398(result, a3, a4);
    v7 = result;
  }
  if ((a2 & 0xC) == v9)
  {
    result = sub_100038398(a2, a3, a4);
    a2 = result;
    if ((a4 & 0x1000000000000000) == 0)
      return (a2 >> 16) - (v7 >> 16);
  }
  else if ((a4 & 0x1000000000000000) == 0)
  {
    return (a2 >> 16) - (v7 >> 16);
  }
  v10 = HIBYTE(a4) & 0xF;
  if ((a4 & 0x2000000000000000) == 0)
    v10 = a3 & 0xFFFFFFFFFFFFLL;
  if (v10 < v7 >> 16)
  {
    __break(1u);
  }
  else if (v10 >= a2 >> 16)
  {
    return String.UTF8View._foreignDistance(from:to:)(v7, a2, a3, a4);
  }
  __break(1u);
  return result;
}

unint64_t sub_10003D0F8(unint64_t result, uint64_t a2, uint64_t a3, unint64_t a4, unint64_t a5, unint64_t a6, unint64_t a7)
{
  _QWORD *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  char v19;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v26;
  unint64_t v27;
  _QWORD v28[2];

  v9 = (_QWORD *)result;
  if (!a2)
    goto LABEL_5;
  if (!a3)
  {
    v12 = a4;
    v11 = 0;
    goto LABEL_33;
  }
  if (a3 < 0)
    goto LABEL_36;
  v10 = a5 >> 14;
  v27 = a4 >> 14;
  if (a4 >> 14 == a5 >> 14)
  {
LABEL_5:
    v11 = 0;
    v12 = a4;
LABEL_33:
    *v9 = a4;
    v9[1] = a5;
    v9[2] = a6;
    v9[3] = a7;
    v9[4] = v12;
    return v11;
  }
  v11 = 0;
  v14 = (a6 >> 59) & 1;
  if ((a7 & 0x1000000000000000) == 0)
    LOBYTE(v14) = 1;
  v15 = 4 << v14;
  v21 = (a7 & 0xFFFFFFFFFFFFFFFLL) + 32;
  v22 = a7 & 0xFFFFFFFFFFFFFFLL;
  v16 = HIBYTE(a7) & 0xF;
  if ((a7 & 0x2000000000000000) == 0)
    v16 = a6 & 0xFFFFFFFFFFFFLL;
  v23 = v16;
  v26 = a3 - 1;
  v12 = a4;
  while (1)
  {
    v17 = v12 & 0xC;
    result = v12;
    if (v17 == v15)
      result = sub_100038398(v12, a6, a7);
    if (result >> 14 < v27 || result >> 14 >= v10)
      break;
    if ((a7 & 0x1000000000000000) != 0)
    {
      result = String.UTF8View._foreignSubscript(position:)();
      v19 = result;
      if (v17 != v15)
        goto LABEL_23;
    }
    else
    {
      v18 = result >> 16;
      if ((a7 & 0x2000000000000000) != 0)
      {
        v28[0] = a6;
        v28[1] = v22;
        v19 = *((_BYTE *)v28 + v18);
        if (v17 != v15)
          goto LABEL_23;
      }
      else
      {
        result = v21;
        if ((a6 & 0x1000000000000000) == 0)
          result = _StringObject.sharedUTF8.getter(a6, a7);
        v19 = *(_BYTE *)(result + v18);
        if (v17 != v15)
        {
LABEL_23:
          if ((a7 & 0x1000000000000000) == 0)
            goto LABEL_24;
          goto LABEL_27;
        }
      }
    }
    result = sub_100038398(v12, a6, a7);
    v12 = result;
    if ((a7 & 0x1000000000000000) == 0)
    {
LABEL_24:
      v12 = (v12 & 0xFFFFFFFFFFFF0000) + 65540;
      goto LABEL_29;
    }
LABEL_27:
    if (v23 <= v12 >> 16)
      goto LABEL_35;
    v12 = String.UTF8View._foreignIndex(after:)(v12, a6, a7);
LABEL_29:
    *(_BYTE *)(a2 + v11) = v19;
    if (v26 == v11)
    {
      v11 = a3;
      goto LABEL_33;
    }
    ++v11;
    if (v10 == v12 >> 14)
      goto LABEL_33;
  }
  __break(1u);
LABEL_35:
  __break(1u);
LABEL_36:
  __break(1u);
  return result;
}

uint64_t sub_10003D308(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = _findStringSwitchCaseWithCache(cases:string:cache:)(&off_1000DBB00, a1, a2, &unk_1000EC188);
  swift_bridgeObjectRelease(a2);
  if (v3 >= 0x2B)
    return 43;
  else
    return v3;
}

uint64_t getEnumTagSinglePayload for HealthAppPPT(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xD6)
    goto LABEL_17;
  if (a2 + 42 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 42) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 42;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 42;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 42;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 0x2B;
  v8 = v6 - 43;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for HealthAppPPT(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 42 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 42) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xD6)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xD5)
    return ((uint64_t (*)(void))((char *)&loc_10003D434 + 4 * byte_1000B2688[v4]))();
  *a1 = a2 + 42;
  return ((uint64_t (*)(void))((char *)sub_10003D468 + 4 * byte_1000B2683[v4]))();
}

uint64_t sub_10003D468(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10003D470(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10003D478);
  return result;
}

uint64_t sub_10003D484(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10003D48CLL);
  *(_BYTE *)result = a2 + 42;
  return result;
}

uint64_t sub_10003D490(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10003D498(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for HealthAppPPT()
{
  return &type metadata for HealthAppPPT;
}

unint64_t sub_10003D4B8()
{
  unint64_t result;

  result = qword_1000EDB90;
  if (!qword_1000EDB90)
  {
    result = swift_getWitnessTable(&unk_1000B2770, &type metadata for HealthAppPPT);
    atomic_store(result, (unint64_t *)&qword_1000EDB90);
  }
  return result;
}

void sub_10003D4FC(void *a1, uint64_t a2, unsigned __int8 a3)
{
  uint64_t v6;
  uint64_t v7;
  NSString v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  id v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  NSString v18;
  NSString v19;
  Class isa;
  __int128 aBlock;
  uint64_t (*v22)(uint64_t);
  void *v23;
  void (*v24)();
  uint64_t v25;
  _QWORD v26[3];
  uint64_t v27;
  uint64_t v28;

  sub_10006BC9C((uint64_t)&aBlock);
  if (v23)
  {
    sub_10001AF7C(&aBlock, (uint64_t)v26);
    sub_100038C48(a3);
    v7 = v6;
    v8 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v7);
    objc_msgSend(a1, "startedTest:", v8);

    v9 = v27;
    v10 = v28;
    sub_100012E04(v26, v27);
    dispatch thunk of ViewControllerRouterProtocol.prepareForAppActivity(_:)(a2, v9, *(_QWORD *)(v10 + 8));
    v11 = swift_allocObject(&unk_1000DE138, 25, 7);
    *(_QWORD *)(v11 + 16) = a1;
    *(_BYTE *)(v11 + 24) = a3;
    v24 = sub_10003EDB8;
    v25 = v11;
    *(_QWORD *)&aBlock = _NSConcreteStackBlock;
    *((_QWORD *)&aBlock + 1) = 1107296256;
    v22 = sub_100006988;
    v23 = &unk_1000DE150;
    v12 = _Block_copy(&aBlock);
    v13 = v25;
    v14 = a1;
    swift_release(v13);
    objc_msgSend(v14, "installCACommitCompletionBlock:", v12);
    _Block_release(v12);
    _s6Health23OpenSleepScheduleIntentVwxx_0(v26);
  }
  else
  {
    sub_10003E714((uint64_t)&aBlock, (unint64_t *)&qword_1000EDBA0, (uint64_t)&qword_1000EDBA8, (uint64_t)&protocol descriptor for RootViewControllerProviding);
    v15 = sub_10007C098((uint64_t)_swiftEmptyArrayStorage);
    sub_100038C48(a3);
    v17 = v16;
    v18 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v17);
    v19 = String._bridgeToObjectiveC()();
    isa = Dictionary._bridgeToObjectiveC()().super.isa;
    objc_msgSend(a1, "failedTest:withFailure:withResults:", v18, v19, isa);
    swift_bridgeObjectRelease(v15);

  }
}

void sub_10003D710(void *a1, uint64_t a2, uint64_t a3, unsigned __int8 a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  unint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  NSString v22;
  uint64_t v23;
  void *v24;
  void *v25;
  uint64_t v26;
  void *v27;
  void *v28;
  id v29;
  NSString v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  id v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  NSString v38;
  NSString v39;
  Class isa;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  NSString v44;
  NSString v45;
  Class v46;
  uint64_t v47;
  __int128 aBlock;
  uint64_t (*v49)(uint64_t);
  void *v50;
  void (*v51)();
  uint64_t v52;
  _QWORD v53[3];
  uint64_t v54;
  uint64_t v55;

  v6 = type metadata accessor for DeepLinkActivityType(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v47 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10006BC9C((uint64_t)&aBlock);
  if (!v50)
  {
    sub_10003E714((uint64_t)&aBlock, (unint64_t *)&qword_1000EDBA0, (uint64_t)&qword_1000EDBA8, (uint64_t)&protocol descriptor for RootViewControllerProviding);
    v35 = sub_10007C098((uint64_t)_swiftEmptyArrayStorage);
    sub_100038C48(a4);
    v37 = v36;
    v38 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v37);
    v39 = String._bridgeToObjectiveC()();
    isa = Dictionary._bridgeToObjectiveC()().super.isa;
    objc_msgSend(a1, "failedTest:withFailure:withResults:", v38, v39, isa);
    swift_bridgeObjectRelease(v35);

    return;
  }
  sub_10001AF7C(&aBlock, (uint64_t)v53);
  v10 = v54;
  v11 = v55;
  sub_100012E04(v53, v54);
  (*(void (**)(char *, _QWORD, uint64_t))(v7 + 104))(v9, enum case for DeepLinkActivityType.browse(_:), v6);
  dispatch thunk of ViewControllerRouterProtocol.prepareForAppActivity(_:)(v9, v10, *(_QWORD *)(v11 + 8));
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  v12 = v54;
  v13 = v55;
  sub_100012E04(v53, v54);
  v14 = (*(uint64_t (**)(uint64_t, uint64_t))(v13 + 16))(v12, v13);
  if (!v14)
    goto LABEL_10;
  v15 = (void *)v14;
  v16 = objc_opt_self(UINavigationController);
  if (!swift_dynamicCastObjCClass(v15, v16)
    || (v17 = (unint64_t)UINavigationController.rootViewController()()) == 0)
  {
LABEL_9:

LABEL_10:
    v41 = sub_10007C098((uint64_t)_swiftEmptyArrayStorage);
    sub_100038C48(a4);
    v43 = v42;
    v44 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v43);
    v45 = String._bridgeToObjectiveC()();
    v46 = Dictionary._bridgeToObjectiveC()().super.isa;
    objc_msgSend(a1, "failedTest:withFailure:withResults:", v44, v45, v46);
    swift_bridgeObjectRelease(v41);

    goto LABEL_11;
  }
  v18 = (void *)v17;
  v19 = type metadata accessor for BrowseViewController(0);
  if (!swift_dynamicCastClass(v18, v19))
  {

    goto LABEL_9;
  }
  sub_100038C48(a4);
  v21 = v20;
  v22 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v21);
  objc_msgSend(a1, "startedTest:", v22);

  v24 = (void *)dispatch thunk of BrowseViewController.browseSearchViewController.getter(v23);
  v25 = (void *)dispatch thunk of BrowseSearchViewController.searchController.getter();

  dispatch thunk of BrowseViewController.setActiveSearchController(_:)(v25);
  v27 = (void *)dispatch thunk of BrowseViewController.browseSearchViewController.getter(v26);
  v28 = (void *)dispatch thunk of BrowseSearchViewController.searchController.getter();

  v29 = objc_msgSend(v28, "searchBar");
  v30 = String._bridgeToObjectiveC()();
  objc_msgSend(v29, "setText:", v30);

  v31 = swift_allocObject(&unk_1000DE188, 25, 7);
  *(_QWORD *)(v31 + 16) = a1;
  *(_BYTE *)(v31 + 24) = a4;
  v51 = sub_10003EDD4;
  v52 = v31;
  *(_QWORD *)&aBlock = _NSConcreteStackBlock;
  *((_QWORD *)&aBlock + 1) = 1107296256;
  v49 = sub_100006988;
  v50 = &unk_1000DE1A0;
  v32 = _Block_copy(&aBlock);
  v33 = v52;
  v34 = a1;
  swift_release(v33);
  objc_msgSend(v34, "installCACommitCompletionBlock:", v32);
  _Block_release(v32);

LABEL_11:
  _s6Health23OpenSleepScheduleIntentVwxx_0(v53);
}

uint64_t sub_10003DB54(unsigned __int8 a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  char v8;
  uint64_t result;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unsigned __int8 *v14;
  unsigned __int8 *v15;
  char v16;
  uint64_t v17;
  unsigned int v18;
  unint64_t v19;
  unsigned __int8 *v20;
  unsigned int v21;
  uint64_t v22;
  unint64_t v23;
  unsigned __int8 *v24;
  unsigned int v25;
  uint64_t v26;
  unint64_t v27;
  unsigned __int8 *v28;
  unsigned int v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  _QWORD v33[5];
  __int128 v34;
  __int128 v35;

  v4 = 8 * (char)a1;
  v5 = *(_QWORD *)&aIteratioscroll[v4];
  v6 = *(_QWORD *)&aNs[v4];
  v31 = v5;
  v32 = v6;
  AnyHashable.init<A>(_:)(v33, &v31, &type metadata for String, &protocol witness table for String);
  if (*(_QWORD *)(a2 + 16) && (v7 = sub_10007DF14((uint64_t)v33), (v8 & 1) != 0))
  {
    sub_100012C10(*(_QWORD *)(a2 + 56) + 32 * v7, (uint64_t)&v34);
  }
  else
  {
    v34 = 0u;
    v35 = 0u;
  }
  sub_100025CE0((uint64_t)v33);
  if (!*((_QWORD *)&v35 + 1))
  {
    sub_1000114C0((uint64_t)&v34, (uint64_t)&qword_1000EDBD0, (uint64_t)&type metadata for Any + 8, (uint64_t (*)(_QWORD, uint64_t, uint64_t, void *))sub_1000138C8);
    goto LABEL_52;
  }
  if ((swift_dynamicCast(&v31, &v34, (char *)&type metadata for Any + 8, &type metadata for String, 6) & 1) == 0)
    goto LABEL_52;
  result = v31;
  v10 = v32;
  v11 = HIBYTE(v32) & 0xF;
  v12 = v31 & 0xFFFFFFFFFFFFLL;
  if ((v32 & 0x2000000000000000) != 0)
    v13 = HIBYTE(v32) & 0xF;
  else
    v13 = v31 & 0xFFFFFFFFFFFFLL;
  if (!v13)
  {
    swift_bridgeObjectRelease(v32);
    goto LABEL_52;
  }
  if ((v32 & 0x1000000000000000) != 0)
  {
    v17 = sub_10003CAE8(v31, v32, 10);
    swift_bridgeObjectRelease(v10);
    if ((v17 & 0x100000000) == 0)
      return v17;
LABEL_52:
    if (a1 > 7u)
      return 0xFFFFFFFFLL;
    else
      return dword_1000B27AC[(char)a1];
  }
  if ((v32 & 0x2000000000000000) == 0)
  {
    if ((v31 & 0x1000000000000000) != 0)
      v14 = (unsigned __int8 *)((v32 & 0xFFFFFFFFFFFFFFFLL) + 32);
    else
      v14 = (unsigned __int8 *)_StringObject.sharedUTF8.getter(v31, v32);
    v15 = sub_10003CBCC(v14, v12, 10);
    LOBYTE(v34) = BYTE4(v15) & 1;
    v16 = BYTE4(v15) & 1;
    v17 = (uint64_t)v15;
LABEL_51:
    swift_bridgeObjectRelease(v10);
    if ((v16 & 1) != 0)
      goto LABEL_52;
    return v17;
  }
  v33[0] = v31;
  v33[1] = v32 & 0xFFFFFFFFFFFFFFLL;
  if (v31 == 43)
  {
    if (!v11)
      goto LABEL_67;
    if (v11 == 1)
      goto LABEL_38;
    v17 = (BYTE1(v31) - 48);
    if (v17 > 9)
      goto LABEL_38;
    if (v11 != 2)
    {
      if ((BYTE2(v31) - 48) > 9u)
        goto LABEL_38;
      v17 = 10 * (_DWORD)v17 + (BYTE2(v31) - 48);
      v19 = v11 - 3;
      if (v19)
      {
        v20 = (unsigned __int8 *)v33 + 3;
        while (1)
        {
          v21 = *v20 - 48;
          if (v21 > 9)
            goto LABEL_38;
          v22 = 10 * (int)v17;
          if (v22 != (int)v22)
            goto LABEL_38;
          v17 = v22 + v21;
          if (__OFADD__((_DWORD)v22, v21))
            goto LABEL_38;
          v16 = 0;
          ++v20;
          if (!--v19)
            goto LABEL_51;
        }
      }
    }
LABEL_50:
    v16 = 0;
    goto LABEL_51;
  }
  if (v31 != 45)
  {
    if (!v11)
      goto LABEL_38;
    v17 = (v31 - 48);
    if (v17 > 9)
      goto LABEL_38;
    if (v11 != 1)
    {
      if ((BYTE1(v31) - 48) > 9u)
        goto LABEL_38;
      v17 = 10 * (_DWORD)v17 + (BYTE1(v31) - 48);
      v23 = v11 - 2;
      if (v23)
      {
        v24 = (unsigned __int8 *)v33 + 2;
        while (1)
        {
          v25 = *v24 - 48;
          if (v25 > 9)
            goto LABEL_38;
          v26 = 10 * (int)v17;
          if (v26 != (int)v26)
            goto LABEL_38;
          v17 = v26 + v25;
          if (__OFADD__((_DWORD)v26, v25))
            goto LABEL_38;
          v16 = 0;
          ++v24;
          if (!--v23)
            goto LABEL_51;
        }
      }
    }
    goto LABEL_50;
  }
  if (v11)
  {
    if (v11 != 1)
    {
      v18 = (BYTE1(v31) - 48);
      if (v18 <= 9)
      {
        if (v11 == 2)
        {
          v16 = 0;
          v17 = -v18;
          goto LABEL_51;
        }
        if ((BYTE2(v31) - 48) <= 9u)
        {
          v17 = -10 * v18 - (BYTE2(v31) - 48);
          v27 = v11 - 3;
          if (!v27)
            goto LABEL_50;
          v28 = (unsigned __int8 *)v33 + 3;
          while (1)
          {
            v29 = *v28 - 48;
            if (v29 > 9)
              break;
            v30 = 10 * (int)v17;
            if (v30 != (int)v30)
              break;
            v17 = v30 - v29;
            if (__OFSUB__((_DWORD)v30, v29))
              break;
            v16 = 0;
            ++v28;
            if (!--v27)
              goto LABEL_51;
          }
        }
      }
    }
LABEL_38:
    v17 = 0;
    v16 = 1;
    goto LABEL_51;
  }
  __break(1u);
LABEL_67:
  __break(1u);
  return result;
}

void sub_10003DEF0(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v4;

  v4 = type metadata accessor for DeepLinkActivityType(0);
  __chkstk_darwin(v4);
  __asm { BR              X10 }
}

uint64_t sub_10003DF64()
{
  void *v0;
  uint64_t v1;
  char v2;

  sub_10003A794(v0, v1, v2);
  return 1;
}

uint64_t sub_10003E598()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 40, 7);
}

void sub_10003E5C4(void *a1)
{
  uint64_t v1;

  sub_10003C524(a1, *(void **)(v1 + 16), *(_BYTE *)(v1 + 24), *(_QWORD *)(v1 + 32));
}

uint64_t sub_10003E5D4()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 24));

  return swift_deallocObject(v0, 40, 7);
}

void sub_10003E600(void *a1)
{
  uint64_t v1;

  sub_10003C260(a1, *(_BYTE *)(v1 + 16), *(_QWORD *)(v1 + 24), *(void **)(v1 + 32));
}

void sub_10003E60C(uint64_t a1)
{
  uint64_t v1;

  sub_10003B704(a1, *(void **)(v1 + 16), *(_BYTE *)(v1 + 24));
}

uint64_t sub_10003E618()
{
  return sub_10003E774(48);
}

uint64_t sub_10003E620(void *a1)
{
  uint64_t v1;

  return sub_10003B180(a1, *(unsigned __int8 *)(v1 + 16), *(void **)(v1 + 24), *(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 40), (uint64_t)&unk_1000DE0E8, (uint64_t)sub_10003ED98, (uint64_t)&unk_1000DE100);
}

uint64_t sub_10003E658()
{
  return sub_10003E774(48);
}

uint64_t sub_10003E660()
{
  return sub_10003E774(48);
}

uint64_t sub_10003E668()
{
  return sub_10003E774(48);
}

uint64_t sub_10003E670()
{
  return sub_10003E774(48);
}

uint64_t sub_10003E678()
{
  return sub_10003E774(48);
}

uint64_t sub_10003E680(void *a1)
{
  uint64_t v1;

  return sub_10003B180(a1, *(unsigned __int8 *)(v1 + 16), *(void **)(v1 + 24), *(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 40), (uint64_t)&unk_1000DE098, (uint64_t)sub_10003E94C, (uint64_t)&unk_1000DE0B0);
}

uint64_t sub_10003E6B8()
{
  return sub_10003E774(48);
}

void sub_10003E6C0(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;

  if (!*a2)
  {
    v7 = a5(255, a3, a4);
    v8 = type metadata accessor for Optional(a1, v7);
    if (!v9)
      atomic_store(v8, a2);
  }
}

uint64_t sub_10003E714(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;

  sub_10003E6C0(0, a2, a3, a4, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_100013100);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(a1, v5);
  return a1;
}

uint64_t sub_10003E758()
{
  return sub_10003E774(40);
}

void sub_10003E760()
{
  uint64_t v0;

  sub_10003AE64(*(_BYTE *)(v0 + 16), *(void **)(v0 + 24), *(_QWORD *)(v0 + 32));
}

uint64_t sub_10003E76C()
{
  return sub_10003E774(40);
}

uint64_t sub_10003E774(uint64_t a1)
{
  uint64_t v1;

  swift_bridgeObjectRelease(*(_QWORD *)(v1 + 32));
  return swift_deallocObject(v1, a1, 7);
}

uint64_t sub_10003E7AC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return sub_10003AA60(a1, a2, *(unsigned __int8 *)(v2 + 16), *(void **)(v2 + 24), *(_QWORD *)(v2 + 32));
}

uint64_t sub_10003E7B8()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 48));
  return swift_deallocObject(v0, 56, 7);
}

void sub_10003E7EC()
{
  uint64_t v0;

  sub_10003AD30(*(void (**)(void))(v0 + 16), *(_QWORD *)(v0 + 24), *(_BYTE *)(v0 + 32), *(void **)(v0 + 40), *(_QWORD *)(v0 + 48));
}

uint64_t sub_10003E7FC(char a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char v7;
  uint64_t v8;
  char v9;
  uint64_t v11;
  uint64_t v12;
  _QWORD v13[5];
  __int128 v14;
  __int128 v15;

  v3 = 8 * a1;
  v4 = *(_QWORD *)&aIteratioscroll[v3];
  v5 = *(_QWORD *)&aNs[v3];
  v11 = v4;
  v12 = v5;
  AnyHashable.init<A>(_:)(v13, &v11, &type metadata for String, &protocol witness table for String);
  if (*(_QWORD *)(a2 + 16) && (v6 = sub_10007DF14((uint64_t)v13), (v7 & 1) != 0))
  {
    sub_100012C10(*(_QWORD *)(a2 + 56) + 32 * v6, (uint64_t)&v14);
  }
  else
  {
    v14 = 0u;
    v15 = 0u;
  }
  sub_100025CE0((uint64_t)v13);
  if (!*((_QWORD *)&v15 + 1))
  {
    sub_1000114C0((uint64_t)&v14, (uint64_t)&qword_1000EDBD0, (uint64_t)&type metadata for Any + 8, (uint64_t (*)(_QWORD, uint64_t, uint64_t, void *))sub_1000138C8);
    goto LABEL_11;
  }
  if ((swift_dynamicCast(&v11, &v14, (char *)&type metadata for Any + 8, &type metadata for String, 6) & 1) == 0)
  {
LABEL_11:
    v9 = 0;
    return v9 & 1;
  }
  v8 = v12;
  if (v11 == 5457241 && v12 == 0xE300000000000000)
  {
    swift_bridgeObjectRelease(0xE300000000000000);
    v9 = 1;
  }
  else
  {
    v9 = _stringCompareWithSmolCheck(_:_:expecting:)(v11, v12, 5457241, 0xE300000000000000, 0);
    swift_bridgeObjectRelease(v8);
  }
  return v9 & 1;
}

uint64_t sub_10003E94C()
{
  return sub_10003EDA4((uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_10003AF90);
}

void sub_10003E958(void *a1, void *a2, unsigned __int8 a3)
{
  uint64_t v5;
  void *v6;
  void *v7;
  id v8;
  void *v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  id v18;
  NSString v19;
  id v20;
  id v21;
  NSString v22;
  id v23;
  void *v24;
  NSString v25;
  uint64_t v26;
  uint64_t v27;
  NSString v28;
  NSString v29;
  Class isa;
  Swift::String v31;
  unint64_t v32;
  Class v33;
  uint64_t v34;

  v5 = sub_100038C48(a3);
  v7 = v6;
  v8 = objc_msgSend(a2, "window");
  if (v8)
  {
    v9 = v8;
    objc_msgSend(v8, "bounds");
    v11 = v10;
    v13 = v12;
    v15 = v14;
    v17 = v16;

    v18 = objc_allocWithZone((Class)RPTScrollViewTestParameters);
    swift_bridgeObjectRetain(v7);
    v19 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v7);
    v20 = objc_msgSend(v18, "initWithTestName:scrollBounds:scrollContentLength:direction:completionHandler:", v19, 2, 0, v11, v13, v15, v17, 250.0);

    objc_msgSend(v20, "setShouldFlick:", 1);
    objc_msgSend(v20, "setIterationDurationFactor:", 0.4);
    v21 = objc_allocWithZone((Class)RPTScrollViewTestParameters);
    swift_bridgeObjectRetain(v7);
    v22 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v7);
    v23 = objc_msgSend(v21, "initWithTestName:scrollBounds:scrollContentLength:direction:completionHandler:", v22, 3, 0, v11, v13, v15, v17, 250.0);

    objc_msgSend(v23, "setShouldFlick:", 1);
    objc_msgSend(v23, "setIterationDurationFactor:", 0.8);
    v24 = (void *)objc_opt_self(RPTGroupScrollTestParameters);
    v25 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v7);
    sub_1000138C8(0, (unint64_t *)&qword_1000ED9C0, (uint64_t)&type metadata for Swift.AnyObject + 8, (uint64_t (*)(_QWORD, uint64_t))&type metadata accessor for _ContiguousArrayStorage);
    v27 = swift_allocObject(v26, 48, 7);
    *(_OWORD *)(v27 + 16) = xmmword_1000B2850;
    *(_QWORD *)(v27 + 32) = v20;
    *(_QWORD *)(v27 + 40) = v23;
    v34 = v27;
    specialized Array._endMutation()(v27);
    sub_10003ED0C();
    v28 = v20;
    v29 = v23;
    isa = Array._bridgeToObjectiveC()().super.isa;
    v33 = (Class)objc_msgSend(v24, "newWithTestName:parameters:completionHandler:", v25, isa, 0, swift_bridgeObjectRelease(v34).n128_f64[0]);

    objc_msgSend((id)objc_opt_self(RPTTestRunner), "runTestWithParameters:", v33);
  }
  else
  {
    _StringGuts.grow(_:)(39);
    swift_bridgeObjectRelease(0xE000000000000000);
    v31._countAndFlagsBits = v5;
    v31._object = v7;
    String.append(_:)(v31);
    swift_bridgeObjectRelease(v7);
    v32 = sub_10007C098((uint64_t)_swiftEmptyArrayStorage);
    v28 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v7);
    v29 = String._bridgeToObjectiveC()();
    v33 = Dictionary._bridgeToObjectiveC()().super.isa;
    objc_msgSend(a1, "failedTest:withFailure:withResults:", v28, v29);
    swift_bridgeObjectRelease(0x80000001000B9C20);
    swift_bridgeObjectRelease(v32);
  }

}

unint64_t sub_10003ED0C()
{
  unint64_t result;
  char *v1;

  result = qword_1000EDC00;
  if (!qword_1000EDC00)
  {
    v1 = (char *)&OBJC_PROTOCOL___RPTTestParameters.isa + 1;
    result = swift_getExistentialTypeMetadata(0, 0, 1, &v1);
    atomic_store(result, (unint64_t *)&qword_1000EDC00);
  }
  return result;
}

uint64_t sub_10003ED64()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 40));
  return swift_deallocObject(v0, 56, 7);
}

uint64_t sub_10003ED98()
{
  return sub_10003EDA4((uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_10003B444);
}

uint64_t sub_10003EDA4(uint64_t (*a1)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))
{
  uint64_t v1;

  return a1(*(unsigned __int8 *)(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 40), *(_QWORD *)(v1 + 48));
}

void sub_10003EDB8()
{
  uint64_t v0;

  sub_10003CA3C(*(void **)(v0 + 16), *(_BYTE *)(v0 + 24));
}

void sub_10003EDD4()
{
  uint64_t v0;

  sub_10003C4C4(*(void **)(v0 + 16), *(_BYTE *)(v0 + 24));
}

uint64_t sub_10003EDE0()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 72));
  return swift_deallocObject(v0, 88, 7);
}

void sub_10003EE0C(void *a1)
{
  uint64_t v1;

  sub_10003BDA4(a1, *(unsigned __int8 *)(v1 + 16), *(_QWORD *)(v1 + 24), *(_BYTE *)(v1 + 32), *(_QWORD *)(v1 + 40), *(_BYTE *)(v1 + 48), *(void **)(v1 + 56), *(_QWORD *)(v1 + 64), *(_QWORD *)(v1 + 72), *(_QWORD *)(v1 + 80));
}

uint64_t sub_10003EE48()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 40));
  return swift_deallocObject(v0, 64, 7);
}

id sub_10003EE7C()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;

  v1 = *(void **)(v0 + 48);
  v2 = *(_QWORD *)(v0 + 56);
  sub_10003B9E8(v1, *(void **)(v0 + 16), *(_BYTE *)(v0 + 24), *(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40));
  return objc_msgSend(v1, "selectTimeScope:", v2);
}

uint64_t sub_10003EEC4()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 48));
  return swift_deallocObject(v0, 56, 7);
}

uint64_t sub_10003EEF8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_10003BB50(a1, a2, a3, *(void **)(v3 + 16), *(_BYTE *)(v3 + 24), *(void **)(v3 + 32), *(_QWORD *)(v3 + 40), *(_QWORD *)(v3 + 48));
}

uint64_t sub_10003EF0C()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 16))();
}

void sub_10003EF2C()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!qword_1000EDC10)
  {
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2(0, &type metadata for AnyHashable, (char *)&type metadata for Any + 8, 0, 0);
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_1000EDC10);
  }
}

uint64_t sub_10003EF94()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 24));

  return swift_deallocObject(v0, 48, 7);
}

void sub_10003EFC8()
{
  uint64_t v0;

  sub_10003B7E4(*(_BYTE *)(v0 + 16), *(_QWORD *)(v0 + 24), *(void **)(v0 + 32), *(void **)(v0 + 40));
}

uint64_t sub_10003EFD8()
{
  uint64_t v0;

  return sub_10003C744(*(void **)(v0 + 16), *(_BYTE *)(v0 + 24));
}

uint64_t sub_10003EFE4()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10003F008()
{
  uint64_t v0;

  return swift_deallocObject(v0, 25, 7);
}

void sub_10003F098(void *a1)
{
  uint64_t v1;
  void (*v2)(void);
  id v3;
  void *v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  id v11;

  v2 = *(void (**)(void))(v1 + OBJC_IVAR____TtC6Health28HealthAppPPTFeedItemListener_changesMade);
  v3 = objc_msgSend(a1, "fetchedObjects");
  if (!v3)
    goto LABEL_15;
  v4 = v3;
  v5 = sub_10003F2E0();
  v6 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v4, v5);

  if (!((unint64_t)v6 >> 62))
  {
    if (*(_QWORD *)((v6 & 0xFFFFFFFFFFFFF8) + 0x10))
      goto LABEL_4;
LABEL_13:
    swift_bridgeObjectRelease(v6);
    goto LABEL_14;
  }
  if (v6 < 0)
    v9 = v6;
  else
    v9 = v6 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v6);
  v10 = _CocoaArrayWrapper.endIndex.getter(v9);
  swift_bridgeObjectRelease(v6);
  if (!v10)
    goto LABEL_13;
LABEL_4:
  if ((v6 & 0xC000000000000001) != 0)
  {
    v7 = specialized _ArrayBuffer._getElementSlowPath(_:)(0, v6);
    goto LABEL_7;
  }
  if (*(_QWORD *)((v6 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    v7 = *(_QWORD *)(v6 + 32);
    swift_unknownObjectRetain(v7);
LABEL_7:
    swift_bridgeObjectRelease(v6);
    v8 = type metadata accessor for FeedItem(0);
    v3 = (id)swift_dynamicCastClass(v7, v8);
    if (v3)
    {
LABEL_15:
      v11 = v3;
      v2();

      return;
    }
    swift_unknownObjectRelease(v7);
LABEL_14:
    v3 = 0;
    goto LABEL_15;
  }
  __break(1u);
}

id sub_10003F244()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for HealthAppPPTFeedItemListener();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for HealthAppPPTFeedItemListener()
{
  return objc_opt_self(_TtC6Health28HealthAppPPTFeedItemListener);
}

unint64_t sub_10003F2E0()
{
  unint64_t result;
  char *v1;

  result = qword_1000EDCD0;
  if (!qword_1000EDCD0)
  {
    v1 = (char *)&OBJC_PROTOCOL___NSFetchRequestResult.isa + 1;
    result = swift_getExistentialTypeMetadata(0, 0, 1, &v1);
    atomic_store(result, (unint64_t *)&qword_1000EDCD0);
  }
  return result;
}

void sub_10003F334()
{
  void *v0;
  NSString v1;
  NSString v2;
  id v3;
  uint64_t v4;
  id v5;
  NSString v6;
  void *v7;
  void *v8;
  id v9;
  NSString v10;
  id v11;
  _QWORD v12[5];
  uint64_t v13;

  v1 = String._bridgeToObjectiveC()();
  v2 = String._bridgeToObjectiveC()();
  v3 = objc_msgSend((id)objc_opt_self(UIAlertController), "alertControllerWithTitle:message:preferredStyle:", v1, v2, 1);

  v4 = swift_allocObject(&unk_1000DE440, 24, 7);
  *(_QWORD *)(v4 + 16) = v0;
  v5 = v0;
  v6 = String._bridgeToObjectiveC()();
  v12[4] = sub_10003F620;
  v13 = v4;
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 1107296256;
  v12[2] = sub_10008E550;
  v12[3] = &unk_1000DE458;
  v7 = _Block_copy(v12);
  swift_release(v13);
  v8 = (void *)objc_opt_self(UIAlertAction);
  v9 = objc_msgSend(v8, "actionWithTitle:style:handler:", v6, 0, v7);
  _Block_release(v7);

  objc_msgSend(v3, "addAction:", v9);
  v10 = String._bridgeToObjectiveC()();
  v11 = objc_msgSend(v8, "actionWithTitle:style:handler:", v10, 1, 0);

  objc_msgSend(v3, "addAction:", v11);
  objc_msgSend(v5, "presentViewController:animated:completion:", v3, 1, 0);

}

uint64_t sub_10003F548(void *a1)
{
  uint64_t v2;
  uint64_t v3;
  id v4;

  v2 = swift_allocObject(&unk_1000DE418, 24, 7);
  *(_QWORD *)(v2 + 16) = a1;
  v3 = type metadata accessor for SummaryFeedViewController(0);
  v4 = a1;
  TapToRadarButtonDisplaying<>.showDisambiguationTriageAlert(featureName:userConfirmed:)(0x207972616D6D7553, 0xEB00000000626154, sub_10003F600, v2, v3);

  return swift_release(v2);
}

uint64_t sub_10003F5DC()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

void sub_10003F600()
{
  sub_10003F334();
}

void sub_10003F620()
{
  sub_10003F648(0, 0);
}

void sub_10003F648(uint64_t a1, uint64_t a2)
{
  void *v2;
  id v5;
  id v6;
  id v7;
  id v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  void *v13;
  _QWORD *v14;
  id v15;
  id v16;
  void *v17;
  id v18;
  _QWORD aBlock[5];
  _QWORD *v20;

  v18 = objc_msgSend(objc_allocWithZone((Class)UIActivityIndicatorView), "initWithActivityIndicatorStyle:", 100);
  objc_msgSend(v18, "startAnimating");
  v5 = objc_msgSend(v2, "navigationItem");
  v6 = objc_msgSend(v5, "rightBarButtonItem");

  v7 = objc_msgSend(v2, "navigationItem");
  v8 = objc_msgSend(objc_allocWithZone((Class)UIBarButtonItem), "initWithCustomView:", v18);
  objc_msgSend(v7, "setRightBarButtonItem:", v8);

  v9 = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for CollectFeedItemCacheDiagnosticsOperation(0)), "init");
  v10 = swift_allocObject(&unk_1000DE490, 24, 7);
  swift_unknownObjectWeakInit(v10 + 16, v9);
  v11 = swift_allocObject(&unk_1000DE4B8, 24, 7);
  swift_unknownObjectWeakInit(v11 + 16, v2);
  v12 = (_QWORD *)swift_allocObject(&unk_1000DE4E0, 56, 7);
  v12[2] = v10;
  v12[3] = v11;
  v12[4] = v6;
  v12[5] = a1;
  v12[6] = a2;
  aBlock[4] = sub_10003FBD4;
  v20 = v12;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100006988;
  aBlock[3] = &unk_1000DE4F8;
  v13 = _Block_copy(aBlock);
  v14 = v20;
  v15 = v9;
  swift_retain(v10);
  swift_retain(v11);
  v16 = v6;
  sub_10003FBE0(a1, a2);
  sub_10003FBE0((uint64_t)sub_10003FBD4, (uint64_t)v12);
  swift_release(v14);
  objc_msgSend(v15, "setCompletionBlock:", v13);
  _Block_release(v13);

  swift_release(v10);
  swift_release(v11);
  swift_release(v12);
  sub_100006D10(0, (unint64_t *)&qword_1000EDA38, NSOperationQueue_ptr);
  v17 = (void *)static NSOperationQueue.userInitiated.getter();
  objc_msgSend(v17, "addOperation:", v15);

}

uint64_t sub_10003F8E4()
{
  uint64_t v0;

  swift_unknownObjectWeakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10003F908(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t Strong;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  void *v21;
  _QWORD *v22;
  uint64_t v23;
  void *v24;
  _QWORD *v25;
  id v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD aBlock[5];
  _QWORD *v38;
  char v39[24];
  char v40[24];

  v33 = a5;
  v9 = type metadata accessor for DispatchWorkItemFlags(0);
  v36 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v11 = (char *)&v33 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for DispatchQoS(0);
  v34 = *(_QWORD *)(v12 - 8);
  v35 = v12;
  __chkstk_darwin(v12);
  v14 = (char *)&v33 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  a1 += 16;
  swift_beginAccess(a1, v40, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(a1);
  if (Strong)
  {
    v16 = (void *)Strong;
    v17 = dispatch thunk of CollectFeedItemCacheDiagnosticsOperation.logURLs.getter();

  }
  else
  {
    v17 = 0;
  }
  v18 = a2 + 16;
  sub_100006D10(0, (unint64_t *)&qword_1000ED910, OS_dispatch_queue_ptr);
  v19 = (void *)static OS_dispatch_queue.main.getter();
  v20 = swift_allocObject(&unk_1000DE4B8, 24, 7);
  swift_beginAccess(v18, v39, 0, 0);
  v21 = (void *)swift_unknownObjectWeakLoadStrong(v18);
  swift_unknownObjectWeakInit(v20 + 16, v21);

  v22 = (_QWORD *)swift_allocObject(&unk_1000DE530, 56, 7);
  v22[2] = v17;
  v22[3] = v20;
  v22[4] = a3;
  v22[5] = a4;
  v23 = v33;
  v22[6] = v33;
  aBlock[4] = sub_10003FF54;
  v38 = v22;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100006988;
  aBlock[3] = &unk_1000DE548;
  v24 = _Block_copy(aBlock);
  v25 = v38;
  v26 = a3;
  sub_10003FBE0(a4, v23);
  v27 = swift_release(v25);
  static DispatchQoS.unspecified.getter(v27);
  aBlock[0] = _swiftEmptyArrayStorage;
  v28 = sub_100013198((unint64_t *)&qword_1000EDBE0, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  sub_10003FF74(0);
  v30 = v29;
  v31 = sub_100013198((unint64_t *)&qword_1000EDBF0, (uint64_t (*)(uint64_t))sub_10003FF74, (uint64_t)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(aBlock, v30, v31, v9, v28);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v14, v11, v24);
  _Block_release(v24);

  (*(void (**)(char *, uint64_t))(v36 + 8))(v11, v9);
  return (*(uint64_t (**)(char *, uint64_t))(v34 + 8))(v14, v35);
}

uint64_t sub_10003FBC8()
{
  return sub_10003FF0C((void (*)(_QWORD))&_swift_release);
}

uint64_t sub_10003FBD4()
{
  return sub_10003FF60((uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_10003F908);
}

uint64_t sub_10003FBE0(uint64_t result, uint64_t a2)
{
  if (result)
    return swift_retain(a2);
  return result;
}

uint64_t sub_10003FBF0(Class isa, uint64_t a2, uint64_t a3, void (*a4)(void), uint64_t a5)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  unint64_t v12;
  NSString v13;
  NSString v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  uint64_t v18;
  NSArray v19;
  id v20;
  id v21;
  NSURL *v22;
  void *v23;
  void *v24;
  void *v25;
  unint64_t v26;
  Class v27;
  void *Strong;
  void *v29;
  id v30;
  _QWORD v32[2];
  void (*v33)(void);
  uint64_t v34[3];

  v32[1] = a5;
  v33 = a4;
  v32[0] = a3;
  v7 = type metadata accessor for URL(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)v32 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = a2 + 16;
  if (isa)
    v12 = 0x80000001000BA100;
  else
    v12 = 0x80000001000BA1C0;
  v13 = String._bridgeToObjectiveC()();
  v14 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v12);
  sub_1000139B4();
  v16 = swift_allocObject(v15, 40, 7);
  *(_OWORD *)(v16 + 16) = xmmword_1000B1AB0;
  v17 = objc_msgSend(objc_allocWithZone((Class)NSNumber), "initWithInteger:", 1148476);
  *(_QWORD *)(v16 + 32) = v17;
  v34[0] = v16;
  specialized Array._endMutation()(v17);
  v18 = v34[0];
  sub_100006D10(0, &qword_1000EDCD8, NSNumber_ptr);
  v19.super.isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v18);
  if (isa)
    isa = Array._bridgeToObjectiveC()().super.isa;
  v20 = objc_msgSend((id)objc_opt_self(NSURL), "hk_tapToHealthRadarURLWithTitle:description:classification:reproducibility:keywords:autoDiagnostics:attachments:", v13, v14, 5, 0, v19.super.isa, 2, isa);

  static URL._unconditionallyBridgeFromObjectiveC(_:)(v20);
  v21 = objc_msgSend((id)objc_opt_self(LSApplicationWorkspace), "defaultWorkspace");
  if (v21)
  {
    v23 = v21;
    URL._bridgeToObjectiveC()(v22);
    v25 = v24;
    v26 = sub_10007C1F8((uint64_t)_swiftEmptyArrayStorage);
    v27 = Dictionary._bridgeToObjectiveC()().super.isa;
    objc_msgSend(v23, "openSensitiveURL:withOptions:", v25, v27, swift_bridgeObjectRelease(v26).n128_f64[0]);

  }
  swift_beginAccess(v11, v34, 0, 0);
  Strong = (void *)swift_unknownObjectWeakLoadStrong(v11);
  if (Strong)
  {
    v29 = Strong;
    v30 = objc_msgSend(Strong, "navigationItem");

    objc_msgSend(v30, "setRightBarButtonItem:", v32[0]);
  }
  if (v33)
    v33();
  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, v7);
}

uint64_t sub_10003FF00()
{
  return sub_10003FF0C((void (*)(_QWORD))&_swift_bridgeObjectRelease);
}

uint64_t sub_10003FF0C(void (*a1)(_QWORD))
{
  uint64_t v1;

  a1(*(_QWORD *)(v1 + 16));
  swift_release(*(_QWORD *)(v1 + 24));

  if (*(_QWORD *)(v1 + 40))
    swift_release(*(_QWORD *)(v1 + 48));
  return swift_deallocObject(v1, 56, 7);
}

uint64_t sub_10003FF54()
{
  return sub_10003FF60((uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_10003FBF0);
}

uint64_t sub_10003FF60(uint64_t (*a1)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))
{
  _QWORD *v1;

  return a1(v1[2], v1[3], v1[4], v1[5], v1[6]);
}

void sub_10003FF74(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_1000ED920)
  {
    v2 = type metadata accessor for DispatchWorkItemFlags(255);
    v3 = type metadata accessor for Array(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_1000ED920);
  }
}

id sub_10003FFE0()
{
  uint64_t v0;
  uint64_t ObjCClassFromMetadata;
  id result;

  v0 = type metadata accessor for HealthNotificationsWelcomeViewModel();
  ObjCClassFromMetadata = swift_getObjCClassFromMetadata(v0);
  result = objc_msgSend((id)objc_opt_self(NSBundle), "bundleForClass:", ObjCClassFromMetadata);
  qword_1000F0EF8 = (uint64_t)result;
  return result;
}

uint64_t sub_100040030(uint64_t a1, uint64_t a2)
{
  return sub_1000439A0(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16), *(_QWORD *)a2, *(_QWORD *)(a2 + 8), *(_BYTE *)(a2 + 16));
}

uint64_t sub_10004004C()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __n128 v14;
  uint64_t v15;
  uint64_t v17;

  v1 = v0;
  v2 = type metadata accessor for AdvertisableFeature.Location(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v17 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = v0[13];
  if (v6)
  {
    v7 = v0[13];
  }
  else
  {
    v8 = v0[10];
    v9 = v0[11];
    sub_100012E04(v0 + 7, v8);
    v10 = (*(uint64_t (**)(char *, _QWORD, uint64_t))(v3 + 104))(v5, enum case for AdvertisableFeature.Location.healthWelcomeFlow(_:), v2);
    v11 = static AdvertisableFeature.Identifier.healthWelcomeFlowIdentifiers.getter(v10);
    v7 = dispatch thunk of HealthPluginAdvertisableFeatureManagerProviding.makeAdvertisableFeatureManager(location:featureIdentifiers:includeFeaturesMadeAvailableByBuddy:)(v5, v11, 0, v8, v9);
    v13 = v12;
    v14 = swift_bridgeObjectRelease(v11);
    (*(void (**)(char *, uint64_t, __n128))(v3 + 8))(v5, v2, v14);
    v15 = v1[13];
    v1[13] = v7;
    v1[14] = v13;
    swift_unknownObjectRetain(v7);
    swift_unknownObjectRelease(v15);
    v6 = 0;
  }
  swift_unknownObjectRetain(v6);
  return v7;
}

uint64_t sub_100040168(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  NSObject *v13;
  os_log_type_t v14;
  uint8_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v3 = v2;
  v6 = *v2;
  v7 = type metadata accessor for Logger(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = __chkstk_darwin(v7);
  v11 = (char *)&v26 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = static Logger.general.getter(v9);
  v13 = Logger.logObject.getter(v12);
  v14 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v13, v14))
  {
    v27 = v7;
    v15 = (uint8_t *)swift_slowAlloc(12, -1);
    v16 = swift_slowAlloc(32, -1);
    v28 = a1;
    v17 = v16;
    v31 = v16;
    v29 = a2;
    *(_DWORD *)v15 = 136315138;
    v26 = v8;
    v18 = _typeName(_:qualified:)(v6, 0);
    v20 = v19;
    v30 = sub_100012B20(v18, v19, &v31);
    a2 = v29;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v30, &v31, v15 + 4, v15 + 12);
    swift_bridgeObjectRelease(v20);
    _os_log_impl((void *)&_mh_execute_header, v13, v14, "[%s] [TCC] Fetching notification authorization status", v15, 0xCu);
    swift_arrayDestroy(v17, 1, (char *)&type metadata for Any + 8);
    v21 = v17;
    a1 = v28;
    swift_slowDealloc(v21, -1, -1);
    swift_slowDealloc(v15, -1, -1);

    (*(void (**)(char *, uint64_t))(v26 + 8))(v11, v27);
  }
  else
  {

    (*(void (**)(char *, uint64_t))(v8 + 8))(v11, v7);
  }
  sub_100012E04(v3 + 2, v3[5]);
  v22 = swift_allocObject(&unk_1000DE5F0, 24, 7);
  swift_weakInit(v22 + 16, v3);
  v23 = (_QWORD *)swift_allocObject(&unk_1000DE6E0, 48, 7);
  v23[2] = a1;
  v23[3] = a2;
  v23[4] = v22;
  v23[5] = v6;
  v24 = swift_allocObject(&unk_1000DE708, 32, 7);
  *(_QWORD *)(v24 + 16) = sub_100044030;
  *(_QWORD *)(v24 + 24) = v23;
  swift_retain(a2);
  swift_retain(v22);
  swift_retain(v23);
  dispatch thunk of HealthAppNotificationManager.getNotificationSettings(completion:)(sub_100043FD4, v24);
  swift_release(v22);
  swift_release(v23);
  return swift_release(v24);
}

uint64_t sub_1000403E8(uint64_t a1, uint64_t (*a2)(uint64_t), uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  NSObject *v18;
  os_log_type_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t (*v31)(char *, uint64_t);
  uint64_t v32;
  uint64_t v33;
  uint64_t result;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t ObjectType;
  _QWORD *v40;
  uint64_t v41;
  NSObject *v42;
  os_log_type_t v43;
  uint8_t *v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t (*v57)(uint64_t);
  uint64_t v58;
  uint64_t v59[3];

  v57 = a2;
  v9 = type metadata accessor for Logger(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = __chkstk_darwin(v9);
  v13 = (char *)&v52 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __chkstk_darwin(v11);
  v16 = (char *)&v52 - v15;
  v17 = static Logger.general.getter(v14);
  v18 = Logger.logObject.getter(v17);
  v19 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v18, v19))
  {
    v20 = swift_slowAlloc(22, -1);
    v56 = a3;
    v21 = v20;
    v54 = swift_slowAlloc(32, -1);
    v59[0] = v54;
    *(_DWORD *)v21 = 136315395;
    v52 = v21 + 4;
    v22 = _typeName(_:qualified:)(a5, 0);
    v55 = a1;
    v23 = a4;
    v24 = a5;
    v25 = v13;
    v27 = v26;
    v58 = sub_100012B20(v22, v26, v59);
    v53 = v10;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v58, v59, v52, v21 + 12);
    v28 = v27;
    v13 = v25;
    a5 = v24;
    a4 = v23;
    a1 = v55;
    swift_bridgeObjectRelease(v28);
    *(_WORD *)(v21 + 12) = 2049;
    v58 = a1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v58, v59, v21 + 14, v21 + 22);
    _os_log_impl((void *)&_mh_execute_header, v18, v19, "[%s] [TCC] Received authorization status: %{private}ld", (uint8_t *)v21, 0x16u);
    v29 = v54;
    swift_arrayDestroy(v54, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v29, -1, -1);
    v30 = v21;
    a3 = v56;
    swift_slowDealloc(v30, -1, -1);

    v31 = *(uint64_t (**)(char *, uint64_t))(v53 + 8);
  }
  else
  {

    v31 = *(uint64_t (**)(char *, uint64_t))(v10 + 8);
  }
  v32 = v31(v16, v9);
  if (a1)
  {
    v33 = a4 + 16;
    swift_beginAccess(v33, v59, 0, 0);
    result = swift_weakLoadStrong(v33);
    if (result)
    {
      v35 = result;
      v36 = sub_10004004C();
      v38 = v37;
      swift_release(v35);
      ObjectType = swift_getObjectType(v36);
      v40 = (_QWORD *)swift_allocObject(&unk_1000DE730, 40, 7);
      v40[2] = v57;
      v40[3] = a3;
      v40[4] = a5;
      swift_retain(a3);
      dispatch thunk of AdvertisableFeatureManaging.determineCurrentAdvertisedFeatures(completion:)(sub_100044068, v40, ObjectType, v38);
      swift_release(v40);
      return swift_unknownObjectRelease(v36);
    }
  }
  else
  {
    v41 = static Logger.general.getter(v32);
    v42 = Logger.logObject.getter(v41);
    v43 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v42, v43))
    {
      v44 = (uint8_t *)swift_slowAlloc(12, -1);
      v45 = v13;
      v46 = swift_slowAlloc(32, -1);
      v59[0] = v46;
      v56 = v9;
      *(_DWORD *)v44 = 136315138;
      v47 = _typeName(_:qualified:)(a5, 0);
      v49 = v48;
      v58 = sub_100012B20(v47, v48, v59);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v58, v59, v44 + 4, v44 + 12);
      swift_bridgeObjectRelease(v49);
      _os_log_impl((void *)&_mh_execute_header, v42, v43, "[%s] Authorization status not determined, showing Health Notifications page", v44, 0xCu);
      swift_arrayDestroy(v46, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v46, -1, -1);
      swift_slowDealloc(v44, -1, -1);

      v50 = v45;
      v51 = v56;
    }
    else
    {

      v50 = v13;
      v51 = v9;
    }
    v31(v50, v51);
    return v57(1);
  }
  return result;
}

void sub_1000407E8(uint64_t a1, void (*a2)(uint64_t), uint64_t a3, uint8_t *a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t (*v28)(_QWORD);
  uint64_t v29;
  uint64_t (*v30)(char *, char *, uint64_t);
  uint64_t v31;
  NSObject *v32;
  os_log_type_t v33;
  int v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  __n128 v41;
  char *v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  __n128 v46;
  void (*v47)(char *, uint64_t, __n128);
  os_log_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  os_log_t v53;
  uint64_t v54;
  uint64_t v55;
  NSObject *v56;
  int v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  NSObject *v66;
  os_log_type_t v67;
  uint8_t *v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  unint64_t v72;
  _QWORD *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  char v77;
  char v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  char v82;
  int64_t v83;
  uint64_t v84;
  uint64_t v85;
  char v86;
  char v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  _QWORD *v93;
  unint64_t v94;
  unint64_t v95;
  _QWORD *v96;
  uint64_t v97;
  uint64_t isUniquelyReferenced_nonNull_native;
  uint64_t v99;
  void (*v100)(_QWORD **, _QWORD);
  uint64_t v101;
  uint8_t *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  unint64_t v107;
  unint64_t v108;
  os_log_t v109;
  uint64_t v110;
  uint64_t v111;
  int v112;
  os_log_t v113;
  uint8_t *v114;
  os_log_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  void (*v119)(uint64_t);
  uint64_t v120;
  char *v121;
  void (**v122)(char *, uint64_t);
  _QWORD *v123;
  _BYTE v124[24];
  uint64_t v125;
  uint64_t v126;
  char v127;
  _QWORD *v128;
  uint64_t v129[2];

  v114 = a4;
  v118 = a3;
  v119 = a2;
  v5 = type metadata accessor for AdvertisableFeatureError(0);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = __chkstk_darwin(v5);
  v121 = (char *)&v111 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __chkstk_darwin(v7);
  v11 = (char *)&v111 - v10;
  __chkstk_darwin(v9);
  v13 = (char *)&v111 - v12;
  v120 = type metadata accessor for AdvertisableFeature.Identifier(0);
  v122 = *(void (***)(char *, uint64_t))(v120 - 8);
  __chkstk_darwin(v120);
  v15 = (char *)&v111 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for Logger(0);
  v116 = *(_QWORD *)(v16 - 8);
  v117 = v16;
  v17 = __chkstk_darwin(v16);
  v19 = (char *)&v111 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = __chkstk_darwin(v17);
  v115 = (os_log_t)((char *)&v111 - v21);
  __chkstk_darwin(v20);
  v23 = (char *)&v111 - v22;
  sub_100044074(0);
  v25 = v24;
  __chkstk_darwin(v24);
  v27 = (uint64_t *)((char *)&v111 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_10001375C(a1, (uint64_t)v27, v28);
  if (swift_getEnumCaseMultiPayload(v27, v25) == 1)
  {
    v29 = (*(uint64_t (**)(char *, uint64_t *, uint64_t))(v6 + 32))(v13, v27, v5);
    static Logger.general.getter(v29);
    v30 = *(uint64_t (**)(char *, char *, uint64_t))(v6 + 16);
    v31 = v30(v11, v13, v5);
    v32 = Logger.logObject.getter(v31);
    v33 = static os_log_type_t.error.getter();
    v34 = v33;
    v35 = v13;
    if (os_log_type_enabled(v32, v33))
    {
      v36 = swift_slowAlloc(22, -1);
      v115 = v32;
      v37 = v36;
      v120 = swift_slowAlloc(64, -1);
      v123 = (_QWORD *)v120;
      *(_DWORD *)v37 = 136315394;
      LODWORD(v113) = v34;
      v38 = _typeName(_:qualified:)(v114, 0);
      v40 = v39;
      v125 = sub_100012B20(v38, v39, (uint64_t *)&v123);
      v122 = (void (**)(char *, uint64_t))v13;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v125, &v126, v37 + 4, v37 + 12);
      v41 = swift_bridgeObjectRelease(v40);
      *(_WORD *)(v37 + 12) = 2080;
      v42 = v121;
      ((void (*)(char *, char *, uint64_t, __n128))v30)(v121, v11, v5, v41);
      v43 = String.init<A>(describing:)(v42, v5);
      v45 = v44;
      v125 = sub_100012B20(v43, v44, (uint64_t *)&v123);
      v35 = (char *)v122;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v125, &v126, v37 + 14, v37 + 22);
      v46 = swift_bridgeObjectRelease(v45);
      v47 = *(void (**)(char *, uint64_t, __n128))(v6 + 8);
      v47(v11, v5, v46);
      v48 = v115;
      _os_log_impl((void *)&_mh_execute_header, v115, (os_log_type_t)v113, "[%s] Error when determining advertised features, will not show Health Notifications page: %s", (uint8_t *)v37, 0x16u);
      v49 = v120;
      swift_arrayDestroy(v120, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v49, -1, -1);
      swift_slowDealloc(v37, -1, -1);

    }
    else
    {
      v47 = *(void (**)(char *, uint64_t, __n128))(v6 + 8);
      ((void (*)(char *, uint64_t))v47)(v11, v5);

    }
    (*(void (**)(char *, uint64_t))(v116 + 8))(v19, v117);
    v119(0);
    ((void (*)(char *, uint64_t))v47)(v35, v5);
    return;
  }
  v50 = *v27;
  v121 = (char *)(*v27 & 0xC000000000000001);
  if (v121)
  {
    if (v50 < 0)
      v51 = v50;
    else
      v51 = v50 & 0xFFFFFFFFFFFFFF8;
    v52 = __CocoaSet.count.getter(v51);
  }
  else
  {
    v52 = *(_QWORD *)(v50 + 16);
  }
  v53 = v115;
  v54 = v120;
  if (v52)
  {
    static Logger.general.getter(v52);
    v55 = swift_bridgeObjectRetain(v50);
    v56 = Logger.logObject.getter(v55);
    v57 = static os_log_type_t.default.getter();
    if (!os_log_type_enabled(v56, (os_log_type_t)v57))
    {

      swift_bridgeObjectRelease_n(v50, 2);
      (*(void (**)(os_log_t, uint64_t))(v116 + 8))(v53, v117);
LABEL_48:
      v119(1);
      return;
    }
    v112 = v57;
    v58 = swift_slowAlloc(22, -1);
    v111 = swift_slowAlloc(64, -1);
    v129[0] = v111;
    *(_DWORD *)v58 = 136315394;
    v59 = _typeName(_:qualified:)(v114, 0);
    v61 = v60;
    v123 = (_QWORD *)sub_100012B20(v59, v60, v129);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v123, v124, v58 + 4, v58 + 12);
    swift_bridgeObjectRelease(v61);
    v113 = v56;
    v114 = (uint8_t *)v58;
    *(_WORD *)(v58 + 12) = 2080;
    if (v121)
    {
      if (v50 < 0)
        v62 = v50;
      else
        v62 = v50 & 0xFFFFFFFFFFFFFF8;
      v63 = __CocoaSet.count.getter(v62);
    }
    else
    {
      v63 = *(_QWORD *)(v50 + 16);
    }
    v73 = _swiftEmptyArrayStorage;
    if (!v63)
    {
LABEL_47:
      v123 = v73;
      v102 = v114;
      sub_10001B104();
      v104 = v103;
      v105 = sub_100013198(&qword_1000EDE58, (uint64_t (*)(uint64_t))sub_10001B104, (uint64_t)&protocol conformance descriptor for [A]);
      v106 = BidirectionalCollection<>.joined(separator:)(44, 0xE100000000000000, v104, v105);
      v108 = v107;
      swift_bridgeObjectRelease(v73);
      v123 = (_QWORD *)sub_100012B20(v106, v108, v129);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v123, v124, v102 + 14, v102 + 22);
      swift_bridgeObjectRelease_n(v50, 2);
      swift_bridgeObjectRelease(v108);
      v109 = v113;
      _os_log_impl((void *)&_mh_execute_header, v113, (os_log_type_t)v112, "[%s] Authorization status is correct but there are advertisable features %s, showing Health Notifications page", v102, 0x16u);
      v110 = v111;
      swift_arrayDestroy(v111, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v110, -1, -1);
      swift_slowDealloc(v102, -1, -1);

      (*(void (**)(os_log_t, uint64_t))(v116 + 8))(v115, v117);
      goto LABEL_48;
    }
    v128 = _swiftEmptyArrayStorage;
    sub_10007FEE0(0, v63 & ~(v63 >> 63), 0);
    if (v121)
    {
      if (v50 < 0)
        v74 = v50;
      else
        v74 = v50 & 0xFFFFFFFFFFFFFF8;
      v75 = __CocoaSet.startIndex.getter(v74);
      v77 = 1;
    }
    else
    {
      v75 = sub_10005DC48(v50);
      v77 = v78 & 1;
    }
    v125 = v75;
    v126 = v76;
    v127 = v77;
    if ((v63 & 0x8000000000000000) == 0)
    {
      if (v50 < 0)
        v79 = v50;
      else
        v79 = v50 & 0xFFFFFFFFFFFFFF8;
      do
      {
        while (1)
        {
          v88 = sub_10005D778(v125, v126, v127, v50);
          v89 = AdvertisableFeatureModel.identifier.getter();
          v90 = AdvertisableFeature.Identifier.rawValue.getter(v89);
          v92 = v91;
          v122[1](v15, v54);
          swift_release(v88);
          v93 = v128;
          if ((swift_isUniquelyReferenced_nonNull_native(v128) & 1) == 0)
          {
            sub_10007FEE0(0, v93[2] + 1, 1);
            v93 = v128;
          }
          v95 = v93[2];
          v94 = v93[3];
          if (v95 >= v94 >> 1)
          {
            sub_10007FEE0(v94 > 1, v95 + 1, 1);
            v93 = v128;
          }
          v93[2] = v95 + 1;
          v96 = &v93[2 * v95];
          v96[4] = v90;
          v96[5] = v92;
          if (v121)
            break;
          v80 = v125;
          v81 = v126;
          v82 = v127;
          v83 = sub_1000438BC(v125, v126, v127, v50);
          v85 = v84;
          v87 = v86;
          sub_100044190(v80, v81, v82);
          v125 = v83;
          v126 = v85;
          v54 = v120;
          v127 = v87 & 1;
          if (!--v63)
            goto LABEL_46;
        }
        if ((v127 & 1) == 0)
          goto LABEL_50;
        v97 = __CocoaSet.Index.handleBitPattern.getter(v125, v126);
        if (v97)
          isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v97);
        else
          isUniquelyReferenced_nonNull_native = 1;
        sub_100044114(0, &qword_1000EDE50, (uint64_t (*)(uint64_t, uint64_t, uint64_t))&type metadata accessor for Set.Index);
        v100 = (void (*)(_QWORD **, _QWORD))Set.Index._asCocoa.modify(&v123, v99);
        __CocoaSet.formIndex(after:isUnique:)(v101, isUniquelyReferenced_nonNull_native, v79);
        v100(&v123, 0);
        --v63;
      }
      while (v63);
LABEL_46:
      sub_100044190(v125, v126, v127);
      v73 = v128;
      goto LABEL_47;
    }
    __break(1u);
LABEL_50:
    swift_bridgeObjectRelease(v50);
    __break(1u);
  }
  else
  {
    swift_bridgeObjectRelease(v50);
    v65 = static Logger.general.getter(v64);
    v66 = Logger.logObject.getter(v65);
    v67 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v66, v67))
    {
      v68 = (uint8_t *)swift_slowAlloc(12, -1);
      v69 = swift_slowAlloc(32, -1);
      v123 = (_QWORD *)v69;
      *(_DWORD *)v68 = 136315138;
      v70 = _typeName(_:qualified:)(v114, 0);
      v72 = v71;
      v125 = sub_100012B20(v70, v71, (uint64_t *)&v123);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v125, &v126, v68 + 4, v68 + 12);
      swift_bridgeObjectRelease(v72);
      _os_log_impl((void *)&_mh_execute_header, v66, v67, "[%s] Authorization status is correct and there are no advertisable features, skipping Health Notifications page", v68, 0xCu);
      swift_arrayDestroy(v69, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v69, -1, -1);
      swift_slowDealloc(v68, -1, -1);
    }

    (*(void (**)(char *, uint64_t))(v116 + 8))(v23, v117);
    v119(0);
  }
}

uint64_t sub_100041130(int a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint64_t v16;
  uint8_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint8_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  uint64_t v35;

  v4 = v3;
  v33 = a1;
  v7 = *v3;
  v8 = type metadata accessor for Logger(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = __chkstk_darwin(v8);
  v12 = (char *)&v28 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = static Logger.general.getter(v10);
  v14 = Logger.logObject.getter(v13);
  v15 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v14, v15))
  {
    v30 = v8;
    v16 = swift_slowAlloc(12, -1);
    v32 = a3;
    v17 = (uint8_t *)v16;
    v18 = swift_slowAlloc(32, -1);
    v29 = v9;
    v19 = v18;
    v35 = v18;
    v31 = a2;
    *(_DWORD *)v17 = 136315138;
    v20 = _typeName(_:qualified:)(v7, 0);
    v22 = v21;
    v34 = sub_100012B20(v20, v21, &v35);
    a2 = v31;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v34, &v35, v17 + 4, v17 + 12);
    swift_bridgeObjectRelease(v22);
    _os_log_impl((void *)&_mh_execute_header, v14, v15, "[%s] [TCC] Fetching notification authorization status", v17, 0xCu);
    swift_arrayDestroy(v19, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v19, -1, -1);
    v23 = v17;
    a3 = v32;
    swift_slowDealloc(v23, -1, -1);

    (*(void (**)(char *, uint64_t))(v29 + 8))(v12, v30);
  }
  else
  {

    (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v8);
  }
  sub_100012E04(v4 + 2, v4[5]);
  v24 = swift_allocObject(&unk_1000DE5F0, 24, 7);
  swift_weakInit(v24 + 16, v4);
  v25 = swift_allocObject(&unk_1000DE668, 56, 7);
  *(_QWORD *)(v25 + 16) = v24;
  *(_BYTE *)(v25 + 24) = v33 & 1;
  *(_QWORD *)(v25 + 32) = a2;
  *(_QWORD *)(v25 + 40) = a3;
  *(_QWORD *)(v25 + 48) = v7;
  v26 = swift_allocObject(&unk_1000DE690, 32, 7);
  *(_QWORD *)(v26 + 16) = sub_100043F9C;
  *(_QWORD *)(v26 + 24) = v25;
  swift_retain(v24);
  swift_retain(a3);
  swift_retain(v25);
  dispatch thunk of HealthAppNotificationManager.getNotificationSettings(completion:)(sub_100043FD4, v26);
  swift_release(v24);
  swift_release(v25);
  return swift_release(v26);
}

uint64_t sub_1000413C4(uint64_t a1, uint64_t a2, char a3, uint64_t (*a4)(uint64_t, _QWORD, uint64_t, __n128), uint64_t a5, uint64_t a6)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  NSObject *v17;
  os_log_type_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t result;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38[3];

  v35 = a5;
  v11 = type metadata accessor for Logger(0);
  v36 = *(_QWORD *)(v11 - 8);
  v12 = __chkstk_darwin(v11);
  v14 = (char *)&v31 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = a2 + 16;
  v16 = static Logger.general.getter(v12);
  v17 = Logger.logObject.getter(v16);
  v18 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v17, v18))
  {
    v19 = swift_slowAlloc(22, -1);
    v33 = v11;
    v20 = v19;
    v32 = swift_slowAlloc(32, -1);
    v38[0] = v32;
    *(_DWORD *)v20 = 136315395;
    v31 = v20 + 4;
    v21 = _typeName(_:qualified:)(a6, 0);
    v23 = v22;
    v37 = sub_100012B20(v21, v22, v38);
    v34 = a2 + 16;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v37, v38, v31, v20 + 12);
    swift_bridgeObjectRelease(v23);
    *(_WORD *)(v20 + 12) = 2049;
    v37 = a1;
    v15 = v34;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v37, v38, v20 + 14, v20 + 22);
    _os_log_impl((void *)&_mh_execute_header, v17, v18, "[%s] [TCC] Received authorization status: %{private}ld", (uint8_t *)v20, 0x16u);
    v24 = v32;
    swift_arrayDestroy(v32, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v24, -1, -1);
    swift_slowDealloc(v20, -1, -1);

    (*(void (**)(char *, uint64_t))(v36 + 8))(v14, v33);
  }
  else
  {

    (*(void (**)(char *, uint64_t))(v36 + 8))(v14, v11);
  }
  if (a1)
  {
    swift_beginAccess(v15, v38, 0, 0);
    result = swift_weakLoadStrong(v15);
    if (!result)
      return result;
    v26 = result;
    sub_100042350(a1 == 1, a3 & 1, a4, v35);
    v27 = v26;
  }
  else
  {
    swift_beginAccess(v15, v38, 0, 0);
    result = swift_weakLoadStrong(v15);
    if (!result)
      return result;
    v28 = result;
    v29 = swift_allocObject(&unk_1000DE6B8, 41, 7);
    *(_QWORD *)(v29 + 16) = a4;
    v30 = v35;
    *(_QWORD *)(v29 + 24) = v35;
    *(_QWORD *)(v29 + 32) = a2;
    *(_BYTE *)(v29 + 40) = a3 & 1;
    swift_retain(v30);
    swift_retain(a2);
    sub_10004173C(a3 & 1, (uint64_t)sub_100043FE0, v29);
    swift_release(v28);
    v27 = v29;
  }
  return swift_release(v27);
}

uint64_t sub_100041688(char a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t, uint64_t), uint64_t a6, uint64_t a7, char a8)
{
  uint64_t result;
  uint64_t v14;
  uint64_t v15;
  _BYTE v16[24];

  if (a4 < 2u || (a2 | a3) != 0)
    return a5(a2, a3, a4);
  v14 = a7 + 16;
  swift_beginAccess(a7 + 16, v16, 0, 0);
  result = swift_weakLoadStrong(v14);
  if (result)
  {
    v15 = result;
    sub_100042350((a1 & 1) == 0, a8 & 1, (uint64_t (*)(uint64_t, _QWORD, uint64_t, __n128))a5, a6);
    return swift_release(v15);
  }
  return result;
}

uint64_t sub_10004173C(int a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint64_t v16;
  uint8_t *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint8_t *v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  v4 = v3;
  v32 = a2;
  v7 = *v3;
  v8 = type metadata accessor for Logger(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = __chkstk_darwin(v8);
  v12 = (char *)&v27 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = static Logger.general.getter(v10);
  v14 = Logger.logObject.getter(v13);
  v15 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v14, v15))
  {
    v29 = v8;
    v16 = swift_slowAlloc(12, -1);
    v31 = a3;
    v17 = (uint8_t *)v16;
    v18 = swift_slowAlloc(32, -1);
    v34 = v18;
    v30 = a1;
    *(_DWORD *)v17 = 136315138;
    v28 = v9;
    v19 = _typeName(_:qualified:)(v7, 0);
    v21 = v20;
    v33 = sub_100012B20(v19, v20, &v34);
    LOBYTE(a1) = v30;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v33, &v34, v17 + 4, v17 + 12);
    swift_bridgeObjectRelease(v21);
    _os_log_impl((void *)&_mh_execute_header, v14, v15, "%s [TCC] Showing TCC notification prompt", v17, 0xCu);
    swift_arrayDestroy(v18, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v18, -1, -1);
    v22 = v17;
    a3 = v31;
    swift_slowDealloc(v22, -1, -1);

    (*(void (**)(char *, uint64_t))(v28 + 8))(v12, v29);
  }
  else
  {

    (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v8);
  }
  v23 = sub_100043A6C();
  sub_100012E04(v4 + 2, v4[5]);
  v24 = swift_allocObject(&unk_1000DE5F0, 24, 7);
  swift_weakInit(v24 + 16, v4);
  v25 = swift_allocObject(&unk_1000DE640, 56, 7);
  *(_QWORD *)(v25 + 16) = v32;
  *(_QWORD *)(v25 + 24) = a3;
  *(_BYTE *)(v25 + 32) = a1 & 1;
  *(_QWORD *)(v25 + 40) = v24;
  *(_QWORD *)(v25 + 48) = v7;
  swift_retain(a3);
  swift_retain(v24);
  dispatch thunk of HealthAppNotificationManager.requestAuthorization(addCriticalAlerts:completionHandler:)(v23 & 1, sub_100043F08, v25);
  swift_release(v24);
  return swift_release(v25);
}

uint64_t sub_1000419A4(int a1, uint64_t a2, void (*a3)(_QWORD, uint64_t, uint64_t, uint64_t), uint64_t a4, int a5, uint64_t a6, uint64_t a7)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  id v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t Strong;
  uint64_t v42;
  _QWORD *v43;
  void *v44;
  id v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  NSObject *v49;
  os_log_type_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  unint64_t v55;
  char v56;
  uint64_t v57;
  void (*v58)(_QWORD, _QWORD, _QWORD, uint64_t);
  char *v60;
  uint64_t v61;
  NSObject *v62;
  os_log_type_t v63;
  BOOL v64;
  uint64_t v65;
  uint8_t *v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  unint64_t v70;
  uint64_t v71;
  uint64_t v72;
  NSObject *v73;
  uint64_t v74;
  uint8_t *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  unint64_t v80;
  unint64_t v81;
  uint64_t v82;
  char *v83;
  uint64_t v84;
  char *v85;
  void *v86;
  id v87;
  id v88;
  id v89;
  void *v90;
  void *v91;
  char *v92;
  unsigned int *v93;
  uint64_t v94;
  uint64_t v95;
  char *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  char *v100;
  uint64_t v101;
  uint64_t v102;
  char *v103;
  uint64_t v104;
  uint64_t v105;
  char *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  char *v111;
  char *v112;
  int v113;
  int v114;
  uint64_t v115;
  void (*v116)(_QWORD, uint64_t, uint64_t, uint64_t);
  uint64_t v117;
  uint64_t v118[2];
  char v119[32];

  v109 = a7;
  v110 = a6;
  v113 = a5;
  v114 = a1;
  v115 = a4;
  v116 = a3;
  v8 = type metadata accessor for Locale(0);
  __chkstk_darwin(v8);
  v111 = (char *)&v94 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for String.LocalizationValue(0);
  __chkstk_darwin(v10);
  v112 = (char *)&v94 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for NotificationAuthorizationAnalyticsEvent.SelectedAction(0);
  v13 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v15 = (char *)&v94 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for NotificationAuthorizationAnalyticsEvent.Context(0);
  v17 = *(_QWORD *)(v16 - 8);
  __chkstk_darwin(v16);
  v19 = (char *)&v94 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = type metadata accessor for NotificationAuthorizationAnalyticsEvent(0);
  v21 = *(_QWORD *)(v20 - 8);
  __chkstk_darwin(v20);
  v23 = (char *)&v94 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = type metadata accessor for Logger(0);
  v25 = __chkstk_darwin(v24);
  v26 = __chkstk_darwin(v25);
  v27 = __chkstk_darwin(v26);
  if (a2)
  {
    if ((v113 & 1) == 0)
    {
      v36 = 0;
      v38 = 0;
      LOBYTE(v39) = 2;
      v116(v114 & 1, 0, 0, 2);
      return sub_100043F18(v36, v38, v39);
    }
    v32 = v112;
    String.LocalizationValue.init(stringLiteral:)(0xD000000000000032, 0x80000001000BA450);
    if (qword_1000EC028 == -1)
      goto LABEL_4;
    goto LABEL_16;
  }
  v96 = (char *)&v94 - v28;
  v95 = v31;
  v97 = v30;
  v98 = v17;
  v99 = v16;
  v100 = v19;
  v101 = v13;
  v103 = v23;
  v104 = v21;
  v102 = v12;
  v105 = v20;
  v106 = v15;
  v107 = v29;
  v108 = v27;
  v40 = v110 + 16;
  swift_beginAccess(v110 + 16, v119, 0, 0);
  Strong = swift_weakLoadStrong(v40);
  if (!Strong)
  {
    v60 = v96;
    v61 = static Logger.general.getter(0);
    v62 = Logger.logObject.getter(v61);
    v63 = static os_log_type_t.fault.getter();
    v64 = os_log_type_enabled(v62, v63);
    v65 = v109;
    if (v64)
    {
      v66 = (uint8_t *)swift_slowAlloc(12, -1);
      v67 = swift_slowAlloc(32, -1);
      v118[0] = v67;
      *(_DWORD *)v66 = 136315138;
      v68 = _typeName(_:qualified:)(v65, 0);
      v70 = v69;
      v117 = sub_100012B20(v68, v69, v118);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v117, v118, v66 + 4, v66 + 12);
      swift_bridgeObjectRelease(v70);
      _os_log_impl((void *)&_mh_execute_header, v62, v63, "%s Somehow deallocated while waiting for authorization callback", v66, 0xCu);
      swift_arrayDestroy(v67, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v67, -1, -1);
      swift_slowDealloc(v66, -1, -1);
    }

    (*(void (**)(char *, uint64_t))(v107 + 8))(v60, v108);
    v32 = v112;
    if ((v113 & 1) == 0)
    {
      v36 = 0;
      v38 = 0;
      v39 = 2;
      goto LABEL_5;
    }
    String.LocalizationValue.init(stringLiteral:)(0xD000000000000032, 0x80000001000BA450);
    if (qword_1000EC028 == -1)
    {
LABEL_4:
      v33 = qword_1000F0EF8;
      v34 = (id)qword_1000F0EF8;
      v35 = v111;
      static Locale.current.getter(v34);
      v36 = String.init(localized:table:bundle:locale:comment:)(v32, 0, 0, v33, v35, 0, 0, 256);
      v38 = v37;
      v39 = 1;
LABEL_5:
      v116(v114 & 1, v36, v38, v39);
      return sub_100043F18(v36, v38, v39);
    }
LABEL_16:
    swift_once(&qword_1000EC028, sub_10003FFE0);
    goto LABEL_4;
  }
  v42 = Strong;
  v43 = sub_100012E04((_QWORD *)(Strong + 16), *(_QWORD *)(Strong + 40));
  v44 = (void *)dispatch thunk of HealthAppNotificationManager.getNotificationSettings()(v43);
  v45 = objc_msgSend(v44, "authorizationStatus");

  if (v45)
  {
    v47 = v97;
    v48 = static Logger.general.getter(v46);
    v49 = Logger.logObject.getter(v48);
    v50 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v49, v50))
    {
      v51 = swift_slowAlloc(18, -1);
      v52 = swift_slowAlloc(32, -1);
      v118[0] = v52;
      *(_DWORD *)v51 = 136315394;
      v53 = _typeName(_:qualified:)(v109, 0);
      v55 = v54;
      v117 = sub_100012B20(v53, v54, v118);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v117, v118, v51 + 4, v51 + 12);
      swift_bridgeObjectRelease(v55);
      *(_WORD *)(v51 + 12) = 1024;
      v56 = v114;
      LODWORD(v117) = v114 & 1;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v117, (char *)&v117 + 4, v51 + 14, v51 + 18);
      _os_log_impl((void *)&_mh_execute_header, v49, v50, "%s [TCC] Did select notification authorization: %{BOOL}d", (uint8_t *)v51, 0x12u);
      swift_arrayDestroy(v52, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v52, -1, -1);
      swift_slowDealloc(v51, -1, -1);

      v57 = (*(uint64_t (**)(uint64_t, uint64_t))(v107 + 8))(v47, v108);
      v58 = v116;
    }
    else
    {

      v57 = (*(uint64_t (**)(uint64_t, uint64_t))(v107 + 8))(v47, v108);
      v58 = v116;
      v56 = v114;
    }
    v82 = v105;
    v83 = v106;
    v85 = v103;
    v84 = v104;
    v86 = (void *)static NSNotificationName.healthAppNotificationSettingsDidChange.getter(v57);
    v87 = objc_msgSend((id)objc_opt_self(NSNotificationCenter), "defaultCenter");
    objc_msgSend(v87, "postNotificationName:object:", v86, 0);

    v88 = objc_allocWithZone((Class)type metadata accessor for PostNotificationOperation(0));
    v89 = v86;
    v90 = (void *)PostNotificationOperation.init(name:userInfo:)(v89, 0);
    sub_100043F34();
    v91 = (void *)static NSOperationQueue.userInitiated.getter();
    objc_msgSend(v91, "addOperation:", v90);

    v92 = v100;
    (*(void (**)(char *, _QWORD, uint64_t))(v98 + 104))(v100, enum case for NotificationAuthorizationAnalyticsEvent.Context.healthAppOnboarding(_:), v99);
    v93 = (unsigned int *)&enum case for NotificationAuthorizationAnalyticsEvent.SelectedAction.allowNotifications(_:);
    if ((v56 & 1) == 0)
      v93 = (unsigned int *)&enum case for NotificationAuthorizationAnalyticsEvent.SelectedAction.doNotAllowNotifications(_:);
    (*(void (**)(char *, _QWORD, uint64_t))(v101 + 104))(v83, *v93, v102);
    NotificationAuthorizationAnalyticsEvent.init(context:featureDomain:featureName:selectedAction:)(v92, 0x412068746C616548, 0xEA00000000007070, 0, 0, v83);
    sub_100013198(&qword_1000EDE30, (uint64_t (*)(uint64_t))&type metadata accessor for NotificationAuthorizationAnalyticsEvent, (uint64_t)&protocol conformance descriptor for NotificationAuthorizationAnalyticsEvent);
    AnalyticsSubmitting.submit()();
    (*(void (**)(char *, uint64_t))(v84 + 8))(v85, v82);
    v58(v56 & 1, 0, 0, 2);
  }
  else
  {
    v71 = v95;
    v72 = static Logger.general.getter(v46);
    v73 = Logger.logObject.getter(v72);
    v74 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v73, (os_log_type_t)v74))
    {
      v75 = (uint8_t *)swift_slowAlloc(12, -1);
      v76 = swift_slowAlloc(32, -1);
      v118[0] = v76;
      *(_DWORD *)v75 = 136315138;
      v77 = _typeName(_:qualified:)(v109, 0);
      v78 = v42;
      v80 = v79;
      v117 = sub_100012B20(v77, v79, v118);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v117, v118, v75 + 4, v75 + 12);
      v81 = v80;
      v42 = v78;
      swift_bridgeObjectRelease(v81);
      _os_log_impl((void *)&_mh_execute_header, v73, (os_log_type_t)v74, "%s [TCC] Did not select valid authorization. Remaining in buddy flow", v75, 0xCu);
      swift_arrayDestroy(v76, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v76, -1, -1);
      swift_slowDealloc(v75, -1, -1);
    }

    (*(void (**)(uint64_t, uint64_t))(v107 + 8))(v71, v108);
    v116(v114 & 1, 2, 0, 2);
  }
  return swift_release(v42);
}

uint64_t sub_1000422AC(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  char v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;

  v6 = AdvertisableFeatureModel.shouldEnable.getter();
  if ((v6 & 1) != 0)
  {
    AdvertisableFeatureModel.shouldEnable.setter(0);
    v7 = swift_retain(a3);
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v7);
    v9 = *(_QWORD *)((*a4 & 0xFFFFFFFFFFFFFF8) + 0x10);
    v8 = *(_QWORD *)((*a4 & 0xFFFFFFFFFFFFFF8) + 0x18);
    if (v9 >= v8 >> 1)
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v8 > 1, v9 + 1, 1);
    v10 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v9, a3);
    specialized Array._endMutation()(v10);
  }
  return v6 & 1;
}

uint64_t sub_100042350(char a1, char a2, uint64_t (*a3)(uint64_t, _QWORD, uint64_t, __n128), uint64_t a4)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t ObjectType;
  uint64_t v11;
  __n128 v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;

  v5 = v4;
  v8 = *v4;
  if ((a2 & 1) != 0 && (a1 & 1) != 0)
  {
    v9 = sub_10004004C();
    ObjectType = swift_getObjectType(v9);
    __chkstk_darwin(ObjectType);
    dispatch thunk of AdvertisableFeatureManaging.modifyAdvertisedModels(modifierBlock:)(sub_100043ED4);
    swift_unknownObjectRelease(v9);
    if ((unint64_t)_swiftEmptyArrayStorage >> 62)
    {
      v24 = (uint64_t)_swiftEmptyArrayStorage < 0
          ? _swiftEmptyArrayStorage
          : (_QWORD *)((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8);
      swift_bridgeObjectRetain(_swiftEmptyArrayStorage);
      v11 = _CocoaArrayWrapper.endIndex.getter(v24);
      swift_bridgeObjectRelease(_swiftEmptyArrayStorage);
    }
    else
    {
      v11 = *(_QWORD *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFF8) + 0x10);
    }
    v12 = swift_bridgeObjectRelease(_swiftEmptyArrayStorage);
    if (v11)
      return a3(1, 0, 2, v12);
  }
  v14 = sub_10004004C();
  v16 = v15;
  v17 = swift_getObjectType(v14);
  dispatch thunk of AdvertisableFeatureManaging.freezeAdvertisementState()(v17, v16);
  swift_unknownObjectRelease(v14);
  v18 = sub_10004004C();
  v20 = v19;
  v21 = swift_getObjectType(v18);
  v22 = swift_allocObject(&unk_1000DE5F0, 24, 7);
  swift_weakInit(v22 + 16, v5);
  v23 = (_QWORD *)swift_allocObject(&unk_1000DE618, 48, 7);
  v23[2] = v22;
  v23[3] = a3;
  v23[4] = a4;
  v23[5] = v8;
  swift_retain(v22);
  swift_retain(a4);
  dispatch thunk of AdvertisableFeatureManaging.commitEnablement(completion:)(sub_100043EC8, v23, v21, v20);
  swift_unknownObjectRelease(v18);
  swift_release(v22);
  return swift_release(v23);
}

uint64_t sub_10004252C(uint64_t a1, uint64_t a2, void (*a3)(uint64_t), uint64_t a4, NSObject *a5)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t (*v30)(_QWORD);
  uint64_t EnumCaseMultiPayload;
  uint64_t v32;
  uint64_t (*v33)(char *, char *, uint64_t);
  uint64_t v34;
  NSObject *v35;
  os_log_type_t v36;
  int v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  __n128 v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  __n128 v49;
  void (*v50)(char *, uint64_t, __n128);
  os_log_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  NSObject *v55;
  os_log_type_t v56;
  uint8_t *v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  unint64_t v61;
  uint64_t result;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  id v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  __n128 v71;
  uint64_t v72;
  uint64_t v73;
  int v74;
  uint64_t v75;
  os_log_t v76;
  char *v77;
  char *v78;
  void (*v79)(uint64_t);
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83[3];
  uint64_t v84;
  uint64_t v85;

  v75 = a2;
  v76 = a5;
  v79 = a3;
  v80 = a4;
  v6 = type metadata accessor for Locale(0);
  __chkstk_darwin(v6);
  v78 = (char *)&v72 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for String.LocalizationValue(0);
  __chkstk_darwin(v8);
  v77 = (char *)&v72 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for AdvertisableFeatureError(0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = __chkstk_darwin(v10);
  v14 = (char *)&v72 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = __chkstk_darwin(v12);
  v17 = (char *)&v72 - v16;
  __chkstk_darwin(v15);
  v19 = (char *)&v72 - v18;
  v20 = type metadata accessor for Logger(0);
  v81 = *(_QWORD *)(v20 - 8);
  v82 = v20;
  v21 = __chkstk_darwin(v20);
  v23 = (char *)&v72 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v21);
  v25 = (char *)&v72 - v24;
  sub_100043CE0(0);
  v27 = v26;
  __chkstk_darwin(v26);
  v29 = (char *)&v72 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001375C(a1, (uint64_t)v29, v30);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v29, v27);
  if ((_DWORD)EnumCaseMultiPayload == 1)
  {
    v32 = (*(uint64_t (**)(char *, char *, uint64_t))(v11 + 32))(v19, v29, v10);
    static Logger.advertisableFeatures.getter(v32);
    v33 = *(uint64_t (**)(char *, char *, uint64_t))(v11 + 16);
    v34 = v33(v17, v19, v10);
    v35 = Logger.logObject.getter(v34);
    v36 = static os_log_type_t.error.getter();
    v37 = v36;
    v38 = v19;
    if (os_log_type_enabled(v35, v36))
    {
      v39 = swift_slowAlloc(22, -1);
      v75 = swift_slowAlloc(64, -1);
      v83[0] = v75;
      *(_DWORD *)v39 = 136315394;
      v73 = v39 + 4;
      v40 = _typeName(_:qualified:)(v76, 0);
      v76 = v35;
      v41 = v38;
      v43 = v42;
      v84 = sub_100012B20(v40, v42, v83);
      v74 = v37;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v84, &v85, v73, v39 + 12);
      v44 = v43;
      v38 = v41;
      v45 = swift_bridgeObjectRelease(v44);
      *(_WORD *)(v39 + 12) = 2080;
      ((void (*)(char *, char *, uint64_t, __n128))v33)(v14, v17, v10, v45);
      v46 = String.init<A>(describing:)(v14, v10);
      v48 = v47;
      v84 = sub_100012B20(v46, v47, v83);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v84, &v85, v39 + 14, v39 + 22);
      v49 = swift_bridgeObjectRelease(v48);
      v50 = *(void (**)(char *, uint64_t, __n128))(v11 + 8);
      v50(v17, v10, v49);
      v51 = v76;
      _os_log_impl((void *)&_mh_execute_header, v76, (os_log_type_t)v74, "[%s] Error when committing features, presenting alert then continuing: %s", (uint8_t *)v39, 0x16u);
      v52 = v75;
      swift_arrayDestroy(v75, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v52, -1, -1);
      swift_slowDealloc(v39, -1, -1);

    }
    else
    {
      v50 = *(void (**)(char *, uint64_t, __n128))(v11 + 8);
      ((void (*)(char *, uint64_t))v50)(v17, v10);

    }
    (*(void (**)(char *, uint64_t))(v81 + 8))(v23, v82);
    v64 = v77;
    String.LocalizationValue.init(stringLiteral:)(0xD000000000000032, 0x80000001000BA450);
    if (qword_1000EC028 != -1)
      swift_once(&qword_1000EC028, sub_10003FFE0);
    v65 = qword_1000F0EF8;
    v66 = (id)qword_1000F0EF8;
    v67 = v78;
    static Locale.current.getter(v66);
    v68 = String.init(localized:table:bundle:locale:comment:)(v64, 0, 0, v65, v67, 0, 0, 256);
    v70 = v69;
    v79(v68);
    v71 = swift_bridgeObjectRelease(v70);
    return ((uint64_t (*)(char *, uint64_t, __n128))v50)(v38, v10, v71);
  }
  else
  {
    v53 = v75 + 16;
    v54 = static Logger.advertisableFeatures.getter(EnumCaseMultiPayload);
    v55 = Logger.logObject.getter(v54);
    v56 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v55, v56))
    {
      v57 = (uint8_t *)swift_slowAlloc(12, -1);
      v58 = swift_slowAlloc(32, -1);
      v83[0] = v58;
      *(_DWORD *)v57 = 136315138;
      v59 = _typeName(_:qualified:)(v76, 0);
      v61 = v60;
      v84 = sub_100012B20(v59, v60, v83);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v84, &v85, v57 + 4, v57 + 12);
      swift_bridgeObjectRelease(v61);
      _os_log_impl((void *)&_mh_execute_header, v55, v56, "[%s] Successfully committed enablement of features", v57, 0xCu);
      swift_arrayDestroy(v58, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v58, -1, -1);
      swift_slowDealloc(v57, -1, -1);
    }

    (*(void (**)(char *, uint64_t))(v81 + 8))(v25, v82);
    swift_beginAccess(v53, v83, 0, 0);
    result = swift_weakLoadStrong(v53);
    if (result)
    {
      v63 = result;
      sub_100042ADC((uint64_t)v79, v80);
      return swift_release(v63);
    }
  }
  return result;
}

uint64_t sub_100042ADC(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t ObjectType;
  _QWORD *v10;

  v5 = *v2;
  v6 = sub_10004004C();
  v8 = v7;
  ObjectType = swift_getObjectType(v6);
  v10 = (_QWORD *)swift_allocObject(&unk_1000DE5C8, 40, 7);
  v10[2] = a1;
  v10[3] = a2;
  v10[4] = v5;
  swift_retain(a2);
  dispatch thunk of AdvertisableFeatureManaging.determinePostCommitWorkItems(completion:)(sub_100043D88, v10, ObjectType, v8);
  swift_unknownObjectRelease(v6);
  return swift_release(v10);
}

void sub_100042B78(uint64_t a1, void (*a2)(_QWORD, _QWORD, uint64_t), uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t (*v25)(_QWORD);
  uint64_t EnumCaseMultiPayload;
  uint64_t v27;
  uint64_t (*v28)(char *, char *, uint64_t);
  uint64_t v29;
  NSObject *v30;
  os_log_type_t v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  __n128 v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  __n128 v42;
  void (*v43)(char *, uint64_t, __n128);
  os_log_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  NSObject *v48;
  os_log_type_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  unint64_t v54;
  uint64_t v55;
  void (*v56)(_QWORD, _QWORD, uint64_t, __n128);
  __n128 v57;
  uint64_t v58;
  os_log_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  void (*v65)(_QWORD, _QWORD, uint64_t);
  uint64_t v66;
  uint64_t v67;

  v61 = a4;
  v64 = a3;
  v65 = a2;
  v5 = type metadata accessor for AdvertisableFeatureError(0);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = __chkstk_darwin(v5);
  v9 = (char *)&v58 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __chkstk_darwin(v7);
  v12 = (char *)&v58 - v11;
  __chkstk_darwin(v10);
  v14 = (char *)&v58 - v13;
  v15 = type metadata accessor for Logger(0);
  v62 = *(_QWORD *)(v15 - 8);
  v63 = v15;
  v16 = __chkstk_darwin(v15);
  v18 = (char *)&v58 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  v20 = (char *)&v58 - v19;
  sub_100043D94(0);
  v22 = v21;
  __chkstk_darwin(v21);
  v24 = (uint64_t *)((char *)&v58 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_10001375C(a1, (uint64_t)v24, v25);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v24, v22);
  if ((_DWORD)EnumCaseMultiPayload == 1)
  {
    v27 = (*(uint64_t (**)(char *, uint64_t *, uint64_t))(v6 + 32))(v14, v24, v5);
    static Logger.advertisableFeatures.getter(v27);
    v28 = *(uint64_t (**)(char *, char *, uint64_t))(v6 + 16);
    v29 = v28(v12, v14, v5);
    v30 = Logger.logObject.getter(v29);
    v31 = static os_log_type_t.error.getter();
    v32 = v31;
    if (os_log_type_enabled(v30, v31))
    {
      v33 = swift_slowAlloc(22, -1);
      v59 = v30;
      v34 = v33;
      v60 = swift_slowAlloc(64, -1);
      v67 = v60;
      *(_DWORD *)v34 = 136315394;
      v58 = v34 + 4;
      v35 = _typeName(_:qualified:)(v61, 0);
      v37 = v36;
      v66 = sub_100012B20(v35, v36, &v67);
      LODWORD(v61) = v32;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v66, &v67, v58, v34 + 12);
      v38 = swift_bridgeObjectRelease(v37);
      *(_WORD *)(v34 + 12) = 2080;
      v58 = v34 + 14;
      ((void (*)(char *, char *, uint64_t, __n128))v28)(v9, v12, v5, v38);
      v39 = String.init<A>(describing:)(v9, v5);
      v41 = v40;
      v66 = sub_100012B20(v39, v40, &v67);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v66, &v67, v58, v34 + 22);
      v42 = swift_bridgeObjectRelease(v41);
      v43 = *(void (**)(char *, uint64_t, __n128))(v6 + 8);
      v43(v12, v5, v42);
      v44 = v59;
      _os_log_impl((void *)&_mh_execute_header, v59, (os_log_type_t)v61, "[%s] Error when determining post work items, continuing as commit succeeded: %s", (uint8_t *)v34, 0x16u);
      v45 = v60;
      swift_arrayDestroy(v60, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v45, -1, -1);
      swift_slowDealloc(v34, -1, -1);

    }
    else
    {
      v43 = *(void (**)(char *, uint64_t, __n128))(v6 + 8);
      ((void (*)(char *, uint64_t))v43)(v12, v5);

    }
    (*(void (**)(char *, uint64_t))(v62 + 8))(v18, v63);
    v65(0, 0, 2);
    ((void (*)(char *, uint64_t))v43)(v14, v5);
  }
  else
  {
    v46 = *v24;
    static Logger.advertisableFeatures.getter(EnumCaseMultiPayload);
    v47 = swift_bridgeObjectRetain_n(v46, 2);
    v48 = Logger.logObject.getter(v47);
    v49 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v48, v49))
    {
      v50 = swift_slowAlloc(22, -1);
      v51 = swift_slowAlloc(32, -1);
      v67 = v51;
      *(_DWORD *)v50 = 136315394;
      v52 = _typeName(_:qualified:)(v61, 0);
      v54 = v53;
      v66 = sub_100012B20(v52, v53, &v67);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v66, &v67, v50 + 4, v50 + 12);
      swift_bridgeObjectRelease(v54);
      *(_WORD *)(v50 + 12) = 2048;
      v55 = *(_QWORD *)(v46 + 16);
      swift_bridgeObjectRelease(v46);
      v66 = v55;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v66, &v67, v50 + 14, v50 + 22);
      swift_bridgeObjectRelease(v46);
      _os_log_impl((void *)&_mh_execute_header, v48, v49, "[%s] Retrieved %ld post commit work items", (uint8_t *)v50, 0x16u);
      swift_arrayDestroy(v51, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v51, -1, -1);
      swift_slowDealloc(v50, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n(v46, 2);
    }
    (*(void (**)(char *, uint64_t))(v62 + 8))(v20, v63);
    v56 = (void (*)(_QWORD, _QWORD, uint64_t, __n128))v65;
    if (*(_QWORD *)(v46 + 16))
    {
      v65(v46, 0, 0);
      swift_bridgeObjectRelease(v46);
    }
    else
    {
      v57 = swift_bridgeObjectRelease(v46);
      v56(0, 0, 2, v57);
    }
  }
}

uint64_t sub_100043080()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  uint64_t v11;
  uint8_t *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint8_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t ObjectType;
  uint64_t v22;
  uint8_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v1 = v0;
  v2 = *v0;
  v3 = type metadata accessor for Logger(0);
  v4 = *(_QWORD *)(v3 - 8);
  result = __chkstk_darwin(v3);
  v7 = (char *)&v23 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((v1[12] & 1) == 0)
  {
    *((_BYTE *)v1 + 96) = 1;
    v8 = static Logger.advertisableFeatures.getter(result);
    v9 = Logger.logObject.getter(v8);
    v10 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v9, v10))
    {
      v11 = swift_slowAlloc(12, -1);
      v24 = v2;
      v12 = (uint8_t *)v11;
      v13 = swift_slowAlloc(32, -1);
      v26 = v13;
      *(_DWORD *)v12 = 136315138;
      v23 = v12 + 4;
      v14 = _typeName(_:qualified:)(v24, 0);
      v16 = v15;
      v25 = sub_100012B20(v14, v15, &v26);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v25, &v26, v23, v12 + 12);
      swift_bridgeObjectRelease(v16);
      _os_log_impl((void *)&_mh_execute_header, v9, v10, "[%s] Performing prerequisite work", v12, 0xCu);
      swift_arrayDestroy(v13, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v13, -1, -1);
      v17 = v12;
      v2 = v24;
      swift_slowDealloc(v17, -1, -1);
    }

    (*(void (**)(char *, uint64_t))(v4 + 8))(v7, v3);
    v18 = sub_10004004C();
    v20 = v19;
    ObjectType = swift_getObjectType(v18);
    v22 = swift_allocObject(&unk_1000DE5A0, 24, 7);
    *(_QWORD *)(v22 + 16) = v2;
    dispatch thunk of AdvertisableFeatureManaging.performPrerequisiteWork(completion:)(sub_100043CD8, v22, ObjectType, v20);
    swift_unknownObjectRelease(v18);
    return swift_release(v22);
  }
  return result;
}

uint64_t sub_100043288(uint64_t a1, NSObject *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t (*v23)(_QWORD);
  uint64_t EnumCaseMultiPayload;
  uint64_t v25;
  uint64_t (*v26)(char *, char *, uint64_t);
  uint64_t v27;
  NSObject *v28;
  os_log_type_t v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  __n128 v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  __n128 v40;
  void (*v41)(char *, uint64_t, __n128);
  os_log_t v42;
  uint64_t v43;
  uint64_t v44;
  NSObject *v45;
  os_log_type_t v46;
  uint8_t *v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  uint64_t v53;
  int v54;
  uint64_t v55;
  os_log_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;

  v56 = a2;
  v3 = type metadata accessor for AdvertisableFeatureError(0);
  v4 = *(_QWORD *)(v3 - 8);
  v5 = __chkstk_darwin(v3);
  v7 = (char *)&v53 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __chkstk_darwin(v5);
  v10 = (char *)&v53 - v9;
  __chkstk_darwin(v8);
  v12 = (char *)&v53 - v11;
  v13 = type metadata accessor for Logger(0);
  v57 = *(_QWORD *)(v13 - 8);
  v58 = v13;
  v14 = __chkstk_darwin(v13);
  v16 = (char *)&v53 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  v18 = (char *)&v53 - v17;
  sub_100043CE0(0);
  v20 = v19;
  __chkstk_darwin(v19);
  v22 = (char *)&v53 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001375C(a1, (uint64_t)v22, v23);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v22, v20);
  if ((_DWORD)EnumCaseMultiPayload == 1)
  {
    v25 = (*(uint64_t (**)(char *, char *, uint64_t))(v4 + 32))(v12, v22, v3);
    static Logger.advertisableFeatures.getter(v25);
    v26 = *(uint64_t (**)(char *, char *, uint64_t))(v4 + 16);
    v27 = v26(v10, v12, v3);
    v28 = Logger.logObject.getter(v27);
    v29 = static os_log_type_t.default.getter();
    v30 = v29;
    if (os_log_type_enabled(v28, v29))
    {
      v31 = swift_slowAlloc(22, -1);
      v54 = v30;
      v32 = v31;
      v55 = swift_slowAlloc(64, -1);
      v60 = v55;
      *(_DWORD *)v32 = 136315394;
      v53 = v32 + 4;
      v33 = _typeName(_:qualified:)(v56, 0);
      v56 = v28;
      v35 = v34;
      v59 = sub_100012B20(v33, v34, &v60);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v59, &v60, v53, v32 + 12);
      v36 = swift_bridgeObjectRelease(v35);
      *(_WORD *)(v32 + 12) = 2080;
      v53 = v32 + 14;
      ((void (*)(char *, char *, uint64_t, __n128))v26)(v7, v10, v3, v36);
      v37 = String.init<A>(describing:)(v7, v3);
      v39 = v38;
      v59 = sub_100012B20(v37, v38, &v60);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v59, &v60, v53, v32 + 22);
      v40 = swift_bridgeObjectRelease(v39);
      v41 = *(void (**)(char *, uint64_t, __n128))(v4 + 8);
      v41(v10, v3, v40);
      v42 = v56;
      _os_log_impl((void *)&_mh_execute_header, v56, (os_log_type_t)v54, "[%s] Prerequisite work failed to complete with error: %s", (uint8_t *)v32, 0x16u);
      v43 = v55;
      swift_arrayDestroy(v55, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v43, -1, -1);
      swift_slowDealloc(v32, -1, -1);

    }
    else
    {

      v41 = *(void (**)(char *, uint64_t, __n128))(v4 + 8);
      ((void (*)(char *, uint64_t))v41)(v10, v3);
    }
    (*(void (**)(char *, uint64_t))(v57 + 8))(v16, v58);
    return ((uint64_t (*)(char *, uint64_t))v41)(v12, v3);
  }
  else
  {
    v44 = static Logger.advertisableFeatures.getter(EnumCaseMultiPayload);
    v45 = Logger.logObject.getter(v44);
    v46 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v45, v46))
    {
      v47 = (uint8_t *)swift_slowAlloc(12, -1);
      v48 = swift_slowAlloc(32, -1);
      v60 = v48;
      *(_DWORD *)v47 = 136315138;
      v49 = _typeName(_:qualified:)(v56, 0);
      v51 = v50;
      v59 = sub_100012B20(v49, v50, &v60);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v59, &v60, v47 + 4, v47 + 12);
      swift_bridgeObjectRelease(v51);
      _os_log_impl((void *)&_mh_execute_header, v45, v46, "[%s] Prerequisite work completed", v47, 0xCu);
      swift_arrayDestroy(v48, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v48, -1, -1);
      swift_slowDealloc(v47, -1, -1);
    }

    return (*(uint64_t (**)(char *, uint64_t))(v57 + 8))(v18, v58);
  }
}

uint64_t sub_1000436E0()
{
  _QWORD *v0;

  _s6Health23OpenSleepScheduleIntentVwxx_0(v0 + 2);
  _s6Health23OpenSleepScheduleIntentVwxx_0(v0 + 7);
  swift_unknownObjectRelease(v0[13]);
  return swift_deallocClassInstance(v0, 120, 7);
}

uint64_t type metadata accessor for HealthNotificationsWelcomeViewModel()
{
  return objc_opt_self(_TtC6Health35HealthNotificationsWelcomeViewModel);
}

uint64_t sub_100043734(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  unint64_t v12;
  void (*v13)(char *, unint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  void (*v19)(char *, uint64_t);
  BOOL v21;
  uint64_t v23;
  uint64_t v24;

  v4 = type metadata accessor for AdvertisableFeaturePostCommitWorkItem(0);
  v5 = __chkstk_darwin(v4);
  v7 = (char *)&v23 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v10 = (char *)&v23 - v9;
  v11 = *(_QWORD *)(a1 + 16);
  if (v11 == *(_QWORD *)(a2 + 16))
  {
    if (!v11 || a1 == a2)
    {
      v18 = 1;
    }
    else
    {
      v12 = (*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
      v23 = *(_QWORD *)(v8 + 72);
      v24 = v8;
      v13 = *(void (**)(char *, unint64_t, uint64_t))(v8 + 16);
      v14 = v11 - 1;
      do
      {
        v15 = a1;
        v13(v10, a1 + v12, v4);
        v16 = a2;
        v13(v7, a2 + v12, v4);
        v17 = sub_100013198(&qword_1000EDE60, (uint64_t (*)(uint64_t))&type metadata accessor for AdvertisableFeaturePostCommitWorkItem, (uint64_t)&protocol conformance descriptor for AdvertisableFeaturePostCommitWorkItem);
        v18 = dispatch thunk of static Equatable.== infix(_:_:)(v10, v7, v4, v17);
        v19 = *(void (**)(char *, uint64_t))(v24 + 8);
        v19(v7, v4);
        v19(v10, v4);
        v21 = v14-- != 0;
        if ((v18 & 1) == 0)
          break;
        v12 += v23;
        a2 = v16;
        a1 = v15;
      }
      while (v21);
    }
  }
  else
  {
    v18 = 0;
  }
  return v18 & 1;
}

int64_t sub_1000438BC(int64_t result, int a2, char a3, uint64_t a4)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;

  if ((a3 & 1) != 0)
    goto LABEL_20;
  v4 = result;
  if (result < 0 || (result = 1 << *(_BYTE *)(a4 + 32), result <= (uint64_t)v4))
  {
    __break(1u);
    goto LABEL_18;
  }
  v5 = v4 >> 6;
  v6 = a4 + 56;
  v7 = *(_QWORD *)(a4 + 56 + 8 * (v4 >> 6));
  if (((v7 >> v4) & 1) == 0)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  if (*(_DWORD *)(a4 + 36) != a2)
  {
LABEL_19:
    __break(1u);
LABEL_20:
    __break(1u);
    return result;
  }
  v8 = v7 & (-2 << (v4 & 0x3F));
  if (v8)
    return __clz(__rbit64(v8)) | v4 & 0xFFFFFFFFFFFFFFC0;
  v9 = v5 + 1;
  v10 = (unint64_t)(result + 63) >> 6;
  if (v5 + 1 < v10)
  {
    v11 = *(_QWORD *)(v6 + 8 * v9);
    if (v11)
      return __clz(__rbit64(v11)) + (v9 << 6);
    v9 = v5 + 2;
    if (v5 + 2 < v10)
    {
      v11 = *(_QWORD *)(v6 + 8 * v9);
      if (v11)
        return __clz(__rbit64(v11)) + (v9 << 6);
      while (v10 - 3 != v5)
      {
        v11 = *(_QWORD *)(a4 + 80 + 8 * v5++);
        if (v11)
        {
          v9 = v5 + 2;
          return __clz(__rbit64(v11)) + (v9 << 6);
        }
      }
    }
  }
  return result;
}

uint64_t sub_1000439A0(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, char a6)
{
  if (!a3)
  {
    if (!a6)
      return sub_100043734(a1, a4);
    return 0;
  }
  if (a3 != 1)
  {
    if (a1 | a2)
    {
      if (a1 ^ 1 | a2)
      {
        if (a6 == 2 && a4 == 2 && !a5)
          return 1;
      }
      else if (a6 == 2 && a4 == 1 && !a5)
      {
        return 1;
      }
    }
    else if (a6 == 2 && !(a5 | a4))
    {
      return 1;
    }
    return 0;
  }
  if (a6 != 1)
    return 0;
  if (a1 == a4 && a2 == a5)
    return 1;
  else
    return _stringCompareWithSmolCheck(_:_:expecting:)(a1, a2, a4, a5, 0);
}

unint64_t sub_100043A6C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t result;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  id v7;
  void *v8;
  unint64_t v9;
  unint64_t v10;
  __int128 v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t ObjectType;
  char v21;
  __int128 v22;
  __int128 v23;

  type metadata accessor for FoundationPluginBundleProvider(0);
  v0 = static FoundationPluginBundleProvider.sharedInstance.getter();
  v1 = dispatch thunk of PluginBundleProvider.notificationDelegateProvidingPluginBundles.getter();
  swift_release(v0);
  if ((unint64_t)v1 >> 62)
  {
    if (v1 < 0)
      v13 = v1;
    else
      v13 = v1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v1);
    v2 = _CocoaArrayWrapper.endIndex.getter(v13);
    if (v2)
      goto LABEL_3;
LABEL_19:
    v6 = _swiftEmptyArrayStorage;
    goto LABEL_20;
  }
  v2 = *(_QWORD *)((v1 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain(v1);
  if (!v2)
    goto LABEL_19;
LABEL_3:
  result = sub_100043C78();
  if (v2 < 1)
  {
    __break(1u);
    return result;
  }
  v4 = result;
  v5 = 0;
  v6 = _swiftEmptyArrayStorage;
  do
  {
    if ((v1 & 0xC000000000000001) != 0)
      v7 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v5, v1);
    else
      v7 = *(id *)(v1 + 8 * v5 + 32);
    v8 = v7;
    NSBundle.getPluginAppDelegateObject<A>(as:)(&v23, v4, v4);

    if ((_QWORD)v23)
    {
      v22 = v23;
      if ((swift_isUniquelyReferenced_nonNull_native(v6) & 1) == 0)
        v6 = sub_100029D1C(0, v6[2] + 1, 1, v6);
      v10 = v6[2];
      v9 = v6[3];
      v11 = v22;
      if (v10 >= v9 >> 1)
      {
        v12 = sub_100029D1C((_QWORD *)(v9 > 1), v10 + 1, 1, v6);
        v11 = v22;
        v6 = v12;
      }
      v6[2] = v10 + 1;
      *(_OWORD *)&v6[2 * v10 + 4] = v11;
    }
    ++v5;
  }
  while (v2 != v5);
LABEL_20:
  swift_bridgeObjectRelease_n(v1, 2);
  v14 = v6[2];
  if (v14)
  {
    v15 = v14 - 1;
    v16 = v6 + 5;
    do
    {
      v17 = v15;
      v19 = *(v16 - 1);
      v18 = *v16;
      ObjectType = swift_getObjectType(v19);
      swift_unknownObjectRetain(v19);
      v21 = dispatch thunk of PluginNotificationCenterDelegateProviding.providesCriticalAlerts()(ObjectType, v18);
      swift_unknownObjectRelease(v19);
      if ((v21 & 1) != 0)
        break;
      v15 = v17 - 1;
      v16 += 2;
    }
    while (v17);
  }
  else
  {
    v21 = 0;
  }
  swift_bridgeObjectRelease(v6);
  return v21 & 1;
}

unint64_t sub_100043C78()
{
  unint64_t result;
  void *v1;

  result = qword_1000ED428;
  if (!qword_1000ED428)
  {
    v1 = &protocol descriptor for PluginNotificationCenterDelegateProviding;
    result = swift_getExistentialTypeMetadata(0, 0, 1, &v1);
    atomic_store(result, (unint64_t *)&qword_1000ED428);
  }
  return result;
}

uint64_t sub_100043CC8()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100043CD8(uint64_t a1)
{
  uint64_t v1;

  return sub_100043288(a1, *(NSObject **)(v1 + 16));
}

void sub_100043CE0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;

  if (!qword_1000EDE10)
  {
    v2 = type metadata accessor for AdvertisableFeatureError(255);
    v3 = sub_100013198(&qword_1000EDE18, (uint64_t (*)(uint64_t))&type metadata accessor for AdvertisableFeatureError, (uint64_t)&protocol conformance descriptor for AdvertisableFeatureError);
    v4 = type metadata accessor for Result(a1, (char *)&type metadata for () + 8, v2, v3);
    if (!v5)
      atomic_store(v4, (unint64_t *)&qword_1000EDE10);
  }
}

uint64_t sub_100043D64()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 40, 7);
}

void sub_100043D88(uint64_t a1)
{
  uint64_t v1;

  sub_100042B78(a1, *(void (**)(_QWORD, _QWORD, uint64_t))(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32));
}

void sub_100043D94(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!qword_1000EDE20)
  {
    sub_100043E24(255);
    v3 = v2;
    v4 = type metadata accessor for AdvertisableFeatureError(255);
    v5 = sub_100013198(&qword_1000EDE18, (uint64_t (*)(uint64_t))&type metadata accessor for AdvertisableFeatureError, (uint64_t)&protocol conformance descriptor for AdvertisableFeatureError);
    v6 = type metadata accessor for Result(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&qword_1000EDE20);
  }
}

void sub_100043E24(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_1000EDE28)
  {
    v2 = type metadata accessor for AdvertisableFeaturePostCommitWorkItem(255);
    v3 = type metadata accessor for Array(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_1000EDE28);
  }
}

uint64_t sub_100043E78()
{
  uint64_t v0;

  swift_weakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100043E9C()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 48, 7);
}

uint64_t sub_100043EC8(uint64_t a1)
{
  uint64_t v1;

  return sub_10004252C(a1, *(_QWORD *)(v1 + 16), *(void (**)(uint64_t))(v1 + 24), *(_QWORD *)(v1 + 32), *(NSObject **)(v1 + 40));
}

uint64_t sub_100043ED4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_1000422AC(a1, a2, a3, *(_QWORD **)(v3 + 16));
}

uint64_t sub_100043EDC()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  swift_release(*(_QWORD *)(v0 + 40));
  return swift_deallocObject(v0, 56, 7);
}

uint64_t sub_100043F08(int a1, uint64_t a2)
{
  uint64_t v2;

  return sub_1000419A4(a1, a2, *(void (**)(_QWORD, uint64_t, uint64_t, uint64_t))(v2 + 16), *(_QWORD *)(v2 + 24), *(unsigned __int8 *)(v2 + 32), *(_QWORD *)(v2 + 40), *(_QWORD *)(v2 + 48));
}

uint64_t sub_100043F18(uint64_t result, uint64_t a2, char a3)
{
  if (a3)
  {
    if (a3 != 1)
      return result;
    result = a2;
  }
  return swift_bridgeObjectRelease(result);
}

unint64_t sub_100043F34()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000EDA38;
  if (!qword_1000EDA38)
  {
    v1 = objc_opt_self(NSOperationQueue);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_1000EDA38);
  }
  return result;
}

uint64_t sub_100043F70()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 40));
  return swift_deallocObject(v0, 56, 7);
}

uint64_t sub_100043F9C(uint64_t a1)
{
  uint64_t v1;

  return sub_1000413C4(a1, *(_QWORD *)(v1 + 16), *(_BYTE *)(v1 + 24), *(uint64_t (**)(uint64_t, _QWORD, uint64_t, __n128))(v1 + 32), *(_QWORD *)(v1 + 40), *(_QWORD *)(v1 + 48));
}

uint64_t sub_100043FB0()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100043FD8()
{
  return sub_100043FF8(41);
}

uint64_t sub_100043FE0(char a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  return sub_100041688(a1, a2, a3, a4, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 16), *(_QWORD *)(v4 + 24), *(_QWORD *)(v4 + 32), *(_BYTE *)(v4 + 40));
}

uint64_t sub_100043FF0()
{
  return sub_100043FF8(48);
}

uint64_t sub_100043FF8(uint64_t a1)
{
  uint64_t v1;

  swift_release(*(_QWORD *)(v1 + 24));
  swift_release(*(_QWORD *)(v1 + 32));
  return swift_deallocObject(v1, a1, 7);
}

uint64_t sub_100044030(uint64_t a1)
{
  uint64_t v1;

  return sub_1000403E8(a1, *(uint64_t (**)(uint64_t))(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 40));
}

uint64_t sub_10004403C(void *a1)
{
  uint64_t v1;

  return (*(uint64_t (**)(id))(v1 + 16))(objc_msgSend(a1, "authorizationStatus"));
}

void sub_100044068(uint64_t a1)
{
  uint64_t v1;

  sub_1000407E8(a1, *(void (**)(uint64_t))(v1 + 16), *(_QWORD *)(v1 + 24), *(uint8_t **)(v1 + 32));
}

void sub_100044074(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!qword_1000EDE38)
  {
    sub_100044114(255, &qword_1000EDE40, (uint64_t (*)(uint64_t, uint64_t, uint64_t))&type metadata accessor for Set);
    v3 = v2;
    v4 = type metadata accessor for AdvertisableFeatureError(255);
    v5 = sub_100013198(&qword_1000EDE18, (uint64_t (*)(uint64_t))&type metadata accessor for AdvertisableFeatureError, (uint64_t)&protocol conformance descriptor for AdvertisableFeatureError);
    v6 = type metadata accessor for Result(a1, v3, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&qword_1000EDE38);
  }
}

void sub_100044114(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;

  if (!*a2)
  {
    v6 = type metadata accessor for AdvertisableFeatureModel(255);
    v7 = sub_100013198(&qword_1000EDE48, (uint64_t (*)(uint64_t))&type metadata accessor for AdvertisableFeatureModel, (uint64_t)&protocol conformance descriptor for AdvertisableFeatureModel);
    v8 = a3(a1, v6, v7);
    if (!v9)
      atomic_store(v8, a2);
  }
}

uint64_t sub_100044190(uint64_t result, uint64_t a2, char a3)
{
  if ((a3 & 1) != 0)
    return swift_bridgeObjectRelease(result);
  return result;
}

uint64_t sub_1000441A0(uint64_t result, uint64_t a2, char a3)
{
  if (a3)
  {
    if (a3 != 1)
      return result;
    result = a2;
  }
  return swift_bridgeObjectRetain(result);
}

uint64_t destroy for HealthNotificationsWelcomeViewModel.ProgressionResult(uint64_t a1)
{
  return sub_100043F18(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
}

uint64_t _s6Health35HealthNotificationsWelcomeViewModelC17ProgressionResultOwCP_0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  char v5;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_BYTE *)(a2 + 16);
  sub_1000441A0(*(_QWORD *)a2, v4, v5);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = v5;
  return a1;
}

uint64_t assignWithCopy for HealthNotificationsWelcomeViewModel.ProgressionResult(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  char v8;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_BYTE *)(a2 + 16);
  sub_1000441A0(*(_QWORD *)a2, v4, v5);
  v6 = *(_QWORD *)a1;
  v7 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  v8 = *(_BYTE *)(a1 + 16);
  *(_BYTE *)(a1 + 16) = v5;
  sub_100043F18(v6, v7, v8);
  return a1;
}

__n128 initializeWithTake for HealthNotificationsWelcomeViewModel.ProgressionResult(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  a1[1].n128_u8[0] = a2[1].n128_u8[0];
  *a1 = result;
  return result;
}

uint64_t assignWithTake for HealthNotificationsWelcomeViewModel.ProgressionResult(uint64_t a1, uint64_t a2)
{
  char v3;
  uint64_t v4;
  uint64_t v5;
  char v6;

  v3 = *(_BYTE *)(a2 + 16);
  v4 = *(_QWORD *)a1;
  v5 = *(_QWORD *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  v6 = *(_BYTE *)(a1 + 16);
  *(_BYTE *)(a1 + 16) = v3;
  sub_100043F18(v4, v5, v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for HealthNotificationsWelcomeViewModel.ProgressionResult(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFE && *(_BYTE *)(a1 + 17))
    return (*(_DWORD *)a1 + 254);
  v3 = *(unsigned __int8 *)(a1 + 16);
  if (v3 <= 2)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for HealthNotificationsWelcomeViewModel.ProgressionResult(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(_BYTE *)(result + 16) = 0;
    *(_QWORD *)result = a2 - 254;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 17) = 1;
  }
  else
  {
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 17) = 0;
    if (a2)
      *(_BYTE *)(result + 16) = -(char)a2;
  }
  return result;
}

uint64_t sub_10004434C(uint64_t a1)
{
  if (*(unsigned __int8 *)(a1 + 16) <= 1u)
    return *(unsigned __int8 *)(a1 + 16);
  else
    return (*(_DWORD *)a1 + 2);
}

uint64_t sub_100044364(uint64_t result, unsigned int a2)
{
  if (a2 >= 2)
  {
    *(_QWORD *)result = a2 - 2;
    *(_QWORD *)(result + 8) = 0;
    LOBYTE(a2) = 2;
  }
  *(_BYTE *)(result + 16) = a2;
  return result;
}

ValueMetadata *type metadata accessor for HealthNotificationsWelcomeViewModel.ProgressionResult()
{
  return &type metadata for HealthNotificationsWelcomeViewModel.ProgressionResult;
}

uint64_t destroy for TitleSpacerDetailCell(uint64_t a1)
{
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
  return swift_bridgeObjectRelease(*(_QWORD *)(a1 + 24));
}

uint64_t initializeWithCopy for TitleSpacerDetailCell(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  v4 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v4;
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  return a1;
}

uint64_t assignWithCopy for TitleSpacerDetailCell(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  return a1;
}

__n128 initializeWithTake for TitleSpacerDetailCell(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t assignWithTake for TitleSpacerDetailCell(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease(v5);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v6;
  swift_bridgeObjectRelease(v7);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  return a1;
}

uint64_t getEnumTagSinglePayload for TitleSpacerDetailCell(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 33))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for TitleSpacerDetailCell(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_BYTE *)(result + 32) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 33) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 33) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for TitleSpacerDetailCell()
{
  return &type metadata for TitleSpacerDetailCell;
}

uint64_t sub_100044570(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_1000C0B6C, 1);
}

double sub_100044580@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  char v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  __n128 v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char v54;
  double result;
  char v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char v69;

  v4 = *(_QWORD *)(a1 + 8);
  v65 = *(_QWORD *)a1;
  v66 = v4;
  v5 = sub_10002D0D0();
  swift_bridgeObjectRetain(v4);
  v6 = Text.init<A>(_:)(&v65, &type metadata for String, v5);
  v57 = v7;
  v58 = v6;
  v56 = v8;
  v59 = v9;
  v10 = *(_QWORD *)(a1 + 24);
  if ((*(_BYTE *)(a1 + 32) & 1) != 0)
  {
    v65 = *(_QWORD *)(a1 + 16);
    v66 = v10;
    swift_bridgeObjectRetain(v10);
    v26 = Text.init<A>(_:)(&v65, &type metadata for String, v5);
    v28 = v27;
    v30 = v29;
    v32 = v31 & 1;
    v33 = static Color.secondary.getter(v26);
    v34 = Text.foregroundColor(_:)(v33, v26, v28, v32, v30);
    v36 = v35;
    v38 = v37;
    v40 = v39;
    swift_release(v33);
    v41 = v38 & 1;
    sub_1000308FC(v26, v28, v32);
    v42 = swift_bridgeObjectRelease(v30);
    v43 = Text.monospaced(_:)(1, v34, v36, v41, v40, v42);
    v45 = v44;
    v47 = v46;
    v49 = v48 & 1;
    sub_1000308FC(v34, v36, v41);
    swift_bridgeObjectRelease(v40);
    v60 = v43;
    v61 = v45;
    v62 = v49;
    v63 = v47;
    v64 = 0;
  }
  else
  {
    v65 = *(_QWORD *)(a1 + 16);
    v66 = v10;
    swift_bridgeObjectRetain(v10);
    v11 = Text.init<A>(_:)(&v65, &type metadata for String, v5);
    v13 = v12;
    v15 = v14;
    v17 = v16 & 1;
    v18 = static Color.secondary.getter(v11);
    v19 = Text.foregroundColor(_:)(v18, v11, v13, v17, v15);
    v21 = v20;
    v23 = v22;
    v25 = v24;
    swift_release(v18);
    sub_1000308FC(v11, v13, v17);
    swift_bridgeObjectRelease(v15);
    v60 = v19;
    v61 = v21;
    v62 = v23 & 1;
    v63 = v25;
    v64 = 1;
  }
  _ConditionalContent<>.init(storage:)(&v60, &type metadata for Text, &type metadata for Text, &protocol witness table for Text, &protocol witness table for Text);
  v50 = v65;
  v51 = v66;
  v52 = v67;
  v53 = v68;
  v54 = v69;
  *(_QWORD *)a2 = v58;
  *(_QWORD *)(a2 + 8) = v57;
  *(_BYTE *)(a2 + 16) = v56 & 1;
  *(_QWORD *)(a2 + 24) = v59;
  *(_QWORD *)(a2 + 32) = 0;
  *(_BYTE *)(a2 + 40) = 1;
  *(_QWORD *)(a2 + 48) = v50;
  *(_QWORD *)(a2 + 56) = v51;
  *(_QWORD *)(a2 + 64) = v52;
  *(_QWORD *)(a2 + 72) = v53;
  *(_BYTE *)(a2 + 80) = v54;
  sub_1000308E0(v58, v57, v56 & 1);
  swift_bridgeObjectRetain(v59);
  sub_1000448AC(v50, v51, v52, v53);
  sub_1000448D4(v50, v51, v52, v53);
  sub_1000308FC(v58, v57, v56 & 1);
  *(_QWORD *)&result = swift_bridgeObjectRelease(v59).n128_u64[0];
  return result;
}

__n128 sub_100044824@<Q0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  __int128 v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  char v9;
  __n128 result;
  __int128 v11;
  __int128 v12;
  __n128 v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  __int128 v18;
  __int128 v19;
  char v20;
  _OWORD v21[2];
  char v22;

  v3 = *(_OWORD *)(v1 + 16);
  v21[0] = *(_OWORD *)v1;
  v21[1] = v3;
  v22 = *(_BYTE *)(v1 + 32);
  v4 = static VerticalAlignment.firstTextBaseline.getter();
  sub_100044580((uint64_t)v21, (uint64_t)&v13);
  v5 = v14;
  v6 = v15;
  v7 = v16;
  v8 = v17;
  v9 = v20;
  result = v13;
  v11 = v18;
  v12 = v19;
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 16) = 1;
  *(__n128 *)(a1 + 24) = result;
  *(_BYTE *)(a1 + 40) = v5;
  *(_QWORD *)(a1 + 48) = v6;
  *(_QWORD *)(a1 + 56) = v7;
  *(_BYTE *)(a1 + 64) = v8;
  *(_OWORD *)(a1 + 72) = v11;
  *(_OWORD *)(a1 + 88) = v12;
  *(_BYTE *)(a1 + 104) = v9;
  return result;
}

uint64_t sub_1000448AC(uint64_t a1, uint64_t a2, char a3, uint64_t a4)
{
  sub_1000308E0(a1, a2, a3 & 1);
  return swift_bridgeObjectRetain(a4);
}

double sub_1000448D4(uint64_t a1, uint64_t a2, char a3, uint64_t a4)
{
  double result;

  sub_1000308FC(a1, a2, a3 & 1);
  *(_QWORD *)&result = swift_bridgeObjectRelease(a4).n128_u64[0];
  return result;
}

uint64_t sub_1000448FC()
{
  return sub_100013198(&qword_1000EDE68, (uint64_t (*)(uint64_t))sub_100044928, (uint64_t)&protocol conformance descriptor for HStack<A>);
}

void sub_100044928(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;

  if (!qword_1000EDE70)
  {
    sub_1000449A0(255);
    v3 = v2;
    v4 = sub_100013198(&qword_1000EDE90, (uint64_t (*)(uint64_t))sub_1000449A0, (uint64_t)&protocol conformance descriptor for TupleView<A>);
    v5 = type metadata accessor for HStack(a1, v3, v4);
    if (!v6)
      atomic_store(v5, (unint64_t *)&qword_1000EDE70);
  }
}

void sub_1000449A0(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_1000EDE78)
  {
    sub_1000449F4(255);
    v3 = type metadata accessor for TupleView(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_1000EDE78);
  }
}

void sub_1000449F4(uint64_t a1)
{
  uint64_t v2;
  unint64_t TupleTypeMetadata3;
  uint64_t v4;

  if (!qword_1000EDE80)
  {
    sub_100044A60();
    TupleTypeMetadata3 = swift_getTupleTypeMetadata3(a1, &type metadata for Text, &type metadata for Spacer, v2, 0, 0);
    if (!v4)
      atomic_store(TupleTypeMetadata3, (unint64_t *)&qword_1000EDE80);
  }
}

void sub_100044A60()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1000EDE88)
  {
    v0 = type metadata accessor for _ConditionalContent(0, &type metadata for Text, &type metadata for Text);
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1000EDE88);
  }
}

uint64_t sub_100044AB8()
{
  uint64_t v0;
  uint64_t KeyPath;
  uint64_t v2;
  uint64_t v4;

  KeyPath = swift_getKeyPath(&unk_1000B2A68);
  v2 = swift_getKeyPath(&unk_1000B2A90);
  static Published.subscript.getter(&v4, v0, KeyPath, v2);
  swift_release(KeyPath);
  swift_release(v2);
  return v4;
}

uint64_t sub_100044B28(uint64_t a1, void *a2)
{
  swift_retain(a1);
  sub_100006A3C(a2, (void (*)(void))sub_10004685C, a1);
  return swift_release(a1);
}

uint64_t sub_100044B64(uint64_t a1)
{
  void *v2;
  uint64_t KeyPath;
  uint64_t v4;
  char v6;

  v2 = *(void **)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;

  KeyPath = swift_getKeyPath(&unk_1000B2A68);
  v4 = swift_getKeyPath(&unk_1000B2A90);
  v6 = 0;
  swift_retain(a1);
  return static Published.subscript.setter(&v6, a1, KeyPath, v4);
}

void sub_100044BDC(int a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  id v19;
  uint64_t Strong;
  uint64_t v21;
  void *v22;
  void *v23;
  id v24;
  id v25;
  id v26;
  void *v27;
  void *v28;
  uint64_t v29;
  unsigned int *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t KeyPath;
  uint64_t v34;
  id *v35;
  NSObject *v36;
  os_log_type_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char v56;
  _BYTE v57[24];
  id v58;
  _BYTE v59[16];
  uint64_t v60[3];

  v48 = a5;
  LODWORD(v55) = a1;
  v6 = type metadata accessor for Logger(0);
  v49 = *(_QWORD *)(v6 - 8);
  v50 = v6;
  __chkstk_darwin(v6);
  v8 = (char *)&v48 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v54 = type metadata accessor for NotificationAuthorizationAnalyticsEvent.SelectedAction(0);
  v52 = *(_QWORD *)(v54 - 8);
  __chkstk_darwin(v54);
  v10 = (char *)&v48 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v51 = type metadata accessor for NotificationAuthorizationAnalyticsEvent.Context(0);
  v11 = *(_QWORD *)(v51 - 8);
  __chkstk_darwin(v51);
  v13 = (char *)&v48 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for NotificationAuthorizationAnalyticsEvent(0);
  v53 = *(_QWORD *)(v14 - 8);
  v15 = __chkstk_darwin(v14);
  v17 = (char *)&v48 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = a4 + 16;
  v19 = (id)dispatch thunk of HealthAppNotificationManager.getNotificationSettings()(v15);
  if (objc_msgSend(v19, "authorizationStatus") == (id)2 || objc_msgSend(v19, "authorizationStatus") == (id)1)
  {
    swift_beginAccess(v18, v60, 0, 0);
    Strong = swift_weakLoadStrong(v18);
    if (Strong)
    {
      v21 = swift_release(Strong);
      v22 = (void *)static NSNotificationName.healthAppNotificationSettingsDidChange.getter(v21);
      v23 = (void *)objc_opt_self(NSNotificationCenter);
      v24 = objc_msgSend(v23, "defaultCenter", v48);
      objc_msgSend(v24, "postNotificationName:object:", v22, 0);

      v25 = objc_allocWithZone((Class)type metadata accessor for PostNotificationOperation(0));
      v26 = v22;
      v27 = (void *)PostNotificationOperation.init(name:userInfo:)();
      sub_100006D10(0, (unint64_t *)&qword_1000EDA38, NSOperationQueue_ptr);
      v28 = (void *)static NSOperationQueue.userInitiated.getter();
      objc_msgSend(v28, "addOperation:", v27);

    }
    swift_beginAccess(v18, &v58, 0, 0);
    v29 = swift_weakLoadStrong(v18);
    if (v29)
    {
      swift_release(v29);
      (*(void (**)(char *, _QWORD, uint64_t))(v11 + 104))(v13, enum case for NotificationAuthorizationAnalyticsEvent.Context.healthAppOnboarding(_:), v51);
      v30 = (unsigned int *)&enum case for NotificationAuthorizationAnalyticsEvent.SelectedAction.allowNotifications(_:);
      if ((v55 & 1) == 0)
        v30 = (unsigned int *)&enum case for NotificationAuthorizationAnalyticsEvent.SelectedAction.doNotAllowNotifications(_:);
      (*(void (**)(char *, _QWORD, uint64_t))(v52 + 104))(v10, *v30, v54);
      NotificationAuthorizationAnalyticsEvent.init(context:featureDomain:featureName:selectedAction:)(v13, 0x412068746C616548, 0xEA00000000007070, 0, 0, v10);
      sub_100013198(&qword_1000EDE30, (uint64_t (*)(uint64_t))&type metadata accessor for NotificationAuthorizationAnalyticsEvent, (uint64_t)&protocol conformance descriptor for NotificationAuthorizationAnalyticsEvent);
      AnalyticsSubmitting.submit()();
      (*(void (**)(char *, uint64_t))(v53 + 8))(v17, v14);
    }
    swift_beginAccess(v18, v57, 0, 0);
    v31 = swift_weakLoadStrong(v18);
    if (v31)
    {
      v32 = v31;
      KeyPath = swift_getKeyPath(&unk_1000B2A68);
      v34 = swift_getKeyPath(&unk_1000B2A90);
      v56 = 0;
      swift_retain(v32);
      v35 = (id *)&v56;
LABEL_16:
      static Published.subscript.setter(v35, v32, KeyPath, v34);
      swift_release(v32);
    }
  }
  else
  {
    static Logger.notifications.getter();
    v19 = v19;
    v36 = Logger.logObject.getter(v19);
    v37 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v36, v37))
    {
      v38 = swift_slowAlloc(32, -1);
      v55 = swift_slowAlloc(96, -1);
      v60[0] = v55;
      *(_DWORD *)v38 = 136315650;
      v39 = _typeName(_:qualified:)(v48, 0);
      v41 = v40;
      v58 = (id)sub_100012B20(v39, v40, v60);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v58, v59, v38 + 4, v38 + 12);
      swift_bridgeObjectRelease(v41);
      *(_WORD *)(v38 + 12) = 2080;
      v58 = (id)sub_100012B20(0xD00000000000002FLL, 0x80000001000BA540, v60);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v58, v59, v38 + 14, v38 + 22);
      *(_WORD *)(v38 + 22) = 2080;
      v58 = objc_msgSend(v19, "authorizationStatus");
      type metadata accessor for UNAuthorizationStatus(0);
      v43 = String.init<A>(describing:)(&v58, v42);
      v45 = v44;
      v58 = (id)sub_100012B20(v43, v44, v60);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v58, v59, v38 + 24, v38 + 32);

      swift_bridgeObjectRelease(v45);
      _os_log_impl((void *)&_mh_execute_header, v36, v37, "%s %s Unexpected notification authorization status: %s", (uint8_t *)v38, 0x20u);
      v46 = v55;
      swift_arrayDestroy(v55, 3, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v46, -1, -1);
      swift_slowDealloc(v38, -1, -1);

    }
    else
    {

    }
    (*(void (**)(char *, uint64_t))(v49 + 8))(v8, v50);
    swift_beginAccess(v18, v60, 0, 0);
    v47 = swift_weakLoadStrong(v18);
    if (v47)
    {
      v32 = v47;
      KeyPath = swift_getKeyPath(&unk_1000B2A68);
      v34 = swift_getKeyPath(&unk_1000B2A90);
      LOBYTE(v58) = 0;
      swift_retain(v32);
      v35 = &v58;
      goto LABEL_16;
    }
  }

}

void sub_10004519C(char a1, uint64_t a2, void *a3)
{
  uint64_t v4;
  char v5;
  uint64_t Strong;
  uint64_t v7;
  id v8;
  _BYTE v9[24];

  v4 = a2 + 16;
  if ((a1 & 1) != 0)
    v5 = 3;
  else
    v5 = 4;
  v9[0] = 4;
  v9[1] = v5;
  sub_100046898();
  AnalyticsSubmitting.submit()();
  swift_beginAccess(v4, v9, 0, 0);
  Strong = swift_weakLoadStrong(v4);
  if (Strong)
  {
    v7 = Strong;
    v8 = objc_msgSend(objc_allocWithZone((Class)HKHealthStore), "init");
    sub_100045290(a3, v8);
    swift_release(v7);

  }
}

uint64_t sub_100045254(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  void (*v4)(uint64_t);

  v4 = *(void (**)(uint64_t))(a1 + 32);
  v3 = *(_QWORD *)(a1 + 40);
  swift_retain(v3);
  v4(a2);
  return swift_release(v3);
}

void sub_100045290(void *a1, void *a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  NSObject *v13;
  os_log_type_t v14;
  uint64_t v15;
  uint8_t *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint8_t *v24;
  void *v25;
  uint64_t v26;
  _QWORD *v27;
  void *v28;
  _QWORD *v29;
  id v30;
  id v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  void *v36;
  uint64_t v37;
  uint64_t aBlock[5];
  _QWORD *v39;

  v3 = v2;
  v6 = *v2;
  v7 = type metadata accessor for Logger(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = __chkstk_darwin(v7);
  v11 = (char *)&v32 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = static Logger.general.getter(v9);
  v13 = Logger.logObject.getter(v12);
  v14 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v13, v14))
  {
    v34 = v7;
    v15 = swift_slowAlloc(12, -1);
    v36 = a2;
    v16 = (uint8_t *)v15;
    v17 = swift_slowAlloc(32, -1);
    aBlock[0] = v17;
    v35 = a1;
    *(_DWORD *)v16 = 136446210;
    v18 = _typeName(_:qualified:)(v6, 0);
    v33 = v8;
    v19 = v3;
    v20 = v6;
    v22 = v21;
    v37 = sub_100012B20(v18, v21, aBlock);
    a1 = v35;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v37, aBlock, v16 + 4, v16 + 12);
    v23 = v22;
    v6 = v20;
    v3 = v19;
    swift_bridgeObjectRelease(v23);
    _os_log_impl((void *)&_mh_execute_header, v13, v14, "[%{public}s]: Should check IHR intro flow step", v16, 0xCu);
    swift_arrayDestroy(v17, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v17, -1, -1);
    v24 = v16;
    a2 = v36;
    swift_slowDealloc(v24, -1, -1);

    (*(void (**)(char *, uint64_t))(v33 + 8))(v11, v34);
  }
  else
  {

    (*(void (**)(char *, uint64_t))(v8 + 8))(v11, v7);
  }
  v25 = (void *)objc_opt_self(HKImproveHealthRecordsRequestViewController);
  v26 = swift_allocObject(&unk_1000DE8C8, 24, 7);
  swift_weakInit(v26 + 16, v3);
  v27 = (_QWORD *)swift_allocObject(&unk_1000DE918, 48, 7);
  v27[2] = v26;
  v27[3] = a1;
  v27[4] = a2;
  v27[5] = v6;
  aBlock[4] = (uint64_t)sub_100046910;
  v39 = v27;
  aBlock[0] = (uint64_t)_NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = (uint64_t)sub_100045254;
  aBlock[3] = (uint64_t)&unk_1000DE930;
  v28 = _Block_copy(aBlock);
  v29 = v39;
  v30 = a1;
  v31 = a2;
  swift_release(v29);
  objc_msgSend(v25, "needsRequestedPermissionWithCompletion:", v28);
  _Block_release(v28);
}

void sub_100045528(int a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  NSObject *v19;
  os_log_type_t v20;
  _BOOL4 v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  char v32;
  void **v33;
  uint64_t v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  _QWORD *v39;
  id v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  id v48;
  id v49;
  uint64_t v50;
  uint64_t Strong;
  _QWORD *v52;
  void *v53;
  _QWORD *v54;
  id v55;
  void **v56;
  uint64_t v57;
  void *v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  int v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  void **aBlock;
  uint64_t v69;
  void *v70;
  void *v71;
  void *v72;
  _QWORD *v73;

  v59 = a4;
  v65 = a2;
  v64 = a1;
  v7 = type metadata accessor for DispatchWorkItemFlags(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)&v56 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for DispatchQoS(0);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v61 = (char *)&v56 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for Logger(0);
  v62 = *(_QWORD *)(v14 - 8);
  v63 = v14;
  v15 = __chkstk_darwin(v14);
  v17 = (char *)&v56 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = static Logger.general.getter(v15);
  v19 = Logger.logObject.getter(v18);
  v20 = static os_log_type_t.default.getter();
  v21 = os_log_type_enabled(v19, v20);
  v60 = a5;
  if (v21)
  {
    v22 = swift_slowAlloc(18, -1);
    v58 = a3;
    v23 = v22;
    v56 = (void **)swift_slowAlloc(32, -1);
    v57 = v8;
    aBlock = v56;
    *(_DWORD *)v23 = 136446466;
    v24 = _typeName(_:qualified:)(a5, 0);
    v25 = v12;
    v26 = v11;
    v27 = v10;
    v28 = v7;
    v30 = v29;
    v66 = sub_100012B20(v24, v29, (uint64_t *)&aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v66, &v67, v23 + 4, v23 + 12);
    v31 = v30;
    v7 = v28;
    v10 = v27;
    v11 = v26;
    v12 = v25;
    swift_bridgeObjectRelease(v31);
    *(_WORD *)(v23 + 12) = 1024;
    v32 = v64;
    LODWORD(v66) = v64 & 1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v66, (char *)&v66 + 4, v23 + 14, v23 + 18);
    _os_log_impl((void *)&_mh_execute_header, v19, v20, "[%{public}s]: IHR should prompt: %{BOOL}d", (uint8_t *)v23, 0x12u);
    v33 = v56;
    swift_arrayDestroy(v56, 1, (char *)&type metadata for Any + 8);
    v8 = v57;
    swift_slowDealloc(v33, -1, -1);
    v34 = v23;
    a3 = v58;
    swift_slowDealloc(v34, -1, -1);

    (*(void (**)(char *, uint64_t))(v62 + 8))(v17, v63);
    if ((v32 & 1) == 0)
    {
LABEL_3:
      sub_100006D10(0, (unint64_t *)&qword_1000ED910, OS_dispatch_queue_ptr);
      v35 = (void *)static OS_dispatch_queue.main.getter();
      v36 = swift_allocObject(&unk_1000DE968, 32, 7);
      v37 = v65;
      *(_QWORD *)(v36 + 16) = v65;
      *(_QWORD *)(v36 + 24) = a3;
      v72 = sub_100046924;
      v73 = (_QWORD *)v36;
      aBlock = _NSConcreteStackBlock;
      v69 = 1107296256;
      v70 = sub_100006988;
      v71 = &unk_1000DE980;
      v38 = _Block_copy(&aBlock);
      v39 = v73;
      v40 = a3;
      swift_retain(v37);
      v41 = swift_release(v39);
      v42 = v61;
      static DispatchQoS.unspecified.getter(v41);
      aBlock = (void **)_swiftEmptyArrayStorage;
      v43 = sub_100013198((unint64_t *)&qword_1000EDBE0, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
      sub_10003FF74(0);
      v45 = v44;
      v46 = sub_100013198((unint64_t *)&qword_1000EDBF0, (uint64_t (*)(uint64_t))sub_10003FF74, (uint64_t)&protocol conformance descriptor for [A]);
      dispatch thunk of SetAlgebra.init<A>(_:)(&aBlock, v45, v46, v7, v43);
      OS_dispatch_queue.async(group:qos:flags:execute:)(0, v42, v10, v38);
      _Block_release(v38);

      (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
      (*(void (**)(char *, uint64_t))(v12 + 8))(v42, v11);
      return;
    }
  }
  else
  {

    (*(void (**)(char *, uint64_t))(v62 + 8))(v17, v63);
    if ((v64 & 1) == 0)
      goto LABEL_3;
  }
  v47 = v65 + 16;
  v48 = objc_allocWithZone((Class)HKClinicalAccountStore);
  v49 = objc_msgSend(v48, "initWithHealthStore:", v59);
  v50 = swift_allocObject(&unk_1000DE8C8, 24, 7);
  swift_beginAccess(v47, &v66, 0, 0);
  Strong = swift_weakLoadStrong(v47);
  swift_weakInit(v50 + 16, Strong);
  swift_release(Strong);
  v52 = (_QWORD *)swift_allocObject(&unk_1000DE9B8, 40, 7);
  v52[2] = v50;
  v52[3] = a3;
  v52[4] = v60;
  v72 = sub_100046934;
  v73 = v52;
  aBlock = _NSConcreteStackBlock;
  v69 = 1107296256;
  v70 = sub_100045254;
  v71 = &unk_1000DE9D0;
  v53 = _Block_copy(&aBlock);
  v54 = v73;
  v55 = a3;
  swift_release(v54);
  objc_msgSend(v49, "hasAnyHealthRecordsAccountWithCompletion:", v53);
  _Block_release(v53);

}

uint64_t sub_100045A24(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  _BYTE v6[24];

  v3 = a1 + 16;
  swift_beginAccess(a1 + 16, v6, 0, 0);
  result = swift_weakLoadStrong(v3);
  if (result)
  {
    v5 = result;
    sub_1000461C8(a2);
    return swift_release(v5);
  }
  return result;
}

uint64_t sub_100045A80(char a1, uint64_t a2, void *a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  void *v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v25;
  uint64_t v26;
  _QWORD aBlock[5];
  uint64_t v28;

  v8 = type metadata accessor for DispatchWorkItemFlags(0);
  v26 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v10 = (char *)&v25 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = type metadata accessor for DispatchQoS(0);
  v11 = *(_QWORD *)(v25 - 8);
  __chkstk_darwin(v25);
  v13 = (char *)&v25 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100006D10(0, (unint64_t *)&qword_1000ED910, OS_dispatch_queue_ptr);
  v14 = (void *)static OS_dispatch_queue.main.getter();
  v15 = swift_allocObject(&unk_1000DEA08, 48, 7);
  *(_BYTE *)(v15 + 16) = a1;
  *(_QWORD *)(v15 + 24) = a2;
  *(_QWORD *)(v15 + 32) = a3;
  *(_QWORD *)(v15 + 40) = a4;
  aBlock[4] = sub_10004696C;
  v28 = v15;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100006988;
  aBlock[3] = &unk_1000DEA20;
  v16 = _Block_copy(aBlock);
  v17 = v28;
  swift_retain(a2);
  v18 = a3;
  v19 = swift_release(v17);
  static DispatchQoS.unspecified.getter(v19);
  aBlock[0] = _swiftEmptyArrayStorage;
  v20 = sub_100013198((unint64_t *)&qword_1000EDBE0, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  sub_10003FF74(0);
  v22 = v21;
  v23 = sub_100013198((unint64_t *)&qword_1000EDBF0, (uint64_t (*)(uint64_t))sub_10003FF74, (uint64_t)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(aBlock, v22, v23, v8, v20);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v13, v10, v16);
  _Block_release(v16);

  (*(void (**)(char *, uint64_t))(v26 + 8))(v10, v8);
  return (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v13, v25);
}

void sub_100045CA8(char a1, uint64_t a2, void *a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  NSObject *v18;
  os_log_type_t v19;
  uint8_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  NSObject *v28;
  os_log_type_t v29;
  uint8_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t Strong;
  uint64_t v38;
  uint64_t KeyPath;
  uint64_t v40;
  void *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  void *v45;
  uint64_t v46;
  id v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  void *v51;
  uint64_t aBlock[5];
  uint64_t v53;
  char v54[24];
  uint64_t v55;
  _BYTE v56[16];

  v8 = type metadata accessor for Logger(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = __chkstk_darwin(v8);
  v12 = (char *)&v50 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __chkstk_darwin(v10);
  v15 = (char *)&v50 - v14;
  v16 = a2 + 16;
  if ((a1 & 1) != 0)
  {
    v17 = static Logger.general.getter(v13);
    v18 = Logger.logObject.getter(v17);
    v19 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v18, v19))
    {
      v50 = v8;
      v20 = (uint8_t *)swift_slowAlloc(12, -1);
      v21 = swift_slowAlloc(32, -1);
      v51 = a3;
      aBlock[0] = v21;
      v22 = v21;
      *(_DWORD *)v20 = 136446210;
      v23 = _typeName(_:qualified:)(a4, 0);
      v25 = v24;
      v55 = sub_100012B20(v23, v24, aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v55, v56, v20 + 4, v20 + 12);
      swift_bridgeObjectRelease(v25);
      _os_log_impl((void *)&_mh_execute_header, v18, v19, "[%{public}s]: IHR needs requested permission, presenting flow", v20, 0xCu);
      swift_arrayDestroy(v22, 1, (char *)&type metadata for Any + 8);
      v26 = v22;
      a3 = v51;
      swift_slowDealloc(v26, -1, -1);
      swift_slowDealloc(v20, -1, -1);

      (*(void (**)(char *, uint64_t))(v9 + 8))(v15, v50);
    }
    else
    {

      (*(void (**)(char *, uint64_t))(v9 + 8))(v15, v8);
    }
    swift_beginAccess(v16, &v55, 0, 0);
    Strong = swift_weakLoadStrong(v16);
    if (Strong)
    {
      v38 = Strong;
      KeyPath = swift_getKeyPath(&unk_1000B2A68);
      v40 = swift_getKeyPath(&unk_1000B2A90);
      LOBYTE(aBlock[0]) = 1;
      static Published.subscript.setter(aBlock, v38, KeyPath, v40);
    }
    v41 = (void *)objc_opt_self(HKImproveHealthRecordsRequestViewController);
    v42 = swift_allocObject(&unk_1000DE8C8, 24, 7);
    swift_beginAccess(v16, v54, 0, 0);
    v43 = swift_weakLoadStrong(v16);
    swift_weakInit(v42 + 16, v43);
    swift_release(v43);
    v44 = swift_allocObject(&unk_1000DEA58, 32, 7);
    *(_QWORD *)(v44 + 16) = v42;
    *(_QWORD *)(v44 + 24) = a3;
    aBlock[4] = (uint64_t)sub_100046984;
    v53 = v44;
    aBlock[0] = (uint64_t)_NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = (uint64_t)sub_100045254;
    aBlock[3] = (uint64_t)&unk_1000DEA70;
    v45 = _Block_copy(aBlock);
    v46 = v53;
    v47 = a3;
    swift_release(v46);
    objc_msgSend(v41, "presentInViewController:completion:", v47, v45);
    _Block_release(v45);
  }
  else
  {
    v27 = static Logger.general.getter(v13);
    v28 = Logger.logObject.getter(v27);
    v29 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v28, v29))
    {
      v30 = (uint8_t *)swift_slowAlloc(12, -1);
      v31 = swift_slowAlloc(32, -1);
      v51 = a3;
      aBlock[0] = v31;
      v32 = v31;
      v50 = v8;
      *(_DWORD *)v30 = 136446210;
      v33 = _typeName(_:qualified:)(a4, 0);
      v35 = v34;
      v55 = sub_100012B20(v33, v34, aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v55, v56, v30 + 4, v30 + 12);
      swift_bridgeObjectRelease(v35);
      _os_log_impl((void *)&_mh_execute_header, v28, v29, "[%{public}s]: User has no accounts so not displaying IHR", v30, 0xCu);
      swift_arrayDestroy(v32, 1, (char *)&type metadata for Any + 8);
      v36 = v32;
      a3 = v51;
      swift_slowDealloc(v36, -1, -1);
      swift_slowDealloc(v30, -1, -1);

      (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v50);
    }
    else
    {

      (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v8);
    }
    swift_beginAccess(v16, aBlock, 0, 0);
    v48 = swift_weakLoadStrong(v16);
    if (v48)
    {
      v49 = v48;
      sub_1000461C8((uint64_t)a3);
      swift_release(v49);
    }
  }
}

uint64_t sub_100046134(char a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  char v5;
  uint64_t result;
  uint64_t v7;
  _BYTE v8[24];

  v4 = a2 + 16;
  if ((a1 & 1) != 0)
    v5 = 3;
  else
    v5 = 4;
  v8[0] = 5;
  v8[1] = v5;
  sub_100046898();
  AnalyticsSubmitting.submit()();
  swift_beginAccess(v4, v8, 0, 0);
  result = swift_weakLoadStrong(v4);
  if (result)
  {
    v7 = result;
    sub_1000461C8(a3);
    return swift_release(v7);
  }
  return result;
}

void sub_1000461C8(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  void *v14;
  id v15;
  uint64_t v16;
  NSObject *v17;
  os_log_type_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint8_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint8_t *v30;
  void (*v31)(char *, uint64_t);
  void *v32;
  id v33;
  uint64_t v34;
  NSObject *v35;
  os_log_type_t v36;
  uint8_t *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  NSObject *v47;
  os_log_type_t v48;
  uint8_t *v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  unint64_t v53;
  uint64_t KeyPath;
  uint64_t v55;
  uint64_t v56;
  void *v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  _QWORD *v61;
  uint64_t v62;
  uint64_t aBlock[5];
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;

  v2 = v1;
  v62 = *v1;
  v4 = type metadata accessor for Logger(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = __chkstk_darwin(v4);
  v8 = (char *)&v58 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __chkstk_darwin(v6);
  v11 = (char *)&v58 - v10;
  __chkstk_darwin(v9);
  v13 = (char *)&v58 - v12;
  v14 = (void *)objc_opt_self(SOSUtilities);
  v15 = objc_msgSend(v14, "isKappaDetectionSupportedOnPhone");
  if ((v15 & 1) == 0)
  {
    v15 = objc_msgSend(v14, "isKappaDetectionSupportedOnActiveWatch");
    if (!(_DWORD)v15)
    {
      v46 = static Logger.general.getter(v15);
      v47 = Logger.logObject.getter(v46);
      v48 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v47, v48))
      {
        v49 = (uint8_t *)swift_slowAlloc(12, -1);
        v50 = swift_slowAlloc(32, -1);
        aBlock[0] = v50;
        v59 = v4;
        *(_DWORD *)v49 = 136446210;
        v51 = _typeName(_:qualified:)(v62, 0);
        v53 = v52;
        v65 = sub_100012B20(v51, v52, aBlock);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v65, &v66, v49 + 4, v49 + 12);
        swift_bridgeObjectRelease(v53);
        _os_log_impl((void *)&_mh_execute_header, v47, v48, "[%{public}s] Not showing the Improve Safety view controller", v49, 0xCu);
        swift_arrayDestroy(v50, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v50, -1, -1);
        swift_slowDealloc(v49, -1, -1);

        (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v59);
      }
      else
      {

        (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
      }
LABEL_14:
      sub_10000877C();
      return;
    }
  }
  v16 = static Logger.general.getter(v15);
  v17 = Logger.logObject.getter(v16);
  v18 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v17, v18))
  {
    v59 = v5;
    v19 = a1;
    v20 = v4;
    v21 = swift_slowAlloc(12, -1);
    v60 = v11;
    v22 = (uint8_t *)v21;
    v23 = swift_slowAlloc(32, -1);
    v61 = v2;
    v24 = v23;
    aBlock[0] = v23;
    *(_DWORD *)v22 = 136446210;
    v25 = _typeName(_:qualified:)(v62, 0);
    v27 = v26;
    v65 = sub_100012B20(v25, v26, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v65, &v66, v22 + 4, v22 + 12);
    v28 = v27;
    v4 = v20;
    a1 = v19;
    swift_bridgeObjectRelease(v28);
    _os_log_impl((void *)&_mh_execute_header, v17, v18, "[%{public}s] Checking whether to show Improve Safety view controller", v22, 0xCu);
    swift_arrayDestroy(v24, 1, (char *)&type metadata for Any + 8);
    v29 = v24;
    v2 = v61;
    swift_slowDealloc(v29, -1, -1);
    v30 = v22;
    v11 = v60;
    swift_slowDealloc(v30, -1, -1);

    v31 = *(void (**)(char *, uint64_t))(v59 + 8);
  }
  else
  {

    v31 = *(void (**)(char *, uint64_t))(v5 + 8);
  }
  v31(v13, v4);
  v32 = (void *)objc_opt_self(HKImproveSafetyDataCollectionViewController);
  v33 = objc_msgSend(v32, "needsRequestedPermission");
  if (!(_DWORD)v33)
    goto LABEL_14;
  v34 = static Logger.general.getter(v33);
  v35 = Logger.logObject.getter(v34);
  v36 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v35, v36))
  {
    v60 = v11;
    v37 = (uint8_t *)swift_slowAlloc(12, -1);
    v38 = swift_slowAlloc(32, -1);
    v61 = v2;
    v39 = v38;
    aBlock[0] = v38;
    v59 = v4;
    *(_DWORD *)v37 = 136446210;
    v40 = _typeName(_:qualified:)(v62, 0);
    v42 = v41;
    v65 = sub_100012B20(v40, v41, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v65, &v66, v37 + 4, v37 + 12);
    swift_bridgeObjectRelease(v42);
    _os_log_impl((void *)&_mh_execute_header, v35, v36, "[%{public}s] Showing Improve Safety view controller", v37, 0xCu);
    swift_arrayDestroy(v39, 1, (char *)&type metadata for Any + 8);
    v43 = v39;
    v2 = v61;
    swift_slowDealloc(v43, -1, -1);
    swift_slowDealloc(v37, -1, -1);

    v45 = v59;
    v44 = v60;
  }
  else
  {

    v44 = v11;
    v45 = v4;
  }
  v31(v44, v45);
  KeyPath = swift_getKeyPath(&unk_1000B2A68);
  v55 = swift_getKeyPath(&unk_1000B2A90);
  LOBYTE(aBlock[0]) = 1;
  swift_retain(v2);
  static Published.subscript.setter(aBlock, v2, KeyPath, v55);
  v56 = swift_allocObject(&unk_1000DE8C8, 24, 7);
  swift_weakInit(v56 + 16, v2);
  aBlock[4] = (uint64_t)sub_100046890;
  v64 = v56;
  aBlock[0] = (uint64_t)_NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = (uint64_t)sub_100045254;
  aBlock[3] = (uint64_t)&unk_1000DE8E0;
  v57 = _Block_copy(aBlock);
  swift_release(v64);
  objc_msgSend(v32, "presentInViewController:completion:", a1, v57);
  _Block_release(v57);
}

uint64_t sub_100046758(char a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t result;
  uint64_t v5;
  _BYTE v6[24];

  v2 = a2 + 16;
  if ((a1 & 1) != 0)
    v3 = 3;
  else
    v3 = 4;
  v6[0] = 6;
  v6[1] = v3;
  sub_100046898();
  AnalyticsSubmitting.submit()();
  swift_beginAccess(v2, v6, 0, 0);
  result = swift_weakLoadStrong(v2);
  if (result)
  {
    v5 = result;
    sub_10000877C();
    return swift_release(v5);
  }
  return result;
}

uint64_t sub_1000467DC()
{
  id *v0;
  char *v1;
  uint64_t v2;

  v1 = (char *)v0 + OBJC_IVAR____TtC6Health16IntroFlowManager__isPresentingContent;
  sub_100013D30();
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  swift_release(*(id *)((char *)v0 + OBJC_IVAR____TtC6Health16IntroFlowManager_healthAppNotificationManager));
  swift_unknownObjectRelease(*(id *)((char *)v0
                                   + OBJC_IVAR____TtC6Health16IntroFlowManager_healthWelcomeFlowSignalProvider));
  return swift_deallocClassInstance(v0, *((unsigned int *)*v0 + 12), *((unsigned __int16 *)*v0 + 26));
}

uint64_t sub_100046854()
{
  return type metadata accessor for IntroFlowManager(0);
}

uint64_t sub_10004685C()
{
  uint64_t v0;

  return sub_100044B64(v0);
}

uint64_t sub_10004686C()
{
  uint64_t v0;

  swift_weakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100046890(char a1)
{
  uint64_t v1;

  return sub_100046758(a1, v1);
}

unint64_t sub_100046898()
{
  unint64_t result;

  result = qword_1000EF4D0;
  if (!qword_1000EF4D0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for OnboardingAnalyticsEvent, &type metadata for OnboardingAnalyticsEvent);
    atomic_store(result, (unint64_t *)&qword_1000EF4D0);
  }
  return result;
}

uint64_t sub_1000468DC()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));

  return swift_deallocObject(v0, 48, 7);
}

void sub_100046910(int a1)
{
  uint64_t v1;

  sub_100045528(a1, *(_QWORD *)(v1 + 16), *(void **)(v1 + 24), *(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 40));
}

uint64_t sub_10004691C()
{
  return sub_100046994(32);
}

uint64_t sub_100046924()
{
  uint64_t v0;

  return sub_100045A24(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t sub_10004692C()
{
  return sub_100046994(40);
}

uint64_t sub_100046934(char a1)
{
  uint64_t v1;

  return sub_100045A80(a1, *(_QWORD *)(v1 + 16), *(void **)(v1 + 24), *(_QWORD *)(v1 + 32));
}

uint64_t sub_100046940()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));

  return swift_deallocObject(v0, 48, 7);
}

void sub_10004696C()
{
  uint64_t v0;

  sub_100045CA8(*(_BYTE *)(v0 + 16), *(_QWORD *)(v0 + 24), *(void **)(v0 + 32), *(_QWORD *)(v0 + 40));
}

uint64_t sub_10004697C()
{
  return sub_100046994(32);
}

uint64_t sub_100046984(char a1)
{
  uint64_t v1;

  return sub_100046134(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

uint64_t sub_10004698C()
{
  return sub_100046994(32);
}

uint64_t sub_100046994(uint64_t a1)
{
  uint64_t v1;

  swift_release(*(_QWORD *)(v1 + 16));

  return swift_deallocObject(v1, a1, 7);
}

void sub_1000469CC(char a1)
{
  uint64_t v1;

  sub_10004519C(a1, *(_QWORD *)(v1 + 16), *(void **)(v1 + 24));
}

uint64_t sub_1000469D4()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 40, 7);
}

void sub_100046A00(int a1, uint64_t a2)
{
  uint64_t *v2;

  sub_100044BDC(a1, a2, v2[2], v2[3], v2[4]);
}

uint64_t type metadata accessor for HKKeyValueDataSource(uint64_t a1)
{
  uint64_t result;

  result = qword_1000EE050;
  if (!qword_1000EE050)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for HKKeyValueDataSource);
  return result;
}

uint64_t sub_100046A7C(uint64_t a1)
{
  _BYTE v2[8];

  return swift_initClassMetadata2(a1, 0, 0, v2, a1 + qword_1000F0F00);
}

id sub_100046AB8(char a1)
{
  id v2;
  id v3;

  v2 = objc_msgSend(objc_allocWithZone((Class)HKHealthStore), "init");
  v3 = objc_msgSend((id)objc_opt_self(HKKeyValueDomain), *off_1000DEDF8[a1], v2);

  return v3;
}

uint64_t sub_100046B2C(char a1)
{
  _QWORD *v1;
  uint64_t result;

  switch(a1)
  {
    case 2:
      v1 = &kHKHealthChecklistUpdateGeneratedUserDefaultKey;
      goto LABEL_7;
    case 3:
      v1 = &kHKHealthChecklistUpdateViewedUserDefaultKey;
      goto LABEL_7;
    case 4:
      v1 = &kHKHealthChecklistUpdateDismissedUserDefaultKey;
      goto LABEL_7;
    case 5:
    case 6:
      v1 = &kHKEmergencyOnboardingCompletedKey;
LABEL_7:
      result = static String._unconditionallyBridgeFromObjectiveC(_:)(*v1);
      break;
    default:
      result = 0;
      break;
  }
  return result;
}

uint64_t sub_100046BA4(unsigned __int8 a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  void *v20;
  id v21;
  Swift::String v22;
  uint64_t v23;
  Swift::Int value;
  Swift::Bool is_nil;
  __n128 v26;
  uint64_t v27;
  void *v28;
  Swift::String v29;
  uint64_t v30;
  uint64_t v31;
  NSObject *v32;
  os_log_type_t v33;
  uint8_t *v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  id v41;
  NSString v42;
  Class isa;
  id v44;
  Swift::Int v45;
  Swift::Bool v46;
  char *v47;
  ValueMetadata *v48;
  uint64_t v49[2];
  Swift::Int_optional v50;
  Swift::Int_optional v51;

  v2 = type metadata accessor for Logger(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v47 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000076D8(0, (unint64_t *)&qword_1000ECF98, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
  __chkstk_darwin(v6);
  v8 = (char *)&v47 - v7;
  v9 = type metadata accessor for Date(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v47 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1 - 2 < 3)
  {
    v47 = v5;
    v13 = sub_100046AB8(a1);
    v14 = sub_100046B2C(a1);
    if (!v15)
    {
      __break(1u);
      JUMPOUT(0x1000470F4);
    }
    v16 = v15;
    HKKeyValueDomain.date(for:)(v14);

    v26 = swift_bridgeObjectRelease(v16);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t, __n128))(v10 + 48))(v8, 1, v9, v26) != 1)
    {
      (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v12, v8, v9);
      v41 = objc_msgSend(objc_allocWithZone((Class)NSDateFormatter), "init");
      v42 = String._bridgeToObjectiveC()();
      objc_msgSend(v41, "setDateFormat:", v42);

      isa = Date._bridgeToObjectiveC()().super.isa;
      v44 = objc_msgSend(v41, "stringFromDate:", isa);

      v17 = static String._unconditionallyBridgeFromObjectiveC(_:)(v44);
      (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
      return v17;
    }
    sub_100014BD8((uint64_t)v8);
    return 0;
  }
  if (a1 != 5)
  {
    v17 = 0;
    if (a1 != 6)
      return v17;
    v18 = static String._unconditionallyBridgeFromObjectiveC(_:)(kHKEmergencyOnboardingCompletedKey);
    v20 = v19;
    v21 = sub_100046AB8(6);
    v22._countAndFlagsBits = v18;
    v22._object = v20;
    v50 = HKKeyValueDomain.integer(for:)(v22);
    if (!v23)
    {
      value = v50.value;
      is_nil = v50.is_nil;

      swift_bridgeObjectRelease(v20);
      if (!is_nil)
      {
        v17 = 0xD000000000000012;
        switch(value)
        {
          case 0:
            goto LABEL_20;
          case 1:
            goto LABEL_22;
          case 2:
            goto LABEL_23;
          case 3:
            return v17;
          default:
            goto LABEL_21;
        }
        return v17;
      }
      return 0;
    }
LABEL_12:
    swift_bridgeObjectRelease(v20);

    v31 = static Logger.view.getter(v30);
    v32 = Logger.logObject.getter(v31);
    v33 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v32, v33))
    {
      v34 = (uint8_t *)swift_slowAlloc(12, -1);
      v35 = swift_slowAlloc(32, -1);
      v47 = (char *)v2;
      *(_DWORD *)v34 = 136315138;
      v48 = &type metadata for HKKeyValueDataSource.Identifier;
      v49[0] = v35;
      v36 = sub_10004926C();
      v37 = String.init<A>(describing:)(&v48, v36);
      v39 = v38;
      v48 = (ValueMetadata *)sub_100012B20(v37, v38, v49);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v48, v49, v34 + 4, v34 + 12);
      swift_bridgeObjectRelease(v39);
      _os_log_impl((void *)&_mh_execute_header, v32, v33, "[%s] Could not get kvdomain value", v34, 0xCu);
      swift_arrayDestroy(v35, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v35, -1, -1);
      swift_slowDealloc(v34, -1, -1);
      swift_errorRelease(v23);

      (*(void (**)(char *, char *))(v3 + 8))(v5, v47);
    }
    else
    {
      swift_errorRelease(v23);

      (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
    }
    return 0;
  }
  v27 = static String._unconditionallyBridgeFromObjectiveC(_:)(kHKEmergencyOnboardingCompletedKey);
  v20 = v28;
  v21 = sub_100046AB8(5);
  v29._countAndFlagsBits = v27;
  v29._object = v20;
  v51 = HKKeyValueDomain.integer(for:)(v29);
  if (v23)
    goto LABEL_12;
  v45 = v51.value;
  v46 = v51.is_nil;

  swift_bridgeObjectRelease(v20);
  if (v46)
    return 0;
  v17 = 0xD000000000000012;
  switch(v45)
  {
    case 0:
LABEL_20:
      v17 = 0x656C706D6F636E49;
      break;
    case 1:
LABEL_22:
      v17 = 0x6574656C706D6F43;
      break;
    case 2:
LABEL_23:
      v17 = 0x657373696D736944;
      break;
    case 3:
      return v17;
    default:
LABEL_21:
      v17 = 6369134;
      break;
  }
  return v17;
}

void sub_100047114(char a1)
{
  __asm { BR              X10 }
}

id sub_100047144(id result)
{
  return sub_100047468(result);
}

void sub_100047158()
{
  void *v0;
  id v1;
  id v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  id v6;
  void **v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, void *);
  void *v10;
  uint64_t (*v11)(uint64_t, uint64_t);
  uint64_t v12;

  v0 = (void *)objc_opt_self(HKKeyValueDomain);
  v1 = objc_msgSend(objc_allocWithZone((Class)HKHealthStore), "init");
  v2 = objc_msgSend(v0, "healthArticlesDefaultsDomainWithHealthStore:", v1);

  v3 = swift_allocObject(&unk_1000DEC38, 32, 7);
  *(_BYTE *)(v3 + 16) = 0;
  *(_QWORD *)(v3 + 24) = v2;
  v11 = sub_1000490C0;
  v12 = v3;
  v7 = _NSConcreteStackBlock;
  v8 = 1107296256;
  v9 = sub_1000476C0;
  v10 = &unk_1000DEC50;
  v4 = _Block_copy(&v7);
  v5 = v12;
  v6 = v2;
  swift_release(v5);
  objc_msgSend(v6, "allValuesWithCompletion:", v4, v7, v8);
  _Block_release(v4);

}

void sub_1000472F8()
{
  sub_10004733C(0, 5);
}

void sub_10004733C(uint64_t a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  id v8;
  Class isa;
  NSString v10;
  uint64_t v11;
  void *v12;
  _QWORD v13[5];
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  if ((a2 - 2) <= 4u)
  {
    v15 = v2;
    v16 = v3;
    static String._unconditionallyBridgeFromObjectiveC(_:)(*(_QWORD *)*(&off_1000DEE30 + (char)(a2 - 2)));
    v7 = v6;
    v8 = sub_100046AB8(a2);
    isa = Int._bridgeToObjectiveC()().super.super.isa;
    v10 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v7);
    v11 = swift_allocObject(&unk_1000DED28, 24, 7);
    *(_QWORD *)(v11 + 16) = a1;
    v13[4] = sub_100049264;
    v14 = v11;
    v13[0] = _NSConcreteStackBlock;
    v13[1] = 1107296256;
    v13[2] = sub_10000666C;
    v13[3] = &unk_1000DED40;
    v12 = _Block_copy(v13);
    swift_release(v14);
    objc_msgSend(v8, "setNumber:forKey:completion:", isa, v10, v12);
    _Block_release(v12);

  }
}

id sub_100047468(id result)
{
  char v1;
  uint64_t v2;
  uint64_t v3;
  id v4;
  NSString v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  id v10;

  if (((_BYTE)result - 2) <= 4u)
  {
    v1 = (char)result;
    static String._unconditionallyBridgeFromObjectiveC(_:)(*(_QWORD *)*(&off_1000DEE30 + (char)((_BYTE)result - 2)));
    v3 = v2;
    v4 = sub_100046AB8(v1);
    v5 = String._bridgeToObjectiveC()();
    v10 = 0;
    LODWORD(v3) = objc_msgSend(v4, "setDate:forKey:error:", 0, v5, &v10, swift_bridgeObjectRelease(v3).n128_f64[0]);

    if ((_DWORD)v3)
    {
      return v10;
    }
    else
    {
      v9 = v10;
      v6 = v10;
      v7 = _convertNSErrorToError(_:)(v9);

      swift_willThrow(v8);
      return (id)swift_errorRelease(v7);
    }
  }
  return result;
}

void sub_1000475A0(uint64_t a1, void *a2, char a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  NSString v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  id v13;
  _QWORD v14[5];
  uint64_t v15;

  v3 = *(_QWORD *)(a1 + 16);
  if (v3)
  {
    v7 = *(_QWORD *)(a1 + 16 * v3 + 24);
    swift_bridgeObjectRetain(v7);
    swift_bridgeObjectRetain(a1);
    v8 = sub_100047B50(1, a1);
    v9 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v7);
    v10 = swift_allocObject(&unk_1000DEC88, 40, 7);
    *(_BYTE *)(v10 + 16) = a3;
    *(_QWORD *)(v10 + 24) = v8;
    *(_QWORD *)(v10 + 32) = a2;
    v14[4] = sub_100049218;
    v15 = v10;
    v14[0] = _NSConcreteStackBlock;
    v14[1] = 1107296256;
    v14[2] = sub_10000666C;
    v14[3] = &unk_1000DECA0;
    v11 = _Block_copy(v14);
    v12 = v15;
    v13 = a2;
    swift_release(v12);
    objc_msgSend(v13, "setDate:forKey:completion:", 0, v9, v11);
    _Block_release(v11);

  }
}

uint64_t sub_1000476C0(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v4;
  void (*v5)(uint64_t, void *);
  uint64_t v6;
  id v7;

  v5 = *(void (**)(uint64_t, void *))(a1 + 32);
  v4 = *(_QWORD *)(a1 + 40);
  if (a2)
    v6 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(a2, &type metadata for String, (char *)&type metadata for Any + 8, &protocol witness table for String);
  else
    v6 = 0;
  swift_retain(v4);
  v7 = a3;
  v5(v6, a3);
  swift_release(v4);

  return swift_bridgeObjectRelease(v6);
}

uint64_t sub_100047754(uint64_t result, uint64_t a2, char a3, void *a4, uint64_t a5)
{
  uint64_t v5;
  int64_t v6;
  _QWORD *v7;
  int v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  int64_t v27;
  _QWORD *v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  char v36;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v38;
  unint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  int v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD v48[4];
  __int128 v49;
  _OWORD v50[2];
  __int128 v51;
  _OWORD v52[2];
  uint64_t v53;
  uint64_t v54;
  _BYTE v55[32];
  _QWORD *v56;

  if (!result)
    return result;
  v5 = result;
  v6 = *(_QWORD *)(result + 16);
  v7 = _swiftEmptyArrayStorage;
  if (!v6)
  {
    v20 = _swiftEmptyArrayStorage[2];
    v28 = _swiftEmptyArrayStorage;
    if (v20)
    {
LABEL_31:
      v29 = v7 + 5;
      v28 = _swiftEmptyArrayStorage;
      do
      {
        v31 = *(v29 - 1);
        v30 = *v29;
        v53 = v31;
        v54 = v30;
        v32 = static String._unconditionallyBridgeFromObjectiveC(_:)(a5);
        v34 = v33;
        *(_QWORD *)&v51 = v32;
        *((_QWORD *)&v51 + 1) = v33;
        v35 = sub_10002D0D0();
        swift_bridgeObjectRetain(v30);
        v36 = StringProtocol.contains<A>(_:)(&v51, &type metadata for String, &type metadata for String, v35, v35);
        swift_bridgeObjectRelease(v34);
        if ((v36 & 1) != 0)
        {
          isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v28);
          *(_QWORD *)&v49 = v28;
          if ((isUniquelyReferenced_nonNull_native & 1) == 0)
          {
            sub_10007FEE0(0, v28[2] + 1, 1);
            v28 = (_QWORD *)v49;
          }
          v39 = v28[2];
          v38 = v28[3];
          if (v39 >= v38 >> 1)
          {
            sub_10007FEE0(v38 > 1, v39 + 1, 1);
            v28 = (_QWORD *)v49;
          }
          v28[2] = v39 + 1;
          v40 = &v28[2 * v39];
          v40[4] = v31;
          v40[5] = v30;
        }
        else
        {
          swift_bridgeObjectRelease(v30);
        }
        v29 += 2;
        --v20;
      }
      while (v20);
    }
    swift_bridgeObjectRelease(v7);
    sub_1000475A0((uint64_t)v28, a4, a3);
    return swift_release(v28);
  }
  v56 = _swiftEmptyArrayStorage;
  sub_10007FEE0(0, v6, 0);
  result = sub_1000490E4(v5);
  if (result < 0)
    goto LABEL_47;
  v9 = result;
  if (result >= 1 << *(_BYTE *)(v5 + 32))
    goto LABEL_47;
  v10 = 0;
  v11 = v5 + 64;
  v41 = v5 + 80;
  v46 = v5;
  v44 = v8;
  v45 = v5 + 64;
  while (1)
  {
    v12 = v9 >> 6;
    if ((*(_QWORD *)(v11 + 8 * (v9 >> 6)) & (1 << v9)) == 0)
      break;
    if (*(_DWORD *)(v5 + 36) != v8)
      goto LABEL_43;
    v13 = *(_QWORD *)(v5 + 56);
    v14 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 16 * v9);
    v16 = *v14;
    v15 = v14[1];
    sub_100012C10(v13 + 32 * v9, (uint64_t)v55);
    v53 = v16;
    v54 = v15;
    *(_QWORD *)&v51 = v16;
    *((_QWORD *)&v51 + 1) = v15;
    sub_100012C10((uint64_t)v55, (uint64_t)v52);
    v49 = v51;
    v50[0] = v52[0];
    v50[1] = v52[1];
    swift_bridgeObjectRetain_n(v15, 2);
    sub_10004916C((uint64_t)&v53);
    v17 = v49;
    sub_100012C10((uint64_t)v50, (uint64_t)v48);
    swift_bridgeObjectRetain(*((_QWORD *)&v17 + 1));
    _s6Health23OpenSleepScheduleIntentVwxx_0(v48);
    sub_10004916C((uint64_t)&v49);
    v7 = v56;
    result = swift_isUniquelyReferenced_nonNull_native(v56);
    if ((result & 1) == 0)
    {
      result = sub_10007FEE0(0, v7[2] + 1, 1);
      v7 = v56;
    }
    v19 = v7[2];
    v18 = v7[3];
    v20 = v19 + 1;
    if (v19 >= v18 >> 1)
    {
      result = sub_10007FEE0(v18 > 1, v19 + 1, 1);
      v7 = v56;
    }
    v7[2] = v20;
    *(_OWORD *)&v7[2 * v19 + 4] = v17;
    v5 = v46;
    v21 = 1 << *(_BYTE *)(v46 + 32);
    if ((uint64_t)v9 >= v21)
      goto LABEL_44;
    v11 = v45;
    v22 = *(_QWORD *)(v45 + 8 * v12);
    if ((v22 & (1 << v9)) == 0)
      goto LABEL_45;
    v8 = v44;
    if (*(_DWORD *)(v46 + 36) != v44)
      goto LABEL_46;
    v23 = v22 & (-2 << (v9 & 0x3F));
    if (v23)
    {
      v9 = __clz(__rbit64(v23)) | v9 & 0xFFFFFFFFFFFFFFC0;
    }
    else
    {
      v24 = v12 + 1;
      v25 = (unint64_t)(v21 + 63) >> 6;
      if (v12 + 1 < v25)
      {
        v26 = *(_QWORD *)(v45 + 8 * v24);
        v27 = v6;
        if (v26)
        {
LABEL_22:
          v9 = __clz(__rbit64(v26)) + (v24 << 6);
        }
        else
        {
          while (v25 - 2 != v12)
          {
            v26 = *(_QWORD *)(v41 + 8 * v12++);
            if (v26)
            {
              v24 = v12 + 1;
              goto LABEL_22;
            }
          }
          v9 = 1 << *(_BYTE *)(v46 + 32);
        }
        goto LABEL_25;
      }
      v9 = 1 << *(_BYTE *)(v46 + 32);
    }
    v27 = v6;
LABEL_25:
    if (++v10 == v27)
      goto LABEL_31;
    if ((v9 & 0x8000000000000000) != 0 || (uint64_t)v9 >= v21)
      goto LABEL_47;
  }
  __break(1u);
LABEL_43:
  __break(1u);
LABEL_44:
  __break(1u);
LABEL_45:
  __break(1u);
LABEL_46:
  __break(1u);
LABEL_47:
  __break(1u);
  return result;
}

uint64_t sub_100047B50(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  if (result < 0)
    goto LABEL_30;
  v2 = a2;
  if (!result)
    return v2;
  v3 = *(_QWORD *)(a2 + 16);
  if (!v3)
  {
    v7 = _swiftEmptyArrayStorage;
LABEL_25:
    swift_bridgeObjectRelease(v2);
    swift_release(v7);
    return (uint64_t)_swiftEmptyArrayStorage;
  }
  v4 = 0;
  v5 = 0;
  v6 = (_QWORD *)(a2 + 40);
  v23 = v3 - 1;
  v7 = _swiftEmptyArrayStorage;
  v22 = result;
  do
  {
    v12 = *(v6 - 1);
    v11 = *v6;
    v13 = v7[2];
    if (v13 < result)
    {
      swift_bridgeObjectRetain(*v6);
      if ((swift_isUniquelyReferenced_nonNull_native(v7) & 1) == 0)
        sub_10007FEE0(0, v13 + 1, 1);
      v9 = v7[2];
      v8 = v7[3];
      if (v9 >= v8 >> 1)
        sub_10007FEE0(v8 > 1, v9 + 1, 1);
      v7[2] = v9 + 1;
      v10 = &v7[2 * v9];
      v10[4] = v12;
      v10[5] = v11;
      result = v22;
      v2 = a2;
LABEL_8:
      if (v23 == v4)
        goto LABEL_25;
      goto LABEL_9;
    }
    if (v5 >= v13)
      goto LABEL_28;
    v21 = *(v6 - 1);
    v14 = &v7[2 * v5];
    v15 = v14[4];
    v16 = v14[5];
    swift_bridgeObjectRetain(v11);
    swift_bridgeObjectRetain(v16);
    if ((swift_isUniquelyReferenced_nonNull_native(_swiftEmptyArrayStorage) & 1) == 0)
      sub_10007FEE0(0, _swiftEmptyArrayStorage[2] + 1, 1);
    v18 = _swiftEmptyArrayStorage[2];
    v17 = _swiftEmptyArrayStorage[3];
    if (v18 >= v17 >> 1)
      sub_10007FEE0(v17 > 1, v18 + 1, 1);
    _swiftEmptyArrayStorage[2] = v18 + 1;
    v19 = &_swiftEmptyArrayStorage[2 * v18];
    v19[4] = v15;
    v19[5] = v16;
    result = swift_isUniquelyReferenced_nonNull_native(v7);
    if ((result & 1) == 0)
    {
      result = sub_100079ED4((uint64_t)v7);
      v7 = (_QWORD *)result;
    }
    v2 = a2;
    if (v5 >= v7[2])
      goto LABEL_29;
    v20 = &v7[2 * v5];
    swift_bridgeObjectRelease(v20[5]);
    result = v22;
    v20[4] = v21;
    v20[5] = v11;
    if ((uint64_t)++v5 < v22)
      goto LABEL_8;
    if (v23 == v4)
      goto LABEL_25;
    v5 = 0;
LABEL_9:
    ++v4;
    v6 += 2;
  }
  while (v4 < *(_QWORD *)(v2 + 16));
  __break(1u);
LABEL_28:
  __break(1u);
LABEL_29:
  __break(1u);
LABEL_30:
  __break(1u);
  return result;
}

void sub_100047DA4(uint64_t a1, uint64_t a2, char a3, uint64_t a4, void *a5)
{
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  NSString v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  id v15;
  _QWORD v16[5];
  uint64_t v17;

  v5 = *(_QWORD *)(a4 + 16);
  if (v5)
  {
    v9 = *(_QWORD *)(a4 + 16 * v5 + 24);
    swift_bridgeObjectRetain(v9);
    swift_bridgeObjectRetain(a4);
    v10 = sub_100047B50(1, a4);
    v11 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v9);
    v12 = swift_allocObject(&unk_1000DECD8, 40, 7);
    *(_BYTE *)(v12 + 16) = a3;
    *(_QWORD *)(v12 + 24) = v10;
    *(_QWORD *)(v12 + 32) = a5;
    v16[4] = sub_100049538;
    v17 = v12;
    v16[0] = _NSConcreteStackBlock;
    v16[1] = 1107296256;
    v16[2] = sub_10000666C;
    v16[3] = &unk_1000DECF0;
    v13 = _Block_copy(v16);
    v14 = v17;
    v15 = a5;
    swift_release(v14);
    objc_msgSend(v15, "setDate:forKey:completion:", 0, v11, v13);
    _Block_release(v13);

  }
}

uint64_t sub_100047EC4(char a1, ValueMetadata *a2, ValueMetadata *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  NSObject *v15;
  os_log_type_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v28;
  NSObject *v29;
  os_log_type_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t (*v46)(char *, uint64_t);
  char *v47;
  uint64_t v48;
  uint64_t v49;
  ValueMetadata *v50;
  uint64_t v51;

  v6 = type metadata accessor for Logger(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = __chkstk_darwin(v6);
  v10 = (char *)&v48 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __chkstk_darwin(v8);
  v13 = (char *)&v48 - v12;
  if (a2 || (a1 & 1) == 0)
  {
    static Logger.plugin.getter(v11);
    swift_errorRetain(a2);
    v28 = swift_errorRetain(a2);
    v29 = Logger.logObject.getter(v28);
    v30 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v29, v30))
    {
      v31 = swift_slowAlloc(32, -1);
      v32 = swift_slowAlloc(96, -1);
      v48 = v32;
      *(_DWORD *)v31 = 136315650;
      v50 = &type metadata for HKKeyValueDataSource.Identifier;
      v51 = v32;
      v33 = sub_10004926C();
      v49 = v6;
      v34 = String.init<A>(describing:)(&v50, v33);
      v36 = v35;
      v50 = (ValueMetadata *)sub_100012B20(v34, v35, &v51);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v50, &v51, v31 + 4, v31 + 12);
      swift_bridgeObjectRelease(v36);
      *(_WORD *)(v31 + 12) = 2080;
      v50 = a3;
      type metadata accessor for HKEmergencyOnboardingStatus(0);
      v38 = String.init<A>(describing:)(&v50, v37);
      v40 = v39;
      v50 = (ValueMetadata *)sub_100012B20(v38, v39, &v51);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v50, &v51, v31 + 14, v31 + 22);
      swift_bridgeObjectRelease(v40);
      *(_WORD *)(v31 + 22) = 2080;
      v50 = a2;
      swift_errorRetain(a2);
      sub_1000076D8(0, (unint64_t *)&qword_1000EC718, (uint64_t (*)(uint64_t))sub_100013960, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
      v42 = String.init<A>(describing:)(&v50, v41);
      v44 = v43;
      v50 = (ValueMetadata *)sub_100012B20(v42, v43, &v51);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v50, &v51, v31 + 24, v31 + 32);
      swift_bridgeObjectRelease(v44);
      swift_errorRelease(a2);
      swift_errorRelease(a2);
      _os_log_impl((void *)&_mh_execute_header, v29, v30, "[%s] Could not set emergency onboarding status to %s: %s", (uint8_t *)v31, 0x20u);
      v45 = v48;
      swift_arrayDestroy(v48, 3, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v45, -1, -1);
      swift_slowDealloc(v31, -1, -1);

      return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v10, v49);
    }
    swift_errorRelease(a2);
    swift_errorRelease(a2);

    v46 = *(uint64_t (**)(char *, uint64_t))(v7 + 8);
    v47 = v10;
  }
  else
  {
    v14 = static Logger.plugin.getter(v11);
    v15 = Logger.logObject.getter(v14);
    v16 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v15, v16))
    {
      v17 = swift_slowAlloc(22, -1);
      v18 = swift_slowAlloc(64, -1);
      *(_DWORD *)v17 = 136315394;
      v49 = v6;
      v50 = &type metadata for HKKeyValueDataSource.Identifier;
      v51 = v18;
      v19 = sub_10004926C();
      v20 = String.init<A>(describing:)(&v50, v19);
      v22 = v21;
      v50 = (ValueMetadata *)sub_100012B20(v20, v21, &v51);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v50, &v51, v17 + 4, v17 + 12);
      swift_bridgeObjectRelease(v22);
      *(_WORD *)(v17 + 12) = 2080;
      v50 = a3;
      type metadata accessor for HKEmergencyOnboardingStatus(0);
      v24 = String.init<A>(describing:)(&v50, v23);
      v26 = v25;
      v50 = (ValueMetadata *)sub_100012B20(v24, v25, &v51);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v50, &v51, v17 + 14, v17 + 22);
      swift_bridgeObjectRelease(v26);
      _os_log_impl((void *)&_mh_execute_header, v15, v16, "[%s] Set emergency onboarding status to %s", (uint8_t *)v17, 0x16u);
      swift_arrayDestroy(v18, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v18, -1, -1);
      swift_slowDealloc(v17, -1, -1);

      return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v13, v49);
    }

    v46 = *(uint64_t (**)(char *, uint64_t))(v7 + 8);
    v47 = v13;
  }
  return v46(v47, v6);
}

uint64_t sub_100048318(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_100048354 + 4 * byte_1000B2AB5[a1]))(0xD000000000000013, 0x80000001000B7910);
}

unint64_t sub_100048354()
{
  return 0xD000000000000023;
}

uint64_t sub_10004838C()
{
  uint64_t v0;

  return v0 - 2;
}

uint64_t sub_10004839C()
{
  return 0x6F636E4920444545;
}

void sub_1000483C0()
{
  JUMPOUT(0x1000483CCLL);
}

void sub_1000483D8(char *a1)
{
  sub_100081E3C(*a1);
}

void sub_1000483E4()
{
  char *v0;

  sub_10007D368(0, *v0);
}

void sub_1000483F0(uint64_t a1)
{
  char *v1;

  sub_10007D140(a1, *v1);
}

void sub_1000483F8(uint64_t a1)
{
  char *v1;

  sub_10007D368(a1, *v1);
}

unint64_t sub_100048400@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = sub_1000494C8(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_10004842C@<X0>(uint64_t *a1@<X8>)
{
  unsigned __int8 *v1;
  uint64_t result;
  uint64_t v4;

  result = sub_100048318(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

void sub_100048454(_QWORD *a1@<X8>)
{
  *a1 = &off_1000DB9F8;
}

void sub_100048464()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  _QWORD v9[7];
  int v10;
  char *v11;
  int v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  void *v27;
  _QWORD *v28;

  v0 = type metadata accessor for SectionedDataSourceContainerViewType(0);
  v22 = *(_QWORD *)(v0 - 8);
  v23 = v0;
  __chkstk_darwin(v0);
  v21 = (char *)v9 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000076D8(0, &qword_1000ECA60, (uint64_t (*)(uint64_t))&type metadata accessor for UIBackgroundConfiguration, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
  __chkstk_darwin(v2);
  v20 = (char *)v9 - v3;
  v4 = type metadata accessor for CellDeselectionBehavior(0);
  v18 = *(_QWORD *)(v4 - 8);
  v19 = v4;
  __chkstk_darwin(v4);
  v16 = (char *)v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = type metadata accessor for UUID(0);
  v24 = *(_QWORD *)(v26 - 8);
  __chkstk_darwin(v26);
  v25 = (char *)v9 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = type metadata accessor for ContentConfigurationItem(0);
  v15 = *(_QWORD *)(v17 - 8);
  __chkstk_darwin(v17);
  v8 = (char *)v9 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = _swiftEmptyArrayStorage;
  sub_10007FE98(0, 7, 0);
  v13 = objc_opt_self(UIColor);
  v12 = enum case for CellDeselectionBehavior.deselectOnDidSelect(_:);
  v11 = "iation4";
  v10 = enum case for SectionedDataSourceContainerViewType.collectionView(_:);
  v9[6] = "Article Read States";
  v9[5] = "t Alert Read States";
  v9[4] = " Update Last Generated";
  v9[3] = " Update Last Viewed";
  v9[2] = "d";
  v14 = v8;
  v27 = &unk_1000DBA19;
  JUMPOUT(0x100048788);
}

void sub_100048B4C(uint64_t a1, char a2)
{
  __asm { BR              X11 }
}

void sub_100048BAC()
{
  void *v0;
  char v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  void *v5;
  void *v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  Swift::String v10;
  Swift::String v11;
  Swift::String v12;
  NSString v13;
  NSString v14;
  id v15;
  uint64_t v16;
  NSString v17;
  void *v18;
  void *v19;
  id v20;
  NSString v21;
  id v22;
  _QWORD v23[5];
  uint64_t v24;

  v2 = sub_100046B2C(v1);
  if (v3)
    v4 = v2;
  else
    v4 = 7104878;
  v5 = (void *)0xE300000000000000;
  if (v3)
    v6 = v3;
  else
    v6 = (void *)0xE300000000000000;
  v7 = sub_100046BA4(v1);
  if (v8)
    v9 = v7;
  else
    v9 = 7104878;
  if (v8)
    v5 = v8;
  _StringGuts.grow(_:)(17);
  swift_bridgeObjectRelease(0xE000000000000000);
  v10._countAndFlagsBits = v4;
  v10._object = v6;
  String.append(_:)(v10);
  swift_bridgeObjectRelease(v6);
  v11._countAndFlagsBits = 0x203A65756C61560ALL;
  v11._object = (void *)0xE800000000000000;
  String.append(_:)(v11);
  v12._countAndFlagsBits = v9;
  v12._object = v5;
  String.append(_:)(v12);
  swift_bridgeObjectRelease(v5);
  v13 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(0x80000001000B7930);
  v14 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(0xE500000000000000);
  v15 = objc_msgSend((id)objc_opt_self(UIAlertController), "alertControllerWithTitle:message:preferredStyle:", v13, v14, 1, 0x203A79654BLL);

  v16 = swift_allocObject(&unk_1000DEB98, 17, 7);
  *(_BYTE *)(v16 + 16) = v1;
  v17 = String._bridgeToObjectiveC()();
  v23[4] = sub_100049070;
  v24 = v16;
  v23[0] = _NSConcreteStackBlock;
  v23[1] = 1107296256;
  v23[2] = sub_10008E550;
  v23[3] = &unk_1000DEBB0;
  v18 = _Block_copy(v23);
  swift_release(v24);
  v19 = (void *)objc_opt_self(UIAlertAction);
  v20 = objc_msgSend(v19, "actionWithTitle:style:handler:", v17, 0, v18);
  _Block_release(v18);

  objc_msgSend(v15, "addAction:", v20);
  v21 = String._bridgeToObjectiveC()();
  v22 = objc_msgSend(v19, "actionWithTitle:style:handler:", v21, 1, 0);

  objc_msgSend(v15, "addAction:", v22);
  objc_msgSend(v0, "presentViewController:animated:completion:", v15, 1, 0);

}

void sub_100048ED0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_100048F00(a1, a2, a3, (uint64_t)"init(_:identifier:)", 19);
}

void sub_100048EE8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_100048F00(a1, a2, a3, (uint64_t)"init(arrangedSections:identifier:)", 34);
}

void sub_100048F00(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _swift_stdlib_reportUnimplementedInitializer("Health.HKKeyValueDataSource", 27, a4, a5, 0);
  __break(1u);
}

uint64_t sub_100048F28()
{
  return type metadata accessor for HKKeyValueDataSource(0);
}

unint64_t sub_100048F30@<X0>(uint64_t a1@<X3>, uint64_t *a2@<X8>)
{
  swift_getWitnessTable(&unk_1000B2B58, a1);
  return sub_1000213F0(a2);
}

uint64_t sub_100048F9C(uint64_t a1, uint64_t a2)
{
  uint64_t WitnessTable;

  WitnessTable = swift_getWitnessTable(&unk_1000B2B58, a2);
  return sub_100020F3C(a1, a2, WitnessTable);
}

uint64_t sub_100048FEC(uint64_t a1)
{
  uint64_t result;

  *(_QWORD *)(a1 + 8) = sub_100013198(&qword_1000EE0A0, type metadata accessor for HKKeyValueDataSource, (uint64_t)&unk_1000B2B00);
  result = sub_100013198(&qword_1000EE0A8, type metadata accessor for HKKeyValueDataSource, (uint64_t)&unk_1000B2B30);
  *(_QWORD *)(a1 + 24) = result;
  return result;
}

uint64_t sub_100049048()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

void sub_100049058(uint64_t a1)
{
  uint64_t v1;

  sub_100048B4C(a1, *(_BYTE *)(v1 + 16));
}

uint64_t sub_100049060()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

void sub_100049070()
{
  uint64_t v0;

  sub_100047114(*(_BYTE *)(v0 + 16));
}

uint64_t sub_100049078(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return sub_100047754(a1, a2, *(_BYTE *)(v2 + 16), *(void **)(v2 + 24), (uint64_t)CFSTR("ArticleDisplayedFromHighlightAlert"));
}

uint64_t sub_10004909C()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1000490C0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return sub_100047754(a1, a2, *(_BYTE *)(v2 + 16), *(void **)(v2 + 24), (uint64_t)CFSTR("ArticleReadState"));
}

uint64_t sub_1000490E4(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;

  v1 = *(_QWORD *)(a1 + 64);
  if (v1)
  {
    v2 = 0;
    return __clz(__rbit64(v1)) + v2;
  }
  v5 = *(_BYTE *)(a1 + 32);
  v6 = v5 & 0x3F;
  v3 = 1 << v5;
  if (v6 < 7)
    return v3;
  v1 = *(_QWORD *)(a1 + 72);
  if (v1)
  {
    v2 = 64;
    return __clz(__rbit64(v1)) + v2;
  }
  v7 = (unint64_t)(v3 + 63) >> 6;
  if (v7 <= 2)
    v7 = 2;
  v8 = v7 - 2;
  v9 = (unint64_t *)(a1 + 80);
  v2 = 64;
  while (v8)
  {
    v10 = *v9++;
    v1 = v10;
    --v8;
    v2 += 64;
    if (v10)
      return __clz(__rbit64(v1)) + v2;
  }
  return v3;
}

uint64_t sub_10004916C(uint64_t a1)
{
  uint64_t v2;

  sub_1000491A8();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void sub_1000491A8()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!qword_1000EE0B0)
  {
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2(0, &type metadata for String, (char *)&type metadata for Any + 8, "key value ", 0);
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_1000EE0B0);
  }
}

void sub_100049218(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  sub_100047DA4(a1, a2, *(_BYTE *)(v2 + 16), *(_QWORD *)(v2 + 24), *(void **)(v2 + 32));
}

uint64_t sub_100049228()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 24));

  return swift_deallocObject(v0, 40, 7);
}

uint64_t sub_100049254()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100049264(char a1, ValueMetadata *a2)
{
  uint64_t v2;

  return sub_100047EC4(a1, a2, *(ValueMetadata **)(v2 + 16));
}

unint64_t sub_10004926C()
{
  unint64_t result;

  result = qword_1000EE0B8;
  if (!qword_1000EE0B8)
  {
    result = swift_getMetatypeMetadata(&type metadata for HKKeyValueDataSource.Identifier);
    atomic_store(result, (unint64_t *)&qword_1000EE0B8);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for HKKeyValueDataSource.Identifier(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFA)
    goto LABEL_17;
  if (a2 + 6 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 6) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 6;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 6;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 6;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 7;
  v8 = v6 - 7;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for HKKeyValueDataSource.Identifier(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 6 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 6) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFA)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF9)
    return ((uint64_t (*)(void))((char *)&loc_100049380 + 4 * byte_1000B2AC1[v4]))();
  *a1 = a2 + 6;
  return ((uint64_t (*)(void))((char *)sub_1000493B4 + 4 * byte_1000B2ABC[v4]))();
}

uint64_t sub_1000493B4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000493BC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1000493C4);
  return result;
}

uint64_t sub_1000493D0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1000493D8);
  *(_BYTE *)result = a2 + 6;
  return result;
}

uint64_t sub_1000493DC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000493E4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for HKKeyValueDataSource.Identifier()
{
  return &type metadata for HKKeyValueDataSource.Identifier;
}

uint64_t sub_100049400()
{
  return sub_100013198(&qword_1000EE0C0, (uint64_t (*)(uint64_t))sub_10004942C, (uint64_t)&protocol conformance descriptor for [A]);
}

void sub_10004942C()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1000EE0C8)
  {
    v0 = type metadata accessor for Array(0, &type metadata for HKKeyValueDataSource.Identifier);
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1000EE0C8);
  }
}

unint64_t sub_100049484()
{
  unint64_t result;

  result = qword_1000EE0D0;
  if (!qword_1000EE0D0)
  {
    result = swift_getWitnessTable(&unk_1000B2C30, &type metadata for HKKeyValueDataSource.Identifier);
    atomic_store(result, (unint64_t *)&qword_1000EE0D0);
  }
  return result;
}

unint64_t sub_1000494C8(Swift::String string)
{
  void *object;
  Swift::String v2;
  unint64_t v3;

  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1000DC0D8, v2);
  swift_bridgeObjectRelease(object);
  if (v3 >= 7)
    return 7;
  else
    return v3;
}

uint64_t sub_10004953C(_QWORD *a1, void *a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  char v25;
  void (*v26)(char *, _QWORD, uint64_t);
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  __int128 v42;
  id v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  _QWORD *v47;
  __int128 v48[2];

  sub_10004A1CC(0, &qword_1000EE140, (uint64_t (*)(uint64_t))&type metadata accessor for HeaderFooterDataSourceWithLayout, (uint64_t)&protocol witness table for CompoundSectionedDataSource, (uint64_t (*)(uint64_t, uint64_t, uint64_t))&type metadata accessor for HideableDataSource.Visibility);
  v46 = v5;
  v44 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v45 = (char *)&v42 - v6;
  sub_10004A1CC(0, &qword_1000EE148, (uint64_t (*)(uint64_t))&type metadata accessor for MutableArrayDataSourceWithLayout, (uint64_t)&protocol witness table for MutableArrayDataSource, (uint64_t (*)(uint64_t, uint64_t, uint64_t))&type metadata accessor for HideableDataSource.Visibility);
  v8 = v7;
  v9 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v11 = (char *)&v42 - v10;
  v12 = type metadata accessor for DispatchTime(0);
  __chkstk_darwin(v12);
  v14 = (char *)&v42 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)(v2 + qword_1000EE0E8) = &_swiftEmptySetSingleton;
  sub_100026E84(0, &qword_1000EE150, type metadata accessor for PersonalizedFeedDataSource, sub_10004A030, (uint64_t (*)(uint64_t, uint64_t, uint64_t))&type metadata accessor for DelayedDataSource);
  v47 = a1;
  sub_100028F08((uint64_t)a1, (uint64_t)v48);
  v15 = swift_allocObject(&unk_1000DEF28, 64, 7);
  sub_10001AF7C(v48, v15 + 16);
  *(_QWORD *)(v15 + 56) = a2;
  v43 = a2;
  v16 = swift_retain(v2);
  static DispatchTime.now()(v16);
  v17 = DelayedDataSource.__allocating_init(delay:dataSource:)(v14, sub_10004A078, v15);
  v18 = qword_1000EE0D8;
  *(_QWORD *)(v2 + qword_1000EE0D8) = v17;
  type metadata accessor for MutableArrayDataSourceWithLayout(0);
  sub_1000076D8(0, (unint64_t *)&qword_1000ED1E0, (uint64_t (*)(uint64_t))sub_10002768C, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for _ContiguousArrayStorage);
  v20 = swift_allocObject(v19, 40, 7);
  v42 = xmmword_1000B11F0;
  *(_OWORD *)(v20 + 16) = xmmword_1000B11F0;
  sub_1000076D8(0, (unint64_t *)&qword_1000ECA70, (uint64_t (*)(uint64_t))sub_100013434, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for _ContiguousArrayStorage);
  v22 = swift_allocObject(v21, 72, 7);
  *(_OWORD *)(v22 + 16) = v42;
  *(_QWORD *)(v22 + 56) = type metadata accessor for ContentConfigurationItem(0);
  *(_QWORD *)(v22 + 64) = sub_100013198(&qword_1000ECA80, (uint64_t (*)(uint64_t))&type metadata accessor for ContentConfigurationItem, (uint64_t)&protocol conformance descriptor for ContentConfigurationItem);
  v23 = sub_100007E0C((_QWORD *)(v22 + 32));
  sub_10000DB8C((uint64_t)v23);
  *(_QWORD *)(v20 + 32) = v22;
  v24 = MutableArrayDataSourceWithLayout.__allocating_init(_:collapseEmptySections:layoutConstructor:)(v20, 1, sub_1000379B0, 0);
  v25 = static FeatureStatusSupport.isHealthChecklistAvailable()();
  v26 = *(void (**)(char *, _QWORD, uint64_t))(v9 + 104);
  if ((v25 & 1) != 0)
  {
    v26(v11, enum case for HideableDataSource.Visibility.visible<A>(_:), v8);
    v27 = enum case for HideableDataSource.Visibility.hidden<A>(_:);
  }
  else
  {
    v27 = enum case for HideableDataSource.Visibility.hidden<A>(_:);
    v26(v11, enum case for HideableDataSource.Visibility.hidden<A>(_:), v8);
  }
  sub_10004A1CC(0, &qword_1000EE160, (uint64_t (*)(uint64_t))&type metadata accessor for MutableArrayDataSourceWithLayout, (uint64_t)&protocol witness table for MutableArrayDataSource, (uint64_t (*)(uint64_t, uint64_t, uint64_t))&type metadata accessor for HideableDataSource);
  swift_allocObject(v28, *(unsigned int *)(v28 + 48), *(unsigned __int16 *)(v28 + 52));
  v29 = swift_retain(v24);
  v30 = HideableDataSource.init(source:visibility:)(v29, v11);
  *(_QWORD *)(v2 + qword_1000EE0E0) = v30;
  v31 = *(_QWORD *)(v2 + v18);
  v32 = sub_1000149EC();
  v33 = sub_10004A084();
  v34 = sub_10004A0EC();
  v35 = sub_10004A164();
  v36 = type metadata accessor for HeaderFooterDataSourceWithLayout(0);
  swift_allocObject(v36, *(unsigned int *)(v36 + 48), *(unsigned __int16 *)(v36 + 52));
  swift_retain(v31);
  swift_retain(v30);
  v37 = HeaderFooterDataSourceWithLayout.init(headerDataSource:mainDataSource:footerDataSource:)(0, 0, 0, v31, v32, v33, v30, v34, v35);
  swift_release(v2);
  v38 = v45;
  (*(void (**)(char *, uint64_t, uint64_t))(v44 + 104))(v45, v27, v46);
  v39 = swift_retain(v37);
  v40 = HideableDataSource.init(source:visibility:)(v39, v38);
  swift_retain(v40);
  sub_100009860();
  swift_release(v24);
  swift_release(v37);

  swift_release(v40);
  _s6Health23OpenSleepScheduleIntentVwxx_0(v47);
  return v40;
}

uint64_t sub_10004999C(uint64_t a1, void *a2)
{
  void *v3;
  id v4;
  id v5;
  id v6;
  uint64_t v7;
  _QWORD v9[5];

  sub_100028F08(a1, (uint64_t)v9);
  v3 = (void *)objc_opt_self(HKProfileIdentifier);
  v4 = a2;
  v5 = objc_msgSend(v3, "primaryProfile");
  v6 = objc_allocWithZone((Class)type metadata accessor for PersonalizedFeedDataSource(0));
  v7 = sub_10005C42C(1, v9, (uint64_t)v5, a2, 1);

  return v7;
}

uint64_t sub_100049A3C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t (*v13)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t ObjectType;
  unsigned int *v20;
  uint64_t v22;

  sub_10004A1CC(0, &qword_1000EE140, (uint64_t (*)(uint64_t))&type metadata accessor for HeaderFooterDataSourceWithLayout, (uint64_t)&protocol witness table for CompoundSectionedDataSource, (uint64_t (*)(uint64_t, uint64_t, uint64_t))&type metadata accessor for HideableDataSource.Visibility);
  v9 = v8;
  v10 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v12 = (char *)&v22 - v11;
  sub_10004A1CC(0, &qword_1000EE190, (uint64_t (*)(uint64_t))&type metadata accessor for HeaderFooterDataSourceWithLayout, (uint64_t)&protocol witness table for CompoundSectionedDataSource, (uint64_t (*)(uint64_t, uint64_t, uint64_t))&type metadata accessor for HideableDataSource);
  v13 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))method lookup function for HideableDataSource();
  v14 = v13(a1, a2, a3, a4);
  v15 = dispatch thunk of HideableDataSource.wrappedDataSource.getter(v14);
  v16 = HeaderFooterDataSourceWithLayout.mainDataSource.getter();
  v18 = v17;
  swift_release(v15);
  ObjectType = swift_getObjectType(v16);
  LOBYTE(v15) = SnapshotDataSource.isEmpty.getter(ObjectType, v18);
  swift_unknownObjectRelease(v16);
  v20 = (unsigned int *)&enum case for HideableDataSource.Visibility.hidden<A>(_:);
  if ((v15 & 1) == 0)
    v20 = (unsigned int *)&enum case for HideableDataSource.Visibility.visible<A>(_:);
  (*(void (**)(char *, _QWORD, uint64_t))(v10 + 104))(v12, *v20, v9);
  return dispatch thunk of HideableDataSource.visibility.setter(v12);
}

uint64_t sub_100049BA4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t (*v20)(uint64_t, uint64_t, char *, uint64_t);
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t ObjectType;
  unsigned int *v27;
  __n128 v28;
  uint64_t v30;
  uint64_t v31;

  sub_10004A1CC(0, &qword_1000EE140, (uint64_t (*)(uint64_t))&type metadata accessor for HeaderFooterDataSourceWithLayout, (uint64_t)&protocol witness table for CompoundSectionedDataSource, (uint64_t (*)(uint64_t, uint64_t, uint64_t))&type metadata accessor for HideableDataSource.Visibility);
  v10 = v9;
  v11 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v13 = (char *)&v30 - v12;
  sub_1000227D0();
  v30 = *(_QWORD *)(v14 - 8);
  v31 = v14;
  __chkstk_darwin(v14);
  v16 = (char *)&v30 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = static String._unconditionallyBridgeFromObjectiveC(_:)(a3);
  v19 = v18;
  static NSDiffableDataSourceSnapshot._unconditionallyBridgeFromObjectiveC(_:)(a4, &type metadata for String, &type metadata for String, &protocol witness table for String, &protocol witness table for String);
  sub_10004A1CC(0, &qword_1000EE190, (uint64_t (*)(uint64_t))&type metadata accessor for HeaderFooterDataSourceWithLayout, (uint64_t)&protocol witness table for CompoundSectionedDataSource, (uint64_t (*)(uint64_t, uint64_t, uint64_t))&type metadata accessor for HideableDataSource);
  v20 = (uint64_t (*)(uint64_t, uint64_t, char *, uint64_t))method lookup function for HideableDataSource();
  swift_retain(a1);
  v21 = v20(v17, v19, v16, a5);
  v22 = dispatch thunk of HideableDataSource.wrappedDataSource.getter(v21);
  v23 = HeaderFooterDataSourceWithLayout.mainDataSource.getter();
  v25 = v24;
  swift_release(v22);
  ObjectType = swift_getObjectType(v23);
  LOBYTE(v22) = SnapshotDataSource.isEmpty.getter(ObjectType, v25);
  swift_unknownObjectRelease(v23);
  v27 = (unsigned int *)&enum case for HideableDataSource.Visibility.hidden<A>(_:);
  if ((v22 & 1) == 0)
    v27 = (unsigned int *)&enum case for HideableDataSource.Visibility.visible<A>(_:);
  (*(void (**)(char *, _QWORD, uint64_t))(v11 + 104))(v13, *v27, v10);
  dispatch thunk of HideableDataSource.visibility.setter(v13);
  swift_release(a1);
  v28 = swift_bridgeObjectRelease(v19);
  return (*(uint64_t (**)(char *, uint64_t, __n128))(v30 + 8))(v16, v31, v28);
}

uint64_t sub_100049DA0(unsigned __int8 *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  int v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  unsigned int *v13;
  _BYTE v15[24];

  sub_10004A1CC(0, &qword_1000EE148, (uint64_t (*)(uint64_t))&type metadata accessor for MutableArrayDataSourceWithLayout, (uint64_t)&protocol witness table for MutableArrayDataSource, (uint64_t (*)(uint64_t, uint64_t, uint64_t))&type metadata accessor for HideableDataSource.Visibility);
  v5 = v4;
  v6 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v8 = &v15[-v7 - 8];
  v9 = *a1;
  a2 += 16;
  swift_beginAccess(a2, v15, 0, 0);
  result = swift_weakLoadStrong(a2);
  if (result)
  {
    v11 = result;
    v12 = *(_QWORD *)(result + qword_1000EE0E0);
    swift_retain(v12);
    swift_release(v11);
    v13 = (unsigned int *)&enum case for HideableDataSource.Visibility.visible<A>(_:);
    if (!v9)
      v13 = (unsigned int *)&enum case for HideableDataSource.Visibility.hidden<A>(_:);
    (*(void (**)(char *, _QWORD, uint64_t))(v6 + 104))(v8, *v13, v5);
    dispatch thunk of HideableDataSource.visibility.setter(v8);
    return swift_release(v12);
  }
  return result;
}

void sub_100049EB4(void *a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  id v6;
  void *v7;
  uint64_t v8;

  v2 = type metadata accessor for HealthChecklistOpenedAnalyticsSource(0);
  __chkstk_darwin(v2);
  v4 = (char *)&v8 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, _QWORD))(v5 + 104))(v4, enum case for HealthChecklistOpenedAnalyticsSource.getMoreFromHealth(_:));
  v6 = objc_allocWithZone((Class)type metadata accessor for HealthChecklistViewController(0));
  v7 = (void *)HealthChecklistViewController.init(sender:isDoneButtonVisible:)(v4, 0);
  objc_msgSend(a1, "showViewController:sender:", v7, a1);

}

void sub_100049F64()
{
  _swift_stdlib_reportUnimplementedInitializer("Health.GetMoreFromHealthDataSource", 34, "init(source:visibility:)", 24, 0);
  __break(1u);
}

uint64_t sub_100049F90()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + qword_1000EE0D8));
  swift_release(*(_QWORD *)(v0 + qword_1000EE0E0));
  return swift_bridgeObjectRelease(*(_QWORD *)(v0 + qword_1000EE0E8));
}

uint64_t sub_100049FCC()
{
  uint64_t v0;

  v0 = HideableDataSource.deinit();
  swift_release(*(_QWORD *)(v0 + qword_1000EE0D8));
  swift_release(*(_QWORD *)(v0 + qword_1000EE0E0));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + qword_1000EE0E8));
  return swift_deallocClassInstance(v0, 40, 7);
}

uint64_t sub_10004A028()
{
  return type metadata accessor for GetMoreFromHealthDataSource(0);
}

uint64_t sub_10004A030()
{
  return sub_100013198(&qword_1000EE158, type metadata accessor for PersonalizedFeedDataSource, (uint64_t)&protocol conformance descriptor for FetchedResultsControllerDataSource<A>);
}

uint64_t sub_10004A04C()
{
  uint64_t v0;

  _s6Health23OpenSleepScheduleIntentVwxx_0((_QWORD *)(v0 + 16));

  return swift_deallocObject(v0, 64, 7);
}

uint64_t sub_10004A078()
{
  uint64_t v0;

  return sub_10004999C(v0 + 16, *(void **)(v0 + 56));
}

unint64_t sub_10004A084()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000EE178;
  if (!qword_1000EE178)
  {
    sub_100026E84(255, &qword_1000EE150, type metadata accessor for PersonalizedFeedDataSource, sub_10004A030, (uint64_t (*)(uint64_t, uint64_t, uint64_t))&type metadata accessor for DelayedDataSource);
    result = swift_getWitnessTable(&protocol conformance descriptor for DelayedDataSource<A>, v1);
    atomic_store(result, (unint64_t *)&qword_1000EE178);
  }
  return result;
}

unint64_t sub_10004A0EC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000EE180;
  if (!qword_1000EE180)
  {
    sub_10004A1CC(255, &qword_1000EE160, (uint64_t (*)(uint64_t))&type metadata accessor for MutableArrayDataSourceWithLayout, (uint64_t)&protocol witness table for MutableArrayDataSource, (uint64_t (*)(uint64_t, uint64_t, uint64_t))&type metadata accessor for HideableDataSource);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> HideableDataSource<A>, v1);
    atomic_store(result, (unint64_t *)&qword_1000EE180);
  }
  return result;
}

unint64_t sub_10004A164()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000EE188;
  if (!qword_1000EE188)
  {
    sub_10004A1CC(255, &qword_1000EE160, (uint64_t (*)(uint64_t))&type metadata accessor for MutableArrayDataSourceWithLayout, (uint64_t)&protocol witness table for MutableArrayDataSource, (uint64_t (*)(uint64_t, uint64_t, uint64_t))&type metadata accessor for HideableDataSource);
    result = swift_getWitnessTable(&protocol conformance descriptor for HideableDataSource<A>, v1);
    atomic_store(result, (unint64_t *)&qword_1000EE188);
  }
  return result;
}

void sub_10004A1CC(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;

  if (!*a2)
  {
    v9 = a3(255);
    v10 = a5(a1, v9, a4);
    if (!v11)
      atomic_store(v10, a2);
  }
}

uint64_t sub_10004A22C()
{
  uint64_t v0;

  swift_weakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10004A250(unsigned __int8 *a1)
{
  uint64_t v1;

  return sub_100049DA0(a1, v1);
}

void sub_10004A258(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_1000EE1B0)
  {
    sub_100026E84(255, &qword_1000EE1B8, type metadata accessor for PersonalizedFeedDataSource, sub_10004A030, (uint64_t (*)(uint64_t, uint64_t, uint64_t))&type metadata accessor for DelayedDataSource.DataSourceState);
    v3 = type metadata accessor for Published.Publisher(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_1000EE1B0);
  }
}

uint64_t type metadata accessor for MiscellaneousItemsDataSource(uint64_t a1)
{
  uint64_t result;

  result = qword_1000EE1C8;
  if (!qword_1000EE1C8)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for MiscellaneousItemsDataSource);
  return result;
}

uint64_t sub_10004A308(uint64_t a1)
{
  _BYTE v2[8];

  return swift_initClassMetadata2(a1, 0, 0, v2, a1 + qword_1000F0F20);
}

uint64_t sub_10004A344@<X0>(char a1@<W0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  id v29;
  void (*v30)(_BYTE *, _QWORD);
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  char *v37;
  uint64_t v38;
  char *v39;
  char *v40;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  _BYTE v54[32];
  _QWORD v55[6];

  v53 = a2;
  v3 = type metadata accessor for SectionedDataSourceContainerViewType(0);
  v51 = *(_QWORD *)(v3 - 8);
  v52 = v3;
  __chkstk_darwin(v3);
  v50 = (char *)&v42 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000076D8(0, &qword_1000ECA60, (uint64_t (*)(uint64_t))&type metadata accessor for UIBackgroundConfiguration, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
  __chkstk_darwin(v5);
  v49 = (char *)&v42 - v6;
  v7 = type metadata accessor for CellDeselectionBehavior(0);
  v47 = *(_QWORD *)(v7 - 8);
  v48 = v7;
  __chkstk_darwin(v7);
  v46 = (char *)&v42 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000076D8(0, &qword_1000ECCD8, (uint64_t (*)(uint64_t))&type metadata accessor for UICellAccessory.LayoutDimension, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
  __chkstk_darwin(v9);
  v42 = (char *)&v42 - v10;
  v11 = type metadata accessor for UICellAccessory.DisclosureIndicatorOptions(0);
  v44 = *(_QWORD *)(v11 - 8);
  v45 = v11;
  __chkstk_darwin(v11);
  v13 = (char *)&v42 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for UICellAccessory.DisplayedState(0);
  v15 = *(_QWORD *)(v14 - 8);
  __chkstk_darwin(v14);
  v17 = (char *)&v42 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = type metadata accessor for UUID(0);
  v19 = *(_QWORD *)(v18 - 8);
  __chkstk_darwin(v18);
  v21 = (char *)&v42 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = a1 & 1;
  if ((a1 & 1) != 0)
    v23 = 0x80000001000BA820;
  else
    v23 = 0x80000001000BA840;
  v24 = swift_allocObject(&unk_1000DEFB0, 17, 7);
  *(_BYTE *)(v24 + 16) = v22;
  v25 = UUID.init()(v24);
  v26 = UUID.uuidString.getter(v25);
  v43 = v27;
  (*(void (**)(char *, uint64_t))(v19 + 8))(v21, v18);
  v55[3] = type metadata accessor for UIListContentConfiguration(0);
  v55[4] = &protocol witness table for UIListContentConfiguration;
  v28 = sub_100007E0C(v55);
  static UIListContentConfiguration.cell()(v28);
  swift_bridgeObjectRetain(v23);
  UIListContentConfiguration.text.setter(0xD000000000000013, v23);
  v29 = objc_msgSend((id)objc_opt_self(UIColor), "blackColor");
  v30 = (void (*)(_BYTE *, _QWORD))UIListContentConfiguration.textProperties.modify(v54);
  UIListContentConfiguration.TextProperties.color.setter(v29);
  v30(v54, 0);
  sub_1000076D8(0, &qword_1000ECCE0, (uint64_t (*)(uint64_t))&type metadata accessor for UICellAccessory, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for _ContiguousArrayStorage);
  v32 = v31;
  v33 = type metadata accessor for UICellAccessory(0);
  v34 = swift_allocObject(v32, ((*(unsigned __int8 *)(*(_QWORD *)(v33 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v33 - 8) + 80))+ *(_QWORD *)(*(_QWORD *)(v33 - 8) + 72), *(unsigned __int8 *)(*(_QWORD *)(v33 - 8) + 80) | 7);
  *(_OWORD *)(v34 + 16) = xmmword_1000B11F0;
  (*(void (**)(char *, _QWORD, uint64_t))(v15 + 104))(v17, enum case for UICellAccessory.DisplayedState.always(_:), v14);
  v35 = type metadata accessor for UICellAccessory.LayoutDimension(0);
  v36 = v42;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v35 - 8) + 56))(v42, 1, 1, v35);
  UICellAccessory.DisclosureIndicatorOptions.init(isHidden:reservedLayoutWidth:tintColor:)(2, v36, 0);
  static UICellAccessory.disclosureIndicator(displayed:options:)(v17, v13);
  (*(void (**)(char *, uint64_t))(v44 + 8))(v13, v45);
  (*(void (**)(char *, uint64_t))(v15 + 8))(v17, v14);
  v37 = v46;
  (*(void (**)(char *, _QWORD, uint64_t))(v47 + 104))(v46, enum case for CellDeselectionBehavior.default(_:), v48);
  swift_retain(v24);
  swift_bridgeObjectRelease(v23);
  v38 = type metadata accessor for UIBackgroundConfiguration(0);
  v39 = v49;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v38 - 8) + 56))(v49, 1, 1, v38);
  v40 = v50;
  (*(void (**)(char *, _QWORD, uint64_t))(v51 + 104))(v50, enum case for SectionedDataSourceContainerViewType.collectionView(_:), v52);
  ContentConfigurationItem.init(uniqueIdentifier:contentConfiguration:cellAccessories:cellSelectionHandler:deselectionBehavior:backgroundConfiguration:updateContentConfigurationHandler:container:automationIdentifier:)(v26, v43, v55, v34, sub_10004ADB0, v24, v37, v39, 0, 0, v40, 0, 0);
  return swift_release(v24);
}

void sub_10004A7E4(void *a1, char a2)
{
  id v3;
  uint64_t v4;
  id v5;
  uint64_t v6;
  void *v7;
  id v8;
  void *v9;
  id v10;
  id v11;
  void *v12;
  id v13;
  _QWORD v14[5];
  _QWORD v15[5];

  if ((a2 & 1) != 0)
  {
    v10 = objc_allocWithZone((Class)type metadata accessor for HealthSharingInternalSettingsViewController(0));
    v13 = (id)HealthSharingInternalSettingsViewController.init()();
    v11 = objc_msgSend(a1, "navigationController");
    if (v11)
    {
      v12 = v11;
      objc_msgSend(v11, "pushViewController:animated:", v13, 1);

    }
  }
  else
  {
    v3 = objc_msgSend(objc_allocWithZone((Class)HKHealthStore), "init");
    v4 = type metadata accessor for PinnedContentManager(0);
    v5 = v3;
    v6 = PinnedContentManager.__allocating_init(healthStore:domain:)();
    type metadata accessor for SharedProfileOverviewViewController(0);
    v13 = v5;
    UIViewController.resolvedHealthExperienceStore.getter(v15);
    v14[3] = v4;
    v14[4] = &protocol witness table for PinnedContentManager;
    v14[0] = v6;
    swift_retain(v6);
    v7 = (void *)SharedProfileOverviewViewController.__allocating_init(healthStore:healthExperienceStore:pinnedContentManager:)(v13, v15, v14);
    v8 = objc_msgSend(a1, "navigationController");
    if (v8)
    {
      v9 = v8;
      objc_msgSend(v8, "pushViewController:animated:", v7, 1);

    }
    swift_release(v6);
  }

}

uint64_t sub_10004A944()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void (*v24)(char *, uint64_t);
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  void *v29;
  Swift::String v30;
  Swift::String v31;
  __int128 v33;
  __int128 v34;
  uint64_t v35;
  uint64_t v36;

  v0 = type metadata accessor for UUID(0);
  v1 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin(v0);
  v3 = (char *)&v33 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for ContentConfigurationItem(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v33 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000076D8(0, (unint64_t *)&qword_1000ECA70, (uint64_t (*)(uint64_t))sub_100013434, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for _ContiguousArrayStorage);
  v9 = (_QWORD *)swift_allocObject(v8, 72, 7);
  v33 = xmmword_1000B11F0;
  *((_OWORD *)v9 + 1) = xmmword_1000B11F0;
  v9[7] = v4;
  v10 = sub_100013198(&qword_1000ECA80, (uint64_t (*)(uint64_t))&type metadata accessor for ContentConfigurationItem, (uint64_t)&protocol conformance descriptor for ContentConfigurationItem);
  v9[8] = v10;
  v11 = sub_100007E0C(v9 + 4);
  v12 = sub_10004A344(0, (uint64_t)v11);
  if ((static HealthSharingFeatureManager.isFeatureFlagEnabled.getter(v12) & 1) != 0)
  {
    sub_10004A344(1, (uint64_t)v7);
    v14 = v9[2];
    v13 = v9[3];
    if (v14 >= v13 >> 1)
      v9 = sub_100029778((_QWORD *)(v13 > 1), v14 + 1, 1, v9);
    v35 = v4;
    v36 = v10;
    v15 = sub_100007E0C(&v34);
    (*(void (**)(_QWORD *, char *, uint64_t))(v5 + 16))(v15, v7, v4);
    v9[2] = v14 + 1;
    sub_10001AF7C(&v34, (uint64_t)&v9[5 * v14 + 4]);
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  }
  sub_1000076D8(0, &qword_1000ECA68, (uint64_t (*)(uint64_t))&type metadata accessor for ArrayDataSourceSection, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for _ContiguousArrayStorage);
  v17 = v16;
  v18 = type metadata accessor for ArrayDataSourceSection(0);
  v19 = swift_allocObject(v17, ((*(unsigned __int8 *)(*(_QWORD *)(v18 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v18 - 8) + 80))+ *(_QWORD *)(*(_QWORD *)(v18 - 8) + 72), *(unsigned __int8 *)(*(_QWORD *)(v18 - 8) + 80) | 7);
  *(_OWORD *)(v19 + 16) = v33;
  v20 = UUID.init()(v19);
  v21 = UUID.uuidString.getter(v20);
  v23 = v22;
  v24 = *(void (**)(char *, uint64_t))(v1 + 8);
  v24(v3, v0);
  v25 = ArrayDataSourceSection.init(title:arrangedItems:identifier:)(0x616C6C656373694DLL, 0xEE0073756F75656ELL, v9, v21, v23);
  *(_QWORD *)&v34 = 0x3C53447961727241;
  *((_QWORD *)&v34 + 1) = 0xE800000000000000;
  v26 = UUID.init()(v25);
  v27 = UUID.uuidString.getter(v26);
  v29 = v28;
  v24(v3, v0);
  v30._countAndFlagsBits = v27;
  v30._object = v29;
  String.append(_:)(v30);
  swift_bridgeObjectRelease(v29);
  v31._countAndFlagsBits = 62;
  v31._object = (void *)0xE100000000000000;
  String.append(_:)(v31);
  return ArrayDataSource.init(arrangedSections:identifier:)(v19, v34, *((_QWORD *)&v34 + 1));
}

void sub_10004AC28(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_10004AC58(a1, a2, a3, (uint64_t)"init(_:identifier:)", 19);
}

void sub_10004AC40(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_10004AC58(a1, a2, a3, (uint64_t)"init(arrangedSections:identifier:)", 34);
}

void sub_10004AC58(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _swift_stdlib_reportUnimplementedInitializer("Health.MiscellaneousItemsDataSource", 35, a4, a5, 0);
  __break(1u);
}

uint64_t sub_10004AC80()
{
  return type metadata accessor for MiscellaneousItemsDataSource(0);
}

unint64_t sub_10004AC88@<X0>(uint64_t a1@<X3>, uint64_t *a2@<X8>)
{
  swift_getWitnessTable(&unk_1000B2D30, a1);
  return sub_1000213F0(a2);
}

uint64_t sub_10004ACF4(uint64_t a1, uint64_t a2)
{
  uint64_t WitnessTable;

  WitnessTable = swift_getWitnessTable(&unk_1000B2D30, a2);
  return sub_100020F3C(a1, a2, WitnessTable);
}

uint64_t sub_10004AD44(uint64_t a1)
{
  uint64_t result;

  *(_QWORD *)(a1 + 8) = sub_100013198(&qword_1000EE218, type metadata accessor for MiscellaneousItemsDataSource, (uint64_t)&unk_1000B2CD8);
  result = sub_100013198(&qword_1000EE220, type metadata accessor for MiscellaneousItemsDataSource, (uint64_t)&unk_1000B2D08);
  *(_QWORD *)(a1 + 24) = result;
  return result;
}

uint64_t sub_10004ADA0()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

void sub_10004ADB0(void *a1)
{
  uint64_t v1;

  sub_10004A7E4(a1, *(_BYTE *)(v1 + 16));
}

uint64_t sub_10004ADB8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE v17[24];
  _QWORD v18[2];

  v1 = v0;
  v2 = type metadata accessor for Date(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = __chkstk_darwin(v2);
  v6 = &v17[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  __chkstk_darwin(v4);
  v8 = &v17[-v7 - 8];
  v9 = *(_QWORD *)(v0 + 16);
  v10 = *(_QWORD *)(v0 + 24);
  v18[0] = v9;
  v18[1] = v10;
  swift_beginAccess(v1 + OBJC_IVAR____TtC6Health23IntroFlowThrottledCheck__lastCheckVersion, v17, 33, 0);
  sub_10004AF8C();
  v12 = v11;
  swift_bridgeObjectRetain(v10);
  UserDefault.wrappedValue.setter(v18, v12);
  v13 = swift_endAccess(v17);
  Date.init()(v13);
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v3 + 16))(v6, v8, v2);
  swift_beginAccess(v1 + OBJC_IVAR____TtC6Health23IntroFlowThrottledCheck__lastCheckDate, v17, 33, 0);
  sub_10004AFE0(0);
  UserDefault.wrappedValue.setter(v6, v14);
  swift_endAccess(v17);
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v3 + 8))(v8, v2);
}

uint64_t sub_10004AF04()
{
  _QWORD *v0;
  char *v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;

  swift_bridgeObjectRelease(v0[3]);
  v1 = (char *)v0 + OBJC_IVAR____TtC6Health23IntroFlowThrottledCheck__lastCheckVersion;
  sub_10004AF8C();
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  v3 = (char *)v0 + OBJC_IVAR____TtC6Health23IntroFlowThrottledCheck__lastCheckDate;
  sub_10004AFE0(0);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(v3, v4);
  return swift_deallocClassInstance(v0, *(unsigned int *)(*v0 + 48), *(unsigned __int16 *)(*v0 + 52));
}

uint64_t sub_10004AF84()
{
  return type metadata accessor for IntroFlowThrottledCheck(0);
}

void sub_10004AF8C()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1000EE270)
  {
    v0 = type metadata accessor for UserDefault(0, &type metadata for String);
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1000EE270);
  }
}

void sub_10004AFE0(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_1000EE278)
  {
    v2 = type metadata accessor for Date(255);
    v3 = type metadata accessor for UserDefault(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_1000EE278);
  }
}

id sub_10004B034()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  id v3;
  id v4;
  void *v5;
  id v6;

  v1 = OBJC_IVAR____TtC6Health23MainSplitViewController____lazy_storage___providedHealthToolbox;
  v2 = *(void **)(v0 + OBJC_IVAR____TtC6Health23MainSplitViewController____lazy_storage___providedHealthToolbox);
  if (v2)
  {
    v3 = *(id *)(v0 + OBJC_IVAR____TtC6Health23MainSplitViewController____lazy_storage___providedHealthToolbox);
  }
  else
  {
    v4 = objc_msgSend((id)objc_opt_self(HBXViewControllerFactory), "sharedInstanceForHealthStore:", *(_QWORD *)(v0 + OBJC_IVAR____TtC6Health23MainSplitViewController_providedHealthStore));
    v5 = *(void **)(v0 + v1);
    *(_QWORD *)(v0 + v1) = v4;
    v3 = v4;

    v2 = 0;
  }
  v6 = v2;
  return v3;
}

id sub_10004B0B8()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  id v3;
  uint64_t v4;
  void *v5;
  id v6;
  id v7;
  id v8;
  void *v9;
  id v10;
  _QWORD v12[5];
  _QWORD v13[5];

  v1 = OBJC_IVAR____TtC6Health23MainSplitViewController____lazy_storage___summaryViewController;
  v2 = *(void **)(v0 + OBJC_IVAR____TtC6Health23MainSplitViewController____lazy_storage___summaryViewController);
  if (v2)
  {
    v3 = *(id *)(v0 + OBJC_IVAR____TtC6Health23MainSplitViewController____lazy_storage___summaryViewController);
  }
  else
  {
    v4 = v0;
    sub_100028F08(v0 + OBJC_IVAR____TtC6Health23MainSplitViewController_providedHealthExperienceStore, (uint64_t)v13);
    v5 = *(void **)(v0 + OBJC_IVAR____TtC6Health23MainSplitViewController_providedHealthStore);
    sub_100028F08(v0 + OBJC_IVAR____TtC6Health23MainSplitViewController_pinnedContentManager, (uint64_t)v12);
    v6 = objc_allocWithZone((Class)type metadata accessor for SummaryFeedViewController(0));
    v7 = v5;
    v8 = sub_100065050(v13, v7, v12);

    v9 = *(void **)(v4 + v1);
    *(_QWORD *)(v4 + v1) = v8;
    v3 = v8;

    v2 = 0;
  }
  v10 = v2;
  return v3;
}

id sub_10004B180()
{
  return sub_10004B2BC(&OBJC_IVAR____TtC6Health23MainSplitViewController____lazy_storage___summaryNavigationController, (uint64_t (*)(void))sub_10004B0B8);
}

id sub_10004B194()
{
  return sub_10004B1E0(&OBJC_IVAR____TtC6Health23MainSplitViewController____lazy_storage___sharingViewController, (uint64_t (*)(_QWORD))&type metadata accessor for SharingOverviewViewController, (uint64_t (*)(_BYTE *, void *, _BYTE *))&SharingOverviewViewController.init(healthExperienceStore:healthStore:pinnedContentManager:));
}

id sub_10004B1B0()
{
  return sub_10004B2BC(&OBJC_IVAR____TtC6Health23MainSplitViewController____lazy_storage___sharingNavigationController, (uint64_t (*)(void))sub_10004B194);
}

id sub_10004B1C4()
{
  return sub_10004B1E0(&OBJC_IVAR____TtC6Health23MainSplitViewController____lazy_storage___browseViewController, (uint64_t (*)(_QWORD))&type metadata accessor for BrowseViewController, (uint64_t (*)(_BYTE *, void *, _BYTE *))&BrowseViewController.init(healthExperienceStore:healthStore:pinnedContentManager:));
}

id sub_10004B1E0(uint64_t *a1, uint64_t (*a2)(_QWORD), uint64_t (*a3)(_BYTE *, void *, _BYTE *))
{
  uint64_t v3;
  uint64_t v4;
  void *v5;
  id v6;
  uint64_t v9;
  void *v10;
  id v11;
  void *v12;
  void *v13;
  id v14;
  _BYTE v16[40];
  _BYTE v17[40];

  v4 = *a1;
  v5 = *(void **)(v3 + *a1);
  if (v5)
  {
    v6 = *(id *)(v3 + *a1);
  }
  else
  {
    v9 = v3;
    sub_100028F08(v3 + OBJC_IVAR____TtC6Health23MainSplitViewController_providedHealthExperienceStore, (uint64_t)v17);
    v10 = *(void **)(v3 + OBJC_IVAR____TtC6Health23MainSplitViewController_providedHealthStore);
    sub_100028F08(v3 + OBJC_IVAR____TtC6Health23MainSplitViewController_pinnedContentManager, (uint64_t)v16);
    v11 = objc_allocWithZone((Class)a2(0));
    v12 = (void *)a3(v17, v10, v16);
    v13 = *(void **)(v3 + v4);
    *(_QWORD *)(v9 + v4) = v12;
    v6 = v12;

    v5 = 0;
  }
  v14 = v5;
  return v6;
}

id sub_10004B2A8()
{
  return sub_10004B2BC(&OBJC_IVAR____TtC6Health23MainSplitViewController____lazy_storage___browseNavigationController, (uint64_t (*)(void))sub_10004B1C4);
}

id sub_10004B2BC(uint64_t *a1, uint64_t (*a2)(void))
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  id v5;
  void *v6;
  id v7;
  id v8;
  void *v9;
  id v10;

  v3 = *a1;
  v4 = *(void **)(v2 + *a1);
  if (v4)
  {
    v5 = *(id *)(v2 + *a1);
  }
  else
  {
    v6 = (void *)a2();
    v7 = objc_msgSend(objc_allocWithZone((Class)HKNavigationController), "initWithRootViewController:", v6);

    v8 = objc_msgSend(v7, "navigationBar");
    objc_msgSend(v8, "setPrefersLargeTitles:", 1);

    v9 = *(void **)(v2 + v3);
    *(_QWORD *)(v2 + v3) = v7;
    v5 = v7;

    v4 = 0;
  }
  v10 = v4;
  return v5;
}

id sub_10004B374()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  id v3;
  uint64_t v4;
  void *v5;
  id v6;
  id v7;
  id v8;
  void *v9;
  id v10;
  _QWORD v12[5];
  _QWORD v13[5];

  v1 = OBJC_IVAR____TtC6Health23MainSplitViewController____lazy_storage___mainTabBarController;
  v2 = *(void **)(v0 + OBJC_IVAR____TtC6Health23MainSplitViewController____lazy_storage___mainTabBarController);
  if (v2)
  {
    v3 = *(id *)(v0 + OBJC_IVAR____TtC6Health23MainSplitViewController____lazy_storage___mainTabBarController);
  }
  else
  {
    v4 = v0;
    v5 = *(void **)(v0 + OBJC_IVAR____TtC6Health23MainSplitViewController_providedHealthStore);
    sub_100028F08(v0 + OBJC_IVAR____TtC6Health23MainSplitViewController_providedHealthExperienceStore, (uint64_t)v13);
    sub_100028F08(v0 + OBJC_IVAR____TtC6Health23MainSplitViewController_pinnedContentManager, (uint64_t)v12);
    v6 = objc_allocWithZone((Class)type metadata accessor for MainTabBarController(0));
    v7 = v5;
    v8 = sub_100035DD8(v7, v13, v12);

    v9 = *(void **)(v4 + v1);
    *(_QWORD *)(v4 + v1) = v8;
    v3 = v8;

    v2 = 0;
  }
  v10 = v2;
  return v3;
}

char *sub_10004B438()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  char *v3;
  char *v4;
  void *v5;
  id v6;

  v1 = OBJC_IVAR____TtC6Health23MainSplitViewController____lazy_storage___sidebarViewController;
  v2 = *(void **)(v0 + OBJC_IVAR____TtC6Health23MainSplitViewController____lazy_storage___sidebarViewController);
  if (v2)
  {
    v3 = *(char **)(v0 + OBJC_IVAR____TtC6Health23MainSplitViewController____lazy_storage___sidebarViewController);
  }
  else
  {
    v4 = sub_10004B498(v0);
    v5 = *(void **)(v0 + v1);
    *(_QWORD *)(v0 + v1) = v4;
    v3 = v4;

    v2 = 0;
  }
  v6 = v2;
  return v3;
}

char *sub_10004B498(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  id v4;
  uint64_t v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  id v19;
  char *v20;
  char *v21;
  uint64_t v23;
  __int128 v24;
  uint64_t v25;
  _UNKNOWN **v26;

  sub_1000138C8(0, (unint64_t *)&qword_1000ED9C0, (uint64_t)&type metadata for Swift.AnyObject + 8, (uint64_t (*)(_QWORD, uint64_t))&type metadata accessor for _ContiguousArrayStorage);
  v3 = swift_allocObject(v2, 48, 7);
  *(_OWORD *)(v3 + 16) = xmmword_1000B2850;
  v4 = sub_10004B0B8();
  v5 = sub_100026F98(v4);

  *(_QWORD *)(v3 + 32) = v5;
  v6 = sub_10004B194();
  v7 = sub_100027144(v6);

  *(_QWORD *)(v3 + 40) = v7;
  *(_QWORD *)&v24 = v3;
  specialized Array._endMutation()(v8);
  v9 = v3;
  v10 = *(void **)(a1 + OBJC_IVAR____TtC6Health23MainSplitViewController_providedHealthStore);
  sub_100028F08(a1 + OBJC_IVAR____TtC6Health23MainSplitViewController_providedHealthExperienceStore, (uint64_t)&v24);
  v11 = type metadata accessor for SidebarDataSourceProvider();
  v12 = swift_allocObject(v11, 72, 7);
  *(_QWORD *)(v12 + 16) = v10;
  sub_10001AF7C(&v24, v12 + 24);
  *(_QWORD *)(v12 + 64) = v9;
  v25 = v11;
  v26 = &off_1000DD3E0;
  *(_QWORD *)&v24 = v12;
  v13 = (char *)objc_allocWithZone((Class)type metadata accessor for MainSidebarViewController(0));
  v14 = sub_10002AAF0((uint64_t)&v24, v25);
  __chkstk_darwin(v14);
  v16 = (uint64_t *)((char *)&v23 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v17 + 16))(v16);
  v18 = *v16;
  v19 = v10;
  swift_retain(v12);
  v20 = (char *)sub_10004F5FC(v18, v13);
  _s6Health23OpenSleepScheduleIntentVwxx_0(&v24);
  v21 = &v20[qword_1000F1358];
  *((_QWORD *)v21 + 1) = &off_1000DF050;
  swift_unknownObjectWeakAssign(v21, a1);
  swift_release(v12);
  return v20;
}

id sub_10004B66C()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  id v3;
  char *v4;
  id v5;
  void *v6;
  id v7;

  v1 = OBJC_IVAR____TtC6Health23MainSplitViewController____lazy_storage___sidebarNavigationController;
  v2 = *(void **)(v0 + OBJC_IVAR____TtC6Health23MainSplitViewController____lazy_storage___sidebarNavigationController);
  if (v2)
  {
    v3 = *(id *)(v0 + OBJC_IVAR____TtC6Health23MainSplitViewController____lazy_storage___sidebarNavigationController);
  }
  else
  {
    v4 = sub_10004B438();
    v5 = objc_msgSend(objc_allocWithZone((Class)HKNavigationController), "initWithRootViewController:", v4);

    v6 = *(void **)(v0 + v1);
    *(_QWORD *)(v0 + v1) = v5;
    v3 = v5;

    v2 = 0;
  }
  v7 = v2;
  return v3;
}

char *sub_10004B6F8()
{
  char *v0;
  char *v1;
  uint64_t v2;
  id v3;
  char *v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  id v10;
  id v11;
  NSString v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  char *v17;
  id v18;
  void *v19;
  uint64_t inited;
  char *v21;
  _QWORD *v22;
  uint64_t v23;
  objc_super v25;

  v1 = v0;
  v2 = OBJC_IVAR____TtC6Health23MainSplitViewController_providedHealthStore;
  v3 = objc_allocWithZone((Class)HKHealthStore);
  v4 = v1;
  *(_QWORD *)&v1[v2] = objc_msgSend(v3, "init");
  v5 = OBJC_IVAR____TtC6Health23MainSplitViewController_providedHealthExperienceStore;
  if (qword_1000EC140 != -1)
    swift_once(&qword_1000EC140, sub_100014684);
  v6 = (uint64_t *)&v4[v5];
  v7 = sub_10008A080();
  v6[3] = type metadata accessor for DiskHealthExperienceStore(0);
  v6[4] = (uint64_t)&protocol witness table for DiskHealthExperienceStore;
  *v6 = v7;
  *(_QWORD *)&v4[OBJC_IVAR____TtC6Health23MainSplitViewController____lazy_storage___providedHealthToolbox] = 0;
  *(_QWORD *)&v4[OBJC_IVAR____TtC6Health23MainSplitViewController_ppt_selectedViewController] = 0;
  *(_QWORD *)&v4[OBJC_IVAR____TtC6Health23MainSplitViewController____lazy_storage___summaryViewController] = 0;
  *(_QWORD *)&v4[OBJC_IVAR____TtC6Health23MainSplitViewController____lazy_storage___summaryNavigationController] = 0;
  *(_QWORD *)&v4[OBJC_IVAR____TtC6Health23MainSplitViewController____lazy_storage___sharingViewController] = 0;
  *(_QWORD *)&v4[OBJC_IVAR____TtC6Health23MainSplitViewController____lazy_storage___sharingNavigationController] = 0;
  *(_QWORD *)&v4[OBJC_IVAR____TtC6Health23MainSplitViewController____lazy_storage___browseViewController] = 0;
  *(_QWORD *)&v4[OBJC_IVAR____TtC6Health23MainSplitViewController____lazy_storage___browseNavigationController] = 0;
  *(_QWORD *)&v4[OBJC_IVAR____TtC6Health23MainSplitViewController____lazy_storage___mainTabBarController] = 0;
  *(_QWORD *)&v4[OBJC_IVAR____TtC6Health23MainSplitViewController____lazy_storage___sidebarViewController] = 0;
  *(_QWORD *)&v4[OBJC_IVAR____TtC6Health23MainSplitViewController____lazy_storage___sidebarNavigationController] = 0;
  v8 = OBJC_IVAR____TtC6Health23MainSplitViewController_observerDelegates;
  v9 = (void *)HKLogWellnessDashboard;
  v10 = objc_allocWithZone((Class)HKObserverSet);
  v11 = v9;
  v12 = String._bridgeToObjectiveC()();
  v13 = objc_msgSend(v10, "initWithName:loggingCategory:", v12, v11);

  *(_QWORD *)&v4[v8] = v13;
  v14 = type metadata accessor for PinnedContentManager(0);
  v15 = PinnedContentManager.__allocating_init(healthStore:domain:)(*(id *)&v1[v2]);
  v16 = (uint64_t *)&v4[OBJC_IVAR____TtC6Health23MainSplitViewController_pinnedContentManager];
  v16[3] = v14;
  v16[4] = (uint64_t)&protocol witness table for PinnedContentManager;
  *v16 = v15;

  v25.receiver = v4;
  v25.super_class = (Class)type metadata accessor for MainSplitViewController();
  v17 = (char *)objc_msgSendSuper2(&v25, "initWithStyle:", 1);
  objc_msgSend(v17, "setPreferredSplitBehavior:", 1);
  objc_msgSend(v17, "setDelegate:", v17);
  v18 = sub_10004B374();
  v19 = *(void **)&v17[OBJC_IVAR____TtC6Health23MainSplitViewController_ppt_selectedViewController];
  *(_QWORD *)&v17[OBJC_IVAR____TtC6Health23MainSplitViewController_ppt_selectedViewController] = v18;

  sub_10004F0A4();
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1000B11F0;
  *(_QWORD *)(inited + 32) = type metadata accessor for UITraitHorizontalSizeClass(0);
  v21 = v17;
  v22 = sub_1000A63CC(inited);
  swift_setDeallocating(inited);
  v23 = UIViewController.registerForTraitChanges(_:action:)(v22, "traitCollectionDidChangeWithTraitEnvironment:previousTraitCollection:");
  swift_unknownObjectRelease(v23);
  swift_bridgeObjectRelease(v22);

  return v21;
}

void sub_10004BA98()
{
  void *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  objc_class *v5;
  id v6;
  id v7;
  id v8;
  id v9;
  id v10;
  id v11;
  NSString v12;
  id v13;
  Swift::String v14;
  Swift::String v15;
  Swift::String v16;
  void *v17;
  objc_super v18[2];
  objc_super v19;
  Swift::String v20;

  v1 = v0;
  v2 = type metadata accessor for UITraitOverrides(0);
  __chkstk_darwin(v2);
  v4 = (char *)v18 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = (objc_class *)type metadata accessor for MainSplitViewController();
  v19.receiver = v0;
  v19.super_class = v5;
  v6 = objc_msgSendSuper2(&v19, "viewDidLoad");
  UIViewController.traitOverrides.getter(v6);
  UIMutableTraits.rootNavigationMode.setter(0, v2, &protocol witness table for UITraitOverrides);
  UIViewController.traitOverrides.setter(v4);
  v7 = sub_10004B66C();
  objc_msgSend(v1, "setViewController:forColumn:", v7, 0);

  v8 = sub_10004B180();
  objc_msgSend(v1, "setViewController:forColumn:", v8, 2);

  v9 = sub_10004B374();
  objc_msgSend(v1, "setViewController:forColumn:", v9, 3);

  v10 = sub_10004B66C();
  v11 = objc_msgSend(v10, "navigationBar");

  v12 = String._bridgeToObjectiveC()();
  objc_msgSend(v11, "setAccessibilityIdentifier:", v12);

  v13 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
  v20._object = (void *)0x80000001000B94E0;
  v14._countAndFlagsBits = 0x686372616553;
  v14._object = (void *)0xE600000000000000;
  v15._countAndFlagsBits = 0;
  v15._object = (void *)0xE000000000000000;
  v20._countAndFlagsBits = 0xD00000000000001ELL;
  v16 = NSLocalizedString(_:tableName:bundle:value:comment:)(v14, (Swift::String_optional)0, (NSBundle)v13, v15, v20);

  sub_100006D10(0, &qword_1000EDA28, UIKeyCommand_ptr);
  memset(v18, 0, sizeof(v18));
  v17 = (void *)UIKeyCommand.init(title:image:action:input:modifierFlags:propertyList:alternates:discoverabilityTitle:attributes:state:)(v16._countAndFlagsBits, v16._object, 0, "showAndActivateSearchBar", 102, 0xE100000000000000, 0x100000, v18, _swiftEmptyArrayStorage, 0, 0, 0, 0);
  objc_msgSend(v1, "addKeyCommand:", v17);

}

void sub_10004BF14()
{
  void *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  id v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  os_log_type_t v14;
  uint8_t *v15;
  NSObject *v16;
  _OWORD v17[2];
  uint64_t v18;
  id v19;

  v1 = v0;
  v2 = type metadata accessor for Logger(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)v17 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = objc_msgSend(v1, "presentedViewController");
  if (v6)
  {
    v7 = v6;
    v19 = v6;
    v8 = sub_100006D10(0, (unint64_t *)&qword_1000F0B50, UIViewController_ptr);
    v9 = sub_10001314C(0, (unint64_t *)&qword_1000ED9B0, (uint64_t)&protocol descriptor for StartupNotDismissible, 1);
    v10 = v7;
    if ((swift_dynamicCast(v17, &v19, v8, v9, 6) & 1) != 0)
    {
      v11 = sub_10004F000((uint64_t)v17);
      v12 = static Logger.view.getter(v11);
      v13 = Logger.logObject.getter(v12);
      v14 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v13, v14))
      {
        v15 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v15 = 0;
        _os_log_impl((void *)&_mh_execute_header, v13, v14, "asked to dismiss but the present view controller is StartupNotDismissible", v15, 2u);
        swift_slowDealloc(v15, -1, -1);
        v16 = v10;
      }
      else
      {
        v16 = v13;
        v13 = v10;
      }

      (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
    }
    else
    {
      v18 = 0;
      memset(v17, 0, sizeof(v17));
      sub_10004F000((uint64_t)v17);
      -[NSObject dismissViewControllerAnimated:completion:](v10, "dismissViewControllerAnimated:completion:", 0, 0);

    }
  }
}

uint64_t sub_10004C16C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  void (*v4)(uint64_t);
  uint64_t v5;

  v4 = *(void (**)(uint64_t))(a1 + 32);
  v3 = *(_QWORD *)(a1 + 40);
  swift_retain(v3);
  v5 = swift_unknownObjectRetain(a2);
  v4(v5);
  swift_release(v3);
  return swift_unknownObjectRelease(a2);
}

void sub_10004C1EC(char *a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  void *v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  id v16;
  char *v17;
  id v18;
  _QWORD v19[5];
  uint64_t v20;

  v12 = *(void **)&a1[OBJC_IVAR____TtC6Health23MainSplitViewController_observerDelegates];
  v13 = swift_allocObject(a5, 32, 7);
  *(_QWORD *)(v13 + 16) = a3;
  *(_QWORD *)(v13 + 24) = a4;
  v19[4] = a6;
  v20 = v13;
  v19[0] = _NSConcreteStackBlock;
  v19[1] = 1107296256;
  v19[2] = sub_10004C16C;
  v19[3] = a7;
  v14 = _Block_copy(v19);
  v15 = v20;
  v16 = a3;
  v17 = a1;
  v18 = v12;
  swift_release(v15);
  objc_msgSend(v18, "notifyObservers:", v14);
  _Block_release(v14);

}

void sub_10004C2D4(void *a1, uint64_t a2)
{
  void *v2;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  objc_class *v10;
  char *v11;
  objc_super v12;
  _QWORD v13[3];
  uint64_t v14;

  sub_100050328(a2, (uint64_t)v13);
  v4 = v14;
  if (v14)
  {
    v5 = sub_100012E04(v13, v14);
    v6 = *(_QWORD *)(v4 - 8);
    __chkstk_darwin(v5);
    v8 = (char *)&v12 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
    (*(void (**)(char *))(v6 + 16))(v8);
    v9 = _bridgeAnythingToObjectiveC<A>(_:)(v8, v4);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v4);
    _s6Health23OpenSleepScheduleIntentVwxx_0(v13);
  }
  else
  {
    v9 = 0;
  }
  v10 = (objc_class *)type metadata accessor for MainSplitViewController();
  v12.receiver = v2;
  v12.super_class = v10;
  objc_msgSendSuper2(&v12, "showDetailViewController:sender:", a1, v9);
  swift_unknownObjectRelease(v9);
  v11 = sub_10004B438();
  sub_1000A9848(a1);

}

void sub_10004C48C(void *a1)
{
  char *v1;
  char *v2;
  uint64_t v3;
  id v4;
  id v5;
  Class isa;
  double v7;
  uint64_t v8;
  uint64_t v9;
  id v10;
  id v11;
  uint64_t v12;
  Class v13;
  id v14;
  id v15;
  Class v16;
  double v17;
  uint64_t v18;
  id v19;
  id v20;
  Class v21;
  id v22;
  id v23;
  id v24;
  uint64_t v25;
  uint64_t v26;
  id v27;
  void *v28;
  id v29;
  id v30;
  char v31;
  uint64_t v32;
  id v33;
  uint64_t v34;
  uint64_t v35;
  id v36;
  Class v37;
  id v38;
  id v39;
  Class v40;
  id v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  id v45;
  id v46;
  id v47;
  Class v48;
  id v49;
  id v50;
  void *v51;
  id v52;
  char v53;
  uint64_t v54;
  id v55;
  id v56;
  char v57;
  void *v58;
  uint64_t v59;
  char *v60;
  id v61;
  uint64_t v62;
  id v63;
  id v64;
  uint64_t v65;
  void *v66;
  uint64_t v67;
  void *v68;
  uint64_t v69;
  id v70;
  id v71;
  char *v72;
  uint64_t v73;
  void *v74;
  _QWORD aBlock[5];
  uint64_t v76;
  uint64_t v77;

  v2 = v1;
  v74 = a1;
  v73 = type metadata accessor for UITraitOverrides(0);
  __chkstk_darwin(v73);
  v72 = (char *)&v72 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = objc_msgSend(objc_allocWithZone((Class)HKNavigationController), "init");
  v5 = sub_10004B180();
  isa = (Class)objc_msgSend(v5, "viewControllers");

  if (!isa)
  {
    v8 = sub_100006D10(0, (unint64_t *)&qword_1000F0B50, UIViewController_ptr);
    v9 = static Array._unconditionallyBridgeFromObjectiveC(_:)(0, v8);
    isa = Array._bridgeToObjectiveC()().super.isa;
    *(_QWORD *)&v7 = swift_bridgeObjectRelease(v9).n128_u64[0];
  }
  objc_msgSend(v4, "setViewControllers:", isa, v7);

  v10 = objc_msgSend(v4, "navigationBar");
  objc_msgSend(v10, "setPrefersLargeTitles:", 1);

  v11 = sub_10004B180();
  v12 = sub_100006D10(0, (unint64_t *)&qword_1000F0B50, UIViewController_ptr);
  v13 = Array._bridgeToObjectiveC()().super.isa;
  objc_msgSend(v11, "setViewControllers:", v13);

  v14 = objc_msgSend(objc_allocWithZone((Class)HKNavigationController), "init");
  v15 = sub_10004B1B0();
  v16 = (Class)objc_msgSend(v15, "viewControllers");

  if (!v16)
  {
    v18 = static Array._unconditionallyBridgeFromObjectiveC(_:)(0, v12);
    v16 = Array._bridgeToObjectiveC()().super.isa;
    *(_QWORD *)&v17 = swift_bridgeObjectRelease(v18).n128_u64[0];
  }
  objc_msgSend(v14, "setViewControllers:", v16, v17);

  v19 = objc_msgSend(v14, "navigationBar");
  objc_msgSend(v19, "setPrefersLargeTitles:", 1);

  v20 = sub_10004B1B0();
  v21 = Array._bridgeToObjectiveC()().super.isa;
  objc_msgSend(v20, "setViewControllers:", v21);

  v22 = objc_msgSend(objc_allocWithZone((Class)HKNavigationController), "init");
  v23 = sub_10004B2A8();
  v24 = objc_msgSend(v23, "viewControllers");

  v25 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v24, v12);
  v77 = v25;
  if (!((unint64_t)v25 >> 62))
  {
    v26 = *(_QWORD *)((v25 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain(v25);
    if (v26)
      goto LABEL_7;
LABEL_17:
    swift_bridgeObjectRelease(v25);
    v29 = sub_10004B1C4();
LABEL_18:

    goto LABEL_19;
  }
  if (v25 < 0)
    v32 = v25;
  else
    v32 = v25 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v25);
  if (!_CocoaArrayWrapper.endIndex.getter(v32))
    goto LABEL_17;
LABEL_7:
  if ((v25 & 0xC000000000000001) != 0)
  {
    v27 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v25);
  }
  else
  {
    if (!*(_QWORD *)((v25 & 0xFFFFFFFFFFFFF8) + 0x10))
    {
      __break(1u);
      goto LABEL_39;
    }
    v27 = *(id *)(v25 + 32);
  }
  v28 = v27;
  swift_bridgeObjectRelease(v25);
  v29 = sub_10004B1C4();
  if (!v28)
    goto LABEL_18;
  v30 = v28;
  v31 = static NSObject.== infix(_:_:)(v30);

  if ((v31 & 1) == 0)
  {
LABEL_19:
    v33 = sub_10004B1C4();
    if (!((unint64_t)v25 >> 62)
      || (v25 < 0 ? (v34 = v25) : (v34 = v25 & 0xFFFFFFFFFFFFFF8),
          swift_bridgeObjectRetain(v25),
          v35 = _CocoaArrayWrapper.endIndex.getter(v34),
          swift_bridgeObjectRelease(v25),
          (v35 & 0x8000000000000000) == 0))
    {
      sub_10004F120(0, 0, (uint64_t)v33);
      v25 = v77;
      goto LABEL_25;
    }
LABEL_39:
    __break(1u);
    return;
  }
LABEL_25:
  v36 = v22;
  v37 = Array._bridgeToObjectiveC()().super.isa;
  objc_msgSend(v36, "setViewControllers:", v37, swift_bridgeObjectRelease(v25).n128_f64[0]);

  v38 = objc_msgSend(v36, "navigationBar");
  objc_msgSend(v38, "setPrefersLargeTitles:", 1);

  v39 = sub_10004B2A8();
  v40 = Array._bridgeToObjectiveC()().super.isa;
  objc_msgSend(v39, "setViewControllers:", v40);

  v41 = sub_10004B374();
  sub_1000138C8(0, (unint64_t *)&qword_1000ED9C0, (uint64_t)&type metadata for Swift.AnyObject + 8, (uint64_t (*)(_QWORD, uint64_t))&type metadata accessor for _ContiguousArrayStorage);
  v43 = swift_allocObject(v42, 56, 7);
  *(_OWORD *)(v43 + 16) = xmmword_1000B19C0;
  *(_QWORD *)(v43 + 32) = v4;
  *(_QWORD *)(v43 + 40) = v14;
  *(_QWORD *)(v43 + 48) = v36;
  aBlock[0] = v43;
  specialized Array._endMutation()(v43);
  v44 = aBlock[0];
  v45 = v4;
  v46 = v14;
  v47 = v36;
  v48 = Array._bridgeToObjectiveC()().super.isa;
  objc_msgSend(v41, "setViewControllers:", v48, swift_bridgeObjectRelease(v44).n128_f64[0]);

  v49 = objc_msgSend(v2, "viewControllerForColumn:", 2);
  v50 = sub_10004B1B0();
  v51 = v50;
  if (!v49)
  {

    goto LABEL_31;
  }
  v52 = v49;
  v53 = static NSObject.== infix(_:_:)(v52);

  if ((v53 & 1) == 0)
  {
    v55 = sub_10004B180();
    v56 = v52;
    v57 = static NSObject.== infix(_:_:)(v56);

    if ((v57 & 1) != 0)
    {
      v54 = 0;
      goto LABEL_32;
    }
LABEL_31:
    v54 = 2;
    goto LABEL_32;
  }
  v54 = 1;
LABEL_32:
  v59 = v73;
  v58 = v74;
  v60 = v72;
  v61 = sub_10004B374();
  objc_msgSend(v61, "setSelectedIndex:", v54);

  UIViewController.traitOverrides.getter(v62);
  UIMutableTraits.rootNavigationMode.setter(1, v59, &protocol witness table for UITraitOverrides);
  UIViewController.traitOverrides.setter(v60);
  v63 = sub_10004D5B4();
  v64 = objc_msgSend(v63, "navigationController");

  if (v64)
  {
    v65 = objc_opt_self(HKNavigationController);
    if (swift_dynamicCastObjCClass(v64, v65))
      HKNavigationController.reparentModalToPushIfPossible()();

  }
  v66 = *(void **)&v2[OBJC_IVAR____TtC6Health23MainSplitViewController_observerDelegates];
  v67 = swift_allocObject(&unk_1000DF0E8, 24, 7);
  *(_QWORD *)(v67 + 16) = v58;
  aBlock[4] = sub_1000502C0;
  v76 = v67;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10004C16C;
  aBlock[3] = &unk_1000DF100;
  v68 = _Block_copy(aBlock);
  v69 = v76;
  v70 = v66;
  v71 = v58;
  swift_release(v69);
  objc_msgSend(v70, "notifyObservers:", v68);

  _Block_release(v68);
}

void sub_10004CC4C(void *a1)
{
  char *v1;
  unint64_t v2;
  char *v3;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  id v8;
  id v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  id v13;
  id v14;
  void *v15;
  Class isa;
  double v17;
  uint64_t v18;
  id v19;
  id v20;
  void *v21;
  Class v22;
  double v23;
  uint64_t v24;
  id v25;
  __objc2_ivar *v26;
  id v27;
  id v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  id v37;
  Class v38;
  id v39;
  id v40;
  id v41;
  void *v42;
  uint64_t v43;
  id v44;
  id v45;
  uint64_t v46;
  void *v47;
  uint64_t v48;
  void *v49;
  uint64_t v50;
  id v51;
  id v52;
  uint64_t v53;
  unint64_t v54;
  _QWORD aBlock[5];
  uint64_t v56;

  v3 = v1;
  v5 = type metadata accessor for UITraitOverrides(0);
  __chkstk_darwin(v5);
  v7 = (char *)&v53 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_10004B374();
  v9 = objc_msgSend(v8, "viewControllers");

  if (v9)
  {
    v10 = sub_100006D10(0, (unint64_t *)&qword_1000F0B50, UIViewController_ptr);
    v11 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v9, v10);

    v12 = (uint64_t)sub_10004D37C(v11);
    swift_bridgeObjectRelease(v11);
    if (v12)
    {
      if ((unint64_t)v12 >> 62)
      {
        if (v12 >= 0)
          v30 = v12 & 0xFFFFFFFFFFFFFF8;
        else
          v30 = v12;
        swift_bridgeObjectRetain(v12);
        v31 = _CocoaArrayWrapper.endIndex.getter(v30);
        swift_bridgeObjectRelease(v12);
        if (v31 >= 3)
        {
LABEL_5:
          v13 = sub_10004B180();
          v54 = v12 & 0xC000000000000001;
          if ((v12 & 0xC000000000000001) != 0)
          {
            v14 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v12);
          }
          else
          {
            if (!*(_QWORD *)((v12 & 0xFFFFFFFFFFFFFF8) + 0x10))
            {
              __break(1u);
              goto LABEL_33;
            }
            v14 = *(id *)(v12 + 32);
          }
          v15 = v14;
          isa = (Class)objc_msgSend(v14, "viewControllers");

          if (!isa)
          {
            v18 = static Array._unconditionallyBridgeFromObjectiveC(_:)(0, v10);
            isa = Array._bridgeToObjectiveC()().super.isa;
            *(_QWORD *)&v17 = swift_bridgeObjectRelease(v18).n128_u64[0];
          }
          objc_msgSend(v13, "setViewControllers:", isa, v17);

          v19 = sub_10004B1B0();
          if (v54)
          {
            v20 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(1, v12);
          }
          else
          {
            if (*(_QWORD *)((v12 & 0xFFFFFFFFFFFFFF8) + 0x10) < 2uLL)
            {
LABEL_59:
              __break(1u);
              goto LABEL_60;
            }
            v20 = *(id *)(v12 + 40);
          }
          v21 = v20;
          v22 = (Class)objc_msgSend(v20, "viewControllers");

          if (!v22)
          {
            v24 = static Array._unconditionallyBridgeFromObjectiveC(_:)(0, v10);
            v22 = Array._bridgeToObjectiveC()().super.isa;
            *(_QWORD *)&v23 = swift_bridgeObjectRelease(v24).n128_u64[0];
          }
          objc_msgSend(v19, "setViewControllers:", v22, v23);

          if (v54)
          {
            v25 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(2, v12);
            v26 = &stru_1000E8000;
          }
          else
          {
            v26 = &stru_1000E8000;
            if (*(_QWORD *)((v12 & 0xFFFFFFFFFFFFFF8) + 0x10) < 3uLL)
            {
LABEL_60:
              __break(1u);
LABEL_61:
              __break(1u);
              goto LABEL_62;
            }
            v25 = *(id *)(v12 + 48);
          }
          v27 = objc_msgSend(v25, v26[110].type, swift_bridgeObjectRelease(v12).n128_f64[0]);

          v12 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v27, v10);
          aBlock[0] = v12;
          v2 = (unint64_t)v12 >> 62;
          if (!((unint64_t)v12 >> 62))
          {
            if (*(_QWORD *)((v12 & 0xFFFFFFFFFFFFF8) + 0x10) <= 1uLL)
            {
LABEL_47:
              v37 = sub_10004B2A8();
              v38 = Array._bridgeToObjectiveC()().super.isa;
              objc_msgSend(v37, "setViewControllers:", v38, swift_bridgeObjectRelease(v12).n128_f64[0]);

              goto LABEL_48;
            }
            goto LABEL_22;
          }
LABEL_33:
          if (v12 < 0)
            v32 = v12;
          else
            v32 = v12 & 0xFFFFFFFFFFFFFF8;
          swift_bridgeObjectRetain(v12);
          v33 = _CocoaArrayWrapper.endIndex.getter(v32);
          swift_bridgeObjectRelease(v12);
          if (v33 < 2)
            goto LABEL_47;
          swift_bridgeObjectRetain(v12);
          v34 = _CocoaArrayWrapper.endIndex.getter(v32);
          swift_bridgeObjectRelease(v12);
          if (!v34)
          {
LABEL_62:
            __break(1u);
            return;
          }
          swift_bridgeObjectRetain(v12);
          v35 = _CocoaArrayWrapper.endIndex.getter(v32);
          swift_bridgeObjectRelease(v12);
          if (!v35)
          {
            __break(1u);
            goto LABEL_40;
          }
LABEL_22:
          if ((v12 & 0xC000000000000001) == 0)
          {
            if (*(_QWORD *)((v12 & 0xFFFFFFFFFFFFF8) + 0x10))
            {
              v28 = *(id *)(v12 + 32);
              if (!v2)
              {
LABEL_25:
                v29 = *(_QWORD *)((v12 & 0xFFFFFFFFFFFFF8) + 0x10);
                goto LABEL_45;
              }
LABEL_41:
              if (v12 < 0)
                v36 = v12;
              else
                v36 = v12 & 0xFFFFFFFFFFFFFF8;
              swift_bridgeObjectRetain(v12);
              v29 = _CocoaArrayWrapper.endIndex.getter(v36);
              swift_bridgeObjectRelease(v12);
LABEL_45:
              if (v29)
              {
                sub_10004FD40(0, 1);

                v12 = aBlock[0];
                goto LABEL_47;
              }
              goto LABEL_61;
            }
            __break(1u);
            goto LABEL_59;
          }
LABEL_40:
          v28 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v12);
          if (!v2)
            goto LABEL_25;
          goto LABEL_41;
        }
      }
      else if (*(uint64_t *)((v12 & 0xFFFFFFFFFFFFFF8) + 0x10) >= 3)
      {
        goto LABEL_5;
      }
      swift_bridgeObjectRelease(v12);
    }
  }
LABEL_48:
  v39 = sub_10004B374();
  v40 = objc_msgSend(v39, "selectedIndex");

  if (v40 == (id)2)
  {
    v41 = sub_10004B2A8();
  }
  else if (v40 == (id)1)
  {
    v41 = sub_10004B1B0();
  }
  else
  {
    v41 = sub_10004B180();
  }
  v42 = v41;
  objc_msgSend(v3, "setViewController:forColumn:", v41, 2);

  UIViewController.traitOverrides.getter(v43);
  UIMutableTraits.rootNavigationMode.setter(0, v5, &protocol witness table for UITraitOverrides);
  UIViewController.traitOverrides.setter(v7);
  v44 = sub_10004D5B4();
  v45 = objc_msgSend(v44, "navigationController");

  if (v45)
  {
    v46 = objc_opt_self(HKNavigationController);
    if (swift_dynamicCastObjCClass(v45, v46))
      HKNavigationController.reparentPushToModalIfPossible()();

  }
  v47 = *(void **)&v3[OBJC_IVAR____TtC6Health23MainSplitViewController_observerDelegates];
  v48 = swift_allocObject(&unk_1000DF098, 24, 7);
  *(_QWORD *)(v48 + 16) = a1;
  aBlock[4] = sub_1000502B4;
  v56 = v48;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10004C16C;
  aBlock[3] = &unk_1000DF0B0;
  v49 = _Block_copy(aBlock);
  v50 = v56;
  v51 = v47;
  v52 = a1;
  swift_release(v50);
  objc_msgSend(v51, "notifyObservers:", v49);
  _Block_release(v49);

}

_QWORD *sub_10004D238(uint64_t a1)
{
  int64_t v2;
  _QWORD *v3;
  uint64_t i;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  _QWORD *v9;
  uint64_t v11;
  uint64_t v12;
  _BYTE v13[32];
  _QWORD *v14;

  v2 = *(_QWORD *)(a1 + 16);
  v14 = _swiftEmptyArrayStorage;
  sub_10007FEE0(0, v2, 0);
  v3 = _swiftEmptyArrayStorage;
  if (v2)
  {
    for (i = a1 + 32; ; i += 32)
    {
      sub_100012C10(i, (uint64_t)v13);
      if (!swift_dynamicCast(&v11, v13, (char *)&type metadata for Any + 8, &type metadata for String, 6))break;
      v5 = v11;
      v6 = v12;
      if ((swift_isUniquelyReferenced_nonNull_native(v3) & 1) == 0)
      {
        sub_10007FEE0(0, v3[2] + 1, 1);
        v3 = v14;
      }
      v8 = v3[2];
      v7 = v3[3];
      if (v8 >= v7 >> 1)
      {
        sub_10007FEE0(v7 > 1, v8 + 1, 1);
        v3 = v14;
      }
      v3[2] = v8 + 1;
      v9 = &v3[2 * v8];
      v9[4] = v5;
      v9[5] = v6;
      if (!--v2)
        return v3;
    }
    v11 = 0;
    v12 = 0;
    swift_release(v3);
    swift_bridgeObjectRelease(v12);
    return 0;
  }
  return v3;
}

_QWORD *sub_10004D37C(unint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t i;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;

  v1 = a1;
  if (a1 >> 62)
    goto LABEL_18;
  specialized ContiguousArray.reserveCapacity(_:)(*(_QWORD *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10));
  v2 = *(_QWORD *)((v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  while (v2)
  {
    if ((v1 & 0xC000000000000001) != 0)
    {
      for (i = 0; ; ++i)
      {
        v4 = specialized _ArrayBuffer._getElementSlowPath(_:)(i, v1);
        v5 = i + 1;
        if (__OFADD__(i, 1))
          break;
        v6 = v4;
        v7 = objc_opt_self(HKNavigationController);
        v8 = swift_dynamicCastObjCClass(v6, v7);
        if (!v8)
        {
          swift_unknownObjectRelease(v6);
          goto LABEL_15;
        }
        v9 = v8;
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v8);
        v10 = _swiftEmptyArrayStorage[2];
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v10);
        v11 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v10, v9);
        specialized ContiguousArray._endMutation()(v11);
        if (v5 == v2)
          return _swiftEmptyArrayStorage;
      }
      __break(1u);
    }
    else
    {
      v12 = 0;
      v13 = v1 + 32;
      while (1)
      {
        v14 = v12 + 1;
        if (__OFADD__(v12, 1))
          break;
        v15 = *(void **)(v13 + 8 * v12);
        v16 = objc_opt_self(HKNavigationController);
        v17 = swift_dynamicCastObjCClass(v15, v16);
        if (!v17)
        {
LABEL_15:
          swift_release(_swiftEmptyArrayStorage);
          return 0;
        }
        v1 = v17;
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v15);
        v18 = _swiftEmptyArrayStorage[2];
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v18);
        v19 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v18, v1);
        specialized ContiguousArray._endMutation()(v19);
        ++v12;
        if (v14 == v2)
          return _swiftEmptyArrayStorage;
      }
    }
    __break(1u);
LABEL_18:
    if (v1 < 0)
      v21 = v1;
    else
      v21 = v1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v1);
    v22 = _CocoaArrayWrapper.endIndex.getter(v21);
    swift_bridgeObjectRelease(v1);
    specialized ContiguousArray.reserveCapacity(_:)(v22);
    swift_bridgeObjectRetain(v1);
    v2 = _CocoaArrayWrapper.endIndex.getter(v21);
    swift_bridgeObjectRelease(v1);
  }
  return _swiftEmptyArrayStorage;
}

id sub_10004D5B4()
{
  void *v0;
  id v1;
  char v2;
  id v3;
  void *v4;
  uint64_t v5;
  id v6;
  id v7;
  void *v8;
  uint64_t v9;
  unint64_t v10;
  id v12;

  v1 = objc_msgSend(v0, "traitCollection");
  v2 = UITraitCollection.rootNavigationMode.getter();

  if ((static RootNavigationMode.== infix(_:_:)(v2 & 1, 0) & 1) == 0)
  {
    v6 = sub_10004B374();
    v7 = objc_msgSend(v6, "selectedViewController");
    if (v7)
    {
      v8 = v7;
      v9 = objc_opt_self(UINavigationController);
      if (swift_dynamicCastObjCClass(v8, v9))
      {
        v10 = (unint64_t)UINavigationController.rootViewController()();

        if (v10)
        {

          return (id)v10;
        }
      }
      else
      {

      }
    }
    return v6;
  }
  v3 = objc_msgSend(v12, "viewControllerForColumn:", 2);
  if (!v3)
    return v12;
  v4 = v3;
  v5 = objc_opt_self(UINavigationController);
  if (!swift_dynamicCastObjCClass(v4, v5))
  {

    return v12;
  }
  v6 = (id)UINavigationController.rootViewController()();

  if (!v6)
    return v12;
  return v6;
}

void sub_10004D6F8()
{
  char *v0;
  char *v1;
  id v2;
  char v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  uint64_t v8;
  Class isa;
  id v10;
  void *v11;
  id v12;
  id v13;

  v1 = v0;
  v2 = objc_msgSend(v0, "traitCollection");
  v3 = UITraitCollection.rootNavigationMode.getter();

  if ((static RootNavigationMode.== infix(_:_:)(v3 & 1, 0) & 1) != 0)
  {
    objc_msgSend(v1, "setPreferredDisplayMode:", 2);
    if ((sub_10004D8A4() & 1) == 0)
    {
      v4 = sub_10004B2A8();
      sub_1000138C8(0, (unint64_t *)&qword_1000ED9C0, (uint64_t)&type metadata for Swift.AnyObject + 8, (uint64_t (*)(_QWORD, uint64_t))&type metadata accessor for _ContiguousArrayStorage);
      v6 = swift_allocObject(v5, 40, 7);
      *(_OWORD *)(v6 + 16) = xmmword_1000B1AB0;
      v7 = sub_10004B1C4();
      *(_QWORD *)(v6 + 32) = v7;
      specialized Array._endMutation()(v7);
      v8 = v6;
      sub_100006D10(0, (unint64_t *)&qword_1000F0B50, UIViewController_ptr);
      isa = Array._bridgeToObjectiveC()().super.isa;
      objc_msgSend(v4, "setViewControllers:animated:", isa, 0, swift_bridgeObjectRelease(v8).n128_f64[0]);

      v10 = sub_10004B2A8();
      v11 = *(void **)&v1[OBJC_IVAR____TtC6Health23MainSplitViewController_ppt_selectedViewController];
      *(_QWORD *)&v1[OBJC_IVAR____TtC6Health23MainSplitViewController_ppt_selectedViewController] = v10;

      v13 = sub_10004B2A8();
      objc_msgSend(v1, "setViewController:forColumn:");

    }
  }
  else
  {
    v12 = sub_10004B374();
    objc_msgSend(v12, "setSelectedIndex:", 2);

  }
}

uint64_t sub_10004D8A4()
{
  void *v0;
  id v1;
  id v2;
  id v3;
  char v4;
  id v5;
  void *v6;
  id v7;
  char v8;

  v1 = objc_msgSend(v0, "viewControllerForColumn:", 2);
  v2 = sub_10004B2A8();
  if (!v1)
    goto LABEL_5;
  sub_100006D10(0, (unint64_t *)&qword_1000F0B50, UIViewController_ptr);
  v3 = v1;
  v4 = static NSObject.== infix(_:_:)(v3);

  if ((v4 & 1) == 0)
  {
    v8 = 0;
    return v8 & 1;
  }
  v5 = sub_10004B2A8();
  v6 = (void *)UINavigationController.rootViewController()();

  v2 = sub_10004B1C4();
  if (v6)
  {
    v7 = v6;
    v8 = static NSObject.== infix(_:_:)(v7);

  }
  else
  {
LABEL_5:
    v8 = 0;
  }

  return v8 & 1;
}

void sub_10004D9A0()
{
  void *v0;
  id v1;
  uint64_t v2;
  void *v3;
  id v4;

  if (objc_msgSend(v0, "displayMode") == (id)3)
    objc_msgSend(v0, "hideColumn:", 0);
  v1 = objc_msgSend(v0, "viewControllerForColumn:", 2);
  if (v1)
  {
    v4 = v1;
    v2 = objc_opt_self(HKNavigationController);
    v3 = (void *)swift_dynamicCastObjCClass(v4, v2);
    if (v3)

  }
}

id sub_10004DAAC()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for MainSplitViewController();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for MainSplitViewController()
{
  return objc_opt_self(_TtC6Health23MainSplitViewController);
}

id sub_10004DC04()
{
  _QWORD *v0;

  return *(id *)(*v0 + OBJC_IVAR____TtC6Health23MainSplitViewController_providedHealthStore);
}

uint64_t sub_10004DC18@<X0>(uint64_t a1@<X8>)
{
  _QWORD *v1;

  return sub_100028F08(*v1 + OBJC_IVAR____TtC6Health23MainSplitViewController_providedHealthExperienceStore, a1);
}

uint64_t sub_10004DC40@<X0>(uint64_t a1@<X8>)
{
  _QWORD *v1;

  return sub_100028F08(*v1 + OBJC_IVAR____TtC6Health23MainSplitViewController_pinnedContentManager, a1);
}

id sub_10004DC68()
{
  return sub_10004B034();
}

id sub_10004DC88(uint64_t a1)
{
  uint64_t v1;

  return objc_msgSend(*(id *)(v1 + OBJC_IVAR____TtC6Health23MainSplitViewController_observerDelegates), "registerObserver:", a1);
}

id sub_10004DCA4(uint64_t a1)
{
  uint64_t v1;

  return objc_msgSend(*(id *)(v1 + OBJC_IVAR____TtC6Health23MainSplitViewController_observerDelegates), "unregisterObserver:", a1);
}

uint64_t sub_10004DCC0(void *a1)
{
  id v2;
  id v3;
  id v4;
  char v5;

  v2 = sub_10004D5B4();
  v3 = objc_msgSend(v2, "navigationController");

  if (!v3)
    return 0;
  sub_100006D10(0, &qword_1000EE3F0, UINavigationController_ptr);
  v4 = a1;
  v5 = static NSObject.== infix(_:_:)(v4);

  return v5 & 1;
}

void sub_10004DD5C(void *a1)
{
  char *v1;
  char *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  id v24;
  char v25;
  uint64_t v26;
  void *v27;
  void *v28;
  id v29;
  id v30;
  id v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  id v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  id v46;
  NSObject *v47;
  os_log_type_t v48;
  uint8_t *v49;
  uint64_t v50;
  id v51;
  uint64_t v52;
  unint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char v57;
  uint64_t (*v58)(char *, _QWORD *);
  uint64_t v59;
  char *v60;
  uint64_t v61;
  NSObject *v62;
  os_log_type_t v63;
  uint8_t *v64;
  char *v65;
  int v66;
  id v67;
  void *v68;
  char *v69;
  _QWORD *v70;
  uint64_t v71;
  char *v72;
  char *v73;
  id v74;
  NSObject *v75;
  os_log_type_t v76;
  uint8_t *v77;
  uint64_t v78;
  id v79;
  uint64_t v80;
  unint64_t v81;
  unint64_t v82;
  char *v83;
  char *v84;
  char *v85;
  char *v86;
  char *v87;
  uint64_t v88;
  uint64_t v89;
  _QWORD *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93[4];

  v2 = v1;
  v4 = type metadata accessor for Logger(0);
  v88 = *(_QWORD *)(v4 - 8);
  v89 = v4;
  v5 = __chkstk_darwin(v4);
  v86 = (char *)&v83 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __chkstk_darwin(v5);
  v85 = (char *)&v83 - v8;
  __chkstk_darwin(v7);
  v83 = (char *)&v83 - v9;
  sub_1000076D8(0, (unint64_t *)&qword_1000ECF88, (uint64_t (*)(uint64_t))&type metadata accessor for DeepLinkActivityType, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
  __chkstk_darwin(v10);
  v12 = (char *)&v83 - v11;
  v90 = (_QWORD *)type metadata accessor for DeepLinkActivityType(0);
  v13 = *(v90 - 1);
  v14 = __chkstk_darwin(v90);
  v84 = (char *)&v83 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = __chkstk_darwin(v14);
  v18 = (char *)&v83 - v17;
  __chkstk_darwin(v16);
  v87 = (char *)&v83 - v19;
  v20 = type metadata accessor for HAUserActivity.RestorationInfoKey(0);
  v21 = *(_QWORD *)(v20 - 8);
  __chkstk_darwin(v20);
  v23 = (char *)&v83 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = objc_msgSend(v1, "traitCollection");
  v25 = UITraitCollection.rootNavigationMode.getter();

  v26 = static RootNavigationMode.== infix(_:_:)(v25 & 1, 0);
  if ((v26 & 1) == 0)
  {
    v90 = sub_10004B374();
    objc_msgSend(v90, "restoreUserActivityState:", a1);

    return;
  }
  v27 = (void *)NSUserActivity.fetchProfileIdentifier()(v26);
  if (v27)
  {
    v28 = v27;
    if (objc_msgSend(v27, "type") != (id)1)
    {
      v29 = sub_10004B1B0();
      objc_msgSend(v2, "setViewController:forColumn:", v29, 2);

      v30 = sub_10004B1B0();
      v31 = sub_10004B1B0();
      objc_msgSend(v31, "restoreUserActivityState:", a1);

      v28 = v31;
    }

  }
  (*(void (**)(char *, _QWORD, uint64_t))(v21 + 104))(v23, enum case for HAUserActivity.RestorationInfoKey.selectedSidebarItemIdentifier(_:), v20);
  v32 = sub_10000F6E4(&qword_1000EE400, 255, (uint64_t (*)(uint64_t))&type metadata accessor for HAUserActivity.RestorationInfoKey, (uint64_t)&protocol conformance descriptor for HAUserActivity.RestorationInfoKey);
  NSUserActivity.retrieveUserInfoValueForKey<A>(_:)(v93, v23, v20, v32);
  (*(void (**)(char *, uint64_t))(v21 + 8))(v23, v20);
  if (v93[3])
  {
    if ((swift_dynamicCast(&v91, v93, (char *)&type metadata for Any + 8, &type metadata for String, 6) & 1) != 0)
    {
      v33 = v91;
      v34 = v92;
      v35 = sub_10004B438();
      v36 = &v35[qword_1000F1360];
      v37 = *(_QWORD *)&v35[qword_1000F1360];
      v38 = *(_QWORD *)&v35[qword_1000F1360 + 8];
      *(_QWORD *)v36 = v33;
      *((_QWORD *)v36 + 1) = v34;
      sub_1000A8394(v37, v38);

      swift_bridgeObjectRelease(v38);
    }
  }
  else
  {
    sub_1000114C0((uint64_t)v93, (uint64_t)&qword_1000EDBD0, (uint64_t)&type metadata for Any + 8, (uint64_t (*)(_QWORD, uint64_t, uint64_t, void *))sub_1000138C8);
  }
  v39 = v90;
  v40 = objc_msgSend(a1, "activityType");
  v41 = static String._unconditionallyBridgeFromObjectiveC(_:)(v40);
  v43 = v42;

  DeepLinkActivityType.init(_:)(v41, v43);
  if ((*(unsigned int (**)(char *, uint64_t, _QWORD *))(v13 + 48))(v12, 1, v39) != 1)
  {
    v55 = (uint64_t)v87;
    (*(void (**)(char *, char *, _QWORD *))(v13 + 32))(v87, v12, v39);
    (*(void (**)(char *, _QWORD, _QWORD *))(v13 + 104))(v18, enum case for DeepLinkActivityType.plugin(_:), v39);
    v56 = sub_10000F6E4(&qword_1000EE408, 255, (uint64_t (*)(uint64_t))&type metadata accessor for DeepLinkActivityType, (uint64_t)&protocol conformance descriptor for DeepLinkActivityType);
    v57 = dispatch thunk of static Equatable.== infix(_:_:)(v55, v18, v39, v56);
    v58 = *(uint64_t (**)(char *, _QWORD *))(v13 + 8);
    v59 = v58(v18, v39);
    if ((v57 & 1) != 0)
    {
      v60 = v85;
      v61 = static Logger.view.getter(v59);
      v62 = Logger.logObject.getter(v61);
      v63 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v62, v63))
      {
        v64 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v64 = 0;
        _os_log_impl((void *)&_mh_execute_header, v62, v63, "Ignoring plugin type once configured sidebar", v64, 2u);
        swift_slowDealloc(v64, -1, -1);
      }

      (*(void (**)(char *, uint64_t))(v88 + 8))(v60, v89);
      goto LABEL_38;
    }
    sub_10004E788(v55);
    v65 = v84;
    (*(void (**)(char *, uint64_t, _QWORD *))(v13 + 16))(v84, v55, v39);
    v66 = (*(uint64_t (**)(char *, _QWORD *))(v13 + 88))(v65, v39);
    if (v66 != enum case for DeepLinkActivityType.allHealthData(_:)
      && v66 != enum case for DeepLinkActivityType.allTrends(_:))
    {
      if (v66 == enum case for DeepLinkActivityType.browse(_:))
      {
        v67 = sub_10004B2A8();
LABEL_36:
        v68 = v67;
        objc_msgSend(v67, "restoreUserActivityState:", a1);
LABEL_37:

        goto LABEL_38;
      }
      if (v66 == enum case for DeepLinkActivityType.category(_:)
        || v66 == enum case for DeepLinkActivityType.dataTypeAddData(_:)
        || v66 == enum case for DeepLinkActivityType.dataTypeAllData(_:)
        || v66 == enum case for DeepLinkActivityType.dataTypeDetail(_:))
      {
        type metadata accessor for CategoryViewController(0);
        v71 = static CategoryViewController.makeCategoryViewController(userActivity:healthStore:healthExperienceStore:pinnedContentManager:)(a1, *(_QWORD *)&v2[OBJC_IVAR____TtC6Health23MainSplitViewController_providedHealthStore], &v2[OBJC_IVAR____TtC6Health23MainSplitViewController_providedHealthExperienceStore], &v2[OBJC_IVAR____TtC6Health23MainSplitViewController_pinnedContentManager]);
        if (v71)
        {
          v68 = (void *)v71;
          v72 = sub_10004B438();
          sub_10005001C(v68);

          objc_msgSend(v68, "restoreUserActivityState:", a1);
          goto LABEL_37;
        }
      }
      else
      {
        if (v66 == enum case for DeepLinkActivityType.dataTypeHighlights(_:)
          || v66 == enum case for DeepLinkActivityType.notificationSettings(_:))
        {
          goto LABEL_35;
        }
        if (v66 == enum case for DeepLinkActivityType.sharingInviteFlow(_:)
          || v66 == enum case for DeepLinkActivityType.sharingOverview(_:)
          || v66 == enum case for DeepLinkActivityType.sharingProfile(_:))
        {
          v67 = sub_10004B1B0();
          goto LABEL_36;
        }
        if (v66 == enum case for DeepLinkActivityType.summary(_:))
          goto LABEL_35;
        v71 = v58(v65, v39);
      }
      v73 = v83;
      static Logger.general.getter(v71);
      v74 = a1;
      v75 = Logger.logObject.getter(v74);
      v76 = static os_log_type_t.fault.getter();
      if (os_log_type_enabled(v75, v76))
      {
        v77 = (uint8_t *)swift_slowAlloc(12, -1);
        v78 = swift_slowAlloc(32, -1);
        v93[0] = v78;
        *(_DWORD *)v77 = 136315138;
        v86 = (char *)(v77 + 4);
        v79 = objc_msgSend(v74, "activityType");
        v80 = static String._unconditionallyBridgeFromObjectiveC(_:)(v79);
        v82 = v81;

        v91 = sub_100012B20(v80, v82, v93);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v91, &v92, v86, v77 + 12);

        swift_bridgeObjectRelease(v82);
        _os_log_impl((void *)&_mh_execute_header, v75, v76, "decoded activity was not handled, type: %s", v77, 0xCu);
        swift_arrayDestroy(v78, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v78, -1, -1);
        swift_slowDealloc(v77, -1, -1);

        (*(void (**)(char *, uint64_t))(v88 + 8))(v83, v89);
        v69 = v87;
        v70 = v90;
        goto LABEL_39;
      }

      (*(void (**)(char *, uint64_t))(v88 + 8))(v73, v89);
LABEL_38:
      v69 = (char *)v55;
      v70 = v39;
LABEL_39:
      v58(v69, v70);
      return;
    }
LABEL_35:
    v67 = sub_10004B180();
    goto LABEL_36;
  }
  v44 = sub_1000114C0((uint64_t)v12, (uint64_t)&qword_1000ECF88, (uint64_t)&type metadata accessor for DeepLinkActivityType, (uint64_t (*)(_QWORD, uint64_t, uint64_t, void *))sub_1000076D8);
  v45 = v86;
  static Logger.view.getter(v44);
  v46 = a1;
  v47 = Logger.logObject.getter(v46);
  v48 = static os_log_type_t.fault.getter();
  if (os_log_type_enabled(v47, v48))
  {
    v49 = (uint8_t *)swift_slowAlloc(12, -1);
    v50 = swift_slowAlloc(32, -1);
    v93[0] = v50;
    *(_DWORD *)v49 = 136315138;
    v90 = v49 + 4;
    v51 = objc_msgSend(v46, "activityType");
    v52 = static String._unconditionallyBridgeFromObjectiveC(_:)(v51);
    v54 = v53;

    v91 = sub_100012B20(v52, v54, v93);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v91, &v92, v90, v49 + 12);

    swift_bridgeObjectRelease(v54);
    _os_log_impl((void *)&_mh_execute_header, v47, v48, "asked to restore activity but couldn't decode it, type: %s", v49, 0xCu);
    swift_arrayDestroy(v50, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v50, -1, -1);
    swift_slowDealloc(v49, -1, -1);

  }
  else
  {

  }
  (*(void (**)(char *, uint64_t))(v88 + 8))(v45, v89);
}

void sub_10004E788(uint64_t a1)
{
  char *v1;
  char *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  id v8;
  char v9;
  int v10;
  id v12;
  void *v13;
  id v14;
  id v15;
  id v16;
  id v20;
  void *v21;
  id v22;
  uint64_t v23;
  id v24;

  v2 = v1;
  v4 = type metadata accessor for DeepLinkActivityType(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v23 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = objc_msgSend(v1, "traitCollection");
  v9 = UITraitCollection.rootNavigationMode.getter();

  if ((static RootNavigationMode.== infix(_:_:)(v9 & 1, 0) & 1) == 0)
  {
    v24 = sub_10004B374();
    sub_10003505C(a1);

    return;
  }
  sub_10004BF14();
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, a1, v4);
  v10 = (*(uint64_t (**)(char *, uint64_t))(v5 + 88))(v7, v4);
  if (v10 == enum case for DeepLinkActivityType.allHealthData(_:)
    || v10 == enum case for DeepLinkActivityType.allTrends(_:))
  {
    goto LABEL_7;
  }
  if (v10 != enum case for DeepLinkActivityType.browse(_:))
  {
    if (v10 != enum case for DeepLinkActivityType.dataTypeHighlights(_:)
      && v10 != enum case for DeepLinkActivityType.notificationSettings(_:))
    {
      if (v10 == enum case for DeepLinkActivityType.sharingInviteFlow(_:)
        || v10 == enum case for DeepLinkActivityType.sharingOverview(_:)
        || v10 == enum case for DeepLinkActivityType.sharingProfile(_:))
      {
        v20 = sub_10004B1B0();
        v21 = *(void **)&v2[OBJC_IVAR____TtC6Health23MainSplitViewController_ppt_selectedViewController];
        *(_QWORD *)&v2[OBJC_IVAR____TtC6Health23MainSplitViewController_ppt_selectedViewController] = v20;

        v22 = sub_10004B1B0();
        objc_msgSend(v2, "setViewController:forColumn:", v22, 2);

        v15 = sub_10004B1B0();
        v16 = objc_msgSend(v15, "popToRootViewControllerAnimated:", 0);
        goto LABEL_8;
      }
      if (v10 != enum case for DeepLinkActivityType.summary(_:))
      {
        (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
        return;
      }
    }
LABEL_7:
    v12 = sub_10004B180();
    v13 = *(void **)&v2[OBJC_IVAR____TtC6Health23MainSplitViewController_ppt_selectedViewController];
    *(_QWORD *)&v2[OBJC_IVAR____TtC6Health23MainSplitViewController_ppt_selectedViewController] = v12;

    v14 = sub_10004B180();
    objc_msgSend(v2, "setViewController:forColumn:", v14, 2);

    v15 = sub_10004B180();
    v16 = objc_msgSend(v15, "popToRootViewControllerAnimated:", 0);
LABEL_8:

    return;
  }
  sub_10004D6F8();
}

void sub_10004EA88(uint64_t a1, uint64_t a2)
{
  void *v2;
  id v5;
  char v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  id v12;
  char *v13;
  id v14;
  id v15;
  NSString v16;
  char *v17;
  id v18;

  v5 = objc_msgSend(v2, "traitCollection");
  v6 = UITraitCollection.rootNavigationMode.getter();

  if ((static RootNavigationMode.== infix(_:_:)(v6 & 1, 0) & 1) != 0)
  {
    v7 = sub_10004B438();
    sub_10004D6F8();
    v8 = &v7[qword_1000F1360];
    v9 = *(_QWORD *)&v7[qword_1000F1360];
    v10 = *(_QWORD *)&v7[qword_1000F1360 + 8];
    *(_QWORD *)v8 = 0;
    *((_QWORD *)v8 + 1) = 0;
    sub_1000A8394(v9, v10);
    swift_bridgeObjectRelease(v10);
    v11 = sub_10004B1C4();
    v12 = sub_1000A87CC();
    dispatch thunk of BrowseViewController.setActiveSearchController(_:)(v12);

    v13 = sub_10004B438();
    v14 = sub_1000A87CC();

    v15 = objc_msgSend(v14, "searchBar");
    v16 = String._bridgeToObjectiveC()();
    objc_msgSend(v15, "setText:", v16);

    v17 = sub_10004B438();
    sub_10004D6F8();
    v18 = sub_10004B1C4();
    dispatch thunk of BrowseViewController.searchTextDidChange(_:)(a1, a2);

  }
  else
  {
    v18 = sub_10004B374();
    sub_100035208(a1, a2);
  }

}

void sub_10004EC28(void *a1, uint64_t a2)
{
  void *v2;
  void *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned __int8 *v9;
  id v10;
  char v11;
  int v12;
  char *v13;
  int v14;
  id v15;
  int v16;
  int v17;
  uint64_t v18;
  id v19;

  v3 = v2;
  v6 = type metadata accessor for DeepLinkViewControllerPlacement(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (unsigned __int8 *)&v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = objc_msgSend(v2, "traitCollection");
  v11 = UITraitCollection.rootNavigationMode.getter();

  if ((static RootNavigationMode.== infix(_:_:)(v11 & 1, 0) & 1) == 0)
  {
    v19 = sub_10004B374();
    sub_100035A10((uint64_t)a1, a2);

    return;
  }
  (*(void (**)(unsigned __int8 *, uint64_t, uint64_t))(v7 + 16))(v9, a2, v6);
  v12 = (*(uint64_t (**)(unsigned __int8 *, uint64_t))(v7 + 88))(v9, v6);
  if (v12 == enum case for DeepLinkViewControllerPlacement.regularSecondaryCompactBrowse(_:))
  {
    v13 = sub_10004B438();
    sub_10005001C(a1);

    return;
  }
  if (v12 == enum case for DeepLinkViewControllerPlacement.onSummary(_:))
  {
    (*(void (**)(unsigned __int8 *, uint64_t))(v7 + 96))(v9, v6);
    v14 = *v9;
    v15 = sub_10004B180();
    objc_msgSend(v3, "setViewController:forColumn:", v15, 2);
    if (v14 == 1)
      goto LABEL_13;
    goto LABEL_14;
  }
  if (v12 == enum case for DeepLinkViewControllerPlacement.onBrowse(_:))
  {
    (*(void (**)(unsigned __int8 *, uint64_t))(v7 + 96))(v9, v6);
    v16 = *v9;
    v15 = sub_10004B2A8();
    objc_msgSend(v3, "setViewController:forColumn:", v15, 2);
    if (v16 == 1)
      goto LABEL_13;
    goto LABEL_14;
  }
  if (v12 == enum case for DeepLinkViewControllerPlacement.onSharing(_:))
  {
    (*(void (**)(unsigned __int8 *, uint64_t))(v7 + 96))(v9, v6);
    v17 = *v9;
    v15 = sub_10004B1B0();
    objc_msgSend(v3, "setViewController:forColumn:", v15, 2);
    if (v17 == 1)
LABEL_13:

LABEL_14:
    objc_msgSend(v15, "pushViewController:animated:", a1, 0);

    return;
  }
  (*(void (**)(unsigned __int8 *, uint64_t))(v7 + 8))(v9, v6);
}

void sub_10004EEF4(uint64_t a1)
{
  sub_10004E788(a1);
}

void sub_10004EF14(uint64_t a1, uint64_t a2)
{
  sub_10004EA88(a1, a2);
}

void sub_10004EF34()
{
  sub_10004BF14();
}

id sub_10004EF54()
{
  return sub_10004D5B4();
}

void sub_10004EF74(void *a1, uint64_t a2)
{
  sub_10004EC28(a1, a2);
}

void *sub_10004EF94()
{
  _QWORD *v0;
  void *v1;
  id v2;

  v1 = *(void **)(*v0 + OBJC_IVAR____TtC6Health23MainSplitViewController_ppt_selectedViewController);
  v2 = v1;
  return v1;
}

uint64_t sub_10004EFC4(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = sub_10000F6E4(&qword_1000EE3E8, a2, (uint64_t (*)(uint64_t))type metadata accessor for MainSplitViewController, (uint64_t)&unk_1000B2E14);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t sub_10004F000(uint64_t a1)
{
  uint64_t v2;

  sub_10004F03C(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void sub_10004F03C(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_1000EE3F8)
  {
    v2 = sub_10001314C(255, (unint64_t *)&qword_1000ED9B0, (uint64_t)&protocol descriptor for StartupNotDismissible, 1);
    v3 = type metadata accessor for Optional(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_1000EE3F8);
  }
}

void sub_10004F0A4()
{
  unint64_t v0;
  unint64_t v1;

  v0 = sub_100050424();
  if (swift_isClassType())
    v1 = v0;
  else
    v1 = 0;
  if (v1)
    sub_1000138C8(0, (unint64_t *)&qword_1000ED9C0, (uint64_t)&type metadata for Swift.AnyObject + 8, (uint64_t (*)(_QWORD, uint64_t))&type metadata accessor for _ContiguousArrayStorage);
  else
    sub_1000076D8(0, &qword_1000EE420, (uint64_t (*)(uint64_t))sub_100050424, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for _ContiguousArrayStorage);
}

uint64_t sub_10004F120(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int isUniquelyReferenced_nonNull_bridgeObject;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t result;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  if (a1 < 0)
  {
    __break(1u);
  }
  else
  {
    v3 = a3;
    v5 = a2;
    v7 = a1;
    v6 = *v4;
    if (!((unint64_t)*v4 >> 62))
    {
      v9 = *(_QWORD *)((v6 & 0xFFFFFFFFFFFFF8) + 0x10);
      if (v9 >= a2)
        goto LABEL_4;
LABEL_34:
      __break(1u);
      goto LABEL_35;
    }
  }
  if (v6 < 0)
    v24 = v6;
  else
    v24 = v6 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v6);
  v9 = _CocoaArrayWrapper.endIndex.getter(v24);
  swift_bridgeObjectRelease(v6);
  if (v9 < v5)
    goto LABEL_34;
LABEL_4:
  v9 = v5 - v7;
  if (__OFSUB__(v5, v7))
  {
LABEL_35:
    __break(1u);
    goto LABEL_36;
  }
  v8 = 1 - v9;
  if (__OFSUB__(1, v9))
  {
LABEL_36:
    __break(1u);
    goto LABEL_37;
  }
  v6 = *v4;
  if (!((unint64_t)*v4 >> 62))
  {
    v10 = *(_QWORD *)((v6 & 0xFFFFFFFFFFFFF8) + 0x10);
    v11 = v10 + v8;
    if (!__OFADD__(v10, v8))
      goto LABEL_8;
LABEL_42:
    __break(1u);
LABEL_43:
    if (v6 < 0)
      v26 = v6;
    else
      v26 = v6 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v6);
    v14 = _CocoaArrayWrapper.endIndex.getter(v26);
    swift_bridgeObjectRelease(v6);
    goto LABEL_15;
  }
LABEL_37:
  if (v6 < 0)
    v25 = v6;
  else
    v25 = v6 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v6);
  v10 = _CocoaArrayWrapper.endIndex.getter(v25);
  swift_bridgeObjectRelease(v6);
  v11 = v10 + v8;
  if (__OFADD__(v10, v8))
    goto LABEL_42;
LABEL_8:
  v6 = *v4;
  isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject(*v4);
  *v4 = v6;
  v10 = 0;
  if (isUniquelyReferenced_nonNull_bridgeObject && (v6 & 0x8000000000000000) == 0 && (v6 & 0x4000000000000000) == 0)
  {
    v13 = v6 & 0xFFFFFFFFFFFFFF8;
    if (v11 <= *(_QWORD *)((v6 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
      goto LABEL_18;
    v10 = 1;
  }
  if ((unint64_t)v6 >> 62)
    goto LABEL_43;
  v14 = *(_QWORD *)((v6 & 0xFFFFFFFFFFFFF8) + 0x10);
LABEL_15:
  if (v14 <= v11)
    v14 = v11;
  swift_bridgeObjectRetain(v6);
  v6 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v10, v14, 1, v6);
  swift_bridgeObjectRelease(*v4);
  *v4 = v6;
  v13 = v6 & 0xFFFFFFFFFFFFFF8;
LABEL_18:
  v15 = (_QWORD *)(v13 + 32 + 8 * v7);
  v16 = sub_100006D10(0, (unint64_t *)&qword_1000F0B50, UIViewController_ptr);
  v17 = (char *)swift_arrayDestroy(v15, v9, v16);
  if (!v8)
  {
LABEL_28:
    *v15 = v3;
    return specialized Array._endMutation()(v17);
  }
  if (!((unint64_t)v6 >> 62))
  {
    v18 = *(_QWORD *)(v13 + 16);
    v19 = v18 - v5;
    if (!__OFSUB__(v18, v5))
      goto LABEL_21;
LABEL_52:
    __break(1u);
    goto LABEL_53;
  }
  if (v6 < 0)
    v27 = v6;
  else
    v27 = v13;
  swift_bridgeObjectRetain(v6);
  v28 = _CocoaArrayWrapper.endIndex.getter(v27);
  swift_bridgeObjectRelease(v6);
  v19 = v28 - v5;
  if (__OFSUB__(v28, v5))
    goto LABEL_52;
LABEL_21:
  if ((v19 & 0x8000000000000000) == 0)
  {
    v17 = (char *)(v15 + 1);
    v20 = (char *)(v13 + 32 + 8 * v5);
    if (v15 + 1 != (_QWORD *)v20 || v17 >= &v20[8 * v19])
      v17 = (char *)memmove(v17, v20, 8 * v19);
    if (!((unint64_t)v6 >> 62))
    {
      v21 = *(_QWORD *)(v13 + 16);
      v22 = v21 + v8;
      if (!__OFADD__(v21, v8))
      {
LABEL_27:
        *(_QWORD *)(v13 + 16) = v22;
        goto LABEL_28;
      }
      goto LABEL_58;
    }
LABEL_53:
    if (v6 < 0)
      v29 = v6;
    else
      v29 = v13;
    swift_bridgeObjectRetain(v6);
    v30 = _CocoaArrayWrapper.endIndex.getter(v29);
    swift_bridgeObjectRelease(v6);
    v22 = v30 + v8;
    if (!__OFADD__(v30, v8))
      goto LABEL_27;
LABEL_58:
    __break(1u);
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, 2, 1046, 0);
  __break(1u);
  return result;
}

uint64_t sub_10004F408(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  void (*v12)(char *, _QWORD, uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  _QWORD v20[5];
  _QWORD v21[3];
  uint64_t v22;
  _UNKNOWN **v23;

  v2 = type metadata accessor for SidebarSection(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)v20 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for SidebarDataSourceProvider();
  v22 = v6;
  v23 = &off_1000DD3E0;
  v21[0] = a1;
  sub_100023998(0);
  v8 = swift_allocObject(v7, 80, 7);
  *(_OWORD *)(v8 + 16) = xmmword_1000B25C0;
  sub_100012E04(v21, v6);
  *(_QWORD *)(v8 + 32) = sub_100026270();
  *(_QWORD *)(v8 + 40) = v9;
  v10 = *sub_100012E04(v21, v22);
  sub_100028F08(v10 + 24, (uint64_t)v20);
  v11 = *(void **)(v10 + 16);
  v12 = *(void (**)(char *, _QWORD, uint64_t))(v3 + 104);
  v12(v5, enum case for SidebarSection.healthCategory(_:), v2);
  v13 = type metadata accessor for SidebarFeedItemDataSource(0);
  swift_allocObject(v13, *(unsigned int *)(v13 + 48), *(unsigned __int16 *)(v13 + 52));
  v14 = sub_1000264B4(v20, v11, (uint64_t)v5);
  v15 = sub_10000F6E4(&qword_1000EE410, 255, type metadata accessor for SidebarFeedItemDataSource, (uint64_t)&protocol conformance descriptor for AdditionalItemsDataSource<A>);
  *(_QWORD *)(v8 + 48) = v14;
  *(_QWORD *)(v8 + 56) = v15;
  v16 = *sub_100012E04(v21, v22);
  sub_100028F08(v16 + 24, (uint64_t)v20);
  v17 = *(void **)(v16 + 16);
  v12(v5, enum case for SidebarSection.healthRecords(_:), v2);
  swift_allocObject(v13, *(unsigned int *)(v13 + 48), *(unsigned __int16 *)(v13 + 52));
  *(_QWORD *)(v8 + 64) = sub_1000264B4(v20, v17, (uint64_t)v5);
  *(_QWORD *)(v8 + 72) = v15;
  v18 = CompoundSectionedDataSource.init(_:)(v8);
  _s6Health23OpenSleepScheduleIntentVwxx_0(v21);
  return v18;
}

id sub_10004F5FC(uint64_t a1, char *a2)
{
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  id v25;
  id result;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  Swift::String v31;
  uint64_t v32;
  NSString v33;
  void *v34;
  id v35;
  id v36;
  Swift::String v37;
  Swift::String v38;
  void *object;
  NSString v40;
  uint64_t v41;
  void *v42;
  _QWORD v44[5];
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD v48[5];
  Swift::String v49;

  v4 = type metadata accessor for SidebarDataSourceProvider();
  v48[4] = &off_1000DD3E0;
  v48[3] = v4;
  v48[0] = a1;
  v5 = &a2[qword_1000F1350];
  v6 = enum case for Presentation.sidebar(_:);
  v7 = type metadata accessor for Presentation(0);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 104))(v5, v6, v7);
  v8 = &a2[qword_1000F1358];
  *((_QWORD *)v8 + 1) = 0;
  swift_unknownObjectWeakInit(v8, 0);
  v9 = &a2[qword_1000F1360];
  type metadata accessor for SidebarDataSourceItem(0);
  v10 = a2;
  *(_QWORD *)v9 = static SidebarDataSourceItem.summarySidebarItemIdentifier.getter();
  *((_QWORD *)v9 + 1) = v11;
  *(_QWORD *)&v10[qword_1000F09C8] = 0;
  NSDiffableDataSourceSnapshot.init()(&type metadata for String, &type metadata for String, &protocol witness table for String, &protocol witness table for String);
  *(_QWORD *)&v10[qword_1000F09D8] = 0;
  v12 = (uint64_t)&v10[qword_1000F09C0];
  sub_100028F08((uint64_t)v48, (uint64_t)&v10[qword_1000F09C0]);
  sub_100028F08(v12, (uint64_t)&v45);
  v13 = sub_10002AAF0((uint64_t)&v45, v47);
  __chkstk_darwin(v13);
  v15 = (_QWORD *)((char *)&v44[-1] - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v16 + 16))(v15);
  v17 = *v15;
  v44[3] = v4;
  v44[4] = &off_1000DD3E0;
  v44[0] = v17;
  v18 = type metadata accessor for MainSidebarDataSource(0);
  swift_allocObject(v18, *(unsigned int *)(v18 + 48), *(unsigned __int16 *)(v18 + 52));
  v19 = sub_10002AAF0((uint64_t)v44, v4);
  __chkstk_darwin(v19);
  v21 = (_QWORD *)((char *)&v44[-1] - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v22 + 16))(v21);
  v23 = sub_10004F408(*v21);
  _s6Health23OpenSleepScheduleIntentVwxx_0(v44);
  _s6Health23OpenSleepScheduleIntentVwxx_0(&v45);

  v24 = swift_retain(v23);
  v25 = (id)CollapsibleListCollectionViewController.init(dataSource:)(v24);
  result = objc_msgSend(v25, "collectionView");
  if (result)
  {
    v27 = result;
    v28 = static String._unconditionallyBridgeFromObjectiveC(_:)(HKUIAutomationIdentifierPrefix);
    v30 = v29;
    v45 = v28;
    v46 = v29;
    swift_bridgeObjectRetain(v29);
    v31._countAndFlagsBits = 0xD000000000000016;
    v31._object = (void *)0x80000001000BAC40;
    String.append(_:)(v31);
    swift_bridgeObjectRelease(v30);
    v32 = v46;
    v33 = String._bridgeToObjectiveC()();
    objc_msgSend(v27, "setAccessibilityIdentifier:", v33, swift_bridgeObjectRelease(v32).n128_f64[0]);

    v34 = (void *)objc_opt_self(NSBundle);
    v35 = v25;
    v36 = objc_msgSend(v34, "mainBundle");
    v49._object = (void *)0x80000001000BAC60;
    v37._countAndFlagsBits = 0x415F48544C414548;
    v37._object = (void *)0xEA00000000005050;
    v38._countAndFlagsBits = 0;
    v38._object = (void *)0xE000000000000000;
    v49._countAndFlagsBits = 0xD000000000000013;
    object = NSLocalizedString(_:tableName:bundle:value:comment:)(v37, (Swift::String_optional)0, (NSBundle)v36, v38, v49)._object;

    v40 = String._bridgeToObjectiveC()();
    objc_msgSend(v35, "setTitle:", v40, swift_bridgeObjectRelease(object).n128_f64[0]);

    v41 = dispatch thunk of CompoundDataSourceCollectionViewController.dataSource.getter();
    v42 = (void *)dispatch thunk of CompoundSectionedDataSource.changeObservers.getter();
    swift_release(v41);
    objc_msgSend(v42, "registerObserver:", v35);
    swift_release(v23);

    _s6Health23OpenSleepScheduleIntentVwxx_0(v48);
    return v35;
  }
  else
  {
    __break(1u);
  }
  return result;
}

void sub_10004F9EC()
{
  char *v0;
  char *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  id v8;
  id v9;
  NSString v10;
  id v11;

  v1 = v0;
  v2 = OBJC_IVAR____TtC6Health23MainSplitViewController_providedHealthStore;
  *(_QWORD *)&v1[v2] = objc_msgSend(objc_allocWithZone((Class)HKHealthStore), "init");
  v3 = OBJC_IVAR____TtC6Health23MainSplitViewController_providedHealthExperienceStore;
  if (qword_1000EC140 != -1)
    swift_once(&qword_1000EC140, sub_100014684);
  v4 = (uint64_t *)&v1[v3];
  v5 = sub_10008A080();
  v4[3] = type metadata accessor for DiskHealthExperienceStore(0);
  v4[4] = (uint64_t)&protocol witness table for DiskHealthExperienceStore;
  *v4 = v5;
  *(_QWORD *)&v1[OBJC_IVAR____TtC6Health23MainSplitViewController____lazy_storage___providedHealthToolbox] = 0;
  *(_QWORD *)&v1[OBJC_IVAR____TtC6Health23MainSplitViewController_ppt_selectedViewController] = 0;
  *(_QWORD *)&v1[OBJC_IVAR____TtC6Health23MainSplitViewController____lazy_storage___summaryViewController] = 0;
  *(_QWORD *)&v1[OBJC_IVAR____TtC6Health23MainSplitViewController____lazy_storage___summaryNavigationController] = 0;
  *(_QWORD *)&v1[OBJC_IVAR____TtC6Health23MainSplitViewController____lazy_storage___sharingViewController] = 0;
  *(_QWORD *)&v1[OBJC_IVAR____TtC6Health23MainSplitViewController____lazy_storage___sharingNavigationController] = 0;
  *(_QWORD *)&v1[OBJC_IVAR____TtC6Health23MainSplitViewController____lazy_storage___browseViewController] = 0;
  *(_QWORD *)&v1[OBJC_IVAR____TtC6Health23MainSplitViewController____lazy_storage___browseNavigationController] = 0;
  *(_QWORD *)&v1[OBJC_IVAR____TtC6Health23MainSplitViewController____lazy_storage___mainTabBarController] = 0;
  *(_QWORD *)&v1[OBJC_IVAR____TtC6Health23MainSplitViewController____lazy_storage___sidebarViewController] = 0;
  *(_QWORD *)&v1[OBJC_IVAR____TtC6Health23MainSplitViewController____lazy_storage___sidebarNavigationController] = 0;
  v6 = OBJC_IVAR____TtC6Health23MainSplitViewController_observerDelegates;
  v7 = (void *)HKLogWellnessDashboard;
  v8 = objc_allocWithZone((Class)HKObserverSet);
  v9 = v7;
  v10 = String._bridgeToObjectiveC()();
  v11 = objc_msgSend(v8, "initWithName:loggingCategory:", v10, v9);

  *(_QWORD *)&v1[v6] = v11;
  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000025, 0x80000001000B8850, "Health/MainSplitViewController.swift", 36, 2, 111, 0);
  __break(1u);
}

uint64_t sub_10004FBD4(void *a1)
{
  void *v1;
  void *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  id v11;
  id v12;
  BOOL v13;
  uint64_t result;
  id v15;
  void (*v16)(char *, uint64_t);
  uint64_t v17;

  v2 = v1;
  v4 = type metadata accessor for BrowseViewController.SearchState(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = __chkstk_darwin(v4);
  v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v10 = (char *)&v17 - v9;
  if (objc_msgSend(a1, "horizontalSizeClass") == (id)1)
  {
    v11 = objc_msgSend(v2, "traitCollection");
    v12 = objc_msgSend(v11, "horizontalSizeClass");

    v13 = v12 != (id)2;
  }
  else
  {
    v13 = 1;
  }
  result = sub_10004D8A4();
  if ((result & 1) != 0)
  {
    v15 = sub_10004B1C4();
    dispatch thunk of BrowseViewController.searchState.getter();

    (*(void (**)(char *, _QWORD, uint64_t))(v5 + 104))(v8, enum case for BrowseViewController.SearchState.cover(_:), v4);
    LOBYTE(v15) = static BrowseViewController.SearchState.== infix(_:_:)(v10, v8);
    v16 = *(void (**)(char *, uint64_t))(v5 + 8);
    v16(v8, v4);
    result = ((uint64_t (*)(char *, uint64_t))v16)(v10, v4);
    if (!v13 && (v15 & 1) != 0)
      return (uint64_t)objc_msgSend(v2, "setPreferredDisplayMode:", 2);
  }
  return result;
}

uint64_t sub_10004FD40(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int isUniquelyReferenced_nonNull_bridgeObject;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  const void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t result;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  if (a1 < 0)
  {
    __break(1u);
  }
  else
  {
    v2 = a2;
    v4 = a1;
    v5 = *v3;
    if (!((unint64_t)*v3 >> 62))
    {
      v7 = *(_QWORD *)((v5 & 0xFFFFFFFFFFFFF8) + 0x10);
      if (v7 >= a2)
        goto LABEL_4;
LABEL_34:
      __break(1u);
      goto LABEL_35;
    }
  }
  if (v5 < 0)
    v21 = v5;
  else
    v21 = v5 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v5);
  v7 = _CocoaArrayWrapper.endIndex.getter(v21);
  swift_bridgeObjectRelease(v5);
  if (v7 < v2)
    goto LABEL_34;
LABEL_4:
  v7 = v2 - v4;
  if (__OFSUB__(v2, v4))
  {
LABEL_35:
    __break(1u);
    goto LABEL_36;
  }
  v6 = v4 - v2;
  if (__OFSUB__(0, v7))
  {
LABEL_36:
    __break(1u);
    goto LABEL_37;
  }
  v5 = *v3;
  if (!((unint64_t)*v3 >> 62))
  {
    v8 = *(_QWORD *)((v5 & 0xFFFFFFFFFFFFF8) + 0x10);
    v9 = v8 - v7;
    if (!__OFADD__(v8, v6))
      goto LABEL_8;
LABEL_42:
    __break(1u);
LABEL_43:
    if (v5 < 0)
      v23 = v5;
    else
      v23 = v5 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v5);
    v12 = _CocoaArrayWrapper.endIndex.getter(v23);
    swift_bridgeObjectRelease(v5);
    goto LABEL_15;
  }
LABEL_37:
  if (v5 < 0)
    v22 = v5;
  else
    v22 = v5 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v5);
  v8 = _CocoaArrayWrapper.endIndex.getter(v22);
  swift_bridgeObjectRelease(v5);
  v9 = v8 + v6;
  if (__OFADD__(v8, v6))
    goto LABEL_42;
LABEL_8:
  v5 = *v3;
  isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject(*v3);
  *v3 = v5;
  v8 = 0;
  if (isUniquelyReferenced_nonNull_bridgeObject && (v5 & 0x8000000000000000) == 0 && (v5 & 0x4000000000000000) == 0)
  {
    v11 = v5 & 0xFFFFFFFFFFFFFF8;
    if (v9 <= *(_QWORD *)((v5 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
      goto LABEL_18;
    v8 = 1;
  }
  if ((unint64_t)v5 >> 62)
    goto LABEL_43;
  v12 = *(_QWORD *)((v5 & 0xFFFFFFFFFFFFF8) + 0x10);
LABEL_15:
  if (v12 <= v9)
    v12 = v9;
  swift_bridgeObjectRetain(v5);
  v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v8, v12, 1, v5);
  swift_bridgeObjectRelease(*v3);
  *v3 = v5;
  v11 = v5 & 0xFFFFFFFFFFFFFF8;
LABEL_18:
  v13 = sub_100006D10(0, (unint64_t *)&qword_1000F0B50, UIViewController_ptr);
  v14 = (void *)swift_arrayDestroy(v11 + 32 + 8 * v4, v7, v13);
  if (!v6)
    return specialized Array._endMutation()(v14);
  if (!((unint64_t)v5 >> 62))
  {
    v15 = *(_QWORD *)(v11 + 16);
    v16 = v15 - v2;
    if (!__OFSUB__(v15, v2))
      goto LABEL_21;
LABEL_52:
    __break(1u);
    goto LABEL_53;
  }
  if (v5 < 0)
    v24 = v5;
  else
    v24 = v11;
  swift_bridgeObjectRetain(v5);
  v25 = _CocoaArrayWrapper.endIndex.getter(v24);
  swift_bridgeObjectRelease(v5);
  v16 = v25 - v2;
  if (__OFSUB__(v25, v2))
    goto LABEL_52;
LABEL_21:
  if ((v16 & 0x8000000000000000) == 0)
  {
    v17 = (const void *)(v11 + 32 + 8 * v2);
    if (v4 != v2 || v11 + 32 + 8 * v4 >= (unint64_t)v17 + 8 * v16)
      v14 = memmove((void *)(v11 + 32 + 8 * v4), v17, 8 * v16);
    if (!((unint64_t)v5 >> 62))
    {
      v18 = *(_QWORD *)(v11 + 16);
      v19 = v18 + v6;
      if (!__OFADD__(v18, v6))
      {
LABEL_27:
        *(_QWORD *)(v11 + 16) = v19;
        return specialized Array._endMutation()(v14);
      }
      goto LABEL_58;
    }
LABEL_53:
    if (v5 < 0)
      v26 = v5;
    else
      v26 = v11;
    swift_bridgeObjectRetain(v5);
    v27 = _CocoaArrayWrapper.endIndex.getter(v26);
    swift_bridgeObjectRelease(v5);
    v19 = v27 + v6;
    if (!__OFADD__(v27, v6))
      goto LABEL_27;
LABEL_58:
    __break(1u);
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, 2, 1046, 0);
  __break(1u);
  return result;
}

void sub_10005001C(void *a1)
{
  void *v1;
  void *v2;
  id v4;
  id v5;
  id v6;
  id v7;
  id v8;
  char v9;
  id v10;
  id v11;
  id v12;
  char v13;
  id v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  id v18;
  Class isa;
  id v20;
  uint64_t v21;

  v2 = v1;
  v4 = sub_10004B2A8();
  v5 = objc_msgSend(v4, "view");

  if (!v5)
  {
    __break(1u);
    goto LABEL_10;
  }
  objc_msgSend(v5, "endEditing:", 1);

  v6 = sub_10004B66C();
  v7 = objc_msgSend(v6, "view");

  if (!v7)
  {
LABEL_10:
    __break(1u);
    return;
  }
  objc_msgSend(v7, "endEditing:", 1);

  sub_100006D10(0, &qword_1000ECAA0, NSObject_ptr);
  v8 = sub_10004B0B8();
  v9 = static NSObject.== infix(_:_:)(a1);

  if ((v9 & 1) != 0)
  {
    v10 = sub_10004B180();

    v11 = sub_10004B180();
  }
  else
  {
    v12 = sub_10004B194();
    v13 = static NSObject.== infix(_:_:)(a1);

    if ((v13 & 1) != 0)
    {
      v14 = sub_10004B1B0();

      v11 = sub_10004B1B0();
    }
    else
    {
      v15 = sub_10004B2A8();
      sub_1000138C8(0, (unint64_t *)&qword_1000ED9C0, (uint64_t)&type metadata for Swift.AnyObject + 8, (uint64_t (*)(_QWORD, uint64_t))&type metadata accessor for _ContiguousArrayStorage);
      v17 = swift_allocObject(v16, 40, 7);
      *(_OWORD *)(v17 + 16) = xmmword_1000B1AB0;
      *(_QWORD *)(v17 + 32) = a1;
      v21 = v17;
      specialized Array._endMutation()(v17);
      sub_100006D10(0, (unint64_t *)&qword_1000F0B50, UIViewController_ptr);
      v18 = a1;
      isa = Array._bridgeToObjectiveC()().super.isa;
      objc_msgSend(v15, "setViewControllers:animated:", isa, 0, swift_bridgeObjectRelease(v21).n128_f64[0]);

      v11 = sub_10004B2A8();
    }
  }
  objc_msgSend(v2, "setViewController:forColumn:", v11);

}

uint64_t sub_100050290()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

id sub_1000502B4(void *a1)
{
  return sub_1000502CC(a1, (SEL *)&selRef_splitViewControllerDidExpand_);
}

id sub_1000502C0(void *a1)
{
  return sub_1000502CC(a1, (SEL *)&selRef_splitViewControllerDidCollapse_);
}

id sub_1000502CC(void *a1, SEL *a2)
{
  uint64_t v2;
  uint64_t v5;
  id result;

  v5 = *(_QWORD *)(v2 + 16);
  result = objc_msgSend(a1, "respondsToSelector:", *a2);
  if ((result & 1) != 0)
    return objc_msgSend(a1, *a2, v5);
  return result;
}

uint64_t sub_100050328(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_1000138C8(0, (unint64_t *)&qword_1000EDBD0, (uint64_t)&type metadata for Any + 8, (uint64_t (*)(_QWORD, uint64_t))&type metadata accessor for Optional);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

id sub_100050388(void *a1)
{
  return sub_1000503C4(a1, (SEL *)&selRef_splitViewController_willHideColumn_);
}

uint64_t sub_100050394()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

id sub_1000503B8(void *a1)
{
  return sub_1000503C4(a1, (SEL *)&selRef_splitViewController_willShowColumn_);
}

id sub_1000503C4(void *a1, SEL *a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  id result;

  v5 = *(_QWORD *)(v2 + 16);
  v6 = *(_QWORD *)(v2 + 24);
  result = objc_msgSend(a1, "respondsToSelector:", *a2);
  if ((result & 1) != 0)
    return objc_msgSend(a1, *a2, v5, v6);
  return result;
}

unint64_t sub_100050424()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000EE418;
  if (!qword_1000EE418)
  {
    v1 = type metadata accessor for UITraitHorizontalSizeClass(255);
    result = swift_getMetatypeMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_1000EE418);
  }
  return result;
}

uint64_t ViewControllerRouterProtocol<>.dismissPresentedViewController()()
{
  void *v0;
  unint64_t v1;
  uint64_t result;

  v1 = sub_100035D84();
  result = UIViewController.containsViewController<A>(ofType:)(v1, v1);
  if ((result & 1) == 0)
    return (uint64_t)objc_msgSend(v0, "dismissViewControllerAnimated:completion:", 0, 0);
  return result;
}

unint64_t sub_1000504CC()
{
  unint64_t result;

  result = qword_1000EE428;
  if (!qword_1000EE428)
  {
    result = swift_getWitnessTable(&unk_1000B2FBC, &type metadata for OpenDataTypeIntent);
    atomic_store(result, (unint64_t *)&qword_1000EE428);
  }
  return result;
}

unint64_t sub_100050514()
{
  unint64_t result;

  result = qword_1000EE430;
  if (!qword_1000EE430)
  {
    result = swift_getWitnessTable(&unk_1000B323C, &type metadata for HealthDataTypeEntity);
    atomic_store(result, (unint64_t *)&qword_1000EE430);
  }
  return result;
}

uint64_t sub_100050558()
{
  uint64_t v1;

  IntentParameter.wrappedValue.getter(&v1);
  return v1;
}

uint64_t sub_100050588()
{
  uint64_t v0;
  uint64_t v1;
  _BYTE *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE v13[16];

  v0 = type metadata accessor for String.LocalizationValue(0);
  __chkstk_darwin(v0);
  v2 = &v13[-((v1 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v3 = type metadata accessor for LocalizedStringResource.BundleDescription(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = &v13[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v7 = type metadata accessor for Locale(0);
  __chkstk_darwin(v7);
  v9 = &v13[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v10 = type metadata accessor for LocalizedStringResource(0);
  sub_10001C884(v10, qword_1000F0F40);
  sub_10001C86C(v10, (uint64_t)qword_1000F0F40);
  v11 = String.LocalizationValue.init(stringLiteral:)(0x746144206E65704FLL, 0xEE00657079542061);
  static Locale.current.getter(v11);
  (*(void (**)(_BYTE *, _QWORD, uint64_t))(v4 + 104))(v6, enum case for LocalizedStringResource.BundleDescription.main(_:), v3);
  return LocalizedStringResource.init(_:table:locale:bundle:comment:)(v2, 0x6E65746E49707041, 0xEA00000000007374, v9, v6, 0, 0, 256);
}

uint64_t sub_100050710()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD v22[2];

  sub_10000E944(0, &qword_1000EC948, (uint64_t (*)(uint64_t))&type metadata accessor for LocalizedStringResource);
  __chkstk_darwin(v0);
  v2 = (char *)v22 - v1;
  v22[0] = type metadata accessor for LocalizedStringResource.BundleDescription(0);
  v3 = *(_QWORD *)(v22[0] - 8);
  __chkstk_darwin(v22[0]);
  v5 = (char *)v22 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for Locale(0);
  __chkstk_darwin(v6);
  v8 = (char *)v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for String.LocalizationValue(0);
  __chkstk_darwin(v9);
  v11 = (char *)v22 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for LocalizedStringResource(0);
  v13 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v15 = (char *)v22 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000E944(0, &qword_1000EC940, (uint64_t (*)(uint64_t))&type metadata accessor for IntentDescription);
  v17 = v16;
  sub_10001C884(v16, qword_1000F0F58);
  v18 = sub_10001C86C(v17, (uint64_t)qword_1000F0F58);
  v19 = String.LocalizationValue.init(stringLiteral:)(0xD000000000000065, 0x80000001000BAD70);
  static Locale.current.getter(v19);
  (*(void (**)(char *, _QWORD, _QWORD))(v3 + 104))(v5, enum case for LocalizedStringResource.BundleDescription.main(_:), v22[0]);
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v11, 0x6E65746E49707041, 0xEA00000000007374, v8, v5, 0, 0, 256);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v13 + 56))(v2, 1, 1, v12);
  IntentDescription.init(_:categoryName:searchKeywords:)(v15, v2, _swiftEmptyArrayStorage);
  v20 = type metadata accessor for IntentDescription(0);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 56))(v18, 0, 1, v20);
}

uint64_t sub_100050974(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v2[3] = a1;
  v2[4] = a2;
  sub_10000E944(0, (unint64_t *)&unk_1000ECA90, (uint64_t (*)(uint64_t))&type metadata accessor for URL);
  v2[5] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v3 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for URL(0);
  v2[6] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v2[7] = v5;
  v6 = (*(_QWORD *)(v5 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[8] = swift_task_alloc(v6);
  v2[9] = swift_task_alloc(v6);
  return swift_task_switch(sub_100050A14, 0, 0);
}

id sub_100050A14()
{
  _QWORD *v0;
  id v1;
  void *v2;
  id v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t, uint64_t);
  id result;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  void *v17;
  unint64_t v18;
  Class isa;
  uint64_t v20;
  uint64_t (*v21)(void);
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  NSURL *v27;

  v1 = objc_msgSend(objc_allocWithZone((Class)HealthAppDataTypeDetailLinkBuilder), "init");
  IntentParameter.wrappedValue.getter(v0 + 2);
  v2 = (void *)v0[2];
  v3 = objc_msgSend(v2, "objectType");

  v4 = objc_msgSend(v1, "URLForDataTypeDetailWithObjectType:", v3);
  if (!v4)
  {
    (*(void (**)(_QWORD, uint64_t, uint64_t, _QWORD))(v0[7] + 56))(v0[5], 1, 1, v0[6]);
    goto LABEL_6;
  }
  v6 = v0[7];
  v5 = v0[8];
  v8 = v0[5];
  v7 = v0[6];
  static URL._unconditionallyBridgeFromObjectiveC(_:)(v4);

  v9 = *(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 32);
  v9(v8, v5, v7);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v6 + 56))(v8, 0, 1, v7);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v8, 1, v7) == 1)
  {
LABEL_6:
    v22 = v0[8];
    v23 = v0[9];
    v24 = v0[5];
    sub_10001C7DC(v24);
    v25 = sub_100055628();
    v26 = swift_allocError(&type metadata for DataTypeIntentError, v25, 0, 0);
    swift_willThrow(v26);
    swift_task_dealloc(v23);
    swift_task_dealloc(v22);
    swift_task_dealloc(v24);
    v21 = (uint64_t (*)(void))v0[1];
    return (id)v21();
  }
  v9(v0[9], v0[5], v0[6]);
  result = objc_msgSend((id)objc_opt_self(LSApplicationWorkspace), "defaultWorkspace");
  if (result)
  {
    v11 = result;
    v13 = v0[8];
    v12 = v0[9];
    v15 = v0[6];
    v14 = v0[7];
    v27 = (NSURL *)v0[5];
    URL._bridgeToObjectiveC()(v27);
    v17 = v16;
    v18 = sub_10007C1F8((uint64_t)_swiftEmptyArrayStorage);
    isa = Dictionary._bridgeToObjectiveC()().super.isa;
    objc_msgSend(v11, "openSensitiveURL:withOptions:", v17, isa, swift_bridgeObjectRelease(v18).n128_f64[0]);

    static IntentResult.result<>()(v20);
    (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v12, v15);
    swift_task_dealloc(v12);
    swift_task_dealloc(v13);
    swift_task_dealloc(v27);
    v21 = (uint64_t (*)(void))v0[1];
    return (id)v21();
  }
  __break(1u);
  return result;
}

_QWORD *sub_100050C94@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *result;
  uint64_t v3;

  result = IntentParameter.wrappedValue.getter(&v3);
  *a1 = v3;
  return result;
}

void sub_100050CCC(id *a1)
{
  id v1;
  id v2;

  v2 = *a1;
  v1 = v2;
  IntentParameter.wrappedValue.setter(&v2);

}

void (*sub_100050D0C(_QWORD *a1))(_QWORD *a1)
{
  _QWORD *v2;

  v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = IntentParameter.wrappedValue.modify();
  return sub_100050D54;
}

void sub_100050D54(_QWORD *a1)
{
  void *v1;

  v1 = (void *)*a1;
  (*(void (**)(_QWORD, _QWORD))(*a1 + 32))(*a1, 0);
  free(v1);
}

unint64_t sub_100050D8C()
{
  unint64_t result;

  result = qword_1000EE438;
  if (!qword_1000EE438)
  {
    result = swift_getWitnessTable(&unk_1000B3074, &type metadata for OpenDataTypeIntent);
    atomic_store(result, (unint64_t *)&qword_1000EE438);
  }
  return result;
}

unint64_t sub_100050DD4()
{
  unint64_t result;

  result = qword_1000EE440;
  if (!qword_1000EE440)
  {
    result = swift_getWitnessTable(&unk_1000B309C, &type metadata for OpenDataTypeIntent);
    atomic_store(result, (unint64_t *)&qword_1000EE440);
  }
  return result;
}

uint64_t sub_100050E18(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_1000C1148, 1);
}

uint64_t sub_100050E28(uint64_t a1, uint64_t a2)
{
  _QWORD v3[2];

  v3[0] = a2;
  v3[1] = sub_10001AE28();
  return swift_getOpaqueTypeConformance2(v3, &opaque type descriptor for <<opaque return type of static AppIntent.parameterSummary>>, 1);
}

uint64_t sub_100050E68@<X0>(uint64_t a1@<X8>)
{
  return sub_100052180(&qword_1000EC040, (uint64_t (*)(_QWORD))&type metadata accessor for LocalizedStringResource, (uint64_t)qword_1000F0F40, (uint64_t)sub_100050588, a1);
}

uint64_t sub_100050E8C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000556C0();
  return static OpenIntent.openAppWhenRun.getter(a1, v2);
}

uint64_t sub_100050EB4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  if (qword_1000EC048 != -1)
    swift_once(&qword_1000EC048, sub_100050710);
  sub_10000E944(0, &qword_1000EC940, (uint64_t (*)(uint64_t))&type metadata accessor for IntentDescription);
  v3 = sub_10001C86C(v2, (uint64_t)qword_1000F0F58);
  return sub_10005566C(v3, a1);
}

uint64_t sub_100050F20(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  _QWORD *v5;

  v4 = *v1;
  v5 = (_QWORD *)swift_task_alloc(dword_1000EE51C);
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_1000557E8;
  return sub_100050974(a1, v4);
}

uint64_t sub_100050F78@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = sub_1000535FC();
  *a1 = result;
  return result;
}

uint64_t sub_100050F9C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10001AE28();
  return static AppIntent.persistentIdentifier.getter(a1, v2);
}

unint64_t sub_100050FC8()
{
  unint64_t result;

  result = qword_1000EE450;
  if (!qword_1000EE450)
  {
    result = swift_getWitnessTable(&unk_1000B30E8, &type metadata for HealthDataTypeEntity.AvailableHealthDataTypesQuery);
    atomic_store(result, (unint64_t *)&qword_1000EE450);
  }
  return result;
}

uint64_t sub_10005100C()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(_QWORD, uint64_t, uint64_t, uint64_t);
  uint64_t v19;
  _QWORD v21[2];

  v0 = type metadata accessor for String.LocalizationValue(0);
  __chkstk_darwin(v0);
  v2 = (char *)v21 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000E944(0, &qword_1000EC948, (uint64_t (*)(uint64_t))&type metadata accessor for LocalizedStringResource);
  __chkstk_darwin(v3);
  v21[0] = (char *)v21 - v4;
  v5 = type metadata accessor for LocalizedStringResource.BundleDescription(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for Locale(0);
  __chkstk_darwin(v9);
  v11 = (char *)v21 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for LocalizedStringResource(0);
  v13 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v15 = (char *)v21 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for TypeDisplayRepresentation(0);
  sub_10001C884(v16, qword_1000F0F70);
  sub_10001C86C(v16, (uint64_t)qword_1000F0F70);
  v17 = String.LocalizationValue.init(stringLiteral:)(0x7079542061746144, 0xE900000000000065);
  static Locale.current.getter(v17);
  (*(void (**)(char *, _QWORD, uint64_t))(v6 + 104))(v8, enum case for LocalizedStringResource.BundleDescription.main(_:), v5);
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v2, 0x6E65746E49707041, 0xEA00000000007374, v11, v8, 0, 0, 256);
  v18 = *(void (**)(_QWORD, uint64_t, uint64_t, uint64_t))(v13 + 56);
  v19 = v21[0];
  v18(v21[0], 1, 1, v12);
  return TypeDisplayRepresentation.init(name:numericFormat:)(v15, v19);
}

uint64_t sub_10005123C@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  id v21;
  id v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  id v26;
  id v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  id v37;
  uint64_t v38;
  char *v39;
  char *v40;
  id v41;
  id v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  char *v52;
  char *v53;
  uint64_t v54;

  v54 = a2;
  sub_10000E944(0, &qword_1000EE4F0, (uint64_t (*)(uint64_t))&type metadata accessor for DisplayRepresentation.Image);
  __chkstk_darwin(v3);
  v53 = (char *)&v48 - v4;
  sub_10000E944(0, &qword_1000EC948, (uint64_t (*)(uint64_t))&type metadata accessor for LocalizedStringResource);
  __chkstk_darwin(v5);
  v52 = (char *)&v48 - v6;
  v7 = type metadata accessor for Locale(0);
  __chkstk_darwin(v7);
  v9 = (char *)&v48 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for LocalizedStringResource.BundleDescription(0);
  v48 = *(_QWORD *)(v10 - 8);
  v49 = v10;
  __chkstk_darwin(v10);
  v12 = (uint64_t *)((char *)&v48 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  v13 = type metadata accessor for String.LocalizationValue(0);
  __chkstk_darwin(v13);
  v15 = (char *)&v48 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v51 = type metadata accessor for LocalizedStringResource(0);
  v16 = *(_QWORD *)(v51 - 8);
  v17 = __chkstk_darwin(v51);
  v50 = (char *)&v48 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  v20 = (char *)&v48 - v19;
  v21 = objc_msgSend(a1, "localization");
  v22 = objc_msgSend(v21, "displayNameKey");

  v23 = static String._unconditionallyBridgeFromObjectiveC(_:)(v22);
  v25 = v24;

  String.LocalizationValue.init(_:)(v23, v25);
  v26 = objc_msgSend(a1, "localization");
  v27 = objc_msgSend(v26, "localizationTableNameOverride");

  v28 = static String._unconditionallyBridgeFromObjectiveC(_:)(v27);
  v30 = v29;

  v31 = String.nonEmptyOrNil.getter(v28, v30);
  v33 = v32;
  swift_bridgeObjectRelease(v30);
  if (!v33)
  {
    v31 = static String._unconditionallyBridgeFromObjectiveC(_:)(HKHealthKitDataTypeStringsTableName);
    v33 = v34;
  }
  *v12 = sub_100006D10(0, &qword_1000EE830, HKHealthStore_ptr);
  v35 = (*(uint64_t (**)(uint64_t *, _QWORD, uint64_t))(v48 + 104))(v12, enum case for LocalizedStringResource.BundleDescription.forClass(_:), v49);
  static Locale.current.getter(v35);
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v15, v31, v33, v9, v12, 0, 0, 256);
  v36 = a1;
  v37 = objc_msgSend(a1, "objectType");
  objc_msgSend(v37, "code");

  v39 = v50;
  v38 = v51;
  (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v50, v20, v51);
  v40 = v52;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v16 + 56))(v52, 1, 1, v38);
  v41 = objc_msgSend(v36, "displayCategory");
  v42 = objc_msgSend(v41, "systemImageName");

  v43 = static String._unconditionallyBridgeFromObjectiveC(_:)(v42);
  v45 = v44;

  v46 = v53;
  DisplayRepresentation.Image.init(systemName:tintColor:symbolConfiguration:)(v43, v45, 0, 0);
  DisplayRepresentation.init(title:subtitle:image:synonyms:)(v39, v40, v46, _swiftEmptyArrayStorage);
  return (*(uint64_t (**)(char *, uint64_t))(v16 + 8))(v20, v38);
}

uint64_t sub_100051644()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  _OWORD v7[2];
  uint64_t v8;

  sub_10005233C(0);
  v0 = type metadata accessor for AppDependencyManager(0);
  memset(v7, 0, sizeof(v7));
  v8 = 0;
  v5 = static AppDependencyManager.shared.getter(v0, v1, v2, v3, v4);
  result = AppDependency.__allocating_init(key:manager:)(v7, v5);
  qword_1000F0F88 = result;
  return result;
}

_QWORD *sub_1000516A4()
{
  void *v0;
  void *v1;
  id v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *result;
  uint64_t v19;

  v0 = (void *)objc_opt_self(HKDisplayTypeController);
  AppDependency.wrappedValue.getter(&v19, v0);
  v1 = (void *)v19;
  v2 = objc_msgSend(v0, "sharedInstanceForHealthStore:", v19);

  if (!v2)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  v3 = objc_msgSend(v2, "allDisplayTypes");

  if (v3)
  {
    v4 = sub_100006D10(0, &qword_1000EE500, HKDisplayType_ptr);
    v5 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v3, v4);

    v6 = (unint64_t)sub_100054A10(v5);
    swift_bridgeObjectRelease(v5);
    if ((v6 & 0x8000000000000000) != 0 || (v6 & 0x4000000000000000) != 0)
    {
      v16 = swift_bridgeObjectRetain(v6);
      v7 = (uint64_t)sub_1000789F0(v16);
      swift_bridgeObjectRelease(v6);
    }
    else
    {
      v7 = v6 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v6);
    }
    v19 = v7;
    sub_1000523A0(&v19);
    swift_bridgeObjectRelease(v6);
    v8 = v19;
    if (v19 < 0 || (v19 & 0x4000000000000000) != 0)
    {
      v17 = swift_bridgeObjectRetain(v19);
      v9 = _CocoaArrayWrapper.endIndex.getter(v17);
      swift_release(v8);
      if (v9)
        goto LABEL_9;
    }
    else
    {
      v9 = *(_QWORD *)(v19 + 16);
      if (v9)
      {
LABEL_9:
        v19 = (uint64_t)_swiftEmptyArrayStorage;
        specialized ContiguousArray.reserveCapacity(_:)(v9);
        if ((v9 & 0x8000000000000000) == 0)
        {
          v10 = 0;
          do
          {
            if ((v8 & 0xC000000000000001) != 0)
              v11 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v10, v8);
            else
              v11 = *(id *)(v8 + 8 * v10 + 32);
            v12 = v11;
            ++v10;
            specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v11);
            v13 = *(_QWORD *)(v19 + 16);
            specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v13);
            v14 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v13, v12);
            specialized ContiguousArray._endMutation()(v14);
          }
          while (v9 != v10);
          v15 = v19;
          swift_release(v8);
          return (_QWORD *)v15;
        }
        __break(1u);
        goto LABEL_21;
      }
    }
    swift_release(v8);
    return _swiftEmptyArrayStorage;
  }
LABEL_22:
  __break(1u);
  result = (_QWORD *)swift_release(v19);
  __break(1u);
  return result;
}

BOOL sub_1000518CC(void **a1, void **a2)
{
  void *v2;
  void *v3;
  id v4;
  id v5;
  char v6;
  id v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  id v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  _QWORD v24[2];
  uint64_t v25;
  uint64_t v26;

  v2 = *a1;
  v3 = *a2;
  sub_100006D10(0, &qword_1000ECAA0, NSObject_ptr);
  v4 = objc_msgSend(v2, "displayCategory");
  v5 = objc_msgSend(v3, "displayCategory");
  v6 = static NSObject.== infix(_:_:)(v4);

  if ((v6 & 1) != 0)
  {
    v7 = objc_msgSend(v2, "localization");
    v8 = objc_msgSend(v7, "displayName");

    v9 = static String._unconditionallyBridgeFromObjectiveC(_:)(v8);
    v11 = v10;

    v25 = v9;
    v26 = v11;
    v12 = objc_msgSend(v3, "localization");
  }
  else
  {
    v13 = objc_msgSend(v2, "displayCategory");
    v14 = objc_msgSend(v13, "displayName");

    v15 = static String._unconditionallyBridgeFromObjectiveC(_:)(v14);
    v11 = v16;

    v25 = v15;
    v26 = v11;
    v12 = objc_msgSend(v3, "displayCategory");
  }
  v17 = objc_msgSend(v12, "displayName");

  v18 = static String._unconditionallyBridgeFromObjectiveC(_:)(v17);
  v20 = v19;

  v24[0] = v18;
  v24[1] = v20;
  v21 = sub_10002D0D0();
  v22 = StringProtocol.localizedStandardCompare<A>(_:)(v24, &type metadata for String, &type metadata for String, v21, v21);
  swift_bridgeObjectRelease(v11);
  swift_bridgeObjectRelease(v20);
  return v22 == -1;
}

uint64_t sub_100051ACC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  _QWORD *v4;
  uint64_t v5;

  v4[2] = a1;
  v4[3] = a2;
  v5 = *v3;
  v4[4] = a3;
  v4[5] = v5;
  return swift_task_switch(sub_100051AEC, 0, 0);
}

uint64_t sub_100051AEC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  __n128 v6;

  v1 = *(_QWORD *)(v0 + 32);
  v2 = *(_QWORD *)(v0 + 40);
  v4 = *(_QWORD **)(v0 + 16);
  v3 = *(_QWORD *)(v0 + 24);
  swift_bridgeObjectRetain(v1);
  v5 = sub_1000550F4(v2, v3, v1);
  v6 = swift_bridgeObjectRelease(v1);
  *v4 = v5;
  return (*(uint64_t (**)(__n128))(v0 + 8))(v6);
}

unint64_t sub_100051B54()
{
  unint64_t result;

  result = qword_1000EE460;
  if (!qword_1000EE460)
  {
    result = swift_getWitnessTable(&unk_1000B3140, &type metadata for HealthDataTypeEntity.AvailableHealthDataTypesQuery);
    atomic_store(result, (unint64_t *)&qword_1000EE460);
  }
  return result;
}

unint64_t sub_100051B9C()
{
  unint64_t result;

  result = qword_1000EE468;
  if (!qword_1000EE468)
  {
    result = swift_getWitnessTable(&unk_1000B31A0, &type metadata for HealthDataTypeEntity.AvailableHealthDataTypesQuery);
    atomic_store(result, (unint64_t *)&qword_1000EE468);
  }
  return result;
}

unint64_t sub_100051BE4()
{
  unint64_t result;

  result = qword_1000EE470[0];
  if (!qword_1000EE470[0])
  {
    result = swift_getWitnessTable(&unk_1000B31E4, &type metadata for HealthDataTypeEntity);
    atomic_store(result, qword_1000EE470);
  }
  return result;
}

uint64_t sub_100051C28@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  _OWORD v9[2];
  uint64_t v10;

  sub_10005233C(0);
  v2 = type metadata accessor for AppDependencyManager(0);
  memset(v9, 0, sizeof(v9));
  v10 = 0;
  v7 = static AppDependencyManager.shared.getter(v2, v3, v4, v5, v6);
  result = AppDependency.__allocating_init(key:manager:)(v9, v7);
  *a1 = result;
  return result;
}

uint64_t sub_100051C90(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;

  v3 = *v1;
  *(_QWORD *)(v2 + 16) = a1;
  *(_QWORD *)(v2 + 24) = v3;
  return swift_task_switch(sub_100051CAC, 0, 0);
}

uint64_t sub_100051CAC()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v3;
  __n128 v4;

  v1 = *(_QWORD **)(v0 + 16);
  v2 = *(_QWORD *)(v0 + 24);
  swift_bridgeObjectRetain(v1);
  v3 = sub_100055364(v2, v1);
  v4 = swift_bridgeObjectRelease(v1);
  return (*(uint64_t (**)(_QWORD *, __n128))(v0 + 8))(v3, v4);
}

uint64_t sub_100051D00(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;

  v3 = *v1;
  *(_QWORD *)(v2 + 16) = a1;
  *(_QWORD *)(v2 + 24) = v3;
  return swift_task_switch(sub_100051D1C, 0, 0);
}

uint64_t sub_100051D1C()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = *(_QWORD **)(v0 + 16);
  *v1 = sub_1000516A4();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

unint64_t sub_100051D58()
{
  unint64_t result;

  result = qword_1000EE488;
  if (!qword_1000EE488)
  {
    result = swift_getWitnessTable(&unk_1000B31C8, &type metadata for HealthDataTypeEntity.AvailableHealthDataTypesQuery);
    atomic_store(result, (unint64_t *)&qword_1000EE488);
  }
  return result;
}

unint64_t sub_100051DA4()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;

  result = qword_1000EE490;
  if (!qword_1000EE490)
  {
    sub_100051E04();
    v2 = v1;
    sub_10001B5E4();
    result = swift_getWitnessTable(&protocol conformance descriptor for <A> [A], v2);
    atomic_store(result, (unint64_t *)&qword_1000EE490);
  }
  return result;
}

void sub_100051E04()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1000EE498[0])
  {
    v0 = type metadata accessor for Array(0, &type metadata for HealthDataTypeEntity);
    if (!v1)
      atomic_store(v0, qword_1000EE498);
  }
}

uint64_t sub_100051E58(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;
  unint64_t v6;

  v5 = (_QWORD *)swift_task_alloc(async function pointer to EntityQuery.results()[1]);
  *(_QWORD *)(v2 + 16) = v5;
  v6 = sub_100050FC8();
  *v5 = v2;
  v5[1] = sub_10001C2DC;
  return EntityQuery.results()(a1, a2, v6);
}

uint64_t sub_100051EC4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v7;

  v7 = (_QWORD *)swift_task_alloc(async function pointer to DynamicOptionsProvider.defaultResult()[1]);
  *(_QWORD *)(v3 + 16) = v7;
  *v7 = v3;
  v7[1] = sub_10001C2DC;
  return DynamicOptionsProvider.defaultResult()(a1, a2, a3);
}

unint64_t sub_100051F3C()
{
  unint64_t result;

  result = qword_1000EE4B0;
  if (!qword_1000EE4B0)
  {
    result = swift_getWitnessTable(&unk_1000B3274, &type metadata for HealthDataTypeEntity);
    atomic_store(result, (unint64_t *)&qword_1000EE4B0);
  }
  return result;
}

unint64_t sub_100051F84()
{
  unint64_t result;

  result = qword_1000EE4B8;
  if (!qword_1000EE4B8)
  {
    result = swift_getWitnessTable(&unk_1000B32A4, &type metadata for HealthDataTypeEntity);
    atomic_store(result, (unint64_t *)&qword_1000EE4B8);
  }
  return result;
}

void *sub_100051FC8()
{
  return &protocol witness table for String;
}

uint64_t sub_100051FD4@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v2;

  if (qword_1000EC058 != -1)
    swift_once(&qword_1000EC058, sub_100051644);
  v2 = qword_1000F0F88;
  *a1 = qword_1000F0F88;
  return swift_retain(v2);
}

unint64_t sub_100052028()
{
  unint64_t result;

  result = qword_1000EE4C0;
  if (!qword_1000EE4C0)
  {
    result = swift_getWitnessTable(&unk_1000B32DC, &type metadata for HealthDataTypeEntity);
    atomic_store(result, (unint64_t *)&qword_1000EE4C0);
  }
  return result;
}

unint64_t sub_100052070()
{
  unint64_t result;

  result = qword_1000EE4C8;
  if (!qword_1000EE4C8)
  {
    result = swift_getWitnessTable(&unk_1000B3304, &type metadata for HealthDataTypeEntity);
    atomic_store(result, (unint64_t *)&qword_1000EE4C8);
  }
  return result;
}

unint64_t sub_1000520B8()
{
  unint64_t result;

  result = qword_1000EE4D0;
  if (!qword_1000EE4D0)
  {
    result = swift_getWitnessTable(&unk_1000B3384, &type metadata for HealthDataTypeEntity);
    atomic_store(result, (unint64_t *)&qword_1000EE4D0);
  }
  return result;
}

void *sub_1000520FC()
{
  return &protocol witness table for String;
}

void sub_100052108(uint64_t *a1@<X8>)
{
  id *v1;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = objc_msgSend(*v1, "displayTypeIdentifierString");
  v4 = static String._unconditionallyBridgeFromObjectiveC(_:)(v3);
  v6 = v5;

  *a1 = v4;
  a1[1] = v6;
}

uint64_t sub_10005215C@<X0>(uint64_t a1@<X8>)
{
  return sub_100052180(&qword_1000EC050, (uint64_t (*)(_QWORD))&type metadata accessor for TypeDisplayRepresentation, (uint64_t)qword_1000F0F70, (uint64_t)sub_10005100C, a1);
}

uint64_t sub_100052180@<X0>(_QWORD *a1@<X2>, uint64_t (*a2)(_QWORD)@<X3>, uint64_t a3@<X4>, uint64_t a4@<X5>, uint64_t a5@<X8>)
{
  uint64_t v8;
  uint64_t v9;

  if (*a1 != -1)
    swift_once(a1, a4);
  v8 = a2(0);
  v9 = sub_10001C86C(v8, a3);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(a5, v9, v8);
}

unint64_t sub_1000521F4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000EE4D8;
  if (!qword_1000EE4D8)
  {
    sub_1000555CC(255, &qword_1000EE4E0, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t))&type metadata accessor for EmptyResolverSpecification);
    result = swift_getWitnessTable(&protocol conformance descriptor for EmptyResolverSpecification<A>, v1);
    atomic_store(result, (unint64_t *)&qword_1000EE4D8);
  }
  return result;
}

uint64_t sub_10005224C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100051BE4();
  return static AppEntity.defaultResolverSpecification.getter(a1, v2);
}

unint64_t sub_100052288()
{
  unint64_t result;

  result = qword_1000EE4E8;
  if (!qword_1000EE4E8)
  {
    result = swift_getWitnessTable(&unk_1000B33B4, &type metadata for HealthDataTypeEntity);
    atomic_store(result, (unint64_t *)&qword_1000EE4E8);
  }
  return result;
}

uint64_t sub_1000522CC@<X0>(uint64_t a1@<X8>)
{
  void **v1;

  return sub_10005123C(*v1, a1);
}

uint64_t sub_1000522D4(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000520B8();
  return InstanceDisplayRepresentable.localizedStringResource.getter(a1, v2);
}

ValueMetadata *type metadata accessor for HealthDataTypeEntity.AvailableHealthDataTypesQuery()
{
  return &type metadata for HealthDataTypeEntity.AvailableHealthDataTypesQuery;
}

ValueMetadata *type metadata accessor for HealthDataTypeEntity()
{
  return &type metadata for HealthDataTypeEntity;
}

ValueMetadata *type metadata accessor for OpenDataTypeIntent()
{
  return &type metadata for OpenDataTypeIntent;
}

void sub_10005233C(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_1000EE4F8)
  {
    v2 = sub_100006D10(255, &qword_1000EE830, HKHealthStore_ptr);
    v3 = type metadata accessor for AppDependency(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_1000EE4F8);
  }
}

uint64_t sub_1000523A0(uint64_t *a1)
{
  uint64_t v2;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7[2];

  v2 = *a1;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*a1);
  *a1 = v2;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    v2 = sub_10007C094(v2);
    *a1 = v2;
  }
  v4 = *(_QWORD *)(v2 + 16);
  v7[0] = v2 + 32;
  v7[1] = v4;
  sub_100052418(v7);
  return specialized ContiguousArray._endMutation()(v5);
}

void sub_100052418(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  Swift::Int v4;
  Swift::Int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  Swift::Int v11;
  uint64_t v12;
  char **v13;
  Swift::Int v14;
  Swift::Int v15;
  Swift::Int v16;
  Swift::Int v17;
  void *v18;
  void *v19;
  id v20;
  id *v21;
  id v22;
  id v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  id v27;
  id v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  void *v34;
  id v35;
  id v36;
  id v37;
  id v38;
  id v39;
  id v40;
  void *v41;
  uint64_t v42;
  uint64_t v43;
  id v44;
  id v45;
  void *v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t *v51;
  Swift::Int v52;
  Swift::Int v53;
  uint64_t *v54;
  uint64_t v55;
  Swift::Int v56;
  uint64_t v57;
  uint64_t v58;
  Swift::Int v59;
  void *v60;
  Swift::Int v61;
  uint64_t v62;
  void *v63;
  id v64;
  id v65;
  id v66;
  id v67;
  id v68;
  id v69;
  void *v70;
  uint64_t v71;
  uint64_t v72;
  id v73;
  id v74;
  void *v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  uint64_t v79;
  uint64_t v80;
  id v81;
  char **v82;
  id v83;
  void *v84;
  uint64_t v85;
  uint64_t v86;
  id v87;
  id v88;
  void *v89;
  uint64_t v90;
  uint64_t v91;
  unint64_t v92;
  void *v93;
  unint64_t v94;
  unint64_t v95;
  unint64_t v96;
  char *v97;
  char *v98;
  unint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  char v103;
  char *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  BOOL v110;
  unint64_t v111;
  char *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  char *v117;
  uint64_t v118;
  uint64_t v119;
  BOOL v120;
  uint64_t v121;
  char v122;
  char *v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  BOOL v127;
  uint64_t v128;
  uint64_t v129;
  char *v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  char *v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  unint64_t v138;
  char *v139;
  uint64_t v140;
  char *v141;
  uint64_t v142;
  unint64_t v143;
  char *v144;
  uint64_t v145;
  unint64_t v146;
  uint64_t v147;
  uint64_t v148;
  char *v149;
  unint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t *v153;
  uint64_t v154;
  uint64_t v155;
  Swift::Int v156;
  Swift::Int v157;
  char *v158;
  Swift::Int v159;
  Swift::Int v160;
  uint64_t v161;
  void **__dst;
  _BOOL4 v163;
  uint64_t v164;
  Swift::Int v165;
  Swift::Int v166;
  Swift::Int v167;
  void *v168;
  uint64_t v169;
  void *v170;
  uint64_t v171;
  uint64_t v172;

  v2 = v1;
  v4 = a1[1];
  v5 = _minimumMergeRunLength(_:)(v4);
  if (v5 >= v4)
  {
    if (v4 < 0)
      goto LABEL_140;
    if (v4)
      sub_100052FC4(0, v4, 1, a1);
    return;
  }
  if (v4 >= 0)
    v6 = v4;
  else
    v6 = v4 + 1;
  if (v4 < -1)
    goto LABEL_148;
  v156 = v5;
  v160 = v4;
  v153 = a1;
  if (v4 < 2)
  {
    v10 = (char *)_swiftEmptyArrayStorage;
    v172 = (uint64_t)_swiftEmptyArrayStorage;
    __dst = (void **)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 32);
    if (v4 != 1)
    {
      v96 = _swiftEmptyArrayStorage[2];
LABEL_104:
      if (v96 >= 2)
      {
        v145 = *v153;
        do
        {
          v146 = v96 - 2;
          if (v96 < 2)
            goto LABEL_134;
          if (!v145)
            goto LABEL_147;
          v147 = *(_QWORD *)&v10[16 * v146 + 32];
          v148 = *(_QWORD *)&v10[16 * v96 + 24];
          sub_1000532C8((void **)(v145 + 8 * v147), (void **)(v145 + 8 * *(_QWORD *)&v10[16 * v96 + 16]), v145 + 8 * v148, __dst);
          if (v2)
            break;
          if (v148 < v147)
            goto LABEL_136;
          if ((swift_isUniquelyReferenced_nonNull_native(v10) & 1) == 0)
            v10 = sub_100079EC0((uint64_t)v10);
          if (v146 >= *((_QWORD *)v10 + 2))
            goto LABEL_137;
          v149 = &v10[16 * v146 + 32];
          *(_QWORD *)v149 = v147;
          *((_QWORD *)v149 + 1) = v148;
          v150 = *((_QWORD *)v10 + 2);
          if (v96 > v150)
            goto LABEL_138;
          memmove(&v10[16 * v96 + 16], &v10[16 * v96 + 32], 16 * (v150 - v96));
          *((_QWORD *)v10 + 2) = v150 - 1;
          v96 = v150 - 1;
        }
        while (v150 > 2);
      }
LABEL_115:
      swift_bridgeObjectRelease(v10);
LABEL_116:
      *(_QWORD *)((v172 & 0xFFFFFFFFFFFFF8) + 0x10) = 0;
      specialized Array._endMutation()(v151);
      swift_bridgeObjectRelease(v172);
      return;
    }
  }
  else
  {
    v7 = v6 >> 1;
    v8 = sub_100006D10(0, &qword_1000EE500, HKDisplayType_ptr);
    v9 = static Array._allocateBufferUninitialized(minimumCapacity:)(v7, v8);
    *(_QWORD *)((v9 & 0xFFFFFFFFFFFFFF8) + 0x10) = v7;
    __dst = (void **)((v9 & 0xFFFFFFFFFFFFFF8) + 32);
    v172 = v9;
  }
  v11 = 0;
  v12 = *a1;
  v154 = *a1 + 16;
  v10 = (char *)_swiftEmptyArrayStorage;
  v155 = *a1 - 8;
  v13 = &selRef_shouldShowBuddy;
  v14 = v160;
  v164 = *a1;
  while (1)
  {
    v15 = v11;
    v16 = v11 + 1;
    v159 = v11;
    if (v11 + 1 < v14)
    {
      v170 = *(void **)(v12 + 8 * v16);
      v17 = v11;
      v168 = *(void **)(v12 + 8 * v11);
      v18 = v168;
      v19 = v170;
      v20 = v18;
      v163 = sub_1000518CC(&v170, &v168);
      if (v2)
      {
        swift_bridgeObjectRelease(v10);

        goto LABEL_116;
      }

      v16 = v17 + 2;
      v15 = v17;
      if (v17 + 2 < v160)
      {
        sub_100006D10(0, &qword_1000ECAA0, NSObject_ptr);
        v21 = (id *)(v154 + 8 * v17);
        v158 = v10;
        do
        {
          v165 = v16;
          v34 = *(v21 - 1);
          v35 = *v21;
          v36 = v34;
          v37 = objc_msgSend(v35, "displayCategory");
          v38 = objc_msgSend(v36, "displayCategory");
          LOBYTE(v34) = static NSObject.== infix(_:_:)(v37);

          if ((v34 & 1) != 0)
          {
            v22 = objc_msgSend(v35, "localization");
            v23 = objc_msgSend(v22, "displayName");

            v24 = (void *)static String._unconditionallyBridgeFromObjectiveC(_:)(v23);
            v26 = v25;

            v170 = v24;
            v171 = v26;
            v27 = objc_msgSend(v36, "localization");
            v28 = objc_msgSend(v27, "displayName");

            v29 = (void *)static String._unconditionallyBridgeFromObjectiveC(_:)(v28);
            v31 = v30;

            v168 = v29;
            v169 = v31;
            v32 = sub_10002D0D0();
            v33 = StringProtocol.localizedStandardCompare<A>(_:)(&v168, &type metadata for String, &type metadata for String, v32, v32);

            swift_bridgeObjectRelease(v26);
            swift_bridgeObjectRelease(v31);
            if (((v163 ^ (v33 != -1)) & 1) == 0)
              goto LABEL_21;
          }
          else
          {
            v39 = objc_msgSend(v35, "displayCategory");
            v40 = objc_msgSend(v39, "displayName");

            v41 = (void *)static String._unconditionallyBridgeFromObjectiveC(_:)(v40);
            v43 = v42;

            v170 = v41;
            v171 = v43;
            v44 = objc_msgSend(v36, "displayCategory");
            v45 = objc_msgSend(v44, "displayName");

            v46 = (void *)static String._unconditionallyBridgeFromObjectiveC(_:)(v45);
            v48 = v47;

            v168 = v46;
            v169 = v48;
            v49 = sub_10002D0D0();
            v50 = StringProtocol.localizedStandardCompare<A>(_:)(&v168, &type metadata for String, &type metadata for String, v49, v49);

            swift_bridgeObjectRelease(v43);
            swift_bridgeObjectRelease(v48);
            if (v163 == (v50 != -1))
            {
LABEL_21:
              v10 = v158;
              v13 = &selRef_shouldShowBuddy;
              v16 = v165;
              goto LABEL_23;
            }
          }
          v16 = v165 + 1;
          ++v21;
          v10 = v158;
        }
        while (v160 != v165 + 1);
        v16 = v160;
        v13 = &selRef_shouldShowBuddy;
LABEL_23:
        v15 = v159;
      }
      if (v163)
      {
        if (v16 < v15)
          goto LABEL_143;
        if (v15 < v16)
        {
          v51 = (uint64_t *)(v155 + 8 * v16);
          v52 = v16;
          v53 = v15;
          v54 = (uint64_t *)(v164 + 8 * v15);
          do
          {
            if (v53 != --v52)
            {
              if (!v164)
                goto LABEL_146;
              v55 = *v54;
              *v54 = *v51;
              *v51 = v55;
            }
            ++v53;
            --v51;
            ++v54;
          }
          while (v53 < v52);
        }
      }
    }
    if (v16 < v160)
    {
      if (__OFSUB__(v16, v15))
        goto LABEL_139;
      if (v16 - v15 < v156)
        break;
    }
LABEL_53:
    if (v16 < v15)
      goto LABEL_135;
    v167 = v16;
    if ((swift_isUniquelyReferenced_nonNull_native(v10) & 1) == 0)
      v10 = sub_100079C78(0, *((_QWORD *)v10 + 2) + 1, 1, v10);
    v95 = *((_QWORD *)v10 + 2);
    v94 = *((_QWORD *)v10 + 3);
    v96 = v95 + 1;
    v12 = v164;
    if (v95 >= v94 >> 1)
    {
      v144 = sub_100079C78((char *)(v94 > 1), v95 + 1, 1, v10);
      v12 = v164;
      v10 = v144;
    }
    *((_QWORD *)v10 + 2) = v96;
    v97 = v10 + 32;
    v98 = &v10[16 * v95 + 32];
    *(_QWORD *)v98 = v159;
    *((_QWORD *)v98 + 1) = v167;
    if (v95)
    {
      while (1)
      {
        v99 = v96 - 1;
        if (v96 >= 4)
        {
          v104 = &v97[16 * v96];
          v105 = *((_QWORD *)v104 - 8);
          v106 = *((_QWORD *)v104 - 7);
          v110 = __OFSUB__(v106, v105);
          v107 = v106 - v105;
          if (v110)
            goto LABEL_123;
          v109 = *((_QWORD *)v104 - 6);
          v108 = *((_QWORD *)v104 - 5);
          v110 = __OFSUB__(v108, v109);
          v102 = v108 - v109;
          v103 = v110;
          if (v110)
            goto LABEL_124;
          v111 = v96 - 2;
          v112 = &v97[16 * v96 - 32];
          v114 = *(_QWORD *)v112;
          v113 = *((_QWORD *)v112 + 1);
          v110 = __OFSUB__(v113, v114);
          v115 = v113 - v114;
          if (v110)
            goto LABEL_126;
          v110 = __OFADD__(v102, v115);
          v116 = v102 + v115;
          if (v110)
            goto LABEL_129;
          if (v116 >= v107)
          {
            v134 = &v97[16 * v99];
            v136 = *(_QWORD *)v134;
            v135 = *((_QWORD *)v134 + 1);
            v110 = __OFSUB__(v135, v136);
            v137 = v135 - v136;
            if (v110)
              goto LABEL_133;
            v127 = v102 < v137;
            goto LABEL_90;
          }
        }
        else
        {
          if (v96 != 3)
          {
            v128 = *((_QWORD *)v10 + 4);
            v129 = *((_QWORD *)v10 + 5);
            v110 = __OFSUB__(v129, v128);
            v121 = v129 - v128;
            v122 = v110;
            goto LABEL_84;
          }
          v101 = *((_QWORD *)v10 + 4);
          v100 = *((_QWORD *)v10 + 5);
          v110 = __OFSUB__(v100, v101);
          v102 = v100 - v101;
          v103 = v110;
        }
        if ((v103 & 1) != 0)
          goto LABEL_125;
        v111 = v96 - 2;
        v117 = &v97[16 * v96 - 32];
        v119 = *(_QWORD *)v117;
        v118 = *((_QWORD *)v117 + 1);
        v120 = __OFSUB__(v118, v119);
        v121 = v118 - v119;
        v122 = v120;
        if (v120)
          goto LABEL_128;
        v123 = &v97[16 * v99];
        v125 = *(_QWORD *)v123;
        v124 = *((_QWORD *)v123 + 1);
        v110 = __OFSUB__(v124, v125);
        v126 = v124 - v125;
        if (v110)
          goto LABEL_131;
        if (__OFADD__(v121, v126))
          goto LABEL_132;
        if (v121 + v126 >= v102)
        {
          v127 = v102 < v126;
LABEL_90:
          if (v127)
            v99 = v111;
          goto LABEL_92;
        }
LABEL_84:
        if ((v122 & 1) != 0)
          goto LABEL_127;
        v130 = &v97[16 * v99];
        v132 = *(_QWORD *)v130;
        v131 = *((_QWORD *)v130 + 1);
        v110 = __OFSUB__(v131, v132);
        v133 = v131 - v132;
        if (v110)
          goto LABEL_130;
        if (v133 < v121)
          goto LABEL_101;
LABEL_92:
        v138 = v99 - 1;
        if (v99 - 1 >= v96)
        {
          __break(1u);
LABEL_120:
          __break(1u);
LABEL_121:
          __break(1u);
LABEL_122:
          __break(1u);
LABEL_123:
          __break(1u);
LABEL_124:
          __break(1u);
LABEL_125:
          __break(1u);
LABEL_126:
          __break(1u);
LABEL_127:
          __break(1u);
LABEL_128:
          __break(1u);
LABEL_129:
          __break(1u);
LABEL_130:
          __break(1u);
LABEL_131:
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
LABEL_139:
          __break(1u);
LABEL_140:
          __break(1u);
LABEL_141:
          __break(1u);
          goto LABEL_142;
        }
        if (!v12)
          goto LABEL_145;
        v139 = &v97[16 * v138];
        v140 = *(_QWORD *)v139;
        v141 = &v97[16 * v99];
        v142 = *((_QWORD *)v141 + 1);
        sub_1000532C8((void **)(v12 + 8 * *(_QWORD *)v139), (void **)(v12 + 8 * *(_QWORD *)v141), v12 + 8 * v142, __dst);
        if (v2)
          goto LABEL_115;
        if (v142 < v140)
          goto LABEL_120;
        if (v99 > *((_QWORD *)v10 + 2))
          goto LABEL_121;
        *(_QWORD *)v139 = v140;
        *(_QWORD *)&v97[16 * v138 + 8] = v142;
        v143 = *((_QWORD *)v10 + 2);
        if (v99 >= v143)
          goto LABEL_122;
        v96 = v143 - 1;
        memmove(&v97[16 * v99], v141 + 16, 16 * (v143 - 1 - v99));
        *((_QWORD *)v10 + 2) = v143 - 1;
        v12 = v164;
        if (v143 <= 2)
          goto LABEL_101;
      }
    }
    v96 = 1;
LABEL_101:
    v14 = v160;
    v11 = v167;
    v13 = &selRef_shouldShowBuddy;
    if (v167 >= v160)
      goto LABEL_104;
  }
  v56 = v15 + v156;
  if (__OFADD__(v15, v156))
    goto LABEL_141;
  if (v56 >= v160)
    v56 = v160;
  if (v56 >= v15)
  {
    if (v16 != v56)
    {
      v157 = v56;
      v152 = v2;
      sub_100006D10(0, &qword_1000ECAA0, NSObject_ptr);
      v57 = v164;
      v58 = v155 + 8 * v16;
      do
      {
        v60 = *(void **)(v57 + 8 * v16);
        v61 = v15;
        v161 = v58;
        v62 = v58;
        v166 = v16;
        while (1)
        {
          v63 = *(void **)v62;
          v64 = v60;
          v65 = v63;
          v66 = objc_msgSend(v64, v13[50]);
          v67 = objc_msgSend(v65, v13[50]);
          LOBYTE(v63) = static NSObject.== infix(_:_:)(v66);

          if ((v63 & 1) != 0)
          {
            v68 = objc_msgSend(v64, "localization");
            v69 = objc_msgSend(v68, "displayName");

            v70 = (void *)static String._unconditionallyBridgeFromObjectiveC(_:)(v69);
            v72 = v71;

            v170 = v70;
            v171 = v72;
            v73 = objc_msgSend(v65, "localization");
            v74 = objc_msgSend(v73, "displayName");

            v75 = (void *)static String._unconditionallyBridgeFromObjectiveC(_:)(v74);
            v77 = v76;

            v168 = v75;
            v169 = v77;
            v78 = sub_10002D0D0();
            v79 = StringProtocol.localizedStandardCompare<A>(_:)(&v168, &type metadata for String, &type metadata for String, v78, v78);

            swift_bridgeObjectRelease(v72);
            v80 = v77;
          }
          else
          {
            v81 = objc_msgSend(v64, v13[50]);
            v82 = v13;
            v83 = objc_msgSend(v81, "displayName");

            v84 = (void *)static String._unconditionallyBridgeFromObjectiveC(_:)(v83);
            v86 = v85;

            v170 = v84;
            v171 = v86;
            v87 = objc_msgSend(v65, v82[50]);
            v88 = objc_msgSend(v87, "displayName");

            v89 = (void *)static String._unconditionallyBridgeFromObjectiveC(_:)(v88);
            v91 = v90;

            v168 = v89;
            v169 = v91;
            v92 = sub_10002D0D0();
            v79 = StringProtocol.localizedStandardCompare<A>(_:)(&v168, &type metadata for String, &type metadata for String, v92, v92);

            swift_bridgeObjectRelease(v86);
            v80 = v91;
          }
          swift_bridgeObjectRelease(v80);
          if (v79 != -1)
            break;
          v57 = v164;
          v59 = v166;
          if (!v164)
            goto LABEL_144;
          v93 = *(void **)v62;
          v60 = *(void **)(v62 + 8);
          *(_QWORD *)v62 = v60;
          *(_QWORD *)(v62 + 8) = v93;
          v62 -= 8;
          ++v61;
          v13 = &selRef_shouldShowBuddy;
          if (v166 == v61)
            goto LABEL_43;
        }
        v57 = v164;
        v59 = v166;
        v13 = &selRef_shouldShowBuddy;
LABEL_43:
        v16 = v59 + 1;
        v58 = v161 + 8;
        v15 = v159;
      }
      while (v16 != v157);
      v16 = v157;
      v2 = v152;
    }
    goto LABEL_53;
  }
LABEL_142:
  __break(1u);
LABEL_143:
  __break(1u);
LABEL_144:
  __break(1u);
LABEL_145:
  __break(1u);
LABEL_146:
  __break(1u);
LABEL_147:
  __break(1u);
LABEL_148:
  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Can't construct Array with count < 0", 36, 2, "Swift/Array.swift", 17, 2, 936, 0);
  __break(1u);
}

void sub_100052FC4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char **v7;
  void *v8;
  uint64_t v9;
  void *v10;
  id v11;
  id v12;
  id v13;
  id v14;
  char v15;
  id v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  id v21;
  id v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  id v29;
  id v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  id v34;
  id v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  void *v41;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;

  if (a3 != a2)
  {
    v4 = a3;
    v5 = *a4;
    sub_100006D10(0, &qword_1000ECAA0, NSObject_ptr);
    v45 = v5;
    v6 = v5 + 8 * v4 - 8;
    v7 = &selRef_shouldShowBuddy;
LABEL_5:
    v8 = *(void **)(v45 + 8 * v4);
    v9 = a1;
    v44 = v6;
    v50 = v4;
    while (1)
    {
      v10 = *(void **)v6;
      v11 = v8;
      v12 = v10;
      v13 = objc_msgSend(v11, v7[50]);
      v14 = objc_msgSend(v12, v7[50]);
      v15 = static NSObject.== infix(_:_:)(v13);

      if ((v15 & 1) != 0)
      {
        v16 = objc_msgSend(v11, "localization");
        v17 = objc_msgSend(v16, "displayName");

        v18 = static String._unconditionallyBridgeFromObjectiveC(_:)(v17);
        v20 = v19;

        v48 = v18;
        v49 = v20;
        v21 = objc_msgSend(v12, "localization");
        v22 = objc_msgSend(v21, "displayName");

        v23 = static String._unconditionallyBridgeFromObjectiveC(_:)(v22);
        v25 = v24;

        v46 = v23;
        v47 = v25;
        v26 = sub_10002D0D0();
        v27 = StringProtocol.localizedStandardCompare<A>(_:)(&v46, &type metadata for String, &type metadata for String, v26, v26);

        swift_bridgeObjectRelease(v20);
        v28 = v25;
        v7 = &selRef_shouldShowBuddy;
      }
      else
      {
        v29 = objc_msgSend(v11, v7[50]);
        v30 = objc_msgSend(v29, "displayName");

        v31 = static String._unconditionallyBridgeFromObjectiveC(_:)(v30);
        v33 = v32;

        v48 = v31;
        v49 = v33;
        v34 = objc_msgSend(v12, "displayCategory");
        v35 = objc_msgSend(v34, "displayName");

        v36 = static String._unconditionallyBridgeFromObjectiveC(_:)(v35);
        v38 = v37;

        v7 = &selRef_shouldShowBuddy;
        v46 = v36;
        v47 = v38;
        v39 = sub_10002D0D0();
        v27 = StringProtocol.localizedStandardCompare<A>(_:)(&v46, &type metadata for String, &type metadata for String, v39, v39);

        swift_bridgeObjectRelease(v33);
        v28 = v38;
      }
      swift_bridgeObjectRelease(v28);
      v40 = v50;
      if (v27 != -1)
      {
LABEL_4:
        v4 = v40 + 1;
        v6 = v44 + 8;
        if (v4 == a2)
          return;
        goto LABEL_5;
      }
      if (!v45)
        break;
      v41 = *(void **)v6;
      v8 = *(void **)(v6 + 8);
      *(_QWORD *)v6 = v8;
      *(_QWORD *)(v6 + 8) = v41;
      v6 -= 8;
      if (v40 == ++v9)
        goto LABEL_4;
    }
    __break(1u);
  }
}

uint64_t sub_1000532C8(void **__src, void **a2, unint64_t a3, void **__dst)
{
  void **v5;
  void **v6;
  int64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void **v13;
  void **v14;
  void *v15;
  void *v16;
  id v17;
  BOOL v18;
  BOOL v19;
  void **v20;
  void **v21;
  void **v22;
  void **v23;
  void **v24;
  void *v25;
  void *v26;
  void *v27;
  id v28;
  BOOL v29;
  BOOL v30;
  void **v31;
  void **v32;
  uint64_t result;
  void **v34;
  void **v35;
  uint64_t v36;
  void *v37;
  void *v38;
  void **v39;
  void **v40;
  void **v41;

  v35 = __dst;
  v5 = a2;
  v6 = __src;
  v7 = (char *)a2 - (char *)__src;
  v8 = (char *)a2 - (char *)__src + 7;
  if ((char *)a2 - (char *)__src >= 0)
    v8 = (char *)a2 - (char *)__src;
  v9 = v8 >> 3;
  v10 = a3 - (_QWORD)a2;
  v11 = a3 - (_QWORD)a2 + 7;
  if ((uint64_t)(a3 - (_QWORD)a2) >= 0)
    v11 = a3 - (_QWORD)a2;
  v12 = v11 >> 3;
  v41 = __src;
  v40 = __dst;
  if (v9 >= v11 >> 3)
  {
    if (v10 >= -7)
    {
      if (__dst != a2 || &a2[v12] <= __dst)
      {
        memmove(__dst, a2, 8 * v12);
        __dst = v35;
      }
      v21 = &__dst[v12];
      v39 = v21;
      v41 = v5;
      if (v6 < v5 && v10 >= 8)
      {
        v22 = (void **)(a3 - 8);
        v23 = v5;
        v34 = v6;
        while (1)
        {
          v24 = v21;
          v25 = *--v21;
          v38 = v25;
          v26 = *--v23;
          v37 = v26;
          v27 = v38;
          v28 = v26;
          v29 = sub_1000518CC(&v38, &v37);
          if (v36)
            break;
          v30 = v29;
          v36 = 0;
          v31 = v22 + 1;

          if (v30)
          {
            v32 = v35;
            if (v31 != v5 || v22 >= v5)
              *v22 = *v23;
            v41 = v23;
            v21 = v24;
          }
          else
          {
            v39 = v21;
            v32 = v35;
            if (v31 < v24 || v22 >= v24 || v31 != v24)
              *v22 = *v21;
            v23 = v5;
          }
          if (v23 > v34)
          {
            --v22;
            v5 = v23;
            if (v21 > v32)
              continue;
          }
          goto LABEL_48;
        }

      }
      goto LABEL_48;
    }
  }
  else if (v7 >= -7)
  {
    if (__dst != __src || &__src[v9] <= __dst)
    {
      memmove(__dst, __src, 8 * v9);
      __dst = v35;
    }
    v13 = &__dst[v9];
    v39 = v13;
    if ((unint64_t)v5 < a3 && v7 >= 8)
    {
      while (1)
      {
        v38 = *v5;
        v14 = __dst;
        v37 = *__dst;
        v15 = v37;
        v16 = v38;
        v17 = v15;
        v18 = sub_1000518CC(&v38, &v37);
        if (v36)
          break;
        v19 = v18;

        if (v19)
        {
          v20 = v5 + 1;
          if (v6 < v5 || v6 >= v20 || v6 != v5)
            *v6 = *v5;
          __dst = v14;
        }
        else
        {
          if (v6 != v14)
            *v6 = *v14;
          __dst = v14 + 1;
          v40 = v14 + 1;
          v20 = v5;
        }
        v36 = 0;
        v41 = ++v6;
        if (__dst < v13)
        {
          v5 = v20;
          if ((unint64_t)v20 < a3)
            continue;
        }
        goto LABEL_48;
      }

    }
LABEL_48:
    sub_100079D6C(&v41, &v40, &v39);
    return 1;
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, 2, 1046, 0);
  __break(1u);
  return result;
}

uint64_t sub_1000535FC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  void (*v27)(char *, uint64_t, uint64_t);
  char *v28;
  uint64_t v29;
  uint64_t v30;
  void (*v31)(char *, uint64_t, uint64_t, uint64_t);
  char *v32;
  char *v33;
  char *v34;
  unint64_t v35;
  _QWORD v37[2];
  char *v38;
  char *v39;
  char *v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;

  v0 = type metadata accessor for InputConnectionBehavior(0);
  v42 = *(_QWORD *)(v0 - 8);
  v43 = v0;
  __chkstk_darwin(v0);
  v41 = (char *)v37 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000E944(0, &qword_1000EE508, (uint64_t (*)(uint64_t))&type metadata accessor for IntentDialog);
  v3 = __chkstk_darwin(v2);
  v40 = (char *)v37 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  v39 = (char *)v37 - v5;
  v6 = type metadata accessor for String.LocalizationValue(0);
  v7 = __chkstk_darwin(v6);
  v9 = (char *)v37 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v38 = (char *)v37 - v10;
  sub_10000E944(0, &qword_1000EC948, (uint64_t (*)(uint64_t))&type metadata accessor for LocalizedStringResource);
  __chkstk_darwin(v11);
  v13 = (char *)v37 - v12;
  v14 = type metadata accessor for LocalizedStringResource.BundleDescription(0);
  v15 = *(_QWORD *)(v14 - 8);
  __chkstk_darwin(v14);
  v17 = (char *)v37 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = type metadata accessor for Locale(0);
  __chkstk_darwin(v18);
  v20 = (char *)v37 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = type metadata accessor for LocalizedStringResource(0);
  v22 = *(_QWORD *)(v21 - 8);
  __chkstk_darwin(v21);
  v24 = (char *)v37 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = String.LocalizationValue.init(stringLiteral:)(0x7079542061746144, 0xEE00656761502065);
  static Locale.current.getter(v25);
  v26 = enum case for LocalizedStringResource.BundleDescription.main(_:);
  v27 = *(void (**)(char *, uint64_t, uint64_t))(v15 + 104);
  v27(v17, enum case for LocalizedStringResource.BundleDescription.main(_:), v14);
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v9, 0x6E65746E49707041, 0xEA00000000007374, v20, v17, 0, 0, 256);
  v28 = v38;
  String.LocalizationValue.init(stringLiteral:)(0xD00000000000001FLL, 0x80000001000BAD50);
  sub_1000555CC(0, &qword_1000EE510, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t))&type metadata accessor for IntentParameter);
  v37[1] = v29;
  static Locale.current.getter(v29);
  v27(v17, v26, v14);
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v28, 0x6E65746E49707041, 0xEA00000000007374, v20, v17, 0, 0, 256);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v22 + 56))(v13, 0, 1, v21);
  v44 = 0;
  v30 = type metadata accessor for IntentDialog(0);
  v31 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v30 - 8) + 56);
  v32 = v39;
  v31(v39, 1, 1, v30);
  v33 = v40;
  v31(v40, 1, 1, v30);
  v34 = v41;
  (*(void (**)(char *, _QWORD, uint64_t))(v42 + 104))(v41, enum case for InputConnectionBehavior.default(_:), v43);
  v35 = sub_100051BE4();
  return IntentParameter<>.init(title:description:default:requestValueDialog:requestDisambiguationDialog:inputConnectionBehavior:)(v24, v13, &v44, v32, v33, v34, v35);
}

_QWORD *sub_1000539D8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  char **v7;
  id v8;
  void *v9;
  unint64_t v10;
  id v11;
  unsigned int v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  id v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  _QWORD v31[4];
  _QWORD *v32;

  v32 = _swiftEmptyArrayStorage;
  if ((unint64_t)a1 >> 62)
    goto LABEL_22;
  v4 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain(a3);
  if (v4)
  {
    while (1)
    {
      v5 = 0;
      v6 = a1 & 0xC000000000000001;
      v7 = &selRef_shouldShowBuddy;
      while (v6)
      {
        v8 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v5, a1);
LABEL_9:
        v9 = v8;
        v10 = v5 + 1;
        if (__OFADD__(v5, 1))
          goto LABEL_21;
        swift_bridgeObjectRetain(a3);
        v11 = objc_msgSend(v9, v7[48]);
        v12 = objc_msgSend(v11, "enabled");

        if (v12)
        {
          v13 = objc_msgSend(v9, v7[48]);
          v14 = objc_opt_self(HKSampleType);
          if (swift_dynamicCastObjCClass(v13, v14))
          {

            v13 = objc_msgSend(v9, v7[48]);
            switch((unint64_t)objc_msgSend(v13, "code"))
            {
              case 0uLL:
              case 1uLL:
              case 2uLL:
              case 3uLL:
              case 4uLL:
              case 5uLL:
              case 7uLL:
              case 8uLL:
              case 9uLL:
              case 0xAuLL:
              case 0xCuLL:
              case 0xDuLL:
              case 0xEuLL:
              case 0xFuLL:
              case 0x12uLL:
              case 0x13uLL:
              case 0x14uLL:
              case 0x15uLL:
              case 0x16uLL:
              case 0x17uLL:
              case 0x18uLL:
              case 0x19uLL:
              case 0x1AuLL:
              case 0x1BuLL:
              case 0x1CuLL:
              case 0x1DuLL:
              case 0x1EuLL:
              case 0x1FuLL:
              case 0x20uLL:
              case 0x21uLL:
              case 0x22uLL:
              case 0x23uLL:
              case 0x24uLL:
              case 0x25uLL:
              case 0x26uLL:
              case 0x27uLL:
              case 0x28uLL:
              case 0x29uLL:
              case 0x2AuLL:
              case 0x2BuLL:
              case 0x2CuLL:
              case 0x2DuLL:
              case 0x2EuLL:
              case 0x2FuLL:
              case 0x30uLL:
              case 0x31uLL:
              case 0x32uLL:
              case 0x33uLL:
              case 0x34uLL:
              case 0x35uLL:
              case 0x36uLL:
              case 0x37uLL:
              case 0x38uLL:
              case 0x39uLL:
              case 0x3AuLL:
              case 0x3CuLL:
              case 0x3DuLL:
              case 0x3EuLL:
              case 0x3FuLL:
              case 0x46uLL:
              case 0x47uLL:
              case 0x48uLL:
              case 0x49uLL:
              case 0x4BuLL:
              case 0x4EuLL:
              case 0x4FuLL:
              case 0x50uLL:
              case 0x53uLL:
              case 0x57uLL:
              case 0x59uLL:
              case 0x5AuLL:
              case 0x5BuLL:
              case 0x5CuLL:
              case 0x5FuLL:
              case 0x60uLL:
              case 0x61uLL:
              case 0x63uLL:
              case 0x64uLL:
              case 0x65uLL:
              case 0x6EuLL:
              case 0x6FuLL:
              case 0x71uLL:
              case 0x72uLL:
              case 0x76uLL:
              case 0x7CuLL:
              case 0x7DuLL:
              case 0x89uLL:
              case 0x8AuLL:
              case 0x8BuLL:
              case 0x8CuLL:
              case 0x90uLL:
              case 0x91uLL:
              case 0x93uLL:
              case 0x9CuLL:
              case 0x9DuLL:
              case 0x9EuLL:
              case 0x9FuLL:
              case 0xA0uLL:
              case 0xA1uLL:
              case 0xA2uLL:
              case 0xA3uLL:
              case 0xA4uLL:
              case 0xA5uLL:
              case 0xA6uLL:
              case 0xA7uLL:
              case 0xA8uLL:
              case 0xA9uLL:
              case 0xAAuLL:
              case 0xABuLL:
              case 0xACuLL:
              case 0xADuLL:
              case 0xB2uLL:
              case 0xB3uLL:
              case 0xB6uLL:
              case 0xB7uLL:
              case 0xBAuLL:
              case 0xBBuLL:
              case 0xBCuLL:
              case 0xBDuLL:
              case 0xBFuLL:
              case 0xC0uLL:
              case 0xC1uLL:
              case 0xC2uLL:
              case 0xC3uLL:
              case 0xC4uLL:
              case 0xC7uLL:
              case 0xC9uLL:
              case 0xCAuLL:
              case 0xCBuLL:
              case 0xCCuLL:
              case 0xCDuLL:
              case 0xCEuLL:
              case 0xCFuLL:
              case 0xDCuLL:
              case 0xDDuLL:
              case 0xDEuLL:
              case 0xDFuLL:
              case 0xE0uLL:
              case 0xE1uLL:
              case 0xE2uLL:
              case 0xE5uLL:
              case 0xE6uLL:
              case 0xE7uLL:
              case 0xE8uLL:
              case 0xE9uLL:
              case 0xEAuLL:
              case 0xEBuLL:
              case 0xECuLL:
              case 0xEDuLL:
              case 0xF0uLL:
              case 0xF1uLL:
              case 0xF2uLL:
              case 0xF3uLL:
              case 0xF4uLL:
              case 0xF8uLL:
              case 0xF9uLL:
              case 0xFAuLL:
              case 0xFBuLL:
              case 0x100uLL:
              case 0x101uLL:
              case 0x102uLL:
              case 0x103uLL:
              case 0x104uLL:
              case 0x106uLL:
              case 0x107uLL:
              case 0x108uLL:
              case 0x109uLL:
              case 0x10AuLL:
              case 0x10DuLL:
              case 0x10EuLL:
              case 0x110uLL:
              case 0x112uLL:
              case 0x113uLL:
              case 0x114uLL:
              case 0x115uLL:
              case 0x117uLL:
              case 0x118uLL:
              case 0x119uLL:
              case 0x11AuLL:
              case 0x11BuLL:
              case 0x11CuLL:
              case 0x11EuLL:
              case 0x11FuLL:
              case 0x120uLL:
              case 0x126uLL:
              case 0x127uLL:
              case 0x128uLL:
              case 0x129uLL:
              case 0x12DuLL:
              case 0x12EuLL:
              case 0x12FuLL:
              case 0x131uLL:
              case 0x139uLL:
              case 0x13AuLL:
                v15 = v4;
                v16 = v6;

                v17 = objc_msgSend(v9, "localization");
                v18 = objc_msgSend(v17, "displayName");

                v19 = static String._unconditionallyBridgeFromObjectiveC(_:)(v18);
                v21 = v20;

                v31[2] = v19;
                v31[3] = v21;
                v31[0] = a2;
                v31[1] = a3;
                v22 = sub_10002D0D0();
                LOBYTE(v19) = StringProtocol.localizedStandardContains<A>(_:)(v31, &type metadata for String, &type metadata for String, v22, v22);
                swift_bridgeObjectRelease(a3);
                swift_bridgeObjectRelease(v21);
                if ((v19 & 1) != 0)
                {
                  specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v23);
                  v24 = v32[2];
                  specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v24);
                  v25 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v24, v9);
                  specialized ContiguousArray._endMutation()(v25);
                }
                else
                {

                }
                v6 = v16;
                v4 = v15;
                v7 = &selRef_shouldShowBuddy;
                break;
              default:
                goto LABEL_15;
            }
          }
          else
          {
LABEL_15:

            swift_bridgeObjectRelease(a3);
          }
        }
        else
        {

          swift_bridgeObjectRelease(a3);
        }
        ++v5;
        if (v10 == v4)
        {
          v26 = v32;
          goto LABEL_27;
        }
      }
      if (v5 < *(_QWORD *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10))
        break;
      __break(1u);
LABEL_21:
      __break(1u);
LABEL_22:
      if (a1 < 0)
        v27 = a1;
      else
        v27 = a1 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(a3);
      v4 = _CocoaArrayWrapper.endIndex.getter(v27);
      if (!v4)
        goto LABEL_26;
    }
    v8 = *(id *)(a1 + 8 * v5 + 32);
    goto LABEL_9;
  }
LABEL_26:
  v26 = _swiftEmptyArrayStorage;
LABEL_27:
  swift_bridgeObjectRelease(a3);
  swift_bridgeObjectRelease(a1);
  return v26;
}

_QWORD *sub_1000541C8(unint64_t a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  char **v8;
  id v9;
  void *v10;
  uint64_t v12;
  id v13;
  unsigned int v14;
  id v15;
  uint64_t v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  BOOL v31;
  uint64_t v32;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;

  v3 = a1;
  if (a1 >> 62)
    goto LABEL_37;
  v4 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain(a2);
  while (v4)
  {
    v34 = v3;
    v5 = 0;
    v6 = v3 & 0xC000000000000001;
    v7 = v3 + 32;
    v3 &= 0xFFFFFFFFFFFFFF8uLL;
    v8 = &selRef_shouldShowBuddy;
    v35 = v3;
    v36 = v4;
    v37 = v7;
    v38 = v6;
    while (1)
    {
      if (v38)
      {
        v9 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v5, v34);
        goto LABEL_9;
      }
      if (v5 >= *(_QWORD *)(v3 + 16))
        break;
      v9 = *(id *)(v7 + 8 * v5);
LABEL_9:
      v10 = v9;
      if (__OFADD__(v5++, 1))
        goto LABEL_35;
      v12 = v4;
      swift_bridgeObjectRetain(a2);
      v13 = objc_msgSend(v10, v8[48]);
      v14 = objc_msgSend(v13, "enabled");

      if (v14)
      {
        v15 = objc_msgSend(v10, v8[48]);
        v16 = objc_opt_self(HKSampleType);
        if (!swift_dynamicCastObjCClass(v15, v16))
        {
LABEL_20:

          swift_bridgeObjectRelease(a2);
          goto LABEL_5;
        }

        v15 = objc_msgSend(v10, v8[48]);
        switch((unint64_t)objc_msgSend(v15, "code"))
        {
          case 0uLL:
          case 1uLL:
          case 2uLL:
          case 3uLL:
          case 4uLL:
          case 5uLL:
          case 7uLL:
          case 8uLL:
          case 9uLL:
          case 0xAuLL:
          case 0xCuLL:
          case 0xDuLL:
          case 0xEuLL:
          case 0xFuLL:
          case 0x12uLL:
          case 0x13uLL:
          case 0x14uLL:
          case 0x15uLL:
          case 0x16uLL:
          case 0x17uLL:
          case 0x18uLL:
          case 0x19uLL:
          case 0x1AuLL:
          case 0x1BuLL:
          case 0x1CuLL:
          case 0x1DuLL:
          case 0x1EuLL:
          case 0x1FuLL:
          case 0x20uLL:
          case 0x21uLL:
          case 0x22uLL:
          case 0x23uLL:
          case 0x24uLL:
          case 0x25uLL:
          case 0x26uLL:
          case 0x27uLL:
          case 0x28uLL:
          case 0x29uLL:
          case 0x2AuLL:
          case 0x2BuLL:
          case 0x2CuLL:
          case 0x2DuLL:
          case 0x2EuLL:
          case 0x2FuLL:
          case 0x30uLL:
          case 0x31uLL:
          case 0x32uLL:
          case 0x33uLL:
          case 0x34uLL:
          case 0x35uLL:
          case 0x36uLL:
          case 0x37uLL:
          case 0x38uLL:
          case 0x39uLL:
          case 0x3AuLL:
          case 0x3CuLL:
          case 0x3DuLL:
          case 0x3EuLL:
          case 0x3FuLL:
          case 0x46uLL:
          case 0x47uLL:
          case 0x48uLL:
          case 0x49uLL:
          case 0x4BuLL:
          case 0x4EuLL:
          case 0x4FuLL:
          case 0x50uLL:
          case 0x53uLL:
          case 0x57uLL:
          case 0x59uLL:
          case 0x5AuLL:
          case 0x5BuLL:
          case 0x5CuLL:
          case 0x5FuLL:
          case 0x60uLL:
          case 0x61uLL:
          case 0x63uLL:
          case 0x64uLL:
          case 0x65uLL:
          case 0x6EuLL:
          case 0x6FuLL:
          case 0x71uLL:
          case 0x72uLL:
          case 0x76uLL:
          case 0x7CuLL:
          case 0x7DuLL:
          case 0x89uLL:
          case 0x8AuLL:
          case 0x8BuLL:
          case 0x8CuLL:
          case 0x90uLL:
          case 0x91uLL:
          case 0x93uLL:
          case 0x9CuLL:
          case 0x9DuLL:
          case 0x9EuLL:
          case 0x9FuLL:
          case 0xA0uLL:
          case 0xA1uLL:
          case 0xA2uLL:
          case 0xA3uLL:
          case 0xA4uLL:
          case 0xA5uLL:
          case 0xA6uLL:
          case 0xA7uLL:
          case 0xA8uLL:
          case 0xA9uLL:
          case 0xAAuLL:
          case 0xABuLL:
          case 0xACuLL:
          case 0xADuLL:
          case 0xB2uLL:
          case 0xB3uLL:
          case 0xB6uLL:
          case 0xB7uLL:
          case 0xBAuLL:
          case 0xBBuLL:
          case 0xBCuLL:
          case 0xBDuLL:
          case 0xBFuLL:
          case 0xC0uLL:
          case 0xC1uLL:
          case 0xC2uLL:
          case 0xC3uLL:
          case 0xC4uLL:
          case 0xC7uLL:
          case 0xC9uLL:
          case 0xCAuLL:
          case 0xCBuLL:
          case 0xCCuLL:
          case 0xCDuLL:
          case 0xCEuLL:
          case 0xCFuLL:
          case 0xDCuLL:
          case 0xDDuLL:
          case 0xDEuLL:
          case 0xDFuLL:
          case 0xE0uLL:
          case 0xE1uLL:
          case 0xE2uLL:
          case 0xE5uLL:
          case 0xE6uLL:
          case 0xE7uLL:
          case 0xE8uLL:
          case 0xE9uLL:
          case 0xEAuLL:
          case 0xEBuLL:
          case 0xECuLL:
          case 0xEDuLL:
          case 0xF0uLL:
          case 0xF1uLL:
          case 0xF2uLL:
          case 0xF3uLL:
          case 0xF4uLL:
          case 0xF8uLL:
          case 0xF9uLL:
          case 0xFAuLL:
          case 0xFBuLL:
          case 0x100uLL:
          case 0x101uLL:
          case 0x102uLL:
          case 0x103uLL:
          case 0x104uLL:
          case 0x106uLL:
          case 0x107uLL:
          case 0x108uLL:
          case 0x109uLL:
          case 0x10AuLL:
          case 0x10DuLL:
          case 0x10EuLL:
          case 0x110uLL:
          case 0x112uLL:
          case 0x113uLL:
          case 0x114uLL:
          case 0x115uLL:
          case 0x117uLL:
          case 0x118uLL:
          case 0x119uLL:
          case 0x11AuLL:
          case 0x11BuLL:
          case 0x11CuLL:
          case 0x11EuLL:
          case 0x11FuLL:
          case 0x120uLL:
          case 0x126uLL:
          case 0x127uLL:
          case 0x128uLL:
          case 0x129uLL:
          case 0x12DuLL:
          case 0x12EuLL:
          case 0x12FuLL:
          case 0x131uLL:
          case 0x139uLL:
          case 0x13AuLL:

            v17 = objc_msgSend(v10, "displayTypeIdentifierString");
            v18 = static String._unconditionallyBridgeFromObjectiveC(_:)(v17);
            v20 = v19;

            v21 = a2[2];
            if (!v21)
            {

              swift_bridgeObjectRelease(a2);
              swift_bridgeObjectRelease(v20);
              v7 = v37;
              v8 = &selRef_shouldShowBuddy;
              goto LABEL_5;
            }
            v22 = a2[4];
            v23 = a2[5];
            if (v22 == v18 && v23 == v20
              || (_stringCompareWithSmolCheck(_:_:expecting:)(v22, v23, v18, v20, 0) & 1) != 0)
            {
LABEL_17:
              swift_bridgeObjectRelease(a2);
              v24 = swift_bridgeObjectRelease(v20);
              specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v24);
              v25 = _swiftEmptyArrayStorage[2];
              specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v25);
              v26 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v25, v10);
              specialized ContiguousArray._endMutation()(v26);
            }
            else
            {
              if (v21 != 1)
              {
                v3 = (uint64_t)(a2 + 7);
                v27 = 1;
                do
                {
                  v28 = v27 + 1;
                  if (__OFADD__(v27, 1))
                    goto LABEL_36;
                  v29 = *(_QWORD *)(v3 - 8);
                  v30 = *(_QWORD *)v3;
                  v31 = v29 == v18 && v30 == v20;
                  if (v31 || (_stringCompareWithSmolCheck(_:_:expecting:)(v29, v30, v18, v20, 0) & 1) != 0)
                    goto LABEL_17;
                  v3 += 16;
                  ++v27;
                }
                while (v28 != v21);
              }

              swift_bridgeObjectRelease(a2);
              swift_bridgeObjectRelease(v20);
            }
            v3 = v35;
            v4 = v36;
            v7 = v37;
            v8 = &selRef_shouldShowBuddy;
            if (v5 == v36)
            {
LABEL_33:
              v3 = v34;
              goto LABEL_41;
            }
            break;
          default:
            goto LABEL_20;
        }
      }
      else
      {

        swift_bridgeObjectRelease(a2);
LABEL_5:
        v4 = v12;
        if (v5 == v12)
          goto LABEL_33;
      }
    }
    __break(1u);
LABEL_35:
    __break(1u);
LABEL_36:
    __break(1u);
LABEL_37:
    if (v3 < 0)
      v32 = v3;
    else
      v32 = v3 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a2);
    v4 = _CocoaArrayWrapper.endIndex.getter(v32);
  }
LABEL_41:
  swift_bridgeObjectRelease(a2);
  swift_bridgeObjectRelease(v3);
  return _swiftEmptyArrayStorage;
}

_QWORD *sub_100054A10(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  id v4;
  void *v5;
  unint64_t v6;
  id v7;
  unsigned int v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;

  if ((unint64_t)a1 >> 62)
    goto LABEL_19;
  v2 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (v2)
  {
    while (1)
    {
      v3 = 0;
      while ((a1 & 0xC000000000000001) != 0)
      {
        v4 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v3, a1);
LABEL_9:
        v5 = v4;
        v6 = v3 + 1;
        if (__OFADD__(v3, 1))
          goto LABEL_18;
        v7 = objc_msgSend(v4, "objectType");
        v8 = objc_msgSend(v7, "enabled");

        if (v8)
        {
          v9 = objc_msgSend(v5, "objectType");
          v10 = objc_opt_self(HKSampleType);
          if (swift_dynamicCastObjCClass(v9, v10))
          {

            v9 = objc_msgSend(v5, "objectType");
            switch((unint64_t)objc_msgSend(v9, "code"))
            {
              case 0uLL:
              case 1uLL:
              case 2uLL:
              case 3uLL:
              case 4uLL:
              case 5uLL:
              case 7uLL:
              case 8uLL:
              case 9uLL:
              case 0xAuLL:
              case 0xCuLL:
              case 0xDuLL:
              case 0xEuLL:
              case 0xFuLL:
              case 0x12uLL:
              case 0x13uLL:
              case 0x14uLL:
              case 0x15uLL:
              case 0x16uLL:
              case 0x17uLL:
              case 0x18uLL:
              case 0x19uLL:
              case 0x1AuLL:
              case 0x1BuLL:
              case 0x1CuLL:
              case 0x1DuLL:
              case 0x1EuLL:
              case 0x1FuLL:
              case 0x20uLL:
              case 0x21uLL:
              case 0x22uLL:
              case 0x23uLL:
              case 0x24uLL:
              case 0x25uLL:
              case 0x26uLL:
              case 0x27uLL:
              case 0x28uLL:
              case 0x29uLL:
              case 0x2AuLL:
              case 0x2BuLL:
              case 0x2CuLL:
              case 0x2DuLL:
              case 0x2EuLL:
              case 0x2FuLL:
              case 0x30uLL:
              case 0x31uLL:
              case 0x32uLL:
              case 0x33uLL:
              case 0x34uLL:
              case 0x35uLL:
              case 0x36uLL:
              case 0x37uLL:
              case 0x38uLL:
              case 0x39uLL:
              case 0x3AuLL:
              case 0x3CuLL:
              case 0x3DuLL:
              case 0x3EuLL:
              case 0x3FuLL:
              case 0x46uLL:
              case 0x47uLL:
              case 0x48uLL:
              case 0x49uLL:
              case 0x4BuLL:
              case 0x4EuLL:
              case 0x4FuLL:
              case 0x50uLL:
              case 0x53uLL:
              case 0x57uLL:
              case 0x59uLL:
              case 0x5AuLL:
              case 0x5BuLL:
              case 0x5CuLL:
              case 0x5FuLL:
              case 0x60uLL:
              case 0x61uLL:
              case 0x63uLL:
              case 0x64uLL:
              case 0x65uLL:
              case 0x6EuLL:
              case 0x6FuLL:
              case 0x71uLL:
              case 0x72uLL:
              case 0x76uLL:
              case 0x7CuLL:
              case 0x7DuLL:
              case 0x89uLL:
              case 0x8AuLL:
              case 0x8BuLL:
              case 0x8CuLL:
              case 0x90uLL:
              case 0x91uLL:
              case 0x93uLL:
              case 0x9CuLL:
              case 0x9DuLL:
              case 0x9EuLL:
              case 0x9FuLL:
              case 0xA0uLL:
              case 0xA1uLL:
              case 0xA2uLL:
              case 0xA3uLL:
              case 0xA4uLL:
              case 0xA5uLL:
              case 0xA6uLL:
              case 0xA7uLL:
              case 0xA8uLL:
              case 0xA9uLL:
              case 0xAAuLL:
              case 0xABuLL:
              case 0xACuLL:
              case 0xADuLL:
              case 0xB2uLL:
              case 0xB3uLL:
              case 0xB6uLL:
              case 0xB7uLL:
              case 0xBAuLL:
              case 0xBBuLL:
              case 0xBCuLL:
              case 0xBDuLL:
              case 0xBFuLL:
              case 0xC0uLL:
              case 0xC1uLL:
              case 0xC2uLL:
              case 0xC3uLL:
              case 0xC4uLL:
              case 0xC7uLL:
              case 0xC9uLL:
              case 0xCAuLL:
              case 0xCBuLL:
              case 0xCCuLL:
              case 0xCDuLL:
              case 0xCEuLL:
              case 0xCFuLL:
              case 0xDCuLL:
              case 0xDDuLL:
              case 0xDEuLL:
              case 0xDFuLL:
              case 0xE0uLL:
              case 0xE1uLL:
              case 0xE2uLL:
              case 0xE5uLL:
              case 0xE6uLL:
              case 0xE7uLL:
              case 0xE8uLL:
              case 0xE9uLL:
              case 0xEAuLL:
              case 0xEBuLL:
              case 0xECuLL:
              case 0xEDuLL:
              case 0xF0uLL:
              case 0xF1uLL:
              case 0xF2uLL:
              case 0xF3uLL:
              case 0xF4uLL:
              case 0xF8uLL:
              case 0xF9uLL:
              case 0xFAuLL:
              case 0xFBuLL:
              case 0x100uLL:
              case 0x101uLL:
              case 0x102uLL:
              case 0x103uLL:
              case 0x104uLL:
              case 0x106uLL:
              case 0x107uLL:
              case 0x108uLL:
              case 0x109uLL:
              case 0x10AuLL:
              case 0x10DuLL:
              case 0x10EuLL:
              case 0x110uLL:
              case 0x112uLL:
              case 0x113uLL:
              case 0x114uLL:
              case 0x115uLL:
              case 0x117uLL:
              case 0x118uLL:
              case 0x119uLL:
              case 0x11AuLL:
              case 0x11BuLL:
              case 0x11CuLL:
              case 0x11EuLL:
              case 0x11FuLL:
              case 0x120uLL:
              case 0x126uLL:
              case 0x127uLL:
              case 0x128uLL:
              case 0x129uLL:
              case 0x12DuLL:
              case 0x12EuLL:
              case 0x12FuLL:
              case 0x131uLL:
              case 0x139uLL:
              case 0x13AuLL:

                specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v11);
                v12 = _swiftEmptyArrayStorage[2];
                specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v12);
                v13 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v12, v5);
                specialized ContiguousArray._endMutation()(v13);
                break;
              default:
                goto LABEL_14;
            }
          }
          else
          {
LABEL_14:

          }
        }
        else
        {

        }
        ++v3;
        if (v6 == v2)
          return _swiftEmptyArrayStorage;
      }
      if (v3 < *(_QWORD *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10))
        break;
      __break(1u);
LABEL_18:
      __break(1u);
LABEL_19:
      if (a1 < 0)
        v15 = a1;
      else
        v15 = a1 & 0xFFFFFFFFFFFFFF8;
      v2 = _CocoaArrayWrapper.endIndex.getter(v15);
      if (!v2)
        return _swiftEmptyArrayStorage;
    }
    v4 = *(id *)(a1 + 8 * v3 + 32);
    goto LABEL_9;
  }
  return _swiftEmptyArrayStorage;
}

_QWORD *sub_1000550F4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v5;
  uint64_t v6;
  void *v7;
  id v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *result;
  uint64_t v25;

  v5 = (void *)objc_opt_self(HKDisplayTypeController);
  v6 = swift_bridgeObjectRetain(a3);
  AppDependency.wrappedValue.getter(&v25, v6);
  v7 = (void *)v25;
  v8 = objc_msgSend(v5, "sharedInstanceForHealthStore:", v25);

  if (!v8)
  {
LABEL_21:
    swift_bridgeObjectRelease(a3);
    __break(1u);
    goto LABEL_22;
  }
  v9 = objc_msgSend(v8, "allDisplayTypes");

  if (v9)
  {
    v10 = sub_100006D10(0, &qword_1000EE500, HKDisplayType_ptr);
    v11 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v9, v10);

    swift_bridgeObjectRetain(a3);
    v12 = (unint64_t)sub_1000539D8(v11, a2, a3);
    swift_bridgeObjectRelease(a3);
    if ((v12 & 0x8000000000000000) != 0 || (v12 & 0x4000000000000000) != 0)
    {
      v22 = swift_bridgeObjectRetain(v12);
      v13 = (uint64_t)sub_1000789F0(v22);
      swift_bridgeObjectRelease(v12);
    }
    else
    {
      v13 = v12 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v12);
    }
    v25 = v13;
    sub_1000523A0(&v25);
    swift_bridgeObjectRelease(v12);
    v14 = v25;
    if (v25 < 0 || (v25 & 0x4000000000000000) != 0)
    {
      v23 = swift_bridgeObjectRetain(v25);
      v15 = _CocoaArrayWrapper.endIndex.getter(v23);
      swift_release(v14);
      if (v15)
        goto LABEL_9;
    }
    else
    {
      v15 = *(_QWORD *)(v25 + 16);
      if (v15)
      {
LABEL_9:
        v25 = (uint64_t)_swiftEmptyArrayStorage;
        specialized ContiguousArray.reserveCapacity(_:)(v15);
        if ((v15 & 0x8000000000000000) == 0)
        {
          v16 = 0;
          do
          {
            if ((v14 & 0xC000000000000001) != 0)
              v17 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v16, v14);
            else
              v17 = *(id *)(v14 + 8 * v16 + 32);
            v18 = v17;
            ++v16;
            specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v17);
            v19 = *(_QWORD *)(v25 + 16);
            specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v19);
            v20 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v19, v18);
            specialized ContiguousArray._endMutation()(v20);
          }
          while (v15 != v16);
          v21 = v25;
          swift_bridgeObjectRelease(a3);
          swift_release(v14);
          return (_QWORD *)v21;
        }
        __break(1u);
        goto LABEL_21;
      }
    }
    swift_bridgeObjectRelease(a3);
    swift_release(v14);
    return _swiftEmptyArrayStorage;
  }
LABEL_22:
  swift_bridgeObjectRelease(a3);
  __break(1u);
  swift_bridgeObjectRelease(a3);
  result = (_QWORD *)swift_release(v25);
  __break(1u);
  return result;
}

_QWORD *sub_100055364(uint64_t a1, _QWORD *a2)
{
  void *v3;
  uint64_t v4;
  void *v5;
  id v6;
  id v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  id v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *result;
  uint64_t v23;

  v3 = (void *)objc_opt_self(HKDisplayTypeController);
  v4 = swift_bridgeObjectRetain(a2);
  AppDependency.wrappedValue.getter(&v23, v4);
  v5 = (void *)v23;
  v6 = objc_msgSend(v3, "sharedInstanceForHealthStore:", v23);

  if (!v6)
  {
LABEL_21:
    swift_bridgeObjectRelease(a2);
    __break(1u);
    goto LABEL_22;
  }
  v7 = objc_msgSend(v6, "allDisplayTypes");

  if (v7)
  {
    v8 = sub_100006D10(0, &qword_1000EE500, HKDisplayType_ptr);
    v9 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v7, v8);

    swift_bridgeObjectRetain(a2);
    v10 = (unint64_t)sub_1000541C8(v9, a2);
    swift_bridgeObjectRelease(a2);
    if ((v10 & 0x8000000000000000) != 0 || (v10 & 0x4000000000000000) != 0)
    {
      v20 = swift_bridgeObjectRetain(v10);
      v11 = (uint64_t)sub_1000789F0(v20);
      swift_bridgeObjectRelease(v10);
    }
    else
    {
      v11 = v10 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v10);
    }
    v23 = v11;
    sub_1000523A0(&v23);
    swift_bridgeObjectRelease(v10);
    v12 = v23;
    if (v23 < 0 || (v23 & 0x4000000000000000) != 0)
    {
      v21 = swift_bridgeObjectRetain(v23);
      v13 = _CocoaArrayWrapper.endIndex.getter(v21);
      swift_release(v12);
      if (v13)
        goto LABEL_9;
    }
    else
    {
      v13 = *(_QWORD *)(v23 + 16);
      if (v13)
      {
LABEL_9:
        v23 = (uint64_t)_swiftEmptyArrayStorage;
        specialized ContiguousArray.reserveCapacity(_:)(v13);
        if ((v13 & 0x8000000000000000) == 0)
        {
          v14 = 0;
          do
          {
            if ((v12 & 0xC000000000000001) != 0)
              v15 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v14, v12);
            else
              v15 = *(id *)(v12 + 8 * v14 + 32);
            v16 = v15;
            ++v14;
            specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v15);
            v17 = *(_QWORD *)(v23 + 16);
            specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v17);
            v18 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v17, v16);
            specialized ContiguousArray._endMutation()(v18);
          }
          while (v13 != v14);
          v19 = v23;
          swift_bridgeObjectRelease(a2);
          swift_release(v12);
          return (_QWORD *)v19;
        }
        __break(1u);
        goto LABEL_21;
      }
    }
    swift_bridgeObjectRelease(a2);
    swift_release(v12);
    return _swiftEmptyArrayStorage;
  }
LABEL_22:
  swift_bridgeObjectRelease(a2);
  __break(1u);
  swift_bridgeObjectRelease(a2);
  result = (_QWORD *)swift_release(v23);
  __break(1u);
  return result;
}

void sub_1000555CC(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, ValueMetadata *, unint64_t))
{
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;

  if (!*a2)
  {
    v6 = sub_10001B5E4();
    v7 = a3(a1, &type metadata for HealthDataTypeEntity, v6);
    if (!v8)
      atomic_store(v7, a2);
  }
}

unint64_t sub_100055628()
{
  unint64_t result;

  result = qword_1000EE520;
  if (!qword_1000EE520)
  {
    result = swift_getWitnessTable(&unk_1000B34BC, &type metadata for DataTypeIntentError);
    atomic_store(result, (unint64_t *)&qword_1000EE520);
  }
  return result;
}

uint64_t sub_10005566C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_10000E944(0, &qword_1000EC940, (uint64_t (*)(uint64_t))&type metadata accessor for IntentDescription);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

unint64_t sub_1000556C0()
{
  unint64_t result;

  result = qword_1000EE528;
  if (!qword_1000EE528)
  {
    result = swift_getWitnessTable(&unk_1000B2F6C, &type metadata for OpenDataTypeIntent);
    atomic_store(result, (unint64_t *)&qword_1000EE528);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for DataTypeIntentError(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_100055744 + 4 * byte_1000B2F60[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_100055764 + 4 * byte_1000B2F65[v4]))();
}

_BYTE *sub_100055744(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_100055764(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_10005576C(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_100055774(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_10005577C(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_100055784(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for DataTypeIntentError()
{
  return &type metadata for DataTypeIntentError;
}

unint64_t sub_1000557A4()
{
  unint64_t result;

  result = qword_1000EE530;
  if (!qword_1000EE530)
  {
    result = swift_getWitnessTable(&unk_1000B3494, &type metadata for DataTypeIntentError);
    atomic_store(result, (unint64_t *)&qword_1000EE530);
  }
  return result;
}

unint64_t sub_1000557F0()
{
  unint64_t result;

  result = qword_1000EE538;
  if (!qword_1000EE538)
  {
    result = swift_getWitnessTable(&unk_1000B355C, &type metadata for OpenCategoryIntent);
    atomic_store(result, (unint64_t *)&qword_1000EE538);
  }
  return result;
}

unint64_t sub_100055838()
{
  unint64_t result;

  result = qword_1000EE540;
  if (!qword_1000EE540)
  {
    result = swift_getWitnessTable(&unk_1000B37DC, &type metadata for HealthCategoryEntity);
    atomic_store(result, (unint64_t *)&qword_1000EE540);
  }
  return result;
}

_QWORD *sub_10005587C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  id v4;
  void *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;

  if ((unint64_t)a1 >> 62)
    goto LABEL_19;
  v2 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain(a1);
  for (; v2; v2 = _CocoaArrayWrapper.endIndex.getter(v12))
  {
    v3 = 4;
    while (1)
    {
      v4 = (a1 & 0xC000000000000001) != 0
         ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v3 - 4, a1)
         : *(id *)(a1 + 8 * v3);
      v5 = v4;
      v6 = v3 - 3;
      if (__OFADD__(v3 - 4, 1))
        break;
      v7 = (unint64_t)objc_msgSend(v4, "categoryID");
      if (v7 > 0x1F || ((1 << v7) & 0x84807D76) == 0)
      {

      }
      else
      {
        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v7);
        v10 = _swiftEmptyArrayStorage[2];
        v9 = _swiftEmptyArrayStorage[3];
        if (v10 >= v9 >> 1)
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v9 > 1, v10 + 1, 1);
        v11 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v10, v5);
        specialized Array._endMutation()(v11);
      }
      ++v3;
      if (v6 == v2)
        goto LABEL_23;
    }
    __break(1u);
LABEL_19:
    if (a1 < 0)
      v12 = a1;
    else
      v12 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
  }
LABEL_23:
  swift_bridgeObjectRelease(a1);
  return _swiftEmptyArrayStorage;
}

uint64_t sub_100055A08(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t *v11;
  uint64_t i;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;

  v3 = a3[2];
  if (!v3)
    return 0;
  v7 = a3[4];
  v8 = a3[5];
  if (v7 == a1 && v8 == a2)
    return 1;
  result = _stringCompareWithSmolCheck(_:_:expecting:)(v7, v8, a1, a2, 0);
  if ((result & 1) != 0)
    return 1;
  if (v3 == 1)
    return 0;
  v11 = a3 + 7;
  for (i = 1; ; ++i)
  {
    v13 = i + 1;
    if (__OFADD__(i, 1))
      break;
    v14 = *(v11 - 1);
    v15 = *v11;
    v16 = v14 == a1 && v15 == a2;
    if (v16 || (_stringCompareWithSmolCheck(_:_:expecting:)(v14, v15, a1, a2, 0) & 1) != 0)
      return 1;
    result = 0;
    v11 += 2;
    if (v13 == v3)
      return result;
  }
  __break(1u);
  return result;
}

uint64_t sub_100055ACC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _BYTE *v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE v13[16];

  v0 = type metadata accessor for LocalizedStringResource.BundleDescription(0);
  v1 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin(v0);
  v3 = &v13[-((v2 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v4 = type metadata accessor for Locale(0);
  __chkstk_darwin(v4);
  v6 = &v13[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v7 = type metadata accessor for String.LocalizationValue(0);
  __chkstk_darwin(v7);
  v9 = &v13[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v10 = type metadata accessor for LocalizedStringResource(0);
  sub_10001C884(v10, qword_1000F0F90);
  sub_10001C86C(v10, (uint64_t)qword_1000F0F90);
  v11 = String.LocalizationValue.init(stringLiteral:)(0xD000000000000014, 0x80000001000BAEE0);
  static Locale.current.getter(v11);
  (*(void (**)(_BYTE *, _QWORD, uint64_t))(v1 + 104))(v3, enum case for LocalizedStringResource.BundleDescription.main(_:), v0);
  return LocalizedStringResource.init(_:table:locale:bundle:comment:)(v9, 0x6E65746E49707041, 0xEA00000000007374, v6, v3, 0, 0, 256);
}

uint64_t sub_100055C4C()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD v22[2];

  sub_10000E944(0, &qword_1000EC948, (uint64_t (*)(uint64_t))&type metadata accessor for LocalizedStringResource);
  __chkstk_darwin(v0);
  v2 = (char *)v22 - v1;
  v22[0] = type metadata accessor for LocalizedStringResource.BundleDescription(0);
  v3 = *(_QWORD *)(v22[0] - 8);
  __chkstk_darwin(v22[0]);
  v5 = (char *)v22 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for Locale(0);
  __chkstk_darwin(v6);
  v8 = (char *)v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for String.LocalizationValue(0);
  __chkstk_darwin(v9);
  v11 = (char *)v22 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for LocalizedStringResource(0);
  v13 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v15 = (char *)v22 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000E944(0, &qword_1000EC940, (uint64_t (*)(uint64_t))&type metadata accessor for IntentDescription);
  v17 = v16;
  sub_10001C884(v16, qword_1000F0FA8);
  v18 = sub_10001C86C(v17, (uint64_t)qword_1000F0FA8);
  v19 = String.LocalizationValue.init(stringLiteral:)(0xD00000000000008FLL, 0x80000001000BAE50);
  static Locale.current.getter(v19);
  (*(void (**)(char *, _QWORD, _QWORD))(v3 + 104))(v5, enum case for LocalizedStringResource.BundleDescription.main(_:), v22[0]);
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v11, 0x6E65746E49707041, 0xEA00000000007374, v8, v5, 0, 0, 256);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v13 + 56))(v2, 1, 1, v12);
  IntentDescription.init(_:categoryName:searchKeywords:)(v15, v2, _swiftEmptyArrayStorage);
  v20 = type metadata accessor for IntentDescription(0);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 56))(v18, 0, 1, v20);
}

uint64_t sub_100055EB0(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2[3] = a1;
  v2[4] = a2;
  sub_10000E944(0, (unint64_t *)&unk_1000ECA90, (uint64_t (*)(uint64_t))&type metadata accessor for URL);
  v2[5] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v3 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for URL(0);
  v2[6] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v2[7] = v5;
  v2[8] = swift_task_alloc((*(_QWORD *)(v5 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_100055F40, 0, 0);
}

id sub_100055F40()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t (*v10)(void);
  id result;
  NSURL *v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  void *v19;
  unint64_t v20;
  Class isa;
  uint64_t v22;

  v1 = v0[6];
  v2 = v0[7];
  v3 = v0[5];
  IntentParameter.wrappedValue.getter(v0 + 2);
  v4 = (void *)v0[2];
  sub_10006D168(v3);

  v5 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v3, 1, v1);
  v6 = v0[8];
  if (v5 == 1)
  {
    v7 = v0[5];
    sub_10001C7DC(v7);
    v8 = sub_100058B9C();
    v9 = swift_allocError(&type metadata for CategoryIntentError, v8, 0, 0);
    swift_willThrow(v9);
    swift_task_dealloc(v6);
    swift_task_dealloc(v7);
    v10 = (uint64_t (*)(void))v0[1];
    return (id)v10();
  }
  (*(void (**)(_QWORD, _QWORD, _QWORD))(v0[7] + 32))(v0[8], v0[5], v0[6]);
  result = objc_msgSend((id)objc_opt_self(LSApplicationWorkspace), "defaultWorkspace");
  if (result)
  {
    v13 = result;
    v15 = v0[7];
    v14 = v0[8];
    v16 = v0[5];
    v17 = v0[6];
    URL._bridgeToObjectiveC()(v12);
    v19 = v18;
    v20 = sub_10007C1F8((uint64_t)_swiftEmptyArrayStorage);
    isa = Dictionary._bridgeToObjectiveC()().super.isa;
    objc_msgSend(v13, "openSensitiveURL:withOptions:", v19, isa, swift_bridgeObjectRelease(v20).n128_f64[0]);

    static IntentResult.result<>()(v22);
    (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v14, v17);
    swift_task_dealloc(v14);
    swift_task_dealloc(v16);
    v10 = (uint64_t (*)(void))v0[1];
    return (id)v10();
  }
  __break(1u);
  return result;
}

unint64_t sub_100056100()
{
  unint64_t result;

  result = qword_1000EE548;
  if (!qword_1000EE548)
  {
    result = swift_getWitnessTable(&unk_1000B3614, &type metadata for OpenCategoryIntent);
    atomic_store(result, (unint64_t *)&qword_1000EE548);
  }
  return result;
}

unint64_t sub_100056148()
{
  unint64_t result;

  result = qword_1000EE550;
  if (!qword_1000EE550)
  {
    result = swift_getWitnessTable(&unk_1000B363C, &type metadata for OpenCategoryIntent);
    atomic_store(result, (unint64_t *)&qword_1000EE550);
  }
  return result;
}

uint64_t sub_10005618C(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_1000C11E0, 1);
}

uint64_t sub_10005619C(uint64_t a1, uint64_t a2)
{
  _QWORD v3[2];

  v3[0] = a2;
  v3[1] = sub_10001ADE4();
  return swift_getOpaqueTypeConformance2(v3, &opaque type descriptor for <<opaque return type of static AppIntent.parameterSummary>>, 1);
}

uint64_t sub_1000561DC@<X0>(uint64_t a1@<X8>)
{
  return sub_100052180(&qword_1000EC060, (uint64_t (*)(_QWORD))&type metadata accessor for LocalizedStringResource, (uint64_t)qword_1000F0F90, (uint64_t)sub_100055ACC, a1);
}

uint64_t sub_100056200(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100058BE0();
  return static OpenIntent.openAppWhenRun.getter(a1, v2);
}

uint64_t sub_100056228@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  if (qword_1000EC068 != -1)
    swift_once(&qword_1000EC068, sub_100055C4C);
  sub_10000E944(0, &qword_1000EC940, (uint64_t (*)(uint64_t))&type metadata accessor for IntentDescription);
  v3 = sub_10001C86C(v2, (uint64_t)qword_1000F0FA8);
  return sub_10005566C(v3, a1);
}

uint64_t sub_100056294(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  _QWORD *v5;

  v4 = *v1;
  v5 = (_QWORD *)swift_task_alloc(dword_1000EE624);
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_1000557E8;
  return sub_100055EB0(a1, v4);
}

uint64_t sub_1000562EC@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = sub_100058240();
  *a1 = result;
  return result;
}

uint64_t sub_100056310(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10001ADE4();
  return static AppIntent.persistentIdentifier.getter(a1, v2);
}

unint64_t sub_10005633C()
{
  unint64_t result;

  result = qword_1000EE560;
  if (!qword_1000EE560)
  {
    result = swift_getWitnessTable(&unk_1000B3688, &type metadata for HealthCategoryEntity.AvailableHealthCategoriesQuery);
    atomic_store(result, (unint64_t *)&qword_1000EE560);
  }
  return result;
}

uint64_t sub_100056380()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(_QWORD, uint64_t, uint64_t, uint64_t);
  uint64_t v19;
  _QWORD v21[2];

  v0 = type metadata accessor for String.LocalizationValue(0);
  __chkstk_darwin(v0);
  v2 = (char *)v21 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000E944(0, &qword_1000EC948, (uint64_t (*)(uint64_t))&type metadata accessor for LocalizedStringResource);
  __chkstk_darwin(v3);
  v21[0] = (char *)v21 - v4;
  v5 = type metadata accessor for LocalizedStringResource.BundleDescription(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for Locale(0);
  __chkstk_darwin(v9);
  v11 = (char *)v21 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for LocalizedStringResource(0);
  v13 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v15 = (char *)v21 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for TypeDisplayRepresentation(0);
  sub_10001C884(v16, qword_1000F0FC0);
  sub_10001C86C(v16, (uint64_t)qword_1000F0FC0);
  v17 = String.LocalizationValue.init(stringLiteral:)(0x432068746C616548, 0xEF79726F67657461);
  static Locale.current.getter(v17);
  (*(void (**)(char *, _QWORD, uint64_t))(v6 + 104))(v8, enum case for LocalizedStringResource.BundleDescription.main(_:), v5);
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v2, 0x6E65746E49707041, 0xEA00000000007374, v11, v8, 0, 0, 256);
  v18 = *(void (**)(_QWORD, uint64_t, uint64_t, uint64_t))(v13 + 56);
  v19 = v21[0];
  v18(v21[0], 1, 1, v12);
  return TypeDisplayRepresentation.init(name:numericFormat:)(v15, v19);
}

uint64_t sub_1000565B8@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;
  id v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  id v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v35;
  id v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  char *v40;
  uint64_t v41;

  v36 = a1;
  v41 = a2;
  sub_10000E944(0, &qword_1000EE4F0, (uint64_t (*)(uint64_t))&type metadata accessor for DisplayRepresentation.Image);
  __chkstk_darwin(v3);
  v40 = (char *)&v35 - v4;
  sub_10000E944(0, &qword_1000EC948, (uint64_t (*)(uint64_t))&type metadata accessor for LocalizedStringResource);
  __chkstk_darwin(v5);
  v39 = (char *)&v35 - v6;
  v7 = type metadata accessor for Locale(0);
  __chkstk_darwin(v7);
  v9 = (char *)&v35 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for LocalizedStringResource.BundleDescription(0);
  v37 = *(_QWORD *)(v10 - 8);
  v38 = v10;
  __chkstk_darwin(v10);
  v12 = (uint64_t *)((char *)&v35 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  v13 = type metadata accessor for String.LocalizationValue(0);
  __chkstk_darwin(v13);
  v15 = (char *)&v35 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for LocalizedStringResource(0);
  v17 = *(_QWORD *)(v16 - 8);
  v18 = __chkstk_darwin(v16);
  v20 = (char *)&v35 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18);
  v22 = (char *)&v35 - v21;
  v23 = objc_msgSend(a1, "displayName");
  v24 = static String._unconditionallyBridgeFromObjectiveC(_:)(v23);
  v26 = v25;

  String.LocalizationValue.init(_:)(v24, v26);
  *v12 = sub_100006D10(0, &qword_1000ED538, HKDisplayCategory_ptr);
  v27 = (*(uint64_t (**)(uint64_t *, _QWORD, uint64_t))(v37 + 104))(v12, enum case for LocalizedStringResource.BundleDescription.forClass(_:), v38);
  static Locale.current.getter(v27);
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v15, 0xD000000000000014, 0x80000001000BADE0, v9, v12, 0, 0, 256);
  (*(void (**)(char *, char *, uint64_t))(v17 + 16))(v20, v22, v16);
  v28 = v39;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v17 + 56))(v39, 1, 1, v16);
  v29 = objc_msgSend(v36, "systemImageName");
  v30 = static String._unconditionallyBridgeFromObjectiveC(_:)(v29);
  v32 = v31;

  v33 = v40;
  DisplayRepresentation.Image.init(systemName:tintColor:symbolConfiguration:)(v30, v32, 0, 0);
  DisplayRepresentation.init(title:subtitle:image:)(v20, v28, v33);
  return (*(uint64_t (**)(char *, uint64_t))(v17 + 8))(v22, v16);
}

uint64_t sub_1000568D0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  _OWORD v7[2];
  uint64_t v8;

  sub_10005233C(0);
  v0 = type metadata accessor for AppDependencyManager(0);
  memset(v7, 0, sizeof(v7));
  v8 = 0;
  v5 = static AppDependencyManager.shared.getter(v0, v1, v2, v3, v4);
  result = AppDependency.__allocating_init(key:manager:)(v7, v5);
  qword_1000F0FD8 = result;
  return result;
}

uint64_t sub_100056930(void *a1, uint64_t a2, uint64_t a3)
{
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  _QWORD v11[4];

  v5 = objc_msgSend(a1, "displayName");
  v6 = static String._unconditionallyBridgeFromObjectiveC(_:)(v5);
  v8 = v7;

  v11[2] = v6;
  v11[3] = v8;
  v11[0] = a2;
  v11[1] = a3;
  v9 = sub_10002D0D0();
  LOBYTE(a3) = StringProtocol.localizedStandardContains<A>(_:)(v11, &type metadata for String, &type metadata for String, v9, v9);
  swift_bridgeObjectRelease(v8);
  return a3 & 1;
}

uint64_t sub_1000569CC(void *a1, _QWORD *a2)
{
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = objc_msgSend(a1, "categoryName");
  v4 = static String._unconditionallyBridgeFromObjectiveC(_:)(v3);
  v6 = v5;

  LOBYTE(a2) = sub_100055A08(v4, v6, a2);
  swift_bridgeObjectRelease(v6);
  return a2 & 1;
}

uint64_t sub_100056A38(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v6;
  uint64_t (*v8)(uint64_t, uint64_t);

  *(_QWORD *)(v3 + 16) = a1;
  v8 = (uint64_t (*)(uint64_t, uint64_t))((char *)&dword_1000EE610 + dword_1000EE610);
  v6 = (_QWORD *)swift_task_alloc(unk_1000EE614);
  *(_QWORD *)(v3 + 24) = v6;
  *v6 = v3;
  v6[1] = sub_100056AA8;
  return v8(a2, a3);
}

uint64_t sub_100056AA8(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = *v2;
  v5 = *(_QWORD *)(*v2 + 24);
  v6 = *v2;
  swift_task_dealloc(v5);
  if (!v1)
    **(_QWORD **)(v4 + 16) = a1;
  return (*(uint64_t (**)(void))(v6 + 8))();
}

unint64_t sub_100056B08()
{
  unint64_t result;

  result = qword_1000EE570;
  if (!qword_1000EE570)
  {
    result = swift_getWitnessTable(&unk_1000B36E0, &type metadata for HealthCategoryEntity.AvailableHealthCategoriesQuery);
    atomic_store(result, (unint64_t *)&qword_1000EE570);
  }
  return result;
}

unint64_t sub_100056B50()
{
  unint64_t result;

  result = qword_1000EE578;
  if (!qword_1000EE578)
  {
    result = swift_getWitnessTable(&unk_1000B3740, &type metadata for HealthCategoryEntity.AvailableHealthCategoriesQuery);
    atomic_store(result, (unint64_t *)&qword_1000EE578);
  }
  return result;
}

unint64_t sub_100056B98()
{
  unint64_t result;

  result = qword_1000EE580[0];
  if (!qword_1000EE580[0])
  {
    result = swift_getWitnessTable(&unk_1000B3784, &type metadata for HealthCategoryEntity);
    atomic_store(result, qword_1000EE580);
  }
  return result;
}

uint64_t sub_100056BDC(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t (*v5)(uint64_t);

  v5 = (uint64_t (*)(uint64_t))((char *)&dword_1000EE608 + dword_1000EE608);
  v3 = (_QWORD *)swift_task_alloc(unk_1000EE60C);
  *(_QWORD *)(v1 + 16) = v3;
  *v3 = v1;
  v3[1] = sub_100056C3C;
  return v5(a1);
}

uint64_t sub_100056C3C(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = *(_QWORD *)(*v2 + 16);
  v5 = *v2;
  v6 = swift_task_dealloc(v4);
  if (!v1)
    v6 = a1;
  return (*(uint64_t (**)(uint64_t))(v5 + 8))(v6);
}

uint64_t sub_100056C90(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t (__cdecl *v4)();

  *(_QWORD *)(v1 + 16) = a1;
  v4 = (uint64_t (__cdecl *)())((char *)&dword_1000EE600 + dword_1000EE600);
  v2 = (_QWORD *)swift_task_alloc(unk_1000EE604);
  *(_QWORD *)(v1 + 24) = v2;
  *v2 = v1;
  v2[1] = sub_100058D08;
  return v4();
}

unint64_t sub_100056CF0()
{
  unint64_t result;

  result = qword_1000EE598;
  if (!qword_1000EE598)
  {
    result = swift_getWitnessTable(&unk_1000B3768, &type metadata for HealthCategoryEntity.AvailableHealthCategoriesQuery);
    atomic_store(result, (unint64_t *)&qword_1000EE598);
  }
  return result;
}

unint64_t sub_100056D3C()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;

  result = qword_1000EE5A0;
  if (!qword_1000EE5A0)
  {
    sub_100056D9C();
    v2 = v1;
    sub_10001B6D8();
    result = swift_getWitnessTable(&protocol conformance descriptor for <A> [A], v2);
    atomic_store(result, (unint64_t *)&qword_1000EE5A0);
  }
  return result;
}

void sub_100056D9C()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1000EE5A8[0])
  {
    v0 = type metadata accessor for Array(0, &type metadata for HealthCategoryEntity);
    if (!v1)
      atomic_store(v0, qword_1000EE5A8);
  }
}

uint64_t sub_100056DF0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;
  unint64_t v6;

  v5 = (_QWORD *)swift_task_alloc(async function pointer to EntityQuery.results()[1]);
  *(_QWORD *)(v2 + 16) = v5;
  v6 = sub_10005633C();
  *v5 = v2;
  v5[1] = sub_10001C2DC;
  return EntityQuery.results()(a1, a2, v6);
}

unint64_t sub_100056E60()
{
  unint64_t result;

  result = qword_1000EE5C0;
  if (!qword_1000EE5C0)
  {
    result = swift_getWitnessTable(&unk_1000B3814, &type metadata for HealthCategoryEntity);
    atomic_store(result, (unint64_t *)&qword_1000EE5C0);
  }
  return result;
}

unint64_t sub_100056EA8()
{
  unint64_t result;

  result = qword_1000EE5C8;
  if (!qword_1000EE5C8)
  {
    result = swift_getWitnessTable(&unk_1000B3844, &type metadata for HealthCategoryEntity);
    atomic_store(result, (unint64_t *)&qword_1000EE5C8);
  }
  return result;
}

uint64_t sub_100056EF0@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v2;

  if (qword_1000EC078 != -1)
    swift_once(&qword_1000EC078, sub_1000568D0);
  v2 = qword_1000F0FD8;
  *a1 = qword_1000F0FD8;
  return swift_retain(v2);
}

unint64_t sub_100056F44()
{
  unint64_t result;

  result = qword_1000EE5D0;
  if (!qword_1000EE5D0)
  {
    result = swift_getWitnessTable(&unk_1000B387C, &type metadata for HealthCategoryEntity);
    atomic_store(result, (unint64_t *)&qword_1000EE5D0);
  }
  return result;
}

unint64_t sub_100056F8C()
{
  unint64_t result;

  result = qword_1000EE5D8;
  if (!qword_1000EE5D8)
  {
    result = swift_getWitnessTable(&unk_1000B38A4, &type metadata for HealthCategoryEntity);
    atomic_store(result, (unint64_t *)&qword_1000EE5D8);
  }
  return result;
}

unint64_t sub_100056FD4()
{
  unint64_t result;

  result = qword_1000EE5E0;
  if (!qword_1000EE5E0)
  {
    result = swift_getWitnessTable(&unk_1000B3924, &type metadata for HealthCategoryEntity);
    atomic_store(result, (unint64_t *)&qword_1000EE5E0);
  }
  return result;
}

void sub_100057018(uint64_t *a1@<X8>)
{
  id *v1;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = objc_msgSend(*v1, "categoryName");
  v4 = static String._unconditionallyBridgeFromObjectiveC(_:)(v3);
  v6 = v5;

  *a1 = v4;
  a1[1] = v6;
}

uint64_t sub_10005706C@<X0>(uint64_t a1@<X8>)
{
  return sub_100052180(&qword_1000EC070, (uint64_t (*)(_QWORD))&type metadata accessor for TypeDisplayRepresentation, (uint64_t)qword_1000F0FC0, (uint64_t)sub_100056380, a1);
}

unint64_t sub_100057094()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000EE5E8;
  if (!qword_1000EE5E8)
  {
    sub_100058B40(255, &qword_1000EE5F0, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t))&type metadata accessor for EmptyResolverSpecification);
    result = swift_getWitnessTable(&protocol conformance descriptor for EmptyResolverSpecification<A>, v1);
    atomic_store(result, (unint64_t *)&qword_1000EE5E8);
  }
  return result;
}

uint64_t sub_1000570EC(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100056B98();
  return static AppEntity.defaultResolverSpecification.getter(a1, v2);
}

unint64_t sub_100057128()
{
  unint64_t result;

  result = qword_1000EE5F8;
  if (!qword_1000EE5F8)
  {
    result = swift_getWitnessTable(&unk_1000B3954, &type metadata for HealthCategoryEntity);
    atomic_store(result, (unint64_t *)&qword_1000EE5F8);
  }
  return result;
}

uint64_t sub_10005716C@<X0>(uint64_t a1@<X8>)
{
  void **v1;

  return sub_1000565B8(*v1, a1);
}

uint64_t sub_100057174(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100056FD4();
  return InstanceDisplayRepresentable.localizedStringResource.getter(a1, v2);
}

ValueMetadata *type metadata accessor for HealthCategoryEntity.AvailableHealthCategoriesQuery()
{
  return &type metadata for HealthCategoryEntity.AvailableHealthCategoriesQuery;
}

ValueMetadata *type metadata accessor for HealthCategoryEntity()
{
  return &type metadata for HealthCategoryEntity;
}

ValueMetadata *type metadata accessor for OpenCategoryIntent()
{
  return &type metadata for OpenCategoryIntent;
}

uint64_t sub_1000571DC(uint64_t *a1)
{
  uint64_t v2;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7[2];

  v2 = *a1;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*a1);
  *a1 = v2;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    v2 = sub_100079EFC(v2);
    *a1 = v2;
  }
  v4 = *(_QWORD *)(v2 + 16);
  v7[0] = v2 + 32;
  v7[1] = v4;
  sub_100057254(v7);
  return specialized ContiguousArray._endMutation()(v5);
}

void sub_100057254(uint64_t *a1)
{
  uint64_t v1;
  uint64_t *v2;
  Swift::Int v3;
  Swift::Int v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  Swift::Int v10;
  Swift::Int v11;
  uint64_t v12;
  char **v13;
  unint64_t v14;
  Swift::Int v15;
  void *v16;
  id v17;
  id v18;
  id v19;
  _BOOL8 v20;
  id v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  id v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  Swift::Int v31;
  Swift::Int v32;
  void *v33;
  id v34;
  id v35;
  _BOOL8 v36;
  id v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  id v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  BOOL v47;
  int v48;
  uint64_t *v49;
  Swift::Int v50;
  Swift::Int v51;
  uint64_t *v52;
  uint64_t v53;
  Swift::Int v54;
  char **v55;
  uint64_t v56;
  void *v57;
  void *v58;
  id v59;
  id v60;
  id v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  id v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  uint64_t v71;
  void *v72;
  unint64_t v73;
  unint64_t v74;
  char *v75;
  char *v76;
  unint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  char v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  BOOL v88;
  unint64_t v89;
  char *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  char *v95;
  uint64_t v96;
  uint64_t v97;
  BOOL v98;
  uint64_t v99;
  char v100;
  char *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  BOOL v105;
  uint64_t v106;
  uint64_t v107;
  char *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  char *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  unint64_t v116;
  uint64_t v117;
  char *v118;
  uint64_t v119;
  char *v120;
  uint64_t v121;
  unint64_t v122;
  uint64_t v123;
  unint64_t v124;
  uint64_t v125;
  uint64_t v126;
  char *v127;
  unint64_t v128;
  uint64_t v129;
  uint64_t *v130;
  uint64_t v131;
  Swift::Int v132;
  char *v133;
  char *v134;
  Swift::Int v135;
  Swift::Int v136;
  Swift::Int v137;
  uint64_t v138;
  void **v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  _QWORD *v145;

  v2 = a1;
  v3 = a1[1];
  v4 = _minimumMergeRunLength(_:)(v3);
  if (v4 >= v3)
  {
    if (v3 < 0)
      goto LABEL_147;
    if (v3)
      sub_100057BD0(0, v3, 1, v2);
    return;
  }
  if (v3 >= 0)
    v5 = v3;
  else
    v5 = v3 + 1;
  if (v3 < -1)
    goto LABEL_155;
  v132 = v4;
  v130 = v2;
  if (v3 < 2)
  {
    v9 = (char *)_swiftEmptyArrayStorage;
    v145 = _swiftEmptyArrayStorage;
    v139 = (void **)&_swiftEmptyArrayStorage[4];
    if (v3 != 1)
    {
      v14 = _swiftEmptyArrayStorage[2];
LABEL_113:
      if (v14 >= 2)
      {
        v123 = *v130;
        do
        {
          v124 = v14 - 2;
          if (v14 < 2)
            goto LABEL_142;
          if (!v123)
            goto LABEL_154;
          v125 = *(_QWORD *)&v9[16 * v124 + 32];
          v126 = *(_QWORD *)&v9[16 * v14 + 24];
          sub_100057D90((id *)(v123 + 8 * v125), (id *)(v123 + 8 * *(_QWORD *)&v9[16 * v14 + 16]), v123 + 8 * v126, v139);
          if (v1)
            break;
          if (v126 < v125)
            goto LABEL_143;
          if ((swift_isUniquelyReferenced_nonNull_native(v9) & 1) == 0)
            v9 = sub_100079EC0((uint64_t)v9);
          if (v124 >= *((_QWORD *)v9 + 2))
            goto LABEL_144;
          v127 = &v9[16 * v124 + 32];
          *(_QWORD *)v127 = v125;
          *((_QWORD *)v127 + 1) = v126;
          v128 = *((_QWORD *)v9 + 2);
          if (v14 > v128)
            goto LABEL_145;
          memmove(&v9[16 * v14 + 16], &v9[16 * v14 + 32], 16 * (v128 - v14));
          *((_QWORD *)v9 + 2) = v128 - 1;
          v14 = v128 - 1;
        }
        while (v128 > 2);
      }
LABEL_124:
      swift_bridgeObjectRelease(v9);
      v145[2] = 0;
      specialized Array._endMutation()(v129);
      swift_bridgeObjectRelease(v145);
      return;
    }
  }
  else
  {
    v6 = v2;
    v7 = v5 >> 1;
    v8 = static Array._allocateBufferUninitialized(minimumCapacity:)(v5 >> 1, &type metadata for HealthCategoryEntity);
    *(_QWORD *)(v8 + 16) = v7;
    v2 = v6;
    v139 = (void **)(v8 + 32);
    v145 = (_QWORD *)v8;
  }
  v10 = v3;
  v11 = 0;
  v12 = *v2;
  v131 = *v2 - 8;
  v9 = (char *)_swiftEmptyArrayStorage;
  v13 = &selRef_shouldShowBuddy;
  v140 = *v2;
  v137 = v10;
  while (1)
  {
    v15 = v11++;
    v136 = v15;
    if (v11 >= v10)
      goto LABEL_43;
    v133 = v9;
    v16 = *(void **)(v12 + 8 * v15);
    v17 = *(id *)(v12 + 8 * v11);
    v18 = v16;
    v19 = objc_msgSend(v17, v13[58]);
    v20 = v19 != (id)14;
    if (v19 == (id)14 || objc_msgSend(v18, v13[58]) == (id)14)
    {

    }
    else
    {
      v21 = objc_msgSend(v17, "displayName");
      v22 = static String._unconditionallyBridgeFromObjectiveC(_:)(v21);
      v24 = v23;

      v143 = v22;
      v144 = v24;
      v25 = objc_msgSend(v18, "displayName");
      v26 = static String._unconditionallyBridgeFromObjectiveC(_:)(v25);
      v28 = v27;

      v141 = v26;
      v142 = v28;
      v12 = v140;
      v29 = sub_10002D0D0();
      v30 = StringProtocol.localizedStandardCompare<A>(_:)(&v141, &type metadata for String, &type metadata for String, v29, v29);

      swift_bridgeObjectRelease(v24);
      swift_bridgeObjectRelease(v28);
      v20 = v30 == -1;
    }
    v31 = v15 + 2;
    if (v15 + 2 < v137)
    {
      v32 = v15 + 2;
      while (1)
      {
        v31 = v32;
        v33 = *(void **)(v12 + 8 * v11);
        v34 = *(id *)(v12 + 8 * v32);
        v35 = v33;
        if (objc_msgSend(v34, "categoryID") == (id)14)
        {

          if (v20)
          {
            v9 = v133;
            v15 = v136;
            if (v31 < v136)
              goto LABEL_148;
LABEL_36:
            if (v15 < v31)
            {
              v49 = (uint64_t *)(v131 + 8 * v31);
              v50 = v31;
              v51 = v15;
              v52 = (uint64_t *)(v12 + 8 * v15);
              do
              {
                if (v51 != --v50)
                {
                  if (!v12)
                    goto LABEL_153;
                  v53 = *v52;
                  *v52 = *v49;
                  *v49 = v53;
                }
                ++v51;
                --v49;
                ++v52;
              }
              while (v51 < v50);
            }
            v11 = v31;
            goto LABEL_43;
          }
        }
        else if (objc_msgSend(v35, "categoryID") == (id)14)
        {

          if (!v20)
          {
            v11 = v31;
            v9 = v133;
            v15 = v136;
            goto LABEL_43;
          }
        }
        else
        {
          v36 = v20;
          v37 = objc_msgSend(v34, "displayName");
          v38 = static String._unconditionallyBridgeFromObjectiveC(_:)(v37);
          v40 = v39;

          v143 = v38;
          v144 = v40;
          v41 = objc_msgSend(v35, "displayName");
          v42 = static String._unconditionallyBridgeFromObjectiveC(_:)(v41);
          v44 = v43;

          v141 = v42;
          v142 = v44;
          v12 = v140;
          v45 = sub_10002D0D0();
          v46 = StringProtocol.localizedStandardCompare<A>(_:)(&v141, &type metadata for String, &type metadata for String, v45, v45);

          swift_bridgeObjectRelease(v40);
          swift_bridgeObjectRelease(v44);
          v47 = v46 == -1;
          v20 = v36;
          v48 = !v47;
          if (v36 == v48)
            break;
        }
        v32 = v31 + 1;
        v11 = v31;
        if (v31 + 1 >= v137)
        {
          ++v31;
          break;
        }
      }
    }
    v11 = v31;
    v9 = v133;
    v15 = v136;
    if (v20)
    {
      if (v31 < v136)
        goto LABEL_148;
      goto LABEL_36;
    }
LABEL_43:
    if (v11 < v137)
    {
      if (__OFSUB__(v11, v15))
        goto LABEL_146;
      if (v11 - v15 < v132)
        break;
    }
LABEL_63:
    if (v11 < v15)
      goto LABEL_141;
    if ((swift_isUniquelyReferenced_nonNull_native(v9) & 1) == 0)
      v9 = sub_100079C78(0, *((_QWORD *)v9 + 2) + 1, 1, v9);
    v74 = *((_QWORD *)v9 + 2);
    v73 = *((_QWORD *)v9 + 3);
    v14 = v74 + 1;
    if (v74 >= v73 >> 1)
      v9 = sub_100079C78((char *)(v73 > 1), v74 + 1, 1, v9);
    *((_QWORD *)v9 + 2) = v14;
    v75 = v9 + 32;
    v76 = &v9[16 * v74 + 32];
    *(_QWORD *)v76 = v15;
    *((_QWORD *)v76 + 1) = v11;
    if (v74)
    {
      while (1)
      {
        v77 = v14 - 1;
        if (v14 >= 4)
        {
          v82 = &v75[16 * v14];
          v83 = *((_QWORD *)v82 - 8);
          v84 = *((_QWORD *)v82 - 7);
          v88 = __OFSUB__(v84, v83);
          v85 = v84 - v83;
          if (v88)
            goto LABEL_130;
          v87 = *((_QWORD *)v82 - 6);
          v86 = *((_QWORD *)v82 - 5);
          v88 = __OFSUB__(v86, v87);
          v80 = v86 - v87;
          v81 = v88;
          if (v88)
            goto LABEL_131;
          v89 = v14 - 2;
          v90 = &v75[16 * v14 - 32];
          v92 = *(_QWORD *)v90;
          v91 = *((_QWORD *)v90 + 1);
          v88 = __OFSUB__(v91, v92);
          v93 = v91 - v92;
          if (v88)
            goto LABEL_133;
          v88 = __OFADD__(v80, v93);
          v94 = v80 + v93;
          if (v88)
            goto LABEL_136;
          if (v94 >= v85)
          {
            v112 = &v75[16 * v77];
            v114 = *(_QWORD *)v112;
            v113 = *((_QWORD *)v112 + 1);
            v88 = __OFSUB__(v113, v114);
            v115 = v113 - v114;
            if (v88)
              goto LABEL_140;
            v105 = v80 < v115;
            goto LABEL_100;
          }
        }
        else
        {
          if (v14 != 3)
          {
            v106 = *((_QWORD *)v9 + 4);
            v107 = *((_QWORD *)v9 + 5);
            v88 = __OFSUB__(v107, v106);
            v99 = v107 - v106;
            v100 = v88;
            goto LABEL_94;
          }
          v79 = *((_QWORD *)v9 + 4);
          v78 = *((_QWORD *)v9 + 5);
          v88 = __OFSUB__(v78, v79);
          v80 = v78 - v79;
          v81 = v88;
        }
        if ((v81 & 1) != 0)
          goto LABEL_132;
        v89 = v14 - 2;
        v95 = &v75[16 * v14 - 32];
        v97 = *(_QWORD *)v95;
        v96 = *((_QWORD *)v95 + 1);
        v98 = __OFSUB__(v96, v97);
        v99 = v96 - v97;
        v100 = v98;
        if (v98)
          goto LABEL_135;
        v101 = &v75[16 * v77];
        v103 = *(_QWORD *)v101;
        v102 = *((_QWORD *)v101 + 1);
        v88 = __OFSUB__(v102, v103);
        v104 = v102 - v103;
        if (v88)
          goto LABEL_138;
        if (__OFADD__(v99, v104))
          goto LABEL_139;
        if (v99 + v104 >= v80)
        {
          v105 = v80 < v104;
LABEL_100:
          if (v105)
            v77 = v89;
          goto LABEL_102;
        }
LABEL_94:
        if ((v100 & 1) != 0)
          goto LABEL_134;
        v108 = &v75[16 * v77];
        v110 = *(_QWORD *)v108;
        v109 = *((_QWORD *)v108 + 1);
        v88 = __OFSUB__(v109, v110);
        v111 = v109 - v110;
        if (v88)
          goto LABEL_137;
        if (v111 < v99)
          goto LABEL_14;
LABEL_102:
        v116 = v77 - 1;
        if (v77 - 1 >= v14)
        {
          __break(1u);
LABEL_127:
          __break(1u);
LABEL_128:
          __break(1u);
LABEL_129:
          __break(1u);
LABEL_130:
          __break(1u);
LABEL_131:
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
LABEL_139:
          __break(1u);
LABEL_140:
          __break(1u);
LABEL_141:
          __break(1u);
LABEL_142:
          __break(1u);
LABEL_143:
          __break(1u);
LABEL_144:
          __break(1u);
LABEL_145:
          __break(1u);
LABEL_146:
          __break(1u);
LABEL_147:
          __break(1u);
LABEL_148:
          __break(1u);
LABEL_149:
          __break(1u);
          goto LABEL_150;
        }
        if (!v12)
          goto LABEL_152;
        v117 = v12;
        v118 = &v75[16 * v116];
        v119 = *(_QWORD *)v118;
        v120 = &v75[16 * v77];
        v121 = *((_QWORD *)v120 + 1);
        sub_100057D90((id *)(v117 + 8 * *(_QWORD *)v118), (id *)(v117 + 8 * *(_QWORD *)v120), v117 + 8 * v121, v139);
        if (v1)
          goto LABEL_124;
        if (v121 < v119)
          goto LABEL_127;
        if (v77 > *((_QWORD *)v9 + 2))
          goto LABEL_128;
        *(_QWORD *)v118 = v119;
        *(_QWORD *)&v75[16 * v116 + 8] = v121;
        v122 = *((_QWORD *)v9 + 2);
        if (v77 >= v122)
          goto LABEL_129;
        v14 = v122 - 1;
        memmove(&v75[16 * v77], v120 + 16, 16 * (v122 - 1 - v77));
        *((_QWORD *)v9 + 2) = v122 - 1;
        v12 = v140;
        if (v122 <= 2)
          goto LABEL_14;
      }
    }
    v14 = 1;
LABEL_14:
    v10 = v137;
    v13 = &selRef_shouldShowBuddy;
    if (v11 >= v137)
      goto LABEL_113;
  }
  if (__OFADD__(v15, v132))
    goto LABEL_149;
  v54 = v137;
  if (v15 + v132 < v137)
    v54 = v15 + v132;
  v55 = &selRef_shouldShowBuddy;
  if (v54 >= v15)
  {
    if (v11 != v54)
    {
      v134 = v9;
      v135 = v54;
      v56 = v131 + 8 * v11;
      do
      {
        v57 = *(void **)(v12 + 8 * v11);
        v138 = v56;
        while (1)
        {
          v58 = *(void **)v56;
          v59 = v57;
          v60 = v58;
          if (objc_msgSend(v59, v55[58]) == (id)14)
            break;
          if (objc_msgSend(v60, v55[58]) == (id)14)
          {

          }
          else
          {
            v61 = objc_msgSend(v59, "displayName");
            v62 = static String._unconditionallyBridgeFromObjectiveC(_:)(v61);
            v64 = v63;

            v143 = v62;
            v144 = v64;
            v65 = objc_msgSend(v60, "displayName");
            v66 = static String._unconditionallyBridgeFromObjectiveC(_:)(v65);
            v68 = v67;

            v141 = v66;
            v142 = v68;
            v55 = &selRef_shouldShowBuddy;
            v69 = sub_10002D0D0();
            v70 = StringProtocol.localizedStandardCompare<A>(_:)(&v141, &type metadata for String, &type metadata for String, v69, v69);

            swift_bridgeObjectRelease(v64);
            v71 = v68;
            v12 = v140;
            swift_bridgeObjectRelease(v71);
            if (v70 != -1)
              goto LABEL_53;
          }
          if (!v12)
            goto LABEL_151;
          v72 = *(void **)v56;
          v57 = *(void **)(v56 + 8);
          *(_QWORD *)v56 = v57;
          *(_QWORD *)(v56 + 8) = v72;
          v56 -= 8;
          if (v11 == ++v15)
            goto LABEL_53;
        }

LABEL_53:
        ++v11;
        v56 = v138 + 8;
        v15 = v136;
      }
      while (v11 != v135);
      v11 = v135;
      v9 = v134;
    }
    goto LABEL_63;
  }
LABEL_150:
  __break(1u);
LABEL_151:
  __break(1u);
LABEL_152:
  __break(1u);
LABEL_153:
  __break(1u);
LABEL_154:
  __break(1u);
LABEL_155:
  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Can't construct Array with count < 0", 36, 2, "Swift/Array.swift", 17, 2, 936, 0);
  __break(1u);
}

void sub_100057BD0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char **v7;
  void *v8;
  uint64_t v9;
  void *v10;
  id v11;
  id v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  uint64_t v18;
  char **v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  BOOL v25;
  void *v26;
  uint64_t v29;
  uint64_t v30;
  _QWORD v31[4];
  uint64_t v32;

  if (a3 != a2)
  {
    v4 = a3;
    v5 = *a4;
    v6 = *a4 + 8 * a3 - 8;
    v7 = &selRef_shouldShowBuddy;
    v30 = *a4;
LABEL_6:
    v8 = *(void **)(v5 + 8 * v4);
    v9 = a1;
    v29 = v6;
    v32 = v4;
    while (1)
    {
      v10 = *(void **)v6;
      v11 = v8;
      v12 = v10;
      if (objc_msgSend(v11, v7[58]) == (id)14)
      {

LABEL_5:
        ++v4;
        v6 = v29 + 8;
        if (v4 == a2)
          return;
        goto LABEL_6;
      }
      if (objc_msgSend(v12, v7[58]) == (id)14)
      {

      }
      else
      {
        v13 = objc_msgSend(v11, "displayName");
        v14 = static String._unconditionallyBridgeFromObjectiveC(_:)(v13);
        v16 = v15;

        v31[2] = v14;
        v31[3] = v16;
        v17 = objc_msgSend(v12, "displayName");
        v18 = static String._unconditionallyBridgeFromObjectiveC(_:)(v17);
        v19 = v7;
        v21 = v20;

        v31[0] = v18;
        v31[1] = v21;
        v22 = sub_10002D0D0();
        v23 = StringProtocol.localizedStandardCompare<A>(_:)(v31, &type metadata for String, &type metadata for String, v22, v22);

        swift_bridgeObjectRelease(v16);
        v24 = v21;
        v7 = v19;
        swift_bridgeObjectRelease(v24);
        v25 = v23 == -1;
        v5 = v30;
        v4 = v32;
        if (!v25)
          goto LABEL_5;
      }
      if (!v5)
        break;
      v26 = *(void **)v6;
      v8 = *(void **)(v6 + 8);
      *(_QWORD *)v6 = v8;
      *(_QWORD *)(v6 + 8) = v26;
      v6 -= 8;
      if (v4 == ++v9)
        goto LABEL_5;
    }
    __break(1u);
  }
}

uint64_t sub_100057D90(id *__src, id *a2, unint64_t a3, void **__dst)
{
  void **v4;
  id *v5;
  void **v6;
  int64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void **v13;
  unint64_t v14;
  char **v15;
  void *v16;
  id v17;
  id v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  id v23;
  uint64_t v24;
  void **v25;
  void **v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  id *v33;
  void **v34;
  id *v35;
  char **v36;
  id *v37;
  void *v38;
  id v39;
  id v40;
  id *v41;
  id v42;
  uint64_t v43;
  uint64_t v44;
  id v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  void **v50;
  uint64_t result;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  void **v57;
  void **v58;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  void **v64;
  void **v65;
  id *v66;

  v4 = __dst;
  v5 = a2;
  v6 = __src;
  v7 = (char *)a2 - (char *)__src;
  v8 = (char *)a2 - (char *)__src + 7;
  if ((char *)a2 - (char *)__src >= 0)
    v8 = (char *)a2 - (char *)__src;
  v9 = v8 >> 3;
  v10 = a3 - (_QWORD)a2;
  v11 = a3 - (_QWORD)a2 + 7;
  if ((uint64_t)(a3 - (_QWORD)a2) >= 0)
    v11 = a3 - (_QWORD)a2;
  v12 = v11 >> 3;
  v66 = __src;
  v65 = __dst;
  if (v9 >= v11 >> 3)
  {
    if (v10 < -7)
      goto LABEL_52;
    if (__dst != a2 || &a2[v12] <= __dst)
      memmove(__dst, a2, 8 * v12);
    v34 = &v4[v12];
    v64 = v34;
    v66 = v5;
    if (__src >= v5 || v10 < 8)
    {
LABEL_51:
      sub_100079E18((void **)&v66, (const void **)&v65, &v64);
      return 1;
    }
    v35 = (id *)(a3 - 8);
    v36 = &selRef_shouldShowBuddy;
    v37 = v5;
    v58 = v4;
    while (1)
    {
      v38 = *--v37;
      v39 = *(v34 - 1);
      v40 = v38;
      if (objc_msgSend(v39, v36[58]) == (id)14)
      {

        v41 = v35 + 1;
      }
      else
      {
        if (objc_msgSend(v40, v36[58]) == (id)14)
        {

          v41 = v35 + 1;
LABEL_45:
          v50 = v58;
          if (v41 != v5 || v35 >= v5)
            *v35 = *v37;
          v66 = v37;
          goto LABEL_49;
        }
        v42 = objc_msgSend(v39, "displayName");
        v53 = static String._unconditionallyBridgeFromObjectiveC(_:)(v42);
        v55 = v43;
        v44 = v43;

        v62 = v53;
        v63 = v44;
        v45 = objc_msgSend(v40, "displayName");
        v52 = static String._unconditionallyBridgeFromObjectiveC(_:)(v45);
        v54 = v46;
        v47 = v46;

        v60 = v52;
        v61 = v47;
        v48 = sub_10002D0D0();
        v36 = &selRef_shouldShowBuddy;
        v49 = StringProtocol.localizedStandardCompare<A>(_:)(&v60, &type metadata for String, &type metadata for String, v48, v48);

        swift_bridgeObjectRelease(v55);
        swift_bridgeObjectRelease(v54);
        v41 = v35 + 1;
        if (v49 == -1)
          goto LABEL_45;
      }
      v64 = v34 - 1;
      v50 = v58;
      if (v41 < v34 || v35 >= v34 || v41 != v34)
        *v35 = *(v34 - 1);
      v37 = v5;
      --v34;
LABEL_49:
      if (v37 > __src)
      {
        --v35;
        v5 = v37;
        if (v34 > v50)
          continue;
      }
      goto LABEL_51;
    }
  }
  if (v7 >= -7)
  {
    if (__dst != __src || &__src[v9] <= __dst)
      memmove(__dst, __src, 8 * v9);
    v13 = &v4[v9];
    v64 = v13;
    v14 = a3;
    if ((unint64_t)v5 < a3 && v7 >= 8)
    {
      v15 = &selRef_shouldShowBuddy;
      while (1)
      {
        v16 = *v4;
        v17 = *v5;
        v18 = v16;
        if (objc_msgSend(v17, v15[58]) == (id)14)
        {

        }
        else
        {
          if (objc_msgSend(v18, v15[58]) == (id)14)
          {

LABEL_21:
            v33 = v5 + 1;
            if (v6 < v5 || v6 >= v33 || v6 != v5)
              *v6 = *v5;
            goto LABEL_25;
          }
          v19 = objc_msgSend(v17, "displayName");
          v20 = static String._unconditionallyBridgeFromObjectiveC(_:)(v19);
          v57 = v4;
          v22 = v21;

          v62 = v20;
          v63 = v22;
          v23 = objc_msgSend(v18, "displayName");
          v24 = static String._unconditionallyBridgeFromObjectiveC(_:)(v23);
          v25 = v13;
          v26 = v6;
          v28 = v27;

          v60 = v24;
          v61 = v28;
          v29 = sub_10002D0D0();
          v30 = StringProtocol.localizedStandardCompare<A>(_:)(&v60, &type metadata for String, &type metadata for String, v29, v29);

          v31 = v22;
          v4 = v57;
          swift_bridgeObjectRelease(v31);
          v32 = v28;
          v6 = v26;
          v13 = v25;
          v15 = &selRef_shouldShowBuddy;
          v14 = a3;
          swift_bridgeObjectRelease(v32);
          if (v30 == -1)
            goto LABEL_21;
        }
        if (v6 != v4)
          *v6 = *v4;
        v65 = ++v4;
        v33 = v5;
LABEL_25:
        ++v6;
        if (v4 < v13)
        {
          v5 = v33;
          if ((unint64_t)v33 < v14)
            continue;
        }
        v66 = v6;
        goto LABEL_51;
      }
    }
    goto LABEL_51;
  }
LABEL_52:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, 2, 1046, 0);
  __break(1u);
  return result;
}

uint64_t sub_100058240()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  void (*v27)(char *, uint64_t, uint64_t);
  char *v28;
  uint64_t v29;
  uint64_t v30;
  void (*v31)(char *, uint64_t, uint64_t, uint64_t);
  char *v32;
  char *v33;
  char *v34;
  unint64_t v35;
  _QWORD v37[2];
  char *v38;
  char *v39;
  char *v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;

  v0 = type metadata accessor for InputConnectionBehavior(0);
  v42 = *(_QWORD *)(v0 - 8);
  v43 = v0;
  __chkstk_darwin(v0);
  v41 = (char *)v37 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000E944(0, &qword_1000EE508, (uint64_t (*)(uint64_t))&type metadata accessor for IntentDialog);
  v3 = __chkstk_darwin(v2);
  v40 = (char *)v37 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  v39 = (char *)v37 - v5;
  v6 = type metadata accessor for String.LocalizationValue(0);
  v7 = __chkstk_darwin(v6);
  v9 = (char *)v37 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v38 = (char *)v37 - v10;
  sub_10000E944(0, &qword_1000EC948, (uint64_t (*)(uint64_t))&type metadata accessor for LocalizedStringResource);
  __chkstk_darwin(v11);
  v13 = (char *)v37 - v12;
  v14 = type metadata accessor for LocalizedStringResource.BundleDescription(0);
  v15 = *(_QWORD *)(v14 - 8);
  __chkstk_darwin(v14);
  v17 = (char *)v37 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = type metadata accessor for Locale(0);
  __chkstk_darwin(v18);
  v20 = (char *)v37 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = type metadata accessor for LocalizedStringResource(0);
  v22 = *(_QWORD *)(v21 - 8);
  __chkstk_darwin(v21);
  v24 = (char *)v37 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = String.LocalizationValue.init(stringLiteral:)(0x432068746C616548, 0xEF79726F67657461);
  static Locale.current.getter(v25);
  v26 = enum case for LocalizedStringResource.BundleDescription.main(_:);
  v27 = *(void (**)(char *, uint64_t, uint64_t))(v15 + 104);
  v27(v17, enum case for LocalizedStringResource.BundleDescription.main(_:), v14);
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v9, 0x6E65746E49707041, 0xEA00000000007374, v20, v17, 0, 0, 256);
  v28 = v38;
  String.LocalizationValue.init(stringLiteral:)(0xD00000000000004CLL, 0x80000001000BAE00);
  sub_100058B40(0, &qword_1000EE618, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t))&type metadata accessor for IntentParameter);
  v37[1] = v29;
  static Locale.current.getter(v29);
  v27(v17, v26, v14);
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v28, 0x6E65746E49707041, 0xEA00000000007374, v20, v17, 0, 0, 256);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v22 + 56))(v13, 0, 1, v21);
  v44 = 0;
  v30 = type metadata accessor for IntentDialog(0);
  v31 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v30 - 8) + 56);
  v32 = v39;
  v31(v39, 1, 1, v30);
  v33 = v40;
  v31(v40, 1, 1, v30);
  v34 = v41;
  (*(void (**)(char *, _QWORD, uint64_t))(v42 + 104))(v41, enum case for InputConnectionBehavior.default(_:), v43);
  v35 = sub_100056B98();
  return IntentParameter<>.init(title:description:default:requestValueDialog:requestDisambiguationDialog:inputConnectionBehavior:)(v24, v13, &v44, v32, v33, v34, v35);
}

_QWORD *sub_10005861C(uint64_t a1, uint64_t (*a2)(void *))
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  char **v7;
  id v8;
  void *v9;
  uint64_t v10;
  unint64_t v11;
  BOOL v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;

  if ((unint64_t)a1 >> 62)
    goto LABEL_20;
  v4 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain(a1);
  for (; v4; v4 = _CocoaArrayWrapper.endIndex.getter(v17))
  {
    v5 = a1 & 0xC000000000000001;
    v6 = 4;
    v7 = &selRef_shouldShowBuddy;
    while (1)
    {
      v8 = v5 ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v6 - 4, a1) : *(id *)(a1 + 8 * v6);
      v9 = v8;
      v10 = v6 - 3;
      if (__OFADD__(v6 - 4, 1))
        break;
      v11 = (unint64_t)objc_msgSend(v8, v7[58]);
      v12 = v11 > 0x1F || ((1 << v11) & 0x84807D76) == 0;
      if (v12 || (v13 = a2(v9), (v13 & 1) == 0))
      {

      }
      else
      {
        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v13);
        v15 = _swiftEmptyArrayStorage[2];
        v14 = _swiftEmptyArrayStorage[3];
        if (v15 >= v14 >> 1)
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v14 > 1, v15 + 1, 1);
        v16 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v15, v9);
        specialized Array._endMutation()(v16);
        v5 = a1 & 0xC000000000000001;
        v7 = &selRef_shouldShowBuddy;
      }
      ++v6;
      if (v10 == v4)
        goto LABEL_24;
    }
    __break(1u);
LABEL_20:
    if (a1 < 0)
      v17 = a1;
    else
      v17 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
  }
LABEL_24:
  swift_bridgeObjectRelease(a1);
  return _swiftEmptyArrayStorage;
}

uint64_t sub_1000587E8()
{
  return swift_task_switch(sub_1000587FC, 0, 0);
}

uint64_t sub_1000587FC()
{
  uint64_t v0;
  id v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  __n128 v5;
  _QWORD *v7;

  v1 = objc_msgSend((id)objc_opt_self(HKDisplayCategory), "allCategories");
  v2 = sub_100006D10(0, &qword_1000ED538, HKDisplayCategory_ptr);
  v3 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v1, v2);

  v4 = sub_10005587C(v3);
  swift_bridgeObjectRelease(v3);
  v7 = v4;
  swift_bridgeObjectRetain(v4);
  sub_1000571DC((uint64_t *)&v7);
  v5 = swift_bridgeObjectRelease(v4);
  return (*(uint64_t (**)(_QWORD *, __n128))(v0 + 8))(v7, v5);
}

uint64_t sub_1000588E0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 16) = a1;
  *(_QWORD *)(v2 + 24) = a2;
  return swift_task_switch(sub_1000588F8, 0, 0);
}

uint64_t sub_1000588F8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v10;

  v2 = *(_QWORD *)(v0 + 16);
  v1 = *(_QWORD *)(v0 + 24);
  v3 = swift_task_alloc(32);
  *(_QWORD *)(v3 + 16) = v2;
  *(_QWORD *)(v3 + 24) = v1;
  v4 = objc_msgSend((id)objc_opt_self(HKDisplayCategory), "allCategories");
  v5 = sub_100006D10(0, &qword_1000ED538, HKDisplayCategory_ptr);
  v6 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v4, v5);

  v7 = sub_10005861C(v6, sub_100058B38);
  swift_bridgeObjectRelease(v6);
  v10 = v7;
  swift_bridgeObjectRetain(v7);
  sub_1000571DC((uint64_t *)&v10);
  swift_bridgeObjectRelease(v7);
  v8 = (uint64_t)v10;
  swift_task_dealloc(v3);
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v8);
}

uint64_t sub_100058A08(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = a1;
  return swift_task_switch(sub_100058A20, 0, 0);
}

uint64_t sub_100058A20()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v9;

  v1 = *(_QWORD *)(v0 + 16);
  v2 = swift_task_alloc(32);
  *(_QWORD *)(v2 + 16) = v1;
  v3 = objc_msgSend((id)objc_opt_self(HKDisplayCategory), "allCategories");
  v4 = sub_100006D10(0, &qword_1000ED538, HKDisplayCategory_ptr);
  v5 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v3, v4);

  v6 = sub_10005861C(v5, sub_100058B30);
  swift_bridgeObjectRelease(v5);
  v9 = v6;
  swift_bridgeObjectRetain(v6);
  sub_1000571DC((uint64_t *)&v9);
  swift_bridgeObjectRelease(v6);
  v7 = (uint64_t)v9;
  swift_task_dealloc(v2);
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v7);
}

uint64_t sub_100058B30(void *a1)
{
  uint64_t v1;

  return sub_1000569CC(a1, *(_QWORD **)(v1 + 16));
}

uint64_t sub_100058B38(void *a1)
{
  uint64_t v1;

  return sub_100056930(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

void sub_100058B40(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, ValueMetadata *, unint64_t))
{
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;

  if (!*a2)
  {
    v6 = sub_10001B6D8();
    v7 = a3(a1, &type metadata for HealthCategoryEntity, v6);
    if (!v8)
      atomic_store(v7, a2);
  }
}

unint64_t sub_100058B9C()
{
  unint64_t result;

  result = qword_1000EE628;
  if (!qword_1000EE628)
  {
    result = swift_getWitnessTable(&unk_1000B3A5C, &type metadata for CategoryIntentError);
    atomic_store(result, (unint64_t *)&qword_1000EE628);
  }
  return result;
}

unint64_t sub_100058BE0()
{
  unint64_t result;

  result = qword_1000EE630;
  if (!qword_1000EE630)
  {
    result = swift_getWitnessTable(&unk_1000B350C, &type metadata for OpenCategoryIntent);
    atomic_store(result, (unint64_t *)&qword_1000EE630);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for CategoryIntentError(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_100058C64 + 4 * byte_1000B3500[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_100058C84 + 4 * byte_1000B3505[v4]))();
}

_BYTE *sub_100058C64(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_100058C84(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_100058C8C(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_100058C94(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_100058C9C(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_100058CA4(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for CategoryIntentError()
{
  return &type metadata for CategoryIntentError;
}

unint64_t sub_100058CC4()
{
  unint64_t result;

  result = qword_1000EE638;
  if (!qword_1000EE638)
  {
    result = swift_getWitnessTable(&unk_1000B3A34, &type metadata for CategoryIntentError);
    atomic_store(result, (unint64_t *)&qword_1000EE638);
  }
  return result;
}

uint64_t sub_100058D0C()
{
  uint64_t v1;

  IntentParameter.wrappedValue.getter(&v1);
  return v1;
}

uint64_t sub_100058D3C()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v9;

  sub_1000076D8(0, &qword_1000EC948, (uint64_t (*)(uint64_t))&type metadata accessor for LocalizedStringResource, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
  __chkstk_darwin(v0);
  v2 = (char *)&v9 - v1;
  v3 = type metadata accessor for LocalizedStringResource(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for TypeDisplayRepresentation(0);
  sub_10001C884(v7, qword_1000F0FE0);
  sub_10001C86C(v7, (uint64_t)qword_1000F0FE0);
  LocalizedStringResource.init(stringLiteral:)(0x432068746C616548, 0xEF79726F67657461);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v4 + 56))(v2, 1, 1, v3);
  return TypeDisplayRepresentation.init(name:numericFormat:)(v6, v2);
}

unint64_t sub_100058E64()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  void (*v62)(char *, uint64_t, uint64_t, uint64_t);
  char *v63;
  uint64_t v64;
  void (*v65)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v66;
  uint64_t v67;
  char *v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  char *v74;
  uint64_t v75;
  void (*v76)(char *, uint64_t, uint64_t, uint64_t);
  char *v77;
  uint64_t v78;
  char *v79;
  uint64_t v80;
  _BYTE *v81;
  uint64_t v82;
  void (*v83)(char *, uint64_t, uint64_t, uint64_t);
  char *v84;
  void (*v85)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v86;
  uint64_t v87;
  _BYTE *v88;
  char *v89;
  char *v90;
  uint64_t v91;
  uint64_t v92;
  void (*v93)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v94;
  char *v95;
  char *v96;
  void (*v97)(char *, uint64_t, uint64_t, uint64_t);
  char *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  char *v102;
  char *v103;
  uint64_t v104;
  void (*v105)(char *, uint64_t, uint64_t, uint64_t);
  char *v106;
  void (*v107)(char *, uint64_t, uint64_t, uint64_t);
  char *v108;
  char *v109;
  char *v110;
  uint64_t v111;
  char *v112;
  char *v113;
  char *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  char *v120;
  char *v121;
  char *v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  _BYTE *v126;
  uint64_t v127;
  char *v128;
  char *v129;
  uint64_t v130;
  void (*v131)(char *, uint64_t, uint64_t, uint64_t);
  char *v132;
  uint64_t v133;
  void (*v134)(char *, uint64_t, uint64_t, uint64_t);
  unint64_t result;
  uint64_t v136;
  char *v137;
  char *v138;
  char *v139;
  char *v140;
  char *v141;
  char *v142;
  char *v143;
  char *v144;
  char *v145;
  char *v146;
  char *v147;
  uint64_t v148;
  char *v149;
  char *v150;
  char *v151;
  char *v152;
  uint64_t v153;
  char *v154;
  uint64_t v155;
  char *v156;
  uint64_t v157;
  void (*v158)(char *, uint64_t, uint64_t, uint64_t);
  char *v159;
  __int128 v160;
  uint64_t v161;
  uint64_t v162;
  void (*v163)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;

  sub_1000076D8(0, &qword_1000EE4F0, (uint64_t (*)(uint64_t))&type metadata accessor for DisplayRepresentation.Image, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
  v1 = __chkstk_darwin(v0);
  v150 = (char *)&v136 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = __chkstk_darwin(v1);
  v149 = (char *)&v136 - v4;
  v5 = __chkstk_darwin(v3);
  v144 = (char *)&v136 - v6;
  v7 = __chkstk_darwin(v5);
  v159 = (char *)&v136 - v8;
  v9 = __chkstk_darwin(v7);
  v140 = (char *)&v136 - v10;
  v11 = __chkstk_darwin(v9);
  v138 = (char *)&v136 - v12;
  __chkstk_darwin(v11);
  v14 = (char *)&v136 - v13;
  sub_1000076D8(0, &qword_1000EC948, (uint64_t (*)(uint64_t))&type metadata accessor for LocalizedStringResource, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
  v16 = __chkstk_darwin(v15);
  v147 = (char *)&v136 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = __chkstk_darwin(v16);
  v146 = (char *)&v136 - v19;
  v20 = __chkstk_darwin(v18);
  v142 = (char *)&v136 - v21;
  v22 = __chkstk_darwin(v20);
  v156 = (char *)&v136 - v23;
  v24 = __chkstk_darwin(v22);
  v139 = (char *)&v136 - v25;
  v26 = __chkstk_darwin(v24);
  v137 = (char *)&v136 - v27;
  __chkstk_darwin(v26);
  v29 = (char *)&v136 - v28;
  v30 = type metadata accessor for LocalizedStringResource(0);
  v31 = *(_QWORD *)(v30 - 8);
  v164 = v30;
  v32 = __chkstk_darwin(v30);
  v145 = (char *)&v136 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  v34 = __chkstk_darwin(v32);
  v143 = (char *)&v136 - v35;
  v36 = __chkstk_darwin(v34);
  v141 = (char *)&v136 - v37;
  v38 = __chkstk_darwin(v36);
  v154 = (char *)&v136 - v39;
  v40 = __chkstk_darwin(v38);
  v152 = (char *)&v136 - v41;
  v42 = __chkstk_darwin(v40);
  v151 = (char *)&v136 - v43;
  __chkstk_darwin(v42);
  v45 = (char *)&v136 - v44;
  sub_1000076D8(0, &qword_1000EE700, (uint64_t (*)(uint64_t))sub_10005B414, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for _ContiguousArrayStorage);
  v47 = v46;
  sub_10005B414(0);
  v49 = *(_QWORD *)(v48 - 8);
  v166 = v48;
  v50 = *(_QWORD *)(v49 + 72);
  v51 = *(unsigned __int8 *)(v49 + 80);
  v52 = (v51 + 32) & ~v51;
  v53 = swift_allocObject(v47, v52 + 14 * v50, v51 | 7);
  v148 = v53;
  *(_OWORD *)(v53 + 16) = xmmword_1000B3AA0;
  *(_BYTE *)(v53 + v52) = 0;
  v54 = v53 + v52;
  LocalizedStringResource.init(stringLiteral:)(0xD000000000000011, 0x80000001000BAF70);
  v158 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v31 + 56);
  v158(v29, 1, 1, v30);
  v55 = type metadata accessor for DisplayRepresentation.Image(0);
  v163 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v55 - 8) + 56);
  v165 = v55;
  v163(v14, 1, 1, v55);
  sub_1000076D8(0, &qword_1000EE710, (uint64_t (*)(uint64_t))&type metadata accessor for LocalizedStringResource, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for _ContiguousArrayStorage);
  v136 = *(_QWORD *)(v31 + 72);
  v56 = *(unsigned __int8 *)(v31 + 80);
  v157 = ((v56 + 32) & ~v56) + v136;
  v162 = (v56 + 32) & ~v56;
  v155 = v56 | 7;
  v58 = v57;
  v59 = swift_allocObject(v57, v157, v56 | 7);
  v160 = xmmword_1000B11F0;
  *(_OWORD *)(v59 + 16) = xmmword_1000B11F0;
  v161 = v54;
  LocalizedStringResource.init(stringLiteral:)(0x7A69532079646F42, 0xE900000000000065);
  DisplayRepresentation.init(title:subtitle:image:synonyms:)(v45, v29, v14, v59);
  v167 = v50;
  *(_BYTE *)(v54 + v50) = 1;
  LocalizedStringResource.init(stringLiteral:)(0x7373656E746946, 0xE700000000000000);
  v60 = v137;
  v61 = v164;
  v62 = v158;
  v158(v137, 1, 1, v164);
  v63 = v138;
  v64 = v55;
  v65 = v163;
  v163(v138, 1, 1, v64);
  v153 = v58;
  v66 = v155;
  v67 = swift_allocObject(v58, v157, v155);
  *(_OWORD *)(v67 + 16) = v160;
  LocalizedStringResource.init(stringLiteral:)(0x7974697669746341, 0xE800000000000000);
  DisplayRepresentation.init(title:subtitle:image:synonyms:)(v151, v60, v63, v67);
  v151 = (char *)(2 * v50);
  *(_BYTE *)(v161 + 2 * v50) = 2;
  LocalizedStringResource.init(stringLiteral:)(0x20676E6972616548, 0xEE0068746C616548);
  v68 = v139;
  v62(v139, 1, 1, v61);
  v69 = v140;
  v65(v140, 1, 1, v165);
  v70 = swift_allocObject(v58, v162 + 2 * v136, v66);
  *(_OWORD *)(v70 + 16) = xmmword_1000B1580;
  LocalizedStringResource.init(stringLiteral:)(0x676E6972616548, 0xE700000000000000);
  LocalizedStringResource.init(stringLiteral:)(0x6C61654820726145, 0xEA00000000006874);
  DisplayRepresentation.init(title:subtitle:image:synonyms:)(v152, v68, v69, v70);
  v71 = v167;
  v72 = v161;
  v151[v167 + v161] = 3;
  v73 = v154;
  LocalizedStringResource.init(stringLiteral:)(0x7472616548, 0xE500000000000000);
  v74 = v156;
  v75 = v164;
  v76 = v158;
  v158(v156, 1, 1, v164);
  v77 = v159;
  v78 = v165;
  v163(v159, 1, 1, v165);
  v79 = v73;
  DisplayRepresentation.init(title:subtitle:image:synonyms:)(v73, v74, v77, _swiftEmptyArrayStorage);
  v80 = 4 * v71;
  v81 = (_BYTE *)(v72 + 4 * v71);
  v82 = v166;
  v152 = &v81[*(int *)(v166 + 48)];
  *v81 = 4;
  LocalizedStringResource.init(stringLiteral:)(0xD000000000000013, 0x80000001000BAF90);
  v83 = v76;
  v76(v74, 1, 1, v75);
  v84 = v77;
  v85 = v163;
  v163(v77, 1, 1, v78);
  DisplayRepresentation.init(title:subtitle:image:synonyms:)(v79, v74, v77, _swiftEmptyArrayStorage);
  v86 = v167;
  v87 = v161;
  v88 = (_BYTE *)(v161 + v80 + v167);
  *v88 = 5;
  v152 = &v88[*(int *)(v82 + 48)];
  v89 = v79;
  LocalizedStringResource.init(stringLiteral:)(0x7974696C69626F4DLL, 0xE800000000000000);
  v90 = v74;
  v91 = v164;
  v83(v74, 1, 1, v164);
  v92 = v78;
  v85(v84, 1, 1, v78);
  v93 = v85;
  DisplayRepresentation.init(title:subtitle:image:synonyms:)(v89, v90, v84, _swiftEmptyArrayStorage);
  v94 = v87;
  *(_BYTE *)(v87 + 6 * v86) = 6;
  v95 = v141;
  LocalizedStringResource.init(stringLiteral:)(0x6E6C7566646E694DLL, 0xEB00000000737365);
  v96 = v142;
  v83(v142, 1, 1, v91);
  v97 = v83;
  v98 = v144;
  v93(v144, 1, 1, v92);
  v99 = swift_allocObject(v153, v157, v155);
  *(_OWORD *)(v99 + 16) = v160;
  LocalizedStringResource.init(stringLiteral:)(0x697461746964654DLL, 0xEA00000000006E6FLL);
  DisplayRepresentation.init(title:subtitle:image:synonyms:)(v95, v96, v98, v99);
  v100 = 8 * v167;
  v152 = (char *)(8 * v167);
  v101 = v94;
  *(_BYTE *)(v94 + 7 * v167) = 7;
  v102 = v154;
  LocalizedStringResource.init(stringLiteral:)(0x6F6974697274754ELL, 0xE90000000000006ELL);
  v103 = v156;
  v104 = v164;
  v105 = v97;
  v97(v156, 1, 1, v164);
  v106 = v159;
  v107 = v163;
  v163(v159, 1, 1, v165);
  v108 = v103;
  DisplayRepresentation.init(title:subtitle:image:synonyms:)(v102, v103, v106, _swiftEmptyArrayStorage);
  *(_BYTE *)(v101 + v100) = 8;
  v109 = v102;
  LocalizedStringResource.init(stringLiteral:)(0x726568744FLL, 0xE500000000000000);
  v105(v108, 1, 1, v104);
  v110 = v159;
  v111 = v165;
  v107(v159, 1, 1, v165);
  DisplayRepresentation.init(title:subtitle:image:synonyms:)(v109, v108, v110, _swiftEmptyArrayStorage);
  v152[v167 + v101] = 9;
  v112 = v143;
  LocalizedStringResource.init(stringLiteral:)(0xD000000000000013, 0x80000001000BAFB0);
  v113 = v146;
  v105(v146, 1, 1, v104);
  v114 = v149;
  v107(v149, 1, 1, v111);
  v115 = v153;
  v116 = v157;
  v117 = v155;
  v118 = swift_allocObject(v153, v157, v155);
  *(_OWORD *)(v118 + 16) = v160;
  LocalizedStringResource.init(stringLiteral:)(0x725420656C637943, 0xEE00676E696B6361);
  DisplayRepresentation.init(title:subtitle:image:synonyms:)(v112, v113, v114, v118);
  v119 = v167;
  *(_BYTE *)(v161 + 10 * v167) = 10;
  v120 = v145;
  LocalizedStringResource.init(stringLiteral:)(0x7461726970736552, 0xEB0000000079726FLL);
  v121 = v147;
  v158(v147, 1, 1, v164);
  v122 = v150;
  v163(v150, 1, 1, v165);
  v123 = swift_allocObject(v115, v116, v117);
  *(_OWORD *)(v123 + 16) = v160;
  v124 = v166;
  LocalizedStringResource.init(stringLiteral:)(0x6E69687461657242, 0xE900000000000067);
  DisplayRepresentation.init(title:subtitle:image:synonyms:)(v120, v121, v122, v123);
  v125 = v161;
  v126 = (_BYTE *)(v161 + 11 * v119);
  v127 = v119;
  *v126 = 11;
  v162 = (uint64_t)&v126[*(int *)(v124 + 48)];
  v128 = v154;
  LocalizedStringResource.init(stringLiteral:)(0x7065656C53, 0xE500000000000000);
  v129 = v156;
  v130 = v164;
  v131 = v158;
  v158(v156, 1, 1, v164);
  v132 = v159;
  v133 = v165;
  v134 = v163;
  v163(v159, 1, 1, v165);
  DisplayRepresentation.init(title:subtitle:image:synonyms:)(v128, v129, v132, _swiftEmptyArrayStorage);
  *(_BYTE *)(v125 + 12 * v127) = 12;
  LocalizedStringResource.init(stringLiteral:)(0x736D6F74706D7953, 0xE800000000000000);
  v131(v129, 1, 1, v130);
  v134(v132, 1, 1, v133);
  DisplayRepresentation.init(title:subtitle:image:synonyms:)(v128, v129, v132, _swiftEmptyArrayStorage);
  *(_BYTE *)(v125 + 13 * v167) = 13;
  LocalizedStringResource.init(stringLiteral:)(0x6953206C61746956, 0xEB00000000736E67);
  v131(v129, 1, 1, v130);
  v134(v132, 1, 1, v133);
  DisplayRepresentation.init(title:subtitle:image:synonyms:)(v128, v129, v132, _swiftEmptyArrayStorage);
  result = sub_10007C354(v148);
  qword_1000F0FF8 = result;
  return result;
}

uint64_t sub_100059C9C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;

  sub_10005B508(0, &qword_1000EE718, (uint64_t (*)(void))sub_10005A4DC, (uint64_t (*)(uint64_t, ValueMetadata *, uint64_t))&type metadata accessor for _EnumURLRepresentation);
  v1 = v0;
  sub_10001C884(v0, qword_1000F1000);
  sub_10001C86C(v1, (uint64_t)qword_1000F1000);
  sub_1000076D8(0, &qword_1000EE720, (uint64_t (*)(uint64_t))sub_10005B48C, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for _ContiguousArrayStorage);
  v3 = v2;
  sub_10005B48C(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(_QWORD *)(v5 + 72);
  v7 = *(unsigned __int8 *)(v5 + 80);
  v8 = (v7 + 32) & ~v7;
  v9 = swift_allocObject(v3, v8 + 14 * v6, v7 | 7);
  *(_OWORD *)(v9 + 16) = xmmword_1000B3AA0;
  v10 = v9 + v8;
  *(_BYTE *)(v9 + v8) = 0;
  v11 = sub_10005A4DC();
  _EnumURLRepresentation.EnumSingleURLRepresentation.init(stringLiteral:)(0xD000000000000049, 0x80000001000BAFD0, &type metadata for CategoryIntent.Category, v11);
  *(_BYTE *)(v10 + v6) = 1;
  _EnumURLRepresentation.EnumSingleURLRepresentation.init(stringLiteral:)(0xD000000000000040, 0x80000001000BB020, &type metadata for CategoryIntent.Category, v11);
  *(_BYTE *)(v10 + 2 * v6) = 2;
  _EnumURLRepresentation.EnumSingleURLRepresentation.init(stringLiteral:)(0xD000000000000046, 0x80000001000BB070, &type metadata for CategoryIntent.Category, v11);
  *(_BYTE *)(v10 + 3 * v6) = 3;
  _EnumURLRepresentation.EnumSingleURLRepresentation.init(stringLiteral:)(0xD00000000000003ELL, 0x80000001000BB0C0, &type metadata for CategoryIntent.Category, v11);
  *(_BYTE *)(v10 + 4 * v6) = 4;
  _EnumURLRepresentation.EnumSingleURLRepresentation.init(stringLiteral:)(0xD000000000000052, 0x80000001000BB100, &type metadata for CategoryIntent.Category, v11);
  *(_BYTE *)(v10 + 5 * v6) = 5;
  _EnumURLRepresentation.EnumSingleURLRepresentation.init(stringLiteral:)(0xD000000000000041, 0x80000001000BB160, &type metadata for CategoryIntent.Category, v11);
  *(_BYTE *)(v10 + 6 * v6) = 6;
  _EnumURLRepresentation.EnumSingleURLRepresentation.init(stringLiteral:)(0xD000000000000044, 0x80000001000BB1B0, &type metadata for CategoryIntent.Category, v11);
  *(_BYTE *)(v10 + 7 * v6) = 7;
  _EnumURLRepresentation.EnumSingleURLRepresentation.init(stringLiteral:)(0xD000000000000042, 0x80000001000BB200, &type metadata for CategoryIntent.Category, v11);
  *(_BYTE *)(v10 + 8 * v6) = 8;
  _EnumURLRepresentation.EnumSingleURLRepresentation.init(stringLiteral:)(0xD00000000000003ELL, 0x80000001000BB250, &type metadata for CategoryIntent.Category, v11);
  *(_BYTE *)(v10 + 9 * v6) = 9;
  _EnumURLRepresentation.EnumSingleURLRepresentation.init(stringLiteral:)(0xD000000000000037, 0x80000001000BB290, &type metadata for CategoryIntent.Category, v11);
  *(_BYTE *)(v10 + 10 * v6) = 10;
  _EnumURLRepresentation.EnumSingleURLRepresentation.init(stringLiteral:)(0xD000000000000044, 0x80000001000BB2D0, &type metadata for CategoryIntent.Category, v11);
  *(_BYTE *)(v10 + 11 * v6) = 11;
  _EnumURLRepresentation.EnumSingleURLRepresentation.init(stringLiteral:)(0xD000000000000032, 0x80000001000BB320, &type metadata for CategoryIntent.Category, v11);
  *(_BYTE *)(v10 + 12 * v6) = 12;
  _EnumURLRepresentation.EnumSingleURLRepresentation.init(stringLiteral:)(0xD000000000000041, 0x80000001000BB360, &type metadata for CategoryIntent.Category, v11);
  *(_BYTE *)(v10 + 13 * v6) = 13;
  _EnumURLRepresentation.EnumSingleURLRepresentation.init(stringLiteral:)(0xD000000000000043, 0x80000001000BB3B0, &type metadata for CategoryIntent.Category, v11);
  v12 = sub_10007C510(v9);
  return _EnumURLRepresentation.init(_:)(v12, &type metadata for CategoryIntent.Category, v11);
}

uint64_t sub_10005A0BC(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_10005A0F8 + 4 * byte_1000B3AB0[a1]))(0xD000000000000029, 0x80000001000B7A20);
}

uint64_t sub_10005A0F8()
{
  uint64_t v0;

  return v0 + 2;
}

uint64_t sub_10005A1D4(unsigned __int8 *a1, unsigned __int8 *a2)
{
  unsigned __int8 v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  char v10;

  v2 = *a2;
  v3 = sub_10005A0BC(*a1);
  v5 = v4;
  v6 = sub_10005A0BC(v2);
  if (v3 == v6 && v5 == v7)
  {
    v10 = 1;
    v9 = v5;
  }
  else
  {
    v9 = v7;
    v10 = _stringCompareWithSmolCheck(_:_:expecting:)(v3, v5, v6, v7, 0);
  }
  swift_bridgeObjectRelease(v5);
  swift_bridgeObjectRelease(v9);
  return v10 & 1;
}

unint64_t sub_10005A260()
{
  unint64_t result;

  result = qword_1000EE640;
  if (!qword_1000EE640)
  {
    result = swift_getWitnessTable(&unk_1000B3AC8, &type metadata for CategoryIntent.Category);
    atomic_store(result, (unint64_t *)&qword_1000EE640);
  }
  return result;
}

Swift::Int sub_10005A2A4()
{
  unsigned __int8 *v0;
  unsigned __int8 v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD v6[9];

  v1 = *v0;
  Hasher.init(_seed:)(v6, 0);
  v2 = sub_10005A0BC(v1);
  v4 = v3;
  String.hash(into:)(v6, v2, v3);
  swift_bridgeObjectRelease(v4);
  return Hasher._finalize()();
}

double sub_10005A304(uint64_t a1)
{
  unsigned __int8 *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  double result;

  v3 = sub_10005A0BC(*v1);
  v5 = v4;
  String.hash(into:)(a1, v3, v4);
  *(_QWORD *)&result = swift_bridgeObjectRelease(v5).n128_u64[0];
  return result;
}

Swift::Int sub_10005A344(uint64_t a1)
{
  unsigned __int8 *v1;
  unsigned __int8 v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD v7[9];

  v2 = *v1;
  Hasher.init(_seed:)(v7, a1);
  v3 = sub_10005A0BC(v2);
  v5 = v4;
  String.hash(into:)(v7, v3, v4);
  swift_bridgeObjectRelease(v5);
  return Hasher._finalize()();
}

unint64_t sub_10005A3A0@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = sub_10005B564(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_10005A3CC@<X0>(uint64_t *a1@<X8>)
{
  unsigned __int8 *v1;
  uint64_t result;
  uint64_t v4;

  result = sub_10005A0BC(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

unint64_t sub_10005A3F8()
{
  unint64_t result;

  result = qword_1000EE648;
  if (!qword_1000EE648)
  {
    result = swift_getWitnessTable(&unk_1000B3BE0, &type metadata for CategoryIntent.Category);
    atomic_store(result, (unint64_t *)&qword_1000EE648);
  }
  return result;
}

unint64_t sub_10005A440()
{
  unint64_t result;

  result = qword_1000EE650;
  if (!qword_1000EE650)
  {
    result = swift_getWitnessTable(&unk_1000B3C18, &type metadata for CategoryIntent.Category);
    atomic_store(result, (unint64_t *)&qword_1000EE650);
  }
  return result;
}

unint64_t sub_10005A488()
{
  unint64_t result;

  result = qword_1000EE658;
  if (!qword_1000EE658)
  {
    result = swift_getWitnessTable(&unk_1000B3B30, &type metadata for CategoryIntent.Category);
    atomic_store(result, (unint64_t *)&qword_1000EE658);
  }
  return result;
}

void *sub_10005A4CC()
{
  return &protocol witness table for String;
}

unint64_t sub_10005A4DC()
{
  unint64_t result;

  result = qword_1000EE660;
  if (!qword_1000EE660)
  {
    result = swift_getWitnessTable(&unk_1000B3B68, &type metadata for CategoryIntent.Category);
    atomic_store(result, (unint64_t *)&qword_1000EE660);
  }
  return result;
}

unint64_t sub_10005A524()
{
  unint64_t result;

  result = qword_1000EE668;
  if (!qword_1000EE668)
  {
    result = swift_getWitnessTable(&unk_1000B3C48, &type metadata for CategoryIntent.Category);
    atomic_store(result, (unint64_t *)&qword_1000EE668);
  }
  return result;
}

uint64_t sub_10005A568@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  if (qword_1000EC090 != -1)
    swift_once(&qword_1000EC090, sub_100059C9C);
  sub_10005B508(0, &qword_1000EE718, (uint64_t (*)(void))sub_10005A4DC, (uint64_t (*)(uint64_t, ValueMetadata *, uint64_t))&type metadata accessor for _EnumURLRepresentation);
  v3 = v2;
  v4 = sub_10001C86C(v2, (uint64_t)qword_1000F1000);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 16))(a1, v4, v3);
}

unint64_t sub_10005A5F4()
{
  unint64_t result;

  result = qword_1000EE670;
  if (!qword_1000EE670)
  {
    result = swift_getWitnessTable(&unk_1000B3C70, &type metadata for CategoryIntent.Category);
    atomic_store(result, (unint64_t *)&qword_1000EE670);
  }
  return result;
}

unint64_t sub_10005A63C()
{
  unint64_t result;

  result = qword_1000EE678;
  if (!qword_1000EE678)
  {
    result = swift_getWitnessTable(&unk_1000B3C98, &type metadata for CategoryIntent.Category);
    atomic_store(result, (unint64_t *)&qword_1000EE678);
  }
  return result;
}

unint64_t sub_10005A688()
{
  unint64_t result;

  result = qword_1000EE680;
  if (!qword_1000EE680)
  {
    result = swift_getWitnessTable(&unk_1000B3D18, &type metadata for CategoryIntent.Category);
    atomic_store(result, (unint64_t *)&qword_1000EE680);
  }
  return result;
}

uint64_t sub_10005A6CC(uint64_t a1)
{
  uint64_t v1;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = sub_10005B3D0();
  v4 = _URLRepresentableEnum.urlRepresentationParameter.getter(a1, v3);
  return sub_10005B478(*(uint64_t (**)(uint64_t, uint64_t))(v1 + 8), v1, v4, v5);
}

uint64_t sub_10005A714@<X0>(uint64_t a1@<X8>)
{
  return sub_100052180(&qword_1000EC080, (uint64_t (*)(_QWORD))&type metadata accessor for TypeDisplayRepresentation, (uint64_t)qword_1000F0FE0, (uint64_t)sub_100058D3C, a1);
}

uint64_t sub_10005A738(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10005AD40(a1, a2, a3, (uint64_t (*)(void))sub_10005A4DC, (uint64_t)&opaque type descriptor for <<opaque return type of static AppEnum.defaultResolverSpecification>>);
}

uint64_t sub_10005A74C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10005A4DC();
  return static AppEnum.defaultResolverSpecification.getter(a1, v2);
}

unint64_t sub_10005A788()
{
  unint64_t result;

  result = qword_1000EE690;
  if (!qword_1000EE690)
  {
    result = swift_getWitnessTable(&unk_1000B3D58, &type metadata for CategoryIntent.Category);
    atomic_store(result, (unint64_t *)&qword_1000EE690);
  }
  return result;
}

unint64_t sub_10005A7D0()
{
  unint64_t result;

  result = qword_1000EE698;
  if (!qword_1000EE698)
  {
    result = swift_getWitnessTable(&unk_1000B3D80, &type metadata for CategoryIntent.Category);
    atomic_store(result, (unint64_t *)&qword_1000EE698);
  }
  return result;
}

unint64_t sub_10005A818()
{
  unint64_t result;

  result = qword_1000EE6A0;
  if (!qword_1000EE6A0)
  {
    result = swift_getWitnessTable(&unk_1000B3AF0, &type metadata for CategoryIntent.Category);
    atomic_store(result, (unint64_t *)&qword_1000EE6A0);
  }
  return result;
}

uint64_t sub_10005A85C()
{
  if (qword_1000EC088 != -1)
    swift_once(&qword_1000EC088, sub_100058E64);
  return swift_bridgeObjectRetain(qword_1000F0FF8);
}

uint64_t sub_10005A89C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10005A688();
  return CaseDisplayRepresentable.localizedStringResource.getter(a1, v2);
}

unint64_t sub_10005A8D8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000EE6A8;
  if (!qword_1000EE6A8)
  {
    sub_10005A920();
    result = swift_getWitnessTable(&protocol conformance descriptor for [A], v1);
    atomic_store(result, (unint64_t *)&qword_1000EE6A8);
  }
  return result;
}

void sub_10005A920()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1000EE6B0)
  {
    v0 = type metadata accessor for Array(0, &type metadata for CategoryIntent.Category);
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1000EE6B0);
  }
}

void sub_10005A974(_QWORD *a1@<X8>)
{
  *a1 = &off_1000DB900;
}

unint64_t sub_10005A988()
{
  unint64_t result;

  result = qword_1000EE6B8;
  if (!qword_1000EE6B8)
  {
    result = swift_getWitnessTable(&unk_1000B3E48, &type metadata for CategoryIntent);
    atomic_store(result, (unint64_t *)&qword_1000EE6B8);
  }
  return result;
}

uint64_t sub_10005A9CC()
{
  uint64_t v0;

  v0 = type metadata accessor for LocalizedStringResource(0);
  sub_10001C884(v0, qword_1000F1018);
  sub_10001C86C(v0, (uint64_t)qword_1000F1018);
  return LocalizedStringResource.init(stringLiteral:)(0xD00000000000001BLL, 0x80000001000BAF50);
}

uint64_t sub_10005AA2C()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  sub_1000076D8(0, &qword_1000EC948, (uint64_t (*)(uint64_t))&type metadata accessor for LocalizedStringResource, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
  __chkstk_darwin(v0);
  v2 = (char *)&v12 - v1;
  v3 = type metadata accessor for LocalizedStringResource(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v12 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000076D8(0, &qword_1000EC940, (uint64_t (*)(uint64_t))&type metadata accessor for IntentDescription, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
  v8 = v7;
  sub_10001C884(v7, qword_1000F1030);
  v9 = sub_10001C86C(v8, (uint64_t)qword_1000F1030);
  LocalizedStringResource.init(stringLiteral:)(0xD00000000000008FLL, 0x80000001000BAE50);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v4 + 56))(v2, 1, 1, v3);
  IntentDescription.init(_:categoryName:searchKeywords:)(v6, v2, _swiftEmptyArrayStorage);
  v10 = type metadata accessor for IntentDescription(0);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56))(v9, 0, 1, v10);
}

_QWORD *sub_10005AB90@<X0>(_BYTE *a1@<X8>)
{
  _QWORD *result;
  uint64_t v3;

  result = IntentParameter.wrappedValue.getter(&v3);
  *a1 = v3;
  return result;
}

uint64_t sub_10005ABC8(char *a1)
{
  char v2;

  v2 = *a1;
  return IntentParameter.wrappedValue.setter(&v2);
}

unint64_t sub_10005AC04()
{
  unint64_t result;

  result = qword_1000EE6C0;
  if (!qword_1000EE6C0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Never, &type metadata for Never);
    atomic_store(result, (unint64_t *)&qword_1000EE6C0);
  }
  return result;
}

uint64_t sub_10005AC48(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  unint64_t v5;

  v4 = sub_10005B348();
  v5 = sub_10005B3D0();
  return static _URLRepresentableIntent<>.urlRepresentation.getter(a1, v4, a2, v5);
}

unint64_t sub_10005ACA0()
{
  unint64_t result;

  result = qword_1000EE6C8;
  if (!qword_1000EE6C8)
  {
    result = swift_getWitnessTable(&unk_1000B3F00, &type metadata for CategoryIntent);
    atomic_store(result, (unint64_t *)&qword_1000EE6C8);
  }
  return result;
}

unint64_t sub_10005ACE8()
{
  unint64_t result;

  result = qword_1000EE6D0;
  if (!qword_1000EE6D0)
  {
    result = swift_getWitnessTable(&unk_1000B3F28, &type metadata for CategoryIntent);
    atomic_store(result, (unint64_t *)&qword_1000EE6D0);
  }
  return result;
}

uint64_t sub_10005AD2C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10005AD40(a1, a2, a3, (uint64_t (*)(void))sub_10001ADA0, (uint64_t)&opaque type descriptor for <<opaque return type of static AppIntent.parameterSummary>>);
}

uint64_t sub_10005AD40(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void), uint64_t a5)
{
  _QWORD v7[2];

  v7[0] = a2;
  v7[1] = a4();
  return swift_getOpaqueTypeConformance2(v7, a5, 1);
}

uint64_t sub_10005AD80@<X0>(uint64_t a1@<X8>)
{
  return sub_100052180(&qword_1000EC098, (uint64_t (*)(_QWORD))&type metadata accessor for LocalizedStringResource, (uint64_t)qword_1000F1018, (uint64_t)sub_10005A9CC, a1);
}

uint64_t sub_10005ADA4(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10005B348();
  return static OpenIntent.openAppWhenRun.getter(a1, v2);
}

uint64_t sub_10005ADCC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  if (qword_1000EC0A0 != -1)
    swift_once(&qword_1000EC0A0, sub_10005AA2C);
  sub_1000076D8(0, &qword_1000EC940, (uint64_t (*)(uint64_t))&type metadata accessor for IntentDescription, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
  v3 = sub_10001C86C(v2, (uint64_t)qword_1000F1030);
  return sub_10005566C(v3, a1);
}

uint64_t sub_10005AE40(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;

  v5 = (_QWORD *)swift_task_alloc(async function pointer to _URLRepresentableIntent<>.perform()[1]);
  *(_QWORD *)(v2 + 16) = v5;
  v6 = sub_10005B348();
  v7 = sub_10005B38C();
  v8 = sub_10005B3D0();
  *v5 = v2;
  v5[1] = sub_10005AECC;
  return _URLRepresentableIntent<>.perform()(a1, a2, v6, v7, v8);
}

uint64_t sub_10005AECC()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t result;

  v2 = *(_QWORD *)(*v1 + 16);
  v3 = *v1;
  result = swift_task_dealloc(v2);
  if (v0)
    return (*(uint64_t (**)(void))(v3 + 8))();
  return result;
}

uint64_t sub_10005AF28@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = sub_10005B0E0();
  *a1 = result;
  return result;
}

uint64_t sub_10005AF4C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10001ADA0();
  return static AppIntent.persistentIdentifier.getter(a1, v2);
}

ValueMetadata *type metadata accessor for CategoryIntent()
{
  return &type metadata for CategoryIntent;
}

uint64_t getEnumTagSinglePayload for CategoryIntent.Category(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xF3)
    goto LABEL_17;
  if (a2 + 13 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 13) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 13;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 13;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 13;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 0xE;
  v8 = v6 - 14;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for CategoryIntent.Category(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 13 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 13) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF3)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF2)
    return ((uint64_t (*)(void))((char *)&loc_10005B060 + 4 * byte_1000B3AC3[v4]))();
  *a1 = a2 + 13;
  return ((uint64_t (*)(void))((char *)sub_10005B094 + 4 * byte_1000B3ABE[v4]))();
}

uint64_t sub_10005B094(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10005B09C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10005B0A4);
  return result;
}

uint64_t sub_10005B0B0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10005B0B8);
  *(_BYTE *)result = a2 + 13;
  return result;
}

uint64_t sub_10005B0BC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10005B0C4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for CategoryIntent.Category()
{
  return &type metadata for CategoryIntent.Category;
}

uint64_t sub_10005B0E0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _BYTE *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE *v16;
  uint64_t v17;
  void (*v18)(_BYTE *, uint64_t, uint64_t, uint64_t);
  unint64_t v19;
  _BYTE v21[15];
  char v22;

  v0 = type metadata accessor for InputConnectionBehavior(0);
  v1 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin(v0);
  v3 = &v21[-((v2 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_1000076D8(0, &qword_1000EE508, (uint64_t (*)(uint64_t))&type metadata accessor for IntentDialog, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
  v5 = __chkstk_darwin(v4);
  v7 = &v21[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v5);
  v9 = &v21[-v8];
  sub_1000076D8(0, &qword_1000EC948, (uint64_t (*)(uint64_t))&type metadata accessor for LocalizedStringResource, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
  __chkstk_darwin(v10);
  v12 = &v21[-v11];
  v13 = type metadata accessor for LocalizedStringResource(0);
  v14 = *(_QWORD *)(v13 - 8);
  __chkstk_darwin(v13);
  v16 = &v21[-((v15 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_10005B508(0, &qword_1000EE6E0, (uint64_t (*)(void))sub_10001B824, (uint64_t (*)(uint64_t, ValueMetadata *, uint64_t))&type metadata accessor for IntentParameter);
  LocalizedStringResource.init(stringLiteral:)(0x79726F6765746143, 0xE800000000000000);
  LocalizedStringResource.init(stringLiteral:)(0xD000000000000046, 0x80000001000BAF00);
  (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v14 + 56))(v12, 0, 1, v13);
  v22 = 14;
  v17 = type metadata accessor for IntentDialog(0);
  v18 = *(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 56);
  v18(v9, 1, 1, v17);
  v18(v7, 1, 1, v17);
  (*(void (**)(_BYTE *, _QWORD, uint64_t))(v1 + 104))(v3, enum case for InputConnectionBehavior.default(_:), v0);
  v19 = sub_10005A4DC();
  return IntentParameter<>.init(title:description:default:requestValueDialog:requestDisambiguationDialog:inputConnectionBehavior:supportedValues:)(v16, v12, &v22, v9, v7, v3, &off_1000DB900, v19);
}

unint64_t sub_10005B348()
{
  unint64_t result;

  result = qword_1000EE6E8;
  if (!qword_1000EE6E8)
  {
    result = swift_getWitnessTable(&unk_1000B3DB8, &type metadata for CategoryIntent);
    atomic_store(result, (unint64_t *)&qword_1000EE6E8);
  }
  return result;
}

unint64_t sub_10005B38C()
{
  unint64_t result;

  result = qword_1000EE6F0;
  if (!qword_1000EE6F0)
  {
    result = swift_getWitnessTable(&unk_1000B3E08, &type metadata for CategoryIntent);
    atomic_store(result, (unint64_t *)&qword_1000EE6F0);
  }
  return result;
}

unint64_t sub_10005B3D0()
{
  unint64_t result;

  result = qword_1000EE6F8;
  if (!qword_1000EE6F8)
  {
    result = swift_getWitnessTable(&unk_1000B3BA8, &type metadata for CategoryIntent.Category);
    atomic_store(result, (unint64_t *)&qword_1000EE6F8);
  }
  return result;
}

void sub_10005B414(uint64_t a1)
{
  uint64_t v2;
  unint64_t TupleTypeMetadata2;
  uint64_t v4;

  if (!qword_1000EE708)
  {
    v2 = type metadata accessor for DisplayRepresentation(255);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2(a1, &type metadata for CategoryIntent.Category, v2, 0, 0);
    if (!v4)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_1000EE708);
  }
}

uint64_t sub_10005B478(uint64_t (*a1)(uint64_t, uint64_t), uint64_t a2, uint64_t a3, uint64_t a4)
{
  return a1(a3, a4);
}

void sub_10005B48C(uint64_t a1)
{
  uint64_t v2;
  unint64_t TupleTypeMetadata2;
  uint64_t v4;

  if (!qword_1000EE728)
  {
    sub_10005B508(255, &qword_1000EE730, (uint64_t (*)(void))sub_10005A4DC, (uint64_t (*)(uint64_t, ValueMetadata *, uint64_t))&type metadata accessor for _EnumURLRepresentation.EnumSingleURLRepresentation);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2(a1, &type metadata for CategoryIntent.Category, v2, 0, 0);
    if (!v4)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_1000EE728);
  }
}

void sub_10005B508(uint64_t a1, unint64_t *a2, uint64_t (*a3)(void), uint64_t (*a4)(uint64_t, ValueMetadata *, uint64_t))
{
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;

  if (!*a2)
  {
    v7 = a3();
    v8 = a4(a1, &type metadata for CategoryIntent.Category, v7);
    if (!v9)
      atomic_store(v8, a2);
  }
}

unint64_t sub_10005B564(Swift::String string)
{
  void *object;
  Swift::String v2;
  unint64_t v3;

  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1000DC1A0, v2);
  swift_bridgeObjectRelease(object);
  if (v3 >= 0xE)
    return 14;
  else
    return v3;
}

Swift::String_optional __swiftcall PersonalizedFeedDataSource.reuseIdentifierForItem(with:)(Swift::String with)
{
  void *object;
  uint64_t countAndFlagsBits;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  unint64_t v11;
  uint64_t v12;
  void *v13;
  int v14;
  int v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  void *v24;
  Swift::String_optional result;
  uint64_t v26;
  id v27;
  void *v28;
  _QWORD v29[5];

  object = with._object;
  countAndFlagsBits = with._countAndFlagsBits;
  v3 = type metadata accessor for HostingCellReusePolicy(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v26 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for ContentKind(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)&v26 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  dispatch thunk of FetchedResultsControllerDataSource.item(for:)(v29, countAndFlagsBits, object);
  if (!v29[3])
  {
    sub_10005B76C((uint64_t)v29);
    goto LABEL_6;
  }
  v11 = sub_100013434();
  v12 = type metadata accessor for FeedItem(0);
  if ((swift_dynamicCast(&v28, v29, v11, v12, 6) & 1) == 0)
  {
LABEL_6:
    v18 = 0;
    v19 = 0;
    goto LABEL_9;
  }
  v13 = v28;
  FeedItem.contentKind.getter();
  v14 = (*(uint64_t (**)(char *, uint64_t))(v8 + 88))(v10, v7);
  v15 = enum case for ContentKind.app(_:);
  v27 = v13;
  v16 = FeedItem.reuseIdentifier.getter();
  v18 = v16;
  v19 = v17;
  if (v14 == v15)
  {
    HostingCellReusePolicy.init(reuseIdentifier:)(v16, v17);
    v20 = type metadata accessor for HostViewCell(0);
    v21 = HostingCellReusePolicy.override<A>(reusableCellClass:)(v20, v20, &protocol witness table for HostViewCell);
    v18 = HostingCellReusePolicy.reuseIdentifier.getter(v21);
    v19 = v22;
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  }

LABEL_9:
  v23 = v18;
  v24 = v19;
  result.value._object = v24;
  result.value._countAndFlagsBits = v23;
  return result;
}

uint64_t sub_10005B76C(uint64_t a1)
{
  uint64_t v2;

  sub_10000E944(0, &qword_1000EE738, (uint64_t (*)(uint64_t))sub_100013434);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void PersonalizedFeedDataSource.init(_:)()
{
  _swift_stdlib_reportUnimplementedInitializer("Health.PersonalizedFeedDataSource", 33, "init(_:)", 8, 0);
  __break(1u);
}

void sub_10005B7E4()
{
  uint64_t v0;

}

id PersonalizedFeedDataSource.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for PersonalizedFeedDataSource(0);
  return objc_msgSendSuper2(&v2, "dealloc");
}

void sub_10005B828(uint64_t a1)
{

}

void sub_10005B838(uint64_t a1@<X2>, uint64_t *a2@<X8>)
{
  PersonalizedFeedDataSource.supplementaryItem(ofKind:at:)(a1, a2);
}

uint64_t PersonalizedFeedDataSource.layout(for:)(uint64_t a1)
{
  _BYTE *v1;
  _BYTE *v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  Swift::Int v27;
  uint64_t v28;
  uint64_t v29;
  Swift::Int v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  id v34;
  id v35;
  void *v36;
  uint64_t v37;
  double v38;
  void (*v39)(uint64_t *, _QWORD);
  uint64_t v40;
  id v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  NSObject *v50;
  os_log_type_t v51;
  char *v52;
  uint64_t v53;
  uint8_t *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  char *v63;
  void (*v64)(char *, uint64_t, uint64_t);
  uint64_t v65;
  uint64_t v66;
  char *v67;
  id v68;
  char *v69;
  _BYTE *v70;
  id v71;
  _BYTE *v72;
  NSObject *v73;
  os_log_type_t v74;
  int v75;
  uint64_t v76;
  id v77;
  uint64_t v78;
  unint64_t v79;
  unint64_t v80;
  double v81;
  unsigned int v82;
  char *v83;
  uint64_t v84;
  Swift::Int v85;
  void *v86;
  void (*v87)(char *, uint64_t);
  char *v88;
  uint64_t v89;
  char *v90;
  uint64_t v91;
  void *v92;
  uint64_t v93;
  uint64_t v94;
  void (*v95)(char *, uint64_t);
  char *v96;
  uint64_t v97;
  _QWORD v98[4];
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  char *v102;
  char *v103;
  char *v104;
  char *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  char *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  char *v114;
  id v115;
  uint64_t v116;
  uint64_t v117;

  v2 = v1;
  v109 = type metadata accessor for CollectionViewLayoutContext(0);
  v111 = *(_QWORD *)(v109 - 8);
  v4 = __chkstk_darwin(v109);
  v6 = (char *)v98 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __chkstk_darwin(v4);
  v102 = (char *)v98 - v8;
  __chkstk_darwin(v7);
  v105 = (char *)v98 - v9;
  v10 = type metadata accessor for Logger(0);
  v107 = *(_QWORD *)(v10 - 8);
  v108 = v10;
  v11 = __chkstk_darwin(v10);
  v114 = (char *)v98 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v103 = (char *)v98 - v13;
  v101 = type metadata accessor for GridLayoutEngine(0);
  v100 = *(_QWORD *)(v101 - 8);
  v14 = __chkstk_darwin(v101);
  v98[0] = (char *)v98 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  v98[1] = (char *)v98 - v16;
  v99 = type metadata accessor for ListLayoutConfiguration(0);
  v98[3] = *(_QWORD *)(v99 - 8);
  __chkstk_darwin(v99);
  v98[2] = (char *)v98 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = type metadata accessor for LayoutConfiguration(0);
  v112 = *(_QWORD *)(v18 - 8);
  v113 = v18;
  v19 = __chkstk_darwin(v18);
  v110 = (char *)v98 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v19);
  v104 = (char *)v98 - v21;
  v22 = type metadata accessor for IndexPath(0);
  v23 = *(_QWORD *)(v22 - 8);
  v24 = __chkstk_darwin(v22);
  v26 = (char *)v98 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = CollectionViewLayoutContext.section.getter(v24);
  v28 = type metadata accessor for PersonalizedFeedDataSource(0);
  v29 = sub_100013198(&qword_1000EE158, type metadata accessor for PersonalizedFeedDataSource, (uint64_t)&protocol conformance descriptor for FetchedResultsControllerDataSource<A>);
  v30 = SnapshotDataSource.numberOfItems(in:)(v27);
  if (v30 < 1)
  {
LABEL_8:
    v46 = v114;
    static Logger.view.getter(v30);
    v47 = v111;
    v48 = v109;
    v49 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v111 + 16))(v6, a1, v109);
    v50 = Logger.logObject.getter(v49);
    v51 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v50, v51))
    {
      v52 = v6;
      v53 = v47;
      v54 = (uint8_t *)swift_slowAlloc(12, -1);
      *(_DWORD *)v54 = 134217984;
      v55 = CollectionViewLayoutContext.section.getter(v54);
      (*(void (**)(char *, uint64_t))(v53 + 8))(v52, v48);
      v116 = v55;
      v46 = v114;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v116, &v117, v54 + 4, v54 + 12);
      _os_log_impl((void *)&_mh_execute_header, v50, v51, "PersonalizedFeedDataSource section %ld is empty but we've been asked for a layout; returning empty",
        v54,
        0xCu);
      swift_slowDealloc(v54, -1, -1);
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v47 + 8))(v6, v48);
    }
    v57 = v107;
    v56 = v108;

    v58 = (*(uint64_t (**)(char *, uint64_t))(v57 + 8))(v46, v56);
    v59 = v110;
    v60 = static LayoutConfiguration.empty.getter(v58);
    v61 = LayoutConfiguration.layoutSection.getter(v60);
    (*(void (**)(char *, uint64_t))(v112 + 8))(v59, v113);
    return v61;
  }
  v106 = a1;
  v31 = CollectionViewLayoutContext.section.getter(v30);
  IndexPath.init(item:section:)(0, v31);
  SnapshotDataSource.item(at:)(&v116, v26, v28, v29);
  (*(void (**)(char *, uint64_t))(v23 + 8))(v26, v22);
  v32 = sub_100013434();
  v33 = type metadata accessor for FeedItem(0);
  v30 = swift_dynamicCast(&v115, &v116, v32, v33, 6);
  if ((v30 & 1) == 0)
  {
    a1 = v106;
    goto LABEL_8;
  }
  v34 = v115;
  v35 = objc_msgSend(v115, "feedSection");
  if (v35)
  {
    v36 = v35;
    v37 = static LayoutConfiguration.card.getter(v35);
    if (v2[qword_1000EE750] == 1)
    {
      v38 = LayoutConfiguration.interItemInset.getter(v37);
      v39 = (void (*)(uint64_t *, _QWORD))LayoutConfiguration.additionalContentInsets.modify(&v116);
      *(double *)(v40 + 16) = v38;
      v39(&v116, 0);
    }
    v41 = objc_msgSend(v36, "identifier");
    v42 = static String._unconditionallyBridgeFromObjectiveC(_:)(v41);
    v44 = v43;

    v45 = (char *)&loc_10005BC2C
        + *((int *)qword_10005C3F0 + ForYouSectionKind.init(rawValue:)(v42, v44));
    __asm { BR              X10 }
  }
  v114 = (char *)v28;
  v63 = v103;
  static Logger.view.getter(0);
  v64 = *(void (**)(char *, uint64_t, uint64_t))(v111 + 16);
  v65 = v106;
  v66 = v109;
  v64(v105, v106, v109);
  v67 = v102;
  v64(v102, v65, v66);
  v68 = v34;
  v69 = v67;
  v70 = v2;
  v71 = v68;
  v72 = v70;
  v73 = Logger.logObject.getter(v72);
  v74 = static os_log_type_t.error.getter();
  v75 = v74;
  if (os_log_type_enabled(v73, v74))
  {
    v76 = swift_slowAlloc(38, -1);
    v106 = swift_slowAlloc(32, -1);
    v116 = v106;
    *(_DWORD *)v76 = 136315906;
    LODWORD(v104) = v75;
    v77 = objc_msgSend(v71, "uniqueIdentifier");
    v78 = static String._unconditionallyBridgeFromObjectiveC(_:)(v77);
    v80 = v79;

    v115 = (id)sub_100012B20(v78, v80, &v116);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v115, &v116, v76 + 4, v76 + 12);

    *(_QWORD *)&v81 = swift_bridgeObjectRelease(v80).n128_u64[0];
    *(_WORD *)(v76 + 12) = 1024;
    v82 = objc_msgSend(v71, "isDeleted", v81);

    LODWORD(v115) = v82;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v115, (char *)&v115 + 4, v76 + 14, v76 + 18);

    *(_WORD *)(v76 + 18) = 2048;
    v83 = v105;
    v85 = CollectionViewLayoutContext.section.getter(v84);
    v86 = (void *)SnapshotDataSource.numberOfItems(in:)(v85);

    v87 = *(void (**)(char *, uint64_t))(v111 + 8);
    v88 = v83;
    v89 = v109;
    v87(v88, v109);
    v115 = v86;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v115, &v116, v76 + 20, v76 + 28);

    *(_WORD *)(v76 + 28) = 2048;
    v90 = v102;
    v92 = (void *)CollectionViewLayoutContext.section.getter(v91);
    v87(v90, v89);
    v115 = v92;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v115, &v116, v76 + 30, v76 + 38);
    _os_log_impl((void *)&_mh_execute_header, v73, (os_log_type_t)v104, "feedItem %s is in the feed without a section! isDeleted=%{BOOL}d, %ld items in section %ld", (uint8_t *)v76, 0x26u);
    v93 = v106;
    swift_arrayDestroy(v106, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v93, -1, -1);
    swift_slowDealloc(v76, -1, -1);

    v94 = (*(uint64_t (**)(char *, uint64_t))(v107 + 8))(v103, v108);
  }
  else
  {
    v95 = *(void (**)(char *, uint64_t))(v111 + 8);
    v95(v69, v66);

    v95(v105, v66);
    v94 = (*(uint64_t (**)(char *, uint64_t))(v107 + 8))(v63, v108);
  }
  v96 = v110;
  v97 = static LayoutConfiguration.empty.getter(v94);
  v61 = LayoutConfiguration.layoutSection.getter(v97);

  (*(void (**)(char *, uint64_t))(v112 + 8))(v96, v113);
  return v61;
}

void sub_10005C130()
{
  id v0;
  void *v1;
  id v2;
  unsigned __int8 v3;

  v0 = objc_msgSend((id)objc_opt_self(_HKBehavior), "sharedBehavior");
  if (v0)
  {
    v1 = v0;
    v2 = objc_msgSend(v0, "features");

    if (v2)
    {
      v3 = objc_msgSend(v2, "stanley");

      if ((v3 & 1) != 0)
        JUMPOUT(0x10005C194);
      JUMPOUT(0x10005C2B8);
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  JUMPOUT(0x10005C3E8);
}

void sub_10005C1FC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  id v3;
  void *v4;
  id v5;
  unsigned int v6;
  uint64_t v7;

  v3 = objc_msgSend((id)objc_opt_self(_HKBehavior), "sharedBehavior");
  if (v3)
  {
    v4 = v3;
    v5 = objc_msgSend(v3, "features");

    if (v5)
    {
      v6 = objc_msgSend(v5, "stanley");

      if (v6)
      {
        v7 = *(_QWORD *)(v2 - 304);
        static GridLayoutEngine.articles.getter();
        GridLayoutEngine.layout(for:)(v0);
        if (v1)
          JUMPOUT(0x10005C284);
        (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v2 - 264) + 8))(v7, *(_QWORD *)(v2 - 256));
        objc_msgSend((id)objc_opt_self(NSCollectionLayoutDimension), "estimatedDimension:", 100.0);
        JUMPOUT(0x10005C3A0);
      }
      JUMPOUT(0x10005C2B8);
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  JUMPOUT(0x10005C3F0);
}

void sub_10005C308()
{
  void *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *(_QWORD *)(v2 - 288);
  v4 = static ListLayoutConfiguration.apps.getter();
  v5 = CollectionViewLayoutContext.environment.getter(v4);
  ListLayoutConfiguration.layout(for:)(v5);

  swift_unknownObjectRelease(v5);
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v2 - 280) + 8))(v3, *(_QWORD *)(v2 - 272));
  JUMPOUT(0x10005C3C8);
}

uint64_t sub_10005C404(uint64_t a1)
{
  return PersonalizedFeedDataSource.layout(for:)(a1);
}

uint64_t sub_10005C424()
{
  return type metadata accessor for PersonalizedFeedDataSource(0);
}

uint64_t sub_10005C42C(uint64_t a1, _QWORD *a2, uint64_t a3, void *a4, char a5)
{
  _BYTE *v5;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  void *v13;
  void *v14;
  Class v15;
  id v16;
  void *v17;
  _QWORD *v18;
  unint64_t v19;
  int64_t v20;
  int64_t v21;
  uint64_t isUniquelyReferenced_nonNull_native;
  unint64_t v23;
  int64_t v24;
  _QWORD *v25;
  int64_t v26;
  _QWORD *v27;
  Class isa;
  id v29;
  uint64_t v30;

  v5[qword_1000EE750] = a5;
  v10 = a2[3];
  v11 = a2[4];
  sub_100012E04(a2, v10);
  v12 = v5;
  v13 = (void *)dispatch thunk of HealthExperienceStore.viewContext.getter(v10, v11);
  v14 = (void *)NSManagedObjectContext.makeFeedItemsFetchedResultsController(for:associatedProfileIdentifier:)(a1, a3);

  v15 = (Class)objc_msgSend(v14, "fetchRequest");
  v16 = -[objc_class relationshipKeyPathsForPrefetching](v15, "relationshipKeyPathsForPrefetching");
  if (!v16)
  {
    -[objc_class setRelationshipKeyPathsForPrefetching:](v15, "setRelationshipKeyPathsForPrefetching:", 0);
    goto LABEL_14;
  }
  v17 = v16;
  v18 = (_QWORD *)static Array._unconditionallyBridgeFromObjectiveC(_:)(v16, &type metadata for String);

  v20 = v18[2];
  v21 = v20 + 2;
  if (__OFADD__(v20, 2))
  {
    __break(1u);
  }
  else
  {
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v18);
    if ((isUniquelyReferenced_nonNull_native & 1) == 0 || (v19 = v18[3], v23 = v19 >> 1, (uint64_t)(v19 >> 1) < v21))
    {
      if (v20 <= v21)
        v24 = v20 + 2;
      else
        v24 = v20;
      v18 = sub_100029E64((_QWORD *)isUniquelyReferenced_nonNull_native, v24, 1, v18);
      v19 = v18[3];
      v23 = v19 >> 1;
    }
    v21 = v18[2];
    v20 = v21 + 1;
    if (v23 > v21)
      goto LABEL_10;
  }
  v18 = sub_100029E64((_QWORD *)(v19 > 1), v20, 1, v18);
  v19 = v18[3];
  v23 = v19 >> 1;
LABEL_10:
  v18[2] = v20;
  v25 = &v18[2 * v21];
  v25[4] = 0x7463655364656566;
  v25[5] = 0xEB000000006E6F69;
  v26 = v21 + 2;
  if ((uint64_t)v23 < v26)
    v18 = sub_100029E64((_QWORD *)(v19 > 1), v26, 1, v18);
  v18[2] = v26;
  v27 = &v18[2 * v20];
  v27[4] = 0xD000000000000010;
  v27[5] = 0x80000001000BB500;
  isa = Array._bridgeToObjectiveC()().super.isa;
  -[objc_class setRelationshipKeyPathsForPrefetching:](v15, "setRelationshipKeyPathsForPrefetching:", isa, swift_bridgeObjectRelease(v18).n128_f64[0]);

  v15 = isa;
LABEL_14:

  *(_QWORD *)&v12[qword_1000EE758] = a4;
  v29 = a4;

  v30 = FetchedResultsControllerDataSource.init(_:)(v14);
  _s6Health23OpenSleepScheduleIntentVwxx_0(a2);
  return v30;
}

uint64_t sub_10005C694(uint64_t a1)
{
  return sub_100007FCC(a1, &qword_1000EE800, NSUserActivity_ptr);
}

void sub_10005C6A8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  int64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  _QWORD v33[5];
  unint64_t v34;

  v1 = a1;
  v34 = (unint64_t)_swiftEmptyArrayStorage;
  if ((a1 & 0xC000000000000001) != 0)
  {
    if (a1 < 0)
      v2 = a1;
    else
      v2 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v3 = __CocoaSet.makeIterator()(v2);
    v4 = sub_100006D10(0, (unint64_t *)&unk_1000EF170, UIScene_ptr);
    v5 = sub_10005E4DC();
    v6 = Set.Iterator.init(_cocoa:)(v33, v3, v4, v5);
    v1 = v33[0];
    v30 = v33[1];
    v7 = v33[2];
    v8 = v33[3];
    v9 = v33[4];
  }
  else
  {
    v10 = -1 << *(_BYTE *)(a1 + 32);
    v30 = a1 + 56;
    v7 = ~v10;
    v11 = -v10;
    if (v11 < 64)
      v12 = ~(-1 << v11);
    else
      v12 = -1;
    v9 = v12 & *(_QWORD *)(a1 + 56);
    v6 = (_QWORD *)swift_bridgeObjectRetain(a1);
    v8 = 0;
  }
  v13 = (unint64_t)(v7 + 64) >> 6;
  while (v1 < 0)
  {
    v17 = __CocoaSet.Iterator.next()(v6);
    if (!v17)
      goto LABEL_40;
    v18 = v17;
    v31 = v17;
    v19 = sub_100006D10(0, (unint64_t *)&unk_1000EF170, UIScene_ptr);
    swift_unknownObjectRetain(v18);
    swift_dynamicCast(&v32, &v31, (char *)&type metadata for Swift.AnyObject + 8, v19, 7);
    v20 = v32;
    swift_unknownObjectRelease(v18);
    v16 = v8;
    v14 = v9;
    if (!v20)
      goto LABEL_40;
LABEL_36:
    v24 = objc_opt_self(UIWindowScene);
    v25 = swift_dynamicCastObjCClass(v20, v24);
    if (v25)
    {
      v26 = v25;
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v25);
      v28 = *(_QWORD *)((v34 & 0xFFFFFFFFFFFFFF8) + 0x10);
      v27 = *(_QWORD *)((v34 & 0xFFFFFFFFFFFFFF8) + 0x18);
      if (v28 >= v27 >> 1)
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v27 > 1, v28 + 1, 1);
      v29 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v28, v26);
      v6 = (_QWORD *)specialized Array._endMutation()(v29);
    }
    else
    {

    }
    v8 = v16;
    v9 = v14;
  }
  if (v9)
  {
    v14 = (v9 - 1) & v9;
    v15 = __clz(__rbit64(v9)) | (v8 << 6);
    v16 = v8;
LABEL_35:
    v20 = *(id *)(*(_QWORD *)(v1 + 48) + 8 * v15);
    if (!v20)
      goto LABEL_40;
    goto LABEL_36;
  }
  v21 = v8 + 1;
  if (!__OFADD__(v8, 1))
  {
    if (v21 >= v13)
      goto LABEL_40;
    v22 = *(_QWORD *)(v30 + 8 * v21);
    v16 = v8 + 1;
    if (!v22)
    {
      v16 = v8 + 2;
      if (v8 + 2 >= v13)
        goto LABEL_40;
      v22 = *(_QWORD *)(v30 + 8 * v16);
      if (!v22)
      {
        v16 = v8 + 3;
        if (v8 + 3 >= v13)
          goto LABEL_40;
        v22 = *(_QWORD *)(v30 + 8 * v16);
        if (!v22)
        {
          v16 = v8 + 4;
          if (v8 + 4 >= v13)
            goto LABEL_40;
          v22 = *(_QWORD *)(v30 + 8 * v16);
          if (!v22)
          {
            v16 = v8 + 5;
            if (v8 + 5 >= v13)
              goto LABEL_40;
            v22 = *(_QWORD *)(v30 + 8 * v16);
            if (!v22)
            {
              v23 = v8 + 6;
              while (v13 != v23)
              {
                v22 = *(_QWORD *)(v30 + 8 * v23++);
                if (v22)
                {
                  v16 = v23 - 1;
                  goto LABEL_34;
                }
              }
LABEL_40:
              sub_10005E5A4(v1);
              return;
            }
          }
        }
      }
    }
LABEL_34:
    v14 = (v22 - 1) & v22;
    v15 = __clz(__rbit64(v22)) + (v16 << 6);
    goto LABEL_35;
  }
  __break(1u);
}

id sub_10005C9F4@<X0>(_QWORD *a1@<X8>)
{
  id result;

  result = objc_msgSend(objc_allocWithZone((Class)HKHealthStore), "init");
  *a1 = result;
  return result;
}

id sub_10005CB90()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for AppDelegate();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t sub_10005CBF8()
{
  id v0;
  id v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v0 = objc_msgSend((id)objc_opt_self(UIApplication), "sharedApplication");
  v1 = objc_msgSend(v0, "connectedScenes");

  v2 = sub_100006D10(0, (unint64_t *)&unk_1000EF170, UIScene_ptr);
  v3 = sub_10005E4DC();
  v4 = static Set._unconditionallyBridgeFromObjectiveC(_:)(v1, v2, v3);

  v5 = sub_100007FCC(v4, (unint64_t *)&unk_1000EF170, UIScene_ptr);
  swift_bridgeObjectRelease(v4);
  return v5;
}

Swift::Int sub_10005CCBC(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t v10;
  int64_t v11;
  uint64_t v12;
  Swift::Int result;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;

  v2 = v1;
  v3 = *v1;
  if (*(_QWORD *)(*v1 + 24) <= a1)
    v4 = a1;
  else
    v4 = *(_QWORD *)(*v1 + 24);
  sub_10005E534(0);
  v5 = static _SetStorage.resize(original:capacity:move:)(v3, v4, 1);
  v6 = v5;
  if (*(_QWORD *)(v3 + 16))
  {
    v30 = v2;
    v7 = 1 << *(_BYTE *)(v3 + 32);
    v8 = (_QWORD *)(v3 + 56);
    if (v7 < 64)
      v9 = ~(-1 << v7);
    else
      v9 = -1;
    v10 = v9 & *(_QWORD *)(v3 + 56);
    v11 = (unint64_t)(v7 + 63) >> 6;
    v12 = v5 + 56;
    result = swift_retain(v3);
    v14 = 0;
    while (1)
    {
      if (v10)
      {
        v16 = __clz(__rbit64(v10));
        v10 &= v10 - 1;
        v17 = v16 | (v14 << 6);
      }
      else
      {
        v18 = v14 + 1;
        if (__OFADD__(v14, 1))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return result;
        }
        if (v18 >= v11)
          goto LABEL_36;
        v19 = v8[v18];
        ++v14;
        if (!v19)
        {
          v14 = v18 + 1;
          if (v18 + 1 >= v11)
            goto LABEL_36;
          v19 = v8[v14];
          if (!v19)
          {
            v14 = v18 + 2;
            if (v18 + 2 >= v11)
              goto LABEL_36;
            v19 = v8[v14];
            if (!v19)
            {
              v20 = v18 + 3;
              if (v20 >= v11)
              {
LABEL_36:
                swift_release(v3);
                v2 = v30;
                v29 = 1 << *(_BYTE *)(v3 + 32);
                if (v29 > 63)
                  bzero((void *)(v3 + 56), ((unint64_t)(v29 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v8 = -1 << v29;
                *(_QWORD *)(v3 + 16) = 0;
                break;
              }
              v19 = v8[v20];
              if (!v19)
              {
                while (1)
                {
                  v14 = v20 + 1;
                  if (__OFADD__(v20, 1))
                    goto LABEL_42;
                  if (v14 >= v11)
                    goto LABEL_36;
                  v19 = v8[v14];
                  ++v20;
                  if (v19)
                    goto LABEL_26;
                }
              }
              v14 = v20;
            }
          }
        }
LABEL_26:
        v10 = (v19 - 1) & v19;
        v17 = __clz(__rbit64(v19)) + (v14 << 6);
      }
      v21 = *(_QWORD *)(*(_QWORD *)(v3 + 48) + 8 * v17);
      result = NSObject._rawHashValue(seed:)(*(_QWORD *)(v6 + 40));
      v22 = -1 << *(_BYTE *)(v6 + 32);
      v23 = result & ~v22;
      v24 = v23 >> 6;
      if (((-1 << v23) & ~*(_QWORD *)(v12 + 8 * (v23 >> 6))) != 0)
      {
        v15 = __clz(__rbit64((-1 << v23) & ~*(_QWORD *)(v12 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v25 = 0;
        v26 = (unint64_t)(63 - v22) >> 6;
        do
        {
          if (++v24 == v26 && (v25 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }
          v27 = v24 == v26;
          if (v24 == v26)
            v24 = 0;
          v25 |= v27;
          v28 = *(_QWORD *)(v12 + 8 * v24);
        }
        while (v28 == -1);
        v15 = __clz(__rbit64(~v28)) + (v24 << 6);
      }
      *(_QWORD *)(v12 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
      *(_QWORD *)(*(_QWORD *)(v6 + 48) + 8 * v15) = v21;
      ++*(_QWORD *)(v6 + 16);
    }
  }
  result = swift_release(v3);
  *v2 = v6;
  return result;
}

Swift::Int sub_10005CF54(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  Swift::Int result;
  int64_t v13;
  unint64_t v14;
  _QWORD *v15;
  unint64_t v16;
  unint64_t v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  char v27;
  unint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  _QWORD *v33;
  _QWORD v34[9];

  v2 = v1;
  v3 = *v1;
  if (*(_QWORD *)(*v1 + 24) <= a1)
    v4 = a1;
  else
    v4 = *(_QWORD *)(*v1 + 24);
  sub_10005E5AC();
  v5 = static _SetStorage.resize(original:capacity:move:)(v3, v4, 1);
  v6 = v5;
  if (*(_QWORD *)(v3 + 16))
  {
    v7 = 1 << *(_BYTE *)(v3 + 32);
    v32 = v2;
    v33 = (_QWORD *)(v3 + 56);
    if (v7 < 64)
      v8 = ~(-1 << v7);
    else
      v8 = -1;
    v9 = v8 & *(_QWORD *)(v3 + 56);
    v10 = (unint64_t)(v7 + 63) >> 6;
    v11 = v5 + 56;
    result = swift_retain(v3);
    v13 = 0;
    while (1)
    {
      if (v9)
      {
        v16 = __clz(__rbit64(v9));
        v9 &= v9 - 1;
        v17 = v16 | (v13 << 6);
      }
      else
      {
        v18 = v13 + 1;
        if (__OFADD__(v13, 1))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return result;
        }
        if (v18 >= v10)
          goto LABEL_36;
        v19 = v33[v18];
        ++v13;
        if (!v19)
        {
          v13 = v18 + 1;
          if (v18 + 1 >= v10)
            goto LABEL_36;
          v19 = v33[v13];
          if (!v19)
          {
            v13 = v18 + 2;
            if (v18 + 2 >= v10)
              goto LABEL_36;
            v19 = v33[v13];
            if (!v19)
            {
              v20 = v18 + 3;
              if (v20 >= v10)
              {
LABEL_36:
                swift_release(v3);
                v2 = v32;
                v31 = 1 << *(_BYTE *)(v3 + 32);
                if (v31 > 63)
                  bzero(v33, ((unint64_t)(v31 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v33 = -1 << v31;
                *(_QWORD *)(v3 + 16) = 0;
                break;
              }
              v19 = v33[v20];
              if (!v19)
              {
                while (1)
                {
                  v13 = v20 + 1;
                  if (__OFADD__(v20, 1))
                    goto LABEL_42;
                  if (v13 >= v10)
                    goto LABEL_36;
                  v19 = v33[v13];
                  ++v20;
                  if (v19)
                    goto LABEL_26;
                }
              }
              v13 = v20;
            }
          }
        }
LABEL_26:
        v9 = (v19 - 1) & v19;
        v17 = __clz(__rbit64(v19)) + (v13 << 6);
      }
      v21 = (uint64_t *)(*(_QWORD *)(v3 + 48) + 16 * v17);
      v22 = *v21;
      v23 = v21[1];
      Hasher.init(_seed:)(v34, *(_QWORD *)(v6 + 40));
      String.hash(into:)(v34, v22, v23);
      result = Hasher._finalize()();
      v24 = -1 << *(_BYTE *)(v6 + 32);
      v25 = result & ~v24;
      v26 = v25 >> 6;
      if (((-1 << v25) & ~*(_QWORD *)(v11 + 8 * (v25 >> 6))) != 0)
      {
        v14 = __clz(__rbit64((-1 << v25) & ~*(_QWORD *)(v11 + 8 * (v25 >> 6)))) | v25 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v27 = 0;
        v28 = (unint64_t)(63 - v24) >> 6;
        do
        {
          if (++v26 == v28 && (v27 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }
          v29 = v26 == v28;
          if (v26 == v28)
            v26 = 0;
          v27 |= v29;
          v30 = *(_QWORD *)(v11 + 8 * v26);
        }
        while (v30 == -1);
        v14 = __clz(__rbit64(~v30)) + (v26 << 6);
      }
      *(_QWORD *)(v11 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
      v15 = (_QWORD *)(*(_QWORD *)(v6 + 48) + 16 * v14);
      *v15 = v22;
      v15[1] = v23;
      ++*(_QWORD *)(v6 + 16);
    }
  }
  result = swift_release(v3);
  *v2 = v6;
  return result;
}

unint64_t *sub_10005D22C(uint64_t isStackAllocationSafe)
{
  uint64_t v1;
  uint64_t v2;
  char v3;
  unsigned int v4;
  unint64_t v5;
  uint64_t v6;
  size_t v7;
  unint64_t *v8;
  uint64_t v9;
  void *v10;
  uint64_t v12;

  v2 = isStackAllocationSafe;
  v3 = *(_BYTE *)(isStackAllocationSafe + 32);
  v4 = v3 & 0x3F;
  v5 = (1 << v3) + 63;
  v6 = v5 >> 6;
  v7 = 8 * (v5 >> 6);
  if (v4 <= 0xD
    || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(8 * (v5 >> 6), 8), (isStackAllocationSafe & 1) != 0))
  {
    __chkstk_darwin(isStackAllocationSafe);
    bzero((char *)&v12 - ((v7 + 15) & 0x3FFFFFFFFFFFFFF0), v7);
    v8 = sub_10005D388((unint64_t *)((char *)&v12 - ((v7 + 15) & 0x3FFFFFFFFFFFFFF0)), v6, v2);
    v9 = swift_release(v2);
    if (v1)
      swift_willThrow(v9);
  }
  else
  {
    v10 = (void *)swift_slowAlloc(v7, -1);
    bzero(v10, v7);
    v8 = sub_10005D388((unint64_t *)v10, v6, v2);
    swift_release(v2);
    swift_slowDealloc(v10, -1, -1);
  }
  return v8;
}

unint64_t *sub_10005D388(unint64_t *result, uint64_t a2, uint64_t a3)
{
  unint64_t *v4;
  uint64_t v5;
  int64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  int64_t v11;
  unint64_t v12;
  unint64_t v13;
  int64_t v14;
  unint64_t v15;
  int64_t v16;

  v4 = result;
  v5 = 0;
  v6 = 0;
  v7 = a3 + 56;
  v8 = 1 << *(_BYTE *)(a3 + 32);
  v9 = -1;
  if (v8 < 64)
    v9 = ~(-1 << v8);
  v10 = v9 & *(_QWORD *)(a3 + 56);
  v11 = (unint64_t)(v8 + 63) >> 6;
  while (1)
  {
    if (v10)
    {
      v12 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v13 = v12 | (v6 << 6);
      goto LABEL_5;
    }
    v14 = v6 + 1;
    if (__OFADD__(v6, 1))
    {
      __break(1u);
      goto LABEL_26;
    }
    if (v14 >= v11)
      goto LABEL_24;
    v15 = *(_QWORD *)(v7 + 8 * v14);
    ++v6;
    if (!v15)
    {
      v6 = v14 + 1;
      if (v14 + 1 >= v11)
        goto LABEL_24;
      v15 = *(_QWORD *)(v7 + 8 * v6);
      if (!v15)
      {
        v6 = v14 + 2;
        if (v14 + 2 >= v11)
          goto LABEL_24;
        v15 = *(_QWORD *)(v7 + 8 * v6);
        if (!v15)
          break;
      }
    }
LABEL_20:
    v10 = (v15 - 1) & v15;
    v13 = __clz(__rbit64(v15)) + (v6 << 6);
LABEL_5:
    result = (unint64_t *)objc_msgSend(*(id *)(*(_QWORD *)(a3 + 48) + 8 * v13), "activationState");
    if (!result)
    {
      *(unint64_t *)((char *)v4 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v13;
      if (__OFADD__(v5++, 1))
      {
        __break(1u);
LABEL_24:
        swift_retain(a3);
        return (unint64_t *)sub_10005D520(v4, a2, v5, a3);
      }
    }
  }
  v16 = v14 + 3;
  if (v16 >= v11)
    goto LABEL_24;
  v15 = *(_QWORD *)(v7 + 8 * v16);
  if (v15)
  {
    v6 = v16;
    goto LABEL_20;
  }
  while (1)
  {
    v6 = v16 + 1;
    if (__OFADD__(v16, 1))
      break;
    if (v6 >= v11)
      goto LABEL_24;
    v15 = *(_QWORD *)(v7 + 8 * v6);
    ++v16;
    if (v15)
      goto LABEL_20;
  }
LABEL_26:
  __break(1u);
  return result;
}

Swift::Int sub_10005D520(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  Swift::Int result;
  _QWORD *v9;
  unint64_t v10;
  uint64_t v11;
  Swift::Int v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  Swift::Int v18;
  id v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  char v24;
  unint64_t v25;
  BOOL v26;
  uint64_t v27;
  unint64_t *v29;

  v4 = a4;
  if (!a3)
  {
    v9 = &_swiftEmptySetSingleton;
LABEL_36:
    swift_release(v4);
    return (Swift::Int)v9;
  }
  v5 = a3;
  if (*(_QWORD *)(a4 + 16) == a3)
    return v4;
  sub_10005E534(0);
  result = static _SetStorage.allocate(capacity:)(v5);
  v9 = (_QWORD *)result;
  v29 = a1;
  if (a2 < 1)
    v10 = 0;
  else
    v10 = *a1;
  v11 = 0;
  v12 = result + 56;
  while (1)
  {
    if (v10)
    {
      v13 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v14 = v13 | (v11 << 6);
      goto LABEL_24;
    }
    v15 = v11 + 1;
    if (__OFADD__(v11, 1))
      goto LABEL_39;
    if (v15 >= a2)
      goto LABEL_36;
    v16 = v29[v15];
    ++v11;
    if (!v16)
    {
      v11 = v15 + 1;
      if (v15 + 1 >= a2)
        goto LABEL_36;
      v16 = v29[v11];
      if (!v16)
      {
        v11 = v15 + 2;
        if (v15 + 2 >= a2)
          goto LABEL_36;
        v16 = v29[v11];
        if (!v16)
          break;
      }
    }
LABEL_23:
    v10 = (v16 - 1) & v16;
    v14 = __clz(__rbit64(v16)) + (v11 << 6);
LABEL_24:
    v18 = v9[5];
    v19 = *(id *)(*(_QWORD *)(v4 + 48) + 8 * v14);
    result = NSObject._rawHashValue(seed:)(v18);
    v20 = -1 << *((_BYTE *)v9 + 32);
    v21 = result & ~v20;
    v22 = v21 >> 6;
    if (((-1 << v21) & ~*(_QWORD *)(v12 + 8 * (v21 >> 6))) != 0)
    {
      v23 = __clz(__rbit64((-1 << v21) & ~*(_QWORD *)(v12 + 8 * (v21 >> 6)))) | v21 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v24 = 0;
      v25 = (unint64_t)(63 - v20) >> 6;
      do
      {
        if (++v22 == v25 && (v24 & 1) != 0)
        {
          __break(1u);
          goto LABEL_38;
        }
        v26 = v22 == v25;
        if (v22 == v25)
          v22 = 0;
        v24 |= v26;
        v27 = *(_QWORD *)(v12 + 8 * v22);
      }
      while (v27 == -1);
      v23 = __clz(__rbit64(~v27)) + (v22 << 6);
    }
    *(_QWORD *)(v12 + ((v23 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v23;
    *(_QWORD *)(v9[6] + 8 * v23) = v19;
    ++v9[2];
    if (__OFSUB__(v5--, 1))
    {
LABEL_38:
      __break(1u);
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }
    if (!v5)
      goto LABEL_36;
  }
  v17 = v15 + 3;
  if (v17 >= a2)
    goto LABEL_36;
  v16 = v29[v17];
  if (v16)
  {
    v11 = v17;
    goto LABEL_23;
  }
  while (1)
  {
    v11 = v17 + 1;
    if (__OFADD__(v17, 1))
      break;
    if (v11 >= a2)
      goto LABEL_36;
    v16 = v29[v11];
    ++v17;
    if (v16)
      goto LABEL_23;
  }
LABEL_40:
  __break(1u);
  return result;
}

uint64_t sub_10005D778(uint64_t result, uint64_t a2, char a3, uint64_t a4)
{
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v6 = result;
  if ((a4 & 0xC000000000000001) == 0)
  {
    if ((a3 & 1) == 0)
    {
      if (result < 0 || 1 << *(_BYTE *)(a4 + 32) <= result)
      {
        __break(1u);
      }
      else if (((*(_QWORD *)(a4 + (((unint64_t)result >> 3) & 0xFFFFFFFFFFFFF8) + 56) >> result) & 1) != 0)
      {
        if (*(_DWORD *)(a4 + 36) == (_DWORD)a2)
        {
LABEL_20:
          v10 = *(_QWORD *)(*(_QWORD *)(a4 + 48) + 8 * v6);
          swift_retain(v10);
          return v10;
        }
        __break(1u);
        goto LABEL_13;
      }
      __break(1u);
      goto LABEL_24;
    }
LABEL_13:
    result = __CocoaSet.Index.age.getter(result, a2);
    if ((_DWORD)result == *(_DWORD *)(a4 + 36))
    {
      v11 = __CocoaSet.Index.element.getter(v6, a2);
      v20 = v11;
      v12 = type metadata accessor for AdvertisableFeatureModel(0);
      swift_unknownObjectRetain(v11);
      swift_dynamicCast(&v21, &v20, (char *)&type metadata for Swift.AnyObject + 8, v12, 7);
      v13 = v21;
      swift_unknownObjectRelease(v11);
      v22 = v13;
      v14 = *(_QWORD *)(a4 + 40);
      v15 = sub_10000F6E4(&qword_1000EDE48, 255, (uint64_t (*)(uint64_t))&type metadata accessor for AdvertisableFeatureModel, (uint64_t)&protocol conformance descriptor for AdvertisableFeatureModel);
      v16 = dispatch thunk of Hashable._rawHashValue(seed:)(v14, v12, v15);
      v17 = -1 << *(_BYTE *)(a4 + 32);
      v6 = v16 & ~v17;
      if (((*(_QWORD *)(a4 + 56 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0)
      {
        v18 = ~v17;
        v19 = sub_10000F6E4((unint64_t *)&unk_1000EE840, 255, (uint64_t (*)(uint64_t))&type metadata accessor for AdvertisableFeatureModel, (uint64_t)&protocol conformance descriptor for AdvertisableFeatureModel);
        while (1)
        {
          v21 = *(_QWORD *)(*(_QWORD *)(a4 + 48) + 8 * v6);
          if ((dispatch thunk of static Equatable.== infix(_:_:)(&v21, &v22, v12, v19) & 1) != 0)
            break;
          v6 = (v6 + 1) & v18;
          if (((*(_QWORD *)(a4 + 56 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) == 0)
            goto LABEL_18;
        }
      }
      else
      {
LABEL_18:
        swift_release(v13);
        __break(1u);
      }
      swift_release(v13);
      goto LABEL_20;
    }
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  if ((a3 & 1) != 0)
  {
    if (a4 < 0)
      v7 = a4;
    else
      v7 = a4 & 0xFFFFFFFFFFFFFF8;
    v8 = __CocoaSet.element(at:)(result, a2, v7);
    v21 = v8;
    v9 = type metadata accessor for AdvertisableFeatureModel(0);
    swift_unknownObjectRetain(v8);
    swift_dynamicCast(&v22, &v21, (char *)&type metadata for Swift.AnyObject + 8, v9, 7);
    v10 = v22;
    swift_unknownObjectRelease(v8);
    return v10;
  }
LABEL_25:
  __break(1u);
  return result;
}

void sub_10005D9E8(uint64_t a1, uint64_t a2, char a3, uint64_t a4, unint64_t *a5, _QWORD *a6)
{
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  Swift::Int v16;
  uint64_t v17;
  id v18;
  char v19;
  uint64_t v20;
  id v21;
  char v22;
  id v23;
  uint64_t v24;
  unint64_t *v25;

  v10 = a1;
  if ((a4 & 0xC000000000000001) == 0)
  {
    if ((a3 & 1) != 0)
      goto LABEL_13;
    if (a1 < 0 || 1 << *(_BYTE *)(a4 + 32) <= a1)
    {
      __break(1u);
    }
    else if (((*(_QWORD *)(a4 + (((unint64_t)a1 >> 3) & 0xFFFFFFFFFFFFF8) + 56) >> a1) & 1) != 0)
    {
      if (*(_DWORD *)(a4 + 36) == (_DWORD)a2)
        goto LABEL_20;
      __break(1u);
LABEL_13:
      if (__CocoaSet.Index.age.getter(a1, a2) == *(_DWORD *)(a4 + 36))
      {
        v14 = __CocoaSet.Index.element.getter(v10, a2);
        v24 = v14;
        v15 = sub_100006D10(0, a5, a6);
        swift_unknownObjectRetain(v14);
        swift_dynamicCast(&v25, &v24, (char *)&type metadata for Swift.AnyObject + 8, v15, 7);
        a5 = v25;
        swift_unknownObjectRelease(v14);
        v16 = NSObject._rawHashValue(seed:)(*(_QWORD *)(a4 + 40));
        v17 = -1 << *(_BYTE *)(a4 + 32);
        v10 = v16 & ~v17;
        if (((*(_QWORD *)(a4 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) != 0)
        {
          v18 = *(id *)(*(_QWORD *)(a4 + 48) + 8 * v10);
          v19 = static NSObject.== infix(_:_:)(v18);

          if ((v19 & 1) == 0)
          {
            v20 = ~v17;
            do
            {
              v10 = (v10 + 1) & v20;
              if (((*(_QWORD *)(a4 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) == 0)
                goto LABEL_24;
              v21 = *(id *)(*(_QWORD *)(a4 + 48) + 8 * v10);
              v22 = static NSObject.== infix(_:_:)(v21);

            }
            while ((v22 & 1) == 0);
          }

LABEL_20:
          v23 = *(id *)(*(_QWORD *)(a4 + 48) + 8 * v10);
          return;
        }
LABEL_24:

        __break(1u);
        goto LABEL_25;
      }
LABEL_23:
      __break(1u);
      goto LABEL_24;
    }
    __break(1u);
    goto LABEL_23;
  }
  if ((a3 & 1) == 0)
  {
LABEL_25:
    __break(1u);
    return;
  }
  if (a4 < 0)
    v11 = a4;
  else
    v11 = a4 & 0xFFFFFFFFFFFFFF8;
  v12 = __CocoaSet.element(at:)(a1, a2, v11);
  v24 = v12;
  v13 = sub_100006D10(0, a5, a6);
  swift_unknownObjectRetain(v12);
  swift_dynamicCast(&v25, &v24, (char *)&type metadata for Swift.AnyObject + 8, v13, 7);
  swift_unknownObjectRelease(v12);
}

uint64_t sub_10005DC4C(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;

  v1 = *(_QWORD *)(a1 + 56);
  if (v1)
  {
    v2 = 0;
    return __clz(__rbit64(v1)) + v2;
  }
  v5 = *(_BYTE *)(a1 + 32);
  v6 = v5 & 0x3F;
  v3 = 1 << v5;
  if (v6 < 7)
    return v3;
  v1 = *(_QWORD *)(a1 + 64);
  if (v1)
  {
    v2 = 64;
    return __clz(__rbit64(v1)) + v2;
  }
  v7 = (unint64_t)(v3 + 63) >> 6;
  if (v7 <= 2)
    v7 = 2;
  v8 = v7 - 2;
  v9 = (unint64_t *)(a1 + 72);
  v2 = 64;
  while (v8)
  {
    v10 = *v9++;
    v1 = v10;
    --v8;
    v2 += 64;
    if (v10)
      return __clz(__rbit64(v1)) + v2;
  }
  return v3;
}

uint64_t sub_10005DCD4()
{
  uint64_t v0;
  uint64_t ObjectType;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t MetatypeMetadata;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  ObjectType = swift_getObjectType(v0);
  v2 = type metadata accessor for Logger(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = __chkstk_darwin(v2);
  v6 = (char *)&v17 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = static Logger.general.getter(v4);
  v8 = Logger.logObject.getter(v7);
  v9 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v8, v9))
  {
    v10 = swift_slowAlloc(22, -1);
    v11 = swift_slowAlloc(64, -1);
    v17 = v11;
    v18 = ObjectType;
    *(_DWORD *)v10 = 136446466;
    MetatypeMetadata = swift_getMetatypeMetadata(ObjectType);
    v13 = String.init<A>(describing:)(&v18, MetatypeMetadata);
    v15 = v14;
    v18 = sub_100012B20(v13, v14, &v17);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v18, &v19, v10 + 4, v10 + 12);
    swift_bridgeObjectRelease(v15);
    *(_WORD *)(v10 + 12) = 2082;
    v18 = sub_100012B20(0xD000000000000027, 0x80000001000BB5E0, &v17);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v18, &v19, v10 + 14, v10 + 22);
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "[%{public}s]: Lifecycle: %{public}s", (uint8_t *)v10, 0x16u);
    swift_arrayDestroy(v11, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v11, -1, -1);
    swift_slowDealloc(v10, -1, -1);
  }

  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v6, v2);
}

BOOL sub_10005DEB0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint64_t v12;
  uint8_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint8_t *v21;
  id v22;
  id v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  void *v27;
  double v28;
  id v29;
  id v30;
  uint64_t v31;
  uint64_t v32;
  _BOOL8 v33;
  uint8_t *v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v4 = type metadata accessor for Logger(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = __chkstk_darwin(v4);
  v8 = (char *)&v35 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*(_QWORD *)(a2 + 16))
  {
    static Logger.general.getter(v6);
    v9 = swift_bridgeObjectRetain_n(a2, 2);
    v10 = Logger.logObject.getter(v9);
    v11 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v10, v11))
    {
      v12 = swift_slowAlloc(12, -1);
      v38 = a1;
      v13 = (uint8_t *)v12;
      v37 = swift_slowAlloc(32, -1);
      v40 = v37;
      *(_DWORD *)v13 = 136315138;
      v35 = v13 + 4;
      type metadata accessor for OpenURLOptionsKey(0);
      v15 = v14;
      sub_10000F6E4(&qword_1000EC540, 255, (uint64_t (*)(uint64_t))type metadata accessor for OpenURLOptionsKey, (uint64_t)&unk_1000B0D3C);
      v16 = swift_bridgeObjectRetain(a2);
      v36 = (char *)&type metadata for Any + 8;
      v17 = Dictionary.description.getter(v16, v15);
      v19 = v18;
      swift_bridgeObjectRelease(a2);
      v39 = sub_100012B20(v17, v19, &v40);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v39, &v40, v35, v13 + 12);
      swift_bridgeObjectRelease_n(a2, 2);
      swift_bridgeObjectRelease(v19);
      _os_log_impl((void *)&_mh_execute_header, v10, v11, "Legacy openURL method on AppDelegate does not support options: %s", v13, 0xCu);
      v20 = v37;
      swift_arrayDestroy(v37, 1, v36);
      swift_slowDealloc(v20, -1, -1);
      v21 = v13;
      a1 = v38;
      swift_slowDealloc(v21, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n(a2, 2);
    }
    (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
  }
  v22 = objc_msgSend((id)objc_opt_self(UIApplication), "sharedApplication");
  v23 = objc_msgSend(v22, "connectedScenes");

  v24 = sub_100006D10(0, (unint64_t *)&unk_1000EF170, UIScene_ptr);
  v25 = sub_10005E4DC();
  v26 = static Set._unconditionallyBridgeFromObjectiveC(_:)(v23, v24, v25);

  v27 = (void *)sub_100007FCC(v26, (unint64_t *)&unk_1000EF170, UIScene_ptr);
  *(_QWORD *)&v28 = swift_bridgeObjectRelease(v26).n128_u64[0];
  if (!v27)
    return 0;
  v29 = objc_msgSend(v27, "delegate", v28);
  if (v29)
  {
    v30 = v29;
    v31 = type metadata accessor for SceneDelegate();
    v32 = swift_dynamicCastClass(v30, v31);
    v33 = v32 != 0;
    if (v32)
      sub_10006AF00(a1, 0);
    swift_unknownObjectRelease(v30);
  }
  else
  {
    v33 = 0;
  }

  return v33;
}

void sub_10005E1E4()
{
  id v0;
  id v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  Swift::Int v9;
  id v10;
  id v11;
  _QWORD *v12;
  unint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  char v19;
  unint64_t v20;
  BOOL v21;
  uint64_t v22;
  uint64_t v23;
  id v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  id v28[2];
  _QWORD *v29;

  v0 = objc_msgSend((id)objc_opt_self(UIApplication), "sharedApplication");
  v1 = objc_msgSend(v0, "connectedScenes");

  v2 = sub_100006D10(0, (unint64_t *)&unk_1000EF170, UIScene_ptr);
  v3 = sub_10005E4DC();
  v4 = static Set._unconditionallyBridgeFromObjectiveC(_:)(v1, v2, v3);

  if ((v4 & 0xC000000000000001) != 0)
  {
    v5 = (unint64_t *)&_swiftEmptySetSingleton;
    v29 = &_swiftEmptySetSingleton;
    if (v4 < 0)
      v6 = v4;
    else
      v6 = v4 & 0xFFFFFFFFFFFFFF8;
    v7 = __CocoaSet.makeIterator()(v6);
    v8 = __CocoaSet.Iterator.next()(v7);
    if (v8)
    {
      do
      {
        v27 = v8;
        swift_dynamicCast(v28, &v27, (char *)&type metadata for Swift.AnyObject + 8, v2, 7);
        v10 = objc_msgSend(v28[0], "activationState");
        v11 = v28[0];
        if (v10)
        {

        }
        else
        {
          v12 = v29;
          v13 = v29[2];
          if (v29[3] <= v13)
          {
            sub_10005CCBC(v13 + 1);
            v12 = v29;
          }
          v9 = NSObject._rawHashValue(seed:)(v12[5]);
          v14 = v12 + 7;
          v15 = -1 << *((_BYTE *)v12 + 32);
          v16 = v9 & ~v15;
          v17 = v16 >> 6;
          if (((-1 << v16) & ~v12[(v16 >> 6) + 7]) != 0)
          {
            v18 = __clz(__rbit64((-1 << v16) & ~v12[(v16 >> 6) + 7])) | v16 & 0x7FFFFFFFFFFFFFC0;
          }
          else
          {
            v19 = 0;
            v20 = (unint64_t)(63 - v15) >> 6;
            do
            {
              if (++v17 == v20 && (v19 & 1) != 0)
              {
                __break(1u);
                goto LABEL_31;
              }
              v21 = v17 == v20;
              if (v17 == v20)
                v17 = 0;
              v19 |= v21;
              v22 = v14[v17];
            }
            while (v22 == -1);
            v18 = __clz(__rbit64(~v22)) + (v17 << 6);
          }
          *(_QWORD *)((char *)v14 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
          *(_QWORD *)(v12[6] + 8 * v18) = v11;
          ++v12[2];
        }
        v8 = __CocoaSet.Iterator.next()(v9);
      }
      while (v8);
      v5 = v29;
    }
    swift_release(v7);
  }
  else
  {
    v5 = sub_10005D22C(v4);
  }
  sub_10005C6A8((uint64_t)v5);
  v2 = v23;
  swift_release(v5);
  if ((unint64_t)v2 >> 62)
  {
LABEL_31:
    if (v2 < 0)
      v25 = v2;
    else
      v25 = v2 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v2);
    v26 = _CocoaArrayWrapper.endIndex.getter(v25);
    swift_bridgeObjectRelease(v2);
    if (!v26)
      goto LABEL_35;
  }
  else if (!*(_QWORD *)((v2 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
LABEL_35:
    swift_bridgeObjectRelease(v2);
    return;
  }
  if ((v2 & 0xC000000000000001) != 0)
  {
    specialized _ArrayBuffer._getElementSlowPath(_:)(0, v2);
    goto LABEL_35;
  }
  if (*(_QWORD *)((v2 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    v24 = *(id *)(v2 + 32);
    goto LABEL_35;
  }
  __break(1u);
}

unint64_t sub_10005E4DC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000EE7F0;
  if (!qword_1000EE7F0)
  {
    v1 = sub_100006D10(255, (unint64_t *)&unk_1000EF170, UIScene_ptr);
    result = swift_getWitnessTable(&protocol conformance descriptor for NSObject, v1);
    atomic_store(result, (unint64_t *)&qword_1000EE7F0);
  }
  return result;
}

void sub_10005E534(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;

  if (!qword_1000EE7F8)
  {
    v2 = sub_100006D10(255, (unint64_t *)&unk_1000EF170, UIScene_ptr);
    v3 = sub_10005E4DC();
    v4 = type metadata accessor for _SetStorage(a1, v2, v3);
    if (!v5)
      atomic_store(v4, (unint64_t *)&qword_1000EE7F8);
  }
}

uint64_t sub_10005E5A4(uint64_t a1)
{
  return swift_release(a1 & 0x7FFFFFFFFFFFFFFFLL);
}

void sub_10005E5AC()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1000EE808)
  {
    v0 = type metadata accessor for _SetStorage(0, &type metadata for String, &protocol witness table for String);
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1000EE808);
  }
}

uint64_t sub_10005E608(uint64_t a1)
{
  uint64_t v2;

  sub_1000138C8(0, &qword_1000EE838, (uint64_t)&type metadata for AnyHashable, (uint64_t (*)(_QWORD, uint64_t))&type metadata accessor for Optional);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

_QWORD *sub_10005E65C(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;

  v3 = v2;
  v27 = a1;
  v28 = a2;
  v4 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0);
  v25 = *(_QWORD *)(v4 - 8);
  v26 = v4;
  __chkstk_darwin(v4);
  v6 = (char *)&v22 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for OS_dispatch_queue.Attributes(0);
  __chkstk_darwin(v7);
  v9 = (char *)&v22 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for DispatchQoS(0);
  __chkstk_darwin(v10);
  v12 = (char *)&v22 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = sub_100023BC8();
  v29 = (_QWORD *)type metadata accessor for CloudSyncBuddyAvailabilityProvider();
  v13 = sub_10005FC9C();
  v23 = String.init<A>(describing:)(&v29, v13);
  v15 = v14;
  static DispatchQoS.unspecified.getter(v23);
  v29 = _swiftEmptyArrayStorage;
  v16 = sub_100013198(&qword_1000EE928, (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes, (uint64_t)&protocol conformance descriptor for OS_dispatch_queue.Attributes);
  sub_1000076D8(0, (unint64_t *)&unk_1000EF150, (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Array);
  v18 = v17;
  v19 = sub_10000F724(&qword_1000EE930, (unint64_t *)&unk_1000EF150, (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v29, v18, v19, v7, v16);
  (*(void (**)(char *, _QWORD, uint64_t))(v25 + 104))(v6, enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:), v26);
  v20 = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)(v23, v15, v12, v9, v6, 0);
  v3[2] = v27;
  v3[3] = v28;
  v3[4] = v20;
  return v3;
}

uint64_t sub_10005E850(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  dispatch_semaphore_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  void (*v24)(char *, uint64_t);
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v40;
  NSObject *v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD aBlock[5];
  uint64_t v51;

  v42 = a2;
  v43 = a3;
  v46 = type metadata accessor for DispatchWorkItemFlags(0);
  v49 = *(_QWORD *)(v46 - 8);
  __chkstk_darwin(v46);
  v45 = (char *)&v40 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for DispatchQoS(0);
  v47 = *(_QWORD *)(v5 - 8);
  v48 = v5;
  __chkstk_darwin(v5);
  v44 = (char *)&v40 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for DispatchTime(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = __chkstk_darwin(v7);
  v11 = (char *)&v40 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v13 = (char *)&v40 - v12;
  v14 = dispatch_semaphore_create(0);
  sub_1000076D8(0, &qword_1000EE910, (uint64_t (*)(uint64_t))&type metadata accessor for CloudSyncState, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
  v16 = swift_allocBox(v15);
  v18 = v17;
  v19 = type metadata accessor for CloudSyncState(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 56))(v18, 1, 1, v19);
  v40 = a1;
  v20 = swift_allocObject(&unk_1000DFED0, 24, 7);
  swift_weakInit(v20 + 16, a1);
  v21 = (_QWORD *)swift_allocObject(&unk_1000DFEF8, 40, 7);
  v21[2] = v20;
  v21[3] = v16;
  v21[4] = v14;
  swift_retain(v20);
  swift_retain(v16);
  v41 = v14;
  dispatch thunk of CloudSyncStateObserver.stateChangeHandler.setter(sub_10005F3F8, v21);
  v22 = swift_release(v20);
  v23 = dispatch thunk of CloudSyncStateObserver.startObservingStateChanges()(v22);
  static DispatchTime.now()(v23);
  + infix(_:_:)(v11, 1.0);
  v24 = *(void (**)(char *, uint64_t))(v8 + 8);
  v24(v11, v7);
  LOBYTE(v8) = OS_dispatch_semaphore.wait(timeout:)(v13) & 1;
  v24(v13, v7);
  dispatch thunk of CloudSyncStateObserver.stateChangeHandler.setter(0, 0);
  sub_100023BC8();
  v25 = (void *)static OS_dispatch_queue.main.getter();
  v26 = swift_allocObject(&unk_1000DFF20, 56, 7);
  v27 = v40;
  *(_QWORD *)(v26 + 16) = v40;
  *(_QWORD *)(v26 + 24) = v16;
  *(_BYTE *)(v26 + 32) = v8;
  v28 = v43;
  *(_QWORD *)(v26 + 40) = v42;
  *(_QWORD *)(v26 + 48) = v28;
  aBlock[4] = sub_10005F438;
  v51 = v26;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100006988;
  aBlock[3] = &unk_1000DFF38;
  v29 = _Block_copy(aBlock);
  v30 = v51;
  swift_retain(v16);
  swift_retain(v27);
  swift_retain(v28);
  v31 = swift_release(v30);
  v32 = v44;
  static DispatchQoS.unspecified.getter(v31);
  aBlock[0] = _swiftEmptyArrayStorage;
  v33 = sub_100013198((unint64_t *)&qword_1000EDBE0, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  sub_1000076D8(0, (unint64_t *)&qword_1000ED920, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Array);
  v35 = v34;
  v36 = sub_10000F724((unint64_t *)&qword_1000EDBF0, (unint64_t *)&qword_1000ED920, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  v38 = v45;
  v37 = v46;
  dispatch thunk of SetAlgebra.init<A>(_:)(aBlock, v35, v36, v46, v33);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v32, v38, v29);
  _Block_release(v29);

  (*(void (**)(char *, uint64_t))(v49 + 8))(v38, v37);
  (*(void (**)(char *, uint64_t))(v47 + 8))(v32, v48);
  return swift_release(v16);
}

Swift::Int sub_10005EC34(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t Strong;
  uint64_t v12;
  id v13;
  uint64_t v14;
  _BYTE v16[24];
  _BYTE v17[24];

  sub_1000076D8(0, &qword_1000EE910, (uint64_t (*)(uint64_t))&type metadata accessor for CloudSyncState, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
  __chkstk_darwin(v6);
  v8 = &v16[-v7];
  v9 = a2 + 16;
  v10 = swift_projectBox(a3);
  swift_beginAccess(v9, v17, 0, 0);
  Strong = swift_weakLoadStrong(v9);
  if (Strong)
  {
    v12 = Strong;
    v13 = *(id *)(Strong + 16);
    swift_release(v12);
    dispatch thunk of CloudSyncStateObserver.stateChangeHandler.setter(0, 0);

  }
  sub_10005FBC0(a1, (uint64_t)v8);
  v14 = type metadata accessor for CloudSyncState(0);
  (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 56))(v8, 0, 1, v14);
  swift_beginAccess(v10, v16, 1, 0);
  sub_10005FC40((uint64_t)v8, v10);
  return OS_dispatch_semaphore.signal()();
}

uint64_t sub_10005ED70(uint64_t a1, uint64_t a2, char a3, uint64_t (*a4)(uint64_t), uint64_t a5)
{
  char v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  _BYTE v15[24];

  v8 = a3 & 1;
  sub_1000076D8(0, &qword_1000EE910, (uint64_t (*)(uint64_t))&type metadata accessor for CloudSyncState, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
  __chkstk_darwin(v9);
  v11 = &v15[-v10 - 8];
  v12 = swift_projectBox(a2);
  swift_beginAccess(v12, v15, 0, 0);
  sub_10005F448(v12, (uint64_t)v11);
  sub_10005F4A4((uint64_t)v11, v8, a4, a5);
  return sub_10005FAAC((uint64_t)v11);
}

uint64_t sub_10005EE3C()
{
  id *v0;

  return swift_deallocClassInstance(v0, 40, 7);
}

uint64_t type metadata accessor for CloudSyncBuddyAvailabilityProvider()
{
  return objc_opt_self(_TtC6Health34CloudSyncBuddyAvailabilityProvider);
}

void sub_10005EE90(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  void *v19;
  id v20;
  id v21;
  uint64_t v22;
  id v23;
  void *v24;
  id v25;
  uint64_t v26;
  NSObject *v27;
  os_log_type_t v28;
  uint8_t *v29;
  uint64_t Strong;
  void *v31;
  uint64_t v32;
  NSObject *v33;
  os_log_type_t v34;
  uint8_t *v35;
  uint64_t v36;
  void *v37;
  _QWORD *v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  _QWORD aBlock[5];
  _QWORD *v53;

  v6 = type metadata accessor for DispatchWorkItemFlags(0);
  v48 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v8 = (char *)&v46 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for DispatchQoS(0);
  v46 = *(_QWORD *)(v9 - 8);
  v47 = v9;
  __chkstk_darwin(v9);
  v11 = (char *)&v46 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for Logger(0);
  v49 = *(_QWORD *)(v12 - 8);
  v50 = v12;
  v13 = __chkstk_darwin(v12);
  v15 = (char *)&v46 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  v17 = (char *)&v46 - v16;
  v18 = swift_allocObject(&unk_1000DFE58, 32, 7);
  *(_QWORD *)(v18 + 16) = a2;
  *(_QWORD *)(v18 + 24) = a3;
  v19 = *(void **)(a1 + 24);
  swift_retain(a2);
  v20 = a3;
  v21 = objc_msgSend(v19, "aida_accountForPrimaryiCloudAccount");

  if (v21)
  {
    v23 = objc_msgSend(v19, "aa_primaryAppleAccount");
    if (v23)
    {
      v24 = v23;
      v25 = objc_msgSend(v23, "aa_isManagedAppleID");
      if ((v25 & 1) != 0)
      {
        v26 = static Logger.cloudSync.getter(v25);
        v27 = Logger.logObject.getter(v26);
        v28 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v27, v28))
        {
          v29 = (uint8_t *)swift_slowAlloc(2, -1);
          *(_WORD *)v29 = 0;
          _os_log_impl((void *)&_mh_execute_header, v27, v28, "Account is a Managed Apple ID, skip enable cloud sync buddy", v29, 2u);
          swift_slowDealloc(v29, -1, -1);
        }

        (*(void (**)(char *, uint64_t))(v49 + 8))(v15, v50);
        swift_beginAccess(a2 + 16, aBlock, 0, 0);
        Strong = swift_unknownObjectWeakLoadStrong(a2 + 16);
        if (Strong)
        {
          v31 = (void *)Strong;
          sub_100073430();
          swift_release(v18);

        }
        else
        {
          swift_release(v18);

        }
        return;
      }

    }
    v38 = (_QWORD *)swift_allocObject(&unk_1000DFE80, 40, 7);
    v38[2] = a1;
    v38[3] = sub_10005F360;
    v38[4] = v18;
    aBlock[4] = sub_10005F394;
    v53 = v38;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_100006988;
    aBlock[3] = &unk_1000DFE98;
    v39 = _Block_copy(aBlock);
    swift_retain(a1);
    v40 = swift_retain(v18);
    static DispatchQoS.unspecified.getter(v40);
    v51 = _swiftEmptyArrayStorage;
    v41 = sub_100013198((unint64_t *)&qword_1000EDBE0, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    sub_1000076D8(0, (unint64_t *)&qword_1000ED920, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Array);
    v43 = v42;
    v44 = sub_10000F724((unint64_t *)&qword_1000EDBF0, (unint64_t *)&qword_1000ED920, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
    dispatch thunk of SetAlgebra.init<A>(_:)(&v51, v43, v44, v6, v41);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0, v11, v8, v39);
    _Block_release(v39);
    (*(void (**)(char *, uint64_t))(v48 + 8))(v8, v6);
    (*(void (**)(char *, uint64_t))(v46 + 8))(v11, v47);
    v45 = v53;
    swift_release(v18);
    swift_release(v45);
    return;
  }
  v32 = static Logger.cloudSync.getter(v22);
  v33 = Logger.logObject.getter(v32);
  v34 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v33, v34))
  {
    v35 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v35 = 0;
    _os_log_impl((void *)&_mh_execute_header, v33, v34, "No account, skip enable cloud sync buddy", v35, 2u);
    swift_slowDealloc(v35, -1, -1);
  }

  (*(void (**)(char *, uint64_t))(v49 + 8))(v17, v50);
  swift_beginAccess(a2 + 16, aBlock, 0, 0);
  v36 = swift_unknownObjectWeakLoadStrong(a2 + 16);
  if (v36)
  {
    v37 = (void *)v36;
    sub_100073430();
    swift_release(v18);

  }
  else
  {
    swift_release(v18);
  }
}

uint64_t sub_10005F334()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));

  return swift_deallocObject(v0, 32, 7);
}

void sub_10005F360(char a1)
{
  uint64_t v1;

  sub_1000737D0(a1, *(_QWORD *)(v1 + 16), *(void **)(v1 + 24));
}

uint64_t sub_10005F368()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 40, 7);
}

uint64_t sub_10005F394()
{
  uint64_t *v0;

  return sub_10005E850(v0[2], v0[3], v0[4]);
}

uint64_t sub_10005F3A0()
{
  uint64_t v0;

  swift_weakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10005F3C4()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 24));

  return swift_deallocObject(v0, 40, 7);
}

Swift::Int sub_10005F3F8(uint64_t a1)
{
  uint64_t v1;

  return sub_10005EC34(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

uint64_t sub_10005F404()
{
  _QWORD *v0;

  swift_release(v0[2]);
  swift_release(v0[3]);
  swift_release(v0[6]);
  return swift_deallocObject(v0, 56, 7);
}

uint64_t sub_10005F438()
{
  uint64_t v0;

  return sub_10005ED70(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(_BYTE *)(v0 + 32), *(uint64_t (**)(uint64_t))(v0 + 40), *(_QWORD *)(v0 + 48));
}

uint64_t sub_10005F448(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_1000076D8(0, &qword_1000EE910, (uint64_t (*)(uint64_t))&type metadata accessor for CloudSyncState, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10005F4A4(uint64_t a1, char a2, uint64_t (*a3)(uint64_t), uint64_t a4)
{
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t (*v13)(uint64_t);
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  int v32;
  uint64_t (*v33)(char *, uint64_t, uint64_t);
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t EnumCaseMultiPayload;
  char *v39;
  uint64_t v40;
  NSObject *v41;
  os_log_type_t v42;
  uint8_t *v43;
  uint64_t v45;
  NSObject *v46;
  os_log_type_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  unint64_t v53;
  uint64_t v54;
  unint64_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  NSObject *v61;
  os_log_type_t v62;
  _BOOL4 v63;
  uint64_t v64;
  uint64_t v65;
  uint8_t *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  unint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint8_t *v76;
  char *v77;
  char *v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t (*v82)(uint64_t);
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;

  v81 = a4;
  v82 = a3;
  v5 = a2 & 1;
  v6 = type metadata accessor for CloudSyncState(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = __chkstk_darwin(v6);
  v75 = (uint64_t)&v74 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __chkstk_darwin(v8);
  v79 = (char *)&v74 - v11;
  __chkstk_darwin(v10);
  v78 = (char *)&v74 - v12;
  sub_1000076D8(0, &qword_1000EE910, v13, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
  v77 = v14;
  v15 = __chkstk_darwin(v14);
  v76 = (uint8_t *)&v74 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  v18 = (char *)&v74 - v17;
  v80 = type metadata accessor for Logger(0);
  v83 = *(_QWORD *)(v80 - 8);
  v19 = __chkstk_darwin(v80);
  v21 = (char *)&v74 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = __chkstk_darwin(v19);
  v24 = (char *)&v74 - v23;
  __chkstk_darwin(v22);
  v26 = (char *)&v74 - v25;
  sub_10005FB00(0);
  v28 = __chkstk_darwin(v27);
  v30 = (char *)&v74 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  v31 = *(int *)(v28 + 48);
  sub_10005F448(a1, (uint64_t)v30);
  v30[v31] = v5;
  v32 = v5;
  v33 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 48);
  v34 = v6;
  v35 = v33(v30, 1, v6);
  if ((_DWORD)v35 != 1)
  {
    v36 = (uint64_t)v78;
    v37 = (uint64_t)v79;
    if (!v32)
    {
      EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v30, v34);
      if ((_DWORD)EnumCaseMultiPayload == 2)
      {
        v39 = v24;
        v40 = static Logger.cloudSync.getter(EnumCaseMultiPayload);
        v41 = Logger.logObject.getter(v40);
        v42 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v41, v42))
        {
          v43 = (uint8_t *)swift_slowAlloc(2, -1);
          *(_WORD *)v43 = 0;
          _os_log_impl((void *)&_mh_execute_header, v41, v42, "Cloud sync disabled, show enable cloud sync buddy", v43, 2u);
          swift_slowDealloc(v43, -1, -1);
        }

        (*(void (**)(char *, uint64_t))(v83 + 8))(v39, v80);
        return v82(1);
      }
      else
      {
        v57 = v36;
        v58 = sub_10005FB7C((uint64_t)v30, v36);
        static Logger.cloudSync.getter(v58);
        v59 = v37;
        v60 = sub_10005FBC0(v36, v37);
        v61 = Logger.logObject.getter(v60);
        v62 = static os_log_type_t.default.getter();
        v63 = os_log_type_enabled(v61, v62);
        v64 = v80;
        v65 = v83;
        if (v63)
        {
          v66 = (uint8_t *)swift_slowAlloc(12, -1);
          v67 = swift_slowAlloc(32, -1);
          v77 = v21;
          v68 = v67;
          v85 = v67;
          *(_DWORD *)v66 = 136315138;
          v76 = v66 + 4;
          v69 = v75;
          sub_10005FBC0(v59, v75);
          v70 = String.init<A>(describing:)(v69, v34);
          v71 = v59;
          v73 = v72;
          v84 = sub_100012B20(v70, v72, &v85);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v84, &v85, v76, v66 + 12);
          swift_bridgeObjectRelease(v73);
          sub_10005FC04(v71);
          _os_log_impl((void *)&_mh_execute_header, v61, v62, "Cloud sync not disabled (%s), skip enable cloud sync buddy", v66, 0xCu);
          swift_arrayDestroy(v68, 1, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v68, -1, -1);
          swift_slowDealloc(v66, -1, -1);

          (*(void (**)(char *, uint64_t))(v83 + 8))(v77, v64);
        }
        else
        {
          sub_10005FC04(v59);

          (*(void (**)(char *, uint64_t))(v65 + 8))(v21, v64);
        }
        v82(0);
        return sub_10005FC04(v57);
      }
    }
    v35 = sub_10005FAAC((uint64_t)v30);
  }
  static Logger.cloudSync.getter(v35);
  v45 = sub_10005F448(a1, (uint64_t)v18);
  v46 = Logger.logObject.getter(v45);
  v47 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v46, v47))
  {
    v48 = swift_slowAlloc(22, -1);
    v49 = swift_slowAlloc(64, -1);
    v85 = v49;
    *(_DWORD *)v48 = 136446466;
    v50 = (uint64_t)v76;
    sub_10005F448((uint64_t)v18, (uint64_t)v76);
    v51 = String.init<A>(describing:)(v50, v77);
    v53 = v52;
    v84 = sub_100012B20(v51, v52, &v85);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v84, &v85, v48 + 4, v48 + 12);
    swift_bridgeObjectRelease(v53);
    sub_10005FAAC((uint64_t)v18);
    *(_WORD *)(v48 + 12) = 2082;
    LOBYTE(v84) = v32;
    v54 = String.init<A>(describing:)(&v84, &type metadata for DispatchTimeoutResult);
    v56 = v55;
    v84 = sub_100012B20(v54, v55, &v85);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v84, &v85, v48 + 14, v48 + 22);
    swift_bridgeObjectRelease(v56);
    _os_log_impl((void *)&_mh_execute_header, v46, v47, "state: %{public}s, timeoutResult: %{public}s, healthd did not respond fast enough, skip enable cloud sync buddy", (uint8_t *)v48, 0x16u);
    swift_arrayDestroy(v49, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v49, -1, -1);
    swift_slowDealloc(v48, -1, -1);
  }
  else
  {
    sub_10005FAAC((uint64_t)v18);
  }

  (*(void (**)(char *, uint64_t))(v83 + 8))(v26, v80);
  return v82(0);
}

uint64_t sub_10005FAAC(uint64_t a1)
{
  uint64_t v2;

  sub_1000076D8(0, &qword_1000EE910, (uint64_t (*)(uint64_t))&type metadata accessor for CloudSyncState, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void sub_10005FB00(uint64_t a1)
{
  uint64_t v2;
  unint64_t TupleTypeMetadata2;
  uint64_t v4;

  if (!qword_1000EE918)
  {
    sub_1000076D8(255, &qword_1000EE910, (uint64_t (*)(uint64_t))&type metadata accessor for CloudSyncState, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2(a1, v2, &type metadata for DispatchTimeoutResult, 0, 0);
    if (!v4)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_1000EE918);
  }
}

uint64_t sub_10005FB7C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for CloudSyncState(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_10005FBC0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for CloudSyncState(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10005FC04(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for CloudSyncState(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_10005FC40(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_1000076D8(0, &qword_1000EE910, (uint64_t (*)(uint64_t))&type metadata accessor for CloudSyncState, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

unint64_t sub_10005FC9C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000EE920;
  if (!qword_1000EE920)
  {
    v1 = type metadata accessor for CloudSyncBuddyAvailabilityProvider();
    result = swift_getMetatypeMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_1000EE920);
  }
  return result;
}

uint64_t type metadata accessor for WelcomeiPadHealthKitSyncViewController(uint64_t a1)
{
  uint64_t result;

  result = qword_1000EE968;
  if (!qword_1000EE968)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for WelcomeiPadHealthKitSyncViewController);
  return result;
}

uint64_t sub_10005FD14(uint64_t a1)
{
  _QWORD v2[6];

  v2[0] = &unk_1000B4118;
  v2[1] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v2[2] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v2[3] = &unk_1000B4130;
  v2[4] = &unk_1000B4148;
  v2[5] = &unk_1000B4148;
  return swift_initClassMetadata2(a1, 0, 6, v2, a1 + qword_1000F1060);
}

void sub_10005FD80()
{
  qword_1000F1058 = 0x4056800000000000;
}

void sub_10005FD94(void *a1, uint64_t a2, uint64_t a3, char a4)
{
  _BYTE *v4;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  id v20;
  char *v21;
  id v22;
  id v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int v28;
  unint64_t v29;
  const char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  id v39;
  NSString v40;
  id v41;
  objc_class *v42;
  char *v43;
  id v44;
  id v45;
  id v46;
  id v47;
  id v48;
  _QWORD v49[2];
  uint64_t v50;
  id v51;
  uint64_t v52;
  objc_super v53;

  v9 = type metadata accessor for Locale(0);
  __chkstk_darwin(v9);
  v11 = (char *)v49 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for String.LocalizationValue(0);
  v13 = __chkstk_darwin(v12);
  v15 = (char *)v49 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  v17 = (char *)v49 - v16;
  v18 = &v4[qword_1000EE938];
  *((_QWORD *)v18 + 1) = 0;
  v19 = swift_unknownObjectWeakInit(v18, 0);
  *(_QWORD *)&v4[qword_1000EE958] = 0;
  *(_QWORD *)&v4[qword_1000EE960] = 0;
  v4[qword_1000EE950] = a4;
  *(_QWORD *)&v4[qword_1000EE940] = a1;
  *(_QWORD *)(v19 + 8) = a3;
  swift_unknownObjectWeakAssign(v19, a2);
  v20 = objc_allocWithZone((Class)HKCloudSyncControl);
  v21 = v4;
  v22 = a1;
  v23 = objc_msgSend(v20, "initWithHealthStore:", v22);
  *(_QWORD *)&v21[qword_1000EE948] = v23;

  v24 = String.LocalizationValue.init(stringLiteral:)(0xD00000000000001ALL, 0x80000001000BB7E0);
  static Locale.current.getter(v24);
  v25 = String.init(localized:table:bundle:locale:comment:)(v17, 0, 0, 0, v11, 0, 0, 256);
  v27 = v26;
  v28 = objc_msgSend((id)objc_opt_self(_HKMobileGestaltBridge), "wapiCapability");
  v51 = v22;
  v52 = a2;
  v49[1] = v21;
  v50 = v27;
  if (v28)
  {
    v29 = 0xD000000000000020;
    v30 = "buddy_healthkit_sync_detail_wlan";
  }
  else
  {
    v29 = 0xD00000000000001BLL;
    v30 = "buddy_healthkit_sync_detail";
  }
  v31 = String.LocalizationValue.init(stringLiteral:)(v29, (unint64_t)(v30 - 32) | 0x8000000000000000);
  static Locale.current.getter(v31);
  v32 = String.init(localized:table:bundle:locale:comment:)(v15, 0, 0, 0, v11, 0, 0, 256);
  v34 = v33;
  v35 = String.LocalizationValue.init(stringLiteral:)(0xD000000000000024, 0x80000001000BB820);
  static Locale.current.getter(v35);
  v36 = String.init(localized:table:bundle:locale:comment:)(v17, 0, 0, 0, v11, 0, 0, 256);
  v38 = v37;
  v39 = objc_msgSend((id)objc_opt_self(UIImageSymbolConfiguration), "configurationWithPointSize:weight:scale:", 4, 1, 50.0);
  v40 = String._bridgeToObjectiveC()();
  v41 = objc_msgSend((id)objc_opt_self(UIImage), "systemImageNamed:withConfiguration:", v40, v39);

  if (v41)
  {
    v49[0] = v38;
    v42 = (objc_class *)type metadata accessor for ImageWithCircleBackground();
    v43 = (char *)objc_allocWithZone(v42);
    *(_QWORD *)&v43[OBJC_IVAR____TtC6Health25ImageWithCircleBackground_image] = v41;
    v53.receiver = v43;
    v53.super_class = v42;
    v44 = v41;
    v45 = objc_msgSendSuper2(&v53, "initWithFrame:", 0.0, 0.0, 0.0, 0.0);
    sub_100092184();
    v46 = objc_msgSend(v45, "heightAnchor");
    if (qword_1000EC0A8 != -1)
      swift_once(&qword_1000EC0A8, sub_10005FD80);
    v47 = objc_msgSend(v46, "constraintEqualToConstant:", *(double *)&qword_1000F1058);

    objc_msgSend(v47, "setActive:", 1);
    v48 = v45;
    OnboardingHeroWithLinkViewController.init(title:detailText:heroView:linkButtonText:linkButtonAction:linkButtonAccessibilityIdentifier:underLinkButtonContentView:heroViewUsesIntrinsicHeight:)(v25, v50, v32, v34, v48, v36, v49[0], 0, 0xD000000000000034, 0x80000001000BB850, 0, 1);

    swift_unknownObjectRelease(v52);
  }
  else
  {
    __break(1u);
  }
}

void sub_100060228()
{
  char *v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  objc_class *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  NSString v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  Class isa;
  id v16;
  id v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  NSString v22;
  uint64_t v23;
  Class v24;
  id v25;
  id v26;
  void *v27;
  id v28;
  void *v29;
  Class v30;
  id v31;
  _OWORD v32[2];
  objc_super v33;

  v1 = type metadata accessor for Locale(0);
  __chkstk_darwin(v1);
  v3 = (char *)v32 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for String.LocalizationValue(0);
  __chkstk_darwin(v4);
  v6 = (char *)v32 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = (objc_class *)type metadata accessor for WelcomeiPadHealthKitSyncViewController(0);
  v33.receiver = v0;
  v33.super_class = v7;
  objc_msgSendSuper2(&v33, "viewDidLoad");
  v8 = String.LocalizationValue.init(stringLiteral:)(0xD000000000000020, 0x80000001000BB8C0);
  static Locale.current.getter(v8);
  String.init(localized:table:bundle:locale:comment:)(v6, 0, 0, 0, v3, 0, 0, 256);
  v10 = v9;
  v11 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v10);
  sub_100061034();
  v13 = v12;
  v14 = swift_allocObject(v12, 64, 7);
  v32[0] = xmmword_1000B1580;
  *(_OWORD *)(v14 + 16) = xmmword_1000B1580;
  *(_QWORD *)(v14 + 32) = 0xD000000000000024;
  *(_QWORD *)(v14 + 40) = 0x80000001000B7C90;
  strcpy((char *)(v14 + 48), "EnableButton");
  *(_BYTE *)(v14 + 61) = 0;
  *(_WORD *)(v14 + 62) = -5120;
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v14);
  v16 = (id)HKUIJoinStringsForAutomationIdentifier(isa);

  v17 = objc_msgSend(v0, "hxui_addPrimaryFooterButtonWithTitle:accessibilityIdentifier:", v11, v16);
  v18 = *(void **)&v0[qword_1000EE958];
  *(_QWORD *)&v0[qword_1000EE958] = v17;

  v19 = String.LocalizationValue.init(stringLiteral:)(0xD000000000000021, 0x80000001000BB8F0);
  static Locale.current.getter(v19);
  String.init(localized:table:bundle:locale:comment:)(v6, 0, 0, 0, v3, 0, 0, 256);
  v21 = v20;
  v22 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v21);
  v23 = swift_allocObject(v13, 64, 7);
  *(_OWORD *)(v23 + 16) = v32[0];
  *(_QWORD *)(v23 + 32) = 0xD000000000000024;
  *(_QWORD *)(v23 + 40) = 0x80000001000B7C90;
  strcpy((char *)(v23 + 48), "DisableButton");
  *(_WORD *)(v23 + 62) = -4864;
  v24 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v23);
  v25 = (id)HKUIJoinStringsForAutomationIdentifier(v24);

  v26 = objc_msgSend(v0, "hxui_addSecondaryFooterButtonWithTitle:bold:accessibilityIdentifier:", v22, 0, v25);
  v27 = *(void **)&v0[qword_1000EE960];
  *(_QWORD *)&v0[qword_1000EE960] = v26;

  v28 = objc_msgSend(v0, "view");
  if (v28)
  {
    v29 = v28;
    v30 = Array._bridgeToObjectiveC()().super.isa;
    v31 = (id)HKUIJoinStringsForAutomationIdentifier(v30);

    objc_msgSend(v29, "setAccessibilityIdentifier:", v31);
  }
  else
  {
    __break(1u);
  }
}

void sub_1000605A0(void *a1)
{
  id v1;

  v1 = a1;
  sub_100060228();

}

void sub_1000605D4()
{
  uint64_t v0;
  void *v1;
  id v2;

  v1 = *(void **)(v0 + qword_1000EE958);
  v2 = v1;
  sub_1000606F4(v1, 1);

  sub_100046898();
  AnalyticsSubmitting.submit()();
}

void sub_100060640(void *a1)
{
  id v1;

  v1 = a1;
  sub_1000605D4();

}

void sub_100060674(char *a1)
{
  void *v2;
  id v3;
  char *v4;

  v2 = *(void **)&a1[qword_1000EE960];
  v3 = v2;
  v4 = a1;
  sub_1000606F4(v2, 0);

  sub_100046898();
  AnalyticsSubmitting.submit()();

}

void sub_1000606F4(void *a1, char a2)
{
  uint64_t v2;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t Strong;
  uint64_t v9;
  uint64_t v10;
  void **v11;
  uint64_t v12;
  void (*v13)(uint64_t, uint64_t, void *);
  void *v14;
  uint64_t (*v15)(int, uint64_t);
  uint64_t v16;

  if (*(_BYTE *)(v2 + qword_1000EE950) == (a2 & 1))
  {
    Strong = swift_unknownObjectWeakLoadStrong(v2 + qword_1000EE938);
    if (Strong)
    {
      v9 = Strong;
      sub_1000747F4(a2 & 1);
      swift_unknownObjectRelease(v9);
    }
  }
  else
  {
    objc_msgSend(a1, "showsBusyIndicator");
    v4 = *(void **)(v2 + qword_1000EE948);
    v5 = swift_allocObject(&unk_1000DFF80, 24, 7);
    swift_unknownObjectWeakInit(v5 + 16, v2);
    if ((a2 & 1) != 0)
    {
      v6 = swift_allocObject(&unk_1000DFFF8, 25, 7);
      *(_QWORD *)(v6 + 16) = v5;
      *(_BYTE *)(v6 + 24) = 1;
      v15 = sub_10006118C;
      v16 = v6;
      v11 = _NSConcreteStackBlock;
      v12 = 1107296256;
      v13 = sub_10000666C;
      v14 = &unk_1000E0010;
      v7 = _Block_copy(&v11);
      swift_release(v16);
      objc_msgSend(v4, "enableCloudSyncWithCompletion:", v7);
    }
    else
    {
      v10 = swift_allocObject(&unk_1000DFFA8, 25, 7);
      *(_QWORD *)(v10 + 16) = v5;
      *(_BYTE *)(v10 + 24) = 0;
      v15 = sub_100061150;
      v16 = v10;
      v11 = _NSConcreteStackBlock;
      v12 = 1107296256;
      v13 = sub_10000666C;
      v14 = &unk_1000DFFC0;
      v7 = _Block_copy(&v11);
      swift_release(v16);
      objc_msgSend(v4, "disableCloudSyncWithCompletion:", v7);
    }
    _Block_release(v7);
  }
}

uint64_t sub_1000608AC(int a1, uint64_t a2, uint64_t a3, int a4, const char *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  NSObject *v21;
  os_log_type_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  const char *v52;
  uint64_t v53;
  uint64_t v54;
  int v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t aBlock[5];
  uint64_t v62;

  v56 = a7;
  v57 = a3;
  v54 = a6;
  v52 = a5;
  v55 = a4;
  LODWORD(v51) = a1;
  v10 = type metadata accessor for DispatchWorkItemFlags(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = (char *)&v48 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for DispatchQoS(0);
  v59 = *(_QWORD *)(v14 - 8);
  __chkstk_darwin(v14);
  v58 = (char *)&v48 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for Logger(0);
  v53 = *(_QWORD *)(v16 - 8);
  v17 = __chkstk_darwin(v16);
  v19 = (char *)&v48 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  static Logger.cloudSync.getter(v17);
  swift_errorRetain(a2);
  v20 = swift_errorRetain(a2);
  v21 = Logger.logObject.getter(v20);
  v22 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v21, v22))
  {
    v23 = swift_slowAlloc(18, -1);
    v49 = v16;
    v24 = v23;
    v25 = swift_slowAlloc(32, -1);
    v50 = v14;
    v48 = v25;
    aBlock[0] = v25;
    *(_DWORD *)v24 = 67109378;
    LODWORD(v60) = v51 & 1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v60, (char *)&v60 + 4, v24 + 4, v24 + 8);
    *(_WORD *)(v24 + 8) = 2082;
    v51 = v24 + 10;
    v60 = a2;
    swift_errorRetain(a2);
    sub_1000076D8(0, (unint64_t *)&qword_1000EC718, (uint64_t (*)(uint64_t))sub_100013960, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
    v27 = String.init<A>(describing:)(&v60, v26);
    v28 = a8;
    v29 = v13;
    v30 = v11;
    v31 = v10;
    v33 = v32;
    v60 = sub_100012B20(v27, v32, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v60, aBlock, v51, v24 + 18);
    v34 = v33;
    v10 = v31;
    v11 = v30;
    v13 = v29;
    a8 = v28;
    swift_bridgeObjectRelease(v34);
    swift_errorRelease(a2);
    swift_errorRelease(a2);
    _os_log_impl((void *)&_mh_execute_header, v21, v22, v52, (uint8_t *)v24, 0x12u);
    v35 = v48;
    swift_arrayDestroy(v48, 1, (char *)&type metadata for Any + 8);
    v14 = v50;
    swift_slowDealloc(v35, -1, -1);
    swift_slowDealloc(v24, -1, -1);

    (*(void (**)(char *, uint64_t))(v53 + 8))(v19, v49);
  }
  else
  {
    swift_errorRelease(a2);
    swift_errorRelease(a2);

    (*(void (**)(char *, uint64_t))(v53 + 8))(v19, v16);
  }
  sub_100023BC8();
  v36 = (void *)static OS_dispatch_queue.main.getter();
  v37 = swift_allocObject(v54, 40, 7);
  v38 = v57;
  *(_QWORD *)(v37 + 16) = v57;
  *(_BYTE *)(v37 + 24) = v55 & 1;
  *(_QWORD *)(v37 + 32) = a2;
  aBlock[4] = v56;
  v62 = v37;
  aBlock[0] = (uint64_t)_NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = (uint64_t)sub_100006988;
  aBlock[3] = a8;
  v39 = _Block_copy(aBlock);
  v40 = v62;
  swift_errorRetain(a2);
  swift_retain(v38);
  v41 = swift_release(v40);
  v42 = v58;
  static DispatchQoS.unspecified.getter(v41);
  aBlock[0] = (uint64_t)_swiftEmptyArrayStorage;
  v43 = sub_1000611CC();
  sub_1000076D8(0, (unint64_t *)&qword_1000ED920, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Array);
  v45 = v44;
  v46 = sub_100013C8C();
  dispatch thunk of SetAlgebra.init<A>(_:)(aBlock, v45, v46, v10, v43);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v42, v13, v39);
  _Block_release(v39);

  (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  return (*(uint64_t (**)(char *, uint64_t))(v59 + 8))(v42, v14);
}

void sub_100060CD8(uint64_t a1, char a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t Strong;
  char *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE v12[24];

  v5 = a1 + 16;
  swift_beginAccess(a1 + 16, v12, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(v5);
  if (Strong)
  {
    v7 = (char *)Strong;
    v8 = *(void **)(Strong + qword_1000EE958);
    if (v8)
      objc_msgSend(v8, "hidesBusyIndicator");
    if (a3)
    {
      swift_errorRetain(a3);
      sub_100061214();
      swift_errorRelease(a3);
LABEL_6:

      return;
    }
    v9 = a2 & 1;
    v7[qword_1000EE950] = a2 & 1;
    v10 = swift_unknownObjectWeakLoadStrong(&v7[qword_1000EE938]);
    if (!v10)
      goto LABEL_6;
    v11 = v10;
    sub_1000747F4(v9);

    swift_unknownObjectRelease(v11);
  }
}

uint64_t sub_100060DAC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  sub_1000076D8(0, (unint64_t *)&unk_1000ECA90, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
  v2 = v1;
  __chkstk_darwin(v1);
  v4 = (char *)&v10 - v3;
  result = swift_unknownObjectWeakLoadStrong(v0 + qword_1000EE938);
  if (result)
  {
    v6 = result;
    if (qword_1000EC108 != -1)
      swift_once(&qword_1000EC108, sub_100071E20);
    v7 = sub_10001C86C(v2, (uint64_t)qword_1000F10F8);
    sub_1000610AC(v7, (uint64_t)v4);
    v8 = type metadata accessor for URL(0);
    v9 = *(_QWORD *)(v8 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v4, 1, v8) == 1)
    {
      sub_10001C7DC((uint64_t)v4);
    }
    else
    {
      URL.openSensitiveURL()();
      (*(void (**)(char *, uint64_t))(v9 + 8))(v4, v8);
    }
    return swift_unknownObjectRelease(v6);
  }
  return result;
}

void sub_100060ED4()
{
  _swift_stdlib_reportUnimplementedInitializer("Health.WelcomeiPadHealthKitSyncViewController", 45, "init(title:detailText:heroView:linkButtonText:linkButtonAction:linkButtonAccessibilityIdentifier:underLinkButtonContentView:heroViewUsesIntrinsicHeight:)", 153, 0);
  __break(1u);
}

void sub_100060F00()
{
  _swift_stdlib_reportUnimplementedInitializer("Health.WelcomeiPadHealthKitSyncViewController", 45, "init(title:detailText:heroImage:heroImageHeight:linkButtonText:linkButtonAction:linkButtonAccessibilityIdentifier:underLinkButtonContentView:)", 142, 0);
  __break(1u);
}

void sub_100060F2C()
{
  uint64_t v0;

  sub_100061088(v0 + qword_1000EE938);

}

id sub_100060F88()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for WelcomeiPadHealthKitSyncViewController(0);
  return objc_msgSendSuper2(&v2, "dealloc");
}

void sub_100060FBC(uint64_t a1)
{
  sub_100061088(a1 + qword_1000EE938);

}

uint64_t sub_100061024()
{
  return type metadata accessor for WelcomeiPadHealthKitSyncViewController(0);
}

uint64_t sub_10006102C()
{
  return 7;
}

void sub_100061034()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1000EF4C0)
  {
    v0 = type metadata accessor for _ContiguousArrayStorage(0, &type metadata for String);
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1000EF4C0);
  }
}

uint64_t sub_100061088(uint64_t a1)
{
  swift_unknownObjectWeakDestroy(a1);
  return a1;
}

uint64_t sub_1000610AC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_1000076D8(0, (unint64_t *)&unk_1000ECA90, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_100061108()
{
  uint64_t v0;

  swift_unknownObjectWeakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10006112C()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 25, 7);
}

uint64_t sub_100061150(int a1, uint64_t a2)
{
  uint64_t v2;

  return sub_1000608AC(a1, a2, *(_QWORD *)(v2 + 16), *(unsigned __int8 *)(v2 + 24), "Disable cloud sync success %{BOOL}d, error %{public}s", (uint64_t)&unk_1000E0098, (uint64_t)sub_1000614C8, (uint64_t)&unk_1000E00B0);
}

uint64_t sub_10006118C(int a1, uint64_t a2)
{
  uint64_t v2;

  return sub_1000608AC(a1, a2, *(_QWORD *)(v2 + 16), *(unsigned __int8 *)(v2 + 24), "Enable cloud sync success %{BOOL}d, error %{public}s", (uint64_t)&unk_1000E0048, (uint64_t)sub_100061500, (uint64_t)&unk_1000E0060);
}

unint64_t sub_1000611CC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000EDBE0;
  if (!qword_1000EDBE0)
  {
    v1 = type metadata accessor for DispatchWorkItemFlags(255);
    result = swift_getWitnessTable(&protocol conformance descriptor for DispatchWorkItemFlags, v1);
    atomic_store(result, (unint64_t *)&qword_1000EDBE0);
  }
  return result;
}

void sub_100061214()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  _BYTE *v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  NSString v13;
  NSString v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  NSString v19;
  id v20;
  _BYTE v21[16];

  v1 = type metadata accessor for Locale(0);
  __chkstk_darwin(v1);
  v3 = &v21[-((v2 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v4 = type metadata accessor for String.LocalizationValue(0);
  __chkstk_darwin(v4);
  v6 = &v21[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v7 = String.LocalizationValue.init(stringLiteral:)(0xD000000000000021, 0x80000001000BBA80);
  static Locale.current.getter(v7);
  String.init(localized:table:bundle:locale:comment:)(v6, 0, 0, 0, v3, 0, 0, 256);
  v9 = v8;
  v10 = String.LocalizationValue.init(stringLiteral:)(0xD000000000000023, 0x80000001000BBAB0);
  static Locale.current.getter(v10);
  String.init(localized:table:bundle:locale:comment:)(v6, 0, 0, 0, v3, 0, 0, 256);
  v12 = v11;
  v13 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v9);
  v14 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v12);
  v15 = objc_msgSend((id)objc_opt_self(UIAlertController), "alertControllerWithTitle:message:preferredStyle:", v13, v14, 1);

  v16 = String.LocalizationValue.init(stringLiteral:)(0xD000000000000025, 0x80000001000BBAE0);
  static Locale.current.getter(v16);
  String.init(localized:table:bundle:locale:comment:)(v6, 0, 0, 0, v3, 0, 0, 256);
  v18 = v17;
  v19 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v18);
  v20 = objc_msgSend((id)objc_opt_self(UIAlertAction), "actionWithTitle:style:handler:", v19, 0, 0);

  objc_msgSend(v15, "addAction:", v20);
  objc_msgSend(v0, "presentViewController:animated:completion:", v15, 1, 0);

}

uint64_t sub_10006149C()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  swift_errorRelease(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 40, 7);
}

void sub_1000614C8()
{
  uint64_t v0;

  sub_100060CD8(*(_QWORD *)(v0 + 16), *(_BYTE *)(v0 + 24), *(_QWORD *)(v0 + 32));
}

uint64_t type metadata accessor for CloudSyncDownloadingStateViewController(uint64_t a1)
{
  uint64_t result;

  result = qword_1000EE9C8;
  if (!qword_1000EE9C8)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for CloudSyncDownloadingStateViewController);
  return result;
}

uint64_t sub_100061540(uint64_t a1)
{
  uint64_t v2;
  uint64_t result;
  unint64_t v4;
  _QWORD v5[2];

  v2 = qword_1000F1070;
  v5[0] = &unk_1000B4198;
  result = type metadata accessor for CloudSyncRestoreState(319);
  if (v4 <= 0x3F)
  {
    v5[1] = *(_QWORD *)(result - 8) + 64;
    result = swift_initClassMetadata2(a1, 0, 2, v5, a1 + v2);
    if (!result)
      return 0;
  }
  return result;
}

uint64_t sub_1000615C0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t, uint64_t);
  id v9;
  id v10;
  int v11;
  const char *v12;
  unint64_t v13;
  id v14;
  NSString v15;
  id v16;
  objc_class *v17;
  char *v18;
  id v19;
  id v20;
  id v21;
  id v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  objc_super v31;

  v3 = type metadata accessor for CloudSyncRestoreState(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v31 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = v1 + qword_1000EE9B8;
  *(_QWORD *)(v7 + 8) = 0;
  swift_unknownObjectWeakInit(v7, 0);
  v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16);
  v8(v1 + qword_1000EE9C0, a1, v3);
  v9 = objc_msgSend(objc_allocWithZone((Class)UIView), "init");
  v10 = objc_msgSend((id)objc_opt_self(UIImageSymbolConfiguration), "configurationWithPointSize:weight:scale:", 4, 1, 50.0);
  v8((uint64_t)v6, a1, v3);
  v11 = (*(uint64_t (**)(char *, uint64_t))(v4 + 88))(v6, v3);
  if (v11 == enum case for CloudSyncRestoreState.failed(_:))
  {
    v12 = "exclamationmark.icloud";
  }
  else
  {
    if (v11 != enum case for CloudSyncRestoreState.completed(_:))
    {
      (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
      goto LABEL_10;
    }
    v12 = "checkmark.icloud";
  }
  v13 = (unint64_t)(v12 - 32) | 0x8000000000000000;
  v14 = v10;
  v15 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v13);
  v16 = objc_msgSend((id)objc_opt_self(UIImage), "systemImageNamed:withConfiguration:", v15, v14);

  if (!v16)
  {
LABEL_10:
    v23 = 0;
    goto LABEL_11;
  }
  v17 = (objc_class *)type metadata accessor for ImageWithCircleBackground();
  v18 = (char *)objc_allocWithZone(v17);
  *(_QWORD *)&v18[OBJC_IVAR____TtC6Health25ImageWithCircleBackground_image] = v16;
  v31.receiver = v18;
  v31.super_class = v17;
  v19 = v16;
  v20 = objc_msgSendSuper2(&v31, "initWithFrame:", 0.0, 0.0, 0.0, 0.0);
  sub_100092184();

  v21 = objc_msgSend(v20, "heightAnchor");
  if (qword_1000EC0A8 != -1)
    swift_once(&qword_1000EC0A8, sub_10005FD80);
  v22 = objc_msgSend(v21, "constraintEqualToConstant:", *(double *)&qword_1000F1058);

  v23 = 1;
  objc_msgSend(v22, "setActive:", 1);

  v9 = v20;
LABEL_11:
  v24 = sub_1000618F8();
  v26 = v25;
  v27 = sub_100061AA4();
  v29 = OnboardingHeroWithLinkViewController.init(title:detailText:heroView:linkButtonText:linkButtonAction:linkButtonAccessibilityIdentifier:underLinkButtonContentView:heroViewUsesIntrinsicHeight:)(v24, v26, v27, v28, v9, 0, 0, 0, 0, 0, 0, v23);

  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(a1, v3);
  return v29;
}

uint64_t sub_1000618F8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  int v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  _BYTE v17[16];

  v1 = v0;
  v2 = type metadata accessor for Locale(0);
  __chkstk_darwin(v2);
  v4 = &v17[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v5 = type metadata accessor for String.LocalizationValue(0);
  __chkstk_darwin(v5);
  v7 = &v17[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v8 = type metadata accessor for CloudSyncRestoreState(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = &v17[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v9 + 16))(v11, v1, v8);
  v12 = (*(uint64_t (**)(_BYTE *, uint64_t))(v9 + 88))(v11, v8);
  if (v12 == enum case for CloudSyncRestoreState.failed(_:))
  {
    v13 = 0xD000000000000026;
    v14 = 0x80000001000BBC20;
LABEL_5:
    v15 = String.LocalizationValue.init(stringLiteral:)(v13, v14);
    static Locale.current.getter(v15);
    return String.init(localized:table:bundle:locale:comment:)(v7, 0, 0, 0, v4, 0, 0, 256);
  }
  if (v12 == enum case for CloudSyncRestoreState.completed(_:))
  {
    v14 = 0x80000001000BBC50;
    v13 = 0xD000000000000021;
    goto LABEL_5;
  }
  (*(void (**)(_BYTE *, uint64_t))(v9 + 8))(v11, v8);
  return 0;
}

uint64_t sub_100061AA4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  int v12;
  unint64_t v13;
  const char *v14;
  unint64_t v15;
  uint64_t v16;
  _BYTE v18[16];

  v1 = v0;
  v2 = type metadata accessor for Locale(0);
  __chkstk_darwin(v2);
  v4 = &v18[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v5 = type metadata accessor for String.LocalizationValue(0);
  __chkstk_darwin(v5);
  v7 = &v18[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v8 = type metadata accessor for CloudSyncRestoreState(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = &v18[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v9 + 16))(v11, v1, v8);
  v12 = (*(uint64_t (**)(_BYTE *, uint64_t))(v9 + 88))(v11, v8);
  if (v12 == enum case for CloudSyncRestoreState.failed(_:))
  {
    if (objc_msgSend((id)objc_opt_self(_HKMobileGestaltBridge), "wapiCapability"))
    {
      v13 = 0xD00000000000002ELL;
      v14 = "ipad_health_data_download_failed_subtitle_wlan";
    }
    else
    {
      v13 = 0xD000000000000029;
      v14 = "ipad_health_data_download_failed_subtitle";
    }
    v15 = (unint64_t)(v14 - 32) | 0x8000000000000000;
    goto LABEL_8;
  }
  if (v12 == enum case for CloudSyncRestoreState.completed(_:))
  {
    v15 = 0x80000001000BBBF0;
    v13 = 0xD000000000000024;
LABEL_8:
    v16 = String.LocalizationValue.init(stringLiteral:)(v13, v15);
    static Locale.current.getter(v16);
    return String.init(localized:table:bundle:locale:comment:)(v7, 0, 0, 0, v4, 0, 0, 256);
  }
  (*(void (**)(_BYTE *, uint64_t))(v9 + 8))(v11, v8);
  return 0;
}

void sub_100061C7C()
{
  void *v0;
  id v1;
  id v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  Class isa;
  id v7;
  uint64_t v8;
  uint64_t v9;
  NSString v10;
  objc_super v11;

  v11.receiver = v0;
  v11.super_class = (Class)type metadata accessor for CloudSyncDownloadingStateViewController(0);
  objc_msgSendSuper2(&v11, "viewDidLoad");
  v1 = objc_msgSend(v0, "navigationItem");
  objc_msgSend(v1, "setHidesBackButton:", 1);

  sub_100061E30();
  v2 = objc_msgSend(v0, "view");
  if (v2)
  {
    v3 = v2;
    sub_100061034();
    v5 = swift_allocObject(v4, 64, 7);
    *(_OWORD *)(v5 + 16) = xmmword_1000B1580;
    *(_QWORD *)(v5 + 32) = 0x626E4F7964647542;
    *(_QWORD *)(v5 + 40) = 0xEF676E696472616FLL;
    *(_QWORD *)(v5 + 48) = 0xD000000000000019;
    *(_QWORD *)(v5 + 56) = 0x80000001000BBC80;
    isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(v5);
    v7 = (id)HKUIJoinStringsForAutomationIdentifier(isa);

    if (v7)
    {
      static String._unconditionallyBridgeFromObjectiveC(_:)(v7);
      v9 = v8;

      v10 = String._bridgeToObjectiveC()();
      objc_msgSend(v3, "setAccessibilityIdentifier:", v10, swift_bridgeObjectRelease(v9).n128_f64[0]);

      return;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
}

void sub_100061DFC(void *a1)
{
  id v1;

  v1 = a1;
  sub_100061C7C();

}

void sub_100061E30()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  NSString v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  id v21;
  Class isa;
  id v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  Class v27;
  id v28;
  id v29;
  id v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  NSString v34;
  uint64_t v35;
  uint64_t v36;
  id v37;
  Class v38;
  id v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  Class v43;
  id v44;
  id v45;
  id v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  NSString v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  Class v55;
  id v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  Class v60;
  id v61;
  _OWORD v62[2];

  v1 = type metadata accessor for Locale(0);
  __chkstk_darwin(v1);
  v3 = (char *)v62 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for String.LocalizationValue(0);
  __chkstk_darwin(v4);
  v6 = (char *)v62 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for CloudSyncRestoreState(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)v62 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v10, (uint64_t)v0 + qword_1000EE9C0, v7);
  v11 = (*(uint64_t (**)(char *, uint64_t))(v8 + 88))(v10, v7);
  if (v11 == enum case for CloudSyncRestoreState.failed(_:))
  {
    v12 = objc_msgSend((id)objc_opt_self(OBBoldTrayButton), "boldButton");
    objc_msgSend(v12, "addTarget:action:forControlEvents:", v0, "tryAgainButtonTapped", 64);
    v13 = String.LocalizationValue.init(stringLiteral:)(0xD000000000000010, 0x80000001000BBCD0);
    static Locale.current.getter(v13);
    String.init(localized:table:bundle:locale:comment:)(v6, 0, 0, 0, v3, 0, 0, 256);
    v15 = v14;
    v16 = String._bridgeToObjectiveC()();
    objc_msgSend(v12, "setTitle:forState:", v16, 0, swift_bridgeObjectRelease(v15).n128_f64[0]);

    sub_100061034();
    v18 = v17;
    v19 = swift_allocObject(v17, 64, 7);
    v62[0] = xmmword_1000B1580;
    *(_OWORD *)(v19 + 16) = xmmword_1000B1580;
    v20 = swift_allocObject(v18, 64, 7);
    *(_OWORD *)(v20 + 16) = v62[0];
    *(_QWORD *)(v20 + 32) = 0x626E4F7964647542;
    *(_QWORD *)(v20 + 40) = 0xEF676E696472616FLL;
    *(_QWORD *)(v20 + 48) = 0xD000000000000019;
    *(_QWORD *)(v20 + 56) = 0x80000001000BBC80;
    v21 = v12;
    isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(v20);
    v23 = (id)HKUIJoinStringsForAutomationIdentifier(isa);

    if (v23)
    {
      v24 = static String._unconditionallyBridgeFromObjectiveC(_:)(v23);
      v26 = v25;

      *(_QWORD *)(v19 + 32) = v24;
      *(_QWORD *)(v19 + 40) = v26;
      strcpy((char *)(v19 + 48), "TryAgainButton");
      *(_BYTE *)(v19 + 63) = -18;
      v27 = Array._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease(v19);
      v28 = (id)HKUIJoinStringsForAutomationIdentifier(v27);

      objc_msgSend(v21, "setAccessibilityIdentifier:", v28);
      v29 = objc_msgSend(v0, "buttonTray");
      objc_msgSend(v29, "addButton:", v21);

      v30 = objc_msgSend((id)objc_opt_self(OBLinkTrayButton), "linkButton");
      objc_msgSend(v30, "addTarget:action:forControlEvents:", v0, "doneButtonTapped", 64);
      v31 = String.LocalizationValue.init(stringLiteral:)(0xD000000000000015, 0x80000001000BBCF0);
      static Locale.current.getter(v31);
      String.init(localized:table:bundle:locale:comment:)(v6, 0, 0, 0, v3, 0, 0, 256);
      v33 = v32;
      v34 = String._bridgeToObjectiveC()();
      objc_msgSend(v30, "setTitle:forState:", v34, 0, swift_bridgeObjectRelease(v33).n128_f64[0]);

      v35 = swift_allocObject(v18, 64, 7);
      *(_OWORD *)(v35 + 16) = v62[0];
      v36 = swift_allocObject(v18, 64, 7);
      *(_OWORD *)(v36 + 16) = v62[0];
      *(_QWORD *)(v36 + 32) = 0x626E4F7964647542;
      *(_QWORD *)(v36 + 40) = 0xEF676E696472616FLL;
      *(_QWORD *)(v36 + 48) = 0xD000000000000019;
      *(_QWORD *)(v36 + 56) = 0x80000001000BBC80;
      v37 = v30;
      v38 = Array._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease(v36);
      v39 = (id)HKUIJoinStringsForAutomationIdentifier(v38);

      if (v39)
      {
        v40 = static String._unconditionallyBridgeFromObjectiveC(_:)(v39);
        v42 = v41;

        *(_QWORD *)(v35 + 32) = v40;
        *(_QWORD *)(v35 + 40) = v42;
        *(_QWORD *)(v35 + 48) = 0xD000000000000013;
        *(_QWORD *)(v35 + 56) = 0x80000001000BBD10;
        v43 = Array._bridgeToObjectiveC()().super.isa;
        swift_bridgeObjectRelease(v35);
        v44 = (id)HKUIJoinStringsForAutomationIdentifier(v43);

        objc_msgSend(v37, "setAccessibilityIdentifier:", v44);
        v45 = objc_msgSend(v0, "buttonTray");
        objc_msgSend(v45, "addButton:", v37);

LABEL_8:
        return;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
LABEL_13:
    __break(1u);
    return;
  }
  if (v11 == enum case for CloudSyncRestoreState.completed(_:))
  {
    v46 = objc_msgSend((id)objc_opt_self(OBBoldTrayButton), "boldButton");
    objc_msgSend(v46, "addTarget:action:forControlEvents:", v0, "doneButtonTapped", 64);
    v47 = String.LocalizationValue.init(stringLiteral:)(0xD00000000000001DLL, 0x80000001000BBD30);
    static Locale.current.getter(v47);
    String.init(localized:table:bundle:locale:comment:)(v6, 0, 0, 0, v3, 0, 0, 256);
    v49 = v48;
    v50 = String._bridgeToObjectiveC()();
    objc_msgSend(v46, "setTitle:forState:", v50, 0, swift_bridgeObjectRelease(v49).n128_f64[0]);

    sub_100061034();
    v52 = v51;
    v53 = swift_allocObject(v51, 64, 7);
    v62[0] = xmmword_1000B1580;
    *(_OWORD *)(v53 + 16) = xmmword_1000B1580;
    v54 = swift_allocObject(v52, 64, 7);
    *(_OWORD *)(v54 + 16) = v62[0];
    *(_QWORD *)(v54 + 32) = 0x626E4F7964647542;
    *(_QWORD *)(v54 + 40) = 0xEF676E696472616FLL;
    *(_QWORD *)(v54 + 48) = 0xD000000000000019;
    *(_QWORD *)(v54 + 56) = 0x80000001000BBC80;
    v37 = v46;
    v55 = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(v54);
    v56 = (id)HKUIJoinStringsForAutomationIdentifier(v55);

    if (v56)
    {
      v57 = static String._unconditionallyBridgeFromObjectiveC(_:)(v56);
      v59 = v58;

      *(_QWORD *)(v53 + 32) = v57;
      *(_QWORD *)(v53 + 40) = v59;
      *(_QWORD *)(v53 + 48) = 0x74747542656E6F44;
      *(_QWORD *)(v53 + 56) = 0xEA00000000006E6FLL;
      v60 = Array._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease(v53);
      v61 = (id)HKUIJoinStringsForAutomationIdentifier(v60);

      objc_msgSend(v37, "setAccessibilityIdentifier:", v61);
      v45 = objc_msgSend(v0, "buttonTray");
      objc_msgSend(v45, "addButton:", v37);
      goto LABEL_8;
    }
    goto LABEL_13;
  }
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
}

uint64_t sub_100062618()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  char *v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v13;

  sub_1000137DC(0);
  v2 = __chkstk_darwin(v1);
  v4 = (char *)&v13 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v2);
  v6 = (char *)&v13 - v5;
  result = swift_unknownObjectWeakLoadStrong(v0 + qword_1000EE9B8);
  if (result)
  {
    v8 = result;
    v9 = enum case for CloudSyncRestoreState.activelyRestoring(_:);
    v10 = type metadata accessor for CloudSyncRestoreState(0);
    v11 = *(_QWORD *)(v10 - 8);
    (*(void (**)(char *, uint64_t, uint64_t))(v11 + 104))(v6, v9, v10);
    v12 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v11 + 56);
    v12(v6, 0, 1, v10);
    v12(v4, 1, 1, v10);
    sub_100074ADC((uint64_t)v6, (uint64_t)v4);
    swift_unknownObjectRelease(v8);
    sub_10000CEC0((uint64_t)v4);
    return sub_10000CEC0((uint64_t)v6);
  }
  return result;
}

void sub_10006272C(void *a1)
{
  id v1;

  v1 = a1;
  sub_100062618();

}

uint64_t sub_100062760()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  char *v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(char *, uint64_t, uint64_t);
  void (*v13)(char *, _QWORD, uint64_t, uint64_t);
  uint64_t v14;

  sub_1000137DC(0);
  v2 = __chkstk_darwin(v1);
  v4 = (char *)&v14 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v2);
  v6 = (char *)&v14 - v5;
  result = swift_unknownObjectWeakLoadStrong(v0 + qword_1000EE9B8);
  if (result)
  {
    v8 = result;
    v9 = enum case for CloudSyncRestoreState.failed(_:);
    v10 = type metadata accessor for CloudSyncRestoreState(0);
    v11 = *(_QWORD *)(v10 - 8);
    v12 = *(void (**)(char *, uint64_t, uint64_t))(v11 + 104);
    v12(v6, v9, v10);
    v13 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56);
    v13(v6, 0, 1, v10);
    v12(v4, enum case for CloudSyncRestoreState.activelyRestoring(_:), v10);
    v13(v4, 0, 1, v10);
    sub_100074ADC((uint64_t)v6, (uint64_t)v4);
    swift_unknownObjectRelease(v8);
    sub_10000CEC0((uint64_t)v4);
    return sub_10000CEC0((uint64_t)v6);
  }
  return result;
}

void sub_100062894(void *a1)
{
  id v1;

  v1 = a1;
  sub_100062760();

}

void sub_1000628C8()
{
  _swift_stdlib_reportUnimplementedInitializer("Health.CloudSyncDownloadingStateViewController", 46, "init(title:detailText:heroView:linkButtonText:linkButtonAction:linkButtonAccessibilityIdentifier:underLinkButtonContentView:heroViewUsesIntrinsicHeight:)", 153, 0);
  __break(1u);
}

void sub_1000628F4()
{
  _swift_stdlib_reportUnimplementedInitializer("Health.CloudSyncDownloadingStateViewController", 46, "init(title:detailText:heroImage:heroImageHeight:linkButtonText:linkButtonAction:linkButtonAccessibilityIdentifier:underLinkButtonContentView:)", 142, 0);
  __break(1u);
}

uint64_t sub_100062920()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  sub_100061088(v0 + qword_1000EE9B8);
  v1 = v0 + qword_1000EE9C0;
  v2 = type metadata accessor for CloudSyncRestoreState(0);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
}

id sub_10006296C()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for CloudSyncDownloadingStateViewController(0);
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t sub_1000629A0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  sub_100061088(a1 + qword_1000EE9B8);
  v2 = a1 + qword_1000EE9C0;
  v3 = type metadata accessor for CloudSyncRestoreState(0);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(v2, v3);
}

uint64_t sub_1000629F0()
{
  return type metadata accessor for CloudSyncDownloadingStateViewController(0);
}

uint64_t sub_1000629F8(void *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  void *v6;
  id v7;
  id v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  Swift::String v13;
  id v14;
  id v15;
  uint64_t v16;
  void *v17;
  void *v18;
  Swift::String v19;
  _QWORD v20[5];
  uint64_t v21;

  v3 = objc_opt_self(UICollectionViewController);
  v4 = swift_dynamicCastObjCClass(a1, v3);
  if (v4)
  {
    v5 = (void *)v4;
    sub_100028F08(v1 + 16, (uint64_t)&v21);
    v6 = *(void **)(v1 + 56);
    sub_100028F08(v1 + 64, (uint64_t)v20);
    v7 = a1;
    v8 = v6;
    v9 = objc_msgSend(v5, "collectionView");
    v10 = type metadata accessor for SummaryFeedDataSource(0);
    swift_allocObject(v10, *(unsigned int *)(v10 + 48), *(unsigned __int16 *)(v10 + 52));
    v11 = sub_1000847E8(&v21, v8, v20, v9);

    return v11;
  }
  else
  {
    _StringGuts.grow(_:)(62);
    v13._object = (void *)0x80000001000BC010;
    v13._countAndFlagsBits = 0xD00000000000003CLL;
    String.append(_:)(v13);
    v14 = a1;
    v15 = objc_msgSend(v14, "description");
    v16 = static String._unconditionallyBridgeFromObjectiveC(_:)(v15);
    v18 = v17;

    v19._countAndFlagsBits = v16;
    v19._object = v18;
    String.append(_:)(v19);
    swift_bridgeObjectRelease(v18);
    result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0, 0xE000000000000000, "Health/SummaryFeedViewController.swift", 38, 2, 41, 0);
    __break(1u);
  }
  return result;
}

uint64_t sub_100062B88()
{
  uint64_t v0;

  _s6Health23OpenSleepScheduleIntentVwxx_0((_QWORD *)(v0 + 16));

  _s6Health23OpenSleepScheduleIntentVwxx_0((_QWORD *)(v0 + 64));
  return swift_deallocClassInstance(v0, 104, 7);
}

void sub_100062BBC()
{
  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000028, 0x80000001000BBF90, "Health/SummaryFeedViewController.swift", 38, 2, 53, 0);
  __break(1u);
}

uint64_t sub_100062C14(void *a1)
{
  return sub_1000629F8(a1);
}

id sub_100062C34(uint64_t a1)
{
  uint64_t v1;
  NSString v2;

  v1 = *(_QWORD *)(a1 + qword_1000EEAF0 + 8);
  if (v1)
  {
    swift_bridgeObjectRetain(*(_QWORD *)(a1 + qword_1000EEAF0 + 8));
    v2 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v1);
  }
  else
  {
    v2 = 0;
  }
  return v2;
}

void (*sub_100062C90(id *a1))(uint64_t *a1)
{
  void *v1;

  a1[1] = v1;
  *a1 = sub_100008424();
  return sub_100062CC4;
}

void sub_100062CC4(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  void *v3;

  v2 = *a1;
  v1 = a1[1];
  v3 = *(void **)(v1 + qword_1000EEB10);
  *(_QWORD *)(v1 + qword_1000EEB10) = v2;

}

uint64_t sub_100062CDC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;

  v1 = qword_1000EEB20;
  v2 = *(_QWORD *)(v0 + qword_1000EEB20);
  if (v2)
  {
    v3 = *(_QWORD *)(v0 + qword_1000EEB20);
  }
  else
  {
    v4 = v0;
    v5 = *(void **)(v0 + qword_1000EEAF8);
    v6 = type metadata accessor for AlertStackModalPresentationManager();
    swift_allocObject(v6, *(unsigned int *)(v6 + 48), *(unsigned __int16 *)(v6 + 52));
    v3 = AlertStackModalPresentationManager.init(healthStore:)(v5);
    v7 = *(_QWORD *)(v4 + v1);
    *(_QWORD *)(v4 + v1) = v3;
    swift_retain(v3);
    swift_release(v7);
    v2 = 0;
  }
  swift_retain(v2);
  return v3;
}

void sub_100062D64(uint64_t a1, uint64_t a2, void *a3)
{
  id v3;

  v3 = a3;
  sub_1000654A8();
}

void sub_100062D88(char a1)
{
  void *v1;
  void *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  objc_class *v8;
  uint64_t v9;
  id v10;
  void *v11;
  id v12;
  void *v13;
  id v14;
  objc_super v15;

  v2 = v1;
  v4 = type metadata accessor for Date(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = (objc_class *)type metadata accessor for SummaryFeedViewController(0);
  v15.receiver = v2;
  v15.super_class = v8;
  objc_msgSendSuper2(&v15, "viewDidDisappear:", a1 & 1);
  v9 = sub_1000094FC();
  Date.init()(v9);
  dispatch thunk of PersonalizedFeedTrainer.feedDidEndDisplay(at:)(v7);
  swift_release(v9);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  v10 = objc_msgSend(v2, "collectionView");
  if (v10)
  {
    v11 = v10;
    objc_msgSend(v10, "setAllowsFocus:", 1);

    v12 = objc_msgSend(v2, "collectionView");
    if (v12)
    {
      v13 = v12;
      v14 = objc_msgSend(objc_allocWithZone((Class)UIFocusHaloEffect), "init");
      objc_msgSend(v13, "setFocusEffect:", v14);

      return;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
}

void sub_100062EDC(void *a1, uint64_t a2, char a3)
{
  id v4;

  v4 = a1;
  sub_100062D88(a3);

}

void sub_100062F1C()
{
  _BYTE *v0;
  _BYTE *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint8_t *v10;
  id v11;
  void *v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  id v21;
  void *v22;
  id v23;
  void *v24;
  uint64_t v25;

  v1 = v0;
  v2 = type metadata accessor for Logger(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = __chkstk_darwin(v2);
  v6 = (char *)&v25 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((v1[qword_1000EEAE8] & 1) == 0)
  {
    v1[qword_1000EEAE8] = 1;
    v7 = static Logger.view.getter(v4);
    v8 = Logger.logObject.getter(v7);
    v9 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v8, v9))
    {
      v10 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v10 = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, v9, "Setting visible rect edges of collection view", v10, 2u);
      swift_slowDealloc(v10, -1, -1);
    }

    (*(void (**)(char *, uint64_t))(v3 + 8))(v6, v2);
    v11 = objc_msgSend(v1, "collectionView");
    if (v11)
    {
      v12 = v11;
      objc_msgSend(v11, "_visibleRectEdgeInsets");
      v14 = v13;
      v16 = v15;
      v18 = v17;
      v20 = v19;

      v21 = objc_msgSend(v1, "collectionView");
      if (v21)
      {
        v22 = v21;
        objc_msgSend(v21, "_setVisibleRectEdgeInsets:", *(double *)&v1[qword_1000EEAE0], *(double *)&v1[qword_1000EEAE0 + 8], *(double *)&v1[qword_1000EEAE0 + 16], *(double *)&v1[qword_1000EEAE0 + 24]);

        v23 = objc_msgSend(v1, "collectionView");
        if (v23)
        {
          v24 = v23;
          objc_msgSend(v23, "_setVisibleRectEdgeInsets:", v14, v16, v18, v20);

          return;
        }
LABEL_11:
        __break(1u);
        return;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    goto LABEL_11;
  }
}

void sub_1000630FC(void *a1)
{
  id v1;

  v1 = a1;
  sub_100062F1C();

}

void sub_100063130(void *a1, void *a2)
{
  uint64_t v4;
  void (*v5)(void *, void *);
  id v6;
  id v7;

  v4 = type metadata accessor for CompoundDataSourceCollectionViewController(0);
  v5 = (void (*)(void *, void *))method lookup function for CompoundDataSourceCollectionViewController(v4, &method descriptor for CompoundDataSourceCollectionViewController.observedTraitsDidChange(traitEnvironment:previousTraitCollection:));
  v5(a1, a2);
  v6 = objc_msgSend(a1, "traitCollection");
  v7 = objc_msgSend(v6, "horizontalSizeClass");

  if (v7 != objc_msgSend(a2, "horizontalSizeClass"))
    sub_10000E13C();
}

void sub_1000631DC()
{
  _swift_stdlib_reportUnimplementedInitializer("Health.SummaryFeedViewController", 32, "init(dataSource:)", 17, 0);
  __break(1u);
}

void sub_100063208(uint64_t a1, uint64_t a2, void *a3)
{
  id v3;

  v3 = a3;
  _swift_stdlib_reportUnimplementedInitializer("Health.SummaryFeedViewController", 32, "init(collectionViewLayout:)", 27, 0);
  __break(1u);
}

uint64_t sub_100063238()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + qword_1000EEAF0 + 8));

  _s6Health23OpenSleepScheduleIntentVwxx_0((_QWORD *)(v0 + qword_1000EEB00));
  _s6Health23OpenSleepScheduleIntentVwxx_0((_QWORD *)(v0 + qword_1000EEB08));

  swift_release(*(_QWORD *)(v0 + qword_1000EEB18));
  swift_release(*(_QWORD *)(v0 + qword_1000EEB20));

  swift_release(*(_QWORD *)(v0 + qword_1000EEB30));
  return _s6Health23OpenSleepScheduleIntentVwxx_0((_QWORD *)(v0 + qword_1000EEB38));
}

id sub_1000632E8()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for SummaryFeedViewController(0);
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t sub_10006331C(uint64_t a1)
{
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + qword_1000EEAF0 + 8));

  _s6Health23OpenSleepScheduleIntentVwxx_0((_QWORD *)(a1 + qword_1000EEB00));
  _s6Health23OpenSleepScheduleIntentVwxx_0((_QWORD *)(a1 + qword_1000EEB08));

  swift_release(*(_QWORD *)(a1 + qword_1000EEB18));
  swift_release(*(_QWORD *)(a1 + qword_1000EEB20));

  swift_release(*(_QWORD *)(a1 + qword_1000EEB30));
  return _s6Health23OpenSleepScheduleIntentVwxx_0((_QWORD *)(a1 + qword_1000EEB38));
}

uint64_t sub_1000633D8()
{
  return type metadata accessor for SummaryFeedViewController(0);
}

uint64_t sub_1000633E8()
{
  return sub_1000094FC();
}

uint64_t sub_100063408@<X0>(uint64_t a1@<X8>)
{
  _QWORD *v1;

  return sub_100028F08(*v1 + qword_1000EEB00, a1);
}

uint64_t sub_100063430@<X0>(uint64_t a1@<X8>)
{
  _QWORD *v1;

  return sub_100028F08(*v1 + qword_1000EEB08, a1);
}

uint64_t sub_100063458()
{
  uint64_t v0;
  _QWORD *v1;
  _BYTE v3[24];

  v1 = (_QWORD *)(v0 + qword_1000EEB30);
  swift_beginAccess(v0 + qword_1000EEB30, v3, 0, 0);
  return swift_retain(*v1);
}

void *sub_1000634A0(uint64_t a1)
{
  uint64_t v1;

  swift_beginAccess(v1 + qword_1000EEB30, a1, 33, 0);
  return &j__swift_endAccess;
}

void sub_1000634E4(uint64_t a1)
{
  _QWORD *v1;
  void *v2;

  v2 = *(void **)(*v1 + qword_1000EEB10);
  *(_QWORD *)(*v1 + qword_1000EEB10) = a1;

}

void (*sub_1000634FC(id **a1))(_QWORD *a1)
{
  id *v2;

  v2 = (id *)malloc(0x28uLL);
  *a1 = v2;
  v2[4] = sub_100062C90(v2);
  return sub_100063544;
}

void sub_100063544(_QWORD *a1)
{
  void *v1;

  v1 = (void *)*a1;
  (*(void (**)(_QWORD))(*a1 + 32))(*a1);
  free(v1);
}

void sub_100063570(void *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unsigned __int8 *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  Class isa;
  id v16;
  uint64_t v17;
  uint64_t v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  Class v45;
  id v46;
  id v47;
  uint64_t v48;
  id v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  __int128 v54;
  __int128 v55;
  uint64_t v56;
  void *v57;
  _QWORD v58[3];
  uint64_t v59;
  uint64_t v60;

  v4 = type metadata accessor for CellDeselectionBehavior(0);
  v50 = *(_QWORD *)(v4 - 8);
  v51 = v4;
  __chkstk_darwin(v4);
  v6 = (unsigned __int8 *)&v46 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for Presentation(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)&v46 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for HealthAppInteraction.Action(0);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v14 = (char *)&v46 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v53 = a2;
  isa = IndexPath._bridgeToObjectiveC()().super.isa;
  v16 = objc_msgSend(a1, "cellForItemAtIndexPath:", isa);

  if (!v16)
    return;
  v48 = v7;
  v49 = a1;
  v57 = v16;
  v17 = sub_100006D10(0, &qword_1000EEC58, UICollectionViewCell_ptr);
  v18 = sub_100013100(0, &qword_1000EEC60, (uint64_t)&protocol descriptor for CellSelectionHandling);
  v19 = v16;
  if ((swift_dynamicCast(&v54, &v57, v17, v18, 6) & 1) == 0)
  {
    v56 = 0;
    v54 = 0u;
    v55 = 0u;

    sub_100011508((uint64_t)&v54, (uint64_t)&unk_1000EEC68, (uint64_t)&qword_1000EEC60, (uint64_t)&protocol descriptor for CellSelectionHandling, (uint64_t (*)(_QWORD))sub_100013488);
    return;
  }
  v20 = sub_10001AF7C(&v54, (uint64_t)v58);
  v21 = v52;
  v22 = dispatch thunk of CompoundDataSourceCollectionViewController.dataSource.getter(v20);
  v23 = type metadata accessor for SummaryFeedDataSource(0);
  swift_dynamicCastClassUnconditional(v22, v23, 0, 0, 0);
  SnapshotDataSource.item(at:)(&v54, v53, v23, &protocol witness table for CompoundSectionedDataSource);
  swift_release(v22);
  v24 = sub_100013100(0, (unint64_t *)&qword_1000EEC70, (uint64_t)&protocol descriptor for SectionedDataSourceItem);
  v25 = type metadata accessor for FeedItem(0);
  v26 = swift_dynamicCast(&v57, &v54, v24, v25, 6);
  v47 = v19;
  if ((v26 & 1) != 0)
  {
    v46 = v57;
    v27 = FeedItem.favoriteStatus.getter();
    v28 = FeedItem.FavoriteStatus.rawValue.getter(v27);
    v30 = v29;
    v32 = FeedItem.FavoriteStatus.rawValue.getter(0);
    v33 = v31;
    if (v28 == v32 && v30 == v31)
    {
      swift_bridgeObjectRelease_n(v30, 2);
    }
    else
    {
      v37 = _stringCompareWithSmolCheck(_:_:expecting:)(v28, v30, v32, v31, 0);
      swift_bridgeObjectRelease(v30);
      swift_bridgeObjectRelease(v33);
      if ((v37 & 1) == 0)
      {

        v35 = v50;
        v34 = v51;
        v36 = v52;
        goto LABEL_12;
      }
    }
    type metadata accessor for HealthAppAnalyticsManager(0);
    (*(void (**)(char *, _QWORD, uint64_t))(v12 + 104))(v14, enum case for HealthAppInteraction.Action.selectFavorite(_:), v11);
    v38 = v48;
    (*(void (**)(char *, _QWORD, uint64_t))(v8 + 104))(v10, enum case for Presentation.summaryFeed(_:), v48);
    v56 = 0;
    v54 = 0u;
    v55 = 0u;
    v36 = v52;
    static HealthAppAnalyticsManager.submitInteraction(action:viewController:presentation:pinnedContentManager:)(v14, v52, v10, &v54);

    sub_100011508((uint64_t)&v54, (uint64_t)&unk_1000EEC78, (uint64_t)&unk_1000EEC80, (uint64_t)&protocol descriptor for PinnedContentManaging, (uint64_t (*)(_QWORD))sub_100013488);
    (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v38);
    (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
    v35 = v50;
    v34 = v51;
  }
  else
  {
    v35 = v50;
    v34 = v51;
    v36 = v21;
  }
LABEL_12:
  v39 = v59;
  v40 = v60;
  sub_100012E04(v58, v59);
  v41 = v47;
  dispatch thunk of CellSelectionHandling.didSelectCell(_:in:)(v47, v36, v39, v40);
  v42 = v59;
  v43 = v60;
  sub_100012E04(v58, v59);
  dispatch thunk of CellSelectionHandling.deselectionBehavior(in:)(v36, v42, v43);
  if ((*(unsigned int (**)(unsigned __int8 *, uint64_t))(v35 + 88))(v6, v34) == enum case for CellDeselectionBehavior.deselectOnDidSelect(_:))
  {
    (*(void (**)(unsigned __int8 *, uint64_t))(v35 + 96))(v6, v34);
    v44 = *v6;
    v45 = IndexPath._bridgeToObjectiveC()().super.isa;
    objc_msgSend(v49, "deselectItemAtIndexPath:animated:", v45, v44);

  }
  else
  {

    (*(void (**)(unsigned __int8 *, uint64_t))(v35 + 8))(v6, v34);
  }
  _s6Health23OpenSleepScheduleIntentVwxx_0(v58);
}

uint64_t sub_100063A10(void *a1, uint64_t a2, void *a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  id v11;
  id v12;
  uint64_t v14;

  v7 = type metadata accessor for IndexPath(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)&v14 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  static IndexPath._unconditionallyBridgeFromObjectiveC(_:)(a4);
  v11 = a3;
  v12 = a1;
  sub_100063570(v11, (uint64_t)v10);

  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, v7);
}

void sub_100063AC0()
{
  void *v0;
  void *v1;
  uint64_t ObjectType;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  id v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  uint8_t *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint8_t *v21;
  uint64_t v22;
  uint64_t v23;

  v1 = v0;
  ObjectType = swift_getObjectType(v0);
  v3 = type metadata accessor for Logger(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v20 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = objc_msgSend(v1, "traitCollection");
  v8 = objc_msgSend(v7, "horizontalSizeClass");

  if (v8 == (id)2 && (*((_BYTE *)v1 + qword_1000EEB40) & 1) == 0)
  {
    v10 = static Logger.view.getter(v9);
    v11 = Logger.logObject.getter(v10);
    v12 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v11, v12))
    {
      v13 = (uint8_t *)swift_slowAlloc(12, -1);
      v14 = swift_slowAlloc(32, -1);
      v23 = v14;
      *(_DWORD *)v13 = 136315138;
      v21 = v13 + 4;
      v15 = _typeName(_:qualified:)(ObjectType, 0);
      v17 = v16;
      v22 = sub_100012B20(v15, v16, &v23);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v22, &v23, v21, v13 + 12);
      swift_bridgeObjectRelease(v17);
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "[%s] Checking if we need to show the alerts modal", v13, 0xCu);
      swift_arrayDestroy(v14, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v14, -1, -1);
      swift_slowDealloc(v13, -1, -1);
    }

    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    v18 = sub_100062CDC();
    v19 = swift_allocObject(&unk_1000E0130, 24, 7);
    swift_unknownObjectWeakInit(v19 + 16, v1);
    swift_retain(v19);
    dispatch thunk of AlertStackModalPresentationManager.fetchEligibleAlerts(completion:)(sub_100064E2C, v19);
    swift_release(v18);
    swift_release_n(v19, 2);
  }
}

void sub_100063D00(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  void *Strong;
  void *v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  void *v23;
  uint64_t v24;
  _QWORD aBlock[5];
  uint64_t v26;
  char v27[24];

  v4 = type metadata accessor for DispatchWorkItemFlags(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&aBlock[-1] - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for DispatchQoS(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&aBlock[-1] - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  a2 += 16;
  swift_beginAccess(a2, v27, 0, 0);
  Strong = (void *)swift_unknownObjectWeakLoadStrong(a2);
  if (Strong)
  {
    v13 = Strong;
    if (*(_QWORD *)(a1 + 16) < 2uLL)
    {

    }
    else
    {
      sub_100006D10(0, (unint64_t *)&qword_1000ED910, OS_dispatch_queue_ptr);
      v24 = static OS_dispatch_queue.main.getter();
      v14 = swift_allocObject(&unk_1000E0158, 24, 7);
      *(_QWORD *)(v14 + 16) = v13;
      aBlock[4] = sub_100064E58;
      v26 = v14;
      aBlock[0] = _NSConcreteStackBlock;
      aBlock[1] = 1107296256;
      aBlock[2] = sub_100006988;
      aBlock[3] = &unk_1000E0170;
      v15 = _Block_copy(aBlock);
      v16 = v26;
      v17 = v13;
      v18 = swift_release(v16);
      static DispatchQoS.unspecified.getter(v18);
      aBlock[0] = _swiftEmptyArrayStorage;
      v19 = sub_100013198((unint64_t *)&qword_1000EDBE0, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
      sub_1000076D8(0, (unint64_t *)&qword_1000ED920, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Array);
      v21 = v20;
      v22 = sub_100013C8C();
      dispatch thunk of SetAlgebra.init<A>(_:)(aBlock, v21, v22, v4, v19);
      v23 = (void *)v24;
      OS_dispatch_queue.async(group:qos:flags:execute:)(0, v11, v7, v15);
      _Block_release(v15);

      (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
      (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
    }
  }
}

uint64_t sub_100063F4C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  uint8_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint8_t *v17;
  uint64_t v18;
  uint64_t v19;

  v2 = type metadata accessor for Logger(0);
  v3 = *(_QWORD *)(v2 - 8);
  result = __chkstk_darwin(v2);
  v6 = (char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = qword_1000EEB40;
  if ((*(_BYTE *)(a1 + qword_1000EEB40) & 1) == 0)
  {
    v8 = static Logger.view.getter(result);
    v9 = Logger.logObject.getter(v8);
    v10 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v9, v10))
    {
      v11 = (uint8_t *)swift_slowAlloc(12, -1);
      v12 = swift_slowAlloc(32, -1);
      v19 = v12;
      *(_DWORD *)v11 = 136315138;
      v17 = v11 + 4;
      v18 = sub_100012B20(0xD000000000000019, 0x80000001000B41E0, &v19);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v18, &v19, v17, v11 + 12);
      _os_log_impl((void *)&_mh_execute_header, v9, v10, "[%s] User has at least two new alerts; displaying the expanded modal!",
        v11,
        0xCu);
      swift_arrayDestroy(v12, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v12, -1, -1);
      swift_slowDealloc(v11, -1, -1);
    }

    v13 = (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v6, v2);
    *(_BYTE *)(a1 + v7) = 1;
    v14 = dispatch thunk of CompoundDataSourceCollectionViewController.dataSource.getter(v13);
    v15 = type metadata accessor for SummaryFeedDataSource(0);
    swift_dynamicCastClassUnconditional(v14, v15, 0, 0, 0);
    sub_1000858A0();
    return swift_release(v14);
  }
  return result;
}

uint64_t sub_100064134(void *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  unsigned int (**v9)(char *, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  NSObject *v25;
  os_log_type_t v26;
  uint8_t *v27;
  void (*v28)(char *, uint64_t);
  objc_class *v29;
  id v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void *v35;
  uint64_t v36;
  char *v37;
  char *v38;
  char *v39;
  uint64_t v40;
  void *v41;
  char *v42;
  uint64_t v43;
  NSObject *v44;
  os_log_type_t v45;
  uint8_t *v46;
  void *v47;
  char *v48;
  uint64_t v49;
  id v50;
  uint64_t v51;
  void *v52;
  id v53;
  void *v54;
  void *v55;
  char *v56;
  uint64_t v57;
  NSObject *v58;
  os_log_type_t v59;
  uint8_t *v60;
  id v61;
  void *v62;
  void *v63;
  id v64;
  void *v65;
  char *v66;
  id v67;
  void *v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  char v78;
  char *v79;
  uint64_t v80;
  void *v81;
  uint64_t v82;
  char *v83;
  uint64_t v84;
  NSObject *v85;
  os_log_type_t v86;
  uint8_t *v87;
  uint8_t *v88;
  id v89;
  _QWORD *v90;
  char *v91;
  id v92;
  void *v93;
  id v94;
  void *v95;
  uint64_t v96;
  uint64_t v97;
  char *v98;
  char *v99;
  char *v100;
  uint64_t v101;
  uint64_t v102;
  char *v103;
  char *v104;
  uint64_t v105;
  uint64_t v106;
  char *v107;
  char *v108;
  char *v109;
  __int128 v110;
  __int128 v111;
  _QWORD v112[2];
  _QWORD v113[5];
  objc_super v114;

  v2 = type metadata accessor for Presentation(0);
  v105 = *(_QWORD *)(v2 - 8);
  v106 = v2;
  __chkstk_darwin(v2);
  v99 = (char *)&v96 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v102 = type metadata accessor for HAUserActivity.ViewNavigationKeys(0);
  v101 = *(_QWORD *)(v102 - 8);
  __chkstk_darwin(v102);
  v100 = (char *)&v96 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000076D8(0, (unint64_t *)&qword_1000ECF88, (uint64_t (*)(uint64_t))&type metadata accessor for DeepLinkActivityType, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
  __chkstk_darwin(v5);
  v7 = (char *)&v96 - v6;
  v8 = type metadata accessor for DeepLinkActivityType(0);
  v9 = *(unsigned int (***)(char *, uint64_t, uint64_t))(v8 - 8);
  v10 = __chkstk_darwin(v8);
  v107 = (char *)&v96 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v108 = (char *)&v96 - v12;
  v13 = type metadata accessor for Logger(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = __chkstk_darwin(v13);
  v98 = (char *)&v96 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = __chkstk_darwin(v15);
  v103 = (char *)&v96 - v18;
  v19 = __chkstk_darwin(v17);
  v104 = (char *)&v96 - v20;
  v21 = __chkstk_darwin(v19);
  v23 = (char *)&v96 - v22;
  v24 = static Logger.view.getter(v21);
  v25 = Logger.logObject.getter(v24);
  v26 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v25, v26))
  {
    v27 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v27 = 0;
    _os_log_impl((void *)&_mh_execute_header, v25, v26, "Attempting to restore ForYou View Controller from User Activity.", v27, 2u);
    swift_slowDealloc(v27, -1, -1);
  }

  v28 = *(void (**)(char *, uint64_t))(v14 + 8);
  v28(v23, v13);
  v29 = (objc_class *)type metadata accessor for SummaryFeedViewController(0);
  v114.receiver = v109;
  v114.super_class = v29;
  objc_msgSendSuper2(&v114, "restoreUserActivityState:", a1);
  v30 = objc_msgSend(a1, "activityType");
  v31 = static String._unconditionallyBridgeFromObjectiveC(_:)(v30);
  v33 = v32;

  DeepLinkActivityType.init(_:)(v31, v33);
  if (v9[6](v7, 1, v8) == 1)
    return sub_100011508((uint64_t)v7, (uint64_t)&qword_1000ECF88, (uint64_t)&type metadata accessor for DeepLinkActivityType, (uint64_t)&type metadata accessor for Optional, (uint64_t (*)(_QWORD))sub_1000076D8);
  v35 = a1;
  v36 = v8;
  v97 = v13;
  v38 = v108;
  v37 = v109;
  v9[4](v108, (uint64_t)v7, v36);
  v39 = v107;
  v9[2](v107, (uint64_t)v38, v36);
  v40 = ((uint64_t (*)(char *, uint64_t))v9[11])(v39, v36);
  if ((_DWORD)v40 == enum case for DeepLinkActivityType.allHealthData(_:))
  {
    v107 = (char *)v9;
    v41 = v35;
    v42 = v104;
    v43 = static Logger.view.getter(v40);
    v44 = Logger.logObject.getter(v43);
    v45 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v44, v45))
    {
      v46 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v46 = 0;
      _os_log_impl((void *)&_mh_execute_header, v44, v45, "Restoring to All Data view from User Activity via Discover.", v46, 2u);
      swift_slowDealloc(v46, -1, -1);
    }

    v28(v42, v97);
    v47 = *(void **)&v37[qword_1000EEAF8];
    sub_100028F08((uint64_t)&v37[qword_1000EEB00], (uint64_t)v113);
    v48 = (char *)objc_allocWithZone((Class)type metadata accessor for AllHealthDataViewController(0));
    (*(void (**)(char *, _QWORD, uint64_t))(v105 + 104))(&v48[direct field offset for AllHealthDataViewController.providedPresentation], enum case for Presentation.showAllData(_:), v106);
    *(_QWORD *)&v48[qword_1000EFF38] = v47;
    sub_100028F08((uint64_t)v113, (uint64_t)&v48[qword_1000EFF40]);
    sub_100028F08((uint64_t)v113, (uint64_t)&v110);
    v49 = type metadata accessor for AllHealthDataDataSource(0);
    swift_allocObject(v49, *(unsigned int *)(v49 + 48), *(unsigned __int16 *)(v49 + 52));
    v50 = v47;
    v51 = AllHealthDataDataSource.init(healthStore:healthExperienceStore:)(v50, &v110);
    v52 = (void *)CompoundDataSourceCollectionViewController.init(dataSource:)(v51);

    _s6Health23OpenSleepScheduleIntentVwxx_0(v113);
    v53 = objc_msgSend(v37, "navigationController");
    if (v53)
    {
      v54 = v53;
      objc_msgSend(v53, "pushViewController:animated:", v52, 0);

    }
    objc_msgSend(v52, "restoreUserActivityState:", v41);

    return (*((uint64_t (**)(char *, uint64_t))v107 + 1))(v38, v36);
  }
  if ((_DWORD)v40 != enum case for DeepLinkActivityType.notificationSettings(_:))
  {
    v66 = (char *)v9[1];
    ((void (*)(char *, uint64_t))v66)(v39, v36);
    v67 = objc_msgSend(v35, "userInfo");
    if (v67)
    {
      v68 = v67;
      v107 = v66;
      v69 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v67, &type metadata for AnyHashable, (char *)&type metadata for Any + 8, &protocol witness table for AnyHashable);

      v70 = v101;
      v71 = v100;
      v72 = v102;
      v73 = (*(uint64_t (**)(char *, _QWORD, uint64_t))(v101 + 104))(v100, enum case for HAUserActivity.ViewNavigationKeys.allTrends(_:), v102);
      v74 = HAUserActivity.ViewNavigationKeys.rawValue.getter(v73);
      v76 = v75;
      (*(void (**)(char *, uint64_t))(v70 + 8))(v71, v72);
      v112[0] = v74;
      v112[1] = v76;
      AnyHashable.init<A>(_:)(v113, v112, &type metadata for String, &protocol witness table for String);
      if (*(_QWORD *)(v69 + 16) && (v77 = sub_10007DF14((uint64_t)v113), (v78 & 1) != 0))
      {
        sub_100012C10(*(_QWORD *)(v69 + 56) + 32 * v77, (uint64_t)&v110);
      }
      else
      {
        v110 = 0u;
        v111 = 0u;
      }
      v79 = v37;
      v80 = v97;
      v66 = v107;
      sub_100025CE0((uint64_t)v113);
      swift_bridgeObjectRelease(v69);
      if (*((_QWORD *)&v111 + 1))
      {
        v81 = v35;
        v82 = sub_100011508((uint64_t)&v110, (uint64_t)&qword_1000EDBD0, (uint64_t)&type metadata for Any + 8, (uint64_t)&type metadata accessor for Optional, (uint64_t (*)(_QWORD))sub_1000138C8);
        v83 = v98;
        v84 = static Logger.view.getter(v82);
        v85 = Logger.logObject.getter(v84);
        v86 = static os_log_type_t.debug.getter();
        if (os_log_type_enabled(v85, v86))
        {
          v87 = (uint8_t *)swift_slowAlloc(2, -1);
          *(_WORD *)v87 = 0;
          _os_log_impl((void *)&_mh_execute_header, v85, v86, "Restoring to All Trends View Controller from User Activity via Discover.", v87, 2u);
          v88 = v87;
          v80 = v97;
          swift_slowDealloc(v88, -1, -1);
        }

        v28(v83, v80);
        v89 = *(id *)&v79[qword_1000EEAF8];
        v90 = UIViewController.resolvedHealthExperienceStore.getter(v113);
        v91 = v99;
        UIViewController.resolvedPresentation.getter(v90);
        v92 = objc_allocWithZone((Class)type metadata accessor for AllTrendsViewController(0));
        v93 = (void *)AllTrendsViewController.init(healthStore:healthExperienceStore:additionalPredicates:presentation:customProvenance:)(v89, v113, _swiftEmptyArrayStorage, v91, 0x7463412072657355, 0xED00007974697669);
        v94 = objc_msgSend(v79, "navigationController");
        if (v94)
        {
          v95 = v94;
          objc_msgSend(v94, "pushViewController:animated:", v93, 0);

        }
        objc_msgSend(v93, "restoreUserActivityState:", v81);

        return ((uint64_t (*)(char *, uint64_t))v66)(v108, v36);
      }
    }
    else
    {
      v110 = 0u;
      v111 = 0u;
    }
    sub_100011508((uint64_t)&v110, (uint64_t)&qword_1000EDBD0, (uint64_t)&type metadata for Any + 8, (uint64_t)&type metadata accessor for Optional, (uint64_t (*)(_QWORD))sub_1000138C8);
    return ((uint64_t (*)(char *, uint64_t))v66)(v108, v36);
  }
  v55 = v35;
  v56 = v103;
  v57 = static Logger.view.getter(v40);
  v58 = Logger.logObject.getter(v57);
  v59 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v58, v59))
  {
    v60 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v60 = 0;
    _os_log_impl((void *)&_mh_execute_header, v58, v59, "Restoring to notification settings view from User Activity via Discover.", v60, 2u);
    swift_slowDealloc(v60, -1, -1);
  }

  v28(v56, v97);
  UIViewController.resolvedHealthExperienceStore.getter(v113);
  v61 = objc_allocWithZone((Class)type metadata accessor for NotificationSettingsViewController(0));
  v62 = (void *)NotificationSettingsViewController.init(healthExperienceStore:)(v113);
  type metadata accessor for ProfileViewController(0);
  v63 = (void *)static ProfileViewController.makeProfileNavigationController(healthStore:pinnedContentManager:configurator:)(*(_QWORD *)&v37[qword_1000EEAF8], &v37[qword_1000EEB08], ConfigurationIntentResponseCode.rawValue.getter, 0);
  objc_msgSend(v63, "pushViewController:animated:", v62, 0);
  v64 = objc_msgSend(v37, "navigationController");
  if (v64)
  {
    v65 = v64;
    objc_msgSend(v64, "presentViewController:animated:completion:", v63, 0, 0);

  }
  objc_msgSend(v62, "restoreUserActivityState:", v55);

  return ((uint64_t (*)(char *, uint64_t))v9[1])(v38, v36);
}

void sub_100064B1C(void *a1, uint64_t a2, void *a3)
{
  id v4;
  id v5;

  v4 = a3;
  v5 = a1;
  sub_100064134(v4);

}

void sub_100064B70(char *a1)
{
  void *v2;
  id v3;
  char *v4;
  id v5;
  void *v6;
  id v7;

  v2 = *(void **)&a1[qword_1000EEAF8];
  v3 = objc_allocWithZone((Class)type metadata accessor for InternalSettingsViewController(0));
  v4 = a1;
  v5 = v2;
  v6 = (void *)sub_1000236E4(v5);

  v7 = objc_msgSend(objc_allocWithZone((Class)HKNavigationController), "initWithRootViewController:", v6);
  objc_msgSend(v4, "presentViewController:animated:completion:", v7, 1, 0);

}

uint64_t sub_100064C1C(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int isUniquelyReferenced_nonNull_bridgeObject;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  BOOL v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  if ((unint64_t)a1 >> 62)
  {
    if (a1 < 0)
      v22 = a1;
    else
      v22 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v3 = _CocoaArrayWrapper.endIndex.getter(v22);
    swift_bridgeObjectRelease(a1);
  }
  else
  {
    v3 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  v4 = *v1;
  if (!((unint64_t)*v1 >> 62))
  {
    v5 = *(_QWORD *)((v4 & 0xFFFFFFFFFFFFF8) + 0x10);
    v6 = v5 + v3;
    if (!__OFADD__(v5, v3))
      goto LABEL_5;
LABEL_30:
    __break(1u);
    goto LABEL_31;
  }
  if (v4 < 0)
    v23 = *v1;
  else
    v23 = v4 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(*v1);
  v24 = _CocoaArrayWrapper.endIndex.getter(v23);
  swift_bridgeObjectRelease(v4);
  v6 = v24 + v3;
  if (__OFADD__(v24, v3))
    goto LABEL_30;
LABEL_5:
  v7 = *v1;
  isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject(*v1);
  *v1 = v7;
  v9 = 0;
  if (isUniquelyReferenced_nonNull_bridgeObject && (v7 & 0x8000000000000000) == 0 && (v7 & 0x4000000000000000) == 0)
  {
    v10 = v7 & 0xFFFFFFFFFFFFFF8;
    if (v6 <= *(_QWORD *)((v7 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
      goto LABEL_15;
    v9 = 1;
  }
  if ((unint64_t)v7 >> 62)
  {
    if (v7 < 0)
      v25 = v7;
    else
      v25 = v7 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v7);
    v11 = _CocoaArrayWrapper.endIndex.getter(v25);
    swift_bridgeObjectRelease(v7);
  }
  else
  {
    v11 = *(_QWORD *)((v7 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  if (v11 <= v6)
    v11 = v6;
  swift_bridgeObjectRetain(v7);
  v12 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v9, v11, 1, v7);
  swift_bridgeObjectRelease(*v1);
  *v1 = v12;
  v10 = v12 & 0xFFFFFFFFFFFFFF8;
LABEL_15:
  v13 = *(_QWORD *)(v10 + 16);
  v14 = (*(_QWORD *)(v10 + 24) >> 1) - v13;
  result = sub_10007B18C(v10 + 8 * v13 + 32, v14, a1);
  if (v16 < v3)
  {
LABEL_31:
    __break(1u);
    goto LABEL_32;
  }
  v17 = v16;
  if (v16 < 1)
    goto LABEL_19;
  v18 = *(_QWORD *)((*v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  v19 = __OFADD__(v18, v16);
  v20 = v18 + v16;
  if (!v19)
  {
    *(_QWORD *)((*v1 & 0xFFFFFFFFFFFFFF8) + 0x10) = v20;
LABEL_19:
    swift_bridgeObjectRelease(result);
    if (v17 != v14)
      return specialized Array._endMutation()(v21);
LABEL_32:
    sub_100013C38(0, &qword_1000EECF8, (unint64_t *)&unk_1000EED00, HKSample_ptr);
    return specialized Array._endMutation()(v21);
  }
  __break(1u);
  return result;
}

uint64_t sub_100064E08()
{
  uint64_t v0;

  swift_unknownObjectWeakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

void sub_100064E2C(uint64_t a1)
{
  uint64_t v1;

  sub_100063D00(a1, v1);
}

uint64_t sub_100064E34()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100064E58()
{
  uint64_t v0;

  return sub_100063F4C(*(_QWORD *)(v0 + 16));
}

uint64_t *sub_100064E60(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD v15[3];
  _QWORD v16[3];
  _QWORD v17[5];

  v4 = *a2;
  v17[3] = type metadata accessor for SummaryPinnedContentDataSource(0);
  v17[4] = &protocol witness table for SummaryPinnedContentDataSource;
  v17[0] = a1;
  v16[0] = _swiftEmptyArrayStorage;
  sub_100013DDC(0);
  swift_allocObject(v5, *(unsigned int *)(v5 + 48), *(unsigned __int16 *)(v5 + 52));
  a2[2] = CurrentValueSubject.init(_:)(v16);
  a2[8] = (uint64_t)&_swiftEmptySetSingleton;
  sub_100028F08((uint64_t)v17, (uint64_t)(a2 + 3));
  v6 = (uint64_t *)(a1 + direct field offset for SummaryPinnedContentDataSource.pinnedFeedItemsPublisher);
  swift_beginAccess(a1 + direct field offset for SummaryPinnedContentDataSource.pinnedFeedItemsPublisher, v16, 0, 0);
  v7 = *v6;
  v15[0] = v7;
  v8 = swift_allocObject(&unk_1000E01A8, 24, 7);
  swift_weakInit(v8 + 16, a2);
  v9 = swift_allocObject(&unk_1000E01D0, 32, 7);
  *(_QWORD *)(v9 + 16) = v8;
  *(_QWORD *)(v9 + 24) = v4;
  sub_1000154BC(0);
  v11 = v10;
  v12 = sub_100013198((unint64_t *)&qword_1000EECD0, (uint64_t (*)(uint64_t))sub_1000154BC, (uint64_t)&protocol conformance descriptor for CurrentValueSubject<A, B>);
  swift_retain(v7);
  v13 = Publisher<>.sink(receiveValue:)(sub_10002CC0C, v9, v11, v12);
  swift_release(v9);
  swift_release(v15[0]);
  swift_beginAccess(a2 + 8, v15, 33, 0);
  AnyCancellable.store(in:)(a2 + 8);
  swift_endAccess(v15);
  swift_release(v13);
  _s6Health23OpenSleepScheduleIntentVwxx_0(v17);
  return a2;
}

uint64_t sub_100065008()
{
  uint64_t v0;

  swift_weakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10006502C()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 32, 7);
}

id sub_100065050(_QWORD *a1, void *a2, _QWORD *a3)
{
  _BYTE *v3;
  char *v7;
  _QWORD *v8;
  _BYTE *v9;
  uint64_t v10;
  _QWORD *v11;
  id v12;
  void *v13;
  id v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  id v18;
  id v19;
  void *v20;
  id v21;
  id v22;
  Swift::String v23;
  Swift::String v24;
  void *object;
  NSString v26;
  id v27;
  id v28;
  Swift::String v29;
  Swift::String v30;
  void *v31;
  NSString v32;
  id v33;
  id v34;
  NSString v35;
  id v36;
  __int128 v38[2];
  objc_super v39;
  __int128 v40;
  uint64_t v41;
  void *v42;
  Swift::String v43;
  Swift::String v44;

  v7 = &v3[qword_1000EEAE0];
  *(_QWORD *)v7 = 0;
  *((_QWORD *)v7 + 1) = 0;
  *((_OWORD *)v7 + 1) = xmmword_1000B41B0;
  v3[qword_1000EEAE8] = 0;
  v8 = &v3[qword_1000EEAF0];
  type metadata accessor for SidebarDataSourceItem(0);
  v9 = v3;
  *v8 = static SidebarDataSourceItem.summarySidebarItemIdentifier.getter();
  v8[1] = v10;
  *(_QWORD *)&v9[qword_1000EEB10] = 0;
  *(_QWORD *)&v9[qword_1000EEB18] = 0;
  *(_QWORD *)&v9[qword_1000EEB20] = 0;
  v11 = &v9[qword_1000EEB28];
  v12 = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for ProfileGradientWithFadeView(0)), "initWithFrame:", 0.0, 0.0, 0.0, 0.0);
  v13 = (void *)ProfileGradientWithFadeView.gradientView.getter();
  dispatch thunk of ProfileGradientView.delayAnimation.setter(1);

  *v11 = v12;
  v11[1] = &protocol witness table for ProfileGradientWithFadeView;
  *(_QWORD *)&v9[qword_1000EEB30] = 0;
  v9[qword_1000EEB40] = 0;
  sub_100028F08((uint64_t)a1, (uint64_t)&v9[qword_1000EEB00]);
  *(_QWORD *)&v9[qword_1000EEAF8] = a2;
  sub_100028F08((uint64_t)a3, (uint64_t)&v9[qword_1000EEB08]);
  v41 = type metadata accessor for EmptyGradientColorProvider(0);
  v42 = &protocol witness table for EmptyGradientColorProvider;
  sub_100007E0C(&v40);
  v14 = a2;
  EmptyGradientColorProvider.init()();
  sub_10001AF7C(&v40, (uint64_t)&v9[qword_1000EEB38]);

  v39.receiver = v9;
  v39.super_class = (Class)type metadata accessor for SummaryFeedViewController(0);
  v15 = objc_msgSendSuper2(&v39, "initWithCollectionViewLayout:", 0);
  sub_100028F08((uint64_t)a1, (uint64_t)&v40);
  sub_100028F08((uint64_t)a3, (uint64_t)v38);
  v16 = type metadata accessor for SummaryFeedDataSourceProvider();
  v17 = swift_allocObject(v16, 104, 7);
  sub_10001AF7C(&v40, v17 + 16);
  *(_QWORD *)(v17 + 56) = v14;
  sub_10001AF7C(v38, v17 + 64);
  v41 = v16;
  v42 = (void *)sub_100013198(&qword_1000EECF0, (uint64_t (*)(uint64_t))type metadata accessor for SummaryFeedDataSourceProvider, (uint64_t)&unk_1000B4458);
  *(_QWORD *)&v40 = v17;
  v18 = v14;
  v19 = v15;
  dispatch thunk of CompoundDataSourceCollectionViewController.dataSourceProvider.setter(&v40);
  v20 = (void *)objc_opt_self(NSBundle);
  v21 = v19;
  v22 = objc_msgSend(v20, "mainBundle");
  v43._object = (void *)0x80000001000BBFF0;
  v23._countAndFlagsBits = 0x7972616D6D7553;
  v23._object = (void *)0xE700000000000000;
  v24._countAndFlagsBits = 0;
  v24._object = (void *)0xE000000000000000;
  v43._countAndFlagsBits = 0xD000000000000011;
  object = NSLocalizedString(_:tableName:bundle:value:comment:)(v23, (Swift::String_optional)0, (NSBundle)v22, v24, v43)._object;

  v26 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(object);
  objc_msgSend(v21, "setTitle:", v26);

  v27 = v21;
  v28 = objc_msgSend(v20, "mainBundle");
  v44._object = (void *)0x80000001000BBFF0;
  v29._countAndFlagsBits = 0x7972616D6D7553;
  v29._object = (void *)0xE700000000000000;
  v30._countAndFlagsBits = 0;
  v30._object = (void *)0xE000000000000000;
  v44._countAndFlagsBits = 0xD000000000000011;
  v31 = NSLocalizedString(_:tableName:bundle:value:comment:)(v29, (Swift::String_optional)0, (NSBundle)v28, v30, v44)._object;

  v32 = String._bridgeToObjectiveC()();
  v33 = objc_msgSend((id)objc_opt_self(UIImage), "systemImageNamed:", v32);

  v34 = objc_allocWithZone((Class)UITabBarItem);
  v35 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v31);
  v36 = objc_msgSend(v34, "initWithTitle:image:selectedImage:", v35, v33, 0);

  objc_msgSend(v27, "setTabBarItem:", v36);
  _s6Health23OpenSleepScheduleIntentVwxx_0(a3);
  _s6Health23OpenSleepScheduleIntentVwxx_0(a1);
  return v27;
}

void sub_1000654A8()
{
  _BYTE *v0;
  _BYTE *v1;
  char *v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  id v6;
  void *v7;

  v1 = v0;
  v2 = &v0[qword_1000EEAE0];
  *(_QWORD *)v2 = 0;
  *((_QWORD *)v2 + 1) = 0;
  *((_OWORD *)v2 + 1) = xmmword_1000B41B0;
  v0[qword_1000EEAE8] = 0;
  v3 = &v0[qword_1000EEAF0];
  type metadata accessor for SidebarDataSourceItem(0);
  *v3 = static SidebarDataSourceItem.summarySidebarItemIdentifier.getter();
  v3[1] = v4;
  *(_QWORD *)&v0[qword_1000EEB10] = 0;
  *(_QWORD *)&v0[qword_1000EEB18] = 0;
  *(_QWORD *)&v0[qword_1000EEB20] = 0;
  v5 = &v0[qword_1000EEB28];
  v6 = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for ProfileGradientWithFadeView(0)), "initWithFrame:", 0.0, 0.0, 0.0, 0.0);
  v7 = (void *)ProfileGradientWithFadeView.gradientView.getter();
  dispatch thunk of ProfileGradientView.delayAnimation.setter(1);

  *v5 = v6;
  v5[1] = &protocol witness table for ProfileGradientWithFadeView;
  *(_QWORD *)&v1[qword_1000EEB30] = 0;
  v1[qword_1000EEB40] = 0;

  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000025, 0x80000001000B8850, "Health/SummaryFeedViewController.swift", 38, 2, 111, 0);
  __break(1u);
}

uint64_t type metadata accessor for MedicalIDEmergencyBuddyDataSource(uint64_t a1)
{
  uint64_t result;

  result = qword_1000EED10;
  if (!qword_1000EED10)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for MedicalIDEmergencyBuddyDataSource);
  return result;
}

uint64_t sub_10006562C(uint64_t a1)
{
  _BYTE v2[8];

  return swift_initClassMetadata2(a1, 0, 0, v2, a1 + qword_1000F1090);
}

uint64_t sub_100065668()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  int64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void (*v30)(char *, uint64_t);
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  void *v36;
  Swift::String v37;
  Swift::String v38;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  void (*v45)(char *, unint64_t, uint64_t);
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;

  v49 = *v0;
  v44 = type metadata accessor for UUID(0);
  v42 = *(_QWORD *)(v44 - 8);
  __chkstk_darwin(v44);
  v43 = (char *)&v40 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v2 = type metadata accessor for EmergencyAccessBuddyFlow(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v40 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v48 = type metadata accessor for ContentConfigurationItem(0);
  v6 = *(_QWORD *)(v48 - 8);
  v7 = __chkstk_darwin(v48);
  v9 = (char *)&v40 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = static EmergencyAccessBuddyFlow.allCases.getter(v7);
  v11 = v10;
  v12 = *(_QWORD *)(v10 + 16);
  if (v12)
  {
    v50 = (uint64_t)_swiftEmptyArrayStorage;
    sub_10007FE98(0, v12, 0);
    v13 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
    v41 = v11;
    v14 = v11 + v13;
    v15 = *(_QWORD *)(v3 + 72);
    v45 = *(void (**)(char *, unint64_t, uint64_t))(v3 + 16);
    v46 = v15;
    v47 = v3;
    do
    {
      v45(v5, v14, v2);
      sub_100065A14((uint64_t)v5, v49, (uint64_t)v9);
      (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
      v16 = (_QWORD *)v50;
      if ((swift_isUniquelyReferenced_nonNull_native(v50) & 1) == 0)
      {
        sub_10007FE98(0, v16[2] + 1, 1);
        v16 = (_QWORD *)v50;
      }
      v18 = v16[2];
      v17 = v16[3];
      if (v18 >= v17 >> 1)
      {
        sub_10007FE98(v17 > 1, v18 + 1, 1);
        v16 = (_QWORD *)v50;
      }
      v16[2] = v18 + 1;
      (*(void (**)(unint64_t, char *, uint64_t))(v6 + 32))((unint64_t)v16+ ((*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80))+ *(_QWORD *)(v6 + 72) * v18, v9, v48);
      v50 = (uint64_t)v16;
      v3 = v47;
      v14 += v46;
      --v12;
    }
    while (v12);
    swift_bridgeObjectRelease(v41);
  }
  else
  {
    swift_bridgeObjectRelease(v10);
    v16 = _swiftEmptyArrayStorage;
  }
  sub_1000076D8(0, &qword_1000ECA68, (uint64_t (*)(uint64_t))&type metadata accessor for ArrayDataSourceSection, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for _ContiguousArrayStorage);
  v20 = v19;
  v21 = type metadata accessor for ArrayDataSourceSection(0);
  v22 = swift_allocObject(v20, ((*(unsigned __int8 *)(*(_QWORD *)(v21 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v21 - 8) + 80))+ *(_QWORD *)(*(_QWORD *)(v21 - 8) + 72), *(unsigned __int8 *)(*(_QWORD *)(v21 - 8) + 80) | 7);
  *(_OWORD *)(v22 + 16) = xmmword_1000B11F0;
  v23 = sub_1000A6048((uint64_t)v16);
  swift_bridgeObjectRelease(v16);
  v24 = v43;
  v26 = UUID.init()(v25);
  v27 = UUID.uuidString.getter(v26);
  v29 = v28;
  v30 = *(void (**)(char *, uint64_t))(v42 + 8);
  v31 = v44;
  v30(v24, v44);
  v32 = ArrayDataSourceSection.init(title:arrangedItems:identifier:)(0x496C61636964654DLL, 0xE900000000000044, v23, v27, v29);
  v50 = 0x3C53447961727241;
  v51 = 0xE800000000000000;
  v33 = UUID.init()(v32);
  v34 = UUID.uuidString.getter(v33);
  v36 = v35;
  v30(v24, v31);
  v37._countAndFlagsBits = v34;
  v37._object = v36;
  String.append(_:)(v37);
  swift_bridgeObjectRelease(v36);
  v38._countAndFlagsBits = 62;
  v38._object = (void *)0xE100000000000000;
  String.append(_:)(v38);
  return ArrayDataSource.init(arrangedSections:identifier:)(v22, v50, v51);
}

uint64_t sub_100065A14@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  void (*v18)(char *, uint64_t, uint64_t);
  int v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  id v31;
  void (*v32)(_BYTE *, _QWORD);
  uint64_t v33;
  _BYTE *v34;
  uint64_t v35;
  char *v36;
  char *v37;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _BYTE *v47;
  char *v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  _BYTE v53[32];
  _QWORD v54[6];

  v43 = a2;
  v52 = a3;
  v51 = type metadata accessor for SectionedDataSourceContainerViewType(0);
  v49 = *(_QWORD *)(v51 - 8);
  __chkstk_darwin(v51);
  v50 = (char *)&v39 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000076D8(0, &qword_1000ECA60, (uint64_t (*)(uint64_t))&type metadata accessor for UIBackgroundConfiguration, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
  __chkstk_darwin(v5);
  v48 = (char *)&v39 - v6;
  v7 = type metadata accessor for CellDeselectionBehavior(0);
  v45 = *(_QWORD *)(v7 - 8);
  v46 = v7;
  __chkstk_darwin(v7);
  v47 = (char *)&v39 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v41 = type metadata accessor for UUID(0);
  v40 = *(_QWORD *)(v41 - 8);
  __chkstk_darwin(v41);
  v10 = (char *)&v39 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for EmergencyAccessBuddyFlow(0);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = *(_QWORD *)(v12 + 64);
  v14 = __chkstk_darwin(v11);
  v15 = (char *)&v39 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  v17 = (char *)&v39 - v16;
  v18 = *(void (**)(char *, uint64_t, uint64_t))(v12 + 16);
  v42 = a1;
  v18((char *)&v39 - v16, a1, v11);
  v19 = (*(uint64_t (**)(char *, uint64_t))(v12 + 88))(v17, v11);
  if (v19 == enum case for EmergencyAccessBuddyFlow.followUpOnboarding(_:))
  {
    v44 = 0xD000000000000013;
    v20 = 0x80000001000BC0B0;
LABEL_10:
    (*(void (**)(char *, uint64_t))(v12 + 8))(v17, v11);
    goto LABEL_11;
  }
  if (v19 == enum case for EmergencyAccessBuddyFlow.followUpReview(_:))
  {
    v20 = 0xEF77656976655220;
    v44 = 0x7055776F6C6C6F46;
    goto LABEL_10;
  }
  if (v19 == enum case for EmergencyAccessBuddyFlow.healthOnboarding(_:))
  {
    v44 = 0xD000000000000011;
    v20 = 0x80000001000B7DA0;
  }
  else
  {
    if (v19 != enum case for EmergencyAccessBuddyFlow.healthReview(_:))
    {
      v44 = 0;
      v20 = 0xE000000000000000;
      goto LABEL_10;
    }
    v20 = 0xED00007765697665;
    v44 = 0x522068746C616548;
  }
LABEL_11:
  v18(v15, v42, v11);
  v21 = *(unsigned __int8 *)(v12 + 80);
  v22 = (v21 + 16) & ~v21;
  v23 = (v13 + v22 + 7) & 0xFFFFFFFFFFFFFFF8;
  v24 = swift_allocObject(&unk_1000E0330, v23 + 8, v21 | 7);
  v25 = (*(uint64_t (**)(uint64_t, char *, uint64_t))(v12 + 32))(v24 + v22, v15, v11);
  *(_QWORD *)(v24 + v23) = v43;
  v26 = UUID.init()(v25);
  v27 = UUID.uuidString.getter(v26);
  v29 = v28;
  (*(void (**)(char *, uint64_t))(v40 + 8))(v10, v41);
  v54[3] = type metadata accessor for UIListContentConfiguration(0);
  v54[4] = &protocol witness table for UIListContentConfiguration;
  v30 = sub_100007E0C(v54);
  static UIListContentConfiguration.cell()(v30);
  swift_bridgeObjectRetain(v20);
  UIListContentConfiguration.text.setter(v44, v20);
  v31 = objc_msgSend((id)objc_opt_self(UIColor), "tintColor");
  v32 = (void (*)(_BYTE *, _QWORD))UIListContentConfiguration.textProperties.modify(v53);
  UIListContentConfiguration.TextProperties.color.setter(v31);
  v32(v53, 0);
  v33 = v46;
  v34 = v47;
  *v47 = 1;
  (*(void (**)(_BYTE *, _QWORD, uint64_t))(v45 + 104))(v34, enum case for CellDeselectionBehavior.deselectOnDidSelect(_:), v33);
  swift_retain(v24);
  swift_bridgeObjectRelease(v20);
  v35 = type metadata accessor for UIBackgroundConfiguration(0);
  v36 = v48;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v35 - 8) + 56))(v48, 1, 1, v35);
  v37 = v50;
  (*(void (**)(char *, _QWORD, uint64_t))(v49 + 104))(v50, enum case for SectionedDataSourceContainerViewType.collectionView(_:), v51);
  ContentConfigurationItem.init(uniqueIdentifier:contentConfiguration:cellAccessories:cellSelectionHandler:deselectionBehavior:backgroundConfiguration:updateContentConfigurationHandler:container:automationIdentifier:)(v27, v29, v54, _swiftEmptyArrayStorage, sub_100066614, v24, v34, v36, 0, 0, v37, 0, 0);
  return swift_release(v24);
}

void sub_100065EC4(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  char *v27;
  id v28;
  void (*v29)(char *, uint64_t, uint64_t);
  uint64_t v30;
  id v32;
  id v33;
  char v34;
  id v35;
  uint64_t v36;
  char *v37;
  char *v38;
  uint64_t v39;
  NSObject *v40;
  os_log_type_t v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t MetatypeMetadata;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  __n128 v49;
  char *v50;
  char *v51;
  uint64_t v52;
  unint64_t v53;
  unint64_t v54;
  __n128 v55;
  void (*v56)(char *, uint64_t, __n128);
  id v57;
  id v58;
  char v59;
  id v60;
  void *v61;
  id v62;
  char *v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  id v69;
  id v70;
  id v71;
  uint64_t v72;
  uint64_t v73;

  v65 = a3;
  v5 = type metadata accessor for Logger(0);
  v66 = *(_QWORD *)(v5 - 8);
  v67 = v5;
  __chkstk_darwin(v5);
  v68 = (char *)&v63 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for EmergencyAccessUserStatus(0);
  v8 = __chkstk_darwin(v7);
  v10 = (char *)&v63 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v12 = (char *)&v63 - v11;
  v13 = type metadata accessor for EmergencyAccessBuddyFlow(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = __chkstk_darwin(v13);
  v64 = (char *)&v63 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = __chkstk_darwin(v15);
  v19 = (char *)&v63 - v18;
  v20 = __chkstk_darwin(v17);
  v22 = (char *)&v63 - v21;
  v23 = __chkstk_darwin(v20);
  v25 = (char *)&v63 - v24;
  __chkstk_darwin(v23);
  v27 = (char *)&v63 - v26;
  v69 = a1;
  v28 = objc_msgSend(a1, "resolvedHealthStore");
  if (!v28)
    v28 = objc_msgSend(objc_allocWithZone((Class)HKHealthStore), "init");
  v70 = v28;
  v29 = *(void (**)(char *, uint64_t, uint64_t))(v14 + 16);
  v29(v27, a2, v13);
  v30 = (*(uint64_t (**)(char *, uint64_t))(v14 + 88))(v27, v13);
  if ((_DWORD)v30 == enum case for EmergencyAccessBuddyFlow.followUpOnboarding(_:)
    || (_DWORD)v30 == enum case for EmergencyAccessBuddyFlow.followUpReview(_:))
  {
    (*(void (**)(char *, uint64_t))(v14 + 96))(v27, v13);
    swift_unknownObjectRelease(*(_QWORD *)v27);
    v29(v22, a2, v13);
    v32 = v70;
    v33 = v70;
    v34 = EmergencyAccessBuddyFlow.isReview.getter();
    EmergencyAccessUserStatus.init(onboardingStatus:isStewieSupported:)(v34 & 1, 0, 1);
    v35 = objc_allocWithZone((Class)type metadata accessor for EmergencyAccessFollowUpStartViewController(0));
    v36 = EmergencyAccessFollowUpStartViewController.init(healthStore:flow:emergencyStatus:)(v33, v22, v10);
LABEL_14:
    v61 = (void *)v36;
    v62 = objc_msgSend(objc_allocWithZone((Class)HKNavigationController), "initWithRootViewController:", v36);
    objc_msgSend(v69, "presentViewController:animated:completion:", v62, 1, 0);

    return;
  }
  if ((_DWORD)v30 == enum case for EmergencyAccessBuddyFlow.healthOnboarding(_:)
    || (_DWORD)v30 == enum case for EmergencyAccessBuddyFlow.healthReview(_:))
  {
    v29(v25, a2, v13);
    v32 = v70;
    v58 = v70;
    v59 = EmergencyAccessBuddyFlow.isReview.getter();
    EmergencyAccessUserStatus.init(onboardingStatus:isStewieSupported:)(v59 & 1, 0, 1);
    v60 = objc_allocWithZone((Class)type metadata accessor for EmergencyAccessBuddyStartViewController(0));
    v36 = EmergencyAccessBuddyStartViewController.init(healthStore:flow:emergencyStatus:)(v58, v25, v12);
    goto LABEL_14;
  }
  v37 = v68;
  static Logger.general.getter(v30);
  v38 = v19;
  v39 = ((uint64_t (*)(char *, uint64_t, uint64_t))v29)(v19, a2, v13);
  v40 = Logger.logObject.getter(v39);
  v41 = static os_log_type_t.error.getter();
  v42 = v41;
  if (os_log_type_enabled(v40, v41))
  {
    v43 = swift_slowAlloc(22, -1);
    v63 = v38;
    v44 = v43;
    v69 = (id)swift_slowAlloc(64, -1);
    v71 = v69;
    *(_DWORD *)v44 = 136315394;
    v72 = v65;
    MetatypeMetadata = swift_getMetatypeMetadata(v65);
    LODWORD(v65) = v42;
    v46 = String.init<A>(describing:)(&v72, MetatypeMetadata);
    v48 = v47;
    v72 = sub_100012B20(v46, v47, (uint64_t *)&v71);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v72, &v73, v44 + 4, v44 + 12);
    v49 = swift_bridgeObjectRelease(v48);
    *(_WORD *)(v44 + 12) = 2080;
    v50 = v63;
    v51 = v64;
    ((void (*)(char *, char *, uint64_t, __n128))v29)(v64, v63, v13, v49);
    v52 = String.init<A>(describing:)(v51, v13);
    v54 = v53;
    v72 = sub_100012B20(v52, v53, (uint64_t *)&v71);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v72, &v73, v44 + 14, v44 + 22);
    v55 = swift_bridgeObjectRelease(v54);
    v56 = *(void (**)(char *, uint64_t, __n128))(v14 + 8);
    v56(v50, v13, v55);
    _os_log_impl((void *)&_mh_execute_header, v40, (os_log_type_t)v65, "[%s] Flow is not supported: %s", (uint8_t *)v44, 0x16u);
    v57 = v69;
    swift_arrayDestroy(v69, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v57, -1, -1);
    swift_slowDealloc(v44, -1, -1);

    (*(void (**)(char *, uint64_t))(v66 + 8))(v68, v67);
  }
  else
  {

    v56 = *(void (**)(char *, uint64_t, __n128))(v14 + 8);
    ((void (*)(char *, uint64_t))v56)(v38, v13);

    (*(void (**)(char *, uint64_t))(v66 + 8))(v37, v67);
  }
  ((void (*)(char *, uint64_t))v56)(v27, v13);
}

void sub_100066400(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_100066430(a1, a2, a3, (uint64_t)"init(_:identifier:)", 19);
}

void sub_100066418(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_100066430(a1, a2, a3, (uint64_t)"init(arrangedSections:identifier:)", 34);
}

void sub_100066430(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _swift_stdlib_reportUnimplementedInitializer("Health.MedicalIDEmergencyBuddyDataSource", 40, a4, a5, 0);
  __break(1u);
}

uint64_t sub_100066458()
{
  return type metadata accessor for MedicalIDEmergencyBuddyDataSource(0);
}

unint64_t sub_100066460@<X0>(uint64_t a1@<X3>, uint64_t *a2@<X8>)
{
  swift_getWitnessTable(&unk_1000B4528, a1);
  return sub_1000213F0(a2);
}

uint64_t sub_1000664CC(uint64_t a1, uint64_t a2)
{
  uint64_t WitnessTable;

  WitnessTable = swift_getWitnessTable(&unk_1000B4528, a2);
  return sub_100020F3C(a1, a2, WitnessTable);
}

uint64_t sub_10006651C(uint64_t a1)
{
  uint64_t result;

  *(_QWORD *)(a1 + 8) = sub_100066568(&qword_1000EED60, (uint64_t)&unk_1000B44D0);
  result = sub_100066568(&qword_1000EED68, (uint64_t)&unk_1000B4500);
  *(_QWORD *)(a1 + 24) = result;
  return result;
}

uint64_t sub_100066568(unint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    v5 = type metadata accessor for MedicalIDEmergencyBuddyDataSource(255);
    result = swift_getWitnessTable(a2, v5);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1000665A8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v1 = type metadata accessor for EmergencyAccessBuddyFlow(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = v3 | 7;
  v6 = ((*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v6, v5);
}

void sub_100066614(void *a1)
{
  uint64_t v1;
  uint64_t v3;
  unint64_t v4;

  v3 = *(_QWORD *)(type metadata accessor for EmergencyAccessBuddyFlow(0) - 8);
  v4 = (*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  sub_100065EC4(a1, v1 + v4, *(_QWORD *)(v1 + ((*(_QWORD *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFF8)));
}

uint64_t sub_100066664@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t OpaqueTypeConformance2;
  __n128 v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char v60[16];
  uint64_t v61;
  char v62[16];
  uint64_t v63;
  __int128 v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  void *v68;

  v59 = a1;
  v2 = type metadata accessor for NavigationBarItem.TitleDisplayMode(0);
  v55 = *(_QWORD *)(v2 - 8);
  v56 = v2;
  __chkstk_darwin(v2);
  v54 = (char *)&v48 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for InsetGroupedListStyle(0);
  v48 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v6 = (char *)&v48 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100068D6C(0);
  v8 = v7;
  v9 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v11 = (char *)&v48 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000691B8(0);
  v13 = v12;
  v50 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v15 = (char *)&v48 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100069268(0);
  v52 = v16;
  v53 = *(_QWORD *)(v16 - 8);
  __chkstk_darwin(v16);
  v18 = (char *)&v48 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100069344(0);
  v20 = *(_QWORD *)(v19 - 8);
  v57 = v19;
  v58 = v20;
  __chkstk_darwin(v19);
  v49 = (char *)&v48 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v63 = v1;
  sub_100068E00(0);
  v23 = v22;
  v24 = sub_100013198(&qword_1000EEDE8, (uint64_t (*)(uint64_t))sub_100068E00, (uint64_t)&protocol conformance descriptor for TupleView<A>);
  v25 = List<>.init(content:)(sub_100069444, v62, v23, v24);
  InsetGroupedListStyle.init()(v25);
  v26 = sub_100013198(&qword_1000EEDF8, (uint64_t (*)(uint64_t))sub_100068D6C, (uint64_t)&protocol conformance descriptor for List<A, B>);
  View.listStyle<A>(_:)(v6, v8, v4, v26, &protocol witness table for InsetGroupedListStyle);
  (*(void (**)(char *, uint64_t))(v48 + 8))(v6, v4);
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  v27 = LocalizedStringKey.init(stringLiteral:)(0xD000000000000011, 0x80000001000BC0D0);
  v29 = v28;
  LOBYTE(v9) = v30;
  v32 = v31;
  v65 = v8;
  v66 = v4;
  v67 = v26;
  v68 = &protocol witness table for InsetGroupedListStyle;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v65, &opaque type descriptor for <<opaque return type of View.listStyle<A>(_:)>>, 1);
  View.navigationTitle(_:)(v27, v29, v9 & 1, v32, v13, OpaqueTypeConformance2);
  swift_bridgeObjectRelease(v32);
  v34 = swift_bridgeObjectRelease(v29);
  (*(void (**)(char *, uint64_t, __n128))(v50 + 8))(v15, v13, v34);
  v36 = v54;
  v35 = v55;
  v37 = v56;
  (*(void (**)(char *, _QWORD, uint64_t))(v55 + 104))(v54, enum case for NavigationBarItem.TitleDisplayMode.inline(_:), v56);
  v65 = v13;
  v66 = OpaqueTypeConformance2;
  v38 = swift_getOpaqueTypeConformance2(&v65, &opaque type descriptor for <<opaque return type of View.navigationTitle(_:)>>, 1);
  v39 = v49;
  v40 = v52;
  View.navigationBarTitleDisplayMode(_:)(v36, v52, v38);
  (*(void (**)(char *, uint64_t))(v35 + 8))(v36, v37);
  (*(void (**)(char *, uint64_t))(v53 + 8))(v18, v40);
  v41 = v51;
  v64 = *(_OWORD *)(v51 + 72);
  sub_1000138C8(0, &qword_1000EEE10, (uint64_t)&type metadata for Bool, (uint64_t (*)(_QWORD, uint64_t))&type metadata accessor for State);
  State.projectedValue.getter(&v65);
  v42 = v65;
  v43 = v66;
  v44 = v67;
  v61 = v41;
  v65 = v40;
  v66 = v38;
  v45 = swift_getOpaqueTypeConformance2(&v65, &opaque type descriptor for <<opaque return type of View.navigationBarTitleDisplayMode(_:)>>, 1);
  v46 = v57;
  View.alert(isPresented:content:)(v42, v43, v44, sub_10006944C, v60, v57, v45);
  swift_release(v43);
  swift_release(v42);
  return (*(uint64_t (**)(char *, uint64_t))(v58 + 8))(v39, v46);
}

uint64_t sub_100066ACC@<X0>(uint64_t a1@<X0>, char *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  void (*v53)(char *, char *, uint64_t);
  char *v54;
  uint64_t v55;
  void (*v56)(char *, char *, uint64_t);
  char *v57;
  char *v58;
  uint64_t v59;
  void (*v60)(char *, char *, uint64_t);
  char *v61;
  uint64_t v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  void (*v66)(char *, uint64_t);
  uint64_t v67;
  void (*v68)(char *, uint64_t);
  void (*v69)(char *, uint64_t);
  uint64_t v71;
  char *v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  char *v76;
  uint64_t v77;
  char *v78;
  uint64_t v79;
  char *v80;
  uint64_t v81;
  char *v82;
  char *v83;
  uint64_t v84;
  char v85[16];
  uint64_t v86;
  char v87[16];
  uint64_t v88;
  char v89[16];
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  char v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  char v97;
  uint64_t v98;

  v80 = a2;
  sub_1000690A4(0, &qword_1000EEDD0, (uint64_t (*)(uint64_t))sub_1000690FC);
  v79 = v3;
  v84 = *(_QWORD *)(v3 - 8);
  v4 = __chkstk_darwin(v3);
  v78 = (char *)&v71 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v83 = (char *)&v71 - v6;
  sub_1000690A4(0, &qword_1000EEDC8, (uint64_t (*)(uint64_t))sub_100068FC4);
  v77 = v7;
  v81 = *(_QWORD *)(v7 - 8);
  v8 = __chkstk_darwin(v7);
  v76 = (char *)&v71 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v11 = (char *)&v71 - v10;
  sub_1000690A4(0, &qword_1000EED88, (uint64_t (*)(uint64_t))sub_100068ED0);
  v75 = v12;
  v74 = *(_QWORD *)(v12 - 8);
  v13 = v74;
  v14 = __chkstk_darwin(v12);
  v82 = (char *)&v71 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  v17 = (char *)&v71 - v16;
  v90 = a1;
  v18 = LocalizedStringKey.init(stringLiteral:)(0x6E655320809A9FF0, 0xA900000000000064);
  v95 = Text.init(_:tableName:bundle:comment:)(v18);
  v96 = v19;
  v97 = v20 & 1;
  v98 = v21;
  v22 = LocalizedStringKey.init(stringLiteral:)(0xD00000000000007ELL, 0x80000001000BC1A0);
  v91 = Text.init(_:tableName:bundle:comment:)(v22);
  v92 = v23;
  v93 = v24 & 1;
  v94 = v25;
  sub_100068ED0(0);
  v27 = v26;
  v28 = sub_100013198(&qword_1000EEE28, (uint64_t (*)(uint64_t))sub_100068ED0, (uint64_t)&protocol conformance descriptor for TupleView<A>);
  v73 = v17;
  Section<>.init(header:footer:content:)(&v95, &v91, sub_100069480, v89, &type metadata for Text, v27, &type metadata for Text, &protocol witness table for Text, v28, &protocol witness table for Text);
  v88 = a1;
  v29 = LocalizedStringKey.init(stringLiteral:)(0x1000000000000016, 0x80000001000BC220);
  v95 = Text.init(_:tableName:bundle:comment:)(v29);
  v96 = v30;
  v97 = v31 & 1;
  v98 = v32;
  v33 = LocalizedStringKey.init(stringLiteral:)(0xD00000000000005ALL, 0x80000001000BC240);
  v91 = Text.init(_:tableName:bundle:comment:)(v33);
  v92 = v34;
  v93 = v35 & 1;
  v94 = v36;
  sub_100068FC4(0);
  v38 = v37;
  v39 = sub_100069490();
  v40 = v11;
  v72 = v11;
  Section<>.init(header:footer:content:)(&v95, &v91, sub_100069488, v87, &type metadata for Text, v38, &type metadata for Text, &protocol witness table for Text, v39, &protocol witness table for Text);
  v86 = a1;
  v41 = LocalizedStringKey.init(stringLiteral:)(0x1000000000000011, 0x80000001000BC2A0);
  v95 = Text.init(_:tableName:bundle:comment:)(v41);
  v96 = v42;
  v97 = v43 & 1;
  v98 = v44;
  v45 = LocalizedStringKey.init(stringLiteral:)(0xD00000000000003FLL, 0x80000001000BC2C0);
  v91 = Text.init(_:tableName:bundle:comment:)(v45);
  v92 = v46;
  v93 = v47 & 1;
  v94 = v48;
  sub_1000690FC(0);
  v50 = v49;
  v51 = sub_100013198(&qword_1000EEE48, (uint64_t (*)(uint64_t))sub_1000690FC, (uint64_t)&protocol conformance descriptor for NavigationLink<A, B>);
  v52 = v83;
  Section<>.init(header:footer:content:)(&v95, &v91, sub_1000695B0, v85, &type metadata for Text, v50, &type metadata for Text, &protocol witness table for Text, v51, &protocol witness table for Text);
  v53 = *(void (**)(char *, char *, uint64_t))(v13 + 16);
  v54 = v82;
  v55 = v75;
  v53(v82, v17, v75);
  v56 = *(void (**)(char *, char *, uint64_t))(v81 + 16);
  v57 = v76;
  v58 = v40;
  v59 = v77;
  v56(v76, v58, v77);
  v60 = *(void (**)(char *, char *, uint64_t))(v84 + 16);
  v61 = v78;
  v62 = v79;
  v60(v78, v52, v79);
  v63 = v80;
  v53(v80, v54, v55);
  sub_100068E1C(0);
  v65 = v64;
  v56(&v63[*(int *)(v64 + 48)], v57, v59);
  v60(&v63[*(int *)(v65 + 64)], v61, v62);
  v66 = *(void (**)(char *, uint64_t))(v84 + 8);
  v67 = v62;
  v66(v83, v62);
  v68 = *(void (**)(char *, uint64_t))(v81 + 8);
  v68(v72, v59);
  v69 = *(void (**)(char *, uint64_t))(v74 + 8);
  v69(v73, v55);
  v66(v61, v67);
  v68(v57, v59);
  return ((uint64_t (*)(char *, uint64_t))v69)(v82, v55);
}

uint64_t sub_100067120@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  uint64_t v37;
  char *v38;
  uint64_t KeyPath;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  char *v44;
  uint64_t v45;
  uint64_t *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  __int128 v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  __int128 v61;
  uint64_t v62;
  __int128 v63;
  uint64_t v64;
  uint64_t v65;
  __int128 v66;
  uint64_t v67;

  v60 = a2;
  sub_100069050(0, &qword_1000EEDB8, (uint64_t (*)(_QWORD, void *, void *))&type metadata accessor for Button);
  v58 = *(_QWORD *)(v3 - 8);
  v59 = v3;
  __chkstk_darwin(v3);
  v54 = (char *)&v51 - v4;
  sub_100068FC4(0);
  v57 = v5;
  v6 = __chkstk_darwin(v5);
  v55 = (char *)&v51 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v56 = (uint64_t)&v51 - v8;
  sub_100069050(0, &qword_1000EEDA8, (uint64_t (*)(_QWORD, void *, void *))&type metadata accessor for TextField);
  v10 = v9;
  v11 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v13 = (char *)&v51 - v12;
  sub_100068F58(0);
  v53 = v14;
  v15 = __chkstk_darwin(v14);
  v17 = (char *)&v51 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  v52 = (uint64_t)&v51 - v18;
  v66 = *(_OWORD *)(a1 + 48);
  v67 = *(_QWORD *)(a1 + 64);
  v61 = *(_OWORD *)(a1 + 48);
  v62 = *(_QWORD *)(a1 + 64);
  sub_1000138C8(0, &qword_1000EEE60, (uint64_t)&type metadata for String, (uint64_t (*)(_QWORD, uint64_t))&type metadata accessor for State);
  State.projectedValue.getter(&v63);
  v19 = v63;
  v21 = v64;
  v20 = v65;
  *(_QWORD *)&v63 = 0x1000000000000036;
  *((_QWORD *)&v63 + 1) = 0x80000001000B8070;
  v22 = sub_10002D0D0();
  TextField<>.init<A>(_:text:onEditingChanged:onCommit:)(&v63, v19, *((_QWORD *)&v19 + 1), v21, v20, ConfigurationIntentResponseCode.rawValue.getter, 0, ConfigurationIntentResponseCode.rawValue.getter, 0, &type metadata for String, v22);
  v61 = v66;
  v62 = v67;
  State.projectedValue.getter(&v63);
  v51 = v63;
  v23 = v64;
  v24 = v65;
  (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v17, v13, v10);
  v25 = &v17[*(int *)(v53 + 36)];
  *(_OWORD *)v25 = v51;
  *((_QWORD *)v25 + 2) = v23;
  *((_QWORD *)v25 + 3) = v24;
  (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  v26 = v52;
  sub_1000697F4((uint64_t)v17, v52, (uint64_t (*)(_QWORD))sub_100068F58);
  v27 = LocalizedStringKey.init(stringLiteral:)(0xD000000000000019, 0x80000001000BC340);
  v29 = v28;
  LOBYTE(v20) = v30;
  v32 = v31;
  v33 = swift_allocObject(&unk_1000E04A8, 120, 7);
  v34 = *(_OWORD *)(a1 + 80);
  *(_OWORD *)(v33 + 80) = *(_OWORD *)(a1 + 64);
  *(_OWORD *)(v33 + 96) = v34;
  *(_QWORD *)(v33 + 112) = *(_QWORD *)(a1 + 96);
  v35 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(v33 + 16) = *(_OWORD *)a1;
  *(_OWORD *)(v33 + 32) = v35;
  v36 = *(_OWORD *)(a1 + 48);
  *(_OWORD *)(v33 + 48) = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(v33 + 64) = v36;
  sub_1000695E4((_QWORD *)a1);
  v37 = v20 & 1;
  v38 = v54;
  Button<>.init(_:action:)(v27, v29, v37, v32, sub_1000697BC, v33);
  v63 = *(_OWORD *)(a1 + 88);
  sub_1000138C8(0, &qword_1000EEE10, (uint64_t)&type metadata for Bool, (uint64_t (*)(_QWORD, uint64_t))&type metadata accessor for State);
  State.wrappedValue.getter(&v61);
  LOBYTE(a1) = v61;
  KeyPath = swift_getKeyPath(&unk_1000B4608);
  v40 = swift_allocObject(&unk_1000E04D0, 17, 7);
  *(_BYTE *)(v40 + 16) = a1;
  v41 = v58;
  v42 = (uint64_t)v55;
  v43 = v38;
  v44 = v38;
  v45 = v59;
  (*(void (**)(char *, char *, uint64_t))(v58 + 16))(v55, v44, v59);
  v46 = (uint64_t *)(v42 + *(int *)(v57 + 36));
  *v46 = KeyPath;
  v46[1] = (uint64_t)sub_10006A178;
  v46[2] = v40;
  (*(void (**)(char *, uint64_t))(v41 + 8))(v43, v45);
  v47 = v56;
  sub_1000697F4(v42, v56, (uint64_t (*)(_QWORD))sub_100068FC4);
  sub_10001375C(v26, (uint64_t)v17, (uint64_t (*)(_QWORD))sub_100068F58);
  sub_10001375C(v47, v42, (uint64_t (*)(_QWORD))sub_100068FC4);
  v48 = v60;
  sub_10001375C((uint64_t)v17, v60, (uint64_t (*)(_QWORD))sub_100068F58);
  sub_100068EEC(0);
  sub_10001375C(v42, v48 + *(int *)(v49 + 48), (uint64_t (*)(_QWORD))sub_100068FC4);
  sub_1000137A0(v47, (uint64_t (*)(_QWORD))sub_100068FC4);
  sub_1000137A0(v26, (uint64_t (*)(_QWORD))sub_100068F58);
  sub_1000137A0(v42, (uint64_t (*)(_QWORD))sub_100068FC4);
  return sub_1000137A0((uint64_t)v17, (uint64_t (*)(_QWORD))sub_100068F58);
}

uint64_t sub_1000675DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4[11] = a4;
  v5 = type metadata accessor for MainActor(0);
  v4[12] = static MainActor.shared.getter(v5);
  v6 = dispatch thunk of Actor.unownedExecutor.getter(v5, &protocol witness table for MainActor);
  v4[13] = v6;
  v4[14] = v7;
  return swift_task_switch(sub_100067648, v6, v7);
}

uint64_t sub_100067648()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;

  v1 = *(_QWORD *)(v0 + 88);
  v2 = *(_QWORD *)(v1 + 24);
  v3 = *(_QWORD *)(v1 + 32);
  v4 = *(unsigned __int8 *)(v1 + 40);
  v5 = type metadata accessor for NotificationSyncStoreModel(0);
  v6 = sub_100013198(&qword_1000EEE20, type metadata accessor for NotificationSyncStoreModel, (uint64_t)&unk_1000B0664);
  *(_QWORD *)(v0 + 120) = StateObject.wrappedValue.getter(v2, v3, v4, v5, v6);
  v7 = *(_QWORD *)(v1 + 64);
  *(_OWORD *)(v0 + 16) = *(_OWORD *)(v1 + 48);
  *(_QWORD *)(v0 + 32) = v7;
  sub_1000138C8(0, &qword_1000EEE60, (uint64_t)&type metadata for String, (uint64_t (*)(_QWORD, uint64_t))&type metadata accessor for State);
  State.wrappedValue.getter((_QWORD *)(v0 + 40));
  v9 = *(_QWORD *)(v0 + 40);
  v8 = *(_QWORD *)(v0 + 48);
  *(_QWORD *)(v0 + 128) = v8;
  v10 = (_QWORD *)swift_task_alloc(dword_1000EC20C);
  *(_QWORD *)(v0 + 136) = v10;
  *v10 = v0;
  v10[1] = sub_100067750;
  return sub_100014EFC(3, v9, v8);
}

uint64_t sub_100067750()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *v0;
  v2 = *(_QWORD *)(*v0 + 128);
  v3 = *(_QWORD *)(*v0 + 120);
  swift_task_dealloc(*(_QWORD *)(*v0 + 136));
  swift_bridgeObjectRelease(v2);
  swift_release(v3);
  return swift_task_switch(sub_1000677B8, *(_QWORD *)(v1 + 104), *(_QWORD *)(v1 + 112));
}

uint64_t sub_1000677B8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(v0 + 88);
  swift_release(*(_QWORD *)(v0 + 96));
  *(_OWORD *)(v0 + 56) = *(_OWORD *)(v1 + 72);
  *(_BYTE *)(v0 + 144) = 1;
  sub_1000138C8(0, &qword_1000EEE10, (uint64_t)&type metadata for Bool, (uint64_t (*)(_QWORD, uint64_t))&type metadata accessor for State);
  v3 = v2;
  State.wrappedValue.setter(v0 + 144, v2);
  *(_OWORD *)(v0 + 72) = *(_OWORD *)(v1 + 88);
  *(_BYTE *)(v0 + 145) = 0;
  State.wrappedValue.setter(v0 + 145, v3);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100067860@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  uint64_t KeyPath;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  __int128 v25;
  uint64_t v26;

  sub_100069050(0, &qword_1000EEDB8, (uint64_t (*)(_QWORD, void *, void *))&type metadata accessor for Button);
  v5 = v4;
  v6 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v8 = (char *)&v25 - v7;
  v9 = LocalizedStringKey.init(stringLiteral:)(0xD00000000000001CLL, 0x80000001000BC320);
  v11 = v10;
  v13 = v12;
  v15 = v14;
  v16 = swift_allocObject(&unk_1000E0430, 120, 7);
  v17 = *(_OWORD *)(a1 + 80);
  *(_OWORD *)(v16 + 80) = *(_OWORD *)(a1 + 64);
  *(_OWORD *)(v16 + 96) = v17;
  *(_QWORD *)(v16 + 112) = *(_QWORD *)(a1 + 96);
  v18 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(v16 + 16) = *(_OWORD *)a1;
  *(_OWORD *)(v16 + 32) = v18;
  v19 = *(_OWORD *)(a1 + 48);
  *(_OWORD *)(v16 + 48) = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(v16 + 64) = v19;
  sub_1000695E4((_QWORD *)a1);
  Button<>.init(_:action:)(v9, v11, v13 & 1, v15, sub_1000695BC, v16);
  v25 = *(_OWORD *)(a1 + 88);
  sub_1000138C8(0, &qword_1000EEE10, (uint64_t)&type metadata for Bool, (uint64_t (*)(_QWORD, uint64_t))&type metadata accessor for State);
  State.wrappedValue.getter(&v26);
  LOBYTE(v11) = v26;
  KeyPath = swift_getKeyPath(&unk_1000B4608);
  v21 = swift_allocObject(&unk_1000E0458, 17, 7);
  *(_BYTE *)(v21 + 16) = v11;
  (*(void (**)(uint64_t, char *, uint64_t))(v6 + 16))(a2, v8, v5);
  sub_100068FC4(0);
  v23 = (uint64_t *)(a2 + *(int *)(v22 + 36));
  *v23 = KeyPath;
  v23[1] = (uint64_t)sub_1000696D8;
  v23[2] = v21;
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_100067A24(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v19;
  char v20;
  __int128 v21;

  sub_1000076D8(0, &qword_1000ECA88, (uint64_t (*)(uint64_t))&type metadata accessor for TaskPriority, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
  __chkstk_darwin(v6);
  v8 = (char *)&v19 - v7;
  v21 = *(_OWORD *)(a1 + 88);
  v20 = 1;
  sub_1000138C8(0, &qword_1000EEE10, (uint64_t)&type metadata for Bool, (uint64_t (*)(_QWORD, uint64_t))&type metadata accessor for State);
  State.wrappedValue.setter(&v20, v9);
  v10 = type metadata accessor for TaskPriority(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56))(v8, 1, 1, v10);
  type metadata accessor for MainActor(0);
  v11 = sub_1000695E4((_QWORD *)a1);
  v12 = static MainActor.shared.getter(v11);
  v13 = swift_allocObject(a2, 136, 7);
  *(_QWORD *)(v13 + 16) = v12;
  *(_QWORD *)(v13 + 24) = &protocol witness table for MainActor;
  v14 = *(_OWORD *)(a1 + 80);
  *(_OWORD *)(v13 + 96) = *(_OWORD *)(a1 + 64);
  *(_OWORD *)(v13 + 112) = v14;
  *(_QWORD *)(v13 + 128) = *(_QWORD *)(a1 + 96);
  v15 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(v13 + 32) = *(_OWORD *)a1;
  *(_OWORD *)(v13 + 48) = v15;
  v16 = *(_OWORD *)(a1 + 48);
  *(_OWORD *)(v13 + 64) = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(v13 + 80) = v16;
  v17 = sub_10001DAB0((uint64_t)v8, a3, v13);
  return swift_release(v17);
}

uint64_t sub_100067B78(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4[6] = a4;
  v5 = type metadata accessor for MainActor(0);
  v4[7] = static MainActor.shared.getter(v5);
  v6 = dispatch thunk of Actor.unownedExecutor.getter(v5, &protocol witness table for MainActor);
  v4[8] = v6;
  v4[9] = v7;
  return swift_task_switch(sub_100067BE4, v6, v7);
}

uint64_t sub_100067BE4()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v1 = v0[6];
  v3 = *(_QWORD *)(v1 + 24);
  v2 = *(_QWORD *)(v1 + 32);
  v4 = *(unsigned __int8 *)(v1 + 40);
  v5 = type metadata accessor for NotificationSyncStoreModel(0);
  v6 = sub_100013198(&qword_1000EEE20, type metadata accessor for NotificationSyncStoreModel, (uint64_t)&unk_1000B0664);
  v0[10] = StateObject.wrappedValue.getter(v3, v2, v4, v5, v6);
  v7 = (_QWORD *)swift_task_alloc(dword_1000EC20C);
  v0[11] = v7;
  *v7 = v0;
  v7[1] = sub_100067C90;
  return sub_100014EFC(1, 0, 0);
}

uint64_t sub_100067C90()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *v0;
  v2 = *(_QWORD *)(*v0 + 80);
  swift_task_dealloc(*(_QWORD *)(*v0 + 88));
  swift_release(v2);
  return swift_task_switch(sub_100067CE4, *(_QWORD *)(v1 + 64), *(_QWORD *)(v1 + 72));
}

uint64_t sub_100067CE4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(v0 + 48);
  swift_release(*(_QWORD *)(v0 + 56));
  *(_OWORD *)(v0 + 16) = *(_OWORD *)(v1 + 72);
  *(_BYTE *)(v0 + 96) = 1;
  sub_1000138C8(0, &qword_1000EEE10, (uint64_t)&type metadata for Bool, (uint64_t (*)(_QWORD, uint64_t))&type metadata accessor for State);
  v3 = v2;
  State.wrappedValue.setter(v0 + 96, v2);
  *(_OWORD *)(v0 + 32) = *(_OWORD *)(v1 + 88);
  *(_BYTE *)(v0 + 97) = 0;
  State.wrappedValue.setter(v0 + 97, v3);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100067D8C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  _QWORD v10[2];

  v1 = *(_QWORD *)(a1 + 24);
  v2 = *(_QWORD *)(a1 + 32);
  v3 = *(unsigned __int8 *)(a1 + 40);
  v4 = type metadata accessor for NotificationSyncStoreModel(0);
  v5 = sub_100013198(&qword_1000EEE20, type metadata accessor for NotificationSyncStoreModel, (uint64_t)&unk_1000B0664);
  v6 = StateObject.wrappedValue.getter(v1, v2, v3, v4, v5);
  v10[0] = ObservedObject.init(wrappedValue:)(v6, v4, v5);
  v10[1] = v7;
  v8 = sub_100069174();
  return NavigationLink.init(destination:label:)(v10, sub_100067E54, 0, &type metadata for Text, &type metadata for NotificationInstructionListView, &protocol witness table for Text, v8);
}

uint64_t sub_100067E54@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  char v5;
  uint64_t v6;

  v2 = LocalizedStringKey.init(stringLiteral:)(0xD000000000000011, 0x80000001000BC300);
  result = Text.init(_:tableName:bundle:comment:)(v2);
  *(_QWORD *)a1 = result;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = v5 & 1;
  *(_QWORD *)(a1 + 24) = v6;
  return result;
}

uint64_t sub_100067EC8@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t KeyPath;
  uint64_t v13;
  void *countAndFlagsBits;
  unint64_t v15;
  Swift::String v16;
  void *object;
  uint64_t v18;
  const char *v19;
  id v20;
  id v21;
  uint64_t v22;
  void *v23;
  void *v24;
  void *v25;
  unint64_t v26;
  uint64_t v27;
  void *v28;
  void *v29;
  Swift::String v30;
  void *v31;
  id v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  double v36;
  uint64_t v37;
  id v38;
  uint64_t v39;
  void *v40;
  void *v41;
  Swift::String v42;
  Swift::String v43;
  void *v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char v48;
  char v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char v64;
  char v65;
  char *v66;
  __n128 v67;
  uint64_t v68;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  char *v74;
  uint64_t v75;
  Swift::String v76;
  Swift::String v77;

  sub_1000076D8(0, &qword_1000EEE18, (uint64_t (*)(uint64_t))&type metadata accessor for Alert.Button, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
  __chkstk_darwin(v3);
  v5 = (char *)&v70 - v4;
  v6 = *(_QWORD *)(v1 + 24);
  v7 = *(_QWORD *)(v1 + 32);
  v8 = *(unsigned __int8 *)(v1 + 40);
  v9 = type metadata accessor for NotificationSyncStoreModel(0);
  v10 = sub_100013198(&qword_1000EEE20, type metadata accessor for NotificationSyncStoreModel, (uint64_t)&unk_1000B0664);
  v11 = StateObject.wrappedValue.getter(v6, v7, v8, v9, v10);
  KeyPath = swift_getKeyPath(&unk_1000B45C0);
  v13 = swift_getKeyPath(&unk_1000B45E8);
  static Published.subscript.getter(&v77, v11, KeyPath, v13);
  swift_release(v11);
  swift_release(KeyPath);
  swift_release(v13);
  countAndFlagsBits = (void *)v77._countAndFlagsBits;
  v74 = v5;
  v75 = a1;
  if (((uint64_t)v77._object & 1) != 0)
  {
    v77._countAndFlagsBits = 0x203A726F727245;
    v77._object = (void *)0xE700000000000000;
    v76._countAndFlagsBits = (uint64_t)countAndFlagsBits;
    sub_100016208(countAndFlagsBits, 1);
    v15 = sub_100013960();
    v16._countAndFlagsBits = String.init<A>(reflecting:)(&v76, v15);
    object = v16._object;
    String.append(_:)(v16);
    swift_bridgeObjectRelease(object);
    sub_100069474(countAndFlagsBits, 1);
    v18 = 0xD00000000000001ALL;
    v19 = "Could Not Send Instruction";
LABEL_9:
    v31 = (void *)((unint64_t)(v19 - 32) | 0x8000000000000000);
    goto LABEL_10;
  }
  if (!v77._countAndFlagsBits)
  {
    v18 = 0xD000000000000010;
    v77._countAndFlagsBits = 0xD00000000000001DLL;
    v77._object = (void *)0x80000001000BC130;
    v19 = "Operation Failed";
    goto LABEL_9;
  }
  v20 = (id)v77._countAndFlagsBits;
  v21 = (id)NSStringFromHKNotificationInstructionAction(objc_msgSend(v20, "action"));
  v22 = static String._unconditionallyBridgeFromObjectiveC(_:)(v21);
  v24 = v23;

  v77._countAndFlagsBits = 0;
  v77._object = (void *)0xE000000000000000;
  _StringGuts.grow(_:)(19);
  v25 = v77._object;
  v77._countAndFlagsBits = v22;
  v77._object = v24;
  v26 = sub_10002D0D0();
  v27 = StringProtocol.localizedCapitalized.getter(&type metadata for String, v26);
  v29 = v28;
  swift_bridgeObjectRelease(v25);
  swift_bridgeObjectRelease(v24);
  v77._countAndFlagsBits = v27;
  v77._object = v29;
  v30._countAndFlagsBits = 0xD000000000000011;
  v30._object = (void *)0x80000001000BC150;
  String.append(_:)(v30);
  v31 = v77._object;
  v18 = v77._countAndFlagsBits;
  v77._countAndFlagsBits = 0xD000000000000026;
  v77._object = (void *)0x80000001000BC170;
  v32 = objc_msgSend(v20, "categoryIdentifier");
  v33 = static String._unconditionallyBridgeFromObjectiveC(_:)(v32);
  v35 = v34;

  *(_QWORD *)&v36 = swift_bridgeObjectRelease(v35).n128_u64[0];
  v37 = HIBYTE(v35) & 0xF;
  if ((v35 & 0x2000000000000000) == 0)
    v37 = v33 & 0xFFFFFFFFFFFFLL;
  if (v37)
  {
    v76._countAndFlagsBits = 2230794;
    v76._object = (void *)0xE300000000000000;
    v38 = objc_msgSend(v20, "categoryIdentifier", v36);
    v39 = static String._unconditionallyBridgeFromObjectiveC(_:)(v38);
    v41 = v40;

    v42._countAndFlagsBits = v39;
    v42._object = v41;
    String.append(_:)(v42);
    swift_bridgeObjectRelease(v41);
    v43._countAndFlagsBits = 34;
    v43._object = (void *)0xE100000000000000;
    String.append(_:)(v43);
    v44 = v76._object;
    String.append(_:)(v76);
    sub_100069474(countAndFlagsBits, 0);
    sub_100069474(countAndFlagsBits, 0);
    swift_bridgeObjectRelease(v44);
  }
  else
  {
    sub_100069474(countAndFlagsBits, 0);
    sub_100069474(countAndFlagsBits, 0);
  }
LABEL_10:
  v76._countAndFlagsBits = v18;
  v76._object = v31;
  v45 = sub_10002D0D0();
  v46 = Text.init<A>(_:)(&v76, &type metadata for String, v45);
  v72 = v47;
  v73 = v46;
  v49 = v48;
  v71 = v50;
  v76 = v77;
  v51 = Text.init<A>(_:)(&v76, &type metadata for String, v45);
  v53 = v52;
  v55 = v54;
  v57 = v56 & 1;
  v58 = LocalizedStringKey.init(stringLiteral:)(0x7373696D736944, 0xE700000000000000);
  v59 = Text.init(_:tableName:bundle:comment:)(v58);
  v61 = v60;
  v63 = v62;
  v65 = v64 & 1;
  v66 = v74;
  static Alert.Button.default(_:action:)();
  sub_1000308FC(v59, v61, v65);
  v67 = swift_bridgeObjectRelease(v63);
  v68 = type metadata accessor for Alert.Button(0, v67);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v68 - 8) + 56))(v66, 0, 1, v68);
  return Alert.init(title:message:dismissButton:)(v73, v72, v49 & 1, v71, v51, v53, v57, v55, v66);
}

uint64_t sub_100068398@<X0>(uint64_t a1@<X8>)
{
  return sub_100066664(a1);
}

uint64_t sub_1000683E0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void (*v36)(uint64_t, char *, uint64_t);
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  void (*v40)(char *, uint64_t);
  void (*v42)(char *, uint64_t, uint64_t);
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;

  v45 = a6;
  sub_1000076D8(0, &qword_1000EEEA0, (uint64_t (*)(uint64_t))sub_100069D8C, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
  v12 = __chkstk_darwin(v11);
  v43 = (uint64_t)&v42 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v15 = (char *)&v42 - v14;
  sub_100069CF0(0);
  v17 = v16;
  v18 = __chkstk_darwin(v16);
  v20 = (char *)&v42 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18);
  v22 = (char *)&v42 - v21;
  v44 = v23;
  v42 = *(void (**)(char *, uint64_t, uint64_t))(v23 + 16);
  v42((char *)&v42 - v21, a1, v17);
  v24 = a2;
  v46 = a2;
  v47 = a3;
  v25 = a3;
  v48 = a4;
  v49 = a5;
  v26 = a5;
  sub_1000138C8(0, &qword_1000EEED8, (uint64_t)&type metadata for String, (uint64_t (*)(_QWORD, uint64_t))&type metadata accessor for Binding);
  Binding.wrappedValue.getter(&v50);
  v28 = v50;
  v27 = v51;
  swift_bridgeObjectRelease(v51);
  v29 = HIBYTE(v27) & 0xF;
  if ((v27 & 0x2000000000000000) == 0)
    v29 = v28 & 0xFFFFFFFFFFFFLL;
  if (v29)
  {
    v30 = (_QWORD *)swift_allocObject(&unk_1000E05A0, 48, 7);
    v30[2] = v24;
    v30[3] = v25;
    v30[4] = a4;
    v30[5] = v26;
    sub_100069DEC(0);
    v32 = v31;
    v33 = sub_100069EB4();
    swift_retain(v24);
    swift_retain(v25);
    swift_bridgeObjectRetain(v26);
    Button.init(action:label:)(sub_100069F68, v30, sub_1000686AC, 0, v32, v33);
    sub_100069D8C(0);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v34 - 8) + 56))(v15, 0, 1, v34);
  }
  else
  {
    sub_100069D8C(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v35 - 8) + 56))(v15, 1, 1, v35);
  }
  v36 = (void (*)(uint64_t, char *, uint64_t))v42;
  v42(v20, (uint64_t)v22, v17);
  v37 = v43;
  sub_100069FD0((uint64_t)v15, v43);
  v38 = v45;
  v36(v45, v20, v17);
  sub_100069C6C(0);
  sub_100069FD0(v37, v38 + *(int *)(v39 + 48));
  sub_10006A02C((uint64_t)v15);
  v40 = *(void (**)(char *, uint64_t))(v44 + 8);
  v40(v22, v17);
  sub_10006A02C(v37);
  return ((uint64_t (*)(char *, uint64_t))v40)(v20, v17);
}

uint64_t sub_1000686AC@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  id v3;
  uint64_t v4;
  uint64_t result;

  v2 = Image.init(systemName:)(0xD000000000000011, 0x80000001000BC360);
  v3 = objc_msgSend((id)objc_opt_self(UIColor), "opaqueSeparatorColor");
  v4 = Color.init(_:)(v3);
  result = swift_getKeyPath(&unk_1000B46A8);
  *a1 = v2;
  a1[1] = result;
  a1[2] = v4;
  return result;
}

uint64_t sub_100068734()
{
  return static ViewModifier._viewListCount(inputs:body:)();
}

uint64_t sub_10006874C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v5 = *v2;
  v6 = v2[1];
  v8 = v2[2];
  v7 = v2[3];
  *(_QWORD *)a2 = static VerticalAlignment.center.getter();
  *(_QWORD *)(a2 + 8) = 0;
  *(_BYTE *)(a2 + 16) = 1;
  sub_100069BEC(0);
  return sub_1000683E0(a1, v5, v6, v8, v7, a2 + *(int *)(v9 + 44));
}

uint64_t sub_1000687BC@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = EnvironmentValues.isEnabled.getter();
  *a1 = result & 1;
  return result;
}

uint64_t sub_1000687E8(unsigned __int8 *a1)
{
  return EnvironmentValues.isEnabled.setter(*a1);
}

_BYTE *sub_10006880C(_BYTE *result, char a2)
{
  *result &= a2 ^ 1;
  return result;
}

uint64_t sub_100068820@<X0>(id a1@<X0>, uint64_t a2@<X8>)
{
  char v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD v14[2];
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v14[0] = 0;
  v14[1] = 0xE000000000000000;
  State.init(wrappedValue:)(&v15, v14, &type metadata for String);
  v12 = v16;
  v13 = v15;
  v11 = v17;
  LOBYTE(v14[0]) = 0;
  State.init(wrappedValue:)(&v15, v14, &type metadata for Bool);
  v4 = v15;
  v5 = v16;
  LOBYTE(v14[0]) = 0;
  State.init(wrappedValue:)(&v15, v14, &type metadata for Bool);
  v6 = v15;
  v7 = v16;
  if (!a1)
    a1 = objc_msgSend(objc_allocWithZone((Class)HKHealthStore), "init");
  v8 = type metadata accessor for NotificationSyncStoreModel(0);
  swift_allocObject(v8, *(unsigned int *)(v8 + 48), *(unsigned __int16 *)(v8 + 52));
  v9 = a1;
  result = sub_100014D14(0x46656C706D617845, 0xEE00657275746165, v9);
  strcpy((char *)a2, "ExampleFeature");
  *(_BYTE *)(a2 + 15) = -18;
  *(_QWORD *)(a2 + 16) = v9;
  *(_QWORD *)(a2 + 24) = sub_1000689A0;
  *(_QWORD *)(a2 + 32) = result;
  *(_BYTE *)(a2 + 40) = 0;
  *(_QWORD *)(a2 + 48) = v13;
  *(_QWORD *)(a2 + 56) = v12;
  *(_QWORD *)(a2 + 64) = v11;
  *(_BYTE *)(a2 + 72) = v4;
  *(_QWORD *)(a2 + 80) = v5;
  *(_BYTE *)(a2 + 88) = v6;
  *(_QWORD *)(a2 + 96) = v7;
  return result;
}

uint64_t sub_1000689A0()
{
  uint64_t v0;

  return swift_retain(v0);
}

uint64_t sub_1000689A8(uint64_t a1, uint64_t a2)
{
  return swift_retain(a2);
}

uint64_t destroy for NotificationSyncSettingsView(uint64_t a1)
{
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));

  sub_100068A04(*(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 56));
  swift_release(*(_QWORD *)(a1 + 64));
  swift_release(*(_QWORD *)(a1 + 80));
  return swift_release(*(_QWORD *)(a1 + 96));
}

uint64_t sub_100068A04(uint64_t a1, uint64_t a2)
{
  return swift_release(a2);
}

uint64_t initializeWithCopy for NotificationSyncSettingsView(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  char v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  v6 = *(void **)(a2 + 16);
  v5 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = v6;
  v7 = *(_QWORD *)(a2 + 32);
  v8 = *(_BYTE *)(a2 + 40);
  swift_bridgeObjectRetain(v4);
  v9 = v6;
  sub_1000689A8(v5, v7);
  *(_QWORD *)(a1 + 24) = v5;
  *(_QWORD *)(a1 + 32) = v7;
  *(_BYTE *)(a1 + 40) = v8;
  v10 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = v10;
  v11 = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 64) = v11;
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  v12 = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 80) = v12;
  *(_BYTE *)(a1 + 88) = *(_BYTE *)(a2 + 88);
  v13 = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 96) = v13;
  swift_bridgeObjectRetain(v10);
  swift_retain(v11);
  swift_retain(v12);
  swift_retain(v13);
  return a1;
}

uint64_t assignWithCopy for NotificationSyncSettingsView(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  void *v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  v6 = *(void **)(a2 + 16);
  v7 = *(void **)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v6;
  v8 = v6;

  v9 = *(_QWORD *)(a2 + 24);
  v10 = *(_QWORD *)(a2 + 32);
  v11 = *(_BYTE *)(a2 + 40);
  sub_1000689A8(v9, v10);
  v12 = *(_QWORD *)(a1 + 24);
  v13 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 24) = v9;
  *(_QWORD *)(a1 + 32) = v10;
  *(_BYTE *)(a1 + 40) = v11;
  sub_100068A04(v12, v13);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  v14 = *(_QWORD *)(a2 + 56);
  v15 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 56) = v14;
  swift_bridgeObjectRetain(v14);
  swift_bridgeObjectRelease(v15);
  v16 = *(_QWORD *)(a1 + 64);
  v17 = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 64) = v17;
  swift_retain(v17);
  swift_release(v16);
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  v18 = *(_QWORD *)(a1 + 80);
  v19 = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 80) = v19;
  swift_retain(v19);
  swift_release(v18);
  *(_BYTE *)(a1 + 88) = *(_BYTE *)(a2 + 88);
  v20 = *(_QWORD *)(a1 + 96);
  v21 = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 96) = v21;
  swift_retain(v21);
  swift_release(v20);
  return a1;
}

__n128 initializeWithTake for NotificationSyncSettingsView(uint64_t a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __n128 result;
  __int128 v5;
  __int128 v6;

  v2 = *a2;
  v3 = a2[2];
  *(_OWORD *)(a1 + 16) = a2[1];
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)a1 = v2;
  result = (__n128)a2[3];
  v5 = a2[4];
  v6 = a2[5];
  *(_QWORD *)(a1 + 96) = *((_QWORD *)a2 + 12);
  *(_OWORD *)(a1 + 64) = v5;
  *(_OWORD *)(a1 + 80) = v6;
  *(__n128 *)(a1 + 48) = result;
  return result;
}

uint64_t assignWithTake for NotificationSyncSettingsView(uint64_t a1, uint64_t a2)
{
  void *v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
  v4 = *(void **)(a1 + 16);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);

  v5 = *(_BYTE *)(a2 + 40);
  v6 = *(_QWORD *)(a1 + 24);
  v7 = *(_QWORD *)(a1 + 32);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_BYTE *)(a1 + 40) = v5;
  sub_100068A04(v6, v7);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 56));
  v8 = *(_QWORD *)(a1 + 64);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  swift_release(v8);
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  v9 = *(_QWORD *)(a1 + 80);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  swift_release(v9);
  *(_BYTE *)(a1 + 88) = *(_BYTE *)(a2 + 88);
  v10 = *(_QWORD *)(a1 + 96);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  swift_release(v10);
  return a1;
}

uint64_t getEnumTagSinglePayload for NotificationSyncSettingsView(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 104))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for NotificationSyncSettingsView(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 104) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 104) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for NotificationSyncSettingsView()
{
  return &type metadata for NotificationSyncSettingsView;
}

uint64_t sub_100068D5C(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_1000C17F4, 1);
}

void sub_100068D6C(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  _QWORD v5[4];

  if (!qword_1000EED70)
  {
    sub_100068E00(255);
    v5[0] = &type metadata for Never;
    v5[1] = v2;
    v5[2] = &protocol witness table for Never;
    v5[3] = sub_100013198(&qword_1000EEDE8, (uint64_t (*)(uint64_t))sub_100068E00, (uint64_t)&protocol conformance descriptor for TupleView<A>);
    v3 = type metadata accessor for List(a1, v5);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_1000EED70);
  }
}

void sub_100068E00(uint64_t a1)
{
  sub_1000076D8(a1, &qword_1000EED78, (uint64_t (*)(uint64_t))sub_100068E1C, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for TupleView);
}

void sub_100068E1C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t TupleTypeMetadata3;
  uint64_t v8;

  if (!qword_1000EED80)
  {
    sub_1000690A4(255, &qword_1000EED88, (uint64_t (*)(uint64_t))sub_100068ED0);
    v3 = v2;
    sub_1000690A4(255, &qword_1000EEDC8, (uint64_t (*)(uint64_t))sub_100068FC4);
    v5 = v4;
    sub_1000690A4(255, &qword_1000EEDD0, (uint64_t (*)(uint64_t))sub_1000690FC);
    TupleTypeMetadata3 = swift_getTupleTypeMetadata3(a1, v3, v5, v6, 0, 0);
    if (!v8)
      atomic_store(TupleTypeMetadata3, (unint64_t *)&qword_1000EED80);
  }
}

void sub_100068ED0(uint64_t a1)
{
  sub_1000076D8(a1, &qword_1000EED90, (uint64_t (*)(uint64_t))sub_100068EEC, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for TupleView);
}

void sub_100068EEC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t TupleTypeMetadata2;
  uint64_t v6;

  if (!qword_1000EED98)
  {
    sub_100068F58(255);
    v3 = v2;
    sub_100068FC4(255);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2(a1, v3, v4, 0, 0);
    if (!v6)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_1000EED98);
  }
}

void sub_100068F58(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_1000EEDA0)
  {
    sub_100069050(255, &qword_1000EEDA8, (uint64_t (*)(_QWORD, void *, void *))&type metadata accessor for TextField);
    v3 = type metadata accessor for ModifiedContent(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_1000EEDA0);
  }
}

void sub_100068FC4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;

  if (!qword_1000EEDB0)
  {
    sub_100069050(255, &qword_1000EEDB8, (uint64_t (*)(_QWORD, void *, void *))&type metadata accessor for Button);
    v3 = v2;
    sub_1000138C8(255, &qword_1000EEDC0, (uint64_t)&type metadata for Bool, (uint64_t (*)(_QWORD, uint64_t))&type metadata accessor for _EnvironmentKeyTransformModifier);
    v4 = type metadata accessor for ModifiedContent(a1, v3);
    if (!v5)
      atomic_store(v4, (unint64_t *)&qword_1000EEDB0);
  }
}

void sub_100069050(uint64_t a1, unint64_t *a2, uint64_t (*a3)(_QWORD, void *, void *))
{
  unint64_t v4;
  uint64_t v5;

  if (!*a2)
  {
    v4 = a3(0, &type metadata for Text, &protocol witness table for Text);
    if (!v5)
      atomic_store(v4, a2);
  }
}

void sub_1000690A4(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t))
{
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!*a2)
  {
    v5 = a3(255);
    v6 = type metadata accessor for Section(a1, &type metadata for Text, v5, &type metadata for Text);
    if (!v7)
      atomic_store(v6, a2);
  }
}

void sub_1000690FC(uint64_t a1)
{
  unint64_t v2;
  uint64_t v3;
  _QWORD v4[4];

  if (!qword_1000EEDD8)
  {
    v4[0] = &type metadata for Text;
    v4[1] = &type metadata for NotificationInstructionListView;
    v4[2] = &protocol witness table for Text;
    v4[3] = sub_100069174();
    v2 = type metadata accessor for NavigationLink(a1, v4);
    if (!v3)
      atomic_store(v2, (unint64_t *)&qword_1000EEDD8);
  }
}

unint64_t sub_100069174()
{
  unint64_t result;

  result = qword_1000EEDE0;
  if (!qword_1000EEDE0)
  {
    result = swift_getWitnessTable(&unk_1000B1F10, &type metadata for NotificationInstructionListView);
    atomic_store(result, (unint64_t *)&qword_1000EEDE0);
  }
  return result;
}

void sub_1000691B8(uint64_t a1)
{
  uint64_t v2;
  unint64_t OpaqueTypeMetadata2;
  uint64_t v4;
  _QWORD v5[4];

  if (!qword_1000EEDF0)
  {
    sub_100068D6C(255);
    v5[0] = v2;
    v5[1] = type metadata accessor for InsetGroupedListStyle(255);
    v5[2] = sub_100013198(&qword_1000EEDF8, (uint64_t (*)(uint64_t))sub_100068D6C, (uint64_t)&protocol conformance descriptor for List<A, B>);
    v5[3] = &protocol witness table for InsetGroupedListStyle;
    OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2(a1, v5, &opaque type descriptor for <<opaque return type of View.listStyle<A>(_:)>>, 0);
    if (!v4)
      atomic_store(OpaqueTypeMetadata2, (unint64_t *)&qword_1000EEDF0);
  }
}

void sub_100069268(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t OpaqueTypeConformance2;
  unint64_t OpaqueTypeMetadata2;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;

  if (!qword_1000EEE00)
  {
    sub_1000691B8(255);
    v3 = v2;
    sub_100068D6C(255);
    v8 = v4;
    v9 = type metadata accessor for InsetGroupedListStyle(255);
    v10 = sub_100013198(&qword_1000EEDF8, (uint64_t (*)(uint64_t))sub_100068D6C, (uint64_t)&protocol conformance descriptor for List<A, B>);
    v11 = &protocol witness table for InsetGroupedListStyle;
    OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v8, &opaque type descriptor for <<opaque return type of View.listStyle<A>(_:)>>, 1);
    v8 = v3;
    v9 = OpaqueTypeConformance2;
    OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2(a1, &v8, &opaque type descriptor for <<opaque return type of View.navigationTitle(_:)>>, 0);
    if (!v7)
      atomic_store(OpaqueTypeMetadata2, (unint64_t *)&qword_1000EEE00);
  }
}

void sub_100069344(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t OpaqueTypeConformance2;
  uint64_t v8;
  unint64_t OpaqueTypeMetadata2;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;

  if (!qword_1000EEE08)
  {
    sub_100069268(255);
    v3 = v2;
    sub_1000691B8(255);
    v5 = v4;
    sub_100068D6C(255);
    v11 = v6;
    v12 = type metadata accessor for InsetGroupedListStyle(255);
    v13 = sub_100013198(&qword_1000EEDF8, (uint64_t (*)(uint64_t))sub_100068D6C, (uint64_t)&protocol conformance descriptor for List<A, B>);
    v14 = &protocol witness table for InsetGroupedListStyle;
    OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v11, &opaque type descriptor for <<opaque return type of View.listStyle<A>(_:)>>, 1);
    v11 = v5;
    v12 = OpaqueTypeConformance2;
    v8 = swift_getOpaqueTypeConformance2(&v11, &opaque type descriptor for <<opaque return type of View.navigationTitle(_:)>>, 1);
    v11 = v3;
    v12 = v8;
    OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2(a1, &v11, &opaque type descriptor for <<opaque return type of View.navigationBarTitleDisplayMode(_:)>>, 0);
    if (!v10)
      atomic_store(OpaqueTypeMetadata2, (unint64_t *)&qword_1000EEE08);
  }
}

uint64_t sub_100069444@<X0>(char *a1@<X8>)
{
  uint64_t v1;

  return sub_100066ACC(*(_QWORD *)(v1 + 16), a1);
}

uint64_t sub_10006944C@<X0>(uint64_t a1@<X8>)
{
  return sub_100067EC8(a1);
}

void sub_100069474(void *a1, char a2)
{
  if ((a2 & 1) != 0)
    swift_errorRelease(a1);
  else

}

uint64_t sub_100069480@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_100067120(*(_QWORD *)(v1 + 16), a1);
}

uint64_t sub_100069488@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_100067860(*(_QWORD *)(v1 + 16), a1);
}

unint64_t sub_100069490()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;

  result = qword_1000EEE30;
  if (!qword_1000EEE30)
  {
    sub_100068FC4(255);
    v2 = v1;
    sub_1000694F8();
    sub_100069550();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v2);
    atomic_store(result, (unint64_t *)&qword_1000EEE30);
  }
  return result;
}

unint64_t sub_1000694F8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000EEE38;
  if (!qword_1000EEE38)
  {
    sub_100069050(255, &qword_1000EEDB8, (uint64_t (*)(_QWORD, void *, void *))&type metadata accessor for Button);
    result = swift_getWitnessTable(&protocol conformance descriptor for Button<A>, v1);
    atomic_store(result, (unint64_t *)&qword_1000EEE38);
  }
  return result;
}

unint64_t sub_100069550()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000EEE40;
  if (!qword_1000EEE40)
  {
    sub_1000138C8(255, &qword_1000EEDC0, (uint64_t)&type metadata for Bool, (uint64_t (*)(_QWORD, uint64_t))&type metadata accessor for _EnvironmentKeyTransformModifier);
    result = swift_getWitnessTable(&protocol conformance descriptor for _EnvironmentKeyTransformModifier<A>, v1);
    atomic_store(result, (unint64_t *)&qword_1000EEE40);
  }
  return result;
}

uint64_t sub_1000695B0()
{
  uint64_t v0;

  return sub_100067D8C(*(_QWORD *)(v0 + 16));
}

uint64_t sub_1000695BC()
{
  uint64_t v0;

  return sub_100067A24(v0 + 16, (uint64_t)&unk_1000E0480, (uint64_t)&unk_1000EEE58);
}

_QWORD *sub_1000695E4(_QWORD *a1)
{
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  id v9;

  v3 = (void *)a1[2];
  v2 = a1[3];
  v4 = a1[4];
  v5 = a1[7];
  v6 = a1[8];
  v7 = a1[10];
  v8 = a1[12];
  swift_bridgeObjectRetain(a1[1]);
  v9 = v3;
  sub_1000689A8(v2, v4);
  swift_retain(v8);
  swift_bridgeObjectRetain(v5);
  swift_retain(v6);
  swift_retain(v7);
  return a1;
}

uint64_t sub_100069678@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = EnvironmentValues.isEnabled.getter();
  *a1 = result & 1;
  return result;
}

uint64_t sub_1000696A4(unsigned __int8 *a1)
{
  return EnvironmentValues.isEnabled.setter(*a1);
}

uint64_t sub_1000696C8()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

_BYTE *sub_1000696D8(_BYTE *result)
{
  uint64_t v1;

  *result &= ~*(_BYTE *)(v1 + 16) & 1;
  return result;
}

uint64_t sub_1000696F4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;

  v4 = *(_QWORD *)(v1 + 16);
  v5 = *(_QWORD *)(v1 + 24);
  v6 = (_QWORD *)swift_task_alloc(dword_1000EEE54);
  *(_QWORD *)(v2 + 16) = v6;
  *v6 = v2;
  v6[1] = sub_1000557E8;
  return sub_100067B78(a1, v4, v5, v1 + 32);
}

uint64_t sub_100069764()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 24));

  sub_100068A04(*(_QWORD *)(v0 + 40), *(_QWORD *)(v0 + 48));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 72));
  swift_release(*(_QWORD *)(v0 + 80));
  swift_release(*(_QWORD *)(v0 + 96));
  swift_release(*(_QWORD *)(v0 + 112));
  return swift_deallocObject(v0, 120, 7);
}

uint64_t sub_1000697BC()
{
  uint64_t v0;

  return sub_100067A24(v0 + 16, (uint64_t)&unk_1000E04F8, (uint64_t)&unk_1000EEE70);
}

uint64_t sub_1000697E4()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_1000697F4(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v5;

  v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_10006983C()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 40));

  sub_100068A04(*(_QWORD *)(v0 + 56), *(_QWORD *)(v0 + 64));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 88));
  swift_release(*(_QWORD *)(v0 + 96));
  swift_release(*(_QWORD *)(v0 + 112));
  swift_release(*(_QWORD *)(v0 + 128));
  return swift_deallocObject(v0, 136, 7);
}

uint64_t sub_10006989C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;

  v4 = *(_QWORD *)(v1 + 16);
  v5 = *(_QWORD *)(v1 + 24);
  v6 = (_QWORD *)swift_task_alloc(dword_1000EEE6C);
  *(_QWORD *)(v2 + 16) = v6;
  *v6 = v2;
  v6[1] = sub_10001C2DC;
  return sub_1000675DC(a1, v4, v5, v1 + 32);
}

uint64_t destroy for TextFieldClearButton(_QWORD *a1)
{
  swift_release(*a1);
  swift_release(a1[1]);
  return swift_bridgeObjectRelease(a1[3]);
}

uint64_t *initializeWithCopy for TextFieldClearButton(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *a2;
  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  v5 = a2[3];
  a1[2] = a2[2];
  a1[3] = v5;
  swift_retain(v3);
  swift_retain(v4);
  swift_bridgeObjectRetain(v5);
  return a1;
}

uint64_t *assignWithCopy for TextFieldClearButton(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v4 = *a1;
  v5 = *a2;
  *a1 = *a2;
  swift_retain(v5);
  swift_release(v4);
  v6 = a2[1];
  v7 = a1[1];
  a1[1] = v6;
  swift_retain(v6);
  swift_release(v7);
  a1[2] = a2[2];
  v8 = a2[3];
  v9 = a1[3];
  a1[3] = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  return a1;
}

_QWORD *assignWithTake for TextFieldClearButton(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  swift_release(*a1);
  v4 = a1[1];
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_release(v4);
  v5 = *(_QWORD *)(a2 + 24);
  v6 = a1[3];
  a1[2] = *(_QWORD *)(a2 + 16);
  a1[3] = v5;
  swift_bridgeObjectRelease(v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for TextFieldClearButton(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 32))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for TextFieldClearButton(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 32) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 32) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for TextFieldClearButton()
{
  return &type metadata for TextFieldClearButton;
}

uint64_t sub_100069AE4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t OpaqueTypeConformance2;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;

  sub_100069344(255);
  v1 = v0;
  sub_100069268(255);
  v3 = v2;
  sub_1000691B8(255);
  v5 = v4;
  sub_100068D6C(255);
  v11 = v6;
  v12 = type metadata accessor for InsetGroupedListStyle(255);
  v13 = sub_100013198(&qword_1000EEDF8, (uint64_t (*)(uint64_t))sub_100068D6C, (uint64_t)&protocol conformance descriptor for List<A, B>);
  v14 = &protocol witness table for InsetGroupedListStyle;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v11, &opaque type descriptor for <<opaque return type of View.listStyle<A>(_:)>>, 1);
  v11 = v5;
  v12 = OpaqueTypeConformance2;
  v8 = swift_getOpaqueTypeConformance2(&v11, &opaque type descriptor for <<opaque return type of View.navigationTitle(_:)>>, 1);
  v11 = v3;
  v12 = v8;
  v9 = swift_getOpaqueTypeConformance2(&v11, &opaque type descriptor for <<opaque return type of View.navigationBarTitleDisplayMode(_:)>>, 1);
  v11 = v1;
  v12 = v9;
  return swift_getOpaqueTypeConformance2(&v11, &opaque type descriptor for <<opaque return type of View.alert(isPresented:content:)>>, 1);
}

uint64_t sub_100069BDC(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_1000C181C, 1);
}

void sub_100069BEC(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_1000EEE78)
  {
    sub_100069C50(255);
    v3 = type metadata accessor for _VariadicView.Tree(a1, &type metadata for _HStackLayout, v2, &protocol witness table for _HStackLayout);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_1000EEE78);
  }
}

void sub_100069C50(uint64_t a1)
{
  sub_1000076D8(a1, &qword_1000EEE80, (uint64_t (*)(uint64_t))sub_100069C6C, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for TupleView);
}

void sub_100069C6C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t TupleTypeMetadata2;
  uint64_t v6;

  if (!qword_1000EEE88)
  {
    sub_100069CF0(255);
    v3 = v2;
    sub_1000076D8(255, &qword_1000EEEA0, (uint64_t (*)(uint64_t))sub_100069D8C, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2(a1, v3, v4, 0, 0);
    if (!v6)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_1000EEE88);
  }
}

void sub_100069CF0(uint64_t a1)
{
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_1000EEE90)
  {
    v2 = sub_100069D48();
    v3 = type metadata accessor for _ViewModifier_Content(a1, &type metadata for TextFieldClearButton, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_1000EEE90);
  }
}

unint64_t sub_100069D48()
{
  unint64_t result;

  result = qword_1000EEE98;
  if (!qword_1000EEE98)
  {
    result = swift_getWitnessTable(&unk_1000B4658, &type metadata for TextFieldClearButton);
    atomic_store(result, (unint64_t *)&qword_1000EEE98);
  }
  return result;
}

void sub_100069D8C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;

  if (!qword_1000EEEA8)
  {
    sub_100069DEC(255);
    v3 = v2;
    v4 = sub_100069EB4();
    v5 = type metadata accessor for Button(a1, v3, v4);
    if (!v6)
      atomic_store(v5, (unint64_t *)&qword_1000EEEA8);
  }
}

void sub_100069DEC(uint64_t a1)
{
  unint64_t v2;
  uint64_t v3;

  if (!qword_1000EEEB0)
  {
    sub_100069E48(255);
    v2 = type metadata accessor for ModifiedContent(a1, &type metadata for Image);
    if (!v3)
      atomic_store(v2, (unint64_t *)&qword_1000EEEB0);
  }
}

void sub_100069E48(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_1000EEEB8)
  {
    sub_1000138C8(255, &qword_1000EEEC0, (uint64_t)&type metadata for Color, (uint64_t (*)(_QWORD, uint64_t))&type metadata accessor for Optional);
    v3 = type metadata accessor for _EnvironmentKeyWritingModifier(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_1000EEEB8);
  }
}

unint64_t sub_100069EB4()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;

  result = qword_1000EEEC8;
  if (!qword_1000EEEC8)
  {
    sub_100069DEC(255);
    v2 = v1;
    sub_100013198(&qword_1000EEED0, (uint64_t (*)(uint64_t))sub_100069E48, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v2);
    atomic_store(result, (unint64_t *)&qword_1000EEEC8);
  }
  return result;
}

uint64_t sub_100069F34()
{
  _QWORD *v0;

  swift_release(v0[2]);
  swift_release(v0[3]);
  swift_bridgeObjectRelease(v0[5]);
  return swift_deallocObject(v0, 48, 7);
}

uint64_t sub_100069F68()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD v5[2];
  __int128 v6;
  uint64_t v7;
  uint64_t v8;

  v1 = *(_QWORD *)(v0 + 32);
  v2 = *(_QWORD *)(v0 + 40);
  v6 = *(_OWORD *)(v0 + 16);
  v7 = v1;
  v8 = v2;
  v5[0] = 0;
  v5[1] = 0xE000000000000000;
  sub_1000138C8(0, &qword_1000EEED8, (uint64_t)&type metadata for String, (uint64_t (*)(_QWORD, uint64_t))&type metadata accessor for Binding);
  return Binding.wrappedValue.setter(v5, v3);
}

uint64_t sub_100069FD0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_1000076D8(0, &qword_1000EEEA0, (uint64_t (*)(uint64_t))sub_100069D8C, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10006A02C(uint64_t a1)
{
  uint64_t v2;

  sub_1000076D8(0, &qword_1000EEEA0, (uint64_t (*)(uint64_t))sub_100069D8C, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_10006A080@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = EnvironmentValues.foregroundColor.getter();
  *a1 = result;
  return result;
}

uint64_t sub_10006A0A8(_QWORD *a1)
{
  uint64_t v1;

  v1 = swift_retain(*a1);
  return EnvironmentValues.foregroundColor.setter(v1);
}

uint64_t sub_10006A0D0()
{
  return sub_100013198(&qword_1000EEEE0, (uint64_t (*)(uint64_t))sub_10006A0FC, (uint64_t)&protocol conformance descriptor for HStack<A>);
}

void sub_10006A0FC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;

  if (!qword_1000EEEE8)
  {
    sub_100069C50(255);
    v3 = v2;
    v4 = sub_100013198((unint64_t *)&unk_1000EEEF0, (uint64_t (*)(uint64_t))sub_100069C50, (uint64_t)&protocol conformance descriptor for TupleView<A>);
    v5 = type metadata accessor for HStack(a1, v3, v4);
    if (!v6)
      atomic_store(v5, (unint64_t *)&qword_1000EEEE8);
  }
}

uint64_t sub_10006A1B0(uint64_t a1)
{
  uint64_t MetatypeMetadata;
  uint64_t v3;

  v3 = a1;
  MetatypeMetadata = swift_getMetatypeMetadata(a1);
  return String.init<A>(describing:)(&v3, MetatypeMetadata);
}

uint64_t sub_10006A2A4(void *a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  id v22;
  uint64_t v24;
  uint64_t v25;
  NSObject *v26;
  os_log_type_t v27;
  uint8_t *v28;
  uint64_t v29;
  uint64_t MetatypeMetadata;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t ObjectType;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v3 = v2;
  ObjectType = swift_getObjectType(v3);
  v6 = type metadata accessor for Logger(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v37 = (char *)&v34 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000076D8(0, &qword_1000ECE58, type metadata accessor for DeepLinkContentKind, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
  v10 = __chkstk_darwin(v9);
  v12 = (char *)&v34 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v14 = (char *)&v34 - v13;
  v15 = type metadata accessor for DeepLinkContentKind(0);
  v16 = *(_QWORD *)(v15 - 8);
  v17 = __chkstk_darwin(v15);
  v19 = (char *)&v34 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = *(_QWORD *)(v3 + OBJC_IVAR____TtC6Health13SceneDelegate_deepLinkHandler);
  if (v20)
  {
    *(_QWORD *)v19 = a1;
    v19[8] = a2;
    swift_storeEnumTagMultiPayload(v19, v15, 2);
    sub_100025C40((uint64_t)v19, (uint64_t)v14);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v14, 0, 1, v15);
    sub_10006B4A0((uint64_t)v14, (uint64_t)v12);
    v21 = v20 + OBJC_IVAR____TtC6Health18AppDeepLinkHandler_pendingDeepLink;
    swift_beginAccess(v20 + OBJC_IVAR____TtC6Health18AppDeepLinkHandler_pendingDeepLink, &v38, 33, 0);
    swift_retain(v20);
    v22 = a1;
    sub_100025C84((uint64_t)v12, v21);
    swift_endAccess(&v38);
    sub_100010D74();
    swift_release(v20);
    return sub_100024498((uint64_t)v19);
  }
  else
  {
    v24 = ObjectType;
    v35 = v6;
    v25 = static Logger.general.getter(v17);
    v26 = Logger.logObject.getter(v25);
    v27 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v26, v27))
    {
      v28 = (uint8_t *)swift_slowAlloc(12, -1);
      v29 = swift_slowAlloc(32, -1);
      v40 = v29;
      *(_DWORD *)v28 = 136446210;
      v38 = v24;
      MetatypeMetadata = swift_getMetatypeMetadata(v24);
      v31 = String.init<A>(describing:)(&v38, MetatypeMetadata);
      v33 = v32;
      v38 = sub_100012B20(v31, v32, &v40);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v38, &v39, v28 + 4, v28 + 12);
      swift_bridgeObjectRelease(v33);
      _os_log_impl((void *)&_mh_execute_header, v26, v27, "[%{public}s]: Unable to handleUserActivity: deepLinkHandler is nil", v28, 0xCu);
      swift_arrayDestroy(v29, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v29, -1, -1);
      swift_slowDealloc(v28, -1, -1);
    }

    return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v37, v35);
  }
}

uint64_t sub_10006A5B8(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  id v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *v25;
  os_log_type_t v26;
  uint8_t *v27;
  uint64_t v28;
  uint64_t MetatypeMetadata;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v34;
  uint64_t ObjectType;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;

  v2 = v1;
  ObjectType = swift_getObjectType(v2);
  v4 = type metadata accessor for Logger(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v34 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000076D8(0, &qword_1000ECE58, type metadata accessor for DeepLinkContentKind, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
  v9 = __chkstk_darwin(v8);
  v11 = (char *)&v34 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v13 = (char *)&v34 - v12;
  v14 = type metadata accessor for DeepLinkContentKind(0);
  v15 = *(_QWORD *)(v14 - 8);
  v16 = __chkstk_darwin(v14);
  v18 = (uint64_t *)((char *)&v34 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0));
  v19 = *(_QWORD *)(v2 + OBJC_IVAR____TtC6Health13SceneDelegate_deepLinkHandler);
  if (v19)
  {
    *v18 = a1;
    swift_storeEnumTagMultiPayload(v18, v14, 0);
    sub_100025C40((uint64_t)v18, (uint64_t)v13);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v13, 0, 1, v14);
    sub_10006B4A0((uint64_t)v13, (uint64_t)v11);
    v20 = v19 + OBJC_IVAR____TtC6Health18AppDeepLinkHandler_pendingDeepLink;
    swift_beginAccess(v19 + OBJC_IVAR____TtC6Health18AppDeepLinkHandler_pendingDeepLink, &v36, 33, 0);
    swift_retain(v19);
    v21 = a1;
    sub_100025C84((uint64_t)v11, v20);
    swift_endAccess(&v36);
    v22 = sub_100010D74();
    swift_release(v19);
    sub_100024498((uint64_t)v18);
  }
  else
  {
    v34 = v4;
    v23 = ObjectType;
    v24 = static Logger.general.getter(v16);
    v25 = Logger.logObject.getter(v24);
    v26 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v25, v26))
    {
      v27 = (uint8_t *)swift_slowAlloc(12, -1);
      v28 = swift_slowAlloc(32, -1);
      v38 = v28;
      *(_DWORD *)v27 = 136446210;
      v36 = v23;
      MetatypeMetadata = swift_getMetatypeMetadata(v23);
      v30 = String.init<A>(describing:)(&v36, MetatypeMetadata);
      v32 = v31;
      v36 = sub_100012B20(v30, v31, &v38);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v36, &v37, v27 + 4, v27 + 12);
      swift_bridgeObjectRelease(v32);
      _os_log_impl((void *)&_mh_execute_header, v25, v26, "[%{public}s]: Unable to performShortcutItem: deepLinkHandler is nil", v27, 0xCu);
      swift_arrayDestroy(v28, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v28, -1, -1);
      swift_slowDealloc(v27, -1, -1);
    }

    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v34);
    v22 = 0;
  }
  return v22 & 1;
}

void *sub_10006A9D8(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t ObjectType;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  id v12;
  void *v13;
  id v14;
  NSObject *v15;
  os_log_type_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t MetatypeMetadata;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  id v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t (*v31)(char *, uint64_t);
  uint64_t v32;
  uint64_t v33;
  uint64_t inited;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  unint64_t v38;
  Class isa;
  uint64_t v40;
  NSObject *v41;
  os_log_type_t v42;
  uint8_t *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  id v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59[2];

  v2 = v1;
  ObjectType = swift_getObjectType(v1);
  v5 = type metadata accessor for Logger(0);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = __chkstk_darwin(v5);
  v9 = (char *)&v52 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v11 = (char *)&v52 - v10;
  v12 = objc_msgSend(a1, "userActivity");
  v13 = v12;
  if (v12)
  {
    v55 = ObjectType;
    static Logger.general.getter(v12);
    v14 = v13;
    v15 = Logger.logObject.getter(v14);
    v16 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v15, v16))
    {
      v17 = swift_slowAlloc(22, -1);
      v56 = v14;
      v18 = v17;
      v52 = swift_slowAlloc(64, -1);
      v59[0] = v52;
      *(_DWORD *)v18 = 136446466;
      v57 = v55;
      MetatypeMetadata = swift_getMetatypeMetadata(v55);
      v54 = v5;
      v20 = String.init<A>(describing:)(&v57, MetatypeMetadata);
      v53 = v9;
      v22 = v21;
      v57 = sub_100012B20(v20, v21, v59);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v57, &v58, v18 + 4, v18 + 12);
      swift_bridgeObjectRelease(v22);
      *(_WORD *)(v18 + 12) = 2080;
      v57 = (uint64_t)v56;
      v23 = sub_100006D10(0, &qword_1000EE800, NSUserActivity_ptr);
      v24 = v56;
      v25 = String.init<A>(reflecting:)(&v57, v23);
      v27 = v26;
      v57 = sub_100012B20(v25, v26, v59);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v57, &v58, v18 + 14, v18 + 22);

      v28 = v27;
      v9 = v53;
      v5 = v54;
      swift_bridgeObjectRelease(v28);
      _os_log_impl((void *)&_mh_execute_header, v15, v16, "[%{public}s]: saving user activity for stateRestoration: %s", (uint8_t *)v18, 0x16u);
      v29 = v52;
      swift_arrayDestroy(v52, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v29, -1, -1);
      v30 = v18;
      v14 = v56;
      swift_slowDealloc(v30, -1, -1);

    }
    else
    {

    }
    v31 = *(uint64_t (**)(char *, uint64_t))(v6 + 8);
    v32 = v31(v11, v5);
    v33 = *(_QWORD *)(v2 + OBJC_IVAR____TtC6Health13SceneDelegate_deepLinkHandler);
    if (v33)
    {
      sub_1000076D8(0, &qword_1000EDC08, (uint64_t (*)(uint64_t))sub_10003EF2C, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for _ContiguousArrayStorage);
      inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = xmmword_1000B11F0;
      v35 = swift_retain(v33);
      v57 = static HAUserActivity.dateSavedRestorationKey.getter(v35);
      v58 = v36;
      AnyHashable.init<A>(_:)((_QWORD *)(inited + 32), &v57, &type metadata for String, &protocol witness table for String);
      *(_QWORD *)(inited + 96) = type metadata accessor for Date(0);
      v37 = sub_100007E0C((_QWORD *)(inited + 72));
      Date.init()(v37);
      v38 = sub_10007C098(inited);
      isa = Dictionary._bridgeToObjectiveC()().super.isa;
      objc_msgSend(v14, "addUserInfoEntriesFromDictionary:", isa, swift_bridgeObjectRelease(v38).n128_f64[0]);
      swift_release(v33);

    }
    else
    {
      v40 = static Logger.general.getter(v32);
      v41 = Logger.logObject.getter(v40);
      v42 = static os_log_type_t.fault.getter();
      if (os_log_type_enabled(v41, v42))
      {
        v54 = v5;
        v43 = (uint8_t *)swift_slowAlloc(12, -1);
        v44 = swift_slowAlloc(32, -1);
        v59[0] = v44;
        *(_DWORD *)v43 = 136446210;
        v57 = v55;
        v45 = swift_getMetatypeMetadata(v55);
        v56 = v14;
        v46 = String.init<A>(describing:)(&v57, v45);
        v53 = v9;
        v48 = v47;
        v57 = sub_100012B20(v46, v47, v59);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v57, &v58, v43 + 4, v43 + 12);
        swift_bridgeObjectRelease(v48);
        _os_log_impl((void *)&_mh_execute_header, v41, v42, "[%{public}s]: Unable to createRestorationActivity: deepLinkHandler is nil", v43, 0xCu);
        swift_arrayDestroy(v44, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v44, -1, -1);
        swift_slowDealloc(v43, -1, -1);

        v49 = v53;
        v50 = v54;
      }
      else
      {

        v49 = v9;
        v50 = v5;
      }
      v31(v49, v50);
      return 0;
    }
  }
  return v13;
}

uint64_t sub_10006AF00(uint64_t a1, void *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t ObjectType;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  id v26;
  uint64_t v28;
  uint64_t v29;
  NSObject *v30;
  os_log_type_t v31;
  uint8_t *v32;
  uint64_t v33;
  uint64_t MetatypeMetadata;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  v3 = v2;
  v38 = a1;
  v39 = a2;
  ObjectType = swift_getObjectType(v2);
  v5 = type metadata accessor for Logger(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v38 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000076D8(0, &qword_1000ECE58, type metadata accessor for DeepLinkContentKind, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
  v10 = __chkstk_darwin(v9);
  v12 = (char *)&v38 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v14 = (char *)&v38 - v13;
  v15 = type metadata accessor for DeepLinkContentKind(0);
  v16 = *(_QWORD *)(v15 - 8);
  v17 = __chkstk_darwin(v15);
  v19 = (char *)&v38 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = *(_QWORD *)(v3 + OBJC_IVAR____TtC6Health13SceneDelegate_deepLinkHandler);
  if (v20)
  {
    sub_1000241AC(0);
    v22 = *(int *)(v21 + 48);
    v23 = type metadata accessor for URL(0);
    (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 16))(v19, v38, v23);
    v24 = v39;
    *(_QWORD *)&v19[v22] = v39;
    swift_storeEnumTagMultiPayload(v19, v15, 1);
    sub_100025C40((uint64_t)v19, (uint64_t)v14);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v14, 0, 1, v15);
    sub_10006B4A0((uint64_t)v14, (uint64_t)v12);
    v25 = v20 + OBJC_IVAR____TtC6Health18AppDeepLinkHandler_pendingDeepLink;
    swift_beginAccess(v20 + OBJC_IVAR____TtC6Health18AppDeepLinkHandler_pendingDeepLink, &v40, 33, 0);
    v26 = v24;
    swift_retain(v20);
    sub_100025C84((uint64_t)v12, v25);
    swift_endAccess(&v40);
    sub_100010D74();
    swift_release(v20);
    return sub_100024498((uint64_t)v19);
  }
  else
  {
    v28 = ObjectType;
    v39 = (void *)v5;
    v29 = static Logger.general.getter(v17);
    v30 = Logger.logObject.getter(v29);
    v31 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v30, v31))
    {
      v32 = (uint8_t *)swift_slowAlloc(12, -1);
      v33 = swift_slowAlloc(32, -1);
      v42 = v33;
      *(_DWORD *)v32 = 136446210;
      v40 = v28;
      MetatypeMetadata = swift_getMetatypeMetadata(v28);
      v35 = String.init<A>(describing:)(&v40, MetatypeMetadata);
      v37 = v36;
      v40 = sub_100012B20(v35, v36, &v42);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v40, &v41, v32 + 4, v32 + 12);
      swift_bridgeObjectRelease(v37);
      _os_log_impl((void *)&_mh_execute_header, v30, v31, "[%{public}s]: Unable to open URL: deepLinkHandler is nil", v32, 0xCu);
      swift_arrayDestroy(v33, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v33, -1, -1);
      swift_slowDealloc(v32, -1, -1);
    }

    return (*(uint64_t (**)(char *, void *))(v6 + 8))(v8, v39);
  }
}

id sub_10006B2CC()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for SceneDelegate();
  return objc_msgSendSuper2(&v2, "dealloc");
}

id UIApplication.application.getter()
{
  void *v0;

  return v0;
}

uint64_t sub_10006B360@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;

  v3 = *a1;
  KeyPath = swift_getKeyPath(&unk_1000B46F8);
  v5 = swift_getKeyPath(&unk_1000B4720);
  static Published.subscript.getter(&v7, v3, KeyPath, v5);
  swift_release(KeyPath);
  result = swift_release(v5);
  *a2 = v7;
  return result;
}

uint64_t sub_10006B3DC(char *a1, uint64_t *a2)
{
  char v2;
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  char v7;

  v2 = *a1;
  v3 = *a2;
  KeyPath = swift_getKeyPath(&unk_1000B46F8);
  v5 = swift_getKeyPath(&unk_1000B4720);
  v7 = v2;
  swift_retain(v3);
  return static Published.subscript.setter(&v7, v3, KeyPath, v5);
}

void sub_10006B44C(uint64_t a1, unint64_t *a2, unint64_t *a3, _QWORD *a4)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;

  if (!*a2)
  {
    v6 = sub_100006D10(255, a3, a4);
    v7 = type metadata accessor for Optional(a1, v6);
    if (!v8)
      atomic_store(v7, a2);
  }
}

uint64_t sub_10006B4A0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_1000076D8(0, &qword_1000ECE58, type metadata accessor for DeepLinkContentKind, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void sub_10006B4FC(_QWORD *a1@<X8>)
{
  void *v2;
  id v3;
  void *v4;
  unsigned int v5;
  id v6;
  void *v7;
  id v8;
  unsigned int v9;
  uint64_t (*v10)(uint64_t);
  id v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t *v15;
  void *v16;
  uint64_t v17;

  v2 = (void *)objc_opt_self(_HKBehavior);
  v3 = objc_msgSend(v2, "sharedBehavior");
  if (!v3)
  {
    __break(1u);
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  v4 = v3;
  v5 = objc_msgSend(v3, "isiPad");

  if (!v5)
    goto LABEL_7;
  v6 = objc_msgSend(v2, "sharedBehavior");
  if (!v6)
    goto LABEL_10;
  v7 = v6;
  v8 = objc_msgSend(v6, "features");

  if (v8)
  {
    v9 = objc_msgSend(v8, "stanley");

    if (v9)
    {
      v10 = (uint64_t (*)(uint64_t))type metadata accessor for MainSplitViewController;
      v11 = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for MainSplitViewController()), "init");
      v12 = sub_100013198(&qword_1000EF130, (uint64_t (*)(uint64_t))type metadata accessor for MainSplitViewController, (uint64_t)&unk_1000B2DEC);
      v13 = sub_100013198(&qword_1000EF138, (uint64_t (*)(uint64_t))type metadata accessor for MainSplitViewController, (uint64_t)&unk_1000B2F0C);
      v14 = sub_100013198((unint64_t *)&unk_1000EF140, (uint64_t (*)(uint64_t))type metadata accessor for MainSplitViewController, (uint64_t)&unk_1000B2F34);
      v15 = (unint64_t *)&unk_1000EE3E8;
      v16 = &unk_1000B2E14;
LABEL_8:
      v17 = sub_100013198(v15, v10, (uint64_t)v16);
      *a1 = v11;
      a1[1] = v12;
      a1[2] = v13;
      a1[3] = v14;
      a1[4] = v17;
      return;
    }
LABEL_7:
    v10 = type metadata accessor for MainTabBarController;
    v11 = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for MainTabBarController(0)), "init");
    v12 = sub_100013198(&qword_1000EF110, type metadata accessor for MainTabBarController, (uint64_t)&unk_1000B246C);
    v13 = sub_100013198(&qword_1000EF118, type metadata accessor for MainTabBarController, (uint64_t)&unk_1000B2568);
    v14 = sub_100013198((unint64_t *)&unk_1000EF120, type metadata accessor for MainTabBarController, (uint64_t)&unk_1000B2590);
    v15 = (unint64_t *)&qword_1000ED9A0;
    v16 = &unk_1000B2494;
    goto LABEL_8;
  }
LABEL_11:
  __break(1u);
}

uint64_t sub_10006B6F8()
{
  uint64_t v0;

  swift_weakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10006B72C()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10006B758()
{
  uint64_t v0;

  return sub_100044B28(*(_QWORD *)(v0 + 16), *(void **)(v0 + 24));
}

uint64_t sub_10006B760()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10006B784(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t ObjectType;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  id v10;
  NSObject *v11;
  os_log_type_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t MetatypeMetadata;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  id v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  _QWORD v26[2];
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v2 = v1;
  ObjectType = swift_getObjectType(v1);
  v5 = type metadata accessor for Logger(0);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = __chkstk_darwin(v5);
  v9 = (char *)v26 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  static Logger.general.getter(v7);
  v10 = a1;
  v11 = Logger.logObject.getter(v10);
  v12 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v11, v12))
  {
    v13 = swift_slowAlloc(22, -1);
    v26[0] = v5;
    v14 = v13;
    v15 = swift_slowAlloc(64, -1);
    v27 = v15;
    v28 = ObjectType;
    *(_DWORD *)v14 = 136446466;
    MetatypeMetadata = swift_getMetatypeMetadata(ObjectType);
    v26[1] = v2;
    v17 = String.init<A>(describing:)(&v28, MetatypeMetadata);
    v19 = v18;
    v28 = sub_100012B20(v17, v18, &v27);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v28, &v29, v14 + 4, v14 + 12);
    swift_bridgeObjectRelease(v19);
    *(_WORD *)(v14 + 12) = 2080;
    v28 = (uint64_t)v10;
    v20 = sub_100006D10(0, &qword_1000EE800, NSUserActivity_ptr);
    v21 = v10;
    v22 = String.init<A>(reflecting:)(&v28, v20);
    v24 = v23;
    v28 = sub_100012B20(v22, v23, &v27);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v28, &v29, v14 + 14, v14 + 22);

    swift_bridgeObjectRelease(v24);
    _os_log_impl((void *)&_mh_execute_header, v11, v12, "[%{public}s]: continuing userActivity: %s", (uint8_t *)v14, 0x16u);
    swift_arrayDestroy(v15, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v15, -1, -1);
    swift_slowDealloc(v14, -1, -1);

    (*(void (**)(char *, _QWORD))(v6 + 8))(v9, v26[0]);
  }
  else
  {

    (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v5);
  }
  return sub_10006A2A4(v10, 1);
}

void sub_10006B9E0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  id i;
  int64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD v27[5];
  void *v28;

  v1 = a1;
  if ((a1 & 0xC000000000000001) != 0)
  {
    if (a1 < 0)
      v2 = a1;
    else
      v2 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v3 = __CocoaSet.makeIterator()(v2);
    v4 = sub_100006D10(0, (unint64_t *)&unk_1000EF170, UIScene_ptr);
    v5 = sub_10005E4DC();
    v6 = Set.Iterator.init(_cocoa:)(v27, v3, v4, v5);
    v1 = v27[0];
    v25 = v27[1];
    v7 = v27[2];
    v8 = v27[3];
    v9 = v27[4];
  }
  else
  {
    v10 = -1 << *(_BYTE *)(a1 + 32);
    v25 = a1 + 56;
    v7 = ~v10;
    v11 = -v10;
    if (v11 < 64)
      v12 = ~(-1 << v11);
    else
      v12 = -1;
    v9 = v12 & *(_QWORD *)(a1 + 56);
    v6 = (_QWORD *)swift_bridgeObjectRetain(a1);
    v8 = 0;
  }
  v24 = v7;
  v13 = (unint64_t)(v7 + 64) >> 6;
  if (v1 < 0)
    goto LABEL_13;
LABEL_11:
  if (v9)
  {
    v14 = (v9 - 1) & v9;
    v15 = __clz(__rbit64(v9)) | (v8 << 6);
    v16 = v8;
    goto LABEL_32;
  }
  v21 = v8 + 1;
  if (!__OFADD__(v8, 1))
  {
    if (v21 < v13)
    {
      v22 = *(_QWORD *)(v25 + 8 * v21);
      v16 = v8 + 1;
      if (v22)
        goto LABEL_31;
      v16 = v8 + 2;
      if (v8 + 2 >= v13)
        goto LABEL_36;
      v22 = *(_QWORD *)(v25 + 8 * v16);
      if (v22)
        goto LABEL_31;
      v16 = v8 + 3;
      if (v8 + 3 >= v13)
        goto LABEL_36;
      v22 = *(_QWORD *)(v25 + 8 * v16);
      if (v22)
        goto LABEL_31;
      v16 = v8 + 4;
      if (v8 + 4 >= v13)
        goto LABEL_36;
      v22 = *(_QWORD *)(v25 + 8 * v16);
      if (v22)
      {
LABEL_31:
        v14 = (v22 - 1) & v22;
        v15 = __clz(__rbit64(v22)) + (v16 << 6);
LABEL_32:
        for (i = *(id *)(*(_QWORD *)(v1 + 48) + 8 * v15); i; v14 = v9)
        {
          if (!objc_msgSend(i, "activationState", v24))
            break;

          v8 = v16;
          v9 = v14;
          if ((v1 & 0x8000000000000000) == 0)
            goto LABEL_11;
LABEL_13:
          v17 = __CocoaSet.Iterator.next()(v6);
          if (!v17)
            break;
          v18 = v17;
          v26 = v17;
          v19 = sub_100006D10(0, (unint64_t *)&unk_1000EF170, UIScene_ptr);
          swift_unknownObjectRetain(v18);
          swift_dynamicCast(&v28, &v26, (char *)&type metadata for Swift.AnyObject + 8, v19, 7);
          i = v28;
          swift_unknownObjectRelease(v18);
          v16 = v8;
        }
        goto LABEL_36;
      }
      v16 = v8 + 5;
      if (v8 + 5 < v13)
      {
        v22 = *(_QWORD *)(v25 + 8 * v16);
        if (!v22)
        {
          v23 = v8 + 6;
          while (v13 != v23)
          {
            v22 = *(_QWORD *)(v25 + 8 * v23++);
            if (v22)
            {
              v16 = v23 - 1;
              goto LABEL_31;
            }
          }
          goto LABEL_36;
        }
        goto LABEL_31;
      }
    }
LABEL_36:
    sub_10005E5A4(v1);
    return;
  }
  __break(1u);
}

void sub_10006BC9C(uint64_t a1@<X8>)
{
  void *v1;
  id v3;
  void *v4;
  unsigned int v5;
  id v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  void *v10;
  id v11;
  uint64_t v12;
  void *v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t *v22;
  uint64_t (*v23)(uint64_t);
  void *v24;
  uint64_t v25;
  void *v26;
  id v27;
  uint64_t v28;
  id v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;

  v3 = objc_msgSend((id)objc_opt_self(_HKBehavior), "sharedBehavior");
  if (v3)
  {
    v4 = v3;
    v5 = objc_msgSend(v3, "isiPad");

    v6 = objc_msgSend(v1, "connectedScenes");
    v7 = sub_100006D10(0, (unint64_t *)&unk_1000EF170, UIScene_ptr);
    v8 = sub_10005E4DC();
    v9 = static Set._unconditionallyBridgeFromObjectiveC(_:)(v6, v7, v8);

    sub_10006B9E0(v9);
    v11 = v10;
    swift_bridgeObjectRelease(v9);
    if (v5)
    {
      if (!v11)
        goto LABEL_35;
      v12 = objc_opt_self(UIWindowScene);
      v13 = (void *)swift_dynamicCastObjCClass(v11, v12);
      if (v13)
      {
        v14 = objc_msgSend(v13, "windows");

        v15 = sub_100006D10(0, &qword_1000EF180, UIWindow_ptr);
        v16 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v14, v15);

        if ((unint64_t)v16 >> 62)
        {
          if (v16 < 0)
            v33 = v16;
          else
            v33 = v16 & 0xFFFFFFFFFFFFFF8;
          swift_bridgeObjectRetain(v16);
          v34 = _CocoaArrayWrapper.endIndex.getter(v33);
          swift_bridgeObjectRelease(v16);
          if (v34)
            goto LABEL_7;
        }
        else if (*(_QWORD *)((v16 & 0xFFFFFFFFFFFFF8) + 0x10))
        {
LABEL_7:
          if ((v16 & 0xC000000000000001) != 0)
          {
            v17 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v16);
LABEL_10:
            v18 = v17;
            swift_bridgeObjectRelease(v16);
            v11 = objc_msgSend(v18, "rootViewController");

            if (v11)
            {
              v19 = type metadata accessor for MainSplitViewController();
              v20 = swift_dynamicCastClass(v11, v19);
              if (v20)
              {
                v21 = v20;
                *(_QWORD *)(a1 + 24) = v19;
                v22 = (unint64_t *)&unk_1000EF190;
                v23 = (uint64_t (*)(uint64_t))type metadata accessor for MainSplitViewController;
                v24 = &unk_1000B2DD0;
LABEL_23:
                *(_QWORD *)(a1 + 32) = sub_100013198(v22, v23, (uint64_t)v24);
                *(_QWORD *)a1 = v21;
                return;
              }
              goto LABEL_24;
            }
LABEL_35:
            *(_QWORD *)(a1 + 32) = 0;
            *(_OWORD *)a1 = 0u;
            *(_OWORD *)(a1 + 16) = 0u;
            return;
          }
          if (*(_QWORD *)((v16 & 0xFFFFFFFFFFFFF8) + 0x10))
          {
            v17 = *(id *)(v16 + 32);
            goto LABEL_10;
          }
          __break(1u);
          goto LABEL_38;
        }
LABEL_34:
        swift_bridgeObjectRelease(v16);
        goto LABEL_35;
      }
LABEL_24:

      goto LABEL_35;
    }
    if (!v11)
      goto LABEL_35;
    v25 = objc_opt_self(UIWindowScene);
    v26 = (void *)swift_dynamicCastObjCClass(v11, v25);
    if (!v26)
      goto LABEL_24;
    v27 = objc_msgSend(v26, "windows");

    v28 = sub_100006D10(0, &qword_1000EF180, UIWindow_ptr);
    v16 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v27, v28);

    if ((unint64_t)v16 >> 62)
    {
      if (v16 < 0)
        v35 = v16;
      else
        v35 = v16 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v16);
      v36 = _CocoaArrayWrapper.endIndex.getter(v35);
      swift_bridgeObjectRelease(v16);
      if (!v36)
        goto LABEL_34;
    }
    else if (!*(_QWORD *)((v16 & 0xFFFFFFFFFFFFF8) + 0x10))
    {
      goto LABEL_34;
    }
    if ((v16 & 0xC000000000000001) != 0)
    {
LABEL_38:
      v29 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v16);
LABEL_20:
      v30 = v29;
      swift_bridgeObjectRelease(v16);
      v11 = objc_msgSend(v30, "rootViewController");

      if (v11)
      {
        v31 = type metadata accessor for MainTabBarController(0);
        v32 = swift_dynamicCastClass(v11, v31);
        if (v32)
        {
          v21 = v32;
          *(_QWORD *)(a1 + 24) = v31;
          v22 = (unint64_t *)&unk_1000EF188;
          v23 = type metadata accessor for MainTabBarController;
          v24 = &unk_1000B24FC;
          goto LABEL_23;
        }
        goto LABEL_24;
      }
      goto LABEL_35;
    }
    if (*(_QWORD *)((v16 & 0xFFFFFFFFFFFFF8) + 0x10))
    {
      v29 = *(id *)(v16 + 32);
      goto LABEL_20;
    }
    __break(1u);
  }
  __break(1u);
}

uint64_t sub_10006C104(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t result;
  uint64_t v14;
  char *v15;
  char v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  NSObject *v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  NSObject *v47;
  os_log_type_t v48;
  uint8_t *v49;
  uint64_t v50;
  uint64_t v51;
  _UNKNOWN **v52;
  char v53;
  uint64_t v54;
  char *v55;
  int v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  _BYTE v62[32];
  uint64_t v63;
  __int128 v64;
  uint64_t v65;
  __int128 v66;
  __int128 v67;
  _UNKNOWN **v68;
  __int128 v69;
  ValueMetadata *v70;
  _UNKNOWN **v71;

  v8 = type metadata accessor for Logger(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = __chkstk_darwin(v8);
  v12 = (char *)&v54 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = __chkstk_darwin(v10);
  v15 = (char *)&v54 - v14;
  if (!a3)
  {
    __break(1u);
    goto LABEL_22;
  }
  swift_bridgeObjectRetain(a3);
  v16 = sub_10003D308(a2, a3);
  v60 = v9;
  if (v16 == 43)
  {
    v59 = a4;
    v17 = v12;
    v18 = v8;
    v19 = v15;
    v20 = a1;
    swift_bridgeObjectRetain(a3);
    v21 = a2;
    sub_10002CCE8(a2, a3);
    if (v22)
    {
      v26 = v22;
      v27 = v23;
      v28 = v24;
      v29 = v25;
      *((_QWORD *)&v67 + 1) = &type metadata for PluginPPT;
      v68 = &off_1000DD660;
      v30 = (_QWORD *)swift_allocObject(&unk_1000E0748, 48, 7);
      *(_QWORD *)&v66 = v30;
      v30[2] = v26;
      v30[3] = v27;
      v30[4] = v28;
      v30[5] = v29;
    }
    else
    {
      v68 = 0;
      v66 = 0u;
      v67 = 0u;
    }
    a2 = v21;
    a1 = v20;
    v15 = v19;
    v8 = v18;
    v12 = v17;
    a4 = v59;
    v9 = v60;
  }
  else
  {
    v70 = &type metadata for HealthAppPPT;
    v71 = &off_1000DDDF0;
    LOBYTE(v69) = v16;
    sub_10001AF7C(&v69, (uint64_t)&v66);
  }
  sub_10006C6DC((uint64_t)&v66, (uint64_t)&v69);
  sub_10006C7C8((uint64_t)&v69, (uint64_t)&v64);
  if (!v65)
  {
    v45 = sub_10006C80C((uint64_t)&v64);
    static Logger.general.getter(v45);
    v46 = swift_bridgeObjectRetain_n(a3, 2);
    v47 = Logger.logObject.getter(v46);
    v48 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v47, v48))
    {
      v49 = (uint8_t *)swift_slowAlloc(12, -1);
      v50 = swift_slowAlloc(32, -1);
      *(_QWORD *)&v66 = v50;
      *(_DWORD *)v49 = 136315138;
      swift_bridgeObjectRetain(a3);
      *(_QWORD *)&v64 = sub_100012B20(a2, a3, (uint64_t *)&v66);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v64, (char *)&v64 + 8, v49 + 4, v49 + 12);
      swift_bridgeObjectRelease_n(a3, 3);
      _os_log_impl((void *)&_mh_execute_header, v47, v48, "No test configured by name %s", v49, 0xCu);
      swift_arrayDestroy(v50, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v50, -1, -1);
      swift_slowDealloc(v49, -1, -1);

      (*(void (**)(char *, uint64_t))(v60 + 8))(v12, v8);
    }
    else
    {
      swift_bridgeObjectRelease_n(a3, 2);

      (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v8);
    }
    sub_10006C80C((uint64_t)&v69);
    v53 = 0;
    return v53 & 1;
  }
  v31 = sub_10001AF7C(&v64, (uint64_t)&v66);
  static Logger.general.getter(v31);
  sub_100028F08((uint64_t)&v66, (uint64_t)&v64);
  v32 = swift_bridgeObjectRetain_n(a4, 2);
  v33 = Logger.logObject.getter(v32);
  v34 = static os_log_type_t.default.getter();
  if (!os_log_type_enabled(v33, (os_log_type_t)v34))
  {
    _s6Health23OpenSleepScheduleIntentVwxx_0(&v64);

    swift_bridgeObjectRelease_n(a4, 2);
    (*(void (**)(char *, uint64_t))(v9 + 8))(v15, v8);
LABEL_15:
    v51 = *((_QWORD *)&v67 + 1);
    v52 = v68;
    result = (uint64_t)sub_100012E04(&v66, *((uint64_t *)&v67 + 1));
    if (a1)
    {
      if (a4)
      {
        v53 = ((uint64_t (*)(uint64_t, uint64_t, unint64_t, uint64_t, uint64_t, _UNKNOWN **))v52[2])(a1, a2, a3, a4, v51, v52);
        sub_10006C80C((uint64_t)&v69);
        _s6Health23OpenSleepScheduleIntentVwxx_0(&v66);
        return v53 & 1;
      }
      goto LABEL_23;
    }
LABEL_22:
    __break(1u);
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  v56 = v34;
  v55 = v15;
  v57 = a1;
  v58 = a2;
  v59 = v8;
  v35 = swift_slowAlloc(22, -1);
  v36 = swift_slowAlloc(64, -1);
  v63 = v36;
  *(_DWORD *)v35 = 136315394;
  sub_100028F08((uint64_t)&v64, (uint64_t)&v61);
  v37 = sub_10006C774();
  v38 = String.init<A>(describing:)(&v61, v37);
  v40 = v39;
  v61 = sub_100012B20(v38, v39, &v63);
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v61, v62, v35 + 4, v35 + 12);
  swift_bridgeObjectRelease(v40);
  result = _s6Health23OpenSleepScheduleIntentVwxx_0(&v64);
  *(_WORD *)(v35 + 12) = 2080;
  if (a4)
  {
    v41 = swift_bridgeObjectRetain(a4);
    v42 = Dictionary.description.getter(v41, &type metadata for AnyHashable);
    v44 = v43;
    swift_bridgeObjectRelease(a4);
    v61 = sub_100012B20(v42, v44, &v63);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v61, v62, v35 + 14, v35 + 22);
    swift_bridgeObjectRelease_n(a4, 2);
    swift_bridgeObjectRelease(v44);
    _os_log_impl((void *)&_mh_execute_header, v33, (os_log_type_t)v56, "Executing Test %s with options %s", (uint8_t *)v35, 0x16u);
    swift_arrayDestroy(v36, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v36, -1, -1);
    swift_slowDealloc(v35, -1, -1);

    (*(void (**)(char *, uint64_t))(v60 + 8))(v55, v59);
    a2 = v58;
    a1 = v57;
    goto LABEL_15;
  }
LABEL_24:
  __break(1u);
  return result;
}

uint64_t sub_10006C6DC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_10006C720(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void sub_10006C720(uint64_t a1)
{
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_1000EF160)
  {
    v2 = sub_10006C774();
    v3 = type metadata accessor for Optional(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_1000EF160);
  }
}

unint64_t sub_10006C774()
{
  unint64_t result;
  ProtocolDescriptor *v1;

  result = qword_1000EF168;
  if (!qword_1000EF168)
  {
    v1 = &protocol descriptor for PerformanceTestRunning;
    result = swift_getExistentialTypeMetadata(1, 0, 1, &v1);
    atomic_store(result, (unint64_t *)&qword_1000EF168);
  }
  return result;
}

uint64_t sub_10006C7C8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_10006C720(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10006C80C(uint64_t a1)
{
  uint64_t v2;

  sub_10006C720(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_10006C848()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 40));
  return swift_deallocObject(v0, 48, 7);
}

uint64_t type metadata accessor for FeatureAvailabilityDataSource(uint64_t a1)
{
  uint64_t result;

  result = qword_1000EF1A0;
  if (!qword_1000EF1A0)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for FeatureAvailabilityDataSource);
  return result;
}

uint64_t sub_10006C8B0(uint64_t a1)
{
  _BYTE v2[8];

  return swift_initClassMetadata2(a1, 0, 0, v2, a1 + qword_1000F10A0);
}

uint64_t sub_10006C8EC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  id v23;
  void (*v24)(_BYTE *, _QWORD);
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  char *v32;
  char *v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  void (*v50)(char *, uint64_t);
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  void *v54;
  void *v55;
  Swift::String v56;
  Swift::String v57;
  uint64_t v58;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  void (*v70)(char *, uint64_t);
  uint64_t v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  __int128 v75;
  uint64_t v76;
  _BYTE v77[32];
  uint64_t v78;
  unint64_t v79;
  uint64_t v80;
  void *v81;

  v0 = type metadata accessor for SectionedDataSourceContainerViewType(0);
  v73 = *(_QWORD *)(v0 - 8);
  v74 = v0;
  __chkstk_darwin(v0);
  v72 = (char *)&v60 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000076D8(0, &qword_1000ECA60, (uint64_t (*)(uint64_t))&type metadata accessor for UIBackgroundConfiguration, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
  __chkstk_darwin(v2);
  v69 = (char *)&v60 - v3;
  v68 = type metadata accessor for CellDeselectionBehavior(0);
  v67 = *(_QWORD *)(v68 - 8);
  __chkstk_darwin(v68);
  v66 = (char *)&v60 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000076D8(0, &qword_1000ECCD8, (uint64_t (*)(uint64_t))&type metadata accessor for UICellAccessory.LayoutDimension, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
  __chkstk_darwin(v5);
  v7 = (char *)&v60 - v6;
  v65 = type metadata accessor for UICellAccessory.DisclosureIndicatorOptions(0);
  v64 = *(_QWORD *)(v65 - 8);
  __chkstk_darwin(v65);
  v9 = (char *)&v60 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for UICellAccessory.DisplayedState(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = (char *)&v60 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for UUID(0);
  v15 = *(_QWORD *)(v14 - 8);
  v60 = v14;
  __chkstk_darwin(v14);
  v17 = (char *)&v60 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v76 = type metadata accessor for ContentConfigurationItem(0);
  v71 = *(_QWORD *)(v76 - 8);
  v18 = __chkstk_darwin(v76);
  v63 = (char *)&v60 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = UUID.init()(v18);
  v62 = UUID.uuidString.getter(v20);
  v61 = v21;
  v70 = *(void (**)(char *, uint64_t))(v15 + 8);
  v70(v17, v14);
  v80 = type metadata accessor for UIListContentConfiguration(0);
  v81 = &protocol witness table for UIListContentConfiguration;
  v22 = sub_100007E0C(&v78);
  static UIListContentConfiguration.cell()(v22);
  UIListContentConfiguration.text.setter(0x2065727574616546, 0xED00006574617453);
  v23 = objc_msgSend((id)objc_opt_self(UIColor), "blackColor");
  v24 = (void (*)(_BYTE *, _QWORD))UIListContentConfiguration.textProperties.modify(v77);
  UIListContentConfiguration.TextProperties.color.setter(v23);
  v24(v77, 0);
  sub_1000076D8(0, &qword_1000ECCE0, (uint64_t (*)(uint64_t))&type metadata accessor for UICellAccessory, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for _ContiguousArrayStorage);
  v26 = v25;
  v27 = type metadata accessor for UICellAccessory(0);
  v28 = swift_allocObject(v26, ((*(unsigned __int8 *)(*(_QWORD *)(v27 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v27 - 8) + 80))+ *(_QWORD *)(*(_QWORD *)(v27 - 8) + 72), *(unsigned __int8 *)(*(_QWORD *)(v27 - 8) + 80) | 7);
  v75 = xmmword_1000B11F0;
  *(_OWORD *)(v28 + 16) = xmmword_1000B11F0;
  (*(void (**)(char *, _QWORD, uint64_t))(v11 + 104))(v13, enum case for UICellAccessory.DisplayedState.always(_:), v10);
  v29 = type metadata accessor for UICellAccessory.LayoutDimension(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v29 - 8) + 56))(v7, 1, 1, v29);
  UICellAccessory.DisclosureIndicatorOptions.init(isHidden:reservedLayoutWidth:tintColor:)(2, v7, 0);
  static UICellAccessory.disclosureIndicator(displayed:options:)(v13, v9);
  (*(void (**)(char *, uint64_t))(v64 + 8))(v9, v65);
  (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  v30 = v66;
  (*(void (**)(char *, _QWORD, uint64_t))(v67 + 104))(v66, enum case for CellDeselectionBehavior.default(_:), v68);
  v31 = type metadata accessor for UIBackgroundConfiguration(0);
  v32 = v69;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v31 - 8) + 56))(v69, 1, 1, v31);
  v33 = v72;
  (*(void (**)(char *, _QWORD, uint64_t))(v73 + 104))(v72, enum case for SectionedDataSourceContainerViewType.collectionView(_:), v74);
  v34 = v63;
  ContentConfigurationItem.init(uniqueIdentifier:contentConfiguration:cellAccessories:cellSelectionHandler:deselectionBehavior:backgroundConfiguration:updateContentConfigurationHandler:container:automationIdentifier:)(v62, v61, &v78, v28, sub_10006CF90, 0, v30, v32, 0, 0, v33, 0, 0);
  sub_1000076D8(0, &qword_1000ECA68, (uint64_t (*)(uint64_t))&type metadata accessor for ArrayDataSourceSection, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for _ContiguousArrayStorage);
  v36 = v35;
  v37 = type metadata accessor for ArrayDataSourceSection(0);
  v38 = swift_allocObject(v36, ((*(unsigned __int8 *)(*(_QWORD *)(v37 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v37 - 8) + 80))+ *(_QWORD *)(*(_QWORD *)(v37 - 8) + 72), *(unsigned __int8 *)(*(_QWORD *)(v37 - 8) + 80) | 7);
  *(_OWORD *)(v38 + 16) = v75;
  sub_1000076D8(0, (unint64_t *)&qword_1000ECA70, (uint64_t (*)(uint64_t))sub_100013434, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for _ContiguousArrayStorage);
  v40 = swift_allocObject(v39, 72, 7);
  *(_OWORD *)(v40 + 16) = v75;
  v41 = v76;
  *(_QWORD *)(v40 + 56) = v76;
  *(_QWORD *)(v40 + 64) = sub_100013198(&qword_1000ECA80, (uint64_t (*)(uint64_t))&type metadata accessor for ContentConfigurationItem, (uint64_t)&protocol conformance descriptor for ContentConfigurationItem);
  v42 = sub_100007E0C((_QWORD *)(v40 + 32));
  v43 = v71;
  v44 = (*(uint64_t (**)(_QWORD *, char *, uint64_t))(v71 + 16))(v42, v34, v41);
  v45 = UUID.init()(v44);
  v46 = UUID.uuidString.getter(v45);
  v48 = v47;
  v49 = v60;
  v50 = v70;
  v70(v17, v60);
  v51 = ArrayDataSourceSection.init(title:arrangedItems:identifier:)(0xD000000000000014, 0x80000001000BC5B0, v40, v46, v48);
  v78 = 0x3C53447961727241;
  v79 = 0xE800000000000000;
  v52 = UUID.init()(v51);
  v53 = UUID.uuidString.getter(v52);
  v55 = v54;
  v50(v17, v49);
  v56._countAndFlagsBits = v53;
  v56._object = v55;
  String.append(_:)(v56);
  swift_bridgeObjectRelease(v55);
  v57._countAndFlagsBits = 62;
  v57._object = (void *)0xE100000000000000;
  String.append(_:)(v57);
  v58 = ArrayDataSource.init(arrangedSections:identifier:)(v38, v78, v79);
  (*(void (**)(char *, uint64_t))(v43 + 8))(v34, v76);
  return v58;
}

void sub_10006CF90(void *a1)
{
  uint64_t v2;
  id v3;

  v2 = type metadata accessor for InternalSettingsFeatureStateListViewController(0);
  v3 = objc_msgSend(objc_allocWithZone((Class)swift_getObjCClassFromMetadata(v2)), "init");
  objc_msgSend(a1, "showViewController:sender:", v3, 0);

}

void sub_10006CFF0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_10006D020(a1, a2, a3, (uint64_t)"init(_:identifier:)", 19);
}

void sub_10006D008(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_10006D020(a1, a2, a3, (uint64_t)"init(arrangedSections:identifier:)", 34);
}

void sub_10006D020(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _swift_stdlib_reportUnimplementedInitializer("Health.FeatureAvailabilityDataSource", 36, a4, a5, 0);
  __break(1u);
}

uint64_t sub_10006D048()
{
  return type metadata accessor for FeatureAvailabilityDataSource(0);
}

unint64_t sub_10006D050@<X0>(uint64_t a1@<X3>, uint64_t *a2@<X8>)
{
  swift_getWitnessTable(&unk_1000B4820, a1);
  return sub_1000213F0(a2);
}

uint64_t sub_10006D0BC(uint64_t a1, uint64_t a2)
{
  uint64_t WitnessTable;

  WitnessTable = swift_getWitnessTable(&unk_1000B4820, a2);
  return sub_100020F3C(a1, a2, WitnessTable);
}

uint64_t sub_10006D10C(uint64_t a1)
{
  uint64_t result;

  *(_QWORD *)(a1 + 8) = sub_100013198(&qword_1000EF1F0, type metadata accessor for FeatureAvailabilityDataSource, (uint64_t)&unk_1000B47C8);
  result = sub_100013198(&qword_1000EF1F8, type metadata accessor for FeatureAvailabilityDataSource, (uint64_t)&unk_1000B47F8);
  *(_QWORD *)(a1 + 24) = result;
  return result;
}

uint64_t sub_10006D168@<X0>(uint64_t a1@<X8>)
{
  void *v1;
  const char *v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t result;
  const char *v7;
  unint64_t v8;

  switch((unint64_t)objc_msgSend(v1, "categoryID"))
  {
    case 1uLL:
      v3 = "x-apple-health://CategoryType/HKDisplayCategoryIdentifierVitalSigns";
      v4 = 0xD000000000000043;
      goto LABEL_19;
    case 2uLL:
      v3 = "x-apple-health://CategoryType/HKDisplayCategoryIdentifierFitness";
      v4 = 0xD000000000000040;
      goto LABEL_19;
    case 4uLL:
      v3 = "x-apple-health://CategoryType/HKDisplayCategoryIdentifierNutrition";
      v4 = 0xD000000000000042;
      goto LABEL_19;
    case 5uLL:
      v3 = "x-apple-Health://SleepHealthAppPlugin.healthplugin";
      v4 = 0xD000000000000032;
      goto LABEL_19;
    case 6uLL:
      v3 = "x-apple-health://CategoryType/HKDisplayCategoryIdentifierBodyMeasurements";
      v4 = 0xD000000000000049;
      goto LABEL_19;
    case 8uLL:
      v3 = "x-apple-health://MenstrualCyclesAppPlugin.healthplugin/";
      v4 = 0xD000000000000037;
      goto LABEL_19;
    case 0xAuLL:
      v3 = "x-apple-health://CategoryType/HKDisplayCategoryIdentifierMindfulness";
      goto LABEL_13;
    case 0xBuLL:
      v7 = "x-apple-health://CategoryType/HKDisplayCategoryIdentifierHeart";
      goto LABEL_15;
    case 0xCuLL:
      v3 = "x-apple-health://CategoryType/HKDisplayCategoryIdentifierHearingHealth";
      v4 = 0xD000000000000046;
      goto LABEL_19;
    case 0xDuLL:
      v3 = "x-apple-health://CategoryType/HKDisplayCategoryIdentifierRespiratory";
LABEL_13:
      v4 = 0xD000000000000044;
      goto LABEL_19;
    case 0xEuLL:
      v7 = "x-apple-health://CategoryType/HKDisplayCategoryIdentifierOther";
LABEL_15:
      v8 = (unint64_t)(v7 - 32) | 0x8000000000000000;
      v4 = 0xD00000000000003ELL;
      goto LABEL_20;
    case 0x17uLL:
      v3 = "x-apple-health://CategoryType/HKDisplayCategoryIdentifierMobility";
      v4 = 0xD000000000000041;
      goto LABEL_19;
    case 0x1AuLL:
      v3 = "x-apple-health://CategoryType/HKDisplayCategoryIdentifierSymptoms";
      v4 = 0xD000000000000041;
      goto LABEL_19;
    case 0x1FuLL:
      v3 = "x-apple-health://MedicationsHealthAppPlugin.healthplugin";
      v4 = 0xD000000000000038;
LABEL_19:
      v8 = (unint64_t)(v3 - 32) | 0x8000000000000000;
LABEL_20:
      result = URL.init(string:)(v4, v8);
      break;
    default:
      v5 = type metadata accessor for URL(0);
      result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56))(a1, 1, 1, v5);
      break;
  }
  return result;
}

unint64_t sub_10006D338()
{
  unint64_t result;

  result = qword_1000EF200;
  if (!qword_1000EF200)
  {
    result = swift_getWitnessTable(&unk_1000B48C4, &type metadata for OpenSearchIntent);
    atomic_store(result, (unint64_t *)&qword_1000EF200);
  }
  return result;
}

uint64_t sub_10006D37C()
{
  return sub_100013198(&qword_1000EF208, (uint64_t (*)(uint64_t))&type metadata accessor for StringSearchCriteria, (uint64_t)&protocol conformance descriptor for StringSearchCriteria);
}

_QWORD *sub_10006D3A8@<X0>(_QWORD *a1@<X8>)
{
  return IntentParameter.wrappedValue.getter(a1);
}

uint64_t sub_10006D3C8()
{
  return IntentParameter.projectedValue.getter();
}

uint64_t sub_10006D3E8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _BYTE *v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE v13[16];

  v0 = type metadata accessor for LocalizedStringResource.BundleDescription(0);
  v1 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin(v0);
  v3 = &v13[-((v2 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v4 = type metadata accessor for Locale(0);
  __chkstk_darwin(v4);
  v6 = &v13[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v7 = type metadata accessor for String.LocalizationValue(0);
  __chkstk_darwin(v7);
  v9 = &v13[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v10 = type metadata accessor for LocalizedStringResource(0);
  sub_10001C884(v10, qword_1000F10B0);
  sub_10001C86C(v10, (uint64_t)qword_1000F10B0);
  v11 = String.LocalizationValue.init(stringLiteral:)(0xD000000000000010, 0x80000001000BC690);
  static Locale.current.getter(v11);
  (*(void (**)(_BYTE *, _QWORD, uint64_t))(v1 + 104))(v3, enum case for LocalizedStringResource.BundleDescription.main(_:), v0);
  return LocalizedStringResource.init(_:table:locale:bundle:comment:)(v9, 0x6E65746E49707041, 0xEA00000000007374, v6, v3, 0, 0, 256);
}

uint64_t sub_10006D568()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD v22[2];

  sub_1000076D8(0, &qword_1000EC948, (uint64_t (*)(uint64_t))&type metadata accessor for LocalizedStringResource, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
  __chkstk_darwin(v0);
  v2 = (char *)v22 - v1;
  v22[0] = type metadata accessor for LocalizedStringResource.BundleDescription(0);
  v3 = *(_QWORD *)(v22[0] - 8);
  __chkstk_darwin(v22[0]);
  v5 = (char *)v22 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for Locale(0);
  __chkstk_darwin(v6);
  v8 = (char *)v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for String.LocalizationValue(0);
  __chkstk_darwin(v9);
  v11 = (char *)v22 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for LocalizedStringResource(0);
  v13 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v15 = (char *)v22 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000076D8(0, &qword_1000EC940, (uint64_t (*)(uint64_t))&type metadata accessor for IntentDescription, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
  v17 = v16;
  sub_10001C884(v16, qword_1000F10C8);
  v18 = sub_10001C86C(v17, (uint64_t)qword_1000F10C8);
  v19 = String.LocalizationValue.init(stringLiteral:)(0xD000000000000030, 0x80000001000BC650);
  static Locale.current.getter(v19);
  (*(void (**)(char *, _QWORD, _QWORD))(v3 + 104))(v5, enum case for LocalizedStringResource.BundleDescription.main(_:), v22[0]);
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v11, 0x6E65746E49707041, 0xEA00000000007374, v8, v5, 0, 0, 256);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v13 + 56))(v2, 1, 1, v12);
  IntentDescription.init(_:categoryName:searchKeywords:)(v15, v2, _swiftEmptyArrayStorage);
  v20 = type metadata accessor for IntentDescription(0);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 56))(v18, 0, 1, v20);
}

uint64_t sub_10006D7DC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;

  sub_1000076D8(0, &qword_1000EF270, (uint64_t (*)(uint64_t))&type metadata accessor for StringSearchScope, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for _ContiguousArrayStorage);
  v1 = v0;
  v2 = type metadata accessor for StringSearchScope(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = *(unsigned __int8 *)(v3 + 80);
  v5 = (v4 + 32) & ~v4;
  v6 = swift_allocObject(v1, v5 + *(_QWORD *)(v3 + 72), v4 | 7);
  *(_OWORD *)(v6 + 16) = xmmword_1000B11F0;
  result = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(v3 + 104))(v6 + v5, enum case for StringSearchScope.general(_:), v2);
  qword_1000F10E0 = v6;
  return result;
}

uint64_t sub_10006D884()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  unint64_t v7;
  Swift::String v8;
  uint64_t KeyPath;
  uint64_t v10;
  Swift::String v11;
  uint64_t v13;

  sub_10006E58C(0, &qword_1000EF250, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t))&type metadata accessor for ParameterSummaryString);
  __chkstk_darwin(v0);
  v2 = (char *)&v13 - v1;
  sub_10006E58C(0, &qword_1000EF258, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t))&type metadata accessor for ParameterSummaryString.StringInterpolation);
  v4 = v3;
  __chkstk_darwin(v3);
  v6 = (char *)&v13 - v5;
  v7 = sub_10001AEF4();
  ParameterSummaryString.StringInterpolation.init(literalCapacity:interpolationCount:)(17, 1, &type metadata for OpenSearchIntent, v7);
  v8._countAndFlagsBits = 0x20686372616553;
  v8._object = (void *)0xE700000000000000;
  ParameterSummaryString.StringInterpolation.appendLiteral(_:)(v8);
  KeyPath = swift_getKeyPath(&unk_1000B49D8);
  sub_10006E610(0);
  ParameterSummaryString.StringInterpolation.appendInterpolation<A, B>(_:)(KeyPath, v4, v10);
  swift_release(KeyPath);
  v11._countAndFlagsBits = 0x6C616548206E6920;
  v11._object = (void *)0xEA00000000006874;
  ParameterSummaryString.StringInterpolation.appendLiteral(_:)(v11);
  ParameterSummaryString.init(stringInterpolation:)(v6, &type metadata for OpenSearchIntent, v7);
  return IntentParameterSummary.init(_:table:)(v2, 0, 0, &type metadata for OpenSearchIntent, v7);
}

uint64_t sub_10006DA04(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v2[2] = a1;
  v2[3] = a2;
  v3 = type metadata accessor for StringSearchCriteria(0);
  v2[4] = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v2[5] = v4;
  v2[6] = swift_task_alloc((*(_QWORD *)(v4 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000076D8(0, (unint64_t *)&unk_1000ECA90, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
  v2[7] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v5 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for URL(0);
  v2[8] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v2[9] = v7;
  v2[10] = swift_task_alloc((*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for MainActor(0);
  v2[11] = static MainActor.shared.getter(v8);
  v9 = dispatch thunk of Actor.unownedExecutor.getter(v8, &protocol witness table for MainActor);
  return swift_task_switch(sub_10006DAF8, v9, v10);
}

id sub_10006DAF8()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  void *v9;
  void *v10;
  Swift::String v11;
  __n128 v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t (*v19)(void);
  id result;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  void *v27;
  unint64_t v28;
  Class isa;
  uint64_t v30;
  NSURL *v31;

  v1 = v0[8];
  v2 = v0[9];
  v4 = (_QWORD *)v0[6];
  v3 = v0[7];
  v5 = v0[4];
  v6 = v0[5];
  swift_release(v0[11]);
  _StringGuts.grow(_:)(32);
  swift_bridgeObjectRelease(0xE000000000000000);
  v7 = IntentParameter.wrappedValue.getter(v4);
  v8 = StringSearchCriteria.term.getter(v7);
  v10 = v9;
  (*(void (**)(_QWORD *, uint64_t))(v6 + 8))(v4, v5);
  v11._countAndFlagsBits = v8;
  v11._object = v10;
  String.append(_:)(v11);
  swift_bridgeObjectRelease(v10);
  URL.init(string:)(0xD00000000000001ELL, 0x80000001000BC630);
  v12 = swift_bridgeObjectRelease(0x80000001000BC630);
  v13 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, __n128))(v2 + 48))(v3, 1, v1, v12);
  v14 = v0[10];
  if (v13 == 1)
  {
    v16 = v0[6];
    v15 = v0[7];
    sub_10001C7DC(v15);
    v17 = sub_10006E548();
    v18 = swift_allocError(&type metadata for SearchIntentError, v17, 0, 0);
    swift_willThrow(v18);
    swift_task_dealloc(v14);
    swift_task_dealloc(v15);
    swift_task_dealloc(v16);
    v19 = (uint64_t (*)(void))v0[1];
    return (id)v19();
  }
  (*(void (**)(_QWORD, _QWORD, _QWORD))(v0[9] + 32))(v0[10], v0[7], v0[8]);
  result = objc_msgSend((id)objc_opt_self(LSApplicationWorkspace), "defaultWorkspace");
  if (result)
  {
    v21 = result;
    v22 = v0[9];
    v23 = v0[10];
    v24 = v0[7];
    v25 = v0[8];
    v31 = (NSURL *)v0[6];
    URL._bridgeToObjectiveC()(v31);
    v27 = v26;
    v28 = sub_10007C1F8((uint64_t)_swiftEmptyArrayStorage);
    isa = Dictionary._bridgeToObjectiveC()().super.isa;
    objc_msgSend(v21, "openSensitiveURL:withOptions:", v27, isa, swift_bridgeObjectRelease(v28).n128_f64[0]);

    static IntentResult.result<>()(v30);
    (*(void (**)(uint64_t, uint64_t))(v22 + 8))(v23, v25);
    swift_task_dealloc(v23);
    swift_task_dealloc(v24);
    swift_task_dealloc(v31);
    v19 = (uint64_t (*)(void))v0[1];
    return (id)v19();
  }
  __break(1u);
  return result;
}

uint64_t sub_10006DD54@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v2;

  if (qword_1000EC0C0 != -1)
    swift_once(&qword_1000EC0C0, sub_10006D7DC);
  v2 = qword_1000F10E0;
  *a1 = qword_1000F10E0;
  return swift_bridgeObjectRetain(v2);
}

_QWORD *sub_10006DDA4@<X0>(_QWORD *a1@<X8>)
{
  return IntentParameter.wrappedValue.getter(a1);
}

uint64_t sub_10006DDC4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v7;

  v2 = type metadata accessor for StringSearchCriteria(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v5, a1, v2);
  IntentParameter.wrappedValue.setter(v5);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8))(a1, v2);
}

unint64_t sub_10006DE64()
{
  unint64_t result;

  result = qword_1000EF210;
  if (!qword_1000EF210)
  {
    result = swift_getWitnessTable(&unk_1000B497C, &type metadata for OpenSearchIntent);
    atomic_store(result, (unint64_t *)&qword_1000EF210);
  }
  return result;
}

unint64_t sub_10006DEAC()
{
  unint64_t result;

  result = qword_1000EF218;
  if (!qword_1000EF218)
  {
    result = swift_getWitnessTable(&unk_1000B49A4, &type metadata for OpenSearchIntent);
    atomic_store(result, (unint64_t *)&qword_1000EF218);
  }
  return result;
}

uint64_t sub_10006DEF0(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_1000C1A84, 1);
}

uint64_t sub_10006DF00(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_1000C1A5C, 1);
}

uint64_t sub_10006DF10@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  if (qword_1000EC0B0 != -1)
    swift_once(&qword_1000EC0B0, sub_10006D3E8);
  v2 = type metadata accessor for LocalizedStringResource(0);
  v3 = sub_10001C86C(v2, (uint64_t)qword_1000F10B0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 16))(a1, v3, v2);
}

uint64_t sub_10006DF80(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10006E66C();
  return static ShowInAppSearchResultsIntent.openAppWhenRun.getter(a1, v2);
}

uint64_t sub_10006DFAC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  if (qword_1000EC0B8 != -1)
    swift_once(&qword_1000EC0B8, sub_10006D568);
  sub_1000076D8(0, &qword_1000EC940, (uint64_t (*)(uint64_t))&type metadata accessor for IntentDescription, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
  v3 = sub_10001C86C(v2, (uint64_t)qword_1000F10C8);
  return sub_10005566C(v3, a1);
}

uint64_t sub_10006E020(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  _QWORD *v5;

  v4 = *v1;
  v5 = (_QWORD *)swift_task_alloc(dword_1000EF244);
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_10001C2DC;
  return sub_10006DA04(a1, v4);
}

uint64_t sub_10006E078@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = sub_10006E15C();
  *a1 = result;
  return result;
}

uint64_t sub_10006E09C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10001AEF4();
  return static AppIntent.persistentIdentifier.getter(a1, v2);
}

ValueMetadata *type metadata accessor for OpenSearchIntent()
{
  return &type metadata for OpenSearchIntent;
}

unint64_t sub_10006E0D8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000EF228;
  if (!qword_1000EF228)
  {
    sub_10006E58C(255, &qword_1000EF230, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t))&type metadata accessor for IntentParameterSummary);
    result = swift_getWitnessTable(&protocol conformance descriptor for IntentParameterSummary<A>, v1);
    atomic_store(result, (unint64_t *)&qword_1000EF228);
  }
  return result;
}

uint64_t sub_10006E130()
{
  return sub_100013198((unint64_t *)&qword_1000EC910, (uint64_t (*)(uint64_t))sub_10001C6A4, (uint64_t)&protocol conformance descriptor for IntentResultContainer<A, B, C, D>);
}

uint64_t sub_10006E15C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(char *, uint64_t, uint64_t);
  char *v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  char *v30;
  _QWORD v32[2];
  char *v33;
  char *v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;

  v0 = type metadata accessor for InputConnectionBehavior(0);
  v36 = *(_QWORD *)(v0 - 8);
  v37 = v0;
  __chkstk_darwin(v0);
  v35 = (char *)v32 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000076D8(0, &qword_1000EE508, (uint64_t (*)(uint64_t))&type metadata accessor for IntentDialog, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
  __chkstk_darwin(v2);
  v34 = (char *)v32 - v3;
  v4 = type metadata accessor for String.LocalizationValue(0);
  v5 = __chkstk_darwin(v4);
  v7 = (char *)v32 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v33 = (char *)v32 - v8;
  sub_1000076D8(0, &qword_1000EC948, (uint64_t (*)(uint64_t))&type metadata accessor for LocalizedStringResource, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
  __chkstk_darwin(v9);
  v11 = (char *)v32 - v10;
  v12 = type metadata accessor for LocalizedStringResource.BundleDescription(0);
  v13 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v15 = (char *)v32 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for Locale(0);
  __chkstk_darwin(v16);
  v18 = (char *)v32 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = type metadata accessor for LocalizedStringResource(0);
  v20 = *(_QWORD *)(v19 - 8);
  __chkstk_darwin(v19);
  v22 = (char *)v32 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = String.LocalizationValue.init(stringLiteral:)(1954047316, 0xE400000000000000);
  static Locale.current.getter(v23);
  v24 = enum case for LocalizedStringResource.BundleDescription.main(_:);
  v25 = *(void (**)(char *, uint64_t, uint64_t))(v13 + 104);
  v25(v15, enum case for LocalizedStringResource.BundleDescription.main(_:), v12);
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v7, 0x6E65746E49707041, 0xEA00000000007374, v18, v15, 0, 0, 256);
  v26 = v33;
  String.LocalizationValue.init(stringLiteral:)(0xD00000000000001FLL, 0x80000001000BC610);
  sub_10006E4D0(0);
  v32[1] = v27;
  static Locale.current.getter(v27);
  v25(v15, v24, v12);
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v26, 0x6E65746E49707041, 0xEA00000000007374, v18, v15, 0, 0, 256);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v20 + 56))(v11, 0, 1, v19);
  v28 = type metadata accessor for IntentDialog(0);
  v29 = v34;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v28 - 8) + 56))(v34, 1, 1, v28);
  v30 = v35;
  (*(void (**)(char *, _QWORD, uint64_t))(v36 + 104))(v35, enum case for InputConnectionBehavior.default(_:), v37);
  return IntentParameter<>.init(title:description:requestValueDialog:inputConnectionBehavior:)(v22, v11, v29, v30);
}

void sub_10006E4D0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;

  if (!qword_1000EF238)
  {
    v2 = type metadata accessor for StringSearchCriteria(255);
    v3 = sub_100013198((unint64_t *)&qword_1000EC800, (uint64_t (*)(uint64_t))&type metadata accessor for StringSearchCriteria, (uint64_t)&protocol conformance descriptor for StringSearchCriteria);
    v4 = type metadata accessor for IntentParameter(a1, v2, v3);
    if (!v5)
      atomic_store(v4, &qword_1000EF238);
  }
}

unint64_t sub_10006E548()
{
  unint64_t result;

  result = qword_1000EF248;
  if (!qword_1000EF248)
  {
    result = swift_getWitnessTable(&unk_1000B4A7C, &type metadata for SearchIntentError);
    atomic_store(result, (unint64_t *)&qword_1000EF248);
  }
  return result;
}

void sub_10006E58C(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, ValueMetadata *, unint64_t))
{
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;

  if (!*a2)
  {
    v6 = sub_10001AEF4();
    v7 = a3(a1, &type metadata for OpenSearchIntent, v6);
    if (!v8)
      atomic_store(v7, a2);
  }
}

uint64_t sub_10006E5E8@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = IntentParameter.projectedValue.getter();
  *a1 = result;
  return result;
}

void sub_10006E610(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_1000EF260)
  {
    sub_10006E4D0(255);
    v3 = type metadata accessor for KeyPath(a1, &type metadata for OpenSearchIntent, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_1000EF260);
  }
}

unint64_t sub_10006E66C()
{
  unint64_t result;

  result = qword_1000EF268;
  if (!qword_1000EF268)
  {
    result = swift_getWitnessTable(&unk_1000B486C, &type metadata for OpenSearchIntent);
    atomic_store(result, (unint64_t *)&qword_1000EF268);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for SearchIntentError(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_10006E6F0 + 4 * byte_1000B4860[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_10006E710 + 4 * byte_1000B4865[v4]))();
}

_BYTE *sub_10006E6F0(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_10006E710(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_10006E718(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_10006E720(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_10006E728(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_10006E730(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for SearchIntentError()
{
  return &type metadata for SearchIntentError;
}

unint64_t sub_10006E750()
{
  unint64_t result;

  result = qword_1000EF278;
  if (!qword_1000EF278)
  {
    result = swift_getWitnessTable(&unk_1000B4A54, &type metadata for SearchIntentError);
    atomic_store(result, (unint64_t *)&qword_1000EF278);
  }
  return result;
}

id sub_10006E854(void *a1)
{
  char *v1;
  uint64_t v3;
  id v4;
  char *v5;
  id v6;
  id v7;
  id v8;
  objc_super v10;

  v3 = OBJC_IVAR____TtC6Health16NoHealthDataView_label;
  v4 = objc_allocWithZone((Class)UILabel);
  v5 = v1;
  *(_QWORD *)&v1[v3] = objc_msgSend(v4, "init");

  v10.receiver = v5;
  v10.super_class = (Class)type metadata accessor for NoHealthDataView();
  v6 = objc_msgSendSuper2(&v10, "initWithCoder:", a1);
  v7 = v6;
  if (v6)
  {
    v8 = v6;
    sub_10006E920();

  }
  return v7;
}

void sub_10006E920()
{
  uint64_t v0;
  void *v1;
  id v2;
  Swift::String v3;
  Swift::String v4;
  void *object;
  NSString v6;
  void *v7;
  id v8;
  Swift::String v9;

  v1 = *(void **)(v0 + OBJC_IVAR____TtC6Health16NoHealthDataView_label);
  v2 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
  v9._object = (void *)0x80000001000BC710;
  v3._countAndFlagsBits = 0x5F617461645F6F6ELL;
  v3._object = (void *)0xEC00000074786574;
  v4._countAndFlagsBits = 0x61746144206F4ELL;
  v4._object = (void *)0xE700000000000000;
  v9._countAndFlagsBits = 0xD000000000000039;
  object = NSLocalizedString(_:tableName:bundle:value:comment:)(v3, (Swift::String_optional)0, (NSBundle)v2, v4, v9)._object;

  v6 = String._bridgeToObjectiveC()();
  objc_msgSend(v1, "setText:", v6, swift_bridgeObjectRelease(object).n128_f64[0]);

  sub_100006D10(0, &qword_1000EF2B0, UIFont_ptr);
  v7 = (void *)static UIFont.createFont(with:weight:traits:rounded:maximumContentSizeCategory:respectsDynamicType:)(UIFontTextStyleTitle2, 0, 1, 2, 0, 0, 1);
  objc_msgSend(v1, "setFont:", v7);

  v8 = objc_msgSend((id)objc_opt_self(UIColor), "tertiaryLabelColor");
  objc_msgSend(v1, "setTextColor:", v8);

  objc_msgSend(v1, "setNumberOfLines:", 0);
  objc_msgSend(v1, "setTextAlignment:", 1);
  objc_msgSend(v1, "setTranslatesAutoresizingMaskIntoConstraints:", 0);
  sub_10006EAF8(v1);
}

void sub_10006EAF8(void *a1)
{
  void *v1;
  void *v2;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  id v8;
  id v9;
  id v10;
  id v11;
  id v12;
  id v13;
  id v14;
  id v15;
  id v16;
  id v17;
  id v18;
  id v19;
  id v20;
  uint64_t v21;
  Class isa;

  v2 = v1;
  objc_msgSend(v1, "addSubview:", a1);
  v4 = (void *)objc_opt_self(NSLayoutConstraint);
  sub_1000139B4();
  v6 = swift_allocObject(v5, 64, 7);
  *(_OWORD *)(v6 + 16) = xmmword_1000B4AC0;
  v7 = objc_msgSend(a1, "centerXAnchor");
  v8 = objc_msgSend(v2, "centerXAnchor");
  v9 = objc_msgSend(v7, "constraintEqualToAnchor:", v8);

  *(_QWORD *)(v6 + 32) = v9;
  v10 = objc_msgSend(a1, "centerYAnchor");
  v11 = objc_msgSend(v2, "centerYAnchor");
  v12 = objc_msgSend(v10, "constraintEqualToAnchor:", v11);

  *(_QWORD *)(v6 + 40) = v12;
  v13 = objc_msgSend(a1, "leadingAnchor");
  v14 = objc_msgSend(v2, "layoutMarginsGuide");
  v15 = objc_msgSend(v14, "leadingAnchor");

  v16 = objc_msgSend(v13, "constraintEqualToAnchor:", v15);
  *(_QWORD *)(v6 + 48) = v16;
  v17 = objc_msgSend(a1, "trailingAnchor");
  v18 = objc_msgSend(v2, "layoutMarginsGuide");
  v19 = objc_msgSend(v18, "trailingAnchor");

  v20 = objc_msgSend(v17, "constraintEqualToAnchor:", v19);
  *(_QWORD *)(v6 + 56) = v20;
  specialized Array._endMutation()(v21);
  sub_100006D10(0, &qword_1000EF2B8, NSLayoutConstraint_ptr);
  isa = Array._bridgeToObjectiveC()().super.isa;
  objc_msgSend(v4, "activateConstraints:", isa, swift_bridgeObjectRelease(v6).n128_f64[0]);

}

id sub_10006ED88()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for NoHealthDataView();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for NoHealthDataView()
{
  return objc_opt_self(_TtC6Health16NoHealthDataView);
}

uint64_t type metadata accessor for WelcomePrivacyInformationViewController(uint64_t a1)
{
  uint64_t result;

  result = qword_1000EF348;
  if (!qword_1000EF348)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for WelcomePrivacyInformationViewController);
  return result;
}

uint64_t sub_10006EE24(uint64_t a1)
{
  void *v2;

  v2 = &unk_1000B4B68;
  return swift_initClassMetadata2(a1, 0, 1, &v2, a1 + qword_1000F10E8);
}

uint64_t sub_10006EE6C(uint64_t a1)
{
  return sub_10006EFAC(a1, 0xD00000000000001BLL, 0x80000001000BC910, &qword_1000EF2C0, algn_1000EF2C8);
}

uint64_t sub_10006EE94(uint64_t a1)
{
  return sub_10006EFAC(a1, 0xD00000000000001FLL, 0x80000001000BC860, &qword_1000EF2D0, algn_1000EF2D8);
}

uint64_t sub_10006EEBC(uint64_t a1)
{
  return sub_10006EFAC(a1, 0xD000000000000020, 0x80000001000BC8B0, &qword_1000EF2E0, algn_1000EF2E8);
}

uint64_t sub_10006EEE4(uint64_t a1)
{
  return sub_10006EFAC(a1, 0xD000000000000024, 0x80000001000BB820, &qword_1000EF2F0, algn_1000EF2F8);
}

uint64_t sub_10006EF0C(uint64_t a1)
{
  return sub_10006EFAC(a1, 0xD000000000000027, 0x80000001000BC7D0, &qword_1000EF300, algn_1000EF308);
}

uint64_t sub_10006EF34(uint64_t a1)
{
  return sub_10006EFAC(a1, 0xD00000000000002ALL, 0x80000001000BC830, &qword_1000EF310, algn_1000EF318);
}

uint64_t sub_10006EF5C(uint64_t a1)
{
  return sub_10006EFAC(a1, 0xD00000000000002ALL, 0x80000001000BC800, &qword_1000EF320, algn_1000EF328);
}

uint64_t sub_10006EF84(uint64_t a1)
{
  return sub_10006EFAC(a1, 0xD00000000000002DLL, 0x80000001000BC880, &qword_1000EF330, algn_1000EF338);
}

uint64_t sub_10006EFAC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, _QWORD *a5)
{
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  uint64_t v15;
  uint64_t result;
  uint64_t v17;
  _BYTE v18[16];

  v9 = type metadata accessor for Locale(0);
  __chkstk_darwin(v9);
  v11 = &v18[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v12 = type metadata accessor for String.LocalizationValue(0);
  __chkstk_darwin(v12);
  v14 = &v18[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v15 = String.LocalizationValue.init(stringLiteral:)(a2, a3);
  static Locale.current.getter(v15);
  result = String.init(localized:table:bundle:locale:comment:)(v14, 0, 0, 0, v11, 0, 0, 256);
  *a4 = result;
  *a5 = v17;
  return result;
}

void sub_10006F098()
{
  void *v0;
  NSString v1;
  uint64_t v2;
  uint64_t v3;
  Class isa;
  id v5;
  id v6;
  void *v7;
  NSString v8;
  objc_super v9;

  v9.receiver = v0;
  v9.super_class = (Class)swift_getObjectType(v0);
  objc_msgSendSuper2(&v9, "viewDidLoad");
  if (qword_1000EC0C8 != -1)
    swift_once(&qword_1000EC0C8, sub_10006EE6C);
  v1 = String._bridgeToObjectiveC()();
  sub_100061034();
  v3 = swift_allocObject(v2, 64, 7);
  *(_OWORD *)(v3 + 16) = xmmword_1000B1580;
  *(_QWORD *)(v3 + 32) = 0xD000000000000028;
  *(_QWORD *)(v3 + 40) = 0x80000001000BC8E0;
  strcpy((char *)(v3 + 48), "ContinueButton");
  *(_BYTE *)(v3 + 63) = -18;
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v3);
  v5 = (id)HKUIJoinStringsForAutomationIdentifier(isa);

  v6 = objc_msgSend(v0, "view");
  if (v6)
  {
    v7 = v6;
    v8 = String._bridgeToObjectiveC()();
    objc_msgSend(v7, "setAccessibilityIdentifier:", v8);

  }
  else
  {
    __break(1u);
  }
}

void sub_10006F234(void *a1)
{
  id v1;

  v1 = a1;
  sub_10006F098();

}

void sub_10006F268()
{
  uint64_t v0;
  uint64_t Strong;
  uint64_t v2;
  NSString v3;
  id v4;

  Strong = swift_unknownObjectWeakLoadStrong(v0 + qword_1000EF340);
  if (Strong)
  {
    v2 = Strong;
    v3 = String._bridgeToObjectiveC()();
    v4 = objc_msgSend((id)objc_opt_self(OBPrivacyPresenter), "presenterForPrivacySplashWithIdentifier:", v3);

    if (v4)
      objc_msgSend(v4, "setPresentingViewController:", v2);
    objc_msgSend(v4, "present");
    swift_unknownObjectRelease(v2);

  }
}

void sub_10006F334()
{
  uint64_t v0;
  uint64_t Strong;
  uint64_t v2;

  Strong = swift_unknownObjectWeakLoadStrong(v0 + qword_1000EF340);
  if (Strong)
  {
    v2 = Strong;
    sub_1000734E4();
    swift_unknownObjectRelease(v2);
  }
  sub_100046898();
  AnalyticsSubmitting.submit()();
}

void sub_10006F398(void *a1)
{
  id v1;

  v1 = a1;
  sub_10006F334();

}

uint64_t sub_10006F3CC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, __int128 a9, uint64_t a10, char a11)
{
  objc_class *v11;
  char *v19;

  v19 = (char *)objc_allocWithZone(v11);
  *(_QWORD *)&v19[qword_1000EF340 + 8] = 0;
  swift_unknownObjectWeakInit();
  return OnboardingHeroWithLinkViewController.init(title:detailText:heroView:linkButtonText:linkButtonAction:linkButtonAccessibilityIdentifier:underLinkButtonContentView:heroViewUsesIntrinsicHeight:)(a1, a2, a3, a4, a5, a6, a7, a8, a9, *((_QWORD *)&a9 + 1), a10, a11);
}

uint64_t sub_10006F494(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7, uint64_t a8, __int128 a9, __int128 a10, uint64_t a11)
{
  objc_class *v11;
  uint64_t v19;
  char *v20;

  v19 = a7 & 1;
  v20 = (char *)objc_allocWithZone(v11);
  *(_QWORD *)&v20[qword_1000EF340 + 8] = 0;
  swift_unknownObjectWeakInit();
  return OnboardingHeroWithLinkViewController.init(title:detailText:heroImage:heroImageHeight:linkButtonText:linkButtonAction:linkButtonAccessibilityIdentifier:underLinkButtonContentView:)(a1, a2, a3, a4, a5, a6, v19, a8, a9, *((_QWORD *)&a9 + 1), a10, *((_QWORD *)&a10 + 1), a11);
}

uint64_t sub_10006F560()
{
  uint64_t v0;

  return sub_100061088(v0 + qword_1000EF340);
}

id sub_10006F570()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)swift_getObjectType(v0);
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t sub_10006F5A4(uint64_t a1)
{
  return sub_100061088(a1 + qword_1000EF340);
}

uint64_t sub_10006F5B4()
{
  return type metadata accessor for WelcomePrivacyInformationViewController(0);
}

void sub_10006F5BC(char a1)
{
  id v2;
  id v3;
  id v4;
  NSString v5;
  id v6;
  id v7;
  void *v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;

  v2 = objc_msgSend((id)objc_opt_self(UIImageSymbolConfiguration), "configurationWithPointSize:weight:scale:", 7, 3, 80.0);
  if (qword_1000EC028 != -1)
    swift_once(&qword_1000EC028, sub_10003FFE0);
  v3 = (id)qword_1000F0EF8;
  v4 = v2;
  v5 = String._bridgeToObjectiveC()();
  v6 = objc_msgSend((id)objc_opt_self(UIImage), "imageNamed:inBundle:withConfiguration:", v5, v3, v4);

  if (!v6)
  {
    __break(1u);
    goto LABEL_32;
  }
  v7 = objc_msgSend((id)objc_opt_self(MCProfileConnection), "sharedConnection");
  if (!v7)
  {
LABEL_32:
    __break(1u);
    return;
  }
  v8 = v7;
  v9 = objc_msgSend(v7, "isPasscodeSet");

  if ((a1 & 1) != 0)
  {
    if (v9)
    {
      if (qword_1000EC0D0 != -1)
        swift_once(&qword_1000EC0D0, sub_10006EE94);
      v10 = qword_1000EF2D0;
      v11 = *(_QWORD *)algn_1000EF2D8;
      v12 = qword_1000EC0E8;
      swift_bridgeObjectRetain(*(_QWORD *)algn_1000EF2D8);
      if (v12 != -1)
        swift_once(&qword_1000EC0E8, sub_10006EF0C);
      v13 = &qword_1000EF300;
    }
    else
    {
      if (qword_1000EC0D8 != -1)
        swift_once(&qword_1000EC0D8, sub_10006EEBC);
      v10 = qword_1000EF2E0;
      v11 = *(_QWORD *)algn_1000EF2E8;
      v15 = qword_1000EC0F8;
      swift_bridgeObjectRetain(*(_QWORD *)algn_1000EF2E8);
      if (v15 != -1)
        swift_once(&qword_1000EC0F8, sub_10006EF5C);
      v13 = &qword_1000EF320;
    }
  }
  else if (v9)
  {
    if (qword_1000EC0D0 != -1)
      swift_once(&qword_1000EC0D0, sub_10006EE94);
    v10 = qword_1000EF2D0;
    v11 = *(_QWORD *)algn_1000EF2D8;
    v14 = qword_1000EC0F0;
    swift_bridgeObjectRetain(*(_QWORD *)algn_1000EF2D8);
    if (v14 != -1)
      swift_once(&qword_1000EC0F0, sub_10006EF34);
    v13 = &qword_1000EF310;
  }
  else
  {
    if (qword_1000EC0D8 != -1)
      swift_once(&qword_1000EC0D8, sub_10006EEBC);
    v10 = qword_1000EF2E0;
    v11 = *(_QWORD *)algn_1000EF2E8;
    v16 = qword_1000EC100;
    swift_bridgeObjectRetain(*(_QWORD *)algn_1000EF2E8);
    if (v16 != -1)
      swift_once(&qword_1000EC100, sub_10006EF84);
    v13 = &qword_1000EF330;
  }
  v18 = *v13;
  v17 = v13[1];
  swift_bridgeObjectRetain(v17);
  if (qword_1000EC0E0 != -1)
    swift_once(&qword_1000EC0E0, sub_10006EEE4);
  v19 = qword_1000EF2F0;
  v20 = *(_QWORD *)algn_1000EF2F8;
  v21 = (char *)objc_allocWithZone((Class)type metadata accessor for WelcomePrivacyInformationViewController(0))
      + qword_1000EF340;
  *((_QWORD *)v21 + 1) = 0;
  swift_unknownObjectWeakInit(v21, 0);
  swift_bridgeObjectRetain(v20);
  OnboardingHeroWithLinkViewController.init(title:detailText:heroImage:heroImageHeight:linkButtonText:linkButtonAction:linkButtonAccessibilityIdentifier:underLinkButtonContentView:)(v10, v11, v18, v17, v6, 0x405E000000000000, 0, v19, v20, 0, 0xD000000000000038, 0x80000001000BC790, 0);

}

void sub_10006F9B0(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  id v23;
  NSString v24;
  id v25;
  NSString v26;
  _QWORD *v27;
  uint64_t v28;
  id v29;
  NSString v30;
  id v31;
  Class isa;
  NSString v33;
  char v34;
  uint64_t v35;
  id v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void *v41;
  uint64_t v42;
  id v43;
  void *v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  ValueMetadata *v50;
  uint64_t aBlock[5];
  uint64_t v52;

  v47 = a4;
  v48 = a2;
  v49 = a3;
  v5 = type metadata accessor for Logger(0);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = __chkstk_darwin(v5);
  v9 = (char *)&v45 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  static Logger.general.getter(v7);
  v10 = swift_bridgeObjectRetain_n(a1, 2);
  v11 = Logger.logObject.getter(v10);
  v12 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v11, v12))
  {
    v13 = swift_slowAlloc(22, -1);
    v14 = swift_slowAlloc(64, -1);
    aBlock[0] = v14;
    *(_DWORD *)v13 = 136446466;
    v46 = v6;
    v50 = &type metadata for HealthAppPPT;
    v15 = sub_10007058C();
    v45 = v5;
    v16 = String.init<A>(describing:)(&v50, v15);
    v18 = v17;
    v50 = (ValueMetadata *)sub_100012B20(v16, v17, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v50, aBlock, v13 + 4, v13 + 12);
    swift_bridgeObjectRelease(v18);
    *(_WORD *)(v13 + 12) = 2082;
    v19 = swift_bridgeObjectRetain(a1);
    v20 = Array.description.getter(v19, &type metadata for String);
    v22 = v21;
    swift_bridgeObjectRelease(a1);
    v50 = (ValueMetadata *)sub_100012B20(v20, v22, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v50, aBlock, v13 + 14, v13 + 22);
    swift_bridgeObjectRelease_n(a1, 2);
    swift_bridgeObjectRelease(v22);
    _os_log_impl((void *)&_mh_execute_header, v11, v12, "[%{public}s]: Setting overrideRelevanceForFeedItemIdentifiers to: %{public}s", (uint8_t *)v13, 0x16u);
    swift_arrayDestroy(v14, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v14, -1, -1);
    swift_slowDealloc(v13, -1, -1);

    (*(void (**)(char *, uint64_t))(v46 + 8))(v9, v45);
  }
  else
  {

    swift_bridgeObjectRelease_n(a1, 2);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v5);
  }
  v23 = objc_allocWithZone((Class)NSUserDefaults);
  v24 = String._bridgeToObjectiveC()();
  v25 = objc_msgSend(v23, "initWithSuiteName:", v24);

  if (v25)
  {
    v26 = String._bridgeToObjectiveC()();
    v27 = objc_msgSend(v25, "arrayForKey:", v26);

    if (v27)
    {
      v28 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v27, (char *)&type metadata for Any + 8);

      v27 = sub_10004D238(v28);
      swift_bridgeObjectRelease(v28);
    }
    v29 = objc_allocWithZone((Class)NSUserDefaults);
    v30 = String._bridgeToObjectiveC()();
    v31 = objc_msgSend(v29, "initWithSuiteName:", v30);

    if (v31)
    {
      isa = Array._bridgeToObjectiveC()().super.isa;
      v33 = String._bridgeToObjectiveC()();
      objc_msgSend(v31, "setObject:forKey:", isa, v33);

      sub_1000703F8(0);
      LOBYTE(isa) = v34;
      v35 = static Feed.Kind.relevanceRankedFeeds.getter();
      v36 = objc_allocWithZone((Class)type metadata accessor for PopulateDiscoverFeedOperation(0));
      v37 = (void *)PopulateDiscoverFeedOperation.init(feedKinds:)(v35);
      v38 = swift_allocObject(&unk_1000E0A20, 48, 7);
      *(_BYTE *)(v38 + 16) = v47;
      *(_BYTE *)(v38 + 17) = isa & 1;
      v39 = v48;
      *(_QWORD *)(v38 + 24) = v27;
      *(_QWORD *)(v38 + 32) = v39;
      v40 = v49;
      *(_QWORD *)(v38 + 40) = v49;
      aBlock[4] = (uint64_t)sub_100070578;
      v52 = v38;
      aBlock[0] = (uint64_t)_NSConcreteStackBlock;
      aBlock[1] = 1107296256;
      aBlock[2] = (uint64_t)sub_100006988;
      aBlock[3] = (uint64_t)&unk_1000E0A38;
      v41 = _Block_copy(aBlock);
      v42 = v52;
      v43 = v37;
      swift_retain(v40);
      sub_10003FBE0((uint64_t)sub_100070578, v38);
      swift_release(v42);
      objc_msgSend(v43, "setCompletionBlock:", v41);
      _Block_release(v41);

      swift_release(v38);
      sub_100006D10(0, (unint64_t *)&qword_1000EDA38, NSOperationQueue_ptr);
      v44 = (void *)static NSOperationQueue.userInitiated.getter();
      objc_msgSend(v44, "addOperation:", v43);

      return;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
}

uint64_t sub_10006FE98(char a1, char a2, uint64_t a3, void (*a4)(void (*)(), uint64_t))
{
  uint64_t v8;

  v8 = swift_allocObject(&unk_1000E0A70, 32, 7);
  *(_BYTE *)(v8 + 16) = a1;
  *(_BYTE *)(v8 + 17) = a2;
  *(_QWORD *)(v8 + 24) = a3;
  swift_bridgeObjectRetain(a3);
  a4(sub_1000705E8, v8);
  return swift_release(v8);
}

void sub_10006FF14(uint64_t a1, char a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  NSObject *v27;
  os_log_type_t v28;
  uint8_t *v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  id v35;
  NSString v36;
  id v37;
  NSArray v38;
  NSString v39;
  id v40;
  NSString v41;
  uint64_t v42;
  uint64_t v43;
  ValueMetadata *v44;
  uint64_t v45;

  v5 = type metadata accessor for Logger(0);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = __chkstk_darwin(v5);
  v9 = (char *)&v42 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v11 = (char *)&v42 - v10;
  sub_1000703F8(a2);
  if (a3)
  {
    static Logger.general.getter(v12);
    v13 = swift_bridgeObjectRetain_n(a3, 2);
    v14 = Logger.logObject.getter(v13);
    v15 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v14, v15))
    {
      v16 = swift_slowAlloc(22, -1);
      v17 = swift_slowAlloc(64, -1);
      v45 = v17;
      *(_DWORD *)v16 = 136446466;
      v44 = &type metadata for HealthAppPPT;
      v18 = sub_10007058C();
      v43 = v6;
      v19 = String.init<A>(describing:)(&v44, v18);
      v21 = v20;
      v44 = (ValueMetadata *)sub_100012B20(v19, v20, &v45);
      v42 = v5;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v44, &v45, v16 + 4, v16 + 12);
      swift_bridgeObjectRelease(v21);
      *(_WORD *)(v16 + 12) = 2082;
      v22 = swift_bridgeObjectRetain(a3);
      v23 = Array.description.getter(v22, &type metadata for String);
      v25 = v24;
      swift_bridgeObjectRelease(a3);
      v44 = (ValueMetadata *)sub_100012B20(v23, v25, &v45);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v44, &v45, v16 + 14, v16 + 22);
      swift_bridgeObjectRelease_n(a3, 2);
      swift_bridgeObjectRelease(v25);
      _os_log_impl((void *)&_mh_execute_header, v14, v15, "[%{public}s]: Populate feed complete, resetting overrideRelevanceForFeedItemIdentifiers to previous value: %{public}s", (uint8_t *)v16, 0x16u);
      swift_arrayDestroy(v17, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v17, -1, -1);
      swift_slowDealloc(v16, -1, -1);

      (*(void (**)(char *, uint64_t))(v43 + 8))(v9, v42);
    }
    else
    {

      swift_bridgeObjectRelease_n(a3, 2);
      (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v5);
    }
    v35 = objc_allocWithZone((Class)NSUserDefaults);
    v36 = String._bridgeToObjectiveC()();
    v37 = objc_msgSend(v35, "initWithSuiteName:", v36);

    if (v37)
    {
      v38.super.isa = Array._bridgeToObjectiveC()().super.isa;
      v39 = String._bridgeToObjectiveC()();
      objc_msgSend(v37, "setObject:forKey:", v38.super.isa, v39);

LABEL_12:
      return;
    }
    __break(1u);
  }
  else
  {
    v26 = static Logger.general.getter(v12);
    v27 = Logger.logObject.getter(v26);
    v28 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v27, v28))
    {
      v29 = (uint8_t *)swift_slowAlloc(12, -1);
      v30 = swift_slowAlloc(32, -1);
      v43 = v6;
      *(_DWORD *)v29 = 136446210;
      v45 = v30;
      v44 = &type metadata for HealthAppPPT;
      v31 = sub_10007058C();
      v32 = String.init<A>(describing:)(&v44, v31);
      v34 = v33;
      v44 = (ValueMetadata *)sub_100012B20(v32, v33, &v45);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v44, &v45, v29 + 4, v29 + 12);
      swift_bridgeObjectRelease(v34);
      _os_log_impl((void *)&_mh_execute_header, v27, v28, "[%{public}s]: Populate feed complete, removing overrideRelevanceForFeedItemIdentifiers", v29, 0xCu);
      swift_arrayDestroy(v30, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v30, -1, -1);
      swift_slowDealloc(v29, -1, -1);

      (*(void (**)(char *, uint64_t))(v43 + 8))(v11, v5);
    }
    else
    {

      (*(void (**)(char *, uint64_t))(v6 + 8))(v11, v5);
    }
    v40 = objc_allocWithZone((Class)NSUserDefaults);
    v41 = String._bridgeToObjectiveC()();
    v38.super.isa = (Class)objc_msgSend(v40, "initWithSuiteName:", v41);

    if (v38.super.isa)
    {
      v39 = String._bridgeToObjectiveC()();
      -[objc_class removeObjectForKey:](v38.super.isa, "removeObjectForKey:", v39);
      goto LABEL_12;
    }
  }
  __break(1u);
}

void sub_1000703F8(char a1)
{
  id v2;
  NSString v3;
  id v4;
  NSString v5;
  unsigned int v6;
  id v7;
  NSString v8;
  id v9;
  NSString v10;

  v2 = objc_allocWithZone((Class)NSUserDefaults);
  v3 = String._bridgeToObjectiveC()();
  v4 = objc_msgSend(v2, "initWithSuiteName:", v3);

  if (!v4)
  {
    __break(1u);
    goto LABEL_7;
  }
  v5 = String._bridgeToObjectiveC()();
  v6 = objc_msgSend(v4, "BOOLForKey:", v5);

  if (v6 == (a1 & 1))
    return;
  v7 = objc_allocWithZone((Class)NSUserDefaults);
  v8 = String._bridgeToObjectiveC()();
  v9 = objc_msgSend(v7, "initWithSuiteName:", v8);

  if (!v9)
  {
LABEL_7:
    __break(1u);
    return;
  }
  v10 = String._bridgeToObjectiveC()();
  objc_msgSend(v9, "setBool:forKey:", a1 & 1, v10);

}

uint64_t sub_10007054C()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 24));
  swift_release(*(_QWORD *)(v0 + 40));
  return swift_deallocObject(v0, 48, 7);
}

uint64_t sub_100070578()
{
  uint64_t v0;

  return sub_10006FE98(*(_BYTE *)(v0 + 16), *(_BYTE *)(v0 + 17), *(_QWORD *)(v0 + 24), *(void (**)(void (*)(), uint64_t))(v0 + 32));
}

unint64_t sub_10007058C()
{
  unint64_t result;

  result = qword_1000EF398;
  if (!qword_1000EF398)
  {
    result = swift_getMetatypeMetadata(&type metadata for HealthAppPPT);
    atomic_store(result, (unint64_t *)&qword_1000EF398);
  }
  return result;
}

uint64_t sub_1000705C4()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

void sub_1000705E8()
{
  uint64_t v0;

  sub_10006FF14(*(unsigned __int8 *)(v0 + 16), *(_BYTE *)(v0 + 17), *(_QWORD *)(v0 + 24));
}

void sub_1000705F8(void *a1, _QWORD *a2, uint64_t a3, char a4, void (*a5)(_QWORD), uint64_t a6)
{
  sub_100070638(a1, a2, a3, a4, a5, a6, (uint64_t)&unk_1000E0BD8, (uint64_t)sub_100071B40, (uint64_t)&unk_1000E0BF0, (void (*)(void (*)(_QWORD), uint64_t))sub_100071DF4);
}

void sub_100070638(void *a1, _QWORD *a2, uint64_t a3, char a4, void (*a5)(_QWORD), uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void (*a10)(void (*)(_QWORD), uint64_t))
{
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  _QWORD *v27;
  void *v28;
  _QWORD *v29;
  id v30;
  id v32;
  _QWORD aBlock[5];
  _QWORD *v34;

  if (a1)
  {
    v17 = (void *)objc_opt_self(CATransaction);
    v32 = a1;
    objc_msgSend(v17, "begin");
    v18 = a2[3];
    v19 = a2[4];
    sub_100012E04(a2, v18);
    dispatch thunk of ViewControllerRouterProtocol.prepareForAppActivity(_:)(a3, v18, *(_QWORD *)(v19 + 8));
    objc_msgSend(v17, "commit");
    v20 = a2[3];
    v21 = a2[4];
    sub_100012E04(a2, v20);
    v22 = (*(uint64_t (**)(uint64_t, uint64_t))(v21 + 16))(v20, v21);
    if (v22)
    {
      v23 = (void *)v22;
      v24 = objc_opt_self(UINavigationController);
      v25 = swift_dynamicCastObjCClass(v23, v24);
      if (v25)
      {
        v26 = (void *)v25;
        objc_msgSend(v17, "begin");
        v27 = (_QWORD *)swift_allocObject(a7, 40, 7);
        v27[2] = a5;
        v27[3] = a6;
        v27[4] = v32;
        aBlock[4] = a8;
        v34 = v27;
        aBlock[0] = _NSConcreteStackBlock;
        aBlock[1] = 1107296256;
        aBlock[2] = sub_100006988;
        aBlock[3] = a9;
        v28 = _Block_copy(aBlock);
        v29 = v34;
        v30 = v32;
        a10(a5, a6);
        swift_release(v29);
        objc_msgSend(v17, "setCompletionBlock:", v28);
        _Block_release(v28);
        objc_msgSend(v26, "pushViewController:animated:", v30, a4 & 1);
        objc_msgSend(v17, "commit");

        return;
      }

    }
    if (a5)
      a5(0);

  }
  else if (a5)
  {
    a5(0);
  }
}

_QWORD *sub_10007087C(uint64_t a1, uint64_t a2, int a3, void (*a4)(_QWORD), uint64_t a5)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *result;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  id v25;
  uint64_t v26;
  id v27;
  _QWORD *v28;
  uint64_t v29;
  id v30;
  id v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  void *v40;
  void (*v41)(char *, _QWORD, uint64_t);
  uint64_t v42;
  void (*v43)(_QWORD);
  uint64_t v44;
  id v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  int v55;
  char *v56;
  uint64_t v57;
  _QWORD *v58;
  char *v59;
  uint64_t v60;
  char *v61;
  void (*v62)(_QWORD);
  _QWORD v63[5];
  _QWORD v64[5];
  __int128 v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;

  v60 = a5;
  v62 = a4;
  v55 = a3;
  v58 = (_QWORD *)type metadata accessor for Logger(0);
  v57 = *(v58 - 1);
  __chkstk_darwin(v58);
  v56 = (char *)&v47 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for DeepLinkActivityType(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)&v47 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000E944(0, &qword_1000EDC18, (uint64_t (*)(uint64_t))&type metadata accessor for Presentation);
  __chkstk_darwin(v11);
  v13 = (char *)&v47 - v12;
  v14 = type metadata accessor for DataTypeDetailConfiguration.Context(0);
  v15 = *(_QWORD *)(v14 - 8);
  __chkstk_darwin(v14);
  v59 = (char *)&v47 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = type metadata accessor for HKTDataTypeDetailFactory(0);
  v18 = *(_QWORD *)(v17 - 8);
  __chkstk_darwin(v17);
  v61 = (char *)&v47 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = objc_msgSend((id)objc_opt_self(HKObjectType), "dataTypeWithCode:", a2);
  if (result)
  {
    v21 = result;
    sub_10006BC9C((uint64_t)&v65);
    if (v66)
    {
      v49 = v8;
      v48 = v7;
      v52 = v15;
      v53 = v18;
      v54 = v14;
      v50 = v17;
      v22 = sub_10001AF7C(&v65, (uint64_t)&v67);
      HKTDataTypeDetailFactory.init()(v22);
      v23 = v68;
      v24 = v69;
      sub_100012E04(&v67, v68);
      (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(v24 + 32))(&v65, v23, v24);
      v25 = objc_msgSend(objc_allocWithZone((Class)HKHealthStore), "init");
      v26 = type metadata accessor for PinnedContentManager(0);
      v27 = v25;
      v28 = v21;
      v29 = PinnedContentManager.__allocating_init(healthStore:domain:)(v27);
      sub_100028F08((uint64_t)&v65, (uint64_t)v64);
      v30 = v27;
      v31 = objc_msgSend(v30, "profileIdentifier");
      v32 = type metadata accessor for Presentation(0);
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v32 - 8) + 56))(v13, 1, 1, v32);
      v33 = static DataTypeDetailMode.defaultMode(for:presentation:)(v31, v13);

      sub_100071D4C((uint64_t)v13, &qword_1000EDC18, (uint64_t (*)(uint64_t))&type metadata accessor for Presentation);
      v63[3] = v26;
      v63[4] = &protocol witness table for PinnedContentManager;
      v63[0] = v29;
      v51 = v29;
      swift_retain(v29);
      v34 = v59;
      DataTypeDetailConfiguration.Context.init(healthExperienceStore:healthStore:mode:pinnedContentManager:chartContext:restorationUserActivity:)(v64, v30, v33, v63, 0, 0);
      v35 = (void *)HKTDataTypeDetailFactory.makeViewController(hkType:context:)(v28, v34);
      v36 = type metadata accessor for CompoundDataSourceCollectionViewController(0);
      v37 = swift_dynamicCastClass(v35, v36);
      v38 = v54;
      v39 = v53;
      if (v37)
      {
        v40 = (void *)v37;
        v41 = *(void (**)(char *, _QWORD, uint64_t))(v49 + 104);
        v58 = v28;
        v42 = v48;
        v41(v10, enum case for DeepLinkActivityType.dataTypeDetail(_:), v48);
        v43 = v62;
        if (v62)
          v44 = v60;
        else
          v44 = 0;
        v45 = v35;
        sub_100070638(v40, &v67, (uint64_t)v10, v55 & 1, v43, v44, (uint64_t)&unk_1000E0A98, (uint64_t)sub_100071B40, (uint64_t)&unk_1000E0AB0, (void (*)(void (*)(_QWORD), uint64_t))sub_100071DF4);

        swift_release(v51);
        (*(void (**)(char *, uint64_t))(v49 + 8))(v10, v42);
        v46 = v50;
        (*(void (**)(char *, uint64_t))(v52 + 8))(v34, v38);
        _s6Health23OpenSleepScheduleIntentVwxx_0(&v65);
        (*(void (**)(char *, uint64_t))(v39 + 8))(v61, v46);
      }
      else
      {

        if (v62)
          v62(0);

        swift_release(v51);
        (*(void (**)(char *, uint64_t))(v52 + 8))(v34, v38);
        _s6Health23OpenSleepScheduleIntentVwxx_0(&v65);
        (*(void (**)(char *, uint64_t))(v39 + 8))(v61, v50);
      }
      return (_QWORD *)_s6Health23OpenSleepScheduleIntentVwxx_0(&v67);
    }

    result = (_QWORD *)sub_100071A9C((uint64_t)&v65);
  }
  if (v62)
    return (_QWORD *)((uint64_t (*)(_QWORD))v62)(0);
  return result;
}

uint64_t sub_100070FFC(uint64_t a1, uint64_t a2, uint64_t a3, int a4, void (*a5)(_QWORD), uint64_t a6)
{
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _BYTE *v18;
  uint64_t v19;
  _BYTE *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char v24;
  uint64_t result;
  __n128 v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  id v34;
  id v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  _BYTE v39[4];
  int v40;
  uint64_t v41;
  uint64_t v42;
  void (*v43)(_QWORD);
  _BYTE v44[40];
  _BYTE v45[40];
  _QWORD v46[5];
  __int128 v47;
  uint64_t v48;
  _QWORD v49[3];
  uint64_t v50;
  uint64_t v51;

  v42 = a6;
  v43 = a5;
  v40 = a4;
  v41 = type metadata accessor for DeepLinkActivityType(0);
  v8 = *(_QWORD *)(v41 - 8);
  __chkstk_darwin(v41);
  v10 = &v39[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_10000E944(0, (unint64_t *)&unk_1000EF3A0, (uint64_t (*)(uint64_t))&type metadata accessor for HKTypeGroup);
  __chkstk_darwin(v11);
  v13 = &v39[-v12];
  v14 = type metadata accessor for HKTypeGroup(0);
  v15 = *(_QWORD *)(v14 - 8);
  v16 = __chkstk_darwin(v14);
  v18 = &v39[-((v17 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v16);
  v20 = &v39[-v19];
  sub_10006BC9C((uint64_t)&v47);
  if (!v48)
  {
    result = sub_100071A9C((uint64_t)&v47);
    goto LABEL_11;
  }
  v21 = sub_10001AF7C(&v47, (uint64_t)v49);
  v22 = static HKTypeGroup.groupsByKeyword.getter(v21);
  if (*(_QWORD *)(v22 + 16))
  {
    swift_bridgeObjectRetain(a3);
    v23 = sub_10007DF44(a2, a3);
    if ((v24 & 1) != 0)
    {
      (*(void (**)(_BYTE *, unint64_t, uint64_t))(v15 + 16))(v13, *(_QWORD *)(v22 + 56) + *(_QWORD *)(v15 + 72) * v23, v14);
      (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v13, 0, 1, v14);
    }
    else
    {
      (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(v15 + 56))(v13, 1, 1, v14);
    }
    swift_bridgeObjectRelease(a3);
  }
  else
  {
    (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(v15 + 56))(v13, 1, 1, v14);
  }
  v26 = swift_bridgeObjectRelease(v22);
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t, __n128))(v15 + 48))(v13, 1, v14, v26) == 1)
  {
    sub_100071D4C((uint64_t)v13, (unint64_t *)&unk_1000EF3A0, (uint64_t (*)(uint64_t))&type metadata accessor for HKTypeGroup);
    result = _s6Health23OpenSleepScheduleIntentVwxx_0(v49);
LABEL_11:
    if (v43)
      return ((uint64_t (*)(_QWORD))v43)(0);
    return result;
  }
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v15 + 32))(v20, v13, v14);
  v27 = v50;
  v28 = v51;
  sub_100012E04(v49, v50);
  v29 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v28 + 40))(v27, v28);
  v30 = v50;
  v31 = v51;
  sub_100012E04(v49, v50);
  (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(v31 + 48))(&v47, v30, v31);
  v32 = v50;
  v33 = v51;
  sub_100012E04(v49, v50);
  (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(v33 + 56))(v46, v32, v33);
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v15 + 16))(v18, v20, v14);
  sub_100028F08((uint64_t)&v47, (uint64_t)v45);
  sub_100028F08((uint64_t)v46, (uint64_t)v44);
  v34 = objc_allocWithZone((Class)type metadata accessor for CategoryViewController(0));
  v35 = v29;
  v36 = (void *)CategoryViewController.init(typeGroup:healthStore:healthExperienceStore:pinnedContentManager:)(v18, v35, v45, v44);
  v37 = v41;
  (*(void (**)(_BYTE *, _QWORD, uint64_t))(v8 + 104))(v10, enum case for DeepLinkActivityType.category(_:), v41);
  if (v43)
    v38 = v42;
  else
    v38 = 0;
  sub_100070638(v36, v49, (uint64_t)v10, v40 & 1, v43, v38, (uint64_t)&unk_1000E0AE8, (uint64_t)sub_100071B40, (uint64_t)&unk_1000E0B00, (void (*)(void (*)(_QWORD), uint64_t))sub_100071DF4);

  (*(void (**)(_BYTE *, uint64_t))(v8 + 8))(v10, v37);
  _s6Health23OpenSleepScheduleIntentVwxx_0(v46);
  _s6Health23OpenSleepScheduleIntentVwxx_0(&v47);
  (*(void (**)(_BYTE *, uint64_t))(v15 + 8))(v20, v14);
  return _s6Health23OpenSleepScheduleIntentVwxx_0(v49);
}

void sub_1000713F4(uint64_t a1, uint64_t a2, char a3, void (*a4)(_QWORD), uint64_t a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  id v13;
  void *v14;
  id v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  id v21;
  __int128 v22;
  uint64_t v23;
  _QWORD v24[5];

  v9 = type metadata accessor for DeepLinkActivityType(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v22 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = objc_msgSend((id)objc_opt_self(HKObjectType), "dataTypeWithCode:", a2);
  if (v13)
  {
    v14 = v13;
    v15 = objc_msgSend((id)objc_opt_self(HBXViewControllerFactory), "sharedInstance");
    v16 = objc_msgSend(v15, "createListViewController:", v14);

    v17 = objc_opt_self(UITableViewController);
    v18 = swift_dynamicCastObjCClass(v16, v17);
    if (v18)
    {
      v19 = (void *)v18;
      sub_10006BC9C((uint64_t)&v22);
      if (v23)
      {
        sub_10001AF7C(&v22, (uint64_t)v24);
        (*(void (**)(char *, _QWORD, uint64_t))(v10 + 104))(v12, enum case for DeepLinkActivityType.summary(_:), v9);
        if (a4)
          v20 = a5;
        else
          v20 = 0;
        v21 = v16;
        sub_100070638(v19, v24, (uint64_t)v12, a3 & 1, a4, v20, (uint64_t)&unk_1000E0B38, (uint64_t)sub_100071B40, (uint64_t)&unk_1000E0B50, (void (*)(void (*)(_QWORD), uint64_t))sub_100071DF4);

        (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
        _s6Health23OpenSleepScheduleIntentVwxx_0(v24);
      }
      else
      {
        sub_100071A9C((uint64_t)&v22);
        if (a4)
          a4(0);

      }
      return;
    }

  }
  if (a4)
    a4(0);
}

uint64_t sub_100071600(uint64_t a1, uint64_t a2, char a3, uint64_t (*a4)(_QWORD), uint64_t a5)
{
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  void *v15;
  id v16;
  void *v17;
  id v18;
  id v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  id v25;
  _QWORD *v26;
  void *v27;
  _QWORD *v28;
  id v29;
  uint64_t result;
  uint64_t v31;
  id v32;
  __int128 v33;
  uint64_t (*v34)(uint64_t);
  void *v35;
  uint64_t (*v36)();
  _QWORD *v37;
  id v38;
  _QWORD v39[3];
  uint64_t v40;
  uint64_t v41;

  sub_10006BC9C((uint64_t)&v33);
  if (!v35)
  {
    result = sub_100071A9C((uint64_t)&v33);
    if (!a4)
      return result;
    return a4(0);
  }
  sub_10001AF7C(&v33, (uint64_t)v39);
  v9 = v40;
  v10 = v41;
  sub_100012E04(v39, v40);
  v11 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v10 + 24))(v9, v10);
  if (!v11)
  {
    result = _s6Health23OpenSleepScheduleIntentVwxx_0(v39);
    if (!a4)
      return result;
    return a4(0);
  }

  v12 = v40;
  v13 = v41;
  sub_100012E04(v39, v40);
  v14 = (id)(*(uint64_t (**)(uint64_t, uint64_t))(v13 + 24))(v12, v13);
  if (!v14)
    v14 = objc_msgSend(objc_allocWithZone((Class)HKHealthStore), "init");
  v15 = v14;
  v16 = objc_allocWithZone((Class)type metadata accessor for InternalSettingsViewController(0));
  v17 = (void *)sub_1000236E4(v15);

  v18 = objc_msgSend(objc_allocWithZone((Class)UINavigationController), "initWithRootViewController:", v17);
  v19 = objc_allocWithZone((Class)type metadata accessor for InternalFeedItemListViewController(0));
  v20 = swift_bridgeObjectRetain(a2);
  v21 = (void *)InternalFeedItemListViewController.init(contentKinds:)(v20);
  v22 = a3 & 1;
  objc_msgSend(v18, "pushViewController:animated:", v21, v22);
  sub_100028F08((uint64_t)v39, (uint64_t)&v33);
  v23 = sub_100013100(0, &qword_1000EDBA8, (uint64_t)&protocol descriptor for RootViewControllerProviding);
  v24 = type metadata accessor for MainTabBarController(0);
  if (swift_dynamicCast(&v38, &v33, v23, v24, 6))
  {
    v25 = v38;
    v26 = (_QWORD *)swift_allocObject(&unk_1000E0B88, 40, 7);
    v26[2] = a4;
    v26[3] = a5;
    v26[4] = v21;
    v36 = sub_100071B40;
    v37 = v26;
    *(_QWORD *)&v33 = _NSConcreteStackBlock;
    *((_QWORD *)&v33 + 1) = 1107296256;
    v34 = sub_100006988;
    v35 = &unk_1000E0BA0;
    v27 = _Block_copy(&v33);
    v28 = v37;
    sub_10003FBE0((uint64_t)a4, a5);
    v29 = v21;
    swift_release(v28);
    objc_msgSend(v25, "presentViewController:animated:completion:", v18, v22, v27);

    _Block_release(v27);
    v21 = v25;
  }
  else
  {
    sub_100028F08((uint64_t)v39, (uint64_t)&v33);
    v31 = type metadata accessor for MainSplitViewController();
    if (swift_dynamicCast(&v38, &v33, v23, v31, 6))
    {
      v32 = v38;
      objc_msgSend(v38, "showViewController:sender:", v18, 0);

    }
    else
    {
      if (a4)
        a4(0);

      v21 = v18;
    }
  }

  return _s6Health23OpenSleepScheduleIntentVwxx_0(v39);
}

id sub_100071904(id result)
{
  void *v1;
  id v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;

  if (!result)
    return result;
  result = objc_msgSend(result, "collectionView");
  if (!result)
  {
    __break(1u);
    return result;
  }
  v1 = result;
  v2 = objc_msgSend(result, "visibleCells");

  v3 = sub_100006D10(0, &qword_1000EEC58, UICollectionViewCell_ptr);
  v4 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v2, v3);

  if (!((unint64_t)v4 >> 62))
  {
    v5 = *(_QWORD *)((v4 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain(v4);
    if (v5)
      goto LABEL_5;
LABEL_12:
    swift_bridgeObjectRelease_n(v4, 2);
    return 0;
  }
LABEL_19:
  if (v4 < 0)
    v14 = v4;
  else
    v14 = v4 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v4);
  v5 = _CocoaArrayWrapper.endIndex.getter(v14);
  if (!v5)
    goto LABEL_12;
LABEL_5:
  v6 = 4;
  while (1)
  {
    if ((v4 & 0xC000000000000001) != 0)
      v7 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v6 - 4, v4);
    else
      v7 = *(id *)(v4 + 8 * v6);
    v8 = v7;
    v9 = v6 - 3;
    if (__OFADD__(v6 - 4, 1))
    {
      __break(1u);
      goto LABEL_19;
    }
    v10 = type metadata accessor for DataTypeDetailChartCell(0);
    if (swift_dynamicCastClass(v8, v10))
      break;

    ++v6;
    if (v9 == v5)
      goto LABEL_12;
  }
  v11 = swift_bridgeObjectRelease_n(v4, 2);
  v12 = (void *)dispatch thunk of DataTypeDetailChartCell.chartViewController.getter(v11);

  if (!v12)
    return 0;
  v13 = objc_opt_self(HKOverlayRoomViewController);
  result = (id)swift_dynamicCastObjCClass(v12, v13);
  if (!result)
  {

    return 0;
  }
  return result;
}

uint64_t sub_100071A9C(uint64_t a1)
{
  uint64_t v2;

  sub_100071AD8(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void sub_100071AD8(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_1000EDBA0)
  {
    v2 = sub_100013100(255, &qword_1000EDBA8, (uint64_t)&protocol descriptor for RootViewControllerProviding);
    v3 = type metadata accessor for Optional(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_1000EDBA0);
  }
}

id sub_100071B44(void *a1)
{
  id result;
  void *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  id v6;
  uint64_t i;
  id v8;
  void *v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;

  if (!a1)
    return 0;
  result = objc_msgSend(a1, "collectionView");
  if (result)
  {
    v2 = result;
    v3 = objc_msgSend(result, "visibleCells");

    v4 = sub_100006D10(0, &qword_1000EEC58, UICollectionViewCell_ptr);
    v5 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v3, v4);

    if ((unint64_t)v5 >> 62)
    {
LABEL_25:
      if (v5 < 0)
        v21 = v5;
      else
        v21 = v5 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v5);
      v6 = (id)_CocoaArrayWrapper.endIndex.getter(v21);
      if (v6)
      {
LABEL_5:
        for (i = 4; ; ++i)
        {
          if ((v5 & 0xC000000000000001) != 0)
            v8 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(i - 4, v5);
          else
            v8 = *(id *)(v5 + 8 * i);
          v9 = v8;
          v10 = (id)(i - 3);
          if (__OFADD__(i - 4, 1))
          {
            __break(1u);
            goto LABEL_25;
          }
          v11 = type metadata accessor for DataTypeDetailChartCell(0);
          if (swift_dynamicCastClass(v9, v11))
            break;

          if (v10 == v6)
          {
            swift_bridgeObjectRelease_n(v5, 2);
            return 0;
          }
        }
        v12 = swift_bridgeObjectRelease_n(v5, 2);
        v13 = dispatch thunk of DataTypeDetailChartCell.chartViewController.getter(v12);
        if (v13)
        {
          v14 = (void *)v13;
          v15 = objc_opt_self(HKInteractiveChartViewController);
          v16 = swift_dynamicCastObjCClass(v14, v15);
          if (v16)
          {
            v6 = (id)v16;
LABEL_21:

            return v6;
          }

        }
        v17 = dispatch thunk of DataTypeDetailChartCell.chartViewController.getter(v13);
        if (v17)
        {
          v18 = (void *)v17;
          v19 = objc_opt_self(HKOverlayRoomViewController);
          v20 = (void *)swift_dynamicCastObjCClass(v18, v19);
          if (v20)
          {
            v6 = objc_msgSend(v20, "chartController");

            goto LABEL_21;
          }

        }
        return 0;
      }
    }
    else
    {
      v6 = *(id *)((v5 & 0xFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain(v5);
      if (v6)
        goto LABEL_5;
    }
    swift_bridgeObjectRelease_n(v5, 2);
    return v6;
  }
  __break(1u);
  return result;
}

uint64_t sub_100071D4C(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t))
{
  uint64_t v4;

  sub_10000E944(0, a2, a3);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  return a1;
}

uint64_t sub_100071D98()
{
  uint64_t v0;

  if (*(_QWORD *)(v0 + 16))
    swift_release(*(_QWORD *)(v0 + 24));

  return swift_deallocObject(v0, 40, 7);
}

uint64_t sub_100071DCC()
{
  uint64_t v0;
  uint64_t (*v1)(_QWORD);
  uint64_t result;

  v1 = *(uint64_t (**)(_QWORD))(v0 + 16);
  if (v1)
    return v1(*(_QWORD *)(v0 + 32));
  return result;
}

uint64_t sub_100071E20()
{
  uint64_t v0;
  uint64_t v1;

  sub_1000076D8(0, (unint64_t *)&unk_1000ECA90, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
  v1 = v0;
  sub_10001C884(v0, qword_1000F10F8);
  sub_10001C86C(v1, (uint64_t)qword_1000F10F8);
  return URL.init(string:)(0xD000000000000022, 0x80000001000BCCF0);
}

uint64_t MicaAnimationView.Animation.welcome.unsafeMutableAddressor()
{
  uint64_t v0;

  if (qword_1000EC118 != -1)
    swift_once(&qword_1000EC118, sub_1000758B0);
  v0 = type metadata accessor for MicaAnimationView.Animation(0);
  return sub_10001C86C(v0, (uint64_t)static MicaAnimationView.Animation.welcome);
}

uint64_t sub_100071EE0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = OBJC_IVAR____TtC6Health21WelcomeViewController____lazy_storage___signalProvider;
  v2 = *(_QWORD *)(v0 + OBJC_IVAR____TtC6Health21WelcomeViewController____lazy_storage___signalProvider);
  if (v2)
  {
    v3 = *(_QWORD *)(v0 + OBJC_IVAR____TtC6Health21WelcomeViewController____lazy_storage___signalProvider);
  }
  else
  {
    v4 = v0;
    v5 = type metadata accessor for HealthWelcomeFlowSignalProvider();
    swift_allocObject(v5, *(unsigned int *)(v5 + 48), *(unsigned __int16 *)(v5 + 52));
    v3 = HealthWelcomeFlowSignalProvider.init()();
    v6 = *(_QWORD *)(v4 + v1);
    *(_QWORD *)(v4 + v1) = v3;
    swift_retain(v3);
    swift_release(v6);
    v2 = 0;
  }
  swift_retain(v2);
  return v3;
}

uint64_t sub_100071F58()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char v4;

  sub_1000138C8(0, (unint64_t *)&qword_1000ECE60, (uint64_t)&type metadata for Bool, (uint64_t (*)(_QWORD, uint64_t))&type metadata accessor for UserDefault);
  v1 = v0;
  sub_10001C884(v0, qword_1000EF3B0);
  sub_10001C86C(v1, (uint64_t)qword_1000EF3B0);
  sub_100006D10(0, (unint64_t *)&unk_1000EF0B0, NSUserDefaults_ptr);
  v2 = static NSUserDefaults.healthAppShared.getter();
  v4 = 0;
  return UserDefault.init(key:userDefaults:fallbackValue:isAppleInternalOnly:)(0xD00000000000001CLL, 0x80000001000BCB30, v2, &v4, 0, &type metadata for Bool);
}

id sub_100072040(uint64_t a1)
{
  void *v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE *v17;
  uint64_t v18;
  id v19;
  _QWORD *v20;
  id v21;
  uint64_t v22;
  id v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  void *v45;
  void *v46;
  NSString v47;
  Swift::String v48;
  Swift::String v49;
  uint64_t v50;
  NSString v51;
  objc_class *v52;
  id v53;
  id v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  id v58;
  NSString v59;
  id v60;
  uint64_t v61;
  uint64_t v62;
  id v63;
  Class isa;
  id v65;
  uint64_t v67;
  uint64_t v68;
  id v69;
  uint64_t v70;
  objc_super v71;
  __int128 v72;
  uint64_t v73;
  void *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  _UNKNOWN **v78;

  v70 = a1;
  v2 = type metadata accessor for Locale(0);
  __chkstk_darwin(v2);
  v4 = (char *)&v67 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for String.LocalizationValue(0);
  __chkstk_darwin(v5);
  v7 = (char *)&v67 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for PluginAdvertisableFeatureSourceContext.DeviceSource(0);
  v67 = *(_QWORD *)(v8 - 8);
  v68 = v8;
  __chkstk_darwin(v8);
  v10 = (char *)&v67 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for MicaAnimationView.Animation(0);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v14 = (char *)&v67 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = OBJC_IVAR____TtC6Health21WelcomeViewController_animationView;
  v16 = qword_1000EC118;
  v17 = v1;
  if (v16 != -1)
    swift_once(&qword_1000EC118, sub_1000758B0);
  v18 = sub_10001C86C(v11, (uint64_t)static MicaAnimationView.Animation.welcome);
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v14, v18, v11);
  v19 = objc_allocWithZone((Class)type metadata accessor for MicaAnimationView(0));
  *(_QWORD *)&v17[v15] = MicaAnimationView.init(animation:inset:scaleToFill:)(v14, 0, 1);
  *(_QWORD *)&v17[OBJC_IVAR____TtC6Health21WelcomeViewController_cloudSyncBuddyAvailabilityProvider] = 0;
  v20 = &v17[OBJC_IVAR____TtC6Health21WelcomeViewController_completionHandler];
  *v20 = 0;
  v20[1] = 0;
  *(_QWORD *)&v17[OBJC_IVAR____TtC6Health21WelcomeViewController____lazy_storage___signalProvider] = 0;
  *(_QWORD *)&v17[OBJC_IVAR____TtC6Health21WelcomeViewController_statusPublisher] = 0;
  v17[OBJC_IVAR____TtC6Health21WelcomeViewController_didEnableCloudSync] = 0;
  v21 = objc_msgSend(objc_allocWithZone((Class)HKHealthStore), "init");
  *(_QWORD *)&v17[OBJC_IVAR____TtC6Health21WelcomeViewController_healthStore] = v21;
  v22 = type metadata accessor for CountryOracle(0);
  swift_allocObject(v22, *(unsigned int *)(v22 + 48), *(unsigned __int16 *)(v22 + 52));
  v23 = v21;
  v69 = v23;
  v24 = CountryOracle.init(mobileCountryCodeManagerProvider:)(sub_100075B0C, 0);
  v77 = v22;
  v78 = (_UNKNOWN **)sub_10000F6E4(&qword_1000EF4B8, 255, (uint64_t (*)(uint64_t))&type metadata accessor for CountryOracle, (uint64_t)&protocol conformance descriptor for CountryOracle);
  v75 = v24;
  (*(void (**)(char *, _QWORD, uint64_t))(v67 + 104))(v10, enum case for PluginAdvertisableFeatureSourceContext.DeviceSource.activePairedDevice(_:), v68);
  v25 = type metadata accessor for HealthPluginAdvertisableFeatureManagerFactory(0);
  swift_allocObject(v25, *(unsigned int *)(v25 + 48), *(unsigned __int16 *)(v25 + 52));
  v26 = HealthPluginAdvertisableFeatureManagerFactory.init(healthStore:countryProvider:activeDeviceSource:queue:)(v23, &v75, v10, 0);
  v27 = type metadata accessor for HealthAppNotificationManager(0);
  v28 = HealthAppNotificationManager.__allocating_init()();
  *(_QWORD *)&v17[OBJC_IVAR____TtC6Health21WelcomeViewController_notificationManager] = v28;
  v77 = v27;
  v78 = &off_1000DE570;
  v75 = v28;
  v68 = v28;
  v73 = v25;
  v74 = &protocol witness table for HealthPluginAdvertisableFeatureManagerFactory;
  *(_QWORD *)&v72 = v26;
  v67 = v26;
  v29 = type metadata accessor for HealthNotificationsWelcomeViewModel();
  v30 = swift_allocObject(v29, 120, 7);
  v31 = sub_10002AAF0((uint64_t)&v75, v27);
  __chkstk_darwin(v31);
  v33 = (uint64_t *)((char *)&v67 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v34 + 16))(v33);
  v35 = *v33;
  *(_QWORD *)(v30 + 40) = v27;
  *(_QWORD *)(v30 + 48) = &off_1000DE570;
  *(_QWORD *)(v30 + 16) = v35;
  *(_BYTE *)(v30 + 96) = 0;
  *(_QWORD *)(v30 + 104) = 0;
  *(_QWORD *)(v30 + 112) = 0;
  sub_10001AF7C(&v72, v30 + 56);
  swift_retain_n(v28, 2);
  swift_retain(v26);
  _s6Health23OpenSleepScheduleIntentVwxx_0(&v75);
  *(_QWORD *)&v17[OBJC_IVAR____TtC6Health21WelcomeViewController_healthNotificationViewModel] = v30;
  sub_100075B24(v70, (uint64_t)&v17[OBJC_IVAR____TtC6Health21WelcomeViewController_deepLinkCanceler]);

  v36 = String.LocalizationValue.init(stringLiteral:)(0xD000000000000013, 0x80000001000BCB50);
  static Locale.current.getter(v36);
  String.init(localized:table:bundle:locale:comment:)(v7, 0, 0, 0, v4, 0, 0, 256);
  v38 = v37;
  v39 = String.LocalizationValue.init(stringLiteral:)(0xD000000000000016, 0x80000001000BCB70);
  static Locale.current.getter(v39);
  v40 = String.init(localized:table:bundle:locale:comment:)(v7, 0, 0, 0, v4, 0, 0, 256);
  v42 = v41;
  v43 = String.LocalizationValue.init(stringLiteral:)(0xD000000000000019, 0x80000001000BCB90);
  static Locale.current.getter(v43);
  v44 = String.init(localized:table:bundle:locale:comment:)(v7, 0, 0, 0, v4, 0, 0, 256);
  v46 = v45;
  v47 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v38);
  v75 = v40;
  v76 = v42;
  v48._countAndFlagsBits = 2570;
  v48._object = (void *)0xE200000000000000;
  String.append(_:)(v48);
  v49._countAndFlagsBits = v44;
  v49._object = v46;
  String.append(_:)(v49);
  swift_bridgeObjectRelease(v46);
  v50 = v76;
  v51 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v50);
  v52 = (objc_class *)type metadata accessor for WelcomeViewController();
  v71.receiver = v17;
  v71.super_class = v52;
  v53 = objc_msgSendSuper2(&v71, "initWithTitle:detailText:icon:contentLayout:", v47, v51, 0, 1);

  v54 = v53;
  v55 = String.LocalizationValue.init(stringLiteral:)(0xD00000000000001ALL, 0x80000001000BCBB0);
  static Locale.current.getter(v55);
  String.init(localized:table:bundle:locale:comment:)(v7, 0, 0, 0, v4, 0, 0, 256);
  v57 = v56;
  v58 = objc_msgSend((id)objc_opt_self(OBBoldTrayButton), "boldButton");
  objc_msgSend(v58, "addTarget:action:forControlEvents:", v54, "didTapNext:", 64);
  v59 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v57);
  objc_msgSend(v58, "setTitle:forState:", v59, 0);

  v60 = objc_msgSend(v54, "buttonTray");
  objc_msgSend(v60, "addButton:", v58);

  sub_1000138C8(0, (unint64_t *)&qword_1000EF4C0, (uint64_t)&type metadata for String, (uint64_t (*)(_QWORD, uint64_t))&type metadata accessor for _ContiguousArrayStorage);
  v62 = swift_allocObject(v61, 64, 7);
  *(_OWORD *)(v62 + 16) = xmmword_1000B1580;
  *(_QWORD *)(v62 + 32) = 0xD000000000000028;
  *(_QWORD *)(v62 + 40) = 0x80000001000BCBD0;
  strcpy((char *)(v62 + 48), "ContinueButton");
  *(_BYTE *)(v62 + 63) = -18;
  v63 = v58;
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v62);
  v65 = (id)HKUIJoinStringsForAutomationIdentifier(isa);

  objc_msgSend(v63, "setAccessibilityIdentifier:", v65);
  swift_release(v68);
  swift_release(v67);

  sub_1000137A0(v70, (uint64_t (*)(_QWORD))sub_100075B68);
  return v54;
}

void sub_1000727B4()
{
  char *v0;
  id v1;
  void *v2;
  NSString v3;
  id v4;
  void *v5;
  unsigned int v6;
  objc_super v7;

  v7.receiver = v0;
  v7.super_class = (Class)type metadata accessor for WelcomeViewController();
  objc_msgSendSuper2(&v7, "viewDidLoad");
  v1 = objc_msgSend(v0, "view");
  if (!v1)
  {
    __break(1u);
    goto LABEL_7;
  }
  v2 = v1;
  v3 = String._bridgeToObjectiveC()();
  objc_msgSend(v2, "setAccessibilityIdentifier:", v3);

  sub_100072F04(*(void **)&v0[OBJC_IVAR____TtC6Health21WelcomeViewController_animationView]);
  v4 = objc_msgSend((id)objc_opt_self(_HKBehavior), "sharedBehavior");
  if (!v4)
  {
LABEL_7:
    __break(1u);
    return;
  }
  v5 = v4;
  v6 = objc_msgSend(v4, "isiPad");

  if (v6)
    OBWelcomeController.removeOBContentViewHeightConstraints()();
}

void sub_100072908(void *a1, uint64_t a2, uint64_t a3, const char **a4, char a5, char a6)
{
  const char *v10;
  id v11;
  void *v12;
  id v13;
  void *v14;
  unsigned int v15;
  id v16;
  id v17;
  objc_super v18;

  v18.receiver = a1;
  v18.super_class = (Class)type metadata accessor for WelcomeViewController();
  v10 = *a4;
  v11 = v18.receiver;
  objc_msgSendSuper2(&v18, v10, a3);
  v12 = (void *)objc_opt_self(_HKBehavior);
  v13 = objc_msgSend(v12, "sharedBehavior", v18.receiver, v18.super_class);
  if (v13)
  {
    v14 = v13;
    v15 = objc_msgSend(v13, "isiPad");

    if (v15)
    {
      v16 = objc_msgSend(v11, "navigationController");
      if (v16)
      {
        v17 = v16;
        objc_msgSend(v16, "setNavigationBarHidden:animated:", a5 & 1, a6 & 1);

        v11 = v17;
      }
    }

  }
  else
  {
    __break(1u);
  }
}

void sub_100072A1C(void *a1, uint64_t a2, uint64_t a3, const char **a4, void (*a5)(id))
{
  const char *v8;
  id v9;
  id v10;
  objc_super v11;

  v11.receiver = a1;
  v11.super_class = (Class)type metadata accessor for WelcomeViewController();
  v8 = *a4;
  v9 = v11.receiver;
  v10 = objc_msgSendSuper2(&v11, v8, a3);
  a5(v10);

}

void sub_100072A8C(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  id v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  id v34;

  v2 = v1;
  v32 = a1;
  sub_1000076D8(0, &qword_1000EF4E0, (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.SchedulerOptions, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
  __chkstk_darwin(v4);
  v6 = (char *)&v31 - v5;
  sub_100075E88(0);
  v8 = v7;
  v9 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v11 = (char *)&v31 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100075FF4(0);
  v13 = v12;
  v33 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v15 = (char *)&v31 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  objc_msgSend(a1, "showsBusyIndicator");
  sub_100006D10(0, &qword_1000EF530, HKCloudSyncObserver_ptr);
  v16 = (void *)static HKCloudSyncObserver.statusPublisher(for:)(*(_QWORD *)(v2
                                                                           + OBJC_IVAR____TtC6Health21WelcomeViewController_healthStore));
  v34 = v16;
  sub_100075F04(0);
  v18 = v17;
  v19 = sub_10000F6E4(&qword_1000EF510, 255, (uint64_t (*)(uint64_t))sub_100075F04, (uint64_t)&protocol conformance descriptor for AnyPublisher<A, B>);
  Publisher.first()(v18, v19);
  swift_release(v16);
  v20 = sub_100006D10(0, (unint64_t *)&qword_1000ED910, OS_dispatch_queue_ptr);
  v34 = (id)static OS_dispatch_queue.main.getter();
  v21 = type metadata accessor for OS_dispatch_queue.SchedulerOptions(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 56))(v6, 1, 1, v21);
  v22 = sub_10000F6E4((unint64_t *)&unk_1000EF520, 255, (uint64_t (*)(uint64_t))sub_100075E88, (uint64_t)&protocol conformance descriptor for Publishers.First<A>);
  v23 = sub_1000760AC();
  Publisher.receive<A>(on:options:)(&v34, v6, v8, v20, v22, v23);
  sub_10001EDAC((uint64_t)v6, &qword_1000EF4E0, (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.SchedulerOptions);

  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  v24 = swift_allocObject(&unk_1000E0C98, 24, 7);
  swift_unknownObjectWeakInit(v24 + 16, v2);
  v25 = swift_allocObject(&unk_1000E0EA0, 32, 7);
  v26 = v32;
  *(_QWORD *)(v25 + 16) = v32;
  *(_QWORD *)(v25 + 24) = v24;
  v27 = sub_10000F6E4(&qword_1000EF538, 255, (uint64_t (*)(uint64_t))sub_100075FF4, (uint64_t)&protocol conformance descriptor for Publishers.ReceiveOn<A, B>);
  v28 = v26;
  v29 = Publisher<>.sink(receiveValue:)(sub_100076130, v25, v13, v27);
  swift_release(v25);
  (*(void (**)(char *, uint64_t))(v33 + 8))(v15, v13);
  v30 = *(_QWORD *)(v2 + OBJC_IVAR____TtC6Health21WelcomeViewController_statusPublisher);
  *(_QWORD *)(v2 + OBJC_IVAR____TtC6Health21WelcomeViewController_statusPublisher) = v29;
  swift_release(v30);
  LOWORD(v34) = 0;
  sub_100046898();
  AnalyticsSubmitting.submit()();
}

void sub_100072DBC(uint64_t a1, id a2, uint64_t a3)
{
  void *v3;
  char v4;
  uint64_t v5;
  uint64_t Strong;
  void *v7;
  char v8;
  char *v9;
  void *v10;
  char *v11;
  id v12;
  void *v13;
  char v14[24];

  v3 = *(void **)a1;
  v4 = *(_BYTE *)(a1 + 8);
  v5 = a3 + 16;
  objc_msgSend(a2, "hidesBusyIndicator");
  swift_beginAccess(v5, v14, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(v5);
  if (Strong)
  {
    v7 = (void *)Strong;
    if ((v4 & 1) != 0)
      v8 = 0;
    else
      v8 = objc_msgSend(v3, "accountSupportsSecureContainer");
    sub_10006F5BC(v8);
    v10 = v9;
    v11 = &v9[qword_1000EF340];
    *((_QWORD *)v11 + 1) = &off_1000E0C60;
    swift_unknownObjectWeakAssign(v11, v7);
    v12 = objc_msgSend(v7, "navigationController");
    if (v12)
    {
      v13 = v12;
      objc_msgSend(v12, "pushViewController:animated:", v10, 1);

    }
  }
}

void sub_100072F04(void *a1)
{
  void *v1;
  id v3;
  id v4;
  void *v5;
  id v6;
  id v7;
  id v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  id v13;
  id v14;
  id v15;
  id v16;
  id v17;
  id v18;
  id v19;
  id v20;
  id v21;
  id v22;
  id v23;
  id v24;
  id v25;
  id v26;
  id v27;
  uint64_t v28;
  Class isa;

  v3 = objc_msgSend(v1, "contentView");
  objc_msgSend(v3, "addSubview:", a1);

  v4 = objc_msgSend(v1, "contentView");
  v5 = (void *)objc_opt_self(UIColor);
  v6 = objc_msgSend(v5, "systemBackgroundColor");
  objc_msgSend(v4, "setBackgroundColor:", v6);

  v7 = objc_msgSend(v1, "contentView");
  objc_msgSend(v7, "setClipsToBounds:", 1);

  v8 = objc_msgSend(v5, "systemBackgroundColor");
  objc_msgSend(a1, "setBackgroundColor:", v8);

  objc_msgSend(a1, "setTranslatesAutoresizingMaskIntoConstraints:", 0);
  v9 = (void *)objc_opt_self(NSLayoutConstraint);
  sub_1000138C8(0, (unint64_t *)&qword_1000ED9C0, (uint64_t)&type metadata for Swift.AnyObject + 8, (uint64_t (*)(_QWORD, uint64_t))&type metadata accessor for _ContiguousArrayStorage);
  v11 = swift_allocObject(v10, 64, 7);
  *(_OWORD *)(v11 + 16) = xmmword_1000B4AC0;
  v12 = objc_msgSend(a1, "topAnchor");
  v13 = objc_msgSend(v1, "contentView");
  v14 = objc_msgSend(v13, "topAnchor");

  v15 = objc_msgSend(v12, "constraintEqualToAnchor:", v14);
  *(_QWORD *)(v11 + 32) = v15;
  v16 = objc_msgSend(a1, "leadingAnchor");
  v17 = objc_msgSend(v1, "contentView");
  v18 = objc_msgSend(v17, "leadingAnchor");

  v19 = objc_msgSend(v16, "constraintEqualToAnchor:", v18);
  *(_QWORD *)(v11 + 40) = v19;
  v20 = objc_msgSend(a1, "bottomAnchor");
  v21 = objc_msgSend(v1, "contentView");
  v22 = objc_msgSend(v21, "bottomAnchor");

  v23 = objc_msgSend(v20, "constraintEqualToAnchor:", v22);
  *(_QWORD *)(v11 + 48) = v23;
  v24 = objc_msgSend(a1, "trailingAnchor");
  v25 = objc_msgSend(v1, "contentView");
  v26 = objc_msgSend(v25, "trailingAnchor");

  v27 = objc_msgSend(v24, "constraintEqualToAnchor:", v26);
  *(_QWORD *)(v11 + 56) = v27;
  specialized Array._endMutation()(v28);
  sub_100006D10(0, &qword_1000EF2B8, NSLayoutConstraint_ptr);
  isa = Array._bridgeToObjectiveC()().super.isa;
  objc_msgSend(v9, "activateConstraints:", isa, swift_bridgeObjectRelease(v11).n128_f64[0]);

}

void sub_1000732BC(void *a1)
{
  void *v1;
  void *v2;
  id v4;
  id v5;
  unsigned int v6;
  id v7;
  unsigned int v8;
  id v9;
  id v10;
  id v11;
  id v12;
  id v13;
  id v14;
  void *v15;
  void *v16;
  id v17;

  v2 = v1;
  v4 = objc_msgSend(objc_allocWithZone((Class)_HKBehavior), "init");
  v5 = objc_msgSend(v4, "features");

  if (v5)
  {
    v6 = objc_msgSend(v5, "stanley");

    if (v6
      && (v7 = objc_msgSend(objc_allocWithZone((Class)_HKBehavior), "init"),
          v8 = objc_msgSend(v7, "isiPad"),
          v7,
          v8))
    {
      objc_allocWithZone((Class)type metadata accessor for WelcomeiPadHealthKitSyncViewController(0));
      v9 = a1;
      v10 = v2;
      sub_10005FD94(v9, (uint64_t)v2, (uint64_t)&off_1000E0C28, 0);
    }
    else
    {
      objc_allocWithZone((Class)type metadata accessor for CloudSyncWelcomeViewController());
      v12 = a1;
      v13 = v2;
      v11 = sub_100080DCC(v12, (uint64_t)v2, (uint64_t)&off_1000E0C50);
    }
    v17 = v11;
    v14 = objc_msgSend(v2, "navigationController");
    v15 = v17;
    if (v14)
    {
      v16 = v14;
      objc_msgSend(v14, "pushViewController:animated:");

      v15 = v17;
    }

  }
  else
  {
    __break(1u);
  }
}

void sub_100073430()
{
  char *v0;
  id v1;
  id v2;
  void *v3;
  id v4;

  v1 = objc_msgSend(*(id *)&v0[OBJC_IVAR____TtC6Health21WelcomeViewController_healthStore], "viewControllerFactory");
  v4 = objc_msgSend(v1, "createBuddyViewControllerWithHealthDetailsLast:", 0);

  objc_msgSend(v4, "setDelegate:", v0);
  v2 = objc_msgSend(v0, "navigationController");
  if (v2)
  {
    v3 = v2;
    objc_msgSend(v2, "pushViewController:animated:", v4, 1);

  }
}

void sub_1000734E4()
{
  char *v0;
  char *v1;
  uint64_t ObjectType;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  id v7;
  void *v8;
  objc_class *v9;
  id v10;
  id v11;
  void *v12;
  id v13;
  id v14;
  id v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  NSObject *v21;
  os_log_type_t v22;
  uint8_t *v23;
  uint64_t v24;
  uint64_t MetatypeMetadata;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  id v30;
  _OWORD v31[2];
  uint64_t v32;
  uint64_t v33;

  v1 = v0;
  ObjectType = swift_getObjectType(v0);
  v3 = type metadata accessor for Logger(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v29 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = objc_msgSend(v1, "resolvedHealthStore");
  if (v7)
  {
    v8 = v7;
    v9 = (objc_class *)type metadata accessor for CloudSyncStateObserver(0);
    memset(v31, 0, sizeof(v31));
    v32 = 0;
    v10 = objc_allocWithZone(v9);
    v11 = v8;
    v12 = (void *)CloudSyncStateObserver.init(healthStore:store:)(v11, v31);
    v13 = objc_allocWithZone((Class)ACAccountStore);
    v14 = v12;
    v15 = objc_msgSend(v13, "init");
    v16 = type metadata accessor for CloudSyncBuddyAvailabilityProvider();
    swift_allocObject(v16, 40, 7);
    v17 = sub_10005E65C((uint64_t)v14, (uint64_t)v15);
    v18 = *(_QWORD *)&v1[OBJC_IVAR____TtC6Health21WelcomeViewController_cloudSyncBuddyAvailabilityProvider];
    *(_QWORD *)&v1[OBJC_IVAR____TtC6Health21WelcomeViewController_cloudSyncBuddyAvailabilityProvider] = v17;
    swift_retain(v17);
    swift_release(v18);
    v19 = swift_allocObject(&unk_1000E0C98, 24, 7);
    swift_unknownObjectWeakInit(v19 + 16, v1);
    v30 = v11;
    sub_10005EE90((uint64_t)v17, v19, v30);

    swift_release(v17);
    swift_release(v19);

  }
  else
  {
    v20 = static Logger.view.getter(0);
    v21 = Logger.logObject.getter(v20);
    v22 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v21, v22))
    {
      v23 = (uint8_t *)swift_slowAlloc(12, -1);
      v24 = swift_slowAlloc(32, -1);
      v33 = v24;
      *(_DWORD *)v23 = 136315138;
      v30 = v23 + 4;
      *(_QWORD *)&v31[0] = ObjectType;
      MetatypeMetadata = swift_getMetatypeMetadata(ObjectType);
      v26 = String.init<A>(describing:)(v31, MetatypeMetadata);
      v28 = v27;
      *(_QWORD *)&v31[0] = sub_100012B20(v26, v27, &v33);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v31, (char *)v31 + 8, v30, v23 + 12);
      swift_bridgeObjectRelease(v28);
      _os_log_impl((void *)&_mh_execute_header, v21, v22, "[%s]: Failed to resolve HKHealthStore", v23, 0xCu);
      swift_arrayDestroy(v24, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v24, -1, -1);
      swift_slowDealloc(v23, -1, -1);
    }

    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    sub_100073430();
  }
}

void sub_1000737D0(char a1, uint64_t a2, void *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t Strong;
  void *v6;
  id v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v11;
  _BYTE v12[24];

  v3 = a2 + 16;
  if ((a1 & 0xFE) == 2)
  {
    v4 = a2 + 16;
LABEL_3:
    swift_beginAccess(v4, v12, 0, 0);
    Strong = swift_unknownObjectWeakLoadStrong(v3);
    if (!Strong)
      return;
    v6 = (void *)Strong;
    sub_100073430();
    goto LABEL_11;
  }
  if ((a1 & 1) == 0)
  {
    v7 = objc_msgSend(objc_allocWithZone((Class)_HKBehavior), "init");
    v8 = objc_msgSend(v7, "isiPad");

    v4 = v3;
    if (v8)
    {
      swift_beginAccess(v3, v12, 0, 0);
      v9 = swift_unknownObjectWeakLoadStrong(v3);
      if (!v9)
        return;
      v6 = (void *)v9;
      sub_1000738D8(0, 0);
      goto LABEL_11;
    }
    goto LABEL_3;
  }
  swift_beginAccess(v3, v12, 0, 0);
  v11 = swift_unknownObjectWeakLoadStrong(v3);
  if (!v11)
    return;
  v6 = (void *)v11;
  sub_1000732BC(a3);
LABEL_11:

}

uint64_t sub_1000738D8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t ObjectType;
  uint64_t v6;
  _QWORD *v7;

  ObjectType = swift_getObjectType(v2);
  v6 = swift_allocObject(&unk_1000E0C98, 24, 7);
  swift_unknownObjectWeakInit(v6 + 16, v2);
  v7 = (_QWORD *)swift_allocObject(&unk_1000E0E78, 48, 7);
  v7[2] = a1;
  v7[3] = a2;
  v7[4] = v6;
  v7[5] = ObjectType;
  sub_10003FBE0(a1, a2);
  swift_retain(v6);
  sub_100040168((uint64_t)sub_100076298, (uint64_t)v7);
  swift_release(v6);
  return swift_release(v7);
}

uint64_t sub_100073998(char a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  void *v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD aBlock[5];
  uint64_t v31;

  v10 = type metadata accessor for DispatchWorkItemFlags(0);
  v29 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v12 = (char *)&v26 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for DispatchQoS(0);
  v27 = *(_QWORD *)(v13 - 8);
  v28 = v13;
  __chkstk_darwin(v13);
  v15 = (char *)&v26 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100006D10(0, (unint64_t *)&qword_1000ED910, OS_dispatch_queue_ptr);
  v16 = (void *)static OS_dispatch_queue.main.getter();
  v17 = swift_allocObject(&unk_1000E0D10, 56, 7);
  *(_QWORD *)(v17 + 16) = a2;
  *(_QWORD *)(v17 + 24) = a3;
  *(_BYTE *)(v17 + 32) = a1;
  *(_QWORD *)(v17 + 40) = a4;
  *(_QWORD *)(v17 + 48) = a5;
  aBlock[4] = sub_100075CBC;
  v31 = v17;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100006988;
  aBlock[3] = &unk_1000E0D28;
  v18 = _Block_copy(aBlock);
  v19 = v31;
  sub_10003FBE0(a2, a3);
  swift_retain(a4);
  v20 = swift_release(v19);
  static DispatchQoS.unspecified.getter(v20);
  aBlock[0] = _swiftEmptyArrayStorage;
  v21 = sub_10000F6E4((unint64_t *)&qword_1000EDBE0, 255, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  sub_1000076D8(0, (unint64_t *)&qword_1000ED920, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Array);
  v23 = v22;
  v24 = sub_100013C8C();
  dispatch thunk of SetAlgebra.init<A>(_:)(aBlock, v23, v24, v10, v21);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v15, v12, v18);
  _Block_release(v18);

  (*(void (**)(char *, uint64_t))(v29 + 8))(v12, v10);
  return (*(uint64_t (**)(char *, uint64_t))(v27 + 8))(v15, v28);
}

void sub_100073BD0(void (*a1)(void), uint64_t a2, char a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t Strong;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  char *v30;
  id v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void (*v36)(void);
  uint64_t v37;
  uint64_t v38;
  uint64_t v39[3];

  v37 = a2;
  v9 = type metadata accessor for Logger(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = __chkstk_darwin(v9);
  v13 = (char *)&v34 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = a4 + 16;
  v15 = static Logger.view.getter(v11);
  v16 = Logger.logObject.getter(v15);
  v17 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v16, v17))
  {
    v18 = swift_slowAlloc(18, -1);
    v36 = a1;
    v19 = v18;
    v20 = swift_slowAlloc(32, -1);
    v39[0] = v20;
    *(_DWORD *)v19 = 136315394;
    v35 = v9;
    v21 = _typeName(_:qualified:)(a5, 0);
    v23 = v22;
    v38 = sub_100012B20(v21, v22, v39);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v38, v39, v19 + 4, v19 + 12);
    swift_bridgeObjectRelease(v23);
    *(_WORD *)(v19 + 12) = 1024;
    LODWORD(v38) = a3 & 1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v38, (char *)&v38 + 4, v19 + 14, v19 + 18);
    _os_log_impl((void *)&_mh_execute_header, v16, v17, "[%s] [TCC] Presenting notification authorization onboarding: %{BOOL}d", (uint8_t *)v19, 0x12u);
    swift_arrayDestroy(v20, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v20, -1, -1);
    v24 = v19;
    a1 = v36;
    swift_slowDealloc(v24, -1, -1);

    (*(void (**)(char *, uint64_t))(v10 + 8))(v13, v35);
  }
  else
  {

    (*(void (**)(char *, uint64_t))(v10 + 8))(v13, v9);
  }
  if ((a3 & 1) != 0)
  {
    swift_beginAccess(v14, v39, 0, 0);
    Strong = swift_unknownObjectWeakLoadStrong(v14);
    if (!Strong)
      goto LABEL_12;
    v26 = (void *)Strong;
    v27 = *(_QWORD *)(Strong + OBJC_IVAR____TtC6Health21WelcomeViewController_healthNotificationViewModel);
    v28 = *(_QWORD *)(Strong + OBJC_IVAR____TtC6Health21WelcomeViewController_notificationManager);
    objc_allocWithZone((Class)type metadata accessor for HealthNotificationsWelcomeViewController(0));
    swift_retain(v27);
    swift_retain(v28);
    v29 = sub_10008E6FC(v27, v28);
    v30 = &v29[qword_1000F00C8];
    *((_QWORD *)v30 + 1) = &off_1000E0C18;
    swift_unknownObjectWeakAssign(v30, v26);
    v31 = objc_msgSend(v26, "navigationController");
    if (v31)
    {
      v32 = v31;
      objc_msgSend(v31, "pushViewController:animated:", v29, 1);

    }
    else
    {

    }
  }
  else
  {
    swift_beginAccess(v14, v39, 0, 0);
    v33 = swift_unknownObjectWeakLoadStrong(v14);
    if (!v33)
      goto LABEL_12;
    v29 = (char *)v33;
    sub_100073EC8();
  }

LABEL_12:
  if (a1)
    a1();
}

uint64_t sub_100073EC8()
{
  void *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  void *v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  id v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  _QWORD aBlock[5];
  uint64_t v30;

  v1 = v0;
  v2 = type metadata accessor for DispatchWorkItemFlags(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)aBlock - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for DispatchQoS(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)aBlock - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000076D8(0, (unint64_t *)&qword_1000ECF98, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
  __chkstk_darwin(v10);
  v12 = (char *)aBlock - v11;
  v13 = (void *)objc_opt_self(_HKBehavior);
  objc_msgSend(v13, "setHasCompletedBuddyWithVersion:", kHKHAKeyCurrentBuddyVersion);
  sub_100006D10(0, (unint64_t *)&unk_1000EF0B0, NSUserDefaults_ptr);
  v14 = (void *)static NSUserDefaults.healthAppShared.getter();
  objc_msgSend(v14, "setBool:forKey:", 1, kHKHealthShowHealthDetailsTile);

  objc_msgSend(v13, "setForceBuddy:", 0);
  v15 = sub_100071EE0();
  Date.init()(v15);
  v16 = type metadata accessor for Date(0);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 56))(v12, 0, 1, v16);
  dispatch thunk of HealthWelcomeFlowSignalProvider.healthWelcomeFlowCompletionDate.setter(v12);
  swift_release(v15);
  v17 = sub_100071EE0();
  dispatch thunk of HealthWelcomeFlowSignalProvider.shouldShowHealthWelcomeFlowOnNextLaunch.setter(0);
  swift_release(v17);
  sub_100006D10(0, (unint64_t *)&qword_1000ED910, OS_dispatch_queue_ptr);
  v18 = (void *)static OS_dispatch_queue.main.getter();
  v19 = swift_allocObject(&unk_1000E0DD8, 24, 7);
  *(_QWORD *)(v19 + 16) = v1;
  aBlock[4] = sub_100075D28;
  v30 = v19;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100006988;
  aBlock[3] = &unk_1000E0DF0;
  v20 = _Block_copy(aBlock);
  v21 = v30;
  v22 = v1;
  v23 = swift_release(v21);
  static DispatchQoS.unspecified.getter(v23);
  aBlock[0] = _swiftEmptyArrayStorage;
  v24 = sub_10000F6E4((unint64_t *)&qword_1000EDBE0, 255, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  sub_1000076D8(0, (unint64_t *)&qword_1000ED920, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Array);
  v26 = v25;
  v27 = sub_100013C8C();
  dispatch thunk of SetAlgebra.init<A>(_:)(aBlock, v26, v27, v2, v24);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v9, v5, v20);
  _Block_release(v20);

  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
}

void sub_1000741FC(void *a1)
{
  uint64_t v2;
  void *v3;
  uint64_t v4;
  id v5;
  _QWORD v6[5];
  uint64_t v7;

  v2 = swift_allocObject(&unk_1000E0E28, 24, 7);
  *(_QWORD *)(v2 + 16) = a1;
  v6[4] = sub_100075D30;
  v7 = v2;
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 1107296256;
  v6[2] = sub_100006988;
  v6[3] = &unk_1000E0E40;
  v3 = _Block_copy(v6);
  v4 = v7;
  v5 = a1;
  swift_release(v4);
  objc_msgSend(v5, "dismissViewControllerAnimated:completion:", 1, v3);
  _Block_release(v3);
}

uint64_t sub_1000742B8(uint64_t result)
{
  void (*v1)(uint64_t);
  uint64_t v2;
  uint64_t v3;

  v1 = *(void (**)(uint64_t))(result + OBJC_IVAR____TtC6Health21WelcomeViewController_completionHandler);
  if (v1)
  {
    v2 = *(_QWORD *)(result + OBJC_IVAR____TtC6Health21WelcomeViewController_completionHandler + 8);
    v3 = swift_retain(v2);
    v1(v3);
    return sub_10001EEB0((uint64_t)v1, v2);
  }
  return result;
}

id sub_100074334()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for WelcomeViewController();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t sub_100074418(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t ObjectType;
  uint64_t v6;
  _QWORD *v7;

  ObjectType = swift_getObjectType(v2);
  sub_100046898();
  AnalyticsSubmitting.submit()();
  v6 = swift_allocObject(&unk_1000E0C98, 24, 7);
  swift_unknownObjectWeakInit(v6 + 16, v2);
  v7 = (_QWORD *)swift_allocObject(&unk_1000E0DB0, 48, 7);
  v7[2] = a1;
  v7[3] = a2;
  v7[4] = v6;
  v7[5] = ObjectType;
  swift_retain(a2);
  swift_retain(v6);
  sub_100040168((uint64_t)sub_100076298, (uint64_t)v7);
  swift_release(v6);
  return swift_release(v7);
}

void sub_10007456C(void *a1)
{
  uint64_t v1;
  uint64_t ObjectType;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  id v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  uint8_t *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  id v21;
  void *v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;

  ObjectType = swift_getObjectType(v1);
  v4 = type metadata accessor for Logger(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v24 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = objc_msgSend(a1, "profileIdentifier");
  v9 = objc_msgSend(v8, "type");

  if (v9 == (id)1)
  {
    v11 = static Logger.view.getter(v10);
    v12 = Logger.logObject.getter(v11);
    v13 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v12, v13))
    {
      v14 = (uint8_t *)swift_slowAlloc(12, -1);
      v15 = swift_slowAlloc(32, -1);
      v25 = v15;
      *(_DWORD *)v14 = 136315138;
      v16 = _typeName(_:qualified:)(ObjectType, 0);
      v18 = v17;
      v24 = sub_100012B20(v16, v17, &v25);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v24, &v25, v14 + 4, v14 + 12);
      swift_bridgeObjectRelease(v18);
      _os_log_impl((void *)&_mh_execute_header, v12, v13, "[%s] Sending notification that the primary profile name was updated", v14, 0xCu);
      swift_arrayDestroy(v15, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v15, -1, -1);
      swift_slowDealloc(v14, -1, -1);
    }

    v19 = (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    v20 = static NSNotificationName.primaryProfileNameWasUpdated.getter(v19);
    v21 = objc_allocWithZone((Class)type metadata accessor for PostNotificationOperation(0));
    v22 = (void *)PostNotificationOperation.init(name:userInfo:)(v20, 0);
    sub_100006D10(0, (unint64_t *)&qword_1000EDA38, NSOperationQueue_ptr);
    v23 = (void *)static NSOperationQueue.userInitiated.getter();
    objc_msgSend(v23, "addOperation:", v22);

  }
}

void sub_1000747F4(char a1)
{
  _BYTE *v1;
  _BYTE *v2;
  uint64_t ObjectType;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  uint8_t *v13;
  id v14;
  id v15;
  unsigned int v16;
  id v17;
  unsigned int v18;
  void *v19;
  id v20;
  char *v21;
  void *v22;
  char *v23;
  id v24;
  void *v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  int v29;
  uint64_t v30;

  v2 = v1;
  ObjectType = swift_getObjectType(v1);
  v5 = type metadata accessor for Logger(0);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = __chkstk_darwin(v5);
  v9 = (char *)&v28 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = static Logger.cloudSync.getter(v7);
  v11 = Logger.logObject.getter(v10);
  v12 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v11, v12))
  {
    v13 = (uint8_t *)swift_slowAlloc(8, -1);
    *(_DWORD *)v13 = 67109120;
    v29 = a1 & 1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v29, &v30, v13 + 4, v13 + 8);
    _os_log_impl((void *)&_mh_execute_header, v11, v12, "CloudSync buddy continued with enable cloud sync: %{BOOL}d", v13, 8u);
    swift_slowDealloc(v13, -1, -1);
  }

  (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v5);
  v2[OBJC_IVAR____TtC6Health21WelcomeViewController_didEnableCloudSync] = a1 & 1;
  v14 = objc_msgSend(objc_allocWithZone((Class)_HKBehavior), "init");
  v15 = objc_msgSend(v14, "features");

  if (v15)
  {
    v16 = objc_msgSend(v15, "stanley");

    if (v16
      && (v17 = objc_msgSend(objc_allocWithZone((Class)_HKBehavior), "init"),
          v18 = objc_msgSend(v17, "isiPad"),
          v17,
          v18))
    {
      if ((a1 & 1) != 0)
      {
        v19 = *(void **)&v2[OBJC_IVAR____TtC6Health21WelcomeViewController_healthStore];
        v20 = objc_allocWithZone((Class)type metadata accessor for CloudSyncDownloadingViewController(0));
        sub_10008D0C8(v19);
        v22 = v21;
        v23 = &v21[qword_1000F0058];
        *((_QWORD *)v23 + 1) = &off_1000E0C40;
        swift_unknownObjectWeakAssign(v23, v2);
        v24 = objc_msgSend(v2, "navigationController");
        if (v24)
        {
          v25 = v24;
          objc_msgSend(v24, "pushViewController:animated:", v22, 1);

        }
      }
      else
      {
        v26 = swift_allocObject(&unk_1000E0C98, 24, 7);
        swift_unknownObjectWeakInit(v26 + 16, v2);
        v27 = (_QWORD *)swift_allocObject(&unk_1000E0D60, 48, 7);
        v27[2] = 0;
        v27[3] = 0;
        v27[4] = v26;
        v27[5] = ObjectType;
        swift_retain(v26);
        sub_100040168((uint64_t)sub_100076298, (uint64_t)v27);
        swift_release(v26);
        swift_release(v27);
      }
    }
    else
    {
      sub_100073430();
    }
  }
  else
  {
    __break(1u);
  }
}

void sub_100074ADC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  unsigned int (*v25)(char *, uint64_t, uint64_t);
  uint64_t v26;
  char *v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  char *v34;
  void (*v35)(uint64_t, char *, uint64_t);
  unsigned int v36;
  uint64_t v37;
  id v38;
  void *v39;
  id v40;
  char *v41;
  void *v42;
  char *v43;
  id v44;
  void *v45;
  uint64_t (*v46)(char *, uint64_t);
  int v47;
  int v48;
  int v49;
  uint64_t v50;
  id v51;
  char *v52;
  char *v53;
  id v54;
  id v55;
  void *v56;
  char *v57;
  id v58;
  void *v59;
  id v60;
  uint64_t v61;
  uint64_t v62;
  id v63;
  void *v64;
  void *v65;
  id v66;
  char *v67;
  char *v68;
  id v69;
  void *v70;
  char *v71;
  uint64_t v72;
  _QWORD *v73;
  uint64_t v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t ObjectType;
  char *v79;
  char v80;

  v76 = a1;
  ObjectType = swift_getObjectType(v2);
  sub_100075BCC(0);
  v5 = v4;
  __chkstk_darwin(v4);
  v77 = (uint64_t)&v75 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000076D8(0, (unint64_t *)&qword_1000EF4B0, (uint64_t (*)(uint64_t))&type metadata accessor for CloudSyncRestoreState, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
  v8 = __chkstk_darwin(v7);
  v10 = (char *)&v75 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v12 = (char *)&v75 - v11;
  v13 = type metadata accessor for CloudSyncRestoreState(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = __chkstk_darwin(v13);
  v75 = (char *)&v75 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  v18 = (char *)&v75 - v17;
  sub_1000138C8(0, (unint64_t *)&qword_1000ECE60, (uint64_t)&type metadata for Bool, (uint64_t (*)(_QWORD, uint64_t))&type metadata accessor for UserDefault);
  v20 = v19;
  v21 = *(_QWORD *)(v19 - 8);
  __chkstk_darwin(v19);
  v23 = (char *)&v75 - v22;
  if (qword_1000EC110 != -1)
    swift_once(&qword_1000EC110, sub_100071F58);
  v24 = sub_10001C86C(v20, (uint64_t)qword_1000EF3B0);
  (*(void (**)(char *, uint64_t, uint64_t))(v21 + 16))(v23, v24, v20);
  UserDefault.wrappedValue.getter(v20);
  (*(void (**)(char *, uint64_t))(v21 + 8))(v23, v20);
  if (v80 != 1)
    goto LABEL_6;
  sub_10000CF14(a2, (uint64_t)v12);
  v25 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48);
  v26 = v13;
  if (v25(v12, 1, v13) == 1)
  {
    sub_10001EDAC((uint64_t)v12, (unint64_t *)&qword_1000EF4B0, (uint64_t (*)(uint64_t))&type metadata accessor for CloudSyncRestoreState);
LABEL_6:
    v27 = v79;
    v28 = swift_allocObject(&unk_1000E0C98, 24, 7);
    swift_unknownObjectWeakInit(v28 + 16, v27);
    v29 = (_QWORD *)swift_allocObject(&unk_1000E0CC0, 48, 7);
    v29[2] = 0;
    v29[3] = 0;
    v30 = ObjectType;
    v29[4] = v28;
    v29[5] = v30;
    swift_retain(v28);
    sub_100040168((uint64_t)sub_100075C78, (uint64_t)v29);
    swift_release(v28);
    swift_release(v29);
    return;
  }
  (*(void (**)(char *, char *, uint64_t))(v14 + 32))(v18, v12, v13);
  v31 = *(int *)(v5 + 48);
  v32 = v18;
  v33 = v77;
  v34 = (char *)(v77 + v31);
  sub_10000CF14(v76, v77);
  v35 = *(void (**)(uint64_t, char *, uint64_t))(v14 + 16);
  v35((uint64_t)v34, v32, v13);
  v36 = v25((char *)v33, 1, v13);
  v37 = v14;
  if (v36 != 1)
  {
    sub_10000CF14(v33, (uint64_t)v10);
    v46 = *(uint64_t (**)(char *, uint64_t))(v14 + 88);
    v47 = v46(v10, v26);
    v48 = enum case for CloudSyncRestoreState.activelyRestoring(_:);
    if (v47 == enum case for CloudSyncRestoreState.activelyRestoring(_:))
    {
      v49 = v46(v34, v26);
      if (v49 != enum case for CloudSyncRestoreState.failed(_:)
        && v49 != enum case for CloudSyncRestoreState.completed(_:))
      {
        goto LABEL_30;
      }
      sub_10001EDAC(v33, (unint64_t *)&qword_1000EF4B0, (uint64_t (*)(uint64_t))&type metadata accessor for CloudSyncRestoreState);
      v50 = (uint64_t)v75;
      v35((uint64_t)v75, v32, v26);
      v51 = objc_allocWithZone((Class)type metadata accessor for CloudSyncDownloadingStateViewController(0));
      v52 = (char *)sub_1000615C0(v50);
      v53 = &v52[qword_1000EE9B8];
      *((_QWORD *)v53 + 1) = &off_1000E0C40;
      v54 = v79;
      swift_unknownObjectWeakAssign(v53, v79);
      v55 = objc_msgSend(v54, "navigationController");
      if (!v55)
      {
        (*(void (**)(char *, uint64_t))(v14 + 8))(v32, v26);

        return;
      }
      v56 = v55;
      objc_msgSend(v55, "pushViewController:animated:", v52, 1);

LABEL_28:
      (*(void (**)(char *, uint64_t))(v37 + 8))(v32, v26);
      return;
    }
    if (v47 != enum case for CloudSyncRestoreState.failed(_:)
      && v47 != enum case for CloudSyncRestoreState.transientFailure(_:))
    {
      (*(void (**)(char *, uint64_t))(v14 + 8))(v10, v26);
      goto LABEL_30;
    }
    if (v46(v34, v26) != v48)
    {
LABEL_30:
      v71 = v79;
      v72 = swift_allocObject(&unk_1000E0C98, 24, 7);
      swift_unknownObjectWeakInit(v72 + 16, v71);
      v73 = (_QWORD *)swift_allocObject(&unk_1000E0CE8, 48, 7);
      v73[2] = 0;
      v73[3] = 0;
      v74 = ObjectType;
      v73[4] = v72;
      v73[5] = v74;
      swift_retain(v72);
      sub_100040168((uint64_t)sub_100076298, (uint64_t)v73);
      swift_release(v72);
      swift_release(v73);
      (*(void (**)(char *, uint64_t))(v14 + 8))(v32, v26);
      sub_1000137A0(v33, (uint64_t (*)(_QWORD))sub_100075BCC);
      return;
    }
    sub_10001EDAC(v33, (unint64_t *)&qword_1000EF4B0, (uint64_t (*)(uint64_t))&type metadata accessor for CloudSyncRestoreState);
    v57 = v79;
    v58 = objc_msgSend(v79, "navigationController");
    if (v58
      && (v59 = v58,
          v60 = objc_msgSend(v58, "previousViewController"),
          v59,
          v60)
      && (v61 = type metadata accessor for CloudSyncDownloadingViewController(0),
          v62 = swift_dynamicCastClass(v60, v61),
          v60,
          v62))
    {
      v63 = objc_msgSend(v57, "navigationController");
      if (!v63)
        goto LABEL_28;
      v64 = v63;

    }
    else
    {
      v65 = *(void **)&v57[OBJC_IVAR____TtC6Health21WelcomeViewController_healthStore];
      v66 = objc_allocWithZone((Class)type metadata accessor for CloudSyncDownloadingViewController(0));
      sub_10008D0C8(v65);
      v64 = v67;
      v68 = &v67[qword_1000F0058];
      *((_QWORD *)v68 + 1) = &off_1000E0C40;
      swift_unknownObjectWeakAssign(v68, v57);
      v69 = objc_msgSend(v57, "navigationController");
      if (v69)
      {
        v70 = v69;
        objc_msgSend(v69, "pushViewController:animated:", v64, 1);

      }
    }

    goto LABEL_28;
  }
  if ((*(unsigned int (**)(char *, uint64_t))(v14 + 88))(v34, v26) != enum case for CloudSyncRestoreState.activelyRestoring(_:))
    goto LABEL_30;
  v38 = v79;
  v39 = *(void **)&v79[OBJC_IVAR____TtC6Health21WelcomeViewController_healthStore];
  v40 = objc_allocWithZone((Class)type metadata accessor for CloudSyncDownloadingViewController(0));
  sub_10008D0C8(v39);
  v42 = v41;
  v43 = &v41[qword_1000F0058];
  *((_QWORD *)v43 + 1) = &off_1000E0C40;
  swift_unknownObjectWeakAssign(v43, v38);
  v44 = objc_msgSend(v38, "navigationController");
  if (v44)
  {
    v45 = v44;
    objc_msgSend(v44, "pushViewController:animated:", v42, 1);

  }
  (*(void (**)(char *, uint64_t))(v14 + 8))(v32, v26);
  sub_10001EDAC(v33, (unint64_t *)&qword_1000EF4B0, (uint64_t (*)(uint64_t))&type metadata accessor for CloudSyncRestoreState);
}

void sub_100075260(uint64_t a1)
{
  char *v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void (*v22)(_QWORD, _QWORD, _QWORD);
  __n128 v23;
  uint64_t v24;
  char *v25;
  char *v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  void (*v30)(char *, uint64_t, __n128);
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void (*v37)(char *, uint64_t, uint64_t);
  uint64_t v38;
  char *v39;
  uint64_t v40;
  NSObject *v41;
  os_log_type_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  __n128 v47;
  char *v48;
  char *v49;
  uint64_t v50;
  unint64_t v51;
  unint64_t v52;
  __n128 v53;
  uint64_t v54;
  uint64_t v55;
  void *v56;
  void *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  id v61;
  id v62;
  id v63;
  void *v64;
  uint64_t v65;
  uint64_t v66;
  void *v67;
  char *v68;
  __n128 v69;
  char *v70;
  uint64_t ObjectType;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  char *v80;
  uint64_t v81;
  void *v82;
  char *v83;
  char *v84;
  int v85;
  uint64_t v86;
  char *v87;
  void (*v88)(_QWORD, _QWORD, _QWORD, __n128);
  uint64_t v89[3];
  uint64_t v90;
  uint64_t v91;

  ObjectType = swift_getObjectType(v1);
  v3 = type metadata accessor for Logger(0);
  v77 = *(_QWORD *)(v3 - 8);
  v78 = v3;
  __chkstk_darwin(v3);
  v5 = (char *)&v65 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v79 = type metadata accessor for URL(0);
  v6 = *(_QWORD *)(v79 - 8);
  __chkstk_darwin(v79);
  v84 = (char *)&v65 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for AdvertisableFeaturePostCommitWorkItem(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = __chkstk_darwin(v8);
  v70 = (char *)&v65 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __chkstk_darwin(v10);
  v87 = (char *)&v65 - v13;
  v14 = __chkstk_darwin(v12);
  v83 = (char *)&v65 - v15;
  __chkstk_darwin(v14);
  v17 = (char *)&v65 - v16;
  v18 = *(void **)&v1[OBJC_IVAR____TtC6Health21WelcomeViewController_healthStore];
  v19 = type metadata accessor for AdvertisableFeaturePostCommitWorkItemViewControllerFactory(0);
  swift_allocObject(v19, *(unsigned int *)(v19 + 48), *(unsigned __int16 *)(v19 + 52));
  v73 = AdvertisableFeaturePostCommitWorkItemViewControllerFactory.init(healthStore:)(v18);
  v20 = *(_QWORD *)(a1 + 16);
  if (!v20)
    goto LABEL_19;
  v76 = v5;
  v67 = v1;
  v80 = &v1[OBJC_IVAR____TtC6Health21WelcomeViewController_deepLinkCanceler];
  v81 = v6;
  v21 = a1 + ((*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80));
  v86 = *(_QWORD *)(v9 + 72);
  v22 = *(void (**)(_QWORD, _QWORD, _QWORD))(v9 + 16);
  v85 = enum case for AdvertisableFeaturePostCommitWorkItem.cancelPendingHealthAppDeepLinkIfPresent(_:);
  v66 = a1;
  v23 = swift_bridgeObjectRetain(a1);
  v82 = 0;
  v72 = 0;
  v23.n128_u64[0] = 136315394;
  v69 = v23;
  v68 = (char *)&type metadata for Any + 8;
  v24 = v79;
  v26 = v83;
  v25 = v84;
  v27 = v87;
  v88 = (void (*)(_QWORD, _QWORD, _QWORD, __n128))v22;
  v75 = v9;
  do
  {
    v22(v17, v21, v8);
    v22(v26, v17, v8);
    v31 = (*(uint64_t (**)(char *, uint64_t))(v9 + 88))(v26, v8);
    if ((_DWORD)v31 == v85)
    {
      (*(void (**)(char *, uint64_t))(v9 + 96))(v26, v8);
      v32 = v26;
      v33 = v81;
      (*(void (**)(char *, char *, uint64_t))(v81 + 32))(v25, v32, v24);
      sub_100075B24((uint64_t)v80, (uint64_t)v89);
      v34 = v9;
      v35 = v90;
      if (v90)
      {
        v36 = v91;
        sub_100012E04(v89, v90);
        v37 = *(void (**)(char *, uint64_t, uint64_t))(v36 + 8);
        v38 = v36;
        v25 = v84;
        v37(v84, v35, v38);
        v27 = v87;
        (*(void (**)(char *, uint64_t))(v33 + 8))(v25, v24);
        (*(void (**)(char *, uint64_t))(v34 + 8))(v17, v8);
        _s6Health23OpenSleepScheduleIntentVwxx_0(v89);
      }
      else
      {
        (*(void (**)(char *, uint64_t))(v33 + 8))(v25, v24);
        (*(void (**)(char *, uint64_t))(v34 + 8))(v17, v8);
        sub_1000137A0((uint64_t)v89, (uint64_t (*)(_QWORD))sub_100075B68);
      }
      v9 = v34;
      v22 = (void (*)(_QWORD, _QWORD, _QWORD))v88;
      v26 = v83;
    }
    else
    {
      if (v82)
      {
        v39 = v76;
        static Logger.advertisableFeatures.getter(v31);
        v40 = ((uint64_t (*)(char *, char *, uint64_t))v22)(v27, v17, v8);
        v41 = Logger.logObject.getter(v40);
        v42 = static os_log_type_t.fault.getter();
        if (os_log_type_enabled(v41, v42))
        {
          v43 = swift_slowAlloc(22, -1);
          v74 = swift_slowAlloc(64, -1);
          v89[0] = v74;
          *(_DWORD *)v43 = v69.n128_u32[0];
          v44 = _typeName(_:qualified:)(ObjectType, 0);
          v46 = v45;
          *(_QWORD *)(v43 + 4) = sub_100012B20(v44, v45, v89);
          v47 = swift_bridgeObjectRelease(v46);
          *(_WORD *)(v43 + 12) = 2080;
          v48 = v70;
          v49 = v87;
          v88(v70, v87, v8, v47);
          v50 = String.init<A>(describing:)(v48, v8);
          v52 = v51;
          *(_QWORD *)(v43 + 14) = sub_100012B20(v50, v51, v89);
          v53 = swift_bridgeObjectRelease(v52);
          v30 = *(void (**)(char *, uint64_t, __n128))(v75 + 8);
          v30(v49, v8, v53);
          _os_log_impl((void *)&_mh_execute_header, v41, v42, "[%s] Attempted to make view controller for %s but no already created a different view controller", (uint8_t *)v43, 0x16u);
          v54 = v74;
          swift_arrayDestroy(v74, 2, v68);
          swift_slowDealloc(v54, -1, -1);
          v55 = v43;
          v9 = v75;
          swift_slowDealloc(v55, -1, -1);

          (*(void (**)(char *, uint64_t))(v77 + 8))(v39, v78);
          ((void (*)(char *, uint64_t))v30)(v17, v8);
          v24 = v79;
          v25 = v84;
          v27 = v87;
        }
        else
        {

          v30 = *(void (**)(char *, uint64_t, __n128))(v9 + 8);
          v27 = v87;
          ((void (*)(char *, uint64_t))v30)(v87, v8);
          (*(void (**)(char *, uint64_t))(v77 + 8))(v39, v78);
          ((void (*)(char *, uint64_t))v30)(v17, v8);
          v24 = v79;
          v25 = v84;
        }
        v26 = v83;
      }
      else
      {
        v28 = dispatch thunk of AdvertisableFeaturePostCommitWorkItemViewControllerFactory.makeViewController(for:)(v17);
        v27 = v87;
        v82 = (void *)v28;
        v72 = v29;
        v30 = *(void (**)(char *, uint64_t, __n128))(v9 + 8);
        ((void (*)(char *, uint64_t))v30)(v17, v8);
      }
      ((void (*)(char *, uint64_t))v30)(v26, v8);
      v22 = (void (*)(_QWORD, _QWORD, _QWORD))v88;
    }
    v21 += v86;
    --v20;
  }
  while (v20);
  swift_bridgeObjectRelease(v66);
  v56 = v67;
  v57 = v82;
  if (v82)
  {
    v58 = swift_getObjectType(v82);
    v60 = sub_10000F6E4(&qword_1000EF4A0, v59, (uint64_t (*)(uint64_t))type metadata accessor for WelcomeViewController, (uint64_t)&unk_1000B4BD8);
    v61 = v56;
    v62 = v57;
    dispatch thunk of AdvertisableFeaturePostCommitWorkItemViewController.navigationDelegate.setter(v56, v60, v58, v72);
    v63 = objc_msgSend(v61, "navigationController");
    if (v63)
    {
      v64 = v63;
      objc_msgSend(v63, "pushViewController:animated:", v62, 1);
      swift_release(v73);

    }
    else
    {
      swift_release(v73);
    }

  }
  else
  {
LABEL_19:
    sub_100073EC8();
    swift_release(v73);
  }
}

id sub_1000758B0()
{
  uint64_t v0;

  v0 = type metadata accessor for MicaAnimationView.Animation(0);
  sub_10001C884(v0, static MicaAnimationView.Animation.welcome);
  sub_10001C86C(v0, (uint64_t)static MicaAnimationView.Animation.welcome);
  return sub_1000758F8();
}

id sub_1000758F8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _OWORD *v3;
  id result;
  void *v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t ObjCClassFromMetadata;
  id v9;
  __n128 v10;
  uint64_t v11;

  v0 = type metadata accessor for MicaAnimationView.Animation.AnimationStateWithDuration(0);
  v1 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin(v0);
  v3 = (_OWORD *)((char *)&v11 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0));
  result = objc_msgSend((id)objc_opt_self(_HKBehavior), "sharedBehavior");
  if (result)
  {
    v5 = result;
    v6 = objc_msgSend(result, "isiPad");

    v7 = type metadata accessor for WelcomeViewController();
    ObjCClassFromMetadata = swift_getObjCClassFromMetadata(v7);
    v9 = objc_msgSend((id)objc_opt_self(NSBundle), "bundleForClass:", ObjCClassFromMetadata);
    *v3 = xmmword_1000B4B90;
    (*(void (**)(_OWORD *, _QWORD, uint64_t))(v1 + 104))(v3, enum case for MicaAnimationView.Animation.AnimationStateWithDuration.one(_:), v0);
    if (v6)
    {
      v10.n128_u64[0] = 0;
      return (id)MicaAnimationView.Animation.init(name:bundle:supportsDarkMode:supportsRightToLeft:supportsNumberingSystems:maxStateWithDurations:maxLoopCount:initialDelay:restartLoopDuration:)(0x2D656D6F636C6577, 0xEC00000064615069, v9, 1, 0, 0, v3, 0, v10, 0, 1);
    }
    else
    {
      v10.n128_u64[0] = 0;
      return (id)MicaAnimationView.Animation.init(name:bundle:supportsDarkMode:supportsRightToLeft:supportsNumberingSystems:maxStateWithDurations:maxLoopCount:initialDelay:restartLoopDuration:)(0x656D6F636C6577, 0xE700000000000000, v9, 1, 0, 0, v3, 0, v10, 0, 1);
    }
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t static MicaAnimationView.Animation.welcome.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  if (qword_1000EC118 != -1)
    swift_once(&qword_1000EC118, sub_1000758B0);
  v2 = type metadata accessor for MicaAnimationView.Animation(0);
  v3 = sub_10001C86C(v2, (uint64_t)static MicaAnimationView.Animation.welcome);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 16))(a1, v3, v2);
}

uint64_t type metadata accessor for WelcomeViewController()
{
  return objc_opt_self(_TtC6Health21WelcomeViewController);
}

id sub_100075B0C()
{
  return (id)HKPreferredRegulatoryDomainProvider();
}

uint64_t sub_100075B24(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_100075B68(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

void sub_100075B68(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_1000EF0D8)
  {
    v2 = sub_100013100(255, (unint64_t *)&qword_1000EF0E0, (uint64_t)&protocol descriptor for AppDeepLinkCanceling);
    v3 = type metadata accessor for Optional(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_1000EF0D8);
  }
}

void sub_100075BCC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t TupleTypeMetadata2;
  uint64_t v6;

  if (!qword_1000EF4A8)
  {
    sub_1000076D8(255, (unint64_t *)&qword_1000EF4B0, (uint64_t (*)(uint64_t))&type metadata accessor for CloudSyncRestoreState, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
    v3 = v2;
    v4 = type metadata accessor for CloudSyncRestoreState(255);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2(a1, v3, v4, 0, 0);
    if (!v6)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_1000EF4A8);
  }
}

uint64_t sub_100075C50()
{
  uint64_t v0;

  swift_unknownObjectWeakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100075C78(char a1)
{
  uint64_t *v1;

  return sub_100073998(a1, v1[2], v1[3], v1[4], v1[5]);
}

uint64_t sub_100075C88()
{
  _QWORD *v0;

  if (v0[2])
    swift_release(v0[3]);
  swift_release(v0[5]);
  return swift_deallocObject(v0, 56, 7);
}

void sub_100075CBC()
{
  uint64_t v0;

  sub_100073BD0(*(void (**)(void))(v0 + 16), *(_QWORD *)(v0 + 24), *(_BYTE *)(v0 + 32), *(_QWORD *)(v0 + 40), *(_QWORD *)(v0 + 48));
}

uint64_t sub_100075CD0()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 16));
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100075CF4()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)(v0 + 16) + 16))();
}

uint64_t sub_100075D04()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

void sub_100075D28()
{
  uint64_t v0;

  sub_1000741FC(*(void **)(v0 + 16));
}

uint64_t sub_100075D30()
{
  uint64_t v0;

  return sub_1000742B8(*(_QWORD *)(v0 + 16));
}

uint64_t sub_100075D3C()
{
  _QWORD *v0;

  if (v0[2])
    swift_release(v0[3]);
  swift_release(v0[4]);
  return swift_deallocObject(v0, 48, 7);
}

void sub_100075D70(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  id v7;
  char *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  _WORD v13[20];

  sub_100075B24(a2, (uint64_t)v13);
  v7 = objc_allocWithZone((Class)type metadata accessor for WelcomeViewController());
  v8 = (char *)sub_100072040((uint64_t)v13);
  v9 = (uint64_t *)&v8[OBJC_IVAR____TtC6Health21WelcomeViewController_completionHandler];
  v10 = *(_QWORD *)&v8[OBJC_IVAR____TtC6Health21WelcomeViewController_completionHandler];
  v11 = *(_QWORD *)&v8[OBJC_IVAR____TtC6Health21WelcomeViewController_completionHandler + 8];
  *v9 = a3;
  v9[1] = a4;
  sub_10003FBE0(a3, a4);
  sub_10001EEB0(v10, v11);
  v12 = objc_msgSend(objc_allocWithZone((Class)OBNavigationController), "initWithRootViewController:", v8);
  objc_msgSend(v12, "setModalInPresentation:", 1);
  objc_msgSend(v12, "setModalPresentationStyle:", 2);
  objc_msgSend(a1, "presentViewController:animated:completion:", v12, 1, 0);
  v13[0] = 1792;
  sub_100046898();
  AnalyticsSubmitting.submit()();

}

void sub_100075E88(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;

  if (!qword_1000EF4E8)
  {
    sub_100075F04(255);
    v3 = v2;
    v4 = sub_10000F6E4(&qword_1000EF510, 255, (uint64_t (*)(uint64_t))sub_100075F04, (uint64_t)&protocol conformance descriptor for AnyPublisher<A, B>);
    v5 = type metadata accessor for Publishers.First(a1, v3, v4);
    if (!v6)
      atomic_store(v5, (unint64_t *)&qword_1000EF4E8);
  }
}

void sub_100075F04(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_1000EF4F0)
  {
    sub_100075F68(255);
    v3 = type metadata accessor for AnyPublisher(a1, v2, &type metadata for Never, &protocol witness table for Never);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_1000EF4F0);
  }
}

void sub_100075F68(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;

  if (!qword_1000EF4F8)
  {
    v2 = sub_100006D10(255, (unint64_t *)&unk_1000EF500, HKCloudSyncObserverStatus_ptr);
    v3 = sub_100013100(255, (unint64_t *)&qword_1000EC230, (uint64_t)&protocol descriptor for Error);
    v4 = type metadata accessor for Result(a1, v2, v3, &protocol self-conformance witness table for Error);
    if (!v5)
      atomic_store(v4, (unint64_t *)&qword_1000EF4F8);
  }
}

void sub_100075FF4(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  _QWORD v5[4];

  if (!qword_1000EF518)
  {
    sub_100075E88(255);
    v5[0] = v2;
    v5[1] = sub_100006D10(255, (unint64_t *)&qword_1000ED910, OS_dispatch_queue_ptr);
    v5[2] = sub_10000F6E4((unint64_t *)&unk_1000EF520, 255, (uint64_t (*)(uint64_t))sub_100075E88, (uint64_t)&protocol conformance descriptor for Publishers.First<A>);
    v5[3] = sub_1000760AC();
    v3 = type metadata accessor for Publishers.ReceiveOn(a1, v5);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_1000EF518);
  }
}

unint64_t sub_1000760AC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000ECD18;
  if (!qword_1000ECD18)
  {
    v1 = sub_100006D10(255, (unint64_t *)&qword_1000ED910, OS_dispatch_queue_ptr);
    result = swift_getWitnessTable(&protocol conformance descriptor for OS_dispatch_queue, v1);
    atomic_store(result, (unint64_t *)&qword_1000ECD18);
  }
  return result;
}

uint64_t sub_100076104()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

void sub_100076130(uint64_t a1)
{
  uint64_t v1;

  sub_100072DBC(a1, *(id *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

void sub_100076138()
{
  _BYTE *v0;
  _BYTE *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  _QWORD *v9;
  uint64_t v10;

  v1 = v0;
  v2 = type metadata accessor for MicaAnimationView.Animation(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = OBJC_IVAR____TtC6Health21WelcomeViewController_animationView;
  if (qword_1000EC118 != -1)
    swift_once(&qword_1000EC118, sub_1000758B0);
  v7 = sub_10001C86C(v2, (uint64_t)static MicaAnimationView.Animation.welcome);
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v5, v7, v2);
  v8 = objc_allocWithZone((Class)type metadata accessor for MicaAnimationView(0));
  *(_QWORD *)&v1[v6] = MicaAnimationView.init(animation:inset:scaleToFill:)(v5, 0, 1);
  *(_QWORD *)&v1[OBJC_IVAR____TtC6Health21WelcomeViewController_cloudSyncBuddyAvailabilityProvider] = 0;
  v9 = &v1[OBJC_IVAR____TtC6Health21WelcomeViewController_completionHandler];
  *v9 = 0;
  v9[1] = 0;
  *(_QWORD *)&v1[OBJC_IVAR____TtC6Health21WelcomeViewController____lazy_storage___signalProvider] = 0;
  *(_QWORD *)&v1[OBJC_IVAR____TtC6Health21WelcomeViewController_statusPublisher] = 0;
  v1[OBJC_IVAR____TtC6Health21WelcomeViewController_didEnableCloudSync] = 0;

  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD00000000000005CLL, 0x80000001000BCC90, "Health/WelcomeViewController.swift", 34, 2, 48, 0);
  __break(1u);
}

uint64_t type metadata accessor for ProfileDataSource(uint64_t a1)
{
  uint64_t result;

  result = qword_1000EF540;
  if (!qword_1000EF540)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for ProfileDataSource);
  return result;
}

uint64_t sub_1000762EC(uint64_t a1)
{
  _BYTE v2[8];

  return swift_initClassMetadata2(a1, 0, 0, v2, a1 + qword_1000F1128);
}

void sub_100076328(void *a1, char a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  id v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  NSURL *v14;
  void *v15;
  void *v16;
  unint64_t v17;
  Class isa;
  id v19;
  uint64_t v20;
  id v21;
  uint64_t v22;
  void *v23;
  id v24;
  id v25;
  void *v26;
  id v27;
  _QWORD v28[5];

  sub_1000076D8(0, (unint64_t *)&unk_1000ECA90, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
  v5 = __chkstk_darwin(v4);
  v7 = (char *)&v28[-1] - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v9 = (char *)&v28[-1] - v8;
  if (a2)
  {
    if (a2 == 1)
    {
      URL.init(string:)(0xD000000000000026, 0x80000001000BCDA0);
      v10 = objc_msgSend((id)objc_opt_self(LSApplicationWorkspace), "defaultWorkspace");
      if (v10)
      {
        v11 = v10;
        sub_1000610AC((uint64_t)v9, (uint64_t)v7);
        v12 = type metadata accessor for URL(0);
        v13 = *(_QWORD *)(v12 - 8);
        v15 = 0;
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v7, 1, v12) != 1)
        {
          URL._bridgeToObjectiveC()(v14);
          v15 = v16;
          (*(void (**)(char *, uint64_t))(v13 + 8))(v7, v12);
        }
        v17 = sub_10007C1F8((uint64_t)_swiftEmptyArrayStorage);
        isa = Dictionary._bridgeToObjectiveC()().super.isa;
        objc_msgSend(v11, "openSensitiveURL:withOptions:", v15, isa, swift_bridgeObjectRelease(v17).n128_f64[0]);

      }
      sub_10001C7DC((uint64_t)v9);
    }
    else
    {
      v24 = objc_msgSend(objc_allocWithZone((Class)HKHealthStore), "init");
      v25 = objc_allocWithZone((Class)type metadata accessor for HealthDetailsViewController(0));
      v26 = (void *)HealthDetailsViewController.init(healthStore:inEditMode:)(v24, 0);
      v27 = objc_msgSend(objc_allocWithZone((Class)HKModalNavigationController), "initWithRootViewController:", v26);
      objc_msgSend(a1, "presentViewController:animated:completion:", v27, 1, 0);

    }
  }
  else
  {
    v19 = objc_msgSend(objc_allocWithZone((Class)HKHealthStore), "init");
    v20 = type metadata accessor for PinnedContentManager(0);
    v21 = v19;
    v22 = PinnedContentManager.__allocating_init(healthStore:domain:)(v21);
    type metadata accessor for ProfileViewController(0);
    v28[3] = v20;
    v28[4] = &protocol witness table for PinnedContentManager;
    v28[0] = v22;
    swift_retain(v22);
    v23 = (void *)static ProfileViewController.makeProfileNavigationController(healthStore:pinnedContentManager:configurator:)(v21, v28, ConfigurationIntentResponseCode.rawValue.getter, 0);
    _s6Health23OpenSleepScheduleIntentVwxx_0(v28);
    objc_msgSend(a1, "presentViewController:animated:completion:", v23, 1, 0);

    swift_release(v22);
  }
}

uint64_t sub_10007662C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  id v28;
  void (*v29)(_BYTE *, _QWORD);
  _BYTE *v30;
  uint64_t v31;
  char *v32;
  char *v33;
  _QWORD *v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  void (*v49)(char *, uint64_t);
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  void *v53;
  void *v54;
  Swift::String v55;
  Swift::String v56;
  uint64_t v58;
  uint64_t v59;
  void (*v60)(char *, uint64_t);
  unint64_t v61;
  unint64_t v62;
  unsigned int v63;
  unsigned int v64;
  id v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  _BYTE *v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  _BYTE v77[32];
  __int128 v78;
  uint64_t v79;
  void *v80;
  _QWORD *v81;

  v0 = type metadata accessor for SectionedDataSourceContainerViewType(0);
  v74 = *(_QWORD *)(v0 - 8);
  v75 = v0;
  __chkstk_darwin(v0);
  v73 = (char *)&v58 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000076D8(0, &qword_1000ECA60, (uint64_t (*)(uint64_t))&type metadata accessor for UIBackgroundConfiguration, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
  __chkstk_darwin(v2);
  v72 = (char *)&v58 - v3;
  v4 = type metadata accessor for CellDeselectionBehavior(0);
  v70 = *(_QWORD *)(v4 - 8);
  v71 = v4;
  __chkstk_darwin(v4);
  v69 = (char *)&v58 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for ContentConfigurationItem(0);
  v67 = *(_QWORD *)(v6 - 8);
  v68 = v6;
  __chkstk_darwin(v6);
  v8 = (char *)&v58 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v76 = type metadata accessor for UUID(0);
  v66 = *(_QWORD *)(v76 - 8);
  __chkstk_darwin(v76);
  v10 = (char *)&v58 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000076D8(0, &qword_1000ECA68, (uint64_t (*)(uint64_t))&type metadata accessor for ArrayDataSourceSection, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for _ContiguousArrayStorage);
  v12 = v11;
  v13 = *(_QWORD *)(type metadata accessor for ArrayDataSourceSection(0) - 8);
  v14 = *(_QWORD *)(v13 + 72);
  v15 = *(unsigned __int8 *)(v13 + 80);
  v58 = (v15 + 32) & ~v15;
  v59 = swift_allocObject(v12, v58 + v14, v15 | 7);
  *(_OWORD *)(v59 + 16) = xmmword_1000B11F0;
  v81 = _swiftEmptyArrayStorage;
  sub_10007FEC4(0, 3, 0);
  v65 = (id)objc_opt_self(UIColor);
  v16 = 0;
  v64 = enum case for CellDeselectionBehavior.deselectOnDidSelect(_:);
  v63 = enum case for SectionedDataSourceContainerViewType.collectionView(_:);
  v62 = 0x80000001000BCD80;
  v61 = 0x80000001000BCD60;
  do
  {
    v17 = *((unsigned __int8 *)&off_1000DB9A8 + v16 + 32);
    v18 = 0xD00000000000001DLL;
    if (v17 != 1)
      v18 = 0xD000000000000018;
    v19 = v62;
    if (v17 != 1)
      v19 = v61;
    if (*((_BYTE *)&off_1000DB9A8 + v16 + 32))
      v20 = v18;
    else
      v20 = 0x6F7250206E69614DLL;
    if (*((_BYTE *)&off_1000DB9A8 + v16 + 32))
      v21 = v19;
    else
      v21 = 0xEC000000656C6966;
    v22 = swift_allocObject(&unk_1000E0F28, 17, 7);
    *(_BYTE *)(v22 + 16) = v17;
    v23 = UUID.init()(v22);
    v24 = UUID.uuidString.getter(v23);
    v26 = v25;
    v60 = *(void (**)(char *, uint64_t))(v66 + 8);
    v60(v10, v76);
    v79 = type metadata accessor for UIListContentConfiguration(0);
    v80 = &protocol witness table for UIListContentConfiguration;
    v27 = sub_100007E0C(&v78);
    static UIListContentConfiguration.cell()(v27);
    swift_bridgeObjectRetain(v21);
    UIListContentConfiguration.text.setter(v20, v21);
    v28 = objc_msgSend(v65, "tintColor");
    v29 = (void (*)(_BYTE *, _QWORD))UIListContentConfiguration.textProperties.modify(v77);
    UIListContentConfiguration.TextProperties.color.setter(v28);
    v29(v77, 0);
    v30 = v69;
    *v69 = 1;
    (*(void (**)(_BYTE *, _QWORD, uint64_t))(v70 + 104))(v30, v64, v71);
    swift_retain(v22);
    swift_bridgeObjectRelease(v21);
    v31 = type metadata accessor for UIBackgroundConfiguration(0);
    v32 = v72;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v31 - 8) + 56))(v72, 1, 1, v31);
    v33 = v73;
    (*(void (**)(char *, _QWORD, uint64_t))(v74 + 104))(v73, v63, v75);
    ContentConfigurationItem.init(uniqueIdentifier:contentConfiguration:cellAccessories:cellSelectionHandler:deselectionBehavior:backgroundConfiguration:updateContentConfigurationHandler:container:automationIdentifier:)(v24, v26, &v78, _swiftEmptyArrayStorage, sub_100076DE8, v22, v30, v32, 0, 0, v33, 0, 0);
    swift_release(v22);
    v34 = v81;
    if ((swift_isUniquelyReferenced_nonNull_native(v81) & 1) == 0)
    {
      sub_10007FEC4(0, v34[2] + 1, 1);
      v34 = v81;
    }
    v36 = v34[2];
    v35 = v34[3];
    if (v36 >= v35 >> 1)
      sub_10007FEC4(v35 > 1, v36 + 1, 1);
    ++v16;
    v37 = v68;
    v79 = v68;
    v80 = (void *)sub_100013198(&qword_1000ECA80, (uint64_t (*)(uint64_t))&type metadata accessor for ContentConfigurationItem, (uint64_t)&protocol conformance descriptor for ContentConfigurationItem);
    v38 = sub_100007E0C(&v78);
    v39 = v67;
    (*(void (**)(_QWORD *, char *, uint64_t))(v67 + 16))(v38, v8, v37);
    v40 = v81;
    v81[2] = v36 + 1;
    sub_10001AF7C(&v78, (uint64_t)&v40[5 * v36 + 4]);
    v41 = (*(uint64_t (**)(char *, uint64_t))(v39 + 8))(v8, v37);
  }
  while (v16 != 3);
  v42 = v59;
  v43 = v81;
  v44 = UUID.init()(v41);
  v45 = UUID.uuidString.getter(v44);
  v47 = v46;
  v48 = v76;
  v49 = v60;
  v60(v10, v76);
  v50 = ArrayDataSourceSection.init(title:arrangedItems:identifier:)(0x656C69666F7250, 0xE700000000000000, v43, v45, v47);
  *(_QWORD *)&v78 = 0x3C53447961727241;
  *((_QWORD *)&v78 + 1) = 0xE800000000000000;
  v51 = UUID.init()(v50);
  v52 = UUID.uuidString.getter(v51);
  v54 = v53;
  v49(v10, v48);
  v55._countAndFlagsBits = v52;
  v55._object = v54;
  String.append(_:)(v55);
  swift_bridgeObjectRelease(v54);
  v56._countAndFlagsBits = 62;
  v56._object = (void *)0xE100000000000000;
  String.append(_:)(v56);
  return ArrayDataSource.init(arrangedSections:identifier:)(v42, v78, *((_QWORD *)&v78 + 1));
}

void sub_100076C60(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_100076C90(a1, a2, a3, (uint64_t)"init(_:identifier:)", 19);
}

void sub_100076C78(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_100076C90(a1, a2, a3, (uint64_t)"init(arrangedSections:identifier:)", 34);
}

void sub_100076C90(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _swift_stdlib_reportUnimplementedInitializer("Health.ProfileDataSource", 24, a4, a5, 0);
  __break(1u);
}

uint64_t sub_100076CB8()
{
  return type metadata accessor for ProfileDataSource(0);
}

unint64_t sub_100076CC0@<X0>(uint64_t a1@<X3>, uint64_t *a2@<X8>)
{
  swift_getWitnessTable(&unk_1000B4D18, a1);
  return sub_1000213F0(a2);
}

uint64_t sub_100076D2C(uint64_t a1, uint64_t a2)
{
  uint64_t WitnessTable;

  WitnessTable = swift_getWitnessTable(&unk_1000B4D18, a2);
  return sub_100020F3C(a1, a2, WitnessTable);
}

uint64_t sub_100076D7C(uint64_t a1)
{
  uint64_t result;

  *(_QWORD *)(a1 + 8) = sub_100013198(&qword_1000EF590, type metadata accessor for ProfileDataSource, (uint64_t)&unk_1000B4CC0);
  result = sub_100013198(&qword_1000EF598, type metadata accessor for ProfileDataSource, (uint64_t)&unk_1000B4CF0);
  *(_QWORD *)(a1 + 24) = result;
  return result;
}

uint64_t sub_100076DD8()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

void sub_100076DE8(void *a1)
{
  uint64_t v1;

  sub_100076328(a1, *(_BYTE *)(v1 + 16));
}

uint64_t type metadata accessor for InternalSettingsAllDataTypeDetailViewsDataSource(uint64_t a1)
{
  uint64_t result;

  result = qword_1000EF5A0;
  if (!qword_1000EF5A0)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for InternalSettingsAllDataTypeDetailViewsDataSource);
  return result;
}

uint64_t sub_100076E2C(uint64_t a1)
{
  _BYTE v2[8];

  return swift_initClassMetadata2(a1, 0, 0, v2, a1 + qword_1000F1138);
}

uint64_t sub_100076E68(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t result;
  uint64_t v12;
  id v13;
  void *v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  void *v23;
  _QWORD *v24;

  v4 = v3;
  v21 = a2;
  v22 = a3;
  v20 = type metadata accessor for ContentConfigurationItem(0);
  v6 = *(_QWORD *)(v20 - 8);
  __chkstk_darwin(v20);
  v8 = (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((unint64_t)a1 >> 62)
    goto LABEL_18;
  v9 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    v10 = _swiftEmptyArrayStorage;
    if (!v9)
      return (uint64_t)v10;
    v24 = _swiftEmptyArrayStorage;
    result = sub_10007FE98(0, v9 & ~(v9 >> 63), 0);
    if (v9 < 0)
      break;
    v12 = 0;
    v10 = v24;
    v19 = a1 & 0xC000000000000001;
    while (v9 != v12)
    {
      if (v19)
        v13 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v12, a1);
      else
        v13 = *(id *)(a1 + 8 * v12 + 32);
      v14 = v13;
      v23 = v13;
      sub_100077B5C(&v23, v21, v22, (uint64_t)v8);
      if (v4)
      {
        swift_release(v10);

        return (uint64_t)v10;
      }
      v4 = 0;

      v24 = v10;
      v16 = v10[2];
      v15 = v10[3];
      if (v16 >= v15 >> 1)
      {
        sub_10007FE98(v15 > 1, v16 + 1, 1);
        v10 = v24;
      }
      ++v12;
      v10[2] = v16 + 1;
      (*(void (**)(unint64_t, char *, uint64_t))(v6 + 32))((unint64_t)v10+ ((*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80))+ *(_QWORD *)(v6 + 72) * v16, v8, v20);
      if (v9 == v12)
        return (uint64_t)v10;
    }
    __break(1u);
LABEL_18:
    if (a1 < 0)
      v17 = a1;
    else
      v17 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v9 = _CocoaArrayWrapper.endIndex.getter(v17);
    swift_bridgeObjectRelease(a1);
  }
  __break(1u);
  return result;
}

uint64_t sub_100077044()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  id v25;
  void (*v26)(_BYTE *, _QWORD);
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  char *v34;
  char *v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  void (*v51)(char *, uint64_t);
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  void *v56;
  void *v57;
  Swift::String v58;
  Swift::String v59;
  uint64_t v60;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  void (*v70)(char *, uint64_t);
  uint64_t v71;
  char *v72;
  uint64_t v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  __int128 v77;
  uint64_t v78;
  _BYTE v79[32];
  uint64_t v80;
  unint64_t v81;
  uint64_t v82;
  void *v83;

  v1 = *v0;
  v2 = type metadata accessor for SectionedDataSourceContainerViewType(0);
  v75 = *(_QWORD *)(v2 - 8);
  v76 = v2;
  __chkstk_darwin(v2);
  v74 = (char *)&v62 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000076D8(0, &qword_1000ECA60, (uint64_t (*)(uint64_t))&type metadata accessor for UIBackgroundConfiguration, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
  __chkstk_darwin(v4);
  v72 = (char *)&v62 - v5;
  v69 = type metadata accessor for CellDeselectionBehavior(0);
  v68 = *(_QWORD *)(v69 - 8);
  __chkstk_darwin(v69);
  v67 = (char *)&v62 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000076D8(0, &qword_1000ECCD8, (uint64_t (*)(uint64_t))&type metadata accessor for UICellAccessory.LayoutDimension, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
  __chkstk_darwin(v7);
  v9 = (char *)&v62 - v8;
  v66 = type metadata accessor for UICellAccessory.DisclosureIndicatorOptions(0);
  v65 = *(_QWORD *)(v66 - 8);
  __chkstk_darwin(v66);
  v11 = (char *)&v62 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for UICellAccessory.DisplayedState(0);
  v13 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v15 = (char *)&v62 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for UUID(0);
  v17 = *(_QWORD *)(v16 - 8);
  v71 = v16;
  __chkstk_darwin(v16);
  v19 = (char *)&v62 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v78 = type metadata accessor for ContentConfigurationItem(0);
  v73 = *(_QWORD *)(v78 - 8);
  __chkstk_darwin(v78);
  v64 = (char *)&v62 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = swift_allocObject(&unk_1000E0FB8, 24, 7);
  *(_QWORD *)(v21 + 16) = v1;
  v22 = UUID.init()(v21);
  v63 = UUID.uuidString.getter(v22);
  v62 = v23;
  v70 = *(void (**)(char *, uint64_t))(v17 + 8);
  v70(v19, v16);
  v82 = type metadata accessor for UIListContentConfiguration(0);
  v83 = &protocol witness table for UIListContentConfiguration;
  v24 = sub_100007E0C(&v80);
  static UIListContentConfiguration.cell()(v24);
  UIListContentConfiguration.text.setter(0xD000000000000016, 0x80000001000BCE50);
  v25 = objc_msgSend((id)objc_opt_self(UIColor), "blackColor");
  v26 = (void (*)(_BYTE *, _QWORD))UIListContentConfiguration.textProperties.modify(v79);
  UIListContentConfiguration.TextProperties.color.setter(v25);
  v26(v79, 0);
  sub_1000076D8(0, &qword_1000ECCE0, (uint64_t (*)(uint64_t))&type metadata accessor for UICellAccessory, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for _ContiguousArrayStorage);
  v28 = v27;
  v29 = type metadata accessor for UICellAccessory(0);
  v30 = swift_allocObject(v28, ((*(unsigned __int8 *)(*(_QWORD *)(v29 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v29 - 8) + 80))+ *(_QWORD *)(*(_QWORD *)(v29 - 8) + 72), *(unsigned __int8 *)(*(_QWORD *)(v29 - 8) + 80) | 7);
  v77 = xmmword_1000B11F0;
  *(_OWORD *)(v30 + 16) = xmmword_1000B11F0;
  (*(void (**)(char *, _QWORD, uint64_t))(v13 + 104))(v15, enum case for UICellAccessory.DisplayedState.always(_:), v12);
  v31 = type metadata accessor for UICellAccessory.LayoutDimension(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v31 - 8) + 56))(v9, 1, 1, v31);
  UICellAccessory.DisclosureIndicatorOptions.init(isHidden:reservedLayoutWidth:tintColor:)(2, v9, 0);
  static UICellAccessory.disclosureIndicator(displayed:options:)(v15, v11);
  (*(void (**)(char *, uint64_t))(v65 + 8))(v11, v66);
  (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v12);
  v32 = v67;
  (*(void (**)(char *, _QWORD, uint64_t))(v68 + 104))(v67, enum case for CellDeselectionBehavior.default(_:), v69);
  v33 = type metadata accessor for UIBackgroundConfiguration(0);
  v34 = v72;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v33 - 8) + 56))(v72, 1, 1, v33);
  v35 = v74;
  (*(void (**)(char *, _QWORD, uint64_t))(v75 + 104))(v74, enum case for SectionedDataSourceContainerViewType.collectionView(_:), v76);
  v36 = v64;
  ContentConfigurationItem.init(uniqueIdentifier:contentConfiguration:cellAccessories:cellSelectionHandler:deselectionBehavior:backgroundConfiguration:updateContentConfigurationHandler:container:automationIdentifier:)(v63, v62, &v80, v30, sub_1000786D8, v21, v32, v34, 0, 0, v35, 0, 0);
  sub_1000076D8(0, &qword_1000ECA68, (uint64_t (*)(uint64_t))&type metadata accessor for ArrayDataSourceSection, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for _ContiguousArrayStorage);
  v38 = v37;
  v39 = type metadata accessor for ArrayDataSourceSection(0);
  v40 = swift_allocObject(v38, ((*(unsigned __int8 *)(*(_QWORD *)(v39 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v39 - 8) + 80))+ *(_QWORD *)(*(_QWORD *)(v39 - 8) + 72), *(unsigned __int8 *)(*(_QWORD *)(v39 - 8) + 80) | 7);
  *(_OWORD *)(v40 + 16) = v77;
  sub_1000786E0(0, (unint64_t *)&qword_1000ECA70, (unint64_t *)&qword_1000EEC70, (uint64_t)&protocol descriptor for SectionedDataSourceItem, 1);
  v42 = swift_allocObject(v41, 72, 7);
  *(_OWORD *)(v42 + 16) = v77;
  v43 = v78;
  *(_QWORD *)(v42 + 56) = v78;
  *(_QWORD *)(v42 + 64) = sub_100013198(&qword_1000ECA80, (uint64_t (*)(uint64_t))&type metadata accessor for ContentConfigurationItem, (uint64_t)&protocol conformance descriptor for ContentConfigurationItem);
  v44 = sub_100007E0C((_QWORD *)(v42 + 32));
  v45 = v73;
  v46 = (*(uint64_t (**)(_QWORD *, char *, uint64_t))(v73 + 16))(v44, v36, v43);
  v47 = UUID.init()(v46);
  v48 = UUID.uuidString.getter(v47);
  v50 = v49;
  v51 = v70;
  v52 = v71;
  v70(v19, v71);
  v53 = ArrayDataSourceSection.init(title:arrangedItems:identifier:)(0xD000000000000010, 0x80000001000BCE70, v42, v48, v50);
  v80 = 0x3C53447961727241;
  v81 = 0xE800000000000000;
  v54 = UUID.init()(v53);
  v55 = UUID.uuidString.getter(v54);
  v57 = v56;
  v51(v19, v52);
  v58._countAndFlagsBits = v55;
  v58._object = v57;
  String.append(_:)(v58);
  swift_bridgeObjectRelease(v57);
  v59._countAndFlagsBits = 62;
  v59._object = (void *)0xE100000000000000;
  String.append(_:)(v59);
  v60 = ArrayDataSource.init(arrangedSections:identifier:)(v40, v80, v81);
  (*(void (**)(char *, uint64_t))(v45 + 8))(v36, v78);
  return v60;
}

void sub_100077708(void *a1)
{
  id v2;
  void *v3;
  id v4;

  v4 = sub_100077774();
  v2 = objc_msgSend(a1, "navigationController");
  if (v2)
  {
    v3 = v2;
    objc_msgSend(v2, "pushViewController:animated:", v4, 1);

  }
}

id sub_100077774()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(char *, uint64_t);
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  void *v27;
  Swift::String v28;
  Swift::String v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  id v40;
  uint64_t v41;
  id v42;
  NSString v43;
  void *v44;
  id result;
  void *v46;
  __int128 v47;
  uint64_t v48;
  unint64_t v49;
  void *v50;

  v1 = v0;
  v2 = type metadata accessor for UUID(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v47 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for ArrayDataSourceSection(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v47 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v50 = &_swiftEmptySetSingleton;
  v10 = sub_10007B7C8();
  v11 = sub_100076E68((uint64_t)v10, (uint64_t *)&v50, v1);
  swift_bridgeObjectRelease(v10);
  v12 = sub_1000A6048(v11);
  swift_bridgeObjectRelease(v11);
  v14 = UUID.init()(v13);
  v15 = UUID.uuidString.getter(v14);
  v17 = v16;
  v18 = *(void (**)(char *, uint64_t))(v3 + 8);
  v18(v5, v2);
  ArrayDataSourceSection.init(title:arrangedItems:identifier:)(0, 0, v12, v15, v17);
  sub_1000076D8(0, &qword_1000ECA68, (uint64_t (*)(uint64_t))&type metadata accessor for ArrayDataSourceSection, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for _ContiguousArrayStorage);
  v19 = *(unsigned __int8 *)(v7 + 80);
  v20 = (v19 + 32) & ~v19;
  v22 = swift_allocObject(v21, v20 + *(_QWORD *)(v7 + 72), v19 | 7);
  v47 = xmmword_1000B11F0;
  *(_OWORD *)(v22 + 16) = xmmword_1000B11F0;
  v23 = (*(uint64_t (**)(uint64_t, char *, uint64_t))(v7 + 16))(v22 + v20, v9, v6);
  v48 = 0x3C53447961727241;
  v49 = 0xE800000000000000;
  v24 = UUID.init()(v23);
  v25 = UUID.uuidString.getter(v24);
  v27 = v26;
  v18(v5, v2);
  v28._countAndFlagsBits = v25;
  v28._object = v27;
  String.append(_:)(v28);
  swift_bridgeObjectRelease(v27);
  v29._countAndFlagsBits = 62;
  v29._object = (void *)0xE100000000000000;
  String.append(_:)(v29);
  v30 = v48;
  v31 = v49;
  v32 = type metadata accessor for ArrayDataSource(0);
  swift_allocObject(v32, *(unsigned int *)(v32 + 48), *(unsigned __int16 *)(v32 + 52));
  v33 = ArrayDataSource.init(arrangedSections:identifier:)(v22, v30, v31);
  v34 = SnapshotDataSource.withLayoutSectionProvider(collapseEmptySections:_:)(0, sub_1000379B0, 0, v32, &protocol witness table for ArrayDataSource);
  swift_release(v33);
  sub_1000786E0(0, (unint64_t *)&qword_1000ECCC8, &qword_1000ECCD0, (uint64_t)&protocol descriptor for SnapshotDataSource, 0);
  v36 = swift_allocObject(v35, 48, 7);
  *(_OWORD *)(v36 + 16) = v47;
  v37 = sub_100013198(&qword_1000EF600, (uint64_t (*)(uint64_t))sub_10007BAE4, (uint64_t)&protocol conformance descriptor for DataSourceWithLayout<A>);
  *(_QWORD *)(v36 + 32) = v34;
  *(_QWORD *)(v36 + 40) = v37;
  v38 = type metadata accessor for CompoundSectionedDataSource(0);
  swift_allocObject(v38, *(unsigned int *)(v38 + 48), *(unsigned __int16 *)(v38 + 52));
  swift_retain(v34);
  v39 = CompoundSectionedDataSource.init(_:)(v36);
  v40 = objc_allocWithZone((Class)type metadata accessor for CompoundDataSourceCollectionViewController(0));
  v41 = swift_retain(v39);
  v42 = (id)CompoundDataSourceCollectionViewController.init(dataSource:)(v41);
  v43 = String._bridgeToObjectiveC()();
  objc_msgSend(v42, "setTitle:", v43);

  v44 = (void *)SnapshotDataSource<>.createCompositionalLayoutFromDataSource(errorHandler:)(0, 0, v38, &protocol witness table for CompoundSectionedDataSource, &protocol witness table for CompoundSectionedDataSource);
  result = objc_msgSend(v42, "collectionView");
  if (result)
  {
    v46 = result;
    objc_msgSend(result, "setCollectionViewLayout:animated:", v44, 0);
    swift_release(v34);
    swift_release(v39);

    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
    swift_bridgeObjectRelease(v50);
    return v42;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_100077B5C@<X0>(void **a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  void *v10;
  id v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  double v18;
  id v19;
  uint64_t v20;
  void *v21;
  void *v22;
  Swift::String v23;
  Swift::String v24;
  void *object;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  id v30;
  _QWORD v32[2];
  Swift::String v33;
  uint64_t v34;
  uint64_t v35;

  v32[0] = a3;
  v32[1] = a4;
  v6 = type metadata accessor for CellDeselectionBehavior(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)v32 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *a1;
  v11 = objc_msgSend(v10, "localization");
  v12 = objc_msgSend(v11, "displayName");

  v13 = static String._unconditionallyBridgeFromObjectiveC(_:)(v12);
  v15 = v14;

  v34 = v13;
  v35 = v15;
  v16 = *a2;
  swift_bridgeObjectRetain_n(v15, 2);
  swift_bridgeObjectRetain(v16);
  v17 = sub_100077DA0(v13, v15, v16);
  swift_bridgeObjectRelease(v15);
  swift_bridgeObjectRelease(v16);
  if ((v17 & 1) != 0)
  {
    *(_QWORD *)&v18 = swift_bridgeObjectRelease(v15).n128_u64[0];
    v33._countAndFlagsBits = 10272;
    v33._object = (void *)0xE200000000000000;
    v19 = objc_msgSend(v10, "displayTypeIdentifierString", v18);
    v20 = static String._unconditionallyBridgeFromObjectiveC(_:)(v19);
    v22 = v21;

    v23._countAndFlagsBits = v20;
    v23._object = v22;
    String.append(_:)(v23);
    swift_bridgeObjectRelease(v22);
    v24._countAndFlagsBits = 41;
    v24._object = (void *)0xE100000000000000;
    String.append(_:)(v24);
    object = v33._object;
    String.append(_:)(v33);
    v26 = object;
  }
  else
  {
    sub_100079F10(&v33._countAndFlagsBits, v13, v15);
    v26 = v33._object;
  }
  swift_bridgeObjectRelease(v26);
  v27 = v34;
  v28 = v35;
  v29 = swift_allocObject(&unk_1000E0FE0, 32, 7);
  *(_QWORD *)(v29 + 16) = v32[0];
  *(_QWORD *)(v29 + 24) = v10;
  v30 = v10;
  static ContentConfigurationItem.makeDisclosureItem(text:automationIdentifier:cellSelectionHandler:)(v27, v28, 0, 0, sub_10007BB64, v29);
  swift_bridgeObjectRelease(v28);
  swift_release(v29);
  *v9 = 1;
  (*(void (**)(_BYTE *, _QWORD, uint64_t))(v7 + 104))(v9, enum case for CellDeselectionBehavior.deselectOnDidSelect(_:), v6);
  return ContentConfigurationItem.deselectionBehavior.setter(v9);
}

uint64_t sub_100077DA0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  Swift::Int v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  BOOL v13;
  uint64_t result;
  uint64_t v15;
  unint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  BOOL v19;
  _QWORD v20[9];

  if (*(_QWORD *)(a3 + 16))
  {
    Hasher.init(_seed:)(v20, *(_QWORD *)(a3 + 40));
    String.hash(into:)(v20, a1, a2);
    v6 = Hasher._finalize()();
    v7 = -1 << *(_BYTE *)(a3 + 32);
    v8 = v6 & ~v7;
    v9 = a3 + 56;
    if (((*(_QWORD *)(a3 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFF8)) >> v8) & 1) != 0)
    {
      v10 = *(_QWORD *)(a3 + 48);
      v11 = (_QWORD *)(v10 + 16 * v8);
      v12 = v11[1];
      v13 = *v11 == a1 && v12 == a2;
      if (v13 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v11, v12, a1, a2, 0) & 1) != 0)
        return 1;
      v15 = ~v7;
      v16 = (v8 + 1) & v15;
      if (((*(_QWORD *)(v9 + ((v16 >> 3) & 0xFFFFFFFFFFFFF8)) >> v16) & 1) != 0)
      {
        while (1)
        {
          v17 = (_QWORD *)(v10 + 16 * v16);
          v18 = v17[1];
          v19 = *v17 == a1 && v18 == a2;
          if (v19 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v17, v18, a1, a2, 0) & 1) != 0)
            break;
          result = 0;
          v16 = (v16 + 1) & v15;
          if (((*(_QWORD *)(v9 + ((v16 >> 3) & 0xFFFFFFFFFFFFF8)) >> v16) & 1) == 0)
            return result;
        }
        return 1;
      }
    }
  }
  return 0;
}

uint64_t sub_100077ED4(void *a1, void *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  id v10;
  id v11;
  void *v12;
  id v13;
  uint64_t v14;
  void *v15;
  _QWORD v17[5];
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD v21[5];
  _QWORD v22[5];
  _QWORD v23[5];
  _QWORD v24[6];

  v18 = type metadata accessor for Logger(0);
  v17[4] = *(_QWORD *)(v18 - 8);
  __chkstk_darwin(v18);
  v4 = type metadata accessor for HKTDataTypeDetailFactory(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = type metadata accessor for DataTypeDetailConfiguration.Context(0);
  v19 = *(_QWORD *)(v20 - 8);
  __chkstk_darwin(v20);
  v9 = (char *)v17 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = objc_msgSend(a1, "objectType");
  UIViewController.resolvedHealthExperienceStore.getter(v24);
  v11 = objc_msgSend(a2, "resolvedHealthStore");
  if (v11)
  {
    v12 = v11;
    v17[2] = a1;
    UIViewController.resolvedPinnedContentManager.getter(v23, v11);
    sub_100028F08((uint64_t)v24, (uint64_t)v22);
    sub_100028F08((uint64_t)v23, (uint64_t)v21);
    v13 = v12;
    v14 = DataTypeDetailConfiguration.Context.init(healthExperienceStore:healthStore:mode:pinnedContentManager:chartContext:restorationUserActivity:)(v22, v13, 1, v21, 0, 0);
    HKTDataTypeDetailFactory.init()(v14);
    v15 = (void *)HKTDataTypeDetailFactory.makeViewController(hkType:context:)(v10, v9);
    objc_msgSend(a2, "showViewController:sender:", v15, 0);

    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    (*(void (**)(char *, uint64_t))(v19 + 8))(v9, v20);
    _s6Health23OpenSleepScheduleIntentVwxx_0(v23);
  }
  else
  {
    sub_10007BB8C(a1, a2);

  }
  return _s6Health23OpenSleepScheduleIntentVwxx_0(v24);
}

uint64_t sub_100078328(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  Swift::String v13;
  Swift::String v14;
  Swift::String v15;
  unint64_t v16;
  void *v17;
  NSString v18;
  NSString v19;
  id v20;
  id v21;
  NSURL *v22;
  void *v23;
  void *v24;
  void *v25;
  unint64_t v26;
  Class isa;
  unint64_t v29;
  unint64_t v30;

  v9 = type metadata accessor for URL(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v29 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v29 = 0;
  v30 = 0xE000000000000000;
  _StringGuts.grow(_:)(40);
  swift_bridgeObjectRelease(v30);
  v29 = 0xD00000000000001FLL;
  v30 = 0x80000001000BCF40;
  v13._countAndFlagsBits = a2;
  v13._object = a3;
  String.append(_:)(v13);
  v14._countAndFlagsBits = 0x20726F6620;
  v14._object = (void *)0xE500000000000000;
  String.append(_:)(v14);
  v15._countAndFlagsBits = a4;
  v15._object = a5;
  String.append(_:)(v15);
  v16 = v30;
  v17 = (void *)objc_opt_self(NSURL);
  v18 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v16);
  v19 = String._bridgeToObjectiveC()();
  v20 = objc_msgSend(v17, "hk_tapToHealthRadarURLWithTitle:description:classification:reproducibility:keywords:autoDiagnostics:attachments:", v18, v19, 7, 0, 0, 0, 0);

  static URL._unconditionallyBridgeFromObjectiveC(_:)(v20);
  v21 = objc_msgSend((id)objc_opt_self(LSApplicationWorkspace), "defaultWorkspace");
  if (v21)
  {
    v23 = v21;
    URL._bridgeToObjectiveC()(v22);
    v25 = v24;
    v26 = sub_10007C1F8((uint64_t)_swiftEmptyArrayStorage);
    isa = Dictionary._bridgeToObjectiveC()().super.isa;
    objc_msgSend(v23, "openSensitiveURL:withOptions:", v25, isa, swift_bridgeObjectRelease(v26).n128_f64[0]);

  }
  return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v12, v9);
}

void sub_100078550(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_100078580(a1, a2, a3, (uint64_t)"init(_:identifier:)", 19);
}

void sub_100078568(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_100078580(a1, a2, a3, (uint64_t)"init(arrangedSections:identifier:)", 34);
}

void sub_100078580(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _swift_stdlib_reportUnimplementedInitializer("Health.InternalSettingsAllDataTypeDetailViewsDataSource", 55, a4, a5, 0);
  __break(1u);
}

uint64_t sub_1000785A8()
{
  return type metadata accessor for InternalSettingsAllDataTypeDetailViewsDataSource(0);
}

unint64_t sub_1000785B0@<X0>(uint64_t a1@<X3>, uint64_t *a2@<X8>)
{
  swift_getWitnessTable(&unk_1000B4DF8, a1);
  return sub_1000213F0(a2);
}

uint64_t sub_10007861C(uint64_t a1, uint64_t a2)
{
  uint64_t WitnessTable;

  WitnessTable = swift_getWitnessTable(&unk_1000B4DF8, a2);
  return sub_100020F3C(a1, a2, WitnessTable);
}

uint64_t sub_10007866C(uint64_t a1)
{
  uint64_t result;

  *(_QWORD *)(a1 + 8) = sub_100013198(&qword_1000EF5F0, type metadata accessor for InternalSettingsAllDataTypeDetailViewsDataSource, (uint64_t)&unk_1000B4DA0);
  result = sub_100013198(&qword_1000EF5F8, type metadata accessor for InternalSettingsAllDataTypeDetailViewsDataSource, (uint64_t)&unk_1000B4DD0);
  *(_QWORD *)(a1 + 24) = result;
  return result;
}

uint64_t sub_1000786C8()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

void sub_1000786D8(void *a1)
{
  sub_100077708(a1);
}

void sub_1000786E0(uint64_t a1, unint64_t *a2, unint64_t *a3, uint64_t a4, char a5)
{
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;

  if (!*a2)
  {
    v7 = sub_10001314C(255, a3, a4, a5 & 1);
    v8 = type metadata accessor for _ContiguousArrayStorage(a1, v7);
    if (!v9)
      atomic_store(v8, a2);
  }
}

_QWORD *sub_10007873C(uint64_t a1)
{
  return sub_1000789FC(a1, (uint64_t (*)(_QWORD *, uint64_t, uint64_t))sub_10007A89C);
}

_QWORD *sub_100078748(uint64_t a1)
{
  return sub_1000789FC(a1, (uint64_t (*)(_QWORD *, uint64_t, uint64_t))sub_10007AAD8);
}

_QWORD *sub_100078754(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;
  unint64_t v13;
  _QWORD *result;

  v4 = a4 >> 1;
  v5 = (a4 >> 1) - a3;
  if (__OFSUB__(a4 >> 1, a3))
    goto LABEL_18;
  if (!v5)
    return _swiftEmptyArrayStorage;
  v8 = 8 * v5;
  if (v5 <= 0)
  {
    v10 = _swiftEmptyArrayStorage;
    if (v4 != a3)
      goto LABEL_7;
    goto LABEL_17;
  }
  sub_1000275F4(0, (unint64_t *)&qword_1000ED9C0, (uint64_t)&type metadata for Swift.AnyObject + 8);
  v10 = (_QWORD *)swift_allocObject(v9, v8 + 32, 7);
  v11 = j__malloc_size(v10);
  v12 = v11 - 32;
  if (v11 < 32)
    v12 = v11 - 25;
  v10[2] = v5;
  v10[3] = (2 * (v12 >> 3)) | 1;
  if (v4 == a3)
  {
LABEL_17:
    __break(1u);
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
LABEL_7:
  if (v5 < 0)
  {
LABEL_19:
    result = (_QWORD *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
    goto LABEL_20;
  }
  v13 = a2 + 8 * a3;
  if (v13 >= (unint64_t)&v10[(unint64_t)v8 / 8 + 4] || (unint64_t)(v10 + 4) >= v13 + v8)
  {
    sub_100006D10(0, &qword_1000EC1A8, UIColor_ptr);
    swift_arrayInitWithCopy(v10 + 4);
    return v10;
  }
  result = (_QWORD *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_20:
  __break(1u);
  return result;
}

_QWORD *sub_1000788F4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  _QWORD *v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return _swiftEmptyArrayStorage;
  sub_1000275F4(0, (unint64_t *)&qword_1000EF4C0, (uint64_t)&type metadata for String);
  v4 = (_QWORD *)swift_allocObject(v3, 16 * v1 + 32, 7);
  v5 = j__malloc_size(v4);
  v6 = v5 - 32;
  if (v5 < 32)
    v6 = v5 - 17;
  v4[2] = v1;
  v4[3] = 2 * (v6 >> 4);
  v7 = sub_10007B3C8((uint64_t)&v10, v4 + 4, v1, a1);
  v8 = v10;
  swift_bridgeObjectRetain(a1);
  sub_10005E5A4(v8);
  if (v7 != v1)
  {
    __break(1u);
    return _swiftEmptyArrayStorage;
  }
  return v4;
}

_QWORD *sub_1000789E4(uint64_t a1)
{
  return sub_1000789FC(a1, (uint64_t (*)(_QWORD *, uint64_t, uint64_t))sub_10007AD14);
}

_QWORD *sub_1000789F0(uint64_t a1)
{
  return sub_1000789FC(a1, (uint64_t (*)(_QWORD *, uint64_t, uint64_t))sub_10007AF50);
}

_QWORD *sub_1000789FC(uint64_t a1, uint64_t (*a2)(_QWORD *, uint64_t, uint64_t))
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t (*v10)(_QWORD *, uint64_t, uint64_t);
  uint64_t v11;

  if ((unint64_t)a1 >> 62)
    goto LABEL_10;
  v4 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (!v4)
    return _swiftEmptyArrayStorage;
  while (1)
  {
    if (v4 <= 0)
    {
      v6 = _swiftEmptyArrayStorage;
    }
    else
    {
      sub_1000275F4(0, (unint64_t *)&qword_1000ED9C0, (uint64_t)&type metadata for Swift.AnyObject + 8);
      v6 = (_QWORD *)swift_allocObject(v5, 8 * v4 + 32, 7);
      v7 = j__malloc_size(v6);
      v8 = v7 - 32;
      if (v7 < 32)
        v8 = v7 - 25;
      v6[2] = v4;
      v6[3] = (2 * (v8 >> 3)) | 1;
    }
    swift_bridgeObjectRetain(a1);
    v9 = a2(v6 + 4, v4, a1);
    a2 = v10;
    swift_bridgeObjectRelease(v9);
    if (a2 == (uint64_t (*)(_QWORD *, uint64_t, uint64_t))v4)
      break;
    __break(1u);
LABEL_10:
    if (a1 < 0)
      v11 = a1;
    else
      v11 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v4 = _CocoaArrayWrapper.endIndex.getter(v11);
    swift_bridgeObjectRelease(a1);
    if (!v4)
      return _swiftEmptyArrayStorage;
  }
  return v6;
}

_QWORD *sub_100078B0C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  _QWORD *v4;
  int64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v10;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return _swiftEmptyArrayStorage;
  sub_1000275F4(0, &qword_1000ED440, (uint64_t)&type metadata for HKDataType);
  v4 = (_QWORD *)swift_allocObject(v3, 16 * v1 + 32, 7);
  v5 = j__malloc_size(v4);
  v6 = v5 - 32;
  if (v5 < 32)
    v6 = v5 - 17;
  v4[2] = v1;
  v4[3] = 2 * (v6 >> 4);
  v7 = sub_10007B5C4(&v10, (uint64_t)(v4 + 4), v1, a1);
  v8 = v10;
  swift_bridgeObjectRetain(a1);
  sub_10005E5A4(v8);
  if (v7 != (_QWORD *)v1)
  {
    __break(1u);
    return _swiftEmptyArrayStorage;
  }
  return v4;
}

uint64_t sub_100078BFC(uint64_t *a1)
{
  uint64_t v2;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7[2];

  v2 = *a1;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*a1);
  *a1 = v2;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    v2 = sub_100079EFC(v2);
    *a1 = v2;
  }
  v4 = *(_QWORD *)(v2 + 16);
  v7[0] = v2 + 32;
  v7[1] = v4;
  sub_100078C74(v7);
  return specialized ContiguousArray._endMutation()(v5);
}

void sub_100078C74(uint64_t *a1)
{
  uint64_t v1;
  Swift::Int v3;
  Swift::Int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  Swift::Int v10;
  uint64_t v11;
  Swift::Int v12;
  unint64_t v13;
  Swift::Int v14;
  Swift::Int v15;
  void *v16;
  id v17;
  id v18;
  id v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  id v24;
  id v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  id *v30;
  int v31;
  void *v32;
  id v33;
  id v34;
  id v35;
  id v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  id v40;
  id v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t *v46;
  Swift::Int v47;
  Swift::Int v48;
  uint64_t *v49;
  uint64_t v50;
  Swift::Int v51;
  uint64_t v52;
  Swift::Int v53;
  void *v54;
  Swift::Int v55;
  uint64_t v56;
  void *v57;
  id v58;
  id v59;
  id v60;
  id v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  id v65;
  id v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  char v71;
  void *v72;
  unint64_t v73;
  unint64_t v74;
  char *v75;
  char *v76;
  unint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  char v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  BOOL v88;
  unint64_t v89;
  char *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  char *v95;
  uint64_t v96;
  uint64_t v97;
  BOOL v98;
  uint64_t v99;
  char v100;
  char *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  BOOL v105;
  uint64_t v106;
  uint64_t v107;
  char *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  char *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  unint64_t v116;
  char *v117;
  uint64_t v118;
  char *v119;
  uint64_t v120;
  unint64_t v121;
  uint64_t v122;
  unint64_t v123;
  uint64_t v124;
  uint64_t v125;
  char *v126;
  unint64_t v127;
  uint64_t v128;
  uint64_t *v129;
  uint64_t v130;
  uint64_t v131;
  Swift::Int v132;
  char *v133;
  char *v134;
  Swift::Int v135;
  Swift::Int v136;
  Swift::Int v137;
  int v138;
  uint64_t v139;
  void **v140;
  uint64_t v141;
  Swift::Int v142;
  Swift::Int v143;
  Swift::Int v144;
  uint64_t v145;

  v3 = a1[1];
  v4 = _minimumMergeRunLength(_:)(v3);
  if (v4 >= v3)
  {
    if (v3 < 0)
      goto LABEL_149;
    if (v3)
      sub_10007960C(0, v3, 1, a1);
    return;
  }
  if (v3 >= 0)
    v5 = v3;
  else
    v5 = v3 + 1;
  if (v3 < -1)
    goto LABEL_157;
  v132 = v4;
  v137 = v3;
  v129 = a1;
  if (v3 < 2)
  {
    v9 = (char *)_swiftEmptyArrayStorage;
    v145 = (uint64_t)_swiftEmptyArrayStorage;
    v140 = (void **)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 32);
    if (v3 != 1)
    {
      v13 = _swiftEmptyArrayStorage[2];
LABEL_115:
      if (v13 >= 2)
      {
        v122 = *v129;
        do
        {
          v123 = v13 - 2;
          if (v13 < 2)
            goto LABEL_144;
          if (!v122)
            goto LABEL_156;
          v124 = *(_QWORD *)&v9[16 * v123 + 32];
          v125 = *(_QWORD *)&v9[16 * v13 + 24];
          sub_1000797CC((void **)(v122 + 8 * v124), (id *)(v122 + 8 * *(_QWORD *)&v9[16 * v13 + 16]), (id *)(v122 + 8 * v125), v140);
          if (v1)
            break;
          if (v125 < v124)
            goto LABEL_145;
          if ((swift_isUniquelyReferenced_nonNull_native(v9) & 1) == 0)
            v9 = sub_100079EC0((uint64_t)v9);
          if (v123 >= *((_QWORD *)v9 + 2))
            goto LABEL_146;
          v126 = &v9[16 * v123 + 32];
          *(_QWORD *)v126 = v124;
          *((_QWORD *)v126 + 1) = v125;
          v127 = *((_QWORD *)v9 + 2);
          if (v13 > v127)
            goto LABEL_147;
          memmove(&v9[16 * v13 + 16], &v9[16 * v13 + 32], 16 * (v127 - v13));
          *((_QWORD *)v9 + 2) = v127 - 1;
          v13 = v127 - 1;
        }
        while (v127 > 2);
      }
LABEL_126:
      swift_bridgeObjectRelease(v9);
      *(_QWORD *)((v145 & 0xFFFFFFFFFFFFF8) + 0x10) = 0;
      specialized Array._endMutation()(v128);
      swift_bridgeObjectRelease(v145);
      return;
    }
  }
  else
  {
    v6 = v5 >> 1;
    v7 = sub_100006D10(0, &qword_1000EE500, HKDisplayType_ptr);
    v8 = static Array._allocateBufferUninitialized(minimumCapacity:)(v6, v7);
    *(_QWORD *)((v8 & 0xFFFFFFFFFFFFFF8) + 0x10) = v6;
    v140 = (void **)((v8 & 0xFFFFFFFFFFFFFF8) + 32);
    v145 = v8;
  }
  v10 = 0;
  v11 = *a1;
  v130 = *a1 + 16;
  v131 = *a1 - 8;
  v9 = (char *)_swiftEmptyArrayStorage;
  v12 = v137;
  v141 = *a1;
  while (2)
  {
    v14 = v10;
    v15 = v10 + 1;
    v136 = v10;
    if (v10 + 1 >= v12)
      goto LABEL_45;
    v133 = v9;
    v16 = *(void **)(v11 + 8 * v10);
    v17 = *(id *)(v11 + 8 * v15);
    v18 = v16;
    v19 = objc_msgSend(v17, "localization");
    v20 = objc_msgSend(v19, "displayName");

    v21 = static String._unconditionallyBridgeFromObjectiveC(_:)(v20);
    v23 = v22;

    v24 = objc_msgSend(v18, "localization");
    v25 = objc_msgSend(v24, "displayName");

    v26 = static String._unconditionallyBridgeFromObjectiveC(_:)(v25);
    v28 = v27;

    if (v21 == v26 && v23 == v28)
    {
      v138 = 0;
      v28 = v23;
    }
    else
    {
      v138 = _stringCompareWithSmolCheck(_:_:expecting:)(v21, v23, v26, v28, 1);
    }
    swift_bridgeObjectRelease(v23);
    swift_bridgeObjectRelease(v28);

    v14 = v136;
    v15 = v136 + 2;
    if (v136 + 2 >= v137)
      goto LABEL_36;
    v30 = (id *)(v130 + 8 * v136);
    while (1)
    {
      v142 = v15;
      v32 = *(v30 - 1);
      v33 = *v30;
      v34 = v32;
      v35 = objc_msgSend(v33, "localization");
      v36 = objc_msgSend(v35, "displayName");

      v37 = static String._unconditionallyBridgeFromObjectiveC(_:)(v36);
      v39 = v38;

      v40 = objc_msgSend(v34, "localization");
      v41 = objc_msgSend(v40, "displayName");

      v42 = static String._unconditionallyBridgeFromObjectiveC(_:)(v41);
      v44 = v43;

      if (v37 == v42 && v39 == v44)
      {

        swift_bridgeObjectRelease_n(v39, 2);
        if ((v138 & 1) != 0)
        {
          v9 = v133;
          v11 = v141;
          v15 = v142;
          v14 = v136;
          goto LABEL_37;
        }
        goto LABEL_25;
      }
      v31 = _stringCompareWithSmolCheck(_:_:expecting:)(v37, v39, v42, v44, 1);

      swift_bridgeObjectRelease(v39);
      swift_bridgeObjectRelease(v44);
      if (((v138 ^ v31) & 1) != 0)
        break;
LABEL_25:
      v15 = v142 + 1;
      ++v30;
      if (v137 == v142 + 1)
      {
        v15 = v137;
        goto LABEL_35;
      }
    }
    v15 = v142;
LABEL_35:
    v14 = v136;
LABEL_36:
    v9 = v133;
    v11 = v141;
    if ((v138 & 1) != 0)
    {
LABEL_37:
      if (v15 < v14)
        goto LABEL_150;
      if (v14 < v15)
      {
        v46 = (uint64_t *)(v131 + 8 * v15);
        v47 = v15;
        v48 = v14;
        v49 = (uint64_t *)(v11 + 8 * v14);
        do
        {
          if (v48 != --v47)
          {
            if (!v11)
              goto LABEL_155;
            v50 = *v49;
            *v49 = *v46;
            *v46 = v50;
          }
          ++v48;
          --v46;
          ++v49;
        }
        while (v48 < v47);
      }
    }
LABEL_45:
    if (v15 >= v137)
      goto LABEL_67;
    if (__OFSUB__(v15, v14))
      goto LABEL_148;
    if (v15 - v14 >= v132)
    {
LABEL_67:
      if (v15 < v14)
        goto LABEL_143;
      if ((swift_isUniquelyReferenced_nonNull_native(v9) & 1) == 0)
        v9 = sub_100079C78(0, *((_QWORD *)v9 + 2) + 1, 1, v9);
      v74 = *((_QWORD *)v9 + 2);
      v73 = *((_QWORD *)v9 + 3);
      v13 = v74 + 1;
      v144 = v15;
      if (v74 >= v73 >> 1)
        v9 = sub_100079C78((char *)(v73 > 1), v74 + 1, 1, v9);
      *((_QWORD *)v9 + 2) = v13;
      v75 = v9 + 32;
      v76 = &v9[16 * v74 + 32];
      *(_QWORD *)v76 = v14;
      *((_QWORD *)v76 + 1) = v144;
      if (!v74)
      {
        v13 = 1;
LABEL_14:
        v12 = v137;
        v10 = v144;
        if (v144 >= v137)
          goto LABEL_115;
        continue;
      }
      while (1)
      {
        v77 = v13 - 1;
        if (v13 >= 4)
        {
          v82 = &v75[16 * v13];
          v83 = *((_QWORD *)v82 - 8);
          v84 = *((_QWORD *)v82 - 7);
          v88 = __OFSUB__(v84, v83);
          v85 = v84 - v83;
          if (v88)
            goto LABEL_132;
          v87 = *((_QWORD *)v82 - 6);
          v86 = *((_QWORD *)v82 - 5);
          v88 = __OFSUB__(v86, v87);
          v80 = v86 - v87;
          v81 = v88;
          if (v88)
            goto LABEL_133;
          v89 = v13 - 2;
          v90 = &v75[16 * v13 - 32];
          v92 = *(_QWORD *)v90;
          v91 = *((_QWORD *)v90 + 1);
          v88 = __OFSUB__(v91, v92);
          v93 = v91 - v92;
          if (v88)
            goto LABEL_135;
          v88 = __OFADD__(v80, v93);
          v94 = v80 + v93;
          if (v88)
            goto LABEL_138;
          if (v94 >= v85)
          {
            v112 = &v75[16 * v77];
            v114 = *(_QWORD *)v112;
            v113 = *((_QWORD *)v112 + 1);
            v88 = __OFSUB__(v113, v114);
            v115 = v113 - v114;
            if (v88)
              goto LABEL_142;
            v105 = v80 < v115;
            goto LABEL_104;
          }
        }
        else
        {
          if (v13 != 3)
          {
            v106 = *((_QWORD *)v9 + 4);
            v107 = *((_QWORD *)v9 + 5);
            v88 = __OFSUB__(v107, v106);
            v99 = v107 - v106;
            v100 = v88;
            goto LABEL_98;
          }
          v79 = *((_QWORD *)v9 + 4);
          v78 = *((_QWORD *)v9 + 5);
          v88 = __OFSUB__(v78, v79);
          v80 = v78 - v79;
          v81 = v88;
        }
        if ((v81 & 1) != 0)
          goto LABEL_134;
        v89 = v13 - 2;
        v95 = &v75[16 * v13 - 32];
        v97 = *(_QWORD *)v95;
        v96 = *((_QWORD *)v95 + 1);
        v98 = __OFSUB__(v96, v97);
        v99 = v96 - v97;
        v100 = v98;
        if (v98)
          goto LABEL_137;
        v101 = &v75[16 * v77];
        v103 = *(_QWORD *)v101;
        v102 = *((_QWORD *)v101 + 1);
        v88 = __OFSUB__(v102, v103);
        v104 = v102 - v103;
        if (v88)
          goto LABEL_140;
        if (__OFADD__(v99, v104))
          goto LABEL_141;
        if (v99 + v104 >= v80)
        {
          v105 = v80 < v104;
LABEL_104:
          if (v105)
            v77 = v89;
          goto LABEL_106;
        }
LABEL_98:
        if ((v100 & 1) != 0)
          goto LABEL_136;
        v108 = &v75[16 * v77];
        v110 = *(_QWORD *)v108;
        v109 = *((_QWORD *)v108 + 1);
        v88 = __OFSUB__(v109, v110);
        v111 = v109 - v110;
        if (v88)
          goto LABEL_139;
        if (v111 < v99)
          goto LABEL_14;
LABEL_106:
        v116 = v77 - 1;
        if (v77 - 1 >= v13)
        {
          __break(1u);
LABEL_129:
          __break(1u);
LABEL_130:
          __break(1u);
LABEL_131:
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
LABEL_139:
          __break(1u);
LABEL_140:
          __break(1u);
LABEL_141:
          __break(1u);
LABEL_142:
          __break(1u);
LABEL_143:
          __break(1u);
LABEL_144:
          __break(1u);
LABEL_145:
          __break(1u);
LABEL_146:
          __break(1u);
LABEL_147:
          __break(1u);
LABEL_148:
          __break(1u);
LABEL_149:
          __break(1u);
LABEL_150:
          __break(1u);
LABEL_151:
          __break(1u);
          goto LABEL_152;
        }
        if (!v11)
          goto LABEL_154;
        v117 = &v75[16 * v116];
        v118 = *(_QWORD *)v117;
        v119 = &v75[16 * v77];
        v120 = *((_QWORD *)v119 + 1);
        sub_1000797CC((void **)(v11 + 8 * *(_QWORD *)v117), (id *)(v11 + 8 * *(_QWORD *)v119), (id *)(v11 + 8 * v120), v140);
        if (v1)
          goto LABEL_126;
        if (v120 < v118)
          goto LABEL_129;
        if (v77 > *((_QWORD *)v9 + 2))
          goto LABEL_130;
        *(_QWORD *)v117 = v118;
        *(_QWORD *)&v75[16 * v116 + 8] = v120;
        v121 = *((_QWORD *)v9 + 2);
        if (v77 >= v121)
          goto LABEL_131;
        v13 = v121 - 1;
        memmove(&v75[16 * v77], v119 + 16, 16 * (v121 - 1 - v77));
        *((_QWORD *)v9 + 2) = v121 - 1;
        if (v121 <= 2)
          goto LABEL_14;
      }
    }
    break;
  }
  if (__OFADD__(v14, v132))
    goto LABEL_151;
  v51 = v137;
  if (v14 + v132 < v137)
    v51 = v14 + v132;
  if (v51 >= v14)
  {
    if (v15 != v51)
    {
      v134 = v9;
      v135 = v51;
      v52 = v131 + 8 * v15;
      do
      {
        v54 = *(void **)(v11 + 8 * v15);
        v55 = v14;
        v139 = v52;
        v56 = v52;
        v143 = v15;
        while (1)
        {
          v57 = *(void **)v56;
          v58 = v54;
          v59 = v57;
          v60 = objc_msgSend(v58, "localization");
          v61 = objc_msgSend(v60, "displayName");

          v62 = static String._unconditionallyBridgeFromObjectiveC(_:)(v61);
          v64 = v63;

          v65 = objc_msgSend(v59, "localization");
          v66 = objc_msgSend(v65, "displayName");

          v67 = static String._unconditionallyBridgeFromObjectiveC(_:)(v66);
          v69 = v68;

          if (v62 == v67 && v64 == v69)
          {

            swift_bridgeObjectRelease_n(v64, 2);
            v11 = v141;
            v53 = v143;
            goto LABEL_55;
          }
          v71 = _stringCompareWithSmolCheck(_:_:expecting:)(v62, v64, v67, v69, 1);

          swift_bridgeObjectRelease(v64);
          swift_bridgeObjectRelease(v69);
          v11 = v141;
          if ((v71 & 1) == 0)
            break;
          v53 = v143;
          if (!v141)
            goto LABEL_153;
          v72 = *(void **)v56;
          v54 = *(void **)(v56 + 8);
          *(_QWORD *)v56 = v54;
          *(_QWORD *)(v56 + 8) = v72;
          v56 -= 8;
          if (v143 == ++v55)
            goto LABEL_55;
        }
        v53 = v143;
LABEL_55:
        v15 = v53 + 1;
        v52 = v139 + 8;
        v14 = v136;
      }
      while (v15 != v135);
      v15 = v135;
      v9 = v134;
    }
    goto LABEL_67;
  }
LABEL_152:
  __break(1u);
LABEL_153:
  __break(1u);
LABEL_154:
  __break(1u);
LABEL_155:
  __break(1u);
LABEL_156:
  __break(1u);
LABEL_157:
  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Can't construct Array with count < 0", 36, 2, "Swift/Array.swift", 17, 2, 936, 0);
  __break(1u);
}

uint64_t sub_10007960C(uint64_t result, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  void *v8;
  id v9;
  id v10;
  id v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  id v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v22;
  void *v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v25 = result;
  if (a3 != a2)
  {
    v27 = *a4;
    v4 = *a4 + 8 * a3 - 8;
LABEL_6:
    v6 = *(void **)(v27 + 8 * a3);
    v7 = v25;
    v26 = v4;
    v28 = a3;
    while (1)
    {
      v8 = *(void **)v4;
      v9 = v6;
      v10 = v8;
      v11 = objc_msgSend(v9, "localization");
      v12 = objc_msgSend(v11, "displayName");

      v13 = static String._unconditionallyBridgeFromObjectiveC(_:)(v12);
      v15 = v14;

      v16 = objc_msgSend(v10, "localization");
      v17 = objc_msgSend(v16, "displayName");

      v18 = static String._unconditionallyBridgeFromObjectiveC(_:)(v17);
      v20 = v19;

      if (v13 == v18 && v15 == v20)
      {

        result = swift_bridgeObjectRelease_n(v15, 2);
        v5 = v28;
LABEL_5:
        a3 = v5 + 1;
        v4 = v26 + 8;
        if (a3 == a2)
          return result;
        goto LABEL_6;
      }
      v22 = _stringCompareWithSmolCheck(_:_:expecting:)(v13, v15, v18, v20, 1);

      swift_bridgeObjectRelease(v15);
      result = swift_bridgeObjectRelease(v20);
      v5 = v28;
      if ((v22 & 1) == 0)
        goto LABEL_5;
      if (!v27)
        break;
      v23 = *(void **)v4;
      v6 = *(void **)(v4 + 8);
      *(_QWORD *)v4 = v6;
      *(_QWORD *)(v4 + 8) = v23;
      v4 -= 8;
      if (v28 == ++v7)
        goto LABEL_5;
    }
    __break(1u);
  }
  return result;
}

uint64_t sub_1000797CC(void **__src, id *a2, id *a3, void **__dst)
{
  void **v4;
  id *v5;
  id *v6;
  id *v7;
  int64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  id v15;
  id v16;
  id v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  id v22;
  id v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v28;
  id *v29;
  id *v30;
  void **v31;
  void **v32;
  id *v33;
  void *v34;
  void *v35;
  void *v36;
  id v37;
  id v38;
  id v39;
  id v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  id v44;
  id v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char v50;
  id *v51;
  unint64_t v52;
  uint64_t result;
  void **v54;
  void *v55;
  void **v56;
  id *v57;
  void **v58;
  id *v59;
  id *v60;
  id *v61;
  id *v62;
  id *v63;
  void **v64;
  void **v65;
  id *v66;

  v4 = __dst;
  v5 = a3;
  v6 = a2;
  v7 = __src;
  v8 = (char *)a2 - (char *)__src;
  v9 = (char *)a2 - (char *)__src + 7;
  if ((char *)a2 - (char *)__src >= 0)
    v9 = (char *)a2 - (char *)__src;
  v10 = v9 >> 3;
  v11 = (char *)a3 - (char *)a2;
  v12 = (char *)a3 - (char *)a2 + 7;
  if ((char *)a3 - (char *)a2 >= 0)
    v12 = (char *)a3 - (char *)a2;
  v13 = v12 >> 3;
  v66 = __src;
  v65 = __dst;
  if (v10 >= v12 >> 3)
  {
    if (v11 < -7)
      goto LABEL_53;
    if (__dst != a2 || &a2[v13] <= __dst)
      memmove(__dst, a2, 8 * v13);
    v54 = v4;
    v32 = &v4[v13];
    v64 = v32;
    v66 = v6;
    if (v7 >= v6 || v11 < 8)
    {
LABEL_52:
      sub_100079E18((void **)&v66, (const void **)&v65, &v64);
      return 1;
    }
    v33 = v6;
    v59 = v7;
    while (1)
    {
      v61 = v5;
      v63 = v6;
      v57 = v32;
      v35 = *--v32;
      v34 = v35;
      v36 = *--v33;
      v37 = v34;
      v38 = v36;
      v55 = v37;
      v39 = objc_msgSend(v37, "localization");
      v40 = objc_msgSend(v39, "displayName");

      v41 = static String._unconditionallyBridgeFromObjectiveC(_:)(v40);
      v43 = v42;

      v44 = objc_msgSend(v38, "localization");
      v45 = objc_msgSend(v44, "displayName");

      v46 = static String._unconditionallyBridgeFromObjectiveC(_:)(v45);
      v48 = v47;

      if (v41 == v46 && v43 == v48)
        break;
      v50 = _stringCompareWithSmolCheck(_:_:expecting:)(v41, v43, v46, v48, 1);

      swift_bridgeObjectRelease(v43);
      swift_bridgeObjectRelease(v48);
      v51 = v61;
      v5 = v61 - 1;
      if ((v50 & 1) == 0)
        goto LABEL_46;
      v32 = v57;
      v52 = (unint64_t)v59;
      if (v61 != v63 || v5 >= v63)
        *v5 = *v33;
      v66 = v33;
LABEL_50:
      if ((unint64_t)v33 > v52)
      {
        v6 = v33;
        if (v32 > v54)
          continue;
      }
      goto LABEL_52;
    }

    swift_bridgeObjectRelease_n(v43, 2);
    v51 = v61;
    v5 = v61 - 1;
LABEL_46:
    v52 = (unint64_t)v59;
    v33 = v63;
    v64 = v32;
    if (v51 < v57 || v5 >= v57 || v51 != v57)
      *v5 = *v32;
    goto LABEL_50;
  }
  if (v8 >= -7)
  {
    if (__dst != __src || &__src[v10] <= __dst)
      memmove(__dst, __src, 8 * v10);
    v56 = &v4[v10];
    v64 = v56;
    if (v6 < v5 && v8 >= 8)
    {
      v60 = v5;
      while (1)
      {
        v58 = v7;
        v62 = v6;
        v14 = *v4;
        v15 = *v6;
        v16 = v14;
        v17 = objc_msgSend(v15, "localization");
        v18 = objc_msgSend(v17, "displayName");

        v19 = static String._unconditionallyBridgeFromObjectiveC(_:)(v18);
        v21 = v20;

        v22 = objc_msgSend(v16, "localization");
        v23 = objc_msgSend(v22, "displayName");

        v24 = static String._unconditionallyBridgeFromObjectiveC(_:)(v23);
        v26 = v25;

        if (v19 == v24 && v21 == v26)
          break;
        v28 = _stringCompareWithSmolCheck(_:_:expecting:)(v19, v21, v24, v26, 1);

        swift_bridgeObjectRelease(v21);
        swift_bridgeObjectRelease(v26);
        if ((v28 & 1) == 0)
          goto LABEL_23;
        v29 = v60;
        v30 = v62 + 1;
        v31 = v58;
        if (v58 < v62 || v58 >= v30 || v58 != v62)
          *v58 = *v62;
LABEL_26:
        v7 = v31 + 1;
        if (v4 < v56)
        {
          v6 = v30;
          if (v30 < v29)
            continue;
        }
        v66 = v7;
        goto LABEL_52;
      }

      swift_bridgeObjectRelease_n(v21, 2);
LABEL_23:
      v31 = v58;
      v29 = v60;
      if (v58 != v4)
        *v58 = *v4;
      v65 = ++v4;
      v30 = v62;
      goto LABEL_26;
    }
    goto LABEL_52;
  }
LABEL_53:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, 2, 1046, 0);
  __break(1u);
  return result;
}

char *sub_100079C78(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    sub_10007BEFC(0);
    v11 = (char *)swift_allocObject(v10, 16 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 17;
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * (v13 >> 4);
  }
  else
  {
    v11 = (char *)_swiftEmptyArrayStorage;
  }
  v14 = v11 + 32;
  v15 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v11 != a4 || v14 >= &v15[16 * v8])
      memmove(v14, v15, 16 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v14, v15, 16 * v8);
  }
  swift_bridgeObjectRelease(a4);
  return v11;
}

char *sub_100079D70(void **a1, const void **a2, _QWORD *a3)
{
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *result;
  uint64_t v7;
  char v9;

  v3 = (char *)*a2;
  v4 = *a3 - (_QWORD)v3;
  v5 = v4 + 15;
  if (v4 >= 0)
    v5 = *a3 - (_QWORD)v3;
  if (v4 <= -16)
  {
    v9 = 2;
    result = (char *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, v9, 1046, 0);
    __break(1u);
  }
  else
  {
    result = (char *)*a1;
    v7 = v5 >> 4;
    if (result != v3 || result >= &v3[16 * v7])
      return (char *)memmove(result, v3, 16 * v7);
  }
  return result;
}

char *sub_100079E18(void **a1, const void **a2, _QWORD *a3)
{
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *result;
  uint64_t v7;
  char v9;

  v3 = (char *)*a2;
  v4 = *a3 - (_QWORD)v3;
  v5 = v4 + 7;
  if (v4 >= 0)
    v5 = *a3 - (_QWORD)v3;
  if (v4 <= -8)
  {
    v9 = 2;
    result = (char *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, v9, 1046, 0);
    __break(1u);
  }
  else
  {
    result = (char *)*a1;
    v7 = v5 >> 3;
    if (result != v3 || result >= &v3[8 * v7])
      return (char *)memmove(result, v3, 8 * v7);
  }
  return result;
}

char *sub_100079EC0(uint64_t a1)
{
  return sub_100079C78(0, *(_QWORD *)(a1 + 16), 0, (char *)a1);
}

uint64_t sub_100079ED4(uint64_t a1)
{
  return sub_10008025C(0, *(_QWORD *)(a1 + 16), 0, (char *)a1);
}

uint64_t sub_100079EE8(_QWORD *a1)
{
  return sub_1000803D0(0, a1[2], 0, a1);
}

uint64_t sub_100079EFC(uint64_t a1)
{
  return specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(a1 + 16), 0, a1);
}

uint64_t sub_100079F10(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v7;
  Swift::Int v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  BOOL v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  BOOL v21;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v23;
  _QWORD v24[9];

  v7 = *v3;
  Hasher.init(_seed:)(v24, *(_QWORD *)(*v3 + 40));
  swift_bridgeObjectRetain(v7);
  String.hash(into:)(v24, a2, a3);
  v8 = Hasher._finalize()();
  v9 = -1 << *(_BYTE *)(v7 + 32);
  v10 = v8 & ~v9;
  if (((*(_QWORD *)(v7 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) != 0)
  {
    v11 = *(_QWORD *)(v7 + 48);
    v12 = (_QWORD *)(v11 + 16 * v10);
    v13 = v12[1];
    v14 = *v12 == a2 && v13 == a3;
    if (v14 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v12, v13, a2, a3, 0) & 1) != 0)
    {
LABEL_7:
      swift_bridgeObjectRelease(a3);
      swift_bridgeObjectRelease(v7);
      v15 = (uint64_t *)(*(_QWORD *)(*v3 + 48) + 16 * v10);
      v16 = v15[1];
      *a1 = *v15;
      a1[1] = v16;
      swift_bridgeObjectRetain(v16);
      return 0;
    }
    v18 = ~v9;
    while (1)
    {
      v10 = (v10 + 1) & v18;
      if (((*(_QWORD *)(v7 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) == 0)
        break;
      v19 = (_QWORD *)(v11 + 16 * v10);
      v20 = v19[1];
      v21 = *v19 == a2 && v20 == a3;
      if (v21 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v19, v20, a2, a3, 0) & 1) != 0)
        goto LABEL_7;
    }
  }
  swift_bridgeObjectRelease(v7);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
  v24[0] = *v3;
  *v3 = 0x8000000000000000;
  swift_bridgeObjectRetain(a3);
  sub_10007A0BC(a2, a3, v10, isUniquelyReferenced_nonNull_native);
  v23 = *v3;
  *v3 = v24[0];
  swift_bridgeObjectRelease(v23);
  *a1 = a2;
  a1[1] = a3;
  return 1;
}

uint64_t sub_10007A0BC(uint64_t result, uint64_t a2, unint64_t a3, char a4)
{
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  BOOL v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  BOOL v26;
  uint64_t v27;
  _QWORD v28[9];

  v5 = v4;
  v8 = result;
  v9 = *(_QWORD *)(*v4 + 16);
  v10 = *(_QWORD *)(*v4 + 24);
  if (v10 > v9 && (a4 & 1) != 0)
    goto LABEL_22;
  v11 = v9 + 1;
  if ((a4 & 1) != 0)
  {
    sub_10005CF54(v11);
  }
  else
  {
    if (v10 > v9)
    {
      result = (uint64_t)sub_10007A254();
      goto LABEL_22;
    }
    sub_10007A5D4(v11);
  }
  v12 = *v4;
  Hasher.init(_seed:)(v28, *(_QWORD *)(*v4 + 40));
  String.hash(into:)(v28, v8, a2);
  result = Hasher._finalize()();
  v13 = -1 << *(_BYTE *)(v12 + 32);
  a3 = result & ~v13;
  v14 = v12 + 56;
  if (((*(_QWORD *)(v12 + 56 + ((a3 >> 3) & 0xFFFFFFFFFFFFF8)) >> a3) & 1) != 0)
  {
    v15 = *(_QWORD *)(v12 + 48);
    v16 = (_QWORD *)(v15 + 16 * a3);
    v17 = v16[1];
    v18 = *v16 == v8 && v17 == a2;
    if (v18 || (result = _stringCompareWithSmolCheck(_:_:expecting:)(*v16, v17, v8, a2, 0), (result & 1) != 0))
    {
LABEL_21:
      result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
      __break(1u);
    }
    else
    {
      v19 = ~v13;
      while (1)
      {
        a3 = (a3 + 1) & v19;
        if (((*(_QWORD *)(v14 + ((a3 >> 3) & 0xFFFFFFFFFFFFF8)) >> a3) & 1) == 0)
          break;
        v20 = (_QWORD *)(v15 + 16 * a3);
        v21 = v20[1];
        if (*v20 != v8 || v21 != a2)
        {
          result = _stringCompareWithSmolCheck(_:_:expecting:)(*v20, v21, v8, a2, 0);
          if ((result & 1) == 0)
            continue;
        }
        goto LABEL_21;
      }
    }
  }
LABEL_22:
  v23 = *v5;
  *(_QWORD *)(*v5 + 8 * (a3 >> 6) + 56) |= 1 << a3;
  v24 = (uint64_t *)(*(_QWORD *)(v23 + 48) + 16 * a3);
  *v24 = v8;
  v24[1] = a2;
  v25 = *(_QWORD *)(v23 + 16);
  v26 = __OFADD__(v25, 1);
  v27 = v25 + 1;
  if (v26)
    __break(1u);
  else
    *(_QWORD *)(v23 + 16) = v27;
  return result;
}

void *sub_10007A254()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;

  v1 = v0;
  sub_10007BF70(0, (unint64_t *)&qword_1000EE808, (uint64_t)&type metadata for String, (uint64_t)&protocol witness table for String, (uint64_t (*)(_QWORD, uint64_t, uint64_t))&type metadata accessor for _SetStorage);
  v2 = *v0;
  v3 = static _SetStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_28:
    result = (void *)swift_release(v2);
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 56);
  v6 = v2 + 56;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 56);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v20 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v20 >= v13)
      goto LABEL_28;
    v21 = *(_QWORD *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      v9 = v20 + 1;
      if (v20 + 1 >= v13)
        goto LABEL_28;
      v21 = *(_QWORD *)(v6 + 8 * v9);
      if (!v21)
      {
        v9 = v20 + 2;
        if (v20 + 2 >= v13)
          goto LABEL_28;
        v21 = *(_QWORD *)(v6 + 8 * v9);
        if (!v21)
          break;
      }
    }
LABEL_27:
    v12 = (v21 - 1) & v21;
    v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (_QWORD *)(*(_QWORD *)(v2 + 48) + v16);
    v18 = v17[1];
    v19 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    *v19 = *v17;
    v19[1] = v18;
    result = (void *)swift_bridgeObjectRetain(v18);
  }
  v22 = v20 + 3;
  if (v22 >= v13)
    goto LABEL_28;
  v21 = *(_QWORD *)(v6 + 8 * v22);
  if (v21)
  {
    v9 = v22;
    goto LABEL_27;
  }
  while (1)
  {
    v9 = v22 + 1;
    if (__OFADD__(v22, 1))
      break;
    if (v9 >= v13)
      goto LABEL_28;
    v21 = *(_QWORD *)(v6 + 8 * v9);
    ++v22;
    if (v21)
      goto LABEL_27;
  }
LABEL_30:
  __break(1u);
  return result;
}

id sub_10007A420()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  id result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;

  v1 = v0;
  sub_10007BFB8(0);
  v2 = *v0;
  v3 = static _SetStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_28:
    result = (id)swift_release(v2);
    *v1 = v4;
    return result;
  }
  result = (id)(v3 + 56);
  v6 = v2 + 56;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 56);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v20 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v20 >= v13)
      goto LABEL_28;
    v21 = *(_QWORD *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      v9 = v20 + 1;
      if (v20 + 1 >= v13)
        goto LABEL_28;
      v21 = *(_QWORD *)(v6 + 8 * v9);
      if (!v21)
      {
        v9 = v20 + 2;
        if (v20 + 2 >= v13)
          goto LABEL_28;
        v21 = *(_QWORD *)(v6 + 8 * v9);
        if (!v21)
          break;
      }
    }
LABEL_27:
    v12 = (v21 - 1) & v21;
    v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = *(_QWORD *)(v2 + 48) + v16;
    v18 = *(void **)v17;
    LOBYTE(v17) = *(_BYTE *)(v17 + 8);
    v19 = *(_QWORD *)(v4 + 48) + v16;
    *(_QWORD *)v19 = v18;
    *(_BYTE *)(v19 + 8) = v17;
    result = v18;
  }
  v22 = v20 + 3;
  if (v22 >= v13)
    goto LABEL_28;
  v21 = *(_QWORD *)(v6 + 8 * v22);
  if (v21)
  {
    v9 = v22;
    goto LABEL_27;
  }
  while (1)
  {
    v9 = v22 + 1;
    if (__OFADD__(v22, 1))
      break;
    if (v9 >= v13)
      goto LABEL_28;
    v21 = *(_QWORD *)(v6 + 8 * v9);
    ++v22;
    if (v21)
      goto LABEL_27;
  }
LABEL_30:
  __break(1u);
  return result;
}

Swift::Int sub_10007A5D4(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  Swift::Int result;
  int64_t v13;
  unint64_t v14;
  _QWORD *v15;
  unint64_t v16;
  unint64_t v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  char v27;
  unint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t *v31;
  int64_t v32;
  _QWORD v33[9];

  v2 = v1;
  v3 = *v1;
  if (*(_QWORD *)(*v1 + 24) <= a1)
    v4 = a1;
  else
    v4 = *(_QWORD *)(*v1 + 24);
  sub_10007BF70(0, (unint64_t *)&qword_1000EE808, (uint64_t)&type metadata for String, (uint64_t)&protocol witness table for String, (uint64_t (*)(_QWORD, uint64_t, uint64_t))&type metadata accessor for _SetStorage);
  v5 = static _SetStorage.resize(original:capacity:move:)(v3, v4, 0);
  v6 = v5;
  if (!*(_QWORD *)(v3 + 16))
  {
    result = swift_release(v3);
LABEL_38:
    *v2 = v6;
    return result;
  }
  v7 = 1 << *(_BYTE *)(v3 + 32);
  v8 = v3 + 56;
  if (v7 < 64)
    v9 = ~(-1 << v7);
  else
    v9 = -1;
  v10 = v9 & *(_QWORD *)(v3 + 56);
  v31 = v2;
  v32 = (unint64_t)(v7 + 63) >> 6;
  v11 = v5 + 56;
  result = swift_retain(v3);
  v13 = 0;
  while (1)
  {
    if (v10)
    {
      v16 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v17 = v16 | (v13 << 6);
      goto LABEL_27;
    }
    v18 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }
    if (v18 >= v32)
      goto LABEL_36;
    v19 = *(_QWORD *)(v8 + 8 * v18);
    ++v13;
    if (!v19)
    {
      v13 = v18 + 1;
      if (v18 + 1 >= v32)
        goto LABEL_36;
      v19 = *(_QWORD *)(v8 + 8 * v13);
      if (!v19)
      {
        v13 = v18 + 2;
        if (v18 + 2 >= v32)
          goto LABEL_36;
        v19 = *(_QWORD *)(v8 + 8 * v13);
        if (!v19)
          break;
      }
    }
LABEL_26:
    v10 = (v19 - 1) & v19;
    v17 = __clz(__rbit64(v19)) + (v13 << 6);
LABEL_27:
    v21 = (uint64_t *)(*(_QWORD *)(v3 + 48) + 16 * v17);
    v22 = *v21;
    v23 = v21[1];
    Hasher.init(_seed:)(v33, *(_QWORD *)(v6 + 40));
    swift_bridgeObjectRetain(v23);
    String.hash(into:)(v33, v22, v23);
    result = Hasher._finalize()();
    v24 = -1 << *(_BYTE *)(v6 + 32);
    v25 = result & ~v24;
    v26 = v25 >> 6;
    if (((-1 << v25) & ~*(_QWORD *)(v11 + 8 * (v25 >> 6))) != 0)
    {
      v14 = __clz(__rbit64((-1 << v25) & ~*(_QWORD *)(v11 + 8 * (v25 >> 6)))) | v25 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v27 = 0;
      v28 = (unint64_t)(63 - v24) >> 6;
      do
      {
        if (++v26 == v28 && (v27 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }
        v29 = v26 == v28;
        if (v26 == v28)
          v26 = 0;
        v27 |= v29;
        v30 = *(_QWORD *)(v11 + 8 * v26);
      }
      while (v30 == -1);
      v14 = __clz(__rbit64(~v30)) + (v26 << 6);
    }
    *(_QWORD *)(v11 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
    v15 = (_QWORD *)(*(_QWORD *)(v6 + 48) + 16 * v14);
    *v15 = v22;
    v15[1] = v23;
    ++*(_QWORD *)(v6 + 16);
  }
  v20 = v18 + 3;
  if (v20 >= v32)
  {
LABEL_36:
    result = swift_release_n(v3, 2);
    v2 = v31;
    goto LABEL_38;
  }
  v19 = *(_QWORD *)(v8 + 8 * v20);
  if (v19)
  {
    v13 = v20;
    goto LABEL_26;
  }
  while (1)
  {
    v13 = v20 + 1;
    if (__OFADD__(v20, 1))
      break;
    if (v13 >= v32)
      goto LABEL_36;
    v19 = *(_QWORD *)(v8 + 8 * v13);
    ++v20;
    if (v19)
      goto LABEL_26;
  }
LABEL_40:
  __break(1u);
  return result;
}

uint64_t sub_10007A89C(unint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t i;
  void (*v13)(_QWORD *);
  id *v14;
  id v15;
  uint64_t v16;
  uint64_t result;
  uint64_t (*v18[4])();

  v6 = (unint64_t)a3 >> 62;
  if ((unint64_t)a3 >> 62)
  {
    if (a3 < 0)
      v16 = a3;
    else
      v16 = a3 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a3);
    v7 = _CocoaArrayWrapper.endIndex.getter(v16);
    swift_bridgeObjectRelease(a3);
    if (!v7)
      return a3;
  }
  else
  {
    v7 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (!v7)
      return a3;
  }
  if (!a1)
    goto LABEL_25;
  v8 = a3 & 0xFFFFFFFFFFFFFF8;
  if (v6)
  {
    if (a3 < 0)
      v10 = a3;
    else
      v10 = a3 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a3);
    v11 = _CocoaArrayWrapper.endIndex.getter(v10);
    swift_bridgeObjectRelease(a3);
    if (v11 <= a2)
    {
      if (v7 >= 1)
      {
        sub_100013C38(0, &qword_1000EF650, &qword_1000EF648, HKQuantityType_ptr);
        sub_10007C054(&qword_1000EF658, &qword_1000EF650, &qword_1000EF648, HKQuantityType_ptr);
        swift_bridgeObjectRetain(a3);
        for (i = 0; i != v7; ++i)
        {
          v13 = sub_1000808B0(v18, i, a3);
          v15 = *v14;
          ((void (*)(uint64_t (**)(), _QWORD))v13)(v18, 0);
          *(_QWORD *)(a1 + 8 * i) = v15;
        }
        swift_bridgeObjectRelease(a3);
        return a3;
      }
      goto LABEL_24;
    }
LABEL_23:
    __break(1u);
LABEL_24:
    __break(1u);
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  v9 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (v9 > a2)
  {
    __break(1u);
    goto LABEL_23;
  }
  if (v8 + 32 >= a1 + 8 * v9 || v8 + 32 + 8 * v9 <= a1)
  {
    sub_100006D10(0, &qword_1000EF648, HKQuantityType_ptr);
    swift_arrayInitWithCopy(a1);
    return a3;
  }
LABEL_26:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_10007AAD8(unint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t i;
  void (*v13)(_QWORD *);
  id *v14;
  id v15;
  uint64_t v16;
  uint64_t result;
  uint64_t (*v18[4])();

  v6 = (unint64_t)a3 >> 62;
  if ((unint64_t)a3 >> 62)
  {
    if (a3 < 0)
      v16 = a3;
    else
      v16 = a3 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a3);
    v7 = _CocoaArrayWrapper.endIndex.getter(v16);
    swift_bridgeObjectRelease(a3);
    if (!v7)
      return a3;
  }
  else
  {
    v7 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (!v7)
      return a3;
  }
  if (!a1)
    goto LABEL_25;
  v8 = a3 & 0xFFFFFFFFFFFFFF8;
  if (v6)
  {
    if (a3 < 0)
      v10 = a3;
    else
      v10 = a3 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a3);
    v11 = _CocoaArrayWrapper.endIndex.getter(v10);
    swift_bridgeObjectRelease(a3);
    if (v11 <= a2)
    {
      if (v7 >= 1)
      {
        sub_100013C38(0, &qword_1000EF638, &qword_1000EF630, HKCategoryType_ptr);
        sub_10007C054(&qword_1000EF640, &qword_1000EF638, &qword_1000EF630, HKCategoryType_ptr);
        swift_bridgeObjectRetain(a3);
        for (i = 0; i != v7; ++i)
        {
          v13 = sub_1000808B0(v18, i, a3);
          v15 = *v14;
          ((void (*)(uint64_t (**)(), _QWORD))v13)(v18, 0);
          *(_QWORD *)(a1 + 8 * i) = v15;
        }
        swift_bridgeObjectRelease(a3);
        return a3;
      }
      goto LABEL_24;
    }
LABEL_23:
    __break(1u);
LABEL_24:
    __break(1u);
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  v9 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (v9 > a2)
  {
    __break(1u);
    goto LABEL_23;
  }
  if (v8 + 32 >= a1 + 8 * v9 || v8 + 32 + 8 * v9 <= a1)
  {
    sub_100006D10(0, &qword_1000EF630, HKCategoryType_ptr);
    swift_arrayInitWithCopy(a1);
    return a3;
  }
LABEL_26:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_10007AD14(unint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t i;
  void (*v13)(_QWORD *);
  id *v14;
  id v15;
  uint64_t v16;
  uint64_t result;
  uint64_t (*v18[4])();

  v6 = (unint64_t)a3 >> 62;
  if ((unint64_t)a3 >> 62)
  {
    if (a3 < 0)
      v16 = a3;
    else
      v16 = a3 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a3);
    v7 = _CocoaArrayWrapper.endIndex.getter(v16);
    swift_bridgeObjectRelease(a3);
    if (!v7)
      return a3;
  }
  else
  {
    v7 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (!v7)
      return a3;
  }
  if (!a1)
    goto LABEL_25;
  v8 = a3 & 0xFFFFFFFFFFFFFF8;
  if (v6)
  {
    if (a3 < 0)
      v10 = a3;
    else
      v10 = a3 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a3);
    v11 = _CocoaArrayWrapper.endIndex.getter(v10);
    swift_bridgeObjectRelease(a3);
    if (v11 <= a2)
    {
      if (v7 >= 1)
      {
        sub_100013C38(0, &qword_1000EC248, (unint64_t *)&qword_1000EC250, HKNotificationInstructionDiagnosticDescription_ptr);
        sub_10007C054(&qword_1000EF680, &qword_1000EC248, (unint64_t *)&qword_1000EC250, HKNotificationInstructionDiagnosticDescription_ptr);
        swift_bridgeObjectRetain(a3);
        for (i = 0; i != v7; ++i)
        {
          v13 = sub_1000808B0(v18, i, a3);
          v15 = *v14;
          ((void (*)(uint64_t (**)(), _QWORD))v13)(v18, 0);
          *(_QWORD *)(a1 + 8 * i) = v15;
        }
        swift_bridgeObjectRelease(a3);
        return a3;
      }
      goto LABEL_24;
    }
LABEL_23:
    __break(1u);
LABEL_24:
    __break(1u);
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  v9 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (v9 > a2)
  {
    __break(1u);
    goto LABEL_23;
  }
  if (v8 + 32 >= a1 + 8 * v9 || v8 + 32 + 8 * v9 <= a1)
  {
    sub_100006D10(0, (unint64_t *)&qword_1000EC250, HKNotificationInstructionDiagnosticDescription_ptr);
    swift_arrayInitWithCopy(a1);
    return a3;
  }
LABEL_26:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_10007AF50(unint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t i;
  void (*v13)(_QWORD *);
  id *v14;
  id v15;
  uint64_t v16;
  uint64_t result;
  void (*v18[4])(id *);

  v6 = (unint64_t)a3 >> 62;
  if ((unint64_t)a3 >> 62)
  {
    if (a3 < 0)
      v16 = a3;
    else
      v16 = a3 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a3);
    v7 = _CocoaArrayWrapper.endIndex.getter(v16);
    swift_bridgeObjectRelease(a3);
    if (!v7)
      return a3;
  }
  else
  {
    v7 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (!v7)
      return a3;
  }
  if (!a1)
    goto LABEL_25;
  v8 = a3 & 0xFFFFFFFFFFFFFF8;
  if (v6)
  {
    if (a3 < 0)
      v10 = a3;
    else
      v10 = a3 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a3);
    v11 = _CocoaArrayWrapper.endIndex.getter(v10);
    swift_bridgeObjectRelease(a3);
    if (v11 <= a2)
    {
      if (v7 >= 1)
      {
        sub_100013C38(0, &qword_1000EF610, &qword_1000EE500, HKDisplayType_ptr);
        sub_10007C054(&qword_1000EF618, &qword_1000EF610, &qword_1000EE500, HKDisplayType_ptr);
        swift_bridgeObjectRetain(a3);
        for (i = 0; i != v7; ++i)
        {
          v13 = sub_100080908(v18, i, a3);
          v15 = *v14;
          ((void (*)(void (**)(id *), _QWORD))v13)(v18, 0);
          *(_QWORD *)(a1 + 8 * i) = v15;
        }
        swift_bridgeObjectRelease(a3);
        return a3;
      }
      goto LABEL_24;
    }
LABEL_23:
    __break(1u);
LABEL_24:
    __break(1u);
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  v9 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (v9 > a2)
  {
    __break(1u);
    goto LABEL_23;
  }
  if (v8 + 32 >= a1 + 8 * v9 || v8 + 32 + 8 * v9 <= a1)
  {
    sub_100006D10(0, &qword_1000EE500, HKDisplayType_ptr);
    swift_arrayInitWithCopy(a1);
    return a3;
  }
LABEL_26:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_10007B18C(unint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t i;
  void (*v13)(_QWORD *);
  id *v14;
  id v15;
  uint64_t v16;
  uint64_t result;
  uint64_t (*v18[4])();

  v6 = (unint64_t)a3 >> 62;
  if ((unint64_t)a3 >> 62)
  {
    if (a3 < 0)
      v16 = a3;
    else
      v16 = a3 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a3);
    v7 = _CocoaArrayWrapper.endIndex.getter(v16);
    swift_bridgeObjectRelease(a3);
    if (!v7)
      return a3;
  }
  else
  {
    v7 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (!v7)
      return a3;
  }
  if (!a1)
    goto LABEL_25;
  v8 = a3 & 0xFFFFFFFFFFFFFF8;
  if (v6)
  {
    if (a3 < 0)
      v10 = a3;
    else
      v10 = a3 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a3);
    v11 = _CocoaArrayWrapper.endIndex.getter(v10);
    swift_bridgeObjectRelease(a3);
    if (v11 <= a2)
    {
      if (v7 >= 1)
      {
        sub_100013C38(0, &qword_1000EECF8, (unint64_t *)&unk_1000EED00, HKSample_ptr);
        sub_10007C054(&qword_1000EF668, &qword_1000EECF8, (unint64_t *)&unk_1000EED00, HKSample_ptr);
        swift_bridgeObjectRetain(a3);
        for (i = 0; i != v7; ++i)
        {
          v13 = sub_1000808B0(v18, i, a3);
          v15 = *v14;
          ((void (*)(uint64_t (**)(), _QWORD))v13)(v18, 0);
          *(_QWORD *)(a1 + 8 * i) = v15;
        }
        swift_bridgeObjectRelease(a3);
        return a3;
      }
      goto LABEL_24;
    }
LABEL_23:
    __break(1u);
LABEL_24:
    __break(1u);
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  v9 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (v9 > a2)
  {
    __break(1u);
    goto LABEL_23;
  }
  if (v8 + 32 >= a1 + 8 * v9 || v8 + 32 + 8 * v9 <= a1)
  {
    sub_100006D10(0, (unint64_t *)&unk_1000EED00, HKSample_ptr);
    swift_arrayInitWithCopy(a1);
    return a3;
  }
LABEL_26:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_10007B3C8(uint64_t result, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  int64_t v12;
  uint64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  _QWORD *v20;
  uint64_t v21;

  v5 = (_QWORD *)result;
  v6 = a4 + 64;
  v7 = -1 << *(_BYTE *)(a4 + 32);
  if (-v7 < 64)
    v8 = ~(-1 << -(char)v7);
  else
    v8 = -1;
  v9 = v8 & *(_QWORD *)(a4 + 64);
  if (!a2)
  {
    v12 = 0;
    v10 = 0;
LABEL_38:
    *v5 = a4;
    v5[1] = v6;
    v5[2] = ~v7;
    v5[3] = v12;
    v5[4] = v9;
    return v10;
  }
  v10 = a3;
  if (!a3)
  {
    v12 = 0;
    goto LABEL_38;
  }
  if (a3 < 0)
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  v11 = a2;
  v12 = 0;
  v13 = 0;
  v14 = (unint64_t)(63 - v7) >> 6;
  if (!v9)
    goto LABEL_9;
LABEL_8:
  v15 = __clz(__rbit64(v9));
  v9 &= v9 - 1;
  v16 = v15 | (v12 << 6);
  while (1)
  {
    ++v13;
    v20 = (_QWORD *)(*(_QWORD *)(a4 + 48) + 16 * v16);
    v21 = v20[1];
    *v11 = *v20;
    v11[1] = v21;
    if (v13 == v10)
    {
      swift_bridgeObjectRetain(v21);
      goto LABEL_38;
    }
    v11 += 2;
    result = swift_bridgeObjectRetain(v21);
    if (v9)
      goto LABEL_8;
LABEL_9:
    v17 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
      __break(1u);
      goto LABEL_40;
    }
    if (v17 >= v14)
      goto LABEL_33;
    v18 = *(_QWORD *)(v6 + 8 * v17);
    if (!v18)
      break;
LABEL_18:
    v9 = (v18 - 1) & v18;
    v16 = __clz(__rbit64(v18)) + (v17 << 6);
    v12 = v17;
  }
  v12 += 2;
  if (v17 + 1 >= v14)
  {
    v9 = 0;
    v12 = v17;
    goto LABEL_37;
  }
  v18 = *(_QWORD *)(v6 + 8 * v12);
  if (v18)
    goto LABEL_14;
  v19 = v17 + 2;
  if (v17 + 2 >= v14)
    goto LABEL_33;
  v18 = *(_QWORD *)(v6 + 8 * v19);
  if (v18)
    goto LABEL_17;
  v12 = v17 + 3;
  if (v17 + 3 >= v14)
  {
    v9 = 0;
    v12 = v17 + 2;
    goto LABEL_37;
  }
  v18 = *(_QWORD *)(v6 + 8 * v12);
  if (v18)
  {
LABEL_14:
    v17 = v12;
    goto LABEL_18;
  }
  v19 = v17 + 4;
  if (v17 + 4 >= v14)
  {
LABEL_33:
    v9 = 0;
LABEL_37:
    v10 = v13;
    goto LABEL_38;
  }
  v18 = *(_QWORD *)(v6 + 8 * v19);
  if (v18)
  {
LABEL_17:
    v17 = v19;
    goto LABEL_18;
  }
  while (1)
  {
    v17 = v19 + 1;
    if (__OFADD__(v19, 1))
      break;
    if (v17 >= v14)
    {
      v9 = 0;
      v12 = v14 - 1;
      goto LABEL_37;
    }
    v18 = *(_QWORD *)(v6 + 8 * v17);
    ++v19;
    if (v18)
      goto LABEL_18;
  }
LABEL_41:
  __break(1u);
  return result;
}

_QWORD *sub_10007B5C4(_QWORD *result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int64_t v12;
  uint64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  uint64_t v20;
  void *v21;
  id v22;

  v5 = result;
  v6 = a4 + 56;
  v7 = -1 << *(_BYTE *)(a4 + 32);
  if (-v7 < 64)
    v8 = ~(-1 << -(char)v7);
  else
    v8 = -1;
  v9 = v8 & *(_QWORD *)(a4 + 56);
  if (!a2)
  {
    v12 = 0;
    v10 = 0;
LABEL_38:
    *v5 = a4;
    v5[1] = v6;
    v5[2] = ~v7;
    v5[3] = v12;
    v5[4] = v9;
    return (_QWORD *)v10;
  }
  v10 = a3;
  if (!a3)
  {
    v12 = 0;
    goto LABEL_38;
  }
  if (a3 < 0)
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  v11 = a2;
  v12 = 0;
  v13 = 0;
  v14 = (unint64_t)(63 - v7) >> 6;
  if (!v9)
    goto LABEL_9;
LABEL_8:
  v15 = __clz(__rbit64(v9));
  v9 &= v9 - 1;
  v16 = v15 | (v12 << 6);
  while (1)
  {
    ++v13;
    v20 = *(_QWORD *)(a4 + 48) + 16 * v16;
    v21 = *(void **)v20;
    LOBYTE(v20) = *(_BYTE *)(v20 + 8);
    *(_QWORD *)v11 = v21;
    *(_BYTE *)(v11 + 8) = v20;
    if (v13 == v10)
    {
      v22 = v21;
      goto LABEL_38;
    }
    v11 += 16;
    result = v21;
    if (v9)
      goto LABEL_8;
LABEL_9:
    v17 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
      __break(1u);
      goto LABEL_40;
    }
    if (v17 >= v14)
      goto LABEL_33;
    v18 = *(_QWORD *)(v6 + 8 * v17);
    if (!v18)
      break;
LABEL_18:
    v9 = (v18 - 1) & v18;
    v16 = __clz(__rbit64(v18)) + (v17 << 6);
    v12 = v17;
  }
  v12 += 2;
  if (v17 + 1 >= v14)
  {
    v9 = 0;
    v12 = v17;
    goto LABEL_37;
  }
  v18 = *(_QWORD *)(v6 + 8 * v12);
  if (v18)
    goto LABEL_14;
  v19 = v17 + 2;
  if (v17 + 2 >= v14)
    goto LABEL_33;
  v18 = *(_QWORD *)(v6 + 8 * v19);
  if (v18)
    goto LABEL_17;
  v12 = v17 + 3;
  if (v17 + 3 >= v14)
  {
    v9 = 0;
    v12 = v17 + 2;
    goto LABEL_37;
  }
  v18 = *(_QWORD *)(v6 + 8 * v12);
  if (v18)
  {
LABEL_14:
    v17 = v12;
    goto LABEL_18;
  }
  v19 = v17 + 4;
  if (v17 + 4 >= v14)
  {
LABEL_33:
    v9 = 0;
LABEL_37:
    v10 = v13;
    goto LABEL_38;
  }
  v18 = *(_QWORD *)(v6 + 8 * v19);
  if (v18)
  {
LABEL_17:
    v17 = v19;
    goto LABEL_18;
  }
  while (1)
  {
    v17 = v19 + 1;
    if (__OFADD__(v19, 1))
      break;
    if (v17 >= v14)
    {
      v9 = 0;
      v12 = v14 - 1;
      goto LABEL_37;
    }
    v18 = *(_QWORD *)(v6 + 8 * v17);
    ++v19;
    if (v18)
      goto LABEL_18;
  }
LABEL_41:
  __break(1u);
  return result;
}

_QWORD *sub_10007B7C8()
{
  id v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t i;
  uint64_t v5;
  uint64_t v6;
  id v7;
  void *v8;
  id v9;
  unsigned int v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t j;
  uint64_t v16;
  uint64_t v17;
  id v18;
  void *v19;
  id v20;
  unsigned __int8 v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  _QWORD *result;
  _QWORD *v27;

  v0 = objc_msgSend((id)objc_opt_self(HKDisplayType), "builtinDisplayTypes");
  v1 = sub_100006D10(0, &qword_1000EE500, HKDisplayType_ptr);
  v2 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v0, v1);

  v27 = _swiftEmptyArrayStorage;
  if ((unint64_t)v2 >> 62)
  {
    if (v2 < 0)
      v13 = v2;
    else
      v13 = v2 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v2);
    v3 = _CocoaArrayWrapper.endIndex.getter(v13);
    swift_bridgeObjectRelease(v2);
    if (v3)
    {
LABEL_3:
      if (v3 < 1)
      {
        __break(1u);
        goto LABEL_38;
      }
      for (i = 0; i != v3; ++i)
      {
        if ((v2 & 0xC000000000000001) != 0)
          v7 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(i, v2);
        else
          v7 = *(id *)(v2 + 8 * i + 32);
        v8 = v7;
        v9 = objc_msgSend(v7, "objectType");
        v10 = objc_msgSend(v9, "enabled");

        if (v10)
        {
          specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v11);
          v5 = v27[2];
          specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v5);
          v6 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v5, v8);
          specialized ContiguousArray._endMutation()(v6);
        }
        else
        {

        }
      }
      swift_bridgeObjectRelease(v2);
      v12 = (unint64_t)v27;
      v27 = _swiftEmptyArrayStorage;
      if ((v12 & 0x8000000000000000) != 0)
        goto LABEL_31;
      goto LABEL_19;
    }
  }
  else
  {
    v3 = *(_QWORD *)((v2 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v3)
      goto LABEL_3;
  }
  swift_bridgeObjectRelease(v2);
  v12 = (unint64_t)_swiftEmptyArrayStorage;
  v27 = _swiftEmptyArrayStorage;
  if (((unint64_t)_swiftEmptyArrayStorage & 0x8000000000000000) != 0)
    goto LABEL_31;
LABEL_19:
  if ((v12 & 0x4000000000000000) != 0)
  {
LABEL_31:
    v24 = swift_bridgeObjectRetain(v12);
    v14 = _CocoaArrayWrapper.endIndex.getter(v24);
    swift_release(v12);
    if (!v14)
      goto LABEL_32;
    goto LABEL_21;
  }
  v14 = *(_QWORD *)(v12 + 16);
  if (v14)
  {
LABEL_21:
    if (v14 >= 1)
    {
      for (j = 0; j != v14; ++j)
      {
        if ((v12 & 0xC000000000000001) != 0)
          v18 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(j, v12);
        else
          v18 = *(id *)(v12 + 8 * j + 32);
        v19 = v18;
        v20 = objc_msgSend(v18, "displayCategory");
        v21 = objc_msgSend(v20, "isMeCategory");

        if ((v21 & 1) != 0)
        {

        }
        else
        {
          specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v22);
          v16 = v27[2];
          specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v16);
          v17 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v16, v19);
          specialized ContiguousArray._endMutation()(v17);
        }
      }
      swift_release(v12);
      v23 = (uint64_t)v27;
      goto LABEL_33;
    }
LABEL_38:
    __break(1u);
    result = (_QWORD *)swift_release(v27);
    __break(1u);
    return result;
  }
LABEL_32:
  swift_release(v12);
  v23 = (uint64_t)_swiftEmptyArrayStorage;
LABEL_33:
  swift_bridgeObjectRetain(v23);
  if (v23 < 0 || (v25 = (_QWORD *)v23, (v23 & 0x4000000000000000) != 0))
  {
    v25 = sub_1000789FC(v23, (uint64_t (*)(_QWORD *, uint64_t, uint64_t))sub_10007AF50);
    swift_release(v23);
  }
  v27 = v25;
  sub_100078BFC((uint64_t *)&v27);
  swift_release(v23);
  return v27;
}

void sub_10007BAE4(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_1000EF608)
  {
    v2 = type metadata accessor for ArrayDataSource(255);
    v3 = type metadata accessor for DataSourceWithLayout(a1, v2, &protocol witness table for ArrayDataSource);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_1000EF608);
  }
}

uint64_t sub_10007BB40()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10007BB64(void *a1)
{
  uint64_t v1;

  return sub_100077ED4(*(void **)(v1 + 24), a1);
}

void sub_10007BB8C(void *a1, void *a2)
{
  id v2;
  uint64_t v3;
  void *v4;
  void *v5;
  Swift::String v6;
  Swift::String v7;
  Swift::String v8;
  Swift::String v9;
  NSString v10;
  NSString v11;
  id v12;
  NSString v13;
  void *v14;
  id v15;
  _QWORD *v16;
  NSString v17;
  void *v18;
  id v19;
  _QWORD aBlock[5];
  _QWORD *v22;

  v2 = objc_msgSend(a1, "displayTypeIdentifierString");
  v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(v2);
  v5 = v4;

  _StringGuts.grow(_:)(68);
  v6._countAndFlagsBits = 0xD000000000000011;
  v6._object = (void *)0x80000001000BCEB0;
  String.append(_:)(v6);
  v7._countAndFlagsBits = v3;
  v7._object = v5;
  String.append(_:)(v7);
  v8._countAndFlagsBits = 0xD000000000000031;
  v8._object = (void *)0x80000001000BCED0;
  String.append(_:)(v8);
  _StringGuts.grow(_:)(46);
  swift_bridgeObjectRetain(0xE000000000000000);
  swift_bridgeObjectRelease(0xE000000000000000);
  v9._countAndFlagsBits = 0xD00000000000002CLL;
  v9._object = (void *)0x80000001000BCF10;
  String.append(_:)(v9);
  v10 = String._bridgeToObjectiveC()();
  v11 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(0xE000000000000000);
  v12 = objc_msgSend((id)objc_opt_self(UIAlertController), "alertControllerWithTitle:message:preferredStyle:", v10, v11, 1);

  v13 = String._bridgeToObjectiveC()();
  v14 = (void *)objc_opt_self(UIAlertAction);
  v15 = objc_msgSend(v14, "actionWithTitle:style:handler:", v13, 1, 0);

  objc_msgSend(v12, "addAction:", v15);
  v16 = (_QWORD *)swift_allocObject(&unk_1000E1008, 64, 7);
  v16[2] = 0xD00000000000001ALL;
  v16[3] = 0x80000001000BCE90;
  v16[4] = v3;
  v16[5] = v5;
  v16[6] = 0;
  v16[7] = 0xE000000000000000;
  v17 = String._bridgeToObjectiveC()();
  aBlock[4] = sub_10007BEEC;
  v22 = v16;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10008E550;
  aBlock[3] = &unk_1000E1020;
  v18 = _Block_copy(aBlock);
  swift_release(v22);
  v19 = objc_msgSend(v14, "actionWithTitle:style:handler:", v17, 0, v18);
  _Block_release(v18);

  objc_msgSend(v12, "addAction:", v19);
  objc_msgSend(v12, "setPreferredAction:", v15);
  objc_msgSend(a2, "presentViewController:animated:completion:", v12, 1, 0);

}

uint64_t sub_10007BEB8()
{
  _QWORD *v0;

  swift_bridgeObjectRelease(v0[3]);
  swift_bridgeObjectRelease(v0[5]);
  swift_bridgeObjectRelease(v0[7]);
  return swift_deallocObject(v0, 64, 7);
}

uint64_t sub_10007BEEC(uint64_t a1)
{
  uint64_t v1;

  return sub_100078328(a1, *(_QWORD *)(v1 + 16), *(void **)(v1 + 24), *(_QWORD *)(v1 + 32), *(void **)(v1 + 40));
}

void sub_10007BEFC(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_1000EF620)
  {
    sub_10007BF70(255, &qword_1000EF628, (uint64_t)&type metadata for Int, (uint64_t)&protocol witness table for Int, (uint64_t (*)(_QWORD, uint64_t, uint64_t))&type metadata accessor for Range);
    v3 = type metadata accessor for _ContiguousArrayStorage(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_1000EF620);
  }
}

void sub_10007BF70(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(_QWORD, uint64_t, uint64_t))
{
  unint64_t v6;
  uint64_t v7;

  if (!*a2)
  {
    v6 = a5(0, a3, a4);
    if (!v7)
      atomic_store(v6, a2);
  }
}

void sub_10007BFB8(uint64_t a1)
{
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_1000EF670)
  {
    v2 = sub_10007C010();
    v3 = type metadata accessor for _SetStorage(a1, &type metadata for HKDataType, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_1000EF670);
  }
}

unint64_t sub_10007C010()
{
  unint64_t result;

  result = qword_1000EF678;
  if (!qword_1000EF678)
  {
    result = swift_getWitnessTable(&unk_1000B6480, &type metadata for HKDataType);
    atomic_store(result, (unint64_t *)&qword_1000EF678);
  }
  return result;
}

uint64_t sub_10007C054(unint64_t *a1, unint64_t *a2, unint64_t *a3, _QWORD *a4)
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    sub_100013C38(255, a2, a3, a4);
    result = swift_getWitnessTable(&protocol conformance descriptor for [A], v6);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_10007C098(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t result;
  char v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  _OWORD v16[2];
  uint64_t v17;
  __int128 v18;

  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
  {
    v4 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_10007F3E8(0, &qword_1000EF6D8, (uint64_t)&type metadata for AnyHashable);
  v3 = static _DictionaryStorage.allocate(capacity:)(v2);
  v4 = (_QWORD *)v3;
  v5 = *(_QWORD *)(a1 + 16);
  if (!v5)
  {
LABEL_9:
    swift_bridgeObjectRelease(a1);
    return (unint64_t)v4;
  }
  v6 = v3 + 64;
  v7 = a1 + 32;
  swift_retain(v3);
  while (1)
  {
    sub_10007F43C(v7, (uint64_t)v16, (unint64_t *)&qword_1000EDC10, (uint64_t)&type metadata for AnyHashable);
    result = sub_10007DF14((uint64_t)v16);
    if ((v9 & 1) != 0)
      break;
    *(_QWORD *)(v6 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    v10 = v4[6] + 40 * result;
    v11 = v16[0];
    v12 = v16[1];
    *(_QWORD *)(v10 + 32) = v17;
    *(_OWORD *)v10 = v11;
    *(_OWORD *)(v10 + 16) = v12;
    result = (unint64_t)sub_10007F39C(&v18, (_OWORD *)(v4[7] + 32 * result));
    v13 = v4[2];
    v14 = __OFADD__(v13, 1);
    v15 = v13 + 1;
    if (v14)
      goto LABEL_11;
    v4[2] = v15;
    v7 += 72;
    if (!--v5)
    {
      swift_release(v4);
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_10007C1F8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t result;
  char v11;
  uint64_t *v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;

  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
  {
    v4 = &_swiftEmptyDictionarySingleton;
LABEL_9:
    v16 = a1;
LABEL_10:
    swift_bridgeObjectRelease(v16);
    return (unint64_t)v4;
  }
  sub_10007F3E8(0, &qword_1000EF6E0, (uint64_t)&type metadata for String);
  v3 = static _DictionaryStorage.allocate(capacity:)(v2);
  v4 = (_QWORD *)v3;
  v5 = *(_QWORD *)(a1 + 16);
  if (!v5)
    goto LABEL_9;
  v6 = v3 + 64;
  v7 = a1 + 32;
  swift_retain(v3);
  while (1)
  {
    sub_10007F43C(v7, (uint64_t)&v17, &qword_1000EF6E8, (uint64_t)&type metadata for String);
    v8 = v17;
    v9 = v18;
    result = sub_10007DF44(v17, v18);
    if ((v11 & 1) != 0)
      break;
    *(_QWORD *)(v6 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    v12 = (uint64_t *)(v4[6] + 16 * result);
    *v12 = v8;
    v12[1] = v9;
    result = (unint64_t)sub_10007F39C(&v19, (_OWORD *)(v4[7] + 32 * result));
    v13 = v4[2];
    v14 = __OFADD__(v13, 1);
    v15 = v13 + 1;
    if (v14)
      goto LABEL_12;
    v4[2] = v15;
    v7 += 48;
    if (!--v5)
    {
      swift_release(v4);
      v16 = a1;
      goto LABEL_10;
    }
  }
  __break(1u);
LABEL_12:
  __break(1u);
  return result;
}

unint64_t sub_10007C354(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  unint64_t result;
  char v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  sub_10007F5D0(0, (unint64_t *)&qword_1000EE708, (uint64_t)&type metadata for CategoryIntent.Category);
  v3 = v2;
  v4 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v6 = (char *)&v26 - v5;
  v7 = *(_QWORD *)(a1 + 16);
  if (!v7)
  {
    v9 = &_swiftEmptyDictionarySingleton;
LABEL_9:
    v25 = a1;
LABEL_10:
    swift_bridgeObjectRelease(v25);
    return (unint64_t)v9;
  }
  sub_10007F74C(0, &qword_1000EF788, (void (*)(void))sub_10005A818, (uint64_t)&type metadata for CategoryIntent.Category);
  v8 = static _DictionaryStorage.allocate(capacity:)(v7);
  v9 = (_QWORD *)v8;
  v10 = *(_QWORD *)(a1 + 16);
  if (!v10)
    goto LABEL_9;
  v11 = &v6[*(int *)(v3 + 48)];
  v12 = v8 + 64;
  v13 = (*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v27 = a1;
  v14 = a1 + v13;
  v15 = *(_QWORD *)(v4 + 72);
  swift_retain(v8);
  while (1)
  {
    sub_10007F9A4(v14, (uint64_t)v6, (unint64_t *)&qword_1000EE708, (uint64_t)&type metadata for CategoryIntent.Category);
    v16 = *v6;
    result = sub_10007DFA8(*v6);
    if ((v18 & 1) != 0)
      break;
    v19 = result;
    *(_QWORD *)(v12 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    *(_BYTE *)(v9[6] + result) = v16;
    v20 = v9[7];
    v21 = type metadata accessor for DisplayRepresentation(0);
    result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(*(_QWORD *)(v21 - 8) + 32))(v20 + *(_QWORD *)(*(_QWORD *)(v21 - 8) + 72) * v19, v11, v21);
    v22 = v9[2];
    v23 = __OFADD__(v22, 1);
    v24 = v22 + 1;
    if (v23)
      goto LABEL_12;
    v9[2] = v24;
    v14 += v15;
    if (!--v10)
    {
      swift_release(v9);
      v25 = v27;
      goto LABEL_10;
    }
  }
  __break(1u);
LABEL_12:
  __break(1u);
  return result;
}

unint64_t sub_10007C510(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  unint64_t result;
  char v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  sub_10005B48C(0);
  v3 = v2;
  v4 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v6 = (char *)&v26 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *(_QWORD *)(a1 + 16);
  if (!v7)
  {
    v9 = &_swiftEmptyDictionarySingleton;
LABEL_9:
    v25 = a1;
LABEL_10:
    swift_bridgeObjectRelease(v25);
    return (unint64_t)v9;
  }
  sub_10007F9F0(0);
  v8 = static _DictionaryStorage.allocate(capacity:)(v7);
  v9 = (_QWORD *)v8;
  v10 = *(_QWORD *)(a1 + 16);
  if (!v10)
    goto LABEL_9;
  v11 = &v6[*(int *)(v3 + 48)];
  v12 = v8 + 64;
  v13 = (*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v27 = a1;
  v14 = a1 + v13;
  v15 = *(_QWORD *)(v4 + 72);
  swift_retain(v8);
  while (1)
  {
    sub_10007FA80(v14, (uint64_t)v6);
    v16 = *v6;
    result = sub_10007DFA8(*v6);
    if ((v18 & 1) != 0)
      break;
    v19 = result;
    *(_QWORD *)(v12 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    *(_BYTE *)(v9[6] + result) = v16;
    v20 = v9[7];
    sub_10001B790(0, &qword_1000EE730, (uint64_t (*)(void))sub_10005A4DC, (uint64_t)&type metadata for CategoryIntent.Category, (uint64_t (*)(uint64_t, uint64_t, uint64_t))&type metadata accessor for _EnumURLRepresentation.EnumSingleURLRepresentation);
    result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(*(_QWORD *)(v21 - 8) + 32))(v20 + *(_QWORD *)(*(_QWORD *)(v21 - 8) + 72) * v19, v11, v21);
    v22 = v9[2];
    v23 = __OFADD__(v22, 1);
    v24 = v22 + 1;
    if (v23)
      goto LABEL_12;
    v9[2] = v24;
    v14 += v15;
    if (!--v10)
    {
      swift_release(v9);
      v25 = v27;
      goto LABEL_10;
    }
  }
  __break(1u);
LABEL_12:
  __break(1u);
  return result;
}

unint64_t sub_10007C6B8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  void **v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  id v10;
  unint64_t result;
  char v12;
  uint64_t *v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;

  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
  {
    v4 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_10007FAC4(0);
  v3 = static _DictionaryStorage.allocate(capacity:)(v2);
  v4 = (_QWORD *)v3;
  v5 = *(_QWORD *)(a1 + 16);
  if (!v5)
  {
LABEL_9:
    swift_bridgeObjectRelease(a1);
    return (unint64_t)v4;
  }
  swift_retain(v3);
  v6 = (void **)(a1 + 48);
  while (1)
  {
    v7 = (uint64_t)*(v6 - 2);
    v8 = (uint64_t)*(v6 - 1);
    v9 = *v6;
    swift_bridgeObjectRetain(v8);
    v10 = v9;
    result = sub_10007DF44(v7, v8);
    if ((v12 & 1) != 0)
      break;
    *(_QWORD *)((char *)v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v13 = (uint64_t *)(v4[6] + 16 * result);
    *v13 = v7;
    v13[1] = v8;
    *(_QWORD *)(v4[7] + 8 * result) = v10;
    v14 = v4[2];
    v15 = __OFADD__(v14, 1);
    v16 = v14 + 1;
    if (v15)
      goto LABEL_11;
    v4[2] = v16;
    v6 += 3;
    if (!--v5)
    {
      swift_release(v4);
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_10007C7CC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  unint64_t result;
  char v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  sub_10007F5D0(0, (unint64_t *)&qword_1000EF750, (uint64_t)&type metadata for OpenTabIntent.Tab);
  v3 = v2;
  v4 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v6 = (char *)&v26 - v5;
  v7 = *(_QWORD *)(a1 + 16);
  if (!v7)
  {
    v9 = &_swiftEmptyDictionarySingleton;
LABEL_9:
    v25 = a1;
LABEL_10:
    swift_bridgeObjectRelease(v25);
    return (unint64_t)v9;
  }
  sub_10007F74C(0, &qword_1000EF758, (void (*)(void))sub_10007F7C0, (uint64_t)&type metadata for OpenTabIntent.Tab);
  v8 = static _DictionaryStorage.allocate(capacity:)(v7);
  v9 = (_QWORD *)v8;
  v10 = *(_QWORD *)(a1 + 16);
  if (!v10)
    goto LABEL_9;
  v11 = &v6[*(int *)(v3 + 48)];
  v12 = v8 + 64;
  v13 = (*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v27 = a1;
  v14 = a1 + v13;
  v15 = *(_QWORD *)(v4 + 72);
  swift_retain(v8);
  while (1)
  {
    sub_10007F9A4(v14, (uint64_t)v6, (unint64_t *)&qword_1000EF750, (uint64_t)&type metadata for OpenTabIntent.Tab);
    v16 = *v6;
    result = sub_10007E074(*v6);
    if ((v18 & 1) != 0)
      break;
    v19 = result;
    *(_QWORD *)(v12 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    *(_BYTE *)(v9[6] + result) = v16;
    v20 = v9[7];
    v21 = type metadata accessor for DisplayRepresentation(0);
    result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(*(_QWORD *)(v21 - 8) + 32))(v20 + *(_QWORD *)(*(_QWORD *)(v21 - 8) + 72) * v19, v11, v21);
    v22 = v9[2];
    v23 = __OFADD__(v22, 1);
    v24 = v22 + 1;
    if (v23)
      goto LABEL_12;
    v9[2] = v24;
    v14 += v15;
    if (!--v10)
    {
      swift_release(v9);
      v25 = v27;
      goto LABEL_10;
    }
  }
  __break(1u);
LABEL_12:
  __break(1u);
  return result;
}

unint64_t sub_10007C988(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  unint64_t result;
  char v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;

  sub_10007F804(0, (unint64_t *)&qword_1000EF768, &qword_1000EF770, (uint64_t (*)(void))sub_10007F87C, (uint64_t)&type metadata for OpenTabIntent.Tab);
  v3 = v2;
  v4 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v6 = (char *)&v24 - v5;
  v7 = *(_QWORD *)(a1 + 16);
  if (!v7)
  {
    v9 = &_swiftEmptyDictionarySingleton;
LABEL_9:
    v23 = a1;
LABEL_10:
    swift_bridgeObjectRelease(v23);
    return (unint64_t)v9;
  }
  sub_10007F8C0(0);
  v8 = static _DictionaryStorage.allocate(capacity:)(v7);
  v9 = (_QWORD *)v8;
  v10 = *(_QWORD *)(a1 + 16);
  if (!v10)
    goto LABEL_9;
  v27 = &v6[*(int *)(v3 + 48)];
  v11 = v8 + 64;
  v12 = *(unsigned __int8 *)(v4 + 80);
  v25 = a1;
  v13 = a1 + ((v12 + 32) & ~v12);
  v26 = *(_QWORD *)(v4 + 72);
  swift_retain(v8);
  while (1)
  {
    sub_10007F950(v13, (uint64_t)v6, (unint64_t *)&qword_1000EF768, &qword_1000EF770, (uint64_t (*)(void))sub_10007F87C, (uint64_t)&type metadata for OpenTabIntent.Tab);
    v14 = *v6;
    result = sub_10007E074(*v6);
    if ((v16 & 1) != 0)
      break;
    v17 = result;
    *(_QWORD *)(v11 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    *(_BYTE *)(v9[6] + result) = v14;
    v18 = v9[7];
    sub_10001B790(0, &qword_1000EF770, (uint64_t (*)(void))sub_10007F87C, (uint64_t)&type metadata for OpenTabIntent.Tab, (uint64_t (*)(uint64_t, uint64_t, uint64_t))&type metadata accessor for EnumURLRepresentation.EnumSingleURLRepresentation);
    result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(*(_QWORD *)(v19 - 8) + 32))(v18 + *(_QWORD *)(*(_QWORD *)(v19 - 8) + 72) * v17, v27, v19);
    v20 = v9[2];
    v21 = __OFADD__(v20, 1);
    v22 = v20 + 1;
    if (v21)
      goto LABEL_12;
    v9[2] = v22;
    v13 += v26;
    if (!--v10)
    {
      swift_release(v9);
      v23 = v25;
      goto LABEL_10;
    }
  }
  __break(1u);
LABEL_12:
  __break(1u);
  return result;
}

unint64_t sub_10007CB74(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  unint64_t result;
  char v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  sub_10007F5D0(0, (unint64_t *)&qword_1000EF718, (uint64_t)&type metadata for OpenViewIntent.Screen);
  v3 = v2;
  v4 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v6 = (char *)&v26 - v5;
  v7 = *(_QWORD *)(a1 + 16);
  if (!v7)
  {
    v9 = &_swiftEmptyDictionarySingleton;
LABEL_9:
    v25 = a1;
LABEL_10:
    swift_bridgeObjectRelease(v25);
    return (unint64_t)v9;
  }
  sub_10007F74C(0, &qword_1000EF720, (void (*)(void))sub_10007F634, (uint64_t)&type metadata for OpenViewIntent.Screen);
  v8 = static _DictionaryStorage.allocate(capacity:)(v7);
  v9 = (_QWORD *)v8;
  v10 = *(_QWORD *)(a1 + 16);
  if (!v10)
    goto LABEL_9;
  v11 = &v6[*(int *)(v3 + 48)];
  v12 = v8 + 64;
  v13 = (*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v27 = a1;
  v14 = a1 + v13;
  v15 = *(_QWORD *)(v4 + 72);
  swift_retain(v8);
  while (1)
  {
    sub_10007F9A4(v14, (uint64_t)v6, (unint64_t *)&qword_1000EF718, (uint64_t)&type metadata for OpenViewIntent.Screen);
    v16 = *v6;
    result = sub_10007E0F0(*v6);
    if ((v18 & 1) != 0)
      break;
    v19 = result;
    *(_QWORD *)(v12 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    *(_BYTE *)(v9[6] + result) = v16;
    v20 = v9[7];
    v21 = type metadata accessor for DisplayRepresentation(0);
    result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(*(_QWORD *)(v21 - 8) + 32))(v20 + *(_QWORD *)(*(_QWORD *)(v21 - 8) + 72) * v19, v11, v21);
    v22 = v9[2];
    v23 = __OFADD__(v22, 1);
    v24 = v22 + 1;
    if (v23)
      goto LABEL_12;
    v9[2] = v24;
    v14 += v15;
    if (!--v10)
    {
      swift_release(v9);
      v25 = v27;
      goto LABEL_10;
    }
  }
  __break(1u);
LABEL_12:
  __break(1u);
  return result;
}

unint64_t sub_10007CD30(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  unint64_t result;
  char v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;

  sub_10007F804(0, (unint64_t *)&qword_1000EF730, &qword_1000EF738, (uint64_t (*)(void))sub_10007F678, (uint64_t)&type metadata for OpenViewIntent.Screen);
  v3 = v2;
  v4 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v6 = (char *)&v24 - v5;
  v7 = *(_QWORD *)(a1 + 16);
  if (!v7)
  {
    v9 = &_swiftEmptyDictionarySingleton;
LABEL_9:
    v23 = a1;
LABEL_10:
    swift_bridgeObjectRelease(v23);
    return (unint64_t)v9;
  }
  sub_10007F6BC(0);
  v8 = static _DictionaryStorage.allocate(capacity:)(v7);
  v9 = (_QWORD *)v8;
  v10 = *(_QWORD *)(a1 + 16);
  if (!v10)
    goto LABEL_9;
  v27 = &v6[*(int *)(v3 + 48)];
  v11 = v8 + 64;
  v12 = *(unsigned __int8 *)(v4 + 80);
  v25 = a1;
  v13 = a1 + ((v12 + 32) & ~v12);
  v26 = *(_QWORD *)(v4 + 72);
  swift_retain(v8);
  while (1)
  {
    sub_10007F950(v13, (uint64_t)v6, (unint64_t *)&qword_1000EF730, &qword_1000EF738, (uint64_t (*)(void))sub_10007F678, (uint64_t)&type metadata for OpenViewIntent.Screen);
    v14 = *v6;
    result = sub_10007E0F0(*v6);
    if ((v16 & 1) != 0)
      break;
    v17 = result;
    *(_QWORD *)(v11 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    *(_BYTE *)(v9[6] + result) = v14;
    v18 = v9[7];
    sub_10001B790(0, &qword_1000EF738, (uint64_t (*)(void))sub_10007F678, (uint64_t)&type metadata for OpenViewIntent.Screen, (uint64_t (*)(uint64_t, uint64_t, uint64_t))&type metadata accessor for EnumURLRepresentation.EnumSingleURLRepresentation);
    result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(*(_QWORD *)(v19 - 8) + 32))(v18 + *(_QWORD *)(*(_QWORD *)(v19 - 8) + 72) * v17, v27, v19);
    v20 = v9[2];
    v21 = __OFADD__(v20, 1);
    v22 = v20 + 1;
    if (v21)
      goto LABEL_12;
    v9[2] = v22;
    v13 += v26;
    if (!--v10)
    {
      swift_release(v9);
      v23 = v25;
      goto LABEL_10;
    }
  }
  __break(1u);
LABEL_12:
  __break(1u);
  return result;
}

void sub_10007CF1C(uint64_t a1, char a2)
{
  __asm { BR              X10 }
}

uint64_t sub_10007CF60(uint64_t a1)
{
  String.hash(into:)(a1, 0x65756E69746E6F43, 0xE800000000000000);
  return swift_bridgeObjectRelease(0xE800000000000000);
}

void sub_10007D034(uint64_t a1, char a2)
{
  __asm { BR              X10 }
}

uint64_t sub_10007D078(uint64_t a1)
{
  String.hash(into:)(a1, 0x656D6F636C6557, 0xE700000000000000);
  return swift_bridgeObjectRelease(0xE700000000000000);
}

void sub_10007D140(uint64_t a1, char a2)
{
  __asm { BR              X11 }
}

uint64_t sub_10007D188(uint64_t a1)
{
  String.hash(into:)(a1, 0xD000000000000023, 0x80000001000B7930);
  return swift_bridgeObjectRelease(0x80000001000B7930);
}

uint64_t sub_10007D220(uint64_t a1, char a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = 8 * a2;
  v3 = *(_QWORD *)&aAlltrendsharin[v2 + 24];
  String.hash(into:)(a1, *(_QWORD *)&aAlltrendsharin[v2], v3);
  return swift_bridgeObjectRelease(v3);
}

uint64_t sub_10007D260(uint64_t a1, char a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = 8 * a2;
  v3 = *(_QWORD *)((char *)&unk_1000B51A8 + v2);
  String.hash(into:)(a1, *(_QWORD *)&aSummary_1[v2], v3);
  return swift_bridgeObjectRelease(v3);
}

Swift::Int sub_10007D2A0(uint64_t a1, char a2)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD v6[9];

  Hasher.init(_seed:)(v6, a1);
  v3 = 8 * a2;
  v4 = *(_QWORD *)((char *)&unk_1000B51A8 + v3);
  String.hash(into:)(v6, *(_QWORD *)&aSummary_1[v3], v4);
  swift_bridgeObjectRelease(v4);
  return Hasher._finalize()();
}

Swift::Int sub_10007D304(uint64_t a1, char a2)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD v6[9];

  Hasher.init(_seed:)(v6, a1);
  v3 = 8 * a2;
  v4 = *(_QWORD *)&aAlltrendsharin[v3 + 24];
  String.hash(into:)(v6, *(_QWORD *)&aAlltrendsharin[v3], v4);
  swift_bridgeObjectRelease(v4);
  return Hasher._finalize()();
}

void sub_10007D368(uint64_t a1, char a2)
{
  _QWORD v3[9];

  Hasher.init(_seed:)(v3, a1);
  __asm { BR              X10 }
}

Swift::Int sub_10007D3C0()
{
  uint64_t v1;

  String.hash(into:)(&v1, 0xD000000000000023, 0x80000001000B7930);
  swift_bridgeObjectRelease(0x80000001000B7930);
  return Hasher._finalize()();
}

void sub_10007D470(uint64_t a1, char a2)
{
  _QWORD v3[9];

  Hasher.init(_seed:)(v3, a1);
  __asm { BR              X10 }
}

Swift::Int sub_10007D4C0()
{
  uint64_t v1;

  String.hash(into:)(&v1, 0x65756E69746E6F43, 0xE800000000000000);
  swift_bridgeObjectRelease(0xE800000000000000);
  return Hasher._finalize()();
}

Swift::Void __swiftcall HealthAppOnboardingAnalyticsEventSubmitting.submitAnalyticsEvent(action:)(Health::OnboardingAnalyticsEvent::Action action)
{
  uint64_t v1;

  (*(void (**)())(v1 + 8))();
  sub_100046898();
  AnalyticsSubmitting.submit()();
}

uint64_t *OnboardingAnalyticsEvent.eventName.unsafeMutableAddressor()
{
  return &static OnboardingAnalyticsEvent.eventName;
}

uint64_t static OnboardingAnalyticsEvent.eventName.getter()
{
  uint64_t v0;
  _BYTE v2[24];

  swift_beginAccess(&static OnboardingAnalyticsEvent.eventName, v2, 0, 0);
  v0 = static OnboardingAnalyticsEvent.eventName;
  swift_bridgeObjectRetain(off_1000EF690);
  return v0;
}

uint64_t static OnboardingAnalyticsEvent.eventName.setter(uint64_t a1, char *a2)
{
  char *v4;
  _BYTE v6[24];

  swift_beginAccess(&static OnboardingAnalyticsEvent.eventName, v6, 1, 0);
  v4 = off_1000EF690;
  static OnboardingAnalyticsEvent.eventName = a1;
  off_1000EF690 = a2;
  return swift_bridgeObjectRelease(v4);
}

void *static OnboardingAnalyticsEvent.eventName.modify(uint64_t a1)
{
  swift_beginAccess(&static OnboardingAnalyticsEvent.eventName, a1, 33, 0);
  return &j__swift_endAccess;
}

uint64_t OnboardingAnalyticsEvent.Step.rawValue.getter(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_10007D72C + 4 * byte_1000B4E47[a1]))(0xD000000000000012, 0x80000001000B7CD0);
}

uint64_t sub_10007D72C()
{
  return 0x656D6F636C6557;
}

uint64_t sub_10007D744()
{
  return 0x6C61654872756F59;
}

uint64_t sub_10007D768(uint64_t a1)
{
  return a1 + 1;
}

void sub_10007D7E0(char *a1)
{
  sub_100081C1C(*a1);
}

Swift::Int sub_10007D7EC()
{
  char *v0;
  char v1;
  _QWORD v3[9];

  v1 = *v0;
  Hasher.init(_seed:)(v3, 0);
  sub_10007D034((uint64_t)v3, v1);
  return Hasher._finalize()();
}

void sub_10007D830(uint64_t a1)
{
  char *v1;

  sub_10007D034(a1, *v1);
}

Swift::Int sub_10007D838(uint64_t a1)
{
  char *v1;
  char v2;
  _QWORD v4[9];

  v2 = *v1;
  Hasher.init(_seed:)(v4, a1);
  sub_10007D034((uint64_t)v4, v2);
  return Hasher._finalize()();
}

unint64_t sub_10007D878@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = _s6Health24OnboardingAnalyticsEventV4StepO8rawValueAESgSS_tcfC_0(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_10007D8A4@<X0>(uint64_t *a1@<X8>)
{
  unsigned __int8 *v1;
  uint64_t result;
  uint64_t v4;

  result = OnboardingAnalyticsEvent.Step.rawValue.getter(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

BOOL OnboardingAnalyticsEvent.Context.init(rawValue:)(Swift::String string)
{
  void *object;
  Swift::String v2;
  Swift::Int v3;

  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1000DC438, v2);
  swift_bridgeObjectRelease(object);
  return v3 != 0;
}

unint64_t OnboardingAnalyticsEvent.Context.rawValue.getter()
{
  return 0xD000000000000011;
}

Swift::Int sub_10007D92C()
{
  _QWORD v1[9];

  Hasher.init(_seed:)(v1, 0);
  String.hash(into:)(v1, 0xD000000000000011, 0x80000001000B7DA0);
  return Hasher._finalize()();
}

uint64_t sub_10007D980(uint64_t a1)
{
  return String.hash(into:)(a1, 0xD000000000000011, 0x80000001000B7DA0);
}

Swift::Int sub_10007D99C(uint64_t a1)
{
  _QWORD v2[9];

  Hasher.init(_seed:)(v2, a1);
  String.hash(into:)(v2, 0xD000000000000011, 0x80000001000B7DA0);
  return Hasher._finalize()();
}

uint64_t sub_10007D9EC@<X0>(uint64_t *a1@<X0>, BOOL *a2@<X8>)
{
  Swift::String v3;
  void *v4;
  Swift::Int v5;
  uint64_t result;

  v3._countAndFlagsBits = *a1;
  v4 = (void *)a1[1];
  v3._object = v4;
  v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1000DC470, v3);
  result = swift_bridgeObjectRelease(v4);
  *a2 = v5 != 0;
  return result;
}

void sub_10007DA3C(_QWORD *a1@<X8>)
{
  *a1 = 0xD000000000000011;
  a1[1] = 0x80000001000B7DA0;
}

uint64_t OnboardingAnalyticsEvent.Action.rawValue.getter(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_10007DA98 + 4 * byte_1000B4E50[a1]))(0xD000000000000013, 0x80000001000B7DE0);
}

uint64_t sub_10007DA98()
{
  return 0x65756E69746E6F43;
}

uint64_t sub_10007DAB0()
{
  return 0x776F6C6C41;
}

uint64_t sub_10007DAC4()
{
  return 0x6C412074276E6F44;
}

uint64_t sub_10007DAE4()
{
  return 0x794D206572616853;
}

uint64_t sub_10007DB08()
{
  return 0x6E4F206E727554;
}

uint64_t sub_10007DB20()
{
  return 0x75542074276E6F44;
}

uint64_t sub_10007DB44()
{
  return 0x7472617453;
}

void sub_10007DB58(char *a1)
{
  sub_1000819BC(*a1);
}

void sub_10007DB64()
{
  char *v0;

  sub_10007D470(0, *v0);
}

void sub_10007DB70(uint64_t a1)
{
  char *v1;

  sub_10007CF1C(a1, *v1);
}

void sub_10007DB78(uint64_t a1)
{
  char *v1;

  sub_10007D470(a1, *v1);
}

unint64_t sub_10007DB80@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = _s6Health24OnboardingAnalyticsEventV6ActionO8rawValueAESgSS_tcfC_0(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_10007DBAC@<X0>(uint64_t *a1@<X8>)
{
  unsigned __int8 *v1;
  uint64_t result;
  uint64_t v4;

  result = OnboardingAnalyticsEvent.Action.rawValue.getter(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t OnboardingAnalyticsEvent.step.setter(uint64_t result)
{
  _BYTE *v1;

  *v1 = result;
  return result;
}

uint64_t (*OnboardingAnalyticsEvent.step.modify())()
{
  return ConfigurationIntentResponseCode.rawValue.getter;
}

uint64_t OnboardingAnalyticsEvent.action.getter(__int16 a1)
{
  return HIBYTE(a1);
}

uint64_t OnboardingAnalyticsEvent.action.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 1) = result;
  return result;
}

uint64_t (*OnboardingAnalyticsEvent.action.modify())()
{
  return ConfigurationIntentResponseCode.rawValue.getter;
}

void OnboardingAnalyticsEvent.keyValuePairs.getter(__int16 a1)
{
  char v1;
  uint64_t inited;

  v1 = HIBYTE(a1);
  sub_10007EC68(0);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1000B1200;
  *(_QWORD *)(inited + 32) = 0x6E6F69746361;
  *(_QWORD *)(inited + 40) = 0xE600000000000000;
  __asm { BR              X10 }
}

uint64_t sub_10007DC94()
{
  _QWORD *v0;
  uint64_t v1;
  unsigned __int8 v2;
  NSString v3;
  uint64_t v4;
  uint64_t v5;
  NSString v6;
  __n128 v7;

  v3 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(0xE800000000000000);
  v0[6] = v3;
  v0[7] = 0x747865746E6F63;
  v0[8] = 0xE700000000000000;
  v0[9] = String._bridgeToObjectiveC()();
  v0[10] = v1 + 4;
  v0[11] = 0x80000001000BCF80;
  sub_10007ED30();
  static AnalyticsTransforming.activeWatchProductTypeString()();
  v5 = v4;
  v6 = String._bridgeToObjectiveC()();
  v7 = swift_bridgeObjectRelease(v5);
  v0[12] = v6;
  v0[13] = 1885697139;
  v0[14] = 0xE400000000000000;
  return ((uint64_t (*)(__n128))((char *)sub_10007DE20 + 4 * byte_1000B4E60[v2]))(v7);
}

unint64_t sub_10007DE20()
{
  uint64_t v0;
  NSString v1;

  v1 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(0xE700000000000000);
  *(_QWORD *)(v0 + 120) = v1;
  return sub_10007C6B8(v0);
}

void sub_10007DF0C()
{
  __int16 *v0;

  OnboardingAnalyticsEvent.keyValuePairs.getter(*v0);
}

unint64_t sub_10007DF14(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  Swift::Int v4;

  v2 = v1;
  v4 = AnyHashable._rawHashValue(seed:)(*(_QWORD *)(v2 + 40));
  return sub_10007E1D8(a1, v4);
}

unint64_t sub_10007DF44(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  Swift::Int v5;
  _QWORD v7[9];

  Hasher.init(_seed:)(v7, *(_QWORD *)(v2 + 40));
  String.hash(into:)(v7, a1, a2);
  v5 = Hasher._finalize()();
  return sub_10007E29C(a1, a2, v5);
}

uint64_t sub_10007DFA8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  Swift::Int v6;
  _QWORD v8[9];

  Hasher.init(_seed:)(v8, *(_QWORD *)(v1 + 40));
  v3 = sub_10005A0BC(a1);
  v5 = v4;
  String.hash(into:)(v8, v3, v4);
  swift_bridgeObjectRelease(v5);
  v6 = Hasher._finalize()();
  return sub_10007E37C(a1, v6);
}

unint64_t sub_10007E01C(Swift::UInt a1)
{
  uint64_t v1;
  Swift::Int v3;
  _QWORD v5[9];

  Hasher.init(_seed:)(v5, *(_QWORD *)(v1 + 40));
  Hasher._combine(_:)(a1);
  v3 = Hasher._finalize()();
  return sub_10007E6B8(a1, v3);
}

unint64_t sub_10007E074(char a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  Swift::Int v5;
  _QWORD v7[9];

  Hasher.init(_seed:)(v7, *(_QWORD *)(v1 + 40));
  v3 = a1;
  v4 = qword_1000B51A8[v3];
  String.hash(into:)(v7, *(_QWORD *)&aSummary_1[v3 * 8], v4);
  swift_bridgeObjectRelease(v4);
  v5 = Hasher._finalize()();
  return sub_10007E754(a1, v5);
}

unint64_t sub_10007E0F0(char a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  Swift::Int v5;
  _QWORD v7[9];

  Hasher.init(_seed:)(v7, *(_QWORD *)(v1 + 40));
  v3 = 8 * a1;
  v4 = *(_QWORD *)&aAlltrendsharin[v3 + 24];
  String.hash(into:)(v7, *(_QWORD *)&aAlltrendsharin[v3], v4);
  swift_bridgeObjectRelease(v4);
  v5 = Hasher._finalize()();
  return sub_10007E864(a1, v5);
}

unint64_t sub_10007E16C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = v1;
  v4 = *(_QWORD *)(v2 + 40);
  v5 = type metadata accessor for BrowseCategory(0);
  v6 = sub_100013198((unint64_t *)&qword_1000EF708, (uint64_t (*)(uint64_t))&type metadata accessor for BrowseCategory, (uint64_t)&protocol conformance descriptor for BrowseCategory);
  v7 = dispatch thunk of Hashable._rawHashValue(seed:)(v4, v5, v6);
  return sub_10007E974(a1, v7);
}

unint64_t sub_10007E1D8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v6;
  char v7;
  _BYTE v9[40];

  v3 = -1 << *(_BYTE *)(v2 + 32);
  v4 = a2 & ~v3;
  if (((*(_QWORD *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFF8)) >> v4) & 1) != 0)
  {
    v6 = ~v3;
    do
    {
      sub_10007F3AC(*(_QWORD *)(v2 + 48) + 40 * v4, (uint64_t)v9);
      v7 = static AnyHashable.== infix(_:_:)(v9, a1);
      sub_100025CE0((uint64_t)v9);
      if ((v7 & 1) != 0)
        break;
      v4 = (v4 + 1) & v6;
    }
    while (((*(_QWORD *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFF8)) >> v4) & 1) != 0);
  }
  return v4;
}

unint64_t sub_10007E29C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  BOOL v16;

  v4 = v3 + 64;
  v5 = -1 << *(_BYTE *)(v3 + 32);
  v6 = a3 & ~v5;
  if (((*(_QWORD *)(v3 + 64 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0)
  {
    v9 = *(_QWORD *)(v3 + 48);
    v10 = (_QWORD *)(v9 + 16 * v6);
    v11 = v10[1];
    v12 = *v10 == a1 && v11 == a2;
    if (!v12 && (_stringCompareWithSmolCheck(_:_:expecting:)(*v10, v11, a1, a2, 0) & 1) == 0)
    {
      v13 = ~v5;
      do
      {
        v6 = (v6 + 1) & v13;
        if (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) == 0)
          break;
        v14 = (_QWORD *)(v9 + 16 * v6);
        v15 = v14[1];
        v16 = *v14 == a1 && v15 == a2;
      }
      while (!v16 && (_stringCompareWithSmolCheck(_:_:expecting:)(*v14, v15, a1, a2, 0) & 1) == 0);
    }
  }
  return v6;
}

uint64_t sub_10007E37C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;

  v3 = a2 & ~(-1 << *(_BYTE *)(v2 + 32));
  if (((*(_QWORD *)(v2 + 64 + ((v3 >> 3) & 0xFFFFFFFFFFFFF8)) >> v3) & 1) != 0)
    __asm { BR              X9 }
  return a2 & ~(-1 << *(_BYTE *)(v2 + 32));
}

unint64_t sub_10007E6B8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  unint64_t result;
  uint64_t v7;
  uint64_t v8;

  v4 = v2 + 64;
  v5 = -1 << *(_BYTE *)(v2 + 32);
  result = a2 & ~v5;
  if (((*(_QWORD *)(v2 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFF8)) >> result) & 1) != 0)
  {
    v7 = *(_QWORD *)(v2 + 48);
    if (*(_QWORD *)(v7 + 8 * result) != a1)
    {
      v8 = ~v5;
      for (result = (result + 1) & v8;
            ((*(_QWORD *)(v4 + ((result >> 3) & 0xFFFFFFFFFFFFF8)) >> result) & 1) != 0;
            result = (result + 1) & v8)
      {
        if (*(_QWORD *)(v7 + 8 * result) == a1)
          break;
      }
    }
  }
  return result;
}

unint64_t sub_10007E754(char a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v13;

  v3 = -1 << *(_BYTE *)(v2 + 32);
  v4 = a2 & ~v3;
  if (((*(_QWORD *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFF8)) >> v4) & 1) != 0)
  {
    v5 = ~v3;
    v6 = a1;
    v7 = *(_QWORD *)&aSummary_1[v6 * 8];
    v8 = qword_1000B51A8[v6];
    while (1)
    {
      v9 = *(char *)(*(_QWORD *)(v2 + 48) + v4);
      v10 = *(_QWORD *)&aSummary_1[v9 * 8];
      v11 = qword_1000B51A8[v9];
      if (v10 == v7 && v11 == v8)
        break;
      v13 = _stringCompareWithSmolCheck(_:_:expecting:)(v10, qword_1000B51A8[*(char *)(*(_QWORD *)(v2 + 48) + v4)], v7, v8, 0);
      swift_bridgeObjectRelease(v11);
      swift_bridgeObjectRelease(v8);
      if ((v13 & 1) == 0)
      {
        v4 = (v4 + 1) & v5;
        if (((*(_QWORD *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFF8)) >> v4) & 1) != 0)
          continue;
      }
      return v4;
    }
    swift_bridgeObjectRelease(qword_1000B51A8[*(char *)(*(_QWORD *)(v2 + 48) + v4)]);
    swift_bridgeObjectRelease(v8);
  }
  return v4;
}

unint64_t sub_10007E864(char a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v13;

  v3 = -1 << *(_BYTE *)(v2 + 32);
  v4 = a2 & ~v3;
  if (((*(_QWORD *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFF8)) >> v4) & 1) != 0)
  {
    v5 = ~v3;
    v6 = 8 * a1;
    v7 = *(_QWORD *)&aAlltrendsharin[v6];
    v8 = *(_QWORD *)&aAlltrendsharin[v6 + 24];
    while (1)
    {
      v9 = 8 * *(char *)(*(_QWORD *)(v2 + 48) + v4);
      v10 = *(_QWORD *)&aAlltrendsharin[v9];
      v11 = *(_QWORD *)&aAlltrendsharin[v9 + 24];
      if (v10 == v7 && v11 == v8)
        break;
      v13 = _stringCompareWithSmolCheck(_:_:expecting:)(v10, *(_QWORD *)&aAlltrendsharin[8 * *(char *)(*(_QWORD *)(v2 + 48) + v4) + 24], v7, v8, 0);
      swift_bridgeObjectRelease(v11);
      swift_bridgeObjectRelease(v8);
      if ((v13 & 1) == 0)
      {
        v4 = (v4 + 1) & v5;
        if (((*(_QWORD *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFF8)) >> v4) & 1) != 0)
          continue;
      }
      return v4;
    }
    swift_bridgeObjectRelease(*(_QWORD *)&aAlltrendsharin[8 * *(char *)(*(_QWORD *)(v2 + 48) + v4) + 24]);
    swift_bridgeObjectRelease(v8);
  }
  return v4;
}

unint64_t sub_10007E974(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(char *, unint64_t, uint64_t);
  uint64_t v14;
  char v15;
  uint64_t v17;
  uint64_t v18;

  v3 = v2;
  v18 = a1;
  v5 = type metadata accessor for BrowseCategory(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = -1 << *(_BYTE *)(v3 + 32);
  v10 = a2 & ~v9;
  if (((*(_QWORD *)(v3 + 64 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) != 0)
  {
    v11 = ~v9;
    v12 = *(_QWORD *)(v6 + 72);
    v13 = *(void (**)(char *, unint64_t, uint64_t))(v6 + 16);
    do
    {
      v13(v8, *(_QWORD *)(v3 + 48) + v12 * v10, v5);
      v14 = sub_100013198(&qword_1000EF710, (uint64_t (*)(uint64_t))&type metadata accessor for BrowseCategory, (uint64_t)&protocol conformance descriptor for BrowseCategory);
      v15 = dispatch thunk of static Equatable.== infix(_:_:)(v8, v18, v5, v14);
      (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
      if ((v15 & 1) != 0)
        break;
      v10 = (v10 + 1) & v11;
    }
    while (((*(_QWORD *)(v3 + 64 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) != 0);
  }
  return v10;
}

unint64_t sub_10007EAB4(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;
  Swift::UInt v4;
  uint64_t v5;
  unint64_t result;
  __int128 v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  __int128 v16;
  __int128 v17;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return (unint64_t)&_swiftEmptyDictionarySingleton;
  sub_10007F4E4(0);
  v3 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)(v1);
  v4 = *(_QWORD *)(a1 + 32);
  v16 = *(_OWORD *)(a1 + 40);
  v5 = *(_QWORD *)(a1 + 56);
  result = sub_10007E01C(v4);
  v7 = v16;
  if ((v8 & 1) != 0)
  {
LABEL_7:
    __break(1u);
LABEL_8:
    swift_unknownObjectRetain(v7);
    return (unint64_t)v3;
  }
  v9 = a1 + 64;
  while (1)
  {
    *(_QWORD *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    *(_QWORD *)(v3[6] + 8 * result) = v4;
    v10 = v3[7] + 24 * result;
    *(_OWORD *)v10 = v7;
    *(_QWORD *)(v10 + 16) = v5;
    v11 = v3[2];
    v12 = __OFADD__(v11, 1);
    v13 = v11 + 1;
    if (v12)
      break;
    v3[2] = v13;
    if (!--v1)
      goto LABEL_8;
    v14 = v9 + 32;
    v4 = *(_QWORD *)v9;
    v17 = *(_OWORD *)(v9 + 8);
    v5 = *(_QWORD *)(v9 + 24);
    swift_unknownObjectRetain(v7);
    result = sub_10007E01C(v4);
    v9 = v14;
    v7 = v17;
    if ((v15 & 1) != 0)
      goto LABEL_7;
  }
  __break(1u);
  return result;
}

unint64_t _s6Health24OnboardingAnalyticsEventV4StepO8rawValueAESgSS_tcfC_0(Swift::String string)
{
  void *object;
  Swift::String v2;
  unint64_t v3;

  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1000DC340, v2);
  swift_bridgeObjectRelease(object);
  if (v3 >= 9)
    return 9;
  else
    return v3;
}

unint64_t _s6Health24OnboardingAnalyticsEventV6ActionO8rawValueAESgSS_tcfC_0(Swift::String string)
{
  void *object;
  Swift::String v2;
  unint64_t v3;

  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1000DC4A8, v2);
  swift_bridgeObjectRelease(object);
  if (v3 >= 8)
    return 8;
  else
    return v3;
}

void sub_10007EC68(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_1000EF698)
  {
    sub_10007ECBC(255);
    v3 = type metadata accessor for _ContiguousArrayStorage(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_1000EF698);
  }
}

void sub_10007ECBC(uint64_t a1)
{
  uint64_t v2;
  unint64_t TupleTypeMetadata2;
  uint64_t v4;

  if (!qword_1000EF6A0)
  {
    v2 = sub_100006D10(255, &qword_1000ECAA0, NSObject_ptr);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2(a1, &type metadata for String, v2, 0, 0);
    if (!v4)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_1000EF6A0);
  }
}

unint64_t sub_10007ED30()
{
  unint64_t result;

  result = qword_1000EF6A8;
  if (!qword_1000EF6A8)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for OnboardingAnalyticsEvent, &type metadata for OnboardingAnalyticsEvent);
    atomic_store(result, (unint64_t *)&qword_1000EF6A8);
  }
  return result;
}

unint64_t sub_10007ED78()
{
  unint64_t result;

  result = qword_1000EF6B0;
  if (!qword_1000EF6B0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for OnboardingAnalyticsEvent.Step, &type metadata for OnboardingAnalyticsEvent.Step);
    atomic_store(result, (unint64_t *)&qword_1000EF6B0);
  }
  return result;
}

unint64_t sub_10007EDC0()
{
  unint64_t result;

  result = qword_1000EF6B8;
  if (!qword_1000EF6B8)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for OnboardingAnalyticsEvent.Context, &type metadata for OnboardingAnalyticsEvent.Context);
    atomic_store(result, (unint64_t *)&qword_1000EF6B8);
  }
  return result;
}

unint64_t sub_10007EE08()
{
  unint64_t result;

  result = qword_1000EF6C0;
  if (!qword_1000EF6C0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for OnboardingAnalyticsEvent.Action, &type metadata for OnboardingAnalyticsEvent.Action);
    atomic_store(result, (unint64_t *)&qword_1000EF6C0);
  }
  return result;
}

unint64_t sub_10007EE50()
{
  unint64_t result;

  result = qword_1000EF6C8;
  if (!qword_1000EF6C8)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for OnboardingAnalyticsEvent, &type metadata for OnboardingAnalyticsEvent);
    atomic_store(result, (unint64_t *)&qword_1000EF6C8);
  }
  return result;
}

unint64_t sub_10007EE98()
{
  unint64_t result;

  result = qword_1000EF6D0;
  if (!qword_1000EF6D0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for OnboardingAnalyticsEvent, &type metadata for OnboardingAnalyticsEvent);
    atomic_store(result, (unint64_t *)&qword_1000EF6D0);
  }
  return result;
}

_WORD *initializeBufferWithCopyOfBuffer for OnboardingAnalyticsEvent(_WORD *result, _WORD *a2)
{
  *result = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for OnboardingAnalyticsEvent(unsigned __int16 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xF9)
    goto LABEL_17;
  if (a2 + 65287 <= 0xFFFEFFFF)
    v2 = 2;
  else
    v2 = 4;
  if (a2 + 65287 < 0xFF0000)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 16)) - 65287;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = a1[1];
      if (!a1[1])
        goto LABEL_17;
      return (*a1 | (v4 << 16)) - 65287;
    }
    v4 = *((unsigned __int8 *)a1 + 2);
    if (*((_BYTE *)a1 + 2))
      return (*a1 | (v4 << 16)) - 65287;
  }
LABEL_17:
  v6 = *((unsigned __int8 *)a1 + 1);
  v7 = v6 >= 8;
  v8 = v6 - 8;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for OnboardingAnalyticsEvent(_WORD *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 65287 <= 0xFFFEFFFF)
    v3 = 2;
  else
    v3 = 4;
  if (a3 + 65287 < 0xFF0000)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF9)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF8)
    return ((uint64_t (*)(void))((char *)&loc_10007EFC8 + 4 * byte_1000B4E8A[v4]))();
  *a1 = a2 - 249;
  return ((uint64_t (*)(void))((char *)sub_10007EFFC + 4 * byte_1000B4E85[v4]))();
}

uint64_t sub_10007EFFC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 2) = v1;
  return result;
}

uint64_t sub_10007F004(uint64_t result, int a2)
{
  *(_WORD *)(result + 2) = 0;
  if (a2)
    JUMPOUT(0x10007F00CLL);
  return result;
}

uint64_t sub_10007F018(uint64_t result, int a2)
{
  *(_DWORD *)(result + 2) = 0;
  if (!a2)
    JUMPOUT(0x10007F020);
  *(_BYTE *)(result + 1) = a2 + 7;
  return result;
}

uint64_t sub_10007F024(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 2) = v1;
  return result;
}

uint64_t sub_10007F02C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 2) = v1;
  return result;
}

ValueMetadata *type metadata accessor for OnboardingAnalyticsEvent()
{
  return &type metadata for OnboardingAnalyticsEvent;
}

uint64_t getEnumTagSinglePayload for OnboardingAnalyticsEvent.Step(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xF8)
    goto LABEL_17;
  if (a2 + 8 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 8) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 8;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 8;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 8;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 9;
  v8 = v6 - 9;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for OnboardingAnalyticsEvent.Step(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 8 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 8) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF8)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF7)
    return ((uint64_t (*)(void))((char *)&loc_10007F124 + 4 * byte_1000B4E94[v4]))();
  *a1 = a2 + 8;
  return ((uint64_t (*)(void))((char *)sub_10007F158 + 4 * byte_1000B4E8F[v4]))();
}

uint64_t sub_10007F158(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10007F160(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10007F168);
  return result;
}

uint64_t sub_10007F174(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10007F17CLL);
  *(_BYTE *)result = a2 + 8;
  return result;
}

uint64_t sub_10007F180(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10007F188(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for OnboardingAnalyticsEvent.Step()
{
  return &type metadata for OnboardingAnalyticsEvent.Step;
}

uint64_t storeEnumTagSinglePayload for OnboardingAnalyticsEvent.Context(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_10007F1E4 + 4 * byte_1000B4E99[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_10007F204 + 4 * byte_1000B4E9E[v4]))();
}

_BYTE *sub_10007F1E4(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_10007F204(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_10007F20C(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_10007F214(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_10007F21C(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_10007F224(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for OnboardingAnalyticsEvent.Context()
{
  return &type metadata for OnboardingAnalyticsEvent.Context;
}

uint64_t getEnumTagSinglePayload for OnboardingAnalyticsEvent.Action(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xF9)
    goto LABEL_17;
  if (a2 + 7 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 7) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 7;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 7;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 7;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 8;
  v8 = v6 - 8;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for OnboardingAnalyticsEvent.Action(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 7 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 7) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF9)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF8)
    return ((uint64_t (*)(void))((char *)&loc_10007F31C + 4 * byte_1000B4EA8[v4]))();
  *a1 = a2 + 7;
  return ((uint64_t (*)(void))((char *)sub_10007F350 + 4 * byte_1000B4EA3[v4]))();
}

uint64_t sub_10007F350(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10007F358(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10007F360);
  return result;
}

uint64_t sub_10007F36C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10007F374);
  *(_BYTE *)result = a2 + 7;
  return result;
}

uint64_t sub_10007F378(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10007F380(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for OnboardingAnalyticsEvent.Action()
{
  return &type metadata for OnboardingAnalyticsEvent.Action;
}

_OWORD *sub_10007F39C(_OWORD *a1, _OWORD *a2)
{
  __int128 v2;

  v2 = a1[1];
  *a2 = *a1;
  a2[1] = v2;
  return a2;
}

uint64_t sub_10007F3AC(uint64_t a1, uint64_t a2)
{
  (*(void (**)(uint64_t, uint64_t))(*(&type metadata for AnyHashable - 1) + 16))(a2, a1);
  return a2;
}

void sub_10007F3E8(uint64_t a1, unint64_t *a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v5;

  if (!*a2)
  {
    v4 = type metadata accessor for _DictionaryStorage(0, a3, (char *)&type metadata for Any + 8);
    if (!v5)
      atomic_store(v4, a2);
  }
}

uint64_t sub_10007F43C(uint64_t a1, uint64_t a2, unint64_t *a3, uint64_t a4)
{
  uint64_t v6;

  sub_10007F488(0, a3, a4);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a2, a1, v6);
  return a2;
}

void sub_10007F488(uint64_t a1, unint64_t *a2, uint64_t a3)
{
  unint64_t TupleTypeMetadata2;
  uint64_t v5;

  if (!*a2)
  {
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2(0, a3, (char *)&type metadata for Any + 8, 0, 0);
    if (!v5)
      atomic_store(TupleTypeMetadata2, a2);
  }
}

void sub_10007F4E4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;

  if (!qword_1000EF6F0)
  {
    type metadata accessor for UIUserInterfaceSizeClass(255);
    v3 = v2;
    v4 = sub_10007F578();
    sub_100013198(&qword_1000EF700, (uint64_t (*)(uint64_t))type metadata accessor for UIUserInterfaceSizeClass, (uint64_t)&unk_1000B0D80);
    v5 = type metadata accessor for _DictionaryStorage(a1, v3, v4);
    if (!v6)
      atomic_store(v5, (unint64_t *)&qword_1000EF6F0);
  }
}

unint64_t sub_10007F578()
{
  unint64_t result;
  _QWORD v1[2];

  result = qword_1000EF6F8;
  if (!qword_1000EF6F8)
  {
    v1[0] = &protocol descriptor for CollectionViewLayoutSectionProviding;
    v1[1] = &protocol descriptor for SnapshotDataSource;
    result = swift_getExistentialTypeMetadata(0, 0, 2, v1);
    atomic_store(result, (unint64_t *)&qword_1000EF6F8);
  }
  return result;
}

void sub_10007F5D0(uint64_t a1, unint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  unint64_t TupleTypeMetadata2;
  uint64_t v8;

  if (!*a2)
  {
    v6 = type metadata accessor for DisplayRepresentation(255);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2(a1, a3, v6, 0, 0);
    if (!v8)
      atomic_store(TupleTypeMetadata2, a2);
  }
}

unint64_t sub_10007F634()
{
  unint64_t result;

  result = qword_1000EF728;
  if (!qword_1000EF728)
  {
    result = swift_getWitnessTable(&unk_1000B5D3C, &type metadata for OpenViewIntent.Screen);
    atomic_store(result, (unint64_t *)&qword_1000EF728);
  }
  return result;
}

unint64_t sub_10007F678()
{
  unint64_t result;

  result = qword_1000EF740;
  if (!qword_1000EF740)
  {
    result = swift_getWitnessTable(&unk_1000B5DB4, &type metadata for OpenViewIntent.Screen);
    atomic_store(result, (unint64_t *)&qword_1000EF740);
  }
  return result;
}

void sub_10007F6BC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;

  if (!qword_1000EF748)
  {
    sub_10001B790(255, &qword_1000EF738, (uint64_t (*)(void))sub_10007F678, (uint64_t)&type metadata for OpenViewIntent.Screen, (uint64_t (*)(uint64_t, uint64_t, uint64_t))&type metadata accessor for EnumURLRepresentation.EnumSingleURLRepresentation);
    v3 = v2;
    sub_10007F634();
    v4 = type metadata accessor for _DictionaryStorage(a1, &type metadata for OpenViewIntent.Screen, v3);
    if (!v5)
      atomic_store(v4, (unint64_t *)&qword_1000EF748);
  }
}

void sub_10007F74C(uint64_t a1, unint64_t *a2, void (*a3)(void), uint64_t a4)
{
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;

  if (!*a2)
  {
    v8 = type metadata accessor for DisplayRepresentation(255);
    a3();
    v9 = type metadata accessor for _DictionaryStorage(a1, a4, v8);
    if (!v10)
      atomic_store(v9, a2);
  }
}

unint64_t sub_10007F7C0()
{
  unint64_t result;

  result = qword_1000EF760;
  if (!qword_1000EF760)
  {
    result = swift_getWitnessTable(&unk_1000B56FC, &type metadata for OpenTabIntent.Tab);
    atomic_store(result, (unint64_t *)&qword_1000EF760);
  }
  return result;
}

void sub_10007F804(uint64_t a1, unint64_t *a2, unint64_t *a3, uint64_t (*a4)(void), uint64_t a5)
{
  uint64_t v8;
  unint64_t TupleTypeMetadata2;
  uint64_t v10;

  if (!*a2)
  {
    sub_10001B790(255, a3, a4, a5, (uint64_t (*)(uint64_t, uint64_t, uint64_t))&type metadata accessor for EnumURLRepresentation.EnumSingleURLRepresentation);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2(a1, a5, v8, 0, 0);
    if (!v10)
      atomic_store(TupleTypeMetadata2, a2);
  }
}

unint64_t sub_10007F87C()
{
  unint64_t result;

  result = qword_1000EF778;
  if (!qword_1000EF778)
  {
    result = swift_getWitnessTable(&unk_1000B5774, &type metadata for OpenTabIntent.Tab);
    atomic_store(result, (unint64_t *)&qword_1000EF778);
  }
  return result;
}

void sub_10007F8C0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;

  if (!qword_1000EF780)
  {
    sub_10001B790(255, &qword_1000EF770, (uint64_t (*)(void))sub_10007F87C, (uint64_t)&type metadata for OpenTabIntent.Tab, (uint64_t (*)(uint64_t, uint64_t, uint64_t))&type metadata accessor for EnumURLRepresentation.EnumSingleURLRepresentation);
    v3 = v2;
    sub_10007F7C0();
    v4 = type metadata accessor for _DictionaryStorage(a1, &type metadata for OpenTabIntent.Tab, v3);
    if (!v5)
      atomic_store(v4, (unint64_t *)&qword_1000EF780);
  }
}

uint64_t sub_10007F950(uint64_t a1, uint64_t a2, unint64_t *a3, unint64_t *a4, uint64_t (*a5)(void), uint64_t a6)
{
  uint64_t v8;

  sub_10007F804(0, a3, a4, a5, a6);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(a2, a1, v8);
  return a2;
}

uint64_t sub_10007F9A4(uint64_t a1, uint64_t a2, unint64_t *a3, uint64_t a4)
{
  uint64_t v6;

  sub_10007F5D0(0, a3, a4);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a2, a1, v6);
  return a2;
}

void sub_10007F9F0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;

  if (!qword_1000EF790)
  {
    sub_10001B790(255, &qword_1000EE730, (uint64_t (*)(void))sub_10005A4DC, (uint64_t)&type metadata for CategoryIntent.Category, (uint64_t (*)(uint64_t, uint64_t, uint64_t))&type metadata accessor for _EnumURLRepresentation.EnumSingleURLRepresentation);
    v3 = v2;
    sub_10005A818();
    v4 = type metadata accessor for _DictionaryStorage(a1, &type metadata for CategoryIntent.Category, v3);
    if (!v5)
      atomic_store(v4, (unint64_t *)&qword_1000EF790);
  }
}

uint64_t sub_10007FA80(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_10005B48C(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

void sub_10007FAC4(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_1000EF798)
  {
    v2 = sub_100006D10(255, &qword_1000ECAA0, NSObject_ptr);
    v3 = type metadata accessor for _DictionaryStorage(a1, &type metadata for String, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_1000EF798);
  }
}

uint64_t sub_10007FB40()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  uint8_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  NSObject *v27;
  os_log_type_t v28;
  uint8_t *v29;
  uint64_t v30;
  uint64_t MetatypeMetadata;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v36;
  uint64_t v37;
  void (*v38)(char *, uint64_t);
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;

  v1 = v0;
  v37 = *v0;
  v2 = type metadata accessor for Logger(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = __chkstk_darwin(v2);
  v6 = (char *)&v36 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __chkstk_darwin(v4);
  v9 = (char *)&v36 - v8;
  v10 = static Logger.general.getter(v7);
  v11 = Logger.logObject.getter(v10);
  v12 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v11, v12))
  {
    v13 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v13 = 0;
    _os_log_impl((void *)&_mh_execute_header, v11, v12, "Resetting store demo mode pinned content now!", v13, 2u);
    swift_slowDealloc(v13, -1, -1);
  }

  v38 = *(void (**)(char *, uint64_t))(v3 + 8);
  v39 = v2;
  v38(v9, v2);
  v14 = (uint64_t)(v1 + 2);
  sub_100028F08(v14, (uint64_t)&v41);
  v15 = v43;
  v16 = v44;
  sub_100012E04(&v41, v43);
  dispatch thunk of PinnedContentManaging.unpinAll()(v15, v16);
  _s6Health23OpenSleepScheduleIntentVwxx_0(&v41);
  sub_100080B48();
  v18 = v17;
  v19 = *(_QWORD *)(v17 + 16);
  if (v19)
  {
    v20 = (uint64_t *)(v17 + 40);
    do
    {
      v21 = *(v20 - 1);
      v22 = *v20;
      sub_100028F08(v14, (uint64_t)&v41);
      v23 = v43;
      v24 = v44;
      sub_100012E04(&v41, v43);
      swift_bridgeObjectRetain(v22);
      dispatch thunk of PinnedContentManaging.pin(identifier:)(v21, v22, v23, v24);
      _s6Health23OpenSleepScheduleIntentVwxx_0(&v41);
      swift_bridgeObjectRelease(v22);
      v20 += 2;
      --v19;
    }
    while (v19);
  }
  swift_bridgeObjectRelease(v18);
  v26 = static Logger.general.getter(v25);
  v27 = Logger.logObject.getter(v26);
  v28 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v27, v28))
  {
    v29 = (uint8_t *)swift_slowAlloc(12, -1);
    v30 = swift_slowAlloc(32, -1);
    v40 = v30;
    *(_DWORD *)v29 = 136315138;
    v41 = v37;
    MetatypeMetadata = swift_getMetatypeMetadata(v37);
    v32 = String.init<A>(describing:)(&v41, MetatypeMetadata);
    v34 = v33;
    v41 = sub_100012B20(v32, v33, &v40);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v41, &v42, v29 + 4, v29 + 12);
    swift_bridgeObjectRelease(v34);
    _os_log_impl((void *)&_mh_execute_header, v27, v28, "[%s]: Reset demo mode pinned content completed.", v29, 0xCu);
    swift_arrayDestroy(v30, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v30, -1, -1);
    swift_slowDealloc(v29, -1, -1);
  }

  return ((uint64_t (*)(char *, uint64_t))v38)(v6, v39);
}

uint64_t sub_10007FE38()
{
  uint64_t v0;

  _s6Health23OpenSleepScheduleIntentVwxx_0((_QWORD *)(v0 + 16));
  return swift_deallocClassInstance(v0, 56, 7);
}

uint64_t type metadata accessor for StoreDemoModeManager()
{
  return objc_opt_self(_TtC6Health20StoreDemoModeManager);
}

uint64_t sub_10007FE7C(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_10007FF44(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_10007FE98(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_1000806C8(a1, a2, a3, (_QWORD *)*v3, &qword_1000ED400, (uint64_t (*)(uint64_t))&type metadata accessor for ContentConfigurationItem);
  *v3 = result;
  return result;
}

uint64_t sub_10007FEC4(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_1000800B4(a1, a2, a3, (_QWORD *)*v3);
  *v3 = result;
  return result;
}

uint64_t sub_10007FEE0(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_10008025C(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_10007FEFC(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_100080560(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_10007FF18(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_1000806C8(a1, a2, a3, (_QWORD *)*v3, &qword_1000EF868, (uint64_t (*)(uint64_t))sub_100080D64);
  *v3 = result;
  return result;
}

uint64_t sub_10007FF44(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  size_t v16;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    sub_1000275F4(0, &qword_1000ED440, (uint64_t)&type metadata for HKDataType);
    v11 = (char *)swift_allocObject(v10, 16 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 17;
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * (v13 >> 4);
  }
  else
  {
    v11 = (char *)_swiftEmptyArrayStorage;
  }
  v14 = v11 + 32;
  v15 = a4 + 32;
  v16 = 16 * v8;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v14 >= &v15[v16])
      memmove(v14, v15, v16);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v15 >= &v14[v16] || v14 >= &v15[v16])
  {
    swift_arrayInitWithCopy(v14);
LABEL_30:
    swift_release(a4);
    return (uint64_t)v11;
  }
LABEL_32:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_1000800B4(char a1, int64_t a2, char a3, _QWORD *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  size_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = a4[2];
  if (v7 <= v8)
    v9 = a4[2];
  else
    v9 = v7;
  if (v9)
  {
    sub_10001E530(0);
    v11 = (_QWORD *)swift_allocObject(v10, 40 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    v11[2] = v8;
    v11[3] = 2 * ((uint64_t)(v12 - 32) / 40);
  }
  else
  {
    v11 = _swiftEmptyArrayStorage;
  }
  v13 = (unint64_t)(v11 + 4);
  v14 = (unint64_t)(a4 + 4);
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v13 >= v14 + 40 * v8)
      memmove(v11 + 4, a4 + 4, 40 * v8);
    a4[2] = 0;
    goto LABEL_28;
  }
  if (v14 >= v13 + 40 * v8 || v13 >= v14 + 40 * v8)
  {
    sub_100013100(0, (unint64_t *)&qword_1000EEC70, (uint64_t)&protocol descriptor for SectionedDataSourceItem);
    swift_arrayInitWithCopy(v11 + 4);
LABEL_28:
    swift_release(a4);
    return (uint64_t)v11;
  }
LABEL_30:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_10008025C(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    sub_1000275F4(0, (unint64_t *)&qword_1000EF4C0, (uint64_t)&type metadata for String);
    v11 = (char *)swift_allocObject(v10, 16 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 17;
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * (v13 >> 4);
  }
  else
  {
    v11 = (char *)_swiftEmptyArrayStorage;
  }
  v14 = v11 + 32;
  v15 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v14 >= &v15[16 * v8])
      memmove(v14, v15, 16 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v15 >= &v14[16 * v8] || v14 >= &v15[16 * v8])
  {
    swift_arrayInitWithCopy(v14);
LABEL_30:
    swift_release(a4);
    return (uint64_t)v11;
  }
LABEL_32:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_1000803D0(char a1, int64_t a2, char a3, _QWORD *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  int64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = a4[2];
  if (v7 <= v8)
    v9 = a4[2];
  else
    v9 = v7;
  if (v9)
  {
    sub_100080D18(0, &qword_1000EF660, (uint64_t (*)(uint64_t))sub_100013B20);
    v11 = (_QWORD *)swift_allocObject(v10, 16 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 17;
    v11[2] = v8;
    v11[3] = 2 * (v13 >> 4);
  }
  else
  {
    v11 = _swiftEmptyArrayStorage;
  }
  v14 = (unint64_t)(v11 + 4);
  v15 = (unint64_t)(a4 + 4);
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v14 >= v15 + 16 * v8)
      memmove(v11 + 4, a4 + 4, 16 * v8);
    a4[2] = 0;
    goto LABEL_30;
  }
  if (v15 >= v14 + 16 * v8 || v14 >= v15 + 16 * v8)
  {
    sub_100013B20(0);
    swift_arrayInitWithCopy(v11 + 4);
LABEL_30:
    swift_release(a4);
    return (uint64_t)v11;
  }
LABEL_32:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_100080560(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    sub_100080D18(0, &qword_1000ED408, (uint64_t (*)(uint64_t))sub_1000149A0);
    v11 = (char *)swift_allocObject(v10, 16 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 17;
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * (v13 >> 4);
  }
  else
  {
    v11 = (char *)_swiftEmptyArrayStorage;
  }
  v14 = v11 + 32;
  v15 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v14 >= &v15[16 * v8])
      memmove(v14, v15, 16 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v15 >= &v14[16 * v8] || v14 >= &v15[16 * v8])
  {
    memcpy(v14, v15, 16 * v8);
LABEL_30:
    swift_release(a4);
    return (uint64_t)v11;
  }
LABEL_32:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_1000806C8(char a1, int64_t a2, char a3, _QWORD *a4, unint64_t *a5, uint64_t (*a6)(uint64_t))
{
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  size_t v20;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  char *v28;
  unint64_t v29;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v9 = a4[3];
    v10 = v9 >> 1;
    if ((uint64_t)(v9 >> 1) < a2)
    {
      if (v10 + 0x4000000000000000 < 0)
      {
LABEL_35:
        __break(1u);
        goto LABEL_36;
      }
      v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v10 = a2;
    }
  }
  else
  {
    v10 = a2;
  }
  v11 = a4[2];
  if (v10 <= v11)
    v12 = a4[2];
  else
    v12 = v10;
  if (!v12)
  {
    v19 = _swiftEmptyArrayStorage;
    goto LABEL_19;
  }
  sub_100080D18(0, a5, a6);
  v14 = v13;
  v15 = *(_QWORD *)(a6(0) - 8);
  v16 = *(_QWORD *)(v15 + 72);
  v17 = *(unsigned __int8 *)(v15 + 80);
  v18 = (v17 + 32) & ~v17;
  v19 = (_QWORD *)swift_allocObject(v14, v18 + v16 * v12, v17 | 7);
  v20 = j__malloc_size(v19);
  if (!v16)
  {
    __break(1u);
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  if (v20 - v18 == 0x8000000000000000 && v16 == -1)
    goto LABEL_34;
  v19[2] = v11;
  v19[3] = 2 * ((uint64_t)(v20 - v18) / v16);
LABEL_19:
  v22 = a6(0);
  v23 = *(_QWORD *)(v22 - 8);
  v24 = (*(unsigned __int8 *)(v23 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v23 + 80);
  v25 = (char *)v19 + v24;
  v26 = (char *)a4 + v24;
  if ((a1 & 1) != 0)
  {
    if (v19 < a4 || v25 >= &v26[*(_QWORD *)(v23 + 72) * v11])
    {
      swift_arrayInitWithTakeFrontToBack(v25, v26, v11, v22);
    }
    else if (v19 != a4)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    a4[2] = 0;
    goto LABEL_32;
  }
  v27 = *(_QWORD *)(v23 + 72) * v11;
  v28 = &v25[v27];
  v29 = (unint64_t)&v26[v27];
  if (v26 >= v28 || (unint64_t)v25 >= v29)
  {
    swift_arrayInitWithCopy(v25);
LABEL_32:
    swift_release(a4);
    return (uint64_t)v19;
  }
LABEL_36:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

void (*sub_1000808B0(uint64_t (**a1)(), unint64_t a2, uint64_t a3))(_QWORD *)
{
  uint64_t (*v6)();

  v6 = (uint64_t (*)())malloc(0x28uLL);
  *a1 = v6;
  *((_QWORD *)v6 + 4) = sub_10008095C(v6, a2, a3);
  return sub_100080904;
}

void (*sub_100080908(void (**a1)(id *a1), unint64_t a2, uint64_t a3))(_QWORD *)
{
  void (*v6)(id *);

  v6 = (void (*)(id *))malloc(0x28uLL);
  *a1 = v6;
  *((_QWORD *)v6 + 4) = sub_1000809C8(v6, a2, a3);
  return sub_100080904;
}

uint64_t (*sub_10008095C(uint64_t (*result)(), unint64_t a2, uint64_t a3))()
{
  uint64_t (*v3)();
  id v4;

  v3 = result;
  if ((a3 & 0xC000000000000001) != 0)
  {
    v4 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(a2, a3);
    goto LABEL_5;
  }
  if ((a2 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (*(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10) > a2)
  {
    v4 = *(id *)(a3 + 8 * a2 + 32);
LABEL_5:
    *(_QWORD *)v3 = v4;
    return j__s6Health10HKDataTypeOwxx;
  }
  __break(1u);
  return result;
}

void (*sub_1000809C8(void (*result)(id *a1), unint64_t a2, uint64_t a3))(id *a1)
{
  void (*v3)(id *);
  id v4;

  v3 = result;
  if ((a3 & 0xC000000000000001) != 0)
  {
    v4 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(a2, a3);
    goto LABEL_5;
  }
  if ((a2 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (*(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10) > a2)
  {
    v4 = *(id *)(a3 + 8 * a2 + 32);
LABEL_5:
    *(_QWORD *)v3 = v4;
    return destroy for HKDataType;
  }
  __break(1u);
  return result;
}

void destroy for HKDataType(id *a1)
{

}

_QWORD *sub_100080A3C(uint64_t a1, void *a2)
{
  _QWORD *result;
  uint64_t v4;
  uint64_t i;
  uint64_t v7;
  Class isa;
  id v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;

  result = _swiftEmptyArrayStorage;
  v4 = *(_QWORD *)(a1 + 16);
  if (v4)
  {
    swift_bridgeObjectRetain(a1);
    for (i = 0; i != v4; ++i)
    {
      isa = Int._bridgeToObjectiveC()().super.super.isa;
      v9 = objc_msgSend(a2, "displayTypeWithIdentifier:", isa);

      if (v9)
      {
        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v10);
        v12 = *(_QWORD *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x10);
        v11 = *(_QWORD *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x18);
        if (v12 >= v11 >> 1)
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v11 > 1, v12 + 1, 1);
        v7 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v12, v9);
        specialized Array._endMutation()(v7);
      }
    }
    swift_bridgeObjectRelease(a1);
    return _swiftEmptyArrayStorage;
  }
  return result;
}

void sub_100080B48()
{
  void *v0;
  id v1;
  id v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  void *v16;

  v0 = (void *)objc_opt_self(HKDisplayTypeController);
  v1 = objc_msgSend(objc_allocWithZone((Class)HKHealthStore), "init");
  v2 = objc_msgSend(v0, "sharedInstanceForHealthStore:", v1);

  if (!v2)
    goto LABEL_19;
  v3 = v2;
  v4 = (uint64_t)sub_100080A3C((uint64_t)&off_1000DC588, v3);

  if (!((unint64_t)v4 >> 62))
  {
    v5 = *(_QWORD *)((v4 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v5)
      goto LABEL_4;
LABEL_17:
    swift_bridgeObjectRelease(v4);

    return;
  }
  if (v4 < 0)
    v15 = v4;
  else
    v15 = v4 & 0xFFFFFFFFFFFFFF8;
  v5 = _CocoaArrayWrapper.endIndex.getter(v15);
  if (!v5)
    goto LABEL_17;
LABEL_4:
  sub_10007FEE0(0, v5 & ~(v5 >> 63), 0);
  if (v5 < 0)
  {
    __break(1u);
LABEL_19:
    __break(1u);
    return;
  }
  v16 = v3;
  v6 = 0;
  do
  {
    if ((v4 & 0xC000000000000001) != 0)
      v7 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v6, v4);
    else
      v7 = *(id *)(v4 + 8 * v6 + 32);
    v8 = v7;
    v9 = HKDisplayType.pinnedContentIdentifier.getter();
    v11 = v10;

    v13 = _swiftEmptyArrayStorage[2];
    v12 = _swiftEmptyArrayStorage[3];
    if (v13 >= v12 >> 1)
      sub_10007FEE0(v12 > 1, v13 + 1, 1);
    ++v6;
    _swiftEmptyArrayStorage[2] = v13 + 1;
    v14 = &_swiftEmptyArrayStorage[2 * v13];
    v14[4] = v9;
    v14[5] = v11;
  }
  while (v5 != v6);
  swift_bridgeObjectRelease(v4);

}

void sub_100080D18(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t))
{
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!*a2)
  {
    v5 = a3(255);
    v6 = type metadata accessor for _ContiguousArrayStorage(a1, v5);
    if (!v7)
      atomic_store(v6, a2);
  }
}

void sub_100080D64(uint64_t a1)
{
  uint64_t v2;
  unint64_t Descriptor;
  uint64_t v4;

  if (!qword_1000EF870)
  {
    v2 = sub_100006D10(255, (unint64_t *)&unk_1000EED00, HKSample_ptr);
    Descriptor = type metadata accessor for HKSampleQueryDescriptor(a1, v2);
    if (!v4)
      atomic_store(Descriptor, (unint64_t *)&qword_1000EF870);
  }
}

id sub_100080DCC(void *a1, uint64_t a2, uint64_t a3)
{
  char *v3;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  id v14;
  char *v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  NSString v23;
  NSString v24;
  objc_class *v25;
  id v26;
  id v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  id v31;
  NSString v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  id v36;
  NSString v37;
  id v38;
  id v39;
  id v40;
  id v41;
  id v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  id v46;
  Class isa;
  id v48;
  uint64_t v49;
  id v50;
  Class v51;
  id v52;
  __int128 v54;
  uint64_t v55;
  objc_super v56;

  v55 = a2;
  v7 = type metadata accessor for Locale(0);
  __chkstk_darwin(v7);
  v9 = (char *)&v54 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for String.LocalizationValue(0);
  __chkstk_darwin(v10);
  v12 = (char *)&v54 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = &v3[OBJC_IVAR____TtC6Health30CloudSyncWelcomeViewController_delegate];
  *((_QWORD *)v13 + 1) = 0;
  swift_unknownObjectWeakInit(v13, 0);
  v14 = objc_allocWithZone((Class)HKCloudSyncControl);
  v15 = v3;
  v16 = objc_msgSend(v14, "initWithHealthStore:", a1);
  *(_QWORD *)&v15[OBJC_IVAR____TtC6Health30CloudSyncWelcomeViewController_cloudSyncControl] = v16;
  *((_QWORD *)v13 + 1) = a3;
  swift_unknownObjectWeakAssign(v13, a2);

  v17 = String.LocalizationValue.init(stringLiteral:)(0xD000000000000019, 0x80000001000BD090);
  static Locale.current.getter(v17);
  String.init(localized:table:bundle:locale:comment:)(v12, 0, 0, 0, v9, 0, 0, 256);
  v19 = v18;
  v20 = String.LocalizationValue.init(stringLiteral:)(0xD00000000000001ALL, 0x80000001000BD0B0);
  static Locale.current.getter(v20);
  String.init(localized:table:bundle:locale:comment:)(v12, 0, 0, 0, v9, 0, 0, 256);
  v22 = v21;
  v23 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v19);
  v24 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v22);
  v25 = (objc_class *)type metadata accessor for CloudSyncWelcomeViewController();
  v56.receiver = v15;
  v56.super_class = v25;
  v26 = objc_msgSendSuper2(&v56, "initWithTitle:detailText:icon:contentLayout:", v23, v24, 0, 2);

  v27 = v26;
  v28 = String.LocalizationValue.init(stringLiteral:)(0xD000000000000032, 0x80000001000BD0D0);
  static Locale.current.getter(v28);
  String.init(localized:table:bundle:locale:comment:)(v12, 0, 0, 0, v9, 0, 0, 256);
  v30 = v29;
  v31 = objc_msgSend((id)objc_opt_self(OBBoldTrayButton), "boldButton");
  objc_msgSend(v31, "addTarget:action:forControlEvents:", v27, "didTapEnableCloudSync:", 64);
  v32 = String._bridgeToObjectiveC()();
  objc_msgSend(v31, "setTitle:forState:", v32, 0, swift_bridgeObjectRelease(v30).n128_f64[0]);

  v33 = String.LocalizationValue.init(stringLiteral:)(0xD000000000000033, 0x80000001000BD110);
  static Locale.current.getter(v33);
  String.init(localized:table:bundle:locale:comment:)(v12, 0, 0, 0, v9, 0, 0, 256);
  v35 = v34;
  v36 = objc_msgSend((id)objc_opt_self(OBLinkTrayButton), "linkButton");
  objc_msgSend(v36, "addTarget:action:forControlEvents:", v27, "didTapDisableCloudSync:", 64);
  v37 = String._bridgeToObjectiveC()();
  objc_msgSend(v36, "setTitle:forState:", v37, 0, swift_bridgeObjectRelease(v35).n128_f64[0]);

  v38 = v31;
  v39 = v36;
  v40 = objc_msgSend(v27, "buttonTray");
  objc_msgSend(v40, "addButton:", v38);

  v41 = v39;
  v42 = objc_msgSend(v27, "buttonTray");
  objc_msgSend(v42, "addButton:", v41);

  sub_100061034();
  v44 = v43;
  v45 = swift_allocObject(v43, 64, 7);
  v54 = xmmword_1000B1580;
  *(_OWORD *)(v45 + 16) = xmmword_1000B1580;
  *(_QWORD *)(v45 + 32) = 0xD00000000000002ALL;
  *(_QWORD *)(v45 + 40) = 0x80000001000BD060;
  strcpy((char *)(v45 + 48), "EnableButton");
  *(_BYTE *)(v45 + 61) = 0;
  *(_WORD *)(v45 + 62) = -5120;
  v46 = v38;
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v45);
  v48 = (id)HKUIJoinStringsForAutomationIdentifier(isa);

  objc_msgSend(v46, "setAccessibilityIdentifier:", v48);
  v49 = swift_allocObject(v44, 64, 7);
  *(_OWORD *)(v49 + 16) = v54;
  *(_QWORD *)(v49 + 32) = 0xD00000000000002ALL;
  *(_QWORD *)(v49 + 40) = 0x80000001000BD060;
  strcpy((char *)(v49 + 48), "DisableButton");
  *(_WORD *)(v49 + 62) = -4864;
  v50 = v41;
  v51 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v49);
  v52 = (id)HKUIJoinStringsForAutomationIdentifier(v51);

  objc_msgSend(v50, "setAccessibilityIdentifier:", v52);
  swift_unknownObjectRelease(v55);
  return v27;
}

void sub_100081424()
{
  uint64_t v0;
  void *v1;
  void *v2;
  uint64_t Strong;
  uint64_t v4;
  _QWORD v5[6];

  v1 = *(void **)(v0 + OBJC_IVAR____TtC6Health30CloudSyncWelcomeViewController_cloudSyncControl);
  v5[4] = sub_100081500;
  v5[5] = 0;
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 1107296256;
  v5[2] = sub_10000666C;
  v5[3] = &unk_1000E1398;
  v2 = _Block_copy(v5);
  objc_msgSend(v1, "enableCloudSyncWithCompletion:", v2);
  _Block_release(v2);
  Strong = swift_unknownObjectWeakLoadStrong(v0 + OBJC_IVAR____TtC6Health30CloudSyncWelcomeViewController_delegate);
  if (Strong)
  {
    v4 = Strong;
    sub_1000747F4(1);
    swift_unknownObjectRelease(v4);
  }
  LOWORD(v5[0]) = 1288;
  sub_100046898();
  AnalyticsSubmitting.submit()();
}

uint64_t sub_100081500(char a1, uint64_t a2)
{
  return sub_100081600(a1, a2, "Enable cloud sync success %{BOOL}d, error %{public}s");
}

void sub_100081518()
{
  uint64_t v0;
  void *v1;
  void *v2;
  uint64_t Strong;
  uint64_t v4;
  _QWORD v5[6];

  v1 = *(void **)(v0 + OBJC_IVAR____TtC6Health30CloudSyncWelcomeViewController_cloudSyncControl);
  v5[4] = sub_1000815F4;
  v5[5] = 0;
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 1107296256;
  v5[2] = sub_10000666C;
  v5[3] = &unk_1000E1370;
  v2 = _Block_copy(v5);
  objc_msgSend(v1, "disableCloudSyncWithCompletion:", v2);
  _Block_release(v2);
  Strong = swift_unknownObjectWeakLoadStrong(v0 + OBJC_IVAR____TtC6Health30CloudSyncWelcomeViewController_delegate);
  if (Strong)
  {
    v4 = Strong;
    sub_1000747F4(0);
    swift_unknownObjectRelease(v4);
  }
  LOWORD(v5[0]) = 1544;
  sub_100046898();
  AnalyticsSubmitting.submit()();
}

uint64_t sub_1000815F4(char a1, uint64_t a2)
{
  return sub_100081600(a1, a2, "Disable cloud sync success %{BOOL}d, error %{public}s");
}

uint64_t sub_100081600(char a1, uint64_t a2, const char *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v22;
  const char *v23;
  uint64_t v24;
  uint64_t v25;

  v6 = type metadata accessor for Logger(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = __chkstk_darwin(v6);
  v10 = (char *)&v22 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  static Logger.cloudSync.getter(v8);
  swift_errorRetain(a2);
  v11 = swift_errorRetain(a2);
  v12 = Logger.logObject.getter(v11);
  v13 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v12, v13))
  {
    v14 = swift_slowAlloc(18, -1);
    v23 = a3;
    v15 = v14;
    v16 = swift_slowAlloc(32, -1);
    v25 = v16;
    *(_DWORD *)v15 = 67109378;
    LODWORD(v24) = a1 & 1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v24, (char *)&v24 + 4, v15 + 4, v15 + 8);
    *(_WORD *)(v15 + 8) = 2082;
    v24 = a2;
    swift_errorRetain(a2);
    sub_100081960(0);
    v18 = String.init<A>(describing:)(&v24, v17);
    v20 = v19;
    v24 = sub_100012B20(v18, v19, &v25);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v24, &v25, v15 + 10, v15 + 18);
    swift_bridgeObjectRelease(v20);
    swift_errorRelease(a2);
    swift_errorRelease(a2);
    _os_log_impl((void *)&_mh_execute_header, v12, v13, v23, (uint8_t *)v15, 0x12u);
    swift_arrayDestroy(v16, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v16, -1, -1);
    swift_slowDealloc(v15, -1, -1);
  }
  else
  {
    swift_errorRelease(a2);
    swift_errorRelease(a2);
  }

  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v10, v6);
}

uint64_t sub_100081808(void *a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t))
{
  id v7;
  uint64_t v8;
  _QWORD v10[4];

  swift_unknownObjectRetain(a3);
  v7 = a1;
  _bridgeAnyObjectToAny(_:)(v10, a3);
  v8 = swift_unknownObjectRelease(a3);
  a4(v8);

  return _s6Health23OpenSleepScheduleIntentVwxx_0(v10);
}

id sub_1000818D0()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for CloudSyncWelcomeViewController();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for CloudSyncWelcomeViewController()
{
  return objc_opt_self(_TtC6Health30CloudSyncWelcomeViewController);
}

uint64_t sub_100081958()
{
  return 8;
}

void sub_100081960(uint64_t a1)
{
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_1000EC718)
  {
    v2 = sub_100013960();
    v3 = type metadata accessor for Optional(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_1000EC718);
  }
}

void sub_1000819BC(char a1)
{
  __asm { BR              X11 }
}

uint64_t sub_100081A08(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_100081AE4 + 4 * byte_1000B5288[a2]))(0x65756E69746E6F43);
}

uint64_t sub_100081AE4(uint64_t a1)
{
  uint64_t v1;
  char v2;

  if (a1 == 0x65756E69746E6F43 && v1 == 0xE800000000000000)
    v2 = 1;
  else
    v2 = _stringCompareWithSmolCheck(_:_:expecting:)(a1, v1, 0x65756E69746E6F43, 0xE800000000000000, 0);
  swift_bridgeObjectRelease(v1);
  swift_bridgeObjectRelease(0xE800000000000000);
  return v2 & 1;
}

void sub_100081C1C(char a1)
{
  __asm { BR              X11 }
}

uint64_t sub_100081C68(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_100081D38 + 4 * byte_1000B5299[a2]))(0x656D6F636C6557);
}

uint64_t sub_100081D38(uint64_t a1)
{
  uint64_t v1;
  char v2;

  if (a1 == 0x656D6F636C6557 && v1 == 0xE700000000000000)
    v2 = 1;
  else
    v2 = _stringCompareWithSmolCheck(_:_:expecting:)(a1, v1, 0x656D6F636C6557, 0xE700000000000000, 0);
  swift_bridgeObjectRelease(v1);
  swift_bridgeObjectRelease(0xE700000000000000);
  return v2 & 1;
}

void sub_100081E3C(char a1)
{
  __asm { BR              X12 }
}

uint64_t sub_100081E8C(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_100081F2C + 4 * byte_1000B52A9[a2]))(0xD000000000000023);
}

uint64_t sub_100081F2C(uint64_t a1)
{
  unint64_t v1;
  unint64_t v2;
  char v3;

  v2 = 0x80000001000B7930;
  if (a1 == 0xD000000000000023 && v1 == 0x80000001000B7930)
  {
    v3 = 1;
    v2 = v1;
  }
  else
  {
    v3 = _stringCompareWithSmolCheck(_:_:expecting:)(a1, v1, 0xD000000000000023, 0x80000001000B7930, 0);
  }
  swift_bridgeObjectRelease(v1);
  swift_bridgeObjectRelease(v2);
  return v3 & 1;
}

uint64_t sub_100082000(char a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v9;

  v2 = 8 * a1;
  v3 = *(_QWORD *)&aAlltrendsharin_0[v2];
  v4 = *(_QWORD *)&aAlltrendsharin_0[v2 + 24];
  v5 = 8 * a2;
  v6 = *(_QWORD *)&aAlltrendsharin_0[v5];
  v7 = *(_QWORD *)&aAlltrendsharin_0[v5 + 24];
  if (v3 == v6 && v4 == v7)
    v9 = 1;
  else
    v9 = _stringCompareWithSmolCheck(_:_:expecting:)(v3, v4, v6, *(_QWORD *)&aAlltrendsharin_0[8 * a2 + 24], 0);
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(v7);
  return v9 & 1;
}

uint64_t sub_100082084(char a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v9;

  v2 = a1;
  v3 = *(_QWORD *)&aSummary_2[v2 * 8];
  v4 = qword_1000B5498[v2];
  v5 = a2;
  v6 = *(_QWORD *)&aSummary_2[v5 * 8];
  v7 = qword_1000B5498[v5];
  if (v3 == v6 && v4 == v7)
    v9 = 1;
  else
    v9 = _stringCompareWithSmolCheck(_:_:expecting:)(v3, v4, v6, qword_1000B5498[a2], 0);
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(v7);
  return v9 & 1;
}

uint64_t sub_100082108()
{
  uint64_t v0;

  return swift_deallocClassInstance(v0, 16, 7);
}

uint64_t type metadata accessor for StubbedDeepLinkCanceler()
{
  return objc_opt_self(_TtC6HealthP33_48C134F37C9CFF6F2EC146BF64C9EDE923StubbedDeepLinkCanceler);
}

uint64_t type metadata accessor for BuddyDataSource(uint64_t a1)
{
  uint64_t result;

  result = qword_1000EF958;
  if (!qword_1000EF958)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for BuddyDataSource);
  return result;
}

uint64_t sub_100082174(uint64_t a1)
{
  const char *v2;

  v2 = "\b";
  return swift_initClassMetadata2(a1, 0, 1, &v2, a1 + qword_1000F1148);
}

uint64_t sub_1000821BC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  void (*v10)(_BYTE *, uint64_t);
  Swift::String v11;
  Swift::String v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _BYTE v26[16];
  _QWORD v27[2];

  v1 = type metadata accessor for UUID(0);
  v2 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  v4 = &v26[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  *(_QWORD *)(v0 + qword_1000EF950) = 0;
  v27[0] = 0;
  v27[1] = 0xE000000000000000;
  _StringGuts.grow(_:)(16);
  swift_bridgeObjectRelease(v27[1]);
  strcpy((char *)v27, "MutableArray<");
  HIWORD(v27[1]) = -4864;
  v6 = UUID.init()(v5);
  v7 = UUID.uuidString.getter(v6);
  v9 = v8;
  v10 = *(void (**)(_BYTE *, uint64_t))(v2 + 8);
  v10(v4, v1);
  v11._countAndFlagsBits = v7;
  v11._object = v9;
  String.append(_:)(v11);
  swift_bridgeObjectRelease(v9);
  v12._countAndFlagsBits = 62;
  v12._object = (void *)0xE100000000000000;
  String.append(_:)(v12);
  v13 = MutableArrayDataSource.init(arrangedSections:identifier:)(_swiftEmptyArrayStorage, v27[0], v27[1]);
  swift_retain_n(v13, 2);
  v14 = sub_1000839B4((uint64_t)&off_1000DB9D0, v13);
  swift_release(v13);
  sub_1000076D8(0, &qword_1000ECA68, (uint64_t (*)(uint64_t))&type metadata accessor for ArrayDataSourceSection, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for _ContiguousArrayStorage);
  v16 = v15;
  v17 = type metadata accessor for ArrayDataSourceSection(0);
  v18 = swift_allocObject(v16, ((*(unsigned __int8 *)(*(_QWORD *)(v17 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v17 - 8) + 80))+ *(_QWORD *)(*(_QWORD *)(v17 - 8) + 72), *(unsigned __int8 *)(*(_QWORD *)(v17 - 8) + 80) | 7);
  *(_OWORD *)(v18 + 16) = xmmword_1000B11F0;
  swift_retain(v13);
  v19 = sub_1000A6048((uint64_t)v14);
  swift_bridgeObjectRelease(v14);
  v21 = UUID.init()(v20);
  v22 = UUID.uuidString.getter(v21);
  v24 = v23;
  v10(v4, v1);
  ArrayDataSourceSection.init(title:arrangedItems:identifier:)(0x7964647542, 0xE500000000000000, v19, v22, v24);
  dispatch thunk of MutableArrayDataSource.replaceAllSections(with:reconfigureOrReloadItemsIfNeeded:)(v18, 1);
  swift_bridgeObjectRelease(v18);
  swift_release_n(v13, 2);
  return v13;
}

void sub_100082404(uint64_t a1)
{
  __asm { BR              X9 }
}

uint64_t sub_100082464()
{
  uint64_t v0;
  uint64_t v1;
  char v2;
  uint64_t v3;
  uint64_t v4;

  swift_bridgeObjectRelease(0xE500000000000000);
  v3 = swift_allocObject(&unk_1000E14A8, 24, 7);
  swift_weakInit(v3 + 16, v1);
  v4 = swift_allocObject(&unk_1000E14D0, 25, 7);
  *(_QWORD *)(v4 + 16) = v3;
  *(_BYTE *)(v4 + 24) = v2;
  return sub_100020CC4(0x7964647542, 0xE500000000000000, 0, (uint64_t)sub_100083B54, v4, v0);
}

uint64_t sub_100082654(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  _BYTE v7[24];

  v4 = a2 + 16;
  swift_beginAccess(a2 + 16, v7, 0, 0);
  result = swift_weakLoadStrong(v4);
  if (result)
  {
    v6 = result;
    sub_1000826C4(a3);
    return swift_release(v6);
  }
  return result;
}

void sub_1000826C4(char a1)
{
  __asm { BR              X10 }
}

void sub_1000826FC(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,int a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  void *v30;
  id v31;
  void *v32;
  id v33;
  id v34;
  uint64_t v35;
  uint64_t v36;
  _UNKNOWN **v37;

  v31 = objc_msgSend(v30, "navigationController");
  if (v31)
  {
    v32 = v31;
    v36 = type metadata accessor for StubbedDeepLinkCanceler();
    v37 = &off_1000E13E8;
    v35 = swift_allocObject(v36, 16, 7);
    v33 = objc_allocWithZone((Class)type metadata accessor for WelcomeViewController());
    v34 = sub_100072040((uint64_t)&v35);
    objc_msgSend(v32, "pushViewController:animated:", v34, 1);

  }
}

void sub_10008287C()
{
  JUMPOUT(0x100082884);
}

void sub_100082914(void *a1, void *a2)
{
  uint64_t *v2;
  uint64_t v5;
  id v6;
  id v7;
  _QWORD *v8;
  void *v9;
  _QWORD *v10;
  id v11;
  id v12;
  _QWORD v13[5];
  _QWORD *v14;

  v5 = *v2;
  v6 = objc_msgSend(objc_allocWithZone((Class)HKHealthStore), "init");
  v7 = objc_msgSend(objc_allocWithZone((Class)HKSharedSummaryCloudSyncManager), "initWithHealthStore:", v6);

  v8 = (_QWORD *)swift_allocObject(&unk_1000E1408, 40, 7);
  v8[2] = a1;
  v8[3] = a2;
  v8[4] = v5;
  v13[4] = sub_100083910;
  v14 = v8;
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 1107296256;
  v13[2] = sub_10008359C;
  v13[3] = &unk_1000E1420;
  v9 = _Block_copy(v13);
  v10 = v14;
  v11 = a1;
  v12 = a2;
  swift_release(v10);
  objc_msgSend(v7, "fetchAccountInfoWithCompletion:", v9);
  _Block_release(v9);

}

uint64_t sub_100082A24(void *a1, uint64_t a2, void *a3, void *a4, uint64_t a5)
{
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _BYTE *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _BYTE *v29;
  void *v30;
  uint64_t v31;
  _BYTE *v32;
  id v33;
  id v34;
  NSObject *v35;
  os_log_type_t v36;
  int v37;
  BOOL v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void *v42;
  unint64_t v43;
  unint64_t v44;
  double v45;
  id v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  NSObject *v52;
  os_log_type_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  unint64_t v62;
  _BYTE *v63;
  id v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  _BYTE *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  _BYTE *v76;
  uint64_t v77;
  NSString v78;
  id v79;
  NSString v80;
  id v81;
  _BYTE *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  id v86;
  void *v87;
  void *v88;
  _QWORD *v89;
  void *v90;
  void *v91;
  void *v92;
  void *v93;
  _QWORD *v94;
  uint64_t v95;
  id v96;
  id v97;
  id v98;
  uint64_t v99;
  _BYTE *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  unint64_t v104;
  _BYTE *v105;
  uint64_t v106;
  _BYTE v107[4];
  int v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  _BYTE *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  _BYTE *v116;
  void *v117;
  void *v118;
  _BYTE *v119;
  uint64_t v120;
  _BYTE *v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  _BYTE *v125;
  _BYTE *v126;
  _BYTE *v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  id v131;
  uint64_t aBlock[5];
  _QWORD *v133;
  uint64_t v134;
  uint64_t v135;

  v120 = a5;
  v118 = a4;
  v117 = a3;
  v115 = type metadata accessor for DispatchWorkItemFlags(0);
  v7 = *(_QWORD *)(v115 - 8);
  __chkstk_darwin(v115);
  v9 = &v107[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v10 = type metadata accessor for DispatchQoS(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v119 = &v107[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_1000076D8(0, (unint64_t *)&unk_1000ECA90, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
  __chkstk_darwin(v13);
  v121 = &v107[-v14];
  v15 = type metadata accessor for URL(0);
  v129 = *(_QWORD *)(v15 - 8);
  v130 = v15;
  v16 = __chkstk_darwin(v15);
  v116 = &v107[-((v17 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v16);
  v125 = &v107[-v18];
  sub_1000076D8(0, &qword_1000EF9C0, (uint64_t (*)(uint64_t))&type metadata accessor for ContactDeepLinkingParameter, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
  __chkstk_darwin(v19);
  v21 = &v107[-v20];
  v22 = type metadata accessor for SharingInviteFlowURLData(0);
  v123 = *(_QWORD *)(v22 - 8);
  v124 = v22;
  __chkstk_darwin(v22);
  v127 = &v107[-((v23 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v128 = type metadata accessor for ContactDeepLinkingParameter(0);
  v122 = *(_QWORD *)(v128 - 8);
  __chkstk_darwin(v128);
  v126 = &v107[-((v24 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v25 = type metadata accessor for Logger(0);
  v26 = *(_QWORD *)(v25 - 8);
  v27 = __chkstk_darwin(v25);
  v29 = &v107[-((v28 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v30 = (void *)__chkstk_darwin(v27);
  v32 = &v107[-v31];
  v131 = v30;
  if (a1)
  {
    v114 = v26;
    v110 = v11;
    v33 = a1;
    static Logger.general.getter(v33);
    v34 = v33;
    v35 = Logger.logObject.getter(v34);
    v36 = static os_log_type_t.default.getter();
    v37 = v36;
    v38 = os_log_type_enabled(v35, v36);
    v113 = v7;
    v112 = v9;
    v111 = v10;
    if (v38)
    {
      v39 = swift_slowAlloc(22, -1);
      v108 = v37;
      v40 = v39;
      v109 = swift_slowAlloc(64, -1);
      aBlock[0] = v109;
      *(_DWORD *)v40 = 136315394;
      v41 = _typeName(_:qualified:)(v120, 0);
      v42 = v34;
      v44 = v43;
      v134 = sub_100012B20(v41, v43, aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v134, &v135, v40 + 4, v40 + 12);
      *(_QWORD *)&v45 = swift_bridgeObjectRelease(v44).n128_u64[0];
      *(_WORD *)(v40 + 12) = 2080;
      v120 = v40 + 14;
      v46 = objc_msgSend(v42, "emailAddress", v45);
      v47 = static String._unconditionallyBridgeFromObjectiveC(_:)(v46);
      v49 = v48;

      v34 = v42;
      v134 = sub_100012B20(v47, v49, aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v134, &v135, v120, v40 + 22);

      swift_bridgeObjectRelease(v49);
      _os_log_impl((void *)&_mh_execute_header, v35, (os_log_type_t)v108, "[%s] Fetched cloudSyncAccountInfo identifier: %s", (uint8_t *)v40, 0x16u);
      v50 = v109;
      swift_arrayDestroy(v109, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v50, -1, -1);
      swift_slowDealloc(v40, -1, -1);

    }
    else
    {

    }
    (*(void (**)(_BYTE *, id))(v114 + 8))(v29, v131);
    v63 = v126;
    v64 = objc_msgSend(v34, "emailAddress");
    v65 = static String._unconditionallyBridgeFromObjectiveC(_:)(v64);
    v67 = v66;

    ContactDeepLinkingParameter.init(value:)(v65, v67);
    v68 = v122;
    v69 = v128;
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v122 + 16))(v21, v63, v128);
    (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v68 + 56))(v21, 0, 1, v69);
    v70 = v127;
    v71 = SharingInviteFlowURLData.init(contactData:)(v21);
    v72 = (uint64_t)v121;
    SharingInviteFlowURLData.url()(v71);
    v73 = v129;
    v74 = v130;
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v129 + 48))(v72, 1, v130) == 1)
    {

      (*(void (**)(_BYTE *, uint64_t))(v123 + 8))(v70, v124);
      (*(void (**)(_BYTE *, uint64_t))(v68 + 8))(v63, v69);
      return sub_10001C7DC(v72);
    }
    else
    {
      v76 = v125;
      (*(void (**)(_BYTE *, uint64_t, uint64_t))(v73 + 32))(v125, v72, v74);
      v77 = v73;
      v78 = String._bridgeToObjectiveC()();
      v79 = objc_msgSend((id)objc_opt_self(NSBundle), "bundleWithIdentifier:", v78);

      v80 = String._bridgeToObjectiveC()();
      v81 = objc_msgSend((id)objc_opt_self(UIImage), "imageNamed:inBundle:", v80, v79);

      v82 = v116;
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v77 + 16))(v116, v76, v74);
      v131 = v81;
      v83 = static String.defaultURLProviderSubtitle.getter();
      v85 = v84;
      v86 = objc_allocWithZone((Class)type metadata accessor for HealthURLActivityItemProvider(0));
      v87 = (void *)HealthURLActivityItemProvider.init(title:url:image:thumbnailImage:subtitle:)(0x532068746C616548, 0xEE00676E69726168, v82, v81, 0, v83, v85);
      sub_100023BC8();
      v88 = (void *)static OS_dispatch_queue.main.getter();
      v89 = (_QWORD *)swift_allocObject(&unk_1000E1458, 40, 7);
      v90 = v34;
      v91 = v117;
      v89[2] = v87;
      v89[3] = v91;
      v92 = v118;
      v89[4] = v118;
      aBlock[4] = (uint64_t)sub_100083950;
      v133 = v89;
      aBlock[0] = (uint64_t)_NSConcreteStackBlock;
      aBlock[1] = 1107296256;
      aBlock[2] = (uint64_t)sub_100006988;
      aBlock[3] = (uint64_t)&unk_1000E1470;
      v93 = _Block_copy(aBlock);
      v94 = v133;
      v95 = v68;
      v96 = v87;
      v97 = v91;
      v98 = v92;
      v99 = swift_release(v94);
      v100 = v119;
      static DispatchQoS.unspecified.getter(v99);
      aBlock[0] = (uint64_t)_swiftEmptyArrayStorage;
      v101 = sub_100013198((unint64_t *)&qword_1000EDBE0, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
      sub_1000076D8(0, (unint64_t *)&qword_1000ED920, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Array);
      v103 = v102;
      v104 = sub_100013C8C();
      v105 = v112;
      v106 = v115;
      dispatch thunk of SetAlgebra.init<A>(_:)(aBlock, v103, v104, v115, v101);
      OS_dispatch_queue.async(group:qos:flags:execute:)(0, v100, v105, v93);
      _Block_release(v93);

      (*(void (**)(_BYTE *, uint64_t))(v113 + 8))(v105, v106);
      (*(void (**)(_BYTE *, uint64_t))(v110 + 8))(v100, v111);
      (*(void (**)(_BYTE *, uint64_t))(v129 + 8))(v125, v130);
      (*(void (**)(_BYTE *, uint64_t))(v123 + 8))(v127, v124);
      return (*(uint64_t (**)(_BYTE *, uint64_t))(v95 + 8))(v126, v128);
    }
  }
  else
  {
    static Logger.general.getter(v30);
    swift_errorRetain(a2);
    v51 = swift_errorRetain(a2);
    v52 = Logger.logObject.getter(v51);
    v53 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v52, v53))
    {
      v54 = swift_slowAlloc(22, -1);
      v55 = swift_slowAlloc(64, -1);
      aBlock[0] = v55;
      *(_DWORD *)v54 = 136315394;
      v56 = _typeName(_:qualified:)(v120, 0);
      v58 = v57;
      v134 = sub_100012B20(v56, v57, aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v134, &v135, v54 + 4, v54 + 12);
      swift_bridgeObjectRelease(v58);
      *(_WORD *)(v54 + 12) = 2080;
      v134 = a2;
      swift_errorRetain(a2);
      sub_1000076D8(0, (unint64_t *)&qword_1000EC718, (uint64_t (*)(uint64_t))sub_100013960, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
      v60 = String.init<A>(reflecting:)(&v134, v59);
      v62 = v61;
      v134 = sub_100012B20(v60, v61, aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v134, &v135, v54 + 14, v54 + 22);
      swift_bridgeObjectRelease(v62);
      swift_errorRelease(a2);
      swift_errorRelease(a2);
      _os_log_impl((void *)&_mh_execute_header, v52, v53, "[%s] No cloudSyncAccountInfo was fetched: %s", (uint8_t *)v54, 0x16u);
      swift_arrayDestroy(v55, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v55, -1, -1);
      swift_slowDealloc(v54, -1, -1);
    }
    else
    {
      swift_errorRelease(a2);
      swift_errorRelease(a2);
    }

    return (*(uint64_t (**)(_BYTE *, id))(v26 + 8))(v32, v131);
  }
}

void sub_100083458(void *a1, uint64_t a2, void *a3)
{
  uint64_t v6;
  uint64_t v7;
  id v8;
  id v9;
  Class isa;
  id v11;
  void *v12;
  id v13;

  sub_10008395C();
  v7 = swift_allocObject(v6, 64, 7);
  *(_OWORD *)(v7 + 16) = xmmword_1000B11F0;
  *(_QWORD *)(v7 + 56) = type metadata accessor for HealthURLActivityItemProvider(0);
  *(_QWORD *)(v7 + 32) = a1;
  v8 = objc_allocWithZone((Class)UIActivityViewController);
  v9 = a1;
  isa = Array._bridgeToObjectiveC()().super.isa;
  v13 = objc_msgSend(v8, "initWithActivityItems:applicationActivities:", isa, 0, swift_bridgeObjectRelease(v7).n128_f64[0]);

  v11 = objc_msgSend(v13, "popoverPresentationController");
  if (v11)
  {
    v12 = v11;
    objc_msgSend(v11, "setSourceView:", a2);

  }
  objc_msgSend(a3, "presentViewController:animated:completion:", v13, 1, 0);

}

void sub_100083570()
{
  _swift_stdlib_reportUnimplementedInitializer("Health.BuddyDataSource", 22, "init(arrangedSections:identifier:)", 34, 0);
  __break(1u);
}

void sub_10008359C(uint64_t a1, void *a2, void *a3)
{
  uint64_t v5;
  void (*v6)(void *, void *);
  id v7;
  id v8;

  v6 = *(void (**)(void *, void *))(a1 + 32);
  v5 = *(_QWORD *)(a1 + 40);
  swift_retain(v5);
  v8 = a2;
  v7 = a3;
  v6(a2, a3);
  swift_release(v5);

}

uint64_t sub_100083610()
{
  uint64_t v0;

  return swift_release(*(_QWORD *)(v0 + qword_1000EF950));
}

uint64_t sub_100083620()
{
  uint64_t v0;

  v0 = MutableArrayDataSource.deinit();
  swift_release(*(_QWORD *)(v0 + qword_1000EF950));
  return swift_deallocClassInstance(v0, 24, 7);
}

uint64_t sub_10008365C()
{
  return type metadata accessor for BuddyDataSource(0);
}

uint64_t sub_100083664@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  v2 = enum case for SummarySharingSetupAnalyticsBaseEvent.OnboardingLocation.summaryTab(_:);
  v3 = type metadata accessor for SummarySharingSetupAnalyticsBaseEvent.OnboardingLocation(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 104))(a1, v2, v3);
}

uint64_t sub_1000836A8()
{
  _QWORD *v0;
  _QWORD *v1;
  _BYTE v3[24];

  v1 = (_QWORD *)(*v0 + qword_1000EF950);
  swift_beginAccess(v1, v3, 0, 0);
  return swift_retain(*v1);
}

uint64_t sub_1000836F4(uint64_t a1)
{
  _QWORD *v1;
  uint64_t *v3;
  uint64_t v4;
  _BYTE v6[24];

  v3 = (uint64_t *)(*v1 + qword_1000EF950);
  swift_beginAccess(v3, v6, 1, 0);
  v4 = *v3;
  *v3 = a1;
  return swift_release(v4);
}

void *sub_100083748(uint64_t a1)
{
  _QWORD *v1;

  swift_beginAccess(*v1 + qword_1000EF950, a1, 33, 0);
  return &j__swift_endAccess;
}

unint64_t sub_1000837A0@<X0>(uint64_t a1@<X3>, uint64_t *a2@<X8>)
{
  swift_getWitnessTable(&unk_1000B539C, a1);
  return sub_100020F30(a2);
}

uint64_t sub_10008380C(uint64_t a1, uint64_t a2)
{
  uint64_t WitnessTable;

  WitnessTable = swift_getWitnessTable(&unk_1000B539C, a2);
  return sub_100020F3C(a1, a2, WitnessTable);
}

uint64_t sub_10008385C(uint64_t a1)
{
  uint64_t result;

  *(_QWORD *)(a1 + 8) = sub_100013198(&qword_1000EF9A8, type metadata accessor for BuddyDataSource, (uint64_t)&unk_1000B5328);
  result = sub_100013198(&qword_1000EF9B0, type metadata accessor for BuddyDataSource, (uint64_t)&unk_1000B5358);
  *(_QWORD *)(a1 + 24) = result;
  return result;
}

uint64_t sub_1000838B8()
{
  return sub_100013198(&qword_1000EF9B8, type metadata accessor for BuddyDataSource, (uint64_t)&unk_1000B5380);
}

uint64_t sub_1000838E4()
{
  uint64_t v0;

  return swift_deallocObject(v0, 40, 7);
}

uint64_t sub_100083910(void *a1, uint64_t a2)
{
  uint64_t v2;

  return sub_100082A24(a1, a2, *(void **)(v2 + 16), *(void **)(v2 + 24), *(_QWORD *)(v2 + 32));
}

uint64_t sub_10008391C()
{
  id *v0;

  return swift_deallocObject(v0, 40, 7);
}

void sub_100083950()
{
  uint64_t v0;

  sub_100083458(*(void **)(v0 + 16), *(_QWORD *)(v0 + 24), *(void **)(v0 + 32));
}

void sub_10008395C()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1000EF9C8)
  {
    v0 = type metadata accessor for _ContiguousArrayStorage(0, (char *)&type metadata for Any + 8);
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1000EF9C8);
  }
}

_QWORD *sub_1000839B4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  int64_t v9;
  _QWORD *v10;
  char *v11;
  char v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v16;
  char v17;
  _QWORD *v18;

  v3 = v2;
  v16 = a2;
  v5 = type metadata accessor for ContentConfigurationItem(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *(_QWORD *)(a1 + 16);
  v10 = _swiftEmptyArrayStorage;
  if (v9)
  {
    v18 = _swiftEmptyArrayStorage;
    sub_10007FE98(0, v9, 0);
    v10 = v18;
    v11 = (char *)(a1 + 32);
    while (1)
    {
      v12 = *v11++;
      v17 = v12;
      sub_100082404((uint64_t)&v17);
      if (v3)
        break;
      v3 = 0;
      v18 = v10;
      v14 = v10[2];
      v13 = v10[3];
      if (v14 >= v13 >> 1)
      {
        sub_10007FE98(v13 > 1, v14 + 1, 1);
        v10 = v18;
      }
      v10[2] = v14 + 1;
      (*(void (**)(unint64_t, char *, uint64_t))(v6 + 32))((unint64_t)v10+ ((*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80))+ *(_QWORD *)(v6 + 72) * v14, v8, v5);
      if (!--v9)
        return v10;
    }
    swift_release(v10);
  }
  return v10;
}

uint64_t sub_100083B0C()
{
  uint64_t v0;

  swift_weakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100083B30()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 25, 7);
}

uint64_t sub_100083B54(uint64_t a1)
{
  uint64_t v1;

  return sub_100082654(a1, *(_QWORD *)(v1 + 16), *(_BYTE *)(v1 + 24));
}

void sub_100083B68(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_100083B98(a1, a2, a3, (uint64_t)"init(_:identifier:)", 19);
}

void sub_100083B80(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_100083B98(a1, a2, a3, (uint64_t)"init(arrangedSections:identifier:)", 34);
}

void sub_100083B98(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _swift_stdlib_reportUnimplementedInitializer("Health.LoadingPersonalizedHighlightsDataSource", 46, a4, a5, 0);
  __break(1u);
}

uint64_t sub_100083BC0()
{
  return type metadata accessor for LoadingPersonalizedHighlightsDataSource(0);
}

uint64_t sub_100083BC8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  v0 = type metadata accessor for LayoutConfiguration(0);
  v1 = *(_QWORD *)(v0 - 8);
  v2 = __chkstk_darwin(v0);
  v4 = (char *)&v8 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = static LayoutConfiguration.card.getter(v2);
  v6 = LayoutConfiguration.layoutSection.getter(v5);
  (*(void (**)(char *, uint64_t))(v1 + 8))(v4, v0);
  return v6;
}

uint64_t sub_100083C58@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;

  v2 = type metadata accessor for UIListContentConfiguration(0);
  __chkstk_darwin(v2);
  v4 = (char *)&v11 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = ForYouSectionKind.localizedTitle.getter(0);
  v7 = v6;
  static UIListContentConfiguration.extraProminentInsetGroupedHeader()(v5);
  v8 = type metadata accessor for HeaderItem(0);
  swift_allocObject(v8, *(unsigned int *)(v8 + 48), *(unsigned __int16 *)(v8 + 52));
  v9 = HeaderItem.init(title:buttonText:buttonWasTapped:configuration:automationIdentifier:)(v5, v7, 0, 0, 0, 0, v4, 0, 0);
  a1[3] = v8;
  result = sub_100013198((unint64_t *)&unk_1000ED940, (uint64_t (*)(uint64_t))&type metadata accessor for HeaderItem, (uint64_t)&protocol conformance descriptor for HeaderItem);
  a1[4] = result;
  *a1 = v9;
  return result;
}

uint64_t type metadata accessor for InternalNotificationsDataSource(uint64_t a1)
{
  uint64_t result;

  result = qword_1000EFA28;
  if (!qword_1000EFA28)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for InternalNotificationsDataSource);
  return result;
}

uint64_t sub_100083D8C(uint64_t a1)
{
  _BYTE v2[8];

  return swift_initClassMetadata2(a1, 0, 0, v2, a1 + qword_1000F1168);
}

uint64_t sub_100083DC8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  id v23;
  void (*v24)(_BYTE *, _QWORD);
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  char *v32;
  char *v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  void (*v52)(char *, uint64_t);
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  void *v56;
  void *v57;
  Swift::String v58;
  Swift::String v59;
  uint64_t v60;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  void (*v72)(char *, uint64_t);
  uint64_t v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  __int128 v77;
  uint64_t v78;
  _BYTE v79[32];
  uint64_t v80;
  unint64_t v81;
  uint64_t v82;
  void *v83;

  v0 = type metadata accessor for SectionedDataSourceContainerViewType(0);
  v75 = *(_QWORD *)(v0 - 8);
  v76 = v0;
  __chkstk_darwin(v0);
  v74 = (char *)&v62 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000076D8(0, &qword_1000ECA60, (uint64_t (*)(uint64_t))&type metadata accessor for UIBackgroundConfiguration, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
  __chkstk_darwin(v2);
  v71 = (char *)&v62 - v3;
  v70 = type metadata accessor for CellDeselectionBehavior(0);
  v69 = *(_QWORD *)(v70 - 8);
  __chkstk_darwin(v70);
  v68 = (char *)&v62 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000076D8(0, &qword_1000ECCD8, (uint64_t (*)(uint64_t))&type metadata accessor for UICellAccessory.LayoutDimension, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
  __chkstk_darwin(v5);
  v7 = (char *)&v62 - v6;
  v67 = type metadata accessor for UICellAccessory.DisclosureIndicatorOptions(0);
  v66 = *(_QWORD *)(v67 - 8);
  __chkstk_darwin(v67);
  v9 = (char *)&v62 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for UICellAccessory.DisplayedState(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = (char *)&v62 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for UUID(0);
  v15 = *(_QWORD *)(v14 - 8);
  __chkstk_darwin(v14);
  v17 = (char *)&v62 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v78 = type metadata accessor for ContentConfigurationItem(0);
  v73 = *(_QWORD *)(v78 - 8);
  v18 = __chkstk_darwin(v78);
  v65 = (char *)&v62 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = UUID.init()(v18);
  v64 = UUID.uuidString.getter(v20);
  v63 = v21;
  v72 = *(void (**)(char *, uint64_t))(v15 + 8);
  v72(v17, v14);
  v82 = type metadata accessor for UIListContentConfiguration(0);
  v83 = &protocol witness table for UIListContentConfiguration;
  v22 = sub_100007E0C(&v80);
  static UIListContentConfiguration.cell()(v22);
  UIListContentConfiguration.text.setter(0xD000000000000011, 0x80000001000BC0D0);
  v23 = objc_msgSend((id)objc_opt_self(UIColor), "blackColor");
  v24 = (void (*)(_BYTE *, _QWORD))UIListContentConfiguration.textProperties.modify(v79);
  UIListContentConfiguration.TextProperties.color.setter(v23);
  v24(v79, 0);
  sub_1000076D8(0, &qword_1000ECCE0, (uint64_t (*)(uint64_t))&type metadata accessor for UICellAccessory, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for _ContiguousArrayStorage);
  v26 = v25;
  v27 = type metadata accessor for UICellAccessory(0);
  v28 = swift_allocObject(v26, ((*(unsigned __int8 *)(*(_QWORD *)(v27 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v27 - 8) + 80))+ *(_QWORD *)(*(_QWORD *)(v27 - 8) + 72), *(unsigned __int8 *)(*(_QWORD *)(v27 - 8) + 80) | 7);
  v77 = xmmword_1000B11F0;
  *(_OWORD *)(v28 + 16) = xmmword_1000B11F0;
  (*(void (**)(char *, _QWORD, uint64_t))(v11 + 104))(v13, enum case for UICellAccessory.DisplayedState.always(_:), v10);
  v29 = type metadata accessor for UICellAccessory.LayoutDimension(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v29 - 8) + 56))(v7, 1, 1, v29);
  UICellAccessory.DisclosureIndicatorOptions.init(isHidden:reservedLayoutWidth:tintColor:)(2, v7, 0);
  static UICellAccessory.disclosureIndicator(displayed:options:)(v13, v9);
  (*(void (**)(char *, uint64_t))(v66 + 8))(v9, v67);
  (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  v30 = v68;
  (*(void (**)(char *, _QWORD, uint64_t))(v69 + 104))(v68, enum case for CellDeselectionBehavior.default(_:), v70);
  v31 = type metadata accessor for UIBackgroundConfiguration(0);
  v32 = v71;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v31 - 8) + 56))(v71, 1, 1, v31);
  v33 = v74;
  (*(void (**)(char *, _QWORD, uint64_t))(v75 + 104))(v74, enum case for SectionedDataSourceContainerViewType.collectionView(_:), v76);
  v34 = v65;
  ContentConfigurationItem.init(uniqueIdentifier:contentConfiguration:cellAccessories:cellSelectionHandler:deselectionBehavior:backgroundConfiguration:updateContentConfigurationHandler:container:automationIdentifier:)(v64, v63, &v80, v28, sub_100084464, 0, v30, v32, 0, 0, v33, 0, 0);
  sub_1000076D8(0, &qword_1000ECA68, (uint64_t (*)(uint64_t))&type metadata accessor for ArrayDataSourceSection, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for _ContiguousArrayStorage);
  v36 = v35;
  v37 = type metadata accessor for ArrayDataSourceSection(0);
  v38 = swift_allocObject(v36, ((*(unsigned __int8 *)(*(_QWORD *)(v37 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v37 - 8) + 80))+ *(_QWORD *)(*(_QWORD *)(v37 - 8) + 72), *(unsigned __int8 *)(*(_QWORD *)(v37 - 8) + 80) | 7);
  *(_OWORD *)(v38 + 16) = v77;
  sub_1000076D8(0, (unint64_t *)&qword_1000ECA70, (uint64_t (*)(uint64_t))sub_100013434, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for _ContiguousArrayStorage);
  v40 = swift_allocObject(v39, 72, 7);
  *(_OWORD *)(v40 + 16) = v77;
  v41 = v78;
  *(_QWORD *)(v40 + 56) = v78;
  *(_QWORD *)(v40 + 64) = sub_100013198(&qword_1000ECA80, (uint64_t (*)(uint64_t))&type metadata accessor for ContentConfigurationItem, (uint64_t)&protocol conformance descriptor for ContentConfigurationItem);
  v42 = sub_100007E0C((_QWORD *)(v40 + 32));
  v43 = v73;
  v44 = v34;
  v45 = (*(uint64_t (**)(_QWORD *, char *, uint64_t))(v73 + 16))(v42, v34, v41);
  v46 = UUID.init()(v45);
  v47 = UUID.uuidString.getter(v46);
  v49 = v48;
  v50 = v14;
  v51 = v14;
  v52 = v72;
  v72(v17, v51);
  v53 = ArrayDataSourceSection.init(title:arrangedItems:identifier:)(0x6163696669746F4ELL, 0xED0000736E6F6974, v40, v47, v49);
  v80 = 0x3C53447961727241;
  v81 = 0xE800000000000000;
  v54 = UUID.init()(v53);
  v55 = UUID.uuidString.getter(v54);
  v57 = v56;
  v52(v17, v50);
  v58._countAndFlagsBits = v55;
  v58._object = v57;
  String.append(_:)(v58);
  swift_bridgeObjectRelease(v57);
  v59._countAndFlagsBits = 62;
  v59._object = (void *)0xE100000000000000;
  String.append(_:)(v59);
  v60 = ArrayDataSource.init(arrangedSections:identifier:)(v38, v80, v81);
  (*(void (**)(char *, uint64_t))(v43 + 8))(v44, v78);
  return v60;
}

void sub_100084464(void *a1)
{
  Class v2;
  id v3;
  void *v4;
  id v5;
  void *v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  _OWORD v14[6];
  uint64_t v15;

  sub_100068820(objc_msgSend(a1, "resolvedHealthStore"), (uint64_t)v14);
  v11 = v14[4];
  v12 = v14[5];
  v13 = v15;
  v7 = v14[0];
  v8 = v14[1];
  v9 = v14[2];
  v10 = v14[3];
  sub_1000846B8(0);
  v3 = objc_allocWithZone(v2);
  sub_1000695E4(v14);
  v4 = (void *)UIHostingController.init(rootView:)(&v7);
  v5 = objc_msgSend(a1, "navigationController", v7, v8, v9, v10, v11, v12, v13);
  if (v5)
  {
    v6 = v5;
    objc_msgSend(v5, "pushViewController:animated:", v4, 1);
    sub_100084754((uint64_t)v14);

  }
  else
  {
    sub_100084754((uint64_t)v14);
  }

}

void sub_100084540(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_100084570(a1, a2, a3, (uint64_t)"init(_:identifier:)", 19);
}

void sub_100084558(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_100084570(a1, a2, a3, (uint64_t)"init(arrangedSections:identifier:)", 34);
}

void sub_100084570(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _swift_stdlib_reportUnimplementedInitializer("Health.InternalNotificationsDataSource", 38, a4, a5, 0);
  __break(1u);
}

uint64_t sub_100084598()
{
  return type metadata accessor for InternalNotificationsDataSource(0);
}

unint64_t sub_1000845A0@<X0>(uint64_t a1@<X3>, uint64_t *a2@<X8>)
{
  swift_getWitnessTable(&unk_1000B55E0, a1);
  return sub_1000213F0(a2);
}

uint64_t sub_10008460C(uint64_t a1, uint64_t a2)
{
  uint64_t WitnessTable;

  WitnessTable = swift_getWitnessTable(&unk_1000B55E0, a2);
  return sub_100020F3C(a1, a2, WitnessTable);
}

uint64_t sub_10008465C(uint64_t a1)
{
  uint64_t result;

  *(_QWORD *)(a1 + 8) = sub_100013198(&qword_1000EFA78, type metadata accessor for InternalNotificationsDataSource, (uint64_t)&unk_1000B5588);
  result = sub_100013198(&qword_1000EFA80, type metadata accessor for InternalNotificationsDataSource, (uint64_t)&unk_1000B55B8);
  *(_QWORD *)(a1 + 24) = result;
  return result;
}

void sub_1000846B8(uint64_t a1)
{
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_1000EFA88)
  {
    v2 = sub_100084710();
    v3 = type metadata accessor for UIHostingController(a1, &type metadata for NotificationSyncSettingsView, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_1000EFA88);
  }
}

unint64_t sub_100084710()
{
  unint64_t result;

  result = qword_1000EFA90;
  if (!qword_1000EFA90)
  {
    result = swift_getWitnessTable(&unk_1000B4570, &type metadata for NotificationSyncSettingsView);
    atomic_store(result, (unint64_t *)&qword_1000EFA90);
  }
  return result;
}

uint64_t sub_100084754(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 24);
  v4 = *(_QWORD *)(a1 + 32);
  v5 = *(_QWORD *)(a1 + 56);
  v6 = *(_QWORD *)(a1 + 64);
  v7 = *(_QWORD *)(a1 + 80);
  v8 = *(_QWORD *)(a1 + 96);

  swift_bridgeObjectRelease(v2);
  sub_100068A04(v3, v4);
  swift_bridgeObjectRelease(v5);
  swift_release(v6);
  swift_release(v7);
  swift_release(v8);
  return a1;
}

uint64_t sub_1000847E8(_QWORD *a1, void *a2, _QWORD *a3, void *a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void (*v35)(uint64_t, uint64_t, uint64_t, uint64_t);
  void (*v36)(uint64_t, _QWORD, uint64_t, uint64_t);
  void *v37;
  void *v38;
  id v39;
  id v40;
  id v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  _QWORD *v47;
  unint64_t v48;
  unint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  id v52;
  uint64_t v53;
  unint64_t v54;
  unint64_t v55;
  _QWORD *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  void (*v63)(_QWORD);
  char *v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  unint64_t v68;
  uint64_t v69;
  _QWORD *v70;
  id v71;
  uint64_t v72;
  uint64_t v73;
  void *v74;
  uint64_t v75;
  uint64_t v76;
  void (*v77)(char *, uint64_t, uint64_t);
  _QWORD *v78;
  char *v79;
  uint64_t v80;
  unint64_t v81;
  unint64_t v82;
  uint64_t v83;
  _QWORD *v84;
  uint64_t MoreFromHealthDataSource;
  id v86;
  uint64_t v87;
  unint64_t v88;
  unint64_t v89;
  _QWORD *v90;
  uint64_t v91;
  _QWORD *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  id v96;
  char *v97;
  uint64_t v98;
  void (*v99)(char *, _QWORD, uint64_t);
  char *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  unint64_t v104;
  unint64_t v105;
  _QWORD *v106;
  uint64_t v107;
  _QWORD *v108;
  uint64_t v109;
  id v110;
  char *v111;
  uint64_t v112;
  char *v113;
  uint64_t v114;
  uint64_t v115;
  unint64_t v116;
  unint64_t v117;
  _QWORD *v118;
  id v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  char *v124;
  uint64_t v125;
  __n128 v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  char *v130;
  uint64_t v131;
  uint64_t v132;
  char *v133;
  char *v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  _QWORD *v142;
  __n128 v143;
  uint64_t v144;
  id v145;
  uint64_t v146;
  uint64_t v147;
  char *v148;
  uint64_t v149;
  void (*v150)(uint64_t, uint64_t);
  uint64_t v152;
  void (*v153)(char *, uint64_t, uint64_t);
  uint64_t (*v154)(char *, _QWORD, uint64_t);
  void (*v155)(uint64_t, _QWORD, uint64_t, uint64_t);
  char *v156;
  char *v157;
  char *v158;
  char *v159;
  uint64_t v160;
  uint64_t v161;
  _QWORD *v162;
  char *v163;
  uint64_t v164;
  uint64_t v165;
  char *v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  char *v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  _QWORD *v174;
  char *v175;
  uint64_t v176;
  char *v177;
  _QWORD *v178;
  _QWORD *v179;
  unsigned int v180;
  _BYTE v181[32];
  __int128 v182;
  uint64_t v183;
  void *v184;

  v5 = v4;
  sub_100014B5C(0);
  v11 = v10;
  v12 = *(_QWORD *)(v10 - 8);
  v13 = __chkstk_darwin(v10);
  v167 = (uint64_t)&v152 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  v166 = (char *)&v152 - v15;
  sub_1000137DC(0);
  v17 = __chkstk_darwin(v16);
  v158 = (char *)&v152 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  v163 = (char *)&v152 - v19;
  v20 = type metadata accessor for CloudSyncRestoreState(0);
  v21 = *(_QWORD *)(v20 - 8);
  __chkstk_darwin(v20);
  v159 = (char *)&v152 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100026E84(0, &qword_1000EFC08, (uint64_t (*)(uint64_t))sub_1000134E0, (uint64_t (*)(void))sub_10004A084, (uint64_t (*)(uint64_t, uint64_t, uint64_t))&type metadata accessor for HideableDataSource.Visibility);
  v176 = v23;
  v162 = *(_QWORD **)(v23 - 8);
  __chkstk_darwin(v23);
  v177 = (char *)&v152 - v24;
  v25 = type metadata accessor for DispatchTime(0);
  __chkstk_darwin(v25);
  v175 = (char *)&v152 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100026E84(0, &qword_1000EFBD0, (uint64_t (*)(uint64_t))sub_100086BE8, sub_100086D2C, (uint64_t (*)(uint64_t, uint64_t, uint64_t))&type metadata accessor for HideableDataSource.Visibility);
  v172 = v27;
  v174 = *(_QWORD **)(v27 - 8);
  v28 = __chkstk_darwin(v27);
  v157 = (char *)&v152 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v28);
  v179 = (uint64_t *)((char *)&v152 - v30);
  sub_100026E84(0, &qword_1000EFBC0, (uint64_t (*)(uint64_t))&type metadata accessor for SummaryFeedTrendsSectionDataSource, sub_100086BCC, (uint64_t (*)(uint64_t, uint64_t, uint64_t))&type metadata accessor for HideableDataSource.Visibility);
  v171 = v31;
  v173 = *(_QWORD *)(v31 - 8);
  v32 = __chkstk_darwin(v31);
  v156 = (char *)&v152 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v32);
  v170 = (char *)&v152 - v34;
  v168 = v12;
  v35 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v12 + 56);
  v169 = v11;
  v35(v5 + qword_1000EFA98, 1, 1, v11);
  v164 = v21;
  v36 = *(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v21 + 56);
  v37 = a4;
  v165 = v20;
  v155 = v36;
  v36(v5 + qword_1000EFAA0, 1, 1, v20);
  sub_100028F08((uint64_t)a1, v5 + qword_1000EFAE0);
  *(_QWORD *)(v5 + qword_1000EFAE8) = a2;
  v178 = a3;
  sub_100028F08((uint64_t)a3, v5 + qword_1000EFAF0);
  v38 = (void *)objc_opt_self(NSUserDefaults);
  v39 = a2;
  swift_retain(v5);
  v40 = objc_msgSend(v38, "standardUserDefaults");
  v183 = type metadata accessor for DefaultCloudSyncStateStore(0);
  v184 = &protocol witness table for DefaultCloudSyncStateStore;
  sub_100007E0C(&v182);
  DefaultCloudSyncStateStore.init(userDefaults:)(v40);
  v41 = objc_allocWithZone((Class)type metadata accessor for CloudSyncStateObserver(0));
  *(_QWORD *)(v5 + qword_1000EFAA8) = CloudSyncStateObserver.init(healthStore:store:)(v39, &v182);
  sub_100086D48(v39, a1, a4);
  v43 = v42;
  v45 = v44;
  v46 = (_QWORD *)(v5 + qword_1000EFAB0);
  *v46 = v42;
  v46[1] = v44;
  swift_unknownObjectRetain(v42);
  v47 = sub_100029AC0(0, 1, 1, _swiftEmptyArrayStorage);
  v49 = v47[2];
  v48 = v47[3];
  if (v49 >= v48 >> 1)
    v47 = sub_100029AC0((_QWORD *)(v48 > 1), v49 + 1, 1, v47);
  v47[2] = v49 + 1;
  v50 = &v47[2 * v49];
  v50[4] = v43;
  v50[5] = v45;
  sub_100028F08((uint64_t)a1, (uint64_t)&v182);
  sub_100028F08((uint64_t)v178, (uint64_t)v181);
  v51 = type metadata accessor for SummaryPinnedContentDataSource(0);
  swift_allocObject(v51, *(unsigned int *)(v51 + 48), *(unsigned __int16 *)(v51 + 52));
  v52 = v39;
  v53 = SummaryPinnedContentDataSource.init(healthExperienceStore:healthStore:pinnedContentManager:)(&v182, v52, (uint64_t)v181);
  *(_QWORD *)(v5 + qword_1000F1178) = v53;
  v54 = v47[2];
  v55 = v47[3];
  swift_retain(v53);
  if (v54 >= v55 >> 1)
    v47 = sub_100029AC0((_QWORD *)(v55 > 1), v54 + 1, 1, v47);
  v47[2] = v54 + 1;
  v56 = &v47[2 * v54];
  v56[4] = v53;
  v56[5] = &protocol witness table for CompoundSectionedDataSource;
  v57 = a1[3];
  v58 = a1[4];
  sub_100012E04(a1, v57);
  v59 = dispatch thunk of HealthExperienceStore.viewContext.getter(v57, v58);
  v60 = static SourceProfile.primary.getter();
  v61 = type metadata accessor for SummaryFeedTrendsSectionDataSource(0);
  swift_allocObject(v61, *(unsigned int *)(v61 + 48), *(unsigned __int16 *)(v61 + 52));
  v62 = SummaryFeedTrendsSectionDataSource.init(context:sourceProfile:additionalPredicates:significantTrendsDataSourceLoadingCompletion:)(v59, v60, _swiftEmptyArrayStorage, 0, 0);
  v63 = *(void (**)(_QWORD))(v173 + 104);
  v64 = v170;
  v180 = enum case for HideableDataSource.Visibility.visible<A>(_:);
  v154 = (uint64_t (*)(char *, _QWORD, uint64_t))v63;
  v63(v170);
  sub_100026E84(0, &qword_1000EFC10, (uint64_t (*)(uint64_t))&type metadata accessor for SummaryFeedTrendsSectionDataSource, sub_100086BCC, (uint64_t (*)(uint64_t, uint64_t, uint64_t))&type metadata accessor for HideableDataSource);
  swift_allocObject(v65, *(unsigned int *)(v65 + 48), *(unsigned __int16 *)(v65 + 52));
  v66 = HideableDataSource.init(source:visibility:)(v62, v64);
  *(_QWORD *)(v5 + qword_1000EFAB8) = v66;
  swift_retain(v66);
  if ((swift_isUniquelyReferenced_nonNull_native(v47) & 1) == 0)
    v47 = sub_100029AC0(0, v47[2] + 1, 1, v47);
  v68 = v47[2];
  v67 = v47[3];
  if (v68 >= v67 >> 1)
    v47 = sub_100029AC0((_QWORD *)(v67 > 1), v68 + 1, 1, v47);
  v69 = sub_100087C24(&qword_1000EFC18, &qword_1000EFC10, (uint64_t (*)(uint64_t))&type metadata accessor for SummaryFeedTrendsSectionDataSource, sub_100086BCC);
  v47[2] = v68 + 1;
  v70 = &v47[2 * v68];
  v70[4] = v66;
  v70[5] = v69;
  v71 = objc_msgSend(v52, "profileIdentifier");
  v72 = a1[3];
  v73 = a1[4];
  sub_100012E04(a1, v72);
  v74 = (void *)dispatch thunk of HealthExperienceStore.viewContext.getter(v72, v73);
  v75 = sub_10008742C((uint64_t)a1, v52, v71, v74, v37);

  v76 = dispatch thunk of HideableDataSource.wrappedSource.getter();
  LOBYTE(v71) = dispatch thunk of PrimarySecondaryDataSource.shouldUsePrimaryDataSource.getter();
  swift_release(v76);
  if ((v71 & 1) != 0)
  {
    v77 = (void (*)(char *, uint64_t, uint64_t))v174[13];
    v78 = v179;
    v79 = (char *)v179;
    v80 = v180;
  }
  else
  {
    v80 = enum case for HideableDataSource.Visibility.hidden<A>(_:);
    v77 = (void (*)(char *, uint64_t, uint64_t))v174[13];
    v78 = v179;
    v79 = (char *)v179;
  }
  v153 = v77;
  v77(v79, v80, v172);
  dispatch thunk of HideableDataSource.visibility.setter(v78);
  *(_QWORD *)(v5 + qword_1000F1180) = v75;
  swift_retain_n(v75, 2);
  if ((swift_isUniquelyReferenced_nonNull_native(v47) & 1) == 0)
    v47 = sub_100029AC0(0, v47[2] + 1, 1, v47);
  v82 = v47[2];
  v81 = v47[3];
  if (v82 >= v81 >> 1)
    v47 = sub_100029AC0((_QWORD *)(v81 > 1), v82 + 1, 1, v47);
  v83 = sub_100087C24(&qword_1000EFC20, &qword_1000EFC28, (uint64_t (*)(uint64_t))sub_100086BE8, sub_100086D2C);
  v47[2] = v82 + 1;
  v84 = &v47[2 * v82];
  v161 = v75;
  v84[4] = v75;
  v84[5] = v83;
  sub_100028F08((uint64_t)a1, (uint64_t)&v182);
  MoreFromHealthDataSource = type metadata accessor for GetMoreFromHealthDataSource(0);
  swift_allocObject(MoreFromHealthDataSource, *(unsigned int *)(MoreFromHealthDataSource + 48), *(unsigned __int16 *)(MoreFromHealthDataSource + 52));
  v86 = v37;
  v174 = v37;
  v87 = sub_10004953C(&v182, v37);
  *(_QWORD *)(v5 + qword_1000EFAC0) = v87;
  v89 = v47[2];
  v88 = v47[3];
  swift_retain(v87);
  v90 = v52;
  if (v89 >= v88 >> 1)
    v47 = sub_100029AC0((_QWORD *)(v88 > 1), v89 + 1, 1, v47);
  v91 = sub_100013198(&qword_1000EFC30, type metadata accessor for GetMoreFromHealthDataSource, (uint64_t)&protocol conformance descriptor for HideableDataSource<A>);
  v47[2] = v89 + 1;
  v92 = &v47[2 * v89];
  v92[4] = v87;
  v92[5] = v91;
  sub_1000134E0(0);
  v94 = v93;
  v179 = a1;
  sub_100028F08((uint64_t)a1, (uint64_t)&v182);
  v95 = swift_allocObject(&unk_1000E17B8, 64, 7);
  sub_10001AF7C(&v182, v95 + 16);
  *(_QWORD *)(v95 + 56) = v174;
  v96 = v86;
  v97 = v175;
  static DispatchTime.now()(v96);
  v160 = v94;
  v98 = DelayedDataSource.__allocating_init(delay:dataSource:)(v97, sub_100087C04, v95);
  v99 = (void (*)(char *, _QWORD, uint64_t))v162[13];
  v100 = v177;
  v99(v177, v180, v176);
  sub_100026E84(0, &qword_1000EFC38, (uint64_t (*)(uint64_t))sub_1000134E0, (uint64_t (*)(void))sub_10004A084, (uint64_t (*)(uint64_t, uint64_t, uint64_t))&type metadata accessor for HideableDataSource);
  v102 = v101;
  swift_allocObject(v101, *(unsigned int *)(v101 + 48), *(unsigned __int16 *)(v101 + 52));
  v103 = HideableDataSource.init(source:visibility:)(v98, v100);
  *(_QWORD *)(v5 + qword_1000EFAC8) = v103;
  swift_retain(v103);
  if ((swift_isUniquelyReferenced_nonNull_native(v47) & 1) == 0)
    v47 = sub_100029AC0(0, v47[2] + 1, 1, v47);
  v162 = v90;
  v105 = v47[2];
  v104 = v47[3];
  v106 = v174;
  if (v105 >= v104 >> 1)
    v47 = sub_100029AC0((_QWORD *)(v104 > 1), v105 + 1, 1, v47);
  v107 = sub_100087C24(&qword_1000EFC40, &qword_1000EFC38, (uint64_t (*)(uint64_t))sub_1000134E0, (uint64_t (*)(void))sub_10004A084);
  v47[2] = v105 + 1;
  v108 = &v47[2 * v105];
  v108[4] = v103;
  v108[5] = v107;
  sub_100028F08((uint64_t)v179, (uint64_t)&v182);
  v109 = swift_allocObject(&unk_1000E17E0, 64, 7);
  sub_10001AF7C(&v182, v109 + 16);
  *(_QWORD *)(v109 + 56) = v106;
  v110 = v96;
  v111 = v175;
  static DispatchTime.now()(v110);
  v112 = DelayedDataSource.__allocating_init(delay:dataSource:)(v111, sub_100087C70, v109);
  v113 = v177;
  v99(v177, v180, v176);
  swift_allocObject(v102, *(unsigned int *)(v102 + 48), *(unsigned __int16 *)(v102 + 52));
  v114 = HideableDataSource.init(source:visibility:)(v112, v113);
  *(_QWORD *)(v5 + qword_1000EFAD0) = v114;
  swift_retain(v114);
  if ((swift_isUniquelyReferenced_nonNull_native(v47) & 1) == 0)
    v47 = sub_100029AC0(0, v47[2] + 1, 1, v47);
  v115 = v164;
  v117 = v47[2];
  v116 = v47[3];
  if (v117 >= v116 >> 1)
    v47 = sub_100029AC0((_QWORD *)(v116 > 1), v117 + 1, 1, v47);
  v47[2] = v117 + 1;
  v118 = &v47[2 * v117];
  v118[4] = v114;
  v118[5] = v107;
  *(_QWORD *)(v5 + qword_1000EFAD8) = v106;
  v119 = v110;
  swift_release(v5);
  v120 = CompoundSectionedDataSource.init(_:)(v47);
  swift_retain(v120);
  v121 = sub_100006770();
  v122 = (uint64_t)v163;
  dispatch thunk of CloudSyncStateObserver.cachedFirstRestoreState.getter(v121);
  v123 = v165;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v115 + 48))(v122, 1, v165) == 1)
  {
    sub_1000137A0(v122, (uint64_t (*)(_QWORD))sub_1000137DC);
  }
  else
  {
    v124 = v159;
    v125 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v115 + 32))(v159, v122, v123);
    if ((CloudSyncRestoreState.isOngoing.getter(v125) & 1) != 0)
    {
      v127 = (uint64_t)v158;
      (*(void (**)(char *, char *, uint64_t))(v115 + 16))(v158, v124, v123);
      v155(v127, 0, 1, v123);
      v128 = v120 + qword_1000EFAA0;
      swift_beginAccess(v120 + qword_1000EFAA0, &v182, 33, 0);
      sub_100014AFC(v127, v128, (uint64_t (*)(_QWORD))sub_1000137DC);
      swift_endAccess(&v182);
      v129 = enum case for HideableDataSource.Visibility.hidden<A>(_:);
      v130 = v156;
      v131 = v171;
      v132 = v154(v156, enum case for HideableDataSource.Visibility.hidden<A>(_:), v171);
      if (HAFeatureFlagShowTrendsInSummary(v132))
      {
        v133 = v170;
        (*(void (**)(char *, char *, uint64_t))(v173 + 16))(v170, v130, v131);
        dispatch thunk of HideableDataSource.visibility.setter(v133);
      }
      (*(void (**)(char *, uint64_t))(v173 + 8))(v130, v131);
      v134 = v157;
      v153(v157, v129, v172);
      dispatch thunk of HideableDataSource.visibility.setter(v134);
      v135 = *(_QWORD *)(*(_QWORD *)(v120 + qword_1000F1178)
                       + direct field offset for SummaryPinnedContentDataSource.pinnedContentWithCloudStateDataSource);
      v136 = swift_retain(v135);
      v137 = dispatch thunk of PrimarySecondaryDataSource.primaryDataSource.getter(v136);
      swift_release(v135);
      sub_100007730(0, (unint64_t *)&qword_1000ECA70, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for _ContiguousArrayStorage);
      v139 = swift_allocObject(v138, 72, 7);
      *(_OWORD *)(v139 + 16) = xmmword_1000B11F0;
      v140 = v137 + qword_1000EDA60;
      v141 = type metadata accessor for EmptyStateCollectionViewCellItem(0);
      *(_QWORD *)(v139 + 56) = v141;
      *(_QWORD *)(v139 + 64) = sub_100013198(&qword_1000ED438, (uint64_t (*)(uint64_t))&type metadata accessor for EmptyStateCollectionViewCellItem, (uint64_t)&protocol conformance descriptor for EmptyStateCollectionViewCellItem);
      v142 = sub_100007E0C((_QWORD *)(v139 + 32));
      (*(void (**)(_QWORD *, uint64_t, uint64_t))(*(_QWORD *)(v141 - 8) + 16))(v142, v140, v141);
      dispatch thunk of MutableArrayDataSource.replaceItemsForSection(at:newItems:reconfigureAndReloadItems:)(0, v139, 1);
      swift_release(v137);
      v143 = swift_bridgeObjectRelease(v139);
      (*(void (**)(char *, uint64_t, __n128))(v115 + 8))(v159, v123, v143);
    }
    else
    {
      (*(void (**)(char *, uint64_t, __n128))(v115 + 8))(v124, v123, v126);
    }
  }
  v144 = v167;
  sub_100009000(v167);
  v145 = objc_msgSend((id)objc_opt_self(NSOperationQueue), "mainQueue");
  v146 = swift_allocObject(&unk_1000E1650, 24, 7);
  swift_weakInit(v146 + 16, v120);
  v147 = sub_100013198((unint64_t *)&qword_1000EC700, (uint64_t (*)(uint64_t))sub_100014B5C, (uint64_t)&protocol conformance descriptor for LegacyObservable<A>);
  v148 = v166;
  v149 = v169;
  ObservableConvertible.afterChange(on:_:)(v145, sub_100087C90, v146, v169, v147);
  swift_release(v161);

  swift_release(v146);
  swift_release(v120);
  _s6Health23OpenSleepScheduleIntentVwxx_0(v178);
  v150 = *(void (**)(uint64_t, uint64_t))(v168 + 8);
  v150(v144, v149);
  v150((uint64_t)v148, v149);
  _s6Health23OpenSleepScheduleIntentVwxx_0(v179);
  return v120;
}

uint64_t sub_100085790(uint64_t a1, void *a2, uint64_t a3)
{
  void *v5;
  id v6;
  id v7;
  id v8;
  uint64_t v9;
  _QWORD v11[5];

  sub_100028F08(a1, (uint64_t)v11);
  v5 = (void *)objc_opt_self(HKProfileIdentifier);
  v6 = a2;
  v7 = objc_msgSend(v5, "primaryProfile");
  v8 = objc_allocWithZone((Class)type metadata accessor for PersonalizedFeedDataSource(0));
  v9 = sub_10005C42C(a3, v11, (uint64_t)v7, a2, 0);

  return v9;
}

uint64_t sub_100085838(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  _BYTE v6[24];

  v3 = a2 + 16;
  swift_beginAccess(a2 + 16, v6, 0, 0);
  result = swift_weakLoadStrong(v3);
  if (result)
  {
    v5 = result;
    sub_100009BA8(a1, 0, 0);
    return swift_release(v5);
  }
  return result;
}

uint64_t sub_1000858A0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _BYTE *v4;
  void *v5;
  id v6;
  void *v7;
  id v8;
  id v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE v15[40];

  v1 = type metadata accessor for SectionedDataSourceCardStackConfiguration(0);
  v2 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  v4 = &v15[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v5 = *(void **)(v0 + qword_1000EFAD8);
  if (v5)
    v6 = objc_msgSend(v5, "viewController");
  else
    v6 = 0;
  sub_100028F08(v0 + qword_1000EFAE0, (uint64_t)v15);
  v7 = *(void **)(v0 + qword_1000EFAE8);
  v8 = objc_msgSend(v7, "profileIdentifier");
  v9 = objc_allocWithZone((Class)type metadata accessor for NoticesDataSource(0));
  v10 = (void *)NoticesDataSource.init(healthExperienceStore:associatedProfileIdentifier:)(v15, v8);
  v11 = sub_100087BE4();
  static SectionedDataSourceCardStackConfiguration.alertsStack(with:)(v7);
  v12 = type metadata accessor for SummaryFeedDataSource(0);
  SnapshotDataSource.presentCardStackOriginalDataSource(viewController:dataSource:config:)(v6, v10, v11, v4, v12, &protocol witness table for CompoundSectionedDataSource);

  return (*(uint64_t (**)(_BYTE *, uint64_t))(v2 + 8))(v4, v1);
}

uint64_t sub_1000859FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  void *v14;
  _QWORD *v15;
  void *v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v24;
  uint64_t v25;
  _QWORD aBlock[5];
  _QWORD *v27;

  v8 = type metadata accessor for DispatchWorkItemFlags(0);
  v25 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v10 = (char *)&v24 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = type metadata accessor for DispatchQoS(0);
  v11 = *(_QWORD *)(v24 - 8);
  __chkstk_darwin(v24);
  v13 = (char *)&v24 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100006D10(0, (unint64_t *)&qword_1000ED910, OS_dispatch_queue_ptr);
  v14 = (void *)static OS_dispatch_queue.main.getter();
  v15 = (_QWORD *)swift_allocObject(&unk_1000E16C8, 48, 7);
  v15[2] = a1;
  v15[3] = a2;
  v15[4] = a3;
  v15[5] = a4;
  aBlock[4] = sub_100087B9C;
  v27 = v15;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100006988;
  aBlock[3] = &unk_1000E16E0;
  v16 = _Block_copy(aBlock);
  v17 = v27;
  swift_retain(a1);
  sub_10003FBE0(a2, a3);
  v18 = swift_release(v17);
  static DispatchQoS.unspecified.getter(v18);
  aBlock[0] = _swiftEmptyArrayStorage;
  v19 = sub_100013198((unint64_t *)&qword_1000EDBE0, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  sub_1000076D8(0, (unint64_t *)&qword_1000ED920, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Array);
  v21 = v20;
  v22 = sub_100013C8C();
  dispatch thunk of SetAlgebra.init<A>(_:)(aBlock, v21, v22, v8, v19);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v13, v10, v16);
  _Block_release(v16);

  (*(void (**)(char *, uint64_t))(v25 + 8))(v10, v8);
  return (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v13, v24);
}

uint64_t sub_100085C28(uint64_t a1, void (*a2)(void), uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t result;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  id v23;
  uint64_t v24;
  void (*v25)(void);
  uint64_t v26;
  _BYTE v27[24];

  v26 = a3;
  sub_100026E84(0, &qword_1000EFBC0, (uint64_t (*)(uint64_t))&type metadata accessor for SummaryFeedTrendsSectionDataSource, sub_100086BCC, (uint64_t (*)(uint64_t, uint64_t, uint64_t))&type metadata accessor for HideableDataSource.Visibility);
  v6 = v5;
  v7 = *(_QWORD *)(v5 - 8);
  v8 = __chkstk_darwin(v5);
  v10 = (char *)&v24 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v12 = (char *)&v24 - v11;
  sub_100026E84(0, &qword_1000EFBD0, (uint64_t (*)(uint64_t))sub_100086BE8, sub_100086D2C, (uint64_t (*)(uint64_t, uint64_t, uint64_t))&type metadata accessor for HideableDataSource.Visibility);
  v14 = v13;
  v15 = *(_QWORD *)(v13 - 8);
  __chkstk_darwin(v13);
  v17 = (char *)&v24 - v16;
  a1 += 16;
  swift_beginAccess(a1, v27, 0, 0);
  result = swift_weakLoadStrong(a1);
  if (result)
  {
    v19 = result;
    v25 = a2;
    v20 = enum case for HideableDataSource.Visibility.visible<A>(_:);
    (*(void (**)(char *, _QWORD, uint64_t))(v15 + 104))(v17, enum case for HideableDataSource.Visibility.visible<A>(_:), v14);
    dispatch thunk of HideableDataSource.visibility.setter(v17);
    v21 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 104))(v12, v20, v6);
    if (HAFeatureFlagShowTrendsInSummary(v21))
    {
      (*(void (**)(char *, char *, uint64_t))(v7 + 16))(v10, v12, v6);
      dispatch thunk of HideableDataSource.visibility.setter(v10);
    }
    (*(void (**)(char *, uint64_t))(v7 + 8))(v12, v6);
    v22 = (_QWORD *)(v19 + qword_1000EFAE0);
    v23 = objc_msgSend(*(id *)(v19 + qword_1000EFAE8), "profileIdentifier");
    sub_1000877E0(v22, v23);

    if (v25)
      v25();
    return swift_release(v19);
  }
  return result;
}

void sub_100085E48()
{
  _swift_stdlib_reportUnimplementedInitializer("Health.SummaryFeedDataSource", 28, "init(_:)", 8, 0);
  __break(1u);
}

uint64_t sub_100085E74()
{
  uint64_t v0;

  sub_1000137A0(v0 + qword_1000EFA98, (uint64_t (*)(_QWORD))sub_100014B40);
  sub_1000137A0(v0 + qword_1000EFAA0, (uint64_t (*)(_QWORD))sub_1000137DC);

  swift_unknownObjectRelease(*(_QWORD *)(v0 + qword_1000EFAB0));
  swift_release(*(_QWORD *)(v0 + qword_1000F1178));
  swift_release(*(_QWORD *)(v0 + qword_1000EFAB8));
  swift_release(*(_QWORD *)(v0 + qword_1000F1180));
  swift_release(*(_QWORD *)(v0 + qword_1000EFAC0));
  swift_release(*(_QWORD *)(v0 + qword_1000EFAC8));
  swift_release(*(_QWORD *)(v0 + qword_1000EFAD0));

  _s6Health23OpenSleepScheduleIntentVwxx_0((_QWORD *)(v0 + qword_1000EFAE0));
  return _s6Health23OpenSleepScheduleIntentVwxx_0((_QWORD *)(v0 + qword_1000EFAF0));
}

uint64_t sub_100085F70()
{
  uint64_t v0;

  v0 = CompoundSectionedDataSource.deinit();
  sub_1000137A0(v0 + qword_1000EFA98, (uint64_t (*)(_QWORD))sub_100014B40);
  sub_1000137A0(v0 + qword_1000EFAA0, (uint64_t (*)(_QWORD))sub_1000137DC);

  swift_unknownObjectRelease(*(_QWORD *)(v0 + qword_1000EFAB0));
  swift_release(*(_QWORD *)(v0 + qword_1000F1178));
  swift_release(*(_QWORD *)(v0 + qword_1000EFAB8));
  swift_release(*(_QWORD *)(v0 + qword_1000F1180));
  swift_release(*(_QWORD *)(v0 + qword_1000EFAC0));
  swift_release(*(_QWORD *)(v0 + qword_1000EFAC8));
  swift_release(*(_QWORD *)(v0 + qword_1000EFAD0));

  _s6Health23OpenSleepScheduleIntentVwxx_0((_QWORD *)(v0 + qword_1000EFAE0));
  _s6Health23OpenSleepScheduleIntentVwxx_0((_QWORD *)(v0 + qword_1000EFAF0));
  return v0;
}

uint64_t sub_100086084()
{
  uint64_t v0;

  v0 = sub_100085F70();
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t sub_1000860A4()
{
  return type metadata accessor for SummaryFeedDataSource(0);
}

BOOL sub_1000860AC()
{
  void *v0;
  id v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;

  v0 = (void *)JustObservingFetchedResultsControllerDataSource.frc.getter();
  v1 = objc_msgSend(v0, "fetchedObjects");

  if (!v1)
    return 1;
  v2 = type metadata accessor for Feed(0);
  v3 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v1, v2);

  if ((unint64_t)v3 >> 62)
  {
    if (v3 < 0)
      v6 = v3;
    else
      v6 = v3 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v3);
    v4 = _CocoaArrayWrapper.endIndex.getter(v6);
    swift_bridgeObjectRelease(v3);
  }
  else
  {
    v4 = *(_QWORD *)((v3 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  swift_bridgeObjectRelease(v3);
  return v4 != 0;
}

BOOL sub_100086160()
{
  uint64_t v0;
  uint64_t v1;

  v0 = type metadata accessor for PersonalizedFeedDataSource(0);
  v1 = sub_10004A030();
  return (SnapshotDataSource.isEmpty.getter(v0, v1) & 1) == 0;
}

void sub_1000861A8(void *a1, void *a2)
{
  uint64_t v4;
  void *v5;
  uint64_t v6;
  id v7;
  id v8;
  _QWORD v9[5];
  uint64_t v10;

  v4 = swift_allocObject(&unk_1000E1768, 32, 7);
  *(_QWORD *)(v4 + 16) = a1;
  *(_QWORD *)(v4 + 24) = a2;
  v9[4] = sub_100087BDC;
  v10 = v4;
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 1107296256;
  v9[2] = sub_100006988;
  v9[3] = &unk_1000E1780;
  v5 = _Block_copy(v9);
  v6 = v10;
  v7 = a2;
  v8 = a1;
  swift_release(v6);
  objc_msgSend(v8, "performBlock:", v5);
  _Block_release(v5);
}

void sub_100086268(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  uint8_t *v13;
  uint64_t v14;
  NSObject *v15;
  os_log_type_t v16;
  uint8_t *v17;
  void *v18;
  id v19;
  void *v20;
  uint64_t v21;

  v3 = type metadata accessor for Logger(0);
  v4 = *(_QWORD *)(v3 - 8);
  v5 = __chkstk_darwin(v3);
  v7 = (char *)&v21 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v9 = (char *)&v21 - v8;
  if ((NSManagedObjectContext.doesFeedEligibleForDisplayExist(kind:associatedProfileIdentifier:)(2, a2) & 1) != 0)
  {
    v10 = static Logger.personalization.getter();
    v11 = Logger.logObject.getter(v10);
    v12 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v11, v12))
    {
      v13 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v13 = 0;
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "Highlights section timeout complete, no population operation needed", v13, 2u);
      swift_slowDealloc(v13, -1, -1);
    }

    (*(void (**)(char *, uint64_t))(v4 + 8))(v9, v3);
  }
  else
  {
    v14 = static Logger.personalization.getter();
    v15 = Logger.logObject.getter(v14);
    v16 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v15, v16))
    {
      v17 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v17 = 0;
      _os_log_impl((void *)&_mh_execute_header, v15, v16, "Highlights section timeout complete, dispatching population operation", v17, 2u);
      swift_slowDealloc(v17, -1, -1);
    }

    (*(void (**)(char *, uint64_t))(v4 + 8))(v7, v3);
    sub_100006D10(0, (unint64_t *)&qword_1000EDA38, NSOperationQueue_ptr);
    v18 = (void *)static NSOperationQueue.userInitiated.getter();
    v19 = objc_allocWithZone((Class)type metadata accessor for PopulateDiscoverFeedOperation(0));
    v20 = (void *)PopulateDiscoverFeedOperation.init(feedKinds:)(&off_1000DC600);
    objc_msgSend(v18, "addOperation:", v20);

  }
}

uint64_t sub_100086478@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t ObjCClassFromMetadata;
  id v25;
  id v26;
  NSString v27;
  id v28;
  Swift::String v29;
  Swift::String v30;
  Swift::String v31;
  uint64_t v32;
  id v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  Swift::String v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  void (*v47)(char *, _QWORD, uint64_t);
  uint64_t v48;
  uint64_t v49;
  char *v50;
  char *v51;
  uint64_t v52;
  char *v53;
  char *v54;
  char *v55;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  id v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  __int128 v75;
  uint64_t v76;
  void *v77;
  Swift::String v78;

  v4 = v3;
  v61 = a1;
  v74 = a3;
  v6 = type metadata accessor for SectionedDataSourceContainerViewType(0);
  v72 = *(_QWORD *)(v6 - 8);
  v73 = v6;
  __chkstk_darwin(v6);
  v71 = (char *)&v57 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for CellDeselectionBehavior(0);
  v69 = *(_QWORD *)(v8 - 8);
  v70 = v8;
  __chkstk_darwin(v8);
  v68 = (char *)&v57 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000076D8(0, &qword_1000ECA60, (uint64_t (*)(uint64_t))&type metadata accessor for UIBackgroundConfiguration, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
  __chkstk_darwin(v10);
  v67 = (char *)&v57 - v11;
  sub_1000076D8(0, &qword_1000ECCD8, (uint64_t (*)(uint64_t))&type metadata accessor for UICellAccessory.LayoutDimension, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
  __chkstk_darwin(v12);
  v63 = (char *)&v57 - v13;
  v14 = type metadata accessor for UICellAccessory.DisclosureIndicatorOptions(0);
  v65 = *(_QWORD *)(v14 - 8);
  v66 = v14;
  __chkstk_darwin(v14);
  v64 = (char *)&v57 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v62 = type metadata accessor for UICellAccessory.DisplayedState(0);
  v16 = *(_QWORD *)(v62 - 8);
  __chkstk_darwin(v62);
  v18 = (char *)&v57 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = type metadata accessor for UIListContentConfiguration(0);
  v59 = *(_QWORD *)(v19 - 8);
  v20 = v19;
  __chkstk_darwin(v19);
  v22 = (char *)&v57 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = type metadata accessor for ContentConfigurationCollectionViewListCell(0);
  ObjCClassFromMetadata = swift_getObjCClassFromMetadata(v23);
  v25 = objc_msgSend((id)objc_opt_self(NSBundle), "bundleForClass:", ObjCClassFromMetadata);
  static UIListContentConfiguration.cell()(v25);
  v26 = v25;
  v27 = String._bridgeToObjectiveC()();
  v28 = objc_msgSend((id)objc_opt_self(UIImage), "imageNamed:inBundle:", v27, v26);

  v60 = v26;
  UIListContentConfiguration.image.setter(v28);
  v78._countAndFlagsBits = 0xD00000000000001ELL;
  v78._object = (void *)0x80000001000BD720;
  v29._object = (void *)0x80000001000BD6E0;
  v30._object = (void *)0x80000001000BD700;
  v29._countAndFlagsBits = 0xD000000000000013;
  v30._countAndFlagsBits = 0xD000000000000013;
  v31 = NSLocalizedString(_:tableName:bundle:value:comment:)(v29, (Swift::String_optional)0, (NSBundle)v26, v30, v78);
  UIListContentConfiguration.text.setter(v31._countAndFlagsBits, v31._object);
  sub_100028F08(v61, (uint64_t)&v75);
  v32 = swift_allocObject(&unk_1000E1808, 64, 7);
  sub_10001AF7C(&v75, v32 + 16);
  *(_QWORD *)(v32 + 56) = a2;
  *(_QWORD *)&v75 = 0;
  *((_QWORD *)&v75 + 1) = 0xE000000000000000;
  v33 = a2;
  _StringGuts.grow(_:)(20);
  v34 = *((_QWORD *)&v75 + 1);
  v35 = _typeName(_:qualified:)(v4, 0);
  v37 = v36;
  swift_bridgeObjectRelease(v34);
  *(_QWORD *)&v75 = v35;
  *((_QWORD *)&v75 + 1) = v37;
  v38._countAndFlagsBits = 0xD000000000000012;
  v38._object = (void *)0x80000001000B99C0;
  String.append(_:)(v38);
  v58 = *((_QWORD *)&v75 + 1);
  v61 = v75;
  v39 = v20;
  v57 = v20;
  v76 = v20;
  v77 = &protocol witness table for UIListContentConfiguration;
  v40 = sub_100007E0C(&v75);
  v41 = v59;
  (*(void (**)(_QWORD *, char *, uint64_t))(v59 + 16))(v40, v22, v39);
  sub_1000076D8(0, &qword_1000ECCE0, (uint64_t (*)(uint64_t))&type metadata accessor for UICellAccessory, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for _ContiguousArrayStorage);
  v43 = v42;
  v44 = type metadata accessor for UICellAccessory(0);
  v45 = swift_allocObject(v43, ((*(unsigned __int8 *)(*(_QWORD *)(v44 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v44 - 8) + 80))+ *(_QWORD *)(*(_QWORD *)(v44 - 8) + 72), *(unsigned __int8 *)(*(_QWORD *)(v44 - 8) + 80) | 7);
  *(_OWORD *)(v45 + 16) = xmmword_1000B11F0;
  v46 = v16;
  v47 = *(void (**)(char *, _QWORD, uint64_t))(v16 + 104);
  v48 = v62;
  v47(v18, enum case for UICellAccessory.DisplayedState.always(_:), v62);
  v49 = type metadata accessor for UICellAccessory.LayoutDimension(0);
  v50 = v63;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v49 - 8) + 56))(v63, 1, 1, v49);
  v51 = v64;
  UICellAccessory.DisclosureIndicatorOptions.init(isHidden:reservedLayoutWidth:tintColor:)(2, v50, 0);
  static UICellAccessory.disclosureIndicator(displayed:options:)(v18, v51);
  (*(void (**)(char *, uint64_t))(v65 + 8))(v51, v66);
  (*(void (**)(char *, uint64_t))(v46 + 8))(v18, v48);
  v52 = type metadata accessor for UIBackgroundConfiguration(0);
  v53 = v67;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v52 - 8) + 56))(v67, 1, 1, v52);
  v54 = v68;
  (*(void (**)(char *, _QWORD, uint64_t))(v69 + 104))(v68, enum case for CellDeselectionBehavior.default(_:), v70);
  v55 = v71;
  (*(void (**)(char *, _QWORD, uint64_t))(v72 + 104))(v71, enum case for SectionedDataSourceContainerViewType.collectionView(_:), v73);
  ContentConfigurationItem.init(uniqueIdentifier:contentConfiguration:cellAccessories:cellSelectionHandler:deselectionBehavior:backgroundConfiguration:updateContentConfigurationHandler:container:automationIdentifier:)(v61, v58, &v75, v45, sub_100087D24, v32, v54, v53, 0, 0, v55, 0xD000000000000011, 0x80000001000BD740);

  return (*(uint64_t (**)(char *, uint64_t))(v41 + 8))(v22, v57);
}

void sub_100086A4C(void *a1, uint64_t a2, void *a3)
{
  id v5;
  void *v6;
  _BYTE v7[40];

  sub_100028F08(a2, (uint64_t)v7);
  v5 = objc_allocWithZone((Class)type metadata accessor for AllHighlightsByCategoryViewController(0));
  v6 = (void *)AllHighlightsByCategoryViewController.init(healthExperienceStore:healthStore:provenance:)(v7, a3, 0x7972616D6D7553, 0xE700000000000000);
  objc_msgSend(a1, "showViewController:sender:", v6, a1);

}

void sub_100086AE0()
{
  _swift_stdlib_reportUnimplementedInitializer("Health.HighlightsFeedWithShowAllHighlightsDataSource", 52, "init(_:)", 8, 0);
  __break(1u);
}

void sub_100086B0C()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + qword_1000EFB50));
  _s6Health23OpenSleepScheduleIntentVwxx_0((_QWORD *)(v0 + qword_1000EFB58));

}

uint64_t sub_100086B58()
{
  uint64_t v0;

  v0 = CompoundSectionedDataSource.deinit();

  swift_release(*(_QWORD *)(v0 + qword_1000EFB50));
  _s6Health23OpenSleepScheduleIntentVwxx_0((_QWORD *)(v0 + qword_1000EFB58));

  return swift_deallocClassInstance(v0, 80, 7);
}

uint64_t sub_100086BC4()
{
  return type metadata accessor for HighlightsFeedWithShowAllHighlightsDataSource(0);
}

uint64_t sub_100086BCC()
{
  return sub_100013198(&qword_1000EFBC8, (uint64_t (*)(uint64_t))&type metadata accessor for SummaryFeedTrendsSectionDataSource, (uint64_t)&protocol conformance descriptor for HideableDataSource<A>);
}

void sub_100086BE8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD v6[4];

  if (!qword_1000EFBD8)
  {
    v2 = type metadata accessor for HighlightsFeedWithShowAllHighlightsDataSource(255);
    sub_100086C88(255);
    v6[0] = v2;
    v6[1] = v3;
    v6[2] = &protocol witness table for CompoundSectionedDataSource;
    v6[3] = sub_100013198(&qword_1000EFBF0, (uint64_t (*)(uint64_t))sub_100086C88, (uint64_t)&protocol conformance descriptor for PrimarySecondaryDataSource<A, B>);
    v4 = type metadata accessor for PrimarySecondaryDataSource(a1, v6);
    if (!v5)
      atomic_store(v4, (unint64_t *)&qword_1000EFBD8);
  }
}

void sub_100086C88(uint64_t a1)
{
  unint64_t v2;
  uint64_t v3;
  _QWORD v4[4];

  if (!qword_1000EFBE0)
  {
    v4[0] = type metadata accessor for FeedObjectDataSource(255);
    v4[1] = type metadata accessor for LoadingPersonalizedHighlightsDataSource(255);
    v4[2] = sub_100013198(&qword_1000EFBE8, type metadata accessor for FeedObjectDataSource, (uint64_t)&protocol conformance descriptor for JustObservingFetchedResultsControllerDataSource<A>);
    v4[3] = &protocol witness table for ArrayDataSource;
    v2 = type metadata accessor for PrimarySecondaryDataSource(a1, v4);
    if (!v3)
      atomic_store(v2, (unint64_t *)&qword_1000EFBE0);
  }
}

uint64_t sub_100086D2C()
{
  return sub_100013198(&qword_1000EFBF8, (uint64_t (*)(uint64_t))sub_100086BE8, (uint64_t)&protocol conformance descriptor for PrimarySecondaryDataSource<A, B>);
}

void sub_100086D48(void *a1, _QWORD *a2, void *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  id v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  id v17;
  void *v18;
  unsigned int v19;
  id v20;
  void *v21;
  id v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  id v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  id v32;
  void *v33;
  uint64_t ObjectType;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t inited;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _BYTE v50[40];

  sub_100026E84(0, &qword_1000EFC48, (uint64_t (*)(uint64_t))&type metadata accessor for NoticesDataSource, sub_100087BE4, (uint64_t (*)(uint64_t, uint64_t, uint64_t))&type metadata accessor for HideableDataSource.Visibility);
  v7 = v6;
  v8 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v10 = v50 - v9 + 88;
  sub_100028F08((uint64_t)a2, (uint64_t)v50);
  v11 = objc_msgSend(a1, "profileIdentifier");
  v12 = objc_allocWithZone((Class)type metadata accessor for NoticesDataSource(0));
  v13 = NoticesDataSource.init(healthExperienceStore:associatedProfileIdentifier:)(v50, v11);
  (*(void (**)(_BYTE *, _QWORD, uint64_t))(v8 + 104))(v10, enum case for HideableDataSource.Visibility.visible<A>(_:), v7);
  sub_100026E84(0, &qword_1000EFC50, (uint64_t (*)(uint64_t))&type metadata accessor for NoticesDataSource, sub_100087BE4, (uint64_t (*)(uint64_t, uint64_t, uint64_t))&type metadata accessor for HideableDataSource);
  swift_allocObject(v14, *(unsigned int *)(v14 + 48), *(unsigned __int16 *)(v14 + 52));
  v15 = HideableDataSource.init(source:visibility:)(v13, v10);
  v16 = (void *)objc_opt_self(_HKBehavior);
  v17 = objc_msgSend(v16, "sharedBehavior");
  if (!v17)
  {
    __break(1u);
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  v18 = v17;
  v19 = objc_msgSend(v17, "isiPad");

  if (!v19)
  {
LABEL_13:
    sub_100087C24(&qword_1000EFC58, &qword_1000EFC50, (uint64_t (*)(uint64_t))&type metadata accessor for NoticesDataSource, sub_100087BE4);
    return;
  }
  v20 = objc_msgSend(v16, "sharedBehavior");
  if (!v20)
    goto LABEL_17;
  v21 = v20;
  v22 = objc_msgSend(v20, "features");

  if (!v22)
  {
LABEL_18:
    __break(1u);
    return;
  }
  v23 = objc_msgSend(v22, "stanley");

  if (!v23)
    goto LABEL_13;
  v24 = a2[3];
  v25 = a2[4];
  sub_100012E04(a2, v24);
  v26 = dispatch thunk of HealthExperienceStore.viewContext.getter(v24, v25);
  v27 = objc_msgSend(a1, "profileIdentifier");
  v28 = type metadata accessor for SummaryHeaderProfileNameCell(0);
  v29 = type metadata accessor for HealthKitProfileInformationDataSource(0);
  swift_allocObject(v29, *(unsigned int *)(v29 + 48), *(unsigned __int16 *)(v29 + 52));
  v30 = HealthKitProfileInformationDataSource.init(context:profileIdentifier:viewClass:layoutConstructor:)(v26, v27, v28, &protocol witness table for ProfileNameCell, sub_10008589C, 0);
  v31 = v30;
  if (a3)
  {
    swift_retain(v30);
    v32 = objc_msgSend(a3, "viewController");
    if (v32)
    {
      v33 = v32;
      ObjectType = swift_getObjectType(v32);
      if (swift_conformsToProtocol2(ObjectType, &protocol descriptor for CardStackChangeDelegate))
        v35 = v33;
      else
        v35 = 0;
      if (!v35)

    }
  }
  else
  {
    swift_retain(v30);
  }
  dispatch thunk of SingleUserDataDataSource.cardStackChangeDelegate.setter();
  swift_release(v31);
  v36 = dispatch thunk of SingleUserDataDataSource.asProfileHeader(healthStore:healthExperienceStore:)(a1, a2);
  v38 = v37;
  v40 = v39;
  sub_1000076D8(0, &qword_1000EFC60, (uint64_t (*)(uint64_t))sub_100087D30, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for _ContiguousArrayStorage);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1000B1580;
  *(_QWORD *)(inited + 32) = 1;
  v42 = inited + 32;
  v43 = sub_100087D9C();
  v44 = sub_100087C24(&qword_1000EFC58, &qword_1000EFC50, (uint64_t (*)(uint64_t))&type metadata accessor for NoticesDataSource, sub_100087BE4);
  *(_QWORD *)(inited + 40) = v15;
  *(_QWORD *)(inited + 48) = v43;
  *(_QWORD *)(inited + 56) = v44;
  *(_QWORD *)(inited + 64) = 2;
  *(_QWORD *)(inited + 72) = v36;
  *(_QWORD *)(inited + 80) = v38;
  *(_QWORD *)(inited + 88) = v40;
  v45 = sub_10007EAB4(inited);
  swift_setDeallocating(inited);
  sub_100087D30(0);
  v47 = v46;
  swift_retain(v15);
  swift_unknownObjectRetain(v36);
  swift_arrayDestroy(v42, 2, v47);
  v48 = type metadata accessor for SizeClassResponsiveDataSource(0);
  swift_allocObject(v48, *(unsigned int *)(v48 + 48), *(unsigned __int16 *)(v48 + 52));
  swift_unknownObjectRetain(v36);
  SizeClassResponsiveDataSource.init(dataSources:defaultDataSource:)(v45, v36, v38, v40);
  swift_release(v31);
  swift_unknownObjectRelease(v36);
  swift_release(v15);
}

uint64_t sub_1000871A8(_QWORD *a1, void *a2, void *a3)
{
  uint64_t v3;
  uint64_t v4;
  void *v8;
  id v9;
  id v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  id v29;
  uint64_t v30;
  _QWORD v32[5];

  v4 = v3;
  sub_100028F08((uint64_t)a1, v4 + qword_1000EFB58);
  *(_QWORD *)(v4 + qword_1000EFB60) = a2;
  sub_100028F08((uint64_t)a1, (uint64_t)v32);
  v8 = (void *)objc_opt_self(HKProfileIdentifier);
  swift_retain(v4);
  v9 = a2;
  v10 = objc_msgSend(v8, "primaryProfile");
  v11 = objc_allocWithZone((Class)type metadata accessor for PersonalizedFeedDataSource(0));
  v12 = sub_10005C42C(2, v32, (uint64_t)v10, a3, 1);

  v13 = qword_1000EFB48;
  *(_QWORD *)(v4 + qword_1000EFB48) = v12;
  v14 = type metadata accessor for MutableArrayDataSourceWithLayout(0);
  sub_100013A0C(0);
  v16 = swift_allocObject(v15, 40, 7);
  *(_OWORD *)(v16 + 16) = xmmword_1000B11F0;
  sub_100007730(0, (unint64_t *)&qword_1000ECA70, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for _ContiguousArrayStorage);
  v18 = swift_allocObject(v17, 72, 7);
  *(_OWORD *)(v18 + 16) = xmmword_1000B11F0;
  *(_QWORD *)(v18 + 56) = type metadata accessor for ContentConfigurationItem(0);
  *(_QWORD *)(v18 + 64) = sub_100013198(&qword_1000ECA80, (uint64_t (*)(uint64_t))&type metadata accessor for ContentConfigurationItem, (uint64_t)&protocol conformance descriptor for ContentConfigurationItem);
  v19 = sub_100007E0C((_QWORD *)(v18 + 32));
  sub_100086478((uint64_t)a1, v9, (uint64_t)v19);
  *(_QWORD *)(v16 + 32) = v18;
  v20 = MutableArrayDataSourceWithLayout.__allocating_init(_:collapseEmptySections:layoutConstructor:)(v16, 1, sub_10008589C, 0);
  v21 = SnapshotDataSource.withCellRegistration(_:)(sub_100037A38, 0, v14, &protocol witness table for MutableArrayDataSource);
  swift_release(v20);
  v22 = qword_1000EFB50;
  *(_QWORD *)(v4 + qword_1000EFB50) = v21;
  swift_release(v4);
  sub_100023998(0);
  v24 = swift_allocObject(v23, 64, 7);
  *(_OWORD *)(v24 + 16) = xmmword_1000B1580;
  v25 = *(void **)(v4 + v13);
  v26 = sub_10004A030();
  *(_QWORD *)(v24 + 32) = v25;
  *(_QWORD *)(v24 + 40) = v26;
  v27 = *(_QWORD *)(v4 + v22);
  v28 = sub_100013198(&qword_1000EDAC0, (uint64_t (*)(uint64_t))sub_100087C98, (uint64_t)&protocol conformance descriptor for CellRegistering<A>);
  *(_QWORD *)(v24 + 48) = v27;
  *(_QWORD *)(v24 + 56) = v28;
  v29 = v25;
  swift_retain(v27);
  v30 = CompoundSectionedDataSource.init(_:)(v24);
  _s6Health23OpenSleepScheduleIntentVwxx_0(a1);
  return v30;
}

uint64_t sub_10008742C(uint64_t a1, void *a2, void *a3, void *a4, void *a5)
{
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  id v22;
  id v23;
  void *v24;
  uint64_t v25;
  id v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  id v30;
  id v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t result;
  id v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD v40[5];

  v37 = a2;
  sub_100026E84(0, &qword_1000EFBD0, (uint64_t (*)(uint64_t))sub_100086BE8, sub_100086D2C, (uint64_t (*)(uint64_t, uint64_t, uint64_t))&type metadata accessor for HideableDataSource.Visibility);
  v38 = *(_QWORD *)(v9 - 8);
  v39 = v9;
  __chkstk_darwin(v9);
  v11 = (char *)&v37 - v10;
  sub_1000076D8(0, (unint64_t *)&qword_1000ECF98, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
  v13 = __chkstk_darwin(v12);
  v15 = (char *)&v37 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  v17 = (char *)&v37 - v16;
  v18 = type metadata accessor for Date(0);
  v19 = *(_QWORD *)(v18 - 8);
  __chkstk_darwin(v18);
  v21 = (char *)&v37 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  Feed.Kind.earliestDisplayDateUpdated.getter(2);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v19 + 48))(v17, 1, v18) == 1)
  {
    sub_100014BD8((uint64_t)v17);
    result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000035, 0x80000001000BD680, "Health/SummaryFeedDataSource.swift", 34, 2, 236, 0);
    __break(1u);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v19 + 32))(v21, v17, v18);
    (*(void (**)(char *, char *, uint64_t))(v19 + 16))(v15, v21, v18);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v19 + 56))(v15, 0, 1, v18);
    v22 = objc_allocWithZone((Class)type metadata accessor for FeedObjectDataSource(0));
    v23 = a3;
    v24 = (void *)sub_1000276A8(2, a3, (uint64_t)v15, a4);
    sub_100086C88(0);
    v25 = type metadata accessor for LoadingPersonalizedHighlightsDataSource(0);
    swift_allocObject(v25, *(unsigned int *)(v25 + 48), *(unsigned __int16 *)(v25 + 52));
    v26 = v24;
    v27 = sub_1000102B0();
    v28 = PrimarySecondaryDataSource.__allocating_init(primaryDataSource:secondaryDataSource:activeDataSourceResolver:)(v26, v27, sub_1000860AC, 0);
    sub_100028F08(a1, (uint64_t)v40);
    v29 = type metadata accessor for HighlightsFeedWithShowAllHighlightsDataSource(0);
    swift_allocObject(v29, *(unsigned int *)(v29 + 48), *(unsigned __int16 *)(v29 + 52));
    v30 = a5;
    v31 = v37;
    v32 = sub_1000871A8(v40, v31, a5);

    sub_100086BE8(0);
    swift_retain(v32);
    swift_retain(v28);
    v33 = PrimarySecondaryDataSource.__allocating_init(primaryDataSource:secondaryDataSource:activeDataSourceResolver:)(v32, v28, sub_100086160, 0);
    (*(void (**)(char *, _QWORD, uint64_t))(v38 + 104))(v11, enum case for HideableDataSource.Visibility.visible<A>(_:), v39);
    sub_100026E84(0, &qword_1000EFC28, (uint64_t (*)(uint64_t))sub_100086BE8, sub_100086D2C, (uint64_t (*)(uint64_t, uint64_t, uint64_t))&type metadata accessor for HideableDataSource);
    swift_allocObject(v34, *(unsigned int *)(v34 + 48), *(unsigned __int16 *)(v34 + 52));
    v35 = HideableDataSource.init(source:visibility:)(v33, v11);

    swift_release(v32);
    swift_release(v28);
    (*(void (**)(char *, uint64_t))(v19 + 8))(v21, v18);
    return v35;
  }
  return result;
}

uint64_t sub_1000877E0(_QWORD *a1, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  void *v20;
  uint64_t v21;
  double v22;
  void (*v23)(char *, uint64_t);
  uint64_t v24;
  void *v25;
  void *v26;
  id v27;
  id v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  void *v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  _QWORD aBlock[5];
  uint64_t v48;

  v40 = a2;
  v42 = type metadata accessor for DispatchWorkItemFlags(0);
  v45 = *(_QWORD *)(v42 - 8);
  __chkstk_darwin(v42);
  v41 = (char *)&v37 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for DispatchQoS(0);
  v43 = *(_QWORD *)(v4 - 8);
  v44 = v4;
  __chkstk_darwin(v4);
  v39 = (char *)&v37 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for DispatchTime(0);
  v7 = *(_QWORD *)(v6 - 8);
  v38 = v6;
  v8 = __chkstk_darwin(v6);
  v10 = (char *)&v37 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v12 = (char *)&v37 - v11;
  v13 = type metadata accessor for DispatchQoS.QoSClass(0);
  v14 = *(_QWORD *)(v13 - 8);
  __chkstk_darwin(v13);
  v16 = (char *)&v37 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = a1[3];
  v18 = a1[4];
  sub_100012E04(a1, v17);
  v19 = (void *)dispatch thunk of HealthExperienceStore.sharedBackgroundContext.getter(v17, v18);
  sub_100006D10(0, (unint64_t *)&qword_1000ED910, OS_dispatch_queue_ptr);
  (*(void (**)(char *, _QWORD, uint64_t))(v14 + 104))(v16, enum case for DispatchQoS.QoSClass.userInitiated(_:), v13);
  v20 = (void *)static OS_dispatch_queue.global(qos:)(v16);
  v21 = (*(uint64_t (**)(char *, uint64_t))(v14 + 8))(v16, v13);
  static DispatchTime.now()(v21);
  type metadata accessor for SummaryTabFeedPopulationManager(0);
  v22 = static SummaryTabFeedPopulationManager.highlightsSectionTimeout.getter();
  + infix(_:_:)(v10, v22);
  v23 = *(void (**)(char *, uint64_t))(v7 + 8);
  v23(v10, v6);
  v24 = swift_allocObject(&unk_1000E1718, 32, 7);
  v25 = v40;
  *(_QWORD *)(v24 + 16) = v19;
  *(_QWORD *)(v24 + 24) = v25;
  aBlock[4] = sub_100087BD4;
  v48 = v24;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100006988;
  aBlock[3] = &unk_1000E1730;
  v26 = _Block_copy(aBlock);
  v27 = v25;
  v28 = v19;
  v29 = v39;
  static DispatchQoS.unspecified.getter(v28);
  v46 = _swiftEmptyArrayStorage;
  v30 = sub_100013198((unint64_t *)&qword_1000EDBE0, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  sub_1000076D8(0, (unint64_t *)&qword_1000ED920, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Array);
  v32 = v31;
  v33 = sub_100013C8C();
  v35 = v41;
  v34 = v42;
  dispatch thunk of SetAlgebra.init<A>(_:)(&v46, v32, v33, v42, v30);
  OS_dispatch_queue.asyncAfter(deadline:qos:flags:execute:)(v12, v29, v35, v26);
  _Block_release(v26);

  (*(void (**)(char *, uint64_t))(v45 + 8))(v35, v34);
  (*(void (**)(char *, uint64_t))(v43 + 8))(v29, v44);
  v23(v12, v38);
  return swift_release(v48);
}

uint64_t sub_100087B30()
{
  uint64_t v0;

  swift_weakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100087B58()
{
  uint64_t *v0;

  return sub_1000859FC(v0[2], v0[3], v0[4], v0[5]);
}

uint64_t sub_100087B68()
{
  _QWORD *v0;

  swift_release(v0[2]);
  if (v0[3])
    swift_release(v0[4]);
  return swift_deallocObject(v0, 48, 7);
}

uint64_t sub_100087B9C()
{
  uint64_t v0;

  return sub_100085C28(*(_QWORD *)(v0 + 16), *(void (**)(void))(v0 + 24), *(_QWORD *)(v0 + 32));
}

uint64_t sub_100087BA8()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

void sub_100087BD4()
{
  uint64_t v0;

  sub_1000861A8(*(void **)(v0 + 16), *(void **)(v0 + 24));
}

void sub_100087BDC()
{
  uint64_t v0;

  sub_100086268(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t sub_100087BE4()
{
  return sub_100013198(&qword_1000EFC00, (uint64_t (*)(uint64_t))&type metadata accessor for NoticesDataSource, (uint64_t)&protocol conformance descriptor for FetchedResultsControllerDataSource<A>);
}

uint64_t sub_100087C04()
{
  uint64_t v0;

  return sub_100085790(v0 + 16, *(void **)(v0 + 56), 4);
}

uint64_t sub_100087C24(unint64_t *a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(void))
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    sub_100026E84(255, a2, a3, a4, (uint64_t (*)(uint64_t, uint64_t, uint64_t))&type metadata accessor for HideableDataSource);
    result = swift_getWitnessTable(&protocol conformance descriptor for HideableDataSource<A>, v6);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100087C70()
{
  uint64_t v0;

  return sub_100085790(v0 + 16, *(void **)(v0 + 56), 0);
}

uint64_t sub_100087C90(uint64_t a1)
{
  uint64_t v1;

  return sub_100085838(a1, v1);
}

void sub_100087C98(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_1000EDAC8)
  {
    v2 = type metadata accessor for MutableArrayDataSourceWithLayout(255);
    v3 = type metadata accessor for CellRegistering(a1, v2, &protocol witness table for MutableArrayDataSource);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_1000EDAC8);
  }
}

uint64_t sub_100087CF8()
{
  uint64_t v0;

  _s6Health23OpenSleepScheduleIntentVwxx_0((_QWORD *)(v0 + 16));

  return swift_deallocObject(v0, 64, 7);
}

void sub_100087D24(void *a1)
{
  uint64_t v1;

  sub_100086A4C(a1, v1 + 16, *(void **)(v1 + 56));
}

void sub_100087D30(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t TupleTypeMetadata2;
  uint64_t v6;

  if (!qword_1000EFC68)
  {
    type metadata accessor for UIUserInterfaceSizeClass(255);
    v3 = v2;
    v4 = sub_10007F578();
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2(a1, v3, v4, 0, 0);
    if (!v6)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_1000EFC68);
  }
}

unint64_t sub_100087D9C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000EFC70;
  if (!qword_1000EFC70)
  {
    sub_100026E84(255, &qword_1000EFC50, (uint64_t (*)(uint64_t))&type metadata accessor for NoticesDataSource, sub_100087BE4, (uint64_t (*)(uint64_t, uint64_t, uint64_t))&type metadata accessor for HideableDataSource);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> HideableDataSource<A>, v1);
    atomic_store(result, (unint64_t *)&qword_1000EFC70);
  }
  return result;
}

uint64_t sub_100087E30()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void (*v21)(char *, uint64_t, uint64_t);
  char *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  char *v32;

  v0 = type metadata accessor for String.LocalizationValue(0);
  v1 = __chkstk_darwin(v0);
  v32 = (char *)&v28 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v1);
  v4 = (char *)&v28 - v3;
  sub_1000076D8(0, &qword_1000EC948, (uint64_t (*)(uint64_t))&type metadata accessor for LocalizedStringResource, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
  __chkstk_darwin(v5);
  v30 = (char *)&v28 - v6;
  v7 = type metadata accessor for LocalizedStringResource.BundleDescription(0);
  v8 = *(_QWORD *)(v7 - 8);
  v29 = v7;
  __chkstk_darwin(v7);
  v10 = (char *)&v28 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for Locale(0);
  __chkstk_darwin(v11);
  v13 = (char *)&v28 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for LocalizedStringResource(0);
  v15 = *(_QWORD *)(v14 - 8);
  __chkstk_darwin(v14);
  v17 = (char *)&v28 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = type metadata accessor for TypeDisplayRepresentation(0);
  sub_10001C884(v18, qword_1000F11A8);
  v31 = sub_10001C86C(v18, (uint64_t)qword_1000F11A8);
  v19 = String.LocalizationValue.init(stringLiteral:)(0x542068746C616548, 0xEA00000000006261);
  static Locale.current.getter(v19);
  v20 = enum case for LocalizedStringResource.BundleDescription.main(_:);
  v21 = *(void (**)(char *, uint64_t, uint64_t))(v8 + 104);
  v21(v10, enum case for LocalizedStringResource.BundleDescription.main(_:), v7);
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v4, 0x6E65746E49707041, 0xEA00000000007374, v13, v10, 0, 0, 256);
  v22 = v30;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v15 + 56))(v30, 1, 1, v14);
  sub_1000076D8(0, &qword_1000EE710, (uint64_t (*)(uint64_t))&type metadata accessor for LocalizedStringResource, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for _ContiguousArrayStorage);
  v24 = swift_allocObject(v23, ((*(unsigned __int8 *)(v15 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80))+ *(_QWORD *)(v15 + 72), *(unsigned __int8 *)(v15 + 80) | 7);
  *(_OWORD *)(v24 + 16) = xmmword_1000B11F0;
  v25 = v32;
  v26 = String.LocalizationValue.init(stringLiteral:)(0x502068746C616548, 0xEB00000000656E61);
  static Locale.current.getter(v26);
  v21(v10, v20, v29);
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v25, 0x6E65746E49707041, 0xEA00000000007374, v13, v10, 0, 0, 256);
  return TypeDisplayRepresentation.init(name:numericFormat:synonyms:)(v17, v22, v24);
}

uint64_t sub_10008815C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  unint64_t v11;
  unint64_t v12;

  sub_100089C24(0, &qword_1000EFD28, (uint64_t (*)(void))sub_10007F87C, (uint64_t (*)(uint64_t, ValueMetadata *, uint64_t))&type metadata accessor for EnumURLRepresentation);
  v1 = v0;
  sub_10001C884(v0, qword_1000F11C0);
  sub_10001C86C(v1, (uint64_t)qword_1000F11C0);
  sub_1000076D8(0, &qword_1000EFD30, (uint64_t (*)(uint64_t))sub_100089BA8, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for _ContiguousArrayStorage);
  v3 = v2;
  sub_100089BA8(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(_QWORD *)(v5 + 72);
  v7 = *(unsigned __int8 *)(v5 + 80);
  v8 = (v7 + 32) & ~v7;
  v9 = swift_allocObject(v3, v8 + 3 * v6, v7 | 7);
  *(_OWORD *)(v9 + 16) = xmmword_1000B25C0;
  v10 = (_BYTE *)(v9 + v8);
  *v10 = 2;
  v11 = sub_10007F87C();
  EnumURLRepresentation.EnumSingleURLRepresentation.init(stringLiteral:)(0xD000000000000017, 0x80000001000BD7F0, &type metadata for OpenTabIntent.Tab, v11);
  v10[v6] = 0;
  EnumURLRepresentation.EnumSingleURLRepresentation.init(stringLiteral:)(0xD000000000000018, 0x80000001000BD810, &type metadata for OpenTabIntent.Tab, v11);
  v10[2 * v6] = 1;
  EnumURLRepresentation.EnumSingleURLRepresentation.init(stringLiteral:)(0xD000000000000020, 0x80000001000BD830, &type metadata for OpenTabIntent.Tab, v11);
  v12 = sub_10007C988(v9);
  return EnumURLRepresentation.init(_:)(v12, &type metadata for OpenTabIntent.Tab, v11);
}

uint64_t sub_100088314(char a1)
{
  return *(_QWORD *)&aSummary_3[8 * a1];
}

uint64_t sub_100088334(char *a1, char *a2)
{
  return sub_100082084(*a1, *a2);
}

unint64_t sub_100088344()
{
  unint64_t result;

  result = qword_1000EFC78;
  if (!qword_1000EFC78)
  {
    result = swift_getWitnessTable(&unk_1000B56D4, &type metadata for OpenTabIntent.Tab);
    atomic_store(result, (unint64_t *)&qword_1000EFC78);
  }
  return result;
}

Swift::Int sub_100088388()
{
  char *v0;

  return sub_10008AFA0(*v0);
}

uint64_t sub_100088390(uint64_t a1)
{
  char *v1;

  return sub_10007D260(a1, *v1);
}

Swift::Int sub_100088398(uint64_t a1)
{
  char *v1;

  return sub_10007D2A0(a1, *v1);
}

unint64_t sub_1000883A0@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = sub_100089C80(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_1000883CC@<X0>(uint64_t *a1@<X8>)
{
  char *v1;
  uint64_t result;
  uint64_t v4;

  result = sub_100088314(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

unint64_t sub_1000883F8()
{
  unint64_t result;

  result = qword_1000EFC80;
  if (!qword_1000EFC80)
  {
    result = swift_getWitnessTable(&unk_1000B57EC, &type metadata for OpenTabIntent.Tab);
    atomic_store(result, (unint64_t *)&qword_1000EFC80);
  }
  return result;
}

unint64_t sub_100088440()
{
  unint64_t result;

  result = qword_1000EFC88;
  if (!qword_1000EFC88)
  {
    result = swift_getWitnessTable(&unk_1000B5824, &type metadata for OpenTabIntent.Tab);
    atomic_store(result, (unint64_t *)&qword_1000EFC88);
  }
  return result;
}

unint64_t sub_100088488()
{
  unint64_t result;

  result = qword_1000EFC90;
  if (!qword_1000EFC90)
  {
    result = swift_getWitnessTable(&unk_1000B573C, &type metadata for OpenTabIntent.Tab);
    atomic_store(result, (unint64_t *)&qword_1000EFC90);
  }
  return result;
}

unint64_t sub_1000884D4()
{
  unint64_t result;

  result = qword_1000EFC98;
  if (!qword_1000EFC98)
  {
    result = swift_getWitnessTable(&unk_1000B5854, &type metadata for OpenTabIntent.Tab);
    atomic_store(result, (unint64_t *)&qword_1000EFC98);
  }
  return result;
}

uint64_t sub_100088518@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  if (qword_1000EC128 != -1)
    swift_once(&qword_1000EC128, sub_10008815C);
  sub_100089C24(0, &qword_1000EFD28, (uint64_t (*)(void))sub_10007F87C, (uint64_t (*)(uint64_t, ValueMetadata *, uint64_t))&type metadata accessor for EnumURLRepresentation);
  v3 = v2;
  v4 = sub_10001C86C(v2, (uint64_t)qword_1000F11C0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 16))(a1, v4, v3);
}

unint64_t sub_1000885A4()
{
  unint64_t result;

  result = qword_1000EFCA0;
  if (!qword_1000EFCA0)
  {
    result = swift_getWitnessTable(&unk_1000B587C, &type metadata for OpenTabIntent.Tab);
    atomic_store(result, (unint64_t *)&qword_1000EFCA0);
  }
  return result;
}

unint64_t sub_1000885EC()
{
  unint64_t result;

  result = qword_1000EFCA8;
  if (!qword_1000EFCA8)
  {
    result = swift_getWitnessTable(&unk_1000B58A4, &type metadata for OpenTabIntent.Tab);
    atomic_store(result, (unint64_t *)&qword_1000EFCA8);
  }
  return result;
}

unint64_t sub_100088638()
{
  unint64_t result;

  result = qword_1000EFCB0;
  if (!qword_1000EFCB0)
  {
    result = swift_getWitnessTable(&unk_1000B5924, &type metadata for OpenTabIntent.Tab);
    atomic_store(result, (unint64_t *)&qword_1000EFCB0);
  }
  return result;
}

uint64_t sub_10008867C(uint64_t a1)
{
  uint64_t v1;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = sub_1000894C8();
  v4 = URLRepresentableEnum.urlRepresentationParameter.getter(a1, v3);
  return sub_10005B478(*(uint64_t (**)(uint64_t, uint64_t))(v1 + 8), v1, v4, v5);
}

uint64_t sub_1000886C4@<X0>(uint64_t a1@<X8>)
{
  return sub_100052180(&qword_1000EC120, (uint64_t (*)(_QWORD))&type metadata accessor for TypeDisplayRepresentation, (uint64_t)qword_1000F11A8, (uint64_t)sub_100087E30, a1);
}

uint64_t sub_1000886E8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10005AD40(a1, a2, a3, (uint64_t (*)(void))sub_10007F87C, (uint64_t)&opaque type descriptor for <<opaque return type of static AppEnum.defaultResolverSpecification>>);
}

uint64_t sub_1000886FC(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10007F87C();
  return static AppEnum.defaultResolverSpecification.getter(a1, v2);
}

unint64_t sub_100088738()
{
  unint64_t result;

  result = qword_1000EFCC0;
  if (!qword_1000EFCC0)
  {
    result = swift_getWitnessTable(&unk_1000B5964, &type metadata for OpenTabIntent.Tab);
    atomic_store(result, (unint64_t *)&qword_1000EFCC0);
  }
  return result;
}

unint64_t sub_100088780()
{
  unint64_t result;

  result = qword_1000EFCC8;
  if (!qword_1000EFCC8)
  {
    result = swift_getWitnessTable(&unk_1000B598C, &type metadata for OpenTabIntent.Tab);
    atomic_store(result, (unint64_t *)&qword_1000EFCC8);
  }
  return result;
}

uint64_t sub_1000887CC(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100088638();
  return CaseDisplayRepresentable.localizedStringResource.getter(a1, v2);
}

unint64_t sub_100088808()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000EFCD0;
  if (!qword_1000EFCD0)
  {
    sub_100088850();
    result = swift_getWitnessTable(&protocol conformance descriptor for [A], v1);
    atomic_store(result, (unint64_t *)&qword_1000EFCD0);
  }
  return result;
}

void sub_100088850()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1000EFCD8)
  {
    v0 = type metadata accessor for Array(0, &type metadata for OpenTabIntent.Tab);
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1000EFCD8);
  }
}

void sub_1000888A4(_QWORD *a1@<X8>)
{
  *a1 = &off_1000DC690;
}

unint64_t sub_1000888B8()
{
  unint64_t result;

  result = qword_1000EFCE0;
  if (!qword_1000EFCE0)
  {
    result = swift_getWitnessTable(&unk_1000B5A44, &type metadata for OpenTabIntent);
    atomic_store(result, (unint64_t *)&qword_1000EFCE0);
  }
  return result;
}

uint64_t sub_1000888FC()
{
  uint64_t v0;
  uint64_t v1;
  _BYTE *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE v13[16];

  v0 = type metadata accessor for String.LocalizationValue(0);
  __chkstk_darwin(v0);
  v2 = &v13[-((v1 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v3 = type metadata accessor for LocalizedStringResource.BundleDescription(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = &v13[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v7 = type metadata accessor for Locale(0);
  __chkstk_darwin(v7);
  v9 = &v13[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v10 = type metadata accessor for LocalizedStringResource(0);
  sub_10001C884(v10, qword_1000F11D8);
  sub_10001C86C(v10, (uint64_t)qword_1000F11D8);
  v11 = String.LocalizationValue.init(stringLiteral:)(0x626154206E65704FLL, 0xE800000000000000);
  static Locale.current.getter(v11);
  (*(void (**)(_BYTE *, _QWORD, uint64_t))(v4 + 104))(v6, enum case for LocalizedStringResource.BundleDescription.main(_:), v3);
  return LocalizedStringResource.init(_:table:locale:bundle:comment:)(v2, 0x6E65746E49707041, 0xEA00000000007374, v9, v6, 0, 0, 256);
}

uint64_t sub_100088A78()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD v22[2];

  sub_1000076D8(0, &qword_1000EC948, (uint64_t (*)(uint64_t))&type metadata accessor for LocalizedStringResource, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
  __chkstk_darwin(v0);
  v2 = (char *)v22 - v1;
  v22[0] = type metadata accessor for LocalizedStringResource.BundleDescription(0);
  v3 = *(_QWORD *)(v22[0] - 8);
  __chkstk_darwin(v22[0]);
  v5 = (char *)v22 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for Locale(0);
  __chkstk_darwin(v6);
  v8 = (char *)v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for String.LocalizationValue(0);
  __chkstk_darwin(v9);
  v11 = (char *)v22 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for LocalizedStringResource(0);
  v13 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v15 = (char *)v22 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000076D8(0, &qword_1000EC940, (uint64_t (*)(uint64_t))&type metadata accessor for IntentDescription, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
  v17 = v16;
  sub_10001C884(v16, qword_1000F11F0);
  v18 = sub_10001C86C(v17, (uint64_t)qword_1000F11F0);
  v19 = String.LocalizationValue.init(stringLiteral:)(0xD000000000000041, 0x80000001000BD780);
  static Locale.current.getter(v19);
  (*(void (**)(char *, _QWORD, _QWORD))(v3 + 104))(v5, enum case for LocalizedStringResource.BundleDescription.main(_:), v22[0]);
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v11, 0x6E65746E49707041, 0xEA00000000007374, v8, v5, 0, 0, 256);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v13 + 56))(v2, 1, 1, v12);
  IntentDescription.init(_:categoryName:searchKeywords:)(v15, v2, _swiftEmptyArrayStorage);
  v20 = type metadata accessor for IntentDescription(0);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 56))(v18, 0, 1, v20);
}

uint64_t sub_100088CF0(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  unint64_t v5;

  v4 = sub_100089440();
  v5 = sub_1000894C8();
  return static URLRepresentableIntent<>.urlRepresentation.getter(a1, v4, a2, v5);
}

unint64_t sub_100088D48()
{
  unint64_t result;

  result = qword_1000EFCE8;
  if (!qword_1000EFCE8)
  {
    result = swift_getWitnessTable(&unk_1000B5AFC, &type metadata for OpenTabIntent);
    atomic_store(result, (unint64_t *)&qword_1000EFCE8);
  }
  return result;
}

unint64_t sub_100088D90()
{
  unint64_t result;

  result = qword_1000EFCF0;
  if (!qword_1000EFCF0)
  {
    result = swift_getWitnessTable(&unk_1000B5B24, &type metadata for OpenTabIntent);
    atomic_store(result, (unint64_t *)&qword_1000EFCF0);
  }
  return result;
}

uint64_t sub_100088DD4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10005AD40(a1, a2, a3, (uint64_t (*)(void))sub_10001AE6C, (uint64_t)&opaque type descriptor for <<opaque return type of static AppIntent.parameterSummary>>);
}

uint64_t sub_100088DE8@<X0>(uint64_t a1@<X8>)
{
  return sub_100052180(&qword_1000EC130, (uint64_t (*)(_QWORD))&type metadata accessor for LocalizedStringResource, (uint64_t)qword_1000F11D8, (uint64_t)sub_1000888FC, a1);
}

uint64_t sub_100088E0C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100089440();
  return static OpenIntent.openAppWhenRun.getter(a1, v2);
}

uint64_t sub_100088E34@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  if (qword_1000EC138 != -1)
    swift_once(&qword_1000EC138, sub_100088A78);
  sub_1000076D8(0, &qword_1000EC940, (uint64_t (*)(uint64_t))&type metadata accessor for IntentDescription, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
  v3 = sub_10001C86C(v2, (uint64_t)qword_1000F11F0);
  return sub_10005566C(v3, a1);
}

uint64_t sub_100088EA8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;

  v4 = (_QWORD *)swift_task_alloc(async function pointer to URLRepresentableIntent<>.perform()[1]);
  *(_QWORD *)(v2 + 16) = v4;
  v5 = sub_100089440();
  v6 = sub_100089484();
  v7 = sub_1000894C8();
  *v4 = v2;
  v4[1] = sub_10005AECC;
  return URLRepresentableIntent<>.perform()(a2, v5, v6, v7);
}

uint64_t sub_100088F2C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = sub_100089054();
  *a1 = result;
  return result;
}

uint64_t sub_100088F50(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10001AE6C();
  return static AppIntent.persistentIdentifier.getter(a1, v2);
}

ValueMetadata *type metadata accessor for OpenTabIntent()
{
  return &type metadata for OpenTabIntent;
}

uint64_t storeEnumTagSinglePayload for OpenTabIntent.Tab(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_100088FD4 + 4 * byte_1000B56CD[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_100089008 + 4 * byte_1000B56C8[v4]))();
}

uint64_t sub_100089008(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100089010(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100089018);
  return result;
}

uint64_t sub_100089024(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10008902CLL);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_100089030(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100089038(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for OpenTabIntent.Tab()
{
  return &type metadata for OpenTabIntent.Tab;
}

uint64_t sub_100089054()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  void (*v27)(char *, uint64_t, uint64_t);
  char *v28;
  uint64_t v29;
  uint64_t v30;
  void (*v31)(char *, uint64_t, uint64_t, uint64_t);
  char *v32;
  char *v33;
  char *v34;
  unint64_t v35;
  uint64_t v37;
  char *v38;
  char *v39;
  char *v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  char v44[3];

  v0 = type metadata accessor for InputConnectionBehavior(0);
  v42 = *(_QWORD *)(v0 - 8);
  v43 = v0;
  __chkstk_darwin(v0);
  v41 = (char *)&v37 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000076D8(0, &qword_1000EE508, (uint64_t (*)(uint64_t))&type metadata accessor for IntentDialog, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
  v3 = __chkstk_darwin(v2);
  v40 = (char *)&v37 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  v39 = (char *)&v37 - v5;
  v6 = type metadata accessor for String.LocalizationValue(0);
  v7 = __chkstk_darwin(v6);
  v9 = (char *)&v37 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v38 = (char *)&v37 - v10;
  sub_1000076D8(0, &qword_1000EC948, (uint64_t (*)(uint64_t))&type metadata accessor for LocalizedStringResource, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
  __chkstk_darwin(v11);
  v13 = (char *)&v37 - v12;
  v14 = type metadata accessor for LocalizedStringResource.BundleDescription(0);
  v15 = *(_QWORD *)(v14 - 8);
  __chkstk_darwin(v14);
  v17 = (char *)&v37 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = type metadata accessor for Locale(0);
  __chkstk_darwin(v18);
  v20 = (char *)&v37 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = type metadata accessor for LocalizedStringResource(0);
  v22 = *(_QWORD *)(v21 - 8);
  __chkstk_darwin(v21);
  v24 = (char *)&v37 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = String.LocalizationValue.init(stringLiteral:)(6447444, 0xE300000000000000);
  static Locale.current.getter(v25);
  v26 = enum case for LocalizedStringResource.BundleDescription.main(_:);
  v27 = *(void (**)(char *, uint64_t, uint64_t))(v15 + 104);
  v27(v17, enum case for LocalizedStringResource.BundleDescription.main(_:), v14);
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v9, 0x6E65746E49707041, 0xEA00000000007374, v20, v17, 0, 0, 256);
  v28 = v38;
  String.LocalizationValue.init(stringLiteral:)(0xD00000000000001CLL, 0x80000001000BD760);
  sub_100089C24(0, &qword_1000EFD00, (uint64_t (*)(void))sub_10001B4F0, (uint64_t (*)(uint64_t, ValueMetadata *, uint64_t))&type metadata accessor for IntentParameter);
  v37 = v29;
  static Locale.current.getter(v29);
  v27(v17, v26, v14);
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v28, 0x6E65746E49707041, 0xEA00000000007374, v20, v17, 0, 0, 256);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v22 + 56))(v13, 0, 1, v21);
  v44[0] = 3;
  v30 = type metadata accessor for IntentDialog(0);
  v31 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v30 - 8) + 56);
  v32 = v39;
  v31(v39, 1, 1, v30);
  v33 = v40;
  v31(v40, 1, 1, v30);
  v34 = v41;
  (*(void (**)(char *, _QWORD, uint64_t))(v42 + 104))(v41, enum case for InputConnectionBehavior.default(_:), v43);
  v35 = sub_10007F87C();
  return IntentParameter<>.init(title:description:default:requestValueDialog:requestDisambiguationDialog:inputConnectionBehavior:supportedValues:)(v24, v13, v44, v32, v33, v34, &off_1000DB930, v35);
}

unint64_t sub_100089440()
{
  unint64_t result;

  result = qword_1000EFD08;
  if (!qword_1000EFD08)
  {
    result = swift_getWitnessTable(&unk_1000B59C4, &type metadata for OpenTabIntent);
    atomic_store(result, (unint64_t *)&qword_1000EFD08);
  }
  return result;
}

unint64_t sub_100089484()
{
  unint64_t result;

  result = qword_1000EFD10;
  if (!qword_1000EFD10)
  {
    result = swift_getWitnessTable(&unk_1000B5A14, &type metadata for OpenTabIntent);
    atomic_store(result, (unint64_t *)&qword_1000EFD10);
  }
  return result;
}

unint64_t sub_1000894C8()
{
  unint64_t result;

  result = qword_1000EFD18;
  if (!qword_1000EFD18)
  {
    result = swift_getWitnessTable(&unk_1000B57B4, &type metadata for OpenTabIntent.Tab);
    atomic_store(result, (unint64_t *)&qword_1000EFD18);
  }
  return result;
}

unint64_t sub_10008950C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  void (*v44)(char *, uint64_t, uint64_t, uint64_t);
  char *v45;
  uint64_t v46;
  char *v47;
  char *v48;
  uint64_t v49;
  char *v50;
  char *v51;
  uint64_t v52;
  char *v53;
  char *v54;
  char *v55;
  char *v56;
  uint64_t v57;
  char *v58;
  char *v59;
  char *v60;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  unsigned int v65;
  char *v66;
  uint64_t v67;
  char *v68;
  char *v69;
  uint64_t v70;
  char *v71;
  char *v72;
  char *v73;
  char *v74;
  char *v75;
  char *v76;
  char *v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;

  v0 = type metadata accessor for String.LocalizationValue(0);
  v1 = __chkstk_darwin(v0);
  v76 = (char *)&v62 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = __chkstk_darwin(v1);
  v73 = (char *)&v62 - v4;
  __chkstk_darwin(v3);
  v6 = (char *)&v62 - v5;
  sub_1000076D8(0, &qword_1000EE4F0, (uint64_t (*)(uint64_t))&type metadata accessor for DisplayRepresentation.Image, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
  v8 = __chkstk_darwin(v7);
  v77 = (char *)&v62 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __chkstk_darwin(v8);
  v74 = (char *)&v62 - v11;
  __chkstk_darwin(v10);
  v69 = (char *)&v62 - v12;
  sub_1000076D8(0, &qword_1000EC948, (uint64_t (*)(uint64_t))&type metadata accessor for LocalizedStringResource, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
  v14 = __chkstk_darwin(v13);
  v75 = (char *)&v62 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = __chkstk_darwin(v14);
  v72 = (char *)&v62 - v17;
  __chkstk_darwin(v16);
  v68 = (char *)&v62 - v18;
  v19 = type metadata accessor for LocalizedStringResource.BundleDescription(0);
  v20 = *(_QWORD *)(v19 - 8);
  v80 = v19;
  v81 = v20;
  __chkstk_darwin(v19);
  v78 = (char *)&v62 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = type metadata accessor for Locale(0);
  __chkstk_darwin(v22);
  v24 = (char *)&v62 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v79 = type metadata accessor for LocalizedStringResource(0);
  v25 = *(_QWORD *)(v79 - 8);
  v26 = __chkstk_darwin(v79);
  v71 = (char *)&v62 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = __chkstk_darwin(v26);
  v66 = (char *)&v62 - v29;
  __chkstk_darwin(v28);
  v31 = (char *)&v62 - v30;
  sub_1000076D8(0, &qword_1000EFD20, (uint64_t (*)(uint64_t))sub_100089B44, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for _ContiguousArrayStorage);
  v33 = v32;
  sub_100089B44(0);
  v35 = *(_QWORD *)(v34 - 8);
  v64 = v34;
  v36 = *(_QWORD *)(v35 + 72);
  v37 = *(unsigned __int8 *)(v35 + 80);
  v38 = (v37 + 32) & ~v37;
  v67 = 2 * v36;
  v39 = swift_allocObject(v33, v38 + 3 * v36, v37 | 7);
  v70 = v39;
  *(_OWORD *)(v39 + 16) = xmmword_1000B25C0;
  v40 = v39 + v38;
  *(_BYTE *)(v39 + v38) = 0;
  v41 = String.LocalizationValue.init(stringLiteral:)(0x7972616D6D7553, 0xE700000000000000);
  v62 = v24;
  static Locale.current.getter(v41);
  v65 = enum case for LocalizedStringResource.BundleDescription.main(_:);
  v42 = v80;
  v81 = *(_QWORD *)(v81 + 104);
  v43 = v78;
  ((void (*)(char *))v81)(v78);
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v6, 0x6E65746E49707041, 0xEA00000000007374, v24, v43, 0, 0, 256);
  v44 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v25 + 56);
  v45 = v68;
  v46 = v79;
  v44(v68, 1, 1, v79);
  v63 = v40;
  v47 = v69;
  DisplayRepresentation.Image.init(systemName:tintColor:symbolConfiguration:)(0x69662E7472616568, 0xEA00000000006C6CLL, 0, 0);
  DisplayRepresentation.init(title:subtitle:image:synonyms:)(v31, v45, v47, _swiftEmptyArrayStorage);
  *(_BYTE *)(v40 + v36) = 1;
  v48 = v73;
  v49 = String.LocalizationValue.init(stringLiteral:)(0x676E6972616853, 0xE700000000000000);
  v50 = v62;
  static Locale.current.getter(v49);
  v51 = v78;
  v52 = v65;
  ((void (*)(char *, _QWORD, uint64_t))v81)(v78, v65, v42);
  v53 = v66;
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v48, 0x6E65746E49707041, 0xEA00000000007374, v50, v51, 0, 0, 256);
  v54 = v72;
  v44(v72, 1, 1, v46);
  v55 = v74;
  DisplayRepresentation.Image.init(systemName:tintColor:symbolConfiguration:)(0x322E6E6F73726570, 0xED00006C6C69662ELL, 0, 0);
  DisplayRepresentation.init(title:subtitle:image:synonyms:)(v53, v54, v55, _swiftEmptyArrayStorage);
  *(_BYTE *)(v63 + v67) = 2;
  v56 = v76;
  v57 = String.LocalizationValue.init(stringLiteral:)(0x6573776F7242, 0xE600000000000000);
  static Locale.current.getter(v57);
  ((void (*)(char *, uint64_t, uint64_t))v81)(v51, v52, v80);
  v58 = v71;
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v56, 0x6E65746E49707041, 0xEA00000000007374, v50, v51, 0, 0, 256);
  v59 = v75;
  v44(v75, 1, 1, v79);
  v60 = v77;
  DisplayRepresentation.Image.init(systemName:tintColor:symbolConfiguration:)(0xD000000000000014, 0x80000001000BD7D0, 0, 0);
  DisplayRepresentation.init(title:subtitle:image:synonyms:)(v58, v59, v60, _swiftEmptyArrayStorage);
  return sub_10007C7CC(v70);
}

void sub_100089B44(uint64_t a1)
{
  uint64_t v2;
  unint64_t TupleTypeMetadata2;
  uint64_t v4;

  if (!qword_1000EF750)
  {
    v2 = type metadata accessor for DisplayRepresentation(255);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2(a1, &type metadata for OpenTabIntent.Tab, v2, 0, 0);
    if (!v4)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_1000EF750);
  }
}

void sub_100089BA8(uint64_t a1)
{
  uint64_t v2;
  unint64_t TupleTypeMetadata2;
  uint64_t v4;

  if (!qword_1000EF768)
  {
    sub_100089C24(255, &qword_1000EF770, (uint64_t (*)(void))sub_10007F87C, (uint64_t (*)(uint64_t, ValueMetadata *, uint64_t))&type metadata accessor for EnumURLRepresentation.EnumSingleURLRepresentation);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2(a1, &type metadata for OpenTabIntent.Tab, v2, 0, 0);
    if (!v4)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_1000EF768);
  }
}

void sub_100089C24(uint64_t a1, unint64_t *a2, uint64_t (*a3)(void), uint64_t (*a4)(uint64_t, ValueMetadata *, uint64_t))
{
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;

  if (!*a2)
  {
    v7 = a3();
    v8 = a4(a1, &type metadata for OpenTabIntent.Tab, v7);
    if (!v9)
      atomic_store(v8, a2);
  }
}

unint64_t sub_100089C80(Swift::String string)
{
  void *object;
  Swift::String v2;
  unint64_t v3;

  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1000DC628, v2);
  swift_bridgeObjectRelease(object);
  if (v3 >= 3)
    return 3;
  else
    return v3;
}

_QWORD *sub_100089CC8(char a1)
{
  void *v1;
  _QWORD *v2;

  v1 = off_1000E1B68[a1];
  v2 = sub_100089D08((uint64_t)v1);
  swift_bridgeObjectRelease(v1);
  return v2;
}

_QWORD *sub_100089D08(uint64_t a1)
{
  int64_t v1;
  unsigned __int8 *v3;
  unint64_t v4;
  uint64_t v5;
  unsigned __int8 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  _QWORD *v11;

  v1 = *(_QWORD *)(a1 + 16);
  if (v1)
  {
    sub_10007FEE0(0, v1, 0);
    v3 = (unsigned __int8 *)(a1 + 32);
    v4 = _swiftEmptyArrayStorage[2];
    v5 = 2 * v4;
    do
    {
      v6 = *v3++;
      v7 = sub_100089DE4(v6);
      v9 = v8;
      v10 = _swiftEmptyArrayStorage[3];
      if (v4 >= v10 >> 1)
        sub_10007FEE0(v10 > 1, v4 + 1, 1);
      _swiftEmptyArrayStorage[2] = v4 + 1;
      v11 = &_swiftEmptyArrayStorage[v5];
      v11[4] = v7;
      v11[5] = v9;
      v5 += 2;
      ++v4;
      --v1;
    }
    while (v1);
  }
  return _swiftEmptyArrayStorage;
}

uint64_t sub_100089DE4(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_100089E1C + 4 * byte_1000B5B90[a1]))(0xD000000000000042, 0x80000001000BE450);
}

unint64_t sub_10008A038(Swift::String string)
{
  void *object;
  Swift::String v2;
  unint64_t v3;

  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1000DBF28, v2);
  swift_bridgeObjectRelease(object);
  if (v3 >= 6)
    return 6;
  else
    return v3;
}

uint64_t sub_10008A080()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *(_QWORD *)(v0 + 32);
  if (v1)
  {
    v2 = *(_QWORD *)(v0 + 32);
  }
  else
  {
    v3 = v0;
    type metadata accessor for DiskHealthExperienceStore();
    v2 = static DiskHealthExperienceStore.shared.getter();
    v4 = *(_QWORD *)(v0 + 32);
    *(_QWORD *)(v3 + 32) = v2;
    swift_retain(v2);
    swift_release(v4);
    v1 = 0;
  }
  swift_retain(v1);
  return v2;
}

uint64_t sub_10008A0E4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *(_QWORD *)(v0 + 48);
  if (v1)
  {
    v2 = *(_QWORD *)(v0 + 48);
  }
  else
  {
    v3 = v0;
    type metadata accessor for PinnedContentManager(0);
    v2 = PinnedContentManager.__allocating_init(healthStore:domain:)(*(id *)(v0 + 16));
    v4 = *(_QWORD *)(v3 + 48);
    *(_QWORD *)(v3 + 48) = v2;
    swift_retain(v2);
    swift_release(v4);
    v1 = 0;
  }
  swift_retain(v1);
  return v2;
}

uint64_t sub_10008A150()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __int128 v7;
  uint64_t v8;
  void *v9;

  v1 = *(_QWORD *)(v0 + 56);
  if (v1)
  {
    v2 = *(_QWORD *)(v0 + 56);
  }
  else
  {
    v3 = sub_10008A0E4();
    v8 = type metadata accessor for PinnedContentManager(0);
    v9 = &protocol witness table for PinnedContentManager;
    *(_QWORD *)&v7 = v3;
    v4 = type metadata accessor for StoreDemoModeManager();
    v2 = swift_allocObject(v4, 56, 7);
    sub_10001AF7C(&v7, v2 + 16);
    v5 = *(_QWORD *)(v0 + 56);
    *(_QWORD *)(v0 + 56) = v2;
    swift_retain(v2);
    swift_release(v5);
    v1 = 0;
  }
  swift_retain(v1);
  return v2;
}

uint64_t sub_10008A2E8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  swift_release(*(_QWORD *)(v0 + 32));
  swift_release(*(_QWORD *)(v0 + 40));
  swift_release(*(_QWORD *)(v0 + 48));
  swift_release(*(_QWORD *)(v0 + 56));
  swift_release(*(_QWORD *)(v0 + 64));
  v1 = v0 + OBJC_IVAR____TtC6Health16LifecycleManager__preloadPluginsAfterLaunch;
  sub_10008A3A0();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  return v0;
}

uint64_t sub_10008A364()
{
  uint64_t v0;

  sub_10008A2E8();
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

id sub_10008A388()
{
  void *v0;

  return objc_msgSend(v0, "applicationState");
}

uint64_t sub_10008A398()
{
  return type metadata accessor for LifecycleManager(0);
}

void sub_10008A3A0()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1000ECE60)
  {
    v0 = type metadata accessor for UserDefault(0, &type metadata for Bool);
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1000ECE60);
  }
}

uint64_t sub_10008A3F4()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10008A418(unint64_t *a1, unint64_t *a2, uint64_t (*a3)(uint64_t))
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    sub_10000F2DC(255, a2, a3);
    result = swift_getWitnessTable(&protocol conformance descriptor for [A], v5);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_10008A458()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000EFF30;
  if (!qword_1000EFF30)
  {
    v1 = sub_100006D10(255, (unint64_t *)&qword_1000EC750, UIApplication_ptr);
    result = swift_getWitnessTable(&protocol conformance descriptor for UIApplication, v1);
    atomic_store(result, (unint64_t *)&qword_1000EFF30);
  }
  return result;
}

uint64_t AllHealthDataViewController.__allocating_init(healthStore:healthExperienceStore:)(void *a1, _QWORD *a2)
{
  objc_class *v2;
  objc_class *v3;
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD v15[5];

  v3 = v2;
  v6 = (char *)objc_allocWithZone(v3);
  v7 = &v6[direct field offset for AllHealthDataViewController.providedPresentation];
  v8 = enum case for Presentation.showAllData(_:);
  v9 = type metadata accessor for Presentation(0);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 104))(v7, v8, v9);
  *(_QWORD *)&v6[qword_1000EFF38] = a1;
  sub_100028F08((uint64_t)a2, (uint64_t)&v6[qword_1000EFF40]);
  sub_100028F08((uint64_t)a2, (uint64_t)v15);
  v10 = type metadata accessor for AllHealthDataDataSource(0);
  swift_allocObject(v10, *(unsigned int *)(v10 + 48), *(unsigned __int16 *)(v10 + 52));
  v11 = a1;
  v12 = AllHealthDataDataSource.init(healthStore:healthExperienceStore:)(v11, v15);
  v13 = CompoundDataSourceCollectionViewController.init(dataSource:)(v12);

  _s6Health23OpenSleepScheduleIntentVwxx_0(a2);
  return v13;
}

uint64_t AllHealthDataViewController.providedPresentation.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  _BYTE v6[24];

  v3 = v1 + direct field offset for AllHealthDataViewController.providedPresentation;
  swift_beginAccess(v3, v6, 0, 0);
  v4 = type metadata accessor for Presentation(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t AllHealthDataViewController.providedPresentation.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  _BYTE v6[24];

  v3 = v1 + direct field offset for AllHealthDataViewController.providedPresentation;
  swift_beginAccess(v3, v6, 33, 0);
  v4 = type metadata accessor for Presentation(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
  return swift_endAccess(v6);
}

uint64_t (*AllHealthDataViewController.providedPresentation.modify(uint64_t a1))(_QWORD)
{
  uint64_t v1;

  swift_beginAccess(v1 + direct field offset for AllHealthDataViewController.providedPresentation, a1, 33, 0);
  return j__swift_endAccess;
}

uint64_t AllHealthDataViewController.init(healthStore:healthExperienceStore:)(void *a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD v14[5];

  v3 = v2;
  v6 = v3 + direct field offset for AllHealthDataViewController.providedPresentation;
  v7 = enum case for Presentation.showAllData(_:);
  v8 = type metadata accessor for Presentation(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 104))(v6, v7, v8);
  *(_QWORD *)(v3 + qword_1000EFF38) = a1;
  sub_100028F08((uint64_t)a2, v3 + qword_1000EFF40);
  sub_100028F08((uint64_t)a2, (uint64_t)v14);
  v9 = type metadata accessor for AllHealthDataDataSource(0);
  swift_allocObject(v9, *(unsigned int *)(v9 + 48), *(unsigned __int16 *)(v9 + 52));
  v10 = a1;
  v11 = AllHealthDataDataSource.init(healthStore:healthExperienceStore:)(v10, v14);
  v12 = CompoundDataSourceCollectionViewController.init(dataSource:)(v11);

  _s6Health23OpenSleepScheduleIntentVwxx_0(a2);
  return v12;
}

void sub_10008A7B4(char *a1, uint64_t a2, void *a3)
{
  char *v5;
  uint64_t v6;
  uint64_t v7;
  id v8;

  v5 = &a1[direct field offset for AllHealthDataViewController.providedPresentation];
  v6 = enum case for Presentation.showAllData(_:);
  v7 = type metadata accessor for Presentation(0);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 104))(v5, v6, v7);
  v8 = a3;

  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000025, 0x80000001000B8850, "Health/AllHealthDataViewController.swift", 40, 2, 37, 0);
  __break(1u);
}

Swift::Void __swiftcall AllHealthDataViewController.viewDidLoad()()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  objc_class *v5;
  id v6;
  Swift::String v7;
  Swift::String v8;
  Swift::String v9;
  NSString v10;
  void *v11;
  __n128 v12;
  id v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  Class isa;
  id v18;
  objc_super v19;
  Swift::String v20;

  v1 = type metadata accessor for DeepLinkActivityType(0);
  v2 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  v4 = (char *)&v19 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = (objc_class *)type metadata accessor for AllHealthDataViewController(0);
  v19.receiver = v0;
  v19.super_class = v5;
  objc_msgSendSuper2(&v19, "viewDidLoad");
  v6 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
  v7._countAndFlagsBits = 0xD00000000000001FLL;
  v20._countAndFlagsBits = 0xD00000000000007FLL;
  v20._object = (void *)0x80000001000BE6E0;
  v7._object = (void *)0x80000001000BE6C0;
  v8._countAndFlagsBits = 0x6C616548206C6C41;
  v8._object = (void *)0xEF61746144206874;
  v9 = NSLocalizedString(_:tableName:bundle:value:comment:)(v7, (Swift::String_optional)0, (NSBundle)v6, v8, v20);

  v10 = String._bridgeToObjectiveC()();
  objc_msgSend(v0, "setTitle:", v10);

  (*(void (**)(char *, _QWORD, uint64_t))(v2 + 104))(v4, enum case for DeepLinkActivityType.allHealthData(_:), v1);
  v11 = (void *)static HAUserActivity.createActivity(title:restorationType:profileIdentifier:eligibleForSearch:eligibleForHandoff:eligibleForPrediction:)(v9._countAndFlagsBits, v9._object, v4, 0, 0, 2, 0);
  v12 = swift_bridgeObjectRelease(v9._object);
  (*(void (**)(char *, uint64_t, __n128))(v2 + 8))(v4, v1, v12);
  objc_msgSend(v0, "setUserActivity:", v11);

  v13 = objc_msgSend(v0, "collectionView");
  if (v13)
  {
    v14 = v13;
    sub_100061034();
    v16 = swift_allocObject(v15, 64, 7);
    *(_OWORD *)(v16 + 16) = xmmword_1000B1580;
    *(_QWORD *)(v16 + 32) = 0xD00000000000001BLL;
    *(_QWORD *)(v16 + 40) = 0x80000001000B5C80;
    strcpy((char *)(v16 + 48), "CollectionView");
    *(_BYTE *)(v16 + 63) = -18;
    isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(v16);
    v18 = (id)HKUIJoinStringsForAutomationIdentifier(isa);

    objc_msgSend(v14, "setAccessibilityIdentifier:", v18);
  }
  else
  {
    __break(1u);
  }
}

uint64_t type metadata accessor for AllHealthDataViewController(uint64_t a1)
{
  uint64_t result;

  result = qword_1000EFF48;
  if (!qword_1000EFF48)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for AllHealthDataViewController);
  return result;
}

void sub_10008AB24(void *a1)
{
  id v1;

  v1 = a1;
  AllHealthDataViewController.viewDidLoad()();

}

Swift::Void __swiftcall AllHealthDataViewController.viewDidAppear(_:)(Swift::Bool a1)
{
  void *v1;
  id v3;
  void *v4;
  objc_super v5;

  v5.receiver = v1;
  v5.super_class = (Class)type metadata accessor for AllHealthDataViewController(0);
  objc_msgSendSuper2(&v5, "viewDidAppear:", a1);
  v3 = objc_msgSend(v1, "userActivity");
  if (v3)
  {
    v4 = v3;
    objc_msgSend(v1, "submitUserActivityForRestoration:", v3);

  }
}

void sub_10008ABD4(void *a1, uint64_t a2, uint64_t a3)
{
  id v4;
  id v5;
  id v6;
  objc_super v7;

  v7.receiver = a1;
  v7.super_class = (Class)type metadata accessor for AllHealthDataViewController(0);
  v4 = v7.receiver;
  objc_msgSendSuper2(&v7, "viewDidAppear:", a3);
  v5 = objc_msgSend(v4, "userActivity", v7.receiver, v7.super_class);
  if (v5)
  {
    v6 = v5;
    objc_msgSend(v4, "submitUserActivityForRestoration:", v5);

    v4 = v6;
  }

}

Swift::Void __swiftcall AllHealthDataViewController.registerReusableCollectionViewTypes()()
{
  void *v0;
  uint64_t v1;
  void (*v2)(void);
  uint64_t v3;
  id v4;

  v1 = type metadata accessor for CompoundDataSourceCollectionViewController(0);
  v2 = (void (*)(void))method lookup function for CompoundDataSourceCollectionViewController(v1, &method descriptor for CompoundDataSourceCollectionViewController.registerReusableCollectionViewTypes());
  v2();
  v4 = objc_msgSend(v0, "collectionView");
  if (v4)
  {
    v3 = type metadata accessor for PlaceholderTextCollectionViewCell(0);
    UICollectionView.registerCell<A>(_:)(v3, v3, &protocol witness table for PlaceholderTextCollectionViewCell);

  }
  else
  {
    __break(1u);
  }
}

void AllHealthDataViewController.init(dataSource:)()
{
  _swift_stdlib_reportUnimplementedInitializer("Health.AllHealthDataViewController", 34, "init(dataSource:)", 17, 0);
  __break(1u);
}

id AllHealthDataViewController.__allocating_init(collectionViewLayout:)(void *a1)
{
  objc_class *v1;
  id v3;

  v3 = objc_msgSend(objc_allocWithZone(v1), "initWithCollectionViewLayout:", a1);

  return v3;
}

void AllHealthDataViewController.init(collectionViewLayout:)()
{
  _swift_stdlib_reportUnimplementedInitializer("Health.AllHealthDataViewController", 34, "init(collectionViewLayout:)", 27, 0);
  __break(1u);
}

void sub_10008AD84(uint64_t a1, uint64_t a2, void *a3)
{
  id v3;

  v3 = a3;
  _swift_stdlib_reportUnimplementedInitializer("Health.AllHealthDataViewController", 34, "init(collectionViewLayout:)", 27, 0);
  __break(1u);
}

uint64_t sub_10008ADB4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  _s6Health23OpenSleepScheduleIntentVwxx_0((_QWORD *)(v0 + qword_1000EFF40));
  v1 = v0 + direct field offset for AllHealthDataViewController.providedPresentation;
  v2 = type metadata accessor for Presentation(0);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
}

id AllHealthDataViewController.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for AllHealthDataViewController(0);
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t sub_10008AE44(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  _s6Health23OpenSleepScheduleIntentVwxx_0((_QWORD *)(a1 + qword_1000EFF40));
  v2 = a1 + direct field offset for AllHealthDataViewController.providedPresentation;
  v3 = type metadata accessor for Presentation(0);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(v2, v3);
}

uint64_t sub_10008AEA4@<X0>(uint64_t a1@<X8>)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  _BYTE v6[24];

  v3 = *v1 + direct field offset for AllHealthDataViewController.providedPresentation;
  swift_beginAccess(v3, v6, 0, 0);
  v4 = type metadata accessor for Presentation(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t sub_10008AF0C(uint64_t a1)
{
  uint64_t v2;
  uint64_t result;
  unint64_t v4;
  _QWORD v5[3];

  v2 = class metadata base offset for AllHealthDataViewController;
  v5[0] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v5[1] = &unk_1000B5CF0;
  result = type metadata accessor for Presentation(319);
  if (v4 <= 0x3F)
  {
    v5[2] = *(_QWORD *)(result - 8) + 64;
    result = swift_initClassMetadata2(a1, 0, 3, v5, a1 + v2);
    if (!result)
      return 0;
  }
  return result;
}

uint64_t sub_10008AF98()
{
  return type metadata accessor for AllHealthDataViewController(0);
}

Swift::Int sub_10008AFA0(char a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD v5[9];

  Hasher.init(_seed:)(v5, 0);
  v2 = 8 * a1;
  v3 = *(_QWORD *)((char *)&unk_1000B61B8 + v2);
  String.hash(into:)(v5, *(_QWORD *)&aSummary_4[v2], v3);
  swift_bridgeObjectRelease(v3);
  return Hasher._finalize()();
}

Swift::Int sub_10008B008(char a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD v5[9];

  Hasher.init(_seed:)(v5, 0);
  v2 = 8 * a1;
  v3 = *(_QWORD *)&aAlltrendsharin_1[v2 + 24];
  String.hash(into:)(v5, *(_QWORD *)&aAlltrendsharin_1[v2], v3);
  swift_bridgeObjectRelease(v3);
  return Hasher._finalize()();
}

uint64_t sub_10008B070()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void (*v21)(char *, uint64_t, uint64_t);
  char *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  char *v32;

  v0 = type metadata accessor for String.LocalizationValue(0);
  v1 = __chkstk_darwin(v0);
  v32 = (char *)&v28 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v1);
  v4 = (char *)&v28 - v3;
  sub_1000076D8(0, &qword_1000EC948, (uint64_t (*)(uint64_t))&type metadata accessor for LocalizedStringResource, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
  __chkstk_darwin(v5);
  v30 = (char *)&v28 - v6;
  v7 = type metadata accessor for LocalizedStringResource.BundleDescription(0);
  v8 = *(_QWORD *)(v7 - 8);
  v29 = v7;
  __chkstk_darwin(v7);
  v10 = (char *)&v28 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for Locale(0);
  __chkstk_darwin(v11);
  v13 = (char *)&v28 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for LocalizedStringResource(0);
  v15 = *(_QWORD *)(v14 - 8);
  __chkstk_darwin(v14);
  v17 = (char *)&v28 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = type metadata accessor for TypeDisplayRepresentation(0);
  sub_10001C884(v18, qword_1000F1228);
  v31 = sub_10001C86C(v18, (uint64_t)qword_1000F1228);
  v19 = String.LocalizationValue.init(stringLiteral:)(0x562068746C616548, 0xEB00000000776569);
  static Locale.current.getter(v19);
  v20 = enum case for LocalizedStringResource.BundleDescription.main(_:);
  v21 = *(void (**)(char *, uint64_t, uint64_t))(v8 + 104);
  v21(v10, enum case for LocalizedStringResource.BundleDescription.main(_:), v7);
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v4, 0x6E65746E49707041, 0xEA00000000007374, v13, v10, 0, 0, 256);
  v22 = v30;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v15 + 56))(v30, 1, 1, v14);
  sub_1000076D8(0, &qword_1000EE710, (uint64_t (*)(uint64_t))&type metadata accessor for LocalizedStringResource, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for _ContiguousArrayStorage);
  v24 = swift_allocObject(v23, ((*(unsigned __int8 *)(v15 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80))+ *(_QWORD *)(v15 + 72), *(unsigned __int8 *)(v15 + 80) | 7);
  *(_OWORD *)(v24 + 16) = xmmword_1000B11F0;
  v25 = v32;
  v26 = String.LocalizationValue.init(stringLiteral:)(0x532068746C616548, 0xED00006E65657263);
  static Locale.current.getter(v26);
  v21(v10, v20, v29);
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v25, 0x6E65746E49707041, 0xEA00000000007374, v13, v10, 0, 0, 256);
  return TypeDisplayRepresentation.init(name:numericFormat:synonyms:)(v17, v22, v24);
}

uint64_t sub_10008B3A4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;

  sub_10008CF4C(0, &qword_1000F0048, (uint64_t (*)(void))sub_10007F678, (uint64_t (*)(uint64_t, ValueMetadata *, uint64_t))&type metadata accessor for EnumURLRepresentation);
  v1 = v0;
  sub_10001C884(v0, qword_1000F1240);
  sub_10001C86C(v1, (uint64_t)qword_1000F1240);
  sub_1000076D8(0, &qword_1000F0050, (uint64_t (*)(uint64_t))sub_10008CED0, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for _ContiguousArrayStorage);
  v3 = v2;
  sub_10008CED0(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(_QWORD *)(v5 + 72);
  v7 = *(unsigned __int8 *)(v5 + 80);
  v8 = (v7 + 32) & ~v7;
  v9 = swift_allocObject(v3, v8 + 3 * v6, v7 | 7);
  *(_OWORD *)(v9 + 16) = xmmword_1000B25C0;
  v10 = v9 + v8;
  *(_BYTE *)(v9 + v8) = 0;
  v11 = sub_10007F678();
  EnumURLRepresentation.EnumSingleURLRepresentation.init(stringLiteral:)(0xD00000000000001ALL, 0x80000001000BE890, &type metadata for OpenViewIntent.Screen, v11);
  *(_BYTE *)(v10 + v6) = 1;
  EnumURLRepresentation.EnumSingleURLRepresentation.init(stringLiteral:)(0xD000000000000022, 0x80000001000BE8B0, &type metadata for OpenViewIntent.Screen, v11);
  *(_BYTE *)(v10 + 2 * v6) = 2;
  EnumURLRepresentation.EnumSingleURLRepresentation.init(stringLiteral:)(0xD000000000000020, 0x80000001000BE8E0, &type metadata for OpenViewIntent.Screen, v11);
  v12 = sub_10007CD30(v9);
  return EnumURLRepresentation.init(_:)(v12, &type metadata for OpenViewIntent.Screen, v11);
}

uint64_t sub_10008B55C(char a1)
{
  return *(_QWORD *)&aAlltrendsharin_1[8 * a1];
}

uint64_t sub_10008B57C(char *a1, char *a2)
{
  return sub_100082000(*a1, *a2);
}

unint64_t sub_10008B58C()
{
  unint64_t result;

  result = qword_1000EFF98;
  if (!qword_1000EFF98)
  {
    result = swift_getWitnessTable(&unk_1000B5D14, &type metadata for OpenViewIntent.Screen);
    atomic_store(result, (unint64_t *)&qword_1000EFF98);
  }
  return result;
}

Swift::Int sub_10008B5D0()
{
  char *v0;

  return sub_10008B008(*v0);
}

uint64_t sub_10008B5D8(uint64_t a1)
{
  char *v1;

  return sub_10007D220(a1, *v1);
}

Swift::Int sub_10008B5E0(uint64_t a1)
{
  char *v1;

  return sub_10007D304(a1, *v1);
}

unint64_t sub_10008B5E8@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = sub_10008CFA8(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_10008B614@<X0>(uint64_t *a1@<X8>)
{
  char *v1;
  uint64_t result;
  uint64_t v4;

  result = sub_10008B55C(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

unint64_t sub_10008B640()
{
  unint64_t result;

  result = qword_1000EFFA0;
  if (!qword_1000EFFA0)
  {
    result = swift_getWitnessTable(&unk_1000B5E2C, &type metadata for OpenViewIntent.Screen);
    atomic_store(result, (unint64_t *)&qword_1000EFFA0);
  }
  return result;
}

unint64_t sub_10008B688()
{
  unint64_t result;

  result = qword_1000EFFA8;
  if (!qword_1000EFFA8)
  {
    result = swift_getWitnessTable(&unk_1000B5E64, &type metadata for OpenViewIntent.Screen);
    atomic_store(result, (unint64_t *)&qword_1000EFFA8);
  }
  return result;
}

unint64_t sub_10008B6D0()
{
  unint64_t result;

  result = qword_1000EFFB0;
  if (!qword_1000EFFB0)
  {
    result = swift_getWitnessTable(&unk_1000B5D7C, &type metadata for OpenViewIntent.Screen);
    atomic_store(result, (unint64_t *)&qword_1000EFFB0);
  }
  return result;
}

unint64_t sub_10008B71C()
{
  unint64_t result;

  result = qword_1000EFFB8;
  if (!qword_1000EFFB8)
  {
    result = swift_getWitnessTable(&unk_1000B5E94, &type metadata for OpenViewIntent.Screen);
    atomic_store(result, (unint64_t *)&qword_1000EFFB8);
  }
  return result;
}

uint64_t sub_10008B760@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  if (qword_1000EC150 != -1)
    swift_once(&qword_1000EC150, sub_10008B3A4);
  sub_10008CF4C(0, &qword_1000F0048, (uint64_t (*)(void))sub_10007F678, (uint64_t (*)(uint64_t, ValueMetadata *, uint64_t))&type metadata accessor for EnumURLRepresentation);
  v3 = v2;
  v4 = sub_10001C86C(v2, (uint64_t)qword_1000F1240);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 16))(a1, v4, v3);
}

unint64_t sub_10008B7EC()
{
  unint64_t result;

  result = qword_1000EFFC0;
  if (!qword_1000EFFC0)
  {
    result = swift_getWitnessTable(&unk_1000B5EBC, &type metadata for OpenViewIntent.Screen);
    atomic_store(result, (unint64_t *)&qword_1000EFFC0);
  }
  return result;
}

unint64_t sub_10008B834()
{
  unint64_t result;

  result = qword_1000EFFC8;
  if (!qword_1000EFFC8)
  {
    result = swift_getWitnessTable(&unk_1000B5EE4, &type metadata for OpenViewIntent.Screen);
    atomic_store(result, (unint64_t *)&qword_1000EFFC8);
  }
  return result;
}

unint64_t sub_10008B880()
{
  unint64_t result;

  result = qword_1000EFFD0;
  if (!qword_1000EFFD0)
  {
    result = swift_getWitnessTable(&unk_1000B5F64, &type metadata for OpenViewIntent.Screen);
    atomic_store(result, (unint64_t *)&qword_1000EFFD0);
  }
  return result;
}

uint64_t sub_10008B8C4(uint64_t a1)
{
  uint64_t v1;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = sub_10008C714();
  v4 = URLRepresentableEnum.urlRepresentationParameter.getter(a1, v3);
  return sub_10005B478(*(uint64_t (**)(uint64_t, uint64_t))(v1 + 8), v1, v4, v5);
}

uint64_t sub_10008B90C@<X0>(uint64_t a1@<X8>)
{
  return sub_100052180(&qword_1000EC148, (uint64_t (*)(_QWORD))&type metadata accessor for TypeDisplayRepresentation, (uint64_t)qword_1000F1228, (uint64_t)sub_10008B070, a1);
}

uint64_t sub_10008B930(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10005AD40(a1, a2, a3, (uint64_t (*)(void))sub_10007F678, (uint64_t)&opaque type descriptor for <<opaque return type of static AppEnum.defaultResolverSpecification>>);
}

uint64_t sub_10008B944(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10007F678();
  return static AppEnum.defaultResolverSpecification.getter(a1, v2);
}

unint64_t sub_10008B980()
{
  unint64_t result;

  result = qword_1000EFFE0;
  if (!qword_1000EFFE0)
  {
    result = swift_getWitnessTable(&unk_1000B5FA4, &type metadata for OpenViewIntent.Screen);
    atomic_store(result, (unint64_t *)&qword_1000EFFE0);
  }
  return result;
}

unint64_t sub_10008B9C8()
{
  unint64_t result;

  result = qword_1000EFFE8;
  if (!qword_1000EFFE8)
  {
    result = swift_getWitnessTable(&unk_1000B5FCC, &type metadata for OpenViewIntent.Screen);
    atomic_store(result, (unint64_t *)&qword_1000EFFE8);
  }
  return result;
}

uint64_t sub_10008BA14(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10008B880();
  return CaseDisplayRepresentable.localizedStringResource.getter(a1, v2);
}

unint64_t sub_10008BA50()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1000EFFF0;
  if (!qword_1000EFFF0)
  {
    sub_10008BA98();
    result = swift_getWitnessTable(&protocol conformance descriptor for [A], v1);
    atomic_store(result, (unint64_t *)&qword_1000EFFF0);
  }
  return result;
}

void sub_10008BA98()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1000EFFF8)
  {
    v0 = type metadata accessor for Array(0, &type metadata for OpenViewIntent.Screen);
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1000EFFF8);
  }
}

void sub_10008BAEC(_QWORD *a1@<X8>)
{
  *a1 = &off_1000DC720;
}

unint64_t sub_10008BB00()
{
  unint64_t result;

  result = qword_1000F0000;
  if (!qword_1000F0000)
  {
    result = swift_getWitnessTable(&unk_1000B6084, &type metadata for OpenViewIntent);
    atomic_store(result, (unint64_t *)&qword_1000F0000);
  }
  return result;
}

uint64_t sub_10008BB44()
{
  uint64_t v0;
  uint64_t v1;
  _BYTE *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE v13[16];

  v0 = type metadata accessor for String.LocalizationValue(0);
  __chkstk_darwin(v0);
  v2 = &v13[-((v1 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v3 = type metadata accessor for LocalizedStringResource.BundleDescription(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = &v13[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v7 = type metadata accessor for Locale(0);
  __chkstk_darwin(v7);
  v9 = &v13[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v10 = type metadata accessor for LocalizedStringResource(0);
  sub_10001C884(v10, qword_1000F1258);
  sub_10001C86C(v10, (uint64_t)qword_1000F1258);
  v11 = String.LocalizationValue.init(stringLiteral:)(0x656956206E65704FLL, 0xE900000000000077);
  static Locale.current.getter(v11);
  (*(void (**)(_BYTE *, _QWORD, uint64_t))(v4 + 104))(v6, enum case for LocalizedStringResource.BundleDescription.main(_:), v3);
  return LocalizedStringResource.init(_:table:locale:bundle:comment:)(v2, 0x6E65746E49707041, 0xEA00000000007374, v9, v6, 0, 0, 256);
}

uint64_t sub_10008BCC4()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD v22[2];

  sub_1000076D8(0, &qword_1000EC948, (uint64_t (*)(uint64_t))&type metadata accessor for LocalizedStringResource, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
  __chkstk_darwin(v0);
  v2 = (char *)v22 - v1;
  v22[0] = type metadata accessor for LocalizedStringResource.BundleDescription(0);
  v3 = *(_QWORD *)(v22[0] - 8);
  __chkstk_darwin(v22[0]);
  v5 = (char *)v22 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for Locale(0);
  __chkstk_darwin(v6);
  v8 = (char *)v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for String.LocalizationValue(0);
  __chkstk_darwin(v9);
  v11 = (char *)v22 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for LocalizedStringResource(0);
  v13 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v15 = (char *)v22 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000076D8(0, &qword_1000EC940, (uint64_t (*)(uint64_t))&type metadata accessor for IntentDescription, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
  v17 = v16;
  sub_10001C884(v16, qword_1000F1270);
  v18 = sub_10001C86C(v17, (uint64_t)qword_1000F1270);
  v19 = String.LocalizationValue.init(stringLiteral:)(0xD000000000000038, 0x80000001000BE810);
  static Locale.current.getter(v19);
  (*(void (**)(char *, _QWORD, _QWORD))(v3 + 104))(v5, enum case for LocalizedStringResource.BundleDescription.main(_:), v22[0]);
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v11, 0x6E65746E49707041, 0xEA00000000007374, v8, v5, 0, 0, 256);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v13 + 56))(v2, 1, 1, v12);
  IntentDescription.init(_:categoryName:searchKeywords:)(v15, v2, _swiftEmptyArrayStorage);
  v20 = type metadata accessor for IntentDescription(0);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 56))(v18, 0, 1, v20);
}

uint64_t sub_10008BF3C(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  unint64_t v5;

  v4 = sub_10008C68C();
  v5 = sub_10008C714();
  return static URLRepresentableIntent<>.urlRepresentation.getter(a1, v4, a2, v5);
}

unint64_t sub_10008BF94()
{
  unint64_t result;

  result = qword_1000F0008;
  if (!qword_1000F0008)
  {
    result = swift_getWitnessTable(&unk_1000B613C, &type metadata for OpenViewIntent);
    atomic_store(result, (unint64_t *)&qword_1000F0008);
  }
  return result;
}

unint64_t sub_10008BFDC()
{
  unint64_t result;

  result = qword_1000F0010;
  if (!qword_1000F0010)
  {
    result = swift_getWitnessTable(&unk_1000B6164, &type metadata for OpenViewIntent);
    atomic_store(result, (unint64_t *)&qword_1000F0010);
  }
  return result;
}

uint64_t sub_10008C020(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10005AD40(a1, a2, a3, (uint64_t (*)(void))sub_10001AEB0, (uint64_t)&opaque type descriptor for <<opaque return type of static AppIntent.parameterSummary>>);
}

uint64_t sub_10008C034@<X0>(uint64_t a1@<X8>)
{
  return sub_100052180(&qword_1000EC158, (uint64_t (*)(_QWORD))&type metadata accessor for LocalizedStringResource, (uint64_t)qword_1000F1258, (uint64_t)sub_10008BB44, a1);
}

uint64_t sub_10008C058(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10008C68C();
  return static OpenIntent.openAppWhenRun.getter(a1, v2);
}

uint64_t sub_10008C080@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  if (qword_1000EC160 != -1)
    swift_once(&qword_1000EC160, sub_10008BCC4);
  sub_1000076D8(0, &qword_1000EC940, (uint64_t (*)(uint64_t))&type metadata accessor for IntentDescription, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
  v3 = sub_10001C86C(v2, (uint64_t)qword_1000F1270);
  return sub_10005566C(v3, a1);
}

uint64_t sub_10008C0F4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;

  v4 = (_QWORD *)swift_task_alloc(async function pointer to URLRepresentableIntent<>.perform()[1]);
  *(_QWORD *)(v2 + 16) = v4;
  v5 = sub_10008C68C();
  v6 = sub_10008C6D0();
  v7 = sub_10008C714();
  *v4 = v2;
  v4[1] = sub_10005AECC;
  return URLRepresentableIntent<>.perform()(a2, v5, v6, v7);
}

uint64_t sub_10008C178@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = sub_10008C2A0();
  *a1 = result;
  return result;
}

uint64_t sub_10008C19C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10001AEB0();
  return static AppIntent.persistentIdentifier.getter(a1, v2);
}

ValueMetadata *type metadata accessor for OpenViewIntent()
{
  return &type metadata for OpenViewIntent;
}

uint64_t storeEnumTagSinglePayload for OpenViewIntent.Screen(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_10008C220 + 4 * byte_1000B5D0D[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_10008C254 + 4 * byte_1000B5D08[v4]))();
}

uint64_t sub_10008C254(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10008C25C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10008C264);
  return result;
}

uint64_t sub_10008C270(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10008C278);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_10008C27C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10008C284(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for OpenViewIntent.Screen()
{
  return &type metadata for OpenViewIntent.Screen;
}

uint64_t sub_10008C2A0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  void (*v27)(char *, uint64_t, uint64_t);
  char *v28;
  uint64_t v29;
  uint64_t v30;
  void (*v31)(char *, uint64_t, uint64_t, uint64_t);
  char *v32;
  char *v33;
  char *v34;
  unint64_t v35;
  uint64_t v37;
  char *v38;
  char *v39;
  char *v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  char v44[3];

  v0 = type metadata accessor for InputConnectionBehavior(0);
  v42 = *(_QWORD *)(v0 - 8);
  v43 = v0;
  __chkstk_darwin(v0);
  v41 = (char *)&v37 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000076D8(0, &qword_1000EE508, (uint64_t (*)(uint64_t))&type metadata accessor for IntentDialog, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
  v3 = __chkstk_darwin(v2);
  v40 = (char *)&v37 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  v39 = (char *)&v37 - v5;
  v6 = type metadata accessor for String.LocalizationValue(0);
  v7 = __chkstk_darwin(v6);
  v9 = (char *)&v37 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v38 = (char *)&v37 - v10;
  sub_1000076D8(0, &qword_1000EC948, (uint64_t (*)(uint64_t))&type metadata accessor for LocalizedStringResource, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
  __chkstk_darwin(v11);
  v13 = (char *)&v37 - v12;
  v14 = type metadata accessor for LocalizedStringResource.BundleDescription(0);
  v15 = *(_QWORD *)(v14 - 8);
  __chkstk_darwin(v14);
  v17 = (char *)&v37 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = type metadata accessor for Locale(0);
  __chkstk_darwin(v18);
  v20 = (char *)&v37 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = type metadata accessor for LocalizedStringResource(0);
  v22 = *(_QWORD *)(v21 - 8);
  __chkstk_darwin(v21);
  v24 = (char *)&v37 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = String.LocalizationValue.init(stringLiteral:)(2003134806, 0xE400000000000000);
  static Locale.current.getter(v25);
  v26 = enum case for LocalizedStringResource.BundleDescription.main(_:);
  v27 = *(void (**)(char *, uint64_t, uint64_t))(v15 + 104);
  v27(v17, enum case for LocalizedStringResource.BundleDescription.main(_:), v14);
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v9, 0x6E65746E49707041, 0xEA00000000007374, v20, v17, 0, 0, 256);
  v28 = v38;
  String.LocalizationValue.init(stringLiteral:)(0xD00000000000001FLL, 0x80000001000BE7F0);
  sub_10008CF4C(0, &qword_1000F0020, (uint64_t (*)(void))sub_10001B3FC, (uint64_t (*)(uint64_t, ValueMetadata *, uint64_t))&type metadata accessor for IntentParameter);
  v37 = v29;
  static Locale.current.getter(v29);
  v27(v17, v26, v14);
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v28, 0x6E65746E49707041, 0xEA00000000007374, v20, v17, 0, 0, 256);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v22 + 56))(v13, 0, 1, v21);
  v44[0] = 3;
  v30 = type metadata accessor for IntentDialog(0);
  v31 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v30 - 8) + 56);
  v32 = v39;
  v31(v39, 1, 1, v30);
  v33 = v40;
  v31(v40, 1, 1, v30);
  v34 = v41;
  (*(void (**)(char *, _QWORD, uint64_t))(v42 + 104))(v41, enum case for InputConnectionBehavior.default(_:), v43);
  v35 = sub_10007F678();
  return IntentParameter<>.init(title:description:default:requestValueDialog:requestDisambiguationDialog:inputConnectionBehavior:supportedValues:)(v24, v13, v44, v32, v33, v34, &off_1000DB958, v35);
}

unint64_t sub_10008C68C()
{
  unint64_t result;

  result = qword_1000F0028;
  if (!qword_1000F0028)
  {
    result = swift_getWitnessTable(&unk_1000B6004, &type metadata for OpenViewIntent);
    atomic_store(result, (unint64_t *)&qword_1000F0028);
  }
  return result;
}

unint64_t sub_10008C6D0()
{
  unint64_t result;

  result = qword_1000F0030;
  if (!qword_1000F0030)
  {
    result = swift_getWitnessTable(&unk_1000B6054, &type metadata for OpenViewIntent);
    atomic_store(result, (unint64_t *)&qword_1000F0030);
  }
  return result;
}

unint64_t sub_10008C714()
{
  unint64_t result;

  result = qword_1000F0038;
  if (!qword_1000F0038)
  {
    result = swift_getWitnessTable(&unk_1000B5DF4, &type metadata for OpenViewIntent.Screen);
    atomic_store(result, (unint64_t *)&qword_1000F0038);
  }
  return result;
}

unint64_t sub_10008C758()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  char *v44;
  char *v45;
  uint64_t v46;
  char *v47;
  char *v48;
  char *v49;
  _BYTE *v50;
  char *v51;
  uint64_t v52;
  char *v53;
  char *v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  void (*v58)(char *, uint64_t, uint64_t);
  char *v59;
  uint64_t v60;
  void (*v61)(char *, uint64_t, uint64_t, uint64_t);
  char *v62;
  uint64_t v63;
  char *v64;
  char *v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  uint64_t v70;
  _BYTE *v72;
  void (*v73)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v74;
  char *v75;
  uint64_t v76;
  char *v77;
  uint64_t v78;
  char *v79;
  char *v80;
  char *v81;
  char *v82;
  uint64_t v83;
  char *v84;
  char *v85;
  char *v86;
  void (*v87)(char *);
  unsigned int v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;

  sub_1000076D8(0, &qword_1000EE4F0, (uint64_t (*)(uint64_t))&type metadata accessor for DisplayRepresentation.Image, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
  v1 = __chkstk_darwin(v0);
  v86 = (char *)&v72 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v1);
  v81 = (char *)&v72 - v3;
  sub_1000076D8(0, &qword_1000EC948, (uint64_t (*)(uint64_t))&type metadata accessor for LocalizedStringResource, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
  v5 = __chkstk_darwin(v4);
  v85 = (char *)&v72 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v79 = (char *)&v72 - v7;
  v91 = type metadata accessor for LocalizedStringResource.BundleDescription(0);
  v8 = *(_QWORD *)(v91 - 8);
  __chkstk_darwin(v91);
  v10 = (char *)&v72 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for Locale(0);
  __chkstk_darwin(v11);
  v13 = (char *)&v72 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for String.LocalizationValue(0);
  v15 = __chkstk_darwin(v14);
  v84 = (char *)&v72 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = __chkstk_darwin(v15);
  v82 = (char *)&v72 - v18;
  v19 = __chkstk_darwin(v17);
  v77 = (char *)&v72 - v20;
  __chkstk_darwin(v19);
  v22 = (char *)&v72 - v21;
  v89 = type metadata accessor for LocalizedStringResource(0);
  v78 = *(_QWORD *)(v89 - 8);
  v23 = v78;
  v24 = __chkstk_darwin(v89);
  v80 = (char *)&v72 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = __chkstk_darwin(v24);
  v75 = (char *)&v72 - v27;
  __chkstk_darwin(v26);
  v29 = (char *)&v72 - v28;
  sub_1000076D8(0, &qword_1000F0040, (uint64_t (*)(uint64_t))sub_10008CE6C, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for _ContiguousArrayStorage);
  v31 = v30;
  sub_10008CE6C(0);
  v33 = v32;
  v34 = *(_QWORD *)(v32 - 8);
  v90 = v32;
  v35 = *(_QWORD *)(v34 + 72);
  v36 = *(unsigned __int8 *)(v34 + 80);
  v37 = (v36 + 32) & ~v36;
  v76 = 2 * v35;
  v38 = swift_allocObject(v31, v37 + 3 * v35, v36 | 7);
  v83 = v38;
  *(_OWORD *)(v38 + 16) = xmmword_1000B25C0;
  *(_BYTE *)(v38 + v37) = 0;
  v39 = v38 + v37;
  v40 = String.LocalizationValue.init(stringLiteral:)(0x6E657254206C6C41, 0xEA00000000007364);
  v72 = (_BYTE *)(v39 + *(int *)(v33 + 48));
  v41 = v39;
  v74 = v39;
  static Locale.current.getter(v40);
  v88 = enum case for LocalizedStringResource.BundleDescription.main(_:);
  v87 = *(void (**)(char *))(v8 + 104);
  v42 = v91;
  v87(v10);
  v43 = v22;
  v44 = v10;
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v43, 0x6E65746E49707041, 0xEA00000000007374, v13, v10, 0, 0, 256);
  v73 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v23 + 56);
  v45 = v79;
  v46 = v89;
  v73(v79, 1, 1, v89);
  v47 = v81;
  DisplayRepresentation.Image.init(systemName:tintColor:symbolConfiguration:)(0xD000000000000013, 0x80000001000BE850, 0, 0);
  v48 = v29;
  v49 = v47;
  DisplayRepresentation.init(title:subtitle:image:synonyms:)(v48, v45, v47, _swiftEmptyArrayStorage);
  v50 = (_BYTE *)(v41 + v35);
  *v50 = 1;
  v51 = v77;
  v52 = String.LocalizationValue.init(stringLiteral:)(0x20676E6972616853, 0xEE00657469766E49);
  v72 = &v50[*(int *)(v90 + 48)];
  v53 = v13;
  static Locale.current.getter(v52);
  v54 = v44;
  v55 = v44;
  v56 = v88;
  v57 = v42;
  v58 = (void (*)(char *, uint64_t, uint64_t))v87;
  ((void (*)(char *, _QWORD, uint64_t))v87)(v55, v88, v42);
  v59 = v75;
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v51, 0x6E65746E49707041, 0xEA00000000007374, v53, v54, 0, 0, 256);
  v60 = v46;
  v61 = v73;
  v73(v45, 1, 1, v60);
  DisplayRepresentation.Image.init(systemName:tintColor:symbolConfiguration:)(0xD000000000000019, 0x80000001000BE870, 0, 0);
  DisplayRepresentation.init(title:subtitle:image:synonyms:)(v59, v45, v49, _swiftEmptyArrayStorage);
  *(_BYTE *)(v74 + v76) = 2;
  v62 = v82;
  v63 = String.LocalizationValue.init(stringLiteral:)(0xD000000000000010, 0x80000001000BA700);
  static Locale.current.getter(v63);
  v58(v54, v56, v57);
  v64 = v80;
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v62, 0x6E65746E49707041, 0xEA00000000007374, v53, v54, 0, 0, 256);
  v65 = v85;
  v61(v85, 1, 1, v89);
  v66 = v86;
  DisplayRepresentation.Image.init(systemName:tintColor:symbolConfiguration:)(0x322E6E6F73726570, 0xE800000000000000, 0, 0);
  sub_1000076D8(0, &qword_1000EE710, (uint64_t (*)(uint64_t))&type metadata accessor for LocalizedStringResource, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for _ContiguousArrayStorage);
  v68 = swift_allocObject(v67, ((*(unsigned __int8 *)(v78 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v78 + 80))+ *(_QWORD *)(v78 + 72), *(unsigned __int8 *)(v78 + 80) | 7);
  *(_OWORD *)(v68 + 16) = xmmword_1000B11F0;
  v69 = v84;
  v70 = String.LocalizationValue.init(stringLiteral:)(0x542068746C616548, 0xED0000736F442D6FLL);
  static Locale.current.getter(v70);
  ((void (*)(char *, _QWORD, uint64_t))v87)(v54, v88, v91);
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v69, 0x6E65746E49707041, 0xEA00000000007374, v53, v54, 0, 0, 256);
  DisplayRepresentation.init(title:subtitle:image:synonyms:)(v64, v65, v66, v68);
  return sub_10007CB74(v83);
}

void sub_10008CE6C(uint64_t a1)
{
  uint64_t v2;
  unint64_t TupleTypeMetadata2;
  uint64_t v4;

  if (!qword_1000EF718)
  {
    v2 = type metadata accessor for DisplayRepresentation(255);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2(a1, &type metadata for OpenViewIntent.Screen, v2, 0, 0);
    if (!v4)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_1000EF718);
  }
}

void sub_10008CED0(uint64_t a1)
{
  uint64_t v2;
  unint64_t TupleTypeMetadata2;
  uint64_t v4;

  if (!qword_1000EF730)
  {
    sub_10008CF4C(255, &qword_1000EF738, (uint64_t (*)(void))sub_10007F678, (uint64_t (*)(uint64_t, ValueMetadata *, uint64_t))&type metadata accessor for EnumURLRepresentation.EnumSingleURLRepresentation);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2(a1, &type metadata for OpenViewIntent.Screen, v2, 0, 0);
    if (!v4)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_1000EF730);
  }
}

void sub_10008CF4C(uint64_t a1, unint64_t *a2, uint64_t (*a3)(void), uint64_t (*a4)(uint64_t, ValueMetadata *, uint64_t))
{
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;

  if (!*a2)
  {
    v7 = a3();
    v8 = a4(a1, &type metadata for OpenViewIntent.Screen, v7);
    if (!v9)
      atomic_store(v8, a2);
  }
}

unint64_t sub_10008CFA8(Swift::String string)
{
  void *object;
  Swift::String v2;
  unint64_t v3;

  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1000DC6B8, v2);
  swift_bridgeObjectRelease(object);
  if (v3 >= 3)
    return 3;
  else
    return v3;
}

uint64_t type metadata accessor for CloudSyncDownloadingViewController(uint64_t a1)
{
  uint64_t result;

  result = qword_1000F0068;
  if (!qword_1000F0068)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for CloudSyncDownloadingViewController);
  return result;
}

void sub_10008D02C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  _QWORD v5[3];

  v2 = qword_1000F1290;
  v5[0] = &unk_1000B6258;
  sub_10000E944(319, (unint64_t *)&qword_1000ECF98, (uint64_t (*)(uint64_t))&type metadata accessor for Date);
  if (v4 <= 0x3F)
  {
    v5[1] = *(_QWORD *)(v3 - 8) + 64;
    v5[2] = (char *)&value witness table for Builtin.UnknownObject + 64;
    swift_initClassMetadata2(a1, 0, 3, v5, a1 + v2);
  }
}

void sub_10008D0C8(void *a1)
{
  char *v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  char *v10;
  uint64_t v11;
  objc_class *v12;
  id v13;
  char *v14;
  id v15;
  id v16;
  NSString v17;
  id v18;
  objc_class *v19;
  char *v20;
  id v21;
  id v22;
  id v23;
  id v24;
  const char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  id v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  id v40;
  Class isa;
  id v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  Class v46;
  id v47;
  uint64_t v48;
  id v49;
  Class v50;
  id v51;
  uint64_t v52;
  uint64_t v53;
  NSString v54;
  uint64_t v55;
  id v56;
  __int128 v57;
  objc_super v58;
  _OWORD v59[2];
  uint64_t v60;

  v3 = type metadata accessor for Locale(0);
  __chkstk_darwin(v3);
  v5 = (char *)&v55 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for String.LocalizationValue(0);
  __chkstk_darwin(v6);
  v8 = (char *)&v55 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = &v1[qword_1000F0058];
  *((_QWORD *)v9 + 1) = 0;
  swift_unknownObjectWeakInit(v9, 0);
  v10 = &v1[qword_1000F0060];
  v11 = type metadata accessor for Date(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 56))(v10, 1, 1, v11);
  v12 = (objc_class *)type metadata accessor for CloudSyncStateObserver(0);
  memset(v59, 0, sizeof(v59));
  v60 = 0;
  v13 = objc_allocWithZone(v12);
  v14 = v1;
  v56 = a1;
  *(_QWORD *)&v14[qword_1000F1288] = CloudSyncStateObserver.init(healthStore:store:)(v56, v59);

  v15 = objc_msgSend(objc_allocWithZone((Class)UIView), "init");
  v16 = objc_msgSend((id)objc_opt_self(UIImageSymbolConfiguration), "configurationWithPointSize:weight:scale:", 4, 1, 50.0);
  v17 = String._bridgeToObjectiveC()();
  v18 = objc_msgSend((id)objc_opt_self(UIImage), "systemImageNamed:withConfiguration:", v17, v16);

  if (v18)
  {
    v19 = (objc_class *)type metadata accessor for ImageWithCircleBackground();
    v20 = (char *)objc_allocWithZone(v19);
    *(_QWORD *)&v20[OBJC_IVAR____TtC6Health25ImageWithCircleBackground_image] = v18;
    v58.receiver = v20;
    v58.super_class = v19;
    v21 = v18;
    v22 = objc_msgSendSuper2(&v58, "initWithFrame:", 0.0, 0.0, 0.0, 0.0);
    sub_100092184();

    v23 = objc_msgSend(v22, "heightAnchor");
    if (qword_1000EC0A8 != -1)
      swift_once(&qword_1000EC0A8, sub_10005FD80);
    v24 = objc_msgSend(v23, "constraintEqualToConstant:", *(double *)&qword_1000F1058);

    objc_msgSend(v24, "setActive:", 1);
    v15 = v22;
  }
  if (objc_msgSend((id)objc_opt_self(_HKMobileGestaltBridge), "wapiCapability"))
    v25 = "ipad_health_data_downloading_wlan_subtitle";
  else
    v25 = "ipad_health_data_downloading_wifi_subtitle";
  v26 = String.LocalizationValue.init(stringLiteral:)(0xD00000000000002ALL, (unint64_t)(v25 - 32) | 0x8000000000000000);
  static Locale.current.getter(v26);
  v27 = String.init(localized:table:bundle:locale:comment:)(v8, 0, 0, 0, v5, 0, 0, 256);
  v29 = v28;
  v30 = String.LocalizationValue.init(stringLiteral:)(0xD000000000000022, 0x80000001000BE9C0);
  static Locale.current.getter(v30);
  v31 = String.init(localized:table:bundle:locale:comment:)(v8, 0, 0, 0, v5, 0, 0, 256);
  v33 = v32;
  v34 = v15;
  v35 = (void *)OnboardingHeroWithLinkViewController.init(title:detailText:heroView:linkButtonText:linkButtonAction:linkButtonAccessibilityIdentifier:underLinkButtonContentView:heroViewUsesIntrinsicHeight:)(v31, v33, v27, v29, v34, 0, 0, 0, 0, 0, 0, 1);
  sub_100061034();
  v37 = v36;
  v38 = swift_allocObject(v36, 64, 7);
  v57 = xmmword_1000B1580;
  *(_OWORD *)(v38 + 16) = xmmword_1000B1580;
  v39 = swift_allocObject(v37, 64, 7);
  *(_OWORD *)(v39 + 16) = v57;
  *(_QWORD *)(v39 + 32) = 0x626E4F7964647542;
  *(_QWORD *)(v39 + 40) = 0xEF676E696472616FLL;
  *(_QWORD *)(v39 + 48) = 0xD000000000000014;
  *(_QWORD *)(v39 + 56) = 0x80000001000BE9F0;
  v40 = v35;
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v39);
  v42 = (id)HKUIJoinStringsForAutomationIdentifier(isa);

  if (v42)
  {
    v43 = static String._unconditionallyBridgeFromObjectiveC(_:)(v42);
    v45 = v44;

    *(_QWORD *)(v38 + 32) = v43;
    *(_QWORD *)(v38 + 40) = v45;
    strcpy((char *)(v38 + 48), "ContinueButton");
    *(_BYTE *)(v38 + 63) = -18;
    v46 = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(v38);
    v47 = (id)HKUIJoinStringsForAutomationIdentifier(v46);

    v48 = swift_allocObject(v37, 64, 7);
    *(_OWORD *)(v48 + 16) = v57;
    *(_QWORD *)(v48 + 32) = 0x626E4F7964647542;
    *(_QWORD *)(v48 + 40) = 0xEF676E696472616FLL;
    *(_QWORD *)(v48 + 48) = 0xD000000000000014;
    *(_QWORD *)(v48 + 56) = 0x80000001000BE9F0;
    v49 = v40;
    v50 = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(v48);
    v51 = (id)HKUIJoinStringsForAutomationIdentifier(v50);

    if (v51)
    {
      static String._unconditionallyBridgeFromObjectiveC(_:)(v51);
      v53 = v52;

      v54 = String._bridgeToObjectiveC()();
      objc_msgSend(v49, "setAccessibilityIdentifier:", v54, swift_bridgeObjectRelease(v53).n128_f64[0]);

      return;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
}

void sub_10008D710()
{
  void *v0;
  id v1;
  id v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  Class isa;
  id v7;
  uint64_t v8;
  uint64_t v9;
  NSString v10;
  objc_super v11;

  v11.receiver = v0;
  v11.super_class = (Class)type metadata accessor for CloudSyncDownloadingViewController(0);
  objc_msgSendSuper2(&v11, "viewDidLoad");
  v1 = objc_msgSend(v0, "navigationItem");
  objc_msgSend(v1, "setHidesBackButton:", 1);

  v2 = objc_msgSend(v0, "view");
  if (v2)
  {
    v3 = v2;
    sub_100061034();
    v5 = swift_allocObject(v4, 64, 7);
    *(_OWORD *)(v5 + 16) = xmmword_1000B1580;
    *(_QWORD *)(v5 + 32) = 0x626E4F7964647542;
    *(_QWORD *)(v5 + 40) = 0xEF676E696472616FLL;
    *(_QWORD *)(v5 + 48) = 0xD000000000000014;
    *(_QWORD *)(v5 + 56) = 0x80000001000BE9F0;
    isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(v5);
    v7 = (id)HKUIJoinStringsForAutomationIdentifier(isa);

    if (v7)
    {
      static String._unconditionallyBridgeFromObjectiveC(_:)(v7);
      v9 = v8;

      v10 = String._bridgeToObjectiveC()();
      objc_msgSend(v3, "setAccessibilityIdentifier:", v10, swift_bridgeObjectRelease(v9).n128_f64[0]);

      return;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
}

void sub_10008D88C(void *a1)
{
  id v1;

  v1 = a1;
  sub_10008D710();

}

uint64_t sub_10008D8C0(char a1)
{
  char *v1;
  char *v2;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  objc_class *v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE v15[24];
  objc_super v16;

  v2 = v1;
  sub_10000E944(0, (unint64_t *)&qword_1000ECF98, (uint64_t (*)(uint64_t))&type metadata accessor for Date);
  __chkstk_darwin(v4);
  v6 = &v15[-v5 - 8];
  v7 = (objc_class *)type metadata accessor for CloudSyncDownloadingViewController(0);
  v16.receiver = v2;
  v16.super_class = v7;
  v8 = objc_msgSendSuper2(&v16, "viewDidAppear:", a1 & 1);
  Date.init()(v8);
  v9 = type metadata accessor for Date(0);
  (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 56))(v6, 0, 1, v9);
  v10 = (uint64_t)&v2[qword_1000F0060];
  swift_beginAccess(&v2[qword_1000F0060], v15, 33, 0);
  sub_10008E430((uint64_t)v6, v10);
  v11 = swift_endAccess(v15);
  dispatch thunk of CloudSyncStateObserver.startFirstRestoreIfNeeded()(v11);
  v12 = swift_allocObject(&unk_1000E1FB8, 24, 7);
  swift_unknownObjectWeakInit(v12 + 16, v2);
  swift_retain(v12);
  dispatch thunk of CloudSyncStateObserver.firstRestoreStateChangeHandler.setter(sub_10008E4A8, v12);
  return swift_release(v12);
}

void sub_10008DA04(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t Strong;
  void *v5;
  _BYTE v6[24];

  v3 = a2 + 16;
  swift_beginAccess(a2 + 16, v6, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(v3);
  if (Strong)
  {
    v5 = (void *)Strong;
    sub_10008DA9C(a1);

  }
}

void sub_10008DA5C(void *a1, uint64_t a2, char a3)
{
  id v4;

  v4 = a1;
  sub_10008D8C0(a3);

}

uint64_t sub_10008DA9C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  void (*v20)(char *, uint64_t, uint64_t);
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  NSObject *v24;
  os_log_type_t v25;
  uint64_t v26;
  uint8_t *v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  void (*v32)(char *, uint64_t);
  uint64_t v33;
  uint64_t v34;
  NSObject *v35;
  os_log_type_t v36;
  uint64_t v37;
  uint8_t *v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t (*v43)(char *, uint64_t);
  char *v44;
  uint64_t v45;
  NSObject *v46;
  os_log_type_t v47;
  _BOOL4 v48;
  uint64_t v49;
  uint8_t *v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v57;
  uint8_t *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t ObjectType;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;

  v2 = v1;
  ObjectType = swift_getObjectType(v2);
  v4 = type metadata accessor for Logger(0);
  v62 = *(_QWORD *)(v4 - 8);
  v5 = __chkstk_darwin(v4);
  v7 = (char *)&v57 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __chkstk_darwin(v5);
  v10 = (char *)&v57 - v9;
  __chkstk_darwin(v8);
  v12 = (char *)&v57 - v11;
  v13 = type metadata accessor for CloudSyncRestoreState(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = __chkstk_darwin(v13);
  v17 = (char *)&v57 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  v19 = (char *)&v57 - v18;
  v20 = *(void (**)(char *, uint64_t, uint64_t))(v14 + 16);
  v20((char *)&v57 - v18, a1, v13);
  v21 = ((uint64_t (*)(char *, char *, uint64_t))v20)(v17, v19, v13);
  v22 = CloudSyncRestoreState.isOngoing.getter(v21);
  if ((v22 & 1) != 0)
  {
    v23 = static Logger.cloudSync.getter(v22);
    v24 = Logger.logObject.getter(v23);
    v25 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v24, v25))
    {
      v26 = swift_slowAlloc(12, -1);
      v60 = v4;
      v27 = (uint8_t *)v26;
      v59 = swift_slowAlloc(32, -1);
      v64 = v59;
      *(_DWORD *)v27 = 136315138;
      v58 = v27 + 4;
      v28 = _typeName(_:qualified:)(ObjectType, 0);
      v30 = v29;
      v63 = sub_100012B20(v28, v29, &v64);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v63, &v64, v58, v27 + 12);
      swift_bridgeObjectRelease(v30);
      _os_log_impl((void *)&_mh_execute_header, v24, v25, "[%s] Sync in progress", v27, 0xCu);
      v31 = v59;
      swift_arrayDestroy(v59, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v31, -1, -1);
      swift_slowDealloc(v27, -1, -1);

      (*(void (**)(char *, uint64_t))(v62 + 8))(v12, v60);
    }
    else
    {

      (*(void (**)(char *, uint64_t))(v62 + 8))(v12, v4);
    }
    v32 = *(void (**)(char *, uint64_t))(v14 + 8);
    v32(v17, v13);
    return ((uint64_t (*)(char *, uint64_t))v32)(v19, v13);
  }
  v32 = *(void (**)(char *, uint64_t))(v14 + 8);
  v32(v17, v13);
  v33 = (*(uint64_t (**)(char *, uint64_t))(v14 + 88))(v19, v13);
  if ((_DWORD)v33 != enum case for CloudSyncRestoreState.failed(_:))
  {
    if ((_DWORD)v33 != enum case for CloudSyncRestoreState.completed(_:))
      return ((uint64_t (*)(char *, uint64_t))v32)(v19, v13);
    v45 = static Logger.cloudSync.getter(v33);
    v46 = Logger.logObject.getter(v45);
    v47 = static os_log_type_t.default.getter();
    v48 = os_log_type_enabled(v46, v47);
    v49 = v62;
    if (v48)
    {
      v37 = v4;
      v50 = (uint8_t *)swift_slowAlloc(12, -1);
      v51 = swift_slowAlloc(32, -1);
      v64 = v51;
      *(_DWORD *)v50 = 136315138;
      v52 = _typeName(_:qualified:)(ObjectType, 0);
      v54 = v53;
      v63 = sub_100012B20(v52, v53, &v64);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v63, &v64, v50 + 4, v50 + 12);
      swift_bridgeObjectRelease(v54);
      _os_log_impl((void *)&_mh_execute_header, v46, v47, "[%s] Sync completed", v50, 0xCu);
      swift_arrayDestroy(v51, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v51, -1, -1);
      swift_slowDealloc(v50, -1, -1);

      v43 = *(uint64_t (**)(char *, uint64_t))(v49 + 8);
      v44 = v10;
      goto LABEL_12;
    }

    v43 = *(uint64_t (**)(char *, uint64_t))(v49 + 8);
    v44 = v10;
LABEL_16:
    v55 = v4;
    return v43(v44, v55);
  }
  v34 = static Logger.cloudSync.getter(v33);
  v35 = Logger.logObject.getter(v34);
  v36 = static os_log_type_t.default.getter();
  if (!os_log_type_enabled(v35, v36))
  {

    v43 = *(uint64_t (**)(char *, uint64_t))(v62 + 8);
    v44 = v7;
    goto LABEL_16;
  }
  v37 = v4;
  v38 = (uint8_t *)swift_slowAlloc(12, -1);
  v39 = swift_slowAlloc(32, -1);
  v64 = v39;
  *(_DWORD *)v38 = 136315138;
  v40 = _typeName(_:qualified:)(ObjectType, 0);
  v42 = v41;
  v63 = sub_100012B20(v40, v41, &v64);
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v63, &v64, v38 + 4, v38 + 12);
  swift_bridgeObjectRelease(v42);
  _os_log_impl((void *)&_mh_execute_header, v35, v36, "[%s] Sync failed", v38, 0xCu);
  swift_arrayDestroy(v39, 1, (char *)&type metadata for Any + 8);
  swift_slowDealloc(v39, -1, -1);
  swift_slowDealloc(v38, -1, -1);

  v43 = *(uint64_t (**)(char *, uint64_t))(v62 + 8);
  v44 = v7;
LABEL_12:
  v55 = v37;
  return v43(v44, v55);
}

uint64_t sub_10008DFEC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t ObjectType;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  NSObject *v15;
  os_log_type_t v16;
  uint64_t v17;
  uint8_t *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint8_t *v24;
  uint64_t result;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void (*v30)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;

  v1 = v0;
  ObjectType = swift_getObjectType(v0);
  sub_10000E944(0, (unint64_t *)&qword_1000EF4B0, (uint64_t (*)(uint64_t))&type metadata accessor for CloudSyncRestoreState);
  v4 = __chkstk_darwin(v3);
  v6 = (char *)&v31 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v8 = (char *)&v31 - v7;
  v9 = type metadata accessor for Logger(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = __chkstk_darwin(v9);
  v13 = (char *)&v31 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = static Logger.cloudSync.getter(v11);
  v15 = Logger.logObject.getter(v14);
  v16 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v15, v16))
  {
    v33 = v1;
    v17 = swift_slowAlloc(12, -1);
    v34 = v6;
    v18 = (uint8_t *)v17;
    v19 = swift_slowAlloc(32, -1);
    v36 = v19;
    *(_DWORD *)v18 = 136315138;
    v32 = v9;
    v20 = _typeName(_:qualified:)(ObjectType, 0);
    v22 = v21;
    v35 = sub_100012B20(v20, v21, &v36);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v35, &v36, v18 + 4, v18 + 12);
    v23 = v22;
    v1 = v33;
    swift_bridgeObjectRelease(v23);
    _os_log_impl((void *)&_mh_execute_header, v15, v16, "[%s] User tapped Done while sync was in progress", v18, 0xCu);
    swift_arrayDestroy(v19, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v19, -1, -1);
    v24 = v18;
    v6 = v34;
    swift_slowDealloc(v24, -1, -1);

    (*(void (**)(char *, uint64_t))(v10 + 8))(v13, v32);
  }
  else
  {

    (*(void (**)(char *, uint64_t))(v10 + 8))(v13, v9);
  }
  result = swift_unknownObjectWeakLoadStrong(v1 + qword_1000F0058);
  if (result)
  {
    v26 = result;
    v27 = enum case for CloudSyncRestoreState.activelyRestoring(_:);
    v28 = type metadata accessor for CloudSyncRestoreState(0);
    v29 = *(_QWORD *)(v28 - 8);
    (*(void (**)(char *, uint64_t, uint64_t))(v29 + 104))(v8, v27, v28);
    v30 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v29 + 56);
    v30(v8, 0, 1, v28);
    v30(v6, 1, 1, v28);
    sub_100074ADC((uint64_t)v8, (uint64_t)v6);
    swift_unknownObjectRelease(v26);
    sub_100071D4C((uint64_t)v6, (unint64_t *)&qword_1000EF4B0, (uint64_t (*)(uint64_t))&type metadata accessor for CloudSyncRestoreState);
    return sub_100071D4C((uint64_t)v8, (unint64_t *)&qword_1000EF4B0, (uint64_t (*)(uint64_t))&type metadata accessor for CloudSyncRestoreState);
  }
  return result;
}

void sub_10008E2C4(void *a1)
{
  id v1;

  v1 = a1;
  sub_10008DFEC();

}

void sub_10008E2F8()
{
  _swift_stdlib_reportUnimplementedInitializer("Health.CloudSyncDownloadingViewController", 41, "init(title:detailText:heroView:linkButtonText:linkButtonAction:linkButtonAccessibilityIdentifier:underLinkButtonContentView:heroViewUsesIntrinsicHeight:)", 153, 0);
  __break(1u);
}

void sub_10008E324()
{
  _swift_stdlib_reportUnimplementedInitializer("Health.CloudSyncDownloadingViewController", 41, "init(title:detailText:heroImage:heroImageHeight:linkButtonText:linkButtonAction:linkButtonAccessibilityIdentifier:underLinkButtonContentView:)", 142, 0);
  __break(1u);
}

void sub_10008E350()
{
  uint64_t v0;

  sub_100061088(v0 + qword_1000F0058);
  sub_100071D4C(v0 + qword_1000F0060, (unint64_t *)&qword_1000ECF98, (uint64_t (*)(uint64_t))&type metadata accessor for Date);

}

id sub_10008E39C()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for CloudSyncDownloadingViewController(0);
  return objc_msgSendSuper2(&v2, "dealloc");
}

void sub_10008E3D0(uint64_t a1)
{
  sub_100061088(a1 + qword_1000F0058);
  sub_100071D4C(a1 + qword_1000F0060, (unint64_t *)&qword_1000ECF98, (uint64_t (*)(uint64_t))&type metadata accessor for Date);

}

uint64_t sub_10008E428()
{
  return type metadata accessor for CloudSyncDownloadingViewController(0);
}

uint64_t sub_10008E430(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_10000E944(0, (unint64_t *)&qword_1000ECF98, (uint64_t (*)(uint64_t))&type metadata accessor for Date);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t sub_10008E484()
{
  uint64_t v0;

  swift_unknownObjectWeakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

void sub_10008E4A8(uint64_t a1)
{
  uint64_t v1;

  sub_10008DA04(a1, v1);
}

uint64_t type metadata accessor for HealthNotificationsWelcomeViewController(uint64_t a1)
{
  uint64_t result;

  result = qword_1000F00E0;
  if (!qword_1000F00E0)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for HealthNotificationsWelcomeViewController);
  return result;
}

uint64_t sub_10008E4EC(uint64_t a1)
{
  _QWORD v2[5];

  v2[0] = (char *)&value witness table for Builtin.NativeObject + 64;
  v2[1] = (char *)&value witness table for Builtin.NativeObject + 64;
  v2[2] = &unk_1000B62E0;
  v2[3] = &unk_1000B62F8;
  v2[4] = &unk_1000B62F8;
  return swift_initClassMetadata2(a1, 0, 5, v2, a1 + qword_1000F12A0);
}

void sub_10008E550(uint64_t a1, void *a2)
{
  uint64_t v3;
  void (*v4)(void);
  id v5;

  v4 = *(void (**)(void))(a1 + 32);
  v3 = *(_QWORD *)(a1 + 40);
  swift_retain(v3);
  v5 = a2;
  v4();
  swift_release(v3);

}

id sub_10008E5A0()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  id v3;
  id v4;
  void *v5;
  id v6;

  v1 = qword_1000F00D8;
  v2 = *(void **)(v0 + qword_1000F00D8);
  if (v2)
  {
    v3 = *(id *)(v0 + qword_1000F00D8);
  }
  else
  {
    v4 = sub_10008E5FC();
    v5 = *(void **)(v0 + v1);
    *(_QWORD *)(v0 + v1) = v4;
    v3 = v4;

    v2 = 0;
  }
  v6 = v2;
  return v3;
}

id sub_10008E5FC()
{
  uint64_t v0;
  uint64_t ObjCClassFromMetadata;
  id v2;
  NSString v3;
  id v4;
  id v5;

  v0 = type metadata accessor for DiffableCollectionViewAdaptor(0);
  ObjCClassFromMetadata = swift_getObjCClassFromMetadata(v0);
  v2 = objc_msgSend((id)objc_opt_self(NSBundle), "bundleForClass:", ObjCClassFromMetadata);
  v3 = String._bridgeToObjectiveC()();
  v4 = objc_msgSend((id)objc_opt_self(UIImage), "imageNamed:inBundle:", v3, v2);

  v5 = objc_msgSend(objc_allocWithZone((Class)UIImageView), "initWithImage:", v4);
  objc_msgSend(v5, "setTranslatesAutoresizingMaskIntoConstraints:", 0);
  objc_msgSend(v5, "setContentMode:", 1);

  return v5;
}

char *sub_10008E6FC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  NSString v32;
  uint64_t v33;
  uint64_t v34;
  Class isa;
  id v36;
  id v37;
  void *v38;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  v3 = v2;
  v6 = type metadata accessor for Locale(0);
  __chkstk_darwin(v6);
  v8 = (char *)&v40 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for String.LocalizationValue(0);
  __chkstk_darwin(v9);
  v11 = (char *)&v40 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = v3 + qword_1000F00C8;
  *(_QWORD *)(v12 + 8) = 0;
  swift_unknownObjectWeakInit(v12, 0);
  *(_QWORD *)(v3 + qword_1000F00D0) = 0;
  *(_QWORD *)(v3 + qword_1000F00D8) = 0;
  *(_QWORD *)(v3 + qword_1000F00B8) = a1;
  v41 = a1;
  v42 = a2;
  *(_QWORD *)(v3 + qword_1000F00C0) = a2;
  swift_retain(a1);
  swift_retain(a2);
  v13 = String.LocalizationValue.init(stringLiteral:)(0xD000000000000018, 0x80000001000BEDE0);
  static Locale.current.getter(v13);
  v14 = String.init(localized:table:bundle:locale:comment:)(v11, 0, 0, 0, v8, 0, 0, 256);
  v16 = v15;
  v17 = String.LocalizationValue.init(stringLiteral:)(0xD000000000000019, 0x80000001000BEE00);
  static Locale.current.getter(v17);
  v18 = String.init(localized:table:bundle:locale:comment:)(v11, 0, 0, 0, v8, 0, 0, 256);
  v20 = v19;
  v21 = sub_10004004C();
  v23 = v22;
  v24 = static AdvertisableFeature.Identifier.healthWelcomeFlowIdentifiers.getter(v21);
  v25 = String.LocalizationValue.init(stringLiteral:)(0xD000000000000021, 0x80000001000BEE20);
  static Locale.current.getter(v25);
  v26 = String.init(localized:table:bundle:locale:comment:)(v11, 0, 0, 0, v8, 0, 0, 256);
  v28 = (char *)(id)AdvertisableFeatureOnboardingViewController.init(featureManager:featureIdentifiers:title:detailText:subtitleText:icon:)(v21, v23, v24, v14, v16, v18, v20, v26, v27, 0);
  v29 = String.LocalizationValue.init(stringLiteral:)(0xD000000000000029, 0x80000001000BEE50);
  static Locale.current.getter(v29);
  String.init(localized:table:bundle:locale:comment:)(v11, 0, 0, 0, v8, 0, 0, 256);
  v31 = v30;
  v32 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v31);
  sub_1000275F4(0, (unint64_t *)&qword_1000EF4C0, (uint64_t)&type metadata for String);
  v34 = swift_allocObject(v33, 64, 7);
  *(_OWORD *)(v34 + 16) = xmmword_1000B1580;
  *(_QWORD *)(v34 + 32) = 0xD00000000000002DLL;
  *(_QWORD *)(v34 + 40) = 0x80000001000BEB30;
  strcpy((char *)(v34 + 48), "ContinueButton");
  *(_BYTE *)(v34 + 63) = -18;
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v34);
  v36 = (id)HKUIJoinStringsForAutomationIdentifier(isa);

  v37 = objc_msgSend(v28, "hxui_addPrimaryFooterButtonWithTitle:accessibilityIdentifier:", v32, v36);
  v38 = *(void **)&v28[qword_1000F00D0];
  *(_QWORD *)&v28[qword_1000F00D0] = v37;

  sub_10008EABC();
  swift_release(v41);
  swift_release(v42);
  return v28;
}

void sub_10008EABC()
{
  void *v0;
  id v1;
  id v2;
  id v3;
  void *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  id v9;
  id v10;
  id v11;
  id v12;
  id v13;
  id v14;
  id v15;
  id v16;
  id v17;
  id v18;
  id v19;
  id v20;
  id v21;
  id v22;
  id v23;
  uint64_t v24;
  NSArray v25;
  double v26;
  id v27;
  id v28;

  v1 = objc_msgSend(v0, "headerView");
  objc_msgSend(v1, "setAllowFullWidthIcon:", 1);

  v2 = objc_msgSend(v0, "headerView");
  v27 = objc_msgSend(v2, "customIconContainerView");

  if (v27)
  {
    objc_msgSend(v27, "setClipsToBounds:", 0);
    v3 = sub_10008E5A0();
    objc_msgSend(v27, "addSubview:", v3);

    v4 = (void *)objc_opt_self(UIScreen);
    if ((objc_msgSend(v4, "hk_currentDeviceHas4InchScreen") & 1) != 0
      || objc_msgSend(v4, "hk_currentDeviceHas4Point7InchScreen"))
    {
      v5 = (void *)objc_opt_self(NSLayoutConstraint);
      sub_1000275F4(0, (unint64_t *)&qword_1000ED9C0, (uint64_t)&type metadata for Swift.AnyObject + 8);
      v7 = swift_allocObject(v6, 64, 7);
      *(_OWORD *)(v7 + 16) = xmmword_1000B4AC0;
      v8 = sub_10008E5A0();
      v9 = objc_msgSend(v8, "topAnchor");

      v10 = objc_msgSend(v27, "topAnchor");
      v11 = objc_msgSend(v9, "constraintEqualToAnchor:constant:", v10, 10.0);

      *(_QWORD *)(v7 + 32) = v11;
      v12 = sub_10008E5A0();
      v13 = objc_msgSend(v12, "leadingAnchor");

      v14 = objc_msgSend(v27, "leadingAnchor");
      v15 = objc_msgSend(v13, "constraintEqualToAnchor:", v14);

      *(_QWORD *)(v7 + 40) = v15;
      v16 = sub_10008E5A0();
      v17 = objc_msgSend(v16, "trailingAnchor");

      v18 = objc_msgSend(v27, "trailingAnchor");
      v19 = objc_msgSend(v17, "constraintEqualToAnchor:", v18);

      *(_QWORD *)(v7 + 48) = v19;
      v20 = sub_10008E5A0();
      v21 = objc_msgSend(v20, "bottomAnchor");

      v22 = objc_msgSend(v27, "bottomAnchor");
      v23 = objc_msgSend(v21, "constraintEqualToAnchor:", v22);

      *(_QWORD *)(v7 + 56) = v23;
      specialized Array._endMutation()(v24);
      sub_100006D10(0, &qword_1000EF2B8, NSLayoutConstraint_ptr);
      v25.super.isa = Array._bridgeToObjectiveC()().super.isa;
      objc_msgSend(v5, "activateConstraints:", v25.super.isa, swift_bridgeObjectRelease(v7).n128_f64[0], v27);
    }
    else
    {
      v25.super.isa = (Class)sub_10008E5A0();
      -[objc_class hk_alignConstraintsWithView:](v25.super.isa, "hk_alignConstraintsWithView:", v27, v26, v27);
    }

  }
}

void sub_10008EE38(void *a1)
{
  id v1;
  id v2;
  void *v3;
  NSString v4;
  objc_super v5;

  v5.receiver = a1;
  v5.super_class = (Class)type metadata accessor for HealthNotificationsWelcomeViewController(0);
  v1 = v5.receiver;
  objc_msgSendSuper2(&v5, "viewDidLoad");
  v2 = objc_msgSend(v1, "view", v5.receiver, v5.super_class);
  if (v2)
  {
    v3 = v2;
    v4 = String._bridgeToObjectiveC()();
    objc_msgSend(v3, "setAccessibilityIdentifier:", v4);

    sub_100043080();
  }
  else
  {
    __break(1u);
  }
}

void sub_10008EF00()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t ObjectType;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  _BOOL4 v11;
  uint64_t v12;
  uint8_t *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  id v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v1 = v0;
  ObjectType = swift_getObjectType(v0);
  v3 = type metadata accessor for Logger(0);
  v4 = *(_QWORD *)(v3 - 8);
  v5 = __chkstk_darwin(v3);
  v7 = (char *)&v23 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = static Logger.general.getter(v5);
  v9 = Logger.logObject.getter(v8);
  v10 = static os_log_type_t.default.getter();
  v11 = os_log_type_enabled(v9, v10);
  v24 = ObjectType;
  if (v11)
  {
    v12 = swift_slowAlloc(12, -1);
    v23 = v3;
    v13 = (uint8_t *)v12;
    v14 = swift_slowAlloc(32, -1);
    v26 = v14;
    *(_DWORD *)v13 = 136315138;
    v15 = _typeName(_:qualified:)(ObjectType, 0);
    v17 = v16;
    v25 = sub_100012B20(v15, v16, &v26);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v25, &v26, v13 + 4, v13 + 12);
    swift_bridgeObjectRelease(v17);
    _os_log_impl((void *)&_mh_execute_header, v9, v10, "%s Primary footer button tapped", v13, 0xCu);
    swift_arrayDestroy(v14, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v14, -1, -1);
    swift_slowDealloc(v13, -1, -1);

    (*(void (**)(char *, uint64_t))(v4 + 8))(v7, v23);
  }
  else
  {

    (*(void (**)(char *, uint64_t))(v4 + 8))(v7, v3);
  }
  v18 = *(id *)(v1 + qword_1000F00D0);
  if (v18)
    v18 = objc_msgSend(v18, "showsBusyIndicator");
  v19 = dispatch thunk of AdvertisableFeatureOnboardingViewController.hasAdvertisableFeatures.getter(v18);
  v20 = swift_allocObject(&unk_1000E2008, 24, 7);
  swift_unknownObjectWeakInit(v20 + 16, v1);
  v21 = swift_allocObject(&unk_1000E2030, 32, 7);
  v22 = v24;
  *(_QWORD *)(v21 + 16) = v20;
  *(_QWORD *)(v21 + 24) = v22;
  swift_retain(v20);
  sub_100041130(v19 & 1, (uint64_t)sub_100090998, v21);
  swift_release(v20);
  swift_release(v21);
  LOWORD(v26) = 3;
  sub_100046898();
  AnalyticsSubmitting.submit()();
}

uint64_t sub_10008F17C(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  void *v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD aBlock[5];
  uint64_t v31;

  v10 = type metadata accessor for DispatchWorkItemFlags(0);
  v29 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v12 = (char *)&v26 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for DispatchQoS(0);
  v27 = *(_QWORD *)(v13 - 8);
  v28 = v13;
  __chkstk_darwin(v13);
  v15 = (char *)&v26 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100006D10(0, (unint64_t *)&qword_1000ED910, OS_dispatch_queue_ptr);
  v16 = (void *)static OS_dispatch_queue.main.getter();
  v17 = swift_allocObject(&unk_1000E2058, 56, 7);
  *(_QWORD *)(v17 + 16) = a4;
  *(_QWORD *)(v17 + 24) = a1;
  *(_QWORD *)(v17 + 32) = a2;
  *(_BYTE *)(v17 + 40) = a3;
  *(_QWORD *)(v17 + 48) = a5;
  aBlock[4] = sub_1000909D0;
  v31 = v17;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100006988;
  aBlock[3] = &unk_1000E2070;
  v18 = _Block_copy(aBlock);
  v19 = v31;
  swift_retain(a4);
  sub_1000441A0(a1, a2, a3);
  v20 = swift_release(v19);
  static DispatchQoS.unspecified.getter(v20);
  aBlock[0] = _swiftEmptyArrayStorage;
  v21 = sub_100013198((unint64_t *)&qword_1000EDBE0, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  sub_10003FF74(0);
  v23 = v22;
  v24 = sub_100013198((unint64_t *)&qword_1000EDBF0, (uint64_t (*)(uint64_t))sub_10003FF74, (uint64_t)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(aBlock, v23, v24, v10, v21);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v15, v12, v18);
  _Block_release(v18);

  (*(void (**)(char *, uint64_t))(v29 + 8))(v12, v10);
  return (*(uint64_t (**)(char *, uint64_t))(v27 + 8))(v15, v28);
}

void sub_10008F3B8(uint64_t a1, uint64_t a2, unint64_t a3, char a4, uint64_t a5)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  NSObject *v29;
  os_log_type_t v30;
  uint8_t *v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  void *v37;
  uint64_t v38;
  void *v39;
  void *v40;
  id v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  NSString v45;
  uint64_t Strong;
  void *v47;
  uint64_t v48;
  _QWORD *v49;
  uint64_t v50;
  NSObject *v51;
  os_log_type_t v52;
  uint64_t v53;
  uint8_t *v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  unint64_t v58;
  uint64_t v59;
  NSObject *v60;
  os_log_type_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  unint64_t v66;
  uint64_t v67;
  unint64_t v68;
  unint64_t v69;
  uint64_t v70;
  void *v71;
  uint64_t v72;
  void *v73;
  void *v74;
  id v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  _BYTE v80[24];
  uint64_t v81;
  _BYTE v82[16];
  uint64_t v83;
  unint64_t v84;
  char v85;

  v78 = a5;
  v79 = a2;
  v8 = type metadata accessor for Locale(0);
  __chkstk_darwin(v8);
  v10 = (char *)&v76 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for String.LocalizationValue(0);
  __chkstk_darwin(v11);
  v13 = (char *)&v76 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for Logger(0);
  v15 = *(_QWORD *)(v14 - 8);
  v16 = __chkstk_darwin(v14);
  v18 = (char *)&v76 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = __chkstk_darwin(v16);
  v21 = (char *)&v76 - v20;
  v22 = __chkstk_darwin(v19);
  v24 = (char *)&v76 - v23;
  v25 = a1 + 16;
  if (!a4)
  {
    v28 = static Logger.advertisableFeatures.getter(v22);
    v29 = Logger.logObject.getter(v28);
    v30 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v29, v30))
    {
      v77 = v14;
      v31 = (uint8_t *)swift_slowAlloc(12, -1);
      v32 = swift_slowAlloc(32, -1);
      v83 = v32;
      *(_DWORD *)v31 = 136315138;
      v33 = _typeName(_:qualified:)(v78, 0);
      v35 = v34;
      v81 = sub_100012B20(v33, v34, &v83);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v81, v82, v31 + 4, v31 + 12);
      swift_bridgeObjectRelease(v35);
      _os_log_impl((void *)&_mh_execute_header, v29, v30, "%s Notifying that the user tapped continue in order to proceed, supplying follow up items", v31, 0xCu);
      swift_arrayDestroy(v32, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v32, -1, -1);
      swift_slowDealloc(v31, -1, -1);

      (*(void (**)(char *, uint64_t))(v15 + 8))(v21, v77);
    }
    else
    {

      (*(void (**)(char *, uint64_t))(v15 + 8))(v21, v14);
    }
    swift_beginAccess(v25, &v81, 0, 0);
    Strong = swift_unknownObjectWeakLoadStrong(v25);
    if (!Strong)
      goto LABEL_28;
    v47 = (void *)Strong;
    v48 = swift_unknownObjectWeakLoadStrong(Strong + qword_1000F00C8);

    if (!v48)
      goto LABEL_28;
    v49 = (_QWORD *)v79;
LABEL_26:
    sub_100075260((uint64_t)v49);
    swift_unknownObjectRelease(v48);
    goto LABEL_28;
  }
  if (a4 == 1)
  {
    swift_beginAccess(v25, &v81, 0, 0);
    v26 = swift_unknownObjectWeakLoadStrong(v25);
    if (v26)
    {
      v27 = (void *)v26;
      sub_10008FB30(v79, a3);

    }
    goto LABEL_28;
  }
  if (!(v79 | a3))
  {
    v50 = static Logger.general.getter(v22);
    v51 = Logger.logObject.getter(v50);
    v52 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v51, v52))
    {
      v53 = swift_slowAlloc(12, -1);
      v77 = v14;
      v54 = (uint8_t *)v53;
      v55 = swift_slowAlloc(32, -1);
      v83 = v55;
      *(_DWORD *)v54 = 136315138;
      v56 = _typeName(_:qualified:)(v78, 0);
      v58 = v57;
      v81 = sub_100012B20(v56, v57, &v83);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v81, v82, v54 + 4, v54 + 12);
      swift_bridgeObjectRelease(v58);
      _os_log_impl((void *)&_mh_execute_header, v51, v52, "%s Notifying that the user tapped continue in order to proceed, no follow up items", v54, 0xCu);
      swift_arrayDestroy(v55, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v55, -1, -1);
      swift_slowDealloc(v54, -1, -1);

      (*(void (**)(char *, uint64_t))(v15 + 8))(v24, v77);
    }
    else
    {

      (*(void (**)(char *, uint64_t))(v15 + 8))(v24, v14);
    }
    swift_beginAccess(v25, &v81, 0, 0);
    v70 = swift_unknownObjectWeakLoadStrong(v25);
    if (!v70)
      goto LABEL_28;
    v71 = (void *)v70;
    v48 = swift_unknownObjectWeakLoadStrong(v70 + qword_1000F00C8);

    if (!v48)
      goto LABEL_28;
    v49 = _swiftEmptyArrayStorage;
    goto LABEL_26;
  }
  if (v79 ^ 1 | a3)
  {
    v59 = static Logger.general.getter(v22);
    v60 = Logger.logObject.getter(v59);
    v61 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v60, v61))
    {
      v62 = swift_slowAlloc(22, -1);
      v63 = swift_slowAlloc(64, -1);
      v81 = v63;
      *(_DWORD *)v62 = 136315394;
      v77 = v14;
      v64 = _typeName(_:qualified:)(v78, 0);
      v66 = v65;
      v83 = sub_100012B20(v64, v65, &v81);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v83, &v84, v62 + 4, v62 + 12);
      swift_bridgeObjectRelease(v66);
      *(_WORD *)(v62 + 12) = 2080;
      v83 = v79;
      v84 = a3;
      v85 = 2;
      v67 = String.init<A>(describing:)(&v83, &type metadata for HealthNotificationsWelcomeViewModel.ProgressionResult);
      v69 = v68;
      v83 = sub_100012B20(v67, v68, &v81);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v83, &v84, v62 + 14, v62 + 22);
      swift_bridgeObjectRelease(v69);
      _os_log_impl((void *)&_mh_execute_header, v60, v61, "%s Did not proceed: %s", (uint8_t *)v62, 0x16u);
      swift_arrayDestroy(v63, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v63, -1, -1);
      swift_slowDealloc(v62, -1, -1);

      (*(void (**)(char *, uint64_t))(v15 + 8))(v18, v77);
    }
    else
    {

      (*(void (**)(char *, uint64_t))(v15 + 8))(v18, v14);
    }
  }
  else
  {
    swift_beginAccess(v25, &v81, 0, 0);
    v36 = swift_unknownObjectWeakLoadStrong(v25);
    if (v36)
    {
      v37 = (void *)v36;
      sub_1000900E8();

    }
    swift_beginAccess(v25, v80, 0, 0);
    v38 = swift_unknownObjectWeakLoadStrong(v25);
    if (v38)
    {
      v39 = (void *)v38;
      v40 = *(void **)(v38 + qword_1000F00D0);
      v41 = v40;

      if (v40)
      {
        v42 = String.LocalizationValue.init(stringLiteral:)(0xD00000000000002ALL, 0x80000001000BEB00);
        static Locale.current.getter(v42);
        String.init(localized:table:bundle:locale:comment:)(v13, 0, 0, 0, v10, 0, 0, 256);
        v44 = v43;
        v45 = String._bridgeToObjectiveC()();
        objc_msgSend(v41, "setTitle:forState:", v45, 0, swift_bridgeObjectRelease(v44).n128_f64[0]);

      }
    }
  }
LABEL_28:
  swift_beginAccess(v25, &v83, 0, 0);
  v72 = swift_unknownObjectWeakLoadStrong(v25);
  if (v72)
  {
    v73 = (void *)v72;
    v74 = *(void **)(v72 + qword_1000F00D0);
    v75 = v74;

    if (v74)
    {
      objc_msgSend(v75, "hidesBusyIndicator");

    }
  }
}

void sub_10008FAFC(void *a1)
{
  id v1;

  v1 = a1;
  sub_10008EF00();

}

void sub_10008FB30(uint64_t a1, unint64_t a2)
{
  void *v2;
  void *v3;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  NSString v18;
  NSString v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  id v25;
  NSString v26;
  void *v27;
  id v28;
  uint64_t v29;
  uint64_t v30;
  Class isa;
  id v32;
  uint64_t v33;
  NSObject *v34;
  os_log_type_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t ObjectType;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t aBlock[5];
  uint64_t v50;

  v3 = v2;
  ObjectType = swift_getObjectType(v2);
  v6 = type metadata accessor for Logger(0);
  v47 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v8 = (char *)&v42 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for Locale(0);
  __chkstk_darwin(v9);
  v11 = (char *)&v42 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for String.LocalizationValue(0);
  __chkstk_darwin(v12);
  v14 = (char *)&v42 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = String.LocalizationValue.init(stringLiteral:)(0xD00000000000002CLL, 0x80000001000BED60);
  static Locale.current.getter(v15);
  String.init(localized:table:bundle:locale:comment:)(v14, 0, 0, 0, v11, 0, 0, 256);
  v17 = v16;
  swift_bridgeObjectRetain(a2);
  v18 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v17);
  v45 = a1;
  v19 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a2);
  v20 = objc_msgSend((id)objc_opt_self(UIAlertController), "alertControllerWithTitle:message:preferredStyle:", v18, v19, 1);

  v21 = String.LocalizationValue.init(stringLiteral:)(0xD00000000000002DLL, 0x80000001000BED90);
  static Locale.current.getter(v21);
  String.init(localized:table:bundle:locale:comment:)(v14, 0, 0, 0, v11, 0, 0, 256);
  v23 = v22;
  v24 = swift_allocObject(&unk_1000E20F8, 24, 7);
  *(_QWORD *)(v24 + 16) = v3;
  v25 = v3;
  v26 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v23);
  aBlock[4] = (uint64_t)sub_100090A08;
  v50 = v24;
  aBlock[0] = (uint64_t)_NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = (uint64_t)sub_10008E550;
  aBlock[3] = (uint64_t)&unk_1000E2110;
  v27 = _Block_copy(aBlock);
  swift_release(v50);
  v28 = objc_msgSend((id)objc_opt_self(UIAlertAction), "actionWithTitle:style:handler:", v26, 1, v27);
  _Block_release(v27);

  sub_1000275F4(0, (unint64_t *)&qword_1000EF4C0, (uint64_t)&type metadata for String);
  v30 = swift_allocObject(v29, 64, 7);
  *(_OWORD *)(v30 + 16) = xmmword_1000B1580;
  *(_QWORD *)(v30 + 32) = 0xD00000000000002DLL;
  *(_QWORD *)(v30 + 40) = 0x80000001000BEB30;
  strcpy((char *)(v30 + 48), "CancelAction");
  *(_BYTE *)(v30 + 61) = 0;
  *(_WORD *)(v30 + 62) = -5120;
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v30);
  v32 = (id)HKUIJoinStringsForAutomationIdentifier(isa);

  objc_msgSend(v28, "setAccessibilityIdentifier:", v32);
  static Logger.general.getter(objc_msgSend(v20, "addAction:", v28));
  v33 = swift_bridgeObjectRetain_n(a2, 2);
  v46 = v8;
  v34 = Logger.logObject.getter(v33);
  v35 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v34, v35))
  {
    v36 = swift_slowAlloc(22, -1);
    v43 = v6;
    v37 = v36;
    v42 = swift_slowAlloc(64, -1);
    aBlock[0] = v42;
    *(_DWORD *)v37 = 136315395;
    v38 = _typeName(_:qualified:)(ObjectType, 0);
    v40 = v39;
    v48 = sub_100012B20(v38, v39, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v48, aBlock, v37 + 4, v37 + 12);
    swift_bridgeObjectRelease(v40);
    *(_WORD *)(v37 + 12) = 2081;
    swift_bridgeObjectRetain(a2);
    v48 = sub_100012B20(v45, a2, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v48, aBlock, v37 + 14, v37 + 22);
    swift_bridgeObjectRelease_n(a2, 3);
    _os_log_impl((void *)&_mh_execute_header, v34, v35, "%s Showing alert with description: %{private}s", (uint8_t *)v37, 0x16u);
    v41 = v42;
    swift_arrayDestroy(v42, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v41, -1, -1);
    swift_slowDealloc(v37, -1, -1);

    (*(void (**)(char *, uint64_t))(v47 + 8))(v46, v43);
  }
  else
  {

    swift_bridgeObjectRelease_n(a2, 2);
    (*(void (**)(char *, uint64_t))(v47 + 8))(v46, v6);
  }
  objc_msgSend(v25, "presentViewController:animated:completion:", v20, 1, 0);

}

uint64_t sub_10009009C(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v3;

  result = swift_unknownObjectWeakLoadStrong(a2 + qword_1000F00C8);
  if (result)
  {
    v3 = result;
    sub_100075260((uint64_t)_swiftEmptyArrayStorage);
    return swift_unknownObjectRelease(v3);
  }
  return result;
}

void sub_1000900E8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  NSString v15;
  NSString v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  NSString v21;
  void *v22;
  void *v23;
  id v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  Class isa;
  id v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  NSString v33;
  void *v34;
  id v35;
  uint64_t v36;
  Class v37;
  id v38;
  id v39;
  char *v40;
  uint64_t v41;
  char *v42;
  NSObject *v43;
  os_log_type_t v44;
  uint8_t *v45;
  void **v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t ObjectType;
  __int128 v52;
  id v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  id v57;
  uint64_t v58;
  uint64_t v59;
  void **aBlock;
  uint64_t v61;
  void (*v62)(uint64_t, void *);
  void *v63;
  uint64_t (*v64)();
  uint64_t v65;

  ObjectType = swift_getObjectType(v0);
  v1 = type metadata accessor for Logger(0);
  v55 = *(_QWORD *)(v1 - 8);
  v56 = v1;
  __chkstk_darwin(v1);
  v54 = (char *)&v50 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = type metadata accessor for Locale(0);
  __chkstk_darwin(v3);
  v5 = (char *)&v50 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for String.LocalizationValue(0);
  __chkstk_darwin(v6);
  v8 = (char *)&v50 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = String.LocalizationValue.init(stringLiteral:)(0xD000000000000052, 0x80000001000BEBE0);
  static Locale.current.getter(v9);
  String.init(localized:table:bundle:locale:comment:)(v8, 0, 0, 0, v5, 0, 0, 256);
  v11 = v10;
  v12 = String.LocalizationValue.init(stringLiteral:)(0xD000000000000058, 0x80000001000BEC40);
  static Locale.current.getter(v12);
  String.init(localized:table:bundle:locale:comment:)(v8, 0, 0, 0, v5, 0, 0, 256);
  v14 = v13;
  v15 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v11);
  v16 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v14);
  v17 = objc_msgSend((id)objc_opt_self(UIAlertController), "alertControllerWithTitle:message:preferredStyle:", v15, v16, 1);

  v18 = String.LocalizationValue.init(stringLiteral:)(0xD000000000000056, 0x80000001000BECA0);
  static Locale.current.getter(v18);
  String.init(localized:table:bundle:locale:comment:)(v8, 0, 0, 0, v5, 0, 0, 256);
  v20 = v19;
  v21 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v20);
  v64 = ConfigurationIntentResponseCode.rawValue.getter;
  v65 = 0;
  aBlock = _NSConcreteStackBlock;
  v61 = 1107296256;
  v62 = sub_10008E550;
  v63 = &unk_1000E2098;
  v22 = _Block_copy(&aBlock);
  swift_release(v65);
  v23 = (void *)objc_opt_self(UIAlertAction);
  v24 = objc_msgSend(v23, "actionWithTitle:style:handler:", v21, 1, v22);
  _Block_release(v22);

  sub_1000275F4(0, (unint64_t *)&qword_1000EF4C0, (uint64_t)&type metadata for String);
  v26 = v25;
  v27 = swift_allocObject(v25, 64, 7);
  v52 = xmmword_1000B1580;
  *(_OWORD *)(v27 + 16) = xmmword_1000B1580;
  *(_QWORD *)(v27 + 32) = 0xD00000000000002DLL;
  *(_QWORD *)(v27 + 40) = 0x80000001000BEB30;
  strcpy((char *)(v27 + 48), "CancelAction");
  *(_BYTE *)(v27 + 61) = 0;
  *(_WORD *)(v27 + 62) = -5120;
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v27);
  v29 = (id)HKUIJoinStringsForAutomationIdentifier(isa);

  objc_msgSend(v24, "setAccessibilityIdentifier:", v29);
  v53 = v24;
  objc_msgSend(v17, "addAction:", v24);
  v30 = String.LocalizationValue.init(stringLiteral:)(0xD00000000000005CLL, 0x80000001000BED00);
  static Locale.current.getter(v30);
  String.init(localized:table:bundle:locale:comment:)(v8, 0, 0, 0, v5, 0, 0, 256);
  v32 = v31;
  v33 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v32);
  v64 = sub_100090790;
  v65 = 0;
  aBlock = _NSConcreteStackBlock;
  v61 = 1107296256;
  v62 = sub_10008E550;
  v63 = &unk_1000E20C0;
  v34 = _Block_copy(&aBlock);
  swift_release(v65);
  v35 = objc_msgSend(v23, "actionWithTitle:style:handler:", v33, 0, v34);
  _Block_release(v34);

  v36 = swift_allocObject(v26, 64, 7);
  *(_OWORD *)(v36 + 16) = v52;
  *(_QWORD *)(v36 + 32) = 0xD00000000000002DLL;
  *(_QWORD *)(v36 + 40) = 0x80000001000BEB30;
  strcpy((char *)(v36 + 48), "SettingsAction");
  *(_BYTE *)(v36 + 63) = -18;
  v37 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v36);
  v38 = (id)HKUIJoinStringsForAutomationIdentifier(v37);

  objc_msgSend(v35, "setAccessibilityIdentifier:", v38);
  objc_msgSend(v17, "addAction:", v35);
  v39 = objc_msgSend(v17, "setPreferredAction:", v35);
  v40 = v54;
  v41 = static Logger.general.getter(v39);
  v42 = v40;
  v43 = Logger.logObject.getter(v41);
  v44 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v43, v44))
  {
    v45 = (uint8_t *)swift_slowAlloc(12, -1);
    v46 = (void **)swift_slowAlloc(32, -1);
    aBlock = v46;
    *(_DWORD *)v45 = 136315138;
    v47 = _typeName(_:qualified:)(ObjectType, 0);
    v49 = v48;
    v58 = sub_100012B20(v47, v48, (uint64_t *)&aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v58, &v59, v45 + 4, v45 + 12);
    swift_bridgeObjectRelease(v49);
    _os_log_impl((void *)&_mh_execute_header, v43, v44, "%s Showing notification authorization denied alert", v45, 0xCu);
    swift_arrayDestroy(v46, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v46, -1, -1);
    swift_slowDealloc(v45, -1, -1);
  }

  (*(void (**)(char *, uint64_t))(v55 + 8))(v42, v56);
  objc_msgSend(v57, "presentViewController:animated:completion:", v17, 1, 0);

}

uint64_t sub_100090790()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v5;

  v0 = type metadata accessor for ExternalDeepLink(0);
  v1 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin(v0);
  v3 = (char *)&v5 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, _QWORD, uint64_t))(v1 + 104))(v3, enum case for ExternalDeepLink.healthSettings(_:), v0);
  ExternalDeepLink.open()();
  return (*(uint64_t (**)(char *, uint64_t))(v1 + 8))(v3, v0);
}

void sub_10009081C()
{
  _swift_stdlib_reportUnimplementedInitializer("Health.HealthNotificationsWelcomeViewController", 47, "init(featureManager:featureIdentifiers:title:detailText:subtitleText:icon:)", 75, 0);
  __break(1u);
}

void sub_100090848()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + qword_1000F00B8));
  swift_release(*(_QWORD *)(v0 + qword_1000F00C0));
  sub_100061088(v0 + qword_1000F00C8);

}

id sub_1000908A4()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for HealthNotificationsWelcomeViewController(0);
  return objc_msgSendSuper2(&v2, "dealloc");
}

void sub_1000908D8(uint64_t a1)
{
  swift_release(*(_QWORD *)(a1 + qword_1000F00B8));
  swift_release(*(_QWORD *)(a1 + qword_1000F00C0));
  sub_100061088(a1 + qword_1000F00C8);

}

uint64_t sub_100090940()
{
  return type metadata accessor for HealthNotificationsWelcomeViewController(0);
}

uint64_t sub_100090948()
{
  return 3;
}

uint64_t sub_100090950()
{
  uint64_t v0;

  swift_unknownObjectWeakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100090974()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100090998(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v3;

  return sub_10008F17C(a1, a2, a3, *(_QWORD *)(v3 + 16), *(_QWORD *)(v3 + 24));
}

uint64_t sub_1000909A0()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  sub_100043F18(*(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), *(_BYTE *)(v0 + 40));
  return swift_deallocObject(v0, 56, 7);
}

void sub_1000909D0()
{
  uint64_t v0;

  sub_10008F3B8(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), *(_BYTE *)(v0 + 40), *(_QWORD *)(v0 + 48));
}

uint64_t sub_1000909E4()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100090A08(uint64_t a1)
{
  uint64_t v1;

  return sub_10009009C(a1, *(_QWORD *)(v1 + 16));
}

void sub_100090A24()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  id v4;
  id v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  _QWORD v9[5];
  uint64_t v10;

  v1 = *v0;
  v2 = swift_allocObject(&unk_1000E2160, 32, 7);
  *(_QWORD *)(v2 + 16) = v0;
  *(_QWORD *)(v2 + 24) = v1;
  v3 = *(uint64_t *)((char *)v0 + qword_1000ED7F0);
  v4 = objc_allocWithZone((Class)HKProfileStore);
  swift_retain(v0);
  v5 = objc_msgSend(v4, "initWithHealthStore:", v3);
  v6 = swift_allocObject(&unk_1000E2188, 32, 7);
  *(_QWORD *)(v6 + 16) = sub_100090C5C;
  *(_QWORD *)(v6 + 24) = v2;
  v9[4] = sub_100091F74;
  v10 = v6;
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 1107296256;
  v9[2] = sub_100091F7C;
  v9[3] = &unk_1000E21A0;
  v7 = _Block_copy(v9);
  v8 = v10;
  swift_retain(v2);
  swift_release(v8);
  objc_msgSend(v5, "fetchAllProfilesWithCompletion:", v7);
  _Block_release(v7);
  swift_release(v2);

}

void sub_100090B4C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  id v8;
  void *v9;
  uint64_t v10;
  id v11;

  if (!((unint64_t)a1 >> 62))
  {
    v6 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain(a1);
    if (v6)
      goto LABEL_3;
LABEL_13:
    swift_bridgeObjectRelease(a1);
    return;
  }
  if (a1 < 0)
    v10 = a1;
  else
    v10 = a1 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(a1);
  v6 = _CocoaArrayWrapper.endIndex.getter(v10);
  if (!v6)
    goto LABEL_13;
LABEL_3:
  if (v6 >= 1)
  {
    v7 = 0;
    do
    {
      if ((a1 & 0xC000000000000001) != 0)
        v8 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v7, a1);
      else
        v8 = *(id *)(a1 + 8 * v7 + 32);
      v9 = v8;
      ++v7;
      v11 = v8;
      sub_100090C64(&v11, a2, a3);

    }
    while (v6 != v7);
    goto LABEL_13;
  }
  __break(1u);
}

